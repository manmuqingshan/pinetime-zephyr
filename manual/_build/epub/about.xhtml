<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>About</title>
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="about">
<h1>About</h1>
<p>I got a pinetime development kit very early.
I would like to thank the folks from <a class="reference external" href="https://www.pine64.org/">https://www.pine64.org/</a> for the kit.</p>
<p>The Nordic nrf52832 is an Arm based, 32bit microcontroller with a lot of flash, RAM memory and(!) bluetooth!
It is a good platform to explore the wonderfull world of opensource RTOS’s.
I choose the Zephyr platform, because it already contained the display driver, and the bluetooth functionality.
Furthermore it can be updated wirelessly.</p>
<p>I started of with adapting simple samples, so they would run on the pinetime watch.
Meanwhile I learned how to adapt the board definition file.
Gradually this morphed into a pinetime-toolkit.
A few experts contributed and improved this kit so it became usable.</p>
<p>I took a long break from this project, zephyr evolved and a project for creating an open source watch, the hypnos-firmware flourished.</p>
<p>The drivers for the heartrate sensor, touchpanel that I adapted, became obsolete.
The pinetime board definition file is now part of the zephyr RTOS distribution.</p>
<p>Recently I discovered that the standard focaltech touchscreen driver could be adapted easily so it would run on the pinetime and integrate nicely with the LVGL-gui. There were several OLED ssd1306 watches on my desk and I wondered if I could run Zephyr and LVGL (graphical stuff) on them as well. (yes, we can!)
I played around with the “native_posix_64” board, which is a virtual board that allows you to run firmware on your computer instead of on the watch (no need for flashing).</p>
<p>This gave me the idea for an opensource-watch-framework.
Start of with simple samples, and add some more functionality, until finally you end up with a smartwatch.
The framework is build around three smartwatches, the pinetime, the ds_d6 and the posix_sdl.
It should work on other platform as well, with minor modifications.
I only recently got the idea for out-of-tree development.
Just put all the modified drivers, board definitions and application in one place outside of the zephyr-tree.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">A</span> <span class="n">word</span> <span class="n">of</span> <span class="n">warning</span><span class="p">:</span> <span class="n">this</span> <span class="ow">is</span> <span class="n">work</span> <span class="ow">in</span> <span class="n">progress</span><span class="o">.</span>
<span class="n">You</span><span class="s1">&#39;re likely to have a better skillset then me.</span>
<span class="n">You</span> <span class="n">are</span> <span class="n">invited</span> <span class="n">to</span> <span class="n">add</span> <span class="n">the</span> <span class="n">missing</span> <span class="n">pieces</span> <span class="ow">and</span> <span class="n">to</span> <span class="n">improve</span> <span class="n">what</span><span class="s1">&#39;s already there.</span>
</pre></div>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>