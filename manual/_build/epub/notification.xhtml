<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Bluetooth Notification</title>
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="bluetooth-notification">
<h1>Bluetooth Notification</h1>
<p>As mentioned earlier, I searched for ways to transfer data to, and(!) from the device.
Bluetooth data exchange might be a standard feature of Android, Apple …</p>
<p>On a linuxbox there are ways to do this as well!</p>
<p>In the zephyr samples,  I found a sample for Indication.
I created a sample for Notification. (samples/bluetooth/Peripheral-notification)</p>
<div class="section" id="what">
<h2>What?</h2>
<p>The BLE standard defines two ways to transfer data from the server to the client: notification and indication.</p>
<p>Notification don’t need acknowledgement, so it is faster. Hence, server does not know if the message reached the client….</p>
</div>
<div class="section" id="how">
<h2>How?</h2>
<p>Notification has to be enabled.</p>
<p>Linuxbox (bluez) writes “enable” to the watch notification characteristic.</p>
<p>Once Nofication is enabled the watch sends continuously messages :
the maximum data payload size defined by the specification in each message is 20 bytes.</p>
</div>
<div class="section" id="bluez">
<h2>Bluez</h2>
<p>on linux you could use  “bluetoothctl”</p>
<p>There is an example for heartrates.</p>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="c1">#bluetoothctl</span>

<span class="n">connect</span> <span class="n">MAC</span><span class="o">-</span><span class="n">device</span>

<span class="n">menu</span> <span class="n">gatt</span>
<span class="n">select</span><span class="o">-</span><span class="n">attribute</span> <span class="mi">00002</span><span class="n">a37</span><span class="o">-</span><span class="mi">0000</span><span class="o">-</span><span class="mi">1000</span><span class="o">-</span><span class="mi">8000</span><span class="o">-</span><span class="mi">00805</span><span class="n">f9b34fb</span>
<span class="n">notify</span> <span class="n">on</span>

<span class="k">if</span> <span class="nb">all</span> <span class="n">goes</span> <span class="n">well</span><span class="p">,</span> <span class="n">the</span> <span class="n">watch</span> <span class="n">starts</span> <span class="n">sending</span> <span class="n">heartrates</span>

<span class="ow">in</span> <span class="n">case</span> <span class="n">it</span> <span class="n">stops</span><span class="p">:</span>

<span class="n">notify</span> <span class="n">off</span>
<span class="n">notify</span> <span class="n">on</span>
</pre></div>
</div>
</div>
<div class="section" id="a-word-on-attributes">
<h2>A word on attributes</h2>
<p>The data that the server exposes is structured as attributes.</p>
<p>Attribute type (Universally Unique Identifier or UUID)
This is a :</p>
<blockquote>
<div><ul class="simple">
<li><p>16-bit number</p></li>
<li><p>or 128-bit number</p></li>
</ul>
</div></blockquote>
<p>The 16-bit number is converted to 128-bit by means of a
128-bit base <a class="reference external" href="UUID:00000000-0000-1000-8000-00805F9B34FB">UUID:00000000-0000-1000-8000-00805F9B34FB</a>.</p>
<p>These 16-bit numbers are standardised. On each device the temperature measurement value is 0x2A1C.</p>
<p>Because I create a custom service to exchange data I use a custom attribute type, also sometimes referred to as vendor-specific UUID.
BLE_CHARACTERISTIC_UUID= “12345678-1234-5678-1234-56789abcdef1”</p>
</div>
<div class="section" id="attribute-handle">
<h2>Attribute Handle</h2>
<p>This is a 16-bit value that the server assigns to each of its attributes — think of it as an address. This value is used by the client to reference a specific attribute and is guaranteed by the server to uniquely identify the attribute during the life of the connection between two devices. The range of handles is 0x0001-0xFFFF, where the value of 0x0000 is reserved.</p>
</div>
<div class="section" id="python">
<h2>Python</h2>
<p>The scripts are provided. (scan+not.py)
But here is a short explanation on how to enable notifications.</p>
<p>On linux one could use the Gatttool from the commandprompt.</p>
<p>Another option is Python!</p>
<p>In this manual the module Bluepy is used : <a class="reference external" href="https://github.com/IanHarvey/bluepy">https://github.com/IanHarvey/bluepy</a>.</p>
<p>(custom service)
BLE_SERVICE_UUID =”12345678-1234-5678-1234-56789abcdef0”
BLE_CHARACTERISTIC_UUID= “12345678-1234-5678-1234-56789abcdef1”</p>
<p>ch = ble_service.getCharacteristics()[0]
ch.valHandle (this gets you the handle to the notification characteristic</p>
<p># Writing x01 is the protocol for all BLE notifications.
# However …. you need to write it to the handle + 1</p>
<p>dev.writeCharacteristic(ch.valHandle+1, b”x01x00”, withResponse=True)</p>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>