<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>The idea behind the framework</title>
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="the-idea-behind-the-framework">
<h1>The idea behind the framework</h1>
<p>I adapted the pinetime hypnos firmware to run on the Desay D6 smartwatch.</p>
<p>This watch has a small (128x32) oled display and is rather minimalistic.</p>
<p>It does not have a touchscreen, but a single touch button.</p>
<p>One cannot run the software of a feature-rich smartwatch on a simple one.
But the reverse can be done.</p>
<div class="section" id="building-blocks">
<h2>Building blocks</h2>
<p>A smartwatch has drivers for motion sensors, bluetooth, HR sensor, a battery, a screen, uses a clock, sets the clock, has a button…</p>
<p>If all put together, you’ll end up with the firmware and a big chunk of code.</p>
<p>This project explores features separately, in the “samples” directory.</p>
<p>Reading out a button, how is it done? How do you make a distinction between click, double click, long press? You can find this in the samples directory. These resembles building blocks or modules.</p>
<p>The oswatch-xxxx directories assemble some of the building blocks.</p>
<p>The oswatch-cts shows how the time is set with bluetooth, but also uses the button, the screen, the clock.</p>
<p>Oswatch-full would include everything.</p>
<p>For your own project you can choose the oswatch-template which suits you most.</p>
</div>
<div class="section" id="screen">
<h2>Screen</h2>
<p>The OLED screen can only display a few lines.
This is used as a basis for screen layout.</p>
<p>Multiple screens can be displayed, but each screen has little info.</p>
</div>
<div class="section" id="touchscreen">
<h2>Touchscreen</h2>
<p>Although the LVGL graphics library offers touchscreen support and the Pinetime watch has a touchscreen, the emphasis was put on the side button. Most watches have a button.</p>
<p>Selecting a screen and a parameter on the screen is done with the button instead of the touchscreen.</p>
</div>
<div class="section" id="heart-rate-sensor">
<h2>Heart rate sensor</h2>
<p>Most heart rate sensors have a light sensor and an LED.
Instead of trying to get a heart rate out of it.
Emphasis was put on reading out the light sensor and controlling the LED.</p>
<p>This way my cheap oled watch can be used to read out LED signals, and thus be used as a communication device.</p>
<p>The LED cannot be controlled independently on the pinetime. Suppose you want to use the lightsensor without the led, it is not possible.</p>
</div>
<div class="section" id="bluetooth">
<h2>Bluetooth</h2>
<p>Setting time and timers or other parameters is a nuisance on a small device. It is far more easier to set/read parameters on a linux box or android device and transfer them to the smartwatch.</p>
<p>The easiest would be to use bluetooth UART, this is not a part of the open source zephyr (apache 2 license) , but belongs to Nordic. (which supply their own version of zephyr)</p>
<p>The idea I will explore is to use 2 bluetoothservices, one to request and one to supply the value of a parameter.</p>
<p>Bluetooth is used to set the time (CTS) current time service.</p>
</div>
<div class="section" id="power-saving">
<h2>Power saving</h2>
<p>Power saving makes sense when the device is battery operated, which is probably not always the case.
Hence, power saving is an option.</p>
</div>
<div class="section" id="updating-over-the-air">
<h2>Updating over the air</h2>
<p>FOTA : firmware updating over the air, is a useful option.
The way firmware updates work, is to have two firmware images on the device.
In the case of the cheap OLED device, there is no extra memory to store firmware images.
Hence, FOTA is an option.</p>
</div>
<div class="section" id="motion-sensor">
<h2>Motion sensor</h2>
<p>The motion is used as a stepcounter, but could be used for other purposes as well. Knock sensor, position sensor, movement detection …
emphasis is put on reading out the sensor rather than processing the data.</p>
</div>
<div class="section" id="drivers">
<h2>Drivers</h2>
<p>Creating drivers takes a lot of time. Chances are that a specific driver does not exist for zephyr, or that the standard one does not work fully.</p>
<p>To overcome this problem a zephyr driver that resembles the needed driver is adapted and placed out of tree. In some cases I have not even bothered to change the name. The max30101 lightsensor is not present in the smartwatches I worked with, but it exists as a driver that can easily be adapted. In zephyr this means that the board definition files need to refer to this driver as well. Board definition has to be placed out of tree as well.</p>
</div>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>