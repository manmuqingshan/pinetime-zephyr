<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>hacking the pinetime smartwatch</title>
    <link rel="stylesheet" href="../_static/pygments.css" type="text/css" />
    <link rel="stylesheet" href="../_static/epub.css" type="text/css" /> 
  </head><body>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="hacking-the-pinetime-smartwatch">
<h1>hacking   the pinetime smartwatch</h1>
<div class="highlight-default notranslate"><div class="highlight"><pre><span></span><span class="n">The</span> <span class="n">pinetime</span> <span class="ow">is</span> <span class="n">preloaded</span> <span class="k">with</span> <span class="n">firmware</span><span class="o">.</span>
<span class="n">This</span> <span class="n">firmware</span> <span class="ow">is</span> <span class="n">secured</span><span class="p">,</span> <span class="n">you</span> <span class="n">cannot</span> <span class="n">peek</span> <span class="n">into</span> <span class="n">it</span><span class="o">.</span>
</pre></div>
</div>
<div class="admonition note">
<p class="admonition-title">Note</p>
<p>The pinetime has a swd interface.
To be able to write firmware,  you need special hardware.
I use a stm-link which is very cheap(2$).
You can also use the GPIO header of a raspberry pi.
(my repo: <a class="reference external" href="https://github.com/najnesnaj/openocd">https://github.com/najnesnaj/openocd</a> is adapted for the orange pi)</p>
</div>
<p>To flash the software I use openocd :
example for stm-link usb-stick</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">#</span> openocd -s /usr/local/share/openocd/scripts -f interface/stlink.cfg -f target/nrf52.cfg
</pre></div>
</div>
<p>example for the orange-pi GPIO header (or raspberry)</p>
<blockquote>
<div><p># openocd -f /usr/local/share/openocd/scripts/interface/sysfsgpio-raspberrypi.cfg
-c ‘transport select swd’ -f /usr/local/share/openocd/scripts/target/nrf52.cfg
-c ‘bindto 0.0.0.0’</p>
</div></blockquote>
<p>once you started the openocd background server, you can connect to it using:</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="gp">#</span>telnet <span class="m">127</span>.0.0.1 <span class="m">4444</span>
</pre></div>
</div>
<p>programming</p>
<div class="highlight-console notranslate"><div class="highlight"><pre><span></span><span class="go">once your telnet sessions started:</span>
<span class="go">Trying 127.0.0.1...</span>
<span class="go">Connected to 127.0.0.1.</span>
<span class="go">Escape character is &#39;^]&#39;.</span>
<span class="go">Open On-Chip Debugger</span>
<span class="gp">&gt;</span> program zephyr.bin

<span class="go">target halted due to debug-request, current mode: Thread</span>
<span class="go">xPSR: 0x01000000 pc: 0x00001534 msp: 0x20004a10</span>
<span class="go">** Programming Started **</span>
<span class="go">auto erase enabled</span>
<span class="go">using fast async flash loader. This is currently supported</span>
<span class="go">only with ST-Link and CMSIS-DAP. If you have issues, add</span>
<span class="go">&quot;set WORKAREASIZE 0&quot; before sourcing nrf51.cfg/nrf52.cfg to disable it</span>
<span class="go">target halted due to breakpoint, current mode: Thread</span>
<span class="go">xPSR: 0x61000000 pc: 0x2000001e msp: 0x20004a10</span>
<span class="go">wrote 24576 bytes from file zephyr.bin in 1.703540s (14.088 KiB/s)</span>
<span class="go">** Programming Finished **</span>

<span class="go">And finally execute a reset :</span>
<span class="gp">&gt;</span>reset
</pre></div>
</div>
<p>removing write protection see:   <a class="reference internal" href="writeprotection.xhtml#flashing"><span class="std std-ref">howto flash your zephyr image</span></a></p>
</div>


            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>