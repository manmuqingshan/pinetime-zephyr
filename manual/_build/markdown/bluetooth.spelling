bluetooth.rst:7: (wirelessly)  Bluetooth is a very nice feature, it lets you exchange data wirelessly and (!) update firmware wirelessly.
bluetooth.rst:7: (wirelessly)  Bluetooth is a very nice feature, it lets you exchange data wirelessly and (!) update firmware wirelessly.
bluetooth.rst:16: (commnunication)  A word on bluetooth-serial commnunication
bluetooth.rst:18: (manufacterers)  Smartwatch manufacterers usually supply you with a smartwatch app.
bluetooth.rst:18: (communicatie)  This app can communicatie trough bluetooth, and get/send data to the watch.
bluetooth.rst:23: (NCS)  You could use nRF Connect SDK (often referred as NCS),it is Nordic Semiconductor SDK based on zephyr. It has additional features that could be useful for pinetime, namely bluetooth modules and bluetooth services. Important to mention that even though, NCS forks zephyr it is kept close to it and it is regularly updated to latest zephyr (typically every 2-3 weeks).
bluetooth.rst:27: (Uart)  The main reason why i'm bringing it up is bluetooth shell. Zephyr has very nice shell module with multiple transports (UART, RTT). NCS extends it with bluetooth transport (using Nordic Uart Service) and host tool for using it. There is an application for linux from which you can use shell over bluetooth, get logs, etc.. It is really cool and can be very useful when playing with pinetime where you can get logs or control/tune things with only wireless connection to your PC. Here is a demonstration of bluetooth console used in one of nordic reference kits: 
bluetooth.rst:88: (bsim)  the no-bluetooth, no-watch approach : nrf52_bsim
bluetooth.rst:90: (devboard)  Suppose you have no watch, no devboard, nor any bluetooth dongles?
bluetooth.rst:94: (bsim)  We follow the same logic, but this time we specify the nrf52_bsim board.
bluetooth.rst:122: (ubuntu)  VBOX running ubuntu (first disactivate driver in windows)
bluetooth.rst:122: (disactivate)  VBOX running ubuntu (first disactivate driver in windows)
bluetooth.rst:122: (intel)  (CTRL home -- select usb -- (intel in my case)) -- this lets you select the integrated bluetoothmodule of your laptop
bluetooth.rst:122: (bluetoothmodule)  (CTRL home -- select usb -- (intel in my case)) -- this lets you select the integrated bluetoothmodule of your laptop
bluetooth.rst:138: (Espruino)  Device C8:B7:89:A9:B0:C9 Espruino-107 b0c9
bluetooth.rst:146: (fb)  UUID: Device Information        (0000180a-0000-1000-8000-00805f9b34fb)
bluetooth.rst:146: (fb)  UUID: Current Time Service      (00001805-0000-1000-8000-00805f9b34fb)
bluetooth.rst:190: (hci)  /org/bluez/hci0/dev_74_71_4B_D5_18_21/service001f/char0023
bluetooth.rst:190: (fb)  00002a38-0000-1000-8000-00805f9b34fb
