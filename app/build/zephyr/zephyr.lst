
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	2000a080 	.word	0x2000a080
 **********************/

void _lv_gc_clear_roots(void)
{
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
   4:	000046a9 	.word	0x000046a9
   8:	0002437b 	.word	0x0002437b
   c:	000046d9 	.word	0x000046d9
  10:	000046d9 	.word	0x000046d9
  14:	000046d9 	.word	0x000046d9
  18:	000046d9 	.word	0x000046d9
	...
  2c:	00004439 	.word	0x00004439
  30:	000046d9 	.word	0x000046d9
  34:	00000000 	.word	0x00000000
  38:	000043f1 	.word	0x000043f1
  3c:	00023faf 	.word	0x00023faf

00000040 <_irq_vector_table>:
  40:	00004669 00015821 00004669 00004669     iF..!X..iF..iF..
  50:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  60:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  70:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  80:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  90:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  a0:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  b0:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  c0:	00004669 00004669 00004669 00004669     iF..iF..iF..iF..
  d0:	00004669 00004669 00004669              iF..iF..iF..

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x8>
     182:	b94a      	cbnz	r2, 198 <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x8>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b96e 	b.w	474 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f806 	bl	1b0 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__udivmoddi4>:
     1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1b4:	9d08      	ldr	r5, [sp, #32]
     1b6:	460e      	mov	r6, r1
     1b8:	4604      	mov	r4, r0
     1ba:	468c      	mov	ip, r1
     1bc:	2b00      	cmp	r3, #0
     1be:	f040 8081 	bne.w	2c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     1c2:	428a      	cmp	r2, r1
     1c4:	4617      	mov	r7, r2
     1c6:	d945      	bls.n	254 <CONFIG_FLASH_SIZE+0x54>
     1c8:	fab2 f282 	clz	r2, r2
     1cc:	b14a      	cbz	r2, 1e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22>
     1ce:	f1c2 0120 	rsb	r1, r2, #32
     1d2:	fa06 f302 	lsl.w	r3, r6, r2
     1d6:	fa20 f101 	lsr.w	r1, r0, r1
     1da:	4097      	lsls	r7, r2
     1dc:	ea41 0c03 	orr.w	ip, r1, r3
     1e0:	4094      	lsls	r4, r2
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	0c23      	lsrs	r3, r4, #16
     1e8:	fbbc f6fe 	udiv	r6, ip, lr
     1ec:	b2b9      	uxth	r1, r7
     1ee:	fb0e cc16 	mls	ip, lr, r6, ip
     1f2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1f6:	fb06 f001 	mul.w	r0, r6, r1
     1fa:	4298      	cmp	r0, r3
     1fc:	d909      	bls.n	212 <CONFIG_FLASH_SIZE+0x12>
     1fe:	18fb      	adds	r3, r7, r3
     200:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     204:	f080 8115 	bcs.w	432 <CONFIG_LOG_BUFFER_SIZE+0x32>
     208:	4298      	cmp	r0, r3
     20a:	f240 8112 	bls.w	432 <CONFIG_LOG_BUFFER_SIZE+0x32>
     20e:	3e02      	subs	r6, #2
     210:	443b      	add	r3, r7
     212:	1a1b      	subs	r3, r3, r0
     214:	b2a4      	uxth	r4, r4
     216:	fbb3 f0fe 	udiv	r0, r3, lr
     21a:	fb0e 3310 	mls	r3, lr, r0, r3
     21e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     222:	fb00 f101 	mul.w	r1, r0, r1
     226:	42a1      	cmp	r1, r4
     228:	d909      	bls.n	23e <CONFIG_FLASH_SIZE+0x3e>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	f080 8101 	bcs.w	436 <CONFIG_LOG_BUFFER_SIZE+0x36>
     234:	42a1      	cmp	r1, r4
     236:	f240 80fe 	bls.w	436 <CONFIG_LOG_BUFFER_SIZE+0x36>
     23a:	3802      	subs	r0, #2
     23c:	443c      	add	r4, r7
     23e:	1a64      	subs	r4, r4, r1
     240:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     244:	2100      	movs	r1, #0
     246:	b11d      	cbz	r5, 250 <CONFIG_FLASH_SIZE+0x50>
     248:	40d4      	lsrs	r4, r2
     24a:	2300      	movs	r3, #0
     24c:	e9c5 4300 	strd	r4, r3, [r5]
     250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     254:	b902      	cbnz	r2, 258 <CONFIG_FLASH_SIZE+0x58>
     256:	deff      	udf	#255	; 0xff
     258:	fab2 f282 	clz	r2, r2
     25c:	2a00      	cmp	r2, #0
     25e:	d14f      	bne.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     260:	1bcb      	subs	r3, r1, r7
     262:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     266:	fa1f f887 	uxth.w	r8, r7
     26a:	2101      	movs	r1, #1
     26c:	fbb3 fcfe 	udiv	ip, r3, lr
     270:	0c26      	lsrs	r6, r4, #16
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     27a:	fb08 f30c 	mul.w	r3, r8, ip
     27e:	42b3      	cmp	r3, r6
     280:	d907      	bls.n	292 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     282:	19be      	adds	r6, r7, r6
     284:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     288:	d202      	bcs.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     28a:	42b3      	cmp	r3, r6
     28c:	f200 80eb 	bhi.w	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     290:	4684      	mov	ip, r0
     292:	1af6      	subs	r6, r6, r3
     294:	b2a3      	uxth	r3, r4
     296:	fbb6 f0fe 	udiv	r0, r6, lr
     29a:	fb0e 6610 	mls	r6, lr, r0, r6
     29e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     2a2:	fb08 f800 	mul.w	r8, r8, r0
     2a6:	45a0      	cmp	r8, r4
     2a8:	d907      	bls.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2aa:	193c      	adds	r4, r7, r4
     2ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2b0:	d202      	bcs.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2b2:	45a0      	cmp	r8, r4
     2b4:	f200 80d2 	bhi.w	45c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
     2b8:	4618      	mov	r0, r3
     2ba:	eba4 0408 	sub.w	r4, r4, r8
     2be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2c2:	e7c0      	b.n	246 <CONFIG_FLASH_SIZE+0x46>
     2c4:	428b      	cmp	r3, r1
     2c6:	d908      	bls.n	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     2c8:	2d00      	cmp	r5, #0
     2ca:	f000 80af 	beq.w	42c <CONFIG_LOG_BUFFER_SIZE+0x2c>
     2ce:	2100      	movs	r1, #0
     2d0:	e9c5 0600 	strd	r0, r6, [r5]
     2d4:	4608      	mov	r0, r1
     2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2da:	fab3 f183 	clz	r1, r3
     2de:	2900      	cmp	r1, #0
     2e0:	d149      	bne.n	376 <CONFIG_BT_DEVICE_APPEARANCE+0x35>
     2e2:	42b3      	cmp	r3, r6
     2e4:	d302      	bcc.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     2e6:	4282      	cmp	r2, r0
     2e8:	f200 80bb 	bhi.w	462 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16>
     2ec:	1a84      	subs	r4, r0, r2
     2ee:	eb66 0303 	sbc.w	r3, r6, r3
     2f2:	2001      	movs	r0, #1
     2f4:	469c      	mov	ip, r3
     2f6:	2d00      	cmp	r5, #0
     2f8:	d0aa      	beq.n	250 <CONFIG_FLASH_SIZE+0x50>
     2fa:	e9c5 4c00 	strd	r4, ip, [r5]
     2fe:	e7a7      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     300:	f1c2 0320 	rsb	r3, r2, #32
     304:	4097      	lsls	r7, r2
     306:	40d8      	lsrs	r0, r3
     308:	4091      	lsls	r1, r2
     30a:	40de      	lsrs	r6, r3
     30c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     310:	4308      	orrs	r0, r1
     312:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     316:	fbb6 f1fe 	udiv	r1, r6, lr
     31a:	fa1f f887 	uxth.w	r8, r7
     31e:	fb0e 6611 	mls	r6, lr, r1, r6
     322:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     326:	fb01 f308 	mul.w	r3, r1, r8
     32a:	42b3      	cmp	r3, r6
     32c:	fa04 f402 	lsl.w	r4, r4, r2
     330:	d909      	bls.n	346 <CONFIG_BT_DEVICE_APPEARANCE+0x5>
     332:	19be      	adds	r6, r7, r6
     334:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     338:	f080 808e 	bcs.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     33c:	42b3      	cmp	r3, r6
     33e:	f240 808b 	bls.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     342:	3902      	subs	r1, #2
     344:	443e      	add	r6, r7
     346:	1af3      	subs	r3, r6, r3
     348:	b286      	uxth	r6, r0
     34a:	fbb3 f0fe 	udiv	r0, r3, lr
     34e:	fb0e 3310 	mls	r3, lr, r0, r3
     352:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     356:	fb00 f308 	mul.w	r3, r0, r8
     35a:	42b3      	cmp	r3, r6
     35c:	d907      	bls.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     35e:	19be      	adds	r6, r7, r6
     360:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     364:	d274      	bcs.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     366:	42b3      	cmp	r3, r6
     368:	d972      	bls.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     36a:	3802      	subs	r0, #2
     36c:	443e      	add	r6, r7
     36e:	1af3      	subs	r3, r6, r3
     370:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     374:	e77a      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     376:	f1c1 0720 	rsb	r7, r1, #32
     37a:	fa03 f401 	lsl.w	r4, r3, r1
     37e:	fa22 f307 	lsr.w	r3, r2, r7
     382:	431c      	orrs	r4, r3
     384:	fa20 f907 	lsr.w	r9, r0, r7
     388:	fa06 f301 	lsl.w	r3, r6, r1
     38c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     390:	40fe      	lsrs	r6, r7
     392:	ea49 0903 	orr.w	r9, r9, r3
     396:	ea4f 4319 	mov.w	r3, r9, lsr #16
     39a:	fbb6 fefc 	udiv	lr, r6, ip
     39e:	fa1f f884 	uxth.w	r8, r4
     3a2:	fb0c 661e 	mls	r6, ip, lr, r6
     3a6:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     3aa:	fb0e fa08 	mul.w	sl, lr, r8
     3ae:	45b2      	cmp	sl, r6
     3b0:	fa02 f201 	lsl.w	r2, r2, r1
     3b4:	fa00 f301 	lsl.w	r3, r0, r1
     3b8:	d908      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     3ba:	19a6      	adds	r6, r4, r6
     3bc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     3c0:	d248      	bcs.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3c2:	45b2      	cmp	sl, r6
     3c4:	d946      	bls.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3c6:	f1ae 0e02 	sub.w	lr, lr, #2
     3ca:	4426      	add	r6, r4
     3cc:	eba6 060a 	sub.w	r6, r6, sl
     3d0:	fa1f f989 	uxth.w	r9, r9
     3d4:	fbb6 f0fc 	udiv	r0, r6, ip
     3d8:	fb0c 6610 	mls	r6, ip, r0, r6
     3dc:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     3e0:	fb00 f808 	mul.w	r8, r0, r8
     3e4:	45b0      	cmp	r8, r6
     3e6:	d907      	bls.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     3e8:	19a6      	adds	r6, r4, r6
     3ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     3ee:	d22d      	bcs.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     3f0:	45b0      	cmp	r8, r6
     3f2:	d92b      	bls.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     3f4:	3802      	subs	r0, #2
     3f6:	4426      	add	r6, r4
     3f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     3fc:	eba6 0608 	sub.w	r6, r6, r8
     400:	fba0 8902 	umull	r8, r9, r0, r2
     404:	454e      	cmp	r6, r9
     406:	46c4      	mov	ip, r8
     408:	46ce      	mov	lr, r9
     40a:	d318      	bcc.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     40c:	d015      	beq.n	43a <CONFIG_LOG_BUFFER_SIZE+0x3a>
     40e:	b375      	cbz	r5, 46e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x22>
     410:	ebb3 020c 	subs.w	r2, r3, ip
     414:	eb66 060e 	sbc.w	r6, r6, lr
     418:	fa06 f707 	lsl.w	r7, r6, r7
     41c:	fa22 f301 	lsr.w	r3, r2, r1
     420:	40ce      	lsrs	r6, r1
     422:	431f      	orrs	r7, r3
     424:	e9c5 7600 	strd	r7, r6, [r5]
     428:	2100      	movs	r1, #0
     42a:	e711      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     42c:	4629      	mov	r1, r5
     42e:	4628      	mov	r0, r5
     430:	e70e      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     432:	4666      	mov	r6, ip
     434:	e6ed      	b.n	212 <CONFIG_FLASH_SIZE+0x12>
     436:	4618      	mov	r0, r3
     438:	e701      	b.n	23e <CONFIG_FLASH_SIZE+0x3e>
     43a:	4543      	cmp	r3, r8
     43c:	d2e7      	bcs.n	40e <CONFIG_LOG_BUFFER_SIZE+0xe>
     43e:	ebb8 0c02 	subs.w	ip, r8, r2
     442:	eb69 0404 	sbc.w	r4, r9, r4
     446:	3801      	subs	r0, #1
     448:	46a6      	mov	lr, r4
     44a:	e7e0      	b.n	40e <CONFIG_LOG_BUFFER_SIZE+0xe>
     44c:	4660      	mov	r0, ip
     44e:	e7d3      	b.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     450:	4660      	mov	r0, ip
     452:	e78c      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     454:	4686      	mov	lr, r0
     456:	e7b9      	b.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     458:	4661      	mov	r1, ip
     45a:	e774      	b.n	346 <CONFIG_BT_DEVICE_APPEARANCE+0x5>
     45c:	3802      	subs	r0, #2
     45e:	443c      	add	r4, r7
     460:	e72b      	b.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     462:	4608      	mov	r0, r1
     464:	e747      	b.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     466:	f1ac 0c02 	sub.w	ip, ip, #2
     46a:	443e      	add	r6, r7
     46c:	e711      	b.n	292 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     46e:	4629      	mov	r1, r5
     470:	e6ee      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     472:	bf00      	nop

00000474 <__aeabi_idiv0>:
     474:	4770      	bx	lr
     476:	bf00      	nop

00000478 <strcmp>:
     478:	f810 2b01 	ldrb.w	r2, [r0], #1
     47c:	f811 3b01 	ldrb.w	r3, [r1], #1
     480:	2a01      	cmp	r2, #1
     482:	bf28      	it	cs
     484:	429a      	cmpcs	r2, r3
     486:	d0f7      	beq.n	478 <strcmp>
     488:	1ad0      	subs	r0, r2, r3
     48a:	4770      	bx	lr

0000048c <strlen>:
     48c:	4603      	mov	r3, r0
     48e:	f813 2b01 	ldrb.w	r2, [r3], #1
     492:	2a00      	cmp	r2, #0
     494:	d1fb      	bne.n	48e <strlen+0x2>
     496:	1a18      	subs	r0, r3, r0
     498:	3801      	subs	r0, #1
     49a:	4770      	bx	lr
     49c:	0000      	movs	r0, r0
	...

000004a0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     4a4:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     4a8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     4ac:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
     4b0:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4b2:	45a0      	cmp	r8, r4
{
     4b4:	460e      	mov	r6, r1
     4b6:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4b8:	d818      	bhi.n	4ec <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4ba:	4f1b      	ldr	r7, [pc, #108]	; (528 <ull_drift_ticks_get+0x88>)
     4bc:	a318      	add	r3, pc, #96	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4be:	e9d3 2300 	ldrd	r2, r3, [r3]
     4c2:	fbac 0107 	umull	r0, r1, ip, r7
     4c6:	f7ff fe5b 	bl	180 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4ca:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     4d2:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4d4:	a312      	add	r3, pc, #72	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
     4da:	fba4 0107 	umull	r0, r1, r4, r7
     4de:	f7ff fe4f 	bl	180 <__aeabi_uldivmod>
     4e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     4e6:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     4ec:	4c0e      	ldr	r4, [pc, #56]	; (528 <ull_drift_ticks_get+0x88>)
     4ee:	a30c      	add	r3, pc, #48	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
     4f4:	fba8 0104 	umull	r0, r1, r8, r4
     4f8:	f7ff fe42 	bl	180 <__aeabi_uldivmod>
     4fc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     500:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
     504:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     506:	fba0 0104 	umull	r0, r1, r0, r4
     50a:	a305      	add	r3, pc, #20	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     50c:	e9d3 2300 	ldrd	r2, r3, [r3]
     510:	f7ff fe36 	bl	180 <__aeabi_uldivmod>
     514:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     518:	6028      	str	r0, [r5, #0]
}
     51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     51e:	bf00      	nop
     520:	1afd498d 	.word	0x1afd498d
     524:	00000007 	.word	0x00000007
     528:	3b9aca00 	.word	0x3b9aca00
     52c:	00000000 	.word	0x00000000

00000530 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	4cac      	ldr	r4, [pc, #688]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     536:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
     53a:	b08f      	sub	sp, #60	; 0x3c
     53c:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     540:	2800      	cmp	r0, #0
     542:	f000 815b 	beq.w	7fc <CONFIG_BT_COMPANY_ID+0x20b>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     546:	bbb6      	cbnz	r6, 5b6 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     548:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     54c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	ull_filter_adv_update(lll->filter_policy);
     550:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     554:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     55c:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
     560:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     562:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     566:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
     56a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
     56e:	f014 fc07 	bl	14d80 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     572:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
     576:	0742      	lsls	r2, r0, #29
     578:	f100 8116 	bmi.w	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
	if (pdu_adv_to_update) {
     57c:	f1b9 0f00 	cmp.w	r9, #0
     580:	d011      	beq.n	5a6 <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     582:	4899      	ldr	r0, [pc, #612]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     584:	4649      	mov	r1, r9
     586:	f00f fd05 	bl	ff94 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
     58a:	f899 3000 	ldrb.w	r3, [r9]
     58e:	065b      	lsls	r3, r3, #25
     590:	d505      	bpl.n	59e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     592:	2106      	movs	r1, #6
     594:	f00a fffe 	bl	b594 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     598:	2800      	cmp	r0, #0
     59a:	f000 8240 	beq.w	a1e <CONFIG_BT_RX_STACK_SIZE+0x186>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     59e:	4892      	ldr	r0, [pc, #584]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     5a0:	4641      	mov	r1, r8
     5a2:	f00f fcf7 	bl	ff94 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     5a6:	f899 3000 	ldrb.w	r3, [r9]
     5aa:	f013 0f0e 	tst.w	r3, #14
     5ae:	f040 80d1 	bne.w	754 <CONFIG_BT_COMPANY_ID+0x163>
		if (lll->conn) {
     5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     5b4:	b123      	cbz	r3, 5c0 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     5b6:	260c      	movs	r6, #12
}
     5b8:	4630      	mov	r0, r6
     5ba:	b00f      	add	sp, #60	; 0x3c
     5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     5c0:	f00e fe84 	bl	f2cc <ll_rx_link_alloc>
		if (!link) {
     5c4:	4682      	mov	sl, r0
     5c6:	2800      	cmp	r0, #0
     5c8:	f000 8246 	beq.w	a58 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
		node_rx = ll_rx_alloc();
     5cc:	f00e fe8a 	bl	f2e4 <ll_rx_alloc>
		if (!node_rx) {
     5d0:	4683      	mov	fp, r0
     5d2:	2800      	cmp	r0, #0
     5d4:	f000 8259 	beq.w	a8a <CONFIG_BT_RX_STACK_SIZE+0x1f2>
		conn = ll_conn_acquire();
     5d8:	f010 f9ea 	bl	109b0 <ll_conn_acquire>
		if (!conn) {
     5dc:	4605      	mov	r5, r0
     5de:	2800      	cmp	r0, #0
     5e0:	f000 8250 	beq.w	a84 <CONFIG_BT_RX_STACK_SIZE+0x1ec>
		conn_lll->handle = 0xFFFF;
     5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     5e8:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     5ea:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     5ec:	f105 031c 	add.w	r3, r5, #28
     5f0:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     5f2:	2800      	cmp	r0, #0
     5f4:	f000 822c 	beq.w	a50 <CONFIG_BT_RX_STACK_SIZE+0x1b8>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     5f8:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     5fc:	f105 0168 	add.w	r1, r5, #104	; 0x68
     600:	f00a ffd4 	bl	b5ac <memq_init>
			conn_lll->phy_tx = PHY_1M;
     604:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
     608:	4878      	ldr	r0, [pc, #480]	; (7ec <CONFIG_BT_COMPANY_ID+0x1fb>)
		conn_lll->data_chan_sel = 0;
     60a:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     60e:	f895 7132 	ldrb.w	r7, [r5, #306]	; 0x132
		conn_lll->slave.latency_enabled = 0;
     612:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     616:	4b76      	ldr	r3, [pc, #472]	; (7f0 <CONFIG_BT_COMPANY_ID+0x1ff>)
     618:	662b      	str	r3, [r5, #96]	; 0x60
			conn_lll->phy_tx = PHY_1M;
     61a:	4002      	ands	r2, r0
     61c:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn_lll->sn = 0;
     620:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_terminate.node_rx.hdr.link = link;
     624:	f8c5 a13c 	str.w	sl, [r5, #316]	; 0x13c
			conn_lll->phy_tx = PHY_1M;
     628:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     62c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     630:	f027 0e03 	bic.w	lr, r7, #3
		conn_lll->data_chan_sel = 0;
     634:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->data_chan_use = 0;
     638:	2700      	movs	r7, #0
			conn_lll->phy_tx = PHY_1M;
     63a:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     63e:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->sn = 0;
     642:	f020 001f 	bic.w	r0, r0, #31
		conn_lll->data_chan_sel = 0;
     646:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     64a:	f367 0c00 	bfi	ip, r7, #0, #1
		conn->connect_expire = 6;
     64e:	2106      	movs	r1, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     650:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->llcp_feature.features_conn = LL_FEAT;
     652:	4a68      	ldr	r2, [pc, #416]	; (7f4 <CONFIG_BT_COMPANY_ID+0x203>)
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     654:	f885 e132 	strb.w	lr, [r5, #306]	; 0x132
		conn_lll->slave.latency_enabled = 0;
     658:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->sn = 0;
     65c:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_feature.features_conn = LL_FEAT;
     660:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
		conn_lll->slave.window_widening_event_us = 0;
     664:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
     668:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     66c:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     66e:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     670:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     672:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     676:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_rx = NULL;
     67a:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     67e:	f8a5 7110 	strh.w	r7, [r5, #272]	; 0x110
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     682:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_feature.features_peer = 0;
     686:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     68a:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_terminate.reason_peer = 0;
     68e:	f885 713b 	strb.w	r7, [r5, #315]	; 0x13b
		conn_lll->link_tx_free = NULL;
     692:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     694:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     698:	f8a5 715c 	strh.w	r7, [r5, #348]	; 0x15c
		conn->connect_expire = 6;
     69c:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6a0:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
		conn->llcp_conn_param.disabled = 0;
     6a4:	f895 c17e 	ldrb.w	ip, [r5, #382]	; 0x17e
		conn->llcp_length.disabled = 0U;
     6a8:	f895 01a6 	ldrb.w	r0, [r5, #422]	; 0x1a6
		conn->common.fex_valid = 0;
     6ac:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
		conn->llcp_conn_param.req = 0;
     6b0:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		conn->llcp_conn_param.disabled = 0;
     6b4:	f367 1c04 	bfi	ip, r7, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6b8:	f021 0107 	bic.w	r1, r1, #7
		conn->common.fex_valid = 0;
     6bc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
		conn->llcp_length.disabled = 0U;
     6c0:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
     6c4:	f885 c17e 	strb.w	ip, [r5, #382]	; 0x17e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6c8:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
		conn->common.fex_valid = 0;
     6cc:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
		conn->slave.ticks_to_offset = 0;
     6d0:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     6d4:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
     6d8:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     6dc:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.cache.tx_octets = 0U;
     6e0:	f8a5 71b0 	strh.w	r7, [r5, #432]	; 0x1b0
		conn->llcp_length.disabled = 0U;
     6e4:	f885 01a6 	strb.w	r0, [r5, #422]	; 0x1a6
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     6e8:	f010 fc92 	bl	11010 <ull_conn_default_tx_octets_get>
     6ec:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     6f0:	f010 fc94 	bl	1101c <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     6f4:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
     6f8:	4a3f      	ldr	r2, [pc, #252]	; (7f8 <CONFIG_BT_COMPANY_ID+0x207>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     6fa:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     6fe:	400a      	ands	r2, r1
     700:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     704:	f010 fc90 	bl	11028 <ull_conn_default_phy_tx_get>
     708:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
     70c:	f360 0202 	bfi	r2, r0, #0, #3
     710:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     714:	f010 fc8e 	bl	11034 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     718:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		lll->conn = conn_lll;
     71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     71e:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     720:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     724:	f895 3020 	ldrb.w	r3, [r5, #32]
		conn->tx_data = conn->tx_data_last = 0;
     728:	f8c5 71cc 	str.w	r7, [r5, #460]	; 0x1cc
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     72c:	f360 02c5 	bfi	r2, r0, #3, #3
     730:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     734:	e9c5 7771 	strd	r7, r7, [r5, #452]	; 0x1c4
     738:	e9c5 776f 	strd	r7, r7, [r5, #444]	; 0x1bc
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     73c:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->parent = parent;
     740:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     742:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
	hdr->is_stop = 0U;
     746:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
     74a:	f015 fc89 	bl	16060 <lll_clock_wait>
		if (err) {
     74e:	2800      	cmp	r0, #0
     750:	f040 8167 	bne.w	a22 <CONFIG_BT_RX_STACK_SIZE+0x18a>
	uint8_t ch_map = lll->chan_map;
     754:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     758:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     75a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     75e:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     760:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     764:	f00b f89a 	bl	b89c <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     768:	b390      	cbz	r0, 7d0 <CONFIG_BT_COMPANY_ID+0x1df>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     76a:	f899 3000 	ldrb.w	r3, [r9]
     76e:	f003 030f 	and.w	r3, r3, #15
     772:	2b02      	cmp	r3, #2
     774:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     778:	f000 809e 	beq.w	8b8 <CONFIG_BT_RX_STACK_SIZE+0x20>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     77c:	2b01      	cmp	r3, #1
     77e:	f000 8154 	beq.w	a2a <CONFIG_BT_RX_STACK_SIZE+0x192>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     782:	f898 0001 	ldrb.w	r0, [r8, #1]
     786:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     788:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     78a:	2b00      	cmp	r3, #0
     78c:	f040 813f 	bne.w	a0e <CONFIG_BT_RX_STACK_SIZE+0x176>
				adv_size += pdu_adv->len;
     790:	f899 3001 	ldrb.w	r3, [r9, #1]
     794:	3310      	adds	r3, #16
     796:	00db      	lsls	r3, r3, #3
     798:	f503 714d 	add.w	r1, r3, #820	; 0x334
     79c:	4408      	add	r0, r1
     79e:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     7a2:	fb03 0002 	mla	r0, r3, r2, r0
     7a6:	e092      	b.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     7a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     7ac:	4632      	mov	r2, r6
     7ae:	f104 014f 	add.w	r1, r4, #79	; 0x4f
     7b2:	f014 fc55 	bl	15060 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     7b6:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     7b8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
     7bc:	f43f aede 	beq.w	57c <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
     7c0:	4630      	mov	r0, r6
     7c2:	f014 faf7 	bl	14db4 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
     7c6:	f1b9 0f00 	cmp.w	r9, #0
     7ca:	f47f aeda 	bne.w	582 <ll_adv_enable+0x52>
     7ce:	e6ea      	b.n	5a6 <ll_adv_enable+0x76>
	if (adv->lll.conn) {
     7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     7d2:	2b00      	cmp	r3, #0
     7d4:	f43f aeef 	beq.w	5b6 <ll_adv_enable+0x86>
		conn_release(adv);
     7d8:	f00f f978 	bl	facc <conn_release.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
     7dc:	260c      	movs	r6, #12
}
     7de:	4630      	mov	r0, r6
     7e0:	b00f      	add	sp, #60	; 0x3c
     7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7e6:	bf00      	nop
     7e8:	200032d4 	.word	0x200032d4
     7ec:	fffff880 	.word	0xfffff880
     7f0:	01480148 	.word	0x01480148
     7f4:	0001417f 	.word	0x0001417f
     7f8:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
     7fc:	2e00      	cmp	r6, #0
     7fe:	f43f aeda 	beq.w	5b6 <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
     802:	4620      	mov	r0, r4
     804:	f00e fe18 	bl	f438 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     808:	4284      	cmp	r4, r0
     80a:	d00c      	beq.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
     80c:	4aa8      	ldr	r2, [pc, #672]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     80e:	49a9      	ldr	r1, [pc, #676]	; (ab4 <CONFIG_BT_RX_STACK_SIZE+0x21c>)
     810:	48a9      	ldr	r0, [pc, #676]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     812:	f44f 63f3 	mov.w	r3, #1944	; 0x798
     816:	f022 faf6 	bl	22e06 <printk>
     81a:	4040      	eors	r0, r0
     81c:	f380 8811 	msr	BASEPRI, r0
     820:	f04f 0003 	mov.w	r0, #3
     824:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     826:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     82a:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     82c:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     82e:	d50e      	bpl.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		ret_cb = TICKER_STATUS_BUSY;
     830:	2202      	movs	r2, #2
     832:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     834:	2103      	movs	r1, #3
     836:	4ba1      	ldr	r3, [pc, #644]	; (abc <CONFIG_BT_RX_STACK_SIZE+0x224>)
     838:	9500      	str	r5, [sp, #0]
     83a:	2201      	movs	r2, #1
     83c:	2000      	movs	r0, #0
     83e:	f00c fa15 	bl	cc6c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     842:	4629      	mov	r1, r5
     844:	f00e fdd0 	bl	f3e8 <ull_ticker_status_take>
		if (ret) {
     848:	2800      	cmp	r0, #0
     84a:	f040 8123 	bne.w	a94 <CONFIG_BT_RX_STACK_SIZE+0x1fc>
	ret_cb = TICKER_STATUS_BUSY;
     84e:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     850:	2103      	movs	r1, #3
     852:	4b9a      	ldr	r3, [pc, #616]	; (abc <CONFIG_BT_RX_STACK_SIZE+0x224>)
     854:	9500      	str	r5, [sp, #0]
     856:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     858:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     85a:	f00c fa07 	bl	cc6c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     85e:	4629      	mov	r1, r5
     860:	f00e fdc2 	bl	f3e8 <ull_ticker_status_take>
	if (ret) {
     864:	2800      	cmp	r0, #0
     866:	f040 80f9 	bne.w	a5c <CONFIG_BT_RX_STACK_SIZE+0x1c4>
	}

	ret = ull_disable(&adv->lll);
     86a:	4895      	ldr	r0, [pc, #596]	; (ac0 <CONFIG_BT_RX_STACK_SIZE+0x228>)
     86c:	f00e fe20 	bl	f4b0 <ull_disable>
	LL_ASSERT(!ret);
     870:	2800      	cmp	r0, #0
     872:	f040 80df 	bne.w	a34 <CONFIG_BT_RX_STACK_SIZE+0x19c>

	mark = ull_disable_unmark(adv);
     876:	4893      	ldr	r0, [pc, #588]	; (ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>)
     878:	f00e fdea 	bl	f450 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     87c:	4284      	cmp	r4, r0
     87e:	d00c      	beq.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     880:	4a8b      	ldr	r2, [pc, #556]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     882:	498c      	ldr	r1, [pc, #560]	; (ab4 <CONFIG_BT_RX_STACK_SIZE+0x21c>)
     884:	488c      	ldr	r0, [pc, #560]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     886:	f240 73ba 	movw	r3, #1978	; 0x7ba
     88a:	f022 fabc 	bl	22e06 <printk>
     88e:	4040      	eors	r0, r0
     890:	f380 8811 	msr	BASEPRI, r0
     894:	f04f 0003 	mov.w	r0, #3
     898:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     89c:	b10b      	cbz	r3, 8a2 <CONFIG_BT_RX_STACK_SIZE+0xa>
		conn_release(adv);
     89e:	f00f f915 	bl	facc <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     8a2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     8a6:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
     8a8:	f36f 0300 	bfc	r3, #0, #1
}
     8ac:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
     8ae:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     8b2:	b00f      	add	sp, #60	; 0x3c
     8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
     8b8:	f899 3001 	ldrb.w	r3, [r9, #1]
     8bc:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     8be:	00db      	lsls	r3, r3, #3
     8c0:	fb00 f003 	mul.w	r0, r0, r3
     8c4:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     8c8:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     8ca:	fb03 0002 	mla	r0, r3, r2, r0
     8ce:	f894 7020 	ldrb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8d2:	4a7d      	ldr	r2, [pc, #500]	; (ac8 <CONFIG_BT_RX_STACK_SIZE+0x230>)
	hdr->parent = parent;
     8d4:	61e4      	str	r4, [r4, #28]
     8d6:	2500      	movs	r5, #0
	adv->evt.ticks_xtal_to_start =
     8d8:	2331      	movs	r3, #49	; 0x31
	hdr->is_stop = 0U;
     8da:	f365 0700 	bfi	r7, r5, #0, #1
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8de:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     8e2:	6023      	str	r3, [r4, #0]
     8e4:	f884 7020 	strb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8e8:	a36f      	add	r3, pc, #444	; (adr r3, aa8 <CONFIG_BT_RX_STACK_SIZE+0x210>)
     8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
     8ee:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     8f2:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8f6:	f7ff fc43 	bl	180 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     8fa:	f8b4 804c 	ldrh.w	r8, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8fe:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     900:	f00c f9fa 	bl	ccf8 <ticker_ticks_now_get>
     904:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     906:	f1b8 0f00 	cmp.w	r8, #0
     90a:	d108      	bne.n	91e <CONFIG_BT_RX_STACK_SIZE+0x86>
     90c:	f899 5000 	ldrb.w	r5, [r9]
     910:	f005 050f 	and.w	r5, r5, #15
     914:	f1a5 0501 	sub.w	r5, r5, #1
     918:	fab5 f585 	clz	r5, r5
     91c:	096d      	lsrs	r5, r5, #5
     91e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     922:	68e3      	ldr	r3, [r4, #12]
     924:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
     928:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     92c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     930:	d03d      	beq.n	9ae <CONFIG_BT_RX_STACK_SIZE+0x116>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     932:	f8df 9188 	ldr.w	r9, [pc, #392]	; abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     936:	4965      	ldr	r1, [pc, #404]	; (acc <CONFIG_BT_RX_STACK_SIZE+0x234>)
     938:	9304      	str	r3, [sp, #16]
     93a:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     93c:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     93e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     942:	9301      	str	r3, [sp, #4]
     944:	9105      	str	r1, [sp, #20]
     946:	e9cd 9807 	strd	r9, r8, [sp, #28]
     94a:	2103      	movs	r1, #3
     94c:	e9cd 0002 	strd	r0, r0, [sp, #8]
     950:	9406      	str	r4, [sp, #24]
     952:	462a      	mov	r2, r5
     954:	9000      	str	r0, [sp, #0]
     956:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
     958:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     95a:	f00c f8ff 	bl	cb5c <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     95e:	4641      	mov	r1, r8
     960:	f00e fd42 	bl	f3e8 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     964:	2800      	cmp	r0, #0
     966:	f47f af33 	bne.w	7d0 <CONFIG_BT_COMPANY_ID+0x1df>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     96a:	4959      	ldr	r1, [pc, #356]	; (ad0 <CONFIG_BT_RX_STACK_SIZE+0x238>)
     96c:	9105      	str	r1, [sp, #20]
     96e:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     972:	9200      	str	r2, [sp, #0]
     974:	e9cd 9807 	strd	r9, r8, [sp, #28]
     978:	e9cd 0003 	strd	r0, r0, [sp, #12]
     97c:	e9cd 0001 	strd	r0, r0, [sp, #4]
     980:	9406      	str	r4, [sp, #24]
     982:	463b      	mov	r3, r7
     984:	2201      	movs	r2, #1
     986:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     988:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     98a:	f00c f8e7 	bl	cb5c <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     98e:	4641      	mov	r1, r8
     990:	f00e fd2a 	bl	f3e8 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     994:	2800      	cmp	r0, #0
     996:	f47f af1b 	bne.w	7d0 <CONFIG_BT_COMPANY_ID+0x1df>
	adv->is_enabled = 1;
     99a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
}
     99e:	4630      	mov	r0, r6
	adv->is_enabled = 1;
     9a0:	f043 0301 	orr.w	r3, r3, #1
     9a4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     9a8:	b00f      	add	sp, #60	; 0x3c
     9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9ae:	4849      	ldr	r0, [pc, #292]	; (ad4 <CONFIG_BT_RX_STACK_SIZE+0x23c>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
     9b0:	4a49      	ldr	r2, [pc, #292]	; (ad8 <CONFIG_BT_RX_STACK_SIZE+0x240>)
		ret = ticker_start_ext(
     9b2:	f8df e108 	ldr.w	lr, [pc, #264]	; abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     9b6:	f8df c114 	ldr.w	ip, [pc, #276]	; acc <CONFIG_BT_RX_STACK_SIZE+0x234>
     9ba:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9bc:	fba8 0100 	umull	r0, r1, r8, r0
     9c0:	f04f 0991 	mov.w	r9, #145	; 0x91
     9c4:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     9c8:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     9cc:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
     9d0:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     9d4:	9304      	str	r3, [sp, #16]
     9d6:	9209      	str	r2, [sp, #36]	; 0x24
     9d8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9dc:	a332      	add	r3, pc, #200	; (adr r3, aa8 <CONFIG_BT_RX_STACK_SIZE+0x210>)
     9de:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     9e2:	f64f 7aff 	movw	sl, #65535	; 0xffff
     9e6:	e9cd e807 	strd	lr, r8, [sp, #28]
     9ea:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     9ec:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     9f0:	f8cd c014 	str.w	ip, [sp, #20]
     9f4:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9f8:	f7ff fbc2 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     9fc:	464a      	mov	r2, r9
     9fe:	e9cd 5000 	strd	r5, r0, [sp]
     a02:	463b      	mov	r3, r7
     a04:	4628      	mov	r0, r5
     a06:	2103      	movs	r1, #3
     a08:	f00c f852 	bl	cab0 <ticker_start_ext>
     a0c:	e7bf      	b.n	98e <CONFIG_BT_RX_STACK_SIZE+0xf6>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     a0e:	2b06      	cmp	r3, #6
     a10:	f43f aebe 	beq.w	790 <CONFIG_BT_COMPANY_ID+0x19f>
     a14:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     a18:	f44f 701b 	mov.w	r0, #620	; 0x26c
     a1c:	e6c1      	b.n	7a2 <CONFIG_BT_COMPANY_ID+0x1b1>
			return BT_HCI_ERR_INVALID_PARAM;
     a1e:	2612      	movs	r6, #18
     a20:	e5ca      	b.n	5b8 <ll_adv_enable+0x88>
			conn_release(adv);
     a22:	f00f f853 	bl	facc <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     a26:	2603      	movs	r6, #3
     a28:	e5c6      	b.n	5b8 <ll_adv_enable+0x88>
     a2a:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     a2e:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
     a32:	e6b6      	b.n	7a2 <CONFIG_BT_COMPANY_ID+0x1b1>
	LL_ASSERT(!ret);
     a34:	4a1e      	ldr	r2, [pc, #120]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     a36:	4929      	ldr	r1, [pc, #164]	; (adc <CONFIG_BT_RX_STACK_SIZE+0x244>)
     a38:	481f      	ldr	r0, [pc, #124]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     a3a:	f240 73b7 	movw	r3, #1975	; 0x7b7
     a3e:	f022 f9e2 	bl	22e06 <printk>
     a42:	4040      	eors	r0, r0
     a44:	f380 8811 	msr	BASEPRI, r0
     a48:	f04f 0003 	mov.w	r0, #3
     a4c:	df02      	svc	2
     a4e:	e712      	b.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     a50:	f105 0070 	add.w	r0, r5, #112	; 0x70
     a54:	67a8      	str	r0, [r5, #120]	; 0x78
     a56:	e5cf      	b.n	5f8 <CONFIG_BT_COMPANY_ID+0x7>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     a58:	2607      	movs	r6, #7
     a5a:	e5ad      	b.n	5b8 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
     a5c:	4819      	ldr	r0, [pc, #100]	; (ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>)
     a5e:	f00e fcf7 	bl	f450 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
     a62:	4284      	cmp	r4, r0
     a64:	f43f ada7 	beq.w	5b6 <ll_adv_enable+0x86>
     a68:	f240 73b1 	movw	r3, #1969	; 0x7b1
     a6c:	4a10      	ldr	r2, [pc, #64]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     a6e:	4911      	ldr	r1, [pc, #68]	; (ab4 <CONFIG_BT_RX_STACK_SIZE+0x21c>)
     a70:	4811      	ldr	r0, [pc, #68]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     a72:	f022 f9c8 	bl	22e06 <printk>
     a76:	4040      	eors	r0, r0
     a78:	f380 8811 	msr	BASEPRI, r0
     a7c:	f04f 0003 	mov.w	r0, #3
     a80:	df02      	svc	2
     a82:	e598      	b.n	5b6 <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
     a84:	4658      	mov	r0, fp
     a86:	f00e fc33 	bl	f2f0 <ll_rx_release>
			ll_rx_link_release(link);
     a8a:	4650      	mov	r0, sl
     a8c:	f00e fc24 	bl	f2d8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     a90:	2607      	movs	r6, #7
     a92:	e591      	b.n	5b8 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
     a94:	480b      	ldr	r0, [pc, #44]	; (ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>)
     a96:	f00e fcdb 	bl	f450 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
     a9a:	4284      	cmp	r4, r0
     a9c:	f43f ad8b 	beq.w	5b6 <ll_adv_enable+0x86>
     aa0:	f240 73a3 	movw	r3, #1955	; 0x7a3
     aa4:	e7e2      	b.n	a6c <CONFIG_BT_RX_STACK_SIZE+0x1d4>
     aa6:	bf00      	nop
     aa8:	1afd498d 	.word	0x1afd498d
     aac:	00000007 	.word	0x00000007
     ab0:	0002c9e0 	.word	0x0002c9e0
     ab4:	0002cad0 	.word	0x0002cad0
     ab8:	0002c630 	.word	0x0002c630
     abc:	0000e2f9 	.word	0x0000e2f9
     ac0:	200032f0 	.word	0x200032f0
     ac4:	200032d4 	.word	0x200032d4
     ac8:	3b9aca00 	.word	0x3b9aca00
     acc:	0000f7a5 	.word	0x0000f7a5
     ad0:	0000fa45 	.word	0x0000fa45
     ad4:	84e72a00 	.word	0x84e72a00
     ad8:	2000332c 	.word	0x2000332c
     adc:	0002c8bc 	.word	0x0002c8bc

00000ae0 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
     ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
     ae4:	4dc8      	ldr	r5, [pc, #800]	; (e08 <event_conn_upd_prep+0x328>)

	/* set mutex */
	if (!conn_upd) {
     ae6:	682b      	ldr	r3, [r5, #0]
{
     ae8:	b08b      	sub	sp, #44	; 0x2c
     aea:	4604      	mov	r4, r0
     aec:	460f      	mov	r7, r1
     aee:	4691      	mov	r9, r2
	if (!conn_upd) {
     af0:	2b00      	cmp	r3, #0
     af2:	f000 821b 	beq.w	f2c <event_conn_upd_prep+0x44c>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     af6:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
     af8:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     afa:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     afe:	4416      	add	r6, r2
     b00:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     b02:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     b06:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     b08:	f040 81a7 	bne.w	e5a <event_conn_upd_prep+0x37a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     b0c:	f8b4 80ec 	ldrh.w	r8, [r4, #236]	; 0xec
     b10:	eba6 0208 	sub.w	r2, r6, r8
     b14:	fa1f fa82 	uxth.w	sl, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     b18:	0412      	lsls	r2, r2, #16
     b1a:	f100 8202 	bmi.w	f22 <event_conn_upd_prep+0x442>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
     b1e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
     b22:	2a00      	cmp	r2, #0
     b24:	f2c0 813d 	blt.w	da2 <event_conn_upd_prep+0x2c2>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
     b28:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
     b2c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     b30:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
     b34:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
		conn->llcp_cu.ack = conn->llcp_cu.req;
     b38:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
     b3c:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     b40:	4293      	cmp	r3, r2
     b42:	d006      	beq.n	b52 <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     b44:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     b48:	f003 0307 	and.w	r3, r3, #7
     b4c:	2b05      	cmp	r3, #5
     b4e:	f000 8246 	beq.w	fde <event_conn_upd_prep+0x4fe>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
     b52:	682b      	ldr	r3, [r5, #0]
     b54:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
     b56:	bf04      	itt	eq
     b58:	2300      	moveq	r3, #0
     b5a:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     b5c:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
     b60:	2d00      	cmp	r5, #0
     b62:	f000 816b 	beq.w	e3c <event_conn_upd_prep+0x35c>
     b66:	6828      	ldr	r0, [r5, #0]
     b68:	2800      	cmp	r0, #0
     b6a:	f000 8167 	beq.w	e3c <event_conn_upd_prep+0x35c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     b6e:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
     b72:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
     b76:	6842      	ldr	r2, [r0, #4]
     b78:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((conn->llcp_cu.interval != lll->interval) ||
     b7c:	4563      	cmp	r3, ip
     b7e:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
     b82:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
     b86:	f000 8120 	beq.w	dca <event_conn_upd_prep+0x2ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     b8a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
     b8e:	f8a5 c006 	strh.w	ip, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     b92:	f04f 0e15 	mov.w	lr, #21

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
     b96:	f04f 0c00 	mov.w	ip, #0
			cu->interval = conn->llcp_cu.interval;
     b9a:	83eb      	strh	r3, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
     b9c:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     b9e:	8469      	strh	r1, [r5, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     ba0:	f885 e004 	strb.w	lr, [r5, #4]
			cu->status = 0x00;
     ba4:	f885 c01c 	strb.w	ip, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     ba8:	4629      	mov	r1, r5
     baa:	f00e fba7 	bl	f2fc <ll_rx_put>
		ll_rx_sched();
     bae:	f00e fbaf 	bl	f310 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     bb2:	6823      	ldr	r3, [r4, #0]
     bb4:	2b00      	cmp	r3, #0
     bb6:	f2c0 80fc 	blt.w	db2 <event_conn_upd_prep+0x2d2>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     bba:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
     bbc:	f8b4 5114 	ldrh.w	r5, [r4, #276]	; 0x114
		conn_interval_old = instant_latency * lll->interval;
     bc0:	fb10 f00a 	smulbb	r0, r0, sl
     bc4:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
     bc6:	fbb0 f3f5 	udiv	r3, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
     bca:	fb15 f203 	smulbb	r2, r5, r3
     bce:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     bd0:	4290      	cmp	r0, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
     bd2:	fa1f fb83 	uxth.w	fp, r3
		if (conn_interval_new > conn_interval_old) {
     bd6:	f0c0 80d3 	bcc.w	d80 <event_conn_upd_prep+0x2a0>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     bda:	fb05 0313 	mls	r3, r5, r3, r0
     bde:	f240 42e2 	movw	r2, #1250	; 0x4e2
     be2:	488a      	ldr	r0, [pc, #552]	; (e0c <event_conn_upd_prep+0x32c>)
     be4:	b29b      	uxth	r3, r3
     be6:	fb02 f303 	mul.w	r3, r2, r3
     bea:	fba3 0100 	umull	r0, r1, r3, r0
     bee:	a384      	add	r3, pc, #528	; (adr r3, e00 <event_conn_upd_prep+0x320>)
     bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
     bf4:	f7ff fac4 	bl	180 <__aeabi_uldivmod>
     bf8:	eba9 0900 	sub.w	r9, r9, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
     bfc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     bfe:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
     c02:	eba8 0606 	sub.w	r6, r8, r6
     c06:	445e      	add	r6, fp
		lll->latency_prepare += lazy;
     c08:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
     c0a:	4437      	add	r7, r6
		conn_interval_us = conn->llcp_cu.interval *
     c0c:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
     c10:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     c12:	8667      	strh	r7, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval *
     c14:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
     c18:	f2c0 818a 	blt.w	f30 <event_conn_upd_prep+0x450>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
     c1c:	4a7c      	ldr	r2, [pc, #496]	; (e10 <event_conn_upd_prep+0x330>)
     c1e:	497d      	ldr	r1, [pc, #500]	; (e14 <event_conn_upd_prep+0x334>)
     c20:	487d      	ldr	r0, [pc, #500]	; (e18 <event_conn_upd_prep+0x338>)
     c22:	f640 13f6 	movw	r3, #2550	; 0x9f6
     c26:	f022 f8ee 	bl	22e06 <printk>
     c2a:	4040      	eors	r0, r0
     c2c:	f380 8811 	msr	BASEPRI, r0
     c30:	f04f 0003 	mov.w	r0, #3
     c34:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
     c36:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
     c38:	46aa      	mov	sl, r5

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c3a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
		lll->latency = conn->llcp_cu.latency;
     c3e:	f8b4 0116 	ldrh.w	r0, [r4, #278]	; 0x116
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c42:	4b76      	ldr	r3, [pc, #472]	; (e1c <event_conn_upd_prep+0x33c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c44:	4976      	ldr	r1, [pc, #472]	; (e20 <event_conn_upd_prep+0x340>)
		lll->latency = conn->llcp_cu.latency;
     c46:	8620      	strh	r0, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c48:	f242 7c10 	movw	ip, #10000	; 0x2710
     c4c:	fb0c 5202 	mla	r2, ip, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c50:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c52:	4429      	add	r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c54:	fbb3 f3f5 	udiv	r3, r3, r5
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c58:	f100 0c06 	add.w	ip, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c5c:	3a01      	subs	r2, #1
     c5e:	fbb2 f2f5 	udiv	r2, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c62:	fbb1 f5f5 	udiv	r5, r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c66:	b299      	uxth	r1, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c68:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c6c:	4561      	cmp	r1, ip
		lll->interval = conn->llcp_cu.interval;
     c6e:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c72:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c76:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
     c7a:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c7c:	dd02      	ble.n	c84 <event_conn_upd_prep+0x1a4>
				     (conn->apto_reload - (lll->latency + 6)) :
     c7e:	1a09      	subs	r1, r1, r0
     c80:	3906      	subs	r1, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c82:	b289      	uxth	r1, r1
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     c84:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c88:	f8a4 10ce 	strh.w	r1, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
     c8c:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
     c8e:	bf44      	itt	mi
     c90:	2300      	movmi	r3, #0
     c92:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     c96:	2102      	movs	r1, #2
     c98:	2001      	movs	r0, #1
     c9a:	f017 f945 	bl	17f28 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     c9e:	2200      	movs	r2, #0
     ca0:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     ca2:	4605      	mov	r5, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     ca4:	2001      	movs	r0, #1
     ca6:	f00a fccf 	bl	b648 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     caa:	495e      	ldr	r1, [pc, #376]	; (e24 <event_conn_upd_prep+0x344>)
     cac:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
     cb0:	4620      	mov	r0, r4
     cb2:	f00a fc5b 	bl	b56c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     cb6:	f100 0803 	add.w	r8, r0, #3
     cba:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     cbe:	4b5a      	ldr	r3, [pc, #360]	; (e28 <event_conn_upd_prep+0x348>)
     cc0:	9400      	str	r4, [sp, #0]
     cc2:	4642      	mov	r2, r8
     cc4:	2101      	movs	r1, #1
     cc6:	2000      	movs	r0, #0
     cc8:	f00b ffd0 	bl	cc6c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     ccc:	f030 0302 	bics.w	r3, r0, #2
     cd0:	d00c      	beq.n	cec <event_conn_upd_prep+0x20c>
     cd2:	4a4f      	ldr	r2, [pc, #316]	; (e10 <event_conn_upd_prep+0x330>)
     cd4:	4955      	ldr	r1, [pc, #340]	; (e2c <event_conn_upd_prep+0x34c>)
     cd6:	4850      	ldr	r0, [pc, #320]	; (e18 <event_conn_upd_prep+0x338>)
     cd8:	f640 2325 	movw	r3, #2597	; 0xa25
     cdc:	f022 f893 	bl	22e06 <printk>
     ce0:	4040      	eors	r0, r0
     ce2:	f380 8811 	msr	BASEPRI, r0
     ce6:	f04f 0003 	mov.w	r0, #3
     cea:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     cec:	4b47      	ldr	r3, [pc, #284]	; (e0c <event_conn_upd_prep+0x32c>)
     cee:	fbaa ab03 	umull	sl, fp, sl, r3
     cf2:	4650      	mov	r0, sl
     cf4:	a342      	add	r3, pc, #264	; (adr r3, e00 <event_conn_upd_prep+0x320>)
     cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
     cfa:	4659      	mov	r1, fp
     cfc:	f7ff fa40 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
     d00:	4a4b      	ldr	r2, [pc, #300]	; (e30 <event_conn_upd_prep+0x350>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d02:	68e3      	ldr	r3, [r4, #12]
     d04:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
     d06:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
     d0a:	fba6 2302 	umull	r2, r3, r6, r2
     d0e:	2007      	movs	r0, #7
     d10:	fb00 3306 	mla	r3, r0, r6, r3
     d14:	ebba 0002 	subs.w	r0, sl, r2
     d18:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d1c:	f8df e114 	ldr.w	lr, [pc, #276]	; e34 <event_conn_upd_prep+0x354>
     d20:	f8df c114 	ldr.w	ip, [pc, #276]	; e38 <event_conn_upd_prep+0x358>
     d24:	9408      	str	r4, [sp, #32]
     d26:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
     d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d2c:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d2e:	f64f 74fe 	movw	r4, #65534	; 0xfffe
     d32:	f8cd e01c 	str.w	lr, [sp, #28]
     d36:	f8cd c014 	str.w	ip, [sp, #20]
     d3a:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     d3c:	f7ff fa20 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d40:	464b      	mov	r3, r9
     d42:	e9cd 6001 	strd	r6, r0, [sp, #4]
     d46:	9700      	str	r7, [sp, #0]
     d48:	4642      	mov	r2, r8
     d4a:	2101      	movs	r1, #1
     d4c:	2000      	movs	r0, #0
     d4e:	f00b ff05 	bl	cb5c <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     d52:	f030 0302 	bics.w	r3, r0, #2
     d56:	d00c      	beq.n	d72 <event_conn_upd_prep+0x292>
     d58:	4a2d      	ldr	r2, [pc, #180]	; (e10 <event_conn_upd_prep+0x330>)
     d5a:	4934      	ldr	r1, [pc, #208]	; (e2c <event_conn_upd_prep+0x34c>)
     d5c:	482e      	ldr	r0, [pc, #184]	; (e18 <event_conn_upd_prep+0x338>)
     d5e:	f640 233f 	movw	r3, #2623	; 0xa3f
     d62:	f022 f850 	bl	22e06 <printk>
     d66:	4040      	eors	r0, r0
     d68:	f380 8811 	msr	BASEPRI, r0
     d6c:	f04f 0003 	mov.w	r0, #3
     d70:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     d72:	2d00      	cmp	r5, #0
     d74:	f040 812a 	bne.w	fcc <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
     d78:	4628      	mov	r0, r5
	}

	return -EINPROGRESS;
}
     d7a:	b00b      	add	sp, #44	; 0x2c
     d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     d80:	1a12      	subs	r2, r2, r0
     d82:	f240 43e2 	movw	r3, #1250	; 0x4e2
     d86:	4821      	ldr	r0, [pc, #132]	; (e0c <event_conn_upd_prep+0x32c>)
     d88:	fb03 f202 	mul.w	r2, r3, r2
     d8c:	fba2 0100 	umull	r0, r1, r2, r0
     d90:	a31b      	add	r3, pc, #108	; (adr r3, e00 <event_conn_upd_prep+0x320>)
     d92:	e9d3 2300 	ldrd	r2, r3, [r3]
     d96:	f7ff f9f3 	bl	180 <__aeabi_uldivmod>
     d9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     d9e:	4481      	add	r9, r0
     da0:	e72c      	b.n	bfc <event_conn_upd_prep+0x11c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
     da2:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
     da6:	2a00      	cmp	r2, #0
     da8:	f43f aebe 	beq.w	b28 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
     dac:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
     db0:	e6be      	b.n	b30 <event_conn_upd_prep+0x50>
			uint32_t ticks_prepare_to_start =
     db2:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     dba:	4282      	cmp	r2, r0
     dbc:	bf2c      	ite	cs
     dbe:	4491      	addcs	r9, r2
     dc0:	4481      	addcc	r9, r0
     dc2:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     dc4:	eba9 0903 	sub.w	r9, r9, r3
     dc8:	e6f7      	b.n	bba <event_conn_upd_prep+0xda>
		if ((conn->llcp_cu.interval != lll->interval) ||
     dca:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
     dce:	4594      	cmp	ip, r2
     dd0:	f47f aedb 	bne.w	b8a <event_conn_upd_prep+0xaa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     dd4:	f240 4ce2 	movw	ip, #1250	; 0x4e2
     dd8:	fb0c fb03 	mul.w	fp, ip, r3
     ddc:	f242 7c10 	movw	ip, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
     de0:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     de4:	fb0c bc01 	mla	ip, ip, r1, fp
     de8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     dec:	fbbc fcfb 	udiv	ip, ip, fp
		    (conn->llcp_cu.latency != lll->latency) ||
     df0:	fa1f fc8c 	uxth.w	ip, ip
     df4:	45e6      	cmp	lr, ip
     df6:	f47f aec8 	bne.w	b8a <event_conn_upd_prep+0xaa>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
     dfa:	2301      	movs	r3, #1
     dfc:	712b      	strb	r3, [r5, #4]
     dfe:	e6d3      	b.n	ba8 <event_conn_upd_prep+0xc8>
     e00:	1afd498d 	.word	0x1afd498d
     e04:	00000007 	.word	0x00000007
     e08:	20003520 	.word	0x20003520
     e0c:	3b9aca00 	.word	0x3b9aca00
     e10:	0002caec 	.word	0x0002caec
     e14:	0002c6a0 	.word	0x0002c6a0
     e18:	0002c630 	.word	0x0002c630
     e1c:	01c9c37f 	.word	0x01c9c37f
     e20:	026259ff 	.word	0x026259ff
     e24:	2000334c 	.word	0x2000334c
     e28:	00010349 	.word	0x00010349
     e2c:	0002cbcc 	.word	0x0002cbcc
     e30:	1afd498d 	.word	0x1afd498d
     e34:	000102f1 	.word	0x000102f1
     e38:	000146d5 	.word	0x000146d5
		LL_ASSERT(rx && rx->hdr.link);
     e3c:	4a78      	ldr	r2, [pc, #480]	; (1020 <event_conn_upd_prep+0x540>)
     e3e:	4979      	ldr	r1, [pc, #484]	; (1024 <event_conn_upd_prep+0x544>)
     e40:	4879      	ldr	r0, [pc, #484]	; (1028 <event_conn_upd_prep+0x548>)
     e42:	f640 137a 	movw	r3, #2426	; 0x97a
     e46:	f021 ffde 	bl	22e06 <printk>
     e4a:	4040      	eors	r0, r0
     e4c:	f380 8811 	msr	BASEPRI, r0
     e50:	f04f 0003 	mov.w	r0, #3
     e54:	df02      	svc	2
     e56:	6828      	ldr	r0, [r5, #0]
     e58:	e689      	b.n	b6e <event_conn_upd_prep+0x8e>
		rx = ll_pdu_rx_alloc_peek(1);
     e5a:	2001      	movs	r0, #1
     e5c:	f00e fa5e 	bl	f31c <ll_pdu_rx_alloc_peek>
		if (!rx) {
     e60:	4607      	mov	r7, r0
     e62:	2800      	cmp	r0, #0
     e64:	f000 80cd 	beq.w	1002 <event_conn_upd_prep+0x522>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e68:	4870      	ldr	r0, [pc, #448]	; (102c <event_conn_upd_prep+0x54c>)
     e6a:	f00a fb4b 	bl	b504 <mem_acquire>
		if (!tx) {
     e6e:	4605      	mov	r5, r0
     e70:	2800      	cmp	r0, #0
     e72:	f000 80c6 	beq.w	1002 <event_conn_upd_prep+0x522>
		(void)ll_pdu_rx_alloc();
     e76:	f00e fa6f 	bl	f358 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     e7a:	683a      	ldr	r2, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e7c:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
     e7e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
     e82:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e84:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e88:	220c      	movs	r2, #12
		conn->llcp_rx = rx;
     e8a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e8e:	716a      	strb	r2, [r5, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e90:	712b      	strb	r3, [r5, #4]
		conn->llcp.conn_upd.instant = event_counter +
     e92:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     e94:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
     e98:	4f65      	ldr	r7, [pc, #404]	; (1030 <event_conn_upd_prep+0x550>)
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e9a:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     e9e:	2000      	movs	r0, #0
		conn->llcp.conn_upd.instant = event_counter +
     ea0:	441e      	add	r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     ea2:	71e8      	strb	r0, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     ea4:	fba7 3202 	umull	r3, r2, r7, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     ea8:	f3c2 228f 	ubfx	r2, r2, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     eac:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
     eb0:	722b      	strb	r3, [r5, #8]
	    conn->tx_head &&
     eb2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     eb6:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     eba:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
     ebe:	f8a5 200b 	strh.w	r2, [r5, #11]
					      conn->lll.latency + 6;
     ec2:	3606      	adds	r6, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     ec4:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
     ec8:	f8a5 200d 	strh.w	r2, [r5, #13]
					      conn->lll.latency + 6;
     ecc:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     ece:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
     ed2:	f8a5 200f 	strh.w	r2, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ed6:	f360 0102 	bfi	r1, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
     eda:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ede:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     ee2:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
     ee6:	2b00      	cmp	r3, #0
     ee8:	d07f      	beq.n	fea <event_conn_upd_prep+0x50a>
	    !conn->llcp_enc.pause_tx &&
     eea:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
     eee:	0790      	lsls	r0, r2, #30
     ef0:	d47b      	bmi.n	fea <event_conn_upd_prep+0x50a>
	    !conn->llcp_phy.pause_tx &&
     ef2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
     ef6:	07d1      	lsls	r1, r2, #31
     ef8:	d477      	bmi.n	fea <event_conn_upd_prep+0x50a>
		if (conn->tx_head == conn->tx_data) {
     efa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
     efe:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
     f00:	bf04      	itt	eq
     f02:	681a      	ldreq	r2, [r3, #0]
     f04:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
     f08:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
     f0c:	2a00      	cmp	r2, #0
     f0e:	d16f      	bne.n	ff0 <event_conn_upd_prep+0x510>
			tx->next = conn->tx_head->next;
     f10:	681a      	ldr	r2, [r3, #0]
     f12:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
     f14:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
     f16:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
     f18:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
     f1c:	b90b      	cbnz	r3, f22 <event_conn_upd_prep+0x442>
		conn->tx_data_last = tx;
     f1e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	return -EINPROGRESS;
     f22:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
     f26:	b00b      	add	sp, #44	; 0x2c
     f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn_upd_curr = conn;
     f2c:	6028      	str	r0, [r5, #0]
     f2e:	e5e2      	b.n	af6 <event_conn_upd_prep+0x16>
			lll->slave.window_widening_prepare_us -=
     f30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
     f32:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f34:	4f3f      	ldr	r7, [pc, #252]	; (1034 <event_conn_upd_prep+0x554>)
			lll->slave.window_widening_prepare_us -=
     f36:	fb03 231a 	mls	r3, r3, sl, r2
     f3a:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
     f3c:	f015 f8e2 	bl	16104 <lll_clock_ppm_local_get>
     f40:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
     f42:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
     f46:	f3c0 0082 	ubfx	r0, r0, #2, #3
     f4a:	f015 f8dd 	bl	16108 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
     f4e:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
     f50:	fb05 f606 	mul.w	r6, r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
     f54:	4b38      	ldr	r3, [pc, #224]	; (1038 <event_conn_upd_prep+0x558>)
			lll->slave.window_widening_prepare_us +=
     f56:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     f58:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
     f5c:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
     f60:	f206 263f 	addw	r6, r6, #575	; 0x23f
     f64:	fba3 3606 	umull	r3, r6, r3, r6
     f68:	0cb6      	lsrs	r6, r6, #18
				lll->slave.window_widening_periodic_us *
     f6a:	fb06 f00b 	mul.w	r0, r6, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
     f6e:	086b      	lsrs	r3, r5, #1
			lll->slave.window_widening_prepare_us +=
     f70:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
     f72:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
     f74:	429a      	cmp	r2, r3
     f76:	bf28      	it	cs
     f78:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     f7a:	fb08 fc01 	mul.w	ip, r8, r1
			conn->slave.ticks_to_offset = 0U;
     f7e:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
     f82:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f86:	fba0 0107 	umull	r0, r1, r0, r7
     f8a:	a323      	add	r3, pc, #140	; (adr r3, 1018 <event_conn_upd_prep+0x538>)
     f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
     f90:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
     f94:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
     f98:	6466      	str	r6, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f9a:	f7ff f8f1 	bl	180 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     f9e:	4b24      	ldr	r3, [pc, #144]	; (1030 <event_conn_upd_prep+0x550>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     fa0:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     fa2:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
     fa6:	fba3 3000 	umull	r3, r0, r3, r0
     faa:	0a80      	lsrs	r0, r0, #10
     fac:	fb08 f000 	mul.w	r0, r8, r0
     fb0:	fba0 0107 	umull	r0, r1, r0, r7
     fb4:	a318      	add	r3, pc, #96	; (adr r3, 1018 <event_conn_upd_prep+0x538>)
     fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     fba:	eba9 090c 	sub.w	r9, r9, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     fbe:	f7ff f8df 	bl	180 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
     fc2:	eba5 0a06 	sub.w	sl, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     fc6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
     fca:	e636      	b.n	c3a <event_conn_upd_prep+0x15a>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
     fcc:	2201      	movs	r2, #1
     fce:	4610      	mov	r0, r2
     fd0:	2102      	movs	r1, #2
     fd2:	f00a fb39 	bl	b648 <mayfly_enable>
		return 0;
     fd6:	2000      	movs	r0, #0
}
     fd8:	b00b      	add	sp, #44	; 0x2c
     fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conn->procedure_expire = 0U;
     fde:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     fe0:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
			conn->procedure_expire = 0U;
     fe4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
     fe8:	e5b3      	b.n	b52 <event_conn_upd_prep+0x72>
		if (!conn->tx_ctrl) {
     fea:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
     fee:	b16a      	cbz	r2, 100c <event_conn_upd_prep+0x52c>
	tx->next = conn->tx_ctrl_last->next;
     ff0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
     ff4:	681a      	ldr	r2, [r3, #0]
     ff6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
     ff8:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
     ffa:	682b      	ldr	r3, [r5, #0]
     ffc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
    1000:	e78c      	b.n	f1c <event_conn_upd_prep+0x43c>
			return -ENOBUFS;
    1002:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    1006:	b00b      	add	sp, #44	; 0x2c
    1008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    100c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    100e:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
    1012:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    1016:	e781      	b.n	f1c <event_conn_upd_prep+0x43c>
    1018:	1afd498d 	.word	0x1afd498d
    101c:	00000007 	.word	0x00000007
    1020:	0002caec 	.word	0x0002caec
    1024:	0002cbb8 	.word	0x0002cbb8
    1028:	0002c630 	.word	0x0002c630
    102c:	200035a4 	.word	0x200035a4
    1030:	d1b71759 	.word	0xd1b71759
    1034:	3b9aca00 	.word	0x3b9aca00
    1038:	431bde83 	.word	0x431bde83
    103c:	00000000 	.word	0x00000000

00001040 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1044:	461c      	mov	r4, r3
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1046:	6813      	ldr	r3, [r2, #0]
{
    1048:	460d      	mov	r5, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    104a:	f8d3 a000 	ldr.w	sl, [r3]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    104e:	f831 cf2e 	ldrh.w	ip, [r1, #46]!
	conn = lll->hdr.parent;
    1052:	4623      	mov	r3, r4
{
    1054:	4617      	mov	r7, r2
	conn = lll->hdr.parent;
    1056:	f853 6b0c 	ldr.w	r6, [r3], #12
    105a:	788a      	ldrb	r2, [r1, #2]
    105c:	f8a4 c00c 	strh.w	ip, [r4, #12]
    1060:	709a      	strb	r2, [r3, #2]
    1062:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
    1066:	60a3      	str	r3, [r4, #8]
    1068:	462b      	mov	r3, r5
{
    106a:	4681      	mov	r9, r0
    106c:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    1070:	61e2      	str	r2, [r4, #28]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1072:	f104 001c 	add.w	r0, r4, #28
    1076:	791b      	ldrb	r3, [r3, #4]
    1078:	7103      	strb	r3, [r0, #4]
{
    107a:	b093      	sub	sp, #76	; 0x4c
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    107c:	2105      	movs	r1, #5
    107e:	f00a fc0d 	bl	b89c <util_ones_count_get>
    1082:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    1086:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    108a:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    108e:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1090:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    1094:	d90a      	bls.n	10ac <ull_slave_setup+0x6c>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1096:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    109a:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    109e:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    10a0:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    10a4:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    10a6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    10aa:	d902      	bls.n	10b2 <ull_slave_setup+0x72>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    10ac:	b013      	add	sp, #76	; 0x4c
    10ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    10b2:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    10b4:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    10b8:	2000      	movs	r0, #0
    10ba:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    10bc:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
	lll->interval = interval;
    10c0:	f8a4 8012 	strh.w	r8, [r4, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    10c4:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
    10c8:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    10cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    10d0:	82a2      	strh	r2, [r4, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    10d2:	095b      	lsrs	r3, r3, #5
    10d4:	f363 0184 	bfi	r1, r3, #2, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    10d8:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    10da:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->slave.sca = pdu_adv->connect_ind.sca;
    10dc:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	conn_interval_us = interval * CONN_INT_UNIT_US;
    10e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    10e4:	fb03 f808 	mul.w	r8, r3, r8
		(((lll_clock_ppm_local_get() +
    10e8:	f015 f80c 	bl	16104 <lll_clock_ppm_local_get>
    10ec:	4683      	mov	fp, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    10ee:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
    10f2:	f3c0 0082 	ubfx	r0, r0, #2, #3
    10f6:	f015 f807 	bl	16108 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    10fa:	4458      	add	r0, fp
		   lll_clock_ppm_get(conn->slave.sca)) *
    10fc:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1100:	f8df e324 	ldr.w	lr, [pc, #804]	; 1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1104:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1108:	8aa1      	ldrh	r1, [r4, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    110a:	4abd      	ldr	r2, [pc, #756]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    110c:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1110:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1114:	fbae 3000 	umull	r3, r0, lr, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1118:	ea4f 0e58 	mov.w	lr, r8, lsr #1
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    111c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1120:	fb03 f30c 	mul.w	r3, r3, ip
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1124:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1126:	f1ae 0e96 	sub.w	lr, lr, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    112a:	62a0      	str	r0, [r4, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    112c:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    112e:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1132:	f8b5 b038 	ldrh.w	fp, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1136:	48b3      	ldr	r0, [pc, #716]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1138:	f242 7310 	movw	r3, #10000	; 0x2710
    113c:	fb03 830b 	mla	r3, r3, fp, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1140:	4442      	add	r2, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1142:	f101 0c06 	add.w	ip, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1146:	3b01      	subs	r3, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1148:	fbb2 f2f8 	udiv	r2, r2, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    114c:	fbb3 f3f8 	udiv	r3, r3, r8
    1150:	f8a6 30c6 	strh.w	r3, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1154:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1156:	4563      	cmp	r3, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1158:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    115a:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    115e:	fbb0 f0f8 	udiv	r0, r0, r8
    1162:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1166:	dd02      	ble.n	116e <ull_slave_setup+0x12e>
			     (conn->apto_reload - (lll->latency + 6)) :
    1168:	1a5b      	subs	r3, r3, r1
    116a:	3b06      	subs	r3, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    116c:	b29b      	uxth	r3, r3
    116e:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
    1172:	4629      	mov	r1, r5
    1174:	68a3      	ldr	r3, [r4, #8]
    1176:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	peer_addr_type = pdu_adv->tx_addr;
    117a:	f851 0f1e 	ldr.w	r0, [r1, #30]!
    117e:	7f2b      	ldrb	r3, [r5, #28]
    1180:	888a      	ldrh	r2, [r1, #4]
    1182:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
	cc->status = 0U;
    1186:	f44f 7c80 	mov.w	ip, #256	; 0x100
	peer_addr_type = pdu_adv->tx_addr;
    118a:	f3c3 1280 	ubfx	r2, r3, #6, #1
	cc->status = 0U;
    118e:	f8a5 c01c 	strh.w	ip, [r5, #28]
	peer_addr_type = pdu_adv->tx_addr;
    1192:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		chan_sel = pdu_adv->chan_sel;
    1196:	f3c3 1240 	ubfx	r2, r3, #5, #1
    119a:	9010      	str	r0, [sp, #64]	; 0x40
    119c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    11a0:	920a      	str	r2, [sp, #40]	; 0x28
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    11a2:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    11a6:	7cba      	ldrb	r2, [r7, #18]
    11a8:	910d      	str	r1, [sp, #52]	; 0x34
    11aa:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    11ac:	f014 fa4c 	bl	15648 <ull_filter_lll_lrpa_used>
    11b0:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    11b4:	f105 032b 	add.w	r3, r5, #43	; 0x2b
    11b8:	2800      	cmp	r0, #0
    11ba:	f040 80eb 	bne.w	1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
	if (rl_idx != FILTER_IDX_NONE) {
    11be:	2aff      	cmp	r2, #255	; 0xff
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    11c0:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    11c4:	8098      	strh	r0, [r3, #4]
    11c6:	f105 0325 	add.w	r3, r5, #37	; 0x25
    11ca:	f000 80ef 	beq.w	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    11ce:	4610      	mov	r0, r2
    11d0:	f105 021f 	add.w	r2, r5, #31
    11d4:	930c      	str	r3, [sp, #48]	; 0x30
    11d6:	f013 fd09 	bl	14bec <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    11da:	7faa      	ldrb	r2, [r5, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    11dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11de:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    11e2:	9810      	ldr	r0, [sp, #64]	; 0x40
    11e4:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
    11e8:	3202      	adds	r2, #2
    11ea:	77aa      	strb	r2, [r5, #30]
    11ec:	8099      	strh	r1, [r3, #4]
	cc->sca = conn->slave.sca;
    11ee:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    11f2:	8a61      	ldrh	r1, [r4, #18]
	cc->latency = lll->latency;
    11f4:	8aa2      	ldrh	r2, [r4, #20]
    11f6:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    11f8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    11fc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->interval = lll->interval;
    1200:	8669      	strh	r1, [r5, #50]	; 0x32
	cc->timeout = timeout;
    1202:	f8a5 b036 	strh.w	fp, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    1206:	4630      	mov	r0, r6
    1208:	f00f fbde 	bl	109c8 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    120c:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    120e:	8220      	strh	r0, [r4, #16]
	rx->handle = lll->handle;
    1210:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    1212:	687d      	ldr	r5, [r7, #4]
		ll_rx_put(link, rx);
    1214:	4648      	mov	r0, r9
    1216:	f00e f871 	bl	f2fc <ll_rx_put>
		rx->handle = lll->handle;
    121a:	8a23      	ldrh	r3, [r4, #16]
    121c:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    121e:	2318      	movs	r3, #24
    1220:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    1222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    1224:	6828      	ldr	r0, [r5, #0]
		if (chan_sel) {
    1226:	2b00      	cmp	r3, #0
    1228:	f000 80cf 	beq.w	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    122c:	f894 e009 	ldrb.w	lr, [r4, #9]
				      lll->access_addr[0];
    1230:	7a23      	ldrb	r3, [r4, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    1232:	f894 c00b 	ldrb.w	ip, [r4, #11]
				      lll->access_addr[2];
    1236:	7aa1      	ldrb	r1, [r4, #10]
			lll->data_chan_sel = 1;
    1238:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    123c:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    1240:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    1244:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    1246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    124a:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    124c:	8463      	strh	r3, [r4, #34]	; 0x22
			lll->data_chan_sel = 1;
    124e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
			cs->csa = 0x01;
    1252:	7729      	strb	r1, [r5, #28]
	ll_rx_put(link, rx);
    1254:	4629      	mov	r1, r5
    1256:	f00e f851 	bl	f2fc <ll_rx_put>
	ll_rx_sched();
    125a:	f00e f859 	bl	f310 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    125e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    1262:	2101      	movs	r1, #1
    1264:	f000 0007 	and.w	r0, r0, #7
    1268:	f014 fe5a 	bl	15f20 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    126c:	4a66      	ldr	r2, [pc, #408]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
	conn->evt.ticks_active_to_start = 0U;
    126e:	f04f 0900 	mov.w	r9, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1272:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    1274:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1276:	f200 4052 	addw	r0, r0, #1106	; 0x452
    127a:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    127e:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    1280:	e9c6 9901 	strd	r9, r9, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1284:	a35c      	add	r3, pc, #368	; (adr r3, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    1286:	e9d3 2300 	ldrd	r2, r3, [r3]
    128a:	f7fe ff79 	bl	180 <__aeabi_uldivmod>
	conn_offset_us = ftr->radio_end_us;
    128e:	68fd      	ldr	r5, [r7, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1290:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    1292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1294:	f240 42e2 	movw	r2, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1298:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    129c:	fb02 5501 	mla	r5, r2, r1, r5
	conn->evt.ticks_slot =
    12a0:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    12a2:	464a      	mov	r2, r9
    12a4:	2102      	movs	r1, #2
    12a6:	2001      	movs	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    12a8:	eba8 0803 	sub.w	r8, r8, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    12ac:	f00a f9cc 	bl	b648 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    12b0:	4650      	mov	r0, sl
    12b2:	f00e fdab 	bl	fe0c <ull_adv_handle_get>
    12b6:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    12b8:	4b54      	ldr	r3, [pc, #336]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    12ba:	f8cd a000 	str.w	sl, [sp]
    12be:	b2d2      	uxtb	r2, r2
    12c0:	4648      	mov	r0, r9
    12c2:	2101      	movs	r1, #1
    12c4:	f00b fcd2 	bl	cc6c <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    12c8:	f205 3586 	addw	r5, r5, #902	; 0x386
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    12cc:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    12ce:	eba5 050b 	sub.w	r5, r5, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    12d2:	f000 8086 	beq.w	13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
	if (adv->lll.is_hdcd) {
    12d6:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    12da:	07db      	lsls	r3, r3, #31
    12dc:	d479      	bmi.n	13d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    12de:	4630      	mov	r0, r6
    12e0:	f00f fb72 	bl	109c8 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    12e4:	f8df b120 	ldr.w	fp, [pc, #288]	; 1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>
    12e8:	fba8 890b 	umull	r8, r9, r8, fp
    12ec:	a342      	add	r3, pc, #264	; (adr r3, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    12ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    12f2:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    12f4:	4649      	mov	r1, r9
    12f6:	4640      	mov	r0, r8
    12f8:	f7fe ff42 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    12fc:	4a44      	ldr	r2, [pc, #272]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    12fe:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1300:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    1304:	fbaa 2302 	umull	r2, r3, sl, r2
    1308:	2107      	movs	r1, #7
    130a:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    130e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    1312:	68bf      	ldr	r7, [r7, #8]
    1314:	9108      	str	r1, [sp, #32]
    1316:	493f      	ldr	r1, [pc, #252]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1318:	9107      	str	r1, [sp, #28]
    131a:	493f      	ldr	r1, [pc, #252]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    131c:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    131e:	ebb8 0002 	subs.w	r0, r8, r2
    1322:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1326:	68f3      	ldr	r3, [r6, #12]
    1328:	9304      	str	r3, [sp, #16]
    132a:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1330:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1332:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1334:	f7fe ff24 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1338:	a32f      	add	r3, pc, #188	; (adr r3, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    133a:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    133e:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1340:	fba5 010b 	umull	r0, r1, r5, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1344:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1348:	f7fe ff1a 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    134c:	3403      	adds	r4, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    134e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1352:	b2e4      	uxtb	r4, r4
    1354:	3f31      	subs	r7, #49	; 0x31
    1356:	463b      	mov	r3, r7
    1358:	9000      	str	r0, [sp, #0]
    135a:	4622      	mov	r2, r4
    135c:	4630      	mov	r0, r6
    135e:	2101      	movs	r1, #1
    1360:	f00b fbfc 	bl	cb5c <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1364:	f030 0302 	bics.w	r3, r0, #2
    1368:	d00c      	beq.n	1384 <ull_slave_setup+0x344>
    136a:	4a2c      	ldr	r2, [pc, #176]	; (141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>)
    136c:	492c      	ldr	r1, [pc, #176]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    136e:	482d      	ldr	r0, [pc, #180]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    1370:	f240 136d 	movw	r3, #365	; 0x16d
    1374:	f021 fd47 	bl	22e06 <printk>
    1378:	4040      	eors	r0, r0
    137a:	f380 8811 	msr	BASEPRI, r0
    137e:	f04f 0003 	mov.w	r0, #3
    1382:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1384:	2201      	movs	r2, #1
    1386:	4610      	mov	r0, r2
    1388:	2102      	movs	r1, #2
}
    138a:	b013      	add	sp, #76	; 0x4c
    138c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1390:	f00a b95a 	b.w	b648 <mayfly_enable>
    1394:	4628      	mov	r0, r5
	if (rl_idx != FILTER_IDX_NONE) {
    1396:	2aff      	cmp	r2, #255	; 0xff
    1398:	f850 cf24 	ldr.w	ip, [r0, #36]!
    139c:	f8c5 c02b 	str.w	ip, [r5, #43]	; 0x2b
    13a0:	8880      	ldrh	r0, [r0, #4]
    13a2:	8098      	strh	r0, [r3, #4]
    13a4:	f105 0325 	add.w	r3, r5, #37	; 0x25
    13a8:	f47f af11 	bne.w	11ce <ull_slave_setup+0x18e>
__ssp_bos_icheck3(memset, void *, int)
    13ac:	2200      	movs	r2, #0
    13ae:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    13b2:	9810      	ldr	r0, [sp, #64]	; 0x40
    13b4:	f8c5 2025 	str.w	r2, [r5, #37]	; 0x25
    13b8:	809a      	strh	r2, [r3, #4]
		cc->peer_addr_type = peer_addr_type;
    13ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    13be:	f8a5 1023 	strh.w	r1, [r5, #35]	; 0x23
    13c2:	77ab      	strb	r3, [r5, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    13c4:	f8c5 001f 	str.w	r0, [r5, #31]
    13c8:	e711      	b.n	11ee <ull_slave_setup+0x1ae>
			cs->csa = 0x00;
    13ca:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    13ce:	772b      	strb	r3, [r5, #28]
    13d0:	e740      	b.n	1254 <ull_slave_setup+0x214>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    13d2:	2300      	movs	r3, #0
    13d4:	2201      	movs	r2, #1
    13d6:	9300      	str	r3, [sp, #0]
    13d8:	4618      	mov	r0, r3
    13da:	4611      	mov	r1, r2
    13dc:	f00b fc46 	bl	cc6c <ticker_stop>
    13e0:	e77d      	b.n	12de <ull_slave_setup+0x29e>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    13e2:	f00e f841 	bl	f468 <ull_disable_mark_get>
    13e6:	4582      	cmp	sl, r0
    13e8:	f43f af75 	beq.w	12d6 <ull_slave_setup+0x296>
    13ec:	f013 f94e 	bl	1468c <ticker_op_stop_adv_cb.part.0>
    13f0:	e771      	b.n	12d6 <ull_slave_setup+0x296>
    13f2:	bf00      	nop
    13f4:	f3af 8000 	nop.w
    13f8:	1afd498d 	.word	0x1afd498d
    13fc:	00000007 	.word	0x00000007
    1400:	01c9c37f 	.word	0x01c9c37f
    1404:	026259ff 	.word	0x026259ff
    1408:	3b9aca00 	.word	0x3b9aca00
    140c:	000146b9 	.word	0x000146b9
    1410:	1afd498d 	.word	0x1afd498d
    1414:	0001465d 	.word	0x0001465d
    1418:	000146d5 	.word	0x000146d5
    141c:	0002cd14 	.word	0x0002cd14
    1420:	0002cbcc 	.word	0x0002cbcc
    1424:	0002c630 	.word	0x0002c630
    1428:	431bde83 	.word	0x431bde83

0000142c <disconnected>:
	clock_show_time();
	display_connect_event();
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    142c:	b508      	push	{r3, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    142e:	4a08      	ldr	r2, [pc, #32]	; (1450 <disconnected+0x24>)
    1430:	4b08      	ldr	r3, [pc, #32]	; (1454 <disconnected+0x28>)
	LOG_INF("disconnected (reason: %u)", reason);
    1432:	4809      	ldr	r0, [pc, #36]	; (1458 <disconnected+0x2c>)
    1434:	1ad2      	subs	r2, r2, r3
    1436:	08d2      	lsrs	r2, r2, #3
    1438:	0192      	lsls	r2, r2, #6
    143a:	f042 0203 	orr.w	r2, r2, #3
    143e:	f022 f904 	bl	2364a <log_1>
	cts_sync_enable(false);
    1442:	2000      	movs	r0, #0
    1444:	f000 fa48 	bl	18d8 <cts_sync_enable>
	display_disconnect_event(); //shows first screen
	//display_set_bluetooth_disconnected(); //bt-symbol is displayed -- readability is not top...
	//gfx_bt_set_label(BT_ADVERTISING_ON);
	//gfx_update();
}
    1448:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	display_disconnect_event(); //shows first screen
    144c:	f000 baca 	b.w	19e4 <display_disconnect_event>
    1450:	0002bfa8 	.word	0x0002bfa8
    1454:	0002bfa8 	.word	0x0002bfa8
    1458:	0002dc5e 	.word	0x0002dc5e

0000145c <connected>:
{
    145c:	b510      	push	{r4, lr}
	printk("test\n");
    145e:	480c      	ldr	r0, [pc, #48]	; (1490 <connected+0x34>)
{
    1460:	460c      	mov	r4, r1
	printk("test\n");
    1462:	f021 fcd0 	bl	22e06 <printk>
	if (err) {
    1466:	b994      	cbnz	r4, 148e <connected+0x32>
    1468:	4b0a      	ldr	r3, [pc, #40]	; (1494 <connected+0x38>)
    146a:	490b      	ldr	r1, [pc, #44]	; (1498 <connected+0x3c>)
	LOG_INF("connected");
    146c:	480b      	ldr	r0, [pc, #44]	; (149c <connected+0x40>)
    146e:	1ac9      	subs	r1, r1, r3
    1470:	08c9      	lsrs	r1, r1, #3
    1472:	0189      	lsls	r1, r1, #6
    1474:	f041 0103 	orr.w	r1, r1, #3
    1478:	f022 f8da 	bl	23630 <log_0>
	cts_sync_enable(true);
    147c:	2001      	movs	r0, #1
    147e:	f000 fa2b 	bl	18d8 <cts_sync_enable>
	clock_show_time();
    1482:	f000 f925 	bl	16d0 <clock_show_time>
}
    1486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	display_connect_event();
    148a:	f000 baa5 	b.w	19d8 <display_connect_event>
}
    148e:	bd10      	pop	{r4, pc}
    1490:	0002dc78 	.word	0x0002dc78
    1494:	0002bfa8 	.word	0x0002bfa8
    1498:	0002bfa8 	.word	0x0002bfa8
    149c:	0002f461 	.word	0x0002f461

000014a0 <advertise>:
{
    14a0:	b507      	push	{r0, r1, r2, lr}
	bt_le_adv_stop();
    14a2:	f005 febb 	bl	721c <bt_le_adv_stop>
	rc = bt_le_adv_start(&param, ad, ARRAY_SIZE(ad), NULL, 0);
    14a6:	2300      	movs	r3, #0
    14a8:	490e      	ldr	r1, [pc, #56]	; (14e4 <advertise+0x44>)
    14aa:	9300      	str	r3, [sp, #0]
    14ac:	2203      	movs	r2, #3
    14ae:	480e      	ldr	r0, [pc, #56]	; (14e8 <advertise+0x48>)
    14b0:	f005 fea6 	bl	7200 <bt_le_adv_start>
	if (rc) {
    14b4:	4a0d      	ldr	r2, [pc, #52]	; (14ec <advertise+0x4c>)
    14b6:	4b0e      	ldr	r3, [pc, #56]	; (14f0 <advertise+0x50>)
    14b8:	1ad2      	subs	r2, r2, r3
    14ba:	08d2      	lsrs	r2, r2, #3
    14bc:	4601      	mov	r1, r0
    14be:	0192      	lsls	r2, r2, #6
    14c0:	b138      	cbz	r0, 14d2 <advertise+0x32>
		LOG_ERR("Advertising failed to start (rc %d)", rc);
    14c2:	480c      	ldr	r0, [pc, #48]	; (14f4 <advertise+0x54>)
    14c4:	f042 0201 	orr.w	r2, r2, #1
}
    14c8:	b003      	add	sp, #12
    14ca:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_ERR("Advertising failed to start (rc %d)", rc);
    14ce:	f022 b8bc 	b.w	2364a <log_1>
	LOG_INF("Advertising successfully started");
    14d2:	4809      	ldr	r0, [pc, #36]	; (14f8 <advertise+0x58>)
    14d4:	f042 0103 	orr.w	r1, r2, #3
}
    14d8:	b003      	add	sp, #12
    14da:	f85d eb04 	ldr.w	lr, [sp], #4
	LOG_INF("Advertising successfully started");
    14de:	f022 b8a7 	b.w	23630 <log_0>
    14e2:	bf00      	nop
    14e4:	0002c188 	.word	0x0002c188
    14e8:	200001dc 	.word	0x200001dc
    14ec:	0002bfa8 	.word	0x0002bfa8
    14f0:	0002bfa8 	.word	0x0002bfa8
    14f4:	0002dc7e 	.word	0x0002dc7e
    14f8:	0002dca2 	.word	0x0002dca2

000014fc <bt_init>:
{

}

void bt_init(void)
{
    14fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = bt_enable(NULL);
    14fe:	2000      	movs	r0, #0
    1500:	f005 fb70 	bl	6be4 <bt_enable>
	if (err) {
    1504:	4c22      	ldr	r4, [pc, #136]	; (1590 <bt_init+0x94>)
    1506:	4b23      	ldr	r3, [pc, #140]	; (1594 <bt_init+0x98>)
    1508:	1ae4      	subs	r4, r4, r3
    150a:	08e4      	lsrs	r4, r4, #3
    150c:	4605      	mov	r5, r0
    150e:	01a4      	lsls	r4, r4, #6
    1510:	b138      	cbz	r0, 1522 <bt_init+0x26>
		LOG_ERR("Bluetooth init failed (err %d)", err);
    1512:	f044 0201 	orr.w	r2, r4, #1
    1516:	4601      	mov	r1, r0
#endif
	cts_sync_init();

	LOG_INF("Bluetooth initialized"); //jj
	LOG_DBG("Bluetooth initialized");
}
    1518:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Bluetooth init failed (err %d)", err);
    151c:	481e      	ldr	r0, [pc, #120]	; (1598 <bt_init+0x9c>)
    151e:	f022 b894 	b.w	2364a <log_1>
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    1522:	4f1e      	ldr	r7, [pc, #120]	; (159c <bt_init+0xa0>)
	settings_load();
    1524:	f022 fb6c 	bl	23c00 <settings_load>
	settings_runtime_set("bt/dis/sw",
    1528:	491d      	ldr	r1, [pc, #116]	; (15a0 <bt_init+0xa4>)
    152a:	481e      	ldr	r0, [pc, #120]	; (15a4 <bt_init+0xa8>)
    152c:	2209      	movs	r2, #9
    152e:	f002 f913 	bl	3758 <settings_runtime_set>
    1532:	463e      	mov	r6, r7
	settings_runtime_set("bt/dis/fw",
    1534:	491c      	ldr	r1, [pc, #112]	; (15a8 <bt_init+0xac>)
    1536:	481d      	ldr	r0, [pc, #116]	; (15ac <bt_init+0xb0>)
    1538:	2201      	movs	r2, #1
    153a:	f002 f90d 	bl	3758 <settings_runtime_set>
    153e:	4b1c      	ldr	r3, [pc, #112]	; (15b0 <bt_init+0xb4>)
	bt_conn_cb_register(&m_conn_callbacks);
    1540:	481c      	ldr	r0, [pc, #112]	; (15b4 <bt_init+0xb8>)
    1542:	607b      	str	r3, [r7, #4]
    1544:	f846 5f08 	str.w	r5, [r6, #8]!
    1548:	603d      	str	r5, [r7, #0]
    154a:	f006 f8c7 	bl	76dc <bt_conn_cb_register>
		LOG_INF("bt init callback started\n");
    154e:	481a      	ldr	r0, [pc, #104]	; (15b8 <bt_init+0xbc>)
    1550:	f044 0103 	orr.w	r1, r4, #3
    1554:	f022 f86c 	bl	23630 <log_0>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1558:	f3bf 8f5b 	dmb	ish
    155c:	e856 3f00 	ldrex	r3, [r6]
    1560:	f043 0201 	orr.w	r2, r3, #1
    1564:	e846 2100 	strex	r1, r2, [r6]
    1568:	2900      	cmp	r1, #0
    156a:	d1f7      	bne.n	155c <bt_init+0x60>
    156c:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    1570:	07db      	lsls	r3, r3, #31
    1572:	d403      	bmi.n	157c <bt_init+0x80>
		k_queue_append(&work_q->queue, work);
    1574:	4811      	ldr	r0, [pc, #68]	; (15bc <bt_init+0xc0>)
    1576:	4639      	mov	r1, r7
    1578:	f029 fd0e 	bl	2af98 <k_queue_append>
	cts_sync_init();
    157c:	f000 f990 	bl	18a0 <cts_sync_init>
	LOG_INF("Bluetooth initialized"); //jj
    1580:	f044 0103 	orr.w	r1, r4, #3
    1584:	480e      	ldr	r0, [pc, #56]	; (15c0 <bt_init+0xc4>)
}
    1586:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	LOG_INF("Bluetooth initialized"); //jj
    158a:	f022 b851 	b.w	23630 <log_0>
    158e:	bf00      	nop
    1590:	0002bfa8 	.word	0x0002bfa8
    1594:	0002bfa8 	.word	0x0002bfa8
    1598:	0002dcc3 	.word	0x0002dcc3
    159c:	20001500 	.word	0x20001500
    15a0:	0002dce2 	.word	0x0002dce2
    15a4:	0002dceb 	.word	0x0002dceb
    15a8:	0002e0bc 	.word	0x0002e0bc
    15ac:	0002dcf5 	.word	0x0002dcf5
    15b0:	000014a1 	.word	0x000014a1
    15b4:	200001c8 	.word	0x200001c8
    15b8:	0002dcff 	.word	0x0002dcff
    15bc:	20001458 	.word	0x20001458
    15c0:	0002dd19 	.word	0x0002dd19

000015c4 <clock_str_to_local_time>:
	.tm_wday = 0,
};

/* ********** ********** FUNCTIONS *********** ********** */
void clock_str_to_local_time(const char *str)
{
    15c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (sscanf(str, "%d-%d-%dT%d:%d:%d", &ti.tm_year, &ti.tm_mon,
    15c6:	4c15      	ldr	r4, [pc, #84]	; (161c <clock_str_to_local_time+0x58>)
    15c8:	4915      	ldr	r1, [pc, #84]	; (1620 <clock_str_to_local_time+0x5c>)
    15ca:	9403      	str	r4, [sp, #12]
    15cc:	1d23      	adds	r3, r4, #4
    15ce:	9302      	str	r3, [sp, #8]
    15d0:	f104 0308 	add.w	r3, r4, #8
    15d4:	9301      	str	r3, [sp, #4]
    15d6:	f104 030c 	add.w	r3, r4, #12
    15da:	9300      	str	r3, [sp, #0]
    15dc:	f104 0214 	add.w	r2, r4, #20
    15e0:	f104 0310 	add.w	r3, r4, #16
    15e4:	f01f fc6a 	bl	20ebc <siscanf>
    15e8:	2806      	cmp	r0, #6
    15ea:	d009      	beq.n	1600 <clock_str_to_local_time+0x3c>
    15ec:	490d      	ldr	r1, [pc, #52]	; (1624 <clock_str_to_local_time+0x60>)
    15ee:	4b0e      	ldr	r3, [pc, #56]	; (1628 <clock_str_to_local_time+0x64>)
		   &ti.tm_mday, &ti.tm_hour, &ti.tm_min, &ti.tm_sec) != 6) {
		LOG_ERR("Failed to parse time of build.");
    15f0:	480e      	ldr	r0, [pc, #56]	; (162c <clock_str_to_local_time+0x68>)
    15f2:	1ac9      	subs	r1, r1, r3
    15f4:	08c9      	lsrs	r1, r1, #3
    15f6:	0189      	lsls	r1, r1, #6
    15f8:	f041 0101 	orr.w	r1, r1, #1
    15fc:	f022 f818 	bl	23630 <log_0>
	}
	ti.tm_year-=1900;
    1600:	6963      	ldr	r3, [r4, #20]
	ti.tm_mon-=1;
	mktime(&ti);
    1602:	4806      	ldr	r0, [pc, #24]	; (161c <clock_str_to_local_time+0x58>)
	ti.tm_year-=1900;
    1604:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
    1608:	6163      	str	r3, [r4, #20]
	ti.tm_mon-=1;
    160a:	6923      	ldr	r3, [r4, #16]
    160c:	3b01      	subs	r3, #1
    160e:	6123      	str	r3, [r4, #16]
}
    1610:	b004      	add	sp, #16
    1612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mktime(&ti);
    1616:	f01f ba7b 	b.w	20b10 <mktime>
    161a:	bf00      	nop
    161c:	2000150c 	.word	0x2000150c
    1620:	0002dd2f 	.word	0x0002dd2f
    1624:	0002bfa8 	.word	0x0002bfa8
    1628:	0002bfa8 	.word	0x0002bfa8
    162c:	0002dd41 	.word	0x0002dd41

00001630 <clock_init>:

void clock_init()
{
	/* Set time to time of build */
	clock_str_to_local_time(TIME_OF_BUILD);
    1630:	4801      	ldr	r0, [pc, #4]	; (1638 <clock_init+0x8>)
    1632:	f7ff bfc7 	b.w	15c4 <clock_str_to_local_time>
    1636:	bf00      	nop
    1638:	0002dd60 	.word	0x0002dd60

0000163c <clock_update_elapsed_ms>:
	LOG_DBG("Time set to time of build");
	LOG_DBG("Clock init: Done");
}

void clock_update_elapsed_ms()
{
    163c:	b538      	push	{r3, r4, r5, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    163e:	f029 fed3 	bl	2b3e8 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    1642:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1646:	460a      	mov	r2, r1
    1648:	fba0 0103 	umull	r0, r1, r0, r3
    164c:	fb03 1102 	mla	r1, r3, r2, r1
	uptime_ms = k_uptime_get();
	elapsed_ms = uptime_ms - last_uptime_ms;
    1650:	4a0d      	ldr	r2, [pc, #52]	; (1688 <clock_update_elapsed_ms+0x4c>)
    1652:	4d0e      	ldr	r5, [pc, #56]	; (168c <clock_update_elapsed_ms+0x50>)
    1654:	0bc3      	lsrs	r3, r0, #15
    1656:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    165a:	0bcc      	lsrs	r4, r1, #15
    165c:	e9d2 1000 	ldrd	r1, r0, [r2]
    1660:	1a59      	subs	r1, r3, r1
    1662:	eb64 0000 	sbc.w	r0, r4, r0
    1666:	e9c5 1000 	strd	r1, r0, [r5]
	last_uptime_ms = uptime_ms;
    166a:	e9c2 3400 	strd	r3, r4, [r2]
    166e:	4908      	ldr	r1, [pc, #32]	; (1690 <clock_update_elapsed_ms+0x54>)
    1670:	4b08      	ldr	r3, [pc, #32]	; (1694 <clock_update_elapsed_ms+0x58>)
	LOG_INF("Clock updated: "); //jj
    1672:	4809      	ldr	r0, [pc, #36]	; (1698 <clock_update_elapsed_ms+0x5c>)
    1674:	1ac9      	subs	r1, r1, r3
    1676:	08c9      	lsrs	r1, r1, #3
    1678:	0189      	lsls	r1, r1, #6
}
    167a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("Clock updated: "); //jj
    167e:	f041 0103 	orr.w	r1, r1, #3
    1682:	f021 bfd5 	b.w	23630 <log_0>
    1686:	bf00      	nop
    1688:	20000d80 	.word	0x20000d80
    168c:	20000d78 	.word	0x20000d78
    1690:	0002bfa8 	.word	0x0002bfa8
    1694:	0002bfa8 	.word	0x0002bfa8
    1698:	0002dd74 	.word	0x0002dd74

0000169c <clock_sync_time>:

/* Called by cts sync */
void clock_sync_time(cts_datetime_t *cts)
{
    169c:	b508      	push	{r3, lr}
    169e:	4603      	mov	r3, r0
	ti.tm_year = cts->year -1900;
    16a0:	480a      	ldr	r0, [pc, #40]	; (16cc <clock_sync_time+0x30>)
    16a2:	881a      	ldrh	r2, [r3, #0]
    16a4:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    16a8:	6142      	str	r2, [r0, #20]
	ti.tm_mon = cts->month -1;
    16aa:	789a      	ldrb	r2, [r3, #2]
    16ac:	3a01      	subs	r2, #1
    16ae:	6102      	str	r2, [r0, #16]
	ti.tm_mday = cts->day;
    16b0:	78da      	ldrb	r2, [r3, #3]
    16b2:	60c2      	str	r2, [r0, #12]
	ti.tm_hour = cts->hours;
    16b4:	791a      	ldrb	r2, [r3, #4]
    16b6:	6082      	str	r2, [r0, #8]
	ti.tm_min = cts->minutes;
    16b8:	795a      	ldrb	r2, [r3, #5]
    16ba:	6042      	str	r2, [r0, #4]
	ti.tm_sec = cts->seconds;
    16bc:	799b      	ldrb	r3, [r3, #6]
    16be:	6003      	str	r3, [r0, #0]
	mktime(&ti);
    16c0:	f01f fa26 	bl	20b10 <mktime>
	clock_update_elapsed_ms();
}
    16c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clock_update_elapsed_ms();
    16c8:	f7ff bfb8 	b.w	163c <clock_update_elapsed_ms>
    16cc:	2000150c 	.word	0x2000150c

000016d0 <clock_show_time>:
	ti.tm_sec += elapsed_ms / 1000;
	mktime(&ti);
}

void clock_show_time()
{
    16d0:	b570      	push	{r4, r5, r6, lr}
	strftime(time_label_str, 32, "%H:%M", &ti);
    16d2:	4e0b      	ldr	r6, [pc, #44]	; (1700 <clock_show_time+0x30>)
    16d4:	4d0b      	ldr	r5, [pc, #44]	; (1704 <clock_show_time+0x34>)
	strftime(date_label_str, 32, "%a %d %b", &ti);
    16d6:	4c0c      	ldr	r4, [pc, #48]	; (1708 <clock_show_time+0x38>)
	strftime(time_label_str, 32, "%H:%M", &ti);
    16d8:	4a0c      	ldr	r2, [pc, #48]	; (170c <clock_show_time+0x3c>)
    16da:	4633      	mov	r3, r6
    16dc:	2120      	movs	r1, #32
    16de:	4628      	mov	r0, r5
    16e0:	f020 f962 	bl	219a8 <strftime>
	strftime(date_label_str, 32, "%a %d %b", &ti);
    16e4:	4633      	mov	r3, r6
    16e6:	4a0a      	ldr	r2, [pc, #40]	; (1710 <clock_show_time+0x40>)
    16e8:	2120      	movs	r1, #32
    16ea:	4620      	mov	r0, r4
    16ec:	f020 f95c 	bl	219a8 <strftime>
	//gfx_time_set_label(time_label_str); jj
	display_time_set_label(time_label_str);
    16f0:	4628      	mov	r0, r5
    16f2:	f000 f921 	bl	1938 <display_time_set_label>
	//gfx_date_set_label(date_label_str);
	display_date_set_label(date_label_str);
    16f6:	4620      	mov	r0, r4
}
    16f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	display_date_set_label(date_label_str);
    16fc:	f000 b924 	b.w	1948 <display_date_set_label>
    1700:	2000150c 	.word	0x2000150c
    1704:	2000811c 	.word	0x2000811c
    1708:	200080fc 	.word	0x200080fc
    170c:	0002dd84 	.word	0x0002dd84
    1710:	0002dd8a 	.word	0x0002dd8a

00001714 <cts_sync_timer_timeout_handler>:
	t->tm_sec = clock_datetime.seconds;
}

static void cts_sync_timer_timeout_handler(struct k_timer *tmr)
{
	bt_conn_foreach(BT_CONN_TYPE_LE, cts_sync_processor, NULL);
    1714:	4902      	ldr	r1, [pc, #8]	; (1720 <cts_sync_timer_timeout_handler+0xc>)
    1716:	2200      	movs	r2, #0
    1718:	2001      	movs	r0, #1
    171a:	f006 bacb 	b.w	7cb4 <bt_conn_foreach>
    171e:	bf00      	nop
    1720:	00001725 	.word	0x00001725

00001724 <cts_sync_processor>:

	return BT_GATT_ITER_STOP;
}

static void cts_sync_processor(struct bt_conn *conn, void *data)
{
    1724:	b507      	push	{r0, r1, r2, lr}
	memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    1726:	2300      	movs	r3, #0
    1728:	f88d 3004 	strb.w	r3, [sp, #4]
    172c:	f642 232b 	movw	r3, #10795	; 0x2a2b
    1730:	f8ad 3006 	strh.w	r3, [sp, #6]
    1734:	4b10      	ldr	r3, [pc, #64]	; (1778 <cts_sync_processor+0x54>)
	cts_discovery_params.func = cts_sync_service_discovered;
    1736:	4911      	ldr	r1, [pc, #68]	; (177c <cts_sync_processor+0x58>)
    1738:	9a01      	ldr	r2, [sp, #4]
    173a:	601a      	str	r2, [r3, #0]
    173c:	4a10      	ldr	r2, [pc, #64]	; (1780 <cts_sync_processor+0x5c>)
    173e:	604a      	str	r2, [r1, #4]
	cts_discovery_params.start_handle = 0x0001;
    1740:	2201      	movs	r2, #1
    1742:	810a      	strh	r2, [r1, #8]
	cts_discovery_params.end_handle = 0xFFFF;
    1744:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1748:	81ca      	strh	r2, [r1, #14]
	cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    174a:	2203      	movs	r2, #3
    174c:	740a      	strb	r2, [r1, #16]
	cts_discovery_params.uuid = (struct bt_uuid *) &uuid;
    174e:	600b      	str	r3, [r1, #0]

	if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    1750:	f009 f818 	bl	a784 <bt_gatt_discover>
    1754:	b160      	cbz	r0, 1770 <cts_sync_processor+0x4c>
    1756:	4b0b      	ldr	r3, [pc, #44]	; (1784 <cts_sync_processor+0x60>)
    1758:	490b      	ldr	r1, [pc, #44]	; (1788 <cts_sync_processor+0x64>)
		LOG_ERR("CTS Sync > GATT discovery FAILED.");
    175a:	480c      	ldr	r0, [pc, #48]	; (178c <cts_sync_processor+0x68>)
    175c:	1ac9      	subs	r1, r1, r3
    175e:	08c9      	lsrs	r1, r1, #3
    1760:	0189      	lsls	r1, r1, #6
    1762:	f041 0101 	orr.w	r1, r1, #1
	}
}
    1766:	b003      	add	sp, #12
    1768:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_ERR("CTS Sync > GATT discovery FAILED.");
    176c:	f021 bf60 	b.w	23630 <log_0>
}
    1770:	b003      	add	sp, #12
    1772:	f85d fb04 	ldr.w	pc, [sp], #4
    1776:	bf00      	nop
    1778:	200080ce 	.word	0x200080ce
    177c:	20001530 	.word	0x20001530
    1780:	00001791 	.word	0x00001791
    1784:	0002bfa8 	.word	0x0002bfa8
    1788:	0002bfa8 	.word	0x0002bfa8
    178c:	0002dd93 	.word	0x0002dd93

00001790 <cts_sync_service_discovered>:
{
    1790:	b510      	push	{r4, lr}
	if (!attr) {
    1792:	460b      	mov	r3, r1
    1794:	b959      	cbnz	r1, 17ae <cts_sync_service_discovered+0x1e>
    1796:	490e      	ldr	r1, [pc, #56]	; (17d0 <cts_sync_service_discovered+0x40>)
    1798:	4b0e      	ldr	r3, [pc, #56]	; (17d4 <cts_sync_service_discovered+0x44>)
		LOG_INF("CTS Service Discovery completed");
    179a:	480f      	ldr	r0, [pc, #60]	; (17d8 <cts_sync_service_discovered+0x48>)
    179c:	1ac9      	subs	r1, r1, r3
    179e:	08c9      	lsrs	r1, r1, #3
    17a0:	0189      	lsls	r1, r1, #6
    17a2:	f041 0103 	orr.w	r1, r1, #3
    17a6:	f021 ff43 	bl	23630 <log_0>
}
    17aa:	2000      	movs	r0, #0
    17ac:	bd10      	pop	{r4, pc}
	memset(&read_params, 0, sizeof(read_params));
    17ae:	490b      	ldr	r1, [pc, #44]	; (17dc <cts_sync_service_discovered+0x4c>)
	read_params.by_uuid.start_handle = attr->handle;
    17b0:	8a1b      	ldrh	r3, [r3, #16]
    17b2:	810b      	strh	r3, [r1, #8]
	read_params.by_uuid.end_handle = 0xffff;
    17b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	memset(&read_params, 0, sizeof(read_params));
    17b8:	2200      	movs	r2, #0
	read_params.func = cts_sync_read;
    17ba:	4c09      	ldr	r4, [pc, #36]	; (17e0 <cts_sync_service_discovered+0x50>)
	read_params.by_uuid.end_handle = 0xffff;
    17bc:	814b      	strh	r3, [r1, #10]
	m_read_buf.offset = 0;
    17be:	4b09      	ldr	r3, [pc, #36]	; (17e4 <cts_sync_service_discovered+0x54>)
	read_params.func = cts_sync_read;
    17c0:	600c      	str	r4, [r1, #0]
	memset(&read_params, 0, sizeof(read_params));
    17c2:	604a      	str	r2, [r1, #4]
	read_params.by_uuid.uuid = (struct bt_uuid *) &uuid;
    17c4:	4c08      	ldr	r4, [pc, #32]	; (17e8 <cts_sync_service_discovered+0x58>)
    17c6:	60cc      	str	r4, [r1, #12]
	m_read_buf.offset = 0;
    17c8:	601a      	str	r2, [r3, #0]
	if (bt_gatt_read(conn, &read_params) < 0) {
    17ca:	f009 fb89 	bl	aee0 <bt_gatt_read>
	return BT_GATT_ITER_STOP;
    17ce:	e7ec      	b.n	17aa <cts_sync_service_discovered+0x1a>
    17d0:	0002bfa8 	.word	0x0002bfa8
    17d4:	0002bfa8 	.word	0x0002bfa8
    17d8:	0002ddb5 	.word	0x0002ddb5
    17dc:	20001554 	.word	0x20001554
    17e0:	000017ed 	.word	0x000017ed
    17e4:	20001544 	.word	0x20001544
    17e8:	200080ce 	.word	0x200080ce

000017ec <cts_sync_read>:
{
    17ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    17ee:	b087      	sub	sp, #28
    17f0:	4c23      	ldr	r4, [pc, #140]	; (1880 <cts_sync_read+0x94>)
    17f2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (!data || length <= 0) {
    17f6:	4619      	mov	r1, r3
    17f8:	b10b      	cbz	r3, 17fe <cts_sync_read+0x12>
    17fa:	2d00      	cmp	r5, #0
    17fc:	d132      	bne.n	1864 <cts_sync_read+0x78>
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    17fe:	88a6      	ldrh	r6, [r4, #4]
    1800:	79e5      	ldrb	r5, [r4, #7]
    1802:	7a22      	ldrb	r2, [r4, #8]
	    + cts_datetime->minutes + cts_datetime->seconds == 0) {
    1804:	7a63      	ldrb	r3, [r4, #9]
    1806:	7aa7      	ldrb	r7, [r4, #10]
    1808:	491e      	ldr	r1, [pc, #120]	; (1884 <cts_sync_read+0x98>)
    180a:	4c1f      	ldr	r4, [pc, #124]	; (1888 <cts_sync_read+0x9c>)
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    180c:	1970      	adds	r0, r6, r5
    180e:	4410      	add	r0, r2
    1810:	1b09      	subs	r1, r1, r4
	    + cts_datetime->minutes + cts_datetime->seconds == 0) {
    1812:	4418      	add	r0, r3
    1814:	08c9      	lsrs	r1, r1, #3
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    1816:	19c4      	adds	r4, r0, r7
    1818:	ea4f 1181 	mov.w	r1, r1, lsl #6
    181c:	d107      	bne.n	182e <cts_sync_read+0x42>
		LOG_WRN("Ignoring suspicious time data from companion application.");
    181e:	481b      	ldr	r0, [pc, #108]	; (188c <cts_sync_read+0xa0>)
    1820:	f041 0102 	orr.w	r1, r1, #2
	LOG_INF("CTS sync to clock complete.");
    1824:	f021 ff04 	bl	23630 <log_0>
		return BT_GATT_ITER_STOP;
    1828:	2000      	movs	r0, #0
}
    182a:	b007      	add	sp, #28
    182c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("CTS sync to clock started.\n Y%04d D%03d T%2d:%2d:%2d",
    182e:	f041 0403 	orr.w	r4, r1, #3
    1832:	e9cd 2303 	strd	r2, r3, [sp, #12]
    1836:	4816      	ldr	r0, [pc, #88]	; (1890 <cts_sync_read+0xa4>)
    1838:	9705      	str	r7, [sp, #20]
    183a:	4623      	mov	r3, r4
    183c:	2205      	movs	r2, #5
    183e:	a901      	add	r1, sp, #4
    1840:	e9cd 6501 	strd	r6, r5, [sp, #4]
    1844:	f021 ff4a 	bl	236dc <log_n>
	memcpy(&clock_datetime, cts_datetime, sizeof(clock_datetime));
    1848:	4b12      	ldr	r3, [pc, #72]	; (1894 <cts_sync_read+0xa8>)
    184a:	4a13      	ldr	r2, [pc, #76]	; (1898 <cts_sync_read+0xac>)
    184c:	cb03      	ldmia	r3!, {r0, r1}
    184e:	6010      	str	r0, [r2, #0]
    1850:	4618      	mov	r0, r3
    1852:	6051      	str	r1, [r2, #4]
    1854:	f830 3908 	ldrh.w	r3, [r0], #-8
    1858:	8113      	strh	r3, [r2, #8]
	clock_sync_time(cts_datetime);
    185a:	f7ff ff1f 	bl	169c <clock_sync_time>
	LOG_INF("CTS sync to clock complete.");
    185e:	480f      	ldr	r0, [pc, #60]	; (189c <cts_sync_read+0xb0>)
    1860:	4621      	mov	r1, r4
    1862:	e7df      	b.n	1824 <cts_sync_read+0x38>
	memcpy(&m_read_buf.datetime + m_read_buf.offset, data, length);
    1864:	4623      	mov	r3, r4
    1866:	260a      	movs	r6, #10
    1868:	f853 0b04 	ldr.w	r0, [r3], #4
    186c:	462a      	mov	r2, r5
    186e:	fb06 3000 	mla	r0, r6, r0, r3
    1872:	f029 ff9e 	bl	2b7b2 <memcpy>
	m_read_buf.offset += length;
    1876:	6823      	ldr	r3, [r4, #0]
    1878:	442b      	add	r3, r5
    187a:	6023      	str	r3, [r4, #0]
    187c:	2001      	movs	r0, #1
    187e:	e7d4      	b.n	182a <cts_sync_read+0x3e>
    1880:	20001544 	.word	0x20001544
    1884:	0002bfa8 	.word	0x0002bfa8
    1888:	0002bfa8 	.word	0x0002bfa8
    188c:	0002ddd5 	.word	0x0002ddd5
    1890:	0002de0f 	.word	0x0002de0f
    1894:	20001548 	.word	0x20001548
    1898:	200080c4 	.word	0x200080c4
    189c:	0002de44 	.word	0x0002de44

000018a0 <cts_sync_init>:
{
    18a0:	b508      	push	{r3, lr}
    18a2:	4908      	ldr	r1, [pc, #32]	; (18c4 <cts_sync_init+0x24>)
    18a4:	4b08      	ldr	r3, [pc, #32]	; (18c8 <cts_sync_init+0x28>)
	LOG_INF("CTS sync init\n");
    18a6:	4809      	ldr	r0, [pc, #36]	; (18cc <cts_sync_init+0x2c>)
    18a8:	1ac9      	subs	r1, r1, r3
    18aa:	08c9      	lsrs	r1, r1, #3
    18ac:	0189      	lsls	r1, r1, #6
    18ae:	f041 0103 	orr.w	r1, r1, #3
    18b2:	f021 febd 	bl	23630 <log_0>
}
    18b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_timer_init(&m_cts_sync_timer, cts_sync_timer_timeout_handler, NULL);
    18ba:	4905      	ldr	r1, [pc, #20]	; (18d0 <cts_sync_init+0x30>)
    18bc:	4805      	ldr	r0, [pc, #20]	; (18d4 <cts_sync_init+0x34>)
    18be:	2200      	movs	r2, #0
    18c0:	f029 bdbd 	b.w	2b43e <k_timer_init>
    18c4:	0002bfa8 	.word	0x0002bfa8
    18c8:	0002bfa8 	.word	0x0002bfa8
    18cc:	0002de60 	.word	0x0002de60
    18d0:	00001715 	.word	0x00001715
    18d4:	20000d88 	.word	0x20000d88

000018d8 <cts_sync_enable>:
{
    18d8:	b507      	push	{r0, r1, r2, lr}
	if (enable) {
    18da:	b160      	cbz	r0, 18f6 <cts_sync_enable+0x1e>
	z_impl_k_timer_start(timer, duration, period);
    18dc:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    18e0:	2300      	movs	r3, #0
    18e2:	e9cd 2300 	strd	r2, r3, [sp]
    18e6:	4807      	ldr	r0, [pc, #28]	; (1904 <cts_sync_enable+0x2c>)
    18e8:	2200      	movs	r2, #0
    18ea:	2300      	movs	r3, #0
    18ec:	f01e ff38 	bl	20760 <z_impl_k_timer_start>
}
    18f0:	b003      	add	sp, #12
    18f2:	f85d fb04 	ldr.w	pc, [sp], #4
	z_impl_k_timer_stop(timer);
    18f6:	4803      	ldr	r0, [pc, #12]	; (1904 <cts_sync_enable+0x2c>)
    18f8:	b003      	add	sp, #12
    18fa:	f85d eb04 	ldr.w	lr, [sp], #4
    18fe:	f029 bdaa 	b.w	2b456 <z_impl_k_timer_stop>
    1902:	bf00      	nop
    1904:	20000d88 	.word	0x20000d88

00001908 <display_timer_handler>:
    1908:	4909      	ldr	r1, [pc, #36]	; (1930 <display_timer_handler+0x28>)
    190a:	f3bf 8f5b 	dmb	ish
    190e:	e851 3f00 	ldrex	r3, [r1]
    1912:	f043 0201 	orr.w	r2, r3, #1
    1916:	e841 2000 	strex	r0, r2, [r1]
    191a:	2800      	cmp	r0, #0
    191c:	d1f7      	bne.n	190e <display_timer_handler+0x6>
    191e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    1922:	07db      	lsls	r3, r3, #31
    1924:	d403      	bmi.n	192e <display_timer_handler+0x26>
		k_queue_append(&work_q->queue, work);
    1926:	4803      	ldr	r0, [pc, #12]	; (1934 <display_timer_handler+0x2c>)
    1928:	3908      	subs	r1, #8
    192a:	f029 bb35 	b.w	2af98 <k_queue_append>
/*                                                                           */
/*---------------------------------------------------------------------------*/
void display_timer_handler(struct k_timer * timer)
{
	k_work_submit(&display_work);
}
    192e:	4770      	bx	lr
    1930:	200001f8 	.word	0x200001f8
    1934:	20001458 	.word	0x20001458

00001938 <display_time_set_label>:
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*---------------------------------------------------------------------------*/
void display_time_set_label(char *str)
{
	lv_label_set_text(time_label, str);
    1938:	4b02      	ldr	r3, [pc, #8]	; (1944 <display_time_set_label+0xc>)
{
    193a:	4601      	mov	r1, r0
	lv_label_set_text(time_label, str);
    193c:	6818      	ldr	r0, [r3, #0]
    193e:	f029 b98e 	b.w	2ac5e <lv_label_set_text>
    1942:	bf00      	nop
    1944:	20001594 	.word	0x20001594

00001948 <display_date_set_label>:
	// lv_obj_align(time_label, NULL, LV_ALIGN_CENTER, 0, 0);
}

void display_date_set_label(char *str)
{
	lv_label_set_text(date_label, str);
    1948:	4b02      	ldr	r3, [pc, #8]	; (1954 <display_date_set_label+0xc>)
{
    194a:	4601      	mov	r1, r0
	lv_label_set_text(date_label, str);
    194c:	6818      	ldr	r0, [r3, #0]
    194e:	f029 b986 	b.w	2ac5e <lv_label_set_text>
    1952:	bf00      	nop
    1954:	2000156c 	.word	0x2000156c

00001958 <display_set_bluetooth_connected>:
/*                                                                           */
/*---------------------------------------------------------------------------*/
//todo if no touch screen define real button ds_d6

void display_set_bluetooth_connected()
{
    1958:	b513      	push	{r0, r1, r4, lr}
  /* title label */
        title_label = lv_label_create(lv_scr_act(), NULL);
    195a:	f021 f964 	bl	22c26 <lv_scr_act>
    195e:	2100      	movs	r1, #0
    1960:	f01d fba8 	bl	1f0b4 <lv_label_create>
    1964:	4c07      	ldr	r4, [pc, #28]	; (1984 <display_set_bluetooth_connected+0x2c>)
        lv_obj_align(title_label, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    1966:	2300      	movs	r3, #0
    1968:	4619      	mov	r1, r3
    196a:	9300      	str	r3, [sp, #0]
    196c:	2201      	movs	r2, #1
        title_label = lv_label_create(lv_scr_act(), NULL);
    196e:	6020      	str	r0, [r4, #0]
        lv_obj_align(title_label, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    1970:	f024 fd3a 	bl	263e8 <lv_obj_align>
        //lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH"symb");
        //lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH);
        lv_label_set_text(title_label, LV_SYMBOL_WIFI);
    1974:	4904      	ldr	r1, [pc, #16]	; (1988 <display_set_bluetooth_connected+0x30>)
    1976:	6820      	ldr	r0, [r4, #0]

}
    1978:	b002      	add	sp, #8
    197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_label_set_text(title_label, LV_SYMBOL_WIFI);
    197e:	f029 b96e 	b.w	2ac5e <lv_label_set_text>
    1982:	bf00      	nop
    1984:	20001598 	.word	0x20001598
    1988:	0002de6f 	.word	0x0002de6f

0000198c <display_battery>:



void display_battery(enum battery_symbol s)
{
        switch (s) {
    198c:	4a0b      	ldr	r2, [pc, #44]	; (19bc <display_battery+0x30>)
{
    198e:	4603      	mov	r3, r0
    1990:	6810      	ldr	r0, [r2, #0]
    1992:	2b04      	cmp	r3, #4
    1994:	d80f      	bhi.n	19b6 <display_battery+0x2a>
    1996:	e8df f003 	tbb	[pc, r3]
    199a:	0603      	.short	0x0603
    199c:	0a08      	.short	0x0a08
    199e:	0c          	.byte	0x0c
    199f:	00          	.byte	0x00
                case BAT_CHARGE:
                        lv_label_set_text(battery_label, LV_SYMBOL_CHARGE);
    19a0:	4907      	ldr	r1, [pc, #28]	; (19c0 <display_battery+0x34>)
                        break;
                case BAT_1:
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_1);
                        break;
                default:
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_EMPTY);
    19a2:	f029 b95c 	b.w	2ac5e <lv_label_set_text>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_FULL);
    19a6:	4907      	ldr	r1, [pc, #28]	; (19c4 <display_battery+0x38>)
    19a8:	e7fb      	b.n	19a2 <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_3);
    19aa:	4907      	ldr	r1, [pc, #28]	; (19c8 <display_battery+0x3c>)
    19ac:	e7f9      	b.n	19a2 <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_2);
    19ae:	4907      	ldr	r1, [pc, #28]	; (19cc <display_battery+0x40>)
    19b0:	e7f7      	b.n	19a2 <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_1);
    19b2:	4907      	ldr	r1, [pc, #28]	; (19d0 <display_battery+0x44>)
    19b4:	e7f5      	b.n	19a2 <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_EMPTY);
    19b6:	4907      	ldr	r1, [pc, #28]	; (19d4 <display_battery+0x48>)
    19b8:	e7f3      	b.n	19a2 <display_battery+0x16>
    19ba:	bf00      	nop
    19bc:	20001564 	.word	0x20001564
    19c0:	0002de73 	.word	0x0002de73
    19c4:	0002de77 	.word	0x0002de77
    19c8:	0002de7b 	.word	0x0002de7b
    19cc:	0002de7f 	.word	0x0002de7f
    19d0:	0002de83 	.word	0x0002de83
    19d4:	0002de87 	.word	0x0002de87

000019d8 <display_connect_event>:

}
void display_connect_event()
{
       // display_set_bluetooth_connected(); //sets the bluetooth symbol
	lv_scr_load(screens[3].screen); //display the first screen
    19d8:	4b01      	ldr	r3, [pc, #4]	; (19e0 <display_connect_event+0x8>)
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
    19da:	6a58      	ldr	r0, [r3, #36]	; 0x24
    19dc:	f024 bbd5 	b.w	2618a <lv_disp_load_scr>
    19e0:	200002fc 	.word	0x200002fc

000019e4 <display_disconnect_event>:

}
void display_disconnect_event()
{
	lv_scr_load(screens[0].screen); //display the first screen
    19e4:	4b01      	ldr	r3, [pc, #4]	; (19ec <display_disconnect_event+0x8>)
    19e6:	6818      	ldr	r0, [r3, #0]
    19e8:	f024 bbcf 	b.w	2618a <lv_disp_load_scr>
    19ec:	200002fc 	.word	0x200002fc

000019f0 <display_btn_event>:
	static int screen_id = 0;  // init to first screen id
	static int param_id  = 0;  // init to first parameter index

	//LOG_INF("%s: BTN%d", __func__, btn_id);

	switch (btn_id) {
    19f0:	2801      	cmp	r0, #1
{
    19f2:	b510      	push	{r4, lr}
	switch (btn_id) {
    19f4:	d01f      	beq.n	1a36 <display_btn_event+0x46>
    19f6:	2802      	cmp	r0, #2
    19f8:	d13d      	bne.n	1a76 <display_btn_event+0x86>

		case BTN1_LONG:
			screen_id++;
    19fa:	4c1f      	ldr	r4, [pc, #124]	; (1a78 <display_btn_event+0x88>)
    19fc:	6823      	ldr	r3, [r4, #0]
    19fe:	3301      	adds	r3, #1
			if (screen_id >= SCREEN_COUNT)
    1a00:	2b02      	cmp	r3, #2
				screen_id = 0;
    1a02:	bfc8      	it	gt
    1a04:	2300      	movgt	r3, #0
    1a06:	6023      	str	r3, [r4, #0]
			lv_scr_load(screens[screen_id].screen);
    1a08:	6822      	ldr	r2, [r4, #0]
    1a0a:	230c      	movs	r3, #12
    1a0c:	4353      	muls	r3, r2
    1a0e:	4a1b      	ldr	r2, [pc, #108]	; (1a7c <display_btn_event+0x8c>)
    1a10:	58d0      	ldr	r0, [r2, r3]
    1a12:	f024 fbba 	bl	2618a <lv_disp_load_scr>
			param_id = 0;
    1a16:	4b1a      	ldr	r3, [pc, #104]	; (1a80 <display_btn_event+0x90>)
			LOG_INF("BTN1: screen_id(%d)", screen_id);
    1a18:	6821      	ldr	r1, [r4, #0]
    1a1a:	481a      	ldr	r0, [pc, #104]	; (1a84 <display_btn_event+0x94>)
			param_id = 0;
    1a1c:	2200      	movs	r2, #0
    1a1e:	601a      	str	r2, [r3, #0]
    1a20:	4a19      	ldr	r2, [pc, #100]	; (1a88 <display_btn_event+0x98>)
    1a22:	4b1a      	ldr	r3, [pc, #104]	; (1a8c <display_btn_event+0x9c>)
    1a24:	1ad2      	subs	r2, r2, r3
    1a26:	08d2      	lsrs	r2, r2, #3
			LOG_INF("BTN1: screen_id(%d)", screen_id);
    1a28:	0192      	lsls	r2, r2, #6


		default:
			break;
	}
}
    1a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_INF("BTN1: screen_id(%d)", screen_id);
    1a2e:	f042 0203 	orr.w	r2, r2, #3
    1a32:	f021 be0a 	b.w	2364a <log_1>
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a36:	4a10      	ldr	r2, [pc, #64]	; (1a78 <display_btn_event+0x88>)
    1a38:	4c10      	ldr	r4, [pc, #64]	; (1a7c <display_btn_event+0x8c>)
    1a3a:	6811      	ldr	r1, [r2, #0]
			param_id++;
    1a3c:	4b10      	ldr	r3, [pc, #64]	; (1a80 <display_btn_event+0x90>)
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a3e:	220c      	movs	r2, #12
    1a40:	fb02 4201 	mla	r2, r2, r1, r4
			param_id++;
    1a44:	6818      	ldr	r0, [r3, #0]
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a46:	6852      	ldr	r2, [r2, #4]
			param_id++;
    1a48:	3001      	adds	r0, #1
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a4a:	4290      	cmp	r0, r2
			param_id++;
    1a4c:	6018      	str	r0, [r3, #0]
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a4e:	461a      	mov	r2, r3
    1a50:	db0e      	blt.n	1a70 <display_btn_event+0x80>
    1a52:	2300      	movs	r3, #0
    1a54:	6013      	str	r3, [r2, #0]
    1a56:	480d      	ldr	r0, [pc, #52]	; (1a8c <display_btn_event+0x9c>)
    1a58:	4b0b      	ldr	r3, [pc, #44]	; (1a88 <display_btn_event+0x98>)
			LOG_INF("BTN2: screen_id(%d) param_id(%d)", screen_id, param_id);
    1a5a:	6812      	ldr	r2, [r2, #0]
    1a5c:	1a1b      	subs	r3, r3, r0
    1a5e:	08db      	lsrs	r3, r3, #3
    1a60:	019b      	lsls	r3, r3, #6
}
    1a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_INF("BTN2: screen_id(%d) param_id(%d)", screen_id, param_id);
    1a66:	480a      	ldr	r0, [pc, #40]	; (1a90 <display_btn_event+0xa0>)
    1a68:	f043 0303 	orr.w	r3, r3, #3
    1a6c:	f021 be01 	b.w	23672 <log_2>
			if (param_id < 0)                          param_id = 0;
    1a70:	2800      	cmp	r0, #0
    1a72:	dbee      	blt.n	1a52 <display_btn_event+0x62>
    1a74:	e7ef      	b.n	1a56 <display_btn_event+0x66>
}
    1a76:	bd10      	pop	{r4, pc}
    1a78:	20001590 	.word	0x20001590
    1a7c:	200002fc 	.word	0x200002fc
    1a80:	20001574 	.word	0x20001574
    1a84:	0002de8b 	.word	0x0002de8b
    1a88:	0002c098 	.word	0x0002c098
    1a8c:	0002bfa8 	.word	0x0002bfa8
    1a90:	0002de9f 	.word	0x0002de9f

00001a94 <display_screens_init>:

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*---------------------------------------------------------------------------*/
void display_screens_init(void)
{
    1a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	screens[0].screen = lv_obj_create(NULL, NULL);
    1a98:	2100      	movs	r1, #0
    1a9a:	4608      	mov	r0, r1
    1a9c:	f018 fc64 	bl	1a368 <lv_obj_create>
    1aa0:	4daf      	ldr	r5, [pc, #700]	; (1d60 <display_screens_init+0x2cc>)
	lv_obj_align(screen0_label, screens[0].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
	/* the ds_d6 has a real button and no touchscreen, so no need for lvgl-button */
	display_button();

	/* Time label */
	time_label = lv_label_create(lv_scr_act(), NULL);
    1aa2:	4fb0      	ldr	r7, [pc, #704]	; (1d64 <display_screens_init+0x2d0>)
	screens[0].screen = lv_obj_create(NULL, NULL);
    1aa4:	6028      	str	r0, [r5, #0]
	screens[1].screen = lv_obj_create(NULL, NULL);
    1aa6:	2100      	movs	r1, #0
    1aa8:	4608      	mov	r0, r1
    1aaa:	f018 fc5d 	bl	1a368 <lv_obj_create>
	screens[2].screen = lv_obj_create(NULL, NULL);
    1aae:	2100      	movs	r1, #0
	screens[1].screen = lv_obj_create(NULL, NULL);
    1ab0:	60e8      	str	r0, [r5, #12]
	screens[2].screen = lv_obj_create(NULL, NULL);
    1ab2:	4608      	mov	r0, r1
    1ab4:	f018 fc58 	bl	1a368 <lv_obj_create>
	screens[3].screen = lv_obj_create(NULL, NULL);
    1ab8:	2100      	movs	r1, #0
	screens[2].screen = lv_obj_create(NULL, NULL);
    1aba:	61a8      	str	r0, [r5, #24]
	screens[3].screen = lv_obj_create(NULL, NULL);
    1abc:	4608      	mov	r0, r1
    1abe:	f018 fc53 	bl	1a368 <lv_obj_create>
    1ac2:	6268      	str	r0, [r5, #36]	; 0x24
    1ac4:	6828      	ldr	r0, [r5, #0]
	lv_obj_align(screen1_page, screens[1].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);

	// to avoid creating the same button all over again jj
	display_button();

	screen1_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1ac6:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 1da4 <display_screens_init+0x310>
    1aca:	f024 fb5e 	bl	2618a <lv_disp_load_scr>
	lv_obj_t * screen0_label = lv_label_create(lv_scr_act(), NULL);
    1ace:	f021 f8aa 	bl	22c26 <lv_scr_act>
    1ad2:	2100      	movs	r1, #0
    1ad4:	f01d faee 	bl	1f0b4 <lv_label_create>
	lv_obj_align(screen0_label, screens[0].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1ad8:	2400      	movs	r4, #0
	lv_obj_t * screen0_label = lv_label_create(lv_scr_act(), NULL);
    1ada:	4606      	mov	r6, r0
	lv_label_set_text(screen0_label, "Pg1");
    1adc:	49a2      	ldr	r1, [pc, #648]	; (1d68 <display_screens_init+0x2d4>)
    1ade:	f029 f8be 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen0_label, screens[0].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1ae2:	4623      	mov	r3, r4
    1ae4:	6829      	ldr	r1, [r5, #0]
    1ae6:	9400      	str	r4, [sp, #0]
    1ae8:	2203      	movs	r2, #3
    1aea:	4630      	mov	r0, r6
    1aec:	f024 fc7c 	bl	263e8 <lv_obj_align>
	time_label = lv_label_create(lv_scr_act(), NULL);
    1af0:	f021 f899 	bl	22c26 <lv_scr_act>
    1af4:	4621      	mov	r1, r4
    1af6:	f01d fadd 	bl	1f0b4 <lv_label_create>
	lv_obj_align(time_label, NULL, LV_ALIGN_IN_TOP_MID, 0, 0); //jj
    1afa:	4623      	mov	r3, r4
    1afc:	2202      	movs	r2, #2
    1afe:	9400      	str	r4, [sp, #0]
    1b00:	4621      	mov	r1, r4
	time_label = lv_label_create(lv_scr_act(), NULL);
    1b02:	6038      	str	r0, [r7, #0]
	lv_obj_align(time_label, NULL, LV_ALIGN_IN_TOP_MID, 0, 0); //jj
    1b04:	f024 fc70 	bl	263e8 <lv_obj_align>
	lv_label_set_text(time_label, "00:00");
    1b08:	4998      	ldr	r1, [pc, #608]	; (1d6c <display_screens_init+0x2d8>)
    1b0a:	6838      	ldr	r0, [r7, #0]
	date_label = lv_label_create(lv_scr_act(), NULL);
    1b0c:	4e98      	ldr	r6, [pc, #608]	; (1d70 <display_screens_init+0x2dc>)
	lv_label_set_text(time_label, "00:00");
    1b0e:	f029 f8a6 	bl	2ac5e <lv_label_set_text>
	date_label = lv_label_create(lv_scr_act(), NULL);
    1b12:	f021 f888 	bl	22c26 <lv_scr_act>
    1b16:	4621      	mov	r1, r4
    1b18:	f01d facc 	bl	1f0b4 <lv_label_create>
	lv_obj_align(date_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    1b1c:	4623      	mov	r3, r4
    1b1e:	2205      	movs	r2, #5
	date_label = lv_label_create(lv_scr_act(), NULL);
    1b20:	6030      	str	r0, [r6, #0]
	lv_obj_align(date_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    1b22:	4621      	mov	r1, r4
    1b24:	9400      	str	r4, [sp, #0]
    1b26:	f024 fc5f 	bl	263e8 <lv_obj_align>
	lv_label_set_text(date_label, "Mon 10 Jan");
    1b2a:	4992      	ldr	r1, [pc, #584]	; (1d74 <display_screens_init+0x2e0>)
    1b2c:	6830      	ldr	r0, [r6, #0]
	battery_label = lv_label_create(lv_scr_act(), NULL);
    1b2e:	4e92      	ldr	r6, [pc, #584]	; (1d78 <display_screens_init+0x2e4>)
	lv_label_set_text(date_label, "Mon 10 Jan");
    1b30:	f029 f895 	bl	2ac5e <lv_label_set_text>
	battery_label = lv_label_create(lv_scr_act(), NULL);
    1b34:	f021 f877 	bl	22c26 <lv_scr_act>
    1b38:	4621      	mov	r1, r4
    1b3a:	f01d fabb 	bl	1f0b4 <lv_label_create>
    1b3e:	6030      	str	r0, [r6, #0]
	display_battery(BAT_3); //todo just demo value -- need real level
    1b40:	2002      	movs	r0, #2
    1b42:	f7ff ff23 	bl	198c <display_battery>
        lv_obj_align(battery_label, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
    1b46:	9400      	str	r4, [sp, #0]
    1b48:	4623      	mov	r3, r4
    1b4a:	2204      	movs	r2, #4
    1b4c:	4621      	mov	r1, r4
    1b4e:	6830      	ldr	r0, [r6, #0]
    1b50:	f024 fc4a 	bl	263e8 <lv_obj_align>
    1b54:	68e8      	ldr	r0, [r5, #12]
    1b56:	f024 fb18 	bl	2618a <lv_disp_load_scr>
	lv_obj_t * screen1_page = lv_label_create(lv_scr_act(), NULL);
    1b5a:	f021 f864 	bl	22c26 <lv_scr_act>
    1b5e:	4621      	mov	r1, r4
    1b60:	f01d faa8 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen1_page, "Pg2");
    1b64:	4985      	ldr	r1, [pc, #532]	; (1d7c <display_screens_init+0x2e8>)
	lv_obj_t * screen1_page = lv_label_create(lv_scr_act(), NULL);
    1b66:	4606      	mov	r6, r0
	lv_label_set_text(screen1_page, "Pg2");
    1b68:	f029 f879 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen1_page, screens[1].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1b6c:	4623      	mov	r3, r4
    1b6e:	2203      	movs	r2, #3
    1b70:	68e9      	ldr	r1, [r5, #12]
    1b72:	9400      	str	r4, [sp, #0]
    1b74:	4630      	mov	r0, r6
    1b76:	f024 fc37 	bl	263e8 <lv_obj_align>
	screen1_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1b7a:	f021 f854 	bl	22c26 <lv_scr_act>
    1b7e:	4621      	mov	r1, r4
    1b80:	f01d fa98 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen1_label0_obj, "0");
    1b84:	4e7e      	ldr	r6, [pc, #504]	; (1d80 <display_screens_init+0x2ec>)
	screen1_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1b86:	f8c9 0000 	str.w	r0, [r9]
	lv_obj_align(screen1_label0_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1b8a:	f06f 0804 	mvn.w	r8, #4
	lv_label_set_text(screen1_label0_obj, "0");
    1b8e:	4631      	mov	r1, r6
    1b90:	f029 f865 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen1_label0_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1b94:	f8cd 8000 	str.w	r8, [sp]
    1b98:	2305      	movs	r3, #5
    1b9a:	2204      	movs	r2, #4
    1b9c:	68e9      	ldr	r1, [r5, #12]
    1b9e:	f8d9 0000 	ldr.w	r0, [r9]

	screen1_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1ba2:	f8df 9204 	ldr.w	r9, [pc, #516]	; 1da8 <display_screens_init+0x314>
	lv_obj_align(screen1_label0_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1ba6:	f024 fc1f 	bl	263e8 <lv_obj_align>
	screen1_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1baa:	f021 f83c 	bl	22c26 <lv_scr_act>
    1bae:	4621      	mov	r1, r4
    1bb0:	f01d fa80 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen1_label1_obj, "0");
    1bb4:	4631      	mov	r1, r6
	screen1_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1bb6:	f8c9 0000 	str.w	r0, [r9]
	lv_label_set_text(screen1_label1_obj, "0");
    1bba:	f029 f850 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen1_label1_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -15, -5);
    1bbe:	f8cd 8000 	str.w	r8, [sp]
    1bc2:	f06f 030e 	mvn.w	r3, #14
    1bc6:	2206      	movs	r2, #6
    1bc8:	68e9      	ldr	r1, [r5, #12]
    1bca:	f8d9 0000 	ldr.w	r0, [r9]
    1bce:	f024 fc0b 	bl	263e8 <lv_obj_align>
    1bd2:	69a8      	ldr	r0, [r5, #24]
    1bd4:	f024 fad9 	bl	2618a <lv_disp_load_scr>

	/*
	 *  build basic screen2
	 */
	lv_scr_load(screens[2].screen);
	lv_obj_t * screen2_page = lv_label_create(lv_scr_act(), NULL);
    1bd8:	f021 f825 	bl	22c26 <lv_scr_act>
    1bdc:	4621      	mov	r1, r4
    1bde:	f01d fa69 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen2_page, "Pg3");
    1be2:	4968      	ldr	r1, [pc, #416]	; (1d84 <display_screens_init+0x2f0>)
	lv_obj_t * screen2_page = lv_label_create(lv_scr_act(), NULL);
    1be4:	4681      	mov	r9, r0
	lv_label_set_text(screen2_page, "Pg3");
    1be6:	f029 f83a 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_page, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1bea:	4623      	mov	r3, r4
    1bec:	2203      	movs	r2, #3
    1bee:	69a9      	ldr	r1, [r5, #24]
    1bf0:	9400      	str	r4, [sp, #0]
    1bf2:	4648      	mov	r0, r9
    1bf4:	f024 fbf8 	bl	263e8 <lv_obj_align>
	// why define the same button all over again? jj
	display_button();

	//
	lv_obj_t * screen2_label0_tag = lv_label_create(lv_scr_act(), NULL);
    1bf8:	f021 f815 	bl	22c26 <lv_scr_act>
    1bfc:	4621      	mov	r1, r4
    1bfe:	f01d fa59 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen2_label0_tag, "value-0");
	lv_obj_align(screen2_label0_tag, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, -70, 2);
    1c02:	f04f 0902 	mov.w	r9, #2
	lv_obj_t * screen2_label0_tag = lv_label_create(lv_scr_act(), NULL);
    1c06:	4682      	mov	sl, r0
	lv_label_set_text(screen2_label0_tag, "value-0");
    1c08:	495f      	ldr	r1, [pc, #380]	; (1d88 <display_screens_init+0x2f4>)
    1c0a:	f029 f828 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_label0_tag, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, -70, 2);
    1c0e:	f06f 0345 	mvn.w	r3, #69	; 0x45
    1c12:	2203      	movs	r2, #3
    1c14:	69a9      	ldr	r1, [r5, #24]
    1c16:	f8cd 9000 	str.w	r9, [sp]
    1c1a:	4650      	mov	r0, sl
    1c1c:	f024 fbe4 	bl	263e8 <lv_obj_align>

	screen2_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1c20:	f021 f801 	bl	22c26 <lv_scr_act>
    1c24:	4621      	mov	r1, r4
    1c26:	f01d fa45 	bl	1f0b4 <lv_label_create>
    1c2a:	f8df a180 	ldr.w	sl, [pc, #384]	; 1dac <display_screens_init+0x318>
	lv_label_set_text(screen2_label0_obj, "0");
    1c2e:	4631      	mov	r1, r6
	screen2_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1c30:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_text(screen2_label0_obj, "0");
    1c34:	f029 f813 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_label0_obj, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, -45, 2);
    1c38:	f8cd 9000 	str.w	r9, [sp]
    1c3c:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1c40:	2203      	movs	r2, #3
    1c42:	69a9      	ldr	r1, [r5, #24]
    1c44:	f8da 0000 	ldr.w	r0, [sl]
    1c48:	f024 fbce 	bl	263e8 <lv_obj_align>

	//
	lv_obj_t * screen2_label1_tag = lv_label_create(lv_scr_act(), NULL);
    1c4c:	f020 ffeb 	bl	22c26 <lv_scr_act>
    1c50:	4621      	mov	r1, r4
    1c52:	f01d fa2f 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen2_label1_tag, "value-1");
    1c56:	494d      	ldr	r1, [pc, #308]	; (1d8c <display_screens_init+0x2f8>)
	lv_obj_t * screen2_label1_tag = lv_label_create(lv_scr_act(), NULL);
    1c58:	4682      	mov	sl, r0
	lv_label_set_text(screen2_label1_tag, "value-1");
    1c5a:	f029 f800 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_label1_tag, screens[2].screen, LV_ALIGN_IN_RIGHT_MID, -70, 0);
    1c5e:	f06f 0345 	mvn.w	r3, #69	; 0x45
    1c62:	2208      	movs	r2, #8
    1c64:	69a9      	ldr	r1, [r5, #24]
    1c66:	9400      	str	r4, [sp, #0]
    1c68:	4650      	mov	r0, sl
    1c6a:	f024 fbbd 	bl	263e8 <lv_obj_align>

	screen2_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1c6e:	f020 ffda 	bl	22c26 <lv_scr_act>
    1c72:	4621      	mov	r1, r4
    1c74:	f01d fa1e 	bl	1f0b4 <lv_label_create>
    1c78:	f8df a134 	ldr.w	sl, [pc, #308]	; 1db0 <display_screens_init+0x31c>
	lv_label_set_text(screen2_label1_obj, "0");
    1c7c:	4631      	mov	r1, r6
	screen2_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1c7e:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_text(screen2_label1_obj, "0");
    1c82:	f028 ffec 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_label1_obj, screens[2].screen, LV_ALIGN_IN_RIGHT_MID, -45, 0);
    1c86:	9400      	str	r4, [sp, #0]
    1c88:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1c8c:	2208      	movs	r2, #8
    1c8e:	69a9      	ldr	r1, [r5, #24]
    1c90:	f8da 0000 	ldr.w	r0, [sl]
    1c94:	f024 fba8 	bl	263e8 <lv_obj_align>

	//
	lv_obj_t * screen2_value2_tag = lv_label_create(lv_scr_act(), NULL);
    1c98:	f020 ffc5 	bl	22c26 <lv_scr_act>
    1c9c:	4621      	mov	r1, r4
    1c9e:	f01d fa09 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen2_value2_tag, "value-2");
	lv_obj_align(screen2_value2_tag, screens[2].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -70, -2);
    1ca2:	f06f 0b01 	mvn.w	fp, #1
	lv_obj_t * screen2_value2_tag = lv_label_create(lv_scr_act(), NULL);
    1ca6:	4682      	mov	sl, r0
	lv_label_set_text(screen2_value2_tag, "value-2");
    1ca8:	4939      	ldr	r1, [pc, #228]	; (1d90 <display_screens_init+0x2fc>)
    1caa:	f028 ffd8 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_value2_tag, screens[2].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -70, -2);
    1cae:	f06f 0345 	mvn.w	r3, #69	; 0x45
    1cb2:	2206      	movs	r2, #6
    1cb4:	69a9      	ldr	r1, [r5, #24]
    1cb6:	f8cd b000 	str.w	fp, [sp]
    1cba:	4650      	mov	r0, sl
    1cbc:	f024 fb94 	bl	263e8 <lv_obj_align>

	screen2_label2_obj = lv_label_create(lv_scr_act(), NULL);
    1cc0:	f020 ffb1 	bl	22c26 <lv_scr_act>
    1cc4:	4621      	mov	r1, r4
    1cc6:	f01d f9f5 	bl	1f0b4 <lv_label_create>
    1cca:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1db4 <display_screens_init+0x320>
	lv_label_set_text(screen2_label2_obj, "0");
    1cce:	4631      	mov	r1, r6
	screen2_label2_obj = lv_label_create(lv_scr_act(), NULL);
    1cd0:	f8ca 0000 	str.w	r0, [sl]
	lv_label_set_text(screen2_label2_obj, "0");
    1cd4:	f028 ffc3 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen2_label2_obj, screens[2].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -45, -2);
    1cd8:	f8cd b000 	str.w	fp, [sp]
    1cdc:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1ce0:	2206      	movs	r2, #6
    1ce2:	69a9      	ldr	r1, [r5, #24]
    1ce4:	f8da 0000 	ldr.w	r0, [sl]
    1ce8:	f024 fb7e 	bl	263e8 <lv_obj_align>
    1cec:	6a68      	ldr	r0, [r5, #36]	; 0x24
    1cee:	f024 fa4c 	bl	2618a <lv_disp_load_scr>

	/*
	 *  build basic screen3
	 */
	lv_scr_load(screens[3].screen);
	lv_obj_t * screen3_page = lv_label_create(lv_scr_act(), NULL);
    1cf2:	f020 ff98 	bl	22c26 <lv_scr_act>
    1cf6:	4621      	mov	r1, r4
    1cf8:	f01d f9dc 	bl	1f0b4 <lv_label_create>
	lv_label_set_text(screen3_page, "Sc4");
    1cfc:	4925      	ldr	r1, [pc, #148]	; (1d94 <display_screens_init+0x300>)
	lv_obj_t * screen3_page = lv_label_create(lv_scr_act(), NULL);
    1cfe:	4606      	mov	r6, r0
	lv_label_set_text(screen3_page, "Sc4");
    1d00:	f028 ffad 	bl	2ac5e <lv_label_set_text>
	lv_obj_align(screen3_page, screens[3].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1d04:	4623      	mov	r3, r4
    1d06:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1d08:	9400      	str	r4, [sp, #0]
    1d0a:	2203      	movs	r2, #3
    1d0c:	4630      	mov	r0, r6
    1d0e:	f024 fb6b 	bl	263e8 <lv_obj_align>


 /* Time label */
        time_label = lv_label_create(lv_scr_act(), NULL);
    1d12:	f020 ff88 	bl	22c26 <lv_scr_act>
    1d16:	4621      	mov	r1, r4
    1d18:	f01d f9cc 	bl	1f0b4 <lv_label_create>
        lv_obj_align(time_label, NULL, LV_ALIGN_IN_TOP_MID, 0, 0); //jj
    1d1c:	4623      	mov	r3, r4
    1d1e:	464a      	mov	r2, r9
    1d20:	9400      	str	r4, [sp, #0]
    1d22:	4621      	mov	r1, r4
        time_label = lv_label_create(lv_scr_act(), NULL);
    1d24:	6038      	str	r0, [r7, #0]
        lv_obj_align(time_label, NULL, LV_ALIGN_IN_TOP_MID, 0, 0); //jj
    1d26:	f024 fb5f 	bl	263e8 <lv_obj_align>
        lv_label_set_text(time_label, "99:99");
    1d2a:	491b      	ldr	r1, [pc, #108]	; (1d98 <display_screens_init+0x304>)
    1d2c:	6838      	ldr	r0, [r7, #0]
    1d2e:	f028 ff96 	bl	2ac5e <lv_label_set_text>


        screen3_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1d32:	f020 ff78 	bl	22c26 <lv_scr_act>
    1d36:	4621      	mov	r1, r4
    1d38:	f01d f9bc 	bl	1f0b4 <lv_label_create>
    1d3c:	4c17      	ldr	r4, [pc, #92]	; (1d9c <display_screens_init+0x308>)
        lv_label_set_text(screen3_label0_obj, "CTS TIME");
    1d3e:	4918      	ldr	r1, [pc, #96]	; (1da0 <display_screens_init+0x30c>)
        screen3_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1d40:	6020      	str	r0, [r4, #0]
        lv_label_set_text(screen3_label0_obj, "CTS TIME");
    1d42:	f028 ff8c 	bl	2ac5e <lv_label_set_text>
        lv_obj_align(screen3_label0_obj, screens[3].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1d46:	f8cd 8000 	str.w	r8, [sp]
    1d4a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1d4c:	6820      	ldr	r0, [r4, #0]
    1d4e:	2305      	movs	r3, #5
    1d50:	2204      	movs	r2, #4
    1d52:	f024 fb49 	bl	263e8 <lv_obj_align>
	display_button();

	//	lv_obj_t * icon_3 = lv_img_create(lv_scr_act(), NULL);
	//	lv_img_set_src(icon_3, &icon3);
	//	lv_obj_align(icon_3, NULL, LV_ALIGN_CENTER, 0, 0);
}
    1d56:	b003      	add	sp, #12
    1d58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        display_set_bluetooth_connected(); //sets the bluetooth symbol
    1d5c:	f7ff bdfc 	b.w	1958 <display_set_bluetooth_connected>
    1d60:	200002fc 	.word	0x200002fc
    1d64:	20001594 	.word	0x20001594
    1d68:	0002dec0 	.word	0x0002dec0
    1d6c:	0002dec4 	.word	0x0002dec4
    1d70:	2000156c 	.word	0x2000156c
    1d74:	0002deca 	.word	0x0002deca
    1d78:	20001564 	.word	0x20001564
    1d7c:	0002ded5 	.word	0x0002ded5
    1d80:	00030639 	.word	0x00030639
    1d84:	0002ded9 	.word	0x0002ded9
    1d88:	0002dedd 	.word	0x0002dedd
    1d8c:	0002dee5 	.word	0x0002dee5
    1d90:	0002deed 	.word	0x0002deed
    1d94:	0002def5 	.word	0x0002def5
    1d98:	0002def9 	.word	0x0002def9
    1d9c:	2000158c 	.word	0x2000158c
    1da0:	0002deff 	.word	0x0002deff
    1da4:	20001578 	.word	0x20001578
    1da8:	2000157c 	.word	0x2000157c
    1dac:	20001580 	.word	0x20001580
    1db0:	20001584 	.word	0x20001584
    1db4:	20001588 	.word	0x20001588

00001db8 <display_init>:
#endif



int display_init(void)
{
    1db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1dba:	4823      	ldr	r0, [pc, #140]	; (1e48 <display_init+0x90>)
    1dbc:	f01d fada 	bl	1f374 <z_impl_device_get_binding>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    1dc0:	68c5      	ldr	r5, [r0, #12]
    1dc2:	4604      	mov	r4, r0
	return api->pin_configure(port, pin, flags);
    1dc4:	6883      	ldr	r3, [r0, #8]
    1dc6:	f240 6201 	movw	r2, #1537	; 0x601
    1dca:	681b      	ldr	r3, [r3, #0]
    1dcc:	2116      	movs	r1, #22
    1dce:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    1dd0:	b918      	cbnz	r0, 1dda <display_init+0x22>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1dd2:	682b      	ldr	r3, [r5, #0]
    1dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1dd8:	602b      	str	r3, [r5, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1dda:	68e3      	ldr	r3, [r4, #12]
    1ddc:	681b      	ldr	r3, [r3, #0]
    1dde:	025b      	lsls	r3, r3, #9
	return api->port_set_bits_raw(port, pins);
    1de0:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    1de2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
	return api->port_set_bits_raw(port, pins);
    1de6:	bf54      	ite	pl
    1de8:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    1dea:	691b      	ldrmi	r3, [r3, #16]
    1dec:	4620      	mov	r0, r4
    1dee:	4798      	blx	r3
    1df0:	4816      	ldr	r0, [pc, #88]	; (1e4c <display_init+0x94>)
#if defined(CONFIG_BOARD_PINETIME_DEVKIT1)
	backlight_init();
#endif
	display_dev = device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
    1df2:	4c17      	ldr	r4, [pc, #92]	; (1e50 <display_init+0x98>)
    1df4:	f01d fabe 	bl	1f374 <z_impl_device_get_binding>
    1df8:	6020      	str	r0, [r4, #0]

	if (display_dev == NULL) {
    1dfa:	b970      	cbnz	r0, 1e1a <display_init+0x62>
    1dfc:	4b15      	ldr	r3, [pc, #84]	; (1e54 <display_init+0x9c>)
    1dfe:	4a16      	ldr	r2, [pc, #88]	; (1e58 <display_init+0xa0>)
		LOG_ERR("device not found. %s", CONFIG_LVGL_DISPLAY_DEV_NAME);
    1e00:	4816      	ldr	r0, [pc, #88]	; (1e5c <display_init+0xa4>)
    1e02:	4912      	ldr	r1, [pc, #72]	; (1e4c <display_init+0x94>)
    1e04:	1ad2      	subs	r2, r2, r3
    1e06:	08d2      	lsrs	r2, r2, #3
    1e08:	0192      	lsls	r2, r2, #6
    1e0a:	f042 0201 	orr.w	r2, r2, #1
    1e0e:	f021 fc1c 	bl	2364a <log_1>
		return -1;
    1e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	 *  Start task handler timer loop
	 */
	k_timer_start(&display_timer, K_MSEC(TICK_PERIOD), K_MSEC(TICK_PERIOD));

	return 0;
};
    1e16:	b003      	add	sp, #12
    1e18:	bd30      	pop	{r4, r5, pc}
	display_screens_init();
    1e1a:	f7ff fe3b 	bl	1a94 <display_screens_init>
	lv_scr_load(screens[0].screen);
    1e1e:	4b10      	ldr	r3, [pc, #64]	; (1e60 <display_init+0xa8>)
    1e20:	6818      	ldr	r0, [r3, #0]
    1e22:	f024 f9b2 	bl	2618a <lv_disp_load_scr>
	lv_task_handler();//jj
    1e26:	f01b fd99 	bl	1d95c <lv_task_handler>
	display_blanking_off(display_dev);
    1e2a:	6820      	ldr	r0, [r4, #0]
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_off(dev);
    1e2c:	6883      	ldr	r3, [r0, #8]
    1e2e:	685b      	ldr	r3, [r3, #4]
    1e30:	4798      	blx	r3
    1e32:	f44f 72a4 	mov.w	r2, #328	; 0x148
    1e36:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
    1e38:	480a      	ldr	r0, [pc, #40]	; (1e64 <display_init+0xac>)
    1e3a:	e9cd 2300 	strd	r2, r3, [sp]
    1e3e:	f01e fc8f 	bl	20760 <z_impl_k_timer_start>
	return 0;
    1e42:	2000      	movs	r0, #0
    1e44:	e7e7      	b.n	1e16 <display_init+0x5e>
    1e46:	bf00      	nop
    1e48:	0002df08 	.word	0x0002df08
    1e4c:	0002df0f 	.word	0x0002df0f
    1e50:	20001570 	.word	0x20001570
    1e54:	0002bfa8 	.word	0x0002bfa8
    1e58:	0002c098 	.word	0x0002c098
    1e5c:	0002df17 	.word	0x0002df17
    1e60:	200002fc 	.word	0x200002fc
    1e64:	20000b20 	.word	0x20000b20

00001e68 <button_pressed>:

static uint8_t button_press_cnt;
struct k_timer button_timer;
void button_pressed(const struct device *dev, struct gpio_callback *cb,
		uint32_t pins)
{
    1e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1e6a:	4b1f      	ldr	r3, [pc, #124]	; (1ee8 <button_pressed+0x80>)
    1e6c:	4c1f      	ldr	r4, [pc, #124]	; (1eec <button_pressed+0x84>)
    1e6e:	1ae4      	subs	r4, r4, r3
    1e70:	08e4      	lsrs	r4, r4, #3
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    1e72:	f002 f945 	bl	4100 <z_timer_cycle_get_32>
	buttons_id_t btn_id;

	LOG_INF("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    1e76:	01a4      	lsls	r4, r4, #6
    1e78:	f044 0503 	orr.w	r5, r4, #3
    1e7c:	462a      	mov	r2, r5

	if (button_press_cnt == 0U) {
    1e7e:	4d1c      	ldr	r5, [pc, #112]	; (1ef0 <button_pressed+0x88>)
    1e80:	4601      	mov	r1, r0
	LOG_INF("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    1e82:	481c      	ldr	r0, [pc, #112]	; (1ef4 <button_pressed+0x8c>)
    1e84:	f021 fbe1 	bl	2364a <log_1>
	if (button_press_cnt == 0U) {
    1e88:	782b      	ldrb	r3, [r5, #0]
    1e8a:	b94b      	cbnz	r3, 1ea0 <button_pressed+0x38>
    1e8c:	2200      	movs	r2, #0
    1e8e:	2300      	movs	r3, #0
    1e90:	e9cd 2300 	strd	r2, r3, [sp]
    1e94:	4818      	ldr	r0, [pc, #96]	; (1ef8 <button_pressed+0x90>)
    1e96:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e9a:	2300      	movs	r3, #0
    1e9c:	f01e fc60 	bl	20760 <z_impl_k_timer_start>
	return z_impl_k_timer_status_get(timer);
    1ea0:	4815      	ldr	r0, [pc, #84]	; (1ef8 <button_pressed+0x90>)
    1ea2:	f029 fafa 	bl	2b49a <z_impl_k_timer_status_get>
		k_timer_start(&button_timer, K_SECONDS(1), K_NO_WAIT);
		btn_id=BTN1_SHORT;
	}

	if (k_timer_status_get(&button_timer) > 0) {
    1ea6:	b180      	cbz	r0, 1eca <button_pressed+0x62>
		/* timer has expired */
		LOG_INF("SHORT PRESS EVENT %02x\n", button_press_cnt);
    1ea8:	4814      	ldr	r0, [pc, #80]	; (1efc <button_pressed+0x94>)
    1eaa:	7829      	ldrb	r1, [r5, #0]
    1eac:	f044 0203 	orr.w	r2, r4, #3
    1eb0:	f021 fbcb 	bl	2364a <log_1>
		if (button_press_cnt > 2){
    1eb4:	782b      	ldrb	r3, [r5, #0]
    1eb6:	2b02      	cmp	r3, #2
			display_btn_event(BTN1_LONG);
    1eb8:	bf8c      	ite	hi
    1eba:	2002      	movhi	r0, #2
		}
		else
			display_btn_event(BTN1_SHORT);
    1ebc:	2001      	movls	r0, #1
    1ebe:	f7ff fd97 	bl	19f0 <display_btn_event>
		button_press_cnt=0;
    1ec2:	2300      	movs	r3, #0
    1ec4:	702b      	strb	r3, [r5, #0]


	// 	LOG_INF("Button time %d\n", button_time);
	//      sensor_attr_set(dev, SENSOR_CHAN_LIGHT, SENSOR_ATTR_SAMPLING_FREQUENCY,0x22);
	//	button_time_previous = k_cycle_get32();
}
    1ec6:	b003      	add	sp, #12
    1ec8:	bd30      	pop	{r4, r5, pc}
		button_press_cnt++;
    1eca:	7829      	ldrb	r1, [r5, #0]
    1ecc:	3101      	adds	r1, #1
    1ece:	b2c9      	uxtb	r1, r1
		if (button_press_cnt > 2){
    1ed0:	2902      	cmp	r1, #2
		button_press_cnt++;
    1ed2:	7029      	strb	r1, [r5, #0]
		if (button_press_cnt > 2){
    1ed4:	d9f7      	bls.n	1ec6 <button_pressed+0x5e>
			LOG_INF("LONG PRESS EVENT %02x\n", button_press_cnt);
    1ed6:	480a      	ldr	r0, [pc, #40]	; (1f00 <button_pressed+0x98>)
    1ed8:	f044 0203 	orr.w	r2, r4, #3
}
    1edc:	b003      	add	sp, #12
    1ede:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_INF("LONG PRESS EVENT %02x\n", button_press_cnt);
    1ee2:	f021 bbb2 	b.w	2364a <log_1>
    1ee6:	bf00      	nop
    1ee8:	0002bfa8 	.word	0x0002bfa8
    1eec:	0002bfa8 	.word	0x0002bfa8
    1ef0:	2000813c 	.word	0x2000813c
    1ef4:	0002df34 	.word	0x0002df34
    1ef8:	20000dc0 	.word	0x20000dc0
    1efc:	0002df4a 	.word	0x0002df4a
    1f00:	0002df62 	.word	0x0002df62

00001f04 <init_button>:


static struct gpio_callback button_cb_data;

void init_button(void)
{
    1f04:	b510      	push	{r4, lr}
    1f06:	4824      	ldr	r0, [pc, #144]	; (1f98 <init_button+0x94>)
    1f08:	f01d fa34 	bl	1f374 <z_impl_device_get_binding>
	const struct device *button;
	int ret;
	button = device_get_binding(SW0_GPIO_LABEL);
	if (button == NULL) {
    1f0c:	4604      	mov	r4, r0
    1f0e:	b928      	cbnz	r0, 1f1c <init_button+0x18>
	gpio_add_callback(button, &button_cb_data);
	printk("Set up button at %s pin %d\n", SW0_GPIO_LABEL, SW0_GPIO_PIN);



}
    1f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    1f14:	4920      	ldr	r1, [pc, #128]	; (1f98 <init_button+0x94>)
    1f16:	4821      	ldr	r0, [pc, #132]	; (1f9c <init_button+0x98>)
    1f18:	f020 bf75 	b.w	22e06 <printk>
	ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    1f1c:	210d      	movs	r1, #13
    1f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    1f22:	f020 fe9b 	bl	22c5c <gpio_pin_configure>
	if (ret != 0) {
    1f26:	4601      	mov	r1, r0
    1f28:	b130      	cbz	r0, 1f38 <init_button+0x34>
		printk("Error %d: failed to configure %s pin %d\n",
    1f2a:	4a1b      	ldr	r2, [pc, #108]	; (1f98 <init_button+0x94>)
    1f2c:	481c      	ldr	r0, [pc, #112]	; (1fa0 <init_button+0x9c>)
    1f2e:	230d      	movs	r3, #13
}
    1f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1f34:	f020 bf67 	b.w	22e06 <printk>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1f38:	210d      	movs	r1, #13
    1f3a:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    1f3e:	4620      	mov	r0, r4
    1f40:	f020 fe78 	bl	22c34 <z_impl_gpio_pin_interrupt_configure>
	if (ret != 0) {
    1f44:	4601      	mov	r1, r0
    1f46:	b118      	cbz	r0, 1f50 <init_button+0x4c>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1f48:	4a13      	ldr	r2, [pc, #76]	; (1f98 <init_button+0x94>)
    1f4a:	4816      	ldr	r0, [pc, #88]	; (1fa4 <init_button+0xa0>)
    1f4c:	230d      	movs	r3, #13
    1f4e:	e7ef      	b.n	1f30 <init_button+0x2c>
        gpio_pin_configure(button, SW1_GPIO_PIN,SW1_GPIO_FLAGS); //push button out
    1f50:	f44f 7200 	mov.w	r2, #512	; 0x200
    1f54:	210f      	movs	r1, #15
    1f56:	4620      	mov	r0, r4
    1f58:	f020 fe80 	bl	22c5c <gpio_pin_configure>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1f5c:	68e3      	ldr	r3, [r4, #12]
    1f5e:	681b      	ldr	r3, [r3, #0]
    1f60:	041b      	lsls	r3, r3, #16
	return api->port_set_bits_raw(port, pins);
    1f62:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    1f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	return api->port_set_bits_raw(port, pins);
    1f68:	bf54      	ite	pl
    1f6a:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    1f6c:	691b      	ldrmi	r3, [r3, #16]
    1f6e:	4620      	mov	r0, r4
    1f70:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1f72:	490d      	ldr	r1, [pc, #52]	; (1fa8 <init_button+0xa4>)
    1f74:	4b0d      	ldr	r3, [pc, #52]	; (1fac <init_button+0xa8>)
    1f76:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    1f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1f7c:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    1f7e:	68a3      	ldr	r3, [r4, #8]
    1f80:	69db      	ldr	r3, [r3, #28]
    1f82:	b113      	cbz	r3, 1f8a <init_button+0x86>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1f84:	2201      	movs	r2, #1
    1f86:	4620      	mov	r0, r4
    1f88:	4798      	blx	r3
}
    1f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Set up button at %s pin %d\n", SW0_GPIO_LABEL, SW0_GPIO_PIN);
    1f8e:	4902      	ldr	r1, [pc, #8]	; (1f98 <init_button+0x94>)
    1f90:	4807      	ldr	r0, [pc, #28]	; (1fb0 <init_button+0xac>)
    1f92:	220d      	movs	r2, #13
    1f94:	f020 bf37 	b.w	22e06 <printk>
    1f98:	0002df08 	.word	0x0002df08
    1f9c:	0002df79 	.word	0x0002df79
    1fa0:	0002df97 	.word	0x0002df97
    1fa4:	0002dfc0 	.word	0x0002dfc0
    1fa8:	2000159c 	.word	0x2000159c
    1fac:	00001e69 	.word	0x00001e69
    1fb0:	0002dff6 	.word	0x0002dff6

00001fb4 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1fb4:	680b      	ldr	r3, [r1, #0]
    1fb6:	3301      	adds	r3, #1
    1fb8:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1fba:	4b01      	ldr	r3, [pc, #4]	; (1fc0 <char_out+0xc>)
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	4718      	bx	r3
    1fc0:	2000032c 	.word	0x2000032c

00001fc4 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1fc4:	b507      	push	{r0, r1, r2, lr}
    1fc6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1fc8:	2100      	movs	r1, #0
{
    1fca:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1fcc:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1fce:	4803      	ldr	r0, [pc, #12]	; (1fdc <vprintk+0x18>)
    1fd0:	a901      	add	r1, sp, #4
    1fd2:	f000 f965 	bl	22a0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1fd6:	b003      	add	sp, #12
    1fd8:	f85d fb04 	ldr.w	pc, [sp], #4
    1fdc:	00001fb5 	.word	0x00001fb5

00001fe0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1fe0:	b530      	push	{r4, r5, lr}
    1fe2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1fe4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1fe8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1fea:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1fec:	a901      	add	r1, sp, #4
    1fee:	4805      	ldr	r0, [pc, #20]	; (2004 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1ff0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1ff2:	f000 f955 	bl	22a0 <cbvprintf>

	if (ctx.count < ctx.max) {
    1ff6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1ffa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1ffc:	bfb8      	it	lt
    1ffe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    2000:	b005      	add	sp, #20
    2002:	bd30      	pop	{r4, r5, pc}
    2004:	00022de1 	.word	0x00022de1

00002008 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    2008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    200c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    2010:	f019 0808 	ands.w	r8, r9, #8
{
    2014:	4604      	mov	r4, r0
    2016:	4693      	mov	fp, r2
	if (processing) {
    2018:	d00d      	beq.n	2036 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    201a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    201c:	bf0c      	ite	eq
    201e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2022:	f049 0920 	orrne.w	r9, r9, #32
    2026:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    202a:	f38b 8811 	msr	BASEPRI, fp
    202e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2036:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    203a:	2902      	cmp	r1, #2
    203c:	d107      	bne.n	204e <process_event+0x46>
			evt = process_recheck(mgr);
    203e:	4620      	mov	r0, r4
    2040:	f020 fefb 	bl	22e3a <process_recheck>
		if (evt == EVT_NOP) {
    2044:	2800      	cmp	r0, #0
    2046:	d0f0      	beq.n	202a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    2048:	2801      	cmp	r0, #1
    204a:	8b23      	ldrh	r3, [r4, #24]
    204c:	d150      	bne.n	20f0 <process_event+0xe8>
			res = mgr->last_res;
    204e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2050:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2052:	2f00      	cmp	r7, #0
    2054:	da15      	bge.n	2082 <process_event+0x7a>
		*clients = mgr->clients;
    2056:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2058:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    205c:	e9c4 8800 	strd	r8, r8, [r4]
    2060:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2064:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    2066:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2068:	8b21      	ldrh	r1, [r4, #24]
    206a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    206e:	45ca      	cmp	sl, r9
    2070:	d002      	beq.n	2078 <process_event+0x70>
		if (do_monitors
    2072:	68a3      	ldr	r3, [r4, #8]
    2074:	2b00      	cmp	r3, #0
    2076:	d15c      	bne.n	2132 <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    2078:	b90d      	cbnz	r5, 207e <process_event+0x76>
		    || (transit != NULL)) {
    207a:	2e00      	cmp	r6, #0
    207c:	d074      	beq.n	2168 <process_event+0x160>
    207e:	2300      	movs	r3, #0
    2080:	e058      	b.n	2134 <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2082:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    2086:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2088:	2a01      	cmp	r2, #1
    208a:	d820      	bhi.n	20ce <process_event+0xc6>
		*clients = mgr->clients;
    208c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2090:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    2092:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    2094:	b289      	uxth	r1, r1
	list->tail = NULL;
    2096:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    209a:	d10c      	bne.n	20b6 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    209c:	2d00      	cmp	r5, #0
    209e:	462b      	mov	r3, r5
    20a0:	bf38      	it	cc
    20a2:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    20a4:	b12b      	cbz	r3, 20b2 <process_event+0xaa>
				mgr->refs += 1U;
    20a6:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    20a8:	681b      	ldr	r3, [r3, #0]
    20aa:	3201      	adds	r2, #1
    20ac:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    20ae:	2b00      	cmp	r3, #0
    20b0:	d1f8      	bne.n	20a4 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20b2:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    20b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    20b8:	4620      	mov	r0, r4
    20ba:	f020 febe 	bl	22e3a <process_recheck>
    20be:	4606      	mov	r6, r0
    20c0:	2800      	cmp	r0, #0
    20c2:	d0d1      	beq.n	2068 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    20c4:	8b23      	ldrh	r3, [r4, #24]
    20c6:	f043 0320 	orr.w	r3, r3, #32
    20ca:	8323      	strh	r3, [r4, #24]
    20cc:	e7cb      	b.n	2066 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    20ce:	2b04      	cmp	r3, #4
    20d0:	d10c      	bne.n	20ec <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20d2:	f021 0107 	bic.w	r1, r1, #7
    20d6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    20d8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    20da:	4620      	mov	r0, r4
    20dc:	f020 fead 	bl	22e3a <process_recheck>
    20e0:	4605      	mov	r5, r0
    20e2:	2800      	cmp	r0, #0
    20e4:	d0bf      	beq.n	2066 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    20e6:	f041 0120 	orr.w	r1, r1, #32
    20ea:	8321      	strh	r1, [r4, #24]
    20ec:	2500      	movs	r5, #0
    20ee:	e7ba      	b.n	2066 <process_event+0x5e>
		} else if (evt == EVT_START) {
    20f0:	2803      	cmp	r0, #3
    20f2:	d109      	bne.n	2108 <process_event+0x100>
			transit = mgr->transitions->start;
    20f4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20f6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    20fa:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20fc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    2100:	8323      	strh	r3, [r4, #24]
}
    2102:	2500      	movs	r5, #0
		res = 0;
    2104:	462f      	mov	r7, r5
    2106:	e7af      	b.n	2068 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    2108:	2804      	cmp	r0, #4
    210a:	d106      	bne.n	211a <process_event+0x112>
			transit = mgr->transitions->stop;
    210c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    210e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    2112:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2114:	f043 0304 	orr.w	r3, r3, #4
    2118:	e7f2      	b.n	2100 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    211a:	2805      	cmp	r0, #5
    211c:	d106      	bne.n	212c <process_event+0x124>
			transit = mgr->transitions->reset;
    211e:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2120:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    2124:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2126:	f043 0305 	orr.w	r3, r3, #5
    212a:	e7e9      	b.n	2100 <process_event+0xf8>
    212c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    212e:	462e      	mov	r6, r5
    2130:	e7e8      	b.n	2104 <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    2132:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2134:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2138:	8321      	strh	r1, [r4, #24]
    213a:	f38b 8811 	msr	BASEPRI, fp
    213e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2142:	bb03      	cbnz	r3, 2186 <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    2144:	2d00      	cmp	r5, #0
    2146:	d133      	bne.n	21b0 <process_event+0x1a8>
			if (transit != NULL) {
    2148:	b116      	cbz	r6, 2150 <process_event+0x148>
				transit(mgr, transition_complete);
    214a:	4921      	ldr	r1, [pc, #132]	; (21d0 <process_event+0x1c8>)
    214c:	4620      	mov	r0, r4
    214e:	47b0      	blx	r6
	__asm__ volatile(
    2150:	f04f 0320 	mov.w	r3, #32
    2154:	f3ef 8b11 	mrs	fp, BASEPRI
    2158:	f383 8811 	msr	BASEPRI, r3
    215c:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2160:	8b23      	ldrh	r3, [r4, #24]
    2162:	f023 0308 	bic.w	r3, r3, #8
    2166:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2168:	8b23      	ldrh	r3, [r4, #24]
    216a:	06da      	lsls	r2, r3, #27
    216c:	d528      	bpl.n	21c0 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    216e:	f023 0310 	bic.w	r3, r3, #16
    2172:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    2174:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2176:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    217a:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    217e:	2900      	cmp	r1, #0
    2180:	f47f af5b 	bne.w	203a <process_event+0x32>
out:
    2184:	e751      	b.n	202a <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2186:	68a1      	ldr	r1, [r4, #8]
    2188:	2900      	cmp	r1, #0
    218a:	d0db      	beq.n	2144 <process_event+0x13c>
	return node->next;
    218c:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    218e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    2192:	2b00      	cmp	r3, #0
    2194:	bf38      	it	cc
    2196:	2300      	movcc	r3, #0
    2198:	4699      	mov	r9, r3
    219a:	4652      	mov	r2, sl
    219c:	463b      	mov	r3, r7
    219e:	4620      	mov	r0, r4
    21a0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    21a2:	f1b9 0f00 	cmp.w	r9, #0
    21a6:	d0cd      	beq.n	2144 <process_event+0x13c>
    21a8:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    21ac:	4649      	mov	r1, r9
    21ae:	e7ee      	b.n	218e <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    21b0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    21b2:	463b      	mov	r3, r7
    21b4:	4652      	mov	r2, sl
    21b6:	4620      	mov	r0, r4
    21b8:	682d      	ldr	r5, [r5, #0]
    21ba:	f020 fe5a 	bl	22e72 <notify_one>
    21be:	e7c1      	b.n	2144 <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    21c0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    21c4:	bf1e      	ittt	ne
    21c6:	f023 0320 	bicne.w	r3, r3, #32
    21ca:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    21cc:	2102      	movne	r1, #2
    21ce:	e7d2      	b.n	2176 <process_event+0x16e>
    21d0:	00022e9f 	.word	0x00022e9f

000021d4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    21d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    21d6:	4e09      	ldr	r6, [pc, #36]	; (21fc <extract_decimal+0x28>)
    21d8:	6801      	ldr	r1, [r0, #0]
{
    21da:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    21dc:	270a      	movs	r7, #10
	size_t val = 0;
    21de:	2000      	movs	r0, #0
    21e0:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    21e2:	3101      	adds	r1, #1
    21e4:	7823      	ldrb	r3, [r4, #0]
    21e6:	5d9d      	ldrb	r5, [r3, r6]
    21e8:	076d      	lsls	r5, r5, #29
    21ea:	d401      	bmi.n	21f0 <extract_decimal+0x1c>
	}
	*str = sp;
    21ec:	6014      	str	r4, [r2, #0]
	return val;
}
    21ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    21f0:	fb07 3300 	mla	r3, r7, r0, r3
    21f4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    21f8:	e7f2      	b.n	21e0 <extract_decimal+0xc>
    21fa:	bf00      	nop
    21fc:	00039397 	.word	0x00039397

00002200 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    2200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2204:	4614      	mov	r4, r2
    2206:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    2208:	78d3      	ldrb	r3, [r2, #3]
    220a:	4a24      	ldr	r2, [pc, #144]	; (229c <encode_uint+0x9c>)
    220c:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    2210:	2b6f      	cmp	r3, #111	; 0x6f
    2212:	f00a 0203 	and.w	r2, sl, #3
{
    2216:	4606      	mov	r6, r0
    2218:	460f      	mov	r7, r1
    221a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    221c:	d02d      	beq.n	227a <encode_uint+0x7a>
    221e:	d828      	bhi.n	2272 <encode_uint+0x72>
		return 16;
    2220:	2b58      	cmp	r3, #88	; 0x58
    2222:	bf14      	ite	ne
    2224:	250a      	movne	r5, #10
    2226:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    2228:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    222c:	46aa      	mov	sl, r5
    222e:	f04f 0b00 	mov.w	fp, #0
    2232:	4652      	mov	r2, sl
    2234:	465b      	mov	r3, fp
    2236:	4630      	mov	r0, r6
    2238:	4639      	mov	r1, r7
    223a:	f7fd ffa1 	bl	180 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    223e:	2a09      	cmp	r2, #9
    2240:	b2d3      	uxtb	r3, r2
    2242:	d81f      	bhi.n	2284 <encode_uint+0x84>
    2244:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    2246:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2248:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    224a:	bf08      	it	eq
    224c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    224e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    2252:	d301      	bcc.n	2258 <encode_uint+0x58>
    2254:	45c8      	cmp	r8, r9
    2256:	d812      	bhi.n	227e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2258:	7823      	ldrb	r3, [r4, #0]
    225a:	069b      	lsls	r3, r3, #26
    225c:	d505      	bpl.n	226a <encode_uint+0x6a>
		if (radix == 8) {
    225e:	2d08      	cmp	r5, #8
    2260:	d116      	bne.n	2290 <encode_uint+0x90>
			conv->altform_0 = true;
    2262:	78a3      	ldrb	r3, [r4, #2]
    2264:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    2268:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    226a:	4640      	mov	r0, r8
    226c:	b003      	add	sp, #12
    226e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    2272:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    2276:	2b70      	cmp	r3, #112	; 0x70
    2278:	e7d3      	b.n	2222 <encode_uint+0x22>
	switch (specifier) {
    227a:	2508      	movs	r5, #8
    227c:	e7d4      	b.n	2228 <encode_uint+0x28>
		value /= radix;
    227e:	4606      	mov	r6, r0
    2280:	460f      	mov	r7, r1
    2282:	e7d6      	b.n	2232 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    2284:	9a01      	ldr	r2, [sp, #4]
    2286:	2a01      	cmp	r2, #1
    2288:	bf0c      	ite	eq
    228a:	3337      	addeq	r3, #55	; 0x37
    228c:	3357      	addne	r3, #87	; 0x57
    228e:	e7da      	b.n	2246 <encode_uint+0x46>
		} else if (radix == 16) {
    2290:	2d10      	cmp	r5, #16
    2292:	d1ea      	bne.n	226a <encode_uint+0x6a>
			conv->altform_0c = true;
    2294:	78a3      	ldrb	r3, [r4, #2]
    2296:	f043 0310 	orr.w	r3, r3, #16
    229a:	e7e5      	b.n	2268 <encode_uint+0x68>
    229c:	00039397 	.word	0x00039397

000022a0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    22a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a4:	4682      	mov	sl, r0
    22a6:	b093      	sub	sp, #76	; 0x4c
    22a8:	468b      	mov	fp, r1
    22aa:	4691      	mov	r9, r2
    22ac:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    22ae:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    22b0:	f899 0000 	ldrb.w	r0, [r9]
    22b4:	b908      	cbnz	r0, 22ba <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    22b6:	4628      	mov	r0, r5
    22b8:	e33a      	b.n	2930 <cbvprintf+0x690>
		if (*fp != '%') {
    22ba:	f109 0301 	add.w	r3, r9, #1
    22be:	2825      	cmp	r0, #37	; 0x25
    22c0:	9302      	str	r3, [sp, #8]
    22c2:	d006      	beq.n	22d2 <cbvprintf+0x32>
			OUTC('%');
    22c4:	4659      	mov	r1, fp
    22c6:	47d0      	blx	sl
    22c8:	2800      	cmp	r0, #0
    22ca:	f2c0 8331 	blt.w	2930 <cbvprintf+0x690>
    22ce:	3501      	adds	r5, #1
			break;
    22d0:	e1f1      	b.n	26b6 <cbvprintf+0x416>
		} state = {
    22d2:	2218      	movs	r2, #24
    22d4:	2100      	movs	r1, #0
    22d6:	a80c      	add	r0, sp, #48	; 0x30
    22d8:	f029 fa8c 	bl	2b7f4 <memset>
	if (*sp == '%') {
    22dc:	f899 3001 	ldrb.w	r3, [r9, #1]
    22e0:	2b25      	cmp	r3, #37	; 0x25
    22e2:	d059      	beq.n	2398 <cbvprintf+0xf8>
    22e4:	9a02      	ldr	r2, [sp, #8]
    22e6:	4616      	mov	r6, r2
		switch (*sp) {
    22e8:	f812 3b01 	ldrb.w	r3, [r2], #1
    22ec:	2b2b      	cmp	r3, #43	; 0x2b
    22ee:	f000 808b 	beq.w	2408 <cbvprintf+0x168>
    22f2:	d879      	bhi.n	23e8 <cbvprintf+0x148>
    22f4:	2b20      	cmp	r3, #32
    22f6:	f000 808c 	beq.w	2412 <cbvprintf+0x172>
    22fa:	2b23      	cmp	r3, #35	; 0x23
    22fc:	f000 808e 	beq.w	241c <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    2300:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2304:	f003 0244 	and.w	r2, r3, #68	; 0x44
    2308:	2a44      	cmp	r2, #68	; 0x44
    230a:	d103      	bne.n	2314 <cbvprintf+0x74>
		conv->flag_zero = false;
    230c:	f36f 1386 	bfc	r3, #6, #1
    2310:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    2314:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2318:	9605      	str	r6, [sp, #20]
    231a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    231e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    2322:	7833      	ldrb	r3, [r6, #0]
    2324:	2b2a      	cmp	r3, #42	; 0x2a
    2326:	d17e      	bne.n	2426 <cbvprintf+0x186>
		conv->width_star = true;
    2328:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    232c:	f043 0301 	orr.w	r3, r3, #1
    2330:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    2334:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    2336:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    2338:	781a      	ldrb	r2, [r3, #0]
    233a:	2a2e      	cmp	r2, #46	; 0x2e
    233c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2340:	bf0c      	ite	eq
    2342:	2101      	moveq	r1, #1
    2344:	2100      	movne	r1, #0
    2346:	f361 0241 	bfi	r2, r1, #1, #1
    234a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    234e:	d10b      	bne.n	2368 <cbvprintf+0xc8>
	++sp;
    2350:	1c5a      	adds	r2, r3, #1
    2352:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    2354:	785a      	ldrb	r2, [r3, #1]
    2356:	2a2a      	cmp	r2, #42	; 0x2a
    2358:	d17b      	bne.n	2452 <cbvprintf+0x1b2>
		conv->prec_star = true;
    235a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    235e:	f042 0204 	orr.w	r2, r2, #4
    2362:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    2366:	3302      	adds	r3, #2
	switch (*sp) {
    2368:	4619      	mov	r1, r3
    236a:	f811 0b01 	ldrb.w	r0, [r1], #1
    236e:	286c      	cmp	r0, #108	; 0x6c
    2370:	f000 80b6 	beq.w	24e0 <cbvprintf+0x240>
    2374:	d87d      	bhi.n	2472 <cbvprintf+0x1d2>
    2376:	2868      	cmp	r0, #104	; 0x68
    2378:	f000 8084 	beq.w	2484 <cbvprintf+0x1e4>
    237c:	286a      	cmp	r0, #106	; 0x6a
    237e:	f000 80b9 	beq.w	24f4 <cbvprintf+0x254>
    2382:	284c      	cmp	r0, #76	; 0x4c
    2384:	f000 80bd 	beq.w	2502 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    2388:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    238c:	f36f 02c6 	bfc	r2, #3, #4
    2390:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    2394:	4619      	mov	r1, r3
    2396:	e080      	b.n	249a <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    2398:	f109 0202 	add.w	r2, r9, #2
    239c:	9202      	str	r2, [sp, #8]
    239e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    23a2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    23a6:	07d9      	lsls	r1, r3, #31
    23a8:	f140 8149 	bpl.w	263e <cbvprintf+0x39e>
			width = va_arg(ap, int);
    23ac:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    23b0:	f1b8 0f00 	cmp.w	r8, #0
    23b4:	da07      	bge.n	23c6 <cbvprintf+0x126>
				conv->flag_dash = true;
    23b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    23ba:	f042 0204 	orr.w	r2, r2, #4
    23be:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    23c2:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    23c6:	075a      	lsls	r2, r3, #29
    23c8:	f140 8142 	bpl.w	2650 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    23cc:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    23d0:	2f00      	cmp	r7, #0
    23d2:	f280 8141 	bge.w	2658 <cbvprintf+0x3b8>
				conv->prec_present = false;
    23d6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    23da:	f36f 0341 	bfc	r3, #1, #1
    23de:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    23e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    23e6:	e137      	b.n	2658 <cbvprintf+0x3b8>
		switch (*sp) {
    23e8:	2b2d      	cmp	r3, #45	; 0x2d
    23ea:	d006      	beq.n	23fa <cbvprintf+0x15a>
    23ec:	2b30      	cmp	r3, #48	; 0x30
    23ee:	d187      	bne.n	2300 <cbvprintf+0x60>
			conv->flag_zero = true;
    23f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    23f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23f8:	e003      	b.n	2402 <cbvprintf+0x162>
			conv->flag_dash = true;
    23fa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    23fe:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    2402:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    2406:	e76e      	b.n	22e6 <cbvprintf+0x46>
			conv->flag_plus = true;
    2408:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    240c:	f043 0308 	orr.w	r3, r3, #8
    2410:	e7f7      	b.n	2402 <cbvprintf+0x162>
			conv->flag_space = true;
    2412:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2416:	f043 0310 	orr.w	r3, r3, #16
    241a:	e7f2      	b.n	2402 <cbvprintf+0x162>
			conv->flag_hash = true;
    241c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2420:	f043 0320 	orr.w	r3, r3, #32
    2424:	e7ed      	b.n	2402 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    2426:	a805      	add	r0, sp, #20
    2428:	f7ff fed4 	bl	21d4 <extract_decimal>
	if (sp != wp) {
    242c:	9b05      	ldr	r3, [sp, #20]
    242e:	42b3      	cmp	r3, r6
    2430:	d081      	beq.n	2336 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    2432:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    2436:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    2438:	f3c1 0240 	ubfx	r2, r1, #1, #1
    243c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    2440:	0052      	lsls	r2, r2, #1
    2442:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2446:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    244a:	430a      	orrs	r2, r1
    244c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    2450:	e771      	b.n	2336 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    2452:	a805      	add	r0, sp, #20
    2454:	f7ff febe 	bl	21d4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2458:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    245c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    245e:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2462:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    2466:	f360 0341 	bfi	r3, r0, #1, #1
    246a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    246e:	9b05      	ldr	r3, [sp, #20]
    2470:	e77a      	b.n	2368 <cbvprintf+0xc8>
	switch (*sp) {
    2472:	2874      	cmp	r0, #116	; 0x74
    2474:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2478:	d040      	beq.n	24fc <cbvprintf+0x25c>
    247a:	287a      	cmp	r0, #122	; 0x7a
    247c:	d184      	bne.n	2388 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    247e:	4613      	mov	r3, r2
    2480:	2206      	movs	r2, #6
    2482:	e028      	b.n	24d6 <cbvprintf+0x236>
		if (*++sp == 'h') {
    2484:	785a      	ldrb	r2, [r3, #1]
    2486:	2a68      	cmp	r2, #104	; 0x68
    2488:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    248c:	d121      	bne.n	24d2 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    248e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2490:	f361 02c6 	bfi	r2, r1, #3, #4
    2494:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    2498:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    249a:	460b      	mov	r3, r1
    249c:	f813 2b01 	ldrb.w	r2, [r3], #1
    24a0:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    24a2:	2a78      	cmp	r2, #120	; 0x78
    24a4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    24a8:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    24ac:	f200 80bf 	bhi.w	262e <cbvprintf+0x38e>
    24b0:	2a57      	cmp	r2, #87	; 0x57
    24b2:	d833      	bhi.n	251c <cbvprintf+0x27c>
    24b4:	2a41      	cmp	r2, #65	; 0x41
    24b6:	d003      	beq.n	24c0 <cbvprintf+0x220>
    24b8:	3a45      	subs	r2, #69	; 0x45
    24ba:	2a02      	cmp	r2, #2
    24bc:	f200 80b7 	bhi.w	262e <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    24c0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    24c4:	2204      	movs	r2, #4
    24c6:	f362 0302 	bfi	r3, r2, #0, #3
    24ca:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    24ce:	2301      	movs	r3, #1
			break;
    24d0:	e084      	b.n	25dc <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    24d2:	4613      	mov	r3, r2
    24d4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    24d6:	f362 03c6 	bfi	r3, r2, #3, #4
    24da:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    24de:	e7dc      	b.n	249a <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    24e0:	785a      	ldrb	r2, [r3, #1]
    24e2:	2a6c      	cmp	r2, #108	; 0x6c
    24e4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    24e8:	d101      	bne.n	24ee <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    24ea:	2104      	movs	r1, #4
    24ec:	e7d0      	b.n	2490 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    24ee:	4613      	mov	r3, r2
    24f0:	2203      	movs	r2, #3
    24f2:	e7f0      	b.n	24d6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    24f4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    24f8:	2205      	movs	r2, #5
    24fa:	e7ec      	b.n	24d6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    24fc:	4613      	mov	r3, r2
    24fe:	2207      	movs	r2, #7
    2500:	e7e9      	b.n	24d6 <cbvprintf+0x236>
		conv->unsupported = true;
    2502:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    2506:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    250a:	f023 0302 	bic.w	r3, r3, #2
    250e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2512:	f043 0302 	orr.w	r3, r3, #2
    2516:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    251a:	e7be      	b.n	249a <cbvprintf+0x1fa>
    251c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2520:	2920      	cmp	r1, #32
    2522:	f200 8084 	bhi.w	262e <cbvprintf+0x38e>
    2526:	a001      	add	r0, pc, #4	; (adr r0, 252c <cbvprintf+0x28c>)
    2528:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    252c:	000025f1 	.word	0x000025f1
    2530:	0000262f 	.word	0x0000262f
    2534:	0000262f 	.word	0x0000262f
    2538:	0000262f 	.word	0x0000262f
    253c:	0000262f 	.word	0x0000262f
    2540:	0000262f 	.word	0x0000262f
    2544:	0000262f 	.word	0x0000262f
    2548:	0000262f 	.word	0x0000262f
    254c:	0000262f 	.word	0x0000262f
    2550:	000024c1 	.word	0x000024c1
    2554:	0000262f 	.word	0x0000262f
    2558:	000025f1 	.word	0x000025f1
    255c:	000025b1 	.word	0x000025b1
    2560:	000024c1 	.word	0x000024c1
    2564:	000024c1 	.word	0x000024c1
    2568:	000024c1 	.word	0x000024c1
    256c:	0000262f 	.word	0x0000262f
    2570:	000025b1 	.word	0x000025b1
    2574:	0000262f 	.word	0x0000262f
    2578:	0000262f 	.word	0x0000262f
    257c:	0000262f 	.word	0x0000262f
    2580:	0000262f 	.word	0x0000262f
    2584:	000025f9 	.word	0x000025f9
    2588:	000025f1 	.word	0x000025f1
    258c:	00002615 	.word	0x00002615
    2590:	0000262f 	.word	0x0000262f
    2594:	0000262f 	.word	0x0000262f
    2598:	00002615 	.word	0x00002615
    259c:	0000262f 	.word	0x0000262f
    25a0:	000025f1 	.word	0x000025f1
    25a4:	0000262f 	.word	0x0000262f
    25a8:	0000262f 	.word	0x0000262f
    25ac:	000025f1 	.word	0x000025f1
		conv->specifier_cat = SPECIFIER_SINT;
    25b0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    25b4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    25b6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    25ba:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    25be:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    25c0:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    25c4:	bf02      	ittt	eq
    25c6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    25ca:	f041 0101 	orreq.w	r1, r1, #1
    25ce:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    25d2:	2a63      	cmp	r2, #99	; 0x63
    25d4:	d131      	bne.n	263a <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    25d6:	3b00      	subs	r3, #0
    25d8:	bf18      	it	ne
    25da:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    25dc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    25e0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    25e4:	430b      	orrs	r3, r1
    25e6:	f363 0241 	bfi	r2, r3, #1, #1
    25ea:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    25ee:	e6d8      	b.n	23a2 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    25f0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    25f4:	2002      	movs	r0, #2
    25f6:	e7de      	b.n	25b6 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    25f8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    25fc:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2600:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2604:	2103      	movs	r1, #3
    2606:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    260a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    260c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    2610:	4143      	adcs	r3, r0
    2612:	e7e3      	b.n	25dc <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    2614:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    2618:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    261a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    261e:	f361 0202 	bfi	r2, r1, #0, #3
    2622:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    2626:	bf14      	ite	ne
    2628:	2301      	movne	r3, #1
    262a:	2300      	moveq	r3, #0
    262c:	e7d6      	b.n	25dc <cbvprintf+0x33c>
		conv->invalid = true;
    262e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2632:	f043 0301 	orr.w	r3, r3, #1
    2636:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    263a:	2300      	movs	r3, #0
    263c:	e7ce      	b.n	25dc <cbvprintf+0x33c>
		} else if (conv->width_present) {
    263e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    2642:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2644:	bfb4      	ite	lt
    2646:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    264a:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    264e:	e6ba      	b.n	23c6 <cbvprintf+0x126>
		} else if (conv->prec_present) {
    2650:	079f      	lsls	r7, r3, #30
    2652:	f57f aec6 	bpl.w	23e2 <cbvprintf+0x142>
			precision = conv->prec_value;
    2656:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    2658:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    265c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    265e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    2662:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    2666:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    266a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    266c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2670:	d137      	bne.n	26e2 <cbvprintf+0x442>
			switch (length_mod) {
    2672:	1ecb      	subs	r3, r1, #3
    2674:	2b04      	cmp	r3, #4
    2676:	d821      	bhi.n	26bc <cbvprintf+0x41c>
    2678:	e8df f003 	tbb	[pc, r3]
    267c:	20070703 	.word	0x20070703
    2680:	20          	.byte	0x20
    2681:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    2682:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    2686:	17d3      	asrs	r3, r2, #31
    2688:	e004      	b.n	2694 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    268a:	3407      	adds	r4, #7
    268c:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    2690:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    2694:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    2698:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    269c:	f013 0603 	ands.w	r6, r3, #3
    26a0:	d055      	beq.n	274e <cbvprintf+0x4ae>
			OUTS(sp, fp);
    26a2:	9b02      	ldr	r3, [sp, #8]
    26a4:	464a      	mov	r2, r9
    26a6:	4659      	mov	r1, fp
    26a8:	4650      	mov	r0, sl
    26aa:	f020 ff87 	bl	235bc <outs>
    26ae:	2800      	cmp	r0, #0
    26b0:	f2c0 813e 	blt.w	2930 <cbvprintf+0x690>
    26b4:	4405      	add	r5, r0
			OUTS(bps, bpe);
    26b6:	f8dd 9008 	ldr.w	r9, [sp, #8]
    26ba:	e5f9      	b.n	22b0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    26bc:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    26c0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    26c2:	ea4f 73e2 	mov.w	r3, r2, asr #31
    26c6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    26ca:	d105      	bne.n	26d8 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    26cc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    26d0:	930c      	str	r3, [sp, #48]	; 0x30
    26d2:	2300      	movs	r3, #0
    26d4:	930d      	str	r3, [sp, #52]	; 0x34
    26d6:	e7df      	b.n	2698 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    26d8:	2902      	cmp	r1, #2
    26da:	d1dd      	bne.n	2698 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    26dc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    26e0:	e7d1      	b.n	2686 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    26e2:	2b02      	cmp	r3, #2
    26e4:	d123      	bne.n	272e <cbvprintf+0x48e>
			switch (length_mod) {
    26e6:	1ecb      	subs	r3, r1, #3
    26e8:	2b04      	cmp	r3, #4
    26ea:	d813      	bhi.n	2714 <cbvprintf+0x474>
    26ec:	e8df f003 	tbb	[pc, r3]
    26f0:	120a0a03 	.word	0x120a0a03
    26f4:	12          	.byte	0x12
    26f5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    26f6:	6822      	ldr	r2, [r4, #0]
    26f8:	920c      	str	r2, [sp, #48]	; 0x30
    26fa:	2300      	movs	r3, #0
    26fc:	1d20      	adds	r0, r4, #4
    26fe:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    2700:	4604      	mov	r4, r0
    2702:	e7c9      	b.n	2698 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    2704:	3407      	adds	r4, #7
    2706:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    270a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    270e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    2712:	e7f5      	b.n	2700 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    2714:	f854 3b04 	ldr.w	r3, [r4], #4
    2718:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    271a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    271c:	f04f 0300 	mov.w	r3, #0
    2720:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    2722:	d0d3      	beq.n	26cc <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    2724:	2902      	cmp	r1, #2
    2726:	d1b7      	bne.n	2698 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    2728:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    272c:	e7d0      	b.n	26d0 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    272e:	2b04      	cmp	r3, #4
    2730:	d107      	bne.n	2742 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    2732:	3407      	adds	r4, #7
    2734:	f024 0407 	bic.w	r4, r4, #7
    2738:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    273c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    2740:	e7aa      	b.n	2698 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2742:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    2744:	bf04      	itt	eq
    2746:	f854 3b04 	ldreq.w	r3, [r4], #4
    274a:	930c      	streq	r3, [sp, #48]	; 0x30
    274c:	e7a4      	b.n	2698 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    274e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2752:	2878      	cmp	r0, #120	; 0x78
    2754:	d8af      	bhi.n	26b6 <cbvprintf+0x416>
    2756:	2862      	cmp	r0, #98	; 0x62
    2758:	d820      	bhi.n	279c <cbvprintf+0x4fc>
    275a:	2825      	cmp	r0, #37	; 0x25
    275c:	f43f adb2 	beq.w	22c4 <cbvprintf+0x24>
    2760:	2858      	cmp	r0, #88	; 0x58
    2762:	d1a8      	bne.n	26b6 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2764:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2768:	9300      	str	r3, [sp, #0]
    276a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    276e:	ab06      	add	r3, sp, #24
    2770:	aa0e      	add	r2, sp, #56	; 0x38
    2772:	f7ff fd45 	bl	2200 <encode_uint>
    2776:	4681      	mov	r9, r0
			if (precision >= 0) {
    2778:	2f00      	cmp	r7, #0
    277a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    277e:	db0b      	blt.n	2798 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    2780:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    2784:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    2788:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    278c:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    278e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    2792:	d901      	bls.n	2798 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    2794:	1aff      	subs	r7, r7, r3
    2796:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    2798:	4607      	mov	r7, r0
    279a:	e03c      	b.n	2816 <cbvprintf+0x576>
    279c:	3863      	subs	r0, #99	; 0x63
    279e:	2815      	cmp	r0, #21
    27a0:	d889      	bhi.n	26b6 <cbvprintf+0x416>
    27a2:	a201      	add	r2, pc, #4	; (adr r2, 27a8 <cbvprintf+0x508>)
    27a4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    27a8:	00002827 	.word	0x00002827
    27ac:	00002889 	.word	0x00002889
    27b0:	000026b7 	.word	0x000026b7
    27b4:	000026b7 	.word	0x000026b7
    27b8:	000026b7 	.word	0x000026b7
    27bc:	000026b7 	.word	0x000026b7
    27c0:	00002889 	.word	0x00002889
    27c4:	000026b7 	.word	0x000026b7
    27c8:	000026b7 	.word	0x000026b7
    27cc:	000026b7 	.word	0x000026b7
    27d0:	000026b7 	.word	0x000026b7
    27d4:	000028e7 	.word	0x000028e7
    27d8:	000028b5 	.word	0x000028b5
    27dc:	000028b9 	.word	0x000028b9
    27e0:	000026b7 	.word	0x000026b7
    27e4:	000026b7 	.word	0x000026b7
    27e8:	00002801 	.word	0x00002801
    27ec:	000026b7 	.word	0x000026b7
    27f0:	000028b5 	.word	0x000028b5
    27f4:	000026b7 	.word	0x000026b7
    27f8:	000026b7 	.word	0x000026b7
    27fc:	000028b5 	.word	0x000028b5
			if (precision >= 0) {
    2800:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    2802:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    2806:	db0a      	blt.n	281e <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    2808:	4639      	mov	r1, r7
    280a:	4648      	mov	r0, r9
    280c:	f029 f83c 	bl	2b888 <strnlen>
			bpe = bps + len;
    2810:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    2814:	2600      	movs	r6, #0
		if (bps == NULL) {
    2816:	f1b9 0f00 	cmp.w	r9, #0
    281a:	d10c      	bne.n	2836 <cbvprintf+0x596>
    281c:	e74b      	b.n	26b6 <cbvprintf+0x416>
				len = strlen(bps);
    281e:	4648      	mov	r0, r9
    2820:	f7fd fe34 	bl	48c <strlen>
    2824:	e7f4      	b.n	2810 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2828:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    282c:	2600      	movs	r6, #0
			bpe = buf + 1;
    282e:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    2832:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    2836:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    283a:	b106      	cbz	r6, 283e <cbvprintf+0x59e>
			nj_len += 1U;
    283c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    283e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    2842:	06d0      	lsls	r0, r2, #27
    2844:	d569      	bpl.n	291a <cbvprintf+0x67a>
			nj_len += 2U;
    2846:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    2848:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    284a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    284c:	bf48      	it	mi
    284e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    2850:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2852:	bf48      	it	mi
    2854:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2856:	f1b8 0f00 	cmp.w	r8, #0
    285a:	dd76      	ble.n	294a <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    285c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    2860:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    2864:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2868:	9303      	str	r3, [sp, #12]
    286a:	0753      	lsls	r3, r2, #29
    286c:	d46d      	bmi.n	294a <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    286e:	0650      	lsls	r0, r2, #25
    2870:	d561      	bpl.n	2936 <cbvprintf+0x696>
					if (sign != 0) {
    2872:	b13e      	cbz	r6, 2884 <cbvprintf+0x5e4>
						OUTC(sign);
    2874:	4659      	mov	r1, fp
    2876:	4630      	mov	r0, r6
    2878:	47d0      	blx	sl
    287a:	2800      	cmp	r0, #0
    287c:	db58      	blt.n	2930 <cbvprintf+0x690>
						sign = 0;
    287e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    2880:	3501      	adds	r5, #1
						sign = 0;
    2882:	461e      	mov	r6, r3
					pad = '0';
    2884:	2330      	movs	r3, #48	; 0x30
    2886:	e057      	b.n	2938 <cbvprintf+0x698>
			if (conv->flag_plus) {
    2888:	071e      	lsls	r6, r3, #28
    288a:	d411      	bmi.n	28b0 <cbvprintf+0x610>
				sign = ' ';
    288c:	f013 0610 	ands.w	r6, r3, #16
    2890:	bf18      	it	ne
    2892:	2620      	movne	r6, #32
			sint = value->sint;
    2894:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    2898:	2a00      	cmp	r2, #0
    289a:	f173 0100 	sbcs.w	r1, r3, #0
    289e:	f6bf af61 	bge.w	2764 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    28a2:	4252      	negs	r2, r2
    28a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    28a8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    28ac:	262d      	movs	r6, #45	; 0x2d
    28ae:	e759      	b.n	2764 <cbvprintf+0x4c4>
				sign = '+';
    28b0:	262b      	movs	r6, #43	; 0x2b
    28b2:	e7ef      	b.n	2894 <cbvprintf+0x5f4>
		switch (conv->specifier) {
    28b4:	2600      	movs	r6, #0
    28b6:	e755      	b.n	2764 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    28b8:	980c      	ldr	r0, [sp, #48]	; 0x30
    28ba:	b348      	cbz	r0, 2910 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    28bc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    28c0:	9300      	str	r3, [sp, #0]
    28c2:	aa0e      	add	r2, sp, #56	; 0x38
    28c4:	ab06      	add	r3, sp, #24
    28c6:	2100      	movs	r1, #0
    28c8:	f7ff fc9a 	bl	2200 <encode_uint>
				conv->altform_0c = true;
    28cc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    28d0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    28d4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    28d8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    28dc:	4681      	mov	r9, r0
				conv->altform_0c = true;
    28de:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    28e2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    28e4:	e748      	b.n	2778 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    28e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    28e8:	2907      	cmp	r1, #7
    28ea:	f63f aee4 	bhi.w	26b6 <cbvprintf+0x416>
    28ee:	e8df f001 	tbb	[pc, r1]
    28f2:	040d      	.short	0x040d
    28f4:	08080d06 	.word	0x08080d06
    28f8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    28fa:	701d      	strb	r5, [r3, #0]
		break;
    28fc:	e6db      	b.n	26b6 <cbvprintf+0x416>
		*(short *)dp = (short)count;
    28fe:	801d      	strh	r5, [r3, #0]
		break;
    2900:	e6d9      	b.n	26b6 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    2902:	4628      	mov	r0, r5
    2904:	17e9      	asrs	r1, r5, #31
    2906:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    290a:	e6d4      	b.n	26b6 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    290c:	601d      	str	r5, [r3, #0]
		break;
    290e:	e6d2      	b.n	26b6 <cbvprintf+0x416>
			bpe = bps + 5;
    2910:	4f2e      	ldr	r7, [pc, #184]	; (29cc <cbvprintf+0x72c>)
    2912:	4606      	mov	r6, r0
			bps = "(nil)";
    2914:	f1a7 0905 	sub.w	r9, r7, #5
    2918:	e78d      	b.n	2836 <cbvprintf+0x596>
		} else if (conv->altform_0) {
    291a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    291c:	bf48      	it	mi
    291e:	3301      	addmi	r3, #1
    2920:	e792      	b.n	2848 <cbvprintf+0x5a8>
					OUTC(pad);
    2922:	4618      	mov	r0, r3
    2924:	4659      	mov	r1, fp
    2926:	9303      	str	r3, [sp, #12]
    2928:	47d0      	blx	sl
    292a:	2800      	cmp	r0, #0
    292c:	9b03      	ldr	r3, [sp, #12]
    292e:	da04      	bge.n	293a <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    2930:	b013      	add	sp, #76	; 0x4c
    2932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2936:	2320      	movs	r3, #32
    2938:	4445      	add	r5, r8
    293a:	4642      	mov	r2, r8
				while (width-- > 0) {
    293c:	2a00      	cmp	r2, #0
    293e:	eba5 0108 	sub.w	r1, r5, r8
    2942:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2946:	dcec      	bgt.n	2922 <cbvprintf+0x682>
    2948:	460d      	mov	r5, r1
		if (sign != 0) {
    294a:	b12e      	cbz	r6, 2958 <cbvprintf+0x6b8>
			OUTC(sign);
    294c:	4659      	mov	r1, fp
    294e:	4630      	mov	r0, r6
    2950:	47d0      	blx	sl
    2952:	2800      	cmp	r0, #0
    2954:	dbec      	blt.n	2930 <cbvprintf+0x690>
    2956:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2958:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    295c:	06d9      	lsls	r1, r3, #27
    295e:	d401      	bmi.n	2964 <cbvprintf+0x6c4>
    2960:	071a      	lsls	r2, r3, #28
    2962:	d505      	bpl.n	2970 <cbvprintf+0x6d0>
				OUTC('0');
    2964:	4659      	mov	r1, fp
    2966:	2030      	movs	r0, #48	; 0x30
    2968:	47d0      	blx	sl
    296a:	2800      	cmp	r0, #0
    296c:	dbe0      	blt.n	2930 <cbvprintf+0x690>
    296e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2970:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2974:	06db      	lsls	r3, r3, #27
    2976:	d506      	bpl.n	2986 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    2978:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    297c:	4659      	mov	r1, fp
    297e:	47d0      	blx	sl
    2980:	2800      	cmp	r0, #0
    2982:	dbd5      	blt.n	2930 <cbvprintf+0x690>
    2984:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2986:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    2988:	442e      	add	r6, r5
    298a:	1b73      	subs	r3, r6, r5
    298c:	2b00      	cmp	r3, #0
    298e:	dc15      	bgt.n	29bc <cbvprintf+0x71c>
			OUTS(bps, bpe);
    2990:	463b      	mov	r3, r7
    2992:	464a      	mov	r2, r9
    2994:	4659      	mov	r1, fp
    2996:	4650      	mov	r0, sl
    2998:	f020 fe10 	bl	235bc <outs>
    299c:	2800      	cmp	r0, #0
    299e:	dbc7      	blt.n	2930 <cbvprintf+0x690>
    29a0:	4405      	add	r5, r0
		while (width > 0) {
    29a2:	44a8      	add	r8, r5
    29a4:	eba8 0305 	sub.w	r3, r8, r5
    29a8:	2b00      	cmp	r3, #0
    29aa:	f77f ae84 	ble.w	26b6 <cbvprintf+0x416>
			OUTC(' ');
    29ae:	4659      	mov	r1, fp
    29b0:	2020      	movs	r0, #32
    29b2:	47d0      	blx	sl
    29b4:	2800      	cmp	r0, #0
    29b6:	dbbb      	blt.n	2930 <cbvprintf+0x690>
    29b8:	3501      	adds	r5, #1
			--width;
    29ba:	e7f3      	b.n	29a4 <cbvprintf+0x704>
				OUTC('0');
    29bc:	4659      	mov	r1, fp
    29be:	2030      	movs	r0, #48	; 0x30
    29c0:	47d0      	blx	sl
    29c2:	2800      	cmp	r0, #0
    29c4:	dbb4      	blt.n	2930 <cbvprintf+0x690>
    29c6:	3501      	adds	r5, #1
    29c8:	e7df      	b.n	298a <cbvprintf+0x6ea>
    29ca:	bf00      	nop
    29cc:	0002e01b 	.word	0x0002e01b

000029d0 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    29d0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    29d2:	4910      	ldr	r1, [pc, #64]	; (2a14 <enable_logger+0x44>)
    29d4:	4810      	ldr	r0, [pc, #64]	; (2a18 <enable_logger+0x48>)
{
    29d6:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    29d8:	2200      	movs	r2, #0
    29da:	f028 fd30 	bl	2b43e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    29de:	4d0f      	ldr	r5, [pc, #60]	; (2a1c <enable_logger+0x4c>)
    29e0:	490f      	ldr	r1, [pc, #60]	; (2a20 <enable_logger+0x50>)
    29e2:	2200      	movs	r2, #0
    29e4:	2300      	movs	r3, #0
    29e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    29ea:	2400      	movs	r4, #0
    29ec:	230e      	movs	r3, #14
    29ee:	e9cd 3403 	strd	r3, r4, [sp, #12]
    29f2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    29f6:	4b0b      	ldr	r3, [pc, #44]	; (2a24 <enable_logger+0x54>)
    29f8:	9400      	str	r4, [sp, #0]
    29fa:	f44f 7240 	mov.w	r2, #768	; 0x300
    29fe:	4628      	mov	r0, r5
    2a00:	f01d fc04 	bl	2020c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    2a04:	4908      	ldr	r1, [pc, #32]	; (2a28 <enable_logger+0x58>)
    2a06:	4628      	mov	r0, r5
    2a08:	f028 fc2c 	bl	2b264 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2a0c:	4620      	mov	r0, r4
    2a0e:	b009      	add	sp, #36	; 0x24
    2a10:	bd30      	pop	{r4, r5, pc}
    2a12:	bf00      	nop
    2a14:	00002a2d 	.word	0x00002a2d
    2a18:	20000df8 	.word	0x20000df8
    2a1c:	20000e30 	.word	0x20000e30
    2a20:	20008778 	.word	0x20008778
    2a24:	00002e91 	.word	0x00002e91
    2a28:	0002e01c 	.word	0x0002e01c

00002a2c <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2a2c:	4801      	ldr	r0, [pc, #4]	; (2a34 <log_process_thread_timer_expiry_fn+0x8>)
    2a2e:	f01d bb55 	b.w	200dc <z_impl_k_sem_give>
    2a32:	bf00      	nop
    2a34:	20000c00 	.word	0x20000c00

00002a38 <z_log_get_s_mask>:
{
    2a38:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a3a:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    2a3c:	4e0f      	ldr	r6, [pc, #60]	; (2a7c <z_log_get_s_mask+0x44>)
	uint32_t mask = 0;
    2a3e:	2000      	movs	r0, #0
	uint32_t arg = 0;
    2a40:	4603      	mov	r3, r0
	bool arm = false;
    2a42:	4602      	mov	r2, r0
				mask |= BIT(arg);
    2a44:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    2a46:	f815 4b01 	ldrb.w	r4, [r5], #1
    2a4a:	b10c      	cbz	r4, 2a50 <z_log_get_s_mask+0x18>
    2a4c:	428b      	cmp	r3, r1
    2a4e:	d300      	bcc.n	2a52 <z_log_get_s_mask+0x1a>
}
    2a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    2a52:	2c25      	cmp	r4, #37	; 0x25
    2a54:	d102      	bne.n	2a5c <z_log_get_s_mask+0x24>
			arm = !arm;
    2a56:	f082 0201 	eor.w	r2, r2, #1
    2a5a:	e7f4      	b.n	2a46 <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    2a5c:	2a00      	cmp	r2, #0
    2a5e:	d0f2      	beq.n	2a46 <z_log_get_s_mask+0xe>
    2a60:	f814 c006 	ldrb.w	ip, [r4, r6]
    2a64:	f01c 0f03 	tst.w	ip, #3
    2a68:	d0ed      	beq.n	2a46 <z_log_get_s_mask+0xe>
			if (curr == 's') {
    2a6a:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    2a6c:	bf04      	itt	eq
    2a6e:	fa07 f203 	lsleq.w	r2, r7, r3
    2a72:	4310      	orreq	r0, r2
			arg++;
    2a74:	3301      	adds	r3, #1
			arm = false;
    2a76:	2200      	movs	r2, #0
    2a78:	e7e5      	b.n	2a46 <z_log_get_s_mask+0xe>
    2a7a:	bf00      	nop
    2a7c:	00039397 	.word	0x00039397

00002a80 <log_core_init>:
{
    2a80:	b508      	push	{r3, lr}
		log_msg_pool_init();
    2a82:	f000 fa67 	bl	2f54 <log_msg_pool_init>
		log_list_init(&list);
    2a86:	4809      	ldr	r0, [pc, #36]	; (2aac <log_core_init+0x2c>)
    2a88:	f020 fdaf 	bl	235ea <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2a8c:	2304      	movs	r3, #4
    2a8e:	2228      	movs	r2, #40	; 0x28
    2a90:	4907      	ldr	r1, [pc, #28]	; (2ab0 <log_core_init+0x30>)
    2a92:	4808      	ldr	r0, [pc, #32]	; (2ab4 <log_core_init+0x34>)
    2a94:	f028 f9e8 	bl	2ae68 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    2a98:	4b07      	ldr	r3, [pc, #28]	; (2ab8 <log_core_init+0x38>)
    2a9a:	4a08      	ldr	r2, [pc, #32]	; (2abc <log_core_init+0x3c>)
    2a9c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2a9e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    2aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    2aa6:	f000 bc9f 	b.w	33e8 <log_output_timestamp_freq_set>
    2aaa:	bf00      	nop
    2aac:	200015b4 	.word	0x200015b4
    2ab0:	2000adc0 	.word	0x2000adc0
    2ab4:	200015bc 	.word	0x200015bc
    2ab8:	20000330 	.word	0x20000330
    2abc:	00023629 	.word	0x00023629

00002ac0 <dropped_notify>:
{
    2ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2ac2:	4b0f      	ldr	r3, [pc, #60]	; (2b00 <dropped_notify+0x40>)
    2ac4:	f3bf 8f5b 	dmb	ish
    2ac8:	2500      	movs	r5, #0
    2aca:	e853 7f00 	ldrex	r7, [r3]
    2ace:	e843 5200 	strex	r2, r5, [r3]
    2ad2:	2a00      	cmp	r2, #0
    2ad4:	d1f9      	bne.n	2aca <dropped_notify+0xa>
    2ad6:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2ada:	4c0a      	ldr	r4, [pc, #40]	; (2b04 <dropped_notify+0x44>)
    2adc:	4e0a      	ldr	r6, [pc, #40]	; (2b08 <dropped_notify+0x48>)
    2ade:	1b36      	subs	r6, r6, r4
    2ae0:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2ae2:	42b5      	cmp	r5, r6
    2ae4:	db00      	blt.n	2ae8 <dropped_notify+0x28>
}
    2ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2ae8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2aea:	795b      	ldrb	r3, [r3, #5]
    2aec:	b12b      	cbz	r3, 2afa <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    2aee:	6823      	ldr	r3, [r4, #0]
    2af0:	68db      	ldr	r3, [r3, #12]
    2af2:	b113      	cbz	r3, 2afa <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    2af4:	4639      	mov	r1, r7
    2af6:	4620      	mov	r0, r4
    2af8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2afa:	3501      	adds	r5, #1
    2afc:	3410      	adds	r4, #16
    2afe:	e7f0      	b.n	2ae2 <dropped_notify+0x22>
    2b00:	200015ac 	.word	0x200015ac
    2b04:	0002c100 	.word	0x0002c100
    2b08:	0002c110 	.word	0x0002c110

00002b0c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2b0c:	4b06      	ldr	r3, [pc, #24]	; (2b28 <log_dropped+0x1c>)
    2b0e:	f3bf 8f5b 	dmb	ish
    2b12:	e853 2f00 	ldrex	r2, [r3]
    2b16:	3201      	adds	r2, #1
    2b18:	e843 2100 	strex	r1, r2, [r3]
    2b1c:	2900      	cmp	r1, #0
    2b1e:	d1f8      	bne.n	2b12 <log_dropped+0x6>
    2b20:	f3bf 8f5b 	dmb	ish
}
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	200015ac 	.word	0x200015ac

00002b2c <log_source_name_get>:
    2b2c:	4a04      	ldr	r2, [pc, #16]	; (2b40 <log_source_name_get+0x14>)
    2b2e:	4b05      	ldr	r3, [pc, #20]	; (2b44 <log_source_name_get+0x18>)
    2b30:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2b32:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2b36:	bf34      	ite	cc
    2b38:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2b3c:	2000      	movcs	r0, #0
}
    2b3e:	4770      	bx	lr
    2b40:	0002bfa8 	.word	0x0002bfa8
    2b44:	0002c100 	.word	0x0002c100

00002b48 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2b48:	4b09      	ldr	r3, [pc, #36]	; (2b70 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    2b4a:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    2b4c:	1ac3      	subs	r3, r0, r3
    2b4e:	111b      	asrs	r3, r3, #4
    2b50:	3301      	adds	r3, #1
{
    2b52:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    2b54:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    2b56:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    2b58:	4c06      	ldr	r4, [pc, #24]	; (2b74 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    2b5a:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2b5c:	2201      	movs	r2, #1
    2b5e:	715a      	strb	r2, [r3, #5]
    2b60:	7822      	ldrb	r2, [r4, #0]
    2b62:	b912      	cbnz	r2, 2b6a <log_backend_enable+0x22>
    2b64:	4804      	ldr	r0, [pc, #16]	; (2b78 <log_backend_enable+0x30>)
    2b66:	f01d fab9 	bl	200dc <z_impl_k_sem_give>
	backend_attached = true;
    2b6a:	2301      	movs	r3, #1
    2b6c:	7023      	strb	r3, [r4, #0]
}
    2b6e:	bd10      	pop	{r4, pc}
    2b70:	0002c100 	.word	0x0002c100
    2b74:	2000813d 	.word	0x2000813d
    2b78:	20000c00 	.word	0x20000c00

00002b7c <log_init>:
{
    2b7c:	b570      	push	{r4, r5, r6, lr}
    2b7e:	4b11      	ldr	r3, [pc, #68]	; (2bc4 <log_init+0x48>)
    2b80:	f3bf 8f5b 	dmb	ish
    2b84:	e853 5f00 	ldrex	r5, [r3]
    2b88:	1c6a      	adds	r2, r5, #1
    2b8a:	e843 2100 	strex	r1, r2, [r3]
    2b8e:	2900      	cmp	r1, #0
    2b90:	d1f8      	bne.n	2b84 <log_init+0x8>
    2b92:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2b96:	b92d      	cbnz	r5, 2ba4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    2b98:	4c0b      	ldr	r4, [pc, #44]	; (2bc8 <log_init+0x4c>)
    2b9a:	4e0c      	ldr	r6, [pc, #48]	; (2bcc <log_init+0x50>)
    2b9c:	1b36      	subs	r6, r6, r4
    2b9e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2ba0:	42b5      	cmp	r5, r6
    2ba2:	db00      	blt.n	2ba6 <log_init+0x2a>
}
    2ba4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2ba6:	7b23      	ldrb	r3, [r4, #12]
    2ba8:	b143      	cbz	r3, 2bbc <log_init+0x40>
			if (backend->api->init != NULL) {
    2baa:	6823      	ldr	r3, [r4, #0]
    2bac:	695b      	ldr	r3, [r3, #20]
    2bae:	b103      	cbz	r3, 2bb2 <log_init+0x36>
				backend->api->init();
    2bb0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    2bb2:	2204      	movs	r2, #4
    2bb4:	2100      	movs	r1, #0
    2bb6:	4620      	mov	r0, r4
    2bb8:	f7ff ffc6 	bl	2b48 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2bbc:	3501      	adds	r5, #1
    2bbe:	3410      	adds	r4, #16
    2bc0:	e7ee      	b.n	2ba0 <log_init+0x24>
    2bc2:	bf00      	nop
    2bc4:	200015b0 	.word	0x200015b0
    2bc8:	0002c100 	.word	0x0002c100
    2bcc:	0002c110 	.word	0x0002c110

00002bd0 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    2bd0:	4b17      	ldr	r3, [pc, #92]	; (2c30 <log_strdup+0x60>)
    2bd2:	4298      	cmp	r0, r3
{
    2bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2bd6:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2bd8:	d302      	bcc.n	2be0 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2bda:	4b16      	ldr	r3, [pc, #88]	; (2c34 <log_strdup+0x64>)
    2bdc:	4298      	cmp	r0, r3
    2bde:	d321      	bcc.n	2c24 <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2be0:	4815      	ldr	r0, [pc, #84]	; (2c38 <log_strdup+0x68>)
    2be2:	2200      	movs	r2, #0
    2be4:	2300      	movs	r3, #0
    2be6:	a901      	add	r1, sp, #4
    2be8:	f01c fd88 	bl	1f6fc <k_mem_slab_alloc>
	if (err != 0) {
    2bec:	4605      	mov	r5, r0
    2bee:	b9e0      	cbnz	r0, 2c2a <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2bf0:	2201      	movs	r2, #1
    2bf2:	9b01      	ldr	r3, [sp, #4]
    2bf4:	f3bf 8f5b 	dmb	ish
    2bf8:	e853 1f00 	ldrex	r1, [r3]
    2bfc:	e843 2000 	strex	r0, r2, [r3]
    2c00:	2800      	cmp	r0, #0
    2c02:	d1f9      	bne.n	2bf8 <log_strdup+0x28>
    2c04:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2c08:	9e01      	ldr	r6, [sp, #4]
    2c0a:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    2c0c:	221f      	movs	r2, #31
    2c0e:	4618      	mov	r0, r3
    2c10:	4621      	mov	r1, r4
    2c12:	f028 fe13 	bl	2b83c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2c16:	227e      	movs	r2, #126	; 0x7e
    2c18:	4603      	mov	r3, r0
    2c1a:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2c1e:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    2c22:	461c      	mov	r4, r3
}
    2c24:	4620      	mov	r0, r4
    2c26:	b002      	add	sp, #8
    2c28:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    2c2a:	4b04      	ldr	r3, [pc, #16]	; (2c3c <log_strdup+0x6c>)
    2c2c:	e7f9      	b.n	2c22 <log_strdup+0x52>
    2c2e:	bf00      	nop
    2c30:	0002bd58 	.word	0x0002bd58
    2c34:	000396a0 	.word	0x000396a0
    2c38:	200015bc 	.word	0x200015bc
    2c3c:	0002e024 	.word	0x0002e024

00002c40 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2c40:	b148      	cbz	r0, 2c56 <log_is_strdup+0x16>
    2c42:	4b05      	ldr	r3, [pc, #20]	; (2c58 <log_is_strdup+0x18>)
    2c44:	4298      	cmp	r0, r3
    2c46:	d305      	bcc.n	2c54 <log_is_strdup+0x14>
    2c48:	33a0      	adds	r3, #160	; 0xa0
    2c4a:	4298      	cmp	r0, r3
    2c4c:	bf2c      	ite	cs
    2c4e:	2000      	movcs	r0, #0
    2c50:	2001      	movcc	r0, #1
    2c52:	4770      	bx	lr
    2c54:	2000      	movs	r0, #0
}
    2c56:	4770      	bx	lr
    2c58:	2000adc0 	.word	0x2000adc0

00002c5c <z_impl_log_process>:
{
    2c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2c60:	4b4c      	ldr	r3, [pc, #304]	; (2d94 <z_impl_log_process+0x138>)
    2c62:	781b      	ldrb	r3, [r3, #0]
{
    2c64:	b085      	sub	sp, #20
    2c66:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2c68:	b903      	cbnz	r3, 2c6c <z_impl_log_process+0x10>
    2c6a:	b360      	cbz	r0, 2cc6 <z_impl_log_process+0x6a>
    2c6c:	f04f 0320 	mov.w	r3, #32
    2c70:	f3ef 8611 	mrs	r6, BASEPRI
    2c74:	f383 8811 	msr	BASEPRI, r3
    2c78:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    2c7c:	4846      	ldr	r0, [pc, #280]	; (2d98 <z_impl_log_process+0x13c>)
    2c7e:	f020 fcc4 	bl	2360a <log_list_head_get>
    2c82:	4605      	mov	r5, r0
	__asm__ volatile(
    2c84:	f386 8811 	msr	BASEPRI, r6
    2c88:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    2c8c:	b178      	cbz	r0, 2cae <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2c8e:	f3bf 8f5b 	dmb	ish
    2c92:	4b42      	ldr	r3, [pc, #264]	; (2d9c <z_impl_log_process+0x140>)
    2c94:	e853 2f00 	ldrex	r2, [r3]
    2c98:	3a01      	subs	r2, #1
    2c9a:	e843 2100 	strex	r1, r2, [r3]
    2c9e:	2900      	cmp	r1, #0
    2ca0:	d1f8      	bne.n	2c94 <z_impl_log_process+0x38>
    2ca2:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    2ca6:	b194      	cbz	r4, 2cce <z_impl_log_process+0x72>
	log_msg_put(msg);
    2ca8:	4628      	mov	r0, r5
    2caa:	f020 fda7 	bl	237fc <log_msg_put>
	if (!bypass && dropped_cnt) {
    2cae:	b924      	cbnz	r4, 2cba <z_impl_log_process+0x5e>
    2cb0:	4b3b      	ldr	r3, [pc, #236]	; (2da0 <z_impl_log_process+0x144>)
    2cb2:	681b      	ldr	r3, [r3, #0]
    2cb4:	b10b      	cbz	r3, 2cba <z_impl_log_process+0x5e>
		dropped_notify();
    2cb6:	f7ff ff03 	bl	2ac0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2cba:	4837      	ldr	r0, [pc, #220]	; (2d98 <z_impl_log_process+0x13c>)
    2cbc:	f020 fca3 	bl	23606 <log_list_head_peek>
    2cc0:	1e04      	subs	r4, r0, #0
    2cc2:	bf18      	it	ne
    2cc4:	2401      	movne	r4, #1
}
    2cc6:	4620      	mov	r0, r4
    2cc8:	b005      	add	sp, #20
    2cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    2cce:	4b35      	ldr	r3, [pc, #212]	; (2da4 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    2cd0:	781b      	ldrb	r3, [r3, #0]
    2cd2:	b9cb      	cbnz	r3, 2d08 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2cd4:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    2cd6:	07db      	lsls	r3, r3, #31
    2cd8:	d416      	bmi.n	2d08 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    2cda:	f020 fda2 	bl	23822 <log_msg_str_get>
    2cde:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2ce0:	4628      	mov	r0, r5
    2ce2:	f020 fd69 	bl	237b8 <log_msg_nargs_get>
    2ce6:	4601      	mov	r1, r0
    2ce8:	4640      	mov	r0, r8
    2cea:	f7ff fea5 	bl	2a38 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2cee:	4f2e      	ldr	r7, [pc, #184]	; (2da8 <z_impl_log_process+0x14c>)
    2cf0:	4b2e      	ldr	r3, [pc, #184]	; (2dac <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2cf2:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2dc8 <z_impl_log_process+0x16c>
    2cf6:	1bdb      	subs	r3, r3, r7
    2cf8:	08db      	lsrs	r3, r3, #3
    2cfa:	9303      	str	r3, [sp, #12]
    2cfc:	4b2c      	ldr	r3, [pc, #176]	; (2db0 <z_impl_log_process+0x154>)
    2cfe:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2d00:	4606      	mov	r6, r0
    2d02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    2d06:	b936      	cbnz	r6, 2d16 <z_impl_log_process+0xba>
    2d08:	4e2a      	ldr	r6, [pc, #168]	; (2db4 <z_impl_log_process+0x158>)
    2d0a:	4f2b      	ldr	r7, [pc, #172]	; (2db8 <z_impl_log_process+0x15c>)
    2d0c:	1bbf      	subs	r7, r7, r6
    2d0e:	113f      	asrs	r7, r7, #4
    2d10:	f04f 0800 	mov.w	r8, #0
    2d14:	e03a      	b.n	2d8c <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    2d16:	fab6 f186 	clz	r1, r6
    2d1a:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2d1e:	4649      	mov	r1, r9
    2d20:	4628      	mov	r0, r5
    2d22:	f020 fd4c 	bl	237be <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2d26:	4b25      	ldr	r3, [pc, #148]	; (2dbc <z_impl_log_process+0x160>)
    2d28:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2d2a:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2d2c:	d302      	bcc.n	2d34 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2d2e:	4b24      	ldr	r3, [pc, #144]	; (2dc0 <z_impl_log_process+0x164>)
    2d30:	4298      	cmp	r0, r3
    2d32:	d31a      	bcc.n	2d6a <z_impl_log_process+0x10e>
    2d34:	4608      	mov	r0, r1
    2d36:	f7ff ff83 	bl	2c40 <log_is_strdup>
    2d3a:	4602      	mov	r2, r0
    2d3c:	b9a8      	cbnz	r0, 2d6a <z_impl_log_process+0x10e>
    2d3e:	4b21      	ldr	r3, [pc, #132]	; (2dc4 <z_impl_log_process+0x168>)
    2d40:	4299      	cmp	r1, r3
    2d42:	d012      	beq.n	2d6a <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    2d44:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2d46:	9803      	ldr	r0, [sp, #12]
    2d48:	0999      	lsrs	r1, r3, #6
    2d4a:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2d4e:	ea4f 138a 	mov.w	r3, sl, lsl #6
    2d52:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    2d56:	bf88      	it	hi
    2d58:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    2d5c:	f8ad 3000 	strh.w	r3, [sp]
    2d60:	4649      	mov	r1, r9
    2d62:	4643      	mov	r3, r8
    2d64:	4658      	mov	r0, fp
    2d66:	f020 fc9d 	bl	236a4 <log_3>
		mask &= ~BIT(idx);
    2d6a:	2101      	movs	r1, #1
    2d6c:	fa01 f109 	lsl.w	r1, r1, r9
    2d70:	ea26 0601 	bic.w	r6, r6, r1
    2d74:	e7c7      	b.n	2d06 <z_impl_log_process+0xaa>
	return backend->cb->active;
    2d76:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2d78:	795b      	ldrb	r3, [r3, #5]
    2d7a:	b123      	cbz	r3, 2d86 <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    2d7c:	6833      	ldr	r3, [r6, #0]
    2d7e:	4629      	mov	r1, r5
    2d80:	681b      	ldr	r3, [r3, #0]
    2d82:	4630      	mov	r0, r6
    2d84:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2d86:	f108 0801 	add.w	r8, r8, #1
    2d8a:	3610      	adds	r6, #16
    2d8c:	45b8      	cmp	r8, r7
    2d8e:	dbf2      	blt.n	2d76 <z_impl_log_process+0x11a>
    2d90:	e78a      	b.n	2ca8 <z_impl_log_process+0x4c>
    2d92:	bf00      	nop
    2d94:	2000813d 	.word	0x2000813d
    2d98:	200015b4 	.word	0x200015b4
    2d9c:	200015a8 	.word	0x200015a8
    2da0:	200015ac 	.word	0x200015ac
    2da4:	2000813e 	.word	0x2000813e
    2da8:	0002bfa8 	.word	0x0002bfa8
    2dac:	0002c100 	.word	0x0002c100
    2db0:	0002c0b8 	.word	0x0002c0b8
    2db4:	0002c100 	.word	0x0002c100
    2db8:	0002c110 	.word	0x0002c110
    2dbc:	0002bd58 	.word	0x0002bd58
    2dc0:	000396a0 	.word	0x000396a0
    2dc4:	0002e024 	.word	0x0002e024
    2dc8:	0002e03e 	.word	0x0002e03e

00002dcc <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2dcc:	4b29      	ldr	r3, [pc, #164]	; (2e74 <msg_finalize+0xa8>)
{
    2dce:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    2dd0:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    2dd2:	8141      	strh	r1, [r0, #10]
{
    2dd4:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2dd6:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2dd8:	4d27      	ldr	r5, [pc, #156]	; (2e78 <msg_finalize+0xac>)
    2dda:	60e0      	str	r0, [r4, #12]
    2ddc:	f3bf 8f5b 	dmb	ish
    2de0:	e855 3f00 	ldrex	r3, [r5]
    2de4:	3301      	adds	r3, #1
    2de6:	e845 3200 	strex	r2, r3, [r5]
    2dea:	2a00      	cmp	r2, #0
    2dec:	d1f8      	bne.n	2de0 <msg_finalize+0x14>
    2dee:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    2df2:	f04f 0320 	mov.w	r3, #32
    2df6:	f3ef 8611 	mrs	r6, BASEPRI
    2dfa:	f383 8811 	msr	BASEPRI, r3
    2dfe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2e02:	481e      	ldr	r0, [pc, #120]	; (2e7c <msg_finalize+0xb0>)
    2e04:	4621      	mov	r1, r4
    2e06:	f020 fbf4 	bl	235f2 <log_list_add_tail>
	__asm__ volatile(
    2e0a:	f386 8811 	msr	BASEPRI, r6
    2e0e:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    2e12:	4b1b      	ldr	r3, [pc, #108]	; (2e80 <msg_finalize+0xb4>)
    2e14:	781b      	ldrb	r3, [r3, #0]
    2e16:	b183      	cbz	r3, 2e3a <msg_finalize+0x6e>
	__asm__ volatile(
    2e18:	f04f 0320 	mov.w	r3, #32
    2e1c:	f3ef 8411 	mrs	r4, BASEPRI
    2e20:	f383 8811 	msr	BASEPRI, r3
    2e24:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2e28:	2000      	movs	r0, #0
    2e2a:	f7ff ff17 	bl	2c5c <z_impl_log_process>
	__asm__ volatile(
    2e2e:	f384 8811 	msr	BASEPRI, r4
    2e32:	f3bf 8f6f 	isb	sy
}
    2e36:	b002      	add	sp, #8
    2e38:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2e3a:	4a12      	ldr	r2, [pc, #72]	; (2e84 <msg_finalize+0xb8>)
    2e3c:	682b      	ldr	r3, [r5, #0]
    2e3e:	6812      	ldr	r2, [r2, #0]
    2e40:	2a00      	cmp	r2, #0
    2e42:	d0f8      	beq.n	2e36 <msg_finalize+0x6a>
    2e44:	2b01      	cmp	r3, #1
    2e46:	d10a      	bne.n	2e5e <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    2e48:	2200      	movs	r2, #0
    2e4a:	2300      	movs	r3, #0
    2e4c:	e9cd 2300 	strd	r2, r3, [sp]
    2e50:	480d      	ldr	r0, [pc, #52]	; (2e88 <msg_finalize+0xbc>)
    2e52:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2e56:	2300      	movs	r3, #0
    2e58:	f01d fc82 	bl	20760 <z_impl_k_timer_start>
    2e5c:	e7eb      	b.n	2e36 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2e5e:	2b0a      	cmp	r3, #10
    2e60:	d1e9      	bne.n	2e36 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    2e62:	4809      	ldr	r0, [pc, #36]	; (2e88 <msg_finalize+0xbc>)
    2e64:	f028 faf7 	bl	2b456 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2e68:	4808      	ldr	r0, [pc, #32]	; (2e8c <msg_finalize+0xc0>)
}
    2e6a:	b002      	add	sp, #8
    2e6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e70:	f01d b934 	b.w	200dc <z_impl_k_sem_give>
    2e74:	20000330 	.word	0x20000330
    2e78:	200015a8 	.word	0x200015a8
    2e7c:	200015b4 	.word	0x200015b4
    2e80:	2000813e 	.word	0x2000813e
    2e84:	200015d8 	.word	0x200015d8
    2e88:	20000df8 	.word	0x20000df8
    2e8c:	20000c00 	.word	0x20000c00

00002e90 <log_process_thread_func>:
{
    2e90:	b510      	push	{r4, lr}
	log_init();
    2e92:	f7ff fe73 	bl	2b7c <log_init>
	return z_impl_k_current_get();
    2e96:	f01d f91b 	bl	200d0 <z_impl_k_current_get>
	proc_tid = process_tid;
    2e9a:	4b0c      	ldr	r3, [pc, #48]	; (2ecc <log_process_thread_func+0x3c>)
    2e9c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2e9e:	b130      	cbz	r0, 2eae <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2ea0:	4b0b      	ldr	r3, [pc, #44]	; (2ed0 <log_process_thread_func+0x40>)
	    process_tid &&
    2ea2:	681b      	ldr	r3, [r3, #0]
    2ea4:	2b09      	cmp	r3, #9
    2ea6:	dd02      	ble.n	2eae <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    2ea8:	480a      	ldr	r0, [pc, #40]	; (2ed4 <log_process_thread_func+0x44>)
    2eaa:	f01d f917 	bl	200dc <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2eae:	4c09      	ldr	r4, [pc, #36]	; (2ed4 <log_process_thread_func+0x44>)
    2eb0:	2000      	movs	r0, #0
    2eb2:	f7ff fed3 	bl	2c5c <z_impl_log_process>
		if (log_process(false) == false) {
    2eb6:	2800      	cmp	r0, #0
    2eb8:	d1fa      	bne.n	2eb0 <log_process_thread_func+0x20>
    2eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2ebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2ec2:	4620      	mov	r0, r4
    2ec4:	f01d f930 	bl	20128 <z_impl_k_sem_take>
    2ec8:	e7f2      	b.n	2eb0 <log_process_thread_func+0x20>
    2eca:	bf00      	nop
    2ecc:	200015d8 	.word	0x200015d8
    2ed0:	200015a8 	.word	0x200015a8
    2ed4:	20000c00 	.word	0x20000c00

00002ed8 <z_impl_log_panic>:
{
    2ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2eda:	4f0e      	ldr	r7, [pc, #56]	; (2f14 <z_impl_log_panic+0x3c>)
    2edc:	783d      	ldrb	r5, [r7, #0]
    2ede:	b975      	cbnz	r5, 2efe <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2ee0:	4c0d      	ldr	r4, [pc, #52]	; (2f18 <z_impl_log_panic+0x40>)
    2ee2:	4e0e      	ldr	r6, [pc, #56]	; (2f1c <z_impl_log_panic+0x44>)
	log_init();
    2ee4:	f7ff fe4a 	bl	2b7c <log_init>
    2ee8:	1b36      	subs	r6, r6, r4
    2eea:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2eec:	42b5      	cmp	r5, r6
    2eee:	db07      	blt.n	2f00 <z_impl_log_panic+0x28>
    2ef0:	2000      	movs	r0, #0
    2ef2:	f7ff feb3 	bl	2c5c <z_impl_log_process>
		while (log_process(false) == true) {
    2ef6:	2800      	cmp	r0, #0
    2ef8:	d1fa      	bne.n	2ef0 <z_impl_log_panic+0x18>
	panic_mode = true;
    2efa:	2301      	movs	r3, #1
    2efc:	703b      	strb	r3, [r7, #0]
}
    2efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2f00:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2f02:	795b      	ldrb	r3, [r3, #5]
    2f04:	b11b      	cbz	r3, 2f0e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2f06:	6823      	ldr	r3, [r4, #0]
    2f08:	4620      	mov	r0, r4
    2f0a:	691b      	ldr	r3, [r3, #16]
    2f0c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2f0e:	3501      	adds	r5, #1
    2f10:	3410      	adds	r4, #16
    2f12:	e7eb      	b.n	2eec <z_impl_log_panic+0x14>
    2f14:	2000813e 	.word	0x2000813e
    2f18:	0002c100 	.word	0x0002c100
    2f1c:	0002c110 	.word	0x0002c110

00002f20 <log_free>:
{
    2f20:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2f22:	3804      	subs	r0, #4
    2f24:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2f26:	f3bf 8f5b 	dmb	ish
    2f2a:	e850 3f00 	ldrex	r3, [r0]
    2f2e:	1e5a      	subs	r2, r3, #1
    2f30:	e840 2100 	strex	r1, r2, [r0]
    2f34:	2900      	cmp	r1, #0
    2f36:	d1f8      	bne.n	2f2a <log_free+0xa>
    2f38:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d103      	bne.n	2f48 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2f40:	4803      	ldr	r0, [pc, #12]	; (2f50 <log_free+0x30>)
    2f42:	a901      	add	r1, sp, #4
    2f44:	f01c fc0c 	bl	1f760 <k_mem_slab_free>
}
    2f48:	b003      	add	sp, #12
    2f4a:	f85d fb04 	ldr.w	pc, [sp], #4
    2f4e:	bf00      	nop
    2f50:	200015bc 	.word	0x200015bc

00002f54 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2f54:	2320      	movs	r3, #32
    2f56:	4902      	ldr	r1, [pc, #8]	; (2f60 <log_msg_pool_init+0xc>)
    2f58:	4802      	ldr	r0, [pc, #8]	; (2f64 <log_msg_pool_init+0x10>)
    2f5a:	461a      	mov	r2, r3
    2f5c:	f027 bf84 	b.w	2ae68 <k_mem_slab_init>
    2f60:	2000ae60 	.word	0x2000ae60
    2f64:	200015dc 	.word	0x200015dc

00002f68 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2f6a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2f6c:	4d09      	ldr	r5, [pc, #36]	; (2f94 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2f6e:	9301      	str	r3, [sp, #4]
    2f70:	2001      	movs	r0, #1
    2f72:	f7ff fe73 	bl	2c5c <z_impl_log_process>
    2f76:	4604      	mov	r4, r0
			log_dropped();
    2f78:	f7ff fdc8 	bl	2b0c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2f7c:	2200      	movs	r2, #0
    2f7e:	2300      	movs	r3, #0
    2f80:	a901      	add	r1, sp, #4
    2f82:	4628      	mov	r0, r5
    2f84:	f01c fbba 	bl	1f6fc <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2f88:	b108      	cbz	r0, 2f8e <log_msg_no_space_handle+0x26>
    2f8a:	2c00      	cmp	r4, #0
    2f8c:	d1f0      	bne.n	2f70 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    2f8e:	9801      	ldr	r0, [sp, #4]
    2f90:	b003      	add	sp, #12
    2f92:	bd30      	pop	{r4, r5, pc}
    2f94:	200015dc 	.word	0x200015dc

00002f98 <log_msg_chunk_alloc>:
{
    2f98:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2f9a:	2300      	movs	r3, #0
    2f9c:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2f9e:	4807      	ldr	r0, [pc, #28]	; (2fbc <log_msg_chunk_alloc+0x24>)
    2fa0:	2200      	movs	r2, #0
    2fa2:	2300      	movs	r3, #0
    2fa4:	a901      	add	r1, sp, #4
    2fa6:	f01c fba9 	bl	1f6fc <k_mem_slab_alloc>
	if (err != 0) {
    2faa:	b110      	cbz	r0, 2fb2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2fac:	f7ff ffdc 	bl	2f68 <log_msg_no_space_handle>
    2fb0:	9001      	str	r0, [sp, #4]
}
    2fb2:	9801      	ldr	r0, [sp, #4]
    2fb4:	b003      	add	sp, #12
    2fb6:	f85d fb04 	ldr.w	pc, [sp], #4
    2fba:	bf00      	nop
    2fbc:	200015dc 	.word	0x200015dc

00002fc0 <msg_free>:
{
    2fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2fc2:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2fc4:	7a45      	ldrb	r5, [r0, #9]
{
    2fc6:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    2fc8:	092d      	lsrs	r5, r5, #4
{
    2fca:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2fcc:	07d8      	lsls	r0, r3, #31
    2fce:	d41c      	bmi.n	300a <msg_free+0x4a>
    2fd0:	b1dd      	cbz	r5, 300a <msg_free+0x4a>
		uint32_t smask = 0;
    2fd2:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    2fd4:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2fd6:	9801      	ldr	r0, [sp, #4]
    2fd8:	4631      	mov	r1, r6
    2fda:	f020 fbf0 	bl	237be <log_msg_arg_get>
    2fde:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2fe0:	f7ff fe2e 	bl	2c40 <log_is_strdup>
    2fe4:	b170      	cbz	r0, 3004 <msg_free+0x44>
				if (smask == 0) {
    2fe6:	b934      	cbnz	r4, 2ff6 <msg_free+0x36>
					smask = z_log_get_s_mask(
    2fe8:	9b01      	ldr	r3, [sp, #4]
    2fea:	4629      	mov	r1, r5
    2fec:	6918      	ldr	r0, [r3, #16]
    2fee:	f7ff fd23 	bl	2a38 <z_log_get_s_mask>
					if (smask == 0) {
    2ff2:	4604      	mov	r4, r0
    2ff4:	b148      	cbz	r0, 300a <msg_free+0x4a>
				if (smask & BIT(i)) {
    2ff6:	fa24 f306 	lsr.w	r3, r4, r6
    2ffa:	07d9      	lsls	r1, r3, #31
    2ffc:	d502      	bpl.n	3004 <msg_free+0x44>
					log_free(buf);
    2ffe:	4638      	mov	r0, r7
    3000:	f7ff ff8e 	bl	2f20 <log_free>
		for (i = 0; i < nargs; i++) {
    3004:	3601      	adds	r6, #1
    3006:	42ae      	cmp	r6, r5
    3008:	d3e5      	bcc.n	2fd6 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    300a:	9b01      	ldr	r3, [sp, #4]
    300c:	7a1a      	ldrb	r2, [r3, #8]
    300e:	0792      	lsls	r2, r2, #30
    3010:	d504      	bpl.n	301c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    3012:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3014:	4c08      	ldr	r4, [pc, #32]	; (3038 <msg_free+0x78>)
    3016:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3018:	9b03      	ldr	r3, [sp, #12]
    301a:	b92b      	cbnz	r3, 3028 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    301c:	4806      	ldr	r0, [pc, #24]	; (3038 <msg_free+0x78>)
    301e:	a901      	add	r1, sp, #4
    3020:	f01c fb9e 	bl	1f760 <k_mem_slab_free>
}
    3024:	b005      	add	sp, #20
    3026:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    3028:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    302a:	a903      	add	r1, sp, #12
    302c:	4620      	mov	r0, r4
    302e:	f01c fb97 	bl	1f760 <k_mem_slab_free>
		cont = next;
    3032:	9503      	str	r5, [sp, #12]
    3034:	e7f0      	b.n	3018 <msg_free+0x58>
    3036:	bf00      	nop
    3038:	200015dc 	.word	0x200015dc

0000303c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    303c:	b40e      	push	{r1, r2, r3}
    303e:	b503      	push	{r0, r1, lr}
    3040:	ab03      	add	r3, sp, #12
    3042:	4601      	mov	r1, r0
    3044:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    3048:	4804      	ldr	r0, [pc, #16]	; (305c <print_formatted+0x20>)
	va_start(args, fmt);
    304a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    304c:	f7ff f928 	bl	22a0 <cbvprintf>
	va_end(args);

	return length;
}
    3050:	b002      	add	sp, #8
    3052:	f85d eb04 	ldr.w	lr, [sp], #4
    3056:	b003      	add	sp, #12
    3058:	4770      	bx	lr
    305a:	bf00      	nop
    305c:	00023bcb 	.word	0x00023bcb

00003060 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    3060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3064:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3066:	f011 0402 	ands.w	r4, r1, #2
{
    306a:	4690      	mov	r8, r2
    306c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    3070:	4606      	mov	r6, r0
    3072:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3074:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3078:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    307c:	d007      	beq.n	308e <prefix_print+0x2e>
	if (!format) {
    307e:	f011 0f44 	tst.w	r1, #68	; 0x44
    3082:	d137      	bne.n	30f4 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    3084:	4932      	ldr	r1, [pc, #200]	; (3150 <prefix_print+0xf0>)
    3086:	f7ff ffd9 	bl	303c <print_formatted>
			length = print_formatted(log_output,
    308a:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    308c:	460c      	mov	r4, r1
	if (color) {
    308e:	f1b9 0f00 	cmp.w	r9, #0
    3092:	d00a      	beq.n	30aa <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    3094:	4b2f      	ldr	r3, [pc, #188]	; (3154 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    3096:	4930      	ldr	r1, [pc, #192]	; (3158 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    3098:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    309c:	4b2f      	ldr	r3, [pc, #188]	; (315c <prefix_print+0xfc>)
    309e:	4630      	mov	r0, r6
    30a0:	2a00      	cmp	r2, #0
    30a2:	bf08      	it	eq
    30a4:	461a      	moveq	r2, r3
    30a6:	f7ff ffc9 	bl	303c <print_formatted>
	if (level_on) {
    30aa:	b13d      	cbz	r5, 30bc <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    30ac:	4b2c      	ldr	r3, [pc, #176]	; (3160 <prefix_print+0x100>)
    30ae:	492d      	ldr	r1, [pc, #180]	; (3164 <prefix_print+0x104>)
    30b0:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    30b4:	4630      	mov	r0, r6
    30b6:	f7ff ffc1 	bl	303c <print_formatted>
    30ba:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    30bc:	f1b8 0f00 	cmp.w	r8, #0
    30c0:	d043      	beq.n	314a <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    30c2:	2301      	movs	r3, #1
    30c4:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    30c8:	4b27      	ldr	r3, [pc, #156]	; (3168 <prefix_print+0x108>)
    30ca:	f017 0f10 	tst.w	r7, #16
    30ce:	4f27      	ldr	r7, [pc, #156]	; (316c <prefix_print+0x10c>)
    30d0:	bf18      	it	ne
    30d2:	461f      	movne	r7, r3
    30d4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    30d8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    30dc:	f7ff fd26 	bl	2b2c <log_source_name_get>
    30e0:	4639      	mov	r1, r7
    30e2:	4602      	mov	r2, r0
    30e4:	4630      	mov	r0, r6
    30e6:	f7ff ffa9 	bl	303c <print_formatted>
    30ea:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    30ec:	4420      	add	r0, r4
    30ee:	b005      	add	sp, #20
    30f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    30f4:	4b1e      	ldr	r3, [pc, #120]	; (3170 <prefix_print+0x110>)
    30f6:	6819      	ldr	r1, [r3, #0]
    30f8:	2900      	cmp	r1, #0
    30fa:	d0c7      	beq.n	308c <prefix_print+0x2c>
		timestamp /= timestamp_div;
    30fc:	4b1d      	ldr	r3, [pc, #116]	; (3174 <prefix_print+0x114>)
    30fe:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    3102:	681b      	ldr	r3, [r3, #0]
    3104:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    3108:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    310c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    3110:	fbb4 f2fe 	udiv	r2, r4, lr
    3114:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    3118:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    311c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    3120:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3124:	fbb4 fbf1 	udiv	fp, r4, r1
    3128:	fb01 441b 	mls	r4, r1, fp, r4
    312c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    3130:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3134:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    3138:	e9cd b101 	strd	fp, r1, [sp, #4]
    313c:	fb0a e113 	mls	r1, sl, r3, lr
    3140:	9100      	str	r1, [sp, #0]
    3142:	490d      	ldr	r1, [pc, #52]	; (3178 <prefix_print+0x118>)
    3144:	f7ff ff7a 	bl	303c <print_formatted>
    3148:	e79f      	b.n	308a <prefix_print+0x2a>
	total += print_formatted(log_output,
    314a:	4f08      	ldr	r7, [pc, #32]	; (316c <prefix_print+0x10c>)
    314c:	e7c2      	b.n	30d4 <prefix_print+0x74>
    314e:	bf00      	nop
    3150:	0002e08f 	.word	0x0002e08f
    3154:	0002c1a0 	.word	0x0002c1a0
    3158:	0002df29 	.word	0x0002df29
    315c:	0002e081 	.word	0x0002e081
    3160:	0002c1b4 	.word	0x0002c1b4
    3164:	0002e0b4 	.word	0x0002e0b4
    3168:	0002e08b 	.word	0x0002e08b
    316c:	0002e086 	.word	0x0002e086
    3170:	200015f8 	.word	0x200015f8
    3174:	200015fc 	.word	0x200015fc
    3178:	0002e098 	.word	0x0002e098

0000317c <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    317c:	b538      	push	{r3, r4, r5, lr}
    317e:	460c      	mov	r4, r1
	if (color) {
    3180:	07e1      	lsls	r1, r4, #31
{
    3182:	4605      	mov	r5, r0
	if (color) {
    3184:	d503      	bpl.n	318e <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    3186:	4a08      	ldr	r2, [pc, #32]	; (31a8 <postfix_print+0x2c>)
    3188:	4908      	ldr	r1, [pc, #32]	; (31ac <postfix_print+0x30>)
    318a:	f7ff ff57 	bl	303c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    318e:	06e2      	lsls	r2, r4, #27
    3190:	d408      	bmi.n	31a4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3192:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    3194:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    3196:	bf4c      	ite	mi
    3198:	4905      	ldrmi	r1, [pc, #20]	; (31b0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    319a:	4906      	ldrpl	r1, [pc, #24]	; (31b4 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    319c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    31a0:	f7ff bf4c 	b.w	303c <print_formatted>
}
    31a4:	bd38      	pop	{r3, r4, r5, pc}
    31a6:	bf00      	nop
    31a8:	0002e081 	.word	0x0002e081
    31ac:	0002df29 	.word	0x0002df29
    31b0:	0002e0bb 	.word	0x0002e0bb
    31b4:	0002e0ba 	.word	0x0002e0ba

000031b8 <hexdump_line_print>:
{
    31b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    31bc:	461d      	mov	r5, r3
    31be:	9b08      	ldr	r3, [sp, #32]
    31c0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    31c2:	06da      	lsls	r2, r3, #27
{
    31c4:	4604      	mov	r4, r0
    31c6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    31c8:	d405      	bmi.n	31d6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    31ca:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    31cc:	bf4c      	ite	mi
    31ce:	492b      	ldrmi	r1, [pc, #172]	; (327c <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    31d0:	492b      	ldrpl	r1, [pc, #172]	; (3280 <hexdump_line_print+0xc8>)
    31d2:	f7ff ff33 	bl	303c <print_formatted>
		print_formatted(log_output, " ");
    31d6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3288 <hexdump_line_print+0xd0>
{
    31da:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    31de:	45a8      	cmp	r8, r5
    31e0:	db2d      	blt.n	323e <hexdump_line_print+0x86>
			print_formatted(log_output, "   ");
    31e2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 328c <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
    31e6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3290 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
    31ea:	f8df a09c 	ldr.w	sl, [pc, #156]	; 3288 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31ee:	2500      	movs	r5, #0
		if (i < length) {
    31f0:	42bd      	cmp	r5, r7
    31f2:	d232      	bcs.n	325a <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    31f4:	5d72      	ldrb	r2, [r6, r5]
    31f6:	4649      	mov	r1, r9
    31f8:	4620      	mov	r0, r4
    31fa:	f7ff ff1f 	bl	303c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31fe:	3501      	adds	r5, #1
    3200:	2d10      	cmp	r5, #16
    3202:	d123      	bne.n	324c <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
    3204:	491f      	ldr	r1, [pc, #124]	; (3284 <hexdump_line_print+0xcc>)
			print_formatted(log_output, " ");
    3206:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3288 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    320a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 3294 <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
    320e:	f8df a088 	ldr.w	sl, [pc, #136]	; 3298 <hexdump_line_print+0xe0>
	print_formatted(log_output, "|");
    3212:	4620      	mov	r0, r4
    3214:	f7ff ff12 	bl	303c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3218:	2500      	movs	r5, #0
		if (i < length) {
    321a:	42af      	cmp	r7, r5
    321c:	d929      	bls.n	3272 <hexdump_line_print+0xba>
			char c = (char)data[i];
    321e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    3220:	f812 3009 	ldrb.w	r3, [r2, r9]
    3224:	f013 0f97 	tst.w	r3, #151	; 0x97
    3228:	bf08      	it	eq
    322a:	222e      	moveq	r2, #46	; 0x2e
    322c:	4651      	mov	r1, sl
    322e:	4620      	mov	r0, r4
    3230:	f7ff ff04 	bl	303c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3234:	3501      	adds	r5, #1
    3236:	2d10      	cmp	r5, #16
    3238:	d114      	bne.n	3264 <hexdump_line_print+0xac>
}
    323a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    323e:	4649      	mov	r1, r9
    3240:	4620      	mov	r0, r4
    3242:	f7ff fefb 	bl	303c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3246:	f108 0801 	add.w	r8, r8, #1
    324a:	e7c8      	b.n	31de <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    324c:	076a      	lsls	r2, r5, #29
    324e:	d1cf      	bne.n	31f0 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    3250:	4651      	mov	r1, sl
    3252:	4620      	mov	r0, r4
    3254:	f7ff fef2 	bl	303c <print_formatted>
    3258:	e7ca      	b.n	31f0 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    325a:	4641      	mov	r1, r8
    325c:	4620      	mov	r0, r4
    325e:	f7ff feed 	bl	303c <print_formatted>
    3262:	e7cc      	b.n	31fe <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    3264:	076b      	lsls	r3, r5, #29
    3266:	d1d8      	bne.n	321a <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    3268:	4641      	mov	r1, r8
    326a:	4620      	mov	r0, r4
    326c:	f7ff fee6 	bl	303c <print_formatted>
    3270:	e7d3      	b.n	321a <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    3272:	4641      	mov	r1, r8
    3274:	4620      	mov	r0, r4
    3276:	f7ff fee1 	bl	303c <print_formatted>
    327a:	e7db      	b.n	3234 <hexdump_line_print+0x7c>
    327c:	0002e0bb 	.word	0x0002e0bb
    3280:	0002e0ba 	.word	0x0002e0ba
    3284:	0002e0c7 	.word	0x0002e0c7
    3288:	0002e0c5 	.word	0x0002e0c5
    328c:	0002e0c3 	.word	0x0002e0c3
    3290:	0002e0bd 	.word	0x0002e0bd
    3294:	00039397 	.word	0x00039397
    3298:	0002e0c9 	.word	0x0002e0c9

0000329c <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    329c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    32a0:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    32a2:	f013 0807 	ands.w	r8, r3, #7
{
    32a6:	4617      	mov	r7, r2
    32a8:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    32aa:	7a0a      	ldrb	r2, [r1, #8]
    32ac:	4605      	mov	r5, r0
    32ae:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    32b0:	d020      	beq.n	32f4 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    32b2:	8949      	ldrh	r1, [r1, #10]
    32b4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    32b8:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    32ba:	43d2      	mvns	r2, r2
    32bc:	e9cd 8300 	strd	r8, r3, [sp]
    32c0:	9102      	str	r1, [sp, #8]
    32c2:	68f3      	ldr	r3, [r6, #12]
    32c4:	f002 0201 	and.w	r2, r2, #1
    32c8:	4639      	mov	r1, r7
    32ca:	f7ff fec9 	bl	3060 <prefix_print>
    32ce:	4681      	mov	r9, r0
    32d0:	7a34      	ldrb	r4, [r6, #8]
    32d2:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    32d4:	f014 0401 	ands.w	r4, r4, #1
    32d8:	d00e      	beq.n	32f8 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    32da:	4629      	mov	r1, r5
    32dc:	4630      	mov	r0, r6
    32de:	f020 fb0a 	bl	238f6 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    32e2:	f1b8 0f00 	cmp.w	r8, #0
    32e6:	d02b      	beq.n	3340 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    32e8:	4642      	mov	r2, r8
    32ea:	4639      	mov	r1, r7
    32ec:	4628      	mov	r0, r5
    32ee:	f7ff ff45 	bl	317c <postfix_print>
    32f2:	e025      	b.n	3340 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    32f4:	46c1      	mov	r9, r8
    32f6:	e7eb      	b.n	32d0 <log_output_msg_process+0x34>
	} else if (raw_string) {
    32f8:	f1b8 0f00 	cmp.w	r8, #0
    32fc:	d126      	bne.n	334c <log_output_msg_process+0xb0>
	size_t offset = 0;
    32fe:	4627      	mov	r7, r4
		length = log_output->size;
    3300:	68eb      	ldr	r3, [r5, #12]
    3302:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    3304:	aa06      	add	r2, sp, #24
    3306:	463b      	mov	r3, r7
    3308:	68a9      	ldr	r1, [r5, #8]
    330a:	4630      	mov	r0, r6
    330c:	f020 fadf 	bl	238ce <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    3310:	9a06      	ldr	r2, [sp, #24]
    3312:	686b      	ldr	r3, [r5, #4]
    3314:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    3316:	b13a      	cbz	r2, 3328 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    3318:	68ab      	ldr	r3, [r5, #8]
    331a:	4413      	add	r3, r2
    331c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    3320:	f1a4 030a 	sub.w	r3, r4, #10
    3324:	425c      	negs	r4, r3
    3326:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    3328:	4628      	mov	r0, r5
    332a:	f020 fc41 	bl	23bb0 <log_output_flush>
		offset += length;
    332e:	9b06      	ldr	r3, [sp, #24]
    3330:	441f      	add	r7, r3
	} while (length > 0);
    3332:	2b00      	cmp	r3, #0
    3334:	d1e4      	bne.n	3300 <log_output_msg_process+0x64>
	if (eol) {
    3336:	b11c      	cbz	r4, 3340 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    3338:	4913      	ldr	r1, [pc, #76]	; (3388 <log_output_msg_process+0xec>)
    333a:	4628      	mov	r0, r5
    333c:	f7ff fe7e 	bl	303c <print_formatted>
	}

	log_output_flush(log_output);
    3340:	4628      	mov	r0, r5
    3342:	f020 fc35 	bl	23bb0 <log_output_flush>
}
    3346:	b00a      	add	sp, #40	; 0x28
    3348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    334c:	4630      	mov	r0, r6
    334e:	f020 fa68 	bl	23822 <log_msg_str_get>
    3352:	490e      	ldr	r1, [pc, #56]	; (338c <log_output_msg_process+0xf0>)
    3354:	4602      	mov	r2, r0
    3356:	4628      	mov	r0, r5
    3358:	f7ff fe70 	bl	303c <print_formatted>
		length = sizeof(buf);
    335c:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3360:	aa05      	add	r2, sp, #20
    3362:	4623      	mov	r3, r4
    3364:	a906      	add	r1, sp, #24
    3366:	4630      	mov	r0, r6
		length = sizeof(buf);
    3368:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    336c:	f020 faaf 	bl	238ce <log_msg_hexdump_data_get>
		if (length) {
    3370:	9a05      	ldr	r2, [sp, #20]
    3372:	2a00      	cmp	r2, #0
    3374:	d0b8      	beq.n	32e8 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    3376:	464b      	mov	r3, r9
    3378:	9700      	str	r7, [sp, #0]
    337a:	a906      	add	r1, sp, #24
    337c:	4628      	mov	r0, r5
    337e:	f7ff ff1b 	bl	31b8 <hexdump_line_print>
			offset += length;
    3382:	9b05      	ldr	r3, [sp, #20]
    3384:	441c      	add	r4, r3
		length = sizeof(buf);
    3386:	e7eb      	b.n	3360 <log_output_msg_process+0xc4>
    3388:	0002e0cc 	.word	0x0002e0cc
    338c:	0002df29 	.word	0x0002df29

00003390 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    3390:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3392:	f242 730f 	movw	r3, #9999	; 0x270f
    3396:	428b      	cmp	r3, r1
    3398:	bf28      	it	cs
    339a:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    339c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    339e:	4a0f      	ldr	r2, [pc, #60]	; (33dc <log_output_dropped_process+0x4c>)
{
    33a0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    33a2:	2105      	movs	r1, #5
    33a4:	4668      	mov	r0, sp
    33a6:	f01f fd3b 	bl	22e20 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    33aa:	6863      	ldr	r3, [r4, #4]
    33ac:	490c      	ldr	r1, [pc, #48]	; (33e0 <log_output_dropped_process+0x50>)
    33ae:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    33b0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    33b2:	220b      	movs	r2, #11
    33b4:	4628      	mov	r0, r5
    33b6:	f020 fa91 	bl	238dc <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    33ba:	6863      	ldr	r3, [r4, #4]
    33bc:	4632      	mov	r2, r6
    33be:	4669      	mov	r1, sp
    33c0:	4628      	mov	r0, r5
    33c2:	685b      	ldr	r3, [r3, #4]
    33c4:	f020 fa8a 	bl	238dc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    33c8:	6863      	ldr	r3, [r4, #4]
    33ca:	4906      	ldr	r1, [pc, #24]	; (33e4 <log_output_dropped_process+0x54>)
    33cc:	685b      	ldr	r3, [r3, #4]
    33ce:	221b      	movs	r2, #27
    33d0:	4628      	mov	r0, r5
    33d2:	f020 fa83 	bl	238dc <buffer_write>
		     log_output->control_block->ctx);
}
    33d6:	b002      	add	sp, #8
    33d8:	bd70      	pop	{r4, r5, r6, pc}
    33da:	bf00      	nop
    33dc:	0002f719 	.word	0x0002f719
    33e0:	0002e10a 	.word	0x0002e10a
    33e4:	0002e0ee 	.word	0x0002e0ee

000033e8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    33e8:	4a08      	ldr	r2, [pc, #32]	; (340c <log_output_timestamp_freq_set+0x24>)
{
    33ea:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    33ec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    33ee:	4c08      	ldr	r4, [pc, #32]	; (3410 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    33f0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    33f2:	2100      	movs	r1, #0
    33f4:	42a0      	cmp	r0, r4
    33f6:	d804      	bhi.n	3402 <log_output_timestamp_freq_set+0x1a>
    33f8:	b101      	cbz	r1, 33fc <log_output_timestamp_freq_set+0x14>
    33fa:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    33fc:	4b05      	ldr	r3, [pc, #20]	; (3414 <log_output_timestamp_freq_set+0x2c>)
    33fe:	6018      	str	r0, [r3, #0]
}
    3400:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    3402:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    3404:	005b      	lsls	r3, r3, #1
    3406:	2101      	movs	r1, #1
    3408:	e7f4      	b.n	33f4 <log_output_timestamp_freq_set+0xc>
    340a:	bf00      	nop
    340c:	200015fc 	.word	0x200015fc
    3410:	000f4240 	.word	0x000f4240
    3414:	200015f8 	.word	0x200015f8

00003418 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3418:	4b01      	ldr	r3, [pc, #4]	; (3420 <log_backend_rtt_init+0x8>)
    341a:	2201      	movs	r2, #1
    341c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    341e:	4770      	bx	lr
    3420:	2000814f 	.word	0x2000814f

00003424 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    3424:	4b02      	ldr	r3, [pc, #8]	; (3430 <panic+0xc>)
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    3426:	4803      	ldr	r0, [pc, #12]	; (3434 <panic+0x10>)
    3428:	2201      	movs	r2, #1
    342a:	701a      	strb	r2, [r3, #0]
    342c:	f020 bbc0 	b.w	23bb0 <log_output_flush>
    3430:	20008150 	.word	0x20008150
    3434:	0002c1e0 	.word	0x0002c1e0

00003438 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    3438:	4801      	ldr	r0, [pc, #4]	; (3440 <dropped+0x8>)
    343a:	f7ff bfa9 	b.w	3390 <log_output_dropped_process>
    343e:	bf00      	nop
    3440:	0002c1e0 	.word	0x0002c1e0

00003444 <put>:
{
    3444:	b510      	push	{r4, lr}
	log_msg_get(msg);
    3446:	4608      	mov	r0, r1
    3448:	460c      	mov	r4, r1
    344a:	f020 f9a8 	bl	2379e <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    344e:	4805      	ldr	r0, [pc, #20]	; (3464 <put+0x20>)
    3450:	4621      	mov	r1, r4
    3452:	220f      	movs	r2, #15
    3454:	f7ff ff22 	bl	329c <log_output_msg_process>
	log_msg_put(msg);
    3458:	4620      	mov	r0, r4
}
    345a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    345e:	f020 b9cd 	b.w	237fc <log_msg_put>
    3462:	bf00      	nop
    3464:	0002c1e0 	.word	0x0002c1e0

00003468 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3468:	4b05      	ldr	r3, [pc, #20]	; (3480 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    346a:	781b      	ldrb	r3, [r3, #0]
    346c:	b11b      	cbz	r3, 3476 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    346e:	f241 3088 	movw	r0, #5000	; 0x1388
    3472:	f027 bef3 	b.w	2b25c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    3476:	20a4      	movs	r0, #164	; 0xa4
    3478:	2100      	movs	r1, #0
    347a:	f01c be07 	b.w	2008c <z_impl_k_sleep>
    347e:	bf00      	nop
    3480:	20008150 	.word	0x20008150

00003484 <data_out_block_mode>:
{
    3484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3488:	f8df 9090 	ldr.w	r9, [pc, #144]	; 351c <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    348c:	f8df b090 	ldr.w	fp, [pc, #144]	; 3520 <data_out_block_mode+0x9c>
{
    3490:	4607      	mov	r7, r0
    3492:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3494:	2404      	movs	r4, #4
    3496:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    3498:	f899 3000 	ldrb.w	r3, [r9]
    349c:	b933      	cbnz	r3, 34ac <data_out_block_mode+0x28>
    349e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34a6:	4658      	mov	r0, fp
    34a8:	f01c f986 	bl	1f7b8 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    34ac:	4632      	mov	r2, r6
    34ae:	4639      	mov	r1, r7
    34b0:	2000      	movs	r0, #0
    34b2:	f000 fe6f 	bl	4194 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    34b6:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    34ba:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    34bc:	b913      	cbnz	r3, 34c4 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    34be:	4658      	mov	r0, fp
    34c0:	f01c f9f2 	bl	1f8a8 <z_impl_k_mutex_unlock>
		if (ret) {
    34c4:	4d14      	ldr	r5, [pc, #80]	; (3518 <data_out_block_mode+0x94>)
    34c6:	f1b8 0f00 	cmp.w	r8, #0
    34ca:	d018      	beq.n	34fe <data_out_block_mode+0x7a>
	host_present = true;
    34cc:	2301      	movs	r3, #1
    34ce:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    34d0:	f89a 3000 	ldrb.w	r3, [sl]
    34d4:	b933      	cbnz	r3, 34e4 <data_out_block_mode+0x60>
}
    34d6:	4630      	mov	r0, r6
    34d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    34dc:	b95c      	cbnz	r4, 34f6 <data_out_block_mode+0x72>
		host_present = false;
    34de:	702c      	strb	r4, [r5, #0]
    34e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    34e4:	2000      	movs	r0, #0
    34e6:	f000 fea1 	bl	422c <SEGGER_RTT_HasDataUp>
    34ea:	2800      	cmp	r0, #0
    34ec:	d0f3      	beq.n	34d6 <data_out_block_mode+0x52>
    34ee:	782b      	ldrb	r3, [r5, #0]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d1f3      	bne.n	34dc <data_out_block_mode+0x58>
    34f4:	e7ef      	b.n	34d6 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    34f6:	3c01      	subs	r4, #1
    34f8:	f7ff ffb6 	bl	3468 <on_failed_write.part.0>
    34fc:	e7f2      	b.n	34e4 <data_out_block_mode+0x60>
		} else if (host_present) {
    34fe:	782b      	ldrb	r3, [r5, #0]
    3500:	b113      	cbz	r3, 3508 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    3502:	3c01      	subs	r4, #1
    3504:	d104      	bne.n	3510 <data_out_block_mode+0x8c>
		host_present = false;
    3506:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    3508:	782b      	ldrb	r3, [r5, #0]
    350a:	2b00      	cmp	r3, #0
    350c:	d1c4      	bne.n	3498 <data_out_block_mode+0x14>
    350e:	e7e2      	b.n	34d6 <data_out_block_mode+0x52>
    3510:	f7ff ffaa 	bl	3468 <on_failed_write.part.0>
    3514:	e7f8      	b.n	3508 <data_out_block_mode+0x84>
    3516:	bf00      	nop
    3518:	2000814f 	.word	0x2000814f
    351c:	20008150 	.word	0x20008150
    3520:	20000bc0 	.word	0x20000bc0

00003524 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    3524:	4b10      	ldr	r3, [pc, #64]	; (3568 <settings_save_one+0x44>)
{
    3526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    352a:	681c      	ldr	r4, [r3, #0]
{
    352c:	4605      	mov	r5, r0
    352e:	460e      	mov	r6, r1
    3530:	4617      	mov	r7, r2
	if (!cs) {
    3532:	b1ac      	cbz	r4, 3560 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    3534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    353c:	480b      	ldr	r0, [pc, #44]	; (356c <settings_save_one+0x48>)
    353e:	f01c f93b 	bl	1f7b8 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    3542:	6863      	ldr	r3, [r4, #4]
    3544:	4632      	mov	r2, r6
    3546:	f8d3 8008 	ldr.w	r8, [r3, #8]
    354a:	4629      	mov	r1, r5
    354c:	463b      	mov	r3, r7
    354e:	4620      	mov	r0, r4
    3550:	47c0      	blx	r8
    3552:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3554:	4805      	ldr	r0, [pc, #20]	; (356c <settings_save_one+0x48>)
    3556:	f01c f9a7 	bl	1f8a8 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    355a:	4620      	mov	r0, r4
    355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    3560:	f06f 0401 	mvn.w	r4, #1
    3564:	e7f9      	b.n	355a <settings_save_one+0x36>
    3566:	bf00      	nop
    3568:	2000161c 	.word	0x2000161c
    356c:	20000bd4 	.word	0x20000bd4

00003570 <settings_load_subtree>:
{
    3570:	b530      	push	{r4, r5, lr}
    3572:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    3574:	2300      	movs	r3, #0
{
    3576:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    3578:	e9cd 3302 	strd	r3, r3, [sp, #8]
    357c:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    357e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3582:	480e      	ldr	r0, [pc, #56]	; (35bc <settings_load_subtree+0x4c>)
    3584:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3588:	f01c f916 	bl	1f7b8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    358c:	4b0c      	ldr	r3, [pc, #48]	; (35c0 <settings_load_subtree+0x50>)
    358e:	681c      	ldr	r4, [r3, #0]
    3590:	2c00      	cmp	r4, #0
    3592:	bf38      	it	cc
    3594:	2400      	movcc	r4, #0
    3596:	b13c      	cbz	r4, 35a8 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
    3598:	6863      	ldr	r3, [r4, #4]
    359a:	4620      	mov	r0, r4
    359c:	681b      	ldr	r3, [r3, #0]
    359e:	a901      	add	r1, sp, #4
    35a0:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    35a2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    35a4:	2c00      	cmp	r4, #0
    35a6:	d1f6      	bne.n	3596 <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
    35a8:	4628      	mov	r0, r5
    35aa:	f000 f889 	bl	36c0 <settings_commit_subtree>
    35ae:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    35b0:	4802      	ldr	r0, [pc, #8]	; (35bc <settings_load_subtree+0x4c>)
    35b2:	f01c f979 	bl	1f8a8 <z_impl_k_mutex_unlock>
}
    35b6:	4620      	mov	r0, r4
    35b8:	b005      	add	sp, #20
    35ba:	bd30      	pop	{r4, r5, pc}
    35bc:	20000bd4 	.word	0x20000bd4
    35c0:	20001614 	.word	0x20001614

000035c4 <settings_load_subtree_direct>:
{
    35c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    35c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
    35ca:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    35cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    35d0:	480c      	ldr	r0, [pc, #48]	; (3604 <settings_load_subtree_direct+0x40>)
    35d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    35d6:	f01c f8ef 	bl	1f7b8 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    35da:	4b0b      	ldr	r3, [pc, #44]	; (3608 <settings_load_subtree_direct+0x44>)
    35dc:	681c      	ldr	r4, [r3, #0]
    35de:	2c00      	cmp	r4, #0
    35e0:	bf38      	it	cc
    35e2:	2400      	movcc	r4, #0
    35e4:	b13c      	cbz	r4, 35f6 <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    35e6:	6863      	ldr	r3, [r4, #4]
    35e8:	4620      	mov	r0, r4
    35ea:	681b      	ldr	r3, [r3, #0]
    35ec:	a901      	add	r1, sp, #4
    35ee:	4798      	blx	r3
    35f0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    35f2:	2c00      	cmp	r4, #0
    35f4:	d1f6      	bne.n	35e4 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    35f6:	4803      	ldr	r0, [pc, #12]	; (3604 <settings_load_subtree_direct+0x40>)
    35f8:	f01c f956 	bl	1f8a8 <z_impl_k_mutex_unlock>
}
    35fc:	2000      	movs	r0, #0
    35fe:	b004      	add	sp, #16
    3600:	bd10      	pop	{r4, pc}
    3602:	bf00      	nop
    3604:	20000bd4 	.word	0x20000bd4
    3608:	20001614 	.word	0x20001614

0000360c <settings_store_init>:
	list->head = NULL;
    360c:	4b02      	ldr	r3, [pc, #8]	; (3618 <settings_store_init+0xc>)
    360e:	2200      	movs	r2, #0
	list->tail = NULL;
    3610:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    3614:	4770      	bx	lr
    3616:	bf00      	nop
    3618:	20001614 	.word	0x20001614

0000361c <settings_init>:
	list->head = NULL;
    361c:	4b02      	ldr	r3, [pc, #8]	; (3628 <settings_init+0xc>)
    361e:	2200      	movs	r2, #0
	list->tail = NULL;
    3620:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    3624:	f7ff bff2 	b.w	360c <settings_store_init>
    3628:	20001620 	.word	0x20001620

0000362c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    362c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3630:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    3632:	460e      	mov	r6, r1
    3634:	b109      	cbz	r1, 363a <settings_parse_and_lookup+0xe>
		*next = NULL;
    3636:	2300      	movs	r3, #0
    3638:	600b      	str	r3, [r1, #0]
    363a:	4c1e      	ldr	r4, [pc, #120]	; (36b4 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    363c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 36bc <settings_parse_and_lookup+0x90>
    3640:	2500      	movs	r5, #0
    3642:	4544      	cmp	r4, r8
    3644:	d308      	bcc.n	3658 <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3646:	4b1c      	ldr	r3, [pc, #112]	; (36b8 <settings_parse_and_lookup+0x8c>)
    3648:	681c      	ldr	r4, [r3, #0]
    364a:	b10c      	cbz	r4, 3650 <settings_parse_and_lookup+0x24>
    364c:	3c14      	subs	r4, #20
    364e:	b9c4      	cbnz	r4, 3682 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    3650:	4628      	mov	r0, r5
    3652:	b002      	add	sp, #8
    3654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3658:	6821      	ldr	r1, [r4, #0]
    365a:	aa01      	add	r2, sp, #4
    365c:	4638      	mov	r0, r7
    365e:	f020 fad6 	bl	23c0e <settings_name_steq>
    3662:	b160      	cbz	r0, 367e <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    3664:	b925      	cbnz	r5, 3670 <settings_parse_and_lookup+0x44>
			if (next) {
    3666:	b10e      	cbz	r6, 366c <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    3668:	9b01      	ldr	r3, [sp, #4]
    366a:	6033      	str	r3, [r6, #0]
    366c:	4625      	mov	r5, r4
    366e:	e006      	b.n	367e <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3670:	6829      	ldr	r1, [r5, #0]
    3672:	6820      	ldr	r0, [r4, #0]
    3674:	2200      	movs	r2, #0
    3676:	f020 faca 	bl	23c0e <settings_name_steq>
    367a:	2800      	cmp	r0, #0
    367c:	d1f3      	bne.n	3666 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    367e:	3414      	adds	r4, #20
    3680:	e7df      	b.n	3642 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3682:	6821      	ldr	r1, [r4, #0]
    3684:	aa01      	add	r2, sp, #4
    3686:	4638      	mov	r0, r7
    3688:	f020 fac1 	bl	23c0e <settings_name_steq>
    368c:	b160      	cbz	r0, 36a8 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    368e:	b925      	cbnz	r5, 369a <settings_parse_and_lookup+0x6e>
			if (next) {
    3690:	b10e      	cbz	r6, 3696 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    3692:	9b01      	ldr	r3, [sp, #4]
    3694:	6033      	str	r3, [r6, #0]
    3696:	4625      	mov	r5, r4
    3698:	e006      	b.n	36a8 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    369a:	6829      	ldr	r1, [r5, #0]
    369c:	6820      	ldr	r0, [r4, #0]
    369e:	2200      	movs	r2, #0
    36a0:	f020 fab5 	bl	23c0e <settings_name_steq>
    36a4:	2800      	cmp	r0, #0
    36a6:	d1f3      	bne.n	3690 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    36a8:	f114 0f14 	cmn.w	r4, #20
    36ac:	d0d0      	beq.n	3650 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    36ae:	6964      	ldr	r4, [r4, #20]
    36b0:	e7cb      	b.n	364a <settings_parse_and_lookup+0x1e>
    36b2:	bf00      	nop
    36b4:	0002bf44 	.word	0x0002bf44
    36b8:	20001620 	.word	0x20001620
    36bc:	0002bfa8 	.word	0x0002bfa8

000036c0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    36c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    36c2:	4c1a      	ldr	r4, [pc, #104]	; (372c <settings_commit_subtree+0x6c>)
    36c4:	4f1a      	ldr	r7, [pc, #104]	; (3730 <settings_commit_subtree+0x70>)
{
    36c6:	4606      	mov	r6, r0
	rc = 0;
    36c8:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    36ca:	42bc      	cmp	r4, r7
    36cc:	d306      	bcc.n	36dc <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    36ce:	4b19      	ldr	r3, [pc, #100]	; (3734 <settings_commit_subtree+0x74>)
    36d0:	681c      	ldr	r4, [r3, #0]
    36d2:	b10c      	cbz	r4, 36d8 <settings_commit_subtree+0x18>
    36d4:	3c14      	subs	r4, #20
    36d6:	b99c      	cbnz	r4, 3700 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    36d8:	4628      	mov	r0, r5
    36da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    36dc:	b91e      	cbnz	r6, 36e6 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    36de:	68e3      	ldr	r3, [r4, #12]
    36e0:	b94b      	cbnz	r3, 36f6 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    36e2:	3414      	adds	r4, #20
    36e4:	e7f1      	b.n	36ca <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    36e6:	6820      	ldr	r0, [r4, #0]
    36e8:	2200      	movs	r2, #0
    36ea:	4631      	mov	r1, r6
    36ec:	f020 fa8f 	bl	23c0e <settings_name_steq>
    36f0:	2800      	cmp	r0, #0
    36f2:	d1f4      	bne.n	36de <settings_commit_subtree+0x1e>
    36f4:	e7f5      	b.n	36e2 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    36f6:	4798      	blx	r3
				rc = rc2;
    36f8:	2d00      	cmp	r5, #0
    36fa:	bf08      	it	eq
    36fc:	4605      	moveq	r5, r0
    36fe:	e7f0      	b.n	36e2 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3700:	b936      	cbnz	r6, 3710 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    3702:	68e3      	ldr	r3, [r4, #12]
    3704:	b963      	cbnz	r3, 3720 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3706:	f114 0f14 	cmn.w	r4, #20
    370a:	d0e5      	beq.n	36d8 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    370c:	6964      	ldr	r4, [r4, #20]
    370e:	e7e0      	b.n	36d2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3710:	6820      	ldr	r0, [r4, #0]
    3712:	2200      	movs	r2, #0
    3714:	4631      	mov	r1, r6
    3716:	f020 fa7a 	bl	23c0e <settings_name_steq>
    371a:	2800      	cmp	r0, #0
    371c:	d1f1      	bne.n	3702 <settings_commit_subtree+0x42>
    371e:	e7f2      	b.n	3706 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    3720:	4798      	blx	r3
				rc = rc2;
    3722:	2d00      	cmp	r5, #0
    3724:	bf08      	it	eq
    3726:	4605      	moveq	r5, r0
    3728:	e7ed      	b.n	3706 <settings_commit_subtree+0x46>
    372a:	bf00      	nop
    372c:	0002bf44 	.word	0x0002bf44
    3730:	0002bfa8 	.word	0x0002bfa8
    3734:	20001620 	.word	0x20001620

00003738 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    3738:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    373a:	4c06      	ldr	r4, [pc, #24]	; (3754 <settings_subsys_init+0x1c>)
    373c:	7823      	ldrb	r3, [r4, #0]
    373e:	b93b      	cbnz	r3, 3750 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    3740:	f7ff ff6c 	bl	361c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    3744:	f020 faac 	bl	23ca0 <settings_backend_init>

	if (!err) {
    3748:	b908      	cbnz	r0, 374e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    374a:	2301      	movs	r3, #1
    374c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    374e:	bd10      	pop	{r4, pc}
		return 0;
    3750:	2000      	movs	r0, #0
    3752:	e7fc      	b.n	374e <settings_subsys_init+0x16>
    3754:	20008151 	.word	0x20008151

00003758 <settings_runtime_set>:
	memcpy(data, arg->data, MIN(arg->len, len));
	return MIN(arg->len, len);
}

int settings_runtime_set(const char *name, const void *data, size_t len)
{
    3758:	b530      	push	{r4, r5, lr}
    375a:	b085      	sub	sp, #20
    375c:	460d      	mov	r5, r1
	struct settings_handler_static *ch;
	const char *name_key;
	struct read_cb_arg arg;

	ch = settings_parse_and_lookup(name, &name_key);
    375e:	a901      	add	r1, sp, #4
{
    3760:	4614      	mov	r4, r2
	ch = settings_parse_and_lookup(name, &name_key);
    3762:	f7ff ff63 	bl	362c <settings_parse_and_lookup>
	if (!ch) {
    3766:	b148      	cbz	r0, 377c <settings_runtime_set+0x24>
		return -EINVAL;
	}

	arg.data = data;
	arg.len = len;
    3768:	e9cd 5402 	strd	r5, r4, [sp, #8]
	return ch->h_set(name_key, len, settings_runtime_read_cb, (void *)&arg);
    376c:	4a05      	ldr	r2, [pc, #20]	; (3784 <settings_runtime_set+0x2c>)
    376e:	6885      	ldr	r5, [r0, #8]
    3770:	9801      	ldr	r0, [sp, #4]
    3772:	ab02      	add	r3, sp, #8
    3774:	4621      	mov	r1, r4
    3776:	47a8      	blx	r5
}
    3778:	b005      	add	sp, #20
    377a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    377c:	f06f 0015 	mvn.w	r0, #21
    3780:	e7fa      	b.n	3778 <settings_runtime_set+0x20>
    3782:	bf00      	nop
    3784:	00023c81 	.word	0x00023c81

00003788 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    378a:	4605      	mov	r5, r0
	__asm__ volatile(
    378c:	f04f 0320 	mov.w	r3, #32
    3790:	f3ef 8611 	mrs	r6, BASEPRI
    3794:	f383 8811 	msr	BASEPRI, r3
    3798:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    379c:	4b0b      	ldr	r3, [pc, #44]	; (37cc <pm_state_notify+0x44>)
    379e:	681c      	ldr	r4, [r3, #0]
    37a0:	2c00      	cmp	r4, #0
    37a2:	bf38      	it	cc
    37a4:	2400      	movcc	r4, #0
    37a6:	b15c      	cbz	r4, 37c0 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    37a8:	4f09      	ldr	r7, [pc, #36]	; (37d0 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    37aa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    37ae:	2d00      	cmp	r5, #0
    37b0:	bf08      	it	eq
    37b2:	4613      	moveq	r3, r2
		if (callback) {
    37b4:	b10b      	cbz	r3, 37ba <pm_state_notify+0x32>
			callback(z_power_state.state);
    37b6:	7838      	ldrb	r0, [r7, #0]
    37b8:	4798      	blx	r3
    37ba:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    37bc:	2c00      	cmp	r4, #0
    37be:	d1f4      	bne.n	37aa <pm_state_notify+0x22>
	__asm__ volatile(
    37c0:	f386 8811 	msr	BASEPRI, r6
    37c4:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    37c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37ca:	bf00      	nop
    37cc:	20001628 	.word	0x20001628
    37d0:	20001630 	.word	0x20001630

000037d4 <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
    37d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
    37d8:	4f18      	ldr	r7, [pc, #96]	; (383c <pm_system_suspend+0x68>)
    37da:	4c19      	ldr	r4, [pc, #100]	; (3840 <pm_system_suspend+0x6c>)
    37dc:	783b      	ldrb	r3, [r7, #0]
{
    37de:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
    37e0:	b93b      	cbnz	r3, 37f2 <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
    37e2:	466d      	mov	r5, sp
    37e4:	4628      	mov	r0, r5
    37e6:	f020 fa5d 	bl	23ca4 <pm_policy_next_state>
    37ea:	e895 0003 	ldmia.w	r5, {r0, r1}
    37ee:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    37f2:	7825      	ldrb	r5, [r4, #0]
    37f4:	b1f5      	cbz	r5, 3834 <pm_system_suspend+0x60>
	post_ops_done = 0;
    37f6:	4e13      	ldr	r6, [pc, #76]	; (3844 <pm_system_suspend+0x70>)
    37f8:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
    37fc:	2001      	movs	r0, #1
	if (deep_sleep) {
    37fe:	3d04      	subs	r5, #4
	post_ops_done = 0;
    3800:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
    3804:	f7ff ffc0 	bl	3788 <pm_state_notify>
	if (deep_sleep) {
    3808:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    380a:	bf98      	it	ls
    380c:	4b0e      	ldrls	r3, [pc, #56]	; (3848 <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
    380e:	e894 0003 	ldmia.w	r4, {r0, r1}
    3812:	bf98      	it	ls
    3814:	f883 8000 	strbls.w	r8, [r3]
    3818:	f020 ff31 	bl	2467e <pm_power_state_set>
	if (!post_ops_done) {
    381c:	6830      	ldr	r0, [r6, #0]
    381e:	b940      	cbnz	r0, 3832 <pm_system_suspend+0x5e>
		post_ops_done = 1;
    3820:	2301      	movs	r3, #1
		z_forced_power_state = false;
    3822:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
    3824:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
    3826:	f7ff ffaf 	bl	3788 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    382a:	e894 0003 	ldmia.w	r4, {r0, r1}
    382e:	f020 ff39 	bl	246a4 <pm_power_state_exit_post_ops>
	return z_power_state.state;
    3832:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
    3834:	4628      	mov	r0, r5
    3836:	b002      	add	sp, #8
    3838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    383c:	20008152 	.word	0x20008152
    3840:	20001630 	.word	0x20001630
    3844:	20000334 	.word	0x20000334
    3848:	2000875a 	.word	0x2000875a

0000384c <pm_system_resume>:

void pm_system_resume(void)
{
    384c:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    384e:	4b06      	ldr	r3, [pc, #24]	; (3868 <pm_system_resume+0x1c>)
    3850:	6818      	ldr	r0, [r3, #0]
    3852:	b940      	cbnz	r0, 3866 <pm_system_resume+0x1a>
		post_ops_done = 1;
    3854:	2201      	movs	r2, #1
    3856:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
    3858:	f7ff ff96 	bl	3788 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    385c:	4b03      	ldr	r3, [pc, #12]	; (386c <pm_system_resume+0x20>)
    385e:	e893 0003 	ldmia.w	r3, {r0, r1}
    3862:	f020 ff1f 	bl	246a4 <pm_power_state_exit_post_ops>
	}
}
    3866:	bd08      	pop	{r3, pc}
    3868:	20000334 	.word	0x20000334
    386c:	20001630 	.word	0x20001630

00003870 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3870:	b570      	push	{r4, r5, r6, lr}
    3872:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    3874:	480d      	ldr	r0, [pc, #52]	; (38ac <onoff_stop+0x3c>)
    3876:	1a23      	subs	r3, r4, r0
    3878:	109a      	asrs	r2, r3, #2
    387a:	4b0d      	ldr	r3, [pc, #52]	; (38b0 <onoff_stop+0x40>)
    387c:	4353      	muls	r3, r2
    387e:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    3880:	250c      	movs	r5, #12
    3882:	435d      	muls	r5, r3
    3884:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    3888:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    388a:	4418      	add	r0, r3
    388c:	2140      	movs	r1, #64	; 0x40
    388e:	f020 fa16 	bl	23cbe <set_off_state>
	if (err < 0) {
    3892:	1e01      	subs	r1, r0, #0
    3894:	db04      	blt.n	38a0 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    3896:	4b07      	ldr	r3, [pc, #28]	; (38b4 <onoff_stop+0x44>)
    3898:	442b      	add	r3, r5
    389a:	685b      	ldr	r3, [r3, #4]
    389c:	4798      	blx	r3
	return 0;
    389e:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    38a0:	4620      	mov	r0, r4
    38a2:	4633      	mov	r3, r6
}
    38a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    38a8:	4718      	bx	r3
    38aa:	bf00      	nop
    38ac:	20001648 	.word	0x20001648
    38b0:	b6db6db7 	.word	0xb6db6db7
    38b4:	0002c204 	.word	0x0002c204

000038b8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    38b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    38bc:	4c0f      	ldr	r4, [pc, #60]	; (38fc <onoff_start+0x44>)
    38be:	4d10      	ldr	r5, [pc, #64]	; (3900 <onoff_start+0x48>)
    38c0:	1b03      	subs	r3, r0, r4
    38c2:	109b      	asrs	r3, r3, #2
    38c4:	435d      	muls	r5, r3
    38c6:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    38c8:	250c      	movs	r5, #12
    38ca:	435d      	muls	r5, r3
{
    38cc:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    38ce:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    38d2:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    38d4:	4420      	add	r0, r4
    38d6:	2140      	movs	r1, #64	; 0x40
    38d8:	f020 fa0a 	bl	23cf0 <set_starting_state>
	if (err < 0) {
    38dc:	1e01      	subs	r1, r0, #0
    38de:	db08      	blt.n	38f2 <onoff_start+0x3a>
	subdata->cb = cb;
    38e0:	4b08      	ldr	r3, [pc, #32]	; (3904 <onoff_start+0x4c>)
    38e2:	442c      	add	r4, r5
	subdata->user_data = user_data;
    38e4:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    38e8:	4b07      	ldr	r3, [pc, #28]	; (3908 <onoff_start+0x50>)
    38ea:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    38ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    38f0:	4718      	bx	r3
		notify(mgr, err);
    38f2:	4638      	mov	r0, r7
    38f4:	4633      	mov	r3, r6
}
    38f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    38fa:	4718      	bx	r3
    38fc:	20001648 	.word	0x20001648
    3900:	b6db6db7 	.word	0xb6db6db7
    3904:	00023d53 	.word	0x00023d53
    3908:	0002c204 	.word	0x0002c204

0000390c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    390c:	2200      	movs	r2, #0
{
    390e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3910:	2101      	movs	r1, #1
{
    3912:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3914:	4610      	mov	r0, r2
    3916:	f000 fdd1 	bl	44bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    391a:	2000      	movs	r0, #0
    391c:	f000 fd9c 	bl	4458 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3920:	480f      	ldr	r0, [pc, #60]	; (3960 <clk_init+0x54>)
    3922:	f015 fd9f 	bl	19464 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3926:	4b0f      	ldr	r3, [pc, #60]	; (3964 <clk_init+0x58>)
    3928:	4298      	cmp	r0, r3
    392a:	d115      	bne.n	3958 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    392c:	f022 fbc0 	bl	260b0 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    3930:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3932:	490d      	ldr	r1, [pc, #52]	; (3968 <clk_init+0x5c>)
    3934:	4630      	mov	r0, r6
    3936:	f01f facf 	bl	22ed8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    393a:	2800      	cmp	r0, #0
    393c:	db0b      	blt.n	3956 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    393e:	2501      	movs	r5, #1
    3940:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    3942:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3944:	4908      	ldr	r1, [pc, #32]	; (3968 <clk_init+0x5c>)
    3946:	f104 001c 	add.w	r0, r4, #28
    394a:	f01f fac5 	bl	22ed8 <onoff_manager_init>
		if (err < 0) {
    394e:	2800      	cmp	r0, #0
    3950:	db01      	blt.n	3956 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3952:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3954:	2000      	movs	r0, #0
}
    3956:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3958:	f06f 0004 	mvn.w	r0, #4
    395c:	e7fb      	b.n	3956 <clk_init+0x4a>
    395e:	bf00      	nop
    3960:	000039a1 	.word	0x000039a1
    3964:	0bad0000 	.word	0x0bad0000
    3968:	0002c21c 	.word	0x0002c21c

0000396c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    396c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    396e:	230c      	movs	r3, #12
    3970:	4809      	ldr	r0, [pc, #36]	; (3998 <clkstarted_handle.constprop.0+0x2c>)
    3972:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3974:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3976:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3978:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    397c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    397e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3980:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3982:	4418      	add	r0, r3
    3984:	f020 f9d2 	bl	23d2c <set_on_state>
	if (callback) {
    3988:	b12d      	cbz	r5, 3996 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    398a:	4632      	mov	r2, r6
    398c:	462b      	mov	r3, r5
    398e:	4803      	ldr	r0, [pc, #12]	; (399c <clkstarted_handle.constprop.0+0x30>)
}
    3990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3994:	4718      	bx	r3
}
    3996:	bd70      	pop	{r4, r5, r6, pc}
    3998:	20001648 	.word	0x20001648
    399c:	20000aac 	.word	0x20000aac

000039a0 <clock_event_handler>:
	switch (event) {
    39a0:	b110      	cbz	r0, 39a8 <clock_event_handler+0x8>
    39a2:	2801      	cmp	r0, #1
    39a4:	d004      	beq.n	39b0 <clock_event_handler+0x10>
    39a6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    39a8:	4b03      	ldr	r3, [pc, #12]	; (39b8 <clock_event_handler+0x18>)
    39aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    39ac:	075b      	lsls	r3, r3, #29
    39ae:	d101      	bne.n	39b4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    39b0:	f7ff bfdc 	b.w	396c <clkstarted_handle.constprop.0>
}
    39b4:	4770      	bx	lr
    39b6:	bf00      	nop
    39b8:	20001648 	.word	0x20001648

000039bc <generic_hfclk_start>:
{
    39bc:	b508      	push	{r3, lr}
	__asm__ volatile(
    39be:	f04f 0320 	mov.w	r3, #32
    39c2:	f3ef 8111 	mrs	r1, BASEPRI
    39c6:	f383 8811 	msr	BASEPRI, r3
    39ca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    39ce:	4a12      	ldr	r2, [pc, #72]	; (3a18 <generic_hfclk_start+0x5c>)
    39d0:	6813      	ldr	r3, [r2, #0]
    39d2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    39d6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    39da:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    39dc:	d00c      	beq.n	39f8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    39de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    39e2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    39e6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    39ea:	f013 0301 	ands.w	r3, r3, #1
    39ee:	d003      	beq.n	39f8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    39f0:	480a      	ldr	r0, [pc, #40]	; (3a1c <generic_hfclk_start+0x60>)
    39f2:	f020 f99b 	bl	23d2c <set_on_state>
			already_started = true;
    39f6:	2301      	movs	r3, #1
	__asm__ volatile(
    39f8:	f381 8811 	msr	BASEPRI, r1
    39fc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3a00:	b123      	cbz	r3, 3a0c <generic_hfclk_start+0x50>
}
    3a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3a06:	2000      	movs	r0, #0
    3a08:	f7ff bfb0 	b.w	396c <clkstarted_handle.constprop.0>
}
    3a0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3a10:	2001      	movs	r0, #1
    3a12:	f015 bd37 	b.w	19484 <nrfx_clock_start>
    3a16:	bf00      	nop
    3a18:	20001698 	.word	0x20001698
    3a1c:	20001688 	.word	0x20001688

00003a20 <lfclk_start>:
{
    3a20:	b510      	push	{r4, lr}
	if (!once) {
    3a22:	4c07      	ldr	r4, [pc, #28]	; (3a40 <lfclk_start+0x20>)
    3a24:	7823      	ldrb	r3, [r4, #0]
    3a26:	b92b      	cbnz	r3, 3a34 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    3a28:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    3a2c:	f027 fc16 	bl	2b25c <z_impl_k_busy_wait>
		once = true;
    3a30:	2301      	movs	r3, #1
    3a32:	7023      	strb	r3, [r4, #0]
}
    3a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    3a38:	2000      	movs	r0, #0
    3a3a:	f015 bd23 	b.w	19484 <nrfx_clock_start>
    3a3e:	bf00      	nop
    3a40:	20008153 	.word	0x20008153

00003a44 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a44:	4b09      	ldr	r3, [pc, #36]	; (3a6c <generic_hfclk_stop+0x28>)
    3a46:	f3bf 8f5b 	dmb	ish
    3a4a:	e853 2f00 	ldrex	r2, [r3]
    3a4e:	f022 0102 	bic.w	r1, r2, #2
    3a52:	e843 1000 	strex	r0, r1, [r3]
    3a56:	2800      	cmp	r0, #0
    3a58:	d1f7      	bne.n	3a4a <generic_hfclk_stop+0x6>
    3a5a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3a5e:	07d3      	lsls	r3, r2, #31
    3a60:	d402      	bmi.n	3a68 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3a62:	2001      	movs	r0, #1
    3a64:	f015 bd5a 	b.w	1951c <nrfx_clock_stop>
}
    3a68:	4770      	bx	lr
    3a6a:	bf00      	nop
    3a6c:	20001698 	.word	0x20001698

00003a70 <api_blocking_start>:
{
    3a70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3a72:	2200      	movs	r2, #0
    3a74:	2301      	movs	r3, #1
    3a76:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3a7a:	ab04      	add	r3, sp, #16
    3a7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3a80:	4a09      	ldr	r2, [pc, #36]	; (3aa8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3a82:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3a86:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3a88:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3a8c:	f020 f984 	bl	23d98 <api_start>
	if (err < 0) {
    3a90:	2800      	cmp	r0, #0
    3a92:	db05      	blt.n	3aa0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3a94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3a98:	2300      	movs	r3, #0
    3a9a:	4668      	mov	r0, sp
    3a9c:	f01c fb44 	bl	20128 <z_impl_k_sem_take>
}
    3aa0:	b007      	add	sp, #28
    3aa2:	f85d fb04 	ldr.w	pc, [sp], #4
    3aa6:	bf00      	nop
    3aa8:	00023d6b 	.word	0x00023d6b

00003aac <z_nrf_clock_control_get_onoff>:
}
    3aac:	4a02      	ldr	r2, [pc, #8]	; (3ab8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3aae:	b2c3      	uxtb	r3, r0
}
    3ab0:	201c      	movs	r0, #28
    3ab2:	fb03 2000 	mla	r0, r3, r0, r2
    3ab6:	4770      	bx	lr
    3ab8:	20001648 	.word	0x20001648

00003abc <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3abc:	4b09      	ldr	r3, [pc, #36]	; (3ae4 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    3abe:	f3bf 8f5b 	dmb	ish
    3ac2:	e853 2f00 	ldrex	r2, [r3]
    3ac6:	f042 0101 	orr.w	r1, r2, #1
    3aca:	e843 1000 	strex	r0, r1, [r3]
    3ace:	2800      	cmp	r0, #0
    3ad0:	d1f7      	bne.n	3ac2 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    3ad2:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    3ad6:	0793      	lsls	r3, r2, #30
    3ad8:	d402      	bmi.n	3ae0 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3ada:	2001      	movs	r0, #1
    3adc:	f015 bcd2 	b.w	19484 <nrfx_clock_start>
}
    3ae0:	4770      	bx	lr
    3ae2:	bf00      	nop
    3ae4:	20001698 	.word	0x20001698

00003ae8 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ae8:	4b09      	ldr	r3, [pc, #36]	; (3b10 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    3aea:	f3bf 8f5b 	dmb	ish
    3aee:	e853 2f00 	ldrex	r2, [r3]
    3af2:	f022 0101 	bic.w	r1, r2, #1
    3af6:	e843 1000 	strex	r0, r1, [r3]
    3afa:	2800      	cmp	r0, #0
    3afc:	d1f7      	bne.n	3aee <z_nrf_clock_bt_ctlr_hf_release+0x6>
    3afe:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    3b02:	0793      	lsls	r3, r2, #30
    3b04:	d402      	bmi.n	3b0c <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3b06:	2001      	movs	r0, #1
    3b08:	f015 bd08 	b.w	1951c <nrfx_clock_stop>
}
    3b0c:	4770      	bx	lr
    3b0e:	bf00      	nop
    3b10:	20001698 	.word	0x20001698

00003b14 <z_nrf_clock_control_lf_on>:
{
    3b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3b18:	493a      	ldr	r1, [pc, #232]	; (3c04 <z_nrf_clock_control_lf_on+0xf0>)
    3b1a:	f3bf 8f5b 	dmb	ish
    3b1e:	4606      	mov	r6, r0
    3b20:	2201      	movs	r2, #1
    3b22:	e851 3f00 	ldrex	r3, [r1]
    3b26:	e841 2000 	strex	r0, r2, [r1]
    3b2a:	2800      	cmp	r0, #0
    3b2c:	d1f9      	bne.n	3b22 <z_nrf_clock_control_lf_on+0xe>
    3b2e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3b32:	b933      	cbnz	r3, 3b42 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3b34:	4934      	ldr	r1, [pc, #208]	; (3c08 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    3b36:	4835      	ldr	r0, [pc, #212]	; (3c0c <z_nrf_clock_control_lf_on+0xf8>)
    3b38:	604b      	str	r3, [r1, #4]
    3b3a:	60cb      	str	r3, [r1, #12]
    3b3c:	608a      	str	r2, [r1, #8]
    3b3e:	f01f f9de 	bl	22efe <onoff_request>
	switch (start_mode) {
    3b42:	1e73      	subs	r3, r6, #1
    3b44:	2b01      	cmp	r3, #1
    3b46:	d832      	bhi.n	3bae <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3b48:	2e01      	cmp	r6, #1
    3b4a:	d107      	bne.n	3b5c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3b4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b50:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3b54:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3b58:	2b01      	cmp	r3, #1
    3b5a:	d028      	beq.n	3bae <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3b5c:	f027 fb78 	bl	2b250 <k_is_in_isr>
    3b60:	4604      	mov	r4, r0
    3b62:	b918      	cbnz	r0, 3b6c <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    3b64:	4b2a      	ldr	r3, [pc, #168]	; (3c10 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    3b66:	781b      	ldrb	r3, [r3, #0]
    3b68:	2b00      	cmp	r3, #0
    3b6a:	d144      	bne.n	3bf6 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    3b6c:	f04f 0320 	mov.w	r3, #32
    3b70:	f3ef 8511 	mrs	r5, BASEPRI
    3b74:	f383 8811 	msr	BASEPRI, r3
    3b78:	f3bf 8f6f 	isb	sy
    3b7c:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b7e:	4f25      	ldr	r7, [pc, #148]	; (3c14 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b80:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3c18 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b84:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3c1c <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3b88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b8c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3b90:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3b94:	03d2      	lsls	r2, r2, #15
    3b96:	d50c      	bpl.n	3bb2 <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3b98:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3b9c:	2b01      	cmp	r3, #1
    3b9e:	d001      	beq.n	3ba4 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3ba0:	2e01      	cmp	r6, #1
    3ba2:	d106      	bne.n	3bb2 <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    3ba4:	b30c      	cbz	r4, 3bea <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    3ba6:	f385 8811 	msr	BASEPRI, r5
    3baa:	f3bf 8f6f 	isb	sy
}
    3bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    3bb2:	b1ac      	cbz	r4, 3be0 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3bb4:	4628      	mov	r0, r5
    3bb6:	f000 fcef 	bl	4598 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3bbe:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3bc2:	2b00      	cmp	r3, #0
    3bc4:	d1e0      	bne.n	3b88 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3bc6:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3bc8:	2900      	cmp	r1, #0
    3bca:	d0dd      	beq.n	3b88 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bcc:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3bce:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3bd0:	2301      	movs	r3, #1
    3bd2:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3bd6:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bda:	f8c9 3000 	str.w	r3, [r9]
}
    3bde:	e7d3      	b.n	3b88 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    3be0:	2100      	movs	r1, #0
    3be2:	2021      	movs	r0, #33	; 0x21
    3be4:	f01c fa52 	bl	2008c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3be8:	e7e7      	b.n	3bba <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    3bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3bee:	2202      	movs	r2, #2
    3bf0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3bf4:	e7db      	b.n	3bae <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    3bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3bfa:	2202      	movs	r2, #2
    3bfc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3c00:	4605      	mov	r5, r0
}
    3c02:	e7bc      	b.n	3b7e <z_nrf_clock_control_lf_on+0x6a>
    3c04:	2000169c 	.word	0x2000169c
    3c08:	20001638 	.word	0x20001638
    3c0c:	20001664 	.word	0x20001664
    3c10:	2000875b 	.word	0x2000875b
    3c14:	40000104 	.word	0x40000104
    3c18:	e000e100 	.word	0xe000e100
    3c1c:	40000008 	.word	0x40000008

00003c20 <st7789v_set_orientation>:
	return -ENOTSUP;
}

static int st7789v_set_orientation(const struct device *dev,
			    const enum display_orientation orientation)
{
    3c20:	b508      	push	{r3, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
    3c22:	4608      	mov	r0, r1
    3c24:	b159      	cbz	r1, 3c3e <st7789v_set_orientation+0x1e>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3c26:	4b06      	ldr	r3, [pc, #24]	; (3c40 <st7789v_set_orientation+0x20>)
    3c28:	4906      	ldr	r1, [pc, #24]	; (3c44 <st7789v_set_orientation+0x24>)
		return 0;
	}
	LOG_ERR("Changing display orientation not implemented");
    3c2a:	4807      	ldr	r0, [pc, #28]	; (3c48 <st7789v_set_orientation+0x28>)
    3c2c:	1ac9      	subs	r1, r1, r3
    3c2e:	08c9      	lsrs	r1, r1, #3
    3c30:	0189      	lsls	r1, r1, #6
    3c32:	f041 0101 	orr.w	r1, r1, #1
    3c36:	f01f fcfb 	bl	23630 <log_0>
	return -ENOTSUP;
    3c3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3c3e:	bd08      	pop	{r3, pc}
    3c40:	0002bfa8 	.word	0x0002bfa8
    3c44:	0002c0a0 	.word	0x0002c0a0
    3c48:	0002e14c 	.word	0x0002e14c

00003c4c <st7789v_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3c4c:	2910      	cmp	r1, #16
{
    3c4e:	b508      	push	{r3, lr}
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3c50:	d00c      	beq.n	3c6c <st7789v_set_pixel_format+0x20>
    3c52:	4b07      	ldr	r3, [pc, #28]	; (3c70 <st7789v_set_pixel_format+0x24>)
    3c54:	4907      	ldr	r1, [pc, #28]	; (3c74 <st7789v_set_pixel_format+0x28>)
	LOG_ERR("Pixel format change not implemented");
    3c56:	4808      	ldr	r0, [pc, #32]	; (3c78 <st7789v_set_pixel_format+0x2c>)
    3c58:	1ac9      	subs	r1, r1, r3
    3c5a:	08c9      	lsrs	r1, r1, #3
    3c5c:	0189      	lsls	r1, r1, #6
    3c5e:	f041 0101 	orr.w	r1, r1, #1
    3c62:	f01f fce5 	bl	23630 <log_0>
	return -ENOTSUP;
    3c66:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3c6a:	bd08      	pop	{r3, pc}
		return 0;
    3c6c:	2000      	movs	r0, #0
    3c6e:	e7fc      	b.n	3c6a <st7789v_set_pixel_format+0x1e>
    3c70:	0002bfa8 	.word	0x0002bfa8
    3c74:	0002c0a0 	.word	0x0002c0a0
    3c78:	0002e179 	.word	0x0002e179

00003c7c <st7789v_init>:
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
			 sizeof(st7789v_rgb_param));
}

static int st7789v_init(const struct device *dev)
{
    3c7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->data;
    3c7e:	68c4      	ldr	r4, [r0, #12]
{
    3c80:	4606      	mov	r6, r0
    3c82:	4892      	ldr	r0, [pc, #584]	; (3ecc <st7789v_init+0x250>)
    3c84:	f01b fb76 	bl	1f374 <z_impl_device_get_binding>

	data->spi_dev = device_get_binding(DT_INST_BUS_LABEL(0));
    3c88:	6020      	str	r0, [r4, #0]
	if (data->spi_dev == NULL) {
    3c8a:	b970      	cbnz	r0, 3caa <st7789v_init+0x2e>
    3c8c:	4990      	ldr	r1, [pc, #576]	; (3ed0 <st7789v_init+0x254>)
    3c8e:	4b91      	ldr	r3, [pc, #580]	; (3ed4 <st7789v_init+0x258>)
		LOG_ERR("Could not get SPI device for LCD");
    3c90:	4891      	ldr	r0, [pc, #580]	; (3ed8 <st7789v_init+0x25c>)
    3c92:	1ac9      	subs	r1, r1, r3
    3c94:	08c9      	lsrs	r1, r1, #3
    3c96:	0189      	lsls	r1, r1, #6
    3c98:	f041 0101 	orr.w	r1, r1, #1
#endif

	data->cmd_data_gpio = device_get_binding(
			DT_INST_GPIO_LABEL(0, cmd_data_gpios));
	if (data->cmd_data_gpio == NULL) {
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    3c9c:	f01f fcc8 	bl	23630 <log_0>
		return -EPERM;
    3ca0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	st7789v_lcd_init(data);

	st7789v_exit_sleep(data);

	return 0;
}
    3ca4:	4628      	mov	r0, r5
    3ca6:	b002      	add	sp, #8
    3ca8:	bd70      	pop	{r4, r5, r6, pc}
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
    3caa:	4a8c      	ldr	r2, [pc, #560]	; (3edc <st7789v_init+0x260>)
    3cac:	4b8c      	ldr	r3, [pc, #560]	; (3ee0 <st7789v_init+0x264>)
    3cae:	e9c4 2301 	strd	r2, r3, [r4, #4]
    3cb2:	488c      	ldr	r0, [pc, #560]	; (3ee4 <st7789v_init+0x268>)
    3cb4:	f01b fb5e 	bl	1f374 <z_impl_device_get_binding>
	data->cs_ctrl.delay = 0U;
    3cb8:	2300      	movs	r3, #0
    3cba:	6163      	str	r3, [r4, #20]
	data->cs_ctrl.gpio_pin = DT_INST_SPI_DEV_CS_GPIOS_PIN(0);
    3cbc:	f240 1319 	movw	r3, #281	; 0x119
    3cc0:	8323      	strh	r3, [r4, #24]
	data->spi_config.cs = &(data->cs_ctrl);
    3cc2:	f104 0310 	add.w	r3, r4, #16
	data->cs_ctrl.gpio_dev = device_get_binding(
    3cc6:	6120      	str	r0, [r4, #16]
	data->spi_config.cs = &(data->cs_ctrl);
    3cc8:	60e3      	str	r3, [r4, #12]
    3cca:	4886      	ldr	r0, [pc, #536]	; (3ee4 <st7789v_init+0x268>)
    3ccc:	f01b fb52 	bl	1f374 <z_impl_device_get_binding>
	data->reset_gpio = device_get_binding(
    3cd0:	61e0      	str	r0, [r4, #28]
	if (data->reset_gpio == NULL) {
    3cd2:	b940      	cbnz	r0, 3ce6 <st7789v_init+0x6a>
    3cd4:	497e      	ldr	r1, [pc, #504]	; (3ed0 <st7789v_init+0x254>)
    3cd6:	4b7f      	ldr	r3, [pc, #508]	; (3ed4 <st7789v_init+0x258>)
		LOG_ERR("Could not get GPIO port for display reset");
    3cd8:	4883      	ldr	r0, [pc, #524]	; (3ee8 <st7789v_init+0x26c>)
    3cda:	1ac9      	subs	r1, r1, r3
    3cdc:	08c9      	lsrs	r1, r1, #3
    3cde:	0189      	lsls	r1, r1, #6
    3ce0:	f041 0101 	orr.w	r1, r1, #1
    3ce4:	e7da      	b.n	3c9c <st7789v_init+0x20>
	if (gpio_pin_configure(data->reset_gpio, ST7789V_RESET_PIN,
    3ce6:	f241 6201 	movw	r2, #5633	; 0x1601
    3cea:	211a      	movs	r1, #26
    3cec:	f020 f86e 	bl	23dcc <gpio_pin_configure>
    3cf0:	b160      	cbz	r0, 3d0c <st7789v_init+0x90>
    3cf2:	4977      	ldr	r1, [pc, #476]	; (3ed0 <st7789v_init+0x254>)
    3cf4:	4b77      	ldr	r3, [pc, #476]	; (3ed4 <st7789v_init+0x258>)
		LOG_ERR("Couldn't configure reset pin");
    3cf6:	487d      	ldr	r0, [pc, #500]	; (3eec <st7789v_init+0x270>)
    3cf8:	1ac9      	subs	r1, r1, r3
    3cfa:	08c9      	lsrs	r1, r1, #3
    3cfc:	0189      	lsls	r1, r1, #6
    3cfe:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Couldn't configure cmd/DATA pin");
    3d02:	f01f fc95 	bl	23630 <log_0>
		return -EIO;
    3d06:	f06f 0504 	mvn.w	r5, #4
    3d0a:	e7cb      	b.n	3ca4 <st7789v_init+0x28>
    3d0c:	4875      	ldr	r0, [pc, #468]	; (3ee4 <st7789v_init+0x268>)
    3d0e:	f01b fb31 	bl	1f374 <z_impl_device_get_binding>
	data->cmd_data_gpio = device_get_binding(
    3d12:	6220      	str	r0, [r4, #32]
	if (data->cmd_data_gpio == NULL) {
    3d14:	b940      	cbnz	r0, 3d28 <st7789v_init+0xac>
    3d16:	496e      	ldr	r1, [pc, #440]	; (3ed0 <st7789v_init+0x254>)
    3d18:	4b6e      	ldr	r3, [pc, #440]	; (3ed4 <st7789v_init+0x258>)
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    3d1a:	4875      	ldr	r0, [pc, #468]	; (3ef0 <st7789v_init+0x274>)
    3d1c:	1ac9      	subs	r1, r1, r3
    3d1e:	08c9      	lsrs	r1, r1, #3
    3d20:	0189      	lsls	r1, r1, #6
    3d22:	f041 0101 	orr.w	r1, r1, #1
    3d26:	e7b9      	b.n	3c9c <st7789v_init+0x20>
	if (gpio_pin_configure(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN,
    3d28:	f240 2201 	movw	r2, #513	; 0x201
    3d2c:	2112      	movs	r1, #18
    3d2e:	f020 f84d 	bl	23dcc <gpio_pin_configure>
    3d32:	4605      	mov	r5, r0
    3d34:	b140      	cbz	r0, 3d48 <st7789v_init+0xcc>
    3d36:	4966      	ldr	r1, [pc, #408]	; (3ed0 <st7789v_init+0x254>)
    3d38:	4b66      	ldr	r3, [pc, #408]	; (3ed4 <st7789v_init+0x258>)
		LOG_ERR("Couldn't configure cmd/DATA pin");
    3d3a:	486e      	ldr	r0, [pc, #440]	; (3ef4 <st7789v_init+0x278>)
    3d3c:	1ac9      	subs	r1, r1, r3
    3d3e:	08c9      	lsrs	r1, r1, #3
    3d40:	0189      	lsls	r1, r1, #6
    3d42:	f041 0101 	orr.w	r1, r1, #1
    3d46:	e7dc      	b.n	3d02 <st7789v_init+0x86>
    3d48:	2100      	movs	r1, #0
    3d4a:	2021      	movs	r0, #33	; 0x21
    3d4c:	f01c f99e 	bl	2008c <z_impl_k_sleep>
	gpio_pin_set(data->reset_gpio, ST7789V_RESET_PIN, 1);
    3d50:	69e0      	ldr	r0, [r4, #28]
    3d52:	2201      	movs	r2, #1
    3d54:	211a      	movs	r1, #26
    3d56:	f020 f856 	bl	23e06 <gpio_pin_set>
    3d5a:	2100      	movs	r1, #0
    3d5c:	20c5      	movs	r0, #197	; 0xc5
    3d5e:	f01c f995 	bl	2008c <z_impl_k_sleep>
	gpio_pin_set(data->reset_gpio, ST7789V_RESET_PIN, 0);
    3d62:	69e0      	ldr	r0, [r4, #28]
    3d64:	462a      	mov	r2, r5
    3d66:	211a      	movs	r1, #26
    3d68:	f020 f84d 	bl	23e06 <gpio_pin_set>
    3d6c:	2100      	movs	r1, #0
    3d6e:	f44f 7024 	mov.w	r0, #656	; 0x290
    3d72:	f01c f98b 	bl	2008c <z_impl_k_sleep>
	st7789v_blanking_on(dev);
    3d76:	4630      	mov	r0, r6
    3d78:	f020 f8a0 	bl	23ebc <st7789v_blanking_on>
	st7789v_transmit(p_st7789v, ST7789V_CMD_CMD2EN, st7789v_cmd2en_param,
    3d7c:	4620      	mov	r0, r4
    3d7e:	4a5e      	ldr	r2, [pc, #376]	; (3ef8 <st7789v_init+0x27c>)
    3d80:	2304      	movs	r3, #4
    3d82:	21df      	movs	r1, #223	; 0xdf
    3d84:	f020 f86a 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
    3d88:	4620      	mov	r0, r4
    3d8a:	4a5c      	ldr	r2, [pc, #368]	; (3efc <st7789v_init+0x280>)
    3d8c:	2305      	movs	r3, #5
    3d8e:	21b2      	movs	r1, #178	; 0xb2
    3d90:	f020 f864 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    3d94:	f10d 0207 	add.w	r2, sp, #7
    3d98:	4620      	mov	r0, r4
    3d9a:	2301      	movs	r3, #1
    3d9c:	21ba      	movs	r1, #186	; 0xba
	tmp = 0x00;
    3d9e:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    3da2:	f020 f85b 	bl	23e5c <st7789v_transmit>
	tmp = 0x0f;
    3da6:	230f      	movs	r3, #15
    3da8:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_FRCTRL2, &tmp, 1);
    3dac:	f10d 0207 	add.w	r2, sp, #7
    3db0:	4620      	mov	r0, r4
    3db2:	2301      	movs	r3, #1
    3db4:	21c6      	movs	r1, #198	; 0xc6
    3db6:	f020 f851 	bl	23e5c <st7789v_transmit>
	tmp = DT_INST_PROP(0, gctrl);
    3dba:	2335      	movs	r3, #53	; 0x35
    3dbc:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GCTRL, &tmp, 1);
    3dc0:	f10d 0207 	add.w	r2, sp, #7
    3dc4:	4620      	mov	r0, r4
    3dc6:	2301      	movs	r3, #1
    3dc8:	21b7      	movs	r1, #183	; 0xb7
    3dca:	f020 f847 	bl	23e5c <st7789v_transmit>
	tmp = DT_INST_PROP(0, vcom);
    3dce:	2319      	movs	r3, #25
	tmp = 0x01;
    3dd0:	2601      	movs	r6, #1
	tmp = DT_INST_PROP(0, vcom);
    3dd2:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
    3dd6:	f10d 0207 	add.w	r2, sp, #7
    3dda:	4620      	mov	r0, r4
    3ddc:	2301      	movs	r3, #1
    3dde:	21bb      	movs	r1, #187	; 0xbb
    3de0:	f020 f83c 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    3de4:	4633      	mov	r3, r6
    3de6:	f10d 0207 	add.w	r2, sp, #7
    3dea:	4620      	mov	r0, r4
    3dec:	21c2      	movs	r1, #194	; 0xc2
	tmp = 0x01;
    3dee:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    3df2:	f020 f833 	bl	23e5c <st7789v_transmit>
	tmp = DT_INST_PROP(0, vrhs);
    3df6:	2312      	movs	r3, #18
    3df8:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VRH, &tmp, 1);
    3dfc:	f10d 0207 	add.w	r2, sp, #7
    3e00:	4633      	mov	r3, r6
    3e02:	4620      	mov	r0, r4
    3e04:	21c3      	movs	r1, #195	; 0xc3
    3e06:	f020 f829 	bl	23e5c <st7789v_transmit>
	tmp = DT_INST_PROP(0, vdvs);
    3e0a:	2320      	movs	r3, #32
    3e0c:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDS, &tmp, 1);
    3e10:	f10d 0207 	add.w	r2, sp, #7
    3e14:	4633      	mov	r3, r6
    3e16:	4620      	mov	r0, r4
    3e18:	21c4      	movs	r1, #196	; 0xc4
    3e1a:	f020 f81f 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PWCTRL1, st7789v_pwctrl1_param,
    3e1e:	4620      	mov	r0, r4
    3e20:	4a37      	ldr	r2, [pc, #220]	; (3f00 <st7789v_init+0x284>)
    3e22:	2302      	movs	r3, #2
    3e24:	21d0      	movs	r1, #208	; 0xd0
    3e26:	f020 f819 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    3e2a:	4633      	mov	r3, r6
    3e2c:	f10d 0207 	add.w	r2, sp, #7
    3e30:	4620      	mov	r0, r4
    3e32:	2136      	movs	r1, #54	; 0x36
	tmp = DT_INST_PROP(0, mdac);
    3e34:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    3e38:	f020 f810 	bl	23e5c <st7789v_transmit>
	tmp = DT_INST_PROP(0, colmod);
    3e3c:	2305      	movs	r3, #5
    3e3e:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_COLMOD, &tmp, 1);
    3e42:	f10d 0207 	add.w	r2, sp, #7
    3e46:	4633      	mov	r3, r6
    3e48:	4620      	mov	r0, r4
    3e4a:	213a      	movs	r1, #58	; 0x3a
    3e4c:	f020 f806 	bl	23e5c <st7789v_transmit>
	tmp = DT_INST_PROP(0, lcm);
    3e50:	232c      	movs	r3, #44	; 0x2c
    3e52:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_LCMCTRL, &tmp, 1);
    3e56:	f10d 0207 	add.w	r2, sp, #7
    3e5a:	4633      	mov	r3, r6
    3e5c:	4620      	mov	r0, r4
    3e5e:	21c0      	movs	r1, #192	; 0xc0
    3e60:	f01f fffc 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    3e64:	4633      	mov	r3, r6
    3e66:	f10d 0207 	add.w	r2, sp, #7
    3e6a:	4620      	mov	r0, r4
    3e6c:	2126      	movs	r1, #38	; 0x26
	tmp = DT_INST_PROP(0, gamma);
    3e6e:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    3e72:	f01f fff3 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_INV_ON, NULL, 0);
    3e76:	462b      	mov	r3, r5
    3e78:	462a      	mov	r2, r5
    3e7a:	4620      	mov	r0, r4
    3e7c:	2121      	movs	r1, #33	; 0x21
    3e7e:	f01f ffed 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PVGAMCTRL, st7789v_pvgam_param,
    3e82:	4620      	mov	r0, r4
    3e84:	4a1f      	ldr	r2, [pc, #124]	; (3f04 <st7789v_init+0x288>)
    3e86:	230e      	movs	r3, #14
    3e88:	21e0      	movs	r1, #224	; 0xe0
    3e8a:	f01f ffe7 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_NVGAMCTRL, st7789v_nvgam_param,
    3e8e:	4620      	mov	r0, r4
    3e90:	4a1d      	ldr	r2, [pc, #116]	; (3f08 <st7789v_init+0x28c>)
    3e92:	230e      	movs	r3, #14
    3e94:	21e1      	movs	r1, #225	; 0xe1
    3e96:	f01f ffe1 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RAMCTRL, st7789v_ram_param,
    3e9a:	4620      	mov	r0, r4
    3e9c:	4a1b      	ldr	r2, [pc, #108]	; (3f0c <st7789v_init+0x290>)
    3e9e:	2302      	movs	r3, #2
    3ea0:	21b0      	movs	r1, #176	; 0xb0
    3ea2:	f01f ffdb 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
    3ea6:	4620      	mov	r0, r4
    3ea8:	4a19      	ldr	r2, [pc, #100]	; (3f10 <st7789v_init+0x294>)
    3eaa:	2303      	movs	r3, #3
    3eac:	21b1      	movs	r1, #177	; 0xb1
    3eae:	f01f ffd5 	bl	23e5c <st7789v_transmit>
	st7789v_transmit(data, ST7789V_CMD_SLEEP_OUT, NULL, 0);
    3eb2:	462b      	mov	r3, r5
    3eb4:	462a      	mov	r2, r5
    3eb6:	2111      	movs	r1, #17
    3eb8:	4620      	mov	r0, r4
    3eba:	f01f ffcf 	bl	23e5c <st7789v_transmit>
    3ebe:	2100      	movs	r1, #0
    3ec0:	f640 705d 	movw	r0, #3933	; 0xf5d
    3ec4:	f01c f8e2 	bl	2008c <z_impl_k_sleep>
}
    3ec8:	e6ec      	b.n	3ca4 <st7789v_init+0x28>
    3eca:	bf00      	nop
    3ecc:	0002e19d 	.word	0x0002e19d
    3ed0:	0002c0a0 	.word	0x0002c0a0
    3ed4:	0002bfa8 	.word	0x0002bfa8
    3ed8:	0002e1a3 	.word	0x0002e1a3
    3edc:	007a1200 	.word	0x007a1200
    3ee0:	00010100 	.word	0x00010100
    3ee4:	0002df08 	.word	0x0002df08
    3ee8:	0002e1c4 	.word	0x0002e1c4
    3eec:	0002e1ee 	.word	0x0002e1ee
    3ef0:	0002e20b 	.word	0x0002e20b
    3ef4:	0002e235 	.word	0x0002e235
    3ef8:	20000a7d 	.word	0x20000a7d
    3efc:	20000a8f 	.word	0x20000a8f
    3f00:	20000aa2 	.word	0x20000aa2
    3f04:	20000a94 	.word	0x20000a94
    3f08:	20000a81 	.word	0x20000a81
    3f0c:	20000aa4 	.word	0x20000aa4
    3f10:	20000aa6 	.word	0x20000aa6

00003f14 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    3f14:	4a04      	ldr	r2, [pc, #16]	; (3f28 <sys_clock_timeout_handler+0x14>)
    3f16:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3f18:	1ac8      	subs	r0, r1, r3
    3f1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3f1e:	4403      	add	r3, r0
    3f20:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3f22:	f01c bb71 	b.w	20608 <z_clock_announce>
    3f26:	bf00      	nop
    3f28:	200016ac 	.word	0x200016ac

00003f2c <set_absolute_alarm>:
{
    3f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f30:	0086      	lsls	r6, r0, #2
    3f32:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3f36:	f100 0450 	add.w	r4, r0, #80	; 0x50
    3f3a:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    3f3e:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3f40:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3fc0 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    3f44:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f48:	b2a4      	uxth	r4, r4
    3f4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f4e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3f52:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    3f56:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f5a:	4087      	lsls	r7, r0
    3f5c:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    3f5e:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3f62:	eba3 030a 	sub.w	r3, r3, sl
    3f66:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3f6a:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3f6e:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    3f70:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    3f74:	d102      	bne.n	3f7c <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    3f76:	2013      	movs	r0, #19
    3f78:	f027 f970 	bl	2b25c <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3f7c:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    3f80:	1aab      	subs	r3, r5, r2
    3f82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    3f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3f8a:	bf88      	it	hi
    3f8c:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f8e:	2300      	movs	r3, #0
    3f90:	6023      	str	r3, [r4, #0]
    3f92:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3f94:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3f98:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3f9c:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    3fa0:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3fa4:	459a      	cmp	sl, r3
    3fa6:	d006      	beq.n	3fb6 <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    3fa8:	1aeb      	subs	r3, r5, r3
    3faa:	3b02      	subs	r3, #2
    3fac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3fb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3fb4:	d801      	bhi.n	3fba <set_absolute_alarm+0x8e>
}
    3fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    3fba:	462b      	mov	r3, r5
    3fbc:	e7cf      	b.n	3f5e <set_absolute_alarm+0x32>
    3fbe:	bf00      	nop
    3fc0:	40011000 	.word	0x40011000

00003fc4 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    3fc6:	4e10      	ldr	r6, [pc, #64]	; (4008 <CONFIG_HEAP_MEM_POOL_SIZE+0x8>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fc8:	4f10      	ldr	r7, [pc, #64]	; (400c <CONFIG_HEAP_MEM_POOL_SIZE+0xc>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3fca:	2500      	movs	r5, #0
    3fcc:	4b10      	ldr	r3, [pc, #64]	; (4010 <CONFIG_HEAP_MEM_POOL_SIZE+0x10>)
    3fce:	2000      	movs	r0, #0
    3fd0:	681c      	ldr	r4, [r3, #0]
    3fd2:	461a      	mov	r2, r3
    3fd4:	b105      	cbz	r5, 3fd8 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    3fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    3fd8:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    3fdc:	03c9      	lsls	r1, r1, #15
    3fde:	d5fa      	bpl.n	3fd6 <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3fe0:	6839      	ldr	r1, [r7, #0]
    3fe2:	2900      	cmp	r1, #0
    3fe4:	d0f7      	beq.n	3fd6 <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3fe6:	603d      	str	r5, [r7, #0]
    3fe8:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3fea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3fee:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    3ff2:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3ff6:	2501      	movs	r5, #1
			if (handler) {
    3ff8:	b11c      	cbz	r4, 4002 <CONFIG_HEAP_MEM_POOL_SIZE+0x2>
				handler(chan, cc_val,
    3ffa:	685a      	ldr	r2, [r3, #4]
    3ffc:	6018      	str	r0, [r3, #0]
    3ffe:	47a0      	blx	r4
    4000:	e7e4      	b.n	3fcc <rtc_nrf_isr+0x8>
    4002:	6014      	str	r4, [r2, #0]
}
    4004:	e7e7      	b.n	3fd6 <rtc_nrf_isr+0x12>
    4006:	bf00      	nop
    4008:	40011000 	.word	0x40011000
    400c:	40011140 	.word	0x40011140
    4010:	200016a0 	.word	0x200016a0

00004014 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    4014:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    4016:	4d10      	ldr	r5, [pc, #64]	; (4058 <z_clock_driver_init+0x44>)
    4018:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    401a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    401e:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    4022:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    4026:	4b0d      	ldr	r3, [pc, #52]	; (405c <z_clock_driver_init+0x48>)
    4028:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    402c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4030:	2101      	movs	r1, #1
    4032:	4622      	mov	r2, r4
    4034:	2011      	movs	r0, #17
    4036:	f000 fa41 	bl	44bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    403a:	2011      	movs	r0, #17
    403c:	f000 fa0c 	bl	4458 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4040:	4a07      	ldr	r2, [pc, #28]	; (4060 <z_clock_driver_init+0x4c>)
    4042:	2301      	movs	r3, #1
    4044:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    4046:	4a07      	ldr	r2, [pc, #28]	; (4064 <z_clock_driver_init+0x50>)
    4048:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    404a:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    404c:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    404e:	f7ff fd61 	bl	3b14 <z_nrf_clock_control_lf_on>

	return 0;
}
    4052:	4620      	mov	r0, r4
    4054:	bd38      	pop	{r3, r4, r5, pc}
    4056:	bf00      	nop
    4058:	40011000 	.word	0x40011000
    405c:	e000e100 	.word	0xe000e100
    4060:	40011008 	.word	0x40011008
    4064:	200016a8 	.word	0x200016a8

00004068 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4068:	4b13      	ldr	r3, [pc, #76]	; (40b8 <z_clock_set_timeout+0x50>)
    406a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    406e:	bf08      	it	eq
    4070:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4072:	3801      	subs	r0, #1
    4074:	2800      	cmp	r0, #0
    4076:	dd1c      	ble.n	40b2 <z_clock_set_timeout+0x4a>
    4078:	4298      	cmp	r0, r3
    407a:	bfa8      	it	ge
    407c:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    407e:	4b0f      	ldr	r3, [pc, #60]	; (40bc <z_clock_set_timeout+0x54>)
    4080:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    4084:	4b0e      	ldr	r3, [pc, #56]	; (40c0 <z_clock_set_timeout+0x58>)
    4086:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    4088:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    408a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    408e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    4092:	bf18      	it	ne
    4094:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    4096:	4a0b      	ldr	r2, [pc, #44]	; (40c4 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4098:	3301      	adds	r3, #1
    409a:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    409c:	480a      	ldr	r0, [pc, #40]	; (40c8 <z_clock_set_timeout+0x60>)
    409e:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    40a0:	2000      	movs	r0, #0
    40a2:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    40a4:	4a04      	ldr	r2, [pc, #16]	; (40b8 <z_clock_set_timeout+0x50>)
    40a6:	4293      	cmp	r3, r2
    40a8:	bf94      	ite	ls
    40aa:	18c9      	addls	r1, r1, r3
    40ac:	1889      	addhi	r1, r1, r2
    40ae:	f7ff bf3d 	b.w	3f2c <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    40b2:	2000      	movs	r0, #0
    40b4:	e7e3      	b.n	407e <z_clock_set_timeout+0x16>
    40b6:	bf00      	nop
    40b8:	007fffff 	.word	0x007fffff
    40bc:	40011000 	.word	0x40011000
    40c0:	200016ac 	.word	0x200016ac
    40c4:	200016a0 	.word	0x200016a0
    40c8:	00003f15 	.word	0x00003f15

000040cc <z_clock_elapsed>:
	__asm__ volatile(
    40cc:	f04f 0220 	mov.w	r2, #32
    40d0:	f3ef 8311 	mrs	r3, BASEPRI
    40d4:	f382 8811 	msr	BASEPRI, r2
    40d8:	f3bf 8f6f 	isb	sy
    40dc:	4a06      	ldr	r2, [pc, #24]	; (40f8 <z_clock_elapsed+0x2c>)
    40de:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    40e2:	4a06      	ldr	r2, [pc, #24]	; (40fc <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    40e4:	6812      	ldr	r2, [r2, #0]
    40e6:	1a80      	subs	r0, r0, r2
    40e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    40ec:	f383 8811 	msr	BASEPRI, r3
    40f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop
    40f8:	40011000 	.word	0x40011000
    40fc:	200016ac 	.word	0x200016ac

00004100 <z_timer_cycle_get_32>:
	__asm__ volatile(
    4100:	f04f 0320 	mov.w	r3, #32
    4104:	f3ef 8211 	mrs	r2, BASEPRI
    4108:	f383 8811 	msr	BASEPRI, r3
    410c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    4110:	4906      	ldr	r1, [pc, #24]	; (412c <z_timer_cycle_get_32+0x2c>)
    4112:	4b07      	ldr	r3, [pc, #28]	; (4130 <z_timer_cycle_get_32+0x30>)
    4114:	6808      	ldr	r0, [r1, #0]
    4116:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    411a:	f382 8811 	msr	BASEPRI, r2
    411e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    4122:	1a1b      	subs	r3, r3, r0
    4124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    4128:	4418      	add	r0, r3
    412a:	4770      	bx	lr
    412c:	200016ac 	.word	0x200016ac
    4130:	40011000 	.word	0x40011000

00004134 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    4134:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4136:	4c11      	ldr	r4, [pc, #68]	; (417c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4138:	4a11      	ldr	r2, [pc, #68]	; (4180 <_DoInit+0x4c>)
    413a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    413c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    413e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4142:	4b10      	ldr	r3, [pc, #64]	; (4184 <_DoInit+0x50>)
    4144:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    4146:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    4148:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    414c:	4a0e      	ldr	r2, [pc, #56]	; (4188 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    414e:	490f      	ldr	r1, [pc, #60]	; (418c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    4150:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    4152:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    4154:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    4156:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    4158:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    415a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    415c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    415e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    4160:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4162:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4164:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    4166:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    4168:	f027 fb4e 	bl	2b808 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    416c:	4908      	ldr	r1, [pc, #32]	; (4190 <_DoInit+0x5c>)
    416e:	4620      	mov	r0, r4
    4170:	f027 fb4a 	bl	2b808 <strcpy>
  p->acID[6] = ' ';
    4174:	2320      	movs	r3, #32
    4176:	71a3      	strb	r3, [r4, #6]
}
    4178:	bd10      	pop	{r4, pc}
    417a:	bf00      	nop
    417c:	200016b0 	.word	0x200016b0
    4180:	0002e26f 	.word	0x0002e26f
    4184:	20008164 	.word	0x20008164
    4188:	20008154 	.word	0x20008154
    418c:	0002e278 	.word	0x0002e278
    4190:	0002e27c 	.word	0x0002e27c

00004194 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    4198:	4f23      	ldr	r7, [pc, #140]	; (4228 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    419a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    419e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    41a0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    41a4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    41a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    41a8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    41aa:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    41ac:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    41ae:	d834      	bhi.n	421a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    41b0:	f8d2 a020 	ldr.w	sl, [r2, #32]
    41b4:	ebaa 0905 	sub.w	r9, sl, r5
    41b8:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    41bc:	4294      	cmp	r4, r2
    41be:	d811      	bhi.n	41e4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    41c0:	f04f 0918 	mov.w	r9, #24
    41c4:	fb06 9309 	mla	r3, r6, r9, r9
    41c8:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    41ca:	4622      	mov	r2, r4
    41cc:	6858      	ldr	r0, [r3, #4]
    41ce:	4641      	mov	r1, r8
    41d0:	4428      	add	r0, r5
    41d2:	f027 faee 	bl	2b7b2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    41d6:	fb09 7606 	mla	r6, r9, r6, r7
    41da:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    41dc:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    41de:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    41e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    41e4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    41e6:	429c      	cmp	r4, r3
    41e8:	d81b      	bhi.n	4222 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    41ea:	fb00 bb0b 	mla	fp, r0, fp, fp
    41ee:	44bb      	add	fp, r7
    41f0:	464a      	mov	r2, r9
    41f2:	f8db 0004 	ldr.w	r0, [fp, #4]
    41f6:	442c      	add	r4, r5
    41f8:	4428      	add	r0, r5
    41fa:	f027 fada 	bl	2b7b2 <memcpy>
      if (NumBytes) {
    41fe:	ebb4 040a 	subs.w	r4, r4, sl
    4202:	d006      	beq.n	4212 <SEGGER_RTT_WriteSkipNoLock+0x7e>
    4204:	f8db 0004 	ldr.w	r0, [fp, #4]
    4208:	4622      	mov	r2, r4
    420a:	eb08 0109 	add.w	r1, r8, r9
    420e:	f027 fad0 	bl	2b7b2 <memcpy>
      pRing->WrOff = NumBytes;
    4212:	2018      	movs	r0, #24
    4214:	fb00 7606 	mla	r6, r0, r6, r7
    4218:	e7e0      	b.n	41dc <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    421a:	3b01      	subs	r3, #1
    421c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    421e:	42a3      	cmp	r3, r4
    4220:	d2ce      	bcs.n	41c0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4222:	2000      	movs	r0, #0
    4224:	e7dc      	b.n	41e0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    4226:	bf00      	nop
    4228:	200016b0 	.word	0x200016b0

0000422c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    422c:	4b03      	ldr	r3, [pc, #12]	; (423c <SEGGER_RTT_HasDataUp+0x10>)
    422e:	2218      	movs	r2, #24
    4230:	fb02 3300 	mla	r3, r2, r0, r3
    4234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    4236:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4238:	1a80      	subs	r0, r0, r2
    423a:	4770      	bx	lr
    423c:	200016b0 	.word	0x200016b0

00004240 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    4240:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    4242:	4e26      	ldr	r6, [pc, #152]	; (42dc <tc_aes128_set_encrypt_key+0x9c>)
{
    4244:	4607      	mov	r7, r0
    4246:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    4248:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    424a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    424c:	ad01      	add	r5, sp, #4
    424e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4250:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    4252:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4254:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    4258:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    425c:	4638      	mov	r0, r7
    425e:	2f00      	cmp	r7, #0
    4260:	d038      	beq.n	42d4 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    4262:	2c00      	cmp	r4, #0
    4264:	d038      	beq.n	42d8 <tc_aes128_set_encrypt_key+0x98>
    4266:	1f38      	subs	r0, r7, #4
    4268:	4621      	mov	r1, r4
    426a:	4602      	mov	r2, r0
    426c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    426e:	784b      	ldrb	r3, [r1, #1]
    4270:	780d      	ldrb	r5, [r1, #0]
    4272:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    4274:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    4278:	78cd      	ldrb	r5, [r1, #3]
    427a:	432b      	orrs	r3, r5
    427c:	788d      	ldrb	r5, [r1, #2]
    427e:	3104      	adds	r1, #4
    4280:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    4284:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    4286:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    428a:	d1f0      	bne.n	426e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    428c:	4c14      	ldr	r4, [pc, #80]	; (42e0 <tc_aes128_set_encrypt_key+0xa0>)
    428e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    4290:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    4292:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    4294:	d116      	bne.n	42c4 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4296:	f3c3 4207 	ubfx	r2, r3, #16, #8
    429a:	5ca5      	ldrb	r5, [r4, r2]
    429c:	0e1a      	lsrs	r2, r3, #24
    429e:	5ca2      	ldrb	r2, [r4, r2]
    42a0:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    42a4:	f3c3 2507 	ubfx	r5, r3, #8, #8
    42a8:	b2db      	uxtb	r3, r3
    42aa:	5d65      	ldrb	r5, [r4, r5]
    42ac:	5ce3      	ldrb	r3, [r4, r3]
    42ae:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    42b2:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    42b6:	ad0c      	add	r5, sp, #48	; 0x30
    42b8:	f021 0303 	bic.w	r3, r1, #3
    42bc:	442b      	add	r3, r5
    42be:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    42c2:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    42c4:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    42c8:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    42ca:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    42cc:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    42ce:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    42d0:	d1de      	bne.n	4290 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    42d2:	2001      	movs	r0, #1
}
    42d4:	b00d      	add	sp, #52	; 0x34
    42d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    42d8:	4620      	mov	r0, r4
    42da:	e7fb      	b.n	42d4 <tc_aes128_set_encrypt_key+0x94>
    42dc:	0002c110 	.word	0x0002c110
    42e0:	0002e283 	.word	0x0002e283

000042e4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    42e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    42e8:	4615      	mov	r5, r2
    42ea:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    42ec:	4606      	mov	r6, r0
    42ee:	2800      	cmp	r0, #0
    42f0:	d058      	beq.n	43a4 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    42f2:	2900      	cmp	r1, #0
    42f4:	d059      	beq.n	43aa <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    42f6:	2a00      	cmp	r2, #0
    42f8:	d059      	beq.n	43ae <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    42fa:	2310      	movs	r3, #16
    42fc:	460a      	mov	r2, r1
    42fe:	4668      	mov	r0, sp
    4300:	4619      	mov	r1, r3
    4302:	f01f fe5d 	bl	23fc0 <_copy>
	add_round_key(state, s->words);
    4306:	4629      	mov	r1, r5
    4308:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    430a:	4c2a      	ldr	r4, [pc, #168]	; (43b4 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    430c:	f01f fe70 	bl	23ff0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    4310:	f105 0710 	add.w	r7, r5, #16
    4314:	46a1      	mov	r9, r4
    4316:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    4318:	46e8      	mov	r8, sp
{
    431a:	466a      	mov	r2, sp
    431c:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    431e:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    4320:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    4322:	5c61      	ldrb	r1, [r4, r1]
    4324:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    4328:	d1f9      	bne.n	431e <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    432a:	4668      	mov	r0, sp
    432c:	f01f fea5 	bl	2407a <shift_rows>
	mult_row_column(t, s);
    4330:	4669      	mov	r1, sp
    4332:	a804      	add	r0, sp, #16
    4334:	f01f feda 	bl	240ec <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    4338:	a901      	add	r1, sp, #4
    433a:	a805      	add	r0, sp, #20
    433c:	f01f fed6 	bl	240ec <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    4340:	a902      	add	r1, sp, #8
    4342:	a806      	add	r0, sp, #24
    4344:	f01f fed2 	bl	240ec <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    4348:	a903      	add	r1, sp, #12
    434a:	a807      	add	r0, sp, #28
    434c:	f01f fece 	bl	240ec <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    4350:	2310      	movs	r3, #16
    4352:	4619      	mov	r1, r3
    4354:	eb0d 0203 	add.w	r2, sp, r3
    4358:	4668      	mov	r0, sp
    435a:	f01f fe31 	bl	23fc0 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    435e:	4639      	mov	r1, r7
    4360:	4668      	mov	r0, sp
    4362:	3710      	adds	r7, #16
    4364:	f01f fe44 	bl	23ff0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    4368:	42af      	cmp	r7, r5
    436a:	d1d5      	bne.n	4318 <tc_aes_encrypt+0x34>
    436c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    436e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    4372:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    4374:	f819 3003 	ldrb.w	r3, [r9, r3]
    4378:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    437c:	d1f7      	bne.n	436e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    437e:	4668      	mov	r0, sp
    4380:	f01f fe7b 	bl	2407a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    4384:	4629      	mov	r1, r5
    4386:	4668      	mov	r0, sp
    4388:	f01f fe32 	bl	23ff0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    438c:	2310      	movs	r3, #16
    438e:	4619      	mov	r1, r3
    4390:	466a      	mov	r2, sp
    4392:	4630      	mov	r0, r6
    4394:	f01f fe14 	bl	23fc0 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    4398:	4668      	mov	r0, sp
    439a:	2210      	movs	r2, #16
    439c:	4621      	mov	r1, r4
    439e:	f01f fe1c 	bl	23fda <_set>

	return TC_CRYPTO_SUCCESS;
    43a2:	2001      	movs	r0, #1
}
    43a4:	b009      	add	sp, #36	; 0x24
    43a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    43aa:	4608      	mov	r0, r1
    43ac:	e7fa      	b.n	43a4 <tc_aes_encrypt+0xc0>
    43ae:	4610      	mov	r0, r2
    43b0:	e7f8      	b.n	43a4 <tc_aes_encrypt+0xc0>
    43b2:	bf00      	nop
    43b4:	0002e283 	.word	0x0002e283

000043b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    43b8:	4a0a      	ldr	r2, [pc, #40]	; (43e4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    43ba:	490b      	ldr	r1, [pc, #44]	; (43e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    43bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    43be:	6809      	ldr	r1, [r1, #0]
    43c0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    43c4:	4909      	ldr	r1, [pc, #36]	; (43ec <arch_swap+0x34>)
	_current->arch.basepri = key;
    43c6:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    43c8:	684b      	ldr	r3, [r1, #4]
    43ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    43ce:	604b      	str	r3, [r1, #4]
    43d0:	2300      	movs	r3, #0
    43d2:	f383 8811 	msr	BASEPRI, r3
    43d6:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    43da:	6893      	ldr	r3, [r2, #8]
}
    43dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    43e0:	4770      	bx	lr
    43e2:	bf00      	nop
    43e4:	20004068 	.word	0x20004068
    43e8:	0002d9b4 	.word	0x0002d9b4
    43ec:	e000ed00 	.word	0xe000ed00

000043f0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    43f0:	490f      	ldr	r1, [pc, #60]	; (4430 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    43f2:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    43f4:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    43f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    43fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    43fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4402:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4404:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4408:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    440c:	4f09      	ldr	r7, [pc, #36]	; (4434 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    440e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4412:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    4414:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4416:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4418:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    441a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    441c:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    441e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4422:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    4426:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    442a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    442e:	4770      	bx	lr
    ldr r1, =_kernel
    4430:	20004068 	.word	0x20004068
    ldr v4, =_SCS_ICSR
    4434:	e000ed04 	.word	0xe000ed04

00004438 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    4438:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    443c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    443e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4442:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4446:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4448:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    444c:	2902      	cmp	r1, #2
    beq _oops
    444e:	d0ff      	beq.n	4450 <_oops>

00004450 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4450:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    4452:	f01f ff8e 	bl	24372 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    4456:	bd01      	pop	{r0, pc}

00004458 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4458:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    445a:	2b00      	cmp	r3, #0
    445c:	db08      	blt.n	4470 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    445e:	2201      	movs	r2, #1
    4460:	f000 001f 	and.w	r0, r0, #31
    4464:	fa02 f000 	lsl.w	r0, r2, r0
    4468:	095b      	lsrs	r3, r3, #5
    446a:	4a02      	ldr	r2, [pc, #8]	; (4474 <arch_irq_enable+0x1c>)
    446c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4470:	4770      	bx	lr
    4472:	bf00      	nop
    4474:	e000e100 	.word	0xe000e100

00004478 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4478:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    447a:	2b00      	cmp	r3, #0
    447c:	db0d      	blt.n	449a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    447e:	2201      	movs	r2, #1
    4480:	095b      	lsrs	r3, r3, #5
    4482:	f000 001f 	and.w	r0, r0, #31
    4486:	fa02 f000 	lsl.w	r0, r2, r0
    448a:	3320      	adds	r3, #32
    448c:	4a03      	ldr	r2, [pc, #12]	; (449c <arch_irq_disable+0x24>)
    448e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4492:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4496:	f3bf 8f6f 	isb	sy
}
    449a:	4770      	bx	lr
    449c:	e000e100 	.word	0xe000e100

000044a0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    44a0:	4b05      	ldr	r3, [pc, #20]	; (44b8 <arch_irq_is_enabled+0x18>)
    44a2:	0942      	lsrs	r2, r0, #5
    44a4:	f000 001f 	and.w	r0, r0, #31
    44a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    44ac:	2301      	movs	r3, #1
    44ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    44b2:	4010      	ands	r0, r2
    44b4:	4770      	bx	lr
    44b6:	bf00      	nop
    44b8:	e000e100 	.word	0xe000e100

000044bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    44bc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    44be:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44c0:	bfa8      	it	ge
    44c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    44c6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44ca:	bfb8      	it	lt
    44cc:	4b06      	ldrlt	r3, [pc, #24]	; (44e8 <z_arm_irq_priority_set+0x2c>)
    44ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44d2:	bfac      	ite	ge
    44d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44d8:	f000 000f 	andlt.w	r0, r0, #15
    44dc:	b2c9      	uxtb	r1, r1
    44de:	bfb4      	ite	lt
    44e0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    44e2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    44e6:	4770      	bx	lr
    44e8:	e000ed14 	.word	0xe000ed14

000044ec <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    44ec:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    44ee:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    44f0:	4b04      	ldr	r3, [pc, #16]	; (4504 <_arch_isr_direct_pm+0x18>)
    44f2:	6a58      	ldr	r0, [r3, #36]	; 0x24
    44f4:	b118      	cbz	r0, 44fe <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    44f6:	2200      	movs	r2, #0
    44f8:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    44fa:	f01a ffd9 	bl	1f4b0 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    44fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    4500:	bd08      	pop	{r3, pc}
    4502:	bf00      	nop
    4504:	20004068 	.word	0x20004068

00004508 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4508:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    450c:	9b00      	ldr	r3, [sp, #0]
    450e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4512:	490a      	ldr	r1, [pc, #40]	; (453c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4514:	9b01      	ldr	r3, [sp, #4]
    4516:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    451a:	9b02      	ldr	r3, [sp, #8]
    451c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4520:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4528:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    452c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4530:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4532:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4534:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    4536:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4538:	4770      	bx	lr
    453a:	bf00      	nop
    453c:	00023003 	.word	0x00023003

00004540 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4540:	b508      	push	{r3, lr}
    4542:	4606      	mov	r6, r0
    4544:	460d      	mov	r5, r1
    4546:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    4548:	f000 fb1a 	bl	4b80 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    454c:	4b07      	ldr	r3, [pc, #28]	; (456c <arch_switch_to_main_thread+0x2c>)
    454e:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4550:	4620      	mov	r0, r4
    4552:	f385 8809 	msr	PSP, r5
    4556:	2100      	movs	r1, #0
    4558:	b663      	cpsie	if
    455a:	f381 8811 	msr	BASEPRI, r1
    455e:	f3bf 8f6f 	isb	sy
    4562:	2200      	movs	r2, #0
    4564:	2300      	movs	r3, #0
    4566:	f01e fd4c 	bl	23002 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    456a:	bf00      	nop
    456c:	20004068 	.word	0x20004068

00004570 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4570:	4901      	ldr	r1, [pc, #4]	; (4578 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    4572:	2210      	movs	r2, #16
	str	r2, [r1]
    4574:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    4576:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4578:	e000ed10 	.word	0xe000ed10

0000457c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    457c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    457e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4580:	f380 8811 	msr	BASEPRI, r0
	isb
    4584:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4588:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    458c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    458e:	b662      	cpsie	i
	isb
    4590:	f3bf 8f6f 	isb	sy

	bx	lr
    4594:	4770      	bx	lr
    4596:	bf00      	nop

00004598 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4598:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    459a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    459c:	f381 8811 	msr	BASEPRI, r1

	wfe
    45a0:	bf20      	wfe

	msr	BASEPRI, r0
    45a2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    45a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    45a8:	4770      	bx	lr
    45aa:	bf00      	nop

000045ac <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    45ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    45ae:	4606      	mov	r6, r0

	if (esf != NULL) {
    45b0:	460c      	mov	r4, r1
    45b2:	b301      	cbz	r1, 45f6 <z_arm_fatal_error+0x4a>
    45b4:	4b13      	ldr	r3, [pc, #76]	; (4604 <z_arm_fatal_error+0x58>)
    45b6:	4d14      	ldr	r5, [pc, #80]	; (4608 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    45b8:	4814      	ldr	r0, [pc, #80]	; (460c <z_arm_fatal_error+0x60>)
    45ba:	1aed      	subs	r5, r5, r3
    45bc:	08ed      	lsrs	r5, r5, #3
    45be:	01ad      	lsls	r5, r5, #6
    45c0:	f045 0501 	orr.w	r5, r5, #1
    45c4:	f8ad 5000 	strh.w	r5, [sp]
    45c8:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    45cc:	6809      	ldr	r1, [r1, #0]
    45ce:	f01f f869 	bl	236a4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    45d2:	f8ad 5000 	strh.w	r5, [sp]
    45d6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    45da:	68e1      	ldr	r1, [r4, #12]
    45dc:	480c      	ldr	r0, [pc, #48]	; (4610 <z_arm_fatal_error+0x64>)
    45de:	f01f f861 	bl	236a4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    45e2:	69e1      	ldr	r1, [r4, #28]
    45e4:	480b      	ldr	r0, [pc, #44]	; (4614 <z_arm_fatal_error+0x68>)
    45e6:	462a      	mov	r2, r5
    45e8:	f01f f82f 	bl	2364a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    45ec:	69a1      	ldr	r1, [r4, #24]
    45ee:	480a      	ldr	r0, [pc, #40]	; (4618 <z_arm_fatal_error+0x6c>)
    45f0:	462a      	mov	r2, r5
    45f2:	f01f f82a 	bl	2364a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    45f6:	4621      	mov	r1, r4
    45f8:	4630      	mov	r0, r6
}
    45fa:	b002      	add	sp, #8
    45fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    4600:	f01a bef8 	b.w	1f3f4 <z_fatal_error>
    4604:	0002bfa8 	.word	0x0002bfa8
    4608:	0002c0d8 	.word	0x0002c0d8
    460c:	0002e383 	.word	0x0002e383
    4610:	0002e3b2 	.word	0x0002e3b2
    4614:	0002e3e1 	.word	0x0002e3e1
    4618:	0002e3f0 	.word	0x0002e3f0

0000461c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    461c:	bf30      	wfi
    b z_SysNmiOnReset
    461e:	f7ff bffd 	b.w	461c <z_SysNmiOnReset>
    4622:	bf00      	nop

00004624 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4624:	4a0e      	ldr	r2, [pc, #56]	; (4660 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4626:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4628:	4b0e      	ldr	r3, [pc, #56]	; (4664 <z_arm_prep_c+0x40>)
    462a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    462e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4630:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4634:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    4638:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    463c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    4644:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    4648:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    464c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4650:	f01a ff78 	bl	1f544 <z_bss_zero>
	z_data_copy();
    4654:	f01b fede 	bl	20414 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4658:	f000 fa64 	bl	4b24 <z_arm_interrupt_init>
	z_cstart();
    465c:	f01a ff96 	bl	1f58c <z_cstart>
    4660:	00000000 	.word	0x00000000
    4664:	e000ed00 	.word	0xe000ed00

00004668 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4668:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    466a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    466c:	4a0b      	ldr	r2, [pc, #44]	; (469c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    466e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    4670:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4672:	bf1e      	ittt	ne
	movne	r1, #0
    4674:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4676:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    4678:	f01a ff1a 	blne	1f4b0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    467c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    467e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4682:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4686:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    468a:	4905      	ldr	r1, [pc, #20]	; (46a0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    468c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    468e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4690:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4692:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4696:	4903      	ldr	r1, [pc, #12]	; (46a4 <_isr_wrapper+0x3c>)
	bx r1
    4698:	4708      	bx	r1
    469a:	0000      	.short	0x0000
	ldr r2, =_kernel
    469c:	20004068 	.word	0x20004068
	ldr r1, =_sw_isr_table
    46a0:	0002bdd8 	.word	0x0002bdd8
	ldr r1, =z_arm_int_exit
    46a4:	00004b09 	.word	0x00004b09

000046a8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    46a8:	f01f ffe7 	bl	2467a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    46ac:	2020      	movs	r0, #32
    msr BASEPRI, r0
    46ae:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    46b2:	4808      	ldr	r0, [pc, #32]	; (46d4 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    46b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    46b8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    46ba:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    46be:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    46c2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    46c4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    46c6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    46ca:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    46ce:	f7ff ffa9 	bl	4624 <z_arm_prep_c>
    46d2:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    46d4:	2000a1c0 	.word	0x2000a1c0

000046d8 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    46d8:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    46dc:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    46e0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    46e2:	4672      	mov	r2, lr
	bl z_arm_fault
    46e4:	f000 f934 	bl	4950 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    46e8:	bd01      	pop	{r0, pc}
    46ea:	bf00      	nop

000046ec <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    46ec:	b570      	push	{r4, r5, r6, lr}
    46ee:	4b23      	ldr	r3, [pc, #140]	; (477c <usage_fault.isra.0+0x90>)
    46f0:	4c23      	ldr	r4, [pc, #140]	; (4780 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    46f2:	4d24      	ldr	r5, [pc, #144]	; (4784 <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    46f4:	4824      	ldr	r0, [pc, #144]	; (4788 <usage_fault.isra.0+0x9c>)
    46f6:	1ae4      	subs	r4, r4, r3
    46f8:	08e4      	lsrs	r4, r4, #3
    46fa:	01a4      	lsls	r4, r4, #6
    46fc:	f044 0601 	orr.w	r6, r4, #1
    4700:	4631      	mov	r1, r6
    4702:	f01e ff95 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4706:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4708:	0193      	lsls	r3, r2, #6
    470a:	d503      	bpl.n	4714 <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    470c:	481f      	ldr	r0, [pc, #124]	; (478c <usage_fault.isra.0+0xa0>)
    470e:	4631      	mov	r1, r6
    4710:	f01e ff8e 	bl	23630 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4714:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4716:	01dd      	lsls	r5, r3, #7
    4718:	d504      	bpl.n	4724 <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    471a:	481d      	ldr	r0, [pc, #116]	; (4790 <usage_fault.isra.0+0xa4>)
    471c:	f044 0101 	orr.w	r1, r4, #1
    4720:	f01e ff86 	bl	23630 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4724:	4d17      	ldr	r5, [pc, #92]	; (4784 <usage_fault.isra.0+0x98>)
    4726:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4728:	0310      	lsls	r0, r2, #12
    472a:	d504      	bpl.n	4736 <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    472c:	4819      	ldr	r0, [pc, #100]	; (4794 <usage_fault.isra.0+0xa8>)
    472e:	f044 0101 	orr.w	r1, r4, #1
    4732:	f01e ff7d 	bl	23630 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4736:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4738:	0359      	lsls	r1, r3, #13
    473a:	d504      	bpl.n	4746 <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    473c:	4816      	ldr	r0, [pc, #88]	; (4798 <usage_fault.isra.0+0xac>)
    473e:	f044 0101 	orr.w	r1, r4, #1
    4742:	f01e ff75 	bl	23630 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4746:	4d0f      	ldr	r5, [pc, #60]	; (4784 <usage_fault.isra.0+0x98>)
    4748:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    474a:	0392      	lsls	r2, r2, #14
    474c:	d504      	bpl.n	4758 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    474e:	4813      	ldr	r0, [pc, #76]	; (479c <usage_fault.isra.0+0xb0>)
    4750:	f044 0101 	orr.w	r1, r4, #1
    4754:	f01e ff6c 	bl	23630 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4758:	6aab      	ldr	r3, [r5, #40]	; 0x28
    475a:	03db      	lsls	r3, r3, #15
    475c:	d504      	bpl.n	4768 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    475e:	4810      	ldr	r0, [pc, #64]	; (47a0 <usage_fault.isra.0+0xb4>)
    4760:	f044 0101 	orr.w	r1, r4, #1
    4764:	f01e ff64 	bl	23630 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4768:	4a06      	ldr	r2, [pc, #24]	; (4784 <usage_fault.isra.0+0x98>)
    476a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    476c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4770:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4774:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4776:	2000      	movs	r0, #0
    4778:	bd70      	pop	{r4, r5, r6, pc}
    477a:	bf00      	nop
    477c:	0002bfa8 	.word	0x0002bfa8
    4780:	0002c0d8 	.word	0x0002c0d8
    4784:	e000ed00 	.word	0xe000ed00
    4788:	0002e41e 	.word	0x0002e41e
    478c:	0002e436 	.word	0x0002e436
    4790:	0002e449 	.word	0x0002e449
    4794:	0002e463 	.word	0x0002e463
    4798:	0002e481 	.word	0x0002e481
    479c:	0002e4a6 	.word	0x0002e4a6
    47a0:	0002e4c0 	.word	0x0002e4c0

000047a4 <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    47a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47a8:	4b28      	ldr	r3, [pc, #160]	; (484c <mem_manage_fault.isra.0+0xa8>)
    47aa:	4c29      	ldr	r4, [pc, #164]	; (4850 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    47ac:	4d29      	ldr	r5, [pc, #164]	; (4854 <mem_manage_fault.isra.0+0xb0>)
    47ae:	1ae4      	subs	r4, r4, r3
    47b0:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    47b2:	01a4      	lsls	r4, r4, #6
    47b4:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    47b8:	4607      	mov	r7, r0
    47ba:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    47bc:	4826      	ldr	r0, [pc, #152]	; (4858 <mem_manage_fault.isra.0+0xb4>)
    47be:	4641      	mov	r1, r8
    47c0:	f01e ff36 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    47c4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    47c6:	06d0      	lsls	r0, r2, #27
    47c8:	d503      	bpl.n	47d2 <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    47ca:	4824      	ldr	r0, [pc, #144]	; (485c <mem_manage_fault.isra.0+0xb8>)
    47cc:	4641      	mov	r1, r8
    47ce:	f01e ff2f 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    47d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47d4:	0719      	lsls	r1, r3, #28
    47d6:	d504      	bpl.n	47e2 <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    47d8:	4821      	ldr	r0, [pc, #132]	; (4860 <mem_manage_fault.isra.0+0xbc>)
    47da:	f044 0101 	orr.w	r1, r4, #1
    47de:	f01e ff27 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    47e2:	4d1c      	ldr	r5, [pc, #112]	; (4854 <mem_manage_fault.isra.0+0xb0>)
    47e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47e6:	079a      	lsls	r2, r3, #30
    47e8:	d512      	bpl.n	4810 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    47ea:	f044 0801 	orr.w	r8, r4, #1
    47ee:	4641      	mov	r1, r8
    47f0:	481c      	ldr	r0, [pc, #112]	; (4864 <mem_manage_fault.isra.0+0xc0>)
    47f2:	f01e ff1d 	bl	23630 <log_0>
		uint32_t temp = SCB->MMFAR;
    47f6:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    47f8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47fa:	061b      	lsls	r3, r3, #24
    47fc:	d508      	bpl.n	4810 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    47fe:	481a      	ldr	r0, [pc, #104]	; (4868 <mem_manage_fault.isra.0+0xc4>)
    4800:	4642      	mov	r2, r8
    4802:	f01e ff22 	bl	2364a <log_1>
			if (from_hard_fault) {
    4806:	b11f      	cbz	r7, 4810 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4808:	6aab      	ldr	r3, [r5, #40]	; 0x28
    480a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    480e:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4810:	4d10      	ldr	r5, [pc, #64]	; (4854 <mem_manage_fault.isra.0+0xb0>)
    4812:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4814:	07d0      	lsls	r0, r2, #31
    4816:	d504      	bpl.n	4822 <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    4818:	4814      	ldr	r0, [pc, #80]	; (486c <mem_manage_fault.isra.0+0xc8>)
    481a:	f044 0101 	orr.w	r1, r4, #1
    481e:	f01e ff07 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4822:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4824:	0699      	lsls	r1, r3, #26
    4826:	d504      	bpl.n	4832 <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    4828:	4811      	ldr	r0, [pc, #68]	; (4870 <mem_manage_fault.isra.0+0xcc>)
    482a:	f044 0101 	orr.w	r1, r4, #1
    482e:	f01e feff 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4832:	4b08      	ldr	r3, [pc, #32]	; (4854 <mem_manage_fault.isra.0+0xb0>)
    4834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4836:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4838:	bf58      	it	pl
    483a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    483c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    483e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4840:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    4844:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4846:	7030      	strb	r0, [r6, #0]
}
    4848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    484c:	0002bfa8 	.word	0x0002bfa8
    4850:	0002c0d8 	.word	0x0002c0d8
    4854:	e000ed00 	.word	0xe000ed00
    4858:	0002e4eb 	.word	0x0002e4eb
    485c:	0002e501 	.word	0x0002e501
    4860:	0002e534 	.word	0x0002e534
    4864:	0002e547 	.word	0x0002e547
    4868:	0002e55f 	.word	0x0002e55f
    486c:	0002e575 	.word	0x0002e575
    4870:	0002e594 	.word	0x0002e594

00004874 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4878:	4b2a      	ldr	r3, [pc, #168]	; (4924 <bus_fault.isra.0+0xb0>)
    487a:	4c2b      	ldr	r4, [pc, #172]	; (4928 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    487c:	4d2b      	ldr	r5, [pc, #172]	; (492c <bus_fault.isra.0+0xb8>)
    487e:	1ae4      	subs	r4, r4, r3
    4880:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    4882:	01a4      	lsls	r4, r4, #6
    4884:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4888:	4607      	mov	r7, r0
    488a:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    488c:	4828      	ldr	r0, [pc, #160]	; (4930 <bus_fault.isra.0+0xbc>)
    488e:	4641      	mov	r1, r8
    4890:	f01e fece 	bl	23630 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4894:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    4896:	04d1      	lsls	r1, r2, #19
    4898:	d503      	bpl.n	48a2 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    489a:	4826      	ldr	r0, [pc, #152]	; (4934 <bus_fault.isra.0+0xc0>)
    489c:	4641      	mov	r1, r8
    489e:	f01e fec7 	bl	23630 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    48a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48a4:	051a      	lsls	r2, r3, #20
    48a6:	d504      	bpl.n	48b2 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    48a8:	4823      	ldr	r0, [pc, #140]	; (4938 <bus_fault.isra.0+0xc4>)
    48aa:	f044 0101 	orr.w	r1, r4, #1
    48ae:	f01e febf 	bl	23630 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    48b2:	4d1e      	ldr	r5, [pc, #120]	; (492c <bus_fault.isra.0+0xb8>)
    48b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48b6:	059b      	lsls	r3, r3, #22
    48b8:	d512      	bpl.n	48e0 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    48ba:	f044 0801 	orr.w	r8, r4, #1
    48be:	481f      	ldr	r0, [pc, #124]	; (493c <bus_fault.isra.0+0xc8>)
    48c0:	4641      	mov	r1, r8
    48c2:	f01e feb5 	bl	23630 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    48c6:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    48c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48ca:	0418      	lsls	r0, r3, #16
    48cc:	d508      	bpl.n	48e0 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    48ce:	481c      	ldr	r0, [pc, #112]	; (4940 <bus_fault.isra.0+0xcc>)
    48d0:	4642      	mov	r2, r8
    48d2:	f01e feba 	bl	2364a <log_1>
			if (from_hard_fault) {
    48d6:	b11f      	cbz	r7, 48e0 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    48d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    48de:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    48e0:	4d12      	ldr	r5, [pc, #72]	; (492c <bus_fault.isra.0+0xb8>)
    48e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48e4:	0559      	lsls	r1, r3, #21
    48e6:	d504      	bpl.n	48f2 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    48e8:	4816      	ldr	r0, [pc, #88]	; (4944 <bus_fault.isra.0+0xd0>)
    48ea:	f044 0101 	orr.w	r1, r4, #1
    48ee:	f01e fe9f 	bl	23630 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    48f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48f4:	05da      	lsls	r2, r3, #23
    48f6:	d50d      	bpl.n	4914 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    48f8:	4813      	ldr	r0, [pc, #76]	; (4948 <bus_fault.isra.0+0xd4>)
    48fa:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    48fe:	f01e fe97 	bl	23630 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4902:	4a0a      	ldr	r2, [pc, #40]	; (492c <bus_fault.isra.0+0xb8>)
    4904:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    4906:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4908:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    490c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    490e:	7030      	strb	r0, [r6, #0]
}
    4910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4914:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4916:	049b      	lsls	r3, r3, #18
    4918:	d5f3      	bpl.n	4902 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    491a:	480c      	ldr	r0, [pc, #48]	; (494c <bus_fault.isra.0+0xd8>)
    491c:	f044 0101 	orr.w	r1, r4, #1
    4920:	e7ed      	b.n	48fe <bus_fault.isra.0+0x8a>
    4922:	bf00      	nop
    4924:	0002bfa8 	.word	0x0002bfa8
    4928:	0002c0d8 	.word	0x0002c0d8
    492c:	e000ed00 	.word	0xe000ed00
    4930:	0002e5c3 	.word	0x0002e5c3
    4934:	0002e5d9 	.word	0x0002e5d9
    4938:	0002e534 	.word	0x0002e534
    493c:	0002e5ea 	.word	0x0002e5ea
    4940:	0002e603 	.word	0x0002e603
    4944:	0002e618 	.word	0x0002e618
    4948:	0002e633 	.word	0x0002e633
    494c:	0002e594 	.word	0x0002e594

00004950 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4954:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4956:	495a      	ldr	r1, [pc, #360]	; (4ac0 <z_arm_fault+0x170>)
    4958:	684f      	ldr	r7, [r1, #4]
{
    495a:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    495c:	f3c7 0408 	ubfx	r4, r7, #0, #9
    4960:	2600      	movs	r6, #0
    4962:	f386 8811 	msr	BASEPRI, r6
    4966:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    496a:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    496e:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    4972:	d10d      	bne.n	4990 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4974:	f002 010c 	and.w	r1, r2, #12
    4978:	2908      	cmp	r1, #8
    497a:	d10b      	bne.n	4994 <z_arm_fault+0x44>
    497c:	4951      	ldr	r1, [pc, #324]	; (4ac4 <z_arm_fault+0x174>)
    497e:	4b52      	ldr	r3, [pc, #328]	; (4ac8 <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4980:	4852      	ldr	r0, [pc, #328]	; (4acc <z_arm_fault+0x17c>)
    4982:	1ac9      	subs	r1, r1, r3
    4984:	08c9      	lsrs	r1, r1, #3
    4986:	0189      	lsls	r1, r1, #6
    4988:	f041 0101 	orr.w	r1, r1, #1
    498c:	f01e fe50 	bl	23630 <log_0>
		return NULL;
    4990:	4635      	mov	r5, r6
    4992:	e003      	b.n	499c <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4994:	0712      	lsls	r2, r2, #28
    4996:	d401      	bmi.n	499c <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    4998:	4605      	mov	r5, r0
			*nested_exc = true;
    499a:	2601      	movs	r6, #1
	*recoverable = false;
    499c:	2300      	movs	r3, #0
    499e:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    49a2:	1ee3      	subs	r3, r4, #3
    49a4:	2b09      	cmp	r3, #9
    49a6:	d871      	bhi.n	4a8c <z_arm_fault+0x13c>
    49a8:	e8df f003 	tbb	[pc, r3]
    49ac:	3c635f05 	.word	0x3c635f05
    49b0:	70707070 	.word	0x70707070
    49b4:	6770      	.short	0x6770
    49b6:	4b44      	ldr	r3, [pc, #272]	; (4ac8 <z_arm_fault+0x178>)
    49b8:	4f42      	ldr	r7, [pc, #264]	; (4ac4 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    49ba:	4845      	ldr	r0, [pc, #276]	; (4ad0 <z_arm_fault+0x180>)
    49bc:	1aff      	subs	r7, r7, r3
    49be:	08ff      	lsrs	r7, r7, #3
    49c0:	01bf      	lsls	r7, r7, #6
    49c2:	f047 0701 	orr.w	r7, r7, #1
    49c6:	4639      	mov	r1, r7
    49c8:	f01e fe32 	bl	23630 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    49cc:	4b3c      	ldr	r3, [pc, #240]	; (4ac0 <z_arm_fault+0x170>)
    49ce:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    49d0:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    49d4:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    49d8:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    49dc:	d005      	beq.n	49ea <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    49de:	483d      	ldr	r0, [pc, #244]	; (4ad4 <z_arm_fault+0x184>)
    49e0:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    49e2:	f01e fe25 	bl	23630 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    49e6:	2400      	movs	r4, #0
}
    49e8:	e01f      	b.n	4a2a <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    49ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    49ec:	005b      	lsls	r3, r3, #1
    49ee:	d51c      	bpl.n	4a2a <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    49f0:	4839      	ldr	r0, [pc, #228]	; (4ad8 <z_arm_fault+0x188>)
    49f2:	4639      	mov	r1, r7
    49f4:	f01e fe1c 	bl	23630 <log_0>
		if (SCB_MMFSR != 0) {
    49f8:	4b38      	ldr	r3, [pc, #224]	; (4adc <z_arm_fault+0x18c>)
    49fa:	781b      	ldrb	r3, [r3, #0]
    49fc:	b12b      	cbz	r3, 4a0a <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    49fe:	f10d 0107 	add.w	r1, sp, #7
    4a02:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4a04:	f7ff fece 	bl	47a4 <mem_manage_fault.isra.0>
    4a08:	e00e      	b.n	4a28 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    4a0a:	4b35      	ldr	r3, [pc, #212]	; (4ae0 <z_arm_fault+0x190>)
    4a0c:	781b      	ldrb	r3, [r3, #0]
    4a0e:	b12b      	cbz	r3, 4a1c <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    4a10:	f10d 0107 	add.w	r1, sp, #7
    4a14:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    4a16:	f7ff ff2d 	bl	4874 <bus_fault.isra.0>
    4a1a:	e005      	b.n	4a28 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    4a1c:	4b31      	ldr	r3, [pc, #196]	; (4ae4 <z_arm_fault+0x194>)
    4a1e:	881b      	ldrh	r3, [r3, #0]
    4a20:	b29b      	uxth	r3, r3
    4a22:	b113      	cbz	r3, 4a2a <z_arm_fault+0xda>
			reason = usage_fault(esf);
    4a24:	f7ff fe62 	bl	46ec <usage_fault.isra.0>
    4a28:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4a2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a2e:	b9cb      	cbnz	r3, 4a64 <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4a30:	462b      	mov	r3, r5
    4a32:	f103 0720 	add.w	r7, r3, #32
    4a36:	ad02      	add	r5, sp, #8
    4a38:	6818      	ldr	r0, [r3, #0]
    4a3a:	6859      	ldr	r1, [r3, #4]
    4a3c:	462a      	mov	r2, r5
    4a3e:	c203      	stmia	r2!, {r0, r1}
    4a40:	3308      	adds	r3, #8
    4a42:	42bb      	cmp	r3, r7
    4a44:	4615      	mov	r5, r2
    4a46:	d1f7      	bne.n	4a38 <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4a4a:	b39e      	cbz	r6, 4ab4 <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4a4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4a50:	b922      	cbnz	r2, 4a5c <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4a52:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4a56:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4a5a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4a5c:	a902      	add	r1, sp, #8
    4a5e:	4620      	mov	r0, r4
    4a60:	f7ff fda4 	bl	45ac <z_arm_fatal_error>
}
    4a64:	b00a      	add	sp, #40	; 0x28
    4a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4a6a:	f10d 0107 	add.w	r1, sp, #7
    4a6e:	2000      	movs	r0, #0
    4a70:	e7c8      	b.n	4a04 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    4a72:	f10d 0107 	add.w	r1, sp, #7
    4a76:	2000      	movs	r0, #0
    4a78:	e7cd      	b.n	4a16 <z_arm_fault+0xc6>
    4a7a:	4912      	ldr	r1, [pc, #72]	; (4ac4 <z_arm_fault+0x174>)
    4a7c:	4b12      	ldr	r3, [pc, #72]	; (4ac8 <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    4a7e:	481a      	ldr	r0, [pc, #104]	; (4ae8 <z_arm_fault+0x198>)
    4a80:	1ac9      	subs	r1, r1, r3
    4a82:	08c9      	lsrs	r1, r1, #3
    4a84:	0189      	lsls	r1, r1, #6
    4a86:	f041 0101 	orr.w	r1, r1, #1
    4a8a:	e7aa      	b.n	49e2 <z_arm_fault+0x92>
    4a8c:	4a0e      	ldr	r2, [pc, #56]	; (4ac8 <z_arm_fault+0x178>)
    4a8e:	4b0d      	ldr	r3, [pc, #52]	; (4ac4 <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    4a90:	4816      	ldr	r0, [pc, #88]	; (4aec <z_arm_fault+0x19c>)
    4a92:	4917      	ldr	r1, [pc, #92]	; (4af0 <z_arm_fault+0x1a0>)
    4a94:	1a9b      	subs	r3, r3, r2
    4a96:	08db      	lsrs	r3, r3, #3
    4a98:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    4a9c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4aa0:	bf18      	it	ne
    4aa2:	4601      	movne	r1, r0
    4aa4:	f043 0301 	orr.w	r3, r3, #1
    4aa8:	4812      	ldr	r0, [pc, #72]	; (4af4 <z_arm_fault+0x1a4>)
    4aaa:	f1a4 0210 	sub.w	r2, r4, #16
    4aae:	f01e fde0 	bl	23672 <log_2>
    4ab2:	e798      	b.n	49e6 <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4ab4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4ab8:	f023 0301 	bic.w	r3, r3, #1
    4abc:	e7cd      	b.n	4a5a <z_arm_fault+0x10a>
    4abe:	bf00      	nop
    4ac0:	e000ed00 	.word	0xe000ed00
    4ac4:	0002c0d8 	.word	0x0002c0d8
    4ac8:	0002bfa8 	.word	0x0002bfa8
    4acc:	0002e64b 	.word	0x0002e64b
    4ad0:	0002e676 	.word	0x0002e676
    4ad4:	0002e68d 	.word	0x0002e68d
    4ad8:	0002e6ae 	.word	0x0002e6ae
    4adc:	e000ed28 	.word	0xe000ed28
    4ae0:	e000ed29 	.word	0xe000ed29
    4ae4:	e000ed2a 	.word	0xe000ed2a
    4ae8:	0002e6cd 	.word	0x0002e6cd
    4aec:	0002e718 	.word	0x0002e718
    4af0:	0002e703 	.word	0x0002e703
    4af4:	0002e731 	.word	0x0002e731

00004af8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4af8:	4a02      	ldr	r2, [pc, #8]	; (4b04 <z_arm_fault_init+0xc>)
    4afa:	6953      	ldr	r3, [r2, #20]
    4afc:	f043 0310 	orr.w	r3, r3, #16
    4b00:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4b02:	4770      	bx	lr
    4b04:	e000ed00 	.word	0xe000ed00

00004b08 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4b08:	4b04      	ldr	r3, [pc, #16]	; (4b1c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4b0a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4b0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    4b0e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4b10:	d003      	beq.n	4b1a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4b12:	4903      	ldr	r1, [pc, #12]	; (4b20 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4b18:	600a      	str	r2, [r1, #0]

00004b1a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4b1a:	4770      	bx	lr
	ldr r3, =_kernel
    4b1c:	20004068 	.word	0x20004068
	ldr r1, =_SCS_ICSR
    4b20:	e000ed04 	.word	0xe000ed04

00004b24 <z_arm_interrupt_init>:
    4b24:	4804      	ldr	r0, [pc, #16]	; (4b38 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4b26:	2300      	movs	r3, #0
    4b28:	2120      	movs	r1, #32
    4b2a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4b2c:	3301      	adds	r3, #1
    4b2e:	2b27      	cmp	r3, #39	; 0x27
    4b30:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4b34:	d1f9      	bne.n	4b2a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4b36:	4770      	bx	lr
    4b38:	e000e100 	.word	0xe000e100

00004b3c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4b3c:	b508      	push	{r3, lr}
	if (_current == thread) {
    4b3e:	4b0e      	ldr	r3, [pc, #56]	; (4b78 <z_impl_k_thread_abort+0x3c>)
    4b40:	689b      	ldr	r3, [r3, #8]
    4b42:	4283      	cmp	r3, r0
    4b44:	d107      	bne.n	4b56 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4b46:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4b4a:	b193      	cbz	r3, 4b72 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4b4c:	4a0b      	ldr	r2, [pc, #44]	; (4b7c <z_impl_k_thread_abort+0x40>)
    4b4e:	6853      	ldr	r3, [r2, #4]
    4b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4b54:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    4b56:	f01b f8eb 	bl	1fd30 <z_thread_single_abort>
	__asm__ volatile(
    4b5a:	f04f 0320 	mov.w	r3, #32
    4b5e:	f3ef 8011 	mrs	r0, BASEPRI
    4b62:	f383 8811 	msr	BASEPRI, r3
    4b66:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    4b6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    4b6e:	f026 ba8d 	b.w	2b08c <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    4b72:	f01b fbd5 	bl	20320 <z_self_abort>
    4b76:	bf00      	nop
    4b78:	20004068 	.word	0x20004068
    4b7c:	e000ed00 	.word	0xe000ed00

00004b80 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4b80:	4b02      	ldr	r3, [pc, #8]	; (4b8c <z_arm_configure_static_mpu_regions+0xc>)
    4b82:	4a03      	ldr	r2, [pc, #12]	; (4b90 <z_arm_configure_static_mpu_regions+0x10>)
    4b84:	4803      	ldr	r0, [pc, #12]	; (4b94 <z_arm_configure_static_mpu_regions+0x14>)
    4b86:	2101      	movs	r1, #1
    4b88:	f000 b8a2 	b.w	4cd0 <arm_core_mpu_configure_static_mpu_regions>
    4b8c:	20010000 	.word	0x20010000
    4b90:	20000000 	.word	0x20000000
    4b94:	0002c250 	.word	0x0002c250

00004b98 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4b9a:	4f28      	ldr	r7, [pc, #160]	; (4c3c <mpu_configure_regions+0xa4>)
    4b9c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4b9e:	2100      	movs	r1, #0
    4ba0:	42b1      	cmp	r1, r6
    4ba2:	da14      	bge.n	4bce <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    4ba4:	6844      	ldr	r4, [r0, #4]
    4ba6:	2c00      	cmp	r4, #0
    4ba8:	d045      	beq.n	4c36 <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4baa:	b1c3      	cbz	r3, 4bde <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4bac:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4bb0:	ea14 0f0c 	tst.w	r4, ip
    4bb4:	d00d      	beq.n	4bd2 <mpu_configure_regions+0x3a>
    4bb6:	4a22      	ldr	r2, [pc, #136]	; (4c40 <mpu_configure_regions+0xa8>)
    4bb8:	4b22      	ldr	r3, [pc, #136]	; (4c44 <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4bba:	4823      	ldr	r0, [pc, #140]	; (4c48 <mpu_configure_regions+0xb0>)
    4bbc:	1ad2      	subs	r2, r2, r3
    4bbe:	08d2      	lsrs	r2, r2, #3
    4bc0:	0192      	lsls	r2, r2, #6
    4bc2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4bc6:	f01e fd40 	bl	2364a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4bca:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4bce:	4610      	mov	r0, r2
    4bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    4bd2:	2c1f      	cmp	r4, #31
    4bd4:	d9ef      	bls.n	4bb6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4bd6:	6805      	ldr	r5, [r0, #0]
		&&
    4bd8:	ea1c 0f05 	tst.w	ip, r5
    4bdc:	d1eb      	bne.n	4bb6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4bde:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4be0:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4be2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    4be6:	6802      	ldr	r2, [r0, #0]
    4be8:	d916      	bls.n	4c18 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4bea:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4bee:	d815      	bhi.n	4c1c <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4bf0:	3c01      	subs	r4, #1
    4bf2:	fab4 f484 	clz	r4, r4
    4bf6:	f1c4 041f 	rsb	r4, r4, #31
    4bfa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4bfc:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4bfe:	ea4c 0404 	orr.w	r4, ip, r4
    4c02:	d90d      	bls.n	4c20 <mpu_configure_regions+0x88>
    4c04:	4a0e      	ldr	r2, [pc, #56]	; (4c40 <mpu_configure_regions+0xa8>)
    4c06:	4b0f      	ldr	r3, [pc, #60]	; (4c44 <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4c08:	4810      	ldr	r0, [pc, #64]	; (4c4c <mpu_configure_regions+0xb4>)
    4c0a:	1ad2      	subs	r2, r2, r3
    4c0c:	08d2      	lsrs	r2, r2, #3
    4c0e:	0192      	lsls	r2, r2, #6
    4c10:	f042 0201 	orr.w	r2, r2, #1
    4c14:	4629      	mov	r1, r5
    4c16:	e7d6      	b.n	4bc6 <mpu_configure_regions+0x2e>
		return REGION_32B;
    4c18:	2408      	movs	r4, #8
    4c1a:	e7ef      	b.n	4bfc <mpu_configure_regions+0x64>
		return REGION_4G;
    4c1c:	243e      	movs	r4, #62	; 0x3e
    4c1e:	e7ed      	b.n	4bfc <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c20:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4c24:	432a      	orrs	r2, r5
    4c26:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4c2a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4c2e:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c30:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4c32:	613c      	str	r4, [r7, #16]
		reg_index++;
    4c34:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4c36:	3101      	adds	r1, #1
    4c38:	300c      	adds	r0, #12
    4c3a:	e7b1      	b.n	4ba0 <mpu_configure_regions+0x8>
    4c3c:	e000ed90 	.word	0xe000ed90
    4c40:	0002c0c8 	.word	0x0002c0c8
    4c44:	0002bfa8 	.word	0x0002bfa8
    4c48:	0002e748 	.word	0x0002e748
    4c4c:	0002e76b 	.word	0x0002e76b

00004c50 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4c50:	4b03      	ldr	r3, [pc, #12]	; (4c60 <arm_core_mpu_enable+0x10>)
    4c52:	2205      	movs	r2, #5
    4c54:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4c56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c5a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4c5e:	4770      	bx	lr
    4c60:	e000ed90 	.word	0xe000ed90

00004c64 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4c64:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4c68:	4b01      	ldr	r3, [pc, #4]	; (4c70 <arm_core_mpu_disable+0xc>)
    4c6a:	2200      	movs	r2, #0
    4c6c:	605a      	str	r2, [r3, #4]
}
    4c6e:	4770      	bx	lr
    4c70:	e000ed90 	.word	0xe000ed90

00004c74 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4c74:	4913      	ldr	r1, [pc, #76]	; (4cc4 <arm_mpu_init+0x50>)
    4c76:	6808      	ldr	r0, [r1, #0]
    4c78:	2808      	cmp	r0, #8
{
    4c7a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4c7c:	d81e      	bhi.n	4cbc <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4c7e:	f7ff fff1 	bl	4c64 <arm_core_mpu_disable>
	MPU->RNR = index;
    4c82:	4c11      	ldr	r4, [pc, #68]	; (4cc8 <arm_mpu_init+0x54>)
    4c84:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4c86:	2200      	movs	r2, #0
    4c88:	4290      	cmp	r0, r2
    4c8a:	f101 010c 	add.w	r1, r1, #12
    4c8e:	d105      	bne.n	4c9c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4c90:	4b0e      	ldr	r3, [pc, #56]	; (4ccc <arm_mpu_init+0x58>)
    4c92:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4c94:	f7ff ffdc 	bl	4c50 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4c98:	2000      	movs	r0, #0
}
    4c9a:	bd10      	pop	{r4, pc}
    4c9c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c9e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4ca2:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4ca6:	4313      	orrs	r3, r2
    4ca8:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4cac:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4cb2:	f043 0301 	orr.w	r3, r3, #1
    4cb6:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4cb8:	3201      	adds	r2, #1
    4cba:	e7e5      	b.n	4c88 <arm_mpu_init+0x14>
		return -1;
    4cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4cc0:	e7eb      	b.n	4c9a <arm_mpu_init+0x26>
    4cc2:	bf00      	nop
    4cc4:	0002c25c 	.word	0x0002c25c
    4cc8:	e000ed90 	.word	0xe000ed90
    4ccc:	20008564 	.word	0x20008564

00004cd0 <arm_core_mpu_configure_static_mpu_regions>:
{
    4cd0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4cd2:	4c03      	ldr	r4, [pc, #12]	; (4ce0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4cd4:	2301      	movs	r3, #1
    4cd6:	7822      	ldrb	r2, [r4, #0]
    4cd8:	f7ff ff5e 	bl	4b98 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4cdc:	7020      	strb	r0, [r4, #0]
}
    4cde:	bd10      	pop	{r4, pc}
    4ce0:	20008564 	.word	0x20008564

00004ce4 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ce6:	4f0a      	ldr	r7, [pc, #40]	; (4d10 <z_impl_zephyr_write_stdout+0x2c>)
    4ce8:	460d      	mov	r5, r1
    4cea:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4cec:	f1c0 0401 	rsb	r4, r0, #1
    4cf0:	19a3      	adds	r3, r4, r6
    4cf2:	429d      	cmp	r5, r3
    4cf4:	dc01      	bgt.n	4cfa <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4cf6:	4628      	mov	r0, r5
    4cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4cfa:	7873      	ldrb	r3, [r6, #1]
    4cfc:	2b0a      	cmp	r3, #10
    4cfe:	d102      	bne.n	4d06 <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4d00:	683b      	ldr	r3, [r7, #0]
    4d02:	200d      	movs	r0, #13
    4d04:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    4d06:	683b      	ldr	r3, [r7, #0]
    4d08:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4d0c:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4d0e:	e7ef      	b.n	4cf0 <z_impl_zephyr_write_stdout+0xc>
    4d10:	20000364 	.word	0x20000364

00004d14 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
    4d14:	b510      	push	{r4, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
    4d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    4d1a:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    4d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d20:	480a      	ldr	r0, [pc, #40]	; (4d4c <_sbrk+0x38>)
    4d22:	f01e f95f 	bl	22fe4 <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4d26:	490a      	ldr	r1, [pc, #40]	; (4d50 <_sbrk+0x3c>)
    4d28:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4d2a:	18e0      	adds	r0, r4, r3
    4d2c:	4c09      	ldr	r4, [pc, #36]	; (4d54 <_sbrk+0x40>)
    4d2e:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
    4d32:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
    4d36:	4290      	cmp	r0, r2
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4d38:	bf3a      	itte	cc
    4d3a:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
    4d3c:	6008      	strcc	r0, [r1, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    4d3e:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
    4d42:	4802      	ldr	r0, [pc, #8]	; (4d4c <_sbrk+0x38>)
    4d44:	f01e f949 	bl	22fda <sys_sem_give>

	return ret;
}
    4d48:	4620      	mov	r0, r4
    4d4a:	bd10      	pop	{r4, pc}
    4d4c:	20000be8 	.word	0x20000be8
    4d50:	20001758 	.word	0x20001758
    4d54:	2000b7cc 	.word	0x2000b7cc

00004d58 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4d58:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4d5a:	211d      	movs	r1, #29
    4d5c:	4804      	ldr	r0, [pc, #16]	; (4d70 <__chk_fail+0x18>)
    4d5e:	f7ff ffc1 	bl	4ce4 <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    4d62:	4040      	eors	r0, r0
    4d64:	f380 8811 	msr	BASEPRI, r0
    4d68:	f04f 0003 	mov.w	r0, #3
    4d6c:	df02      	svc	2
	CODE_UNREACHABLE;
    4d6e:	bf00      	nop
    4d70:	0002e791 	.word	0x0002e791

00004d74 <lvgl_log>:
#endif /* CONFIG_LVGL_BUFFER_ALLOC_STATIC */

#if CONFIG_LVGL_LOG_LEVEL != 0
static void lvgl_log(lv_log_level_t level, const char *file, uint32_t line,
		const char *func, const char *dsc)
{
    4d74:	4601      	mov	r1, r0
	 * * LOG_LEVEL_ERR 1
	 * * LOG_LEVEL_WRN 2
	 * * LOG_LEVEL_INF 3
	 * * LOG_LEVEL_DBG 4
	 */
	uint8_t zephyr_level = LOG_LEVEL_DBG - level;
    4d76:	f1c1 0104 	rsb	r1, r1, #4
    4d7a:	b2c9      	uxtb	r1, r1
{
    4d7c:	b510      	push	{r4, lr}

	ARG_UNUSED(file);
	ARG_UNUSED(line);
	ARG_UNUSED(func);

	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4d7e:	2903      	cmp	r1, #3
{
    4d80:	9802      	ldr	r0, [sp, #8]
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4d82:	d81c      	bhi.n	4dbe <lvgl_log+0x4a>
    4d84:	4b0e      	ldr	r3, [pc, #56]	; (4dc0 <lvgl_log+0x4c>)
    4d86:	4a0f      	ldr	r2, [pc, #60]	; (4dc4 <lvgl_log+0x50>)
    4d88:	1a9b      	subs	r3, r3, r2
    4d8a:	08db      	lsrs	r3, r3, #3
    4d8c:	f001 0407 	and.w	r4, r1, #7
    4d90:	2904      	cmp	r1, #4
    4d92:	ea44 1483 	orr.w	r4, r4, r3, lsl #6
    4d96:	d109      	bne.n	4dac <lvgl_log+0x38>
    4d98:	f7fd ff1a 	bl	2bd0 <log_strdup>
    4d9c:	4623      	mov	r3, r4
    4d9e:	4602      	mov	r2, r0
}
    4da0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4da4:	4908      	ldr	r1, [pc, #32]	; (4dc8 <lvgl_log+0x54>)
    4da6:	4809      	ldr	r0, [pc, #36]	; (4dcc <lvgl_log+0x58>)
    4da8:	f01e bc63 	b.w	23672 <log_2>
    4dac:	f7fd ff10 	bl	2bd0 <log_strdup>
    4db0:	4622      	mov	r2, r4
    4db2:	4601      	mov	r1, r0
}
    4db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4db8:	4805      	ldr	r0, [pc, #20]	; (4dd0 <lvgl_log+0x5c>)
    4dba:	f01e bc46 	b.w	2364a <log_1>
}
    4dbe:	bd10      	pop	{r4, pc}
    4dc0:	0002c0c0 	.word	0x0002c0c0
    4dc4:	0002bfa8 	.word	0x0002bfa8
    4dc8:	0002e867 	.word	0x0002e867
    4dcc:	0002e7af 	.word	0x0002e7af
    4dd0:	0002df29 	.word	0x0002df29

00004dd4 <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LVGL_POINTER_KSCAN */

static int lvgl_init(const struct device *dev)
{
    4dd4:	b510      	push	{r4, lr}
    4dd6:	b090      	sub	sp, #64	; 0x40
    4dd8:	483b      	ldr	r0, [pc, #236]	; (4ec8 <lvgl_init+0xf4>)
    4dda:	f01a facb 	bl	1f374 <z_impl_device_get_binding>
	const struct device *display_dev =
		device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
	int err = 0;
	lv_disp_drv_t disp_drv;

	if (display_dev == NULL) {
    4dde:	4604      	mov	r4, r0
    4de0:	b970      	cbnz	r0, 4e00 <lvgl_init+0x2c>
    4de2:	4b3a      	ldr	r3, [pc, #232]	; (4ecc <lvgl_init+0xf8>)
    4de4:	493a      	ldr	r1, [pc, #232]	; (4ed0 <lvgl_init+0xfc>)
		LOG_ERR("Display device not found.");
    4de6:	483b      	ldr	r0, [pc, #236]	; (4ed4 <lvgl_init+0x100>)
    4de8:	1ac9      	subs	r1, r1, r3
    4dea:	08c9      	lsrs	r1, r1, #3
    4dec:	0189      	lsls	r1, r1, #6
    4dee:	f041 0101 	orr.w	r1, r1, #1
    4df2:	f01e fc1d 	bl	23630 <log_0>
		return -ENODEV;
    4df6:	f06f 0412 	mvn.w	r4, #18
#ifdef CONFIG_LVGL_POINTER_KSCAN
	lvgl_pointer_kscan_init();
#endif /* CONFIG_LVGL_POINTER_KSCAN */

	return 0;
}
    4dfa:	4620      	mov	r0, r4
    4dfc:	b010      	add	sp, #64	; 0x40
    4dfe:	bd10      	pop	{r4, pc}
	lv_log_register_print_cb(lvgl_log);
    4e00:	4835      	ldr	r0, [pc, #212]	; (4ed8 <lvgl_init+0x104>)
    4e02:	f018 fba3 	bl	1d54c <lv_log_register_print_cb>
	lv_init();
    4e06:	f015 f999 	bl	1a13c <lv_init>
	lv_disp_drv_init(&disp_drv);
    4e0a:	a804      	add	r0, sp, #16
    4e0c:	f025 f8a9 	bl	29f62 <lv_disp_drv_init>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
    4e10:	68a3      	ldr	r3, [r4, #8]
	disp_drv.user_data = (void *) display_dev;
    4e12:	940f      	str	r4, [sp, #60]	; 0x3c
    4e14:	69db      	ldr	r3, [r3, #28]
    4e16:	4669      	mov	r1, sp
    4e18:	4620      	mov	r0, r4
    4e1a:	4798      	blx	r3
	if (cap.x_resolution <= CONFIG_LVGL_HOR_RES_MAX) {
    4e1c:	f8bd 3000 	ldrh.w	r3, [sp]
    4e20:	2bf0      	cmp	r3, #240	; 0xf0
    4e22:	d824      	bhi.n	4e6e <lvgl_init+0x9a>
		disp_drv->hor_res = cap.x_resolution;
    4e24:	f8ad 3010 	strh.w	r3, [sp, #16]
	int err = 0;
    4e28:	2400      	movs	r4, #0
	if (cap.y_resolution <= CONFIG_LVGL_VER_RES_MAX) {
    4e2a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4e2e:	2bf0      	cmp	r3, #240	; 0xf0
    4e30:	d82a      	bhi.n	4e88 <lvgl_init+0xb4>
		disp_drv->ver_res = cap.y_resolution;
    4e32:	f8ad 3012 	strh.w	r3, [sp, #18]
	disp_drv->buffer = &disp_buf;
    4e36:	4829      	ldr	r0, [pc, #164]	; (4edc <lvgl_init+0x108>)
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4e38:	4929      	ldr	r1, [pc, #164]	; (4ee0 <lvgl_init+0x10c>)
	disp_drv->buffer = &disp_buf;
    4e3a:	9005      	str	r0, [sp, #20]
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4e3c:	f44f 6390 	mov.w	r3, #1152	; 0x480
    4e40:	2200      	movs	r2, #0
    4e42:	f025 f8a5 	bl	29f90 <lv_disp_buf_init>
	if (err != 0) {
    4e46:	2c00      	cmp	r4, #0
    4e48:	d1d7      	bne.n	4dfa <lvgl_init+0x26>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
    4e4a:	a804      	add	r0, sp, #16
    4e4c:	f000 f852 	bl	4ef4 <set_lvgl_rendering_cb>
    4e50:	4604      	mov	r4, r0
    4e52:	b330      	cbz	r0, 4ea2 <lvgl_init+0xce>
    4e54:	4b1d      	ldr	r3, [pc, #116]	; (4ecc <lvgl_init+0xf8>)
    4e56:	491e      	ldr	r1, [pc, #120]	; (4ed0 <lvgl_init+0xfc>)
		LOG_ERR("Display not supported.");
    4e58:	4822      	ldr	r0, [pc, #136]	; (4ee4 <lvgl_init+0x110>)
    4e5a:	1ac9      	subs	r1, r1, r3
    4e5c:	08c9      	lsrs	r1, r1, #3
    4e5e:	0189      	lsls	r1, r1, #6
    4e60:	f041 0101 	orr.w	r1, r1, #1
    4e64:	f01e fbe4 	bl	23630 <log_0>
		return -ENOTSUP;
    4e68:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e6c:	e7c5      	b.n	4dfa <lvgl_init+0x26>
    4e6e:	4b17      	ldr	r3, [pc, #92]	; (4ecc <lvgl_init+0xf8>)
    4e70:	4917      	ldr	r1, [pc, #92]	; (4ed0 <lvgl_init+0xfc>)
		LOG_ERR("Horizontal resolution is larger than maximum");
    4e72:	481d      	ldr	r0, [pc, #116]	; (4ee8 <lvgl_init+0x114>)
    4e74:	1ac9      	subs	r1, r1, r3
    4e76:	08c9      	lsrs	r1, r1, #3
    4e78:	0189      	lsls	r1, r1, #6
    4e7a:	f041 0101 	orr.w	r1, r1, #1
    4e7e:	f01e fbd7 	bl	23630 <log_0>
		err = -ENOTSUP;
    4e82:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e86:	e7d0      	b.n	4e2a <lvgl_init+0x56>
    4e88:	4b10      	ldr	r3, [pc, #64]	; (4ecc <lvgl_init+0xf8>)
    4e8a:	4911      	ldr	r1, [pc, #68]	; (4ed0 <lvgl_init+0xfc>)
		LOG_ERR("Vertical resolution is larger than maximum");
    4e8c:	4817      	ldr	r0, [pc, #92]	; (4eec <lvgl_init+0x118>)
    4e8e:	1ac9      	subs	r1, r1, r3
    4e90:	08c9      	lsrs	r1, r1, #3
    4e92:	0189      	lsls	r1, r1, #6
    4e94:	f041 0101 	orr.w	r1, r1, #1
    4e98:	f01e fbca 	bl	23630 <log_0>
		err = -ENOTSUP;
    4e9c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4ea0:	e7c9      	b.n	4e36 <lvgl_init+0x62>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
    4ea2:	a804      	add	r0, sp, #16
    4ea4:	f018 fab4 	bl	1d410 <lv_disp_drv_register>
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d1a6      	bne.n	4dfa <lvgl_init+0x26>
    4eac:	4b07      	ldr	r3, [pc, #28]	; (4ecc <lvgl_init+0xf8>)
    4eae:	4908      	ldr	r1, [pc, #32]	; (4ed0 <lvgl_init+0xfc>)
		LOG_ERR("Failed to register display device.");
    4eb0:	480f      	ldr	r0, [pc, #60]	; (4ef0 <lvgl_init+0x11c>)
    4eb2:	1ac9      	subs	r1, r1, r3
    4eb4:	08c9      	lsrs	r1, r1, #3
    4eb6:	0189      	lsls	r1, r1, #6
    4eb8:	f041 0101 	orr.w	r1, r1, #1
    4ebc:	f01e fbb8 	bl	23630 <log_0>
		return -EPERM;
    4ec0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4ec4:	e799      	b.n	4dfa <lvgl_init+0x26>
    4ec6:	bf00      	nop
    4ec8:	0002df0f 	.word	0x0002df0f
    4ecc:	0002bfa8 	.word	0x0002bfa8
    4ed0:	0002c0c0 	.word	0x0002c0c0
    4ed4:	0002e7b6 	.word	0x0002e7b6
    4ed8:	00004d75 	.word	0x00004d75
    4edc:	2000295c 	.word	0x2000295c
    4ee0:	2000175c 	.word	0x2000175c
    4ee4:	0002e828 	.word	0x0002e828
    4ee8:	0002e7d0 	.word	0x0002e7d0
    4eec:	0002e7fd 	.word	0x0002e7fd
    4ef0:	0002e83f 	.word	0x0002e83f

00004ef4 <set_lvgl_rendering_cb>:
 */

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
    4ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4ef6:	4604      	mov	r4, r0
	int err = 0;
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
    4ef8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4efa:	6883      	ldr	r3, [r0, #8]
    4efc:	4669      	mov	r1, sp
    4efe:	69db      	ldr	r3, [r3, #28]
    4f00:	4798      	blx	r3
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);

	switch (cap.current_pixel_format) {
    4f02:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4f06:	2b08      	cmp	r3, #8
    4f08:	d80a      	bhi.n	4f20 <set_lvgl_rendering_cb+0x2c>
    4f0a:	b16b      	cbz	r3, 4f28 <set_lvgl_rendering_cb+0x34>
    4f0c:	3b01      	subs	r3, #1
    4f0e:	2200      	movs	r2, #0
    4f10:	2b07      	cmp	r3, #7
    4f12:	d809      	bhi.n	4f28 <set_lvgl_rendering_cb+0x34>
    4f14:	e8df f003 	tbb	[pc, r3]
    4f18:	22082217 	.word	0x22082217
    4f1c:	0f080808 	.word	0x0f080808
    4f20:	2b10      	cmp	r3, #16
    4f22:	d015      	beq.n	4f50 <set_lvgl_rendering_cb+0x5c>
    4f24:	2b20      	cmp	r3, #32
    4f26:	d013      	beq.n	4f50 <set_lvgl_rendering_cb+0x5c>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
		break;
	default:
		disp_drv->flush_cb = NULL;
    4f28:	2300      	movs	r3, #0
		disp_drv->rounder_cb = NULL;
    4f2a:	e9c4 3303 	strd	r3, r3, [r4, #12]
		disp_drv->set_px_cb = NULL;
    4f2e:	6163      	str	r3, [r4, #20]
		err = -ENOTSUP;
    4f30:	f06f 0085 	mvn.w	r0, #133	; 0x85
		break;

	}

	return err;
    4f34:	e005      	b.n	4f42 <set_lvgl_rendering_cb+0x4e>
		disp_drv->flush_cb = lvgl_flush_cb_32bit;
    4f36:	4b0c      	ldr	r3, [pc, #48]	; (4f68 <set_lvgl_rendering_cb+0x74>)
		disp_drv->rounder_cb = NULL;
    4f38:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_32bit;
    4f3c:	4b0b      	ldr	r3, [pc, #44]	; (4f6c <set_lvgl_rendering_cb+0x78>)
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4f3e:	6163      	str	r3, [r4, #20]
	int err = 0;
    4f40:	2000      	movs	r0, #0
}
    4f42:	b004      	add	sp, #16
    4f44:	bd10      	pop	{r4, pc}
		disp_drv->flush_cb = lvgl_flush_cb_24bit;
    4f46:	4b0a      	ldr	r3, [pc, #40]	; (4f70 <set_lvgl_rendering_cb+0x7c>)
		disp_drv->rounder_cb = NULL;
    4f48:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4f4c:	4b09      	ldr	r3, [pc, #36]	; (4f74 <set_lvgl_rendering_cb+0x80>)
    4f4e:	e7f6      	b.n	4f3e <set_lvgl_rendering_cb+0x4a>
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    4f50:	4b09      	ldr	r3, [pc, #36]	; (4f78 <set_lvgl_rendering_cb+0x84>)
    4f52:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = NULL;
    4f54:	2000      	movs	r0, #0
		disp_drv->set_px_cb = NULL;
    4f56:	e9c4 0004 	strd	r0, r0, [r4, #16]
		break;
    4f5a:	e7f2      	b.n	4f42 <set_lvgl_rendering_cb+0x4e>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
    4f5c:	4b07      	ldr	r3, [pc, #28]	; (4f7c <set_lvgl_rendering_cb+0x88>)
    4f5e:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
    4f60:	4b07      	ldr	r3, [pc, #28]	; (4f80 <set_lvgl_rendering_cb+0x8c>)
    4f62:	6123      	str	r3, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    4f64:	4b07      	ldr	r3, [pc, #28]	; (4f84 <set_lvgl_rendering_cb+0x90>)
    4f66:	e7ea      	b.n	4f3e <set_lvgl_rendering_cb+0x4a>
    4f68:	000245e5 	.word	0x000245e5
    4f6c:	00024631 	.word	0x00024631
    4f70:	0002453b 	.word	0x0002453b
    4f74:	00024589 	.word	0x00024589
    4f78:	000244ef 	.word	0x000244ef
    4f7c:	00024395 	.word	0x00024395
    4f80:	000244a7 	.word	0x000244a7
    4f84:	0002440f 	.word	0x0002440f

00004f88 <nordicsemi_nrf52_init>:
    4f88:	f04f 0220 	mov.w	r2, #32
    4f8c:	f3ef 8311 	mrs	r3, BASEPRI
    4f90:	f382 8811 	msr	BASEPRI, r2
    4f94:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4f98:	4a04      	ldr	r2, [pc, #16]	; (4fac <nordicsemi_nrf52_init+0x24>)
    4f9a:	2101      	movs	r1, #1
    4f9c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    4fa0:	f383 8811 	msr	BASEPRI, r3
    4fa4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4fa8:	2000      	movs	r0, #0
    4faa:	4770      	bx	lr
    4fac:	4001e000 	.word	0x4001e000

00004fb0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4fb0:	b120      	cbz	r0, 4fbc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4fb2:	4b03      	ldr	r3, [pc, #12]	; (4fc0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4fb4:	0180      	lsls	r0, r0, #6
    4fb6:	f043 0301 	orr.w	r3, r3, #1
    4fba:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4fbc:	4770      	bx	lr
    4fbe:	bf00      	nop
    4fc0:	0002c180 	.word	0x0002c180

00004fc4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4fc4:	4b0e      	ldr	r3, [pc, #56]	; (5000 <bt_hex_real+0x3c>)
    4fc6:	2940      	cmp	r1, #64	; 0x40
{
    4fc8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    4fca:	bf28      	it	cs
    4fcc:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4fce:	4c0d      	ldr	r4, [pc, #52]	; (5004 <bt_hex_real+0x40>)
    4fd0:	1846      	adds	r6, r0, r1
    4fd2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    4fd4:	42b0      	cmp	r0, r6
    4fd6:	f103 0302 	add.w	r3, r3, #2
    4fda:	d104      	bne.n	4fe6 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4fdc:	2300      	movs	r3, #0
    4fde:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4fe2:	4807      	ldr	r0, [pc, #28]	; (5000 <bt_hex_real+0x3c>)
    4fe4:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4fe6:	7802      	ldrb	r2, [r0, #0]
    4fe8:	0912      	lsrs	r2, r2, #4
    4fea:	5ca2      	ldrb	r2, [r4, r2]
    4fec:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
    4ff4:	f002 020f 	and.w	r2, r2, #15
    4ff8:	5ca2      	ldrb	r2, [r4, r2]
    4ffa:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4ffe:	e7e9      	b.n	4fd4 <bt_hex_real+0x10>
    5000:	20008565 	.word	0x20008565
    5004:	0002e8c8 	.word	0x0002e8c8

00005008 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    5008:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    500a:	7803      	ldrb	r3, [r0, #0]
    500c:	b08b      	sub	sp, #44	; 0x2c
    500e:	4604      	mov	r4, r0
    5010:	ad07      	add	r5, sp, #28
    5012:	2b03      	cmp	r3, #3
    5014:	d821      	bhi.n	505a <bt_addr_le_str_real+0x52>
    5016:	e8df f003 	tbb	[pc, r3]
    501a:	1a02      	.short	0x1a02
    501c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    501e:	4912      	ldr	r1, [pc, #72]	; (5068 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    5020:	4628      	mov	r0, r5
    5022:	f026 fbf1 	bl	2b808 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    5026:	7863      	ldrb	r3, [r4, #1]
    5028:	9304      	str	r3, [sp, #16]
    502a:	78a3      	ldrb	r3, [r4, #2]
    502c:	9303      	str	r3, [sp, #12]
    502e:	78e3      	ldrb	r3, [r4, #3]
    5030:	9302      	str	r3, [sp, #8]
    5032:	7923      	ldrb	r3, [r4, #4]
    5034:	9301      	str	r3, [sp, #4]
    5036:	7963      	ldrb	r3, [r4, #5]
    5038:	9300      	str	r3, [sp, #0]
    503a:	4a0c      	ldr	r2, [pc, #48]	; (506c <bt_addr_le_str_real+0x64>)
    503c:	79a3      	ldrb	r3, [r4, #6]
    503e:	9505      	str	r5, [sp, #20]
    5040:	211e      	movs	r1, #30
    5042:	480b      	ldr	r0, [pc, #44]	; (5070 <bt_addr_le_str_real+0x68>)
    5044:	f01d feec 	bl	22e20 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    5048:	4809      	ldr	r0, [pc, #36]	; (5070 <bt_addr_le_str_real+0x68>)
    504a:	b00b      	add	sp, #44	; 0x2c
    504c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    504e:	4909      	ldr	r1, [pc, #36]	; (5074 <bt_addr_le_str_real+0x6c>)
    5050:	e7e6      	b.n	5020 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    5052:	4909      	ldr	r1, [pc, #36]	; (5078 <bt_addr_le_str_real+0x70>)
    5054:	e7e4      	b.n	5020 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    5056:	4909      	ldr	r1, [pc, #36]	; (507c <bt_addr_le_str_real+0x74>)
    5058:	e7e2      	b.n	5020 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    505a:	4a09      	ldr	r2, [pc, #36]	; (5080 <bt_addr_le_str_real+0x78>)
    505c:	210a      	movs	r1, #10
    505e:	4628      	mov	r0, r5
    5060:	f01d fede 	bl	22e20 <snprintk>
		break;
    5064:	e7df      	b.n	5026 <bt_addr_le_str_real+0x1e>
    5066:	bf00      	nop
    5068:	0002e883 	.word	0x0002e883
    506c:	0002e8a5 	.word	0x0002e8a5
    5070:	200085e6 	.word	0x200085e6
    5074:	0002e88a 	.word	0x0002e88a
    5078:	0002e891 	.word	0x0002e891
    507c:	0002e89b 	.word	0x0002e89b
    5080:	0002f5a1 	.word	0x0002f5a1

00005084 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    5084:	b510      	push	{r4, lr}
    5086:	4b0d      	ldr	r3, [pc, #52]	; (50bc <save_id+0x38>)
    5088:	4c0d      	ldr	r4, [pc, #52]	; (50c0 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
    508a:	480e      	ldr	r0, [pc, #56]	; (50c4 <save_id+0x40>)
    508c:	1ae4      	subs	r4, r4, r3
    508e:	08e4      	lsrs	r4, r4, #3
    5090:	01a4      	lsls	r4, r4, #6
    5092:	f044 0103 	orr.w	r1, r4, #3
    5096:	f01e facb 	bl	23630 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    509a:	490b      	ldr	r1, [pc, #44]	; (50c8 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    509c:	480b      	ldr	r0, [pc, #44]	; (50cc <save_id+0x48>)
    509e:	79ca      	ldrb	r2, [r1, #7]
    50a0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    50a4:	f7fe fa3e 	bl	3524 <settings_save_one>
	if (err) {
    50a8:	4601      	mov	r1, r0
    50aa:	b130      	cbz	r0, 50ba <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
    50ac:	f044 0201 	orr.w	r2, r4, #1
    50b0:	4807      	ldr	r0, [pc, #28]	; (50d0 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    50b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    50b6:	f01e bac8 	b.w	2364a <log_1>
}
    50ba:	bd10      	pop	{r4, pc}
    50bc:	0002bfa8 	.word	0x0002bfa8
    50c0:	0002c080 	.word	0x0002c080
    50c4:	0002e8e0 	.word	0x0002e8e0
    50c8:	20000000 	.word	0x20000000
    50cc:	0002e8ea 	.word	0x0002e8ea
    50d0:	0002e8f0 	.word	0x0002e8f0

000050d4 <set>:
{
    50d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    50d8:	4605      	mov	r5, r0
    50da:	4617      	mov	r7, r2
    50dc:	4698      	mov	r8, r3
	if (!name) {
    50de:	b960      	cbnz	r0, 50fa <set+0x26>
    50e0:	4934      	ldr	r1, [pc, #208]	; (51b4 <set+0xe0>)
    50e2:	4b35      	ldr	r3, [pc, #212]	; (51b8 <set+0xe4>)
		BT_ERR("Insufficient number of arguments");
    50e4:	4835      	ldr	r0, [pc, #212]	; (51bc <set+0xe8>)
    50e6:	1ac9      	subs	r1, r1, r3
    50e8:	08c9      	lsrs	r1, r1, #3
    50ea:	0189      	lsls	r1, r1, #6
    50ec:	f041 0101 	orr.w	r1, r1, #1
    50f0:	f01e fa9e 	bl	23630 <log_0>
	return -ENOENT;
    50f4:	f06f 0401 	mvn.w	r4, #1
    50f8:	e01c      	b.n	5134 <set+0x60>
	len = settings_name_next(name, &next);
    50fa:	a901      	add	r1, sp, #4
    50fc:	f01e fdaa 	bl	23c54 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    5100:	492f      	ldr	r1, [pc, #188]	; (51c0 <set+0xec>)
    5102:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    5104:	4606      	mov	r6, r0
	if (!strncmp(name, "id", len)) {
    5106:	4628      	mov	r0, r5
    5108:	f026 fb86 	bl	2b818 <strncmp>
    510c:	4604      	mov	r4, r0
    510e:	bb90      	cbnz	r0, 5176 <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5110:	f3bf 8f5b 	dmb	ish
    5114:	4e2b      	ldr	r6, [pc, #172]	; (51c4 <set+0xf0>)
    5116:	6833      	ldr	r3, [r6, #0]
    5118:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    511c:	075b      	lsls	r3, r3, #29
    511e:	d50d      	bpl.n	513c <set+0x68>
    5120:	4924      	ldr	r1, [pc, #144]	; (51b4 <set+0xe0>)
    5122:	4b25      	ldr	r3, [pc, #148]	; (51b8 <set+0xe4>)
			BT_WARN("Ignoring identities stored in flash");
    5124:	4828      	ldr	r0, [pc, #160]	; (51c8 <set+0xf4>)
    5126:	1ac9      	subs	r1, r1, r3
    5128:	08c9      	lsrs	r1, r1, #3
    512a:	0189      	lsls	r1, r1, #6
    512c:	f041 0102 	orr.w	r1, r1, #2
    5130:	f01e fa7e 	bl	23630 <log_0>
}
    5134:	4620      	mov	r0, r4
    5136:	b002      	add	sp, #8
    5138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    513c:	f1a6 0594 	sub.w	r5, r6, #148	; 0x94
    5140:	2207      	movs	r2, #7
    5142:	4629      	mov	r1, r5
    5144:	4640      	mov	r0, r8
    5146:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
    5148:	2806      	cmp	r0, #6
    514a:	d80f      	bhi.n	516c <set+0x98>
    514c:	4b1a      	ldr	r3, [pc, #104]	; (51b8 <set+0xe4>)
    514e:	4919      	ldr	r1, [pc, #100]	; (51b4 <set+0xe0>)
				BT_ERR("Invalid length ID address in storage");
    5150:	481e      	ldr	r0, [pc, #120]	; (51cc <set+0xf8>)
    5152:	1ac9      	subs	r1, r1, r3
    5154:	08c9      	lsrs	r1, r1, #3
    5156:	0189      	lsls	r1, r1, #6
    5158:	f041 0101 	orr.w	r1, r1, #1
    515c:	f01e fa68 	bl	23630 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    5160:	f846 4c94 	str.w	r4, [r6, #-148]
			bt_dev.id_count = 0U;
    5164:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
    5166:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
    516a:	e7e3      	b.n	5134 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    516c:	2307      	movs	r3, #7
    516e:	fbb0 f0f3 	udiv	r0, r0, r3
    5172:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    5174:	e7de      	b.n	5134 <set+0x60>
	if (!strncmp(name, "name", len)) {
    5176:	4916      	ldr	r1, [pc, #88]	; (51d0 <set+0xfc>)
    5178:	4632      	mov	r2, r6
    517a:	4628      	mov	r0, r5
    517c:	f026 fb4c 	bl	2b818 <strncmp>
    5180:	4604      	mov	r4, r0
    5182:	2800      	cmp	r0, #0
    5184:	d1b6      	bne.n	50f4 <set+0x20>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    5186:	4913      	ldr	r1, [pc, #76]	; (51d4 <set+0x100>)
    5188:	2241      	movs	r2, #65	; 0x41
    518a:	4640      	mov	r0, r8
    518c:	47b8      	blx	r7
		if (len < 0) {
    518e:	1e01      	subs	r1, r0, #0
    5190:	da0a      	bge.n	51a8 <set+0xd4>
    5192:	4b09      	ldr	r3, [pc, #36]	; (51b8 <set+0xe4>)
    5194:	4a07      	ldr	r2, [pc, #28]	; (51b4 <set+0xe0>)
			BT_ERR("Failed to read device name from storage"
    5196:	4810      	ldr	r0, [pc, #64]	; (51d8 <set+0x104>)
    5198:	1ad2      	subs	r2, r2, r3
    519a:	08d2      	lsrs	r2, r2, #3
    519c:	0192      	lsls	r2, r2, #6
    519e:	f042 0201 	orr.w	r2, r2, #1
    51a2:	f01e fa52 	bl	2364a <log_1>
    51a6:	e7c5      	b.n	5134 <set+0x60>
			bt_dev.name[len] = '\0';
    51a8:	480c      	ldr	r0, [pc, #48]	; (51dc <set+0x108>)
    51aa:	4401      	add	r1, r0
    51ac:	f881 4118 	strb.w	r4, [r1, #280]	; 0x118
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    51b0:	e7c0      	b.n	5134 <set+0x60>
    51b2:	bf00      	nop
    51b4:	0002c080 	.word	0x0002c080
    51b8:	0002bfa8 	.word	0x0002bfa8
    51bc:	0002e90b 	.word	0x0002e90b
    51c0:	0002e898 	.word	0x0002e898
    51c4:	20000094 	.word	0x20000094
    51c8:	0002e92c 	.word	0x0002e92c
    51cc:	0002e950 	.word	0x0002e950
    51d0:	0002ef67 	.word	0x0002ef67
    51d4:	20000118 	.word	0x20000118
    51d8:	0002e975 	.word	0x0002e975
    51dc:	20000000 	.word	0x20000000

000051e0 <bt_settings_encode_key>:
{
    51e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    51e4:	b088      	sub	sp, #32
    51e6:	799c      	ldrb	r4, [r3, #6]
    51e8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    51ec:	795d      	ldrb	r5, [r3, #5]
    51ee:	791e      	ldrb	r6, [r3, #4]
    51f0:	78df      	ldrb	r7, [r3, #3]
    51f2:	f893 c002 	ldrb.w	ip, [r3, #2]
    51f6:	f893 e001 	ldrb.w	lr, [r3, #1]
    51fa:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    51fc:	f1b8 0f00 	cmp.w	r8, #0
    5200:	d00e      	beq.n	5220 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    5202:	e9cd 3806 	strd	r3, r8, [sp, #24]
    5206:	e9cd ce04 	strd	ip, lr, [sp, #16]
    520a:	4613      	mov	r3, r2
    520c:	e9cd 6702 	strd	r6, r7, [sp, #8]
    5210:	e9cd 4500 	strd	r4, r5, [sp]
    5214:	4a08      	ldr	r2, [pc, #32]	; (5238 <bt_settings_encode_key+0x58>)
    5216:	f01d fe03 	bl	22e20 <snprintk>
}
    521a:	b008      	add	sp, #32
    521c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    5220:	e9cd e305 	strd	lr, r3, [sp, #20]
    5224:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    5228:	4613      	mov	r3, r2
    522a:	e9cd 5601 	strd	r5, r6, [sp, #4]
    522e:	4a03      	ldr	r2, [pc, #12]	; (523c <bt_settings_encode_key+0x5c>)
    5230:	9400      	str	r4, [sp, #0]
    5232:	f01d fdf5 	bl	22e20 <snprintk>
}
    5236:	e7f0      	b.n	521a <bt_settings_encode_key+0x3a>
    5238:	0002e9a7 	.word	0x0002e9a7
    523c:	0002e9cb 	.word	0x0002e9cb

00005240 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5240:	4909      	ldr	r1, [pc, #36]	; (5268 <bt_settings_save_id+0x28>)
    5242:	f3bf 8f5b 	dmb	ish
    5246:	e851 3f00 	ldrex	r3, [r1]
    524a:	f043 0201 	orr.w	r2, r3, #1
    524e:	e841 2000 	strex	r0, r2, [r1]
    5252:	2800      	cmp	r0, #0
    5254:	d1f7      	bne.n	5246 <bt_settings_save_id+0x6>
    5256:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    525a:	07db      	lsls	r3, r3, #31
    525c:	d403      	bmi.n	5266 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    525e:	4803      	ldr	r0, [pc, #12]	; (526c <bt_settings_save_id+0x2c>)
    5260:	3908      	subs	r1, #8
    5262:	f025 be99 	b.w	2af98 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    5266:	4770      	bx	lr
    5268:	20000370 	.word	0x20000370
    526c:	20001458 	.word	0x20001458

00005270 <commit>:

static int commit(void)
{
    5270:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    5272:	4c1d      	ldr	r4, [pc, #116]	; (52e8 <commit+0x78>)
    5274:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5278:	b913      	cbnz	r3, 5280 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    527a:	481c      	ldr	r0, [pc, #112]	; (52ec <commit+0x7c>)
    527c:	f001 fd2a 	bl	6cd4 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    5280:	79e3      	ldrb	r3, [r4, #7]
    5282:	b99b      	cbnz	r3, 52ac <commit+0x3c>
		bt_setup_public_id_addr();
    5284:	f001 fdd2 	bl	6e2c <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    5288:	79e3      	ldrb	r3, [r4, #7]
    528a:	b97b      	cbnz	r3, 52ac <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    528c:	f001 fe78 	bl	6f80 <bt_setup_random_id_addr>
		if (err) {
    5290:	4604      	mov	r4, r0
    5292:	b158      	cbz	r0, 52ac <commit+0x3c>
    5294:	4916      	ldr	r1, [pc, #88]	; (52f0 <commit+0x80>)
    5296:	4b17      	ldr	r3, [pc, #92]	; (52f4 <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    5298:	4817      	ldr	r0, [pc, #92]	; (52f8 <commit+0x88>)
    529a:	1ac9      	subs	r1, r1, r3
    529c:	08c9      	lsrs	r1, r1, #3
    529e:	0189      	lsls	r1, r1, #6
    52a0:	f041 0101 	orr.w	r1, r1, #1
    52a4:	f01e f9c4 	bl	23630 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    52a8:	4620      	mov	r0, r4
    52aa:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    52ac:	4d13      	ldr	r5, [pc, #76]	; (52fc <commit+0x8c>)
    52ae:	f3bf 8f5b 	dmb	ish
    52b2:	682b      	ldr	r3, [r5, #0]
    52b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    52b8:	079b      	lsls	r3, r3, #30
    52ba:	d401      	bmi.n	52c0 <commit+0x50>
		bt_finalize_init();
    52bc:	f001 fa70 	bl	67a0 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    52c0:	f3bf 8f5b 	dmb	ish
    52c4:	e855 4f00 	ldrex	r4, [r5]
    52c8:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    52cc:	e845 3200 	strex	r2, r3, [r5]
    52d0:	2a00      	cmp	r2, #0
    52d2:	d1f7      	bne.n	52c4 <commit+0x54>
    52d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    52d8:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    52dc:	d0e4      	beq.n	52a8 <commit+0x38>
		bt_settings_save_id();
    52de:	f7ff ffaf 	bl	5240 <bt_settings_save_id>
	return 0;
    52e2:	2400      	movs	r4, #0
    52e4:	e7e0      	b.n	52a8 <commit+0x38>
    52e6:	bf00      	nop
    52e8:	20000000 	.word	0x20000000
    52ec:	0002dce2 	.word	0x0002dce2
    52f0:	0002c080 	.word	0x0002c080
    52f4:	0002bfa8 	.word	0x0002bfa8
    52f8:	0002e9ec 	.word	0x0002e9ec
    52fc:	20000094 	.word	0x20000094

00005300 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    5300:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    5302:	f7fe fa19 	bl	3738 <settings_subsys_init>
	if (err) {
    5306:	4604      	mov	r4, r0
    5308:	b150      	cbz	r0, 5320 <bt_settings_init+0x20>
    530a:	4a06      	ldr	r2, [pc, #24]	; (5324 <bt_settings_init+0x24>)
    530c:	4b06      	ldr	r3, [pc, #24]	; (5328 <bt_settings_init+0x28>)
    530e:	1ad2      	subs	r2, r2, r3
    5310:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    5312:	0192      	lsls	r2, r2, #6
    5314:	4601      	mov	r1, r0
    5316:	f042 0201 	orr.w	r2, r2, #1
    531a:	4804      	ldr	r0, [pc, #16]	; (532c <bt_settings_init+0x2c>)
    531c:	f01e f995 	bl	2364a <log_1>
		return err;
	}

	return 0;
}
    5320:	4620      	mov	r0, r4
    5322:	bd10      	pop	{r4, pc}
    5324:	0002c080 	.word	0x0002c080
    5328:	0002bfa8 	.word	0x0002bfa8
    532c:	0002ea10 	.word	0x0002ea10

00005330 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    5330:	b5f0      	push	{r4, r5, r6, r7, lr}
    5332:	460b      	mov	r3, r1
	switch (src->type) {
    5334:	7801      	ldrb	r1, [r0, #0]
    5336:	2901      	cmp	r1, #1
{
    5338:	4602      	mov	r2, r0
	switch (src->type) {
    533a:	d015      	beq.n	5368 <uuid_to_uuid128+0x38>
    533c:	2902      	cmp	r1, #2
    533e:	d02b      	beq.n	5398 <uuid_to_uuid128+0x68>
    5340:	b989      	cbnz	r1, 5366 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    5342:	4c1c      	ldr	r4, [pc, #112]	; (53b4 <uuid_to_uuid128+0x84>)
    5344:	461d      	mov	r5, r3
    5346:	f104 0710 	add.w	r7, r4, #16
    534a:	6820      	ldr	r0, [r4, #0]
    534c:	6861      	ldr	r1, [r4, #4]
    534e:	462e      	mov	r6, r5
    5350:	c603      	stmia	r6!, {r0, r1}
    5352:	3408      	adds	r4, #8
    5354:	42bc      	cmp	r4, r7
    5356:	4635      	mov	r5, r6
    5358:	d1f7      	bne.n	534a <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
    535a:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    535c:	7821      	ldrb	r1, [r4, #0]
    535e:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    5360:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    5362:	0a12      	lsrs	r2, r2, #8
    5364:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    5366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    5368:	4c12      	ldr	r4, [pc, #72]	; (53b4 <uuid_to_uuid128+0x84>)
    536a:	461d      	mov	r5, r3
    536c:	f104 0710 	add.w	r7, r4, #16
    5370:	6820      	ldr	r0, [r4, #0]
    5372:	6861      	ldr	r1, [r4, #4]
    5374:	462e      	mov	r6, r5
    5376:	c603      	stmia	r6!, {r0, r1}
    5378:	3408      	adds	r4, #8
    537a:	42bc      	cmp	r4, r7
    537c:	4635      	mov	r5, r6
    537e:	d1f7      	bne.n	5370 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
    5380:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    5382:	7821      	ldrb	r1, [r4, #0]
    5384:	7031      	strb	r1, [r6, #0]
    5386:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    538a:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    538c:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    538e:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    5390:	0a12      	lsrs	r2, r2, #8
    5392:	7399      	strb	r1, [r3, #14]
    5394:	741a      	strb	r2, [r3, #16]
}
    5396:	e7e6      	b.n	5366 <uuid_to_uuid128+0x36>
    5398:	f100 0510 	add.w	r5, r0, #16
    539c:	6810      	ldr	r0, [r2, #0]
    539e:	6851      	ldr	r1, [r2, #4]
    53a0:	461c      	mov	r4, r3
    53a2:	c403      	stmia	r4!, {r0, r1}
    53a4:	3208      	adds	r2, #8
    53a6:	42aa      	cmp	r2, r5
    53a8:	4623      	mov	r3, r4
    53aa:	d1f7      	bne.n	539c <uuid_to_uuid128+0x6c>
    53ac:	7812      	ldrb	r2, [r2, #0]
    53ae:	7022      	strb	r2, [r4, #0]
    53b0:	e7d9      	b.n	5366 <uuid_to_uuid128+0x36>
    53b2:	bf00      	nop
    53b4:	0002ea44 	.word	0x0002ea44

000053b8 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    53b8:	b538      	push	{r3, r4, r5, lr}
    53ba:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    53bc:	4805      	ldr	r0, [pc, #20]	; (53d4 <bt_buf_get_rx+0x1c>)
    53be:	f020 fd13 	bl	25de8 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    53c2:	4604      	mov	r4, r0
    53c4:	b120      	cbz	r0, 53d0 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    53c6:	2100      	movs	r1, #0
    53c8:	3008      	adds	r0, #8
    53ca:	f020 fd32 	bl	25e32 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    53ce:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    53d0:	4620      	mov	r0, r4
    53d2:	bd38      	pop	{r3, r4, r5, pc}
    53d4:	20000d00 	.word	0x20000d00

000053d8 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    53d8:	b570      	push	{r4, r5, r6, lr}
    53da:	4602      	mov	r2, r0
    53dc:	460b      	mov	r3, r1
	__asm__ volatile(
    53de:	f04f 0120 	mov.w	r1, #32
    53e2:	f3ef 8511 	mrs	r5, BASEPRI
    53e6:	f381 8811 	msr	BASEPRI, r1
    53ea:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    53ee:	480c      	ldr	r0, [pc, #48]	; (5420 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    53f0:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    53f2:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    53f6:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
	__asm__ volatile(
    53fa:	f385 8811 	msr	BASEPRI, r5
    53fe:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    5402:	b924      	cbnz	r4, 540e <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    5404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5408:	2001      	movs	r0, #1
    540a:	f7ff bfd5 	b.w	53b8 <bt_buf_get_rx>
    540e:	2301      	movs	r3, #1
    5410:	f104 0008 	add.w	r0, r4, #8
    5414:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    5416:	81a1      	strh	r1, [r4, #12]
    5418:	f020 fd0b 	bl	25e32 <net_buf_simple_reserve>
}
    541c:	4620      	mov	r0, r4
    541e:	bd70      	pop	{r4, r5, r6, pc}
    5420:	20000000 	.word	0x20000000

00005424 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    5424:	b570      	push	{r4, r5, r6, lr}
    5426:	4604      	mov	r4, r0
	switch (evt) {
    5428:	2c0f      	cmp	r4, #15
{
    542a:	460d      	mov	r5, r1
    542c:	4610      	mov	r0, r2
    542e:	4619      	mov	r1, r3
	switch (evt) {
    5430:	d805      	bhi.n	543e <bt_buf_get_evt+0x1a>
    5432:	2c0d      	cmp	r4, #13
    5434:	d912      	bls.n	545c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    5436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    543a:	f7ff bfcd 	b.w	53d8 <bt_buf_get_cmd_complete>
	switch (evt) {
    543e:	2c13      	cmp	r4, #19
    5440:	d10c      	bne.n	545c <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    5442:	480b      	ldr	r0, [pc, #44]	; (5470 <bt_buf_get_evt+0x4c>)
    5444:	f020 fcd0 	bl	25de8 <net_buf_alloc_fixed>
			if (buf) {
    5448:	4604      	mov	r4, r0
    544a:	b128      	cbz	r0, 5458 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    544c:	2100      	movs	r1, #0
    544e:	3008      	adds	r0, #8
    5450:	f020 fcef 	bl	25e32 <net_buf_simple_reserve>
    5454:	2301      	movs	r3, #1
    5456:	7523      	strb	r3, [r4, #20]
}
    5458:	4620      	mov	r0, r4
    545a:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    545c:	4602      	mov	r2, r0
    545e:	460b      	mov	r3, r1
		if (discardable) {
    5460:	b10d      	cbz	r5, 5466 <bt_buf_get_evt+0x42>
    5462:	4804      	ldr	r0, [pc, #16]	; (5474 <bt_buf_get_evt+0x50>)
    5464:	e7ee      	b.n	5444 <bt_buf_get_evt+0x20>
}
    5466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    546a:	2001      	movs	r0, #1
    546c:	f7ff bfa4 	b.w	53b8 <bt_buf_get_rx>
    5470:	20000d28 	.word	0x20000d28
    5474:	20000c88 	.word	0x20000c88

00005478 <hci_data_buf_overflow>:
    5478:	4905      	ldr	r1, [pc, #20]	; (5490 <hci_data_buf_overflow+0x18>)
    547a:	4a06      	ldr	r2, [pc, #24]	; (5494 <hci_data_buf_overflow+0x1c>)
	bt_conn_unref(conn);
}

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    547c:	6883      	ldr	r3, [r0, #8]

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    547e:	4806      	ldr	r0, [pc, #24]	; (5498 <hci_data_buf_overflow+0x20>)
    5480:	1a52      	subs	r2, r2, r1
    5482:	08d2      	lsrs	r2, r2, #3
    5484:	0192      	lsls	r2, r2, #6
    5486:	7819      	ldrb	r1, [r3, #0]
    5488:	f042 0202 	orr.w	r2, r2, #2
    548c:	f01e b8dd 	b.w	2364a <log_1>
    5490:	0002bfa8 	.word	0x0002bfa8
    5494:	0002c068 	.word	0x0002c068
    5498:	0002ea5c 	.word	0x0002ea5c

0000549c <le_data_len_change>:
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    549c:	6883      	ldr	r3, [r0, #8]
{
    549e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    54a0:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    54a2:	4620      	mov	r0, r4
    54a4:	f002 faa6 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    54a8:	b960      	cbnz	r0, 54c4 <le_data_len_change+0x28>
    54aa:	4a08      	ldr	r2, [pc, #32]	; (54cc <le_data_len_change+0x30>)
    54ac:	4b08      	ldr	r3, [pc, #32]	; (54d0 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    54ae:	4809      	ldr	r0, [pc, #36]	; (54d4 <le_data_len_change+0x38>)
    54b0:	1ad2      	subs	r2, r2, r3
    54b2:	08d2      	lsrs	r2, r2, #3
    54b4:	0192      	lsls	r2, r2, #6
    54b6:	4621      	mov	r1, r4
    54b8:	f042 0201 	orr.w	r2, r2, #1
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
    54bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    54c0:	f01e b8c3 	b.w	2364a <log_1>
}
    54c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    54c8:	f01f bb9e 	b.w	24c08 <bt_conn_unref>
    54cc:	0002c068 	.word	0x0002c068
    54d0:	0002bfa8 	.word	0x0002bfa8
    54d4:	0002ea84 	.word	0x0002ea84

000054d8 <hci_disconn_complete_prio>:
{
    54d8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    54da:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    54dc:	781a      	ldrb	r2, [r3, #0]
    54de:	b9da      	cbnz	r2, 5518 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    54e0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    54e4:	4628      	mov	r0, r5
    54e6:	f002 fa85 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    54ea:	4604      	mov	r4, r0
    54ec:	b960      	cbnz	r0, 5508 <hci_disconn_complete_prio+0x30>
    54ee:	4b0b      	ldr	r3, [pc, #44]	; (551c <hci_disconn_complete_prio+0x44>)
    54f0:	4a0b      	ldr	r2, [pc, #44]	; (5520 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    54f2:	480c      	ldr	r0, [pc, #48]	; (5524 <hci_disconn_complete_prio+0x4c>)
    54f4:	1ad2      	subs	r2, r2, r3
    54f6:	08d2      	lsrs	r2, r2, #3
    54f8:	0192      	lsls	r2, r2, #6
    54fa:	4629      	mov	r1, r5
    54fc:	f042 0201 	orr.w	r2, r2, #1
}
    5500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5504:	f01e b8a1 	b.w	2364a <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5508:	2101      	movs	r1, #1
    550a:	f002 fa7f 	bl	7a0c <bt_conn_set_state>
	bt_conn_unref(conn);
    550e:	4620      	mov	r0, r4
}
    5510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    5514:	f01f bb78 	b.w	24c08 <bt_conn_unref>
}
    5518:	bd38      	pop	{r3, r4, r5, pc}
    551a:	bf00      	nop
    551c:	0002bfa8 	.word	0x0002bfa8
    5520:	0002c068 	.word	0x0002c068
    5524:	0002eaa8 	.word	0x0002eaa8

00005528 <hci_disconn_complete>:
{
    5528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    552a:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    552c:	7835      	ldrb	r5, [r6, #0]
    552e:	b9f5      	cbnz	r5, 556e <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5530:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    5534:	4638      	mov	r0, r7
    5536:	f002 fa5d 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    553a:	4604      	mov	r4, r0
    553c:	b960      	cbnz	r0, 5558 <hci_disconn_complete+0x30>
    553e:	4b0c      	ldr	r3, [pc, #48]	; (5570 <hci_disconn_complete+0x48>)
    5540:	4a0c      	ldr	r2, [pc, #48]	; (5574 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5542:	480d      	ldr	r0, [pc, #52]	; (5578 <hci_disconn_complete+0x50>)
    5544:	1ad2      	subs	r2, r2, r3
    5546:	08d2      	lsrs	r2, r2, #3
    5548:	0192      	lsls	r2, r2, #6
    554a:	4639      	mov	r1, r7
    554c:	f042 0201 	orr.w	r2, r2, #1
}
    5550:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5554:	f01e b879 	b.w	2364a <log_1>
	conn->err = evt->reason;
    5558:	78f3      	ldrb	r3, [r6, #3]
    555a:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    555c:	4629      	mov	r1, r5
    555e:	f002 fa55 	bl	7a0c <bt_conn_set_state>
	conn->handle = 0U;
    5562:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    5564:	4620      	mov	r0, r4
}
    5566:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    556a:	f01f bb4d 	b.w	24c08 <bt_conn_unref>
}
    556e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5570:	0002bfa8 	.word	0x0002bfa8
    5574:	0002c068 	.word	0x0002c068
    5578:	0002eaa8 	.word	0x0002eaa8

0000557c <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
    557c:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    557e:	2101      	movs	r1, #1
    5580:	3008      	adds	r0, #8
    5582:	f020 fcbf 	bl	25f04 <net_buf_simple_pull_mem>
    5586:	4b06      	ldr	r3, [pc, #24]	; (55a0 <hci_hardware_error+0x24>)
    5588:	4a06      	ldr	r2, [pc, #24]	; (55a4 <hci_hardware_error+0x28>)
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    558a:	7801      	ldrb	r1, [r0, #0]
    558c:	4806      	ldr	r0, [pc, #24]	; (55a8 <hci_hardware_error+0x2c>)
    558e:	1ad2      	subs	r2, r2, r3
    5590:	08d2      	lsrs	r2, r2, #3
    5592:	0192      	lsls	r2, r2, #6
}
    5594:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    5598:	f042 0201 	orr.w	r2, r2, #1
    559c:	f01e b855 	b.w	2364a <log_1>
    55a0:	0002bfa8 	.word	0x0002bfa8
    55a4:	0002c068 	.word	0x0002c068
    55a8:	0002eace 	.word	0x0002eace

000055ac <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    55ac:	b510      	push	{r4, lr}
    55ae:	4a0a      	ldr	r2, [pc, #40]	; (55d8 <hci_vendor_event+0x2c>)
    55b0:	4c0a      	ldr	r4, [pc, #40]	; (55dc <hci_vendor_event+0x30>)
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    55b2:	8981      	ldrh	r1, [r0, #12]
    55b4:	6880      	ldr	r0, [r0, #8]
    55b6:	1aa4      	subs	r4, r4, r2
    55b8:	f7ff fd04 	bl	4fc4 <bt_hex_real>
    55bc:	f7fd fb08 	bl	2bd0 <log_strdup>
    55c0:	08e4      	lsrs	r4, r4, #3
    55c2:	01a4      	lsls	r4, r4, #6
    55c4:	f044 0402 	orr.w	r4, r4, #2
    55c8:	4601      	mov	r1, r0
    55ca:	4622      	mov	r2, r4
    55cc:	4804      	ldr	r0, [pc, #16]	; (55e0 <hci_vendor_event+0x34>)
			bt_hex(buf->data, buf->len));
	}
}
    55ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    55d2:	f01e b83a 	b.w	2364a <log_1>
    55d6:	bf00      	nop
    55d8:	0002bfa8 	.word	0x0002bfa8
    55dc:	0002c068 	.word	0x0002c068
    55e0:	0002eaf0 	.word	0x0002eaf0

000055e4 <le_conn_update_complete>:
{
    55e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    55e6:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    55e8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    55ec:	4630      	mov	r0, r6
    55ee:	f002 fa01 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    55f2:	4604      	mov	r4, r0
    55f4:	b960      	cbnz	r0, 5610 <le_conn_update_complete+0x2c>
    55f6:	4a1f      	ldr	r2, [pc, #124]	; (5674 <le_conn_update_complete+0x90>)
    55f8:	4b1f      	ldr	r3, [pc, #124]	; (5678 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    55fa:	4820      	ldr	r0, [pc, #128]	; (567c <le_conn_update_complete+0x98>)
    55fc:	1ad2      	subs	r2, r2, r3
    55fe:	08d2      	lsrs	r2, r2, #3
    5600:	0192      	lsls	r2, r2, #6
    5602:	f042 0201 	orr.w	r2, r2, #1
    5606:	4631      	mov	r1, r6
    5608:	f01e f81f 	bl	2364a <log_1>
}
    560c:	b002      	add	sp, #8
    560e:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    5610:	782b      	ldrb	r3, [r5, #0]
    5612:	b9bb      	cbnz	r3, 5644 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    5614:	792a      	ldrb	r2, [r5, #4]
    5616:	78eb      	ldrb	r3, [r5, #3]
    5618:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    561c:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    5620:	79aa      	ldrb	r2, [r5, #6]
    5622:	796b      	ldrb	r3, [r5, #5]
    5624:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5628:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    562c:	79eb      	ldrb	r3, [r5, #7]
    562e:	7a2a      	ldrb	r2, [r5, #8]
    5630:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    5634:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    5638:	f001 fff8 	bl	762c <notify_le_param_updated>
	bt_conn_unref(conn);
    563c:	4620      	mov	r0, r4
    563e:	f01f fae3 	bl	24c08 <bt_conn_unref>
    5642:	e7e3      	b.n	560c <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    5644:	2b1a      	cmp	r3, #26
    5646:	d1f9      	bne.n	563c <le_conn_update_complete+0x58>
    5648:	78c3      	ldrb	r3, [r0, #3]
    564a:	2b01      	cmp	r3, #1
    564c:	d1f6      	bne.n	563c <le_conn_update_complete+0x58>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    564e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    5652:	3004      	adds	r0, #4
    5654:	f01f f916 	bl	24884 <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    5658:	0543      	lsls	r3, r0, #21
    565a:	d4ef      	bmi.n	563c <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    565c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    5660:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    5662:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    5664:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5668:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    566a:	4620      	mov	r0, r4
    566c:	f002 fe1c 	bl	82a8 <bt_l2cap_update_conn_param>
    5670:	e7e4      	b.n	563c <le_conn_update_complete+0x58>
    5672:	bf00      	nop
    5674:	0002c068 	.word	0x0002c068
    5678:	0002bfa8 	.word	0x0002bfa8
    567c:	0002ea84 	.word	0x0002ea84

00005680 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    5680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5682:	4f0a      	ldr	r7, [pc, #40]	; (56ac <id_find+0x2c>)
{
    5684:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5686:	2500      	movs	r5, #0
    5688:	79fb      	ldrb	r3, [r7, #7]
    568a:	b2ec      	uxtb	r4, r5
    568c:	42a3      	cmp	r3, r4
    568e:	d802      	bhi.n	5696 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5690:	f06f 0401 	mvn.w	r4, #1
    5694:	e008      	b.n	56a8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5696:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    569a:	4439      	add	r1, r7
    569c:	4630      	mov	r0, r6
    569e:	f01f f920 	bl	248e2 <bt_addr_le_cmp>
    56a2:	3501      	adds	r5, #1
    56a4:	2800      	cmp	r0, #0
    56a6:	d1ef      	bne.n	5688 <id_find+0x8>
}
    56a8:	4620      	mov	r0, r4
    56aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56ac:	20000000 	.word	0x20000000

000056b0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    56b0:	6843      	ldr	r3, [r0, #4]
{
    56b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    56b4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    56b6:	0558      	lsls	r0, r3, #21
    56b8:	d502      	bpl.n	56c0 <valid_adv_param+0x10>
		return false;
    56ba:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    56bc:	b003      	add	sp, #12
    56be:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    56c0:	6922      	ldr	r2, [r4, #16]
    56c2:	b10a      	cbz	r2, 56c8 <valid_adv_param+0x18>
    56c4:	07d9      	lsls	r1, r3, #31
    56c6:	d5f8      	bpl.n	56ba <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    56c8:	4d1a      	ldr	r5, [pc, #104]	; (5734 <valid_adv_param+0x84>)
    56ca:	7820      	ldrb	r0, [r4, #0]
    56cc:	79eb      	ldrb	r3, [r5, #7]
    56ce:	4283      	cmp	r3, r0
    56d0:	d9f3      	bls.n	56ba <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    56d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    56d6:	2300      	movs	r3, #0
    56d8:	4669      	mov	r1, sp
    56da:	4428      	add	r0, r5
    56dc:	9300      	str	r3, [sp, #0]
    56de:	f8cd 3003 	str.w	r3, [sp, #3]
    56e2:	f01f f8fe 	bl	248e2 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    56e6:	2800      	cmp	r0, #0
    56e8:	d0e7      	beq.n	56ba <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    56ea:	6860      	ldr	r0, [r4, #4]
    56ec:	07c2      	lsls	r2, r0, #31
    56ee:	d406      	bmi.n	56fe <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    56f0:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    56f4:	2b08      	cmp	r3, #8
    56f6:	d802      	bhi.n	56fe <valid_adv_param+0x4e>
    56f8:	68a3      	ldr	r3, [r4, #8]
    56fa:	2b9f      	cmp	r3, #159	; 0x9f
    56fc:	d9dd      	bls.n	56ba <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    56fe:	f010 0f30 	tst.w	r0, #48	; 0x30
    5702:	d002      	beq.n	570a <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    5704:	6923      	ldr	r3, [r4, #16]
    5706:	2b00      	cmp	r3, #0
    5708:	d0d7      	beq.n	56ba <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    570a:	06c3      	lsls	r3, r0, #27
    570c:	d401      	bmi.n	5712 <valid_adv_param+0x62>
    570e:	6923      	ldr	r3, [r4, #16]
    5710:	b943      	cbnz	r3, 5724 <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    5712:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    5716:	429a      	cmp	r2, r3
    5718:	d8cf      	bhi.n	56ba <valid_adv_param+0xa>
    571a:	2a1f      	cmp	r2, #31
    571c:	d9cd      	bls.n	56ba <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    571e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    5722:	d8ca      	bhi.n	56ba <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    5724:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    5728:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    572c:	bf18      	it	ne
    572e:	2001      	movne	r0, #1
    5730:	e7c4      	b.n	56bc <valid_adv_param+0xc>
    5732:	bf00      	nop
    5734:	20000000 	.word	0x20000000

00005738 <hci_cmd_done>:
{
    5738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    573c:	4607      	mov	r7, r0
    573e:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5740:	7990      	ldrb	r0, [r2, #6]
    5742:	4e34      	ldr	r6, [pc, #208]	; (5814 <hci_cmd_done+0xdc>)
{
    5744:	4688      	mov	r8, r1
    5746:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    5748:	f012 fdb0 	bl	182ac <net_buf_pool_get>
    574c:	4286      	cmp	r6, r0
    574e:	d016      	beq.n	577e <hci_cmd_done+0x46>
    5750:	4b31      	ldr	r3, [pc, #196]	; (5818 <hci_cmd_done+0xe0>)
    5752:	4d32      	ldr	r5, [pc, #200]	; (581c <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    5754:	79a0      	ldrb	r0, [r4, #6]
    5756:	9700      	str	r7, [sp, #0]
    5758:	1aed      	subs	r5, r5, r3
    575a:	08ed      	lsrs	r5, r5, #3
    575c:	9001      	str	r0, [sp, #4]
    575e:	f012 fda5 	bl	182ac <net_buf_pool_get>
    5762:	01ad      	lsls	r5, r5, #6
    5764:	f045 0502 	orr.w	r5, r5, #2
    5768:	e9cd 0602 	strd	r0, r6, [sp, #8]
    576c:	462b      	mov	r3, r5
    576e:	482c      	ldr	r0, [pc, #176]	; (5820 <hci_cmd_done+0xe8>)
    5770:	2204      	movs	r2, #4
    5772:	4669      	mov	r1, sp
    5774:	f01d ffb2 	bl	236dc <log_n>
}
    5778:	b005      	add	sp, #20
    577a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    577e:	4620      	mov	r0, r4
    5780:	f012 fd9c 	bl	182bc <net_buf_id>
    5784:	4d27      	ldr	r5, [pc, #156]	; (5824 <hci_cmd_done+0xec>)
    5786:	f04f 090c 	mov.w	r9, #12
    578a:	fb09 5300 	mla	r3, r9, r0, r5
    578e:	885b      	ldrh	r3, [r3, #2]
    5790:	42bb      	cmp	r3, r7
    5792:	d011      	beq.n	57b8 <hci_cmd_done+0x80>
    5794:	4b20      	ldr	r3, [pc, #128]	; (5818 <hci_cmd_done+0xe0>)
    5796:	4e21      	ldr	r6, [pc, #132]	; (581c <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5798:	4620      	mov	r0, r4
    579a:	1af6      	subs	r6, r6, r3
    579c:	f012 fd8e 	bl	182bc <net_buf_id>
    57a0:	08f6      	lsrs	r6, r6, #3
    57a2:	fb09 5000 	mla	r0, r9, r0, r5
    57a6:	01b6      	lsls	r6, r6, #6
    57a8:	f046 0602 	orr.w	r6, r6, #2
    57ac:	8842      	ldrh	r2, [r0, #2]
    57ae:	481e      	ldr	r0, [pc, #120]	; (5828 <hci_cmd_done+0xf0>)
    57b0:	4633      	mov	r3, r6
    57b2:	4639      	mov	r1, r7
    57b4:	f01d ff5d 	bl	23672 <log_2>
	if (cmd(buf)->state && !status) {
    57b8:	4620      	mov	r0, r4
    57ba:	f012 fd7f 	bl	182bc <net_buf_id>
    57be:	260c      	movs	r6, #12
    57c0:	fb06 5000 	mla	r0, r6, r0, r5
    57c4:	6843      	ldr	r3, [r0, #4]
    57c6:	b16b      	cbz	r3, 57e4 <hci_cmd_done+0xac>
    57c8:	f1b8 0f00 	cmp.w	r8, #0
    57cc:	d10a      	bne.n	57e4 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    57ce:	4620      	mov	r0, r4
    57d0:	f012 fd74 	bl	182bc <net_buf_id>
    57d4:	fb06 5000 	mla	r0, r6, r0, r5
    57d8:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    57da:	e9d3 0100 	ldrd	r0, r1, [r3]
    57de:	7a1a      	ldrb	r2, [r3, #8]
    57e0:	f01f f86e 	bl	248c0 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    57e4:	4620      	mov	r0, r4
    57e6:	f012 fd69 	bl	182bc <net_buf_id>
    57ea:	260c      	movs	r6, #12
    57ec:	fb06 5000 	mla	r0, r6, r0, r5
    57f0:	6883      	ldr	r3, [r0, #8]
    57f2:	2b00      	cmp	r3, #0
    57f4:	d0c0      	beq.n	5778 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    57f6:	4620      	mov	r0, r4
    57f8:	f012 fd60 	bl	182bc <net_buf_id>
    57fc:	4370      	muls	r0, r6
    57fe:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    5802:	4620      	mov	r0, r4
    5804:	f012 fd5a 	bl	182bc <net_buf_id>
    5808:	fb06 5500 	mla	r5, r6, r0, r5
    580c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    580e:	f01a fc65 	bl	200dc <z_impl_k_sem_give>
}
    5812:	e7b1      	b.n	5778 <hci_cmd_done+0x40>
    5814:	20000cd8 	.word	0x20000cd8
    5818:	0002bfa8 	.word	0x0002bfa8
    581c:	0002c068 	.word	0x0002c068
    5820:	0002eb14 	.word	0x0002eb14
    5824:	20002980 	.word	0x20002980
    5828:	0002eb49 	.word	0x0002eb49

0000582c <handle_event>:
{
    582c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    582e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5832:	4605      	mov	r5, r0
    5834:	4608      	mov	r0, r1
		if (handler->event != event) {
    5836:	7811      	ldrb	r1, [r2, #0]
    5838:	42a9      	cmp	r1, r5
    583a:	d01a      	beq.n	5872 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    583c:	3208      	adds	r2, #8
    583e:	429a      	cmp	r2, r3
    5840:	d1f9      	bne.n	5836 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    5842:	8986      	ldrh	r6, [r0, #12]
    5844:	4b16      	ldr	r3, [pc, #88]	; (58a0 <handle_event+0x74>)
    5846:	4c17      	ldr	r4, [pc, #92]	; (58a4 <handle_event+0x78>)
    5848:	6880      	ldr	r0, [r0, #8]
    584a:	4631      	mov	r1, r6
    584c:	1ae4      	subs	r4, r4, r3
    584e:	f7ff fbb9 	bl	4fc4 <bt_hex_real>
    5852:	f7fd f9bd 	bl	2bd0 <log_strdup>
    5856:	08e4      	lsrs	r4, r4, #3
    5858:	01a4      	lsls	r4, r4, #6
    585a:	f044 0402 	orr.w	r4, r4, #2
    585e:	4603      	mov	r3, r0
    5860:	f8ad 4000 	strh.w	r4, [sp]
    5864:	4810      	ldr	r0, [pc, #64]	; (58a8 <handle_event+0x7c>)
    5866:	4632      	mov	r2, r6
    5868:	4629      	mov	r1, r5
    586a:	f01d ff1b 	bl	236a4 <log_3>
}
    586e:	b002      	add	sp, #8
    5870:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    5872:	8981      	ldrh	r1, [r0, #12]
    5874:	7853      	ldrb	r3, [r2, #1]
    5876:	428b      	cmp	r3, r1
    5878:	d90d      	bls.n	5896 <handle_event+0x6a>
    587a:	4a09      	ldr	r2, [pc, #36]	; (58a0 <handle_event+0x74>)
    587c:	4b09      	ldr	r3, [pc, #36]	; (58a4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    587e:	480b      	ldr	r0, [pc, #44]	; (58ac <handle_event+0x80>)
    5880:	1a9b      	subs	r3, r3, r2
    5882:	08db      	lsrs	r3, r3, #3
    5884:	019b      	lsls	r3, r3, #6
    5886:	f043 0301 	orr.w	r3, r3, #1
    588a:	462a      	mov	r2, r5
}
    588c:	b002      	add	sp, #8
    588e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    5892:	f01d beee 	b.w	23672 <log_2>
		handler->handler(buf);
    5896:	6853      	ldr	r3, [r2, #4]
}
    5898:	b002      	add	sp, #8
    589a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    589e:	4718      	bx	r3
    58a0:	0002bfa8 	.word	0x0002bfa8
    58a4:	0002c068 	.word	0x0002c068
    58a8:	0002eb9e 	.word	0x0002eb9e
    58ac:	0002eb7c 	.word	0x0002eb7c

000058b0 <hci_le_meta_event>:
{
    58b0:	b510      	push	{r4, lr}
    58b2:	2101      	movs	r1, #1
    58b4:	4604      	mov	r4, r0
    58b6:	3008      	adds	r0, #8
    58b8:	f020 fb24 	bl	25f04 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    58bc:	4621      	mov	r1, r4
    58be:	4a03      	ldr	r2, [pc, #12]	; (58cc <hci_le_meta_event+0x1c>)
    58c0:	7800      	ldrb	r0, [r0, #0]
}
    58c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    58c6:	2307      	movs	r3, #7
    58c8:	f7ff bfb0 	b.w	582c <handle_event>
    58cc:	0002c2ac 	.word	0x0002c2ac

000058d0 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    58d0:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    58d2:	4c0c      	ldr	r4, [pc, #48]	; (5904 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    58d4:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    58d6:	2205      	movs	r2, #5
    58d8:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    58dc:	f002 f9c6 	bl	7c6c <bt_conn_lookup_state_le>
		if (!conn) {
    58e0:	b970      	cbnz	r0, 5900 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    58e2:	4b09      	ldr	r3, [pc, #36]	; (5908 <find_pending_connect.part.0+0x38>)
    58e4:	6818      	ldr	r0, [r3, #0]
    58e6:	889a      	ldrh	r2, [r3, #4]
    58e8:	9000      	str	r0, [sp, #0]
    58ea:	799b      	ldrb	r3, [r3, #6]
    58ec:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    58f0:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    58f4:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    58f8:	2204      	movs	r2, #4
    58fa:	4669      	mov	r1, sp
    58fc:	f002 f9b6 	bl	7c6c <bt_conn_lookup_state_le>
}
    5900:	b002      	add	sp, #8
    5902:	bd10      	pop	{r4, pc}
    5904:	20000000 	.word	0x20000000
    5908:	0002c160 	.word	0x0002c160

0000590c <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    590c:	b530      	push	{r4, r5, lr}
    590e:	4d17      	ldr	r5, [pc, #92]	; (596c <id_create.isra.0+0x60>)
    5910:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    5914:	b085      	sub	sp, #20
    5916:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5918:	460c      	mov	r4, r1
    591a:	b1a9      	cbz	r1, 5948 <id_create.isra.0+0x3c>
    591c:	2300      	movs	r3, #0
    591e:	a902      	add	r1, sp, #8
    5920:	4620      	mov	r0, r4
    5922:	9302      	str	r3, [sp, #8]
    5924:	f8cd 300b 	str.w	r3, [sp, #11]
    5928:	f01e ffdb 	bl	248e2 <bt_addr_le_cmp>
    592c:	b160      	cbz	r0, 5948 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    592e:	4621      	mov	r1, r4
    5930:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5932:	f01e ffde 	bl	248f2 <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5936:	480e      	ldr	r0, [pc, #56]	; (5970 <id_create.isra.0+0x64>)
    5938:	f01e ff9e 	bl	24878 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    593c:	0783      	lsls	r3, r0, #30
    593e:	d501      	bpl.n	5944 <id_create.isra.0+0x38>
		bt_settings_save_id();
    5940:	f7ff fc7e 	bl	5240 <bt_settings_save_id>
}
    5944:	b005      	add	sp, #20
    5946:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5948:	4668      	mov	r0, sp
    594a:	f01e ff66 	bl	2481a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    594e:	4668      	mov	r0, sp
    5950:	f7ff fe96 	bl	5680 <id_find>
    5954:	2800      	cmp	r0, #0
    5956:	daf7      	bge.n	5948 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5958:	4669      	mov	r1, sp
    595a:	4628      	mov	r0, r5
    595c:	f01e ffc9 	bl	248f2 <bt_addr_le_copy>
		if (addr) {
    5960:	2c00      	cmp	r4, #0
    5962:	d0e8      	beq.n	5936 <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5964:	4629      	mov	r1, r5
    5966:	4620      	mov	r0, r4
    5968:	e7e3      	b.n	5932 <id_create.isra.0+0x26>
    596a:	bf00      	nop
    596c:	20000000 	.word	0x20000000
    5970:	20000094 	.word	0x20000094

00005974 <hci_num_completed_packets>:
{
    5974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5978:	4d3d      	ldr	r5, [pc, #244]	; (5a70 <hci_num_completed_packets+0xfc>)
    597a:	4b3e      	ldr	r3, [pc, #248]	; (5a74 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    597c:	f8d0 8008 	ldr.w	r8, [r0, #8]
    5980:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 5a80 <hci_num_completed_packets+0x10c>
    5984:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    5986:	2600      	movs	r6, #0
    5988:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    598a:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    598c:	f898 3000 	ldrb.w	r3, [r8]
    5990:	429e      	cmp	r6, r3
    5992:	db01      	blt.n	5998 <hci_num_completed_packets+0x24>
}
    5994:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5998:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    599c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    59a0:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    59a4:	4658      	mov	r0, fp
    59a6:	f002 f825 	bl	79f4 <bt_conn_lookup_handle>
		if (!conn) {
    59aa:	4604      	mov	r4, r0
    59ac:	b1d8      	cbz	r0, 59e6 <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    59ae:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    59b2:	2f00      	cmp	r7, #0
    59b4:	d033      	beq.n	5a1e <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    59b6:	f04f 0320 	mov.w	r3, #32
    59ba:	f3ef 8211 	mrs	r2, BASEPRI
    59be:	f383 8811 	msr	BASEPRI, r3
    59c2:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    59c6:	69e3      	ldr	r3, [r4, #28]
    59c8:	b1b3      	cbz	r3, 59f8 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    59ca:	3b01      	subs	r3, #1
    59cc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    59ce:	f382 8811 	msr	BASEPRI, r2
    59d2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    59d6:	4620      	mov	r0, r4
    59d8:	f001 fe24 	bl	7624 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    59dc:	3f01      	subs	r7, #1
    59de:	f01a fb7d 	bl	200dc <z_impl_k_sem_give>
    59e2:	b2bf      	uxth	r7, r7
    59e4:	e7e5      	b.n	59b2 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    59e6:	01aa      	lsls	r2, r5, #6
    59e8:	4823      	ldr	r0, [pc, #140]	; (5a78 <hci_num_completed_packets+0x104>)
    59ea:	f042 0201 	orr.w	r2, r2, #1
    59ee:	4659      	mov	r1, fp
    59f0:	f01d fe2b 	bl	2364a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    59f4:	3601      	adds	r6, #1
    59f6:	e7c9      	b.n	598c <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    59f8:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    59fa:	b12b      	cbz	r3, 5a08 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    59fc:	69a1      	ldr	r1, [r4, #24]
    59fe:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    5a00:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5a02:	428b      	cmp	r3, r1
	list->tail = node;
    5a04:	bf08      	it	eq
    5a06:	61a0      	streq	r0, [r4, #24]
    5a08:	f382 8811 	msr	BASEPRI, r2
    5a0c:	f3bf 8f6f 	isb	sy
			if (!node) {
    5a10:	b94b      	cbnz	r3, 5a26 <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    5a12:	01a9      	lsls	r1, r5, #6
    5a14:	4819      	ldr	r0, [pc, #100]	; (5a7c <hci_num_completed_packets+0x108>)
    5a16:	f041 0101 	orr.w	r1, r1, #1
    5a1a:	f01d fe09 	bl	23630 <log_0>
		bt_conn_unref(conn);
    5a1e:	4620      	mov	r0, r4
    5a20:	f01f f8f2 	bl	24c08 <bt_conn_unref>
    5a24:	e7e6      	b.n	59f4 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    5a26:	f04f 0220 	mov.w	r2, #32
    5a2a:	f3ef 8111 	mrs	r1, BASEPRI
    5a2e:	f382 8811 	msr	BASEPRI, r2
    5a32:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    5a36:	68da      	ldr	r2, [r3, #12]
    5a38:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    5a3a:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    5a3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5a40:	f8c3 900c 	str.w	r9, [r3, #12]
    5a44:	b98a      	cbnz	r2, 5a6a <hci_num_completed_packets+0xf6>
	list->head = node;
    5a46:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    5a4a:	f381 8811 	msr	BASEPRI, r1
    5a4e:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    5a52:	2101      	movs	r1, #1
    5a54:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a58:	f01e ff14 	bl	24884 <atomic_or>
    5a5c:	07c3      	lsls	r3, r0, #31
    5a5e:	d4ba      	bmi.n	59d6 <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    5a60:	4659      	mov	r1, fp
    5a62:	4650      	mov	r0, sl
    5a64:	f025 fa98 	bl	2af98 <k_queue_append>
    5a68:	e7b5      	b.n	59d6 <hci_num_completed_packets+0x62>
	parent->next = child;
    5a6a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5a6c:	6263      	str	r3, [r4, #36]	; 0x24
}
    5a6e:	e7ec      	b.n	5a4a <hci_num_completed_packets+0xd6>
    5a70:	0002c068 	.word	0x0002c068
    5a74:	0002bfa8 	.word	0x0002bfa8
    5a78:	0002ebc0 	.word	0x0002ebc0
    5a7c:	0002ebdc 	.word	0x0002ebdc
    5a80:	20001458 	.word	0x20001458

00005a84 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a86:	4b28      	ldr	r3, [pc, #160]	; (5b28 <le_adv_start_add_conn+0xa4>)
    5a88:	b085      	sub	sp, #20
    5a8a:	4605      	mov	r5, r0
    5a8c:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    5a8e:	7801      	ldrb	r1, [r0, #0]
    5a90:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5a94:	f01e fef0 	bl	24878 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5a98:	f010 0f40 	tst.w	r0, #64	; 0x40
    5a9c:	461a      	mov	r2, r3
    5a9e:	d008      	beq.n	5ab2 <le_adv_start_add_conn+0x2e>
    5aa0:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5aa4:	f01e fee8 	bl	24878 <atomic_get>
    5aa8:	05c0      	lsls	r0, r0, #23
    5aaa:	d502      	bpl.n	5ab2 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    5aac:	7e1b      	ldrb	r3, [r3, #24]
    5aae:	428b      	cmp	r3, r1
    5ab0:	d131      	bne.n	5b16 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    5ab2:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5ab4:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    5ab6:	f816 3b09 	ldrb.w	r3, [r6], #9
    5aba:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5abe:	4630      	mov	r0, r6
    5ac0:	2300      	movs	r3, #0
    5ac2:	9300      	str	r3, [sp, #0]
    5ac4:	f8cd 3003 	str.w	r3, [sp, #3]
    5ac8:	f01e ff0b 	bl	248e2 <bt_addr_le_cmp>
    5acc:	4604      	mov	r4, r0
    5ace:	7828      	ldrb	r0, [r5, #0]
    5ad0:	b164      	cbz	r4, 5aec <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    5ad2:	4631      	mov	r1, r6
    5ad4:	f002 f8a4 	bl	7c20 <bt_conn_exists_le>
    5ad8:	4604      	mov	r4, r0
    5ada:	b9f8      	cbnz	r0, 5b1c <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    5adc:	7828      	ldrb	r0, [r5, #0]
    5ade:	4631      	mov	r1, r6
    5ae0:	f001 ff5a 	bl	7998 <bt_conn_add_le>
	if (!conn) {
    5ae4:	4605      	mov	r5, r0
    5ae6:	b1e0      	cbz	r0, 5b22 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5ae8:	2105      	movs	r1, #5
    5aea:	e00e      	b.n	5b0a <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    5aec:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    5af0:	9302      	str	r3, [sp, #8]
    5af2:	a902      	add	r1, sp, #8
    5af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5af8:	f8ad 300c 	strh.w	r3, [sp, #12]
    5afc:	f88d 300e 	strb.w	r3, [sp, #14]
    5b00:	f001 ff4a 	bl	7998 <bt_conn_add_le>
		if (!conn) {
    5b04:	4605      	mov	r5, r0
    5b06:	b160      	cbz	r0, 5b22 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    5b08:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5b0a:	f001 ff7f 	bl	7a0c <bt_conn_set_state>
	*out_conn = conn;
    5b0e:	603d      	str	r5, [r7, #0]
	return 0;
}
    5b10:	4620      	mov	r0, r4
    5b12:	b005      	add	sp, #20
    5b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    5b16:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5b1a:	e7f9      	b.n	5b10 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    5b1c:	f06f 0415 	mvn.w	r4, #21
    5b20:	e7f6      	b.n	5b10 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    5b22:	f06f 040b 	mvn.w	r4, #11
    5b26:	e7f3      	b.n	5b10 <le_adv_start_add_conn+0x8c>
    5b28:	20000000 	.word	0x20000000

00005b2c <hci_cmd_status>:
{
    5b2c:	b538      	push	{r3, r4, r5, lr}
    5b2e:	2104      	movs	r1, #4
    5b30:	4604      	mov	r4, r0
    5b32:	3008      	adds	r0, #8
    5b34:	f020 f9e6 	bl	25f04 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5b38:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5b3a:	7801      	ldrb	r1, [r0, #0]
    5b3c:	8840      	ldrh	r0, [r0, #2]
    5b3e:	4622      	mov	r2, r4
    5b40:	f7ff fdfa 	bl	5738 <hci_cmd_done>
	if (ncmd) {
    5b44:	b125      	cbz	r5, 5b50 <hci_cmd_status+0x24>
    5b46:	4803      	ldr	r0, [pc, #12]	; (5b54 <hci_cmd_status+0x28>)
}
    5b48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b4c:	f01a bac6 	b.w	200dc <z_impl_k_sem_give>
    5b50:	bd38      	pop	{r3, r4, r5, pc}
    5b52:	bf00      	nop
    5b54:	200000e0 	.word	0x200000e0

00005b58 <hci_cmd_complete>:
{
    5b58:	b538      	push	{r3, r4, r5, lr}
    5b5a:	2103      	movs	r1, #3
    5b5c:	4604      	mov	r4, r0
    5b5e:	3008      	adds	r0, #8
    5b60:	f020 f9d0 	bl	25f04 <net_buf_simple_pull_mem>
	status = buf->data[0];
    5b64:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5b66:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5b68:	7819      	ldrb	r1, [r3, #0]
    5b6a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5b6e:	4622      	mov	r2, r4
    5b70:	f7ff fde2 	bl	5738 <hci_cmd_done>
	if (ncmd) {
    5b74:	b125      	cbz	r5, 5b80 <hci_cmd_complete+0x28>
    5b76:	4803      	ldr	r0, [pc, #12]	; (5b84 <hci_cmd_complete+0x2c>)
}
    5b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b7c:	f01a baae 	b.w	200dc <z_impl_k_sem_give>
    5b80:	bd38      	pop	{r3, r4, r5, pc}
    5b82:	bf00      	nop
    5b84:	200000e0 	.word	0x200000e0

00005b88 <bt_hci_cmd_create>:
{
    5b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    5b8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b94:	4605      	mov	r5, r0
    5b96:	4816      	ldr	r0, [pc, #88]	; (5bf0 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    5b98:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5bf4 <bt_hci_cmd_create+0x6c>
{
    5b9c:	460e      	mov	r6, r1
    5b9e:	f020 f923 	bl	25de8 <net_buf_alloc_fixed>
    5ba2:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5ba4:	f100 0b08 	add.w	fp, r0, #8
    5ba8:	2100      	movs	r1, #0
    5baa:	2700      	movs	r7, #0
    5bac:	4658      	mov	r0, fp
    5bae:	f020 f940 	bl	25e32 <net_buf_simple_reserve>
    5bb2:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    5bb4:	4620      	mov	r0, r4
    5bb6:	f012 fb81 	bl	182bc <net_buf_id>
    5bba:	f04f 0a0c 	mov.w	sl, #12
    5bbe:	fb0a 8000 	mla	r0, sl, r0, r8
    5bc2:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5bc4:	4620      	mov	r0, r4
    5bc6:	f012 fb79 	bl	182bc <net_buf_id>
    5bca:	fb0a 8000 	mla	r0, sl, r0, r8
    5bce:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    5bd0:	4620      	mov	r0, r4
    5bd2:	f012 fb73 	bl	182bc <net_buf_id>
    5bd6:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    5bda:	2103      	movs	r1, #3
    5bdc:	6047      	str	r7, [r0, #4]
    5bde:	4658      	mov	r0, fp
    5be0:	f020 f95e 	bl	25ea0 <net_buf_simple_add>
	hdr->param_len = param_len;
    5be4:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5be6:	8005      	strh	r5, [r0, #0]
}
    5be8:	4620      	mov	r0, r4
    5bea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5bee:	bf00      	nop
    5bf0:	20000cd8 	.word	0x20000cd8
    5bf4:	20002980 	.word	0x20002980

00005bf8 <bt_hci_cmd_send_sync>:
{
    5bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bfc:	4607      	mov	r7, r0
    5bfe:	b086      	sub	sp, #24
    5c00:	4615      	mov	r5, r2
	if (!buf) {
    5c02:	460c      	mov	r4, r1
    5c04:	b921      	cbnz	r1, 5c10 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    5c06:	f7ff ffbf 	bl	5b88 <bt_hci_cmd_create>
		if (!buf) {
    5c0a:	4604      	mov	r4, r0
    5c0c:	2800      	cmp	r0, #0
    5c0e:	d055      	beq.n	5cbc <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5c10:	2201      	movs	r2, #1
    5c12:	2100      	movs	r1, #0
    5c14:	4668      	mov	r0, sp
    5c16:	f025 fb0b 	bl	2b230 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5c1a:	4620      	mov	r0, r4
    5c1c:	f012 fb4e 	bl	182bc <net_buf_id>
    5c20:	4e28      	ldr	r6, [pc, #160]	; (5cc4 <bt_hci_cmd_send_sync+0xcc>)
    5c22:	230c      	movs	r3, #12
    5c24:	fb03 6000 	mla	r0, r3, r0, r6
    5c28:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    5c2c:	4620      	mov	r0, r4
    5c2e:	f020 f911 	bl	25e54 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5c32:	4825      	ldr	r0, [pc, #148]	; (5cc8 <bt_hci_cmd_send_sync+0xd0>)
    5c34:	4621      	mov	r1, r4
    5c36:	f020 f900 	bl	25e3a <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5c3a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5c3e:	2300      	movs	r3, #0
    5c40:	4668      	mov	r0, sp
    5c42:	f01a fa71 	bl	20128 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    5c46:	4680      	mov	r8, r0
    5c48:	b180      	cbz	r0, 5c6c <bt_hci_cmd_send_sync+0x74>
    5c4a:	4a20      	ldr	r2, [pc, #128]	; (5ccc <bt_hci_cmd_send_sync+0xd4>)
    5c4c:	4920      	ldr	r1, [pc, #128]	; (5cd0 <bt_hci_cmd_send_sync+0xd8>)
    5c4e:	4821      	ldr	r0, [pc, #132]	; (5cd4 <bt_hci_cmd_send_sync+0xdc>)
    5c50:	f240 134d 	movw	r3, #333	; 0x14d
    5c54:	f01d f8d7 	bl	22e06 <printk>
    5c58:	481f      	ldr	r0, [pc, #124]	; (5cd8 <bt_hci_cmd_send_sync+0xe0>)
    5c5a:	4641      	mov	r1, r8
    5c5c:	f01d f8d3 	bl	22e06 <printk>
    5c60:	4040      	eors	r0, r0
    5c62:	f380 8811 	msr	BASEPRI, r0
    5c66:	f04f 0003 	mov.w	r0, #3
    5c6a:	df02      	svc	2
	status = cmd(buf)->status;
    5c6c:	4620      	mov	r0, r4
    5c6e:	f012 fb25 	bl	182bc <net_buf_id>
    5c72:	230c      	movs	r3, #12
    5c74:	4343      	muls	r3, r0
    5c76:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5c78:	b1be      	cbz	r6, 5caa <bt_hci_cmd_send_sync+0xb2>
    5c7a:	4a18      	ldr	r2, [pc, #96]	; (5cdc <bt_hci_cmd_send_sync+0xe4>)
    5c7c:	4b18      	ldr	r3, [pc, #96]	; (5ce0 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    5c7e:	4819      	ldr	r0, [pc, #100]	; (5ce4 <bt_hci_cmd_send_sync+0xec>)
    5c80:	1a9b      	subs	r3, r3, r2
    5c82:	08db      	lsrs	r3, r3, #3
    5c84:	019b      	lsls	r3, r3, #6
    5c86:	f043 0302 	orr.w	r3, r3, #2
    5c8a:	4632      	mov	r2, r6
    5c8c:	4639      	mov	r1, r7
    5c8e:	f01d fcf0 	bl	23672 <log_2>
		net_buf_unref(buf);
    5c92:	4620      	mov	r0, r4
    5c94:	f012 fbc6 	bl	18424 <net_buf_unref>
			return -EIO;
    5c98:	2e09      	cmp	r6, #9
    5c9a:	bf0c      	ite	eq
    5c9c:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    5ca0:	f06f 0004 	mvnne.w	r0, #4
}
    5ca4:	b006      	add	sp, #24
    5ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    5caa:	b115      	cbz	r5, 5cb2 <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    5cac:	602c      	str	r4, [r5, #0]
	return 0;
    5cae:	4630      	mov	r0, r6
    5cb0:	e7f8      	b.n	5ca4 <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    5cb2:	4620      	mov	r0, r4
    5cb4:	f012 fbb6 	bl	18424 <net_buf_unref>
	return 0;
    5cb8:	4628      	mov	r0, r5
    5cba:	e7f3      	b.n	5ca4 <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    5cbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5cc0:	e7f0      	b.n	5ca4 <bt_hci_cmd_send_sync+0xac>
    5cc2:	bf00      	nop
    5cc4:	20002980 	.word	0x20002980
    5cc8:	200000fc 	.word	0x200000fc
    5ccc:	0002ebf3 	.word	0x0002ebf3
    5cd0:	0002ec27 	.word	0x0002ec27
    5cd4:	0002ec30 	.word	0x0002ec30
    5cd8:	0002ec4d 	.word	0x0002ec4d
    5cdc:	0002bfa8 	.word	0x0002bfa8
    5ce0:	0002c068 	.word	0x0002c068
    5ce4:	0002ec6d 	.word	0x0002ec6d

00005ce8 <hci_le_read_max_data_len>:
{
    5ce8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5cea:	4606      	mov	r6, r0
    5cec:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5cee:	aa01      	add	r2, sp, #4
    5cf0:	2100      	movs	r1, #0
    5cf2:	f242 002f 	movw	r0, #8239	; 0x202f
    5cf6:	f7ff ff7f 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    5cfa:	4604      	mov	r4, r0
    5cfc:	b160      	cbz	r0, 5d18 <hci_le_read_max_data_len+0x30>
    5cfe:	490c      	ldr	r1, [pc, #48]	; (5d30 <hci_le_read_max_data_len+0x48>)
    5d00:	4b0c      	ldr	r3, [pc, #48]	; (5d34 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    5d02:	480d      	ldr	r0, [pc, #52]	; (5d38 <hci_le_read_max_data_len+0x50>)
    5d04:	1ac9      	subs	r1, r1, r3
    5d06:	08c9      	lsrs	r1, r1, #3
    5d08:	0189      	lsls	r1, r1, #6
    5d0a:	f041 0101 	orr.w	r1, r1, #1
    5d0e:	f01d fc8f 	bl	23630 <log_0>
}
    5d12:	4620      	mov	r0, r4
    5d14:	b002      	add	sp, #8
    5d16:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5d18:	9801      	ldr	r0, [sp, #4]
    5d1a:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5d1c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5d20:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5d22:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    5d26:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    5d28:	f012 fb7c 	bl	18424 <net_buf_unref>
	return 0;
    5d2c:	e7f1      	b.n	5d12 <hci_le_read_max_data_len+0x2a>
    5d2e:	bf00      	nop
    5d30:	0002c068 	.word	0x0002c068
    5d34:	0002bfa8 	.word	0x0002bfa8
    5d38:	0002ec89 	.word	0x0002ec89

00005d3c <hci_set_ad>:
{
    5d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d40:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5d42:	2120      	movs	r1, #32
{
    5d44:	4682      	mov	sl, r0
    5d46:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5d48:	f7ff ff1e 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    5d4c:	4606      	mov	r6, r0
    5d4e:	2800      	cmp	r0, #0
    5d50:	d05c      	beq.n	5e0c <hci_set_ad+0xd0>
    5d52:	2120      	movs	r1, #32
    5d54:	3008      	adds	r0, #8
    5d56:	f020 f8a3 	bl	25ea0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    5d5a:	2220      	movs	r2, #32
    5d5c:	2100      	movs	r1, #0
    5d5e:	4681      	mov	r9, r0
    5d60:	f025 fd48 	bl	2b7f4 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    5d64:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    5d68:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    5d6c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    5d6e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    5d70:	f8d4 8000 	ldr.w	r8, [r4]
    5d74:	2300      	movs	r3, #0
    5d76:	6862      	ldr	r2, [r4, #4]
    5d78:	4293      	cmp	r3, r2
    5d7a:	d30d      	bcc.n	5d98 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    5d7c:	9b00      	ldr	r3, [sp, #0]
    5d7e:	3408      	adds	r4, #8
    5d80:	429c      	cmp	r4, r3
    5d82:	d1f5      	bne.n	5d70 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5d84:	2200      	movs	r2, #0
    5d86:	4631      	mov	r1, r6
    5d88:	4650      	mov	r0, sl
	*data_len = set_data_len;
    5d8a:	f889 5000 	strb.w	r5, [r9]
}
    5d8e:	b003      	add	sp, #12
    5d90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5d94:	f7ff bf30 	b.w	5bf8 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    5d98:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    5d9c:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    5da0:	1ca8      	adds	r0, r5, #2
    5da2:	1811      	adds	r1, r2, r0
    5da4:	291f      	cmp	r1, #31
    5da6:	d91a      	bls.n	5dde <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    5da8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    5dac:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    5db0:	d101      	bne.n	5db6 <hci_set_ad+0x7a>
    5db2:	2a00      	cmp	r2, #0
    5db4:	dc11      	bgt.n	5dda <hci_set_ad+0x9e>
    5db6:	4b17      	ldr	r3, [pc, #92]	; (5e14 <hci_set_ad+0xd8>)
    5db8:	4917      	ldr	r1, [pc, #92]	; (5e18 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    5dba:	4818      	ldr	r0, [pc, #96]	; (5e1c <hci_set_ad+0xe0>)
    5dbc:	1ac9      	subs	r1, r1, r3
    5dbe:	08c9      	lsrs	r1, r1, #3
    5dc0:	0189      	lsls	r1, r1, #6
    5dc2:	f041 0101 	orr.w	r1, r1, #1
    5dc6:	f01d fc33 	bl	23630 <log_0>
		net_buf_unref(buf);
    5dca:	4630      	mov	r0, r6
    5dcc:	f012 fb2a 	bl	18424 <net_buf_unref>
					return -EINVAL;
    5dd0:	f06f 0015 	mvn.w	r0, #21
}
    5dd4:	b003      	add	sp, #12
    5dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    5dda:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    5dde:	b2d7      	uxtb	r7, r2
    5de0:	1c79      	adds	r1, r7, #1
    5de2:	f80b 1005 	strb.w	r1, [fp, r5]
    5de6:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    5de8:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5dea:	fa5b f080 	uxtab	r0, fp, r0
    5dee:	f80b c001 	strb.w	ip, [fp, r1]
    5df2:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5df6:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    5df8:	3702      	adds	r7, #2
    5dfa:	f025 fcda 	bl	2b7b2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    5dfe:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    5e00:	443d      	add	r5, r7
    5e02:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    5e04:	3301      	adds	r3, #1
    5e06:	f108 0808 	add.w	r8, r8, #8
    5e0a:	e7b4      	b.n	5d76 <hci_set_ad+0x3a>
		return -ENOBUFS;
    5e0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5e10:	e7e0      	b.n	5dd4 <hci_set_ad+0x98>
    5e12:	bf00      	nop
    5e14:	0002bfa8 	.word	0x0002bfa8
    5e18:	0002c068 	.word	0x0002c068
    5e1c:	0002eca9 	.word	0x0002eca9

00005e20 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    5e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e24:	b087      	sub	sp, #28
    5e26:	4606      	mov	r6, r0
    5e28:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    5e2c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    5e30:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    5e34:	460c      	mov	r4, r1
    5e36:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    5e38:	2100      	movs	r1, #0
    5e3a:	2210      	movs	r2, #16
    5e3c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    5e3e:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    5e40:	f025 fcd8 	bl	2b7f4 <memset>
	if (use_name) {
    5e44:	f1b8 0f00 	cmp.w	r8, #0
    5e48:	d00e      	beq.n	5e68 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    5e4a:	bbb4      	cbnz	r4, 5eba <le_adv_update.constprop.0+0x9a>
    5e4c:	2d00      	cmp	r5, #0
    5e4e:	d13f      	bne.n	5ed0 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    5e50:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 5f04 <le_adv_update.constprop.0+0xe4>
    5e54:	4658      	mov	r0, fp
    5e56:	f7fa fb19 	bl	48c <strlen>
    5e5a:	2309      	movs	r3, #9
    5e5c:	f88d 3000 	strb.w	r3, [sp]
    5e60:	f88d 0001 	strb.w	r0, [sp, #1]
    5e64:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    5e68:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    5e6c:	f1b8 0f00 	cmp.w	r8, #0
    5e70:	d030      	beq.n	5ed4 <le_adv_update.constprop.0+0xb4>
    5e72:	f1ba 0f00 	cmp.w	sl, #0
    5e76:	d12d      	bne.n	5ed4 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    5e78:	2301      	movs	r3, #1
			d[1].data = &data;
    5e7a:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    5e7e:	9305      	str	r3, [sp, #20]
			d_len = 2;
    5e80:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    5e82:	a902      	add	r1, sp, #8
    5e84:	f242 0008 	movw	r0, #8200	; 0x2008
    5e88:	f7ff ff58 	bl	5d3c <hci_set_ad>
		if (err) {
    5e8c:	4604      	mov	r4, r0
    5e8e:	b938      	cbnz	r0, 5ea0 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    5e90:	f1ba 0f00 	cmp.w	sl, #0
    5e94:	d120      	bne.n	5ed8 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5e96:	2104      	movs	r1, #4
    5e98:	f106 0010 	add.w	r0, r6, #16
    5e9c:	f01e fcf2 	bl	24884 <atomic_or>
}
    5ea0:	4620      	mov	r0, r4
    5ea2:	b007      	add	sp, #28
    5ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    5ea8:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    5eac:	3a08      	subs	r2, #8
    5eae:	2a01      	cmp	r2, #1
    5eb0:	d925      	bls.n	5efe <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    5eb2:	3301      	adds	r3, #1
    5eb4:	429f      	cmp	r7, r3
    5eb6:	d1f7      	bne.n	5ea8 <le_adv_update.constprop.0+0x88>
    5eb8:	e7c8      	b.n	5e4c <le_adv_update.constprop.0+0x2c>
    5eba:	2300      	movs	r3, #0
    5ebc:	e7fa      	b.n	5eb4 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    5ebe:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    5ec2:	3a08      	subs	r2, #8
    5ec4:	2a01      	cmp	r2, #1
    5ec6:	d91a      	bls.n	5efe <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    5ec8:	3301      	adds	r3, #1
    5eca:	4599      	cmp	r9, r3
    5ecc:	d1f7      	bne.n	5ebe <le_adv_update.constprop.0+0x9e>
    5ece:	e7bf      	b.n	5e50 <le_adv_update.constprop.0+0x30>
    5ed0:	2300      	movs	r3, #0
    5ed2:	e7fa      	b.n	5eca <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    5ed4:	2201      	movs	r2, #1
    5ed6:	e7d4      	b.n	5e82 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    5ed8:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    5edc:	2201      	movs	r2, #1
    5ede:	f1b8 0f00 	cmp.w	r8, #0
    5ee2:	d003      	beq.n	5eec <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    5ee4:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    5ee6:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    5eea:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5eec:	a902      	add	r1, sp, #8
    5eee:	f242 0009 	movw	r0, #8201	; 0x2009
    5ef2:	f7ff ff23 	bl	5d3c <hci_set_ad>
		if (err) {
    5ef6:	2800      	cmp	r0, #0
    5ef8:	d0cd      	beq.n	5e96 <le_adv_update.constprop.0+0x76>
    5efa:	4604      	mov	r4, r0
    5efc:	e7d0      	b.n	5ea0 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    5efe:	f06f 0415 	mvn.w	r4, #21
    5f02:	e7cd      	b.n	5ea0 <le_adv_update.constprop.0+0x80>
    5f04:	20000118 	.word	0x20000118

00005f08 <set_random_address>:
{
    5f08:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    5f0a:	4e15      	ldr	r6, [pc, #84]	; (5f60 <set_random_address+0x58>)
    5f0c:	2206      	movs	r2, #6
    5f0e:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    5f12:	4605      	mov	r5, r0
    5f14:	f025 fc3f 	bl	2b796 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5f18:	4602      	mov	r2, r0
    5f1a:	b1d8      	cbz	r0, 5f54 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5f1c:	2106      	movs	r1, #6
    5f1e:	f242 0005 	movw	r0, #8197	; 0x2005
    5f22:	f7ff fe31 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    5f26:	4604      	mov	r4, r0
    5f28:	b1b0      	cbz	r0, 5f58 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5f2a:	2206      	movs	r2, #6
    5f2c:	4629      	mov	r1, r5
    5f2e:	3008      	adds	r0, #8
    5f30:	f01f ffbc 	bl	25eac <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5f34:	2200      	movs	r2, #0
    5f36:	4621      	mov	r1, r4
    5f38:	f242 0005 	movw	r0, #8197	; 0x2005
    5f3c:	f7ff fe5c 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    5f40:	4602      	mov	r2, r0
    5f42:	b938      	cbnz	r0, 5f54 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    5f44:	4629      	mov	r1, r5
    5f46:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    5f4a:	f01e fccd 	bl	248e8 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5f4e:	2301      	movs	r3, #1
    5f50:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    5f54:	4610      	mov	r0, r2
    5f56:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5f58:	f06f 0268 	mvn.w	r2, #104	; 0x68
    5f5c:	e7fa      	b.n	5f54 <set_random_address+0x4c>
    5f5e:	bf00      	nop
    5f60:	20000000 	.word	0x20000000

00005f64 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    5f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f68:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5f6a:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    5f6e:	460e      	mov	r6, r1
    5f70:	4690      	mov	r8, r2
    5f72:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5f74:	d027      	beq.n	5fc6 <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    5f76:	4f27      	ldr	r7, [pc, #156]	; (6014 <le_adv_set_random_addr.isra.0+0xb0>)
    5f78:	b12a      	cbz	r2, 5f86 <le_adv_set_random_addr.isra.0+0x22>
    5f7a:	0688      	lsls	r0, r1, #26
    5f7c:	d503      	bpl.n	5f86 <le_adv_set_random_addr.isra.0+0x22>
    5f7e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
    5f82:	0659      	lsls	r1, r3, #25
    5f84:	d542      	bpl.n	600c <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5f86:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    5f8a:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    5f8e:	5cfb      	ldrb	r3, [r7, r3]
    5f90:	2b01      	cmp	r3, #1
    5f92:	d008      	beq.n	5fa6 <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
    5f94:	eba9 0404 	sub.w	r4, r9, r4
    5f98:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5f9a:	f1b8 0f00 	cmp.w	r8, #0
    5f9e:	d10d      	bne.n	5fbc <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5fa0:	702b      	strb	r3, [r5, #0]
	return 0;
    5fa2:	2000      	movs	r0, #0
    5fa4:	e007      	b.n	5fb6 <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
    5fa6:	2007      	movs	r0, #7
    5fa8:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    5fac:	4438      	add	r0, r7
    5fae:	f7ff ffab 	bl	5f08 <set_random_address>
				if (err) {
    5fb2:	2800      	cmp	r0, #0
    5fb4:	d0ee      	beq.n	5f94 <le_adv_set_random_addr.isra.0+0x30>
}
    5fb6:	b003      	add	sp, #12
    5fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5fbc:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5fbe:	bf48      	it	mi
    5fc0:	f043 0302 	orrmi.w	r3, r3, #2
    5fc4:	e7ec      	b.n	5fa0 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5fc6:	074b      	lsls	r3, r1, #29
    5fc8:	d510      	bpl.n	5fec <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5fca:	4e12      	ldr	r6, [pc, #72]	; (6014 <le_adv_set_random_addr.isra.0+0xb0>)
    5fcc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    5fd0:	00e7      	lsls	r7, r4, #3
    5fd2:	5cf3      	ldrb	r3, [r6, r3]
    5fd4:	2b01      	cmp	r3, #1
    5fd6:	d105      	bne.n	5fe4 <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
    5fd8:	2007      	movs	r0, #7
    5fda:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    5fde:	4430      	add	r0, r6
    5fe0:	f7ff ff92 	bl	5f08 <set_random_address>
			*own_addr_type = id_addr->type;
    5fe4:	1b3c      	subs	r4, r7, r4
    5fe6:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5fe8:	702b      	strb	r3, [r5, #0]
		if (err) {
    5fea:	e7e4      	b.n	5fb6 <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    5fec:	2106      	movs	r1, #6
    5fee:	4668      	mov	r0, sp
    5ff0:	f008 f930 	bl	e254 <bt_rand>
	if (err) {
    5ff4:	b940      	cbnz	r0, 6008 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
    5ff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    5ffa:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    5ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6000:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    6004:	f7ff ff80 	bl	5f08 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    6008:	2301      	movs	r3, #1
    600a:	e7ed      	b.n	5fe8 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
    600c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6010:	e7d1      	b.n	5fb6 <le_adv_set_random_addr.isra.0+0x52>
    6012:	bf00      	nop
    6014:	20000000 	.word	0x20000000

00006018 <set_le_adv_enable_legacy>:
{
    6018:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    601a:	4606      	mov	r6, r0
    601c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    601e:	f242 000a 	movw	r0, #8202	; 0x200a
    6022:	2101      	movs	r1, #1
    6024:	f7ff fdb0 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    6028:	4604      	mov	r4, r0
    602a:	b1e8      	cbz	r0, 6068 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    602c:	3008      	adds	r0, #8
    602e:	b1cd      	cbz	r5, 6064 <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    6030:	2101      	movs	r1, #1
    6032:	f01f ff45 	bl	25ec0 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    6036:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    6038:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    603a:	4620      	mov	r0, r4
    603c:	9302      	str	r3, [sp, #8]
	state->target = target;
    603e:	9601      	str	r6, [sp, #4]
	state->val = val;
    6040:	f88d 500c 	strb.w	r5, [sp, #12]
    6044:	f012 f93a 	bl	182bc <net_buf_id>
    6048:	4b09      	ldr	r3, [pc, #36]	; (6070 <set_le_adv_enable_legacy+0x58>)
    604a:	220c      	movs	r2, #12
    604c:	fb02 3000 	mla	r0, r2, r0, r3
    6050:	ab01      	add	r3, sp, #4
    6052:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    6054:	2200      	movs	r2, #0
    6056:	4621      	mov	r1, r4
    6058:	f242 000a 	movw	r0, #8202	; 0x200a
    605c:	f7ff fdcc 	bl	5bf8 <bt_hci_cmd_send_sync>
}
    6060:	b004      	add	sp, #16
    6062:	bd70      	pop	{r4, r5, r6, pc}
    6064:	4629      	mov	r1, r5
    6066:	e7e4      	b.n	6032 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    6068:	f06f 0068 	mvn.w	r0, #104	; 0x68
    606c:	e7f8      	b.n	6060 <set_le_adv_enable_legacy+0x48>
    606e:	bf00      	nop
    6070:	20002980 	.word	0x20002980

00006074 <bt_send>:
	return bt_dev.drv->send(buf);
    6074:	4b02      	ldr	r3, [pc, #8]	; (6080 <bt_send+0xc>)
    6076:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    607a:	691b      	ldr	r3, [r3, #16]
    607c:	4718      	bx	r3
    607e:	bf00      	nop
    6080:	20000000 	.word	0x20000000

00006084 <bt_hci_cmd_send>:
{
    6084:	b538      	push	{r3, r4, r5, lr}
    6086:	4605      	mov	r5, r0
	if (!buf) {
    6088:	460c      	mov	r4, r1
    608a:	b919      	cbnz	r1, 6094 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    608c:	f7ff fd7c 	bl	5b88 <bt_hci_cmd_create>
		if (!buf) {
    6090:	4604      	mov	r4, r0
    6092:	b1f0      	cbz	r0, 60d2 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    6094:	f640 4335 	movw	r3, #3125	; 0xc35
    6098:	429d      	cmp	r5, r3
    609a:	d114      	bne.n	60c6 <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    609c:	4620      	mov	r0, r4
    609e:	f7ff ffe9 	bl	6074 <bt_send>
		if (err) {
    60a2:	4605      	mov	r5, r0
    60a4:	b168      	cbz	r0, 60c2 <bt_hci_cmd_send+0x3e>
    60a6:	4b0c      	ldr	r3, [pc, #48]	; (60d8 <bt_hci_cmd_send+0x54>)
    60a8:	4a0c      	ldr	r2, [pc, #48]	; (60dc <bt_hci_cmd_send+0x58>)
    60aa:	1ad2      	subs	r2, r2, r3
    60ac:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    60ae:	0192      	lsls	r2, r2, #6
    60b0:	4601      	mov	r1, r0
    60b2:	f042 0201 	orr.w	r2, r2, #1
    60b6:	480a      	ldr	r0, [pc, #40]	; (60e0 <bt_hci_cmd_send+0x5c>)
    60b8:	f01d fac7 	bl	2364a <log_1>
			net_buf_unref(buf);
    60bc:	4620      	mov	r0, r4
    60be:	f012 f9b1 	bl	18424 <net_buf_unref>
}
    60c2:	4628      	mov	r0, r5
    60c4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    60c6:	4807      	ldr	r0, [pc, #28]	; (60e4 <bt_hci_cmd_send+0x60>)
    60c8:	4621      	mov	r1, r4
    60ca:	f01f feb6 	bl	25e3a <net_buf_put>
	return 0;
    60ce:	2500      	movs	r5, #0
    60d0:	e7f7      	b.n	60c2 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    60d2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    60d6:	e7f4      	b.n	60c2 <bt_hci_cmd_send+0x3e>
    60d8:	0002bfa8 	.word	0x0002bfa8
    60dc:	0002c068 	.word	0x0002c068
    60e0:	0002ecc2 	.word	0x0002ecc2
    60e4:	200000fc 	.word	0x200000fc

000060e8 <conn_auto_initiate>:
{
    60e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    60ea:	7a83      	ldrb	r3, [r0, #10]
    60ec:	2b07      	cmp	r3, #7
{
    60ee:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    60f0:	d11e      	bne.n	6130 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    60f2:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    60f4:	4630      	mov	r0, r6
    60f6:	f01e fbbf 	bl	24878 <atomic_get>
    60fa:	0483      	lsls	r3, r0, #18
    60fc:	d41a      	bmi.n	6134 <conn_auto_initiate+0x4c>
    60fe:	78e3      	ldrb	r3, [r4, #3]
    6100:	b123      	cbz	r3, 610c <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    6102:	4b31      	ldr	r3, [pc, #196]	; (61c8 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    6104:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    6108:	071d      	lsls	r5, r3, #28
    610a:	d513      	bpl.n	6134 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    610c:	2102      	movs	r1, #2
    610e:	f242 0016 	movw	r0, #8214	; 0x2016
    6112:	f7ff fd39 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    6116:	4605      	mov	r5, r0
    6118:	b160      	cbz	r0, 6134 <conn_auto_initiate+0x4c>
	return net_buf_simple_add(&buf->b, len);
    611a:	2102      	movs	r1, #2
    611c:	3008      	adds	r0, #8
    611e:	f01f febf 	bl	25ea0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6122:	8823      	ldrh	r3, [r4, #0]
    6124:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6126:	4629      	mov	r1, r5
    6128:	f242 0016 	movw	r0, #8214	; 0x2016
    612c:	f7ff ffaa 	bl	6084 <bt_hci_cmd_send>
}
    6130:	b004      	add	sp, #16
    6132:	bd70      	pop	{r4, r5, r6, pc}
    6134:	4630      	mov	r0, r6
    6136:	f01e fb9f 	bl	24878 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    613a:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    613e:	4d22      	ldr	r5, [pc, #136]	; (61c8 <conn_auto_initiate+0xe0>)
    6140:	f3c0 3100 	ubfx	r1, r0, #12, #1
    6144:	d11a      	bne.n	617c <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    6146:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    614a:	07d8      	lsls	r0, r3, #31
    614c:	d516      	bpl.n	617c <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    614e:	2302      	movs	r3, #2
    6150:	9100      	str	r1, [sp, #0]
    6152:	461a      	mov	r2, r3
    6154:	4620      	mov	r0, r4
    6156:	f01e fc2b 	bl	249b0 <bt_le_set_phy>
		if (!err) {
    615a:	4601      	mov	r1, r0
    615c:	b920      	cbnz	r0, 6168 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    615e:	2180      	movs	r1, #128	; 0x80
    6160:	4630      	mov	r0, r6
    6162:	f01e fb8f 	bl	24884 <atomic_or>
			return;
    6166:	e7e3      	b.n	6130 <conn_auto_initiate+0x48>
    6168:	4a18      	ldr	r2, [pc, #96]	; (61cc <conn_auto_initiate+0xe4>)
    616a:	4b19      	ldr	r3, [pc, #100]	; (61d0 <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    616c:	4819      	ldr	r0, [pc, #100]	; (61d4 <conn_auto_initiate+0xec>)
    616e:	1ad2      	subs	r2, r2, r3
    6170:	08d2      	lsrs	r2, r2, #3
    6172:	0192      	lsls	r2, r2, #6
    6174:	f042 0201 	orr.w	r2, r2, #1
    6178:	f01d fa67 	bl	2364a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    617c:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    6180:	069a      	lsls	r2, r3, #26
    6182:	d5d5      	bpl.n	6130 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    6184:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    6188:	689b      	ldr	r3, [r3, #8]
    618a:	079b      	lsls	r3, r3, #30
    618c:	d5d0      	bpl.n	6130 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    618e:	f10d 010e 	add.w	r1, sp, #14
    6192:	a803      	add	r0, sp, #12
    6194:	f7ff fda8 	bl	5ce8 <hci_le_read_max_data_len>
			if (!err) {
    6198:	2800      	cmp	r0, #0
    619a:	d1c9      	bne.n	6130 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    619c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    61a0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    61a4:	4620      	mov	r0, r4
    61a6:	f01e fbe6 	bl	24976 <bt_le_set_data_len>
				if (err) {
    61aa:	4601      	mov	r1, r0
    61ac:	2800      	cmp	r0, #0
    61ae:	d0bf      	beq.n	6130 <conn_auto_initiate+0x48>
    61b0:	4b07      	ldr	r3, [pc, #28]	; (61d0 <conn_auto_initiate+0xe8>)
    61b2:	4a06      	ldr	r2, [pc, #24]	; (61cc <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
    61b4:	4808      	ldr	r0, [pc, #32]	; (61d8 <conn_auto_initiate+0xf0>)
    61b6:	1ad2      	subs	r2, r2, r3
    61b8:	08d2      	lsrs	r2, r2, #3
    61ba:	0192      	lsls	r2, r2, #6
    61bc:	f042 0201 	orr.w	r2, r2, #1
    61c0:	f01d fa43 	bl	2364a <log_1>
		}
    61c4:	e7b4      	b.n	6130 <conn_auto_initiate+0x48>
    61c6:	bf00      	nop
    61c8:	20000000 	.word	0x20000000
    61cc:	0002c068 	.word	0x0002c068
    61d0:	0002bfa8 	.word	0x0002bfa8
    61d4:	0002ece4 	.word	0x0002ece4
    61d8:	0002ecfe 	.word	0x0002ecfe

000061dc <le_phy_update_complete>:
{
    61dc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    61de:	6883      	ldr	r3, [r0, #8]
    61e0:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    61e4:	4628      	mov	r0, r5
    61e6:	f001 fc05 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    61ea:	4604      	mov	r4, r0
    61ec:	b960      	cbnz	r0, 6208 <le_phy_update_complete+0x2c>
    61ee:	4b11      	ldr	r3, [pc, #68]	; (6234 <le_phy_update_complete+0x58>)
    61f0:	4a11      	ldr	r2, [pc, #68]	; (6238 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    61f2:	4812      	ldr	r0, [pc, #72]	; (623c <le_phy_update_complete+0x60>)
    61f4:	1ad2      	subs	r2, r2, r3
    61f6:	08d2      	lsrs	r2, r2, #3
    61f8:	0192      	lsls	r2, r2, #6
    61fa:	4629      	mov	r1, r5
    61fc:	f042 0201 	orr.w	r2, r2, #1
}
    6200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6204:	f01d ba21 	b.w	2364a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    6208:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    620a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    620e:	4628      	mov	r0, r5
    6210:	f01e fb47 	bl	248a2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6214:	0603      	lsls	r3, r0, #24
    6216:	d507      	bpl.n	6228 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    621c:	4628      	mov	r0, r5
    621e:	f01e fb31 	bl	24884 <atomic_or>
		conn_auto_initiate(conn);
    6222:	4620      	mov	r0, r4
    6224:	f7ff ff60 	bl	60e8 <conn_auto_initiate>
	bt_conn_unref(conn);
    6228:	4620      	mov	r0, r4
}
    622a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    622e:	f01e bceb 	b.w	24c08 <bt_conn_unref>
    6232:	bf00      	nop
    6234:	0002bfa8 	.word	0x0002bfa8
    6238:	0002c068 	.word	0x0002c068
    623c:	0002ea84 	.word	0x0002ea84

00006240 <le_remote_feat_complete>:
{
    6240:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    6242:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6244:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6248:	4630      	mov	r0, r6
    624a:	f001 fbd3 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    624e:	4604      	mov	r4, r0
    6250:	b960      	cbnz	r0, 626c <le_remote_feat_complete+0x2c>
    6252:	4a11      	ldr	r2, [pc, #68]	; (6298 <le_remote_feat_complete+0x58>)
    6254:	4b11      	ldr	r3, [pc, #68]	; (629c <le_remote_feat_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6256:	4812      	ldr	r0, [pc, #72]	; (62a0 <le_remote_feat_complete+0x60>)
    6258:	1ad2      	subs	r2, r2, r3
    625a:	08d2      	lsrs	r2, r2, #3
    625c:	0192      	lsls	r2, r2, #6
    625e:	4631      	mov	r1, r6
    6260:	f042 0201 	orr.w	r2, r2, #1
}
    6264:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6268:	f01d b9ef 	b.w	2364a <log_1>
	if (!evt->status) {
    626c:	782b      	ldrb	r3, [r5, #0]
    626e:	b933      	cbnz	r3, 627e <le_remote_feat_complete+0x3e>
    6270:	f855 3f03 	ldr.w	r3, [r5, #3]!
    6274:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    6278:	686b      	ldr	r3, [r5, #4]
    627a:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    627e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    6282:	1d20      	adds	r0, r4, #4
    6284:	f01e fafe 	bl	24884 <atomic_or>
	conn_auto_initiate(conn);
    6288:	4620      	mov	r0, r4
    628a:	f7ff ff2d 	bl	60e8 <conn_auto_initiate>
	bt_conn_unref(conn);
    628e:	4620      	mov	r0, r4
}
    6290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    6294:	f01e bcb8 	b.w	24c08 <bt_conn_unref>
    6298:	0002c068 	.word	0x0002c068
    629c:	0002bfa8 	.word	0x0002bfa8
    62a0:	0002ea84 	.word	0x0002ea84

000062a4 <le_conn_param_neg_reply>:
{
    62a4:	b570      	push	{r4, r5, r6, lr}
    62a6:	4606      	mov	r6, r0
    62a8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    62aa:	f242 0021 	movw	r0, #8225	; 0x2021
    62ae:	2103      	movs	r1, #3
    62b0:	f7ff fc6a 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    62b4:	4604      	mov	r4, r0
    62b6:	b958      	cbnz	r0, 62d0 <le_conn_param_neg_reply+0x2c>
    62b8:	490c      	ldr	r1, [pc, #48]	; (62ec <le_conn_param_neg_reply+0x48>)
    62ba:	4b0d      	ldr	r3, [pc, #52]	; (62f0 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    62bc:	480d      	ldr	r0, [pc, #52]	; (62f4 <le_conn_param_neg_reply+0x50>)
    62be:	1ac9      	subs	r1, r1, r3
    62c0:	08c9      	lsrs	r1, r1, #3
    62c2:	0189      	lsls	r1, r1, #6
}
    62c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    62c8:	f041 0101 	orr.w	r1, r1, #1
    62cc:	f01d b9b0 	b.w	23630 <log_0>
    62d0:	2103      	movs	r1, #3
    62d2:	3008      	adds	r0, #8
    62d4:	f01f fde4 	bl	25ea0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    62d8:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    62da:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    62dc:	4621      	mov	r1, r4
    62de:	f242 0021 	movw	r0, #8225	; 0x2021
}
    62e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    62e6:	f7ff becd 	b.w	6084 <bt_hci_cmd_send>
    62ea:	bf00      	nop
    62ec:	0002c068 	.word	0x0002c068
    62f0:	0002bfa8 	.word	0x0002bfa8
    62f4:	0002ed1a 	.word	0x0002ed1a

000062f8 <le_conn_param_req>:
{
    62f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    62fa:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    62fc:	78d9      	ldrb	r1, [r3, #3]
    62fe:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    6300:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6302:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6306:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    630a:	7959      	ldrb	r1, [r3, #5]
    630c:	791a      	ldrb	r2, [r3, #4]
    630e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6312:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6316:	799a      	ldrb	r2, [r3, #6]
    6318:	79d9      	ldrb	r1, [r3, #7]
    631a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    631e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6322:	7a1a      	ldrb	r2, [r3, #8]
    6324:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    6326:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6328:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    632c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    632e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    6332:	f001 fb5f 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    6336:	4606      	mov	r6, r0
    6338:	b980      	cbnz	r0, 635c <le_conn_param_req+0x64>
    633a:	4b20      	ldr	r3, [pc, #128]	; (63bc <le_conn_param_req+0xc4>)
    633c:	4a20      	ldr	r2, [pc, #128]	; (63c0 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    633e:	4821      	ldr	r0, [pc, #132]	; (63c4 <le_conn_param_req+0xcc>)
    6340:	1ad2      	subs	r2, r2, r3
    6342:	08d2      	lsrs	r2, r2, #3
    6344:	0192      	lsls	r2, r2, #6
    6346:	4621      	mov	r1, r4
    6348:	f042 0201 	orr.w	r2, r2, #1
    634c:	f01d f97d 	bl	2364a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    6350:	2102      	movs	r1, #2
    6352:	4620      	mov	r0, r4
    6354:	f7ff ffa6 	bl	62a4 <le_conn_param_neg_reply>
}
    6358:	b003      	add	sp, #12
    635a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    635c:	4669      	mov	r1, sp
    635e:	f001 f99d 	bl	769c <le_param_req>
    6362:	b938      	cbnz	r0, 6374 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    6364:	211e      	movs	r1, #30
    6366:	4620      	mov	r0, r4
    6368:	f7ff ff9c 	bl	62a4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    636c:	4630      	mov	r0, r6
    636e:	f01e fc4b 	bl	24c08 <bt_conn_unref>
    6372:	e7f1      	b.n	6358 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    6374:	210e      	movs	r1, #14
    6376:	f242 0020 	movw	r0, #8224	; 0x2020
    637a:	f7ff fc05 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    637e:	4605      	mov	r5, r0
    6380:	2800      	cmp	r0, #0
    6382:	d0f3      	beq.n	636c <le_conn_param_req+0x74>
    6384:	210e      	movs	r1, #14
    6386:	3008      	adds	r0, #8
    6388:	f01f fd8a 	bl	25ea0 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    638c:	220e      	movs	r2, #14
    638e:	4604      	mov	r4, r0
    6390:	2100      	movs	r1, #0
    6392:	f025 fa2f 	bl	2b7f4 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    6396:	f8bd 3000 	ldrh.w	r3, [sp]
    639a:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    639c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    63a0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    63a2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    63a6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    63a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    63ac:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    63ae:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    63b0:	4629      	mov	r1, r5
    63b2:	f242 0020 	movw	r0, #8224	; 0x2020
    63b6:	f7ff fe65 	bl	6084 <bt_hci_cmd_send>
    63ba:	e7d7      	b.n	636c <le_conn_param_req+0x74>
    63bc:	0002bfa8 	.word	0x0002bfa8
    63c0:	0002c068 	.word	0x0002c068
    63c4:	0002ea84 	.word	0x0002ea84

000063c8 <hci_tx_thread>:
{
    63c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63cc:	4d51      	ldr	r5, [pc, #324]	; (6514 <hci_tx_thread+0x14c>)
    63ce:	4b52      	ldr	r3, [pc, #328]	; (6518 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    63d0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 6520 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    63d4:	f8df a174 	ldr.w	sl, [pc, #372]	; 654c <hci_tx_thread+0x184>
    63d8:	1aed      	subs	r5, r5, r3
    63da:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    63dc:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    63e0:	484e      	ldr	r0, [pc, #312]	; (651c <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    63e2:	f36f 3310 	bfc	r3, #12, #5
    63e6:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    63ea:	f001 fa97 	bl	791c <bt_conn_prepare_events>
    63ee:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    63f0:	484b      	ldr	r0, [pc, #300]	; (6520 <hci_tx_thread+0x158>)
    63f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63fa:	4639      	mov	r1, r7
    63fc:	f01a fa0c 	bl	20818 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    6400:	b160      	cbz	r0, 641c <hci_tx_thread+0x54>
    6402:	4948      	ldr	r1, [pc, #288]	; (6524 <hci_tx_thread+0x15c>)
    6404:	4848      	ldr	r0, [pc, #288]	; (6528 <hci_tx_thread+0x160>)
    6406:	f241 4371 	movw	r3, #5233	; 0x1471
    640a:	4652      	mov	r2, sl
    640c:	f01c fcfb 	bl	22e06 <printk>
    6410:	4040      	eors	r0, r0
    6412:	f380 8811 	msr	BASEPRI, r0
    6416:	f04f 0003 	mov.w	r0, #3
    641a:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    641c:	4e43      	ldr	r6, [pc, #268]	; (652c <hci_tx_thread+0x164>)
{
    641e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 6520 <hci_tx_thread+0x158>
    6422:	f106 0be0 	add.w	fp, r6, #224	; 0xe0
	for (; count; ev++, count--) {
    6426:	b917      	cbnz	r7, 642e <hci_tx_thread+0x66>
	z_impl_k_yield();
    6428:	f019 fde2 	bl	1fff0 <z_impl_k_yield>
	while (1) {
    642c:	e7d6      	b.n	63dc <hci_tx_thread+0x14>
		switch (ev->state) {
    642e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    6432:	f3c1 3104 	ubfx	r1, r1, #12, #5
    6436:	2901      	cmp	r1, #1
    6438:	d959      	bls.n	64ee <hci_tx_thread+0x126>
    643a:	2904      	cmp	r1, #4
    643c:	d163      	bne.n	6506 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    643e:	f898 300c 	ldrb.w	r3, [r8, #12]
    6442:	2b00      	cmp	r3, #0
    6444:	d157      	bne.n	64f6 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6446:	483a      	ldr	r0, [pc, #232]	; (6530 <hci_tx_thread+0x168>)
    6448:	2200      	movs	r2, #0
    644a:	2300      	movs	r3, #0
    644c:	f01f fcd1 	bl	25df2 <net_buf_get>
	BT_ASSERT(buf);
    6450:	4604      	mov	r4, r0
    6452:	b960      	cbnz	r0, 646e <hci_tx_thread+0xa6>
    6454:	4937      	ldr	r1, [pc, #220]	; (6534 <hci_tx_thread+0x16c>)
    6456:	4834      	ldr	r0, [pc, #208]	; (6528 <hci_tx_thread+0x160>)
    6458:	f241 430e 	movw	r3, #5134	; 0x140e
    645c:	4652      	mov	r2, sl
    645e:	f01c fcd2 	bl	22e06 <printk>
    6462:	4040      	eors	r0, r0
    6464:	f380 8811 	msr	BASEPRI, r0
    6468:	f04f 0003 	mov.w	r0, #3
    646c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    646e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6476:	4658      	mov	r0, fp
    6478:	f019 fe56 	bl	20128 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    647c:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    6480:	b163      	cbz	r3, 649c <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    6482:	01a9      	lsls	r1, r5, #6
    6484:	482c      	ldr	r0, [pc, #176]	; (6538 <hci_tx_thread+0x170>)
    6486:	f041 0101 	orr.w	r1, r1, #1
    648a:	f01d f8d1 	bl	23630 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    648e:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    6492:	f011 ffc7 	bl	18424 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6496:	2300      	movs	r3, #0
    6498:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    649c:	4620      	mov	r0, r4
    649e:	f01f fcd9 	bl	25e54 <net_buf_ref>
    64a2:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
    64a6:	4620      	mov	r0, r4
    64a8:	f7ff fde4 	bl	6074 <bt_send>
	if (err) {
    64ac:	4601      	mov	r1, r0
    64ae:	b1f0      	cbz	r0, 64ee <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    64b0:	01aa      	lsls	r2, r5, #6
    64b2:	4822      	ldr	r0, [pc, #136]	; (653c <hci_tx_thread+0x174>)
    64b4:	f042 0201 	orr.w	r2, r2, #1
    64b8:	f01d f8c7 	bl	2364a <log_1>
	z_impl_k_sem_give(sem);
    64bc:	4820      	ldr	r0, [pc, #128]	; (6540 <hci_tx_thread+0x178>)
    64be:	f019 fe0d 	bl	200dc <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    64c2:	4620      	mov	r0, r4
    64c4:	f011 fefa 	bl	182bc <net_buf_id>
    64c8:	4b1e      	ldr	r3, [pc, #120]	; (6544 <hci_tx_thread+0x17c>)
    64ca:	220c      	movs	r2, #12
    64cc:	fb02 3000 	mla	r0, r2, r0, r3
    64d0:	211f      	movs	r1, #31
    64d2:	8840      	ldrh	r0, [r0, #2]
    64d4:	4622      	mov	r2, r4
    64d6:	f7ff f92f 	bl	5738 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    64da:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    64de:	f011 ffa1 	bl	18424 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    64e2:	2300      	movs	r3, #0
		net_buf_unref(buf);
    64e4:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    64e6:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		net_buf_unref(buf);
    64ea:	f011 ff9b 	bl	18424 <net_buf_unref>
	for (; count; ev++, count--) {
    64ee:	f108 0814 	add.w	r8, r8, #20
    64f2:	3f01      	subs	r7, #1
    64f4:	e797      	b.n	6426 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    64f6:	2b01      	cmp	r3, #1
    64f8:	d1f9      	bne.n	64ee <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    64fa:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    64fe:	3834      	subs	r0, #52	; 0x34
    6500:	f001 fcce 	bl	7ea0 <bt_conn_process_tx>
    6504:	e7f3      	b.n	64ee <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    6506:	01aa      	lsls	r2, r5, #6
    6508:	480f      	ldr	r0, [pc, #60]	; (6548 <hci_tx_thread+0x180>)
    650a:	f042 0202 	orr.w	r2, r2, #2
    650e:	f01d f89c 	bl	2364a <log_1>
    6512:	e7ec      	b.n	64ee <hci_tx_thread+0x126>
    6514:	0002c068 	.word	0x0002c068
    6518:	0002bfa8 	.word	0x0002bfa8
    651c:	20000388 	.word	0x20000388
    6520:	20000374 	.word	0x20000374
    6524:	0002ec27 	.word	0x0002ec27
    6528:	0002ec30 	.word	0x0002ec30
    652c:	20000000 	.word	0x20000000
    6530:	200000fc 	.word	0x200000fc
    6534:	0002ea58 	.word	0x0002ea58
    6538:	0002ed34 	.word	0x0002ed34
    653c:	0002ecc2 	.word	0x0002ecc2
    6540:	200000e0 	.word	0x200000e0
    6544:	20002980 	.word	0x20002980
    6548:	0002ed4f 	.word	0x0002ed4f
    654c:	0002ebf3 	.word	0x0002ebf3

00006550 <hci_event_prio>:
{
    6550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6554:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    6556:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    655a:	4630      	mov	r0, r6
    655c:	f01f fce2 	bl	25f24 <net_buf_simple_headroom>
	state->len = buf->len;
    6560:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6564:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    6568:	4605      	mov	r5, r0
    656a:	d80c      	bhi.n	6586 <hci_event_prio+0x36>
    656c:	4a1c      	ldr	r2, [pc, #112]	; (65e0 <hci_event_prio+0x90>)
    656e:	491d      	ldr	r1, [pc, #116]	; (65e4 <hci_event_prio+0x94>)
    6570:	481d      	ldr	r0, [pc, #116]	; (65e8 <hci_event_prio+0x98>)
    6572:	f641 03ae 	movw	r3, #6318	; 0x18ae
    6576:	f01c fc46 	bl	22e06 <printk>
    657a:	4040      	eors	r0, r0
    657c:	f380 8811 	msr	BASEPRI, r0
    6580:	f04f 0003 	mov.w	r0, #3
    6584:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6586:	2102      	movs	r1, #2
    6588:	4630      	mov	r0, r6
    658a:	f01f fcbb 	bl	25f04 <net_buf_simple_pull_mem>
    658e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6590:	7800      	ldrb	r0, [r0, #0]
    6592:	f01e f950 	bl	24836 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6596:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6598:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    659a:	d40c      	bmi.n	65b6 <hci_event_prio+0x66>
    659c:	4a10      	ldr	r2, [pc, #64]	; (65e0 <hci_event_prio+0x90>)
    659e:	4913      	ldr	r1, [pc, #76]	; (65ec <hci_event_prio+0x9c>)
    65a0:	4811      	ldr	r0, [pc, #68]	; (65e8 <hci_event_prio+0x98>)
    65a2:	f641 03b2 	movw	r3, #6322	; 0x18b2
    65a6:	f01c fc2e 	bl	22e06 <printk>
    65aa:	4040      	eors	r0, r0
    65ac:	f380 8811 	msr	BASEPRI, r0
    65b0:	f04f 0003 	mov.w	r0, #3
    65b4:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    65b6:	2305      	movs	r3, #5
    65b8:	4a0d      	ldr	r2, [pc, #52]	; (65f0 <hci_event_prio+0xa0>)
    65ba:	7838      	ldrb	r0, [r7, #0]
    65bc:	4621      	mov	r1, r4
    65be:	f7ff f935 	bl	582c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    65c2:	07b3      	lsls	r3, r6, #30
    65c4:	d507      	bpl.n	65d6 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    65c6:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    65c8:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    65cc:	fa10 f585 	uxtah	r5, r0, r5
    65d0:	60a5      	str	r5, [r4, #8]
}
    65d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    65d6:	4620      	mov	r0, r4
}
    65d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    65dc:	f011 bf22 	b.w	18424 <net_buf_unref>
    65e0:	0002ebf3 	.word	0x0002ebf3
    65e4:	0002ed70 	.word	0x0002ed70
    65e8:	0002ec30 	.word	0x0002ec30
    65ec:	0002ed89 	.word	0x0002ed89
    65f0:	0002c314 	.word	0x0002c314

000065f4 <bt_recv>:
{
    65f4:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    65f6:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    65f8:	2901      	cmp	r1, #1
{
    65fa:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    65fc:	d04b      	beq.n	6696 <bt_recv+0xa2>
    65fe:	2903      	cmp	r1, #3
    6600:	d178      	bne.n	66f4 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6602:	8983      	ldrh	r3, [r0, #12]
    6604:	2b03      	cmp	r3, #3
    6606:	d80c      	bhi.n	6622 <bt_recv+0x2e>
    6608:	4a42      	ldr	r2, [pc, #264]	; (6714 <bt_recv+0x120>)
    660a:	4943      	ldr	r1, [pc, #268]	; (6718 <bt_recv+0x124>)
    660c:	4843      	ldr	r0, [pc, #268]	; (671c <bt_recv+0x128>)
    660e:	f240 43ac 	movw	r3, #1196	; 0x4ac
    6612:	f01c fbf8 	bl	22e06 <printk>
    6616:	4040      	eors	r0, r0
    6618:	f380 8811 	msr	BASEPRI, r0
    661c:	f04f 0003 	mov.w	r0, #3
    6620:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    6622:	2104      	movs	r1, #4
    6624:	f104 0008 	add.w	r0, r4, #8
    6628:	f01f fc6c 	bl	25f04 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    662c:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    662e:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    6630:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6632:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    6634:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    6638:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    663a:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    663c:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    663e:	d00d      	beq.n	665c <bt_recv+0x68>
    6640:	4837      	ldr	r0, [pc, #220]	; (6720 <bt_recv+0x12c>)
    6642:	4b38      	ldr	r3, [pc, #224]	; (6724 <bt_recv+0x130>)
    6644:	1a1b      	subs	r3, r3, r0
    6646:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    6648:	019b      	lsls	r3, r3, #6
    664a:	4837      	ldr	r0, [pc, #220]	; (6728 <bt_recv+0x134>)
    664c:	f043 0301 	orr.w	r3, r3, #1
    6650:	f01d f80f 	bl	23672 <log_2>
	net_buf_unref(buf);
    6654:	4620      	mov	r0, r4
    6656:	f011 fee5 	bl	18424 <net_buf_unref>
    665a:	e01a      	b.n	6692 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    665c:	f001 f9ca 	bl	79f4 <bt_conn_lookup_handle>
	if (!conn) {
    6660:	4605      	mov	r5, r0
    6662:	b958      	cbnz	r0, 667c <bt_recv+0x88>
    6664:	4b2e      	ldr	r3, [pc, #184]	; (6720 <bt_recv+0x12c>)
    6666:	4a2f      	ldr	r2, [pc, #188]	; (6724 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    6668:	8ae1      	ldrh	r1, [r4, #22]
    666a:	4830      	ldr	r0, [pc, #192]	; (672c <bt_recv+0x138>)
    666c:	1ad2      	subs	r2, r2, r3
    666e:	08d2      	lsrs	r2, r2, #3
    6670:	0192      	lsls	r2, r2, #6
    6672:	f042 0201 	orr.w	r2, r2, #1
    6676:	f01c ffe8 	bl	2364a <log_1>
		net_buf_unref(buf);
    667a:	e7eb      	b.n	6654 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    667c:	f001 fc78 	bl	7f70 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6680:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    6682:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    6684:	4621      	mov	r1, r4
    6686:	4628      	mov	r0, r5
    6688:	f001 f852 	bl	7730 <bt_conn_recv>
	bt_conn_unref(conn);
    668c:	4628      	mov	r0, r5
    668e:	f01e fabb 	bl	24c08 <bt_conn_unref>
		return 0;
    6692:	2000      	movs	r0, #0
}
    6694:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6696:	8983      	ldrh	r3, [r0, #12]
    6698:	2b01      	cmp	r3, #1
    669a:	d80c      	bhi.n	66b6 <bt_recv+0xc2>
    669c:	4a1d      	ldr	r2, [pc, #116]	; (6714 <bt_recv+0x120>)
    669e:	491e      	ldr	r1, [pc, #120]	; (6718 <bt_recv+0x124>)
    66a0:	481e      	ldr	r0, [pc, #120]	; (671c <bt_recv+0x128>)
    66a2:	f241 33fb 	movw	r3, #5115	; 0x13fb
    66a6:	f01c fbae 	bl	22e06 <printk>
    66aa:	4040      	eors	r0, r0
    66ac:	f380 8811 	msr	BASEPRI, r0
    66b0:	f04f 0003 	mov.w	r0, #3
    66b4:	df02      	svc	2
    66b6:	2102      	movs	r1, #2
    66b8:	f104 0008 	add.w	r0, r4, #8
    66bc:	f01f fc22 	bl	25f04 <net_buf_simple_pull_mem>
    66c0:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    66c2:	7800      	ldrb	r0, [r0, #0]
    66c4:	f01e f8b7 	bl	24836 <bt_hci_evt_get_flags>
    66c8:	0783      	lsls	r3, r0, #30
    66ca:	d40c      	bmi.n	66e6 <bt_recv+0xf2>
    66cc:	4a11      	ldr	r2, [pc, #68]	; (6714 <bt_recv+0x120>)
    66ce:	4918      	ldr	r1, [pc, #96]	; (6730 <bt_recv+0x13c>)
    66d0:	4812      	ldr	r0, [pc, #72]	; (671c <bt_recv+0x128>)
    66d2:	f241 33ff 	movw	r3, #5119	; 0x13ff
    66d6:	f01c fb96 	bl	22e06 <printk>
    66da:	4040      	eors	r0, r0
    66dc:	f380 8811 	msr	BASEPRI, r0
    66e0:	f04f 0003 	mov.w	r0, #3
    66e4:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    66e6:	4a13      	ldr	r2, [pc, #76]	; (6734 <bt_recv+0x140>)
    66e8:	7828      	ldrb	r0, [r5, #0]
    66ea:	2304      	movs	r3, #4
    66ec:	4621      	mov	r1, r4
    66ee:	f7ff f89d 	bl	582c <handle_event>
    66f2:	e7af      	b.n	6654 <bt_recv+0x60>
    66f4:	4b0a      	ldr	r3, [pc, #40]	; (6720 <bt_recv+0x12c>)
    66f6:	4a0b      	ldr	r2, [pc, #44]	; (6724 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    66f8:	480f      	ldr	r0, [pc, #60]	; (6738 <bt_recv+0x144>)
    66fa:	1ad2      	subs	r2, r2, r3
    66fc:	08d2      	lsrs	r2, r2, #3
    66fe:	0192      	lsls	r2, r2, #6
    6700:	f042 0201 	orr.w	r2, r2, #1
    6704:	f01c ffa1 	bl	2364a <log_1>
		net_buf_unref(buf);
    6708:	4620      	mov	r0, r4
    670a:	f011 fe8b 	bl	18424 <net_buf_unref>
		return -EINVAL;
    670e:	f06f 0015 	mvn.w	r0, #21
    6712:	e7bf      	b.n	6694 <bt_recv+0xa0>
    6714:	0002ebf3 	.word	0x0002ebf3
    6718:	0002ed70 	.word	0x0002ed70
    671c:	0002ec30 	.word	0x0002ec30
    6720:	0002bfa8 	.word	0x0002bfa8
    6724:	0002c068 	.word	0x0002c068
    6728:	0002eda2 	.word	0x0002eda2
    672c:	0002edc6 	.word	0x0002edc6
    6730:	0002ede8 	.word	0x0002ede8
    6734:	0002c2f4 	.word	0x0002c2f4
    6738:	0002ee16 	.word	0x0002ee16

0000673c <bt_recv_prio>:
{
    673c:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    673e:	7d03      	ldrb	r3, [r0, #20]
    6740:	2b01      	cmp	r3, #1
{
    6742:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6744:	d00c      	beq.n	6760 <bt_recv_prio+0x24>
    6746:	4a09      	ldr	r2, [pc, #36]	; (676c <bt_recv_prio+0x30>)
    6748:	4909      	ldr	r1, [pc, #36]	; (6770 <bt_recv_prio+0x34>)
    674a:	480a      	ldr	r0, [pc, #40]	; (6774 <bt_recv_prio+0x38>)
    674c:	f641 03f5 	movw	r3, #6389	; 0x18f5
    6750:	f01c fb59 	bl	22e06 <printk>
    6754:	4040      	eors	r0, r0
    6756:	f380 8811 	msr	BASEPRI, r0
    675a:	f04f 0003 	mov.w	r0, #3
    675e:	df02      	svc	2
	hci_event_prio(buf);
    6760:	4620      	mov	r0, r4
    6762:	f7ff fef5 	bl	6550 <hci_event_prio>
}
    6766:	2000      	movs	r0, #0
    6768:	bd10      	pop	{r4, pc}
    676a:	bf00      	nop
    676c:	0002ebf3 	.word	0x0002ebf3
    6770:	0002ee2a 	.word	0x0002ee2a
    6774:	0002ec30 	.word	0x0002ec30

00006778 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6778:	4a08      	ldr	r2, [pc, #32]	; (679c <bt_hci_driver_register+0x24>)
{
    677a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    677c:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    6780:	b930      	cbnz	r0, 6790 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    6782:	68d9      	ldr	r1, [r3, #12]
    6784:	b139      	cbz	r1, 6796 <bt_hci_driver_register+0x1e>
    6786:	6919      	ldr	r1, [r3, #16]
    6788:	b129      	cbz	r1, 6796 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    678a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	return 0;
    678e:	4770      	bx	lr
		return -EALREADY;
    6790:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6794:	4770      	bx	lr
		return -EINVAL;
    6796:	f06f 0015 	mvn.w	r0, #21
}
    679a:	4770      	bx	lr
    679c:	20000000 	.word	0x20000000

000067a0 <bt_finalize_init>:
    67a0:	4801      	ldr	r0, [pc, #4]	; (67a8 <bt_finalize_init+0x8>)
    67a2:	2102      	movs	r1, #2
    67a4:	f01e b86e 	b.w	24884 <atomic_or>
    67a8:	20000094 	.word	0x20000094

000067ac <bt_init>:
{
    67ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    67ae:	4d43      	ldr	r5, [pc, #268]	; (68bc <bt_init+0x110>)
    67b0:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    67b4:	6899      	ldr	r1, [r3, #8]
    67b6:	f011 0101 	ands.w	r1, r1, #1
    67ba:	d11f      	bne.n	67fc <bt_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    67bc:	aa01      	add	r2, sp, #4
    67be:	f640 4003 	movw	r0, #3075	; 0xc03
    67c2:	f7ff fa19 	bl	5bf8 <bt_hci_cmd_send_sync>
		if (err) {
    67c6:	4604      	mov	r4, r0
    67c8:	2800      	cmp	r0, #0
    67ca:	d173      	bne.n	68b4 <bt_init+0x108>
		hci_reset_complete(rsp);
    67cc:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    67ce:	689b      	ldr	r3, [r3, #8]
	if (status) {
    67d0:	781b      	ldrb	r3, [r3, #0]
    67d2:	b983      	cbnz	r3, 67f6 <bt_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    67d4:	f105 0394 	add.w	r3, r5, #148	; 0x94
    67d8:	4618      	mov	r0, r3
    67da:	f01e f84d 	bl	24878 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    67de:	f3bf 8f5b 	dmb	ish
    67e2:	f000 0005 	and.w	r0, r0, #5
    67e6:	e853 2f00 	ldrex	r2, [r3]
    67ea:	e843 0100 	strex	r1, r0, [r3]
    67ee:	2900      	cmp	r1, #0
    67f0:	d1f9      	bne.n	67e6 <bt_init+0x3a>
    67f2:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    67f6:	9801      	ldr	r0, [sp, #4]
    67f8:	f011 fe14 	bl	18424 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    67fc:	aa01      	add	r2, sp, #4
    67fe:	2100      	movs	r1, #0
    6800:	f241 0003 	movw	r0, #4099	; 0x1003
    6804:	f7ff f9f8 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6808:	4604      	mov	r4, r0
    680a:	2800      	cmp	r0, #0
    680c:	d152      	bne.n	68b4 <bt_init+0x108>
	read_local_features_complete(rsp);
    680e:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    6810:	4e2b      	ldr	r6, [pc, #172]	; (68c0 <bt_init+0x114>)
    6812:	6893      	ldr	r3, [r2, #8]
    6814:	f853 0f01 	ldr.w	r0, [r3, #1]!
    6818:	6859      	ldr	r1, [r3, #4]
    681a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    681c:	4610      	mov	r0, r2
    681e:	f011 fe01 	bl	18424 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    6822:	4621      	mov	r1, r4
    6824:	aa01      	add	r2, sp, #4
    6826:	f241 0001 	movw	r0, #4097	; 0x1001
    682a:	f7ff f9e5 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    682e:	4604      	mov	r4, r0
    6830:	2800      	cmp	r0, #0
    6832:	d13f      	bne.n	68b4 <bt_init+0x108>
	read_local_ver_complete(rsp);
    6834:	9801      	ldr	r0, [sp, #4]
    6836:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    6838:	785a      	ldrb	r2, [r3, #1]
    683a:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    683e:	78d9      	ldrb	r1, [r3, #3]
    6840:	789a      	ldrb	r2, [r3, #2]
    6842:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6846:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    6848:	791a      	ldrb	r2, [r3, #4]
    684a:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    684e:	7a19      	ldrb	r1, [r3, #8]
    6850:	79da      	ldrb	r2, [r3, #7]
    6852:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6856:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    6858:	795a      	ldrb	r2, [r3, #5]
    685a:	799b      	ldrb	r3, [r3, #6]
    685c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6860:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    6862:	f011 fddf 	bl	18424 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    6866:	4621      	mov	r1, r4
    6868:	aa01      	add	r2, sp, #4
    686a:	f241 0002 	movw	r0, #4098	; 0x1002
    686e:	f7ff f9c3 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6872:	4604      	mov	r4, r0
    6874:	b9f0      	cbnz	r0, 68b4 <bt_init+0x108>
	read_supported_commands_complete(rsp);
    6876:	9f01      	ldr	r7, [sp, #4]
    6878:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    687a:	1c53      	adds	r3, r2, #1
    687c:	3241      	adds	r2, #65	; 0x41
    687e:	6818      	ldr	r0, [r3, #0]
    6880:	6859      	ldr	r1, [r3, #4]
    6882:	4634      	mov	r4, r6
    6884:	c403      	stmia	r4!, {r0, r1}
    6886:	3308      	adds	r3, #8
    6888:	4293      	cmp	r3, r2
    688a:	4626      	mov	r6, r4
    688c:	d1f7      	bne.n	687e <bt_init+0xd2>
	net_buf_unref(rsp);
    688e:	4638      	mov	r0, r7
    6890:	f011 fdc8 	bl	18424 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    6894:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    6898:	065e      	lsls	r6, r3, #25
    689a:	d419      	bmi.n	68d0 <bt_init+0x124>
    689c:	4b09      	ldr	r3, [pc, #36]	; (68c4 <bt_init+0x118>)
    689e:	490a      	ldr	r1, [pc, #40]	; (68c8 <bt_init+0x11c>)
		BT_ERR("Non-LE capable controller detected!");
    68a0:	480a      	ldr	r0, [pc, #40]	; (68cc <bt_init+0x120>)
    68a2:	1ac9      	subs	r1, r1, r3
    68a4:	08c9      	lsrs	r1, r1, #3
    68a6:	0189      	lsls	r1, r1, #6
    68a8:	f041 0101 	orr.w	r1, r1, #1
    68ac:	f01c fec0 	bl	23630 <log_0>
		return -ENODEV;
    68b0:	f06f 0412 	mvn.w	r4, #18
}
    68b4:	4620      	mov	r0, r4
    68b6:	b003      	add	sp, #12
    68b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68ba:	bf00      	nop
    68bc:	20000000 	.word	0x20000000
    68c0:	2000003c 	.word	0x2000003c
    68c4:	0002bfa8 	.word	0x0002bfa8
    68c8:	0002c068 	.word	0x0002c068
    68cc:	0002ee4d 	.word	0x0002ee4d
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    68d0:	aa01      	add	r2, sp, #4
    68d2:	2100      	movs	r1, #0
    68d4:	f242 0003 	movw	r0, #8195	; 0x2003
    68d8:	f7ff f98e 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    68dc:	4604      	mov	r4, r0
    68de:	2800      	cmp	r0, #0
    68e0:	d1e8      	bne.n	68b4 <bt_init+0x108>
	read_le_features_complete(rsp);
    68e2:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    68e4:	4eb0      	ldr	r6, [pc, #704]	; (6ba8 <bt_init+0x3fc>)
    68e6:	6893      	ldr	r3, [r2, #8]
    68e8:	f853 0f01 	ldr.w	r0, [r3, #1]!
    68ec:	6859      	ldr	r1, [r3, #4]
    68ee:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    68f0:	4610      	mov	r0, r2
    68f2:	f011 fd97 	bl	18424 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    68f6:	4621      	mov	r1, r4
    68f8:	aa01      	add	r2, sp, #4
    68fa:	f242 0002 	movw	r0, #8194	; 0x2002
    68fe:	f7ff f97b 	bl	5bf8 <bt_hci_cmd_send_sync>
		if (err) {
    6902:	4604      	mov	r4, r0
    6904:	2800      	cmp	r0, #0
    6906:	d1d5      	bne.n	68b4 <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
    6908:	9b01      	ldr	r3, [sp, #4]
    690a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    690c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    6910:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    6914:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    6916:	b129      	cbz	r1, 6924 <bt_init+0x178>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    6918:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    691a:	4611      	mov	r1, r2
    691c:	f106 0028 	add.w	r0, r6, #40	; 0x28
    6920:	f024 fc86 	bl	2b230 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    6924:	9801      	ldr	r0, [sp, #4]
    6926:	f011 fd7d 	bl	18424 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    692a:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    692e:	f016 0620 	ands.w	r6, r6, #32
    6932:	f000 80dd 	beq.w	6af0 <bt_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    6936:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    693a:	071c      	lsls	r4, r3, #28
    693c:	d511      	bpl.n	6962 <bt_init+0x1b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    693e:	aa01      	add	r2, sp, #4
    6940:	2100      	movs	r1, #0
    6942:	f242 001c 	movw	r0, #8220	; 0x201c
    6946:	f7ff f957 	bl	5bf8 <bt_hci_cmd_send_sync>
		if (err) {
    694a:	4604      	mov	r4, r0
    694c:	2800      	cmp	r0, #0
    694e:	d1b1      	bne.n	68b4 <bt_init+0x108>
		le_read_supp_states_complete(rsp);
    6950:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    6952:	6883      	ldr	r3, [r0, #8]
    6954:	f853 2f01 	ldr.w	r2, [r3, #1]!
    6958:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    695a:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    695e:	f011 fd61 	bl	18424 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    6962:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    6966:	0698      	lsls	r0, r3, #26
    6968:	d523      	bpl.n	69b2 <bt_init+0x206>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    696a:	f10d 0102 	add.w	r1, sp, #2
    696e:	4668      	mov	r0, sp
    6970:	f7ff f9ba 	bl	5ce8 <hci_le_read_max_data_len>
		if (err) {
    6974:	4604      	mov	r4, r0
    6976:	2800      	cmp	r0, #0
    6978:	d19c      	bne.n	68b4 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    697a:	2104      	movs	r1, #4
    697c:	f242 0024 	movw	r0, #8228	; 0x2024
    6980:	f7ff f902 	bl	5b88 <bt_hci_cmd_create>
		if (!buf) {
    6984:	4606      	mov	r6, r0
    6986:	2800      	cmp	r0, #0
    6988:	f000 80b9 	beq.w	6afe <bt_init+0x352>
	return net_buf_simple_add(&buf->b, len);
    698c:	2104      	movs	r1, #4
    698e:	3008      	adds	r0, #8
    6990:	f01f fa86 	bl	25ea0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    6994:	f8bd 3000 	ldrh.w	r3, [sp]
    6998:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    699a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    699e:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    69a0:	4622      	mov	r2, r4
    69a2:	4631      	mov	r1, r6
    69a4:	f242 0024 	movw	r0, #8228	; 0x2024
    69a8:	f7ff f926 	bl	5bf8 <bt_hci_cmd_send_sync>
		if (err) {
    69ac:	4604      	mov	r4, r0
    69ae:	2800      	cmp	r0, #0
    69b0:	d180      	bne.n	68b4 <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    69b2:	2108      	movs	r1, #8
    69b4:	f242 0001 	movw	r0, #8193	; 0x2001
    69b8:	f7ff f8e6 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    69bc:	4604      	mov	r4, r0
    69be:	2800      	cmp	r0, #0
    69c0:	f000 809d 	beq.w	6afe <bt_init+0x352>
    69c4:	2108      	movs	r1, #8
    69c6:	4408      	add	r0, r1
    69c8:	f01f fa6a 	bl	25ea0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    69cc:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    69d0:	f012 0f02 	tst.w	r2, #2
    69d4:	bf14      	ite	ne
    69d6:	232f      	movne	r3, #47	; 0x2f
    69d8:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    69da:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    69dc:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    69e0:	bf48      	it	mi
    69e2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    69e6:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    69ea:	bf18      	it	ne
    69ec:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    69f0:	2200      	movs	r2, #0
    69f2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    69f4:	f3c3 2307 	ubfx	r3, r3, #8, #8
    69f8:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    69fa:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    69fc:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    69fe:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6a00:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6a02:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6a04:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    6a06:	4621      	mov	r1, r4
    6a08:	f242 0001 	movw	r0, #8193	; 0x2001
    6a0c:	f7ff f8f4 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6a10:	4604      	mov	r4, r0
    6a12:	2800      	cmp	r0, #0
    6a14:	f47f af4e 	bne.w	68b4 <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    6a18:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    6a1c:	069a      	lsls	r2, r3, #26
    6a1e:	d41e      	bmi.n	6a5e <bt_init+0x2b2>
	if (bt_dev.le.acl_mtu) {
    6a20:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    6a24:	b9d9      	cbnz	r1, 6a5e <bt_init+0x2b2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    6a26:	aa01      	add	r2, sp, #4
    6a28:	f241 0005 	movw	r0, #4101	; 0x1005
    6a2c:	f7ff f8e4 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6a30:	4604      	mov	r4, r0
    6a32:	2800      	cmp	r0, #0
    6a34:	f47f af3e 	bne.w	68b4 <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
    6a38:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    6a3c:	b963      	cbnz	r3, 6a58 <bt_init+0x2ac>
	read_buffer_size_complete(rsp);
    6a3e:	9b01      	ldr	r3, [sp, #4]
    6a40:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    6a42:	785a      	ldrb	r2, [r3, #1]
    6a44:	7899      	ldrb	r1, [r3, #2]
    6a46:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    6a4a:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    6a4e:	889a      	ldrh	r2, [r3, #4]
    6a50:	4856      	ldr	r0, [pc, #344]	; (6bac <bt_init+0x400>)
    6a52:	4611      	mov	r1, r2
    6a54:	f024 fbec 	bl	2b230 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    6a58:	9801      	ldr	r0, [sp, #4]
    6a5a:	f011 fce3 	bl	18424 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    6a5e:	2108      	movs	r1, #8
    6a60:	f640 4001 	movw	r0, #3073	; 0xc01
    6a64:	f7ff f890 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    6a68:	4604      	mov	r4, r0
    6a6a:	2800      	cmp	r0, #0
    6a6c:	d047      	beq.n	6afe <bt_init+0x352>
    6a6e:	2108      	movs	r1, #8
    6a70:	4408      	add	r0, r1
    6a72:	f01f fa15 	bl	25ea0 <net_buf_simple_add>
	dst[0] = val;
    6a76:	2310      	movs	r3, #16
    6a78:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6a7a:	2388      	movs	r3, #136	; 0x88
    6a7c:	7043      	strb	r3, [r0, #1]
    6a7e:	2302      	movs	r3, #2
	dst[0] = val;
    6a80:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    6a82:	70c3      	strb	r3, [r0, #3]
    6a84:	2320      	movs	r3, #32
	dst[0] = val;
    6a86:	7082      	strb	r2, [r0, #2]
    6a88:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6a8a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6a8c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6a8e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    6a90:	4621      	mov	r1, r4
    6a92:	f640 4001 	movw	r0, #3073	; 0xc01
    6a96:	f7ff f8af 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6a9a:	4604      	mov	r4, r0
    6a9c:	2800      	cmp	r0, #0
    6a9e:	f47f af09 	bne.w	68b4 <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    6aa2:	4601      	mov	r1, r0
    6aa4:	aa01      	add	r2, sp, #4
    6aa6:	f64f 4001 	movw	r0, #64513	; 0xfc01
    6aaa:	f7ff f8a5 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6aae:	4604      	mov	r4, r0
    6ab0:	2800      	cmp	r0, #0
    6ab2:	d039      	beq.n	6b28 <bt_init+0x37c>
    6ab4:	493e      	ldr	r1, [pc, #248]	; (6bb0 <bt_init+0x404>)
    6ab6:	4b3f      	ldr	r3, [pc, #252]	; (6bb4 <bt_init+0x408>)
		BT_WARN("Vendor HCI extensions not available");
    6ab8:	483f      	ldr	r0, [pc, #252]	; (6bb8 <bt_init+0x40c>)
    6aba:	1ac9      	subs	r1, r1, r3
    6abc:	08c9      	lsrs	r1, r1, #3
    6abe:	0189      	lsls	r1, r1, #6
    6ac0:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
    6ac4:	f01c fdb4 	bl	23630 <log_0>
		err = bt_conn_init();
    6ac8:	f001 fa5e 	bl	7f88 <bt_conn_init>
		if (err) {
    6acc:	4604      	mov	r4, r0
    6ace:	2800      	cmp	r0, #0
    6ad0:	f47f aef0 	bne.w	68b4 <bt_init+0x108>
		if (!bt_dev.id_count) {
    6ad4:	79eb      	ldrb	r3, [r5, #7]
    6ad6:	2b00      	cmp	r3, #0
    6ad8:	d15e      	bne.n	6b98 <bt_init+0x3ec>
    6ada:	4b36      	ldr	r3, [pc, #216]	; (6bb4 <bt_init+0x408>)
    6adc:	4934      	ldr	r1, [pc, #208]	; (6bb0 <bt_init+0x404>)
			BT_INFO("No ID address. App must call settings_load()");
    6ade:	4837      	ldr	r0, [pc, #220]	; (6bbc <bt_init+0x410>)
    6ae0:	1ac9      	subs	r1, r1, r3
    6ae2:	08c9      	lsrs	r1, r1, #3
    6ae4:	0189      	lsls	r1, r1, #6
    6ae6:	f041 0103 	orr.w	r1, r1, #3
    6aea:	f01c fda1 	bl	23630 <log_0>
			return 0;
    6aee:	e6e1      	b.n	68b4 <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    6af0:	2102      	movs	r1, #2
    6af2:	f640 406d 	movw	r0, #3181	; 0xc6d
    6af6:	f7ff f847 	bl	5b88 <bt_hci_cmd_create>
		if (!buf) {
    6afa:	4604      	mov	r4, r0
    6afc:	b910      	cbnz	r0, 6b04 <bt_init+0x358>
		return -ENOBUFS;
    6afe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6b02:	e6d7      	b.n	68b4 <bt_init+0x108>
    6b04:	2102      	movs	r1, #2
    6b06:	3008      	adds	r0, #8
    6b08:	f01f f9ca 	bl	25ea0 <net_buf_simple_add>
		cp_le->le = 0x01;
    6b0c:	2301      	movs	r3, #1
    6b0e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    6b10:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    6b12:	4621      	mov	r1, r4
    6b14:	4632      	mov	r2, r6
    6b16:	f640 406d 	movw	r0, #3181	; 0xc6d
    6b1a:	f7ff f86d 	bl	5bf8 <bt_hci_cmd_send_sync>
		if (err) {
    6b1e:	4604      	mov	r4, r0
    6b20:	2800      	cmp	r0, #0
    6b22:	f43f af08 	beq.w	6936 <bt_init+0x18a>
    6b26:	e6c5      	b.n	68b4 <bt_init+0x108>
	net_buf_unref(rsp);
    6b28:	9801      	ldr	r0, [sp, #4]
    6b2a:	f011 fc7b 	bl	18424 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    6b2e:	4621      	mov	r1, r4
    6b30:	aa01      	add	r2, sp, #4
    6b32:	f64f 4002 	movw	r0, #64514	; 0xfc02
    6b36:	f7ff f85f 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6b3a:	4604      	mov	r4, r0
    6b3c:	b140      	cbz	r0, 6b50 <bt_init+0x3a4>
    6b3e:	491c      	ldr	r1, [pc, #112]	; (6bb0 <bt_init+0x404>)
    6b40:	4b1c      	ldr	r3, [pc, #112]	; (6bb4 <bt_init+0x408>)
		BT_WARN("Failed to read supported vendor commands");
    6b42:	481f      	ldr	r0, [pc, #124]	; (6bc0 <bt_init+0x414>)
    6b44:	1ac9      	subs	r1, r1, r3
    6b46:	08c9      	lsrs	r1, r1, #3
    6b48:	0189      	lsls	r1, r1, #6
    6b4a:	f041 0102 	orr.w	r1, r1, #2
    6b4e:	e7b9      	b.n	6ac4 <bt_init+0x318>
	rp.cmds = (void *)rsp->data;
    6b50:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    6b52:	6883      	ldr	r3, [r0, #8]
    6b54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    6b58:	f8a5 3085 	strh.w	r3, [r5, #133]	; 0x85
	net_buf_unref(rsp);
    6b5c:	f011 fc62 	bl	18424 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    6b60:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    6b64:	075b      	lsls	r3, r3, #29
    6b66:	d5af      	bpl.n	6ac8 <bt_init+0x31c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    6b68:	aa01      	add	r2, sp, #4
    6b6a:	4621      	mov	r1, r4
    6b6c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    6b70:	f7ff f842 	bl	5bf8 <bt_hci_cmd_send_sync>
		if (err) {
    6b74:	b140      	cbz	r0, 6b88 <bt_init+0x3dc>
    6b76:	490e      	ldr	r1, [pc, #56]	; (6bb0 <bt_init+0x404>)
    6b78:	4b0e      	ldr	r3, [pc, #56]	; (6bb4 <bt_init+0x408>)
			BT_WARN("Failed to read supported vendor features");
    6b7a:	4812      	ldr	r0, [pc, #72]	; (6bc4 <bt_init+0x418>)
    6b7c:	1ac9      	subs	r1, r1, r3
    6b7e:	08c9      	lsrs	r1, r1, #3
    6b80:	0189      	lsls	r1, r1, #6
    6b82:	f041 0102 	orr.w	r1, r1, #2
    6b86:	e79d      	b.n	6ac4 <bt_init+0x318>
		rp.feat = (void *)rsp->data;
    6b88:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    6b8a:	6883      	ldr	r3, [r0, #8]
    6b8c:	785b      	ldrb	r3, [r3, #1]
    6b8e:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
		net_buf_unref(rsp);
    6b92:	f011 fc47 	bl	18424 <net_buf_unref>
    6b96:	e797      	b.n	6ac8 <bt_init+0x31c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6b98:	2104      	movs	r1, #4
    6b9a:	480b      	ldr	r0, [pc, #44]	; (6bc8 <bt_init+0x41c>)
    6b9c:	f01d fe72 	bl	24884 <atomic_or>
	bt_finalize_init();
    6ba0:	f7ff fdfe 	bl	67a0 <bt_finalize_init>
	return 0;
    6ba4:	e686      	b.n	68b4 <bt_init+0x108>
    6ba6:	bf00      	nop
    6ba8:	20000098 	.word	0x20000098
    6bac:	200000c8 	.word	0x200000c8
    6bb0:	0002c068 	.word	0x0002c068
    6bb4:	0002bfa8 	.word	0x0002bfa8
    6bb8:	0002ee71 	.word	0x0002ee71
    6bbc:	0002eee7 	.word	0x0002eee7
    6bc0:	0002ee95 	.word	0x0002ee95
    6bc4:	0002eebe 	.word	0x0002eebe
    6bc8:	20000094 	.word	0x20000094

00006bcc <init_work>:
{
    6bcc:	b510      	push	{r4, lr}
	err = bt_init();
    6bce:	f7ff fded 	bl	67ac <bt_init>
	if (ready_cb) {
    6bd2:	4b03      	ldr	r3, [pc, #12]	; (6be0 <init_work+0x14>)
    6bd4:	681b      	ldr	r3, [r3, #0]
    6bd6:	b113      	cbz	r3, 6bde <init_work+0x12>
}
    6bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6bdc:	4718      	bx	r3
}
    6bde:	bd10      	pop	{r4, pc}
    6be0:	20002998 	.word	0x20002998

00006be4 <bt_enable>:
{
    6be4:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    6be6:	4d30      	ldr	r5, [pc, #192]	; (6ca8 <bt_enable+0xc4>)
    6be8:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
{
    6bec:	b088      	sub	sp, #32
    6bee:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6bf0:	b973      	cbnz	r3, 6c10 <bt_enable+0x2c>
    6bf2:	4b2e      	ldr	r3, [pc, #184]	; (6cac <bt_enable+0xc8>)
    6bf4:	492e      	ldr	r1, [pc, #184]	; (6cb0 <bt_enable+0xcc>)
		BT_ERR("No HCI driver registered");
    6bf6:	482f      	ldr	r0, [pc, #188]	; (6cb4 <bt_enable+0xd0>)
    6bf8:	1ac9      	subs	r1, r1, r3
    6bfa:	08c9      	lsrs	r1, r1, #3
    6bfc:	0189      	lsls	r1, r1, #6
    6bfe:	f041 0101 	orr.w	r1, r1, #1
    6c02:	f01c fd15 	bl	23630 <log_0>
		return -ENODEV;
    6c06:	f06f 0412 	mvn.w	r4, #18
}
    6c0a:	4620      	mov	r0, r4
    6c0c:	b008      	add	sp, #32
    6c0e:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    6c10:	2101      	movs	r1, #1
    6c12:	f105 0094 	add.w	r0, r5, #148	; 0x94
    6c16:	f01d fe35 	bl	24884 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6c1a:	07c2      	lsls	r2, r0, #31
    6c1c:	d441      	bmi.n	6ca2 <bt_enable+0xbe>
		err = bt_settings_init();
    6c1e:	f7fe fb6f 	bl	5300 <bt_settings_init>
		if (err) {
    6c22:	4604      	mov	r4, r0
    6c24:	2800      	cmp	r0, #0
    6c26:	d1f0      	bne.n	6c0a <bt_enable+0x26>
	ready_cb = cb;
    6c28:	4b23      	ldr	r3, [pc, #140]	; (6cb8 <bt_enable+0xd4>)
    6c2a:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6c2c:	2200      	movs	r2, #0
    6c2e:	2300      	movs	r3, #0
    6c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6c34:	f06f 0308 	mvn.w	r3, #8
    6c38:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6c3c:	e9cd 0000 	strd	r0, r0, [sp]
    6c40:	9004      	str	r0, [sp, #16]
    6c42:	4b1e      	ldr	r3, [pc, #120]	; (6cbc <bt_enable+0xd8>)
    6c44:	491e      	ldr	r1, [pc, #120]	; (6cc0 <bt_enable+0xdc>)
    6c46:	481f      	ldr	r0, [pc, #124]	; (6cc4 <bt_enable+0xe0>)
    6c48:	f44f 7220 	mov.w	r2, #640	; 0x280
    6c4c:	f019 fade 	bl	2020c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6c50:	491d      	ldr	r1, [pc, #116]	; (6cc8 <bt_enable+0xe4>)
    6c52:	481c      	ldr	r0, [pc, #112]	; (6cc4 <bt_enable+0xe0>)
    6c54:	f024 fb06 	bl	2b264 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    6c58:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    6c5c:	68db      	ldr	r3, [r3, #12]
    6c5e:	4798      	blx	r3
	if (err) {
    6c60:	4604      	mov	r4, r0
    6c62:	b158      	cbz	r0, 6c7c <bt_enable+0x98>
    6c64:	4b11      	ldr	r3, [pc, #68]	; (6cac <bt_enable+0xc8>)
    6c66:	4a12      	ldr	r2, [pc, #72]	; (6cb0 <bt_enable+0xcc>)
    6c68:	1ad2      	subs	r2, r2, r3
    6c6a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    6c6c:	0192      	lsls	r2, r2, #6
    6c6e:	4601      	mov	r1, r0
    6c70:	f042 0201 	orr.w	r2, r2, #1
    6c74:	4815      	ldr	r0, [pc, #84]	; (6ccc <bt_enable+0xe8>)
    6c76:	f01c fce8 	bl	2364a <log_1>
		return err;
    6c7a:	e7c6      	b.n	6c0a <bt_enable+0x26>
	if (!cb) {
    6c7c:	b926      	cbnz	r6, 6c88 <bt_enable+0xa4>
}
    6c7e:	b008      	add	sp, #32
    6c80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    6c84:	f7ff bd92 	b.w	67ac <bt_init>
    6c88:	2101      	movs	r1, #1
    6c8a:	f105 0090 	add.w	r0, r5, #144	; 0x90
    6c8e:	f01d fdf9 	bl	24884 <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6c92:	07c3      	lsls	r3, r0, #31
    6c94:	d4b9      	bmi.n	6c0a <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    6c96:	480e      	ldr	r0, [pc, #56]	; (6cd0 <bt_enable+0xec>)
    6c98:	f105 0188 	add.w	r1, r5, #136	; 0x88
    6c9c:	f024 f97c 	bl	2af98 <k_queue_append>
    6ca0:	e7b3      	b.n	6c0a <bt_enable+0x26>
		return -EALREADY;
    6ca2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6ca6:	e7b0      	b.n	6c0a <bt_enable+0x26>
    6ca8:	20000000 	.word	0x20000000
    6cac:	0002bfa8 	.word	0x0002bfa8
    6cb0:	0002c068 	.word	0x0002c068
    6cb4:	0002ef14 	.word	0x0002ef14
    6cb8:	20002998 	.word	0x20002998
    6cbc:	000063c9 	.word	0x000063c9
    6cc0:	20008a78 	.word	0x20008a78
    6cc4:	20000eb8 	.word	0x20000eb8
    6cc8:	0002ef2d 	.word	0x0002ef2d
    6ccc:	0002ef33 	.word	0x0002ef33
    6cd0:	20001458 	.word	0x20001458

00006cd4 <bt_set_name>:
{
    6cd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6cd6:	4605      	mov	r5, r0
	size_t len = strlen(name);
    6cd8:	f7f9 fbd8 	bl	48c <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    6cdc:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    6cde:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    6ce0:	d83b      	bhi.n	6d5a <bt_set_name+0x86>
	if (!strcmp(bt_dev.name, name)) {
    6ce2:	4e1f      	ldr	r6, [pc, #124]	; (6d60 <bt_set_name+0x8c>)
    6ce4:	4629      	mov	r1, r5
    6ce6:	f506 708c 	add.w	r0, r6, #280	; 0x118
    6cea:	f7f9 fbc5 	bl	478 <strcmp>
    6cee:	b910      	cbnz	r0, 6cf6 <bt_set_name+0x22>
	return 0;
    6cf0:	2000      	movs	r0, #0
}
    6cf2:	b004      	add	sp, #16
    6cf4:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    6cf6:	2348      	movs	r3, #72	; 0x48
    6cf8:	4622      	mov	r2, r4
    6cfa:	4629      	mov	r1, r5
    6cfc:	f506 708c 	add.w	r0, r6, #280	; 0x118
    6d00:	f024 fdaf 	bl	2b862 <__strncpy_chk>
	bt_dev.name[len] = '\0';
    6d04:	1933      	adds	r3, r6, r4
    6d06:	2200      	movs	r2, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6d08:	f106 0028 	add.w	r0, r6, #40	; 0x28
    6d0c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    6d10:	f01d fdb2 	bl	24878 <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    6d14:	0603      	lsls	r3, r0, #24
    6d16:	d50e      	bpl.n	6d36 <bt_set_name+0x62>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6d18:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6d1a:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6d1c:	a902      	add	r1, sp, #8
    6d1e:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6d22:	f88d 3000 	strb.w	r3, [sp]
    6d26:	f88d 4001 	strb.w	r4, [sp, #1]
    6d2a:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6d2c:	f8cd d008 	str.w	sp, [sp, #8]
    6d30:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6d32:	f7ff f803 	bl	5d3c <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    6d36:	490b      	ldr	r1, [pc, #44]	; (6d64 <bt_set_name+0x90>)
    6d38:	480b      	ldr	r0, [pc, #44]	; (6d68 <bt_set_name+0x94>)
    6d3a:	4622      	mov	r2, r4
    6d3c:	f7fc fbf2 	bl	3524 <settings_save_one>
		if (err) {
    6d40:	2800      	cmp	r0, #0
    6d42:	d0d5      	beq.n	6cf0 <bt_set_name+0x1c>
    6d44:	4b09      	ldr	r3, [pc, #36]	; (6d6c <bt_set_name+0x98>)
    6d46:	490a      	ldr	r1, [pc, #40]	; (6d70 <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    6d48:	480a      	ldr	r0, [pc, #40]	; (6d74 <bt_set_name+0xa0>)
    6d4a:	1ac9      	subs	r1, r1, r3
    6d4c:	08c9      	lsrs	r1, r1, #3
    6d4e:	0189      	lsls	r1, r1, #6
    6d50:	f041 0102 	orr.w	r1, r1, #2
    6d54:	f01c fc6c 	bl	23630 <log_0>
    6d58:	e7ca      	b.n	6cf0 <bt_set_name+0x1c>
		return -ENOMEM;
    6d5a:	f06f 000b 	mvn.w	r0, #11
    6d5e:	e7c8      	b.n	6cf2 <bt_set_name+0x1e>
    6d60:	20000000 	.word	0x20000000
    6d64:	20000118 	.word	0x20000118
    6d68:	0002ef4f 	.word	0x0002ef4f
    6d6c:	0002bfa8 	.word	0x0002bfa8
    6d70:	0002c068 	.word	0x0002c068
    6d74:	0002ef57 	.word	0x0002ef57

00006d78 <bt_get_name>:
}
    6d78:	4800      	ldr	r0, [pc, #0]	; (6d7c <bt_get_name+0x4>)
    6d7a:	4770      	bx	lr
    6d7c:	20000118 	.word	0x20000118

00006d80 <bt_id_create>:
{
    6d80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6d82:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d84:	4605      	mov	r5, r0
    6d86:	b918      	cbnz	r0, 6d90 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6d88:	b344      	cbz	r4, 6ddc <bt_id_create+0x5c>
		return -EINVAL;
    6d8a:	f06f 0415 	mvn.w	r4, #21
    6d8e:	e022      	b.n	6dd6 <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d90:	2300      	movs	r3, #0
    6d92:	4669      	mov	r1, sp
    6d94:	9300      	str	r3, [sp, #0]
    6d96:	f8cd 3003 	str.w	r3, [sp, #3]
    6d9a:	f01d fda2 	bl	248e2 <bt_addr_le_cmp>
    6d9e:	2800      	cmp	r0, #0
    6da0:	d0f2      	beq.n	6d88 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6da2:	782b      	ldrb	r3, [r5, #0]
    6da4:	2b01      	cmp	r3, #1
    6da6:	d104      	bne.n	6db2 <bt_id_create+0x32>
    6da8:	79ab      	ldrb	r3, [r5, #6]
    6daa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6dae:	2bc0      	cmp	r3, #192	; 0xc0
    6db0:	d00a      	beq.n	6dc8 <bt_id_create+0x48>
    6db2:	4b1a      	ldr	r3, [pc, #104]	; (6e1c <bt_id_create+0x9c>)
    6db4:	491a      	ldr	r1, [pc, #104]	; (6e20 <bt_id_create+0xa0>)
			BT_ERR("Only static random identity address supported");
    6db6:	481b      	ldr	r0, [pc, #108]	; (6e24 <bt_id_create+0xa4>)
    6db8:	1ac9      	subs	r1, r1, r3
    6dba:	08c9      	lsrs	r1, r1, #3
    6dbc:	0189      	lsls	r1, r1, #6
    6dbe:	f041 0101 	orr.w	r1, r1, #1
    6dc2:	f01c fc35 	bl	23630 <log_0>
			return -EINVAL;
    6dc6:	e7e0      	b.n	6d8a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6dc8:	4628      	mov	r0, r5
    6dca:	f7fe fc59 	bl	5680 <id_find>
    6dce:	2800      	cmp	r0, #0
    6dd0:	dbda      	blt.n	6d88 <bt_id_create+0x8>
			return -EALREADY;
    6dd2:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    6dd6:	4620      	mov	r0, r4
    6dd8:	b002      	add	sp, #8
    6dda:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6ddc:	4e12      	ldr	r6, [pc, #72]	; (6e28 <bt_id_create+0xa8>)
    6dde:	79f3      	ldrb	r3, [r6, #7]
    6de0:	2b01      	cmp	r3, #1
    6de2:	d018      	beq.n	6e16 <bt_id_create+0x96>
    6de4:	f106 0094 	add.w	r0, r6, #148	; 0x94
    6de8:	f01d fd46 	bl	24878 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6dec:	07c3      	lsls	r3, r0, #31
    6dee:	d40a      	bmi.n	6e06 <bt_id_create+0x86>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    6df0:	2d00      	cmp	r5, #0
    6df2:	d0ca      	beq.n	6d8a <bt_id_create+0xa>
    6df4:	4669      	mov	r1, sp
    6df6:	4628      	mov	r0, r5
    6df8:	9400      	str	r4, [sp, #0]
    6dfa:	f8cd 4003 	str.w	r4, [sp, #3]
    6dfe:	f01d fd70 	bl	248e2 <bt_addr_le_cmp>
    6e02:	2800      	cmp	r0, #0
    6e04:	d0c1      	beq.n	6d8a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    6e06:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    6e08:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    6e0a:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    6e0c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    6e0e:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    6e10:	f7fe fd7c 	bl	590c <id_create.isra.0>
	return new_id;
    6e14:	e7df      	b.n	6dd6 <bt_id_create+0x56>
		return -ENOMEM;
    6e16:	f06f 040b 	mvn.w	r4, #11
    6e1a:	e7dc      	b.n	6dd6 <bt_id_create+0x56>
    6e1c:	0002bfa8 	.word	0x0002bfa8
    6e20:	0002c068 	.word	0x0002c068
    6e24:	0002ef6c 	.word	0x0002ef6c
    6e28:	20000000 	.word	0x20000000

00006e2c <bt_setup_public_id_addr>:
{
    6e2c:	b570      	push	{r4, r5, r6, lr}
    6e2e:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6e30:	aa01      	add	r2, sp, #4
    6e32:	2100      	movs	r1, #0
    6e34:	f241 0009 	movw	r0, #4105	; 0x1009
    6e38:	f7fe fede 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6e3c:	4e1e      	ldr	r6, [pc, #120]	; (6eb8 <bt_setup_public_id_addr+0x8c>)
    6e3e:	4604      	mov	r4, r0
    6e40:	b168      	cbz	r0, 6e5e <bt_setup_public_id_addr+0x32>
    6e42:	491e      	ldr	r1, [pc, #120]	; (6ebc <bt_setup_public_id_addr+0x90>)
    6e44:	4b1e      	ldr	r3, [pc, #120]	; (6ec0 <bt_setup_public_id_addr+0x94>)
		BT_WARN("Failed to read public address");
    6e46:	481f      	ldr	r0, [pc, #124]	; (6ec4 <bt_setup_public_id_addr+0x98>)
    6e48:	1ac9      	subs	r1, r1, r3
    6e4a:	08c9      	lsrs	r1, r1, #3
    6e4c:	0189      	lsls	r1, r1, #6
    6e4e:	f041 0102 	orr.w	r1, r1, #2
    6e52:	f01c fbed 	bl	23630 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    6e56:	2300      	movs	r3, #0
    6e58:	71f3      	strb	r3, [r6, #7]
}
    6e5a:	b006      	add	sp, #24
    6e5c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    6e5e:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6e60:	689d      	ldr	r5, [r3, #8]
    6e62:	9004      	str	r0, [sp, #16]
    6e64:	3501      	adds	r5, #1
    6e66:	f8ad 0014 	strh.w	r0, [sp, #20]
    6e6a:	2206      	movs	r2, #6
    6e6c:	a904      	add	r1, sp, #16
    6e6e:	4628      	mov	r0, r5
    6e70:	f024 fc91 	bl	2b796 <memcmp>
    6e74:	b918      	cbnz	r0, 6e7e <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    6e76:	9801      	ldr	r0, [sp, #4]
    6e78:	f011 fad4 	bl	18424 <net_buf_unref>
    6e7c:	e7eb      	b.n	6e56 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    6e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e82:	2206      	movs	r2, #6
    6e84:	a902      	add	r1, sp, #8
    6e86:	4628      	mov	r0, r5
    6e88:	9302      	str	r3, [sp, #8]
    6e8a:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e8e:	f024 fc82 	bl	2b796 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6e92:	2800      	cmp	r0, #0
    6e94:	d0ef      	beq.n	6e76 <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    6e96:	4629      	mov	r1, r5
    6e98:	f10d 0011 	add.w	r0, sp, #17
    6e9c:	f01d fd24 	bl	248e8 <bt_addr_copy>
	net_buf_unref(rsp);
    6ea0:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    6ea2:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    6ea6:	f011 fabd 	bl	18424 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    6eaa:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    6eac:	a904      	add	r1, sp, #16
    6eae:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    6eb0:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    6eb2:	f7fe fd2b 	bl	590c <id_create.isra.0>
    6eb6:	e7d0      	b.n	6e5a <bt_setup_public_id_addr+0x2e>
    6eb8:	20000000 	.word	0x20000000
    6ebc:	0002c068 	.word	0x0002c068
    6ec0:	0002bfa8 	.word	0x0002bfa8
    6ec4:	0002ef9a 	.word	0x0002ef9a

00006ec8 <bt_read_static_addr>:
{
    6ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6eca:	4b27      	ldr	r3, [pc, #156]	; (6f68 <bt_read_static_addr+0xa0>)
    6ecc:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    6ed0:	f014 0401 	ands.w	r4, r4, #1
{
    6ed4:	4605      	mov	r5, r0
    6ed6:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6ed8:	d10a      	bne.n	6ef0 <bt_read_static_addr+0x28>
    6eda:	4924      	ldr	r1, [pc, #144]	; (6f6c <bt_read_static_addr+0xa4>)
    6edc:	4b24      	ldr	r3, [pc, #144]	; (6f70 <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
    6ede:	4825      	ldr	r0, [pc, #148]	; (6f74 <bt_read_static_addr+0xac>)
    6ee0:	1ac9      	subs	r1, r1, r3
    6ee2:	08c9      	lsrs	r1, r1, #3
    6ee4:	0189      	lsls	r1, r1, #6
    6ee6:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    6eea:	f01c fba1 	bl	23630 <log_0>
    6eee:	e012      	b.n	6f16 <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    6ef0:	aa01      	add	r2, sp, #4
    6ef2:	2100      	movs	r1, #0
    6ef4:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6ef8:	f7fe fe7e 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    6efc:	4603      	mov	r3, r0
    6efe:	b168      	cbz	r0, 6f1c <bt_read_static_addr+0x54>
    6f00:	4b1b      	ldr	r3, [pc, #108]	; (6f70 <bt_read_static_addr+0xa8>)
    6f02:	491a      	ldr	r1, [pc, #104]	; (6f6c <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
    6f04:	481c      	ldr	r0, [pc, #112]	; (6f78 <bt_read_static_addr+0xb0>)
    6f06:	1ac9      	subs	r1, r1, r3
    6f08:	08c9      	lsrs	r1, r1, #3
    6f0a:	0189      	lsls	r1, r1, #6
    6f0c:	f041 0102 	orr.w	r1, r1, #2
    6f10:	f01c fb8e 	bl	23630 <log_0>
		return 0;
    6f14:	2400      	movs	r4, #0
}
    6f16:	4620      	mov	r0, r4
    6f18:	b003      	add	sp, #12
    6f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    6f1c:	9801      	ldr	r0, [sp, #4]
    6f1e:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    6f20:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6f22:	f04f 0c16 	mov.w	ip, #22
    6f26:	42b4      	cmp	r4, r6
    6f28:	bf28      	it	cs
    6f2a:	4634      	movcs	r4, r6
    6f2c:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    6f30:	42a3      	cmp	r3, r4
    6f32:	db0c      	blt.n	6f4e <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
    6f34:	f011 fa76 	bl	18424 <net_buf_unref>
	if (!cnt) {
    6f38:	2c00      	cmp	r4, #0
    6f3a:	d1ec      	bne.n	6f16 <bt_read_static_addr+0x4e>
    6f3c:	490b      	ldr	r1, [pc, #44]	; (6f6c <bt_read_static_addr+0xa4>)
    6f3e:	4b0c      	ldr	r3, [pc, #48]	; (6f70 <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
    6f40:	480e      	ldr	r0, [pc, #56]	; (6f7c <bt_read_static_addr+0xb4>)
    6f42:	1ac9      	subs	r1, r1, r3
    6f44:	08c9      	lsrs	r1, r1, #3
    6f46:	0189      	lsls	r1, r1, #6
    6f48:	f041 0102 	orr.w	r1, r1, #2
    6f4c:	e7cd      	b.n	6eea <bt_read_static_addr+0x22>
    6f4e:	1c96      	adds	r6, r2, #2
    6f50:	fb0c 5103 	mla	r1, ip, r3, r5
    6f54:	f856 eb04 	ldr.w	lr, [r6], #4
    6f58:	f841 eb04 	str.w	lr, [r1], #4
    6f5c:	42be      	cmp	r6, r7
    6f5e:	d1f9      	bne.n	6f54 <bt_read_static_addr+0x8c>
    6f60:	883e      	ldrh	r6, [r7, #0]
    6f62:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    6f64:	3301      	adds	r3, #1
    6f66:	e7e3      	b.n	6f30 <bt_read_static_addr+0x68>
    6f68:	20000000 	.word	0x20000000
    6f6c:	0002c068 	.word	0x0002c068
    6f70:	0002bfa8 	.word	0x0002bfa8
    6f74:	0002efb8 	.word	0x0002efb8
    6f78:	0002efe4 	.word	0x0002efe4
    6f7c:	0002f004 	.word	0x0002f004

00006f80 <bt_setup_random_id_addr>:
{
    6f80:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.id_count) {
    6f82:	4d13      	ldr	r5, [pc, #76]	; (6fd0 <bt_setup_random_id_addr+0x50>)
    6f84:	79ec      	ldrb	r4, [r5, #7]
{
    6f86:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    6f88:	b9ec      	cbnz	r4, 6fc6 <bt_setup_random_id_addr+0x46>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    6f8a:	2101      	movs	r1, #1
    6f8c:	a802      	add	r0, sp, #8
    6f8e:	f7ff ff9b 	bl	6ec8 <bt_read_static_addr>
    6f92:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    6f94:	b1b8      	cbz	r0, 6fc6 <bt_setup_random_id_addr+0x46>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    6f96:	2616      	movs	r6, #22
    6f98:	e00e      	b.n	6fb8 <bt_setup_random_id_addr+0x38>
    6f9a:	ab02      	add	r3, sp, #8
    6f9c:	fb06 3102 	mla	r1, r6, r2, r3
    6fa0:	f10d 0001 	add.w	r0, sp, #1
    6fa4:	f01d fca0 	bl	248e8 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    6fa8:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    6faa:	4669      	mov	r1, sp
    6fac:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    6fae:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    6fb2:	f7fe fcab 	bl	590c <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6fb6:	3401      	adds	r4, #1
    6fb8:	79eb      	ldrb	r3, [r5, #7]
    6fba:	b2e2      	uxtb	r2, r4
    6fbc:	4293      	cmp	r3, r2
    6fbe:	d8ec      	bhi.n	6f9a <bt_setup_random_id_addr+0x1a>
			return 0;
    6fc0:	2000      	movs	r0, #0
}
    6fc2:	b008      	add	sp, #32
    6fc4:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    6fc6:	2100      	movs	r1, #0
    6fc8:	4608      	mov	r0, r1
    6fca:	f7ff fed9 	bl	6d80 <bt_id_create>
    6fce:	e7f8      	b.n	6fc2 <bt_setup_random_id_addr+0x42>
    6fd0:	20000000 	.word	0x20000000

00006fd4 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    6fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    6fd8:	690d      	ldr	r5, [r1, #16]
{
    6fda:	b08d      	sub	sp, #52	; 0x34
    6fdc:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    6fde:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    6fe0:	ebb5 0b03 	subs.w	fp, r5, r3
{
    6fe4:	4606      	mov	r6, r0
    6fe6:	4881      	ldr	r0, [pc, #516]	; (71ec <bt_le_adv_start_legacy+0x218>)
	struct bt_conn *conn = NULL;
    6fe8:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
    6fea:	bf18      	it	ne
    6fec:	f04f 0b01 	movne.w	fp, #1
{
    6ff0:	460c      	mov	r4, r1
    6ff2:	4691      	mov	r9, r2
    6ff4:	f01d fc40 	bl	24878 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6ff8:	0787      	lsls	r7, r0, #30
    6ffa:	f140 80e9 	bpl.w	71d0 <bt_le_adv_start_legacy+0x1fc>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    6ffe:	4608      	mov	r0, r1
    7000:	f7fe fb56 	bl	56b0 <valid_adv_param>
    7004:	4607      	mov	r7, r0
    7006:	2800      	cmp	r0, #0
    7008:	f000 80e5 	beq.w	71d6 <bt_le_adv_start_legacy+0x202>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    700c:	f106 0810 	add.w	r8, r6, #16
    7010:	4640      	mov	r0, r8
    7012:	f01d fc31 	bl	24878 <atomic_get>
    7016:	f3c0 1380 	ubfx	r3, r0, #6, #1
    701a:	0640      	lsls	r0, r0, #25
    701c:	f100 80de 	bmi.w	71dc <bt_le_adv_start_legacy+0x208>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    7020:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    7024:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    7028:	68a3      	ldr	r3, [r4, #8]
    702a:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    702e:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    7030:	68e3      	ldr	r3, [r4, #12]
    7032:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    7036:	f01d fc10 	bl	2485a <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    703a:	7832      	ldrb	r2, [r6, #0]
    703c:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    703e:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    7042:	429a      	cmp	r2, r3
    7044:	d004      	beq.n	7050 <bt_le_adv_start_legacy+0x7c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7046:	4869      	ldr	r0, [pc, #420]	; (71ec <bt_le_adv_start_legacy+0x218>)
    7048:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    704c:	f01d fc29 	bl	248a2 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    7050:	4b67      	ldr	r3, [pc, #412]	; (71f0 <bt_le_adv_start_legacy+0x21c>)
	adv->id = param->id;
    7052:	7820      	ldrb	r0, [r4, #0]
    7054:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    7056:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    705a:	465a      	mov	r2, fp
    705c:	6861      	ldr	r1, [r4, #4]
    705e:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    7062:	f7fe ff7f 	bl	5f64 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    7066:	4683      	mov	fp, r0
    7068:	2800      	cmp	r0, #0
    706a:	d16f      	bne.n	714c <bt_le_adv_start_legacy+0x178>
		return err;
	}

	if (dir_adv) {
    706c:	f106 0009 	add.w	r0, r6, #9
    7070:	2d00      	cmp	r5, #0
    7072:	d048      	beq.n	7106 <bt_le_adv_start_legacy+0x132>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    7074:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7076:	f01d fc3c 	bl	248f2 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    707a:	6860      	ldr	r0, [r4, #4]
    707c:	07c1      	lsls	r1, r0, #31
    707e:	d54a      	bpl.n	7116 <bt_le_adv_start_legacy+0x142>
		scannable = true;

		if (dir_adv) {
    7080:	2d00      	cmp	r5, #0
    7082:	d045      	beq.n	7110 <bt_le_adv_start_legacy+0x13c>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    7084:	f010 0f10 	tst.w	r0, #16
    7088:	bf14      	ite	ne
    708a:	2304      	movne	r3, #4
    708c:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    708e:	6921      	ldr	r1, [r4, #16]
    7090:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7094:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    7098:	f01d fc2b 	bl	248f2 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    709c:	210f      	movs	r1, #15
    709e:	f242 0006 	movw	r0, #8198	; 0x2006
    70a2:	f7fe fd71 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
    70a6:	4683      	mov	fp, r0
    70a8:	2800      	cmp	r0, #0
    70aa:	f000 809a 	beq.w	71e2 <bt_le_adv_start_legacy+0x20e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    70ae:	220f      	movs	r2, #15
    70b0:	a908      	add	r1, sp, #32
    70b2:	3008      	adds	r0, #8
    70b4:	f01e fefa 	bl	25eac <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    70b8:	2200      	movs	r2, #0
    70ba:	4659      	mov	r1, fp
    70bc:	f242 0006 	movw	r0, #8198	; 0x2006
    70c0:	f7fe fd9a 	bl	5bf8 <bt_hci_cmd_send_sync>
	if (err) {
    70c4:	2800      	cmp	r0, #0
    70c6:	f040 808f 	bne.w	71e8 <bt_le_adv_start_legacy+0x214>
		return err;
	}

	if (!dir_adv) {
    70ca:	b37d      	cbz	r5, 712c <bt_le_adv_start_legacy+0x158>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    70cc:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    70ce:	07da      	lsls	r2, r3, #31
    70d0:	d440      	bmi.n	7154 <bt_le_adv_start_legacy+0x180>
	return set_le_adv_enable_legacy(adv, enable);
    70d2:	2101      	movs	r1, #1
    70d4:	4630      	mov	r0, r6
    70d6:	f7fe ff9f 	bl	6018 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    70da:	4683      	mov	fp, r0
    70dc:	2800      	cmp	r0, #0
    70de:	d070      	beq.n	71c2 <bt_le_adv_start_legacy+0x1ee>
    70e0:	4b44      	ldr	r3, [pc, #272]	; (71f4 <bt_le_adv_start_legacy+0x220>)
    70e2:	4945      	ldr	r1, [pc, #276]	; (71f8 <bt_le_adv_start_legacy+0x224>)
		BT_ERR("Failed to start advertiser");
    70e4:	4845      	ldr	r0, [pc, #276]	; (71fc <bt_le_adv_start_legacy+0x228>)
    70e6:	1ac9      	subs	r1, r1, r3
    70e8:	08c9      	lsrs	r1, r1, #3
    70ea:	0189      	lsls	r1, r1, #6
    70ec:	f041 0101 	orr.w	r1, r1, #1
    70f0:	f01c fa9e 	bl	23630 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    70f4:	9805      	ldr	r0, [sp, #20]
    70f6:	b348      	cbz	r0, 714c <bt_le_adv_start_legacy+0x178>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    70f8:	2100      	movs	r1, #0
    70fa:	f000 fc87 	bl	7a0c <bt_conn_set_state>
			bt_conn_unref(conn);
    70fe:	9805      	ldr	r0, [sp, #20]
    7100:	f01d fd82 	bl	24c08 <bt_conn_unref>
    7104:	e022      	b.n	714c <bt_le_adv_start_legacy+0x178>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7106:	9506      	str	r5, [sp, #24]
    7108:	a906      	add	r1, sp, #24
    710a:	f8cd 501b 	str.w	r5, [sp, #27]
    710e:	e7b2      	b.n	7076 <bt_le_adv_start_legacy+0xa2>
			set_param.type = BT_HCI_ADV_IND;
    7110:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    7114:	e7c2      	b.n	709c <bt_le_adv_start_legacy+0xc8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    7116:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7118:	b933      	cbnz	r3, 7128 <bt_le_adv_start_legacy+0x154>
    711a:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    711e:	f1c7 0303 	rsb	r3, r7, #3
    7122:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7126:	e7b9      	b.n	709c <bt_le_adv_start_legacy+0xc8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    7128:	2701      	movs	r7, #1
    712a:	e7f8      	b.n	711e <bt_le_adv_start_legacy+0x14a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    712c:	6863      	ldr	r3, [r4, #4]
    712e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    7132:	e9cd 7301 	strd	r7, r3, [sp, #4]
    7136:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7138:	9300      	str	r3, [sp, #0]
    713a:	4652      	mov	r2, sl
    713c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    713e:	4649      	mov	r1, r9
    7140:	4630      	mov	r0, r6
    7142:	f7fe fe6d 	bl	5e20 <le_adv_update.constprop.0>
		if (err) {
    7146:	4683      	mov	fp, r0
    7148:	2800      	cmp	r0, #0
    714a:	d0bf      	beq.n	70cc <bt_le_adv_start_legacy+0xf8>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    714c:	4658      	mov	r0, fp
    714e:	b00d      	add	sp, #52	; 0x34
    7150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    7154:	a905      	add	r1, sp, #20
    7156:	4630      	mov	r0, r6
    7158:	f7fe fc94 	bl	5a84 <le_adv_start_add_conn>
		if (err) {
    715c:	4683      	mov	fp, r0
    715e:	2800      	cmp	r0, #0
    7160:	d0b7      	beq.n	70d2 <bt_le_adv_start_legacy+0xfe>
			if (err == -ENOMEM && !dir_adv &&
    7162:	f110 0f0c 	cmn.w	r0, #12
    7166:	d1f1      	bne.n	714c <bt_le_adv_start_legacy+0x178>
    7168:	2d00      	cmp	r5, #0
    716a:	d1ef      	bne.n	714c <bt_le_adv_start_legacy+0x178>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    716c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    716e:	079b      	lsls	r3, r3, #30
    7170:	d4ec      	bmi.n	714c <bt_le_adv_start_legacy+0x178>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7172:	6860      	ldr	r0, [r4, #4]
    7174:	f080 0002 	eor.w	r0, r0, #2
    7178:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    717c:	f00b 0201 	and.w	r2, fp, #1
    7180:	210c      	movs	r1, #12
    7182:	4640      	mov	r0, r8
    7184:	f01d fb9c 	bl	248c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    7188:	6862      	ldr	r2, [r4, #4]
    718a:	2107      	movs	r1, #7
    718c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7190:	4640      	mov	r0, r8
    7192:	f01d fb95 	bl	248c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    7196:	6862      	ldr	r2, [r4, #4]
    7198:	2108      	movs	r1, #8
    719a:	f002 0201 	and.w	r2, r2, #1
    719e:	4640      	mov	r0, r8
    71a0:	f01d fb8e 	bl	248c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    71a4:	463a      	mov	r2, r7
    71a6:	2109      	movs	r1, #9
    71a8:	4640      	mov	r0, r8
    71aa:	f01d fb89 	bl	248c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    71ae:	6862      	ldr	r2, [r4, #4]
    71b0:	210b      	movs	r1, #11
    71b2:	f3c2 0280 	ubfx	r2, r2, #2, #1
    71b6:	4640      	mov	r0, r8
    71b8:	f01d fb82 	bl	248c0 <atomic_set_bit_to>
	return 0;
    71bc:	f04f 0b00 	mov.w	fp, #0
    71c0:	e7c4      	b.n	714c <bt_le_adv_start_legacy+0x178>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    71c2:	9805      	ldr	r0, [sp, #20]
    71c4:	b108      	cbz	r0, 71ca <bt_le_adv_start_legacy+0x1f6>
		bt_conn_unref(conn);
    71c6:	f01d fd1f 	bl	24c08 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    71ca:	2d00      	cmp	r5, #0
    71cc:	d1d6      	bne.n	717c <bt_le_adv_start_legacy+0x1a8>
    71ce:	e7d0      	b.n	7172 <bt_le_adv_start_legacy+0x19e>
		return -EAGAIN;
    71d0:	f06f 0b0a 	mvn.w	fp, #10
    71d4:	e7ba      	b.n	714c <bt_le_adv_start_legacy+0x178>
		return -EINVAL;
    71d6:	f06f 0b15 	mvn.w	fp, #21
    71da:	e7b7      	b.n	714c <bt_le_adv_start_legacy+0x178>
		return -EALREADY;
    71dc:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    71e0:	e7b4      	b.n	714c <bt_le_adv_start_legacy+0x178>
		return -ENOBUFS;
    71e2:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    71e6:	e7b1      	b.n	714c <bt_le_adv_start_legacy+0x178>
    71e8:	4683      	mov	fp, r0
    71ea:	e7af      	b.n	714c <bt_le_adv_start_legacy+0x178>
    71ec:	20000094 	.word	0x20000094
    71f0:	20000000 	.word	0x20000000
    71f4:	0002bfa8 	.word	0x0002bfa8
    71f8:	0002c068 	.word	0x0002c068
    71fc:	0002f02d 	.word	0x0002f02d

00007200 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7200:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7202:	9c04      	ldr	r4, [sp, #16]
    7204:	e9cd 3400 	strd	r3, r4, [sp]
    7208:	4613      	mov	r3, r2
    720a:	460a      	mov	r2, r1
    720c:	4601      	mov	r1, r0
    720e:	4802      	ldr	r0, [pc, #8]	; (7218 <bt_le_adv_start+0x18>)
    7210:	f7ff fee0 	bl	6fd4 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    7214:	b002      	add	sp, #8
    7216:	bd10      	pop	{r4, pc}
    7218:	20000018 	.word	0x20000018

0000721c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    721c:	b530      	push	{r4, r5, lr}
    721e:	4c22      	ldr	r4, [pc, #136]	; (72a8 <bt_le_adv_stop+0x8c>)
    7220:	b085      	sub	sp, #20
    7222:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7226:	f104 0028 	add.w	r0, r4, #40	; 0x28
    722a:	f01d fb3a 	bl	248a2 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    722e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7232:	f01d fb21 	bl	24878 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    7236:	0642      	lsls	r2, r0, #25
    7238:	f3c0 1380 	ubfx	r3, r0, #6, #1
    723c:	d531      	bpl.n	72a2 <bt_le_adv_stop+0x86>
    723e:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7242:	f01d fb19 	bl	24878 <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7246:	05c3      	lsls	r3, r0, #23
    7248:	d521      	bpl.n	728e <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    724a:	2300      	movs	r3, #0
    724c:	4669      	mov	r1, sp
    724e:	f104 0021 	add.w	r0, r4, #33	; 0x21
    7252:	9300      	str	r3, [sp, #0]
    7254:	f8cd 3003 	str.w	r3, [sp, #3]
    7258:	f01d fb43 	bl	248e2 <bt_addr_le_cmp>
    725c:	7e25      	ldrb	r5, [r4, #24]
    725e:	b9e0      	cbnz	r0, 729a <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7260:	4b12      	ldr	r3, [pc, #72]	; (72ac <bt_le_adv_stop+0x90>)
    7262:	889a      	ldrh	r2, [r3, #4]
    7264:	6818      	ldr	r0, [r3, #0]
    7266:	799b      	ldrb	r3, [r3, #6]
    7268:	f8ad 200c 	strh.w	r2, [sp, #12]
    726c:	9002      	str	r0, [sp, #8]
    726e:	f88d 300e 	strb.w	r3, [sp, #14]
    7272:	2204      	movs	r2, #4
    7274:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    7276:	4628      	mov	r0, r5
    7278:	f000 fcf8 	bl	7c6c <bt_conn_lookup_state_le>
    727c:	4604      	mov	r4, r0
	if (conn) {
    727e:	b130      	cbz	r0, 728e <bt_le_adv_stop+0x72>
		conn->err = status;
    7280:	2100      	movs	r1, #0
    7282:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7284:	f000 fbc2 	bl	7a0c <bt_conn_set_state>
		bt_conn_unref(conn);
    7288:	4620      	mov	r0, r4
    728a:	f01d fcbd 	bl	24c08 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    728e:	4808      	ldr	r0, [pc, #32]	; (72b0 <bt_le_adv_stop+0x94>)
    7290:	2100      	movs	r1, #0
    7292:	f7fe fec1 	bl	6018 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    7296:	b005      	add	sp, #20
    7298:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    729a:	2205      	movs	r2, #5
    729c:	f104 0121 	add.w	r1, r4, #33	; 0x21
    72a0:	e7e9      	b.n	7276 <bt_le_adv_stop+0x5a>
		return 0;
    72a2:	4618      	mov	r0, r3
    72a4:	e7f7      	b.n	7296 <bt_le_adv_stop+0x7a>
    72a6:	bf00      	nop
    72a8:	20000000 	.word	0x20000000
    72ac:	0002c160 	.word	0x0002c160
    72b0:	20000018 	.word	0x20000018

000072b4 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    72b4:	b513      	push	{r0, r1, r4, lr}
    72b6:	4818      	ldr	r0, [pc, #96]	; (7318 <bt_le_adv_resume+0x64>)
    72b8:	f01d fade 	bl	24878 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    72bc:	04c1      	lsls	r1, r0, #19
    72be:	d529      	bpl.n	7314 <bt_le_adv_resume+0x60>
    72c0:	4815      	ldr	r0, [pc, #84]	; (7318 <bt_le_adv_resume+0x64>)
    72c2:	f01d fad9 	bl	24878 <atomic_get>
    72c6:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    72c8:	f3c0 1480 	ubfx	r4, r0, #6, #1
    72cc:	d422      	bmi.n	7314 <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    72ce:	4812      	ldr	r0, [pc, #72]	; (7318 <bt_le_adv_resume+0x64>)
    72d0:	f01d fad2 	bl	24878 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    72d4:	05c3      	lsls	r3, r0, #23
    72d6:	d51d      	bpl.n	7314 <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    72d8:	4810      	ldr	r0, [pc, #64]	; (731c <bt_le_adv_resume+0x68>)
    72da:	a901      	add	r1, sp, #4
    72dc:	f7fe fbd2 	bl	5a84 <le_adv_start_add_conn>
	if (err) {
    72e0:	b9c0      	cbnz	r0, 7314 <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    72e2:	480e      	ldr	r0, [pc, #56]	; (731c <bt_le_adv_resume+0x68>)
    72e4:	2101      	movs	r1, #1
    72e6:	f7fe fe97 	bl	6018 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    72ea:	b150      	cbz	r0, 7302 <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    72ec:	4621      	mov	r1, r4
    72ee:	9801      	ldr	r0, [sp, #4]
    72f0:	f000 fb8c 	bl	7a0c <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    72f4:	4808      	ldr	r0, [pc, #32]	; (7318 <bt_le_adv_resume+0x64>)
    72f6:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    72fa:	f01d fad2 	bl	248a2 <atomic_and>
	return (old & mask) != 0;
    72fe:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    7302:	9801      	ldr	r0, [sp, #4]
    7304:	f01d fc80 	bl	24c08 <bt_conn_unref>
	if (persist_paused) {
    7308:	b124      	cbz	r4, 7314 <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    730a:	4803      	ldr	r0, [pc, #12]	; (7318 <bt_le_adv_resume+0x64>)
    730c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7310:	f01d fab8 	bl	24884 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    7314:	b002      	add	sp, #8
    7316:	bd10      	pop	{r4, pc}
    7318:	20000028 	.word	0x20000028
    731c:	20000018 	.word	0x20000018

00007320 <enh_conn_complete>:
{
    7320:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    7324:	7805      	ldrb	r5, [r0, #0]
{
    7326:	4604      	mov	r4, r0
	if (evt->status) {
    7328:	b365      	cbz	r5, 7384 <enh_conn_complete+0x64>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    732a:	2d3c      	cmp	r5, #60	; 0x3c
    732c:	d11e      	bne.n	736c <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    732e:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7332:	4857      	ldr	r0, [pc, #348]	; (7490 <enh_conn_complete+0x170>)
    7334:	f01d fab5 	bl	248a2 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    7338:	2000      	movs	r0, #0
    733a:	f7fe fac9 	bl	58d0 <find_pending_connect.part.0>
		if (!conn) {
    733e:	4604      	mov	r4, r0
    7340:	b960      	cbnz	r0, 735c <enh_conn_complete+0x3c>
    7342:	4954      	ldr	r1, [pc, #336]	; (7494 <enh_conn_complete+0x174>)
    7344:	4b54      	ldr	r3, [pc, #336]	; (7498 <enh_conn_complete+0x178>)
			BT_ERR("No pending slave connection");
    7346:	4855      	ldr	r0, [pc, #340]	; (749c <enh_conn_complete+0x17c>)
    7348:	1ac9      	subs	r1, r1, r3
    734a:	08c9      	lsrs	r1, r1, #3
    734c:	0189      	lsls	r1, r1, #6
    734e:	f041 0101 	orr.w	r1, r1, #1
    7352:	f01c f96d 	bl	23630 <log_0>
}
    7356:	b004      	add	sp, #16
    7358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    735c:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    735e:	2100      	movs	r1, #0
    7360:	f000 fb54 	bl	7a0c <bt_conn_set_state>
		bt_conn_unref(conn);
    7364:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    7366:	f01d fc4f 	bl	24c08 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    736a:	e7f4      	b.n	7356 <enh_conn_complete+0x36>
    736c:	4b4a      	ldr	r3, [pc, #296]	; (7498 <enh_conn_complete+0x178>)
    736e:	4a49      	ldr	r2, [pc, #292]	; (7494 <enh_conn_complete+0x174>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    7370:	484b      	ldr	r0, [pc, #300]	; (74a0 <enh_conn_complete+0x180>)
    7372:	1ad2      	subs	r2, r2, r3
    7374:	08d2      	lsrs	r2, r2, #3
    7376:	0192      	lsls	r2, r2, #6
    7378:	f042 0202 	orr.w	r2, r2, #2
    737c:	4629      	mov	r1, r5
    737e:	f01c f964 	bl	2364a <log_1>
		return;
    7382:	e7e8      	b.n	7356 <enh_conn_complete+0x36>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7384:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7386:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    738a:	3b02      	subs	r3, #2
    738c:	1d06      	adds	r6, r0, #4
    738e:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7390:	fa1f f788 	uxth.w	r7, r8
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7394:	4631      	mov	r1, r6
    7396:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7398:	d835      	bhi.n	7406 <enh_conn_complete+0xe6>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    739a:	f01d faaa 	bl	248f2 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    739e:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    73a2:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    73a6:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    73a8:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    73ac:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    73b0:	f01d fa9a 	bl	248e8 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    73b4:	2301      	movs	r3, #1
    73b6:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    73ba:	78e3      	ldrb	r3, [r4, #3]
    73bc:	2b01      	cmp	r3, #1
    73be:	d10c      	bne.n	73da <enh_conn_complete+0xba>
    73c0:	a802      	add	r0, sp, #8
    73c2:	f7fe fa85 	bl	58d0 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    73c6:	78e3      	ldrb	r3, [r4, #3]
    73c8:	2b01      	cmp	r3, #1
    73ca:	4605      	mov	r5, r0
    73cc:	d104      	bne.n	73d8 <enh_conn_complete+0xb8>
    73ce:	4830      	ldr	r0, [pc, #192]	; (7490 <enh_conn_complete+0x170>)
    73d0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    73d4:	f01d fa65 	bl	248a2 <atomic_and>
	if (!conn) {
    73d8:	b9dd      	cbnz	r5, 7412 <enh_conn_complete+0xf2>
    73da:	4a2f      	ldr	r2, [pc, #188]	; (7498 <enh_conn_complete+0x178>)
    73dc:	4c2d      	ldr	r4, [pc, #180]	; (7494 <enh_conn_complete+0x174>)
		BT_ERR("No pending conn for peer %s",
    73de:	4630      	mov	r0, r6
    73e0:	1aa4      	subs	r4, r4, r2
    73e2:	f7fd fe11 	bl	5008 <bt_addr_le_str_real>
    73e6:	f7fb fbf3 	bl	2bd0 <log_strdup>
    73ea:	08e4      	lsrs	r4, r4, #3
    73ec:	01a4      	lsls	r4, r4, #6
    73ee:	f044 0401 	orr.w	r4, r4, #1
    73f2:	4601      	mov	r1, r0
    73f4:	4622      	mov	r2, r4
    73f6:	482b      	ldr	r0, [pc, #172]	; (74a4 <enh_conn_complete+0x184>)
    73f8:	f01c f927 	bl	2364a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    73fc:	211f      	movs	r1, #31
    73fe:	4638      	mov	r0, r7
    7400:	f01d fa7e 	bl	24900 <bt_hci_disconnect>
		return;
    7404:	e7a7      	b.n	7356 <enh_conn_complete+0x36>
		bt_addr_le_copy(&id_addr,
    7406:	f01d fa74 	bl	248f2 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    740a:	4668      	mov	r0, sp
    740c:	f01d fa71 	bl	248f2 <bt_addr_le_copy>
    7410:	e7d3      	b.n	73ba <enh_conn_complete+0x9a>
	conn->handle = handle;
    7412:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7414:	a902      	add	r1, sp, #8
	conn->handle = handle;
    7416:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    741a:	f01d fa6a 	bl	248f2 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    741e:	7e22      	ldrb	r2, [r4, #24]
    7420:	7de3      	ldrb	r3, [r4, #23]
    7422:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7426:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    742a:	7ea2      	ldrb	r2, [r4, #26]
    742c:	7e63      	ldrb	r3, [r4, #25]
    742e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7432:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7436:	7ee3      	ldrb	r3, [r4, #27]
    7438:	7f22      	ldrb	r2, [r4, #28]
    743a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    743e:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    7442:	78e3      	ldrb	r3, [r4, #3]
    7444:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    7446:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7448:	2b01      	cmp	r3, #1
	conn->err = 0U;
    744a:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    744c:	d116      	bne.n	747c <enh_conn_complete+0x15c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    744e:	4669      	mov	r1, sp
    7450:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    7454:	f01d fa4d 	bl	248f2 <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    7458:	7a29      	ldrb	r1, [r5, #8]
    745a:	4a13      	ldr	r2, [pc, #76]	; (74a8 <enh_conn_complete+0x188>)
    745c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    7460:	4411      	add	r1, r2
    7462:	f105 0096 	add.w	r0, r5, #150	; 0x96
    7466:	f01d fa44 	bl	248f2 <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    746a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    746e:	4622      	mov	r2, r4
    7470:	f001 0340 	and.w	r3, r1, #64	; 0x40
    7474:	4313      	orrs	r3, r2
    7476:	d001      	beq.n	747c <enh_conn_complete+0x15c>
			bt_le_adv_resume();
    7478:	f7ff ff1c 	bl	72b4 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    747c:	2107      	movs	r1, #7
    747e:	4628      	mov	r0, r5
    7480:	f000 fac4 	bl	7a0c <bt_conn_set_state>
	conn_auto_initiate(conn);
    7484:	4628      	mov	r0, r5
    7486:	f7fe fe2f 	bl	60e8 <conn_auto_initiate>
	bt_conn_unref(conn);
    748a:	4628      	mov	r0, r5
    748c:	e76b      	b.n	7366 <enh_conn_complete+0x46>
    748e:	bf00      	nop
    7490:	20000028 	.word	0x20000028
    7494:	0002c068 	.word	0x0002c068
    7498:	0002bfa8 	.word	0x0002bfa8
    749c:	0002f048 	.word	0x0002f048
    74a0:	0002f064 	.word	0x0002f064
    74a4:	0002f07d 	.word	0x0002f07d
    74a8:	20000000 	.word	0x20000000

000074ac <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    74ac:	2300      	movs	r3, #0
	tx->user_data = NULL;
    74ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    74b2:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    74b4:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    74b6:	4801      	ldr	r0, [pc, #4]	; (74bc <tx_free+0x10>)
    74b8:	f023 bd6e 	b.w	2af98 <k_queue_append>
    74bc:	20000c30 	.word	0x20000c30

000074c0 <notify_connected>:
{
    74c0:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    74c2:	4b09      	ldr	r3, [pc, #36]	; (74e8 <notify_connected+0x28>)
    74c4:	681d      	ldr	r5, [r3, #0]
{
    74c6:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    74c8:	7a61      	ldrb	r1, [r4, #9]
    74ca:	b92d      	cbnz	r5, 74d8 <notify_connected+0x18>
	if (!conn->err) {
    74cc:	b951      	cbnz	r1, 74e4 <notify_connected+0x24>
		bt_gatt_connected(conn);
    74ce:	4620      	mov	r0, r4
}
    74d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    74d4:	f003 be60 	b.w	b198 <bt_gatt_connected>
		if (cb->connected) {
    74d8:	682b      	ldr	r3, [r5, #0]
    74da:	b10b      	cbz	r3, 74e0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    74dc:	4620      	mov	r0, r4
    74de:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    74e0:	692d      	ldr	r5, [r5, #16]
    74e2:	e7f1      	b.n	74c8 <notify_connected+0x8>
}
    74e4:	bd38      	pop	{r3, r4, r5, pc}
    74e6:	bf00      	nop
    74e8:	2000299c 	.word	0x2000299c

000074ec <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    74ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    74f0:	694d      	ldr	r5, [r1, #20]
{
    74f2:	4604      	mov	r4, r0
    74f4:	460e      	mov	r6, r1
    74f6:	4691      	mov	r9, r2
    74f8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    74fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74fe:	4845      	ldr	r0, [pc, #276]	; (7614 <send_frag+0x128>)
    7500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7504:	f018 fe10 	bl	20128 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    7508:	7aa3      	ldrb	r3, [r4, #10]
    750a:	2b07      	cmp	r3, #7
    750c:	d151      	bne.n	75b2 <send_frag+0xc6>
	__asm__ volatile(
    750e:	f04f 0320 	mov.w	r3, #32
    7512:	f3ef 8211 	mrs	r2, BASEPRI
    7516:	f383 8811 	msr	BASEPRI, r3
    751a:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    751e:	2d00      	cmp	r5, #0
    7520:	d059      	beq.n	75d6 <send_frag+0xea>
	parent->next = child;
    7522:	2300      	movs	r3, #0
    7524:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    7526:	69a3      	ldr	r3, [r4, #24]
    7528:	2b00      	cmp	r3, #0
    752a:	d151      	bne.n	75d0 <send_frag+0xe4>
	list->head = node;
    752c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    7530:	f382 8811 	msr	BASEPRI, r2
    7534:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    7538:	2104      	movs	r1, #4
    753a:	f106 0008 	add.w	r0, r6, #8
    753e:	f01e fcd1 	bl	25ee4 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7542:	8823      	ldrh	r3, [r4, #0]
    7544:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    7548:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    754c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    754e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7552:	3b04      	subs	r3, #4
    7554:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7556:	2302      	movs	r3, #2
    7558:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    755a:	4630      	mov	r0, r6
    755c:	f7fe fd8a 	bl	6074 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7560:	4601      	mov	r1, r0
    7562:	2800      	cmp	r0, #0
    7564:	d053      	beq.n	760e <send_frag+0x122>
    7566:	4b2c      	ldr	r3, [pc, #176]	; (7618 <send_frag+0x12c>)
    7568:	4a2c      	ldr	r2, [pc, #176]	; (761c <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    756a:	482d      	ldr	r0, [pc, #180]	; (7620 <send_frag+0x134>)
    756c:	1ad2      	subs	r2, r2, r3
    756e:	08d2      	lsrs	r2, r2, #3
    7570:	0192      	lsls	r2, r2, #6
    7572:	f042 0201 	orr.w	r2, r2, #1
    7576:	f01c f868 	bl	2364a <log_1>
	__asm__ volatile(
    757a:	f04f 0320 	mov.w	r3, #32
    757e:	f3ef 8111 	mrs	r1, BASEPRI
    7582:	f383 8811 	msr	BASEPRI, r3
    7586:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    758a:	2d00      	cmp	r5, #0
    758c:	d039      	beq.n	7602 <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    758e:	6963      	ldr	r3, [r4, #20]
    7590:	2200      	movs	r2, #0
    7592:	b153      	cbz	r3, 75aa <send_frag+0xbe>
    7594:	429d      	cmp	r5, r3
    7596:	d131      	bne.n	75fc <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    7598:	682b      	ldr	r3, [r5, #0]
    759a:	bb4a      	cbnz	r2, 75f0 <send_frag+0x104>
    759c:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    759e:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    75a0:	4295      	cmp	r5, r2
    75a2:	d100      	bne.n	75a6 <send_frag+0xba>
	list->tail = node;
    75a4:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    75a6:	2300      	movs	r3, #0
    75a8:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    75aa:	f381 8811 	msr	BASEPRI, r1
    75ae:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    75b2:	4818      	ldr	r0, [pc, #96]	; (7614 <send_frag+0x128>)
    75b4:	f018 fd92 	bl	200dc <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    75b8:	b115      	cbz	r5, 75c0 <send_frag+0xd4>
		tx_free(tx);
    75ba:	4628      	mov	r0, r5
    75bc:	f7ff ff76 	bl	74ac <tx_free>
	}

	if (always_consume) {
    75c0:	b11f      	cbz	r7, 75ca <send_frag+0xde>
		net_buf_unref(buf);
    75c2:	4630      	mov	r0, r6
    75c4:	f010 ff2e 	bl	18424 <net_buf_unref>
	}
	return false;
    75c8:	2700      	movs	r7, #0
}
    75ca:	4638      	mov	r0, r7
    75cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    75d0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    75d2:	61a5      	str	r5, [r4, #24]
}
    75d4:	e7ac      	b.n	7530 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    75d6:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    75d8:	b133      	cbz	r3, 75e8 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    75da:	f103 080c 	add.w	r8, r3, #12
    75de:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    75e0:	3301      	adds	r3, #1
    75e2:	f8c8 3000 	str.w	r3, [r8]
    75e6:	e7a3      	b.n	7530 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    75e8:	69e3      	ldr	r3, [r4, #28]
    75ea:	f104 081c 	add.w	r8, r4, #28
    75ee:	e7f7      	b.n	75e0 <send_frag+0xf4>
	parent->next = child;
    75f0:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    75f2:	69a3      	ldr	r3, [r4, #24]
    75f4:	429d      	cmp	r5, r3
	list->tail = node;
    75f6:	bf08      	it	eq
    75f8:	61a2      	streq	r2, [r4, #24]
}
    75fa:	e7d4      	b.n	75a6 <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    75fc:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    75fe:	681b      	ldr	r3, [r3, #0]
    7600:	e7c7      	b.n	7592 <send_frag+0xa6>
			(*pending_no_cb)--;
    7602:	f8d8 3000 	ldr.w	r3, [r8]
    7606:	3b01      	subs	r3, #1
    7608:	f8c8 3000 	str.w	r3, [r8]
    760c:	e7cd      	b.n	75aa <send_frag+0xbe>
	return true;
    760e:	2701      	movs	r7, #1
    7610:	e7db      	b.n	75ca <send_frag+0xde>
    7612:	bf00      	nop
    7614:	200000c8 	.word	0x200000c8
    7618:	0002bfa8 	.word	0x0002bfa8
    761c:	0002bfc0 	.word	0x0002bfc0
    7620:	0002ecc2 	.word	0x0002ecc2

00007624 <bt_conn_get_pkts>:
}
    7624:	4800      	ldr	r0, [pc, #0]	; (7628 <bt_conn_get_pkts+0x4>)
    7626:	4770      	bx	lr
    7628:	200000c8 	.word	0x200000c8

0000762c <notify_le_param_updated>:
{
    762c:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    762e:	f3bf 8f5b 	dmb	ish
    7632:	6842      	ldr	r2, [r0, #4]
    7634:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7638:	0592      	lsls	r2, r2, #22
{
    763a:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    763c:	f100 0304 	add.w	r3, r0, #4
    7640:	d519      	bpl.n	7676 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    7642:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7646:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    764a:	4291      	cmp	r1, r2
    764c:	d813      	bhi.n	7676 <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    764e:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    7652:	4291      	cmp	r1, r2
    7654:	d30f      	bcc.n	7676 <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    7656:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    765a:	4291      	cmp	r1, r2
    765c:	d10b      	bne.n	7676 <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    765e:	f3bf 8f5b 	dmb	ish
    7662:	e853 2f00 	ldrex	r2, [r3]
    7666:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    766a:	e843 2100 	strex	r1, r2, [r3]
    766e:	2900      	cmp	r1, #0
    7670:	d1f7      	bne.n	7662 <notify_le_param_updated+0x36>
    7672:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    7676:	4b08      	ldr	r3, [pc, #32]	; (7698 <notify_le_param_updated+0x6c>)
    7678:	681d      	ldr	r5, [r3, #0]
    767a:	b905      	cbnz	r5, 767e <notify_le_param_updated+0x52>
}
    767c:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    767e:	68ee      	ldr	r6, [r5, #12]
    7680:	b13e      	cbz	r6, 7692 <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    7682:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7686:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    768a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    768e:	4620      	mov	r0, r4
    7690:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    7692:	692d      	ldr	r5, [r5, #16]
    7694:	e7f1      	b.n	767a <notify_le_param_updated+0x4e>
    7696:	bf00      	nop
    7698:	2000299c 	.word	0x2000299c

0000769c <le_param_req>:
{
    769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    769e:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    76a0:	4608      	mov	r0, r1
{
    76a2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    76a4:	f01d f947 	bl	24936 <bt_le_conn_params_valid>
    76a8:	4604      	mov	r4, r0
    76aa:	b910      	cbnz	r0, 76b2 <le_param_req+0x16>
		return false;
    76ac:	2400      	movs	r4, #0
}
    76ae:	4620      	mov	r0, r4
    76b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    76b2:	4b09      	ldr	r3, [pc, #36]	; (76d8 <le_param_req+0x3c>)
    76b4:	681e      	ldr	r6, [r3, #0]
    76b6:	2e00      	cmp	r6, #0
    76b8:	d0f9      	beq.n	76ae <le_param_req+0x12>
		if (!cb->le_param_req) {
    76ba:	68b3      	ldr	r3, [r6, #8]
    76bc:	b90b      	cbnz	r3, 76c2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    76be:	6936      	ldr	r6, [r6, #16]
    76c0:	e7f9      	b.n	76b6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    76c2:	4629      	mov	r1, r5
    76c4:	4638      	mov	r0, r7
    76c6:	4798      	blx	r3
    76c8:	2800      	cmp	r0, #0
    76ca:	d0ef      	beq.n	76ac <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    76cc:	4628      	mov	r0, r5
    76ce:	f01d f932 	bl	24936 <bt_le_conn_params_valid>
    76d2:	2800      	cmp	r0, #0
    76d4:	d1f3      	bne.n	76be <le_param_req+0x22>
    76d6:	e7e9      	b.n	76ac <le_param_req+0x10>
    76d8:	2000299c 	.word	0x2000299c

000076dc <bt_conn_cb_register>:
	cb->_next = callback_list;
    76dc:	4b02      	ldr	r3, [pc, #8]	; (76e8 <bt_conn_cb_register+0xc>)
    76de:	681a      	ldr	r2, [r3, #0]
    76e0:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    76e2:	6018      	str	r0, [r3, #0]
}
    76e4:	4770      	bx	lr
    76e6:	bf00      	nop
    76e8:	2000299c 	.word	0x2000299c

000076ec <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    76ec:	b570      	push	{r4, r5, r6, lr}
    76ee:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    76f0:	f100 0634 	add.w	r6, r0, #52	; 0x34
    76f4:	2200      	movs	r2, #0
    76f6:	2300      	movs	r3, #0
    76f8:	4630      	mov	r0, r6
    76fa:	f01e fb7a 	bl	25df2 <net_buf_get>
    76fe:	4605      	mov	r5, r0
    7700:	b958      	cbnz	r0, 771a <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    7702:	4620      	mov	r0, r4
    7704:	f01d fa3c 	bl	24b80 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7708:	f104 0158 	add.w	r1, r4, #88	; 0x58
    770c:	4807      	ldr	r0, [pc, #28]	; (772c <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    770e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7712:	2200      	movs	r2, #0
    7714:	2300      	movs	r3, #0
    7716:	f018 be3d 	b.w	20394 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    771a:	6968      	ldr	r0, [r5, #20]
    771c:	b108      	cbz	r0, 7722 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    771e:	f7ff fec5 	bl	74ac <tx_free>
		net_buf_unref(buf);
    7722:	4628      	mov	r0, r5
    7724:	f010 fe7e 	bl	18424 <net_buf_unref>
    7728:	e7e4      	b.n	76f4 <conn_cleanup+0x8>
    772a:	bf00      	nop
    772c:	20001458 	.word	0x20001458

00007730 <bt_conn_recv>:
{
    7730:	b570      	push	{r4, r5, r6, lr}
    7732:	4616      	mov	r6, r2
    7734:	4604      	mov	r4, r0
    7736:	460d      	mov	r5, r1
	tx_notify(conn);
    7738:	f01d f9d3 	bl	24ae2 <tx_notify>
	switch (flags) {
    773c:	2e01      	cmp	r6, #1
    773e:	d02e      	beq.n	779e <bt_conn_recv+0x6e>
    7740:	2e02      	cmp	r6, #2
    7742:	d15b      	bne.n	77fc <bt_conn_recv+0xcc>
		if (conn->rx) {
    7744:	6923      	ldr	r3, [r4, #16]
    7746:	b163      	cbz	r3, 7762 <bt_conn_recv+0x32>
    7748:	4b37      	ldr	r3, [pc, #220]	; (7828 <bt_conn_recv+0xf8>)
    774a:	4938      	ldr	r1, [pc, #224]	; (782c <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    774c:	4838      	ldr	r0, [pc, #224]	; (7830 <bt_conn_recv+0x100>)
    774e:	1ac9      	subs	r1, r1, r3
    7750:	08c9      	lsrs	r1, r1, #3
    7752:	0189      	lsls	r1, r1, #6
    7754:	f041 0101 	orr.w	r1, r1, #1
    7758:	f01b ff6a 	bl	23630 <log_0>
			bt_conn_reset_rx_state(conn);
    775c:	4620      	mov	r0, r4
    775e:	f01d fa0f 	bl	24b80 <bt_conn_reset_rx_state>
		conn->rx = buf;
    7762:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    7764:	6923      	ldr	r3, [r4, #16]
    7766:	8999      	ldrh	r1, [r3, #12]
    7768:	2901      	cmp	r1, #1
    776a:	d95b      	bls.n	7824 <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    776c:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    776e:	7845      	ldrb	r5, [r0, #1]
    7770:	7802      	ldrb	r2, [r0, #0]
    7772:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    7776:	3204      	adds	r2, #4
    7778:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    777a:	428a      	cmp	r2, r1
    777c:	d852      	bhi.n	7824 <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    777e:	d249      	bcs.n	7814 <bt_conn_recv+0xe4>
    7780:	4829      	ldr	r0, [pc, #164]	; (7828 <bt_conn_recv+0xf8>)
    7782:	4b2a      	ldr	r3, [pc, #168]	; (782c <bt_conn_recv+0xfc>)
    7784:	1a1b      	subs	r3, r3, r0
    7786:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    7788:	019b      	lsls	r3, r3, #6
    778a:	482a      	ldr	r0, [pc, #168]	; (7834 <bt_conn_recv+0x104>)
    778c:	f043 0301 	orr.w	r3, r3, #1
    7790:	f01b ff6f 	bl	23672 <log_2>
		bt_conn_reset_rx_state(conn);
    7794:	4620      	mov	r0, r4
}
    7796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    779a:	f01d b9f1 	b.w	24b80 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    779e:	6920      	ldr	r0, [r4, #16]
    77a0:	b968      	cbnz	r0, 77be <bt_conn_recv+0x8e>
    77a2:	4922      	ldr	r1, [pc, #136]	; (782c <bt_conn_recv+0xfc>)
    77a4:	4b20      	ldr	r3, [pc, #128]	; (7828 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    77a6:	4824      	ldr	r0, [pc, #144]	; (7838 <bt_conn_recv+0x108>)
    77a8:	1ac9      	subs	r1, r1, r3
    77aa:	08c9      	lsrs	r1, r1, #3
    77ac:	0189      	lsls	r1, r1, #6
    77ae:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    77b2:	f01b ff3d 	bl	23630 <log_0>
			bt_conn_reset_rx_state(conn);
    77b6:	4620      	mov	r0, r4
    77b8:	f01d f9e2 	bl	24b80 <bt_conn_reset_rx_state>
    77bc:	e001      	b.n	77c2 <bt_conn_recv+0x92>
		if (!buf->len) {
    77be:	89ae      	ldrh	r6, [r5, #12]
    77c0:	b926      	cbnz	r6, 77cc <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    77c2:	4628      	mov	r0, r5
}
    77c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    77c8:	f010 be2c 	b.w	18424 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    77cc:	3008      	adds	r0, #8
    77ce:	f01e fbad 	bl	25f2c <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    77d2:	4286      	cmp	r6, r0
    77d4:	d908      	bls.n	77e8 <bt_conn_recv+0xb8>
    77d6:	4915      	ldr	r1, [pc, #84]	; (782c <bt_conn_recv+0xfc>)
    77d8:	4b13      	ldr	r3, [pc, #76]	; (7828 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    77da:	4818      	ldr	r0, [pc, #96]	; (783c <bt_conn_recv+0x10c>)
    77dc:	1ac9      	subs	r1, r1, r3
    77de:	08c9      	lsrs	r1, r1, #3
    77e0:	0189      	lsls	r1, r1, #6
    77e2:	f041 0101 	orr.w	r1, r1, #1
    77e6:	e7e4      	b.n	77b2 <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    77e8:	6920      	ldr	r0, [r4, #16]
    77ea:	89aa      	ldrh	r2, [r5, #12]
    77ec:	68a9      	ldr	r1, [r5, #8]
    77ee:	3008      	adds	r0, #8
    77f0:	f01e fb5c 	bl	25eac <net_buf_simple_add_mem>
		net_buf_unref(buf);
    77f4:	4628      	mov	r0, r5
    77f6:	f010 fe15 	bl	18424 <net_buf_unref>
		break;
    77fa:	e7b3      	b.n	7764 <bt_conn_recv+0x34>
    77fc:	4a0a      	ldr	r2, [pc, #40]	; (7828 <bt_conn_recv+0xf8>)
    77fe:	4b0b      	ldr	r3, [pc, #44]	; (782c <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    7800:	480f      	ldr	r0, [pc, #60]	; (7840 <bt_conn_recv+0x110>)
    7802:	1a9b      	subs	r3, r3, r2
    7804:	08db      	lsrs	r3, r3, #3
    7806:	019b      	lsls	r3, r3, #6
    7808:	f043 0201 	orr.w	r2, r3, #1
    780c:	4631      	mov	r1, r6
    780e:	f01b ff1c 	bl	2364a <log_1>
		bt_conn_reset_rx_state(conn);
    7812:	e7d0      	b.n	77b6 <bt_conn_recv+0x86>
	conn->rx = NULL;
    7814:	2200      	movs	r2, #0
    7816:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    7818:	4620      	mov	r0, r4
    781a:	4619      	mov	r1, r3
}
    781c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7820:	f000 bd0a 	b.w	8238 <bt_l2cap_recv>
}
    7824:	bd70      	pop	{r4, r5, r6, pc}
    7826:	bf00      	nop
    7828:	0002bfa8 	.word	0x0002bfa8
    782c:	0002bfc0 	.word	0x0002bfc0
    7830:	0002f0a5 	.word	0x0002f0a5
    7834:	0002f125 	.word	0x0002f125
    7838:	0002f0c2 	.word	0x0002f0c2
    783c:	0002f0e0 	.word	0x0002f0e0
    7840:	0002f107 	.word	0x0002f107

00007844 <bt_conn_send_cb>:
{
    7844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7848:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    784a:	7a83      	ldrb	r3, [r0, #10]
    784c:	2b07      	cmp	r3, #7
{
    784e:	4606      	mov	r6, r0
    7850:	460d      	mov	r5, r1
    7852:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7854:	d00f      	beq.n	7876 <bt_conn_send_cb+0x32>
    7856:	4b2a      	ldr	r3, [pc, #168]	; (7900 <bt_conn_send_cb+0xbc>)
    7858:	492a      	ldr	r1, [pc, #168]	; (7904 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    785a:	482b      	ldr	r0, [pc, #172]	; (7908 <bt_conn_send_cb+0xc4>)
    785c:	1ac9      	subs	r1, r1, r3
    785e:	08c9      	lsrs	r1, r1, #3
    7860:	0189      	lsls	r1, r1, #6
    7862:	f041 0101 	orr.w	r1, r1, #1
    7866:	f01b fee3 	bl	23630 <log_0>
		net_buf_unref(buf);
    786a:	4628      	mov	r0, r5
    786c:	f010 fdda 	bl	18424 <net_buf_unref>
			return -ENOTCONN;
    7870:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7874:	e020      	b.n	78b8 <bt_conn_send_cb+0x74>
	if (cb) {
    7876:	2a00      	cmp	r2, #0
    7878:	d040      	beq.n	78fc <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    787a:	f018 fc29 	bl	200d0 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    787e:	4b23      	ldr	r3, [pc, #140]	; (790c <bt_conn_send_cb+0xc8>)
    7880:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7882:	4823      	ldr	r0, [pc, #140]	; (7910 <bt_conn_send_cb+0xcc>)
    7884:	bf07      	ittee	eq
    7886:	2200      	moveq	r2, #0
    7888:	2300      	moveq	r3, #0
    788a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    788e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    7892:	f018 f851 	bl	1f938 <z_impl_k_queue_get>
    7896:	4604      	mov	r4, r0
		if (!tx) {
    7898:	b980      	cbnz	r0, 78bc <bt_conn_send_cb+0x78>
    789a:	4b19      	ldr	r3, [pc, #100]	; (7900 <bt_conn_send_cb+0xbc>)
    789c:	4919      	ldr	r1, [pc, #100]	; (7904 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    789e:	481d      	ldr	r0, [pc, #116]	; (7914 <bt_conn_send_cb+0xd0>)
    78a0:	1ac9      	subs	r1, r1, r3
    78a2:	08c9      	lsrs	r1, r1, #3
    78a4:	0189      	lsls	r1, r1, #6
    78a6:	f041 0101 	orr.w	r1, r1, #1
    78aa:	f01b fec1 	bl	23630 <log_0>
			net_buf_unref(buf);
    78ae:	4628      	mov	r0, r5
    78b0:	f010 fdb8 	bl	18424 <net_buf_unref>
			return -ENOBUFS;
    78b4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    78b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    78bc:	7ab3      	ldrb	r3, [r6, #10]
    78be:	2b07      	cmp	r3, #7
    78c0:	d010      	beq.n	78e4 <bt_conn_send_cb+0xa0>
    78c2:	4b0f      	ldr	r3, [pc, #60]	; (7900 <bt_conn_send_cb+0xbc>)
    78c4:	490f      	ldr	r1, [pc, #60]	; (7904 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    78c6:	4814      	ldr	r0, [pc, #80]	; (7918 <bt_conn_send_cb+0xd4>)
    78c8:	1ac9      	subs	r1, r1, r3
    78ca:	08c9      	lsrs	r1, r1, #3
    78cc:	0189      	lsls	r1, r1, #6
    78ce:	f041 0102 	orr.w	r1, r1, #2
    78d2:	f01b fead 	bl	23630 <log_0>
			net_buf_unref(buf);
    78d6:	4628      	mov	r0, r5
    78d8:	f010 fda4 	bl	18424 <net_buf_unref>
			tx_free(tx);
    78dc:	4620      	mov	r0, r4
    78de:	f7ff fde5 	bl	74ac <tx_free>
    78e2:	e7c5      	b.n	7870 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    78e4:	2300      	movs	r3, #0
		tx->user_data = user_data;
    78e6:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    78ea:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    78ec:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    78ee:	f106 0034 	add.w	r0, r6, #52	; 0x34
    78f2:	4629      	mov	r1, r5
    78f4:	f01e faa1 	bl	25e3a <net_buf_put>
	return 0;
    78f8:	2000      	movs	r0, #0
    78fa:	e7dd      	b.n	78b8 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    78fc:	614a      	str	r2, [r1, #20]
    78fe:	e7f6      	b.n	78ee <bt_conn_send_cb+0xaa>
    7900:	0002bfa8 	.word	0x0002bfa8
    7904:	0002bfc0 	.word	0x0002bfc0
    7908:	0002f140 	.word	0x0002f140
    790c:	20001470 	.word	0x20001470
    7910:	20000c30 	.word	0x20000c30
    7914:	0002f14f 	.word	0x0002f14f
    7918:	0002f16d 	.word	0x0002f16d

0000791c <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    791c:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    791e:	4b1b      	ldr	r3, [pc, #108]	; (798c <bt_conn_prepare_events+0x70>)
    7920:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7922:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    7924:	609a      	str	r2, [r3, #8]
{
    7926:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7928:	f023 fefd 	bl	2b726 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    792c:	f3bf 8f5b 	dmb	ish
    7930:	4b17      	ldr	r3, [pc, #92]	; (7990 <bt_conn_prepare_events+0x74>)
    7932:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    7936:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    793a:	f104 0014 	add.w	r0, r4, #20
    793e:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    7940:	b90a      	cbnz	r2, 7946 <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    7942:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    7944:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7946:	7a9a      	ldrb	r2, [r3, #10]
    7948:	b99a      	cbnz	r2, 7972 <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    794a:	f3bf 8f5b 	dmb	ish
    794e:	1d1a      	adds	r2, r3, #4
    7950:	e852 5f00 	ldrex	r5, [r2]
    7954:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    7958:	e842 ce00 	strex	lr, ip, [r2]
    795c:	f1be 0f00 	cmp.w	lr, #0
    7960:	d1f6      	bne.n	7950 <bt_conn_prepare_events+0x34>
    7962:	f3bf 8f5b 	dmb	ish
    7966:	066a      	lsls	r2, r5, #25
    7968:	d503      	bpl.n	7972 <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    796a:	4618      	mov	r0, r3
    796c:	f7ff febe 	bl	76ec <conn_cleanup>
    7970:	e7e7      	b.n	7942 <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    7972:	7a8b      	ldrb	r3, [r1, #10]
    7974:	2b07      	cmp	r3, #7
    7976:	d1e4      	bne.n	7942 <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    7978:	4b06      	ldr	r3, [pc, #24]	; (7994 <bt_conn_prepare_events+0x78>)
    797a:	2200      	movs	r2, #0
    797c:	2104      	movs	r1, #4
    797e:	f023 fed2 	bl	2b726 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    7982:	2301      	movs	r3, #1
    7984:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    7988:	2002      	movs	r0, #2
	return ev_count;
    798a:	e7db      	b.n	7944 <bt_conn_prepare_events+0x28>
    798c:	200003b0 	.word	0x200003b0
    7990:	20000f40 	.word	0x20000f40
    7994:	20000f74 	.word	0x20000f74

00007998 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    7998:	b570      	push	{r4, r5, r6, lr}
    799a:	4606      	mov	r6, r0
    799c:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    799e:	4811      	ldr	r0, [pc, #68]	; (79e4 <bt_conn_add_le+0x4c>)
    79a0:	2101      	movs	r1, #1
    79a2:	f01d f8c4 	bl	24b2e <bt_conn_new>
	if (!conn) {
    79a6:	4604      	mov	r4, r0
    79a8:	b1d0      	cbz	r0, 79e0 <bt_conn_add_le+0x48>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    79aa:	2230      	movs	r2, #48	; 0x30
    79ac:	2100      	movs	r1, #0
    79ae:	3058      	adds	r0, #88	; 0x58
    79b0:	f023 ff20 	bl	2b7f4 <memset>
    79b4:	4b0c      	ldr	r3, [pc, #48]	; (79e8 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    79b6:	4a0d      	ldr	r2, [pc, #52]	; (79ec <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    79b8:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    79ba:	2300      	movs	r3, #0
    79bc:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    79c0:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    79c2:	7226      	strb	r6, [r4, #8]
    79c4:	682b      	ldr	r3, [r5, #0]
    79c6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    79ca:	88ab      	ldrh	r3, [r5, #4]
    79cc:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    79d0:	79ab      	ldrb	r3, [r5, #6]
    79d2:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    79d6:	2301      	movs	r3, #1
    79d8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    79da:	4b05      	ldr	r3, [pc, #20]	; (79f0 <bt_conn_add_le+0x58>)
    79dc:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    79e0:	4620      	mov	r0, r4
    79e2:	bd70      	pop	{r4, r5, r6, pc}
    79e4:	20000f40 	.word	0x20000f40
    79e8:	00007d45 	.word	0x00007d45
    79ec:	00024b29 	.word	0x00024b29
    79f0:	00280018 	.word	0x00280018

000079f4 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    79f4:	4602      	mov	r2, r0
    79f6:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    79f8:	2101      	movs	r1, #1
    79fa:	4803      	ldr	r0, [pc, #12]	; (7a08 <bt_conn_lookup_handle+0x14>)
    79fc:	f01d f91b 	bl	24c36 <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    7a00:	2800      	cmp	r0, #0
    7a02:	bf38      	it	cc
    7a04:	2000      	movcc	r0, #0
    7a06:	bd08      	pop	{r3, pc}
    7a08:	20000f40 	.word	0x20000f40

00007a0c <bt_conn_set_state>:
{
    7a0c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    7a0e:	7a86      	ldrb	r6, [r0, #10]
    7a10:	428e      	cmp	r6, r1
{
    7a12:	4604      	mov	r4, r0
    7a14:	460d      	mov	r5, r1
	if (conn->state == state) {
    7a16:	d112      	bne.n	7a3e <bt_conn_set_state+0x32>
    7a18:	4b68      	ldr	r3, [pc, #416]	; (7bbc <bt_conn_set_state+0x1b0>)
    7a1a:	4a69      	ldr	r2, [pc, #420]	; (7bc0 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    7a1c:	4869      	ldr	r0, [pc, #420]	; (7bc4 <bt_conn_set_state+0x1b8>)
    7a1e:	2e08      	cmp	r6, #8
    7a20:	eba2 0203 	sub.w	r2, r2, r3
    7a24:	bf96      	itet	ls
    7a26:	4b68      	ldrls	r3, [pc, #416]	; (7bc8 <bt_conn_set_state+0x1bc>)
    7a28:	4968      	ldrhi	r1, [pc, #416]	; (7bcc <bt_conn_set_state+0x1c0>)
    7a2a:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    7a2e:	08d2      	lsrs	r2, r2, #3
    7a30:	0192      	lsls	r2, r2, #6
    7a32:	f042 0202 	orr.w	r2, r2, #2
}
    7a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    7a3a:	f01b be06 	b.w	2364a <log_1>
	conn->state = state;
    7a3e:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    7a40:	b90e      	cbnz	r6, 7a46 <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    7a42:	f01d f8c6 	bl	24bd2 <bt_conn_ref>
	switch (conn->state) {
    7a46:	7aa3      	ldrb	r3, [r4, #10]
    7a48:	2b08      	cmp	r3, #8
    7a4a:	f200 80ac 	bhi.w	7ba6 <bt_conn_set_state+0x19a>
    7a4e:	e8df f003 	tbb	[pc, r3]
    7a52:	053e      	.short	0x053e
    7a54:	b4b4b4b4 	.word	0xb4b4b4b4
    7a58:	1cb4      	.short	0x1cb4
    7a5a:	b4          	.byte	0xb4
    7a5b:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    7a5c:	4d5c      	ldr	r5, [pc, #368]	; (7bd0 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    7a5e:	2600      	movs	r6, #0
	__asm__ volatile(
    7a60:	f04f 0320 	mov.w	r3, #32
    7a64:	f3ef 8211 	mrs	r2, BASEPRI
    7a68:	f383 8811 	msr	BASEPRI, r3
    7a6c:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7a70:	69e3      	ldr	r3, [r4, #28]
    7a72:	2b00      	cmp	r3, #0
    7a74:	d078      	beq.n	7b68 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    7a76:	3b01      	subs	r3, #1
    7a78:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7a7a:	f382 8811 	msr	BASEPRI, r2
    7a7e:	f3bf 8f6f 	isb	sy
    7a82:	4628      	mov	r0, r5
    7a84:	f018 fb2a 	bl	200dc <z_impl_k_sem_give>
}
    7a88:	e7ea      	b.n	7a60 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7a8a:	78a3      	ldrb	r3, [r4, #2]
    7a8c:	2b04      	cmp	r3, #4
    7a8e:	f000 8094 	beq.w	7bba <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    7a92:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7a96:	f023 fa73 	bl	2af80 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    7a9a:	2100      	movs	r1, #0
    7a9c:	484d      	ldr	r0, [pc, #308]	; (7bd4 <bt_conn_set_state+0x1c8>)
    7a9e:	f018 ff17 	bl	208d0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7aa2:	2300      	movs	r3, #0
	list->tail = NULL;
    7aa4:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    7aa8:	4620      	mov	r0, r4
    7aaa:	f000 faf5 	bl	8098 <bt_l2cap_connected>
		notify_connected(conn);
    7aae:	4620      	mov	r0, r4
    7ab0:	f7ff fd06 	bl	74c0 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7ab4:	78e3      	ldrb	r3, [r4, #3]
    7ab6:	2b01      	cmp	r3, #1
    7ab8:	d17f      	bne.n	7bba <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7aba:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7abe:	4846      	ldr	r0, [pc, #280]	; (7bd8 <bt_conn_set_state+0x1cc>)
}
    7ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ac4:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    7ac8:	2300      	movs	r3, #0
    7aca:	f018 bc63 	b.w	20394 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7ace:	78a3      	ldrb	r3, [r4, #2]
    7ad0:	2b04      	cmp	r3, #4
    7ad2:	d104      	bne.n	7ade <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    7ad4:	4620      	mov	r0, r4
}
    7ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    7ada:	f01d b895 	b.w	24c08 <bt_conn_unref>
		switch (old_state) {
    7ade:	2e08      	cmp	r6, #8
    7ae0:	d86b      	bhi.n	7bba <bt_conn_set_state+0x1ae>
    7ae2:	a301      	add	r3, pc, #4	; (adr r3, 7ae8 <bt_conn_set_state+0xdc>)
    7ae4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    7ae8:	00007b55 	.word	0x00007b55
    7aec:	00007b0d 	.word	0x00007b0d
    7af0:	00007b47 	.word	0x00007b47
    7af4:	00007ad5 	.word	0x00007ad5
    7af8:	00007ad5 	.word	0x00007ad5
    7afc:	00007b47 	.word	0x00007b47
    7b00:	00007b47 	.word	0x00007b47
    7b04:	00007b55 	.word	0x00007b55
    7b08:	00007b55 	.word	0x00007b55
			tx_notify(conn);
    7b0c:	4620      	mov	r0, r4
    7b0e:	f01c ffe8 	bl	24ae2 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    7b12:	78a3      	ldrb	r3, [r4, #2]
    7b14:	2b01      	cmp	r3, #1
    7b16:	d103      	bne.n	7b20 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    7b18:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7b1c:	f023 fc0a 	bl	2b334 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7b20:	f3bf 8f5b 	dmb	ish
    7b24:	3404      	adds	r4, #4
    7b26:	e854 3f00 	ldrex	r3, [r4]
    7b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7b2e:	e844 3200 	strex	r2, r3, [r4]
    7b32:	2a00      	cmp	r2, #0
    7b34:	d1f7      	bne.n	7b26 <bt_conn_set_state+0x11a>
    7b36:	f3bf 8f5b 	dmb	ish
    7b3a:	4826      	ldr	r0, [pc, #152]	; (7bd4 <bt_conn_set_state+0x1c8>)
}
    7b3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7b40:	2100      	movs	r1, #0
    7b42:	f018 bec5 	b.w	208d0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    7b46:	7a63      	ldrb	r3, [r4, #9]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d0c3      	beq.n	7ad4 <bt_conn_set_state+0xc8>
				notify_connected(conn);
    7b4c:	4620      	mov	r0, r4
    7b4e:	f7ff fcb7 	bl	74c0 <notify_connected>
    7b52:	e7bf      	b.n	7ad4 <bt_conn_set_state+0xc8>
    7b54:	4a1a      	ldr	r2, [pc, #104]	; (7bc0 <bt_conn_set_state+0x1b4>)
    7b56:	4b19      	ldr	r3, [pc, #100]	; (7bbc <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    7b58:	4820      	ldr	r0, [pc, #128]	; (7bdc <bt_conn_set_state+0x1d0>)
    7b5a:	1ad2      	subs	r2, r2, r3
    7b5c:	08d2      	lsrs	r2, r2, #3
    7b5e:	0192      	lsls	r2, r2, #6
    7b60:	f042 0202 	orr.w	r2, r2, #2
    7b64:	4629      	mov	r1, r5
    7b66:	e766      	b.n	7a36 <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    7b68:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7b6a:	b128      	cbz	r0, 7b78 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b6c:	69a1      	ldr	r1, [r4, #24]
    7b6e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    7b70:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b72:	4288      	cmp	r0, r1
	list->tail = node;
    7b74:	bf08      	it	eq
    7b76:	61a3      	streq	r3, [r4, #24]
    7b78:	f382 8811 	msr	BASEPRI, r2
    7b7c:	f3bf 8f6f 	isb	sy
		if (!node) {
    7b80:	b1d8      	cbz	r0, 7bba <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    7b82:	f04f 0220 	mov.w	r2, #32
    7b86:	f3ef 8311 	mrs	r3, BASEPRI
    7b8a:	f382 8811 	msr	BASEPRI, r2
    7b8e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    7b92:	68c2      	ldr	r2, [r0, #12]
    7b94:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    7b96:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7b98:	f383 8811 	msr	BASEPRI, r3
    7b9c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    7ba0:	f7ff fc84 	bl	74ac <tx_free>
    7ba4:	e76d      	b.n	7a82 <bt_conn_set_state+0x76>
    7ba6:	4a06      	ldr	r2, [pc, #24]	; (7bc0 <bt_conn_set_state+0x1b4>)
    7ba8:	4b04      	ldr	r3, [pc, #16]	; (7bbc <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    7baa:	480d      	ldr	r0, [pc, #52]	; (7be0 <bt_conn_set_state+0x1d4>)
    7bac:	1ad2      	subs	r2, r2, r3
    7bae:	08d2      	lsrs	r2, r2, #3
    7bb0:	0192      	lsls	r2, r2, #6
    7bb2:	f042 0202 	orr.w	r2, r2, #2
    7bb6:	4629      	mov	r1, r5
    7bb8:	e73d      	b.n	7a36 <bt_conn_set_state+0x2a>
}
    7bba:	bd70      	pop	{r4, r5, r6, pc}
    7bbc:	0002bfa8 	.word	0x0002bfa8
    7bc0:	0002bfc0 	.word	0x0002bfc0
    7bc4:	0002f19d 	.word	0x0002f19d
    7bc8:	0002c33c 	.word	0x0002c33c
    7bcc:	0002f193 	.word	0x0002f193
    7bd0:	200000c8 	.word	0x200000c8
    7bd4:	200003b0 	.word	0x200003b0
    7bd8:	20001458 	.word	0x20001458
    7bdc:	0002f1ae 	.word	0x0002f1ae
    7be0:	0002f1c5 	.word	0x0002f1c5

00007be4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    7be4:	b570      	push	{r4, r5, r6, lr}
    7be6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7be8:	480c      	ldr	r0, [pc, #48]	; (7c1c <bt_conn_lookup_addr_le+0x38>)
{
    7bea:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7bec:	f01c fff1 	bl	24bd2 <bt_conn_ref>

		if (!conn) {
    7bf0:	4604      	mov	r4, r0
    7bf2:	b128      	cbz	r0, 7c00 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    7bf4:	7883      	ldrb	r3, [r0, #2]
    7bf6:	2b01      	cmp	r3, #1
    7bf8:	d004      	beq.n	7c04 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    7bfa:	f01d f805 	bl	24c08 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    7bfe:	2400      	movs	r4, #0
}
    7c00:	4620      	mov	r0, r4
    7c02:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    7c04:	4629      	mov	r1, r5
    7c06:	4632      	mov	r2, r6
    7c08:	f01c ffc3 	bl	24b92 <bt_conn_is_peer_addr_le>
    7c0c:	4605      	mov	r5, r0
    7c0e:	2800      	cmp	r0, #0
    7c10:	d1f6      	bne.n	7c00 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    7c12:	4620      	mov	r0, r4
    7c14:	f01c fff8 	bl	24c08 <bt_conn_unref>
	return NULL;
    7c18:	462c      	mov	r4, r5
			continue;
    7c1a:	e7f1      	b.n	7c00 <bt_conn_lookup_addr_le+0x1c>
    7c1c:	20000f40 	.word	0x20000f40

00007c20 <bt_conn_exists_le>:
{
    7c20:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    7c22:	f7ff ffdf 	bl	7be4 <bt_conn_lookup_addr_le>
	if (conn) {
    7c26:	4604      	mov	r4, r0
    7c28:	b1a0      	cbz	r0, 7c54 <bt_conn_exists_le+0x34>
    7c2a:	4b0b      	ldr	r3, [pc, #44]	; (7c58 <bt_conn_exists_le+0x38>)
    7c2c:	4a0b      	ldr	r2, [pc, #44]	; (7c5c <bt_conn_exists_le+0x3c>)
    7c2e:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    7c30:	7a83      	ldrb	r3, [r0, #10]
    7c32:	480b      	ldr	r0, [pc, #44]	; (7c60 <bt_conn_exists_le+0x40>)
    7c34:	2b08      	cmp	r3, #8
    7c36:	bf96      	itet	ls
    7c38:	490a      	ldrls	r1, [pc, #40]	; (7c64 <bt_conn_exists_le+0x44>)
    7c3a:	490b      	ldrhi	r1, [pc, #44]	; (7c68 <bt_conn_exists_le+0x48>)
    7c3c:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    7c40:	08d2      	lsrs	r2, r2, #3
    7c42:	0192      	lsls	r2, r2, #6
    7c44:	f042 0202 	orr.w	r2, r2, #2
    7c48:	f01b fcff 	bl	2364a <log_1>
		bt_conn_unref(conn);
    7c4c:	4620      	mov	r0, r4
    7c4e:	f01c ffdb 	bl	24c08 <bt_conn_unref>
		return true;
    7c52:	2001      	movs	r0, #1
}
    7c54:	bd10      	pop	{r4, pc}
    7c56:	bf00      	nop
    7c58:	0002bfa8 	.word	0x0002bfa8
    7c5c:	0002bfc0 	.word	0x0002bfc0
    7c60:	0002f1e1 	.word	0x0002f1e1
    7c64:	0002c33c 	.word	0x0002c33c
    7c68:	0002f193 	.word	0x0002f193

00007c6c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    7c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c6e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c70:	480f      	ldr	r0, [pc, #60]	; (7cb0 <bt_conn_lookup_state_le+0x44>)
{
    7c72:	460e      	mov	r6, r1
    7c74:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c76:	f01c ffac 	bl	24bd2 <bt_conn_ref>

		if (!conn) {
    7c7a:	4604      	mov	r4, r0
    7c7c:	b1b0      	cbz	r0, 7cac <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    7c7e:	7883      	ldrb	r3, [r0, #2]
    7c80:	2b01      	cmp	r3, #1
    7c82:	d003      	beq.n	7c8c <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    7c84:	f01c ffa5 	bl	24bd2 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    7c88:	2400      	movs	r4, #0
			continue;
    7c8a:	e00f      	b.n	7cac <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    7c8c:	b146      	cbz	r6, 7ca0 <bt_conn_lookup_state_le+0x34>
    7c8e:	4632      	mov	r2, r6
    7c90:	4629      	mov	r1, r5
    7c92:	f01c ff7e 	bl	24b92 <bt_conn_is_peer_addr_le>
    7c96:	b918      	cbnz	r0, 7ca0 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    7c98:	4620      	mov	r0, r4
    7c9a:	f01c ffb5 	bl	24c08 <bt_conn_unref>
    7c9e:	e7f3      	b.n	7c88 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    7ca0:	7aa3      	ldrb	r3, [r4, #10]
    7ca2:	42bb      	cmp	r3, r7
    7ca4:	d1f8      	bne.n	7c98 <bt_conn_lookup_state_le+0x2c>
    7ca6:	7a23      	ldrb	r3, [r4, #8]
    7ca8:	42ab      	cmp	r3, r5
    7caa:	d1f5      	bne.n	7c98 <bt_conn_lookup_state_le+0x2c>
}
    7cac:	4620      	mov	r0, r4
    7cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cb0:	20000f40 	.word	0x20000f40

00007cb4 <bt_conn_foreach>:

void bt_conn_foreach(int type, void (*func)(struct bt_conn *conn, void *data),
		     void *data)
{
    7cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cb6:	4607      	mov	r7, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7cb8:	4809      	ldr	r0, [pc, #36]	; (7ce0 <bt_conn_foreach+0x2c>)
{
    7cba:	460d      	mov	r5, r1
    7cbc:	4616      	mov	r6, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7cbe:	f01c ff88 	bl	24bd2 <bt_conn_ref>

		if (!conn) {
    7cc2:	4604      	mov	r4, r0
    7cc4:	b150      	cbz	r0, 7cdc <bt_conn_foreach+0x28>
			continue;
		}

		if (!(conn->type & type)) {
    7cc6:	7883      	ldrb	r3, [r0, #2]
    7cc8:	423b      	tst	r3, r7
    7cca:	d103      	bne.n	7cd4 <bt_conn_foreach+0x20>
			func(conn, data);
			bt_conn_unref(conn);
		}
	}
#endif /* defined(CONFIG_BT_ISO) */
}
    7ccc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    7cd0:	f01c bf9a 	b.w	24c08 <bt_conn_unref>
		func(conn, data);
    7cd4:	4631      	mov	r1, r6
    7cd6:	47a8      	blx	r5
		bt_conn_unref(conn);
    7cd8:	4620      	mov	r0, r4
    7cda:	e7f7      	b.n	7ccc <bt_conn_foreach+0x18>
}
    7cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7cde:	bf00      	nop
    7ce0:	20000f40 	.word	0x20000f40

00007ce4 <send_conn_le_param_update>:
{
    7ce4:	b538      	push	{r3, r4, r5, lr}
    7ce6:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    7ce8:	4608      	mov	r0, r1
{
    7cea:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7cec:	f01c fe23 	bl	24936 <bt_le_conn_params_valid>
    7cf0:	b318      	cbz	r0, 7d3a <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7cf2:	4b13      	ldr	r3, [pc, #76]	; (7d40 <send_conn_le_param_update+0x5c>)
    7cf4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    7cf8:	0799      	lsls	r1, r3, #30
    7cfa:	d407      	bmi.n	7d0c <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    7cfc:	78e3      	ldrb	r3, [r4, #3]
    7cfe:	b183      	cbz	r3, 7d22 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    7d00:	4629      	mov	r1, r5
    7d02:	4620      	mov	r0, r4
}
    7d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    7d08:	f000 bace 	b.w	82a8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7d0c:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    7d10:	079a      	lsls	r2, r3, #30
    7d12:	d5f3      	bpl.n	7cfc <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7d14:	f3bf 8f5b 	dmb	ish
    7d18:	6863      	ldr	r3, [r4, #4]
    7d1a:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    7d1e:	055b      	lsls	r3, r3, #21
    7d20:	d4ec      	bmi.n	7cfc <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    7d22:	4629      	mov	r1, r5
    7d24:	4620      	mov	r0, r4
    7d26:	f01c ffa8 	bl	24c7a <bt_conn_le_conn_update>
		if (rc == 0) {
    7d2a:	b928      	cbnz	r0, 7d38 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    7d2c:	88ab      	ldrh	r3, [r5, #4]
    7d2e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    7d32:	88eb      	ldrh	r3, [r5, #6]
    7d34:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    7d38:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7d3a:	f06f 0015 	mvn.w	r0, #21
    7d3e:	e7fb      	b.n	7d38 <send_conn_le_param_update+0x54>
    7d40:	20000000 	.word	0x20000000

00007d44 <deferred_work>:
{
    7d44:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    7d46:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    7d4a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    7d4c:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    7d50:	b993      	cbnz	r3, 7d78 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    7d52:	4630      	mov	r0, r6
    7d54:	f01c fff2 	bl	24d3c <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    7d58:	4b1f      	ldr	r3, [pc, #124]	; (7dd8 <deferred_work+0x94>)
    7d5a:	681d      	ldr	r5, [r3, #0]
    7d5c:	b925      	cbnz	r5, 7d68 <deferred_work+0x24>
		bt_conn_unref(conn);
    7d5e:	4630      	mov	r0, r6
    7d60:	f01c ff52 	bl	24c08 <bt_conn_unref>
}
    7d64:	b002      	add	sp, #8
    7d66:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    7d68:	686b      	ldr	r3, [r5, #4]
    7d6a:	b11b      	cbz	r3, 7d74 <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    7d6c:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    7d70:	4630      	mov	r0, r6
    7d72:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7d74:	692d      	ldr	r5, [r5, #16]
    7d76:	e7f1      	b.n	7d5c <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    7d78:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    7d7c:	2b01      	cmp	r3, #1
    7d7e:	d1f1      	bne.n	7d64 <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7d80:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    7d84:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    7d88:	e855 3f00 	ldrex	r3, [r5]
    7d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    7d90:	e845 2100 	strex	r1, r2, [r5]
    7d94:	2900      	cmp	r1, #0
    7d96:	d1f7      	bne.n	7d88 <deferred_work+0x44>
    7d98:	f3bf 8f5b 	dmb	ish
    7d9c:	059b      	lsls	r3, r3, #22
    7d9e:	d514      	bpl.n	7dca <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    7da0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7da2:	9300      	str	r3, [sp, #0]
    7da4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7da6:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    7da8:	4669      	mov	r1, sp
    7daa:	4630      	mov	r0, r6
    7dac:	f7ff ff9a 	bl	7ce4 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7db0:	f3bf 8f5b 	dmb	ish
    7db4:	e855 3f00 	ldrex	r3, [r5]
    7db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7dbc:	e845 3200 	strex	r2, r3, [r5]
    7dc0:	2a00      	cmp	r2, #0
    7dc2:	d1f7      	bne.n	7db4 <deferred_work+0x70>
    7dc4:	f3bf 8f5b 	dmb	ish
    7dc8:	e7cc      	b.n	7d64 <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    7dca:	4a04      	ldr	r2, [pc, #16]	; (7ddc <deferred_work+0x98>)
    7dcc:	6810      	ldr	r0, [r2, #0]
    7dce:	6851      	ldr	r1, [r2, #4]
    7dd0:	466b      	mov	r3, sp
    7dd2:	c303      	stmia	r3!, {r0, r1}
    7dd4:	e7e8      	b.n	7da8 <deferred_work+0x64>
    7dd6:	bf00      	nop
    7dd8:	2000299c 	.word	0x2000299c
    7ddc:	0002c150 	.word	0x0002c150

00007de0 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    7de0:	b538      	push	{r3, r4, r5, lr}
    7de2:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    7de4:	490c      	ldr	r1, [pc, #48]	; (7e18 <bt_conn_create_pdu_timeout+0x38>)
    7de6:	2800      	cmp	r0, #0
    7de8:	bf08      	it	eq
    7dea:	4608      	moveq	r0, r1
    7dec:	f01d fffc 	bl	25de8 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    7df0:	4604      	mov	r4, r0
    7df2:	b958      	cbnz	r0, 7e0c <bt_conn_create_pdu_timeout+0x2c>
    7df4:	4909      	ldr	r1, [pc, #36]	; (7e1c <bt_conn_create_pdu_timeout+0x3c>)
    7df6:	4b0a      	ldr	r3, [pc, #40]	; (7e20 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    7df8:	480a      	ldr	r0, [pc, #40]	; (7e24 <bt_conn_create_pdu_timeout+0x44>)
    7dfa:	1ac9      	subs	r1, r1, r3
    7dfc:	08c9      	lsrs	r1, r1, #3
    7dfe:	0189      	lsls	r1, r1, #6
    7e00:	f041 0102 	orr.w	r1, r1, #2
    7e04:	f01b fc14 	bl	23630 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    7e08:	4620      	mov	r0, r4
    7e0a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    7e0c:	1d29      	adds	r1, r5, #4
    7e0e:	3008      	adds	r0, #8
    7e10:	f01e f80f 	bl	25e32 <net_buf_simple_reserve>
	return buf;
    7e14:	e7f8      	b.n	7e08 <bt_conn_create_pdu_timeout+0x28>
    7e16:	bf00      	nop
    7e18:	20000c60 	.word	0x20000c60
    7e1c:	0002bfc0 	.word	0x0002bfc0
    7e20:	0002bfa8 	.word	0x0002bfa8
    7e24:	0002f204 	.word	0x0002f204

00007e28 <bt_conn_create_frag_timeout>:
{
    7e28:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    7e2a:	4801      	ldr	r0, [pc, #4]	; (7e30 <bt_conn_create_frag_timeout+0x8>)
    7e2c:	f7ff bfd8 	b.w	7de0 <bt_conn_create_pdu_timeout>
    7e30:	20000cb0 	.word	0x20000cb0

00007e34 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    7e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e38:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    7e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7e42:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    7e44:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    7e46:	f7ff ffef 	bl	7e28 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    7e4a:	7833      	ldrb	r3, [r6, #0]
    7e4c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    7e4e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7e50:	f04f 0600 	mov.w	r6, #0
    7e54:	d005      	beq.n	7e62 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    7e56:	f010 fae5 	bl	18424 <net_buf_unref>
		return NULL;
    7e5a:	4635      	mov	r5, r6
}
    7e5c:	4628      	mov	r0, r5
    7e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    7e62:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    7e64:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    7e68:	4e0c      	ldr	r6, [pc, #48]	; (7e9c <create_frag.isra.0+0x68>)
    7e6a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7e6c:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    7e70:	f01e f85c 	bl	25f2c <net_buf_simple_tailroom>
    7e74:	4580      	cmp	r8, r0
    7e76:	d20c      	bcs.n	7e92 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    7e78:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7e7c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7e80:	4632      	mov	r2, r6
    7e82:	4638      	mov	r0, r7
    7e84:	f01e f812 	bl	25eac <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    7e88:	4631      	mov	r1, r6
    7e8a:	4620      	mov	r0, r4
    7e8c:	f01e f832 	bl	25ef4 <net_buf_simple_pull>
    7e90:	e7e4      	b.n	7e5c <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    7e92:	4638      	mov	r0, r7
    7e94:	f01e f84a 	bl	25f2c <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7e98:	b286      	uxth	r6, r0
    7e9a:	e7ef      	b.n	7e7c <create_frag.isra.0+0x48>
    7e9c:	20000000 	.word	0x20000000

00007ea0 <bt_conn_process_tx>:
{
    7ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7ea2:	7a83      	ldrb	r3, [r0, #10]
{
    7ea4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    7ea6:	b993      	cbnz	r3, 7ece <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7ea8:	f3bf 8f5b 	dmb	ish
    7eac:	1d03      	adds	r3, r0, #4
    7eae:	e853 2f00 	ldrex	r2, [r3]
    7eb2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7eb6:	e843 1400 	strex	r4, r1, [r3]
    7eba:	2c00      	cmp	r4, #0
    7ebc:	d1f7      	bne.n	7eae <bt_conn_process_tx+0xe>
    7ebe:	f3bf 8f5b 	dmb	ish
    7ec2:	0653      	lsls	r3, r2, #25
    7ec4:	d503      	bpl.n	7ece <bt_conn_process_tx+0x2e>
}
    7ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    7eca:	f7ff bc0f 	b.w	76ec <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7ece:	2200      	movs	r2, #0
    7ed0:	2300      	movs	r3, #0
    7ed2:	f105 0034 	add.w	r0, r5, #52	; 0x34
    7ed6:	f01d ff8c 	bl	25df2 <net_buf_get>
	BT_ASSERT(buf);
    7eda:	4604      	mov	r4, r0
    7edc:	b960      	cbnz	r0, 7ef8 <bt_conn_process_tx+0x58>
    7ede:	4a20      	ldr	r2, [pc, #128]	; (7f60 <bt_conn_process_tx+0xc0>)
    7ee0:	4920      	ldr	r1, [pc, #128]	; (7f64 <bt_conn_process_tx+0xc4>)
    7ee2:	4821      	ldr	r0, [pc, #132]	; (7f68 <bt_conn_process_tx+0xc8>)
    7ee4:	f240 535f 	movw	r3, #1375	; 0x55f
    7ee8:	f01a ff8d 	bl	22e06 <printk>
    7eec:	4040      	eors	r0, r0
    7eee:	f380 8811 	msr	BASEPRI, r0
    7ef2:	f04f 0003 	mov.w	r0, #3
    7ef6:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    7ef8:	4f1c      	ldr	r7, [pc, #112]	; (7f6c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    7efa:	89a1      	ldrh	r1, [r4, #12]
    7efc:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    7f00:	4291      	cmp	r1, r2
    7f02:	d807      	bhi.n	7f14 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    7f04:	2300      	movs	r3, #0
    7f06:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    7f08:	4621      	mov	r1, r4
    7f0a:	4628      	mov	r0, r5
    7f0c:	f7ff faee 	bl	74ec <send_frag>
	if (!send_buf(conn, buf)) {
    7f10:	b140      	cbz	r0, 7f24 <bt_conn_process_tx+0x84>
}
    7f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    7f14:	f105 060a 	add.w	r6, r5, #10
    7f18:	4621      	mov	r1, r4
    7f1a:	4630      	mov	r0, r6
    7f1c:	f7ff ff8a 	bl	7e34 <create_frag.isra.0>
	if (!frag) {
    7f20:	4601      	mov	r1, r0
    7f22:	b920      	cbnz	r0, 7f2e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    7f24:	4620      	mov	r0, r4
}
    7f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    7f2a:	f010 ba7b 	b.w	18424 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    7f2e:	2301      	movs	r3, #1
    7f30:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    7f32:	4628      	mov	r0, r5
    7f34:	f7ff fada 	bl	74ec <send_frag>
    7f38:	2800      	cmp	r0, #0
    7f3a:	d0f3      	beq.n	7f24 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    7f3c:	89a2      	ldrh	r2, [r4, #12]
    7f3e:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    7f42:	429a      	cmp	r2, r3
    7f44:	d802      	bhi.n	7f4c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    7f46:	2300      	movs	r3, #0
    7f48:	2203      	movs	r2, #3
    7f4a:	e7dd      	b.n	7f08 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    7f4c:	4621      	mov	r1, r4
    7f4e:	4630      	mov	r0, r6
    7f50:	f7ff ff70 	bl	7e34 <create_frag.isra.0>
		if (!frag) {
    7f54:	4601      	mov	r1, r0
    7f56:	2800      	cmp	r0, #0
    7f58:	d0e4      	beq.n	7f24 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    7f5a:	2301      	movs	r3, #1
    7f5c:	461a      	mov	r2, r3
    7f5e:	e7e8      	b.n	7f32 <bt_conn_process_tx+0x92>
    7f60:	0002f22d 	.word	0x0002f22d
    7f64:	0002ea58 	.word	0x0002ea58
    7f68:	0002ec30 	.word	0x0002ec30
    7f6c:	20000000 	.word	0x20000000

00007f70 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    7f70:	4b03      	ldr	r3, [pc, #12]	; (7f80 <bt_conn_index+0x10>)
    7f72:	1ac0      	subs	r0, r0, r3
    7f74:	4b03      	ldr	r3, [pc, #12]	; (7f84 <bt_conn_index+0x14>)
    7f76:	1180      	asrs	r0, r0, #6
    7f78:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    7f7a:	b2c0      	uxtb	r0, r0
    7f7c:	4770      	bx	lr
    7f7e:	bf00      	nop
    7f80:	20000f40 	.word	0x20000f40
    7f84:	aaaaaaab 	.word	0xaaaaaaab

00007f88 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    7f88:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    7f8a:	490b      	ldr	r1, [pc, #44]	; (7fb8 <bt_conn_init+0x30>)
    7f8c:	480b      	ldr	r0, [pc, #44]	; (7fbc <bt_conn_init+0x34>)
    7f8e:	f023 f803 	bl	2af98 <k_queue_append>
    7f92:	490b      	ldr	r1, [pc, #44]	; (7fc0 <bt_conn_init+0x38>)
    7f94:	4809      	ldr	r0, [pc, #36]	; (7fbc <bt_conn_init+0x34>)
    7f96:	f022 ffff 	bl	2af98 <k_queue_append>
    7f9a:	490a      	ldr	r1, [pc, #40]	; (7fc4 <bt_conn_init+0x3c>)
    7f9c:	4807      	ldr	r0, [pc, #28]	; (7fbc <bt_conn_init+0x34>)
    7f9e:	f022 fffb 	bl	2af98 <k_queue_append>
	}

	bt_att_init();
    7fa2:	f01d fa3a 	bl	2541a <bt_att_init>

	err = bt_smp_init();
    7fa6:	f01d ff1c 	bl	25de2 <bt_smp_init>
	if (err) {
    7faa:	4604      	mov	r4, r0
    7fac:	b908      	cbnz	r0, 7fb2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    7fae:	f01c ff17 	bl	24de0 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    7fb2:	4620      	mov	r0, r4
    7fb4:	bd10      	pop	{r4, pc}
    7fb6:	bf00      	nop
    7fb8:	200029a0 	.word	0x200029a0
    7fbc:	20000c30 	.word	0x20000c30
    7fc0:	200029b0 	.word	0x200029b0
    7fc4:	200029c0 	.word	0x200029c0

00007fc8 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    7fc8:	4a0b      	ldr	r2, [pc, #44]	; (7ff8 <l2cap_accept+0x30>)
{
    7fca:	b508      	push	{r3, lr}
    7fcc:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    7fce:	6810      	ldr	r0, [r2, #0]
    7fd0:	b918      	cbnz	r0, 7fda <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    7fd2:	4b0a      	ldr	r3, [pc, #40]	; (7ffc <l2cap_accept+0x34>)
    7fd4:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    7fd6:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    7fd8:	bd08      	pop	{r3, pc}
    7fda:	4909      	ldr	r1, [pc, #36]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fdc:	4a09      	ldr	r2, [pc, #36]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    7fde:	480a      	ldr	r0, [pc, #40]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
    7fe0:	1a52      	subs	r2, r2, r1
    7fe2:	08d2      	lsrs	r2, r2, #3
    7fe4:	0192      	lsls	r2, r2, #6
    7fe6:	f042 0201 	orr.w	r2, r2, #1
    7fea:	4619      	mov	r1, r3
    7fec:	f01b fb2d 	bl	2364a <log_1>
	return -ENOMEM;
    7ff0:	f06f 000b 	mvn.w	r0, #11
    7ff4:	e7f0      	b.n	7fd8 <l2cap_accept+0x10>
    7ff6:	bf00      	nop
    7ff8:	20001000 	.word	0x20001000
    7ffc:	0002c380 	.word	0x0002c380
    8000:	0002bfa8 	.word	0x0002bfa8
    8004:	0002c070 	.word	0x0002c070
    8008:	0002f2ba 	.word	0x0002f2ba

0000800c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    800e:	4605      	mov	r5, r0
    8010:	460f      	mov	r7, r1
    8012:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    8014:	2300      	movs	r3, #0
    8016:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    801a:	2104      	movs	r1, #4
    801c:	2000      	movs	r0, #0
    801e:	f7ff fedf 	bl	7de0 <bt_conn_create_pdu_timeout>
	if (!buf) {
    8022:	4604      	mov	r4, r0
    8024:	b960      	cbnz	r0, 8040 <l2cap_create_le_sig_pdu.isra.0+0x34>
    8026:	4a0a      	ldr	r2, [pc, #40]	; (8050 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    8028:	4b0a      	ldr	r3, [pc, #40]	; (8054 <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    802a:	480b      	ldr	r0, [pc, #44]	; (8058 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    802c:	1ad2      	subs	r2, r2, r3
    802e:	08d2      	lsrs	r2, r2, #3
    8030:	0192      	lsls	r2, r2, #6
    8032:	f042 0201 	orr.w	r2, r2, #1
    8036:	4629      	mov	r1, r5
    8038:	f01b fb07 	bl	2364a <log_1>
}
    803c:	4620      	mov	r0, r4
    803e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    8040:	2104      	movs	r1, #4
    8042:	3008      	adds	r0, #8
    8044:	f01d ff2c 	bl	25ea0 <net_buf_simple_add>
	hdr->code = code;
    8048:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    804a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    804c:	8046      	strh	r6, [r0, #2]
	return buf;
    804e:	e7f5      	b.n	803c <l2cap_create_le_sig_pdu.isra.0+0x30>
    8050:	0002c070 	.word	0x0002c070
    8054:	0002bfa8 	.word	0x0002bfa8
    8058:	0002f2e1 	.word	0x0002f2e1

0000805c <l2cap_rtx_timeout>:
{
    805c:	b538      	push	{r3, r4, r5, lr}
    805e:	4a0b      	ldr	r2, [pc, #44]	; (808c <l2cap_rtx_timeout+0x30>)
    8060:	4b0b      	ldr	r3, [pc, #44]	; (8090 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    8062:	4604      	mov	r4, r0
    8064:	1ad2      	subs	r2, r2, r3
    8066:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    806a:	480a      	ldr	r0, [pc, #40]	; (8094 <l2cap_rtx_timeout+0x38>)
    806c:	08d2      	lsrs	r2, r2, #3
    806e:	0192      	lsls	r2, r2, #6
    8070:	4621      	mov	r1, r4
    8072:	f042 0201 	orr.w	r2, r2, #1
    8076:	f01b fae8 	bl	2364a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    807a:	4628      	mov	r0, r5
    807c:	4621      	mov	r1, r4
    807e:	f01c fe26 	bl	24cce <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    8082:	4620      	mov	r0, r4
}
    8084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    8088:	f01c be43 	b.w	24d12 <bt_l2cap_chan_del>
    808c:	0002c070 	.word	0x0002c070
    8090:	0002bfa8 	.word	0x0002bfa8
    8094:	0002f309 	.word	0x0002f309

00008098 <bt_l2cap_connected>:
{
    8098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    809c:	4e2a      	ldr	r6, [pc, #168]	; (8148 <bt_l2cap_connected+0xb0>)
    809e:	4f2b      	ldr	r7, [pc, #172]	; (814c <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    80a0:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8150 <bt_l2cap_connected+0xb8>
{
    80a4:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    80a6:	42be      	cmp	r6, r7
    80a8:	d302      	bcc.n	80b0 <bt_l2cap_connected+0x18>
}
    80aa:	b003      	add	sp, #12
    80ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    80b0:	6873      	ldr	r3, [r6, #4]
    80b2:	a901      	add	r1, sp, #4
    80b4:	4628      	mov	r0, r5
    80b6:	4798      	blx	r3
    80b8:	2800      	cmp	r0, #0
    80ba:	db40      	blt.n	813e <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    80bc:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    80be:	8833      	ldrh	r3, [r6, #0]
    80c0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    80c4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    80c8:	2230      	movs	r2, #48	; 0x30
    80ca:	2100      	movs	r1, #0
    80cc:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    80d0:	f8d6 9008 	ldr.w	r9, [r6, #8]
    80d4:	f023 fb8e 	bl	2b7f4 <memset>
    80d8:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    80dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
    80e0:	2200      	movs	r2, #0
    80e2:	f3bf 8f5b 	dmb	ish
    80e6:	e853 1f00 	ldrex	r1, [r3]
    80ea:	e843 2000 	strex	r0, r2, [r3]
    80ee:	2800      	cmp	r0, #0
    80f0:	d1f9      	bne.n	80e6 <bt_l2cap_connected+0x4e>
    80f2:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    80f6:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    80f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    80fa:	f104 0308 	add.w	r3, r4, #8
    80fe:	bb02      	cbnz	r2, 8142 <bt_l2cap_connected+0xaa>
	list->head = node;
    8100:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    8104:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8106:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    8108:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    810a:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    810e:	681b      	ldr	r3, [r3, #0]
    8110:	b103      	cbz	r3, 8114 <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    8112:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8114:	9b01      	ldr	r3, [sp, #4]
    8116:	f3bf 8f5b 	dmb	ish
    811a:	3340      	adds	r3, #64	; 0x40
    811c:	e853 2f00 	ldrex	r2, [r3]
    8120:	f042 0201 	orr.w	r2, r2, #1
    8124:	e843 2100 	strex	r1, r2, [r3]
    8128:	2900      	cmp	r1, #0
    812a:	d1f7      	bne.n	811c <bt_l2cap_connected+0x84>
    812c:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    8130:	9801      	ldr	r0, [sp, #4]
    8132:	6843      	ldr	r3, [r0, #4]
    8134:	699b      	ldr	r3, [r3, #24]
    8136:	b113      	cbz	r3, 813e <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    8138:	f100 0140 	add.w	r1, r0, #64	; 0x40
    813c:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    813e:	360c      	adds	r6, #12
    8140:	e7b1      	b.n	80a6 <bt_l2cap_connected+0xe>
	parent->next = child;
    8142:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8144:	652b      	str	r3, [r5, #80]	; 0x50
}
    8146:	e7dd      	b.n	8104 <bt_l2cap_connected+0x6c>
    8148:	0002bf10 	.word	0x0002bf10
    814c:	0002bf34 	.word	0x0002bf34
    8150:	0000805d 	.word	0x0000805d

00008154 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    8154:	898b      	ldrh	r3, [r1, #12]
    8156:	2b03      	cmp	r3, #3
{
    8158:	b573      	push	{r0, r1, r4, r5, r6, lr}
    815a:	4606      	mov	r6, r0
    815c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    815e:	d80a      	bhi.n	8176 <l2cap_recv+0x22>
    8160:	492e      	ldr	r1, [pc, #184]	; (821c <l2cap_recv+0xc8>)
    8162:	4b2f      	ldr	r3, [pc, #188]	; (8220 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    8164:	482f      	ldr	r0, [pc, #188]	; (8224 <l2cap_recv+0xd0>)
    8166:	1ac9      	subs	r1, r1, r3
    8168:	08c9      	lsrs	r1, r1, #3
    816a:	0189      	lsls	r1, r1, #6
    816c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    8170:	f01b fa5e 	bl	23630 <log_0>
		return 0;
    8174:	e013      	b.n	819e <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    8176:	2104      	movs	r1, #4
    8178:	f105 0008 	add.w	r0, r5, #8
    817c:	f01d fec2 	bl	25f04 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8180:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    8182:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    8184:	428a      	cmp	r2, r1
    8186:	4604      	mov	r4, r0
    8188:	d00c      	beq.n	81a4 <l2cap_recv+0x50>
    818a:	4825      	ldr	r0, [pc, #148]	; (8220 <l2cap_recv+0xcc>)
    818c:	4b23      	ldr	r3, [pc, #140]	; (821c <l2cap_recv+0xc8>)
    818e:	1a1b      	subs	r3, r3, r0
    8190:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    8192:	019b      	lsls	r3, r3, #6
    8194:	4824      	ldr	r0, [pc, #144]	; (8228 <l2cap_recv+0xd4>)
    8196:	f043 0301 	orr.w	r3, r3, #1
    819a:	f01b fa6a 	bl	23672 <log_2>
}
    819e:	2000      	movs	r0, #0
    81a0:	b002      	add	sp, #8
    81a2:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    81a4:	7843      	ldrb	r3, [r0, #1]
    81a6:	b943      	cbnz	r3, 81ba <l2cap_recv+0x66>
    81a8:	491c      	ldr	r1, [pc, #112]	; (821c <l2cap_recv+0xc8>)
    81aa:	4b1d      	ldr	r3, [pc, #116]	; (8220 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    81ac:	481f      	ldr	r0, [pc, #124]	; (822c <l2cap_recv+0xd8>)
    81ae:	1ac9      	subs	r1, r1, r3
    81b0:	08c9      	lsrs	r1, r1, #3
    81b2:	0189      	lsls	r1, r1, #6
    81b4:	f041 0101 	orr.w	r1, r1, #1
    81b8:	e7da      	b.n	8170 <l2cap_recv+0x1c>
	switch (hdr->code) {
    81ba:	7801      	ldrb	r1, [r0, #0]
    81bc:	2901      	cmp	r1, #1
    81be:	d0ee      	beq.n	819e <l2cap_recv+0x4a>
    81c0:	2913      	cmp	r1, #19
    81c2:	d10a      	bne.n	81da <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    81c4:	2a01      	cmp	r2, #1
    81c6:	d8ea      	bhi.n	819e <l2cap_recv+0x4a>
    81c8:	4914      	ldr	r1, [pc, #80]	; (821c <l2cap_recv+0xc8>)
    81ca:	4b15      	ldr	r3, [pc, #84]	; (8220 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    81cc:	4818      	ldr	r0, [pc, #96]	; (8230 <l2cap_recv+0xdc>)
    81ce:	1ac9      	subs	r1, r1, r3
    81d0:	08c9      	lsrs	r1, r1, #3
    81d2:	0189      	lsls	r1, r1, #6
    81d4:	f041 0101 	orr.w	r1, r1, #1
    81d8:	e7ca      	b.n	8170 <l2cap_recv+0x1c>
    81da:	4b11      	ldr	r3, [pc, #68]	; (8220 <l2cap_recv+0xcc>)
    81dc:	4a0f      	ldr	r2, [pc, #60]	; (821c <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    81de:	4815      	ldr	r0, [pc, #84]	; (8234 <l2cap_recv+0xe0>)
    81e0:	1ad2      	subs	r2, r2, r3
    81e2:	08d2      	lsrs	r2, r2, #3
    81e4:	0192      	lsls	r2, r2, #6
    81e6:	f042 0202 	orr.w	r2, r2, #2
    81ea:	f01b fa2e 	bl	2364a <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    81ee:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    81f0:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    81f2:	2202      	movs	r2, #2
    81f4:	2001      	movs	r0, #1
    81f6:	f7ff ff09 	bl	800c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    81fa:	4604      	mov	r4, r0
    81fc:	2800      	cmp	r0, #0
    81fe:	d0ce      	beq.n	819e <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    8200:	2102      	movs	r1, #2
    8202:	3008      	adds	r0, #8
    8204:	f01d fe4c 	bl	25ea0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    8208:	2300      	movs	r3, #0
    820a:	7003      	strb	r3, [r0, #0]
    820c:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    820e:	4622      	mov	r2, r4
    8210:	9300      	str	r3, [sp, #0]
    8212:	2105      	movs	r1, #5
    8214:	4628      	mov	r0, r5
    8216:	f01c fdaa 	bl	24d6e <bt_l2cap_send_cb>
}
    821a:	e7c0      	b.n	819e <l2cap_recv+0x4a>
    821c:	0002c070 	.word	0x0002c070
    8220:	0002bfa8 	.word	0x0002bfa8
    8224:	0002f319 	.word	0x0002f319
    8228:	0002f337 	.word	0x0002f337
    822c:	0002f358 	.word	0x0002f358
    8230:	0002f379 	.word	0x0002f379
    8234:	0002f395 	.word	0x0002f395

00008238 <bt_l2cap_recv>:
{
    8238:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    823a:	898b      	ldrh	r3, [r1, #12]
    823c:	2b03      	cmp	r3, #3
{
    823e:	4605      	mov	r5, r0
    8240:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    8242:	d80e      	bhi.n	8262 <bt_l2cap_recv+0x2a>
    8244:	4914      	ldr	r1, [pc, #80]	; (8298 <bt_l2cap_recv+0x60>)
    8246:	4b15      	ldr	r3, [pc, #84]	; (829c <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    8248:	4815      	ldr	r0, [pc, #84]	; (82a0 <bt_l2cap_recv+0x68>)
    824a:	1ac9      	subs	r1, r1, r3
    824c:	08c9      	lsrs	r1, r1, #3
    824e:	0189      	lsls	r1, r1, #6
    8250:	f041 0101 	orr.w	r1, r1, #1
    8254:	f01b f9ec 	bl	23630 <log_0>
	net_buf_unref(buf);
    8258:	4620      	mov	r0, r4
}
    825a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    825e:	f010 b8e1 	b.w	18424 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    8262:	2104      	movs	r1, #4
    8264:	f104 0008 	add.w	r0, r4, #8
    8268:	f01d fe4c 	bl	25f04 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    826c:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    826e:	4628      	mov	r0, r5
    8270:	f01c fda6 	bl	24dc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8274:	b950      	cbnz	r0, 828c <bt_l2cap_recv+0x54>
    8276:	4b09      	ldr	r3, [pc, #36]	; (829c <bt_l2cap_recv+0x64>)
    8278:	4a07      	ldr	r2, [pc, #28]	; (8298 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    827a:	480a      	ldr	r0, [pc, #40]	; (82a4 <bt_l2cap_recv+0x6c>)
    827c:	1ad2      	subs	r2, r2, r3
    827e:	08d2      	lsrs	r2, r2, #3
    8280:	0192      	lsls	r2, r2, #6
    8282:	f042 0202 	orr.w	r2, r2, #2
    8286:	f01b f9e0 	bl	2364a <log_1>
		net_buf_unref(buf);
    828a:	e7e5      	b.n	8258 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    828c:	6843      	ldr	r3, [r0, #4]
    828e:	4621      	mov	r1, r4
    8290:	691b      	ldr	r3, [r3, #16]
    8292:	4798      	blx	r3
    8294:	e7e0      	b.n	8258 <bt_l2cap_recv+0x20>
    8296:	bf00      	nop
    8298:	0002c070 	.word	0x0002c070
    829c:	0002bfa8 	.word	0x0002bfa8
    82a0:	0002f3b3 	.word	0x0002f3b3
    82a4:	0002f3d0 	.word	0x0002f3d0

000082a8 <bt_l2cap_update_conn_param>:
{
    82a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    82aa:	4b15      	ldr	r3, [pc, #84]	; (8300 <bt_l2cap_update_conn_param+0x58>)
    82ac:	781a      	ldrb	r2, [r3, #0]
    82ae:	3201      	adds	r2, #1
	if (!ident) {
    82b0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    82b4:	bf08      	it	eq
    82b6:	2201      	moveq	r2, #1
    82b8:	701a      	strb	r2, [r3, #0]
{
    82ba:	4605      	mov	r5, r0
    82bc:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    82be:	2208      	movs	r2, #8
    82c0:	7819      	ldrb	r1, [r3, #0]
    82c2:	2012      	movs	r0, #18
    82c4:	f7ff fea2 	bl	800c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    82c8:	4606      	mov	r6, r0
    82ca:	b1b0      	cbz	r0, 82fa <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    82cc:	2108      	movs	r1, #8
    82ce:	4408      	add	r0, r1
    82d0:	f01d fde6 	bl	25ea0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    82d4:	8822      	ldrh	r2, [r4, #0]
    82d6:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    82d8:	8862      	ldrh	r2, [r4, #2]
    82da:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    82dc:	88a2      	ldrh	r2, [r4, #4]
    82de:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    82e0:	88e2      	ldrh	r2, [r4, #6]
    82e2:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    82e4:	2400      	movs	r4, #0
    82e6:	9400      	str	r4, [sp, #0]
    82e8:	4623      	mov	r3, r4
    82ea:	4632      	mov	r2, r6
    82ec:	2105      	movs	r1, #5
    82ee:	4628      	mov	r0, r5
    82f0:	f01c fd3d 	bl	24d6e <bt_l2cap_send_cb>
	return 0;
    82f4:	4620      	mov	r0, r4
}
    82f6:	b002      	add	sp, #8
    82f8:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    82fa:	f06f 000b 	mvn.w	r0, #11
    82fe:	e7fa      	b.n	82f6 <bt_l2cap_update_conn_param+0x4e>
    8300:	20008604 	.word	0x20008604

00008304 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    8304:	4b02      	ldr	r3, [pc, #8]	; (8310 <att_cfm_sent+0xc>)
    8306:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    830a:	f01c bd97 	b.w	24e3c <att_sent>
    830e:	bf00      	nop
    8310:	00025067 	.word	0x00025067

00008314 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    8314:	4b02      	ldr	r3, [pc, #8]	; (8320 <att_rsp_sent+0xc>)
    8316:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    831a:	f01c bd8f 	b.w	24e3c <att_sent>
    831e:	bf00      	nop
    8320:	0002504b 	.word	0x0002504b

00008324 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    8324:	4b02      	ldr	r3, [pc, #8]	; (8330 <att_req_sent+0xc>)
    8326:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    832a:	f01c bd87 	b.w	24e3c <att_sent>
    832e:	bf00      	nop
    8330:	0000861d 	.word	0x0000861d

00008334 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    8334:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    8336:	3808      	subs	r0, #8
    8338:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    833a:	a901      	add	r1, sp, #4
    833c:	4802      	ldr	r0, [pc, #8]	; (8348 <bt_att_released+0x14>)
    833e:	f017 fa0f 	bl	1f760 <k_mem_slab_free>
}
    8342:	b003      	add	sp, #12
    8344:	f85d fb04 	ldr.w	pc, [sp], #4
    8348:	20000b74 	.word	0x20000b74

0000834c <find_type_cb>:
{
    834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    8350:	f8d2 9000 	ldr.w	r9, [r2]
{
    8354:	b091      	sub	sp, #68	; 0x44
    8356:	4607      	mov	r7, r0
    8358:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    835a:	2500      	movs	r5, #0
    835c:	f642 0301 	movw	r3, #10241	; 0x2801
    8360:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    8362:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8366:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    836a:	a90b      	add	r1, sp, #44	; 0x2c
{
    836c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    836e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8372:	f01c f9fb 	bl	2476c <bt_uuid_cmp>
    8376:	2800      	cmp	r0, #0
    8378:	d066      	beq.n	8448 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    837a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    837e:	6838      	ldr	r0, [r7, #0]
    8380:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8384:	a90b      	add	r1, sp, #44	; 0x2c
    8386:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    838a:	f01c f9ef 	bl	2476c <bt_uuid_cmp>
    838e:	b138      	cbz	r0, 83a0 <find_type_cb+0x54>
		if (data->group &&
    8390:	68a3      	ldr	r3, [r4, #8]
    8392:	b11b      	cbz	r3, 839c <find_type_cb+0x50>
    8394:	885a      	ldrh	r2, [r3, #2]
    8396:	42b2      	cmp	r2, r6
    8398:	d200      	bcs.n	839c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    839a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    839c:	2001      	movs	r0, #1
    839e:	e009      	b.n	83b4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    83a0:	6861      	ldr	r1, [r4, #4]
    83a2:	4608      	mov	r0, r1
    83a4:	f01c fd42 	bl	24e2c <net_buf_frags_len>
    83a8:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    83ac:	1a1b      	subs	r3, r3, r0
    83ae:	2b03      	cmp	r3, #3
    83b0:	d803      	bhi.n	83ba <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    83b2:	2000      	movs	r0, #0
}
    83b4:	b011      	add	sp, #68	; 0x44
    83b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    83ba:	4608      	mov	r0, r1
    83bc:	f01d fd4e 	bl	25e5c <net_buf_frag_last>
    83c0:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    83c2:	6860      	ldr	r0, [r4, #4]
    83c4:	f01c fd32 	bl	24e2c <net_buf_frags_len>
    83c8:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    83cc:	f105 0b08 	add.w	fp, r5, #8
    83d0:	ebaa 0a00 	sub.w	sl, sl, r0
    83d4:	4658      	mov	r0, fp
    83d6:	f01d fda9 	bl	25f2c <net_buf_simple_tailroom>
    83da:	4582      	cmp	sl, r0
    83dc:	d237      	bcs.n	844e <find_type_cb+0x102>
    83de:	6860      	ldr	r0, [r4, #4]
    83e0:	f01c fd24 	bl	24e2c <net_buf_frags_len>
    83e4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    83e8:	1a18      	subs	r0, r3, r0
	if (!len) {
    83ea:	b970      	cbnz	r0, 840a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    83ec:	6863      	ldr	r3, [r4, #4]
    83ee:	7998      	ldrb	r0, [r3, #6]
    83f0:	f00f ff5c 	bl	182ac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    83f4:	2200      	movs	r2, #0
    83f6:	2300      	movs	r3, #0
    83f8:	f01d fcf6 	bl	25de8 <net_buf_alloc_fixed>
		if (!frag) {
    83fc:	4605      	mov	r5, r0
    83fe:	2800      	cmp	r0, #0
    8400:	d0d7      	beq.n	83b2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    8402:	4601      	mov	r1, r0
    8404:	6860      	ldr	r0, [r4, #4]
    8406:	f01d fd3a 	bl	25e7e <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    840a:	2300      	movs	r3, #0
    840c:	9300      	str	r3, [sp, #0]
    840e:	f8d7 9004 	ldr.w	r9, [r7, #4]
    8412:	4639      	mov	r1, r7
    8414:	2310      	movs	r3, #16
    8416:	aa02      	add	r2, sp, #8
    8418:	4640      	mov	r0, r8
    841a:	47c8      	blx	r9
	if (read < 0) {
    841c:	1e07      	subs	r7, r0, #0
    841e:	db13      	blt.n	8448 <find_type_cb+0xfc>
	if (read != data->value_len) {
    8420:	7c22      	ldrb	r2, [r4, #16]
    8422:	68e0      	ldr	r0, [r4, #12]
    8424:	42ba      	cmp	r2, r7
    8426:	d037      	beq.n	8498 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    8428:	4601      	mov	r1, r0
    842a:	a80b      	add	r0, sp, #44	; 0x2c
    842c:	f01c f9c8 	bl	247c0 <bt_uuid_create>
    8430:	b988      	cbnz	r0, 8456 <find_type_cb+0x10a>
    8432:	4a1b      	ldr	r2, [pc, #108]	; (84a0 <find_type_cb+0x154>)
    8434:	4b1b      	ldr	r3, [pc, #108]	; (84a4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    8436:	7c21      	ldrb	r1, [r4, #16]
    8438:	481b      	ldr	r0, [pc, #108]	; (84a8 <find_type_cb+0x15c>)
    843a:	1ad2      	subs	r2, r2, r3
    843c:	08d2      	lsrs	r2, r2, #3
    843e:	0192      	lsls	r2, r2, #6
    8440:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    8444:	f01b f901 	bl	2364a <log_1>
	data->group = NULL;
    8448:	2300      	movs	r3, #0
    844a:	60a3      	str	r3, [r4, #8]
    844c:	e7a6      	b.n	839c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    844e:	4658      	mov	r0, fp
    8450:	f01d fd6c 	bl	25f2c <net_buf_simple_tailroom>
    8454:	e7c9      	b.n	83ea <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    8456:	b2fa      	uxtb	r2, r7
    8458:	a902      	add	r1, sp, #8
    845a:	a806      	add	r0, sp, #24
    845c:	f01c f9b0 	bl	247c0 <bt_uuid_create>
    8460:	b948      	cbnz	r0, 8476 <find_type_cb+0x12a>
    8462:	4a0f      	ldr	r2, [pc, #60]	; (84a0 <find_type_cb+0x154>)
    8464:	4b0f      	ldr	r3, [pc, #60]	; (84a4 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    8466:	4811      	ldr	r0, [pc, #68]	; (84ac <find_type_cb+0x160>)
    8468:	1ad2      	subs	r2, r2, r3
    846a:	08d2      	lsrs	r2, r2, #3
    846c:	0192      	lsls	r2, r2, #6
    846e:	f042 0202 	orr.w	r2, r2, #2
    8472:	4639      	mov	r1, r7
    8474:	e7e6      	b.n	8444 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    8476:	a906      	add	r1, sp, #24
    8478:	a80b      	add	r0, sp, #44	; 0x2c
    847a:	f01c f977 	bl	2476c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    847e:	2800      	cmp	r0, #0
    8480:	d1e2      	bne.n	8448 <find_type_cb+0xfc>
	data->err = 0x00;
    8482:	2300      	movs	r3, #0
    8484:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    8486:	2104      	movs	r1, #4
    8488:	f105 0008 	add.w	r0, r5, #8
    848c:	f01d fd08 	bl	25ea0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    8490:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8492:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8494:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    8496:	e781      	b.n	839c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8498:	a902      	add	r1, sp, #8
    849a:	f023 f97c 	bl	2b796 <memcmp>
    849e:	e7ee      	b.n	847e <find_type_cb+0x132>
    84a0:	0002bfb0 	.word	0x0002bfb0
    84a4:	0002bfa8 	.word	0x0002bfa8
    84a8:	0002f40c 	.word	0x0002f40c
    84ac:	0002f42b 	.word	0x0002f42b

000084b0 <chan_send>:
{
    84b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    84b4:	688b      	ldr	r3, [r1, #8]
    84b6:	781b      	ldrb	r3, [r3, #0]
    84b8:	2bd2      	cmp	r3, #210	; 0xd2
{
    84ba:	4605      	mov	r5, r0
    84bc:	460c      	mov	r4, r1
    84be:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    84c0:	d116      	bne.n	84f0 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    84c2:	6803      	ldr	r3, [r0, #0]
    84c4:	6818      	ldr	r0, [r3, #0]
    84c6:	f01d fc89 	bl	25ddc <bt_smp_sign>
		if (err) {
    84ca:	4606      	mov	r6, r0
    84cc:	b180      	cbz	r0, 84f0 <chan_send+0x40>
    84ce:	4928      	ldr	r1, [pc, #160]	; (8570 <chan_send+0xc0>)
    84d0:	4b28      	ldr	r3, [pc, #160]	; (8574 <chan_send+0xc4>)
			BT_ERR("Error signing data");
    84d2:	4829      	ldr	r0, [pc, #164]	; (8578 <chan_send+0xc8>)
    84d4:	1ac9      	subs	r1, r1, r3
    84d6:	08c9      	lsrs	r1, r1, #3
    84d8:	0189      	lsls	r1, r1, #6
    84da:	f041 0101 	orr.w	r1, r1, #1
    84de:	f01b f8a7 	bl	23630 <log_0>
		net_buf_unref(buf);
    84e2:	4620      	mov	r0, r4
    84e4:	f00f ff9e 	bl	18424 <net_buf_unref>
}
    84e8:	4630      	mov	r0, r6
    84ea:	b003      	add	sp, #12
    84ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    84f0:	f104 0008 	add.w	r0, r4, #8
    84f4:	f01d fd16 	bl	25f24 <net_buf_simple_headroom>
	state->len = buf->len;
    84f8:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    84fc:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    84fe:	f1b9 0f00 	cmp.w	r9, #0
    8502:	d10a      	bne.n	851a <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    8504:	68a3      	ldr	r3, [r4, #8]
    8506:	7818      	ldrb	r0, [r3, #0]
    8508:	f01c fcae 	bl	24e68 <att_op_get_type>
    850c:	1e43      	subs	r3, r0, #1
    850e:	b2db      	uxtb	r3, r3
    8510:	2b04      	cmp	r3, #4
    8512:	bf9c      	itt	ls
    8514:	4a19      	ldrls	r2, [pc, #100]	; (857c <chan_send+0xcc>)
    8516:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    851a:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    851c:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8520:	4620      	mov	r0, r4
    8522:	681e      	ldr	r6, [r3, #0]
    8524:	f01d fc96 	bl	25e54 <net_buf_ref>
    8528:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    852c:	4b14      	ldr	r3, [pc, #80]	; (8580 <chan_send+0xd0>)
    852e:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8530:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    8532:	d019      	beq.n	8568 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    8534:	4b13      	ldr	r3, [pc, #76]	; (8584 <chan_send+0xd4>)
    8536:	4299      	cmp	r1, r3
    8538:	d018      	beq.n	856c <chan_send+0xbc>
		return att_sent;
    853a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8598 <chan_send+0xe8>
    853e:	4b12      	ldr	r3, [pc, #72]	; (8588 <chan_send+0xd8>)
    8540:	4812      	ldr	r0, [pc, #72]	; (858c <chan_send+0xdc>)
    8542:	4561      	cmp	r1, ip
    8544:	bf18      	it	ne
    8546:	4603      	movne	r3, r0
				&chan->chan.chan);
    8548:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    854a:	4630      	mov	r0, r6
    854c:	9500      	str	r5, [sp, #0]
    854e:	2104      	movs	r1, #4
    8550:	f01c fc0d 	bl	24d6e <bt_l2cap_send_cb>
	if (!err) {
    8554:	4606      	mov	r6, r0
    8556:	2800      	cmp	r0, #0
    8558:	d0c3      	beq.n	84e2 <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    855a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    855c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8560:	fa10 f787 	uxtah	r7, r0, r7
    8564:	60a7      	str	r7, [r4, #8]
}
    8566:	e7bf      	b.n	84e8 <chan_send+0x38>
		return att_rsp_sent;
    8568:	4b09      	ldr	r3, [pc, #36]	; (8590 <chan_send+0xe0>)
    856a:	e7ed      	b.n	8548 <chan_send+0x98>
		return att_cfm_sent;
    856c:	4b09      	ldr	r3, [pc, #36]	; (8594 <chan_send+0xe4>)
    856e:	e7eb      	b.n	8548 <chan_send+0x98>
    8570:	0002bfb0 	.word	0x0002bfb0
    8574:	0002bfa8 	.word	0x0002bfa8
    8578:	0002f44a 	.word	0x0002f44a
    857c:	0002c3a0 	.word	0x0002c3a0
    8580:	0002504b 	.word	0x0002504b
    8584:	00025067 	.word	0x00025067
    8588:	00008325 	.word	0x00008325
    858c:	00024e3d 	.word	0x00024e3d
    8590:	00008315 	.word	0x00008315
    8594:	00008305 	.word	0x00008305
    8598:	0000861d 	.word	0x0000861d

0000859c <att_get>:
{
    859c:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    859e:	7a83      	ldrb	r3, [r0, #10]
    85a0:	2b07      	cmp	r3, #7
    85a2:	d00b      	beq.n	85bc <att_get+0x20>
    85a4:	4918      	ldr	r1, [pc, #96]	; (8608 <att_get+0x6c>)
    85a6:	4b19      	ldr	r3, [pc, #100]	; (860c <att_get+0x70>)
		BT_WARN("Not connected");
    85a8:	4819      	ldr	r0, [pc, #100]	; (8610 <att_get+0x74>)
    85aa:	1ac9      	subs	r1, r1, r3
    85ac:	08c9      	lsrs	r1, r1, #3
    85ae:	0189      	lsls	r1, r1, #6
    85b0:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    85b4:	f01b f83c 	bl	23630 <log_0>
		return NULL;
    85b8:	2400      	movs	r4, #0
    85ba:	e00e      	b.n	85da <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    85bc:	2104      	movs	r1, #4
    85be:	f01c fbff 	bl	24dc0 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    85c2:	4604      	mov	r4, r0
    85c4:	b958      	cbnz	r0, 85de <att_get+0x42>
    85c6:	4910      	ldr	r1, [pc, #64]	; (8608 <att_get+0x6c>)
    85c8:	4b10      	ldr	r3, [pc, #64]	; (860c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    85ca:	4812      	ldr	r0, [pc, #72]	; (8614 <att_get+0x78>)
    85cc:	1ac9      	subs	r1, r1, r3
    85ce:	08c9      	lsrs	r1, r1, #3
    85d0:	0189      	lsls	r1, r1, #6
    85d2:	f041 0101 	orr.w	r1, r1, #1
    85d6:	f01b f82b 	bl	23630 <log_0>
}
    85da:	4620      	mov	r0, r4
    85dc:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    85de:	f3bf 8f5b 	dmb	ish
    85e2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    85e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    85ea:	075b      	lsls	r3, r3, #29
    85ec:	d508      	bpl.n	8600 <att_get+0x64>
    85ee:	4906      	ldr	r1, [pc, #24]	; (8608 <att_get+0x6c>)
    85f0:	4b06      	ldr	r3, [pc, #24]	; (860c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    85f2:	4809      	ldr	r0, [pc, #36]	; (8618 <att_get+0x7c>)
    85f4:	1ac9      	subs	r1, r1, r3
    85f6:	08c9      	lsrs	r1, r1, #3
    85f8:	0189      	lsls	r1, r1, #6
    85fa:	f041 0102 	orr.w	r1, r1, #2
    85fe:	e7d9      	b.n	85b4 <att_get+0x18>
	return att_chan->att;
    8600:	f850 4c08 	ldr.w	r4, [r0, #-8]
    8604:	e7e9      	b.n	85da <att_get+0x3e>
    8606:	bf00      	nop
    8608:	0002bfb0 	.word	0x0002bfb0
    860c:	0002bfa8 	.word	0x0002bfa8
    8610:	0002f45d 	.word	0x0002f45d
    8614:	0002f46b 	.word	0x0002f46b
    8618:	0002f486 	.word	0x0002f486

0000861c <chan_req_sent>:
	if (chan->req) {
    861c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    8620:	b13b      	cbz	r3, 8632 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8622:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    8626:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    862a:	4802      	ldr	r0, [pc, #8]	; (8634 <chan_req_sent+0x18>)
    862c:	2300      	movs	r3, #0
    862e:	f017 beb1 	b.w	20394 <k_delayed_work_submit_to_queue>
}
    8632:	4770      	bx	lr
    8634:	20001458 	.word	0x20001458

00008638 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    863a:	2300      	movs	r3, #0
{
    863c:	4606      	mov	r6, r0
    863e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8640:	482c      	ldr	r0, [pc, #176]	; (86f4 <bt_att_accept+0xbc>)
    8642:	2200      	movs	r2, #0
    8644:	4669      	mov	r1, sp
    8646:	f017 f859 	bl	1f6fc <k_mem_slab_alloc>
    864a:	4604      	mov	r4, r0
    864c:	b178      	cbz	r0, 866e <bt_att_accept+0x36>
    864e:	4a2a      	ldr	r2, [pc, #168]	; (86f8 <bt_att_accept+0xc0>)
    8650:	4b2a      	ldr	r3, [pc, #168]	; (86fc <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    8652:	482b      	ldr	r0, [pc, #172]	; (8700 <bt_att_accept+0xc8>)
    8654:	1ad2      	subs	r2, r2, r3
    8656:	08d2      	lsrs	r2, r2, #3
    8658:	0192      	lsls	r2, r2, #6
    865a:	f042 0201 	orr.w	r2, r2, #1
    865e:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8660:	f01a fff3 	bl	2364a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8664:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8668:	4620      	mov	r0, r4
    866a:	b003      	add	sp, #12
    866c:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    866e:	4601      	mov	r1, r0
    8670:	2244      	movs	r2, #68	; 0x44
    8672:	9800      	ldr	r0, [sp, #0]
    8674:	f023 f8be 	bl	2b7f4 <memset>
	att->conn = conn;
    8678:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    867a:	4822      	ldr	r0, [pc, #136]	; (8704 <bt_att_accept+0xcc>)
	list->tail = NULL;
    867c:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    867e:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    8682:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    8686:	2200      	movs	r2, #0
    8688:	2300      	movs	r3, #0
    868a:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    868c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    868e:	f017 f835 	bl	1f6fc <k_mem_slab_alloc>
    8692:	4604      	mov	r4, r0
    8694:	b148      	cbz	r0, 86aa <bt_att_accept+0x72>
    8696:	4a18      	ldr	r2, [pc, #96]	; (86f8 <bt_att_accept+0xc0>)
    8698:	4b18      	ldr	r3, [pc, #96]	; (86fc <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    869a:	6829      	ldr	r1, [r5, #0]
    869c:	481a      	ldr	r0, [pc, #104]	; (8708 <bt_att_accept+0xd0>)
    869e:	1ad2      	subs	r2, r2, r3
    86a0:	08d2      	lsrs	r2, r2, #3
    86a2:	0192      	lsls	r2, r2, #6
    86a4:	f042 0201 	orr.w	r2, r2, #1
    86a8:	e7da      	b.n	8660 <bt_att_accept+0x28>
    86aa:	4601      	mov	r1, r0
    86ac:	f44f 7298 	mov.w	r2, #304	; 0x130
    86b0:	9801      	ldr	r0, [sp, #4]
    86b2:	f023 f89f 	bl	2b7f4 <memset>
	chan->chan.chan.ops = &ops;
    86b6:	9801      	ldr	r0, [sp, #4]
    86b8:	4b14      	ldr	r3, [pc, #80]	; (870c <bt_att_accept+0xd4>)
    86ba:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    86bc:	30c8      	adds	r0, #200	; 0xc8
    86be:	f022 fc5f 	bl	2af80 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    86c2:	9801      	ldr	r0, [sp, #4]
    86c4:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    86c8:	2203      	movs	r2, #3
    86ca:	4611      	mov	r1, r2
    86cc:	f022 fdb0 	bl	2b230 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    86d0:	9b01      	ldr	r3, [sp, #4]
    86d2:	f3bf 8f5b 	dmb	ish
    86d6:	33c0      	adds	r3, #192	; 0xc0
    86d8:	e853 2f00 	ldrex	r2, [r3]
    86dc:	e843 4100 	strex	r1, r4, [r3]
    86e0:	2900      	cmp	r1, #0
    86e2:	d1f9      	bne.n	86d8 <bt_att_accept+0xa0>
    86e4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    86e8:	9b01      	ldr	r3, [sp, #4]
    86ea:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    86ee:	603b      	str	r3, [r7, #0]
	return 0;
    86f0:	e7ba      	b.n	8668 <bt_att_accept+0x30>
    86f2:	bf00      	nop
    86f4:	20000b58 	.word	0x20000b58
    86f8:	0002bfb0 	.word	0x0002bfb0
    86fc:	0002bfa8 	.word	0x0002bfa8
    8700:	0002f4aa 	.word	0x0002f4aa
    8704:	20000b74 	.word	0x20000b74
    8708:	0002f4cf 	.word	0x0002f4cf
    870c:	200003c0 	.word	0x200003c0

00008710 <read_group_cb>:
{
    8710:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8714:	4606      	mov	r6, r0
    8716:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8718:	f04f 0800 	mov.w	r8, #0
    871c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8720:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8722:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8724:	f88d 8008 	strb.w	r8, [sp, #8]
    8728:	a902      	add	r1, sp, #8
{
    872a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    872c:	f8ad 300a 	strh.w	r3, [sp, #10]
    8730:	f01c f81c 	bl	2476c <bt_uuid_cmp>
    8734:	b1a0      	cbz	r0, 8760 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8736:	f642 0301 	movw	r3, #10241	; 0x2801
    873a:	6830      	ldr	r0, [r6, #0]
    873c:	f88d 800c 	strb.w	r8, [sp, #12]
    8740:	a903      	add	r1, sp, #12
    8742:	f8ad 300e 	strh.w	r3, [sp, #14]
    8746:	f01c f811 	bl	2476c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    874a:	b148      	cbz	r0, 8760 <read_group_cb+0x50>
		if (data->group &&
    874c:	6923      	ldr	r3, [r4, #16]
    874e:	b11b      	cbz	r3, 8758 <read_group_cb+0x48>
    8750:	885a      	ldrh	r2, [r3, #2]
    8752:	42aa      	cmp	r2, r5
    8754:	d200      	bcs.n	8758 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8756:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8758:	2001      	movs	r0, #1
}
    875a:	b004      	add	sp, #16
    875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8760:	6861      	ldr	r1, [r4, #4]
    8762:	6830      	ldr	r0, [r6, #0]
    8764:	f01c f802 	bl	2476c <bt_uuid_cmp>
    8768:	b110      	cbz	r0, 8770 <read_group_cb+0x60>
		data->group = NULL;
    876a:	2300      	movs	r3, #0
    876c:	6123      	str	r3, [r4, #16]
    876e:	e7f3      	b.n	8758 <read_group_cb+0x48>
	if (data->rsp->len &&
    8770:	68e3      	ldr	r3, [r4, #12]
    8772:	68a0      	ldr	r0, [r4, #8]
    8774:	781a      	ldrb	r2, [r3, #0]
    8776:	b13a      	cbz	r2, 8788 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8778:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    877c:	8981      	ldrh	r1, [r0, #12]
    877e:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8780:	4293      	cmp	r3, r2
    8782:	da01      	bge.n	8788 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    8784:	2000      	movs	r0, #0
    8786:	e7e8      	b.n	875a <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    8788:	2104      	movs	r1, #4
    878a:	3008      	adds	r0, #8
    878c:	f01d fb88 	bl	25ea0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8790:	4b09      	ldr	r3, [pc, #36]	; (87b8 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8792:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8794:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8796:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8798:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    879a:	4631      	mov	r1, r6
    879c:	9300      	str	r3, [sp, #0]
    879e:	9401      	str	r4, [sp, #4]
    87a0:	2300      	movs	r3, #0
    87a2:	4638      	mov	r0, r7
    87a4:	f01c fc6d 	bl	25082 <att_chan_read>
	if (read < 0) {
    87a8:	2800      	cmp	r0, #0
    87aa:	dbeb      	blt.n	8784 <read_group_cb+0x74>
	if (!data->group) {
    87ac:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    87ae:	3800      	subs	r0, #0
    87b0:	bf18      	it	ne
    87b2:	2001      	movne	r0, #1
    87b4:	e7d1      	b.n	875a <read_group_cb+0x4a>
    87b6:	bf00      	nop
    87b8:	00024f0b 	.word	0x00024f0b

000087bc <read_type_cb>:
{
    87bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    87c0:	f8d2 8000 	ldr.w	r8, [r2]
{
    87c4:	4606      	mov	r6, r0
    87c6:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    87c8:	6800      	ldr	r0, [r0, #0]
    87ca:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    87cc:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    87d0:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    87d2:	f01b ffcb 	bl	2476c <bt_uuid_cmp>
    87d6:	4607      	mov	r7, r0
    87d8:	2800      	cmp	r0, #0
    87da:	d13e      	bne.n	885a <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    87dc:	4628      	mov	r0, r5
    87de:	2215      	movs	r2, #21
    87e0:	4631      	mov	r1, r6
    87e2:	f01d f97d 	bl	25ae0 <bt_gatt_check_perm>
    87e6:	4605      	mov	r5, r0
    87e8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    87ea:	b148      	cbz	r0, 8800 <read_type_cb+0x44>
		if (data->rsp->len) {
    87ec:	68e3      	ldr	r3, [r4, #12]
    87ee:	781b      	ldrb	r3, [r3, #0]
    87f0:	b923      	cbnz	r3, 87fc <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    87f2:	2500      	movs	r5, #0
}
    87f4:	4628      	mov	r0, r5
    87f6:	b003      	add	sp, #12
    87f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    87fc:	7527      	strb	r7, [r4, #20]
    87fe:	e7f8      	b.n	87f2 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8800:	68a0      	ldr	r0, [r4, #8]
    8802:	f01d fb2b 	bl	25e5c <net_buf_frag_last>
    8806:	2102      	movs	r1, #2
    8808:	3008      	adds	r0, #8
    880a:	f01d fb49 	bl	25ea0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    880e:	4b14      	ldr	r3, [pc, #80]	; (8860 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8810:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8812:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8814:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8818:	4631      	mov	r1, r6
    881a:	9300      	str	r3, [sp, #0]
    881c:	9401      	str	r4, [sp, #4]
    881e:	462b      	mov	r3, r5
    8820:	4640      	mov	r0, r8
    8822:	f01c fc2e 	bl	25082 <att_chan_read>
	if (read < 0) {
    8826:	2800      	cmp	r0, #0
    8828:	da07      	bge.n	883a <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    882a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    882e:	bf26      	itte	cs
    8830:	4240      	negcs	r0, r0
    8832:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8834:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    8836:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8838:	e7dc      	b.n	87f4 <read_type_cb+0x38>
	if (!data->item) {
    883a:	6923      	ldr	r3, [r4, #16]
    883c:	2b00      	cmp	r3, #0
    883e:	d0d8      	beq.n	87f2 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8840:	68a0      	ldr	r0, [r4, #8]
    8842:	f01c faf3 	bl	24e2c <net_buf_frags_len>
    8846:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    884a:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    884c:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    884e:	7818      	ldrb	r0, [r3, #0]
    8850:	4285      	cmp	r5, r0
    8852:	bf94      	ite	ls
    8854:	2500      	movls	r5, #0
    8856:	2501      	movhi	r5, #1
    8858:	e7cc      	b.n	87f4 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    885a:	2501      	movs	r5, #1
    885c:	e7ca      	b.n	87f4 <read_type_cb+0x38>
    885e:	bf00      	nop
    8860:	00024e49 	.word	0x00024e49

00008864 <bt_att_connected>:
{
    8864:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8866:	2104      	movs	r1, #4
{
    8868:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    886a:	6800      	ldr	r0, [r0, #0]
    886c:	f01c fa98 	bl	24da0 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8870:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8874:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8876:	b93b      	cbnz	r3, 8888 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    8878:	f105 000c 	add.w	r0, r5, #12
    887c:	f022 fb80 	bl	2af80 <z_impl_k_queue_init>
    8880:	f105 0024 	add.w	r0, r5, #36	; 0x24
    8884:	f022 fb7c 	bl	2af80 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    8888:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    888a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    888e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    8890:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    8894:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    8896:	b902      	cbnz	r2, 889a <bt_att_connected+0x36>
	list->tail = node;
    8898:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    889a:	f3bf 8f5b 	dmb	ish
    889e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    88a2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    88a6:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    88a8:	bf5e      	ittt	pl
    88aa:	2317      	movpl	r3, #23
    88ac:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    88b0:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    88b4:	2230      	movs	r2, #48	; 0x30
    88b6:	2100      	movs	r1, #0
    88b8:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    88bc:	f022 ff9a 	bl	2b7f4 <memset>
    88c0:	4b01      	ldr	r3, [pc, #4]	; (88c8 <bt_att_connected+0x64>)
    88c2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    88c6:	bd38      	pop	{r3, r4, r5, pc}
    88c8:	00009551 	.word	0x00009551

000088cc <prep_write_cb>:
{
    88cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    88d0:	4614      	mov	r4, r2
    88d2:	4606      	mov	r6, r0
    88d4:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    88d6:	222a      	movs	r2, #42	; 0x2a
    88d8:	4601      	mov	r1, r0
    88da:	6820      	ldr	r0, [r4, #0]
    88dc:	f01d f900 	bl	25ae0 <bt_gatt_check_perm>
    88e0:	4605      	mov	r5, r0
    88e2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    88e4:	2800      	cmp	r0, #0
    88e6:	d12e      	bne.n	8946 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    88e8:	7cb3      	ldrb	r3, [r6, #18]
    88ea:	065b      	lsls	r3, r3, #25
    88ec:	d516      	bpl.n	891c <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    88ee:	2301      	movs	r3, #1
    88f0:	9301      	str	r3, [sp, #4]
    88f2:	89e3      	ldrh	r3, [r4, #14]
    88f4:	9300      	str	r3, [sp, #0]
    88f6:	f8d6 8008 	ldr.w	r8, [r6, #8]
    88fa:	89a3      	ldrh	r3, [r4, #12]
    88fc:	68a2      	ldr	r2, [r4, #8]
    88fe:	6820      	ldr	r0, [r4, #0]
    8900:	4631      	mov	r1, r6
    8902:	47c0      	blx	r8
	if (write != 0) {
    8904:	b150      	cbz	r0, 891c <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    8906:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    890a:	bf26      	itte	cs
    890c:	4243      	negcs	r3, r0
    890e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    8910:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8912:	7423      	strb	r3, [r4, #16]
}
    8914:	4628      	mov	r0, r5
    8916:	b002      	add	sp, #8
    8918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    891c:	480b      	ldr	r0, [pc, #44]	; (894c <prep_write_cb+0x80>)
    891e:	2200      	movs	r2, #0
    8920:	2300      	movs	r3, #0
    8922:	f01d fa61 	bl	25de8 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    8926:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    8928:	b908      	cbnz	r0, 892e <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    892a:	2309      	movs	r3, #9
    892c:	e7f1      	b.n	8912 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    892e:	89e3      	ldrh	r3, [r4, #14]
    8930:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    8932:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    8934:	89a2      	ldrh	r2, [r4, #12]
    8936:	68a1      	ldr	r1, [r4, #8]
    8938:	3008      	adds	r0, #8
    893a:	f01d fab7 	bl	25eac <net_buf_simple_add_mem>
	data->err = 0U;
    893e:	2300      	movs	r3, #0
    8940:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    8942:	2501      	movs	r5, #1
    8944:	e7e6      	b.n	8914 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    8946:	2500      	movs	r5, #0
    8948:	e7e4      	b.n	8914 <prep_write_cb+0x48>
    894a:	bf00      	nop
    894c:	20000d50 	.word	0x20000d50

00008950 <bt_att_chan_create_pdu>:
{
    8950:	b538      	push	{r3, r4, r5, lr}
    8952:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8954:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    8958:	3201      	adds	r2, #1
    895a:	428a      	cmp	r2, r1
    895c:	d90c      	bls.n	8978 <bt_att_chan_create_pdu+0x28>
    895e:	481a      	ldr	r0, [pc, #104]	; (89c8 <bt_att_chan_create_pdu+0x78>)
    8960:	4b1a      	ldr	r3, [pc, #104]	; (89cc <bt_att_chan_create_pdu+0x7c>)
    8962:	1a1b      	subs	r3, r3, r0
    8964:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    8966:	019b      	lsls	r3, r3, #6
    8968:	4819      	ldr	r0, [pc, #100]	; (89d0 <bt_att_chan_create_pdu+0x80>)
    896a:	f043 0302 	orr.w	r3, r3, #2
    896e:	f01a fe80 	bl	23672 <log_2>
		return NULL;
    8972:	2400      	movs	r4, #0
}
    8974:	4620      	mov	r0, r4
    8976:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    8978:	4628      	mov	r0, r5
    897a:	f01c fa75 	bl	24e68 <att_op_get_type>
    897e:	2802      	cmp	r0, #2
    8980:	d001      	beq.n	8986 <bt_att_chan_create_pdu+0x36>
    8982:	2804      	cmp	r0, #4
    8984:	d114      	bne.n	89b0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    8986:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    898a:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    898c:	2100      	movs	r1, #0
    898e:	4608      	mov	r0, r1
    8990:	f01c f9ea 	bl	24d68 <bt_l2cap_create_pdu_timeout>
    8994:	4604      	mov	r4, r0
	if (!buf) {
    8996:	b980      	cbnz	r0, 89ba <bt_att_chan_create_pdu+0x6a>
    8998:	4b0b      	ldr	r3, [pc, #44]	; (89c8 <bt_att_chan_create_pdu+0x78>)
    899a:	4a0c      	ldr	r2, [pc, #48]	; (89cc <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    899c:	480d      	ldr	r0, [pc, #52]	; (89d4 <bt_att_chan_create_pdu+0x84>)
    899e:	1ad2      	subs	r2, r2, r3
    89a0:	08d2      	lsrs	r2, r2, #3
    89a2:	0192      	lsls	r2, r2, #6
    89a4:	f042 0201 	orr.w	r2, r2, #1
    89a8:	4629      	mov	r1, r5
    89aa:	f01a fe4e 	bl	2364a <log_1>
		return NULL;
    89ae:	e7e1      	b.n	8974 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    89b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    89b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    89b8:	e7e8      	b.n	898c <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    89ba:	2101      	movs	r1, #1
    89bc:	3008      	adds	r0, #8
    89be:	f01d fa6f 	bl	25ea0 <net_buf_simple_add>
	hdr->code = op;
    89c2:	7005      	strb	r5, [r0, #0]
	return buf;
    89c4:	e7d6      	b.n	8974 <bt_att_chan_create_pdu+0x24>
    89c6:	bf00      	nop
    89c8:	0002bfa8 	.word	0x0002bfa8
    89cc:	0002bfb0 	.word	0x0002bfb0
    89d0:	0002f4f4 	.word	0x0002f4f4
    89d4:	0002f2e1 	.word	0x0002f2e1

000089d8 <att_indicate>:
{
    89d8:	b570      	push	{r4, r5, r6, lr}
    89da:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    89dc:	f101 0008 	add.w	r0, r1, #8
    89e0:	460d      	mov	r5, r1
    89e2:	f01d fa97 	bl	25f14 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    89e6:	6826      	ldr	r6, [r4, #0]
    89e8:	89ab      	ldrh	r3, [r5, #12]
    89ea:	68aa      	ldr	r2, [r5, #8]
    89ec:	4601      	mov	r1, r0
    89ee:	6830      	ldr	r0, [r6, #0]
    89f0:	f01d f97a 	bl	25ce8 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    89f4:	211e      	movs	r1, #30
    89f6:	2200      	movs	r2, #0
    89f8:	4620      	mov	r0, r4
    89fa:	f7ff ffa9 	bl	8950 <bt_att_chan_create_pdu>
	if (!buf) {
    89fe:	4601      	mov	r1, r0
    8a00:	b118      	cbz	r0, 8a0a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    8a02:	4a03      	ldr	r2, [pc, #12]	; (8a10 <att_indicate+0x38>)
    8a04:	4620      	mov	r0, r4
    8a06:	f01c faa7 	bl	24f58 <bt_att_chan_send_rsp>
}
    8a0a:	2000      	movs	r0, #0
    8a0c:	bd70      	pop	{r4, r5, r6, pc}
    8a0e:	bf00      	nop
    8a10:	00025067 	.word	0x00025067

00008a14 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a18:	4688      	mov	r8, r1
    8a1a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8a1c:	2101      	movs	r1, #1
    8a1e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8a20:	4605      	mov	r5, r0
    8a22:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8a24:	f7ff ff94 	bl	8950 <bt_att_chan_create_pdu>
	if (!buf) {
    8a28:	4604      	mov	r4, r0
    8a2a:	b178      	cbz	r0, 8a4c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    8a2c:	2104      	movs	r1, #4
    8a2e:	3008      	adds	r0, #8
    8a30:	f01d fa36 	bl	25ea0 <net_buf_simple_add>
	rsp->request = req;
    8a34:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    8a38:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    8a3a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8a3e:	4621      	mov	r1, r4
    8a40:	4628      	mov	r0, r5
    8a42:	4a03      	ldr	r2, [pc, #12]	; (8a50 <send_err_rsp.part.0+0x3c>)
}
    8a44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8a48:	f01c ba86 	b.w	24f58 <bt_att_chan_send_rsp>
}
    8a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a50:	0002504b 	.word	0x0002504b

00008a54 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8a54:	898b      	ldrh	r3, [r1, #12]
{
    8a56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a5a:	4604      	mov	r4, r0
    8a5c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    8a5e:	b963      	cbnz	r3, 8a7a <bt_att_recv+0x26>
    8a60:	494c      	ldr	r1, [pc, #304]	; (8b94 <bt_att_recv+0x140>)
    8a62:	4b4d      	ldr	r3, [pc, #308]	; (8b98 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    8a64:	484d      	ldr	r0, [pc, #308]	; (8b9c <bt_att_recv+0x148>)
    8a66:	1ac9      	subs	r1, r1, r3
    8a68:	08c9      	lsrs	r1, r1, #3
    8a6a:	0189      	lsls	r1, r1, #6
    8a6c:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    8a70:	f01a fdde 	bl	23630 <log_0>
}
    8a74:	2000      	movs	r0, #0
    8a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    8a7a:	2101      	movs	r1, #1
    8a7c:	f108 0008 	add.w	r0, r8, #8
    8a80:	f01d fa40 	bl	25f04 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8a84:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8a88:	4605      	mov	r5, r0
    8a8a:	2b00      	cmp	r3, #0
    8a8c:	d0f2      	beq.n	8a74 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    8a8e:	4a44      	ldr	r2, [pc, #272]	; (8ba0 <bt_att_recv+0x14c>)
    8a90:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8a92:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8a96:	2300      	movs	r3, #0
    8a98:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    8a9a:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8a9e:	4288      	cmp	r0, r1
    8aa0:	d11d      	bne.n	8ade <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    8aa2:	00d8      	lsls	r0, r3, #3
    8aa4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8aa8:	789f      	ldrb	r7, [r3, #2]
    8aaa:	2f01      	cmp	r7, #1
    8aac:	d132      	bne.n	8b14 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8aae:	f3bf 8f5b 	dmb	ish
    8ab2:	34b8      	adds	r4, #184	; 0xb8
    8ab4:	e854 3f00 	ldrex	r3, [r4]
    8ab8:	f043 0201 	orr.w	r2, r3, #1
    8abc:	e844 2100 	strex	r1, r2, [r4]
    8ac0:	2900      	cmp	r1, #0
    8ac2:	d1f7      	bne.n	8ab4 <bt_att_recv+0x60>
    8ac4:	f3bf 8f5b 	dmb	ish
    8ac8:	07da      	lsls	r2, r3, #31
    8aca:	d53d      	bpl.n	8b48 <bt_att_recv+0xf4>
    8acc:	4931      	ldr	r1, [pc, #196]	; (8b94 <bt_att_recv+0x140>)
    8ace:	4b32      	ldr	r3, [pc, #200]	; (8b98 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    8ad0:	4834      	ldr	r0, [pc, #208]	; (8ba4 <bt_att_recv+0x150>)
    8ad2:	1ac9      	subs	r1, r1, r3
    8ad4:	08c9      	lsrs	r1, r1, #3
    8ad6:	0189      	lsls	r1, r1, #6
    8ad8:	f041 0102 	orr.w	r1, r1, #2
    8adc:	e7c8      	b.n	8a70 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8ade:	3301      	adds	r3, #1
    8ae0:	2b1c      	cmp	r3, #28
    8ae2:	d1da      	bne.n	8a9a <bt_att_recv+0x46>
    8ae4:	4b2c      	ldr	r3, [pc, #176]	; (8b98 <bt_att_recv+0x144>)
    8ae6:	4a2b      	ldr	r2, [pc, #172]	; (8b94 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    8ae8:	482f      	ldr	r0, [pc, #188]	; (8ba8 <bt_att_recv+0x154>)
    8aea:	1ad2      	subs	r2, r2, r3
    8aec:	08d2      	lsrs	r2, r2, #3
    8aee:	0192      	lsls	r2, r2, #6
    8af0:	f042 0202 	orr.w	r2, r2, #2
    8af4:	f01a fda9 	bl	2364a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8af8:	7829      	ldrb	r1, [r5, #0]
    8afa:	4608      	mov	r0, r1
    8afc:	f01c f9b4 	bl	24e68 <att_op_get_type>
    8b00:	2800      	cmp	r0, #0
    8b02:	d0b7      	beq.n	8a74 <bt_att_recv+0x20>
	if (!req) {
    8b04:	2900      	cmp	r1, #0
    8b06:	d0b5      	beq.n	8a74 <bt_att_recv+0x20>
    8b08:	2306      	movs	r3, #6
    8b0a:	2200      	movs	r2, #0
    8b0c:	4630      	mov	r0, r6
    8b0e:	f7ff ff81 	bl	8a14 <send_err_rsp.part.0>
    8b12:	e7af      	b.n	8a74 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    8b14:	2f05      	cmp	r7, #5
    8b16:	d117      	bne.n	8b48 <bt_att_recv+0xf4>
    8b18:	f3bf 8f5b 	dmb	ish
    8b1c:	34b8      	adds	r4, #184	; 0xb8
    8b1e:	e854 3f00 	ldrex	r3, [r4]
    8b22:	f043 0202 	orr.w	r2, r3, #2
    8b26:	e844 2100 	strex	r1, r2, [r4]
    8b2a:	2900      	cmp	r1, #0
    8b2c:	d1f7      	bne.n	8b1e <bt_att_recv+0xca>
    8b2e:	f3bf 8f5b 	dmb	ish
    8b32:	079b      	lsls	r3, r3, #30
    8b34:	d508      	bpl.n	8b48 <bt_att_recv+0xf4>
    8b36:	4917      	ldr	r1, [pc, #92]	; (8b94 <bt_att_recv+0x140>)
    8b38:	4b17      	ldr	r3, [pc, #92]	; (8b98 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    8b3a:	481c      	ldr	r0, [pc, #112]	; (8bac <bt_att_recv+0x158>)
    8b3c:	1ac9      	subs	r1, r1, r3
    8b3e:	08c9      	lsrs	r1, r1, #3
    8b40:	0189      	lsls	r1, r1, #6
    8b42:	f041 0102 	orr.w	r1, r1, #2
    8b46:	e793      	b.n	8a70 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    8b48:	eb0c 0300 	add.w	r3, ip, r0
    8b4c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    8b50:	785a      	ldrb	r2, [r3, #1]
    8b52:	428a      	cmp	r2, r1
    8b54:	d90e      	bls.n	8b74 <bt_att_recv+0x120>
    8b56:	4a10      	ldr	r2, [pc, #64]	; (8b98 <bt_att_recv+0x144>)
    8b58:	4b0e      	ldr	r3, [pc, #56]	; (8b94 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8b5a:	4815      	ldr	r0, [pc, #84]	; (8bb0 <bt_att_recv+0x15c>)
    8b5c:	1a9b      	subs	r3, r3, r2
    8b5e:	08db      	lsrs	r3, r3, #3
    8b60:	019b      	lsls	r3, r3, #6
    8b62:	782a      	ldrb	r2, [r5, #0]
    8b64:	f043 0301 	orr.w	r3, r3, #1
    8b68:	f01a fd83 	bl	23672 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    8b6c:	2f01      	cmp	r7, #1
    8b6e:	d181      	bne.n	8a74 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    8b70:	2304      	movs	r3, #4
    8b72:	e00a      	b.n	8b8a <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    8b74:	685b      	ldr	r3, [r3, #4]
    8b76:	4641      	mov	r1, r8
    8b78:	4630      	mov	r0, r6
    8b7a:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8b7c:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    8b7e:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8b80:	f47f af78 	bne.w	8a74 <bt_att_recv+0x20>
    8b84:	2800      	cmp	r0, #0
    8b86:	f43f af75 	beq.w	8a74 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    8b8a:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8b8c:	2900      	cmp	r1, #0
    8b8e:	f43f af71 	beq.w	8a74 <bt_att_recv+0x20>
    8b92:	e7ba      	b.n	8b0a <bt_att_recv+0xb6>
    8b94:	0002bfb0 	.word	0x0002bfb0
    8b98:	0002bfa8 	.word	0x0002bfa8
    8b9c:	0002f519 	.word	0x0002f519
    8ba0:	0002c3b4 	.word	0x0002c3b4
    8ba4:	0002f534 	.word	0x0002f534
    8ba8:	0002f58e 	.word	0x0002f58e
    8bac:	0002f550 	.word	0x0002f550
    8bb0:	0002f56f 	.word	0x0002f56f

00008bb4 <att_write_rsp>:
{
    8bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8bb8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8bba:	6803      	ldr	r3, [r0, #0]
    8bbc:	460e      	mov	r6, r1
    8bbe:	3900      	subs	r1, #0
{
    8bc0:	b086      	sub	sp, #24
    8bc2:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8bc4:	bf18      	it	ne
    8bc6:	2101      	movne	r1, #1
    8bc8:	6818      	ldr	r0, [r3, #0]
{
    8bca:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8bcc:	f01d f8b7 	bl	25d3e <bt_gatt_change_aware>
    8bd0:	2800      	cmp	r0, #0
    8bd2:	d04e      	beq.n	8c72 <att_write_rsp+0xbe>
	if (!handle) {
    8bd4:	2f00      	cmp	r7, #0
    8bd6:	d04e      	beq.n	8c76 <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    8bd8:	2218      	movs	r2, #24
    8bda:	2100      	movs	r1, #0
    8bdc:	4668      	mov	r0, sp
    8bde:	f022 fe09 	bl	2b7f4 <memset>
	if (rsp) {
    8be2:	f1b8 0f00 	cmp.w	r8, #0
    8be6:	d126      	bne.n	8c36 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    8be8:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8bea:	4a24      	ldr	r2, [pc, #144]	; (8c7c <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    8bec:	681b      	ldr	r3, [r3, #0]
    8bee:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    8bf0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8bf4:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8bfa:	9303      	str	r3, [sp, #12]
	data.len = len;
    8bfc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    8c00:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8c04:	2301      	movs	r3, #1
    8c06:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8c0a:	4639      	mov	r1, r7
    8c0c:	466b      	mov	r3, sp
    8c0e:	4638      	mov	r0, r7
	data.req = req;
    8c10:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8c14:	f01c f96e 	bl	24ef4 <bt_gatt_foreach_attr>
	if (data.err) {
    8c18:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8c1c:	b30c      	cbz	r4, 8c62 <att_write_rsp+0xae>
		if (rsp) {
    8c1e:	f1b8 0f00 	cmp.w	r8, #0
    8c22:	d019      	beq.n	8c58 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    8c24:	9801      	ldr	r0, [sp, #4]
    8c26:	f00f fbfd 	bl	18424 <net_buf_unref>
	if (!req) {
    8c2a:	b976      	cbnz	r6, 8c4a <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8c2c:	2400      	movs	r4, #0
}
    8c2e:	4620      	mov	r0, r4
    8c30:	b006      	add	sp, #24
    8c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    8c36:	2200      	movs	r2, #0
    8c38:	4641      	mov	r1, r8
    8c3a:	4628      	mov	r0, r5
    8c3c:	f7ff fe88 	bl	8950 <bt_att_chan_create_pdu>
    8c40:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8c42:	2800      	cmp	r0, #0
    8c44:	d1d0      	bne.n	8be8 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    8c46:	240e      	movs	r4, #14
    8c48:	e7f1      	b.n	8c2e <att_write_rsp+0x7a>
    8c4a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8c4e:	463a      	mov	r2, r7
    8c50:	4631      	mov	r1, r6
    8c52:	4628      	mov	r0, r5
    8c54:	f7ff fede 	bl	8a14 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8c58:	2e18      	cmp	r6, #24
    8c5a:	d1e7      	bne.n	8c2c <att_write_rsp+0x78>
    8c5c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8c60:	e7e5      	b.n	8c2e <att_write_rsp+0x7a>
	if (data.buf) {
    8c62:	9901      	ldr	r1, [sp, #4]
    8c64:	2900      	cmp	r1, #0
    8c66:	d0e1      	beq.n	8c2c <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8c68:	4a05      	ldr	r2, [pc, #20]	; (8c80 <att_write_rsp+0xcc>)
    8c6a:	4628      	mov	r0, r5
    8c6c:	f01c f974 	bl	24f58 <bt_att_chan_send_rsp>
    8c70:	e7dd      	b.n	8c2e <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8c72:	2412      	movs	r4, #18
    8c74:	e7db      	b.n	8c2e <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    8c76:	2401      	movs	r4, #1
    8c78:	e7d9      	b.n	8c2e <att_write_rsp+0x7a>
    8c7a:	bf00      	nop
    8c7c:	00025261 	.word	0x00025261
    8c80:	0002504b 	.word	0x0002504b

00008c84 <bt_att_create_pdu>:
{
    8c84:	b570      	push	{r4, r5, r6, lr}
    8c86:	460e      	mov	r6, r1
    8c88:	4615      	mov	r5, r2
	att = att_get(conn);
    8c8a:	f7ff fc87 	bl	859c <att_get>
	if (!att) {
    8c8e:	b1c0      	cbz	r0, 8cc2 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8c90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    8c92:	1c69      	adds	r1, r5, #1
    8c94:	b15b      	cbz	r3, 8cae <bt_att_create_pdu+0x2a>
    8c96:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    8c9a:	d008      	beq.n	8cae <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8c9c:	681b      	ldr	r3, [r3, #0]
    8c9e:	b10b      	cbz	r3, 8ca4 <bt_att_create_pdu+0x20>
    8ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    8ca4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    8ca8:	4291      	cmp	r1, r2
    8caa:	d90c      	bls.n	8cc6 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8cac:	b98b      	cbnz	r3, 8cd2 <bt_att_create_pdu+0x4e>
    8cae:	4a0e      	ldr	r2, [pc, #56]	; (8ce8 <bt_att_create_pdu+0x64>)
    8cb0:	4b0e      	ldr	r3, [pc, #56]	; (8cec <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    8cb2:	480f      	ldr	r0, [pc, #60]	; (8cf0 <bt_att_create_pdu+0x6c>)
    8cb4:	1ad2      	subs	r2, r2, r3
    8cb6:	08d2      	lsrs	r2, r2, #3
    8cb8:	0192      	lsls	r2, r2, #6
    8cba:	f042 0202 	orr.w	r2, r2, #2
    8cbe:	f01a fcc4 	bl	2364a <log_1>
}
    8cc2:	2000      	movs	r0, #0
    8cc4:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    8cc6:	462a      	mov	r2, r5
    8cc8:	4631      	mov	r1, r6
}
    8cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    8cce:	f7ff be3f 	b.w	8950 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8cd2:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    8cd6:	d004      	beq.n	8ce2 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8cd8:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8cdc:	b10c      	cbz	r4, 8ce2 <bt_att_create_pdu+0x5e>
    8cde:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    8ce2:	4618      	mov	r0, r3
    8ce4:	4623      	mov	r3, r4
    8ce6:	e7dd      	b.n	8ca4 <bt_att_create_pdu+0x20>
    8ce8:	0002bfb0 	.word	0x0002bfb0
    8cec:	0002bfa8 	.word	0x0002bfa8
    8cf0:	0002f5a8 	.word	0x0002f5a8

00008cf4 <att_exec_write_req>:
{
    8cf4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    8cf8:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    8cfa:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    8cfc:	f893 8000 	ldrb.w	r8, [r3]
{
    8d00:	4606      	mov	r6, r0
	uint8_t err = 0U;
    8d02:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    8d04:	6830      	ldr	r0, [r6, #0]
    8d06:	2200      	movs	r2, #0
    8d08:	2300      	movs	r3, #0
    8d0a:	3024      	adds	r0, #36	; 0x24
    8d0c:	f01d f871 	bl	25df2 <net_buf_get>
    8d10:	4605      	mov	r5, r0
    8d12:	b978      	cbnz	r0, 8d34 <att_exec_write_req+0x40>
	if (err) {
    8d14:	bb54      	cbnz	r4, 8d6c <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    8d16:	2119      	movs	r1, #25
    8d18:	4622      	mov	r2, r4
    8d1a:	4638      	mov	r0, r7
    8d1c:	f7ff ffb2 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    8d20:	4601      	mov	r1, r0
    8d22:	b328      	cbz	r0, 8d70 <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8d24:	4a13      	ldr	r2, [pc, #76]	; (8d74 <att_exec_write_req+0x80>)
    8d26:	4630      	mov	r0, r6
    8d28:	f01c f916 	bl	24f58 <bt_att_chan_send_rsp>
}
    8d2c:	4620      	mov	r0, r4
    8d2e:	b004      	add	sp, #16
    8d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    8d34:	b9b4      	cbnz	r4, 8d64 <att_exec_write_req+0x70>
    8d36:	f1b8 0f01 	cmp.w	r8, #1
    8d3a:	d113      	bne.n	8d64 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    8d3c:	89aa      	ldrh	r2, [r5, #12]
    8d3e:	8aab      	ldrh	r3, [r5, #20]
    8d40:	9202      	str	r2, [sp, #8]
    8d42:	68aa      	ldr	r2, [r5, #8]
    8d44:	9201      	str	r2, [sp, #4]
    8d46:	8aea      	ldrh	r2, [r5, #22]
    8d48:	9200      	str	r2, [sp, #0]
    8d4a:	2118      	movs	r1, #24
    8d4c:	4622      	mov	r2, r4
    8d4e:	4630      	mov	r0, r6
    8d50:	f7ff ff30 	bl	8bb4 <att_write_rsp>
			if (err) {
    8d54:	4604      	mov	r4, r0
    8d56:	b128      	cbz	r0, 8d64 <att_exec_write_req+0x70>
	if (!req) {
    8d58:	4603      	mov	r3, r0
    8d5a:	8aaa      	ldrh	r2, [r5, #20]
    8d5c:	2118      	movs	r1, #24
    8d5e:	4630      	mov	r0, r6
    8d60:	f7ff fe58 	bl	8a14 <send_err_rsp.part.0>
		net_buf_unref(buf);
    8d64:	4628      	mov	r0, r5
    8d66:	f00f fb5d 	bl	18424 <net_buf_unref>
    8d6a:	e7cb      	b.n	8d04 <att_exec_write_req+0x10>
		return 0;
    8d6c:	4604      	mov	r4, r0
    8d6e:	e7dd      	b.n	8d2c <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    8d70:	240e      	movs	r4, #14
    8d72:	e7db      	b.n	8d2c <att_exec_write_req+0x38>
    8d74:	0002504b 	.word	0x0002504b

00008d78 <att_prepare_write_req>:
{
    8d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d7c:	460c      	mov	r4, r1
    8d7e:	b087      	sub	sp, #28
    8d80:	4605      	mov	r5, r0
    8d82:	2104      	movs	r1, #4
    8d84:	f104 0008 	add.w	r0, r4, #8
    8d88:	f01d f8bc 	bl	25f04 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    8d8c:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    8d90:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    8d94:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    8d98:	f8d4 8008 	ldr.w	r8, [r4, #8]
    8d9c:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    8d9e:	2101      	movs	r1, #1
    8da0:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    8da2:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    8da6:	f01c ffca 	bl	25d3e <bt_gatt_change_aware>
    8daa:	2800      	cmp	r0, #0
    8dac:	d04b      	beq.n	8e46 <att_prepare_write_req+0xce>
	if (!handle) {
    8dae:	2e00      	cmp	r6, #0
    8db0:	d04b      	beq.n	8e4a <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    8db2:	2210      	movs	r2, #16
    8db4:	2100      	movs	r1, #0
    8db6:	a802      	add	r0, sp, #8
    8db8:	f022 fd1c 	bl	2b7f4 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8dbc:	2301      	movs	r3, #1
    8dbe:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8dc2:	4a24      	ldr	r2, [pc, #144]	; (8e54 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    8dc4:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    8dc8:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8dca:	ab01      	add	r3, sp, #4
    8dcc:	4631      	mov	r1, r6
    8dce:	4630      	mov	r0, r6
	data.offset = offset;
    8dd0:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    8dd4:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    8dd8:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8ddc:	f01c f88a 	bl	24ef4 <bt_gatt_foreach_attr>
	if (data.err) {
    8de0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8de4:	b154      	cbz	r4, 8dfc <att_prepare_write_req+0x84>
	if (!req) {
    8de6:	4623      	mov	r3, r4
    8de8:	4632      	mov	r2, r6
    8dea:	2116      	movs	r1, #22
    8dec:	4628      	mov	r0, r5
    8dee:	f7ff fe11 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    8df2:	2400      	movs	r4, #0
}
    8df4:	4620      	mov	r0, r4
    8df6:	b007      	add	sp, #28
    8df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    8dfc:	6828      	ldr	r0, [r5, #0]
    8dfe:	9902      	ldr	r1, [sp, #8]
    8e00:	3024      	adds	r0, #36	; 0x24
    8e02:	f01d f81a 	bl	25e3a <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    8e06:	4622      	mov	r2, r4
    8e08:	2117      	movs	r1, #23
    8e0a:	4658      	mov	r0, fp
    8e0c:	f7ff ff3a 	bl	8c84 <bt_att_create_pdu>
    8e10:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8e12:	b1e0      	cbz	r0, 8e4e <att_prepare_write_req+0xd6>
	return net_buf_simple_add(&buf->b, len);
    8e14:	2104      	movs	r1, #4
    8e16:	3008      	adds	r0, #8
    8e18:	f01d f842 	bl	25ea0 <net_buf_simple_add>
    8e1c:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    8e1e:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    8e22:	f8a0 9002 	strh.w	r9, [r0, #2]
    8e26:	9802      	ldr	r0, [sp, #8]
    8e28:	4639      	mov	r1, r7
    8e2a:	3008      	adds	r0, #8
    8e2c:	f01d f838 	bl	25ea0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8e30:	463a      	mov	r2, r7
    8e32:	4641      	mov	r1, r8
    8e34:	1d30      	adds	r0, r6, #4
    8e36:	f022 fcbc 	bl	2b7b2 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8e3a:	4a07      	ldr	r2, [pc, #28]	; (8e58 <att_prepare_write_req+0xe0>)
    8e3c:	9902      	ldr	r1, [sp, #8]
    8e3e:	4628      	mov	r0, r5
    8e40:	f01c f88a 	bl	24f58 <bt_att_chan_send_rsp>
	return 0;
    8e44:	e7d6      	b.n	8df4 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8e46:	2412      	movs	r4, #18
    8e48:	e7d4      	b.n	8df4 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8e4a:	2401      	movs	r4, #1
    8e4c:	e7d2      	b.n	8df4 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    8e4e:	240e      	movs	r4, #14
    8e50:	e7d0      	b.n	8df4 <att_prepare_write_req+0x7c>
    8e52:	bf00      	nop
    8e54:	000088cd 	.word	0x000088cd
    8e58:	0002504b 	.word	0x0002504b

00008e5c <att_read_group_req>:
{
    8e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8e60:	7b0c      	ldrb	r4, [r1, #12]
    8e62:	3c04      	subs	r4, #4
    8e64:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8e66:	2c02      	cmp	r4, #2
{
    8e68:	4605      	mov	r5, r0
    8e6a:	b08c      	sub	sp, #48	; 0x30
    8e6c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8e6e:	d001      	beq.n	8e74 <att_read_group_req+0x18>
    8e70:	2c10      	cmp	r4, #16
    8e72:	d16f      	bne.n	8f54 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    8e74:	2104      	movs	r1, #4
    8e76:	3008      	adds	r0, #8
    8e78:	f01d f844 	bl	25f04 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8e7c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    8e80:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8e82:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8e84:	1d01      	adds	r1, r0, #4
    8e86:	4622      	mov	r2, r4
    8e88:	4640      	mov	r0, r8
    8e8a:	f01b fc99 	bl	247c0 <bt_uuid_create>
    8e8e:	2800      	cmp	r0, #0
    8e90:	d062      	beq.n	8f58 <att_read_group_req+0xfc>
	if (!start || !end) {
    8e92:	2e00      	cmp	r6, #0
    8e94:	d03a      	beq.n	8f0c <att_read_group_req+0xb0>
    8e96:	2400      	movs	r4, #0
    8e98:	2f00      	cmp	r7, #0
    8e9a:	d036      	beq.n	8f0a <att_read_group_req+0xae>
	if (start > end) {
    8e9c:	42be      	cmp	r6, r7
    8e9e:	d835      	bhi.n	8f0c <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8ea0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8ea4:	a901      	add	r1, sp, #4
    8ea6:	4640      	mov	r0, r8
    8ea8:	f88d 4004 	strb.w	r4, [sp, #4]
    8eac:	f8ad 3006 	strh.w	r3, [sp, #6]
    8eb0:	f01b fc5c 	bl	2476c <bt_uuid_cmp>
    8eb4:	2800      	cmp	r0, #0
    8eb6:	d134      	bne.n	8f22 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    8eb8:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8eba:	2214      	movs	r2, #20
    8ebc:	2100      	movs	r1, #0
    8ebe:	a807      	add	r0, sp, #28
    8ec0:	f022 fc98 	bl	2b7f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8ec4:	2201      	movs	r2, #1
    8ec6:	2111      	movs	r1, #17
    8ec8:	4620      	mov	r0, r4
    8eca:	f7ff fedb 	bl	8c84 <bt_att_create_pdu>
    8ece:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    8ed0:	2800      	cmp	r0, #0
    8ed2:	d041      	beq.n	8f58 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    8ed4:	2101      	movs	r1, #1
    8ed6:	3008      	adds	r0, #8
	data.uuid = uuid;
    8ed8:	e9cd 5807 	strd	r5, r8, [sp, #28]
    8edc:	f01c ffe0 	bl	25ea0 <net_buf_simple_add>
	data.rsp->len = 0U;
    8ee0:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8ee4:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8ee6:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    8ee8:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8eec:	4a1b      	ldr	r2, [pc, #108]	; (8f5c <att_read_group_req+0x100>)
	data.group = NULL;
    8eee:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8ef2:	4639      	mov	r1, r7
    8ef4:	4630      	mov	r0, r6
    8ef6:	f01b fffd 	bl	24ef4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8efc:	781c      	ldrb	r4, [r3, #0]
    8efe:	bb1c      	cbnz	r4, 8f48 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    8f00:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f02:	f00f fa8f 	bl	18424 <net_buf_unref>
	if (!req) {
    8f06:	230a      	movs	r3, #10
    8f08:	e018      	b.n	8f3c <att_read_group_req+0xe0>
			*err = 0U;
    8f0a:	463e      	mov	r6, r7
	if (!req) {
    8f0c:	2301      	movs	r3, #1
    8f0e:	4632      	mov	r2, r6
    8f10:	2110      	movs	r1, #16
    8f12:	4628      	mov	r0, r5
    8f14:	f7ff fd7e 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    8f18:	2400      	movs	r4, #0
}
    8f1a:	4620      	mov	r0, r4
    8f1c:	b00c      	add	sp, #48	; 0x30
    8f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8f22:	f642 0301 	movw	r3, #10241	; 0x2801
    8f26:	a907      	add	r1, sp, #28
    8f28:	4640      	mov	r0, r8
    8f2a:	f88d 401c 	strb.w	r4, [sp, #28]
    8f2e:	f8ad 301e 	strh.w	r3, [sp, #30]
    8f32:	f01b fc1b 	bl	2476c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8f36:	2800      	cmp	r0, #0
    8f38:	d0be      	beq.n	8eb8 <att_read_group_req+0x5c>
	if (!req) {
    8f3a:	2310      	movs	r3, #16
    8f3c:	4632      	mov	r2, r6
    8f3e:	2110      	movs	r1, #16
    8f40:	4628      	mov	r0, r5
    8f42:	f7ff fd67 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    8f46:	e7e8      	b.n	8f1a <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f48:	4a05      	ldr	r2, [pc, #20]	; (8f60 <att_read_group_req+0x104>)
    8f4a:	9909      	ldr	r1, [sp, #36]	; 0x24
    8f4c:	4628      	mov	r0, r5
    8f4e:	f01c f803 	bl	24f58 <bt_att_chan_send_rsp>
	return 0;
    8f52:	e7e1      	b.n	8f18 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    8f54:	2404      	movs	r4, #4
    8f56:	e7e0      	b.n	8f1a <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    8f58:	240e      	movs	r4, #14
    8f5a:	e7de      	b.n	8f1a <att_read_group_req+0xbe>
    8f5c:	00008711 	.word	0x00008711
    8f60:	0002504b 	.word	0x0002504b

00008f64 <att_read_mult_req>:
{
    8f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8f68:	6886      	ldr	r6, [r0, #8]
{
    8f6a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    8f6c:	2210      	movs	r2, #16
{
    8f6e:	4604      	mov	r4, r0
    8f70:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    8f72:	4668      	mov	r0, sp
    8f74:	2100      	movs	r1, #0
    8f76:	f022 fc3d 	bl	2b7f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8f7a:	2200      	movs	r2, #0
    8f7c:	210f      	movs	r1, #15
    8f7e:	4630      	mov	r0, r6
    8f80:	f7ff fe80 	bl	8c84 <bt_att_create_pdu>
    8f84:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8f86:	b360      	cbz	r0, 8fe2 <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f88:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8fec <att_read_mult_req+0x88>
	data.chan = chan;
    8f8c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    8f8e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f92:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    8f96:	89ab      	ldrh	r3, [r5, #12]
    8f98:	2b01      	cmp	r3, #1
    8f9a:	d805      	bhi.n	8fa8 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f9c:	4a12      	ldr	r2, [pc, #72]	; (8fe8 <att_read_mult_req+0x84>)
    8f9e:	9902      	ldr	r1, [sp, #8]
    8fa0:	4620      	mov	r0, r4
    8fa2:	f01b ffd9 	bl	24f58 <bt_att_chan_send_rsp>
    8fa6:	e018      	b.n	8fda <att_read_mult_req+0x76>
    8fa8:	4638      	mov	r0, r7
    8faa:	f01c ffb3 	bl	25f14 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8fae:	466b      	mov	r3, sp
    8fb0:	464a      	mov	r2, r9
    8fb2:	4601      	mov	r1, r0
    8fb4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8fb6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8fba:	f01b ff9b 	bl	24ef4 <bt_gatt_foreach_attr>
		if (data.err) {
    8fbe:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d0e7      	beq.n	8f96 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    8fc6:	9802      	ldr	r0, [sp, #8]
    8fc8:	f00f fa2c 	bl	18424 <net_buf_unref>
	if (!req) {
    8fcc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8fd0:	4632      	mov	r2, r6
    8fd2:	210e      	movs	r1, #14
    8fd4:	4620      	mov	r0, r4
    8fd6:	f7ff fd1d 	bl	8a14 <send_err_rsp.part.0>
	return 0;
    8fda:	2000      	movs	r0, #0
}
    8fdc:	b005      	add	sp, #20
    8fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    8fe2:	200e      	movs	r0, #14
    8fe4:	e7fa      	b.n	8fdc <att_read_mult_req+0x78>
    8fe6:	bf00      	nop
    8fe8:	0002504b 	.word	0x0002504b
    8fec:	00025341 	.word	0x00025341

00008ff0 <att_read_rsp>:
{
    8ff0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8ff4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    8ff8:	4605      	mov	r5, r0
    8ffa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    8ffc:	4640      	mov	r0, r8
    8ffe:	2101      	movs	r1, #1
{
    9000:	4614      	mov	r4, r2
    9002:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    9004:	f01c fe9b 	bl	25d3e <bt_gatt_change_aware>
    9008:	b390      	cbz	r0, 9070 <att_read_rsp+0x80>
	if (!handle) {
    900a:	b39e      	cbz	r6, 9074 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    900c:	2210      	movs	r2, #16
    900e:	2100      	movs	r1, #0
    9010:	4668      	mov	r0, sp
    9012:	f022 fbef 	bl	2b7f4 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9016:	2200      	movs	r2, #0
    9018:	4621      	mov	r1, r4
    901a:	4640      	mov	r0, r8
    901c:	f7ff fe32 	bl	8c84 <bt_att_create_pdu>
    9020:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9022:	b348      	cbz	r0, 9078 <att_read_rsp+0x88>
	data.offset = offset;
    9024:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9028:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    902c:	2301      	movs	r3, #1
    902e:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9032:	4a12      	ldr	r2, [pc, #72]	; (907c <att_read_rsp+0x8c>)
	data.chan = chan;
    9034:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9036:	466b      	mov	r3, sp
    9038:	4631      	mov	r1, r6
    903a:	4630      	mov	r0, r6
    903c:	f01b ff5a 	bl	24ef4 <bt_gatt_foreach_attr>
	if (data.err) {
    9040:	f89d 400c 	ldrb.w	r4, [sp, #12]
    9044:	b174      	cbz	r4, 9064 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    9046:	9802      	ldr	r0, [sp, #8]
    9048:	f00f f9ec 	bl	18424 <net_buf_unref>
	if (!req) {
    904c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    9050:	4632      	mov	r2, r6
    9052:	4639      	mov	r1, r7
    9054:	4628      	mov	r0, r5
    9056:	f7ff fcdd 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    905a:	2400      	movs	r4, #0
}
    905c:	4620      	mov	r0, r4
    905e:	b004      	add	sp, #16
    9060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9064:	4a06      	ldr	r2, [pc, #24]	; (9080 <att_read_rsp+0x90>)
    9066:	9902      	ldr	r1, [sp, #8]
    9068:	4628      	mov	r0, r5
    906a:	f01b ff75 	bl	24f58 <bt_att_chan_send_rsp>
	return 0;
    906e:	e7f5      	b.n	905c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9070:	2412      	movs	r4, #18
    9072:	e7f3      	b.n	905c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    9074:	2401      	movs	r4, #1
    9076:	e7f1      	b.n	905c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9078:	240e      	movs	r4, #14
    907a:	e7ef      	b.n	905c <att_read_rsp+0x6c>
    907c:	00025341 	.word	0x00025341
    9080:	0002504b 	.word	0x0002504b

00009084 <att_read_type_req>:
{
    9084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9088:	7b0c      	ldrb	r4, [r1, #12]
    908a:	3c04      	subs	r4, #4
    908c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    908e:	2c02      	cmp	r4, #2
{
    9090:	4605      	mov	r5, r0
    9092:	b08c      	sub	sp, #48	; 0x30
    9094:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    9096:	d001      	beq.n	909c <att_read_type_req+0x18>
    9098:	2c10      	cmp	r4, #16
    909a:	d150      	bne.n	913e <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    909c:	2104      	movs	r1, #4
    909e:	3008      	adds	r0, #8
    90a0:	f01c ff30 	bl	25f04 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    90a4:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    90a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    90aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    90ac:	1d01      	adds	r1, r0, #4
    90ae:	4622      	mov	r2, r4
    90b0:	4640      	mov	r0, r8
    90b2:	f01b fb85 	bl	247c0 <bt_uuid_create>
    90b6:	b188      	cbz	r0, 90dc <att_read_type_req+0x58>
	if (!start || !end) {
    90b8:	b19e      	cbz	r6, 90e2 <att_read_type_req+0x5e>
    90ba:	b18f      	cbz	r7, 90e0 <att_read_type_req+0x5c>
	if (start > end) {
    90bc:	42b7      	cmp	r7, r6
    90be:	d310      	bcc.n	90e2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    90c0:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    90c2:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    90c4:	2100      	movs	r1, #0
    90c6:	eb0d 0002 	add.w	r0, sp, r2
    90ca:	f022 fb93 	bl	2b7f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    90ce:	2201      	movs	r2, #1
    90d0:	2109      	movs	r1, #9
    90d2:	4620      	mov	r0, r4
    90d4:	f7ff fdd6 	bl	8c84 <bt_att_create_pdu>
    90d8:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    90da:	b968      	cbnz	r0, 90f8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    90dc:	240e      	movs	r4, #14
    90de:	e007      	b.n	90f0 <att_read_type_req+0x6c>
			*err = 0U;
    90e0:	463e      	mov	r6, r7
	if (!req) {
    90e2:	2301      	movs	r3, #1
    90e4:	4632      	mov	r2, r6
    90e6:	2108      	movs	r1, #8
    90e8:	4628      	mov	r0, r5
    90ea:	f7ff fc93 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    90ee:	2400      	movs	r4, #0
}
    90f0:	4620      	mov	r0, r4
    90f2:	b00c      	add	sp, #48	; 0x30
    90f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    90f8:	2101      	movs	r1, #1
    90fa:	3008      	adds	r0, #8
	data.uuid = uuid;
    90fc:	e9cd 5806 	strd	r5, r8, [sp, #24]
    9100:	f01c fece 	bl	25ea0 <net_buf_simple_add>
	data.rsp->len = 0U;
    9104:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9108:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    910a:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    910c:	4a0d      	ldr	r2, [pc, #52]	; (9144 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    910e:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9112:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9114:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9118:	4630      	mov	r0, r6
    911a:	ab06      	add	r3, sp, #24
    911c:	f01b feea 	bl	24ef4 <bt_gatt_foreach_attr>
	if (data.err) {
    9120:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    9124:	b12c      	cbz	r4, 9132 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    9126:	9808      	ldr	r0, [sp, #32]
    9128:	f00f f97c 	bl	18424 <net_buf_unref>
	if (!req) {
    912c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    9130:	e7d8      	b.n	90e4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9132:	4a05      	ldr	r2, [pc, #20]	; (9148 <att_read_type_req+0xc4>)
    9134:	9908      	ldr	r1, [sp, #32]
    9136:	4628      	mov	r0, r5
    9138:	f01b ff0e 	bl	24f58 <bt_att_chan_send_rsp>
	return 0;
    913c:	e7d8      	b.n	90f0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    913e:	2404      	movs	r4, #4
    9140:	e7d6      	b.n	90f0 <att_read_type_req+0x6c>
    9142:	bf00      	nop
    9144:	000087bd 	.word	0x000087bd
    9148:	0002504b 	.word	0x0002504b

0000914c <att_find_type_req>:
{
    914c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9150:	4688      	mov	r8, r1
    9152:	b086      	sub	sp, #24
    9154:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    9156:	2106      	movs	r1, #6
    9158:	f108 0008 	add.w	r0, r8, #8
    915c:	f01c fed2 	bl	25f04 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9160:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    9162:	b317      	cbz	r7, 91aa <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9164:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    9168:	f1b9 0f00 	cmp.w	r9, #0
    916c:	d01c      	beq.n	91a8 <att_find_type_req+0x5c>
	if (start > end) {
    916e:	454f      	cmp	r7, r9
    9170:	d81b      	bhi.n	91aa <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    9172:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9174:	f8ad 3002 	strh.w	r3, [sp, #2]
    9178:	2400      	movs	r4, #0
    917a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    917e:	a901      	add	r1, sp, #4
    9180:	4668      	mov	r0, sp
	value = buf->data;
    9182:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    9186:	f88d 4000 	strb.w	r4, [sp]
    918a:	f88d 4004 	strb.w	r4, [sp, #4]
    918e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9192:	f01b faeb 	bl	2476c <bt_uuid_cmp>
    9196:	4606      	mov	r6, r0
    9198:	b190      	cbz	r0, 91c0 <att_find_type_req+0x74>
	if (!req) {
    919a:	230a      	movs	r3, #10
    919c:	463a      	mov	r2, r7
    919e:	2106      	movs	r1, #6
    91a0:	4628      	mov	r0, r5
    91a2:	f7ff fc37 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    91a6:	e007      	b.n	91b8 <att_find_type_req+0x6c>
			*err = 0U;
    91a8:	464f      	mov	r7, r9
	if (!req) {
    91aa:	2301      	movs	r3, #1
    91ac:	463a      	mov	r2, r7
    91ae:	2106      	movs	r1, #6
    91b0:	4628      	mov	r0, r5
    91b2:	f7ff fc2f 	bl	8a14 <send_err_rsp.part.0>
		return 0;
    91b6:	2400      	movs	r4, #0
}
    91b8:	4620      	mov	r0, r4
    91ba:	b006      	add	sp, #24
    91bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    91c0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    91c4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    91c8:	4601      	mov	r1, r0
    91ca:	2214      	movs	r2, #20
    91cc:	a801      	add	r0, sp, #4
    91ce:	f022 fb11 	bl	2b7f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    91d2:	4632      	mov	r2, r6
    91d4:	2107      	movs	r1, #7
    91d6:	4640      	mov	r0, r8
    91d8:	f7ff fd54 	bl	8c84 <bt_att_create_pdu>
    91dc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    91de:	b1e0      	cbz	r0, 921a <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    91e0:	230a      	movs	r3, #10
    91e2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    91e6:	4a0e      	ldr	r2, [pc, #56]	; (9220 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    91e8:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    91ec:	ab01      	add	r3, sp, #4
    91ee:	4649      	mov	r1, r9
    91f0:	4638      	mov	r0, r7
	data.value = value;
    91f2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    91f6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    91f8:	f01b fe7c 	bl	24ef4 <bt_gatt_foreach_attr>
	if (data.err) {
    91fc:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9200:	b12c      	cbz	r4, 920e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    9202:	9802      	ldr	r0, [sp, #8]
    9204:	f00f f90e 	bl	18424 <net_buf_unref>
	if (!req) {
    9208:	f89d 3015 	ldrb.w	r3, [sp, #21]
    920c:	e7ce      	b.n	91ac <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    920e:	4a05      	ldr	r2, [pc, #20]	; (9224 <att_find_type_req+0xd8>)
    9210:	9902      	ldr	r1, [sp, #8]
    9212:	4628      	mov	r0, r5
    9214:	f01b fea0 	bl	24f58 <bt_att_chan_send_rsp>
	return 0;
    9218:	e7ce      	b.n	91b8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    921a:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    921c:	e7cc      	b.n	91b8 <att_find_type_req+0x6c>
    921e:	bf00      	nop
    9220:	0000834d 	.word	0x0000834d
    9224:	0002504b 	.word	0x0002504b

00009228 <att_find_info_req>:
{
    9228:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    922a:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    922c:	881e      	ldrh	r6, [r3, #0]
{
    922e:	b085      	sub	sp, #20
    9230:	4605      	mov	r5, r0
	if (!start || !end) {
    9232:	b19e      	cbz	r6, 925c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    9234:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    9236:	b184      	cbz	r4, 925a <att_find_info_req+0x32>
	if (start > end) {
    9238:	42b4      	cmp	r4, r6
    923a:	d30f      	bcc.n	925c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    923c:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    923e:	2210      	movs	r2, #16
    9240:	2100      	movs	r1, #0
    9242:	4668      	mov	r0, sp
    9244:	f022 fad6 	bl	2b7f4 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9248:	2200      	movs	r2, #0
    924a:	2105      	movs	r1, #5
    924c:	4638      	mov	r0, r7
    924e:	f7ff fd19 	bl	8c84 <bt_att_create_pdu>
    9252:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9254:	b958      	cbnz	r0, 926e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9256:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9258:	e007      	b.n	926a <att_find_info_req+0x42>
			*err = 0U;
    925a:	4626      	mov	r6, r4
	if (!req) {
    925c:	2301      	movs	r3, #1
    925e:	4632      	mov	r2, r6
    9260:	2104      	movs	r1, #4
    9262:	4628      	mov	r0, r5
    9264:	f7ff fbd6 	bl	8a14 <send_err_rsp.part.0>
	return 0;
    9268:	2000      	movs	r0, #0
}
    926a:	b005      	add	sp, #20
    926c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    926e:	4621      	mov	r1, r4
    9270:	4a09      	ldr	r2, [pc, #36]	; (9298 <att_find_info_req+0x70>)
	data.chan = chan;
    9272:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9274:	466b      	mov	r3, sp
    9276:	4630      	mov	r0, r6
    9278:	f01b fe3c 	bl	24ef4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    927c:	9c02      	ldr	r4, [sp, #8]
    927e:	b924      	cbnz	r4, 928a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9280:	9801      	ldr	r0, [sp, #4]
    9282:	f00f f8cf 	bl	18424 <net_buf_unref>
	if (!req) {
    9286:	230a      	movs	r3, #10
    9288:	e7e9      	b.n	925e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    928a:	4a04      	ldr	r2, [pc, #16]	; (929c <att_find_info_req+0x74>)
    928c:	9901      	ldr	r1, [sp, #4]
    928e:	4628      	mov	r0, r5
    9290:	f01b fe62 	bl	24f58 <bt_att_chan_send_rsp>
    9294:	e7e8      	b.n	9268 <att_find_info_req+0x40>
    9296:	bf00      	nop
    9298:	00024fa9 	.word	0x00024fa9
    929c:	0002504b 	.word	0x0002504b

000092a0 <att_mtu_req>:
{
    92a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    92a2:	6803      	ldr	r3, [r0, #0]
{
    92a4:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    92a6:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    92a8:	f3bf 8f5b 	dmb	ish
    92ac:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    92b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    92b4:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    92b8:	071b      	lsls	r3, r3, #28
    92ba:	d41b      	bmi.n	92f4 <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
    92bc:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    92be:	881b      	ldrh	r3, [r3, #0]
    92c0:	2b16      	cmp	r3, #22
    92c2:	d919      	bls.n	92f8 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    92c4:	2202      	movs	r2, #2
    92c6:	2103      	movs	r1, #3
    92c8:	f7ff fcdc 	bl	8c84 <bt_att_create_pdu>
	if (!pdu) {
    92cc:	4606      	mov	r6, r0
    92ce:	b1a8      	cbz	r0, 92fc <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
    92d0:	2102      	movs	r1, #2
    92d2:	3008      	adds	r0, #8
    92d4:	f01c fde4 	bl	25ea0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    92d8:	2717      	movs	r7, #23
    92da:	7007      	strb	r7, [r0, #0]
    92dc:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    92de:	4a08      	ldr	r2, [pc, #32]	; (9300 <att_mtu_req+0x60>)
    92e0:	4628      	mov	r0, r5
    92e2:	4631      	mov	r1, r6
    92e4:	f01b fe38 	bl	24f58 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    92e8:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    92ec:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
	return 0;
    92f0:	4620      	mov	r0, r4
}
    92f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    92f4:	2006      	movs	r0, #6
    92f6:	e7fc      	b.n	92f2 <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
    92f8:	2004      	movs	r0, #4
    92fa:	e7fa      	b.n	92f2 <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
    92fc:	200e      	movs	r0, #14
    92fe:	e7f8      	b.n	92f2 <att_mtu_req+0x52>
    9300:	0002504b 	.word	0x0002504b

00009304 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9304:	b513      	push	{r0, r1, r4, lr}
    9306:	4602      	mov	r2, r0
    9308:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    930a:	4808      	ldr	r0, [pc, #32]	; (932c <bt_att_req_alloc+0x28>)
    930c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    930e:	2400      	movs	r4, #0
    9310:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9312:	f016 f9f3 	bl	1f6fc <k_mem_slab_alloc>
    9316:	4601      	mov	r1, r0
    9318:	b930      	cbnz	r0, 9328 <bt_att_req_alloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
    931a:	9801      	ldr	r0, [sp, #4]
    931c:	2218      	movs	r2, #24
    931e:	f022 fa69 	bl	2b7f4 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    9322:	9801      	ldr	r0, [sp, #4]
}
    9324:	b002      	add	sp, #8
    9326:	bd10      	pop	{r4, pc}
		return NULL;
    9328:	4620      	mov	r0, r4
    932a:	e7fb      	b.n	9324 <bt_att_req_alloc+0x20>
    932c:	20000b90 	.word	0x20000b90

00009330 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9330:	b507      	push	{r0, r1, r2, lr}
    9332:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    9334:	a901      	add	r1, sp, #4
    9336:	4803      	ldr	r0, [pc, #12]	; (9344 <bt_att_req_free+0x14>)
    9338:	f016 fa12 	bl	1f760 <k_mem_slab_free>
}
    933c:	b003      	add	sp, #12
    933e:	f85d fb04 	ldr.w	pc, [sp], #4
    9342:	bf00      	nop
    9344:	20000b90 	.word	0x20000b90

00009348 <att_handle_rsp>:
{
    9348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    934c:	4605      	mov	r5, r0
    934e:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    9350:	30e0      	adds	r0, #224	; 0xe0
{
    9352:	4689      	mov	r9, r1
    9354:	4692      	mov	sl, r2
    9356:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    9358:	f021 ffec 	bl	2b334 <k_delayed_work_cancel>
	if (!chan->req) {
    935c:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    9360:	bb64      	cbnz	r4, 93bc <att_handle_rsp+0x74>
    9362:	4932      	ldr	r1, [pc, #200]	; (942c <att_handle_rsp+0xe4>)
    9364:	4b32      	ldr	r3, [pc, #200]	; (9430 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    9366:	4833      	ldr	r0, [pc, #204]	; (9434 <att_handle_rsp+0xec>)
    9368:	1ac9      	subs	r1, r1, r3
    936a:	08c9      	lsrs	r1, r1, #3
    936c:	0189      	lsls	r1, r1, #6
    936e:	f041 0102 	orr.w	r1, r1, #2
    9372:	f01a f95d 	bl	23630 <log_0>
	att_process(chan->att);
    9376:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    937a:	f10b 0004 	add.w	r0, fp, #4
    937e:	f01b fd30 	bl	24de2 <sys_slist_get>
	if (!node) {
    9382:	4607      	mov	r7, r0
    9384:	2800      	cmp	r0, #0
    9386:	d039      	beq.n	93fc <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9388:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    938c:	b15a      	cbz	r2, 93a6 <att_handle_rsp+0x5e>
    938e:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    9392:	d008      	beq.n	93a6 <att_handle_rsp+0x5e>
    9394:	6816      	ldr	r6, [r2, #0]
    9396:	b10e      	cbz	r6, 939c <att_handle_rsp+0x54>
    9398:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    939c:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    93a0:	b33a      	cbz	r2, 93f2 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    93a2:	2e00      	cmp	r6, #0
    93a4:	d137      	bne.n	9416 <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    93a6:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    93aa:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    93ac:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    93b0:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    93b4:	bb12      	cbnz	r2, 93fc <att_handle_rsp+0xb4>
	list->tail = node;
    93b6:	f8cb 7008 	str.w	r7, [fp, #8]
}
    93ba:	e01f      	b.n	93fc <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    93bc:	4b1e      	ldr	r3, [pc, #120]	; (9438 <att_handle_rsp+0xf0>)
    93be:	429c      	cmp	r4, r3
    93c0:	d103      	bne.n	93ca <att_handle_rsp+0x82>
		chan->req = NULL;
    93c2:	2400      	movs	r4, #0
    93c4:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    93c8:	e7d5      	b.n	9376 <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    93ca:	6920      	ldr	r0, [r4, #16]
    93cc:	b128      	cbz	r0, 93da <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    93ce:	f00f f829 	bl	18424 <net_buf_unref>
		chan->req->buf = NULL;
    93d2:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    93d6:	2200      	movs	r2, #0
    93d8:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    93da:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
    93de:	2600      	movs	r6, #0
	func = chan->req->func;
    93e0:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    93e2:	6943      	ldr	r3, [r0, #20]
	chan->req->func = NULL;
    93e4:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    93e6:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    93e8:	f01c f83a 	bl	25460 <att_req_destroy>
	chan->req = NULL;
    93ec:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    93f0:	e7c1      	b.n	9376 <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    93f2:	4639      	mov	r1, r7
    93f4:	f01b fef6 	bl	251e4 <bt_att_chan_req_send>
    93f8:	2800      	cmp	r0, #0
    93fa:	dbd2      	blt.n	93a2 <att_handle_rsp+0x5a>
	if (func) {
    93fc:	b13c      	cbz	r4, 940e <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    93fe:	9b03      	ldr	r3, [sp, #12]
    9400:	6828      	ldr	r0, [r5, #0]
    9402:	9300      	str	r3, [sp, #0]
    9404:	6800      	ldr	r0, [r0, #0]
    9406:	4653      	mov	r3, sl
    9408:	464a      	mov	r2, r9
    940a:	4641      	mov	r1, r8
    940c:	47a0      	blx	r4
}
    940e:	2000      	movs	r0, #0
    9410:	b005      	add	sp, #20
    9412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    9416:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    941a:	d004      	beq.n	9426 <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    941c:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9420:	b10a      	cbz	r2, 9426 <att_handle_rsp+0xde>
    9422:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    9426:	4630      	mov	r0, r6
    9428:	4616      	mov	r6, r2
    942a:	e7b7      	b.n	939c <att_handle_rsp+0x54>
    942c:	0002bfb0 	.word	0x0002bfb0
    9430:	0002bfa8 	.word	0x0002bfa8
    9434:	0002f5c3 	.word	0x0002f5c3
    9438:	200029d0 	.word	0x200029d0

0000943c <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    943c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
{
    9440:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
    9442:	b18b      	cbz	r3, 9468 <att_error_rsp+0x2c>
    9444:	4a09      	ldr	r2, [pc, #36]	; (946c <att_error_rsp+0x30>)
    9446:	4293      	cmp	r3, r2
    9448:	d00e      	beq.n	9468 <att_error_rsp+0x2c>
	if (chan->req->buf) {
    944a:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
    944c:	688c      	ldr	r4, [r1, #8]
	if (chan->req->buf) {
    944e:	b12a      	cbz	r2, 945c <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
    9450:	899d      	ldrh	r5, [r3, #12]
    9452:	6911      	ldr	r1, [r2, #16]
	buf->len = state->len;
    9454:	89db      	ldrh	r3, [r3, #14]
    9456:	8193      	strh	r3, [r2, #12]
	buf->data = buf->__buf + state->offset;
    9458:	4429      	add	r1, r5
    945a:	6091      	str	r1, [r2, #8]
	err = rsp->error;
    945c:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(chan, NULL, 0, err);
    945e:	2200      	movs	r2, #0
}
    9460:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
    9462:	4611      	mov	r1, r2
    9464:	f7ff bf70 	b.w	9348 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    9468:	230e      	movs	r3, #14
    946a:	e7f8      	b.n	945e <att_error_rsp+0x22>
    946c:	200029d0 	.word	0x200029d0

00009470 <bt_att_disconnected>:
{
    9470:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    9472:	f850 6c08 	ldr.w	r6, [r0, #-8]
{
    9476:	b085      	sub	sp, #20
    9478:	4604      	mov	r4, r0
	if (!att_chan->att) {
    947a:	2e00      	cmp	r6, #0
    947c:	d042      	beq.n	9504 <bt_att_disconnected+0x94>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    947e:	f500 7192 	add.w	r1, r0, #292	; 0x124
    9482:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    9486:	f01b fcb6 	bl	24df6 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
    948a:	f504 7584 	add.w	r5, r4, #264	; 0x108
	z_impl_k_sem_give(sem);
    948e:	4628      	mov	r0, r5
    9490:	f016 fe24 	bl	200dc <z_impl_k_sem_give>
    9494:	4628      	mov	r0, r5
    9496:	f016 fe21 	bl	200dc <z_impl_k_sem_give>
    949a:	4628      	mov	r0, r5
    949c:	f016 fe1e 	bl	200dc <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    94a0:	f1a4 0508 	sub.w	r5, r4, #8
    94a4:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    94a8:	2200      	movs	r2, #0
    94aa:	2300      	movs	r3, #0
    94ac:	4638      	mov	r0, r7
    94ae:	f01c fca0 	bl	25df2 <net_buf_get>
    94b2:	4602      	mov	r2, r0
    94b4:	bb40      	cbnz	r0, 9508 <bt_att_disconnected+0x98>
	if (chan->req) {
    94b6:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    94ba:	b123      	cbz	r3, 94c6 <bt_att_disconnected+0x56>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    94bc:	4601      	mov	r1, r0
    94be:	230e      	movs	r3, #14
    94c0:	4628      	mov	r0, r5
    94c2:	f7ff ff41 	bl	9348 <att_handle_rsp>
	chan->att = NULL;
    94c6:	2300      	movs	r3, #0
    94c8:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    94cc:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    94ce:	b9cb      	cbnz	r3, 9504 <bt_att_disconnected+0x94>
	att_reset(att);
    94d0:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    94d2:	9803      	ldr	r0, [sp, #12]
    94d4:	2200      	movs	r2, #0
    94d6:	2300      	movs	r3, #0
    94d8:	3024      	adds	r0, #36	; 0x24
    94da:	f01c fc8a 	bl	25df2 <net_buf_get>
    94de:	b9b0      	cbnz	r0, 950e <bt_att_disconnected+0x9e>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    94e0:	9803      	ldr	r0, [sp, #12]
    94e2:	2200      	movs	r2, #0
    94e4:	2300      	movs	r3, #0
    94e6:	300c      	adds	r0, #12
    94e8:	f01c fc83 	bl	25df2 <net_buf_get>
    94ec:	b990      	cbnz	r0, 9514 <bt_att_disconnected+0xa4>
	att->conn = NULL;
    94ee:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    94f0:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    94f2:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    94f4:	b98e      	cbnz	r6, 951a <bt_att_disconnected+0xaa>
	k_mem_slab_free(&att_slab, (void **)&att);
    94f6:	4815      	ldr	r0, [pc, #84]	; (954c <bt_att_disconnected+0xdc>)
    94f8:	a903      	add	r1, sp, #12
    94fa:	f016 f931 	bl	1f760 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    94fe:	6820      	ldr	r0, [r4, #0]
    9500:	f001 ff00 	bl	b304 <bt_gatt_disconnected>
}
    9504:	b005      	add	sp, #20
    9506:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    9508:	f00e ff8c 	bl	18424 <net_buf_unref>
    950c:	e7cc      	b.n	94a8 <bt_att_disconnected+0x38>
		net_buf_unref(buf);
    950e:	f00e ff89 	bl	18424 <net_buf_unref>
    9512:	e7de      	b.n	94d2 <bt_att_disconnected+0x62>
		net_buf_unref(buf);
    9514:	f00e ff86 	bl	18424 <net_buf_unref>
    9518:	e7e2      	b.n	94e0 <bt_att_disconnected+0x70>
	return node->next;
    951a:	6835      	ldr	r5, [r6, #0]
    951c:	2d00      	cmp	r5, #0
    951e:	bf38      	it	cc
    9520:	2500      	movcc	r5, #0
		if (req->func) {
    9522:	6877      	ldr	r7, [r6, #4]
    9524:	b137      	cbz	r7, 9534 <bt_att_disconnected+0xc4>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    9526:	6973      	ldr	r3, [r6, #20]
    9528:	9300      	str	r3, [sp, #0]
    952a:	2300      	movs	r3, #0
    952c:	461a      	mov	r2, r3
    952e:	210e      	movs	r1, #14
    9530:	4618      	mov	r0, r3
    9532:	47b8      	blx	r7
		att_req_destroy(req);
    9534:	4630      	mov	r0, r6
    9536:	f01b ff93 	bl	25460 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    953a:	2d00      	cmp	r5, #0
    953c:	d0db      	beq.n	94f6 <bt_att_disconnected+0x86>
    953e:	682b      	ldr	r3, [r5, #0]
    9540:	2b00      	cmp	r3, #0
    9542:	bf38      	it	cc
    9544:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9546:	462e      	mov	r6, r5
    9548:	461d      	mov	r5, r3
    954a:	e7ea      	b.n	9522 <bt_att_disconnected+0xb2>
    954c:	20000b58 	.word	0x20000b58

00009550 <att_timeout>:
    9550:	4b08      	ldr	r3, [pc, #32]	; (9574 <att_timeout+0x24>)
    9552:	4909      	ldr	r1, [pc, #36]	; (9578 <att_timeout+0x28>)
{
    9554:	b510      	push	{r4, lr}
    9556:	1ac9      	subs	r1, r1, r3
    9558:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    955a:	0189      	lsls	r1, r1, #6
{
    955c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    955e:	f041 0101 	orr.w	r1, r1, #1
    9562:	4806      	ldr	r0, [pc, #24]	; (957c <att_timeout+0x2c>)
    9564:	f01a f864 	bl	23630 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    9568:	f1a4 00d8 	sub.w	r0, r4, #216	; 0xd8
}
    956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    9570:	f7ff bf7e 	b.w	9470 <bt_att_disconnected>
    9574:	0002bfa8 	.word	0x0002bfa8
    9578:	0002bfb0 	.word	0x0002bfb0
    957c:	0002f5da 	.word	0x0002f5da

00009580 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    9580:	b510      	push	{r4, lr}
    9582:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    9584:	b348      	cbz	r0, 95da <bt_att_req_cancel+0x5a>
    9586:	b341      	cbz	r1, 95da <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    9588:	f7ff f808 	bl	859c <att_get>
	if (!att) {
    958c:	b328      	cbz	r0, 95da <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    958e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9590:	b15b      	cbz	r3, 95aa <bt_att_req_cancel+0x2a>
    9592:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    9596:	d008      	beq.n	95aa <bt_att_req_cancel+0x2a>
    9598:	681b      	ldr	r3, [r3, #0]
    959a:	b10b      	cbz	r3, 95a0 <bt_att_req_cancel+0x20>
    959c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    95a0:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    95a4:	4294      	cmp	r4, r2
    95a6:	d005      	beq.n	95b4 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    95a8:	b963      	cbnz	r3, 95c4 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    95aa:	4621      	mov	r1, r4
    95ac:	3004      	adds	r0, #4
    95ae:	f01b fc22 	bl	24df6 <sys_slist_find_and_remove>
    95b2:	e002      	b.n	95ba <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    95b4:	4b09      	ldr	r3, [pc, #36]	; (95dc <bt_att_req_cancel+0x5c>)
    95b6:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    95ba:	4620      	mov	r0, r4
}
    95bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    95c0:	f01b bf4e 	b.w	25460 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    95c4:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    95c8:	d004      	beq.n	95d4 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    95ca:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    95ce:	b10a      	cbz	r2, 95d4 <bt_att_req_cancel+0x54>
    95d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    95d4:	4619      	mov	r1, r3
    95d6:	4613      	mov	r3, r2
    95d8:	e7e2      	b.n	95a0 <bt_att_req_cancel+0x20>
}
    95da:	bd10      	pop	{r4, pc}
    95dc:	200029d0 	.word	0x200029d0

000095e0 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    95e0:	490a      	ldr	r1, [pc, #40]	; (960c <db_hash_store+0x2c>)
    95e2:	480b      	ldr	r0, [pc, #44]	; (9610 <db_hash_store+0x30>)
{
    95e4:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    95e6:	2210      	movs	r2, #16
    95e8:	f7f9 ff9c 	bl	3524 <settings_save_one>
	if (err) {
    95ec:	4601      	mov	r1, r0
    95ee:	b158      	cbz	r0, 9608 <db_hash_store+0x28>
    95f0:	4b08      	ldr	r3, [pc, #32]	; (9614 <db_hash_store+0x34>)
    95f2:	4a09      	ldr	r2, [pc, #36]	; (9618 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    95f4:	4809      	ldr	r0, [pc, #36]	; (961c <db_hash_store+0x3c>)
    95f6:	1ad2      	subs	r2, r2, r3
    95f8:	08d2      	lsrs	r2, r2, #3
    95fa:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    95fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    9600:	f042 0201 	orr.w	r2, r2, #1
    9604:	f01a b821 	b.w	2364a <log_1>
}
    9608:	bd08      	pop	{r3, pc}
    960a:	bf00      	nop
    960c:	20008605 	.word	0x20008605
    9610:	0002f5ed 	.word	0x0002f5ed
    9614:	0002bfa8 	.word	0x0002bfa8
    9618:	0002c060 	.word	0x0002c060
    961c:	0002f5f5 	.word	0x0002f5f5

00009620 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    9620:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9622:	490b      	ldr	r1, [pc, #44]	; (9650 <db_hash_set+0x30>)
{
    9624:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    9626:	4618      	mov	r0, r3
    9628:	2210      	movs	r2, #16
    962a:	47a0      	blx	r4
	if (len < 0) {
    962c:	1e04      	subs	r4, r0, #0
    962e:	da0c      	bge.n	964a <db_hash_set+0x2a>
    9630:	4a08      	ldr	r2, [pc, #32]	; (9654 <db_hash_set+0x34>)
    9632:	4b09      	ldr	r3, [pc, #36]	; (9658 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    9634:	4809      	ldr	r0, [pc, #36]	; (965c <db_hash_set+0x3c>)
    9636:	1ad2      	subs	r2, r2, r3
    9638:	08d2      	lsrs	r2, r2, #3
    963a:	0192      	lsls	r2, r2, #6
    963c:	f042 0201 	orr.w	r2, r2, #1
    9640:	4621      	mov	r1, r4
    9642:	f01a f802 	bl	2364a <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    9646:	4620      	mov	r0, r4
    9648:	bd10      	pop	{r4, pc}
	return 0;
    964a:	2400      	movs	r4, #0
    964c:	e7fb      	b.n	9646 <db_hash_set+0x26>
    964e:	bf00      	nop
    9650:	20008615 	.word	0x20008615
    9654:	0002c060 	.word	0x0002c060
    9658:	0002bfa8 	.word	0x0002bfa8
    965c:	0002f61b 	.word	0x0002f61b

00009660 <find_cf_cfg>:
{
    9660:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9662:	4d0d      	ldr	r5, [pc, #52]	; (9698 <find_cf_cfg+0x38>)
		if (!conn) {
    9664:	4604      	mov	r4, r0
    9666:	b960      	cbnz	r0, 9682 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9668:	9000      	str	r0, [sp, #0]
    966a:	4669      	mov	r1, sp
    966c:	f8cd 0003 	str.w	r0, [sp, #3]
    9670:	1c68      	adds	r0, r5, #1
    9672:	f01c f84c 	bl	2570e <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    9676:	2800      	cmp	r0, #0
    9678:	bf08      	it	eq
    967a:	462c      	moveq	r4, r5
}
    967c:	4620      	mov	r0, r4
    967e:	b003      	add	sp, #12
    9680:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9682:	462a      	mov	r2, r5
    9684:	f812 1b01 	ldrb.w	r1, [r2], #1
    9688:	f01b fa83 	bl	24b92 <bt_conn_is_peer_addr_le>
    968c:	2800      	cmp	r0, #0
	return NULL;
    968e:	bf14      	ite	ne
    9690:	462c      	movne	r4, r5
    9692:	2400      	moveq	r4, #0
    9694:	e7f2      	b.n	967c <find_cf_cfg+0x1c>
    9696:	bf00      	nop
    9698:	200029e8 	.word	0x200029e8

0000969c <find_sc_cfg>:
{
    969c:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    969e:	4c06      	ldr	r4, [pc, #24]	; (96b8 <find_sc_cfg+0x1c>)
    96a0:	7823      	ldrb	r3, [r4, #0]
    96a2:	4283      	cmp	r3, r0
    96a4:	d103      	bne.n	96ae <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    96a6:	1c60      	adds	r0, r4, #1
    96a8:	f01c f831 	bl	2570e <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    96ac:	b108      	cbz	r0, 96b2 <find_sc_cfg+0x16>
	return NULL;
    96ae:	2000      	movs	r0, #0
}
    96b0:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    96b2:	4620      	mov	r0, r4
    96b4:	e7fc      	b.n	96b0 <find_sc_cfg+0x14>
    96b6:	bf00      	nop
    96b8:	200080e6 	.word	0x200080e6

000096bc <gatt_sub_find>:
{
    96bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    96be:	4d0d      	ldr	r5, [pc, #52]	; (96f4 <gatt_sub_find+0x38>)
		if (!conn) {
    96c0:	4604      	mov	r4, r0
    96c2:	b960      	cbnz	r0, 96de <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    96c4:	9000      	str	r0, [sp, #0]
    96c6:	4669      	mov	r1, sp
    96c8:	f8cd 0003 	str.w	r0, [sp, #3]
    96cc:	1c68      	adds	r0, r5, #1
    96ce:	f01c f81e 	bl	2570e <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
    96d2:	2800      	cmp	r0, #0
    96d4:	bf08      	it	eq
    96d6:	462c      	moveq	r4, r5
}
    96d8:	4620      	mov	r0, r4
    96da:	b003      	add	sp, #12
    96dc:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    96de:	462a      	mov	r2, r5
    96e0:	f812 1b01 	ldrb.w	r1, [r2], #1
    96e4:	f01b fa55 	bl	24b92 <bt_conn_is_peer_addr_le>
    96e8:	2800      	cmp	r0, #0
	return NULL;
    96ea:	bf14      	ite	ne
    96ec:	462c      	movne	r4, r5
    96ee:	2400      	moveq	r4, #0
    96f0:	e7f2      	b.n	96d8 <gatt_sub_find+0x1c>
    96f2:	bf00      	nop
    96f4:	20002a18 	.word	0x20002a18

000096f8 <sc_store>:
{
    96f8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    96fa:	4605      	mov	r5, r0
{
    96fc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    96fe:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    9702:	4604      	mov	r4, r0
	if (cfg->id) {
    9704:	b1fa      	cbz	r2, 9746 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9706:	ae02      	add	r6, sp, #8
    9708:	2104      	movs	r1, #4
    970a:	4630      	mov	r0, r6
    970c:	f019 fac6 	bl	22c9c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    9710:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    9712:	4a0e      	ldr	r2, [pc, #56]	; (974c <sc_store+0x54>)
    9714:	462b      	mov	r3, r5
    9716:	2124      	movs	r1, #36	; 0x24
    9718:	a803      	add	r0, sp, #12
    971a:	f7fb fd61 	bl	51e0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    971e:	f104 0108 	add.w	r1, r4, #8
    9722:	2204      	movs	r2, #4
    9724:	a803      	add	r0, sp, #12
    9726:	f7f9 fefd 	bl	3524 <settings_save_one>
	if (err) {
    972a:	4601      	mov	r1, r0
    972c:	b148      	cbz	r0, 9742 <sc_store+0x4a>
    972e:	4a08      	ldr	r2, [pc, #32]	; (9750 <sc_store+0x58>)
    9730:	4b08      	ldr	r3, [pc, #32]	; (9754 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    9732:	4809      	ldr	r0, [pc, #36]	; (9758 <sc_store+0x60>)
    9734:	1ad2      	subs	r2, r2, r3
    9736:	08d2      	lsrs	r2, r2, #3
    9738:	0192      	lsls	r2, r2, #6
    973a:	f042 0201 	orr.w	r2, r2, #1
    973e:	f019 ff84 	bl	2364a <log_1>
}
    9742:	b00c      	add	sp, #48	; 0x30
    9744:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    9746:	9200      	str	r2, [sp, #0]
    9748:	e7e3      	b.n	9712 <sc_store+0x1a>
    974a:	bf00      	nop
    974c:	0002f8fe 	.word	0x0002f8fe
    9750:	0002c060 	.word	0x0002c060
    9754:	0002bfa8 	.word	0x0002bfa8
    9758:	0002f63c 	.word	0x0002f63c

0000975c <ccc_save>:
{
    975c:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    975e:	4b0c      	ldr	r3, [pc, #48]	; (9790 <ccc_save+0x34>)
{
    9760:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9762:	6882      	ldr	r2, [r0, #8]
    9764:	429a      	cmp	r2, r3
{
    9766:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9768:	d10f      	bne.n	978a <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    976a:	7922      	ldrb	r2, [r4, #4]
    976c:	6821      	ldr	r1, [r4, #0]
    976e:	68c0      	ldr	r0, [r0, #12]
    9770:	f01b ffe8 	bl	25744 <ccc_find_cfg>
	if (!cfg) {
    9774:	b148      	cbz	r0, 978a <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    9776:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    977a:	8901      	ldrh	r1, [r0, #8]
    977c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    9780:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    9782:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    9784:	8151      	strh	r1, [r2, #10]
	save->count++;
    9786:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    978a:	2001      	movs	r0, #1
    978c:	bd38      	pop	{r3, r4, r5, pc}
    978e:	bf00      	nop
    9790:	00009795 	.word	0x00009795

00009794 <bt_gatt_attr_write_ccc>:
{
    9794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9798:	461f      	mov	r7, r3
    979a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    979e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    97a2:	4606      	mov	r6, r0
    97a4:	4688      	mov	r8, r1
	if (offset) {
    97a6:	2b00      	cmp	r3, #0
    97a8:	d14a      	bne.n	9840 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
    97aa:	1e7b      	subs	r3, r7, #1
    97ac:	2b01      	cmp	r3, #1
    97ae:	d84a      	bhi.n	9846 <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
    97b0:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    97b2:	7815      	ldrb	r5, [r2, #0]
    97b4:	bf18      	it	ne
    97b6:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    97b8:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    97ba:	bf0c      	ite	eq
    97bc:	b2ad      	uxtheq	r5, r5
    97be:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    97c2:	f01b ffa7 	bl	25714 <find_ccc_cfg>
	if (!cfg) {
    97c6:	4604      	mov	r4, r0
    97c8:	b9e0      	cbnz	r0, 9804 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    97ca:	b915      	cbnz	r5, 97d2 <bt_gatt_attr_write_ccc+0x3e>
			return len;
    97cc:	4638      	mov	r0, r7
}
    97ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    97d2:	4649      	mov	r1, r9
    97d4:	f01b ff9e 	bl	25714 <find_ccc_cfg>
		if (!cfg) {
    97d8:	4604      	mov	r4, r0
    97da:	b960      	cbnz	r0, 97f6 <bt_gatt_attr_write_ccc+0x62>
    97dc:	4b1b      	ldr	r3, [pc, #108]	; (984c <bt_gatt_attr_write_ccc+0xb8>)
    97de:	491c      	ldr	r1, [pc, #112]	; (9850 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    97e0:	481c      	ldr	r0, [pc, #112]	; (9854 <bt_gatt_attr_write_ccc+0xc0>)
    97e2:	1ac9      	subs	r1, r1, r3
    97e4:	08c9      	lsrs	r1, r1, #3
    97e6:	0189      	lsls	r1, r1, #6
    97e8:	f041 0102 	orr.w	r1, r1, #2
    97ec:	f019 ff20 	bl	23630 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    97f0:	f06f 0010 	mvn.w	r0, #16
    97f4:	e7eb      	b.n	97ce <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    97f6:	f106 0188 	add.w	r1, r6, #136	; 0x88
    97fa:	3001      	adds	r0, #1
    97fc:	f01b ffda 	bl	257b4 <bt_addr_le_copy>
		cfg->id = conn->id;
    9800:	7a33      	ldrb	r3, [r6, #8]
    9802:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    9804:	f8d9 3010 	ldr.w	r3, [r9, #16]
    9808:	b973      	cbnz	r3, 9828 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    980a:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    980e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    9810:	42ab      	cmp	r3, r5
    9812:	d003      	beq.n	981c <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    9814:	4649      	mov	r1, r9
    9816:	4640      	mov	r0, r8
    9818:	f01b fee0 	bl	255dc <gatt_ccc_changed>
	if (!value) {
    981c:	2d00      	cmp	r5, #0
    981e:	d1d5      	bne.n	97cc <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    9820:	4620      	mov	r0, r4
    9822:	f01b ffce 	bl	257c2 <clear_ccc_cfg>
    9826:	e7d1      	b.n	97cc <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    9828:	462a      	mov	r2, r5
    982a:	4641      	mov	r1, r8
    982c:	4630      	mov	r0, r6
    982e:	4798      	blx	r3
		if (write < 0) {
    9830:	2800      	cmp	r0, #0
    9832:	dbcc      	blt.n	97ce <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    9834:	1e42      	subs	r2, r0, #1
    9836:	2a01      	cmp	r2, #1
    9838:	d9e7      	bls.n	980a <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    983a:	f06f 000d 	mvn.w	r0, #13
    983e:	e7c6      	b.n	97ce <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9840:	f06f 0006 	mvn.w	r0, #6
    9844:	e7c3      	b.n	97ce <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9846:	f06f 000c 	mvn.w	r0, #12
    984a:	e7c0      	b.n	97ce <bt_gatt_attr_write_ccc+0x3a>
    984c:	0002bfa8 	.word	0x0002bfa8
    9850:	0002c060 	.word	0x0002c060
    9854:	0002f658 	.word	0x0002f658

00009858 <sc_save>:
{
    9858:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    985c:	4680      	mov	r8, r0
    985e:	460f      	mov	r7, r1
    9860:	4616      	mov	r6, r2
    9862:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    9864:	f7ff ff1a 	bl	969c <find_sc_cfg>
	if (!cfg) {
    9868:	4604      	mov	r4, r0
    986a:	b9c8      	cbnz	r0, 98a0 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    986c:	4669      	mov	r1, sp
    986e:	9000      	str	r0, [sp, #0]
    9870:	f8cd 0003 	str.w	r0, [sp, #3]
    9874:	f7ff ff12 	bl	969c <find_sc_cfg>
		if (!cfg) {
    9878:	4604      	mov	r4, r0
    987a:	b960      	cbnz	r0, 9896 <sc_save+0x3e>
    987c:	4915      	ldr	r1, [pc, #84]	; (98d4 <sc_save+0x7c>)
    987e:	4b16      	ldr	r3, [pc, #88]	; (98d8 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
    9880:	4816      	ldr	r0, [pc, #88]	; (98dc <sc_save+0x84>)
    9882:	1ac9      	subs	r1, r1, r3
    9884:	08c9      	lsrs	r1, r1, #3
    9886:	0189      	lsls	r1, r1, #6
    9888:	f041 0101 	orr.w	r1, r1, #1
    988c:	f019 fed0 	bl	23630 <log_0>
}
    9890:	b002      	add	sp, #8
    9892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    9896:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    989a:	4639      	mov	r1, r7
    989c:	f01b ff8a 	bl	257b4 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    98a0:	8922      	ldrh	r2, [r4, #8]
    98a2:	8963      	ldrh	r3, [r4, #10]
    98a4:	b96a      	cbnz	r2, 98c2 <sc_save+0x6a>
    98a6:	b973      	cbnz	r3, 98c6 <sc_save+0x6e>
		cfg->data.start = start;
    98a8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    98aa:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    98ac:	4621      	mov	r1, r4
    98ae:	f811 0b01 	ldrb.w	r0, [r1], #1
    98b2:	f01b f8a3 	bl	249fc <bt_addr_le_is_bonded>
    98b6:	2800      	cmp	r0, #0
    98b8:	d0ea      	beq.n	9890 <sc_save+0x38>
		sc_store(cfg);
    98ba:	4620      	mov	r0, r4
    98bc:	f7ff ff1c 	bl	96f8 <sc_store>
    98c0:	e7e6      	b.n	9890 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    98c2:	4296      	cmp	r6, r2
    98c4:	d302      	bcc.n	98cc <sc_save+0x74>
    98c6:	429d      	cmp	r5, r3
    98c8:	d8ef      	bhi.n	98aa <sc_save+0x52>
    98ca:	e7e1      	b.n	9890 <sc_save+0x38>
	if (*end < new_end) {
    98cc:	429d      	cmp	r5, r3
		*start = new_start;
    98ce:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    98d0:	d9ec      	bls.n	98ac <sc_save+0x54>
    98d2:	e7ea      	b.n	98aa <sc_save+0x52>
    98d4:	0002c060 	.word	0x0002c060
    98d8:	0002bfa8 	.word	0x0002bfa8
    98dc:	0002f672 	.word	0x0002f672

000098e0 <ccc_load>:
{
    98e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    98e2:	4b20      	ldr	r3, [pc, #128]	; (9964 <ccc_load+0x84>)
{
    98e4:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    98e6:	6882      	ldr	r2, [r0, #8]
    98e8:	429a      	cmp	r2, r3
    98ea:	d002      	beq.n	98f2 <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    98ec:	2001      	movs	r0, #1
}
    98ee:	b003      	add	sp, #12
    98f0:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
    98f2:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    98f4:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
    98f6:	b94b      	cbnz	r3, 990c <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    98f8:	7922      	ldrb	r2, [r4, #4]
    98fa:	6821      	ldr	r1, [r4, #0]
    98fc:	4628      	mov	r0, r5
    98fe:	f01b ff21 	bl	25744 <ccc_find_cfg>
	if (!cfg) {
    9902:	2800      	cmp	r0, #0
    9904:	d0f2      	beq.n	98ec <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    9906:	f01b ff5c 	bl	257c2 <clear_ccc_cfg>
    990a:	e7ef      	b.n	98ec <ccc_load+0xc>
	} else if (!load->count) {
    990c:	68e0      	ldr	r0, [r4, #12]
    990e:	2800      	cmp	r0, #0
    9910:	d0ed      	beq.n	98ee <ccc_load+0xe>
	if (load->entry->handle != handle) {
    9912:	881b      	ldrh	r3, [r3, #0]
    9914:	4299      	cmp	r1, r3
    9916:	d00a      	beq.n	992e <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    9918:	d9e8      	bls.n	98ec <ccc_load+0xc>
	load->count--;
    991a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    991c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    991e:	3801      	subs	r0, #1
	load->entry++;
    9920:	3304      	adds	r3, #4
	load->count--;
    9922:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9924:	3800      	subs	r0, #0
	load->entry++;
    9926:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9928:	bf18      	it	ne
    992a:	2001      	movne	r0, #1
    992c:	e7df      	b.n	98ee <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    992e:	7922      	ldrb	r2, [r4, #4]
    9930:	6821      	ldr	r1, [r4, #0]
    9932:	4628      	mov	r0, r5
    9934:	f01b ff06 	bl	25744 <ccc_find_cfg>
	if (!cfg) {
    9938:	4602      	mov	r2, r0
    993a:	b978      	cbnz	r0, 995c <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    993c:	9000      	str	r0, [sp, #0]
    993e:	4669      	mov	r1, sp
    9940:	f8cd 0003 	str.w	r0, [sp, #3]
    9944:	4628      	mov	r0, r5
    9946:	f01b fefd 	bl	25744 <ccc_find_cfg>
		if (!cfg) {
    994a:	4602      	mov	r2, r0
    994c:	2800      	cmp	r0, #0
    994e:	d0e4      	beq.n	991a <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    9950:	6821      	ldr	r1, [r4, #0]
    9952:	3001      	adds	r0, #1
    9954:	f01b ff2e 	bl	257b4 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    9958:	7923      	ldrb	r3, [r4, #4]
    995a:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
    995c:	68a3      	ldr	r3, [r4, #8]
    995e:	885b      	ldrh	r3, [r3, #2]
    9960:	8113      	strh	r3, [r2, #8]
    9962:	e7da      	b.n	991a <ccc_load+0x3a>
    9964:	00009795 	.word	0x00009795

00009968 <sc_set>:
{
    9968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    996c:	460e      	mov	r6, r1
    996e:	b087      	sub	sp, #28
    9970:	4690      	mov	r8, r2
    9972:	4699      	mov	r9, r3
	if (!name) {
    9974:	4607      	mov	r7, r0
    9976:	b978      	cbnz	r0, 9998 <sc_set+0x30>
    9978:	4936      	ldr	r1, [pc, #216]	; (9a54 <sc_set+0xec>)
    997a:	4b37      	ldr	r3, [pc, #220]	; (9a58 <sc_set+0xf0>)
		BT_ERR("Insufficient number of arguments");
    997c:	4837      	ldr	r0, [pc, #220]	; (9a5c <sc_set+0xf4>)
    997e:	1ac9      	subs	r1, r1, r3
    9980:	08c9      	lsrs	r1, r1, #3
    9982:	0189      	lsls	r1, r1, #6
    9984:	f041 0101 	orr.w	r1, r1, #1
    9988:	f019 fe52 	bl	23630 <log_0>
		return -EINVAL;
    998c:	f06f 0515 	mvn.w	r5, #21
}
    9990:	4628      	mov	r0, r5
    9992:	b007      	add	sp, #28
    9994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9998:	a902      	add	r1, sp, #8
    999a:	f01a fec3 	bl	24724 <bt_settings_decode_key>
	if (err) {
    999e:	4605      	mov	r5, r0
    99a0:	b178      	cbz	r0, 99c2 <sc_set+0x5a>
    99a2:	4a2d      	ldr	r2, [pc, #180]	; (9a58 <sc_set+0xf0>)
    99a4:	4c2b      	ldr	r4, [pc, #172]	; (9a54 <sc_set+0xec>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    99a6:	4638      	mov	r0, r7
    99a8:	1aa4      	subs	r4, r4, r2
    99aa:	08e4      	lsrs	r4, r4, #3
    99ac:	f7f9 f910 	bl	2bd0 <log_strdup>
    99b0:	01a4      	lsls	r4, r4, #6
    99b2:	f044 0401 	orr.w	r4, r4, #1
    99b6:	4601      	mov	r1, r0
    99b8:	4622      	mov	r2, r4
    99ba:	4829      	ldr	r0, [pc, #164]	; (9a60 <sc_set+0xf8>)
    99bc:	f019 fe45 	bl	2364a <log_1>
    99c0:	e7e4      	b.n	998c <sc_set+0x24>
	settings_name_next(name, &next);
    99c2:	a901      	add	r1, sp, #4
    99c4:	4638      	mov	r0, r7
    99c6:	f01a f945 	bl	23c54 <settings_name_next>
	if (!next) {
    99ca:	9801      	ldr	r0, [sp, #4]
    99cc:	b308      	cbz	r0, 9a12 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    99ce:	220a      	movs	r2, #10
    99d0:	4629      	mov	r1, r5
    99d2:	f018 f86d 	bl	21ab0 <strtol>
    99d6:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    99d8:	a902      	add	r1, sp, #8
    99da:	4638      	mov	r0, r7
    99dc:	f7ff fe5e 	bl	969c <find_sc_cfg>
	if (!cfg && len_rd) {
    99e0:	4604      	mov	r4, r0
    99e2:	bb88      	cbnz	r0, 9a48 <sc_set+0xe0>
    99e4:	2e00      	cmp	r6, #0
    99e6:	d0d3      	beq.n	9990 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    99e8:	a904      	add	r1, sp, #16
    99ea:	9004      	str	r0, [sp, #16]
    99ec:	f8cd 0013 	str.w	r0, [sp, #19]
    99f0:	f7ff fe54 	bl	969c <find_sc_cfg>
		if (!cfg) {
    99f4:	4604      	mov	r4, r0
    99f6:	b970      	cbnz	r0, 9a16 <sc_set+0xae>
    99f8:	4b17      	ldr	r3, [pc, #92]	; (9a58 <sc_set+0xf0>)
    99fa:	4916      	ldr	r1, [pc, #88]	; (9a54 <sc_set+0xec>)
			BT_ERR("Unable to restore SC: no cfg left");
    99fc:	4819      	ldr	r0, [pc, #100]	; (9a64 <sc_set+0xfc>)
    99fe:	1ac9      	subs	r1, r1, r3
    9a00:	08c9      	lsrs	r1, r1, #3
    9a02:	0189      	lsls	r1, r1, #6
    9a04:	f041 0101 	orr.w	r1, r1, #1
    9a08:	f019 fe12 	bl	23630 <log_0>
			return -ENOMEM;
    9a0c:	f06f 050b 	mvn.w	r5, #11
    9a10:	e7be      	b.n	9990 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    9a12:	462f      	mov	r7, r5
    9a14:	e7e0      	b.n	99d8 <sc_set+0x70>
		cfg->id = id;
    9a16:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9a1a:	a902      	add	r1, sp, #8
    9a1c:	f01b feca 	bl	257b4 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    9a20:	f104 0108 	add.w	r1, r4, #8
    9a24:	2204      	movs	r2, #4
    9a26:	4648      	mov	r0, r9
    9a28:	47c0      	blx	r8
		if (len < 0) {
    9a2a:	1e04      	subs	r4, r0, #0
    9a2c:	dab0      	bge.n	9990 <sc_set+0x28>
    9a2e:	4b0a      	ldr	r3, [pc, #40]	; (9a58 <sc_set+0xf0>)
    9a30:	4a08      	ldr	r2, [pc, #32]	; (9a54 <sc_set+0xec>)
			BT_ERR("Failed to decode value (err %zd)", len);
    9a32:	480d      	ldr	r0, [pc, #52]	; (9a68 <sc_set+0x100>)
    9a34:	1ad2      	subs	r2, r2, r3
    9a36:	08d2      	lsrs	r2, r2, #3
    9a38:	0192      	lsls	r2, r2, #6
    9a3a:	f042 0201 	orr.w	r2, r2, #1
    9a3e:	4621      	mov	r1, r4
    9a40:	f019 fe03 	bl	2364a <log_1>
			return len;
    9a44:	4625      	mov	r5, r4
    9a46:	e7a3      	b.n	9990 <sc_set+0x28>
	if (len_rd) {
    9a48:	2e00      	cmp	r6, #0
    9a4a:	d1e9      	bne.n	9a20 <sc_set+0xb8>
    9a4c:	6026      	str	r6, [r4, #0]
    9a4e:	6066      	str	r6, [r4, #4]
    9a50:	60a6      	str	r6, [r4, #8]
    9a52:	e79d      	b.n	9990 <sc_set+0x28>
    9a54:	0002c060 	.word	0x0002c060
    9a58:	0002bfa8 	.word	0x0002bfa8
    9a5c:	0002e90b 	.word	0x0002e90b
    9a60:	0002f691 	.word	0x0002f691
    9a64:	0002f6ad 	.word	0x0002f6ad
    9a68:	0002f61b 	.word	0x0002f61b

00009a6c <bt_gatt_clear_sc>:
{
    9a6c:	b570      	push	{r4, r5, r6, lr}
    9a6e:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    9a70:	f7ff fe14 	bl	969c <find_sc_cfg>
	if (!cfg) {
    9a74:	4604      	mov	r4, r0
    9a76:	b308      	cbz	r0, 9abc <bt_gatt_clear_sc+0x50>
		if (cfg->id) {
    9a78:	4605      	mov	r5, r0
    9a7a:	f815 2b01 	ldrb.w	r2, [r5], #1
    9a7e:	b302      	cbz	r2, 9ac2 <bt_gatt_clear_sc+0x56>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9a80:	ae02      	add	r6, sp, #8
    9a82:	2104      	movs	r1, #4
    9a84:	4630      	mov	r0, r6
    9a86:	f019 f909 	bl	22c9c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    9a8a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    9a8c:	2124      	movs	r1, #36	; 0x24
    9a8e:	4a0e      	ldr	r2, [pc, #56]	; (9ac8 <bt_gatt_clear_sc+0x5c>)
    9a90:	462b      	mov	r3, r5
    9a92:	a803      	add	r0, sp, #12
    9a94:	f7fb fba4 	bl	51e0 <bt_settings_encode_key>
		err = settings_delete(key);
    9a98:	a803      	add	r0, sp, #12
    9a9a:	f01a f8b4 	bl	23c06 <settings_delete>
		if (err) {
    9a9e:	4601      	mov	r1, r0
    9aa0:	b148      	cbz	r0, 9ab6 <bt_gatt_clear_sc+0x4a>
    9aa2:	4a0a      	ldr	r2, [pc, #40]	; (9acc <bt_gatt_clear_sc+0x60>)
    9aa4:	4b0a      	ldr	r3, [pc, #40]	; (9ad0 <bt_gatt_clear_sc+0x64>)
			BT_ERR("failed to delete SC (err %d)", err);
    9aa6:	480b      	ldr	r0, [pc, #44]	; (9ad4 <bt_gatt_clear_sc+0x68>)
    9aa8:	1ad2      	subs	r2, r2, r3
    9aaa:	08d2      	lsrs	r2, r2, #3
    9aac:	0192      	lsls	r2, r2, #6
    9aae:	f042 0201 	orr.w	r2, r2, #1
    9ab2:	f019 fdca 	bl	2364a <log_1>
	clear_sc_cfg(cfg);
    9ab6:	4620      	mov	r0, r4
    9ab8:	f01b fe9d 	bl	257f6 <clear_sc_cfg>
}
    9abc:	2000      	movs	r0, #0
    9abe:	b00c      	add	sp, #48	; 0x30
    9ac0:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    9ac2:	9200      	str	r2, [sp, #0]
    9ac4:	e7e2      	b.n	9a8c <bt_gatt_clear_sc+0x20>
    9ac6:	bf00      	nop
    9ac8:	0002f8fe 	.word	0x0002f8fe
    9acc:	0002c060 	.word	0x0002c060
    9ad0:	0002bfa8 	.word	0x0002bfa8
    9ad4:	0002f6cf 	.word	0x0002f6cf

00009ad8 <sc_clear>:
{
    9ad8:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9ada:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    9ade:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9ae0:	4629      	mov	r1, r5
    9ae2:	7a00      	ldrb	r0, [r0, #8]
    9ae4:	f01a ff8a 	bl	249fc <bt_addr_le_is_bonded>
    9ae8:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    9aea:	4629      	mov	r1, r5
    9aec:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9aee:	b17b      	cbz	r3, 9b10 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    9af0:	f7ff ffbc 	bl	9a6c <bt_gatt_clear_sc>
		if (err) {
    9af4:	4601      	mov	r1, r0
    9af6:	b190      	cbz	r0, 9b1e <sc_clear+0x46>
    9af8:	4b09      	ldr	r3, [pc, #36]	; (9b20 <sc_clear+0x48>)
    9afa:	4a0a      	ldr	r2, [pc, #40]	; (9b24 <sc_clear+0x4c>)
			BT_ERR("Failed to clear SC %d", err);
    9afc:	480a      	ldr	r0, [pc, #40]	; (9b28 <sc_clear+0x50>)
    9afe:	1ad2      	subs	r2, r2, r3
    9b00:	08d2      	lsrs	r2, r2, #3
    9b02:	0192      	lsls	r2, r2, #6
}
    9b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
    9b08:	f042 0201 	orr.w	r2, r2, #1
    9b0c:	f019 bd9d 	b.w	2364a <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9b10:	f7ff fdc4 	bl	969c <find_sc_cfg>
		if (cfg) {
    9b14:	b118      	cbz	r0, 9b1e <sc_clear+0x46>
}
    9b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
    9b1a:	f01b be6c 	b.w	257f6 <clear_sc_cfg>
}
    9b1e:	bd38      	pop	{r3, r4, r5, pc}
    9b20:	0002bfa8 	.word	0x0002bfa8
    9b24:	0002c060 	.word	0x0002c060
    9b28:	0002f6ec 	.word	0x0002f6ec

00009b2c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    9b2c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b2e:	6881      	ldr	r1, [r0, #8]
{
    9b30:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b32:	4a07      	ldr	r2, [pc, #28]	; (9b50 <remove_peer_from_attr+0x24>)
    9b34:	4291      	cmp	r1, r2
    9b36:	d109      	bne.n	9b4c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    9b38:	791a      	ldrb	r2, [r3, #4]
    9b3a:	6819      	ldr	r1, [r3, #0]
    9b3c:	68c0      	ldr	r0, [r0, #12]
    9b3e:	f01b fe01 	bl	25744 <ccc_find_cfg>
	if (cfg) {
    9b42:	b118      	cbz	r0, 9b4c <remove_peer_from_attr+0x20>
    9b44:	2300      	movs	r3, #0
    9b46:	6003      	str	r3, [r0, #0]
    9b48:	6043      	str	r3, [r0, #4]
    9b4a:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
    9b4c:	2001      	movs	r0, #1
    9b4e:	bd08      	pop	{r3, pc}
    9b50:	00009795 	.word	0x00009795

00009b54 <disconnected_cb>:
{
    9b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b58:	4b1f      	ldr	r3, [pc, #124]	; (9bd8 <disconnected_cb+0x84>)
{
    9b5a:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b5c:	6882      	ldr	r2, [r0, #8]
    9b5e:	429a      	cmp	r2, r3
{
    9b60:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b62:	d102      	bne.n	9b6a <disconnected_cb+0x16>
	ccc = attr->user_data;
    9b64:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    9b66:	8963      	ldrh	r3, [r4, #10]
    9b68:	b9c3      	cbnz	r3, 9b9c <disconnected_cb+0x48>
}
    9b6a:	2001      	movs	r0, #1
    9b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9b70:	f105 0888 	add.w	r8, r5, #136	; 0x88
    9b74:	7a28      	ldrb	r0, [r5, #8]
    9b76:	4641      	mov	r1, r8
    9b78:	f01a ff40 	bl	249fc <bt_addr_le_is_bonded>
    9b7c:	b948      	cbnz	r0, 9b92 <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    9b7e:	4b17      	ldr	r3, [pc, #92]	; (9bdc <disconnected_cb+0x88>)
    9b80:	429c      	cmp	r4, r3
    9b82:	d102      	bne.n	9b8a <disconnected_cb+0x36>
					sc_clear(conn);
    9b84:	4628      	mov	r0, r5
    9b86:	f7ff ffa7 	bl	9ad8 <sc_clear>
				clear_ccc_cfg(cfg);
    9b8a:	4620      	mov	r0, r4
    9b8c:	f01b fe19 	bl	257c2 <clear_ccc_cfg>
	if (!value_used) {
    9b90:	e019      	b.n	9bc6 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9b92:	4641      	mov	r1, r8
    9b94:	4638      	mov	r0, r7
    9b96:	f01b fe0d 	bl	257b4 <bt_addr_le_copy>
	if (!value_used) {
    9b9a:	e014      	b.n	9bc6 <disconnected_cb+0x72>
		if (!cfg->value) {
    9b9c:	8923      	ldrh	r3, [r4, #8]
    9b9e:	b193      	cbz	r3, 9bc6 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9ba0:	4627      	mov	r7, r4
    9ba2:	4628      	mov	r0, r5
    9ba4:	f817 1b01 	ldrb.w	r1, [r7], #1
    9ba8:	463a      	mov	r2, r7
    9baa:	f01a fff2 	bl	24b92 <bt_conn_is_peer_addr_le>
    9bae:	2800      	cmp	r0, #0
    9bb0:	d1de      	bne.n	9b70 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9bb2:	7820      	ldrb	r0, [r4, #0]
    9bb4:	4639      	mov	r1, r7
    9bb6:	f7fe f815 	bl	7be4 <bt_conn_lookup_addr_le>
			if (tmp) {
    9bba:	b120      	cbz	r0, 9bc6 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    9bbc:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    9bbe:	f01b f823 	bl	24c08 <bt_conn_unref>
	if (!value_used) {
    9bc2:	2d07      	cmp	r5, #7
    9bc4:	d0d1      	beq.n	9b6a <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    9bc6:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    9bc8:	2100      	movs	r1, #0
    9bca:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    9bcc:	2b00      	cmp	r3, #0
    9bce:	d0cc      	beq.n	9b6a <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    9bd0:	4630      	mov	r0, r6
    9bd2:	4798      	blx	r3
    9bd4:	e7c9      	b.n	9b6a <disconnected_cb+0x16>
    9bd6:	bf00      	nop
    9bd8:	00009795 	.word	0x00009795
    9bdc:	20000410 	.word	0x20000410

00009be0 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    9be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9be4:	4606      	mov	r6, r0
    9be6:	4688      	mov	r8, r1
    9be8:	4617      	mov	r7, r2
	if (params) {
    9bea:	461c      	mov	r4, r3
    9bec:	b34b      	cbz	r3, 9c42 <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9bee:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9bf2:	2100      	movs	r1, #0
    9bf4:	f7ff fb86 	bl	9304 <bt_att_req_alloc>
		if (!req) {
    9bf8:	4605      	mov	r5, r0
    9bfa:	b920      	cbnz	r0, 9c06 <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    9bfc:	f06f 040b 	mvn.w	r4, #11
}
    9c00:	4620      	mov	r0, r4
    9c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    9c06:	2300      	movs	r3, #0
		req->user_data = params;
    9c08:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    9c0a:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    9c0e:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    9c10:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    9c12:	4601      	mov	r1, r0
    9c14:	4630      	mov	r0, r6
    9c16:	f01b fcab 	bl	25570 <bt_att_req_send>
		if (err) {
    9c1a:	4604      	mov	r4, r0
    9c1c:	2800      	cmp	r0, #0
    9c1e:	d0ef      	beq.n	9c00 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    9c20:	4628      	mov	r0, r5
    9c22:	f7ff fb85 	bl	9330 <bt_att_req_free>
	if (err) {
    9c26:	2c00      	cmp	r4, #0
    9c28:	d0ea      	beq.n	9c00 <gatt_send.constprop.0+0x20>
    9c2a:	4b08      	ldr	r3, [pc, #32]	; (9c4c <gatt_send.constprop.0+0x6c>)
    9c2c:	4a08      	ldr	r2, [pc, #32]	; (9c50 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    9c2e:	4809      	ldr	r0, [pc, #36]	; (9c54 <gatt_send.constprop.0+0x74>)
    9c30:	1ad2      	subs	r2, r2, r3
    9c32:	08d2      	lsrs	r2, r2, #3
    9c34:	0192      	lsls	r2, r2, #6
    9c36:	f042 0201 	orr.w	r2, r2, #1
    9c3a:	4621      	mov	r1, r4
    9c3c:	f019 fd05 	bl	2364a <log_1>
    9c40:	e7de      	b.n	9c00 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    9c42:	461a      	mov	r2, r3
    9c44:	f01b fc4a 	bl	254dc <bt_att_send>
    9c48:	4604      	mov	r4, r0
    9c4a:	e7ec      	b.n	9c26 <gatt_send.constprop.0+0x46>
    9c4c:	0002bfa8 	.word	0x0002bfa8
    9c50:	0002c060 	.word	0x0002c060
    9c54:	0002f702 	.word	0x0002f702

00009c58 <gatt_indicate>:
{
    9c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c5c:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    9c5e:	8a92      	ldrh	r2, [r2, #20]
{
    9c60:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9c62:	3202      	adds	r2, #2
    9c64:	211d      	movs	r1, #29
{
    9c66:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9c68:	f7ff f80c 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    9c6c:	4605      	mov	r5, r0
    9c6e:	b1e8      	cbz	r0, 9cac <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
    9c70:	f100 0808 	add.w	r8, r0, #8
    9c74:	2102      	movs	r1, #2
    9c76:	4640      	mov	r0, r8
    9c78:	f01c f912 	bl	25ea0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9c7c:	4606      	mov	r6, r0
    9c7e:	8aa1      	ldrh	r1, [r4, #20]
    9c80:	f826 9b02 	strh.w	r9, [r6], #2
    9c84:	4640      	mov	r0, r8
    9c86:	f01c f90b 	bl	25ea0 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9c8a:	8aa2      	ldrh	r2, [r4, #20]
    9c8c:	6921      	ldr	r1, [r4, #16]
    9c8e:	4630      	mov	r0, r6
    9c90:	f021 fd8f 	bl	2b7b2 <memcpy>
	if (!params->func) {
    9c94:	68a3      	ldr	r3, [r4, #8]
    9c96:	b933      	cbnz	r3, 9ca6 <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    9c98:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9c9a:	4629      	mov	r1, r5
    9c9c:	4638      	mov	r0, r7
}
    9c9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9ca2:	f7ff bf9d 	b.w	9be0 <gatt_send.constprop.0>
    9ca6:	4a08      	ldr	r2, [pc, #32]	; (9cc8 <gatt_indicate+0x70>)
    9ca8:	4623      	mov	r3, r4
    9caa:	e7f6      	b.n	9c9a <gatt_indicate+0x42>
    9cac:	4b07      	ldr	r3, [pc, #28]	; (9ccc <gatt_indicate+0x74>)
    9cae:	4908      	ldr	r1, [pc, #32]	; (9cd0 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    9cb0:	4808      	ldr	r0, [pc, #32]	; (9cd4 <gatt_indicate+0x7c>)
    9cb2:	1ac9      	subs	r1, r1, r3
    9cb4:	08c9      	lsrs	r1, r1, #3
    9cb6:	0189      	lsls	r1, r1, #6
    9cb8:	f041 0102 	orr.w	r1, r1, #2
    9cbc:	f019 fcb8 	bl	23630 <log_0>
}
    9cc0:	f06f 000b 	mvn.w	r0, #11
    9cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cc8:	000255f1 	.word	0x000255f1
    9ccc:	0002bfa8 	.word	0x0002bfa8
    9cd0:	0002c060 	.word	0x0002c060
    9cd4:	0002f71c 	.word	0x0002f71c

00009cd8 <read_ppcp>:
{
    9cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9cda:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    9cdc:	4a07      	ldr	r2, [pc, #28]	; (9cfc <read_ppcp+0x24>)
{
    9cde:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    9ce0:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    9ce4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    9ce8:	2308      	movs	r3, #8
    9cea:	9300      	str	r3, [sp, #0]
    9cec:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    9cf0:	446b      	add	r3, sp
    9cf2:	f01b fd94 	bl	2581e <bt_gatt_attr_read.constprop.0>
}
    9cf6:	b005      	add	sp, #20
    9cf8:	f85d fb04 	ldr.w	pc, [sp], #4
    9cfc:	00280018 	.word	0x00280018

00009d00 <cf_set>:
{
    9d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9d04:	460f      	mov	r7, r1
    9d06:	b085      	sub	sp, #20
    9d08:	4690      	mov	r8, r2
    9d0a:	4699      	mov	r9, r3
	if (!name) {
    9d0c:	4606      	mov	r6, r0
    9d0e:	b978      	cbnz	r0, 9d30 <cf_set+0x30>
    9d10:	4936      	ldr	r1, [pc, #216]	; (9dec <cf_set+0xec>)
    9d12:	4b37      	ldr	r3, [pc, #220]	; (9df0 <cf_set+0xf0>)
		BT_ERR("Insufficient number of arguments");
    9d14:	4837      	ldr	r0, [pc, #220]	; (9df4 <cf_set+0xf4>)
    9d16:	1ac9      	subs	r1, r1, r3
    9d18:	08c9      	lsrs	r1, r1, #3
    9d1a:	0189      	lsls	r1, r1, #6
    9d1c:	f041 0101 	orr.w	r1, r1, #1
    9d20:	f019 fc86 	bl	23630 <log_0>
		return -EINVAL;
    9d24:	f06f 0515 	mvn.w	r5, #21
}
    9d28:	4628      	mov	r0, r5
    9d2a:	b005      	add	sp, #20
    9d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9d30:	a902      	add	r1, sp, #8
    9d32:	f01a fcf7 	bl	24724 <bt_settings_decode_key>
	if (err) {
    9d36:	4605      	mov	r5, r0
    9d38:	b178      	cbz	r0, 9d5a <cf_set+0x5a>
    9d3a:	4a2d      	ldr	r2, [pc, #180]	; (9df0 <cf_set+0xf0>)
    9d3c:	4c2b      	ldr	r4, [pc, #172]	; (9dec <cf_set+0xec>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9d3e:	4630      	mov	r0, r6
    9d40:	1aa4      	subs	r4, r4, r2
    9d42:	08e4      	lsrs	r4, r4, #3
    9d44:	f7f8 ff44 	bl	2bd0 <log_strdup>
    9d48:	01a4      	lsls	r4, r4, #6
    9d4a:	f044 0401 	orr.w	r4, r4, #1
    9d4e:	4601      	mov	r1, r0
    9d50:	4622      	mov	r2, r4
    9d52:	4829      	ldr	r0, [pc, #164]	; (9df8 <cf_set+0xf8>)
    9d54:	f019 fc79 	bl	2364a <log_1>
    9d58:	e7e4      	b.n	9d24 <cf_set+0x24>
	settings_name_next(name, &next);
    9d5a:	a901      	add	r1, sp, #4
    9d5c:	4630      	mov	r0, r6
    9d5e:	f019 ff79 	bl	23c54 <settings_name_next>
	if (!next) {
    9d62:	9801      	ldr	r0, [sp, #4]
    9d64:	b310      	cbz	r0, 9dac <cf_set+0xac>
		id = strtol(next, NULL, 10);
    9d66:	220a      	movs	r2, #10
    9d68:	4629      	mov	r1, r5
    9d6a:	f017 fea1 	bl	21ab0 <strtol>
    9d6e:	b2c6      	uxtb	r6, r0
			if (id == cf_cfg[i].id &&
    9d70:	4c22      	ldr	r4, [pc, #136]	; (9dfc <cf_set+0xfc>)
    9d72:	7823      	ldrb	r3, [r4, #0]
    9d74:	42b3      	cmp	r3, r6
    9d76:	d126      	bne.n	9dc6 <cf_set+0xc6>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    9d78:	1c61      	adds	r1, r4, #1
    9d7a:	a802      	add	r0, sp, #8
    9d7c:	f01b fcc7 	bl	2570e <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
    9d80:	bb08      	cbnz	r0, 9dc6 <cf_set+0xc6>
	if (len_rd) {
    9d82:	b1e7      	cbz	r7, 9dbe <cf_set+0xbe>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    9d84:	f104 0108 	add.w	r1, r4, #8
    9d88:	2201      	movs	r2, #1
    9d8a:	4648      	mov	r0, r9
    9d8c:	47c0      	blx	r8
		if (len < 0) {
    9d8e:	1e04      	subs	r4, r0, #0
    9d90:	daca      	bge.n	9d28 <cf_set+0x28>
    9d92:	4b17      	ldr	r3, [pc, #92]	; (9df0 <cf_set+0xf0>)
    9d94:	4a15      	ldr	r2, [pc, #84]	; (9dec <cf_set+0xec>)
			BT_ERR("Failed to decode value (err %zd)", len);
    9d96:	481a      	ldr	r0, [pc, #104]	; (9e00 <cf_set+0x100>)
    9d98:	1ad2      	subs	r2, r2, r3
    9d9a:	08d2      	lsrs	r2, r2, #3
    9d9c:	0192      	lsls	r2, r2, #6
    9d9e:	f042 0201 	orr.w	r2, r2, #1
    9da2:	4621      	mov	r1, r4
    9da4:	f019 fc51 	bl	2364a <log_1>
			return len;
    9da8:	4625      	mov	r5, r4
    9daa:	e7bd      	b.n	9d28 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    9dac:	462e      	mov	r6, r5
    9dae:	e7df      	b.n	9d70 <cf_set+0x70>
		cfg->id = id;
    9db0:	4620      	mov	r0, r4
		bt_addr_le_copy(&cfg->peer, &addr);
    9db2:	a902      	add	r1, sp, #8
		cfg->id = id;
    9db4:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9db8:	f01b fcfc 	bl	257b4 <bt_addr_le_copy>
    9dbc:	e7e1      	b.n	9d82 <cf_set+0x82>
		clear_cf_cfg(cfg);
    9dbe:	4620      	mov	r0, r4
    9dc0:	f01b fdb0 	bl	25924 <clear_cf_cfg>
    9dc4:	e7b0      	b.n	9d28 <cf_set+0x28>
		cfg = find_cf_cfg(NULL);
    9dc6:	2000      	movs	r0, #0
    9dc8:	f7ff fc4a 	bl	9660 <find_cf_cfg>
		if (!cfg) {
    9dcc:	4604      	mov	r4, r0
    9dce:	2800      	cmp	r0, #0
    9dd0:	d1ee      	bne.n	9db0 <cf_set+0xb0>
    9dd2:	4b07      	ldr	r3, [pc, #28]	; (9df0 <cf_set+0xf0>)
    9dd4:	4905      	ldr	r1, [pc, #20]	; (9dec <cf_set+0xec>)
			BT_ERR("Unable to restore CF: no cfg left");
    9dd6:	480b      	ldr	r0, [pc, #44]	; (9e04 <cf_set+0x104>)
    9dd8:	1ac9      	subs	r1, r1, r3
    9dda:	08c9      	lsrs	r1, r1, #3
    9ddc:	0189      	lsls	r1, r1, #6
    9dde:	f041 0101 	orr.w	r1, r1, #1
    9de2:	f019 fc25 	bl	23630 <log_0>
			return -ENOMEM;
    9de6:	f06f 050b 	mvn.w	r5, #11
    9dea:	e79d      	b.n	9d28 <cf_set+0x28>
    9dec:	0002c060 	.word	0x0002c060
    9df0:	0002bfa8 	.word	0x0002bfa8
    9df4:	0002e90b 	.word	0x0002e90b
    9df8:	0002f691 	.word	0x0002f691
    9dfc:	200029e8 	.word	0x200029e8
    9e00:	0002f61b 	.word	0x0002f61b
    9e04:	0002f743 	.word	0x0002f743

00009e08 <sc_commit>:
{
    9e08:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9e0a:	4c0c      	ldr	r4, [pc, #48]	; (9e3c <sc_commit+0x34>)
    9e0c:	f06f 0102 	mvn.w	r1, #2
    9e10:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9e14:	f01b fca4 	bl	25760 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9e18:	f3bf 8f5b 	dmb	ish
    9e1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9e1e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9e22:	07db      	lsls	r3, r3, #31
    9e24:	d507      	bpl.n	9e36 <sc_commit+0x2e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9e26:	4806      	ldr	r0, [pc, #24]	; (9e40 <sc_commit+0x38>)
    9e28:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9e2c:	2300      	movs	r3, #0
    9e2e:	f104 0120 	add.w	r1, r4, #32
    9e32:	f016 faaf 	bl	20394 <k_delayed_work_submit_to_queue>
}
    9e36:	2000      	movs	r0, #0
    9e38:	bd10      	pop	{r4, pc}
    9e3a:	bf00      	nop
    9e3c:	200010e8 	.word	0x200010e8
    9e40:	20001458 	.word	0x20001458

00009e44 <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    9e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e48:	4688      	mov	r8, r1
    9e4a:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    9e4c:	2112      	movs	r1, #18
    9e4e:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    9e50:	4606      	mov	r6, r0
    9e52:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    9e54:	f7fe ff16 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    9e58:	4604      	mov	r4, r0
    9e5a:	b308      	cbz	r0, 9ea0 <gatt_write_ccc.constprop.0+0x5c>
    9e5c:	f100 0908 	add.w	r9, r0, #8
    9e60:	2102      	movs	r1, #2
    9e62:	4648      	mov	r0, r9
    9e64:	f01c f81c 	bl	25ea0 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
    9e68:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    9e6a:	f8a0 8000 	strh.w	r8, [r0]
    9e6e:	4648      	mov	r0, r9
    9e70:	f01c f82e 	bl	25ed0 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9e74:	f3bf 8f5b 	dmb	ish
    9e78:	f105 0310 	add.w	r3, r5, #16
    9e7c:	e853 2f00 	ldrex	r2, [r3]
    9e80:	f042 0204 	orr.w	r2, r2, #4
    9e84:	e843 2100 	strex	r1, r2, [r3]
    9e88:	2900      	cmp	r1, #0
    9e8a:	d1f7      	bne.n	9e7c <gatt_write_ccc.constprop.0+0x38>
    9e8c:	f3bf 8f5b 	dmb	ish
	return gatt_send(conn, buf, func, params, NULL);
    9e90:	462b      	mov	r3, r5
    9e92:	4621      	mov	r1, r4
    9e94:	4630      	mov	r0, r6
    9e96:	4a04      	ldr	r2, [pc, #16]	; (9ea8 <gatt_write_ccc.constprop.0+0x64>)
}
    9e98:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    9e9c:	f7ff bea0 	b.w	9be0 <gatt_send.constprop.0>
}
    9ea0:	f06f 000b 	mvn.w	r0, #11
    9ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9ea8:	000259cd 	.word	0x000259cd

00009eac <cf_write>:
{
    9eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9eb0:	461f      	mov	r7, r3
    9eb2:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    9eb6:	2b01      	cmp	r3, #1
{
    9eb8:	4680      	mov	r8, r0
    9eba:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    9ebc:	d847      	bhi.n	9f4e <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    9ebe:	443b      	add	r3, r7
    9ec0:	2b01      	cmp	r3, #1
    9ec2:	463d      	mov	r5, r7
    9ec4:	dc46      	bgt.n	9f54 <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    9ec6:	f7ff fbcb 	bl	9660 <find_cf_cfg>
	if (!cfg) {
    9eca:	4604      	mov	r4, r0
    9ecc:	b990      	cbnz	r0, 9ef4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    9ece:	f7ff fbc7 	bl	9660 <find_cf_cfg>
	if (!cfg) {
    9ed2:	4604      	mov	r4, r0
    9ed4:	b970      	cbnz	r0, 9ef4 <cf_write+0x48>
    9ed6:	4b22      	ldr	r3, [pc, #136]	; (9f60 <cf_write+0xb4>)
    9ed8:	4922      	ldr	r1, [pc, #136]	; (9f64 <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    9eda:	4823      	ldr	r0, [pc, #140]	; (9f68 <cf_write+0xbc>)
    9edc:	1ac9      	subs	r1, r1, r3
    9ede:	08c9      	lsrs	r1, r1, #3
    9ee0:	0189      	lsls	r1, r1, #6
    9ee2:	f041 0102 	orr.w	r1, r1, #2
    9ee6:	f019 fba3 	bl	23630 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9eea:	f06f 0510 	mvn.w	r5, #16
}
    9eee:	4628      	mov	r0, r5
    9ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    9ef4:	4632      	mov	r2, r6
    9ef6:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    9efa:	4562      	cmp	r2, ip
    9efc:	d114      	bne.n	9f28 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    9efe:	b12f      	cbz	r7, 9f0c <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    9f00:	7833      	ldrb	r3, [r6, #0]
    9f02:	7a22      	ldrb	r2, [r4, #8]
    9f04:	f003 0307 	and.w	r3, r3, #7
    9f08:	4313      	orrs	r3, r2
    9f0a:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9f0c:	f108 0188 	add.w	r1, r8, #136	; 0x88
    9f10:	1c60      	adds	r0, r4, #1
    9f12:	f01b fc4f 	bl	257b4 <bt_addr_le_copy>
	cfg->id = conn->id;
    9f16:	4620      	mov	r0, r4
    9f18:	f898 3008 	ldrb.w	r3, [r8, #8]
    9f1c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9f20:	2100      	movs	r1, #0
    9f22:	f01b fd17 	bl	25954 <atomic_set_bit>
	return len;
    9f26:	e7e2      	b.n	9eee <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    9f28:	f812 1b01 	ldrb.w	r1, [r2], #1
    9f2c:	7a20      	ldrb	r0, [r4, #8]
    9f2e:	2300      	movs	r3, #0
    9f30:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    9f32:	fa21 fe03 	lsr.w	lr, r1, r3
    9f36:	f01e 0f01 	tst.w	lr, #1
    9f3a:	d004      	beq.n	9f46 <cf_write+0x9a>
    9f3c:	fa20 fe03 	lsr.w	lr, r0, r3
    9f40:	f01e 0f01 	tst.w	lr, #1
    9f44:	d109      	bne.n	9f5a <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    9f46:	3301      	adds	r3, #1
    9f48:	2b03      	cmp	r3, #3
    9f4a:	d1f2      	bne.n	9f32 <cf_write+0x86>
    9f4c:	e7d5      	b.n	9efa <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9f4e:	f06f 0506 	mvn.w	r5, #6
    9f52:	e7cc      	b.n	9eee <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9f54:	f06f 050c 	mvn.w	r5, #12
    9f58:	e7c9      	b.n	9eee <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    9f5a:	f06f 0512 	mvn.w	r5, #18
    9f5e:	e7c6      	b.n	9eee <cf_write+0x42>
    9f60:	0002bfa8 	.word	0x0002bfa8
    9f64:	0002c060 	.word	0x0002c060
    9f68:	0002f765 	.word	0x0002f765

00009f6c <sc_indicate_rsp>:
{
    9f6c:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f6e:	4d12      	ldr	r5, [pc, #72]	; (9fb8 <sc_indicate_rsp+0x4c>)
    9f70:	4604      	mov	r4, r0
    9f72:	f06f 0102 	mvn.w	r1, #2
    9f76:	f105 0050 	add.w	r0, r5, #80	; 0x50
    9f7a:	f01b fbf1 	bl	25760 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f7e:	f3bf 8f5b 	dmb	ish
    9f82:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    9f84:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9f88:	07da      	lsls	r2, r3, #31
    9f8a:	d506      	bpl.n	9f9a <sc_indicate_rsp+0x2e>
    9f8c:	480b      	ldr	r0, [pc, #44]	; (9fbc <sc_indicate_rsp+0x50>)
    9f8e:	2200      	movs	r2, #0
    9f90:	2300      	movs	r3, #0
    9f92:	f105 0120 	add.w	r1, r5, #32
    9f96:	f016 f9fd 	bl	20394 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    9f9a:	4620      	mov	r0, r4
    9f9c:	f7ff fb60 	bl	9660 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    9fa0:	b140      	cbz	r0, 9fb4 <sc_indicate_rsp+0x48>
    9fa2:	7a03      	ldrb	r3, [r0, #8]
    9fa4:	07db      	lsls	r3, r3, #31
    9fa6:	d505      	bpl.n	9fb4 <sc_indicate_rsp+0x48>
}
    9fa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9fac:	2100      	movs	r1, #0
    9fae:	300c      	adds	r0, #12
    9fb0:	f01b bcd0 	b.w	25954 <atomic_set_bit>
}
    9fb4:	bd38      	pop	{r3, r4, r5, pc}
    9fb6:	bf00      	nop
    9fb8:	200010e8 	.word	0x200010e8
    9fbc:	20001458 	.word	0x20001458

00009fc0 <gatt_notify>:
{
    9fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9fc4:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    9fc6:	8992      	ldrh	r2, [r2, #12]
{
    9fc8:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9fca:	3202      	adds	r2, #2
    9fcc:	211b      	movs	r1, #27
{
    9fce:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9fd0:	f7fe fe58 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    9fd4:	4605      	mov	r5, r0
    9fd6:	b1c8      	cbz	r0, a00c <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    9fd8:	f100 0908 	add.w	r9, r0, #8
    9fdc:	2102      	movs	r1, #2
    9fde:	4648      	mov	r0, r9
    9fe0:	f01b ff5e 	bl	25ea0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9fe4:	4606      	mov	r6, r0
    9fe6:	89a1      	ldrh	r1, [r4, #12]
    9fe8:	f826 8b02 	strh.w	r8, [r6], #2
    9fec:	4648      	mov	r0, r9
    9fee:	f01b ff57 	bl	25ea0 <net_buf_simple_add>
    9ff2:	89a2      	ldrh	r2, [r4, #12]
    9ff4:	68a1      	ldr	r1, [r4, #8]
    9ff6:	4630      	mov	r0, r6
    9ff8:	f021 fbdb 	bl	2b7b2 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    9ffc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    a000:	4629      	mov	r1, r5
    a002:	4638      	mov	r0, r7
}
    a004:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    a008:	f01b ba68 	b.w	254dc <bt_att_send>
    a00c:	4b06      	ldr	r3, [pc, #24]	; (a028 <gatt_notify+0x68>)
    a00e:	4907      	ldr	r1, [pc, #28]	; (a02c <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    a010:	4807      	ldr	r0, [pc, #28]	; (a030 <gatt_notify+0x70>)
    a012:	1ac9      	subs	r1, r1, r3
    a014:	08c9      	lsrs	r1, r1, #3
    a016:	0189      	lsls	r1, r1, #6
    a018:	f041 0102 	orr.w	r1, r1, #2
    a01c:	f019 fb08 	bl	23630 <log_0>
}
    a020:	f06f 000b 	mvn.w	r0, #11
    a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a028:	0002bfa8 	.word	0x0002bfa8
    a02c:	0002c060 	.word	0x0002c060
    a030:	0002f791 	.word	0x0002f791

0000a034 <notify_cb>:
{
    a034:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a036:	4b2e      	ldr	r3, [pc, #184]	; (a0f0 <notify_cb+0xbc>)
{
    a038:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    a03a:	6882      	ldr	r2, [r0, #8]
    a03c:	429a      	cmp	r2, r3
{
    a03e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a040:	d12d      	bne.n	a09e <notify_cb+0x6a>
	ccc = attr->user_data;
    a042:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    a044:	4b2b      	ldr	r3, [pc, #172]	; (a0f4 <notify_cb+0xc0>)
    a046:	429f      	cmp	r7, r3
    a048:	d119      	bne.n	a07e <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    a04a:	4d2b      	ldr	r5, [pc, #172]	; (a0f8 <notify_cb+0xc4>)
    a04c:	2300      	movs	r3, #0
    a04e:	4669      	mov	r1, sp
    a050:	1c68      	adds	r0, r5, #1
    a052:	9300      	str	r3, [sp, #0]
    a054:	f8cd 3003 	str.w	r3, [sp, #3]
    a058:	f01b fb59 	bl	2570e <bt_addr_le_cmp>
    a05c:	b178      	cbz	r0, a07e <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    a05e:	4629      	mov	r1, r5
    a060:	2207      	movs	r2, #7
    a062:	f811 0b01 	ldrb.w	r0, [r1], #1
    a066:	f7fd fe01 	bl	7c6c <bt_conn_lookup_state_le>
			if (!conn) {
    a06a:	b9d8      	cbnz	r0, a0a4 <notify_cb+0x70>
				sc = (struct sc_data *)data->ind_params->data;
    a06c:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    a06e:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    a070:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    a072:	f811 0b01 	ldrb.w	r0, [r1], #1
    a076:	8853      	ldrh	r3, [r2, #2]
    a078:	8812      	ldrh	r2, [r2, #0]
    a07a:	f7ff fbed 	bl	9858 <sc_save>
		if (cfg->value != data->type) {
    a07e:	893a      	ldrh	r2, [r7, #8]
    a080:	89a3      	ldrh	r3, [r4, #12]
    a082:	429a      	cmp	r2, r3
    a084:	d10b      	bne.n	a09e <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a086:	4639      	mov	r1, r7
    a088:	f811 0b01 	ldrb.w	r0, [r1], #1
    a08c:	f7fd fdaa 	bl	7be4 <bt_conn_lookup_addr_le>
		if (!conn) {
    a090:	4605      	mov	r5, r0
    a092:	b120      	cbz	r0, a09e <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    a094:	7a83      	ldrb	r3, [r0, #10]
    a096:	2b07      	cmp	r3, #7
    a098:	d007      	beq.n	a0aa <notify_cb+0x76>
			bt_conn_unref(conn);
    a09a:	f01a fdb5 	bl	24c08 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    a09e:	2001      	movs	r0, #1
}
    a0a0:	b003      	add	sp, #12
    a0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    a0a4:	f01a fdb0 	bl	24c08 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a0a8:	e7e9      	b.n	a07e <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    a0aa:	697b      	ldr	r3, [r7, #20]
    a0ac:	b123      	cbz	r3, a0b8 <notify_cb+0x84>
    a0ae:	4631      	mov	r1, r6
    a0b0:	4798      	blx	r3
    a0b2:	b908      	cbnz	r0, a0b8 <notify_cb+0x84>
			bt_conn_unref(conn);
    a0b4:	4628      	mov	r0, r5
    a0b6:	e7f0      	b.n	a09a <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a0b8:	89a3      	ldrh	r3, [r4, #12]
    a0ba:	88a1      	ldrh	r1, [r4, #4]
    a0bc:	6922      	ldr	r2, [r4, #16]
    a0be:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    a0c0:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    a0c2:	d110      	bne.n	a0e6 <notify_cb+0xb2>
			err = gatt_indicate(conn, data->handle,
    a0c4:	f7ff fdc8 	bl	9c58 <gatt_indicate>
			if (err == 0) {
    a0c8:	4606      	mov	r6, r0
    a0ca:	b918      	cbnz	r0, a0d4 <notify_cb+0xa0>
				data->ind_params->_ref++;
    a0cc:	6922      	ldr	r2, [r4, #16]
    a0ce:	7d93      	ldrb	r3, [r2, #22]
    a0d0:	3301      	adds	r3, #1
    a0d2:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    a0d4:	4628      	mov	r0, r5
    a0d6:	f01a fd97 	bl	24c08 <bt_conn_unref>
		if (err < 0) {
    a0da:	2e00      	cmp	r6, #0
    a0dc:	f04f 0000 	mov.w	r0, #0
    a0e0:	dbde      	blt.n	a0a0 <notify_cb+0x6c>
		data->err = 0;
    a0e2:	60a0      	str	r0, [r4, #8]
    a0e4:	e7db      	b.n	a09e <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    a0e6:	f7ff ff6b 	bl	9fc0 <gatt_notify>
    a0ea:	4606      	mov	r6, r0
    a0ec:	e7f2      	b.n	a0d4 <notify_cb+0xa0>
    a0ee:	bf00      	nop
    a0f0:	00009795 	.word	0x00009795
    a0f4:	20000410 	.word	0x20000410
    a0f8:	200080e6 	.word	0x200080e6

0000a0fc <bt_gatt_init>:
{
    a0fc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a0fe:	4b29      	ldr	r3, [pc, #164]	; (a1a4 <bt_gatt_init+0xa8>)
    a100:	f3bf 8f5b 	dmb	ish
    a104:	2201      	movs	r2, #1
    a106:	e853 1f00 	ldrex	r1, [r3]
    a10a:	2900      	cmp	r1, #0
    a10c:	d103      	bne.n	a116 <bt_gatt_init+0x1a>
    a10e:	e843 2000 	strex	r0, r2, [r3]
    a112:	2800      	cmp	r0, #0
    a114:	d1f7      	bne.n	a106 <bt_gatt_init+0xa>
    a116:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    a11a:	d13b      	bne.n	a194 <bt_gatt_init+0x98>
    a11c:	f3bf 8f5b 	dmb	ish
    a120:	4b21      	ldr	r3, [pc, #132]	; (a1a8 <bt_gatt_init+0xac>)
    a122:	e853 1f00 	ldrex	r1, [r3]
    a126:	2900      	cmp	r1, #0
    a128:	d103      	bne.n	a132 <bt_gatt_init+0x36>
    a12a:	e843 2000 	strex	r0, r2, [r3]
    a12e:	2800      	cmp	r0, #0
    a130:	d1f7      	bne.n	a122 <bt_gatt_init+0x26>
    a132:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    a136:	d108      	bne.n	a14a <bt_gatt_init+0x4e>
    a138:	4a1c      	ldr	r2, [pc, #112]	; (a1ac <bt_gatt_init+0xb0>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a13a:	491d      	ldr	r1, [pc, #116]	; (a1b0 <bt_gatt_init+0xb4>)
    a13c:	8813      	ldrh	r3, [r2, #0]
    a13e:	4c1d      	ldr	r4, [pc, #116]	; (a1b4 <bt_gatt_init+0xb8>)
	if (!atomic_cas(&service_init, 0, 1)) {
    a140:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a142:	42a1      	cmp	r1, r4
    a144:	d327      	bcc.n	a196 <bt_gatt_init+0x9a>
    a146:	b100      	cbz	r0, a14a <bt_gatt_init+0x4e>
    a148:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a14a:	4c1b      	ldr	r4, [pc, #108]	; (a1b8 <bt_gatt_init+0xbc>)
    a14c:	2230      	movs	r2, #48	; 0x30
    a14e:	2100      	movs	r1, #0
    a150:	4620      	mov	r0, r4
    a152:	f021 fb4f 	bl	2b7f4 <memset>
    a156:	4b19      	ldr	r3, [pc, #100]	; (a1bc <bt_gatt_init+0xc0>)
    a158:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a15a:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a15c:	4c18      	ldr	r4, [pc, #96]	; (a1c0 <bt_gatt_init+0xc4>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a15e:	4819      	ldr	r0, [pc, #100]	; (a1c4 <bt_gatt_init+0xc8>)
    a160:	2300      	movs	r3, #0
    a162:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a166:	f016 f915 	bl	20394 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a16a:	f104 0020 	add.w	r0, r4, #32
    a16e:	2230      	movs	r2, #48	; 0x30
    a170:	2100      	movs	r1, #0
    a172:	f021 fb3f 	bl	2b7f4 <memset>
    a176:	4b14      	ldr	r3, [pc, #80]	; (a1c8 <bt_gatt_init+0xcc>)
    a178:	6263      	str	r3, [r4, #36]	; 0x24
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a17a:	3450      	adds	r4, #80	; 0x50
    a17c:	f3bf 8f5b 	dmb	ish
    a180:	e854 3f00 	ldrex	r3, [r4]
    a184:	f043 0302 	orr.w	r3, r3, #2
    a188:	e844 3200 	strex	r2, r3, [r4]
    a18c:	2a00      	cmp	r2, #0
    a18e:	d1f7      	bne.n	a180 <bt_gatt_init+0x84>
    a190:	f3bf 8f5b 	dmb	ish
}
    a194:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    a196:	6848      	ldr	r0, [r1, #4]
    a198:	4403      	add	r3, r0
    a19a:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a19c:	3108      	adds	r1, #8
    a19e:	2001      	movs	r0, #1
    a1a0:	e7cf      	b.n	a142 <bt_gatt_init+0x46>
    a1a2:	bf00      	nop
    a1a4:	200029f8 	.word	0x200029f8
    a1a8:	20002a14 	.word	0x20002a14
    a1ac:	200080e4 	.word	0x200080e4
    a1b0:	0002bf34 	.word	0x0002bf34
    a1b4:	0002bf44 	.word	0x0002bf44
    a1b8:	200010b8 	.word	0x200010b8
    a1bc:	00025adb 	.word	0x00025adb
    a1c0:	200010e8 	.word	0x200010e8
    a1c4:	20001458 	.word	0x20001458
    a1c8:	0000a639 	.word	0x0000a639

0000a1cc <bt_gatt_attr_get_handle>:
{
    a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    a1d0:	4603      	mov	r3, r0
    a1d2:	b148      	cbz	r0, a1e8 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    a1d4:	8a00      	ldrh	r0, [r0, #16]
    a1d6:	b938      	cbnz	r0, a1e8 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a1d8:	4912      	ldr	r1, [pc, #72]	; (a224 <bt_gatt_attr_get_handle+0x58>)
    a1da:	f8df e04c 	ldr.w	lr, [pc, #76]	; a228 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    a1de:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a1e0:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a1e4:	4571      	cmp	r1, lr
    a1e6:	d301      	bcc.n	a1ec <bt_gatt_attr_get_handle+0x20>
}
    a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    a1ec:	e9d1 7600 	ldrd	r7, r6, [r1]
    a1f0:	42bb      	cmp	r3, r7
    a1f2:	d304      	bcc.n	a1fe <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a1f4:	fb0c 7206 	mla	r2, ip, r6, r7
    a1f8:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    a1fa:	4293      	cmp	r3, r2
    a1fc:	d90e      	bls.n	a21c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    a1fe:	19a2      	adds	r2, r4, r6
    a200:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a202:	3108      	adds	r1, #8
    a204:	4614      	mov	r4, r2
    a206:	e7ed      	b.n	a1e4 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    a208:	fb0c 7805 	mla	r8, ip, r5, r7
    a20c:	4543      	cmp	r3, r8
    a20e:	d007      	beq.n	a220 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    a210:	3501      	adds	r5, #1
    a212:	1962      	adds	r2, r4, r5
    a214:	42b5      	cmp	r5, r6
    a216:	b292      	uxth	r2, r2
    a218:	d1f6      	bne.n	a208 <bt_gatt_attr_get_handle+0x3c>
    a21a:	e7f2      	b.n	a202 <bt_gatt_attr_get_handle+0x36>
    a21c:	2500      	movs	r5, #0
    a21e:	e7f8      	b.n	a212 <bt_gatt_attr_get_handle+0x46>
    a220:	4610      	mov	r0, r2
    a222:	e7e1      	b.n	a1e8 <bt_gatt_attr_get_handle+0x1c>
    a224:	0002bf34 	.word	0x0002bf34
    a228:	0002bf44 	.word	0x0002bf44

0000a22c <bt_gatt_foreach_attr_type>:
{
    a22c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a230:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    a234:	9100      	str	r1, [sp, #0]
    a236:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    a238:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a23c:	2d00      	cmp	r5, #0
    a23e:	bf08      	it	eq
    a240:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    a242:	4b24      	ldr	r3, [pc, #144]	; (a2d4 <bt_gatt_foreach_attr_type+0xa8>)
    a244:	881b      	ldrh	r3, [r3, #0]
    a246:	4283      	cmp	r3, r0
{
    a248:	4607      	mov	r7, r0
    a24a:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a24c:	d23c      	bcs.n	a2c8 <bt_gatt_foreach_attr_type+0x9c>
}
    a24e:	b003      	add	sp, #12
    a250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    a254:	6873      	ldr	r3, [r6, #4]
    a256:	4423      	add	r3, r4
    a258:	42bb      	cmp	r3, r7
    a25a:	d232      	bcs.n	a2c2 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    a25c:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a25e:	3608      	adds	r6, #8
    a260:	4b1d      	ldr	r3, [pc, #116]	; (a2d8 <bt_gatt_foreach_attr_type+0xac>)
    a262:	429e      	cmp	r6, r3
    a264:	d3f6      	bcc.n	a254 <bt_gatt_foreach_attr_type+0x28>
    a266:	e7f2      	b.n	a24e <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a268:	5889      	ldr	r1, [r1, r2]
    a26a:	9301      	str	r3, [sp, #4]
    a26c:	4640      	mov	r0, r8
    a26e:	f01a fa7d 	bl	2476c <bt_uuid_cmp>
    a272:	9b01      	ldr	r3, [sp, #4]
    a274:	b190      	cbz	r0, a29c <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a276:	3401      	adds	r4, #1
    a278:	f10a 0a01 	add.w	sl, sl, #1
    a27c:	b2a4      	uxth	r4, r4
    a27e:	6873      	ldr	r3, [r6, #4]
    a280:	4553      	cmp	r3, sl
    a282:	d9ec      	bls.n	a25e <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    a284:	9b00      	ldr	r3, [sp, #0]
    a286:	429c      	cmp	r4, r3
    a288:	d8e1      	bhi.n	a24e <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    a28a:	42bc      	cmp	r4, r7
    a28c:	d3f3      	bcc.n	a276 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a28e:	6831      	ldr	r1, [r6, #0]
    a290:	fb0b f20a 	mul.w	r2, fp, sl
    a294:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a296:	f1b8 0f00 	cmp.w	r8, #0
    a29a:	d1e5      	bne.n	a268 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    a29c:	f1b9 0f00 	cmp.w	r9, #0
    a2a0:	d10b      	bne.n	a2ba <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    a2a2:	3d01      	subs	r5, #1
    a2a4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    a2a6:	4618      	mov	r0, r3
    a2a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a2aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a2ac:	4621      	mov	r1, r4
    a2ae:	4798      	blx	r3
	if (!*num_matches) {
    a2b0:	2d00      	cmp	r5, #0
    a2b2:	d0cc      	beq.n	a24e <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a2b4:	2800      	cmp	r0, #0
    a2b6:	d1de      	bne.n	a276 <bt_gatt_foreach_attr_type+0x4a>
    a2b8:	e7c9      	b.n	a24e <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    a2ba:	68da      	ldr	r2, [r3, #12]
    a2bc:	4591      	cmp	r9, r2
    a2be:	d1da      	bne.n	a276 <bt_gatt_foreach_attr_type+0x4a>
    a2c0:	e7ef      	b.n	a2a2 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a2c2:	f04f 0a00 	mov.w	sl, #0
    a2c6:	e7da      	b.n	a27e <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a2c8:	4e04      	ldr	r6, [pc, #16]	; (a2dc <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    a2ca:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a2cc:	f04f 0b14 	mov.w	fp, #20
    a2d0:	e7c6      	b.n	a260 <bt_gatt_foreach_attr_type+0x34>
    a2d2:	bf00      	nop
    a2d4:	200080e4 	.word	0x200080e4
    a2d8:	0002bf44 	.word	0x0002bf44
    a2dc:	0002bf34 	.word	0x0002bf34

0000a2e0 <db_hash_gen>:
{
    a2e0:	b530      	push	{r4, r5, lr}
    a2e2:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    a2e4:	2300      	movs	r3, #0
{
    a2e6:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a2e8:	aa1c      	add	r2, sp, #112	; 0x70
    a2ea:	4669      	mov	r1, sp
    a2ec:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    a2ee:	e9cd 3300 	strd	r3, r3, [sp]
    a2f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a2f6:	f019 ff6c 	bl	241d2 <tc_cmac_setup>
    a2fa:	b958      	cbnz	r0, a314 <db_hash_gen+0x34>
    a2fc:	4918      	ldr	r1, [pc, #96]	; (a360 <db_hash_gen+0x80>)
    a2fe:	4b19      	ldr	r3, [pc, #100]	; (a364 <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    a300:	4819      	ldr	r0, [pc, #100]	; (a368 <db_hash_gen+0x88>)
    a302:	1ac9      	subs	r1, r1, r3
    a304:	08c9      	lsrs	r1, r1, #3
    a306:	0189      	lsls	r1, r1, #6
    a308:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    a30c:	f019 f990 	bl	23630 <log_0>
}
    a310:	b049      	add	sp, #292	; 0x124
    a312:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a314:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a318:	2001      	movs	r0, #1
    a31a:	4a14      	ldr	r2, [pc, #80]	; (a36c <db_hash_gen+0x8c>)
    a31c:	ab04      	add	r3, sp, #16
    a31e:	f01b fbd1 	bl	25ac4 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a322:	4813      	ldr	r0, [pc, #76]	; (a370 <db_hash_gen+0x90>)
    a324:	a904      	add	r1, sp, #16
    a326:	f019 ffeb 	bl	24300 <tc_cmac_final>
    a32a:	b940      	cbnz	r0, a33e <db_hash_gen+0x5e>
    a32c:	490c      	ldr	r1, [pc, #48]	; (a360 <db_hash_gen+0x80>)
    a32e:	4b0d      	ldr	r3, [pc, #52]	; (a364 <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    a330:	4810      	ldr	r0, [pc, #64]	; (a374 <db_hash_gen+0x94>)
    a332:	1ac9      	subs	r1, r1, r3
    a334:	08c9      	lsrs	r1, r1, #3
    a336:	0189      	lsls	r1, r1, #6
    a338:	f041 0101 	orr.w	r1, r1, #1
    a33c:	e7e6      	b.n	a30c <db_hash_gen+0x2c>
    a33e:	4b0c      	ldr	r3, [pc, #48]	; (a370 <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a340:	2208      	movs	r2, #8
    a342:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    a346:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a348:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    a34c:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    a350:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    a352:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    a354:	d1f7      	bne.n	a346 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a356:	2c00      	cmp	r4, #0
    a358:	d0da      	beq.n	a310 <db_hash_gen+0x30>
		db_hash_store();
    a35a:	f7ff f941 	bl	95e0 <db_hash_store>
    a35e:	e7d7      	b.n	a310 <db_hash_gen+0x30>
    a360:	0002c060 	.word	0x0002c060
    a364:	0002bfa8 	.word	0x0002bfa8
    a368:	0002f7ba 	.word	0x0002f7ba
    a36c:	00025663 	.word	0x00025663
    a370:	20008605 	.word	0x20008605
    a374:	0002f7d3 	.word	0x0002f7d3

0000a378 <db_hash_commit>:
{
    a378:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    a37a:	4826      	ldr	r0, [pc, #152]	; (a414 <db_hash_commit+0x9c>)
    a37c:	f020 ffda 	bl	2b334 <k_delayed_work_cancel>
	if (!err) {
    a380:	b908      	cbnz	r0, a386 <db_hash_commit+0xe>
		db_hash_gen(false);
    a382:	f7ff ffad 	bl	a2e0 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    a386:	4924      	ldr	r1, [pc, #144]	; (a418 <db_hash_commit+0xa0>)
    a388:	4824      	ldr	r0, [pc, #144]	; (a41c <db_hash_commit+0xa4>)
    a38a:	2210      	movs	r2, #16
    a38c:	f021 fa03 	bl	2b796 <memcmp>
    a390:	b948      	cbnz	r0, a3a6 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    a392:	4823      	ldr	r0, [pc, #140]	; (a420 <db_hash_commit+0xa8>)
    a394:	f020 ffce 	bl	2b334 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a398:	4822      	ldr	r0, [pc, #136]	; (a424 <db_hash_commit+0xac>)
    a39a:	f06f 0101 	mvn.w	r1, #1
    a39e:	f01b f9df 	bl	25760 <atomic_and>
}
    a3a2:	2000      	movs	r0, #0
    a3a4:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a3a6:	4b20      	ldr	r3, [pc, #128]	; (a428 <db_hash_commit+0xb0>)
    a3a8:	f3bf 8f5b 	dmb	ish
    a3ac:	f103 0250 	add.w	r2, r3, #80	; 0x50
    a3b0:	e852 1f00 	ldrex	r1, [r2]
    a3b4:	f041 0001 	orr.w	r0, r1, #1
    a3b8:	e842 0c00 	strex	ip, r0, [r2]
    a3bc:	f1bc 0f00 	cmp.w	ip, #0
    a3c0:	d1f6      	bne.n	a3b0 <db_hash_commit+0x38>
    a3c2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a3c6:	07ca      	lsls	r2, r1, #31
    a3c8:	d412      	bmi.n	a3f0 <db_hash_commit+0x78>
		gatt_sc.start = start;
    a3ca:	4a18      	ldr	r2, [pc, #96]	; (a42c <db_hash_commit+0xb4>)
    a3cc:	619a      	str	r2, [r3, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a3ce:	f3bf 8f5b 	dmb	ish
    a3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a3d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    a3d8:	079b      	lsls	r3, r3, #30
    a3da:	d406      	bmi.n	a3ea <db_hash_commit+0x72>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a3dc:	4910      	ldr	r1, [pc, #64]	; (a420 <db_hash_commit+0xa8>)
    a3de:	4814      	ldr	r0, [pc, #80]	; (a430 <db_hash_commit+0xb8>)
    a3e0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a3e4:	2300      	movs	r3, #0
    a3e6:	f015 ffd5 	bl	20394 <k_delayed_work_submit_to_queue>
	db_hash_store();
    a3ea:	f7ff f8f9 	bl	95e0 <db_hash_store>
	return 0;
    a3ee:	e7d8      	b.n	a3a2 <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    a3f0:	8b1a      	ldrh	r2, [r3, #24]
    a3f2:	8b59      	ldrh	r1, [r3, #26]
    a3f4:	2a01      	cmp	r2, #1
    a3f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a3fa:	d805      	bhi.n	a408 <db_hash_commit+0x90>
    a3fc:	4291      	cmp	r1, r2
    a3fe:	d0f4      	beq.n	a3ea <db_hash_commit+0x72>
		*end = new_end;
    a400:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a404:	835a      	strh	r2, [r3, #26]
    a406:	e7e2      	b.n	a3ce <db_hash_commit+0x56>
		*start = new_start;
    a408:	2001      	movs	r0, #1
	if (*end < new_end) {
    a40a:	4291      	cmp	r1, r2
		*start = new_start;
    a40c:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    a40e:	d0de      	beq.n	a3ce <db_hash_commit+0x56>
    a410:	e7f6      	b.n	a400 <db_hash_commit+0x88>
    a412:	bf00      	nop
    a414:	200010b8 	.word	0x200010b8
    a418:	20008605 	.word	0x20008605
    a41c:	20008615 	.word	0x20008615
    a420:	20001108 	.word	0x20001108
    a424:	20001138 	.word	0x20001138
    a428:	200010e8 	.word	0x200010e8
    a42c:	ffff0001 	.word	0xffff0001
    a430:	20001458 	.word	0x20001458

0000a434 <ccc_set_direct>:
{
    a434:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a438:	b0b9      	sub	sp, #228	; 0xe4
    a43a:	4688      	mov	r8, r1
    a43c:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a43e:	4939      	ldr	r1, [pc, #228]	; (a524 <ccc_set_direct+0xf0>)
    a440:	9840      	ldr	r0, [sp, #256]	; 0x100
    a442:	466a      	mov	r2, sp
{
    a444:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a446:	f019 fbe2 	bl	23c0e <settings_name_steq>
    a44a:	b978      	cbnz	r0, a46c <ccc_set_direct+0x38>
    a44c:	4b36      	ldr	r3, [pc, #216]	; (a528 <ccc_set_direct+0xf4>)
    a44e:	4937      	ldr	r1, [pc, #220]	; (a52c <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    a450:	4837      	ldr	r0, [pc, #220]	; (a530 <ccc_set_direct+0xfc>)
    a452:	1ac9      	subs	r1, r1, r3
    a454:	08c9      	lsrs	r1, r1, #3
    a456:	0189      	lsls	r1, r1, #6
    a458:	f041 0101 	orr.w	r1, r1, #1
    a45c:	f019 f8e8 	bl	23630 <log_0>
			return -EINVAL;
    a460:	f06f 0515 	mvn.w	r5, #21
}
    a464:	4628      	mov	r0, r5
    a466:	b039      	add	sp, #228	; 0xe4
    a468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    a46c:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    a46e:	a901      	add	r1, sp, #4
    a470:	4630      	mov	r0, r6
    a472:	f019 fbef 	bl	23c54 <settings_name_next>
		if (!name) {
    a476:	b96e      	cbnz	r6, a494 <ccc_set_direct+0x60>
    a478:	492c      	ldr	r1, [pc, #176]	; (a52c <ccc_set_direct+0xf8>)
    a47a:	4b2b      	ldr	r3, [pc, #172]	; (a528 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    a47c:	482d      	ldr	r0, [pc, #180]	; (a534 <ccc_set_direct+0x100>)
    a47e:	1ac9      	subs	r1, r1, r3
    a480:	08c9      	lsrs	r1, r1, #3
    a482:	0189      	lsls	r1, r1, #6
    a484:	f041 0101 	orr.w	r1, r1, #1
    a488:	f019 f8d2 	bl	23630 <log_0>
			return -EINVAL;
    a48c:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    a490:	4625      	mov	r5, r4
    a492:	e7e7      	b.n	a464 <ccc_set_direct+0x30>
		} else if (!next) {
    a494:	9801      	ldr	r0, [sp, #4]
    a496:	b9c8      	cbnz	r0, a4cc <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    a498:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    a49c:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    a4a0:	4649      	mov	r1, r9
    a4a2:	4630      	mov	r0, r6
    a4a4:	f01a f93e 	bl	24724 <bt_settings_decode_key>
		if (err) {
    a4a8:	4605      	mov	r5, r0
    a4aa:	b1a0      	cbz	r0, a4d6 <ccc_set_direct+0xa2>
    a4ac:	4a1e      	ldr	r2, [pc, #120]	; (a528 <ccc_set_direct+0xf4>)
    a4ae:	4c1f      	ldr	r4, [pc, #124]	; (a52c <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    a4b0:	4630      	mov	r0, r6
    a4b2:	1aa4      	subs	r4, r4, r2
    a4b4:	08e4      	lsrs	r4, r4, #3
    a4b6:	f7f8 fb8b 	bl	2bd0 <log_strdup>
    a4ba:	01a4      	lsls	r4, r4, #6
    a4bc:	f044 0401 	orr.w	r4, r4, #1
    a4c0:	4601      	mov	r1, r0
    a4c2:	4622      	mov	r2, r4
    a4c4:	481c      	ldr	r0, [pc, #112]	; (a538 <ccc_set_direct+0x104>)
    a4c6:	f019 f8c0 	bl	2364a <log_1>
    a4ca:	e7df      	b.n	a48c <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    a4cc:	220a      	movs	r2, #10
    a4ce:	2100      	movs	r1, #0
    a4d0:	f017 faee 	bl	21ab0 <strtol>
    a4d4:	e7e0      	b.n	a498 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    a4d6:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    a4da:	f1b8 0f00 	cmp.w	r8, #0
    a4de:	d01d      	beq.n	a51c <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    a4e0:	ae08      	add	r6, sp, #32
    a4e2:	22c0      	movs	r2, #192	; 0xc0
    a4e4:	4631      	mov	r1, r6
    a4e6:	4638      	mov	r0, r7
    a4e8:	47a0      	blx	r4
			if (len < 0) {
    a4ea:	1e04      	subs	r4, r0, #0
    a4ec:	da0b      	bge.n	a506 <ccc_set_direct+0xd2>
    a4ee:	4b0e      	ldr	r3, [pc, #56]	; (a528 <ccc_set_direct+0xf4>)
    a4f0:	4a0e      	ldr	r2, [pc, #56]	; (a52c <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    a4f2:	4812      	ldr	r0, [pc, #72]	; (a53c <ccc_set_direct+0x108>)
    a4f4:	1ad2      	subs	r2, r2, r3
    a4f6:	08d2      	lsrs	r2, r2, #3
    a4f8:	0192      	lsls	r2, r2, #6
    a4fa:	f042 0201 	orr.w	r2, r2, #1
    a4fe:	4621      	mov	r1, r4
    a500:	f019 f8a3 	bl	2364a <log_1>
				return len;
    a504:	e7c4      	b.n	a490 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    a506:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    a508:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    a50a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    a50c:	4a0c      	ldr	r2, [pc, #48]	; (a540 <ccc_set_direct+0x10c>)
    a50e:	ab04      	add	r3, sp, #16
    a510:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a514:	2001      	movs	r0, #1
    a516:	f01b fad5 	bl	25ac4 <bt_gatt_foreach_attr>
	return 0;
    a51a:	e7a3      	b.n	a464 <ccc_set_direct+0x30>
			load.count = 0;
    a51c:	e9cd 0006 	strd	r0, r0, [sp, #24]
    a520:	e7f4      	b.n	a50c <ccc_set_direct+0xd8>
    a522:	bf00      	nop
    a524:	0002f7ec 	.word	0x0002f7ec
    a528:	0002bfa8 	.word	0x0002bfa8
    a52c:	0002c060 	.word	0x0002c060
    a530:	0002f7f3 	.word	0x0002f7f3
    a534:	0002e90b 	.word	0x0002e90b
    a538:	0002f691 	.word	0x0002f691
    a53c:	0002f61b 	.word	0x0002f61b
    a540:	000098e1 	.word	0x000098e1

0000a544 <bt_gatt_indicate>:
{
    a544:	b530      	push	{r4, r5, lr}
    a546:	4b39      	ldr	r3, [pc, #228]	; (a62c <bt_gatt_indicate+0xe8>)
    a548:	f3bf 8f5b 	dmb	ish
    a54c:	681b      	ldr	r3, [r3, #0]
    a54e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a552:	079a      	lsls	r2, r3, #30
{
    a554:	b08b      	sub	sp, #44	; 0x2c
    a556:	4604      	mov	r4, r0
    a558:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a55a:	d561      	bpl.n	a620 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    a55c:	6848      	ldr	r0, [r1, #4]
    a55e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    a560:	b114      	cbz	r4, a568 <bt_gatt_indicate+0x24>
    a562:	7aa3      	ldrb	r3, [r4, #10]
    a564:	2b07      	cmp	r3, #7
    a566:	d15e      	bne.n	a626 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    a568:	f7ff fe30 	bl	a1cc <bt_gatt_attr_get_handle>
    a56c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    a570:	b918      	cbnz	r0, a57a <bt_gatt_indicate+0x36>
		return -ENOENT;
    a572:	f06f 0001 	mvn.w	r0, #1
}
    a576:	b00b      	add	sp, #44	; 0x2c
    a578:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    a57a:	682a      	ldr	r2, [r5, #0]
    a57c:	b9ba      	cbnz	r2, a5ae <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    a57e:	9b05      	ldr	r3, [sp, #20]
    a580:	6818      	ldr	r0, [r3, #0]
    a582:	2300      	movs	r3, #0
    a584:	f88d 3010 	strb.w	r3, [sp, #16]
    a588:	a904      	add	r1, sp, #16
    a58a:	f642 0303 	movw	r3, #10243	; 0x2803
    a58e:	f8ad 3012 	strh.w	r3, [sp, #18]
    a592:	f01a f8eb 	bl	2476c <bt_uuid_cmp>
    a596:	b1d0      	cbz	r0, a5ce <bt_gatt_indicate+0x8a>
	if (conn) {
    a598:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    a59c:	b324      	cbz	r4, a5e8 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    a59e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    a5a0:	4601      	mov	r1, r0
		params->_ref = 1;
    a5a2:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    a5a4:	462a      	mov	r2, r5
    a5a6:	4620      	mov	r0, r4
    a5a8:	f7ff fb56 	bl	9c58 <gatt_indicate>
    a5ac:	e7e3      	b.n	a576 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a5ae:	a905      	add	r1, sp, #20
    a5b0:	9102      	str	r1, [sp, #8]
    a5b2:	491f      	ldr	r1, [pc, #124]	; (a630 <bt_gatt_indicate+0xec>)
    a5b4:	9101      	str	r1, [sp, #4]
    a5b6:	2101      	movs	r1, #1
	found->attr = NULL;
    a5b8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a5ba:	9100      	str	r1, [sp, #0]
    a5bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    a5c0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a5c2:	f7ff fe33 	bl	a22c <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    a5c6:	9b05      	ldr	r3, [sp, #20]
    a5c8:	2b00      	cmp	r3, #0
    a5ca:	d1d8      	bne.n	a57e <bt_gatt_indicate+0x3a>
    a5cc:	e7d1      	b.n	a572 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    a5ce:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a5d0:	68c3      	ldr	r3, [r0, #12]
    a5d2:	799b      	ldrb	r3, [r3, #6]
    a5d4:	069b      	lsls	r3, r3, #26
    a5d6:	d402      	bmi.n	a5de <bt_gatt_indicate+0x9a>
			return -EINVAL;
    a5d8:	f06f 0015 	mvn.w	r0, #21
    a5dc:	e7cb      	b.n	a576 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    a5de:	f01b fa2a 	bl	25a36 <bt_gatt_attr_value_handle>
    a5e2:	f8ad 0018 	strh.w	r0, [sp, #24]
    a5e6:	e7d7      	b.n	a598 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    a5e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a5ec:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    a5ee:	2302      	movs	r3, #2
    a5f0:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a5f4:	f642 1302 	movw	r3, #10498	; 0x2902
    a5f8:	f8ad 3012 	strh.w	r3, [sp, #18]
    a5fc:	ab05      	add	r3, sp, #20
    a5fe:	9302      	str	r3, [sp, #8]
    a600:	4b0c      	ldr	r3, [pc, #48]	; (a634 <bt_gatt_indicate+0xf0>)
    a602:	9301      	str	r3, [sp, #4]
    a604:	2301      	movs	r3, #1
    a606:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    a608:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a60a:	4623      	mov	r3, r4
    a60c:	aa04      	add	r2, sp, #16
    a60e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    a612:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a614:	f88d 4010 	strb.w	r4, [sp, #16]
    a618:	f7ff fe08 	bl	a22c <bt_gatt_foreach_attr_type>
	return data.err;
    a61c:	9807      	ldr	r0, [sp, #28]
    a61e:	e7aa      	b.n	a576 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    a620:	f06f 000a 	mvn.w	r0, #10
    a624:	e7a7      	b.n	a576 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    a626:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a62a:	e7a4      	b.n	a576 <bt_gatt_indicate+0x32>
    a62c:	20000094 	.word	0x20000094
    a630:	00025615 	.word	0x00025615
    a634:	0000a035 	.word	0x0000a035

0000a638 <sc_process>:
{
    a638:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a63a:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    a63e:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a640:	f850 3c08 	ldr.w	r3, [r0, #-8]
    a644:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a646:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a64a:	f06f 0101 	mvn.w	r1, #1
    a64e:	4628      	mov	r0, r5
    a650:	f01b f886 	bl	25760 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a654:	4b0d      	ldr	r3, [pc, #52]	; (a68c <sc_process+0x54>)
    a656:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    a65a:	4b0d      	ldr	r3, [pc, #52]	; (a690 <sc_process+0x58>)
    a65c:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    a660:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    a662:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    a664:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    a668:	2304      	movs	r3, #4
	sc->start = 0U;
    a66a:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    a66e:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    a672:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a676:	4631      	mov	r1, r6
    a678:	f7ff ff64 	bl	a544 <bt_gatt_indicate>
    a67c:	b918      	cbnz	r0, a686 <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    a67e:	2101      	movs	r1, #1
    a680:	4628      	mov	r0, r5
    a682:	f01b f967 	bl	25954 <atomic_set_bit>
}
    a686:	b002      	add	sp, #8
    a688:	bd70      	pop	{r4, r5, r6, pc}
    a68a:	bf00      	nop
    a68c:	0002c4cc 	.word	0x0002c4cc
    a690:	00009f6d 	.word	0x00009f6d

0000a694 <update_ccc>:
{
    a694:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a696:	4b32      	ldr	r3, [pc, #200]	; (a760 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
    a698:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    a69a:	6882      	ldr	r2, [r0, #8]
    a69c:	429a      	cmp	r2, r3
{
    a69e:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a6a0:	d11b      	bne.n	a6da <update_ccc+0x46>
	ccc = attr->user_data;
    a6a2:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    a6a4:	8933      	ldrh	r3, [r6, #8]
    a6a6:	b1c3      	cbz	r3, a6da <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a6a8:	4632      	mov	r2, r6
    a6aa:	4628      	mov	r0, r5
    a6ac:	f812 1b01 	ldrb.w	r1, [r2], #1
    a6b0:	f01a fa6f 	bl	24b92 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    a6b4:	b188      	cbz	r0, a6da <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    a6b6:	222a      	movs	r2, #42	; 0x2a
    a6b8:	4621      	mov	r1, r4
    a6ba:	4628      	mov	r0, r5
    a6bc:	f01b fa10 	bl	25ae0 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    a6c0:	2803      	cmp	r0, #3
    a6c2:	d10d      	bne.n	a6e0 <update_ccc+0x4c>
    a6c4:	4a27      	ldr	r2, [pc, #156]	; (a764 <update_ccc+0xd0>)
    a6c6:	4b28      	ldr	r3, [pc, #160]	; (a768 <update_ccc+0xd4>)
				BT_WARN("CCC %p not writable", attr);
    a6c8:	4828      	ldr	r0, [pc, #160]	; (a76c <update_ccc+0xd8>)
    a6ca:	1ad2      	subs	r2, r2, r3
    a6cc:	08d2      	lsrs	r2, r2, #3
    a6ce:	0192      	lsls	r2, r2, #6
    a6d0:	f042 0202 	orr.w	r2, r2, #2
    a6d4:	4621      	mov	r1, r4
    a6d6:	f018 ffb8 	bl	2364a <log_1>
}
    a6da:	2001      	movs	r0, #1
    a6dc:	b002      	add	sp, #8
    a6de:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    a6e0:	4631      	mov	r1, r6
    a6e2:	4620      	mov	r0, r4
    a6e4:	f01a ff7a 	bl	255dc <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    a6e8:	4b21      	ldr	r3, [pc, #132]	; (a770 <update_ccc+0xdc>)
    a6ea:	429e      	cmp	r6, r3
    a6ec:	d1f5      	bne.n	a6da <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a6ee:	7a28      	ldrb	r0, [r5, #8]
    a6f0:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a6f4:	f7fe ffd2 	bl	969c <find_sc_cfg>
	if (!cfg) {
    a6f8:	4604      	mov	r4, r0
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d0ed      	beq.n	a6da <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    a6fe:	8902      	ldrh	r2, [r0, #8]
    a700:	8943      	ldrh	r3, [r0, #10]
    a702:	ea52 0103 	orrs.w	r1, r2, r3
    a706:	d0e8      	beq.n	a6da <update_ccc+0x46>
	index = bt_conn_index(conn);
    a708:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    a70a:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    a70e:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    a712:	f7fd fc2d 	bl	7f70 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    a716:	4917      	ldr	r1, [pc, #92]	; (a774 <update_ccc+0xe0>)
    a718:	4a17      	ldr	r2, [pc, #92]	; (a778 <update_ccc+0xe4>)
    a71a:	2318      	movs	r3, #24
    a71c:	fb03 1300 	mla	r3, r3, r0, r1
    a720:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    a722:	4a16      	ldr	r2, [pc, #88]	; (a77c <update_ccc+0xe8>)
    a724:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    a726:	aa01      	add	r2, sp, #4
    a728:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    a72a:	2204      	movs	r2, #4
    a72c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    a72e:	b203      	sxth	r3, r0
    a730:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a734:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a738:	4628      	mov	r0, r5
    a73a:	f7ff ff03 	bl	a544 <bt_gatt_indicate>
    a73e:	b148      	cbz	r0, a754 <update_ccc+0xc0>
    a740:	4908      	ldr	r1, [pc, #32]	; (a764 <update_ccc+0xd0>)
    a742:	4b09      	ldr	r3, [pc, #36]	; (a768 <update_ccc+0xd4>)
		BT_ERR("SC restore indication failed");
    a744:	480e      	ldr	r0, [pc, #56]	; (a780 <update_ccc+0xec>)
    a746:	1ac9      	subs	r1, r1, r3
    a748:	08c9      	lsrs	r1, r1, #3
    a74a:	0189      	lsls	r1, r1, #6
    a74c:	f041 0101 	orr.w	r1, r1, #1
    a750:	f018 ff6e 	bl	23630 <log_0>
__ssp_bos_icheck3(memset, void *, int)
    a754:	2300      	movs	r3, #0
    a756:	60a3      	str	r3, [r4, #8]
		sc_store(cfg);
    a758:	4620      	mov	r0, r4
    a75a:	f7fe ffcd 	bl	96f8 <sc_store>
    a75e:	e7bc      	b.n	a6da <update_ccc+0x46>
    a760:	00009795 	.word	0x00009795
    a764:	0002c060 	.word	0x0002c060
    a768:	0002bfa8 	.word	0x0002bfa8
    a76c:	0002f7ff 	.word	0x0002f7ff
    a770:	20000410 	.word	0x20000410
    a774:	200029fc 	.word	0x200029fc
    a778:	0002c4cc 	.word	0x0002c4cc
    a77c:	00025971 	.word	0x00025971
    a780:	0002f813 	.word	0x0002f813

0000a784 <bt_gatt_discover>:
{
    a784:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a786:	7a83      	ldrb	r3, [r0, #10]
    a788:	2b07      	cmp	r3, #7
{
    a78a:	b085      	sub	sp, #20
    a78c:	4605      	mov	r5, r0
    a78e:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    a790:	f040 80dc 	bne.w	a94c <bt_gatt_discover+0x1c8>
	switch (params->type) {
    a794:	7c09      	ldrb	r1, [r1, #16]
    a796:	2905      	cmp	r1, #5
    a798:	f200 80cd 	bhi.w	a936 <bt_gatt_discover+0x1b2>
    a79c:	e8df f001 	tbb	[pc, r1]
    a7a0:	66660303 	.word	0x66660303
    a7a4:	b784      	.short	0xb784
		if (params->uuid) {
    a7a6:	6823      	ldr	r3, [r4, #0]
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d041      	beq.n	a830 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    a7ac:	2206      	movs	r2, #6
    a7ae:	4611      	mov	r1, r2
    a7b0:	f7fe fa68 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    a7b4:	4606      	mov	r6, r0
    a7b6:	b918      	cbnz	r0, a7c0 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    a7b8:	f06f 000b 	mvn.w	r0, #11
}
    a7bc:	b005      	add	sp, #20
    a7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a7c0:	f100 0708 	add.w	r7, r0, #8
    a7c4:	2106      	movs	r1, #6
    a7c6:	4638      	mov	r0, r7
    a7c8:	f01b fb6a 	bl	25ea0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a7cc:	8923      	ldrh	r3, [r4, #8]
    a7ce:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a7d0:	89e3      	ldrh	r3, [r4, #14]
    a7d2:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a7d4:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
    a7d6:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    a7d8:	f642 0301 	movw	r3, #10241	; 0x2801
    a7dc:	bf08      	it	eq
    a7de:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    a7e2:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    a7e4:	6823      	ldr	r3, [r4, #0]
    a7e6:	7819      	ldrb	r1, [r3, #0]
    a7e8:	b189      	cbz	r1, a80e <bt_gatt_discover+0x8a>
    a7ea:	2902      	cmp	r1, #2
    a7ec:	d01a      	beq.n	a824 <bt_gatt_discover+0xa0>
    a7ee:	4b59      	ldr	r3, [pc, #356]	; (a954 <bt_gatt_discover+0x1d0>)
    a7f0:	4a59      	ldr	r2, [pc, #356]	; (a958 <bt_gatt_discover+0x1d4>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    a7f2:	485a      	ldr	r0, [pc, #360]	; (a95c <bt_gatt_discover+0x1d8>)
    a7f4:	1ad2      	subs	r2, r2, r3
    a7f6:	08d2      	lsrs	r2, r2, #3
    a7f8:	0192      	lsls	r2, r2, #6
    a7fa:	f042 0201 	orr.w	r2, r2, #1
    a7fe:	f018 ff24 	bl	2364a <log_1>
		net_buf_unref(buf);
    a802:	4630      	mov	r0, r6
    a804:	f00d fe0e 	bl	18424 <net_buf_unref>
	return -EINVAL;
    a808:	f06f 0015 	mvn.w	r0, #21
    a80c:	e7d6      	b.n	a7bc <bt_gatt_discover+0x38>
	net_buf_simple_add_le16(&buf->b, val);
    a80e:	8859      	ldrh	r1, [r3, #2]
    a810:	4638      	mov	r0, r7
    a812:	f01b fb5d 	bl	25ed0 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    a816:	4a52      	ldr	r2, [pc, #328]	; (a960 <bt_gatt_discover+0x1dc>)
    a818:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a81a:	4631      	mov	r1, r6
    a81c:	4628      	mov	r0, r5
    a81e:	f7ff f9df 	bl	9be0 <gatt_send.constprop.0>
    a822:	e7cb      	b.n	a7bc <bt_gatt_discover+0x38>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a824:	2210      	movs	r2, #16
    a826:	1c59      	adds	r1, r3, #1
    a828:	4638      	mov	r0, r7
    a82a:	f01b fb3f 	bl	25eac <net_buf_simple_add_mem>
    a82e:	e7f2      	b.n	a816 <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    a830:	2204      	movs	r2, #4
    a832:	2110      	movs	r1, #16
    a834:	f7fe fa26 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    a838:	4606      	mov	r6, r0
    a83a:	2800      	cmp	r0, #0
    a83c:	d0bc      	beq.n	a7b8 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a83e:	f100 0708 	add.w	r7, r0, #8
    a842:	2104      	movs	r1, #4
    a844:	4638      	mov	r0, r7
    a846:	f01b fb2b 	bl	25ea0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a84a:	8923      	ldrh	r3, [r4, #8]
    a84c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a84e:	89e3      	ldrh	r3, [r4, #14]
    a850:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a852:	7c23      	ldrb	r3, [r4, #16]
    a854:	b93b      	cbnz	r3, a866 <bt_gatt_discover+0xe2>
	net_buf_simple_add_le16(&buf->b, val);
    a856:	f44f 5120 	mov.w	r1, #10240	; 0x2800
    a85a:	4638      	mov	r0, r7
    a85c:	f01b fb38 	bl	25ed0 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    a860:	4a40      	ldr	r2, [pc, #256]	; (a964 <bt_gatt_discover+0x1e0>)
    a862:	4623      	mov	r3, r4
    a864:	e7d9      	b.n	a81a <bt_gatt_discover+0x96>
    a866:	f642 0101 	movw	r1, #10241	; 0x2801
    a86a:	e7f6      	b.n	a85a <bt_gatt_discover+0xd6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    a86c:	2204      	movs	r2, #4
    a86e:	2108      	movs	r1, #8
    a870:	f7fe fa08 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    a874:	4606      	mov	r6, r0
    a876:	2800      	cmp	r0, #0
    a878:	d09e      	beq.n	a7b8 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a87a:	f100 0708 	add.w	r7, r0, #8
    a87e:	2104      	movs	r1, #4
    a880:	4638      	mov	r0, r7
    a882:	f01b fb0d 	bl	25ea0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a886:	8923      	ldrh	r3, [r4, #8]
    a888:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a88a:	89e3      	ldrh	r3, [r4, #14]
    a88c:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    a88e:	7c23      	ldrb	r3, [r4, #16]
    a890:	2b02      	cmp	r3, #2
	net_buf_simple_add_le16(&buf->b, val);
    a892:	bf0c      	ite	eq
    a894:	f642 0102 	movweq	r1, #10242	; 0x2802
    a898:	f642 0103 	movwne	r1, #10243	; 0x2803
    a89c:	4638      	mov	r0, r7
    a89e:	f01b fb17 	bl	25ed0 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    a8a2:	4a31      	ldr	r2, [pc, #196]	; (a968 <bt_gatt_discover+0x1e4>)
    a8a4:	4623      	mov	r3, r4
    a8a6:	e7b8      	b.n	a81a <bt_gatt_discover+0x96>
		if (params->uuid &&
    a8a8:	6820      	ldr	r0, [r4, #0]
    a8aa:	b380      	cbz	r0, a90e <bt_gatt_discover+0x18a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a8ac:	2600      	movs	r6, #0
    a8ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a8b2:	4669      	mov	r1, sp
    a8b4:	f88d 6000 	strb.w	r6, [sp]
    a8b8:	f8ad 3002 	strh.w	r3, [sp, #2]
    a8bc:	f019 ff56 	bl	2476c <bt_uuid_cmp>
		if (params->uuid &&
    a8c0:	2800      	cmp	r0, #0
    a8c2:	d0a1      	beq.n	a808 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a8c4:	f642 0301 	movw	r3, #10241	; 0x2801
    a8c8:	6820      	ldr	r0, [r4, #0]
    a8ca:	f88d 6004 	strb.w	r6, [sp, #4]
    a8ce:	a901      	add	r1, sp, #4
    a8d0:	f8ad 3006 	strh.w	r3, [sp, #6]
    a8d4:	f019 ff4a 	bl	2476c <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a8d8:	2800      	cmp	r0, #0
    a8da:	d095      	beq.n	a808 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a8dc:	f642 0302 	movw	r3, #10242	; 0x2802
    a8e0:	6820      	ldr	r0, [r4, #0]
    a8e2:	f88d 6008 	strb.w	r6, [sp, #8]
    a8e6:	a902      	add	r1, sp, #8
    a8e8:	f8ad 300a 	strh.w	r3, [sp, #10]
    a8ec:	f019 ff3e 	bl	2476c <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a8f0:	2800      	cmp	r0, #0
    a8f2:	d089      	beq.n	a808 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    a8f4:	f642 0303 	movw	r3, #10243	; 0x2803
    a8f8:	6820      	ldr	r0, [r4, #0]
    a8fa:	f88d 600c 	strb.w	r6, [sp, #12]
    a8fe:	a903      	add	r1, sp, #12
    a900:	f8ad 300e 	strh.w	r3, [sp, #14]
    a904:	f019 ff32 	bl	2476c <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a908:	2800      	cmp	r0, #0
    a90a:	f43f af7d 	beq.w	a808 <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    a90e:	2204      	movs	r2, #4
    a910:	4611      	mov	r1, r2
    a912:	4628      	mov	r0, r5
    a914:	f7fe f9b6 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    a918:	4606      	mov	r6, r0
    a91a:	2800      	cmp	r0, #0
    a91c:	f43f af4c 	beq.w	a7b8 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a920:	2104      	movs	r1, #4
    a922:	3008      	adds	r0, #8
    a924:	f01b fabc 	bl	25ea0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a928:	8923      	ldrh	r3, [r4, #8]
    a92a:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a92c:	89e3      	ldrh	r3, [r4, #14]
    a92e:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a930:	4a0e      	ldr	r2, [pc, #56]	; (a96c <bt_gatt_discover+0x1e8>)
    a932:	4623      	mov	r3, r4
    a934:	e771      	b.n	a81a <bt_gatt_discover+0x96>
    a936:	4b07      	ldr	r3, [pc, #28]	; (a954 <bt_gatt_discover+0x1d0>)
    a938:	4a07      	ldr	r2, [pc, #28]	; (a958 <bt_gatt_discover+0x1d4>)
		BT_ERR("Invalid discovery type: %u", params->type);
    a93a:	480d      	ldr	r0, [pc, #52]	; (a970 <bt_gatt_discover+0x1ec>)
    a93c:	1ad2      	subs	r2, r2, r3
    a93e:	08d2      	lsrs	r2, r2, #3
    a940:	0192      	lsls	r2, r2, #6
    a942:	f042 0201 	orr.w	r2, r2, #1
    a946:	f018 fe80 	bl	2364a <log_1>
    a94a:	e75d      	b.n	a808 <bt_gatt_discover+0x84>
		return -ENOTCONN;
    a94c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a950:	e734      	b.n	a7bc <bt_gatt_discover+0x38>
    a952:	bf00      	nop
    a954:	0002bfa8 	.word	0x0002bfa8
    a958:	0002c060 	.word	0x0002c060
    a95c:	0002f830 	.word	0x0002f830
    a960:	00025b61 	.word	0x00025b61
    a964:	0000a975 	.word	0x0000a975
    a968:	0000aa8d 	.word	0x0000aa8d
    a96c:	0000ad75 	.word	0x0000ad75
    a970:	0002f845 	.word	0x0002f845

0000a974 <gatt_read_group_rsp>:
{
    a974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a978:	b08e      	sub	sp, #56	; 0x38
    a97a:	4690      	mov	r8, r2
    a97c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    a97e:	4606      	mov	r6, r0
	if (err) {
    a980:	460a      	mov	r2, r1
    a982:	b131      	cbz	r1, a992 <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    a984:	687b      	ldr	r3, [r7, #4]
    a986:	463a      	mov	r2, r7
    a988:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    a98a:	4798      	blx	r3
}
    a98c:	b00e      	add	sp, #56	; 0x38
    a98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (rsp->len) {
    a992:	f898 1000 	ldrb.w	r1, [r8]
    a996:	2906      	cmp	r1, #6
    a998:	d011      	beq.n	a9be <gatt_read_group_rsp+0x4a>
    a99a:	2914      	cmp	r1, #20
    a99c:	d00e      	beq.n	a9bc <gatt_read_group_rsp+0x48>
    a99e:	4a38      	ldr	r2, [pc, #224]	; (aa80 <gatt_read_group_rsp+0x10c>)
    a9a0:	4b38      	ldr	r3, [pc, #224]	; (aa84 <gatt_read_group_rsp+0x110>)
		BT_ERR("Invalid data len %u", rsp->len);
    a9a2:	4839      	ldr	r0, [pc, #228]	; (aa88 <gatt_read_group_rsp+0x114>)
    a9a4:	1ad2      	subs	r2, r2, r3
    a9a6:	08d2      	lsrs	r2, r2, #3
    a9a8:	0192      	lsls	r2, r2, #6
    a9aa:	f042 0201 	orr.w	r2, r2, #1
    a9ae:	f018 fe4c 	bl	2364a <log_1>
	params->func(conn, NULL, params);
    a9b2:	687b      	ldr	r3, [r7, #4]
    a9b4:	463a      	mov	r2, r7
    a9b6:	2100      	movs	r1, #0
    a9b8:	4630      	mov	r0, r6
    a9ba:	e7e6      	b.n	a98a <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    a9bc:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    a9be:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
    a9c0:	2500      	movs	r5, #0
		u.uuid.type = BT_UUID_TYPE_128;
    a9c2:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a9c6:	b29c      	uxth	r4, r3
    a9c8:	f108 0901 	add.w	r9, r8, #1
		struct bt_gatt_attr attr = {};
    a9cc:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
    a9ce:	f898 3000 	ldrb.w	r3, [r8]
    a9d2:	42a3      	cmp	r3, r4
    a9d4:	d909      	bls.n	a9ea <gatt_read_group_rsp+0x76>
	if (length == 0U && end_handle) {
    a9d6:	2c00      	cmp	r4, #0
    a9d8:	d1eb      	bne.n	a9b2 <gatt_read_group_rsp+0x3e>
    a9da:	2d00      	cmp	r5, #0
    a9dc:	d0e9      	beq.n	a9b2 <gatt_read_group_rsp+0x3e>
	gatt_discover_next(conn, handle, params);
    a9de:	463a      	mov	r2, r7
    a9e0:	4629      	mov	r1, r5
    a9e2:	4630      	mov	r0, r6
    a9e4:	f01b f89f 	bl	25b26 <gatt_discover_next>
    a9e8:	e7d0      	b.n	a98c <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    a9ea:	2214      	movs	r2, #20
    a9ec:	2100      	movs	r1, #0
    a9ee:	a809      	add	r0, sp, #36	; 0x24
    a9f0:	f020 ff00 	bl	2b7f4 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    a9f4:	f8b9 2000 	ldrh.w	r2, [r9]
    a9f8:	b293      	uxth	r3, r2
		if (!start_handle) {
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d0d9      	beq.n	a9b2 <gatt_read_group_rsp+0x3e>
		end_handle = sys_le16_to_cpu(data->end_handle);
    a9fe:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    aa02:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
    aa04:	2d00      	cmp	r5, #0
    aa06:	d0d4      	beq.n	a9b2 <gatt_read_group_rsp+0x3e>
    aa08:	42ab      	cmp	r3, r5
    aa0a:	d8d2      	bhi.n	a9b2 <gatt_read_group_rsp+0x3e>
		switch (u.uuid.type) {
    aa0c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    aa10:	b31b      	cbz	r3, aa5a <gatt_read_group_rsp+0xe6>
    aa12:	2b02      	cmp	r3, #2
    aa14:	d026      	beq.n	aa64 <gatt_read_group_rsp+0xf0>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    aa16:	7c3b      	ldrb	r3, [r7, #16]
		value.end_handle = end_handle;
    aa18:	f8ad 100c 	strh.w	r1, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    aa1c:	2b00      	cmp	r3, #0
    aa1e:	f642 0301 	movw	r3, #10241	; 0x2801
    aa22:	bf08      	it	eq
    aa24:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    aa28:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    aa2c:	ab04      	add	r3, sp, #16
    aa2e:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    aa30:	ab01      	add	r3, sp, #4
    aa32:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    aa34:	ab02      	add	r3, sp, #8
		attr.handle = start_handle;
    aa36:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		attr.user_data = &value;
    aa3a:	930c      	str	r3, [sp, #48]	; 0x30
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    aa3c:	f88d a004 	strb.w	sl, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    aa40:	687b      	ldr	r3, [r7, #4]
    aa42:	463a      	mov	r2, r7
    aa44:	a909      	add	r1, sp, #36	; 0x24
    aa46:	4630      	mov	r0, r6
    aa48:	4798      	blx	r3
    aa4a:	2800      	cmp	r0, #0
    aa4c:	d09e      	beq.n	a98c <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    aa4e:	f898 2000 	ldrb.w	r2, [r8]
    aa52:	1aa4      	subs	r4, r4, r2
    aa54:	b2a4      	uxth	r4, r4
    aa56:	4491      	add	r9, r2
    aa58:	e7b9      	b.n	a9ce <gatt_read_group_rsp+0x5a>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    aa5a:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    aa5e:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    aa62:	e7d8      	b.n	aa16 <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    aa64:	f109 0304 	add.w	r3, r9, #4
    aa68:	f10d 0011 	add.w	r0, sp, #17
    aa6c:	f109 0c14 	add.w	ip, r9, #20
    aa70:	f853 eb04 	ldr.w	lr, [r3], #4
    aa74:	f840 eb04 	str.w	lr, [r0], #4
    aa78:	4563      	cmp	r3, ip
    aa7a:	d1f9      	bne.n	aa70 <gatt_read_group_rsp+0xfc>
    aa7c:	e7cb      	b.n	aa16 <gatt_read_group_rsp+0xa2>
    aa7e:	bf00      	nop
    aa80:	0002c060 	.word	0x0002c060
    aa84:	0002bfa8 	.word	0x0002bfa8
    aa88:	0002f860 	.word	0x0002f860

0000aa8c <gatt_read_type_rsp>:
{
    aa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa90:	b091      	sub	sp, #68	; 0x44
    aa92:	4690      	mov	r8, r2
    aa94:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    aa96:	4607      	mov	r7, r0
	if (err) {
    aa98:	460a      	mov	r2, r1
    aa9a:	b121      	cbz	r1, aaa6 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    aa9c:	686b      	ldr	r3, [r5, #4]
    aa9e:	462a      	mov	r2, r5
    aaa0:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    aaa2:	4798      	blx	r3
	if (!handle) {
    aaa4:	e06d      	b.n	ab82 <gatt_read_type_rsp+0xf6>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    aaa6:	7c28      	ldrb	r0, [r5, #16]
    aaa8:	f898 1000 	ldrb.w	r1, [r8]
    aaac:	2802      	cmp	r0, #2
    aaae:	f040 8087 	bne.w	abc0 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    aab2:	2906      	cmp	r1, #6
    aab4:	d019      	beq.n	aaea <gatt_read_type_rsp+0x5e>
    aab6:	2908      	cmp	r1, #8
    aab8:	f040 8086 	bne.w	abc8 <gatt_read_type_rsp+0x13c>
		u.uuid.type = BT_UUID_TYPE_16;
    aabc:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    aac0:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    aac2:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    aac4:	b2a4      	uxth	r4, r4
    aac6:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
    aaca:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    aace:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    aad0:	f898 3000 	ldrb.w	r3, [r8]
    aad4:	42a3      	cmp	r3, r4
    aad6:	d90b      	bls.n	aaf0 <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
    aad8:	b914      	cbnz	r4, aae0 <gatt_read_type_rsp+0x54>
    aada:	2e00      	cmp	r6, #0
    aadc:	f040 80e1 	bne.w	aca2 <gatt_read_type_rsp+0x216>
	params->func(conn, NULL, params);
    aae0:	686b      	ldr	r3, [r5, #4]
    aae2:	462a      	mov	r2, r5
    aae4:	2100      	movs	r1, #0
    aae6:	4638      	mov	r0, r7
    aae8:	e7db      	b.n	aaa2 <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    aaea:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    aaee:	e7e7      	b.n	aac0 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    aaf0:	f8b9 3000 	ldrh.w	r3, [r9]
    aaf4:	b29e      	uxth	r6, r3
		if (!handle) {
    aaf6:	2e00      	cmp	r6, #0
    aaf8:	d0f2      	beq.n	aae0 <gatt_read_type_rsp+0x54>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    aafa:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    aafe:	f8ad 2014 	strh.w	r2, [sp, #20]
    ab02:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    ab04:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    ab08:	f8ad 2016 	strh.w	r2, [sp, #22]
    ab0c:	b291      	uxth	r1, r2
		switch (u.uuid.type) {
    ab0e:	f89d 2018 	ldrb.w	r2, [sp, #24]
    ab12:	b182      	cbz	r2, ab36 <gatt_read_type_rsp+0xaa>
    ab14:	2a02      	cmp	r2, #2
    ab16:	d019      	beq.n	ab4c <gatt_read_type_rsp+0xc0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ab18:	6829      	ldr	r1, [r5, #0]
    ab1a:	2900      	cmp	r1, #0
    ab1c:	d037      	beq.n	ab8e <gatt_read_type_rsp+0x102>
    ab1e:	4650      	mov	r0, sl
    ab20:	9301      	str	r3, [sp, #4]
    ab22:	f019 fe23 	bl	2476c <bt_uuid_cmp>
    ab26:	9b01      	ldr	r3, [sp, #4]
    ab28:	b388      	cbz	r0, ab8e <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    ab2a:	f898 2000 	ldrb.w	r2, [r8]
    ab2e:	1aa4      	subs	r4, r4, r2
    ab30:	b2a4      	uxth	r4, r4
    ab32:	4491      	add	r9, r2
    ab34:	e7cc      	b.n	aad0 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    ab36:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    ab3a:	f899 2006 	ldrb.w	r2, [r9, #6]
    ab3e:	f899 1007 	ldrb.w	r1, [r9, #7]
    ab42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ab46:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    ab4a:	e7e5      	b.n	ab18 <gatt_read_type_rsp+0x8c>
			params->_included.start_handle = value.start_handle;
    ab4c:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    ab4e:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
    ab50:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    ab52:	210a      	movs	r1, #10
    ab54:	4638      	mov	r0, r7
    ab56:	9201      	str	r2, [sp, #4]
    ab58:	f7fe f894 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    ab5c:	4604      	mov	r4, r0
    ab5e:	b198      	cbz	r0, ab88 <gatt_read_type_rsp+0xfc>
    ab60:	9a01      	ldr	r2, [sp, #4]
    ab62:	3008      	adds	r0, #8
    ab64:	4611      	mov	r1, r2
    ab66:	f01b f99b 	bl	25ea0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    ab6a:	896b      	ldrh	r3, [r5, #10]
    ab6c:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    ab6e:	4a50      	ldr	r2, [pc, #320]	; (acb0 <gatt_read_type_rsp+0x224>)
    ab70:	462b      	mov	r3, r5
    ab72:	4621      	mov	r1, r4
    ab74:	4638      	mov	r0, r7
    ab76:	f7ff f833 	bl	9be0 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    ab7a:	b286      	uxth	r6, r0
	if (!handle) {
    ab7c:	2e00      	cmp	r6, #0
    ab7e:	f040 8090 	bne.w	aca2 <gatt_read_type_rsp+0x216>
}
    ab82:	b011      	add	sp, #68	; 0x44
    ab84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    ab88:	f06f 000b 	mvn.w	r0, #11
    ab8c:	e7f5      	b.n	ab7a <gatt_read_type_rsp+0xee>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab8e:	f642 0202 	movw	r2, #10242	; 0x2802
    ab92:	f8ad 200e 	strh.w	r2, [sp, #14]
    ab96:	aa03      	add	r2, sp, #12
    ab98:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    ab9c:	aa04      	add	r2, sp, #16
    ab9e:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    aba0:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    aba4:	f88d b00c 	strb.w	fp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    aba8:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    abaa:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    abae:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    abb2:	462a      	mov	r2, r5
    abb4:	a90b      	add	r1, sp, #44	; 0x2c
    abb6:	4638      	mov	r0, r7
    abb8:	4798      	blx	r3
    abba:	2800      	cmp	r0, #0
    abbc:	d1b5      	bne.n	ab2a <gatt_read_type_rsp+0x9e>
    abbe:	e7e0      	b.n	ab82 <gatt_read_type_rsp+0xf6>
	switch (rsp->len) {
    abc0:	2907      	cmp	r1, #7
    abc2:	d00d      	beq.n	abe0 <gatt_read_type_rsp+0x154>
    abc4:	2915      	cmp	r1, #21
    abc6:	d00a      	beq.n	abde <gatt_read_type_rsp+0x152>
    abc8:	4b3a      	ldr	r3, [pc, #232]	; (acb4 <gatt_read_type_rsp+0x228>)
    abca:	4a3b      	ldr	r2, [pc, #236]	; (acb8 <gatt_read_type_rsp+0x22c>)
		BT_ERR("Invalid data len %u", rsp->len);
    abcc:	483b      	ldr	r0, [pc, #236]	; (acbc <gatt_read_type_rsp+0x230>)
    abce:	1ad2      	subs	r2, r2, r3
    abd0:	08d2      	lsrs	r2, r2, #3
    abd2:	0192      	lsls	r2, r2, #6
    abd4:	f042 0201 	orr.w	r2, r2, #1
    abd8:	f018 fd37 	bl	2364a <log_1>
		goto done;
    abdc:	e780      	b.n	aae0 <gatt_read_type_rsp+0x54>
		u.uuid.type = BT_UUID_TYPE_128;
    abde:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    abe0:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    abe2:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_128;
    abe4:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    abe8:	b2a4      	uxth	r4, r4
    abea:	f108 0901 	add.w	r9, r8, #1
    abee:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    abf2:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    abf4:	f898 3000 	ldrb.w	r3, [r8]
    abf8:	42a3      	cmp	r3, r4
    abfa:	f63f af6d 	bhi.w	aad8 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    abfe:	f8b9 3000 	ldrh.w	r3, [r9]
    ac02:	b29e      	uxth	r6, r3
		if (!handle) {
    ac04:	2e00      	cmp	r6, #0
    ac06:	f43f af6b 	beq.w	aae0 <gatt_read_type_rsp+0x54>
		switch (u.uuid.type) {
    ac0a:	f89d 2018 	ldrb.w	r2, [sp, #24]
    ac0e:	b17a      	cbz	r2, ac30 <gatt_read_type_rsp+0x1a4>
    ac10:	2a02      	cmp	r2, #2
    ac12:	d016      	beq.n	ac42 <gatt_read_type_rsp+0x1b6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ac14:	6829      	ldr	r1, [r5, #0]
    ac16:	b309      	cbz	r1, ac5c <gatt_read_type_rsp+0x1d0>
    ac18:	4650      	mov	r0, sl
    ac1a:	9301      	str	r3, [sp, #4]
    ac1c:	f019 fda6 	bl	2476c <bt_uuid_cmp>
    ac20:	9b01      	ldr	r3, [sp, #4]
    ac22:	b1d8      	cbz	r0, ac5c <gatt_read_type_rsp+0x1d0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    ac24:	f898 2000 	ldrb.w	r2, [r8]
    ac28:	1aa4      	subs	r4, r4, r2
    ac2a:	b2a4      	uxth	r4, r4
    ac2c:	4491      	add	r9, r2
    ac2e:	e7e1      	b.n	abf4 <gatt_read_type_rsp+0x168>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    ac30:	f899 2005 	ldrb.w	r2, [r9, #5]
    ac34:	f899 1006 	ldrb.w	r1, [r9, #6]
    ac38:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ac3c:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    ac40:	e7e8      	b.n	ac14 <gatt_read_type_rsp+0x188>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    ac42:	f109 0205 	add.w	r2, r9, #5
    ac46:	f10d 0119 	add.w	r1, sp, #25
    ac4a:	f109 0015 	add.w	r0, r9, #21
    ac4e:	f852 cb04 	ldr.w	ip, [r2], #4
    ac52:	f841 cb04 	str.w	ip, [r1], #4
    ac56:	4282      	cmp	r2, r0
    ac58:	d1f9      	bne.n	ac4e <gatt_read_type_rsp+0x1c2>
    ac5a:	e7db      	b.n	ac14 <gatt_read_type_rsp+0x188>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    ac5c:	f899 2002 	ldrb.w	r2, [r9, #2]
    ac60:	f88d 2016 	strb.w	r2, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ac64:	f642 0203 	movw	r2, #10243	; 0x2803
    ac68:	f8ad 200e 	strh.w	r2, [sp, #14]
    ac6c:	aa03      	add	r2, sp, #12
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    ac6e:	f8b9 1003 	ldrh.w	r1, [r9, #3]
    ac72:	f8ad 1014 	strh.w	r1, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ac76:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    ac7a:	aa04      	add	r2, sp, #16
    ac7c:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    ac7e:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    ac82:	f8cd a010 	str.w	sl, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac86:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ac88:	f88d b00c 	strb.w	fp, [sp, #12]
    ac8c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ac90:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac94:	462a      	mov	r2, r5
    ac96:	a90b      	add	r1, sp, #44	; 0x2c
    ac98:	4638      	mov	r0, r7
    ac9a:	4798      	blx	r3
    ac9c:	2800      	cmp	r0, #0
    ac9e:	d1c1      	bne.n	ac24 <gatt_read_type_rsp+0x198>
    aca0:	e76f      	b.n	ab82 <gatt_read_type_rsp+0xf6>
	gatt_discover_next(conn, handle, params);
    aca2:	462a      	mov	r2, r5
    aca4:	4631      	mov	r1, r6
    aca6:	4638      	mov	r0, r7
    aca8:	f01a ff3d 	bl	25b26 <gatt_discover_next>
    acac:	e769      	b.n	ab82 <gatt_read_type_rsp+0xf6>
    acae:	bf00      	nop
    acb0:	0000acc1 	.word	0x0000acc1
    acb4:	0002bfa8 	.word	0x0002bfa8
    acb8:	0002c060 	.word	0x0002c060
    acbc:	0002f860 	.word	0x0002f860

0000acc0 <read_included_uuid_cb>:
{
    acc0:	b570      	push	{r4, r5, r6, lr}
    acc2:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    acc4:	2b10      	cmp	r3, #16
{
    acc6:	9c12      	ldr	r4, [sp, #72]	; 0x48
    acc8:	4605      	mov	r5, r0
    acca:	4619      	mov	r1, r3
	if (length != 16U) {
    accc:	d010      	beq.n	acf0 <read_included_uuid_cb+0x30>
    acce:	4b26      	ldr	r3, [pc, #152]	; (ad68 <read_included_uuid_cb+0xa8>)
    acd0:	4a26      	ldr	r2, [pc, #152]	; (ad6c <read_included_uuid_cb+0xac>)
		BT_ERR("Invalid data len %u", length);
    acd2:	4827      	ldr	r0, [pc, #156]	; (ad70 <read_included_uuid_cb+0xb0>)
    acd4:	1ad2      	subs	r2, r2, r3
    acd6:	08d2      	lsrs	r2, r2, #3
    acd8:	0192      	lsls	r2, r2, #6
    acda:	f042 0201 	orr.w	r2, r2, #1
    acde:	f018 fcb4 	bl	2364a <log_1>
		params->func(conn, NULL, params);
    ace2:	6863      	ldr	r3, [r4, #4]
    ace4:	4622      	mov	r2, r4
    ace6:	2100      	movs	r1, #0
    ace8:	4628      	mov	r0, r5
    acea:	4798      	blx	r3
}
    acec:	b00e      	add	sp, #56	; 0x38
    acee:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    acf0:	8963      	ldrh	r3, [r4, #10]
    acf2:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
    acf6:	89a3      	ldrh	r3, [r4, #12]
    acf8:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
    acfc:	a804      	add	r0, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
    acfe:	2302      	movs	r3, #2
    ad00:	f88d 3010 	strb.w	r3, [sp, #16]
	value.uuid = &u.uuid;
    ad04:	9002      	str	r0, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    ad06:	f10d 0311 	add.w	r3, sp, #17
    ad0a:	f102 0110 	add.w	r1, r2, #16
    ad0e:	f852 6b04 	ldr.w	r6, [r2], #4
    ad12:	f843 6b04 	str.w	r6, [r3], #4
    ad16:	428a      	cmp	r2, r1
    ad18:	d1f9      	bne.n	ad0e <read_included_uuid_cb+0x4e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ad1a:	6821      	ldr	r1, [r4, #0]
    ad1c:	b9f1      	cbnz	r1, ad5c <read_included_uuid_cb+0x9c>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ad1e:	f642 0202 	movw	r2, #10242	; 0x2802
    ad22:	2300      	movs	r3, #0
    ad24:	f8ad 2006 	strh.w	r2, [sp, #6]
    ad28:	aa01      	add	r2, sp, #4
    ad2a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    ad2e:	f88d 3004 	strb.w	r3, [sp, #4]
    ad32:	aa02      	add	r2, sp, #8
    ad34:	930b      	str	r3, [sp, #44]	; 0x2c
    ad36:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
    ad3a:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ad3c:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
    ad3e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ad42:	4622      	mov	r2, r4
    ad44:	6863      	ldr	r3, [r4, #4]
    ad46:	a909      	add	r1, sp, #36	; 0x24
    ad48:	4628      	mov	r0, r5
    ad4a:	4798      	blx	r3
    ad4c:	2800      	cmp	r0, #0
    ad4e:	d0cd      	beq.n	acec <read_included_uuid_cb+0x2c>
	gatt_discover_next(conn, params->start_handle, params);
    ad50:	8921      	ldrh	r1, [r4, #8]
    ad52:	4622      	mov	r2, r4
    ad54:	4628      	mov	r0, r5
    ad56:	f01a fee6 	bl	25b26 <gatt_discover_next>
	return;
    ad5a:	e7c7      	b.n	acec <read_included_uuid_cb+0x2c>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ad5c:	f019 fd06 	bl	2476c <bt_uuid_cmp>
    ad60:	2800      	cmp	r0, #0
    ad62:	d0dc      	beq.n	ad1e <read_included_uuid_cb+0x5e>
    ad64:	e7f4      	b.n	ad50 <read_included_uuid_cb+0x90>
    ad66:	bf00      	nop
    ad68:	0002bfa8 	.word	0x0002bfa8
    ad6c:	0002c060 	.word	0x0002c060
    ad70:	0002f860 	.word	0x0002f860

0000ad74 <gatt_find_info_rsp>:
{
    ad74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad78:	b08f      	sub	sp, #60	; 0x3c
    ad7a:	4680      	mov	r8, r0
    ad7c:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    ad7e:	4608      	mov	r0, r1
    ad80:	b971      	cbnz	r1, ada0 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    ad82:	7811      	ldrb	r1, [r2, #0]
    ad84:	2901      	cmp	r1, #1
    ad86:	d011      	beq.n	adac <gatt_find_info_rsp+0x38>
    ad88:	2902      	cmp	r1, #2
    ad8a:	d028      	beq.n	adde <gatt_find_info_rsp+0x6a>
    ad8c:	4a51      	ldr	r2, [pc, #324]	; (aed4 <gatt_find_info_rsp+0x160>)
    ad8e:	4b52      	ldr	r3, [pc, #328]	; (aed8 <gatt_find_info_rsp+0x164>)
		BT_ERR("Invalid format %u", rsp->format);
    ad90:	4852      	ldr	r0, [pc, #328]	; (aedc <gatt_find_info_rsp+0x168>)
    ad92:	1ad2      	subs	r2, r2, r3
    ad94:	08d2      	lsrs	r2, r2, #3
    ad96:	0192      	lsls	r2, r2, #6
    ad98:	f042 0201 	orr.w	r2, r2, #1
    ad9c:	f018 fc55 	bl	2364a <log_1>
	params->func(conn, NULL, params);
    ada0:	6873      	ldr	r3, [r6, #4]
    ada2:	4632      	mov	r2, r6
    ada4:	2100      	movs	r1, #0
    ada6:	4640      	mov	r0, r8
    ada8:	4798      	blx	r3
    adaa:	e090      	b.n	aece <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_16;
    adac:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
    adb0:	f04f 0a04 	mov.w	sl, #4
	length--;
    adb4:	3b01      	subs	r3, #1
    adb6:	b29b      	uxth	r3, r3
	if (length < len) {
    adb8:	4553      	cmp	r3, sl
    adba:	d3f1      	bcc.n	ada0 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
    adbc:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    adc0:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    adc4:	9300      	str	r3, [sp, #0]
    adc6:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    adc8:	46cb      	mov	fp, r9
			skip = false;
    adca:	464d      	mov	r5, r9
    adcc:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
    adce:	9b00      	ldr	r3, [sp, #0]
    add0:	b953      	cbnz	r3, ade8 <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    add2:	4632      	mov	r2, r6
    add4:	4659      	mov	r1, fp
    add6:	4640      	mov	r0, r8
    add8:	f01a fea5 	bl	25b26 <gatt_discover_next>
	return;
    addc:	e077      	b.n	aece <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_128;
    adde:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
    ade2:	f04f 0a12 	mov.w	sl, #18
		break;
    ade6:	e7e5      	b.n	adb4 <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    ade8:	8823      	ldrh	r3, [r4, #0]
    adea:	f8ad 3004 	strh.w	r3, [sp, #4]
    adee:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    adf2:	f1b9 0f00 	cmp.w	r9, #0
    adf6:	d156      	bne.n	aea6 <gatt_find_info_rsp+0x132>
		switch (u.uuid.type) {
    adf8:	f89d 3010 	ldrb.w	r3, [sp, #16]
    adfc:	2b00      	cmp	r3, #0
    adfe:	d03a      	beq.n	ae76 <gatt_find_info_rsp+0x102>
    ae00:	2b02      	cmp	r3, #2
    ae02:	d03f      	beq.n	ae84 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ae04:	6831      	ldr	r1, [r6, #0]
    ae06:	2900      	cmp	r1, #0
    ae08:	d148      	bne.n	ae9c <gatt_find_info_rsp+0x128>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    ae0a:	7c33      	ldrb	r3, [r6, #16]
    ae0c:	2b04      	cmp	r3, #4
    ae0e:	d14d      	bne.n	aeac <gatt_find_info_rsp+0x138>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    ae10:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ae14:	a902      	add	r1, sp, #8
    ae16:	4638      	mov	r0, r7
    ae18:	f88d 5008 	strb.w	r5, [sp, #8]
    ae1c:	f8ad 300a 	strh.w	r3, [sp, #10]
    ae20:	f019 fca4 	bl	2476c <bt_uuid_cmp>
    ae24:	b310      	cbz	r0, ae6c <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    ae26:	f642 0301 	movw	r3, #10241	; 0x2801
    ae2a:	a903      	add	r1, sp, #12
    ae2c:	4638      	mov	r0, r7
    ae2e:	f88d 500c 	strb.w	r5, [sp, #12]
    ae32:	f8ad 300e 	strh.w	r3, [sp, #14]
    ae36:	f019 fc99 	bl	2476c <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    ae3a:	b1b8      	cbz	r0, ae6c <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    ae3c:	f642 0302 	movw	r3, #10242	; 0x2802
    ae40:	a909      	add	r1, sp, #36	; 0x24
    ae42:	4638      	mov	r0, r7
    ae44:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    ae48:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    ae4c:	f019 fc8e 	bl	2476c <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    ae50:	b160      	cbz	r0, ae6c <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    ae52:	f642 0303 	movw	r3, #10243	; 0x2803
    ae56:	a909      	add	r1, sp, #36	; 0x24
    ae58:	4638      	mov	r0, r7
    ae5a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    ae5e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    ae62:	f019 fc83 	bl	2476c <bt_uuid_cmp>
    ae66:	bb08      	cbnz	r0, aeac <gatt_find_info_rsp+0x138>
				skip = true;
    ae68:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    ae6c:	9b00      	ldr	r3, [sp, #0]
    ae6e:	3b01      	subs	r3, #1
    ae70:	9300      	str	r3, [sp, #0]
    ae72:	4454      	add	r4, sl
    ae74:	e7ab      	b.n	adce <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    ae76:	78a3      	ldrb	r3, [r4, #2]
    ae78:	78e2      	ldrb	r2, [r4, #3]
    ae7a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae7e:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    ae82:	e7bf      	b.n	ae04 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    ae84:	1ca3      	adds	r3, r4, #2
    ae86:	f10d 0211 	add.w	r2, sp, #17
    ae8a:	f104 0112 	add.w	r1, r4, #18
    ae8e:	f853 0b04 	ldr.w	r0, [r3], #4
    ae92:	f842 0b04 	str.w	r0, [r2], #4
    ae96:	428b      	cmp	r3, r1
    ae98:	d1f9      	bne.n	ae8e <gatt_find_info_rsp+0x11a>
    ae9a:	e7b3      	b.n	ae04 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ae9c:	4638      	mov	r0, r7
    ae9e:	f019 fc65 	bl	2476c <bt_uuid_cmp>
    aea2:	2800      	cmp	r0, #0
    aea4:	d0b1      	beq.n	ae0a <gatt_find_info_rsp+0x96>
			skip = false;
    aea6:	f04f 0900 	mov.w	r9, #0
    aeaa:	e7df      	b.n	ae6c <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    aeac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    aeb0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    aeb4:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    aeb8:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    aebc:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    aebe:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    aec2:	4632      	mov	r2, r6
    aec4:	a909      	add	r1, sp, #36	; 0x24
    aec6:	4640      	mov	r0, r8
    aec8:	4798      	blx	r3
    aeca:	2800      	cmp	r0, #0
    aecc:	d1ce      	bne.n	ae6c <gatt_find_info_rsp+0xf8>
}
    aece:	b00f      	add	sp, #60	; 0x3c
    aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aed4:	0002c060 	.word	0x0002c060
    aed8:	0002bfa8 	.word	0x0002bfa8
    aedc:	0002f874 	.word	0x0002f874

0000aee0 <bt_gatt_read>:
{
    aee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    aee4:	7a83      	ldrb	r3, [r0, #10]
    aee6:	2b07      	cmp	r3, #7
{
    aee8:	4605      	mov	r5, r0
    aeea:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    aeec:	d166      	bne.n	afbc <bt_gatt_read+0xdc>
	if (params->handle_count == 0) {
    aeee:	684a      	ldr	r2, [r1, #4]
    aef0:	bb1a      	cbnz	r2, af3a <bt_gatt_read+0x5a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    aef2:	2204      	movs	r2, #4
    aef4:	2108      	movs	r1, #8
    aef6:	f7fd fec5 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    aefa:	4606      	mov	r6, r0
    aefc:	b918      	cbnz	r0, af06 <bt_gatt_read+0x26>
		return -ENOMEM;
    aefe:	f06f 000b 	mvn.w	r0, #11
}
    af02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af06:	f100 0708 	add.w	r7, r0, #8
    af0a:	2104      	movs	r1, #4
    af0c:	4638      	mov	r0, r7
    af0e:	f01a ffc7 	bl	25ea0 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
    af12:	8923      	ldrh	r3, [r4, #8]
    af14:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    af16:	68e1      	ldr	r1, [r4, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
    af18:	8963      	ldrh	r3, [r4, #10]
    af1a:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    af1c:	780b      	ldrb	r3, [r1, #0]
    af1e:	b933      	cbnz	r3, af2e <bt_gatt_read+0x4e>
	net_buf_simple_add_le16(&buf->b, val);
    af20:	8849      	ldrh	r1, [r1, #2]
    af22:	4638      	mov	r0, r7
    af24:	f01a ffd4 	bl	25ed0 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af28:	4a26      	ldr	r2, [pc, #152]	; (afc4 <bt_gatt_read+0xe4>)
    af2a:	4623      	mov	r3, r4
    af2c:	e019      	b.n	af62 <bt_gatt_read+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    af2e:	2210      	movs	r2, #16
    af30:	3101      	adds	r1, #1
    af32:	4638      	mov	r0, r7
    af34:	f01a ffba 	bl	25eac <net_buf_simple_add_mem>
    af38:	e7f6      	b.n	af28 <bt_gatt_read+0x48>
	if (params->handle_count > 1) {
    af3a:	2a01      	cmp	r2, #1
    af3c:	d91e      	bls.n	af7c <bt_gatt_read+0x9c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
    af3e:	0052      	lsls	r2, r2, #1
    af40:	210e      	movs	r1, #14
    af42:	f7fd fe9f 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    af46:	4606      	mov	r6, r0
    af48:	2800      	cmp	r0, #0
    af4a:	d0d8      	beq.n	aefe <bt_gatt_read+0x1e>
    af4c:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
    af4e:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
    af52:	6862      	ldr	r2, [r4, #4]
    af54:	b2fb      	uxtb	r3, r7
    af56:	429a      	cmp	r2, r3
    af58:	f107 0701 	add.w	r7, r7, #1
    af5c:	d807      	bhi.n	af6e <bt_gatt_read+0x8e>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
    af5e:	4a1a      	ldr	r2, [pc, #104]	; (afc8 <bt_gatt_read+0xe8>)
    af60:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af62:	4631      	mov	r1, r6
    af64:	4628      	mov	r0, r5
}
    af66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af6a:	f7fe be39 	b.w	9be0 <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
    af6e:	68a2      	ldr	r2, [r4, #8]
    af70:	4640      	mov	r0, r8
    af72:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    af76:	f01a ffab 	bl	25ed0 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
    af7a:	e7ea      	b.n	af52 <bt_gatt_read+0x72>
	if (params->single.offset) {
    af7c:	894b      	ldrh	r3, [r1, #10]
    af7e:	b17b      	cbz	r3, afa0 <bt_gatt_read+0xc0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
    af80:	2204      	movs	r2, #4
    af82:	210c      	movs	r1, #12
    af84:	f7fd fe7e 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    af88:	4606      	mov	r6, r0
    af8a:	2800      	cmp	r0, #0
    af8c:	d0b7      	beq.n	aefe <bt_gatt_read+0x1e>
	return net_buf_simple_add(&buf->b, len);
    af8e:	2104      	movs	r1, #4
    af90:	3008      	adds	r0, #8
    af92:	f01a ff85 	bl	25ea0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    af96:	8923      	ldrh	r3, [r4, #8]
    af98:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
    af9a:	8963      	ldrh	r3, [r4, #10]
    af9c:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af9e:	e7c3      	b.n	af28 <bt_gatt_read+0x48>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    afa0:	2202      	movs	r2, #2
    afa2:	210a      	movs	r1, #10
    afa4:	f7fd fe6e 	bl	8c84 <bt_att_create_pdu>
	if (!buf) {
    afa8:	4606      	mov	r6, r0
    afaa:	2800      	cmp	r0, #0
    afac:	d0a7      	beq.n	aefe <bt_gatt_read+0x1e>
    afae:	2102      	movs	r1, #2
    afb0:	3008      	adds	r0, #8
    afb2:	f01a ff75 	bl	25ea0 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    afb6:	8923      	ldrh	r3, [r4, #8]
    afb8:	8003      	strh	r3, [r0, #0]
    afba:	e7b5      	b.n	af28 <bt_gatt_read+0x48>
		return -ENOTCONN;
    afbc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    afc0:	e79f      	b.n	af02 <bt_gatt_read+0x22>
    afc2:	bf00      	nop
    afc4:	0000afcd 	.word	0x0000afcd
    afc8:	0002577f 	.word	0x0002577f

0000afcc <gatt_read_rsp>:
{
    afcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    afd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    afd2:	4606      	mov	r6, r0
    afd4:	4690      	mov	r8, r2
    afd6:	4699      	mov	r9, r3
	if (err || !length) {
    afd8:	460f      	mov	r7, r1
    afda:	b901      	cbnz	r1, afde <gatt_read_rsp+0x12>
    afdc:	b953      	cbnz	r3, aff4 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
    afde:	2300      	movs	r3, #0
    afe0:	930a      	str	r3, [sp, #40]	; 0x28
    afe2:	6825      	ldr	r5, [r4, #0]
    afe4:	4622      	mov	r2, r4
    afe6:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    afe8:	4630      	mov	r0, r6
    afea:	46ac      	mov	ip, r5
}
    afec:	b003      	add	sp, #12
    afee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    aff2:	4760      	bx	ip
	if (!params->handle_count) {
    aff4:	6863      	ldr	r3, [r4, #4]
    aff6:	2b00      	cmp	r3, #0
    aff8:	d148      	bne.n	b08c <gatt_read_rsp+0xc0>
	for (length--, pdu = rsp->data; length;
    affa:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    affe:	b2ad      	uxth	r5, r5
    b000:	f102 0901 	add.w	r9, r2, #1
    b004:	b335      	cbz	r5, b054 <gatt_read_rsp+0x88>
		handle = sys_le16_to_cpu(data->handle);
    b006:	f8b9 2000 	ldrh.w	r2, [r9]
    b00a:	b293      	uxth	r3, r2
		if (!handle) {
    b00c:	b963      	cbnz	r3, b028 <gatt_read_rsp+0x5c>
    b00e:	4b30      	ldr	r3, [pc, #192]	; (b0d0 <gatt_read_rsp+0x104>)
    b010:	4930      	ldr	r1, [pc, #192]	; (b0d4 <gatt_read_rsp+0x108>)
			BT_ERR("Invalid handle");
    b012:	4831      	ldr	r0, [pc, #196]	; (b0d8 <gatt_read_rsp+0x10c>)
    b014:	1ac9      	subs	r1, r1, r3
    b016:	08c9      	lsrs	r1, r1, #3
    b018:	0189      	lsls	r1, r1, #6
    b01a:	f041 0101 	orr.w	r1, r1, #1
}
    b01e:	b003      	add	sp, #12
    b020:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
    b024:	f018 bb04 	b.w	23630 <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    b028:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
    b02c:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    b02e:	42ab      	cmp	r3, r5
    b030:	bf8c      	ite	hi
    b032:	1eab      	subhi	r3, r5, #2
    b034:	3b02      	subls	r3, #2
    b036:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
    b038:	9300      	str	r3, [sp, #0]
    b03a:	6827      	ldr	r7, [r4, #0]
    b03c:	f109 0302 	add.w	r3, r9, #2
    b040:	4622      	mov	r2, r4
    b042:	2100      	movs	r1, #0
    b044:	4630      	mov	r0, r6
    b046:	47b8      	blx	r7
    b048:	2800      	cmp	r0, #0
    b04a:	d03e      	beq.n	b0ca <gatt_read_rsp+0xfe>
		if (rsp->len > length) {
    b04c:	f898 1000 	ldrb.w	r1, [r8]
    b050:	428d      	cmp	r5, r1
    b052:	d20b      	bcs.n	b06c <gatt_read_rsp+0xa0>
	if (bt_gatt_read(conn, params) < 0) {
    b054:	4621      	mov	r1, r4
    b056:	4630      	mov	r0, r6
    b058:	f7ff ff42 	bl	aee0 <bt_gatt_read>
    b05c:	2800      	cmp	r0, #0
    b05e:	da34      	bge.n	b0ca <gatt_read_rsp+0xfe>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    b060:	2300      	movs	r3, #0
    b062:	930a      	str	r3, [sp, #40]	; 0x28
    b064:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    b066:	4622      	mov	r2, r4
    b068:	210e      	movs	r1, #14
    b06a:	e7bd      	b.n	afe8 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
    b06c:	8922      	ldrh	r2, [r4, #8]
    b06e:	8960      	ldrh	r0, [r4, #10]
    b070:	4290      	cmp	r0, r2
    b072:	d105      	bne.n	b080 <gatt_read_rsp+0xb4>
			params->func(conn, 0, params, NULL, 0);
    b074:	2300      	movs	r3, #0
    b076:	930a      	str	r3, [sp, #40]	; 0x28
    b078:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
    b07a:	4622      	mov	r2, r4
    b07c:	4619      	mov	r1, r3
    b07e:	e7b3      	b.n	afe8 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
    b080:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    b082:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
    b084:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    b086:	b2ad      	uxth	r5, r5
    b088:	4489      	add	r9, r1
    b08a:	e7bb      	b.n	b004 <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
    b08c:	f8cd 9000 	str.w	r9, [sp]
    b090:	4613      	mov	r3, r2
    b092:	6825      	ldr	r5, [r4, #0]
    b094:	4622      	mov	r2, r4
    b096:	47a8      	blx	r5
    b098:	b1b8      	cbz	r0, b0ca <gatt_read_rsp+0xfe>
	if (length < (bt_att_get_mtu(conn) - 1)) {
    b09a:	4630      	mov	r0, r6
    b09c:	f01a f9bf 	bl	2541e <bt_att_get_mtu>
    b0a0:	3801      	subs	r0, #1
    b0a2:	4581      	cmp	r9, r0
    b0a4:	da03      	bge.n	b0ae <gatt_read_rsp+0xe2>
		params->func(conn, 0, params, NULL, 0);
    b0a6:	970a      	str	r7, [sp, #40]	; 0x28
    b0a8:	6825      	ldr	r5, [r4, #0]
    b0aa:	463b      	mov	r3, r7
    b0ac:	e7e5      	b.n	b07a <gatt_read_rsp+0xae>
	params->single.offset += length;
    b0ae:	8963      	ldrh	r3, [r4, #10]
    b0b0:	eb09 0503 	add.w	r5, r9, r3
    b0b4:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
    b0b6:	4621      	mov	r1, r4
    b0b8:	4630      	mov	r0, r6
    b0ba:	f7ff ff11 	bl	aee0 <bt_gatt_read>
    b0be:	2800      	cmp	r0, #0
    b0c0:	da03      	bge.n	b0ca <gatt_read_rsp+0xfe>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    b0c2:	970a      	str	r7, [sp, #40]	; 0x28
    b0c4:	6825      	ldr	r5, [r4, #0]
    b0c6:	463b      	mov	r3, r7
    b0c8:	e7cd      	b.n	b066 <gatt_read_rsp+0x9a>
}
    b0ca:	b003      	add	sp, #12
    b0cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b0d0:	0002bfa8 	.word	0x0002bfa8
    b0d4:	0002c060 	.word	0x0002c060
    b0d8:	0002f886 	.word	0x0002f886

0000b0dc <bt_gatt_mult_notification>:
{
    b0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0e0:	b087      	sub	sp, #28
    b0e2:	4682      	mov	sl, r0
    b0e4:	460c      	mov	r4, r1
    b0e6:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    b0e8:	f7fe fae8 	bl	96bc <gatt_sub_find>
	if (!sub) {
    b0ec:	4607      	mov	r7, r0
    b0ee:	b1f8      	cbz	r0, b130 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    b0f0:	4632      	mov	r2, r6
    b0f2:	4621      	mov	r1, r4
    b0f4:	a803      	add	r0, sp, #12
    b0f6:	f01a fe96 	bl	25e26 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    b0fa:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b0fe:	2b04      	cmp	r3, #4
    b100:	d916      	bls.n	b130 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    b102:	2104      	movs	r1, #4
    b104:	a803      	add	r0, sp, #12
    b106:	f01a fefd 	bl	25f04 <net_buf_simple_pull_mem>
		if (len > buf.len) {
    b10a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    b10e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    b112:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    b114:	4605      	mov	r5, r0
		if (len > buf.len) {
    b116:	d20e      	bcs.n	b136 <bt_gatt_mult_notification+0x5a>
    b118:	4a1c      	ldr	r2, [pc, #112]	; (b18c <bt_gatt_mult_notification+0xb0>)
    b11a:	4b1d      	ldr	r3, [pc, #116]	; (b190 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    b11c:	481d      	ldr	r0, [pc, #116]	; (b194 <bt_gatt_mult_notification+0xb8>)
    b11e:	1a9b      	subs	r3, r3, r2
    b120:	08db      	lsrs	r3, r3, #3
    b122:	019b      	lsls	r3, r3, #6
    b124:	f043 0301 	orr.w	r3, r3, #1
    b128:	4632      	mov	r2, r6
    b12a:	4641      	mov	r1, r8
    b12c:	f018 faa1 	bl	23672 <log_2>
}
    b130:	b007      	add	sp, #28
    b132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    b136:	68bb      	ldr	r3, [r7, #8]
    b138:	b31b      	cbz	r3, b182 <bt_gatt_mult_notification+0xa6>
    b13a:	f1b3 0914 	subs.w	r9, r3, #20
    b13e:	d020      	beq.n	b182 <bt_gatt_mult_notification+0xa6>
    b140:	681c      	ldr	r4, [r3, #0]
    b142:	b104      	cbz	r4, b146 <bt_gatt_mult_notification+0x6a>
    b144:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    b146:	462b      	mov	r3, r5
    b148:	f833 bb04 	ldrh.w	fp, [r3], #4
    b14c:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    b14e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    b152:	455b      	cmp	r3, fp
    b154:	d10b      	bne.n	b16e <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
    b156:	9a01      	ldr	r2, [sp, #4]
    b158:	f8d9 5000 	ldr.w	r5, [r9]
    b15c:	4643      	mov	r3, r8
    b15e:	4649      	mov	r1, r9
    b160:	4650      	mov	r0, sl
    b162:	47a8      	blx	r5
    b164:	b918      	cbnz	r0, b16e <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
    b166:	4649      	mov	r1, r9
    b168:	4650      	mov	r0, sl
    b16a:	f01a fd44 	bl	25bf6 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    b16e:	b144      	cbz	r4, b182 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b170:	f114 0314 	adds.w	r3, r4, #20
    b174:	d002      	beq.n	b17c <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b176:	6963      	ldr	r3, [r4, #20]
    b178:	b103      	cbz	r3, b17c <bt_gatt_mult_notification+0xa0>
    b17a:	3b14      	subs	r3, #20
{
    b17c:	46a1      	mov	r9, r4
    b17e:	461c      	mov	r4, r3
    b180:	e7e5      	b.n	b14e <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
    b182:	4641      	mov	r1, r8
    b184:	a803      	add	r0, sp, #12
    b186:	f01a febd 	bl	25f04 <net_buf_simple_pull_mem>
    b18a:	e7b6      	b.n	b0fa <bt_gatt_mult_notification+0x1e>
    b18c:	0002bfa8 	.word	0x0002bfa8
    b190:	0002c060 	.word	0x0002c060
    b194:	0002f895 	.word	0x0002f895

0000b198 <bt_gatt_connected>:
{
    b198:	b570      	push	{r4, r5, r6, lr}
    b19a:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b19c:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    b1a0:	4605      	mov	r5, r0
	data.conn = conn;
    b1a2:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    b1a4:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b1a6:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b1a8:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b1ac:	4631      	mov	r1, r6
    b1ae:	f019 fc25 	bl	249fc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b1b2:	b190      	cbz	r0, b1da <bt_gatt_connected+0x42>
		if (conn->id) {
    b1b4:	7a2a      	ldrb	r2, [r5, #8]
    b1b6:	b30a      	cbz	r2, b1fc <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b1b8:	ac02      	add	r4, sp, #8
    b1ba:	2104      	movs	r1, #4
    b1bc:	4620      	mov	r0, r4
    b1be:	f017 fd6d 	bl	22c9c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b1c2:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b1c4:	4a1a      	ldr	r2, [pc, #104]	; (b230 <bt_gatt_connected+0x98>)
    b1c6:	2124      	movs	r1, #36	; 0x24
    b1c8:	a805      	add	r0, sp, #20
    b1ca:	4633      	mov	r3, r6
    b1cc:	f7fa f808 	bl	51e0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b1d0:	aa05      	add	r2, sp, #20
    b1d2:	4918      	ldr	r1, [pc, #96]	; (b234 <bt_gatt_connected+0x9c>)
    b1d4:	4610      	mov	r0, r2
    b1d6:	f7f8 f9f5 	bl	35c4 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b1da:	2001      	movs	r0, #1
    b1dc:	4a16      	ldr	r2, [pc, #88]	; (b238 <bt_gatt_connected+0xa0>)
    b1de:	ab03      	add	r3, sp, #12
    b1e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b1e4:	f01a fc6e 	bl	25ac4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    b1e8:	4628      	mov	r0, r5
    b1ea:	f7fe fa67 	bl	96bc <gatt_sub_find>
	if (!sub) {
    b1ee:	b118      	cbz	r0, b1f8 <bt_gatt_connected+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    b1f0:	6884      	ldr	r4, [r0, #8]
    b1f2:	b10c      	cbz	r4, b1f8 <bt_gatt_connected+0x60>
    b1f4:	3c14      	subs	r4, #20
    b1f6:	b91c      	cbnz	r4, b200 <bt_gatt_connected+0x68>
}
    b1f8:	b00e      	add	sp, #56	; 0x38
    b1fa:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b1fc:	9200      	str	r2, [sp, #0]
    b1fe:	e7e1      	b.n	b1c4 <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    b200:	7a28      	ldrb	r0, [r5, #8]
    b202:	4631      	mov	r1, r6
    b204:	f019 fbfa 	bl	249fc <bt_addr_le_is_bonded>
    b208:	b160      	cbz	r0, b224 <bt_gatt_connected+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b20a:	f3bf 8f5b 	dmb	ish
    b20e:	6923      	ldr	r3, [r4, #16]
    b210:	f3bf 8f5b 	dmb	ish
    b214:	079b      	lsls	r3, r3, #30
    b216:	d405      	bmi.n	b224 <bt_gatt_connected+0x8c>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    b218:	89a2      	ldrh	r2, [r4, #12]
    b21a:	8961      	ldrh	r1, [r4, #10]
    b21c:	4623      	mov	r3, r4
    b21e:	4628      	mov	r0, r5
    b220:	f7fe fe10 	bl	9e44 <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b224:	f114 0f14 	cmn.w	r4, #20
    b228:	d0e6      	beq.n	b1f8 <bt_gatt_connected+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b22a:	6964      	ldr	r4, [r4, #20]
    b22c:	e7e1      	b.n	b1f2 <bt_gatt_connected+0x5a>
    b22e:	bf00      	nop
    b230:	0002f7ef 	.word	0x0002f7ef
    b234:	0000a435 	.word	0x0000a435
    b238:	0000a695 	.word	0x0000a695

0000b23c <db_hash_read>:
{
    b23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b240:	4606      	mov	r6, r0
	err = k_delayed_work_cancel(&db_hash_work);
    b242:	480c      	ldr	r0, [pc, #48]	; (b274 <db_hash_read+0x38>)
{
    b244:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    b248:	4614      	mov	r4, r2
    b24a:	461d      	mov	r5, r3
	err = k_delayed_work_cancel(&db_hash_work);
    b24c:	f020 f872 	bl	2b334 <k_delayed_work_cancel>
	if (!err) {
    b250:	b910      	cbnz	r0, b258 <db_hash_read+0x1c>
		db_hash_gen(true);
    b252:	2001      	movs	r0, #1
    b254:	f7ff f844 	bl	a2e0 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    b258:	2101      	movs	r1, #1
    b25a:	4630      	mov	r0, r6
    b25c:	f01a fd6f 	bl	25d3e <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b260:	2310      	movs	r3, #16
    b262:	9306      	str	r3, [sp, #24]
    b264:	463a      	mov	r2, r7
    b266:	4629      	mov	r1, r5
    b268:	4620      	mov	r0, r4
    b26a:	4b03      	ldr	r3, [pc, #12]	; (b278 <db_hash_read+0x3c>)
}
    b26c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b270:	f01a bad5 	b.w	2581e <bt_gatt_attr_read.constprop.0>
    b274:	200010b8 	.word	0x200010b8
    b278:	20008605 	.word	0x20008605

0000b27c <bt_gatt_store_ccc>:
{
    b27c:	b570      	push	{r4, r5, r6, lr}
    b27e:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    b280:	2300      	movs	r3, #0
{
    b282:	4604      	mov	r4, r0
    b284:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b286:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b288:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b28c:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b28e:	4a18      	ldr	r2, [pc, #96]	; (b2f0 <bt_gatt_store_ccc+0x74>)
    b290:	ab0d      	add	r3, sp, #52	; 0x34
    b292:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b296:	2001      	movs	r0, #1
    b298:	f01a fc14 	bl	25ac4 <bt_gatt_foreach_attr>
	if (id) {
    b29c:	b31c      	cbz	r4, b2e6 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    b29e:	ae03      	add	r6, sp, #12
    b2a0:	4622      	mov	r2, r4
    b2a2:	2104      	movs	r1, #4
    b2a4:	4630      	mov	r0, r6
    b2a6:	f017 fcf9 	bl	22c9c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b2aa:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b2ac:	4a11      	ldr	r2, [pc, #68]	; (b2f4 <bt_gatt_store_ccc+0x78>)
    b2ae:	462b      	mov	r3, r5
    b2b0:	2124      	movs	r1, #36	; 0x24
    b2b2:	a804      	add	r0, sp, #16
    b2b4:	f7f9 ff94 	bl	51e0 <bt_settings_encode_key>
	if (save.count) {
    b2b8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b2ba:	b1b2      	cbz	r2, b2ea <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    b2bc:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b2be:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b2c0:	a804      	add	r0, sp, #16
    b2c2:	f7f8 f92f 	bl	3524 <settings_save_one>
	if (err) {
    b2c6:	4604      	mov	r4, r0
    b2c8:	b150      	cbz	r0, b2e0 <bt_gatt_store_ccc+0x64>
    b2ca:	4a0b      	ldr	r2, [pc, #44]	; (b2f8 <bt_gatt_store_ccc+0x7c>)
    b2cc:	4b0b      	ldr	r3, [pc, #44]	; (b2fc <bt_gatt_store_ccc+0x80>)
    b2ce:	1ad2      	subs	r2, r2, r3
    b2d0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    b2d2:	0192      	lsls	r2, r2, #6
    b2d4:	4601      	mov	r1, r0
    b2d6:	f042 0201 	orr.w	r2, r2, #1
    b2da:	4809      	ldr	r0, [pc, #36]	; (b300 <bt_gatt_store_ccc+0x84>)
    b2dc:	f018 f9b5 	bl	2364a <log_1>
}
    b2e0:	4620      	mov	r0, r4
    b2e2:	b040      	add	sp, #256	; 0x100
    b2e4:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b2e6:	9400      	str	r4, [sp, #0]
    b2e8:	e7e0      	b.n	b2ac <bt_gatt_store_ccc+0x30>
		str = NULL;
    b2ea:	4611      	mov	r1, r2
    b2ec:	e7e8      	b.n	b2c0 <bt_gatt_store_ccc+0x44>
    b2ee:	bf00      	nop
    b2f0:	0000975d 	.word	0x0000975d
    b2f4:	0002f7ef 	.word	0x0002f7ef
    b2f8:	0002c060 	.word	0x0002c060
    b2fc:	0002bfa8 	.word	0x0002bfa8
    b300:	0002f8ae 	.word	0x0002f8ae

0000b304 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b308:	4604      	mov	r4, r0
    b30a:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b30c:	4603      	mov	r3, r0
    b30e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b312:	2001      	movs	r0, #1
    b314:	4a54      	ldr	r2, [pc, #336]	; (b468 <bt_gatt_disconnected+0x164>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b316:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b31a:	f01a fbd3 	bl	25ac4 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b31e:	7a20      	ldrb	r0, [r4, #8]
    b320:	4629      	mov	r1, r5
    b322:	f019 fb6b 	bl	249fc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b326:	2800      	cmp	r0, #0
    b328:	d035      	beq.n	b396 <bt_gatt_disconnected+0x92>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b32a:	4629      	mov	r1, r5
    b32c:	7a20      	ldrb	r0, [r4, #8]
    b32e:	f7ff ffa5 	bl	b27c <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b332:	4620      	mov	r0, r4
    b334:	f7fe f994 	bl	9660 <find_cf_cfg>
	if (!cfg) {
    b338:	4606      	mov	r6, r0
    b33a:	2800      	cmp	r0, #0
    b33c:	d064      	beq.n	b408 <bt_gatt_disconnected+0x104>
		if (conn->id) {
    b33e:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b340:	3608      	adds	r6, #8
		if (conn->id) {
    b342:	2a00      	cmp	r2, #0
    b344:	d062      	beq.n	b40c <bt_gatt_disconnected+0x108>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b346:	af02      	add	r7, sp, #8
    b348:	2104      	movs	r1, #4
    b34a:	4638      	mov	r0, r7
    b34c:	f017 fca6 	bl	22c9c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b350:	9700      	str	r7, [sp, #0]
    b352:	462b      	mov	r3, r5
    b354:	4a45      	ldr	r2, [pc, #276]	; (b46c <bt_gatt_disconnected+0x168>)
    b356:	2124      	movs	r1, #36	; 0x24
    b358:	a803      	add	r0, sp, #12
    b35a:	f7f9 ff41 	bl	51e0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b35e:	7a23      	ldrb	r3, [r4, #8]
    b360:	2701      	movs	r7, #1
    b362:	b93b      	cbnz	r3, b374 <bt_gatt_disconnected+0x70>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b364:	2300      	movs	r3, #0
    b366:	9300      	str	r3, [sp, #0]
    b368:	4a40      	ldr	r2, [pc, #256]	; (b46c <bt_gatt_disconnected+0x168>)
    b36a:	462b      	mov	r3, r5
    b36c:	2124      	movs	r1, #36	; 0x24
    b36e:	a803      	add	r0, sp, #12
    b370:	f7f9 ff36 	bl	51e0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b374:	4631      	mov	r1, r6
    b376:	463a      	mov	r2, r7
    b378:	a803      	add	r0, sp, #12
    b37a:	f7f8 f8d3 	bl	3524 <settings_save_one>
	if (err) {
    b37e:	4601      	mov	r1, r0
    b380:	b148      	cbz	r0, b396 <bt_gatt_disconnected+0x92>
    b382:	4a3b      	ldr	r2, [pc, #236]	; (b470 <bt_gatt_disconnected+0x16c>)
    b384:	4b3b      	ldr	r3, [pc, #236]	; (b474 <bt_gatt_disconnected+0x170>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    b386:	483c      	ldr	r0, [pc, #240]	; (b478 <bt_gatt_disconnected+0x174>)
    b388:	1ad2      	subs	r2, r2, r3
    b38a:	08d2      	lsrs	r2, r2, #3
    b38c:	0192      	lsls	r2, r2, #6
    b38e:	f042 0201 	orr.w	r2, r2, #1
    b392:	f018 f95a 	bl	2364a <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b396:	7a20      	ldrb	r0, [r4, #8]
    b398:	4629      	mov	r1, r5
    b39a:	f019 fb2f 	bl	249fc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b39e:	b150      	cbz	r0, b3b6 <bt_gatt_disconnected+0xb2>
		struct addr_with_id addr_with_id = {
    b3a0:	7a23      	ldrb	r3, [r4, #8]
    b3a2:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b3a6:	4a35      	ldr	r2, [pc, #212]	; (b47c <bt_gatt_disconnected+0x178>)
		struct addr_with_id addr_with_id = {
    b3a8:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b3aa:	ab03      	add	r3, sp, #12
    b3ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b3b0:	2001      	movs	r0, #1
    b3b2:	f01a fb87 	bl	25ac4 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    b3b6:	4620      	mov	r0, r4
    b3b8:	f7fe f980 	bl	96bc <gatt_sub_find>
	if (!sub) {
    b3bc:	4607      	mov	r7, r0
    b3be:	b3c0      	cbz	r0, b432 <bt_gatt_disconnected+0x12e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b3c0:	6883      	ldr	r3, [r0, #8]
    b3c2:	b3b3      	cbz	r3, b432 <bt_gatt_disconnected+0x12e>
    b3c4:	f1b3 0814 	subs.w	r8, r3, #20
    b3c8:	d033      	beq.n	b432 <bt_gatt_disconnected+0x12e>
    b3ca:	681e      	ldr	r6, [r3, #0]
    b3cc:	b106      	cbz	r6, b3d0 <bt_gatt_disconnected+0xcc>
    b3ce:	3e14      	subs	r6, #20
    b3d0:	f04f 0b00 	mov.w	fp, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b3d4:	f107 0901 	add.w	r9, r7, #1
			params->value = 0U;
    b3d8:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b3da:	7a20      	ldrb	r0, [r4, #8]
    b3dc:	4629      	mov	r1, r5
    b3de:	f019 fb0d 	bl	249fc <bt_addr_le_is_bonded>
    b3e2:	b9a8      	cbnz	r0, b410 <bt_gatt_disconnected+0x10c>
			params->value = 0U;
    b3e4:	f8a8 a00c 	strh.w	sl, [r8, #12]
			gatt_sub_remove(conn, sub, prev, params);
    b3e8:	4643      	mov	r3, r8
    b3ea:	465a      	mov	r2, fp
    b3ec:	4639      	mov	r1, r7
    b3ee:	4620      	mov	r0, r4
    b3f0:	f01a facc 	bl	2598c <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b3f4:	b1ee      	cbz	r6, b432 <bt_gatt_disconnected+0x12e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b3f6:	f116 0114 	adds.w	r1, r6, #20
    b3fa:	d002      	beq.n	b402 <bt_gatt_disconnected+0xfe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b3fc:	6971      	ldr	r1, [r6, #20]
    b3fe:	b101      	cbz	r1, b402 <bt_gatt_disconnected+0xfe>
    b400:	3914      	subs	r1, #20
    b402:	46b0      	mov	r8, r6
    b404:	460e      	mov	r6, r1
    b406:	e7e8      	b.n	b3da <bt_gatt_disconnected+0xd6>
		len = 0;
    b408:	4607      	mov	r7, r0
    b40a:	e7ab      	b.n	b364 <bt_gatt_disconnected+0x60>
    b40c:	2701      	movs	r7, #1
    b40e:	e7a9      	b.n	b364 <bt_gatt_disconnected+0x60>
    b410:	f3bf 8f5b 	dmb	ish
    b414:	f8d8 3010 	ldr.w	r3, [r8, #16]
    b418:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b41c:	07db      	lsls	r3, r3, #31
    b41e:	d4e1      	bmi.n	b3e4 <bt_gatt_disconnected+0xe0>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    b420:	787b      	ldrb	r3, [r7, #1]
    b422:	b11b      	cbz	r3, b42c <bt_gatt_disconnected+0x128>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b424:	4629      	mov	r1, r5
    b426:	4648      	mov	r0, r9
    b428:	f01a f9c4 	bl	257b4 <bt_addr_le_copy>
			prev = &params->node;
    b42c:	f108 0b14 	add.w	fp, r8, #20
    b430:	e7e0      	b.n	b3f4 <bt_gatt_disconnected+0xf0>
	cfg = find_cf_cfg(conn);
    b432:	4620      	mov	r0, r4
    b434:	f7fe f914 	bl	9660 <find_cf_cfg>
	if (!cfg) {
    b438:	4606      	mov	r6, r0
    b43a:	b138      	cbz	r0, b44c <bt_gatt_disconnected+0x148>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b43c:	7a20      	ldrb	r0, [r4, #8]
    b43e:	4629      	mov	r1, r5
    b440:	f019 fadc 	bl	249fc <bt_addr_le_is_bonded>
    b444:	b928      	cbnz	r0, b452 <bt_gatt_disconnected+0x14e>
		clear_cf_cfg(cfg);
    b446:	4630      	mov	r0, r6
    b448:	f01a fa6c 	bl	25924 <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b44c:	b00d      	add	sp, #52	; 0x34
    b44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b452:	4629      	mov	r1, r5
    b454:	1c70      	adds	r0, r6, #1
    b456:	f01a f9ad 	bl	257b4 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b45a:	f06f 0102 	mvn.w	r1, #2
    b45e:	f106 000c 	add.w	r0, r6, #12
    b462:	f01a f97d 	bl	25760 <atomic_and>
}
    b466:	e7f1      	b.n	b44c <bt_gatt_disconnected+0x148>
    b468:	00009b55 	.word	0x00009b55
    b46c:	0002f8f8 	.word	0x0002f8f8
    b470:	0002c060 	.word	0x0002c060
    b474:	0002bfa8 	.word	0x0002bfa8
    b478:	0002f8cc 	.word	0x0002f8cc
    b47c:	00009b2d 	.word	0x00009b2d

0000b480 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    b480:	4a0b      	ldr	r2, [pc, #44]	; (b4b0 <bt_smp_accept+0x30>)
{
    b482:	b508      	push	{r3, lr}
    b484:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    b486:	6810      	ldr	r0, [r2, #0]
    b488:	b918      	cbnz	r0, b492 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    b48a:	4b0a      	ldr	r3, [pc, #40]	; (b4b4 <bt_smp_accept+0x34>)
    b48c:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    b48e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b490:	bd08      	pop	{r3, pc}
    b492:	4909      	ldr	r1, [pc, #36]	; (b4b8 <bt_smp_accept+0x38>)
    b494:	4a09      	ldr	r2, [pc, #36]	; (b4bc <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    b496:	480a      	ldr	r0, [pc, #40]	; (b4c0 <bt_smp_accept+0x40>)
    b498:	1a52      	subs	r2, r2, r1
    b49a:	08d2      	lsrs	r2, r2, #3
    b49c:	0192      	lsls	r2, r2, #6
    b49e:	f042 0201 	orr.w	r2, r2, #1
    b4a2:	4619      	mov	r1, r3
    b4a4:	f018 f8d1 	bl	2364a <log_1>
	return -ENOMEM;
    b4a8:	f06f 000b 	mvn.w	r0, #11
    b4ac:	e7f0      	b.n	b490 <bt_smp_accept+0x10>
    b4ae:	bf00      	nop
    b4b0:	20001140 	.word	0x20001140
    b4b4:	0002c5d0 	.word	0x0002c5d0
    b4b8:	0002bfa8 	.word	0x0002bfa8
    b4bc:	0002c088 	.word	0x0002c088
    b4c0:	0002f909 	.word	0x0002f909

0000b4c4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    b4c4:	b470      	push	{r4, r5, r6}
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b4c6:	1e54      	subs	r4, r2, #1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b4c8:	1dc5      	adds	r5, r0, #7
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b4ca:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b4cc:	f025 0503 	bic.w	r5, r5, #3
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b4d0:	fb01 f604 	mul.w	r6, r1, r4
	*mem_head = mem_pool;
    b4d4:	6018      	str	r0, [r3, #0]
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b4d6:	802a      	strh	r2, [r5, #0]
		     sizeof(mem_pool));
	while (mem_count--) {
    b4d8:	1e93      	subs	r3, r2, #2
    b4da:	2200      	movs	r2, #0
    b4dc:	5182      	str	r2, [r0, r6]
    b4de:	b17c      	cbz	r4, b500 <mem_init+0x3c>
    b4e0:	b29b      	uxth	r3, r3
    b4e2:	fb03 1401 	mla	r4, r3, r1, r1
    b4e6:	fb03 f201 	mul.w	r2, r3, r1
    b4ea:	4420      	add	r0, r4
    b4ec:	1b12      	subs	r2, r2, r4
    b4ee:	f64f 74ff 	movw	r4, #65535	; 0xffff
    b4f2:	3b01      	subs	r3, #1
    b4f4:	b29b      	uxth	r3, r3
    b4f6:	42a3      	cmp	r3, r4
    b4f8:	5080      	str	r0, [r0, r2]
    b4fa:	eba0 0001 	sub.w	r0, r0, r1
    b4fe:	d1f8      	bne.n	b4f2 <mem_init+0x2e>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    b500:	bc70      	pop	{r4, r5, r6}
    b502:	4770      	bx	lr

0000b504 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    b504:	4603      	mov	r3, r0
	if (*mem_head) {
    b506:	6800      	ldr	r0, [r0, #0]
    b508:	b180      	cbz	r0, b52c <mem_acquire+0x28>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    b50a:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    b50c:	b162      	cbz	r2, b528 <mem_acquire+0x24>
{
    b50e:	b410      	push	{r4}
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b510:	1dc4      	adds	r4, r0, #7
    b512:	f024 0403 	bic.w	r4, r4, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b516:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b518:	8824      	ldrh	r4, [r4, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b51a:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    b51e:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b520:	800c      	strh	r4, [r1, #0]
		*mem_head = head;
		return mem;
	}

	return NULL;
}
    b522:	bc10      	pop	{r4}
		*mem_head = head;
    b524:	601a      	str	r2, [r3, #0]
}
    b526:	4770      	bx	lr
		*mem_head = head;
    b528:	601a      	str	r2, [r3, #0]
		return mem;
    b52a:	4770      	bx	lr
}
    b52c:	4770      	bx	lr
    b52e:	bf00      	nop

0000b530 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    b530:	b410      	push	{r4}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    b532:	680b      	ldr	r3, [r1, #0]
{
    b534:	b083      	sub	sp, #12
    b536:	4602      	mov	r2, r0
    b538:	9001      	str	r0, [sp, #4]
	if (*mem_head) {
    b53a:	b183      	cbz	r3, b55e <mem_release+0x2e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b53c:	3307      	adds	r3, #7
    b53e:	f023 0303 	bic.w	r3, r3, #3
    b542:	8818      	ldrh	r0, [r3, #0]
    b544:	3001      	adds	r0, #1
    b546:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b548:	4613      	mov	r3, r2
    b54a:	680c      	ldr	r4, [r1, #0]
    b54c:	f843 4b07 	str.w	r4, [r3], #7
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    b550:	f023 0303 	bic.w	r3, r3, #3
    b554:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    b556:	600a      	str	r2, [r1, #0]
}
    b558:	b003      	add	sp, #12
    b55a:	bc10      	pop	{r4}
    b55c:	4770      	bx	lr
    b55e:	2001      	movs	r0, #1
    b560:	e7f2      	b.n	b548 <mem_release+0x18>
    b562:	bf00      	nop

0000b564 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    b564:	fb02 0001 	mla	r0, r2, r1, r0
    b568:	4770      	bx	lr
    b56a:	bf00      	nop

0000b56c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    b56c:	1a40      	subs	r0, r0, r1
    b56e:	b280      	uxth	r0, r0
}
    b570:	fbb0 f0f2 	udiv	r0, r0, r2
    b574:	4770      	bx	lr
    b576:	bf00      	nop

0000b578 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    b578:	1e53      	subs	r3, r2, #1
	src += len;
    b57a:	4411      	add	r1, r2
	while (len--) {
    b57c:	b29b      	uxth	r3, r3
    b57e:	b142      	cbz	r2, b592 <mem_rcopy+0x1a>
    b580:	43db      	mvns	r3, r3
    b582:	18ca      	adds	r2, r1, r3
    b584:	3801      	subs	r0, #1
		*dst++ = *--src;
    b586:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    b58a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    b58e:	4291      	cmp	r1, r2
    b590:	d1f9      	bne.n	b586 <mem_rcopy+0xe>
	}
}
    b592:	4770      	bx	lr

0000b594 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    b594:	4401      	add	r1, r0
    b596:	e002      	b.n	b59e <mem_nz+0xa>
		if (*src++) {
    b598:	f810 3b01 	ldrb.w	r3, [r0], #1
    b59c:	b91b      	cbnz	r3, b5a6 <mem_nz+0x12>
	while (len--) {
    b59e:	4288      	cmp	r0, r1
    b5a0:	d1fa      	bne.n	b598 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    b5a2:	2000      	movs	r0, #0
    b5a4:	4770      	bx	lr
			return 1;
    b5a6:	2001      	movs	r0, #1
}
    b5a8:	4770      	bx	lr
    b5aa:	bf00      	nop

0000b5ac <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    b5ac:	6010      	str	r0, [r2, #0]
    b5ae:	6008      	str	r0, [r1, #0]

	return link;
}
    b5b0:	4770      	bx	lr
    b5b2:	bf00      	nop

0000b5b4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    b5b4:	680a      	ldr	r2, [r1, #0]
{
    b5b6:	4603      	mov	r3, r0
	if (*head != *tail) {
    b5b8:	6800      	ldr	r0, [r0, #0]
    b5ba:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    b5bc:	bf05      	ittet	eq
    b5be:	2200      	moveq	r2, #0
    b5c0:	600a      	streq	r2, [r1, #0]
		return NULL;
    b5c2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    b5c4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    b5c6:	4770      	bx	lr

0000b5c8 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    b5c8:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    b5ca:	6814      	ldr	r4, [r2, #0]
    b5cc:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    b5ce:	6814      	ldr	r4, [r2, #0]
    b5d0:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    b5d2:	bc10      	pop	{r4}
	*tail = link; /* Commit: enqueue of memq node */
    b5d4:	6010      	str	r0, [r2, #0]
}
    b5d6:	4770      	bx	lr

0000b5d8 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    b5d8:	4288      	cmp	r0, r1
    b5da:	d003      	beq.n	b5e4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    b5dc:	b11a      	cbz	r2, b5e6 <memq_peek+0xe>
		*mem = head->mem;
    b5de:	6843      	ldr	r3, [r0, #4]
    b5e0:	6013      	str	r3, [r2, #0]
    b5e2:	4770      	bx	lr
		return NULL;
    b5e4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    b5e6:	4770      	bx	lr

0000b5e8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    b5e8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    b5ea:	4283      	cmp	r3, r0
    b5ec:	d009      	beq.n	b602 <memq_dequeue+0x1a>
	if (mem) {
    b5ee:	b12a      	cbz	r2, b5fc <memq_dequeue+0x14>
		*mem = head->mem;
    b5f0:	6858      	ldr	r0, [r3, #4]
    b5f2:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    b5f4:	681a      	ldr	r2, [r3, #0]
    b5f6:	600a      	str	r2, [r1, #0]

	return old_head;
}
    b5f8:	4618      	mov	r0, r3
    b5fa:	4770      	bx	lr
	if (old_head == NULL) {
    b5fc:	2b00      	cmp	r3, #0
    b5fe:	d1f9      	bne.n	b5f4 <memq_dequeue+0xc>
    b600:	e7fa      	b.n	b5f8 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    b602:	2300      	movs	r3, #0
    b604:	e7f8      	b.n	b5f8 <memq_dequeue+0x10>
    b606:	bf00      	nop

0000b608 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    b608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b60c:	f8df 8034 	ldr.w	r8, [pc, #52]	; b644 <mayfly_init+0x3c>
    b610:	4e0b      	ldr	r6, [pc, #44]	; (b640 <mayfly_init+0x38>)
    b612:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    b614:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    b618:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    b61a:	1d22      	adds	r2, r4, #4
    b61c:	4621      	mov	r1, r4
    b61e:	4628      	mov	r0, r5
    b620:	3c0c      	subs	r4, #12
    b622:	f7ff ffc3 	bl	b5ac <memq_init>
		while (caller_id--) {
    b626:	42b4      	cmp	r4, r6
    b628:	f1a5 0508 	sub.w	r5, r5, #8
    b62c:	d1f5      	bne.n	b61a <mayfly_init+0x12>
	while (callee_id--) {
    b62e:	3f04      	subs	r7, #4
    b630:	1d3b      	adds	r3, r7, #4
    b632:	f1a8 0820 	sub.w	r8, r8, #32
    b636:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    b63a:	d1eb      	bne.n	b614 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    b63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b640:	20002b30 	.word	0x20002b30
    b644:	20002aa0 	.word	0x20002aa0

0000b648 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    b648:	b430      	push	{r4, r5}
    b64a:	4603      	mov	r3, r0
    b64c:	460c      	mov	r4, r1
	if (enable) {
    b64e:	b19a      	cbz	r2, b678 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    b650:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b654:	0108      	lsls	r0, r1, #4
    b656:	4d14      	ldr	r5, [pc, #80]	; (b6a8 <mayfly_enable+0x60>)
    b658:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b65c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b660:	4429      	add	r1, r5
    b662:	7a48      	ldrb	r0, [r1, #9]
    b664:	7a0d      	ldrb	r5, [r1, #8]
    b666:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    b668:	bf04      	itt	eq
    b66a:	3001      	addeq	r0, #1
    b66c:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    b66e:	4621      	mov	r1, r4
    b670:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    b672:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    b674:	f00c bc38 	b.w	17ee8 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    b678:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    b67c:	4d0a      	ldr	r5, [pc, #40]	; (b6a8 <mayfly_enable+0x60>)
    b67e:	0112      	lsls	r2, r2, #4
    b680:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b684:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b688:	442b      	add	r3, r5
    b68a:	7a9d      	ldrb	r5, [r3, #10]
    b68c:	7ada      	ldrb	r2, [r3, #11]
    b68e:	42aa      	cmp	r2, r5
    b690:	d001      	beq.n	b696 <mayfly_enable+0x4e>
}
    b692:	bc30      	pop	{r4, r5}
    b694:	4770      	bx	lr
			mfp[callee_id] = 1U;
    b696:	4d05      	ldr	r5, [pc, #20]	; (b6ac <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    b698:	3201      	adds	r2, #1
    b69a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    b69c:	2301      	movs	r3, #1
    b69e:	546b      	strb	r3, [r5, r1]
}
    b6a0:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    b6a2:	f00c bc77 	b.w	17f94 <mayfly_pend>
    b6a6:	bf00      	nop
    b6a8:	20002aac 	.word	0x20002aac
    b6ac:	20002aa8 	.word	0x20002aa8

0000b6b0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    b6b0:	b570      	push	{r4, r5, r6, lr}
    b6b2:	461c      	mov	r4, r3
    b6b4:	4606      	mov	r6, r0
    b6b6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    b6b8:	b322      	cbz	r2, b704 <mayfly_enqueue+0x54>
    b6ba:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    b6bc:	7822      	ldrb	r2, [r4, #0]
    b6be:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b6c0:	f012 0203 	ands.w	r2, r2, #3
    b6c4:	d005      	beq.n	b6d2 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    b6c6:	2a01      	cmp	r2, #1
    b6c8:	d040      	beq.n	b74c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    b6ca:	3301      	adds	r3, #1
    b6cc:	b2db      	uxtb	r3, r3
    b6ce:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    b6d0:	e00f      	b.n	b6f2 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b6d2:	2230      	movs	r2, #48	; 0x30
    b6d4:	2104      	movs	r1, #4
    b6d6:	fb12 1105 	smlabb	r1, r2, r5, r1
    b6da:	220c      	movs	r2, #12
    b6dc:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    b6e0:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b6e2:	491b      	ldr	r1, [pc, #108]	; (b750 <mayfly_enqueue+0xa0>)
    b6e4:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    b6e6:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b6e8:	440a      	add	r2, r1
	m->_req = ack + 1;
    b6ea:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b6ec:	4621      	mov	r1, r4
    b6ee:	f7ff ff6b 	bl	b5c8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    b6f2:	4b18      	ldr	r3, [pc, #96]	; (b754 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    b6f4:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    b6f6:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    b6f8:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    b6fa:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    b6fc:	f00c fc4a 	bl	17f94 <mayfly_pend>

	return 0;
    b700:	2000      	movs	r0, #0
}
    b702:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b704:	f00c fc30 	bl	17f68 <mayfly_prio_is_equal>
    b708:	2800      	cmp	r0, #0
    b70a:	d0d6      	beq.n	b6ba <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    b70c:	4629      	mov	r1, r5
    b70e:	4630      	mov	r0, r6
    b710:	f00c fc0a 	bl	17f28 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b714:	2800      	cmp	r0, #0
    b716:	d0d0      	beq.n	b6ba <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    b718:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    b71c:	0111      	lsls	r1, r2, #4
    b71e:	480c      	ldr	r0, [pc, #48]	; (b750 <mayfly_enqueue+0xa0>)
    b720:	7863      	ldrb	r3, [r4, #1]
    b722:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    b726:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    b72a:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    b72c:	7a91      	ldrb	r1, [r2, #10]
    b72e:	7ad2      	ldrb	r2, [r2, #11]
    b730:	4291      	cmp	r1, r2
    b732:	d1c3      	bne.n	b6bc <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    b734:	7822      	ldrb	r2, [r4, #0]
    b736:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b738:	0792      	lsls	r2, r2, #30
    b73a:	d002      	beq.n	b742 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    b73c:	3302      	adds	r3, #2
    b73e:	b2db      	uxtb	r3, r3
    b740:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    b742:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b746:	4798      	blx	r3
		return 0;
    b748:	2000      	movs	r0, #0
}
    b74a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    b74c:	4610      	mov	r0, r2
}
    b74e:	bd70      	pop	{r4, r5, r6, pc}
    b750:	20002aac 	.word	0x20002aac
    b754:	20002aa8 	.word	0x20002aa8

0000b758 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    b758:	494e      	ldr	r1, [pc, #312]	; (b894 <mayfly_run+0x13c>)
    b75a:	5c0b      	ldrb	r3, [r1, r0]
    b75c:	2b00      	cmp	r3, #0
    b75e:	f000 8098 	beq.w	b892 <mayfly_run+0x13a>
{
    b762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b766:	4b4c      	ldr	r3, [pc, #304]	; (b898 <mayfly_run+0x140>)
    b768:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    b76c:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    b76e:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b770:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    b774:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    b776:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b77a:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    b77e:	9203      	str	r2, [sp, #12]
    b780:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    b784:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    b786:	f04f 0903 	mov.w	r9, #3
    b78a:	4688      	mov	r8, r1
    b78c:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    b78e:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    b790:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    b794:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    b796:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    b798:	f7ff ff1e 	bl	b5d8 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    b79c:	f107 0624 	add.w	r6, r7, #36	; 0x24
    b7a0:	4683      	mov	fp, r0
    b7a2:	2800      	cmp	r0, #0
    b7a4:	d034      	beq.n	b810 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    b7a6:	9c05      	ldr	r4, [sp, #20]
    b7a8:	7825      	ldrb	r5, [r4, #0]
    b7aa:	7863      	ldrb	r3, [r4, #1]
    b7ac:	1aed      	subs	r5, r5, r3
    b7ae:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    b7b2:	2d01      	cmp	r5, #1
    b7b4:	d106      	bne.n	b7c4 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    b7b6:	3b01      	subs	r3, #1
    b7b8:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    b7ba:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b7be:	4798      	blx	r3
    b7c0:	9c05      	ldr	r4, [sp, #20]
    b7c2:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    b7c4:	f894 c000 	ldrb.w	ip, [r4]
    b7c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    b7ca:	ebac 0303 	sub.w	r3, ip, r3
    b7ce:	f003 0303 	and.w	r3, r3, #3
    b7d2:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    b7d4:	f04f 0200 	mov.w	r2, #0
    b7d8:	4631      	mov	r1, r6
	req = m->_req;
    b7da:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    b7de:	d00d      	beq.n	b7fc <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    b7e0:	f7ff ff02 	bl	b5e8 <memq_dequeue>
		ack = m->_ack;
    b7e4:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b7e6:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    b7e8:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    b7ec:	1a9b      	subs	r3, r3, r2
    b7ee:	f003 0303 	and.w	r3, r3, #3
    b7f2:	2b01      	cmp	r3, #1
		m->_ack = req;
    b7f4:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b7f8:	d044      	beq.n	b884 <mayfly_run+0x12c>
    b7fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    b7fc:	4601      	mov	r1, r0
    b7fe:	aa05      	add	r2, sp, #20
    b800:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b802:	f7ff fee9 	bl	b5d8 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    b806:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    b808:	4683      	mov	fp, r0
			if (state == 1U) {
    b80a:	d029      	beq.n	b860 <mayfly_run+0x108>
		while (link) {
    b80c:	2800      	cmp	r0, #0
    b80e:	d1ca      	bne.n	b7a6 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    b810:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    b814:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    b818:	429a      	cmp	r2, r3
    b81a:	d003      	beq.n	b824 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    b81c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    b820:	2301      	movs	r3, #1
    b822:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    b824:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    b828:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    b82c:	429a      	cmp	r2, r3
    b82e:	d003      	beq.n	b838 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    b830:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    b834:	2301      	movs	r3, #1
    b836:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    b838:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b83c:	fa5f f989 	uxtb.w	r9, r9
    b840:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    b844:	f1a7 070c 	sub.w	r7, r7, #12
    b848:	d1a1      	bne.n	b78e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    b84a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    b84e:	b1b3      	cbz	r3, b87e <mayfly_run+0x126>
    b850:	9b03      	ldr	r3, [sp, #12]
    b852:	b9a3      	cbnz	r3, b87e <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    b854:	461a      	mov	r2, r3
    b856:	4651      	mov	r1, sl
    b858:	4650      	mov	r0, sl
    b85a:	f00c fb45 	bl	17ee8 <mayfly_enable_cb>
    b85e:	e00e      	b.n	b87e <mayfly_run+0x126>
				if (caller_id || link) {
    b860:	f1b9 0f00 	cmp.w	r9, #0
    b864:	d101      	bne.n	b86a <mayfly_run+0x112>
    b866:	2800      	cmp	r0, #0
    b868:	d0d2      	beq.n	b810 <mayfly_run+0xb8>
    b86a:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    b86e:	4a09      	ldr	r2, [pc, #36]	; (b894 <mayfly_run+0x13c>)
    b870:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    b872:	4651      	mov	r1, sl
    b874:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    b876:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    b87a:	f00c fb8b 	bl	17f94 <mayfly_pend>
	}
}
    b87e:	b007      	add	sp, #28
    b880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    b884:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b886:	4621      	mov	r1, r4
    b888:	4658      	mov	r0, fp
    b88a:	4642      	mov	r2, r8
    b88c:	f7ff fe9c 	bl	b5c8 <memq_enqueue>
    b890:	e7b3      	b.n	b7fa <mayfly_run+0xa2>
    b892:	4770      	bx	lr
    b894:	20002aa8 	.word	0x20002aa8
    b898:	20002aac 	.word	0x20002aac

0000b89c <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    b89c:	b1a1      	cbz	r1, b8c8 <util_ones_count_get+0x2c>
    b89e:	1e4b      	subs	r3, r1, #1
    b8a0:	b2db      	uxtb	r3, r3
{
    b8a2:	b410      	push	{r4}
    b8a4:	1e41      	subs	r1, r0, #1
    b8a6:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    b8a8:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    b8aa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    b8ae:	b13b      	cbz	r3, b8c0 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    b8b0:	b25b      	sxtb	r3, r3
    b8b2:	1e5a      	subs	r2, r3, #1
    b8b4:	4013      	ands	r3, r2
			one_count++;
    b8b6:	3001      	adds	r0, #1
		while (bite) {
    b8b8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    b8bc:	b2c0      	uxtb	r0, r0
		while (bite) {
    b8be:	d1f7      	bne.n	b8b0 <util_ones_count_get+0x14>
	while (octets_len--) {
    b8c0:	42a1      	cmp	r1, r4
    b8c2:	d1f2      	bne.n	b8aa <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    b8c4:	bc10      	pop	{r4}
    b8c6:	4770      	bx	lr
	uint8_t one_count = 0U;
    b8c8:	4608      	mov	r0, r1
}
    b8ca:	4770      	bx	lr

0000b8cc <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    b8d0:	7f82      	ldrb	r2, [r0, #30]
{
    b8d2:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    b8d4:	2301      	movs	r3, #1
	if (instance->job_guard) {
    b8d6:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    b8d8:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    b8da:	2a00      	cmp	r2, #0
    b8dc:	d15b      	bne.n	b996 <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    b8de:	7f43      	ldrb	r3, [r0, #29]
    b8e0:	2bff      	cmp	r3, #255	; 0xff
    b8e2:	4681      	mov	r9, r0
    b8e4:	d056      	beq.n	b994 <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    b8e6:	f00b fe6b 	bl	175c0 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b8ea:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b8ee:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    b8f2:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b8f6:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b8f8:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b8fa:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b8fe:	f000 813b 	beq.w	bb78 <ticker_worker+0x2ac>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    b902:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    b906:	455b      	cmp	r3, fp
    b908:	bf94      	ite	ls
    b90a:	2300      	movls	r3, #0
    b90c:	2301      	movhi	r3, #1
    b90e:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    b910:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    b912:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    b916:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    b91a:	d046      	beq.n	b9aa <ticker_worker+0xde>
			must_expire_skip = 1U;
    b91c:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    b920:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    b924:	eb07 1406 	add.w	r4, r7, r6, lsl #4
    b928:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    b92a:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b92c:	455a      	cmp	r2, fp
    b92e:	d83a      	bhi.n	b9a6 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b930:	f894 a002 	ldrb.w	sl, [r4, #2]
    b934:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    b936:	5dbe      	ldrb	r6, [r7, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b938:	eba3 030a 	sub.w	r3, r3, sl
    b93c:	b2db      	uxtb	r3, r3
    b93e:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    b940:	ebab 0b02 	sub.w	fp, fp, r2
		ticks_expired += ticks_to_expire;
    b944:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b946:	d12c      	bne.n	b9a2 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    b948:	69a0      	ldr	r0, [r4, #24]
    b94a:	2800      	cmp	r0, #0
    b94c:	d056      	beq.n	b9fc <ticker_worker+0x130>
    b94e:	9b01      	ldr	r3, [sp, #4]
    b950:	2b00      	cmp	r3, #0
    b952:	f000 808d 	beq.w	ba70 <ticker_worker+0x1a4>
    b956:	8be3      	ldrh	r3, [r4, #30]
    b958:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    b95a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    b95c:	b13b      	cbz	r3, b96e <ticker_worker+0xa2>
    b95e:	681a      	ldr	r2, [r3, #0]
    b960:	b11a      	cbz	r2, b96a <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    b962:	7a1a      	ldrb	r2, [r3, #8]
    b964:	2a00      	cmp	r2, #0
    b966:	f000 80f4 	beq.w	bb52 <ticker_worker+0x286>
				ext_data->reschedule_state =
    b96a:	2200      	movs	r2, #0
    b96c:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    b96e:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    b970:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    b974:	3201      	adds	r2, #1
    b976:	b292      	uxth	r2, r2
    b978:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    b97a:	b179      	cbz	r1, b99c <ticker_worker+0xd0>
    b97c:	8ba1      	ldrh	r1, [r4, #28]
    b97e:	4291      	cmp	r1, r2
    b980:	d20c      	bcs.n	b99c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    b982:	2b00      	cmp	r3, #0
    b984:	f000 80fb 	beq.w	bb7e <ticker_worker+0x2b2>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    b988:	7a1a      	ldrb	r2, [r3, #8]
    b98a:	2a01      	cmp	r2, #1
    b98c:	d006      	beq.n	b99c <ticker_worker+0xd0>
			must_expire_skip = 1U;
    b98e:	f04f 0c01 	mov.w	ip, #1
    b992:	e037      	b.n	ba04 <ticker_worker+0x138>
		instance->worker_trigger = 0U;
    b994:	77c2      	strb	r2, [r0, #31]
}
    b996:	b00d      	add	sp, #52	; 0x34
    b998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    b99c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b9a0:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    b9a2:	2eff      	cmp	r6, #255	; 0xff
    b9a4:	d1bc      	bne.n	b920 <ticker_worker+0x54>
    b9a6:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    b9aa:	f899 300b 	ldrb.w	r3, [r9, #11]
    b9ae:	f899 200a 	ldrb.w	r2, [r9, #10]
    b9b2:	429a      	cmp	r2, r3
    b9b4:	d10a      	bne.n	b9cc <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    b9b6:	3201      	adds	r2, #1
    b9b8:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    b9ba:	2a02      	cmp	r2, #2
    b9bc:	bf1c      	itt	ne
    b9be:	4613      	movne	r3, r2
    b9c0:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    b9c2:	9a04      	ldr	r2, [sp, #16]
    b9c4:	f889 200b 	strb.w	r2, [r9, #11]
    b9c8:	bf08      	it	eq
    b9ca:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b9cc:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b9d0:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b9d4:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    b9d8:	2200      	movs	r2, #0
    b9da:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b9de:	464b      	mov	r3, r9
    b9e0:	2201      	movs	r2, #1
    b9e2:	2104      	movs	r1, #4
    b9e4:	2003      	movs	r0, #3
    b9e6:	46a4      	mov	ip, r4
}
    b9e8:	b00d      	add	sp, #52	; 0x34
    b9ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b9ee:	4760      	bx	ip
    b9f0:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    b9f4:	f8dd a020 	ldr.w	sl, [sp, #32]
    b9f8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b9fa:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    b9fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b9fe:	b1db      	cbz	r3, ba38 <ticker_worker+0x16c>
    ba00:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    ba04:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    ba06:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    ba08:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    ba0a:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    ba0c:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ba10:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    ba12:	2d00      	cmp	r5, #0
    ba14:	d0c5      	beq.n	b9a2 <ticker_worker+0xd6>
					   ticks_expired -
    ba16:	9b02      	ldr	r3, [sp, #8]
    ba18:	6962      	ldr	r2, [r4, #20]
    ba1a:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    ba1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ba1e:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    ba20:	eba8 0202 	sub.w	r2, r8, r2
    ba24:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    ba26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ba2a:	f1bc 0f00 	cmp.w	ip, #0
    ba2e:	d013      	beq.n	ba58 <ticker_worker+0x18c>
    ba30:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ba34:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
    ba36:	e7b4      	b.n	b9a2 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    ba38:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    ba3a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    ba3e:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    ba40:	2d00      	cmp	r5, #0
    ba42:	d0ae      	beq.n	b9a2 <ticker_worker+0xd6>
					   ticks_expired -
    ba44:	9b02      	ldr	r3, [sp, #8]
    ba46:	6962      	ldr	r2, [r4, #20]
    ba48:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    ba4a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ba4c:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    ba4e:	eba8 0202 	sub.w	r2, r8, r2
    ba52:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    ba54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ba58:	8be2      	ldrh	r2, [r4, #30]
    ba5a:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    ba5c:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    ba5e:	2300      	movs	r3, #0
					slot_reserved = 1U;
    ba60:	429a      	cmp	r2, r3
    ba62:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
    ba64:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    ba66:	bf18      	it	ne
    ba68:	2201      	movne	r2, #1
    ba6a:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
    ba6c:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    ba6e:	e798      	b.n	b9a2 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    ba70:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    ba74:	9305      	str	r3, [sp, #20]
    ba76:	3380      	adds	r3, #128	; 0x80
    ba78:	d0c0      	beq.n	b9fc <ticker_worker+0x130>
    ba7a:	2eff      	cmp	r6, #255	; 0xff
    ba7c:	d0be      	beq.n	b9fc <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    ba7e:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    ba80:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    ba82:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    ba84:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    ba86:	bf28      	it	cs
    ba88:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    ba8a:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    ba8c:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    ba8e:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
    ba92:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    ba94:	fb03 2302 	mla	r3, r3, r2, r2
    ba98:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    ba9a:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    ba9e:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    baa0:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    baa2:	2500      	movs	r5, #0
    baa4:	46a1      	mov	r9, r4
    baa6:	960b      	str	r6, [sp, #44]	; 0x2c
    baa8:	9200      	str	r2, [sp, #0]
    baaa:	e02c      	b.n	bb06 <ticker_worker+0x23a>
				(ticker->ticks_periodic == 0U) ||
    baac:	9c00      	ldr	r4, [sp, #0]
					  0U :
    baae:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    bab2:	2c00      	cmp	r4, #0
    bab4:	d048      	beq.n	bb48 <ticker_worker+0x27c>
    bab6:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    bab8:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    babc:	4544      	cmp	r4, r8
    babe:	bf8c      	ite	hi
    bac0:	f04f 0801 	movhi.w	r8, #1
    bac4:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    bac8:	bf34      	ite	cc
    baca:	f04f 0a01 	movcc.w	sl, #1
    bace:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    bad2:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    bad4:	f892 b003 	ldrb.w	fp, [r2, #3]
    bad8:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    badc:	d30f      	bcc.n	bafe <ticker_worker+0x232>
    bade:	4593      	cmp	fp, r2
    bae0:	d843      	bhi.n	bb6a <ticker_worker+0x29e>
			    (next_force ||
    bae2:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    bae6:	d040      	beq.n	bb6a <ticker_worker+0x29e>
			     next_is_critical ||
    bae8:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    baea:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    baee:	4594      	cmp	ip, r2
    baf0:	dd02      	ble.n	baf8 <ticker_worker+0x22c>
			     (next_has_priority && !current_is_older) ||
    baf2:	f1b8 0f00 	cmp.w	r8, #0
    baf6:	d038      	beq.n	bb6a <ticker_worker+0x29e>
    baf8:	9a05      	ldr	r2, [sp, #20]
    bafa:	4572      	cmp	r2, lr
    bafc:	d032      	beq.n	bb64 <ticker_worker+0x298>
			id_head = ticker_next->next;
    bafe:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    bb00:	2bff      	cmp	r3, #255	; 0xff
    bb02:	f43f af75 	beq.w	b9f0 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    bb06:	b21b      	sxth	r3, r3
    bb08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bb0c:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    bb10:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    bb12:	f8d2 8008 	ldr.w	r8, [r2, #8]
    bb16:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    bb18:	42a8      	cmp	r0, r5
    bb1a:	f4ff af69 	bcc.w	b9f0 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    bb1e:	6991      	ldr	r1, [r2, #24]
    bb20:	2900      	cmp	r1, #0
    bb22:	d0ec      	beq.n	bafe <ticker_worker+0x232>
			int32_t lazy_next = ticker_next->lazy_current;
    bb24:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    bb26:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    bb28:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    bb2c:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    bb30:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    bb32:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    bb34:	bf28      	it	cs
    bb36:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    bb3a:	f1ba 0f00 	cmp.w	sl, #0
    bb3e:	d1b5      	bne.n	baac <ticker_worker+0x1e0>
				(ticker->ticks_periodic == 0U) ||
    bb40:	9c00      	ldr	r4, [sp, #0]
					  0U :
    bb42:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    bb44:	2c00      	cmp	r4, #0
    bb46:	d1b6      	bne.n	bab6 <ticker_worker+0x1ea>
					(ticker->ticks_periodic != 0U) &&
    bb48:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    bb4c:	f04f 0801 	mov.w	r8, #1
    bb50:	e7bf      	b.n	bad2 <ticker_worker+0x206>
			    TICKER_RESCHEDULE_STATE_NONE &&
    bb52:	8ba2      	ldrh	r2, [r4, #28]
    bb54:	9903      	ldr	r1, [sp, #12]
    bb56:	428a      	cmp	r2, r1
    bb58:	f63f af07 	bhi.w	b96a <ticker_worker+0x9e>
				ext_data->reschedule_state =
    bb5c:	f04f 0201 	mov.w	r2, #1
    bb60:	721a      	strb	r2, [r3, #8]
    bb62:	e704      	b.n	b96e <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    bb64:	f1ba 0f00 	cmp.w	sl, #0
    bb68:	d0c9      	beq.n	bafe <ticker_worker+0x232>
    bb6a:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    bb6e:	f8dd a020 	ldr.w	sl, [sp, #32]
    bb72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb74:	464c      	mov	r4, r9
    bb76:	e6f0      	b.n	b95a <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    bb78:	9b04      	ldr	r3, [sp, #16]
    bb7a:	9301      	str	r3, [sp, #4]
    bb7c:	e6c8      	b.n	b910 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    bb7e:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    bb80:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    bb84:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    bb86:	2d00      	cmp	r5, #0
    bb88:	f43f af0b 	beq.w	b9a2 <ticker_worker+0xd6>
					   ticks_expired -
    bb8c:	9b02      	ldr	r3, [sp, #8]
    bb8e:	6960      	ldr	r0, [r4, #20]
    bb90:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    bb92:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bb94:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    bb96:	eba8 0000 	sub.w	r0, r8, r0
    bb9a:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    bb9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    bba0:	e746      	b.n	ba30 <ticker_worker+0x164>
    bba2:	bf00      	nop

0000bba4 <ticker_job>:
	if (instance->worker_trigger) {
    bba4:	7fc2      	ldrb	r2, [r0, #31]
    bba6:	2a00      	cmp	r2, #0
    bba8:	f040 8631 	bne.w	c80e <ticker_job+0xc6a>
{
    bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bbb0:	7a83      	ldrb	r3, [r0, #10]
    bbb2:	7ac1      	ldrb	r1, [r0, #11]
{
    bbb4:	b08f      	sub	sp, #60	; 0x3c
    bbb6:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    bbb8:	6940      	ldr	r0, [r0, #20]
    bbba:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bbbc:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    bbbe:	f04f 0001 	mov.w	r0, #1
    bbc2:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bbc6:	f000 8096 	beq.w	bcf6 <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
    bbca:	4403      	add	r3, r0
    bbcc:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    bbce:	2b02      	cmp	r3, #2
		idx = 0U;
    bbd0:	bf08      	it	eq
    bbd2:	4613      	moveq	r3, r2
		ticks_elapsed =
    bbd4:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    bbd8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    bbdc:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    bbde:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    bbe0:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    bbe2:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    bbe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bbe8:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    bbec:	2301      	movs	r3, #1
    bbee:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    bbf0:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    bbf4:	f89b 201d 	ldrb.w	r2, [fp, #29]
    bbf8:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    bbfa:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    bbfe:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    bc02:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    bc04:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    bc06:	461a      	mov	r2, r3
    bc08:	3b01      	subs	r3, #1
	users = &instance->users[0];
    bc0a:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    bc0c:	b2db      	uxtb	r3, r3
    bc0e:	2a00      	cmp	r2, #0
    bc10:	f000 8330 	beq.w	c274 <ticker_job+0x6d0>
    bc14:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
    bc18:	2300      	movs	r3, #0
    bc1a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    bc1c:	23ff      	movs	r3, #255	; 0xff
    bc1e:	9301      	str	r3, [sp, #4]
    bc20:	4637      	mov	r7, r6
    bc22:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    bc24:	687b      	ldr	r3, [r7, #4]
    bc26:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    bc28:	f897 c003 	ldrb.w	ip, [r7, #3]
    bc2c:	78bb      	ldrb	r3, [r7, #2]
    bc2e:	46ba      	mov	sl, r7
    bc30:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
    bc32:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    bc34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    bc38:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    bc3c:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    bc3e:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    bc40:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    bc44:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    bc46:	f000 8187 	beq.w	bf58 <ticker_job+0x3b4>
			if (middle == user->count_user_op) {
    bc4a:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    bc4e:	4298      	cmp	r0, r3
    bc50:	bf08      	it	eq
    bc52:	2300      	moveq	r3, #0
			user->middle = middle;
    bc54:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    bc58:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    bc5c:	2a04      	cmp	r2, #4
    bc5e:	f240 8179 	bls.w	bf54 <ticker_job+0x3b0>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    bc62:	2a07      	cmp	r2, #7
    bc64:	f200 8086 	bhi.w	bd74 <ticker_job+0x1d0>
			ticker = &node[user_op->id];
    bc68:	7869      	ldrb	r1, [r5, #1]
    bc6a:	9c04      	ldr	r4, [sp, #16]
    bc6c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    bc70:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    bc74:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    bc76:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    bc78:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    bc7a:	7860      	ldrb	r0, [r4, #1]
    bc7c:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    bc7e:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    bc82:	d077      	beq.n	bd74 <ticker_job+0x1d0>
			    (state == 0U) ||
    bc84:	2a05      	cmp	r2, #5
    bc86:	d065      	beq.n	bd54 <ticker_job+0x1b0>
			if (state == 1U) {
    bc88:	2801      	cmp	r0, #1
    bc8a:	d137      	bne.n	bcfc <ticker_job+0x158>
	previous = instance->ticker_id_head;
    bc8c:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bc90:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    bc94:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    bc98:	d017      	beq.n	bcca <ticker_job+0x126>
		ticker_current = &node[current];
    bc9a:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    bc9e:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    bca0:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    bca4:	f000 8090 	beq.w	bdc8 <ticker_job+0x224>
	total = 0U;
    bca8:	2300      	movs	r3, #0
    bcaa:	e001      	b.n	bcb0 <ticker_job+0x10c>
		if (current == id) {
    bcac:	4561      	cmp	r1, ip
    bcae:	d070      	beq.n	bd92 <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
    bcb0:	46e6      	mov	lr, ip
		current = ticker_current->next;
    bcb2:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    bcb6:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    bcba:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    bcbe:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    bcc2:	4443      	add	r3, r8
		ticker_current = &node[current];
    bcc4:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    bcc8:	d1f0      	bne.n	bcac <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bcca:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bccc:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bcce:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bcd0:	f000 812b 	beq.w	bf2a <ticker_job+0x386>
		ticker->req = ticker->ack;
    bcd4:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    bcd6:	f899 301c 	ldrb.w	r3, [r9, #28]
    bcda:	428b      	cmp	r3, r1
    bcdc:	d022      	beq.n	bd24 <ticker_job+0x180>
	if (user_op->fp_op_func) {
    bcde:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bce0:	2000      	movs	r0, #0
    bce2:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    bce4:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bce6:	b10b      	cbz	r3, bcec <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bce8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bcea:	4798      	blx	r3
    bcec:	f89a c003 	ldrb.w	ip, [sl, #3]
    bcf0:	f89a 3002 	ldrb.w	r3, [sl, #2]
    bcf4:	e79c      	b.n	bc30 <ticker_job+0x8c>
		flag_elapsed = 0U;
    bcf6:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    bcf8:	9202      	str	r2, [sp, #8]
    bcfa:	e779      	b.n	bbf0 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    bcfc:	2104      	movs	r1, #4
    bcfe:	464b      	mov	r3, r9
    bd00:	2201      	movs	r2, #1
    bd02:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    bd06:	4608      	mov	r0, r1
    bd08:	47a0      	blx	r4
	while (count_user--) {
    bd0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
    bd0c:	f88a 8002 	strb.w	r8, [sl, #2]
    bd10:	4657      	mov	r7, sl
				pending = 1U;
    bd12:	2301      	movs	r3, #1
	while (count_user--) {
    bd14:	42ba      	cmp	r2, r7
				pending = 1U;
    bd16:	9308      	str	r3, [sp, #32]
    bd18:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    bd1c:	f000 8123 	beq.w	bf66 <ticker_job+0x3c2>
    bd20:	461f      	mov	r7, r3
    bd22:	e77f      	b.n	bc24 <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
    bd24:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    bd26:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    bd28:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    bd2c:	f040 81e2 	bne.w	c0f4 <ticker_job+0x550>
				ticks_at_stop =
    bd30:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    bd32:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    bd36:	1ac2      	subs	r2, r0, r3
    bd38:	0214      	lsls	r4, r2, #8
    bd3a:	f100 81d2 	bmi.w	c0e2 <ticker_job+0x53e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bd3e:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    bd42:	9a02      	ldr	r2, [sp, #8]
    bd44:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    bd46:	f8d9 2018 	ldr.w	r2, [r9, #24]
    bd4a:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    bd4c:	bf88      	it	hi
    bd4e:	f8c9 3018 	strhi.w	r3, [r9, #24]
    bd52:	e7c4      	b.n	bcde <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    bd54:	686e      	ldr	r6, [r5, #4]
    bd56:	2e00      	cmp	r6, #0
    bd58:	d196      	bne.n	bc88 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    bd5a:	68ae      	ldr	r6, [r5, #8]
    bd5c:	2e00      	cmp	r6, #0
    bd5e:	d193      	bne.n	bc88 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    bd60:	68ee      	ldr	r6, [r5, #12]
    bd62:	2e00      	cmp	r6, #0
    bd64:	d190      	bne.n	bc88 <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    bd66:	692e      	ldr	r6, [r5, #16]
    bd68:	2e00      	cmp	r6, #0
    bd6a:	d18d      	bne.n	bc88 <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
    bd6c:	696e      	ldr	r6, [r5, #20]
    bd6e:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    bd72:	d189      	bne.n	bc88 <ticker_job+0xe4>
	if (user_op->fp_op_func) {
    bd74:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bd76:	2100      	movs	r1, #0
	user_op->status = status;
    bd78:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bd7a:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    bd7c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bd7e:	2a00      	cmp	r2, #0
    bd80:	f43f af56 	beq.w	bc30 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bd84:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bd86:	4790      	blx	r2
    bd88:	f89a c003 	ldrb.w	ip, [sl, #3]
    bd8c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    bd90:	e74e      	b.n	bc30 <ticker_job+0x8c>
	if (previous == current) {
    bd92:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    bd96:	4571      	cmp	r1, lr
    bd98:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    bd9c:	d016      	beq.n	bdcc <ticker_job+0x228>
	node[previous].next = ticker_current->next;
    bd9e:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    bda0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    bda4:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    bda6:	29ff      	cmp	r1, #255	; 0xff
    bda8:	d006      	beq.n	bdb8 <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
    bdaa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    bdae:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    bdb2:	6888      	ldr	r0, [r1, #8]
    bdb4:	4460      	add	r0, ip
    bdb6:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    bdb8:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bdbc:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bdbe:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bdc0:	d009      	beq.n	bdd6 <ticker_job+0x232>
    bdc2:	78a7      	ldrb	r7, [r4, #2]
    bdc4:	7869      	ldrb	r1, [r5, #1]
    bdc6:	e785      	b.n	bcd4 <ticker_job+0x130>
		if (current == id) {
    bdc8:	4607      	mov	r7, r0
	total = 0U;
    bdca:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    bdcc:	7802      	ldrb	r2, [r0, #0]
    bdce:	f889 201d 	strb.w	r2, [r9, #29]
    bdd2:	782a      	ldrb	r2, [r5, #0]
    bdd4:	e7e3      	b.n	bd9e <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    bdd6:	f8d9 7014 	ldr.w	r7, [r9, #20]
    bdda:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    bddc:	f00b fbf0 	bl	175c0 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bde0:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bde2:	eba0 0c07 	sub.w	ip, r0, r7
    bde6:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bdea:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    bdec:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    bdee:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    bdf0:	f240 80a7 	bls.w	bf42 <ticker_job+0x39e>
		ticks_to_expire -= ticks_elapsed;
    bdf4:	6962      	ldr	r2, [r4, #20]
    bdf6:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    bdf8:	6866      	ldr	r6, [r4, #4]
    bdfa:	2e00      	cmp	r6, #0
    bdfc:	d053      	beq.n	bea6 <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
    bdfe:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    be00:	2800      	cmp	r0, #0
    be02:	d050      	beq.n	bea6 <ticker_job+0x302>
		user_op->params.update.lazy--;
    be04:	3801      	subs	r0, #1
    be06:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    be08:	429e      	cmp	r6, r3
    be0a:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
    be0c:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    be0e:	d225      	bcs.n	be5c <ticker_job+0x2b8>
    be10:	f106 0b01 	add.w	fp, r6, #1
    be14:	920b      	str	r2, [sp, #44]	; 0x2c
    be16:	e011      	b.n	be3c <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    be18:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    be1c:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    be20:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    be24:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
    be26:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
    be28:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    be2a:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    be2e:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    be30:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    be32:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    be34:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    be36:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    be38:	d20e      	bcs.n	be58 <ticker_job+0x2b4>
    be3a:	8aa8      	ldrh	r0, [r5, #20]
    be3c:	4288      	cmp	r0, r1
    be3e:	f080 81c1 	bcs.w	c1c4 <ticker_job+0x620>
					   ticker_remainder_dec(ticker);
    be42:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    be46:	f8df e2d0 	ldr.w	lr, [pc, #720]	; c118 <ticker_job+0x574>
					   ticker_remainder_dec(ticker);
    be4a:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
    be4c:	4ab1      	ldr	r2, [pc, #708]	; (c114 <ticker_job+0x570>)
    be4e:	4486      	add	lr, r0
    be50:	4596      	cmp	lr, r2
    be52:	d8e1      	bhi.n	be18 <ticker_job+0x274>
    be54:	46b6      	mov	lr, r6
    be56:	e7e6      	b.n	be26 <ticker_job+0x282>
    be58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    be5a:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be5c:	4288      	cmp	r0, r1
    be5e:	d921      	bls.n	bea4 <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
    be60:	6a20      	ldr	r0, [r4, #32]
    be62:	9009      	str	r0, [sp, #36]	; 0x24
    be64:	f106 0e01 	add.w	lr, r6, #1
    be68:	920b      	str	r2, [sp, #44]	; 0x2c
    be6a:	e007      	b.n	be7c <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
    be6c:	6260      	str	r0, [r4, #36]	; 0x24
    be6e:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be70:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    be72:	3101      	adds	r1, #1
    be74:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be76:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    be78:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be7a:	d211      	bcs.n	bea0 <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
    be7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    be7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    be80:	f8df b294 	ldr.w	fp, [pc, #660]	; c118 <ticker_job+0x574>
	ticker->remainder_current += ticker->remainder_periodic;
    be84:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    be86:	4aa3      	ldr	r2, [pc, #652]	; (c114 <ticker_job+0x570>)
    be88:	4483      	add	fp, r0
    be8a:	4593      	cmp	fp, r2
    be8c:	d8ee      	bhi.n	be6c <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    be8e:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    be92:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    be96:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    be9a:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    be9c:	46f3      	mov	fp, lr
    be9e:	e7e7      	b.n	be70 <ticker_job+0x2cc>
    bea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bea2:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    bea4:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    bea6:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    beaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    beac:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    beae:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    beb0:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    beb2:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    beb4:	b136      	cbz	r6, bec4 <ticker_job+0x320>
    beb6:	6831      	ldr	r1, [r6, #0]
    beb8:	b121      	cbz	r1, bec4 <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
    beba:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    bebe:	6070      	str	r0, [r6, #4]
    bec0:	68a3      	ldr	r3, [r4, #8]
    bec2:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    bec4:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    bec8:	d126      	bne.n	bf18 <ticker_job+0x374>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    beca:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    becc:	4293      	cmp	r3, r2
    bece:	d920      	bls.n	bf12 <ticker_job+0x36e>
		ticks_to_expire -= ticks_to_expire_minus;
    bed0:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    bed2:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    bed4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    bed6:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    bed8:	68e9      	ldr	r1, [r5, #12]
    beda:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    bedc:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    bede:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    bee0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    bee2:	bf88      	it	hi
    bee4:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    bee6:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    bee8:	bf98      	it	ls
    beea:	2300      	movls	r3, #0
    beec:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    beee:	b102      	cbz	r2, bef2 <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
    bef0:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
    bef2:	7deb      	ldrb	r3, [r5, #23]
    bef4:	b113      	cbz	r3, befc <ticker_job+0x358>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    bef6:	3b01      	subs	r3, #1
    bef8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    befc:	9b04      	ldr	r3, [sp, #16]
    befe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bf00:	4619      	mov	r1, r3
    bf02:	9b01      	ldr	r3, [sp, #4]
    bf04:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    bf06:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    bf08:	786a      	ldrb	r2, [r5, #1]
    bf0a:	9201      	str	r2, [sp, #4]
		ticker->req++;
    bf0c:	3301      	adds	r3, #1
    bf0e:	7063      	strb	r3, [r4, #1]
    bf10:	e6e5      	b.n	bcde <ticker_job+0x13a>
    bf12:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    bf14:	2300      	movs	r3, #0
    bf16:	e7dd      	b.n	bed4 <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bf18:	9903      	ldr	r1, [sp, #12]
    bf1a:	eba1 0708 	sub.w	r7, r1, r8
    bf1e:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    bf22:	429f      	cmp	r7, r3
    bf24:	d213      	bcs.n	bf4e <ticker_job+0x3aa>
			ticks_to_expire -= delta_current_start;
    bf26:	1bdb      	subs	r3, r3, r7
    bf28:	e7d0      	b.n	becc <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    bf2a:	f8d9 7014 	ldr.w	r7, [r9, #20]
    bf2e:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    bf30:	f00b fb46 	bl	175c0 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bf34:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bf36:	eba0 0c07 	sub.w	ip, r0, r7
    bf3a:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    bf3e:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bf40:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    bf42:	6961      	ldr	r1, [r4, #20]
    bf44:	440b      	add	r3, r1
    bf46:	1b9a      	subs	r2, r3, r6
    bf48:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    bf4a:	2300      	movs	r3, #0
    bf4c:	e754      	b.n	bdf8 <ticker_job+0x254>
			ticks_to_expire_minus +=
    bf4e:	443a      	add	r2, r7
    bf50:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    bf52:	e7df      	b.n	bf14 <ticker_job+0x370>
    bf54:	4698      	mov	r8, r3
    bf56:	e66d      	b.n	bc34 <ticker_job+0x90>
	while (count_user--) {
    bf58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bf5a:	4657      	mov	r7, sl
    bf5c:	42ba      	cmp	r2, r7
    bf5e:	f1a7 0308 	sub.w	r3, r7, #8
    bf62:	f47f aedd 	bne.w	bd20 <ticker_job+0x17c>
    bf66:	f899 701d 	ldrb.w	r7, [r9, #29]
    bf6a:	9b06      	ldr	r3, [sp, #24]
    bf6c:	1bdb      	subs	r3, r3, r7
    bf6e:	bf18      	it	ne
    bf70:	2301      	movne	r3, #1
    bf72:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
    bf74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf76:	46cb      	mov	fp, r9
    bf78:	2b00      	cmp	r3, #0
    bf7a:	f040 8183 	bne.w	c284 <ticker_job+0x6e0>
	count_user = instance->count_user;
    bf7e:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    bf82:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    bf86:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    bf8a:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    bf8c:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    bf8e:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    bf90:	b2db      	uxtb	r3, r3
    bf92:	2a00      	cmp	r2, #0
    bf94:	f000 811a 	beq.w	c1cc <ticker_job+0x628>
    bf98:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bf9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf9e:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    bfa0:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    bfa4:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    bfa8:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    bfaa:	9b01      	ldr	r3, [sp, #4]
    bfac:	2bff      	cmp	r3, #255	; 0xff
    bfae:	d05e      	beq.n	c06e <ticker_job+0x4ca>
				ticker = &node[id_insert];
    bfb0:	f8dd a004 	ldr.w	sl, [sp, #4]
    bfb4:	9b04      	ldr	r3, [sp, #16]
    bfb6:	fa0f f48a 	sxth.w	r4, sl
    bfba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bfbe:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    bfc2:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    bfc6:	f813 300c 	ldrb.w	r3, [r3, ip]
    bfca:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    bfcc:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    bfce:	22ff      	movs	r2, #255	; 0xff
    bfd0:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    bfd2:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    bfd6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    bfda:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bfde:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    bfe0:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    bfe2:	bf18      	it	ne
    bfe4:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bfe6:	d111      	bne.n	c00c <ticker_job+0x468>
    bfe8:	e098      	b.n	c11c <ticker_job+0x578>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    bfea:	ebb1 010c 	subs.w	r1, r1, ip
    bfee:	d106      	bne.n	bffe <ticker_job+0x45a>
    bff0:	f8be e01e 	ldrh.w	lr, [lr, #30]
    bff4:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    bff8:	45f1      	cmp	r9, lr
    bffa:	f200 80e0 	bhi.w	c1be <ticker_job+0x61a>
		current = ticker_current->next;
    bffe:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c002:	9302      	str	r3, [sp, #8]
    c004:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c008:	d077      	beq.n	c0fa <ticker_job+0x556>
    c00a:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    c00c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c010:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    c014:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    c018:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c01c:	458c      	cmp	ip, r1
    c01e:	d9e4      	bls.n	bfea <ticker_job+0x446>
    c020:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    c022:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    c024:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    c026:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    c028:	d16c      	bne.n	c104 <ticker_job+0x560>
		instance->ticker_id_head = id;
    c02a:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c02e:	2bff      	cmp	r3, #255	; 0xff
    c030:	d006      	beq.n	c040 <ticker_job+0x49c>
		node[current].ticks_to_expire -= ticks_to_expire;
    c032:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c036:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    c03a:	68bb      	ldr	r3, [r7, #8]
    c03c:	1a59      	subs	r1, r3, r1
    c03e:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    c040:	78a3      	ldrb	r3, [r4, #2]
    c042:	3301      	adds	r3, #1
    c044:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    c046:	2d00      	cmp	r5, #0
    c048:	d0af      	beq.n	bfaa <ticker_job+0x406>
	if (user_op->fp_op_func) {
    c04a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c04c:	9a03      	ldr	r2, [sp, #12]
    c04e:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    c050:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    c052:	b113      	cbz	r3, c05a <ticker_job+0x4b6>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c054:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c056:	2000      	movs	r0, #0
    c058:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    c05a:	6863      	ldr	r3, [r4, #4]
    c05c:	2b00      	cmp	r3, #0
    c05e:	d1a4      	bne.n	bfaa <ticker_job+0x406>
					ticker->op_context =
    c060:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    c064:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    c068:	9b01      	ldr	r3, [sp, #4]
    c06a:	2bff      	cmp	r3, #255	; 0xff
    c06c:	d1a0      	bne.n	bfb0 <ticker_job+0x40c>
    c06e:	f898 3002 	ldrb.w	r3, [r8, #2]
    c072:	42b3      	cmp	r3, r6
    c074:	d02e      	beq.n	c0d4 <ticker_job+0x530>
    c076:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    c078:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    c07c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    c080:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    c084:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c086:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    c08a:	b2f6      	uxtb	r6, r6
					first = 0U;
    c08c:	42b0      	cmp	r0, r6
    c08e:	bf08      	it	eq
    c090:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c092:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    c094:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c098:	d11a      	bne.n	c0d0 <ticker_job+0x52c>
				id_insert = user_op->id;
    c09a:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    c09e:	9b04      	ldr	r3, [sp, #16]
    c0a0:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    c0a4:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    c0a8:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    c0ac:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    c0ae:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    c0b0:	1ac9      	subs	r1, r1, r3
    c0b2:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    c0b6:	d036      	beq.n	c126 <ticker_job+0x582>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c0b8:	9b03      	ldr	r3, [sp, #12]
    c0ba:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    c0be:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    c0c0:	2201      	movs	r2, #1
    c0c2:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c0c4:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    c0c6:	b10b      	cbz	r3, c0cc <ticker_job+0x528>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c0c8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c0ca:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    c0cc:	f898 3002 	ldrb.w	r3, [r8, #2]
    c0d0:	42b3      	cmp	r3, r6
    c0d2:	d1d1      	bne.n	c078 <ticker_job+0x4d4>
	while (count_user--) {
    c0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c0d6:	4542      	cmp	r2, r8
    c0d8:	f1a8 0308 	sub.w	r3, r8, #8
    c0dc:	d074      	beq.n	c1c8 <ticker_job+0x624>
    c0de:	4698      	mov	r8, r3
    c0e0:	e75e      	b.n	bfa0 <ticker_job+0x3fc>
				if (ticks_elapsed > ticks_used) {
    c0e2:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c0e4:	1a1b      	subs	r3, r3, r0
    c0e6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    c0ea:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    c0ec:	bf8c      	ite	hi
    c0ee:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    c0f0:	2300      	movls	r3, #0
    c0f2:	e628      	b.n	bd46 <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
    c0f4:	f00b fa64 	bl	175c0 <cntr_cnt_get>
    c0f8:	e61b      	b.n	bd32 <ticker_job+0x18e>
	ticker_new->next = current;
    c0fa:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    c0fc:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    c0fe:	f880 c000 	strb.w	ip, [r0]
    c102:	4663      	mov	r3, ip
		node[previous].next = id;
    c104:	b212      	sxth	r2, r2
    c106:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c10a:	0112      	lsls	r2, r2, #4
    c10c:	f807 a002 	strb.w	sl, [r7, r2]
    c110:	e78d      	b.n	c02e <ticker_job+0x48a>
    c112:	bf00      	nop
    c114:	7f172b59 	.word	0x7f172b59
    c118:	ff172b5a 	.word	0xff172b5a
	ticker_new->next = current;
    c11c:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    c120:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c124:	e78c      	b.n	c040 <ticker_job+0x49c>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c126:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    c128:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c12c:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    c130:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    c134:	429f      	cmp	r7, r3
    c136:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    c13a:	d03a      	beq.n	c1b2 <ticker_job+0x60e>
		ticker->must_expire =
    c13c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c140:	1afb      	subs	r3, r7, r3
    c142:	fab3 f383 	clz	r3, r3
    c146:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    c148:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    c14c:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    c150:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c152:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    c154:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    c158:	454f      	cmp	r7, r9
    c15a:	bf88      	it	hi
    c15c:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    c15e:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c162:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    c164:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    c166:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    c168:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c16a:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    c16e:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c172:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    c174:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c176:	d40c      	bmi.n	c192 <ticker_job+0x5ee>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c178:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c17c:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    c17e:	b18b      	cbz	r3, c1a4 <ticker_job+0x600>
	ticker->ticks_to_expire = ticks_to_expire;
    c180:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    c182:	9b03      	ldr	r3, [sp, #12]
    c184:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    c186:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    c188:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c18c:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    c18e:	70e3      	strb	r3, [r4, #3]
}
    c190:	e71d      	b.n	bfce <ticker_job+0x42a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c192:	ebae 0200 	sub.w	r2, lr, r0
    c196:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c19a:	4293      	cmp	r3, r2
    c19c:	d905      	bls.n	c1aa <ticker_job+0x606>
			ticks_to_expire -= delta_current_start;
    c19e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c1a0:	2b00      	cmp	r3, #0
    c1a2:	d1ed      	bne.n	c180 <ticker_job+0x5dc>
		ticks_to_expire_minus -= ticks_to_expire;
    c1a4:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c1a6:	2300      	movs	r3, #0
    c1a8:	e7ea      	b.n	c180 <ticker_job+0x5dc>
			    (delta_current_start - ticks_to_expire);
    c1aa:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    c1ac:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c1ae:	2300      	movs	r3, #0
    c1b0:	e7e6      	b.n	c180 <ticker_job+0x5dc>
	ticker->ext_data = start->ext_data;
    c1b2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    c1b6:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c1b8:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    c1ba:	460f      	mov	r7, r1
    c1bc:	e7cf      	b.n	c15e <ticker_job+0x5ba>
    c1be:	9a02      	ldr	r2, [sp, #8]
    c1c0:	4661      	mov	r1, ip
    c1c2:	e72e      	b.n	c022 <ticker_job+0x47e>
    c1c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c1c6:	e649      	b.n	be5c <ticker_job+0x2b8>
    c1c8:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    c1cc:	9b06      	ldr	r3, [sp, #24]
    c1ce:	42bb      	cmp	r3, r7
    c1d0:	f000 832b 	beq.w	c82a <ticker_job+0xc86>
	if (!pending) {
    c1d4:	9b08      	ldr	r3, [sp, #32]
    c1d6:	2b00      	cmp	r3, #0
    c1d8:	f000 834d 	beq.w	c876 <ticker_job+0xcd2>
	instance->job_guard = 0U;
    c1dc:	2300      	movs	r3, #0
    c1de:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c1e2:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    c1e6:	2fff      	cmp	r7, #255	; 0xff
    c1e8:	f000 83d3 	beq.w	c992 <ticker_job+0xdee>
	if (ticker_id_old_head == TICKER_NULL) {
    c1ec:	9b06      	ldr	r3, [sp, #24]
    c1ee:	2bff      	cmp	r3, #255	; 0xff
    c1f0:	f000 83ed 	beq.w	c9ce <ticker_job+0xe2a>
	ticks_to_expire = ticker->ticks_to_expire;
    c1f4:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    c1f8:	f8df 9304 	ldr.w	r9, [pc, #772]	; c500 <ticker_job+0x95c>
    c1fc:	f8df 8304 	ldr.w	r8, [pc, #772]	; c504 <ticker_job+0x960>
    c200:	4ebe      	ldr	r6, [pc, #760]	; (c4fc <ticker_job+0x958>)
	ticker = &instance->nodes[instance->ticker_id_head];
    c202:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    c206:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
    c20a:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    c20c:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    c20e:	f00b f9d7 	bl	175c0 <cntr_cnt_get>
		cc = instance->ticks_current;
    c212:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    c216:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c21a:	1ac4      	subs	r4, r0, r3
    c21c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    c220:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    c222:	42bc      	cmp	r4, r7
    c224:	bf2c      	ite	cs
    c226:	191b      	addcs	r3, r3, r4
    c228:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
    c22a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    c22e:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    c230:	4620      	mov	r0, r4
    c232:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    c234:	f00b f9c4 	bl	175c0 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c238:	eba0 000a 	sub.w	r0, r0, sl
    c23c:	eba4 040a 	sub.w	r4, r4, sl
    c240:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c244:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    c248:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    c24a:	42a0      	cmp	r0, r4
		i--;
    c24c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    c250:	f240 82f6 	bls.w	c840 <ticker_job+0xc9c>
		LL_ASSERT(i);
    c254:	2d00      	cmp	r5, #0
    c256:	d1da      	bne.n	c20e <ticker_job+0x66a>
    c258:	f640 03ba 	movw	r3, #2234	; 0x8ba
    c25c:	464a      	mov	r2, r9
    c25e:	4641      	mov	r1, r8
    c260:	4630      	mov	r0, r6
    c262:	f016 fdd0 	bl	22e06 <printk>
    c266:	4040      	eors	r0, r0
    c268:	f380 8811 	msr	BASEPRI, r0
    c26c:	f04f 0003 	mov.w	r0, #3
    c270:	df02      	svc	2
    c272:	e7cc      	b.n	c20e <ticker_job+0x66a>
	if (flag_elapsed) {
    c274:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c276:	2b00      	cmp	r3, #0
    c278:	f000 82f0 	beq.w	c85c <ticker_job+0xcb8>
	pending = 0U;
    c27c:	9b07      	ldr	r3, [sp, #28]
    c27e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    c280:	23ff      	movs	r3, #255	; 0xff
    c282:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    c284:	f00b f99c 	bl	175c0 <cntr_cnt_get>
	node = &instance->nodes[0];
    c288:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    c28c:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    c290:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c292:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    c294:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c296:	eba0 0003 	sub.w	r0, r0, r3
    c29a:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    c29e:	d04d      	beq.n	c33c <ticker_job+0x798>
    c2a0:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    c2a4:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    c2a8:	9b03      	ldr	r3, [sp, #12]
    c2aa:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    c2ae:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    c2b2:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    c2b4:	459a      	cmp	sl, r3
    c2b6:	f0c0 82d7 	bcc.w	c868 <ticker_job+0xcc4>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    c2ba:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
    c2be:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    c2c2:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    c2c4:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    c2c8:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    c2ca:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    c2ce:	bf25      	ittet	cs
    c2d0:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    c2d4:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    c2d8:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    c2da:	2300      	movcs	r3, #0
    c2dc:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    c2e0:	7861      	ldrb	r1, [r4, #1]
    c2e2:	78a0      	ldrb	r0, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c2e4:	69a7      	ldr	r7, [r4, #24]
    c2e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c2e8:	6866      	ldr	r6, [r4, #4]
    c2ea:	f894 c000 	ldrb.w	ip, [r4]
    c2ee:	9704      	str	r7, [sp, #16]
		state = (ticker->req - ticker->ack) & 0xff;
    c2f0:	1a0b      	subs	r3, r1, r0
    c2f2:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c2f4:	b117      	cbz	r7, c2fc <ticker_job+0x758>
    c2f6:	2b02      	cmp	r3, #2
    c2f8:	f000 8143 	beq.w	c582 <ticker_job+0x9de>
		ticker->ticks_to_expire = 0U;
    c2fc:	2700      	movs	r7, #0
    c2fe:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c300:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c304:	2e00      	cmp	r6, #0
    c306:	f040 80ff 	bne.w	c508 <ticker_job+0x964>
    c30a:	b11a      	cbz	r2, c314 <ticker_job+0x770>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    c30c:	7a12      	ldrb	r2, [r2, #8]
    c30e:	2a01      	cmp	r2, #1
    c310:	f000 80d5 	beq.w	c4be <ticker_job+0x91a>
			if (state && ((state == 1U) || skip_collision) &&
    c314:	b153      	cbz	r3, c32c <ticker_job+0x788>
    c316:	2b01      	cmp	r3, #1
    c318:	d002      	beq.n	c320 <ticker_job+0x77c>
    c31a:	f1be 0f00 	cmp.w	lr, #0
    c31e:	d005      	beq.n	c32c <ticker_job+0x788>
			    ticker->fp_op_func) {
    c320:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    c322:	b11b      	cbz	r3, c32c <ticker_job+0x788>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    c324:	2001      	movs	r0, #1
    c326:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c328:	4798      	blx	r3
    c32a:	78a0      	ldrb	r0, [r4, #2]
			ticker->req = ticker->ack;
    c32c:	7060      	strb	r0, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    c32e:	f89b 501d 	ldrb.w	r5, [fp, #29]
    c332:	2dff      	cmp	r5, #255	; 0xff
    c334:	d1b8      	bne.n	c2a8 <ticker_job+0x704>
    c336:	f8db 3000 	ldr.w	r3, [fp]
    c33a:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
    c33c:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
    c340:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    c344:	f8db 1004 	ldr.w	r1, [fp, #4]
    c348:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    c34a:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    c34c:	42ac      	cmp	r4, r5
    c34e:	bf18      	it	ne
    c350:	2001      	movne	r0, #1
    c352:	9007      	str	r0, [sp, #28]
	while (count_user--) {
    c354:	b2db      	uxtb	r3, r3
    c356:	2a00      	cmp	r2, #0
    c358:	f000 818a 	beq.w	c670 <ticker_job+0xacc>
    c35c:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    c360:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    c364:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    c368:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    c36a:	9b01      	ldr	r3, [sp, #4]
    c36c:	2bff      	cmp	r3, #255	; 0xff
    c36e:	d062      	beq.n	c436 <ticker_job+0x892>
				ticker = &node[id_insert];
    c370:	f8dd a004 	ldr.w	sl, [sp, #4]
    c374:	9b03      	ldr	r3, [sp, #12]
    c376:	fa0f f48a 	sxth.w	r4, sl
    c37a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c37e:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    c382:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    c386:	f813 300c 	ldrb.w	r3, [r3, ip]
    c38a:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    c38c:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    c38e:	22ff      	movs	r2, #255	; 0xff
    c390:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    c392:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    c396:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    c39a:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c39e:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    c3a0:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    c3a2:	bf18      	it	ne
    c3a4:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c3a6:	d112      	bne.n	c3ce <ticker_job+0x82a>
    c3a8:	e15a      	b.n	c660 <ticker_job+0xabc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    c3aa:	ebb1 010c 	subs.w	r1, r1, ip
    c3ae:	d106      	bne.n	c3be <ticker_job+0x81a>
    c3b0:	f8be e01e 	ldrh.w	lr, [lr, #30]
    c3b4:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    c3b8:	45f1      	cmp	r9, lr
    c3ba:	f200 8102 	bhi.w	c5c2 <ticker_job+0xa1e>
		current = ticker_current->next;
    c3be:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c3c2:	9304      	str	r3, [sp, #16]
    c3c4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c3c8:	f000 80ef 	beq.w	c5aa <ticker_job+0xa06>
    c3cc:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    c3ce:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c3d2:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    c3d6:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    c3da:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c3de:	458c      	cmp	ip, r1
    c3e0:	d9e3      	bls.n	c3aa <ticker_job+0x806>
    c3e2:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    c3e4:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    c3e6:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    c3e8:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    c3ea:	f040 80e3 	bne.w	c5b4 <ticker_job+0xa10>
		instance->ticker_id_head = id;
    c3ee:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c3f2:	2bff      	cmp	r3, #255	; 0xff
    c3f4:	d006      	beq.n	c404 <ticker_job+0x860>
		node[current].ticks_to_expire -= ticks_to_expire;
    c3f6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c3fa:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    c3fe:	68bb      	ldr	r3, [r7, #8]
    c400:	1a59      	subs	r1, r3, r1
    c402:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    c404:	78a3      	ldrb	r3, [r4, #2]
    c406:	3301      	adds	r3, #1
    c408:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    c40a:	2d00      	cmp	r5, #0
    c40c:	d0ad      	beq.n	c36a <ticker_job+0x7c6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c40e:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    c412:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c414:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    c416:	2200      	movs	r2, #0
    c418:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    c41a:	b113      	cbz	r3, c422 <ticker_job+0x87e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c41c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c41e:	4610      	mov	r0, r2
    c420:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    c422:	6863      	ldr	r3, [r4, #4]
    c424:	2b00      	cmp	r3, #0
    c426:	d1a0      	bne.n	c36a <ticker_job+0x7c6>
					ticker->op_context =
    c428:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    c42c:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    c430:	9b01      	ldr	r3, [sp, #4]
    c432:	2bff      	cmp	r3, #255	; 0xff
    c434:	d19c      	bne.n	c370 <ticker_job+0x7cc>
    c436:	f898 3002 	ldrb.w	r3, [r8, #2]
    c43a:	42b3      	cmp	r3, r6
    c43c:	d030      	beq.n	c4a0 <ticker_job+0x8fc>
    c43e:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    c440:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    c444:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    c448:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    c44c:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c44e:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    c452:	b2f6      	uxtb	r6, r6
					first = 0U;
    c454:	42b0      	cmp	r0, r6
    c456:	bf08      	it	eq
    c458:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c45a:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    c45c:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c460:	d11c      	bne.n	c49c <ticker_job+0x8f8>
				id_insert = user_op->id;
    c462:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    c466:	9b03      	ldr	r3, [sp, #12]
    c468:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    c46c:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    c470:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    c474:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    c476:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    c478:	1ac9      	subs	r1, r1, r3
    c47a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    c47e:	f000 80a3 	beq.w	c5c8 <ticker_job+0xa24>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c482:	f04f 0300 	mov.w	r3, #0
    c486:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    c48a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    c48c:	2201      	movs	r2, #1
    c48e:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c490:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    c492:	b10b      	cbz	r3, c498 <ticker_job+0x8f4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c494:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c496:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    c498:	f898 3002 	ldrb.w	r3, [r8, #2]
    c49c:	42b3      	cmp	r3, r6
    c49e:	d1cf      	bne.n	c440 <ticker_job+0x89c>
	while (count_user--) {
    c4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c4a2:	4542      	cmp	r2, r8
    c4a4:	f1a8 0308 	sub.w	r3, r8, #8
    c4a8:	f000 80df 	beq.w	c66a <ticker_job+0xac6>
    c4ac:	4698      	mov	r8, r3
    c4ae:	e757      	b.n	c360 <ticker_job+0x7bc>
		ticker->ticks_to_expire = 0U;
    c4b0:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c4b4:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c4b8:	2e00      	cmp	r6, #0
    c4ba:	f43f af27 	beq.w	c30c <ticker_job+0x768>
				ticker->req = ticker->ack;
    c4be:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c4c0:	9e05      	ldr	r6, [sp, #20]
    c4c2:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    c4c6:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c4c8:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c4cc:	1abe      	subs	r6, r7, r2
    c4ce:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
    c4d2:	d14b      	bne.n	c56c <ticker_job+0x9c8>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c4d4:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c4d8:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    c4da:	4299      	cmp	r1, r3
    c4dc:	d24e      	bcs.n	c57c <ticker_job+0x9d8>
		ticks_to_expire -= ticks_to_expire_minus;
    c4de:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
    c4e0:	2100      	movs	r1, #0
			ticker->next = *insert_head;
    c4e2:	9a01      	ldr	r2, [sp, #4]
    c4e4:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    c4e6:	3001      	adds	r0, #1
    c4e8:	7060      	strb	r0, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    c4ea:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c4ec:	6161      	str	r1, [r4, #20]
			ticker->req++;
    c4ee:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    c4f0:	f89b 501d 	ldrb.w	r5, [fp, #29]
    c4f4:	2dff      	cmp	r5, #255	; 0xff
    c4f6:	f47f aed7 	bne.w	c2a8 <ticker_job+0x704>
    c4fa:	e71c      	b.n	c336 <ticker_job+0x792>
    c4fc:	0002c630 	.word	0x0002c630
    c500:	0002c5f0 	.word	0x0002c5f0
    c504:	0002c6f4 	.word	0x0002c6f4
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    c508:	b112      	cbz	r2, c510 <ticker_job+0x96c>
    c50a:	7a13      	ldrb	r3, [r2, #8]
    c50c:	2b01      	cmp	r3, #1
    c50e:	d0d6      	beq.n	c4be <ticker_job+0x91a>
				if (!ticker->lazy_current) {
    c510:	f1be 0f00 	cmp.w	lr, #0
    c514:	d146      	bne.n	c5a4 <ticker_job+0xa00>
					lazy_periodic = ticker->lazy_periodic;
    c516:	8ba7      	ldrh	r7, [r4, #28]
    c518:	9704      	str	r7, [sp, #16]
    c51a:	4608      	mov	r0, r1
				while (count--) {
    c51c:	1c71      	adds	r1, r6, #1
    c51e:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
    c522:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
				ticks_to_expire = 0U;
    c526:	2300      	movs	r3, #0
    c528:	e004      	b.n	c534 <ticker_job+0x990>
    c52a:	4631      	mov	r1, r6
				while (count--) {
    c52c:	3f01      	subs	r7, #1
					ticks_to_expire +=
    c52e:	440b      	add	r3, r1
				while (count--) {
    c530:	1c79      	adds	r1, r7, #1
    c532:	d010      	beq.n	c556 <ticker_job+0x9b2>
	if ((ticker->remainder_current < BIT(31)) &&
    c534:	49b6      	ldr	r1, [pc, #728]	; (c810 <ticker_job+0xc6c>)
    c536:	48b7      	ldr	r0, [pc, #732]	; (c814 <ticker_job+0xc70>)
	ticker->remainder_current += ticker->remainder_periodic;
    c538:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c53a:	1851      	adds	r1, r2, r1
    c53c:	4281      	cmp	r1, r0
    c53e:	d8f4      	bhi.n	c52a <ticker_job+0x986>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c540:	9909      	ldr	r1, [sp, #36]	; 0x24
    c542:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    c546:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c548:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
					ticks_to_expire +=
    c54c:	440b      	add	r3, r1
				while (count--) {
    c54e:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c550:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
				while (count--) {
    c554:	d1ee      	bne.n	c534 <ticker_job+0x990>
				if (!ticker->must_expire) {
    c556:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    c55a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c55c:	6262      	str	r2, [r4, #36]	; 0x24
    c55e:	2900      	cmp	r1, #0
    c560:	f000 8130 	beq.w	c7c4 <ticker_job+0xc20>
				ticker->lazy_current += (lazy_periodic + lazy);
    c564:	9a04      	ldr	r2, [sp, #16]
    c566:	4472      	add	r2, lr
    c568:	83e2      	strh	r2, [r4, #30]
    c56a:	e7a9      	b.n	c4c0 <ticker_job+0x91c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c56c:	1bd2      	subs	r2, r2, r7
    c56e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c572:	429a      	cmp	r2, r3
    c574:	d213      	bcs.n	c59e <ticker_job+0x9fa>
			ticks_to_expire -= delta_current_start;
    c576:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c578:	4299      	cmp	r1, r3
    c57a:	d3b0      	bcc.n	c4de <ticker_job+0x93a>
    c57c:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    c57e:	2300      	movs	r3, #0
    c580:	e7af      	b.n	c4e2 <ticker_job+0x93e>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c582:	f1be 0f00 	cmp.w	lr, #0
    c586:	f47f aeb9 	bne.w	c2fc <ticker_job+0x758>
    c58a:	b112      	cbz	r2, c592 <ticker_job+0x9ee>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c58c:	7a17      	ldrb	r7, [r2, #8]
    c58e:	2f01      	cmp	r7, #1
    c590:	d08e      	beq.n	c4b0 <ticker_job+0x90c>
			instance->ticks_slot_previous = ticker->ticks_slot;
    c592:	9f04      	ldr	r7, [sp, #16]
			instance->ticker_id_slot_previous = id_expired;
    c594:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    c598:	f8cb 7018 	str.w	r7, [fp, #24]
    c59c:	e6ae      	b.n	c2fc <ticker_job+0x758>
			ticks_to_expire_minus +=
    c59e:	4411      	add	r1, r2
    c5a0:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    c5a2:	e7ec      	b.n	c57e <ticker_job+0x9da>
    c5a4:	2700      	movs	r7, #0
					lazy_periodic = 0U;
    c5a6:	9704      	str	r7, [sp, #16]
    c5a8:	e7b8      	b.n	c51c <ticker_job+0x978>
	ticker_new->next = current;
    c5aa:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    c5ac:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    c5ae:	f880 c000 	strb.w	ip, [r0]
    c5b2:	4663      	mov	r3, ip
		node[previous].next = id;
    c5b4:	b212      	sxth	r2, r2
    c5b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c5ba:	0112      	lsls	r2, r2, #4
    c5bc:	f807 a002 	strb.w	sl, [r7, r2]
    c5c0:	e717      	b.n	c3f2 <ticker_job+0x84e>
    c5c2:	9a04      	ldr	r2, [sp, #16]
    c5c4:	4661      	mov	r1, ip
    c5c6:	e70d      	b.n	c3e4 <ticker_job+0x840>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c5c8:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    c5ca:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c5ce:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    c5d2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    c5d6:	429f      	cmp	r7, r3
    c5d8:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    c5dc:	d03a      	beq.n	c654 <ticker_job+0xab0>
		ticker->must_expire =
    c5de:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c5e2:	1afb      	subs	r3, r7, r3
    c5e4:	fab3 f383 	clz	r3, r3
    c5e8:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    c5ea:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    c5ee:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    c5f2:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c5f4:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    c5f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    c5fa:	454f      	cmp	r7, r9
    c5fc:	bf88      	it	hi
    c5fe:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    c600:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c604:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    c606:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    c608:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    c60a:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c60c:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    c610:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c614:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    c616:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c618:	d40c      	bmi.n	c634 <ticker_job+0xa90>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c61a:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c61e:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    c620:	b18b      	cbz	r3, c646 <ticker_job+0xaa2>
	ticker->ticks_to_expire = ticks_to_expire;
    c622:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    c624:	2300      	movs	r3, #0
    c626:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    c628:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    c62a:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c62e:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    c630:	70e3      	strb	r3, [r4, #3]
}
    c632:	e6ac      	b.n	c38e <ticker_job+0x7ea>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c634:	ebae 0200 	sub.w	r2, lr, r0
    c638:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c63c:	4293      	cmp	r3, r2
    c63e:	d905      	bls.n	c64c <ticker_job+0xaa8>
			ticks_to_expire -= delta_current_start;
    c640:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c642:	2b00      	cmp	r3, #0
    c644:	d1ed      	bne.n	c622 <ticker_job+0xa7e>
		ticks_to_expire_minus -= ticks_to_expire;
    c646:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c648:	2300      	movs	r3, #0
    c64a:	e7ea      	b.n	c622 <ticker_job+0xa7e>
			    (delta_current_start - ticks_to_expire);
    c64c:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    c64e:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c650:	2300      	movs	r3, #0
    c652:	e7e6      	b.n	c622 <ticker_job+0xa7e>
	ticker->ext_data = start->ext_data;
    c654:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    c658:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c65a:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    c65c:	460f      	mov	r7, r1
    c65e:	e7cf      	b.n	c600 <ticker_job+0xa5c>
	ticker_new->next = current;
    c660:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    c664:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c668:	e6cc      	b.n	c404 <ticker_job+0x860>
    c66a:	f8db 3000 	ldr.w	r3, [fp]
    c66e:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
    c670:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c674:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
    c676:	2300      	movs	r3, #0
    c678:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
    c67a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    c67e:	d010      	beq.n	c6a2 <ticker_job+0xafe>
    c680:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
    c682:	fa0f f289 	sxth.w	r2, r9
    c686:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c68a:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    c68e:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    c690:	b117      	cbz	r7, c698 <ticker_job+0xaf4>
    c692:	7a39      	ldrb	r1, [r7, #8]
    c694:	2901      	cmp	r1, #1
    c696:	d014      	beq.n	c6c2 <ticker_job+0xb1e>
			ticker_id_head = ticker->next;
    c698:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
    c69c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    c6a0:	d1ef      	bne.n	c682 <ticker_job+0xade>
	return rescheduled;
    c6a2:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    c6a4:	2b00      	cmp	r3, #0
    c6a6:	f43f ad91 	beq.w	c1cc <ticker_job+0x628>
	if (instance->ticker_id_head != ticker_id_old_head) {
    c6aa:	9a06      	ldr	r2, [sp, #24]
    c6ac:	42ba      	cmp	r2, r7
    c6ae:	f47f ad91 	bne.w	c1d4 <ticker_job+0x630>
	if (!pending) {
    c6b2:	9a08      	ldr	r2, [sp, #32]
    c6b4:	2a00      	cmp	r2, #0
    c6b6:	f000 817a 	beq.w	c9ae <ticker_job+0xe0a>
	instance->job_guard = 0U;
    c6ba:	2300      	movs	r3, #0
    c6bc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c6c0:	e591      	b.n	c1e6 <ticker_job+0x642>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c6c2:	f89b 301c 	ldrb.w	r3, [fp, #28]
    c6c6:	2bff      	cmp	r3, #255	; 0xff
    c6c8:	d071      	beq.n	c7ae <ticker_job+0xc0a>
			instance->ticks_slot_previous > ticks_elapsed) {
    c6ca:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c6ce:	9b02      	ldr	r3, [sp, #8]
    c6d0:	4283      	cmp	r3, r0
    c6d2:	d26c      	bcs.n	c7ae <ticker_job+0xc0a>
			window_start_ticks = instance->ticks_slot_previous -
    c6d4:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c6d6:	e9d7 4300 	ldrd	r4, r3, [r7]
    c6da:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    c6dc:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c6e0:	d26d      	bcs.n	c7be <ticker_job+0xc1a>
		while (ticker_id_iter != TICKER_NULL &&
    c6e2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    c6e6:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    c6ea:	d068      	beq.n	c7be <ticker_job+0xc1a>
		       ticks_start_offset + ticker->ticks_slot <=
    c6ec:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    c6ee:	42a5      	cmp	r5, r4
    c6f0:	f04f 0300 	mov.w	r3, #0
    c6f4:	d833      	bhi.n	c75e <ticker_job+0xbba>
    c6f6:	469e      	mov	lr, r3
    c6f8:	9501      	str	r5, [sp, #4]
    c6fa:	4661      	mov	r1, ip
    c6fc:	9203      	str	r2, [sp, #12]
    c6fe:	e01d      	b.n	c73c <ticker_job+0xb98>
			if (node->ticks_to_expire >
    c700:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
    c704:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
    c708:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
    c70c:	4473      	add	r3, lr
			if (node->ticks_to_expire >
    c70e:	d909      	bls.n	c724 <ticker_job+0xb80>
				window_end_ticks =
    c710:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
    c712:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
    c714:	bf28      	it	cs
    c716:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    c718:	4293      	cmp	r3, r2
    c71a:	d903      	bls.n	c724 <ticker_job+0xb80>
			if (ticks_to_expire != 0U &&
    c71c:	1b5b      	subs	r3, r3, r5
    c71e:	d001      	beq.n	c724 <ticker_job+0xb80>
    c720:	4283      	cmp	r3, r0
    c722:	d21b      	bcs.n	c75c <ticker_job+0xbb8>
			window_start_ticks  = node->ticks_to_expire +
    c724:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    c726:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
    c728:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
    c72a:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
    c72c:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
    c72e:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
    c732:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    c734:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
    c736:	d011      	beq.n	c75c <ticker_job+0xbb8>
    c738:	4294      	cmp	r4, r2
    c73a:	d30f      	bcc.n	c75c <ticker_job+0xbb8>
			node = &nodes[ticker_id_iter];
    c73c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c740:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    c744:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
    c748:	f1b8 0f00 	cmp.w	r8, #0
    c74c:	d0d8      	beq.n	c700 <ticker_job+0xb5c>
    c74e:	f898 8008 	ldrb.w	r8, [r8, #8]
    c752:	f1b8 0f01 	cmp.w	r8, #1
    c756:	d1d3      	bne.n	c700 <ticker_job+0xb5c>
				ticker_id_iter = node->next;
    c758:	7809      	ldrb	r1, [r1, #0]
				continue;
    c75a:	e7e8      	b.n	c72e <ticker_job+0xb8a>
    c75c:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    c75e:	6093      	str	r3, [r2, #8]
    c760:	4664      	mov	r4, ip
    c762:	f04f 0eff 	mov.w	lr, #255	; 0xff
    c766:	e000      	b.n	c76a <ticker_job+0xbc6>
    c768:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    c76a:	b221      	sxth	r1, r4
    c76c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c770:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    c774:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    c776:	f8d8 5008 	ldr.w	r5, [r8, #8]
    c77a:	429d      	cmp	r5, r3
    c77c:	d24c      	bcs.n	c818 <ticker_job+0xc74>
				ticker->ticks_to_expire -=
    c77e:	1b5b      	subs	r3, r3, r5
    c780:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    c782:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    c784:	28ff      	cmp	r0, #255	; 0xff
    c786:	46a6      	mov	lr, r4
    c788:	d1ee      	bne.n	c768 <ticker_job+0xbc4>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c78a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c78e:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    c790:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c794:	5c73      	ldrb	r3, [r6, r1]
    c796:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    c798:	f806 9001 	strb.w	r9, [r6, r1]
    c79c:	46e2      	mov	sl, ip
		ticker->lazy_current--;
    c79e:	8bd3      	ldrh	r3, [r2, #30]
    c7a0:	3b01      	subs	r3, #1
    c7a2:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    c7a4:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    c7a8:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    c7aa:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    c7ac:	e765      	b.n	c67a <ticker_job+0xad6>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c7ae:	e9d7 4300 	ldrd	r4, r3, [r7]
    c7b2:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    c7b4:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
    c7b8:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c7bc:	d391      	bcc.n	c6e2 <ticker_job+0xb3e>
		ticker->ticks_to_expire = ticks_to_expire;
    c7be:	2300      	movs	r3, #0
    c7c0:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    c7c2:	e7ec      	b.n	c79e <ticker_job+0xbfa>
					while (ticks_to_expire <
    c7c4:	4598      	cmp	r8, r3
    c7c6:	f67f aecd 	bls.w	c564 <ticker_job+0x9c0>
    c7ca:	1c77      	adds	r7, r6, #1
    c7cc:	9709      	str	r7, [sp, #36]	; 0x24
    c7ce:	e005      	b.n	c7dc <ticker_job+0xc38>
    c7d0:	4637      	mov	r7, r6
						ticks_to_expire +=
    c7d2:	443b      	add	r3, r7
						lazy++;
    c7d4:	3101      	adds	r1, #1
					while (ticks_to_expire <
    c7d6:	4598      	cmp	r8, r3
						lazy++;
    c7d8:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    c7da:	d911      	bls.n	c800 <ticker_job+0xc5c>
	if ((ticker->remainder_current < BIT(31)) &&
    c7dc:	4f0c      	ldr	r7, [pc, #48]	; (c810 <ticker_job+0xc6c>)
    c7de:	480d      	ldr	r0, [pc, #52]	; (c814 <ticker_job+0xc70>)
	ticker->remainder_current += ticker->remainder_periodic;
    c7e0:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c7e2:	19d7      	adds	r7, r2, r7
    c7e4:	4287      	cmp	r7, r0
    c7e6:	d8f3      	bhi.n	c7d0 <ticker_job+0xc2c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c7e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c7ea:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    c7ee:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c7f0:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    c7f4:	3101      	adds	r1, #1
					while (ticks_to_expire <
    c7f6:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c7f8:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    c7fc:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    c7fe:	d8ed      	bhi.n	c7dc <ticker_job+0xc38>
    c800:	9e04      	ldr	r6, [sp, #16]
    c802:	980a      	ldr	r0, [sp, #40]	; 0x28
    c804:	6262      	str	r2, [r4, #36]	; 0x24
    c806:	440e      	add	r6, r1
    c808:	b2b1      	uxth	r1, r6
    c80a:	9104      	str	r1, [sp, #16]
    c80c:	e6aa      	b.n	c564 <ticker_job+0x9c0>
    c80e:	4770      	bx	lr
    c810:	ff172b5a 	.word	0xff172b5a
    c814:	7f172b59 	.word	0x7f172b59
				node->ticks_to_expire -=
    c818:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    c81a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    c81e:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    c822:	d0bc      	beq.n	c79e <ticker_job+0xbfa>
    c824:	fa0f f18e 	sxth.w	r1, lr
    c828:	e7af      	b.n	c78a <ticker_job+0xbe6>
	if (!pending) {
    c82a:	9b08      	ldr	r3, [sp, #32]
    c82c:	2b00      	cmp	r3, #0
    c82e:	f000 80a6 	beq.w	c97e <ticker_job+0xdda>
	instance->job_guard = 0U;
    c832:	2300      	movs	r3, #0
    c834:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c838:	9b07      	ldr	r3, [sp, #28]
    c83a:	2b00      	cmp	r3, #0
    c83c:	f040 80c4 	bne.w	c9c8 <ticker_job+0xe24>
    c840:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
    c844:	b16a      	cbz	r2, c862 <ticker_job+0xcbe>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c846:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    c84a:	465b      	mov	r3, fp
    c84c:	2201      	movs	r2, #1
    c84e:	2103      	movs	r1, #3
    c850:	2004      	movs	r0, #4
    c852:	46a4      	mov	ip, r4
}
    c854:	b00f      	add	sp, #60	; 0x3c
    c856:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c85a:	4760      	bx	ip
	instance->job_guard = 0U;
    c85c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c85e:	f88b 301e 	strb.w	r3, [fp, #30]
}
    c862:	b00f      	add	sp, #60	; 0x3c
    c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
    c868:	eba3 030a 	sub.w	r3, r3, sl
    c86c:	60a3      	str	r3, [r4, #8]
			break;
    c86e:	f8db 3000 	ldr.w	r3, [fp]
    c872:	9303      	str	r3, [sp, #12]
    c874:	e562      	b.n	c33c <ticker_job+0x798>
	count_user = instance->count_user;
    c876:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c87a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c87e:	1e5c      	subs	r4, r3, #1
    c880:	b2e4      	uxtb	r4, r4
    c882:	2b00      	cmp	r3, #0
    c884:	f43f acaa 	beq.w	c1dc <ticker_job+0x638>
		flag_compare_update = 1U;
    c888:	2301      	movs	r3, #1
    c88a:	9307      	str	r3, [sp, #28]
    c88c:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    c890:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    c894:	7863      	ldrb	r3, [r4, #1]
    c896:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    c898:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    c89a:	4299      	cmp	r1, r3
    c89c:	d10c      	bne.n	c8b8 <ticker_job+0xd14>
    c89e:	e060      	b.n	c962 <ticker_job+0xdbe>
	switch (uop->op) {
    c8a0:	2b01      	cmp	r3, #1
    c8a2:	d05a      	beq.n	c95a <ticker_job+0xdb6>
			first = user->first + 1;
    c8a4:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    c8a6:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    c8a8:	3301      	adds	r3, #1
    c8aa:	b2db      	uxtb	r3, r3
				first = 0U;
    c8ac:	429a      	cmp	r2, r3
    c8ae:	bf08      	it	eq
    c8b0:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    c8b2:	4299      	cmp	r1, r3
			user->first = first;
    c8b4:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    c8b6:	d054      	beq.n	c962 <ticker_job+0xdbe>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    c8b8:	b21b      	sxth	r3, r3
    c8ba:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c8be:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c8c2:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    c8c6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    c8ca:	2b02      	cmp	r3, #2
    c8cc:	d01b      	beq.n	c906 <ticker_job+0xd62>
    c8ce:	2b03      	cmp	r3, #3
    c8d0:	d1e6      	bne.n	c8a0 <ticker_job+0xcfc>
		if (uop->id < instance->count_node) {
    c8d2:	7853      	ldrb	r3, [r2, #1]
    c8d4:	f89b 1008 	ldrb.w	r1, [fp, #8]
    c8d8:	4299      	cmp	r1, r3
    c8da:	d911      	bls.n	c900 <ticker_job+0xd5c>
			node[uop->id].priority =
    c8dc:	f8db 1000 	ldr.w	r1, [fp]
    c8e0:	7910      	ldrb	r0, [r2, #4]
    c8e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c8e6:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c8ea:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    c8ee:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    c8f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    c8f4:	b113      	cbz	r3, c8fc <ticker_job+0xd58>
		fp_op_func(uop->status, uop->op_context);
    c8f6:	6b11      	ldr	r1, [r2, #48]	; 0x30
    c8f8:	6a90      	ldr	r0, [r2, #40]	; 0x28
    c8fa:	4798      	blx	r3
    c8fc:	78e1      	ldrb	r1, [r4, #3]
    c8fe:	e7d1      	b.n	c8a4 <ticker_job+0xd00>
			uop->status = TICKER_STATUS_FAILURE;
    c900:	2301      	movs	r3, #1
    c902:	6293      	str	r3, [r2, #40]	; 0x28
    c904:	e7f5      	b.n	c8f2 <ticker_job+0xd4e>
		ticker_by_next_slot_get(instance,
    c906:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    c90a:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    c90e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    c912:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    c916:	f8db 8014 	ldr.w	r8, [fp, #20]
    c91a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    c91e:	d002      	beq.n	c926 <ticker_job+0xd82>
    c920:	6803      	ldr	r3, [r0, #0]
    c922:	4598      	cmp	r8, r3
    c924:	d024      	beq.n	c970 <ticker_job+0xdcc>
		_ticker_id_head = instance->ticker_id_head;
    c926:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    c92a:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    c92e:	f04f 0e00 	mov.w	lr, #0
    c932:	e00d      	b.n	c950 <ticker_job+0xdac>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    c934:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    c938:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    c93c:	0100      	lsls	r0, r0, #4
    c93e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    c942:	f8d8 8018 	ldr.w	r8, [r8, #24]
    c946:	44d6      	add	lr, sl
    c948:	f1b8 0f00 	cmp.w	r8, #0
    c94c:	d102      	bne.n	c954 <ticker_job+0xdb0>
		_ticker_id_head = ticker->next;
    c94e:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    c950:	2bff      	cmp	r3, #255	; 0xff
    c952:	d1ef      	bne.n	c934 <ticker_job+0xd90>
	*ticker_id_head = _ticker_id_head;
    c954:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    c956:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    c95a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    c95c:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    c960:	e7c8      	b.n	c8f4 <ticker_job+0xd50>
	while (count_user--) {
    c962:	42a6      	cmp	r6, r4
    c964:	f1a4 0308 	sub.w	r3, r4, #8
    c968:	f43f af63 	beq.w	c832 <ticker_job+0xc8e>
    c96c:	461c      	mov	r4, r3
    c96e:	e791      	b.n	c894 <ticker_job+0xcf0>
		ticker = &node[_ticker_id_head];
    c970:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    c974:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    c976:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    c97a:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    c97c:	e7e8      	b.n	c950 <ticker_job+0xdac>
	count_user = instance->count_user;
    c97e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c982:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c986:	1e5c      	subs	r4, r3, #1
    c988:	b2e4      	uxtb	r4, r4
    c98a:	2b00      	cmp	r3, #0
    c98c:	f47f af7e 	bne.w	c88c <ticker_job+0xce8>
    c990:	e74f      	b.n	c832 <ticker_job+0xc8e>
		if (cntr_stop() == 0) {
    c992:	f00a fdef 	bl	17574 <cntr_stop>
    c996:	2800      	cmp	r0, #0
    c998:	f47f af52 	bne.w	c840 <ticker_job+0xc9c>
			instance->ticks_slot_previous = 0U;
    c99c:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    c9a0:	f00a fe0e 	bl	175c0 <cntr_cnt_get>
    c9a4:	f89b 201f 	ldrb.w	r2, [fp, #31]
    c9a8:	f8cb 0014 	str.w	r0, [fp, #20]
    c9ac:	e74a      	b.n	c844 <ticker_job+0xca0>
	count_user = instance->count_user;
    c9ae:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    c9b2:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c9b6:	1e54      	subs	r4, r2, #1
    c9b8:	b2e4      	uxtb	r4, r4
    c9ba:	2a00      	cmp	r2, #0
    c9bc:	f47f af65 	bne.w	c88a <ticker_job+0xce6>
	instance->job_guard = 0U;
    c9c0:	9b08      	ldr	r3, [sp, #32]
    c9c2:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c9c6:	e40e      	b.n	c1e6 <ticker_job+0x642>
    c9c8:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c9cc:	e40b      	b.n	c1e6 <ticker_job+0x642>
		ticks_current = cntr_cnt_get();
    c9ce:	f00a fdf7 	bl	175c0 <cntr_cnt_get>
    c9d2:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    c9d4:	f00a fdbe 	bl	17554 <cntr_start>
    c9d8:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c9dc:	2800      	cmp	r0, #0
    c9de:	f47f ac09 	bne.w	c1f4 <ticker_job+0x650>
			instance->ticks_current = ticks_current;
    c9e2:	f8cb 4014 	str.w	r4, [fp, #20]
    c9e6:	e405      	b.n	c1f4 <ticker_job+0x650>

0000c9e8 <ticker_init>:
{
    c9e8:	b4f0      	push	{r4, r5, r6, r7}
    c9ea:	9f04      	ldr	r7, [sp, #16]
    c9ec:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c9f0:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    c9f2:	2800      	cmp	r0, #0
    c9f4:	d13e      	bne.n	ca74 <ticker_init+0x8c>
	instance->count_node = count_node;
    c9f6:	f8df c084 	ldr.w	ip, [pc, #132]	; ca7c <ticker_init+0x94>
	while (count_node--) {
    c9fa:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    c9fc:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    ca00:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    ca04:	b2ed      	uxtb	r5, r5
    ca06:	b149      	cbz	r1, ca1c <ticker_init+0x34>
    ca08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ca0c:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    ca10:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    ca12:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    ca16:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    ca1a:	d1f9      	bne.n	ca10 <ticker_init+0x28>
	while (count_user--) {
    ca1c:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    ca1e:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    ca22:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    ca26:	b2d2      	uxtb	r2, r2
    ca28:	b17b      	cbz	r3, ca4a <ticker_init+0x62>
    ca2a:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    ca2e:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    ca30:	4611      	mov	r1, r2
    ca32:	f812 3908 	ldrb.w	r3, [r2], #-8
    ca36:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    ca3a:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    ca3c:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    ca3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    ca42:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    ca44:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    ca48:	d1f1      	bne.n	ca2e <ticker_init+0x46>
	if (count_op) {
    ca4a:	b99c      	cbnz	r4, ca74 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    ca4c:	9a07      	ldr	r2, [sp, #28]
    ca4e:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    ca52:	9a08      	ldr	r2, [sp, #32]
    ca54:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    ca58:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    ca5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    ca5e:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    ca62:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    ca64:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    ca68:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    ca6a:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    ca6e:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    ca72:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    ca74:	2001      	movs	r0, #1
}
    ca76:	bcf0      	pop	{r4, r5, r6, r7}
    ca78:	4770      	bx	lr
    ca7a:	bf00      	nop
    ca7c:	20002b6c 	.word	0x20002b6c

0000ca80 <ticker_trigger>:
	if (instance->sched_cb) {
    ca80:	4b0a      	ldr	r3, [pc, #40]	; (caac <ticker_trigger+0x2c>)
    ca82:	222c      	movs	r2, #44	; 0x2c
    ca84:	fb02 3200 	mla	r2, r2, r0, r3
{
    ca88:	b410      	push	{r4}
	if (instance->sched_cb) {
    ca8a:	6a54      	ldr	r4, [r2, #36]	; 0x24
    ca8c:	b15c      	cbz	r4, caa6 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    ca8e:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    ca92:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ca96:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca9a:	46a4      	mov	ip, r4
    ca9c:	2201      	movs	r2, #1
}
    ca9e:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    caa0:	2103      	movs	r1, #3
    caa2:	2002      	movs	r0, #2
    caa4:	4760      	bx	ip
}
    caa6:	bc10      	pop	{r4}
    caa8:	4770      	bx	lr
    caaa:	bf00      	nop
    caac:	20002b6c 	.word	0x20002b6c

0000cab0 <ticker_start_ext>:
{
    cab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    cab4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; cb58 <ticker_start_ext+0xa8>
{
    cab8:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    cabc:	272c      	movs	r7, #44	; 0x2c
    cabe:	fb07 8700 	mla	r7, r7, r0, r8
{
    cac2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    cac4:	687d      	ldr	r5, [r7, #4]
    cac6:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    caca:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    cace:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    cad2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    cad6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    cada:	1c75      	adds	r5, r6, #1
{
    cadc:	4608      	mov	r0, r1
	last = user->last + 1;
    cade:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    cae0:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    cae4:	45a9      	cmp	r9, r5
    cae6:	bf98      	it	ls
    cae8:	2500      	movls	r5, #0
	if (last == user->first) {
    caea:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    caec:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    caf0:	d02f      	beq.n	cb52 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    caf2:	f8dc 1004 	ldr.w	r1, [ip, #4]
    caf6:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    cafa:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    cafe:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    cb02:	f04f 0904 	mov.w	r9, #4
    cb06:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    cb0a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    cb0c:	9b08      	ldr	r3, [sp, #32]
    cb0e:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cb12:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    cb14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb16:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    cb18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb1a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    cb1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb1e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    cb20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb22:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    cb24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb26:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    cb28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb2a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    cb2c:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    cb2e:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    cb30:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    cb32:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    cb36:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    cb38:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    cb3a:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cb3e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    cb42:	4798      	blx	r3
    cb44:	4643      	mov	r3, r8
    cb46:	4649      	mov	r1, r9
    cb48:	2200      	movs	r2, #0
    cb4a:	47a8      	blx	r5
	return user_op->status;
    cb4c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    cb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    cb52:	2001      	movs	r0, #1
}
    cb54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb58:	20002b6c 	.word	0x20002b6c

0000cb5c <ticker_start>:
{
    cb5c:	b530      	push	{r4, r5, lr}
    cb5e:	b08b      	sub	sp, #44	; 0x2c
    cb60:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb64:	9500      	str	r5, [sp, #0]
{
    cb66:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb68:	9401      	str	r4, [sp, #4]
    cb6a:	9502      	str	r5, [sp, #8]
{
    cb6c:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    cb70:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb72:	9403      	str	r4, [sp, #12]
    cb74:	9504      	str	r5, [sp, #16]
{
    cb76:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    cb78:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb7a:	9405      	str	r4, [sp, #20]
    cb7c:	9506      	str	r5, [sp, #24]
{
    cb7e:	9c15      	ldr	r4, [sp, #84]	; 0x54
    cb80:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb82:	9407      	str	r4, [sp, #28]
    cb84:	2400      	movs	r4, #0
    cb86:	e9cd 5408 	strd	r5, r4, [sp, #32]
    cb8a:	f7ff ff91 	bl	cab0 <ticker_start_ext>
}
    cb8e:	b00b      	add	sp, #44	; 0x2c
    cb90:	bd30      	pop	{r4, r5, pc}
    cb92:	bf00      	nop

0000cb94 <ticker_update_ext>:
	struct ticker_instance *instance = &_instance[instance_index];
    cb94:	f8df c0a0 	ldr.w	ip, [pc, #160]	; cc38 <ticker_update_ext+0xa4>
{
    cb98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	user = &instance->users[user_id];
    cb9c:	272c      	movs	r7, #44	; 0x2c
    cb9e:	fb07 c700 	mla	r7, r7, r0, ip
{
    cba2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    cba4:	687d      	ldr	r5, [r7, #4]
{
    cba6:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
    cbaa:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    cbae:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    cbb2:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    cbb4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    cbb8:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    cbbc:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    cbbe:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    cbc2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    cbc6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    cbca:	1c75      	adds	r5, r6, #1
    cbcc:	b2ed      	uxtb	r5, r5
		last = 0U;
    cbce:	45aa      	cmp	sl, r5
    cbd0:	bf98      	it	ls
    cbd2:	2500      	movls	r5, #0
	if (last == user->first) {
    cbd4:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    cbd6:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    cbda:	d02a      	beq.n	cc32 <ticker_update_ext+0x9e>
	user_op = &user->user_op[user->last];
    cbdc:	f8d1 c004 	ldr.w	ip, [r1, #4]
    cbe0:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    cbe4:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    cbe8:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    cbec:	f04f 0905 	mov.w	r9, #5
    cbf0:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    cbf4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    cbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbf8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    cbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbfc:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    cbfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc00:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    cc02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc04:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    cc06:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    cc08:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    cc0a:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    cc0c:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    cc10:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    cc12:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.must_expire = must_expire;
    cc16:	f884 b017 	strb.w	fp, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    cc1a:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    cc1c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cc1e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    cc22:	4798      	blx	r3
    cc24:	4653      	mov	r3, sl
    cc26:	2200      	movs	r2, #0
    cc28:	2104      	movs	r1, #4
    cc2a:	47a8      	blx	r5
	return user_op->status;
    cc2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    cc2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    cc32:	2001      	movs	r0, #1
}
    cc34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc38:	20002b6c 	.word	0x20002b6c

0000cc3c <ticker_update>:
{
    cc3c:	b530      	push	{r4, r5, lr}
    cc3e:	b089      	sub	sp, #36	; 0x24
    cc40:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc44:	9500      	str	r5, [sp, #0]
{
    cc46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc48:	9401      	str	r4, [sp, #4]
    cc4a:	9502      	str	r5, [sp, #8]
{
    cc4c:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
    cc50:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc54:	9403      	str	r4, [sp, #12]
    cc56:	9504      	str	r5, [sp, #16]
{
    cc58:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cc5a:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc5c:	9405      	str	r4, [sp, #20]
    cc5e:	2400      	movs	r4, #0
    cc60:	e9cd 5406 	strd	r5, r4, [sp, #24]
    cc64:	f7ff ff96 	bl	cb94 <ticker_update_ext>
}
    cc68:	b009      	add	sp, #36	; 0x24
    cc6a:	bd30      	pop	{r4, r5, pc}

0000cc6c <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    cc6c:	f8df c084 	ldr.w	ip, [pc, #132]	; ccf4 <ticker_stop+0x88>
{
    cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    cc74:	272c      	movs	r7, #44	; 0x2c
    cc76:	fb07 c700 	mla	r7, r7, r0, ip
{
    cc7a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    cc7c:	687d      	ldr	r5, [r7, #4]
{
    cc7e:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    cc80:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    cc84:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    cc88:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    cc8a:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    cc8e:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    cc92:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    cc96:	1c75      	adds	r5, r6, #1
    cc98:	b2ed      	uxtb	r5, r5
		last = 0U;
    cc9a:	45a8      	cmp	r8, r5
    cc9c:	bf98      	it	ls
    cc9e:	2500      	movls	r5, #0
	if (last == user->first) {
    cca0:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    cca2:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    cca6:	d021      	beq.n	ccec <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    cca8:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ccac:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    ccb0:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    ccb4:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    ccb8:	f04f 0e06 	mov.w	lr, #6
    ccbc:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    ccc0:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    ccc4:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    ccc6:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    ccc8:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    cccc:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    ccd0:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    ccd4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ccd6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    ccda:	4798      	blx	r3
    ccdc:	4623      	mov	r3, r4
    ccde:	2200      	movs	r2, #0
    cce0:	2104      	movs	r1, #4
    cce2:	47a8      	blx	r5
	return user_op->status;
    cce4:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    cce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    ccec:	2001      	movs	r0, #1
}
    ccee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccf2:	bf00      	nop
    ccf4:	20002b6c 	.word	0x20002b6c

0000ccf8 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    ccf8:	f00a bc62 	b.w	175c0 <cntr_cnt_get>

0000ccfc <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ccfc:	1a40      	subs	r0, r0, r1
}
    ccfe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cd02:	4770      	bx	lr

0000cd04 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    cd04:	2801      	cmp	r0, #1
    cd06:	d810      	bhi.n	cd2a <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
    cd08:	b938      	cbnz	r0, cd1a <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    cd0a:	b181      	cbz	r1, cd2e <ll_addr_get+0x2a>
    cd0c:	4b0a      	ldr	r3, [pc, #40]	; (cd38 <ll_addr_get+0x34>)
    cd0e:	6818      	ldr	r0, [r3, #0]
    cd10:	6008      	str	r0, [r1, #0]
    cd12:	889a      	ldrh	r2, [r3, #4]
    cd14:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    cd16:	4618      	mov	r0, r3
    cd18:	4770      	bx	lr
		if (bdaddr) {
    cd1a:	b151      	cbz	r1, cd32 <ll_addr_get+0x2e>
    cd1c:	4b07      	ldr	r3, [pc, #28]	; (cd3c <ll_addr_get+0x38>)
    cd1e:	6818      	ldr	r0, [r3, #0]
    cd20:	6008      	str	r0, [r1, #0]
    cd22:	889a      	ldrh	r2, [r3, #4]
    cd24:	808a      	strh	r2, [r1, #4]
	return pub_addr;
    cd26:	4618      	mov	r0, r3
    cd28:	4770      	bx	lr
		return NULL;
    cd2a:	2000      	movs	r0, #0
    cd2c:	4770      	bx	lr
	return pub_addr;
    cd2e:	4802      	ldr	r0, [pc, #8]	; (cd38 <ll_addr_get+0x34>)
}
    cd30:	4770      	bx	lr
		return rnd_addr;
    cd32:	4802      	ldr	r0, [pc, #8]	; (cd3c <ll_addr_get+0x38>)
    cd34:	4770      	bx	lr
    cd36:	bf00      	nop
    cd38:	20002b98 	.word	0x20002b98
    cd3c:	20002ba0 	.word	0x20002ba0

0000cd40 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    cd40:	b538      	push	{r3, r4, r5, lr}
    cd42:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    cd44:	2000      	movs	r0, #0
{
    cd46:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    cd48:	f003 f888 	bl	fe5c <ull_adv_is_enabled>
    cd4c:	b978      	cbnz	r0, cd6e <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    cd4e:	b13c      	cbz	r4, cd60 <ll_addr_set+0x20>
    cd50:	4a08      	ldr	r2, [pc, #32]	; (cd74 <ll_addr_set+0x34>)
    cd52:	4603      	mov	r3, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    cd54:	6828      	ldr	r0, [r5, #0]
    cd56:	6010      	str	r0, [r2, #0]
    cd58:	88a9      	ldrh	r1, [r5, #4]
    cd5a:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    cd5c:	4618      	mov	r0, r3
}
    cd5e:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    cd60:	4b05      	ldr	r3, [pc, #20]	; (cd78 <ll_addr_set+0x38>)
    cd62:	6828      	ldr	r0, [r5, #0]
    cd64:	6018      	str	r0, [r3, #0]
    cd66:	88aa      	ldrh	r2, [r5, #4]
    cd68:	809a      	strh	r2, [r3, #4]
	return 0;
    cd6a:	4620      	mov	r0, r4
}
    cd6c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    cd6e:	200c      	movs	r0, #12
}
    cd70:	bd38      	pop	{r3, r4, r5, pc}
    cd72:	bf00      	nop
    cd74:	20002ba0 	.word	0x20002ba0
    cd78:	20002b98 	.word	0x20002b98

0000cd7c <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    cd7c:	2802      	cmp	r0, #2
    cd7e:	d001      	beq.n	cd84 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    cd80:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    cd82:	4770      	bx	lr
{
    cd84:	b538      	push	{r3, r4, r5, lr}
    cd86:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    cd88:	4608      	mov	r0, r1
    cd8a:	461d      	mov	r5, r3
    cd8c:	f003 fe2c 	bl	109e8 <ll_connected_get>
			if (!conn) {
    cd90:	b110      	cbz	r0, cd98 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    cd92:	2000      	movs	r0, #0
    cd94:	7028      	strb	r0, [r5, #0]
}
    cd96:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd98:	4620      	mov	r0, r4
}
    cd9a:	bd38      	pop	{r3, r4, r5, pc}

0000cd9c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    cd9c:	2300      	movs	r3, #0
    cd9e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    cda0:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    cda2:	4770      	bx	lr

0000cda4 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    cda4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    cda6:	4802      	ldr	r0, [pc, #8]	; (cdb0 <hci_driver_init+0xc>)
    cda8:	f7f9 fce6 	bl	6778 <bt_hci_driver_register>

	return 0;
}
    cdac:	2000      	movs	r0, #0
    cdae:	bd08      	pop	{r3, pc}
    cdb0:	0002c720 	.word	0x0002c720

0000cdb4 <recv_thread>:
{
    cdb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    cdb6:	4d37      	ldr	r5, [pc, #220]	; (ce94 <recv_thread+0xe0>)
		LL_ASSERT(0);
    cdb8:	4f37      	ldr	r7, [pc, #220]	; (ce98 <recv_thread+0xe4>)
    cdba:	4e38      	ldr	r6, [pc, #224]	; (ce9c <recv_thread+0xe8>)
{
    cdbc:	b083      	sub	sp, #12
    cdbe:	e015      	b.n	cdec <recv_thread+0x38>
	switch (class) {
    cdc0:	2b00      	cmp	r3, #0
    cdc2:	d13c      	bne.n	ce3e <recv_thread+0x8a>
		LL_ASSERT(0);
    cdc4:	4836      	ldr	r0, [pc, #216]	; (cea0 <recv_thread+0xec>)
    cdc6:	23cf      	movs	r3, #207	; 0xcf
    cdc8:	463a      	mov	r2, r7
    cdca:	4631      	mov	r1, r6
    cdcc:	f016 f81b 	bl	22e06 <printk>
    cdd0:	4040      	eors	r0, r0
    cdd2:	f380 8811 	msr	BASEPRI, r0
    cdd6:	f04f 0003 	mov.w	r0, #3
    cdda:	df02      	svc	2
	node_rx->hdr.next = NULL;
    cddc:	9b01      	ldr	r3, [sp, #4]
    cdde:	2200      	movs	r2, #0
    cde0:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cde2:	a801      	add	r0, sp, #4
    cde4:	f002 f944 	bl	f070 <ll_rx_mem_release>
	z_impl_k_yield();
    cde8:	f013 f902 	bl	1fff0 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    cdec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cdf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdf4:	4628      	mov	r0, r5
    cdf6:	f012 fd9f 	bl	1f938 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    cdfa:	2800      	cmp	r0, #0
    cdfc:	d0f4      	beq.n	cde8 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
    cdfe:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    ce00:	9001      	str	r0, [sp, #4]
	switch (class) {
    ce02:	2b04      	cmp	r3, #4
    ce04:	d9dc      	bls.n	cdc0 <recv_thread+0xc>
    ce06:	2b05      	cmp	r3, #5
    ce08:	d1dc      	bne.n	cdc4 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ce0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce12:	2003      	movs	r0, #3
    ce14:	f7f8 fad0 	bl	53b8 <bt_buf_get_rx>
    ce18:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    ce1a:	4601      	mov	r1, r0
    ce1c:	9801      	ldr	r0, [sp, #4]
    ce1e:	f000 ff11 	bl	dc44 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    ce22:	9b01      	ldr	r3, [sp, #4]
    ce24:	2200      	movs	r2, #0
    ce26:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ce28:	a801      	add	r0, sp, #4
    ce2a:	f002 f921 	bl	f070 <ll_rx_mem_release>
		if (buf) {
    ce2e:	2c00      	cmp	r4, #0
    ce30:	d0da      	beq.n	cde8 <recv_thread+0x34>
			if (buf->len) {
    ce32:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    ce34:	4620      	mov	r0, r4
			if (buf->len) {
    ce36:	b1db      	cbz	r3, ce70 <recv_thread+0xbc>
				bt_recv(buf);
    ce38:	f7f9 fbdc 	bl	65f4 <bt_recv>
    ce3c:	e7d4      	b.n	cde8 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    ce3e:	2b02      	cmp	r3, #2
    ce40:	d019      	beq.n	ce76 <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ce42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce4a:	2001      	movs	r0, #1
    ce4c:	f7f8 fab4 	bl	53b8 <bt_buf_get_rx>
    ce50:	4604      	mov	r4, r0
		if (buf) {
    ce52:	9801      	ldr	r0, [sp, #4]
    ce54:	b1cc      	cbz	r4, ce8a <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
    ce56:	4621      	mov	r1, r4
    ce58:	f000 ff2e 	bl	dcb8 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    ce5c:	9b01      	ldr	r3, [sp, #4]
    ce5e:	2200      	movs	r2, #0
    ce60:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ce62:	a801      	add	r0, sp, #4
    ce64:	f002 f904 	bl	f070 <ll_rx_mem_release>
			if (buf->len) {
    ce68:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    ce6a:	4620      	mov	r0, r4
			if (buf->len) {
    ce6c:	2b00      	cmp	r3, #0
    ce6e:	d1e3      	bne.n	ce38 <recv_thread+0x84>
				net_buf_unref(buf);
    ce70:	f00b fad8 	bl	18424 <net_buf_unref>
    ce74:	e7b8      	b.n	cde8 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    ce76:	2200      	movs	r2, #0
    ce78:	2300      	movs	r3, #0
    ce7a:	2101      	movs	r1, #1
    ce7c:	2000      	movs	r0, #0
    ce7e:	f7f8 fad1 	bl	5424 <bt_buf_get_evt>
    ce82:	4604      	mov	r4, r0
		if (buf) {
    ce84:	9801      	ldr	r0, [sp, #4]
    ce86:	2c00      	cmp	r4, #0
    ce88:	d1e5      	bne.n	ce56 <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
    ce8a:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    ce8c:	a801      	add	r0, sp, #4
    ce8e:	f002 f8ef 	bl	f070 <ll_rx_mem_release>
		if (buf) {
    ce92:	e7a9      	b.n	cde8 <recv_thread+0x34>
    ce94:	20000c48 	.word	0x20000c48
    ce98:	0002c660 	.word	0x0002c660
    ce9c:	0002c6a0 	.word	0x0002c6a0
    cea0:	0002c630 	.word	0x0002c630

0000cea4 <prio_recv_thread>:
{
    cea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    cea8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; cf60 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    ceac:	4f2b      	ldr	r7, [pc, #172]	; (cf5c <prio_recv_thread+0xb8>)
{
    ceae:	b082      	sub	sp, #8
    ceb0:	e00c      	b.n	cecc <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ceb2:	f7f8 fab7 	bl	5424 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ceb6:	4622      	mov	r2, r4
    ceb8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    cebc:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    cebe:	f001 f97b 	bl	e1b8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    cec2:	4620      	mov	r0, r4
    cec4:	f7f9 fc3a 	bl	673c <bt_recv_prio>
	z_impl_k_yield();
    cec8:	f013 f892 	bl	1fff0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cecc:	f10d 0102 	add.w	r1, sp, #2
    ced0:	a801      	add	r0, sp, #4
    ced2:	f001 ff15 	bl	ed00 <ll_rx_get>
    ced6:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ced8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cedc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cee0:	2100      	movs	r1, #0
    cee2:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cee4:	2c00      	cmp	r4, #0
    cee6:	d1e4      	bne.n	ceb2 <prio_recv_thread+0xe>
		if (node_rx) {
    cee8:	9b01      	ldr	r3, [sp, #4]
    ceea:	b193      	cbz	r3, cf12 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    ceec:	f001 fff2 	bl	eed4 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cef0:	9e01      	ldr	r6, [sp, #4]
    cef2:	4630      	mov	r0, r6
    cef4:	f001 f978 	bl	e1e8 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    cef8:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cefa:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    cefc:	796b      	ldrb	r3, [r5, #5]
    cefe:	2b03      	cmp	r3, #3
    cf00:	d102      	bne.n	cf08 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    cf02:	792b      	ldrb	r3, [r5, #4]
    cf04:	2b14      	cmp	r3, #20
    cf06:	d00c      	beq.n	cf22 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    cf08:	4629      	mov	r1, r5
    cf0a:	4638      	mov	r0, r7
    cf0c:	f01e f844 	bl	2af98 <k_queue_append>
			continue;
    cf10:	e7dc      	b.n	cecc <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    cf12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cf16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf1a:	4640      	mov	r0, r8
    cf1c:	f013 f904 	bl	20128 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cf20:	e7d4      	b.n	cecc <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    cf22:	4621      	mov	r1, r4
    cf24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cf2c:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    cf2e:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    cf30:	f7f8 fa78 	bl	5424 <bt_buf_get_evt>
    cf34:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    cf36:	4622      	mov	r2, r4
    cf38:	f105 001c 	add.w	r0, r5, #28
    cf3c:	4631      	mov	r1, r6
    cf3e:	f000 fe69 	bl	dc14 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    cf42:	4630      	mov	r0, r6
    cf44:	f000 fe76 	bl	dc34 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    cf48:	4620      	mov	r0, r4
			if (buf) {
    cf4a:	b124      	cbz	r4, cf56 <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    cf4c:	f7f9 fbf6 	bl	673c <bt_recv_prio>
					net_buf_unref(buf);
    cf50:	4620      	mov	r0, r4
    cf52:	f00b fa67 	bl	18424 <net_buf_unref>
    cf56:	9d01      	ldr	r5, [sp, #4]
    cf58:	e7d6      	b.n	cf08 <prio_recv_thread+0x64>
    cf5a:	bf00      	nop
    cf5c:	20000c48 	.word	0x20000c48
    cf60:	20000c18 	.word	0x20000c18

0000cf64 <hci_driver_send>:
{
    cf64:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    cf66:	8983      	ldrh	r3, [r0, #12]
{
    cf68:	b083      	sub	sp, #12
	if (!buf->len) {
    cf6a:	2b00      	cmp	r3, #0
    cf6c:	d03a      	beq.n	cfe4 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cf6e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    cf70:	4604      	mov	r4, r0
    cf72:	b31b      	cbz	r3, cfbc <hci_driver_send+0x58>
    cf74:	2b02      	cmp	r3, #2
    cf76:	d00f      	beq.n	cf98 <hci_driver_send+0x34>
    cf78:	4921      	ldr	r1, [pc, #132]	; (d000 <hci_driver_send+0x9c>)
    cf7a:	4a22      	ldr	r2, [pc, #136]	; (d004 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    cf7c:	4822      	ldr	r0, [pc, #136]	; (d008 <hci_driver_send+0xa4>)
    cf7e:	1a52      	subs	r2, r2, r1
    cf80:	08d2      	lsrs	r2, r2, #3
    cf82:	0192      	lsls	r2, r2, #6
    cf84:	4619      	mov	r1, r3
    cf86:	f042 0201 	orr.w	r2, r2, #1
    cf8a:	f016 fb5e 	bl	2364a <log_1>
		return -EINVAL;
    cf8e:	f06f 0515 	mvn.w	r5, #21
}
    cf92:	4628      	mov	r0, r5
    cf94:	b003      	add	sp, #12
    cf96:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    cf98:	a901      	add	r1, sp, #4
    cf9a:	f000 fda3 	bl	dae4 <hci_acl_handle>
	if (evt) {
    cf9e:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    cfa0:	4605      	mov	r5, r0
	if (evt) {
    cfa2:	b113      	cbz	r3, cfaa <hci_driver_send+0x46>
		bt_recv_prio(evt);
    cfa4:	4618      	mov	r0, r3
    cfa6:	f7f9 fbc9 	bl	673c <bt_recv_prio>
	if (!err) {
    cfaa:	2d00      	cmp	r5, #0
    cfac:	d1f1      	bne.n	cf92 <hci_driver_send+0x2e>
		net_buf_unref(buf);
    cfae:	4620      	mov	r0, r4
    cfb0:	f00b fa38 	bl	18424 <net_buf_unref>
    cfb4:	2500      	movs	r5, #0
}
    cfb6:	4628      	mov	r0, r5
    cfb8:	b003      	add	sp, #12
    cfba:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cfbc:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    cfbe:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cfc0:	f000 f9c0 	bl	d344 <hci_cmd_handle>
	if (evt) {
    cfc4:	2800      	cmp	r0, #0
    cfc6:	d0f2      	beq.n	cfae <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    cfc8:	f7f9 fbb8 	bl	673c <bt_recv_prio>
		if (node_rx) {
    cfcc:	9d01      	ldr	r5, [sp, #4]
    cfce:	2d00      	cmp	r5, #0
    cfd0:	d0ed      	beq.n	cfae <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cfd2:	4628      	mov	r0, r5
    cfd4:	f001 f908 	bl	e1e8 <hci_get_class>
    cfd8:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    cfda:	9901      	ldr	r1, [sp, #4]
    cfdc:	480b      	ldr	r0, [pc, #44]	; (d00c <hci_driver_send+0xa8>)
    cfde:	f01d ffdb 	bl	2af98 <k_queue_append>
	if (!err) {
    cfe2:	e7e4      	b.n	cfae <hci_driver_send+0x4a>
    cfe4:	4b06      	ldr	r3, [pc, #24]	; (d000 <hci_driver_send+0x9c>)
    cfe6:	4907      	ldr	r1, [pc, #28]	; (d004 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    cfe8:	4809      	ldr	r0, [pc, #36]	; (d010 <hci_driver_send+0xac>)
    cfea:	1ac9      	subs	r1, r1, r3
    cfec:	08c9      	lsrs	r1, r1, #3
    cfee:	0189      	lsls	r1, r1, #6
    cff0:	f041 0101 	orr.w	r1, r1, #1
    cff4:	f016 fb1c 	bl	23630 <log_0>
		return -EINVAL;
    cff8:	f06f 0515 	mvn.w	r5, #21
    cffc:	e7c9      	b.n	cf92 <hci_driver_send+0x2e>
    cffe:	bf00      	nop
    d000:	0002bfa8 	.word	0x0002bfa8
    d004:	0002bff8 	.word	0x0002bff8
    d008:	0002c6b8 	.word	0x0002c6b8
    d00c:	20000c48 	.word	0x20000c48
    d010:	0002c6a4 	.word	0x0002c6a4

0000d014 <hci_driver_open>:
{
    d014:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    d016:	4822      	ldr	r0, [pc, #136]	; (d0a0 <hci_driver_open+0x8c>)
{
    d018:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    d01a:	f001 fb9f 	bl	e75c <ll_init>
	if (err) {
    d01e:	4604      	mov	r4, r0
    d020:	2800      	cmp	r0, #0
    d022:	d12e      	bne.n	d082 <hci_driver_open+0x6e>
	hci_init(NULL);
    d024:	f001 f8f6 	bl	e214 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    d028:	2600      	movs	r6, #0
    d02a:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d02c:	f06f 0309 	mvn.w	r3, #9
    d030:	9303      	str	r3, [sp, #12]
    d032:	e9cd 6706 	strd	r6, r7, [sp, #24]
    d036:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d03a:	4b1a      	ldr	r3, [pc, #104]	; (d0a4 <hci_driver_open+0x90>)
    d03c:	491a      	ldr	r1, [pc, #104]	; (d0a8 <hci_driver_open+0x94>)
    d03e:	9404      	str	r4, [sp, #16]
    d040:	9400      	str	r4, [sp, #0]
    d042:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    d046:	4819      	ldr	r0, [pc, #100]	; (d0ac <hci_driver_open+0x98>)
    d048:	f013 f8e0 	bl	2020c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    d04c:	4918      	ldr	r1, [pc, #96]	; (d0b0 <hci_driver_open+0x9c>)
    d04e:	4817      	ldr	r0, [pc, #92]	; (d0ac <hci_driver_open+0x98>)
    d050:	f01e f908 	bl	2b264 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d054:	f06f 0307 	mvn.w	r3, #7
    d058:	9303      	str	r3, [sp, #12]
    d05a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    d05e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d062:	4b14      	ldr	r3, [pc, #80]	; (d0b4 <hci_driver_open+0xa0>)
    d064:	4914      	ldr	r1, [pc, #80]	; (d0b8 <hci_driver_open+0xa4>)
    d066:	9404      	str	r4, [sp, #16]
    d068:	9400      	str	r4, [sp, #0]
    d06a:	f640 0298 	movw	r2, #2200	; 0x898
    d06e:	4813      	ldr	r0, [pc, #76]	; (d0bc <hci_driver_open+0xa8>)
    d070:	f013 f8cc 	bl	2020c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    d074:	4912      	ldr	r1, [pc, #72]	; (d0c0 <hci_driver_open+0xac>)
    d076:	4811      	ldr	r0, [pc, #68]	; (d0bc <hci_driver_open+0xa8>)
    d078:	f01e f8f4 	bl	2b264 <z_impl_k_thread_name_set>
}
    d07c:	4620      	mov	r0, r4
    d07e:	b008      	add	sp, #32
    d080:	bdd0      	pop	{r4, r6, r7, pc}
    d082:	4b10      	ldr	r3, [pc, #64]	; (d0c4 <hci_driver_open+0xb0>)
    d084:	4a10      	ldr	r2, [pc, #64]	; (d0c8 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
    d086:	4811      	ldr	r0, [pc, #68]	; (d0cc <hci_driver_open+0xb8>)
    d088:	1ad2      	subs	r2, r2, r3
    d08a:	08d2      	lsrs	r2, r2, #3
    d08c:	0192      	lsls	r2, r2, #6
    d08e:	f042 0201 	orr.w	r2, r2, #1
    d092:	4621      	mov	r1, r4
    d094:	f016 fad9 	bl	2364a <log_1>
}
    d098:	4620      	mov	r0, r4
    d09a:	b008      	add	sp, #32
    d09c:	bdd0      	pop	{r4, r6, r7, pc}
    d09e:	bf00      	nop
    d0a0:	20000c18 	.word	0x20000c18
    d0a4:	0000cea5 	.word	0x0000cea5
    d0a8:	20008e28 	.word	0x20008e28
    d0ac:	200011f8 	.word	0x200011f8
    d0b0:	0002c6ec 	.word	0x0002c6ec
    d0b4:	0000cdb5 	.word	0x0000cdb5
    d0b8:	20008fe8 	.word	0x20008fe8
    d0bc:	20001280 	.word	0x20001280
    d0c0:	0002c6f8 	.word	0x0002c6f8
    d0c4:	0002bfa8 	.word	0x0002bfa8
    d0c8:	0002bff8 	.word	0x0002bff8
    d0cc:	0002c6cc 	.word	0x0002c6cc

0000d0d0 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    d0d0:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d0d2:	4b07      	ldr	r3, [pc, #28]	; (d0f0 <cmd_complete_status+0x20>)
{
    d0d4:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d0d6:	2101      	movs	r1, #1
    d0d8:	8818      	ldrh	r0, [r3, #0]
    d0da:	f017 fcde 	bl	24a9a <bt_hci_cmd_complete_create>
    d0de:	2101      	movs	r1, #1
    d0e0:	4604      	mov	r4, r0
    d0e2:	3008      	adds	r0, #8
    d0e4:	f018 fedc 	bl	25ea0 <net_buf_simple_add>
    d0e8:	4603      	mov	r3, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;

	return buf;
}
    d0ea:	4620      	mov	r0, r4
	ccst->status = status;
    d0ec:	701d      	strb	r5, [r3, #0]
}
    d0ee:	bd38      	pop	{r3, r4, r5, pc}
    d0f0:	200080f2 	.word	0x200080f2

0000d0f4 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    d0f4:	b570      	push	{r4, r5, r6, lr}
    d0f6:	f100 0408 	add.w	r4, r0, #8
    d0fa:	460e      	mov	r6, r1
    d0fc:	4620      	mov	r0, r4
    d0fe:	2102      	movs	r1, #2
    d100:	4615      	mov	r5, r2
    d102:	f018 fecd 	bl	25ea0 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d106:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    d108:	223e      	movs	r2, #62	; 0x3e
    d10a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    d10c:	7043      	strb	r3, [r0, #1]
    d10e:	2101      	movs	r1, #1
    d110:	4620      	mov	r0, r4
    d112:	f018 fec5 	bl	25ea0 <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    d116:	7006      	strb	r6, [r0, #0]
    d118:	4629      	mov	r1, r5
    d11a:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
    d11c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d120:	f018 bebe 	b.w	25ea0 <net_buf_simple_add>

0000d124 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    d124:	b570      	push	{r4, r5, r6, lr}
    d126:	f102 0508 	add.w	r5, r2, #8
    d12a:	4604      	mov	r4, r0
    d12c:	460e      	mov	r6, r1
    d12e:	4628      	mov	r0, r5
    d130:	2102      	movs	r1, #2
    d132:	f018 feb5 	bl	25ea0 <net_buf_simple_add>
    d136:	4603      	mov	r3, r0
	hdr->evt = evt;
    d138:	2208      	movs	r2, #8
	hdr->len = len;
    d13a:	2104      	movs	r1, #4
	hdr->evt = evt;
    d13c:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    d13e:	7059      	strb	r1, [r3, #1]
    d140:	4628      	mov	r0, r5
    d142:	f018 fead 	bl	25ea0 <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    d146:	fab4 f384 	clz	r3, r4
    d14a:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    d14c:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    d14e:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    d150:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    d154:	bd70      	pop	{r4, r5, r6, pc}
    d156:	bf00      	nop

0000d158 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    d158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d15c:	4c17      	ldr	r4, [pc, #92]	; (d1bc <le_remote_feat_complete+0x64>)
    d15e:	6866      	ldr	r6, [r4, #4]
    d160:	f04f 0900 	mov.w	r9, #0
    d164:	464c      	mov	r4, r9
    d166:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    d16a:	4690      	mov	r8, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d16c:	ea54 0205 	orrs.w	r2, r4, r5
    d170:	d009      	beq.n	d186 <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    d172:	4a13      	ldr	r2, [pc, #76]	; (d1c0 <le_remote_feat_complete+0x68>)
    d174:	6812      	ldr	r2, [r2, #0]
    d176:	4607      	mov	r7, r0
    d178:	460e      	mov	r6, r1
    d17a:	f002 0008 	and.w	r0, r2, #8
    d17e:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d180:	ea50 0201 	orrs.w	r2, r0, r1
    d184:	d101      	bne.n	d18a <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    d186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    d18a:	4618      	mov	r0, r3
    d18c:	220b      	movs	r2, #11
    d18e:	2104      	movs	r1, #4
    d190:	f7ff ffb0 	bl	d0f4 <meta_evt>
	sep->status = status;
    d194:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d196:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (!status) {
    d19a:	b947      	cbnz	r7, d1ae <le_remote_feat_complete+0x56>
    d19c:	f856 3f04 	ldr.w	r3, [r6, #4]!
    d1a0:	6872      	ldr	r2, [r6, #4]
    d1a2:	f8c0 2007 	str.w	r2, [r0, #7]
    d1a6:	f8c0 3003 	str.w	r3, [r0, #3]
}
    d1aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
    d1ae:	f8c0 9003 	str.w	r9, [r0, #3]
    d1b2:	f8c0 9007 	str.w	r9, [r0, #7]
    d1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d1ba:	bf00      	nop
    d1bc:	20000160 	.word	0x20000160
    d1c0:	20000168 	.word	0x20000168

0000d1c4 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    d1c4:	b570      	push	{r4, r5, r6, lr}
    d1c6:	f102 0408 	add.w	r4, r2, #8
    d1ca:	4605      	mov	r5, r0
    d1cc:	460e      	mov	r6, r1
    d1ce:	4620      	mov	r0, r4
    d1d0:	2102      	movs	r1, #2
    d1d2:	f018 fe65 	bl	25ea0 <net_buf_simple_add>
    d1d6:	4603      	mov	r3, r0
	hdr->evt = evt;
    d1d8:	2205      	movs	r2, #5
	hdr->len = len;
    d1da:	2104      	movs	r1, #4
	hdr->evt = evt;
    d1dc:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    d1de:	7059      	strb	r1, [r3, #1]
    d1e0:	4620      	mov	r0, r4
    d1e2:	f018 fe5d 	bl	25ea0 <net_buf_simple_add>
	ep->status = 0x00;
    d1e6:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    d1e8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    d1ec:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    d1ee:	782b      	ldrb	r3, [r5, #0]
    d1f0:	70c3      	strb	r3, [r0, #3]
}
    d1f2:	bd70      	pop	{r4, r5, r6, pc}

0000d1f4 <hci_cmd_complete>:
{
    d1f4:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d1f6:	4b06      	ldr	r3, [pc, #24]	; (d210 <hci_cmd_complete+0x1c>)
{
    d1f8:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d1fa:	8818      	ldrh	r0, [r3, #0]
{
    d1fc:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d1fe:	f017 fc4c 	bl	24a9a <bt_hci_cmd_complete_create>
    d202:	4621      	mov	r1, r4
    d204:	6028      	str	r0, [r5, #0]
}
    d206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d20a:	3008      	adds	r0, #8
    d20c:	f018 be48 	b.w	25ea0 <net_buf_simple_add>
    d210:	200080f2 	.word	0x200080f2

0000d214 <hci_vendor_cmd_handle_common>:
{
    d214:	b5f0      	push	{r4, r5, r6, r7, lr}
    d216:	1e43      	subs	r3, r0, #1
    d218:	b087      	sub	sp, #28
    d21a:	4614      	mov	r4, r2
    d21c:	2b09      	cmp	r3, #9
    d21e:	d806      	bhi.n	d22e <hci_vendor_cmd_handle_common+0x1a>
    d220:	e8df f003 	tbb	[pc, r3]
    d224:	0535220a 	.word	0x0535220a
    d228:	50054405 	.word	0x50054405
    d22c:	7f70      	.short	0x7f70
	return 0;
    d22e:	f06f 0415 	mvn.w	r4, #21
}
    d232:	4620      	mov	r0, r4
    d234:	b007      	add	sp, #28
    d236:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d238:	4620      	mov	r0, r4
    d23a:	210d      	movs	r1, #13
    d23c:	f7ff ffda 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d240:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d242:	2302      	movs	r3, #2
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d244:	2205      	movs	r2, #5
	return 0;
    d246:	460c      	mov	r4, r1
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d248:	71c2      	strb	r2, [r0, #7]
	rp->status = 0x00;
    d24a:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d24c:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    d24e:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    d250:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d252:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    d254:	7241      	strb	r1, [r0, #9]
    d256:	7281      	strb	r1, [r0, #10]
    d258:	72c1      	strb	r1, [r0, #11]
    d25a:	7301      	strb	r1, [r0, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d25c:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    d25e:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d260:	7183      	strb	r3, [r0, #6]
}
    d262:	4620      	mov	r0, r4
    d264:	b007      	add	sp, #28
    d266:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d268:	4620      	mov	r0, r4
    d26a:	2141      	movs	r1, #65	; 0x41
    d26c:	f7ff ffc2 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d270:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d272:	4605      	mov	r5, r0
    d274:	4621      	mov	r1, r4
	rp->status = 0x00;
    d276:	f800 4b01 	strb.w	r4, [r0], #1
    d27a:	2240      	movs	r2, #64	; 0x40
    d27c:	f01e faba 	bl	2b7f4 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    d280:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
    d282:	2303      	movs	r3, #3
}
    d284:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    d286:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d288:	70ab      	strb	r3, [r5, #2]
}
    d28a:	b007      	add	sp, #28
    d28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d28e:	4620      	mov	r0, r4
    d290:	2109      	movs	r1, #9
    d292:	f7ff ffaf 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d296:	4602      	mov	r2, r0
    d298:	2300      	movs	r3, #0
    d29a:	f802 3b01 	strb.w	r3, [r2], #1
	return 0;
    d29e:	461c      	mov	r4, r3
    d2a0:	f8c0 3001 	str.w	r3, [r0, #1]
}
    d2a4:	4620      	mov	r0, r4
    d2a6:	6053      	str	r3, [r2, #4]
    d2a8:	b007      	add	sp, #28
    d2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d2ac:	6889      	ldr	r1, [r1, #8]
    d2ae:	2000      	movs	r0, #0
    d2b0:	f7ff fd46 	bl	cd40 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    d2b4:	2000      	movs	r0, #0
    d2b6:	f7ff ff0b 	bl	d0d0 <cmd_complete_status>
    d2ba:	6020      	str	r0, [r4, #0]
    d2bc:	2400      	movs	r4, #0
}
    d2be:	4620      	mov	r0, r4
    d2c0:	b007      	add	sp, #28
    d2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    d2c4:	4e1e      	ldr	r6, [pc, #120]	; (d340 <hci_vendor_cmd_handle_common+0x12c>)
    d2c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d2c8:	466d      	mov	r5, sp
    d2ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d2cc:	e896 0003 	ldmia.w	r6, {r0, r1}
    d2d0:	f845 0b04 	str.w	r0, [r5], #4
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d2d4:	4620      	mov	r0, r4
	const char build_info[] = HCI_VS_BUILD_INFO;
    d2d6:	7029      	strb	r1, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d2d8:	2116      	movs	r1, #22
    d2da:	f7ff ff8b 	bl	d1f4 <hci_cmd_complete>
    d2de:	466d      	mov	r5, sp
    d2e0:	4607      	mov	r7, r0
    d2e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	rp->status = 0x00;
    d2e4:	463e      	mov	r6, r7
    d2e6:	2400      	movs	r4, #0
    d2e8:	f806 4b01 	strb.w	r4, [r6], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d2ec:	f8c7 0001 	str.w	r0, [r7, #1]
    d2f0:	6828      	ldr	r0, [r5, #0]
    d2f2:	792f      	ldrb	r7, [r5, #4]
    d2f4:	6130      	str	r0, [r6, #16]
}
    d2f6:	4620      	mov	r0, r4
    d2f8:	6071      	str	r1, [r6, #4]
    d2fa:	60b2      	str	r2, [r6, #8]
    d2fc:	60f3      	str	r3, [r6, #12]
    d2fe:	7537      	strb	r7, [r6, #20]
    d300:	b007      	add	sp, #28
    d302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    d304:	4620      	mov	r0, r4
    d306:	2118      	movs	r1, #24
    d308:	f7ff ff74 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d30c:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    d30e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d310:	2101      	movs	r1, #1
	rp->status = 0x00;
    d312:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d316:	f00a ff0b 	bl	18130 <hci_vendor_read_static_addr>
    d31a:	7068      	strb	r0, [r5, #1]
}
    d31c:	4620      	mov	r0, r4
    d31e:	b007      	add	sp, #28
    d320:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d322:	4620      	mov	r0, r4
    d324:	2121      	movs	r1, #33	; 0x21
    d326:	f7ff ff65 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d32a:	4601      	mov	r1, r0
    d32c:	2400      	movs	r4, #0
    d32e:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    d332:	3001      	adds	r0, #1
    d334:	f00a ff72 	bl	1821c <hci_vendor_read_key_hierarchy_roots>
}
    d338:	4620      	mov	r0, r4
    d33a:	b007      	add	sp, #28
    d33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d33e:	bf00      	nop
    d340:	0002c734 	.word	0x0002c734

0000d344 <hci_cmd_handle>:
{
    d344:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d346:	8983      	ldrh	r3, [r0, #12]
{
    d348:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    d34a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    d34c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    d34e:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d350:	f240 80b6 	bls.w	d4c0 <hci_cmd_handle+0x17c>
	return net_buf_simple_pull_mem(&buf->b, len);
    d354:	4604      	mov	r4, r0
    d356:	2103      	movs	r1, #3
    d358:	3008      	adds	r0, #8
    d35a:	f018 fdd3 	bl	25f04 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    d35e:	89a2      	ldrh	r2, [r4, #12]
    d360:	7883      	ldrb	r3, [r0, #2]
    d362:	429a      	cmp	r2, r3
    d364:	f0c0 80d3 	bcc.w	d50e <hci_cmd_handle+0x1ca>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d368:	8801      	ldrh	r1, [r0, #0]
    d36a:	4da4      	ldr	r5, [pc, #656]	; (d5fc <hci_cmd_handle+0x2b8>)
	switch (BT_OGF(_opcode)) {
    d36c:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d370:	b288      	uxth	r0, r1
    d372:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
    d374:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
    d378:	ea4f 2291 	mov.w	r2, r1, lsr #10
    d37c:	d267      	bcs.n	d44e <hci_cmd_handle+0x10a>
    d37e:	2a00      	cmp	r2, #0
    d380:	d06f      	beq.n	d462 <hci_cmd_handle+0x11e>
    d382:	3a01      	subs	r2, #1
    d384:	2a07      	cmp	r2, #7
    d386:	d86c      	bhi.n	d462 <hci_cmd_handle+0x11e>
    d388:	e8df f002 	tbb	[pc, r2]
    d38c:	57706b8c 	.word	0x57706b8c
    d390:	046b6b6b 	.word	0x046b6b6b
	switch (ocf) {
    d394:	3b01      	subs	r3, #1
    d396:	2b4d      	cmp	r3, #77	; 0x4d
    d398:	d863      	bhi.n	d462 <hci_cmd_handle+0x11e>
    d39a:	e8df f013 	tbh	[pc, r3, lsl #1]
    d39e:	01df      	.short	0x01df
    d3a0:	01bf01d2 	.word	0x01bf01d2
    d3a4:	01b80062 	.word	0x01b80062
    d3a8:	013b01a8 	.word	0x013b01a8
    d3ac:	01a00126 	.word	0x01a00126
    d3b0:	00620199 	.word	0x00620199
    d3b4:	00620062 	.word	0x00620062
    d3b8:	018d0062 	.word	0x018d0062
    d3bc:	01820188 	.word	0x01820188
    d3c0:	0151017c 	.word	0x0151017c
    d3c4:	016c0062 	.word	0x016c0062
    d3c8:	033b0163 	.word	0x033b0163
    d3cc:	0062032f 	.word	0x0062032f
    d3d0:	03210329 	.word	0x03210329
    d3d4:	0062030b 	.word	0x0062030b
    d3d8:	00620062 	.word	0x00620062
    d3dc:	02f002fc 	.word	0x02f002fc
    d3e0:	02d202e8 	.word	0x02d202e8
    d3e4:	006202c9 	.word	0x006202c9
    d3e8:	02c00062 	.word	0x02c00062
    d3ec:	02b502ba 	.word	0x02b502ba
    d3f0:	029402a9 	.word	0x029402a9
    d3f4:	0278027f 	.word	0x0278027f
    d3f8:	024f0270 	.word	0x024f0270
    d3fc:	02160227 	.word	0x02160227
    d400:	006201e9 	.word	0x006201e9
    d404:	00620062 	.word	0x00620062
    d408:	00620062 	.word	0x00620062
    d40c:	00620062 	.word	0x00620062
    d410:	00620062 	.word	0x00620062
    d414:	00620062 	.word	0x00620062
    d418:	00620062 	.word	0x00620062
    d41c:	00620062 	.word	0x00620062
    d420:	00620062 	.word	0x00620062
    d424:	00620062 	.word	0x00620062
    d428:	00620062 	.word	0x00620062
    d42c:	00620062 	.word	0x00620062
    d430:	01440062 	.word	0x01440062
    d434:	00620062 	.word	0x00620062
    d438:	011f      	.short	0x011f
	switch (ocf) {
    d43a:	3b01      	subs	r3, #1
    d43c:	2b08      	cmp	r3, #8
    d43e:	d810      	bhi.n	d462 <hci_cmd_handle+0x11e>
    d440:	e8df f003 	tbb	[pc, r3]
    d444:	0f7585b5 	.word	0x0f7585b5
    d448:	0f0f0f0f 	.word	0x0f0f0f0f
    d44c:	69          	.byte	0x69
    d44d:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
    d44e:	2a3f      	cmp	r2, #63	; 0x3f
    d450:	d107      	bne.n	d462 <hci_cmd_handle+0x11e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    d452:	4621      	mov	r1, r4
    d454:	4618      	mov	r0, r3
    d456:	aa07      	add	r2, sp, #28
    d458:	f7ff fedc 	bl	d214 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    d45c:	3016      	adds	r0, #22
    d45e:	d154      	bne.n	d50a <hci_cmd_handle+0x1c6>
    d460:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    d462:	2101      	movs	r1, #1
    d464:	f017 fb2b 	bl	24abe <bt_hci_cmd_status_create>
}
    d468:	b00d      	add	sp, #52	; 0x34
    d46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d46c:	2b63      	cmp	r3, #99	; 0x63
    d46e:	f000 8325 	beq.w	dabc <hci_cmd_handle+0x778>
    d472:	d837      	bhi.n	d4e4 <hci_cmd_handle+0x1a0>
    d474:	2b03      	cmp	r3, #3
    d476:	f000 8307 	beq.w	da88 <hci_cmd_handle+0x744>
    d47a:	2b2d      	cmp	r3, #45	; 0x2d
    d47c:	d12d      	bne.n	d4da <hci_cmd_handle+0x196>
		read_tx_power_level(cmd, evt);
    d47e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d480:	2104      	movs	r1, #4
    d482:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d484:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    d486:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d488:	f7ff feb4 	bl	d1f4 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d48c:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d48e:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    d490:	1cc3      	adds	r3, r0, #3
    d492:	4632      	mov	r2, r6
    d494:	2002      	movs	r0, #2
    d496:	f7ff fc71 	bl	cd7c <ll_tx_pwr_lvl_get>
	rp->status = status;
    d49a:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d49c:	9807      	ldr	r0, [sp, #28]
    d49e:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    d4a2:	e7e1      	b.n	d468 <hci_cmd_handle+0x124>
	switch (ocf) {
    d4a4:	2b06      	cmp	r3, #6
    d4a6:	f000 82ce 	beq.w	da46 <hci_cmd_handle+0x702>
    d4aa:	2b1d      	cmp	r3, #29
    d4ac:	d1d9      	bne.n	d462 <hci_cmd_handle+0x11e>
	handle = sys_le16_to_cpu(cmd->handle);
    d4ae:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    d4b0:	8818      	ldrh	r0, [r3, #0]
    d4b2:	f003 fc1b 	bl	10cec <ll_version_ind_send>
    d4b6:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d4b8:	8828      	ldrh	r0, [r5, #0]
    d4ba:	f017 fb00 	bl	24abe <bt_hci_cmd_status_create>
}
    d4be:	e7d3      	b.n	d468 <hci_cmd_handle+0x124>
    d4c0:	494f      	ldr	r1, [pc, #316]	; (d600 <hci_cmd_handle+0x2bc>)
    d4c2:	4b50      	ldr	r3, [pc, #320]	; (d604 <hci_cmd_handle+0x2c0>)
		BT_ERR("No HCI Command header");
    d4c4:	4850      	ldr	r0, [pc, #320]	; (d608 <hci_cmd_handle+0x2c4>)
    d4c6:	1ac9      	subs	r1, r1, r3
    d4c8:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
    d4ca:	0189      	lsls	r1, r1, #6
    d4cc:	f041 0101 	orr.w	r1, r1, #1
    d4d0:	f016 f8ae 	bl	23630 <log_0>
		return NULL;
    d4d4:	4628      	mov	r0, r5
}
    d4d6:	b00d      	add	sp, #52	; 0x34
    d4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d4da:	2b01      	cmp	r3, #1
    d4dc:	d1c1      	bne.n	d462 <hci_cmd_handle+0x11e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d4de:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    d4e0:	4b4a      	ldr	r3, [pc, #296]	; (d60c <hci_cmd_handle+0x2c8>)
    d4e2:	e13d      	b.n	d760 <hci_cmd_handle+0x41c>
	switch (ocf) {
    d4e4:	2b7b      	cmp	r3, #123	; 0x7b
    d4e6:	f000 82bb 	beq.w	da60 <hci_cmd_handle+0x71c>
    d4ea:	2b7c      	cmp	r3, #124	; 0x7c
    d4ec:	d1b9      	bne.n	d462 <hci_cmd_handle+0x11e>
		write_auth_payload_timeout(cmd, evt);
    d4ee:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d4f0:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d4f2:	8859      	ldrh	r1, [r3, #2]
    d4f4:	4628      	mov	r0, r5
    d4f6:	f003 fd2d 	bl	10f54 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d4fa:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4fc:	2103      	movs	r1, #3
    d4fe:	a807      	add	r0, sp, #28
    d500:	f7ff fe78 	bl	d1f4 <hci_cmd_complete>
	rp->status = status;
    d504:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d506:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    d50a:	9807      	ldr	r0, [sp, #28]
    d50c:	e7ac      	b.n	d468 <hci_cmd_handle+0x124>
    d50e:	493c      	ldr	r1, [pc, #240]	; (d600 <hci_cmd_handle+0x2bc>)
    d510:	4b3c      	ldr	r3, [pc, #240]	; (d604 <hci_cmd_handle+0x2c0>)
		BT_ERR("Invalid HCI CMD packet length");
    d512:	483f      	ldr	r0, [pc, #252]	; (d610 <hci_cmd_handle+0x2cc>)
    d514:	e7d7      	b.n	d4c6 <hci_cmd_handle+0x182>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d516:	2107      	movs	r1, #7
    d518:	a807      	add	r0, sp, #28
    d51a:	f7ff fe6b 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d51e:	4601      	mov	r1, r0
    d520:	2000      	movs	r0, #0
    d522:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d526:	f7ff fbed 	bl	cd04 <ll_addr_get>
	if (err == -EINVAL) {
    d52a:	9807      	ldr	r0, [sp, #28]
    d52c:	e79c      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d52e:	2109      	movs	r1, #9
    d530:	a807      	add	r0, sp, #28
    d532:	f7ff fe5f 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d536:	4602      	mov	r2, r0
    d538:	2100      	movs	r1, #0
    d53a:	f802 1b01 	strb.w	r1, [r2], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d53e:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
    d540:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->features[4] = (1 << 5) | (1 << 6);
    d544:	2460      	movs	r4, #96	; 0x60
    d546:	6051      	str	r1, [r2, #4]
    d548:	9807      	ldr	r0, [sp, #28]
    d54a:	715c      	strb	r4, [r3, #5]
	if (err == -EINVAL) {
    d54c:	e78c      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d54e:	2141      	movs	r1, #65	; 0x41
    d550:	a807      	add	r0, sp, #28
    d552:	f7ff fe4f 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d556:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d558:	4604      	mov	r4, r0
    d55a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d55c:	f800 1b01 	strb.w	r1, [r0], #1
    d560:	f01e f948 	bl	2b7f4 <memset>
	rp->commands[0] |= BIT(5);
    d564:	2320      	movs	r3, #32
    d566:	7063      	strb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    d568:	2228      	movs	r2, #40	; 0x28
	rp->commands[5] |= BIT(6) | BIT(7);
    d56a:	23c0      	movs	r3, #192	; 0xc0
	rp->commands[15] |= BIT(1);
    d56c:	2502      	movs	r5, #2
	rp->commands[26] |= BIT(0) | BIT(1);
    d56e:	20c3      	movs	r0, #195	; 0xc3
	rp->commands[28] |= BIT(1) | BIT(2);
    d570:	210e      	movs	r1, #14
	rp->commands[5] |= BIT(6) | BIT(7);
    d572:	71a3      	strb	r3, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    d574:	73e2      	strb	r2, [r4, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
    d576:	2330      	movs	r3, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    d578:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[15] |= BIT(1);
    d57a:	7425      	strb	r5, [r4, #16]
	rp->commands[26] |= BIT(0) | BIT(1);
    d57c:	76e0      	strb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d57e:	25f9      	movs	r5, #249	; 0xf9
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d580:	207f      	movs	r0, #127	; 0x7f
	rp->commands[28] |= BIT(1) | BIT(2);
    d582:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    d584:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    d588:	2180      	movs	r1, #128	; 0x80
	rp->commands[10] |= BIT(2);
    d58a:	2304      	movs	r3, #4
	rp->commands[33] |= BIT(6) | BIT(7);
    d58c:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d590:	22f7      	movs	r2, #247	; 0xf7
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d592:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d596:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    d59a:	9807      	ldr	r0, [sp, #28]
	rp->commands[38] |= BIT(7);
    d59c:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[10] |= BIT(2);
    d5a0:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
    d5a2:	75e3      	strb	r3, [r4, #23]
	rp->commands[39] |= BIT(2);
    d5a4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d5a8:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d5aa:	7722      	strb	r2, [r4, #28]
	if (err == -EINVAL) {
    d5ac:	e75c      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5ae:	2109      	movs	r1, #9
    d5b0:	a807      	add	r0, sp, #28
    d5b2:	f7ff fe1f 	bl	d1f4 <hci_cmd_complete>
    d5b6:	4603      	mov	r3, r0
	rp->status = 0x00;
    d5b8:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    d5ba:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d5bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d5c0:	f06f 050e 	mvn.w	r5, #14
    d5c4:	2405      	movs	r4, #5
	rp->status = 0x00;
    d5c6:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    d5c8:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    d5ca:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d5cc:	715d      	strb	r5, [r3, #5]
    d5ce:	9807      	ldr	r0, [sp, #28]
    d5d0:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    d5d2:	709a      	strb	r2, [r3, #2]
    d5d4:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d5d6:	71d9      	strb	r1, [r3, #7]
    d5d8:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    d5da:	e745      	b.n	d468 <hci_cmd_handle+0x124>
		le_set_privacy_mode(cmd, evt);
    d5dc:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d5de:	79c1      	ldrb	r1, [r0, #7]
    d5e0:	f007 ff84 	bl	154ec <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    d5e4:	f7ff fd74 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d5e8:	e73e      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    d5ea:	68a1      	ldr	r1, [r4, #8]
    d5ec:	f811 0b01 	ldrb.w	r0, [r1], #1
    d5f0:	f002 fc96 	bl	ff20 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    d5f4:	f7ff fd6c 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d5f8:	e736      	b.n	d468 <hci_cmd_handle+0x124>
    d5fa:	bf00      	nop
    d5fc:	200080f2 	.word	0x200080f2
    d600:	0002bff0 	.word	0x0002bff0
    d604:	0002bfa8 	.word	0x0002bfa8
    d608:	0002c74c 	.word	0x0002c74c
    d60c:	20000160 	.word	0x20000160
    d610:	0002c764 	.word	0x0002c764
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d614:	2102      	movs	r1, #2
    d616:	a807      	add	r0, sp, #28
    d618:	f7ff fdec 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d61c:	2300      	movs	r3, #0
    d61e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d620:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    d622:	9807      	ldr	r0, [sp, #28]
    d624:	e720      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d626:	2103      	movs	r1, #3
    d628:	a807      	add	r0, sp, #28
    d62a:	f7ff fde3 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d62e:	4601      	mov	r1, r0
    d630:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d632:	3001      	adds	r0, #1
	rp->status = 0x00;
    d634:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d638:	f7ff fbb0 	bl	cd9c <ll_tx_pwr_get>
	if (err == -EINVAL) {
    d63c:	9807      	ldr	r0, [sp, #28]
    d63e:	e713      	b.n	d468 <hci_cmd_handle+0x124>
		le_conn_update(cmd, evt);
    d640:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    d642:	8911      	ldrh	r1, [r2, #8]
    d644:	8853      	ldrh	r3, [r2, #2]
    d646:	8810      	ldrh	r0, [r2, #0]
    d648:	9102      	str	r1, [sp, #8]
    d64a:	88d1      	ldrh	r1, [r2, #6]
    d64c:	9101      	str	r1, [sp, #4]
    d64e:	8892      	ldrh	r2, [r2, #4]
    d650:	9200      	str	r2, [sp, #0]
    d652:	2200      	movs	r2, #0
    d654:	4611      	mov	r1, r2
    d656:	f003 fa2f 	bl	10ab8 <ll_conn_update>
    d65a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d65c:	8828      	ldrh	r0, [r5, #0]
    d65e:	f017 fa2e 	bl	24abe <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d662:	e701      	b.n	d468 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d664:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    d666:	8818      	ldrh	r0, [r3, #0]
    d668:	f003 fb1a 	bl	10ca0 <ll_feature_req_send>
    d66c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d66e:	8828      	ldrh	r0, [r5, #0]
    d670:	f017 fa25 	bl	24abe <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d674:	e6f8      	b.n	d468 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d676:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d678:	2108      	movs	r1, #8
    d67a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d67c:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d67e:	f7ff fdb9 	bl	d1f4 <hci_cmd_complete>
    d682:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d684:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    d686:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    d688:	f003 faa8 	bl	10bdc <ll_chm_get>
	rp->status = status;
    d68c:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d68e:	9807      	ldr	r0, [sp, #28]
    d690:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    d694:	e6e8      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_wl_remove(&cmd->addr);
    d696:	68a0      	ldr	r0, [r4, #8]
    d698:	f007 fa72 	bl	14b80 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    d69c:	f7ff fd18 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d6a0:	e6e2      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_wl_add(&cmd->addr);
    d6a2:	68a0      	ldr	r0, [r4, #8]
    d6a4:	f007 fd18 	bl	150d8 <ll_wl_add>
	*evt = cmd_complete_status(status);
    d6a8:	f7ff fd12 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d6ac:	e6dc      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_wl_clear();
    d6ae:	f007 fa3d 	bl	14b2c <ll_wl_clear>
	*evt = cmd_complete_status(status);
    d6b2:	f7ff fd0d 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d6b6:	e6d7      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d6b8:	2102      	movs	r1, #2
    d6ba:	a807      	add	r0, sp, #28
    d6bc:	f7ff fd9a 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d6c0:	2300      	movs	r3, #0
    d6c2:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d6c4:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    d6c6:	f007 fa2f 	bl	14b28 <ll_wl_size_get>
    d6ca:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    d6cc:	9807      	ldr	r0, [sp, #28]
    d6ce:	e6cb      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_adv_enable(cmd->enable);
    d6d0:	68a3      	ldr	r3, [r4, #8]
    d6d2:	7818      	ldrb	r0, [r3, #0]
    d6d4:	f7f2 ff2c 	bl	530 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    d6d8:	f7ff fcfa 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d6dc:	e6c4      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    d6de:	68a1      	ldr	r1, [r4, #8]
    d6e0:	f811 0b01 	ldrb.w	r0, [r1], #1
    d6e4:	f002 fc4e 	bl	ff84 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    d6e8:	f7ff fcf2 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d6ec:	e6bc      	b.n	d468 <hci_cmd_handle+0x124>
		le_set_adv_param(cmd, evt);
    d6ee:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    d6f0:	7ba5      	ldrb	r5, [r4, #14]
    d6f2:	79a3      	ldrb	r3, [r4, #6]
    d6f4:	7962      	ldrb	r2, [r4, #5]
    d6f6:	7921      	ldrb	r1, [r4, #4]
    d6f8:	8820      	ldrh	r0, [r4, #0]
    d6fa:	9502      	str	r5, [sp, #8]
    d6fc:	7b65      	ldrb	r5, [r4, #13]
    d6fe:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    d700:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    d702:	9400      	str	r4, [sp, #0]
    d704:	f002 fa24 	bl	fb50 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    d708:	f7ff fce2 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d70c:	e6ac      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    d70e:	68a1      	ldr	r1, [r4, #8]
    d710:	2001      	movs	r0, #1
    d712:	f7ff fb15 	bl	cd40 <ll_addr_set>
	*evt = cmd_complete_status(status);
    d716:	f7ff fcdb 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d71a:	e6a5      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d71c:	2109      	movs	r1, #9
    d71e:	a807      	add	r0, sp, #28
    d720:	f7ff fd68 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    d724:	4603      	mov	r3, r0
    d726:	2200      	movs	r2, #0
    d728:	f803 2b01 	strb.w	r2, [r3], #1
	dst[0] = val;
    d72c:	257f      	movs	r5, #127	; 0x7f
	dst[1] = val >> 8;
    d72e:	2441      	movs	r4, #65	; 0x41
	dst[2] = val >> 16;
    d730:	2101      	movs	r1, #1
    d732:	f8c0 2001 	str.w	r2, [r0, #1]
    d736:	605a      	str	r2, [r3, #4]
	dst[0] = val;
    d738:	7045      	strb	r5, [r0, #1]
	dst[1] = val >> 8;
    d73a:	7084      	strb	r4, [r0, #2]
	dst[2] = val >> 16;
    d73c:	70c1      	strb	r1, [r0, #3]
	if (err == -EINVAL) {
    d73e:	9807      	ldr	r0, [sp, #28]
    d740:	e692      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d742:	2104      	movs	r1, #4
    d744:	a807      	add	r0, sp, #28
    d746:	f7ff fd55 	bl	d1f4 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    d74a:	2203      	movs	r2, #3
	rp->status = 0x00;
    d74c:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    d74e:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    d750:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    d752:	221b      	movs	r2, #27
    d754:	7042      	strb	r2, [r0, #1]
    d756:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    d758:	9807      	ldr	r0, [sp, #28]
    d75a:	e685      	b.n	d468 <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d75c:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    d75e:	4bbf      	ldr	r3, [pc, #764]	; (da5c <hci_cmd_handle+0x718>)
    d760:	6811      	ldr	r1, [r2, #0]
    d762:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d764:	605a      	str	r2, [r3, #4]
    d766:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    d768:	2000      	movs	r0, #0
    d76a:	f7ff fcb1 	bl	d0d0 <cmd_complete_status>
}
    d76e:	e67b      	b.n	d468 <hci_cmd_handle+0x124>
		le_set_phy(cmd, evt);
    d770:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d772:	7894      	ldrb	r4, [r2, #2]
    d774:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    d776:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d778:	f8b2 6005 	ldrh.w	r6, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d77c:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    d77e:	bf48      	it	mi
    d780:	f041 0103 	orrmi.w	r1, r1, #3
    d784:	7913      	ldrb	r3, [r2, #4]
    d786:	bf48      	it	mi
    d788:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d78a:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    d78c:	bf44      	itt	mi
    d78e:	f043 0303 	orrmi.w	r3, r3, #3
    d792:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    d794:	ea43 0201 	orr.w	r2, r3, r1
    d798:	f032 0203 	bics.w	r2, r2, #3
    d79c:	f040 8195 	bne.w	daca <hci_cmd_handle+0x786>
	if (!(cmd->tx_phys & 0x07) ||
    d7a0:	074c      	lsls	r4, r1, #29
    d7a2:	f000 818e 	beq.w	dac2 <hci_cmd_handle+0x77e>
    d7a6:	075a      	lsls	r2, r3, #29
    d7a8:	f000 818b 	beq.w	dac2 <hci_cmd_handle+0x77e>
	if (phy_opts & 0x03) {
    d7ac:	f016 0203 	ands.w	r2, r6, #3
		phy_opts -= 1U;
    d7b0:	bf1c      	itt	ne
    d7b2:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		phy_opts &= 1;
    d7b6:	f006 0201 	andne.w	r2, r6, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d7ba:	4638      	mov	r0, r7
    d7bc:	f003 fb58 	bl	10e70 <ll_phy_req_send>
    d7c0:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d7c2:	8828      	ldrh	r0, [r5, #0]
    d7c4:	f017 f97b 	bl	24abe <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d7c8:	e64e      	b.n	d468 <hci_cmd_handle+0x124>
		le_set_default_phy(cmd, evt);
    d7ca:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d7cc:	781a      	ldrb	r2, [r3, #0]
    d7ce:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    d7d0:	bf4a      	itet	mi
    d7d2:	2007      	movmi	r0, #7
    d7d4:	7858      	ldrbpl	r0, [r3, #1]
    d7d6:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d7d8:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    d7da:	bf4a      	itet	mi
    d7dc:	2107      	movmi	r1, #7
    d7de:	7899      	ldrbpl	r1, [r3, #2]
    d7e0:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d7e2:	f003 fb3b 	bl	10e5c <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    d7e6:	f7ff fc73 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d7ea:	e63d      	b.n	d468 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d7ec:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d7ee:	2105      	movs	r1, #5
    d7f0:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d7f2:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d7f4:	f7ff fcfe 	bl	d1f4 <hci_cmd_complete>
    d7f8:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d7fa:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    d7fc:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d7fe:	1ce1      	adds	r1, r4, #3
    d800:	f003 fb0e 	bl	10e20 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    d804:	78e2      	ldrb	r2, [r4, #3]
    d806:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    d808:	7020      	strb	r0, [r4, #0]
    d80a:	2a00      	cmp	r2, #0
    d80c:	fa92 f2a2 	rbit	r2, r2
    d810:	fab2 f282 	clz	r2, r2
    d814:	bf08      	it	eq
    d816:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    d81a:	2b00      	cmp	r3, #0
    d81c:	fa93 f3a3 	rbit	r3, r3
    d820:	fab3 f383 	clz	r3, r3
    d824:	f102 0201 	add.w	r2, r2, #1
    d828:	bf08      	it	eq
    d82a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d82e:	70e2      	strb	r2, [r4, #3]
    d830:	3301      	adds	r3, #1
    d832:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    d834:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d838:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    d83a:	e615      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d83c:	2109      	movs	r1, #9
    d83e:	a807      	add	r0, sp, #28
    d840:	f7ff fcd8 	bl	d1f4 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d844:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d846:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d848:	f10d 021a 	add.w	r2, sp, #26
    d84c:	f10d 0016 	add.w	r0, sp, #22
    d850:	a906      	add	r1, sp, #24
    d852:	f003 fadb 	bl	10e0c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d856:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d85a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    d85e:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d862:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    d866:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d86a:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    d86e:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d870:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d874:	7022      	strb	r2, [r4, #0]
    d876:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d878:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    d87c:	e5f4      	b.n	d468 <hci_cmd_handle+0x124>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    d87e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    d880:	8818      	ldrh	r0, [r3, #0]
    d882:	f007 fa51 	bl	14d28 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    d886:	2000      	movs	r0, #0
    d888:	f7ff fc22 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d88c:	e5ec      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_rl_enable(cmd->enable);
    d88e:	68a3      	ldr	r3, [r4, #8]
    d890:	7818      	ldrb	r0, [r3, #0]
    d892:	f007 fa33 	bl	14cfc <ll_rl_enable>
	*evt = cmd_complete_status(status);
    d896:	f7ff fc1b 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d89a:	e5e5      	b.n	d468 <hci_cmd_handle+0x124>
	memcpy(dst, src, sizeof(*dst));
    d89c:	68a3      	ldr	r3, [r4, #8]
    d89e:	6818      	ldr	r0, [r3, #0]
    d8a0:	9008      	str	r0, [sp, #32]
    d8a2:	889a      	ldrh	r2, [r3, #4]
    d8a4:	799b      	ldrb	r3, [r3, #6]
    d8a6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8aa:	2107      	movs	r1, #7
    d8ac:	a807      	add	r0, sp, #28
    d8ae:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    d8b2:	f7ff fc9f 	bl	d1f4 <hci_cmd_complete>
    d8b6:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d8b8:	1c61      	adds	r1, r4, #1
    d8ba:	a808      	add	r0, sp, #32
    d8bc:	f007 fdfa 	bl	154b4 <ll_rl_lrpa_get>
    d8c0:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    d8c2:	9807      	ldr	r0, [sp, #28]
    d8c4:	e5d0      	b.n	d468 <hci_cmd_handle+0x124>
    d8c6:	68a3      	ldr	r3, [r4, #8]
    d8c8:	6818      	ldr	r0, [r3, #0]
    d8ca:	9008      	str	r0, [sp, #32]
    d8cc:	889a      	ldrh	r2, [r3, #4]
    d8ce:	799b      	ldrb	r3, [r3, #6]
    d8d0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8d4:	2107      	movs	r1, #7
    d8d6:	a807      	add	r0, sp, #28
    d8d8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    d8dc:	f7ff fc8a 	bl	d1f4 <hci_cmd_complete>
    d8e0:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d8e2:	1c61      	adds	r1, r4, #1
    d8e4:	a808      	add	r0, sp, #32
    d8e6:	f007 fdc3 	bl	15470 <ll_rl_crpa_get>
    d8ea:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    d8ec:	9807      	ldr	r0, [sp, #28]
    d8ee:	e5bb      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8f0:	2102      	movs	r1, #2
    d8f2:	a807      	add	r0, sp, #28
    d8f4:	f7ff fc7e 	bl	d1f4 <hci_cmd_complete>
    d8f8:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d8fa:	f007 f9bd 	bl	14c78 <ll_rl_size_get>
	rp->status = 0x00;
    d8fe:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    d900:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d902:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    d904:	9807      	ldr	r0, [sp, #28]
    d906:	e5af      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_rl_clear();
    d908:	f007 f9b8 	bl	14c7c <ll_rl_clear>
	*evt = cmd_complete_status(status);
    d90c:	f7ff fbe0 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d910:	e5aa      	b.n	d468 <hci_cmd_handle+0x124>
	status = ll_rl_remove(&cmd->peer_id_addr);
    d912:	68a0      	ldr	r0, [r4, #8]
    d914:	f007 fd0a 	bl	1532c <ll_rl_remove>
	*evt = cmd_complete_status(status);
    d918:	f7ff fbda 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d91c:	e5a4      	b.n	d468 <hci_cmd_handle+0x124>
		le_add_dev_to_rl(cmd, evt);
    d91e:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d920:	f100 0217 	add.w	r2, r0, #23
    d924:	1dc1      	adds	r1, r0, #7
    d926:	f007 fc3b 	bl	151a0 <ll_rl_add>
	*evt = cmd_complete_status(status);
    d92a:	f7ff fbd1 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d92e:	e59b      	b.n	d468 <hci_cmd_handle+0x124>
		le_write_default_data_len(cmd, evt);
    d930:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    d932:	8859      	ldrh	r1, [r3, #2]
    d934:	8818      	ldrh	r0, [r3, #0]
    d936:	f003 fa5f 	bl	10df8 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    d93a:	b2c0      	uxtb	r0, r0
    d93c:	f7ff fbc8 	bl	d0d0 <cmd_complete_status>
	if (err == -EINVAL) {
    d940:	e592      	b.n	d468 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d942:	2105      	movs	r1, #5
    d944:	a807      	add	r0, sp, #28
    d946:	f7ff fc55 	bl	d1f4 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    d94a:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d94c:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    d94e:	f10d 001a 	add.w	r0, sp, #26
    d952:	f003 fa45 	bl	10de0 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d956:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d95a:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    d95e:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d960:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d964:	7022      	strb	r2, [r4, #0]
    d966:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d968:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    d96c:	e57c      	b.n	d468 <hci_cmd_handle+0x124>
		le_set_data_len(cmd, evt);
    d96e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d970:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d972:	889a      	ldrh	r2, [r3, #4]
    d974:	8859      	ldrh	r1, [r3, #2]
    d976:	4628      	mov	r0, r5
    d978:	f003 f9de 	bl	10d38 <ll_length_req_send>
    d97c:	e5bd      	b.n	d4fa <hci_cmd_handle+0x1b6>
		le_conn_param_req_neg_reply(cmd, evt);
    d97e:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d980:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    d982:	789a      	ldrb	r2, [r3, #2]
    d984:	2300      	movs	r3, #0
    d986:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d98a:	4628      	mov	r0, r5
    d98c:	9300      	str	r3, [sp, #0]
    d98e:	2102      	movs	r1, #2
    d990:	f003 f892 	bl	10ab8 <ll_conn_update>
    d994:	e5b1      	b.n	d4fa <hci_cmd_handle+0x1b6>
		le_conn_param_req_reply(cmd, evt);
    d996:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    d998:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d99a:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    d99c:	8853      	ldrh	r3, [r2, #2]
    d99e:	9102      	str	r1, [sp, #8]
    d9a0:	88d1      	ldrh	r1, [r2, #6]
    d9a2:	9101      	str	r1, [sp, #4]
    d9a4:	8892      	ldrh	r2, [r2, #4]
    d9a6:	9200      	str	r2, [sp, #0]
    d9a8:	4628      	mov	r0, r5
    d9aa:	2200      	movs	r2, #0
    d9ac:	2102      	movs	r1, #2
    d9ae:	f003 f883 	bl	10ab8 <ll_conn_update>
    d9b2:	e5a2      	b.n	d4fa <hci_cmd_handle+0x1b6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9b4:	2109      	movs	r1, #9
    d9b6:	a807      	add	r0, sp, #28
    d9b8:	f7ff fc1c 	bl	d1f4 <hci_cmd_complete>
	dst[0] = val;
    d9bc:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    d9be:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    d9c0:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    d9c2:	2230      	movs	r2, #48	; 0x30
    d9c4:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    d9c6:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    d9c8:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    d9ca:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    d9cc:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    d9ce:	2201      	movs	r2, #1
    d9d0:	7003      	strb	r3, [r0, #0]
    d9d2:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    d9d4:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    d9d6:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    d9d8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    d9da:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    d9dc:	9807      	ldr	r0, [sp, #28]
    d9de:	e543      	b.n	d468 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d9e0:	68a3      	ldr	r3, [r4, #8]
    d9e2:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d9e4:	2200      	movs	r2, #0
    d9e6:	4628      	mov	r0, r5
    d9e8:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d9ea:	f006 ff07 	bl	147fc <ll_start_enc_req_send>
    d9ee:	e584      	b.n	d4fa <hci_cmd_handle+0x1b6>
	handle = sys_le16_to_cpu(cmd->handle);
    d9f0:	68a2      	ldr	r2, [r4, #8]
    d9f2:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d9f6:	2100      	movs	r1, #0
    d9f8:	4628      	mov	r0, r5
    d9fa:	e7f6      	b.n	d9ea <hci_cmd_handle+0x6a6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9fc:	2109      	movs	r1, #9
    d9fe:	a807      	add	r0, sp, #28
    da00:	f7ff fbf8 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    da04:	2300      	movs	r3, #0
    da06:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    da0a:	2108      	movs	r1, #8
    da0c:	f008 f91a 	bl	15c44 <lll_csrand_get>
	if (err == -EINVAL) {
    da10:	9807      	ldr	r0, [sp, #28]
    da12:	e529      	b.n	d468 <hci_cmd_handle+0x124>
		le_encrypt(cmd, evt);
    da14:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    da16:	aa08      	add	r2, sp, #32
    da18:	f100 0110 	add.w	r1, r0, #16
    da1c:	2300      	movs	r3, #0
    da1e:	f009 fe07 	bl	17630 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    da22:	2111      	movs	r1, #17
    da24:	a807      	add	r0, sp, #28
    da26:	f7ff fbe5 	bl	d1f4 <hci_cmd_complete>
	rp->status = 0x00;
    da2a:	4605      	mov	r5, r0
    da2c:	2300      	movs	r3, #0
    da2e:	f805 3b01 	strb.w	r3, [r5], #1
    da32:	ac08      	add	r4, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    da34:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    da36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    da38:	f8c6 0001 	str.w	r0, [r6, #1]
    da3c:	9807      	ldr	r0, [sp, #28]
    da3e:	6069      	str	r1, [r5, #4]
    da40:	60aa      	str	r2, [r5, #8]
    da42:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
    da44:	e510      	b.n	d468 <hci_cmd_handle+0x124>
		disconnect(cmd, evt);
    da46:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    da48:	7899      	ldrb	r1, [r3, #2]
    da4a:	8818      	ldrh	r0, [r3, #0]
    da4c:	f003 f8e6 	bl	10c1c <ll_terminate_ind_send>
    da50:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    da52:	8828      	ldrh	r0, [r5, #0]
    da54:	f017 f833 	bl	24abe <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    da58:	e506      	b.n	d468 <hci_cmd_handle+0x124>
    da5a:	bf00      	nop
    da5c:	20000168 	.word	0x20000168
	handle = sys_le16_to_cpu(cmd->handle);
    da60:	68a3      	ldr	r3, [r4, #8]
    da62:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    da64:	a908      	add	r1, sp, #32
    da66:	4628      	mov	r0, r5
    da68:	f003 fa50 	bl	10f0c <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    da6c:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    da6e:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    da70:	a807      	add	r0, sp, #28
    da72:	f7ff fbbf 	bl	d1f4 <hci_cmd_complete>
	rp->status = status;
    da76:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    da78:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    da7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    da80:	f8a0 3003 	strh.w	r3, [r0, #3]
    da84:	9807      	ldr	r0, [sp, #28]
}
    da86:	e4ef      	b.n	d468 <hci_cmd_handle+0x124>
	event_mask = DEFAULT_EVENT_MASK;
    da88:	4912      	ldr	r1, [pc, #72]	; (dad4 <hci_cmd_handle+0x790>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    da8a:	4a13      	ldr	r2, [pc, #76]	; (dad8 <hci_cmd_handle+0x794>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    da8c:	4b13      	ldr	r3, [pc, #76]	; (dadc <hci_cmd_handle+0x798>)
	event_mask = DEFAULT_EVENT_MASK;
    da8e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    da92:	f641 75ff 	movw	r5, #8191	; 0x1fff
    da96:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    da9a:	201f      	movs	r0, #31
    da9c:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    da9e:	2400      	movs	r4, #0
    daa0:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    daa2:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    daa6:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    daaa:	f000 ffb3 	bl	ea14 <ll_reset>
		*evt = cmd_complete_status(0x00);
    daae:	2000      	movs	r0, #0
    dab0:	f7ff fb0e 	bl	d0d0 <cmd_complete_status>
	conn_count = 0U;
    dab4:	4b0a      	ldr	r3, [pc, #40]	; (dae0 <hci_cmd_handle+0x79c>)
    dab6:	2200      	movs	r2, #0
    dab8:	601a      	str	r2, [r3, #0]
}
    daba:	e4d5      	b.n	d468 <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    dabc:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    dabe:	4b06      	ldr	r3, [pc, #24]	; (dad8 <hci_cmd_handle+0x794>)
    dac0:	e64e      	b.n	d760 <hci_cmd_handle+0x41c>
	return bt_hci_cmd_status_create(_opcode, status);
    dac2:	2112      	movs	r1, #18
    dac4:	f016 fffb 	bl	24abe <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    dac8:	e4ce      	b.n	d468 <hci_cmd_handle+0x124>
	return bt_hci_cmd_status_create(_opcode, status);
    daca:	2111      	movs	r1, #17
    dacc:	f016 fff7 	bl	24abe <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    dad0:	e4ca      	b.n	d468 <hci_cmd_handle+0x124>
    dad2:	bf00      	nop
    dad4:	20000160 	.word	0x20000160
    dad8:	20001308 	.word	0x20001308
    dadc:	20000168 	.word	0x20000168
    dae0:	20002ba8 	.word	0x20002ba8

0000dae4 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    dae4:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    dae6:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    dae8:	2b03      	cmp	r3, #3
{
    daea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
    daee:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    daf0:	d942      	bls.n	db78 <hci_acl_handle+0x94>
    daf2:	4605      	mov	r5, r0
    daf4:	460e      	mov	r6, r1
    daf6:	3008      	adds	r0, #8
    daf8:	2104      	movs	r1, #4
    dafa:	f018 fa03 	bl	25f04 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    dafe:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    db00:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    db02:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    db06:	42bb      	cmp	r3, r7
    db08:	d343      	bcc.n	db92 <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
    db0a:	f002 ff7f 	bl	10a0c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    db0e:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    db12:	4604      	mov	r4, r0
    db14:	2800      	cmp	r0, #0
    db16:	d040      	beq.n	db9a <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    db18:	089a      	lsrs	r2, r3, #2
    db1a:	d102      	bne.n	db22 <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
    db1c:	b333      	cbz	r3, db6c <hci_acl_handle+0x88>
    db1e:	2b01      	cmp	r3, #1
    db20:	d003      	beq.n	db2a <hci_acl_handle+0x46>
		return -EINVAL;
    db22:	f06f 0015 	mvn.w	r0, #21
}
    db26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    db2a:	7902      	ldrb	r2, [r0, #4]
    db2c:	f363 0201 	bfi	r2, r3, #0, #2
    db30:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    db32:	7167      	strb	r7, [r4, #5]
    db34:	68a9      	ldr	r1, [r5, #8]
    db36:	463a      	mov	r2, r7
    db38:	1de0      	adds	r0, r4, #7
    db3a:	f01d fe3a 	bl	2b7b2 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    db3e:	4621      	mov	r1, r4
    db40:	f3c8 000b 	ubfx	r0, r8, #0, #12
    db44:	f002 ff6e 	bl	10a24 <ll_tx_mem_enqueue>
    db48:	2800      	cmp	r0, #0
    db4a:	d0ec      	beq.n	db26 <hci_acl_handle+0x42>
    db4c:	4b2a      	ldr	r3, [pc, #168]	; (dbf8 <hci_acl_handle+0x114>)
    db4e:	492b      	ldr	r1, [pc, #172]	; (dbfc <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
    db50:	482b      	ldr	r0, [pc, #172]	; (dc00 <hci_acl_handle+0x11c>)
    db52:	1ac9      	subs	r1, r1, r3
    db54:	08c9      	lsrs	r1, r1, #3
    db56:	0189      	lsls	r1, r1, #6
    db58:	f041 0101 	orr.w	r1, r1, #1
    db5c:	f015 fd68 	bl	23630 <log_0>
		ll_tx_mem_release(node_tx);
    db60:	4620      	mov	r0, r4
    db62:	f002 ff59 	bl	10a18 <ll_tx_mem_release>
		return -EINVAL;
    db66:	f06f 0015 	mvn.w	r0, #21
    db6a:	e7dc      	b.n	db26 <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    db6c:	7903      	ldrb	r3, [r0, #4]
    db6e:	2202      	movs	r2, #2
    db70:	f362 0301 	bfi	r3, r2, #0, #2
    db74:	7103      	strb	r3, [r0, #4]
		break;
    db76:	e7dc      	b.n	db32 <hci_acl_handle+0x4e>
    db78:	4920      	ldr	r1, [pc, #128]	; (dbfc <hci_acl_handle+0x118>)
    db7a:	4b1f      	ldr	r3, [pc, #124]	; (dbf8 <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
    db7c:	4821      	ldr	r0, [pc, #132]	; (dc04 <hci_acl_handle+0x120>)
    db7e:	1ac9      	subs	r1, r1, r3
    db80:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
    db82:	0189      	lsls	r1, r1, #6
    db84:	f041 0101 	orr.w	r1, r1, #1
    db88:	f015 fd52 	bl	23630 <log_0>
		return -EINVAL;
    db8c:	f06f 0015 	mvn.w	r0, #21
    db90:	e7c9      	b.n	db26 <hci_acl_handle+0x42>
    db92:	491a      	ldr	r1, [pc, #104]	; (dbfc <hci_acl_handle+0x118>)
    db94:	4b18      	ldr	r3, [pc, #96]	; (dbf8 <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
    db96:	481c      	ldr	r0, [pc, #112]	; (dc08 <hci_acl_handle+0x124>)
    db98:	e7f1      	b.n	db7e <hci_acl_handle+0x9a>
    db9a:	4b17      	ldr	r3, [pc, #92]	; (dbf8 <hci_acl_handle+0x114>)
    db9c:	4917      	ldr	r1, [pc, #92]	; (dbfc <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
    db9e:	481b      	ldr	r0, [pc, #108]	; (dc0c <hci_acl_handle+0x128>)
    dba0:	1ac9      	subs	r1, r1, r3
    dba2:	08c9      	lsrs	r1, r1, #3
    dba4:	0189      	lsls	r1, r1, #6
    dba6:	f041 0101 	orr.w	r1, r1, #1
    dbaa:	f015 fd41 	bl	23630 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    dbae:	4b18      	ldr	r3, [pc, #96]	; (dc10 <hci_acl_handle+0x12c>)
    dbb0:	6819      	ldr	r1, [r3, #0]
    dbb2:	4623      	mov	r3, r4
    dbb4:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    dbb8:	4313      	orrs	r3, r2
    dbba:	d102      	bne.n	dbc2 <hci_acl_handle+0xde>
		return -ENOBUFS;
    dbbc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dbc0:	e7b1      	b.n	db26 <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    dbc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dbc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dbca:	2001      	movs	r0, #1
    dbcc:	f7f7 fbf4 	bl	53b8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    dbd0:	2102      	movs	r1, #2
    dbd2:	6030      	str	r0, [r6, #0]
    dbd4:	3008      	adds	r0, #8
    dbd6:	f018 f963 	bl	25ea0 <net_buf_simple_add>
	hdr->len = len;
    dbda:	2401      	movs	r4, #1
	hdr->evt = evt;
    dbdc:	221a      	movs	r2, #26
    dbde:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    dbe0:	7044      	strb	r4, [r0, #1]
    dbe2:	6830      	ldr	r0, [r6, #0]
    dbe4:	4621      	mov	r1, r4
    dbe6:	3008      	adds	r0, #8
    dbe8:	f018 f95a 	bl	25ea0 <net_buf_simple_add>
    dbec:	4603      	mov	r3, r0
		return -ENOBUFS;
    dbee:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    dbf2:	701c      	strb	r4, [r3, #0]
    dbf4:	e797      	b.n	db26 <hci_acl_handle+0x42>
    dbf6:	bf00      	nop
    dbf8:	0002bfa8 	.word	0x0002bfa8
    dbfc:	0002bff0 	.word	0x0002bff0
    dc00:	0002c7cc 	.word	0x0002c7cc
    dc04:	0002c784 	.word	0x0002c784
    dc08:	0002c798 	.word	0x0002c798
    dc0c:	0002c7b8 	.word	0x0002c7b8
    dc10:	20000160 	.word	0x20000160

0000dc14 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    dc14:	4b06      	ldr	r3, [pc, #24]	; (dc30 <hci_disconn_complete_encode+0x1c>)
    dc16:	681b      	ldr	r3, [r3, #0]
{
    dc18:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    dc1a:	f003 0410 	and.w	r4, r3, #16
    dc1e:	2500      	movs	r5, #0
    dc20:	ea54 0305 	orrs.w	r3, r4, r5
    dc24:	d101      	bne.n	dc2a <hci_disconn_complete_encode+0x16>
}
    dc26:	bc30      	pop	{r4, r5}
    dc28:	4770      	bx	lr
    dc2a:	bc30      	pop	{r4, r5}
    dc2c:	f7ff baca 	b.w	d1c4 <hci_disconn_complete_encode.part.0>
    dc30:	20000160 	.word	0x20000160

0000dc34 <hci_disconn_complete_process>:
	conn_count--;
    dc34:	4a02      	ldr	r2, [pc, #8]	; (dc40 <hci_disconn_complete_process+0xc>)
    dc36:	6813      	ldr	r3, [r2, #0]
    dc38:	3b01      	subs	r3, #1
    dc3a:	6013      	str	r3, [r2, #0]
}
    dc3c:	4770      	bx	lr
    dc3e:	bf00      	nop
    dc40:	20002ba8 	.word	0x20002ba8

0000dc44 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    dc44:	7f03      	ldrb	r3, [r0, #28]
    dc46:	f003 0303 	and.w	r3, r3, #3
    dc4a:	3b01      	subs	r3, #1
    dc4c:	2b01      	cmp	r3, #1
{
    dc4e:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    dc50:	d90d      	bls.n	dc6e <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    dc52:	4a16      	ldr	r2, [pc, #88]	; (dcac <hci_acl_encode+0x68>)
    dc54:	4916      	ldr	r1, [pc, #88]	; (dcb0 <hci_acl_encode+0x6c>)
    dc56:	4817      	ldr	r0, [pc, #92]	; (dcb4 <hci_acl_encode+0x70>)
    dc58:	f241 737a 	movw	r3, #6010	; 0x177a
    dc5c:	f015 f8d3 	bl	22e06 <printk>
    dc60:	4040      	eors	r0, r0
    dc62:	f380 8811 	msr	BASEPRI, r0
    dc66:	f04f 0003 	mov.w	r0, #3
    dc6a:	df02      	svc	2
		break;
	}
}
    dc6c:	bd70      	pop	{r4, r5, r6, pc}
    dc6e:	4604      	mov	r4, r0
    dc70:	f101 0508 	add.w	r5, r1, #8
    dc74:	4628      	mov	r0, r5
    dc76:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    dc78:	88e6      	ldrh	r6, [r4, #6]
    dc7a:	f018 f911 	bl	25ea0 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    dc7e:	7f23      	ldrb	r3, [r4, #28]
    dc80:	f003 0303 	and.w	r3, r3, #3
    dc84:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    dc86:	bf0c      	ite	eq
    dc88:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    dc8c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    dc90:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    dc92:	7f61      	ldrb	r1, [r4, #29]
    dc94:	8041      	strh	r1, [r0, #2]
    dc96:	4628      	mov	r0, r5
    dc98:	f018 f902 	bl	25ea0 <net_buf_simple_add>
    dc9c:	7f62      	ldrb	r2, [r4, #29]
    dc9e:	f104 011f 	add.w	r1, r4, #31
}
    dca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dca6:	f01d bd84 	b.w	2b7b2 <memcpy>
    dcaa:	bf00      	nop
    dcac:	0002c7e0 	.word	0x0002c7e0
    dcb0:	0002c6a0 	.word	0x0002c6a0
    dcb4:	0002c630 	.word	0x0002c630

0000dcb8 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    dcb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dcbc:	7905      	ldrb	r5, [r0, #4]
    dcbe:	88c7      	ldrh	r7, [r0, #6]
    dcc0:	2d03      	cmp	r5, #3
{
    dcc2:	4604      	mov	r4, r0
    dcc4:	b088      	sub	sp, #32
    dcc6:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    dcc8:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dccc:	d00c      	beq.n	dce8 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    dcce:	3d13      	subs	r5, #19
    dcd0:	2d06      	cmp	r5, #6
    dcd2:	f200 8263 	bhi.w	e19c <hci_evt_encode+0x4e4>
    dcd6:	e8df f015 	tbh	[pc, r5, lsl #1]
    dcda:	005c      	.short	0x005c
    dcdc:	00b400d6 	.word	0x00b400d6
    dce0:	00e30114 	.word	0x00e30114
    dce4:	002100fa 	.word	0x002100fa
	switch (pdu_data->llctrl.opcode) {
    dce8:	7fe3      	ldrb	r3, [r4, #31]
    dcea:	3b03      	subs	r3, #3
    dcec:	2b12      	cmp	r3, #18
    dcee:	f200 8122 	bhi.w	df36 <hci_evt_encode+0x27e>
    dcf2:	e8df f013 	tbh	[pc, r3, lsl #1]
    dcf6:	016e      	.short	0x016e
    dcf8:	01200120 	.word	0x01200120
    dcfc:	01b30191 	.word	0x01b30191
    dd00:	01c30120 	.word	0x01c30120
    dd04:	01200120 	.word	0x01200120
    dd08:	01ca0120 	.word	0x01ca0120
    dd0c:	01d90120 	.word	0x01d90120
    dd10:	01200120 	.word	0x01200120
    dd14:	01200120 	.word	0x01200120
    dd18:	012e012e 	.word	0x012e012e
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd1c:	4bc5      	ldr	r3, [pc, #788]	; (e034 <hci_evt_encode+0x37c>)
    dd1e:	6858      	ldr	r0, [r3, #4]
    dd20:	2100      	movs	r1, #0
    dd22:	460a      	mov	r2, r1
    dd24:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dd28:	4313      	orrs	r3, r2
    dd2a:	d007      	beq.n	dd3c <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    dd2c:	4bc2      	ldr	r3, [pc, #776]	; (e038 <hci_evt_encode+0x380>)
    dd2e:	6818      	ldr	r0, [r3, #0]
    dd30:	460b      	mov	r3, r1
    dd32:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd36:	4313      	orrs	r3, r2
    dd38:	f040 812b 	bne.w	df92 <hci_evt_encode+0x2da>
    dd3c:	7f61      	ldrb	r1, [r4, #29]
    dd3e:	48bf      	ldr	r0, [pc, #764]	; (e03c <hci_evt_encode+0x384>)
    dd40:	4bbf      	ldr	r3, [pc, #764]	; (e040 <hci_evt_encode+0x388>)
    dd42:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    dd44:	7f25      	ldrb	r5, [r4, #28]
    dd46:	9704      	str	r7, [sp, #16]
    dd48:	2900      	cmp	r1, #0
    dd4a:	eba3 0300 	sub.w	r3, r3, r0
    dd4e:	fa91 f1a1 	rbit	r1, r1
    dd52:	fab1 f181 	clz	r1, r1
    dd56:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    dd5a:	bf08      	it	eq
    dd5c:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
    dd60:	2a00      	cmp	r2, #0
    dd62:	fa92 f2a2 	rbit	r2, r2
    dd66:	fab2 f282 	clz	r2, r2
    dd6a:	f101 0001 	add.w	r0, r1, #1
    dd6e:	bf08      	it	eq
    dd70:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    dd74:	019b      	lsls	r3, r3, #6
    dd76:	1c54      	adds	r4, r2, #1
    dd78:	9006      	str	r0, [sp, #24]
    dd7a:	f043 0302 	orr.w	r3, r3, #2
    dd7e:	48b1      	ldr	r0, [pc, #708]	; (e044 <hci_evt_encode+0x38c>)
    dd80:	9407      	str	r4, [sp, #28]
    dd82:	2204      	movs	r2, #4
    dd84:	a904      	add	r1, sp, #16
    dd86:	9505      	str	r5, [sp, #20]
    dd88:	f015 fca8 	bl	236dc <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    dd8c:	b008      	add	sp, #32
    dd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
    dd92:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    dd94:	2d00      	cmp	r5, #0
    dd96:	f000 81a5 	beq.w	e0e4 <hci_evt_encode+0x42c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd9a:	4ba6      	ldr	r3, [pc, #664]	; (e034 <hci_evt_encode+0x37c>)
    dd9c:	6859      	ldr	r1, [r3, #4]
    dd9e:	f04f 0800 	mov.w	r8, #0
    dda2:	4642      	mov	r2, r8
    dda4:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    dda8:	4313      	orrs	r3, r2
    ddaa:	d0ef      	beq.n	dd8c <hci_evt_encode+0xd4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    ddac:	4ba2      	ldr	r3, [pc, #648]	; (e038 <hci_evt_encode+0x380>)
    ddae:	f8d3 c000 	ldr.w	ip, [r3]
    ddb2:	f240 2101 	movw	r1, #513	; 0x201
    ddb6:	ea0c 0201 	and.w	r2, ip, r1
    ddba:	4643      	mov	r3, r8
    ddbc:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    ddbe:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    ddc2:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    ddc4:	d0e2      	beq.n	dd8c <hci_evt_encode+0xd4>
	if (!status) {
    ddc6:	2d00      	cmp	r5, #0
    ddc8:	f040 819f 	bne.w	e10a <hci_evt_encode+0x452>
		conn_count++;
    ddcc:	4a9e      	ldr	r2, [pc, #632]	; (e048 <hci_evt_encode+0x390>)
    ddce:	6813      	ldr	r3, [r2, #0]
    ddd0:	3301      	adds	r3, #1
    ddd2:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    ddd4:	ea50 0301 	orrs.w	r3, r0, r1
    ddd8:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    dddc:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    ddde:	f000 81a3 	beq.w	e128 <hci_evt_encode+0x470>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    dde2:	221e      	movs	r2, #30
    dde4:	210a      	movs	r1, #10
    dde6:	f7ff f985 	bl	d0f4 <meta_evt>
		leecc->status = 0x00;
    ddea:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    ddec:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    ddf0:	7f62      	ldrb	r2, [r4, #29]
    ddf2:	70c2      	strb	r2, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    ddf4:	7fa2      	ldrb	r2, [r4, #30]
    ddf6:	7102      	strb	r2, [r0, #4]
    ddf8:	f8d8 2000 	ldr.w	r2, [r8]
    ddfc:	f8c0 2005 	str.w	r2, [r0, #5]
    de00:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    de04:	f8a0 2009 	strh.w	r2, [r0, #9]
    de08:	4623      	mov	r3, r4
    de0a:	f853 2f2b 	ldr.w	r2, [r3, #43]!
    de0e:	f8c0 200b 	str.w	r2, [r0, #11]
    de12:	889b      	ldrh	r3, [r3, #4]
    de14:	f8a0 300f 	strh.w	r3, [r0, #15]
    de18:	4623      	mov	r3, r4
    de1a:	f853 2f25 	ldr.w	r2, [r3, #37]!
    de1e:	f8c0 2011 	str.w	r2, [r0, #17]
    de22:	889b      	ldrh	r3, [r3, #4]
    de24:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    de28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    de2a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    de2c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    de2e:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    de32:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    de36:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
    de3a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    de3e:	7743      	strb	r3, [r0, #29]
		return;
    de40:	e7a4      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    de42:	4b7c      	ldr	r3, [pc, #496]	; (e034 <hci_evt_encode+0x37c>)
    de44:	6858      	ldr	r0, [r3, #4]
    de46:	2100      	movs	r1, #0
    de48:	460a      	mov	r2, r1
    de4a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    de4e:	4313      	orrs	r3, r2
    de50:	d09c      	beq.n	dd8c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    de52:	4b79      	ldr	r3, [pc, #484]	; (e038 <hci_evt_encode+0x380>)
    de54:	6818      	ldr	r0, [r3, #0]
    de56:	460b      	mov	r3, r1
    de58:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    de5c:	4313      	orrs	r3, r2
    de5e:	d095      	beq.n	dd8c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    de60:	2209      	movs	r2, #9
    de62:	2103      	movs	r1, #3
    de64:	4630      	mov	r0, r6
    de66:	f7ff f945 	bl	d0f4 <meta_evt>
	sep->status = cu->status;
    de6a:	7f23      	ldrb	r3, [r4, #28]
    de6c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    de6e:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    de70:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    de72:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    de74:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    de78:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    de7c:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    de80:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    de84:	e782      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    de86:	4b6b      	ldr	r3, [pc, #428]	; (e034 <hci_evt_encode+0x37c>)
    de88:	6819      	ldr	r1, [r3, #0]
    de8a:	2300      	movs	r3, #0
    de8c:	f001 0210 	and.w	r2, r1, #16
    de90:	4313      	orrs	r3, r2
    de92:	f43f af7b 	beq.w	dd8c <hci_evt_encode+0xd4>
    de96:	4632      	mov	r2, r6
    de98:	4639      	mov	r1, r7
    de9a:	f7ff f993 	bl	d1c4 <hci_disconn_complete_encode.part.0>
    de9e:	e775      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    dea0:	4b6a      	ldr	r3, [pc, #424]	; (e04c <hci_evt_encode+0x394>)
    dea2:	6819      	ldr	r1, [r3, #0]
    dea4:	2300      	movs	r3, #0
    dea6:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    deaa:	4313      	orrs	r3, r2
    deac:	f43f af6e 	beq.w	dd8c <hci_evt_encode+0xd4>
    deb0:	3608      	adds	r6, #8
    deb2:	2102      	movs	r1, #2
    deb4:	4630      	mov	r0, r6
    deb6:	f017 fff3 	bl	25ea0 <net_buf_simple_add>
    deba:	4603      	mov	r3, r0
	hdr->evt = evt;
    debc:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    debe:	2102      	movs	r1, #2
    dec0:	4630      	mov	r0, r6
	hdr->evt = evt;
    dec2:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    dec4:	7059      	strb	r1, [r3, #1]
    dec6:	f017 ffeb 	bl	25ea0 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    deca:	8007      	strh	r7, [r0, #0]
    decc:	e75e      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dece:	4b59      	ldr	r3, [pc, #356]	; (e034 <hci_evt_encode+0x37c>)
    ded0:	6858      	ldr	r0, [r3, #4]
    ded2:	2100      	movs	r1, #0
    ded4:	460a      	mov	r2, r1
    ded6:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    deda:	4313      	orrs	r3, r2
    dedc:	f43f af56 	beq.w	dd8c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    dee0:	4b55      	ldr	r3, [pc, #340]	; (e038 <hci_evt_encode+0x380>)
    dee2:	6818      	ldr	r0, [r3, #0]
    dee4:	460b      	mov	r3, r1
    dee6:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    deea:	4313      	orrs	r3, r2
    deec:	f43f af4e 	beq.w	dd8c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    def0:	4630      	mov	r0, r6
    def2:	2203      	movs	r2, #3
    def4:	2114      	movs	r1, #20
    def6:	f7ff f8fd 	bl	d0f4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    defa:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    defc:	7f23      	ldrb	r3, [r4, #28]
    defe:	7083      	strb	r3, [r0, #2]
    df00:	e744      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    df02:	4b4c      	ldr	r3, [pc, #304]	; (e034 <hci_evt_encode+0x37c>)
    df04:	6859      	ldr	r1, [r3, #4]
    df06:	2400      	movs	r4, #0
    df08:	4622      	mov	r2, r4
    df0a:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    df0e:	4313      	orrs	r3, r2
    df10:	f43f af3c 	beq.w	dd8c <hci_evt_encode+0xd4>
    df14:	3608      	adds	r6, #8
    df16:	2102      	movs	r1, #2
    df18:	4630      	mov	r0, r6
    df1a:	f017 ffc1 	bl	25ea0 <net_buf_simple_add>
    df1e:	4603      	mov	r3, r0
	hdr->evt = evt;
    df20:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    df22:	2103      	movs	r1, #3
    df24:	4630      	mov	r0, r6
	hdr->evt = evt;
    df26:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    df28:	7059      	strb	r1, [r3, #1]
    df2a:	f017 ffb9 	bl	25ea0 <net_buf_simple_add>
	ep->status = 0x00;
    df2e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    df30:	f8a0 7001 	strh.w	r7, [r0, #1]
    df34:	e72a      	b.n	dd8c <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    df36:	f241 734e 	movw	r3, #5966	; 0x174e
    df3a:	4a45      	ldr	r2, [pc, #276]	; (e050 <hci_evt_encode+0x398>)
    df3c:	4945      	ldr	r1, [pc, #276]	; (e054 <hci_evt_encode+0x39c>)
    df3e:	4846      	ldr	r0, [pc, #280]	; (e058 <hci_evt_encode+0x3a0>)
    df40:	f014 ff61 	bl	22e06 <printk>
    df44:	4040      	eors	r0, r0
    df46:	f380 8811 	msr	BASEPRI, r0
    df4a:	f04f 0003 	mov.w	r0, #3
    df4e:	df02      	svc	2
}
    df50:	e71c      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    df52:	4b38      	ldr	r3, [pc, #224]	; (e034 <hci_evt_encode+0x37c>)
    df54:	6858      	ldr	r0, [r3, #4]
    df56:	2100      	movs	r1, #0
    df58:	460a      	mov	r2, r1
    df5a:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    df5e:	4313      	orrs	r3, r2
    df60:	f43f af14 	beq.w	dd8c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    df64:	4b34      	ldr	r3, [pc, #208]	; (e038 <hci_evt_encode+0x380>)
    df66:	6818      	ldr	r0, [r3, #0]
    df68:	460b      	mov	r3, r1
    df6a:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    df6e:	4313      	orrs	r3, r2
    df70:	f43f af0c 	beq.w	dd8c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    df74:	4630      	mov	r0, r6
    df76:	220a      	movs	r2, #10
    df78:	2107      	movs	r1, #7
    df7a:	f7ff f8bb 	bl	d0f4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    df7e:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    df80:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    df82:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    df84:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    df86:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    df88:	8c23      	ldrh	r3, [r4, #32]
    df8a:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    df8c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    df8e:	8103      	strh	r3, [r0, #8]
    df90:	e6fc      	b.n	dd8c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    df92:	2205      	movs	r2, #5
    df94:	4630      	mov	r0, r6
    df96:	210c      	movs	r1, #12
    df98:	f7ff f8ac 	bl	d0f4 <meta_evt>
	sep->status = pu->status;
    df9c:	7f23      	ldrb	r3, [r4, #28]
    df9e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    dfa0:	f8a0 7001 	strh.w	r7, [r0, #1]
    dfa4:	7f62      	ldrb	r2, [r4, #29]
    dfa6:	2a00      	cmp	r2, #0
    dfa8:	fa92 f3a2 	rbit	r3, r2
    dfac:	fab3 f383 	clz	r3, r3
    dfb0:	bf08      	it	eq
    dfb2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    dfb6:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    dfb8:	70c3      	strb	r3, [r0, #3]
    dfba:	7fa2      	ldrb	r2, [r4, #30]
    dfbc:	fa92 f3a2 	rbit	r3, r2
    dfc0:	2a00      	cmp	r2, #0
    dfc2:	fab3 f383 	clz	r3, r3
    dfc6:	bf08      	it	eq
    dfc8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    dfcc:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    dfce:	7103      	strb	r3, [r0, #4]
    dfd0:	e6dc      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dfd2:	4b18      	ldr	r3, [pc, #96]	; (e034 <hci_evt_encode+0x37c>)
    dfd4:	6858      	ldr	r0, [r3, #4]
    dfd6:	2100      	movs	r1, #0
    dfd8:	460a      	mov	r2, r1
    dfda:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dfde:	4313      	orrs	r3, r2
    dfe0:	f43f aed4 	beq.w	dd8c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    dfe4:	4b14      	ldr	r3, [pc, #80]	; (e038 <hci_evt_encode+0x380>)
    dfe6:	6818      	ldr	r0, [r3, #0]
    dfe8:	460b      	mov	r3, r1
    dfea:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dfee:	4313      	orrs	r3, r2
    dff0:	f43f aecc 	beq.w	dd8c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    dff4:	220c      	movs	r2, #12
    dff6:	2105      	movs	r1, #5
    dff8:	4630      	mov	r0, r6
    dffa:	f7ff f87b 	bl	d0f4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    dffe:	4603      	mov	r3, r0
    e000:	4622      	mov	r2, r4
    e002:	f823 7b02 	strh.w	r7, [r3], #2
    e006:	f852 1f20 	ldr.w	r1, [r2, #32]!
    e00a:	6852      	ldr	r2, [r2, #4]
    e00c:	f8c0 1002 	str.w	r1, [r0, #2]
    e010:	605a      	str	r2, [r3, #4]
    e012:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    e014:	8143      	strh	r3, [r0, #10]
    e016:	e6b9      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    e018:	4b06      	ldr	r3, [pc, #24]	; (e034 <hci_evt_encode+0x37c>)
    e01a:	6819      	ldr	r1, [r3, #0]
    e01c:	2000      	movs	r0, #0
    e01e:	f001 0280 	and.w	r2, r1, #128	; 0x80
    e022:	4603      	mov	r3, r0
    e024:	4313      	orrs	r3, r2
    e026:	f43f aeb1 	beq.w	dd8c <hci_evt_encode+0xd4>
    e02a:	4632      	mov	r2, r6
    e02c:	4639      	mov	r1, r7
    e02e:	f7ff f879 	bl	d124 <encrypt_change.part.0>
    e032:	e6ab      	b.n	dd8c <hci_evt_encode+0xd4>
    e034:	20000160 	.word	0x20000160
    e038:	20000168 	.word	0x20000168
    e03c:	0002bfa8 	.word	0x0002bfa8
    e040:	0002bff0 	.word	0x0002bff0
    e044:	0002c81c 	.word	0x0002c81c
    e048:	20002ba8 	.word	0x20002ba8
    e04c:	20001308 	.word	0x20001308
    e050:	0002c7e0 	.word	0x0002c7e0
    e054:	0002c6a0 	.word	0x0002c6a0
    e058:	0002c630 	.word	0x0002c630
		le_unknown_rsp(pdu_data, handle, buf);
    e05c:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e060:	290e      	cmp	r1, #14
    e062:	f000 8083 	beq.w	e16c <hci_evt_encode+0x4b4>
    e066:	4b4f      	ldr	r3, [pc, #316]	; (e1a4 <hci_evt_encode+0x4ec>)
    e068:	4a4f      	ldr	r2, [pc, #316]	; (e1a8 <hci_evt_encode+0x4f0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e06a:	4850      	ldr	r0, [pc, #320]	; (e1ac <hci_evt_encode+0x4f4>)
    e06c:	1ad2      	subs	r2, r2, r3
    e06e:	08d2      	lsrs	r2, r2, #3
    e070:	0192      	lsls	r2, r2, #6
    e072:	f042 0202 	orr.w	r2, r2, #2
    e076:	f015 fae8 	bl	2364a <log_1>
    e07a:	e687      	b.n	dd8c <hci_evt_encode+0xd4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e07c:	460b      	mov	r3, r1
    e07e:	463a      	mov	r2, r7
    e080:	4601      	mov	r1, r0
    e082:	2000      	movs	r0, #0
    e084:	f7ff f868 	bl	d158 <le_remote_feat_complete>
		break;
    e088:	e680      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    e08a:	4b49      	ldr	r3, [pc, #292]	; (e1b0 <hci_evt_encode+0x4f8>)
    e08c:	6819      	ldr	r1, [r3, #0]
    e08e:	2300      	movs	r3, #0
    e090:	f001 0280 	and.w	r2, r1, #128	; 0x80
    e094:	4313      	orrs	r3, r2
    e096:	f43f ae79 	beq.w	dd8c <hci_evt_encode+0xd4>
    e09a:	f894 0020 	ldrb.w	r0, [r4, #32]
    e09e:	4632      	mov	r2, r6
    e0a0:	4639      	mov	r1, r7
    e0a2:	f7ff f83f 	bl	d124 <encrypt_change.part.0>
    e0a6:	e671      	b.n	dd8c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0a8:	4b41      	ldr	r3, [pc, #260]	; (e1b0 <hci_evt_encode+0x4f8>)
    e0aa:	6858      	ldr	r0, [r3, #4]
    e0ac:	2100      	movs	r1, #0
    e0ae:	460a      	mov	r2, r1
    e0b0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    e0b4:	4313      	orrs	r3, r2
    e0b6:	d01e      	beq.n	e0f6 <hci_evt_encode+0x43e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    e0b8:	4b3e      	ldr	r3, [pc, #248]	; (e1b4 <hci_evt_encode+0x4fc>)
    e0ba:	6818      	ldr	r0, [r3, #0]
    e0bc:	460b      	mov	r3, r1
    e0be:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0c2:	4313      	orrs	r3, r2
    e0c4:	d017      	beq.n	e0f6 <hci_evt_encode+0x43e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    e0c6:	4630      	mov	r0, r6
    e0c8:	220a      	movs	r2, #10
    e0ca:	2106      	movs	r1, #6
    e0cc:	f7ff f812 	bl	d0f4 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e0d0:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    e0d2:	8c23      	ldrh	r3, [r4, #32]
    e0d4:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    e0d6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    e0d8:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    e0da:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e0dc:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    e0de:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e0e0:	8103      	strh	r3, [r0, #8]
    e0e2:	e653      	b.n	dd8c <hci_evt_encode+0xd4>
		ll_rl_crpa_set(cc->peer_addr_type,
    e0e4:	7fa0      	ldrb	r0, [r4, #30]
    e0e6:	f104 0325 	add.w	r3, r4, #37	; 0x25
    e0ea:	22ff      	movs	r2, #255	; 0xff
    e0ec:	f104 011f 	add.w	r1, r4, #31
    e0f0:	f007 f99c 	bl	1542c <ll_rl_crpa_set>
    e0f4:	e651      	b.n	dd9a <hci_evt_encode+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    e0f6:	2300      	movs	r3, #0
    e0f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e0fc:	4638      	mov	r0, r7
    e0fe:	9300      	str	r3, [sp, #0]
    e100:	221a      	movs	r2, #26
    e102:	2102      	movs	r1, #2
    e104:	f002 fcd8 	bl	10ab8 <ll_conn_update>
		return;
    e108:	e640      	b.n	dd8c <hci_evt_encode+0xd4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    e10a:	ea50 0301 	orrs.w	r3, r0, r1
    e10e:	d034      	beq.n	e17a <hci_evt_encode+0x4c2>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    e110:	221e      	movs	r2, #30
    e112:	210a      	movs	r1, #10
    e114:	4630      	mov	r0, r6
    e116:	f7fe ffed 	bl	d0f4 <meta_evt>
    e11a:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    e11c:	4641      	mov	r1, r8
    e11e:	221e      	movs	r2, #30
    e120:	f01d fb68 	bl	2b7f4 <memset>
			leecc->status = status;
    e124:	7025      	strb	r5, [r4, #0]
			return;
    e126:	e631      	b.n	dd8c <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    e128:	2212      	movs	r2, #18
    e12a:	2101      	movs	r1, #1
    e12c:	f7fe ffe2 	bl	d0f4 <meta_evt>
	lecc->status = 0x00;
    e130:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    e132:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    e136:	7f63      	ldrb	r3, [r4, #29]
    e138:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    e13a:	7fa3      	ldrb	r3, [r4, #30]
    e13c:	f003 0301 	and.w	r3, r3, #1
    e140:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e142:	f8d8 3000 	ldr.w	r3, [r8]
    e146:	f8c0 3005 	str.w	r3, [r0, #5]
    e14a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    e14e:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    e152:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    e154:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    e156:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    e158:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    e15c:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    e160:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
    e164:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    e168:	7443      	strb	r3, [r0, #17]
    e16a:	e60f      	b.n	dd8c <hci_evt_encode+0xd4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e16c:	4633      	mov	r3, r6
    e16e:	463a      	mov	r2, r7
    e170:	2100      	movs	r1, #0
    e172:	201a      	movs	r0, #26
    e174:	f7fe fff0 	bl	d158 <le_remote_feat_complete>
		break;
    e178:	e608      	b.n	dd8c <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    e17a:	4630      	mov	r0, r6
    e17c:	2212      	movs	r2, #18
    e17e:	2101      	movs	r1, #1
    e180:	f7fe ffb8 	bl	d0f4 <meta_evt>
__ssp_bos_icheck3(memset, void *, int)
    e184:	f8c0 8000 	str.w	r8, [r0]
    e188:	f8c0 8004 	str.w	r8, [r0, #4]
    e18c:	f8c0 8008 	str.w	r8, [r0, #8]
    e190:	f8c0 800c 	str.w	r8, [r0, #12]
    e194:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
    e198:	7005      	strb	r5, [r0, #0]
		return;
    e19a:	e5f7      	b.n	dd8c <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    e19c:	f241 6385 	movw	r3, #5765	; 0x1685
    e1a0:	e6cb      	b.n	df3a <hci_evt_encode+0x282>
    e1a2:	bf00      	nop
    e1a4:	0002bfa8 	.word	0x0002bfa8
    e1a8:	0002bff0 	.word	0x0002bff0
    e1ac:	0002c848 	.word	0x0002c848
    e1b0:	20000160 	.word	0x20000160
    e1b4:	20000168 	.word	0x20000168

0000e1b8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    e1b8:	b570      	push	{r4, r5, r6, lr}
    e1ba:	f100 0408 	add.w	r4, r0, #8
    e1be:	460e      	mov	r6, r1
    e1c0:	4620      	mov	r0, r4
    e1c2:	2102      	movs	r1, #2
    e1c4:	4615      	mov	r5, r2
    e1c6:	f017 fe6b 	bl	25ea0 <net_buf_simple_add>
    e1ca:	4603      	mov	r3, r0
	hdr->evt = evt;
    e1cc:	2213      	movs	r2, #19
	hdr->len = len;
    e1ce:	2105      	movs	r1, #5
	hdr->evt = evt;
    e1d0:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    e1d2:	7059      	strb	r1, [r3, #1]
    e1d4:	4620      	mov	r0, r4
    e1d6:	f017 fe63 	bl	25ea0 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    e1da:	2301      	movs	r3, #1
    e1dc:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    e1de:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e1e2:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    e1e6:	bd70      	pop	{r4, r5, r6, pc}

0000e1e8 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e1e8:	7903      	ldrb	r3, [r0, #4]
    e1ea:	2b03      	cmp	r3, #3
    e1ec:	d009      	beq.n	e202 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    e1ee:	2b13      	cmp	r3, #19
    e1f0:	d005      	beq.n	e1fe <hci_get_class+0x16>
    e1f2:	3b14      	subs	r3, #20
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    e1f4:	2b05      	cmp	r3, #5
    e1f6:	bf94      	ite	ls
    e1f8:	2003      	movls	r0, #3
    e1fa:	2000      	movhi	r0, #0
    e1fc:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e1fe:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    e200:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e202:	7f03      	ldrb	r3, [r0, #28]
    e204:	f003 0303 	and.w	r3, r3, #3
    e208:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    e20a:	bf0c      	ite	eq
    e20c:	2004      	moveq	r0, #4
    e20e:	2005      	movne	r0, #5
    e210:	4770      	bx	lr
    e212:	bf00      	nop

0000e214 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    e214:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    e216:	480b      	ldr	r0, [pc, #44]	; (e244 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e218:	490b      	ldr	r1, [pc, #44]	; (e248 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e21a:	4a0c      	ldr	r2, [pc, #48]	; (e24c <hci_init+0x38>)
	conn_count = 0U;
    e21c:	4b0c      	ldr	r3, [pc, #48]	; (e250 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
    e21e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e222:	f641 75ff 	movw	r5, #8191	; 0x1fff
    e226:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e22a:	2400      	movs	r4, #0
    e22c:	2500      	movs	r5, #0
    e22e:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e232:	201f      	movs	r0, #31
    e234:	2100      	movs	r1, #0
    e236:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    e23a:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    e23c:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    e23e:	601a      	str	r2, [r3, #0]
}
    e240:	4770      	bx	lr
    e242:	bf00      	nop
    e244:	20000160 	.word	0x20000160
    e248:	20001308 	.word	0x20001308
    e24c:	20000168 	.word	0x20000168
    e250:	20002ba8 	.word	0x20002ba8

0000e254 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    e254:	f007 bcf6 	b.w	15c44 <lll_csrand_get>

0000e258 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    e258:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    e25a:	2300      	movs	r3, #0
    e25c:	f009 f9e8 	bl	17630 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    e260:	2000      	movs	r0, #0
    e262:	bd08      	pop	{r3, pc}

0000e264 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    e264:	b510      	push	{r4, lr}
    e266:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    e268:	f007 fd0e 	bl	15c88 <lll_reset>
	LL_ASSERT(!err);
    e26c:	b950      	cbnz	r0, e284 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    e26e:	f008 f837 	bl	162e0 <lll_adv_reset>
	LL_ASSERT(!err);
    e272:	b9c0      	cbnz	r0, e2a6 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    e274:	f008 fcc6 	bl	16c04 <lll_conn_reset>
	LL_ASSERT(!err);
    e278:	bb30      	cbnz	r0, e2c8 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    e27a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    e27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e280:	f011 bf2c 	b.w	200dc <z_impl_k_sem_give>
	LL_ASSERT(!err);
    e284:	4a19      	ldr	r2, [pc, #100]	; (e2ec <perform_lll_reset+0x88>)
    e286:	491a      	ldr	r1, [pc, #104]	; (e2f0 <perform_lll_reset+0x8c>)
    e288:	481a      	ldr	r0, [pc, #104]	; (e2f4 <perform_lll_reset+0x90>)
    e28a:	f240 637c 	movw	r3, #1660	; 0x67c
    e28e:	f014 fdba 	bl	22e06 <printk>
    e292:	4040      	eors	r0, r0
    e294:	f380 8811 	msr	BASEPRI, r0
    e298:	f04f 0003 	mov.w	r0, #3
    e29c:	df02      	svc	2
	err = lll_adv_reset();
    e29e:	f008 f81f 	bl	162e0 <lll_adv_reset>
	LL_ASSERT(!err);
    e2a2:	2800      	cmp	r0, #0
    e2a4:	d0e6      	beq.n	e274 <perform_lll_reset+0x10>
    e2a6:	4a11      	ldr	r2, [pc, #68]	; (e2ec <perform_lll_reset+0x88>)
    e2a8:	4911      	ldr	r1, [pc, #68]	; (e2f0 <perform_lll_reset+0x8c>)
    e2aa:	4812      	ldr	r0, [pc, #72]	; (e2f4 <perform_lll_reset+0x90>)
    e2ac:	f240 6381 	movw	r3, #1665	; 0x681
    e2b0:	f014 fda9 	bl	22e06 <printk>
    e2b4:	4040      	eors	r0, r0
    e2b6:	f380 8811 	msr	BASEPRI, r0
    e2ba:	f04f 0003 	mov.w	r0, #3
    e2be:	df02      	svc	2
	err = lll_conn_reset();
    e2c0:	f008 fca0 	bl	16c04 <lll_conn_reset>
	LL_ASSERT(!err);
    e2c4:	2800      	cmp	r0, #0
    e2c6:	d0d8      	beq.n	e27a <perform_lll_reset+0x16>
    e2c8:	4a08      	ldr	r2, [pc, #32]	; (e2ec <perform_lll_reset+0x88>)
    e2ca:	4909      	ldr	r1, [pc, #36]	; (e2f0 <perform_lll_reset+0x8c>)
    e2cc:	4809      	ldr	r0, [pc, #36]	; (e2f4 <perform_lll_reset+0x90>)
    e2ce:	f240 638d 	movw	r3, #1677	; 0x68d
    e2d2:	f014 fd98 	bl	22e06 <printk>
    e2d6:	4040      	eors	r0, r0
    e2d8:	f380 8811 	msr	BASEPRI, r0
    e2dc:	f04f 0003 	mov.w	r0, #3
    e2e0:	df02      	svc	2
    e2e2:	4620      	mov	r0, r4
}
    e2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e2e8:	f011 bef8 	b.w	200dc <z_impl_k_sem_give>
    e2ec:	0002c874 	.word	0x0002c874
    e2f0:	0002c8b0 	.word	0x0002c8b0
    e2f4:	0002c630 	.word	0x0002c630

0000e2f8 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    e2f8:	6008      	str	r0, [r1, #0]
    e2fa:	4801      	ldr	r0, [pc, #4]	; (e300 <ull_ticker_status_give+0x8>)
    e2fc:	f011 beee 	b.w	200dc <z_impl_k_sem_give>
    e300:	20002f90 	.word	0x20002f90

0000e304 <disabled_cb>:
    e304:	f011 beea 	b.w	200dc <z_impl_k_sem_give>

0000e308 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    e308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e30c:	4f2f      	ldr	r7, [pc, #188]	; (e3cc <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    e30e:	780b      	ldrb	r3, [r1, #0]
    e310:	783c      	ldrb	r4, [r7, #0]
{
    e312:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e314:	7879      	ldrb	r1, [r7, #1]
    e316:	4299      	cmp	r1, r3
    e318:	bf9c      	itt	ls
    e31a:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    e31c:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    e31e:	429a      	cmp	r2, r3
{
    e320:	4683      	mov	fp, r0
    e322:	4692      	mov	sl, r2
    e324:	d045      	beq.n	e3b2 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
    e326:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    e328:	4e29      	ldr	r6, [pc, #164]	; (e3d0 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    e32a:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    e32c:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    e330:	4291      	cmp	r1, r2
    e332:	bf08      	it	eq
    e334:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    e336:	18f1      	adds	r1, r6, r3

	*idx = i;
    e338:	702a      	strb	r2, [r5, #0]
    e33a:	d03a      	beq.n	e3b2 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
    e33c:	5af3      	ldrh	r3, [r6, r3]
    e33e:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    e340:	f04f 0800 	mov.w	r8, #0
    e344:	f04f 0901 	mov.w	r9, #1
    e348:	e022      	b.n	e390 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    e34a:	b37b      	cbz	r3, e3ac <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    e34c:	7903      	ldrb	r3, [r0, #4]
    e34e:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    e352:	3b01      	subs	r3, #1
    e354:	2b01      	cmp	r3, #1
    e356:	d931      	bls.n	e3bc <tx_cmplt_get+0xb4>
    e358:	2302      	movs	r3, #2
    e35a:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    e35c:	f002 fb5c 	bl	10a18 <ll_tx_mem_release>
	if (*idx >= count) {
    e360:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e362:	7879      	ldrb	r1, [r7, #1]
    e364:	7838      	ldrb	r0, [r7, #0]
    e366:	4299      	cmp	r1, r3
    e368:	bf9c      	itt	ls
    e36a:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    e36c:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    e36e:	459a      	cmp	sl, r3
    e370:	d021      	beq.n	e3b6 <tx_cmplt_get+0xae>
	i = *idx + 1;
    e372:	1c5c      	adds	r4, r3, #1
    e374:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    e376:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    e37a:	42a1      	cmp	r1, r4
    e37c:	bf08      	it	eq
    e37e:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    e380:	18f1      	adds	r1, r6, r3
	*idx = i;
    e382:	702c      	strb	r4, [r5, #0]
    e384:	d017      	beq.n	e3b6 <tx_cmplt_get+0xae>
    e386:	5af0      	ldrh	r0, [r6, r3]
    e388:	f8bb 3000 	ldrh.w	r3, [fp]
    e38c:	4298      	cmp	r0, r3
    e38e:	d112      	bne.n	e3b6 <tx_cmplt_get+0xae>
		node_tx = tx->node;
    e390:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    e392:	2801      	cmp	r0, #1
    e394:	f020 0303 	bic.w	r3, r0, #3
    e398:	d8d7      	bhi.n	e34a <tx_cmplt_get+0x42>
			cmplt++;
    e39a:	f108 0801 	add.w	r8, r8, #1
    e39e:	fa5f f888 	uxtb.w	r8, r8
    e3a2:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    e3a6:	2b00      	cmp	r3, #0
    e3a8:	d0da      	beq.n	e360 <tx_cmplt_get+0x58>
    e3aa:	e7d7      	b.n	e35c <tx_cmplt_get+0x54>
    e3ac:	2302      	movs	r3, #2
    e3ae:	604b      	str	r3, [r1, #4]
    e3b0:	e7d6      	b.n	e360 <tx_cmplt_get+0x58>
		return 0;
    e3b2:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    e3b6:	4640      	mov	r0, r8
    e3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    e3bc:	f108 0801 	add.w	r8, r8, #1
    e3c0:	fa5f f888 	uxtb.w	r8, r8
    e3c4:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    e3c8:	e7c8      	b.n	e35c <tx_cmplt_get+0x54>
    e3ca:	bf00      	nop
    e3cc:	2000058c 	.word	0x2000058c
    e3d0:	20000590 	.word	0x20000590

0000e3d4 <rx_demux>:
{
    e3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e3d8:	4ca2      	ldr	r4, [pc, #648]	; (e664 <rx_demux+0x290>)
	k_sem_give(sem_recv);
    e3da:	4ea3      	ldr	r6, [pc, #652]	; (e668 <rx_demux+0x294>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
    e3dc:	f8df b2ac 	ldr.w	fp, [pc, #684]	; e68c <rx_demux+0x2b8>
{
    e3e0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e3e2:	e9d4 0100 	ldrd	r0, r1, [r4]
    e3e6:	aa03      	add	r2, sp, #12
    e3e8:	f7fd f8f6 	bl	b5d8 <memq_peek>
		if (link) {
    e3ec:	4607      	mov	r7, r0
    e3ee:	2800      	cmp	r0, #0
    e3f0:	d036      	beq.n	e460 <rx_demux+0x8c>
			LL_ASSERT(rx);
    e3f2:	9b03      	ldr	r3, [sp, #12]
    e3f4:	2b00      	cmp	r3, #0
    e3f6:	f000 8125 	beq.w	e644 <rx_demux+0x270>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    e3fa:	7818      	ldrb	r0, [r3, #0]
    e3fc:	aa04      	add	r2, sp, #16
    e3fe:	a902      	add	r1, sp, #8
    e400:	f005 ff74 	bl	142ec <ull_conn_ack_by_last_peek>
			if (link_tx) {
    e404:	4605      	mov	r5, r0
    e406:	2800      	cmp	r0, #0
    e408:	d057      	beq.n	e4ba <rx_demux+0xe6>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    e40a:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    e40e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e412:	f891 9000 	ldrb.w	r9, [r1]
    e416:	9205      	str	r2, [sp, #20]
    e418:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    e41c:	f10d 0814 	add.w	r8, sp, #20
    e420:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    e424:	f005 ff78 	bl	14318 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    e428:	4629      	mov	r1, r5
    e42a:	9a05      	ldr	r2, [sp, #20]
    e42c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e430:	f005 ffba 	bl	143a8 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    e434:	4628      	mov	r0, r5
    e436:	f005 ff33 	bl	142a0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    e43a:	4642      	mov	r2, r8
    e43c:	4639      	mov	r1, r7
    e43e:	4648      	mov	r0, r9
    e440:	f005 ff54 	bl	142ec <ull_conn_ack_by_last_peek>
	} while (link);
    e444:	4605      	mov	r5, r0
    e446:	2800      	cmp	r0, #0
    e448:	d1ec      	bne.n	e424 <rx_demux+0x50>
	k_sem_give(sem_recv);
    e44a:	6830      	ldr	r0, [r6, #0]
    e44c:	f011 fe46 	bl	200dc <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e450:	e9d4 0100 	ldrd	r0, r1, [r4]
    e454:	aa03      	add	r2, sp, #12
    e456:	f7fd f8bf 	bl	b5d8 <memq_peek>
		if (link) {
    e45a:	4607      	mov	r7, r0
    e45c:	2800      	cmp	r0, #0
    e45e:	d1c8      	bne.n	e3f2 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    e460:	aa04      	add	r2, sp, #16
    e462:	a902      	add	r1, sp, #8
    e464:	f10d 0007 	add.w	r0, sp, #7
    e468:	f005 ff26 	bl	142b8 <ull_conn_ack_peek>
			if (link) {
    e46c:	4605      	mov	r5, r0
    e46e:	2800      	cmp	r0, #0
    e470:	f000 80e5 	beq.w	e63e <rx_demux+0x26a>
				rx_demux_conn_tx_ack(ack_last, handle,
    e474:	9a04      	ldr	r2, [sp, #16]
    e476:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e47a:	f89d 9007 	ldrb.w	r9, [sp, #7]
    e47e:	9205      	str	r2, [sp, #20]
    e480:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    e484:	f10d 0814 	add.w	r8, sp, #20
    e488:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    e48c:	f005 ff44 	bl	14318 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    e490:	4629      	mov	r1, r5
    e492:	9a05      	ldr	r2, [sp, #20]
    e494:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e498:	f005 ff86 	bl	143a8 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    e49c:	4628      	mov	r0, r5
    e49e:	f005 feff 	bl	142a0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    e4a2:	4642      	mov	r2, r8
    e4a4:	4639      	mov	r1, r7
    e4a6:	4648      	mov	r0, r9
    e4a8:	f005 ff20 	bl	142ec <ull_conn_ack_by_last_peek>
	} while (link);
    e4ac:	4605      	mov	r5, r0
    e4ae:	2800      	cmp	r0, #0
    e4b0:	d1ec      	bne.n	e48c <rx_demux+0xb8>
	k_sem_give(sem_recv);
    e4b2:	6830      	ldr	r0, [r6, #0]
    e4b4:	f011 fe12 	bl	200dc <z_impl_k_sem_give>
			if (nack) {
    e4b8:	e7ca      	b.n	e450 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
    e4ba:	9b03      	ldr	r3, [sp, #12]
    e4bc:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    e4be:	791b      	ldrb	r3, [r3, #4]
    e4c0:	3b01      	subs	r3, #1
    e4c2:	2b13      	cmp	r3, #19
    e4c4:	d80b      	bhi.n	e4de <rx_demux+0x10a>
    e4c6:	e8df f003 	tbb	[pc, r3]
    e4ca:	2918      	.short	0x2918
    e4cc:	0a0a0ab4 	.word	0x0a0a0ab4
    e4d0:	0a0a0a0a 	.word	0x0a0a0a0a
    e4d4:	0a0a0a0a 	.word	0x0a0a0a0a
    e4d8:	0a0a0a0a 	.word	0x0a0a0a0a
    e4dc:	18aa      	.short	0x18aa
		LL_ASSERT(0);
    e4de:	4a63      	ldr	r2, [pc, #396]	; (e66c <rx_demux+0x298>)
    e4e0:	4963      	ldr	r1, [pc, #396]	; (e670 <rx_demux+0x29c>)
    e4e2:	4864      	ldr	r0, [pc, #400]	; (e674 <rx_demux+0x2a0>)
    e4e4:	f640 0334 	movw	r3, #2100	; 0x834
    e4e8:	f014 fc8d 	bl	22e06 <printk>
    e4ec:	4040      	eors	r0, r0
    e4ee:	f380 8811 	msr	BASEPRI, r0
    e4f2:	f04f 0003 	mov.w	r0, #3
    e4f6:	df02      	svc	2
			if (nack) {
    e4f8:	e773      	b.n	e3e2 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e4fa:	495a      	ldr	r1, [pc, #360]	; (e664 <rx_demux+0x290>)
    e4fc:	6860      	ldr	r0, [r4, #4]
    e4fe:	2200      	movs	r2, #0
    e500:	f7fd f872 	bl	b5e8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e504:	4b5c      	ldr	r3, [pc, #368]	; (e678 <rx_demux+0x2a4>)
		ll_rx_put(link, rx);
    e506:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e508:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e50a:	4a5c      	ldr	r2, [pc, #368]	; (e67c <rx_demux+0x2a8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e50c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e50e:	4638      	mov	r0, r7
    e510:	f7fd f85a 	bl	b5c8 <memq_enqueue>
	k_sem_give(sem_recv);
    e514:	6830      	ldr	r0, [r6, #0]
    e516:	f011 fde1 	bl	200dc <z_impl_k_sem_give>
			if (nack) {
    e51a:	e799      	b.n	e450 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e51c:	4951      	ldr	r1, [pc, #324]	; (e664 <rx_demux+0x290>)
    e51e:	6860      	ldr	r0, [r4, #4]
    e520:	2200      	movs	r2, #0
    e522:	f7fd f861 	bl	b5e8 <memq_dequeue>
		rx_demux_event_done(link, rx);
    e526:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
    e528:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
    e52c:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
    e530:	b17b      	cbz	r3, e552 <rx_demux+0x17e>
    e532:	2b01      	cmp	r3, #1
    e534:	f000 80cb 	beq.w	e6ce <rx_demux+0x2fa>
		LL_ASSERT(0);
    e538:	4a4c      	ldr	r2, [pc, #304]	; (e66c <rx_demux+0x298>)
    e53a:	494d      	ldr	r1, [pc, #308]	; (e670 <rx_demux+0x29c>)
    e53c:	484d      	ldr	r0, [pc, #308]	; (e674 <rx_demux+0x2a0>)
    e53e:	f640 0374 	movw	r3, #2164	; 0x874
    e542:	f014 fc60 	bl	22e06 <printk>
    e546:	4040      	eors	r0, r0
    e548:	f380 8811 	msr	BASEPRI, r0
    e54c:	f04f 0003 	mov.w	r0, #3
    e550:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e552:	4a4b      	ldr	r2, [pc, #300]	; (e680 <rx_demux+0x2ac>)
    e554:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    e556:	f892 c001 	ldrb.w	ip, [r2, #1]
    e55a:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
    e55c:	1c4b      	adds	r3, r1, #1
    e55e:	b2db      	uxtb	r3, r3
		last = 0U;
    e560:	459c      	cmp	ip, r3
    e562:	bf08      	it	eq
    e564:	2300      	moveq	r3, #0
	if (last == first) {
    e566:	4298      	cmp	r0, r3
	done->extra.type = 0U;
    e568:	f04f 0c00 	mov.w	ip, #0
    e56c:	f885 c020 	strb.w	ip, [r5, #32]
    e570:	f000 80c5 	beq.w	e6fe <rx_demux+0x32a>
	done->hdr.link = link;
    e574:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e576:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e578:	fb00 2101 	mla	r1, r0, r1, r2
    e57c:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
    e57e:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
    e580:	4d40      	ldr	r5, [pc, #256]	; (e684 <rx_demux+0x2b0>)
    e582:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
    e584:	78ea      	ldrb	r2, [r5, #3]
    e586:	f895 c000 	ldrb.w	ip, [r5]
    e58a:	429a      	cmp	r2, r3
    e58c:	d02a      	beq.n	e5e4 <rx_demux+0x210>
	return (void *)(fifo + first * size);
    e58e:	f105 0a04 	add.w	sl, r5, #4
    e592:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
    e596:	f1bc 0f00 	cmp.w	ip, #0
    e59a:	d023      	beq.n	e5e4 <rx_demux+0x210>
		uint8_t is_aborted = next->is_aborted;
    e59c:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
    e5a0:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    e5a2:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    e5a6:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    e5aa:	d571      	bpl.n	e690 <rx_demux+0x2bc>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    e5ac:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    e5ae:	78ab      	ldrb	r3, [r5, #2]
    e5b0:	f895 c000 	ldrb.w	ip, [r5]
    e5b4:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    e5b6:	429a      	cmp	r2, r3
    e5b8:	d014      	beq.n	e5e4 <rx_demux+0x210>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    e5ba:	3301      	adds	r3, #1
    e5bc:	b2db      	uxtb	r3, r3
	if (_first == count) {
    e5be:	4299      	cmp	r1, r3
    e5c0:	d07e      	beq.n	e6c0 <rx_demux+0x2ec>
	if (first == last) {
    e5c2:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
    e5c4:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    e5c6:	d00d      	beq.n	e5e4 <rx_demux+0x210>
	return (void *)(fifo + first * size);
    e5c8:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    e5cc:	f1bc 0f00 	cmp.w	ip, #0
    e5d0:	d008      	beq.n	e5e4 <rx_demux+0x210>
    e5d2:	2f00      	cmp	r7, #0
    e5d4:	d1e2      	bne.n	e59c <rx_demux+0x1c8>
    e5d6:	f1b8 0f00 	cmp.w	r8, #0
    e5da:	d003      	beq.n	e5e4 <rx_demux+0x210>
    e5dc:	f89c 3020 	ldrb.w	r3, [ip, #32]
    e5e0:	07db      	lsls	r3, r3, #31
    e5e2:	d5db      	bpl.n	e59c <rx_demux+0x1c8>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    e5e4:	f1b9 0f00 	cmp.w	r9, #0
    e5e8:	f43f aefb 	beq.w	e3e2 <rx_demux+0xe>
	return hdr->ref;
    e5ec:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
    e5f0:	2b00      	cmp	r3, #0
    e5f2:	f000 8092 	beq.w	e71a <rx_demux+0x346>
	return hdr->ref--;
    e5f6:	f899 3000 	ldrb.w	r3, [r9]
    e5fa:	3b01      	subs	r3, #1
    e5fc:	b2db      	uxtb	r3, r3
    e5fe:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
    e602:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    e606:	2b00      	cmp	r3, #0
    e608:	f47f aeeb 	bne.w	e3e2 <rx_demux+0xe>
    e60c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e610:	2b00      	cmp	r3, #0
    e612:	f43f aee6 	beq.w	e3e2 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    e616:	f8d9 0008 	ldr.w	r0, [r9, #8]
    e61a:	4798      	blx	r3
			if (nack) {
    e61c:	e6e1      	b.n	e3e2 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e61e:	4911      	ldr	r1, [pc, #68]	; (e664 <rx_demux+0x290>)
    e620:	6860      	ldr	r0, [r4, #4]
    e622:	2200      	movs	r2, #0
    e624:	f7fc ffe0 	bl	b5e8 <memq_dequeue>
		ull_conn_setup(link, rx);
    e628:	9905      	ldr	r1, [sp, #20]
    e62a:	4638      	mov	r0, r7
    e62c:	f002 fd08 	bl	11040 <ull_conn_setup>
			if (nack) {
    e630:	e6d7      	b.n	e3e2 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
    e632:	a905      	add	r1, sp, #20
    e634:	4638      	mov	r0, r7
    e636:	f002 fd25 	bl	11084 <ull_conn_rx>
		if (nack) {
    e63a:	2800      	cmp	r0, #0
    e63c:	d04b      	beq.n	e6d6 <rx_demux+0x302>
}
    e63e:	b007      	add	sp, #28
    e640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    e644:	4a09      	ldr	r2, [pc, #36]	; (e66c <rx_demux+0x298>)
    e646:	4910      	ldr	r1, [pc, #64]	; (e688 <rx_demux+0x2b4>)
    e648:	480a      	ldr	r0, [pc, #40]	; (e674 <rx_demux+0x2a0>)
    e64a:	f240 7333 	movw	r3, #1843	; 0x733
    e64e:	f014 fbda 	bl	22e06 <printk>
    e652:	4040      	eors	r0, r0
    e654:	f380 8811 	msr	BASEPRI, r0
    e658:	f04f 0003 	mov.w	r0, #3
    e65c:	df02      	svc	2
    e65e:	9b03      	ldr	r3, [sp, #12]
    e660:	e6cb      	b.n	e3fa <rx_demux+0x26>
    e662:	bf00      	nop
    e664:	20002f84 	.word	0x20002f84
    e668:	20002f8c 	.word	0x20002f8c
    e66c:	0002c874 	.word	0x0002c874
    e670:	0002c6a0 	.word	0x0002c6a0
    e674:	0002c630 	.word	0x0002c630
    e678:	2000058c 	.word	0x2000058c
    e67c:	20002f80 	.word	0x20002f80
    e680:	20000428 	.word	0x20000428
    e684:	20000468 	.word	0x20000468
    e688:	0002c8b8 	.word	0x0002c8b8
    e68c:	200005e0 	.word	0x200005e0
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e690:	465b      	mov	r3, fp
    e692:	463a      	mov	r2, r7
    e694:	4639      	mov	r1, r7
    e696:	2001      	movs	r0, #1
			mfy.param = next;
    e698:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e69c:	f7fd f808 	bl	b6b0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    e6a0:	2800      	cmp	r0, #0
    e6a2:	d083      	beq.n	e5ac <rx_demux+0x1d8>
    e6a4:	4a24      	ldr	r2, [pc, #144]	; (e738 <rx_demux+0x364>)
    e6a6:	4925      	ldr	r1, [pc, #148]	; (e73c <rx_demux+0x368>)
    e6a8:	4825      	ldr	r0, [pc, #148]	; (e740 <rx_demux+0x36c>)
    e6aa:	f640 038c 	movw	r3, #2188	; 0x88c
    e6ae:	f014 fbaa 	bl	22e06 <printk>
    e6b2:	4040      	eors	r0, r0
    e6b4:	f380 8811 	msr	BASEPRI, r0
    e6b8:	f04f 0003 	mov.w	r0, #3
    e6bc:	df02      	svc	2
    e6be:	e775      	b.n	e5ac <rx_demux+0x1d8>
	*first = _first; /* Write back read-index */
    e6c0:	2300      	movs	r3, #0
    e6c2:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    e6c4:	2a00      	cmp	r2, #0
    e6c6:	d08d      	beq.n	e5e4 <rx_demux+0x210>
	return (void *)(fifo + first * size);
    e6c8:	f8df c08c 	ldr.w	ip, [pc, #140]	; e758 <rx_demux+0x384>
    e6cc:	e781      	b.n	e5d2 <rx_demux+0x1fe>
		ull_conn_done(done);
    e6ce:	4628      	mov	r0, r5
    e6d0:	f005 fb84 	bl	13ddc <ull_conn_done>
		break;
    e6d4:	e73d      	b.n	e552 <rx_demux+0x17e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e6d6:	491b      	ldr	r1, [pc, #108]	; (e744 <rx_demux+0x370>)
    e6d8:	4602      	mov	r2, r0
    e6da:	6860      	ldr	r0, [r4, #4]
    e6dc:	f7fc ff84 	bl	b5e8 <memq_dequeue>
		if (rx) {
    e6e0:	9905      	ldr	r1, [sp, #20]
    e6e2:	2900      	cmp	r1, #0
    e6e4:	f43f ae7d 	beq.w	e3e2 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e6e8:	4b17      	ldr	r3, [pc, #92]	; (e748 <rx_demux+0x374>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e6ea:	4a18      	ldr	r2, [pc, #96]	; (e74c <rx_demux+0x378>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e6ec:	78db      	ldrb	r3, [r3, #3]
    e6ee:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e6f0:	4638      	mov	r0, r7
    e6f2:	f7fc ff69 	bl	b5c8 <memq_enqueue>
	k_sem_give(sem_recv);
    e6f6:	6830      	ldr	r0, [r6, #0]
    e6f8:	f011 fcf0 	bl	200dc <z_impl_k_sem_give>
			if (nack) {
    e6fc:	e671      	b.n	e3e2 <rx_demux+0xe>
	LL_ASSERT(release == done);
    e6fe:	4a0e      	ldr	r2, [pc, #56]	; (e738 <rx_demux+0x364>)
    e700:	4913      	ldr	r1, [pc, #76]	; (e750 <rx_demux+0x37c>)
    e702:	480f      	ldr	r0, [pc, #60]	; (e740 <rx_demux+0x36c>)
    e704:	f640 037b 	movw	r3, #2171	; 0x87b
    e708:	f014 fb7d 	bl	22e06 <printk>
    e70c:	4040      	eors	r0, r0
    e70e:	f380 8811 	msr	BASEPRI, r0
    e712:	f04f 0003 	mov.w	r0, #3
    e716:	df02      	svc	2
    e718:	e732      	b.n	e580 <rx_demux+0x1ac>
	LL_ASSERT(ull_ref_get(ull_hdr));
    e71a:	4a07      	ldr	r2, [pc, #28]	; (e738 <rx_demux+0x364>)
    e71c:	490d      	ldr	r1, [pc, #52]	; (e754 <rx_demux+0x380>)
    e71e:	4808      	ldr	r0, [pc, #32]	; (e740 <rx_demux+0x36c>)
    e720:	f640 039e 	movw	r3, #2206	; 0x89e
    e724:	f014 fb6f 	bl	22e06 <printk>
    e728:	4040      	eors	r0, r0
    e72a:	f380 8811 	msr	BASEPRI, r0
    e72e:	f04f 0003 	mov.w	r0, #3
    e732:	df02      	svc	2
    e734:	e75f      	b.n	e5f6 <rx_demux+0x222>
    e736:	bf00      	nop
    e738:	0002c874 	.word	0x0002c874
    e73c:	0002c8bc 	.word	0x0002c8bc
    e740:	0002c630 	.word	0x0002c630
    e744:	20002f84 	.word	0x20002f84
    e748:	2000058c 	.word	0x2000058c
    e74c:	20002f80 	.word	0x20002f80
    e750:	0002c8dc 	.word	0x0002c8dc
    e754:	0002c8c4 	.word	0x0002c8c4
    e758:	2000046c 	.word	0x2000046c

0000e75c <ll_init>:
{
    e75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    e760:	4b96      	ldr	r3, [pc, #600]	; (e9bc <ll_init+0x260>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e762:	4c97      	ldr	r4, [pc, #604]	; (e9c0 <ll_init+0x264>)
	sem_recv = sem_rx;
    e764:	6018      	str	r0, [r3, #0]
{
    e766:	b086      	sub	sp, #24
	cntr_init();
    e768:	f008 fee6 	bl	17538 <cntr_init>
	mayfly_init();
    e76c:	f7fc ff4c 	bl	b608 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e770:	4994      	ldr	r1, [pc, #592]	; (e9c4 <ll_init+0x268>)
    e772:	4895      	ldr	r0, [pc, #596]	; (e9c8 <ll_init+0x26c>)
    e774:	9105      	str	r1, [sp, #20]
    e776:	9004      	str	r0, [sp, #16]
    e778:	4994      	ldr	r1, [pc, #592]	; (e9cc <ll_init+0x270>)
    e77a:	4895      	ldr	r0, [pc, #596]	; (e9d0 <ll_init+0x274>)
    e77c:	9103      	str	r1, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e77e:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e780:	2203      	movs	r2, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e782:	210b      	movs	r1, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e784:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e786:	e9cd 1001 	strd	r1, r0, [sp, #4]
    e78a:	9400      	str	r4, [sp, #0]
    e78c:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e78e:	7022      	strb	r2, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e790:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e792:	4a90      	ldr	r2, [pc, #576]	; (e9d4 <ll_init+0x278>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e794:	7425      	strb	r5, [r4, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e796:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    e798:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e79a:	f7fe f925 	bl	c9e8 <ticker_init>
	LL_ASSERT(!err);
    e79e:	2800      	cmp	r0, #0
    e7a0:	f040 80dd 	bne.w	e95e <ll_init+0x202>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e7a4:	2201      	movs	r2, #1
    e7a6:	2100      	movs	r1, #0
    e7a8:	488b      	ldr	r0, [pc, #556]	; (e9d8 <ll_init+0x27c>)
    e7aa:	f01c fd41 	bl	2b230 <z_impl_k_sem_init>
	err = lll_init();
    e7ae:	f007 fa15 	bl	15bdc <lll_init>
	if (err) {
    e7b2:	4604      	mov	r4, r0
    e7b4:	b118      	cbz	r0, e7be <ll_init+0x62>
}
    e7b6:	4620      	mov	r0, r4
    e7b8:	b006      	add	sp, #24
    e7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e7be:	4b87      	ldr	r3, [pc, #540]	; (e9dc <ll_init+0x280>)
		link = mem_acquire(&mem_link_done.free);
    e7c0:	f8df 8220 	ldr.w	r8, [pc, #544]	; e9e4 <ll_init+0x288>
    e7c4:	4d86      	ldr	r5, [pc, #536]	; (e9e0 <ll_init+0x284>)
		rx = mem_acquire(&mem_done.free);
    e7c6:	4f85      	ldr	r7, [pc, #532]	; (e9dc <ll_init+0x280>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e7c8:	1d18      	adds	r0, r3, #4
    e7ca:	2203      	movs	r2, #3
    e7cc:	2134      	movs	r1, #52	; 0x34
    e7ce:	f7fc fe79 	bl	b4c4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    e7d2:	4643      	mov	r3, r8
    e7d4:	2203      	movs	r2, #3
    e7d6:	1d18      	adds	r0, r3, #4
    e7d8:	2108      	movs	r1, #8
    e7da:	f7fc fe73 	bl	b4c4 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e7de:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    e7e0:	786a      	ldrb	r2, [r5, #1]
    e7e2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e7e4:	3401      	adds	r4, #1
    e7e6:	b2e4      	uxtb	r4, r4
		last = 0U;
    e7e8:	42a2      	cmp	r2, r4
    e7ea:	bf08      	it	eq
    e7ec:	2400      	moveq	r4, #0
	if (last == first) {
    e7ee:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    e7f0:	4640      	mov	r0, r8
    e7f2:	d013      	beq.n	e81c <ll_init+0xc0>
    e7f4:	f7fc fe86 	bl	b504 <mem_acquire>
    e7f8:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    e7fa:	4638      	mov	r0, r7
		if (!link) {
    e7fc:	b176      	cbz	r6, e81c <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
    e7fe:	f7fc fe81 	bl	b504 <mem_acquire>
		if (!rx) {
    e802:	b138      	cbz	r0, e814 <ll_init+0xb8>
		rx->link = link;
    e804:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e806:	78ea      	ldrb	r2, [r5, #3]
    e808:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e80a:	fb02 5303 	mla	r3, r2, r3, r5
    e80e:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    e810:	70ec      	strb	r4, [r5, #3]
}
    e812:	e7e5      	b.n	e7e0 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
    e814:	4973      	ldr	r1, [pc, #460]	; (e9e4 <ll_init+0x288>)
    e816:	4630      	mov	r0, r6
    e818:	f7fc fe8a 	bl	b530 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e81c:	4b72      	ldr	r3, [pc, #456]	; (e9e8 <ll_init+0x28c>)
    e81e:	2209      	movs	r2, #9
    e820:	1d18      	adds	r0, r3, #4
    e822:	2148      	movs	r1, #72	; 0x48
    e824:	f7fc fe4e 	bl	b4c4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e828:	4b70      	ldr	r3, [pc, #448]	; (e9ec <ll_init+0x290>)
    e82a:	220b      	movs	r2, #11
    e82c:	1d18      	adds	r0, r3, #4
    e82e:	2108      	movs	r1, #8
    e830:	f7fc fe48 	bl	b4c4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e834:	486d      	ldr	r0, [pc, #436]	; (e9ec <ll_init+0x290>)
    e836:	f7fc fe65 	bl	b504 <mem_acquire>
	LL_ASSERT(link);
    e83a:	4604      	mov	r4, r0
    e83c:	2800      	cmp	r0, #0
    e83e:	f000 80aa 	beq.w	e996 <ll_init+0x23a>
	MEMQ_INIT(ull_rx, link);
    e842:	4a6b      	ldr	r2, [pc, #428]	; (e9f0 <ll_init+0x294>)
    e844:	4620      	mov	r0, r4
    e846:	1f11      	subs	r1, r2, #4
    e848:	f7fc feb0 	bl	b5ac <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e84c:	4867      	ldr	r0, [pc, #412]	; (e9ec <ll_init+0x290>)
    e84e:	f7fc fe59 	bl	b504 <mem_acquire>
	LL_ASSERT(link);
    e852:	4604      	mov	r4, r0
    e854:	2800      	cmp	r0, #0
    e856:	f000 8090 	beq.w	e97a <ll_init+0x21e>
	MEMQ_INIT(ll_rx, link);
    e85a:	4a66      	ldr	r2, [pc, #408]	; (e9f4 <ll_init+0x298>)
	mem_link_rx.quota_pdu = RX_CNT;
    e85c:	4f66      	ldr	r7, [pc, #408]	; (e9f8 <ll_init+0x29c>)
    e85e:	4d67      	ldr	r5, [pc, #412]	; (e9fc <ll_init+0x2a0>)
		rx = mem_acquire(&mem_pdu_rx.free);
    e860:	f8df 9184 	ldr.w	r9, [pc, #388]	; e9e8 <ll_init+0x28c>
	MEMQ_INIT(ll_rx, link);
    e864:	4620      	mov	r0, r4
    e866:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    e868:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
    e86a:	f7fc fe9f 	bl	b5ac <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e86e:	2307      	movs	r3, #7
    e870:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e874:	78ec      	ldrb	r4, [r5, #3]
    e876:	2606      	movs	r6, #6
	if (last == count) {
    e878:	786a      	ldrb	r2, [r5, #1]
    e87a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e87c:	3401      	adds	r4, #1
    e87e:	b2e4      	uxtb	r4, r4
		last = 0U;
    e880:	42a2      	cmp	r2, r4
    e882:	bf08      	it	eq
    e884:	2400      	moveq	r4, #0
	if (last == first) {
    e886:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e888:	4640      	mov	r0, r8
    e88a:	d064      	beq.n	e956 <ll_init+0x1fa>
    e88c:	f7fc fe3a 	bl	b504 <mem_acquire>
    e890:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e892:	4648      	mov	r0, r9
		if (!link) {
    e894:	f1ba 0f00 	cmp.w	sl, #0
    e898:	d041      	beq.n	e91e <ll_init+0x1c2>
		rx = mem_acquire(&mem_pdu_rx.free);
    e89a:	f7fc fe33 	bl	b504 <mem_acquire>
		if (!rx) {
    e89e:	2800      	cmp	r0, #0
    e8a0:	f000 8087 	beq.w	e9b2 <ll_init+0x256>
		rx->link = link;
    e8a4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e8a8:	78ea      	ldrb	r2, [r5, #3]
    e8aa:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e8ac:	fb02 5303 	mla	r3, r2, r3, r5
    e8b0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e8b2:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    e8b4:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e8b6:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    e8b8:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e8ba:	b2f6      	uxtb	r6, r6
	mem_link_rx.quota_pdu += delta;
    e8bc:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e8be:	2eff      	cmp	r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    e8c0:	703b      	strb	r3, [r7, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e8c2:	d1d9      	bne.n	e878 <ll_init+0x11c>
	while (mem_link_rx.quota_pdu &&
    e8c4:	b35b      	cbz	r3, e91e <ll_init+0x1c2>
    e8c6:	4d4e      	ldr	r5, [pc, #312]	; (ea00 <ll_init+0x2a4>)
		link = mem_acquire(&mem_link_rx.free);
    e8c8:	4e48      	ldr	r6, [pc, #288]	; (e9ec <ll_init+0x290>)
    e8ca:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    e8cc:	f8df 8118 	ldr.w	r8, [pc, #280]	; e9e8 <ll_init+0x28c>
		link->mem = NULL;
    e8d0:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    e8d4:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e8d6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e8d8:	3401      	adds	r4, #1
    e8da:	b2e4      	uxtb	r4, r4
		last = 0U;
    e8dc:	42a2      	cmp	r2, r4
    e8de:	bf08      	it	eq
    e8e0:	2400      	moveq	r4, #0
	if (last == first) {
    e8e2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e8e4:	4630      	mov	r0, r6
    e8e6:	d01a      	beq.n	e91e <ll_init+0x1c2>
    e8e8:	f7fc fe0c 	bl	b504 <mem_acquire>
    e8ec:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e8ee:	4640      	mov	r0, r8
		if (!link) {
    e8f0:	f1ba 0f00 	cmp.w	sl, #0
    e8f4:	d013      	beq.n	e91e <ll_init+0x1c2>
		rx = mem_acquire(&mem_pdu_rx.free);
    e8f6:	f7fc fe05 	bl	b504 <mem_acquire>
		if (!rx) {
    e8fa:	2800      	cmp	r0, #0
    e8fc:	d059      	beq.n	e9b2 <ll_init+0x256>
		link->mem = NULL;
    e8fe:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    e902:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e906:	78ea      	ldrb	r2, [r5, #3]
    e908:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e90a:	fb02 5303 	mla	r3, r2, r3, r5
    e90e:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e910:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    e912:	70ec      	strb	r4, [r5, #3]
    e914:	3b01      	subs	r3, #1
    e916:	b2db      	uxtb	r3, r3
    e918:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    e91a:	2b00      	cmp	r3, #0
    e91c:	d1da      	bne.n	e8d4 <ll_init+0x178>
	err = lll_adv_init();
    e91e:	f007 fcc7 	bl	162b0 <lll_adv_init>
	if (err) {
    e922:	4604      	mov	r4, r0
    e924:	2800      	cmp	r0, #0
    e926:	f47f af46 	bne.w	e7b6 <ll_init+0x5a>
	err = ull_adv_init();
    e92a:	f001 f9af 	bl	fc8c <ull_adv_init>
	if (err) {
    e92e:	4604      	mov	r4, r0
    e930:	2800      	cmp	r0, #0
    e932:	f47f af40 	bne.w	e7b6 <ll_init+0x5a>
	err = lll_conn_init();
    e936:	f008 f95b 	bl	16bf0 <lll_conn_init>
	if (err) {
    e93a:	4604      	mov	r4, r0
    e93c:	2800      	cmp	r0, #0
    e93e:	f47f af3a 	bne.w	e7b6 <ll_init+0x5a>
	err = ull_conn_init();
    e942:	f002 fb29 	bl	10f98 <ull_conn_init>
	if (err) {
    e946:	4604      	mov	r4, r0
    e948:	2800      	cmp	r0, #0
    e94a:	f47f af34 	bne.w	e7b6 <ll_init+0x5a>
		ull_filter_reset(true);
    e94e:	2001      	movs	r0, #1
    e950:	f006 fdfe 	bl	15550 <ull_filter_reset>
	return  0;
    e954:	e72f      	b.n	e7b6 <ll_init+0x5a>
	if (!max) {
    e956:	2e00      	cmp	r6, #0
    e958:	d0e1      	beq.n	e91e <ll_init+0x1c2>
    e95a:	783b      	ldrb	r3, [r7, #0]
    e95c:	e7b2      	b.n	e8c4 <ll_init+0x168>
	LL_ASSERT(!err);
    e95e:	4a29      	ldr	r2, [pc, #164]	; (ea04 <ll_init+0x2a8>)
    e960:	4929      	ldr	r1, [pc, #164]	; (ea08 <ll_init+0x2ac>)
    e962:	482a      	ldr	r0, [pc, #168]	; (ea0c <ll_init+0x2b0>)
    e964:	f44f 73b8 	mov.w	r3, #368	; 0x170
    e968:	f014 fa4d 	bl	22e06 <printk>
    e96c:	4040      	eors	r0, r0
    e96e:	f380 8811 	msr	BASEPRI, r0
    e972:	f04f 0003 	mov.w	r0, #3
    e976:	df02      	svc	2
    e978:	e714      	b.n	e7a4 <ll_init+0x48>
	LL_ASSERT(link);
    e97a:	4a22      	ldr	r2, [pc, #136]	; (ea04 <ll_init+0x2a8>)
    e97c:	4924      	ldr	r1, [pc, #144]	; (ea10 <ll_init+0x2b4>)
    e97e:	4823      	ldr	r0, [pc, #140]	; (ea0c <ll_init+0x2b0>)
    e980:	f240 636a 	movw	r3, #1642	; 0x66a
    e984:	f014 fa3f 	bl	22e06 <printk>
    e988:	4040      	eors	r0, r0
    e98a:	f380 8811 	msr	BASEPRI, r0
    e98e:	f04f 0003 	mov.w	r0, #3
    e992:	df02      	svc	2
    e994:	e761      	b.n	e85a <ll_init+0xfe>
	LL_ASSERT(link);
    e996:	4a1b      	ldr	r2, [pc, #108]	; (ea04 <ll_init+0x2a8>)
    e998:	491d      	ldr	r1, [pc, #116]	; (ea10 <ll_init+0x2b4>)
    e99a:	481c      	ldr	r0, [pc, #112]	; (ea0c <ll_init+0x2b0>)
    e99c:	f240 6363 	movw	r3, #1635	; 0x663
    e9a0:	f014 fa31 	bl	22e06 <printk>
    e9a4:	4040      	eors	r0, r0
    e9a6:	f380 8811 	msr	BASEPRI, r0
    e9aa:	f04f 0003 	mov.w	r0, #3
    e9ae:	df02      	svc	2
    e9b0:	e747      	b.n	e842 <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
    e9b2:	490e      	ldr	r1, [pc, #56]	; (e9ec <ll_init+0x290>)
    e9b4:	4650      	mov	r0, sl
    e9b6:	f7fc fdbb 	bl	b530 <mem_release>
			return;
    e9ba:	e7b0      	b.n	e91e <ll_init+0x1c2>
    e9bc:	20002f8c 	.word	0x20002f8c
    e9c0:	200032a4 	.word	0x200032a4
    e9c4:	00018129 	.word	0x00018129
    e9c8:	00018049 	.word	0x00018049
    e9cc:	00017fe5 	.word	0x00017fe5
    e9d0:	20003068 	.word	0x20003068
    e9d4:	20002fa8 	.word	0x20002fa8
    e9d8:	20002f90 	.word	0x20002f90
    e9dc:	20002bd4 	.word	0x20002bd4
    e9e0:	20000428 	.word	0x20000428
    e9e4:	20002c74 	.word	0x20002c74
    e9e8:	20002cf0 	.word	0x20002cf0
    e9ec:	20002c94 	.word	0x20002c94
    e9f0:	20002f88 	.word	0x20002f88
    e9f4:	20002f80 	.word	0x20002f80
    e9f8:	20002c90 	.word	0x20002c90
    e9fc:	20000450 	.word	0x20000450
    ea00:	2000043c 	.word	0x2000043c
    ea04:	0002c874 	.word	0x0002c874
    ea08:	0002c8b0 	.word	0x0002c8b0
    ea0c:	0002c630 	.word	0x0002c630
    ea10:	0002cb44 	.word	0x0002cb44

0000ea14 <ll_reset>:
{
    ea14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea18:	b087      	sub	sp, #28
	err = ull_adv_reset();
    ea1a:	f001 f945 	bl	fca8 <ull_adv_reset>
	LL_ASSERT(!err);
    ea1e:	2800      	cmp	r0, #0
    ea20:	f040 8116 	bne.w	ec50 <ll_reset+0x23c>
	err = ull_conn_reset();
    ea24:	f002 faba 	bl	10f9c <ull_conn_reset>
	LL_ASSERT(!err);
    ea28:	2800      	cmp	r0, #0
    ea2a:	f040 8103 	bne.w	ec34 <ll_reset+0x220>
	MFIFO_INIT(tx_ack);
    ea2e:	4ba2      	ldr	r3, [pc, #648]	; (ecb8 <ll_reset+0x2a4>)
	MFIFO_INIT(done);
    ea30:	4ea2      	ldr	r6, [pc, #648]	; (ecbc <ll_reset+0x2a8>)
	MFIFO_INIT(pdu_rx_free);
    ea32:	4da3      	ldr	r5, [pc, #652]	; (ecc0 <ll_reset+0x2ac>)
	MFIFO_INIT(ll_pdu_rx_free);
    ea34:	4fa3      	ldr	r7, [pc, #652]	; (ecc4 <ll_reset+0x2b0>)
	MFIFO_INIT(tx_ack);
    ea36:	2400      	movs	r4, #0
    ea38:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    ea3a:	4620      	mov	r0, r4
    ea3c:	f006 fd88 	bl	15550 <ull_filter_reset>
	MFIFO_INIT(prep);
    ea40:	4ba1      	ldr	r3, [pc, #644]	; (ecc8 <ll_reset+0x2b4>)
	MFIFO_INIT(done);
    ea42:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
    ea44:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    ea46:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    ea48:	807c      	strh	r4, [r7, #2]
    ea4a:	2201      	movs	r2, #1
    ea4c:	4621      	mov	r1, r4
    ea4e:	4668      	mov	r0, sp
    ea50:	f01c fbee 	bl	2b230 <z_impl_k_sem_init>
		mfy.param = &sem;
    ea54:	4b9d      	ldr	r3, [pc, #628]	; (eccc <ll_reset+0x2b8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    ea56:	4622      	mov	r2, r4
    ea58:	4621      	mov	r1, r4
    ea5a:	2003      	movs	r0, #3
		mfy.param = &sem;
    ea5c:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    ea60:	f7fc fe26 	bl	b6b0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ea64:	2800      	cmp	r0, #0
    ea66:	f040 80d7 	bne.w	ec18 <ll_reset+0x204>
	return z_impl_k_sem_take(sem, timeout);
    ea6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea72:	4668      	mov	r0, sp
    ea74:	f011 fb58 	bl	20128 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    ea78:	f001 f9b2 	bl	fde0 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    ea7c:	2800      	cmp	r0, #0
    ea7e:	f040 80bd 	bne.w	ebfc <ll_reset+0x1e8>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    ea82:	4b93      	ldr	r3, [pc, #588]	; (ecd0 <ll_reset+0x2bc>)
		link = mem_acquire(&mem_link_done.free);
    ea84:	f8df 924c 	ldr.w	r9, [pc, #588]	; ecd4 <ll_reset+0x2c0>
		rx = mem_acquire(&mem_done.free);
    ea88:	f8df 8244 	ldr.w	r8, [pc, #580]	; ecd0 <ll_reset+0x2bc>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    ea8c:	1d18      	adds	r0, r3, #4
    ea8e:	2203      	movs	r2, #3
    ea90:	2134      	movs	r1, #52	; 0x34
    ea92:	f7fc fd17 	bl	b4c4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    ea96:	464b      	mov	r3, r9
    ea98:	2203      	movs	r2, #3
    ea9a:	1d18      	adds	r0, r3, #4
    ea9c:	2108      	movs	r1, #8
    ea9e:	f7fc fd11 	bl	b4c4 <mem_init>
static inline void done_alloc(void)
    eaa2:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    eaa4:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    eaa6:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    eaa8:	3401      	adds	r4, #1
    eaaa:	b2e4      	uxtb	r4, r4
		last = 0U;
    eaac:	42a2      	cmp	r2, r4
    eaae:	bf08      	it	eq
    eab0:	2400      	moveq	r4, #0
	if (last == first) {
    eab2:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    eab4:	4648      	mov	r0, r9
    eab6:	d016      	beq.n	eae6 <ll_reset+0xd2>
    eab8:	f7fc fd24 	bl	b504 <mem_acquire>
    eabc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
    eabe:	4640      	mov	r0, r8
		if (!link) {
    eac0:	f1ba 0f00 	cmp.w	sl, #0
    eac4:	d00f      	beq.n	eae6 <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
    eac6:	f7fc fd1d 	bl	b504 <mem_acquire>
		if (!rx) {
    eaca:	b140      	cbz	r0, eade <ll_reset+0xca>
		rx->link = link;
    eacc:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ead0:	78f2      	ldrb	r2, [r6, #3]
    ead2:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ead4:	fb02 6303 	mla	r3, r2, r3, r6
    ead8:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    eada:	70f4      	strb	r4, [r6, #3]
}
    eadc:	e7e2      	b.n	eaa4 <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
    eade:	497d      	ldr	r1, [pc, #500]	; (ecd4 <ll_reset+0x2c0>)
    eae0:	4650      	mov	r0, sl
    eae2:	f7fc fd25 	bl	b530 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    eae6:	4b7c      	ldr	r3, [pc, #496]	; (ecd8 <ll_reset+0x2c4>)
    eae8:	2209      	movs	r2, #9
    eaea:	1d18      	adds	r0, r3, #4
    eaec:	2148      	movs	r1, #72	; 0x48
    eaee:	f7fc fce9 	bl	b4c4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    eaf2:	4b7a      	ldr	r3, [pc, #488]	; (ecdc <ll_reset+0x2c8>)
    eaf4:	220b      	movs	r2, #11
    eaf6:	1d18      	adds	r0, r3, #4
    eaf8:	2108      	movs	r1, #8
    eafa:	f7fc fce3 	bl	b4c4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    eafe:	4877      	ldr	r0, [pc, #476]	; (ecdc <ll_reset+0x2c8>)
    eb00:	f7fc fd00 	bl	b504 <mem_acquire>
	LL_ASSERT(link);
    eb04:	4604      	mov	r4, r0
    eb06:	2800      	cmp	r0, #0
    eb08:	f000 80be 	beq.w	ec88 <ll_reset+0x274>
	MEMQ_INIT(ull_rx, link);
    eb0c:	4a74      	ldr	r2, [pc, #464]	; (ece0 <ll_reset+0x2cc>)
    eb0e:	4620      	mov	r0, r4
    eb10:	1f11      	subs	r1, r2, #4
    eb12:	f7fc fd4b 	bl	b5ac <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    eb16:	4871      	ldr	r0, [pc, #452]	; (ecdc <ll_reset+0x2c8>)
    eb18:	f7fc fcf4 	bl	b504 <mem_acquire>
	LL_ASSERT(link);
    eb1c:	4604      	mov	r4, r0
    eb1e:	2800      	cmp	r0, #0
    eb20:	f000 80a4 	beq.w	ec6c <ll_reset+0x258>
	MEMQ_INIT(ll_rx, link);
    eb24:	4a6f      	ldr	r2, [pc, #444]	; (ece4 <ll_reset+0x2d0>)
	mem_link_rx.quota_pdu = RX_CNT;
    eb26:	4e70      	ldr	r6, [pc, #448]	; (ece8 <ll_reset+0x2d4>)
		rx = mem_acquire(&mem_pdu_rx.free);
    eb28:	f8df 91ac 	ldr.w	r9, [pc, #428]	; ecd8 <ll_reset+0x2c4>
	MEMQ_INIT(ll_rx, link);
    eb2c:	4620      	mov	r0, r4
    eb2e:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    eb30:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
    eb32:	f7fc fd3b 	bl	b5ac <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    eb36:	2307      	movs	r3, #7
    eb38:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb3c:	78ec      	ldrb	r4, [r5, #3]
    eb3e:	f04f 0a06 	mov.w	sl, #6
	if (last == count) {
    eb42:	786a      	ldrb	r2, [r5, #1]
    eb44:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    eb46:	3401      	adds	r4, #1
    eb48:	b2e4      	uxtb	r4, r4
		last = 0U;
    eb4a:	42a2      	cmp	r2, r4
    eb4c:	bf08      	it	eq
    eb4e:	2400      	moveq	r4, #0
	if (last == first) {
    eb50:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    eb52:	4640      	mov	r0, r8
    eb54:	d04d      	beq.n	ebf2 <ll_reset+0x1de>
    eb56:	f7fc fcd5 	bl	b504 <mem_acquire>
    eb5a:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    eb5c:	4648      	mov	r0, r9
		if (!link) {
    eb5e:	f1bb 0f00 	cmp.w	fp, #0
    eb62:	d043      	beq.n	ebec <ll_reset+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
    eb64:	f7fc fcce 	bl	b504 <mem_acquire>
		if (!rx) {
    eb68:	2800      	cmp	r0, #0
    eb6a:	f000 809b 	beq.w	eca4 <ll_reset+0x290>
		rx->link = link;
    eb6e:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    eb72:	78ea      	ldrb	r2, [r5, #3]
    eb74:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    eb76:	fb02 5303 	mla	r3, r2, r3, r5
    eb7a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    eb7c:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    eb7e:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb80:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
    eb84:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb86:	fa5f fa8a 	uxtb.w	sl, sl
	mem_link_rx.quota_pdu += delta;
    eb8a:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb8c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    eb90:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb92:	d1d6      	bne.n	eb42 <ll_reset+0x12e>
	while (mem_link_rx.quota_pdu &&
    eb94:	b353      	cbz	r3, ebec <ll_reset+0x1d8>
    eb96:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
    eb98:	f8df 9140 	ldr.w	r9, [pc, #320]	; ecdc <ll_reset+0x2c8>
		rx = mem_acquire(&mem_pdu_rx.free);
    eb9c:	f8df 8138 	ldr.w	r8, [pc, #312]	; ecd8 <ll_reset+0x2c4>
		link->mem = NULL;
    eba0:	2500      	movs	r5, #0
	if (last == count) {
    eba2:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    eba4:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    eba6:	3401      	adds	r4, #1
    eba8:	b2e4      	uxtb	r4, r4
		last = 0U;
    ebaa:	42a2      	cmp	r2, r4
    ebac:	bf08      	it	eq
    ebae:	2400      	moveq	r4, #0
	if (last == first) {
    ebb0:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    ebb2:	4648      	mov	r0, r9
    ebb4:	d01a      	beq.n	ebec <ll_reset+0x1d8>
    ebb6:	f7fc fca5 	bl	b504 <mem_acquire>
    ebba:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    ebbc:	4640      	mov	r0, r8
		if (!link) {
    ebbe:	f1ba 0f00 	cmp.w	sl, #0
    ebc2:	d013      	beq.n	ebec <ll_reset+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
    ebc4:	f7fc fc9e 	bl	b504 <mem_acquire>
		if (!rx) {
    ebc8:	2800      	cmp	r0, #0
    ebca:	d070      	beq.n	ecae <ll_reset+0x29a>
		link->mem = NULL;
    ebcc:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
    ebd0:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ebd4:	78fa      	ldrb	r2, [r7, #3]
    ebd6:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ebd8:	fb02 7303 	mla	r3, r2, r3, r7
    ebdc:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    ebde:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    ebe0:	70fc      	strb	r4, [r7, #3]
    ebe2:	3b01      	subs	r3, #1
    ebe4:	b2db      	uxtb	r3, r3
    ebe6:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    ebe8:	2b00      	cmp	r3, #0
    ebea:	d1da      	bne.n	eba2 <ll_reset+0x18e>
}
    ebec:	b007      	add	sp, #28
    ebee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!max) {
    ebf2:	f1ba 0f00 	cmp.w	sl, #0
    ebf6:	d0f9      	beq.n	ebec <ll_reset+0x1d8>
    ebf8:	7833      	ldrb	r3, [r6, #0]
    ebfa:	e7cb      	b.n	eb94 <ll_reset+0x180>
	LL_ASSERT(!err);
    ebfc:	4a3b      	ldr	r2, [pc, #236]	; (ecec <ll_reset+0x2d8>)
    ebfe:	493c      	ldr	r1, [pc, #240]	; (ecf0 <ll_reset+0x2dc>)
    ec00:	483c      	ldr	r0, [pc, #240]	; (ecf4 <ll_reset+0x2e0>)
    ec02:	f240 237b 	movw	r3, #635	; 0x27b
    ec06:	f014 f8fe 	bl	22e06 <printk>
    ec0a:	4040      	eors	r0, r0
    ec0c:	f380 8811 	msr	BASEPRI, r0
    ec10:	f04f 0003 	mov.w	r0, #3
    ec14:	df02      	svc	2
    ec16:	e734      	b.n	ea82 <ll_reset+0x6e>
		LL_ASSERT(!retval);
    ec18:	4a34      	ldr	r2, [pc, #208]	; (ecec <ll_reset+0x2d8>)
    ec1a:	4937      	ldr	r1, [pc, #220]	; (ecf8 <ll_reset+0x2e4>)
    ec1c:	4835      	ldr	r0, [pc, #212]	; (ecf4 <ll_reset+0x2e0>)
    ec1e:	f240 236e 	movw	r3, #622	; 0x26e
    ec22:	f014 f8f0 	bl	22e06 <printk>
    ec26:	4040      	eors	r0, r0
    ec28:	f380 8811 	msr	BASEPRI, r0
    ec2c:	f04f 0003 	mov.w	r0, #3
    ec30:	df02      	svc	2
    ec32:	e71a      	b.n	ea6a <ll_reset+0x56>
	LL_ASSERT(!err);
    ec34:	4a2d      	ldr	r2, [pc, #180]	; (ecec <ll_reset+0x2d8>)
    ec36:	492e      	ldr	r1, [pc, #184]	; (ecf0 <ll_reset+0x2dc>)
    ec38:	482e      	ldr	r0, [pc, #184]	; (ecf4 <ll_reset+0x2e0>)
    ec3a:	f44f 730f 	mov.w	r3, #572	; 0x23c
    ec3e:	f014 f8e2 	bl	22e06 <printk>
    ec42:	4040      	eors	r0, r0
    ec44:	f380 8811 	msr	BASEPRI, r0
    ec48:	f04f 0003 	mov.w	r0, #3
    ec4c:	df02      	svc	2
    ec4e:	e6ee      	b.n	ea2e <ll_reset+0x1a>
	LL_ASSERT(!err);
    ec50:	4a26      	ldr	r2, [pc, #152]	; (ecec <ll_reset+0x2d8>)
    ec52:	4927      	ldr	r1, [pc, #156]	; (ecf0 <ll_reset+0x2dc>)
    ec54:	4827      	ldr	r0, [pc, #156]	; (ecf4 <ll_reset+0x2e0>)
    ec56:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    ec5a:	f014 f8d4 	bl	22e06 <printk>
    ec5e:	4040      	eors	r0, r0
    ec60:	f380 8811 	msr	BASEPRI, r0
    ec64:	f04f 0003 	mov.w	r0, #3
    ec68:	df02      	svc	2
    ec6a:	e6db      	b.n	ea24 <ll_reset+0x10>
	LL_ASSERT(link);
    ec6c:	4a1f      	ldr	r2, [pc, #124]	; (ecec <ll_reset+0x2d8>)
    ec6e:	4923      	ldr	r1, [pc, #140]	; (ecfc <ll_reset+0x2e8>)
    ec70:	4820      	ldr	r0, [pc, #128]	; (ecf4 <ll_reset+0x2e0>)
    ec72:	f240 636a 	movw	r3, #1642	; 0x66a
    ec76:	f014 f8c6 	bl	22e06 <printk>
    ec7a:	4040      	eors	r0, r0
    ec7c:	f380 8811 	msr	BASEPRI, r0
    ec80:	f04f 0003 	mov.w	r0, #3
    ec84:	df02      	svc	2
    ec86:	e74d      	b.n	eb24 <ll_reset+0x110>
	LL_ASSERT(link);
    ec88:	4a18      	ldr	r2, [pc, #96]	; (ecec <ll_reset+0x2d8>)
    ec8a:	491c      	ldr	r1, [pc, #112]	; (ecfc <ll_reset+0x2e8>)
    ec8c:	4819      	ldr	r0, [pc, #100]	; (ecf4 <ll_reset+0x2e0>)
    ec8e:	f240 6363 	movw	r3, #1635	; 0x663
    ec92:	f014 f8b8 	bl	22e06 <printk>
    ec96:	4040      	eors	r0, r0
    ec98:	f380 8811 	msr	BASEPRI, r0
    ec9c:	f04f 0003 	mov.w	r0, #3
    eca0:	df02      	svc	2
    eca2:	e733      	b.n	eb0c <ll_reset+0xf8>
			mem_release(link, &mem_link_rx.free);
    eca4:	490d      	ldr	r1, [pc, #52]	; (ecdc <ll_reset+0x2c8>)
    eca6:	4658      	mov	r0, fp
    eca8:	f7fc fc42 	bl	b530 <mem_release>
			return;
    ecac:	e79e      	b.n	ebec <ll_reset+0x1d8>
			mem_release(link, &mem_link_rx.free);
    ecae:	490b      	ldr	r1, [pc, #44]	; (ecdc <ll_reset+0x2c8>)
    ecb0:	4650      	mov	r0, sl
    ecb2:	f7fc fc3d 	bl	b530 <mem_release>
			return;
    ecb6:	e799      	b.n	ebec <ll_reset+0x1d8>
    ecb8:	2000058c 	.word	0x2000058c
    ecbc:	20000428 	.word	0x20000428
    ecc0:	20000450 	.word	0x20000450
    ecc4:	2000043c 	.word	0x2000043c
    ecc8:	20000468 	.word	0x20000468
    eccc:	200005b0 	.word	0x200005b0
    ecd0:	20002bd4 	.word	0x20002bd4
    ecd4:	20002c74 	.word	0x20002c74
    ecd8:	20002cf0 	.word	0x20002cf0
    ecdc:	20002c94 	.word	0x20002c94
    ece0:	20002f88 	.word	0x20002f88
    ece4:	20002f80 	.word	0x20002f80
    ece8:	20002c90 	.word	0x20002c90
    ecec:	0002c874 	.word	0x0002c874
    ecf0:	0002c8b0 	.word	0x0002c8b0
    ecf4:	0002c630 	.word	0x0002c630
    ecf8:	0002c8ec 	.word	0x0002c8ec
    ecfc:	0002cb44 	.word	0x0002cb44

0000ed00 <ll_rx_get>:
{
    ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed04:	b085      	sub	sp, #20
    ed06:	e9cd 0100 	strd	r0, r1, [sp]
    ed0a:	4c67      	ldr	r4, [pc, #412]	; (eea8 <ll_rx_get+0x1a8>)
				mem_release(link, &mem_link_rx.free);
    ed0c:	4d67      	ldr	r5, [pc, #412]	; (eeac <ll_rx_get+0x1ac>)
    ed0e:	4e68      	ldr	r6, [pc, #416]	; (eeb0 <ll_rx_get+0x1b0>)
	*node_rx = NULL;
    ed10:	9a00      	ldr	r2, [sp, #0]
    ed12:	2300      	movs	r3, #0
    ed14:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    ed16:	e9d6 0100 	ldrd	r0, r1, [r6]
    ed1a:	aa03      	add	r2, sp, #12
    ed1c:	f7fc fc5c 	bl	b5d8 <memq_peek>
	if (link) {
    ed20:	4680      	mov	r8, r0
    ed22:	2800      	cmp	r0, #0
    ed24:	f000 80b6 	beq.w	ee94 <ll_rx_get+0x194>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ed28:	9b03      	ldr	r3, [sp, #12]
    ed2a:	4962      	ldr	r1, [pc, #392]	; (eeb4 <ll_rx_get+0x1b4>)
    ed2c:	781a      	ldrb	r2, [r3, #0]
    ed2e:	9801      	ldr	r0, [sp, #4]
    ed30:	f7ff faea 	bl	e308 <tx_cmplt_get>
		if (!cmplt) {
    ed34:	4603      	mov	r3, r0
    ed36:	2800      	cmp	r0, #0
    ed38:	f040 80a3 	bne.w	ee82 <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
    ed3c:	78a2      	ldrb	r2, [r4, #2]
    ed3e:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    ed42:	78e2      	ldrb	r2, [r4, #3]
    ed44:	f10d 0109 	add.w	r1, sp, #9
    ed48:	f10d 000a 	add.w	r0, sp, #10
    ed4c:	461f      	mov	r7, r3
    ed4e:	f7ff fadb 	bl	e308 <tx_cmplt_get>
    ed52:	ea47 0200 	orr.w	r2, r7, r0
			} while ((cmplt_prev != 0U) ||
    ed56:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    ed5a:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    ed5c:	d1f1      	bne.n	ed42 <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
    ed5e:	9b03      	ldr	r3, [sp, #12]
    ed60:	7919      	ldrb	r1, [r3, #4]
    ed62:	2901      	cmp	r1, #1
    ed64:	f040 808a 	bne.w	ee7c <ll_rx_get+0x17c>
				(void)memq_dequeue(memq_ll_rx.tail,
    ed68:	4951      	ldr	r1, [pc, #324]	; (eeb0 <ll_rx_get+0x1b0>)
    ed6a:	6870      	ldr	r0, [r6, #4]
    ed6c:	f7fc fc3c 	bl	b5e8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    ed70:	4951      	ldr	r1, [pc, #324]	; (eeb8 <ll_rx_get+0x1b8>)
    ed72:	4640      	mov	r0, r8
    ed74:	f7fc fbdc 	bl	b530 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ed78:	782b      	ldrb	r3, [r5, #0]
    ed7a:	2b06      	cmp	r3, #6
    ed7c:	d86f      	bhi.n	ee5e <ll_rx_get+0x15e>
	mem_link_rx.quota_pdu += delta;
    ed7e:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    ed80:	494e      	ldr	r1, [pc, #312]	; (eebc <ll_rx_get+0x1bc>)
    ed82:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    ed84:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    ed86:	f7fc fbd3 	bl	b530 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ed8a:	782b      	ldrb	r3, [r5, #0]
    ed8c:	2b00      	cmp	r3, #0
    ed8e:	d0bf      	beq.n	ed10 <ll_rx_get+0x10>
    ed90:	f8df 8138 	ldr.w	r8, [pc, #312]	; eecc <ll_rx_get+0x1cc>
	last = last + 1;
    ed94:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    ed98:	f898 2001 	ldrb.w	r2, [r8, #1]
    ed9c:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    eda0:	3701      	adds	r7, #1
    eda2:	b2ff      	uxtb	r7, r7
		last = 0U;
    eda4:	42ba      	cmp	r2, r7
    eda6:	bf08      	it	eq
    eda8:	2700      	moveq	r7, #0
	if (last == first) {
    edaa:	429f      	cmp	r7, r3
    edac:	d0b0      	beq.n	ed10 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
    edae:	4842      	ldr	r0, [pc, #264]	; (eeb8 <ll_rx_get+0x1b8>)
    edb0:	f7fc fba8 	bl	b504 <mem_acquire>
		if (!link) {
    edb4:	4682      	mov	sl, r0
    edb6:	2800      	cmp	r0, #0
    edb8:	d0aa      	beq.n	ed10 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    edba:	4840      	ldr	r0, [pc, #256]	; (eebc <ll_rx_get+0x1bc>)
    edbc:	f7fc fba2 	bl	b504 <mem_acquire>
		if (!rx) {
    edc0:	2800      	cmp	r0, #0
    edc2:	d062      	beq.n	ee8a <ll_rx_get+0x18a>
		rx->link = link;
    edc4:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    edc8:	f898 2003 	ldrb.w	r2, [r8, #3]
    edcc:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    edd0:	fb02 8303 	mla	r3, r2, r3, r8
    edd4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    edd6:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    edd8:	f888 7003 	strb.w	r7, [r8, #3]
    eddc:	3b01      	subs	r3, #1
    edde:	b2db      	uxtb	r3, r3
    ede0:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    ede2:	2b00      	cmp	r3, #0
    ede4:	d094      	beq.n	ed10 <ll_rx_get+0x10>
    ede6:	f8df a0e8 	ldr.w	sl, [pc, #232]	; eed0 <ll_rx_get+0x1d0>
		link = mem_acquire(&mem_link_rx.free);
    edea:	f8df 80cc 	ldr.w	r8, [pc, #204]	; eeb8 <ll_rx_get+0x1b8>
    edee:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    edf2:	f8df b0c8 	ldr.w	fp, [pc, #200]	; eebc <ll_rx_get+0x1bc>
    edf6:	e014      	b.n	ee22 <ll_rx_get+0x122>
		link->mem = NULL;
    edf8:	2300      	movs	r3, #0
    edfa:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
    edfe:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ee02:	f89a 2003 	ldrb.w	r2, [sl, #3]
    ee06:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ee0a:	fb02 a303 	mla	r3, r2, r3, sl
    ee0e:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    ee10:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    ee12:	f88a 7003 	strb.w	r7, [sl, #3]
    ee16:	3b01      	subs	r3, #1
    ee18:	b2db      	uxtb	r3, r3
    ee1a:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    ee1c:	2b00      	cmp	r3, #0
    ee1e:	f43f af77 	beq.w	ed10 <ll_rx_get+0x10>
	if (last == count) {
    ee22:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    ee26:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
    ee2a:	3701      	adds	r7, #1
    ee2c:	b2ff      	uxtb	r7, r7
		last = 0U;
    ee2e:	42ba      	cmp	r2, r7
    ee30:	bf08      	it	eq
    ee32:	2700      	moveq	r7, #0
	if (last == first) {
    ee34:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    ee36:	4640      	mov	r0, r8
    ee38:	f43f af6a 	beq.w	ed10 <ll_rx_get+0x10>
    ee3c:	f7fc fb62 	bl	b504 <mem_acquire>
    ee40:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    ee42:	4658      	mov	r0, fp
		if (!link) {
    ee44:	f1b9 0f00 	cmp.w	r9, #0
    ee48:	f43f af62 	beq.w	ed10 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    ee4c:	f7fc fb5a 	bl	b504 <mem_acquire>
		if (!rx) {
    ee50:	2800      	cmp	r0, #0
    ee52:	d1d1      	bne.n	edf8 <ll_rx_get+0xf8>
			mem_release(link, &mem_link_rx.free);
    ee54:	4918      	ldr	r1, [pc, #96]	; (eeb8 <ll_rx_get+0x1b8>)
    ee56:	4648      	mov	r0, r9
    ee58:	f7fc fb6a 	bl	b530 <mem_release>
			return;
    ee5c:	e758      	b.n	ed10 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ee5e:	4a18      	ldr	r2, [pc, #96]	; (eec0 <ll_rx_get+0x1c0>)
    ee60:	4918      	ldr	r1, [pc, #96]	; (eec4 <ll_rx_get+0x1c4>)
    ee62:	4819      	ldr	r0, [pc, #100]	; (eec8 <ll_rx_get+0x1c8>)
    ee64:	f240 43ac 	movw	r3, #1196	; 0x4ac
    ee68:	f013 ffcd 	bl	22e06 <printk>
    ee6c:	4040      	eors	r0, r0
    ee6e:	f380 8811 	msr	BASEPRI, r0
    ee72:	f04f 0003 	mov.w	r0, #3
    ee76:	df02      	svc	2
    ee78:	782b      	ldrb	r3, [r5, #0]
    ee7a:	e780      	b.n	ed7e <ll_rx_get+0x7e>
			*node_rx = rx;
    ee7c:	9900      	ldr	r1, [sp, #0]
    ee7e:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ee80:	4613      	mov	r3, r2
}
    ee82:	4618      	mov	r0, r3
    ee84:	b005      	add	sp, #20
    ee86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    ee8a:	490b      	ldr	r1, [pc, #44]	; (eeb8 <ll_rx_get+0x1b8>)
    ee8c:	4650      	mov	r0, sl
    ee8e:	f7fc fb4f 	bl	b530 <mem_release>
			return;
    ee92:	e73d      	b.n	ed10 <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    ee94:	78e2      	ldrb	r2, [r4, #3]
    ee96:	4907      	ldr	r1, [pc, #28]	; (eeb4 <ll_rx_get+0x1b4>)
    ee98:	9801      	ldr	r0, [sp, #4]
    ee9a:	f7ff fa35 	bl	e308 <tx_cmplt_get>
    ee9e:	4603      	mov	r3, r0
}
    eea0:	4618      	mov	r0, r3
    eea2:	b005      	add	sp, #20
    eea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eea8:	2000058c 	.word	0x2000058c
    eeac:	20002c90 	.word	0x20002c90
    eeb0:	20002f7c 	.word	0x20002f7c
    eeb4:	2000058e 	.word	0x2000058e
    eeb8:	20002c94 	.word	0x20002c94
    eebc:	20002cf0 	.word	0x20002cf0
    eec0:	0002c874 	.word	0x0002c874
    eec4:	0002c8f4 	.word	0x0002c8f4
    eec8:	0002c630 	.word	0x0002c630
    eecc:	20000450 	.word	0x20000450
    eed0:	2000043c 	.word	0x2000043c

0000eed4 <ll_rx_dequeue>:
{
    eed4:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eed6:	495c      	ldr	r1, [pc, #368]	; (f048 <ll_rx_dequeue+0x174>)
{
    eed8:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    eeda:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eedc:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    eede:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eee0:	aa01      	add	r2, sp, #4
    eee2:	f7fc fb81 	bl	b5e8 <memq_dequeue>
	LL_ASSERT(link);
    eee6:	4604      	mov	r4, r0
    eee8:	2800      	cmp	r0, #0
    eeea:	d061      	beq.n	efb0 <ll_rx_dequeue+0xdc>
	mem_release(link, &mem_link_rx.free);
    eeec:	4957      	ldr	r1, [pc, #348]	; (f04c <ll_rx_dequeue+0x178>)
    eeee:	4620      	mov	r0, r4
    eef0:	f7fc fb1e 	bl	b530 <mem_release>
	switch (rx->type) {
    eef4:	9a01      	ldr	r2, [sp, #4]
    eef6:	7913      	ldrb	r3, [r2, #4]
    eef8:	2b19      	cmp	r3, #25
    eefa:	d80e      	bhi.n	ef1a <ll_rx_dequeue+0x46>
    eefc:	e8df f003 	tbb	[pc, r3]
    ef00:	1c0d0d1c 	.word	0x1c0d0d1c
    ef04:	0d0d0d0d 	.word	0x0d0d0d0d
    ef08:	0d0d0d0d 	.word	0x0d0d0d0d
    ef0c:	0d0d0d0d 	.word	0x0d0d0d0d
    ef10:	2d0d0d0d 	.word	0x2d0d0d0d
    ef14:	1c1c1c1c 	.word	0x1c1c1c1c
    ef18:	1c1c      	.short	0x1c1c
		LL_ASSERT(0);
    ef1a:	4a4d      	ldr	r2, [pc, #308]	; (f050 <ll_rx_dequeue+0x17c>)
    ef1c:	494d      	ldr	r1, [pc, #308]	; (f054 <ll_rx_dequeue+0x180>)
    ef1e:	484e      	ldr	r0, [pc, #312]	; (f058 <ll_rx_dequeue+0x184>)
    ef20:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    ef24:	f013 ff6f 	bl	22e06 <printk>
    ef28:	4040      	eors	r0, r0
    ef2a:	f380 8811 	msr	BASEPRI, r0
    ef2e:	f04f 0003 	mov.w	r0, #3
    ef32:	df02      	svc	2
}
    ef34:	b002      	add	sp, #8
    ef36:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    ef38:	2b00      	cmp	r3, #0
    ef3a:	d1fb      	bne.n	ef34 <ll_rx_dequeue+0x60>
    ef3c:	4a44      	ldr	r2, [pc, #272]	; (f050 <ll_rx_dequeue+0x17c>)
    ef3e:	4947      	ldr	r1, [pc, #284]	; (f05c <ll_rx_dequeue+0x188>)
    ef40:	4845      	ldr	r0, [pc, #276]	; (f058 <ll_rx_dequeue+0x184>)
    ef42:	f44f 736e 	mov.w	r3, #952	; 0x3b8
    ef46:	f013 ff5e 	bl	22e06 <printk>
    ef4a:	4040      	eors	r0, r0
    ef4c:	f380 8811 	msr	BASEPRI, r0
    ef50:	f04f 0003 	mov.w	r0, #3
    ef54:	df02      	svc	2
}
    ef56:	b002      	add	sp, #8
    ef58:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    ef5a:	7f13      	ldrb	r3, [r2, #28]
    ef5c:	2b3c      	cmp	r3, #60	; 0x3c
    ef5e:	d035      	beq.n	efcc <ll_rx_dequeue+0xf8>
    ef60:	7f53      	ldrb	r3, [r2, #29]
    ef62:	b1bb      	cbz	r3, ef94 <ll_rx_dequeue+0xc0>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    ef64:	6893      	ldr	r3, [r2, #8]
    ef66:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    ef68:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ef6a:	b120      	cbz	r0, ef76 <ll_rx_dequeue+0xa2>
					adv->node_rx_cc_free = NULL;
    ef6c:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    ef6e:	493c      	ldr	r1, [pc, #240]	; (f060 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
    ef70:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
    ef72:	f7fc fadd 	bl	b530 <mem_release>
			adv->is_enabled = 0U;
    ef76:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    ef7a:	f36f 0300 	bfc	r3, #0, #1
    ef7e:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
    ef82:	2000      	movs	r0, #0
    ef84:	f000 ff6a 	bl	fe5c <ull_adv_is_enabled>
			if (!bm) {
    ef88:	2800      	cmp	r0, #0
    ef8a:	d1d3      	bne.n	ef34 <ll_rx_dequeue+0x60>
				ull_filter_adv_scan_state_cb(0);
    ef8c:	f005 fed6 	bl	14d3c <ull_filter_adv_scan_state_cb>
}
    ef90:	b002      	add	sp, #8
    ef92:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    ef94:	4a2e      	ldr	r2, [pc, #184]	; (f050 <ll_rx_dequeue+0x17c>)
    ef96:	492f      	ldr	r1, [pc, #188]	; (f054 <ll_rx_dequeue+0x180>)
    ef98:	482f      	ldr	r0, [pc, #188]	; (f058 <ll_rx_dequeue+0x184>)
    ef9a:	f44f 7359 	mov.w	r3, #868	; 0x364
    ef9e:	f013 ff32 	bl	22e06 <printk>
    efa2:	4040      	eors	r0, r0
    efa4:	f380 8811 	msr	BASEPRI, r0
    efa8:	f04f 0003 	mov.w	r0, #3
    efac:	df02      	svc	2
    efae:	e7e8      	b.n	ef82 <ll_rx_dequeue+0xae>
	LL_ASSERT(link);
    efb0:	4a27      	ldr	r2, [pc, #156]	; (f050 <ll_rx_dequeue+0x17c>)
    efb2:	492c      	ldr	r1, [pc, #176]	; (f064 <ll_rx_dequeue+0x190>)
    efb4:	4828      	ldr	r0, [pc, #160]	; (f058 <ll_rx_dequeue+0x184>)
    efb6:	f240 23d2 	movw	r3, #722	; 0x2d2
    efba:	f013 ff24 	bl	22e06 <printk>
    efbe:	4040      	eors	r0, r0
    efc0:	f380 8811 	msr	BASEPRI, r0
    efc4:	f04f 0003 	mov.w	r0, #3
    efc8:	df02      	svc	2
    efca:	e78f      	b.n	eeec <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
    efcc:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
    efce:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    efd0:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
    efd2:	b1ed      	cbz	r5, f010 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
    efd4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
    efd6:	2200      	movs	r2, #0
    efd8:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
    efda:	b163      	cbz	r3, eff6 <ll_rx_dequeue+0x122>
    efdc:	4a1c      	ldr	r2, [pc, #112]	; (f050 <ll_rx_dequeue+0x17c>)
    efde:	4922      	ldr	r1, [pc, #136]	; (f068 <ll_rx_dequeue+0x194>)
    efe0:	481d      	ldr	r0, [pc, #116]	; (f058 <ll_rx_dequeue+0x184>)
    efe2:	f44f 734f 	mov.w	r3, #828	; 0x33c
    efe6:	f013 ff0e 	bl	22e06 <printk>
    efea:	4040      	eors	r0, r0
    efec:	f380 8811 	msr	BASEPRI, r0
    eff0:	f04f 0003 	mov.w	r0, #3
    eff4:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    eff6:	f105 0150 	add.w	r1, r5, #80	; 0x50
    effa:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    effe:	f7fc fad9 	bl	b5b4 <memq_deinit>
				LL_ASSERT(link);
    f002:	4606      	mov	r6, r0
    f004:	b190      	cbz	r0, f02c <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
    f006:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    f008:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
    f00a:	f001 fcd7 	bl	109bc <ll_conn_release>
    f00e:	e7b2      	b.n	ef76 <ll_rx_dequeue+0xa2>
				LL_ASSERT(conn_lll);
    f010:	4a0f      	ldr	r2, [pc, #60]	; (f050 <ll_rx_dequeue+0x17c>)
    f012:	4916      	ldr	r1, [pc, #88]	; (f06c <ll_rx_dequeue+0x198>)
    f014:	4810      	ldr	r0, [pc, #64]	; (f058 <ll_rx_dequeue+0x184>)
    f016:	f240 3339 	movw	r3, #825	; 0x339
    f01a:	f013 fef4 	bl	22e06 <printk>
    f01e:	4040      	eors	r0, r0
    f020:	f380 8811 	msr	BASEPRI, r0
    f024:	f04f 0003 	mov.w	r0, #3
    f028:	df02      	svc	2
    f02a:	e7d3      	b.n	efd4 <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
    f02c:	4a08      	ldr	r2, [pc, #32]	; (f050 <ll_rx_dequeue+0x17c>)
    f02e:	490d      	ldr	r1, [pc, #52]	; (f064 <ll_rx_dequeue+0x190>)
    f030:	4809      	ldr	r0, [pc, #36]	; (f058 <ll_rx_dequeue+0x184>)
    f032:	f240 333f 	movw	r3, #831	; 0x33f
    f036:	f013 fee6 	bl	22e06 <printk>
    f03a:	4040      	eors	r0, r0
    f03c:	f380 8811 	msr	BASEPRI, r0
    f040:	f04f 0003 	mov.w	r0, #3
    f044:	df02      	svc	2
    f046:	e7de      	b.n	f006 <ll_rx_dequeue+0x132>
    f048:	20002f7c 	.word	0x20002f7c
    f04c:	20002c94 	.word	0x20002c94
    f050:	0002c874 	.word	0x0002c874
    f054:	0002c6a0 	.word	0x0002c6a0
    f058:	0002c630 	.word	0x0002c630
    f05c:	0002c94c 	.word	0x0002c94c
    f060:	20002cf0 	.word	0x20002cf0
    f064:	0002cb44 	.word	0x0002cb44
    f068:	0002c934 	.word	0x0002c934
    f06c:	0002c928 	.word	0x0002c928

0000f070 <ll_rx_mem_release>:
{
    f070:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
    f074:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    f076:	4e88      	ldr	r6, [pc, #544]	; (f298 <__kernel_ram_size+0x10>)
{
    f078:	4681      	mov	r9, r0
	while (rx) {
    f07a:	b33c      	cbz	r4, f0cc <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    f07c:	f8df 8244 	ldr.w	r8, [pc, #580]	; f2c4 <__kernel_ram_size+0x3c>
    f080:	f8df a244 	ldr.w	sl, [pc, #580]	; f2c8 <__kernel_ram_size+0x40>
    f084:	4f85      	ldr	r7, [pc, #532]	; (f29c <__kernel_ram_size+0x14>)
		rx = rx->next;
    f086:	4625      	mov	r5, r4
    f088:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    f08a:	792b      	ldrb	r3, [r5, #4]
    f08c:	2b19      	cmp	r3, #25
    f08e:	d80e      	bhi.n	f0ae <ll_rx_mem_release+0x3e>
    f090:	e8df f003 	tbb	[pc, r3]
    f094:	930d0d93 	.word	0x930d0d93
    f098:	0d0d0d0d 	.word	0x0d0d0d0d
    f09c:	0d0d0d0d 	.word	0x0d0d0d0d
    f0a0:	0d0d0d0d 	.word	0x0d0d0d0d
    f0a4:	810d0d0d 	.word	0x810d0d0d
    f0a8:	939393ae 	.word	0x939393ae
    f0ac:	9393      	.short	0x9393
			LL_ASSERT(0);
    f0ae:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
    f0b2:	4642      	mov	r2, r8
    f0b4:	4651      	mov	r1, sl
    f0b6:	4638      	mov	r0, r7
    f0b8:	f013 fea5 	bl	22e06 <printk>
    f0bc:	4040      	eors	r0, r0
    f0be:	f380 8811 	msr	BASEPRI, r0
    f0c2:	f04f 0003 	mov.w	r0, #3
    f0c6:	df02      	svc	2
	while (rx) {
    f0c8:	2c00      	cmp	r4, #0
    f0ca:	d1dc      	bne.n	f086 <ll_rx_mem_release+0x16>
	*node_rx = rx;
    f0cc:	2300      	movs	r3, #0
    f0ce:	f8c9 3000 	str.w	r3, [r9]
	if (max > mem_link_rx.quota_pdu) {
    f0d2:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f0d4:	1e5f      	subs	r7, r3, #1
    f0d6:	b2ff      	uxtb	r7, r7
    f0d8:	2b00      	cmp	r3, #0
    f0da:	d05a      	beq.n	f192 <ll_rx_mem_release+0x122>
    f0dc:	4d70      	ldr	r5, [pc, #448]	; (f2a0 <__kernel_ram_size+0x18>)
		link = mem_acquire(&mem_link_rx.free);
    f0de:	f8df 81c8 	ldr.w	r8, [pc, #456]	; f2a8 <__kernel_ram_size+0x20>
    f0e2:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    f0e4:	f8df 91cc 	ldr.w	r9, [pc, #460]	; f2b4 <__kernel_ram_size+0x2c>
	if (last == count) {
    f0e8:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f0ea:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    f0ec:	3401      	adds	r4, #1
    f0ee:	b2e4      	uxtb	r4, r4
		last = 0U;
    f0f0:	42a2      	cmp	r2, r4
    f0f2:	bf08      	it	eq
    f0f4:	2400      	moveq	r4, #0
	if (last == first) {
    f0f6:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    f0f8:	4640      	mov	r0, r8
    f0fa:	f000 80ac 	beq.w	f256 <ll_rx_mem_release+0x1e6>
    f0fe:	f7fc fa01 	bl	b504 <mem_acquire>
    f102:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    f104:	4648      	mov	r0, r9
		if (!link) {
    f106:	f1ba 0f00 	cmp.w	sl, #0
    f10a:	d042      	beq.n	f192 <ll_rx_mem_release+0x122>
		rx = mem_acquire(&mem_pdu_rx.free);
    f10c:	f7fc f9fa 	bl	b504 <mem_acquire>
		if (!rx) {
    f110:	2800      	cmp	r0, #0
    f112:	f000 80ba 	beq.w	f28a <__kernel_ram_size+0x2>
		rx->link = link;
    f116:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    f11a:	78ea      	ldrb	r2, [r5, #3]
    f11c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    f11e:	fb02 5303 	mla	r3, r2, r3, r5
    f122:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    f124:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    f126:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f128:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
    f12a:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f12c:	b2ff      	uxtb	r7, r7
	mem_link_rx.quota_pdu += delta;
    f12e:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f130:	2fff      	cmp	r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    f132:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f134:	d1d8      	bne.n	f0e8 <ll_rx_mem_release+0x78>
	while (mem_link_rx.quota_pdu &&
    f136:	b363      	cbz	r3, f192 <ll_rx_mem_release+0x122>
    f138:	4d5a      	ldr	r5, [pc, #360]	; (f2a4 <__kernel_ram_size+0x1c>)
		link = mem_acquire(&mem_link_rx.free);
    f13a:	4f5b      	ldr	r7, [pc, #364]	; (f2a8 <__kernel_ram_size+0x20>)
    f13c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    f13e:	f8df 8174 	ldr.w	r8, [pc, #372]	; f2b4 <__kernel_ram_size+0x2c>
		link->mem = NULL;
    f142:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    f146:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    f148:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    f14a:	3401      	adds	r4, #1
    f14c:	b2e4      	uxtb	r4, r4
		last = 0U;
    f14e:	42a2      	cmp	r2, r4
    f150:	bf08      	it	eq
    f152:	2400      	moveq	r4, #0
	if (last == first) {
    f154:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    f156:	4638      	mov	r0, r7
    f158:	d01b      	beq.n	f192 <ll_rx_mem_release+0x122>
    f15a:	f7fc f9d3 	bl	b504 <mem_acquire>
    f15e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    f160:	4640      	mov	r0, r8
		if (!link) {
    f162:	f1ba 0f00 	cmp.w	sl, #0
    f166:	d014      	beq.n	f192 <ll_rx_mem_release+0x122>
		rx = mem_acquire(&mem_pdu_rx.free);
    f168:	f7fc f9cc 	bl	b504 <mem_acquire>
		if (!rx) {
    f16c:	2800      	cmp	r0, #0
    f16e:	f000 808c 	beq.w	f28a <__kernel_ram_size+0x2>
		link->mem = NULL;
    f172:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    f176:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    f17a:	78ea      	ldrb	r2, [r5, #3]
    f17c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    f17e:	fb02 5303 	mla	r3, r2, r3, r5
    f182:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    f184:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    f186:	70ec      	strb	r4, [r5, #3]
    f188:	3b01      	subs	r3, #1
    f18a:	b2db      	uxtb	r3, r3
    f18c:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    f18e:	2b00      	cmp	r3, #0
    f190:	d1d9      	bne.n	f146 <ll_rx_mem_release+0xd6>
}
    f192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    f196:	7f2b      	ldrb	r3, [r5, #28]
    f198:	2b3c      	cmp	r3, #60	; 0x3c
    f19a:	d060      	beq.n	f25e <ll_rx_mem_release+0x1ee>
				LL_ASSERT(!cc->status);
    f19c:	b1db      	cbz	r3, f1d6 <ll_rx_mem_release+0x166>
    f19e:	4943      	ldr	r1, [pc, #268]	; (f2ac <__kernel_ram_size+0x24>)
    f1a0:	f240 4326 	movw	r3, #1062	; 0x426
    f1a4:	4642      	mov	r2, r8
    f1a6:	4638      	mov	r0, r7
    f1a8:	f013 fe2d 	bl	22e06 <printk>
    f1ac:	4040      	eors	r0, r0
    f1ae:	f380 8811 	msr	BASEPRI, r0
    f1b2:	f04f 0003 	mov.w	r0, #3
    f1b6:	df02      	svc	2
    f1b8:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    f1ba:	b963      	cbnz	r3, f1d6 <ll_rx_mem_release+0x166>
    f1bc:	493c      	ldr	r1, [pc, #240]	; (f2b0 <__kernel_ram_size+0x28>)
    f1be:	f240 436c 	movw	r3, #1132	; 0x46c
    f1c2:	4642      	mov	r2, r8
    f1c4:	4638      	mov	r0, r7
    f1c6:	f013 fe1e 	bl	22e06 <printk>
    f1ca:	4040      	eors	r0, r0
    f1cc:	f380 8811 	msr	BASEPRI, r0
    f1d0:	f04f 0003 	mov.w	r0, #3
    f1d4:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    f1d6:	7833      	ldrb	r3, [r6, #0]
    f1d8:	2b06      	cmp	r3, #6
    f1da:	d82d      	bhi.n	f238 <ll_rx_mem_release+0x1c8>
	mem_link_rx.quota_pdu += delta;
    f1dc:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    f1de:	4935      	ldr	r1, [pc, #212]	; (f2b4 <__kernel_ram_size+0x2c>)
	mem_link_rx.quota_pdu += delta;
    f1e0:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    f1e2:	4628      	mov	r0, r5
    f1e4:	f7fc f9a4 	bl	b530 <mem_release>
	while (rx) {
    f1e8:	2c00      	cmp	r4, #0
    f1ea:	f47f af4c 	bne.w	f086 <ll_rx_mem_release+0x16>
    f1ee:	e76d      	b.n	f0cc <ll_rx_mem_release+0x5c>
			conn = ll_conn_get(rx_free->handle);
    f1f0:	88e8      	ldrh	r0, [r5, #6]
    f1f2:	f001 fbf1 	bl	109d8 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    f1f6:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
    f1f8:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    f1fa:	b163      	cbz	r3, f216 <ll_rx_mem_release+0x1a6>
    f1fc:	492e      	ldr	r1, [pc, #184]	; (f2b8 <__kernel_ram_size+0x30>)
    f1fe:	f240 4393 	movw	r3, #1171	; 0x493
    f202:	4642      	mov	r2, r8
    f204:	4638      	mov	r0, r7
    f206:	f013 fdfe 	bl	22e06 <printk>
    f20a:	4040      	eors	r0, r0
    f20c:	f380 8811 	msr	BASEPRI, r0
    f210:	f04f 0003 	mov.w	r0, #3
    f214:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    f216:	f105 016c 	add.w	r1, r5, #108	; 0x6c
    f21a:	f105 0068 	add.w	r0, r5, #104	; 0x68
    f21e:	f7fc f9c9 	bl	b5b4 <memq_deinit>
			LL_ASSERT(link);
    f222:	4683      	mov	fp, r0
    f224:	b318      	cbz	r0, f26e <ll_rx_mem_release+0x1fe>
			conn->lll.link_tx_free = link;
    f226:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
    f22a:	4628      	mov	r0, r5
    f22c:	f001 fbc6 	bl	109bc <ll_conn_release>
	while (rx) {
    f230:	2c00      	cmp	r4, #0
    f232:	f47f af28 	bne.w	f086 <ll_rx_mem_release+0x16>
    f236:	e749      	b.n	f0cc <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    f238:	4920      	ldr	r1, [pc, #128]	; (f2bc <__kernel_ram_size+0x34>)
    f23a:	f240 43ac 	movw	r3, #1196	; 0x4ac
    f23e:	4642      	mov	r2, r8
    f240:	4638      	mov	r0, r7
    f242:	f013 fde0 	bl	22e06 <printk>
    f246:	4040      	eors	r0, r0
    f248:	f380 8811 	msr	BASEPRI, r0
    f24c:	f04f 0003 	mov.w	r0, #3
    f250:	df02      	svc	2
    f252:	7833      	ldrb	r3, [r6, #0]
    f254:	e7c2      	b.n	f1dc <ll_rx_mem_release+0x16c>
	if (!max) {
    f256:	2f00      	cmp	r7, #0
    f258:	d09b      	beq.n	f192 <ll_rx_mem_release+0x122>
    f25a:	7833      	ldrb	r3, [r6, #0]
    f25c:	e76b      	b.n	f136 <ll_rx_mem_release+0xc6>
				mem_release(rx_free, &mem_pdu_rx.free);
    f25e:	4915      	ldr	r1, [pc, #84]	; (f2b4 <__kernel_ram_size+0x2c>)
    f260:	4628      	mov	r0, r5
    f262:	f7fc f965 	bl	b530 <mem_release>
	while (rx) {
    f266:	2c00      	cmp	r4, #0
    f268:	f47f af0d 	bne.w	f086 <ll_rx_mem_release+0x16>
    f26c:	e72e      	b.n	f0cc <ll_rx_mem_release+0x5c>
			LL_ASSERT(link);
    f26e:	4914      	ldr	r1, [pc, #80]	; (f2c0 <__kernel_ram_size+0x38>)
    f270:	f240 4396 	movw	r3, #1174	; 0x496
    f274:	4642      	mov	r2, r8
    f276:	4638      	mov	r0, r7
    f278:	f013 fdc5 	bl	22e06 <printk>
    f27c:	4040      	eors	r0, r0
    f27e:	f380 8811 	msr	BASEPRI, r0
    f282:	f04f 0003 	mov.w	r0, #3
    f286:	df02      	svc	2
    f288:	e7cd      	b.n	f226 <ll_rx_mem_release+0x1b6>
			mem_release(link, &mem_link_rx.free);
    f28a:	4650      	mov	r0, sl
    f28c:	4906      	ldr	r1, [pc, #24]	; (f2a8 <__kernel_ram_size+0x20>)
}
    f28e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
    f292:	f7fc b94d 	b.w	b530 <mem_release>
    f296:	bf00      	nop
    f298:	20002c90 	.word	0x20002c90
    f29c:	0002c630 	.word	0x0002c630
    f2a0:	20000450 	.word	0x20000450
    f2a4:	2000043c 	.word	0x2000043c
    f2a8:	20002c94 	.word	0x20002c94
    f2ac:	0002c96c 	.word	0x0002c96c
    f2b0:	0002c978 	.word	0x0002c978
    f2b4:	20002cf0 	.word	0x20002cf0
    f2b8:	0002c99c 	.word	0x0002c99c
    f2bc:	0002c8f4 	.word	0x0002c8f4
    f2c0:	0002cb44 	.word	0x0002cb44
    f2c4:	0002c874 	.word	0x0002c874
    f2c8:	0002c6a0 	.word	0x0002c6a0

0000f2cc <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    f2cc:	4801      	ldr	r0, [pc, #4]	; (f2d4 <ll_rx_link_alloc+0x8>)
    f2ce:	f7fc b919 	b.w	b504 <mem_acquire>
    f2d2:	bf00      	nop
    f2d4:	20002c94 	.word	0x20002c94

0000f2d8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    f2d8:	4901      	ldr	r1, [pc, #4]	; (f2e0 <ll_rx_link_release+0x8>)
    f2da:	f7fc b929 	b.w	b530 <mem_release>
    f2de:	bf00      	nop
    f2e0:	20002c94 	.word	0x20002c94

0000f2e4 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    f2e4:	4801      	ldr	r0, [pc, #4]	; (f2ec <ll_rx_alloc+0x8>)
    f2e6:	f7fc b90d 	b.w	b504 <mem_acquire>
    f2ea:	bf00      	nop
    f2ec:	20002cf0 	.word	0x20002cf0

0000f2f0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    f2f0:	4901      	ldr	r1, [pc, #4]	; (f2f8 <ll_rx_release+0x8>)
    f2f2:	f7fc b91d 	b.w	b530 <mem_release>
    f2f6:	bf00      	nop
    f2f8:	20002cf0 	.word	0x20002cf0

0000f2fc <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f2fc:	4b02      	ldr	r3, [pc, #8]	; (f308 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f2fe:	4a03      	ldr	r2, [pc, #12]	; (f30c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f300:	78db      	ldrb	r3, [r3, #3]
    f302:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f304:	f7fc b960 	b.w	b5c8 <memq_enqueue>
    f308:	2000058c 	.word	0x2000058c
    f30c:	20002f80 	.word	0x20002f80

0000f310 <ll_rx_sched>:
	k_sem_give(sem_recv);
    f310:	4b01      	ldr	r3, [pc, #4]	; (f318 <ll_rx_sched+0x8>)
    f312:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    f314:	f010 bee2 	b.w	200dc <z_impl_k_sem_give>
    f318:	20002f8c 	.word	0x20002f8c

0000f31c <ll_pdu_rx_alloc_peek>:
{
    f31c:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f31e:	4b0d      	ldr	r3, [pc, #52]	; (f354 <ll_pdu_rx_alloc_peek+0x38>)
    f320:	789a      	ldrb	r2, [r3, #2]
    f322:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    f324:	42a2      	cmp	r2, r4
    f326:	d809      	bhi.n	f33c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    f328:	1aa1      	subs	r1, r4, r2
    f32a:	b2c9      	uxtb	r1, r1
    f32c:	4288      	cmp	r0, r1
    f32e:	d802      	bhi.n	f336 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    f330:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f332:	7819      	ldrb	r1, [r3, #0]
    f334:	d109      	bne.n	f34a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f336:	2000      	movs	r0, #0
}
    f338:	bc10      	pop	{r4}
    f33a:	4770      	bx	lr
		return count - first + last;
    f33c:	7859      	ldrb	r1, [r3, #1]
    f33e:	1a89      	subs	r1, r1, r2
    f340:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f342:	b2c9      	uxtb	r1, r1
    f344:	4288      	cmp	r0, r1
    f346:	d8f6      	bhi.n	f336 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f348:	7819      	ldrb	r1, [r3, #0]
}
    f34a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    f34c:	fb02 3301 	mla	r3, r2, r1, r3
    f350:	6858      	ldr	r0, [r3, #4]
    f352:	4770      	bx	lr
    f354:	2000043c 	.word	0x2000043c

0000f358 <ll_pdu_rx_alloc>:
{
    f358:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f35a:	4b0a      	ldr	r3, [pc, #40]	; (f384 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    f35c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f35e:	78da      	ldrb	r2, [r3, #3]
    f360:	7818      	ldrb	r0, [r3, #0]
    f362:	785c      	ldrb	r4, [r3, #1]
    f364:	428a      	cmp	r2, r1
    f366:	d00a      	beq.n	f37e <ll_pdu_rx_alloc+0x26>
	_first += 1U;
    f368:	1c4a      	adds	r2, r1, #1
    f36a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f36c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f370:	4294      	cmp	r4, r2
    f372:	bf08      	it	eq
    f374:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f376:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f378:	709a      	strb	r2, [r3, #2]
}
    f37a:	bc10      	pop	{r4}
    f37c:	4770      	bx	lr
		return NULL;
    f37e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f380:	e7fb      	b.n	f37a <ll_pdu_rx_alloc+0x22>
    f382:	bf00      	nop
    f384:	2000043c 	.word	0x2000043c

0000f388 <ll_tx_ack_put>:
{
    f388:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    f38a:	4a13      	ldr	r2, [pc, #76]	; (f3d8 <ll_tx_ack_put+0x50>)
    f38c:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    f38e:	7855      	ldrb	r5, [r2, #1]
    f390:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    f392:	1c73      	adds	r3, r6, #1
    f394:	b2db      	uxtb	r3, r3
		last = 0U;
    f396:	429d      	cmp	r5, r3
    f398:	bf08      	it	eq
    f39a:	2300      	moveq	r3, #0
	if (last == first) {
    f39c:	429c      	cmp	r4, r3
    f39e:	d00a      	beq.n	f3b6 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f3a0:	4615      	mov	r5, r2
    f3a2:	f815 4b04 	ldrb.w	r4, [r5], #4
    f3a6:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    f3aa:	192e      	adds	r6, r5, r4
    f3ac:	d003      	beq.n	f3b6 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
    f3ae:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
    f3b0:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
    f3b2:	70d3      	strb	r3, [r2, #3]
}
    f3b4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
    f3b6:	4a09      	ldr	r2, [pc, #36]	; (f3dc <ll_tx_ack_put+0x54>)
    f3b8:	4909      	ldr	r1, [pc, #36]	; (f3e0 <ll_tx_ack_put+0x58>)
    f3ba:	480a      	ldr	r0, [pc, #40]	; (f3e4 <ll_tx_ack_put+0x5c>)
    f3bc:	f240 43f4 	movw	r3, #1268	; 0x4f4
    f3c0:	f013 fd21 	bl	22e06 <printk>
    f3c4:	4040      	eors	r0, r0
    f3c6:	f380 8811 	msr	BASEPRI, r0
    f3ca:	f04f 0003 	mov.w	r0, #3
    f3ce:	df02      	svc	2
	tx->handle = handle;
    f3d0:	2300      	movs	r3, #0
    f3d2:	801b      	strh	r3, [r3, #0]
    f3d4:	deff      	udf	#255	; 0xff
    f3d6:	bf00      	nop
    f3d8:	2000058c 	.word	0x2000058c
    f3dc:	0002c874 	.word	0x0002c874
    f3e0:	0002cb38 	.word	0x0002cb38
    f3e4:	0002c630 	.word	0x0002c630

0000f3e8 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3e8:	f030 0302 	bics.w	r3, r0, #2
{
    f3ec:	b510      	push	{r4, lr}
    f3ee:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3f0:	d002      	beq.n	f3f8 <ull_ticker_status_take+0x10>
    f3f2:	680b      	ldr	r3, [r1, #0]
    f3f4:	2b02      	cmp	r3, #2
    f3f6:	d008      	beq.n	f40a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    f3f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f400:	4809      	ldr	r0, [pc, #36]	; (f428 <ull_ticker_status_take+0x40>)
    f402:	f010 fe91 	bl	20128 <z_impl_k_sem_take>
	return *ret_cb;
    f406:	6820      	ldr	r0, [r4, #0]
}
    f408:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f40a:	4a08      	ldr	r2, [pc, #32]	; (f42c <ull_ticker_status_take+0x44>)
    f40c:	4908      	ldr	r1, [pc, #32]	; (f430 <ull_ticker_status_take+0x48>)
    f40e:	4809      	ldr	r0, [pc, #36]	; (f434 <ull_ticker_status_take+0x4c>)
    f410:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    f414:	f013 fcf7 	bl	22e06 <printk>
    f418:	4040      	eors	r0, r0
    f41a:	f380 8811 	msr	BASEPRI, r0
    f41e:	f04f 0003 	mov.w	r0, #3
    f422:	df02      	svc	2
    f424:	e7e8      	b.n	f3f8 <ull_ticker_status_take+0x10>
    f426:	bf00      	nop
    f428:	20002f90 	.word	0x20002f90
    f42c:	0002c874 	.word	0x0002c874
    f430:	0002c9b4 	.word	0x0002c9b4
    f434:	0002c630 	.word	0x0002c630

0000f438 <ull_disable_mark>:
	if (!*m) {
    f438:	4a04      	ldr	r2, [pc, #16]	; (f44c <ull_disable_mark+0x14>)
    f43a:	6813      	ldr	r3, [r2, #0]
    f43c:	b10b      	cbz	r3, f442 <ull_disable_mark+0xa>
}
    f43e:	4618      	mov	r0, r3
    f440:	4770      	bx	lr
		*m = param;
    f442:	4603      	mov	r3, r0
    f444:	6010      	str	r0, [r2, #0]
}
    f446:	4618      	mov	r0, r3
    f448:	4770      	bx	lr
    f44a:	bf00      	nop
    f44c:	20002bcc 	.word	0x20002bcc

0000f450 <ull_disable_unmark>:
	if (*m && *m == param) {
    f450:	4a04      	ldr	r2, [pc, #16]	; (f464 <ull_disable_unmark+0x14>)
    f452:	6813      	ldr	r3, [r2, #0]
    f454:	b123      	cbz	r3, f460 <ull_disable_unmark+0x10>
    f456:	4298      	cmp	r0, r3
		*m = NULL;
    f458:	bf06      	itte	eq
    f45a:	2100      	moveq	r1, #0
    f45c:	6011      	streq	r1, [r2, #0]
	return NULL;
    f45e:	2300      	movne	r3, #0
}
    f460:	4618      	mov	r0, r3
    f462:	4770      	bx	lr
    f464:	20002bcc 	.word	0x20002bcc

0000f468 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    f468:	4b01      	ldr	r3, [pc, #4]	; (f470 <ull_disable_mark_get+0x8>)
}
    f46a:	6818      	ldr	r0, [r3, #0]
    f46c:	4770      	bx	lr
    f46e:	bf00      	nop
    f470:	20002bcc 	.word	0x20002bcc

0000f474 <ull_update_mark>:
	if (!*m) {
    f474:	4a04      	ldr	r2, [pc, #16]	; (f488 <ull_update_mark+0x14>)
    f476:	6813      	ldr	r3, [r2, #0]
    f478:	b10b      	cbz	r3, f47e <ull_update_mark+0xa>
}
    f47a:	4618      	mov	r0, r3
    f47c:	4770      	bx	lr
		*m = param;
    f47e:	4603      	mov	r3, r0
    f480:	6010      	str	r0, [r2, #0]
}
    f482:	4618      	mov	r0, r3
    f484:	4770      	bx	lr
    f486:	bf00      	nop
    f488:	20002bd0 	.word	0x20002bd0

0000f48c <ull_update_unmark>:
	if (*m && *m == param) {
    f48c:	4a04      	ldr	r2, [pc, #16]	; (f4a0 <ull_update_unmark+0x14>)
    f48e:	6813      	ldr	r3, [r2, #0]
    f490:	b123      	cbz	r3, f49c <ull_update_unmark+0x10>
    f492:	4298      	cmp	r0, r3
		*m = NULL;
    f494:	bf06      	itte	eq
    f496:	2100      	moveq	r1, #0
    f498:	6011      	streq	r1, [r2, #0]
	return NULL;
    f49a:	2300      	movne	r3, #0
}
    f49c:	4618      	mov	r0, r3
    f49e:	4770      	bx	lr
    f4a0:	20002bd0 	.word	0x20002bd0

0000f4a4 <ull_update_mark_get>:
	return mark_get(mark_update);
    f4a4:	4b01      	ldr	r3, [pc, #4]	; (f4ac <ull_update_mark_get+0x8>)
}
    f4a6:	6818      	ldr	r0, [r3, #0]
    f4a8:	4770      	bx	lr
    f4aa:	bf00      	nop
    f4ac:	20002bd0 	.word	0x20002bd0

0000f4b0 <ull_disable>:
{
    f4b0:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    f4b2:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    f4b4:	f115 0f10 	cmn.w	r5, #16
{
    f4b8:	b087      	sub	sp, #28
	if (!hdr) {
    f4ba:	d00b      	beq.n	f4d4 <ull_disable+0x24>
	compiler_barrier();
    f4bc:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    f4be:	2201      	movs	r2, #1
    f4c0:	4668      	mov	r0, sp
    f4c2:	2100      	movs	r1, #0
    f4c4:	f01b feb4 	bl	2b230 <z_impl_k_sem_init>
    f4c8:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
    f4ca:	4a13      	ldr	r2, [pc, #76]	; (f518 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    f4cc:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    f4d0:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    f4d2:	b913      	cbnz	r3, f4da <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
    f4d4:	2000      	movs	r0, #0
}
    f4d6:	b007      	add	sp, #28
    f4d8:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
    f4da:	4b10      	ldr	r3, [pc, #64]	; (f51c <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f4dc:	2200      	movs	r2, #0
    f4de:	4611      	mov	r1, r2
    f4e0:	2003      	movs	r0, #3
	mfy.param = lll;
    f4e2:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f4e4:	f7fc f8e4 	bl	b6b0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f4e8:	b940      	cbnz	r0, f4fc <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    f4ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f4ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f4f2:	4668      	mov	r0, sp
    f4f4:	f010 fe18 	bl	20128 <z_impl_k_sem_take>
}
    f4f8:	b007      	add	sp, #28
    f4fa:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    f4fc:	4a08      	ldr	r2, [pc, #32]	; (f520 <ull_disable+0x70>)
    f4fe:	4909      	ldr	r1, [pc, #36]	; (f524 <ull_disable+0x74>)
    f500:	4809      	ldr	r0, [pc, #36]	; (f528 <ull_disable+0x78>)
    f502:	f240 539a 	movw	r3, #1434	; 0x59a
    f506:	f013 fc7e 	bl	22e06 <printk>
    f50a:	4040      	eors	r0, r0
    f50c:	f380 8811 	msr	BASEPRI, r0
    f510:	f04f 0003 	mov.w	r0, #3
    f514:	df02      	svc	2
    f516:	e7e8      	b.n	f4ea <ull_disable+0x3a>
    f518:	0000e305 	.word	0x0000e305
    f51c:	200005c0 	.word	0x200005c0
    f520:	0002c874 	.word	0x0002c874
    f524:	0002c8bc 	.word	0x0002c8bc
    f528:	0002c630 	.word	0x0002c630

0000f52c <ull_ticker_stop_with_mark>:
{
    f52c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    f52e:	4d1d      	ldr	r5, [pc, #116]	; (f5a4 <ull_ticker_stop_with_mark+0x78>)
    f530:	682b      	ldr	r3, [r5, #0]
{
    f532:	b085      	sub	sp, #20
    f534:	460c      	mov	r4, r1
    f536:	4616      	mov	r6, r2
	if (!*m) {
    f538:	b323      	cbz	r3, f584 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    f53a:	4299      	cmp	r1, r3
    f53c:	d112      	bne.n	f564 <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f53e:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    f540:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f542:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    f544:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f546:	4b18      	ldr	r3, [pc, #96]	; (f5a8 <ull_ticker_stop_with_mark+0x7c>)
    f548:	9700      	str	r7, [sp, #0]
    f54a:	2103      	movs	r1, #3
    f54c:	2000      	movs	r0, #0
    f54e:	f7fd fb8d 	bl	cc6c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    f552:	4639      	mov	r1, r7
    f554:	f7ff ff48 	bl	f3e8 <ull_ticker_status_take>
	if (ret) {
    f558:	b140      	cbz	r0, f56c <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    f55a:	682b      	ldr	r3, [r5, #0]
    f55c:	b10b      	cbz	r3, f562 <ull_ticker_stop_with_mark+0x36>
    f55e:	429c      	cmp	r4, r3
    f560:	d012      	beq.n	f588 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    f562:	b1cc      	cbz	r4, f598 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    f564:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    f568:	b005      	add	sp, #20
    f56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    f56c:	4630      	mov	r0, r6
    f56e:	f7ff ff9f 	bl	f4b0 <ull_disable>
	if (ret) {
    f572:	b9a0      	cbnz	r0, f59e <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    f574:	682b      	ldr	r3, [r5, #0]
    f576:	b10b      	cbz	r3, f57c <ull_ticker_stop_with_mark+0x50>
    f578:	429c      	cmp	r4, r3
    f57a:	d00b      	beq.n	f594 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    f57c:	2c00      	cmp	r4, #0
    f57e:	d1f1      	bne.n	f564 <ull_ticker_stop_with_mark+0x38>
}
    f580:	b005      	add	sp, #20
    f582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    f584:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    f586:	e7da      	b.n	f53e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    f588:	2300      	movs	r3, #0
		return -EALREADY;
    f58a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    f58e:	602b      	str	r3, [r5, #0]
}
    f590:	b005      	add	sp, #20
    f592:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    f594:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    f596:	e7e7      	b.n	f568 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    f598:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f59c:	e7e4      	b.n	f568 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    f59e:	f06f 000f 	mvn.w	r0, #15
    f5a2:	e7e1      	b.n	f568 <ull_ticker_stop_with_mark+0x3c>
    f5a4:	20002bcc 	.word	0x20002bcc
    f5a8:	0000e2f9 	.word	0x0000e2f9

0000f5ac <ull_pdu_rx_alloc_peek>:
{
    f5ac:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f5ae:	4b0d      	ldr	r3, [pc, #52]	; (f5e4 <ull_pdu_rx_alloc_peek+0x38>)
    f5b0:	789a      	ldrb	r2, [r3, #2]
    f5b2:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    f5b4:	42a2      	cmp	r2, r4
    f5b6:	d809      	bhi.n	f5cc <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    f5b8:	1aa1      	subs	r1, r4, r2
    f5ba:	b2c9      	uxtb	r1, r1
    f5bc:	4288      	cmp	r0, r1
    f5be:	d802      	bhi.n	f5c6 <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    f5c0:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f5c2:	7819      	ldrb	r1, [r3, #0]
    f5c4:	d109      	bne.n	f5da <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f5c6:	2000      	movs	r0, #0
}
    f5c8:	bc10      	pop	{r4}
    f5ca:	4770      	bx	lr
		return count - first + last;
    f5cc:	7859      	ldrb	r1, [r3, #1]
    f5ce:	1a89      	subs	r1, r1, r2
    f5d0:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f5d2:	b2c9      	uxtb	r1, r1
    f5d4:	4288      	cmp	r0, r1
    f5d6:	d8f6      	bhi.n	f5c6 <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f5d8:	7819      	ldrb	r1, [r3, #0]
}
    f5da:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    f5dc:	fb02 3301 	mla	r3, r2, r1, r3
    f5e0:	6858      	ldr	r0, [r3, #4]
    f5e2:	4770      	bx	lr
    f5e4:	20000450 	.word	0x20000450

0000f5e8 <ull_pdu_rx_alloc>:
{
    f5e8:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
    f5ea:	4b0a      	ldr	r3, [pc, #40]	; (f614 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    f5ec:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f5ee:	78da      	ldrb	r2, [r3, #3]
    f5f0:	7818      	ldrb	r0, [r3, #0]
    f5f2:	785c      	ldrb	r4, [r3, #1]
    f5f4:	428a      	cmp	r2, r1
    f5f6:	d00a      	beq.n	f60e <ull_pdu_rx_alloc+0x26>
	_first += 1U;
    f5f8:	1c4a      	adds	r2, r1, #1
    f5fa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f5fc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f600:	4294      	cmp	r4, r2
    f602:	bf08      	it	eq
    f604:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f606:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f608:	709a      	strb	r2, [r3, #2]
}
    f60a:	bc10      	pop	{r4}
    f60c:	4770      	bx	lr
		return NULL;
    f60e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    f610:	e7fb      	b.n	f60a <ull_pdu_rx_alloc+0x22>
    f612:	bf00      	nop
    f614:	20000450 	.word	0x20000450

0000f618 <ull_rx_put>:
{
    f618:	b538      	push	{r3, r4, r5, lr}
    f61a:	460c      	mov	r4, r1
    f61c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f61e:	f004 fe45 	bl	142ac <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f622:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f624:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f626:	4a03      	ldr	r2, [pc, #12]	; (f634 <ull_rx_put+0x1c>)
    f628:	4628      	mov	r0, r5
}
    f62a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f62e:	f7fb bfcb 	b.w	b5c8 <memq_enqueue>
    f632:	bf00      	nop
    f634:	20002f88 	.word	0x20002f88

0000f638 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f638:	2201      	movs	r2, #1
    f63a:	4b02      	ldr	r3, [pc, #8]	; (f644 <ull_rx_sched+0xc>)
    f63c:	4611      	mov	r1, r2
    f63e:	2000      	movs	r0, #0
    f640:	f7fc b836 	b.w	b6b0 <mayfly_enqueue>
    f644:	200005d0 	.word	0x200005d0

0000f648 <ull_prepare_enqueue>:
{
    f648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f64c:	4e1e      	ldr	r6, [pc, #120]	; (f6c8 <ull_prepare_enqueue+0x80>)
{
    f64e:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f652:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    f654:	f896 c001 	ldrb.w	ip, [r6, #1]
    f658:	78b7      	ldrb	r7, [r6, #2]
	last = last + 1;
    f65a:	1c65      	adds	r5, r4, #1
    f65c:	b2ed      	uxtb	r5, r5
		last = 0U;
    f65e:	45ac      	cmp	ip, r5
    f660:	bf08      	it	eq
    f662:	2500      	moveq	r5, #0
	if (last == first) {
    f664:	42af      	cmp	r7, r5
    f666:	d02a      	beq.n	f6be <ull_prepare_enqueue+0x76>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f668:	46b4      	mov	ip, r6
    f66a:	f81c 7b04 	ldrb.w	r7, [ip], #4
    f66e:	fb17 f704 	smulbb	r7, r7, r4
	if (!e) {
    f672:	eb1c 0407 	adds.w	r4, ip, r7
    f676:	d022      	beq.n	f6be <ull_prepare_enqueue+0x76>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f678:	f8d2 b000 	ldr.w	fp, [r2]
    f67c:	f8d2 a004 	ldr.w	sl, [r2, #4]
    f680:	f8d2 8008 	ldr.w	r8, [r2, #8]
    f684:	f8d2 900c 	ldr.w	r9, [r2, #12]
    f688:	f84c b007 	str.w	fp, [ip, r7]
	e->is_resume = is_resume;
    f68c:	f894 2020 	ldrb.w	r2, [r4, #32]
    f690:	f8c4 a004 	str.w	sl, [r4, #4]
    f694:	f00e 0e01 	and.w	lr, lr, #1
    f698:	f022 0203 	bic.w	r2, r2, #3
	e->is_abort_cb = is_abort_cb;
    f69c:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->is_resume = is_resume;
    f6a0:	ea42 020e 	orr.w	r2, r2, lr
	e->prio = prio;
    f6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f6a6:	f8c4 8008 	str.w	r8, [r4, #8]
    f6aa:	f8c4 900c 	str.w	r9, [r4, #12]
	e->abort_cb = abort_cb;
    f6ae:	61a1      	str	r1, [r4, #24]
	e->prio = prio;
    f6b0:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
    f6b2:	f884 2020 	strb.w	r2, [r4, #32]
	return 0;
    f6b6:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
    f6b8:	70f5      	strb	r5, [r6, #3]
}
    f6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
    f6be:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    f6c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6c6:	bf00      	nop
    f6c8:	20000468 	.word	0x20000468

0000f6cc <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    f6cc:	4b05      	ldr	r3, [pc, #20]	; (f6e4 <ull_prepare_dequeue_get+0x18>)
    f6ce:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    f6d0:	78d9      	ldrb	r1, [r3, #3]
    f6d2:	7818      	ldrb	r0, [r3, #0]
    f6d4:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    f6d6:	bf1a      	itte	ne
    f6d8:	3304      	addne	r3, #4
    f6da:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    f6de:	2000      	moveq	r0, #0
}
    f6e0:	4770      	bx	lr
    f6e2:	bf00      	nop
    f6e4:	20000468 	.word	0x20000468

0000f6e8 <ull_prepare_dequeue_iter>:
{
    f6e8:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f6ea:	4b0c      	ldr	r3, [pc, #48]	; (f71c <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    f6ec:	7802      	ldrb	r2, [r0, #0]
    f6ee:	785c      	ldrb	r4, [r3, #1]
    f6f0:	78dd      	ldrb	r5, [r3, #3]
    f6f2:	7819      	ldrb	r1, [r3, #0]
    f6f4:	4294      	cmp	r4, r2
    f6f6:	bf9c      	itt	ls
    f6f8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    f6fa:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    f6fc:	4295      	cmp	r5, r2
    f6fe:	d00a      	beq.n	f716 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
    f700:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
    f702:	4d07      	ldr	r5, [pc, #28]	; (f720 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    f704:	b2db      	uxtb	r3, r3
		i = 0U;
    f706:	429c      	cmp	r4, r3
    f708:	bf08      	it	eq
    f70a:	2300      	moveq	r3, #0
	*idx = i;
    f70c:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    f70e:	fb02 5001 	mla	r0, r2, r1, r5
}
    f712:	bc30      	pop	{r4, r5}
    f714:	4770      	bx	lr
		return NULL;
    f716:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f718:	e7fb      	b.n	f712 <ull_prepare_dequeue_iter+0x2a>
    f71a:	bf00      	nop
    f71c:	20000468 	.word	0x20000468
    f720:	2000046c 	.word	0x2000046c

0000f724 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    f724:	4b06      	ldr	r3, [pc, #24]	; (f740 <ull_event_done_extra_get+0x1c>)
    f726:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    f728:	78d8      	ldrb	r0, [r3, #3]
    f72a:	781a      	ldrb	r2, [r3, #0]
    f72c:	4288      	cmp	r0, r1
    f72e:	d005      	beq.n	f73c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    f730:	fb01 3302 	mla	r3, r1, r2, r3
    f734:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    f736:	b110      	cbz	r0, f73e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    f738:	3020      	adds	r0, #32
    f73a:	4770      	bx	lr
		return NULL;
    f73c:	2000      	movs	r0, #0
}
    f73e:	4770      	bx	lr
    f740:	20000428 	.word	0x20000428

0000f744 <ull_event_done>:
{
    f744:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    f746:	4a14      	ldr	r2, [pc, #80]	; (f798 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
    f748:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f74a:	78d4      	ldrb	r4, [r2, #3]
    f74c:	7811      	ldrb	r1, [r2, #0]
    f74e:	7855      	ldrb	r5, [r2, #1]
    f750:	429c      	cmp	r4, r3
    f752:	d01f      	beq.n	f794 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
    f754:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f758:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    f75a:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    f75c:	b2db      	uxtb	r3, r3
		_first = 0U;
    f75e:	429d      	cmp	r5, r3
    f760:	bf08      	it	eq
    f762:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f764:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    f766:	b19c      	cbz	r4, f790 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f768:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    f76a:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    f76c:	6826      	ldr	r6, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f76e:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    f770:	61e0      	str	r0, [r4, #28]
	evdone->hdr.link = NULL;
    f772:	6025      	str	r5, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f774:	f004 fd9a 	bl	142ac <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f778:	4a08      	ldr	r2, [pc, #32]	; (f79c <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f77a:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f77c:	4621      	mov	r1, r4
    f77e:	4630      	mov	r0, r6
    f780:	f7fb ff22 	bl	b5c8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f784:	2201      	movs	r2, #1
    f786:	4b06      	ldr	r3, [pc, #24]	; (f7a0 <ull_event_done+0x5c>)
    f788:	4628      	mov	r0, r5
    f78a:	4611      	mov	r1, r2
    f78c:	f7fb ff90 	bl	b6b0 <mayfly_enqueue>
}
    f790:	4620      	mov	r0, r4
    f792:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    f794:	2400      	movs	r4, #0
    f796:	e7fb      	b.n	f790 <ull_event_done+0x4c>
    f798:	20000428 	.word	0x20000428
    f79c:	20002f88 	.word	0x20002f88
    f7a0:	200005d0 	.word	0x200005d0

0000f7a4 <ticker_cb>:
{
    f7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7a8:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    f7aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f7ae:	4295      	cmp	r5, r2
{
    f7b0:	b08a      	sub	sp, #40	; 0x28
    f7b2:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    f7b4:	d018      	beq.n	f7e8 <ticker_cb+0x44>
	return ++hdr->ref;
    f7b6:	7c1b      	ldrb	r3, [r3, #16]
    f7b8:	3301      	adds	r3, #1
    f7ba:	b2db      	uxtb	r3, r3
    f7bc:	4680      	mov	r8, r0
    f7be:	460f      	mov	r7, r1
    f7c0:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d061      	beq.n	f88a <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
    f7c6:	4e38      	ldr	r6, [pc, #224]	; (f8a8 <ticker_cb+0x104>)
		mfy.param = &p;
    f7c8:	4b38      	ldr	r3, [pc, #224]	; (f8ac <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
    f7ca:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f7ce:	2200      	movs	r2, #0
	lll = &adv->lll;
    f7d0:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f7d4:	4611      	mov	r1, r2
    f7d6:	2001      	movs	r0, #1
		mfy.param = &p;
    f7d8:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
    f7da:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
    f7dc:	8135      	strh	r5, [r6, #8]
		p.param = lll;
    f7de:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f7e2:	f7fb ff65 	bl	b6b0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f7e6:	b938      	cbnz	r0, f7f8 <ticker_cb+0x54>
	if (!lll->is_hdcd)
    f7e8:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    f7ec:	f015 0501 	ands.w	r5, r5, #1
    f7f0:	d014      	beq.n	f81c <ticker_cb+0x78>
}
    f7f2:	b00a      	add	sp, #40	; 0x28
    f7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    f7f8:	4a2d      	ldr	r2, [pc, #180]	; (f8b0 <ticker_cb+0x10c>)
    f7fa:	492e      	ldr	r1, [pc, #184]	; (f8b4 <ticker_cb+0x110>)
    f7fc:	482e      	ldr	r0, [pc, #184]	; (f8b8 <ticker_cb+0x114>)
    f7fe:	f240 6395 	movw	r3, #1685	; 0x695
    f802:	f013 fb00 	bl	22e06 <printk>
    f806:	4040      	eors	r0, r0
    f808:	f380 8811 	msr	BASEPRI, r0
    f80c:	f04f 0003 	mov.w	r0, #3
    f810:	df02      	svc	2
	if (!lll->is_hdcd)
    f812:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    f816:	f015 0501 	ands.w	r5, r5, #1
    f81a:	d1ea      	bne.n	f7f2 <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
    f81c:	2104      	movs	r1, #4
    f81e:	a809      	add	r0, sp, #36	; 0x24
    f820:	f006 fa30 	bl	15c84 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f824:	9809      	ldr	r0, [sp, #36]	; 0x24
    f826:	4925      	ldr	r1, [pc, #148]	; (f8bc <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f828:	4a25      	ldr	r2, [pc, #148]	; (f8c0 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f82a:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f82c:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f830:	1aa2      	subs	r2, r4, r2
    f832:	4c24      	ldr	r4, [pc, #144]	; (f8c4 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f834:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f836:	1a43      	subs	r3, r0, r1
    f838:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f83c:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f840:	f240 1147 	movw	r1, #327	; 0x147
    f844:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f846:	0992      	lsrs	r2, r2, #6
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f848:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
    f84c:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f84e:	491e      	ldr	r1, [pc, #120]	; (f8c8 <ticker_cb+0x124>)
    f850:	9105      	str	r1, [sp, #20]
		random_delay += 1;
    f852:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f854:	e9cd 5502 	strd	r5, r5, [sp, #8]
    f858:	e9cd 5500 	strd	r5, r5, [sp]
    f85c:	4628      	mov	r0, r5
    f85e:	b2d2      	uxtb	r2, r2
    f860:	2101      	movs	r1, #1
		random_delay += 1;
    f862:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f864:	f7fd f9ea 	bl	cc3c <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f868:	f030 0302 	bics.w	r3, r0, #2
    f86c:	d0c1      	beq.n	f7f2 <ticker_cb+0x4e>
    f86e:	4a10      	ldr	r2, [pc, #64]	; (f8b0 <ticker_cb+0x10c>)
    f870:	4916      	ldr	r1, [pc, #88]	; (f8cc <ticker_cb+0x128>)
    f872:	4811      	ldr	r0, [pc, #68]	; (f8b8 <ticker_cb+0x114>)
    f874:	f240 63ab 	movw	r3, #1707	; 0x6ab
    f878:	f013 fac5 	bl	22e06 <printk>
    f87c:	4040      	eors	r0, r0
    f87e:	f380 8811 	msr	BASEPRI, r0
    f882:	f04f 0003 	mov.w	r0, #3
    f886:	df02      	svc	2
}
    f888:	e7b3      	b.n	f7f2 <ticker_cb+0x4e>
		LL_ASSERT(ref);
    f88a:	4a09      	ldr	r2, [pc, #36]	; (f8b0 <ticker_cb+0x10c>)
    f88c:	4910      	ldr	r1, [pc, #64]	; (f8d0 <ticker_cb+0x12c>)
    f88e:	480a      	ldr	r0, [pc, #40]	; (f8b8 <ticker_cb+0x114>)
    f890:	f240 6389 	movw	r3, #1673	; 0x689
    f894:	f013 fab7 	bl	22e06 <printk>
    f898:	4040      	eors	r0, r0
    f89a:	f380 8811 	msr	BASEPRI, r0
    f89e:	f04f 0003 	mov.w	r0, #3
    f8a2:	df02      	svc	2
    f8a4:	e78f      	b.n	f7c6 <ticker_cb+0x22>
    f8a6:	bf00      	nop
    f8a8:	20003338 	.word	0x20003338
    f8ac:	200005f0 	.word	0x200005f0
    f8b0:	0002c9e0 	.word	0x0002c9e0
    f8b4:	0002c8bc 	.word	0x0002c8bc
    f8b8:	0002c630 	.word	0x0002c630
    f8bc:	90d4f121 	.word	0x90d4f121
    f8c0:	200032d4 	.word	0x200032d4
    f8c4:	ba2e8ba3 	.word	0xba2e8ba3
    f8c8:	0000fa0d 	.word	0x0000fa0d
    f8cc:	0002ca24 	.word	0x0002ca24
    f8d0:	0002ca20 	.word	0x0002ca20

0000f8d4 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d132      	bne.n	f93e <ticker_op_stop_cb+0x6a>
{
    f8d8:	b538      	push	{r3, r4, r5, lr}
    f8da:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
    f8dc:	4d1f      	ldr	r5, [pc, #124]	; (f95c <ticker_op_stop_cb+0x88>)
	return hdr->ref;
    f8de:	7c09      	ldrb	r1, [r1, #16]
    f8e0:	f104 031c 	add.w	r3, r4, #28
    f8e4:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
    f8e6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f8ea:	b1e1      	cbz	r1, f926 <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
    f8ec:	6962      	ldr	r2, [r4, #20]
    f8ee:	b16a      	cbz	r2, f90c <ticker_op_stop_cb+0x38>
    f8f0:	4a1b      	ldr	r2, [pc, #108]	; (f960 <ticker_op_stop_cb+0x8c>)
    f8f2:	491c      	ldr	r1, [pc, #112]	; (f964 <ticker_op_stop_cb+0x90>)
    f8f4:	481c      	ldr	r0, [pc, #112]	; (f968 <ticker_op_stop_cb+0x94>)
    f8f6:	f240 63fc 	movw	r3, #1788	; 0x6fc
    f8fa:	f013 fa84 	bl	22e06 <printk>
    f8fe:	4040      	eors	r0, r0
    f900:	f380 8811 	msr	BASEPRI, r0
    f904:	f04f 0003 	mov.w	r0, #3
    f908:	df02      	svc	2
    f90a:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    f90c:	4917      	ldr	r1, [pc, #92]	; (f96c <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
    f90e:	4818      	ldr	r0, [pc, #96]	; (f970 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
    f910:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f912:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    f914:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    f916:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f918:	4b10      	ldr	r3, [pc, #64]	; (f95c <ticker_op_stop_cb+0x88>)
    f91a:	4611      	mov	r1, r2
    f91c:	2002      	movs	r0, #2
    f91e:	f7fb fec7 	bl	b6b0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f922:	b968      	cbnz	r0, f940 <ticker_op_stop_cb+0x6c>
}
    f924:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    f926:	4b11      	ldr	r3, [pc, #68]	; (f96c <ticker_op_stop_cb+0x98>)
    f928:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f92a:	2101      	movs	r1, #1
    f92c:	462b      	mov	r3, r5
    f92e:	2002      	movs	r0, #2
    f930:	f7fb febe 	bl	b6b0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f934:	2800      	cmp	r0, #0
    f936:	d0f5      	beq.n	f924 <ticker_op_stop_cb+0x50>
    f938:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    f93c:	e002      	b.n	f944 <ticker_op_stop_cb+0x70>
    f93e:	4770      	bx	lr
		LL_ASSERT(!ret);
    f940:	f240 7303 	movw	r3, #1795	; 0x703
		LL_ASSERT(!ret);
    f944:	4a06      	ldr	r2, [pc, #24]	; (f960 <ticker_op_stop_cb+0x8c>)
    f946:	490b      	ldr	r1, [pc, #44]	; (f974 <ticker_op_stop_cb+0xa0>)
    f948:	4807      	ldr	r0, [pc, #28]	; (f968 <ticker_op_stop_cb+0x94>)
    f94a:	f013 fa5c 	bl	22e06 <printk>
    f94e:	4040      	eors	r0, r0
    f950:	f380 8811 	msr	BASEPRI, r0
    f954:	f04f 0003 	mov.w	r0, #3
    f958:	df02      	svc	2
}
    f95a:	bd38      	pop	{r3, r4, r5, pc}
    f95c:	20000600 	.word	0x20000600
    f960:	0002c9e0 	.word	0x0002c9e0
    f964:	0002ca40 	.word	0x0002ca40
    f968:	0002c630 	.word	0x0002c630
    f96c:	0000f979 	.word	0x0000f979
    f970:	00015cf1 	.word	0x00015cf1
    f974:	0002c8bc 	.word	0x0002c8bc

0000f978 <disabled_cb>:
{
    f978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    f97a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    f97c:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
    f97e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    f980:	b1d7      	cbz	r7, f9b8 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    f982:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
    f984:	2300      	movs	r3, #0
    f986:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
    f988:	b34c      	cbz	r4, f9de <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    f98a:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
    f98c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f990:	2213      	movs	r2, #19
	adv->node_rx_cc_free = NULL;
    f992:	64a9      	str	r1, [r5, #72]	; 0x48
__ssp_bos_icheck3(memset, void *, int)
    f994:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f998:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
    f99a:	80e3      	strh	r3, [r4, #6]
    f99c:	221e      	movs	r2, #30
    f99e:	f01b ff29 	bl	2b7f4 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f9a2:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
    f9a4:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    f9a6:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f9a8:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    f9aa:	4621      	mov	r1, r4
    f9ac:	f7ff fca6 	bl	f2fc <ll_rx_put>
}
    f9b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    f9b4:	f7ff bcac 	b.w	f310 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    f9b8:	4a10      	ldr	r2, [pc, #64]	; (f9fc <disabled_cb+0x84>)
    f9ba:	4911      	ldr	r1, [pc, #68]	; (fa00 <disabled_cb+0x88>)
    f9bc:	4811      	ldr	r0, [pc, #68]	; (fa04 <disabled_cb+0x8c>)
    f9be:	f240 7315 	movw	r3, #1813	; 0x715
    f9c2:	f013 fa20 	bl	22e06 <printk>
    f9c6:	4040      	eors	r0, r0
    f9c8:	f380 8811 	msr	BASEPRI, r0
    f9cc:	f04f 0003 	mov.w	r0, #3
    f9d0:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    f9d2:	6cac      	ldr	r4, [r5, #72]	; 0x48
    f9d4:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
    f9d6:	2300      	movs	r3, #0
    f9d8:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
    f9da:	2c00      	cmp	r4, #0
    f9dc:	d1d5      	bne.n	f98a <disabled_cb+0x12>
    f9de:	4a07      	ldr	r2, [pc, #28]	; (f9fc <disabled_cb+0x84>)
    f9e0:	4909      	ldr	r1, [pc, #36]	; (fa08 <disabled_cb+0x90>)
    f9e2:	4808      	ldr	r0, [pc, #32]	; (fa04 <disabled_cb+0x8c>)
    f9e4:	f240 7319 	movw	r3, #1817	; 0x719
    f9e8:	f013 fa0d 	bl	22e06 <printk>
    f9ec:	4040      	eors	r0, r0
    f9ee:	f380 8811 	msr	BASEPRI, r0
    f9f2:	f04f 0003 	mov.w	r0, #3
    f9f6:	df02      	svc	2
    f9f8:	6cac      	ldr	r4, [r5, #72]	; 0x48
    f9fa:	e7c6      	b.n	f98a <disabled_cb+0x12>
    f9fc:	0002c9e0 	.word	0x0002c9e0
    fa00:	0002ca54 	.word	0x0002ca54
    fa04:	0002c630 	.word	0x0002c630
    fa08:	0002ca68 	.word	0x0002ca68

0000fa0c <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fa0c:	b900      	cbnz	r0, fa10 <ticker_op_update_cb+0x4>
    fa0e:	4770      	bx	lr
{
    fa10:	b510      	push	{r4, lr}
    fa12:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fa14:	f7ff fd28 	bl	f468 <ull_disable_mark_get>
    fa18:	4284      	cmp	r4, r0
    fa1a:	d00c      	beq.n	fa36 <ticker_op_update_cb+0x2a>
    fa1c:	4a06      	ldr	r2, [pc, #24]	; (fa38 <ticker_op_update_cb+0x2c>)
    fa1e:	4907      	ldr	r1, [pc, #28]	; (fa3c <ticker_op_update_cb+0x30>)
    fa20:	4807      	ldr	r0, [pc, #28]	; (fa40 <ticker_op_update_cb+0x34>)
    fa22:	f240 63cc 	movw	r3, #1740	; 0x6cc
    fa26:	f013 f9ee 	bl	22e06 <printk>
    fa2a:	4040      	eors	r0, r0
    fa2c:	f380 8811 	msr	BASEPRI, r0
    fa30:	f04f 0003 	mov.w	r0, #3
    fa34:	df02      	svc	2
}
    fa36:	bd10      	pop	{r4, pc}
    fa38:	0002c9e0 	.word	0x0002c9e0
    fa3c:	0002ca80 	.word	0x0002ca80
    fa40:	0002c630 	.word	0x0002c630

0000fa44 <ticker_stop_cb>:
{
    fa44:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fa46:	491a      	ldr	r1, [pc, #104]	; (fab0 <ticker_stop_cb+0x6c>)
    fa48:	4a1a      	ldr	r2, [pc, #104]	; (fab4 <ticker_stop_cb+0x70>)
    fa4a:	1a59      	subs	r1, r3, r1
{
    fa4c:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fa4e:	fba2 3101 	umull	r3, r1, r2, r1
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    fa52:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
    fa56:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fa58:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    fa5c:	d119      	bne.n	fa92 <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
    fa5e:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    fa60:	4b15      	ldr	r3, [pc, #84]	; (fab8 <ticker_stop_cb+0x74>)
    fa62:	9400      	str	r4, [sp, #0]
    fa64:	b2d2      	uxtb	r2, r2
    fa66:	2101      	movs	r1, #1
    fa68:	2000      	movs	r0, #0
    fa6a:	f7fd f8ff 	bl	cc6c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fa6e:	f030 0302 	bics.w	r3, r0, #2
    fa72:	d00c      	beq.n	fa8e <ticker_stop_cb+0x4a>
    fa74:	4a11      	ldr	r2, [pc, #68]	; (fabc <ticker_stop_cb+0x78>)
    fa76:	4912      	ldr	r1, [pc, #72]	; (fac0 <ticker_stop_cb+0x7c>)
    fa78:	4812      	ldr	r0, [pc, #72]	; (fac4 <ticker_stop_cb+0x80>)
    fa7a:	f240 63de 	movw	r3, #1758	; 0x6de
    fa7e:	f013 f9c2 	bl	22e06 <printk>
    fa82:	4040      	eors	r0, r0
    fa84:	f380 8811 	msr	BASEPRI, r0
    fa88:	f04f 0003 	mov.w	r0, #3
    fa8c:	df02      	svc	2
}
    fa8e:	b003      	add	sp, #12
    fa90:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    fa92:	4a0a      	ldr	r2, [pc, #40]	; (fabc <ticker_stop_cb+0x78>)
    fa94:	490c      	ldr	r1, [pc, #48]	; (fac8 <ticker_stop_cb+0x84>)
    fa96:	480b      	ldr	r0, [pc, #44]	; (fac4 <ticker_stop_cb+0x80>)
    fa98:	f240 63d9 	movw	r3, #1753	; 0x6d9
    fa9c:	f013 f9b3 	bl	22e06 <printk>
    faa0:	4040      	eors	r0, r0
    faa2:	f380 8811 	msr	BASEPRI, r0
    faa6:	f04f 0003 	mov.w	r0, #3
    faaa:	df02      	svc	2
    faac:	e7d7      	b.n	fa5e <ticker_stop_cb+0x1a>
    faae:	bf00      	nop
    fab0:	200032d4 	.word	0x200032d4
    fab4:	ba2e8ba3 	.word	0xba2e8ba3
    fab8:	0000f8d5 	.word	0x0000f8d5
    fabc:	0002c9e0 	.word	0x0002c9e0
    fac0:	0002ca24 	.word	0x0002ca24
    fac4:	0002c630 	.word	0x0002c630
    fac8:	0002cab0 	.word	0x0002cab0

0000facc <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    facc:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    face:	4c1b      	ldr	r4, [pc, #108]	; (fb3c <conn_release.constprop.0+0x70>)
    fad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
    fad2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    fad4:	b163      	cbz	r3, faf0 <conn_release.constprop.0+0x24>
    fad6:	4a1a      	ldr	r2, [pc, #104]	; (fb40 <conn_release.constprop.0+0x74>)
    fad8:	491a      	ldr	r1, [pc, #104]	; (fb44 <conn_release.constprop.0+0x78>)
    fada:	481b      	ldr	r0, [pc, #108]	; (fb48 <conn_release.constprop.0+0x7c>)
    fadc:	f240 7343 	movw	r3, #1859	; 0x743
    fae0:	f013 f991 	bl	22e06 <printk>
    fae4:	4040      	eors	r0, r0
    fae6:	f380 8811 	msr	BASEPRI, r0
    faea:	f04f 0003 	mov.w	r0, #3
    faee:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    faf0:	f105 0150 	add.w	r1, r5, #80	; 0x50
    faf4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    faf8:	f7fb fd5c 	bl	b5b4 <memq_deinit>
	LL_ASSERT(link);
    fafc:	4606      	mov	r6, r0
    fafe:	b170      	cbz	r0, fb1e <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    fb00:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    fb02:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
    fb04:	f000 ff5a 	bl	109bc <ll_conn_release>
	adv->lll.conn = NULL;
    fb08:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    fb0a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
    fb0c:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
    fb0e:	f7ff fbef 	bl	f2f0 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    fb12:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
    fb14:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
    fb16:	f7ff fbdf 	bl	f2d8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    fb1a:	6465      	str	r5, [r4, #68]	; 0x44
}
    fb1c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    fb1e:	4a08      	ldr	r2, [pc, #32]	; (fb40 <conn_release.constprop.0+0x74>)
    fb20:	490a      	ldr	r1, [pc, #40]	; (fb4c <conn_release.constprop.0+0x80>)
    fb22:	4809      	ldr	r0, [pc, #36]	; (fb48 <conn_release.constprop.0+0x7c>)
    fb24:	f240 7345 	movw	r3, #1861	; 0x745
    fb28:	f013 f96d 	bl	22e06 <printk>
    fb2c:	4040      	eors	r0, r0
    fb2e:	f380 8811 	msr	BASEPRI, r0
    fb32:	f04f 0003 	mov.w	r0, #3
    fb36:	df02      	svc	2
    fb38:	e7e2      	b.n	fb00 <conn_release.constprop.0+0x34>
    fb3a:	bf00      	nop
    fb3c:	200032d4 	.word	0x200032d4
    fb40:	0002c9e0 	.word	0x0002c9e0
    fb44:	0002cabc 	.word	0x0002cabc
    fb48:	0002c630 	.word	0x0002c630
    fb4c:	0002cb44 	.word	0x0002cb44

0000fb50 <ll_adv_params_set>:
{
    fb50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb54:	4d4a      	ldr	r5, [pc, #296]	; (fc80 <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
    fb56:	4c4b      	ldr	r4, [pc, #300]	; (fc84 <ll_adv_params_set+0x134>)
{
    fb58:	4686      	mov	lr, r0
    fb5a:	460e      	mov	r6, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb5c:	e895 0003 	ldmia.w	r5, {r0, r1}
{
    fb60:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    fb62:	f894 804e 	ldrb.w	r8, [r4, #78]	; 0x4e
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb66:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
    fb68:	f018 0001 	ands.w	r0, r8, #1
{
    fb6c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    fb6e:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    fb72:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb76:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    fb7a:	d17c      	bne.n	fc76 <ll_adv_params_set+0x126>
    fb7c:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
	adv->lll.chan_map = chan_map;
    fb80:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
    fb84:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	pdu->type = pdu_adv_type[adv_type];
    fb88:	a902      	add	r1, sp, #8
	adv->lll.chan_map = chan_map;
    fb8a:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
    fb8e:	2e01      	cmp	r6, #1
	pdu->type = pdu_adv_type[adv_type];
    fb90:	4431      	add	r1, r6
	adv->lll.chan_map = chan_map;
    fb92:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    fb96:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
    fb9a:	f811 9c08 	ldrb.w	r9, [r1, #-8]
    fb9e:	7831      	ldrb	r1, [r6, #0]
	adv->lll.chan_map = chan_map;
    fba0:	f005 0503 	and.w	r5, r5, #3
    fba4:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
    fba8:	f8df c0dc 	ldr.w	ip, [pc, #220]	; fc88 <ll_adv_params_set+0x138>
    fbac:	ea08 080c 	and.w	r8, r8, ip
	adv->own_addr_type = own_addr_type;
    fbb0:	f894 c04e 	ldrb.w	ip, [r4, #78]	; 0x4e
		adv->interval = 0;
    fbb4:	bf08      	it	eq
    fbb6:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
    fbba:	f021 011f 	bic.w	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fbbe:	f019 0f0e 	tst.w	r9, #14
	pdu->type = pdu_adv_type[adv_type];
    fbc2:	f009 090f 	and.w	r9, r9, #15
    fbc6:	f8a4 e04c 	strh.w	lr, [r4, #76]	; 0x4c
	adv->own_addr_type = own_addr_type;
    fbca:	f362 0c42 	bfi	ip, r2, #1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fbce:	bf0c      	ite	eq
    fbd0:	f04f 0e01 	moveq.w	lr, #1
    fbd4:	f04f 0e00 	movne.w	lr, #0
    fbd8:	ea49 0101 	orr.w	r1, r9, r1
	adv->lll.chan_map = chan_map;
    fbdc:	ea45 0508 	orr.w	r5, r5, r8
    fbe0:	f36e 1145 	bfi	r1, lr, #5, #1
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fbe4:	f01c 0f04 	tst.w	ip, #4
	adv->lll.chan_map = chan_map;
    fbe8:	8525      	strh	r5, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fbea:	7031      	strb	r1, [r6, #0]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fbec:	fa5f f58c 	uxtb.w	r5, ip
	adv->own_addr_type = own_addr_type;
    fbf0:	f884 c04e 	strb.w	ip, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fbf4:	d00a      	beq.n	fc0c <ll_adv_params_set+0xbc>
		adv->id_addr_type = direct_addr_type;
    fbf6:	4629      	mov	r1, r5
    fbf8:	f363 01c3 	bfi	r1, r3, #3, #1
    fbfc:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    fc00:	6839      	ldr	r1, [r7, #0]
    fc02:	f8c4 104f 	str.w	r1, [r4, #79]	; 0x4f
    fc06:	88b9      	ldrh	r1, [r7, #4]
    fc08:	f8a4 1053 	strh.w	r1, [r4, #83]	; 0x53
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    fc0c:	7831      	ldrb	r1, [r6, #0]
    fc0e:	f001 050f 	and.w	r5, r1, #15
    fc12:	2d01      	cmp	r5, #1
    fc14:	f002 0c01 	and.w	ip, r2, #1
    fc18:	d01f      	beq.n	fc5a <ll_adv_params_set+0x10a>
	} else if (pdu->len == 0) {
    fc1a:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    fc1c:	f36c 1186 	bfi	r1, ip, #6, #1
	} else if (pdu->len == 0) {
    fc20:	b1ab      	cbz	r3, fc4e <ll_adv_params_set+0xfe>
		pdu->rx_addr = 0;
    fc22:	f36f 11c7 	bfc	r1, #7, #1
    fc26:	7031      	strb	r1, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    fc28:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    fc2c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    fc30:	0192      	lsls	r2, r2, #6
    fc32:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fc34:	f002 0240 	and.w	r2, r2, #64	; 0x40
		if (pdu->len == 0) {
    fc38:	7859      	ldrb	r1, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    fc3a:	f042 0204 	orr.w	r2, r2, #4
    fc3e:	701a      	strb	r2, [r3, #0]
		if (pdu->len == 0) {
    fc40:	b911      	cbnz	r1, fc48 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
    fc42:	2206      	movs	r2, #6
	return 0;
    fc44:	4608      	mov	r0, r1
			pdu->len = BDADDR_SIZE;
    fc46:	705a      	strb	r2, [r3, #1]
}
    fc48:	b003      	add	sp, #12
    fc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
    fc4e:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
    fc52:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
    fc54:	7031      	strb	r1, [r6, #0]
		pdu->len = BDADDR_SIZE;
    fc56:	7073      	strb	r3, [r6, #1]
    fc58:	e7e6      	b.n	fc28 <ll_adv_params_set+0xd8>
		pdu->rx_addr = direct_addr_type;
    fc5a:	4635      	mov	r5, r6
		pdu->tx_addr = own_addr_type & 0x1;
    fc5c:	f36c 1186 	bfi	r1, ip, #6, #1
		pdu->rx_addr = direct_addr_type;
    fc60:	f363 11c7 	bfi	r1, r3, #7, #1
    fc64:	f805 1b08 	strb.w	r1, [r5], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fc68:	683b      	ldr	r3, [r7, #0]
    fc6a:	60b3      	str	r3, [r6, #8]
    fc6c:	88bb      	ldrh	r3, [r7, #4]
    fc6e:	80ab      	strh	r3, [r5, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    fc70:	230c      	movs	r3, #12
    fc72:	7073      	strb	r3, [r6, #1]
    fc74:	e7d8      	b.n	fc28 <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc76:	200c      	movs	r0, #12
}
    fc78:	b003      	add	sp, #12
    fc7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fc7e:	bf00      	nop
    fc80:	0002c13c 	.word	0x0002c13c
    fc84:	200032d4 	.word	0x200032d4
    fc88:	fffffcf1 	.word	0xfffffcf1

0000fc8c <ull_adv_init>:
{
    fc8c:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    fc8e:	4c05      	ldr	r4, [pc, #20]	; (fca4 <ull_adv_init+0x18>)
    fc90:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fc94:	f006 fb26 	bl	162e4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    fc98:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fc9c:	f006 fb22 	bl	162e4 <lll_adv_data_init>
}
    fca0:	2000      	movs	r0, #0
    fca2:	bd10      	pop	{r4, pc}
    fca4:	200032d4 	.word	0x200032d4

0000fca8 <ull_adv_reset>:
{
    fca8:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    fcaa:	4c46      	ldr	r4, [pc, #280]	; (fdc4 <ull_adv_reset+0x11c>)
    fcac:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    fcb0:	07da      	lsls	r2, r3, #31
{
    fcb2:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    fcb4:	d544      	bpl.n	fd40 <ull_adv_reset+0x98>
	mark = ull_disable_mark(adv);
    fcb6:	4620      	mov	r0, r4
    fcb8:	f7ff fbbe 	bl	f438 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    fcbc:	4284      	cmp	r4, r0
    fcbe:	d00c      	beq.n	fcda <ull_adv_reset+0x32>
    fcc0:	4a41      	ldr	r2, [pc, #260]	; (fdc8 <ull_adv_reset+0x120>)
    fcc2:	4942      	ldr	r1, [pc, #264]	; (fdcc <ull_adv_reset+0x124>)
    fcc4:	4842      	ldr	r0, [pc, #264]	; (fdd0 <ull_adv_reset+0x128>)
    fcc6:	f44f 63f3 	mov.w	r3, #1944	; 0x798
    fcca:	f013 f89c 	bl	22e06 <printk>
    fcce:	4040      	eors	r0, r0
    fcd0:	f380 8811 	msr	BASEPRI, r0
    fcd4:	f04f 0003 	mov.w	r0, #3
    fcd8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    fcda:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fcde:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fce0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    fce2:	d430      	bmi.n	fd46 <ull_adv_reset+0x9e>
	ret_cb = TICKER_STATUS_BUSY;
    fce4:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    fce6:	2103      	movs	r1, #3
    fce8:	4b3a      	ldr	r3, [pc, #232]	; (fdd4 <ull_adv_reset+0x12c>)
    fcea:	9500      	str	r5, [sp, #0]
    fcec:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    fcee:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    fcf0:	f7fc ffbc 	bl	cc6c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    fcf4:	4629      	mov	r1, r5
    fcf6:	f7ff fb77 	bl	f3e8 <ull_ticker_status_take>
	if (ret) {
    fcfa:	2800      	cmp	r0, #0
    fcfc:	d14c      	bne.n	fd98 <ull_adv_reset+0xf0>
	ret = ull_disable(&adv->lll);
    fcfe:	4836      	ldr	r0, [pc, #216]	; (fdd8 <ull_adv_reset+0x130>)
    fd00:	f7ff fbd6 	bl	f4b0 <ull_disable>
	LL_ASSERT(!ret);
    fd04:	2800      	cmp	r0, #0
    fd06:	d134      	bne.n	fd72 <ull_adv_reset+0xca>
	mark = ull_disable_unmark(adv);
    fd08:	482e      	ldr	r0, [pc, #184]	; (fdc4 <ull_adv_reset+0x11c>)
    fd0a:	f7ff fba1 	bl	f450 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    fd0e:	4284      	cmp	r4, r0
    fd10:	d00c      	beq.n	fd2c <ull_adv_reset+0x84>
    fd12:	4a2d      	ldr	r2, [pc, #180]	; (fdc8 <ull_adv_reset+0x120>)
    fd14:	492d      	ldr	r1, [pc, #180]	; (fdcc <ull_adv_reset+0x124>)
    fd16:	482e      	ldr	r0, [pc, #184]	; (fdd0 <ull_adv_reset+0x128>)
    fd18:	f240 73ba 	movw	r3, #1978	; 0x7ba
    fd1c:	f013 f873 	bl	22e06 <printk>
    fd20:	4040      	eors	r0, r0
    fd22:	f380 8811 	msr	BASEPRI, r0
    fd26:	f04f 0003 	mov.w	r0, #3
    fd2a:	df02      	svc	2
	if (adv->lll.conn) {
    fd2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd2e:	b10b      	cbz	r3, fd34 <ull_adv_reset+0x8c>
		conn_release(adv);
    fd30:	f7ff fecc 	bl	facc <conn_release.constprop.0>
	adv->is_enabled = 0U;
    fd34:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    fd38:	f36f 0300 	bfc	r3, #0, #1
    fd3c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
    fd40:	2000      	movs	r0, #0
    fd42:	b005      	add	sp, #20
    fd44:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
    fd46:	2202      	movs	r2, #2
    fd48:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fd4a:	2103      	movs	r1, #3
    fd4c:	4b21      	ldr	r3, [pc, #132]	; (fdd4 <ull_adv_reset+0x12c>)
    fd4e:	9500      	str	r5, [sp, #0]
    fd50:	2201      	movs	r2, #1
    fd52:	2000      	movs	r0, #0
    fd54:	f7fc ff8a 	bl	cc6c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    fd58:	4629      	mov	r1, r5
    fd5a:	f7ff fb45 	bl	f3e8 <ull_ticker_status_take>
		if (ret) {
    fd5e:	2800      	cmp	r0, #0
    fd60:	d0c0      	beq.n	fce4 <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
    fd62:	4818      	ldr	r0, [pc, #96]	; (fdc4 <ull_adv_reset+0x11c>)
    fd64:	f7ff fb74 	bl	f450 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    fd68:	4284      	cmp	r4, r0
    fd6a:	d0e9      	beq.n	fd40 <ull_adv_reset+0x98>
    fd6c:	f240 73a3 	movw	r3, #1955	; 0x7a3
    fd70:	e019      	b.n	fda6 <ull_adv_reset+0xfe>
	LL_ASSERT(!ret);
    fd72:	4a15      	ldr	r2, [pc, #84]	; (fdc8 <ull_adv_reset+0x120>)
    fd74:	4919      	ldr	r1, [pc, #100]	; (fddc <ull_adv_reset+0x134>)
    fd76:	4816      	ldr	r0, [pc, #88]	; (fdd0 <ull_adv_reset+0x128>)
    fd78:	f240 73b7 	movw	r3, #1975	; 0x7b7
    fd7c:	f013 f843 	bl	22e06 <printk>
    fd80:	4040      	eors	r0, r0
    fd82:	f380 8811 	msr	BASEPRI, r0
    fd86:	f04f 0003 	mov.w	r0, #3
    fd8a:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    fd8c:	480d      	ldr	r0, [pc, #52]	; (fdc4 <ull_adv_reset+0x11c>)
    fd8e:	f7ff fb5f 	bl	f450 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    fd92:	4284      	cmp	r4, r0
    fd94:	d1bd      	bne.n	fd12 <ull_adv_reset+0x6a>
    fd96:	e7c9      	b.n	fd2c <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
    fd98:	480a      	ldr	r0, [pc, #40]	; (fdc4 <ull_adv_reset+0x11c>)
    fd9a:	f7ff fb59 	bl	f450 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    fd9e:	4284      	cmp	r4, r0
    fda0:	d0ce      	beq.n	fd40 <ull_adv_reset+0x98>
    fda2:	f240 73b1 	movw	r3, #1969	; 0x7b1
    fda6:	4a08      	ldr	r2, [pc, #32]	; (fdc8 <ull_adv_reset+0x120>)
    fda8:	4908      	ldr	r1, [pc, #32]	; (fdcc <ull_adv_reset+0x124>)
    fdaa:	4809      	ldr	r0, [pc, #36]	; (fdd0 <ull_adv_reset+0x128>)
    fdac:	f013 f82b 	bl	22e06 <printk>
    fdb0:	4040      	eors	r0, r0
    fdb2:	f380 8811 	msr	BASEPRI, r0
    fdb6:	f04f 0003 	mov.w	r0, #3
    fdba:	df02      	svc	2
}
    fdbc:	2000      	movs	r0, #0
    fdbe:	b005      	add	sp, #20
    fdc0:	bd30      	pop	{r4, r5, pc}
    fdc2:	bf00      	nop
    fdc4:	200032d4 	.word	0x200032d4
    fdc8:	0002c9e0 	.word	0x0002c9e0
    fdcc:	0002cad0 	.word	0x0002cad0
    fdd0:	0002c630 	.word	0x0002c630
    fdd4:	0000e2f9 	.word	0x0000e2f9
    fdd8:	200032f0 	.word	0x200032f0
    fddc:	0002c8bc 	.word	0x0002c8bc

0000fde0 <ull_adv_reset_finalize>:
{
    fde0:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
    fde2:	4c09      	ldr	r4, [pc, #36]	; (fe08 <ull_adv_reset_finalize+0x28>)
    fde4:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    fde8:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
    fdea:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
    fdec:	f006 fa88 	bl	16300 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
    fdf0:	4620      	mov	r0, r4
    fdf2:	f006 fa85 	bl	16300 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    fdf6:	4628      	mov	r0, r5
    fdf8:	f006 fa74 	bl	162e4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    fdfc:	4620      	mov	r0, r4
    fdfe:	f006 fa71 	bl	162e4 <lll_adv_data_init>
}
    fe02:	2000      	movs	r0, #0
    fe04:	bd38      	pop	{r3, r4, r5, pc}
    fe06:	bf00      	nop
    fe08:	200032d4 	.word	0x200032d4

0000fe0c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fe0c:	4a03      	ldr	r2, [pc, #12]	; (fe1c <ull_adv_handle_get+0x10>)
    fe0e:	4b04      	ldr	r3, [pc, #16]	; (fe20 <ull_adv_handle_get+0x14>)
    fe10:	1a80      	subs	r0, r0, r2
    fe12:	fba3 3000 	umull	r3, r0, r3, r0
}
    fe16:	f3c0 108f 	ubfx	r0, r0, #6, #16
    fe1a:	4770      	bx	lr
    fe1c:	200032d4 	.word	0x200032d4
    fe20:	ba2e8ba3 	.word	0xba2e8ba3

0000fe24 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fe24:	4a04      	ldr	r2, [pc, #16]	; (fe38 <ull_adv_lll_handle_get+0x14>)
    fe26:	6800      	ldr	r0, [r0, #0]
    fe28:	4b04      	ldr	r3, [pc, #16]	; (fe3c <ull_adv_lll_handle_get+0x18>)
    fe2a:	1a80      	subs	r0, r0, r2
    fe2c:	fba3 3000 	umull	r3, r0, r3, r0
}
    fe30:	f3c0 108f 	ubfx	r0, r0, #6, #16
    fe34:	4770      	bx	lr
    fe36:	bf00      	nop
    fe38:	200032d4 	.word	0x200032d4
    fe3c:	ba2e8ba3 	.word	0xba2e8ba3

0000fe40 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    fe40:	b938      	cbnz	r0, fe52 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    fe42:	4805      	ldr	r0, [pc, #20]	; (fe58 <ull_adv_is_enabled_get+0x18>)
    fe44:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
    fe48:	f013 0f01 	tst.w	r3, #1
    fe4c:	bf08      	it	eq
    fe4e:	2000      	moveq	r0, #0
    fe50:	4770      	bx	lr
		return NULL;
    fe52:	2000      	movs	r0, #0
}
    fe54:	4770      	bx	lr
    fe56:	bf00      	nop
    fe58:	200032d4 	.word	0x200032d4

0000fe5c <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    fe5c:	b928      	cbnz	r0, fe6a <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    fe5e:	4b04      	ldr	r3, [pc, #16]	; (fe70 <ull_adv_is_enabled+0x14>)
    fe60:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
    fe64:	f000 0001 	and.w	r0, r0, #1
    fe68:	4770      	bx	lr
    fe6a:	2000      	movs	r0, #0
}
    fe6c:	4770      	bx	lr
    fe6e:	bf00      	nop
    fe70:	200032d4 	.word	0x200032d4

0000fe74 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    fe74:	b950      	cbnz	r0, fe8c <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    fe76:	4b06      	ldr	r3, [pc, #24]	; (fe90 <ull_adv_filter_pol_get+0x1c>)
    fe78:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
    fe7c:	f010 0001 	ands.w	r0, r0, #1
    fe80:	d005      	beq.n	fe8e <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    fe82:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    fe86:	f000 0003 	and.w	r0, r0, #3
    fe8a:	4770      	bx	lr
		return 0;
    fe8c:	2000      	movs	r0, #0
}
    fe8e:	4770      	bx	lr
    fe90:	200032d4 	.word	0x200032d4

0000fe94 <ull_adv_data_set>:
{
    fe94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    fe98:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    fe9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    fea0:	b082      	sub	sp, #8
    fea2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
    fea4:	7833      	ldrb	r3, [r6, #0]
    fea6:	f003 030f 	and.w	r3, r3, #15
    feaa:	2b01      	cmp	r3, #1
    feac:	d034      	beq.n	ff18 <ull_adv_data_set+0x84>
	if (len > PDU_AC_DATA_SIZE_MAX) {
    feae:	291f      	cmp	r1, #31
    feb0:	460d      	mov	r5, r1
    feb2:	d82d      	bhi.n	ff10 <ull_adv_data_set+0x7c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    feb4:	4604      	mov	r4, r0
    feb6:	f10d 0107 	add.w	r1, sp, #7
    feba:	302c      	adds	r0, #44	; 0x2c
    febc:	4690      	mov	r8, r2
    febe:	f006 fa25 	bl	1630c <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    fec2:	7832      	ldrb	r2, [r6, #0]
    fec4:	f3c2 1140 	ubfx	r1, r2, #5, #1
	pdu->type = prev->type;
    fec8:	f3c2 0303 	ubfx	r3, r2, #0, #4
    fecc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	pdu->tx_addr = prev->tx_addr;
    fed0:	f3c2 1180 	ubfx	r1, r2, #6, #1
	pdu->type = prev->type;
    fed4:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    fed8:	f002 0280 	and.w	r2, r2, #128	; 0x80
    fedc:	4601      	mov	r1, r0
    fede:	4313      	orrs	r3, r2
    fee0:	f801 3b02 	strb.w	r3, [r1], #2
    fee4:	f856 3f02 	ldr.w	r3, [r6, #2]!
    fee8:	f8c0 3002 	str.w	r3, [r0, #2]
    feec:	88b3      	ldrh	r3, [r6, #4]
    feee:	808b      	strh	r3, [r1, #4]
    fef0:	4607      	mov	r7, r0
    fef2:	462a      	mov	r2, r5
    fef4:	4641      	mov	r1, r8
    fef6:	3008      	adds	r0, #8
    fef8:	f01b fc5b 	bl	2b7b2 <memcpy>
	pdu->last = idx;
    fefc:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
    ff00:	3506      	adds	r5, #6
	return 0;
    ff02:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
    ff04:	707d      	strb	r5, [r7, #1]
    ff06:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
    ff0a:	b002      	add	sp, #8
    ff0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
    ff10:	2012      	movs	r0, #18
}
    ff12:	b002      	add	sp, #8
    ff14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    ff18:	2000      	movs	r0, #0
}
    ff1a:	b002      	add	sp, #8
    ff1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ff20 <ll_adv_data_set>:
{
    ff20:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    ff22:	4601      	mov	r1, r0
    ff24:	4801      	ldr	r0, [pc, #4]	; (ff2c <ll_adv_data_set+0xc>)
    ff26:	f7ff bfb5 	b.w	fe94 <ull_adv_data_set>
    ff2a:	bf00      	nop
    ff2c:	200032d4 	.word	0x200032d4

0000ff30 <ull_scan_rsp_set>:
{
    ff30:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ff32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    ff36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ff3a:	b083      	sub	sp, #12
    ff3c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    ff3e:	460e      	mov	r6, r1
    ff40:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    ff42:	f10d 0107 	add.w	r1, sp, #7
    ff46:	3038      	adds	r0, #56	; 0x38
    ff48:	4617      	mov	r7, r2
    ff4a:	f006 f9df 	bl	1630c <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    ff4e:	782b      	ldrb	r3, [r5, #0]
    ff50:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff54:	019b      	lsls	r3, r3, #6
	pdu->len = BDADDR_SIZE + len;
    ff56:	1db2      	adds	r2, r6, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff58:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
    ff5c:	7042      	strb	r2, [r0, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff5e:	7003      	strb	r3, [r0, #0]
    ff60:	f855 3f02 	ldr.w	r3, [r5, #2]!
    ff64:	f8c0 3002 	str.w	r3, [r0, #2]
    ff68:	88ab      	ldrh	r3, [r5, #4]
    ff6a:	80c3      	strh	r3, [r0, #6]
    ff6c:	4639      	mov	r1, r7
    ff6e:	4632      	mov	r2, r6
    ff70:	3008      	adds	r0, #8
    ff72:	f01b fc1e 	bl	2b7b2 <memcpy>
	pdu->last = idx;
    ff76:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
    ff7e:	2000      	movs	r0, #0
    ff80:	b003      	add	sp, #12
    ff82:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ff84 <ll_adv_scan_rsp_set>:
{
    ff84:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    ff86:	4601      	mov	r1, r0
    ff88:	4801      	ldr	r0, [pc, #4]	; (ff90 <ll_adv_scan_rsp_set+0xc>)
    ff8a:	f7ff bfd1 	b.w	ff30 <ull_scan_rsp_set>
    ff8e:	bf00      	nop
    ff90:	200032d4 	.word	0x200032d4

0000ff94 <ull_adv_pdu_update_addrs>:
{
    ff94:	b570      	push	{r4, r5, r6, lr}
    ff96:	460c      	mov	r4, r1
    ff98:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
    ff9a:	f005 f81b 	bl	14fd4 <ull_filter_adva_get>
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
		pdu->tx_addr = 1;
    ff9e:	7823      	ldrb	r3, [r4, #0]
	if (tx_addr) {
    ffa0:	b308      	cbz	r0, ffe6 <ull_adv_pdu_update_addrs+0x52>
		pdu->tx_addr = 1;
    ffa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ffa6:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ffa8:	7823      	ldrb	r3, [r4, #0]
    ffaa:	6802      	ldr	r2, [r0, #0]
    ffac:	f8c4 2002 	str.w	r2, [r4, #2]
    ffb0:	f003 030f 	and.w	r3, r3, #15
    ffb4:	8882      	ldrh	r2, [r0, #4]
    ffb6:	80e2      	strh	r2, [r4, #6]
    ffb8:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
    ffba:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ffbe:	d001      	beq.n	ffc4 <ull_adv_pdu_update_addrs+0x30>
}
    ffc0:	4630      	mov	r0, r6
    ffc2:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
    ffc4:	4628      	mov	r0, r5
    ffc6:	f005 f833 	bl	15030 <ull_filter_tgta_get>
	if (rx_addr) {
    ffca:	2800      	cmp	r0, #0
    ffcc:	d0f8      	beq.n	ffc0 <ull_adv_pdu_update_addrs+0x2c>
		pdu->rx_addr = 1;
    ffce:	7822      	ldrb	r2, [r4, #0]
    ffd0:	4623      	mov	r3, r4
    ffd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ffd6:	f803 2b08 	strb.w	r2, [r3], #8
    ffda:	6802      	ldr	r2, [r0, #0]
    ffdc:	60a2      	str	r2, [r4, #8]
    ffde:	8882      	ldrh	r2, [r0, #4]
    ffe0:	809a      	strh	r2, [r3, #4]
}
    ffe2:	4630      	mov	r0, r6
    ffe4:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
    ffe6:	4601      	mov	r1, r0
    ffe8:	f3c3 1080 	ubfx	r0, r3, #6, #1
    ffec:	f7fc fe8a 	bl	cd04 <ll_addr_get>
    fff0:	e7da      	b.n	ffa8 <ull_adv_pdu_update_addrs+0x14>
    fff2:	bf00      	nop

0000fff4 <tx_ull_dequeue>:
{
    fff4:	b410      	push	{r4}
    fff6:	e9d0 246f 	ldrd	r2, r4, [r0, #444]	; 0x1bc
    fffa:	4603      	mov	r3, r0
    fffc:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fffe:	b164      	cbz	r4, 1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
	if (conn->tx_head == conn->tx_ctrl) {
   10000:	4294      	cmp	r4, r2
   10002:	d027      	beq.n	10054 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x55>
		if (conn->tx_head == conn->tx_data) {
   10004:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
   10008:	4291      	cmp	r1, r2
   1000a:	d018      	beq.n	1003e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x3f>
		conn->tx_head = conn->tx_head->next;
   1000c:	6812      	ldr	r2, [r2, #0]
   1000e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		tx->next = NULL;
   10012:	2300      	movs	r3, #0
}
   10014:	bc10      	pop	{r4}
		tx->next = NULL;
   10016:	6003      	str	r3, [r0, #0]
}
   10018:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1001a:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
   1001e:	4291      	cmp	r1, r2
   10020:	d023      	beq.n	1006a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x6b>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10022:	7911      	ldrb	r1, [r2, #4]
   10024:	f001 0103 	and.w	r1, r1, #3
   10028:	2903      	cmp	r1, #3
   1002a:	d00d      	beq.n	10048 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x49>
		conn->tx_head = conn->tx_head->next;
   1002c:	6812      	ldr	r2, [r2, #0]
   1002e:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			conn->tx_ctrl = NULL;
   10032:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   10034:	e9c3 2270 	strd	r2, r2, [r3, #448]	; 0x1c0
}
   10038:	bc10      	pop	{r4}
		tx->next = tx;
   1003a:	6000      	str	r0, [r0, #0]
}
   1003c:	4770      	bx	lr
   1003e:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   10040:	6809      	ldr	r1, [r1, #0]
   10042:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
   10046:	e7e1      	b.n	1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>
		    ((pdu_data_tx->llctrl.opcode !=
   10048:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1004a:	2903      	cmp	r1, #3
   1004c:	d0de      	beq.n	1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1004e:	290a      	cmp	r1, #10
   10050:	d1ec      	bne.n	1002c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2d>
   10052:	e7db      	b.n	1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>
   10054:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
		conn->tx_head = conn->tx_head->next;
   10058:	6812      	ldr	r2, [r2, #0]
   1005a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1005e:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   10060:	bf18      	it	ne
   10062:	f8c3 21c0 	strne.w	r2, [r3, #448]	; 0x1c0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   10066:	d1e7      	bne.n	10038 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x39>
   10068:	e7e3      	b.n	10032 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33>
	if (conn->tx_head == conn->tx_ctrl) {
   1006a:	2a00      	cmp	r2, #0
   1006c:	d1e8      	bne.n	10040 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x41>
   1006e:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
   10072:	4614      	mov	r4, r2
   10074:	e7f0      	b.n	10058 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x59>
   10076:	bf00      	nop

00010078 <init_reset>:
{
   10078:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1007a:	4813      	ldr	r0, [pc, #76]	; (100c8 <init_reset+0x50>)
   1007c:	4b13      	ldr	r3, [pc, #76]	; (100cc <init_reset+0x54>)
   1007e:	2201      	movs	r2, #1
   10080:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10084:	f7fb fa1e 	bl	b4c4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   10088:	4b11      	ldr	r3, [pc, #68]	; (100d0 <init_reset+0x58>)
   1008a:	2203      	movs	r2, #3
   1008c:	1d18      	adds	r0, r3, #4
   1008e:	2124      	movs	r1, #36	; 0x24
   10090:	f7fb fa18 	bl	b4c4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   10094:	4b0f      	ldr	r3, [pc, #60]	; (100d4 <init_reset+0x5c>)
   10096:	2204      	movs	r2, #4
   10098:	1898      	adds	r0, r3, r2
   1009a:	2120      	movs	r1, #32
   1009c:	f7fb fa12 	bl	b4c4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   100a0:	4b0d      	ldr	r3, [pc, #52]	; (100d8 <init_reset+0x60>)
   100a2:	2207      	movs	r2, #7
   100a4:	1d18      	adds	r0, r3, #4
   100a6:	2108      	movs	r1, #8
   100a8:	f7fb fa0c 	bl	b4c4 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   100ac:	4b0b      	ldr	r3, [pc, #44]	; (100dc <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
   100ae:	490c      	ldr	r1, [pc, #48]	; (100e0 <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
   100b0:	4a0c      	ldr	r2, [pc, #48]	; (100e4 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   100b2:	480d      	ldr	r0, [pc, #52]	; (100e8 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   100b4:	251b      	movs	r5, #27
   100b6:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
   100b8:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   100ba:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
   100be:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   100c0:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   100c2:	8004      	strh	r4, [r0, #0]
}
   100c4:	2000      	movs	r0, #0
   100c6:	bd38      	pop	{r3, r4, r5, pc}
   100c8:	2000334c 	.word	0x2000334c
   100cc:	20003348 	.word	0x20003348
   100d0:	20003534 	.word	0x20003534
   100d4:	200035a4 	.word	0x200035a4
   100d8:	20003628 	.word	0x20003628
   100dc:	200080f4 	.word	0x200080f4
   100e0:	20008626 	.word	0x20008626
   100e4:	20008625 	.word	0x20008625
   100e8:	200080f6 	.word	0x200080f6

000100ec <ctrl_tx_pause_enqueue>:
{
   100ec:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   100ee:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
   100f2:	4604      	mov	r4, r0
   100f4:	460d      	mov	r5, r1
	if (
   100f6:	b11b      	cbz	r3, 10100 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   100f8:	f890 115e 	ldrb.w	r1, [r0, #350]	; 0x15e
	    conn->tx_head &&
   100fc:	0788      	lsls	r0, r1, #30
   100fe:	d50d      	bpl.n	1011c <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   10100:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   10104:	b301      	cbz	r1, 10148 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   10106:	bb4a      	cbnz	r2, 1015c <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   10108:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1010c:	681a      	ldr	r2, [r3, #0]
   1010e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   10110:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   10112:	682b      	ldr	r3, [r5, #0]
   10114:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   10118:	b19b      	cbz	r3, 10142 <ctrl_tx_pause_enqueue+0x56>
}
   1011a:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   1011c:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   10120:	07c9      	lsls	r1, r1, #31
   10122:	d4ed      	bmi.n	10100 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   10124:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   10128:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   1012a:	bf04      	itt	eq
   1012c:	6819      	ldreq	r1, [r3, #0]
   1012e:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   10132:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   10136:	b1f9      	cbz	r1, 10178 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   10138:	2a00      	cmp	r2, #0
   1013a:	d0e5      	beq.n	10108 <ctrl_tx_pause_enqueue+0x1c>
   1013c:	f240 73ef 	movw	r3, #2031	; 0x7ef
   10140:	e00e      	b.n	10160 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   10142:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   10146:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   10148:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1014a:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
			if (!pause) {
   1014e:	2a00      	cmp	r2, #0
   10150:	d1e2      	bne.n	10118 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   10152:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
   10156:	2b00      	cmp	r3, #0
   10158:	d1df      	bne.n	1011a <ctrl_tx_pause_enqueue+0x2e>
   1015a:	e7f2      	b.n	10142 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   1015c:	f640 0301 	movw	r3, #2049	; 0x801
   10160:	4a0a      	ldr	r2, [pc, #40]	; (1018c <ctrl_tx_pause_enqueue+0xa0>)
   10162:	490b      	ldr	r1, [pc, #44]	; (10190 <ctrl_tx_pause_enqueue+0xa4>)
   10164:	480b      	ldr	r0, [pc, #44]	; (10194 <ctrl_tx_pause_enqueue+0xa8>)
   10166:	f012 fe4e 	bl	22e06 <printk>
   1016a:	4040      	eors	r0, r0
   1016c:	f380 8811 	msr	BASEPRI, r0
   10170:	f04f 0003 	mov.w	r0, #3
   10174:	df02      	svc	2
   10176:	e7c7      	b.n	10108 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   10178:	6819      	ldr	r1, [r3, #0]
   1017a:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1017c:	601d      	str	r5, [r3, #0]
			if (!pause) {
   1017e:	b90a      	cbnz	r2, 10184 <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
   10180:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   10184:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   10186:	2b00      	cmp	r3, #0
   10188:	d1c7      	bne.n	1011a <ctrl_tx_pause_enqueue+0x2e>
   1018a:	e7da      	b.n	10142 <ctrl_tx_pause_enqueue+0x56>
   1018c:	0002caec 	.word	0x0002caec
   10190:	0002cb2c 	.word	0x0002cb2c
   10194:	0002c630 	.word	0x0002c630

00010198 <tx_lll_flush>:
{
   10198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1019c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   101a0:	4934      	ldr	r1, [pc, #208]	; (10274 <tx_lll_flush+0xdc>)
{
   101a2:	b083      	sub	sp, #12
   101a4:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   101a6:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   101aa:	4640      	mov	r0, r8
   101ac:	f7fb f9de 	bl	b56c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   101b0:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   101b4:	4629      	mov	r1, r5
   101b6:	f006 fd27 	bl	16c08 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   101ba:	6d28      	ldr	r0, [r5, #80]	; 0x50
   101bc:	4631      	mov	r1, r6
   101be:	aa01      	add	r2, sp, #4
   101c0:	f7fb fa12 	bl	b5e8 <memq_dequeue>
	while (link) {
   101c4:	b328      	cbz	r0, 10212 <tx_lll_flush+0x7a>
   101c6:	4c2c      	ldr	r4, [pc, #176]	; (10278 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   101c8:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   101cc:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   101d0:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   101d2:	f894 c001 	ldrb.w	ip, [r4, #1]
   101d6:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   101d8:	1c4b      	adds	r3, r1, #1
   101da:	b2db      	uxtb	r3, r3
		last = 0U;
   101dc:	459c      	cmp	ip, r3
   101de:	bf08      	it	eq
   101e0:	2300      	moveq	r3, #0
	if (last == first) {
   101e2:	429a      	cmp	r2, r3
   101e4:	d035      	beq.n	10252 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   101e6:	7822      	ldrb	r2, [r4, #0]
   101e8:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   101ec:	eb19 0c02 	adds.w	ip, r9, r2
   101f0:	d02f      	beq.n	10252 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   101f2:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   101f4:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   101f8:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   101fa:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   101fe:	6002      	str	r2, [r0, #0]
		tx->next = link;
   10200:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   10202:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   10204:	70e3      	strb	r3, [r4, #3]
   10206:	aa01      	add	r2, sp, #4
   10208:	4631      	mov	r1, r6
   1020a:	f7fb f9ed 	bl	b5e8 <memq_dequeue>
	while (link) {
   1020e:	2800      	cmp	r0, #0
   10210:	d1de      	bne.n	101d0 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   10212:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
	rx = (void *)&conn->llcp_terminate.node_rx;
   10216:	f508 749e 	add.w	r4, r8, #316	; 0x13c
	LL_ASSERT(rx->hdr.link);
   1021a:	b150      	cbz	r0, 10232 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1021c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1021e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   10220:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
	ull_rx_put(link, rx);
   10224:	f7ff f9f8 	bl	f618 <ull_rx_put>
	ull_rx_sched();
   10228:	f7ff fa06 	bl	f638 <ull_rx_sched>
}
   1022c:	b003      	add	sp, #12
   1022e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   10232:	4a12      	ldr	r2, [pc, #72]	; (1027c <tx_lll_flush+0xe4>)
   10234:	4912      	ldr	r1, [pc, #72]	; (10280 <tx_lll_flush+0xe8>)
   10236:	4813      	ldr	r0, [pc, #76]	; (10284 <tx_lll_flush+0xec>)
   10238:	f240 7394 	movw	r3, #1940	; 0x794
   1023c:	f012 fde3 	bl	22e06 <printk>
   10240:	4040      	eors	r0, r0
   10242:	f380 8811 	msr	BASEPRI, r0
   10246:	f04f 0003 	mov.w	r0, #3
   1024a:	df02      	svc	2
   1024c:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
   10250:	e7e4      	b.n	1021c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   10252:	4a0a      	ldr	r2, [pc, #40]	; (1027c <tx_lll_flush+0xe4>)
   10254:	490c      	ldr	r1, [pc, #48]	; (10288 <tx_lll_flush+0xf0>)
   10256:	480b      	ldr	r0, [pc, #44]	; (10284 <tx_lll_flush+0xec>)
   10258:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   1025c:	f012 fdd3 	bl	22e06 <printk>
   10260:	4040      	eors	r0, r0
   10262:	f380 8811 	msr	BASEPRI, r0
   10266:	f04f 0003 	mov.w	r0, #3
   1026a:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1026c:	2300      	movs	r3, #0
   1026e:	801b      	strh	r3, [r3, #0]
   10270:	deff      	udf	#255	; 0xff
   10272:	bf00      	nop
   10274:	2000334c 	.word	0x2000334c
   10278:	20000610 	.word	0x20000610
   1027c:	0002caec 	.word	0x0002caec
   10280:	0002cb3c 	.word	0x0002cb3c
   10284:	0002c630 	.word	0x0002c630
   10288:	0002cb34 	.word	0x0002cb34

0001028c <ticker_op_stop_cb>:
{
   1028c:	b510      	push	{r4, lr}
   1028e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10290:	b9b0      	cbnz	r0, 102c0 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   10292:	4b12      	ldr	r3, [pc, #72]	; (102dc <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   10294:	2200      	movs	r2, #0
   10296:	4611      	mov	r1, r2
   10298:	2002      	movs	r0, #2
	mfy.param = param;
   1029a:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1029c:	f7fb fa08 	bl	b6b0 <mayfly_enqueue>
	LL_ASSERT(!retval);
   102a0:	b900      	cbnz	r0, 102a4 <ticker_op_stop_cb+0x18>
}
   102a2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   102a4:	4a0e      	ldr	r2, [pc, #56]	; (102e0 <ticker_op_stop_cb+0x54>)
   102a6:	490f      	ldr	r1, [pc, #60]	; (102e4 <ticker_op_stop_cb+0x58>)
   102a8:	480f      	ldr	r0, [pc, #60]	; (102e8 <ticker_op_stop_cb+0x5c>)
   102aa:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
   102ae:	f012 fdaa 	bl	22e06 <printk>
   102b2:	4040      	eors	r0, r0
   102b4:	f380 8811 	msr	BASEPRI, r0
   102b8:	f04f 0003 	mov.w	r0, #3
   102bc:	df02      	svc	2
}
   102be:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   102c0:	4a07      	ldr	r2, [pc, #28]	; (102e0 <ticker_op_stop_cb+0x54>)
   102c2:	490a      	ldr	r1, [pc, #40]	; (102ec <ticker_op_stop_cb+0x60>)
   102c4:	4808      	ldr	r0, [pc, #32]	; (102e8 <ticker_op_stop_cb+0x5c>)
   102c6:	f240 63e1 	movw	r3, #1761	; 0x6e1
   102ca:	f012 fd9c 	bl	22e06 <printk>
   102ce:	4040      	eors	r0, r0
   102d0:	f380 8811 	msr	BASEPRI, r0
   102d4:	f04f 0003 	mov.w	r0, #3
   102d8:	df02      	svc	2
   102da:	e7da      	b.n	10292 <ticker_op_stop_cb+0x6>
   102dc:	20000688 	.word	0x20000688
   102e0:	0002caec 	.word	0x0002caec
   102e4:	0002c8ec 	.word	0x0002c8ec
   102e8:	0002c630 	.word	0x0002c630
   102ec:	0002cb4c 	.word	0x0002cb4c

000102f0 <ticker_start_conn_op_cb>:
{
   102f0:	b510      	push	{r4, lr}
   102f2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   102f4:	b990      	cbnz	r0, 1031c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   102f6:	4620      	mov	r0, r4
   102f8:	f7ff f8c8 	bl	f48c <ull_update_unmark>
	LL_ASSERT(p == param);
   102fc:	4284      	cmp	r4, r0
   102fe:	d00c      	beq.n	1031a <ticker_start_conn_op_cb+0x2a>
   10300:	4a0d      	ldr	r2, [pc, #52]	; (10338 <ticker_start_conn_op_cb+0x48>)
   10302:	490e      	ldr	r1, [pc, #56]	; (1033c <ticker_start_conn_op_cb+0x4c>)
   10304:	480e      	ldr	r0, [pc, #56]	; (10340 <ticker_start_conn_op_cb+0x50>)
   10306:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   1030a:	f012 fd7c 	bl	22e06 <printk>
   1030e:	4040      	eors	r0, r0
   10310:	f380 8811 	msr	BASEPRI, r0
   10314:	f04f 0003 	mov.w	r0, #3
   10318:	df02      	svc	2
}
   1031a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1031c:	4a06      	ldr	r2, [pc, #24]	; (10338 <ticker_start_conn_op_cb+0x48>)
   1031e:	4909      	ldr	r1, [pc, #36]	; (10344 <ticker_start_conn_op_cb+0x54>)
   10320:	4807      	ldr	r0, [pc, #28]	; (10340 <ticker_start_conn_op_cb+0x50>)
   10322:	f240 63d5 	movw	r3, #1749	; 0x6d5
   10326:	f012 fd6e 	bl	22e06 <printk>
   1032a:	4040      	eors	r0, r0
   1032c:	f380 8811 	msr	BASEPRI, r0
   10330:	f04f 0003 	mov.w	r0, #3
   10334:	df02      	svc	2
   10336:	e7de      	b.n	102f6 <ticker_start_conn_op_cb+0x6>
   10338:	0002caec 	.word	0x0002caec
   1033c:	0002cb58 	.word	0x0002cb58
   10340:	0002c630 	.word	0x0002c630
   10344:	0002cb4c 	.word	0x0002cb4c

00010348 <ticker_stop_conn_op_cb>:
{
   10348:	b510      	push	{r4, lr}
   1034a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1034c:	b990      	cbnz	r0, 10374 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1034e:	4620      	mov	r0, r4
   10350:	f7ff f890 	bl	f474 <ull_update_mark>
	LL_ASSERT(p == param);
   10354:	4284      	cmp	r4, r0
   10356:	d00c      	beq.n	10372 <ticker_stop_conn_op_cb+0x2a>
   10358:	4a0d      	ldr	r2, [pc, #52]	; (10390 <ticker_stop_conn_op_cb+0x48>)
   1035a:	490e      	ldr	r1, [pc, #56]	; (10394 <ticker_stop_conn_op_cb+0x4c>)
   1035c:	480e      	ldr	r0, [pc, #56]	; (10398 <ticker_stop_conn_op_cb+0x50>)
   1035e:	f240 63ce 	movw	r3, #1742	; 0x6ce
   10362:	f012 fd50 	bl	22e06 <printk>
   10366:	4040      	eors	r0, r0
   10368:	f380 8811 	msr	BASEPRI, r0
   1036c:	f04f 0003 	mov.w	r0, #3
   10370:	df02      	svc	2
}
   10372:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10374:	4a06      	ldr	r2, [pc, #24]	; (10390 <ticker_stop_conn_op_cb+0x48>)
   10376:	4909      	ldr	r1, [pc, #36]	; (1039c <ticker_stop_conn_op_cb+0x54>)
   10378:	4807      	ldr	r0, [pc, #28]	; (10398 <ticker_stop_conn_op_cb+0x50>)
   1037a:	f240 63cb 	movw	r3, #1739	; 0x6cb
   1037e:	f012 fd42 	bl	22e06 <printk>
   10382:	4040      	eors	r0, r0
   10384:	f380 8811 	msr	BASEPRI, r0
   10388:	f04f 0003 	mov.w	r0, #3
   1038c:	df02      	svc	2
   1038e:	e7de      	b.n	1034e <ticker_stop_conn_op_cb+0x6>
   10390:	0002caec 	.word	0x0002caec
   10394:	0002cb58 	.word	0x0002cb58
   10398:	0002c630 	.word	0x0002c630
   1039c:	0002cb4c 	.word	0x0002cb4c

000103a0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   103a0:	b900      	cbnz	r0, 103a4 <ticker_update_conn_op_cb+0x4>
   103a2:	4770      	bx	lr
{
   103a4:	b510      	push	{r4, lr}
   103a6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   103a8:	f7ff f87c 	bl	f4a4 <ull_update_mark_get>
   103ac:	4284      	cmp	r4, r0
   103ae:	d010      	beq.n	103d2 <ticker_update_conn_op_cb+0x32>
   103b0:	f7ff f85a 	bl	f468 <ull_disable_mark_get>
   103b4:	4284      	cmp	r4, r0
   103b6:	d00c      	beq.n	103d2 <ticker_update_conn_op_cb+0x32>
   103b8:	4a06      	ldr	r2, [pc, #24]	; (103d4 <ticker_update_conn_op_cb+0x34>)
   103ba:	4907      	ldr	r1, [pc, #28]	; (103d8 <ticker_update_conn_op_cb+0x38>)
   103bc:	4807      	ldr	r0, [pc, #28]	; (103dc <ticker_update_conn_op_cb+0x3c>)
   103be:	f240 63c2 	movw	r3, #1730	; 0x6c2
   103c2:	f012 fd20 	bl	22e06 <printk>
   103c6:	4040      	eors	r0, r0
   103c8:	f380 8811 	msr	BASEPRI, r0
   103cc:	f04f 0003 	mov.w	r0, #3
   103d0:	df02      	svc	2
}
   103d2:	bd10      	pop	{r4, pc}
   103d4:	0002caec 	.word	0x0002caec
   103d8:	0002cb64 	.word	0x0002cb64
   103dc:	0002c630 	.word	0x0002c630

000103e0 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   103e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   103e4:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   103e6:	4826      	ldr	r0, [pc, #152]	; (10480 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   103e8:	460e      	mov	r6, r1
   103ea:	4690      	mov	r8, r2
   103ec:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   103ee:	f7fb f889 	bl	b504 <mem_acquire>
	if (!tx) {
   103f2:	2800      	cmp	r0, #0
   103f4:	d041      	beq.n	1047a <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   103f6:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   103f8:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   103fa:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   103fc:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   10400:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10404:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   10406:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   10408:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1040a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1040c:	71c1      	strb	r1, [r0, #7]
	if (
   1040e:	b11a      	cbz	r2, 10418 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   10410:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	    conn->tx_head &&
   10414:	0799      	lsls	r1, r3, #30
   10416:	d510      	bpl.n	1043a <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   10418:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   1041c:	b33b      	cbz	r3, 1046e <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   1041e:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   10422:	681a      	ldr	r2, [r3, #0]
   10424:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10426:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   10428:	6802      	ldr	r2, [r0, #0]
   1042a:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   1042e:	b1da      	cbz	r2, 10468 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10430:	2301      	movs	r3, #1
   10432:	7033      	strb	r3, [r6, #0]

	return 0;
   10434:	2000      	movs	r0, #0
}
   10436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   1043a:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   1043e:	07db      	lsls	r3, r3, #31
   10440:	d4ea      	bmi.n	10418 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   10442:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   10446:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   10448:	bf04      	itt	eq
   1044a:	6813      	ldreq	r3, [r2, #0]
   1044c:	f8c5 31c8 	streq.w	r3, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   10450:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   10454:	2b00      	cmp	r3, #0
   10456:	d1e2      	bne.n	1041e <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   10458:	6813      	ldr	r3, [r2, #0]
   1045a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1045c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   1045e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   10460:	e9c5 0070 	strd	r0, r0, [r5, #448]	; 0x1c0
	if (!tx->next) {
   10464:	2a00      	cmp	r2, #0
   10466:	d1e3      	bne.n	10430 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   10468:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
   1046c:	e7e0      	b.n	10430 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   1046e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   10470:	e9c5 006f 	strd	r0, r0, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   10474:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
   10478:	e7d9      	b.n	1042e <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   1047a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1047e:	e7da      	b.n	10436 <reject_ext_ind_send.isra.0+0x56>
   10480:	200035a4 	.word	0x200035a4

00010484 <start_enc_rsp_send>:
{
   10484:	b570      	push	{r4, r5, r6, lr}
   10486:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   10488:	b179      	cbz	r1, 104aa <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   1048a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1048e:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   10490:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10494:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   10496:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1049a:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1049e:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   104a0:	704e      	strb	r6, [r1, #1]
	return 0;
   104a2:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   104a4:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   104a6:	70cd      	strb	r5, [r1, #3]
}
   104a8:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   104aa:	4826      	ldr	r0, [pc, #152]	; (10544 <start_enc_rsp_send+0xc0>)
   104ac:	f7fb f82a 	bl	b504 <mem_acquire>
		if (!tx) {
   104b0:	2800      	cmp	r0, #0
   104b2:	d043      	beq.n	1053c <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   104b4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   104b8:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   104ba:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   104be:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   104c0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   104c4:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   104c6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   104ca:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   104ce:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   104d0:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   104d2:	71c1      	strb	r1, [r0, #7]
	if (
   104d4:	b1e3      	cbz	r3, 10510 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   104d6:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   104da:	0791      	lsls	r1, r2, #30
   104dc:	d418      	bmi.n	10510 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   104de:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   104e2:	07d2      	lsls	r2, r2, #31
   104e4:	d414      	bmi.n	10510 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   104e6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   104ea:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   104ec:	bf04      	itt	eq
   104ee:	681a      	ldreq	r2, [r3, #0]
   104f0:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   104f4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   104f8:	b1ca      	cbz	r2, 1052e <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   104fa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   104fe:	681a      	ldr	r2, [r3, #0]
   10500:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10502:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   10504:	6803      	ldr	r3, [r0, #0]
   10506:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1050a:	b163      	cbz	r3, 10526 <start_enc_rsp_send+0xa2>
	return 0;
   1050c:	2000      	movs	r0, #0
}
   1050e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   10510:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   10514:	2a00      	cmp	r2, #0
   10516:	d1f0      	bne.n	104fa <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   10518:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1051a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1051e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   10522:	2b00      	cmp	r3, #0
   10524:	d1f2      	bne.n	1050c <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   10526:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	return 0;
   1052a:	4618      	mov	r0, r3
}
   1052c:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   1052e:	681a      	ldr	r2, [r3, #0]
   10530:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   10532:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   10534:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   10536:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   1053a:	e7e6      	b.n	1050a <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   1053c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10540:	bd70      	pop	{r4, r5, r6, pc}
   10542:	bf00      	nop
   10544:	200035a4 	.word	0x200035a4

00010548 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   10548:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   1054c:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   10550:	079b      	lsls	r3, r3, #30
{
   10552:	b570      	push	{r4, r5, r6, lr}
   10554:	4604      	mov	r4, r0
   10556:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   10558:	d509      	bpl.n	1056e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   1055a:	2a00      	cmp	r2, #0
   1055c:	d03d      	beq.n	105da <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   1055e:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   10562:	681a      	ldr	r2, [r3, #0]
   10564:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   10566:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   10568:	682b      	ldr	r3, [r5, #0]
   1056a:	b333      	cbz	r3, 105ba <ctrl_tx_sec_enqueue+0x72>
}
   1056c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   1056e:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
   10572:	b1e1      	cbz	r1, 105ae <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   10574:	f890 31b7 	ldrb.w	r3, [r0, #439]	; 0x1b7
   10578:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   1057c:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   10580:	4286      	cmp	r6, r0
   10582:	f003 0301 	and.w	r3, r3, #1
   10586:	d003      	beq.n	10590 <ctrl_tx_sec_enqueue+0x48>
   10588:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   1058c:	2803      	cmp	r0, #3
   1058e:	d02c      	beq.n	105ea <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   10590:	b9b3      	cbnz	r3, 105c0 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   10592:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   10596:	4299      	cmp	r1, r3
   10598:	d045      	beq.n	10626 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   1059a:	b99a      	cbnz	r2, 105c4 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   1059c:	680b      	ldr	r3, [r1, #0]
   1059e:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   105a0:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl = tx;
   105a2:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   105a4:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
		if (!tx->next) {
   105a8:	2b00      	cmp	r3, #0
   105aa:	d1df      	bne.n	1056c <ctrl_tx_sec_enqueue+0x24>
   105ac:	e005      	b.n	105ba <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   105ae:	b94a      	cbnz	r2, 105c4 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   105b0:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   105b2:	e9c0 556f 	strd	r5, r5, [r0, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   105b6:	f8c0 51c4 	str.w	r5, [r0, #452]	; 0x1c4
			conn->tx_data_last = tx;
   105ba:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   105be:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   105c0:	2a00      	cmp	r2, #0
   105c2:	d036      	beq.n	10632 <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   105c4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   105c8:	681a      	ldr	r2, [r3, #0]
   105ca:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   105cc:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   105ce:	682b      	ldr	r3, [r5, #0]
   105d0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
		if (!tx->next) {
   105d4:	2b00      	cmp	r3, #0
   105d6:	d1c9      	bne.n	1056c <ctrl_tx_sec_enqueue+0x24>
   105d8:	e7ef      	b.n	105ba <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   105da:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   105de:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   105e0:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
		if (!tx->next) {
   105e4:	2b00      	cmp	r3, #0
   105e6:	d1c1      	bne.n	1056c <ctrl_tx_sec_enqueue+0x24>
   105e8:	e7e7      	b.n	105ba <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   105ea:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   105ec:	f000 0003 	and.w	r0, r0, #3
   105f0:	2803      	cmp	r0, #3
   105f2:	d1cd      	bne.n	10590 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   105f4:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   105f6:	2803      	cmp	r0, #3
   105f8:	d001      	beq.n	105fe <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   105fa:	280a      	cmp	r0, #10
   105fc:	d1c8      	bne.n	10590 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   105fe:	b9f3      	cbnz	r3, 1063e <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   10600:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   10604:	428b      	cmp	r3, r1
   10606:	d022      	beq.n	1064e <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   10608:	b332      	cbz	r2, 10658 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   1060a:	f240 73ef 	movw	r3, #2031	; 0x7ef
			LL_ASSERT(!pause);
   1060e:	4a14      	ldr	r2, [pc, #80]	; (10660 <ctrl_tx_sec_enqueue+0x118>)
   10610:	4914      	ldr	r1, [pc, #80]	; (10664 <ctrl_tx_sec_enqueue+0x11c>)
   10612:	4815      	ldr	r0, [pc, #84]	; (10668 <ctrl_tx_sec_enqueue+0x120>)
   10614:	f012 fbf7 	bl	22e06 <printk>
   10618:	4040      	eors	r0, r0
   1061a:	f380 8811 	msr	BASEPRI, r0
   1061e:	f04f 0003 	mov.w	r0, #3
   10622:	df02      	svc	2
   10624:	e7ce      	b.n	105c4 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   10626:	680b      	ldr	r3, [r1, #0]
   10628:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1062c:	2a00      	cmp	r2, #0
   1062e:	d1c9      	bne.n	105c4 <ctrl_tx_sec_enqueue+0x7c>
   10630:	e7b4      	b.n	1059c <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   10632:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   10634:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   10638:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   1063c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   1063e:	b112      	cbz	r2, 10646 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   10640:	f640 0301 	movw	r3, #2049	; 0x801
   10644:	e7e3      	b.n	1060e <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   10646:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   10648:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   1064c:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   1064e:	680b      	ldr	r3, [r1, #0]
   10650:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   10654:	2a00      	cmp	r2, #0
   10656:	d1d8      	bne.n	1060a <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   10658:	680b      	ldr	r3, [r1, #0]
   1065a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   1065c:	600d      	str	r5, [r1, #0]
			if (!pause) {
   1065e:	e783      	b.n	10568 <ctrl_tx_sec_enqueue+0x20>
   10660:	0002caec 	.word	0x0002caec
   10664:	0002cb2c 	.word	0x0002cb2c
   10668:	0002c630 	.word	0x0002c630

0001066c <event_phy_upd_ind_prep>:
{
   1066c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   10670:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   10674:	f013 0201 	ands.w	r2, r3, #1
{
   10678:	4604      	mov	r4, r0
   1067a:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1067c:	f040 8090 	bne.w	107a0 <event_phy_upd_ind_prep+0x134>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   10680:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   10684:	1a69      	subs	r1, r5, r1
   10686:	0409      	lsls	r1, r1, #16
   10688:	f100 80d6 	bmi.w	10838 <event_phy_upd_ind_prep+0x1cc>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1068c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
   10690:	2900      	cmp	r1, #0
   10692:	469c      	mov	ip, r3
   10694:	f2c0 80fb 	blt.w	1088e <event_phy_upd_ind_prep+0x222>
			conn->llcp_ack = conn->llcp_req;
   10698:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1069c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		old_tx = lll->phy_tx;
   106a0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
   106a4:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		uint16_t eff_rx_time = lll->max_rx_time;
   106a8:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
   106ac:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   106b0:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   106b4:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   106b8:	f040 80c0 	bne.w	1083c <event_phy_upd_ind_prep+0x1d0>
		uint16_t eff_tx_time = lll->max_tx_time;
   106bc:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
   106c0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   106c4:	d008      	beq.n	106d8 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   106c6:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   106ca:	095b      	lsrs	r3, r3, #5
   106cc:	f363 0202 	bfi	r2, r3, #0, #3
   106d0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   106d4:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   106d8:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   106dc:	2d00      	cmp	r5, #0
   106de:	f000 80b6 	beq.w	1084e <event_phy_upd_ind_prep+0x1e2>
   106e2:	6828      	ldr	r0, [r5, #0]
   106e4:	2800      	cmp	r0, #0
   106e6:	f000 80b2 	beq.w	1084e <event_phy_upd_ind_prep+0x1e2>
		conn->llcp_rx = rx->hdr.link->mem;
   106ea:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   106ee:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   106f2:	6841      	ldr	r1, [r0, #4]
   106f4:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   106f8:	f01c 0f02 	tst.w	ip, #2
   106fc:	f3c3 0102 	ubfx	r1, r3, #0, #3
   10700:	f3c2 0e02 	ubfx	lr, r2, #0, #3
   10704:	f003 0307 	and.w	r3, r3, #7
   10708:	f002 0207 	and.w	r2, r2, #7
   1070c:	d102      	bne.n	10714 <event_phy_upd_ind_prep+0xa8>
   1070e:	4599      	cmp	r9, r3
   10710:	f000 80c5 	beq.w	1089e <event_phy_upd_ind_prep+0x232>
		rx->hdr.handle = lll->handle;
   10714:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   10716:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10718:	2219      	movs	r2, #25
		upd->status = 0U;
   1071a:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   1071c:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
   1071e:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10722:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
   10724:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   10726:	4629      	mov	r1, r5
   10728:	f7fe fde8 	bl	f2fc <ll_rx_put>
		rx = conn->llcp_rx;
   1072c:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   10730:	2d00      	cmp	r5, #0
   10732:	f000 809d 	beq.w	10870 <event_phy_upd_ind_prep+0x204>
   10736:	6828      	ldr	r0, [r5, #0]
   10738:	2800      	cmp	r0, #0
   1073a:	f000 8099 	beq.w	10870 <event_phy_upd_ind_prep+0x204>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1073e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
   10742:	6842      	ldr	r2, [r0, #4]
   10744:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((eff_tx_time <= lll->max_tx_time) &&
   10748:	42b3      	cmp	r3, r6
   1074a:	d30a      	bcc.n	10762 <event_phy_upd_ind_prep+0xf6>
   1074c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   10750:	d807      	bhi.n	10762 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   10752:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
   10756:	42bb      	cmp	r3, r7
   10758:	d303      	bcc.n	10762 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1075a:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1075e:	f240 80b0 	bls.w	108c2 <event_phy_upd_ind_prep+0x256>
		lll->max_tx_time = eff_tx_time;
   10762:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
   10766:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1076a:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1076c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   1076e:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10770:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10774:	2103      	movs	r1, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10776:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10778:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1077a:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1077c:	776a      	strb	r2, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1077e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   10782:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   10786:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10788:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1078a:	84aa      	strh	r2, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1078c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1078e:	84ee      	strh	r6, [r5, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10790:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   10792:	4629      	mov	r1, r5
   10794:	f7fe fdb2 	bl	f2fc <ll_rx_put>
}
   10798:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   1079c:	f7fe bdb8 	b.w	f310 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   107a0:	2002      	movs	r0, #2
   107a2:	f7fe fdbb 	bl	f31c <ll_pdu_rx_alloc_peek>
		if (!rx) {
   107a6:	4607      	mov	r7, r0
   107a8:	2800      	cmp	r0, #0
   107aa:	d045      	beq.n	10838 <event_phy_upd_ind_prep+0x1cc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   107ac:	487c      	ldr	r0, [pc, #496]	; (109a0 <event_phy_upd_ind_prep+0x334>)
   107ae:	f7fa fea9 	bl	b504 <mem_acquire>
		if (!tx) {
   107b2:	4606      	mov	r6, r0
   107b4:	2800      	cmp	r0, #0
   107b6:	d03f      	beq.n	10838 <event_phy_upd_ind_prep+0x1cc>
		conn->llcp.phy_upd_ind.initiate = 0U;
   107b8:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   107bc:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   107c0:	f3c3 0882 	ubfx	r8, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   107c4:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   107c8:	ea58 0802 	orrs.w	r8, r8, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
   107cc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
   107d0:	b2db      	uxtb	r3, r3
   107d2:	d17f      	bne.n	108d4 <event_phy_upd_ind_prep+0x268>
			conn->llcp_ack = conn->llcp_req;
   107d4:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
   107d8:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
   107dc:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   107de:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
   107e2:	f100 80ad 	bmi.w	10940 <event_phy_upd_ind_prep+0x2d4>
   107e6:	4643      	mov	r3, r8
   107e8:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
   107ea:	2205      	movs	r2, #5
   107ec:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   107ee:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107f2:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   107f4:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
   107f6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   107fa:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107fc:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   10800:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10802:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
   10804:	71f1      	strb	r1, [r6, #7]
	if (
   10806:	b13b      	cbz	r3, 10818 <event_phy_upd_ind_prep+0x1ac>
	    !conn->llcp_enc.pause_tx &&
   10808:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1080c:	0795      	lsls	r5, r2, #30
   1080e:	d403      	bmi.n	10818 <event_phy_upd_ind_prep+0x1ac>
	    !conn->llcp_phy.pause_tx &&
   10810:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   10814:	07d0      	lsls	r0, r2, #31
   10816:	d57a      	bpl.n	1090e <event_phy_upd_ind_prep+0x2a2>
		if (!conn->tx_ctrl) {
   10818:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1081c:	2a00      	cmp	r2, #0
   1081e:	f000 8089 	beq.w	10934 <event_phy_upd_ind_prep+0x2c8>
	tx->next = conn->tx_ctrl_last->next;
   10822:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   10826:	681a      	ldr	r2, [r3, #0]
   10828:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   1082a:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   1082c:	6833      	ldr	r3, [r6, #0]
   1082e:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
	if (!tx->next) {
   10832:	b90b      	cbnz	r3, 10838 <event_phy_upd_ind_prep+0x1cc>
		conn->tx_data_last = tx;
   10834:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
}
   10838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1083c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   10840:	f361 0202 	bfi	r2, r1, #0, #3
   10844:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   10848:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1084c:	e738      	b.n	106c0 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   1084e:	4a55      	ldr	r2, [pc, #340]	; (109a4 <event_phy_upd_ind_prep+0x338>)
   10850:	4955      	ldr	r1, [pc, #340]	; (109a8 <event_phy_upd_ind_prep+0x33c>)
   10852:	4856      	ldr	r0, [pc, #344]	; (109ac <event_phy_upd_ind_prep+0x340>)
   10854:	f640 732c 	movw	r3, #3884	; 0xf2c
   10858:	f012 fad5 	bl	22e06 <printk>
   1085c:	4040      	eors	r0, r0
   1085e:	f380 8811 	msr	BASEPRI, r0
   10862:	f04f 0003 	mov.w	r0, #3
   10866:	df02      	svc	2
   10868:	6828      	ldr	r0, [r5, #0]
   1086a:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
   1086e:	e73c      	b.n	106ea <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   10870:	4a4c      	ldr	r2, [pc, #304]	; (109a4 <event_phy_upd_ind_prep+0x338>)
   10872:	494d      	ldr	r1, [pc, #308]	; (109a8 <event_phy_upd_ind_prep+0x33c>)
   10874:	484d      	ldr	r0, [pc, #308]	; (109ac <event_phy_upd_ind_prep+0x340>)
   10876:	f640 7358 	movw	r3, #3928	; 0xf58
   1087a:	f012 fac4 	bl	22e06 <printk>
   1087e:	4040      	eors	r0, r0
   10880:	f380 8811 	msr	BASEPRI, r0
   10884:	f04f 0003 	mov.w	r0, #3
   10888:	df02      	svc	2
   1088a:	6828      	ldr	r0, [r5, #0]
   1088c:	e757      	b.n	1073e <event_phy_upd_ind_prep+0xd2>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1088e:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   10892:	2900      	cmp	r1, #0
   10894:	f43f af00 	beq.w	10698 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   10898:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
   1089c:	e700      	b.n	106a0 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1089e:	4590      	cmp	r8, r2
   108a0:	f47f af38 	bne.w	10714 <event_phy_upd_ind_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   108a4:	2301      	movs	r3, #1
   108a6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   108a8:	4629      	mov	r1, r5
   108aa:	f7fe fd27 	bl	f2fc <ll_rx_put>
				rx = conn->llcp_rx;
   108ae:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
				LL_ASSERT(rx && rx->hdr.link);
   108b2:	2d00      	cmp	r5, #0
   108b4:	d064      	beq.n	10980 <event_phy_upd_ind_prep+0x314>
   108b6:	6828      	ldr	r0, [r5, #0]
   108b8:	2800      	cmp	r0, #0
   108ba:	d061      	beq.n	10980 <event_phy_upd_ind_prep+0x314>
				conn->llcp_rx = rx->hdr.link->mem;
   108bc:	6843      	ldr	r3, [r0, #4]
   108be:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   108c2:	2301      	movs	r3, #1
   108c4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   108c6:	4629      	mov	r1, r5
   108c8:	f7fe fd18 	bl	f2fc <ll_rx_put>
}
   108cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   108d0:	f7fe bd1e 	b.w	f310 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   108d4:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   108d6:	4429      	add	r1, r5
							 lll->latency +
   108d8:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   108da:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
   108de:	f7fe fd3b 	bl	f358 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   108e2:	683b      	ldr	r3, [r7, #0]
   108e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108e8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   108ea:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
			rx = ll_pdu_rx_alloc();
   108ee:	f7fe fd33 	bl	f358 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   108f2:	6803      	ldr	r3, [r0, #0]
   108f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108f8:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   108fa:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   108fe:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
   10902:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
   10906:	f3c3 0882 	ubfx	r8, r3, #2, #3
   1090a:	095b      	lsrs	r3, r3, #5
   1090c:	e76d      	b.n	107ea <event_phy_upd_ind_prep+0x17e>
		if (conn->tx_head == conn->tx_data) {
   1090e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10912:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   10914:	bf04      	itt	eq
   10916:	681a      	ldreq	r2, [r3, #0]
   10918:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1091c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   10920:	2a00      	cmp	r2, #0
   10922:	f47f af7e 	bne.w	10822 <event_phy_upd_ind_prep+0x1b6>
			tx->next = conn->tx_head->next;
   10926:	681a      	ldr	r2, [r3, #0]
   10928:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   1092a:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   1092c:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   1092e:	e9c4 6670 	strd	r6, r6, [r4, #448]	; 0x1c0
   10932:	e77e      	b.n	10832 <event_phy_upd_ind_prep+0x1c6>
			tx->next = conn->tx_head;
   10934:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   10936:	e9c4 666f 	strd	r6, r6, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1093a:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
   1093e:	e778      	b.n	10832 <event_phy_upd_ind_prep+0x1c6>
				(void)ll_pdu_rx_alloc();
   10940:	f7fe fd0a 	bl	f358 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10944:	2319      	movs	r3, #25
				rx->hdr.handle = lll->handle;
   10946:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
   10948:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1094c:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
   1094e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
   10952:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
   10954:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
   10956:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1095a:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
   1095c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   10960:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10964:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
   10966:	4639      	mov	r1, r7
   10968:	f7fe fcc8 	bl	f2fc <ll_rx_put>
				ll_rx_sched();
   1096c:	f7fe fcd0 	bl	f310 <ll_rx_sched>
   10970:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   10974:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
   10978:	f3c3 0882 	ubfx	r8, r3, #2, #3
   1097c:	095b      	lsrs	r3, r3, #5
   1097e:	e734      	b.n	107ea <event_phy_upd_ind_prep+0x17e>
				LL_ASSERT(rx && rx->hdr.link);
   10980:	4a08      	ldr	r2, [pc, #32]	; (109a4 <event_phy_upd_ind_prep+0x338>)
   10982:	4909      	ldr	r1, [pc, #36]	; (109a8 <event_phy_upd_ind_prep+0x33c>)
   10984:	4809      	ldr	r0, [pc, #36]	; (109ac <event_phy_upd_ind_prep+0x340>)
   10986:	f640 733b 	movw	r3, #3899	; 0xf3b
   1098a:	f012 fa3c 	bl	22e06 <printk>
   1098e:	4040      	eors	r0, r0
   10990:	f380 8811 	msr	BASEPRI, r0
   10994:	f04f 0003 	mov.w	r0, #3
   10998:	df02      	svc	2
   1099a:	6828      	ldr	r0, [r5, #0]
   1099c:	e78e      	b.n	108bc <event_phy_upd_ind_prep+0x250>
   1099e:	bf00      	nop
   109a0:	200035a4 	.word	0x200035a4
   109a4:	0002caec 	.word	0x0002caec
   109a8:	0002cbb8 	.word	0x0002cbb8
   109ac:	0002c630 	.word	0x0002c630

000109b0 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   109b0:	4801      	ldr	r0, [pc, #4]	; (109b8 <ll_conn_acquire+0x8>)
   109b2:	f7fa bda7 	b.w	b504 <mem_acquire>
   109b6:	bf00      	nop
   109b8:	20003348 	.word	0x20003348

000109bc <ll_conn_release>:
	mem_release(conn, &conn_free);
   109bc:	4901      	ldr	r1, [pc, #4]	; (109c4 <ll_conn_release+0x8>)
   109be:	f7fa bdb7 	b.w	b530 <mem_release>
   109c2:	bf00      	nop
   109c4:	20003348 	.word	0x20003348

000109c8 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   109c8:	4902      	ldr	r1, [pc, #8]	; (109d4 <ll_conn_handle_get+0xc>)
   109ca:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   109ce:	f7fa bdcd 	b.w	b56c <mem_index_get>
   109d2:	bf00      	nop
   109d4:	2000334c 	.word	0x2000334c

000109d8 <ll_conn_get>:
{
   109d8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   109da:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   109de:	4801      	ldr	r0, [pc, #4]	; (109e4 <ll_conn_get+0xc>)
   109e0:	f7fa bdc0 	b.w	b564 <mem_get>
   109e4:	2000334c 	.word	0x2000334c

000109e8 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   109e8:	b958      	cbnz	r0, 10a02 <ll_connected_get+0x1a>
{
   109ea:	b508      	push	{r3, lr}
   109ec:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   109ee:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   109f2:	4805      	ldr	r0, [pc, #20]	; (10a08 <ll_connected_get+0x20>)
   109f4:	f7fa fdb6 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   109f8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   109fa:	b903      	cbnz	r3, 109fe <ll_connected_get+0x16>
}
   109fc:	bd08      	pop	{r3, pc}
		return NULL;
   109fe:	2000      	movs	r0, #0
}
   10a00:	bd08      	pop	{r3, pc}
		return NULL;
   10a02:	2000      	movs	r0, #0
}
   10a04:	4770      	bx	lr
   10a06:	bf00      	nop
   10a08:	2000334c 	.word	0x2000334c

00010a0c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   10a0c:	4801      	ldr	r0, [pc, #4]	; (10a14 <ll_tx_mem_acquire+0x8>)
   10a0e:	f7fa bd79 	b.w	b504 <mem_acquire>
   10a12:	bf00      	nop
   10a14:	20003534 	.word	0x20003534

00010a18 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   10a18:	4901      	ldr	r1, [pc, #4]	; (10a20 <ll_tx_mem_release+0x8>)
   10a1a:	f7fa bd89 	b.w	b530 <mem_release>
   10a1e:	bf00      	nop
   10a20:	20003534 	.word	0x20003534

00010a24 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10a24:	2800      	cmp	r0, #0
   10a26:	d13d      	bne.n	10aa4 <ll_tx_mem_enqueue+0x80>
{
   10a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a2a:	4602      	mov	r2, r0
   10a2c:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10a2e:	481f      	ldr	r0, [pc, #124]	; (10aac <ll_tx_mem_enqueue+0x88>)
   10a30:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10a34:	f7fa fd96 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10a38:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10a3a:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   10a3c:	b9e2      	cbnz	r2, 10a78 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   10a3e:	491c      	ldr	r1, [pc, #112]	; (10ab0 <ll_tx_mem_enqueue+0x8c>)
   10a40:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   10a42:	784e      	ldrb	r6, [r1, #1]
   10a44:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   10a46:	1c7b      	adds	r3, r7, #1
   10a48:	b2db      	uxtb	r3, r3
		last = 0U;
   10a4a:	429e      	cmp	r6, r3
   10a4c:	bf08      	it	eq
   10a4e:	2300      	moveq	r3, #0
	if (last == first) {
   10a50:	4298      	cmp	r0, r3
   10a52:	d014      	beq.n	10a7e <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10a54:	460e      	mov	r6, r1
   10a56:	f816 0b04 	ldrb.w	r0, [r6], #4
   10a5a:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   10a5e:	1837      	adds	r7, r6, r0
   10a60:	d00d      	beq.n	10a7e <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   10a62:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   10a64:	607d      	str	r5, [r7, #4]
   10a66:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   10a68:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   10a6a:	b958      	cbnz	r0, 10a84 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a6c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10a70:	2b00      	cmp	r3, #0
   10a72:	db11      	blt.n	10a98 <ll_tx_mem_enqueue+0x74>
	return 0;
   10a74:	2000      	movs	r0, #0
}
   10a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10a78:	f06f 0015 	mvn.w	r0, #21
}
   10a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   10a7e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   10a84:	4b0b      	ldr	r3, [pc, #44]	; (10ab4 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10a86:	2101      	movs	r1, #1
   10a88:	2003      	movs	r0, #3
		mfy.param = conn;
   10a8a:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10a8c:	f7fa fe10 	bl	b6b0 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a90:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10a94:	2b00      	cmp	r3, #0
   10a96:	daed      	bge.n	10a74 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   10a98:	4620      	mov	r0, r4
   10a9a:	2100      	movs	r1, #0
   10a9c:	f003 fe76 	bl	1478c <ull_slave_latency_cancel>
	return 0;
   10aa0:	2000      	movs	r0, #0
}
   10aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10aa4:	f06f 0015 	mvn.w	r0, #21
}
   10aa8:	4770      	bx	lr
   10aaa:	bf00      	nop
   10aac:	2000334c 	.word	0x2000334c
   10ab0:	20000654 	.word	0x20000654
   10ab4:	20000678 	.word	0x20000678

00010ab8 <ll_conn_update>:
{
   10ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10abc:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   10ac0:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   10ac4:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   10ac8:	2800      	cmp	r0, #0
   10aca:	d154      	bne.n	10b76 <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10acc:	460c      	mov	r4, r1
   10ace:	4616      	mov	r6, r2
   10ad0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10ad4:	4602      	mov	r2, r0
   10ad6:	4840      	ldr	r0, [pc, #256]	; (10bd8 <ll_conn_update+0x120>)
   10ad8:	461d      	mov	r5, r3
   10ada:	f7fa fd43 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10ade:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10ae0:	2b00      	cmp	r3, #0
   10ae2:	d148      	bne.n	10b76 <ll_conn_update+0xbe>
	if (!cmd) {
   10ae4:	b1e4      	cbz	r4, 10b20 <ll_conn_update+0x68>
		cmd--;
   10ae6:	3c01      	subs	r4, #1
		if (cmd) {
   10ae8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10aec:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
   10af0:	f890 117d 	ldrb.w	r1, [r0, #381]	; 0x17d
   10af4:	d04e      	beq.n	10b94 <ll_conn_update+0xdc>
			if ((conn->llcp_conn_param.req ==
   10af6:	428a      	cmp	r2, r1
   10af8:	d03a      	beq.n	10b70 <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
   10afa:	f890 217e 	ldrb.w	r2, [r0, #382]	; 0x17e
			     conn->llcp_conn_param.ack) ||
   10afe:	f002 0107 	and.w	r1, r2, #7
   10b02:	2903      	cmp	r1, #3
   10b04:	d134      	bne.n	10b70 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   10b06:	f004 0407 	and.w	r4, r4, #7
   10b0a:	f044 0408 	orr.w	r4, r4, #8
   10b0e:	f022 020f 	bic.w	r2, r2, #15
   10b12:	4314      	orrs	r4, r2
   10b14:	f880 417e 	strb.w	r4, [r0, #382]	; 0x17e
			conn->llcp_conn_param.status = status;
   10b18:	f880 617f 	strb.w	r6, [r0, #383]	; 0x17f
	return 0;
   10b1c:	4618      	mov	r0, r3
   10b1e:	e028      	b.n	10b72 <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
   10b20:	f890 317e 	ldrb.w	r3, [r0, #382]	; 0x17e
   10b24:	06d9      	lsls	r1, r3, #27
   10b26:	d529      	bpl.n	10b7c <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
   10b28:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   10b2c:	2b00      	cmp	r3, #0
   10b2e:	db4c      	blt.n	10bca <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   10b30:	f890 2110 	ldrb.w	r2, [r0, #272]	; 0x110
   10b34:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
   10b38:	4293      	cmp	r3, r2
   10b3a:	d119      	bne.n	10b70 <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10b3c:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
		conn->llcp_cu.interval = interval_max;
   10b40:	f8a0 9114 	strh.w	r9, [r0, #276]	; 0x114
		conn->llcp_cu.req++;
   10b44:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   10b46:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10b48:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   10b4c:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10b50:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   10b54:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   10b56:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
		conn->llcp_cu.latency = latency;
   10b5a:	f8a0 8116 	strh.w	r8, [r0, #278]	; 0x116
		conn->llcp_cu.timeout = timeout;
   10b5e:	f8a0 7118 	strh.w	r7, [r0, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10b62:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   10b66:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
	return 0;
   10b6a:	4618      	mov	r0, r3
}
   10b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10b70:	200c      	movs	r0, #12
}
   10b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10b76:	2002      	movs	r0, #2
}
   10b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   10b7c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   10b80:	07da      	lsls	r2, r3, #31
   10b82:	d503      	bpl.n	10b8c <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
   10b84:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
		    (!conn->common.fex_valid ||
   10b88:	079b      	lsls	r3, r3, #30
   10b8a:	d5cd      	bpl.n	10b28 <ll_conn_update+0x70>
   10b8c:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
   10b90:	f890 117d 	ldrb.w	r1, [r0, #381]	; 0x17d
			if (conn->llcp_conn_param.req !=
   10b94:	428a      	cmp	r2, r1
   10b96:	d1eb      	bne.n	10b70 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   10b98:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b9c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   10ba0:	f8a0 5180 	strh.w	r5, [r0, #384]	; 0x180
			conn->llcp_conn_param.state = cmd;
   10ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   10ba8:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   10baa:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10bae:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   10bb0:	f8a0 9182 	strh.w	r9, [r0, #386]	; 0x182
			conn->llcp_conn_param.req++;
   10bb4:	f880 217c 	strb.w	r2, [r0, #380]	; 0x17c
			conn->llcp_conn_param.latency = latency;
   10bb8:	f8a0 8184 	strh.w	r8, [r0, #388]	; 0x184
			conn->llcp_conn_param.timeout = timeout;
   10bbc:	f8a0 7186 	strh.w	r7, [r0, #390]	; 0x186
			conn->llcp_conn_param.state = cmd;
   10bc0:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10bc4:	db03      	blt.n	10bce <ll_conn_update+0x116>
	return 0;
   10bc6:	2000      	movs	r0, #0
   10bc8:	e7d3      	b.n	10b72 <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10bca:	201a      	movs	r0, #26
   10bcc:	e7d1      	b.n	10b72 <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
   10bce:	2100      	movs	r1, #0
   10bd0:	f003 fddc 	bl	1478c <ull_slave_latency_cancel>
	return 0;
   10bd4:	2000      	movs	r0, #0
   10bd6:	e7cc      	b.n	10b72 <ll_conn_update+0xba>
   10bd8:	2000334c 	.word	0x2000334c

00010bdc <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10bdc:	b9c8      	cbnz	r0, 10c12 <ll_chm_get+0x36>
{
   10bde:	b538      	push	{r3, r4, r5, lr}
   10be0:	4602      	mov	r2, r0
   10be2:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10be4:	480c      	ldr	r0, [pc, #48]	; (10c18 <ll_chm_get+0x3c>)
   10be6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10bea:	f7fa fcbb 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10bee:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10bf0:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10bf2:	b965      	cbnz	r5, 10c0e <ll_chm_get+0x32>
   10bf4:	f100 0238 	add.w	r2, r0, #56	; 0x38
		conn->chm_updated = 0U;
   10bf8:	f883 51d0 	strb.w	r5, [r3, #464]	; 0x1d0
   10bfc:	6811      	ldr	r1, [r2, #0]
   10bfe:	6021      	str	r1, [r4, #0]
   10c00:	7911      	ldrb	r1, [r2, #4]
   10c02:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   10c04:	f893 01d0 	ldrb.w	r0, [r3, #464]	; 0x1d0
   10c08:	2800      	cmp	r0, #0
   10c0a:	d1f5      	bne.n	10bf8 <ll_chm_get+0x1c>
}
   10c0c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c0e:	2002      	movs	r0, #2
}
   10c10:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c12:	2002      	movs	r0, #2
}
   10c14:	4770      	bx	lr
   10c16:	bf00      	nop
   10c18:	2000334c 	.word	0x2000334c

00010c1c <ll_terminate_ind_send>:
	switch (reason) {
   10c1c:	2929      	cmp	r1, #41	; 0x29
{
   10c1e:	b538      	push	{r3, r4, r5, lr}
   10c20:	460d      	mov	r5, r1
   10c22:	4604      	mov	r4, r0
	switch (reason) {
   10c24:	d819      	bhi.n	10c5a <ll_terminate_ind_send+0x3e>
   10c26:	2904      	cmp	r1, #4
   10c28:	d919      	bls.n	10c5e <ll_terminate_ind_send+0x42>
   10c2a:	1f4b      	subs	r3, r1, #5
   10c2c:	2b24      	cmp	r3, #36	; 0x24
   10c2e:	d816      	bhi.n	10c5e <ll_terminate_ind_send+0x42>
   10c30:	e8df f003 	tbb	[pc, r3]
   10c34:	15151517 	.word	0x15151517
   10c38:	15151515 	.word	0x15151515
   10c3c:	15151515 	.word	0x15151515
   10c40:	17171515 	.word	0x17171515
   10c44:	15151517 	.word	0x15151517
   10c48:	15151715 	.word	0x15151715
   10c4c:	15151515 	.word	0x15151515
   10c50:	15151515 	.word	0x15151515
   10c54:	15151515 	.word	0x15151515
   10c58:	17          	.byte	0x17
   10c59:	00          	.byte	0x00
   10c5a:	293b      	cmp	r1, #59	; 0x3b
   10c5c:	d001      	beq.n	10c62 <ll_terminate_ind_send+0x46>
   10c5e:	2012      	movs	r0, #18
}
   10c60:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   10c62:	b9a4      	cbnz	r4, 10c8e <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c64:	4622      	mov	r2, r4
   10c66:	480d      	ldr	r0, [pc, #52]	; (10c9c <ll_terminate_ind_send+0x80>)
   10c68:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10c6c:	f7fa fc7a 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10c70:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10c72:	b962      	cbnz	r2, 10c8e <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   10c74:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10c78:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   10c7c:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
	conn->llcp_terminate.req++;
   10c80:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10c82:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   10c84:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10c88:	db03      	blt.n	10c92 <ll_terminate_ind_send+0x76>
	return 0;
   10c8a:	4620      	mov	r0, r4
}
   10c8c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c8e:	2002      	movs	r0, #2
}
   10c90:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   10c92:	4621      	mov	r1, r4
   10c94:	f003 fd7a 	bl	1478c <ull_slave_latency_cancel>
	return 0;
   10c98:	4620      	mov	r0, r4
}
   10c9a:	bd38      	pop	{r3, r4, r5, pc}
   10c9c:	2000334c 	.word	0x2000334c

00010ca0 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10ca0:	b9d8      	cbnz	r0, 10cda <ll_feature_req_send+0x3a>
{
   10ca2:	b510      	push	{r4, lr}
   10ca4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10ca6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10caa:	480f      	ldr	r0, [pc, #60]	; (10ce8 <ll_feature_req_send+0x48>)
   10cac:	f7fa fc5a 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10cb0:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   10cb2:	b984      	cbnz	r4, 10cd6 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   10cb4:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   10cb8:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   10cbc:	428a      	cmp	r2, r1
   10cbe:	d108      	bne.n	10cd2 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10cc0:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   10cc4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10cc6:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   10cc8:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10ccc:	db07      	blt.n	10cde <ll_feature_req_send+0x3e>
	return 0;
   10cce:	4620      	mov	r0, r4
}
   10cd0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10cd2:	200c      	movs	r0, #12
}
   10cd4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10cd6:	2002      	movs	r0, #2
}
   10cd8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10cda:	2002      	movs	r0, #2
}
   10cdc:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   10cde:	4621      	mov	r1, r4
   10ce0:	f003 fd54 	bl	1478c <ull_slave_latency_cancel>
	return 0;
   10ce4:	4620      	mov	r0, r4
}
   10ce6:	bd10      	pop	{r4, pc}
   10ce8:	2000334c 	.word	0x2000334c

00010cec <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10cec:	b9d8      	cbnz	r0, 10d26 <ll_version_ind_send+0x3a>
{
   10cee:	b510      	push	{r4, lr}
   10cf0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10cf2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10cf6:	480f      	ldr	r0, [pc, #60]	; (10d34 <ll_version_ind_send+0x48>)
   10cf8:	f7fa fc34 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10cfc:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   10cfe:	b984      	cbnz	r4, 10d22 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   10d00:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   10d04:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   10d08:	428a      	cmp	r2, r1
   10d0a:	d108      	bne.n	10d1e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10d0c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   10d10:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10d12:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   10d14:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10d18:	db07      	blt.n	10d2a <ll_version_ind_send+0x3e>
	return 0;
   10d1a:	4620      	mov	r0, r4
}
   10d1c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10d1e:	200c      	movs	r0, #12
}
   10d20:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10d22:	2002      	movs	r0, #2
}
   10d24:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10d26:	2002      	movs	r0, #2
}
   10d28:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   10d2a:	4621      	mov	r1, r4
   10d2c:	f003 fd2e 	bl	1478c <ull_slave_latency_cancel>
	return 0;
   10d30:	4620      	mov	r0, r4
}
   10d32:	bd10      	pop	{r4, pc}
   10d34:	2000334c 	.word	0x2000334c

00010d38 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10d38:	2800      	cmp	r0, #0
   10d3a:	d147      	bne.n	10dcc <ll_length_req_send+0x94>
{
   10d3c:	b538      	push	{r3, r4, r5, lr}
   10d3e:	460d      	mov	r5, r1
   10d40:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10d42:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10d46:	4602      	mov	r2, r0
   10d48:	4824      	ldr	r0, [pc, #144]	; (10ddc <ll_length_req_send+0xa4>)
   10d4a:	f7fa fc0b 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10d4e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10d50:	bb1b      	cbnz	r3, 10d9a <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   10d52:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   10d56:	071a      	lsls	r2, r3, #28
   10d58:	d421      	bmi.n	10d9e <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   10d5a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   10d5e:	07d1      	lsls	r1, r2, #31
   10d60:	d503      	bpl.n	10d6a <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   10d62:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   10d66:	0692      	lsls	r2, r2, #26
   10d68:	d519      	bpl.n	10d9e <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   10d6a:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   10d6e:	f890 21a5 	ldrb.w	r2, [r0, #421]	; 0x1a5
   10d72:	428a      	cmp	r2, r1
   10d74:	d017      	beq.n	10da6 <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   10d76:	f003 0307 	and.w	r3, r3, #7
   10d7a:	2b03      	cmp	r3, #3
   10d7c:	d004      	beq.n	10d88 <ll_length_req_send+0x50>
   10d7e:	3303      	adds	r3, #3
   10d80:	f003 0307 	and.w	r3, r3, #7
   10d84:	2b01      	cmp	r3, #1
   10d86:	d80c      	bhi.n	10da2 <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   10d88:	f8b0 31b0 	ldrh.w	r3, [r0, #432]	; 0x1b0
   10d8c:	b94b      	cbnz	r3, 10da2 <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   10d8e:	f8a0 51b0 	strh.w	r5, [r0, #432]	; 0x1b0
				conn->llcp_length.cache.tx_time = tx_time;
   10d92:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
				return 0;
   10d96:	4618      	mov	r0, r3
}
   10d98:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10d9a:	2002      	movs	r0, #2
}
   10d9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10d9e:	201a      	movs	r0, #26
}
   10da0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10da2:	200c      	movs	r0, #12
}
   10da4:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10da6:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10daa:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   10dae:	f8a0 51aa 	strh.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_length.req++;
   10db2:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10db4:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10db8:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   10dba:	f880 21a4 	strb.w	r2, [r0, #420]	; 0x1a4
	conn->llcp_length.tx_time = tx_time;
   10dbe:	f8a0 41ae 	strh.w	r4, [r0, #430]	; 0x1ae
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10dc2:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10dc6:	db03      	blt.n	10dd0 <ll_length_req_send+0x98>
	return 0;
   10dc8:	2000      	movs	r0, #0
}
   10dca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10dcc:	2002      	movs	r0, #2
}
   10dce:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   10dd0:	2100      	movs	r1, #0
   10dd2:	f003 fcdb 	bl	1478c <ull_slave_latency_cancel>
	return 0;
   10dd6:	2000      	movs	r0, #0
}
   10dd8:	bd38      	pop	{r3, r4, r5, pc}
   10dda:	bf00      	nop
   10ddc:	2000334c 	.word	0x2000334c

00010de0 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   10de0:	4a03      	ldr	r2, [pc, #12]	; (10df0 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   10de2:	4b04      	ldr	r3, [pc, #16]	; (10df4 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   10de4:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   10de6:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   10de8:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   10dea:	800b      	strh	r3, [r1, #0]
}
   10dec:	4770      	bx	lr
   10dee:	bf00      	nop
   10df0:	200080f4 	.word	0x200080f4
   10df4:	200080f6 	.word	0x200080f6

00010df8 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   10df8:	4a02      	ldr	r2, [pc, #8]	; (10e04 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   10dfa:	4b03      	ldr	r3, [pc, #12]	; (10e08 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   10dfc:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   10dfe:	8019      	strh	r1, [r3, #0]
}
   10e00:	2000      	movs	r0, #0
   10e02:	4770      	bx	lr
   10e04:	200080f4 	.word	0x200080f4
   10e08:	200080f6 	.word	0x200080f6

00010e0c <ll_length_max_get>:
{
   10e0c:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10e0e:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10e10:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10e14:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10e16:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10e18:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10e1a:	801c      	strh	r4, [r3, #0]
}
   10e1c:	bc30      	pop	{r4, r5}
   10e1e:	4770      	bx	lr

00010e20 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10e20:	b9c0      	cbnz	r0, 10e54 <ll_phy_get+0x34>
{
   10e22:	b538      	push	{r3, r4, r5, lr}
   10e24:	460d      	mov	r5, r1
   10e26:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10e28:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10e2c:	4602      	mov	r2, r0
   10e2e:	480a      	ldr	r0, [pc, #40]	; (10e58 <ll_phy_get+0x38>)
   10e30:	f7fa fb98 	bl	b564 <mem_get>
   10e34:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10e36:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10e38:	b950      	cbnz	r0, 10e50 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   10e3a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   10e3e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   10e42:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   10e44:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   10e48:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10e4c:	7023      	strb	r3, [r4, #0]
}
   10e4e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e50:	2002      	movs	r0, #2
}
   10e52:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e54:	2002      	movs	r0, #2
}
   10e56:	4770      	bx	lr
   10e58:	2000334c 	.word	0x2000334c

00010e5c <ll_phy_default_set>:
	default_phy_tx = tx;
   10e5c:	4a02      	ldr	r2, [pc, #8]	; (10e68 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   10e5e:	4b03      	ldr	r3, [pc, #12]	; (10e6c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   10e60:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   10e62:	7019      	strb	r1, [r3, #0]
}
   10e64:	2000      	movs	r0, #0
   10e66:	4770      	bx	lr
   10e68:	20008626 	.word	0x20008626
   10e6c:	20008625 	.word	0x20008625

00010e70 <ll_phy_req_send>:
{
   10e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   10e72:	bbd8      	cbnz	r0, 10eec <ll_phy_req_send+0x7c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10e74:	460c      	mov	r4, r1
   10e76:	4615      	mov	r5, r2
   10e78:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10e7c:	4602      	mov	r2, r0
   10e7e:	4822      	ldr	r0, [pc, #136]	; (10f08 <ll_phy_req_send+0x98>)
   10e80:	461e      	mov	r6, r3
   10e82:	f7fa fb6f 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   10e86:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10e88:	bb83      	cbnz	r3, 10eec <ll_phy_req_send+0x7c>
	if (conn->llcp_phy.disabled ||
   10e8a:	f890 71b7 	ldrb.w	r7, [r0, #439]	; 0x1b7
   10e8e:	f017 0708 	ands.w	r7, r7, #8
   10e92:	d12e      	bne.n	10ef2 <ll_phy_req_send+0x82>
	    (conn->common.fex_valid &&
   10e94:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   10e98:	07db      	lsls	r3, r3, #31
   10e9a:	d504      	bpl.n	10ea6 <ll_phy_req_send+0x36>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   10e9c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   10ea0:	f413 6f10 	tst.w	r3, #2304	; 0x900
   10ea4:	d025      	beq.n	10ef2 <ll_phy_req_send+0x82>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   10ea6:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
   10eaa:	f890 21b5 	ldrb.w	r2, [r0, #437]	; 0x1b5
   10eae:	429a      	cmp	r2, r3
   10eb0:	d126      	bne.n	10f00 <ll_phy_req_send+0x90>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10eb2:	f004 0407 	and.w	r4, r4, #7
   10eb6:	00a4      	lsls	r4, r4, #2
   10eb8:	f8b0 11b6 	ldrh.w	r1, [r0, #438]	; 0x1b6
   10ebc:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   10ec0:	f006 0307 	and.w	r3, r6, #7
   10ec4:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   10ec8:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10ecc:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10ed0:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   10ed4:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   10ed8:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10eda:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10edc:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   10ede:	f880 21b4 	strb.w	r2, [r0, #436]	; 0x1b4
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10ee2:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10ee6:	db07      	blt.n	10ef8 <ll_phy_req_send+0x88>
}
   10ee8:	4638      	mov	r0, r7
   10eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10eec:	2702      	movs	r7, #2
}
   10eee:	4638      	mov	r0, r7
   10ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10ef2:	271a      	movs	r7, #26
}
   10ef4:	4638      	mov	r0, r7
   10ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   10ef8:	2100      	movs	r1, #0
   10efa:	f003 fc47 	bl	1478c <ull_slave_latency_cancel>
   10efe:	e7f3      	b.n	10ee8 <ll_phy_req_send+0x78>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10f00:	270c      	movs	r7, #12
}
   10f02:	4638      	mov	r0, r7
   10f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10f06:	bf00      	nop
   10f08:	2000334c 	.word	0x2000334c

00010f0c <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10f0c:	b9d8      	cbnz	r0, 10f46 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f0e:	4602      	mov	r2, r0
{
   10f10:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f12:	480e      	ldr	r0, [pc, #56]	; (10f4c <ll_apto_get+0x40>)
   10f14:	460c      	mov	r4, r1
   10f16:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10f1a:	f7fa fb23 	bl	b564 <mem_get>
   10f1e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10f20:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10f22:	b970      	cbnz	r0, 10f42 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   10f24:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   10f28:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   10f2a:	4a09      	ldr	r2, [pc, #36]	; (10f50 <ll_apto_get+0x44>)
   10f2c:	fb03 f301 	mul.w	r3, r3, r1
   10f30:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   10f34:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10f38:	fba2 2303 	umull	r2, r3, r2, r3
   10f3c:	099b      	lsrs	r3, r3, #6
   10f3e:	8023      	strh	r3, [r4, #0]
}
   10f40:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10f42:	2002      	movs	r0, #2
}
   10f44:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10f46:	2002      	movs	r0, #2
}
   10f48:	4770      	bx	lr
   10f4a:	bf00      	nop
   10f4c:	2000334c 	.word	0x2000334c
   10f50:	10624dd3 	.word	0x10624dd3

00010f54 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10f54:	b9d8      	cbnz	r0, 10f8e <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f56:	4602      	mov	r2, r0
{
   10f58:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f5a:	480e      	ldr	r0, [pc, #56]	; (10f94 <ll_apto_set+0x40>)
   10f5c:	460d      	mov	r5, r1
   10f5e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10f62:	f7fa faff 	bl	b564 <mem_get>
   10f66:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10f68:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10f6a:	b970      	cbnz	r0, 10f8a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   10f6c:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   10f6e:	f240 44e2 	movw	r4, #1250	; 0x4e2
   10f72:	fb04 f403 	mul.w	r4, r4, r3
   10f76:	f242 7310 	movw	r3, #10000	; 0x2710
   10f7a:	fb03 4305 	mla	r3, r3, r5, r4
   10f7e:	3b01      	subs	r3, #1
   10f80:	fbb3 f3f4 	udiv	r3, r3, r4
   10f84:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   10f88:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10f8a:	2002      	movs	r0, #2
}
   10f8c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10f8e:	2002      	movs	r0, #2
}
   10f90:	4770      	bx	lr
   10f92:	bf00      	nop
   10f94:	2000334c 	.word	0x2000334c

00010f98 <ull_conn_init>:
	err = init_reset();
   10f98:	f7ff b86e 	b.w	10078 <init_reset>

00010f9c <ull_conn_reset>:
{
   10f9c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f9e:	2200      	movs	r2, #0
   10fa0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10fa4:	4813      	ldr	r0, [pc, #76]	; (10ff4 <ull_conn_reset+0x58>)
   10fa6:	f7fa fadd 	bl	b564 <mem_get>
   10faa:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   10fac:	f100 021c 	add.w	r2, r0, #28
   10fb0:	4601      	mov	r1, r0
   10fb2:	2003      	movs	r0, #3
   10fb4:	f7fe faba 	bl	f52c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   10fb8:	b108      	cbz	r0, 10fbe <ull_conn_reset+0x22>
   10fba:	3078      	adds	r0, #120	; 0x78
   10fbc:	d10b      	bne.n	10fd6 <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   10fbe:	480e      	ldr	r0, [pc, #56]	; (10ff8 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   10fc0:	490e      	ldr	r1, [pc, #56]	; (10ffc <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   10fc2:	4a0f      	ldr	r2, [pc, #60]	; (11000 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   10fc4:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   10fc6:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   10fc8:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   10fca:	67a3      	str	r3, [r4, #120]	; 0x78
}
   10fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   10fd0:	6013      	str	r3, [r2, #0]
	err = init_reset();
   10fd2:	f7ff b851 	b.w	10078 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   10fd6:	4a0b      	ldr	r2, [pc, #44]	; (11004 <ull_conn_reset+0x68>)
   10fd8:	490b      	ldr	r1, [pc, #44]	; (11008 <ull_conn_reset+0x6c>)
   10fda:	480c      	ldr	r0, [pc, #48]	; (1100c <ull_conn_reset+0x70>)
   10fdc:	f240 63f4 	movw	r3, #1780	; 0x6f4
   10fe0:	f011 ff11 	bl	22e06 <printk>
   10fe4:	4040      	eors	r0, r0
   10fe6:	f380 8811 	msr	BASEPRI, r0
   10fea:	f04f 0003 	mov.w	r0, #3
   10fee:	df02      	svc	2
   10ff0:	e7e5      	b.n	10fbe <ull_conn_reset+0x22>
   10ff2:	bf00      	nop
   10ff4:	2000334c 	.word	0x2000334c
   10ff8:	20000654 	.word	0x20000654
   10ffc:	20000610 	.word	0x20000610
   11000:	20003520 	.word	0x20003520
   11004:	0002caec 	.word	0x0002caec
   11008:	0002cbfc 	.word	0x0002cbfc
   1100c:	0002c630 	.word	0x0002c630

00011010 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   11010:	4b01      	ldr	r3, [pc, #4]	; (11018 <ull_conn_default_tx_octets_get+0x8>)
}
   11012:	8818      	ldrh	r0, [r3, #0]
   11014:	4770      	bx	lr
   11016:	bf00      	nop
   11018:	200080f4 	.word	0x200080f4

0001101c <ull_conn_default_tx_time_get>:
	return default_tx_time;
   1101c:	4b01      	ldr	r3, [pc, #4]	; (11024 <ull_conn_default_tx_time_get+0x8>)
}
   1101e:	8818      	ldrh	r0, [r3, #0]
   11020:	4770      	bx	lr
   11022:	bf00      	nop
   11024:	200080f6 	.word	0x200080f6

00011028 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   11028:	4b01      	ldr	r3, [pc, #4]	; (11030 <ull_conn_default_phy_tx_get+0x8>)
}
   1102a:	7818      	ldrb	r0, [r3, #0]
   1102c:	4770      	bx	lr
   1102e:	bf00      	nop
   11030:	20008626 	.word	0x20008626

00011034 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   11034:	4b01      	ldr	r3, [pc, #4]	; (1103c <ull_conn_default_phy_rx_get+0x8>)
}
   11036:	7818      	ldrb	r0, [r3, #0]
   11038:	4770      	bx	lr
   1103a:	bf00      	nop
   1103c:	20008625 	.word	0x20008625

00011040 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   11040:	688b      	ldr	r3, [r1, #8]
   11042:	689b      	ldr	r3, [r3, #8]
{
   11044:	b510      	push	{r4, lr}
	switch (lll->role) {
   11046:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   1104a:	09e4      	lsrs	r4, r4, #7
   1104c:	d10d      	bne.n	1106a <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   1104e:	4a0a      	ldr	r2, [pc, #40]	; (11078 <ull_conn_setup+0x38>)
   11050:	490a      	ldr	r1, [pc, #40]	; (1107c <ull_conn_setup+0x3c>)
   11052:	480b      	ldr	r0, [pc, #44]	; (11080 <ull_conn_setup+0x40>)
   11054:	f240 331d 	movw	r3, #797	; 0x31d
   11058:	f011 fed5 	bl	22e06 <printk>
   1105c:	4040      	eors	r0, r0
   1105e:	f380 8811 	msr	BASEPRI, r0
   11062:	f04f 0003 	mov.w	r0, #3
   11066:	df02      	svc	2
}
   11068:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   1106a:	460a      	mov	r2, r1
}
   1106c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   11070:	3208      	adds	r2, #8
   11072:	f7ef bfe5 	b.w	1040 <ull_slave_setup>
   11076:	bf00      	nop
   11078:	0002caec 	.word	0x0002caec
   1107c:	0002c6a0 	.word	0x0002c6a0
   11080:	0002c630 	.word	0x0002c630

00011084 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   11084:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   11086:	88da      	ldrh	r2, [r3, #6]
   11088:	2a00      	cmp	r2, #0
   1108a:	f040 80ba 	bne.w	11202 <ull_conn_rx+0x17e>
{
   1108e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11092:	460c      	mov	r4, r1
   11094:	b085      	sub	sp, #20
   11096:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11098:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1109c:	48b7      	ldr	r0, [pc, #732]	; (1137c <ull_conn_rx+0x2f8>)
   1109e:	f7fa fa61 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   110a2:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   110a4:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   110a6:	2b00      	cmp	r3, #0
   110a8:	f040 80ec 	bne.w	11284 <ull_conn_rx+0x200>
	pdu_rx = (void *)(*rx)->pdu;
   110ac:	6826      	ldr	r6, [r4, #0]
	switch (pdu_rx->ll_id) {
   110ae:	f890 115e 	ldrb.w	r1, [r0, #350]	; 0x15e
   110b2:	7f32      	ldrb	r2, [r6, #28]
   110b4:	f002 0203 	and.w	r2, r2, #3
   110b8:	2a03      	cmp	r2, #3
   110ba:	f001 0001 	and.w	r0, r1, #1
   110be:	d128      	bne.n	11112 <ull_conn_rx+0x8e>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   110c0:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   110c4:	2800      	cmp	r0, #0
   110c6:	d03a      	beq.n	1113e <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   110c8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   110cc:	2b00      	cmp	r3, #0
   110ce:	f001 0004 	and.w	r0, r1, #4
   110d2:	f2c0 8567 	blt.w	11ba4 <ull_conn_rx+0xb20>
	return (!conn->lll.role &&
   110d6:	2800      	cmp	r0, #0
   110d8:	f040 84b5 	bne.w	11a46 <ull_conn_rx+0x9c2>
		((!conn->llcp_enc.refresh &&
   110dc:	f1b8 0f02 	cmp.w	r8, #2
   110e0:	f000 8365 	beq.w	117ae <ull_conn_rx+0x72a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   110e4:	f1b8 0f05 	cmp.w	r8, #5
   110e8:	d04b      	beq.n	11182 <ull_conn_rx+0xfe>
   110ea:	f1b8 0f06 	cmp.w	r8, #6
   110ee:	f000 857b 	beq.w	11be8 <ull_conn_rx+0xb64>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   110f2:	f1b8 0f0d 	cmp.w	r8, #13
   110f6:	f000 8197 	beq.w	11428 <ull_conn_rx+0x3a4>
   110fa:	f1b8 0f11 	cmp.w	r8, #17
   110fe:	f000 821d 	beq.w	1153c <ull_conn_rx+0x4b8>
		conn->llcp_terminate.reason_peer =
   11102:	233d      	movs	r3, #61	; 0x3d
   11104:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11108:	6823      	ldr	r3, [r4, #0]
   1110a:	2201      	movs	r2, #1
   1110c:	711a      	strb	r2, [r3, #4]

		return 0;
   1110e:	2000      	movs	r0, #0
   11110:	e008      	b.n	11124 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   11112:	b952      	cbnz	r2, 1112a <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   11114:	b118      	cbz	r0, 1111e <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_peer =
   11116:	233d      	movs	r3, #61	; 0x3d
   11118:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
   1111c:	6826      	ldr	r6, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1111e:	2301      	movs	r3, #1
   11120:	7133      	strb	r3, [r6, #4]
	return 0;
   11122:	2000      	movs	r0, #0
}
   11124:	b005      	add	sp, #20
   11126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   1112a:	2800      	cmp	r0, #0
   1112c:	d0f9      	beq.n	11122 <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
   1112e:	223d      	movs	r2, #61	; 0x3d
   11130:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11134:	6822      	ldr	r2, [r4, #0]
   11136:	2101      	movs	r1, #1
	return 0;
   11138:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1113a:	7111      	strb	r1, [r2, #4]
   1113c:	e7f2      	b.n	11124 <ull_conn_rx+0xa0>
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1113e:	f1b8 0f18 	cmp.w	r8, #24
   11142:	d81e      	bhi.n	11182 <ull_conn_rx+0xfe>
   11144:	e8df f018 	tbh	[pc, r8, lsl #1]
   11148:	033f02bc 	.word	0x033f02bc
   1114c:	03ec0333 	.word	0x03ec0333
   11150:	001d001d 	.word	0x001d001d
   11154:	03c60459 	.word	0x03c60459
   11158:	027e0373 	.word	0x027e0373
   1115c:	04390230 	.word	0x04390230
   11160:	017001b3 	.word	0x017001b3
   11164:	015f001d 	.word	0x015f001d
   11168:	01fa001d 	.word	0x01fa001d
   1116c:	015501e2 	.word	0x015501e2
   11170:	01200120 	.word	0x01200120
   11174:	001d00e8 	.word	0x001d00e8
   11178:	00a5      	.short	0x00a5
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1117a:	7f73      	ldrb	r3, [r6, #29]
   1117c:	2b01      	cmp	r3, #1
   1117e:	f000 8425 	beq.w	119cc <ull_conn_rx+0x948>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11182:	487f      	ldr	r0, [pc, #508]	; (11380 <ull_conn_rx+0x2fc>)
   11184:	f7fa f9be 	bl	b504 <mem_acquire>
	if (!tx) {
   11188:	2800      	cmp	r0, #0
   1118a:	f000 8682 	beq.w	11e92 <ull_conn_rx+0xe0e>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1118e:	2302      	movs	r3, #2
   11190:	7143      	strb	r3, [r0, #5]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11192:	7903      	ldrb	r3, [r0, #4]
	    conn->tx_head &&
   11194:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
	pdu->llctrl.unknown_rsp.type = type;
   11198:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1119c:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   111a0:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   111a2:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   111a4:	71c2      	strb	r2, [r0, #7]
	if (
   111a6:	b1e1      	cbz	r1, 111e2 <ull_conn_rx+0x15e>
	    !conn->llcp_enc.pause_tx &&
   111a8:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	    conn->tx_head &&
   111ac:	079a      	lsls	r2, r3, #30
   111ae:	d418      	bmi.n	111e2 <ull_conn_rx+0x15e>
	    !conn->llcp_phy.pause_tx &&
   111b0:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   111b4:	07db      	lsls	r3, r3, #31
   111b6:	d414      	bmi.n	111e2 <ull_conn_rx+0x15e>
		if (conn->tx_head == conn->tx_data) {
   111b8:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   111bc:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   111be:	bf04      	itt	eq
   111c0:	680b      	ldreq	r3, [r1, #0]
   111c2:	f8c5 31c8 	streq.w	r3, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   111c6:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   111ca:	b97b      	cbnz	r3, 111ec <ull_conn_rx+0x168>
			tx->next = conn->tx_head->next;
   111cc:	680b      	ldr	r3, [r1, #0]
   111ce:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   111d0:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   111d2:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   111d4:	e9c5 0070 	strd	r0, r0, [r5, #448]	; 0x1c0
	if (!tx->next) {
   111d8:	2900      	cmp	r1, #0
   111da:	d1a0      	bne.n	1111e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   111dc:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   111e0:	e79d      	b.n	1111e <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   111e2:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   111e6:	2b00      	cmp	r3, #0
   111e8:	f000 84f4 	beq.w	11bd4 <ull_conn_rx+0xb50>
	tx->next = conn->tx_ctrl_last->next;
   111ec:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   111f0:	681a      	ldr	r2, [r3, #0]
   111f2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   111f4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   111f6:	6801      	ldr	r1, [r0, #0]
   111f8:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   111fc:	2900      	cmp	r1, #0
   111fe:	d18e      	bne.n	1111e <ull_conn_rx+0x9a>
   11200:	e7ec      	b.n	111dc <ull_conn_rx+0x158>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11202:	2201      	movs	r2, #1
   11204:	711a      	strb	r2, [r3, #4]
		return 0;
   11206:	2000      	movs	r0, #0
}
   11208:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   1120a:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   1120e:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   11210:	f043 0303 	orr.w	r3, r3, #3
   11214:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   11218:	d10f      	bne.n	1123a <ull_conn_rx+0x1b6>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   1121a:	f8b5 21b6 	ldrh.w	r2, [r5, #438]	; 0x1b6
   1121e:	4859      	ldr	r0, [pc, #356]	; (11384 <ull_conn_rx+0x300>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   11220:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
					conn->llcp_phy.tx =
   11224:	4010      	ands	r0, r2
   11226:	f240 42fc 	movw	r2, #1276	; 0x4fc
   1122a:	ea02 0283 	and.w	r2, r2, r3, lsl #2
   1122e:	4302      	orrs	r2, r0
					conn->llcp_phy.ack--;
   11230:	1e4b      	subs	r3, r1, #1
   11232:	f885 31b5 	strb.w	r3, [r5, #437]	; 0x1b5
					conn->llcp_phy.tx =
   11236:	f8a5 21b6 	strh.w	r2, [r5, #438]	; 0x1b6
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   1123a:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
				conn->llcp_phy.tx &= p->rx_phys;
   1123e:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   11242:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   11246:	f3c2 0082 	ubfx	r0, r2, #2, #3
   1124a:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   1124c:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   11250:	009b      	lsls	r3, r3, #2
   11252:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   11256:	f002 0203 	and.w	r2, r2, #3
   1125a:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1125c:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   11260:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   11264:	d002      	beq.n	1126c <ull_conn_rx+0x1e8>
   11266:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1126a:	d105      	bne.n	11278 <ull_conn_rx+0x1f4>
					conn->llcp_phy.tx = 0;
   1126c:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   11270:	f003 0303 	and.w	r3, r3, #3
   11274:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   11278:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   1127c:	f043 0301 	orr.w	r3, r3, #1
   11280:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11284:	6823      	ldr	r3, [r4, #0]
   11286:	2201      	movs	r2, #1
	int nack = 0;
   11288:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1128a:	711a      	strb	r2, [r3, #4]
}
   1128c:	b005      	add	sp, #20
   1128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   11292:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11296:	2b00      	cmp	r3, #0
   11298:	f6bf af73 	bge.w	11182 <ull_conn_rx+0xfe>
   1129c:	7f73      	ldrb	r3, [r6, #29]
   1129e:	2b05      	cmp	r3, #5
   112a0:	f47f af6f 	bne.w	11182 <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   112a4:	f896 1020 	ldrb.w	r1, [r6, #32]
   112a8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   112ac:	ea41 0003 	orr.w	r0, r1, r3
   112b0:	f010 0007 	ands.w	r0, r0, #7
   112b4:	f040 8707 	bne.w	120c6 <ull_conn_rx+0x1042>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   112b8:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   112bc:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   112c0:	428b      	cmp	r3, r1
   112c2:	f43f af2c 	beq.w	1111e <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   112c6:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   112ca:	f003 0303 	and.w	r3, r3, #3
   112ce:	2b02      	cmp	r3, #2
   112d0:	f47f af25 	bne.w	1111e <ull_conn_rx+0x9a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   112d4:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   112d8:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   112dc:	f885 11b5 	strb.w	r1, [r5, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   112e0:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   112e4:	4611      	mov	r1, r2
   112e6:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   112ea:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
		if (!conn->llcp_phy.cmd) {
   112ee:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   112f2:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   112f6:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   112fa:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   112fe:	f43f af19 	beq.w	11134 <ull_conn_rx+0xb0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11302:	6823      	ldr	r3, [r4, #0]
   11304:	2119      	movs	r1, #25
   11306:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   11308:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   1130a:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   1130c:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   11310:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11314:	77b3      	strb	r3, [r6, #30]
				 pdu_rx->len)) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   11316:	e705      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   11318:	7f73      	ldrb	r3, [r6, #29]
   1131a:	2b03      	cmp	r3, #3
   1131c:	f47f af31 	bne.w	11182 <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   11320:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11324:	2b00      	cmp	r3, #0
   11326:	f2c0 8523 	blt.w	11d70 <ull_conn_rx+0xcec>
			if ((conn->llcp_phy.ack !=
   1132a:	f895 11b5 	ldrb.w	r1, [r5, #437]	; 0x1b5
			     conn->llcp_phy.req) &&
   1132e:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
			if ((conn->llcp_phy.ack !=
   11332:	4281      	cmp	r1, r0
   11334:	d007      	beq.n	11346 <ull_conn_rx+0x2c2>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   11336:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   1133a:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   1133e:	3b01      	subs	r3, #1
   11340:	2b02      	cmp	r3, #2
   11342:	f240 878c 	bls.w	1225e <ull_conn_rx+0x11da>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   11346:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   1134a:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   1134e:	1a9b      	subs	r3, r3, r2
   11350:	f003 0303 	and.w	r3, r3, #3
   11354:	2b02      	cmp	r3, #2
   11356:	f000 86af 	beq.w	120b8 <ull_conn_rx+0x1034>
				     LLCP_ENCRYPTION)) ||
   1135a:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   1135e:	f895 317d 	ldrb.w	r3, [r5, #381]	; 0x17d
   11362:	429a      	cmp	r2, r3
   11364:	f43f af51 	beq.w	1120a <ull_conn_rx+0x186>
				nack = reject_ext_ind_send(conn, *rx,
   11368:	1d31      	adds	r1, r6, #4
   1136a:	4628      	mov	r0, r5
   1136c:	232a      	movs	r3, #42	; 0x2a
   1136e:	2216      	movs	r2, #22
}
   11370:	b005      	add	sp, #20
   11372:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   11376:	f7ff b833 	b.w	103e0 <reject_ext_ind_send.isra.0>
   1137a:	bf00      	nop
   1137c:	2000334c 	.word	0x2000334c
   11380:	200035a4 	.word	0x200035a4
   11384:	fffffb03 	.word	0xfffffb03
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   11388:	7f73      	ldrb	r3, [r6, #29]
   1138a:	2b09      	cmp	r3, #9
   1138c:	f47f aef9 	bne.w	11182 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11390:	f1b8 0f14 	cmp.w	r8, #20
   11394:	f000 8477 	beq.w	11c86 <ull_conn_rx+0xc02>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11398:	f895 31a4 	ldrb.w	r3, [r5, #420]	; 0x1a4
	if (/* Local idle, and Peer request then complete the Peer procedure
   1139c:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   113a0:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   113a4:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   113a8:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   113ac:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   113b0:	9300      	str	r3, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   113b2:	4299      	cmp	r1, r3
	eff_rx_octets = conn->lll.max_rx_octets;
   113b4:	9201      	str	r2, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   113b6:	f000 87f1 	beq.w	1239c <ull_conn_rx+0x1318>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   113ba:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
	struct node_tx *tx = NULL;
   113be:	2100      	movs	r1, #0
	       tx) ||
   113c0:	f002 0207 	and.w	r2, r2, #7
   113c4:	2a02      	cmp	r2, #2
   113c6:	f000 8476 	beq.w	11cb6 <ull_conn_rx+0xc32>
   113ca:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   113ce:	f1b8 0f15 	cmp.w	r8, #21
   113d2:	f43f aea6 	beq.w	11122 <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   113d6:	4608      	mov	r0, r1
   113d8:	49b5      	ldr	r1, [pc, #724]	; (116b0 <ull_conn_rx+0x62c>)
   113da:	f7fa f8a9 	bl	b530 <mem_release>
			if (conn->llcp_length.state ==
   113de:	f895 31a6 	ldrb.w	r3, [r5, #422]	; 0x1a6
   113e2:	f003 0307 	and.w	r3, r3, #7
   113e6:	2b04      	cmp	r3, #4
   113e8:	f47f ae9b 	bne.w	11122 <ull_conn_rx+0x9e>
				return -EBUSY;
   113ec:	f06f 000f 	mvn.w	r0, #15
   113f0:	e698      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   113f2:	7f71      	ldrb	r1, [r6, #29]
   113f4:	2901      	cmp	r1, #1
   113f6:	f47f aec4 	bne.w	11182 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   113fa:	2300      	movs	r3, #0
   113fc:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   11400:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11402:	7131      	strb	r1, [r6, #4]
		break;
   11404:	e68e      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   11406:	7f73      	ldrb	r3, [r6, #29]
   11408:	2b18      	cmp	r3, #24
   1140a:	f47f aeba 	bne.w	11182 <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1140e:	4fa9      	ldr	r7, [pc, #676]	; (116b4 <ull_conn_rx+0x630>)
   11410:	683b      	ldr	r3, [r7, #0]
   11412:	2b00      	cmp	r3, #0
   11414:	f000 840a 	beq.w	11c2c <ull_conn_rx+0xba8>
   11418:	429d      	cmp	r5, r3
   1141a:	f000 8407 	beq.w	11c2c <ull_conn_rx+0xba8>
			nack = reject_ext_ind_send(conn, *rx,
   1141e:	1d31      	adds	r1, r6, #4
   11420:	4628      	mov	r0, r5
   11422:	2320      	movs	r3, #32
   11424:	220f      	movs	r2, #15
   11426:	e7a3      	b.n	11370 <ull_conn_rx+0x2ec>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   11428:	7f73      	ldrb	r3, [r6, #29]
   1142a:	2b02      	cmp	r3, #2
   1142c:	f47f aea9 	bne.w	11182 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   11430:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   11434:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   11438:	429a      	cmp	r2, r3
   1143a:	d004      	beq.n	11446 <ull_conn_rx+0x3c2>
   1143c:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   11440:	2a03      	cmp	r2, #3
   11442:	f000 86fe 	beq.w	12242 <ull_conn_rx+0x11be>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11446:	f895 21b4 	ldrb.w	r2, [r5, #436]	; 0x1b4
   1144a:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   1144e:	4293      	cmp	r3, r2
   11450:	f000 86b1 	beq.w	121b6 <ull_conn_rx+0x1132>
		rej_ext_ind->error_code = rej_ind->error_code;
   11454:	f896 1020 	ldrb.w	r1, [r6, #32]
   11458:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1145c:	2923      	cmp	r1, #35	; 0x23
   1145e:	d012      	beq.n	11486 <ull_conn_rx+0x402>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11460:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11464:	f895 01b7 	ldrb.w	r0, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11468:	f885 21b5 	strb.w	r2, [r5, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1146c:	f3c3 0202 	ubfx	r2, r3, #0, #3
   11470:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11474:	f36f 0000 	bfc	r0, #0, #1
		conn->procedure_expire = 0U;
   11478:	2200      	movs	r2, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1147a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1147e:	f885 01b7 	strb.w	r0, [r5, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   11482:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   11486:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   1148a:	075f      	lsls	r7, r3, #29
   1148c:	f57f ae47 	bpl.w	1111e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11490:	2319      	movs	r3, #25
	p->status = rej_ext_ind->error_code;
   11492:	7731      	strb	r1, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11494:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   11496:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   1149a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1149e:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   114a0:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   114a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   114a8:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   114aa:	2000      	movs	r0, #0
   114ac:	e63a      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   114ae:	7f74      	ldrb	r4, [r6, #29]
   114b0:	2c06      	cmp	r4, #6
   114b2:	f47f ae66 	bne.w	11182 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   114b6:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
   114ba:	07da      	lsls	r2, r3, #31
   114bc:	f140 8538 	bpl.w	11f30 <ull_conn_rx+0xeac>
	} else if (!conn->llcp_version.rx) {
   114c0:	f013 0302 	ands.w	r3, r3, #2
   114c4:	f47f ae2b 	bne.w	1111e <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   114c8:	f895 2130 	ldrb.w	r2, [r5, #304]	; 0x130
		conn->procedure_expire = 0U;
   114cc:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   114d0:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
	conn->llcp_version.version_number = v->version_number;
   114d4:	f896 3020 	ldrb.w	r3, [r6, #32]
   114d8:	f885 3133 	strb.w	r3, [r5, #307]	; 0x133
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   114dc:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   114e0:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   114e4:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   114e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   114ec:	f8a5 2134 	strh.w	r2, [r5, #308]	; 0x134
		sys_le16_to_cpu(v->sub_version_number);
   114f0:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   114f4:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   114f8:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   114fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   11500:	f8a5 2136 	strh.w	r2, [r5, #310]	; 0x136
	conn->llcp_version.rx = 1U;
   11504:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	return 0;
   11508:	2000      	movs	r0, #0
   1150a:	e60b      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   1150c:	7f74      	ldrb	r4, [r6, #29]
   1150e:	2c01      	cmp	r4, #1
   11510:	f47f ae37 	bne.w	11182 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11514:	4866      	ldr	r0, [pc, #408]	; (116b0 <ull_conn_rx+0x62c>)
   11516:	f7f9 fff5 	bl	b504 <mem_acquire>
	if (!tx) {
   1151a:	4601      	mov	r1, r0
   1151c:	2800      	cmp	r0, #0
   1151e:	f000 84b8 	beq.w	11e92 <ull_conn_rx+0xe0e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11522:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   11524:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11526:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1152a:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1152c:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1152e:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11530:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11532:	f7ff f809 	bl	10548 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11536:	7134      	strb	r4, [r6, #4]
	return 0;
   11538:	2000      	movs	r0, #0
   1153a:	e5f3      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1153c:	7f73      	ldrb	r3, [r6, #29]
   1153e:	2b03      	cmp	r3, #3
   11540:	f47f ae1f 	bne.w	11182 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   11544:	f896 3020 	ldrb.w	r3, [r6, #32]
   11548:	3b03      	subs	r3, #3
   1154a:	2b13      	cmp	r3, #19
   1154c:	f63f ade7 	bhi.w	1111e <ull_conn_rx+0x9a>
   11550:	a201      	add	r2, pc, #4	; (adr r2, 11558 <ull_conn_rx+0x4d4>)
   11552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11556:	bf00      	nop
   11558:	00011b19 	.word	0x00011b19
   1155c:	0001111f 	.word	0x0001111f
   11560:	0001111f 	.word	0x0001111f
   11564:	0001111f 	.word	0x0001111f
   11568:	0001111f 	.word	0x0001111f
   1156c:	0001111f 	.word	0x0001111f
   11570:	0001111f 	.word	0x0001111f
   11574:	0001111f 	.word	0x0001111f
   11578:	0001111f 	.word	0x0001111f
   1157c:	0001111f 	.word	0x0001111f
   11580:	0001111f 	.word	0x0001111f
   11584:	0001111f 	.word	0x0001111f
   11588:	00011ab3 	.word	0x00011ab3
   1158c:	0001111f 	.word	0x0001111f
   11590:	0001111f 	.word	0x0001111f
   11594:	0001111f 	.word	0x0001111f
   11598:	0001111f 	.word	0x0001111f
   1159c:	00011a75 	.word	0x00011a75
   115a0:	0001111f 	.word	0x0001111f
   115a4:	00011b59 	.word	0x00011b59
		if (!conn->lll.role ||
   115a8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   115ac:	2b00      	cmp	r3, #0
   115ae:	f6bf ade8 	bge.w	11182 <ull_conn_rx+0xfe>
   115b2:	7f74      	ldrb	r4, [r6, #29]
   115b4:	2c01      	cmp	r4, #1
   115b6:	f47f ade4 	bne.w	11182 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   115ba:	483d      	ldr	r0, [pc, #244]	; (116b0 <ull_conn_rx+0x62c>)
   115bc:	f7f9 ffa2 	bl	b504 <mem_acquire>
		if (!tx) {
   115c0:	4603      	mov	r3, r0
   115c2:	2800      	cmp	r0, #0
   115c4:	f000 8465 	beq.w	11e92 <ull_conn_rx+0xe0e>
	conn->llcp_enc.pause_rx = 1U;
   115c8:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   115cc:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   115d0:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   115d4:	f36f 01c3 	bfc	r1, #3, #1
   115d8:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   115dc:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   115e0:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   115e2:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   115e6:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   115e8:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   115ec:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   115f0:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   115f2:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   115f4:	71d8      	strb	r0, [r3, #7]
	if (
   115f6:	2a00      	cmp	r2, #0
   115f8:	f000 830d 	beq.w	11c16 <ull_conn_rx+0xb92>
	    !conn->llcp_enc.pause_tx &&
   115fc:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
	    conn->tx_head &&
   11600:	0788      	lsls	r0, r1, #30
   11602:	f100 8308 	bmi.w	11c16 <ull_conn_rx+0xb92>
	    !conn->llcp_phy.pause_tx &&
   11606:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
   1160a:	07c9      	lsls	r1, r1, #31
   1160c:	f100 8303 	bmi.w	11c16 <ull_conn_rx+0xb92>
		if (conn->tx_head == conn->tx_data) {
   11610:	f8d5 11c8 	ldr.w	r1, [r5, #456]	; 0x1c8
   11614:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   11616:	bf04      	itt	eq
   11618:	6811      	ldreq	r1, [r2, #0]
   1161a:	f8c5 11c8 	streq.w	r1, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1161e:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   11622:	2900      	cmp	r1, #0
   11624:	f000 86cc 	beq.w	123c0 <ull_conn_rx+0x133c>
	tx->next = conn->tx_ctrl_last->next;
   11628:	f8d5 21c4 	ldr.w	r2, [r5, #452]	; 0x1c4
   1162c:	6811      	ldr	r1, [r2, #0]
   1162e:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   11630:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   11632:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
	if (!tx->next) {
   11636:	681a      	ldr	r2, [r3, #0]
   11638:	2a00      	cmp	r2, #0
   1163a:	f47f ad70 	bne.w	1111e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   1163e:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
   11642:	e56c      	b.n	1111e <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   11644:	7f73      	ldrb	r3, [r6, #29]
   11646:	2b09      	cmp	r3, #9
   11648:	f47f ad9b 	bne.w	11182 <ull_conn_rx+0xfe>
	       (features[1] << 8) | (features[2] << 16);
   1164c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   11650:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11654:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11658:	4917      	ldr	r1, [pc, #92]	; (116b8 <ull_conn_rx+0x634>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1165a:	4c18      	ldr	r4, [pc, #96]	; (116bc <ull_conn_rx+0x638>)
	       (features[1] << 8) | (features[2] << 16);
   1165c:	041b      	lsls	r3, r3, #16
   1165e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11662:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11664:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   11668:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1166a:	4013      	ands	r3, r2
   1166c:	f3c3 0310 	ubfx	r3, r3, #0, #17
   11670:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   11674:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   11678:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1167c:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11680:	041b      	lsls	r3, r3, #16
   11682:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11686:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   11688:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1168c:	f895 0124 	ldrb.w	r0, [r5, #292]	; 0x124
   11690:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
	       (features[1] << 8) | (features[2] << 16);
   11694:	430b      	orrs	r3, r1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11696:	401c      	ands	r4, r3
	conn->common.fex_valid = 1U;
   11698:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   1169c:	2300      	movs	r3, #0
	conn->llcp_feature.features_peer =
   1169e:	f8c5 412c 	str.w	r4, [r5, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   116a2:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	conn->procedure_expire = 0U;
   116a6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   116aa:	4618      	mov	r0, r3
}
   116ac:	e53a      	b.n	11124 <ull_conn_rx+0xa0>
   116ae:	bf00      	nop
   116b0:	200035a4 	.word	0x200035a4
   116b4:	20003520 	.word	0x20003520
   116b8:	fffe30d0 	.word	0xfffe30d0
   116bc:	0001ff7f 	.word	0x0001ff7f
		if (!conn->lll.role ||
   116c0:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   116c4:	2b00      	cmp	r3, #0
   116c6:	f6bf ad5c 	bge.w	11182 <ull_conn_rx+0xfe>
   116ca:	7f73      	ldrb	r3, [r6, #29]
   116cc:	2b0c      	cmp	r3, #12
   116ce:	f47f ad58 	bne.w	11182 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   116d2:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   116d6:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   116d8:	1ac3      	subs	r3, r0, r3
   116da:	041b      	lsls	r3, r3, #16
   116dc:	f100 85a9 	bmi.w	12232 <ull_conn_rx+0x11ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   116e0:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   116e4:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   116e8:	1a9b      	subs	r3, r3, r2
   116ea:	f003 0303 	and.w	r3, r3, #3
   116ee:	2b02      	cmp	r3, #2
   116f0:	f000 8605 	beq.w	122fe <ull_conn_rx+0x127a>
	if (!conn_upd_curr) {
   116f4:	4bdb      	ldr	r3, [pc, #876]	; (11a64 <ull_conn_rx+0x9e0>)
   116f6:	681a      	ldr	r2, [r3, #0]
   116f8:	2a00      	cmp	r2, #0
   116fa:	f000 8646 	beq.w	1238a <ull_conn_rx+0x1306>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   116fe:	f896 3020 	ldrb.w	r3, [r6, #32]
   11702:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   11706:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1170a:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1170e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   11712:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   11716:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1171a:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   1171e:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   11722:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   11726:	f8a5 2114 	strh.w	r2, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1172a:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   1172e:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   11732:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   11736:	f8a5 2116 	strh.w	r2, [r5, #278]	; 0x116
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1173a:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   1173e:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11742:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   11746:	f8a5 00ec 	strh.w	r0, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1174a:	f023 030f 	bic.w	r3, r3, #15
	link->mem = conn->llcp_rx;
   1174e:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11752:	f043 0308 	orr.w	r3, r3, #8
	conn->llcp_cu.ack--;
   11756:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11758:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   1175c:	f885 2111 	strb.w	r2, [r5, #273]	; 0x111
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11760:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
	conn->llcp_cu.timeout =
   11764:	f8a5 1118 	strh.w	r1, [r5, #280]	; 0x118
	link->mem = conn->llcp_rx;
   11768:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   1176a:	6823      	ldr	r3, [r4, #0]
   1176c:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1176e:	6823      	ldr	r3, [r4, #0]
   11770:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
	*rx = NULL;
   11774:	2300      	movs	r3, #0
   11776:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11778:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   1177c:	f895 317d 	ldrb.w	r3, [r5, #381]	; 0x17d
   11780:	4293      	cmp	r3, r2
   11782:	d007      	beq.n	11794 <ull_conn_rx+0x710>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11784:	f895 317e 	ldrb.w	r3, [r5, #382]	; 0x17e
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11788:	f003 0307 	and.w	r3, r3, #7
   1178c:	2b04      	cmp	r3, #4
   1178e:	d101      	bne.n	11794 <ull_conn_rx+0x710>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11790:	f885 217d 	strb.w	r2, [r5, #381]	; 0x17d
		conn->procedure_expire = 0U;
   11794:	2300      	movs	r3, #0
   11796:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   1179a:	4618      	mov	r0, r3
		break;
   1179c:	e4c2      	b.n	11124 <ull_conn_rx+0xa0>
		((!conn->llcp_enc.refresh &&
   1179e:	f1b8 0f07 	cmp.w	r8, #7
   117a2:	f000 8097 	beq.w	118d4 <ull_conn_rx+0x850>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   117a6:	f1b8 0f02 	cmp.w	r8, #2
   117aa:	f040 8209 	bne.w	11bc0 <ull_conn_rx+0xb3c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   117ae:	7f73      	ldrb	r3, [r6, #29]
   117b0:	2b02      	cmp	r3, #2
   117b2:	f47f ace6 	bne.w	11182 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   117b6:	f896 3020 	ldrb.w	r3, [r6, #32]
   117ba:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   117be:	2301      	movs	r3, #1
   117c0:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   117c2:	2000      	movs	r0, #0
}
   117c4:	e4ae      	b.n	11124 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   117c6:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   117ca:	2b00      	cmp	r3, #0
   117cc:	f6bf acd9 	bge.w	11182 <ull_conn_rx+0xfe>
   117d0:	7f73      	ldrb	r3, [r6, #29]
   117d2:	2b08      	cmp	r3, #8
   117d4:	f47f acd5 	bne.w	11182 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   117d8:	f8b6 0025 	ldrh.w	r0, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   117dc:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   117de:	1ac3      	subs	r3, r0, r3
   117e0:	041f      	lsls	r7, r3, #16
   117e2:	f100 8526 	bmi.w	12232 <ull_conn_rx+0x11ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   117e6:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   117ea:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   117ee:	1a9b      	subs	r3, r3, r2
   117f0:	f003 0303 	and.w	r3, r3, #3
   117f4:	2b02      	cmp	r3, #2
   117f6:	f000 8582 	beq.w	122fe <ull_conn_rx+0x127a>
   117fa:	4633      	mov	r3, r6
	conn->llcp.chan_map.initiate = 0U;
   117fc:	f895 10ec 	ldrb.w	r1, [r5, #236]	; 0xec
   11800:	f853 4f20 	ldr.w	r4, [r3, #32]!
   11804:	f8c5 40ed 	str.w	r4, [r5, #237]	; 0xed
   11808:	791b      	ldrb	r3, [r3, #4]
   1180a:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	conn->llcp_ack -= 2U;
   1180e:	3a02      	subs	r2, #2
	conn->llcp.chan_map.initiate = 0U;
   11810:	f36f 0100 	bfc	r1, #0, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   11814:	2402      	movs	r4, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11816:	2301      	movs	r3, #1
	conn->llcp.chan_map.instant = instant;
   11818:	f8a5 00f2 	strh.w	r0, [r5, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   1181c:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp.chan_map.initiate = 0U;
   11820:	f885 10ec 	strb.w	r1, [r5, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   11824:	f885 40ea 	strb.w	r4, [r5, #234]	; 0xea
	int nack = 0;
   11828:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1182a:	7133      	strb	r3, [r6, #4]
		if (err) {
   1182c:	e47a      	b.n	11124 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   1182e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11832:	2b00      	cmp	r3, #0
   11834:	f6bf aca5 	bge.w	11182 <ull_conn_rx+0xfe>
   11838:	7f74      	ldrb	r4, [r6, #29]
   1183a:	2c09      	cmp	r4, #9
   1183c:	f47f aca1 	bne.w	11182 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11840:	4889      	ldr	r0, [pc, #548]	; (11a68 <ull_conn_rx+0x9e4>)
   11842:	f7f9 fe5f 	bl	b504 <mem_acquire>
	if (!tx) {
   11846:	4601      	mov	r1, r0
   11848:	2800      	cmp	r0, #0
   1184a:	f000 8322 	beq.w	11e92 <ull_conn_rx+0xe0e>
	       (features[1] << 8) | (features[2] << 16);
   1184e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   11852:	f896 7021 	ldrb.w	r7, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11856:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   1185a:	4a84      	ldr	r2, [pc, #528]	; (11a6c <ull_conn_rx+0x9e8>)
   1185c:	041b      	lsls	r3, r3, #16
   1185e:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
   11862:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   11864:	f8d5 0128 	ldr.w	r0, [r5, #296]	; 0x128
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11868:	4f81      	ldr	r7, [pc, #516]	; (11a70 <ull_conn_rx+0x9ec>)
	       (features[1] << 8) | (features[2] << 16);
   1186a:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1186c:	4003      	ands	r3, r0
   1186e:	f3c3 0310 	ubfx	r3, r3, #0, #17
   11872:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   11876:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   1187a:	f896 c021 	ldrb.w	ip, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1187e:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11882:	041b      	lsls	r3, r3, #16
   11884:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   11888:	4303      	orrs	r3, r0
	conn->common.fex_valid = 1U;
   1188a:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   1188e:	4313      	orrs	r3, r2
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11890:	401f      	ands	r7, r3
__ssp_bos_icheck3(memset, void *, int)
   11892:	f04f 0800 	mov.w	r8, #0
	conn->common.fex_valid = 1U;
   11896:	f040 0301 	orr.w	r3, r0, #1
	conn->llcp_feature.features_peer =
   1189a:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   1189e:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
   118a2:	f8c1 8008 	str.w	r8, [r1, #8]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   118a6:	714c      	strb	r4, [r1, #5]
   118a8:	f8c1 800c 	str.w	r8, [r1, #12]
	feat_result &= 0xFF;
   118ac:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   118b0:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   118b2:	71cc      	strb	r4, [r1, #7]
	feat_result &= 0xFF;
   118b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   118b8:	f043 0303 	orr.w	r3, r3, #3
	dst[2] = val >> 16;
   118bc:	2401      	movs	r4, #1
	dst[1] = val >> 8;
   118be:	2741      	movs	r7, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
   118c0:	4628      	mov	r0, r5
	dst[0] = val;
   118c2:	720a      	strb	r2, [r1, #8]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   118c4:	710b      	strb	r3, [r1, #4]
	dst[1] = val >> 8;
   118c6:	724f      	strb	r7, [r1, #9]
	dst[2] = val >> 16;
   118c8:	728c      	strb	r4, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   118ca:	f7fe fe3d 	bl	10548 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   118ce:	7134      	strb	r4, [r6, #4]
	return 0;
   118d0:	4640      	mov	r0, r8
   118d2:	e427      	b.n	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   118d4:	7f73      	ldrb	r3, [r6, #29]
   118d6:	2b02      	cmp	r3, #2
   118d8:	f47f ac53 	bne.w	11182 <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   118dc:	f895 117d 	ldrb.w	r1, [r5, #381]	; 0x17d
   118e0:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   118e4:	f896 2020 	ldrb.w	r2, [r6, #32]
   118e8:	4299      	cmp	r1, r3
   118ea:	d002      	beq.n	118f2 <ull_conn_rx+0x86e>
			    conn->llcp_conn_param.req) &&
   118ec:	2a0f      	cmp	r2, #15
   118ee:	f000 82d4 	beq.w	11e9a <ull_conn_rx+0xe16>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   118f2:	f895 31a4 	ldrb.w	r3, [r5, #420]	; 0x1a4
   118f6:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
   118fa:	4299      	cmp	r1, r3
   118fc:	d002      	beq.n	11904 <ull_conn_rx+0x880>
   118fe:	2a14      	cmp	r2, #20
   11900:	f000 844f 	beq.w	121a2 <ull_conn_rx+0x111e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   11904:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   11908:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   1190c:	428b      	cmp	r3, r1
   1190e:	d002      	beq.n	11916 <ull_conn_rx+0x892>
   11910:	2a16      	cmp	r2, #22
   11912:	f000 84a9 	beq.w	12268 <ull_conn_rx+0x11e4>
			switch (llctrl->unknown_rsp.type) {
   11916:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11918:	bf04      	itt	eq
   1191a:	2301      	moveq	r3, #1
   1191c:	7133      	strbeq	r3, [r6, #4]
				break;
   1191e:	e739      	b.n	11794 <ull_conn_rx+0x710>
		if (!conn->lll.role ||
   11920:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11924:	2b00      	cmp	r3, #0
   11926:	f6bf ac2c 	bge.w	11182 <ull_conn_rx+0xfe>
   1192a:	7f73      	ldrb	r3, [r6, #29]
   1192c:	2b17      	cmp	r3, #23
   1192e:	f47f ac28 	bne.w	11182 <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   11932:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   11936:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   1193a:	1a9b      	subs	r3, r3, r2
   1193c:	f003 0303 	and.w	r3, r3, #3
   11940:	2b02      	cmp	r3, #2
   11942:	f000 85dc 	beq.w	124fe <ull_conn_rx+0x147a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11946:	4633      	mov	r3, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   11948:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   1194c:	f853 1f20 	ldr.w	r1, [r3, #32]!
   11950:	685b      	ldr	r3, [r3, #4]
   11952:	f8c5 3165 	str.w	r3, [r5, #357]	; 0x165
   11956:	f8c5 1161 	str.w	r1, [r5, #353]	; 0x161
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   1195a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   1195e:	f885 315f 	strb.w	r3, [r5, #351]	; 0x15f
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   11962:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   11966:	f885 3160 	strb.w	r3, [r5, #352]	; 0x160
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1196a:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1196c:	2301      	movs	r3, #1
   1196e:	f363 0201 	bfi	r2, r3, #0, #2
   11972:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11976:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   11978:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_enc.pause_rx = 1U;
   1197c:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   11980:	f8b5 10ca 	ldrh.w	r1, [r5, #202]	; 0xca
		conn->llcp_ack -= 2U;
   11984:	3a02      	subs	r2, #2
   11986:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   1198a:	2003      	movs	r0, #3
   1198c:	4632      	mov	r2, r6
   1198e:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
   11992:	f852 0f2a 	ldr.w	r0, [r2, #42]!
   11996:	6852      	ldr	r2, [r2, #4]
   11998:	f8c5 20fe 	str.w	r2, [r5, #254]	; 0xfe
   1199c:	f8c5 00fa 	str.w	r0, [r5, #250]	; 0xfa
   119a0:	f8d6 2032 	ldr.w	r2, [r6, #50]	; 0x32
   119a4:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		conn->llcp_enc.pause_rx = 1U;
   119a8:	f043 0301 	orr.w	r3, r3, #1
   119ac:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   119b0:	f8a5 10cc 	strh.w	r1, [r5, #204]	; 0xcc
	int nack = 0;
   119b4:	2000      	movs	r0, #0
		break;
   119b6:	f7ff bbb5 	b.w	11124 <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   119ba:	7f73      	ldrb	r3, [r6, #29]
   119bc:	2b01      	cmp	r3, #1
   119be:	f47f abe0 	bne.w	11182 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   119c2:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   119c6:	2b00      	cmp	r3, #0
   119c8:	f2c0 811d 	blt.w	11c06 <ull_conn_rx+0xb82>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   119cc:	4826      	ldr	r0, [pc, #152]	; (11a68 <ull_conn_rx+0x9e4>)
   119ce:	f7f9 fd99 	bl	b504 <mem_acquire>
		if (!tx) {
   119d2:	4603      	mov	r3, r0
   119d4:	2800      	cmp	r0, #0
   119d6:	f000 825c 	beq.w	11e92 <ull_conn_rx+0xe0e>
	conn->llcp_enc.pause_rx = 1U;
   119da:	f895 015e 	ldrb.w	r0, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   119de:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   119e2:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   119e4:	f040 0001 	orr.w	r0, r0, #1
   119e8:	f885 015e 	strb.w	r0, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   119ec:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   119f0:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   119f2:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   119f6:	7158      	strb	r0, [r3, #5]
   119f8:	e5f6      	b.n	115e8 <ull_conn_rx+0x564>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   119fa:	7f73      	ldrb	r3, [r6, #29]
   119fc:	2b01      	cmp	r3, #1
   119fe:	f47f abc0 	bne.w	11182 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   11a02:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11a06:	2b00      	cmp	r3, #0
   11a08:	f280 80f2 	bge.w	11bf0 <ull_conn_rx+0xb6c>
			if ((conn->llcp_req != conn->llcp_ack) &&
   11a0c:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   11a10:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   11a14:	4283      	cmp	r3, r0
   11a16:	f000 8476 	beq.w	12306 <ull_conn_rx+0x1282>
   11a1a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   11a1e:	2b03      	cmp	r3, #3
   11a20:	f47f abaf 	bne.w	11182 <ull_conn_rx+0xfe>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11a24:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11a28:	f36f 0301 	bfc	r3, #0, #2
   11a2c:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (conn->llcp_enc.refresh) {
   11a30:	074e      	lsls	r6, r1, #29
   11a32:	f57f aeaf 	bpl.w	11794 <ull_conn_rx+0x710>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   11a36:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
   11a38:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   11a3c:	2216      	movs	r2, #22
			conn->llcp_enc.refresh = 0U;
   11a3e:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   11a42:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   11a44:	e6a6      	b.n	11794 <ull_conn_rx+0x710>
		 (conn->llcp_enc.refresh &&
   11a46:	f1b8 0f02 	cmp.w	r8, #2
   11a4a:	f43f aeb0 	beq.w	117ae <ull_conn_rx+0x72a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   11a4e:	f1b8 0f0b 	cmp.w	r8, #11
   11a52:	f43f ab92 	beq.w	1117a <ull_conn_rx+0xf6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   11a56:	f1b8 0f04 	cmp.w	r8, #4
   11a5a:	f47f ab43 	bne.w	110e4 <ull_conn_rx+0x60>
   11a5e:	f7ff bb90 	b.w	11182 <ull_conn_rx+0xfe>
   11a62:	bf00      	nop
   11a64:	20003520 	.word	0x20003520
   11a68:	200035a4 	.word	0x200035a4
   11a6c:	fffe30d0 	.word	0xfffe30d0
   11a70:	0001ff7f 	.word	0x0001ff7f
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   11a74:	f895 21a4 	ldrb.w	r2, [r5, #420]	; 0x1a4
   11a78:	f895 31a5 	ldrb.w	r3, [r5, #421]	; 0x1a5
   11a7c:	4293      	cmp	r3, r2
   11a7e:	f43f ab4e 	beq.w	1111e <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   11a82:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11a84:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   11a86:	f885 21a5 	strb.w	r2, [r5, #421]	; 0x1a5
	conn->procedure_expire = 0U;
   11a8a:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11a8e:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11a90:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   11a94:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   11a98:	f8b5 4062 	ldrh.w	r4, [r5, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11a9c:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11aa0:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11aa2:	2215      	movs	r2, #21
	int nack = 0;
   11aa4:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   11aa6:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   11aa8:	8474      	strh	r4, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11aaa:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11aac:	77f2      	strb	r2, [r6, #31]
	if (err) {
   11aae:	f7ff bb39 	b.w	11124 <ull_conn_rx+0xa0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11ab2:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   11ab6:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   11aba:	429a      	cmp	r2, r3
   11abc:	f43f ab2f 	beq.w	1111e <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   11ac0:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   11ac4:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   11ac8:	2900      	cmp	r1, #0
   11aca:	f2c0 8566 	blt.w	1259a <ull_conn_rx+0x1516>
   11ace:	2a1a      	cmp	r2, #26
   11ad0:	f000 85c0 	beq.w	12654 <ull_conn_rx+0x15d0>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   11ad4:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   11ad8:	f002 0107 	and.w	r1, r2, #7
   11adc:	2904      	cmp	r1, #4
   11ade:	f000 8537 	beq.w	12550 <ull_conn_rx+0x14cc>
	if (!conn->llcp_conn_param.cmd) {
   11ae2:	0713      	lsls	r3, r2, #28
   11ae4:	f57f ab1b 	bpl.w	1111e <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   11ae8:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   11aec:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11aee:	2215      	movs	r2, #21
   11af0:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   11af2:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   11af4:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
   11af8:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	cu->interval = lll->interval;
   11afa:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   11afc:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   11b00:	237d      	movs	r3, #125	; 0x7d
   11b02:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   11b06:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   11b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   11b0c:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   11b0e:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   11b12:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   11b14:	f7ff bb06 	b.w	11124 <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   11b18:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   11b1c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   11b20:	429a      	cmp	r2, r3
   11b22:	f43f aafc 	beq.w	1111e <ull_conn_rx+0x9a>
   11b26:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   11b2a:	2a03      	cmp	r2, #3
   11b2c:	f47f aaf7 	bne.w	1111e <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   11b30:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   11b34:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   11b38:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   11b3c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   11b3e:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	conn->procedure_expire = 0U;
   11b42:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   11b46:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   11b4a:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11b4e:	220d      	movs	r2, #13
	int nack = 0;
   11b50:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11b52:	77f2      	strb	r2, [r6, #31]
	if (err) {
   11b54:	f7ff bae6 	b.w	11124 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11b58:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
   11b5c:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   11b60:	4283      	cmp	r3, r0
   11b62:	f43f aadc 	beq.w	1111e <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11b66:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   11b6a:	2a23      	cmp	r2, #35	; 0x23
   11b6c:	d012      	beq.n	11b94 <ull_conn_rx+0xb10>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11b6e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11b72:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11b76:	f885 01b5 	strb.w	r0, [r5, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11b7a:	f3c3 0002 	ubfx	r0, r3, #0, #3
   11b7e:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11b82:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   11b86:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11b88:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11b8c:	f885 11b7 	strb.w	r1, [r5, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   11b90:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   11b94:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   11b98:	0759      	lsls	r1, r3, #29
   11b9a:	f57f aac0 	bpl.w	1111e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11b9e:	2319      	movs	r3, #25
	p->status = rej_ext_ind->error_code;
   11ba0:	7732      	strb	r2, [r6, #28]
   11ba2:	e477      	b.n	11494 <ull_conn_rx+0x410>
	       (conn->lll.role &&
   11ba4:	2800      	cmp	r0, #0
   11ba6:	f43f adfa 	beq.w	1179e <ull_conn_rx+0x71a>
		 (conn->llcp_enc.refresh &&
   11baa:	f1b8 0f02 	cmp.w	r8, #2
   11bae:	f43f adfe 	beq.w	117ae <ull_conn_rx+0x72a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   11bb2:	f1b8 0f0b 	cmp.w	r8, #11
   11bb6:	d022      	beq.n	11bfe <ull_conn_rx+0xb7a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   11bb8:	f1b8 0f03 	cmp.w	r8, #3
   11bbc:	f43f aeb5 	beq.w	1192a <ull_conn_rx+0x8a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   11bc0:	f1b8 0f06 	cmp.w	r8, #6
   11bc4:	f47f aa95 	bne.w	110f2 <ull_conn_rx+0x6e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   11bc8:	7f73      	ldrb	r3, [r6, #29]
   11bca:	2b01      	cmp	r3, #1
   11bcc:	f43f af1e 	beq.w	11a0c <ull_conn_rx+0x988>
   11bd0:	f7ff bad7 	b.w	11182 <ull_conn_rx+0xfe>
			tx->next = conn->tx_head;
   11bd4:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   11bd6:	e9c5 006f 	strd	r0, r0, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   11bda:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   11bde:	2900      	cmp	r1, #0
   11be0:	f47f aa9d 	bne.w	1111e <ull_conn_rx+0x9a>
   11be4:	f7ff bafa 	b.w	111dc <ull_conn_rx+0x158>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   11be8:	7f73      	ldrb	r3, [r6, #29]
   11bea:	2b01      	cmp	r3, #1
   11bec:	f47f aac9 	bne.w	11182 <ull_conn_rx+0xfe>
			conn->llcp_enc.pause_rx = 0U;
   11bf0:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
   11bf4:	f021 0103 	bic.w	r1, r1, #3
   11bf8:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
   11bfc:	e718      	b.n	11a30 <ull_conn_rx+0x9ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   11bfe:	7f73      	ldrb	r3, [r6, #29]
   11c00:	2b01      	cmp	r3, #1
   11c02:	f47f aabe 	bne.w	11182 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   11c06:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   11c0a:	f36f 1304 	bfc	r3, #4, #1
   11c0e:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   11c12:	f7ff ba84 	b.w	1111e <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   11c16:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   11c1a:	2900      	cmp	r1, #0
   11c1c:	f47f ad04 	bne.w	11628 <ull_conn_rx+0x5a4>
			tx->next = conn->tx_head;
   11c20:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   11c22:	e9c5 336f 	strd	r3, r3, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   11c26:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
   11c2a:	e504      	b.n	11636 <ull_conn_rx+0x5b2>
		if (!conn->lll.role) {
   11c2c:	f995 003d 	ldrsb.w	r0, [r5, #61]	; 0x3d
   11c30:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   11c34:	f895 c17c 	ldrb.w	ip, [r5, #380]	; 0x17c
   11c38:	9200      	str	r2, [sp, #0]
   11c3a:	2800      	cmp	r0, #0
   11c3c:	f2c0 8110 	blt.w	11e60 <ull_conn_rx+0xddc>
			if ((conn->llcp_conn_param.req !=
   11c40:	4562      	cmp	r2, ip
   11c42:	d009      	beq.n	11c58 <ull_conn_rx+0xbd4>
			    ((conn->llcp_conn_param.state ==
   11c44:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
					conn->llcp_conn_param.ack) &&
   11c48:	f012 0207 	ands.w	r2, r2, #7
   11c4c:	f000 82eb 	beq.w	12226 <ull_conn_rx+0x11a2>
			      LLCP_CPR_STATE_REQ) ||
   11c50:	3a04      	subs	r2, #4
   11c52:	2a01      	cmp	r2, #1
   11c54:	f240 82e7 	bls.w	12226 <ull_conn_rx+0x11a2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   11c58:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   11c5c:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   11c60:	1a12      	subs	r2, r2, r0
   11c62:	f002 0203 	and.w	r2, r2, #3
   11c66:	2a02      	cmp	r2, #2
   11c68:	f000 8392 	beq.w	12390 <ull_conn_rx+0x130c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   11c6c:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
   11c70:	f895 21b5 	ldrb.w	r2, [r5, #437]	; 0x1b5
   11c74:	4290      	cmp	r0, r2
   11c76:	f000 83aa 	beq.w	123ce <ull_conn_rx+0x134a>
				nack = reject_ext_ind_send(conn, *rx,
   11c7a:	1d31      	adds	r1, r6, #4
   11c7c:	4628      	mov	r0, r5
   11c7e:	232a      	movs	r3, #42	; 0x2a
   11c80:	220f      	movs	r2, #15
   11c82:	f7ff bb75 	b.w	11370 <ull_conn_rx+0x2ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11c86:	48bd      	ldr	r0, [pc, #756]	; (11f7c <ull_conn_rx+0xef8>)
   11c88:	f7f9 fc3c 	bl	b504 <mem_acquire>
		if (!tx) {
   11c8c:	4601      	mov	r1, r0
   11c8e:	2800      	cmp	r0, #0
   11c90:	f000 80ff 	beq.w	11e92 <ull_conn_rx+0xe0e>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11c94:	f895 01a4 	ldrb.w	r0, [r5, #420]	; 0x1a4
   11c98:	f895 21a5 	ldrb.w	r2, [r5, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   11c9c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   11ca0:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   11ca4:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   11ca8:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11cac:	9000      	str	r0, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11cae:	4290      	cmp	r0, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   11cb0:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11cb2:	f040 848f 	bne.w	125d4 <ull_conn_rx+0x1550>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   11cb6:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11cb8:	2a1a      	cmp	r2, #26
   11cba:	f240 82b2 	bls.w	12222 <ull_conn_rx+0x119e>
			eff_tx_octets = MIN(max_rx_octets,
   11cbe:	f8b5 00d6 	ldrh.w	r0, [r5, #214]	; 0xd6
   11cc2:	4282      	cmp	r2, r0
   11cc4:	bf28      	it	cs
   11cc6:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11cc8:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			eff_rx_octets = MIN(max_tx_octets,
   11ccc:	9b01      	ldr	r3, [sp, #4]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   11cce:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   11cd2:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   11cd6:	f1be 0f1b 	cmp.w	lr, #27
   11cda:	bf34      	ite	cc
   11cdc:	469e      	movcc	lr, r3
   11cde:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   11ce2:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   11ce6:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   11ce8:	bf34      	ite	cc
   11cea:	4658      	movcc	r0, fp
   11cec:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   11cf0:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   11cf4:	bf34      	ite	cc
   11cf6:	46d4      	movcc	ip, sl
   11cf8:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   11cfc:	459e      	cmp	lr, r3
   11cfe:	f000 82d6 	beq.w	122ae <ull_conn_rx+0x122a>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11d02:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   11d04:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11d08:	3b01      	subs	r3, #1
   11d0a:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->llcp_length.tx_octets = eff_tx_octets;
   11d0e:	f8a5 21aa 	strh.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_length.state =
   11d12:	f895 31a6 	ldrb.w	r3, [r5, #422]	; 0x1a6
			conn->llcp_length.rx_time = eff_rx_time;
   11d16:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
			conn->llcp_length.tx_time = eff_tx_time;
   11d1a:	f8a5 01ae 	strh.w	r0, [r5, #430]	; 0x1ae
			if (tx) {
   11d1e:	2900      	cmp	r1, #0
   11d20:	f000 833f 	beq.w	123a2 <ull_conn_rx+0x131e>
				conn->llcp_length.state =
   11d24:	2605      	movs	r6, #5
   11d26:	f366 0302 	bfi	r3, r6, #0, #3
   11d2a:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
			link->mem = conn->llcp_rx;
   11d2e:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   11d32:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   11d34:	6823      	ldr	r3, [r4, #0]
   11d36:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   11d38:	6823      	ldr	r3, [r4, #0]
   11d3a:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
			*rx = NULL;
   11d3e:	2300      	movs	r3, #0
   11d40:	6023      	str	r3, [r4, #0]
	if (tx) {
   11d42:	2900      	cmp	r1, #0
   11d44:	f43f a9ed 	beq.w	11122 <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d48:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   11d4a:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d4c:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11d50:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11d52:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11d54:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   11d56:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   11d5a:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11d5c:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d60:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11d62:	714c      	strb	r4, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11d64:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11d66:	f7fe fbef 	bl	10548 <ctrl_tx_sec_enqueue>
	return 0;
   11d6a:	2000      	movs	r0, #0
}
   11d6c:	f7ff b9da 	b.w	11124 <ull_conn_rx+0xa0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11d70:	4882      	ldr	r0, [pc, #520]	; (11f7c <ull_conn_rx+0xef8>)
   11d72:	f7f9 fbc7 	bl	b504 <mem_acquire>
	if (!tx) {
   11d76:	4602      	mov	r2, r0
   11d78:	2800      	cmp	r0, #0
   11d7a:	f000 808a 	beq.w	11e92 <ull_conn_rx+0xe0e>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d7e:	f895 11b6 	ldrb.w	r1, [r5, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   11d82:	f895 e1b5 	ldrb.w	lr, [r5, #437]	; 0x1b5
   11d86:	f895 71b4 	ldrb.w	r7, [r5, #436]	; 0x1b4
   11d8a:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d8e:	2002      	movs	r0, #2
   11d90:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   11d94:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d96:	f885 11b6 	strb.w	r1, [r5, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   11d9a:	f3c3 0402 	ubfx	r4, r3, #0, #3
   11d9e:	f003 0c07 	and.w	ip, r3, #7
   11da2:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   11da6:	d113      	bne.n	11dd0 <ull_conn_rx+0xd4c>
		conn->llcp_phy.tx =
   11da8:	b2c9      	uxtb	r1, r1
   11daa:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   11dae:	f895 c1b7 	ldrb.w	ip, [r5, #439]	; 0x1b7
		conn->procedure_expire =
   11db2:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
   11db6:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_phy.ack--;
   11dba:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   11dbc:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   11dc0:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   11dc4:	f885 71b5 	strb.w	r7, [r5, #437]	; 0x1b5
		conn->llcp_phy.rx =
   11dc8:	f885 11b6 	strb.w	r1, [r5, #438]	; 0x1b6
		conn->llcp_phy.cmd = 0U;
   11dcc:	f885 c1b7 	strb.w	ip, [r5, #439]	; 0x1b7
	conn->llcp_phy.rx &= p->tx_phys;
   11dd0:	f895 11b6 	ldrb.w	r1, [r5, #438]	; 0x1b6
	conn->llcp_phy.tx &= p->rx_phys;
   11dd4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   11dd8:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   11ddc:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   11de0:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   11de4:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   11de8:	009b      	lsls	r3, r3, #2
   11dea:	f001 0103 	and.w	r1, r1, #3
   11dee:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   11df2:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11df4:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   11df6:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11dfa:	7913      	ldrb	r3, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11dfc:	7151      	strb	r1, [r2, #5]
	    conn->tx_head &&
   11dfe:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11e02:	7214      	strb	r4, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e04:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11e08:	2417      	movs	r4, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11e0a:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e0c:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11e0e:	71d4      	strb	r4, [r2, #7]
	if (
   11e10:	2900      	cmp	r1, #0
   11e12:	f000 8146 	beq.w	120a2 <ull_conn_rx+0x101e>
	    !conn->llcp_enc.pause_tx &&
   11e16:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	    conn->tx_head &&
   11e1a:	079c      	lsls	r4, r3, #30
   11e1c:	f100 8141 	bmi.w	120a2 <ull_conn_rx+0x101e>
	    !conn->llcp_phy.pause_tx &&
   11e20:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   11e24:	07d8      	lsls	r0, r3, #31
   11e26:	f100 813c 	bmi.w	120a2 <ull_conn_rx+0x101e>
		if (conn->tx_head == conn->tx_data) {
   11e2a:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   11e2e:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   11e30:	bf04      	itt	eq
   11e32:	680b      	ldreq	r3, [r1, #0]
   11e34:	f8c5 31c8 	streq.w	r3, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   11e38:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   11e3c:	2b00      	cmp	r3, #0
   11e3e:	f000 83c3 	beq.w	125c8 <ull_conn_rx+0x1544>
	tx->next = conn->tx_ctrl_last->next;
   11e42:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   11e46:	6819      	ldr	r1, [r3, #0]
   11e48:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   11e4a:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   11e4c:	f8c5 21c4 	str.w	r2, [r5, #452]	; 0x1c4
	if (!tx->next) {
   11e50:	6813      	ldr	r3, [r2, #0]
   11e52:	2b00      	cmp	r3, #0
   11e54:	f47f a963 	bne.w	1111e <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   11e58:	f8c5 21cc 	str.w	r2, [r5, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11e5c:	f7ff b95f 	b.w	1111e <ull_conn_rx+0x9a>
		} else if ((conn->llcp_conn_param.req ==
   11e60:	9a00      	ldr	r2, [sp, #0]
   11e62:	4562      	cmp	r2, ip
   11e64:	f000 8094 	beq.w	11f90 <ull_conn_rx+0xf0c>
			    conn->llcp_conn_param.ack) ||
   11e68:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   11e6c:	0790      	lsls	r0, r2, #30
   11e6e:	f000 808f 	beq.w	11f90 <ull_conn_rx+0xf0c>
			LL_ASSERT(0);
   11e72:	4a43      	ldr	r2, [pc, #268]	; (11f80 <ull_conn_rx+0xefc>)
   11e74:	4943      	ldr	r1, [pc, #268]	; (11f84 <ull_conn_rx+0xf00>)
   11e76:	4844      	ldr	r0, [pc, #272]	; (11f88 <ull_conn_rx+0xf04>)
   11e78:	f241 73de 	movw	r3, #6110	; 0x17de
   11e7c:	f010 ffc3 	bl	22e06 <printk>
   11e80:	4040      	eors	r0, r0
   11e82:	f380 8811 	msr	BASEPRI, r0
   11e86:	f04f 0003 	mov.w	r0, #3
   11e8a:	df02      	svc	2
	int nack = 0;
   11e8c:	2000      	movs	r0, #0
   11e8e:	f7ff b949 	b.w	11124 <ull_conn_rx+0xa0>
		return -ENOBUFS;
   11e92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11e96:	f7ff b945 	b.w	11124 <ull_conn_rx+0xa0>
			conn->llcp_conn_param.disabled = 1U;
   11e9a:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
			if (!conn->lll.role) {
   11e9e:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   11ea2:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   11ea6:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   11ea8:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
			if (!conn->lll.role) {
   11eac:	f2c0 8239 	blt.w	12322 <ull_conn_rx+0x129e>
				LL_ASSERT(conn->llcp_cu.req ==
   11eb0:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
   11eb4:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
   11eb8:	4293      	cmp	r3, r2
   11eba:	d00e      	beq.n	11eda <ull_conn_rx+0xe56>
   11ebc:	4a30      	ldr	r2, [pc, #192]	; (11f80 <ull_conn_rx+0xefc>)
   11ebe:	4933      	ldr	r1, [pc, #204]	; (11f8c <ull_conn_rx+0xf08>)
   11ec0:	4831      	ldr	r0, [pc, #196]	; (11f88 <ull_conn_rx+0xf04>)
   11ec2:	f641 0364 	movw	r3, #6244	; 0x1864
   11ec6:	f010 ff9e 	bl	22e06 <printk>
   11eca:	4040      	eors	r0, r0
   11ecc:	f380 8811 	msr	BASEPRI, r0
   11ed0:	f04f 0003 	mov.w	r0, #3
   11ed4:	df02      	svc	2
   11ed6:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
				conn->llcp_conn_param.state =
   11eda:	f895 017e 	ldrb.w	r0, [r5, #382]	; 0x17e
				conn->llcp_cu.interval =
   11ede:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
   11ee2:	f8a5 3114 	strh.w	r3, [r5, #276]	; 0x114
				conn->llcp_conn_param.state =
   11ee6:	2305      	movs	r3, #5
   11ee8:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11eec:	f895 1112 	ldrb.w	r1, [r5, #274]	; 0x112
				conn->llcp_cu.ack--;
   11ef0:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   11ef2:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.win_size = 1U;
   11ef6:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11ef8:	00d2      	lsls	r2, r2, #3
				conn->llcp_cu.ack--;
   11efa:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
				conn->llcp_cu.win_size = 1U;
   11efe:	f885 6120 	strb.w	r6, [r5, #288]	; 0x120
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11f02:	f021 030f 	bic.w	r3, r1, #15
   11f06:	4332      	orrs	r2, r6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f08:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.latency =
   11f0a:	f8b5 4184 	ldrh.w	r4, [r5, #388]	; 0x184
				conn->llcp_conn_param.state =
   11f0e:	f885 017e 	strb.w	r0, [r5, #382]	; 0x17e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11f12:	431a      	orrs	r2, r3
   11f14:	f885 2112 	strb.w	r2, [r5, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   11f18:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   11f1a:	f8b5 2186 	ldrh.w	r2, [r5, #390]	; 0x186
				conn->llcp_cu.win_offset_us = 0U;
   11f1e:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
				conn->llcp_cu.latency =
   11f22:	f8a5 4116 	strh.w	r4, [r5, #278]	; 0x116
				conn->llcp_cu.timeout =
   11f26:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f2a:	710e      	strb	r6, [r1, #4]
				break;
   11f2c:	f7ff b8fa 	b.w	11124 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11f30:	4812      	ldr	r0, [pc, #72]	; (11f7c <ull_conn_rx+0xef8>)
   11f32:	f7f9 fae7 	bl	b504 <mem_acquire>
		if (!tx) {
   11f36:	4601      	mov	r1, r0
   11f38:	2800      	cmp	r0, #0
   11f3a:	d0aa      	beq.n	11e92 <ull_conn_rx+0xe0e>
		conn->llcp_version.tx = 1U;
   11f3c:	f895 2132 	ldrb.w	r2, [r5, #306]	; 0x132
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f40:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   11f42:	f042 0201 	orr.w	r2, r2, #1
   11f46:	f885 2132 	strb.w	r2, [r5, #306]	; 0x132
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f4a:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11f4e:	220c      	movs	r2, #12
		pdu_tx->len =
   11f50:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11f52:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   11f54:	240b      	movs	r4, #11
		v->sub_version_number =
   11f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f5a:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11f5e:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f60:	2205      	movs	r2, #5
   11f62:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   11f64:	72cb      	strb	r3, [r1, #11]
   11f66:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   11f68:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f6a:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   11f6c:	4628      	mov	r0, r5
   11f6e:	f7fe faeb 	bl	10548 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f72:	2301      	movs	r3, #1
   11f74:	7133      	strb	r3, [r6, #4]
   11f76:	f7ff baad 	b.w	114d4 <ull_conn_rx+0x450>
   11f7a:	bf00      	nop
   11f7c:	200035a4 	.word	0x200035a4
   11f80:	0002caec 	.word	0x0002caec
   11f84:	0002c6a0 	.word	0x0002c6a0
   11f88:	0002c630 	.word	0x0002c630
   11f8c:	0002cc38 	.word	0x0002cc38
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11f90:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11f94:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11f98:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11f9c:	d97b      	bls.n	12096 <ull_conn_rx+0x1012>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11f9e:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11fa2:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11fa6:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11faa:	d874      	bhi.n	12096 <ull_conn_rx+0x1012>
			    (interval_max > 3200) ||
   11fac:	428a      	cmp	r2, r1
   11fae:	d872      	bhi.n	12096 <ull_conn_rx+0x1012>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11fb0:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   11fb4:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11fb8:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   11fbc:	d26b      	bcs.n	12096 <ull_conn_rx+0x1012>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11fbe:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   11fc0:	f1a0 090a 	sub.w	r9, r0, #10
   11fc4:	fa1f f989 	uxth.w	r9, r9
   11fc8:	f640 4b76 	movw	fp, #3190	; 0xc76
   11fcc:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11fce:	b282      	uxth	r2, r0
			    (latency > 499) ||
   11fd0:	d861      	bhi.n	12096 <ull_conn_rx+0x1012>
			     ((latency + 1) * interval_max)) ||
   11fd2:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   11fd6:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   11fda:	d25c      	bcs.n	12096 <ull_conn_rx+0x1012>
			     ((latency + 1) * interval_max)) ||
   11fdc:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   11fe0:	4559      	cmp	r1, fp
   11fe2:	d358      	bcc.n	12096 <ull_conn_rx+0x1012>
			conn->llcp_conn_param.latency =	latency;
   11fe4:	f8a5 c184 	strh.w	ip, [r5, #388]	; 0x184
			conn->llcp_conn_param.interval_min = interval_min;
   11fe8:	f8a5 8180 	strh.w	r8, [r5, #384]	; 0x180
			conn->llcp_conn_param.interval_max = interval_max;
   11fec:	f8a5 e182 	strh.w	lr, [r5, #386]	; 0x182
			conn->llcp_conn_param.timeout =	timeout;
   11ff0:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
			conn->llcp_conn_param.preferred_periodicity =
   11ff4:	f885 b188 	strb.w	fp, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11ff8:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   11ffc:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   12000:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   12004:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   12008:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset0);
   1200c:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   12010:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   12014:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   12018:	f8a5 018c 	strh.w	r0, [r5, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset1);
   1201c:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   12020:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   12024:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   12028:	f8a5 018e 	strh.w	r0, [r5, #398]	; 0x18e
				sys_le16_to_cpu(cpr->offset2);
   1202c:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   12030:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   12034:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   12038:	f8a5 0190 	strh.w	r0, [r5, #400]	; 0x190
				sys_le16_to_cpu(cpr->offset3);
   1203c:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   12040:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   12044:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   12048:	f8a5 0192 	strh.w	r0, [r5, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset4);
   1204c:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   12050:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   12054:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   12058:	f8a5 0194 	strh.w	r0, [r5, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset5);
   1205c:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   12060:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   12064:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   12066:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   1206a:	f8a5 0196 	strh.w	r0, [r5, #406]	; 0x196
			if ((conn->llcp_conn_param.interval_max !=
   1206e:	f000 82b9 	beq.w	125e4 <ull_conn_rx+0x1560>
				conn->llcp_conn_param.state =
   12072:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   12076:	2103      	movs	r1, #3
   12078:	f361 0202 	bfi	r2, r1, #0, #3
   1207c:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
			conn->llcp_conn_param.ack--;
   12080:	9a00      	ldr	r2, [sp, #0]
   12082:	3a01      	subs	r2, #1
   12084:	f885 217d 	strb.w	r2, [r5, #381]	; 0x17d
			if (!conn_upd_curr) {
   12088:	2b00      	cmp	r3, #0
   1208a:	f47f a84a 	bne.w	11122 <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   1208e:	603d      	str	r5, [r7, #0]
	int nack = 0;
   12090:	4618      	mov	r0, r3
   12092:	f7ff b847 	b.w	11124 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   12096:	1d31      	adds	r1, r6, #4
   12098:	4628      	mov	r0, r5
   1209a:	231e      	movs	r3, #30
   1209c:	220f      	movs	r2, #15
   1209e:	f7ff b967 	b.w	11370 <ull_conn_rx+0x2ec>
		if (!conn->tx_ctrl) {
   120a2:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   120a6:	2b00      	cmp	r3, #0
   120a8:	f47f aecb 	bne.w	11e42 <ull_conn_rx+0xdbe>
			tx->next = conn->tx_head;
   120ac:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   120ae:	e9c5 226f 	strd	r2, r2, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   120b2:	f8c5 21c4 	str.w	r2, [r5, #452]	; 0x1c4
   120b6:	e6cb      	b.n	11e50 <ull_conn_rx+0xdcc>
				      0x03) == 0x02) &&
   120b8:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   120bc:	2b03      	cmp	r3, #3
   120be:	f47f a953 	bne.w	11368 <ull_conn_rx+0x2e4>
   120c2:	f7ff b94a 	b.w	1135a <ull_conn_rx+0x2d6>
	instant = sys_le16_to_cpu(ind->instant);
   120c6:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   120c8:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   120ca:	1a82      	subs	r2, r0, r2
   120cc:	0412      	lsls	r2, r2, #16
   120ce:	f100 80b0 	bmi.w	12232 <ull_conn_rx+0x11ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   120d2:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   120d6:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
   120da:	eba2 020c 	sub.w	r2, r2, ip
   120de:	f002 0203 	and.w	r2, r2, #3
   120e2:	2a02      	cmp	r2, #2
   120e4:	f000 810b 	beq.w	122fe <ull_conn_rx+0x127a>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   120e8:	f895 c1b4 	ldrb.w	ip, [r5, #436]	; 0x1b4
   120ec:	f895 21b5 	ldrb.w	r2, [r5, #437]	; 0x1b5
   120f0:	4562      	cmp	r2, ip
   120f2:	d019      	beq.n	12128 <ull_conn_rx+0x10a4>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   120f4:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   120f8:	f002 0203 	and.w	r2, r2, #3
   120fc:	2a02      	cmp	r2, #2
   120fe:	d113      	bne.n	12128 <ull_conn_rx+0x10a4>
		conn->llcp_phy.pause_tx = 0U;
   12100:	f895 21b7 	ldrb.w	r2, [r5, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12104:	f895 60ec 	ldrb.w	r6, [r5, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12108:	f885 c1b5 	strb.w	ip, [r5, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   1210c:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12110:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   12114:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   12118:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   1211c:	f885 21b7 	strb.w	r2, [r5, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12120:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
   12124:	f8a5 c0cc 	strh.w	ip, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   12128:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   1212c:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   12130:	009b      	lsls	r3, r3, #2
   12132:	f003 031c 	and.w	r3, r3, #28
   12136:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1213a:	f002 0202 	and.w	r2, r2, #2
   1213e:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   12140:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
	conn->llcp.phy_upd_ind.initiate = 0U;
   12144:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
   12148:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   1214a:	6823      	ldr	r3, [r4, #0]
   1214c:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1214e:	6823      	ldr	r3, [r4, #0]
   12150:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
	*rx = NULL;
   12154:	2300      	movs	r3, #0
   12156:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   12158:	f7fd f8fe 	bl	f358 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   1215c:	4604      	mov	r4, r0
   1215e:	2800      	cmp	r0, #0
   12160:	f000 8224 	beq.w	125ac <ull_conn_rx+0x1528>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   12164:	6823      	ldr	r3, [r4, #0]
   12166:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1216a:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   1216c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   12170:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   12174:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
	conn->llcp_ack -= 2U;
   12178:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   1217a:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   1217c:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   12180:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   12184:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   12188:	f43e afcb 	beq.w	11122 <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1218c:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
   12190:	f3c3 0382 	ubfx	r3, r3, #2, #3
   12194:	f363 1206 	bfi	r2, r3, #4, #3
   12198:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
   1219c:	2000      	movs	r0, #0
   1219e:	f7fe bfc1 	b.w	11124 <ull_conn_rx+0xa0>
			conn->llcp_length.disabled = 1U;
   121a2:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   121a6:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->llcp_length.disabled = 1U;
   121aa:	f042 0308 	orr.w	r3, r2, #8
   121ae:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   121b2:	f7ff baef 	b.w	11794 <ull_conn_rx+0x710>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   121b6:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   121ba:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   121be:	429a      	cmp	r2, r3
   121c0:	f43f ac58 	beq.w	11a74 <ull_conn_rx+0x9f0>
		rej_ext_ind->error_code = rej_ind->error_code;
   121c4:	f896 3020 	ldrb.w	r3, [r6, #32]
   121c8:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   121cc:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   121d0:	2a00      	cmp	r2, #0
   121d2:	f2c0 81da 	blt.w	1258a <ull_conn_rx+0x1506>
   121d6:	2b1a      	cmp	r3, #26
   121d8:	f000 823c 	beq.w	12654 <ull_conn_rx+0x15d0>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   121dc:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   121e0:	f002 0307 	and.w	r3, r2, #7
   121e4:	2b04      	cmp	r3, #4
   121e6:	f47f ac7c 	bne.w	11ae2 <ull_conn_rx+0xa5e>
		LL_ASSERT(conn_upd_curr == conn);
   121ea:	4fd4      	ldr	r7, [pc, #848]	; (1253c <ull_conn_rx+0x14b8>)
   121ec:	683b      	ldr	r3, [r7, #0]
   121ee:	429d      	cmp	r5, r3
   121f0:	d00e      	beq.n	12210 <ull_conn_rx+0x118c>
   121f2:	4ad3      	ldr	r2, [pc, #844]	; (12540 <ull_conn_rx+0x14bc>)
   121f4:	49d3      	ldr	r1, [pc, #844]	; (12544 <ull_conn_rx+0x14c0>)
   121f6:	48d4      	ldr	r0, [pc, #848]	; (12548 <ull_conn_rx+0x14c4>)
   121f8:	f241 13ba 	movw	r3, #4538	; 0x11ba
   121fc:	f010 fe03 	bl	22e06 <printk>
   12200:	4040      	eors	r0, r0
   12202:	f380 8811 	msr	BASEPRI, r0
   12206:	f04f 0003 	mov.w	r0, #3
   1220a:	df02      	svc	2
   1220c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12210:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   12214:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   12218:	2300      	movs	r3, #0
   1221a:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1221c:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   12220:	e45f      	b.n	11ae2 <ull_conn_rx+0xa5e>
   12222:	464a      	mov	r2, r9
   12224:	e550      	b.n	11cc8 <ull_conn_rx+0xc44>
				nack = reject_ext_ind_send(conn, *rx,
   12226:	1d31      	adds	r1, r6, #4
   12228:	4628      	mov	r0, r5
   1222a:	2323      	movs	r3, #35	; 0x23
   1222c:	220f      	movs	r2, #15
   1222e:	f7ff b89f 	b.w	11370 <ull_conn_rx+0x2ec>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12232:	2301      	movs	r3, #1
   12234:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   12236:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   12238:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
	int nack = 0;
   1223c:	2000      	movs	r0, #0
   1223e:	f7fe bf71 	b.w	11124 <ull_conn_rx+0xa0>
	conn->llcp_enc.pause_rx = 0U;
   12242:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   12246:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   1224a:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   1224e:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   12250:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	conn->procedure_expire = 0U;
   12254:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   12258:	4618      	mov	r0, r3
   1225a:	f7fe bf63 	b.w	11124 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   1225e:	1d31      	adds	r1, r6, #4
   12260:	4628      	mov	r0, r5
   12262:	2323      	movs	r3, #35	; 0x23
   12264:	f7ff b883 	b.w	1136e <ull_conn_rx+0x2ea>
			conn->llcp_phy.pause_tx = 0U;
   12268:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   1226c:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   12270:	f885 11b5 	strb.w	r1, [r5, #437]	; 0x1b5
			conn->llcp_phy.pause_tx = 0U;
   12274:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   12278:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   1227a:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1227e:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   12282:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   12284:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   12288:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   1228c:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   12290:	f140 8091 	bpl.w	123b6 <ull_conn_rx+0x1332>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12294:	6821      	ldr	r1, [r4, #0]
				p->status = 0U;
   12296:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12298:	2019      	movs	r0, #25
   1229a:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   1229c:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   1229e:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   122a0:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   122a4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   122a8:	77b3      	strb	r3, [r6, #30]
   122aa:	f7ff ba73 	b.w	11794 <ull_conn_rx+0x710>
			conn->llcp_length.ack = conn->llcp_length.req;
   122ae:	9b00      	ldr	r3, [sp, #0]
   122b0:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->procedure_expire = 0U;
   122b4:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   122b6:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   122b8:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   122bc:	f000 8115 	beq.w	124ea <ull_conn_rx+0x1466>
			conn->lll.max_rx_time = eff_rx_time;
   122c0:	f8a5 c062 	strh.w	ip, [r5, #98]	; 0x62
			if (tx) {
   122c4:	2900      	cmp	r1, #0
   122c6:	f000 8126 	beq.w	12516 <ull_conn_rx+0x1492>
				conn->llcp_length.state =
   122ca:	f895 41a6 	ldrb.w	r4, [r5, #422]	; 0x1a6
					(conn->llcp_length.req - 1);
   122ce:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   122d0:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
				conn->llcp_length.state =
   122d4:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   122d6:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   122d8:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
   122dc:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
				conn->llcp_length.tx_octets = eff_tx_octets;
   122e0:	f8a5 21aa 	strh.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_length.rx_time = eff_rx_time;
   122e4:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
				conn->llcp_length.tx_time = eff_tx_time;
   122e8:	f8a5 01ae 	strh.w	r0, [r5, #430]	; 0x1ae
				conn->llcp_length.state =
   122ec:	f885 41a6 	strb.w	r4, [r5, #422]	; 0x1a6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   122f0:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   122f4:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   122f6:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   122fa:	84f0      	strh	r0, [r6, #38]	; 0x26
   122fc:	e521      	b.n	11d42 <ull_conn_rx+0xcbe>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   122fe:	2301      	movs	r3, #1
   12300:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   12302:	232a      	movs	r3, #42	; 0x2a
   12304:	e798      	b.n	12238 <ull_conn_rx+0x11b4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12306:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
				conn->llcp_ack -= 2U;
   1230a:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1230c:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   12310:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   12312:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12316:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
				conn->llcp_type = LLCP_ENCRYPTION;
   1231a:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
				conn->llcp_ack -= 2U;
   1231e:	f7ff bb87 	b.w	11a30 <ull_conn_rx+0x9ac>
			LL_ASSERT(conn_upd_curr == conn);
   12322:	4f86      	ldr	r7, [pc, #536]	; (1253c <ull_conn_rx+0x14b8>)
   12324:	683a      	ldr	r2, [r7, #0]
   12326:	4295      	cmp	r5, r2
   12328:	d00e      	beq.n	12348 <ull_conn_rx+0x12c4>
   1232a:	4a85      	ldr	r2, [pc, #532]	; (12540 <ull_conn_rx+0x14bc>)
   1232c:	4985      	ldr	r1, [pc, #532]	; (12544 <ull_conn_rx+0x14c0>)
   1232e:	4886      	ldr	r0, [pc, #536]	; (12548 <ull_conn_rx+0x14c4>)
   12330:	f641 037c 	movw	r3, #6268	; 0x187c
   12334:	f010 fd67 	bl	22e06 <printk>
   12338:	4040      	eors	r0, r0
   1233a:	f380 8811 	msr	BASEPRI, r0
   1233e:	f04f 0003 	mov.w	r0, #3
   12342:	df02      	svc	2
   12344:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
			if (!conn->llcp_conn_param.cmd) {
   12348:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1234c:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   12350:	2300      	movs	r3, #0
   12352:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   12354:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12358:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
   1235a:	f43e aeec 	beq.w	11136 <ull_conn_rx+0xb2>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1235e:	2115      	movs	r1, #21
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12360:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12362:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12364:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   12366:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   12368:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
   1236c:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
   1236e:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   12370:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   12374:	237d      	movs	r3, #125	; 0x7d
   12376:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   1237a:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   1237c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12380:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12384:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12386:	f7ff ba05 	b.w	11794 <ull_conn_rx+0x710>
		conn_upd_curr = conn;
   1238a:	601d      	str	r5, [r3, #0]
   1238c:	f7ff b9b7 	b.w	116fe <ull_conn_rx+0x67a>
				      0x03) == 0x02) &&
   12390:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   12394:	2a03      	cmp	r2, #3
   12396:	f47f ac70 	bne.w	11c7a <ull_conn_rx+0xbf6>
   1239a:	e467      	b.n	11c6c <ull_conn_rx+0xbe8>
	struct node_tx *tx = NULL;
   1239c:	2100      	movs	r1, #0
   1239e:	f7ff b816 	b.w	113ce <ull_conn_rx+0x34a>
				conn->llcp_length.state =
   123a2:	2604      	movs	r6, #4
   123a4:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   123a8:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   123ac:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
				conn->llcp_length.state =
   123b0:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
   123b4:	e4bb      	b.n	11d2e <ull_conn_rx+0xcaa>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   123b6:	6823      	ldr	r3, [r4, #0]
   123b8:	2201      	movs	r2, #1
   123ba:	711a      	strb	r2, [r3, #4]
   123bc:	f7ff b9ea 	b.w	11794 <ull_conn_rx+0x710>
			tx->next = conn->tx_head->next;
   123c0:	6811      	ldr	r1, [r2, #0]
   123c2:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   123c4:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   123c6:	e9c5 3370 	strd	r3, r3, [r5, #448]	; 0x1c0
   123ca:	f7ff b934 	b.w	11636 <ull_conn_rx+0x5b2>
				uint16_t interval_min =
   123ce:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   123d2:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   123d6:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   123da:	f67f ae5c 	bls.w	12096 <ull_conn_rx+0x1012>
				uint16_t interval_max =
   123de:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   123e2:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   123e6:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   123ea:	f63f ae54 	bhi.w	12096 <ull_conn_rx+0x1012>
				    (interval_max > 3200) ||
   123ee:	4290      	cmp	r0, r2
   123f0:	f63f ae51 	bhi.w	12096 <ull_conn_rx+0x1012>
				uint16_t latency =
   123f4:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   123f8:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   123fc:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   12400:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   12404:	f4bf ae47 	bcs.w	12096 <ull_conn_rx+0x1012>
				uint16_t timeout =
   12408:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   1240a:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
   1240e:	f1a0 090a 	sub.w	r9, r0, #10
   12412:	fa1f f989 	uxth.w	r9, r9
   12416:	f640 4a76 	movw	sl, #3190	; 0xc76
   1241a:	45d1      	cmp	r9, sl
				uint16_t timeout =
   1241c:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   12420:	f63f ae39 	bhi.w	12096 <ull_conn_rx+0x1012>
				     ((latency + 1) * interval_max)) ||
   12424:	9801      	ldr	r0, [sp, #4]
   12426:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   1242a:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   1242e:	f4bf ae32 	bcs.w	12096 <ull_conn_rx+0x1012>
				     ((latency + 1) * interval_max)) ||
   12432:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   12436:	4552      	cmp	r2, sl
   12438:	f4ff ae2d 	bcc.w	12096 <ull_conn_rx+0x1012>
				conn->llcp_conn_param.timeout =	timeout;
   1243c:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
   12440:	f8a5 c184 	strh.w	ip, [r5, #388]	; 0x184
				conn->llcp_conn_param.interval_min =
   12444:	f8a5 8180 	strh.w	r8, [r5, #384]	; 0x180
				conn->llcp_conn_param.interval_max =
   12448:	f8a5 e182 	strh.w	lr, [r5, #386]	; 0x182
				conn->llcp_conn_param.timeout =	timeout;
   1244c:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
				conn->llcp_conn_param.preferred_periodicity =
   12450:	f885 a188 	strb.w	sl, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12454:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   12458:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   1245c:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12460:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   12464:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset0);
   12468:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   1246c:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   12470:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   12474:	f8a5 018c 	strh.w	r0, [r5, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset1);
   12478:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   1247c:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   12480:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   12484:	f8a5 018e 	strh.w	r0, [r5, #398]	; 0x18e
					sys_le16_to_cpu(cpr->offset2);
   12488:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   1248c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   12490:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   12494:	f8a5 0190 	strh.w	r0, [r5, #400]	; 0x190
					sys_le16_to_cpu(cpr->offset3);
   12498:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   1249c:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   124a0:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   124a4:	f8a5 0192 	strh.w	r0, [r5, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset4);
   124a8:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   124ac:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   124b0:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   124b4:	f8a5 0194 	strh.w	r0, [r5, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset5);
   124b8:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   124bc:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   124c0:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   124c2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   124c6:	f8a5 0196 	strh.w	r0, [r5, #406]	; 0x196
				if ((conn->llcp_conn_param.interval_max !=
   124ca:	f000 80ac 	beq.w	12626 <ull_conn_rx+0x15a2>
					if (conn->llcp_enc.pause_tx) {
   124ce:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
   124d0:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
					if (conn->llcp_enc.pause_tx) {
   124d4:	f57f adcf 	bpl.w	12076 <ull_conn_rx+0xff2>
						(*rx)->hdr.type =
   124d8:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
   124da:	2002      	movs	r0, #2
   124dc:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type =
   124e0:	2001      	movs	r0, #1
						conn->llcp_conn_param.state =
   124e2:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
						(*rx)->hdr.type =
   124e6:	7108      	strb	r0, [r1, #4]
   124e8:	e5ca      	b.n	12080 <ull_conn_rx+0xffc>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   124ea:	4558      	cmp	r0, fp
   124ec:	f47f aee8 	bne.w	122c0 <ull_conn_rx+0x123c>
			    eff_rx_time == conn->lll.max_rx_time &&
   124f0:	45d4      	cmp	ip, sl
   124f2:	f47f aee5 	bne.w	122c0 <ull_conn_rx+0x123c>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   124f6:	6823      	ldr	r3, [r4, #0]
   124f8:	2401      	movs	r4, #1
   124fa:	711c      	strb	r4, [r3, #4]
				goto send_length_resp;
   124fc:	e421      	b.n	11d42 <ull_conn_rx+0xcbe>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   124fe:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_ack += 2U;
   12502:	3202      	adds	r2, #2
   12504:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12508:	b953      	cbnz	r3, 12520 <ull_conn_rx+0x149c>
			conn->slave.llcp_type = conn->llcp_type;
   1250a:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   1250e:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   12512:	f7ff ba18 	b.w	11946 <ull_conn_rx+0x8c2>
				conn->lll.max_tx_octets = eff_tx_octets;
   12516:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   1251a:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   1251e:	e6e7      	b.n	122f0 <ull_conn_rx+0x126c>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12520:	4a07      	ldr	r2, [pc, #28]	; (12540 <ull_conn_rx+0x14bc>)
   12522:	490a      	ldr	r1, [pc, #40]	; (1254c <ull_conn_rx+0x14c8>)
   12524:	4808      	ldr	r0, [pc, #32]	; (12548 <ull_conn_rx+0x14c4>)
   12526:	f241 6309 	movw	r3, #5641	; 0x1609
   1252a:	f010 fc6c 	bl	22e06 <printk>
   1252e:	4040      	eors	r0, r0
   12530:	f380 8811 	msr	BASEPRI, r0
   12534:	f04f 0003 	mov.w	r0, #3
   12538:	df02      	svc	2
   1253a:	e7e6      	b.n	1250a <ull_conn_rx+0x1486>
   1253c:	20003520 	.word	0x20003520
   12540:	0002caec 	.word	0x0002caec
   12544:	0002cc60 	.word	0x0002cc60
   12548:	0002c630 	.word	0x0002c630
   1254c:	0002cc14 	.word	0x0002cc14
		LL_ASSERT(conn_upd_curr == conn);
   12550:	4f60      	ldr	r7, [pc, #384]	; (126d4 <ull_conn_rx+0x1650>)
   12552:	6839      	ldr	r1, [r7, #0]
   12554:	428d      	cmp	r5, r1
   12556:	d010      	beq.n	1257a <ull_conn_rx+0x14f6>
   12558:	4a5f      	ldr	r2, [pc, #380]	; (126d8 <ull_conn_rx+0x1654>)
   1255a:	4960      	ldr	r1, [pc, #384]	; (126dc <ull_conn_rx+0x1658>)
   1255c:	4860      	ldr	r0, [pc, #384]	; (126e0 <ull_conn_rx+0x165c>)
   1255e:	f241 13ba 	movw	r3, #4538	; 0x11ba
   12562:	f010 fc50 	bl	22e06 <printk>
   12566:	4040      	eors	r0, r0
   12568:	f380 8811 	msr	BASEPRI, r0
   1256c:	f04f 0003 	mov.w	r0, #3
   12570:	df02      	svc	2
   12572:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   12576:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1257a:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   1257e:	2300      	movs	r3, #0
   12580:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   12582:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   12586:	f7ff baac 	b.w	11ae2 <ull_conn_rx+0xa5e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1258a:	2b23      	cmp	r3, #35	; 0x23
   1258c:	f43f ae26 	beq.w	121dc <ull_conn_rx+0x1158>
			conn->slave.ticks_to_offset =
   12590:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
   12594:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
   12598:	e620      	b.n	121dc <ull_conn_rx+0x1158>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1259a:	2a23      	cmp	r2, #35	; 0x23
   1259c:	f43f aa9a 	beq.w	11ad4 <ull_conn_rx+0xa50>
			conn->slave.ticks_to_offset =
   125a0:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
   125a4:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
   125a8:	f7ff ba94 	b.w	11ad4 <ull_conn_rx+0xa50>
	LL_ASSERT(rx_dle);
   125ac:	4a4a      	ldr	r2, [pc, #296]	; (126d8 <ull_conn_rx+0x1654>)
   125ae:	494d      	ldr	r1, [pc, #308]	; (126e4 <ull_conn_rx+0x1660>)
   125b0:	484b      	ldr	r0, [pc, #300]	; (126e0 <ull_conn_rx+0x165c>)
   125b2:	f241 4372 	movw	r3, #5234	; 0x1472
   125b6:	f010 fc26 	bl	22e06 <printk>
   125ba:	4040      	eors	r0, r0
   125bc:	f380 8811 	msr	BASEPRI, r0
   125c0:	f04f 0003 	mov.w	r0, #3
   125c4:	df02      	svc	2
   125c6:	e5cd      	b.n	12164 <ull_conn_rx+0x10e0>
			tx->next = conn->tx_head->next;
   125c8:	680b      	ldr	r3, [r1, #0]
   125ca:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   125cc:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   125ce:	e9c5 2270 	strd	r2, r2, [r5, #448]	; 0x1c0
   125d2:	e43d      	b.n	11e50 <ull_conn_rx+0xdcc>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   125d4:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   125d8:	f012 0f06 	tst.w	r2, #6
   125dc:	f43f ab6b 	beq.w	11cb6 <ull_conn_rx+0xc32>
   125e0:	f7fe beee 	b.w	113c0 <ull_conn_rx+0x33c>
			     lll->interval) ||
   125e4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   125e6:	4550      	cmp	r0, sl
   125e8:	f47f ad43 	bne.w	12072 <ull_conn_rx+0xfee>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   125ec:	f240 40e2 	movw	r0, #1250	; 0x4e2
   125f0:	fb00 f101 	mul.w	r1, r0, r1
   125f4:	f242 7010 	movw	r0, #10000	; 0x2710
   125f8:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   125fc:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12600:	3a01      	subs	r2, #1
   12602:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   12606:	b292      	uxth	r2, r2
   12608:	4290      	cmp	r0, r2
   1260a:	f47f ad32 	bne.w	12072 <ull_conn_rx+0xfee>
				conn->llcp_conn_param.state =
   1260e:	f8b5 217e 	ldrh.w	r2, [r5, #382]	; 0x17e
   12612:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   12616:	f042 0201 	orr.w	r2, r2, #1
   1261a:	f8a5 217e 	strh.w	r2, [r5, #382]	; 0x17e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1261e:	6822      	ldr	r2, [r4, #0]
   12620:	2101      	movs	r1, #1
   12622:	7111      	strb	r1, [r2, #4]
   12624:	e52c      	b.n	12080 <ull_conn_rx+0xffc>
				     lll->interval) ||
   12626:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   12628:	9802      	ldr	r0, [sp, #8]
   1262a:	4282      	cmp	r2, r0
   1262c:	f47f af4f 	bne.w	124ce <ull_conn_rx+0x144a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12630:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12634:	fb02 f00c 	mul.w	r0, r2, ip
   12638:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   1263c:	f8b5 60c6 	ldrh.w	r6, [r5, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12640:	fb02 020b 	mla	r2, r2, fp, r0
   12644:	3a01      	subs	r2, #1
   12646:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   1264a:	b292      	uxth	r2, r2
   1264c:	4296      	cmp	r6, r2
   1264e:	f47f af3e 	bne.w	124ce <ull_conn_rx+0x144a>
   12652:	e7dc      	b.n	1260e <ull_conn_rx+0x158a>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   12654:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
   12658:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
   1265c:	4293      	cmp	r3, r2
   1265e:	d00e      	beq.n	1267e <ull_conn_rx+0x15fa>
   12660:	4a1d      	ldr	r2, [pc, #116]	; (126d8 <ull_conn_rx+0x1654>)
   12662:	4921      	ldr	r1, [pc, #132]	; (126e8 <ull_conn_rx+0x1664>)
   12664:	481e      	ldr	r0, [pc, #120]	; (126e0 <ull_conn_rx+0x165c>)
   12666:	f241 139f 	movw	r3, #4511	; 0x119f
   1266a:	f010 fbcc 	bl	22e06 <printk>
   1266e:	4040      	eors	r0, r0
   12670:	f380 8811 	msr	BASEPRI, r0
   12674:	f04f 0003 	mov.w	r0, #3
   12678:	df02      	svc	2
   1267a:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1267e:	f895 117e 	ldrb.w	r1, [r5, #382]	; 0x17e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   12682:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
   12686:	f8a5 3114 	strh.w	r3, [r5, #276]	; 0x114
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1268a:	2305      	movs	r3, #5
   1268c:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12690:	f895 0112 	ldrb.w	r0, [r5, #274]	; 0x112
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12694:	f885 117e 	strb.w	r1, [r5, #382]	; 0x17e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12698:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1269c:	00db      	lsls	r3, r3, #3
   1269e:	f020 000f 	bic.w	r0, r0, #15
   126a2:	f043 0301 	orr.w	r3, r3, #1
   126a6:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   126a8:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   126aa:	2401      	movs	r4, #1
		conn->llcp_cu.ack--;
   126ac:	f885 2111 	strb.w	r2, [r5, #273]	; 0x111
		conn->llcp_cu.win_offset_us = 0U;
   126b0:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   126b2:	f8b5 2184 	ldrh.w	r2, [r5, #388]	; 0x184
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   126b6:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   126ba:	f8b5 3186 	ldrh.w	r3, [r5, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   126be:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
		conn->llcp_cu.win_offset_us = 0U;
   126c2:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   126c6:	f8a5 2116 	strh.w	r2, [r5, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   126ca:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
	if (err) {
   126ce:	f7fe bd26 	b.w	1111e <ull_conn_rx+0x9a>
   126d2:	bf00      	nop
   126d4:	20003520 	.word	0x20003520
   126d8:	0002caec 	.word	0x0002caec
   126dc:	0002cc60 	.word	0x0002cc60
   126e0:	0002c630 	.word	0x0002c630
   126e4:	0002cc78 	.word	0x0002cc78
   126e8:	0002cc38 	.word	0x0002cc38

000126ec <ull_conn_llcp>:
{
   126ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   126f0:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   126f2:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   126f6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   126fa:	4298      	cmp	r0, r3
{
   126fc:	460d      	mov	r5, r1
   126fe:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   12700:	d04f      	beq.n	127a2 <ull_conn_llcp+0xb6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12702:	1a1b      	subs	r3, r3, r0
   12704:	f003 0303 	and.w	r3, r3, #3
   12708:	2b02      	cmp	r3, #2
   1270a:	d062      	beq.n	127d2 <ull_conn_llcp+0xe6>
   1270c:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   12710:	468c      	mov	ip, r1
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12712:	f1bc 0f00 	cmp.w	ip, #0
   12716:	f2c0 8084 	blt.w	12822 <ull_conn_llcp+0x136>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1271a:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   1271e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   12722:	429a      	cmp	r2, r3
   12724:	d03a      	beq.n	1279c <ull_conn_llcp+0xb0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12726:	48c3      	ldr	r0, [pc, #780]	; (12a34 <ull_conn_llcp+0x348>)
   12728:	f7f8 feec 	bl	b504 <mem_acquire>
		if (tx) {
   1272c:	b368      	cbz	r0, 1278a <ull_conn_llcp+0x9e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   1272e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   12732:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12736:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   12738:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1273a:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1273e:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12740:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   12742:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   12744:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_tx->llctrl.terminate_ind.error_code =
   12748:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   1274c:	7202      	strb	r2, [r0, #8]
	if (
   1274e:	2b00      	cmp	r3, #0
   12750:	d05a      	beq.n	12808 <ull_conn_llcp+0x11c>
	    !conn->llcp_enc.pause_tx &&
   12752:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12756:	0791      	lsls	r1, r2, #30
   12758:	d456      	bmi.n	12808 <ull_conn_llcp+0x11c>
	    !conn->llcp_phy.pause_tx &&
   1275a:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1275e:	07d2      	lsls	r2, r2, #31
   12760:	d452      	bmi.n	12808 <ull_conn_llcp+0x11c>
		if (conn->tx_head == conn->tx_data) {
   12762:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12766:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12768:	bf04      	itt	eq
   1276a:	681a      	ldreq	r2, [r3, #0]
   1276c:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12770:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12774:	2a00      	cmp	r2, #0
   12776:	d14b      	bne.n	12810 <ull_conn_llcp+0x124>
			tx->next = conn->tx_head->next;
   12778:	681a      	ldr	r2, [r3, #0]
   1277a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1277c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1277e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   12780:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   12784:	b90b      	cbnz	r3, 1278a <ull_conn_llcp+0x9e>
		conn->tx_data_last = tx;
   12786:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		if (!conn->procedure_expire) {
   1278a:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
   1278e:	b928      	cbnz	r0, 1279c <ull_conn_llcp+0xb0>
			conn->procedure_expire = conn->supervision_reload;
   12790:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
   12794:	2b01      	cmp	r3, #1
   12796:	d95e      	bls.n	12856 <ull_conn_llcp+0x16a>
			conn->procedure_expire = conn->supervision_reload;
   12798:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   1279c:	2000      	movs	r0, #0
}
   1279e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   127a2:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
	if ((conn->llcp_ack == conn->llcp_req) &&
   127a6:	2900      	cmp	r1, #0
   127a8:	468c      	mov	ip, r1
   127aa:	f2c0 81be 	blt.w	12b2a <ull_conn_llcp+0x43e>
	    !conn->llcp_enc.pause_rx) {
   127ae:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   127b2:	f012 0801 	ands.w	r8, r2, #1
   127b6:	d1ac      	bne.n	12712 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   127b8:	f894 e111 	ldrb.w	lr, [r4, #273]	; 0x111
   127bc:	f894 7110 	ldrb.w	r7, [r4, #272]	; 0x110
   127c0:	4577      	cmp	r7, lr
   127c2:	f000 8369 	beq.w	12e98 <ull_conn_llcp+0x7ac>
			conn->llcp_ack -= 2U;
   127c6:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   127c8:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   127ca:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
   127ce:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   127d2:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   127d6:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
   127da:	429a      	cmp	r2, r3
   127dc:	d006      	beq.n	127ec <ull_conn_llcp+0x100>
			if ((conn->llcp_length.state ==
   127de:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
   127e2:	f002 0106 	and.w	r1, r2, #6
   127e6:	2904      	cmp	r1, #4
   127e8:	f000 81a5 	beq.w	12b36 <ull_conn_llcp+0x44a>
		switch (conn->llcp_type) {
   127ec:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
   127f0:	1e7b      	subs	r3, r7, #1
   127f2:	2b05      	cmp	r3, #5
   127f4:	f200 818b 	bhi.w	12b0e <ull_conn_llcp+0x422>
   127f8:	e8df f013 	tbh	[pc, r3, lsl #1]
   127fc:	01240156 	.word	0x01240156
   12800:	01890096 	.word	0x01890096
   12804:	004c0057 	.word	0x004c0057
		if (!conn->tx_ctrl) {
   12808:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1280c:	2a00      	cmp	r2, #0
   1280e:	d03b      	beq.n	12888 <ull_conn_llcp+0x19c>
	tx->next = conn->tx_ctrl_last->next;
   12810:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12814:	681a      	ldr	r2, [r3, #0]
   12816:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12818:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1281a:	6803      	ldr	r3, [r0, #0]
   1281c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
}
   12820:	e7b0      	b.n	12784 <ull_conn_llcp+0x98>
   12822:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12826:	2a00      	cmp	r2, #0
   12828:	f43f af77 	beq.w	1271a <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   1282c:	2a02      	cmp	r2, #2
   1282e:	f000 8146 	beq.w	12abe <ull_conn_llcp+0x3d2>
   12832:	2a06      	cmp	r2, #6
   12834:	d014      	beq.n	12860 <ull_conn_llcp+0x174>
   12836:	2a01      	cmp	r2, #1
   12838:	d01b      	beq.n	12872 <ull_conn_llcp+0x186>
			LL_ASSERT(0);
   1283a:	4a7f      	ldr	r2, [pc, #508]	; (12a38 <ull_conn_llcp+0x34c>)
   1283c:	497f      	ldr	r1, [pc, #508]	; (12a3c <ull_conn_llcp+0x350>)
   1283e:	4880      	ldr	r0, [pc, #512]	; (12a40 <ull_conn_llcp+0x354>)
   12840:	f240 4316 	movw	r3, #1046	; 0x416
   12844:	f010 fadf 	bl	22e06 <printk>
   12848:	4040      	eors	r0, r0
   1284a:	f380 8811 	msr	BASEPRI, r0
   1284e:	f04f 0003 	mov.w	r0, #3
   12852:	df02      	svc	2
			break;
   12854:	e761      	b.n	1271a <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   12856:	3301      	adds	r3, #1
   12858:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   1285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			event_counter = lll->event_counter +
   12860:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   12862:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   12864:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   12866:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12868:	b291      	uxth	r1, r2
   1286a:	4620      	mov	r0, r4
   1286c:	f7fd fefe 	bl	1066c <event_phy_upd_ind_prep>
		break;
   12870:	e753      	b.n	1271a <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   12872:	462a      	mov	r2, r5
   12874:	4631      	mov	r1, r6
   12876:	4620      	mov	r0, r4
   12878:	f7ee f932 	bl	ae0 <event_conn_upd_prep>
   1287c:	2800      	cmp	r0, #0
   1287e:	f47f af4c 	bne.w	1271a <ull_conn_llcp+0x2e>
				return -ECANCELED;
   12882:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   12886:	e78a      	b.n	1279e <ull_conn_llcp+0xb2>
			tx->next = conn->tx_head;
   12888:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1288a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1288e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   12892:	e777      	b.n	12784 <ull_conn_llcp+0x98>
			event_counter = lll->event_counter +
   12894:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   12896:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   12898:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   1289a:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1289c:	b289      	uxth	r1, r1
   1289e:	4620      	mov	r0, r4
   128a0:	f7fd fee4 	bl	1066c <event_phy_upd_ind_prep>
		break;
   128a4:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   128a8:	e733      	b.n	12712 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   128aa:	4862      	ldr	r0, [pc, #392]	; (12a34 <ull_conn_llcp+0x348>)
   128ac:	f7f8 fe2a 	bl	b504 <mem_acquire>
	if (tx) {
   128b0:	2800      	cmp	r0, #0
   128b2:	f000 8101 	beq.w	12ab8 <ull_conn_llcp+0x3cc>
		conn->llcp_ack = conn->llcp_req;
   128b6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   128ba:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   128be:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   128c0:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   128c2:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   128c4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   128c8:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   128cc:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   128ce:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   128d0:	71c1      	strb	r1, [r0, #7]
	if (
   128d2:	2b00      	cmp	r3, #0
   128d4:	f000 831e 	beq.w	12f14 <ull_conn_llcp+0x828>
	    !conn->llcp_enc.pause_tx &&
   128d8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   128dc:	0792      	lsls	r2, r2, #30
   128de:	f100 8319 	bmi.w	12f14 <ull_conn_llcp+0x828>
	    !conn->llcp_phy.pause_tx &&
   128e2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   128e6:	07d7      	lsls	r7, r2, #31
   128e8:	f100 8314 	bmi.w	12f14 <ull_conn_llcp+0x828>
		if (conn->tx_head == conn->tx_data) {
   128ec:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   128f0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   128f2:	bf04      	itt	eq
   128f4:	681a      	ldreq	r2, [r3, #0]
   128f6:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   128fa:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   128fe:	2a00      	cmp	r2, #0
   12900:	f000 87e0 	beq.w	138c4 <ull_conn_llcp+0x11d8>
	tx->next = conn->tx_ctrl_last->next;
   12904:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12908:	681a      	ldr	r2, [r3, #0]
   1290a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1290c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1290e:	6803      	ldr	r3, [r0, #0]
   12910:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12914:	2b00      	cmp	r3, #0
   12916:	f000 8446 	beq.w	131a6 <ull_conn_llcp+0xaba>
		conn->procedure_expire = conn->procedure_reload;
   1291a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   1291e:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12922:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   12926:	e6f4      	b.n	12712 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   12928:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   1292c:	f012 0803 	ands.w	r8, r2, #3
   12930:	f000 8165 	beq.w	12bfe <ull_conn_llcp+0x512>
		if (lll->role &&
   12934:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   12938:	2b00      	cmp	r3, #0
   1293a:	f6bf aeee 	bge.w	1271a <ull_conn_llcp+0x2e>
   1293e:	f1b8 0f01 	cmp.w	r8, #1
   12942:	f47f af6e 	bne.w	12822 <ull_conn_llcp+0x136>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12946:	483b      	ldr	r0, [pc, #236]	; (12a34 <ull_conn_llcp+0x348>)
   12948:	f7f8 fddc 	bl	b504 <mem_acquire>
	if (!tx) {
   1294c:	4680      	mov	r8, r0
   1294e:	2800      	cmp	r0, #0
   12950:	f000 80b2 	beq.w	12ab8 <ull_conn_llcp+0x3cc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12954:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12956:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12958:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1295c:	210d      	movs	r1, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1295e:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12962:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   12964:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12966:	71c2      	strb	r2, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12968:	210c      	movs	r1, #12
   1296a:	4638      	mov	r0, r7
   1296c:	f003 f976 	bl	15c5c <lll_csrand_isr_get>
   12970:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12974:	f8d8 200c 	ldr.w	r2, [r8, #12]
   12978:	f8c4 2106 	str.w	r2, [r4, #262]	; 0x106
   1297c:	f8c4 3102 	str.w	r3, [r4, #258]	; 0x102
	    conn->tx_head &&
   12980:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   12984:	f8d8 2010 	ldr.w	r2, [r8, #16]
   12988:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	if (
   1298c:	2b00      	cmp	r3, #0
   1298e:	f000 85a5 	beq.w	134dc <ull_conn_llcp+0xdf0>
	    !conn->llcp_enc.pause_tx &&
   12992:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12996:	0791      	lsls	r1, r2, #30
   12998:	f100 85a0 	bmi.w	134dc <ull_conn_llcp+0xdf0>
	    !conn->llcp_phy.pause_tx &&
   1299c:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   129a0:	07d2      	lsls	r2, r2, #31
   129a2:	f100 859b 	bmi.w	134dc <ull_conn_llcp+0xdf0>
		if (conn->tx_head == conn->tx_data) {
   129a6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   129aa:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   129ac:	bf04      	itt	eq
   129ae:	681a      	ldreq	r2, [r3, #0]
   129b0:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   129b4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   129b8:	2a00      	cmp	r2, #0
   129ba:	f000 87b4 	beq.w	13926 <ull_conn_llcp+0x123a>
	tx->next = conn->tx_ctrl_last->next;
   129be:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   129c2:	681a      	ldr	r2, [r3, #0]
   129c4:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   129c8:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   129cc:	f8d8 3000 	ldr.w	r3, [r8]
   129d0:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   129d4:	2b00      	cmp	r3, #0
   129d6:	f000 86c4 	beq.w	13762 <ull_conn_llcp+0x1076>
			rx = ll_pdu_rx_alloc();
   129da:	f7fc fcbd 	bl	f358 <ll_pdu_rx_alloc>
			if (!rx) {
   129de:	4601      	mov	r1, r0
   129e0:	2800      	cmp	r0, #0
   129e2:	d069      	beq.n	12ab8 <ull_conn_llcp+0x3cc>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   129e4:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
   129e6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   129e8:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   129ea:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   129ee:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   129f0:	2017      	movs	r0, #23
   129f2:	7748      	strb	r0, [r1, #29]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   129f4:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   129f6:	710a      	strb	r2, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   129f8:	77ca      	strb	r2, [r1, #31]
   129fa:	f8d4 2165 	ldr.w	r2, [r4, #357]	; 0x165
   129fe:	f8d4 3161 	ldr.w	r3, [r4, #353]	; 0x161
   12a02:	620b      	str	r3, [r1, #32]
   12a04:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   12a06:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
   12a0a:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   12a0e:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   12a12:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   12a16:	6808      	ldr	r0, [r1, #0]
   12a18:	f7fc fc70 	bl	f2fc <ll_rx_put>
			ll_rx_sched();
   12a1c:	f7fc fc78 	bl	f310 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   12a20:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   12a24:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12a28:	2202      	movs	r2, #2
   12a2a:	f362 0301 	bfi	r3, r2, #0, #2
   12a2e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   12a32:	e66e      	b.n	12712 <ull_conn_llcp+0x26>
   12a34:	200035a4 	.word	0x200035a4
   12a38:	0002caec 	.word	0x0002caec
   12a3c:	0002c6a0 	.word	0x0002c6a0
   12a40:	0002c630 	.word	0x0002c630
			event_counter = lll->event_counter +
   12a44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   12a46:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   12a48:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   12a4c:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
   12a4e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   12a50:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   12a54:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   12a56:	f040 8085 	bne.w	12b64 <ull_conn_llcp+0x478>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12a5a:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   12a5e:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12a62:	1afb      	subs	r3, r7, r3
   12a64:	0418      	lsls	r0, r3, #16
   12a66:	f53f ae54 	bmi.w	12712 <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12a6a:	f1bc 0f00 	cmp.w	ip, #0
   12a6e:	f2c0 8392 	blt.w	13196 <ull_conn_llcp+0xaaa>
			conn->llcp_ack = conn->llcp_req;
   12a72:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12a76:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   12a7a:	4623      	mov	r3, r4
		memcpy(&lll->data_chan_map[0],
   12a7c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   12a80:	f853 2fed 	ldr.w	r2, [r3, #237]!
   12a84:	63a2      	str	r2, [r4, #56]	; 0x38
   12a86:	791b      	ldrb	r3, [r3, #4]
   12a88:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   12a8a:	2105      	movs	r1, #5
   12a8c:	f7f8 ff06 	bl	b89c <util_ones_count_get>
		lll->data_chan_count =
   12a90:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12a94:	2301      	movs	r3, #1
		lll->data_chan_count =
   12a96:	f360 0c05 	bfi	ip, r0, #0, #6
   12a9a:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12a9e:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
   12aa2:	fa4f fc8c 	sxtb.w	ip, ip
   12aa6:	e634      	b.n	12712 <ull_conn_llcp+0x26>
			if (event_conn_upd_prep(conn, lazy,
   12aa8:	462a      	mov	r2, r5
   12aaa:	4631      	mov	r1, r6
   12aac:	4620      	mov	r0, r4
   12aae:	f7ee f817 	bl	ae0 <event_conn_upd_prep>
   12ab2:	2800      	cmp	r0, #0
   12ab4:	f43f aee5 	beq.w	12882 <ull_conn_llcp+0x196>
			break;
   12ab8:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12abc:	e629      	b.n	12712 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   12abe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   12ac0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   12ac2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   12ac6:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   12ac8:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   12aca:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   12ace:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   12ad0:	f040 80f6 	bne.w	12cc0 <ull_conn_llcp+0x5d4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12ad4:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   12ad8:	1ab6      	subs	r6, r6, r2
   12ada:	0430      	lsls	r0, r6, #16
   12adc:	f53f ae1d 	bmi.w	1271a <ull_conn_llcp+0x2e>
   12ae0:	4622      	mov	r2, r4
			conn->slave.llcp_type = LLCP_NONE;
   12ae2:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
   12ae6:	f852 3fed 	ldr.w	r3, [r2, #237]!
   12aea:	63a3      	str	r3, [r4, #56]	; 0x38
		memcpy(&lll->data_chan_map[0],
   12aec:	f104 0038 	add.w	r0, r4, #56	; 0x38
   12af0:	7913      	ldrb	r3, [r2, #4]
   12af2:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   12af4:	2105      	movs	r1, #5
   12af6:	f7f8 fed1 	bl	b89c <util_ones_count_get>
		lll->data_chan_count =
   12afa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12afe:	2201      	movs	r2, #1
		lll->data_chan_count =
   12b00:	f360 0305 	bfi	r3, r0, #0, #6
   12b04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12b08:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
   12b0c:	e605      	b.n	1271a <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   12b0e:	4ab3      	ldr	r2, [pc, #716]	; (12ddc <ull_conn_llcp+0x6f0>)
   12b10:	49b3      	ldr	r1, [pc, #716]	; (12de0 <ull_conn_llcp+0x6f4>)
   12b12:	48b4      	ldr	r0, [pc, #720]	; (12de4 <ull_conn_llcp+0x6f8>)
   12b14:	f240 33e5 	movw	r3, #997	; 0x3e5
   12b18:	f010 f975 	bl	22e06 <printk>
   12b1c:	4040      	eors	r0, r0
   12b1e:	f380 8811 	msr	BASEPRI, r0
   12b22:	f04f 0003 	mov.w	r0, #3
   12b26:	df02      	svc	2
   12b28:	e7c6      	b.n	12ab8 <ull_conn_llcp+0x3cc>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   12b2a:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
   12b2e:	2a00      	cmp	r2, #0
   12b30:	f47f ae7c 	bne.w	1282c <ull_conn_llcp+0x140>
   12b34:	e63b      	b.n	127ae <ull_conn_llcp+0xc2>
	switch (conn->llcp_length.state) {
   12b36:	f002 0107 	and.w	r1, r2, #7
   12b3a:	2906      	cmp	r1, #6
   12b3c:	f201 8049 	bhi.w	13bd2 <ull_conn_llcp+0x14e6>
   12b40:	a001      	add	r0, pc, #4	; (adr r0, 12b48 <ull_conn_llcp+0x45c>)
   12b42:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12b46:	bf00      	nop
   12b48:	00012ded 	.word	0x00012ded
   12b4c:	000127ed 	.word	0x000127ed
   12b50:	000127ed 	.word	0x000127ed
   12b54:	000127ed 	.word	0x000127ed
   12b58:	00012d59 	.word	0x00012d59
   12b5c:	00012d59 	.word	0x00012d59
   12b60:	000127ed 	.word	0x000127ed
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12b64:	48a0      	ldr	r0, [pc, #640]	; (12de8 <ull_conn_llcp+0x6fc>)
   12b66:	f7f8 fccd 	bl	b504 <mem_acquire>
		if (tx) {
   12b6a:	2800      	cmp	r0, #0
   12b6c:	d0a4      	beq.n	12ab8 <ull_conn_llcp+0x3cc>
			conn->llcp.chan_map.instant = event_counter +
   12b6e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   12b70:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b74:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   12b76:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   12b78:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   12b7a:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   12b7e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
   12b82:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b86:	f042 0203 	orr.w	r2, r2, #3
   12b8a:	4623      	mov	r3, r4
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b8c:	2708      	movs	r7, #8
			pdu_ctrl_tx->llctrl.opcode =
   12b8e:	2101      	movs	r1, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b90:	7147      	strb	r7, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b92:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   12b94:	71c1      	strb	r1, [r0, #7]
   12b96:	f853 2fed 	ldr.w	r2, [r3, #237]!
   12b9a:	6082      	str	r2, [r0, #8]
   12b9c:	791b      	ldrb	r3, [r3, #4]
   12b9e:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   12ba0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12ba4:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   12ba8:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   12bac:	2b00      	cmp	r3, #0
   12bae:	f000 82d8 	beq.w	13162 <ull_conn_llcp+0xa76>
	    !conn->llcp_enc.pause_tx &&
   12bb2:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12bb6:	0792      	lsls	r2, r2, #30
   12bb8:	f100 82d3 	bmi.w	13162 <ull_conn_llcp+0xa76>
	    !conn->llcp_phy.pause_tx &&
   12bbc:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12bc0:	07d7      	lsls	r7, r2, #31
   12bc2:	f100 82ce 	bmi.w	13162 <ull_conn_llcp+0xa76>
		if (conn->tx_head == conn->tx_data) {
   12bc6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12bca:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12bcc:	bf04      	itt	eq
   12bce:	681a      	ldreq	r2, [r3, #0]
   12bd0:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12bd4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12bd8:	2a00      	cmp	r2, #0
   12bda:	f000 8694 	beq.w	13906 <ull_conn_llcp+0x121a>
	tx->next = conn->tx_ctrl_last->next;
   12bde:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12be2:	681a      	ldr	r2, [r3, #0]
   12be4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12be6:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12be8:	6803      	ldr	r3, [r0, #0]
   12bea:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12bee:	2b00      	cmp	r3, #0
   12bf0:	f47f af62 	bne.w	12ab8 <ull_conn_llcp+0x3cc>
		conn->tx_data_last = tx;
   12bf4:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12bf8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   12bfc:	e589      	b.n	12712 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12bfe:	487a      	ldr	r0, [pc, #488]	; (12de8 <ull_conn_llcp+0x6fc>)
   12c00:	f7f8 fc80 	bl	b504 <mem_acquire>
	if (!tx) {
   12c04:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12c08:	4681      	mov	r9, r0
   12c0a:	2800      	cmp	r0, #0
   12c0c:	f43f ad81 	beq.w	12712 <ull_conn_llcp+0x26>
	if (!lll->role) {
   12c10:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   12c14:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   12c18:	f280 8325 	bge.w	13266 <ull_conn_llcp+0xb7a>
	else if (!lll->enc_rx) {
   12c1c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   12c20:	0719      	lsls	r1, r3, #28
   12c22:	f100 84fa 	bmi.w	1361a <ull_conn_llcp+0xf2e>
		if (conn->llcp.encryption.error_code) {
   12c26:	f894 80f9 	ldrb.w	r8, [r4, #249]	; 0xf9
   12c2a:	f1b8 0f00 	cmp.w	r8, #0
   12c2e:	f000 859f 	beq.w	13770 <ull_conn_llcp+0x1084>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12c32:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   12c34:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12c38:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
   12c3c:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12c3e:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   12c40:	f140 8522 	bpl.w	13688 <ull_conn_llcp+0xf9c>
	    (conn->llcp_feature.features_conn &
   12c44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   12c48:	075b      	lsls	r3, r3, #29
   12c4a:	f140 851d 	bpl.w	13688 <ull_conn_llcp+0xf9c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   12c4e:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12c50:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   12c52:	f880 8009 	strb.w	r8, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   12c56:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12c58:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   12c5a:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   12c5e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	conn->llcp.encryption.error_code = 0U;
   12c62:	2200      	movs	r2, #0
   12c64:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	if (
   12c68:	2b00      	cmp	r3, #0
   12c6a:	f000 847d 	beq.w	13568 <ull_conn_llcp+0xe7c>
	    !conn->llcp_enc.pause_tx &&
   12c6e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12c72:	0790      	lsls	r0, r2, #30
   12c74:	f100 8478 	bmi.w	13568 <ull_conn_llcp+0xe7c>
	    !conn->llcp_phy.pause_tx &&
   12c78:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12c7c:	07d1      	lsls	r1, r2, #31
   12c7e:	f100 8473 	bmi.w	13568 <ull_conn_llcp+0xe7c>
		if (conn->tx_head == conn->tx_data) {
   12c82:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12c86:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12c88:	bf04      	itt	eq
   12c8a:	681a      	ldreq	r2, [r3, #0]
   12c8c:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12c90:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12c94:	2a00      	cmp	r2, #0
   12c96:	f000 8692 	beq.w	139be <ull_conn_llcp+0x12d2>
	tx->next = conn->tx_ctrl_last->next;
   12c9a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12c9e:	681a      	ldr	r2, [r3, #0]
   12ca0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   12ca4:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   12ca8:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12cac:	f8d9 3000 	ldr.w	r3, [r9]
   12cb0:	2b00      	cmp	r3, #0
   12cb2:	f000 834f 	beq.w	13354 <ull_conn_llcp+0xc68>
	conn->llcp_ack = conn->llcp_req;
   12cb6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12cba:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   12cbe:	e528      	b.n	12712 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12cc0:	4849      	ldr	r0, [pc, #292]	; (12de8 <ull_conn_llcp+0x6fc>)
   12cc2:	f7f8 fc1f 	bl	b504 <mem_acquire>
		if (tx) {
   12cc6:	2800      	cmp	r0, #0
   12cc8:	f43f ad27 	beq.w	1271a <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   12ccc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   12cce:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12cd2:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   12cd4:	4433      	add	r3, r6
						      conn->lll.latency + 6;
   12cd6:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   12cd8:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12cdc:	f042 0203 	orr.w	r2, r2, #3
   12ce0:	4623      	mov	r3, r4
			conn->llcp.chan_map.initiate = 0U;
   12ce2:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12ce6:	2608      	movs	r6, #8
			pdu_ctrl_tx->llctrl.opcode =
   12ce8:	2501      	movs	r5, #1
			conn->llcp.chan_map.initiate = 0U;
   12cea:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12cee:	7146      	strb	r6, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12cf0:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   12cf2:	71c5      	strb	r5, [r0, #7]
   12cf4:	f853 2fed 	ldr.w	r2, [r3, #237]!
   12cf8:	6082      	str	r2, [r0, #8]
   12cfa:	791b      	ldrb	r3, [r3, #4]
   12cfc:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   12cfe:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12d02:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   12d06:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	f000 8238 	beq.w	13180 <ull_conn_llcp+0xa94>
	    !conn->llcp_enc.pause_tx &&
   12d10:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12d14:	0796      	lsls	r6, r2, #30
   12d16:	f100 8233 	bmi.w	13180 <ull_conn_llcp+0xa94>
	    !conn->llcp_phy.pause_tx &&
   12d1a:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12d1e:	07d5      	lsls	r5, r2, #31
   12d20:	f100 822e 	bmi.w	13180 <ull_conn_llcp+0xa94>
		if (conn->tx_head == conn->tx_data) {
   12d24:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12d28:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12d2a:	bf04      	itt	eq
   12d2c:	681a      	ldreq	r2, [r3, #0]
   12d2e:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12d32:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12d36:	2a00      	cmp	r2, #0
   12d38:	f000 85ed 	beq.w	13916 <ull_conn_llcp+0x122a>
	tx->next = conn->tx_ctrl_last->next;
   12d3c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12d40:	681a      	ldr	r2, [r3, #0]
   12d42:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12d44:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12d46:	6803      	ldr	r3, [r0, #0]
   12d48:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12d4c:	2b00      	cmp	r3, #0
   12d4e:	f47f ace4 	bne.w	1271a <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   12d52:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   12d56:	e4e0      	b.n	1271a <ull_conn_llcp+0x2e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   12d58:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   12d5c:	f8b4 c1a8 	ldrh.w	ip, [r4, #424]	; 0x1a8
		lll->max_rx_time = conn->llcp_length.rx_time;
   12d60:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   12d64:	f8b4 91aa 	ldrh.w	r9, [r4, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   12d68:	f8b4 81ae 	ldrh.w	r8, [r4, #430]	; 0x1ae
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   12d6c:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   12d70:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   12d72:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   12d76:	f000 83ed 	beq.w	13554 <ull_conn_llcp+0xe68>
			conn->llcp_length.state =
   12d7a:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
   12d7e:	2206      	movs	r2, #6
   12d80:	f362 0302 	bfi	r3, r2, #0, #3
   12d84:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		rx = conn->llcp_rx;
   12d88:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   12d8c:	2f00      	cmp	r7, #0
   12d8e:	f000 83c3 	beq.w	13518 <ull_conn_llcp+0xe2c>
   12d92:	6838      	ldr	r0, [r7, #0]
   12d94:	2800      	cmp	r0, #0
   12d96:	f000 83bf 	beq.w	13518 <ull_conn_llcp+0xe2c>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   12d9a:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   12d9c:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   12d9e:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
   12da2:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   12da6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12daa:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   12dac:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
   12dae:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12db2:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
   12db4:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   12db8:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   12dbc:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12dbe:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12dc0:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
   12dc2:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   12dc4:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   12dc8:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
   12dcc:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
   12dd0:	f7fc fa94 	bl	f2fc <ll_rx_put>
		ll_rx_sched();
   12dd4:	f7fc fa9c 	bl	f310 <ll_rx_sched>
	break;
   12dd8:	e508      	b.n	127ec <ull_conn_llcp+0x100>
   12dda:	bf00      	nop
   12ddc:	0002caec 	.word	0x0002caec
   12de0:	0002c6a0 	.word	0x0002c6a0
   12de4:	0002c630 	.word	0x0002c630
   12de8:	200035a4 	.word	0x200035a4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12dec:	48e2      	ldr	r0, [pc, #904]	; (13178 <ull_conn_llcp+0xa8c>)
   12dee:	f7f8 fb89 	bl	b504 <mem_acquire>
		if (!tx) {
   12df2:	2800      	cmp	r0, #0
   12df4:	f43f acfa 	beq.w	127ec <ull_conn_llcp+0x100>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   12df8:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   12dfc:	f8b4 11aa 	ldrh.w	r1, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   12e00:	f8b4 71ae 	ldrh.w	r7, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   12e04:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   12e08:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   12e0a:	f8a4 70d8 	strh.w	r7, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   12e0e:	f362 0302 	bfi	r3, r2, #0, #3
   12e12:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		pdu_ctrl_tx->len =
   12e16:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e18:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   12e1a:	7147      	strb	r7, [r0, #5]
	    conn->tx_head &&
   12e1c:	f8d4 c1bc 	ldr.w	ip, [r4, #444]	; 0x1bc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   12e20:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e22:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   12e26:	2714      	movs	r7, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   12e28:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   12e2a:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   12e2c:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12e2e:	7103      	strb	r3, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   12e30:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   12e32:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   12e34:	71c7      	strb	r7, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   12e36:	7241      	strb	r1, [r0, #9]
   12e38:	7202      	strb	r2, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   12e3a:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   12e3c:	7383      	strb	r3, [r0, #14]
	if (
   12e3e:	f1bc 0f00 	cmp.w	ip, #0
   12e42:	f000 8204 	beq.w	1324e <ull_conn_llcp+0xb62>
	    !conn->llcp_enc.pause_tx &&
   12e46:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12e4a:	079f      	lsls	r7, r3, #30
   12e4c:	f100 81ff 	bmi.w	1324e <ull_conn_llcp+0xb62>
	    !conn->llcp_phy.pause_tx &&
   12e50:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   12e54:	07d9      	lsls	r1, r3, #31
   12e56:	f100 81fa 	bmi.w	1324e <ull_conn_llcp+0xb62>
		if (conn->tx_head == conn->tx_data) {
   12e5a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   12e5e:	459c      	cmp	ip, r3
			conn->tx_data = conn->tx_data->next;
   12e60:	bf04      	itt	eq
   12e62:	f8dc 3000 	ldreq.w	r3, [ip]
   12e66:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12e6a:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   12e6e:	2b00      	cmp	r3, #0
   12e70:	f000 8564 	beq.w	1393c <ull_conn_llcp+0x1250>
	tx->next = conn->tx_ctrl_last->next;
   12e74:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12e78:	681a      	ldr	r2, [r3, #0]
   12e7a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12e7c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12e7e:	f8d0 c000 	ldr.w	ip, [r0]
   12e82:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12e86:	f1bc 0f00 	cmp.w	ip, #0
   12e8a:	f000 845b 	beq.w	13744 <ull_conn_llcp+0x1058>
		conn->procedure_expire = conn->procedure_reload;
   12e8e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   12e92:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
   12e96:	e4a9      	b.n	127ec <ull_conn_llcp+0x100>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   12e98:	f894 7125 	ldrb.w	r7, [r4, #293]	; 0x125
   12e9c:	f894 9124 	ldrb.w	r9, [r4, #292]	; 0x124
   12ea0:	454f      	cmp	r7, r9
   12ea2:	d042      	beq.n	12f2a <ull_conn_llcp+0x83e>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   12ea4:	eba7 0709 	sub.w	r7, r7, r9
   12ea8:	07f9      	lsls	r1, r7, #31
   12eaa:	f57f ac32 	bpl.w	12712 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   12eae:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12eb2:	f013 0701 	ands.w	r7, r3, #1
   12eb6:	f000 817a 	beq.w	131ae <ull_conn_llcp+0xac2>
		rx = ll_pdu_rx_alloc();
   12eba:	f7fc fa4d 	bl	f358 <ll_pdu_rx_alloc>
		if (!rx) {
   12ebe:	4601      	mov	r1, r0
   12ec0:	b310      	cbz	r0, 12f08 <ull_conn_llcp+0x81c>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   12ec2:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   12ec6:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		rx->hdr.handle = conn->lll.handle;
   12eca:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   12ecc:	f8c0 8020 	str.w	r8, [r0, #32]
   12ed0:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12ed4:	2303      	movs	r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12ed6:	2009      	movs	r0, #9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ed8:	7f0a      	ldrb	r2, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12eda:	710b      	strb	r3, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12edc:	7748      	strb	r0, [r1, #29]
		sys_put_le24(conn->llcp_feature.features_peer,
   12ede:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
		rx->hdr.handle = conn->lll.handle;
   12ee2:	80cf      	strh	r7, [r1, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ee4:	f042 0203 	orr.w	r2, r2, #3
	dst[1] = val >> 8;
   12ee8:	f3c3 2707 	ubfx	r7, r3, #8, #8
   12eec:	770a      	strb	r2, [r1, #28]
	dst[2] = val >> 16;
   12eee:	0c1a      	lsrs	r2, r3, #16
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12ef0:	77c8      	strb	r0, [r1, #31]
	dst[0] = val;
   12ef2:	f881 3020 	strb.w	r3, [r1, #32]
	dst[1] = val >> 8;
   12ef6:	f881 7021 	strb.w	r7, [r1, #33]	; 0x21
	dst[2] = val >> 16;
   12efa:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
	ll_rx_put(rx->hdr.link, rx);
   12efe:	6808      	ldr	r0, [r1, #0]
   12f00:	f7fc f9fc 	bl	f2fc <ll_rx_put>
	ll_rx_sched();
   12f04:	f7fc fa04 	bl	f310 <ll_rx_sched>
	break;
   12f08:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12f0c:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   12f10:	f7ff bbf7 	b.w	12702 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   12f14:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12f18:	2a00      	cmp	r2, #0
   12f1a:	f47f acf3 	bne.w	12904 <ull_conn_llcp+0x218>
			tx->next = conn->tx_head;
   12f1e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12f20:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   12f24:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   12f28:	e4f4      	b.n	12914 <ull_conn_llcp+0x228>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   12f2a:	f894 7131 	ldrb.w	r7, [r4, #305]	; 0x131
   12f2e:	f894 8130 	ldrb.w	r8, [r4, #304]	; 0x130
   12f32:	4547      	cmp	r7, r8
   12f34:	d038      	beq.n	12fa8 <ull_conn_llcp+0x8bc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   12f36:	eba7 0708 	sub.w	r7, r7, r8
   12f3a:	07f8      	lsls	r0, r7, #31
   12f3c:	f57f abe9 	bpl.w	12712 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   12f40:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   12f44:	07d9      	lsls	r1, r3, #31
   12f46:	f140 83b5 	bpl.w	136b4 <ull_conn_llcp+0xfc8>
	} else if (conn->llcp_version.rx) {
   12f4a:	0798      	lsls	r0, r3, #30
   12f4c:	f140 83a4 	bpl.w	13698 <ull_conn_llcp+0xfac>
		rx = ll_pdu_rx_alloc();
   12f50:	f7fc fa02 	bl	f358 <ll_pdu_rx_alloc>
		if (!rx) {
   12f54:	4601      	mov	r1, r0
   12f56:	2800      	cmp	r0, #0
   12f58:	d0d6      	beq.n	12f08 <ull_conn_llcp+0x81c>
		conn->llcp_version.ack = conn->llcp_version.req;
   12f5a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   12f5e:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12f62:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   12f64:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   12f66:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12f68:	f043 0303 	orr.w	r3, r3, #3
   12f6c:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12f6e:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   12f70:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12f72:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12f74:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   12f76:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12f78:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
   12f7a:	f894 0133 	ldrb.w	r0, [r4, #307]	; 0x133
		pdu->llctrl.version_ind.sub_version_number =
   12f7e:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
		pdu->llctrl.version_ind.company_id =
   12f82:	f8b4 2134 	ldrh.w	r2, [r4, #308]	; 0x134
   12f86:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		pdu->llctrl.version_ind.version_number =
   12f8a:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.sub_version_number =
   12f8e:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   12f92:	6808      	ldr	r0, [r1, #0]
   12f94:	f7fc f9b2 	bl	f2fc <ll_rx_put>
		ll_rx_sched();
   12f98:	f7fc f9ba 	bl	f310 <ll_rx_sched>
   12f9c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12fa0:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   12fa4:	f7ff bbad 	b.w	12702 <ull_conn_llcp+0x16>
		} else if (conn->llcp_conn_param.ack !=
   12fa8:	f894 817d 	ldrb.w	r8, [r4, #381]	; 0x17d
   12fac:	f894 717c 	ldrb.w	r7, [r4, #380]	; 0x17c
   12fb0:	45b8      	cmp	r8, r7
   12fb2:	f000 81d2 	beq.w	1335a <ull_conn_llcp+0xc6e>
	conn_upd = conn_upd_curr;
   12fb6:	4f71      	ldr	r7, [pc, #452]	; (1317c <ull_conn_llcp+0xa90>)
   12fb8:	f8d7 8000 	ldr.w	r8, [r7]
	if (conn_upd && (conn_upd != conn)) {
   12fbc:	f1b8 0f00 	cmp.w	r8, #0
   12fc0:	f000 846a 	beq.w	13898 <ull_conn_llcp+0x11ac>
   12fc4:	4544      	cmp	r4, r8
   12fc6:	f47f aba4 	bne.w	12712 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   12fca:	f894 817e 	ldrb.w	r8, [r4, #382]	; 0x17e
   12fce:	f008 0807 	and.w	r8, r8, #7
   12fd2:	f1b8 0f05 	cmp.w	r8, #5
   12fd6:	f200 860e 	bhi.w	13bf6 <ull_conn_llcp+0x150a>
   12fda:	f20f 0908 	addw	r9, pc, #8
   12fde:	f859 f028 	ldr.w	pc, [r9, r8, lsl #2]
   12fe2:	bf00      	nop
   12fe4:	000130cb 	.word	0x000130cb
   12fe8:	0001304b 	.word	0x0001304b
   12fec:	00012ffd 	.word	0x00012ffd
   12ff0:	00012703 	.word	0x00012703
   12ff4:	00012703 	.word	0x00012703
   12ff8:	00012703 	.word	0x00012703
	if (conn->llcp_enc.pause_tx) {
   12ffc:	0791      	lsls	r1, r2, #30
   12ffe:	f53f ab88 	bmi.w	12712 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   13002:	f7fc f9a9 	bl	f358 <ll_pdu_rx_alloc>
	if (!rx) {
   13006:	4601      	mov	r1, r0
   13008:	2800      	cmp	r0, #0
   1300a:	f43f af7d 	beq.w	12f08 <ull_conn_llcp+0x81c>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1300e:	f894 017e 	ldrb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13012:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   13014:	2203      	movs	r2, #3
   13016:	f362 0002 	bfi	r0, r2, #0, #3
   1301a:	f884 017e 	strb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1301e:	4313      	orrs	r3, r2
	rx->hdr.handle = conn->lll.handle;
   13020:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13022:	710a      	strb	r2, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   13024:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13026:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   13028:	774a      	strb	r2, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1302a:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1302e:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
	rx->hdr.handle = conn->lll.handle;
   13032:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   13034:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   13038:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1303a:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1303e:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13040:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   13042:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   13044:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13046:	77cb      	strb	r3, [r1, #31]
   13048:	e759      	b.n	12efe <ull_conn_llcp+0x812>
	if (conn->llcp_conn_param.status) {
   1304a:	f894 817f 	ldrb.w	r8, [r4, #383]	; 0x17f
   1304e:	f1b8 0f00 	cmp.w	r8, #0
   13052:	f040 84c5 	bne.w	139e0 <ull_conn_llcp+0x12f4>
	if (!conn->lll.role) {
   13056:	2900      	cmp	r1, #0
   13058:	f2c0 854f 	blt.w	13afa <ull_conn_llcp+0x140e>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1305c:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if (conn->llcp_conn_param.preferred_periodicity) {
   13060:	f894 1188 	ldrb.w	r1, [r4, #392]	; 0x188
		conn->llcp_cu.win_offset_us = 0U;
   13064:	f8c4 811c 	str.w	r8, [r4, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13068:	2205      	movs	r2, #5
   1306a:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
   1306e:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13070:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
		conn->llcp_cu.win_size = 1U;
   13074:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
		if (conn->llcp_conn_param.preferred_periodicity) {
   13078:	2900      	cmp	r1, #0
   1307a:	f000 8588 	beq.w	13b8e <ull_conn_llcp+0x14a2>
				((conn->llcp_conn_param.interval_min /
   1307e:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   13082:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
   13086:	4413      	add	r3, r2
			conn->llcp_cu.interval =
   13088:	fb13 f301 	smulbb	r3, r3, r1
   1308c:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1308e:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   13092:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
   13096:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1309a:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1309e:	00db      	lsls	r3, r3, #3
   130a0:	f021 020f 	bic.w	r2, r1, #15
   130a4:	f043 0302 	orr.w	r3, r3, #2
   130a8:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   130aa:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   130ae:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   130b2:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		conn->llcp_cu.ack--;
   130b6:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   130ba:	f884 e111 	strb.w	lr, [r4, #273]	; 0x111
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   130be:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   130c2:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   130c6:	f7ff bb28 	b.w	1271a <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   130ca:	482b      	ldr	r0, [pc, #172]	; (13178 <ull_conn_llcp+0xa8c>)
			event_counter = lll->event_counter +
   130cc:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
   130d0:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   130d4:	f7f8 fa16 	bl	b504 <mem_acquire>
	if (!tx) {
   130d8:	4601      	mov	r1, r0
   130da:	2800      	cmp	r0, #0
   130dc:	f43f af14 	beq.w	12f08 <ull_conn_llcp+0x81c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130e0:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   130e2:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130e4:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   130e8:	2218      	movs	r2, #24
   130ea:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130ec:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   130ee:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   130f2:	f8b4 7182 	ldrh.w	r7, [r4, #386]	; 0x182
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   130f6:	f8b4 c184 	ldrh.w	ip, [r4, #388]	; 0x184
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   130fa:	810b      	strh	r3, [r1, #8]
	p->preferred_periodicity = 0U;
   130fc:	2200      	movs	r2, #0
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   130fe:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
	p->preferred_periodicity = 0U;
   13102:	740a      	strb	r2, [r1, #16]
			event_counter = lll->event_counter +
   13104:	eb08 0009 	add.w	r0, r8, r9
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   13108:	814f      	strh	r7, [r1, #10]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1310a:	4430      	add	r0, r6
	conn->procedure_expire = conn->procedure_reload;
   1310c:	f8b4 70ca 	ldrh.w	r7, [r4, #202]	; 0xca
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   13110:	f8a1 c00c 	strh.w	ip, [r1, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   13114:	81cb      	strh	r3, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13116:	f04f 0c0f 	mov.w	ip, #15
	p->offset1 = sys_cpu_to_le16(0xffff);
   1311a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->offset0 = sys_cpu_to_le16(0x0000);
   1311e:	74ca      	strb	r2, [r1, #19]
   13120:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   13122:	754b      	strb	r3, [r1, #21]
   13124:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   13126:	75cb      	strb	r3, [r1, #23]
   13128:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   1312a:	764b      	strb	r3, [r1, #25]
   1312c:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   1312e:	76cb      	strb	r3, [r1, #27]
   13130:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   13132:	774b      	strb	r3, [r1, #29]
   13134:	778b      	strb	r3, [r1, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13136:	f881 c007 	strb.w	ip, [r1, #7]
	conn->procedure_expire = conn->procedure_reload;
   1313a:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1313e:	f8a1 0011 	strh.w	r0, [r1, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   13142:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   13146:	2004      	movs	r0, #4
   13148:	f360 0302 	bfi	r3, r0, #0, #3
   1314c:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
	ctrl_tx_pause_enqueue(conn, tx, false);
   13150:	4620      	mov	r0, r4
   13152:	f7fc ffcb 	bl	100ec <ctrl_tx_pause_enqueue>
   13156:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1315a:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
}
   1315e:	f7ff bad0 	b.w	12702 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   13162:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13166:	2a00      	cmp	r2, #0
   13168:	f47f ad39 	bne.w	12bde <ull_conn_llcp+0x4f2>
			tx->next = conn->tx_head;
   1316c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1316e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13172:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   13176:	e53a      	b.n	12bee <ull_conn_llcp+0x502>
   13178:	200035a4 	.word	0x200035a4
   1317c:	20003520 	.word	0x20003520
		if (!conn->tx_ctrl) {
   13180:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13184:	2a00      	cmp	r2, #0
   13186:	f47f add9 	bne.w	12d3c <ull_conn_llcp+0x650>
			tx->next = conn->tx_head;
   1318a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1318c:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13190:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   13194:	e5da      	b.n	12d4c <ull_conn_llcp+0x660>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   13196:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1319a:	2b00      	cmp	r3, #0
   1319c:	f43f ac69 	beq.w	12a72 <ull_conn_llcp+0x386>
			conn->slave.llcp_type = LLCP_NONE;
   131a0:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
   131a4:	e469      	b.n	12a7a <ull_conn_llcp+0x38e>
		conn->tx_data_last = tx;
   131a6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   131aa:	f7ff bbb6 	b.w	1291a <ull_conn_llcp+0x22e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   131ae:	48d8      	ldr	r0, [pc, #864]	; (13510 <ull_conn_llcp+0xe24>)
   131b0:	f7f8 f9a8 	bl	b504 <mem_acquire>
	if (tx) {
   131b4:	2800      	cmp	r0, #0
   131b6:	f43f aea7 	beq.w	12f08 <ull_conn_llcp+0x81c>
		conn->llcp_feature.ack--;
   131ba:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
		conn->llcp_feature.features_conn = LL_FEAT;
   131be:	4bd5      	ldr	r3, [pc, #852]	; (13514 <ull_conn_llcp+0xe28>)
   131c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		conn->llcp_feature.ack--;
   131c4:	3a01      	subs	r2, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   131c6:	2309      	movs	r3, #9
		conn->llcp_feature.ack--;
   131c8:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   131cc:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   131ce:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   131d2:	6087      	str	r7, [r0, #8]
   131d4:	60c7      	str	r7, [r0, #12]
		sys_put_le24(conn->llcp_feature.features_conn,
   131d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   131da:	7203      	strb	r3, [r0, #8]
	dst[1] = val >> 8;
   131dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   131e0:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   131e2:	7242      	strb	r2, [r0, #9]
	dst[2] = val >> 16;
   131e4:	7283      	strb	r3, [r0, #10]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   131e6:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
   131e8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu->llctrl.opcode = !conn->lll.role ?
   131ec:	2900      	cmp	r1, #0
   131ee:	bfac      	ite	ge
   131f0:	2108      	movge	r1, #8
   131f2:	210e      	movlt	r1, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   131f4:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = !conn->lll.role ?
   131f8:	71c1      	strb	r1, [r0, #7]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   131fa:	7102      	strb	r2, [r0, #4]
	if (
   131fc:	2b00      	cmp	r3, #0
   131fe:	f000 819e 	beq.w	1353e <ull_conn_llcp+0xe52>
	    !conn->llcp_enc.pause_tx &&
   13202:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   13206:	0792      	lsls	r2, r2, #30
   13208:	f100 8199 	bmi.w	1353e <ull_conn_llcp+0xe52>
	    !conn->llcp_phy.pause_tx &&
   1320c:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   13210:	07d7      	lsls	r7, r2, #31
   13212:	f100 8194 	bmi.w	1353e <ull_conn_llcp+0xe52>
		if (conn->tx_head == conn->tx_data) {
   13216:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1321a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1321c:	bf04      	itt	eq
   1321e:	681a      	ldreq	r2, [r3, #0]
   13220:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   13224:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13228:	2a00      	cmp	r2, #0
   1322a:	f000 83c1 	beq.w	139b0 <ull_conn_llcp+0x12c4>
	tx->next = conn->tx_ctrl_last->next;
   1322e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   13232:	681a      	ldr	r2, [r3, #0]
   13234:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13236:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   13238:	6803      	ldr	r3, [r0, #0]
   1323a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1323e:	2b00      	cmp	r3, #0
   13240:	f000 8293 	beq.w	1376a <ull_conn_llcp+0x107e>
		conn->procedure_expire = conn->procedure_reload;
   13244:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   13248:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   1324c:	e65c      	b.n	12f08 <ull_conn_llcp+0x81c>
		if (!conn->tx_ctrl) {
   1324e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   13252:	2b00      	cmp	r3, #0
   13254:	f47f ae0e 	bne.w	12e74 <ull_conn_llcp+0x788>
			tx->next = conn->tx_head;
   13258:	f8c0 c000 	str.w	ip, [r0]
				conn->tx_ctrl = tx;
   1325c:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13260:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   13264:	e60f      	b.n	12e86 <ull_conn_llcp+0x79a>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   13266:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   1326a:	463b      	mov	r3, r7
   1326c:	4642      	mov	r2, r8
   1326e:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   13272:	f204 1069 	addw	r0, r4, #361	; 0x169
   13276:	f004 f9db 	bl	17630 <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1327a:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
   1327e:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
   13282:	f8d4 007f 	ldr.w	r0, [r4, #127]	; 0x7f
   13286:	f8d4 1083 	ldr.w	r1, [r4, #131]	; 0x83
   1328a:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
   1328e:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   13292:	4622      	mov	r2, r4
   13294:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   13298:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   1329c:	f852 1f98 	ldr.w	r1, [r2, #152]!
		lll->ccm_rx.direction = 0;
   132a0:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
   132a4:	6852      	ldr	r2, [r2, #4]
		lll->enc_rx = 1;
   132a6:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   132aa:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
		lll->ccm_tx.direction = 1;
   132ae:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
   132b2:	f8c4 10b9 	str.w	r1, [r4, #185]	; 0xb9
		lll->enc_rx = 1;
   132b6:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
   132ba:	f368 0000 	bfi	r0, r8, #0, #1
		lll->ccm_tx.direction = 1;
   132be:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
   132c2:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
   132c6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
   132ca:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   132ce:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   132d2:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   132d6:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   132da:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   132de:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   132e2:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   132e6:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
   132ea:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   132ee:	4651      	mov	r1, sl
		lll->ccm_tx.counter = 0;
   132f0:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
   132f4:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   132f8:	4620      	mov	r0, r4
   132fa:	f7fd f8c3 	bl	10484 <start_enc_rsp_send>
	    conn->tx_head &&
   132fe:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   13302:	2b00      	cmp	r3, #0
   13304:	f000 80f7 	beq.w	134f6 <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   13308:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1330c:	0797      	lsls	r7, r2, #30
   1330e:	f100 80f2 	bmi.w	134f6 <ull_conn_llcp+0xe0a>
	    !conn->llcp_phy.pause_tx &&
   13312:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   13316:	07d0      	lsls	r0, r2, #31
   13318:	f100 80ed 	bmi.w	134f6 <ull_conn_llcp+0xe0a>
		if (conn->tx_head == conn->tx_data) {
   1331c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13320:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   13322:	bf04      	itt	eq
   13324:	681a      	ldreq	r2, [r3, #0]
   13326:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1332a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1332e:	2a00      	cmp	r2, #0
   13330:	f000 831a 	beq.w	13968 <ull_conn_llcp+0x127c>
	tx->next = conn->tx_ctrl_last->next;
   13334:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   13338:	681a      	ldr	r2, [r3, #0]
   1333a:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1333e:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   13342:	f8d9 3000 	ldr.w	r3, [r9]
   13346:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1334a:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
	if (!tx->next) {
   1334e:	2b00      	cmp	r3, #0
   13350:	f47f acb1 	bne.w	12cb6 <ull_conn_llcp+0x5ca>
		conn->tx_data_last = tx;
   13354:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13358:	e4ad      	b.n	12cb6 <ull_conn_llcp+0x5ca>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1335a:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   1335e:	f894 71a5 	ldrb.w	r7, [r4, #421]	; 0x1a5
   13362:	4297      	cmp	r7, r2
   13364:	f000 810d 	beq.w	13582 <ull_conn_llcp+0xe96>
	switch (conn->llcp_length.state) {
   13368:	f894 c1a6 	ldrb.w	ip, [r4, #422]	; 0x1a6
   1336c:	f00c 0107 	and.w	r1, ip, #7
   13370:	2906      	cmp	r1, #6
   13372:	f200 843d 	bhi.w	13bf0 <ull_conn_llcp+0x1504>
   13376:	a701      	add	r7, pc, #4	; (adr r7, 1337c <ull_conn_llcp+0xc90>)
   13378:	f857 f021 	ldr.w	pc, [r7, r1, lsl #2]
   1337c:	00013437 	.word	0x00013437
   13380:	00012703 	.word	0x00012703
   13384:	00012703 	.word	0x00012703
   13388:	00012703 	.word	0x00012703
   1338c:	00013399 	.word	0x00013399
   13390:	00013399 	.word	0x00013399
   13394:	00012703 	.word	0x00012703
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   13398:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   1339c:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   133a0:	f00c 0107 	and.w	r1, ip, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
   133a4:	f8b4 31ac 	ldrh.w	r3, [r4, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   133a8:	f8b4 81aa 	ldrh.w	r8, [r4, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   133ac:	f8b4 71ae 	ldrh.w	r7, [r4, #430]	; 0x1ae
		lll->max_rx_time = conn->llcp_length.rx_time;
   133b0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   133b4:	2904      	cmp	r1, #4
   133b6:	f000 82f1 	beq.w	1399c <ull_conn_llcp+0x12b0>
			conn->llcp_length.state =
   133ba:	4663      	mov	r3, ip
   133bc:	2206      	movs	r2, #6
   133be:	f362 0302 	bfi	r3, r2, #0, #3
   133c2:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		rx = conn->llcp_rx;
   133c6:	f8d4 910c 	ldr.w	r9, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   133ca:	f1b9 0f00 	cmp.w	r9, #0
   133ce:	f000 82d5 	beq.w	1397c <ull_conn_llcp+0x1290>
   133d2:	f8d9 0000 	ldr.w	r0, [r9]
   133d6:	2800      	cmp	r0, #0
   133d8:	f000 82d0 	beq.w	1397c <ull_conn_llcp+0x1290>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   133dc:	f899 301c 	ldrb.w	r3, [r9, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   133e0:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   133e2:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
   133e6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   133ea:	f043 0303 	orr.w	r3, r3, #3
   133ee:	f889 301c 	strb.w	r3, [r9, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133f2:	2203      	movs	r2, #3
		pdu_ctrl_rx->len =
   133f4:	2309      	movs	r3, #9
   133f6:	f889 301d 	strb.w	r3, [r9, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133fa:	f889 2004 	strb.w	r2, [r9, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   133fe:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   13402:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
   13406:	f8a9 2022 	strh.w	r2, [r9, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1340a:	2315      	movs	r3, #21
   1340c:	f889 301f 	strb.w	r3, [r9, #31]
		rx->hdr.handle = conn->lll.handle;
   13410:	f8a9 c006 	strh.w	ip, [r9, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   13414:	f8a9 1020 	strh.w	r1, [r9, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   13418:	f8a9 8024 	strh.w	r8, [r9, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   1341c:	4649      	mov	r1, r9
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1341e:	f8a9 7026 	strh.w	r7, [r9, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   13422:	f7fb ff6b 	bl	f2fc <ll_rx_put>
		ll_rx_sched();
   13426:	f7fb ff73 	bl	f310 <ll_rx_sched>
	break;
   1342a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1342e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   13432:	f7ff b966 	b.w	12702 <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13436:	4836      	ldr	r0, [pc, #216]	; (13510 <ull_conn_llcp+0xe24>)
   13438:	f7f8 f864 	bl	b504 <mem_acquire>
		if (!tx) {
   1343c:	4601      	mov	r1, r0
   1343e:	2800      	cmp	r0, #0
   13440:	f43f ad62 	beq.w	12f08 <ull_conn_llcp+0x81c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   13444:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   13448:	f8b4 71aa 	ldrh.w	r7, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   1344c:	f8b4 01ae 	ldrh.w	r0, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   13450:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   13454:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   13456:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1345a:	f362 0302 	bfi	r3, r2, #0, #3
   1345e:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		pdu_ctrl_tx->len =
   13462:	2009      	movs	r0, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13464:	790b      	ldrb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   13466:	7148      	strb	r0, [r1, #5]
	    conn->tx_head &&
   13468:	f8d4 01bc 	ldr.w	r0, [r4, #444]	; 0x1bc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1346c:	818f      	strh	r7, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1346e:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   13472:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   13476:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   13478:	73ca      	strb	r2, [r1, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1347a:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1347c:	710b      	strb	r3, [r1, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1347e:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   13480:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   13482:	f881 c007 	strb.w	ip, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   13486:	724f      	strb	r7, [r1, #9]
   13488:	720a      	strb	r2, [r1, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1348a:	728b      	strb	r3, [r1, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1348c:	738b      	strb	r3, [r1, #14]
	if (
   1348e:	2800      	cmp	r0, #0
   13490:	f000 825f 	beq.w	13952 <ull_conn_llcp+0x1266>
	    !conn->llcp_enc.pause_tx &&
   13494:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   13498:	079a      	lsls	r2, r3, #30
   1349a:	f100 825a 	bmi.w	13952 <ull_conn_llcp+0x1266>
	    !conn->llcp_phy.pause_tx &&
   1349e:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   134a2:	07db      	lsls	r3, r3, #31
   134a4:	f100 8255 	bmi.w	13952 <ull_conn_llcp+0x1266>
		if (conn->tx_head == conn->tx_data) {
   134a8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   134ac:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
   134ae:	bf04      	itt	eq
   134b0:	6803      	ldreq	r3, [r0, #0]
   134b2:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   134b6:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   134ba:	2b00      	cmp	r3, #0
   134bc:	f000 8383 	beq.w	13bc6 <ull_conn_llcp+0x14da>
	tx->next = conn->tx_ctrl_last->next;
   134c0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   134c4:	681a      	ldr	r2, [r3, #0]
   134c6:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   134c8:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   134ca:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   134ce:	680b      	ldr	r3, [r1, #0]
   134d0:	2b00      	cmp	r3, #0
   134d2:	f47f aeb7 	bne.w	13244 <ull_conn_llcp+0xb58>
		conn->tx_data_last = tx;
   134d6:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   134da:	e6b3      	b.n	13244 <ull_conn_llcp+0xb58>
		if (!conn->tx_ctrl) {
   134dc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   134e0:	2a00      	cmp	r2, #0
   134e2:	f47f aa6c 	bne.w	129be <ull_conn_llcp+0x2d2>
			tx->next = conn->tx_head;
   134e6:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   134ea:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   134ee:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   134f2:	f7ff ba6f 	b.w	129d4 <ull_conn_llcp+0x2e8>
		if (!conn->tx_ctrl) {
   134f6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   134fa:	2a00      	cmp	r2, #0
   134fc:	f47f af1a 	bne.w	13334 <ull_conn_llcp+0xc48>
			tx->next = conn->tx_head;
   13500:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13504:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13508:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1350c:	e71d      	b.n	1334a <ull_conn_llcp+0xc5e>
   1350e:	bf00      	nop
   13510:	200035a4 	.word	0x200035a4
   13514:	0001417f 	.word	0x0001417f
		LL_ASSERT(rx && rx->hdr.link);
   13518:	4ada      	ldr	r2, [pc, #872]	; (13884 <ull_conn_llcp+0x1198>)
   1351a:	49db      	ldr	r1, [pc, #876]	; (13888 <ull_conn_llcp+0x119c>)
   1351c:	48db      	ldr	r0, [pc, #876]	; (1388c <ull_conn_llcp+0x11a0>)
   1351e:	f640 53f3 	movw	r3, #3571	; 0xdf3
   13522:	f00f fc70 	bl	22e06 <printk>
   13526:	4040      	eors	r0, r0
   13528:	f380 8811 	msr	BASEPRI, r0
   1352c:	f04f 0003 	mov.w	r0, #3
   13530:	df02      	svc	2
   13532:	6838      	ldr	r0, [r7, #0]
   13534:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
   13538:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   1353c:	e42d      	b.n	12d9a <ull_conn_llcp+0x6ae>
		if (!conn->tx_ctrl) {
   1353e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13542:	2a00      	cmp	r2, #0
   13544:	f47f ae73 	bne.w	1322e <ull_conn_llcp+0xb42>
			tx->next = conn->tx_head;
   13548:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1354a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1354e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   13552:	e674      	b.n	1323e <ull_conn_llcp+0xb52>
			if (!conn->llcp_length.cache.tx_octets) {
   13554:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
   13558:	2a00      	cmp	r2, #0
   1355a:	f040 8181 	bne.w	13860 <ull_conn_llcp+0x1174>
				conn->llcp_length.ack = conn->llcp_length.req;
   1355e:	f884 31a5 	strb.w	r3, [r4, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   13562:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
   13566:	e40f      	b.n	12d88 <ull_conn_llcp+0x69c>
		if (!conn->tx_ctrl) {
   13568:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1356c:	2a00      	cmp	r2, #0
   1356e:	f47f ab94 	bne.w	12c9a <ull_conn_llcp+0x5ae>
			tx->next = conn->tx_head;
   13572:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13576:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1357a:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1357e:	f7ff bb95 	b.w	12cac <ull_conn_llcp+0x5c0>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   13582:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
   13586:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   1358a:	4293      	cmp	r3, r2
   1358c:	f43f a8c1 	beq.w	12712 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   13590:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   13594:	f003 0703 	and.w	r7, r3, #3
   13598:	2f03      	cmp	r7, #3
   1359a:	f000 8245 	beq.w	13a28 <ull_conn_llcp+0x133c>
   1359e:	2f00      	cmp	r7, #0
   135a0:	f47f a8b6 	bne.w	12710 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   135a4:	48ba      	ldr	r0, [pc, #744]	; (13890 <ull_conn_llcp+0x11a4>)
   135a6:	f7f7 ffad 	bl	b504 <mem_acquire>
		if (!tx) {
   135aa:	4601      	mov	r1, r0
   135ac:	2800      	cmp	r0, #0
   135ae:	f43f acab 	beq.w	12f08 <ull_conn_llcp+0x81c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   135b2:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   135b6:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
		conn->lll.phy_flags = conn->llcp_phy.flags;
   135ba:	f894 71b7 	ldrb.w	r7, [r4, #439]	; 0x1b7
   135be:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   135c2:	2001      	movs	r0, #1
   135c4:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   135c8:	f3c3 0082 	ubfx	r0, r3, #2, #3
   135cc:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   135d0:	f3c3 1042 	ubfx	r0, r3, #5, #3
   135d4:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   135d8:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   135dc:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   135de:	f884 21b8 	strb.w	r2, [r4, #440]	; 0x1b8
		conn->lll.phy_flags = conn->llcp_phy.flags;
   135e2:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
   135e6:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   135ea:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   135ee:	f884 c064 	strb.w	ip, [r4, #100]	; 0x64
		conn->phy_pref_rx = conn->llcp_phy.rx;
   135f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   135f6:	f040 0003 	orr.w	r0, r0, #3
		pr->tx_phys = conn->llcp_phy.tx;
   135fa:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->len =
   135fc:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   135fe:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
   13600:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13602:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   13604:	71ca      	strb	r2, [r1, #7]
		pdu_ctrl_tx->len =
   13606:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13608:	2200      	movs	r2, #0
   1360a:	4620      	mov	r0, r4
   1360c:	f7fc fd6e 	bl	100ec <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   13610:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   13614:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
   13618:	e476      	b.n	12f08 <ull_conn_llcp+0x81c>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   1361a:	4651      	mov	r1, sl
   1361c:	4620      	mov	r0, r4
   1361e:	f7fc ff31 	bl	10484 <start_enc_rsp_send>
	    conn->tx_head &&
   13622:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   13626:	2b00      	cmp	r3, #0
   13628:	f000 8090 	beq.w	1374c <ull_conn_llcp+0x1060>
	    !conn->llcp_enc.pause_tx &&
   1362c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   13630:	0790      	lsls	r0, r2, #30
   13632:	f100 808b 	bmi.w	1374c <ull_conn_llcp+0x1060>
	    !conn->llcp_phy.pause_tx &&
   13636:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1363a:	07d1      	lsls	r1, r2, #31
   1363c:	f100 8086 	bmi.w	1374c <ull_conn_llcp+0x1060>
		if (conn->tx_head == conn->tx_data) {
   13640:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13644:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   13646:	bf04      	itt	eq
   13648:	681a      	ldreq	r2, [r3, #0]
   1364a:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1364e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13652:	2a00      	cmp	r2, #0
   13654:	f000 81bc 	beq.w	139d0 <ull_conn_llcp+0x12e4>
	tx->next = conn->tx_ctrl_last->next;
   13658:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1365c:	681a      	ldr	r2, [r3, #0]
   1365e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   13662:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   13666:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1366a:	f8d9 3000 	ldr.w	r3, [r9]
   1366e:	2b00      	cmp	r3, #0
   13670:	f000 8146 	beq.w	13900 <ull_conn_llcp+0x1214>
		conn->llcp_enc.pause_rx = 0U;
   13674:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   13678:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   1367c:	f023 0303 	bic.w	r3, r3, #3
   13680:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
   13684:	f7ff bb17 	b.w	12cb6 <ull_conn_llcp+0x5ca>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13688:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   1368a:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1368e:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   13692:	2702      	movs	r7, #2
   13694:	f7ff bae1 	b.w	12c5a <ull_conn_llcp+0x56e>
		LL_ASSERT(0);
   13698:	f640 33f4 	movw	r3, #3060	; 0xbf4
		LL_ASSERT(0);
   1369c:	4a79      	ldr	r2, [pc, #484]	; (13884 <ull_conn_llcp+0x1198>)
   1369e:	497d      	ldr	r1, [pc, #500]	; (13894 <ull_conn_llcp+0x11a8>)
   136a0:	487a      	ldr	r0, [pc, #488]	; (1388c <ull_conn_llcp+0x11a0>)
   136a2:	f00f fbb0 	bl	22e06 <printk>
   136a6:	4040      	eors	r0, r0
   136a8:	f380 8811 	msr	BASEPRI, r0
   136ac:	f04f 0003 	mov.w	r0, #3
   136b0:	df02      	svc	2
		break;
   136b2:	e429      	b.n	12f08 <ull_conn_llcp+0x81c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   136b4:	4876      	ldr	r0, [pc, #472]	; (13890 <ull_conn_llcp+0x11a4>)
   136b6:	f7f7 ff25 	bl	b504 <mem_acquire>
		if (tx) {
   136ba:	2800      	cmp	r0, #0
   136bc:	f43f ac24 	beq.w	12f08 <ull_conn_llcp+0x81c>
			conn->llcp_version.ack--;
   136c0:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
			conn->llcp_version.tx = 1U;
   136c4:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->llcp_version.ack--;
   136c8:	3a01      	subs	r2, #1
   136ca:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   136ce:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
   136d0:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
   136d4:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
   136d6:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   136da:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
   136de:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   136e0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   136e4:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
   136e6:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
   136e8:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
   136ec:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
   136ee:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   136f0:	7242      	strb	r2, [r0, #9]
   136f2:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
   136f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
   136f8:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   136fa:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   136fc:	72c2      	strb	r2, [r0, #11]
   136fe:	7302      	strb	r2, [r0, #12]
	if (
   13700:	2b00      	cmp	r3, #0
   13702:	f000 80f2 	beq.w	138ea <ull_conn_llcp+0x11fe>
	    !conn->llcp_enc.pause_tx &&
   13706:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1370a:	0792      	lsls	r2, r2, #30
   1370c:	f100 80ed 	bmi.w	138ea <ull_conn_llcp+0x11fe>
	    !conn->llcp_phy.pause_tx &&
   13710:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   13714:	07d7      	lsls	r7, r2, #31
   13716:	f100 80e8 	bmi.w	138ea <ull_conn_llcp+0x11fe>
		if (conn->tx_head == conn->tx_data) {
   1371a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1371e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   13720:	bf04      	itt	eq
   13722:	681a      	ldreq	r2, [r3, #0]
   13724:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   13728:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1372c:	2a00      	cmp	r2, #0
   1372e:	f000 8232 	beq.w	13b96 <ull_conn_llcp+0x14aa>
	tx->next = conn->tx_ctrl_last->next;
   13732:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   13736:	681a      	ldr	r2, [r3, #0]
   13738:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1373a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1373c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   13740:	6803      	ldr	r3, [r0, #0]
   13742:	e57c      	b.n	1323e <ull_conn_llcp+0xb52>
		conn->tx_data_last = tx;
   13744:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13748:	f7ff bba1 	b.w	12e8e <ull_conn_llcp+0x7a2>
		if (!conn->tx_ctrl) {
   1374c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13750:	2a00      	cmp	r2, #0
   13752:	d181      	bne.n	13658 <ull_conn_llcp+0xf6c>
			tx->next = conn->tx_head;
   13754:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13758:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1375c:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   13760:	e783      	b.n	1366a <ull_conn_llcp+0xf7e>
		conn->tx_data_last = tx;
   13762:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   13766:	f7ff b938 	b.w	129da <ull_conn_llcp+0x2ee>
   1376a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
			conn->procedure_expire = conn->procedure_reload;
   1376e:	e569      	b.n	13244 <ull_conn_llcp+0xb58>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   13770:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   13774:	463b      	mov	r3, r7
   13776:	4642      	mov	r2, r8
   13778:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   1377c:	f204 1069 	addw	r0, r4, #361	; 0x169
   13780:	f003 ff56 	bl	17630 <ecb_encrypt>
   13784:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
   13788:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
   1378c:	f8d4 007f 	ldr.w	r0, [r4, #127]	; 0x7f
   13790:	f8d4 1083 	ldr.w	r1, [r4, #131]	; 0x83
   13794:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
   13798:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   1379c:	4622      	mov	r2, r4
   1379e:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   137a2:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   137a6:	f852 1f98 	ldr.w	r1, [r2, #152]!
			lll->ccm_tx.direction = 0U;
   137aa:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
   137ae:	6852      	ldr	r2, [r2, #4]
   137b0:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
   137b4:	f8c4 10b9 	str.w	r1, [r4, #185]	; 0xb9
			lll->enc_rx = 1U;
   137b8:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			lll->ccm_rx.direction = 1U;
   137bc:	f894 1097 	ldrb.w	r1, [r4, #151]	; 0x97
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137c0:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   137c4:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
			lll->enc_rx = 1U;
   137c8:	f042 0208 	orr.w	r2, r2, #8
			lll->ccm_rx.direction = 1U;
   137cc:	f041 0101 	orr.w	r1, r1, #1
			lll->ccm_tx.direction = 0U;
   137d0:	f368 0000 	bfi	r0, r8, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   137d4:	2701      	movs	r7, #1
			lll->enc_rx = 1U;
   137d6:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
   137da:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   137de:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   137e2:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   137e6:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   137ea:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   137ee:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   137f2:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
   137f6:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
   137fa:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
			lll->ccm_rx.direction = 1U;
   137fe:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
   13802:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13806:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->llctrl.opcode =
   1380a:	2205      	movs	r2, #5
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1380c:	f889 7005 	strb.w	r7, [r9, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13810:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->llctrl.opcode =
   13814:	f889 2007 	strb.w	r2, [r9, #7]
	    conn->tx_head &&
   13818:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   1381c:	2b00      	cmp	r3, #0
   1381e:	d059      	beq.n	138d4 <ull_conn_llcp+0x11e8>
	    !conn->llcp_enc.pause_tx &&
   13820:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   13824:	0792      	lsls	r2, r2, #30
   13826:	d455      	bmi.n	138d4 <ull_conn_llcp+0x11e8>
	    !conn->llcp_phy.pause_tx &&
   13828:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1382c:	07d7      	lsls	r7, r2, #31
   1382e:	d451      	bmi.n	138d4 <ull_conn_llcp+0x11e8>
		if (conn->tx_head == conn->tx_data) {
   13830:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13834:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   13836:	bf04      	itt	eq
   13838:	681a      	ldreq	r2, [r3, #0]
   1383a:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1383e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13842:	2a00      	cmp	r2, #0
   13844:	f000 8151 	beq.w	13aea <ull_conn_llcp+0x13fe>
	tx->next = conn->tx_ctrl_last->next;
   13848:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1384c:	681a      	ldr	r2, [r3, #0]
   1384e:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   13852:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   13856:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1385a:	f8d9 3000 	ldr.w	r3, [r9]
   1385e:	e574      	b.n	1334a <ull_conn_llcp+0xc5e>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13860:	f894 01a6 	ldrb.w	r0, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   13864:	f8b4 71b2 	ldrh.w	r7, [r4, #434]	; 0x1b2
				conn->llcp_length.tx_octets =
   13868:	f8a4 21aa 	strh.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   1386c:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1386e:	f363 0002 	bfi	r0, r3, #0, #3
   13872:	f884 01a6 	strb.w	r0, [r4, #422]	; 0x1a6
				conn->llcp_length.cache.tx_octets = 0;
   13876:	f8a4 31b0 	strh.w	r3, [r4, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   1387a:	f8a4 71ae 	strh.w	r7, [r4, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1387e:	f7ff ba83 	b.w	12d88 <ull_conn_llcp+0x69c>
   13882:	bf00      	nop
   13884:	0002caec 	.word	0x0002caec
   13888:	0002cbb8 	.word	0x0002cbb8
   1388c:	0002c630 	.word	0x0002c630
   13890:	200035a4 	.word	0x200035a4
   13894:	0002c6a0 	.word	0x0002c6a0
	switch (conn->llcp_conn_param.state) {
   13898:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   1389c:	f003 0307 	and.w	r3, r3, #7
   138a0:	2b05      	cmp	r3, #5
   138a2:	f200 81a8 	bhi.w	13bf6 <ull_conn_llcp+0x150a>
   138a6:	a001      	add	r0, pc, #4	; (adr r0, 138ac <ull_conn_llcp+0x11c0>)
   138a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   138ac:	000130cb 	.word	0x000130cb
   138b0:	0001304b 	.word	0x0001304b
   138b4:	00012ffd 	.word	0x00012ffd
   138b8:	00012713 	.word	0x00012713
   138bc:	00012713 	.word	0x00012713
   138c0:	00012713 	.word	0x00012713
			tx->next = conn->tx_head->next;
   138c4:	681a      	ldr	r2, [r3, #0]
   138c6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   138c8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   138ca:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   138cc:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   138d0:	f7ff b820 	b.w	12914 <ull_conn_llcp+0x228>
		if (!conn->tx_ctrl) {
   138d4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   138d8:	2a00      	cmp	r2, #0
   138da:	d1b5      	bne.n	13848 <ull_conn_llcp+0x115c>
			tx->next = conn->tx_head;
   138dc:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   138e0:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   138e4:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   138e8:	e7b7      	b.n	1385a <ull_conn_llcp+0x116e>
		if (!conn->tx_ctrl) {
   138ea:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   138ee:	2a00      	cmp	r2, #0
   138f0:	f47f af1f 	bne.w	13732 <ull_conn_llcp+0x1046>
			tx->next = conn->tx_head;
   138f4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   138f6:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   138fa:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   138fe:	e71f      	b.n	13740 <ull_conn_llcp+0x1054>
		conn->tx_data_last = tx;
   13900:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13904:	e6b6      	b.n	13674 <ull_conn_llcp+0xf88>
			tx->next = conn->tx_head->next;
   13906:	681a      	ldr	r2, [r3, #0]
   13908:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1390a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1390c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1390e:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   13912:	f7ff b96c 	b.w	12bee <ull_conn_llcp+0x502>
			tx->next = conn->tx_head->next;
   13916:	681a      	ldr	r2, [r3, #0]
   13918:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1391a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1391c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1391e:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   13922:	f7ff ba13 	b.w	12d4c <ull_conn_llcp+0x660>
			tx->next = conn->tx_head->next;
   13926:	681a      	ldr	r2, [r3, #0]
   13928:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1392c:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   13930:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13934:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   13938:	f7ff b84c 	b.w	129d4 <ull_conn_llcp+0x2e8>
			tx->next = conn->tx_head->next;
   1393c:	f8dc 3000 	ldr.w	r3, [ip]
   13940:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   13942:	f8cc 0000 	str.w	r0, [ip]
				conn->tx_ctrl = tx;
   13946:	f8d0 c000 	ldr.w	ip, [r0]
				conn->tx_ctrl_last = tx;
   1394a:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   1394e:	f7ff ba9a 	b.w	12e86 <ull_conn_llcp+0x79a>
		if (!conn->tx_ctrl) {
   13952:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   13956:	2b00      	cmp	r3, #0
   13958:	f47f adb2 	bne.w	134c0 <ull_conn_llcp+0xdd4>
			tx->next = conn->tx_head;
   1395c:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   1395e:	e9c4 116f 	strd	r1, r1, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13962:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
   13966:	e5b2      	b.n	134ce <ull_conn_llcp+0xde2>
			tx->next = conn->tx_head->next;
   13968:	681a      	ldr	r2, [r3, #0]
   1396a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1396e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   13972:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   13976:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   1397a:	e4e6      	b.n	1334a <ull_conn_llcp+0xc5e>
		LL_ASSERT(rx && rx->hdr.link);
   1397c:	4aa7      	ldr	r2, [pc, #668]	; (13c1c <ull_conn_llcp+0x1530>)
   1397e:	49a8      	ldr	r1, [pc, #672]	; (13c20 <ull_conn_llcp+0x1534>)
   13980:	48a8      	ldr	r0, [pc, #672]	; (13c24 <ull_conn_llcp+0x1538>)
   13982:	f640 53f3 	movw	r3, #3571	; 0xdf3
   13986:	f00f fa3e 	bl	22e06 <printk>
   1398a:	4040      	eors	r0, r0
   1398c:	f380 8811 	msr	BASEPRI, r0
   13990:	f04f 0003 	mov.w	r0, #3
   13994:	df02      	svc	2
   13996:	f8d9 0000 	ldr.w	r0, [r9]
   1399a:	e51f      	b.n	133dc <ull_conn_llcp+0xcf0>
			if (!conn->llcp_length.cache.tx_octets) {
   1399c:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
   139a0:	2900      	cmp	r1, #0
   139a2:	f040 8081 	bne.w	13aa8 <ull_conn_llcp+0x13bc>
				conn->llcp_length.ack = conn->llcp_length.req;
   139a6:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   139aa:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
   139ae:	e50a      	b.n	133c6 <ull_conn_llcp+0xcda>
			tx->next = conn->tx_head->next;
   139b0:	681a      	ldr	r2, [r3, #0]
   139b2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   139b4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   139b6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   139b8:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   139bc:	e43f      	b.n	1323e <ull_conn_llcp+0xb52>
			tx->next = conn->tx_head->next;
   139be:	681a      	ldr	r2, [r3, #0]
   139c0:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   139c4:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   139c8:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   139cc:	f7ff b96e 	b.w	12cac <ull_conn_llcp+0x5c0>
			tx->next = conn->tx_head->next;
   139d0:	681a      	ldr	r2, [r3, #0]
   139d2:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   139d6:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   139da:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   139de:	e644      	b.n	1366a <ull_conn_llcp+0xf7e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   139e0:	4891      	ldr	r0, [pc, #580]	; (13c28 <ull_conn_llcp+0x153c>)
   139e2:	f7f7 fd8f 	bl	b504 <mem_acquire>
		if (!tx) {
   139e6:	4601      	mov	r1, r0
   139e8:	2800      	cmp	r0, #0
   139ea:	f43f aa8d 	beq.w	12f08 <ull_conn_llcp+0x81c>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   139ee:	7903      	ldrb	r3, [r0, #4]
   139f0:	f043 0303 	orr.w	r3, r3, #3
   139f4:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   139f6:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   139f8:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   139fa:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   139fc:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   139fe:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13a00:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
   13a02:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   13a06:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13a08:	4620      	mov	r0, r4
   13a0a:	2200      	movs	r2, #0
   13a0c:	f7fc fb6e 	bl	100ec <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13a10:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   13a14:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   13a18:	2300      	movs	r3, #0
   13a1a:	603b      	str	r3, [r7, #0]
		return;
   13a1c:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   13a20:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13a24:	f7fe be6d 	b.w	12702 <ull_conn_llcp+0x16>
		if (conn->llcp_phy.tx & PHY_2M) {
   13a28:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13a2a:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
		if (conn->llcp_phy.tx & PHY_2M) {
   13a2e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   13a32:	d550      	bpl.n	13ad6 <ull_conn_llcp+0x13ea>
			conn->llcp_phy.tx = PHY_2M;
   13a34:	2202      	movs	r2, #2
   13a36:	f362 0384 	bfi	r3, r2, #2, #3
   13a3a:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.rx & PHY_2M) {
   13a3e:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   13a42:	065f      	lsls	r7, r3, #25
   13a44:	ea4f 1253 	mov.w	r2, r3, lsr #5
   13a48:	d53d      	bpl.n	13ac6 <ull_conn_llcp+0x13da>
			conn->llcp_phy.rx = PHY_2M;
   13a4a:	2202      	movs	r2, #2
   13a4c:	f362 1347 	bfi	r3, r2, #5, #3
   13a50:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   13a54:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   13a58:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13a5c:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13a60:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   13a64:	f3c3 0182 	ubfx	r1, r3, #2, #3
   13a68:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13a6c:	f007 0707 	and.w	r7, r7, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13a70:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   13a74:	458c      	cmp	ip, r1
   13a76:	bf08      	it	eq
   13a78:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a7a:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   13a7c:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a80:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13a84:	ea4f 1353 	mov.w	r3, r3, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   13a88:	bf08      	it	eq
   13a8a:	2300      	moveq	r3, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a8c:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
   13a90:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
		conn->llcp_ack -= 2U;
   13a94:	1e83      	subs	r3, r0, #2
		conn->llcp_type = LLCP_PHY_UPD;
   13a96:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
   13a98:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a9c:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
   13aa0:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13aa4:	f7fe bea2 	b.w	127ec <ull_conn_llcp+0x100>
				conn->llcp_length.cache.tx_octets = 0;
   13aa8:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13aaa:	4663      	mov	r3, ip
   13aac:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_length.tx_octets =
   13ab0:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
				conn->llcp_length.tx_time =
   13ab4:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13ab8:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
				conn->llcp_length.cache.tx_octets = 0;
   13abc:	f8a4 21b0 	strh.w	r2, [r4, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   13ac0:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13ac4:	e47f      	b.n	133c6 <ull_conn_llcp+0xcda>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   13ac6:	07d1      	lsls	r1, r2, #31
   13ac8:	d56b      	bpl.n	13ba2 <ull_conn_llcp+0x14b6>
			conn->llcp_phy.rx = PHY_1M;
   13aca:	2201      	movs	r2, #1
   13acc:	f362 1347 	bfi	r3, r2, #5, #3
   13ad0:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13ad4:	e7be      	b.n	13a54 <ull_conn_llcp+0x1368>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   13ad6:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   13ad8:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		} else if (conn->llcp_phy.tx & PHY_1M) {
   13adc:	d56a      	bpl.n	13bb4 <ull_conn_llcp+0x14c8>
			conn->llcp_phy.tx = PHY_1M;
   13ade:	2201      	movs	r2, #1
   13ae0:	f362 0384 	bfi	r3, r2, #2, #3
   13ae4:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13ae8:	e7a9      	b.n	13a3e <ull_conn_llcp+0x1352>
			tx->next = conn->tx_head->next;
   13aea:	681a      	ldr	r2, [r3, #0]
   13aec:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   13af0:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13af4:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   13af8:	e6af      	b.n	1385a <ull_conn_llcp+0x116e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13afa:	484b      	ldr	r0, [pc, #300]	; (13c28 <ull_conn_llcp+0x153c>)
   13afc:	f7f7 fd02 	bl	b504 <mem_acquire>
	if (!tx) {
   13b00:	4601      	mov	r1, r0
   13b02:	2800      	cmp	r0, #0
   13b04:	f43f aa00 	beq.w	12f08 <ull_conn_llcp+0x81c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13b08:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   13b0a:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13b0c:	f043 0303 	orr.w	r3, r3, #3
   13b10:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   13b12:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   13b14:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
	rsp->interval_max =
   13b18:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
	rsp->latency =
   13b1c:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
	rsp->interval_min =
   13b20:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
   13b22:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
	rsp->interval_max =
   13b26:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   13b28:	2310      	movs	r3, #16
	rsp->latency =
   13b2a:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
   13b2c:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   13b2e:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
   13b30:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   13b34:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
   13b36:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   13b3a:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   13b3e:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	rsp->reference_conn_event_count =
   13b42:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   13b46:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   13b4a:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   13b4e:	f8b4 0192 	ldrh.w	r0, [r4, #402]	; 0x192
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   13b52:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   13b56:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   13b5a:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   13b5e:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
   13b62:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   13b66:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   13b6a:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13b6e:	4620      	mov	r0, r4
   13b70:	4642      	mov	r2, r8
   13b72:	f7fc fabb 	bl	100ec <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13b76:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   13b7a:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   13b7e:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   13b82:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13b86:	f8c7 8000 	str.w	r8, [r7]
}
   13b8a:	f7fe bdba 	b.w	12702 <ull_conn_llcp+0x16>
				conn->llcp_conn_param.interval_max;
   13b8e:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   13b92:	f7ff ba7c 	b.w	1308e <ull_conn_llcp+0x9a2>
			tx->next = conn->tx_head->next;
   13b96:	681a      	ldr	r2, [r3, #0]
   13b98:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13b9a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   13b9c:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   13ba0:	e5ce      	b.n	13740 <ull_conn_llcp+0x1054>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   13ba2:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   13ba6:	bf18      	it	ne
   13ba8:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   13baa:	f362 1347 	bfi	r3, r2, #5, #3
   13bae:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13bb2:	e74f      	b.n	13a54 <ull_conn_llcp+0x1368>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   13bb4:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   13bb8:	bf18      	it	ne
   13bba:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   13bbc:	f362 0384 	bfi	r3, r2, #2, #3
   13bc0:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13bc4:	e73b      	b.n	13a3e <ull_conn_llcp+0x1352>
			tx->next = conn->tx_head->next;
   13bc6:	6803      	ldr	r3, [r0, #0]
   13bc8:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
   13bca:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   13bcc:	e9c4 1170 	strd	r1, r1, [r4, #448]	; 0x1c0
   13bd0:	e47d      	b.n	134ce <ull_conn_llcp+0xde2>
		LL_ASSERT(0);
   13bd2:	4a12      	ldr	r2, [pc, #72]	; (13c1c <ull_conn_llcp+0x1530>)
   13bd4:	4915      	ldr	r1, [pc, #84]	; (13c2c <ull_conn_llcp+0x1540>)
   13bd6:	4813      	ldr	r0, [pc, #76]	; (13c24 <ull_conn_llcp+0x1538>)
   13bd8:	f640 631b 	movw	r3, #3611	; 0xe1b
   13bdc:	f00f f913 	bl	22e06 <printk>
   13be0:	4040      	eors	r0, r0
   13be2:	f380 8811 	msr	BASEPRI, r0
   13be6:	f04f 0003 	mov.w	r0, #3
   13bea:	df02      	svc	2
		break;
   13bec:	f7fe bdfe 	b.w	127ec <ull_conn_llcp+0x100>
		LL_ASSERT(0);
   13bf0:	f640 631b 	movw	r3, #3611	; 0xe1b
   13bf4:	e552      	b.n	1369c <ull_conn_llcp+0xfb0>
		LL_ASSERT(0);
   13bf6:	4a09      	ldr	r2, [pc, #36]	; (13c1c <ull_conn_llcp+0x1530>)
   13bf8:	490c      	ldr	r1, [pc, #48]	; (13c2c <ull_conn_llcp+0x1540>)
   13bfa:	480a      	ldr	r0, [pc, #40]	; (13c24 <ull_conn_llcp+0x1538>)
   13bfc:	f640 531f 	movw	r3, #3359	; 0xd1f
   13c00:	f00f f901 	bl	22e06 <printk>
   13c04:	4040      	eors	r0, r0
   13c06:	f380 8811 	msr	BASEPRI, r0
   13c0a:	f04f 0003 	mov.w	r0, #3
   13c0e:	df02      	svc	2
		break;
   13c10:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13c14:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   13c18:	f7fe bd73 	b.w	12702 <ull_conn_llcp+0x16>
   13c1c:	0002caec 	.word	0x0002caec
   13c20:	0002cbb8 	.word	0x0002cbb8
   13c24:	0002c630 	.word	0x0002c630
   13c28:	200035a4 	.word	0x200035a4
   13c2c:	0002c6a0 	.word	0x0002c6a0

00013c30 <ull_conn_tx_demux>:
{
   13c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13c34:	4f24      	ldr	r7, [pc, #144]	; (13cc8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c36:	4e25      	ldr	r6, [pc, #148]	; (13ccc <ull_conn_tx_demux+0x9c>)
   13c38:	78fa      	ldrb	r2, [r7, #3]
{
   13c3a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   13c3c:	1d3d      	adds	r5, r7, #4
   13c3e:	e021      	b.n	13c84 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c40:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   13c44:	4630      	mov	r0, r6
   13c46:	f7f7 fc8d 	bl	b564 <mem_get>
	if (conn->lll.handle != handle) {
   13c4a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   13c4c:	bb32      	cbnz	r2, 13c9c <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   13c4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   13c52:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
			tx->next = NULL;
   13c56:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   13c58:	b369      	cbz	r1, 13cb6 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   13c5a:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
   13c5e:	b102      	cbz	r2, 13c62 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   13c60:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   13c62:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
		MFIFO_DEQUEUE(conn_tx);
   13c66:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   13c68:	78bb      	ldrb	r3, [r7, #2]
   13c6a:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   13c6c:	429a      	cmp	r2, r3
   13c6e:	d005      	beq.n	13c7c <ull_conn_tx_demux+0x4c>
	_first += 1U;
   13c70:	3301      	adds	r3, #1
   13c72:	b2db      	uxtb	r3, r3
		_first = 0U;
   13c74:	4299      	cmp	r1, r3
   13c76:	bf08      	it	eq
   13c78:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13c7a:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   13c7c:	3c01      	subs	r4, #1
   13c7e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   13c82:	d016      	beq.n	13cb2 <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13c84:	78bb      	ldrb	r3, [r7, #2]
   13c86:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   13c88:	4293      	cmp	r3, r2
   13c8a:	d012      	beq.n	13cb2 <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   13c8c:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   13c90:	eb15 0803 	adds.w	r8, r5, r3
   13c94:	d00d      	beq.n	13cb2 <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   13c96:	5aea      	ldrh	r2, [r5, r3]
   13c98:	2a00      	cmp	r2, #0
   13c9a:	d0d1      	beq.n	13c40 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   13c9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   13ca0:	790b      	ldrb	r3, [r1, #4]
   13ca2:	f36f 0301 	bfc	r3, #0, #2
   13ca6:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   13ca8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13cac:	f7fb fb6c 	bl	f388 <ll_tx_ack_put>
   13cb0:	e7d9      	b.n	13c66 <ull_conn_tx_demux+0x36>
}
   13cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   13cb6:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
				conn->tx_data = tx;
   13cba:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
				if (!conn->tx_head) {
   13cbe:	2a00      	cmp	r2, #0
   13cc0:	d1cb      	bne.n	13c5a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   13cc2:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			if (conn->tx_data_last) {
   13cc6:	e7cc      	b.n	13c62 <ull_conn_tx_demux+0x32>
   13cc8:	20000654 	.word	0x20000654
   13ccc:	2000334c 	.word	0x2000334c

00013cd0 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   13cd0:	4b3b      	ldr	r3, [pc, #236]	; (13dc0 <conn_cleanup+0xf0>)
{
   13cd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   13cd6:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   13cd8:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
	*((uint8_t *)rx->pdu) = reason;
   13cdc:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	if (conn == conn_upd_curr) {
   13ce0:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   13ce2:	bf04      	itt	eq
   13ce4:	2200      	moveq	r2, #0
   13ce6:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   13ce8:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   13cea:	f8a0 2142 	strh.w	r2, [r0, #322]	; 0x142
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13cee:	2314      	movs	r3, #20
{
   13cf0:	b083      	sub	sp, #12
   13cf2:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   13cf4:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13cf8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	while (rx) {
   13cfc:	b144      	cbz	r4, 13d10 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   13cfe:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   13d00:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   13d02:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   13d04:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   13d06:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   13d08:	f7fb faf8 	bl	f2fc <ll_rx_put>
	while (rx) {
   13d0c:	2c00      	cmp	r4, #0
   13d0e:	d1f7      	bne.n	13d00 <conn_cleanup+0x30>
	while (conn->tx_head) {
   13d10:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   13d14:	b381      	cbz	r1, 13d78 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   13d16:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 13dd4 <conn_cleanup+0x104>
		LL_ASSERT(link);
   13d1a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13dcc <conn_cleanup+0xfc>
   13d1e:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 13dd8 <conn_cleanup+0x108>
   13d22:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   13d26:	e007      	b.n	13d38 <conn_cleanup+0x68>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13d28:	4629      	mov	r1, r5
   13d2a:	4620      	mov	r0, r4
   13d2c:	463a      	mov	r2, r7
   13d2e:	f7f7 fc4b 	bl	b5c8 <memq_enqueue>
	while (conn->tx_head) {
   13d32:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   13d36:	b1f9      	cbz	r1, 13d78 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   13d38:	4630      	mov	r0, r6
   13d3a:	f7fc f95b 	bl	fff4 <tx_ull_dequeue>
   13d3e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   13d40:	4640      	mov	r0, r8
   13d42:	f7f7 fbdf 	bl	b504 <mem_acquire>
		LL_ASSERT(link);
   13d46:	4604      	mov	r4, r0
   13d48:	2800      	cmp	r0, #0
   13d4a:	d1ed      	bne.n	13d28 <conn_cleanup+0x58>
   13d4c:	481d      	ldr	r0, [pc, #116]	; (13dc4 <conn_cleanup+0xf4>)
   13d4e:	f44f 63ed 	mov.w	r3, #1896	; 0x768
   13d52:	4652      	mov	r2, sl
   13d54:	4649      	mov	r1, r9
   13d56:	f00f f856 	bl	22e06 <printk>
   13d5a:	4040      	eors	r0, r0
   13d5c:	f380 8811 	msr	BASEPRI, r0
   13d60:	f04f 0003 	mov.w	r0, #3
   13d64:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13d66:	4629      	mov	r1, r5
   13d68:	4620      	mov	r0, r4
   13d6a:	463a      	mov	r2, r7
   13d6c:	f7f7 fc2c 	bl	b5c8 <memq_enqueue>
	while (conn->tx_head) {
   13d70:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   13d74:	2900      	cmp	r1, #0
   13d76:	d1df      	bne.n	13d38 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   13d78:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13d7c:	4b12      	ldr	r3, [pc, #72]	; (13dc8 <conn_cleanup+0xf8>)
   13d7e:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   13d82:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13d84:	b2d2      	uxtb	r2, r2
   13d86:	2101      	movs	r1, #1
   13d88:	2000      	movs	r0, #0
   13d8a:	f7f8 ff6f 	bl	cc6c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d8e:	f030 0302 	bics.w	r3, r0, #2
   13d92:	d00c      	beq.n	13dae <conn_cleanup+0xde>
   13d94:	4a0d      	ldr	r2, [pc, #52]	; (13dcc <conn_cleanup+0xfc>)
   13d96:	490e      	ldr	r1, [pc, #56]	; (13dd0 <conn_cleanup+0x100>)
   13d98:	480a      	ldr	r0, [pc, #40]	; (13dc4 <conn_cleanup+0xf4>)
   13d9a:	f240 7327 	movw	r3, #1831	; 0x727
   13d9e:	f00f f832 	bl	22e06 <printk>
   13da2:	4040      	eors	r0, r0
   13da4:	f380 8811 	msr	BASEPRI, r0
   13da8:	f04f 0003 	mov.w	r0, #3
   13dac:	df02      	svc	2
	lll->handle = 0xFFFF;
   13dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   13db2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   13db4:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   13db6:	b003      	add	sp, #12
   13db8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   13dbc:	f7ff bf38 	b.w	13c30 <ull_conn_tx_demux>
   13dc0:	20003520 	.word	0x20003520
   13dc4:	0002c630 	.word	0x0002c630
   13dc8:	0001028d 	.word	0x0001028d
   13dcc:	0002caec 	.word	0x0002caec
   13dd0:	0002cbcc 	.word	0x0002cbcc
   13dd4:	20003628 	.word	0x20003628
   13dd8:	0002cb44 	.word	0x0002cb44

00013ddc <ull_conn_done>:
{
   13ddc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   13de0:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   13de2:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   13de4:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   13de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13dea:	429a      	cmp	r2, r3
{
   13dec:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   13dee:	f000 8092 	beq.w	13f16 <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   13df2:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13df6:	2b01      	cmp	r3, #1
   13df8:	4606      	mov	r6, r0
   13dfa:	f000 80dd 	beq.w	13fb8 <ull_conn_done+0x1dc>
   13dfe:	2b02      	cmp	r3, #2
   13e00:	f000 80d0 	beq.w	13fa4 <ull_conn_done+0x1c8>
   13e04:	2b00      	cmp	r3, #0
   13e06:	f000 80b3 	beq.w	13f70 <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   13e0a:	f894 713b 	ldrb.w	r7, [r4, #315]	; 0x13b
	if (reason_peer && (
   13e0e:	2f00      	cmp	r7, #0
   13e10:	f040 80cb 	bne.w	13faa <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   13e14:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   13e18:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   13e1a:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   13e1c:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   13e20:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   13e22:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   13e26:	2b00      	cmp	r3, #0
   13e28:	d078      	beq.n	13f1c <ull_conn_done+0x140>
		} else if (lll->role) {
   13e2a:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   13e2e:	2b00      	cmp	r3, #0
   13e30:	f2c0 8108 	blt.w	14044 <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   13e34:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   13e38:	2200      	movs	r2, #0
   13e3a:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   13e3e:	2b00      	cmp	r3, #0
   13e40:	f000 80c0 	beq.w	13fc4 <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   13e44:	2300      	movs	r3, #0
   13e46:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   13e4a:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   13e4e:	b133      	cbz	r3, 13e5e <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   13e50:	4543      	cmp	r3, r8
   13e52:	f240 810d 	bls.w	14070 <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   13e56:	eba3 0308 	sub.w	r3, r3, r8
   13e5a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   13e5e:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   13e62:	b133      	cbz	r3, 13e72 <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   13e64:	4543      	cmp	r3, r8
   13e66:	f240 80d5 	bls.w	14014 <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   13e6a:	eba3 0308 	sub.w	r3, r3, r8
   13e6e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   13e72:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   13e76:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13e7a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   13e7e:	b15a      	cbz	r2, 13e98 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   13e80:	4542      	cmp	r2, r8
   13e82:	f200 80ab 	bhi.w	13fdc <ull_conn_done+0x200>
			if ((conn->procedure_expire == 0U) &&
   13e86:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   13e8a:	2000      	movs	r0, #0
   13e8c:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   13e90:	b912      	cbnz	r2, 13e98 <ull_conn_done+0xbc>
   13e92:	4299      	cmp	r1, r3
   13e94:	f000 8103 	beq.w	1409e <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13e98:	1a5b      	subs	r3, r3, r1
   13e9a:	f003 0303 	and.w	r3, r3, #3
   13e9e:	2b02      	cmp	r3, #2
   13ea0:	f000 80a6 	beq.w	13ff0 <ull_conn_done+0x214>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   13ea4:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   13ea8:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   13eac:	429a      	cmp	r2, r3
   13eae:	f000 80c7 	beq.w	14040 <ull_conn_done+0x264>
		lll->latency_event = 0U;
   13eb2:	2200      	movs	r2, #0
   13eb4:	84aa      	strh	r2, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   13eb6:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   13eba:	b917      	cbnz	r7, 13ec2 <ull_conn_done+0xe6>
   13ebc:	454a      	cmp	r2, r9
   13ebe:	f000 80a4 	beq.w	1400a <ull_conn_done+0x22e>
		lazy = lll->latency_event + 1U;
   13ec2:	3201      	adds	r2, #1
   13ec4:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13ec6:	b913      	cbnz	r3, 13ece <ull_conn_done+0xf2>
   13ec8:	2c00      	cmp	r4, #0
   13eca:	f000 8084 	beq.w	13fd6 <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13ece:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13ed0:	4e83      	ldr	r6, [pc, #524]	; (140e0 <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   13ed2:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13ed4:	9506      	str	r5, [sp, #24]
   13ed6:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13ed8:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13eda:	9103      	str	r1, [sp, #12]
   13edc:	e9cd 0001 	strd	r0, r0, [sp, #4]
   13ee0:	b2d2      	uxtb	r2, r2
   13ee2:	9704      	str	r7, [sp, #16]
   13ee4:	9400      	str	r4, [sp, #0]
   13ee6:	9605      	str	r6, [sp, #20]
   13ee8:	2101      	movs	r1, #1
   13eea:	f7f8 fea7 	bl	cc3c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13eee:	f030 0302 	bics.w	r3, r0, #2
   13ef2:	d010      	beq.n	13f16 <ull_conn_done+0x13a>
   13ef4:	f7fb fab8 	bl	f468 <ull_disable_mark_get>
   13ef8:	4285      	cmp	r5, r0
   13efa:	d00c      	beq.n	13f16 <ull_conn_done+0x13a>
   13efc:	4a79      	ldr	r2, [pc, #484]	; (140e4 <ull_conn_done+0x308>)
   13efe:	497a      	ldr	r1, [pc, #488]	; (140e8 <ull_conn_done+0x30c>)
   13f00:	487a      	ldr	r0, [pc, #488]	; (140ec <ull_conn_done+0x310>)
   13f02:	f240 5376 	movw	r3, #1398	; 0x576
   13f06:	f00e ff7e 	bl	22e06 <printk>
   13f0a:	4040      	eors	r0, r0
   13f0c:	f380 8811 	msr	BASEPRI, r0
   13f10:	f04f 0003 	mov.w	r0, #3
   13f14:	df02      	svc	2
}
   13f16:	b00b      	add	sp, #44	; 0x2c
   13f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   13f1c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   13f20:	2b00      	cmp	r3, #0
   13f22:	d18f      	bne.n	13e44 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   13f24:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   13f28:	2b00      	cmp	r3, #0
   13f2a:	d04b      	beq.n	13fc4 <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   13f2c:	4543      	cmp	r3, r8
   13f2e:	f240 80bd 	bls.w	140ac <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   13f32:	eba3 0308 	sub.w	r3, r3, r8
   13f36:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   13f3a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   13f3e:	2b00      	cmp	r3, #0
   13f40:	d083      	beq.n	13e4a <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   13f42:	4598      	cmp	r8, r3
   13f44:	f080 808f 	bcs.w	14066 <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   13f48:	eba3 0308 	sub.w	r3, r3, r8
   13f4c:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   13f4e:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   13f50:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   13f52:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   13f56:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   13f58:	d908      	bls.n	13f6c <ull_conn_done+0x190>
			else if (lll->role) {
   13f5a:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   13f5e:	4293      	cmp	r3, r2
   13f60:	f6bf af73 	bge.w	13e4a <ull_conn_done+0x6e>
				if (latency_event) {
   13f64:	f1b9 0f00 	cmp.w	r9, #0
   13f68:	f000 808b 	beq.w	14082 <ull_conn_done+0x2a6>
				force = 1U;
   13f6c:	2701      	movs	r7, #1
   13f6e:	e76c      	b.n	13e4a <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13f70:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   13f74:	0719      	lsls	r1, r3, #28
   13f76:	d542      	bpl.n	13ffe <ull_conn_done+0x222>
					    (lll->latency + 6)) ?
   13f78:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   13f7a:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   13f7e:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   13f80:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   13f82:	bfc4      	itt	gt
   13f84:	1ad3      	subgt	r3, r2, r3
   13f86:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   13f88:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   13f8c:	bfcc      	ite	gt
   13f8e:	b29b      	uxthgt	r3, r3
   13f90:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   13f92:	4299      	cmp	r1, r3
   13f94:	d061      	beq.n	1405a <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   13f96:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   13f9a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   13f9e:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   13fa2:	e732      	b.n	13e0a <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   13fa4:	273d      	movs	r7, #61	; 0x3d
   13fa6:	f884 713b 	strb.w	r7, [r4, #315]	; 0x13b
		conn_cleanup(conn, reason_peer);
   13faa:	4639      	mov	r1, r7
   13fac:	4620      	mov	r0, r4
   13fae:	f7ff fe8f 	bl	13cd0 <conn_cleanup>
}
   13fb2:	b00b      	add	sp, #44	; 0x2c
   13fb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   13fb8:	2300      	movs	r3, #0
   13fba:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   13fbe:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   13fc2:	e722      	b.n	13e0a <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   13fc4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   13fc8:	2b00      	cmp	r3, #0
   13fca:	d1ba      	bne.n	13f42 <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   13fcc:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   13fd0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   13fd4:	e7b3      	b.n	13f3e <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13fd6:	b371      	cbz	r1, 14036 <ull_conn_done+0x25a>
   13fd8:	4623      	mov	r3, r4
   13fda:	e778      	b.n	13ece <ull_conn_done+0xf2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13fdc:	1a5b      	subs	r3, r3, r1
   13fde:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   13fe2:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13fe6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   13fe8:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13fec:	f47f af5a 	bne.w	13ea4 <ull_conn_done+0xc8>
   13ff0:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   13ff4:	3b01      	subs	r3, #1
   13ff6:	2b01      	cmp	r3, #1
   13ff8:	f63f af54 	bhi.w	13ea4 <ull_conn_done+0xc8>
   13ffc:	e759      	b.n	13eb2 <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13ffe:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   14002:	07da      	lsls	r2, r3, #31
   14004:	f57f af01 	bpl.w	13e0a <ull_conn_done+0x2e>
   14008:	e7b6      	b.n	13f78 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1400a:	b90b      	cbnz	r3, 14010 <ull_conn_done+0x234>
   1400c:	2c00      	cmp	r4, #0
   1400e:	d082      	beq.n	13f16 <ull_conn_done+0x13a>
	lazy = 0U;
   14010:	4639      	mov	r1, r7
   14012:	e75c      	b.n	13ece <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   14014:	f7fb f9a0 	bl	f358 <ll_pdu_rx_alloc>
			if (rx) {
   14018:	4601      	mov	r1, r0
   1401a:	b370      	cbz	r0, 1407a <ull_conn_done+0x29e>
				conn->apto_expire = 0U;
   1401c:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   1401e:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   14020:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   14024:	2317      	movs	r3, #23
				rx->handle = lll->handle;
   14026:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   14028:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1402a:	6800      	ldr	r0, [r0, #0]
   1402c:	f7fb f966 	bl	f2fc <ll_rx_put>
				ll_rx_sched();
   14030:	f7fb f96e 	bl	f310 <ll_rx_sched>
   14034:	e71d      	b.n	13e72 <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   14036:	2f00      	cmp	r7, #0
   14038:	f43f af6d 	beq.w	13f16 <ull_conn_done+0x13a>
   1403c:	4623      	mov	r3, r4
   1403e:	e746      	b.n	13ece <ull_conn_done+0xf2>
   14040:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   14042:	e738      	b.n	13eb6 <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   14044:	aa08      	add	r2, sp, #32
   14046:	a909      	add	r1, sp, #36	; 0x24
   14048:	4630      	mov	r0, r6
   1404a:	f7ec fa29 	bl	4a0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1404e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   14052:	b383      	cbz	r3, 140b6 <ull_conn_done+0x2da>
				lll->latency_event = 0;
   14054:	2300      	movs	r3, #0
   14056:	84ab      	strh	r3, [r5, #36]	; 0x24
   14058:	e6ec      	b.n	13e34 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   1405a:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   1405e:	2900      	cmp	r1, #0
   14060:	f47f aed3 	bne.w	13e0a <ull_conn_done+0x2e>
   14064:	e799      	b.n	13f9a <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   14066:	4620      	mov	r0, r4
   14068:	2108      	movs	r1, #8
   1406a:	f7ff fe31 	bl	13cd0 <conn_cleanup>
			return;
   1406e:	e752      	b.n	13f16 <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   14070:	4620      	mov	r0, r4
   14072:	2122      	movs	r1, #34	; 0x22
   14074:	f7ff fe2c 	bl	13cd0 <conn_cleanup>
			return;
   14078:	e74d      	b.n	13f16 <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   1407a:	2301      	movs	r3, #1
   1407c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   14080:	e6f7      	b.n	13e72 <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   14082:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   14086:	085a      	lsrs	r2, r3, #1
					if (force) {
   14088:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   1408c:	bf17      	itett	ne
   1408e:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   14092:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   14096:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   1409a:	461f      	movne	r7, r3
   1409c:	e6d5      	b.n	13e4a <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   1409e:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   140a0:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   140a2:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   140a6:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   140aa:	e6fb      	b.n	13ea4 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   140ac:	4620      	mov	r0, r4
   140ae:	213e      	movs	r1, #62	; 0x3e
   140b0:	f7ff fe0e 	bl	13cd0 <conn_cleanup>
			return;
   140b4:	e72f      	b.n	13f16 <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   140b6:	20ff      	movs	r0, #255	; 0xff
   140b8:	f7ff fdba 	bl	13c30 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   140bc:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   140c0:	2b00      	cmp	r3, #0
   140c2:	d1c7      	bne.n	14054 <ull_conn_done+0x278>
   140c4:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   140c8:	463a      	mov	r2, r7
   140ca:	f7f7 fa85 	bl	b5d8 <memq_peek>
   140ce:	2800      	cmp	r0, #0
   140d0:	d1c0      	bne.n	14054 <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   140d2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   140d6:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   140d8:	bf44      	itt	mi
   140da:	8c2b      	ldrhmi	r3, [r5, #32]
   140dc:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   140de:	e6a9      	b.n	13e34 <ull_conn_done+0x58>
   140e0:	000103a1 	.word	0x000103a1
   140e4:	0002caec 	.word	0x0002caec
   140e8:	0002cc80 	.word	0x0002cc80
   140ec:	0002c630 	.word	0x0002c630

000140f0 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   140f0:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   140f4:	2b00      	cmp	r3, #0
   140f6:	f000 80be 	beq.w	14276 <ull_conn_tx_lll_enqueue+0x186>
   140fa:	3901      	subs	r1, #1
{
   140fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   14100:	f8df 8178 	ldr.w	r8, [pc, #376]	; 1427c <ull_conn_tx_lll_enqueue+0x18c>
		LL_ASSERT(link);
   14104:	f8df a178 	ldr.w	sl, [pc, #376]	; 14280 <ull_conn_tx_lll_enqueue+0x190>
   14108:	f8df 9178 	ldr.w	r9, [pc, #376]	; 14284 <ull_conn_tx_lll_enqueue+0x194>
   1410c:	4604      	mov	r4, r0
   1410e:	b2cd      	uxtb	r5, r1
   14110:	e010      	b.n	14134 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   14112:	4640      	mov	r0, r8
   14114:	f7f7 f9f6 	bl	b504 <mem_acquire>
		LL_ASSERT(link);
   14118:	4607      	mov	r7, r0
   1411a:	b3b0      	cbz	r0, 1418a <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1411c:	4631      	mov	r1, r6
   1411e:	4638      	mov	r0, r7
   14120:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   14124:	f7f7 fa50 	bl	b5c8 <memq_enqueue>
	while (conn->tx_head &&
   14128:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   1412c:	3d01      	subs	r5, #1
   1412e:	b2ed      	uxtb	r5, r5
   14130:	2b00      	cmp	r3, #0
   14132:	d05c      	beq.n	141ee <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   14134:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
	while (conn->tx_head &&
   14138:	07d1      	lsls	r1, r2, #31
   1413a:	d403      	bmi.n	14144 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   1413c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		 !conn->llcp_phy.pause_tx &&
   14140:	0792      	lsls	r2, r2, #30
   14142:	d53a      	bpl.n	141ba <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   14144:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   14148:	4293      	cmp	r3, r2
   1414a:	d150      	bne.n	141ee <ull_conn_tx_lll_enqueue+0xfe>
   1414c:	2dff      	cmp	r5, #255	; 0xff
   1414e:	d04e      	beq.n	141ee <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   14150:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   14154:	4620      	mov	r0, r4
   14156:	f7fb ff4d 	bl	fff4 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1415a:	7903      	ldrb	r3, [r0, #4]
   1415c:	f003 0303 	and.w	r3, r3, #3
   14160:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   14162:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14164:	d1d5      	bne.n	14112 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   14166:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   14168:	2b0b      	cmp	r3, #11
   1416a:	d042      	beq.n	141f2 <ull_conn_tx_lll_enqueue+0x102>
   1416c:	d81b      	bhi.n	141a6 <ull_conn_tx_lll_enqueue+0xb6>
   1416e:	2b04      	cmp	r3, #4
   14170:	d1cf      	bne.n	14112 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   14172:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   14176:	f043 0302 	orr.w	r3, r3, #2
   1417a:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		link = mem_acquire(&mem_link_tx.free);
   1417e:	4640      	mov	r0, r8
   14180:	f7f7 f9c0 	bl	b504 <mem_acquire>
		LL_ASSERT(link);
   14184:	4607      	mov	r7, r0
   14186:	2800      	cmp	r0, #0
   14188:	d1c8      	bne.n	1411c <ull_conn_tx_lll_enqueue+0x2c>
   1418a:	483b      	ldr	r0, [pc, #236]	; (14278 <ull_conn_tx_lll_enqueue+0x188>)
   1418c:	f240 53ca 	movw	r3, #1482	; 0x5ca
   14190:	4652      	mov	r2, sl
   14192:	4649      	mov	r1, r9
   14194:	f00e fe37 	bl	22e06 <printk>
   14198:	4040      	eors	r0, r0
   1419a:	f380 8811 	msr	BASEPRI, r0
   1419e:	f04f 0003 	mov.w	r0, #3
   141a2:	df02      	svc	2
   141a4:	e7ba      	b.n	1411c <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   141a6:	3b16      	subs	r3, #22
   141a8:	2b01      	cmp	r3, #1
   141aa:	d8b2      	bhi.n	14112 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   141ac:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   141b0:	f043 0301 	orr.w	r3, r3, #1
   141b4:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
		break;
   141b8:	e7ab      	b.n	14112 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   141ba:	791a      	ldrb	r2, [r3, #4]
   141bc:	f002 0203 	and.w	r2, r2, #3
   141c0:	2a03      	cmp	r2, #3
   141c2:	d1c3      	bne.n	1414c <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   141c4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   141c6:	2a03      	cmp	r2, #3
   141c8:	d001      	beq.n	141ce <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   141ca:	2a0a      	cmp	r2, #10
   141cc:	d1be      	bne.n	1414c <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   141ce:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   141d2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   141d6:	428a      	cmp	r2, r1
   141d8:	d010      	beq.n	141fc <ull_conn_tx_lll_enqueue+0x10c>
   141da:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   141de:	2a03      	cmp	r2, #3
   141e0:	d0b4      	beq.n	1414c <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   141e2:	681a      	ldr	r2, [r3, #0]
   141e4:	b11a      	cbz	r2, 141ee <ull_conn_tx_lll_enqueue+0xfe>
   141e6:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   141ea:	428a      	cmp	r2, r1
   141ec:	d032      	beq.n	14254 <ull_conn_tx_lll_enqueue+0x164>
}
   141ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   141f2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   141f6:	2b00      	cmp	r3, #0
   141f8:	da8b      	bge.n	14112 <ull_conn_tx_lll_enqueue+0x22>
   141fa:	e7ba      	b.n	14172 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   141fc:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   14200:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   14204:	4288      	cmp	r0, r1
   14206:	d1ec      	bne.n	141e2 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   14208:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   1420c:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   14210:	4288      	cmp	r0, r1
   14212:	d1e6      	bne.n	141e2 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   14214:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
   14218:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   1421c:	4288      	cmp	r0, r1
   1421e:	d1e0      	bne.n	141e2 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   14220:	f894 01a5 	ldrb.w	r0, [r4, #421]	; 0x1a5
   14224:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
   14228:	4288      	cmp	r0, r1
   1422a:	d1da      	bne.n	141e2 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1422c:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   14230:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   14234:	4288      	cmp	r0, r1
   14236:	d1d4      	bne.n	141e2 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14238:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1423c:	2101      	movs	r1, #1
   1423e:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   14242:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   14244:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   14246:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1424a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_type = LLCP_ENCRYPTION;
   1424e:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   14252:	e77b      	b.n	1414c <ull_conn_tx_lll_enqueue+0x5c>
				tx->next = conn->tx_ctrl_last->next;
   14254:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
				if (!conn->tx_data_last) {
   14258:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
				conn->tx_head = tx->next;
   1425c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
				tx->next = conn->tx_ctrl_last->next;
   14260:	680a      	ldr	r2, [r1, #0]
   14262:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   14264:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   14266:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				if (!conn->tx_data_last) {
   1426a:	2800      	cmp	r0, #0
   1426c:	f47f af6e 	bne.w	1414c <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   14270:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   14274:	e76a      	b.n	1414c <ull_conn_tx_lll_enqueue+0x5c>
   14276:	4770      	bx	lr
   14278:	0002c630 	.word	0x0002c630
   1427c:	20003628 	.word	0x20003628
   14280:	0002caec 	.word	0x0002caec
   14284:	0002cb44 	.word	0x0002cb44

00014288 <tx_demux>:
{
   14288:	b510      	push	{r4, lr}
   1428a:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1428c:	2001      	movs	r0, #1
   1428e:	f7ff fccf 	bl	13c30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   14292:	4620      	mov	r0, r4
   14294:	2101      	movs	r1, #1
}
   14296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1429a:	f7ff bf29 	b.w	140f0 <ull_conn_tx_lll_enqueue>
   1429e:	bf00      	nop

000142a0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   142a0:	4901      	ldr	r1, [pc, #4]	; (142a8 <ull_conn_link_tx_release+0x8>)
   142a2:	f7f7 b945 	b.w	b530 <mem_release>
   142a6:	bf00      	nop
   142a8:	20003628 	.word	0x20003628

000142ac <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   142ac:	4b01      	ldr	r3, [pc, #4]	; (142b4 <ull_conn_ack_last_idx_get+0x8>)
}
   142ae:	78d8      	ldrb	r0, [r3, #3]
   142b0:	4770      	bx	lr
   142b2:	bf00      	nop
   142b4:	20000610 	.word	0x20000610

000142b8 <ull_conn_ack_peek>:
{
   142b8:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   142ba:	4b0b      	ldr	r3, [pc, #44]	; (142e8 <ull_conn_ack_peek+0x30>)
   142bc:	789c      	ldrb	r4, [r3, #2]
   142be:	78de      	ldrb	r6, [r3, #3]
   142c0:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   142c2:	42b4      	cmp	r4, r6
   142c4:	d00d      	beq.n	142e2 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   142c6:	3304      	adds	r3, #4
   142c8:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   142cc:	4605      	mov	r5, r0
   142ce:	1918      	adds	r0, r3, r4
   142d0:	d005      	beq.n	142de <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   142d2:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   142d4:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   142d6:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   142d8:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   142da:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   142dc:	6818      	ldr	r0, [r3, #0]
}
   142de:	bcf0      	pop	{r4, r5, r6, r7}
   142e0:	4770      	bx	lr
		return NULL;
   142e2:	2000      	movs	r0, #0
   142e4:	e7fb      	b.n	142de <ull_conn_ack_peek+0x26>
   142e6:	bf00      	nop
   142e8:	20000610 	.word	0x20000610

000142ec <ull_conn_ack_by_last_peek>:
{
   142ec:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   142ee:	4b09      	ldr	r3, [pc, #36]	; (14314 <ull_conn_ack_by_last_peek+0x28>)
   142f0:	789c      	ldrb	r4, [r3, #2]
   142f2:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   142f4:	4284      	cmp	r4, r0
   142f6:	d00b      	beq.n	14310 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   142f8:	3304      	adds	r3, #4
   142fa:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   142fe:	1918      	adds	r0, r3, r4
   14300:	d004      	beq.n	1430c <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   14302:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   14304:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   14306:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   14308:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1430a:	6818      	ldr	r0, [r3, #0]
}
   1430c:	bc30      	pop	{r4, r5}
   1430e:	4770      	bx	lr
		return NULL;
   14310:	2000      	movs	r0, #0
   14312:	e7fb      	b.n	1430c <ull_conn_ack_by_last_peek+0x20>
   14314:	20000610 	.word	0x20000610

00014318 <ull_conn_ack_dequeue>:
{
   14318:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   1431a:	4b0a      	ldr	r3, [pc, #40]	; (14344 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1431c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1431e:	78da      	ldrb	r2, [r3, #3]
   14320:	7818      	ldrb	r0, [r3, #0]
   14322:	785c      	ldrb	r4, [r3, #1]
   14324:	428a      	cmp	r2, r1
   14326:	d00a      	beq.n	1433e <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   14328:	1c4a      	adds	r2, r1, #1
   1432a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1432c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14330:	4294      	cmp	r4, r2
   14332:	bf08      	it	eq
   14334:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14336:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14338:	709a      	strb	r2, [r3, #2]
}
   1433a:	bc10      	pop	{r4}
   1433c:	4770      	bx	lr
		return NULL;
   1433e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   14340:	e7fb      	b.n	1433a <ull_conn_ack_dequeue+0x22>
   14342:	bf00      	nop
   14344:	20000610 	.word	0x20000610

00014348 <ull_conn_lll_ack_enqueue>:
{
   14348:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1434a:	4a13      	ldr	r2, [pc, #76]	; (14398 <ull_conn_lll_ack_enqueue+0x50>)
   1434c:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1434e:	7855      	ldrb	r5, [r2, #1]
   14350:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   14352:	1c73      	adds	r3, r6, #1
   14354:	b2db      	uxtb	r3, r3
		last = 0U;
   14356:	429d      	cmp	r5, r3
   14358:	bf08      	it	eq
   1435a:	2300      	moveq	r3, #0
	if (last == first) {
   1435c:	429c      	cmp	r4, r3
   1435e:	d00a      	beq.n	14376 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14360:	4615      	mov	r5, r2
   14362:	f815 4b04 	ldrb.w	r4, [r5], #4
   14366:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1436a:	192e      	adds	r6, r5, r4
   1436c:	d003      	beq.n	14376 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1436e:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   14370:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   14372:	70d3      	strb	r3, [r2, #3]
}
   14374:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   14376:	4a09      	ldr	r2, [pc, #36]	; (1439c <ull_conn_lll_ack_enqueue+0x54>)
   14378:	4909      	ldr	r1, [pc, #36]	; (143a0 <ull_conn_lll_ack_enqueue+0x58>)
   1437a:	480a      	ldr	r0, [pc, #40]	; (143a4 <ull_conn_lll_ack_enqueue+0x5c>)
   1437c:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   14380:	f00e fd41 	bl	22e06 <printk>
   14384:	4040      	eors	r0, r0
   14386:	f380 8811 	msr	BASEPRI, r0
   1438a:	f04f 0003 	mov.w	r0, #3
   1438e:	df02      	svc	2
	lll_tx->handle = handle;
   14390:	2300      	movs	r3, #0
   14392:	801b      	strh	r3, [r3, #0]
   14394:	deff      	udf	#255	; 0xff
   14396:	bf00      	nop
   14398:	20000610 	.word	0x20000610
   1439c:	0002caec 	.word	0x0002caec
   143a0:	0002cb34 	.word	0x0002cb34
   143a4:	0002c630 	.word	0x0002c630

000143a8 <ull_conn_tx_ack>:
{
   143a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   143aa:	7953      	ldrb	r3, [r2, #5]
{
   143ac:	b083      	sub	sp, #12
   143ae:	4614      	mov	r4, r2
   143b0:	4605      	mov	r5, r0
   143b2:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   143b4:	b383      	cbz	r3, 14418 <ull_conn_tx_ack+0x70>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   143b6:	7923      	ldrb	r3, [r4, #4]
   143b8:	f003 0203 	and.w	r2, r3, #3
   143bc:	2a03      	cmp	r2, #3
   143be:	d00d      	beq.n	143dc <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   143c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   143c4:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   143c6:	bf04      	itt	eq
   143c8:	f36f 0301 	bfceq	r3, #0, #2
   143cc:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   143ce:	4621      	mov	r1, r4
   143d0:	4628      	mov	r0, r5
}
   143d2:	b003      	add	sp, #12
   143d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   143d8:	f7fa bfd6 	b.w	f388 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   143dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   143e0:	429d      	cmp	r5, r3
   143e2:	d127      	bne.n	14434 <ull_conn_tx_ack+0x8c>
		if (link->next == (void *)tx) {
   143e4:	6833      	ldr	r3, [r6, #0]
   143e6:	42a3      	cmp	r3, r4
   143e8:	f000 80d0 	beq.w	1458c <ull_conn_tx_ack+0x1e4>
			LL_ASSERT(!link->next);
   143ec:	2b00      	cmp	r3, #0
   143ee:	d0ee      	beq.n	143ce <ull_conn_tx_ack+0x26>
   143f0:	4a74      	ldr	r2, [pc, #464]	; (145c4 <ull_conn_tx_ack+0x21c>)
   143f2:	4975      	ldr	r1, [pc, #468]	; (145c8 <ull_conn_tx_ack+0x220>)
   143f4:	4875      	ldr	r0, [pc, #468]	; (145cc <ull_conn_tx_ack+0x224>)
   143f6:	f44f 63c5 	mov.w	r3, #1576	; 0x628
   143fa:	f00e fd04 	bl	22e06 <printk>
   143fe:	4040      	eors	r0, r0
   14400:	f380 8811 	msr	BASEPRI, r0
   14404:	f04f 0003 	mov.w	r0, #3
   14408:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1440a:	4621      	mov	r1, r4
   1440c:	4628      	mov	r0, r5
}
   1440e:	b003      	add	sp, #12
   14410:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   14414:	f7fa bfb8 	b.w	f388 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   14418:	4a6a      	ldr	r2, [pc, #424]	; (145c4 <ull_conn_tx_ack+0x21c>)
   1441a:	496d      	ldr	r1, [pc, #436]	; (145d0 <ull_conn_tx_ack+0x228>)
   1441c:	486b      	ldr	r0, [pc, #428]	; (145cc <ull_conn_tx_ack+0x224>)
   1441e:	f240 6315 	movw	r3, #1557	; 0x615
   14422:	f00e fcf0 	bl	22e06 <printk>
   14426:	4040      	eors	r0, r0
   14428:	f380 8811 	msr	BASEPRI, r0
   1442c:	f04f 0003 	mov.w	r0, #3
   14430:	df02      	svc	2
   14432:	e7c0      	b.n	143b6 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14434:	462a      	mov	r2, r5
   14436:	4867      	ldr	r0, [pc, #412]	; (145d4 <ull_conn_tx_ack+0x22c>)
   14438:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1443c:	f7f7 f892 	bl	b564 <mem_get>
   14440:	79e2      	ldrb	r2, [r4, #7]
   14442:	3a02      	subs	r2, #2
   14444:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   14446:	2a15      	cmp	r2, #21
   14448:	d8cc      	bhi.n	143e4 <ull_conn_tx_ack+0x3c>
   1444a:	a101      	add	r1, pc, #4	; (adr r1, 14450 <ull_conn_tx_ack+0xa8>)
   1444c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   14450:	00014521 	.word	0x00014521
   14454:	000143e5 	.word	0x000143e5
   14458:	000144a9 	.word	0x000144a9
   1445c:	000143e5 	.word	0x000143e5
   14460:	000143e5 	.word	0x000143e5
   14464:	000143e5 	.word	0x000143e5
   14468:	000143e5 	.word	0x000143e5
   1446c:	000143e5 	.word	0x000143e5
   14470:	000143e5 	.word	0x000143e5
   14474:	000144a9 	.word	0x000144a9
   14478:	000143e5 	.word	0x000143e5
   1447c:	0001450d 	.word	0x0001450d
   14480:	000143e5 	.word	0x000143e5
   14484:	000143e5 	.word	0x000143e5
   14488:	000143e5 	.word	0x000143e5
   1448c:	00014505 	.word	0x00014505
   14490:	000143e5 	.word	0x000143e5
   14494:	000143e5 	.word	0x000143e5
   14498:	0001457d 	.word	0x0001457d
   1449c:	0001452f 	.word	0x0001452f
   144a0:	000144b7 	.word	0x000144b7
   144a4:	000144c5 	.word	0x000144c5
			conn->llcp_enc.pause_tx = 1U;
   144a8:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
   144ac:	f042 0202 	orr.w	r2, r2, #2
   144b0:	f880 215e 	strb.w	r2, [r0, #350]	; 0x15e
		break;
   144b4:	e796      	b.n	143e4 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   144b6:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   144ba:	2102      	movs	r1, #2
   144bc:	f361 0201 	bfi	r2, r1, #0, #2
   144c0:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
		if (conn->lll.role) {
   144c4:	f993 203d 	ldrsb.w	r2, [r3, #61]	; 0x3d
   144c8:	2a00      	cmp	r2, #0
   144ca:	da14      	bge.n	144f6 <ull_conn_tx_ack+0x14e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   144cc:	4942      	ldr	r1, [pc, #264]	; (145d8 <ull_conn_tx_ack+0x230>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   144ce:	f893 7064 	ldrb.w	r7, [r3, #100]	; 0x64
   144d2:	f893 21b6 	ldrb.w	r2, [r3, #438]	; 0x1b6
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   144d6:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   144d8:	ea47 0292 	orr.w	r2, r7, r2, lsr #2
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   144dc:	f10d 0c08 	add.w	ip, sp, #8
   144e0:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   144e4:	f002 0207 	and.w	r2, r2, #7
   144e8:	4462      	add	r2, ip
   144ea:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   144ee:	f362 1706 	bfi	r7, r2, #4, #3
   144f2:	f883 7064 	strb.w	r7, [r3, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   144f6:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
   144fa:	f36f 0200 	bfc	r2, #0, #1
   144fe:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
		break;
   14502:	e76f      	b.n	143e4 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   14504:	7a22      	ldrb	r2, [r4, #8]
   14506:	2a03      	cmp	r2, #3
   14508:	f47f af6c 	bne.w	143e4 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   1450c:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   14510:	2100      	movs	r1, #0
		conn->llcp_enc.pause_rx = 0U;
   14512:	f022 0203 	bic.w	r2, r2, #3
   14516:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   1451a:	f8a3 10cc 	strh.w	r1, [r3, #204]	; 0xcc
		break;
   1451e:	e761      	b.n	143e4 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   14520:	7a21      	ldrb	r1, [r4, #8]
   14522:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   14524:	bf08      	it	eq
   14526:	2116      	moveq	r1, #22
   14528:	f7ff fbd2 	bl	13cd0 <conn_cleanup>
	break;
   1452c:	e75a      	b.n	143e4 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1452e:	f890 01a4 	ldrb.w	r0, [r0, #420]	; 0x1a4
   14532:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
   14536:	4282      	cmp	r2, r0
   14538:	f43f af54 	beq.w	143e4 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   1453c:	f893 11a6 	ldrb.w	r1, [r3, #422]	; 0x1a6
   14540:	f001 0207 	and.w	r2, r1, #7
   14544:	2a03      	cmp	r2, #3
   14546:	d005      	beq.n	14554 <ull_conn_tx_ack+0x1ac>
   14548:	3203      	adds	r2, #3
   1454a:	f002 0207 	and.w	r2, r2, #7
   1454e:	2a01      	cmp	r2, #1
   14550:	f63f af48 	bhi.w	143e4 <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   14554:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
   14558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1455c:	f001 0207 	and.w	r2, r1, #7
				conn->lll.max_tx_time =
   14560:	f8b3 71ae 	ldrh.w	r7, [r3, #430]	; 0x1ae
   14564:	f8a3 7060 	strh.w	r7, [r3, #96]	; 0x60
				if (conn->llcp_length.state ==
   14568:	2a05      	cmp	r2, #5
   1456a:	d016      	beq.n	1459a <ull_conn_tx_ack+0x1f2>
				if (!conn->llcp_length.cache.tx_octets) {
   1456c:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
   14570:	b9ca      	cbnz	r2, 145a6 <ull_conn_tx_ack+0x1fe>
					conn->llcp_length.ack =
   14572:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
					conn->procedure_expire = 0U;
   14576:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					break;
   1457a:	e733      	b.n	143e4 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1457c:	f890 21a6 	ldrb.w	r2, [r0, #422]	; 0x1a6
   14580:	2102      	movs	r1, #2
   14582:	f361 0202 	bfi	r2, r1, #0, #3
   14586:	f880 21a6 	strb.w	r2, [r0, #422]	; 0x1a6
		break;
   1458a:	e72b      	b.n	143e4 <ull_conn_tx_ack+0x3c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1458c:	4913      	ldr	r1, [pc, #76]	; (145dc <ull_conn_tx_ack+0x234>)
   1458e:	4620      	mov	r0, r4
}
   14590:	b003      	add	sp, #12
   14592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14596:	f7f6 bfcb 	b.w	b530 <mem_release>
					conn->llcp_length.state =
   1459a:	2204      	movs	r2, #4
   1459c:	f362 0102 	bfi	r1, r2, #0, #3
   145a0:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
					break;
   145a4:	e71e      	b.n	143e4 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.cache.tx_octets = 0;
   145a6:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   145a8:	f360 0102 	bfi	r1, r0, #0, #3
				conn->llcp_length.tx_octets =
   145ac:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
				conn->llcp_length.tx_time =
   145b0:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   145b4:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
				conn->llcp_length.cache.tx_octets = 0;
   145b8:	f8a3 01b0 	strh.w	r0, [r3, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   145bc:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
				break;
   145c0:	e710      	b.n	143e4 <ull_conn_tx_ack+0x3c>
   145c2:	bf00      	nop
   145c4:	0002caec 	.word	0x0002caec
   145c8:	0002cce8 	.word	0x0002cce8
   145cc:	0002c630 	.word	0x0002c630
   145d0:	0002ccdc 	.word	0x0002ccdc
   145d4:	2000334c 	.word	0x2000334c
   145d8:	0002ccf4 	.word	0x0002ccf4
   145dc:	200035a4 	.word	0x200035a4

000145e0 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   145e0:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   145e4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   145e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
   145ec:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   145ee:	bf14      	ite	ne
   145f0:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   145f2:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   145f4:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   145f8:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   145fc:	bf14      	ite	ne
   145fe:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   14600:	3b0b      	subeq	r3, #11
   14602:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   14604:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   14606:	bf44      	itt	mi
   14608:	3b04      	submi	r3, #4
   1460a:	b29b      	uxthmi	r3, r3
}
   1460c:	4298      	cmp	r0, r3
   1460e:	bf28      	it	cs
   14610:	4618      	movcs	r0, r3
   14612:	4770      	bx	lr

00014614 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   14614:	b510      	push	{r4, lr}
   14616:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14618:	b930      	cbnz	r0, 14628 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   1461a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1461e:	f36f 0341 	bfc	r3, #1, #1
   14622:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   14626:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14628:	4a09      	ldr	r2, [pc, #36]	; (14650 <ticker_update_latency_cancel_op_cb+0x3c>)
   1462a:	490a      	ldr	r1, [pc, #40]	; (14654 <ticker_update_latency_cancel_op_cb+0x40>)
   1462c:	480a      	ldr	r0, [pc, #40]	; (14658 <ticker_update_latency_cancel_op_cb+0x44>)
   1462e:	f240 230d 	movw	r3, #525	; 0x20d
   14632:	f00e fbe8 	bl	22e06 <printk>
   14636:	4040      	eors	r0, r0
   14638:	f380 8811 	msr	BASEPRI, r0
   1463c:	f04f 0003 	mov.w	r0, #3
   14640:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   14642:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   14646:	f36f 0341 	bfc	r3, #1, #1
   1464a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1464e:	bd10      	pop	{r4, pc}
   14650:	0002cd14 	.word	0x0002cd14
   14654:	0002cd58 	.word	0x0002cd58
   14658:	0002c630 	.word	0x0002c630

0001465c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1465c:	b900      	cbnz	r0, 14660 <ticker_op_cb+0x4>
   1465e:	4770      	bx	lr
{
   14660:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14662:	4a07      	ldr	r2, [pc, #28]	; (14680 <ticker_op_cb+0x24>)
   14664:	4907      	ldr	r1, [pc, #28]	; (14684 <ticker_op_cb+0x28>)
   14666:	4808      	ldr	r0, [pc, #32]	; (14688 <ticker_op_cb+0x2c>)
   14668:	f240 2305 	movw	r3, #517	; 0x205
   1466c:	f00e fbcb 	bl	22e06 <printk>
   14670:	4040      	eors	r0, r0
   14672:	f380 8811 	msr	BASEPRI, r0
   14676:	f04f 0003 	mov.w	r0, #3
   1467a:	df02      	svc	2
}
   1467c:	bd08      	pop	{r3, pc}
   1467e:	bf00      	nop
   14680:	0002cd14 	.word	0x0002cd14
   14684:	0002cb4c 	.word	0x0002cb4c
   14688:	0002c630 	.word	0x0002c630

0001468c <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   1468c:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1468e:	4a07      	ldr	r2, [pc, #28]	; (146ac <ticker_op_stop_adv_cb.part.0+0x20>)
   14690:	4907      	ldr	r1, [pc, #28]	; (146b0 <ticker_op_stop_adv_cb.part.0+0x24>)
   14692:	4808      	ldr	r0, [pc, #32]	; (146b4 <ticker_op_stop_adv_cb.part.0+0x28>)
   14694:	f240 13fd 	movw	r3, #509	; 0x1fd
   14698:	f00e fbb5 	bl	22e06 <printk>
   1469c:	4040      	eors	r0, r0
   1469e:	f380 8811 	msr	BASEPRI, r0
   146a2:	f04f 0003 	mov.w	r0, #3
   146a6:	df02      	svc	2
}
   146a8:	bd08      	pop	{r3, pc}
   146aa:	bf00      	nop
   146ac:	0002cd14 	.word	0x0002cd14
   146b0:	0002cd6c 	.word	0x0002cd6c
   146b4:	0002c630 	.word	0x0002c630

000146b8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   146b8:	2801      	cmp	r0, #1
   146ba:	d000      	beq.n	146be <ticker_op_stop_adv_cb+0x6>
   146bc:	4770      	bx	lr
{
   146be:	b510      	push	{r4, lr}
   146c0:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   146c2:	f7fa fed1 	bl	f468 <ull_disable_mark_get>
   146c6:	4284      	cmp	r4, r0
   146c8:	d003      	beq.n	146d2 <ticker_op_stop_adv_cb+0x1a>
}
   146ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   146ce:	f7ff bfdd 	b.w	1468c <ticker_op_stop_adv_cb.part.0>
   146d2:	bd10      	pop	{r4, pc}

000146d4 <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   146d4:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   146d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   146da:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   146dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   146e0:	459c      	cmp	ip, r3
   146e2:	d02a      	beq.n	1473a <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   146e4:	4605      	mov	r5, r0
   146e6:	460f      	mov	r7, r1
   146e8:	4601      	mov	r1, r0
   146ea:	4620      	mov	r0, r4
   146ec:	4616      	mov	r6, r2
   146ee:	f7fd fffd 	bl	126ec <ull_conn_llcp>
		if (ret) {
   146f2:	bb10      	cbnz	r0, 1473a <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   146f4:	7c23      	ldrb	r3, [r4, #16]
   146f6:	3301      	adds	r3, #1
   146f8:	b2db      	uxtb	r3, r3
   146fa:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   146fc:	b363      	cbz	r3, 14758 <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   146fe:	f8df c088 	ldr.w	ip, [pc, #136]	; 14788 <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   14702:	4b1c      	ldr	r3, [pc, #112]	; (14774 <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   14704:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14708:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1470a:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1470e:	4611      	mov	r1, r2
   14710:	2001      	movs	r0, #1
	mfy.param = &p;
   14712:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   14716:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   1471a:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   1471e:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14722:	f7f6 ffc5 	bl	b6b0 <mayfly_enqueue>
	LL_ASSERT(!err);
   14726:	b948      	cbnz	r0, 1473c <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   14728:	20ff      	movs	r0, #255	; 0xff
   1472a:	f7ff fa81 	bl	13c30 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1472e:	4620      	mov	r0, r4
   14730:	21ff      	movs	r1, #255	; 0xff
}
   14732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14736:	f7ff bcdb 	b.w	140f0 <ull_conn_tx_lll_enqueue>
}
   1473a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   1473c:	4a0e      	ldr	r2, [pc, #56]	; (14778 <ull_slave_ticker_cb+0xa4>)
   1473e:	490f      	ldr	r1, [pc, #60]	; (1477c <ull_slave_ticker_cb+0xa8>)
   14740:	480f      	ldr	r0, [pc, #60]	; (14780 <ull_slave_ticker_cb+0xac>)
   14742:	f240 13c1 	movw	r3, #449	; 0x1c1
   14746:	f00e fb5e 	bl	22e06 <printk>
   1474a:	4040      	eors	r0, r0
   1474c:	f380 8811 	msr	BASEPRI, r0
   14750:	f04f 0003 	mov.w	r0, #3
   14754:	df02      	svc	2
   14756:	e7e7      	b.n	14728 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   14758:	4a07      	ldr	r2, [pc, #28]	; (14778 <ull_slave_ticker_cb+0xa4>)
   1475a:	490a      	ldr	r1, [pc, #40]	; (14784 <ull_slave_ticker_cb+0xb0>)
   1475c:	4808      	ldr	r0, [pc, #32]	; (14780 <ull_slave_ticker_cb+0xac>)
   1475e:	f240 13b5 	movw	r3, #437	; 0x1b5
   14762:	f00e fb50 	bl	22e06 <printk>
   14766:	4040      	eors	r0, r0
   14768:	f380 8811 	msr	BASEPRI, r0
   1476c:	f04f 0003 	mov.w	r0, #3
   14770:	df02      	svc	2
   14772:	e7c4      	b.n	146fe <ull_slave_ticker_cb+0x2a>
   14774:	20000698 	.word	0x20000698
   14778:	0002cd14 	.word	0x0002cd14
   1477c:	0002c8b0 	.word	0x0002c8b0
   14780:	0002c630 	.word	0x0002c630
   14784:	0002ca20 	.word	0x0002ca20
   14788:	2000366c 	.word	0x2000366c

0001478c <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1478c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1478e:	b123      	cbz	r3, 1479a <ull_slave_latency_cancel+0xe>
   14790:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   14794:	f012 0302 	ands.w	r3, r2, #2
   14798:	d000      	beq.n	1479c <ull_slave_latency_cancel+0x10>
   1479a:	4770      	bx	lr
{
   1479c:	b530      	push	{r4, r5, lr}
   1479e:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   147a0:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   147a4:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   147a6:	4d11      	ldr	r5, [pc, #68]	; (147ec <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   147a8:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   147ac:	2401      	movs	r4, #1
   147ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
   147b2:	b2ca      	uxtb	r2, r1
   147b4:	9006      	str	r0, [sp, #24]
   147b6:	9304      	str	r3, [sp, #16]
   147b8:	9300      	str	r3, [sp, #0]
   147ba:	4618      	mov	r0, r3
   147bc:	9505      	str	r5, [sp, #20]
   147be:	9403      	str	r4, [sp, #12]
   147c0:	2103      	movs	r1, #3
   147c2:	f7f8 fa3b 	bl	cc3c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   147c6:	f030 0302 	bics.w	r3, r0, #2
   147ca:	d00c      	beq.n	147e6 <ull_slave_latency_cancel+0x5a>
   147cc:	4a08      	ldr	r2, [pc, #32]	; (147f0 <ull_slave_latency_cancel+0x64>)
   147ce:	4909      	ldr	r1, [pc, #36]	; (147f4 <ull_slave_latency_cancel+0x68>)
   147d0:	4809      	ldr	r0, [pc, #36]	; (147f8 <ull_slave_latency_cancel+0x6c>)
   147d2:	f240 1387 	movw	r3, #391	; 0x187
   147d6:	f00e fb16 	bl	22e06 <printk>
   147da:	4040      	eors	r0, r0
   147dc:	f380 8811 	msr	BASEPRI, r0
   147e0:	f04f 0003 	mov.w	r0, #3
   147e4:	df02      	svc	2
}
   147e6:	b009      	add	sp, #36	; 0x24
   147e8:	bd30      	pop	{r4, r5, pc}
   147ea:	bf00      	nop
   147ec:	00014615 	.word	0x00014615
   147f0:	0002cd14 	.word	0x0002cd14
   147f4:	0002cbcc 	.word	0x0002cbcc
   147f8:	0002c630 	.word	0x0002c630

000147fc <ll_start_enc_req_send>:
{
   147fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147fe:	460d      	mov	r5, r1
   14800:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   14802:	f7fc f8f1 	bl	109e8 <ll_connected_get>
	if (!conn) {
   14806:	2800      	cmp	r0, #0
   14808:	d046      	beq.n	14898 <ll_start_enc_req_send+0x9c>
	if (error_code) {
   1480a:	4603      	mov	r3, r0
   1480c:	b9ed      	cbnz	r5, 1484a <ll_start_enc_req_send+0x4e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1480e:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   14812:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
   14816:	4291      	cmp	r1, r2
   14818:	d035      	beq.n	14886 <ll_start_enc_req_send+0x8a>
   1481a:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
   1481e:	2a03      	cmp	r2, #3
   14820:	d131      	bne.n	14886 <ll_start_enc_req_send+0x8a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14822:	f8b0 20f8 	ldrh.w	r2, [r0, #248]	; 0xf8
   14826:	6827      	ldr	r7, [r4, #0]
   14828:	68e0      	ldr	r0, [r4, #12]
   1482a:	6866      	ldr	r6, [r4, #4]
   1482c:	68a1      	ldr	r1, [r4, #8]
   1482e:	f8c3 1171 	str.w	r1, [r3, #369]	; 0x171
   14832:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   14836:	f8c3 0175 	str.w	r0, [r3, #373]	; 0x175
   1483a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
   1483e:	f8c3 7169 	str.w	r7, [r3, #361]	; 0x169
   14842:	f8c3 616d 	str.w	r6, [r3, #365]	; 0x16d
	return 0;
   14846:	4628      	mov	r0, r5
}
   14848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1484a:	f890 015e 	ldrb.w	r0, [r0, #350]	; 0x15e
   1484e:	f010 0004 	ands.w	r0, r0, #4
   14852:	d112      	bne.n	1487a <ll_start_enc_req_send+0x7e>
			if ((conn->llcp_req == conn->llcp_ack) ||
   14854:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
   14858:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
   1485c:	4291      	cmp	r1, r2
   1485e:	d012      	beq.n	14886 <ll_start_enc_req_send+0x8a>
   14860:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   14864:	2a03      	cmp	r2, #3
   14866:	d10e      	bne.n	14886 <ll_start_enc_req_send+0x8a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14868:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			conn->llcp.encryption.error_code = error_code;
   1486c:	f883 50f9 	strb.w	r5, [r3, #249]	; 0xf9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14870:	f360 0201 	bfi	r2, r0, #0, #2
   14874:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
   14878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    conn->llcp_terminate.req) {
   1487a:	f893 1138 	ldrb.w	r1, [r3, #312]	; 0x138
			if (conn->llcp_terminate.ack !=
   1487e:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
   14882:	428a      	cmp	r2, r1
   14884:	d001      	beq.n	1488a <ll_start_enc_req_send+0x8e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   14886:	200c      	movs	r0, #12
}
   14888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.req++;
   1488a:	3201      	adds	r2, #1
   1488c:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			conn->llcp_terminate.reason_own = error_code;
   14890:	f883 513a 	strb.w	r5, [r3, #314]	; 0x13a
	return 0;
   14894:	2000      	movs	r0, #0
}
   14896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14898:	2002      	movs	r0, #2
}
   1489a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001489c <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1489c:	b470      	push	{r4, r5, r6}
   1489e:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   148a0:	7800      	ldrb	r0, [r0, #0]
   148a2:	4c1b      	ldr	r4, [pc, #108]	; (14910 <lll_chan_sel_1+0x74>)
   148a4:	fb02 1101 	mla	r1, r2, r1, r1
   148a8:	180a      	adds	r2, r1, r0
   148aa:	fb84 0102 	smull	r0, r1, r4, r2
   148ae:	4411      	add	r1, r2
   148b0:	1149      	asrs	r1, r1, #5
   148b2:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   148b6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   148ba:	1a51      	subs	r1, r2, r1
   148bc:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   148be:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   148c0:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   148c2:	5c9c      	ldrb	r4, [r3, r2]
{
   148c4:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   148c8:	f001 0107 	and.w	r1, r1, #7
   148cc:	410c      	asrs	r4, r1
   148ce:	f014 0401 	ands.w	r4, r4, #1
   148d2:	d11b      	bne.n	1490c <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   148d4:	fbb0 f2f5 	udiv	r2, r0, r5
   148d8:	fb05 0212 	mls	r2, r5, r2, r0
   148dc:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   148de:	1e5d      	subs	r5, r3, #1
   148e0:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   148e2:	f104 0108 	add.w	r1, r4, #8
   148e6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   148ea:	4620      	mov	r0, r4
   148ec:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   148ee:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   148f2:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   148f6:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   148fa:	d002      	beq.n	14902 <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   148fc:	b132      	cbz	r2, 1490c <lll_chan_sel_1+0x70>
				chan_index--;
   148fe:	3a01      	subs	r2, #1
   14900:	b2d2      	uxtb	r2, r2
			chan_next++;
   14902:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   14904:	4284      	cmp	r4, r0
   14906:	d1f2      	bne.n	148ee <lll_chan_sel_1+0x52>
	while (byte_count--) {
   14908:	42b5      	cmp	r5, r6
   1490a:	d1ea      	bne.n	148e2 <lll_chan_sel_1+0x46>
}
   1490c:	bc70      	pop	{r4, r5, r6}
   1490e:	4770      	bx	lr
   14910:	dd67c8a7 	.word	0xdd67c8a7

00014914 <lll_chan_sel_2>:
{
   14914:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   14916:	4f2f      	ldr	r7, [pc, #188]	; (149d4 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   14918:	4e2f      	ldr	r6, [pc, #188]	; (149d8 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   1491a:	ea80 0501 	eor.w	r5, r0, r1
   1491e:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   14920:	0a28      	lsrs	r0, r5, #8
   14922:	b2ed      	uxtb	r5, r5
   14924:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   14928:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1492c:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   14930:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   14934:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   14938:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1493c:	ea4c 0c0e 	orr.w	ip, ip, lr
   14940:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   14942:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   14946:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   1494a:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   1494e:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   14952:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   14956:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1495a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1495e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   14962:	3c01      	subs	r4, #1
   14964:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   14966:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1496a:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1496c:	d1d8      	bne.n	14920 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   1496e:	481b      	ldr	r0, [pc, #108]	; (149dc <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   14970:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   14972:	fba0 5001 	umull	r5, r0, r0, r1
   14976:	1a0d      	subs	r5, r1, r0
   14978:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   1497c:	0940      	lsrs	r0, r0, #5
   1497e:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   14982:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   14986:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   14988:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   1498c:	f000 0607 	and.w	r6, r0, #7
   14990:	5d55      	ldrb	r5, [r2, r5]
   14992:	4135      	asrs	r5, r6
   14994:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   14996:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   14998:	d41a      	bmi.n	149d0 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1499a:	fb01 f303 	mul.w	r3, r1, r3
   1499e:	1e56      	subs	r6, r2, #1
   149a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   149a4:	3204      	adds	r2, #4
		bite = *chan_map;
   149a6:	f104 0508 	add.w	r5, r4, #8
   149aa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   149ae:	4620      	mov	r0, r4
   149b0:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   149b2:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   149b6:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   149ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   149be:	d002      	beq.n	149c6 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   149c0:	b133      	cbz	r3, 149d0 <lll_chan_sel_2+0xbc>
				chan_index--;
   149c2:	3b01      	subs	r3, #1
   149c4:	b2db      	uxtb	r3, r3
			chan_next++;
   149c6:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   149c8:	42a0      	cmp	r0, r4
   149ca:	d1f2      	bne.n	149b2 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   149cc:	42b2      	cmp	r2, r6
   149ce:	d1ea      	bne.n	149a6 <lll_chan_sel_2+0x92>
}
   149d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   149d2:	bf00      	nop
   149d4:	00022110 	.word	0x00022110
   149d8:	00088440 	.word	0x00088440
   149dc:	bacf914d 	.word	0xbacf914d

000149e0 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   149e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   149e4:	4688      	mov	r8, r1
	int i;

	if (free) {
   149e6:	4615      	mov	r5, r2
   149e8:	b10a      	cbz	r2, 149ee <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   149ea:	23ff      	movs	r3, #255	; 0xff
   149ec:	7013      	strb	r3, [r2, #0]
   149ee:	4e17      	ldr	r6, [pc, #92]	; (14a4c <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   149f0:	f000 0701 	and.w	r7, r0, #1
   149f4:	f106 0902 	add.w	r9, r6, #2
{
   149f8:	2400      	movs	r4, #0
   149fa:	e004      	b.n	14a06 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   149fc:	42ba      	cmp	r2, r7
   149fe:	d014      	beq.n	14a2a <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   14a00:	3401      	adds	r4, #1
   14a02:	2c08      	cmp	r4, #8
   14a04:	d00e      	beq.n	14a24 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   14a06:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   14a0a:	07d9      	lsls	r1, r3, #31
   14a0c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14a10:	d4f4      	bmi.n	149fc <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   14a12:	2d00      	cmp	r5, #0
   14a14:	d0f4      	beq.n	14a00 <wl_find+0x20>
   14a16:	782b      	ldrb	r3, [r5, #0]
   14a18:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   14a1a:	bf08      	it	eq
   14a1c:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   14a1e:	3401      	adds	r4, #1
   14a20:	2c08      	cmp	r4, #8
   14a22:	d1f0      	bne.n	14a06 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   14a24:	20ff      	movs	r0, #255	; 0xff
}
   14a26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   14a2a:	2206      	movs	r2, #6
   14a2c:	4641      	mov	r1, r8
   14a2e:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   14a32:	f016 feb0 	bl	2b796 <memcmp>
   14a36:	b130      	cbz	r0, 14a46 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   14a38:	2d00      	cmp	r5, #0
   14a3a:	d0e1      	beq.n	14a00 <wl_find+0x20>
   14a3c:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   14a40:	07db      	lsls	r3, r3, #31
   14a42:	d4dd      	bmi.n	14a00 <wl_find+0x20>
   14a44:	e7e7      	b.n	14a16 <wl_find+0x36>
			return i;
   14a46:	b2e0      	uxtb	r0, r4
   14a48:	e7ed      	b.n	14a26 <wl_find+0x46>
   14a4a:	bf00      	nop
   14a4c:	200038ac 	.word	0x200038ac

00014a50 <filter_insert>:
}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
   14a50:	b430      	push	{r4, r5}
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14a52:	7845      	ldrb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   14a54:	7804      	ldrb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14a56:	408a      	lsls	r2, r1
   14a58:	4315      	orrs	r5, r2
	filter->enable_bitmask |= BIT(index);
   14a5a:	2201      	movs	r2, #1
   14a5c:	408a      	lsls	r2, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14a5e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	filter->enable_bitmask |= BIT(index);
   14a62:	4314      	orrs	r4, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14a64:	0049      	lsls	r1, r1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14a66:	7045      	strb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   14a68:	7004      	strb	r4, [r0, #0]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14a6a:	3102      	adds	r1, #2
   14a6c:	681a      	ldr	r2, [r3, #0]
   14a6e:	5042      	str	r2, [r0, r1]
   14a70:	4401      	add	r1, r0
   14a72:	889b      	ldrh	r3, [r3, #4]
   14a74:	808b      	strh	r3, [r1, #4]
}
   14a76:	bc30      	pop	{r4, r5}
   14a78:	4770      	bx	lr
   14a7a:	bf00      	nop

00014a7c <wl_update>:
{
   14a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a80:	4d16      	ldr	r5, [pc, #88]	; (14adc <wl_update+0x60>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14a82:	f8df 8060 	ldr.w	r8, [pc, #96]	; 14ae4 <wl_update+0x68>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14a86:	4f16      	ldr	r7, [pc, #88]	; (14ae0 <wl_update+0x64>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14a88:	f8df 905c 	ldr.w	r9, [pc, #92]	; 14ae8 <wl_update+0x6c>
   14a8c:	1eae      	subs	r6, r5, #2
{
   14a8e:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   14a90:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   14a94:	f013 0f01 	tst.w	r3, #1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14a98:	4621      	mov	r1, r4
   14a9a:	462b      	mov	r3, r5
   14a9c:	4638      	mov	r0, r7
		if (!wl[i].taken) {
   14a9e:	d015      	beq.n	14acc <wl_update+0x50>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14aa0:	f898 2000 	ldrb.w	r2, [r8]
   14aa4:	b162      	cbz	r2, 14ac0 <wl_update+0x44>
		j = wl[i].rl_idx;
   14aa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14aaa:	2a07      	cmp	r2, #7
   14aac:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   14ab0:	d806      	bhi.n	14ac0 <wl_update+0x44>
   14ab2:	f819 203c 	ldrb.w	r2, [r9, ip, lsl #3]
   14ab6:	f012 0f04 	tst.w	r2, #4
   14aba:	d001      	beq.n	14ac0 <wl_update+0x44>
   14abc:	06d2      	lsls	r2, r2, #27
   14abe:	d505      	bpl.n	14acc <wl_update+0x50>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14ac0:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
   14ac4:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14ac8:	f7ff ffc2 	bl	14a50 <filter_insert>
	for (i = 0U; i < WL_SIZE; i++) {
   14acc:	3401      	adds	r4, #1
   14ace:	2c08      	cmp	r4, #8
   14ad0:	f105 0508 	add.w	r5, r5, #8
   14ad4:	d1dc      	bne.n	14a90 <wl_update+0x14>
}
   14ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14ada:	bf00      	nop
   14adc:	200038ae 	.word	0x200038ae
   14ae0:	200038ec 	.word	0x200038ec
   14ae4:	20008628 	.word	0x20008628
   14ae8:	20003734 	.word	0x20003734

00014aec <rl_update>:
{
   14aec:	b570      	push	{r4, r5, r6, lr}
   14aee:	4d0c      	ldr	r5, [pc, #48]	; (14b20 <rl_update+0x34>)
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   14af0:	480c      	ldr	r0, [pc, #48]	; (14b24 <rl_update+0x38>)
   14af2:	1c6e      	adds	r6, r5, #1
{
   14af4:	2400      	movs	r4, #0
   14af6:	e002      	b.n	14afe <rl_update+0x12>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14af8:	3401      	adds	r4, #1
   14afa:	2c08      	cmp	r4, #8
   14afc:	d00f      	beq.n	14b1e <rl_update+0x32>
		if (rl[i].taken) {
   14afe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   14b02:	00d3      	lsls	r3, r2, #3
   14b04:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
   14b08:	07d1      	lsls	r1, r2, #31
   14b0a:	d5f5      	bpl.n	14af8 <rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   14b0c:	4621      	mov	r1, r4
   14b0e:	4433      	add	r3, r6
   14b10:	f3c2 1280 	ubfx	r2, r2, #6, #1
   14b14:	3401      	adds	r4, #1
   14b16:	f7ff ff9b 	bl	14a50 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14b1a:	2c08      	cmp	r4, #8
   14b1c:	d1ef      	bne.n	14afe <rl_update+0x12>
}
   14b1e:	bd70      	pop	{r4, r5, r6, pc}
   14b20:	20003734 	.word	0x20003734
   14b24:	20003874 	.word	0x20003874

00014b28 <ll_wl_size_get>:
}
   14b28:	2008      	movs	r0, #8
   14b2a:	4770      	bx	lr

00014b2c <ll_wl_clear>:
{
   14b2c:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   14b2e:	2000      	movs	r0, #0
   14b30:	f7fb f9a0 	bl	fe74 <ull_adv_filter_pol_get>
   14b34:	b9d8      	cbnz	r0, 14b6e <ll_wl_clear+0x42>
   14b36:	4a0f      	ldr	r2, [pc, #60]	; (14b74 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   14b38:	4c0f      	ldr	r4, [pc, #60]	; (14b78 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   14b3a:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   14b3e:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   14b40:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   14b42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   14b46:	d805      	bhi.n	14b54 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   14b48:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   14b4c:	f36f 1345 	bfc	r3, #5, #1
   14b50:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   14b54:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   14b58:	f36f 0300 	bfc	r3, #0, #1
   14b5c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   14b60:	3001      	adds	r0, #1
   14b62:	2808      	cmp	r0, #8
   14b64:	d1e9      	bne.n	14b3a <ll_wl_clear+0xe>
	wl_anon = 0U;
   14b66:	4b05      	ldr	r3, [pc, #20]	; (14b7c <ll_wl_clear+0x50>)
   14b68:	2000      	movs	r0, #0
   14b6a:	7018      	strb	r0, [r3, #0]
}
   14b6c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14b6e:	200c      	movs	r0, #12
}
   14b70:	bd10      	pop	{r4, pc}
   14b72:	bf00      	nop
   14b74:	200038ac 	.word	0x200038ac
   14b78:	20003734 	.word	0x20003734
   14b7c:	20008629 	.word	0x20008629

00014b80 <ll_wl_remove>:
{
   14b80:	b538      	push	{r3, r4, r5, lr}
   14b82:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   14b84:	2000      	movs	r0, #0
   14b86:	f7fb f975 	bl	fe74 <ull_adv_filter_pol_get>
   14b8a:	bb30      	cbnz	r0, 14bda <ll_wl_remove+0x5a>
   14b8c:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   14b8e:	7828      	ldrb	r0, [r5, #0]
   14b90:	28ff      	cmp	r0, #255	; 0xff
   14b92:	d01e      	beq.n	14bd2 <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   14b94:	1c69      	adds	r1, r5, #1
   14b96:	4622      	mov	r2, r4
   14b98:	f7ff ff22 	bl	149e0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   14b9c:	2807      	cmp	r0, #7
   14b9e:	d901      	bls.n	14ba4 <ll_wl_remove+0x24>
   14ba0:	2002      	movs	r0, #2
}
   14ba2:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   14ba4:	4a0e      	ldr	r2, [pc, #56]	; (14be0 <ll_wl_remove+0x60>)
   14ba6:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   14baa:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   14bac:	2b07      	cmp	r3, #7
   14bae:	d808      	bhi.n	14bc2 <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   14bb0:	490c      	ldr	r1, [pc, #48]	; (14be4 <ll_wl_remove+0x64>)
   14bb2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14bb6:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   14bba:	f364 1545 	bfi	r5, r4, #5, #1
   14bbe:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   14bc2:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   14bc6:	f36f 0300 	bfc	r3, #0, #1
   14bca:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   14bce:	2000      	movs	r0, #0
}
   14bd0:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   14bd2:	4b05      	ldr	r3, [pc, #20]	; (14be8 <ll_wl_remove+0x68>)
   14bd4:	701c      	strb	r4, [r3, #0]
		return 0;
   14bd6:	4620      	mov	r0, r4
}
   14bd8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14bda:	200c      	movs	r0, #12
}
   14bdc:	bd38      	pop	{r3, r4, r5, pc}
   14bde:	bf00      	nop
   14be0:	200038ac 	.word	0x200038ac
   14be4:	20003734 	.word	0x20003734
   14be8:	20008629 	.word	0x20008629

00014bec <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14bec:	2807      	cmp	r0, #7
{
   14bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14bf2:	4604      	mov	r4, r0
   14bf4:	460e      	mov	r6, r1
   14bf6:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14bf8:	d819      	bhi.n	14c2e <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   14bfa:	4f1a      	ldr	r7, [pc, #104]	; (14c64 <ll_rl_id_addr_get+0x78>)
   14bfc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14c00:	ea4f 0884 	mov.w	r8, r4, lsl #2
   14c04:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14c08:	07db      	lsls	r3, r3, #31
   14c0a:	d51d      	bpl.n	14c48 <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   14c0c:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   14c0e:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   14c10:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   14c14:	fb00 7404 	mla	r4, r0, r4, r7
	*id_addr_type = rl[rl_idx].id_addr_type;
   14c18:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14c1c:	7033      	strb	r3, [r6, #0]
   14c1e:	f8d4 3001 	ldr.w	r3, [r4, #1]
   14c22:	602b      	str	r3, [r5, #0]
   14c24:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14c28:	80ab      	strh	r3, [r5, #4]
}
   14c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14c2e:	4a0e      	ldr	r2, [pc, #56]	; (14c68 <ll_rl_id_addr_get+0x7c>)
   14c30:	490e      	ldr	r1, [pc, #56]	; (14c6c <ll_rl_id_addr_get+0x80>)
   14c32:	480f      	ldr	r0, [pc, #60]	; (14c70 <ll_rl_id_addr_get+0x84>)
   14c34:	23e9      	movs	r3, #233	; 0xe9
   14c36:	f00e f8e6 	bl	22e06 <printk>
   14c3a:	4040      	eors	r0, r0
   14c3c:	f380 8811 	msr	BASEPRI, r0
   14c40:	f04f 0003 	mov.w	r0, #3
   14c44:	df02      	svc	2
   14c46:	e7d8      	b.n	14bfa <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   14c48:	4a07      	ldr	r2, [pc, #28]	; (14c68 <ll_rl_id_addr_get+0x7c>)
   14c4a:	490a      	ldr	r1, [pc, #40]	; (14c74 <ll_rl_id_addr_get+0x88>)
   14c4c:	4808      	ldr	r0, [pc, #32]	; (14c70 <ll_rl_id_addr_get+0x84>)
   14c4e:	23ea      	movs	r3, #234	; 0xea
   14c50:	f00e f8d9 	bl	22e06 <printk>
   14c54:	4040      	eors	r0, r0
   14c56:	f380 8811 	msr	BASEPRI, r0
   14c5a:	f04f 0003 	mov.w	r0, #3
   14c5e:	df02      	svc	2
   14c60:	e7d4      	b.n	14c0c <ll_rl_id_addr_get+0x20>
   14c62:	bf00      	nop
   14c64:	20003734 	.word	0x20003734
   14c68:	0002cdc4 	.word	0x0002cdc4
   14c6c:	0002ce08 	.word	0x0002ce08
   14c70:	0002c630 	.word	0x0002c630
   14c74:	0002ce14 	.word	0x0002ce14

00014c78 <ll_rl_size_get>:
   14c78:	2008      	movs	r0, #8
   14c7a:	4770      	bx	lr

00014c7c <ll_rl_clear>:
{
   14c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   14c7e:	2000      	movs	r0, #0
   14c80:	f7fb f8ec 	bl	fe5c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   14c84:	bb98      	cbnz	r0, 14cee <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   14c86:	4b1b      	ldr	r3, [pc, #108]	; (14cf4 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   14c88:	491b      	ldr	r1, [pc, #108]	; (14cf8 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   14c8a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   14c8e:	f893 c000 	ldrb.w	ip, [r3]
   14c92:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   14c96:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   14c9a:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   14c9e:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   14ca2:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   14ca4:	f360 0200 	bfi	r2, r0, #0, #1
   14ca8:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   14cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   14cb0:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   14cb4:	f360 0c00 	bfi	ip, r0, #0, #1
   14cb8:	f360 0700 	bfi	r7, r0, #0, #1
   14cbc:	f360 0600 	bfi	r6, r0, #0, #1
   14cc0:	f360 0500 	bfi	r5, r0, #0, #1
   14cc4:	f360 0400 	bfi	r4, r0, #0, #1
   14cc8:	f360 0100 	bfi	r1, r0, #0, #1
   14ccc:	f360 0200 	bfi	r2, r0, #0, #1
   14cd0:	f883 c000 	strb.w	ip, [r3]
   14cd4:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   14cd8:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   14cdc:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   14ce0:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   14ce4:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   14ce8:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   14cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14cee:	200c      	movs	r0, #12
}
   14cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14cf2:	bf00      	nop
   14cf4:	20003734 	.word	0x20003734
   14cf8:	20008627 	.word	0x20008627

00014cfc <ll_rl_enable>:
{
   14cfc:	b510      	push	{r4, lr}
   14cfe:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   14d00:	2000      	movs	r0, #0
   14d02:	f7fb f8ab 	bl	fe5c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   14d06:	b958      	cbnz	r0, 14d20 <ll_rl_enable+0x24>
	switch (enable) {
   14d08:	b134      	cbz	r4, 14d18 <ll_rl_enable+0x1c>
   14d0a:	2c01      	cmp	r4, #1
   14d0c:	d001      	beq.n	14d12 <ll_rl_enable+0x16>
   14d0e:	2012      	movs	r0, #18
}
   14d10:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   14d12:	4b04      	ldr	r3, [pc, #16]	; (14d24 <ll_rl_enable+0x28>)
   14d14:	701c      	strb	r4, [r3, #0]
}
   14d16:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   14d18:	4b02      	ldr	r3, [pc, #8]	; (14d24 <ll_rl_enable+0x28>)
   14d1a:	701c      	strb	r4, [r3, #0]
	return 0;
   14d1c:	4620      	mov	r0, r4
}
   14d1e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14d20:	200c      	movs	r0, #12
}
   14d22:	bd10      	pop	{r4, pc}
   14d24:	20008628 	.word	0x20008628

00014d28 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   14d28:	4a03      	ldr	r2, [pc, #12]	; (14d38 <ll_rl_timeout_set+0x10>)
   14d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14d2e:	fb03 f300 	mul.w	r3, r3, r0
   14d32:	6013      	str	r3, [r2, #0]
}
   14d34:	4770      	bx	lr
   14d36:	bf00      	nop
   14d38:	200038a8 	.word	0x200038a8

00014d3c <ull_filter_adv_scan_state_cb>:
	if (bm) {
   14d3c:	b1b0      	cbz	r0, 14d6c <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   14d3e:	4b0d      	ldr	r3, [pc, #52]	; (14d74 <ull_filter_adv_scan_state_cb+0x38>)
   14d40:	681a      	ldr	r2, [r3, #0]
{
   14d42:	b510      	push	{r4, lr}
   14d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14d48:	f240 30e7 	movw	r0, #999	; 0x3e7
   14d4c:	2100      	movs	r1, #0
   14d4e:	fbe3 0102 	umlal	r0, r1, r3, r2
   14d52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14d56:	2300      	movs	r3, #0
   14d58:	f7eb fa12 	bl	180 <__aeabi_uldivmod>
}
   14d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d60:	4602      	mov	r2, r0
   14d62:	460b      	mov	r3, r1
   14d64:	4804      	ldr	r0, [pc, #16]	; (14d78 <ull_filter_adv_scan_state_cb+0x3c>)
   14d66:	4905      	ldr	r1, [pc, #20]	; (14d7c <ull_filter_adv_scan_state_cb+0x40>)
   14d68:	f00b bb14 	b.w	20394 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   14d6c:	4803      	ldr	r0, [pc, #12]	; (14d7c <ull_filter_adv_scan_state_cb+0x40>)
   14d6e:	f016 bae1 	b.w	2b334 <k_delayed_work_cancel>
   14d72:	bf00      	nop
   14d74:	200038a8 	.word	0x200038a8
   14d78:	20001458 	.word	0x20001458
   14d7c:	20001318 	.word	0x20001318

00014d80 <ull_filter_adv_update>:
{
   14d80:	b508      	push	{r3, lr}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   14d82:	4b09      	ldr	r3, [pc, #36]	; (14da8 <ull_filter_adv_update+0x28>)
   14d84:	2200      	movs	r2, #0
   14d86:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   14d88:	b930      	cbnz	r0, 14d98 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   14d8a:	4b08      	ldr	r3, [pc, #32]	; (14dac <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   14d8c:	4a08      	ldr	r2, [pc, #32]	; (14db0 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   14d8e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   14d90:	2100      	movs	r1, #0
   14d92:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   14d94:	b91b      	cbnz	r3, 14d9e <ull_filter_adv_update+0x1e>
}
   14d96:	bd08      	pop	{r3, pc}
		wl_update();
   14d98:	f7ff fe70 	bl	14a7c <wl_update>
   14d9c:	e7f5      	b.n	14d8a <ull_filter_adv_update+0xa>
}
   14d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   14da2:	f7ff bea3 	b.w	14aec <rl_update>
   14da6:	bf00      	nop
   14da8:	200038ec 	.word	0x200038ec
   14dac:	20008628 	.word	0x20008628
   14db0:	20003874 	.word	0x20003874

00014db4 <ull_filter_rpa_update>:
{
   14db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14db8:	4682      	mov	sl, r0
   14dba:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   14dbc:	f016 fb14 	bl	2b3e8 <z_impl_k_uptime_ticks>
   14dc0:	0142      	lsls	r2, r0, #5
   14dc2:	014b      	lsls	r3, r1, #5
   14dc4:	ebb2 0800 	subs.w	r8, r2, r0
   14dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   14dcc:	eb63 0301 	sbc.w	r3, r3, r1
   14dd0:	009b      	lsls	r3, r3, #2
   14dd2:	ea4f 0288 	mov.w	r2, r8, lsl #2
   14dd6:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   14dda:	eb12 0800 	adds.w	r8, r2, r0
   14dde:	eb43 0101 	adc.w	r1, r3, r1
   14de2:	00c9      	lsls	r1, r1, #3
   14de4:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   14de8:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   14dec:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   14df0:	0bc8      	lsrs	r0, r1, #15
   14df2:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   14df6:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   14df8:	f1ba 0f00 	cmp.w	sl, #0
   14dfc:	d117      	bne.n	14e2e <ull_filter_rpa_update+0x7a>
   14dfe:	4b5d      	ldr	r3, [pc, #372]	; (14f74 <ull_filter_rpa_update+0x1c0>)
   14e00:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e04:	1c59      	adds	r1, r3, #1
   14e06:	bf08      	it	eq
   14e08:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   14e0c:	d00f      	beq.n	14e2e <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   14e0e:	495a      	ldr	r1, [pc, #360]	; (14f78 <ull_filter_rpa_update+0x1c4>)
   14e10:	6809      	ldr	r1, [r1, #0]
   14e12:	ebb8 0402 	subs.w	r4, r8, r2
   14e16:	eb60 0503 	sbc.w	r5, r0, r3
   14e1a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   14e1c:	428c      	cmp	r4, r1
   14e1e:	eb75 0303 	sbcs.w	r3, r5, r3
   14e22:	bfac      	ite	ge
   14e24:	f04f 0901 	movge.w	r9, #1
   14e28:	f04f 0900 	movlt.w	r9, #0
   14e2c:	e001      	b.n	14e32 <ull_filter_rpa_update+0x7e>
   14e2e:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14e32:	4e52      	ldr	r6, [pc, #328]	; (14f7c <ull_filter_rpa_update+0x1c8>)
   14e34:	f8df b158 	ldr.w	fp, [pc, #344]	; 14f90 <ull_filter_rpa_update+0x1dc>
   14e38:	f1a6 0717 	sub.w	r7, r6, #23
	bool all = timeout || (rpa_last_ms == -1) ||
   14e3c:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   14e3e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14e42:	00a5      	lsls	r5, r4, #2
   14e44:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14e48:	07da      	lsls	r2, r3, #31
   14e4a:	d515      	bpl.n	14e78 <ull_filter_rpa_update+0xc4>
   14e4c:	f1b9 0f00 	cmp.w	r9, #0
   14e50:	d101      	bne.n	14e56 <ull_filter_rpa_update+0xa2>
   14e52:	0798      	lsls	r0, r3, #30
   14e54:	d410      	bmi.n	14e78 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   14e56:	192b      	adds	r3, r5, r4
   14e58:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14e5c:	0759      	lsls	r1, r3, #29
   14e5e:	d432      	bmi.n	14ec6 <ull_filter_rpa_update+0x112>
			if (rl[i].lirk) {
   14e60:	192b      	adds	r3, r5, r4
   14e62:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14e66:	071a      	lsls	r2, r3, #28
   14e68:	d419      	bmi.n	14e9e <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   14e6a:	4425      	add	r5, r4
   14e6c:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   14e70:	f043 0302 	orr.w	r3, r3, #2
   14e74:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14e78:	3401      	adds	r4, #1
   14e7a:	2c08      	cmp	r4, #8
   14e7c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   14e80:	d1dd      	bne.n	14e3e <ull_filter_rpa_update+0x8a>
	if (all) {
   14e82:	f1b9 0f00 	cmp.w	r9, #0
   14e86:	d004      	beq.n	14e92 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   14e88:	4b3a      	ldr	r3, [pc, #232]	; (14f74 <ull_filter_rpa_update+0x1c0>)
   14e8a:	9a01      	ldr	r2, [sp, #4]
   14e8c:	f8c3 8000 	str.w	r8, [r3]
   14e90:	605a      	str	r2, [r3, #4]
	if (timeout) {
   14e92:	f1ba 0f00 	cmp.w	sl, #0
   14e96:	d139      	bne.n	14f0c <ull_filter_rpa_update+0x158>
}
   14e98:	b007      	add	sp, #28
   14e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   14e9e:	a902      	add	r1, sp, #8
   14ea0:	f1a6 0010 	sub.w	r0, r6, #16
   14ea4:	f00f fc27 	bl	246f6 <bt_rpa_create>
				LL_ASSERT(!err);
   14ea8:	2800      	cmp	r0, #0
   14eaa:	d155      	bne.n	14f58 <ull_filter_rpa_update+0x1a4>
				bt_addr_copy(&local_rpas[i], &rpa);
   14eac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14eb0:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
   14eb4:	9802      	ldr	r0, [sp, #8]
   14eb6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14eba:	f84b 0012 	str.w	r0, [fp, r2, lsl #1]
				rl[i].local_rpa = &local_rpas[i];
   14ebe:	f8c6 300d 	str.w	r3, [r6, #13]
   14ec2:	8099      	strh	r1, [r3, #4]
   14ec4:	e7d1      	b.n	14e6a <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   14ec6:	7833      	ldrb	r3, [r6, #0]
   14ec8:	4a2d      	ldr	r2, [pc, #180]	; (14f80 <ull_filter_rpa_update+0x1cc>)
   14eca:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   14ece:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   14ed0:	f10d 0307 	add.w	r3, sp, #7
   14ed4:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   14ed8:	f812 1901 	ldrb.w	r1, [r2], #-1
   14edc:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   14ee0:	4283      	cmp	r3, r0
   14ee2:	d1f9      	bne.n	14ed8 <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   14ee4:	1df1      	adds	r1, r6, #7
   14ee6:	a802      	add	r0, sp, #8
   14ee8:	f00f fc05 	bl	246f6 <bt_rpa_create>
				LL_ASSERT(!err);
   14eec:	2800      	cmp	r0, #0
   14eee:	d0b7      	beq.n	14e60 <ull_filter_rpa_update+0xac>
   14ef0:	4a24      	ldr	r2, [pc, #144]	; (14f84 <ull_filter_rpa_update+0x1d0>)
   14ef2:	4925      	ldr	r1, [pc, #148]	; (14f88 <ull_filter_rpa_update+0x1d4>)
   14ef4:	4825      	ldr	r0, [pc, #148]	; (14f8c <ull_filter_rpa_update+0x1d8>)
   14ef6:	f240 2316 	movw	r3, #534	; 0x216
   14efa:	f00d ff84 	bl	22e06 <printk>
   14efe:	4040      	eors	r0, r0
   14f00:	f380 8811 	msr	BASEPRI, r0
   14f04:	f04f 0003 	mov.w	r0, #3
   14f08:	df02      	svc	2
   14f0a:	e7a9      	b.n	14e60 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   14f0c:	2000      	movs	r0, #0
   14f0e:	f7fa ff97 	bl	fe40 <ull_adv_is_enabled_get>
		if (adv) {
   14f12:	4604      	mov	r4, r0
   14f14:	2800      	cmp	r0, #0
   14f16:	d0bf      	beq.n	14e98 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   14f18:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   14f1c:	075b      	lsls	r3, r3, #29
   14f1e:	d5bb      	bpl.n	14e98 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   14f20:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   14f24:	2b07      	cmp	r3, #7
   14f26:	d8b7      	bhi.n	14e98 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14f28:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   14f2c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14f30:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14f32:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14f34:	302c      	adds	r0, #44	; 0x2c
   14f36:	f001 f9e9 	bl	1630c <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   14f3a:	786a      	ldrb	r2, [r5, #1]
   14f3c:	4629      	mov	r1, r5
   14f3e:	3202      	adds	r2, #2
   14f40:	4605      	mov	r5, r0
   14f42:	f016 fc36 	bl	2b7b2 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   14f46:	4629      	mov	r1, r5
   14f48:	4620      	mov	r0, r4
   14f4a:	f7fb f823 	bl	ff94 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   14f4e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14f52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   14f56:	e79f      	b.n	14e98 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   14f58:	4a0a      	ldr	r2, [pc, #40]	; (14f84 <ull_filter_rpa_update+0x1d0>)
   14f5a:	490b      	ldr	r1, [pc, #44]	; (14f88 <ull_filter_rpa_update+0x1d4>)
   14f5c:	480b      	ldr	r0, [pc, #44]	; (14f8c <ull_filter_rpa_update+0x1d8>)
   14f5e:	f240 2323 	movw	r3, #547	; 0x223
   14f62:	f00d ff50 	bl	22e06 <printk>
   14f66:	4040      	eors	r0, r0
   14f68:	f380 8811 	msr	BASEPRI, r0
   14f6c:	f04f 0003 	mov.w	r0, #3
   14f70:	df02      	svc	2
   14f72:	e79b      	b.n	14eac <ull_filter_rpa_update+0xf8>
   14f74:	20001310 	.word	0x20001310
   14f78:	200038a8 	.word	0x200038a8
   14f7c:	2000374b 	.word	0x2000374b
   14f80:	200036b4 	.word	0x200036b4
   14f84:	0002cdc4 	.word	0x0002cdc4
   14f88:	0002c8b0 	.word	0x0002c8b0
   14f8c:	0002c630 	.word	0x0002c630
   14f90:	2000367c 	.word	0x2000367c

00014f94 <rpa_timeout>:
{
   14f94:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   14f96:	2001      	movs	r0, #1
   14f98:	f7ff ff0c 	bl	14db4 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   14f9c:	4b0a      	ldr	r3, [pc, #40]	; (14fc8 <rpa_timeout+0x34>)
   14f9e:	681a      	ldr	r2, [r3, #0]
   14fa0:	f240 30e7 	movw	r0, #999	; 0x3e7
   14fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14fa8:	2100      	movs	r1, #0
   14faa:	fbe3 0102 	umlal	r0, r1, r3, r2
   14fae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14fb2:	2300      	movs	r3, #0
   14fb4:	f7eb f8e4 	bl	180 <__aeabi_uldivmod>
}
   14fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14fbc:	4602      	mov	r2, r0
   14fbe:	460b      	mov	r3, r1
   14fc0:	4802      	ldr	r0, [pc, #8]	; (14fcc <rpa_timeout+0x38>)
   14fc2:	4903      	ldr	r1, [pc, #12]	; (14fd0 <rpa_timeout+0x3c>)
   14fc4:	f00b b9e6 	b.w	20394 <k_delayed_work_submit_to_queue>
   14fc8:	200038a8 	.word	0x200038a8
   14fcc:	20001458 	.word	0x20001458
   14fd0:	20001318 	.word	0x20001318

00014fd4 <ull_filter_adva_get>:
{
   14fd4:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   14fd6:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   14fda:	2c07      	cmp	r4, #7
   14fdc:	d810      	bhi.n	15000 <ull_filter_adva_get+0x2c>
   14fde:	4d10      	ldr	r5, [pc, #64]	; (15020 <ull_filter_adva_get+0x4c>)
   14fe0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14fe4:	00a6      	lsls	r6, r4, #2
   14fe6:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   14fea:	071a      	lsls	r2, r3, #28
   14fec:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   14ff0:	d505      	bpl.n	14ffe <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   14ff2:	079b      	lsls	r3, r3, #30
   14ff4:	d506      	bpl.n	15004 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   14ff6:	4434      	add	r4, r6
   14ff8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   14ffc:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   14ffe:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   15000:	2000      	movs	r0, #0
}
   15002:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   15004:	4a07      	ldr	r2, [pc, #28]	; (15024 <ull_filter_adva_get+0x50>)
   15006:	4908      	ldr	r1, [pc, #32]	; (15028 <ull_filter_adva_get+0x54>)
   15008:	4808      	ldr	r0, [pc, #32]	; (1502c <ull_filter_adva_get+0x58>)
   1500a:	f240 2349 	movw	r3, #585	; 0x249
   1500e:	f00d fefa 	bl	22e06 <printk>
   15012:	4040      	eors	r0, r0
   15014:	f380 8811 	msr	BASEPRI, r0
   15018:	f04f 0003 	mov.w	r0, #3
   1501c:	df02      	svc	2
   1501e:	e7ea      	b.n	14ff6 <ull_filter_adva_get+0x22>
   15020:	20003734 	.word	0x20003734
   15024:	0002cdc4 	.word	0x0002cdc4
   15028:	0002ce28 	.word	0x0002ce28
   1502c:	0002c630 	.word	0x0002c630

00015030 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   15030:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   15034:	2b07      	cmp	r3, #7
   15036:	d80e      	bhi.n	15056 <ull_filter_tgta_get+0x26>
   15038:	4908      	ldr	r1, [pc, #32]	; (1505c <ull_filter_tgta_get+0x2c>)
   1503a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1503e:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   15042:	f3c2 0080 	ubfx	r0, r2, #2, #1
   15046:	0752      	lsls	r2, r2, #29
   15048:	d506      	bpl.n	15058 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   1504a:	2028      	movs	r0, #40	; 0x28
   1504c:	fb00 1303 	mla	r3, r0, r3, r1
   15050:	f103 001e 	add.w	r0, r3, #30
   15054:	4770      	bx	lr
	return NULL;
   15056:	2000      	movs	r0, #0
}
   15058:	4770      	bx	lr
   1505a:	bf00      	nop
   1505c:	20003734 	.word	0x20003734

00015060 <ull_filter_rl_find>:
{
   15060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15064:	468b      	mov	fp, r1
	if (free) {
   15066:	4616      	mov	r6, r2
   15068:	b10a      	cbz	r2, 1506e <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1506a:	23ff      	movs	r3, #255	; 0xff
   1506c:	7013      	strb	r3, [r2, #0]
   1506e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 150d4 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15072:	f000 0901 	and.w	r9, r0, #1
   15076:	f108 0a01 	add.w	sl, r8, #1
{
   1507a:	2400      	movs	r4, #0
   1507c:	e004      	b.n	15088 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1507e:	454a      	cmp	r2, r9
   15080:	d019      	beq.n	150b6 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15082:	3401      	adds	r4, #1
   15084:	2c08      	cmp	r4, #8
   15086:	d012      	beq.n	150ae <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15088:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1508c:	00e8      	lsls	r0, r5, #3
   1508e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   15092:	07d9      	lsls	r1, r3, #31
   15094:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15098:	b2e7      	uxtb	r7, r4
   1509a:	d4f0      	bmi.n	1507e <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1509c:	2e00      	cmp	r6, #0
   1509e:	d0f0      	beq.n	15082 <ull_filter_rl_find+0x22>
   150a0:	7833      	ldrb	r3, [r6, #0]
   150a2:	3401      	adds	r4, #1
   150a4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   150a6:	bf08      	it	eq
   150a8:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   150aa:	2c08      	cmp	r4, #8
   150ac:	d1ec      	bne.n	15088 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   150ae:	27ff      	movs	r7, #255	; 0xff
}
   150b0:	4638      	mov	r0, r7
   150b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   150b6:	4450      	add	r0, sl
   150b8:	2206      	movs	r2, #6
   150ba:	4659      	mov	r1, fp
   150bc:	f016 fb6b 	bl	2b796 <memcmp>
   150c0:	2800      	cmp	r0, #0
   150c2:	d0f5      	beq.n	150b0 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   150c4:	2e00      	cmp	r6, #0
   150c6:	d0dc      	beq.n	15082 <ull_filter_rl_find+0x22>
   150c8:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   150cc:	07db      	lsls	r3, r3, #31
   150ce:	d4d8      	bmi.n	15082 <ull_filter_rl_find+0x22>
   150d0:	e7e6      	b.n	150a0 <ull_filter_rl_find+0x40>
   150d2:	bf00      	nop
   150d4:	20003734 	.word	0x20003734

000150d8 <ll_wl_add>:
{
   150d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   150dc:	4605      	mov	r5, r0
   150de:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   150e0:	2000      	movs	r0, #0
   150e2:	f7fa fec7 	bl	fe74 <ull_adv_filter_pol_get>
   150e6:	2800      	cmp	r0, #0
   150e8:	d13e      	bne.n	15168 <ll_wl_add+0x90>
   150ea:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   150ec:	7828      	ldrb	r0, [r5, #0]
   150ee:	28ff      	cmp	r0, #255	; 0xff
   150f0:	d033      	beq.n	1515a <ll_wl_add+0x82>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   150f2:	f105 0801 	add.w	r8, r5, #1
   150f6:	4641      	mov	r1, r8
   150f8:	f10d 0207 	add.w	r2, sp, #7
   150fc:	f7ff fc70 	bl	149e0 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   15100:	2807      	cmp	r0, #7
   15102:	d926      	bls.n	15152 <ll_wl_add+0x7a>
	} else if (j >= ARRAY_SIZE(wl)) {
   15104:	f89d 6007 	ldrb.w	r6, [sp, #7]
   15108:	2e07      	cmp	r6, #7
   1510a:	d83e      	bhi.n	1518a <ll_wl_add+0xb2>
	wl[i].id_addr_type = id_addr->type & 0x1;
   1510c:	4f21      	ldr	r7, [pc, #132]	; (15194 <ll_wl_add+0xbc>)
   1510e:	782a      	ldrb	r2, [r5, #0]
   15110:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   15114:	f362 0341 	bfi	r3, r2, #1, #1
   15118:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1511c:	2302      	movs	r3, #2
   1511e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   15122:	f8d5 2001 	ldr.w	r2, [r5, #1]
   15126:	50fa      	str	r2, [r7, r3]
   15128:	443b      	add	r3, r7
   1512a:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   1512e:	809a      	strh	r2, [r3, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15130:	7828      	ldrb	r0, [r5, #0]
   15132:	4622      	mov	r2, r4
   15134:	4641      	mov	r1, r8
   15136:	f7ff ff93 	bl	15060 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   1513a:	2807      	cmp	r0, #7
   1513c:	d918      	bls.n	15170 <ll_wl_add+0x98>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1513e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   15142:	22ff      	movs	r2, #255	; 0xff
   15144:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   15146:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   1514a:	f043 0301 	orr.w	r3, r3, #1
   1514e:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   15152:	2000      	movs	r0, #0
}
   15154:	b002      	add	sp, #8
   15156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   1515a:	4b0f      	ldr	r3, [pc, #60]	; (15198 <ll_wl_add+0xc0>)
   1515c:	2201      	movs	r2, #1
		return 0;
   1515e:	4620      	mov	r0, r4
		wl_anon = 1U;
   15160:	701a      	strb	r2, [r3, #0]
}
   15162:	b002      	add	sp, #8
   15164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15168:	200c      	movs	r0, #12
}
   1516a:	b002      	add	sp, #8
   1516c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   15170:	490a      	ldr	r1, [pc, #40]	; (1519c <ll_wl_add+0xc4>)
   15172:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   15176:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   1517a:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   1517e:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   15180:	f043 0320 	orr.w	r3, r3, #32
   15184:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   15188:	e7dd      	b.n	15146 <ll_wl_add+0x6e>
   1518a:	2007      	movs	r0, #7
}
   1518c:	b002      	add	sp, #8
   1518e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15192:	bf00      	nop
   15194:	200038ac 	.word	0x200038ac
   15198:	20008629 	.word	0x20008629
   1519c:	20003734 	.word	0x20003734

000151a0 <ll_rl_add>:
{
   151a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151a4:	4606      	mov	r6, r0
   151a6:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   151a8:	2000      	movs	r0, #0
{
   151aa:	460d      	mov	r5, r1
   151ac:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   151ae:	f7fa fe55 	bl	fe5c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   151b2:	2800      	cmp	r0, #0
   151b4:	f040 8099 	bne.w	152ea <ll_rl_add+0x14a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   151b8:	46b1      	mov	r9, r6
   151ba:	f10d 020f 	add.w	r2, sp, #15
   151be:	f819 0b01 	ldrb.w	r0, [r9], #1
   151c2:	4649      	mov	r1, r9
   151c4:	f7ff ff4c 	bl	15060 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   151c8:	2807      	cmp	r0, #7
   151ca:	f240 80a0 	bls.w	1530e <ll_rl_add+0x16e>
	} else if (j >= ARRAY_SIZE(rl)) {
   151ce:	f89d 800f 	ldrb.w	r8, [sp, #15]
   151d2:	f1b8 0f07 	cmp.w	r8, #7
   151d6:	f200 808c 	bhi.w	152f2 <ll_rl_add+0x152>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   151da:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   151de:	00d2      	lsls	r2, r2, #3
   151e0:	4c4d      	ldr	r4, [pc, #308]	; (15318 <ll_rl_add+0x178>)
   151e2:	f8d9 1000 	ldr.w	r1, [r9]
   151e6:	9201      	str	r2, [sp, #4]
   151e8:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   151ea:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   151ee:	50e1      	str	r1, [r4, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   151f0:	4423      	add	r3, r4
   151f2:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   151f6:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   151f8:	7831      	ldrb	r1, [r6, #0]
   151fa:	f814 303a 	ldrb.w	r3, [r4, sl, lsl #3]
   151fe:	4693      	mov	fp, r2
   15200:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15204:	4628      	mov	r0, r5
   15206:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   15208:	54a3      	strb	r3, [r4, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1520a:	f7f6 f9c3 	bl	b594 <mem_nz>
   1520e:	f814 300b 	ldrb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15212:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15214:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15218:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1521a:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1521e:	f7f6 f9b9 	bl	b594 <mem_nz>
   15222:	f814 300b 	ldrb.w	r3, [r4, fp]
	if (rl[i].pirk) {
   15226:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15228:	f000 0001 	and.w	r0, r0, #1
   1522c:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   15230:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15234:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   15238:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   1523c:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   15240:	d01a      	beq.n	15278 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   15242:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 15324 <ll_rl_add+0x184>
		peer_irk_rl_ids[peer_irk_count] = i;
   15246:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 15328 <ll_rl_add+0x188>
		rl[i].pirk_idx = peer_irk_count;
   1524a:	f89e 1000 	ldrb.w	r1, [lr]
   1524e:	4b33      	ldr	r3, [pc, #204]	; (1531c <ll_rl_add+0x17c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   15250:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   15254:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   15258:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
   1525c:	3101      	adds	r1, #1
	psrc += length - 1;
   1525e:	f105 030f 	add.w	r3, r5, #15
   15262:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   15266:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1526a:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   1526c:	f813 1901 	ldrb.w	r1, [r3], #-1
   15270:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   15274:	429d      	cmp	r5, r3
   15276:	d1f9      	bne.n	1526c <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   15278:	b198      	cbz	r0, 152a2 <ll_rl_add+0x102>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1527a:	1dd3      	adds	r3, r2, #7
   1527c:	6838      	ldr	r0, [r7, #0]
   1527e:	f8d7 e004 	ldr.w	lr, [r7, #4]
   15282:	f8d7 c008 	ldr.w	ip, [r7, #8]
   15286:	68fd      	ldr	r5, [r7, #12]
   15288:	50e0      	str	r0, [r4, r3]
		rl[i].local_rpa = NULL;
   1528a:	eb0b 0108 	add.w	r1, fp, r8
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1528e:	4423      	add	r3, r4
		rl[i].local_rpa = NULL;
   15290:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   15294:	2000      	movs	r0, #0
   15296:	f8c3 e004 	str.w	lr, [r3, #4]
   1529a:	f8c3 c008 	str.w	ip, [r3, #8]
   1529e:	60dd      	str	r5, [r3, #12]
   152a0:	6248      	str	r0, [r1, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   152a2:	f102 0318 	add.w	r3, r2, #24
   152a6:	18e2      	adds	r2, r4, r3
__ssp_bos_icheck3(memset, void *, int)
   152a8:	2700      	movs	r7, #0
   152aa:	50e7      	str	r7, [r4, r3]
   152ac:	eb0b 0508 	add.w	r5, fp, r8
   152b0:	8097      	strh	r7, [r2, #4]
	rl[i].rpas_ready = 0U;
   152b2:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   152b6:	00ed      	lsls	r5, r5, #3
   152b8:	f023 0312 	bic.w	r3, r3, #18
   152bc:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   152be:	4649      	mov	r1, r9
   152c0:	7830      	ldrb	r0, [r6, #0]
   152c2:	463a      	mov	r2, r7
   152c4:	f7ff fb8c 	bl	149e0 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   152c8:	2807      	cmp	r0, #7
   152ca:	d916      	bls.n	152fa <ll_rl_add+0x15a>
		rl[i].wl = 0U;
   152cc:	5d63      	ldrb	r3, [r4, r5]
   152ce:	f367 1345 	bfi	r3, r7, #5, #1
   152d2:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   152d4:	44d8      	add	r8, fp
	return 0;
   152d6:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   152d8:	f814 3038 	ldrb.w	r3, [r4, r8, lsl #3]
   152dc:	f043 0301 	orr.w	r3, r3, #1
   152e0:	f804 3038 	strb.w	r3, [r4, r8, lsl #3]
}
   152e4:	b005      	add	sp, #20
   152e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   152ea:	200c      	movs	r0, #12
}
   152ec:	b005      	add	sp, #20
   152ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   152f2:	2007      	movs	r0, #7
}
   152f4:	b005      	add	sp, #20
   152f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   152fa:	4a09      	ldr	r2, [pc, #36]	; (15320 <ll_rl_add+0x180>)
		rl[i].wl = 1U;
   152fc:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   152fe:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   15302:	f043 0320 	orr.w	r3, r3, #32
   15306:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   15308:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1U;
   1530c:	e7e2      	b.n	152d4 <ll_rl_add+0x134>
		return BT_HCI_ERR_INVALID_PARAM;
   1530e:	2012      	movs	r0, #18
}
   15310:	b005      	add	sp, #20
   15312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15316:	bf00      	nop
   15318:	20003734 	.word	0x20003734
   1531c:	200036b4 	.word	0x200036b4
   15320:	200038ac 	.word	0x200038ac
   15324:	20008627 	.word	0x20008627
   15328:	200036ac 	.word	0x200036ac

0001532c <ll_rl_remove>:
{
   1532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15330:	b083      	sub	sp, #12
   15332:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15334:	2000      	movs	r0, #0
{
   15336:	9500      	str	r5, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15338:	f7fa fd90 	bl	fe5c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1533c:	2800      	cmp	r0, #0
   1533e:	d160      	bne.n	15402 <ll_rl_remove+0xd6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15340:	462f      	mov	r7, r5
   15342:	4602      	mov	r2, r0
   15344:	4604      	mov	r4, r0
   15346:	f817 0b01 	ldrb.w	r0, [r7], #1
   1534a:	9500      	str	r5, [sp, #0]
   1534c:	4639      	mov	r1, r7
   1534e:	f7ff fe87 	bl	15060 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15352:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15354:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   15356:	d903      	bls.n	15360 <ll_rl_remove+0x34>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15358:	2002      	movs	r0, #2
}
   1535a:	b003      	add	sp, #12
   1535c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   15360:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 15420 <ll_rl_remove+0xf4>
   15364:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   15368:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   1536c:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   15370:	075d      	lsls	r5, r3, #29
   15372:	ea4f 0980 	mov.w	r9, r0, lsl #2
   15376:	d52c      	bpl.n	153d2 <ll_rl_remove+0xa6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15378:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 15424 <ll_rl_remove+0xf8>
   1537c:	f89e c000 	ldrb.w	ip, [lr]
   15380:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   15384:	f01c 0bff 	ands.w	fp, ip, #255	; 0xff
   15388:	d021      	beq.n	153ce <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1538a:	7dd3      	ldrb	r3, [r2, #23]
   1538c:	9301      	str	r3, [sp, #4]
			if (pj && pi != pj) {
   1538e:	455b      	cmp	r3, fp
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15390:	461d      	mov	r5, r3
			if (pj && pi != pj) {
   15392:	d01c      	beq.n	153ce <ll_rl_remove+0xa2>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   15394:	f8df a090 	ldr.w	sl, [pc, #144]	; 15428 <ll_rl_remove+0xfc>
   15398:	eb0a 130b 	add.w	r3, sl, fp, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1539c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1539e:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
   153a2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   153a6:	9d00      	ldr	r5, [sp, #0]
					if (rl[k].taken && rl[k].pirk &&
   153a8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   153ac:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   153b0:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   153b4:	07d8      	lsls	r0, r3, #31
   153b6:	b2e1      	uxtb	r1, r4
   153b8:	f104 0401 	add.w	r4, r4, #1
   153bc:	d504      	bpl.n	153c8 <ll_rl_remove+0x9c>
   153be:	075b      	lsls	r3, r3, #29
   153c0:	d502      	bpl.n	153c8 <ll_rl_remove+0x9c>
   153c2:	7dd3      	ldrb	r3, [r2, #23]
   153c4:	455b      	cmp	r3, fp
   153c6:	d020      	beq.n	1540a <ll_rl_remove+0xde>
				for (k = 0U;
   153c8:	2c08      	cmp	r4, #8
   153ca:	d1ed      	bne.n	153a8 <ll_rl_remove+0x7c>
   153cc:	9500      	str	r5, [sp, #0]
			peer_irk_count--;
   153ce:	f88e c000 	strb.w	ip, [lr]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   153d2:	9b00      	ldr	r3, [sp, #0]
   153d4:	4639      	mov	r1, r7
   153d6:	7818      	ldrb	r0, [r3, #0]
   153d8:	2200      	movs	r2, #0
   153da:	f7ff fb01 	bl	149e0 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   153de:	2807      	cmp	r0, #7
   153e0:	d804      	bhi.n	153ec <ll_rl_remove+0xc0>
			wl[j].rl_idx = FILTER_IDX_NONE;
   153e2:	4b0d      	ldr	r3, [pc, #52]	; (15418 <ll_rl_remove+0xec>)
   153e4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   153e8:	23ff      	movs	r3, #255	; 0xff
   153ea:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   153ec:	444e      	add	r6, r9
		return 0;
   153ee:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   153f0:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   153f4:	f36f 0300 	bfc	r3, #0, #1
   153f8:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   153fc:	b003      	add	sp, #12
   153fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15402:	200c      	movs	r0, #12
}
   15404:	b003      	add	sp, #12
   15406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   1540a:	9801      	ldr	r0, [sp, #4]
						peer_irk_rl_ids[pi] = k;
   1540c:	4b03      	ldr	r3, [pc, #12]	; (1541c <ll_rl_remove+0xf0>)
   1540e:	9500      	str	r5, [sp, #0]
   15410:	5419      	strb	r1, [r3, r0]
						rl[k].pirk_idx = pi;
   15412:	75d0      	strb	r0, [r2, #23]
						break;
   15414:	e7db      	b.n	153ce <ll_rl_remove+0xa2>
   15416:	bf00      	nop
   15418:	200038ac 	.word	0x200038ac
   1541c:	200036ac 	.word	0x200036ac
   15420:	20003734 	.word	0x20003734
   15424:	20008627 	.word	0x20008627
   15428:	200036b4 	.word	0x200036b4

0001542c <ll_rl_crpa_set>:
{
   1542c:	b538      	push	{r3, r4, r5, lr}
   1542e:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   15430:	795b      	ldrb	r3, [r3, #5]
   15432:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15436:	2b40      	cmp	r3, #64	; 0x40
   15438:	d000      	beq.n	1543c <ll_rl_crpa_set+0x10>
}
   1543a:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   1543c:	b119      	cbz	r1, 15446 <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   1543e:	2200      	movs	r2, #0
   15440:	f7ff fe0e 	bl	15060 <ull_filter_rl_find>
   15444:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   15446:	2a07      	cmp	r2, #7
   15448:	d8f7      	bhi.n	1543a <ll_rl_crpa_set+0xe>
   1544a:	4b08      	ldr	r3, [pc, #32]	; (1546c <ll_rl_crpa_set+0x40>)
   1544c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   15450:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   15454:	07c9      	lsls	r1, r1, #31
   15456:	d5f0      	bpl.n	1543a <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15458:	2028      	movs	r0, #40	; 0x28
   1545a:	2118      	movs	r1, #24
   1545c:	fb10 1202 	smlabb	r2, r0, r2, r1
   15460:	6820      	ldr	r0, [r4, #0]
   15462:	5098      	str	r0, [r3, r2]
   15464:	4413      	add	r3, r2
   15466:	88a2      	ldrh	r2, [r4, #4]
   15468:	809a      	strh	r2, [r3, #4]
}
   1546a:	bd38      	pop	{r3, r4, r5, pc}
   1546c:	20003734 	.word	0x20003734

00015470 <ll_rl_crpa_get>:
{
   15470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15472:	4603      	mov	r3, r0
{
   15474:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15476:	f813 0b01 	ldrb.w	r0, [r3], #1
   1547a:	2200      	movs	r2, #0
   1547c:	4619      	mov	r1, r3
   1547e:	f7ff fdef 	bl	15060 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   15482:	2807      	cmp	r0, #7
   15484:	d901      	bls.n	1548a <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15486:	2002      	movs	r0, #2
}
   15488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1548a:	4f09      	ldr	r7, [pc, #36]	; (154b0 <ll_rl_crpa_get+0x40>)
   1548c:	2428      	movs	r4, #40	; 0x28
   1548e:	2318      	movs	r3, #24
   15490:	fb14 3400 	smlabb	r4, r4, r0, r3
   15494:	193e      	adds	r6, r7, r4
   15496:	4630      	mov	r0, r6
   15498:	2106      	movs	r1, #6
   1549a:	f7f6 f87b 	bl	b594 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1549e:	2800      	cmp	r0, #0
   154a0:	d0f1      	beq.n	15486 <ll_rl_crpa_get+0x16>
   154a2:	5938      	ldr	r0, [r7, r4]
   154a4:	6028      	str	r0, [r5, #0]
   154a6:	88b3      	ldrh	r3, [r6, #4]
   154a8:	80ab      	strh	r3, [r5, #4]
		return 0;
   154aa:	2000      	movs	r0, #0
}
   154ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   154ae:	bf00      	nop
   154b0:	20003734 	.word	0x20003734

000154b4 <ll_rl_lrpa_get>:
{
   154b4:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   154b6:	4603      	mov	r3, r0
{
   154b8:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   154ba:	f813 0b01 	ldrb.w	r0, [r3], #1
   154be:	2200      	movs	r2, #0
   154c0:	4619      	mov	r1, r3
   154c2:	f7ff fdcd 	bl	15060 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   154c6:	2807      	cmp	r0, #7
   154c8:	d901      	bls.n	154ce <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   154ca:	2002      	movs	r0, #2
}
   154cc:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   154ce:	4b06      	ldr	r3, [pc, #24]	; (154e8 <ll_rl_lrpa_get+0x34>)
   154d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   154d4:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		return 0;
   154d8:	2000      	movs	r0, #0
   154da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   154dc:	681a      	ldr	r2, [r3, #0]
   154de:	6022      	str	r2, [r4, #0]
   154e0:	889b      	ldrh	r3, [r3, #4]
   154e2:	80a3      	strh	r3, [r4, #4]
}
   154e4:	bd10      	pop	{r4, pc}
   154e6:	bf00      	nop
   154e8:	20003734 	.word	0x20003734

000154ec <ll_priv_mode_set>:
{
   154ec:	b570      	push	{r4, r5, r6, lr}
   154ee:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   154f0:	2000      	movs	r0, #0
{
   154f2:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   154f4:	f7fa fcb2 	bl	fe5c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   154f8:	b968      	cbnz	r0, 15516 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   154fa:	4629      	mov	r1, r5
   154fc:	4602      	mov	r2, r0
   154fe:	4604      	mov	r4, r0
   15500:	f811 0b01 	ldrb.w	r0, [r1], #1
   15504:	f7ff fdac 	bl	15060 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15508:	2807      	cmp	r0, #7
   1550a:	d81c      	bhi.n	15546 <ll_priv_mode_set+0x5a>
		switch (mode) {
   1550c:	b186      	cbz	r6, 15530 <ll_priv_mode_set+0x44>
   1550e:	2e01      	cmp	r6, #1
   15510:	d003      	beq.n	1551a <ll_priv_mode_set+0x2e>
   15512:	2012      	movs	r0, #18
}
   15514:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15516:	200c      	movs	r0, #12
}
   15518:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   1551a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1551e:	490b      	ldr	r1, [pc, #44]	; (1554c <ll_priv_mode_set+0x60>)
   15520:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   15524:	f042 0210 	orr.w	r2, r2, #16
   15528:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   1552c:	4620      	mov	r0, r4
}
   1552e:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   15530:	4b06      	ldr	r3, [pc, #24]	; (1554c <ll_priv_mode_set+0x60>)
   15532:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15536:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   1553a:	f366 1204 	bfi	r2, r6, #4, #1
   1553e:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   15542:	4630      	mov	r0, r6
}
   15544:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15546:	2002      	movs	r0, #2
}
   15548:	bd70      	pop	{r4, r5, r6, pc}
   1554a:	bf00      	nop
   1554c:	20003734 	.word	0x20003734

00015550 <ull_filter_reset>:
	wl_anon = 0U;
   15550:	4a33      	ldr	r2, [pc, #204]	; (15620 <ull_filter_reset+0xd0>)
   15552:	4934      	ldr	r1, [pc, #208]	; (15624 <ull_filter_reset+0xd4>)
{
   15554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   15556:	2300      	movs	r3, #0
   15558:	4c33      	ldr	r4, [pc, #204]	; (15628 <ull_filter_reset+0xd8>)
   1555a:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1555c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   15560:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   15562:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   15564:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   15568:	d805      	bhi.n	15576 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1556a:	f814 2035 	ldrb.w	r2, [r4, r5, lsl #3]
   1556e:	f36f 1245 	bfc	r2, #5, #1
   15572:	f804 2035 	strb.w	r2, [r4, r5, lsl #3]
		wl[i].taken = 0U;
   15576:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1557a:	f36f 0200 	bfc	r2, #0, #1
   1557e:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   15582:	3301      	adds	r3, #1
   15584:	2b08      	cmp	r3, #8
   15586:	d1e9      	bne.n	1555c <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   15588:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   1558c:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   15590:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15594:	7827      	ldrb	r7, [r4, #0]
   15596:	f894 60a0 	ldrb.w	r6, [r4, #160]	; 0xa0
	rl_enable = 0U;
   1559a:	2100      	movs	r1, #0
		rl[i].taken = 0U;
   1559c:	f361 0500 	bfi	r5, r1, #0, #1
   155a0:	f361 0200 	bfi	r2, r1, #0, #1
   155a4:	f361 0300 	bfi	r3, r1, #0, #1
   155a8:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
   155ac:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   155b0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   155b4:	f361 0700 	bfi	r7, r1, #0, #1
   155b8:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   155bc:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   155c0:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   155c4:	7027      	strb	r7, [r4, #0]
   155c6:	f361 0500 	bfi	r5, r1, #0, #1
	rl_enable = 0U;
   155ca:	4f18      	ldr	r7, [pc, #96]	; (1562c <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   155cc:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
   155d0:	f361 0200 	bfi	r2, r1, #0, #1
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   155d4:	4d16      	ldr	r5, [pc, #88]	; (15630 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   155d6:	7039      	strb	r1, [r7, #0]
		rl[i].taken = 0U;
   155d8:	f361 0300 	bfi	r3, r1, #0, #1
   155dc:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
   155e0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   155e4:	4f13      	ldr	r7, [pc, #76]	; (15634 <ull_filter_reset+0xe4>)
	rpa_last_ms = -1;
   155e6:	4a14      	ldr	r2, [pc, #80]	; (15638 <ull_filter_reset+0xe8>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   155e8:	4b14      	ldr	r3, [pc, #80]	; (1563c <ull_filter_reset+0xec>)
   155ea:	602b      	str	r3, [r5, #0]
		rl[i].taken = 0U;
   155ec:	f361 0600 	bfi	r6, r1, #0, #1
   155f0:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
	rpa_last_ms = -1;
   155f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   155f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   155fc:	e9c2 4500 	strd	r4, r5, [r2]
	peer_irk_count = 0U;
   15600:	7039      	strb	r1, [r7, #0]
	if (init) {
   15602:	b138      	cbz	r0, 15614 <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   15604:	4b0e      	ldr	r3, [pc, #56]	; (15640 <ull_filter_reset+0xf0>)
   15606:	2230      	movs	r2, #48	; 0x30
   15608:	4618      	mov	r0, r3
   1560a:	f016 f8f3 	bl	2b7f4 <memset>
   1560e:	4a0d      	ldr	r2, [pc, #52]	; (15644 <ull_filter_reset+0xf4>)
   15610:	6042      	str	r2, [r0, #4]
}
   15612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15614:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		k_delayed_work_cancel(&rpa_work);
   15618:	4809      	ldr	r0, [pc, #36]	; (15640 <ull_filter_reset+0xf0>)
   1561a:	f015 be8b 	b.w	2b334 <k_delayed_work_cancel>
   1561e:	bf00      	nop
   15620:	20008629 	.word	0x20008629
   15624:	200038ac 	.word	0x200038ac
   15628:	20003734 	.word	0x20003734
   1562c:	20008628 	.word	0x20008628
   15630:	200038a8 	.word	0x200038a8
   15634:	20008627 	.word	0x20008627
   15638:	20001310 	.word	0x20001310
   1563c:	000dbba0 	.word	0x000dbba0
   15640:	20001318 	.word	0x20001318
   15644:	00014f95 	.word	0x00014f95

00015648 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   15648:	2807      	cmp	r0, #7
   1564a:	d807      	bhi.n	1565c <ull_filter_lll_lrpa_used+0x14>
   1564c:	4b04      	ldr	r3, [pc, #16]	; (15660 <ull_filter_lll_lrpa_used+0x18>)
   1564e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   15652:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   15656:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1565a:	4770      	bx	lr
   1565c:	2000      	movs	r0, #0
}
   1565e:	4770      	bx	lr
   15660:	20003734 	.word	0x20003734

00015664 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   15664:	4b02      	ldr	r3, [pc, #8]	; (15670 <ull_filter_lll_irks_get+0xc>)
   15666:	781b      	ldrb	r3, [r3, #0]
   15668:	7003      	strb	r3, [r0, #0]
}
   1566a:	4802      	ldr	r0, [pc, #8]	; (15674 <ull_filter_lll_irks_get+0x10>)
   1566c:	4770      	bx	lr
   1566e:	bf00      	nop
   15670:	20008627 	.word	0x20008627
   15674:	200036b4 	.word	0x200036b4

00015678 <ull_filter_lll_rl_irk_idx>:
{
   15678:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1567a:	4b20      	ldr	r3, [pc, #128]	; (156fc <ull_filter_lll_rl_irk_idx+0x84>)
   1567c:	781b      	ldrb	r3, [r3, #0]
   1567e:	4283      	cmp	r3, r0
{
   15680:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   15682:	d90c      	bls.n	1569e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   15684:	4b1e      	ldr	r3, [pc, #120]	; (15700 <ull_filter_lll_rl_irk_idx+0x88>)
   15686:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   15688:	2c07      	cmp	r4, #7
   1568a:	d819      	bhi.n	156c0 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1568c:	4b1d      	ldr	r3, [pc, #116]	; (15704 <ull_filter_lll_rl_irk_idx+0x8c>)
   1568e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15692:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   15696:	07db      	lsls	r3, r3, #31
   15698:	d520      	bpl.n	156dc <ull_filter_lll_rl_irk_idx+0x64>
}
   1569a:	4620      	mov	r0, r4
   1569c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1569e:	4a1a      	ldr	r2, [pc, #104]	; (15708 <ull_filter_lll_rl_irk_idx+0x90>)
   156a0:	491a      	ldr	r1, [pc, #104]	; (1570c <ull_filter_lll_rl_irk_idx+0x94>)
   156a2:	481b      	ldr	r0, [pc, #108]	; (15710 <ull_filter_lll_rl_irk_idx+0x98>)
   156a4:	f240 23b9 	movw	r3, #697	; 0x2b9
   156a8:	f00d fbad 	bl	22e06 <printk>
   156ac:	4040      	eors	r0, r0
   156ae:	f380 8811 	msr	BASEPRI, r0
   156b2:	f04f 0003 	mov.w	r0, #3
   156b6:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   156b8:	4b11      	ldr	r3, [pc, #68]	; (15700 <ull_filter_lll_rl_irk_idx+0x88>)
   156ba:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   156bc:	2c07      	cmp	r4, #7
   156be:	d9e5      	bls.n	1568c <ull_filter_lll_rl_irk_idx+0x14>
   156c0:	4a11      	ldr	r2, [pc, #68]	; (15708 <ull_filter_lll_rl_irk_idx+0x90>)
   156c2:	4914      	ldr	r1, [pc, #80]	; (15714 <ull_filter_lll_rl_irk_idx+0x9c>)
   156c4:	4812      	ldr	r0, [pc, #72]	; (15710 <ull_filter_lll_rl_irk_idx+0x98>)
   156c6:	f240 23bb 	movw	r3, #699	; 0x2bb
   156ca:	f00d fb9c 	bl	22e06 <printk>
   156ce:	4040      	eors	r0, r0
   156d0:	f380 8811 	msr	BASEPRI, r0
   156d4:	f04f 0003 	mov.w	r0, #3
   156d8:	df02      	svc	2
   156da:	e7d7      	b.n	1568c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   156dc:	4a0a      	ldr	r2, [pc, #40]	; (15708 <ull_filter_lll_rl_irk_idx+0x90>)
   156de:	490e      	ldr	r1, [pc, #56]	; (15718 <ull_filter_lll_rl_irk_idx+0xa0>)
   156e0:	480b      	ldr	r0, [pc, #44]	; (15710 <ull_filter_lll_rl_irk_idx+0x98>)
   156e2:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   156e6:	f00d fb8e 	bl	22e06 <printk>
   156ea:	4040      	eors	r0, r0
   156ec:	f380 8811 	msr	BASEPRI, r0
   156f0:	f04f 0003 	mov.w	r0, #3
   156f4:	df02      	svc	2
}
   156f6:	4620      	mov	r0, r4
   156f8:	bd10      	pop	{r4, pc}
   156fa:	bf00      	nop
   156fc:	20008627 	.word	0x20008627
   15700:	200036ac 	.word	0x200036ac
   15704:	20003734 	.word	0x20003734
   15708:	0002cdc4 	.word	0x0002cdc4
   1570c:	0002cfa8 	.word	0x0002cfa8
   15710:	0002c630 	.word	0x0002c630
   15714:	0002cfc8 	.word	0x0002cfc8
   15718:	0002cf9c 	.word	0x0002cf9c

0001571c <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1571c:	2807      	cmp	r0, #7
   1571e:	d823      	bhi.n	15768 <ull_filter_lll_irk_whitelisted+0x4c>
{
   15720:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   15722:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   15726:	4e11      	ldr	r6, [pc, #68]	; (1576c <ull_filter_lll_irk_whitelisted+0x50>)
   15728:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1572c:	07db      	lsls	r3, r3, #31
   1572e:	4604      	mov	r4, r0
   15730:	ea4f 0580 	mov.w	r5, r0, lsl #2
   15734:	d505      	bpl.n	15742 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   15736:	442c      	add	r4, r5
   15738:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1573c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   15740:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   15742:	4a0b      	ldr	r2, [pc, #44]	; (15770 <ull_filter_lll_irk_whitelisted+0x54>)
   15744:	490b      	ldr	r1, [pc, #44]	; (15774 <ull_filter_lll_irk_whitelisted+0x58>)
   15746:	480c      	ldr	r0, [pc, #48]	; (15778 <ull_filter_lll_irk_whitelisted+0x5c>)
   15748:	f240 23c7 	movw	r3, #711	; 0x2c7
   1574c:	f00d fb5b 	bl	22e06 <printk>
   15750:	4040      	eors	r0, r0
   15752:	f380 8811 	msr	BASEPRI, r0
   15756:	f04f 0003 	mov.w	r0, #3
   1575a:	df02      	svc	2
	return rl[rl_idx].wl;
   1575c:	442c      	add	r4, r5
   1575e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   15762:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   15766:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   15768:	2000      	movs	r0, #0
}
   1576a:	4770      	bx	lr
   1576c:	20003734 	.word	0x20003734
   15770:	0002cdc4 	.word	0x0002cdc4
   15774:	0002ce14 	.word	0x0002ce14
   15778:	0002c630 	.word	0x0002c630

0001577c <ull_filter_lll_get>:
		return &wl_filter;
   1577c:	4a03      	ldr	r2, [pc, #12]	; (1578c <ull_filter_lll_get+0x10>)
   1577e:	4b04      	ldr	r3, [pc, #16]	; (15790 <ull_filter_lll_get+0x14>)
}
   15780:	2800      	cmp	r0, #0
   15782:	bf0c      	ite	eq
   15784:	4610      	moveq	r0, r2
   15786:	4618      	movne	r0, r3
   15788:	4770      	bx	lr
   1578a:	bf00      	nop
   1578c:	20003874 	.word	0x20003874
   15790:	200038ec 	.word	0x200038ec

00015794 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   15794:	4b1c      	ldr	r3, [pc, #112]	; (15808 <ull_filter_lll_rl_addr_allowed+0x74>)
   15796:	781b      	ldrb	r3, [r3, #0]
   15798:	b1fb      	cbz	r3, 157da <ull_filter_lll_rl_addr_allowed+0x46>
   1579a:	7813      	ldrb	r3, [r2, #0]
   1579c:	2bff      	cmp	r3, #255	; 0xff
   1579e:	d11c      	bne.n	157da <ull_filter_lll_rl_addr_allowed+0x46>
{
   157a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   157a4:	4d19      	ldr	r5, [pc, #100]	; (1580c <ull_filter_lll_rl_addr_allowed+0x78>)
   157a6:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   157a8:	2300      	movs	r3, #0
   157aa:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   157ac:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   157b0:	fa5f fe83 	uxtb.w	lr, r3
   157b4:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   157b8:	f014 0001 	ands.w	r0, r4, #1
   157bc:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   157c0:	d003      	beq.n	157ca <ull_filter_lll_rl_addr_allowed+0x36>
   157c2:	f3c4 1480 	ubfx	r4, r4, #6, #1
   157c6:	42b4      	cmp	r4, r6
   157c8:	d009      	beq.n	157de <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   157ca:	3301      	adds	r3, #1
   157cc:	2b08      	cmp	r3, #8
   157ce:	f105 0528 	add.w	r5, r5, #40	; 0x28
   157d2:	d1eb      	bne.n	157ac <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   157d4:	2001      	movs	r0, #1
}
   157d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   157da:	2001      	movs	r0, #1
}
   157dc:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   157de:	1fac      	subs	r4, r5, #6
   157e0:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   157e4:	f814 af01 	ldrb.w	sl, [r4, #1]!
   157e8:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   157ec:	45ca      	cmp	sl, r9
   157ee:	d1ec      	bne.n	157ca <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   157f0:	42ac      	cmp	r4, r5
   157f2:	d1f7      	bne.n	157e4 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   157f4:	4463      	add	r3, ip
				*rl_idx = i;
   157f6:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   157fa:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   157fe:	075a      	lsls	r2, r3, #29
   15800:	d5e9      	bpl.n	157d6 <ull_filter_lll_rl_addr_allowed+0x42>
   15802:	f3c3 1000 	ubfx	r0, r3, #4, #1
   15806:	e7e6      	b.n	157d6 <ull_filter_lll_rl_addr_allowed+0x42>
   15808:	20008628 	.word	0x20008628
   1580c:	2000373a 	.word	0x2000373a

00015810 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   15810:	4b02      	ldr	r3, [pc, #8]	; (1581c <ull_filter_lll_rl_enabled+0xc>)
   15812:	7818      	ldrb	r0, [r3, #0]
}
   15814:	3800      	subs	r0, #0
   15816:	bf18      	it	ne
   15818:	2001      	movne	r0, #1
   1581a:	4770      	bx	lr
   1581c:	20008628 	.word	0x20008628

00015820 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   15820:	4668      	mov	r0, sp
   15822:	f020 0107 	bic.w	r1, r0, #7
   15826:	468d      	mov	sp, r1
   15828:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1582a:	f001 ff87 	bl	1773c <isr_radio>

	ISR_DIRECT_PM();
   1582e:	f7ee fe5d 	bl	44ec <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   15832:	f7ef f969 	bl	4b08 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   15836:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1583a:	4685      	mov	sp, r0
   1583c:	4770      	bx	lr
   1583e:	bf00      	nop

00015840 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   15840:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   15842:	4b09      	ldr	r3, [pc, #36]	; (15868 <rtc0_nrf5_isr+0x28>)
   15844:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   15848:	b93a      	cbnz	r2, 1585a <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1584a:	2001      	movs	r0, #1
   1584c:	f7f5 ff84 	bl	b758 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   15850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   15854:	2002      	movs	r0, #2
   15856:	f7f5 bf7f 	b.w	b758 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1585a:	2000      	movs	r0, #0
   1585c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   15860:	f7f7 f90e 	bl	ca80 <ticker_trigger>
   15864:	e7f1      	b.n	1584a <rtc0_nrf5_isr+0xa>
   15866:	bf00      	nop
   15868:	4000b000 	.word	0x4000b000

0001586c <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1586c:	2000      	movs	r0, #0
   1586e:	f7f5 bf73 	b.w	b758 <mayfly_run>
   15872:	bf00      	nop

00015874 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   15874:	f002 b882 	b.w	1797c <radio_status_reset>

00015878 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   15878:	2801      	cmp	r0, #1
   1587a:	d800      	bhi.n	1587e <ticker_stop_op_cb+0x6>
   1587c:	4770      	bx	lr
{
   1587e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   15880:	4a06      	ldr	r2, [pc, #24]	; (1589c <ticker_stop_op_cb+0x24>)
   15882:	4907      	ldr	r1, [pc, #28]	; (158a0 <ticker_stop_op_cb+0x28>)
   15884:	4807      	ldr	r0, [pc, #28]	; (158a4 <ticker_stop_op_cb+0x2c>)
   15886:	f240 23a3 	movw	r3, #675	; 0x2a3
   1588a:	f00d fabc 	bl	22e06 <printk>
   1588e:	4040      	eors	r0, r0
   15890:	f380 8811 	msr	BASEPRI, r0
   15894:	f04f 0003 	mov.w	r0, #3
   15898:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1589a:	bd08      	pop	{r3, pc}
   1589c:	0002cfe4 	.word	0x0002cfe4
   158a0:	0002d02c 	.word	0x0002d02c
   158a4:	0002c630 	.word	0x0002c630

000158a8 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   158a8:	2801      	cmp	r0, #1
   158aa:	d800      	bhi.n	158ae <ticker_start_op_cb+0x6>
   158ac:	4770      	bx	lr
{
   158ae:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   158b0:	4a06      	ldr	r2, [pc, #24]	; (158cc <ticker_start_op_cb+0x24>)
   158b2:	4907      	ldr	r1, [pc, #28]	; (158d0 <ticker_start_op_cb+0x28>)
   158b4:	4807      	ldr	r0, [pc, #28]	; (158d4 <ticker_start_op_cb+0x2c>)
   158b6:	f240 23ae 	movw	r3, #686	; 0x2ae
   158ba:	f00d faa4 	bl	22e06 <printk>
   158be:	4040      	eors	r0, r0
   158c0:	f380 8811 	msr	BASEPRI, r0
   158c4:	f04f 0003 	mov.w	r0, #3
   158c8:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   158ca:	bd08      	pop	{r3, pc}
   158cc:	0002cfe4 	.word	0x0002cfe4
   158d0:	0002d02c 	.word	0x0002d02c
   158d4:	0002c630 	.word	0x0002c630

000158d8 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   158d8:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   158da:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   158dc:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   158de:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   158e0:	4c15      	ldr	r4, [pc, #84]	; (15938 <preempt_ticker_start.isra.0+0x60>)
   158e2:	4916      	ldr	r1, [pc, #88]	; (1593c <preempt_ticker_start.isra.0+0x64>)
   158e4:	9208      	str	r2, [sp, #32]
   158e6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   158ea:	e9cd 2201 	strd	r2, r2, [sp, #4]
   158ee:	9206      	str	r2, [sp, #24]
   158f0:	9407      	str	r4, [sp, #28]
   158f2:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   158f4:	e9d3 5400 	ldrd	r5, r4, [r3]
   158f8:	6899      	ldr	r1, [r3, #8]
   158fa:	42a5      	cmp	r5, r4
   158fc:	bf2c      	ite	cs
   158fe:	ebc1 0105 	rsbcs	r1, r1, r5
   15902:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   15906:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   15908:	9100      	str	r1, [sp, #0]
   1590a:	4610      	mov	r0, r2
   1590c:	4611      	mov	r1, r2
   1590e:	f7f7 f925 	bl	cb5c <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   15912:	2802      	cmp	r0, #2
   15914:	d801      	bhi.n	1591a <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   15916:	b00b      	add	sp, #44	; 0x2c
   15918:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1591a:	4a09      	ldr	r2, [pc, #36]	; (15940 <preempt_ticker_start.isra.0+0x68>)
   1591c:	4909      	ldr	r1, [pc, #36]	; (15944 <preempt_ticker_start.isra.0+0x6c>)
   1591e:	480a      	ldr	r0, [pc, #40]	; (15948 <preempt_ticker_start.isra.0+0x70>)
   15920:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   15924:	f00d fa6f 	bl	22e06 <printk>
   15928:	4040      	eors	r0, r0
   1592a:	f380 8811 	msr	BASEPRI, r0
   1592e:	f04f 0003 	mov.w	r0, #3
   15932:	df02      	svc	2
}
   15934:	b00b      	add	sp, #44	; 0x2c
   15936:	bd30      	pop	{r4, r5, pc}
   15938:	000158a9 	.word	0x000158a9
   1593c:	00015b9d 	.word	0x00015b9d
   15940:	0002cfe4 	.word	0x0002cfe4
   15944:	0002d04c 	.word	0x0002d04c
   15948:	0002c630 	.word	0x0002c630

0001594c <prepare>:
{
   1594c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15950:	b085      	sub	sp, #20
   15952:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   15954:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   15958:	f10d 000f 	add.w	r0, sp, #15
{
   1595c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15960:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   15964:	f88d c00f 	strb.w	ip, [sp, #15]
{
   15968:	460d      	mov	r5, r1
   1596a:	4616      	mov	r6, r2
   1596c:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1596e:	f7f9 febb 	bl	f6e8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   15972:	b918      	cbnz	r0, 1597c <prepare+0x30>
   15974:	e01e      	b.n	159b4 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   15976:	f7f9 feb7 	bl	f6e8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1597a:	b1d8      	cbz	r0, 159b4 <prepare+0x68>
   1597c:	f890 3020 	ldrb.w	r3, [r0, #32]
   15980:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   15982:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   15986:	d1f6      	bne.n	15976 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   15988:	4b2d      	ldr	r3, [pc, #180]	; (15a40 <prepare+0xf4>)
   1598a:	689a      	ldr	r2, [r3, #8]
   1598c:	b9aa      	cbnz	r2, 159ba <prepare+0x6e>
   1598e:	f1b9 0f00 	cmp.w	r9, #0
   15992:	d036      	beq.n	15a02 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   15994:	2201      	movs	r2, #1
   15996:	9201      	str	r2, [sp, #4]
   15998:	9700      	str	r7, [sp, #0]
   1599a:	4633      	mov	r3, r6
   1599c:	4629      	mov	r1, r5
   1599e:	4620      	mov	r0, r4
   159a0:	4642      	mov	r2, r8
   159a2:	f7f9 fe51 	bl	f648 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   159a6:	b9d8      	cbnz	r0, 159e0 <prepare+0x94>
		return -EINPROGRESS;
   159a8:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   159ac:	4620      	mov	r0, r4
   159ae:	b005      	add	sp, #20
   159b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   159b4:	4b22      	ldr	r3, [pc, #136]	; (15a40 <prepare+0xf4>)
   159b6:	689a      	ldr	r2, [r3, #8]
   159b8:	b31a      	cbz	r2, 15a02 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   159ba:	e9cd 7900 	strd	r7, r9, [sp]
   159be:	4633      	mov	r3, r6
   159c0:	4629      	mov	r1, r5
   159c2:	4620      	mov	r0, r4
   159c4:	4642      	mov	r2, r8
   159c6:	f7f9 fe3f 	bl	f648 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   159ca:	b948      	cbnz	r0, 159e0 <prepare+0x94>
		if (is_resume) {
   159cc:	f1b9 0f00 	cmp.w	r9, #0
   159d0:	d1ea      	bne.n	159a8 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   159d2:	f8d8 100c 	ldr.w	r1, [r8, #12]
   159d6:	f8d8 0000 	ldr.w	r0, [r8]
   159da:	f7ff ff7d 	bl	158d8 <preempt_ticker_start.isra.0>
   159de:	e7e3      	b.n	159a8 <prepare+0x5c>
		LL_ASSERT(!err);
   159e0:	4a18      	ldr	r2, [pc, #96]	; (15a44 <prepare+0xf8>)
   159e2:	4919      	ldr	r1, [pc, #100]	; (15a48 <prepare+0xfc>)
   159e4:	4819      	ldr	r0, [pc, #100]	; (15a4c <prepare+0x100>)
   159e6:	f44f 7312 	mov.w	r3, #584	; 0x248
   159ea:	f00d fa0c 	bl	22e06 <printk>
   159ee:	4040      	eors	r0, r0
   159f0:	f380 8811 	msr	BASEPRI, r0
   159f4:	f04f 0003 	mov.w	r0, #3
   159f8:	df02      	svc	2
		if (is_resume) {
   159fa:	f1b9 0f00 	cmp.w	r9, #0
   159fe:	d1d3      	bne.n	159a8 <prepare+0x5c>
   15a00:	e7e7      	b.n	159d2 <prepare+0x86>
	event.curr.param = prepare_param->param;
   15a02:	f8d8 200c 	ldr.w	r2, [r8, #12]
   15a06:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   15a08:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   15a0c:	4640      	mov	r0, r8
   15a0e:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15a10:	2200      	movs	r2, #0
   15a12:	4b0f      	ldr	r3, [pc, #60]	; (15a50 <prepare+0x104>)
   15a14:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   15a16:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15a18:	4611      	mov	r1, r2
   15a1a:	4610      	mov	r0, r2
   15a1c:	f7f7 f926 	bl	cc6c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   15a20:	2802      	cmp	r0, #2
   15a22:	d9c3      	bls.n	159ac <prepare+0x60>
   15a24:	4a07      	ldr	r2, [pc, #28]	; (15a44 <prepare+0xf8>)
   15a26:	490b      	ldr	r1, [pc, #44]	; (15a54 <prepare+0x108>)
   15a28:	4808      	ldr	r0, [pc, #32]	; (15a4c <prepare+0x100>)
   15a2a:	f240 2382 	movw	r3, #642	; 0x282
   15a2e:	f00d f9ea 	bl	22e06 <printk>
   15a32:	4040      	eors	r0, r0
   15a34:	f380 8811 	msr	BASEPRI, r0
   15a38:	f04f 0003 	mov.w	r0, #3
   15a3c:	df02      	svc	2
   15a3e:	e7b5      	b.n	159ac <prepare+0x60>
   15a40:	20003924 	.word	0x20003924
   15a44:	0002cfe4 	.word	0x0002cfe4
   15a48:	0002c8b0 	.word	0x0002c8b0
   15a4c:	0002c630 	.word	0x0002c630
   15a50:	00015879 	.word	0x00015879
   15a54:	0002d04c 	.word	0x0002d04c

00015a58 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   15a58:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   15a5a:	4e4b      	ldr	r6, [pc, #300]	; (15b88 <preempt+0x130>)
   15a5c:	68b3      	ldr	r3, [r6, #8]
{
   15a5e:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   15a60:	b1b3      	cbz	r3, 15a90 <preempt+0x38>
   15a62:	6833      	ldr	r3, [r6, #0]
   15a64:	b1a3      	cbz	r3, 15a90 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   15a66:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   15a68:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   15a6c:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   15a70:	f7f9 fe3a 	bl	f6e8 <ull_prepare_dequeue_iter>
	if (!next) {
   15a74:	4604      	mov	r4, r0
   15a76:	b158      	cbz	r0, 15a90 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   15a78:	f894 3020 	ldrb.w	r3, [r4, #32]
   15a7c:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   15a80:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   15a84:	d006      	beq.n	15a94 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   15a86:	f7f9 fe2f 	bl	f6e8 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   15a8a:	4604      	mov	r4, r0
   15a8c:	2800      	cmp	r0, #0
   15a8e:	d1f3      	bne.n	15a78 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   15a90:	b00b      	add	sp, #44	; 0x2c
   15a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   15a94:	ab05      	add	r3, sp, #20
   15a96:	e9d6 2700 	ldrd	r2, r7, [r6]
   15a9a:	69e1      	ldr	r1, [r4, #28]
   15a9c:	68e0      	ldr	r0, [r4, #12]
   15a9e:	9300      	str	r3, [sp, #0]
   15aa0:	ab04      	add	r3, sp, #16
   15aa2:	47b8      	blx	r7
	if (!ret) {
   15aa4:	4607      	mov	r7, r0
   15aa6:	2800      	cmp	r0, #0
   15aa8:	d062      	beq.n	15b70 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   15aaa:	68b3      	ldr	r3, [r6, #8]
   15aac:	6831      	ldr	r1, [r6, #0]
   15aae:	4628      	mov	r0, r5
   15ab0:	4798      	blx	r3
	if (ret == -EAGAIN) {
   15ab2:	f117 0f0b 	cmn.w	r7, #11
   15ab6:	d01a      	beq.n	15aee <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   15ab8:	378c      	adds	r7, #140	; 0x8c
   15aba:	d011      	beq.n	15ae0 <preempt+0x88>
   15abc:	4a33      	ldr	r2, [pc, #204]	; (15b8c <preempt+0x134>)
   15abe:	4934      	ldr	r1, [pc, #208]	; (15b90 <preempt+0x138>)
   15ac0:	4834      	ldr	r0, [pc, #208]	; (15b94 <preempt+0x13c>)
   15ac2:	f44f 7346 	mov.w	r3, #792	; 0x318
   15ac6:	f00d f99e 	bl	22e06 <printk>
   15aca:	4040      	eors	r0, r0
   15acc:	f380 8811 	msr	BASEPRI, r0
   15ad0:	f04f 0003 	mov.w	r0, #3
   15ad4:	df02      	svc	2
   15ad6:	e003      	b.n	15ae0 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   15ad8:	f890 3020 	ldrb.w	r3, [r0, #32]
   15adc:	079b      	lsls	r3, r3, #30
   15ade:	d041      	beq.n	15b64 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   15ae0:	f10d 000e 	add.w	r0, sp, #14
   15ae4:	f7f9 fe00 	bl	f6e8 <ull_prepare_dequeue_iter>
		if (!next) {
   15ae8:	2800      	cmp	r0, #0
   15aea:	d1f5      	bne.n	15ad8 <preempt+0x80>
   15aec:	e7d0      	b.n	15a90 <preempt+0x38>
		iter_idx = UINT8_MAX;
   15aee:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   15af0:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   15af4:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   15af8:	f7f9 fdf6 	bl	f6e8 <ull_prepare_dequeue_iter>
		while (iter) {
   15afc:	bb48      	cbnz	r0, 15b52 <preempt+0xfa>
	prepare_param.param = event.curr.param;
   15afe:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   15b00:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15b02:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   15b04:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15b06:	2301      	movs	r3, #1
	event.curr.param = NULL;
   15b08:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15b0a:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   15b0c:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15b0e:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   15b12:	9b04      	ldr	r3, [sp, #16]
   15b14:	aa06      	add	r2, sp, #24
   15b16:	f7f9 fd97 	bl	f648 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   15b1a:	2800      	cmp	r0, #0
   15b1c:	d0e0      	beq.n	15ae0 <preempt+0x88>
   15b1e:	4a1b      	ldr	r2, [pc, #108]	; (15b8c <preempt+0x134>)
   15b20:	491d      	ldr	r1, [pc, #116]	; (15b98 <preempt+0x140>)
   15b22:	481c      	ldr	r0, [pc, #112]	; (15b94 <preempt+0x13c>)
   15b24:	f240 3316 	movw	r3, #790	; 0x316
   15b28:	f00d f96d 	bl	22e06 <printk>
   15b2c:	4040      	eors	r0, r0
   15b2e:	f380 8811 	msr	BASEPRI, r0
   15b32:	f04f 0003 	mov.w	r0, #3
   15b36:	df02      	svc	2
   15b38:	e7d2      	b.n	15ae0 <preempt+0x88>
				iter->is_aborted = 1;
   15b3a:	f043 0302 	orr.w	r3, r3, #2
   15b3e:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   15b42:	6983      	ldr	r3, [r0, #24]
   15b44:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   15b46:	f10d 000f 	add.w	r0, sp, #15
   15b4a:	f7f9 fdcd 	bl	f6e8 <ull_prepare_dequeue_iter>
		while (iter) {
   15b4e:	2800      	cmp	r0, #0
   15b50:	d0d5      	beq.n	15afe <preempt+0xa6>
			if (!iter->is_aborted &&
   15b52:	f890 3020 	ldrb.w	r3, [r0, #32]
   15b56:	079a      	lsls	r2, r3, #30
   15b58:	d4f5      	bmi.n	15b46 <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   15b5a:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   15b5c:	6831      	ldr	r1, [r6, #0]
   15b5e:	4291      	cmp	r1, r2
   15b60:	d1f1      	bne.n	15b46 <preempt+0xee>
   15b62:	e7ea      	b.n	15b3a <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   15b64:	68c1      	ldr	r1, [r0, #12]
   15b66:	6800      	ldr	r0, [r0, #0]
   15b68:	f7ff feb6 	bl	158d8 <preempt_ticker_start.isra.0>
}
   15b6c:	b00b      	add	sp, #44	; 0x2c
   15b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   15b70:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   15b74:	69a2      	ldr	r2, [r4, #24]
   15b76:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   15b78:	f043 0302 	orr.w	r3, r3, #2
   15b7c:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   15b80:	4620      	mov	r0, r4
   15b82:	4790      	blx	r2
		goto preempt_next;
   15b84:	e7ac      	b.n	15ae0 <preempt+0x88>
   15b86:	bf00      	nop
   15b88:	20003924 	.word	0x20003924
   15b8c:	0002cfe4 	.word	0x0002cfe4
   15b90:	0002d074 	.word	0x0002d074
   15b94:	0002c630 	.word	0x0002c630
   15b98:	0002c8bc 	.word	0x0002c8bc

00015b9c <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15b9c:	2200      	movs	r2, #0
{
   15b9e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15ba0:	4611      	mov	r1, r2
   15ba2:	4b0a      	ldr	r3, [pc, #40]	; (15bcc <preempt_ticker_cb+0x30>)
   15ba4:	2001      	movs	r0, #1
   15ba6:	f7f5 fd83 	bl	b6b0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15baa:	b900      	cbnz	r0, 15bae <preempt_ticker_cb+0x12>
}
   15bac:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   15bae:	4a08      	ldr	r2, [pc, #32]	; (15bd0 <preempt_ticker_cb+0x34>)
   15bb0:	4908      	ldr	r1, [pc, #32]	; (15bd4 <preempt_ticker_cb+0x38>)
   15bb2:	4809      	ldr	r0, [pc, #36]	; (15bd8 <preempt_ticker_cb+0x3c>)
   15bb4:	f240 23da 	movw	r3, #730	; 0x2da
   15bb8:	f00d f925 	bl	22e06 <printk>
   15bbc:	4040      	eors	r0, r0
   15bbe:	f380 8811 	msr	BASEPRI, r0
   15bc2:	f04f 0003 	mov.w	r0, #3
   15bc6:	df02      	svc	2
}
   15bc8:	bd08      	pop	{r3, pc}
   15bca:	bf00      	nop
   15bcc:	200006a8 	.word	0x200006a8
   15bd0:	0002cfe4 	.word	0x0002cfe4
   15bd4:	0002c8bc 	.word	0x0002c8bc
   15bd8:	0002c630 	.word	0x0002c630

00015bdc <lll_init>:
{
   15bdc:	b510      	push	{r4, lr}
   15bde:	4816      	ldr	r0, [pc, #88]	; (15c38 <lll_init+0x5c>)
   15be0:	f009 fbc8 	bl	1f374 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   15be4:	4b15      	ldr	r3, [pc, #84]	; (15c3c <lll_init+0x60>)
   15be6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   15be8:	b310      	cbz	r0, 15c30 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   15bea:	4b15      	ldr	r3, [pc, #84]	; (15c40 <lll_init+0x64>)
   15bec:	2400      	movs	r4, #0
   15bee:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   15bf0:	f000 fa26 	bl	16040 <lll_clock_init>
	if (err < 0) {
   15bf4:	2800      	cmp	r0, #0
   15bf6:	db1a      	blt.n	15c2e <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   15bf8:	4622      	mov	r2, r4
   15bfa:	4621      	mov	r1, r4
   15bfc:	2001      	movs	r0, #1
   15bfe:	f7ee fc5d 	bl	44bc <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   15c02:	4622      	mov	r2, r4
   15c04:	2101      	movs	r1, #1
   15c06:	200b      	movs	r0, #11
   15c08:	f7ee fc58 	bl	44bc <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   15c0c:	4622      	mov	r2, r4
   15c0e:	4621      	mov	r1, r4
   15c10:	2018      	movs	r0, #24
   15c12:	f7ee fc53 	bl	44bc <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   15c16:	2001      	movs	r0, #1
   15c18:	f7ee fc1e 	bl	4458 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   15c1c:	200b      	movs	r0, #11
   15c1e:	f7ee fc1b 	bl	4458 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   15c22:	2018      	movs	r0, #24
   15c24:	f7ee fc18 	bl	4458 <arch_irq_enable>
	radio_setup();
   15c28:	f001 fdb8 	bl	1779c <radio_setup>
	return 0;
   15c2c:	4620      	mov	r0, r4
}
   15c2e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   15c30:	f06f 0012 	mvn.w	r0, #18
}
   15c34:	bd10      	pop	{r4, pc}
   15c36:	bf00      	nop
   15c38:	0002d080 	.word	0x0002d080
   15c3c:	20003920 	.word	0x20003920
   15c40:	20003924 	.word	0x20003924

00015c44 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   15c44:	4a04      	ldr	r2, [pc, #16]	; (15c58 <lll_csrand_get+0x14>)
{
   15c46:	b410      	push	{r4}
   15c48:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   15c4a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   15c4c:	6884      	ldr	r4, [r0, #8]
   15c4e:	b28a      	uxth	r2, r1
   15c50:	4619      	mov	r1, r3
   15c52:	6823      	ldr	r3, [r4, #0]
}
   15c54:	bc10      	pop	{r4}
   15c56:	4718      	bx	r3
   15c58:	20003920 	.word	0x20003920

00015c5c <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   15c5c:	4b08      	ldr	r3, [pc, #32]	; (15c80 <lll_csrand_isr_get+0x24>)
   15c5e:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   15c60:	689a      	ldr	r2, [r3, #8]
{
   15c62:	b410      	push	{r4}
   15c64:	6854      	ldr	r4, [r2, #4]
   15c66:	b134      	cbz	r4, 15c76 <lll_csrand_isr_get+0x1a>
   15c68:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   15c6a:	46a4      	mov	ip, r4
   15c6c:	4601      	mov	r1, r0
}
   15c6e:	bc10      	pop	{r4}
   15c70:	4618      	mov	r0, r3
   15c72:	2300      	movs	r3, #0
   15c74:	4760      	bx	ip
   15c76:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15c7a:	bc10      	pop	{r4}
   15c7c:	4770      	bx	lr
   15c7e:	bf00      	nop
   15c80:	20003920 	.word	0x20003920

00015c84 <lll_rand_isr_get>:
   15c84:	f7ff bfea 	b.w	15c5c <lll_csrand_isr_get>

00015c88 <lll_reset>:
}
   15c88:	2000      	movs	r0, #0
   15c8a:	4770      	bx	lr

00015c8c <lll_prepare>:
{
   15c8c:	b510      	push	{r4, lr}
   15c8e:	b082      	sub	sp, #8
   15c90:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   15c92:	9400      	str	r4, [sp, #0]
   15c94:	2400      	movs	r4, #0
   15c96:	9401      	str	r4, [sp, #4]
   15c98:	f7ff fe58 	bl	1594c <prepare>
}
   15c9c:	b002      	add	sp, #8
   15c9e:	bd10      	pop	{r4, pc}

00015ca0 <lll_resume>:
{
   15ca0:	b510      	push	{r4, lr}
   15ca2:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   15ca4:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   15ca6:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   15caa:	69c3      	ldr	r3, [r0, #28]
   15cac:	6902      	ldr	r2, [r0, #16]
   15cae:	f004 0401 	and.w	r4, r4, #1
   15cb2:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   15cb6:	9401      	str	r4, [sp, #4]
   15cb8:	f7ff fe48 	bl	1594c <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   15cbc:	b108      	cbz	r0, 15cc2 <lll_resume+0x22>
   15cbe:	3077      	adds	r0, #119	; 0x77
   15cc0:	d101      	bne.n	15cc6 <lll_resume+0x26>
}
   15cc2:	b002      	add	sp, #8
   15cc4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   15cc6:	4a07      	ldr	r2, [pc, #28]	; (15ce4 <lll_resume+0x44>)
   15cc8:	4907      	ldr	r1, [pc, #28]	; (15ce8 <lll_resume+0x48>)
   15cca:	4808      	ldr	r0, [pc, #32]	; (15cec <lll_resume+0x4c>)
   15ccc:	23fe      	movs	r3, #254	; 0xfe
   15cce:	f00d f89a 	bl	22e06 <printk>
   15cd2:	4040      	eors	r0, r0
   15cd4:	f380 8811 	msr	BASEPRI, r0
   15cd8:	f04f 0003 	mov.w	r0, #3
   15cdc:	df02      	svc	2
}
   15cde:	b002      	add	sp, #8
   15ce0:	bd10      	pop	{r4, pc}
   15ce2:	bf00      	nop
   15ce4:	0002cfe4 	.word	0x0002cfe4
   15ce8:	0002d084 	.word	0x0002d084
   15cec:	0002c630 	.word	0x0002c630

00015cf0 <lll_disable>:
{
   15cf0:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   15cf2:	4604      	mov	r4, r0
{
   15cf4:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   15cf6:	2800      	cmp	r0, #0
   15cf8:	d035      	beq.n	15d66 <lll_disable+0x76>
   15cfa:	4b27      	ldr	r3, [pc, #156]	; (15d98 <lll_disable+0xa8>)
   15cfc:	681a      	ldr	r2, [r3, #0]
   15cfe:	4282      	cmp	r2, r0
   15d00:	d02b      	beq.n	15d5a <lll_disable+0x6a>
		idx = UINT8_MAX;
   15d02:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   15d04:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   15d08:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   15d0c:	f7f9 fcec 	bl	f6e8 <ull_prepare_dequeue_iter>
		while (next) {
   15d10:	4603      	mov	r3, r0
   15d12:	b940      	cbnz	r0, 15d26 <lll_disable+0x36>
   15d14:	e01f      	b.n	15d56 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   15d16:	4294      	cmp	r4, r2
   15d18:	d00e      	beq.n	15d38 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   15d1a:	f10d 0007 	add.w	r0, sp, #7
   15d1e:	f7f9 fce3 	bl	f6e8 <ull_prepare_dequeue_iter>
		while (next) {
   15d22:	4603      	mov	r3, r0
   15d24:	b1b8      	cbz	r0, 15d56 <lll_disable+0x66>
			if (!next->is_aborted &&
   15d26:	f893 2020 	ldrb.w	r2, [r3, #32]
   15d2a:	0792      	lsls	r2, r2, #30
   15d2c:	d4f5      	bmi.n	15d1a <lll_disable+0x2a>
				next->is_aborted = 1;
   15d2e:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   15d30:	4618      	mov	r0, r3
   15d32:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   15d34:	2c00      	cmp	r4, #0
   15d36:	d1ee      	bne.n	15d16 <lll_disable+0x26>
				next->is_aborted = 1;
   15d38:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   15d3c:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   15d3e:	f042 0202 	orr.w	r2, r2, #2
   15d42:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   15d46:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   15d48:	f10d 0007 	add.w	r0, sp, #7
   15d4c:	f7f9 fccc 	bl	f6e8 <ull_prepare_dequeue_iter>
		while (next) {
   15d50:	4603      	mov	r3, r0
   15d52:	2800      	cmp	r0, #0
   15d54:	d1e7      	bne.n	15d26 <lll_disable+0x36>
}
   15d56:	b003      	add	sp, #12
   15d58:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   15d5a:	689b      	ldr	r3, [r3, #8]
   15d5c:	b16b      	cbz	r3, 15d7a <lll_disable+0x8a>
   15d5e:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   15d60:	2000      	movs	r0, #0
   15d62:	4798      	blx	r3
   15d64:	e7cd      	b.n	15d02 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   15d66:	4a0c      	ldr	r2, [pc, #48]	; (15d98 <lll_disable+0xa8>)
   15d68:	6893      	ldr	r3, [r2, #8]
   15d6a:	2b00      	cmp	r3, #0
   15d6c:	d0c9      	beq.n	15d02 <lll_disable+0x12>
   15d6e:	6811      	ldr	r1, [r2, #0]
   15d70:	2900      	cmp	r1, #0
   15d72:	d0c6      	beq.n	15d02 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   15d74:	2000      	movs	r0, #0
   15d76:	4798      	blx	r3
   15d78:	e7c3      	b.n	15d02 <lll_disable+0x12>
			LL_ASSERT(!param);
   15d7a:	4a08      	ldr	r2, [pc, #32]	; (15d9c <lll_disable+0xac>)
   15d7c:	4908      	ldr	r1, [pc, #32]	; (15da0 <lll_disable+0xb0>)
   15d7e:	4809      	ldr	r0, [pc, #36]	; (15da4 <lll_disable+0xb4>)
   15d80:	f44f 7384 	mov.w	r3, #264	; 0x108
   15d84:	f00d f83f 	bl	22e06 <printk>
   15d88:	4040      	eors	r0, r0
   15d8a:	f380 8811 	msr	BASEPRI, r0
   15d8e:	f04f 0003 	mov.w	r0, #3
   15d92:	df02      	svc	2
   15d94:	e7b5      	b.n	15d02 <lll_disable+0x12>
   15d96:	bf00      	nop
   15d98:	20003924 	.word	0x20003924
   15d9c:	0002cfe4 	.word	0x0002cfe4
   15da0:	0002d098 	.word	0x0002d098
   15da4:	0002c630 	.word	0x0002c630

00015da8 <lll_prepare_done>:
}
   15da8:	2000      	movs	r0, #0
   15daa:	4770      	bx	lr

00015dac <lll_done>:
{
   15dac:	b510      	push	{r4, lr}
   15dae:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   15db0:	f7f9 fc8c 	bl	f6cc <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   15db4:	b13c      	cbz	r4, 15dc6 <lll_done+0x1a>
   15db6:	b320      	cbz	r0, 15e02 <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   15db8:	6820      	ldr	r0, [r4, #0]
   15dba:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   15dbc:	f7f9 fcc2 	bl	f744 <ull_event_done>
	LL_ASSERT(evdone);
   15dc0:	b180      	cbz	r0, 15de4 <lll_done+0x38>
}
   15dc2:	2000      	movs	r0, #0
   15dc4:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   15dc6:	4c1d      	ldr	r4, [pc, #116]	; (15e3c <lll_done+0x90>)
   15dc8:	68a3      	ldr	r3, [r4, #8]
   15dca:	b343      	cbz	r3, 15e1e <lll_done+0x72>
		param = event.curr.param;
   15dcc:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   15dce:	2300      	movs	r3, #0
   15dd0:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   15dd2:	6023      	str	r3, [r4, #0]
		if (param) {
   15dd4:	2800      	cmp	r0, #0
   15dd6:	d0f1      	beq.n	15dbc <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   15dd8:	6800      	ldr	r0, [r0, #0]
   15dda:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   15ddc:	f7f9 fcb2 	bl	f744 <ull_event_done>
	LL_ASSERT(evdone);
   15de0:	2800      	cmp	r0, #0
   15de2:	d1ee      	bne.n	15dc2 <lll_done+0x16>
   15de4:	4a16      	ldr	r2, [pc, #88]	; (15e40 <lll_done+0x94>)
   15de6:	4917      	ldr	r1, [pc, #92]	; (15e44 <lll_done+0x98>)
   15de8:	4817      	ldr	r0, [pc, #92]	; (15e48 <lll_done+0x9c>)
   15dea:	f240 1359 	movw	r3, #345	; 0x159
   15dee:	f00d f80a 	bl	22e06 <printk>
   15df2:	4040      	eors	r0, r0
   15df4:	f380 8811 	msr	BASEPRI, r0
   15df8:	f04f 0003 	mov.w	r0, #3
   15dfc:	df02      	svc	2
}
   15dfe:	2000      	movs	r0, #0
   15e00:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   15e02:	4a0f      	ldr	r2, [pc, #60]	; (15e40 <lll_done+0x94>)
   15e04:	4911      	ldr	r1, [pc, #68]	; (15e4c <lll_done+0xa0>)
   15e06:	4810      	ldr	r0, [pc, #64]	; (15e48 <lll_done+0x9c>)
   15e08:	f240 133b 	movw	r3, #315	; 0x13b
   15e0c:	f00c fffb 	bl	22e06 <printk>
   15e10:	4040      	eors	r0, r0
   15e12:	f380 8811 	msr	BASEPRI, r0
   15e16:	f04f 0003 	mov.w	r0, #3
   15e1a:	df02      	svc	2
   15e1c:	e7cc      	b.n	15db8 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   15e1e:	4a08      	ldr	r2, [pc, #32]	; (15e40 <lll_done+0x94>)
   15e20:	490b      	ldr	r1, [pc, #44]	; (15e50 <lll_done+0xa4>)
   15e22:	4809      	ldr	r0, [pc, #36]	; (15e48 <lll_done+0x9c>)
   15e24:	f240 1341 	movw	r3, #321	; 0x141
   15e28:	f00c ffed 	bl	22e06 <printk>
   15e2c:	4040      	eors	r0, r0
   15e2e:	f380 8811 	msr	BASEPRI, r0
   15e32:	f04f 0003 	mov.w	r0, #3
   15e36:	df02      	svc	2
   15e38:	e7c8      	b.n	15dcc <lll_done+0x20>
   15e3a:	bf00      	nop
   15e3c:	20003924 	.word	0x20003924
   15e40:	0002cfe4 	.word	0x0002cfe4
   15e44:	0002d0c4 	.word	0x0002d0c4
   15e48:	0002c630 	.word	0x0002c630
   15e4c:	0002d0a0 	.word	0x0002d0a0
   15e50:	0002d0b0 	.word	0x0002d0b0

00015e54 <lll_is_abort_cb>:
}
   15e54:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   15e58:	4770      	bx	lr
   15e5a:	bf00      	nop

00015e5c <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   15e5c:	e9d0 2300 	ldrd	r2, r3, [r0]
   15e60:	2a00      	cmp	r2, #0
   15e62:	db04      	blt.n	15e6e <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   15e64:	429a      	cmp	r2, r3
   15e66:	bf38      	it	cc
   15e68:	461a      	movcc	r2, r3
   15e6a:	4610      	mov	r0, r2
}
   15e6c:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   15e6e:	6880      	ldr	r0, [r0, #8]
   15e70:	4298      	cmp	r0, r3
   15e72:	bf38      	it	cc
   15e74:	4618      	movcc	r0, r3
   15e76:	4770      	bx	lr

00015e78 <lll_preempt_calc>:
{
   15e78:	b510      	push	{r4, lr}
   15e7a:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   15e7c:	f7f6 ff3c 	bl	ccf8 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   15e80:	4621      	mov	r1, r4
   15e82:	f7f6 ff3b 	bl	ccfc <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   15e86:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   15e88:	0203      	lsls	r3, r0, #8
   15e8a:	d404      	bmi.n	15e96 <lll_preempt_calc+0x1e>
   15e8c:	2809      	cmp	r0, #9
   15e8e:	bf94      	ite	ls
   15e90:	2000      	movls	r0, #0
   15e92:	2001      	movhi	r0, #1
}
   15e94:	bd10      	pop	{r4, pc}
	return 0;
   15e96:	2000      	movs	r0, #0
}
   15e98:	bd10      	pop	{r4, pc}
   15e9a:	bf00      	nop

00015e9c <lll_chan_set>:
	switch (chan) {
   15e9c:	2826      	cmp	r0, #38	; 0x26
{
   15e9e:	b510      	push	{r4, lr}
   15ea0:	4604      	mov	r4, r0
	switch (chan) {
   15ea2:	d01c      	beq.n	15ede <lll_chan_set+0x42>
   15ea4:	2827      	cmp	r0, #39	; 0x27
   15ea6:	d012      	beq.n	15ece <lll_chan_set+0x32>
   15ea8:	2825      	cmp	r0, #37	; 0x25
   15eaa:	d008      	beq.n	15ebe <lll_chan_set+0x22>
		if (chan < 11) {
   15eac:	280a      	cmp	r0, #10
   15eae:	d91e      	bls.n	15eee <lll_chan_set+0x52>
		} else if (chan < 40) {
   15eb0:	2827      	cmp	r0, #39	; 0x27
   15eb2:	d821      	bhi.n	15ef8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   15eb4:	3003      	adds	r0, #3
   15eb6:	0040      	lsls	r0, r0, #1
   15eb8:	f001 fccc 	bl	17854 <radio_freq_chan_set>
   15ebc:	e002      	b.n	15ec4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   15ebe:	2002      	movs	r0, #2
   15ec0:	f001 fcc8 	bl	17854 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15ec4:	4620      	mov	r0, r4
}
   15ec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15eca:	f001 bcc9 	b.w	17860 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   15ece:	2050      	movs	r0, #80	; 0x50
   15ed0:	f001 fcc0 	bl	17854 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15ed4:	4620      	mov	r0, r4
}
   15ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15eda:	f001 bcc1 	b.w	17860 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   15ede:	201a      	movs	r0, #26
   15ee0:	f001 fcb8 	bl	17854 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15ee4:	4620      	mov	r0, r4
}
   15ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15eea:	f001 bcb9 	b.w	17860 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   15eee:	3002      	adds	r0, #2
   15ef0:	0040      	lsls	r0, r0, #1
   15ef2:	f001 fcaf 	bl	17854 <radio_freq_chan_set>
   15ef6:	e7e5      	b.n	15ec4 <lll_chan_set+0x28>
			LL_ASSERT(0);
   15ef8:	4a06      	ldr	r2, [pc, #24]	; (15f14 <lll_chan_set+0x78>)
   15efa:	4907      	ldr	r1, [pc, #28]	; (15f18 <lll_chan_set+0x7c>)
   15efc:	4807      	ldr	r0, [pc, #28]	; (15f1c <lll_chan_set+0x80>)
   15efe:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   15f02:	f00c ff80 	bl	22e06 <printk>
   15f06:	4040      	eors	r0, r0
   15f08:	f380 8811 	msr	BASEPRI, r0
   15f0c:	f04f 0003 	mov.w	r0, #3
   15f10:	df02      	svc	2
   15f12:	e7d7      	b.n	15ec4 <lll_chan_set+0x28>
   15f14:	0002cfe4 	.word	0x0002cfe4
   15f18:	0002c6a0 	.word	0x0002c6a0
   15f1c:	0002c630 	.word	0x0002c630

00015f20 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   15f20:	f001 bd06 	b.w	17930 <radio_rx_ready_delay_get>

00015f24 <lll_isr_tx_status_reset>:
{
   15f24:	b508      	push	{r3, lr}
	radio_status_reset();
   15f26:	f001 fd29 	bl	1797c <radio_status_reset>
}
   15f2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   15f2e:	f001 bde9 	b.w	17b04 <radio_tmr_status_reset>
   15f32:	bf00      	nop

00015f34 <lll_isr_rx_status_reset>:
{
   15f34:	b508      	push	{r3, lr}
	radio_status_reset();
   15f36:	f001 fd21 	bl	1797c <radio_status_reset>
	radio_tmr_status_reset();
   15f3a:	f001 fde3 	bl	17b04 <radio_tmr_status_reset>
}
   15f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   15f42:	f001 bd8f 	b.w	17a64 <radio_rssi_status_reset>
   15f46:	bf00      	nop

00015f48 <lll_isr_status_reset>:
{
   15f48:	b508      	push	{r3, lr}
	radio_status_reset();
   15f4a:	f001 fd17 	bl	1797c <radio_status_reset>
	radio_tmr_status_reset();
   15f4e:	f001 fdd9 	bl	17b04 <radio_tmr_status_reset>
	radio_filter_status_reset();
   15f52:	f001 fdbf 	bl	17ad4 <radio_filter_status_reset>
	radio_ar_status_reset();
   15f56:	f001 ff9d 	bl	17e94 <radio_ar_status_reset>
}
   15f5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   15f5e:	f001 bd81 	b.w	17a64 <radio_rssi_status_reset>
   15f62:	bf00      	nop

00015f64 <lll_isr_cleanup>:
{
   15f64:	b508      	push	{r3, lr}
   15f66:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   15f68:	4815      	ldr	r0, [pc, #84]	; (15fc0 <lll_isr_cleanup+0x5c>)
   15f6a:	f001 fbf7 	bl	1775c <radio_isr_set>
	if (!radio_is_idle()) {
   15f6e:	f001 fd25 	bl	179bc <radio_is_idle>
   15f72:	b150      	cbz	r0, 15f8a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   15f74:	f001 fe68 	bl	17c48 <radio_tmr_stop>
	err = lll_hfclock_off();
   15f78:	f000 f8a6 	bl	160c8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15f7c:	2800      	cmp	r0, #0
   15f7e:	db0c      	blt.n	15f9a <lll_isr_cleanup+0x36>
}
   15f80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   15f84:	2000      	movs	r0, #0
   15f86:	f7ff bf11 	b.w	15dac <lll_done>
		radio_disable();
   15f8a:	f001 fcdf 	bl	1794c <radio_disable>
	radio_tmr_stop();
   15f8e:	f001 fe5b 	bl	17c48 <radio_tmr_stop>
	err = lll_hfclock_off();
   15f92:	f000 f899 	bl	160c8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15f96:	2800      	cmp	r0, #0
   15f98:	daf2      	bge.n	15f80 <lll_isr_cleanup+0x1c>
   15f9a:	4a0a      	ldr	r2, [pc, #40]	; (15fc4 <lll_isr_cleanup+0x60>)
   15f9c:	490a      	ldr	r1, [pc, #40]	; (15fc8 <lll_isr_cleanup+0x64>)
   15f9e:	480b      	ldr	r0, [pc, #44]	; (15fcc <lll_isr_cleanup+0x68>)
   15fa0:	f240 231f 	movw	r3, #543	; 0x21f
   15fa4:	f00c ff2f 	bl	22e06 <printk>
   15fa8:	4040      	eors	r0, r0
   15faa:	f380 8811 	msr	BASEPRI, r0
   15fae:	f04f 0003 	mov.w	r0, #3
   15fb2:	df02      	svc	2
	lll_done(NULL);
   15fb4:	2000      	movs	r0, #0
}
   15fb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   15fba:	f7ff bef7 	b.w	15dac <lll_done>
   15fbe:	bf00      	nop
   15fc0:	00015875 	.word	0x00015875
   15fc4:	0002cfe4 	.word	0x0002cfe4
   15fc8:	0002d0cc 	.word	0x0002d0cc
   15fcc:	0002c630 	.word	0x0002c630

00015fd0 <lll_isr_abort>:
{
   15fd0:	b510      	push	{r4, lr}
   15fd2:	4604      	mov	r4, r0
	lll_isr_status_reset();
   15fd4:	f7ff ffb8 	bl	15f48 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   15fd8:	4620      	mov	r0, r4
}
   15fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   15fde:	f7ff bfc1 	b.w	15f64 <lll_isr_cleanup>
   15fe2:	bf00      	nop

00015fe4 <clock_ready>:
	z_impl_k_sem_give(sem);
   15fe4:	f101 0010 	add.w	r0, r1, #16
   15fe8:	f00a b878 	b.w	200dc <z_impl_k_sem_give>

00015fec <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   15fec:	b530      	push	{r4, r5, lr}
   15fee:	4604      	mov	r4, r0
   15ff0:	b08b      	sub	sp, #44	; 0x2c
   15ff2:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   15ff4:	2201      	movs	r2, #1
   15ff6:	2100      	movs	r1, #0
   15ff8:	a804      	add	r0, sp, #16
   15ffa:	f015 f919 	bl	2b230 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   15ffe:	2300      	movs	r3, #0
   16000:	4a0e      	ldr	r2, [pc, #56]	; (1603c <blocking_on+0x50>)
   16002:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   16004:	4620      	mov	r0, r4
   16006:	2303      	movs	r3, #3
   16008:	4669      	mov	r1, sp
   1600a:	9201      	str	r2, [sp, #4]
   1600c:	9302      	str	r3, [sp, #8]
   1600e:	f00c ff76 	bl	22efe <onoff_request>
	if (err < 0) {
   16012:	2800      	cmp	r0, #0
   16014:	db10      	blt.n	16038 <blocking_on+0x4c>
   16016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1601a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1601e:	2100      	movs	r1, #0
   16020:	fbe3 0105 	umlal	r0, r1, r3, r5
   16024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16028:	2300      	movs	r3, #0
   1602a:	f7ea f8a9 	bl	180 <__aeabi_uldivmod>
   1602e:	4602      	mov	r2, r0
   16030:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16032:	a804      	add	r0, sp, #16
   16034:	f00a f878 	bl	20128 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   16038:	b00b      	add	sp, #44	; 0x2c
   1603a:	bd30      	pop	{r4, r5, pc}
   1603c:	00015fe5 	.word	0x00015fe5

00016040 <lll_clock_init>:

int lll_clock_init(void)
{
   16040:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16042:	2001      	movs	r0, #1
   16044:	f7ed fd32 	bl	3aac <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   16048:	4904      	ldr	r1, [pc, #16]	; (1605c <lll_clock_init+0x1c>)
   1604a:	2401      	movs	r4, #1
   1604c:	2300      	movs	r3, #0
   1604e:	608c      	str	r4, [r1, #8]
   16050:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   16052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16056:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   16058:	f00c bf51 	b.w	22efe <onoff_request>
   1605c:	2000393c 	.word	0x2000393c

00016060 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   16060:	4b0c      	ldr	r3, [pc, #48]	; (16094 <lll_clock_wait+0x34>)
   16062:	781a      	ldrb	r2, [r3, #0]
   16064:	b10a      	cbz	r2, 1606a <lll_clock_wait+0xa>
		return 0;
   16066:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   16068:	4770      	bx	lr
{
   1606a:	b510      	push	{r4, lr}
	done = true;
   1606c:	2001      	movs	r0, #1
   1606e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16070:	f7ed fd1c 	bl	3aac <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   16074:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16078:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1607a:	f7ff ffb7 	bl	15fec <blocking_on>
	if (err) {
   1607e:	b938      	cbnz	r0, 16090 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   16080:	4620      	mov	r0, r4
   16082:	f00c ff85 	bl	22f90 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   16086:	2802      	cmp	r0, #2
		return 0;
   16088:	bf0c      	ite	eq
   1608a:	2000      	moveq	r0, #0
		return -EIO;
   1608c:	f06f 0004 	mvnne.w	r0, #4
}
   16090:	bd10      	pop	{r4, pc}
   16092:	bf00      	nop
   16094:	2000862a 	.word	0x2000862a

00016098 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   16098:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1609a:	4b0a      	ldr	r3, [pc, #40]	; (160c4 <lll_hfclock_on+0x2c>)
   1609c:	f3bf 8f5b 	dmb	ish
   160a0:	e853 2f00 	ldrex	r2, [r3]
   160a4:	1c51      	adds	r1, r2, #1
   160a6:	e843 1000 	strex	r0, r1, [r3]
   160aa:	2800      	cmp	r0, #0
   160ac:	d1f8      	bne.n	160a0 <lll_hfclock_on+0x8>
   160ae:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   160b2:	2a00      	cmp	r2, #0
   160b4:	dd01      	ble.n	160ba <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   160b6:	2000      	movs	r0, #0
   160b8:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   160ba:	f7ed fcff 	bl	3abc <z_nrf_clock_bt_ctlr_hf_request>
}
   160be:	2000      	movs	r0, #0
   160c0:	bd08      	pop	{r3, pc}
   160c2:	bf00      	nop
   160c4:	20003938 	.word	0x20003938

000160c8 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   160c8:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   160ca:	4b0d      	ldr	r3, [pc, #52]	; (16100 <lll_hfclock_off+0x38>)
   160cc:	681a      	ldr	r2, [r3, #0]
   160ce:	2a00      	cmp	r2, #0
   160d0:	dd12      	ble.n	160f8 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   160d2:	f3bf 8f5b 	dmb	ish
   160d6:	e853 2f00 	ldrex	r2, [r3]
   160da:	1e51      	subs	r1, r2, #1
   160dc:	e843 1000 	strex	r0, r1, [r3]
   160e0:	2800      	cmp	r0, #0
   160e2:	d1f8      	bne.n	160d6 <lll_hfclock_off+0xe>
   160e4:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   160e8:	2a01      	cmp	r2, #1
   160ea:	dd01      	ble.n	160f0 <lll_hfclock_off+0x28>
		return 0;
   160ec:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   160ee:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   160f0:	f7ed fcfa 	bl	3ae8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   160f4:	2000      	movs	r0, #0
}
   160f6:	bd08      	pop	{r3, pc}
		return -EALREADY;
   160f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   160fc:	bd08      	pop	{r3, pc}
   160fe:	bf00      	nop
   16100:	20003938 	.word	0x20003938

00016104 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   16104:	2014      	movs	r0, #20
   16106:	4770      	bx	lr

00016108 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   16108:	4b01      	ldr	r3, [pc, #4]	; (16110 <lll_clock_ppm_get+0x8>)
}
   1610a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1610e:	4770      	bx	lr
   16110:	0002d0f8 	.word	0x0002d0f8

00016114 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   16114:	b510      	push	{r4, lr}
   16116:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   16118:	f7ff ff16 	bl	15f48 <lll_isr_status_reset>

	radio_filter_disable();
   1611c:	f001 fcd0 	bl	17ac0 <radio_filter_disable>

	lll_isr_cleanup(param);
   16120:	4620      	mov	r0, r4
}
   16122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   16126:	f7ff bf1d 	b.w	15f64 <lll_isr_cleanup>
   1612a:	bf00      	nop

0001612c <isr_tx>:
{
   1612c:	b530      	push	{r4, r5, lr}
   1612e:	b083      	sub	sp, #12
   16130:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   16132:	f7ff fef7 	bl	15f24 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   16136:	2096      	movs	r0, #150	; 0x96
   16138:	f001 fcf4 	bl	17b24 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1613c:	2300      	movs	r3, #0
   1613e:	461a      	mov	r2, r3
   16140:	4619      	mov	r1, r3
   16142:	4618      	mov	r0, r3
   16144:	f001 fc74 	bl	17a30 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   16148:	f001 fc5c 	bl	17a04 <radio_pkt_scratch_get>
   1614c:	f001 fbe2 	bl	17914 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   16150:	f001 fc20 	bl	17994 <radio_is_ready>
   16154:	b9d8      	cbnz	r0, 1618e <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   16156:	481e      	ldr	r0, [pc, #120]	; (161d0 <isr_tx+0xa4>)
   16158:	4621      	mov	r1, r4
   1615a:	f001 faff 	bl	1775c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1615e:	f7ff fb57 	bl	15810 <ull_filter_lll_rl_enabled>
   16162:	bb48      	cbnz	r0, 161b8 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   16164:	f001 fdcc 	bl	17d00 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16168:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1616a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1616c:	4608      	mov	r0, r1
   1616e:	f001 fbe1 	bl	17934 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   16172:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16174:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   16176:	4608      	mov	r0, r1
   16178:	f001 fbd8 	bl	1792c <radio_tx_chain_delay_get>
   1617c:	442c      	add	r4, r5
   1617e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   16180:	1a20      	subs	r0, r4, r0
   16182:	f001 fd75 	bl	17c70 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   16186:	f001 fdad 	bl	17ce4 <radio_tmr_end_capture>
}
   1618a:	b003      	add	sp, #12
   1618c:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   1618e:	4a11      	ldr	r2, [pc, #68]	; (161d4 <isr_tx+0xa8>)
   16190:	4911      	ldr	r1, [pc, #68]	; (161d8 <isr_tx+0xac>)
   16192:	4812      	ldr	r0, [pc, #72]	; (161dc <isr_tx+0xb0>)
   16194:	f240 238d 	movw	r3, #653	; 0x28d
   16198:	f00c fe35 	bl	22e06 <printk>
   1619c:	4040      	eors	r0, r0
   1619e:	f380 8811 	msr	BASEPRI, r0
   161a2:	f04f 0003 	mov.w	r0, #3
   161a6:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   161a8:	4809      	ldr	r0, [pc, #36]	; (161d0 <isr_tx+0xa4>)
   161aa:	4621      	mov	r1, r4
   161ac:	f001 fad6 	bl	1775c <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   161b0:	f7ff fb2e 	bl	15810 <ull_filter_lll_rl_enabled>
   161b4:	2800      	cmp	r0, #0
   161b6:	d0d5      	beq.n	16164 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   161b8:	f10d 0007 	add.w	r0, sp, #7
   161bc:	f7ff fa52 	bl	15664 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   161c0:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   161c2:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   161c4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   161c8:	f001 fe2c 	bl	17e24 <radio_ar_configure>
   161cc:	e7ca      	b.n	16164 <isr_tx+0x38>
   161ce:	bf00      	nop
   161d0:	0001690d 	.word	0x0001690d
   161d4:	0002d108 	.word	0x0002d108
   161d8:	0002d154 	.word	0x0002d154
   161dc:	0002c630 	.word	0x0002c630

000161e0 <is_abort_cb>:
	if (next != curr) {
   161e0:	4282      	cmp	r2, r0
{
   161e2:	b508      	push	{r3, lr}
	if (next != curr) {
   161e4:	d011      	beq.n	1620a <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   161e6:	7b12      	ldrb	r2, [r2, #12]
   161e8:	07d2      	lsls	r2, r2, #31
   161ea:	d402      	bmi.n	161f2 <is_abort_cb+0x12>
			return -ECANCELED;
   161ec:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   161f0:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   161f2:	4a14      	ldr	r2, [pc, #80]	; (16244 <is_abort_cb+0x64>)
   161f4:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   161f6:	9a02      	ldr	r2, [sp, #8]
   161f8:	2300      	movs	r3, #0
   161fa:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   161fc:	f7ff ff4c 	bl	16098 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   16200:	2800      	cmp	r0, #0
   16202:	db0f      	blt.n	16224 <is_abort_cb+0x44>
   16204:	f06f 000a 	mvn.w	r0, #10
}
   16208:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1620a:	7c13      	ldrb	r3, [r2, #16]
   1620c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16210:	6953      	ldr	r3, [r2, #20]
   16212:	781b      	ldrb	r3, [r3, #0]
   16214:	f003 030f 	and.w	r3, r3, #15
   16218:	2b01      	cmp	r3, #1
		return 0;
   1621a:	bf14      	ite	ne
   1621c:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   16220:	2000      	moveq	r0, #0
}
   16222:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   16224:	4a08      	ldr	r2, [pc, #32]	; (16248 <is_abort_cb+0x68>)
   16226:	4909      	ldr	r1, [pc, #36]	; (1624c <is_abort_cb+0x6c>)
   16228:	4809      	ldr	r0, [pc, #36]	; (16250 <is_abort_cb+0x70>)
   1622a:	f240 234b 	movw	r3, #587	; 0x24b
   1622e:	f00c fdea 	bl	22e06 <printk>
   16232:	4040      	eors	r0, r0
   16234:	f380 8811 	msr	BASEPRI, r0
   16238:	f04f 0003 	mov.w	r0, #3
   1623c:	df02      	svc	2
   1623e:	f06f 000a 	mvn.w	r0, #10
}
   16242:	bd08      	pop	{r3, pc}
   16244:	000166e5 	.word	0x000166e5
   16248:	0002d108 	.word	0x0002d108
   1624c:	0002d0cc 	.word	0x0002d0cc
   16250:	0002c630 	.word	0x0002c630

00016254 <abort_cb>:
{
   16254:	b510      	push	{r4, lr}
	if (!prepare_param) {
   16256:	b1d8      	cbz	r0, 16290 <abort_cb+0x3c>
	err = lll_hfclock_off();
   16258:	460c      	mov	r4, r1
   1625a:	f7ff ff35 	bl	160c8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1625e:	2800      	cmp	r0, #0
   16260:	db04      	blt.n	1626c <abort_cb+0x18>
	lll_done(param);
   16262:	4620      	mov	r0, r4
}
   16264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16268:	f7ff bda0 	b.w	15dac <lll_done>
	LL_ASSERT(err >= 0);
   1626c:	4a0c      	ldr	r2, [pc, #48]	; (162a0 <abort_cb+0x4c>)
   1626e:	490d      	ldr	r1, [pc, #52]	; (162a4 <abort_cb+0x50>)
   16270:	480d      	ldr	r0, [pc, #52]	; (162a8 <abort_cb+0x54>)
   16272:	f240 2371 	movw	r3, #625	; 0x271
   16276:	f00c fdc6 	bl	22e06 <printk>
   1627a:	4040      	eors	r0, r0
   1627c:	f380 8811 	msr	BASEPRI, r0
   16280:	f04f 0003 	mov.w	r0, #3
   16284:	df02      	svc	2
	lll_done(param);
   16286:	4620      	mov	r0, r4
}
   16288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1628c:	f7ff bd8e 	b.w	15dac <lll_done>
		radio_isr_set(isr_abort, param);
   16290:	4806      	ldr	r0, [pc, #24]	; (162ac <abort_cb+0x58>)
   16292:	f001 fa63 	bl	1775c <radio_isr_set>
}
   16296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1629a:	f001 bb57 	b.w	1794c <radio_disable>
   1629e:	bf00      	nop
   162a0:	0002d108 	.word	0x0002d108
   162a4:	0002d0cc 	.word	0x0002d0cc
   162a8:	0002c630 	.word	0x0002c630
   162ac:	00016115 	.word	0x00016115

000162b0 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   162b0:	4b08      	ldr	r3, [pc, #32]	; (162d4 <lll_adv_init+0x24>)
{
   162b2:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   162b4:	1d18      	adds	r0, r3, #4
   162b6:	2205      	movs	r2, #5
   162b8:	2128      	movs	r1, #40	; 0x28
   162ba:	f7f5 f903 	bl	b4c4 <mem_init>
	MFIFO_INIT(pdu_free);
   162be:	4b06      	ldr	r3, [pc, #24]	; (162d8 <lll_adv_init+0x28>)
   162c0:	2400      	movs	r4, #0
   162c2:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   162c4:	2203      	movs	r2, #3
   162c6:	4621      	mov	r1, r4
   162c8:	4804      	ldr	r0, [pc, #16]	; (162dc <lll_adv_init+0x2c>)
   162ca:	f014 ffb1 	bl	2b230 <z_impl_k_sem_init>
}
   162ce:	4620      	mov	r0, r4
   162d0:	bd10      	pop	{r4, pc}
   162d2:	bf00      	nop
   162d4:	2000394c 	.word	0x2000394c
   162d8:	200006b8 	.word	0x200006b8
   162dc:	20003a18 	.word	0x20003a18

000162e0 <lll_adv_reset>:
   162e0:	f7ff bfe6 	b.w	162b0 <lll_adv_init>

000162e4 <lll_adv_data_init>:
{
   162e4:	b510      	push	{r4, lr}
   162e6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   162e8:	4804      	ldr	r0, [pc, #16]	; (162fc <lll_adv_data_init+0x18>)
   162ea:	f7f5 f90b 	bl	b504 <mem_acquire>
	if (!p) {
   162ee:	b110      	cbz	r0, 162f6 <lll_adv_data_init+0x12>
	pdu->pdu[0] = (void *)p;
   162f0:	6060      	str	r0, [r4, #4]
	return 0;
   162f2:	2000      	movs	r0, #0
}
   162f4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   162f6:	f06f 000b 	mvn.w	r0, #11
}
   162fa:	bd10      	pop	{r4, pc}
   162fc:	2000394c 	.word	0x2000394c

00016300 <lll_adv_data_reset>:
{
   16300:	4603      	mov	r3, r0
	pdu->first = 0U;
   16302:	2000      	movs	r0, #0
   16304:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   16306:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   16308:	6098      	str	r0, [r3, #8]
}
   1630a:	4770      	bx	lr

0001630c <lll_adv_pdu_alloc>:
{
   1630c:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1630e:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   16310:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   16312:	429a      	cmp	r2, r3
   16314:	d004      	beq.n	16320 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   16316:	b2d4      	uxtb	r4, r2
   16318:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1631a:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1631c:	4294      	cmp	r4, r2
   1631e:	d003      	beq.n	16328 <lll_adv_pdu_alloc+0x1c>
		last++;
   16320:	3301      	adds	r3, #1
   16322:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   16324:	2b02      	cmp	r3, #2
   16326:	d007      	beq.n	16338 <lll_adv_pdu_alloc+0x2c>
	*idx = last;
   16328:	461c      	mov	r4, r3
   1632a:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1632e:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   16330:	6865      	ldr	r5, [r4, #4]
	if (p) {
   16332:	b14d      	cbz	r5, 16348 <lll_adv_pdu_alloc+0x3c>
}
   16334:	4628      	mov	r0, r5
   16336:	bd70      	pop	{r4, r5, r6, pc}
{
   16338:	2400      	movs	r4, #0
			last = 0U;
   1633a:	4623      	mov	r3, r4
	*idx = last;
   1633c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   16340:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   16342:	6865      	ldr	r5, [r4, #4]
	if (p) {
   16344:	2d00      	cmp	r5, #0
   16346:	d1f5      	bne.n	16334 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   16348:	4e34      	ldr	r6, [pc, #208]	; (1641c <lll_adv_pdu_alloc+0x110>)
   1634a:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   1634c:	78f1      	ldrb	r1, [r6, #3]
   1634e:	7833      	ldrb	r3, [r6, #0]
   16350:	4291      	cmp	r1, r2
   16352:	d003      	beq.n	1635c <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   16354:	fb02 6303 	mla	r3, r2, r3, r6
   16358:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1635a:	b93d      	cbnz	r5, 1636c <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   1635c:	4830      	ldr	r0, [pc, #192]	; (16420 <lll_adv_pdu_alloc+0x114>)
   1635e:	f7f5 f8d1 	bl	b504 <mem_acquire>
	if (p) {
   16362:	4605      	mov	r5, r0
   16364:	b1a8      	cbz	r0, 16392 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   16366:	6065      	str	r5, [r4, #4]
}
   16368:	4628      	mov	r0, r5
   1636a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1636c:	482d      	ldr	r0, [pc, #180]	; (16424 <lll_adv_pdu_alloc+0x118>)
   1636e:	2200      	movs	r2, #0
   16370:	2300      	movs	r3, #0
   16372:	f009 fed9 	bl	20128 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   16376:	2800      	cmp	r0, #0
   16378:	d134      	bne.n	163e4 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   1637a:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1637c:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   1637e:	7871      	ldrb	r1, [r6, #1]
   16380:	429a      	cmp	r2, r3
   16382:	d0f0      	beq.n	16366 <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   16384:	3301      	adds	r3, #1
   16386:	b2db      	uxtb	r3, r3
		_first = 0U;
   16388:	4299      	cmp	r1, r3
   1638a:	bf08      	it	eq
   1638c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1638e:	70b3      	strb	r3, [r6, #2]

	return mem;
   16390:	e7e9      	b.n	16366 <lll_adv_pdu_alloc+0x5a>
   16392:	4824      	ldr	r0, [pc, #144]	; (16424 <lll_adv_pdu_alloc+0x118>)
   16394:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1639c:	f009 fec4 	bl	20128 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   163a0:	2800      	cmp	r0, #0
   163a2:	d12c      	bne.n	163fe <lll_adv_pdu_alloc+0xf2>
	uint8_t _first = *first; /* Copy read-index */
   163a4:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   163a6:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   163a8:	7832      	ldrb	r2, [r6, #0]
   163aa:	7870      	ldrb	r0, [r6, #1]
   163ac:	4299      	cmp	r1, r3
   163ae:	d00a      	beq.n	163c6 <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   163b0:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   163b4:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   163b6:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   163b8:	b2db      	uxtb	r3, r3
		_first = 0U;
   163ba:	4298      	cmp	r0, r3
   163bc:	bf08      	it	eq
   163be:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   163c0:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   163c2:	2d00      	cmp	r5, #0
   163c4:	d1cf      	bne.n	16366 <lll_adv_pdu_alloc+0x5a>
   163c6:	4a18      	ldr	r2, [pc, #96]	; (16428 <lll_adv_pdu_alloc+0x11c>)
   163c8:	4918      	ldr	r1, [pc, #96]	; (1642c <lll_adv_pdu_alloc+0x120>)
   163ca:	4819      	ldr	r0, [pc, #100]	; (16430 <lll_adv_pdu_alloc+0x124>)
   163cc:	f240 1309 	movw	r3, #265	; 0x109
   163d0:	f00c fd19 	bl	22e06 <printk>
   163d4:	4040      	eors	r0, r0
   163d6:	f380 8811 	msr	BASEPRI, r0
   163da:	f04f 0003 	mov.w	r0, #3
   163de:	df02      	svc	2
   163e0:	2500      	movs	r5, #0
   163e2:	e7c0      	b.n	16366 <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   163e4:	4a10      	ldr	r2, [pc, #64]	; (16428 <lll_adv_pdu_alloc+0x11c>)
   163e6:	4913      	ldr	r1, [pc, #76]	; (16434 <lll_adv_pdu_alloc+0x128>)
   163e8:	4811      	ldr	r0, [pc, #68]	; (16430 <lll_adv_pdu_alloc+0x124>)
   163ea:	23f6      	movs	r3, #246	; 0xf6
   163ec:	f00c fd0b 	bl	22e06 <printk>
   163f0:	4040      	eors	r0, r0
   163f2:	f380 8811 	msr	BASEPRI, r0
   163f6:	f04f 0003 	mov.w	r0, #3
   163fa:	df02      	svc	2
   163fc:	e7bd      	b.n	1637a <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   163fe:	4a0a      	ldr	r2, [pc, #40]	; (16428 <lll_adv_pdu_alloc+0x11c>)
   16400:	490c      	ldr	r1, [pc, #48]	; (16434 <lll_adv_pdu_alloc+0x128>)
   16402:	480b      	ldr	r0, [pc, #44]	; (16430 <lll_adv_pdu_alloc+0x124>)
   16404:	f44f 7383 	mov.w	r3, #262	; 0x106
   16408:	f00c fcfd 	bl	22e06 <printk>
   1640c:	4040      	eors	r0, r0
   1640e:	f380 8811 	msr	BASEPRI, r0
   16412:	f04f 0003 	mov.w	r0, #3
   16416:	df02      	svc	2
   16418:	e7c4      	b.n	163a4 <lll_adv_pdu_alloc+0x98>
   1641a:	bf00      	nop
   1641c:	200006b8 	.word	0x200006b8
   16420:	2000394c 	.word	0x2000394c
   16424:	20003a18 	.word	0x20003a18
   16428:	0002d108 	.word	0x0002d108
   1642c:	0002d168 	.word	0x0002d168
   16430:	0002c630 	.word	0x0002c630
   16434:	0002c8b0 	.word	0x0002c8b0

00016438 <lll_adv_pdu_latest_get>:
{
   16438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1643a:	4604      	mov	r4, r0
	first = pdu->first;
   1643c:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1643e:	7840      	ldrb	r0, [r0, #1]
   16440:	4298      	cmp	r0, r3
   16442:	d029      	beq.n	16498 <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   16444:	4d1d      	ldr	r5, [pc, #116]	; (164bc <lll_adv_pdu_latest_get+0x84>)
   16446:	b2da      	uxtb	r2, r3
	last = last + 1;
   16448:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1644a:	786e      	ldrb	r6, [r5, #1]
   1644c:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1644e:	3301      	adds	r3, #1
   16450:	b2db      	uxtb	r3, r3
		last = 0U;
   16452:	429e      	cmp	r6, r3
   16454:	bf08      	it	eq
   16456:	2300      	moveq	r3, #0
	if (last == first) {
   16458:	4298      	cmp	r0, r3
   1645a:	d01f      	beq.n	1649c <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   1645c:	1c50      	adds	r0, r2, #1
   1645e:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   16460:	2802      	cmp	r0, #2
   16462:	bf04      	itt	eq
   16464:	2600      	moveq	r6, #0
			first = 0U;
   16466:	4630      	moveq	r0, r6
		*is_modified = 1U;
   16468:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   1646c:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   1646e:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16470:	7829      	ldrb	r1, [r5, #0]
   16472:	bf18      	it	ne
   16474:	4606      	movne	r6, r0
   16476:	78e8      	ldrb	r0, [r5, #3]
   16478:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1647c:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   16480:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   16482:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   16484:	6057      	str	r7, [r2, #4]
   16486:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   16488:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1648a:	480d      	ldr	r0, [pc, #52]	; (164c0 <lll_adv_pdu_latest_get+0x88>)
   1648c:	f009 fe26 	bl	200dc <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   16490:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   16494:	6860      	ldr	r0, [r4, #4]
}
   16496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16498:	4606      	mov	r6, r0
   1649a:	e7f9      	b.n	16490 <lll_adv_pdu_latest_get+0x58>
			LL_ASSERT(false);
   1649c:	4a09      	ldr	r2, [pc, #36]	; (164c4 <lll_adv_pdu_latest_get+0x8c>)
   1649e:	490a      	ldr	r1, [pc, #40]	; (164c8 <lll_adv_pdu_latest_get+0x90>)
   164a0:	480a      	ldr	r0, [pc, #40]	; (164cc <lll_adv_pdu_latest_get+0x94>)
   164a2:	f44f 738e 	mov.w	r3, #284	; 0x11c
   164a6:	f00c fcae 	bl	22e06 <printk>
   164aa:	4040      	eors	r0, r0
   164ac:	f380 8811 	msr	BASEPRI, r0
   164b0:	f04f 0003 	mov.w	r0, #3
   164b4:	df02      	svc	2
   164b6:	2000      	movs	r0, #0
}
   164b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   164ba:	bf00      	nop
   164bc:	200006b8 	.word	0x200006b8
   164c0:	20003a18 	.word	0x20003a18
   164c4:	0002d108 	.word	0x0002d108
   164c8:	0002c6a0 	.word	0x0002c6a0
   164cc:	0002c630 	.word	0x0002c630

000164d0 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   164d0:	7b03      	ldrb	r3, [r0, #12]
{
   164d2:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   164d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
   164d8:	2b00      	cmp	r3, #0
{
   164da:	4604      	mov	r4, r0
   164dc:	fa93 f0a3 	rbit	r0, r3
   164e0:	fab0 f080 	clz	r0, r0
   164e4:	bf08      	it	eq
   164e6:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   164ea:	1c45      	adds	r5, r0, #1
{
   164ec:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   164ee:	d041      	beq.n	16574 <chan_prepare+0xa4>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   164f0:	7b22      	ldrb	r2, [r4, #12]
   164f2:	1e59      	subs	r1, r3, #1
   164f4:	400b      	ands	r3, r1
   164f6:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   164fa:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   164fe:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   16500:	f7ff fccc 	bl	15e9c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   16504:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   16506:	f10d 0107 	add.w	r1, sp, #7
   1650a:	f104 0010 	add.w	r0, r4, #16
   1650e:	f88d 3007 	strb.w	r3, [sp, #7]
   16512:	f7ff ff91 	bl	16438 <lll_adv_pdu_latest_get>
   16516:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   16518:	f001 fa02 	bl	17920 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1651c:	782b      	ldrb	r3, [r5, #0]
   1651e:	f003 030f 	and.w	r3, r3, #15
   16522:	2b02      	cmp	r3, #2
   16524:	d01d      	beq.n	16562 <chan_prepare+0x92>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   16526:	f10d 0107 	add.w	r1, sp, #7
   1652a:	f104 001c 	add.w	r0, r4, #28
   1652e:	f7ff ff83 	bl	16438 <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   16532:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16536:	b963      	cbnz	r3, 16552 <chan_prepare+0x82>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   16538:	4621      	mov	r1, r4
   1653a:	4817      	ldr	r0, [pc, #92]	; (16598 <chan_prepare+0xc8>)
   1653c:	f001 f90e 	bl	1775c <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   16540:	2096      	movs	r0, #150	; 0x96
   16542:	f001 faef 	bl	17b24 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16546:	2000      	movs	r0, #0
   16548:	f001 fa64 	bl	17a14 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1654c:	4628      	mov	r0, r5
   1654e:	b003      	add	sp, #12
   16550:	bd30      	pop	{r4, r5, pc}
   16552:	462b      	mov	r3, r5
   16554:	f853 2f02 	ldr.w	r2, [r3, #2]!
   16558:	f8c0 2002 	str.w	r2, [r0, #2]
   1655c:	889b      	ldrh	r3, [r3, #4]
   1655e:	80c3      	strh	r3, [r0, #6]
   16560:	e7ea      	b.n	16538 <chan_prepare+0x68>
		radio_isr_set(isr_done, lll);
   16562:	480e      	ldr	r0, [pc, #56]	; (1659c <chan_prepare+0xcc>)
   16564:	4621      	mov	r1, r4
   16566:	f001 f8f9 	bl	1775c <radio_isr_set>
		radio_switch_complete_and_disable();
   1656a:	f001 fa6d 	bl	17a48 <radio_switch_complete_and_disable>
}
   1656e:	4628      	mov	r0, r5
   16570:	b003      	add	sp, #12
   16572:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   16574:	4a0a      	ldr	r2, [pc, #40]	; (165a0 <chan_prepare+0xd0>)
   16576:	490b      	ldr	r1, [pc, #44]	; (165a4 <chan_prepare+0xd4>)
   16578:	480b      	ldr	r0, [pc, #44]	; (165a8 <chan_prepare+0xd8>)
   1657a:	f240 3386 	movw	r3, #902	; 0x386
   1657e:	f00c fc42 	bl	22e06 <printk>
   16582:	4040      	eors	r0, r0
   16584:	f380 8811 	msr	BASEPRI, r0
   16588:	f04f 0003 	mov.w	r0, #3
   1658c:	df02      	svc	2
   1658e:	7b23      	ldrb	r3, [r4, #12]
   16590:	f3c3 1302 	ubfx	r3, r3, #4, #3
   16594:	e7ac      	b.n	164f0 <chan_prepare+0x20>
   16596:	bf00      	nop
   16598:	0001612d 	.word	0x0001612d
   1659c:	0001670d 	.word	0x0001670d
   165a0:	0002d108 	.word	0x0002d108
   165a4:	0002cdbc 	.word	0x0002cdbc
   165a8:	0002c630 	.word	0x0002c630

000165ac <prepare_cb>:
{
   165ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   165ae:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   165b0:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   165b2:	f015 0501 	ands.w	r5, r5, #1
{
   165b6:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   165b8:	d16e      	bne.n	16698 <prepare_cb+0xec>
	radio_reset();
   165ba:	4606      	mov	r6, r0
   165bc:	f001 f910 	bl	177e0 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   165c0:	4628      	mov	r0, r5
   165c2:	f001 f941 	bl	17848 <radio_tx_power_set>
	radio_phy_set(0, 0);
   165c6:	4629      	mov	r1, r5
   165c8:	4628      	mov	r0, r5
   165ca:	f001 f92d 	bl	17828 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   165ce:	462a      	mov	r2, r5
   165d0:	2125      	movs	r1, #37	; 0x25
   165d2:	2008      	movs	r0, #8
   165d4:	f001 f970 	bl	178b8 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   165d8:	4b3b      	ldr	r3, [pc, #236]	; (166c8 <prepare_cb+0x11c>)
   165da:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   165dc:	a801      	add	r0, sp, #4
   165de:	f001 f951 	bl	17884 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   165e2:	493a      	ldr	r1, [pc, #232]	; (166cc <prepare_cb+0x120>)
   165e4:	f240 605b 	movw	r0, #1627	; 0x65b
   165e8:	f001 f9f2 	bl	179d0 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   165ec:	7b23      	ldrb	r3, [r4, #12]
   165ee:	f3c3 0242 	ubfx	r2, r3, #1, #3
   165f2:	f362 1306 	bfi	r3, r2, #4, #3
   165f6:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   165f8:	4620      	mov	r0, r4
   165fa:	f7ff ff69 	bl	164d0 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   165fe:	f7ff f907 	bl	15810 <ull_filter_lll_rl_enabled>
   16602:	bb50      	cbnz	r0, 1665a <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   16604:	7b63      	ldrb	r3, [r4, #13]
   16606:	079b      	lsls	r3, r3, #30
   16608:	d134      	bne.n	16674 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1660a:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1660c:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1660e:	4638      	mov	r0, r7
   16610:	f7ff fc24 	bl	15e5c <lll_evt_offset_get>
   16614:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   16616:	6872      	ldr	r2, [r6, #4]
   16618:	f105 0109 	add.w	r1, r5, #9
   1661c:	2001      	movs	r0, #1
   1661e:	f001 fa8d 	bl	17b3c <radio_tmr_start>
	radio_tmr_end_capture();
   16622:	f001 fb5f 	bl	17ce4 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   16626:	4620      	mov	r0, r4
   16628:	f7f9 fbfc 	bl	fe24 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1662c:	1c81      	adds	r1, r0, #2
   1662e:	462a      	mov	r2, r5
   16630:	b2c9      	uxtb	r1, r1
   16632:	4638      	mov	r0, r7
   16634:	f7ff fc20 	bl	15e78 <lll_preempt_calc>
   16638:	b930      	cbnz	r0, 16648 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1663a:	4620      	mov	r0, r4
   1663c:	f7ff fbb4 	bl	15da8 <lll_prepare_done>
		LL_ASSERT(!ret);
   16640:	b9d0      	cbnz	r0, 16678 <prepare_cb+0xcc>
}
   16642:	2000      	movs	r0, #0
   16644:	b003      	add	sp, #12
   16646:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   16648:	4821      	ldr	r0, [pc, #132]	; (166d0 <prepare_cb+0x124>)
   1664a:	4621      	mov	r1, r4
   1664c:	f001 f886 	bl	1775c <radio_isr_set>
		radio_disable();
   16650:	f001 f97c 	bl	1794c <radio_disable>
}
   16654:	2000      	movs	r0, #0
   16656:	b003      	add	sp, #12
   16658:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1665a:	7b60      	ldrb	r0, [r4, #13]
   1665c:	f010 0003 	ands.w	r0, r0, #3
   16660:	bf18      	it	ne
   16662:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   16664:	f7ff f88a 	bl	1577c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   16668:	7841      	ldrb	r1, [r0, #1]
   1666a:	1c82      	adds	r2, r0, #2
   1666c:	7800      	ldrb	r0, [r0, #0]
   1666e:	f001 fa0b 	bl	17a88 <radio_filter_configure>
   16672:	e7ca      	b.n	1660a <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   16674:	2001      	movs	r0, #1
   16676:	e7f5      	b.n	16664 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   16678:	4a16      	ldr	r2, [pc, #88]	; (166d4 <prepare_cb+0x128>)
   1667a:	4917      	ldr	r1, [pc, #92]	; (166d8 <prepare_cb+0x12c>)
   1667c:	4817      	ldr	r0, [pc, #92]	; (166dc <prepare_cb+0x130>)
   1667e:	f44f 7308 	mov.w	r3, #544	; 0x220
   16682:	f00c fbc0 	bl	22e06 <printk>
   16686:	4040      	eors	r0, r0
   16688:	f380 8811 	msr	BASEPRI, r0
   1668c:	f04f 0003 	mov.w	r0, #3
   16690:	df02      	svc	2
}
   16692:	2000      	movs	r0, #0
   16694:	b003      	add	sp, #12
   16696:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   16698:	f7ff fd16 	bl	160c8 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1669c:	2800      	cmp	r0, #0
   1669e:	db05      	blt.n	166ac <prepare_cb+0x100>
		lll_done(NULL);
   166a0:	2000      	movs	r0, #0
   166a2:	f7ff fb83 	bl	15dac <lll_done>
}
   166a6:	2000      	movs	r0, #0
   166a8:	b003      	add	sp, #12
   166aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   166ac:	4a09      	ldr	r2, [pc, #36]	; (166d4 <prepare_cb+0x128>)
   166ae:	490c      	ldr	r1, [pc, #48]	; (166e0 <prepare_cb+0x134>)
   166b0:	480a      	ldr	r0, [pc, #40]	; (166dc <prepare_cb+0x130>)
   166b2:	f240 13c1 	movw	r3, #449	; 0x1c1
   166b6:	f00c fba6 	bl	22e06 <printk>
   166ba:	4040      	eors	r0, r0
   166bc:	f380 8811 	msr	BASEPRI, r0
   166c0:	f04f 0003 	mov.w	r0, #3
   166c4:	df02      	svc	2
   166c6:	e7eb      	b.n	166a0 <prepare_cb+0xf4>
   166c8:	8e89bed6 	.word	0x8e89bed6
   166cc:	00555555 	.word	0x00555555
   166d0:	00016115 	.word	0x00016115
   166d4:	0002d108 	.word	0x0002d108
   166d8:	0002c8bc 	.word	0x0002c8bc
   166dc:	0002c630 	.word	0x0002c630
   166e0:	0002d0cc 	.word	0x0002d0cc

000166e4 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   166e4:	68c3      	ldr	r3, [r0, #12]
{
   166e6:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   166e8:	681e      	ldr	r6, [r3, #0]
{
   166ea:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   166ec:	f7f6 fb04 	bl	ccf8 <ticker_ticks_now_get>
   166f0:	4605      	mov	r5, r0
   166f2:	4630      	mov	r0, r6
   166f4:	f7ff fbb2 	bl	15e5c <lll_evt_offset_get>
	p->remainder = 0;
   166f8:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   166fa:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   166fc:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   16700:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   16702:	4620      	mov	r0, r4
}
   16704:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   16708:	f7ff bf50 	b.w	165ac <prepare_cb>

0001670c <isr_done>:
{
   1670c:	b510      	push	{r4, lr}
   1670e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   16710:	f7ff fc1a 	bl	15f48 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   16714:	7b23      	ldrb	r3, [r4, #12]
   16716:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1671a:	2a01      	cmp	r2, #1
   1671c:	d105      	bne.n	1672a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1671e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   16722:	f362 1306 	bfi	r3, r2, #4, #3
   16726:	7323      	strb	r3, [r4, #12]
   16728:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   1672a:	f013 0f70 	tst.w	r3, #112	; 0x70
   1672e:	d106      	bne.n	1673e <isr_done+0x32>
	radio_filter_disable();
   16730:	f001 f9c6 	bl	17ac0 <radio_filter_disable>
	lll_isr_cleanup(param);
   16734:	4620      	mov	r0, r4
}
   16736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1673a:	f7ff bc13 	b.w	15f64 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1673e:	4620      	mov	r0, r4
   16740:	f7ff fec6 	bl	164d0 <chan_prepare>
		radio_tx_enable();
   16744:	f001 f8fc 	bl	17940 <radio_tx_enable>
}
   16748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1674c:	f001 baca 	b.w	17ce4 <radio_tmr_end_capture>

00016750 <lll_adv_prepare>:
{
   16750:	b510      	push	{r4, lr}
   16752:	b082      	sub	sp, #8
   16754:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   16756:	f7ff fc9f 	bl	16098 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1675a:	2800      	cmp	r0, #0
   1675c:	db1a      	blt.n	16794 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1675e:	4a14      	ldr	r2, [pc, #80]	; (167b0 <lll_adv_prepare+0x60>)
   16760:	4914      	ldr	r1, [pc, #80]	; (167b4 <lll_adv_prepare+0x64>)
   16762:	4815      	ldr	r0, [pc, #84]	; (167b8 <lll_adv_prepare+0x68>)
   16764:	9400      	str	r4, [sp, #0]
   16766:	2300      	movs	r3, #0
   16768:	f7ff fa90 	bl	15c8c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1676c:	b108      	cbz	r0, 16772 <lll_adv_prepare+0x22>
   1676e:	3077      	adds	r0, #119	; 0x77
   16770:	d101      	bne.n	16776 <lll_adv_prepare+0x26>
}
   16772:	b002      	add	sp, #8
   16774:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   16776:	4a11      	ldr	r2, [pc, #68]	; (167bc <lll_adv_prepare+0x6c>)
   16778:	4911      	ldr	r1, [pc, #68]	; (167c0 <lll_adv_prepare+0x70>)
   1677a:	4812      	ldr	r0, [pc, #72]	; (167c4 <lll_adv_prepare+0x74>)
   1677c:	f44f 739e 	mov.w	r3, #316	; 0x13c
   16780:	f00c fb41 	bl	22e06 <printk>
   16784:	4040      	eors	r0, r0
   16786:	f380 8811 	msr	BASEPRI, r0
   1678a:	f04f 0003 	mov.w	r0, #3
   1678e:	df02      	svc	2
}
   16790:	b002      	add	sp, #8
   16792:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   16794:	4a09      	ldr	r2, [pc, #36]	; (167bc <lll_adv_prepare+0x6c>)
   16796:	490c      	ldr	r1, [pc, #48]	; (167c8 <lll_adv_prepare+0x78>)
   16798:	480a      	ldr	r0, [pc, #40]	; (167c4 <lll_adv_prepare+0x74>)
   1679a:	f240 1339 	movw	r3, #313	; 0x139
   1679e:	f00c fb32 	bl	22e06 <printk>
   167a2:	4040      	eors	r0, r0
   167a4:	f380 8811 	msr	BASEPRI, r0
   167a8:	f04f 0003 	mov.w	r0, #3
   167ac:	df02      	svc	2
   167ae:	e7d6      	b.n	1675e <lll_adv_prepare+0xe>
   167b0:	000165ad 	.word	0x000165ad
   167b4:	00016255 	.word	0x00016255
   167b8:	000161e1 	.word	0x000161e1
   167bc:	0002d108 	.word	0x0002d108
   167c0:	0002d16c 	.word	0x0002d16c
   167c4:	0002c630 	.word	0x0002c630
   167c8:	0002d0cc 	.word	0x0002d0cc

000167cc <lll_adv_scan_req_check>:
{
   167cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   167d0:	7b45      	ldrb	r5, [r0, #13]
{
   167d2:	f89d 8020 	ldrb.w	r8, [sp, #32]
   167d6:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   167d8:	07ea      	lsls	r2, r5, #31
{
   167da:	4689      	mov	r9, r1
   167dc:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   167de:	d50a      	bpl.n	167f6 <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   167e0:	f1b8 0f00 	cmp.w	r8, #0
   167e4:	d017      	beq.n	16816 <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   167e6:	f899 3000 	ldrb.w	r3, [r9]
   167ea:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   167ee:	d019      	beq.n	16824 <lll_adv_scan_req_check+0x58>
{
   167f0:	2000      	movs	r0, #0
}
   167f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   167f6:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   167f8:	f811 0b02 	ldrb.w	r0, [r1], #2
   167fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   167fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16802:	f7fe ffc7 	bl	15794 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   16806:	2800      	cmp	r0, #0
   16808:	d1ed      	bne.n	167e6 <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   1680a:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1680c:	07db      	lsls	r3, r3, #31
   1680e:	d5ef      	bpl.n	167f0 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   16810:	f1b8 0f00 	cmp.w	r8, #0
   16814:	d1e7      	bne.n	167e6 <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   16816:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16818:	7818      	ldrb	r0, [r3, #0]
   1681a:	f7fe ff7f 	bl	1571c <ull_filter_lll_irk_whitelisted>
   1681e:	2800      	cmp	r0, #0
   16820:	d1e1      	bne.n	167e6 <lll_adv_scan_req_check+0x1a>
   16822:	e7e5      	b.n	167f0 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   16824:	f109 0108 	add.w	r1, r9, #8
   16828:	4630      	mov	r0, r6
   1682a:	2206      	movs	r2, #6
   1682c:	f014 ffb3 	bl	2b796 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   16830:	fab0 f080 	clz	r0, r0
   16834:	0940      	lsrs	r0, r0, #5
}
   16836:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1683a:	bf00      	nop

0001683c <lll_adv_connect_ind_check>:
{
   1683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16840:	461f      	mov	r7, r3
	if (tgt_addr) {
   16842:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   16844:	f89d 8020 	ldrb.w	r8, [sp, #32]
   16848:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1684c:	4605      	mov	r5, r0
   1684e:	460c      	mov	r4, r1
   16850:	4692      	mov	sl, r2
	if (tgt_addr) {
   16852:	b9fb      	cbnz	r3, 16894 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   16854:	7b43      	ldrb	r3, [r0, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   16856:	079a      	lsls	r2, r3, #30
   16858:	d507      	bpl.n	1686a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1685a:	b1a6      	cbz	r6, 16886 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1685c:	7823      	ldrb	r3, [r4, #0]
   1685e:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   16862:	d03a      	beq.n	168da <lll_adv_connect_ind_check+0x9e>
   16864:	2000      	movs	r0, #0
}
   16866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1686a:	f811 0b02 	ldrb.w	r0, [r1], #2
   1686e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16870:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16874:	f7fe ff8e 	bl	15794 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   16878:	2800      	cmp	r0, #0
   1687a:	d1ef      	bne.n	1685c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   1687c:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   1687e:	079b      	lsls	r3, r3, #30
   16880:	d5f0      	bpl.n	16864 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   16882:	2e00      	cmp	r6, #0
   16884:	d1ea      	bne.n	1685c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   16886:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16888:	7818      	ldrb	r0, [r3, #0]
   1688a:	f7fe ff47 	bl	1571c <ull_filter_lll_irk_whitelisted>
   1688e:	2800      	cmp	r0, #0
   16890:	d1e4      	bne.n	1685c <lll_adv_connect_ind_check+0x20>
   16892:	e7e7      	b.n	16864 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   16894:	4689      	mov	r9, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   16896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16898:	f819 0b02 	ldrb.w	r0, [r9], #2
   1689c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   168a0:	4649      	mov	r1, r9
   168a2:	f7fe ff77 	bl	15794 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   168a6:	2800      	cmp	r0, #0
   168a8:	d0dc      	beq.n	16864 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   168aa:	7823      	ldrb	r3, [r4, #0]
   168ac:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   168b0:	d1d8      	bne.n	16864 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   168b2:	4638      	mov	r0, r7
   168b4:	2206      	movs	r2, #6
   168b6:	f104 0108 	add.w	r1, r4, #8
   168ba:	f014 ff6c 	bl	2b796 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   168be:	2800      	cmp	r0, #0
   168c0:	d1d0      	bne.n	16864 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   168c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   168c4:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   168c6:	28ff      	cmp	r0, #255	; 0xff
   168c8:	d011      	beq.n	168ee <lll_adv_connect_ind_check+0xb2>
   168ca:	7bab      	ldrb	r3, [r5, #14]
   168cc:	2bff      	cmp	r3, #255	; 0xff
   168ce:	d00e      	beq.n	168ee <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   168d0:	1ac0      	subs	r0, r0, r3
   168d2:	fab0 f080 	clz	r0, r0
   168d6:	0940      	lsrs	r0, r0, #5
   168d8:	e7c5      	b.n	16866 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   168da:	f104 0108 	add.w	r1, r4, #8
   168de:	4638      	mov	r0, r7
   168e0:	2206      	movs	r2, #6
   168e2:	f014 ff58 	bl	2b796 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   168e6:	fab0 f080 	clz	r0, r0
   168ea:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   168ec:	e7bb      	b.n	16866 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   168ee:	7823      	ldrb	r3, [r4, #0]
   168f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   168f4:	4543      	cmp	r3, r8
   168f6:	d1b5      	bne.n	16864 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   168f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   168fa:	4649      	mov	r1, r9
   168fc:	2206      	movs	r2, #6
   168fe:	f014 ff4a 	bl	2b796 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   16902:	fab0 f080 	clz	r0, r0
   16906:	0940      	lsrs	r0, r0, #5
   16908:	e7ad      	b.n	16866 <lll_adv_connect_ind_check+0x2a>
   1690a:	bf00      	nop

0001690c <isr_rx>:
{
   1690c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16910:	b089      	sub	sp, #36	; 0x24
   16912:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   16914:	f001 f848 	bl	179a8 <radio_is_done>
	if (trx_done) {
   16918:	f010 0fff 	tst.w	r0, #255	; 0xff
   1691c:	d10a      	bne.n	16934 <isr_rx+0x28>
	lll_isr_status_reset();
   1691e:	f7ff fb13 	bl	15f48 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   16922:	4881      	ldr	r0, [pc, #516]	; (16b28 <isr_rx+0x21c>)
   16924:	4629      	mov	r1, r5
   16926:	f000 ff19 	bl	1775c <radio_isr_set>
	radio_disable();
   1692a:	f001 f80f 	bl	1794c <radio_disable>
}
   1692e:	b009      	add	sp, #36	; 0x24
   16930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   16934:	f001 f858 	bl	179e8 <radio_crc_is_valid>
   16938:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   1693a:	f001 f8d3 	bl	17ae4 <radio_filter_has_match>
   1693e:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   16940:	f001 f8da 	bl	17af8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   16944:	f001 fabc 	bl	17ec0 <radio_ar_has_match>
   16948:	4604      	mov	r4, r0
		irkmatch_id = radio_ar_match_get();
   1694a:	f001 fa9d 	bl	17e88 <radio_ar_match_get>
   1694e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   16950:	f001 f890 	bl	17a74 <radio_rssi_is_ready>
	lll_isr_status_reset();
   16954:	f7ff faf8 	bl	15f48 <lll_isr_status_reset>
	if (crc_ok) {
   16958:	f017 0fff 	tst.w	r7, #255	; 0xff
   1695c:	d0e1      	beq.n	16922 <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1695e:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
   16962:	f040 8086 	bne.w	16a72 <isr_rx+0x166>
   16966:	20ff      	movs	r0, #255	; 0xff
   16968:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1696c:	f001 f84a 	bl	17a04 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   16970:	7c2b      	ldrb	r3, [r5, #16]
   16972:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   16976:	4604      	mov	r4, r0
   16978:	6959      	ldr	r1, [r3, #20]
	addr = pdu_adv->adv_ind.addr;
   1697a:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1697c:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   16980:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16984:	f000 0c0f 	and.w	ip, r0, #15
   16988:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1698c:	bf08      	it	eq
   1698e:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16992:	7821      	ldrb	r1, [r4, #0]
   16994:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   16998:	bf18      	it	ne
   1699a:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1699e:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   169a0:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   169a4:	ea4f 16d0 	mov.w	r6, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   169a8:	d06a      	beq.n	16a80 <isr_rx+0x174>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   169aa:	2905      	cmp	r1, #5
   169ac:	d1b9      	bne.n	16922 <isr_rx+0x16>
   169ae:	7861      	ldrb	r1, [r4, #1]
   169b0:	2922      	cmp	r1, #34	; 0x22
   169b2:	d1b6      	bne.n	16922 <isr_rx+0x16>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   169b4:	f10d 011f 	add.w	r1, sp, #31
   169b8:	9103      	str	r1, [sp, #12]
   169ba:	e9cd 8901 	strd	r8, r9, [sp, #4]
   169be:	9600      	str	r6, [sp, #0]
   169c0:	4621      	mov	r1, r4
   169c2:	4628      	mov	r0, r5
   169c4:	f7ff ff3a 	bl	1683c <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   169c8:	2800      	cmp	r0, #0
   169ca:	d0aa      	beq.n	16922 <isr_rx+0x16>
					     devmatch_ok, &rl_idx) &&
   169cc:	68ab      	ldr	r3, [r5, #8]
   169ce:	2b00      	cmp	r3, #0
   169d0:	d0a7      	beq.n	16922 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   169d2:	2004      	movs	r0, #4
   169d4:	f7f8 fdea 	bl	f5ac <ull_pdu_rx_alloc_peek>
		if (!rx) {
   169d8:	2800      	cmp	r0, #0
   169da:	d0a2      	beq.n	16922 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   169dc:	4853      	ldr	r0, [pc, #332]	; (16b2c <isr_rx+0x220>)
   169de:	4629      	mov	r1, r5
   169e0:	f000 febc 	bl	1775c <radio_isr_set>
		radio_disable();
   169e4:	f000 ffb2 	bl	1794c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   169e8:	f000 ffd4 	bl	17994 <radio_is_ready>
   169ec:	2800      	cmp	r0, #0
   169ee:	d16e      	bne.n	16ace <isr_rx+0x1c2>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   169f0:	792b      	ldrb	r3, [r5, #4]

	hdr->is_stop = 1U;
   169f2:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   169f6:	07db      	lsls	r3, r3, #31
   169f8:	712a      	strb	r2, [r5, #4]
   169fa:	d45a      	bmi.n	16ab2 <isr_rx+0x1a6>
		rx = ull_pdu_rx_alloc();
   169fc:	f7f8 fdf4 	bl	f5e8 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   16a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   16a04:	2213      	movs	r2, #19
		rx->hdr.handle = 0xffff;
   16a06:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   16a08:	4606      	mov	r6, r0
   16a0a:	4621      	mov	r1, r4
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   16a0c:	7102      	strb	r2, [r0, #4]
   16a0e:	f100 031c 	add.w	r3, r0, #28
   16a12:	f104 0e20 	add.w	lr, r4, #32
   16a16:	680c      	ldr	r4, [r1, #0]
   16a18:	6848      	ldr	r0, [r1, #4]
   16a1a:	688a      	ldr	r2, [r1, #8]
   16a1c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   16a20:	f8c3 c00c 	str.w	ip, [r3, #12]
   16a24:	3110      	adds	r1, #16
   16a26:	4571      	cmp	r1, lr
   16a28:	601c      	str	r4, [r3, #0]
   16a2a:	6058      	str	r0, [r3, #4]
   16a2c:	609a      	str	r2, [r3, #8]
   16a2e:	f103 0310 	add.w	r3, r3, #16
   16a32:	d1f0      	bne.n	16a16 <isr_rx+0x10a>
   16a34:	680a      	ldr	r2, [r1, #0]
   16a36:	601a      	str	r2, [r3, #0]
		ftr->param = lll;
   16a38:	60b5      	str	r5, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   16a3a:	f001 f8ff 	bl	17c3c <radio_tmr_start_get>
   16a3e:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   16a40:	f001 f958 	bl	17cf4 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   16a44:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   16a46:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   16a48:	4608      	mov	r0, r1
   16a4a:	f000 ff6f 	bl	1792c <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   16a4e:	1a24      	subs	r4, r4, r0
   16a50:	6174      	str	r4, [r6, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   16a52:	b19f      	cbz	r7, 16a7c <isr_rx+0x170>
   16a54:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16a58:	76b3      	strb	r3, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   16a5a:	f7f8 fdc5 	bl	f5e8 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   16a5e:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   16a60:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   16a62:	6830      	ldr	r0, [r6, #0]
   16a64:	f7f8 fdd8 	bl	f618 <ull_rx_put>
		ull_rx_sched();
   16a68:	f7f8 fde6 	bl	f638 <ull_rx_sched>
}
   16a6c:	b009      	add	sp, #36	; 0x24
   16a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   16a72:	fa5f f088 	uxtb.w	r0, r8
   16a76:	f7fe fdff 	bl	15678 <ull_filter_lll_rl_irk_idx>
   16a7a:	e775      	b.n	16968 <isr_rx+0x5c>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   16a7c:	23ff      	movs	r3, #255	; 0xff
   16a7e:	e7eb      	b.n	16a58 <isr_rx+0x14c>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16a80:	7861      	ldrb	r1, [r4, #1]
   16a82:	290c      	cmp	r1, #12
   16a84:	f47f af4d 	bne.w	16922 <isr_rx+0x16>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   16a88:	f1b8 0f00 	cmp.w	r8, #0
   16a8c:	f47f af49 	bne.w	16922 <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   16a90:	f10d 011f 	add.w	r1, sp, #31
   16a94:	e9cd 9100 	strd	r9, r1, [sp]
   16a98:	4628      	mov	r0, r5
   16a9a:	4621      	mov	r1, r4
   16a9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   16aa0:	f7ff fe94 	bl	167cc <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   16aa4:	bb08      	cbnz	r0, 16aea <isr_rx+0x1de>
   16aa6:	7821      	ldrb	r1, [r4, #0]
   16aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16aac:	f001 010f 	and.w	r1, r1, #15
   16ab0:	e77b      	b.n	169aa <isr_rx+0x9e>
		LL_ASSERT(!ret);
   16ab2:	4a1f      	ldr	r2, [pc, #124]	; (16b30 <isr_rx+0x224>)
   16ab4:	491f      	ldr	r1, [pc, #124]	; (16b34 <isr_rx+0x228>)
   16ab6:	4820      	ldr	r0, [pc, #128]	; (16b38 <isr_rx+0x22c>)
   16ab8:	f44f 6385 	mov.w	r3, #1064	; 0x428
   16abc:	f00c f9a3 	bl	22e06 <printk>
   16ac0:	4040      	eors	r0, r0
   16ac2:	f380 8811 	msr	BASEPRI, r0
   16ac6:	f04f 0003 	mov.w	r0, #3
   16aca:	df02      	svc	2
   16acc:	e796      	b.n	169fc <isr_rx+0xf0>
		LL_ASSERT(!radio_is_ready());
   16ace:	4a18      	ldr	r2, [pc, #96]	; (16b30 <isr_rx+0x224>)
   16ad0:	491a      	ldr	r1, [pc, #104]	; (16b3c <isr_rx+0x230>)
   16ad2:	4819      	ldr	r0, [pc, #100]	; (16b38 <isr_rx+0x22c>)
   16ad4:	f240 431a 	movw	r3, #1050	; 0x41a
   16ad8:	f00c f995 	bl	22e06 <printk>
   16adc:	4040      	eors	r0, r0
   16ade:	f380 8811 	msr	BASEPRI, r0
   16ae2:	f04f 0003 	mov.w	r0, #3
   16ae6:	df02      	svc	2
   16ae8:	e782      	b.n	169f0 <isr_rx+0xe4>
		radio_isr_set(isr_done, lll);
   16aea:	4629      	mov	r1, r5
   16aec:	480e      	ldr	r0, [pc, #56]	; (16b28 <isr_rx+0x21c>)
   16aee:	f000 fe35 	bl	1775c <radio_isr_set>
		radio_switch_complete_and_disable();
   16af2:	f000 ffa9 	bl	17a48 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   16af6:	7f2b      	ldrb	r3, [r5, #28]
   16af8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   16afc:	6a28      	ldr	r0, [r5, #32]
   16afe:	f000 ff0f 	bl	17920 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16b02:	f000 ff47 	bl	17994 <radio_is_ready>
   16b06:	2800      	cmp	r0, #0
   16b08:	f43f af11 	beq.w	1692e <isr_rx+0x22>
   16b0c:	4a08      	ldr	r2, [pc, #32]	; (16b30 <isr_rx+0x224>)
   16b0e:	490b      	ldr	r1, [pc, #44]	; (16b3c <isr_rx+0x230>)
   16b10:	4809      	ldr	r0, [pc, #36]	; (16b38 <isr_rx+0x22c>)
   16b12:	f44f 7377 	mov.w	r3, #988	; 0x3dc
   16b16:	f00c f976 	bl	22e06 <printk>
   16b1a:	4040      	eors	r0, r0
   16b1c:	f380 8811 	msr	BASEPRI, r0
   16b20:	f04f 0003 	mov.w	r0, #3
   16b24:	df02      	svc	2
		if (!err) {
   16b26:	e702      	b.n	1692e <isr_rx+0x22>
   16b28:	0001670d 	.word	0x0001670d
   16b2c:	00016115 	.word	0x00016115
   16b30:	0002d108 	.word	0x0002d108
   16b34:	0002c8bc 	.word	0x0002c8bc
   16b38:	0002c630 	.word	0x0002c630
   16b3c:	0002d154 	.word	0x0002d154

00016b40 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   16b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16b42:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   16b44:	f7ff fa00 	bl	15f48 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   16b48:	f7f8 fdec 	bl	f724 <ull_event_done_extra_get>
	LL_ASSERT(e);
   16b4c:	4604      	mov	r4, r0
   16b4e:	2800      	cmp	r0, #0
   16b50:	d033      	beq.n	16bba <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   16b52:	4b21      	ldr	r3, [pc, #132]	; (16bd8 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   16b54:	4921      	ldr	r1, [pc, #132]	; (16bdc <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   16b56:	4a22      	ldr	r2, [pc, #136]	; (16be0 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   16b58:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   16b5a:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   16b5c:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   16b5e:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   16b60:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   16b62:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   16b64:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   16b66:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   16b68:	b11b      	cbz	r3, 16b72 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   16b6a:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   16b6e:	2b00      	cmp	r3, #0
   16b70:	db04      	blt.n	16b7c <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   16b72:	4628      	mov	r0, r5
}
   16b74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   16b78:	f7ff b9f4 	b.w	15f64 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   16b7c:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   16b80:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   16b84:	2b02      	cmp	r3, #2
   16b86:	d016      	beq.n	16bb6 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   16b88:	2b04      	cmp	r3, #4
   16b8a:	bf14      	ite	ne
   16b8c:	2728      	movne	r7, #40	; 0x28
   16b8e:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   16b92:	f001 f89b 	bl	17ccc <radio_tmr_aa_restore>
   16b96:	4606      	mov	r6, r0
   16b98:	f001 f89e 	bl	17cd8 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   16b9c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   16b9e:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   16ba0:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   16ba2:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   16ba6:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   16ba8:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   16baa:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   16bac:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   16bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   16bb2:	f7ff b9d7 	b.w	15f64 <lll_isr_cleanup>
	switch (phy) {
   16bb6:	2718      	movs	r7, #24
   16bb8:	e7eb      	b.n	16b92 <isr_done+0x52>
	LL_ASSERT(e);
   16bba:	4a0a      	ldr	r2, [pc, #40]	; (16be4 <isr_done+0xa4>)
   16bbc:	490a      	ldr	r1, [pc, #40]	; (16be8 <isr_done+0xa8>)
   16bbe:	480b      	ldr	r0, [pc, #44]	; (16bec <isr_done+0xac>)
   16bc0:	f240 236e 	movw	r3, #622	; 0x26e
   16bc4:	f00c f91f 	bl	22e06 <printk>
   16bc8:	4040      	eors	r0, r0
   16bca:	f380 8811 	msr	BASEPRI, r0
   16bce:	f04f 0003 	mov.w	r0, #3
   16bd2:	df02      	svc	2
   16bd4:	e7bd      	b.n	16b52 <isr_done+0x12>
   16bd6:	bf00      	nop
   16bd8:	200080f8 	.word	0x200080f8
   16bdc:	2000862c 	.word	0x2000862c
   16be0:	2000862d 	.word	0x2000862d
   16be4:	0002d190 	.word	0x0002d190
   16be8:	0002ca64 	.word	0x0002ca64
   16bec:	0002c630 	.word	0x0002c630

00016bf0 <lll_conn_init>:
{
   16bf0:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   16bf2:	f000 ff03 	bl	179fc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16bf6:	7803      	ldrb	r3, [r0, #0]
   16bf8:	2201      	movs	r2, #1
   16bfa:	f362 0301 	bfi	r3, r2, #0, #2
   16bfe:	7003      	strb	r3, [r0, #0]
}
   16c00:	2000      	movs	r0, #0
   16c02:	bd08      	pop	{r3, pc}

00016c04 <lll_conn_reset>:
}
   16c04:	2000      	movs	r0, #0
   16c06:	4770      	bx	lr

00016c08 <lll_conn_flush>:
}
   16c08:	4770      	bx	lr
   16c0a:	bf00      	nop

00016c0c <lll_conn_prepare_reset>:
	crc_valid = 0U;
   16c0c:	4805      	ldr	r0, [pc, #20]	; (16c24 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   16c0e:	4906      	ldr	r1, [pc, #24]	; (16c28 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   16c10:	4a06      	ldr	r2, [pc, #24]	; (16c2c <lll_conn_prepare_reset+0x20>)
{
   16c12:	b410      	push	{r4}
	trx_cnt = 0U;
   16c14:	2300      	movs	r3, #0
   16c16:	4c06      	ldr	r4, [pc, #24]	; (16c30 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   16c18:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   16c1a:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   16c1c:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   16c1e:	8023      	strh	r3, [r4, #0]
}
   16c20:	bc10      	pop	{r4}
   16c22:	4770      	bx	lr
   16c24:	2000862c 	.word	0x2000862c
   16c28:	2000862b 	.word	0x2000862b
   16c2c:	2000862d 	.word	0x2000862d
   16c30:	200080f8 	.word	0x200080f8

00016c34 <lll_conn_abort_cb>:
{
   16c34:	b510      	push	{r4, lr}
	if (!prepare_param) {
   16c36:	b1d0      	cbz	r0, 16c6e <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   16c38:	460c      	mov	r4, r1
   16c3a:	f7ff fa45 	bl	160c8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16c3e:	2800      	cmp	r0, #0
   16c40:	db04      	blt.n	16c4c <lll_conn_abort_cb+0x18>
	lll_done(param);
   16c42:	4620      	mov	r0, r4
}
   16c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16c48:	f7ff b8b0 	b.w	15dac <lll_done>
	LL_ASSERT(err >= 0);
   16c4c:	4a0b      	ldr	r2, [pc, #44]	; (16c7c <lll_conn_abort_cb+0x48>)
   16c4e:	490c      	ldr	r1, [pc, #48]	; (16c80 <lll_conn_abort_cb+0x4c>)
   16c50:	480c      	ldr	r0, [pc, #48]	; (16c84 <lll_conn_abort_cb+0x50>)
   16c52:	239c      	movs	r3, #156	; 0x9c
   16c54:	f00c f8d7 	bl	22e06 <printk>
   16c58:	4040      	eors	r0, r0
   16c5a:	f380 8811 	msr	BASEPRI, r0
   16c5e:	f04f 0003 	mov.w	r0, #3
   16c62:	df02      	svc	2
	lll_done(param);
   16c64:	4620      	mov	r0, r4
}
   16c66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16c6a:	f7ff b89f 	b.w	15dac <lll_done>
		radio_isr_set(isr_done, param);
   16c6e:	4806      	ldr	r0, [pc, #24]	; (16c88 <lll_conn_abort_cb+0x54>)
   16c70:	f000 fd74 	bl	1775c <radio_isr_set>
}
   16c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   16c78:	f000 be68 	b.w	1794c <radio_disable>
   16c7c:	0002d190 	.word	0x0002d190
   16c80:	0002d0cc 	.word	0x0002d0cc
   16c84:	0002c630 	.word	0x0002c630
   16c88:	00016b41 	.word	0x00016b41

00016c8c <lll_conn_rx_pkt_set>:
{
   16c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c8e:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   16c90:	2001      	movs	r0, #1
   16c92:	f7f8 fc8b 	bl	f5ac <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   16c96:	4606      	mov	r6, r0
   16c98:	b358      	cbz	r0, 16cf2 <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   16c9a:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   16c9e:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
	phy = lll->phy_rx;
   16ca2:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   16ca6:	4628      	mov	r0, r5
   16ca8:	2100      	movs	r1, #0
   16caa:	f000 fdbd 	bl	17828 <radio_phy_set>
	} else if (lll->enc_rx) {
   16cae:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16cb2:	006a      	lsls	r2, r5, #1
   16cb4:	071b      	lsls	r3, r3, #28
   16cb6:	f042 0201 	orr.w	r2, r2, #1
   16cba:	d510      	bpl.n	16cde <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   16cbc:	1d39      	adds	r1, r7, #4
   16cbe:	b2c9      	uxtb	r1, r1
   16cc0:	2008      	movs	r0, #8
   16cc2:	f000 fdf9 	bl	178b8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   16cc6:	f000 fea1 	bl	17a0c <radio_pkt_decrypt_get>
   16cca:	4629      	mov	r1, r5
   16ccc:	4602      	mov	r2, r0
   16cce:	f104 0063 	add.w	r0, r4, #99	; 0x63
   16cd2:	f001 f81b 	bl	17d0c <radio_ccm_rx_pkt_set>
}
   16cd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   16cda:	f000 be1b 	b.w	17914 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   16cde:	b2f9      	uxtb	r1, r7
   16ce0:	2008      	movs	r0, #8
   16ce2:	f000 fde9 	bl	178b8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   16ce6:	f106 001c 	add.w	r0, r6, #28
}
   16cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   16cee:	f000 be11 	b.w	17914 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   16cf2:	4a07      	ldr	r2, [pc, #28]	; (16d10 <lll_conn_rx_pkt_set+0x84>)
   16cf4:	4907      	ldr	r1, [pc, #28]	; (16d14 <lll_conn_rx_pkt_set+0x88>)
   16cf6:	4808      	ldr	r0, [pc, #32]	; (16d18 <lll_conn_rx_pkt_set+0x8c>)
   16cf8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   16cfc:	f00c f883 	bl	22e06 <printk>
   16d00:	4040      	eors	r0, r0
   16d02:	f380 8811 	msr	BASEPRI, r0
   16d06:	f04f 0003 	mov.w	r0, #3
   16d0a:	df02      	svc	2
   16d0c:	e7c5      	b.n	16c9a <lll_conn_rx_pkt_set+0xe>
   16d0e:	bf00      	nop
   16d10:	0002d190 	.word	0x0002d190
   16d14:	0002d1dc 	.word	0x0002d1dc
   16d18:	0002c630 	.word	0x0002c630

00016d1c <lll_conn_isr_tx>:
{
   16d1c:	b538      	push	{r3, r4, r5, lr}
   16d1e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   16d20:	f7ff f900 	bl	15f24 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   16d24:	2096      	movs	r0, #150	; 0x96
   16d26:	f000 fefd 	bl	17b24 <radio_tmr_tifs_set>
				     lll->phy_flags);
   16d2a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   16d2e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   16d32:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   16d36:	f000 0007 	and.w	r0, r0, #7
   16d3a:	f002 0207 	and.w	r2, r2, #7
   16d3e:	2100      	movs	r1, #0
   16d40:	f000 fe76 	bl	17a30 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   16d44:	4620      	mov	r0, r4
   16d46:	f7ff ffa1 	bl	16c8c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   16d4a:	f000 fe23 	bl	17994 <radio_is_ready>
   16d4e:	bb58      	cbnz	r0, 16da8 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   16d50:	f000 ffd6 	bl	17d00 <radio_tmr_tifs_base_get>
   16d54:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   16d56:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   16d5a:	2101      	movs	r1, #1
   16d5c:	f000 0007 	and.w	r0, r0, #7
   16d60:	f000 fde8 	bl	17934 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   16d64:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   16d68:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   16d6c:	4405      	add	r5, r0
   16d6e:	2b02      	cmp	r3, #2
   16d70:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   16d74:	d016      	beq.n	16da4 <lll_conn_isr_tx+0x88>
		return 376;
   16d76:	2b04      	cmp	r3, #4
   16d78:	bf14      	ite	ne
   16d7a:	2328      	movne	r3, #40	; 0x28
   16d7c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   16d80:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   16d84:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   16d88:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   16d8c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   16d8e:	f000 fdcd 	bl	1792c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16d92:	1a28      	subs	r0, r5, r0
   16d94:	f000 ff6c 	bl	17c70 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   16d98:	4621      	mov	r1, r4
   16d9a:	480a      	ldr	r0, [pc, #40]	; (16dc4 <lll_conn_isr_tx+0xa8>)
}
   16d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   16da0:	f000 bcdc 	b.w	1775c <radio_isr_set>
	switch (phy) {
   16da4:	2318      	movs	r3, #24
   16da6:	e7eb      	b.n	16d80 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   16da8:	4a07      	ldr	r2, [pc, #28]	; (16dc8 <lll_conn_isr_tx+0xac>)
   16daa:	4908      	ldr	r1, [pc, #32]	; (16dcc <lll_conn_isr_tx+0xb0>)
   16dac:	4808      	ldr	r0, [pc, #32]	; (16dd0 <lll_conn_isr_tx+0xb4>)
   16dae:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   16db2:	f00c f828 	bl	22e06 <printk>
   16db6:	4040      	eors	r0, r0
   16db8:	f380 8811 	msr	BASEPRI, r0
   16dbc:	f04f 0003 	mov.w	r0, #3
   16dc0:	df02      	svc	2
   16dc2:	e7c5      	b.n	16d50 <lll_conn_isr_tx+0x34>
   16dc4:	00016f0d 	.word	0x00016f0d
   16dc8:	0002d190 	.word	0x0002d190
   16dcc:	0002d154 	.word	0x0002d154
   16dd0:	0002c630 	.word	0x0002c630

00016dd4 <lll_conn_tx_pkt_set>:
{
   16dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16dd6:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   16dd8:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   16ddc:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   16de0:	f001 0407 	and.w	r4, r1, #7
{
   16de4:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   16de6:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   16dea:	4620      	mov	r0, r4
   16dec:	f000 fd1c 	bl	17828 <radio_phy_set>
	} else if (lll->enc_tx) {
   16df0:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   16df4:	0062      	lsls	r2, r4, #1
   16df6:	06db      	lsls	r3, r3, #27
   16df8:	f042 0201 	orr.w	r2, r2, #1
   16dfc:	b2f1      	uxtb	r1, r6
   16dfe:	d50d      	bpl.n	16e1c <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   16e00:	3104      	adds	r1, #4
   16e02:	b2c9      	uxtb	r1, r1
   16e04:	2008      	movs	r0, #8
   16e06:	f000 fd57 	bl	178b8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   16e0a:	4639      	mov	r1, r7
   16e0c:	f105 0084 	add.w	r0, r5, #132	; 0x84
   16e10:	f000 ffb2 	bl	17d78 <radio_ccm_tx_pkt_set>
}
   16e14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   16e18:	f000 bd82 	b.w	17920 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   16e1c:	2008      	movs	r0, #8
   16e1e:	f000 fd4b 	bl	178b8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   16e22:	4638      	mov	r0, r7
}
   16e24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   16e28:	f000 bd7a 	b.w	17920 <radio_pkt_tx_set>

00016e2c <lll_conn_pdu_tx_prep>:
{
   16e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e30:	4604      	mov	r4, r0
   16e32:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   16e34:	aa01      	add	r2, sp, #4
   16e36:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   16e38:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   16e3a:	6d21      	ldr	r1, [r4, #80]	; 0x50
   16e3c:	f7f4 fbcc 	bl	b5d8 <memq_peek>
	if (lll->empty || !link) {
   16e40:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16e44:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   16e46:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   16e48:	d432      	bmi.n	16eb0 <lll_conn_pdu_tx_prep+0x84>
   16e4a:	2800      	cmp	r0, #0
   16e4c:	d04e      	beq.n	16eec <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   16e4e:	9a01      	ldr	r2, [sp, #4]
   16e50:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   16e54:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   16e58:	f102 0804 	add.w	r8, r2, #4
   16e5c:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   16e60:	b913      	cbnz	r3, 16e68 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   16e62:	786b      	ldrb	r3, [r5, #1]
   16e64:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   16e68:	b137      	cbz	r7, 16e78 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16e6a:	f818 2007 	ldrb.w	r2, [r8, r7]
   16e6e:	2101      	movs	r1, #1
   16e70:	f361 0201 	bfi	r2, r1, #0, #2
   16e74:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   16e78:	1bdb      	subs	r3, r3, r7
   16e7a:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   16e7c:	4620      	mov	r0, r4
   16e7e:	f7fd fbaf 	bl	145e0 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   16e82:	786b      	ldrb	r3, [r5, #1]
   16e84:	4283      	cmp	r3, r0
   16e86:	d924      	bls.n	16ed2 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   16e88:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   16e8a:	f818 3007 	ldrb.w	r3, [r8, r7]
   16e8e:	f043 0310 	orr.w	r3, r3, #16
   16e92:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   16e96:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   16e9a:	2200      	movs	r2, #0
		p->rfu = 0U;
   16e9c:	f36f 1347 	bfc	r3, #5, #3
   16ea0:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   16ea4:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   16ea6:	f8c9 5000 	str.w	r5, [r9]
}
   16eaa:	b003      	add	sp, #12
   16eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   16eb0:	f043 0304 	orr.w	r3, r3, #4
   16eb4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   16eb8:	f000 fda0 	bl	179fc <radio_pkt_empty_get>
   16ebc:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   16ebe:	b1e6      	cbz	r6, 16efa <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   16ec0:	7803      	ldrb	r3, [r0, #0]
   16ec2:	f043 0310 	orr.w	r3, r3, #16
   16ec6:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   16ec8:	f8c9 5000 	str.w	r5, [r9]
}
   16ecc:	b003      	add	sp, #12
   16ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   16ed2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16ed4:	6832      	ldr	r2, [r6, #0]
   16ed6:	429a      	cmp	r2, r3
			p->md = 1U;
   16ed8:	f818 3007 	ldrb.w	r3, [r8, r7]
   16edc:	bf14      	ite	ne
   16ede:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   16ee2:	f36f 1304 	bfceq	r3, #4, #1
   16ee6:	f808 3007 	strb.w	r3, [r8, r7]
   16eea:	e7d4      	b.n	16e96 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   16eec:	f043 0304 	orr.w	r3, r3, #4
   16ef0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   16ef4:	f000 fd82 	bl	179fc <radio_pkt_empty_get>
   16ef8:	4605      	mov	r5, r0
			p->md = 0U;
   16efa:	782b      	ldrb	r3, [r5, #0]
   16efc:	f36f 1304 	bfc	r3, #4, #1
   16f00:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   16f02:	f8c9 5000 	str.w	r5, [r9]
}
   16f06:	b003      	add	sp, #12
   16f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00016f0c <lll_conn_isr_rx>:
{
   16f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16f10:	b082      	sub	sp, #8
   16f12:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   16f14:	f000 fd48 	bl	179a8 <radio_is_done>
	if (trx_done) {
   16f18:	f010 0fff 	tst.w	r0, #255	; 0xff
   16f1c:	d10a      	bne.n	16f34 <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   16f1e:	f7ff f809 	bl	15f34 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   16f22:	48b2      	ldr	r0, [pc, #712]	; (171ec <lll_conn_isr_rx+0x2e0>)
   16f24:	4621      	mov	r1, r4
   16f26:	f000 fc19 	bl	1775c <radio_isr_set>
		radio_disable();
   16f2a:	f000 fd0f 	bl	1794c <radio_disable>
}
   16f2e:	b002      	add	sp, #8
   16f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = radio_crc_is_valid();
   16f34:	f000 fd58 	bl	179e8 <radio_crc_is_valid>
   16f38:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   16f3a:	f000 fd9b 	bl	17a74 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   16f3e:	f7fe fff9 	bl	15f34 <lll_isr_rx_status_reset>
	trx_cnt++;
   16f42:	4aab      	ldr	r2, [pc, #684]	; (171f0 <lll_conn_isr_rx+0x2e4>)
   16f44:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   16f46:	2001      	movs	r0, #1
	trx_cnt++;
   16f48:	4403      	add	r3, r0
   16f4a:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   16f4c:	f7f8 fb2e 	bl	f5ac <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   16f50:	4606      	mov	r6, r0
   16f52:	2800      	cmp	r0, #0
   16f54:	f000 80c6 	beq.w	170e4 <lll_conn_isr_rx+0x1d8>
	if (crc_ok) {
   16f58:	2d00      	cmp	r5, #0
   16f5a:	d15b      	bne.n	17014 <lll_conn_isr_rx+0x108>
		if (crc_expire == 0U) {
   16f5c:	4ba5      	ldr	r3, [pc, #660]	; (171f4 <lll_conn_isr_rx+0x2e8>)
   16f5e:	781f      	ldrb	r7, [r3, #0]
   16f60:	2f00      	cmp	r7, #0
   16f62:	f040 80ae 	bne.w	170c2 <lll_conn_isr_rx+0x1b6>
		crc_expire--;
   16f66:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   16f68:	a901      	add	r1, sp, #4
   16f6a:	4620      	mov	r0, r4
		crc_expire--;
   16f6c:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   16f6e:	f7ff ff5d 	bl	16e2c <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   16f72:	2096      	movs	r0, #150	; 0x96
   16f74:	f000 fdd6 	bl	17b24 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   16f78:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   16f7c:	f000 0007 	and.w	r0, r0, #7
   16f80:	f000 fd48 	bl	17a14 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   16f84:	489c      	ldr	r0, [pc, #624]	; (171f8 <lll_conn_isr_rx+0x2ec>)
   16f86:	4621      	mov	r1, r4
   16f88:	f000 fbe8 	bl	1775c <radio_isr_set>
		radio_tmr_end_capture();
   16f8c:	f000 feaa 	bl	17ce4 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   16f90:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   16f94:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   16f96:	f3c2 0340 	ubfx	r3, r2, #1, #1
   16f9a:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   16f9c:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   16fa0:	009b      	lsls	r3, r3, #2
   16fa2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   16fa6:	f020 020c 	bic.w	r2, r0, #12
   16faa:	4313      	orrs	r3, r2
   16fac:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   16fae:	4620      	mov	r0, r4
   16fb0:	f7ff ff10 	bl	16dd4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   16fb4:	f000 fcee 	bl	17994 <radio_is_ready>
   16fb8:	2800      	cmp	r0, #0
   16fba:	f040 80cb 	bne.w	17154 <lll_conn_isr_rx+0x248>
	if (!radio_tmr_aa_restore()) {
   16fbe:	f000 fe85 	bl	17ccc <radio_tmr_aa_restore>
   16fc2:	b1f0      	cbz	r0, 17002 <lll_conn_isr_rx+0xf6>
	if (tx_release) {
   16fc4:	b31d      	cbz	r5, 1700e <lll_conn_isr_rx+0x102>
		LL_ASSERT(lll->handle != 0xFFFF);
   16fc6:	8a20      	ldrh	r0, [r4, #16]
   16fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16fcc:	4298      	cmp	r0, r3
   16fce:	f000 80e3 	beq.w	17198 <lll_conn_isr_rx+0x28c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   16fd2:	4629      	mov	r1, r5
   16fd4:	f7fd f9b8 	bl	14348 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   16fd8:	b177      	cbz	r7, 16ff8 <lll_conn_isr_rx+0xec>
		if (lll->enc_rx) {
   16fda:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16fde:	071b      	lsls	r3, r3, #28
   16fe0:	f100 80d1 	bmi.w	17186 <lll_conn_isr_rx+0x27a>
		ull_pdu_rx_alloc();
   16fe4:	f7f8 fb00 	bl	f5e8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16fe8:	2303      	movs	r3, #3
   16fea:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   16fec:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   16fee:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   16ff0:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   16ff2:	4631      	mov	r1, r6
   16ff4:	f7f8 fb10 	bl	f618 <ull_rx_put>
		ull_rx_sched();
   16ff8:	f7f8 fb1e 	bl	f638 <ull_rx_sched>
}
   16ffc:	b002      	add	sp, #8
   16ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   17002:	f000 fe57 	bl	17cb4 <radio_tmr_aa_get>
   17006:	f000 fe5b 	bl	17cc0 <radio_tmr_aa_save>
	if (tx_release) {
   1700a:	2d00      	cmp	r5, #0
   1700c:	d1db      	bne.n	16fc6 <lll_conn_isr_rx+0xba>
	if (is_rx_enqueue) {
   1700e:	2f00      	cmp	r7, #0
   17010:	d1e3      	bne.n	16fda <lll_conn_isr_rx+0xce>
   17012:	e78c      	b.n	16f2e <lll_conn_isr_rx+0x22>
	if (lll->enc_rx) {
   17014:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17018:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   1701a:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   1701e:	f100 8090 	bmi.w	17142 <lll_conn_isr_rx+0x236>
	if (pdu_data_rx->nesn != lll->sn) {
   17022:	7f32      	ldrb	r2, [r6, #28]
   17024:	f003 0101 	and.w	r1, r3, #1
   17028:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1702c:	4288      	cmp	r0, r1
   1702e:	d069      	beq.n	17104 <lll_conn_isr_rx+0x1f8>
		if (lll->role) {
   17030:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   17034:	f081 0101 	eor.w	r1, r1, #1
   17038:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1703c:	2a00      	cmp	r2, #0
		lll->sn++;
   1703e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   17042:	da05      	bge.n	17050 <lll_conn_isr_rx+0x144>
			lll->slave.latency_enabled = 1;
   17044:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   17048:	f043 0301 	orr.w	r3, r3, #1
   1704c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   17050:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17054:	075a      	lsls	r2, r3, #29
   17056:	f100 808b 	bmi.w	17170 <lll_conn_isr_rx+0x264>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1705a:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1705e:	aa01      	add	r2, sp, #4
   17060:	f7f4 faba 	bl	b5d8 <memq_peek>
		if (link) {
   17064:	4680      	mov	r8, r0
   17066:	2800      	cmp	r0, #0
   17068:	f000 8088 	beq.w	1717c <lll_conn_isr_rx+0x270>
					       lll->packet_tx_head_offset);
   1706c:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   17070:	9b01      	ldr	r3, [sp, #4]
   17072:	4413      	add	r3, r2
   17074:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   17076:	b151      	cbz	r1, 1708e <lll_conn_isr_rx+0x182>
				if (lll->enc_tx) {
   17078:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1707c:	06dd      	lsls	r5, r3, #27
   1707e:	d506      	bpl.n	1708e <lll_conn_isr_rx+0x182>
					lll->ccm_tx.counter++;
   17080:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   17084:	3301      	adds	r3, #1
   17086:	f140 0000 	adc.w	r0, r0, #0
   1708a:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1708e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   17092:	440a      	add	r2, r1
   17094:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   17096:	429a      	cmp	r2, r3
   17098:	f0c0 808d 	bcc.w	171b6 <lll_conn_isr_rx+0x2aa>
			} else if (offset == lll->packet_tx_head_len) {
   1709c:	d16e      	bne.n	1717c <lll_conn_isr_rx+0x270>
				lll->packet_tx_head_len = 0;
   1709e:	2200      	movs	r2, #0
   170a0:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   170a4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   170a6:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   170aa:	f7f4 fa9d 	bl	b5e8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   170ae:	9d01      	ldr	r5, [sp, #4]
   170b0:	7f32      	ldrb	r2, [r6, #28]
   170b2:	682b      	ldr	r3, [r5, #0]
   170b4:	f8c8 3000 	str.w	r3, [r8]
				tx->next = link;
   170b8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   170bc:	f8c5 8000 	str.w	r8, [r5]
				*tx_release = tx;
   170c0:	e021      	b.n	17106 <lll_conn_isr_rx+0x1fa>
		crc_expire--;
   170c2:	3f01      	subs	r7, #1
   170c4:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   170c6:	a901      	add	r1, sp, #4
   170c8:	4620      	mov	r0, r4
		crc_expire--;
   170ca:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   170cc:	f7ff feae 	bl	16e2c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   170d0:	2f00      	cmp	r7, #0
   170d2:	f040 80e9 	bne.w	172a8 <lll_conn_isr_rx+0x39c>
		radio_isr_set(isr_done, param);
   170d6:	4845      	ldr	r0, [pc, #276]	; (171ec <lll_conn_isr_rx+0x2e0>)
   170d8:	4621      	mov	r1, r4
   170da:	f000 fb3f 	bl	1775c <radio_isr_set>
			radio_switch_complete_and_disable();
   170de:	f000 fcb3 	bl	17a48 <radio_switch_complete_and_disable>
   170e2:	e755      	b.n	16f90 <lll_conn_isr_rx+0x84>
	LL_ASSERT(node_rx);
   170e4:	4a45      	ldr	r2, [pc, #276]	; (171fc <lll_conn_isr_rx+0x2f0>)
   170e6:	4946      	ldr	r1, [pc, #280]	; (17200 <lll_conn_isr_rx+0x2f4>)
   170e8:	4846      	ldr	r0, [pc, #280]	; (17204 <lll_conn_isr_rx+0x2f8>)
   170ea:	23d1      	movs	r3, #209	; 0xd1
   170ec:	f00b fe8b 	bl	22e06 <printk>
   170f0:	4040      	eors	r0, r0
   170f2:	f380 8811 	msr	BASEPRI, r0
   170f6:	f04f 0003 	mov.w	r0, #3
   170fa:	df02      	svc	2
	if (crc_ok) {
   170fc:	2d00      	cmp	r5, #0
   170fe:	f43f af2d 	beq.w	16f5c <lll_conn_isr_rx+0x50>
   17102:	e787      	b.n	17014 <lll_conn_isr_rx+0x108>
	tx_release = NULL;
   17104:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   17106:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1710a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1710e:	429a      	cmp	r2, r3
   17110:	d058      	beq.n	171c4 <lll_conn_isr_rx+0x2b8>
	is_rx_enqueue = 0U;
   17112:	2700      	movs	r7, #0
		crc_expire = 0U;
   17114:	4a37      	ldr	r2, [pc, #220]	; (171f4 <lll_conn_isr_rx+0x2e8>)
		crc_valid = 1U;
   17116:	4b3c      	ldr	r3, [pc, #240]	; (17208 <lll_conn_isr_rx+0x2fc>)
		crc_expire = 0U;
   17118:	2100      	movs	r1, #0
   1711a:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1711c:	4620      	mov	r0, r4
		crc_valid = 1U;
   1711e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17120:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   17122:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17124:	f7ff fe82 	bl	16e2c <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   17128:	7f33      	ldrb	r3, [r6, #28]
   1712a:	06d9      	lsls	r1, r3, #27
   1712c:	f53f af21 	bmi.w	16f72 <lll_conn_isr_rx+0x66>
			      (pdu_data_tx->md == 0) &&
   17130:	9b01      	ldr	r3, [sp, #4]
   17132:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   17134:	06d2      	lsls	r2, r2, #27
   17136:	f53f af1c 	bmi.w	16f72 <lll_conn_isr_rx+0x66>
			      (pdu_data_tx->md == 0) &&
   1713a:	785b      	ldrb	r3, [r3, #1]
   1713c:	2b00      	cmp	r3, #0
   1713e:	d0ca      	beq.n	170d6 <lll_conn_isr_rx+0x1ca>
   17140:	e717      	b.n	16f72 <lll_conn_isr_rx+0x66>
		pkt_decrypt = radio_pkt_decrypt_get();
   17142:	f000 fc63 	bl	17a0c <radio_pkt_decrypt_get>
   17146:	7883      	ldrb	r3, [r0, #2]
   17148:	8802      	ldrh	r2, [r0, #0]
   1714a:	83b2      	strh	r2, [r6, #28]
   1714c:	70bb      	strb	r3, [r7, #2]
   1714e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17152:	e766      	b.n	17022 <lll_conn_isr_rx+0x116>
	LL_ASSERT(!radio_is_ready());
   17154:	4a29      	ldr	r2, [pc, #164]	; (171fc <lll_conn_isr_rx+0x2f0>)
   17156:	492d      	ldr	r1, [pc, #180]	; (1720c <lll_conn_isr_rx+0x300>)
   17158:	482a      	ldr	r0, [pc, #168]	; (17204 <lll_conn_isr_rx+0x2f8>)
   1715a:	f240 133d 	movw	r3, #317	; 0x13d
   1715e:	f00b fe52 	bl	22e06 <printk>
   17162:	4040      	eors	r0, r0
   17164:	f380 8811 	msr	BASEPRI, r0
   17168:	f04f 0003 	mov.w	r0, #3
   1716c:	df02      	svc	2
   1716e:	e726      	b.n	16fbe <lll_conn_isr_rx+0xb2>
			lll->empty = 0;
   17170:	f36f 0382 	bfc	r3, #2, #1
   17174:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   17178:	f000 fc40 	bl	179fc <radio_pkt_empty_get>
		if (link) {
   1717c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17180:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   17182:	2500      	movs	r5, #0
   17184:	e7bf      	b.n	17106 <lll_conn_isr_rx+0x1fa>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   17186:	f000 fc41 	bl	17a0c <radio_pkt_decrypt_get>
   1718a:	7f72      	ldrb	r2, [r6, #29]
   1718c:	1cc1      	adds	r1, r0, #3
   1718e:	f106 001f 	add.w	r0, r6, #31
   17192:	f014 fb0e 	bl	2b7b2 <memcpy>
   17196:	e725      	b.n	16fe4 <lll_conn_isr_rx+0xd8>
		LL_ASSERT(lll->handle != 0xFFFF);
   17198:	4a18      	ldr	r2, [pc, #96]	; (171fc <lll_conn_isr_rx+0x2f0>)
   1719a:	491d      	ldr	r1, [pc, #116]	; (17210 <lll_conn_isr_rx+0x304>)
   1719c:	4819      	ldr	r0, [pc, #100]	; (17204 <lll_conn_isr_rx+0x2f8>)
   1719e:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   171a2:	f00b fe30 	bl	22e06 <printk>
   171a6:	4040      	eors	r0, r0
   171a8:	f380 8811 	msr	BASEPRI, r0
   171ac:	f04f 0003 	mov.w	r0, #3
   171b0:	df02      	svc	2
   171b2:	8a20      	ldrh	r0, [r4, #16]
   171b4:	e70d      	b.n	16fd2 <lll_conn_isr_rx+0xc6>
				lll->packet_tx_head_offset = offset;
   171b6:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   171ba:	7f32      	ldrb	r2, [r6, #28]
   171bc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	tx_release = NULL;
   171c0:	2500      	movs	r5, #0
   171c2:	e7a0      	b.n	17106 <lll_conn_isr_rx+0x1fa>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   171c4:	2003      	movs	r0, #3
   171c6:	f7f8 f9f1 	bl	f5ac <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   171ca:	2800      	cmp	r0, #0
   171cc:	d0a1      	beq.n	17112 <lll_conn_isr_rx+0x206>
		lll->nesn++;
   171ce:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   171d2:	f083 0302 	eor.w	r3, r3, #2
   171d6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   171da:	7f73      	ldrb	r3, [r6, #29]
   171dc:	2b00      	cmp	r3, #0
   171de:	d098      	beq.n	17112 <lll_conn_isr_rx+0x206>
			if (lll->enc_rx) {
   171e0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   171e4:	0718      	lsls	r0, r3, #28
   171e6:	d415      	bmi.n	17214 <lll_conn_isr_rx+0x308>
			*is_rx_enqueue = 1U;
   171e8:	2701      	movs	r7, #1
   171ea:	e793      	b.n	17114 <lll_conn_isr_rx+0x208>
   171ec:	00016b41 	.word	0x00016b41
   171f0:	200080f8 	.word	0x200080f8
   171f4:	2000862b 	.word	0x2000862b
   171f8:	00016d1d 	.word	0x00016d1d
   171fc:	0002d190 	.word	0x0002d190
   17200:	0002d1dc 	.word	0x0002d1dc
   17204:	0002c630 	.word	0x0002c630
   17208:	2000862c 	.word	0x2000862c
   1720c:	0002d154 	.word	0x0002d154
   17210:	0002d1ec 	.word	0x0002d1ec
				done = radio_ccm_is_done();
   17214:	f000 fdda 	bl	17dcc <radio_ccm_is_done>
				LL_ASSERT(done);
   17218:	b3c0      	cbz	r0, 1728c <lll_conn_isr_rx+0x380>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1721a:	f000 fdf9 	bl	17e10 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1721e:	bb28      	cbnz	r0, 1726c <lll_conn_isr_rx+0x360>
				    lll->ccm_rx.counter == 0 &&
   17220:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   17224:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   17228:	4313      	orrs	r3, r2
   1722a:	d104      	bne.n	17236 <lll_conn_isr_rx+0x32a>
				    (pdu_data_rx->ll_id ==
   1722c:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1722e:	f003 0303 	and.w	r3, r3, #3
   17232:	2b03      	cmp	r3, #3
   17234:	d004      	beq.n	17240 <lll_conn_isr_rx+0x334>
					mic_state = LLL_CONN_MIC_FAIL;
   17236:	4b1d      	ldr	r3, [pc, #116]	; (172ac <lll_conn_isr_rx+0x3a0>)
   17238:	2202      	movs	r2, #2
   1723a:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1723c:	2700      	movs	r7, #0
   1723e:	e6be      	b.n	16fbe <lll_conn_isr_rx+0xb2>
						radio_pkt_scratch_get();
   17240:	f000 fbe0 	bl	17a04 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   17244:	7842      	ldrb	r2, [r0, #1]
   17246:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   17248:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1724a:	d8f4      	bhi.n	17236 <lll_conn_isr_rx+0x32a>
   1724c:	3203      	adds	r2, #3
   1724e:	4638      	mov	r0, r7
   17250:	f014 faaf 	bl	2b7b2 <memcpy>
						lll->ccm_rx.counter--;
   17254:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   17258:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1725c:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   17260:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   17264:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   17268:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1726c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   17270:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   17274:	490d      	ldr	r1, [pc, #52]	; (172ac <lll_conn_isr_rx+0x3a0>)
				lll->ccm_rx.counter++;
   17276:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   17278:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1727c:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   17280:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   17282:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   17286:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   17288:	6042      	str	r2, [r0, #4]
		if (err) {
   1728a:	e743      	b.n	17114 <lll_conn_isr_rx+0x208>
				LL_ASSERT(done);
   1728c:	4a08      	ldr	r2, [pc, #32]	; (172b0 <lll_conn_isr_rx+0x3a4>)
   1728e:	4909      	ldr	r1, [pc, #36]	; (172b4 <lll_conn_isr_rx+0x3a8>)
   17290:	4809      	ldr	r0, [pc, #36]	; (172b8 <lll_conn_isr_rx+0x3ac>)
   17292:	f44f 7344 	mov.w	r3, #784	; 0x310
   17296:	f00b fdb6 	bl	22e06 <printk>
   1729a:	4040      	eors	r0, r0
   1729c:	f380 8811 	msr	BASEPRI, r0
   172a0:	f04f 0003 	mov.w	r0, #3
   172a4:	df02      	svc	2
   172a6:	e7b8      	b.n	1721a <lll_conn_isr_rx+0x30e>
	is_rx_enqueue = 0U;
   172a8:	462f      	mov	r7, r5
   172aa:	e662      	b.n	16f72 <lll_conn_isr_rx+0x66>
   172ac:	2000862d 	.word	0x2000862d
   172b0:	0002d190 	.word	0x0002d190
   172b4:	0002d1e4 	.word	0x0002d1e4
   172b8:	0002c630 	.word	0x0002c630

000172bc <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   172bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   172c0:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   172c2:	8a22      	ldrh	r2, [r4, #16]
   172c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   172c8:	429a      	cmp	r2, r3
{
   172ca:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   172cc:	f000 80c3 	beq.w	17456 <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   172d0:	4605      	mov	r5, r0
   172d2:	f7ff fc9b 	bl	16c0c <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   172d6:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   172d8:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   172da:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   172de:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   172e0:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   172e2:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   172e4:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   172e6:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   172e8:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   172ea:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   172ec:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   172ee:	f104 021c 	add.w	r2, r4, #28
   172f2:	f100 808f 	bmi.w	17414 <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   172f6:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   172fa:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   172fe:	9600      	str	r6, [sp, #0]
   17300:	4613      	mov	r3, r2
   17302:	4602      	mov	r2, r0
   17304:	f104 0023 	add.w	r0, r4, #35	; 0x23
   17308:	f7fd fac8 	bl	1489c <lll_chan_sel_1>
   1730c:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1730e:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   17312:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   17314:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   17318:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1731a:	428a      	cmp	r2, r1
   1731c:	bf28      	it	cs
   1731e:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   17320:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   17322:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   17324:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   17326:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   17328:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1732a:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1732c:	f000 fa58 	bl	177e0 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   17330:	4630      	mov	r0, r6
   17332:	f000 fa89 	bl	17848 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   17336:	4620      	mov	r0, r4
   17338:	f7ff fca8 	bl	16c8c <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1733c:	f104 0008 	add.w	r0, r4, #8
   17340:	f000 faa0 	bl	17884 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   17344:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   17346:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   17348:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1734a:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1734c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   17350:	4319      	orrs	r1, r3
   17352:	f240 605b 	movw	r0, #1627	; 0x65b
   17356:	f000 fb3b 	bl	179d0 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1735a:	4638      	mov	r0, r7
   1735c:	f7fe fd9e 	bl	15e9c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   17360:	4621      	mov	r1, r4
   17362:	4849      	ldr	r0, [pc, #292]	; (17488 <prepare_cb+0x1cc>)
   17364:	f000 f9fa 	bl	1775c <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   17368:	2096      	movs	r0, #150	; 0x96
   1736a:	f000 fbdb 	bl	17b24 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1736e:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   17372:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   17376:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1737a:	4631      	mov	r1, r6
   1737c:	f002 0207 	and.w	r2, r2, #7
   17380:	f000 0007 	and.w	r0, r0, #7
   17384:	f000 fb54 	bl	17a30 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   17388:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1738c:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1738e:	4640      	mov	r0, r8
   17390:	f7fe fd64 	bl	15e5c <lll_evt_offset_get>
   17394:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   17396:	686a      	ldr	r2, [r5, #4]
   17398:	f107 0109 	add.w	r1, r7, #9
   1739c:	4630      	mov	r0, r6
   1739e:	f000 fbcd 	bl	17b3c <radio_tmr_start>
   173a2:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   173a4:	f000 fc72 	bl	17c8c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   173a8:	4630      	mov	r0, r6
   173aa:	f000 fc89 	bl	17cc0 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   173ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   173b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   173b2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   173b6:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   173b8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   173bc:	f000 0007 	and.w	r0, r0, #7
   173c0:	2101      	movs	r1, #1
	hcto = remainder_us +
   173c2:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   173c4:	f000 fab4 	bl	17930 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   173c8:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   173cc:	f002 0207 	and.w	r2, r2, #7
   173d0:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   173d2:	4405      	add	r5, r0
   173d4:	d03d      	beq.n	17452 <prepare_cb+0x196>
		return 40;
   173d6:	2a04      	cmp	r2, #4
   173d8:	bf0c      	ite	eq
   173da:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   173de:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   173e0:	4610      	mov	r0, r2
   173e2:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   173e4:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   173e6:	f000 faa5 	bl	17934 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   173ea:	4428      	add	r0, r5
   173ec:	f000 fc40 	bl	17c70 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   173f0:	7c21      	ldrb	r1, [r4, #16]
   173f2:	3103      	adds	r1, #3
   173f4:	463a      	mov	r2, r7
   173f6:	4640      	mov	r0, r8
   173f8:	b2c9      	uxtb	r1, r1
   173fa:	f7fe fd3d 	bl	15e78 <lll_preempt_calc>
   173fe:	b190      	cbz	r0, 17426 <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   17400:	4822      	ldr	r0, [pc, #136]	; (1748c <prepare_cb+0x1d0>)
   17402:	4621      	mov	r1, r4
   17404:	f000 f9aa 	bl	1775c <radio_isr_set>
		radio_disable();
   17408:	f000 faa0 	bl	1794c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1740c:	2000      	movs	r0, #0
   1740e:	b002      	add	sp, #8
   17410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   17414:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   17416:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   17418:	b280      	uxth	r0, r0
   1741a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1741e:	f7fd fa79 	bl	14914 <lll_chan_sel_2>
   17422:	4607      	mov	r7, r0
   17424:	e773      	b.n	1730e <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   17426:	4620      	mov	r0, r4
   17428:	f7fe fcbe 	bl	15da8 <lll_prepare_done>
		LL_ASSERT(!ret);
   1742c:	2800      	cmp	r0, #0
   1742e:	d0ed      	beq.n	1740c <prepare_cb+0x150>
   17430:	4a17      	ldr	r2, [pc, #92]	; (17490 <prepare_cb+0x1d4>)
   17432:	4918      	ldr	r1, [pc, #96]	; (17494 <prepare_cb+0x1d8>)
   17434:	4818      	ldr	r0, [pc, #96]	; (17498 <prepare_cb+0x1dc>)
   17436:	f240 1313 	movw	r3, #275	; 0x113
   1743a:	f00b fce4 	bl	22e06 <printk>
   1743e:	4040      	eors	r0, r0
   17440:	f380 8811 	msr	BASEPRI, r0
   17444:	f04f 0003 	mov.w	r0, #3
   17448:	df02      	svc	2
}
   1744a:	2000      	movs	r0, #0
   1744c:	b002      	add	sp, #8
   1744e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   17452:	2318      	movs	r3, #24
   17454:	e7c4      	b.n	173e0 <prepare_cb+0x124>
		err = lll_hfclock_off();
   17456:	f7fe fe37 	bl	160c8 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1745a:	2800      	cmp	r0, #0
   1745c:	db06      	blt.n	1746c <prepare_cb+0x1b0>
		lll_done(NULL);
   1745e:	2000      	movs	r0, #0
   17460:	f7fe fca4 	bl	15dac <lll_done>
}
   17464:	2000      	movs	r0, #0
   17466:	b002      	add	sp, #8
   17468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1746c:	4a08      	ldr	r2, [pc, #32]	; (17490 <prepare_cb+0x1d4>)
   1746e:	490b      	ldr	r1, [pc, #44]	; (1749c <prepare_cb+0x1e0>)
   17470:	4809      	ldr	r0, [pc, #36]	; (17498 <prepare_cb+0x1dc>)
   17472:	237d      	movs	r3, #125	; 0x7d
   17474:	f00b fcc7 	bl	22e06 <printk>
   17478:	4040      	eors	r0, r0
   1747a:	f380 8811 	msr	BASEPRI, r0
   1747e:	f04f 0003 	mov.w	r0, #3
   17482:	df02      	svc	2
   17484:	e7eb      	b.n	1745e <prepare_cb+0x1a2>
   17486:	bf00      	nop
   17488:	00016f0d 	.word	0x00016f0d
   1748c:	00015fd1 	.word	0x00015fd1
   17490:	0002d218 	.word	0x0002d218
   17494:	0002c8bc 	.word	0x0002c8bc
   17498:	0002c630 	.word	0x0002c630
   1749c:	0002d0cc 	.word	0x0002d0cc

000174a0 <lll_slave_prepare>:
{
   174a0:	b570      	push	{r4, r5, r6, lr}
   174a2:	b082      	sub	sp, #8
   174a4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   174a6:	f7fe fdf7 	bl	16098 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   174aa:	2800      	cmp	r0, #0
   174ac:	db29      	blt.n	17502 <lll_slave_prepare+0x62>
	lll = p->param;
   174ae:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   174b0:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   174b2:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   174b4:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   174b6:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   174b8:	4a18      	ldr	r2, [pc, #96]	; (1751c <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   174ba:	3301      	adds	r3, #1
   174bc:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   174be:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   174c2:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   174c4:	42a8      	cmp	r0, r5
   174c6:	bf28      	it	cs
   174c8:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   174ca:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   174cc:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   174ce:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   174d0:	4813      	ldr	r0, [pc, #76]	; (17520 <lll_slave_prepare+0x80>)
   174d2:	4914      	ldr	r1, [pc, #80]	; (17524 <lll_slave_prepare+0x84>)
   174d4:	9400      	str	r4, [sp, #0]
   174d6:	2300      	movs	r3, #0
   174d8:	f7fe fbd8 	bl	15c8c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   174dc:	b108      	cbz	r0, 174e2 <lll_slave_prepare+0x42>
   174de:	3077      	adds	r0, #119	; 0x77
   174e0:	d101      	bne.n	174e6 <lll_slave_prepare+0x46>
}
   174e2:	b002      	add	sp, #8
   174e4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   174e6:	4a10      	ldr	r2, [pc, #64]	; (17528 <lll_slave_prepare+0x88>)
   174e8:	4910      	ldr	r1, [pc, #64]	; (1752c <lll_slave_prepare+0x8c>)
   174ea:	4811      	ldr	r0, [pc, #68]	; (17530 <lll_slave_prepare+0x90>)
   174ec:	235f      	movs	r3, #95	; 0x5f
   174ee:	f00b fc8a 	bl	22e06 <printk>
   174f2:	4040      	eors	r0, r0
   174f4:	f380 8811 	msr	BASEPRI, r0
   174f8:	f04f 0003 	mov.w	r0, #3
   174fc:	df02      	svc	2
}
   174fe:	b002      	add	sp, #8
   17500:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   17502:	4a09      	ldr	r2, [pc, #36]	; (17528 <lll_slave_prepare+0x88>)
   17504:	490b      	ldr	r1, [pc, #44]	; (17534 <lll_slave_prepare+0x94>)
   17506:	480a      	ldr	r0, [pc, #40]	; (17530 <lll_slave_prepare+0x90>)
   17508:	2348      	movs	r3, #72	; 0x48
   1750a:	f00b fc7c 	bl	22e06 <printk>
   1750e:	4040      	eors	r0, r0
   17510:	f380 8811 	msr	BASEPRI, r0
   17514:	f04f 0003 	mov.w	r0, #3
   17518:	df02      	svc	2
   1751a:	e7c8      	b.n	174ae <lll_slave_prepare+0xe>
   1751c:	000172bd 	.word	0x000172bd
   17520:	00015e55 	.word	0x00015e55
   17524:	00016c35 	.word	0x00016c35
   17528:	0002d218 	.word	0x0002d218
   1752c:	0002d16c 	.word	0x0002d16c
   17530:	0002c630 	.word	0x0002c630
   17534:	0002d0cc 	.word	0x0002d0cc

00017538 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   17538:	4b05      	ldr	r3, [pc, #20]	; (17550 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1753a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1753e:	2100      	movs	r1, #0
   17540:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   17544:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   17548:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1754c:	4770      	bx	lr
   1754e:	bf00      	nop
   17550:	4000b000 	.word	0x4000b000

00017554 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   17554:	4b05      	ldr	r3, [pc, #20]	; (1756c <cntr_start+0x18>)
   17556:	7818      	ldrb	r0, [r3, #0]
   17558:	1c42      	adds	r2, r0, #1
   1755a:	701a      	strb	r2, [r3, #0]
   1755c:	b918      	cbnz	r0, 17566 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1755e:	4b04      	ldr	r3, [pc, #16]	; (17570 <cntr_start+0x1c>)
   17560:	2201      	movs	r2, #1
   17562:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   17564:	4770      	bx	lr
		return 1;
   17566:	2001      	movs	r0, #1
}
   17568:	4770      	bx	lr
   1756a:	bf00      	nop
   1756c:	2000862e 	.word	0x2000862e
   17570:	4000b000 	.word	0x4000b000

00017574 <cntr_stop>:

uint32_t cntr_stop(void)
{
   17574:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   17576:	4c0d      	ldr	r4, [pc, #52]	; (175ac <cntr_stop+0x38>)
   17578:	7820      	ldrb	r0, [r4, #0]
   1757a:	b148      	cbz	r0, 17590 <cntr_stop+0x1c>

	if (--_refcount) {
   1757c:	3801      	subs	r0, #1
   1757e:	b2c0      	uxtb	r0, r0
   17580:	7020      	strb	r0, [r4, #0]
   17582:	b918      	cbnz	r0, 1758c <cntr_stop+0x18>
   17584:	4b0a      	ldr	r3, [pc, #40]	; (175b0 <cntr_stop+0x3c>)
   17586:	2201      	movs	r2, #1
   17588:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1758a:	bd10      	pop	{r4, pc}
		return 1;
   1758c:	2001      	movs	r0, #1
}
   1758e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   17590:	4a08      	ldr	r2, [pc, #32]	; (175b4 <cntr_stop+0x40>)
   17592:	4909      	ldr	r1, [pc, #36]	; (175b8 <cntr_stop+0x44>)
   17594:	4809      	ldr	r0, [pc, #36]	; (175bc <cntr_stop+0x48>)
   17596:	232d      	movs	r3, #45	; 0x2d
   17598:	f00b fc35 	bl	22e06 <printk>
   1759c:	4040      	eors	r0, r0
   1759e:	f380 8811 	msr	BASEPRI, r0
   175a2:	f04f 0003 	mov.w	r0, #3
   175a6:	df02      	svc	2
   175a8:	7820      	ldrb	r0, [r4, #0]
   175aa:	e7e7      	b.n	1757c <cntr_stop+0x8>
   175ac:	2000862e 	.word	0x2000862e
   175b0:	4000b004 	.word	0x4000b004
   175b4:	0002d278 	.word	0x0002d278
   175b8:	0002d2c4 	.word	0x0002d2c4
   175bc:	0002c630 	.word	0x0002c630

000175c0 <cntr_cnt_get>:
     return p_reg->COUNTER;
   175c0:	4b01      	ldr	r3, [pc, #4]	; (175c8 <cntr_cnt_get+0x8>)
   175c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   175c6:	4770      	bx	lr
   175c8:	4000b000 	.word	0x4000b000

000175cc <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   175cc:	4b02      	ldr	r3, [pc, #8]	; (175d8 <cntr_cmp_set+0xc>)
   175ce:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   175d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   175d6:	4770      	bx	lr
   175d8:	4000b000 	.word	0x4000b000

000175dc <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   175dc:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   175de:	4b12      	ldr	r3, [pc, #72]	; (17628 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175e0:	4d12      	ldr	r5, [pc, #72]	; (1762c <do_ecb+0x50>)
   175e2:	2601      	movs	r6, #1
   175e4:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   175e6:	2100      	movs	r1, #0
   175e8:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   175ea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   175ee:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   175f2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   175f6:	601c      	str	r4, [r3, #0]
}
   175f8:	e005      	b.n	17606 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   175fa:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   175fe:	b932      	cbnz	r2, 1760e <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   17600:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   17604:	b11a      	cbz	r2, 1760e <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   17606:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1760a:	2a00      	cmp	r2, #0
   1760c:	d0f5      	beq.n	175fa <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1760e:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   17610:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   17614:	2a00      	cmp	r2, #0
   17616:	d1e7      	bne.n	175e8 <do_ecb+0xc>
   17618:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   1761c:	2f00      	cmp	r7, #0
   1761e:	d0e3      	beq.n	175e8 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   17620:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   17622:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   17626:	4770      	bx	lr
   17628:	4000e000 	.word	0x4000e000
   1762c:	4000e004 	.word	0x4000e004

00017630 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   17630:	b570      	push	{r4, r5, r6, lr}
   17632:	b08c      	sub	sp, #48	; 0x30
   17634:	460e      	mov	r6, r1
   17636:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   17638:	4601      	mov	r1, r0
   1763a:	2210      	movs	r2, #16
   1763c:	4668      	mov	r0, sp
{
   1763e:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   17640:	f7f3 ff9a 	bl	b578 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   17644:	2210      	movs	r2, #16
   17646:	eb0d 0002 	add.w	r0, sp, r2
   1764a:	4631      	mov	r1, r6
   1764c:	f7f3 ff94 	bl	b578 <mem_rcopy>

	do_ecb(&ecb);
   17650:	4668      	mov	r0, sp
   17652:	f7ff ffc3 	bl	175dc <do_ecb>

	if (cipher_text_le) {
   17656:	b125      	cbz	r5, 17662 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   17658:	4628      	mov	r0, r5
   1765a:	2210      	movs	r2, #16
   1765c:	a908      	add	r1, sp, #32
   1765e:	f7f3 ff8b 	bl	b578 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   17662:	b12c      	cbz	r4, 17670 <ecb_encrypt+0x40>
   17664:	ad08      	add	r5, sp, #32
   17666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17668:	6020      	str	r0, [r4, #0]
   1766a:	6061      	str	r1, [r4, #4]
   1766c:	60a2      	str	r2, [r4, #8]
   1766e:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   17670:	b00c      	add	sp, #48	; 0x30
   17672:	bd70      	pop	{r4, r5, r6, pc}

00017674 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   17674:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   17676:	4e2a      	ldr	r6, [pc, #168]	; (17720 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17678:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 17734 <sw_switch.isra.0+0xc0>
   1767c:	7834      	ldrb	r4, [r6, #0]
   1767e:	4b29      	ldr	r3, [pc, #164]	; (17724 <sw_switch.isra.0+0xb0>)
   17680:	f8cc 3568 	str.w	r3, [ip, #1384]	; 0x568
   17684:	f104 030c 	add.w	r3, r4, #12
   17688:	b2db      	uxtb	r3, r3
   1768a:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1768c:	4f26      	ldr	r7, [pc, #152]	; (17728 <sw_switch.isra.0+0xb4>)
   1768e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   17692:	00e5      	lsls	r5, r4, #3
   17694:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   17698:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   1769c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   176a0:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   176a4:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   176a8:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   176aa:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   176ae:	b388      	cbz	r0, 17714 <sw_switch.isra.0+0xa0>

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   176b0:	f24a 274e 	movw	r7, #41550	; 0xa24e
   176b4:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   176b8:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   176bc:	2a02      	cmp	r2, #2
   176be:	bf14      	ite	ne
   176c0:	463a      	movne	r2, r7
   176c2:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   176c4:	f241 574a 	movw	r7, #5450	; 0x154a
   176c8:	2902      	cmp	r1, #2
   176ca:	bf14      	ite	ne
   176cc:	4601      	movne	r1, r0
   176ce:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   176d0:	4816      	ldr	r0, [pc, #88]	; (1772c <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   176d2:	4f17      	ldr	r7, [pc, #92]	; (17730 <sw_switch.isra.0+0xbc>)
   176d4:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   176d8:	440a      	add	r2, r1
   176da:	fba0 3202 	umull	r3, r2, r0, r2
   176de:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   176e0:	00ab      	lsls	r3, r5, #2
   176e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   176e6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   176ea:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   176ec:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   176f0:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   176f2:	bf8a      	itet	hi
   176f4:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   176f8:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   176fa:	1a8a      	subhi	r2, r1, r2
   176fc:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   17700:	4b0c      	ldr	r3, [pc, #48]	; (17734 <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   17702:	f004 0401 	and.w	r4, r4, #1
   17706:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1770a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1770e:	7034      	strb	r4, [r6, #0]
}
   17710:	bcf0      	pop	{r4, r5, r6, r7}
   17712:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17714:	4a08      	ldr	r2, [pc, #32]	; (17738 <sw_switch.isra.0+0xc4>)
   17716:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   1771a:	2229      	movs	r2, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   1771c:	e7e0      	b.n	176e0 <sw_switch.isra.0+0x6c>
   1771e:	bf00      	nop
   17720:	2000862f 	.word	0x2000862f
   17724:	4000110c 	.word	0x4000110c
   17728:	40009140 	.word	0x40009140
   1772c:	10624dd3 	.word	0x10624dd3
   17730:	40001000 	.word	0x40001000
   17734:	4001f000 	.word	0x4001f000
   17738:	40001004 	.word	0x40001004

0001773c <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1773c:	4b04      	ldr	r3, [pc, #16]	; (17750 <isr_radio+0x14>)
   1773e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   17742:	b123      	cbz	r3, 1774e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   17744:	4a03      	ldr	r2, [pc, #12]	; (17754 <isr_radio+0x18>)
   17746:	4b04      	ldr	r3, [pc, #16]	; (17758 <isr_radio+0x1c>)
   17748:	6810      	ldr	r0, [r2, #0]
   1774a:	681b      	ldr	r3, [r3, #0]
   1774c:	4718      	bx	r3
}
   1774e:	4770      	bx	lr
   17750:	40001000 	.word	0x40001000
   17754:	20003d50 	.word	0x20003d50
   17758:	20003d4c 	.word	0x20003d4c

0001775c <radio_isr_set>:
{
   1775c:	b538      	push	{r3, r4, r5, lr}
   1775e:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   17760:	2001      	movs	r0, #1
{
   17762:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   17764:	f7ec fe88 	bl	4478 <arch_irq_disable>
	isr_cb_param = param;
   17768:	4a08      	ldr	r2, [pc, #32]	; (1778c <radio_isr_set+0x30>)
	isr_cb = cb;
   1776a:	4809      	ldr	r0, [pc, #36]	; (17790 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1776c:	4b09      	ldr	r3, [pc, #36]	; (17794 <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1776e:	490a      	ldr	r1, [pc, #40]	; (17798 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   17770:	6015      	str	r5, [r2, #0]
   17772:	2510      	movs	r5, #16
   17774:	2202      	movs	r2, #2
	isr_cb = cb;
   17776:	6004      	str	r4, [r0, #0]
   17778:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   1777c:	2001      	movs	r0, #1
   1777e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   17782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   17786:	f7ec be67 	b.w	4458 <arch_irq_enable>
   1778a:	bf00      	nop
   1778c:	20003d50 	.word	0x20003d50
   17790:	20003d4c 	.word	0x20003d4c
   17794:	e000e100 	.word	0xe000e100
   17798:	40001000 	.word	0x40001000

0001779c <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1779c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   177a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   177a4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   177a6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   177aa:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   177ae:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   177b2:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   177b6:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   177ba:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   177be:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   177c2:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   177c6:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   177ca:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   177ce:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   177d2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   177d6:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   177da:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   177de:	4770      	bx	lr

000177e0 <radio_reset>:
{
   177e0:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   177e2:	2001      	movs	r0, #1
   177e4:	f7ec fe48 	bl	4478 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   177e8:	4b0c      	ldr	r3, [pc, #48]	; (1781c <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   177ea:	490d      	ldr	r1, [pc, #52]	; (17820 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   177ec:	4a0d      	ldr	r2, [pc, #52]	; (17824 <radio_reset+0x44>)
   177ee:	2400      	movs	r4, #0
   177f0:	2001      	movs	r0, #1
   177f2:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   177f6:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   177fa:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   177fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   17800:	f023 0301 	bic.w	r3, r3, #1
   17804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   17808:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1780c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   17810:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   17812:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   17816:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1781a:	bd10      	pop	{r4, pc}
   1781c:	40001000 	.word	0x40001000
   17820:	40001774 	.word	0x40001774
   17824:	4001f000 	.word	0x4001f000

00017828 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   17828:	4b06      	ldr	r3, [pc, #24]	; (17844 <radio_phy_set+0x1c>)
	switch (phy) {
   1782a:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1782c:	bf14      	ite	ne
   1782e:	2203      	movne	r2, #3
   17830:	2204      	moveq	r2, #4
   17832:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   17836:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1783a:	f042 0201 	orr.w	r2, r2, #1
   1783e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   17842:	4770      	bx	lr
   17844:	40001000 	.word	0x40001000

00017848 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   17848:	4b01      	ldr	r3, [pc, #4]	; (17850 <radio_tx_power_set+0x8>)
   1784a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1784e:	4770      	bx	lr
   17850:	40001000 	.word	0x40001000

00017854 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   17854:	4b01      	ldr	r3, [pc, #4]	; (1785c <radio_freq_chan_set+0x8>)
   17856:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1785a:	4770      	bx	lr
   1785c:	40001000 	.word	0x40001000

00017860 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   17860:	4b07      	ldr	r3, [pc, #28]	; (17880 <radio_whiten_iv_set+0x20>)
   17862:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   17866:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1786a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1786e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   17872:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   17876:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1787a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1787e:	4770      	bx	lr
   17880:	40001000 	.word	0x40001000

00017884 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   17884:	4a0b      	ldr	r2, [pc, #44]	; (178b4 <radio_aa_set+0x30>)
   17886:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   17888:	2301      	movs	r3, #1
{
   1788a:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1788c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   17890:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   17894:	78c3      	ldrb	r3, [r0, #3]
   17896:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1789a:	7843      	ldrb	r3, [r0, #1]
   1789c:	7884      	ldrb	r4, [r0, #2]
   1789e:	7801      	ldrb	r1, [r0, #0]
   178a0:	041b      	lsls	r3, r3, #16
   178a2:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   178a6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   178aa:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   178ac:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   178b0:	4770      	bx	lr
   178b2:	bf00      	nop
   178b4:	40001000 	.word	0x40001000

000178b8 <radio_pkt_configure>:
	switch (phy) {
   178b8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   178bc:	2b02      	cmp	r3, #2
{
   178be:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   178c0:	bf14      	ite	ne
   178c2:	2400      	movne	r4, #0
   178c4:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   178c8:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   178ca:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   178ce:	bf48      	it	mi
   178d0:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   178d4:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   178d6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   178da:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   178dc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   178e0:	4a0a      	ldr	r2, [pc, #40]	; (1790c <radio_pkt_configure+0x54>)
}
   178e2:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   178e4:	4303      	orrs	r3, r0
   178e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   178ea:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   178ee:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   178f2:	4807      	ldr	r0, [pc, #28]	; (17910 <radio_pkt_configure+0x58>)
   178f4:	4018      	ands	r0, r3
   178f6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   178fa:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   178fe:	4319      	orrs	r1, r3
   17900:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   17904:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   17908:	4770      	bx	lr
   1790a:	bf00      	nop
   1790c:	40001000 	.word	0x40001000
   17910:	fef80000 	.word	0xfef80000

00017914 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   17914:	4b01      	ldr	r3, [pc, #4]	; (1791c <radio_pkt_rx_set+0x8>)
   17916:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1791a:	4770      	bx	lr
   1791c:	40001000 	.word	0x40001000

00017920 <radio_pkt_tx_set>:
   17920:	4b01      	ldr	r3, [pc, #4]	; (17928 <radio_pkt_tx_set+0x8>)
   17922:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   17926:	4770      	bx	lr
   17928:	40001000 	.word	0x40001000

0001792c <radio_tx_chain_delay_get>:
}
   1792c:	2001      	movs	r0, #1
   1792e:	4770      	bx	lr

00017930 <radio_rx_ready_delay_get>:
}
   17930:	2029      	movs	r0, #41	; 0x29
   17932:	4770      	bx	lr

00017934 <radio_rx_chain_delay_get>:
	switch (phy) {
   17934:	2802      	cmp	r0, #2
}
   17936:	bf14      	ite	ne
   17938:	200a      	movne	r0, #10
   1793a:	2006      	moveq	r0, #6
   1793c:	4770      	bx	lr
   1793e:	bf00      	nop

00017940 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17940:	4b01      	ldr	r3, [pc, #4]	; (17948 <radio_tx_enable+0x8>)
   17942:	2201      	movs	r2, #1
   17944:	601a      	str	r2, [r3, #0]
}
   17946:	4770      	bx	lr
   17948:	40001000 	.word	0x40001000

0001794c <radio_disable>:
{
   1794c:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1794e:	4a08      	ldr	r2, [pc, #32]	; (17970 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   17950:	4808      	ldr	r0, [pc, #32]	; (17974 <radio_disable+0x28>)
   17952:	4909      	ldr	r1, [pc, #36]	; (17978 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   17954:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   17956:	f44f 6510 	mov.w	r5, #2304	; 0x900
   1795a:	2400      	movs	r4, #0
   1795c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   17960:	6053      	str	r3, [r2, #4]
   17962:	60d3      	str	r3, [r2, #12]
   17964:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   17968:	bc30      	pop	{r4, r5}
   1796a:	600b      	str	r3, [r1, #0]
   1796c:	4770      	bx	lr
   1796e:	bf00      	nop
   17970:	4001f000 	.word	0x4001f000
   17974:	40001000 	.word	0x40001000
   17978:	40001010 	.word	0x40001010

0001797c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1797c:	4b04      	ldr	r3, [pc, #16]	; (17990 <radio_status_reset+0x14>)
   1797e:	2200      	movs	r2, #0
   17980:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   17984:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   17988:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1798c:	4770      	bx	lr
   1798e:	bf00      	nop
   17990:	40001000 	.word	0x40001000

00017994 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   17994:	4b03      	ldr	r3, [pc, #12]	; (179a4 <radio_is_ready+0x10>)
   17996:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1799a:	3800      	subs	r0, #0
   1799c:	bf18      	it	ne
   1799e:	2001      	movne	r0, #1
   179a0:	4770      	bx	lr
   179a2:	bf00      	nop
   179a4:	40001000 	.word	0x40001000

000179a8 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   179a8:	4b03      	ldr	r3, [pc, #12]	; (179b8 <radio_is_done+0x10>)
   179aa:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   179ae:	3800      	subs	r0, #0
   179b0:	bf18      	it	ne
   179b2:	2001      	movne	r0, #1
   179b4:	4770      	bx	lr
   179b6:	bf00      	nop
   179b8:	40001000 	.word	0x40001000

000179bc <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   179bc:	4b03      	ldr	r3, [pc, #12]	; (179cc <radio_is_idle+0x10>)
   179be:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   179c2:	fab0 f080 	clz	r0, r0
   179c6:	0940      	lsrs	r0, r0, #5
   179c8:	4770      	bx	lr
   179ca:	bf00      	nop
   179cc:	40001000 	.word	0x40001000

000179d0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   179d0:	4b04      	ldr	r3, [pc, #16]	; (179e4 <radio_crc_configure+0x14>)
   179d2:	f240 1203 	movw	r2, #259	; 0x103
   179d6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   179da:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   179de:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   179e2:	4770      	bx	lr
   179e4:	40001000 	.word	0x40001000

000179e8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   179e8:	4b03      	ldr	r3, [pc, #12]	; (179f8 <radio_crc_is_valid+0x10>)
   179ea:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   179ee:	3800      	subs	r0, #0
   179f0:	bf18      	it	ne
   179f2:	2001      	movne	r0, #1
   179f4:	4770      	bx	lr
   179f6:	bf00      	nop
   179f8:	40001000 	.word	0x40001000

000179fc <radio_pkt_empty_get>:
}
   179fc:	4800      	ldr	r0, [pc, #0]	; (17a00 <radio_pkt_empty_get+0x4>)
   179fe:	4770      	bx	lr
   17a00:	20003c44 	.word	0x20003c44

00017a04 <radio_pkt_scratch_get>:
}
   17a04:	4800      	ldr	r0, [pc, #0]	; (17a08 <radio_pkt_scratch_get+0x4>)
   17a06:	4770      	bx	lr
   17a08:	20003c48 	.word	0x20003c48

00017a0c <radio_pkt_decrypt_get>:
}
   17a0c:	4800      	ldr	r0, [pc, #0]	; (17a10 <radio_pkt_decrypt_get+0x4>)
   17a0e:	4770      	bx	lr
   17a10:	20003b40 	.word	0x20003b40

00017a14 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17a14:	4b05      	ldr	r3, [pc, #20]	; (17a2c <radio_switch_complete_and_rx+0x18>)
{
   17a16:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   17a18:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17a1a:	2403      	movs	r4, #3
{
   17a1c:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17a1e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   17a22:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17a24:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   17a26:	f7ff be25 	b.w	17674 <sw_switch.isra.0>
   17a2a:	bf00      	nop
   17a2c:	40001000 	.word	0x40001000

00017a30 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17a30:	4b04      	ldr	r3, [pc, #16]	; (17a44 <radio_switch_complete_and_tx+0x14>)
{
   17a32:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17a34:	2403      	movs	r4, #3
{
   17a36:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   17a38:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   17a3c:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17a3e:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   17a40:	f7ff be18 	b.w	17674 <sw_switch.isra.0>
   17a44:	40001000 	.word	0x40001000

00017a48 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   17a48:	4904      	ldr	r1, [pc, #16]	; (17a5c <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   17a4a:	4b05      	ldr	r3, [pc, #20]	; (17a60 <radio_switch_complete_and_disable+0x18>)
   17a4c:	2003      	movs	r0, #3
   17a4e:	f44f 6210 	mov.w	r2, #2304	; 0x900
   17a52:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   17a56:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17a5a:	4770      	bx	lr
   17a5c:	40001000 	.word	0x40001000
   17a60:	4001f000 	.word	0x4001f000

00017a64 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   17a64:	4b02      	ldr	r3, [pc, #8]	; (17a70 <radio_rssi_status_reset+0xc>)
   17a66:	2200      	movs	r2, #0
   17a68:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   17a6c:	4770      	bx	lr
   17a6e:	bf00      	nop
   17a70:	40001000 	.word	0x40001000

00017a74 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   17a74:	4b03      	ldr	r3, [pc, #12]	; (17a84 <radio_rssi_is_ready+0x10>)
   17a76:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   17a7a:	3800      	subs	r0, #0
   17a7c:	bf18      	it	ne
   17a7e:	2001      	movne	r0, #1
   17a80:	4770      	bx	lr
   17a82:	bf00      	nop
   17a84:	40001000 	.word	0x40001000

00017a88 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   17a88:	b430      	push	{r4, r5}
   17a8a:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   17a8c:	00a3      	lsls	r3, r4, #2
   17a8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   17a96:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   17a98:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   17a9c:	3401      	adds	r4, #1
   17a9e:	8895      	ldrh	r5, [r2, #4]
   17aa0:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   17aa4:	2c08      	cmp	r4, #8
		bdaddr += 6;
   17aa6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   17aaa:	d1ef      	bne.n	17a8c <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   17aac:	4b03      	ldr	r3, [pc, #12]	; (17abc <radio_filter_configure+0x34>)
   17aae:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   17ab2:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   17ab4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   17ab8:	4770      	bx	lr
   17aba:	bf00      	nop
   17abc:	40001000 	.word	0x40001000

00017ac0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   17ac0:	4a03      	ldr	r2, [pc, #12]	; (17ad0 <radio_filter_disable+0x10>)
   17ac2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   17ac6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17aca:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   17ace:	4770      	bx	lr
   17ad0:	40001000 	.word	0x40001000

00017ad4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   17ad4:	4b02      	ldr	r3, [pc, #8]	; (17ae0 <radio_filter_status_reset+0xc>)
   17ad6:	2200      	movs	r2, #0
   17ad8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   17adc:	4770      	bx	lr
   17ade:	bf00      	nop
   17ae0:	40001000 	.word	0x40001000

00017ae4 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   17ae4:	4b03      	ldr	r3, [pc, #12]	; (17af4 <radio_filter_has_match+0x10>)
   17ae6:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   17aea:	3800      	subs	r0, #0
   17aec:	bf18      	it	ne
   17aee:	2001      	movne	r0, #1
   17af0:	4770      	bx	lr
   17af2:	bf00      	nop
   17af4:	40001000 	.word	0x40001000

00017af8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   17af8:	4b01      	ldr	r3, [pc, #4]	; (17b00 <radio_filter_match_get+0x8>)
   17afa:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   17afe:	4770      	bx	lr
   17b00:	40001000 	.word	0x40001000

00017b04 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   17b04:	4904      	ldr	r1, [pc, #16]	; (17b18 <radio_tmr_status_reset+0x14>)
   17b06:	4b05      	ldr	r3, [pc, #20]	; (17b1c <radio_tmr_status_reset+0x18>)
   17b08:	4a05      	ldr	r2, [pc, #20]	; (17b20 <radio_tmr_status_reset+0x1c>)
   17b0a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   17b0e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   17b12:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   17b16:	4770      	bx	lr
   17b18:	4000b000 	.word	0x4000b000
   17b1c:	4001f000 	.word	0x4001f000
   17b20:	0e7000c0 	.word	0x0e7000c0

00017b24 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   17b24:	4b03      	ldr	r3, [pc, #12]	; (17b34 <radio_tmr_tifs_set+0x10>)
   17b26:	4a04      	ldr	r2, [pc, #16]	; (17b38 <radio_tmr_tifs_set+0x14>)
   17b28:	781b      	ldrb	r3, [r3, #0]
   17b2a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   17b2e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17b32:	4770      	bx	lr
   17b34:	2000862f 	.word	0x2000862f
   17b38:	40009000 	.word	0x40009000

00017b3c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   17b3c:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   17b3e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   17b42:	4d31      	ldr	r5, [pc, #196]	; (17c08 <radio_tmr_start+0xcc>)
   17b44:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   17b48:	42ab      	cmp	r3, r5
{
   17b4a:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   17b4c:	d906      	bls.n	17b5c <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   17b4e:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   17b52:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   17b56:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   17b5a:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17b5c:	4d2b      	ldr	r5, [pc, #172]	; (17c0c <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   17b5e:	4b2c      	ldr	r3, [pc, #176]	; (17c10 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   17b60:	482c      	ldr	r0, [pc, #176]	; (17c14 <radio_tmr_start+0xd8>)
   17b62:	2601      	movs	r6, #1
   17b64:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   17b66:	2600      	movs	r6, #0
   17b68:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   17b6c:	4d2a      	ldr	r5, [pc, #168]	; (17c18 <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   17b6e:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   17b72:	2604      	movs	r6, #4
   17b74:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   17b78:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   17b7a:	2602      	movs	r6, #2
   17b7c:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17b80:	4a26      	ldr	r2, [pc, #152]	; (17c1c <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   17b82:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   17b86:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   17b8a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   17b8e:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   17b92:	4923      	ldr	r1, [pc, #140]	; (17c20 <radio_tmr_start+0xe4>)
   17b94:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   17b98:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b9a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   17b9e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   17ba2:	b354      	cbz	r4, 17bfa <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   17ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   17ba8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   17bac:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   17bb0:	4b1a      	ldr	r3, [pc, #104]	; (17c1c <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   17bb2:	4a1c      	ldr	r2, [pc, #112]	; (17c24 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17bb4:	491c      	ldr	r1, [pc, #112]	; (17c28 <radio_tmr_start+0xec>)
   17bb6:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   17bba:	2500      	movs	r5, #0
   17bbc:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   17bbe:	2604      	movs	r6, #4
   17bc0:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   17bc2:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   17bc6:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   17bca:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   17bce:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17bd0:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17bd4:	4f15      	ldr	r7, [pc, #84]	; (17c2c <radio_tmr_start+0xf0>)
   17bd6:	4e16      	ldr	r6, [pc, #88]	; (17c30 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17bd8:	4d16      	ldr	r5, [pc, #88]	; (17c34 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17bda:	4c17      	ldr	r4, [pc, #92]	; (17c38 <radio_tmr_start+0xfc>)
   17bdc:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17be0:	320c      	adds	r2, #12
   17be2:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17be6:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17bea:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17bee:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   17bf2:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17bf4:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   17bf8:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   17bfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   17bfe:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   17c02:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   17c06:	e7d3      	b.n	17bb0 <radio_tmr_start+0x74>
   17c08:	7ff0bdbf 	.word	0x7ff0bdbf
   17c0c:	4000800c 	.word	0x4000800c
   17c10:	40008000 	.word	0x40008000
   17c14:	431bde83 	.word	0x431bde83
   17c18:	4000b000 	.word	0x4000b000
   17c1c:	4001f000 	.word	0x4001f000
   17c20:	4000b148 	.word	0x4000b148
   17c24:	40009000 	.word	0x40009000
   17c28:	4000900c 	.word	0x4000900c
   17c2c:	4000110c 	.word	0x4000110c
   17c30:	40009140 	.word	0x40009140
   17c34:	4001f004 	.word	0x4001f004
   17c38:	40009144 	.word	0x40009144

00017c3c <radio_tmr_start_get>:
    return p_reg->CC[ch];
   17c3c:	4b01      	ldr	r3, [pc, #4]	; (17c44 <radio_tmr_start_get+0x8>)
   17c3e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   17c42:	4770      	bx	lr
   17c44:	4000b000 	.word	0x4000b000

00017c48 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   17c48:	b410      	push	{r4}
   17c4a:	4805      	ldr	r0, [pc, #20]	; (17c60 <radio_tmr_stop+0x18>)
   17c4c:	4c05      	ldr	r4, [pc, #20]	; (17c64 <radio_tmr_stop+0x1c>)
   17c4e:	4906      	ldr	r1, [pc, #24]	; (17c68 <radio_tmr_stop+0x20>)
   17c50:	4a06      	ldr	r2, [pc, #24]	; (17c6c <radio_tmr_stop+0x24>)
   17c52:	2301      	movs	r3, #1
   17c54:	6023      	str	r3, [r4, #0]
   17c56:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17c58:	bc10      	pop	{r4}
   17c5a:	600b      	str	r3, [r1, #0]
   17c5c:	6013      	str	r3, [r2, #0]
   17c5e:	4770      	bx	lr
   17c60:	40008010 	.word	0x40008010
   17c64:	40008004 	.word	0x40008004
   17c68:	40009004 	.word	0x40009004
   17c6c:	40009010 	.word	0x40009010

00017c70 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   17c70:	4904      	ldr	r1, [pc, #16]	; (17c84 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   17c72:	4b05      	ldr	r3, [pc, #20]	; (17c88 <radio_tmr_hcto_configure+0x18>)
   17c74:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   17c78:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   17c7c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   17c80:	4770      	bx	lr
   17c82:	bf00      	nop
   17c84:	40008000 	.word	0x40008000
   17c88:	4001f000 	.word	0x4001f000

00017c8c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17c8c:	4b05      	ldr	r3, [pc, #20]	; (17ca4 <radio_tmr_aa_capture+0x18>)
   17c8e:	4806      	ldr	r0, [pc, #24]	; (17ca8 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17c90:	4906      	ldr	r1, [pc, #24]	; (17cac <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   17c92:	4a07      	ldr	r2, [pc, #28]	; (17cb0 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17c94:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17c98:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   17c9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   17ca0:	4770      	bx	lr
   17ca2:	bf00      	nop
   17ca4:	4001f000 	.word	0x4001f000
   17ca8:	40001100 	.word	0x40001100
   17cac:	40008040 	.word	0x40008040
   17cb0:	04000080 	.word	0x04000080

00017cb4 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   17cb4:	4b01      	ldr	r3, [pc, #4]	; (17cbc <radio_tmr_aa_get+0x8>)
   17cb6:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   17cba:	4770      	bx	lr
   17cbc:	40008000 	.word	0x40008000

00017cc0 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   17cc0:	4b01      	ldr	r3, [pc, #4]	; (17cc8 <radio_tmr_aa_save+0x8>)
   17cc2:	6018      	str	r0, [r3, #0]
}
   17cc4:	4770      	bx	lr
   17cc6:	bf00      	nop
   17cc8:	20003d54 	.word	0x20003d54

00017ccc <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   17ccc:	4b01      	ldr	r3, [pc, #4]	; (17cd4 <radio_tmr_aa_restore+0x8>)
}
   17cce:	6818      	ldr	r0, [r3, #0]
   17cd0:	4770      	bx	lr
   17cd2:	bf00      	nop
   17cd4:	20003d54 	.word	0x20003d54

00017cd8 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   17cd8:	4b01      	ldr	r3, [pc, #4]	; (17ce0 <radio_tmr_ready_get+0x8>)
   17cda:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   17cde:	4770      	bx	lr
   17ce0:	40008000 	.word	0x40008000

00017ce4 <radio_tmr_end_capture>:
   17ce4:	4b02      	ldr	r3, [pc, #8]	; (17cf0 <radio_tmr_end_capture+0xc>)
   17ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   17cea:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   17cee:	4770      	bx	lr
   17cf0:	4001f000 	.word	0x4001f000

00017cf4 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   17cf4:	4b01      	ldr	r3, [pc, #4]	; (17cfc <radio_tmr_end_get+0x8>)
   17cf6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   17cfa:	4770      	bx	lr
   17cfc:	40008000 	.word	0x40008000

00017d00 <radio_tmr_tifs_base_get>:
   17d00:	4b01      	ldr	r3, [pc, #4]	; (17d08 <radio_tmr_tifs_base_get+0x8>)
   17d02:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   17d06:	4770      	bx	lr
   17d08:	40008000 	.word	0x40008000

00017d0c <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   17d0c:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17d0e:	4c14      	ldr	r4, [pc, #80]	; (17d60 <radio_ccm_rx_pkt_set+0x54>)
   17d10:	4f14      	ldr	r7, [pc, #80]	; (17d64 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d12:	4b15      	ldr	r3, [pc, #84]	; (17d68 <radio_ccm_rx_pkt_set+0x5c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   17d14:	4d15      	ldr	r5, [pc, #84]	; (17d6c <radio_ccm_rx_pkt_set+0x60>)
   17d16:	4e16      	ldr	r6, [pc, #88]	; (17d70 <radio_ccm_rx_pkt_set+0x64>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17d18:	2902      	cmp	r1, #2
   17d1a:	bf14      	ite	ne
   17d1c:	4621      	movne	r1, r4
   17d1e:	4639      	moveq	r1, r7
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d20:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17d22:	2702      	movs	r7, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d24:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17d28:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   17d2c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17d30:	4f10      	ldr	r7, [pc, #64]	; (17d74 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   17d32:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17d36:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   17d3a:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   17d3e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17d42:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17d44:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   17d48:	4628      	mov	r0, r5
	NRF_CCM->SHORTS = 0;
   17d4a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17d4e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17d52:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   17d56:	f8c6 1504 	str.w	r1, [r6, #1284]	; 0x504
}
   17d5a:	bcf0      	pop	{r4, r5, r6, r7}
   17d5c:	601a      	str	r2, [r3, #0]
   17d5e:	4770      	bx	lr
   17d60:	01000001 	.word	0x01000001
   17d64:	01010001 	.word	0x01010001
   17d68:	4000f000 	.word	0x4000f000
   17d6c:	20003c48 	.word	0x20003c48
   17d70:	4001f000 	.word	0x4001f000
   17d74:	20003a34 	.word	0x20003a34

00017d78 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   17d78:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d7a:	4b10      	ldr	r3, [pc, #64]	; (17dbc <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   17d7c:	4d10      	ldr	r5, [pc, #64]	; (17dc0 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   17d7e:	4e11      	ldr	r6, [pc, #68]	; (17dc4 <radio_ccm_tx_pkt_set+0x4c>)
{
   17d80:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d82:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17d84:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17d8a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   17d8e:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   17d92:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17d96:	4e0c      	ldr	r6, [pc, #48]	; (17dc8 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   17d98:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   17d9c:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   17d9e:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   17da2:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17da4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   17da8:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17dac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17db0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   17db4:	601c      	str	r4, [r3, #0]
}
   17db6:	bc70      	pop	{r4, r5, r6}
   17db8:	4770      	bx	lr
   17dba:	bf00      	nop
   17dbc:	4000f000 	.word	0x4000f000
   17dc0:	20003c48 	.word	0x20003c48
   17dc4:	01010000 	.word	0x01010000
   17dc8:	20003a34 	.word	0x20003a34

00017dcc <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   17dcc:	4a0e      	ldr	r2, [pc, #56]	; (17e08 <radio_ccm_is_done+0x3c>)
   17dce:	2302      	movs	r3, #2
   17dd0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17dd4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   17dd8:	b933      	cbnz	r3, 17de8 <radio_ccm_is_done+0x1c>
		__WFE();
   17dda:	bf20      	wfe
		__SEV();
   17ddc:	bf40      	sev
		__WFE();
   17dde:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17de0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   17de4:	2b00      	cmp	r3, #0
   17de6:	d0f8      	beq.n	17dda <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   17de8:	4b07      	ldr	r3, [pc, #28]	; (17e08 <radio_ccm_is_done+0x3c>)
   17dea:	4a08      	ldr	r2, [pc, #32]	; (17e0c <radio_ccm_is_done+0x40>)
   17dec:	2002      	movs	r0, #2
   17dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17df2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   17df6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   17dfa:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   17dfe:	fab0 f080 	clz	r0, r0
   17e02:	0940      	lsrs	r0, r0, #5
   17e04:	4770      	bx	lr
   17e06:	bf00      	nop
   17e08:	4000f000 	.word	0x4000f000
   17e0c:	e000e100 	.word	0xe000e100

00017e10 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   17e10:	4b03      	ldr	r3, [pc, #12]	; (17e20 <radio_ccm_mic_is_valid+0x10>)
   17e12:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17e16:	3800      	subs	r0, #0
   17e18:	bf18      	it	ne
   17e1a:	2001      	movne	r0, #1
   17e1c:	4770      	bx	lr
   17e1e:	bf00      	nop
   17e20:	4000f000 	.word	0x4000f000

00017e24 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   17e24:	4a14      	ldr	r2, [pc, #80]	; (17e78 <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17e26:	4b15      	ldr	r3, [pc, #84]	; (17e7c <radio_ar_configure+0x58>)
{
   17e28:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   17e2a:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   17e2e:	4e14      	ldr	r6, [pc, #80]	; (17e80 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17e30:	2403      	movs	r4, #3
   17e32:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   17e36:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   17e38:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   17e3c:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   17e3e:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   17e40:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   17e44:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   17e48:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   17e4c:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   17e50:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   17e54:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   17e58:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   17e5c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17e60:	4908      	ldr	r1, [pc, #32]	; (17e84 <radio_ar_configure+0x60>)
   17e62:	4303      	orrs	r3, r0
   17e64:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17e68:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17e6c:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   17e70:	bc70      	pop	{r4, r5, r6}
   17e72:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   17e76:	4770      	bx	lr
   17e78:	40001000 	.word	0x40001000
   17e7c:	4000f000 	.word	0x4000f000
   17e80:	20003a30 	.word	0x20003a30
   17e84:	4001f000 	.word	0x4001f000

00017e88 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   17e88:	4b01      	ldr	r3, [pc, #4]	; (17e90 <radio_ar_match_get+0x8>)
   17e8a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17e8e:	4770      	bx	lr
   17e90:	4000f000 	.word	0x4000f000

00017e94 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   17e94:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   17e96:	4807      	ldr	r0, [pc, #28]	; (17eb4 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17e98:	4c07      	ldr	r4, [pc, #28]	; (17eb8 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   17e9a:	4a08      	ldr	r2, [pc, #32]	; (17ebc <radio_ar_status_reset+0x28>)
   17e9c:	2300      	movs	r3, #0
   17e9e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   17ea2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   17ea6:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   17eaa:	bc10      	pop	{r4}
   17eac:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   17eb0:	4770      	bx	lr
   17eb2:	bf00      	nop
   17eb4:	4000f000 	.word	0x4000f000
   17eb8:	40001000 	.word	0x40001000
   17ebc:	4001f000 	.word	0x4001f000

00017ec0 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   17ec0:	4b08      	ldr	r3, [pc, #32]	; (17ee4 <radio_ar_has_match+0x24>)
   17ec2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   17ec6:	b160      	cbz	r0, 17ee2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   17ec8:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   17ecc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   17ed0:	b138      	cbz	r0, 17ee2 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   17ed2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   17ed6:	b120      	cbz	r0, 17ee2 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   17ed8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   17edc:	fab0 f080 	clz	r0, r0
   17ee0:	0940      	lsrs	r0, r0, #5
}
   17ee2:	4770      	bx	lr
   17ee4:	40001000 	.word	0x40001000

00017ee8 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   17ee8:	2902      	cmp	r1, #2
{
   17eea:	b510      	push	{r4, lr}
   17eec:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   17eee:	d00b      	beq.n	17f08 <mayfly_enable_cb+0x20>
   17ef0:	4a0a      	ldr	r2, [pc, #40]	; (17f1c <mayfly_enable_cb+0x34>)
   17ef2:	490b      	ldr	r1, [pc, #44]	; (17f20 <mayfly_enable_cb+0x38>)
   17ef4:	480b      	ldr	r0, [pc, #44]	; (17f24 <mayfly_enable_cb+0x3c>)
   17ef6:	231e      	movs	r3, #30
   17ef8:	f00a ff85 	bl	22e06 <printk>
   17efc:	4040      	eors	r0, r0
   17efe:	f380 8811 	msr	BASEPRI, r0
   17f02:	f04f 0003 	mov.w	r0, #3
   17f06:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   17f08:	200b      	movs	r0, #11
	if (enable) {
   17f0a:	b11c      	cbz	r4, 17f14 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   17f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   17f10:	f7ec baa2 	b.w	4458 <arch_irq_enable>
}
   17f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   17f18:	f7ec baae 	b.w	4478 <arch_irq_disable>
   17f1c:	0002d2f4 	.word	0x0002d2f4
   17f20:	0002d344 	.word	0x0002d344
   17f24:	0002c630 	.word	0x0002c630

00017f28 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17f28:	b129      	cbz	r1, 17f36 <mayfly_is_enabled+0xe>
   17f2a:	3901      	subs	r1, #1
   17f2c:	2901      	cmp	r1, #1
   17f2e:	d805      	bhi.n	17f3c <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   17f30:	200b      	movs	r0, #11
   17f32:	f7ec bab5 	b.w	44a0 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   17f36:	2018      	movs	r0, #24
   17f38:	f7ec bab2 	b.w	44a0 <arch_irq_is_enabled>
{
   17f3c:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   17f3e:	4a07      	ldr	r2, [pc, #28]	; (17f5c <mayfly_is_enabled+0x34>)
   17f40:	4907      	ldr	r1, [pc, #28]	; (17f60 <mayfly_is_enabled+0x38>)
   17f42:	4808      	ldr	r0, [pc, #32]	; (17f64 <mayfly_is_enabled+0x3c>)
   17f44:	2336      	movs	r3, #54	; 0x36
   17f46:	f00a ff5e 	bl	22e06 <printk>
   17f4a:	4040      	eors	r0, r0
   17f4c:	f380 8811 	msr	BASEPRI, r0
   17f50:	f04f 0003 	mov.w	r0, #3
   17f54:	df02      	svc	2
		break;
	}

	return 0;
}
   17f56:	2000      	movs	r0, #0
   17f58:	bd08      	pop	{r3, pc}
   17f5a:	bf00      	nop
   17f5c:	0002d2f4 	.word	0x0002d2f4
   17f60:	0002c6a0 	.word	0x0002c6a0
   17f64:	0002c630 	.word	0x0002c630

00017f68 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   17f68:	4288      	cmp	r0, r1
   17f6a:	d00b      	beq.n	17f84 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   17f6c:	2801      	cmp	r0, #1
   17f6e:	d003      	beq.n	17f78 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   17f70:	2802      	cmp	r0, #2
   17f72:	d009      	beq.n	17f88 <mayfly_prio_is_equal+0x20>
   17f74:	2000      	movs	r0, #0
#endif
	       0;
}
   17f76:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   17f78:	f1a1 0002 	sub.w	r0, r1, #2
   17f7c:	fab0 f080 	clz	r0, r0
   17f80:	0940      	lsrs	r0, r0, #5
   17f82:	4770      	bx	lr
   17f84:	2001      	movs	r0, #1
   17f86:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   17f88:	f1a1 0001 	sub.w	r0, r1, #1
   17f8c:	fab0 f080 	clz	r0, r0
   17f90:	0940      	lsrs	r0, r0, #5
   17f92:	4770      	bx	lr

00017f94 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17f94:	2901      	cmp	r1, #1
{
   17f96:	b508      	push	{r3, lr}
	switch (callee_id) {
   17f98:	d00f      	beq.n	17fba <mayfly_pend+0x26>
   17f9a:	2902      	cmp	r1, #2
   17f9c:	d00d      	beq.n	17fba <mayfly_pend+0x26>
   17f9e:	b191      	cbz	r1, 17fc6 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   17fa0:	4a0c      	ldr	r2, [pc, #48]	; (17fd4 <mayfly_pend+0x40>)
   17fa2:	490d      	ldr	r1, [pc, #52]	; (17fd8 <mayfly_pend+0x44>)
   17fa4:	480d      	ldr	r0, [pc, #52]	; (17fdc <mayfly_pend+0x48>)
   17fa6:	2367      	movs	r3, #103	; 0x67
   17fa8:	f00a ff2d 	bl	22e06 <printk>
   17fac:	4040      	eors	r0, r0
   17fae:	f380 8811 	msr	BASEPRI, r0
   17fb2:	f04f 0003 	mov.w	r0, #3
   17fb6:	df02      	svc	2
		break;
	}
}
   17fb8:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17fba:	4b09      	ldr	r3, [pc, #36]	; (17fe0 <mayfly_pend+0x4c>)
   17fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17fc0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17fc4:	bd08      	pop	{r3, pc}
   17fc6:	4b06      	ldr	r3, [pc, #24]	; (17fe0 <mayfly_pend+0x4c>)
   17fc8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17fcc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17fd0:	bd08      	pop	{r3, pc}
   17fd2:	bf00      	nop
   17fd4:	0002d2f4 	.word	0x0002d2f4
   17fd8:	0002c6a0 	.word	0x0002c6a0
   17fdc:	0002c630 	.word	0x0002c630
   17fe0:	e000e100 	.word	0xe000e100

00017fe4 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17fe4:	2803      	cmp	r0, #3
{
   17fe6:	b510      	push	{r4, lr}
   17fe8:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17fea:	d804      	bhi.n	17ff6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   17fec:	4b11      	ldr	r3, [pc, #68]	; (18034 <hal_ticker_instance0_caller_id_get+0x50>)
   17fee:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   17ff0:	b18c      	cbz	r4, 18016 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   17ff2:	4620      	mov	r0, r4
   17ff4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17ff6:	4a10      	ldr	r2, [pc, #64]	; (18038 <hal_ticker_instance0_caller_id_get+0x54>)
   17ff8:	4910      	ldr	r1, [pc, #64]	; (1803c <hal_ticker_instance0_caller_id_get+0x58>)
   17ffa:	4811      	ldr	r0, [pc, #68]	; (18040 <hal_ticker_instance0_caller_id_get+0x5c>)
   17ffc:	232b      	movs	r3, #43	; 0x2b
   17ffe:	f00a ff02 	bl	22e06 <printk>
   18002:	4040      	eors	r0, r0
   18004:	f380 8811 	msr	BASEPRI, r0
   18008:	f04f 0003 	mov.w	r0, #3
   1800c:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1800e:	4b09      	ldr	r3, [pc, #36]	; (18034 <hal_ticker_instance0_caller_id_get+0x50>)
   18010:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   18012:	2c00      	cmp	r4, #0
   18014:	d1ed      	bne.n	17ff2 <hal_ticker_instance0_caller_id_get+0xe>
   18016:	4a08      	ldr	r2, [pc, #32]	; (18038 <hal_ticker_instance0_caller_id_get+0x54>)
   18018:	490a      	ldr	r1, [pc, #40]	; (18044 <hal_ticker_instance0_caller_id_get+0x60>)
   1801a:	4809      	ldr	r0, [pc, #36]	; (18040 <hal_ticker_instance0_caller_id_get+0x5c>)
   1801c:	232e      	movs	r3, #46	; 0x2e
   1801e:	f00a fef2 	bl	22e06 <printk>
   18022:	4040      	eors	r0, r0
   18024:	f380 8811 	msr	BASEPRI, r0
   18028:	f04f 0003 	mov.w	r0, #3
   1802c:	df02      	svc	2
}
   1802e:	4620      	mov	r0, r4
   18030:	bd10      	pop	{r4, pc}
   18032:	bf00      	nop
   18034:	0002d3fc 	.word	0x0002d3fc
   18038:	0002d368 	.word	0x0002d368
   1803c:	0002d3b8 	.word	0x0002d3b8
   18040:	0002c630 	.word	0x0002c630
   18044:	0002d3d8 	.word	0x0002d3d8

00018048 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   18048:	3801      	subs	r0, #1
{
   1804a:	b510      	push	{r4, lr}
   1804c:	461c      	mov	r4, r3
   1804e:	2804      	cmp	r0, #4
   18050:	d855      	bhi.n	180fe <hal_ticker_instance0_sched+0xb6>
   18052:	e8df f000 	tbb	[pc, r0]
   18056:	1a12      	.short	0x1a12
   18058:	1e16      	.short	0x1e16
   1805a:	03          	.byte	0x03
   1805b:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1805c:	2904      	cmp	r1, #4
   1805e:	d01e      	beq.n	1809e <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   18060:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   18062:	4a28      	ldr	r2, [pc, #160]	; (18104 <hal_ticker_instance0_sched+0xbc>)
   18064:	4928      	ldr	r1, [pc, #160]	; (18108 <hal_ticker_instance0_sched+0xc0>)
   18066:	4829      	ldr	r0, [pc, #164]	; (1810c <hal_ticker_instance0_sched+0xc4>)
   18068:	f00a fecd 	bl	22e06 <printk>
   1806c:	4040      	eors	r0, r0
   1806e:	f380 8811 	msr	BASEPRI, r0
   18072:	f04f 0003 	mov.w	r0, #3
   18076:	df02      	svc	2
		break;
	}
}
   18078:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1807a:	2904      	cmp	r1, #4
   1807c:	d01f      	beq.n	180be <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   1807e:	234e      	movs	r3, #78	; 0x4e
   18080:	e7ef      	b.n	18062 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   18082:	2904      	cmp	r1, #4
   18084:	d013      	beq.n	180ae <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   18086:	237c      	movs	r3, #124	; 0x7c
   18088:	e7eb      	b.n	18062 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1808a:	2903      	cmp	r1, #3
   1808c:	d01f      	beq.n	180ce <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   1808e:	2365      	movs	r3, #101	; 0x65
   18090:	e7e7      	b.n	18062 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   18092:	2903      	cmp	r1, #3
   18094:	d02b      	beq.n	180ee <hal_ticker_instance0_sched+0xa6>
   18096:	2904      	cmp	r1, #4
   18098:	d021      	beq.n	180de <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   1809a:	23a2      	movs	r3, #162	; 0xa2
   1809c:	e7e1      	b.n	18062 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   1809e:	4b1c      	ldr	r3, [pc, #112]	; (18110 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   180a0:	2102      	movs	r1, #2
			m.param = instance;
   180a2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   180a4:	2003      	movs	r0, #3
}
   180a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   180aa:	f7f3 bb01 	b.w	b6b0 <mayfly_enqueue>
			m.param = instance;
   180ae:	4b19      	ldr	r3, [pc, #100]	; (18114 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   180b0:	2102      	movs	r1, #2
			m.param = instance;
   180b2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   180b4:	2001      	movs	r0, #1
}
   180b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   180ba:	f7f3 baf9 	b.w	b6b0 <mayfly_enqueue>
			m.param = instance;
   180be:	4b16      	ldr	r3, [pc, #88]	; (18118 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   180c0:	2102      	movs	r1, #2
			m.param = instance;
   180c2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   180c4:	2000      	movs	r0, #0
}
   180c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   180ca:	f7f3 baf1 	b.w	b6b0 <mayfly_enqueue>
			m.param = instance;
   180ce:	4b13      	ldr	r3, [pc, #76]	; (1811c <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   180d0:	2101      	movs	r1, #1
			m.param = instance;
   180d2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   180d4:	4608      	mov	r0, r1
}
   180d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   180da:	f7f3 bae9 	b.w	b6b0 <mayfly_enqueue>
			m.param = instance;
   180de:	4b10      	ldr	r3, [pc, #64]	; (18120 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180e0:	2102      	movs	r1, #2
			m.param = instance;
   180e2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180e4:	4608      	mov	r0, r1
}
   180e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180ea:	f7f3 bae1 	b.w	b6b0 <mayfly_enqueue>
			m.param = instance;
   180ee:	4b0d      	ldr	r3, [pc, #52]	; (18124 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180f0:	2101      	movs	r1, #1
			m.param = instance;
   180f2:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180f4:	2002      	movs	r0, #2
}
   180f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180fa:	f7f3 bad9 	b.w	b6b0 <mayfly_enqueue>
		LL_ASSERT(0);
   180fe:	23c0      	movs	r3, #192	; 0xc0
   18100:	e7af      	b.n	18062 <hal_ticker_instance0_sched+0x1a>
   18102:	bf00      	nop
   18104:	0002d368 	.word	0x0002d368
   18108:	0002c6a0 	.word	0x0002c6a0
   1810c:	0002c630 	.word	0x0002c630
   18110:	2000071c 	.word	0x2000071c
   18114:	200006ec 	.word	0x200006ec
   18118:	200006cc 	.word	0x200006cc
   1811c:	200006dc 	.word	0x200006dc
   18120:	2000070c 	.word	0x2000070c
   18124:	200006fc 	.word	0x200006fc

00018128 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   18128:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1812a:	2000      	movs	r0, #0
   1812c:	f7ff ba4e 	b.w	175cc <cntr_cmp_set>

00018130 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   18130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18134:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   18138:	3201      	adds	r2, #1
   1813a:	d008      	beq.n	1814e <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1813c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18140:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   18144:	f013 0301 	ands.w	r3, r3, #1
   18148:	d10f      	bne.n	1816a <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1814a:	2000      	movs	r0, #0
   1814c:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1814e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   18152:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18156:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   18158:	4293      	cmp	r3, r2
   1815a:	d0f6      	beq.n	1814a <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1815c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18160:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   18164:	f013 0301 	ands.w	r3, r3, #1
   18168:	d0ef      	beq.n	1814a <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1816a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   1816e:	0c19      	lsrs	r1, r3, #16
{
   18170:	b410      	push	{r4}
	dst[0] = val;
   18172:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18174:	0a0c      	lsrs	r4, r1, #8
   18176:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1817a:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1817c:	70c4      	strb	r4, [r0, #3]
   1817e:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   18180:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   18184:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   18186:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1818a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1818e:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   18190:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   18194:	3301      	adds	r3, #1
   18196:	d035      	beq.n	18204 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   18198:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1819c:	3301      	adds	r3, #1
   1819e:	d031      	beq.n	18204 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   181a0:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   181a4:	3301      	adds	r3, #1
   181a6:	d02d      	beq.n	18204 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   181a8:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   181ac:	3301      	adds	r3, #1
   181ae:	d029      	beq.n	18204 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   181b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   181b4:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   181b6:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   181b8:	0a0c      	lsrs	r4, r1, #8
   181ba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   181be:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   181c0:	7244      	strb	r4, [r0, #9]
   181c2:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   181c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   181c8:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   181ca:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   181cc:	0a0c      	lsrs	r4, r1, #8
   181ce:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   181d2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   181d4:	7344      	strb	r4, [r0, #13]
   181d6:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   181d8:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   181dc:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   181de:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   181e0:	0a0c      	lsrs	r4, r1, #8
   181e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   181e6:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   181e8:	7444      	strb	r4, [r0, #17]
   181ea:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   181ec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   181f0:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   181f2:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   181f4:	0a11      	lsrs	r1, r2, #8
   181f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   181fa:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   181fc:	7541      	strb	r1, [r0, #21]
   181fe:	74c3      	strb	r3, [r0, #19]
		return 1;
   18200:	2001      	movs	r0, #1
}
   18202:	e009      	b.n	18218 <hci_vendor_read_static_addr+0xe8>
__ssp_bos_icheck3(memset, void *, int)
   18204:	2300      	movs	r3, #0
   18206:	f8c0 3006 	str.w	r3, [r0, #6]
   1820a:	f8c0 300a 	str.w	r3, [r0, #10]
   1820e:	f8c0 300e 	str.w	r3, [r0, #14]
   18212:	f8c0 3012 	str.w	r3, [r0, #18]
   18216:	2001      	movs	r0, #1
}
   18218:	bc10      	pop	{r4}
   1821a:	4770      	bx	lr

0001821c <hci_vendor_read_key_hierarchy_roots>:
   1821c:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1821e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18222:	6003      	str	r3, [r0, #0]
   18224:	6043      	str	r3, [r0, #4]
   18226:	6083      	str	r3, [r0, #8]
   18228:	60c3      	str	r3, [r0, #12]
   1822a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1822e:	3301      	adds	r3, #1
   18230:	d036      	beq.n	182a0 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   18232:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   18236:	3301      	adds	r3, #1
   18238:	d032      	beq.n	182a0 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1823a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1823e:	3301      	adds	r3, #1
   18240:	d02e      	beq.n	182a0 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   18242:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   18246:	3301      	adds	r3, #1
   18248:	d02a      	beq.n	182a0 <hci_vendor_read_key_hierarchy_roots+0x84>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1824a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   1824e:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   18250:	0c18      	lsrs	r0, r3, #16
{
   18252:	b410      	push	{r4}
	dst[1] = val >> 8;
   18254:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18258:	0a04      	lsrs	r4, r0, #8
	dst[0] = val;
   1825a:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1825c:	70cc      	strb	r4, [r1, #3]
   1825e:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   18260:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   18264:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   18266:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   18268:	0a04      	lsrs	r4, r0, #8
   1826a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1826e:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   18270:	71cc      	strb	r4, [r1, #7]
   18272:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   18274:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   18278:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1827a:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1827c:	0a04      	lsrs	r4, r0, #8
   1827e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18282:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   18284:	72cc      	strb	r4, [r1, #11]
   18286:	724b      	strb	r3, [r1, #9]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   18288:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   1828c:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1828e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   18290:	0a10      	lsrs	r0, r2, #8
   18292:	f3c3 2307 	ubfx	r3, r3, #8, #8
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   18296:	bc10      	pop	{r4}
	dst[0] = val;
   18298:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   1829a:	73c8      	strb	r0, [r1, #15]
   1829c:	734b      	strb	r3, [r1, #13]
   1829e:	4770      	bx	lr
   182a0:	2300      	movs	r3, #0
   182a2:	600b      	str	r3, [r1, #0]
   182a4:	604b      	str	r3, [r1, #4]
   182a6:	608b      	str	r3, [r1, #8]
   182a8:	60cb      	str	r3, [r1, #12]
   182aa:	4770      	bx	lr

000182ac <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   182ac:	4b02      	ldr	r3, [pc, #8]	; (182b8 <net_buf_pool_get+0xc>)
   182ae:	2228      	movs	r2, #40	; 0x28
   182b0:	fb02 3000 	mla	r0, r2, r0, r3
   182b4:	4770      	bx	lr
   182b6:	bf00      	nop
   182b8:	20000c60 	.word	0x20000c60

000182bc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   182bc:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   182be:	4a05      	ldr	r2, [pc, #20]	; (182d4 <net_buf_id+0x18>)
   182c0:	2128      	movs	r1, #40	; 0x28
   182c2:	fb01 2303 	mla	r3, r1, r3, r2
   182c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   182c8:	1ac0      	subs	r0, r0, r3
}
   182ca:	4b03      	ldr	r3, [pc, #12]	; (182d8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   182cc:	10c0      	asrs	r0, r0, #3
}
   182ce:	4358      	muls	r0, r3
   182d0:	4770      	bx	lr
   182d2:	bf00      	nop
   182d4:	20000c60 	.word	0x20000c60
   182d8:	aaaaaaab 	.word	0xaaaaaaab

000182dc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   182dc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   182de:	4a0a      	ldr	r2, [pc, #40]	; (18308 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   182e0:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   182e2:	2428      	movs	r4, #40	; 0x28
   182e4:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   182e8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   182ea:	6a1b      	ldr	r3, [r3, #32]
   182ec:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   182ee:	6823      	ldr	r3, [r4, #0]
   182f0:	429a      	cmp	r2, r3
   182f2:	bf94      	ite	ls
   182f4:	600a      	strls	r2, [r1, #0]
   182f6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   182f8:	f7ff ffe0 	bl	182bc <net_buf_id>
   182fc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   18300:	fb02 3000 	mla	r0, r2, r0, r3
   18304:	bd10      	pop	{r4, pc}
   18306:	bf00      	nop
   18308:	20000c60 	.word	0x20000c60

0001830c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1830c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   18310:	4605      	mov	r5, r0
   18312:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   18314:	4610      	mov	r0, r2
   18316:	4619      	mov	r1, r3
{
   18318:	4616      	mov	r6, r2
   1831a:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1831c:	f013 f866 	bl	2b3ec <z_timeout_end_calc>
   18320:	4680      	mov	r8, r0
   18322:	4689      	mov	r9, r1
	__asm__ volatile(
   18324:	f04f 0320 	mov.w	r3, #32
   18328:	f3ef 8a11 	mrs	sl, BASEPRI
   1832c:	f383 8811 	msr	BASEPRI, r3
   18330:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   18334:	8b6b      	ldrh	r3, [r5, #26]
   18336:	2b00      	cmp	r3, #0
   18338:	d054      	beq.n	183e4 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1833a:	8b2a      	ldrh	r2, [r5, #24]
   1833c:	429a      	cmp	r2, r3
   1833e:	d93d      	bls.n	183bc <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   18340:	2200      	movs	r2, #0
   18342:	2300      	movs	r3, #0
   18344:	4628      	mov	r0, r5
   18346:	f007 faf7 	bl	1f938 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1834a:	4604      	mov	r4, r0
   1834c:	2800      	cmp	r0, #0
   1834e:	d035      	beq.n	183bc <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   18350:	f38a 8811 	msr	BASEPRI, sl
   18354:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18358:	9b01      	ldr	r3, [sp, #4]
   1835a:	2b00      	cmp	r3, #0
   1835c:	d052      	beq.n	18404 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1835e:	ea56 0307 	orrs.w	r3, r6, r7
   18362:	d010      	beq.n	18386 <net_buf_alloc_len+0x7a>
   18364:	1c7b      	adds	r3, r7, #1
   18366:	bf08      	it	eq
   18368:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1836c:	d00b      	beq.n	18386 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1836e:	f008 f9b7 	bl	206e0 <z_tick_get>
   18372:	ebb8 0600 	subs.w	r6, r8, r0
   18376:	eb69 0701 	sbc.w	r7, r9, r1
   1837a:	2e00      	cmp	r6, #0
   1837c:	f177 0300 	sbcs.w	r3, r7, #0
   18380:	bfbc      	itt	lt
   18382:	2600      	movlt	r6, #0
   18384:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18386:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18388:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1841c <net_buf_alloc_len+0x110>
   1838c:	2228      	movs	r2, #40	; 0x28
   1838e:	fb02 8303 	mla	r3, r2, r3, r8
   18392:	a901      	add	r1, sp, #4
   18394:	6a1b      	ldr	r3, [r3, #32]
   18396:	681b      	ldr	r3, [r3, #0]
   18398:	4632      	mov	r2, r6
   1839a:	681d      	ldr	r5, [r3, #0]
   1839c:	4620      	mov	r0, r4
   1839e:	463b      	mov	r3, r7
   183a0:	47a8      	blx	r5
   183a2:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   183a4:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   183a6:	bb70      	cbnz	r0, 18406 <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   183a8:	79a0      	ldrb	r0, [r4, #6]
   183aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   183ae:	4621      	mov	r1, r4
   183b0:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   183b4:	f012 fdfb 	bl	2afae <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   183b8:	462c      	mov	r4, r5
}
   183ba:	e01f      	b.n	183fc <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   183bc:	8b68      	ldrh	r0, [r5, #26]
   183be:	1e43      	subs	r3, r0, #1
   183c0:	836b      	strh	r3, [r5, #26]
   183c2:	f38a 8811 	msr	BASEPRI, sl
   183c6:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   183ca:	8b2c      	ldrh	r4, [r5, #24]
   183cc:	1a24      	subs	r4, r4, r0
   183ce:	6a68      	ldr	r0, [r5, #36]	; 0x24
   183d0:	2318      	movs	r3, #24
   183d2:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   183d6:	4811      	ldr	r0, [pc, #68]	; (1841c <net_buf_alloc_len+0x110>)
   183d8:	4b11      	ldr	r3, [pc, #68]	; (18420 <net_buf_alloc_len+0x114>)
   183da:	1a2d      	subs	r5, r5, r0
   183dc:	10ed      	asrs	r5, r5, #3
   183de:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   183e0:	71a5      	strb	r5, [r4, #6]
		goto success;
   183e2:	e7b9      	b.n	18358 <net_buf_alloc_len+0x4c>
   183e4:	f38a 8811 	msr	BASEPRI, sl
   183e8:	f3bf 8f6f 	isb	sy
   183ec:	4632      	mov	r2, r6
   183ee:	463b      	mov	r3, r7
   183f0:	4628      	mov	r0, r5
   183f2:	f007 faa1 	bl	1f938 <z_impl_k_queue_get>
	if (!buf) {
   183f6:	4604      	mov	r4, r0
   183f8:	2800      	cmp	r0, #0
   183fa:	d1ad      	bne.n	18358 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   183fc:	4620      	mov	r0, r4
   183fe:	b002      	add	sp, #8
   18400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   18404:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   18406:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18408:	2201      	movs	r2, #1
	buf->frags = NULL;
   1840a:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1840c:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1840e:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   18410:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   18412:	6923      	ldr	r3, [r4, #16]
   18414:	81e2      	strh	r2, [r4, #14]
   18416:	60a3      	str	r3, [r4, #8]
	return buf;
   18418:	e7f0      	b.n	183fc <net_buf_alloc_len+0xf0>
   1841a:	bf00      	nop
   1841c:	20000c60 	.word	0x20000c60
   18420:	cccccccd 	.word	0xcccccccd

00018424 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   18424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18428:	4d17      	ldr	r5, [pc, #92]	; (18488 <net_buf_unref+0x64>)
   1842a:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1842c:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1842e:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   18430:	b90c      	cbnz	r4, 18436 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18436:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   18438:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1843c:	3b01      	subs	r3, #1
   1843e:	b2db      	uxtb	r3, r3
   18440:	7123      	strb	r3, [r4, #4]
   18442:	2b00      	cmp	r3, #0
   18444:	d1f5      	bne.n	18432 <net_buf_unref+0xe>
		if (buf->__buf) {
   18446:	6921      	ldr	r1, [r4, #16]
   18448:	b159      	cbz	r1, 18462 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1844a:	7963      	ldrb	r3, [r4, #5]
   1844c:	079b      	lsls	r3, r3, #30
   1844e:	d407      	bmi.n	18460 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   18450:	79a3      	ldrb	r3, [r4, #6]
   18452:	fb07 5303 	mla	r3, r7, r3, r5
   18456:	4620      	mov	r0, r4
   18458:	6a1b      	ldr	r3, [r3, #32]
   1845a:	681b      	ldr	r3, [r3, #0]
   1845c:	689b      	ldr	r3, [r3, #8]
   1845e:	4798      	blx	r3
			buf->__buf = NULL;
   18460:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   18462:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   18464:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   18466:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1846a:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1846c:	69db      	ldr	r3, [r3, #28]
   1846e:	b11b      	cbz	r3, 18478 <net_buf_unref+0x54>
			pool->destroy(buf);
   18470:	4620      	mov	r0, r4
   18472:	4798      	blx	r3
{
   18474:	4644      	mov	r4, r8
   18476:	e7db      	b.n	18430 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   18478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1847c:	4621      	mov	r1, r4
   1847e:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   18482:	f012 fd94 	bl	2afae <k_queue_prepend>
}
   18486:	e7f5      	b.n	18474 <net_buf_unref+0x50>
   18488:	20000c60 	.word	0x20000c60

0001848c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1848c:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1848e:	4b09      	ldr	r3, [pc, #36]	; (184b4 <gpio_nrfx_init+0x28>)
   18490:	781a      	ldrb	r2, [r3, #0]
   18492:	b96a      	cbnz	r2, 184b0 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   18494:	2101      	movs	r1, #1
   18496:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18498:	2006      	movs	r0, #6
   1849a:	2105      	movs	r1, #5
   1849c:	f7ec f80e 	bl	44bc <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   184a0:	2006      	movs	r0, #6
   184a2:	f7eb ffd9 	bl	4458 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   184a6:	4b04      	ldr	r3, [pc, #16]	; (184b8 <gpio_nrfx_init+0x2c>)
   184a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   184ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   184b0:	2000      	movs	r0, #0
   184b2:	bd08      	pop	{r3, pc}
   184b4:	20008630 	.word	0x20008630
   184b8:	40006000 	.word	0x40006000

000184bc <gpio_nrfx_pin_interrupt_configure>:
{
   184bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   184be:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   184c0:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   184c2:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   184c4:	7a09      	ldrb	r1, [r1, #8]
   184c6:	f005 041f 	and.w	r4, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   184ca:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   184ce:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   184d2:	d10c      	bne.n	184ee <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   184d4:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   184d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   184dc:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   184e0:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   184e4:	07c8      	lsls	r0, r1, #31
   184e6:	d507      	bpl.n	184f8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   184e8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   184ec:	e093      	b.n	18616 <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   184ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   184f2:	68f1      	ldr	r1, [r6, #12]
   184f4:	f000 8091 	beq.w	1861a <gpio_nrfx_pin_interrupt_configure+0x15e>
   184f8:	68f0      	ldr	r0, [r6, #12]
   184fa:	2101      	movs	r1, #1
   184fc:	40a9      	lsls	r1, r5
   184fe:	4301      	orrs	r1, r0
   18500:	6970      	ldr	r0, [r6, #20]
   18502:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   18504:	2101      	movs	r1, #1
   18506:	40a9      	lsls	r1, r5
   18508:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1850c:	69b2      	ldr	r2, [r6, #24]
   1850e:	bf0c      	ite	eq
   18510:	4308      	orreq	r0, r1
   18512:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   18514:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   18518:	bf0c      	ite	eq
   1851a:	430a      	orreq	r2, r1
   1851c:	438a      	bicne	r2, r1
   1851e:	61b2      	str	r2, [r6, #24]
   18520:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   18522:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   18524:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   18528:	bf0c      	ite	eq
   1852a:	4311      	orreq	r1, r2
   1852c:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   18530:	4a46      	ldr	r2, [pc, #280]	; (1864c <gpio_nrfx_pin_interrupt_configure+0x190>)
   18532:	6131      	str	r1, [r6, #16]
   18534:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18538:	2000      	movs	r0, #0
   1853a:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1853c:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   18540:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   18544:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   18548:	428c      	cmp	r4, r1
   1854a:	d16b      	bne.n	18624 <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
   1854c:	fa23 f100 	lsr.w	r1, r3, r0
   18550:	07c9      	lsls	r1, r1, #31
   18552:	d567      	bpl.n	18624 <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   18554:	0083      	lsls	r3, r0, #2
   18556:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1855a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1855e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   18562:	f021 0101 	bic.w	r1, r1, #1
   18566:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1856a:	2301      	movs	r3, #1
   1856c:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1856e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   18572:	b2c0      	uxtb	r0, r0
   18574:	f001 f84c 	bl	19610 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   18578:	4620      	mov	r0, r4
   1857a:	2100      	movs	r1, #0
   1857c:	f00d fcde 	bl	25f3c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   18580:	68f0      	ldr	r0, [r6, #12]
   18582:	40e8      	lsrs	r0, r5
   18584:	f010 0001 	ands.w	r0, r0, #1
   18588:	d045      	beq.n	18616 <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
   1858a:	6970      	ldr	r0, [r6, #20]
   1858c:	40e8      	lsrs	r0, r5
   1858e:	f010 0201 	ands.w	r2, r0, #1
   18592:	d04e      	beq.n	18632 <gpio_nrfx_pin_interrupt_configure+0x176>
			if (data->double_edge & BIT(pin)) {
   18594:	69b3      	ldr	r3, [r6, #24]
   18596:	40eb      	lsrs	r3, r5
   18598:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1859a:	bf5f      	itttt	pl
   1859c:	6931      	ldrpl	r1, [r6, #16]
   1859e:	fa21 f505 	lsrpl.w	r5, r1, r5
   185a2:	f005 0501 	andpl.w	r5, r5, #1
   185a6:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   185aa:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   185ae:	bf54      	ite	pl
   185b0:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   185b2:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   185b4:	f001 f84e 	bl	19654 <nrfx_gpiote_channel_alloc>
   185b8:	4b25      	ldr	r3, [pc, #148]	; (18650 <gpio_nrfx_pin_interrupt_configure+0x194>)
   185ba:	4298      	cmp	r0, r3
   185bc:	d136      	bne.n	1862c <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   185be:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   185c2:	008b      	lsls	r3, r1, #2
   185c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   185c8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   185cc:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   185ce:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   185d2:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   185d6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   185da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   185de:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   185e2:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   185e6:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   185e8:	008a      	lsls	r2, r1, #2
   185ea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   185ee:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   185f2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   185f6:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   185f8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   185fc:	6010      	str	r0, [r2, #0]
   185fe:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   18600:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   18604:	f042 0201 	orr.w	r2, r2, #1
   18608:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1860c:	4a0f      	ldr	r2, [pc, #60]	; (1864c <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1860e:	2301      	movs	r3, #1
   18610:	408b      	lsls	r3, r1
   18612:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   18616:	b002      	add	sp, #8
   18618:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1861a:	2001      	movs	r0, #1
   1861c:	40a8      	lsls	r0, r5
   1861e:	ea21 0100 	bic.w	r1, r1, r0
   18622:	e76d      	b.n	18500 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18624:	3001      	adds	r0, #1
   18626:	2808      	cmp	r0, #8
   18628:	d188      	bne.n	1853c <gpio_nrfx_pin_interrupt_configure+0x80>
   1862a:	e7a5      	b.n	18578 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   1862c:	f06f 0012 	mvn.w	r0, #18
   18630:	e7f1      	b.n	18616 <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   18632:	6931      	ldr	r1, [r6, #16]
   18634:	40e9      	lsrs	r1, r5
   18636:	f001 0101 	and.w	r1, r1, #1
   1863a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1863e:	4620      	mov	r0, r4
   18640:	b2c9      	uxtb	r1, r1
   18642:	f00d fc7b 	bl	25f3c <nrf_gpio_cfg_sense_set>
	int res = 0;
   18646:	4610      	mov	r0, r2
   18648:	e7e5      	b.n	18616 <gpio_nrfx_pin_interrupt_configure+0x15a>
   1864a:	bf00      	nop
   1864c:	40006000 	.word	0x40006000
   18650:	0bad0000 	.word	0x0bad0000

00018654 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18654:	4b2a      	ldr	r3, [pc, #168]	; (18700 <gpio_nrfx_config+0xac>)
{
   18656:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18658:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1865a:	482a      	ldr	r0, [pc, #168]	; (18704 <gpio_nrfx_config+0xb0>)
   1865c:	4013      	ands	r3, r2
   1865e:	4283      	cmp	r3, r0
   18660:	d03e      	beq.n	186e0 <gpio_nrfx_config+0x8c>
   18662:	d80d      	bhi.n	18680 <gpio_nrfx_config+0x2c>
   18664:	2b06      	cmp	r3, #6
   18666:	d015      	beq.n	18694 <gpio_nrfx_config+0x40>
   18668:	d805      	bhi.n	18676 <gpio_nrfx_config+0x22>
   1866a:	b19b      	cbz	r3, 18694 <gpio_nrfx_config+0x40>
   1866c:	2b02      	cmp	r3, #2
   1866e:	d039      	beq.n	186e4 <gpio_nrfx_config+0x90>
   18670:	f06f 0015 	mvn.w	r0, #21
   18674:	e033      	b.n	186de <gpio_nrfx_config+0x8a>
   18676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1867a:	d1f9      	bne.n	18670 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1867c:	2301      	movs	r3, #1
   1867e:	e009      	b.n	18694 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18680:	4821      	ldr	r0, [pc, #132]	; (18708 <gpio_nrfx_config+0xb4>)
   18682:	4283      	cmp	r3, r0
   18684:	d030      	beq.n	186e8 <gpio_nrfx_config+0x94>
   18686:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1868a:	d02f      	beq.n	186ec <gpio_nrfx_config+0x98>
   1868c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   18690:	d1ee      	bne.n	18670 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   18692:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   18694:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   18696:	bf54      	ite	pl
   18698:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1869c:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1869e:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   186a2:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   186a6:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   186aa:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   186ae:	d007      	beq.n	186c0 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   186b0:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   186b4:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   186b6:	d01b      	beq.n	186f0 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   186b8:	2201      	movs	r2, #1
   186ba:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   186bc:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   186c0:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   186c4:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   186c8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   186cc:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   186d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   186d4:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   186d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   186dc:	2000      	movs	r0, #0
}
   186de:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   186e0:	2307      	movs	r3, #7
   186e2:	e7d7      	b.n	18694 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   186e4:	2304      	movs	r3, #4
   186e6:	e7d5      	b.n	18694 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   186e8:	2305      	movs	r3, #5
   186ea:	e7d3      	b.n	18694 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   186ec:	2303      	movs	r3, #3
   186ee:	e7d1      	b.n	18694 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   186f0:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   186f2:	bf42      	ittt	mi
   186f4:	2201      	movmi	r2, #1
   186f6:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   186f8:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   186fc:	e7e0      	b.n	186c0 <gpio_nrfx_config+0x6c>
   186fe:	bf00      	nop
   18700:	00f00006 	.word	0x00f00006
   18704:	00100006 	.word	0x00100006
   18708:	00400002 	.word	0x00400002

0001870c <gpiote_event_handler>:
{
   1870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18710:	4d3f      	ldr	r5, [pc, #252]	; (18810 <gpiote_event_handler+0x104>)
   18712:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   18714:	2e00      	cmp	r6, #0
   18716:	d04e      	beq.n	187b6 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   18718:	4b3e      	ldr	r3, [pc, #248]	; (18814 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   1871a:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   1871e:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   18720:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   18722:	4301      	orrs	r1, r0
   18724:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   18728:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   1872c:	2701      	movs	r7, #1
   1872e:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   18732:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   18734:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   18738:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   1873c:	bb72      	cbnz	r2, 1879c <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1873e:	602a      	str	r2, [r5, #0]
   18740:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   18742:	4835      	ldr	r0, [pc, #212]	; (18818 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   18744:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   18746:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18748:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1874a:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1874e:	fa05 f103 	lsl.w	r1, r5, r3
   18752:	4211      	tst	r1, r2
   18754:	d011      	beq.n	1877a <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   18756:	009a      	lsls	r2, r3, #2
   18758:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1875c:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   18760:	6811      	ldr	r1, [r2, #0]
   18762:	b151      	cbz	r1, 1877a <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18764:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   18768:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1876c:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1876e:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   18772:	fa05 f101 	lsl.w	r1, r5, r1
   18776:	6812      	ldr	r2, [r2, #0]
   18778:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1877a:	3301      	adds	r3, #1
   1877c:	2b08      	cmp	r3, #8
   1877e:	d1e4      	bne.n	1874a <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   18780:	b9dc      	cbnz	r4, 187ba <gpiote_event_handler+0xae>
	if (port_event) {
   18782:	b14e      	cbz	r6, 18798 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   18784:	4c23      	ldr	r4, [pc, #140]	; (18814 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   18786:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   1878a:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1878c:	4301      	orrs	r1, r0
   1878e:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   18792:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   18794:	2600      	movs	r6, #0
	while (level_pins) {
   18796:	bb42      	cbnz	r2, 187ea <gpiote_event_handler+0xde>
}
   18798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1879c:	423a      	tst	r2, r7
   1879e:	d006      	beq.n	187ae <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   187a0:	2100      	movs	r1, #0
   187a2:	f008 001f 	and.w	r0, r8, #31
   187a6:	f00d fbc9 	bl	25f3c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   187aa:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   187ae:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   187b2:	007f      	lsls	r7, r7, #1
   187b4:	e7c2      	b.n	1873c <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   187b6:	4634      	mov	r4, r6
   187b8:	e7c3      	b.n	18742 <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   187ba:	4b16      	ldr	r3, [pc, #88]	; (18814 <gpiote_event_handler+0x108>)
   187bc:	6859      	ldr	r1, [r3, #4]
   187be:	2900      	cmp	r1, #0
   187c0:	d0df      	beq.n	18782 <gpiote_event_handler+0x76>
	return node->next;
   187c2:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   187c4:	4f15      	ldr	r7, [pc, #84]	; (1881c <gpiote_event_handler+0x110>)
   187c6:	2d00      	cmp	r5, #0
   187c8:	bf38      	it	cc
   187ca:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   187cc:	688a      	ldr	r2, [r1, #8]
   187ce:	4022      	ands	r2, r4
   187d0:	d002      	beq.n	187d8 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   187d2:	684b      	ldr	r3, [r1, #4]
   187d4:	4638      	mov	r0, r7
   187d6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   187d8:	2d00      	cmp	r5, #0
   187da:	d0d2      	beq.n	18782 <gpiote_event_handler+0x76>
   187dc:	682b      	ldr	r3, [r5, #0]
   187de:	2b00      	cmp	r3, #0
   187e0:	bf38      	it	cc
   187e2:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   187e4:	4629      	mov	r1, r5
   187e6:	461d      	mov	r5, r3
   187e8:	e7f0      	b.n	187cc <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   187ea:	4215      	tst	r5, r2
   187ec:	d00c      	beq.n	18808 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   187ee:	6921      	ldr	r1, [r4, #16]
   187f0:	40f1      	lsrs	r1, r6
   187f2:	f001 0101 	and.w	r1, r1, #1
   187f6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   187fa:	b2c9      	uxtb	r1, r1
   187fc:	f006 001f 	and.w	r0, r6, #31
   18800:	f00d fb9c 	bl	25f3c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   18804:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   18808:	3601      	adds	r6, #1
		bit <<= 1;
   1880a:	006d      	lsls	r5, r5, #1
   1880c:	e7c3      	b.n	18796 <gpiote_event_handler+0x8a>
   1880e:	bf00      	nop
   18810:	4000617c 	.word	0x4000617c
   18814:	20003d88 	.word	0x20003d88
   18818:	40006000 	.word	0x40006000
   1881c:	20000adc 	.word	0x20000adc

00018820 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   18820:	b510      	push	{r4, lr}
   18822:	4604      	mov	r4, r0
   18824:	2200      	movs	r2, #0
   18826:	2101      	movs	r1, #1
   18828:	2003      	movs	r0, #3
   1882a:	f7eb fe47 	bl	44bc <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   1882e:	6860      	ldr	r0, [r4, #4]
   18830:	68e3      	ldr	r3, [r4, #12]
   18832:	4a0c      	ldr	r2, [pc, #48]	; (18864 <twim_0_init+0x44>)
   18834:	f100 0108 	add.w	r1, r0, #8
   18838:	f001 f89c 	bl	19974 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   1883c:	4b0a      	ldr	r3, [pc, #40]	; (18868 <twim_0_init+0x48>)
   1883e:	4298      	cmp	r0, r3
   18840:	d00d      	beq.n	1885e <twim_0_init+0x3e>
   18842:	4b0a      	ldr	r3, [pc, #40]	; (1886c <twim_0_init+0x4c>)
   18844:	4a0a      	ldr	r2, [pc, #40]	; (18870 <twim_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   18846:	480b      	ldr	r0, [pc, #44]	; (18874 <twim_0_init+0x54>)
   18848:	6821      	ldr	r1, [r4, #0]
   1884a:	1ad2      	subs	r2, r2, r3
   1884c:	08d2      	lsrs	r2, r2, #3
   1884e:	0192      	lsls	r2, r2, #6
   18850:	f042 0201 	orr.w	r2, r2, #1
   18854:	f00a fef9 	bl	2364a <log_1>
		return -EBUSY;
   18858:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(0);
   1885c:	bd10      	pop	{r4, pc}
	return 0;
   1885e:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(0);
   18860:	e7fc      	b.n	1885c <twim_0_init+0x3c>
   18862:	bf00      	nop
   18864:	000188cd 	.word	0x000188cd
   18868:	0bad0000 	.word	0x0bad0000
   1886c:	0002bfa8 	.word	0x0002bfa8
   18870:	0002c0b0 	.word	0x0002c0b0
   18874:	0002f941 	.word	0x0002f941

00018878 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   18878:	07ca      	lsls	r2, r1, #31
{
   1887a:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   1887c:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1887e:	d40f      	bmi.n	188a0 <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   18880:	f3c1 0242 	ubfx	r2, r1, #1, #3
   18884:	2a01      	cmp	r2, #1
   18886:	d00e      	beq.n	188a6 <i2c_nrfx_twim_configure+0x2e>
   18888:	2a02      	cmp	r2, #2
   1888a:	d015      	beq.n	188b8 <i2c_nrfx_twim_configure+0x40>
   1888c:	490c      	ldr	r1, [pc, #48]	; (188c0 <i2c_nrfx_twim_configure+0x48>)
   1888e:	4b0d      	ldr	r3, [pc, #52]	; (188c4 <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   18890:	480d      	ldr	r0, [pc, #52]	; (188c8 <i2c_nrfx_twim_configure+0x50>)
   18892:	1ac9      	subs	r1, r1, r3
   18894:	08c9      	lsrs	r1, r1, #3
   18896:	0189      	lsls	r1, r1, #6
   18898:	f041 0101 	orr.w	r1, r1, #1
   1889c:	f00a fec8 	bl	23630 <log_0>
		return -EINVAL;
   188a0:	f06f 0015 	mvn.w	r0, #21
   188a4:	e007      	b.n	188b6 <i2c_nrfx_twim_configure+0x3e>
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   188a6:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   188a8:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   188ac:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   188b0:	68c3      	ldr	r3, [r0, #12]
	return 0;
   188b2:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   188b4:	6359      	str	r1, [r3, #52]	; 0x34
}
   188b6:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   188b8:	681b      	ldr	r3, [r3, #0]
   188ba:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   188be:	e7f5      	b.n	188ac <i2c_nrfx_twim_configure+0x34>
   188c0:	0002c0b0 	.word	0x0002c0b0
   188c4:	0002bfa8 	.word	0x0002bfa8
   188c8:	0002f961 	.word	0x0002f961

000188cc <event_handler>:
	switch (p_event->type) {
   188cc:	7803      	ldrb	r3, [r0, #0]
   188ce:	2b01      	cmp	r3, #1
   188d0:	d008      	beq.n	188e4 <event_handler+0x18>
   188d2:	2b02      	cmp	r3, #2
   188d4:	d008      	beq.n	188e8 <event_handler+0x1c>
   188d6:	b94b      	cbnz	r3, 188ec <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   188d8:	4b05      	ldr	r3, [pc, #20]	; (188f0 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   188da:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   188dc:	f101 0018 	add.w	r0, r1, #24
   188e0:	f007 bbfc 	b.w	200dc <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   188e4:	4b03      	ldr	r3, [pc, #12]	; (188f4 <event_handler+0x28>)
   188e6:	e7f8      	b.n	188da <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   188e8:	4b03      	ldr	r3, [pc, #12]	; (188f8 <event_handler+0x2c>)
   188ea:	e7f6      	b.n	188da <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   188ec:	4b03      	ldr	r3, [pc, #12]	; (188fc <event_handler+0x30>)
   188ee:	e7f4      	b.n	188da <event_handler+0xe>
   188f0:	0bad0000 	.word	0x0bad0000
   188f4:	0bae0001 	.word	0x0bae0001
   188f8:	0bae0002 	.word	0x0bae0002
   188fc:	0bad0001 	.word	0x0bad0001

00018900 <i2c_nrfx_twim_transfer>:
{
   18900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   18904:	68c4      	ldr	r4, [r0, #12]
{
   18906:	b08b      	sub	sp, #44	; 0x2c
   18908:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   1890a:	2214      	movs	r2, #20
{
   1890c:	461d      	mov	r5, r3
   1890e:	4606      	mov	r6, r0
   18910:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   18912:	eb0d 0002 	add.w	r0, sp, r2
   18916:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   18918:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   1891c:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   18920:	f012 ff68 	bl	2b7f4 <memset>
   18924:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   18928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1892c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18930:	4620      	mov	r0, r4
   18932:	f007 fbf9 	bl	20128 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   18936:	68f0      	ldr	r0, [r6, #12]
   18938:	3018      	adds	r0, #24
   1893a:	2200      	movs	r2, #0
   1893c:	2300      	movs	r3, #0
   1893e:	f007 fbf3 	bl	20128 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   18942:	6870      	ldr	r0, [r6, #4]
   18944:	f001 f85c 	bl	19a00 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   18948:	2700      	movs	r7, #0
   1894a:	464d      	mov	r5, r9
	uint32_t concat_len = 0;
   1894c:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   1894e:	455f      	cmp	r7, fp
   18950:	d301      	bcc.n	18956 <i2c_nrfx_twim_transfer+0x56>
   18952:	2400      	movs	r4, #0
   18954:	e049      	b.n	189ea <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   18956:	7a29      	ldrb	r1, [r5, #8]
   18958:	070b      	lsls	r3, r1, #28
   1895a:	f100 80a6 	bmi.w	18aaa <i2c_nrfx_twim_transfer+0x1aa>
			&& ((msgs[i].flags & I2C_MSG_READ)
   1895e:	f1ba 0f00 	cmp.w	sl, #0
   18962:	d00d      	beq.n	18980 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   18964:	1c7b      	adds	r3, r7, #1
   18966:	459b      	cmp	fp, r3
   18968:	d90a      	bls.n	18980 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   1896a:	0788      	lsls	r0, r1, #30
   1896c:	d408      	bmi.n	18980 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   1896e:	7d2b      	ldrb	r3, [r5, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   18970:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   18974:	f002 0201 	and.w	r2, r2, #1
   18978:	f003 0304 	and.w	r3, r3, #4
   1897c:	4313      	orrs	r3, r2
   1897e:	d01f      	beq.n	189c0 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   18980:	2c00      	cmp	r4, #0
   18982:	d13c      	bne.n	189fe <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   18984:	682b      	ldr	r3, [r5, #0]
   18986:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   18988:	686b      	ldr	r3, [r5, #4]
   1898a:	9306      	str	r3, [sp, #24]
   1898c:	2400      	movs	r4, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1898e:	7a2b      	ldrb	r3, [r5, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   18990:	6870      	ldr	r0, [r6, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   18992:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   18996:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   1899a:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1899e:	a905      	add	r1, sp, #20
   189a0:	bf0c      	ite	eq
   189a2:	2220      	moveq	r2, #32
   189a4:	2200      	movne	r2, #0
   189a6:	f001 f857 	bl	19a58 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   189aa:	4b41      	ldr	r3, [pc, #260]	; (18ab0 <i2c_nrfx_twim_transfer+0x1b0>)
   189ac:	4298      	cmp	r0, r3
   189ae:	d03a      	beq.n	18a26 <i2c_nrfx_twim_transfer+0x126>
			if (res == NRFX_ERROR_BUSY) {
   189b0:	330b      	adds	r3, #11
				ret = -EIO;
   189b2:	4298      	cmp	r0, r3
   189b4:	bf0c      	ite	eq
   189b6:	f06f 040f 	mvneq.w	r4, #15
   189ba:	f06f 0404 	mvnne.w	r4, #4
   189be:	e014      	b.n	189ea <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
   189c0:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   189c2:	686a      	ldr	r2, [r5, #4]
   189c4:	1910      	adds	r0, r2, r4
   189c6:	4550      	cmp	r0, sl
   189c8:	d91b      	bls.n	18a02 <i2c_nrfx_twim_transfer+0x102>
   189ca:	493a      	ldr	r1, [pc, #232]	; (18ab4 <i2c_nrfx_twim_transfer+0x1b4>)
   189cc:	4b3a      	ldr	r3, [pc, #232]	; (18ab8 <i2c_nrfx_twim_transfer+0x1b8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   189ce:	483b      	ldr	r0, [pc, #236]	; (18abc <i2c_nrfx_twim_transfer+0x1bc>)
   189d0:	1a5b      	subs	r3, r3, r1
   189d2:	08db      	lsrs	r3, r3, #3
   189d4:	019b      	lsls	r3, r3, #6
   189d6:	f043 0301 	orr.w	r3, r3, #1
   189da:	f8ad 3000 	strh.w	r3, [sp]
   189de:	4621      	mov	r1, r4
   189e0:	4653      	mov	r3, sl
   189e2:	f00a fe5f 	bl	236a4 <log_3>
				ret = -ENOSPC;
   189e6:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   189ea:	6870      	ldr	r0, [r6, #4]
   189ec:	f001 f818 	bl	19a20 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   189f0:	68f0      	ldr	r0, [r6, #12]
	z_impl_k_sem_give(sem);
   189f2:	f007 fb73 	bl	200dc <z_impl_k_sem_give>
}
   189f6:	4620      	mov	r0, r4
   189f8:	b00b      	add	sp, #44	; 0x2c
   189fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   189fe:	2300      	movs	r3, #0
   18a00:	e7df      	b.n	189c2 <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   18a02:	07c9      	lsls	r1, r1, #31
   18a04:	d406      	bmi.n	18a14 <i2c_nrfx_twim_transfer+0x114>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18a06:	6829      	ldr	r1, [r5, #0]
   18a08:	9303      	str	r3, [sp, #12]
   18a0a:	eb08 0004 	add.w	r0, r8, r4
   18a0e:	f012 fed0 	bl	2b7b2 <memcpy>
   18a12:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
   18a14:	686a      	ldr	r2, [r5, #4]
   18a16:	4414      	add	r4, r2
		if (concat_next) {
   18a18:	bb83      	cbnz	r3, 18a7c <i2c_nrfx_twim_transfer+0x17c>
		if (concat_len == 0) {
   18a1a:	2c00      	cmp	r4, #0
   18a1c:	d0b2      	beq.n	18984 <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   18a1e:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
   18a22:	9406      	str	r4, [sp, #24]
   18a24:	e7b3      	b.n	1898e <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   18a26:	68f0      	ldr	r0, [r6, #12]
   18a28:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   18a2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   18a2e:	2300      	movs	r3, #0
   18a30:	f007 fb7a 	bl	20128 <z_impl_k_sem_take>
		if (ret != 0) {
   18a34:	b168      	cbz	r0, 18a52 <i2c_nrfx_twim_transfer+0x152>
   18a36:	4a20      	ldr	r2, [pc, #128]	; (18ab8 <i2c_nrfx_twim_transfer+0x1b8>)
   18a38:	4b1e      	ldr	r3, [pc, #120]	; (18ab4 <i2c_nrfx_twim_transfer+0x1b4>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   18a3a:	4821      	ldr	r0, [pc, #132]	; (18ac0 <i2c_nrfx_twim_transfer+0x1c0>)
   18a3c:	1ad2      	subs	r2, r2, r3
   18a3e:	08d2      	lsrs	r2, r2, #3
   18a40:	0192      	lsls	r2, r2, #6
   18a42:	f042 0201 	orr.w	r2, r2, #1
   18a46:	4639      	mov	r1, r7
   18a48:	f00a fdff 	bl	2364a <log_1>
			ret = -EIO;
   18a4c:	f06f 0404 	mvn.w	r4, #4
			break;
   18a50:	e7cb      	b.n	189ea <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
   18a52:	68f3      	ldr	r3, [r6, #12]
   18a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   18a56:	4b16      	ldr	r3, [pc, #88]	; (18ab0 <i2c_nrfx_twim_transfer+0x1b0>)
   18a58:	4299      	cmp	r1, r3
   18a5a:	d00b      	beq.n	18a74 <i2c_nrfx_twim_transfer+0x174>
   18a5c:	4a15      	ldr	r2, [pc, #84]	; (18ab4 <i2c_nrfx_twim_transfer+0x1b4>)
   18a5e:	4b16      	ldr	r3, [pc, #88]	; (18ab8 <i2c_nrfx_twim_transfer+0x1b8>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   18a60:	4818      	ldr	r0, [pc, #96]	; (18ac4 <i2c_nrfx_twim_transfer+0x1c4>)
   18a62:	1a9b      	subs	r3, r3, r2
   18a64:	08db      	lsrs	r3, r3, #3
   18a66:	019b      	lsls	r3, r3, #6
   18a68:	f043 0301 	orr.w	r3, r3, #1
   18a6c:	463a      	mov	r2, r7
   18a6e:	f00a fe00 	bl	23672 <log_2>
   18a72:	e7eb      	b.n	18a4c <i2c_nrfx_twim_transfer+0x14c>
		if ((msgs[i].flags & I2C_MSG_READ)
   18a74:	7a2b      	ldrb	r3, [r5, #8]
   18a76:	07db      	lsls	r3, r3, #31
   18a78:	d403      	bmi.n	18a82 <i2c_nrfx_twim_transfer+0x182>
		concat_len = 0;
   18a7a:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   18a7c:	3701      	adds	r7, #1
   18a7e:	350c      	adds	r5, #12
   18a80:	e765      	b.n	1894e <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
   18a82:	9b08      	ldr	r3, [sp, #32]
   18a84:	4598      	cmp	r8, r3
   18a86:	d1f8      	bne.n	18a7a <i2c_nrfx_twim_transfer+0x17a>
			while (concat_len >= msgs[j].len) {
   18a88:	230c      	movs	r3, #12
   18a8a:	fb03 9307 	mla	r3, r3, r7, r9
   18a8e:	685a      	ldr	r2, [r3, #4]
   18a90:	4294      	cmp	r4, r2
   18a92:	f1a3 030c 	sub.w	r3, r3, #12
   18a96:	d3f0      	bcc.n	18a7a <i2c_nrfx_twim_transfer+0x17a>
				concat_len -= msgs[j].len;
   18a98:	1aa4      	subs	r4, r4, r2
   18a9a:	68d8      	ldr	r0, [r3, #12]
   18a9c:	9303      	str	r3, [sp, #12]
   18a9e:	eb08 0104 	add.w	r1, r8, r4
   18aa2:	f012 fe86 	bl	2b7b2 <memcpy>
   18aa6:	9b03      	ldr	r3, [sp, #12]
				j--;
   18aa8:	e7f1      	b.n	18a8e <i2c_nrfx_twim_transfer+0x18e>
			ret = -ENOTSUP;
   18aaa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   18aae:	e79c      	b.n	189ea <i2c_nrfx_twim_transfer+0xea>
   18ab0:	0bad0000 	.word	0x0bad0000
   18ab4:	0002bfa8 	.word	0x0002bfa8
   18ab8:	0002c0b0 	.word	0x0002c0b0
   18abc:	0002f973 	.word	0x0002f973
   18ac0:	0002f995 	.word	0x0002f995
   18ac4:	0002f9bf 	.word	0x0002f9bf

00018ac8 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   18ac8:	b538      	push	{r3, r4, r5, lr}
   18aca:	4604      	mov	r4, r0
   18acc:	2200      	movs	r2, #0
   18ace:	2101      	movs	r1, #1
   18ad0:	2004      	movs	r0, #4
   18ad2:	f7eb fcf3 	bl	44bc <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   18ad6:	68e3      	ldr	r3, [r4, #12]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   18ad8:	4a0e      	ldr	r2, [pc, #56]	; (18b14 <spi_1_init+0x4c>)
	dev_data->dev = dev;
   18ada:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   18adc:	6860      	ldr	r0, [r4, #4]
   18ade:	f100 0108 	add.w	r1, r0, #8
   18ae2:	f000 fdef 	bl	196c4 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   18ae6:	4b0c      	ldr	r3, [pc, #48]	; (18b18 <spi_1_init+0x50>)
   18ae8:	4298      	cmp	r0, r3
   18aea:	d011      	beq.n	18b10 <spi_1_init+0x48>
   18aec:	4b0b      	ldr	r3, [pc, #44]	; (18b1c <spi_1_init+0x54>)
   18aee:	4a0c      	ldr	r2, [pc, #48]	; (18b20 <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   18af0:	6821      	ldr	r1, [r4, #0]
   18af2:	480c      	ldr	r0, [pc, #48]	; (18b24 <spi_1_init+0x5c>)
   18af4:	1ad2      	subs	r2, r2, r3
   18af6:	08d2      	lsrs	r2, r2, #3
   18af8:	0192      	lsls	r2, r2, #6
   18afa:	f042 0201 	orr.w	r2, r2, #1
   18afe:	f00a fda4 	bl	2364a <log_1>
		return -EBUSY;
   18b02:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   18b06:	68e0      	ldr	r0, [r4, #12]
   18b08:	f00d faad 	bl	26066 <spi_context_unlock_unconditionally>
   18b0c:	4628      	mov	r0, r5
   18b0e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   18b10:	2500      	movs	r5, #0
   18b12:	e7f8      	b.n	18b06 <spi_1_init+0x3e>
   18b14:	00018e29 	.word	0x00018e29
   18b18:	0bad0000 	.word	0x0bad0000
   18b1c:	0002bfa8 	.word	0x0002bfa8
   18b20:	0002c0f8 	.word	0x0002c0f8
   18b24:	0002f941 	.word	0x0002f941

00018b28 <transfer_next_chunk>:
{
   18b28:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   18b2a:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   18b2c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   18b2e:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   18b30:	b085      	sub	sp, #20
   18b32:	b982      	cbnz	r2, 18b56 <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   18b34:	bb73      	cbnz	r3, 18b94 <transfer_next_chunk+0x6c>
	int error = 0;
   18b36:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   18b38:	2200      	movs	r2, #0
   18b3a:	4611      	mov	r1, r2
   18b3c:	4628      	mov	r0, r5
   18b3e:	f00d fa6d 	bl	2601c <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   18b42:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   18b44:	f105 0020 	add.w	r0, r5, #32
   18b48:	f007 fac8 	bl	200dc <z_impl_k_sem_give>
	dev_data->busy = false;
   18b4c:	2300      	movs	r3, #0
   18b4e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   18b52:	b005      	add	sp, #20
   18b54:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   18b56:	4611      	mov	r1, r2
   18b58:	b113      	cbz	r3, 18b60 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   18b5a:	429a      	cmp	r2, r3
   18b5c:	bf28      	it	cs
   18b5e:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   18b60:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   18b62:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   18b64:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   18b66:	b1bc      	cbz	r4, 18b98 <transfer_next_chunk+0x70>
   18b68:	2a00      	cmp	r2, #0
   18b6a:	bf18      	it	ne
   18b6c:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   18b6e:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   18b70:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   18b72:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   18b74:	b192      	cbz	r2, 18b9c <transfer_next_chunk+0x74>
   18b76:	2b00      	cmp	r3, #0
   18b78:	bf18      	it	ne
   18b7a:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   18b7c:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18b7e:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   18b80:	2200      	movs	r2, #0
   18b82:	4669      	mov	r1, sp
   18b84:	f000 fe42 	bl	1980c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   18b88:	4b05      	ldr	r3, [pc, #20]	; (18ba0 <transfer_next_chunk+0x78>)
   18b8a:	4298      	cmp	r0, r3
   18b8c:	d0e1      	beq.n	18b52 <transfer_next_chunk+0x2a>
		error = -EIO;
   18b8e:	f06f 0404 	mvn.w	r4, #4
   18b92:	e7d1      	b.n	18b38 <transfer_next_chunk+0x10>
   18b94:	4619      	mov	r1, r3
   18b96:	e7e3      	b.n	18b60 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   18b98:	4622      	mov	r2, r4
   18b9a:	e7e8      	b.n	18b6e <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18b9c:	4613      	mov	r3, r2
   18b9e:	e7ed      	b.n	18b7c <transfer_next_chunk+0x54>
   18ba0:	0bad0000 	.word	0x0bad0000

00018ba4 <spi_nrfx_transceive>:
{
   18ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ba8:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18baa:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   18bac:	68c4      	ldr	r4, [r0, #12]
   18bae:	045b      	lsls	r3, r3, #17
{
   18bb0:	4680      	mov	r8, r0
   18bb2:	460d      	mov	r5, r1
   18bb4:	4617      	mov	r7, r2
   18bb6:	d42d      	bmi.n	18c14 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   18bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18bc0:	f104 0008 	add.w	r0, r4, #8
   18bc4:	f007 fab0 	bl	20128 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   18bc8:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   18bca:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   18bce:	6813      	ldr	r3, [r2, #0]
   18bd0:	429d      	cmp	r5, r3
   18bd2:	f000 80b2 	beq.w	18d3a <spi_nrfx_transceive+0x196>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   18bd6:	88ab      	ldrh	r3, [r5, #4]
   18bd8:	07d8      	lsls	r0, r3, #31
   18bda:	d522      	bpl.n	18c22 <spi_nrfx_transceive+0x7e>
   18bdc:	4a83      	ldr	r2, [pc, #524]	; (18dec <spi_nrfx_transceive+0x248>)
   18bde:	4b84      	ldr	r3, [pc, #528]	; (18df0 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
   18be0:	f8d8 1000 	ldr.w	r1, [r8]
   18be4:	4883      	ldr	r0, [pc, #524]	; (18df4 <spi_nrfx_transceive+0x250>)
   18be6:	1ad2      	subs	r2, r2, r3
   18be8:	08d2      	lsrs	r2, r2, #3
   18bea:	0192      	lsls	r2, r2, #6
   18bec:	f042 0201 	orr.w	r2, r2, #1
   18bf0:	f00a fd2b 	bl	2364a <log_1>
		return -EINVAL;
   18bf4:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   18bf8:	6823      	ldr	r3, [r4, #0]
   18bfa:	889b      	ldrh	r3, [r3, #4]
   18bfc:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   18c00:	d104      	bne.n	18c0c <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   18c02:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   18c04:	f104 0008 	add.w	r0, r4, #8
   18c08:	f007 fa68 	bl	200dc <z_impl_k_sem_give>
}
   18c0c:	4628      	mov	r0, r5
   18c0e:	b003      	add	sp, #12
   18c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18c14:	6923      	ldr	r3, [r4, #16]
   18c16:	2b00      	cmp	r3, #0
   18c18:	d1ce      	bne.n	18bb8 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   18c1a:	6863      	ldr	r3, [r4, #4]
   18c1c:	4299      	cmp	r1, r3
   18c1e:	d1cb      	bne.n	18bb8 <spi_nrfx_transceive+0x14>
   18c20:	e7d3      	b.n	18bca <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   18c22:	0719      	lsls	r1, r3, #28
   18c24:	d50a      	bpl.n	18c3c <spi_nrfx_transceive+0x98>
   18c26:	4971      	ldr	r1, [pc, #452]	; (18dec <spi_nrfx_transceive+0x248>)
   18c28:	4b71      	ldr	r3, [pc, #452]	; (18df0 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
   18c2a:	4873      	ldr	r0, [pc, #460]	; (18df8 <spi_nrfx_transceive+0x254>)
   18c2c:	1ac9      	subs	r1, r1, r3
   18c2e:	08c9      	lsrs	r1, r1, #3
   18c30:	0189      	lsls	r1, r1, #6
   18c32:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   18c36:	f00a fcfb 	bl	23630 <log_0>
   18c3a:	e7db      	b.n	18bf4 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   18c3c:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   18c40:	d008      	beq.n	18c54 <spi_nrfx_transceive+0xb0>
   18c42:	496a      	ldr	r1, [pc, #424]	; (18dec <spi_nrfx_transceive+0x248>)
   18c44:	4b6a      	ldr	r3, [pc, #424]	; (18df0 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
   18c46:	486d      	ldr	r0, [pc, #436]	; (18dfc <spi_nrfx_transceive+0x258>)
   18c48:	1ac9      	subs	r1, r1, r3
   18c4a:	08c9      	lsrs	r1, r1, #3
   18c4c:	0189      	lsls	r1, r1, #6
   18c4e:	f041 0101 	orr.w	r1, r1, #1
   18c52:	e7f0      	b.n	18c36 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   18c54:	f3c3 1345 	ubfx	r3, r3, #5, #6
   18c58:	2b08      	cmp	r3, #8
   18c5a:	d008      	beq.n	18c6e <spi_nrfx_transceive+0xca>
   18c5c:	4963      	ldr	r1, [pc, #396]	; (18dec <spi_nrfx_transceive+0x248>)
   18c5e:	4b64      	ldr	r3, [pc, #400]	; (18df0 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
   18c60:	4867      	ldr	r0, [pc, #412]	; (18e00 <spi_nrfx_transceive+0x25c>)
   18c62:	1ac9      	subs	r1, r1, r3
   18c64:	08c9      	lsrs	r1, r1, #3
   18c66:	0189      	lsls	r1, r1, #6
   18c68:	f041 0101 	orr.w	r1, r1, #1
   18c6c:	e7e3      	b.n	18c36 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   18c6e:	6829      	ldr	r1, [r5, #0]
   18c70:	4b64      	ldr	r3, [pc, #400]	; (18e04 <spi_nrfx_transceive+0x260>)
   18c72:	4299      	cmp	r1, r3
   18c74:	d808      	bhi.n	18c88 <spi_nrfx_transceive+0xe4>
   18c76:	495d      	ldr	r1, [pc, #372]	; (18dec <spi_nrfx_transceive+0x248>)
   18c78:	4b5d      	ldr	r3, [pc, #372]	; (18df0 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   18c7a:	4863      	ldr	r0, [pc, #396]	; (18e08 <spi_nrfx_transceive+0x264>)
   18c7c:	1ac9      	subs	r1, r1, r3
   18c7e:	08c9      	lsrs	r1, r1, #3
   18c80:	0189      	lsls	r1, r1, #6
   18c82:	f041 0101 	orr.w	r1, r1, #1
   18c86:	e7d6      	b.n	18c36 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   18c88:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   18c8a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   18c8e:	6015      	str	r5, [r2, #0]
   18c90:	2b00      	cmp	r3, #0
   18c92:	d07c      	beq.n	18d8e <spi_nrfx_transceive+0x1ea>
   18c94:	6818      	ldr	r0, [r3, #0]
   18c96:	2800      	cmp	r0, #0
   18c98:	d079      	beq.n	18d8e <spi_nrfx_transceive+0x1ea>
				   ctx->config->cs->gpio_dt_flags |
   18c9a:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   18c9e:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   18ca0:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   18ca4:	f01a 0f01 	tst.w	sl, #1
   18ca8:	bf0c      	ite	eq
   18caa:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   18cae:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   18cb2:	6883      	ldr	r3, [r0, #8]
   18cb4:	9101      	str	r1, [sp, #4]
   18cb6:	681b      	ldr	r3, [r3, #0]
   18cb8:	4652      	mov	r2, sl
   18cba:	4798      	blx	r3
	if (ret != 0) {
   18cbc:	b968      	cbnz	r0, 18cda <spi_nrfx_transceive+0x136>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   18cbe:	9901      	ldr	r1, [sp, #4]
   18cc0:	f8db 2000 	ldr.w	r2, [fp]
   18cc4:	2301      	movs	r3, #1
   18cc6:	fa03 f101 	lsl.w	r1, r3, r1
   18cca:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18cce:	bf14      	ite	ne
   18cd0:	4311      	orrne	r1, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18cd2:	ea22 0101 	biceq.w	r1, r2, r1
   18cd6:	f8cb 1000 	str.w	r1, [fp]
	nrf_spi_configure(spi->p_reg,
   18cda:	88a9      	ldrh	r1, [r5, #4]
   18cdc:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   18ce0:	0788      	lsls	r0, r1, #30
   18ce2:	f001 0304 	and.w	r3, r1, #4
   18ce6:	d55d      	bpl.n	18da4 <spi_nrfx_transceive+0x200>
			return NRF_SPI_MODE_2;
   18ce8:	2b00      	cmp	r3, #0
   18cea:	bf14      	ite	ne
   18cec:	2303      	movne	r3, #3
   18cee:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   18cf0:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   18cf2:	f3c1 1100 	ubfx	r1, r1, #4, #1
   18cf6:	d059      	beq.n	18dac <spi_nrfx_transceive+0x208>
   18cf8:	2b03      	cmp	r3, #3
   18cfa:	d05a      	beq.n	18db2 <spi_nrfx_transceive+0x20e>
   18cfc:	2b01      	cmp	r3, #1
   18cfe:	d101      	bne.n	18d04 <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   18d00:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   18d04:	4b41      	ldr	r3, [pc, #260]	; (18e0c <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   18d06:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   18d0a:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   18d0c:	4299      	cmp	r1, r3
   18d0e:	d953      	bls.n	18db8 <spi_nrfx_transceive+0x214>
	} else if (frequency < 500000) {
   18d10:	4b3f      	ldr	r3, [pc, #252]	; (18e10 <spi_nrfx_transceive+0x26c>)
   18d12:	4299      	cmp	r1, r3
   18d14:	d953      	bls.n	18dbe <spi_nrfx_transceive+0x21a>
	} else if (frequency < 1000000) {
   18d16:	4b3f      	ldr	r3, [pc, #252]	; (18e14 <spi_nrfx_transceive+0x270>)
   18d18:	4299      	cmp	r1, r3
   18d1a:	d953      	bls.n	18dc4 <spi_nrfx_transceive+0x220>
	} else if (frequency < 2000000) {
   18d1c:	4b3e      	ldr	r3, [pc, #248]	; (18e18 <spi_nrfx_transceive+0x274>)
   18d1e:	4299      	cmp	r1, r3
   18d20:	d953      	bls.n	18dca <spi_nrfx_transceive+0x226>
	} else if (frequency < 4000000) {
   18d22:	4b3e      	ldr	r3, [pc, #248]	; (18e1c <spi_nrfx_transceive+0x278>)
   18d24:	4299      	cmp	r1, r3
   18d26:	d953      	bls.n	18dd0 <spi_nrfx_transceive+0x22c>
		return NRF_SPI_FREQ_8M;
   18d28:	4b3d      	ldr	r3, [pc, #244]	; (18e20 <spi_nrfx_transceive+0x27c>)
   18d2a:	4299      	cmp	r1, r3
   18d2c:	bf34      	ite	cc
   18d2e:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   18d32:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   18d36:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   18d3a:	2301      	movs	r3, #1
   18d3c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   18d40:	2f00      	cmp	r7, #0
   18d42:	d048      	beq.n	18dd6 <spi_nrfx_transceive+0x232>
		ctx->current_tx = tx_bufs->buffers;
   18d44:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   18d46:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   18d48:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   18d4a:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18d4c:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   18d4e:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18d50:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   18d52:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   18d54:	2e00      	cmp	r6, #0
   18d56:	d043      	beq.n	18de0 <spi_nrfx_transceive+0x23c>
		ctx->current_rx = rx_bufs->buffers;
   18d58:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   18d5a:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   18d5c:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   18d5e:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18d60:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   18d62:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18d64:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   18d66:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   18d68:	2200      	movs	r2, #0
   18d6a:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   18d6c:	2101      	movs	r1, #1
   18d6e:	4620      	mov	r0, r4
   18d70:	f00d f954 	bl	2601c <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   18d74:	4640      	mov	r0, r8
   18d76:	f7ff fed7 	bl	18b28 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   18d7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d82:	f104 0020 	add.w	r0, r4, #32
   18d86:	f007 f9cf 	bl	20128 <z_impl_k_sem_take>
	status = ctx->sync_status;
   18d8a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   18d8c:	e734      	b.n	18bf8 <spi_nrfx_transceive+0x54>
   18d8e:	4b18      	ldr	r3, [pc, #96]	; (18df0 <spi_nrfx_transceive+0x24c>)
   18d90:	4916      	ldr	r1, [pc, #88]	; (18dec <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
   18d92:	4824      	ldr	r0, [pc, #144]	; (18e24 <spi_nrfx_transceive+0x280>)
   18d94:	1ac9      	subs	r1, r1, r3
   18d96:	08c9      	lsrs	r1, r1, #3
   18d98:	0189      	lsls	r1, r1, #6
   18d9a:	f041 0103 	orr.w	r1, r1, #3
   18d9e:	f00a fc47 	bl	23630 <log_0>
   18da2:	e79a      	b.n	18cda <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
   18da4:	3b00      	subs	r3, #0
   18da6:	bf18      	it	ne
   18da8:	2301      	movne	r3, #1
   18daa:	e7a1      	b.n	18cf0 <spi_nrfx_transceive+0x14c>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   18dac:	f041 0104 	orr.w	r1, r1, #4
        break;
   18db0:	e7a8      	b.n	18d04 <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   18db2:	f041 0106 	orr.w	r1, r1, #6
        break;
   18db6:	e7a5      	b.n	18d04 <spi_nrfx_transceive+0x160>
		return NRF_SPI_FREQ_125K;
   18db8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   18dbc:	e7bb      	b.n	18d36 <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_250K;
   18dbe:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   18dc2:	e7b8      	b.n	18d36 <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_500K;
   18dc4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   18dc8:	e7b5      	b.n	18d36 <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_1M;
   18dca:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   18dce:	e7b2      	b.n	18d36 <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_2M;
   18dd0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   18dd4:	e7af      	b.n	18d36 <spi_nrfx_transceive+0x192>
		ctx->tx_count = 0;
   18dd6:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   18dda:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   18dde:	e7b9      	b.n	18d54 <spi_nrfx_transceive+0x1b0>
		ctx->rx_count = 0;
   18de0:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   18de4:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   18de8:	e7be      	b.n	18d68 <spi_nrfx_transceive+0x1c4>
   18dea:	bf00      	nop
   18dec:	0002c0f8 	.word	0x0002c0f8
   18df0:	0002bfa8 	.word	0x0002bfa8
   18df4:	0002f9f4 	.word	0x0002f9f4
   18df8:	0002fa16 	.word	0x0002fa16
   18dfc:	0002fa35 	.word	0x0002fa35
   18e00:	0002fa58 	.word	0x0002fa58
   18e04:	0001e847 	.word	0x0001e847
   18e08:	0002fa87 	.word	0x0002fa87
   18e0c:	0003d08f 	.word	0x0003d08f
   18e10:	0007a11f 	.word	0x0007a11f
   18e14:	000f423f 	.word	0x000f423f
   18e18:	001e847f 	.word	0x001e847f
   18e1c:	003d08ff 	.word	0x003d08ff
   18e20:	007a1200 	.word	0x007a1200
   18e24:	0002fab8 	.word	0x0002fab8

00018e28 <event_handler>:
{
   18e28:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   18e2a:	7803      	ldrb	r3, [r0, #0]
{
   18e2c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   18e2e:	2b00      	cmp	r3, #0
   18e30:	d14e      	bne.n	18ed0 <event_handler+0xa8>
	if (!ctx->tx_len) {
   18e32:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   18e34:	b163      	cbz	r3, 18e50 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   18e36:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   18e38:	429a      	cmp	r2, r3
   18e3a:	d91d      	bls.n	18e78 <event_handler+0x50>
   18e3c:	4925      	ldr	r1, [pc, #148]	; (18ed4 <event_handler+0xac>)
   18e3e:	4b26      	ldr	r3, [pc, #152]	; (18ed8 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   18e40:	4826      	ldr	r0, [pc, #152]	; (18edc <event_handler+0xb4>)
   18e42:	1ac9      	subs	r1, r1, r3
   18e44:	08c9      	lsrs	r1, r1, #3
   18e46:	0189      	lsls	r1, r1, #6
   18e48:	f041 0101 	orr.w	r1, r1, #1
   18e4c:	f00a fbf0 	bl	23630 <log_0>
	if (!ctx->rx_len) {
   18e50:	6da3      	ldr	r3, [r4, #88]	; 0x58
   18e52:	b163      	cbz	r3, 18e6e <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   18e54:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   18e56:	429a      	cmp	r2, r3
   18e58:	d924      	bls.n	18ea4 <event_handler+0x7c>
   18e5a:	491e      	ldr	r1, [pc, #120]	; (18ed4 <event_handler+0xac>)
   18e5c:	4b1e      	ldr	r3, [pc, #120]	; (18ed8 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   18e5e:	481f      	ldr	r0, [pc, #124]	; (18edc <event_handler+0xb4>)
   18e60:	1ac9      	subs	r1, r1, r3
   18e62:	08c9      	lsrs	r1, r1, #3
   18e64:	0189      	lsls	r1, r1, #6
   18e66:	f041 0101 	orr.w	r1, r1, #1
   18e6a:	f00a fbe1 	bl	23630 <log_0>
		transfer_next_chunk(dev_data->dev);
   18e6e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   18e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   18e74:	f7ff be58 	b.w	18b28 <transfer_next_chunk>
	ctx->tx_len -= len;
   18e78:	1a9b      	subs	r3, r3, r2
   18e7a:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   18e7c:	b963      	cbnz	r3, 18e98 <event_handler+0x70>
		ctx->tx_count--;
   18e7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   18e80:	3b01      	subs	r3, #1
   18e82:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   18e84:	b163      	cbz	r3, 18ea0 <event_handler+0x78>
			ctx->current_tx++;
   18e86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   18e88:	f103 0208 	add.w	r2, r3, #8
   18e8c:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18e8e:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   18e90:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18e92:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   18e94:	650b      	str	r3, [r1, #80]	; 0x50
   18e96:	e7db      	b.n	18e50 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   18e98:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   18e9a:	2b00      	cmp	r3, #0
   18e9c:	d0d8      	beq.n	18e50 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   18e9e:	4413      	add	r3, r2
   18ea0:	64e3      	str	r3, [r4, #76]	; 0x4c
   18ea2:	e7d5      	b.n	18e50 <event_handler+0x28>
	ctx->rx_len -= len;
   18ea4:	1a9b      	subs	r3, r3, r2
   18ea6:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   18ea8:	b963      	cbnz	r3, 18ec4 <event_handler+0x9c>
		ctx->rx_count--;
   18eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18eac:	3b01      	subs	r3, #1
   18eae:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   18eb0:	b163      	cbz	r3, 18ecc <event_handler+0xa4>
			ctx->current_rx++;
   18eb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18eb4:	f103 0208 	add.w	r2, r3, #8
   18eb8:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18eba:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   18ebc:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18ebe:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   18ec0:	65a3      	str	r3, [r4, #88]	; 0x58
   18ec2:	e7d4      	b.n	18e6e <event_handler+0x46>
	} else if (ctx->rx_buf) {
   18ec4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18ec6:	2b00      	cmp	r3, #0
   18ec8:	d0d1      	beq.n	18e6e <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   18eca:	4413      	add	r3, r2
   18ecc:	6563      	str	r3, [r4, #84]	; 0x54
   18ece:	e7ce      	b.n	18e6e <event_handler+0x46>
}
   18ed0:	bd10      	pop	{r4, pc}
   18ed2:	bf00      	nop
   18ed4:	0002c0f8 	.word	0x0002c0f8
   18ed8:	0002bfa8 	.word	0x0002bfa8
   18edc:	0002fade 	.word	0x0002fade

00018ee0 <random_byte_get>:
	__asm__ volatile(
   18ee0:	f04f 0320 	mov.w	r3, #32
   18ee4:	f3ef 8211 	mrs	r2, BASEPRI
   18ee8:	f383 8811 	msr	BASEPRI, r3
   18eec:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18ef0:	4b08      	ldr	r3, [pc, #32]	; (18f14 <random_byte_get+0x34>)
   18ef2:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18ef4:	b159      	cbz	r1, 18f0e <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18ef6:	4908      	ldr	r1, [pc, #32]	; (18f18 <random_byte_get+0x38>)
   18ef8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18efc:	2100      	movs	r1, #0
   18efe:	6019      	str	r1, [r3, #0]
   18f00:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   18f02:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18f04:	f382 8811 	msr	BASEPRI, r2
   18f08:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18f0c:	4770      	bx	lr
	int retval = -EAGAIN;
   18f0e:	f06f 000a 	mvn.w	r0, #10
   18f12:	e7f7      	b.n	18f04 <random_byte_get+0x24>
   18f14:	4000d100 	.word	0x4000d100
   18f18:	4000d000 	.word	0x4000d000

00018f1c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   18f1e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18f20:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   18f22:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18f24:	f04f 0520 	mov.w	r5, #32
   18f28:	f3ef 8011 	mrs	r0, BASEPRI
   18f2c:	f385 8811 	msr	BASEPRI, r5
   18f30:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18f34:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18f36:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   18f3a:	1ba4      	subs	r4, r4, r6
   18f3c:	403c      	ands	r4, r7
	if (available < len) {
   18f3e:	42a2      	cmp	r2, r4
		len = available;
   18f40:	bf88      	it	hi
   18f42:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18f44:	eb06 0c02 	add.w	ip, r6, r2
   18f48:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   18f4c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18f4e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   18f52:	f380 8811 	msr	BASEPRI, r0
   18f56:	f3bf 8f6f 	isb	sy
   18f5a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   18f5c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   18f5e:	4282      	cmp	r2, r0
   18f60:	d119      	bne.n	18f96 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18f62:	4576      	cmp	r6, lr
   18f64:	d10d      	bne.n	18f82 <rng_pool_get+0x66>
	__asm__ volatile(
   18f66:	f04f 0520 	mov.w	r5, #32
   18f6a:	f3ef 8211 	mrs	r2, BASEPRI
   18f6e:	f385 8811 	msr	BASEPRI, r5
   18f72:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18f76:	781d      	ldrb	r5, [r3, #0]
   18f78:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18f7a:	f382 8811 	msr	BASEPRI, r2
   18f7e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18f82:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   18f84:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18f86:	b288      	uxth	r0, r1
	available = available - len;
   18f88:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   18f8a:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18f8c:	bf22      	ittt	cs
   18f8e:	4b06      	ldrcs	r3, [pc, #24]	; (18fa8 <rng_pool_get+0x8c>)
   18f90:	2201      	movcs	r2, #1
   18f92:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18f96:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   18f9a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18f9c:	f89c c005 	ldrb.w	ip, [ip, #5]
   18fa0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   18fa4:	403d      	ands	r5, r7
   18fa6:	e7da      	b.n	18f5e <rng_pool_get+0x42>
   18fa8:	4000d000 	.word	0x4000d000

00018fac <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18fac:	43db      	mvns	r3, r3
{
   18fae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18fb2:	f013 0501 	ands.w	r5, r3, #1
{
   18fb6:	460e      	mov	r6, r1
   18fb8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18fba:	d004      	beq.n	18fc6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18fbc:	4821      	ldr	r0, [pc, #132]	; (19044 <entropy_nrf5_get_entropy_isr+0x98>)
   18fbe:	f7ff ffad 	bl	18f1c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   18fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   18fc6:	2a00      	cmp	r2, #0
   18fc8:	d033      	beq.n	19032 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   18fca:	f04f 0320 	mov.w	r3, #32
   18fce:	f3ef 8811 	mrs	r8, BASEPRI
   18fd2:	f383 8811 	msr	BASEPRI, r3
   18fd6:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   18fda:	200d      	movs	r0, #13
   18fdc:	f7eb fa60 	bl	44a0 <arch_irq_is_enabled>
   18fe0:	4607      	mov	r7, r0
		irq_disable(IRQN);
   18fe2:	200d      	movs	r0, #13
   18fe4:	f7eb fa48 	bl	4478 <arch_irq_disable>
	__asm__ volatile(
   18fe8:	f388 8811 	msr	BASEPRI, r8
   18fec:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18ff0:	4a15      	ldr	r2, [pc, #84]	; (19048 <entropy_nrf5_get_entropy_isr+0x9c>)
   18ff2:	6015      	str	r5, [r2, #0]
   18ff4:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18ff6:	4b15      	ldr	r3, [pc, #84]	; (1904c <entropy_nrf5_get_entropy_isr+0xa0>)
   18ff8:	2101      	movs	r1, #1
   18ffa:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18ffc:	4914      	ldr	r1, [pc, #80]	; (19050 <entropy_nrf5_get_entropy_isr+0xa4>)
   18ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   19002:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   19006:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   19008:	4691      	mov	r9, r2
   1900a:	468a      	mov	sl, r1
   1900c:	4698      	mov	r8, r3
   1900e:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   19012:	b183      	cbz	r3, 19036 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   19014:	f7ff ff64 	bl	18ee0 <random_byte_get>
			if (byte < 0) {
   19018:	1e03      	subs	r3, r0, #0
   1901a:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1901e:	dbf6      	blt.n	1900e <entropy_nrf5_get_entropy_isr+0x62>
   19020:	3d01      	subs	r5, #1
   19022:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   19024:	5573      	strb	r3, [r6, r5]
		} while (len);
   19026:	2d00      	cmp	r5, #0
   19028:	d1f1      	bne.n	1900e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1902a:	b117      	cbz	r7, 19032 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1902c:	200d      	movs	r0, #13
   1902e:	f7eb fa13 	bl	4458 <arch_irq_enable>
	return cnt;
   19032:	4620      	mov	r0, r4
   19034:	e7c5      	b.n	18fc2 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   19036:	f3bf 8f4f 	dsb	sy
				__WFE();
   1903a:	bf20      	wfe
				__SEV();
   1903c:	bf40      	sev
				__WFE();
   1903e:	bf20      	wfe
   19040:	e7e5      	b.n	1900e <entropy_nrf5_get_entropy_isr+0x62>
   19042:	bf00      	nop
   19044:	20003dd4 	.word	0x20003dd4
   19048:	4000d100 	.word	0x4000d100
   1904c:	4000d000 	.word	0x4000d000
   19050:	e000e100 	.word	0xe000e100

00019054 <entropy_nrf5_get_entropy>:
{
   19054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19058:	4f13      	ldr	r7, [pc, #76]	; (190a8 <entropy_nrf5_get_entropy+0x54>)
   1905a:	460d      	mov	r5, r1
   1905c:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1905e:	f107 0845 	add.w	r8, r7, #69	; 0x45
   19062:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   19066:	b914      	cbnz	r4, 1906e <entropy_nrf5_get_entropy+0x1a>
}
   19068:	4620      	mov	r0, r4
   1906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1906e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19072:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19076:	4638      	mov	r0, r7
   19078:	f007 f856 	bl	20128 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1907c:	4622      	mov	r2, r4
   1907e:	4629      	mov	r1, r5
   19080:	4640      	mov	r0, r8
   19082:	f7ff ff4b 	bl	18f1c <rng_pool_get>
   19086:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   19088:	4638      	mov	r0, r7
   1908a:	f007 f827 	bl	200dc <z_impl_k_sem_give>
		if (bytes == 0U) {
   1908e:	b93e      	cbnz	r6, 190a0 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   19090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19098:	4648      	mov	r0, r9
   1909a:	f007 f845 	bl	20128 <z_impl_k_sem_take>
			continue;
   1909e:	e7e2      	b.n	19066 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   190a0:	1ba4      	subs	r4, r4, r6
   190a2:	b2a4      	uxth	r4, r4
		buf += bytes;
   190a4:	4435      	add	r5, r6
   190a6:	e7de      	b.n	19066 <entropy_nrf5_get_entropy+0x12>
   190a8:	20003da4 	.word	0x20003da4

000190ac <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   190ac:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   190ae:	4c19      	ldr	r4, [pc, #100]	; (19114 <entropy_nrf5_init+0x68>)
   190b0:	2201      	movs	r2, #1
   190b2:	4611      	mov	r1, r2
   190b4:	4620      	mov	r0, r4
   190b6:	f012 f8bb 	bl	2b230 <z_impl_k_sem_init>
   190ba:	2201      	movs	r2, #1
   190bc:	2100      	movs	r1, #0
   190be:	f104 0018 	add.w	r0, r4, #24
   190c2:	f012 f8b5 	bl	2b230 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   190c6:	f240 4307 	movw	r3, #1031	; 0x407
   190ca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   190ce:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   190d2:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   190d4:	230c      	movs	r3, #12
   190d6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   190da:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   190dc:	4b0e      	ldr	r3, [pc, #56]	; (19118 <entropy_nrf5_init+0x6c>)
   190de:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   190e2:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   190e6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   190ea:	f042 0201 	orr.w	r2, r2, #1
   190ee:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   190f2:	4a0a      	ldr	r2, [pc, #40]	; (1911c <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   190f4:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   190f6:	6015      	str	r5, [r2, #0]
   190f8:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   190fa:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   190fe:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   19100:	6019      	str	r1, [r3, #0]
   19102:	200d      	movs	r0, #13
   19104:	f7eb f9da 	bl	44bc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   19108:	200d      	movs	r0, #13
   1910a:	f7eb f9a5 	bl	4458 <arch_irq_enable>

	return 0;
}
   1910e:	4628      	mov	r0, r5
   19110:	bd38      	pop	{r3, r4, r5, pc}
   19112:	bf00      	nop
   19114:	20003da4 	.word	0x20003da4
   19118:	4000d000 	.word	0x4000d000
   1911c:	4000d100 	.word	0x4000d100

00019120 <isr>:
{
   19120:	b510      	push	{r4, lr}
	byte = random_byte_get();
   19122:	f7ff fedd 	bl	18ee0 <random_byte_get>
	if (byte < 0) {
   19126:	2800      	cmp	r0, #0
   19128:	db20      	blt.n	1916c <isr+0x4c>
	uint8_t last  = rngp->last;
   1912a:	4b17      	ldr	r3, [pc, #92]	; (19188 <isr+0x68>)
   1912c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   19130:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   19134:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   19138:	1a51      	subs	r1, r2, r1
   1913a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1913e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   19140:	d10d      	bne.n	1915e <isr+0x3e>
	uint8_t last  = rngp->last;
   19142:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   19146:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1914a:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1914e:	1a51      	subs	r1, r2, r1
   19150:	ea34 0101 	bics.w	r1, r4, r1
   19154:	d10b      	bne.n	1916e <isr+0x4e>
   19156:	4b0d      	ldr	r3, [pc, #52]	; (1918c <isr+0x6c>)
   19158:	2201      	movs	r2, #1
   1915a:	601a      	str	r2, [r3, #0]
}
   1915c:	e00e      	b.n	1917c <isr+0x5c>
	rngp->buffer[last] = byte;
   1915e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19160:	3201      	adds	r2, #1
   19162:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   19164:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   19168:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1916c:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1916e:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19170:	3201      	adds	r2, #1
   19172:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   19174:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   19178:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1917c:	4804      	ldr	r0, [pc, #16]	; (19190 <isr+0x70>)
}
   1917e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19182:	f006 bfab 	b.w	200dc <z_impl_k_sem_give>
   19186:	bf00      	nop
   19188:	20003da4 	.word	0x20003da4
   1918c:	4000d004 	.word	0x4000d004
   19190:	20003dbc 	.word	0x20003dbc

00019194 <__NVIC_SystemReset>:
   19194:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19198:	4905      	ldr	r1, [pc, #20]	; (191b0 <__NVIC_SystemReset+0x1c>)
   1919a:	4b06      	ldr	r3, [pc, #24]	; (191b4 <__NVIC_SystemReset+0x20>)
   1919c:	68ca      	ldr	r2, [r1, #12]
   1919e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   191a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   191a4:	60cb      	str	r3, [r1, #12]
   191a6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   191aa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   191ac:	e7fd      	b.n	191aa <__NVIC_SystemReset+0x16>
   191ae:	bf00      	nop
   191b0:	e000ed00 	.word	0xe000ed00
   191b4:	05fa0004 	.word	0x05fa0004

000191b8 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   191b8:	4b04      	ldr	r3, [pc, #16]	; (191cc <nrf52_errata_108+0x14>)
   191ba:	6818      	ldr	r0, [r3, #0]
   191bc:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   191be:	bf04      	itt	eq
   191c0:	4b03      	ldreq	r3, [pc, #12]	; (191d0 <nrf52_errata_108+0x18>)
   191c2:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   191c4:	1f83      	subs	r3, r0, #6
   191c6:	4258      	negs	r0, r3
   191c8:	4158      	adcs	r0, r3
   191ca:	4770      	bx	lr
   191cc:	10000130 	.word	0x10000130
   191d0:	f0000fe0 	.word	0xf0000fe0

000191d4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   191d4:	4b07      	ldr	r3, [pc, #28]	; (191f4 <nrf52_errata_16+0x20>)
   191d6:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   191d8:	2b06      	cmp	r3, #6
   191da:	d109      	bne.n	191f0 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   191dc:	4b06      	ldr	r3, [pc, #24]	; (191f8 <nrf52_errata_16+0x24>)
   191de:	681b      	ldr	r3, [r3, #0]
   191e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
   191e4:	3b03      	subs	r3, #3
   191e6:	2b03      	cmp	r3, #3
   191e8:	d802      	bhi.n	191f0 <nrf52_errata_16+0x1c>
   191ea:	4a04      	ldr	r2, [pc, #16]	; (191fc <nrf52_errata_16+0x28>)
   191ec:	5cd0      	ldrb	r0, [r2, r3]
   191ee:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   191f0:	2000      	movs	r0, #0
    #endif
}
   191f2:	4770      	bx	lr
   191f4:	f0000fe0 	.word	0xf0000fe0
   191f8:	f0000fe8 	.word	0xf0000fe8
   191fc:	0002fb15 	.word	0x0002fb15

00019200 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19200:	4a02      	ldr	r2, [pc, #8]	; (1920c <nvmc_wait+0xc>)
   19202:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19206:	2b00      	cmp	r3, #0
   19208:	d0fb      	beq.n	19202 <nvmc_wait+0x2>
}
   1920a:	4770      	bx	lr
   1920c:	4001e000 	.word	0x4001e000

00019210 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19210:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   19212:	f7ff ffd1 	bl	191b8 <nrf52_errata_108>
   19216:	b128      	cbz	r0, 19224 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   19218:	4b7d      	ldr	r3, [pc, #500]	; (19410 <SystemInit+0x200>)
   1921a:	4a7e      	ldr	r2, [pc, #504]	; (19414 <SystemInit+0x204>)
   1921c:	681b      	ldr	r3, [r3, #0]
   1921e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   19222:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   19224:	f7ff ffd6 	bl	191d4 <nrf52_errata_16>
   19228:	b110      	cbz	r0, 19230 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1922a:	4b7b      	ldr	r3, [pc, #492]	; (19418 <SystemInit+0x208>)
   1922c:	4a7b      	ldr	r2, [pc, #492]	; (1941c <SystemInit+0x20c>)
   1922e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   19230:	f7ff ffc2 	bl	191b8 <nrf52_errata_108>
   19234:	b128      	cbz	r0, 19242 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   19236:	4b7a      	ldr	r3, [pc, #488]	; (19420 <SystemInit+0x210>)
   19238:	4a7a      	ldr	r2, [pc, #488]	; (19424 <SystemInit+0x214>)
   1923a:	681b      	ldr	r3, [r3, #0]
   1923c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   19240:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   19242:	f7ff ffc7 	bl	191d4 <nrf52_errata_16>
   19246:	b120      	cbz	r0, 19252 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   19248:	4a77      	ldr	r2, [pc, #476]	; (19428 <SystemInit+0x218>)
   1924a:	68d3      	ldr	r3, [r2, #12]
   1924c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   19250:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19252:	f7ff ffb1 	bl	191b8 <nrf52_errata_108>
   19256:	b140      	cbz	r0, 1926a <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19258:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1925c:	2200      	movs	r2, #0
   1925e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19262:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19266:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   1926a:	f7ff ffb3 	bl	191d4 <nrf52_errata_16>
   1926e:	b110      	cbz	r0, 19276 <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   19270:	4b6e      	ldr	r3, [pc, #440]	; (1942c <SystemInit+0x21c>)
   19272:	2203      	movs	r2, #3
   19274:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   19276:	f7ff ffad 	bl	191d4 <nrf52_errata_16>
   1927a:	b140      	cbz	r0, 1928e <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   1927c:	4b6c      	ldr	r3, [pc, #432]	; (19430 <SystemInit+0x220>)
   1927e:	2205      	movs	r2, #5
   19280:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   19282:	2201      	movs	r2, #1
   19284:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   19286:	2200      	movs	r2, #0
   19288:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1928a:	223f      	movs	r2, #63	; 0x3f
   1928c:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1928e:	4b69      	ldr	r3, [pc, #420]	; (19434 <SystemInit+0x224>)
   19290:	681a      	ldr	r2, [r3, #0]
   19292:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19294:	bf0b      	itete	eq
   19296:	4b68      	ldreq	r3, [pc, #416]	; (19438 <SystemInit+0x228>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   19298:	4b68      	ldrne	r3, [pc, #416]	; (1943c <SystemInit+0x22c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1929a:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1929c:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1929e:	bf02      	ittt	eq
   192a0:	3308      	addeq	r3, #8
   192a2:	681b      	ldreq	r3, [r3, #0]
   192a4:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   192a8:	2a06      	cmp	r2, #6
   192aa:	d14d      	bne.n	19348 <SystemInit+0x138>
            {
                switch(var2)
   192ac:	3b03      	subs	r3, #3
   192ae:	2b03      	cmp	r3, #3
   192b0:	d803      	bhi.n	192ba <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   192b2:	4a63      	ldr	r2, [pc, #396]	; (19440 <SystemInit+0x230>)
   192b4:	5cd3      	ldrb	r3, [r2, r3]
   192b6:	2b00      	cmp	r3, #0
   192b8:	d046      	beq.n	19348 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   192ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   192be:	4b61      	ldr	r3, [pc, #388]	; (19444 <SystemInit+0x234>)
   192c0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   192c4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   192c8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   192cc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   192d0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   192d4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   192d8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   192dc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   192e0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   192e4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   192e8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   192ec:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   192f0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   192f4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   192f8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   192fc:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19300:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19304:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19308:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1930c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19310:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19314:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19318:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1931c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19320:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19324:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19328:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1932c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19330:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19334:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19338:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1933c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19340:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19344:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   19348:	f7ff ff36 	bl	191b8 <nrf52_errata_108>
   1934c:	b128      	cbz	r0, 1935a <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1934e:	4b3e      	ldr	r3, [pc, #248]	; (19448 <SystemInit+0x238>)
   19350:	4a3e      	ldr	r2, [pc, #248]	; (1944c <SystemInit+0x23c>)
   19352:	681b      	ldr	r3, [r3, #0]
   19354:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   19358:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1935a:	f7ff ff2d 	bl	191b8 <nrf52_errata_108>
   1935e:	b148      	cbz	r0, 19374 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19364:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19368:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1936a:	bf44      	itt	mi
   1936c:	f06f 0201 	mvnmi.w	r2, #1
   19370:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19374:	4b2f      	ldr	r3, [pc, #188]	; (19434 <SystemInit+0x224>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19376:	681b      	ldr	r3, [r3, #0]
   19378:	2b06      	cmp	r3, #6
   1937a:	d10c      	bne.n	19396 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1937c:	4b2f      	ldr	r3, [pc, #188]	; (1943c <SystemInit+0x22c>)
   1937e:	681b      	ldr	r3, [r3, #0]
   19380:	3b03      	subs	r3, #3
   19382:	2b03      	cmp	r3, #3
   19384:	d802      	bhi.n	1938c <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   19386:	4a32      	ldr	r2, [pc, #200]	; (19450 <SystemInit+0x240>)
   19388:	5cd3      	ldrb	r3, [r2, r3]
   1938a:	b123      	cbz	r3, 19396 <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1938c:	4a31      	ldr	r2, [pc, #196]	; (19454 <SystemInit+0x244>)
   1938e:	6813      	ldr	r3, [r2, #0]
   19390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   19394:	6013      	str	r3, [r2, #0]

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   19396:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   1939a:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1939e:	07db      	lsls	r3, r3, #31
   193a0:	d514      	bpl.n	193cc <SystemInit+0x1bc>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   193a2:	482d      	ldr	r0, [pc, #180]	; (19458 <SystemInit+0x248>)
   193a4:	2301      	movs	r3, #1
   193a6:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   193aa:	f7ff ff29 	bl	19200 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   193ae:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   193b2:	f023 0301 	bic.w	r3, r3, #1
   193b6:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   193ba:	f7ff ff21 	bl	19200 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   193be:	2300      	movs	r3, #0
   193c0:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   193c4:	f7ff ff1c 	bl	19200 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   193c8:	f7ff fee4 	bl	19194 <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   193cc:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   193d0:	2b00      	cmp	r3, #0
   193d2:	db03      	blt.n	193dc <SystemInit+0x1cc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   193d4:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   193d8:	2b00      	cmp	r3, #0
   193da:	da14      	bge.n	19406 <SystemInit+0x1f6>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   193dc:	491e      	ldr	r1, [pc, #120]	; (19458 <SystemInit+0x248>)
   193de:	2301      	movs	r3, #1
   193e0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   193e4:	f7ff ff0c 	bl	19200 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   193e8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   193ec:	2415      	movs	r4, #21
   193ee:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   193f2:	f7ff ff05 	bl	19200 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   193f6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   193fa:	f7ff ff01 	bl	19200 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   193fe:	2300      	movs	r3, #0
   19400:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   19404:	e7de      	b.n	193c4 <SystemInit+0x1b4>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19406:	4b15      	ldr	r3, [pc, #84]	; (1945c <SystemInit+0x24c>)
   19408:	4a15      	ldr	r2, [pc, #84]	; (19460 <SystemInit+0x250>)
   1940a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1940c:	bd10      	pop	{r4, pc}
   1940e:	bf00      	nop
   19410:	10000324 	.word	0x10000324
   19414:	40013540 	.word	0x40013540
   19418:	4007c074 	.word	0x4007c074
   1941c:	baadf00d 	.word	0xbaadf00d
   19420:	10000244 	.word	0x10000244
   19424:	4000053c 	.word	0x4000053c
   19428:	e000edf0 	.word	0xe000edf0
   1942c:	400005a0 	.word	0x400005a0
   19430:	40005610 	.word	0x40005610
   19434:	10000130 	.word	0x10000130
   19438:	f0000fe0 	.word	0xf0000fe0
   1943c:	10000134 	.word	0x10000134
   19440:	0002fb0d 	.word	0x0002fb0d
   19444:	4000c000 	.word	0x4000c000
   19448:	10000258 	.word	0x10000258
   1944c:	40000ee4 	.word	0x40000ee4
   19450:	0002fb11 	.word	0x0002fb11
   19454:	4000173c 	.word	0x4000173c
   19458:	4001e000 	.word	0x4001e000
   1945c:	200007d4 	.word	0x200007d4
   19460:	03d09000 	.word	0x03d09000

00019464 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19464:	4b04      	ldr	r3, [pc, #16]	; (19478 <nrfx_clock_init+0x14>)
   19466:	791a      	ldrb	r2, [r3, #4]
   19468:	b922      	cbnz	r2, 19474 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1946a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1946c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1946e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19470:	4802      	ldr	r0, [pc, #8]	; (1947c <nrfx_clock_init+0x18>)
   19472:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19474:	4802      	ldr	r0, [pc, #8]	; (19480 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19476:	4770      	bx	lr
   19478:	20003df8 	.word	0x20003df8
   1947c:	0bad0000 	.word	0x0bad0000
   19480:	0bad000c 	.word	0x0bad000c

00019484 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   19484:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   19486:	b110      	cbz	r0, 1948e <nrfx_clock_start+0xa>
   19488:	2801      	cmp	r0, #1
   1948a:	d033      	beq.n	194f4 <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   1948c:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1948e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19492:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19496:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1949a:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   1949e:	4619      	mov	r1, r3
   194a0:	d024      	beq.n	194ec <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   194a2:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   194a6:	2a01      	cmp	r2, #1
   194a8:	d120      	bne.n	194ec <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
   194aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194ae:	4b16      	ldr	r3, [pc, #88]	; (19508 <nrfx_clock_start+0x84>)
   194b0:	2200      	movs	r2, #0
   194b2:	601a      	str	r2, [r3, #0]
   194b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   194b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   194ba:	2202      	movs	r2, #2
   194bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   194c0:	4a12      	ldr	r2, [pc, #72]	; (1950c <nrfx_clock_start+0x88>)
   194c2:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   194c4:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   194c8:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
   194ca:	4b11      	ldr	r3, [pc, #68]	; (19510 <nrfx_clock_start+0x8c>)
   194cc:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   194ce:	f044 0101 	orr.w	r1, r4, #1
   194d2:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   194d4:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   194d6:	6859      	ldr	r1, [r3, #4]
   194d8:	1b49      	subs	r1, r1, r5
   194da:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   194de:	d3fa      	bcc.n	194d6 <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
   194e0:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194e2:	4b0c      	ldr	r3, [pc, #48]	; (19514 <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
   194e4:	60d0      	str	r0, [r2, #12]
   194e6:	2201      	movs	r2, #1
   194e8:	601a      	str	r2, [r3, #0]
}
   194ea:	e7cf      	b.n	1948c <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   194ec:	2300      	movs	r3, #0
   194ee:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   194f2:	e7dc      	b.n	194ae <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194f4:	4b08      	ldr	r3, [pc, #32]	; (19518 <nrfx_clock_start+0x94>)
   194f6:	2200      	movs	r2, #0
   194f8:	601a      	str	r2, [r3, #0]
   194fa:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   194fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19500:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19504:	6018      	str	r0, [r3, #0]
}
   19506:	e7c1      	b.n	1948c <nrfx_clock_start+0x8>
   19508:	40000104 	.word	0x40000104
   1950c:	e000edf0 	.word	0xe000edf0
   19510:	e0001000 	.word	0xe0001000
   19514:	40000008 	.word	0x40000008
   19518:	40000100 	.word	0x40000100

0001951c <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1951c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1951e:	b110      	cbz	r0, 19526 <nrfx_clock_stop+0xa>
   19520:	2801      	cmp	r0, #1
   19522:	d018      	beq.n	19556 <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   19524:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   19526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1952a:	2202      	movs	r2, #2
   1952c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19530:	4a18      	ldr	r2, [pc, #96]	; (19594 <nrfx_clock_stop+0x78>)
   19532:	6010      	str	r0, [r2, #0]
   19534:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19536:	4a18      	ldr	r2, [pc, #96]	; (19598 <nrfx_clock_stop+0x7c>)
   19538:	2101      	movs	r1, #1
   1953a:	6011      	str	r1, [r2, #0]
   1953c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19540:	461c      	mov	r4, r3
   19542:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   19546:	03db      	lsls	r3, r3, #15
   19548:	d5ec      	bpl.n	19524 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1954a:	2001      	movs	r0, #1
   1954c:	f00c fdae 	bl	260ac <nrfx_busy_wait>
   19550:	3d01      	subs	r5, #1
   19552:	d1f6      	bne.n	19542 <nrfx_clock_stop+0x26>
   19554:	e7e6      	b.n	19524 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19556:	4b11      	ldr	r3, [pc, #68]	; (1959c <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   19558:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1955c:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   1955e:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19562:	601a      	str	r2, [r3, #0]
   19564:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19566:	4b0e      	ldr	r3, [pc, #56]	; (195a0 <nrfx_clock_stop+0x84>)
   19568:	f242 7510 	movw	r5, #10000	; 0x2710
   1956c:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1956e:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19572:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   19576:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19578:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1957c:	d505      	bpl.n	1958a <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1957e:	b123      	cbz	r3, 1958a <nrfx_clock_stop+0x6e>
   19580:	2001      	movs	r0, #1
   19582:	f00c fd93 	bl	260ac <nrfx_busy_wait>
   19586:	3d01      	subs	r5, #1
   19588:	d1f1      	bne.n	1956e <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   1958a:	4b06      	ldr	r3, [pc, #24]	; (195a4 <nrfx_clock_stop+0x88>)
   1958c:	2200      	movs	r2, #0
   1958e:	715a      	strb	r2, [r3, #5]
   19590:	e7c8      	b.n	19524 <nrfx_clock_stop+0x8>
   19592:	bf00      	nop
   19594:	40000104 	.word	0x40000104
   19598:	4000000c 	.word	0x4000000c
   1959c:	40000100 	.word	0x40000100
   195a0:	40000004 	.word	0x40000004
   195a4:	20003df8 	.word	0x20003df8

000195a8 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   195a8:	4b16      	ldr	r3, [pc, #88]	; (19604 <nrfx_power_clock_irq_handler+0x5c>)
   195aa:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   195ac:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   195ae:	b16a      	cbz	r2, 195cc <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195b0:	2200      	movs	r2, #0
   195b2:	601a      	str	r2, [r3, #0]
   195b4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   195b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   195ba:	2201      	movs	r2, #1
   195bc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   195c0:	4b11      	ldr	r3, [pc, #68]	; (19608 <nrfx_power_clock_irq_handler+0x60>)
   195c2:	7958      	ldrb	r0, [r3, #5]
   195c4:	b910      	cbnz	r0, 195cc <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   195c6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   195c8:	681b      	ldr	r3, [r3, #0]
   195ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   195cc:	4b0f      	ldr	r3, [pc, #60]	; (1960c <nrfx_power_clock_irq_handler+0x64>)
   195ce:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   195d0:	b172      	cbz	r2, 195f0 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   195d2:	2200      	movs	r2, #0
   195d4:	601a      	str	r2, [r3, #0]
   195d6:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   195d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   195dc:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   195e0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   195e4:	0792      	lsls	r2, r2, #30
   195e6:	d104      	bne.n	195f2 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   195e8:	2201      	movs	r2, #1
   195ea:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   195ee:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   195f0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   195f2:	2202      	movs	r2, #2
   195f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   195f8:	4b03      	ldr	r3, [pc, #12]	; (19608 <nrfx_power_clock_irq_handler+0x60>)
}
   195fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   195fe:	681b      	ldr	r3, [r3, #0]
   19600:	2001      	movs	r0, #1
   19602:	4718      	bx	r3
   19604:	40000100 	.word	0x40000100
   19608:	20003df8 	.word	0x20003df8
   1960c:	40000104 	.word	0x40000104

00019610 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   19610:	2301      	movs	r3, #1
   19612:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   19616:	f010 0fff 	tst.w	r0, #255	; 0xff
   1961a:	d012      	beq.n	19642 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   1961c:	f04f 0320 	mov.w	r3, #32
   19620:	f3ef 8111 	mrs	r1, BASEPRI
   19624:	f383 8811 	msr	BASEPRI, r3
   19628:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1962c:	4a06      	ldr	r2, [pc, #24]	; (19648 <nrfx_gpiote_channel_free+0x38>)
   1962e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   19630:	ea23 0000 	bic.w	r0, r3, r0
   19634:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   19636:	f381 8811 	msr	BASEPRI, r1
   1963a:	f3bf 8f6f 	isb	sy
   1963e:	4803      	ldr	r0, [pc, #12]	; (1964c <nrfx_gpiote_channel_free+0x3c>)
   19640:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   19642:	4803      	ldr	r0, [pc, #12]	; (19650 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19644:	4770      	bx	lr
   19646:	bf00      	nop
   19648:	20003e00 	.word	0x20003e00
   1964c:	0bad0000 	.word	0x0bad0000
   19650:	0bad0004 	.word	0x0bad0004

00019654 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   19654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19658:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1965a:	f8df e060 	ldr.w	lr, [pc, #96]	; 196bc <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1965e:	4816      	ldr	r0, [pc, #88]	; (196b8 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   19660:	f8df 805c 	ldr.w	r8, [pc, #92]	; 196c0 <nrfx_gpiote_channel_alloc+0x6c>
{
   19664:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   19666:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   19668:	2601      	movs	r6, #1
   1966a:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1966c:	f04f 0120 	mov.w	r1, #32
   19670:	f3ef 8c11 	mrs	ip, BASEPRI
   19674:	f381 8811 	msr	BASEPRI, r1
   19678:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1967c:	fa22 f103 	lsr.w	r1, r2, r3
   19680:	07c9      	lsls	r1, r1, #31
   19682:	d50a      	bpl.n	1969a <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   19684:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   19688:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1968c:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1968e:	bf01      	itttt	eq
   19690:	4339      	orreq	r1, r7
   19692:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   19696:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   19698:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1969a:	f38c 8811 	msr	BASEPRI, ip
   1969e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   196a2:	4540      	cmp	r0, r8
   196a4:	d005      	beq.n	196b2 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   196a6:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   196aa:	439a      	bics	r2, r3
   196ac:	f104 0401 	add.w	r4, r4, #1
   196b0:	d1db      	bne.n	1966a <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   196b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   196b6:	bf00      	nop
   196b8:	0bad0002 	.word	0x0bad0002
   196bc:	20003e00 	.word	0x20003e00
   196c0:	0bad0000 	.word	0x0bad0000

000196c4 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   196c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   196c8:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   196ca:	4d4d      	ldr	r5, [pc, #308]	; (19800 <nrfx_spi_init+0x13c>)
   196cc:	2628      	movs	r6, #40	; 0x28
   196ce:	4366      	muls	r6, r4
   196d0:	19af      	adds	r7, r5, r6
   196d2:	f897 c01c 	ldrb.w	ip, [r7, #28]
   196d6:	f1bc 0f00 	cmp.w	ip, #0
   196da:	f040 808f 	bne.w	197fc <nrfx_spi_init+0x138>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   196de:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
   196e0:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   196e2:	f891 e000 	ldrb.w	lr, [r1]
   196e6:	7b0f      	ldrb	r7, [r1, #12]
   196e8:	f00e 061f 	and.w	r6, lr, #31
   196ec:	f04f 0c01 	mov.w	ip, #1
   196f0:	fa0c fc06 	lsl.w	ip, ip, r6
   196f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196f8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   196fc:	f04f 0801 	mov.w	r8, #1
   19700:	2f01      	cmp	r7, #1
    p_reg->OUTCLR = clr_mask;
   19702:	bf94      	ite	ls
   19704:	f8c3 c50c 	strls.w	ip, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   19708:	f8c3 c508 	strhi.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1970c:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   19710:	784e      	ldrb	r6, [r1, #1]
   19712:	2eff      	cmp	r6, #255	; 0xff
    *p_pin = pin_number & 0x1F;
   19714:	bf1f      	itttt	ne
   19716:	f006 0c1f 	andne.w	ip, r6, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   1971a:	fa08 f80c 	lslne.w	r8, r8, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1971e:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
   19722:	f8c3 850c 	strne.w	r8, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19726:	bf1c      	itt	ne
   19728:	f04f 0803 	movne.w	r8, #3
   1972c:	f843 802c 	strne.w	r8, [r3, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   19730:	788b      	ldrb	r3, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   19732:	bf08      	it	eq
   19734:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   19738:	2bff      	cmp	r3, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1973a:	bf1f      	itttt	ne
   1973c:	f891 800e 	ldrbne.w	r8, [r1, #14]
    *p_pin = pin_number & 0x1F;
   19740:	f003 0c1f 	andne.w	ip, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19744:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
   19748:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1974c:	bf1c      	itt	ne
   1974e:	ea4f 0888 	movne.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19752:	f849 802c 	strne.w	r8, [r9, ip, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   19756:	f891 8003 	ldrb.w	r8, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1975a:	bf08      	it	eq
   1975c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   19760:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   19764:	d00f      	beq.n	19786 <nrfx_spi_init+0xc2>
    *p_pin = pin_number & 0x1F;
   19766:	f008 0c1f 	and.w	ip, r8, #31
    p_reg->OUTSET = set_mask;
   1976a:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1976e:	f04f 0901 	mov.w	r9, #1
   19772:	fa09 f90c 	lsl.w	r9, r9, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19776:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   1977a:	f8ca 9508 	str.w	r9, [sl, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1977e:	f04f 0903 	mov.w	r9, #3
   19782:	f84a 902c 	str.w	r9, [sl, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   19786:	f04f 0c28 	mov.w	ip, #40	; 0x28
   1978a:	fb0c 5c04 	mla	ip, ip, r4, r5
   1978e:	f88c 801e 	strb.w	r8, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   19792:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
   19794:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   19798:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
   1979c:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   197a0:	688b      	ldr	r3, [r1, #8]
   197a2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   197a6:	7b4b      	ldrb	r3, [r1, #13]
   197a8:	3b00      	subs	r3, #0
   197aa:	bf18      	it	ne
   197ac:	2301      	movne	r3, #1
    switch (spi_mode)
   197ae:	2f02      	cmp	r7, #2
   197b0:	d01e      	beq.n	197f0 <nrfx_spi_init+0x12c>
   197b2:	2f03      	cmp	r7, #3
   197b4:	d01f      	beq.n	197f6 <nrfx_spi_init+0x132>
   197b6:	2f01      	cmp	r7, #1
   197b8:	d101      	bne.n	197be <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   197ba:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   197be:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   197c2:	2328      	movs	r3, #40	; 0x28
   197c4:	fb03 5304 	mla	r3, r3, r4, r5
   197c8:	7949      	ldrb	r1, [r1, #5]
   197ca:	77d9      	strb	r1, [r3, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   197cc:	2301      	movs	r3, #1
   197ce:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   197d2:	b11a      	cbz	r2, 197dc <nrfx_spi_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   197d4:	f340 3007 	sbfx	r0, r0, #12, #8
   197d8:	f7ea fe3e 	bl	4458 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   197dc:	2328      	movs	r3, #40	; 0x28
   197de:	fb03 5404 	mla	r4, r3, r4, r5
   197e2:	2300      	movs	r3, #0
   197e4:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   197e6:	4807      	ldr	r0, [pc, #28]	; (19804 <nrfx_spi_init+0x140>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   197e8:	2301      	movs	r3, #1
   197ea:	7723      	strb	r3, [r4, #28]
}
   197ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   197f0:	f043 0304 	orr.w	r3, r3, #4
        break;
   197f4:	e7e3      	b.n	197be <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   197f6:	f043 0306 	orr.w	r3, r3, #6
        break;
   197fa:	e7e0      	b.n	197be <nrfx_spi_init+0xfa>
        return err_code;
   197fc:	4802      	ldr	r0, [pc, #8]	; (19808 <nrfx_spi_init+0x144>)
   197fe:	e7f5      	b.n	197ec <nrfx_spi_init+0x128>
   19800:	20003e50 	.word	0x20003e50
   19804:	0bad0000 	.word	0x0bad0000
   19808:	0bad0005 	.word	0x0bad0005

0001980c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1980c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19810:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   19812:	4e41      	ldr	r6, [pc, #260]	; (19918 <nrfx_spi_xfer+0x10c>)
   19814:	2328      	movs	r3, #40	; 0x28
   19816:	436b      	muls	r3, r5
{
   19818:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
   1981a:	18f2      	adds	r2, r6, r3
{
   1981c:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   1981e:	7f51      	ldrb	r1, [r2, #29]
{
   19820:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
   19822:	2900      	cmp	r1, #0
   19824:	d176      	bne.n	19914 <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   19826:	f856 c003 	ldr.w	ip, [r6, r3]
   1982a:	f1bc 0f00 	cmp.w	ip, #0
   1982e:	d001      	beq.n	19834 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
   19830:	2301      	movs	r3, #1
   19832:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   19834:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   19838:	2428      	movs	r4, #40	; 0x28
   1983a:	fb04 6405 	mla	r4, r4, r5, r6
   1983e:	f104 090c 	add.w	r9, r4, #12
   19842:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
   19846:	2300      	movs	r3, #0
   19848:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1984c:	7fa3      	ldrb	r3, [r4, #30]
   1984e:	2bff      	cmp	r3, #255	; 0xff
   19850:	d008      	beq.n	19864 <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   19852:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   19854:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   19858:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   1985c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19860:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   19864:	2328      	movs	r3, #40	; 0x28
   19866:	f1be 0f00 	cmp.w	lr, #0
   1986a:	d006      	beq.n	1987a <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
   1986c:	fb03 6505 	mla	r5, r3, r5, r6
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   19870:	482a      	ldr	r0, [pc, #168]	; (1991c <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
   19872:	2300      	movs	r3, #0
   19874:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1987a:	f8d8 4000 	ldr.w	r4, [r8]
    p_cb->bytes_transferred = 0;
   1987e:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->INTENCLR = mask;
   19882:	2204      	movs	r2, #4
   19884:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   19888:	f8c3 e020 	str.w	lr, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1988c:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
   19890:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   19894:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   19896:	b18a      	cbz	r2, 198bc <nrfx_spi_xfer+0xb0>
   19898:	683b      	ldr	r3, [r7, #0]
   1989a:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1989c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   198a0:	2a01      	cmp	r2, #1
   198a2:	d90d      	bls.n	198c0 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   198a4:	683b      	ldr	r3, [r7, #0]
   198a6:	785b      	ldrb	r3, [r3, #1]
   198a8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   198ac:	f1bc 0f00 	cmp.w	ip, #0
   198b0:	d00e      	beq.n	198d0 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
   198b2:	2304      	movs	r3, #4
   198b4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   198b8:	4819      	ldr	r0, [pc, #100]	; (19920 <nrfx_spi_xfer+0x114>)
   198ba:	e7dc      	b.n	19876 <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
   198bc:	7fdb      	ldrb	r3, [r3, #31]
   198be:	e7ed      	b.n	1989c <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
   198c0:	68fb      	ldr	r3, [r7, #12]
   198c2:	2b01      	cmp	r3, #1
   198c4:	d9f2      	bls.n	198ac <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   198c6:	2328      	movs	r3, #40	; 0x28
   198c8:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->TXD = data;
   198cc:	7fdb      	ldrb	r3, [r3, #31]
   198ce:	e7eb      	b.n	198a8 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   198d0:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   198d4:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   198d8:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   198da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   198de:	2b00      	cmp	r3, #0
   198e0:	d0fb      	beq.n	198da <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   198e2:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   198e6:	4620      	mov	r0, r4
   198e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   198ec:	f00c fbea 	bl	260c4 <transfer_byte>
   198f0:	2800      	cmp	r0, #0
   198f2:	d1f2      	bne.n	198da <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   198f4:	2328      	movs	r3, #40	; 0x28
   198f6:	fb03 6505 	mla	r5, r3, r5, r6
   198fa:	7fab      	ldrb	r3, [r5, #30]
   198fc:	2bff      	cmp	r3, #255	; 0xff
   198fe:	d0db      	beq.n	198b8 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19900:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   19902:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19906:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   1990a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1990e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   19912:	e7d1      	b.n	198b8 <nrfx_spi_xfer+0xac>
        return err_code;
   19914:	4803      	ldr	r0, [pc, #12]	; (19924 <nrfx_spi_xfer+0x118>)
   19916:	e7ae      	b.n	19876 <nrfx_spi_xfer+0x6a>
   19918:	20003e50 	.word	0x20003e50
   1991c:	0bad0003 	.word	0x0bad0003
   19920:	0bad0000 	.word	0x0bad0000
   19924:	0bad000b 	.word	0x0bad000b

00019928 <nrfx_spi_1_irq_handler>:
   19928:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   1992c:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   1992e:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   19930:	490e      	ldr	r1, [pc, #56]	; (1996c <nrfx_spi_1_irq_handler+0x44>)
   19932:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   19936:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1993a:	f00c fbc3 	bl	260c4 <transfer_byte>
   1993e:	b9a0      	cbnz	r0, 1996a <nrfx_spi_1_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   19940:	7f8b      	ldrb	r3, [r1, #30]
   19942:	2bff      	cmp	r3, #255	; 0xff
   19944:	d008      	beq.n	19958 <nrfx_spi_1_irq_handler+0x30>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19946:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   19948:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1994c:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   19950:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19954:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   19958:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1995a:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1995c:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   1995e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   19962:	e9d1 3100 	ldrd	r3, r1, [r1]
   19966:	4802      	ldr	r0, [pc, #8]	; (19970 <nrfx_spi_1_irq_handler+0x48>)
   19968:	4718      	bx	r3
}
   1996a:	bd10      	pop	{r4, pc}
   1996c:	20003e50 	.word	0x20003e50
   19970:	20003e58 	.word	0x20003e58

00019974 <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   19974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19976:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   19978:	4d1e      	ldr	r5, [pc, #120]	; (199f4 <nrfx_twim_init+0x80>)
   1997a:	f04f 0c34 	mov.w	ip, #52	; 0x34
   1997e:	fb0c fc06 	mul.w	ip, ip, r6
   19982:	eb05 040c 	add.w	r4, r5, ip
   19986:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   1998a:	bb8f      	cbnz	r7, 199f0 <nrfx_twim_init+0x7c>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   1998c:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   1998e:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   19992:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   19996:	680f      	ldr	r7, [r1, #0]
    p_cb->p_context       = p_context;
   19998:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1999a:	7b4b      	ldrb	r3, [r1, #13]
   1999c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    *p_pin = pin_number & 0x1F;
   199a0:	f007 031f 	and.w	r3, r7, #31
    p_cb->handler         = event_handler;
   199a4:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   199a8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   199ac:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   199b0:	f240 6e0c 	movw	lr, #1548	; 0x60c
   199b4:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   199b8:	684c      	ldr	r4, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   199ba:	6800      	ldr	r0, [r0, #0]
    *p_pin = pin_number & 0x1F;
   199bc:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   199c0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   199c4:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   199c8:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   199ca:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   199ce:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   199d2:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   199d6:	b11a      	cbz	r2, 199e0 <nrfx_twim_init+0x6c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   199d8:	f340 3007 	sbfx	r0, r0, #12, #8
   199dc:	f7ea fd3c 	bl	4458 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   199e0:	2334      	movs	r3, #52	; 0x34
   199e2:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   199e6:	4804      	ldr	r0, [pc, #16]	; (199f8 <nrfx_twim_init+0x84>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   199e8:	2301      	movs	r3, #1
   199ea:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   199ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   199f0:	4802      	ldr	r0, [pc, #8]	; (199fc <nrfx_twim_init+0x88>)
   199f2:	e7fc      	b.n	199ee <nrfx_twim_init+0x7a>
   199f4:	20003e78 	.word	0x20003e78
   199f8:	0bad0000 	.word	0x0bad0000
   199fc:	0bad0005 	.word	0x0bad0005

00019a00 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   19a00:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19a02:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   19a04:	2106      	movs	r1, #6
   19a06:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   19a0a:	4a04      	ldr	r2, [pc, #16]	; (19a1c <nrfx_twim_enable+0x1c>)
   19a0c:	2134      	movs	r1, #52	; 0x34
   19a0e:	fb01 2303 	mla	r3, r1, r3, r2
   19a12:	2202      	movs	r2, #2
   19a14:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   19a18:	4770      	bx	lr
   19a1a:	bf00      	nop
   19a1c:	20003e78 	.word	0x20003e78

00019a20 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19a20:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   19a22:	490b      	ldr	r1, [pc, #44]	; (19a50 <nrfx_twim_disable+0x30>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   19a24:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   19a26:	2034      	movs	r0, #52	; 0x34
   19a28:	fb00 1303 	mla	r3, r0, r3, r1
    p_reg->INTENCLR = mask;
   19a2c:	4909      	ldr	r1, [pc, #36]	; (19a54 <nrfx_twim_disable+0x34>)
   19a2e:	2000      	movs	r0, #0
   19a30:	6098      	str	r0, [r3, #8]
   19a32:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   19a36:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   19a3a:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
   19a3e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   19a42:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19a46:	2201      	movs	r2, #1
   19a48:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   19a4c:	4770      	bx	lr
   19a4e:	bf00      	nop
   19a50:	20003e78 	.word	0x20003e78
   19a54:	019c0202 	.word	0x019c0202

00019a58 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   19a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   19a5c:	4fb0      	ldr	r7, [pc, #704]	; (19d20 <nrfx_twim_xfer+0x2c8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19a5e:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   19a62:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   19a64:	2634      	movs	r6, #52	; 0x34
   19a66:	fb06 760e 	mla	r6, r6, lr, r7
   19a6a:	2300      	movs	r3, #0
   19a6c:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   19a70:	68cb      	ldr	r3, [r1, #12]
   19a72:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   19a7a:	460d      	mov	r5, r1
   19a7c:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19a7e:	d003      	beq.n	19a88 <nrfx_twim_xfer+0x30>
        return err_code;
   19a80:	4ea8      	ldr	r6, [pc, #672]	; (19d24 <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19a82:	4630      	mov	r0, r6
   19a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
   19a88:	4ba7      	ldr	r3, [pc, #668]	; (19d28 <nrfx_twim_xfer+0x2d0>)
   19a8a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   19a8e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   19a92:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   19a96:	b123      	cbz	r3, 19aa2 <nrfx_twim_xfer+0x4a>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19a98:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   19a9a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   19a9e:	4ea3      	ldr	r6, [pc, #652]	; (19d2c <nrfx_twim_xfer+0x2d4>)
   19aa0:	e7ef      	b.n	19a82 <nrfx_twim_xfer+0x2a>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   19aa2:	f012 0f14 	tst.w	r2, #20
   19aa6:	bf0c      	ite	eq
   19aa8:	2301      	moveq	r3, #1
   19aaa:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   19aac:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   19ab0:	4689      	mov	r9, r1
   19ab2:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   19ab6:	f106 080c 	add.w	r8, r6, #12
   19aba:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   19abe:	f8d9 3000 	ldr.w	r3, [r9]
   19ac2:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   19ac6:	f3cc 1300 	ubfx	r3, ip, #4, #1
   19aca:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   19ace:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   19ad2:	786b      	ldrb	r3, [r5, #1]
   19ad4:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19ad8:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   19adc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19ae0:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   19ae4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19ae8:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   19aec:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   19af0:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   19af4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   19af8:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   19afc:	bf18      	it	ne
   19afe:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   19b00:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   19b04:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   19b08:	bf18      	it	ne
   19b0a:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   19b0c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   19b10:	782b      	ldrb	r3, [r5, #0]
   19b12:	2b03      	cmp	r3, #3
   19b14:	f200 80b2 	bhi.w	19c7c <nrfx_twim_xfer+0x224>
   19b18:	e8df f003 	tbb	[pc, r3]
   19b1c:	02669d81 	.word	0x02669d81
   19b20:	692a      	ldr	r2, [r5, #16]
   19b22:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   19b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   19b2a:	d1a9      	bne.n	19a80 <nrfx_twim_xfer+0x28>
    p_reg->SHORTS = mask;
   19b2c:	f44f 7380 	mov.w	r3, #256	; 0x100
   19b30:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19b34:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19b36:	686b      	ldr	r3, [r5, #4]
   19b38:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19b3c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b40:	2300      	movs	r3, #0
   19b42:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   19b46:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b4a:	2101      	movs	r1, #1
   19b4c:	6221      	str	r1, [r4, #32]
   19b4e:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b50:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   19b54:	2900      	cmp	r1, #0
   19b56:	d0fb      	beq.n	19b50 <nrfx_twim_xfer+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b58:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   19b5c:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   19b60:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19b62:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19b66:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   19b6a:	2334      	movs	r3, #52	; 0x34
   19b6c:	fb03 730e 	mla	r3, r3, lr, r7
   19b70:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   19b74:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   19b76:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   19b78:	4e6d      	ldr	r6, [pc, #436]	; (19d30 <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   19b7a:	f01c 0f08 	tst.w	ip, #8
   19b7e:	d104      	bne.n	19b8a <nrfx_twim_xfer+0x132>
   19b80:	782a      	ldrb	r2, [r5, #0]
   19b82:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b84:	bf1c      	itt	ne
   19b86:	2201      	movne	r2, #1
   19b88:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
   19b8a:	2334      	movs	r3, #52	; 0x34
   19b8c:	fb03 f30e 	mul.w	r3, r3, lr
   19b90:	18fa      	adds	r2, r7, r3
   19b92:	58fb      	ldr	r3, [r7, r3]
   19b94:	2b00      	cmp	r3, #0
   19b96:	d174      	bne.n	19c82 <nrfx_twim_xfer+0x22a>
                transmission_finished = true;
   19b98:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b9a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   19b9e:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19ba2:	2900      	cmp	r1, #0
   19ba4:	f040 8087 	bne.w	19cb6 <nrfx_twim_xfer+0x25e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   19ba8:	3a00      	subs	r2, #0
   19baa:	bf18      	it	ne
   19bac:	2201      	movne	r2, #1
   19bae:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   19bb2:	2900      	cmp	r1, #0
   19bb4:	f000 8085 	beq.w	19cc2 <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19bb8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19bbc:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19bc0:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   19bc4:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   19bc8:	b110      	cbz	r0, 19bd0 <nrfx_twim_xfer+0x178>
   19bca:	f411 7f00 	tst.w	r1, #512	; 0x200
   19bce:	d104      	bne.n	19bda <nrfx_twim_xfer+0x182>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19bd0:	6225      	str	r5, [r4, #32]
   19bd2:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   19bd4:	2800      	cmp	r0, #0
   19bd6:	d0e0      	beq.n	19b9a <nrfx_twim_xfer+0x142>
                    transmission_finished = false;
   19bd8:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   19bda:	05c9      	lsls	r1, r1, #23
   19bdc:	d571      	bpl.n	19cc2 <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19bde:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   19be2:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   19be6:	e7d8      	b.n	19b9a <nrfx_twim_xfer+0x142>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19be8:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19bea:	68ea      	ldr	r2, [r5, #12]
   19bec:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19bf0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   19bf4:	692b      	ldr	r3, [r5, #16]
   19bf6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   19bfa:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   19bfe:	f47f af3f 	bne.w	19a80 <nrfx_twim_xfer+0x28>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   19c02:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19c04:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   19c08:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   19c0c:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   19c10:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19c14:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19c16:	fb03 730e 	mla	r3, r3, lr, r7
   19c1a:	2202      	movs	r2, #2
   19c1c:	e012      	b.n	19c44 <nrfx_twim_xfer+0x1ec>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19c1e:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19c20:	68ea      	ldr	r2, [r5, #12]
   19c22:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   19c26:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   19c2a:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   19c2e:	f04f 0334 	mov.w	r3, #52	; 0x34
   19c32:	d00b      	beq.n	19c4c <nrfx_twim_xfer+0x1f4>
    p_reg->SHORTS = mask;
   19c34:	f44f 7280 	mov.w	r2, #256	; 0x100
   19c38:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   19c3c:	fb03 730e 	mla	r3, r3, lr, r7
   19c40:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19c44:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19c46:	2301      	movs	r3, #1
   19c48:	6223      	str	r3, [r4, #32]
   19c4a:	e794      	b.n	19b76 <nrfx_twim_xfer+0x11e>
    p_reg->SHORTS = mask;
   19c4c:	f44f 7200 	mov.w	r2, #512	; 0x200
   19c50:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   19c54:	e7df      	b.n	19c16 <nrfx_twim_xfer+0x1be>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19c56:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19c58:	68ea      	ldr	r2, [r5, #12]
   19c5a:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19c5e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   19c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19c66:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19c6a:	2334      	movs	r3, #52	; 0x34
   19c6c:	fb03 730e 	mla	r3, r3, lr, r7
   19c70:	2202      	movs	r2, #2
   19c72:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19c74:	2301      	movs	r3, #1
   19c76:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   19c78:	2300      	movs	r3, #0
   19c7a:	e77d      	b.n	19b78 <nrfx_twim_xfer+0x120>
    switch (p_xfer_desc->type)
   19c7c:	4e2d      	ldr	r6, [pc, #180]	; (19d34 <nrfx_twim_xfer+0x2dc>)
   19c7e:	2308      	movs	r3, #8
   19c80:	e77b      	b.n	19b7a <nrfx_twim_xfer+0x122>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   19c82:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   19c86:	bf1c      	itt	ne
   19c88:	2300      	movne	r3, #0
   19c8a:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   19c8c:	f01c 0f40 	tst.w	ip, #64	; 0x40
   19c90:	d106      	bne.n	19ca0 <nrfx_twim_xfer+0x248>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   19c92:	2334      	movs	r3, #52	; 0x34
   19c94:	fb03 730e 	mla	r3, r3, lr, r7
   19c98:	689a      	ldr	r2, [r3, #8]
   19c9a:	f042 0202 	orr.w	r2, r2, #2
   19c9e:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   19ca0:	2334      	movs	r3, #52	; 0x34
   19ca2:	fb03 770e 	mla	r7, r3, lr, r7
   19ca6:	68bb      	ldr	r3, [r7, #8]
   19ca8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   19cac:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19cae:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   19cb0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   19cb4:	e6e5      	b.n	19a82 <nrfx_twim_xfer+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19cb6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19cba:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   19cbe:	2201      	movs	r2, #1
   19cc0:	e775      	b.n	19bae <nrfx_twim_xfer+0x156>
        } while (!transmission_finished);
   19cc2:	2a00      	cmp	r2, #0
   19cc4:	f43f af69 	beq.w	19b9a <nrfx_twim_xfer+0x142>
        p_cb->busy = false;
   19cc8:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   19cca:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   19cce:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   19cd2:	fb01 720e 	mla	r2, r1, lr, r7
   19cd6:	2000      	movs	r0, #0
   19cd8:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   19cdc:	b18b      	cbz	r3, 19d02 <nrfx_twim_xfer+0x2aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   19cde:	4a16      	ldr	r2, [pc, #88]	; (19d38 <nrfx_twim_xfer+0x2e0>)
   19ce0:	4e16      	ldr	r6, [pc, #88]	; (19d3c <nrfx_twim_xfer+0x2e4>)
   19ce2:	f013 0f01 	tst.w	r3, #1
   19ce6:	bf18      	it	ne
   19ce8:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   19cea:	f013 0f02 	tst.w	r3, #2
   19cee:	f102 0201 	add.w	r2, r2, #1
   19cf2:	bf18      	it	ne
   19cf4:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   19cf6:	f013 0f04 	tst.w	r3, #4
   19cfa:	4b11      	ldr	r3, [pc, #68]	; (19d40 <nrfx_twim_xfer+0x2e8>)
   19cfc:	bf18      	it	ne
   19cfe:	461e      	movne	r6, r3
   19d00:	e6bf      	b.n	19a82 <nrfx_twim_xfer+0x2a>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   19d02:	f01c 0f40 	tst.w	ip, #64	; 0x40
   19d06:	f47f aebc 	bne.w	19a82 <nrfx_twim_xfer+0x2a>
                !xfer_completeness_check(p_twim, p_cb))
   19d0a:	fb0e 7101 	mla	r1, lr, r1, r7
   19d0e:	4620      	mov	r0, r4
   19d10:	f00c fa0b 	bl	2612a <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   19d14:	4b09      	ldr	r3, [pc, #36]	; (19d3c <nrfx_twim_xfer+0x2e4>)
   19d16:	2800      	cmp	r0, #0
   19d18:	bf08      	it	eq
   19d1a:	461e      	moveq	r6, r3
   19d1c:	e6b1      	b.n	19a82 <nrfx_twim_xfer+0x2a>
   19d1e:	bf00      	nop
   19d20:	20003e78 	.word	0x20003e78
   19d24:	0bad000a 	.word	0x0bad000a
   19d28:	019c0202 	.word	0x019c0202
   19d2c:	0bad000b 	.word	0x0bad000b
   19d30:	0bad0000 	.word	0x0bad0000
   19d34:	0bad0004 	.word	0x0bad0004
   19d38:	0bae0000 	.word	0x0bae0000
   19d3c:	0bad0001 	.word	0x0bad0001
   19d40:	0bae0002 	.word	0x0bae0002

00019d44 <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   19d44:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d46:	4b5b      	ldr	r3, [pc, #364]	; (19eb4 <nrfx_twim_0_irq_handler+0x170>)
   19d48:	4c5b      	ldr	r4, [pc, #364]	; (19eb8 <nrfx_twim_0_irq_handler+0x174>)
   19d4a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   19d4e:	b087      	sub	sp, #28
   19d50:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   19d52:	b1fa      	cbz	r2, 19d94 <nrfx_twim_0_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19d54:	2200      	movs	r2, #0
   19d56:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   19d5a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d5e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19d62:	b9ba      	cbnz	r2, 19d94 <nrfx_twim_0_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   19d64:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   19d66:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19d6a:	2202      	movs	r2, #2
   19d6c:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19d6e:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   19d70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d74:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   19d78:	b11a      	cbz	r2, 19d82 <nrfx_twim_0_irq_handler+0x3e>
    return p_reg->SHORTS;
   19d7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   19d7e:	059e      	lsls	r6, r3, #22
   19d80:	d403      	bmi.n	19d8a <nrfx_twim_0_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19d82:	4b4c      	ldr	r3, [pc, #304]	; (19eb4 <nrfx_twim_0_irq_handler+0x170>)
   19d84:	2201      	movs	r2, #1
   19d86:	621a      	str	r2, [r3, #32]
   19d88:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   19d8a:	2301      	movs	r3, #1
   19d8c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   19d90:	b007      	add	sp, #28
   19d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d94:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19d98:	2b00      	cmp	r3, #0
   19d9a:	d053      	beq.n	19e44 <nrfx_twim_0_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19d9c:	2300      	movs	r3, #0
   19d9e:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   19da2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   19da6:	6a23      	ldr	r3, [r4, #32]
   19da8:	065d      	lsls	r5, r3, #25
   19daa:	d40a      	bmi.n	19dc2 <nrfx_twim_0_irq_handler+0x7e>
   19dac:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19db0:	b93b      	cbnz	r3, 19dc2 <nrfx_twim_0_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   19db2:	4941      	ldr	r1, [pc, #260]	; (19eb8 <nrfx_twim_0_irq_handler+0x174>)
   19db4:	483f      	ldr	r0, [pc, #252]	; (19eb4 <nrfx_twim_0_irq_handler+0x170>)
   19db6:	f00c f9b8 	bl	2612a <xfer_completeness_check>
   19dba:	f080 0001 	eor.w	r0, r0, #1
   19dbe:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   19dc2:	6a23      	ldr	r3, [r4, #32]
   19dc4:	f013 0704 	ands.w	r7, r3, #4
   19dc8:	d121      	bne.n	19e0e <nrfx_twim_0_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
   19dca:	4e3c      	ldr	r6, [pc, #240]	; (19ebc <nrfx_twim_0_irq_handler+0x178>)
   19dcc:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   19dd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   19dd2:	ad01      	add	r5, sp, #4
   19dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19dd6:	6833      	ldr	r3, [r6, #0]
   19dd8:	602b      	str	r3, [r5, #0]
   19dda:	4b36      	ldr	r3, [pc, #216]	; (19eb4 <nrfx_twim_0_irq_handler+0x170>)
   19ddc:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   19de0:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   19de4:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   19de8:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   19dec:	f1bc 0f00 	cmp.w	ip, #0
   19df0:	d002      	beq.n	19df8 <nrfx_twim_0_irq_handler+0xb4>
   19df2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   19df6:	b152      	cbz	r2, 19e0e <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   19df8:	2200      	movs	r2, #0
   19dfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   19dfe:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   19e00:	4a2f      	ldr	r2, [pc, #188]	; (19ec0 <nrfx_twim_0_irq_handler+0x17c>)
   19e02:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19e06:	4b2f      	ldr	r3, [pc, #188]	; (19ec4 <nrfx_twim_0_irq_handler+0x180>)
   19e08:	2208      	movs	r2, #8
   19e0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   19e0e:	4a29      	ldr	r2, [pc, #164]	; (19eb4 <nrfx_twim_0_irq_handler+0x170>)
   19e10:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   19e14:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   19e18:	0798      	lsls	r0, r3, #30
   19e1a:	d53c      	bpl.n	19e96 <nrfx_twim_0_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   19e1c:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   19e1e:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   19e22:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   19e26:	b90b      	cbnz	r3, 19e2c <nrfx_twim_0_irq_handler+0xe8>
        p_cb->busy = false;
   19e28:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   19e2c:	6a23      	ldr	r3, [r4, #32]
   19e2e:	075b      	lsls	r3, r3, #29
   19e30:	d503      	bpl.n	19e3a <nrfx_twim_0_irq_handler+0xf6>
   19e32:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19e36:	2b00      	cmp	r3, #0
   19e38:	d0aa      	beq.n	19d90 <nrfx_twim_0_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
   19e3a:	e9d4 3100 	ldrd	r3, r1, [r4]
   19e3e:	4668      	mov	r0, sp
   19e40:	4798      	blx	r3
}
   19e42:	e7a5      	b.n	19d90 <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19e44:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   19e48:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   19e4c:	7b23      	ldrb	r3, [r4, #12]
   19e4e:	b983      	cbnz	r3, 19e72 <nrfx_twim_0_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
   19e50:	4f1a      	ldr	r7, [pc, #104]	; (19ebc <nrfx_twim_0_irq_handler+0x178>)
   19e52:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   19e54:	ae01      	add	r6, sp, #4
   19e56:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   19e58:	683b      	ldr	r3, [r7, #0]
   19e5a:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   19e5c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   19e60:	2b00      	cmp	r3, #0
   19e62:	d1d4      	bne.n	19e0e <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   19e64:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   19e68:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   19e6a:	4b15      	ldr	r3, [pc, #84]	; (19ec0 <nrfx_twim_0_irq_handler+0x17c>)
   19e6c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   19e70:	e7c9      	b.n	19e06 <nrfx_twim_0_irq_handler+0xc2>
    p_reg->SHORTS = mask;
   19e72:	f44f 7300 	mov.w	r3, #512	; 0x200
   19e76:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   19e7a:	f240 2302 	movw	r3, #514	; 0x202
   19e7e:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   19e80:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   19e84:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19e88:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   19e8a:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19e8e:	2301      	movs	r3, #1
   19e90:	60ab      	str	r3, [r5, #8]
   19e92:	622b      	str	r3, [r5, #32]
            return;
   19e94:	e77c      	b.n	19d90 <nrfx_twim_0_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   19e96:	0759      	lsls	r1, r3, #29
   19e98:	d501      	bpl.n	19e9e <nrfx_twim_0_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   19e9a:	2302      	movs	r3, #2
   19e9c:	e7bf      	b.n	19e1e <nrfx_twim_0_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   19e9e:	07da      	lsls	r2, r3, #31
   19ea0:	d501      	bpl.n	19ea6 <nrfx_twim_0_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   19ea2:	2303      	movs	r3, #3
   19ea4:	e7bb      	b.n	19e1e <nrfx_twim_0_irq_handler+0xda>
    else if (p_cb->error)
   19ea6:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19eaa:	2b00      	cmp	r3, #0
   19eac:	d0b7      	beq.n	19e1e <nrfx_twim_0_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   19eae:	2304      	movs	r3, #4
   19eb0:	e7b5      	b.n	19e1e <nrfx_twim_0_irq_handler+0xda>
   19eb2:	bf00      	nop
   19eb4:	40003000 	.word	0x40003000
   19eb8:	20003e78 	.word	0x20003e78
   19ebc:	20003e84 	.word	0x20003e84
   19ec0:	019c0202 	.word	0x019c0202
   19ec4:	e000e100 	.word	0xe000e100

00019ec8 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
   19ec8:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19eca:	4604      	mov	r4, r0
   19ecc:	b970      	cbnz	r0, 19eec <lv_disp_get_scr_act+0x24>
   19ece:	f003 fa6d 	bl	1d3ac <lv_disp_get_default>
    if(!disp) {
   19ed2:	4604      	mov	r4, r0
   19ed4:	b950      	cbnz	r0, 19eec <lv_disp_get_scr_act+0x24>
        LV_LOG_WARN("no display registered to get its active screen");
   19ed6:	4b06      	ldr	r3, [pc, #24]	; (19ef0 <lv_disp_get_scr_act+0x28>)
   19ed8:	9300      	str	r3, [sp, #0]
   19eda:	4906      	ldr	r1, [pc, #24]	; (19ef4 <lv_disp_get_scr_act+0x2c>)
   19edc:	4b06      	ldr	r3, [pc, #24]	; (19ef8 <lv_disp_get_scr_act+0x30>)
   19ede:	2235      	movs	r2, #53	; 0x35
   19ee0:	2002      	movs	r0, #2
   19ee2:	f003 fb39 	bl	1d558 <_lv_log_add>
        return NULL;
    }

    return disp->act_scr;
}
   19ee6:	4620      	mov	r0, r4
   19ee8:	b002      	add	sp, #8
   19eea:	bd10      	pop	{r4, pc}
    return disp->act_scr;
   19eec:	6c24      	ldr	r4, [r4, #64]	; 0x40
   19eee:	e7fa      	b.n	19ee6 <lv_disp_get_scr_act+0x1e>
   19ef0:	0002fb50 	.word	0x0002fb50
   19ef4:	0002fb19 	.word	0x0002fb19
   19ef8:	0002fc23 	.word	0x0002fc23

00019efc <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
   19efc:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19efe:	4604      	mov	r4, r0
   19f00:	b970      	cbnz	r0, 19f20 <lv_disp_get_scr_prev+0x24>
   19f02:	f003 fa53 	bl	1d3ac <lv_disp_get_default>
    if(!disp) {
   19f06:	4604      	mov	r4, r0
   19f08:	b950      	cbnz	r0, 19f20 <lv_disp_get_scr_prev+0x24>
        LV_LOG_WARN("no display registered to get its previous screen");
   19f0a:	4b06      	ldr	r3, [pc, #24]	; (19f24 <lv_disp_get_scr_prev+0x28>)
   19f0c:	9300      	str	r3, [sp, #0]
   19f0e:	4906      	ldr	r1, [pc, #24]	; (19f28 <lv_disp_get_scr_prev+0x2c>)
   19f10:	4b06      	ldr	r3, [pc, #24]	; (19f2c <lv_disp_get_scr_prev+0x30>)
   19f12:	2246      	movs	r2, #70	; 0x46
   19f14:	2002      	movs	r0, #2
   19f16:	f003 fb1f 	bl	1d558 <_lv_log_add>
        return NULL;
    }

    return disp->prev_scr;
}
   19f1a:	4620      	mov	r0, r4
   19f1c:	b002      	add	sp, #8
   19f1e:	bd10      	pop	{r4, pc}
    return disp->prev_scr;
   19f20:	6c64      	ldr	r4, [r4, #68]	; 0x44
   19f22:	e7fa      	b.n	19f1a <lv_disp_get_scr_prev+0x1e>
   19f24:	0002fb7f 	.word	0x0002fb7f
   19f28:	0002fb19 	.word	0x0002fb19
   19f2c:	0002fc37 	.word	0x0002fc37

00019f30 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
   19f30:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19f32:	4604      	mov	r4, r0
   19f34:	b970      	cbnz	r0, 19f54 <lv_disp_get_layer_top+0x24>
   19f36:	f003 fa39 	bl	1d3ac <lv_disp_get_default>
    if(!disp) {
   19f3a:	4604      	mov	r4, r0
   19f3c:	b950      	cbnz	r0, 19f54 <lv_disp_get_layer_top+0x24>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
   19f3e:	4b06      	ldr	r3, [pc, #24]	; (19f58 <lv_disp_get_layer_top+0x28>)
   19f40:	9300      	str	r3, [sp, #0]
   19f42:	4906      	ldr	r1, [pc, #24]	; (19f5c <lv_disp_get_layer_top+0x2c>)
   19f44:	4b06      	ldr	r3, [pc, #24]	; (19f60 <lv_disp_get_layer_top+0x30>)
   19f46:	2263      	movs	r2, #99	; 0x63
   19f48:	2002      	movs	r0, #2
   19f4a:	f003 fb05 	bl	1d558 <_lv_log_add>
        return NULL;
    }

    return disp->top_layer;
}
   19f4e:	4620      	mov	r0, r4
   19f50:	b002      	add	sp, #8
   19f52:	bd10      	pop	{r4, pc}
    return disp->top_layer;
   19f54:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   19f56:	e7fa      	b.n	19f4e <lv_disp_get_layer_top+0x1e>
   19f58:	0002fbb0 	.word	0x0002fbb0
   19f5c:	0002fb19 	.word	0x0002fb19
   19f60:	0002fc4c 	.word	0x0002fc4c

00019f64 <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
   19f64:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19f66:	4604      	mov	r4, r0
   19f68:	b970      	cbnz	r0, 19f88 <lv_disp_get_layer_sys+0x24>
   19f6a:	f003 fa1f 	bl	1d3ac <lv_disp_get_default>
    if(!disp) {
   19f6e:	4604      	mov	r4, r0
   19f70:	b950      	cbnz	r0, 19f88 <lv_disp_get_layer_sys+0x24>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
   19f72:	4b06      	ldr	r3, [pc, #24]	; (19f8c <lv_disp_get_layer_sys+0x28>)
   19f74:	9300      	str	r3, [sp, #0]
   19f76:	4906      	ldr	r1, [pc, #24]	; (19f90 <lv_disp_get_layer_sys+0x2c>)
   19f78:	4b06      	ldr	r3, [pc, #24]	; (19f94 <lv_disp_get_layer_sys+0x30>)
   19f7a:	2274      	movs	r2, #116	; 0x74
   19f7c:	2002      	movs	r0, #2
   19f7e:	f003 faeb 	bl	1d558 <_lv_log_add>
        return NULL;
    }

    return disp->sys_layer;
}
   19f82:	4620      	mov	r0, r4
   19f84:	b002      	add	sp, #8
   19f86:	bd10      	pop	{r4, pc}
    return disp->sys_layer;
   19f88:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
   19f8a:	e7fa      	b.n	19f82 <lv_disp_get_layer_sys+0x1e>
   19f8c:	0002fbe9 	.word	0x0002fbe9
   19f90:	0002fb19 	.word	0x0002fb19
   19f94:	0002fc62 	.word	0x0002fc62

00019f98 <lv_indev_reset.part.0>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
   19f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f9a:	4604      	mov	r4, r0
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
   19f9c:	2000      	movs	r0, #0
   19f9e:	f003 fabf 	bl	1d520 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
   19fa2:	4e0b      	ldr	r6, [pc, #44]	; (19fd0 <lv_indev_reset.part.0+0x38>)
   19fa4:	4f0b      	ldr	r7, [pc, #44]	; (19fd4 <lv_indev_reset.part.0+0x3c>)
   19fa6:	2500      	movs	r5, #0
        while(i) {
   19fa8:	b900      	cbnz	r0, 19fac <lv_indev_reset.part.0+0x14>
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
   19faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i->proc.reset_query = 1;
   19fac:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   19fb0:	f043 0302 	orr.w	r3, r3, #2
   19fb4:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
            if(indev_act == i) indev_obj_act = NULL;
   19fb8:	6833      	ldr	r3, [r6, #0]
   19fba:	4298      	cmp	r0, r3
   19fbc:	bf08      	it	eq
   19fbe:	603d      	streq	r5, [r7, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
   19fc0:	b114      	cbz	r4, 19fc8 <lv_indev_reset.part.0+0x30>
   19fc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   19fc4:	429c      	cmp	r4, r3
   19fc6:	d100      	bne.n	19fca <lv_indev_reset.part.0+0x32>
                i->proc.types.pointer.last_pressed = NULL;
   19fc8:	6405      	str	r5, [r0, #64]	; 0x40
            i = lv_indev_get_next(i);
   19fca:	f003 faa9 	bl	1d520 <lv_indev_get_next>
   19fce:	e7eb      	b.n	19fa8 <lv_indev_reset.part.0+0x10>
   19fd0:	20003eac 	.word	0x20003eac
   19fd4:	20003eb0 	.word	0x20003eb0

00019fd8 <lv_indev_get_act>:
}
   19fd8:	4b01      	ldr	r3, [pc, #4]	; (19fe0 <lv_indev_get_act+0x8>)
   19fda:	6818      	ldr	r0, [r3, #0]
   19fdc:	4770      	bx	lr
   19fde:	bf00      	nop
   19fe0:	20003eac 	.word	0x20003eac

00019fe4 <lv_indev_reset>:
{
   19fe4:	4603      	mov	r3, r0
   19fe6:	4608      	mov	r0, r1
    if(indev) {
   19fe8:	b19b      	cbz	r3, 1a012 <lv_indev_reset+0x2e>
        indev->proc.reset_query = 1;
   19fea:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   19fee:	f042 0202 	orr.w	r2, r2, #2
   19ff2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        if(indev_act == indev) indev_obj_act = NULL;
   19ff6:	4a08      	ldr	r2, [pc, #32]	; (1a018 <lv_indev_reset+0x34>)
   19ff8:	6812      	ldr	r2, [r2, #0]
   19ffa:	429a      	cmp	r2, r3
   19ffc:	bf02      	ittt	eq
   19ffe:	4a07      	ldreq	r2, [pc, #28]	; (1a01c <lv_indev_reset+0x38>)
   1a000:	2100      	moveq	r1, #0
   1a002:	6011      	streq	r1, [r2, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
   1a004:	b110      	cbz	r0, 1a00c <lv_indev_reset+0x28>
   1a006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a008:	4282      	cmp	r2, r0
   1a00a:	d104      	bne.n	1a016 <lv_indev_reset+0x32>
            indev->proc.types.pointer.last_pressed = NULL;
   1a00c:	2200      	movs	r2, #0
   1a00e:	641a      	str	r2, [r3, #64]	; 0x40
   1a010:	4770      	bx	lr
   1a012:	f7ff bfc1 	b.w	19f98 <lv_indev_reset.part.0>
}
   1a016:	4770      	bx	lr
   1a018:	20003eac 	.word	0x20003eac
   1a01c:	20003eb0 	.word	0x20003eb0

0001a020 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
   1a020:	2872      	cmp	r0, #114	; 0x72
   1a022:	d867      	bhi.n	1a0f4 <style_prop_is_cacheble+0xd4>
   1a024:	2853      	cmp	r0, #83	; 0x53
   1a026:	d816      	bhi.n	1a056 <style_prop_is_cacheble+0x36>
   1a028:	2833      	cmp	r0, #51	; 0x33
   1a02a:	d85b      	bhi.n	1a0e4 <style_prop_is_cacheble+0xc4>
   1a02c:	281f      	cmp	r0, #31
   1a02e:	d81c      	bhi.n	1a06a <style_prop_is_cacheble+0x4a>
   1a030:	3801      	subs	r0, #1
   1a032:	b283      	uxth	r3, r0
   1a034:	2b17      	cmp	r3, #23
   1a036:	d920      	bls.n	1a07a <style_prop_is_cacheble+0x5a>
   1a038:	2000      	movs	r0, #0
   1a03a:	4770      	bx	lr
   1a03c:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
   1a040:	2301      	movs	r3, #1
   1a042:	b280      	uxth	r0, r0
   1a044:	fa03 f000 	lsl.w	r0, r3, r0
   1a048:	f244 030b 	movw	r3, #16395	; 0x400b
   1a04c:	4218      	tst	r0, r3
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
   1a04e:	bf14      	ite	ne
   1a050:	2001      	movne	r0, #1
   1a052:	2000      	moveq	r0, #0
   1a054:	4770      	bx	lr
   1a056:	3854      	subs	r0, #84	; 0x54
   1a058:	b280      	uxth	r0, r0
   1a05a:	2301      	movs	r3, #1
   1a05c:	4083      	lsls	r3, r0
   1a05e:	4835      	ldr	r0, [pc, #212]	; (1a134 <style_prop_is_cacheble+0x114>)
   1a060:	4018      	ands	r0, r3
   1a062:	3800      	subs	r0, #0
   1a064:	bf18      	it	ne
   1a066:	2001      	movne	r0, #1
   1a068:	4770      	bx	lr
   1a06a:	3820      	subs	r0, #32
   1a06c:	2301      	movs	r3, #1
   1a06e:	b280      	uxth	r0, r0
   1a070:	fa03 f000 	lsl.w	r0, r3, r0
   1a074:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
   1a078:	e7e8      	b.n	1a04c <style_prop_is_cacheble+0x2c>
   1a07a:	2817      	cmp	r0, #23
   1a07c:	d8dc      	bhi.n	1a038 <style_prop_is_cacheble+0x18>
   1a07e:	a301      	add	r3, pc, #4	; (adr r3, 1a084 <style_prop_is_cacheble+0x64>)
   1a080:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1a084:	0001a12f 	.word	0x0001a12f
   1a088:	0001a12f 	.word	0x0001a12f
   1a08c:	0001a039 	.word	0x0001a039
   1a090:	0001a12f 	.word	0x0001a12f
   1a094:	0001a12f 	.word	0x0001a12f
   1a098:	0001a12f 	.word	0x0001a12f
   1a09c:	0001a12f 	.word	0x0001a12f
   1a0a0:	0001a039 	.word	0x0001a039
   1a0a4:	0001a039 	.word	0x0001a039
   1a0a8:	0001a039 	.word	0x0001a039
   1a0ac:	0001a039 	.word	0x0001a039
   1a0b0:	0001a039 	.word	0x0001a039
   1a0b4:	0001a039 	.word	0x0001a039
   1a0b8:	0001a039 	.word	0x0001a039
   1a0bc:	0001a039 	.word	0x0001a039
   1a0c0:	0001a12f 	.word	0x0001a12f
   1a0c4:	0001a12f 	.word	0x0001a12f
   1a0c8:	0001a12f 	.word	0x0001a12f
   1a0cc:	0001a12f 	.word	0x0001a12f
   1a0d0:	0001a039 	.word	0x0001a039
   1a0d4:	0001a12f 	.word	0x0001a12f
   1a0d8:	0001a12f 	.word	0x0001a12f
   1a0dc:	0001a12f 	.word	0x0001a12f
   1a0e0:	0001a12f 	.word	0x0001a12f
    switch(prop) {
   1a0e4:	3840      	subs	r0, #64	; 0x40
   1a0e6:	b280      	uxth	r0, r0
   1a0e8:	2810      	cmp	r0, #16
   1a0ea:	d8a5      	bhi.n	1a038 <style_prop_is_cacheble+0x18>
   1a0ec:	2301      	movs	r3, #1
   1a0ee:	4083      	lsls	r3, r0
   1a0f0:	4811      	ldr	r0, [pc, #68]	; (1a138 <style_prop_is_cacheble+0x118>)
   1a0f2:	e7b5      	b.n	1a060 <style_prop_is_cacheble+0x40>
   1a0f4:	f248 038e 	movw	r3, #32910	; 0x808e
   1a0f8:	4298      	cmp	r0, r3
   1a0fa:	d811      	bhi.n	1a120 <style_prop_is_cacheble+0x100>
   1a0fc:	f248 037f 	movw	r3, #32895	; 0x807f
   1a100:	4298      	cmp	r0, r3
   1a102:	d89b      	bhi.n	1a03c <style_prop_is_cacheble+0x1c>
   1a104:	28ff      	cmp	r0, #255	; 0xff
   1a106:	d012      	beq.n	1a12e <style_prop_is_cacheble+0x10e>
   1a108:	d806      	bhi.n	1a118 <style_prop_is_cacheble+0xf8>
   1a10a:	287f      	cmp	r0, #127	; 0x7f
   1a10c:	d00f      	beq.n	1a12e <style_prop_is_cacheble+0x10e>
            return true;
   1a10e:	2891      	cmp	r0, #145	; 0x91
   1a110:	bf14      	ite	ne
   1a112:	2000      	movne	r0, #0
   1a114:	2001      	moveq	r0, #1
   1a116:	4770      	bx	lr
   1a118:	f248 030c 	movw	r3, #32780	; 0x800c
   1a11c:	4298      	cmp	r0, r3
   1a11e:	e7f7      	b.n	1a110 <style_prop_is_cacheble+0xf0>
    switch(prop) {
   1a120:	f248 03a0 	movw	r3, #32928	; 0x80a0
   1a124:	4298      	cmp	r0, r3
   1a126:	d002      	beq.n	1a12e <style_prop_is_cacheble+0x10e>
            return true;
   1a128:	f248 03ad 	movw	r3, #32941	; 0x80ad
   1a12c:	e7f6      	b.n	1a11c <style_prop_is_cacheble+0xfc>
   1a12e:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
   1a130:	4770      	bx	lr
   1a132:	bf00      	nop
   1a134:	44001001 	.word	0x44001001
   1a138:	00010005 	.word	0x00010005

0001a13c <lv_init>:
{
   1a13c:	b530      	push	{r4, r5, lr}
    if(lv_initialized) {
   1a13e:	4c1e      	ldr	r4, [pc, #120]	; (1a1b8 <lv_init+0x7c>)
   1a140:	7825      	ldrb	r5, [r4, #0]
{
   1a142:	b085      	sub	sp, #20
    if(lv_initialized) {
   1a144:	b14d      	cbz	r5, 1a15a <lv_init+0x1e>
        LV_LOG_WARN("lv_init: already inited");
   1a146:	4b1d      	ldr	r3, [pc, #116]	; (1a1bc <lv_init+0x80>)
   1a148:	9300      	str	r3, [sp, #0]
   1a14a:	491d      	ldr	r1, [pc, #116]	; (1a1c0 <lv_init+0x84>)
   1a14c:	4b1d      	ldr	r3, [pc, #116]	; (1a1c4 <lv_init+0x88>)
   1a14e:	22aa      	movs	r2, #170	; 0xaa
   1a150:	2002      	movs	r0, #2
    LV_LOG_INFO("lv_init ready");
   1a152:	f003 fa01 	bl	1d558 <_lv_log_add>
}
   1a156:	b005      	add	sp, #20
   1a158:	bd30      	pop	{r4, r5, pc}
    _lv_mem_init();
   1a15a:	f010 fae7 	bl	2a72c <_lv_mem_init>
    _lv_task_core_init();
   1a15e:	f003 fb63 	bl	1d828 <_lv_task_core_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
   1a162:	4819      	ldr	r0, [pc, #100]	; (1a1c8 <lv_init+0x8c>)
   1a164:	2110      	movs	r1, #16
   1a166:	f010 f9eb 	bl	2a540 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
   1a16a:	4818      	ldr	r0, [pc, #96]	; (1a1cc <lv_init+0x90>)
   1a16c:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1a170:	f010 f9e6 	bl	2a540 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
   1a174:	4816      	ldr	r0, [pc, #88]	; (1a1d0 <lv_init+0x94>)
   1a176:	2164      	movs	r1, #100	; 0x64
   1a178:	f010 f9e2 	bl	2a540 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
   1a17c:	4b15      	ldr	r3, [pc, #84]	; (1a1d4 <lv_init+0x98>)
   1a17e:	4816      	ldr	r0, [pc, #88]	; (1a1d8 <lv_init+0x9c>)
   1a180:	9300      	str	r3, [sp, #0]
   1a182:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a186:	462a      	mov	r2, r5
   1a188:	4629      	mov	r1, r5
   1a18a:	8800      	ldrh	r0, [r0, #0]
   1a18c:	f004 f86e 	bl	1e26c <lv_theme_mono_init>
    lv_theme_set_act(th);
   1a190:	f004 f810 	bl	1e1b4 <lv_theme_set_act>
    _lv_refr_init();
   1a194:	f00d f922 	bl	273dc <_lv_refr_init>
    _lv_indev_init();
   1a198:	f00c f803 	bl	261a2 <_lv_indev_init>
    _lv_img_decoder_init();
   1a19c:	f003 f8da 	bl	1d354 <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
   1a1a0:	2001      	movs	r0, #1
   1a1a2:	f002 fddf 	bl	1cd64 <lv_img_cache_set_size>
    LV_LOG_INFO("lv_init ready");
   1a1a6:	4b0d      	ldr	r3, [pc, #52]	; (1a1dc <lv_init+0xa0>)
   1a1a8:	9300      	str	r3, [sp, #0]
    lv_initialized = true;
   1a1aa:	2001      	movs	r0, #1
    LV_LOG_INFO("lv_init ready");
   1a1ac:	4b05      	ldr	r3, [pc, #20]	; (1a1c4 <lv_init+0x88>)
   1a1ae:	4904      	ldr	r1, [pc, #16]	; (1a1c0 <lv_init+0x84>)
    lv_initialized = true;
   1a1b0:	7020      	strb	r0, [r4, #0]
    LV_LOG_INFO("lv_init ready");
   1a1b2:	22e1      	movs	r2, #225	; 0xe1
   1a1b4:	e7cd      	b.n	1a152 <lv_init+0x16>
   1a1b6:	bf00      	nop
   1a1b8:	20008631 	.word	0x20008631
   1a1bc:	0002fcae 	.word	0x0002fcae
   1a1c0:	0002fc78 	.word	0x0002fc78
   1a1c4:	0002fd97 	.word	0x0002fd97
   1a1c8:	20003ffc 	.word	0x20003ffc
   1a1cc:	20003ed0 	.word	0x20003ed0
   1a1d0:	20003f70 	.word	0x20003f70
   1a1d4:	20000820 	.word	0x20000820
   1a1d8:	0002c158 	.word	0x0002c158
   1a1dc:	0002fcc6 	.word	0x0002fcc6

0001a1e0 <lv_event_send_func>:
{
   1a1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1a1e4:	4f1e      	ldr	r7, [pc, #120]	; (1a260 <lv_event_send_func+0x80>)
    const void * event_act_data_save = event_act_data;
   1a1e6:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1a264 <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
   1a1ea:	9101      	str	r1, [sp, #4]
{
   1a1ec:	461e      	mov	r6, r3
    event_temp_data.deleted = false;
   1a1ee:	2300      	movs	r3, #0
   1a1f0:	f88d 3008 	strb.w	r3, [sp, #8]
        event_temp_data.prev = event_temp_data_head;
   1a1f4:	683b      	ldr	r3, [r7, #0]
   1a1f6:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
   1a1f8:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
   1a1fa:	f8da 9000 	ldr.w	r9, [sl]
    event_temp_data_head = &event_temp_data;
   1a1fe:	603b      	str	r3, [r7, #0]
{
   1a200:	4680      	mov	r8, r0
   1a202:	460c      	mov	r4, r1
   1a204:	4615      	mov	r5, r2
    event_act_data                   = data;
   1a206:	f8ca 6000 	str.w	r6, [sl]
    lv_indev_t * indev_act = lv_indev_get_act();
   1a20a:	f7ff fee5 	bl	19fd8 <lv_indev_get_act>
    if(indev_act) {
   1a20e:	b118      	cbz	r0, 1a218 <lv_event_send_func+0x38>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
   1a210:	6883      	ldr	r3, [r0, #8]
   1a212:	b10b      	cbz	r3, 1a218 <lv_event_send_func+0x38>
   1a214:	4629      	mov	r1, r5
   1a216:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
   1a218:	f1b8 0f00 	cmp.w	r8, #0
   1a21c:	d002      	beq.n	1a224 <lv_event_send_func+0x44>
   1a21e:	4629      	mov	r1, r5
   1a220:	4620      	mov	r0, r4
   1a222:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
   1a224:	683b      	ldr	r3, [r7, #0]
    event_act_data = event_act_data_save;
   1a226:	f8ca 9000 	str.w	r9, [sl]
    event_temp_data_head = event_temp_data_head->prev;
   1a22a:	689b      	ldr	r3, [r3, #8]
   1a22c:	603b      	str	r3, [r7, #0]
    if(event_temp_data.deleted) {
   1a22e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1a232:	b983      	cbnz	r3, 1a256 <lv_event_send_func+0x76>
    if(obj) {
   1a234:	b18c      	cbz	r4, 1a25a <lv_event_send_func+0x7a>
        if(obj->parent_event && obj->parent) {
   1a236:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1a23a:	065a      	lsls	r2, r3, #25
   1a23c:	d50d      	bpl.n	1a25a <lv_event_send_func+0x7a>
   1a23e:	6820      	ldr	r0, [r4, #0]
   1a240:	b158      	cbz	r0, 1a25a <lv_event_send_func+0x7a>
            lv_res_t res = lv_event_send(obj->parent, event, data);
   1a242:	4632      	mov	r2, r6
   1a244:	4629      	mov	r1, r5
   1a246:	f00b ffdf 	bl	26208 <lv_event_send>
        return LV_RES_INV;
   1a24a:	1e43      	subs	r3, r0, #1
   1a24c:	4258      	negs	r0, r3
   1a24e:	4158      	adcs	r0, r3
}
   1a250:	b004      	add	sp, #16
   1a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
   1a256:	2000      	movs	r0, #0
   1a258:	e7fa      	b.n	1a250 <lv_event_send_func+0x70>
    return LV_RES_OK;
   1a25a:	2001      	movs	r0, #1
   1a25c:	e7f8      	b.n	1a250 <lv_event_send_func+0x70>
   1a25e:	bf00      	nop
   1a260:	20003eb8 	.word	0x20003eb8
   1a264:	20003eb4 	.word	0x20003eb4

0001a268 <lv_obj_get_disp>:
    if(obj->parent == NULL)
   1a268:	6803      	ldr	r3, [r0, #0]
{
   1a26a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a26c:	4605      	mov	r5, r0
    if(obj->parent == NULL)
   1a26e:	b123      	cbz	r3, 1a27a <lv_obj_get_disp+0x12>
    return obj->parent;
   1a270:	462b      	mov	r3, r5
   1a272:	682d      	ldr	r5, [r5, #0]
    } while(par != NULL);
   1a274:	2d00      	cmp	r5, #0
   1a276:	d1fb      	bne.n	1a270 <lv_obj_get_disp+0x8>
   1a278:	461d      	mov	r5, r3
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
   1a27a:	4812      	ldr	r0, [pc, #72]	; (1a2c4 <lv_obj_get_disp+0x5c>)
   1a27c:	4f11      	ldr	r7, [pc, #68]	; (1a2c4 <lv_obj_get_disp+0x5c>)
   1a27e:	f010 f99e 	bl	2a5be <_lv_ll_get_head>
   1a282:	4604      	mov	r4, r0
   1a284:	b95c      	cbnz	r4, 1a29e <lv_obj_get_disp+0x36>
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
   1a286:	4b10      	ldr	r3, [pc, #64]	; (1a2c8 <lv_obj_get_disp+0x60>)
   1a288:	9300      	str	r3, [sp, #0]
   1a28a:	4910      	ldr	r1, [pc, #64]	; (1a2cc <lv_obj_get_disp+0x64>)
   1a28c:	4b10      	ldr	r3, [pc, #64]	; (1a2d0 <lv_obj_get_disp+0x68>)
   1a28e:	f640 0254 	movw	r2, #2132	; 0x854
   1a292:	2002      	movs	r0, #2
   1a294:	f003 f960 	bl	1d558 <_lv_log_add>
}
   1a298:	4620      	mov	r0, r4
   1a29a:	b003      	add	sp, #12
   1a29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
   1a29e:	f104 0634 	add.w	r6, r4, #52	; 0x34
   1a2a2:	4630      	mov	r0, r6
   1a2a4:	f010 f98b 	bl	2a5be <_lv_ll_get_head>
   1a2a8:	4601      	mov	r1, r0
   1a2aa:	b928      	cbnz	r0, 1a2b8 <lv_obj_get_disp+0x50>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
   1a2ac:	4621      	mov	r1, r4
   1a2ae:	4638      	mov	r0, r7
   1a2b0:	f010 f98b 	bl	2a5ca <_lv_ll_get_next>
   1a2b4:	4604      	mov	r4, r0
   1a2b6:	e7e5      	b.n	1a284 <lv_obj_get_disp+0x1c>
            if(s == scr) return d;
   1a2b8:	428d      	cmp	r5, r1
   1a2ba:	d0ed      	beq.n	1a298 <lv_obj_get_disp+0x30>
        _LV_LL_READ(d->scr_ll, s) {
   1a2bc:	4630      	mov	r0, r6
   1a2be:	f010 f984 	bl	2a5ca <_lv_ll_get_next>
   1a2c2:	e7f1      	b.n	1a2a8 <lv_obj_get_disp+0x40>
   1a2c4:	20003ed0 	.word	0x20003ed0
   1a2c8:	0002fcd4 	.word	0x0002fcd4
   1a2cc:	0002fc78 	.word	0x0002fc78
   1a2d0:	0002fdc5 	.word	0x0002fdc5

0001a2d4 <obj_del_core>:
{
   1a2d4:	b570      	push	{r4, r5, r6, lr}
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
   1a2d6:	2200      	movs	r2, #0
   1a2d8:	2115      	movs	r1, #21
{
   1a2da:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
   1a2dc:	f00b ff94 	bl	26208 <lv_event_send>
    i = _lv_ll_get_head(&(obj->child_ll));
   1a2e0:	1d25      	adds	r5, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
   1a2e2:	4628      	mov	r0, r5
   1a2e4:	f010 f96b 	bl	2a5be <_lv_ll_get_head>
    while(i != NULL) {
   1a2e8:	b9f8      	cbnz	r0, 1a32a <obj_del_core+0x56>
    lv_event_temp_data_t * t = event_temp_data_head;
   1a2ea:	4b1e      	ldr	r3, [pc, #120]	; (1a364 <obj_del_core+0x90>)
   1a2ec:	681e      	ldr	r6, [r3, #0]
        if(t->obj == obj) t->deleted = true;
   1a2ee:	2301      	movs	r3, #1
    while(t) {
   1a2f0:	b9f6      	cbnz	r6, 1a330 <obj_del_core+0x5c>
    lv_indev_t * indev = lv_indev_get_next(NULL);
   1a2f2:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
   1a2f4:	f003 f914 	bl	1d520 <lv_indev_get_next>
   1a2f8:	4605      	mov	r5, r0
    while(indev) {
   1a2fa:	b9f8      	cbnz	r0, 1a33c <obj_del_core+0x68>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
   1a2fc:	4602      	mov	r2, r0
   1a2fe:	4601      	mov	r1, r0
   1a300:	69e3      	ldr	r3, [r4, #28]
   1a302:	4620      	mov	r0, r4
   1a304:	4798      	blx	r3
    return obj->parent;
   1a306:	6820      	ldr	r0, [r4, #0]
    if(par == NULL) { /*It is a screen*/
   1a308:	bb40      	cbnz	r0, 1a35c <obj_del_core+0x88>
        lv_disp_t * d = lv_obj_get_disp(obj);
   1a30a:	4620      	mov	r0, r4
   1a30c:	f7ff ffac 	bl	1a268 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
   1a310:	4621      	mov	r1, r4
   1a312:	3034      	adds	r0, #52	; 0x34
        _lv_ll_remove(&(par->child_ll), obj);
   1a314:	f010 f994 	bl	2a640 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
   1a318:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a31a:	b108      	cbz	r0, 1a320 <obj_del_core+0x4c>
   1a31c:	f003 f96c 	bl	1d5f8 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
   1a320:	4620      	mov	r0, r4
}
   1a322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(obj); /*Free the object itself*/
   1a326:	f003 b967 	b.w	1d5f8 <lv_mem_free>
        obj_del_core(i);
   1a32a:	f7ff ffd3 	bl	1a2d4 <obj_del_core>
   1a32e:	e7d8      	b.n	1a2e2 <obj_del_core+0xe>
        if(t->obj == obj) t->deleted = true;
   1a330:	6832      	ldr	r2, [r6, #0]
   1a332:	4294      	cmp	r4, r2
   1a334:	bf08      	it	eq
   1a336:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
   1a338:	68b6      	ldr	r6, [r6, #8]
   1a33a:	e7d9      	b.n	1a2f0 <obj_del_core+0x1c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
   1a33c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a33e:	42a3      	cmp	r3, r4
   1a340:	d002      	beq.n	1a348 <obj_del_core+0x74>
   1a342:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1a344:	42a3      	cmp	r3, r4
   1a346:	d103      	bne.n	1a350 <obj_del_core+0x7c>
            lv_indev_reset(indev, obj);
   1a348:	4621      	mov	r1, r4
   1a34a:	4628      	mov	r0, r5
   1a34c:	f7ff fe4a 	bl	19fe4 <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
   1a350:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1a352:	42a3      	cmp	r3, r4
            indev->proc.types.pointer.last_pressed = NULL;
   1a354:	bf08      	it	eq
   1a356:	642e      	streq	r6, [r5, #64]	; 0x40
        indev = lv_indev_get_next(indev);
   1a358:	4628      	mov	r0, r5
   1a35a:	e7cb      	b.n	1a2f4 <obj_del_core+0x20>
        _lv_ll_remove(&(par->child_ll), obj);
   1a35c:	4621      	mov	r1, r4
   1a35e:	3004      	adds	r0, #4
   1a360:	e7d8      	b.n	1a314 <obj_del_core+0x40>
   1a362:	bf00      	nop
   1a364:	20003eb8 	.word	0x20003eb8

0001a368 <lv_obj_create>:
{
   1a368:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a36c:	460d      	mov	r5, r1
    if(parent == NULL) {
   1a36e:	4606      	mov	r6, r0
   1a370:	2800      	cmp	r0, #0
   1a372:	d160      	bne.n	1a436 <lv_obj_create+0xce>
        lv_disp_t * disp = lv_disp_get_default();
   1a374:	f003 f81a 	bl	1d3ac <lv_disp_get_default>
        if(!disp) {
   1a378:	4604      	mov	r4, r0
   1a37a:	b948      	cbnz	r0, 1a390 <lv_obj_create+0x28>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
   1a37c:	4bac      	ldr	r3, [pc, #688]	; (1a630 <lv_obj_create+0x2c8>)
   1a37e:	9300      	str	r3, [sp, #0]
   1a380:	49ac      	ldr	r1, [pc, #688]	; (1a634 <lv_obj_create+0x2cc>)
   1a382:	4bad      	ldr	r3, [pc, #692]	; (1a638 <lv_obj_create+0x2d0>)
   1a384:	f44f 7287 	mov.w	r2, #270	; 0x10e
   1a388:	2002      	movs	r0, #2
    LV_LOG_INFO("Object create ready");
   1a38a:	f003 f8e5 	bl	1d558 <_lv_log_add>
    return new_obj;
   1a38e:	e005      	b.n	1a39c <lv_obj_create+0x34>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
   1a390:	3034      	adds	r0, #52	; 0x34
   1a392:	f010 f8dd 	bl	2a550 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   1a396:	4604      	mov	r4, r0
   1a398:	b920      	cbnz	r0, 1a3a4 <lv_obj_create+0x3c>
   1a39a:	2400      	movs	r4, #0
}
   1a39c:	4620      	mov	r0, r4
   1a39e:	b002      	add	sp, #8
   1a3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
   1a3a4:	213c      	movs	r1, #60	; 0x3c
   1a3a6:	f00b ff1f 	bl	261e8 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a3aa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->event_cb = NULL;
   1a3ae:	61a6      	str	r6, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a3b0:	f366 1346 	bfi	r3, r6, #5, #2
   1a3b4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
   1a3b8:	4ba0      	ldr	r3, [pc, #640]	; (1a63c <lv_obj_create+0x2d4>)
   1a3ba:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   1a3bc:	4ba0      	ldr	r3, [pc, #640]	; (1a640 <lv_obj_create+0x2d8>)
   1a3be:	6223      	str	r3, [r4, #32]
        new_obj->coords.x1    = 0;
   1a3c0:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
   1a3c2:	4630      	mov	r0, r6
   1a3c4:	f002 fff8 	bl	1d3b8 <lv_disp_get_hor_res>
   1a3c8:	3801      	subs	r0, #1
   1a3ca:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
   1a3cc:	4630      	mov	r0, r6
   1a3ce:	f003 f803 	bl	1d3d8 <lv_disp_get_ver_res>
   1a3d2:	3801      	subs	r0, #1
   1a3d4:	82e0      	strh	r0, [r4, #22]
    new_obj->ext_draw_pad = 0;
   1a3d6:	2700      	movs	r7, #0
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   1a3d8:	213c      	movs	r1, #60	; 0x3c
   1a3da:	1d20      	adds	r0, r4, #4
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
   1a3dc:	f104 0838 	add.w	r8, r4, #56	; 0x38
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   1a3e0:	f010 f8ae 	bl	2a540 <_lv_ll_init>
    new_obj->ext_draw_pad = 0;
   1a3e4:	8627      	strh	r7, [r4, #48]	; 0x30
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
   1a3e6:	4640      	mov	r0, r8
   1a3e8:	2104      	movs	r1, #4
   1a3ea:	f00b fefd 	bl	261e8 <_lv_memset_00>
    new_obj->gesture_parent = parent ? 1 : 0;
   1a3ee:	1bf2      	subs	r2, r6, r7
   1a3f0:	bf18      	it	ne
   1a3f2:	2201      	movne	r2, #1
    new_obj->click        = 1;
   1a3f4:	f640 4301 	movw	r3, #3073	; 0xc01
   1a3f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a3fc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    new_obj->protect      = LV_PROTECT_NONE;
   1a3fe:	86a7      	strh	r7, [r4, #52]	; 0x34
    new_obj->click        = 1;
   1a400:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
   1a404:	4313      	orrs	r3, r2
    new_obj->ext_attr = NULL;
   1a406:	6267      	str	r7, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
   1a408:	f104 0728 	add.w	r7, r4, #40	; 0x28
    new_obj->click        = 1;
   1a40c:	8663      	strh	r3, [r4, #50]	; 0x32
    lv_style_list_init(&new_obj->style_list);
   1a40e:	4638      	mov	r0, r7
   1a410:	f00d f8c1 	bl	27596 <lv_style_list_init>
    if(copy == NULL) {
   1a414:	2d00      	cmp	r5, #0
   1a416:	d16d      	bne.n	1a4f4 <lv_obj_create+0x18c>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
   1a418:	2e00      	cmp	r6, #0
   1a41a:	d05f      	beq.n	1a4dc <lv_obj_create+0x174>
   1a41c:	2102      	movs	r1, #2
   1a41e:	4620      	mov	r0, r4
   1a420:	f003 fece 	bl	1e1c0 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
   1a424:	69f3      	ldr	r3, [r6, #28]
   1a426:	4622      	mov	r2, r4
   1a428:	2101      	movs	r1, #1
   1a42a:	4630      	mov	r0, r6
   1a42c:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
   1a42e:	4620      	mov	r0, r4
   1a430:	f00b ff7b 	bl	2632a <lv_obj_invalidate>
   1a434:	e056      	b.n	1a4e4 <lv_obj_create+0x17c>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
   1a436:	3004      	adds	r0, #4
   1a438:	f010 f88a 	bl	2a550 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   1a43c:	4604      	mov	r4, r0
   1a43e:	2800      	cmp	r0, #0
   1a440:	d0ab      	beq.n	1a39a <lv_obj_create+0x32>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
   1a442:	213c      	movs	r1, #60	; 0x3c
   1a444:	f00b fed0 	bl	261e8 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a448:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->parent = parent;
   1a44c:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a44e:	f36f 1346 	bfc	r3, #5, #2
   1a452:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
   1a456:	4b79      	ldr	r3, [pc, #484]	; (1a63c <lv_obj_create+0x2d4>)
   1a458:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   1a45a:	4b79      	ldr	r3, [pc, #484]	; (1a640 <lv_obj_create+0x2d8>)
   1a45c:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   1a45e:	f04f 0900 	mov.w	r9, #0
        new_obj->coords.y1    = parent->coords.y1;
   1a462:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
   1a466:	8263      	strh	r3, [r4, #18]
        new_obj->event_cb = NULL;
   1a468:	f8c4 9018 	str.w	r9, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   1a46c:	4648      	mov	r0, r9
   1a46e:	f9b6 8012 	ldrsh.w	r8, [r6, #18]
   1a472:	f002 ffc1 	bl	1d3f8 <lv_disp_get_dpi>
   1a476:	2732      	movs	r7, #50	; 0x32
   1a478:	f04f 0a50 	mov.w	sl, #80	; 0x50
   1a47c:	fb00 a007 	mla	r0, r0, r7, sl
   1a480:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1a484:	db26      	blt.n	1a4d4 <lv_obj_create+0x16c>
   1a486:	4648      	mov	r0, r9
   1a488:	f002 ffb6 	bl	1d3f8 <lv_disp_get_dpi>
   1a48c:	fb00 a707 	mla	r7, r0, r7, sl
   1a490:	20a0      	movs	r0, #160	; 0xa0
   1a492:	fb97 f7f0 	sdiv	r7, r7, r0
   1a496:	b23f      	sxth	r7, r7
   1a498:	4447      	add	r7, r8
            new_obj->coords.x1    = parent->coords.x1;
   1a49a:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   1a49e:	82e7      	strh	r7, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
   1a4a0:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   1a4a2:	2000      	movs	r0, #0
   1a4a4:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   1a4a8:	f002 ffa6 	bl	1d3f8 <lv_disp_get_dpi>
   1a4ac:	2764      	movs	r7, #100	; 0x64
   1a4ae:	f04f 0950 	mov.w	r9, #80	; 0x50
   1a4b2:	fb00 9007 	mla	r0, r0, r7, r9
   1a4b6:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1a4ba:	db0d      	blt.n	1a4d8 <lv_obj_create+0x170>
   1a4bc:	2000      	movs	r0, #0
   1a4be:	f002 ff9b 	bl	1d3f8 <lv_disp_get_dpi>
   1a4c2:	fb00 9707 	mla	r7, r0, r7, r9
   1a4c6:	20a0      	movs	r0, #160	; 0xa0
   1a4c8:	fb97 f7f0 	sdiv	r7, r7, r0
   1a4cc:	b23f      	sxth	r7, r7
   1a4ce:	4447      	add	r7, r8
   1a4d0:	82a7      	strh	r7, [r4, #20]
   1a4d2:	e780      	b.n	1a3d6 <lv_obj_create+0x6e>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   1a4d4:	2701      	movs	r7, #1
   1a4d6:	e7df      	b.n	1a498 <lv_obj_create+0x130>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   1a4d8:	2701      	movs	r7, #1
   1a4da:	e7f8      	b.n	1a4ce <lv_obj_create+0x166>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
   1a4dc:	2101      	movs	r1, #1
   1a4de:	4620      	mov	r0, r4
   1a4e0:	f003 fe6e 	bl	1e1c0 <lv_theme_apply>
    LV_LOG_INFO("Object create ready");
   1a4e4:	4b57      	ldr	r3, [pc, #348]	; (1a644 <lv_obj_create+0x2dc>)
   1a4e6:	9300      	str	r3, [sp, #0]
   1a4e8:	4952      	ldr	r1, [pc, #328]	; (1a634 <lv_obj_create+0x2cc>)
   1a4ea:	4b53      	ldr	r3, [pc, #332]	; (1a638 <lv_obj_create+0x2d0>)
   1a4ec:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
   1a4f0:	2001      	movs	r0, #1
   1a4f2:	e74a      	b.n	1a38a <lv_obj_create+0x22>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
   1a4f4:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a4f8:	4638      	mov	r0, r7
   1a4fa:	f00d f9e6 	bl	278ca <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
   1a4fe:	f105 0110 	add.w	r1, r5, #16
   1a502:	f104 0010 	add.w	r0, r4, #16
   1a506:	f00b fe75 	bl	261f4 <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
   1a50a:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
   1a50e:	8623      	strh	r3, [r4, #48]	; 0x30
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
   1a510:	2204      	movs	r2, #4
   1a512:	f105 0138 	add.w	r1, r5, #56	; 0x38
   1a516:	4640      	mov	r0, r8
   1a518:	f00b fe6a 	bl	261f0 <_lv_memcpy>
        new_obj->base_dir = copy->base_dir;
   1a51c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a520:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1a524:	f3c3 1341 	ubfx	r3, r3, #5, #2
   1a528:	f363 1246 	bfi	r2, r3, #5, #2
   1a52c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->event_cb = copy->event_cb;
   1a530:	69ab      	ldr	r3, [r5, #24]
   1a532:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
   1a534:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a538:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1a53c:	09db      	lsrs	r3, r3, #7
   1a53e:	f363 12c7 	bfi	r2, r3, #7, #1
   1a542:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->click        = copy->click;
   1a546:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   1a54a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1a54e:	f362 0300 	bfi	r3, r2, #0, #1
   1a552:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->drag         = copy->drag;
   1a556:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a55a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1a55e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a562:	f363 0241 	bfi	r2, r3, #1, #1
   1a566:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_dir     = copy->drag_dir;
   1a56a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a56e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1a572:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1a576:	f363 0284 	bfi	r2, r3, #2, #3
   1a57a:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->drag_throw   = copy->drag_throw;
   1a57e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a582:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1a586:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1a58a:	f363 0282 	bfi	r2, r3, #2, #1
   1a58e:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_parent  = copy->drag_parent;
   1a592:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a596:	b2d2      	uxtb	r2, r2
   1a598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1a59c:	f363 02c3 	bfi	r2, r3, #3, #1
   1a5a0:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->hidden       = copy->hidden;
   1a5a4:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a5a8:	b2d2      	uxtb	r2, r2
   1a5aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1a5ae:	f363 1204 	bfi	r2, r3, #4, #1
   1a5b2:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->top          = copy->top;
   1a5b6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a5ba:	b2d2      	uxtb	r2, r2
   1a5bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
   1a5c0:	f363 1245 	bfi	r2, r3, #5, #1
   1a5c4:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->parent_event = copy->parent_event;
   1a5c8:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a5cc:	b2d2      	uxtb	r2, r2
   1a5ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a5d2:	f363 1286 	bfi	r2, r3, #6, #1
   1a5d6:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->protect      = copy->protect;
   1a5da:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   1a5de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->gesture_parent = copy->gesture_parent;
   1a5e2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   1a5e6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1a5ea:	f362 0300 	bfi	r3, r2, #0, #1
   1a5ee:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->focus_parent = copy->focus_parent;
   1a5f2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a5f6:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1a5fa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a5fe:	f363 0241 	bfi	r2, r3, #1, #1
   1a602:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
   1a606:	682b      	ldr	r3, [r5, #0]
   1a608:	b173      	cbz	r3, 1a628 <lv_obj_create+0x2c0>
   1a60a:	2e00      	cmp	r6, #0
   1a60c:	f43f af6a 	beq.w	1a4e4 <lv_obj_create+0x17c>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
   1a610:	4628      	mov	r0, r5
   1a612:	f00b ffa3 	bl	2655c <lv_obj_get_x>
   1a616:	4601      	mov	r1, r0
   1a618:	4628      	mov	r0, r5
   1a61a:	f00b ffa7 	bl	2656c <lv_obj_get_y>
   1a61e:	4602      	mov	r2, r0
   1a620:	4620      	mov	r0, r4
   1a622:	f00b fea5 	bl	26370 <lv_obj_set_pos>
    if(parent != NULL) {
   1a626:	e6fd      	b.n	1a424 <lv_obj_create+0xbc>
   1a628:	2e00      	cmp	r6, #0
   1a62a:	f47f aefb 	bne.w	1a424 <lv_obj_create+0xbc>
   1a62e:	e759      	b.n	1a4e4 <lv_obj_create+0x17c>
   1a630:	0002fcf6 	.word	0x0002fcf6
   1a634:	0002fc78 	.word	0x0002fc78
   1a638:	0002fd9f 	.word	0x0002fd9f
   1a63c:	0001ad11 	.word	0x0001ad11
   1a640:	0002696b 	.word	0x0002696b
   1a644:	0002fd46 	.word	0x0002fd46

0001a648 <lv_obj_clean_style_list>:
{
   1a648:	b507      	push	{r0, r1, r2, lr}
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
   1a64a:	f00b ff97 	bl	2657c <lv_obj_get_style_list>
    if(style_dsc == NULL) {
   1a64e:	b958      	cbnz	r0, 1a668 <lv_obj_clean_style_list+0x20>
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
   1a650:	4b08      	ldr	r3, [pc, #32]	; (1a674 <lv_obj_clean_style_list+0x2c>)
   1a652:	9300      	str	r3, [sp, #0]
   1a654:	4908      	ldr	r1, [pc, #32]	; (1a678 <lv_obj_clean_style_list+0x30>)
   1a656:	4b09      	ldr	r3, [pc, #36]	; (1a67c <lv_obj_clean_style_list+0x34>)
   1a658:	f240 42d5 	movw	r2, #1237	; 0x4d5
   1a65c:	2002      	movs	r0, #2
   1a65e:	f002 ff7b 	bl	1d558 <_lv_log_add>
}
   1a662:	b003      	add	sp, #12
   1a664:	f85d fb04 	ldr.w	pc, [sp], #4
   1a668:	b003      	add	sp, #12
   1a66a:	f85d eb04 	ldr.w	lr, [sp], #4
    _lv_style_list_reset(style_dsc);
   1a66e:	f00d b902 	b.w	27876 <_lv_style_list_reset>
   1a672:	bf00      	nop
   1a674:	0002fd5a 	.word	0x0002fd5a
   1a678:	0002fc78 	.word	0x0002fc78
   1a67c:	0002fdad 	.word	0x0002fdad

0001a680 <_lv_obj_get_style_color>:
{
   1a680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a684:	4605      	mov	r5, r0
   1a686:	460e      	mov	r6, r1
   1a688:	4617      	mov	r7, r2
    while(parent) {
   1a68a:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1a68c:	f342 2907 	sbfx	r9, r2, #8, #8
    while(parent) {
   1a690:	b945      	cbnz	r5, 1a6a4 <_lv_obj_get_style_color+0x24>
    prop = prop & (~LV_STYLE_STATE_MASK);
   1a692:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   1a696:	3c29      	subs	r4, #41	; 0x29
   1a698:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
   1a69a:	bf96      	itet	ls
   1a69c:	4b11      	ldrls	r3, [pc, #68]	; (1a6e4 <_lv_obj_get_style_color+0x64>)
   1a69e:	2000      	movhi	r0, #0
   1a6a0:	8818      	ldrhls	r0, [r3, #0]
    return LV_COLOR_BLACK;
   1a6a2:	e014      	b.n	1a6ce <_lv_obj_get_style_color+0x4e>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a6a4:	4631      	mov	r1, r6
   1a6a6:	4628      	mov	r0, r5
   1a6a8:	f00b ff68 	bl	2657c <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
   1a6ac:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a6ae:	4680      	mov	r8, r0
        lv_state_t state = lv_obj_get_state(parent, part);
   1a6b0:	4628      	mov	r0, r5
   1a6b2:	f00b ff94 	bl	265de <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   1a6b6:	eb07 2400 	add.w	r4, r7, r0, lsl #8
   1a6ba:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
   1a6bc:	aa01      	add	r2, sp, #4
   1a6be:	4621      	mov	r1, r4
   1a6c0:	4640      	mov	r0, r8
   1a6c2:	f00d f9b4 	bl	27a2e <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
   1a6c6:	2801      	cmp	r0, #1
   1a6c8:	d104      	bne.n	1a6d4 <_lv_obj_get_style_color+0x54>
   1a6ca:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   1a6ce:	b003      	add	sp, #12
   1a6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1a6d4:	f1b9 0f00 	cmp.w	r9, #0
   1a6d8:	dadb      	bge.n	1a692 <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
   1a6da:	b906      	cbnz	r6, 1a6de <_lv_obj_get_style_color+0x5e>
    return obj->parent;
   1a6dc:	682d      	ldr	r5, [r5, #0]
{
   1a6de:	2600      	movs	r6, #0
   1a6e0:	e7d6      	b.n	1a690 <_lv_obj_get_style_color+0x10>
   1a6e2:	bf00      	nop
   1a6e4:	0002c158 	.word	0x0002c158

0001a6e8 <_lv_obj_get_style_int>:
{
   1a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6ec:	4606      	mov	r6, r0
   1a6ee:	b085      	sub	sp, #20
   1a6f0:	468b      	mov	fp, r1
   1a6f2:	4617      	mov	r7, r2
    attr = prop_ori >> 8;
   1a6f4:	ea4f 2812 	mov.w	r8, r2, lsr #8
    while(parent) {
   1a6f8:	4615      	mov	r5, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a6fa:	f248 0982 	movw	r9, #32898	; 0x8082
   1a6fe:	f248 0a83 	movw	sl, #32899	; 0x8083
    while(parent) {
   1a702:	2e00      	cmp	r6, #0
   1a704:	f000 80ae 	beq.w	1a864 <_lv_obj_get_style_int+0x17c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a708:	4659      	mov	r1, fp
   1a70a:	4630      	mov	r0, r6
   1a70c:	f00b ff36 	bl	2657c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   1a710:	7942      	ldrb	r2, [r0, #5]
   1a712:	0711      	lsls	r1, r2, #28
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a714:	4604      	mov	r4, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   1a716:	d414      	bmi.n	1a742 <_lv_obj_get_style_int+0x5a>
   1a718:	7901      	ldrb	r1, [r0, #4]
   1a71a:	068b      	lsls	r3, r1, #26
   1a71c:	d011      	beq.n	1a742 <_lv_obj_get_style_int+0x5a>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   1a71e:	f012 0f04 	tst.w	r2, #4
   1a722:	f425 42fe 	bic.w	r2, r5, #32512	; 0x7f00
   1a726:	d105      	bne.n	1a734 <_lv_obj_get_style_int+0x4c>
   1a728:	4659      	mov	r1, fp
   1a72a:	4630      	mov	r0, r6
   1a72c:	9201      	str	r2, [sp, #4]
   1a72e:	f000 f8d7 	bl	1a8e0 <update_style_cache>
   1a732:	9a01      	ldr	r2, [sp, #4]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a734:	2a33      	cmp	r2, #51	; 0x33
   1a736:	dc68      	bgt.n	1a80a <_lv_obj_get_style_int+0x122>
   1a738:	2a2f      	cmp	r2, #47	; 0x2f
   1a73a:	dc20      	bgt.n	1a77e <_lv_obj_get_style_int+0x96>
   1a73c:	2a18      	cmp	r2, #24
   1a73e:	dc61      	bgt.n	1a804 <_lv_obj_get_style_int+0x11c>
   1a740:	bb52      	cbnz	r2, 1a798 <_lv_obj_get_style_int+0xb0>
        lv_state_t state = lv_obj_get_state(parent, part);
   1a742:	4659      	mov	r1, fp
   1a744:	4630      	mov	r0, r6
   1a746:	f00b ff4a 	bl	265de <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   1a74a:	eb07 2500 	add.w	r5, r7, r0, lsl #8
   1a74e:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_int(list, prop, &value_act);
   1a750:	f10d 020e 	add.w	r2, sp, #14
   1a754:	4629      	mov	r1, r5
   1a756:	4620      	mov	r0, r4
   1a758:	f00d f927 	bl	279aa <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
   1a75c:	2801      	cmp	r0, #1
   1a75e:	f040 80a6 	bne.w	1a8ae <_lv_obj_get_style_int+0x1c6>
   1a762:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
   1a766:	b005      	add	sp, #20
   1a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a76c:	f1a2 0154 	sub.w	r1, r2, #84	; 0x54
   1a770:	4b5a      	ldr	r3, [pc, #360]	; (1a8dc <_lv_obj_get_style_int+0x1f4>)
   1a772:	2201      	movs	r2, #1
   1a774:	408a      	lsls	r2, r1
   1a776:	421a      	tst	r2, r3
   1a778:	d0e3      	beq.n	1a742 <_lv_obj_get_style_int+0x5a>
                    if(list->blend_mode_all_normal) def = true;
   1a77a:	79a2      	ldrb	r2, [r4, #6]
   1a77c:	e08c      	b.n	1a898 <_lv_obj_get_style_int+0x1b0>
   1a77e:	3a31      	subs	r2, #49	; 0x31
   1a780:	2a02      	cmp	r2, #2
   1a782:	d87d      	bhi.n	1a880 <_lv_obj_get_style_int+0x198>
   1a784:	a301      	add	r3, pc, #4	; (adr r3, 1a78c <_lv_obj_get_style_int+0xa4>)
   1a786:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1a78a:	bf00      	nop
   1a78c:	0001a885 	.word	0x0001a885
   1a790:	0001a77b 	.word	0x0001a77b
   1a794:	0001a889 	.word	0x0001a889
   1a798:	3a01      	subs	r2, #1
   1a79a:	2a17      	cmp	r2, #23
   1a79c:	d8d1      	bhi.n	1a742 <_lv_obj_get_style_int+0x5a>
   1a79e:	a301      	add	r3, pc, #4	; (adr r3, 1a7a4 <_lv_obj_get_style_int+0xbc>)
   1a7a0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1a7a4:	0001a88f 	.word	0x0001a88f
   1a7a8:	0001a853 	.word	0x0001a853
   1a7ac:	0001a743 	.word	0x0001a743
   1a7b0:	0001a85b 	.word	0x0001a85b
   1a7b4:	0001a85b 	.word	0x0001a85b
   1a7b8:	0001a85b 	.word	0x0001a85b
   1a7bc:	0001a85b 	.word	0x0001a85b
   1a7c0:	0001a743 	.word	0x0001a743
   1a7c4:	0001a743 	.word	0x0001a743
   1a7c8:	0001a743 	.word	0x0001a743
   1a7cc:	0001a743 	.word	0x0001a743
   1a7d0:	0001a743 	.word	0x0001a743
   1a7d4:	0001a743 	.word	0x0001a743
   1a7d8:	0001a743 	.word	0x0001a743
   1a7dc:	0001a743 	.word	0x0001a743
   1a7e0:	0001a89f 	.word	0x0001a89f
   1a7e4:	0001a89f 	.word	0x0001a89f
   1a7e8:	0001a89f 	.word	0x0001a89f
   1a7ec:	0001a89f 	.word	0x0001a89f
   1a7f0:	0001a743 	.word	0x0001a743
   1a7f4:	0001a8a3 	.word	0x0001a8a3
   1a7f8:	0001a8a3 	.word	0x0001a8a3
   1a7fc:	0001a8a3 	.word	0x0001a8a3
   1a800:	0001a8a3 	.word	0x0001a8a3
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a804:	2a20      	cmp	r2, #32
   1a806:	d0b8      	beq.n	1a77a <_lv_obj_get_style_int+0x92>
   1a808:	e79b      	b.n	1a742 <_lv_obj_get_style_int+0x5a>
   1a80a:	2a72      	cmp	r2, #114	; 0x72
   1a80c:	dc0b      	bgt.n	1a826 <_lv_obj_get_style_int+0x13e>
   1a80e:	2a53      	cmp	r2, #83	; 0x53
   1a810:	dcac      	bgt.n	1a76c <_lv_obj_get_style_int+0x84>
   1a812:	2a42      	cmp	r2, #66	; 0x42
   1a814:	d0b1      	beq.n	1a77a <_lv_obj_get_style_int+0x92>
   1a816:	2a50      	cmp	r2, #80	; 0x50
   1a818:	d03d      	beq.n	1a896 <_lv_obj_get_style_int+0x1ae>
   1a81a:	2a40      	cmp	r2, #64	; 0x40
   1a81c:	d191      	bne.n	1a742 <_lv_obj_get_style_int+0x5a>
                    if(list->outline_width_zero) def = true;
   1a81e:	79e2      	ldrb	r2, [r4, #7]
                    if(list->pad_all_zero) def = true;
   1a820:	f012 0f01 	tst.w	r2, #1
   1a824:	e00c      	b.n	1a840 <_lv_obj_get_style_int+0x158>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a826:	454a      	cmp	r2, r9
   1a828:	d03f      	beq.n	1a8aa <_lv_obj_get_style_int+0x1c2>
   1a82a:	dc0c      	bgt.n	1a846 <_lv_obj_get_style_int+0x15e>
   1a82c:	2a91      	cmp	r2, #145	; 0x91
   1a82e:	d0a4      	beq.n	1a77a <_lv_obj_get_style_int+0x92>
   1a830:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
   1a834:	3a80      	subs	r2, #128	; 0x80
   1a836:	2a01      	cmp	r2, #1
   1a838:	d883      	bhi.n	1a742 <_lv_obj_get_style_int+0x5a>
                    if(list->text_space_zero) def = true;
   1a83a:	79e2      	ldrb	r2, [r4, #7]
                    if(list->border_width_zero) def = true;
   1a83c:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
   1a840:	f43f af7f 	beq.w	1a742 <_lv_obj_get_style_int+0x5a>
   1a844:	e00e      	b.n	1a864 <_lv_obj_get_style_int+0x17c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a846:	4552      	cmp	r2, sl
   1a848:	d097      	beq.n	1a77a <_lv_obj_get_style_int+0x92>
   1a84a:	f248 01a0 	movw	r1, #32928	; 0x80a0
   1a84e:	428a      	cmp	r2, r1
   1a850:	e7d9      	b.n	1a806 <_lv_obj_get_style_int+0x11e>
                    if(list->clip_corner_off) def = true;
   1a852:	7962      	ldrb	r2, [r4, #5]
                    if(list->text_decor_none) def = true;
   1a854:	f012 0f40 	tst.w	r2, #64	; 0x40
   1a858:	e7f2      	b.n	1a840 <_lv_obj_get_style_int+0x158>
                    if(list->transform_all_zero) def = true;
   1a85a:	f994 2005 	ldrsb.w	r2, [r4, #5]
                    if(list->border_post_off) def = true;
   1a85e:	2a00      	cmp	r2, #0
   1a860:	f6bf af6f 	bge.w	1a742 <_lv_obj_get_style_int+0x5a>
    prop = prop & (~LV_STYLE_STATE_MASK);
   1a864:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    switch(prop) {
   1a868:	2d22      	cmp	r5, #34	; 0x22
    prop = prop & (~LV_STYLE_STATE_MASK);
   1a86a:	b2ab      	uxth	r3, r5
    switch(prop) {
   1a86c:	d030      	beq.n	1a8d0 <_lv_obj_get_style_int+0x1e8>
   1a86e:	d828      	bhi.n	1a8c2 <_lv_obj_get_style_int+0x1da>
   1a870:	2b03      	cmp	r3, #3
   1a872:	d02f      	beq.n	1a8d4 <_lv_obj_get_style_int+0x1ec>
            return LV_IMG_ZOOM_NONE;
   1a874:	2b07      	cmp	r3, #7
   1a876:	bf14      	ite	ne
   1a878:	2000      	movne	r0, #0
   1a87a:	f44f 7080 	moveq.w	r0, #256	; 0x100
   1a87e:	e772      	b.n	1a766 <_lv_obj_get_style_int+0x7e>
                    if(list->border_width_zero) def = true;
   1a880:	79a2      	ldrb	r2, [r4, #6]
   1a882:	e7db      	b.n	1a83c <_lv_obj_get_style_int+0x154>
                    if(list->border_side_full) def = true;
   1a884:	79a2      	ldrb	r2, [r4, #6]
   1a886:	e7e5      	b.n	1a854 <_lv_obj_get_style_int+0x16c>
                    if(list->border_post_off) def = true;
   1a888:	f994 2006 	ldrsb.w	r2, [r4, #6]
   1a88c:	e7e7      	b.n	1a85e <_lv_obj_get_style_int+0x176>
                    if(list->radius_zero) def = true;
   1a88e:	7962      	ldrb	r2, [r4, #5]
   1a890:	f012 0f10 	tst.w	r2, #16
   1a894:	e7d4      	b.n	1a840 <_lv_obj_get_style_int+0x158>
                    if(list->shadow_width_zero) def = true;
   1a896:	79e2      	ldrb	r2, [r4, #7]
                    if(list->blend_mode_all_normal) def = true;
   1a898:	f012 0f04 	tst.w	r2, #4
   1a89c:	e7d0      	b.n	1a840 <_lv_obj_get_style_int+0x158>
                    if(list->pad_all_zero) def = true;
   1a89e:	79a2      	ldrb	r2, [r4, #6]
   1a8a0:	e7be      	b.n	1a820 <_lv_obj_get_style_int+0x138>
                    if(list->margin_all_zero) def = true;
   1a8a2:	79a2      	ldrb	r2, [r4, #6]
   1a8a4:	f012 0f02 	tst.w	r2, #2
   1a8a8:	e7ca      	b.n	1a840 <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
   1a8aa:	79e2      	ldrb	r2, [r4, #7]
   1a8ac:	e7d2      	b.n	1a854 <_lv_obj_get_style_int+0x16c>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1a8ae:	f018 0f80 	tst.w	r8, #128	; 0x80
   1a8b2:	d0d7      	beq.n	1a864 <_lv_obj_get_style_int+0x17c>
        if(part != LV_OBJ_PART_MAIN) {
   1a8b4:	f1bb 0f00 	cmp.w	fp, #0
   1a8b8:	d100      	bne.n	1a8bc <_lv_obj_get_style_int+0x1d4>
    return obj->parent;
   1a8ba:	6836      	ldr	r6, [r6, #0]
{
   1a8bc:	f04f 0b00 	mov.w	fp, #0
   1a8c0:	e71f      	b.n	1a702 <_lv_obj_get_style_int+0x1a>
    switch(prop) {
   1a8c2:	2b31      	cmp	r3, #49	; 0x31
   1a8c4:	d008      	beq.n	1a8d8 <_lv_obj_get_style_int+0x1f0>
            return LV_DPI / 8;
   1a8c6:	2bc0      	cmp	r3, #192	; 0xc0
   1a8c8:	bf14      	ite	ne
   1a8ca:	2000      	movne	r0, #0
   1a8cc:	2010      	moveq	r0, #16
   1a8ce:	e74a      	b.n	1a766 <_lv_obj_get_style_int+0x7e>
            return 255;
   1a8d0:	20ff      	movs	r0, #255	; 0xff
   1a8d2:	e748      	b.n	1a766 <_lv_obj_get_style_int+0x7e>
    switch(prop) {
   1a8d4:	2006      	movs	r0, #6
   1a8d6:	e746      	b.n	1a766 <_lv_obj_get_style_int+0x7e>
            return LV_BORDER_SIDE_FULL;
   1a8d8:	200f      	movs	r0, #15
   1a8da:	e744      	b.n	1a766 <_lv_obj_get_style_int+0x7e>
   1a8dc:	40001001 	.word	0x40001001

0001a8e0 <update_style_cache>:
 * @param obj pointer to an obejct
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
   1a8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a8e2:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
   1a8e4:	4610      	mov	r0, r2
{
   1a8e6:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
   1a8e8:	f7ff fb9a 	bl	1a020 <style_prop_is_cacheble>
   1a8ec:	2800      	cmp	r0, #0
   1a8ee:	f000 80fe 	beq.w	1aaee <update_style_cache+0x20e>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1a8f2:	4628      	mov	r0, r5
   1a8f4:	f00b fe42 	bl	2657c <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
   1a8f8:	7943      	ldrb	r3, [r0, #5]
   1a8fa:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
   1a8fe:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1a902:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1a906:	4604      	mov	r4, r0
    list->ignore_cache = 1;
   1a908:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1a90a:	f248 0282 	movw	r2, #32898	; 0x8082
   1a90e:	4631      	mov	r1, r6
   1a910:	4628      	mov	r0, r5
   1a912:	f7ff fee9 	bl	1a6e8 <_lv_obj_get_style_int>
#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   1a916:	b2c0      	uxtb	r0, r0
   1a918:	79e3      	ldrb	r3, [r4, #7]
   1a91a:	fab0 f080 	clz	r0, r0
   1a91e:	0940      	lsrs	r0, r0, #5
   1a920:	f360 1386 	bfi	r3, r0, #6, #1
   1a924:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1a926:	f248 028e 	movw	r2, #32910	; 0x808e
   1a92a:	4631      	mov	r1, r6
   1a92c:	4628      	mov	r0, r5
   1a92e:	f00b fed7 	bl	266e0 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;

    list->text_space_zero = 1;
   1a932:	4b96      	ldr	r3, [pc, #600]	; (1ab8c <update_style_cache+0x2ac>)
   1a934:	4283      	cmp	r3, r0
   1a936:	bf0c      	ite	eq
   1a938:	23a0      	moveq	r3, #160	; 0xa0
   1a93a:	2320      	movne	r3, #32
   1a93c:	79e0      	ldrb	r0, [r4, #7]
   1a93e:	f000 005f 	and.w	r0, r0, #95	; 0x5f
   1a942:	4303      	orrs	r3, r0
   1a944:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1a946:	f248 0280 	movw	r2, #32896	; 0x8080
   1a94a:	4631      	mov	r1, r6
   1a94c:	4628      	mov	r0, r5
   1a94e:	f7ff fecb 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   1a952:	2800      	cmp	r0, #0
   1a954:	f000 80cc 	beq.w	1aaf0 <update_style_cache+0x210>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
   1a958:	79e3      	ldrb	r3, [r4, #7]
   1a95a:	f36f 1345 	bfc	r3, #5, #1
   1a95e:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1a960:	222c      	movs	r2, #44	; 0x2c
   1a962:	4631      	mov	r1, r6
   1a964:	4628      	mov	r0, r5
   1a966:	f00b fe56 	bl	26616 <_lv_obj_get_style_opa>
    }


    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   1a96a:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   1a96e:	fab0 f080 	clz	r0, r0
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   1a972:	4253      	negs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   1a974:	ea4f 1050 	mov.w	r0, r0, lsr #5
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   1a978:	4153      	adcs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   1a97a:	00c0      	lsls	r0, r0, #3
   1a97c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   1a980:	79a3      	ldrb	r3, [r4, #6]
   1a982:	f023 0318 	bic.w	r3, r3, #24
   1a986:	4318      	orrs	r0, r3
   1a988:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1a98a:	2230      	movs	r2, #48	; 0x30
   1a98c:	4631      	mov	r1, r6
   1a98e:	4628      	mov	r0, r5
   1a990:	f7ff feaa 	bl	1a6e8 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
   1a994:	79a3      	ldrb	r3, [r4, #6]
   1a996:	fab0 f080 	clz	r0, r0
   1a99a:	0940      	lsrs	r0, r0, #5
   1a99c:	f360 1345 	bfi	r3, r0, #5, #1
   1a9a0:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1a9a2:	2231      	movs	r2, #49	; 0x31
   1a9a4:	4631      	mov	r1, r6
   1a9a6:	4628      	mov	r0, r5
   1a9a8:	f7ff fe9e 	bl	1a6e8 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
   1a9ac:	b2c0      	uxtb	r0, r0
   1a9ae:	f1a0 010f 	sub.w	r1, r0, #15
   1a9b2:	4248      	negs	r0, r1
   1a9b4:	79a3      	ldrb	r3, [r4, #6]
   1a9b6:	4148      	adcs	r0, r1
   1a9b8:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1a9bc:	2233      	movs	r2, #51	; 0x33
   1a9be:	71a3      	strb	r3, [r4, #6]
   1a9c0:	4631      	mov	r1, r6
   1a9c2:	4628      	mov	r0, r5
   1a9c4:	f7ff fe90 	bl	1a6e8 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
   1a9c8:	79a3      	ldrb	r3, [r4, #6]
   1a9ca:	fab0 f080 	clz	r0, r0
   1a9ce:	0940      	lsrs	r0, r0, #5
   1a9d0:	f360 13c7 	bfi	r3, r0, #7, #1
   1a9d4:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
   1a9d6:	4631      	mov	r1, r6
   1a9d8:	4628      	mov	r0, r5
   1a9da:	f00b fe14 	bl	26606 <lv_obj_get_style_clip_corner>
   1a9de:	7963      	ldrb	r3, [r4, #5]
   1a9e0:	f080 0001 	eor.w	r0, r0, #1
   1a9e4:	f360 1386 	bfi	r3, r0, #6, #1
   1a9e8:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   1a9ea:	f248 02ad 	movw	r2, #32941	; 0x80ad
   1a9ee:	4631      	mov	r1, r6
   1a9f0:	4628      	mov	r0, r5
   1a9f2:	f00b fe10 	bl	26616 <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   1a9f6:	79e3      	ldrb	r3, [r4, #7]
   1a9f8:	fab0 f080 	clz	r0, r0
   1a9fc:	0940      	lsrs	r0, r0, #5
   1a9fe:	f360 1304 	bfi	r3, r0, #4, #1
   1aa02:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1aa04:	2240      	movs	r2, #64	; 0x40
   1aa06:	4631      	mov	r1, r6
   1aa08:	4628      	mov	r0, r5
   1aa0a:	f7ff fe6d 	bl	1a6e8 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
   1aa0e:	79e3      	ldrb	r3, [r4, #7]
   1aa10:	fab0 f080 	clz	r0, r0
   1aa14:	0940      	lsrs	r0, r0, #5
   1aa16:	f360 0300 	bfi	r3, r0, #0, #1
   1aa1a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   1aa1c:	226e      	movs	r2, #110	; 0x6e
   1aa1e:	4631      	mov	r1, r6
   1aa20:	4628      	mov	r0, r5
   1aa22:	f00b fe5d 	bl	266e0 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
   1aa26:	79e3      	ldrb	r3, [r4, #7]
   1aa28:	fab0 f080 	clz	r0, r0
   1aa2c:	0940      	lsrs	r0, r0, #5
   1aa2e:	f360 0341 	bfi	r3, r0, #1, #1
   1aa32:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1aa34:	2201      	movs	r2, #1
   1aa36:	4631      	mov	r1, r6
   1aa38:	4628      	mov	r0, r5
   1aa3a:	f7ff fe55 	bl	1a6e8 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
   1aa3e:	7963      	ldrb	r3, [r4, #5]
   1aa40:	fab0 f080 	clz	r0, r0
   1aa44:	0940      	lsrs	r0, r0, #5
   1aa46:	f360 1304 	bfi	r3, r0, #4, #1
   1aa4a:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   1aa4c:	2250      	movs	r2, #80	; 0x50
   1aa4e:	4631      	mov	r1, r6
   1aa50:	4628      	mov	r0, r5
   1aa52:	f7ff fe49 	bl	1a6e8 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
   1aa56:	79e3      	ldrb	r3, [r4, #7]
   1aa58:	fab0 f080 	clz	r0, r0
   1aa5c:	0940      	lsrs	r0, r0, #5
   1aa5e:	f360 0382 	bfi	r3, r0, #2, #1
   1aa62:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   1aa64:	227f      	movs	r2, #127	; 0x7f
   1aa66:	4631      	mov	r1, r6
   1aa68:	4628      	mov	r0, r5
   1aa6a:	f00b fe39 	bl	266e0 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;


    list->transform_all_zero  = 1;
   1aa6e:	6863      	ldr	r3, [r4, #4]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
   1aa70:	fab0 f080 	clz	r0, r0
   1aa74:	0940      	lsrs	r0, r0, #5
    list->transform_all_zero  = 1;
   1aa76:	06c0      	lsls	r0, r0, #27
   1aa78:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1aa7c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   1aa80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1aa84:	4318      	orrs	r0, r3
   1aa86:	6060      	str	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   1aa88:	2206      	movs	r2, #6
   1aa8a:	4631      	mov	r1, r6
   1aa8c:	4628      	mov	r0, r5
   1aa8e:	f7ff fe2b 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
   1aa92:	2800      	cmp	r0, #0
   1aa94:	d036      	beq.n	1ab04 <update_style_cache+0x224>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
   1aa96:	7963      	ldrb	r3, [r4, #5]
   1aa98:	f36f 13c7 	bfc	r3, #7, #1
   1aa9c:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
   1aa9e:	79a3      	ldrb	r3, [r4, #6]
   1aaa0:	f043 0301 	orr.w	r3, r3, #1
   1aaa4:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1aaa6:	2210      	movs	r2, #16
   1aaa8:	4631      	mov	r1, r6
   1aaaa:	4628      	mov	r0, r5
   1aaac:	f7ff fe1c 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
   1aab0:	2800      	cmp	r0, #0
   1aab2:	d03e      	beq.n	1ab32 <update_style_cache+0x252>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
   1aab4:	79a3      	ldrb	r3, [r4, #6]
   1aab6:	f36f 0300 	bfc	r3, #0, #1
   1aaba:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
   1aabc:	79a3      	ldrb	r3, [r4, #6]
   1aabe:	f043 0302 	orr.w	r3, r3, #2
   1aac2:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   1aac4:	2215      	movs	r2, #21
   1aac6:	4631      	mov	r1, r6
   1aac8:	4628      	mov	r0, r5
   1aaca:	f7ff fe0d 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
   1aace:	2800      	cmp	r0, #0
   1aad0:	d045      	beq.n	1ab5e <update_style_cache+0x27e>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
   1aad2:	79a3      	ldrb	r3, [r4, #6]
   1aad4:	f36f 0341 	bfc	r3, #1, #1
   1aad8:	71a3      	strb	r3, [r4, #6]
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
    list->valid_cache = 1;
   1aada:	4b2d      	ldr	r3, [pc, #180]	; (1ab90 <update_style_cache+0x2b0>)
   1aadc:	ea43 27c7 	orr.w	r7, r3, r7, lsl #11
   1aae0:	6863      	ldr	r3, [r4, #4]
   1aae2:	f423 2381 	bic.w	r3, r3, #264192	; 0x40800
   1aae6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1aaea:	431f      	orrs	r7, r3
   1aaec:	6067      	str	r7, [r4, #4]
}
   1aaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1aaf0:	f248 0281 	movw	r2, #32897	; 0x8081
   1aaf4:	4631      	mov	r1, r6
   1aaf6:	4628      	mov	r0, r5
   1aaf8:	f7ff fdf6 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   1aafc:	2800      	cmp	r0, #0
   1aafe:	f47f af2b 	bne.w	1a958 <update_style_cache+0x78>
   1ab02:	e72d      	b.n	1a960 <update_style_cache+0x80>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1ab04:	2204      	movs	r2, #4
   1ab06:	4631      	mov	r1, r6
   1ab08:	4628      	mov	r0, r5
   1ab0a:	f7ff fded 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
   1ab0e:	2800      	cmp	r0, #0
   1ab10:	d1c1      	bne.n	1aa96 <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1ab12:	2205      	movs	r2, #5
   1ab14:	4631      	mov	r1, r6
   1ab16:	4628      	mov	r0, r5
   1ab18:	f7ff fde6 	bl	1a6e8 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
   1ab1c:	2800      	cmp	r0, #0
   1ab1e:	d1ba      	bne.n	1aa96 <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   1ab20:	2207      	movs	r2, #7
   1ab22:	4631      	mov	r1, r6
   1ab24:	4628      	mov	r0, r5
   1ab26:	f7ff fddf 	bl	1a6e8 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
   1ab2a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1ab2e:	d1b2      	bne.n	1aa96 <update_style_cache+0x1b6>
   1ab30:	e7b5      	b.n	1aa9e <update_style_cache+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ab32:	2211      	movs	r2, #17
   1ab34:	4631      	mov	r1, r6
   1ab36:	4628      	mov	r0, r5
   1ab38:	f7ff fdd6 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
   1ab3c:	2800      	cmp	r0, #0
   1ab3e:	d1b9      	bne.n	1aab4 <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ab40:	2212      	movs	r2, #18
   1ab42:	4631      	mov	r1, r6
   1ab44:	4628      	mov	r0, r5
   1ab46:	f7ff fdcf 	bl	1a6e8 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
   1ab4a:	2800      	cmp	r0, #0
   1ab4c:	d1b2      	bne.n	1aab4 <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ab4e:	2213      	movs	r2, #19
   1ab50:	4631      	mov	r1, r6
   1ab52:	4628      	mov	r0, r5
   1ab54:	f7ff fdc8 	bl	1a6e8 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
   1ab58:	2800      	cmp	r0, #0
   1ab5a:	d1ab      	bne.n	1aab4 <update_style_cache+0x1d4>
   1ab5c:	e7ae      	b.n	1aabc <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   1ab5e:	2216      	movs	r2, #22
   1ab60:	4631      	mov	r1, r6
   1ab62:	4628      	mov	r0, r5
   1ab64:	f7ff fdc0 	bl	1a6e8 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
   1ab68:	2800      	cmp	r0, #0
   1ab6a:	d1b2      	bne.n	1aad2 <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   1ab6c:	2217      	movs	r2, #23
   1ab6e:	4631      	mov	r1, r6
   1ab70:	4628      	mov	r0, r5
   1ab72:	f7ff fdb9 	bl	1a6e8 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
   1ab76:	2800      	cmp	r0, #0
   1ab78:	d1ab      	bne.n	1aad2 <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   1ab7a:	2218      	movs	r2, #24
   1ab7c:	4631      	mov	r1, r6
   1ab7e:	4628      	mov	r0, r5
   1ab80:	f7ff fdb2 	bl	1a6e8 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
   1ab84:	2800      	cmp	r0, #0
   1ab86:	d1a4      	bne.n	1aad2 <update_style_cache+0x1f2>
   1ab88:	e7a7      	b.n	1aada <update_style_cache+0x1fa>
   1ab8a:	bf00      	nop
   1ab8c:	20000820 	.word	0x20000820
   1ab90:	00040400 	.word	0x00040400

0001ab94 <lv_obj_refresh_style>:
{
   1ab94:	b570      	push	{r4, r5, r6, lr}
   1ab96:	4605      	mov	r5, r0
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
   1ab98:	4610      	mov	r0, r2
{
   1ab9a:	4614      	mov	r4, r2
    if(style_prop_is_cacheble(prop) == false) return;
   1ab9c:	f7ff fa40 	bl	1a020 <style_prop_is_cacheble>
   1aba0:	2800      	cmp	r0, #0
   1aba2:	d16d      	bne.n	1ac80 <lv_obj_refresh_style+0xec>
    switch(prop) {
   1aba4:	2c7f      	cmp	r4, #127	; 0x7f
   1aba6:	d85a      	bhi.n	1ac5e <lv_obj_refresh_style+0xca>
   1aba8:	2c6f      	cmp	r4, #111	; 0x6f
   1abaa:	d81e      	bhi.n	1abea <lv_obj_refresh_style+0x56>
   1abac:	2c5c      	cmp	r4, #92	; 0x5c
   1abae:	d84c      	bhi.n	1ac4a <lv_obj_refresh_style+0xb6>
   1abb0:	2c3f      	cmp	r4, #63	; 0x3f
   1abb2:	d841      	bhi.n	1ac38 <lv_obj_refresh_style+0xa4>
   1abb4:	2c07      	cmp	r4, #7
   1abb6:	d84d      	bhi.n	1ac54 <lv_obj_refresh_style+0xc0>
   1abb8:	2c01      	cmp	r4, #1
   1abba:	d946      	bls.n	1ac4a <lv_obj_refresh_style+0xb6>
        lv_obj_invalidate(obj);
   1abbc:	4628      	mov	r0, r5
   1abbe:	f00b fbb4 	bl	2632a <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
   1abc2:	69eb      	ldr	r3, [r5, #28]
   1abc4:	2200      	movs	r2, #0
   1abc6:	2104      	movs	r1, #4
   1abc8:	4628      	mov	r0, r5
   1abca:	4798      	blx	r3
        switch(prop) {
   1abcc:	2c18      	cmp	r4, #24
   1abce:	f200 808d 	bhi.w	1acec <lv_obj_refresh_style+0x158>
   1abd2:	2c14      	cmp	r4, #20
   1abd4:	f240 808d 	bls.w	1acf2 <lv_obj_refresh_style+0x15e>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
   1abd8:	6828      	ldr	r0, [r5, #0]
   1abda:	2800      	cmp	r0, #0
   1abdc:	f000 8089 	beq.w	1acf2 <lv_obj_refresh_style+0x15e>
   1abe0:	69c3      	ldr	r3, [r0, #28]
   1abe2:	2200      	movs	r2, #0
   1abe4:	2101      	movs	r1, #1
   1abe6:	4798      	blx	r3
   1abe8:	e083      	b.n	1acf2 <lv_obj_refresh_style+0x15e>
   1abea:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
   1abee:	2b0f      	cmp	r3, #15
   1abf0:	d82b      	bhi.n	1ac4a <lv_obj_refresh_style+0xb6>
   1abf2:	a201      	add	r2, pc, #4	; (adr r2, 1abf8 <lv_obj_refresh_style+0x64>)
   1abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1abf8:	0001abbd 	.word	0x0001abbd
   1abfc:	0001abbd 	.word	0x0001abbd
   1ac00:	0001ac4b 	.word	0x0001ac4b
   1ac04:	0001abbd 	.word	0x0001abbd
   1ac08:	0001abbd 	.word	0x0001abbd
   1ac0c:	0001abbd 	.word	0x0001abbd
   1ac10:	0001ac4b 	.word	0x0001ac4b
   1ac14:	0001ac4b 	.word	0x0001ac4b
   1ac18:	0001ac4b 	.word	0x0001ac4b
   1ac1c:	0001ac4b 	.word	0x0001ac4b
   1ac20:	0001ac4b 	.word	0x0001ac4b
   1ac24:	0001ac4b 	.word	0x0001ac4b
   1ac28:	0001abbd 	.word	0x0001abbd
   1ac2c:	0001ac4b 	.word	0x0001ac4b
   1ac30:	0001abbd 	.word	0x0001abbd
   1ac34:	0001abbd 	.word	0x0001abbd
   1ac38:	f1a4 0240 	sub.w	r2, r4, #64	; 0x40
   1ac3c:	b293      	uxth	r3, r2
   1ac3e:	2201      	movs	r2, #1
   1ac40:	409a      	lsls	r2, r3
   1ac42:	4b32      	ldr	r3, [pc, #200]	; (1ad0c <lv_obj_refresh_style+0x178>)
   1ac44:	4013      	ands	r3, r2
   1ac46:	2b00      	cmp	r3, #0
   1ac48:	d1b8      	bne.n	1abbc <lv_obj_refresh_style+0x28>
        lv_obj_invalidate(obj);
   1ac4a:	4628      	mov	r0, r5
}
   1ac4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_invalidate(obj);
   1ac50:	f00b bb6b 	b.w	2632a <lv_obj_invalidate>
    switch(prop) {
   1ac54:	f1a4 0310 	sub.w	r3, r4, #16
   1ac58:	2b08      	cmp	r3, #8
   1ac5a:	d8f6      	bhi.n	1ac4a <lv_obj_refresh_style+0xb6>
   1ac5c:	e7ae      	b.n	1abbc <lv_obj_refresh_style+0x28>
   1ac5e:	f248 0381 	movw	r3, #32897	; 0x8081
   1ac62:	429c      	cmp	r4, r3
   1ac64:	d808      	bhi.n	1ac78 <lv_obj_refresh_style+0xe4>
   1ac66:	f248 037f 	movw	r3, #32895	; 0x807f
   1ac6a:	429c      	cmp	r4, r3
   1ac6c:	d8a6      	bhi.n	1abbc <lv_obj_refresh_style+0x28>
   1ac6e:	2c90      	cmp	r4, #144	; 0x90
   1ac70:	d0a4      	beq.n	1abbc <lv_obj_refresh_style+0x28>
   1ac72:	2cff      	cmp	r4, #255	; 0xff
   1ac74:	d1e9      	bne.n	1ac4a <lv_obj_refresh_style+0xb6>
   1ac76:	e7a1      	b.n	1abbc <lv_obj_refresh_style+0x28>
   1ac78:	f248 038e 	movw	r3, #32910	; 0x808e
   1ac7c:	429c      	cmp	r4, r3
   1ac7e:	e7f9      	b.n	1ac74 <lv_obj_refresh_style+0xe0>

    if(part != LV_OBJ_PART_ALL) {
   1ac80:	29ff      	cmp	r1, #255	; 0xff
   1ac82:	d016      	beq.n	1acb2 <lv_obj_refresh_style+0x11e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1ac84:	4628      	mov	r0, r5
   1ac86:	f00b fc79 	bl	2657c <lv_obj_get_style_list>
        if(list == NULL) return;
   1ac8a:	2800      	cmp	r0, #0
   1ac8c:	d08a      	beq.n	1aba4 <lv_obj_refresh_style+0x10>
        list->valid_cache = 0;
   1ac8e:	7943      	ldrb	r3, [r0, #5]
   1ac90:	f36f 0382 	bfc	r3, #2, #1
   1ac94:	7143      	strb	r3, [r0, #5]
        result = _lv_ll_get_head(&obj->child_ll);
   1ac96:	1d28      	adds	r0, r5, #4
   1ac98:	f00f fc91 	bl	2a5be <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
   1ac9c:	4606      	mov	r6, r0
    while(child) {
   1ac9e:	2800      	cmp	r0, #0
   1aca0:	d080      	beq.n	1aba4 <lv_obj_refresh_style+0x10>
        update_style_cache_children(child);
   1aca2:	4630      	mov	r0, r6
   1aca4:	f00b fd78 	bl	26798 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   1aca8:	4631      	mov	r1, r6
   1acaa:	4628      	mov	r0, r5
   1acac:	f00b fc2f 	bl	2650e <lv_obj_get_child>
   1acb0:	e7f4      	b.n	1ac9c <lv_obj_refresh_style+0x108>
   1acb2:	2600      	movs	r6, #0
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1acb4:	b2f1      	uxtb	r1, r6
   1acb6:	4628      	mov	r0, r5
   1acb8:	f00b fc60 	bl	2657c <lv_obj_get_style_list>
            if(list == NULL) break;
   1acbc:	b130      	cbz	r0, 1accc <lv_obj_refresh_style+0x138>
            list->valid_cache = 0;
   1acbe:	7943      	ldrb	r3, [r0, #5]
   1acc0:	3601      	adds	r6, #1
   1acc2:	f36f 0382 	bfc	r3, #2, #1
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1acc6:	2e40      	cmp	r6, #64	; 0x40
            list->valid_cache = 0;
   1acc8:	7143      	strb	r3, [r0, #5]
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1acca:	d1f3      	bne.n	1acb4 <lv_obj_refresh_style+0x120>
   1accc:	2640      	movs	r6, #64	; 0x40
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1acce:	4631      	mov	r1, r6
   1acd0:	4628      	mov	r0, r5
   1acd2:	f00b fc53 	bl	2657c <lv_obj_get_style_list>
            if(list == NULL) break;
   1acd6:	2800      	cmp	r0, #0
   1acd8:	d0dd      	beq.n	1ac96 <lv_obj_refresh_style+0x102>
            list->valid_cache = 0;
   1acda:	7943      	ldrb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1acdc:	3601      	adds	r6, #1
   1acde:	b2f6      	uxtb	r6, r6
            list->valid_cache = 0;
   1ace0:	f36f 0382 	bfc	r3, #2, #1
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1ace4:	2eff      	cmp	r6, #255	; 0xff
            list->valid_cache = 0;
   1ace6:	7143      	strb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1ace8:	d1f1      	bne.n	1acce <lv_obj_refresh_style+0x13a>
   1acea:	e7d4      	b.n	1ac96 <lv_obj_refresh_style+0x102>
        switch(prop) {
   1acec:	2cff      	cmp	r4, #255	; 0xff
   1acee:	f43f af73 	beq.w	1abd8 <lv_obj_refresh_style+0x44>
        lv_obj_invalidate(obj);
   1acf2:	4628      	mov	r0, r5
   1acf4:	f00b fb19 	bl	2632a <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
   1acf8:	2cff      	cmp	r4, #255	; 0xff
   1acfa:	d001      	beq.n	1ad00 <lv_obj_refresh_style+0x16c>
   1acfc:	0423      	lsls	r3, r4, #16
   1acfe:	d504      	bpl.n	1ad0a <lv_obj_refresh_style+0x176>
   1ad00:	4628      	mov	r0, r5
}
   1ad02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
   1ad06:	f00b bc08 	b.w	2651a <refresh_children_style>
}
   1ad0a:	bd70      	pop	{r4, r5, r6, pc}
   1ad0c:	100f1003 	.word	0x100f1003

0001ad10 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
   1ad10:	2908      	cmp	r1, #8
{
   1ad12:	b510      	push	{r4, lr}
   1ad14:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
   1ad16:	d108      	bne.n	1ad2a <lv_obj_signal+0x1a>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
   1ad18:	7813      	ldrb	r3, [r2, #0]
   1ad1a:	b91b      	cbnz	r3, 1ad24 <lv_obj_signal+0x14>
   1ad1c:	3428      	adds	r4, #40	; 0x28
   1ad1e:	6054      	str	r4, [r2, #4]
   1ad20:	2001      	movs	r0, #1
   1ad22:	e011      	b.n	1ad48 <lv_obj_signal+0x38>
        else info->result = NULL;
   1ad24:	2300      	movs	r3, #0
   1ad26:	6053      	str	r3, [r2, #4]
   1ad28:	e7fa      	b.n	1ad20 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1ad2a:	2907      	cmp	r1, #7
   1ad2c:	d105      	bne.n	1ad3a <lv_obj_signal+0x2a>
}
   1ad2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1ad32:	4920      	ldr	r1, [pc, #128]	; (1adb4 <lv_obj_signal+0xa4>)
   1ad34:	4610      	mov	r0, r2
   1ad36:	f00b bdb9 	b.w	268ac <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
   1ad3a:	2901      	cmp	r1, #1
   1ad3c:	d105      	bne.n	1ad4a <lv_obj_signal+0x3a>
    return (obj->protect & prot) == 0 ? false : true;
   1ad3e:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   1ad42:	43c0      	mvns	r0, r0
   1ad44:	f000 0001 	and.w	r0, r0, #1
}
   1ad48:	bd10      	pop	{r4, pc}
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   1ad4a:	2906      	cmp	r1, #6
   1ad4c:	d109      	bne.n	1ad62 <lv_obj_signal+0x52>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
   1ad4e:	2100      	movs	r1, #0
   1ad50:	f00c f9a2 	bl	27098 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
   1ad54:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
   1ad58:	4283      	cmp	r3, r0
   1ad5a:	bfb8      	it	lt
   1ad5c:	4603      	movlt	r3, r0
   1ad5e:	8623      	strh	r3, [r4, #48]	; 0x30
   1ad60:	e7de      	b.n	1ad20 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1ad62:	2904      	cmp	r1, #4
   1ad64:	d102      	bne.n	1ad6c <lv_obj_signal+0x5c>
        lv_obj_refresh_ext_draw_pad(obj);
   1ad66:	f00b fa6e 	bl	26246 <lv_obj_refresh_ext_draw_pad>
   1ad6a:	e7d9      	b.n	1ad20 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PRESSED) {
   1ad6c:	290b      	cmp	r1, #11
   1ad6e:	d103      	bne.n	1ad78 <lv_obj_signal+0x68>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
   1ad70:	2110      	movs	r1, #16
   1ad72:	f00c f97d 	bl	27070 <lv_obj_add_state>
   1ad76:	e7d3      	b.n	1ad20 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
   1ad78:	f1a1 030d 	sub.w	r3, r1, #13
   1ad7c:	2b01      	cmp	r3, #1
   1ad7e:	d803      	bhi.n	1ad88 <lv_obj_signal+0x78>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
   1ad80:	2110      	movs	r1, #16
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
   1ad82:	f00c f97f 	bl	27084 <lv_obj_clear_state>
   1ad86:	e7cb      	b.n	1ad20 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_FOCUS) {
   1ad88:	2916      	cmp	r1, #22
   1ad8a:	d108      	bne.n	1ad9e <lv_obj_signal+0x8e>
            obj = lv_obj_get_focused_obj(obj);
   1ad8c:	f00c fa7b 	bl	27286 <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
   1ad90:	2102      	movs	r1, #2
            obj = lv_obj_get_focused_obj(obj);
   1ad92:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
   1ad94:	f00c f96c 	bl	27070 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
   1ad98:	2104      	movs	r1, #4
   1ad9a:	4620      	mov	r0, r4
   1ad9c:	e7f1      	b.n	1ad82 <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_DEFOCUS) {
   1ad9e:	2917      	cmp	r1, #23
   1ada0:	d103      	bne.n	1adaa <lv_obj_signal+0x9a>
        obj = lv_obj_get_focused_obj(obj);
   1ada2:	f00c fa70 	bl	27286 <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
   1ada6:	2106      	movs	r1, #6
   1ada8:	e7eb      	b.n	1ad82 <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_CLEANUP) {
   1adaa:	2900      	cmp	r1, #0
   1adac:	d1b8      	bne.n	1ad20 <lv_obj_signal+0x10>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1adae:	f7ff fc4b 	bl	1a648 <lv_obj_clean_style_list>
   1adb2:	e7b5      	b.n	1ad20 <lv_obj_signal+0x10>
   1adb4:	0002fd90 	.word	0x0002fd90

0001adb8 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
   1adb8:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1adba:	4d19      	ldr	r5, [pc, #100]	; (1ae20 <lv_refr_vdb_flush+0x68>)
   1adbc:	6828      	ldr	r0, [r5, #0]
   1adbe:	f00f f8f9 	bl	29fb4 <lv_disp_get_buf>
   1adc2:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
   1adc4:	6828      	ldr	r0, [r5, #0]
   1adc6:	f00f f8f7 	bl	29fb8 <lv_disp_is_double_buf>
   1adca:	b958      	cbnz	r0, 1ade4 <lv_refr_vdb_flush+0x2c>
        }
    }

    vdb->flushing = 1;

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1adcc:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
   1adce:	2301      	movs	r3, #1
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1add0:	686a      	ldr	r2, [r5, #4]
    vdb->flushing = 1;
   1add2:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1add4:	6a11      	ldr	r1, [r2, #32]
   1add6:	07c9      	lsls	r1, r1, #31
   1add8:	d409      	bmi.n	1adee <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
   1adda:	2300      	movs	r3, #0
   1addc:	e00a      	b.n	1adf4 <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
   1adde:	69c3      	ldr	r3, [r0, #28]
   1ade0:	b10b      	cbz	r3, 1ade6 <lv_refr_vdb_flush+0x2e>
   1ade2:	4798      	blx	r3
   1ade4:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
   1ade6:	69a3      	ldr	r3, [r4, #24]
   1ade8:	2b00      	cmp	r3, #0
   1adea:	d1f8      	bne.n	1adde <lv_refr_vdb_flush+0x26>
   1adec:	e7ee      	b.n	1adcc <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1adee:	6a12      	ldr	r2, [r2, #32]
   1adf0:	0792      	lsls	r2, r2, #30
   1adf2:	d5f2      	bpl.n	1adda <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
   1adf4:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   1adf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1adf8:	b10b      	cbz	r3, 1adfe <lv_refr_vdb_flush+0x46>
   1adfa:	4628      	mov	r0, r5
   1adfc:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
   1adfe:	68eb      	ldr	r3, [r5, #12]
   1ae00:	b123      	cbz	r3, 1ae0c <lv_refr_vdb_flush+0x54>
   1ae02:	68a2      	ldr	r2, [r4, #8]
   1ae04:	f104 0110 	add.w	r1, r4, #16
   1ae08:	4628      	mov	r0, r5
   1ae0a:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
   1ae0c:	6823      	ldr	r3, [r4, #0]
   1ae0e:	b133      	cbz	r3, 1ae1e <lv_refr_vdb_flush+0x66>
   1ae10:	6862      	ldr	r2, [r4, #4]
   1ae12:	b122      	cbz	r2, 1ae1e <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
   1ae14:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
   1ae16:	428b      	cmp	r3, r1
   1ae18:	bf08      	it	eq
   1ae1a:	4613      	moveq	r3, r2
   1ae1c:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
   1ae1e:	bd38      	pop	{r3, r4, r5, pc}
   1ae20:	20003ebc 	.word	0x20003ebc

0001ae24 <lv_refr_obj_and_children>:
{
   1ae24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae26:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
   1ae28:	4604      	mov	r4, r0
   1ae2a:	b928      	cbnz	r0, 1ae38 <lv_refr_obj_and_children+0x14>
   1ae2c:	4b13      	ldr	r3, [pc, #76]	; (1ae7c <lv_refr_obj_and_children+0x58>)
   1ae2e:	6818      	ldr	r0, [r3, #0]
   1ae30:	f7ff f84a 	bl	19ec8 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
   1ae34:	4604      	mov	r4, r0
   1ae36:	b140      	cbz	r0, 1ae4a <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
   1ae38:	4620      	mov	r0, r4
   1ae3a:	4631      	mov	r1, r6
   1ae3c:	f00c fa5b 	bl	272f6 <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
   1ae40:	4620      	mov	r0, r4
   1ae42:	f00b fb62 	bl	2650a <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
   1ae46:	4605      	mov	r5, r0
    while(par != NULL) {
   1ae48:	b900      	cbnz	r0, 1ae4c <lv_refr_obj_and_children+0x28>
}
   1ae4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
   1ae4c:	1d2f      	adds	r7, r5, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
   1ae4e:	4621      	mov	r1, r4
   1ae50:	4638      	mov	r0, r7
   1ae52:	f00f fbbf 	bl	2a5d4 <_lv_ll_get_prev>
   1ae56:	4604      	mov	r4, r0
        while(i != NULL) {
   1ae58:	b950      	cbnz	r0, 1ae70 <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
   1ae5a:	6a2b      	ldr	r3, [r5, #32]
   1ae5c:	b11b      	cbz	r3, 1ae66 <lv_refr_obj_and_children+0x42>
   1ae5e:	2201      	movs	r2, #1
   1ae60:	4631      	mov	r1, r6
   1ae62:	4628      	mov	r0, r5
   1ae64:	4798      	blx	r3
        par = lv_obj_get_parent(par);
   1ae66:	4628      	mov	r0, r5
   1ae68:	f00b fb4f 	bl	2650a <lv_obj_get_parent>
   1ae6c:	462c      	mov	r4, r5
   1ae6e:	e7ea      	b.n	1ae46 <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
   1ae70:	4631      	mov	r1, r6
   1ae72:	4620      	mov	r0, r4
   1ae74:	f00c fa3f 	bl	272f6 <lv_refr_obj>
   1ae78:	e7e9      	b.n	1ae4e <lv_refr_obj_and_children+0x2a>
   1ae7a:	bf00      	nop
   1ae7c:	20003ebc 	.word	0x20003ebc

0001ae80 <lv_refr_area_part>:
{
   1ae80:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1ae82:	4c4b      	ldr	r4, [pc, #300]	; (1afb0 <lv_refr_area_part+0x130>)
{
   1ae84:	b09c      	sub	sp, #112	; 0x70
   1ae86:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1ae88:	6820      	ldr	r0, [r4, #0]
   1ae8a:	f00f f893 	bl	29fb4 <lv_disp_get_buf>
   1ae8e:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
   1ae90:	6820      	ldr	r0, [r4, #0]
   1ae92:	f00f f891 	bl	29fb8 <lv_disp_is_double_buf>
   1ae96:	b1b0      	cbz	r0, 1aec6 <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
   1ae98:	f105 0210 	add.w	r2, r5, #16
   1ae9c:	4631      	mov	r1, r6
   1ae9e:	a803      	add	r0, sp, #12
   1aea0:	f00f f8f3 	bl	2a08a <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   1aea4:	6820      	ldr	r0, [r4, #0]
   1aea6:	f7ff f80f 	bl	19ec8 <lv_disp_get_scr_act>
   1aeaa:	4601      	mov	r1, r0
   1aeac:	a803      	add	r0, sp, #12
   1aeae:	f00c f9f4 	bl	2729a <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
   1aeb2:	6823      	ldr	r3, [r4, #0]
   1aeb4:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   1aeb6:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
   1aeb8:	b955      	cbnz	r5, 1aed0 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
   1aeba:	2800      	cmp	r0, #0
   1aebc:	d138      	bne.n	1af30 <lv_refr_area_part+0xb0>
   1aebe:	e00e      	b.n	1aede <lv_refr_area_part+0x5e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
   1aec0:	69c3      	ldr	r3, [r0, #28]
   1aec2:	b10b      	cbz	r3, 1aec8 <lv_refr_area_part+0x48>
   1aec4:	4798      	blx	r3
   1aec6:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
   1aec8:	69ab      	ldr	r3, [r5, #24]
   1aeca:	2b00      	cmp	r3, #0
   1aecc:	d1f8      	bne.n	1aec0 <lv_refr_area_part+0x40>
   1aece:	e7e3      	b.n	1ae98 <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
   1aed0:	4629      	mov	r1, r5
   1aed2:	a803      	add	r0, sp, #12
   1aed4:	f00c f9e1 	bl	2729a <lv_refr_get_top_obj>
   1aed8:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
   1aeda:	bb4e      	cbnz	r6, 1af30 <lv_refr_area_part+0xb0>
   1aedc:	bb40      	cbnz	r0, 1af30 <lv_refr_area_part+0xb0>
        if(disp_refr->bg_img) {
   1aede:	6823      	ldr	r3, [r4, #0]
   1aee0:	6d5d      	ldr	r5, [r3, #84]	; 0x54
            lv_draw_img_dsc_init(&dsc);
   1aee2:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
   1aee4:	2d00      	cmp	r5, #0
   1aee6:	d051      	beq.n	1af8c <lv_refr_area_part+0x10c>
            lv_draw_img_dsc_init(&dsc);
   1aee8:	f00d fd30 	bl	2894c <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
   1aeec:	6823      	ldr	r3, [r4, #0]
   1aeee:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   1aef2:	f88d 201c 	strb.w	r2, [sp, #28]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
   1aef6:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1aef8:	a902      	add	r1, sp, #8
   1aefa:	f002 f9b3 	bl	1d264 <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
   1aefe:	2801      	cmp	r0, #1
   1af00:	d13a      	bne.n	1af78 <lv_refr_area_part+0xf8>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
   1af02:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1af06:	9b02      	ldr	r3, [sp, #8]
   1af08:	f3c2 124a 	ubfx	r2, r2, #5, #11
   1af0c:	3a01      	subs	r2, #1
   1af0e:	9200      	str	r2, [sp, #0]
   1af10:	f3c3 238a 	ubfx	r3, r3, #10, #11
   1af14:	2200      	movs	r2, #0
   1af16:	4611      	mov	r1, r2
   1af18:	3b01      	subs	r3, #1
   1af1a:	a805      	add	r0, sp, #20
   1af1c:	f00f f89b 	bl	2a056 <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
   1af20:	6822      	ldr	r2, [r4, #0]
   1af22:	ab07      	add	r3, sp, #28
   1af24:	6d52      	ldr	r2, [r2, #84]	; 0x54
   1af26:	a903      	add	r1, sp, #12
   1af28:	a805      	add	r0, sp, #20
   1af2a:	f000 fb71 	bl	1b610 <lv_draw_img>
   1af2e:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
   1af30:	6823      	ldr	r3, [r4, #0]
   1af32:	6c58      	ldr	r0, [r3, #68]	; 0x44
   1af34:	b128      	cbz	r0, 1af42 <lv_refr_area_part+0xc2>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
   1af36:	a903      	add	r1, sp, #12
   1af38:	2d00      	cmp	r5, #0
   1af3a:	bf18      	it	ne
   1af3c:	4628      	movne	r0, r5
   1af3e:	f7ff ff71 	bl	1ae24 <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
   1af42:	b90e      	cbnz	r6, 1af48 <lv_refr_area_part+0xc8>
        top_act_scr = disp_refr->act_scr;
   1af44:	6823      	ldr	r3, [r4, #0]
   1af46:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    lv_refr_obj_and_children(top_act_scr, &start_mask);
   1af48:	a903      	add	r1, sp, #12
   1af4a:	4630      	mov	r0, r6
   1af4c:	f7ff ff6a 	bl	1ae24 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
   1af50:	6820      	ldr	r0, [r4, #0]
   1af52:	f7fe ffed 	bl	19f30 <lv_disp_get_layer_top>
   1af56:	a903      	add	r1, sp, #12
   1af58:	f7ff ff64 	bl	1ae24 <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
   1af5c:	6820      	ldr	r0, [r4, #0]
   1af5e:	f7ff f801 	bl	19f64 <lv_disp_get_layer_sys>
   1af62:	a903      	add	r1, sp, #12
   1af64:	f7ff ff5e 	bl	1ae24 <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
   1af68:	6820      	ldr	r0, [r4, #0]
   1af6a:	f00f f82d 	bl	29fc8 <lv_disp_is_true_double_buf>
   1af6e:	b908      	cbnz	r0, 1af74 <lv_refr_area_part+0xf4>
        lv_refr_vdb_flush();
   1af70:	f7ff ff22 	bl	1adb8 <lv_refr_vdb_flush>
}
   1af74:	b01c      	add	sp, #112	; 0x70
   1af76:	bd70      	pop	{r4, r5, r6, pc}
                LV_LOG_WARN("Can't draw the background image")
   1af78:	4b0e      	ldr	r3, [pc, #56]	; (1afb4 <lv_refr_area_part+0x134>)
   1af7a:	9300      	str	r3, [sp, #0]
   1af7c:	490e      	ldr	r1, [pc, #56]	; (1afb8 <lv_refr_area_part+0x138>)
   1af7e:	4b0f      	ldr	r3, [pc, #60]	; (1afbc <lv_refr_area_part+0x13c>)
   1af80:	f240 220a 	movw	r2, #522	; 0x20a
   1af84:	2002      	movs	r0, #2
   1af86:	f002 fae7 	bl	1d558 <_lv_log_add>
   1af8a:	e7d0      	b.n	1af2e <lv_refr_area_part+0xae>
            lv_draw_rect_dsc_init(&dsc);
   1af8c:	f001 fde2 	bl	1cb54 <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
   1af90:	6823      	ldr	r3, [r4, #0]
   1af92:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
   1af96:	f8ad 201e 	strh.w	r2, [sp, #30]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1af9a:	a903      	add	r1, sp, #12
            dsc.bg_opa = disp_refr->bg_opa;
   1af9c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   1afa0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1afa4:	aa07      	add	r2, sp, #28
   1afa6:	4608      	mov	r0, r1
   1afa8:	f00e f989 	bl	292be <lv_draw_rect>
   1afac:	e7c0      	b.n	1af30 <lv_refr_area_part+0xb0>
   1afae:	bf00      	nop
   1afb0:	20003ebc 	.word	0x20003ebc
   1afb4:	0002fe0c 	.word	0x0002fe0c
   1afb8:	0002fdd5 	.word	0x0002fdd5
   1afbc:	0002feea 	.word	0x0002feea

0001afc0 <_lv_refr_get_disp_refreshing>:
}
   1afc0:	4b01      	ldr	r3, [pc, #4]	; (1afc8 <_lv_refr_get_disp_refreshing+0x8>)
   1afc2:	6818      	ldr	r0, [r3, #0]
   1afc4:	4770      	bx	lr
   1afc6:	bf00      	nop
   1afc8:	20003ebc 	.word	0x20003ebc

0001afcc <_lv_disp_refr_task>:
{
   1afcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afd0:	b08b      	sub	sp, #44	; 0x2c
   1afd2:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
   1afd4:	f00f f807 	bl	29fe6 <lv_tick_get>
    disp_refr = task->user_data;
   1afd8:	4cb9      	ldr	r4, [pc, #740]	; (1b2c0 <_lv_disp_refr_task+0x2f4>)
   1afda:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
   1afdc:	9005      	str	r0, [sp, #20]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   1afde:	2100      	movs	r1, #0
   1afe0:	4628      	mov	r0, r5
    disp_refr = task->user_data;
   1afe2:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   1afe4:	f002 fd7e 	bl	1dae4 <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
   1afe8:	6823      	ldr	r3, [r4, #0]
   1afea:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1afec:	2900      	cmp	r1, #0
   1afee:	f040 8092 	bne.w	1b116 <_lv_disp_refr_task+0x14a>
        disp_refr->inv_p = 0;
   1aff2:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
   1aff6:	f361 0209 	bfi	r2, r1, #0, #10
   1affa:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
}
   1affe:	b00b      	add	sp, #44	; 0x2c
   1b000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
   1b004:	4433      	add	r3, r6
   1b006:	f893 515a 	ldrb.w	r5, [r3, #346]	; 0x15a
   1b00a:	2d00      	cmp	r5, #0
   1b00c:	d044      	beq.n	1b098 <_lv_disp_refr_task+0xcc>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   1b00e:	3601      	adds	r6, #1
   1b010:	6823      	ldr	r3, [r4, #0]
   1b012:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
   1b016:	f3c2 0709 	ubfx	r7, r2, #0, #10
   1b01a:	42be      	cmp	r6, r7
   1b01c:	d3f2      	bcc.n	1b004 <_lv_disp_refr_task+0x38>
    px_num = 0;
   1b01e:	49a9      	ldr	r1, [pc, #676]	; (1b2c4 <_lv_disp_refr_task+0x2f8>)
   1b020:	2000      	movs	r0, #0
   1b022:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
   1b024:	2f00      	cmp	r7, #0
   1b026:	d178      	bne.n	1b11a <_lv_disp_refr_task+0x14e>
    if(disp_refr->inv_p != 0) {
   1b028:	4da5      	ldr	r5, [pc, #660]	; (1b2c0 <_lv_disp_refr_task+0x2f4>)
   1b02a:	6828      	ldr	r0, [r5, #0]
   1b02c:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
   1b030:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b034:	b35b      	cbz	r3, 1b08e <_lv_disp_refr_task+0xc2>
        if(lv_disp_is_true_double_buf(disp_refr)) {
   1b036:	f00e ffc7 	bl	29fc8 <lv_disp_is_true_double_buf>
   1b03a:	b160      	cbz	r0, 1b056 <_lv_disp_refr_task+0x8a>
            if(disp_refr->driver.set_px_cb) {
   1b03c:	6828      	ldr	r0, [r5, #0]
   1b03e:	6943      	ldr	r3, [r0, #20]
   1b040:	2b00      	cmp	r3, #0
   1b042:	f000 818f 	beq.w	1b364 <_lv_disp_refr_task+0x398>
                LV_LOG_WARN("Can't handle 2 screen sized buffers with set_px_cb. Display is not refreshed.");
   1b046:	4ba0      	ldr	r3, [pc, #640]	; (1b2c8 <_lv_disp_refr_task+0x2fc>)
   1b048:	9300      	str	r3, [sp, #0]
   1b04a:	49a0      	ldr	r1, [pc, #640]	; (1b2cc <_lv_disp_refr_task+0x300>)
   1b04c:	4ba0      	ldr	r3, [pc, #640]	; (1b2d0 <_lv_disp_refr_task+0x304>)
   1b04e:	22cf      	movs	r2, #207	; 0xcf
   1b050:	2002      	movs	r0, #2
   1b052:	f002 fa81 	bl	1d558 <_lv_log_add>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
   1b056:	6825      	ldr	r5, [r4, #0]
   1b058:	f44f 7180 	mov.w	r1, #256	; 0x100
   1b05c:	f105 005a 	add.w	r0, r5, #90	; 0x5a
   1b060:	f00c f9b8 	bl	273d4 <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
   1b064:	2120      	movs	r1, #32
   1b066:	f505 70ad 	add.w	r0, r5, #346	; 0x15a
   1b06a:	f00c f9b3 	bl	273d4 <_lv_memset_00>
        disp_refr->inv_p = 0;
   1b06e:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
   1b072:	9805      	ldr	r0, [sp, #20]
        disp_refr->inv_p = 0;
   1b074:	f36f 0309 	bfc	r3, #0, #10
   1b078:	f8a5 317a 	strh.w	r3, [r5, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
   1b07c:	f00e ffc0 	bl	2a000 <lv_tick_elaps>
   1b080:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
   1b082:	6820      	ldr	r0, [r4, #0]
   1b084:	6983      	ldr	r3, [r0, #24]
   1b086:	b113      	cbz	r3, 1b08e <_lv_disp_refr_task+0xc2>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
   1b088:	4a8e      	ldr	r2, [pc, #568]	; (1b2c4 <_lv_disp_refr_task+0x2f8>)
   1b08a:	6812      	ldr	r2, [r2, #0]
   1b08c:	4798      	blx	r3
    _lv_mem_buf_free_all();
   1b08e:	f002 fba7 	bl	1d7e0 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
   1b092:	f003 f867 	bl	1e164 <_lv_font_clean_up_fmt_txt>
    LV_LOG_TRACE("lv_refr_task: ready");
   1b096:	e7b2      	b.n	1affe <_lv_disp_refr_task+0x32>
   1b098:	00f7      	lsls	r7, r6, #3
   1b09a:	375a      	adds	r7, #90	; 0x5a
                disp_refr->inv_area_joined[join_from] = 1;
   1b09c:	f04f 0901 	mov.w	r9, #1
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   1b0a0:	6820      	ldr	r0, [r4, #0]
   1b0a2:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
   1b0a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b0aa:	429d      	cmp	r5, r3
   1b0ac:	d2af      	bcs.n	1b00e <_lv_disp_refr_task+0x42>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
   1b0ae:	1943      	adds	r3, r0, r5
   1b0b0:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   1b0b4:	bb6b      	cbnz	r3, 1b112 <_lv_disp_refr_task+0x146>
   1b0b6:	42ae      	cmp	r6, r5
   1b0b8:	d02b      	beq.n	1b112 <_lv_disp_refr_task+0x146>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
   1b0ba:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1b0be:	f10a 0a5a 	add.w	sl, sl, #90	; 0x5a
   1b0c2:	eb00 010a 	add.w	r1, r0, sl
   1b0c6:	4438      	add	r0, r7
   1b0c8:	f00f f8b5 	bl	2a236 <_lv_area_is_on>
   1b0cc:	b308      	cbz	r0, 1b112 <_lv_disp_refr_task+0x146>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
   1b0ce:	6821      	ldr	r1, [r4, #0]
   1b0d0:	a808      	add	r0, sp, #32
   1b0d2:	eb01 020a 	add.w	r2, r1, sl
   1b0d6:	4439      	add	r1, r7
   1b0d8:	f00f f802 	bl	2a0e0 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   1b0dc:	a808      	add	r0, sp, #32
   1b0de:	f00e ffc6 	bl	2a06e <lv_area_get_size>
   1b0e2:	4683      	mov	fp, r0
   1b0e4:	6820      	ldr	r0, [r4, #0]
   1b0e6:	4438      	add	r0, r7
   1b0e8:	f00e ffc1 	bl	2a06e <lv_area_get_size>
   1b0ec:	4680      	mov	r8, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
   1b0ee:	6820      	ldr	r0, [r4, #0]
   1b0f0:	4450      	add	r0, sl
   1b0f2:	f00e ffbc 	bl	2a06e <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   1b0f6:	4480      	add	r8, r0
   1b0f8:	45c3      	cmp	fp, r8
   1b0fa:	d20a      	bcs.n	1b112 <_lv_disp_refr_task+0x146>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
   1b0fc:	f8d4 8000 	ldr.w	r8, [r4]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   1b100:	eb08 0007 	add.w	r0, r8, r7
                disp_refr->inv_area_joined[join_from] = 1;
   1b104:	44a8      	add	r8, r5
   1b106:	2208      	movs	r2, #8
   1b108:	a908      	add	r1, sp, #32
   1b10a:	f00c f8c4 	bl	27296 <_lv_memcpy>
   1b10e:	f888 915a 	strb.w	r9, [r8, #346]	; 0x15a
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   1b112:	3501      	adds	r5, #1
   1b114:	e7c4      	b.n	1b0a0 <_lv_disp_refr_task+0xd4>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   1b116:	2600      	movs	r6, #0
   1b118:	e77a      	b.n	1b010 <_lv_disp_refr_task+0x44>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1b11a:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
   1b11c:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1b120:	1c79      	adds	r1, r7, #1
   1b122:	d159      	bne.n	1b1d8 <_lv_disp_refr_task+0x20c>
    int32_t last_i = 0;
   1b124:	2700      	movs	r7, #0
    disp_refr->driver.buffer->last_area = 0;
   1b126:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1b128:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1b2c0 <_lv_disp_refr_task+0x2f4>
    disp_refr->driver.buffer->last_area = 0;
   1b12c:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b130:	f36f 0200 	bfc	r2, #0, #1
   1b134:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
   1b138:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b13c:	f36f 0241 	bfc	r2, #1, #1
   1b140:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1b144:	f04f 0b00 	mov.w	fp, #0
   1b148:	f8d9 8000 	ldr.w	r8, [r9]
   1b14c:	f8b8 317a 	ldrh.w	r3, [r8, #378]	; 0x17a
   1b150:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b154:	459b      	cmp	fp, r3
   1b156:	f6bf af67 	bge.w	1b028 <_lv_disp_refr_task+0x5c>
        if(disp_refr->inv_area_joined[i] == 0) {
   1b15a:	eb08 030b 	add.w	r3, r8, fp
   1b15e:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   1b162:	2b00      	cmp	r3, #0
   1b164:	f040 80a5 	bne.w	1b2b2 <_lv_disp_refr_task+0x2e6>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
   1b168:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b16c:	45bb      	cmp	fp, r7
   1b16e:	bf02      	ittt	eq
   1b170:	f893 2020 	ldrbeq.w	r2, [r3, #32]
   1b174:	f042 0201 	orreq.w	r2, r2, #1
   1b178:	f883 2020 	strbeq.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
   1b17c:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b180:	ea4f 05cb 	mov.w	r5, fp, lsl #3
   1b184:	f36f 0241 	bfc	r2, #1, #1
   1b188:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
   1b18c:	f105 035a 	add.w	r3, r5, #90	; 0x5a
   1b190:	9304      	str	r3, [sp, #16]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   1b192:	4640      	mov	r0, r8
            lv_refr_area(&disp_refr->inv_areas[i]);
   1b194:	4443      	add	r3, r8
   1b196:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   1b198:	f00e ff16 	bl	29fc8 <lv_disp_is_true_double_buf>
   1b19c:	b308      	cbz	r0, 1b1e2 <_lv_disp_refr_task+0x216>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b19e:	6820      	ldr	r0, [r4, #0]
   1b1a0:	f00e ff08 	bl	29fb4 <lv_disp_get_buf>
        vdb->area.x1        = 0;
   1b1a4:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b1a6:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
   1b1a8:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
   1b1aa:	6820      	ldr	r0, [r4, #0]
   1b1ac:	f002 f904 	bl	1d3b8 <lv_disp_get_hor_res>
   1b1b0:	3801      	subs	r0, #1
   1b1b2:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
   1b1b4:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1b1b6:	6820      	ldr	r0, [r4, #0]
   1b1b8:	f002 f90e 	bl	1d3d8 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
   1b1bc:	6823      	ldr	r3, [r4, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1b1be:	3801      	subs	r0, #1
        disp_refr->driver.buffer->last_part = 1;
   1b1c0:	685a      	ldr	r2, [r3, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1b1c2:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
   1b1c4:	f892 3020 	ldrb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   1b1c8:	9803      	ldr	r0, [sp, #12]
            disp_refr->driver.buffer->last_part = 1;
   1b1ca:	f043 0302 	orr.w	r3, r3, #2
   1b1ce:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   1b1d2:	f7ff fe55 	bl	1ae80 <lv_refr_area_part>
   1b1d6:	e060      	b.n	1b29a <_lv_disp_refr_task+0x2ce>
        if(disp_refr->inv_area_joined[i] == 0) {
   1b1d8:	5dd1      	ldrb	r1, [r2, r7]
   1b1da:	2900      	cmp	r1, #0
   1b1dc:	d0a3      	beq.n	1b126 <_lv_disp_refr_task+0x15a>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1b1de:	3f01      	subs	r7, #1
   1b1e0:	e79e      	b.n	1b120 <_lv_disp_refr_task+0x154>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b1e2:	4445      	add	r5, r8
   1b1e4:	6820      	ldr	r0, [r4, #0]
   1b1e6:	f00e fee5 	bl	29fb4 <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b1ea:	f8b5 805e 	ldrh.w	r8, [r5, #94]	; 0x5e
   1b1ee:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b1f2:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b1f6:	f108 0801 	add.w	r8, r8, #1
   1b1fa:	eba8 0803 	sub.w	r8, r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b1fe:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	; 0x60
   1b202:	9302      	str	r3, [sp, #8]
   1b204:	f103 0a01 	add.w	sl, r3, #1
   1b208:	4606      	mov	r6, r0
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   1b20a:	6820      	ldr	r0, [r4, #0]
   1b20c:	ebaa 0a02 	sub.w	sl, sl, r2
   1b210:	f002 f8e2 	bl	1d3d8 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   1b214:	9b02      	ldr	r3, [sp, #8]
   1b216:	4283      	cmp	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b218:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b21c:	fa0f fa8a 	sxth.w	sl, sl
   1b220:	db4a      	blt.n	1b2b8 <_lv_disp_refr_task+0x2ec>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   1b222:	6820      	ldr	r0, [r4, #0]
   1b224:	f002 f8d8 	bl	1d3d8 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   1b228:	1e43      	subs	r3, r0, #1
   1b22a:	b21b      	sxth	r3, r3
        int32_t max_row = (uint32_t)vdb->size / w;
   1b22c:	68f2      	ldr	r2, [r6, #12]
   1b22e:	fbb2 f8f8 	udiv	r8, r2, r8
        if(max_row > h) max_row = h;
   1b232:	45c2      	cmp	sl, r8
   1b234:	4652      	mov	r2, sl
   1b236:	bfa8      	it	ge
   1b238:	4642      	movge	r2, r8
   1b23a:	9202      	str	r2, [sp, #8]
        if(disp_refr->driver.rounder_cb) {
   1b23c:	4a20      	ldr	r2, [pc, #128]	; (1b2c0 <_lv_disp_refr_task+0x2f4>)
   1b23e:	6812      	ldr	r2, [r2, #0]
   1b240:	6912      	ldr	r2, [r2, #16]
   1b242:	2a00      	cmp	r2, #0
   1b244:	d04e      	beq.n	1b2e4 <_lv_disp_refr_task+0x318>
            tmp.x1 = 0;
   1b246:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
   1b248:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
            tmp.x1 = 0;
   1b24c:	9208      	str	r2, [sp, #32]
            tmp.x2 = 0;
   1b24e:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1b252:	f8d9 0000 	ldr.w	r0, [r9]
   1b256:	9306      	str	r3, [sp, #24]
                tmp.y2 = h_tmp - 1;
   1b258:	46c2      	mov	sl, r8
   1b25a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b25e:	fa0f f888 	sxth.w	r8, r8
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1b262:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
   1b264:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1b268:	a908      	add	r1, sp, #32
   1b26a:	4790      	blx	r2
   1b26c:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
   1b270:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
                if(lv_area_get_height(&tmp) <= max_row) break;
   1b274:	9b02      	ldr	r3, [sp, #8]
   1b276:	3101      	adds	r1, #1
   1b278:	1a8a      	subs	r2, r1, r2
   1b27a:	b212      	sxth	r2, r2
   1b27c:	4293      	cmp	r3, r2
   1b27e:	9b06      	ldr	r3, [sp, #24]
   1b280:	da2c      	bge.n	1b2dc <_lv_disp_refr_task+0x310>
            } while(h_tmp > 0);
   1b282:	f1b8 0f00 	cmp.w	r8, #0
   1b286:	dce4      	bgt.n	1b252 <_lv_disp_refr_task+0x286>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
   1b288:	4b12      	ldr	r3, [pc, #72]	; (1b2d4 <_lv_disp_refr_task+0x308>)
   1b28a:	9300      	str	r3, [sp, #0]
   1b28c:	490f      	ldr	r1, [pc, #60]	; (1b2cc <_lv_disp_refr_task+0x300>)
   1b28e:	4b12      	ldr	r3, [pc, #72]	; (1b2d8 <_lv_disp_refr_task+0x30c>)
   1b290:	f240 12b7 	movw	r2, #439	; 0x1b7
   1b294:	2002      	movs	r0, #2
   1b296:	f002 f95f 	bl	1d558 <_lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   1b29a:	f8d9 0000 	ldr.w	r0, [r9]
   1b29e:	6983      	ldr	r3, [r0, #24]
   1b2a0:	b13b      	cbz	r3, 1b2b2 <_lv_disp_refr_task+0x2e6>
   1b2a2:	9b04      	ldr	r3, [sp, #16]
   1b2a4:	4418      	add	r0, r3
   1b2a6:	f00e fee2 	bl	2a06e <lv_area_get_size>
   1b2aa:	4a06      	ldr	r2, [pc, #24]	; (1b2c4 <_lv_disp_refr_task+0x2f8>)
   1b2ac:	6813      	ldr	r3, [r2, #0]
   1b2ae:	4403      	add	r3, r0
   1b2b0:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1b2b2:	f10b 0b01 	add.w	fp, fp, #1
   1b2b6:	e747      	b.n	1b148 <_lv_disp_refr_task+0x17c>
        lv_coord_t y2 =
   1b2b8:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	; 0x60
   1b2bc:	e7b6      	b.n	1b22c <_lv_disp_refr_task+0x260>
   1b2be:	bf00      	nop
   1b2c0:	20003ebc 	.word	0x20003ebc
   1b2c4:	20003ec0 	.word	0x20003ec0
   1b2c8:	0002fe7c 	.word	0x0002fe7c
   1b2cc:	0002fdd5 	.word	0x0002fdd5
   1b2d0:	0002feca 	.word	0x0002feca
   1b2d4:	0002fe2c 	.word	0x0002fe2c
   1b2d8:	0002fedd 	.word	0x0002fedd
            if(h_tmp <= 0) {
   1b2dc:	f1ba 0f00 	cmp.w	sl, #0
   1b2e0:	ddd2      	ble.n	1b288 <_lv_disp_refr_task+0x2bc>
                max_row = tmp.y2 + 1;
   1b2e2:	9102      	str	r1, [sp, #8]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1b2e4:	9a02      	ldr	r2, [sp, #8]
   1b2e6:	f9b5 a05c 	ldrsh.w	sl, [r5, #92]	; 0x5c
        lv_coord_t row_last = 0;
   1b2ea:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1b2ee:	3a01      	subs	r2, #1
   1b2f0:	eb02 010a 	add.w	r1, r2, sl
   1b2f4:	4299      	cmp	r1, r3
   1b2f6:	dd0d      	ble.n	1b314 <_lv_disp_refr_task+0x348>
        if(y2 != row_last) {
   1b2f8:	4543      	cmp	r3, r8
   1b2fa:	d0ce      	beq.n	1b29a <_lv_disp_refr_task+0x2ce>
            vdb->area.x1 = area_p->x1;
   1b2fc:	f9b5 105a 	ldrsh.w	r1, [r5, #90]	; 0x5a
   1b300:	6822      	ldr	r2, [r4, #0]
   1b302:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   1b304:	f9b5 105e 	ldrsh.w	r1, [r5, #94]	; 0x5e
            disp_refr->driver.buffer->last_part = 1;
   1b308:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
   1b30a:	82b1      	strh	r1, [r6, #20]
            vdb->area.y1 = row;
   1b30c:	f8a6 a012 	strh.w	sl, [r6, #18]
            vdb->area.y2 = y2;
   1b310:	82f3      	strh	r3, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
   1b312:	e757      	b.n	1b1c4 <_lv_disp_refr_task+0x1f8>
            vdb->area.x1 = area_p->x1;
   1b314:	f9b5 105a 	ldrsh.w	r1, [r5, #90]	; 0x5a
   1b318:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   1b31a:	f9b5 105e 	ldrsh.w	r1, [r5, #94]	; 0x5e
   1b31e:	82b1      	strh	r1, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
   1b320:	9902      	ldr	r1, [sp, #8]
            vdb->area.y1 = row;
   1b322:	f8a6 a012 	strh.w	sl, [r6, #18]
            vdb->area.y2 = row + max_row - 1;
   1b326:	448a      	add	sl, r1
   1b328:	fa0f fa8a 	sxth.w	sl, sl
   1b32c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   1b330:	fa0f f888 	sxth.w	r8, r8
   1b334:	4598      	cmp	r8, r3
   1b336:	bfa8      	it	ge
   1b338:	4698      	movge	r8, r3
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   1b33a:	4543      	cmp	r3, r8
            vdb->area.y2 = row + max_row - 1;
   1b33c:	f8a6 8016 	strh.w	r8, [r6, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   1b340:	d108      	bne.n	1b354 <_lv_disp_refr_task+0x388>
   1b342:	f8d9 1000 	ldr.w	r1, [r9]
   1b346:	6848      	ldr	r0, [r1, #4]
   1b348:	f890 1020 	ldrb.w	r1, [r0, #32]
   1b34c:	f041 0102 	orr.w	r1, r1, #2
   1b350:	f880 1020 	strb.w	r1, [r0, #32]
            lv_refr_area_part(area_p);
   1b354:	9803      	ldr	r0, [sp, #12]
   1b356:	e9cd 3206 	strd	r3, r2, [sp, #24]
   1b35a:	f7ff fd91 	bl	1ae80 <lv_refr_area_part>
   1b35e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1b362:	e7c5      	b.n	1b2f0 <_lv_disp_refr_task+0x324>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b364:	f00e fe26 	bl	29fb4 <lv_disp_get_buf>
   1b368:	4605      	mov	r5, r0
                lv_refr_vdb_flush();
   1b36a:	f7ff fd25 	bl	1adb8 <lv_refr_vdb_flush>
                while(vdb->flushing);
   1b36e:	69ab      	ldr	r3, [r5, #24]
   1b370:	2b00      	cmp	r3, #0
   1b372:	d1fc      	bne.n	1b36e <_lv_disp_refr_task+0x3a2>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   1b374:	6823      	ldr	r3, [r4, #0]
   1b376:	f9b3 0000 	ldrsh.w	r0, [r3]
   1b37a:	0040      	lsls	r0, r0, #1
   1b37c:	f002 f996 	bl	1d6ac <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   1b380:	68ab      	ldr	r3, [r5, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1b382:	f8d5 b000 	ldr.w	fp, [r5]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   1b386:	9303      	str	r3, [sp, #12]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1b388:	459b      	cmp	fp, r3
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1b38a:	4b29      	ldr	r3, [pc, #164]	; (1b430 <_lv_disp_refr_task+0x464>)
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1b38c:	bf08      	it	eq
   1b38e:	f8d5 b004 	ldreq.w	fp, [r5, #4]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   1b392:	4606      	mov	r6, r0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1b394:	6818      	ldr	r0, [r3, #0]
   1b396:	f002 f80f 	bl	1d3b8 <lv_disp_get_hor_res>
                            start_offs += hres * sizeof(lv_color_t);
   1b39a:	0043      	lsls	r3, r0, #1
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1b39c:	9004      	str	r0, [sp, #16]
                            start_offs += hres * sizeof(lv_color_t);
   1b39e:	9302      	str	r3, [sp, #8]
                for(a = 0; a < disp_refr->inv_p; a++) {
   1b3a0:	f04f 0900 	mov.w	r9, #0
   1b3a4:	4b22      	ldr	r3, [pc, #136]	; (1b430 <_lv_disp_refr_task+0x464>)
   1b3a6:	681d      	ldr	r5, [r3, #0]
   1b3a8:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
   1b3ac:	fa1f f289 	uxth.w	r2, r9
   1b3b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b3b4:	4293      	cmp	r3, r2
   1b3b6:	d806      	bhi.n	1b3c6 <_lv_disp_refr_task+0x3fa>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
   1b3b8:	2e00      	cmp	r6, #0
   1b3ba:	f43f ae4c 	beq.w	1b056 <_lv_disp_refr_task+0x8a>
   1b3be:	4630      	mov	r0, r6
   1b3c0:	f002 f9d6 	bl	1d770 <_lv_mem_buf_release>
   1b3c4:	e647      	b.n	1b056 <_lv_disp_refr_task+0x8a>
                    if(disp_refr->inv_area_joined[a] == 0) {
   1b3c6:	eb05 0309 	add.w	r3, r5, r9
   1b3ca:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   1b3ce:	b113      	cbz	r3, 1b3d6 <_lv_disp_refr_task+0x40a>
                for(a = 0; a < disp_refr->inv_p; a++) {
   1b3d0:	f109 0901 	add.w	r9, r9, #1
   1b3d4:	e7e6      	b.n	1b3a4 <_lv_disp_refr_task+0x3d8>
                        uint32_t start_offs =
   1b3d6:	eb05 05c9 	add.w	r5, r5, r9, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
   1b3da:	9a04      	ldr	r2, [sp, #16]
   1b3dc:	f9b5 305a 	ldrsh.w	r3, [r5, #90]	; 0x5a
   1b3e0:	f9b5 705c 	ldrsh.w	r7, [r5, #92]	; 0x5c
   1b3e4:	fb02 3807 	mla	r8, r2, r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b3e8:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
   1b3ec:	3201      	adds	r2, #1
   1b3ee:	1ad2      	subs	r2, r2, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   1b3f0:	b212      	sxth	r2, r2
   1b3f2:	ea4f 0a42 	mov.w	sl, r2, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1b3f6:	9a03      	ldr	r2, [sp, #12]
   1b3f8:	eb0b 0348 	add.w	r3, fp, r8, lsl #1
   1b3fc:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1b400:	f9b5 1060 	ldrsh.w	r1, [r5, #96]	; 0x60
   1b404:	42b9      	cmp	r1, r7
   1b406:	dbe3      	blt.n	1b3d0 <_lv_disp_refr_task+0x404>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
   1b408:	4619      	mov	r1, r3
   1b40a:	4652      	mov	r2, sl
   1b40c:	4630      	mov	r0, r6
   1b40e:	9306      	str	r3, [sp, #24]
   1b410:	f00b ff41 	bl	27296 <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
   1b414:	4652      	mov	r2, sl
   1b416:	4640      	mov	r0, r8
   1b418:	4631      	mov	r1, r6
   1b41a:	f00b ff3c 	bl	27296 <_lv_memcpy>
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1b41e:	9b02      	ldr	r3, [sp, #8]
   1b420:	461a      	mov	r2, r3
   1b422:	9b06      	ldr	r3, [sp, #24]
   1b424:	3701      	adds	r7, #1
   1b426:	b23f      	sxth	r7, r7
   1b428:	4413      	add	r3, r2
   1b42a:	4490      	add	r8, r2
   1b42c:	e7e8      	b.n	1b400 <_lv_disp_refr_task+0x434>
   1b42e:	bf00      	nop
   1b430:	20003ebc 	.word	0x20003ebc

0001b434 <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
   1b434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b436:	4604      	mov	r4, r0
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
   1b438:	7900      	ldrb	r0, [r0, #4]
{
   1b43a:	460e      	mov	r6, r1
    if(list->style_cnt == 0) return;
   1b43c:	f010 013f 	ands.w	r1, r0, #63	; 0x3f
   1b440:	d004      	beq.n	1b44c <_lv_style_list_remove_style+0x18>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
   1b442:	460b      	mov	r3, r1
   1b444:	2200      	movs	r2, #0
   1b446:	b2d0      	uxtb	r0, r2
   1b448:	4283      	cmp	r3, r0
   1b44a:	d801      	bhi.n	1b450 <_lv_style_list_remove_style+0x1c>

    lv_mem_free(list->style_list);

    list->style_cnt--;
    list->style_list = new_classes;
}
   1b44c:	b003      	add	sp, #12
   1b44e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
   1b450:	6820      	ldr	r0, [r4, #0]
   1b452:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   1b456:	42b5      	cmp	r5, r6
   1b458:	f102 0201 	add.w	r2, r2, #1
   1b45c:	d1f3      	bne.n	1b446 <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
   1b45e:	2901      	cmp	r1, #1
   1b460:	d108      	bne.n	1b474 <_lv_style_list_remove_style+0x40>
        lv_mem_free(list->style_list);
   1b462:	f002 f8c9 	bl	1d5f8 <lv_mem_free>
        list->style_list = NULL;
   1b466:	2300      	movs	r3, #0
   1b468:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
   1b46a:	7923      	ldrb	r3, [r4, #4]
   1b46c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1b470:	7123      	strb	r3, [r4, #4]
        return;
   1b472:	e7eb      	b.n	1b44c <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
   1b474:	1e58      	subs	r0, r3, #1
   1b476:	0080      	lsls	r0, r0, #2
   1b478:	f002 f896 	bl	1d5a8 <lv_mem_alloc>
    if(new_classes == NULL) {
   1b47c:	4605      	mov	r5, r0
   1b47e:	b190      	cbz	r0, 1b4a6 <_lv_style_list_remove_style+0x72>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   1b480:	7921      	ldrb	r1, [r4, #4]
   1b482:	6820      	ldr	r0, [r4, #0]
   1b484:	2300      	movs	r3, #0
   1b486:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1b48a:	461a      	mov	r2, r3
   1b48c:	b2df      	uxtb	r7, r3
   1b48e:	42b9      	cmp	r1, r7
   1b490:	d813      	bhi.n	1b4ba <_lv_style_list_remove_style+0x86>
    lv_mem_free(list->style_list);
   1b492:	f002 f8b1 	bl	1d5f8 <lv_mem_free>
    list->style_cnt--;
   1b496:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
   1b498:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
   1b49a:	f103 023f 	add.w	r2, r3, #63	; 0x3f
   1b49e:	f362 0305 	bfi	r3, r2, #0, #6
   1b4a2:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
   1b4a4:	e7d2      	b.n	1b44c <_lv_style_list_remove_style+0x18>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
   1b4a6:	4b0a      	ldr	r3, [pc, #40]	; (1b4d0 <_lv_style_list_remove_style+0x9c>)
   1b4a8:	9300      	str	r3, [sp, #0]
   1b4aa:	490a      	ldr	r1, [pc, #40]	; (1b4d4 <_lv_style_list_remove_style+0xa0>)
   1b4ac:	4b0a      	ldr	r3, [pc, #40]	; (1b4d8 <_lv_style_list_remove_style+0xa4>)
   1b4ae:	f240 1207 	movw	r2, #263	; 0x107
   1b4b2:	2002      	movs	r0, #2
   1b4b4:	f002 f850 	bl	1d558 <_lv_log_add>
        return;
   1b4b8:	e7c8      	b.n	1b44c <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
   1b4ba:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
   1b4be:	42b7      	cmp	r7, r6
        new_classes[j] = list->style_list[i];
   1b4c0:	bf1e      	ittt	ne
   1b4c2:	f845 7022 	strne.w	r7, [r5, r2, lsl #2]
        j++;
   1b4c6:	3201      	addne	r2, #1
   1b4c8:	b2d2      	uxtbne	r2, r2
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   1b4ca:	3301      	adds	r3, #1
   1b4cc:	e7de      	b.n	1b48c <_lv_style_list_remove_style+0x58>
   1b4ce:	bf00      	nop
   1b4d0:	0002ff34 	.word	0x0002ff34
   1b4d4:	0002fefc 	.word	0x0002fefc
   1b4d8:	0002ffe5 	.word	0x0002ffe5

0001b4dc <_lv_style_list_add_style>:
{
   1b4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b4de:	460d      	mov	r5, r1
    if(list == NULL) return;
   1b4e0:	4604      	mov	r4, r0
   1b4e2:	b180      	cbz	r0, 1b506 <_lv_style_list_add_style+0x2a>
    _lv_style_list_remove_style(list, style);
   1b4e4:	f7ff ffa6 	bl	1b434 <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
   1b4e8:	7921      	ldrb	r1, [r4, #4]
   1b4ea:	0688      	lsls	r0, r1, #26
   1b4ec:	d10d      	bne.n	1b50a <_lv_style_list_add_style+0x2e>
   1b4ee:	2004      	movs	r0, #4
   1b4f0:	f002 f85a 	bl	1d5a8 <lv_mem_alloc>
    if(new_classes == NULL) {
   1b4f4:	b988      	cbnz	r0, 1b51a <_lv_style_list_add_style+0x3e>
        LV_LOG_WARN("lv_style_list_add_style: couldn't add the class");
   1b4f6:	4b17      	ldr	r3, [pc, #92]	; (1b554 <_lv_style_list_add_style+0x78>)
   1b4f8:	9300      	str	r3, [sp, #0]
   1b4fa:	4917      	ldr	r1, [pc, #92]	; (1b558 <_lv_style_list_add_style+0x7c>)
   1b4fc:	4b17      	ldr	r3, [pc, #92]	; (1b55c <_lv_style_list_add_style+0x80>)
   1b4fe:	22d3      	movs	r2, #211	; 0xd3
   1b500:	2002      	movs	r0, #2
   1b502:	f002 f829 	bl	1d558 <_lv_log_add>
}
   1b506:	b003      	add	sp, #12
   1b508:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
   1b50a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1b50e:	3101      	adds	r1, #1
   1b510:	6820      	ldr	r0, [r4, #0]
   1b512:	0089      	lsls	r1, r1, #2
   1b514:	f002 f88e 	bl	1d634 <lv_mem_realloc>
   1b518:	e7ec      	b.n	1b4f4 <_lv_style_list_add_style+0x18>
    if(list->has_trans) first_style++;
   1b51a:	7923      	ldrb	r3, [r4, #4]
    if(list->has_local) first_style++;
   1b51c:	0659      	lsls	r1, r3, #25
    if(list->has_trans) first_style++;
   1b51e:	ea4f 12d3 	mov.w	r2, r3, lsr #7
    for(i = list->style_cnt; i > first_style; i--) {
   1b522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if(list->has_local) first_style++;
   1b526:	bf48      	it	mi
   1b528:	3201      	addmi	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
   1b52a:	4619      	mov	r1, r3
   1b52c:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   1b530:	4291      	cmp	r1, r2
   1b532:	d808      	bhi.n	1b546 <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
   1b534:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    list->style_cnt++;
   1b538:	7922      	ldrb	r2, [r4, #4]
    list->style_list = new_classes;
   1b53a:	6020      	str	r0, [r4, #0]
    list->style_cnt++;
   1b53c:	3301      	adds	r3, #1
   1b53e:	f363 0205 	bfi	r2, r3, #0, #6
   1b542:	7122      	strb	r2, [r4, #4]
    list->style_list = new_classes;
   1b544:	e7df      	b.n	1b506 <_lv_style_list_add_style+0x2a>
        new_classes[i] = new_classes[i - 1];
   1b546:	f856 7c04 	ldr.w	r7, [r6, #-4]
   1b54a:	f846 7904 	str.w	r7, [r6], #-4
    for(i = list->style_cnt; i > first_style; i--) {
   1b54e:	3901      	subs	r1, #1
   1b550:	b2c9      	uxtb	r1, r1
   1b552:	e7ed      	b.n	1b530 <_lv_style_list_add_style+0x54>
   1b554:	0002ff6f 	.word	0x0002ff6f
   1b558:	0002fefc 	.word	0x0002fefc
   1b55c:	0002ffcc 	.word	0x0002ffcc

0001b560 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
   1b560:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   1b562:	7901      	ldrb	r1, [r0, #4]
   1b564:	064b      	lsls	r3, r1, #25
{
   1b566:	4604      	mov	r4, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   1b568:	d505      	bpl.n	1b576 <get_alloc_local_style+0x16>
   1b56a:	09c9      	lsrs	r1, r1, #7
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
   1b56c:	b003      	add	sp, #12
   1b56e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   1b572:	f00b bf93 	b.w	2749c <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
   1b576:	2004      	movs	r0, #4
   1b578:	f002 f816 	bl	1d5a8 <lv_mem_alloc>
    if(local_style == NULL) {
   1b57c:	4605      	mov	r5, r0
   1b57e:	b958      	cbnz	r0, 1b598 <get_alloc_local_style+0x38>
        LV_LOG_WARN("get_local_style: couldn't create local style");
   1b580:	4b0b      	ldr	r3, [pc, #44]	; (1b5b0 <get_alloc_local_style+0x50>)
   1b582:	9300      	str	r3, [sp, #0]
   1b584:	490b      	ldr	r1, [pc, #44]	; (1b5b4 <get_alloc_local_style+0x54>)
   1b586:	4b0c      	ldr	r3, [pc, #48]	; (1b5b8 <get_alloc_local_style+0x58>)
   1b588:	f44f 628b 	mov.w	r2, #1112	; 0x458
   1b58c:	2002      	movs	r0, #2
   1b58e:	f001 ffe3 	bl	1d558 <_lv_log_add>
}
   1b592:	4628      	mov	r0, r5
   1b594:	b003      	add	sp, #12
   1b596:	bd30      	pop	{r4, r5, pc}
    lv_style_init(local_style);
   1b598:	f00b fffa 	bl	27590 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
   1b59c:	4629      	mov	r1, r5
   1b59e:	4620      	mov	r0, r4
   1b5a0:	f7ff ff9c 	bl	1b4dc <_lv_style_list_add_style>
    list->has_local = 1;
   1b5a4:	7923      	ldrb	r3, [r4, #4]
   1b5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b5aa:	7123      	strb	r3, [r4, #4]
    return local_style;
   1b5ac:	e7f1      	b.n	1b592 <get_alloc_local_style+0x32>
   1b5ae:	bf00      	nop
   1b5b0:	0002ff9f 	.word	0x0002ff9f
   1b5b4:	0002fefc 	.word	0x0002fefc
   1b5b8:	00030001 	.word	0x00030001

0001b5bc <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
   1b5bc:	b570      	push	{r4, r5, r6, lr}
   1b5be:	b0a0      	sub	sp, #128	; 0x80
   1b5c0:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
   1b5c2:	a80b      	add	r0, sp, #44	; 0x2c
{
   1b5c4:	460d      	mov	r5, r1
   1b5c6:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
   1b5c8:	f001 fac4 	bl	1cb54 <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
   1b5cc:	4b0a      	ldr	r3, [pc, #40]	; (1b5f8 <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
   1b5ce:	aa0b      	add	r2, sp, #44	; 0x2c
    rect_dsc.bg_color = LV_COLOR_WHITE;
   1b5d0:	881b      	ldrh	r3, [r3, #0]
   1b5d2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
   1b5d6:	4629      	mov	r1, r5
   1b5d8:	4620      	mov	r0, r4
   1b5da:	f00d fe70 	bl	292be <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
   1b5de:	a803      	add	r0, sp, #12
   1b5e0:	f000 f918 	bl	1b814 <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
   1b5e4:	2300      	movs	r3, #0
   1b5e6:	9300      	str	r3, [sp, #0]
   1b5e8:	aa03      	add	r2, sp, #12
   1b5ea:	4633      	mov	r3, r6
   1b5ec:	4629      	mov	r1, r5
   1b5ee:	4620      	mov	r0, r4
   1b5f0:	f000 f926 	bl	1b840 <lv_draw_label>
}
   1b5f4:	b020      	add	sp, #128	; 0x80
   1b5f6:	bd70      	pop	{r4, r5, r6, pc}
   1b5f8:	0002c15a 	.word	0x0002c15a

0001b5fc <lv_img_cf_get_px_size>:
    switch(cf) {
   1b5fc:	3804      	subs	r0, #4
   1b5fe:	b2c0      	uxtb	r0, r0
   1b600:	280a      	cmp	r0, #10
   1b602:	bf9a      	itte	ls
   1b604:	4b01      	ldrls	r3, [pc, #4]	; (1b60c <lv_img_cf_get_px_size+0x10>)
   1b606:	5c18      	ldrbls	r0, [r3, r0]
{
   1b608:	2000      	movhi	r0, #0
}
   1b60a:	4770      	bx	lr
   1b60c:	000300a2 	.word	0x000300a2

0001b610 <lv_draw_img>:
{
   1b610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b614:	4604      	mov	r4, r0
   1b616:	b08d      	sub	sp, #52	; 0x34
   1b618:	4688      	mov	r8, r1
   1b61a:	461f      	mov	r7, r3
    if(src == NULL) {
   1b61c:	4610      	mov	r0, r2
   1b61e:	b94a      	cbnz	r2, 1b634 <lv_draw_img+0x24>
        LV_LOG_WARN("Image draw: src is NULL");
   1b620:	4b75      	ldr	r3, [pc, #468]	; (1b7f8 <lv_draw_img+0x1e8>)
   1b622:	9300      	str	r3, [sp, #0]
   1b624:	4b75      	ldr	r3, [pc, #468]	; (1b7fc <lv_draw_img+0x1ec>)
   1b626:	2249      	movs	r2, #73	; 0x49
        LV_LOG_WARN("Image draw error");
   1b628:	4975      	ldr	r1, [pc, #468]	; (1b800 <lv_draw_img+0x1f0>)
   1b62a:	2002      	movs	r0, #2
   1b62c:	f001 ff94 	bl	1d558 <_lv_log_add>
        show_error(coords, mask, "No\ndata");
   1b630:	4a74      	ldr	r2, [pc, #464]	; (1b804 <lv_draw_img+0x1f4>)
   1b632:	e014      	b.n	1b65e <lv_draw_img+0x4e>
    if(dsc->opa <= LV_OPA_MIN) return;
   1b634:	781b      	ldrb	r3, [r3, #0]
   1b636:	2b02      	cmp	r3, #2
   1b638:	d967      	bls.n	1b70a <lv_draw_img+0xfa>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
   1b63a:	89b9      	ldrh	r1, [r7, #12]
   1b63c:	f001 faa8 	bl	1cb90 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
   1b640:	4605      	mov	r5, r0
   1b642:	2800      	cmp	r0, #0
   1b644:	f000 80b8 	beq.w	1b7b8 <lv_draw_img+0x1a8>
    if(cdsc->dec_dsc.error_msg != NULL) {
   1b648:	6983      	ldr	r3, [r0, #24]
   1b64a:	b16b      	cbz	r3, 1b668 <lv_draw_img+0x58>
        LV_LOG_WARN("Image draw error");
   1b64c:	4b6e      	ldr	r3, [pc, #440]	; (1b808 <lv_draw_img+0x1f8>)
   1b64e:	9300      	str	r3, [sp, #0]
   1b650:	22f3      	movs	r2, #243	; 0xf3
   1b652:	4b6e      	ldr	r3, [pc, #440]	; (1b80c <lv_draw_img+0x1fc>)
   1b654:	496a      	ldr	r1, [pc, #424]	; (1b800 <lv_draw_img+0x1f0>)
   1b656:	2002      	movs	r0, #2
   1b658:	f001 ff7e 	bl	1d558 <_lv_log_add>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
   1b65c:	69aa      	ldr	r2, [r5, #24]
        show_error(coords, mask, "No\ndata");
   1b65e:	4641      	mov	r1, r8
   1b660:	4620      	mov	r0, r4
   1b662:	f7ff ffab 	bl	1b5bc <show_error>
        return;
   1b666:	e050      	b.n	1b70a <lv_draw_img+0xfa>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
   1b668:	7b03      	ldrb	r3, [r0, #12]
   1b66a:	f003 031f 	and.w	r3, r3, #31
   1b66e:	4618      	mov	r0, r3
   1b670:	f00d f97d 	bl	2896e <lv_img_cf_is_chroma_keyed>
   1b674:	9003      	str	r0, [sp, #12]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   1b676:	4618      	mov	r0, r3
   1b678:	f00d f983 	bl	28982 <lv_img_cf_has_alpha>
    else if(cdsc->dec_dsc.img_data) {
   1b67c:	692b      	ldr	r3, [r5, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   1b67e:	9004      	str	r0, [sp, #16]
    else if(cdsc->dec_dsc.img_data) {
   1b680:	2b00      	cmp	r3, #0
   1b682:	d045      	beq.n	1b710 <lv_draw_img+0x100>
        lv_area_copy(&map_area_rot, coords);
   1b684:	a808      	add	r0, sp, #32
   1b686:	4621      	mov	r1, r4
   1b688:	f00c fef0 	bl	2846c <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
   1b68c:	887b      	ldrh	r3, [r7, #2]
   1b68e:	8938      	ldrh	r0, [r7, #8]
   1b690:	b913      	cbnz	r3, 1b698 <lv_draw_img+0x88>
   1b692:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1b696:	d028      	beq.n	1b6ea <lv_draw_img+0xda>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b698:	88e2      	ldrh	r2, [r4, #6]
   1b69a:	8861      	ldrh	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b69c:	8826      	ldrh	r6, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b69e:	3201      	adds	r2, #1
   1b6a0:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b6a2:	88a1      	ldrh	r1, [r4, #4]
   1b6a4:	3101      	adds	r1, #1
   1b6a6:	1b89      	subs	r1, r1, r6
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
   1b6a8:	1d3e      	adds	r6, r7, #4
   1b6aa:	e9cd 0600 	strd	r0, r6, [sp]
   1b6ae:	b21b      	sxth	r3, r3
   1b6b0:	b212      	sxth	r2, r2
   1b6b2:	b209      	sxth	r1, r1
   1b6b4:	a808      	add	r0, sp, #32
   1b6b6:	f00e fc0d 	bl	29ed4 <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
   1b6ba:	f9b4 2000 	ldrsh.w	r2, [r4]
   1b6be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   1b6c2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
   1b6c6:	4413      	add	r3, r2
   1b6c8:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   1b6cc:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1b6d0:	4419      	add	r1, r3
   1b6d2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
   1b6d6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   1b6da:	440a      	add	r2, r1
   1b6dc:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
   1b6e0:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1b6e4:	4413      	add	r3, r2
   1b6e6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
   1b6ea:	aa08      	add	r2, sp, #32
   1b6ec:	4641      	mov	r1, r8
   1b6ee:	a80a      	add	r0, sp, #40	; 0x28
   1b6f0:	f00e fccb 	bl	2a08a <_lv_area_intersect>
        if(union_ok == false) {
   1b6f4:	b148      	cbz	r0, 1b70a <lv_draw_img+0xfa>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
   1b6f6:	9b04      	ldr	r3, [sp, #16]
   1b6f8:	9301      	str	r3, [sp, #4]
   1b6fa:	9b03      	ldr	r3, [sp, #12]
   1b6fc:	9300      	str	r3, [sp, #0]
   1b6fe:	692a      	ldr	r2, [r5, #16]
   1b700:	463b      	mov	r3, r7
   1b702:	a90a      	add	r1, sp, #40	; 0x28
   1b704:	4620      	mov	r0, r4
   1b706:	f00c feb6 	bl	28476 <lv_draw_map>
}
   1b70a:	b00d      	add	sp, #52	; 0x34
   1b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
   1b710:	4622      	mov	r2, r4
   1b712:	4641      	mov	r1, r8
   1b714:	a806      	add	r0, sp, #24
   1b716:	f00e fcb8 	bl	2a08a <_lv_area_intersect>
        if(union_ok == false) {
   1b71a:	2800      	cmp	r0, #0
   1b71c:	d0f5      	beq.n	1b70a <lv_draw_img+0xfa>
   1b71e:	f8bd 601c 	ldrh.w	r6, [sp, #28]
   1b722:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1b726:	3601      	adds	r6, #1
   1b728:	1af6      	subs	r6, r6, r3
   1b72a:	b236      	sxth	r6, r6
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   1b72c:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1b730:	f001 ffbc 	bl	1d6ac <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
   1b734:	f10d 0a20 	add.w	sl, sp, #32
   1b738:	a906      	add	r1, sp, #24
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   1b73a:	4681      	mov	r9, r0
        lv_area_copy(&line, &mask_com);
   1b73c:	4650      	mov	r0, sl
   1b73e:	f00c fe95 	bl	2846c <lv_area_copy>
        lv_area_set_height(&line, 1);
   1b742:	2101      	movs	r1, #1
   1b744:	4650      	mov	r0, sl
   1b746:	f00e fc8d 	bl	2a064 <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
   1b74a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   1b74e:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
   1b752:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
   1b756:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b75a:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
   1b75c:	ebab 0101 	sub.w	r1, fp, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b760:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
   1b762:	9102      	str	r1, [sp, #8]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b764:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   1b766:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   1b76a:	459b      	cmp	fp, r3
   1b76c:	dd03      	ble.n	1b776 <lv_draw_img+0x166>
        _lv_mem_buf_release(buf);
   1b76e:	4648      	mov	r0, r9
   1b770:	f001 fffe 	bl	1d770 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
   1b774:	e7c9      	b.n	1b70a <lv_draw_img+0xfa>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
   1b776:	4652      	mov	r2, sl
   1b778:	4641      	mov	r1, r8
   1b77a:	a80a      	add	r0, sp, #40	; 0x28
   1b77c:	f00e fc85 	bl	2a08a <_lv_area_intersect>
            if(union_ok == false) continue;
   1b780:	2800      	cmp	r0, #0
   1b782:	d035      	beq.n	1b7f0 <lv_draw_img+0x1e0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b784:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   1b788:	9905      	ldr	r1, [sp, #20]
   1b78a:	f8cd 9000 	str.w	r9, [sp]
   1b78e:	4633      	mov	r3, r6
   1b790:	4628      	mov	r0, r5
   1b792:	f00e fbc1 	bl	29f18 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
   1b796:	2801      	cmp	r0, #1
   1b798:	d013      	beq.n	1b7c2 <lv_draw_img+0x1b2>
                lv_img_decoder_close(&cdsc->dec_dsc);
   1b79a:	4628      	mov	r0, r5
   1b79c:	f00e fbcc 	bl	29f38 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
   1b7a0:	4b1b      	ldr	r3, [pc, #108]	; (1b810 <lv_draw_img+0x200>)
   1b7a2:	9300      	str	r3, [sp, #0]
   1b7a4:	2002      	movs	r0, #2
   1b7a6:	4b19      	ldr	r3, [pc, #100]	; (1b80c <lv_draw_img+0x1fc>)
   1b7a8:	4915      	ldr	r1, [pc, #84]	; (1b800 <lv_draw_img+0x1f0>)
   1b7aa:	f44f 7298 	mov.w	r2, #304	; 0x130
   1b7ae:	f001 fed3 	bl	1d558 <_lv_log_add>
                _lv_mem_buf_release(buf);
   1b7b2:	4648      	mov	r0, r9
   1b7b4:	f001 ffdc 	bl	1d770 <_lv_mem_buf_release>
        LV_LOG_WARN("Image draw error");
   1b7b8:	4b13      	ldr	r3, [pc, #76]	; (1b808 <lv_draw_img+0x1f8>)
   1b7ba:	9300      	str	r3, [sp, #0]
   1b7bc:	2254      	movs	r2, #84	; 0x54
   1b7be:	4b0f      	ldr	r3, [pc, #60]	; (1b7fc <lv_draw_img+0x1ec>)
   1b7c0:	e732      	b.n	1b628 <lv_draw_img+0x18>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
   1b7c2:	9b04      	ldr	r3, [sp, #16]
   1b7c4:	9301      	str	r3, [sp, #4]
   1b7c6:	9b03      	ldr	r3, [sp, #12]
   1b7c8:	9300      	str	r3, [sp, #0]
   1b7ca:	464a      	mov	r2, r9
   1b7cc:	463b      	mov	r3, r7
   1b7ce:	a90a      	add	r1, sp, #40	; 0x28
   1b7d0:	4650      	mov	r0, sl
   1b7d2:	f00c fe50 	bl	28476 <lv_draw_map>
            line.y1++;
   1b7d6:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1b7da:	3301      	adds	r3, #1
   1b7dc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
   1b7e0:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1b7e4:	3301      	adds	r3, #1
   1b7e6:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
   1b7ea:	9b02      	ldr	r3, [sp, #8]
   1b7ec:	3301      	adds	r3, #1
   1b7ee:	9302      	str	r3, [sp, #8]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   1b7f0:	f10b 0b01 	add.w	fp, fp, #1
   1b7f4:	e7b7      	b.n	1b766 <lv_draw_img+0x156>
   1b7f6:	bf00      	nop
   1b7f8:	00030052 	.word	0x00030052
   1b7fc:	000300ad 	.word	0x000300ad
   1b800:	00030017 	.word	0x00030017
   1b804:	0003006a 	.word	0x0003006a
   1b808:	00030072 	.word	0x00030072
   1b80c:	000300b9 	.word	0x000300b9
   1b810:	00030083 	.word	0x00030083

0001b814 <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
   1b814:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
   1b816:	2120      	movs	r1, #32
{
   1b818:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
   1b81a:	f00d f8e2 	bl	289e2 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   1b81e:	23ff      	movs	r3, #255	; 0xff
   1b820:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
   1b822:	4b06      	ldr	r3, [pc, #24]	; (1b83c <lv_draw_label_dsc_init+0x28>)
   1b824:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
   1b826:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
   1b82a:	e9c4 3304 	strd	r3, r3, [r4, #16]
    dsc->color = LV_COLOR_BLACK;
   1b82e:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
   1b832:	6023      	str	r3, [r4, #0]
    dsc->sel_color = LV_COLOR_BLUE;
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
   1b834:	2300      	movs	r3, #0
   1b836:	7723      	strb	r3, [r4, #28]
}
   1b838:	bd10      	pop	{r4, pc}
   1b83a:	bf00      	nop
   1b83c:	20000820 	.word	0x20000820

0001b840 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
   1b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b844:	b0cb      	sub	sp, #300	; 0x12c
   1b846:	4688      	mov	r8, r1
   1b848:	9308      	str	r3, [sp, #32]
   1b84a:	2300      	movs	r3, #0
   1b84c:	931b      	str	r3, [sp, #108]	; 0x6c

    if(dsc->opa <= LV_OPA_MIN) return;
   1b84e:	7a13      	ldrb	r3, [r2, #8]
{
   1b850:	9e54      	ldr	r6, [sp, #336]	; 0x150
   1b852:	9005      	str	r0, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
   1b854:	2b02      	cmp	r3, #2
{
   1b856:	4614      	mov	r4, r2
    if(dsc->opa <= LV_OPA_MIN) return;
   1b858:	f240 80d1 	bls.w	1b9fe <lv_draw_label+0x1be>
    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
   1b85c:	9b08      	ldr	r3, [sp, #32]
   1b85e:	781b      	ldrb	r3, [r3, #0]
   1b860:	2b00      	cmp	r3, #0
   1b862:	f000 80cc 	beq.w	1b9fe <lv_draw_label+0x1be>
    const lv_font_t * font = dsc->font;
   1b866:	f8d2 b004 	ldr.w	fp, [r2, #4]

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
   1b86a:	460a      	mov	r2, r1
   1b86c:	4601      	mov	r1, r0
   1b86e:	a82b      	add	r0, sp, #172	; 0xac
   1b870:	f00e fc0b 	bl	2a08a <_lv_area_intersect>
    if(!clip_ok) return;
   1b874:	2800      	cmp	r0, #0
   1b876:	f000 80c2 	beq.w	1b9fe <lv_draw_label+0x1be>


    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
   1b87a:	7f63      	ldrb	r3, [r4, #29]
   1b87c:	079f      	lsls	r7, r3, #30
   1b87e:	f100 80c1 	bmi.w	1ba04 <lv_draw_label+0x1c4>
   1b882:	9b05      	ldr	r3, [sp, #20]
   1b884:	9a05      	ldr	r2, [sp, #20]
   1b886:	889b      	ldrh	r3, [r3, #4]
   1b888:	8812      	ldrh	r2, [r2, #0]
   1b88a:	3301      	adds	r3, #1
   1b88c:	1a9b      	subs	r3, r3, r2
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
   1b88e:	b21b      	sxth	r3, r3
                         dsc->flag);
        w = p.x;
    }

    int32_t line_height_font = lv_font_get_line_height(font);
    int32_t line_height = line_height_font + dsc->line_space;
   1b890:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   1b894:	9207      	str	r2, [sp, #28]

    /*Init variables for the first line*/
    int32_t line_width = 0;
    lv_point_t pos;
    pos.x = coords->x1;
   1b896:	9a05      	ldr	r2, [sp, #20]

    int32_t x_ofs = 0;
    int32_t y_ofs = 0;
    x_ofs = dsc->ofs_x;
    y_ofs = dsc->ofs_y;
    pos.y += y_ofs;
   1b898:	9905      	ldr	r1, [sp, #20]
    pos.x = coords->x1;
   1b89a:	f9b2 2000 	ldrsh.w	r2, [r2]
   1b89e:	9209      	str	r2, [sp, #36]	; 0x24
    x_ofs = dsc->ofs_x;
   1b8a0:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    pos.y += y_ofs;
   1b8a4:	884d      	ldrh	r5, [r1, #2]
    x_ofs = dsc->ofs_x;
   1b8a6:	9223      	str	r2, [sp, #140]	; 0x8c
    y_ofs = dsc->ofs_y;
   1b8a8:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    int32_t line_height_font = lv_font_get_line_height(font);
   1b8ac:	f9bb a008 	ldrsh.w	sl, [fp, #8]
    pos.y += y_ofs;
   1b8b0:	4415      	add	r5, r2
   1b8b2:	b22d      	sxth	r5, r5

    uint32_t line_start     = 0;
    int32_t last_line_start = -1;

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   1b8b4:	2e00      	cmp	r6, #0
   1b8b6:	f000 80b6 	beq.w	1ba26 <lv_draw_label+0x1e6>
   1b8ba:	2a00      	cmp	r2, #0
   1b8bc:	f040 80b5 	bne.w	1ba2a <lv_draw_label+0x1ea>
   1b8c0:	2d00      	cmp	r5, #0
   1b8c2:	f280 80b3 	bge.w	1ba2c <lv_draw_label+0x1ec>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
   1b8c6:	68b2      	ldr	r2, [r6, #8]
   1b8c8:	9907      	ldr	r1, [sp, #28]
   1b8ca:	1b52      	subs	r2, r2, r5
   1b8cc:	2a00      	cmp	r2, #0
   1b8ce:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
   1b8d2:	bfb8      	it	lt
   1b8d4:	4252      	neglt	r2, r2
   1b8d6:	eba1 010a 	sub.w	r1, r1, sl
   1b8da:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
            hint->line_start = -1;
   1b8de:	bfc4      	itt	gt
   1b8e0:	f04f 32ff 	movgt.w	r2, #4294967295	; 0xffffffff
   1b8e4:	6032      	strgt	r2, [r6, #0]
        }
        last_line_start = hint->line_start;
   1b8e6:	6832      	ldr	r2, [r6, #0]
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
   1b8e8:	2a00      	cmp	r2, #0
   1b8ea:	f2c0 809e 	blt.w	1ba2a <lv_draw_label+0x1ea>
        line_start = last_line_start;
   1b8ee:	9204      	str	r2, [sp, #16]
        pos.y += hint->y;
   1b8f0:	6872      	ldr	r2, [r6, #4]
   1b8f2:	4415      	add	r5, r2
   1b8f4:	b22d      	sxth	r5, r5
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1b8f6:	9f04      	ldr	r7, [sp, #16]
   1b8f8:	9808      	ldr	r0, [sp, #32]
   1b8fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1b8fe:	b21b      	sxth	r3, r3
   1b900:	931a      	str	r3, [sp, #104]	; 0x68
   1b902:	7f63      	ldrb	r3, [r4, #29]
   1b904:	9300      	str	r3, [sp, #0]
   1b906:	4438      	add	r0, r7
   1b908:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1b90a:	4659      	mov	r1, fp
   1b90c:	f002 f9ce 	bl	1dcac <_lv_txt_get_next_line>
   1b910:	9b04      	ldr	r3, [sp, #16]
   1b912:	18c3      	adds	r3, r0, r3
   1b914:	9306      	str	r3, [sp, #24]
    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
        /*Go to next line*/
        line_start = line_end;
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
        pos.y += line_height;
   1b916:	9b07      	ldr	r3, [sp, #28]
   1b918:	4453      	add	r3, sl
   1b91a:	461f      	mov	r7, r3
    while(pos.y + line_height_font < mask->y1) {
   1b91c:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
   1b920:	7f63      	ldrb	r3, [r4, #29]
   1b922:	eb05 020a 	add.w	r2, r5, sl
   1b926:	428a      	cmp	r2, r1
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1b928:	9a08      	ldr	r2, [sp, #32]
    while(pos.y + line_height_font < mask->y1) {
   1b92a:	f2c0 8081 	blt.w	1ba30 <lv_draw_label+0x1f0>

        if(txt[line_start] == '\0') return;
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
   1b92e:	9904      	ldr	r1, [sp, #16]
   1b930:	075e      	lsls	r6, r3, #29
   1b932:	eb02 0001 	add.w	r0, r2, r1
   1b936:	f140 80a1 	bpl.w	1ba7c <lv_draw_label+0x23c>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1b93a:	9906      	ldr	r1, [sp, #24]
   1b93c:	9e04      	ldr	r6, [sp, #16]
   1b93e:	9300      	str	r3, [sp, #0]
   1b940:	465a      	mov	r2, fp
   1b942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b946:	1b89      	subs	r1, r1, r6
   1b948:	f002 f95e 	bl	1dc08 <_lv_txt_get_width>
   1b94c:	9b05      	ldr	r3, [sp, #20]
   1b94e:	9a05      	ldr	r2, [sp, #20]
   1b950:	889b      	ldrh	r3, [r3, #4]
   1b952:	8812      	ldrh	r2, [r2, #0]
   1b954:	3301      	adds	r3, #1
   1b956:	1a9b      	subs	r3, r3, r2

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
   1b958:	b21b      	sxth	r3, r3
   1b95a:	1a18      	subs	r0, r3, r0
   1b95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b95e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1b962:	eb03 0060 	add.w	r0, r3, r0, asr #1
   1b966:	b203      	sxth	r3, r0

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
        pos.x += lv_area_get_width(coords) - line_width;
   1b968:	9309      	str	r3, [sp, #36]	; 0x24
    }

    lv_opa_t opa = dsc->opa;
   1b96a:	7a23      	ldrb	r3, [r4, #8]
   1b96c:	931d      	str	r3, [sp, #116]	; 0x74

    uint32_t sel_start = dsc->sel_start;
   1b96e:	6923      	ldr	r3, [r4, #16]
   1b970:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t sel_end = dsc->sel_end;
   1b972:	6963      	ldr	r3, [r4, #20]
   1b974:	930d      	str	r3, [sp, #52]	; 0x34
    if(sel_start > sel_end) {
   1b976:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
   1b97a:	4293      	cmp	r3, r2
   1b97c:	bf88      	it	hi
   1b97e:	e9cd 230c 	strdhi	r2, r3, [sp, #48]	; 0x30
        sel_start = sel_end;
        sel_end = tmp;
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
   1b982:	7fa3      	ldrb	r3, [r4, #30]
   1b984:	079a      	lsls	r2, r3, #30
   1b986:	d016      	beq.n	1b9b6 <lv_draw_label+0x176>
        lv_draw_line_dsc_init(&line_dsc);
   1b988:	a82f      	add	r0, sp, #188	; 0xbc
   1b98a:	f00d f836 	bl	289fa <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
   1b98e:	8823      	ldrh	r3, [r4, #0]
   1b990:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   1b994:	f99b 300e 	ldrsb.w	r3, [fp, #14]
        line_dsc.opa = dsc->opa;
        line_dsc.blend_mode = dsc->blend_mode;
   1b998:	7fe2      	ldrb	r2, [r4, #31]
   1b99a:	2b00      	cmp	r3, #0
   1b99c:	bf08      	it	eq
   1b99e:	2301      	moveq	r3, #1
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   1b9a0:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        line_dsc.opa = dsc->opa;
   1b9a4:	7a23      	ldrb	r3, [r4, #8]
   1b9a6:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
        line_dsc.blend_mode = dsc->blend_mode;
   1b9aa:	f89d 30c5 	ldrb.w	r3, [sp, #197]	; 0xc5
   1b9ae:	f362 0301 	bfi	r3, r2, #0, #2
   1b9b2:	f88d 30c5 	strb.w	r3, [sp, #197]	; 0xc5
    lv_color_t recolor;
    int32_t letter_w;


    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
   1b9b6:	a835      	add	r0, sp, #212	; 0xd4
   1b9b8:	f001 f8cc 	bl	1cb54 <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_color;
   1b9bc:	8863      	ldrh	r3, [r4, #2]
   1b9be:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6

    int32_t pos_x_start = pos.x;
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
   1b9c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1b9c4:	2bfd      	cmp	r3, #253	; 0xfd
   1b9c6:	bf88      	it	hi
   1b9c8:	23ff      	movhi	r3, #255	; 0xff
   1b9ca:	9313      	str	r3, [sp, #76]	; 0x4c
   1b9cc:	9b07      	ldr	r3, [sp, #28]
   1b9ce:	4453      	add	r3, sl
   1b9d0:	b29b      	uxth	r3, r3
   1b9d2:	9324      	str	r3, [sp, #144]	; 0x90
   1b9d4:	b2ab      	uxth	r3, r5
   1b9d6:	9317      	str	r3, [sp, #92]	; 0x5c
    uint32_t par_start = 0;
   1b9d8:	2300      	movs	r3, #0
   1b9da:	9315      	str	r3, [sp, #84]	; 0x54
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
                    sel_coords.y1 = pos.y;
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
                    sel_coords.y2 = pos.y + line_height - 1;
   1b9dc:	9b07      	ldr	r3, [sp, #28]
    while(txt[line_start] != '\0') {
   1b9de:	9d09      	ldr	r5, [sp, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
   1b9e0:	1e5f      	subs	r7, r3, #1
   1b9e2:	eb07 030a 	add.w	r3, r7, sl
   1b9e6:	9329      	str	r3, [sp, #164]	; 0xa4
   1b9e8:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    while(txt[line_start] != '\0') {
   1b9ec:	9a04      	ldr	r2, [sp, #16]
   1b9ee:	9316      	str	r3, [sp, #88]	; 0x58
   1b9f0:	9b08      	ldr	r3, [sp, #32]
   1b9f2:	4413      	add	r3, r2
   1b9f4:	9314      	str	r3, [sp, #80]	; 0x50
   1b9f6:	9b08      	ldr	r3, [sp, #32]
   1b9f8:	5c9b      	ldrb	r3, [r3, r2]
   1b9fa:	2b00      	cmp	r3, #0
   1b9fc:	d156      	bne.n	1baac <lv_draw_label+0x26c>

        if(pos.y > mask->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
   1b9fe:	b04b      	add	sp, #300	; 0x12c
   1ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
   1ba04:	9302      	str	r3, [sp, #8]
   1ba06:	f647 4318 	movw	r3, #31768	; 0x7c18
   1ba0a:	9301      	str	r3, [sp, #4]
   1ba0c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   1ba10:	9300      	str	r3, [sp, #0]
   1ba12:	6862      	ldr	r2, [r4, #4]
   1ba14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ba18:	9908      	ldr	r1, [sp, #32]
   1ba1a:	a835      	add	r0, sp, #212	; 0xd4
   1ba1c:	f002 fa2a 	bl	1de74 <_lv_txt_get_size>
        w = p.x;
   1ba20:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
   1ba24:	e734      	b.n	1b890 <lv_draw_label+0x50>
    uint32_t line_start     = 0;
   1ba26:	9604      	str	r6, [sp, #16]
   1ba28:	e765      	b.n	1b8f6 <lv_draw_label+0xb6>
   1ba2a:	2200      	movs	r2, #0
   1ba2c:	9204      	str	r2, [sp, #16]
   1ba2e:	e762      	b.n	1b8f6 <lv_draw_label+0xb6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1ba30:	9906      	ldr	r1, [sp, #24]
   1ba32:	9300      	str	r3, [sp, #0]
   1ba34:	eb02 0901 	add.w	r9, r2, r1
   1ba38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1ba3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1ba3e:	4659      	mov	r1, fp
   1ba40:	4648      	mov	r0, r9
   1ba42:	f002 f933 	bl	1dcac <_lv_txt_get_next_line>
   1ba46:	9b06      	ldr	r3, [sp, #24]
        pos.y += line_height;
   1ba48:	443d      	add	r5, r7
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1ba4a:	4418      	add	r0, r3
        pos.y += line_height;
   1ba4c:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
   1ba4e:	b16e      	cbz	r6, 1ba6c <lv_draw_label+0x22c>
   1ba50:	f515 6f80 	cmn.w	r5, #1024	; 0x400
   1ba54:	db0a      	blt.n	1ba6c <lv_draw_label+0x22c>
   1ba56:	6833      	ldr	r3, [r6, #0]
   1ba58:	2b00      	cmp	r3, #0
   1ba5a:	da07      	bge.n	1ba6c <lv_draw_label+0x22c>
            hint->line_start = line_start;
   1ba5c:	9b06      	ldr	r3, [sp, #24]
   1ba5e:	6033      	str	r3, [r6, #0]
            hint->y          = pos.y - coords->y1;
   1ba60:	9b05      	ldr	r3, [sp, #20]
   1ba62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1ba66:	1aea      	subs	r2, r5, r3
            hint->coord_y    = coords->y1;
   1ba68:	e9c6 2301 	strd	r2, r3, [r6, #4]
        if(txt[line_start] == '\0') return;
   1ba6c:	9b06      	ldr	r3, [sp, #24]
   1ba6e:	9304      	str	r3, [sp, #16]
   1ba70:	f899 3000 	ldrb.w	r3, [r9]
   1ba74:	2b00      	cmp	r3, #0
   1ba76:	d0c2      	beq.n	1b9fe <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1ba78:	9006      	str	r0, [sp, #24]
   1ba7a:	e74f      	b.n	1b91c <lv_draw_label+0xdc>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   1ba7c:	0719      	lsls	r1, r3, #28
   1ba7e:	f57f af74 	bpl.w	1b96a <lv_draw_label+0x12a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1ba82:	9906      	ldr	r1, [sp, #24]
   1ba84:	9e04      	ldr	r6, [sp, #16]
   1ba86:	9300      	str	r3, [sp, #0]
   1ba88:	465a      	mov	r2, fp
   1ba8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ba8e:	1b89      	subs	r1, r1, r6
   1ba90:	f002 f8ba 	bl	1dc08 <_lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
   1ba94:	9b05      	ldr	r3, [sp, #20]
   1ba96:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ba98:	889b      	ldrh	r3, [r3, #4]
   1ba9a:	441a      	add	r2, r3
   1ba9c:	4613      	mov	r3, r2
   1ba9e:	9a05      	ldr	r2, [sp, #20]
   1baa0:	8812      	ldrh	r2, [r2, #0]
   1baa2:	3301      	adds	r3, #1
   1baa4:	1a9b      	subs	r3, r3, r2
   1baa6:	1a1b      	subs	r3, r3, r0
   1baa8:	b21b      	sxth	r3, r3
   1baaa:	e75d      	b.n	1b968 <lv_draw_label+0x128>
        pos.x += x_ofs;
   1baac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
                    sel_coords.y2 = pos.y + line_height - 1;
   1baae:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        pos.x += x_ofs;
   1bab0:	441d      	add	r5, r3
   1bab2:	b22b      	sxth	r3, r5
   1bab4:	930a      	str	r3, [sp, #40]	; 0x28
        i         = 0;
   1bab6:	2300      	movs	r3, #0
   1bab8:	932a      	str	r3, [sp, #168]	; 0xa8
        cmd_state = CMD_STATE_WAIT;
   1baba:	9307      	str	r3, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
   1babc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1babe:	4413      	add	r3, r2
   1bac0:	9328      	str	r3, [sp, #160]	; 0xa0
        while(i < line_end - line_start) {
   1bac2:	9b06      	ldr	r3, [sp, #24]
   1bac4:	9a04      	ldr	r2, [sp, #16]
   1bac6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1bac8:	1a9b      	subs	r3, r3, r2
   1baca:	428b      	cmp	r3, r1
   1bacc:	d877      	bhi.n	1bbbe <lv_draw_label+0x37e>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
   1bace:	7fa3      	ldrb	r3, [r4, #30]
   1bad0:	079e      	lsls	r6, r3, #30
   1bad2:	d51e      	bpl.n	1bb12 <lv_draw_label+0x2d2>
            p1.x = pos_x_start;
   1bad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bad6:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   1bada:	6863      	ldr	r3, [r4, #4]
   1badc:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
   1bae0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   1bae4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1bae8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   1baec:	1053      	asrs	r3, r2, #1
   1baee:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1baf0:	eb03 0361 	add.w	r3, r3, r1, asr #1
   1baf4:	4413      	add	r3, r2
   1baf6:	b21b      	sxth	r3, r3
            p2.x = pos.x;
   1baf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   1bafa:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            p2.x = pos.x;
   1bafe:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            p2.y = p1.y;
   1bb02:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   1bb06:	4642      	mov	r2, r8
   1bb08:	ab2f      	add	r3, sp, #188	; 0xbc
   1bb0a:	a932      	add	r1, sp, #200	; 0xc8
   1bb0c:	a82d      	add	r0, sp, #180	; 0xb4
   1bb0e:	f000 faf9 	bl	1c104 <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
   1bb12:	7fa3      	ldrb	r3, [r4, #30]
   1bb14:	07dd      	lsls	r5, r3, #31
   1bb16:	d519      	bpl.n	1bb4c <lv_draw_label+0x30c>
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   1bb18:	6862      	ldr	r2, [r4, #4]
            p1.x = pos_x_start;
   1bb1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bb1c:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   1bb20:	8913      	ldrh	r3, [r2, #8]
   1bb22:	8952      	ldrh	r2, [r2, #10]
   1bb24:	1a9b      	subs	r3, r3, r2
   1bb26:	f99b 200d 	ldrsb.w	r2, [fp, #13]
   1bb2a:	1a9b      	subs	r3, r3, r2
   1bb2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1bb2e:	441a      	add	r2, r3
   1bb30:	b213      	sxth	r3, r2
            p2.x = pos.x;
   1bb32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   1bb34:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            p2.x = pos.x;
   1bb38:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            p2.y = p1.y;
   1bb3c:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   1bb40:	4642      	mov	r2, r8
   1bb42:	ab2f      	add	r3, sp, #188	; 0xbc
   1bb44:	a932      	add	r1, sp, #200	; 0xc8
   1bb46:	a82d      	add	r0, sp, #180	; 0xb4
   1bb48:	f000 fadc 	bl	1c104 <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1bb4c:	9b08      	ldr	r3, [sp, #32]
   1bb4e:	9a06      	ldr	r2, [sp, #24]
   1bb50:	189f      	adds	r7, r3, r2
   1bb52:	7f63      	ldrb	r3, [r4, #29]
   1bb54:	9300      	str	r3, [sp, #0]
   1bb56:	4659      	mov	r1, fp
   1bb58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1bb5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1bb5e:	4638      	mov	r0, r7
   1bb60:	f002 f8a4 	bl	1dcac <_lv_txt_get_next_line>
   1bb64:	9b06      	ldr	r3, [sp, #24]
   1bb66:	181e      	adds	r6, r3, r0
        pos.x = coords->x1;
   1bb68:	9b05      	ldr	r3, [sp, #20]
   1bb6a:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   1bb6e:	7f63      	ldrb	r3, [r4, #29]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1bb70:	4601      	mov	r1, r0
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   1bb72:	0758      	lsls	r0, r3, #29
   1bb74:	f140 8282 	bpl.w	1c07c <lv_draw_label+0x83c>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1bb78:	9300      	str	r3, [sp, #0]
   1bb7a:	465a      	mov	r2, fp
   1bb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1bb80:	4638      	mov	r0, r7
   1bb82:	f002 f841 	bl	1dc08 <_lv_txt_get_width>
   1bb86:	9b05      	ldr	r3, [sp, #20]
   1bb88:	9a05      	ldr	r2, [sp, #20]
   1bb8a:	889b      	ldrh	r3, [r3, #4]
   1bb8c:	8812      	ldrh	r2, [r2, #0]
   1bb8e:	3301      	adds	r3, #1
   1bb90:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
   1bb92:	b21b      	sxth	r3, r3
   1bb94:	1a18      	subs	r0, r3, r0
   1bb96:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1bb9a:	eb05 0560 	add.w	r5, r5, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
   1bb9e:	b22d      	sxth	r5, r5
        if(pos.y > mask->y2) return;
   1bba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bba2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1bba4:	4413      	add	r3, r2
   1bba6:	b29a      	uxth	r2, r3
   1bba8:	9217      	str	r2, [sp, #92]	; 0x5c
        line_start = line_end;
   1bbaa:	9a06      	ldr	r2, [sp, #24]
   1bbac:	9204      	str	r2, [sp, #16]
        if(pos.y > mask->y2) return;
   1bbae:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   1bbb2:	b21b      	sxth	r3, r3
   1bbb4:	429a      	cmp	r2, r3
   1bbb6:	f6ff af22 	blt.w	1b9fe <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1bbba:	9606      	str	r6, [sp, #24]
   1bbbc:	e714      	b.n	1b9e8 <lv_draw_label+0x1a8>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1bbbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bbc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bbc4:	429a      	cmp	r2, r3
   1bbc6:	d023      	beq.n	1bc10 <lv_draw_label+0x3d0>
   1bbc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bbca:	429a      	cmp	r2, r3
   1bbcc:	d020      	beq.n	1bc10 <lv_draw_label+0x3d0>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
   1bbce:	9a04      	ldr	r2, [sp, #16]
   1bbd0:	4b82      	ldr	r3, [pc, #520]	; (1bddc <lv_draw_label+0x59c>)
   1bbd2:	9808      	ldr	r0, [sp, #32]
   1bbd4:	681b      	ldr	r3, [r3, #0]
   1bbd6:	4411      	add	r1, r2
   1bbd8:	4798      	blx	r3
   1bbda:	4607      	mov	r7, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   1bbdc:	4d80      	ldr	r5, [pc, #512]	; (1bde0 <lv_draw_label+0x5a0>)
   1bbde:	9814      	ldr	r0, [sp, #80]	; 0x50
   1bbe0:	682b      	ldr	r3, [r5, #0]
   1bbe2:	a92a      	add	r1, sp, #168	; 0xa8
   1bbe4:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1bbe6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1bbe8:	682b      	ldr	r3, [r5, #0]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   1bbea:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1bbec:	982a      	ldr	r0, [sp, #168]	; 0xa8
   1bbee:	2100      	movs	r1, #0
   1bbf0:	4410      	add	r0, r2
   1bbf2:	4798      	blx	r3
   1bbf4:	7f63      	ldrb	r3, [r4, #29]
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1bbf6:	f013 0301 	ands.w	r3, r3, #1
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1bbfa:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1bbfc:	f000 8092 	beq.w	1bd24 <lv_draw_label+0x4e4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   1bc00:	2e23      	cmp	r6, #35	; 0x23
   1bc02:	d10f      	bne.n	1bc24 <lv_draw_label+0x3e4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
   1bc04:	9907      	ldr	r1, [sp, #28]
   1bc06:	b929      	cbnz	r1, 1bc14 <lv_draw_label+0x3d4>
                        par_start = i;
   1bc08:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1bc0a:	9215      	str	r2, [sp, #84]	; 0x54
                        cmd_state = CMD_STATE_WAIT;
   1bc0c:	9307      	str	r3, [sp, #28]
   1bc0e:	e758      	b.n	1bac2 <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
   1bc10:	2700      	movs	r7, #0
   1bc12:	e7e3      	b.n	1bbdc <lv_draw_label+0x39c>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
   1bc14:	9b07      	ldr	r3, [sp, #28]
   1bc16:	2b01      	cmp	r3, #1
   1bc18:	d049      	beq.n	1bcae <lv_draw_label+0x46e>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
   1bc1a:	2b02      	cmp	r3, #2
   1bc1c:	f040 8082 	bne.w	1bd24 <lv_draw_label+0x4e4>
                        cmd_state = CMD_STATE_WAIT;
   1bc20:	2300      	movs	r3, #0
   1bc22:	e7f3      	b.n	1bc0c <lv_draw_label+0x3cc>
                if(cmd_state == CMD_STATE_PAR) {
   1bc24:	9b07      	ldr	r3, [sp, #28]
   1bc26:	2b01      	cmp	r3, #1
   1bc28:	d17c      	bne.n	1bd24 <lv_draw_label+0x4e4>
                    if(letter == ' ') {
   1bc2a:	2e20      	cmp	r6, #32
   1bc2c:	f47f af49 	bne.w	1bac2 <lv_draw_label+0x282>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
   1bc30:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1bc32:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bc34:	1a9b      	subs	r3, r3, r2
   1bc36:	2b07      	cmp	r3, #7
   1bc38:	d137      	bne.n	1bcaa <lv_draw_label+0x46a>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
   1bc3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
   1bc3c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1bc3e:	189a      	adds	r2, r3, r2
   1bc40:	5858      	ldr	r0, [r3, r1]
   1bc42:	9032      	str	r0, [sp, #200]	; 0xc8
   1bc44:	8893      	ldrh	r3, [r2, #4]
   1bc46:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
   1bc4a:	f3c0 4607 	ubfx	r6, r0, #16, #8
   1bc4e:	f3c0 6507 	ubfx	r5, r0, #24, #8
   1bc52:	f3c0 2707 	ubfx	r7, r0, #8, #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
   1bc56:	b2c0      	uxtb	r0, r0
   1bc58:	f00c feb1 	bl	289be <hex_char_to_num>
   1bc5c:	4601      	mov	r1, r0
   1bc5e:	4638      	mov	r0, r7
   1bc60:	f00c fead 	bl	289be <hex_char_to_num>
   1bc64:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
   1bc68:	4630      	mov	r0, r6
   1bc6a:	f00c fea8 	bl	289be <hex_char_to_num>
   1bc6e:	4606      	mov	r6, r0
   1bc70:	4628      	mov	r0, r5
   1bc72:	f00c fea4 	bl	289be <hex_char_to_num>
   1bc76:	eb00 1506 	add.w	r5, r0, r6, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
   1bc7a:	f89d 00cc 	ldrb.w	r0, [sp, #204]	; 0xcc
   1bc7e:	f00c fe9e 	bl	289be <hex_char_to_num>
   1bc82:	4606      	mov	r6, r0
   1bc84:	f89d 00cd 	ldrb.w	r0, [sp, #205]	; 0xcd
   1bc88:	f00c fe99 	bl	289be <hex_char_to_num>
   1bc8c:	eb00 1306 	add.w	r3, r0, r6, lsl #4
   1bc90:	f3c3 03c4 	ubfx	r3, r3, #3, #5
   1bc94:	f3c5 0585 	ubfx	r5, r5, #2, #6
   1bc98:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
   1bc9c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   1bca0:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
                            recolor.full = dsc->color.full;
   1bca4:	931b      	str	r3, [sp, #108]	; 0x6c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
   1bca6:	2302      	movs	r3, #2
   1bca8:	e7b0      	b.n	1bc0c <lv_draw_label+0x3cc>
                            recolor.full = dsc->color.full;
   1bcaa:	8823      	ldrh	r3, [r4, #0]
   1bcac:	e7fa      	b.n	1bca4 <lv_draw_label+0x464>
                        cmd_state = CMD_STATE_WAIT;
   1bcae:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
   1bcb0:	8825      	ldrh	r5, [r4, #0]
                        cmd_state = CMD_STATE_WAIT;
   1bcb2:	9307      	str	r3, [sp, #28]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1bcb4:	4631      	mov	r1, r6
   1bcb6:	4658      	mov	r0, fp
   1bcb8:	f00e fe1b 	bl	2a8f2 <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1bcbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1bcbe:	901c      	str	r0, [sp, #112]	; 0x70
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1bcc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bcc4:	429a      	cmp	r2, r3
   1bcc6:	d01c      	beq.n	1bd02 <lv_draw_label+0x4c2>
   1bcc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bcca:	429a      	cmp	r2, r3
   1bccc:	d019      	beq.n	1bd02 <lv_draw_label+0x4c2>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
   1bcce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bcd0:	42bb      	cmp	r3, r7
   1bcd2:	d816      	bhi.n	1bd02 <lv_draw_label+0x4c2>
   1bcd4:	42ba      	cmp	r2, r7
   1bcd6:	d914      	bls.n	1bd02 <lv_draw_label+0x4c2>
                    sel_coords.x1 = pos.x;
   1bcd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bcda:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
                    sel_coords.y1 = pos.y;
   1bcde:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1bce0:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
   1bce4:	89a3      	ldrh	r3, [r4, #12]
   1bce6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bce8:	3b01      	subs	r3, #1
   1bcea:	4413      	add	r3, r2
   1bcec:	4403      	add	r3, r0
   1bcee:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   1bcf2:	aa35      	add	r2, sp, #212	; 0xd4
                    sel_coords.y2 = pos.y + line_height - 1;
   1bcf4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1bcf6:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   1bcfa:	4641      	mov	r1, r8
   1bcfc:	a832      	add	r0, sp, #200	; 0xc8
   1bcfe:	f00d fade 	bl	292be <lv_draw_rect>
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    if(opa < LV_OPA_MIN) return;
   1bd02:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1bd04:	2b01      	cmp	r3, #1
   1bd06:	f200 81df 	bhi.w	1c0c8 <lv_draw_label+0x888>
            if(letter_w > 0) {
   1bd0a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1bd0c:	2b00      	cmp	r3, #0
   1bd0e:	f43f aed8 	beq.w	1bac2 <lv_draw_label+0x282>
                pos.x += letter_w + dsc->letter_space;
   1bd12:	89a5      	ldrh	r5, [r4, #12]
   1bd14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bd16:	442b      	add	r3, r5
   1bd18:	461d      	mov	r5, r3
   1bd1a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1bd1c:	441d      	add	r5, r3
   1bd1e:	b22b      	sxth	r3, r5
   1bd20:	930a      	str	r3, [sp, #40]	; 0x28
   1bd22:	e6ce      	b.n	1bac2 <lv_draw_label+0x282>
            lv_color_t color = dsc->color;
   1bd24:	8825      	ldrh	r5, [r4, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
   1bd26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1bd28:	9907      	ldr	r1, [sp, #28]
   1bd2a:	2902      	cmp	r1, #2
   1bd2c:	bf08      	it	eq
   1bd2e:	461d      	moveq	r5, r3
   1bd30:	e7c0      	b.n	1bcb4 <lv_draw_label+0x474>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
   1bd32:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1bd36:	2b00      	cmp	r3, #0
   1bd38:	d0e7      	beq.n	1bd0a <lv_draw_label+0x4ca>
   1bd3a:	f8bd 20ca 	ldrh.w	r2, [sp, #202]	; 0xca
   1bd3e:	2a00      	cmp	r2, #0
   1bd40:	d0e3      	beq.n	1bd0a <lv_draw_label+0x4ca>

    int32_t pos_x = pos_p->x + g.ofs_x;
   1bd42:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bd44:	f9bd a0ce 	ldrsh.w	sl, [sp, #206]	; 0xce
   1bd48:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
   1bd4a:	f9b8 1000 	ldrsh.w	r1, [r8]
   1bd4e:	4452      	add	r2, sl
   1bd50:	428a      	cmp	r2, r1
   1bd52:	dbda      	blt.n	1bd0a <lv_draw_label+0x4ca>
       pos_x > clip_area->x2 ||
   1bd54:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
   1bd58:	4592      	cmp	sl, r2
   1bd5a:	dcd6      	bgt.n	1bd0a <lv_draw_label+0x4ca>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   1bd5c:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	; 0xd0
   1bd60:	f9bb 9008 	ldrsh.w	r9, [fp, #8]
   1bd64:	441a      	add	r2, r3
   1bd66:	eba9 0902 	sub.w	r9, r9, r2
   1bd6a:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
   1bd6e:	eba9 0902 	sub.w	r9, r9, r2
   1bd72:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1bd74:	4491      	add	r9, r2
       pos_y + g.box_h < clip_area->y1 ||
   1bd76:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
   1bd7a:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
   1bd7c:	4293      	cmp	r3, r2
   1bd7e:	dbc4      	blt.n	1bd0a <lv_draw_label+0x4ca>
       pos_y > clip_area->y2)  {
   1bd80:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
       pos_y + g.box_h < clip_area->y1 ||
   1bd84:	4599      	cmp	r9, r3
   1bd86:	dcc0      	bgt.n	1bd0a <lv_draw_label+0x4ca>
        return;
    }


    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
   1bd88:	4631      	mov	r1, r6
   1bd8a:	4658      	mov	r0, fp
   1bd8c:	f00e fdaa 	bl	2a8e4 <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
   1bd90:	b928      	cbnz	r0, 1bd9e <lv_draw_label+0x55e>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
   1bd92:	4b14      	ldr	r3, [pc, #80]	; (1bde4 <lv_draw_label+0x5a4>)
   1bd94:	9300      	str	r3, [sp, #0]
   1bd96:	f240 12b9 	movw	r2, #441	; 0x1b9
   1bd9a:	4b13      	ldr	r3, [pc, #76]	; (1bde8 <lv_draw_label+0x5a8>)
   1bd9c:	e1a7      	b.n	1c0ee <lv_draw_label+0x8ae>
        return;
    }

    if(font_p->subpx) {
   1bd9e:	f89b 300c 	ldrb.w	r3, [fp, #12]
   1bda2:	079b      	lsls	r3, r3, #30
   1bda4:	d005      	beq.n	1bdb2 <lv_draw_label+0x572>
    }

    _lv_mem_buf_release(mask_buf);
    _lv_mem_buf_release(color_buf);
#else
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
   1bda6:	4b11      	ldr	r3, [pc, #68]	; (1bdec <lv_draw_label+0x5ac>)
   1bda8:	9300      	str	r3, [sp, #0]
   1bdaa:	f240 322d 	movw	r2, #813	; 0x32d
   1bdae:	4b10      	ldr	r3, [pc, #64]	; (1bdf0 <lv_draw_label+0x5b0>)
   1bdb0:	e19d      	b.n	1c0ee <lv_draw_label+0x8ae>
    uint32_t bpp = g->bpp;
   1bdb2:	f89d 30d2 	ldrb.w	r3, [sp, #210]	; 0xd2
   1bdb6:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
    if(bpp == 3) bpp = 4;
   1bdba:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
   1bdbc:	fa0f fa8a 	sxth.w	sl, sl
   1bdc0:	fa0f f989 	sxth.w	r9, r9
    if(bpp == 3) bpp = 4;
   1bdc4:	f000 80c0 	beq.w	1bf48 <lv_draw_label+0x708>
    switch(bpp) {
   1bdc8:	3b01      	subs	r3, #1
   1bdca:	2b07      	cmp	r3, #7
   1bdcc:	f200 80b6 	bhi.w	1bf3c <lv_draw_label+0x6fc>
   1bdd0:	e8df f003 	tbb	[pc, r3]
   1bdd4:	bab4c010 	.word	0xbab4c010
   1bdd8:	adb4b4b4 	.word	0xadb4b4b4
   1bddc:	200007ec 	.word	0x200007ec
   1bde0:	200007f0 	.word	0x200007f0
   1bde4:	0003012c 	.word	0x0003012c
   1bde8:	000301c6 	.word	0x000301c6
   1bdec:	00030159 	.word	0x00030159
   1bdf0:	000301e8 	.word	0x000301e8
    if(bpp == 3) bpp = 4;
   1bdf4:	2280      	movs	r2, #128	; 0x80
   1bdf6:	9210      	str	r2, [sp, #64]	; 0x40
   1bdf8:	4aaa      	ldr	r2, [pc, #680]	; (1c0a4 <lv_draw_label+0x864>)
   1bdfa:	2601      	movs	r6, #1
   1bdfc:	2302      	movs	r3, #2
            bpp_opa_table_p = _lv_bpp2_opa_table;
   1bdfe:	920b      	str	r2, [sp, #44]	; 0x2c
    if(opa < LV_OPA_MAX) {
   1be00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1be02:	2afc      	cmp	r2, #252	; 0xfc
   1be04:	d811      	bhi.n	1be2a <lv_draw_label+0x5ea>
        if(prev_opa != opa || prev_bpp != bpp) {
   1be06:	4aa8      	ldr	r2, [pc, #672]	; (1c0a8 <lv_draw_label+0x868>)
   1be08:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1be0a:	7812      	ldrb	r2, [r2, #0]
   1be0c:	428a      	cmp	r2, r1
   1be0e:	f040 80a7 	bne.w	1bf60 <lv_draw_label+0x720>
   1be12:	4aa6      	ldr	r2, [pc, #664]	; (1c0ac <lv_draw_label+0x86c>)
   1be14:	6812      	ldr	r2, [r2, #0]
   1be16:	42b2      	cmp	r2, r6
   1be18:	f040 80a2 	bne.w	1bf60 <lv_draw_label+0x720>
        prev_opa = opa;
   1be1c:	4ba2      	ldr	r3, [pc, #648]	; (1c0a8 <lv_draw_label+0x868>)
   1be1e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1be20:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
   1be22:	4ba2      	ldr	r3, [pc, #648]	; (1c0ac <lv_draw_label+0x86c>)
   1be24:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
   1be26:	4ba2      	ldr	r3, [pc, #648]	; (1c0b0 <lv_draw_label+0x870>)
   1be28:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
   1be2a:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
   1be2e:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1be30:	f9b8 7000 	ldrsh.w	r7, [r8]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1be34:	9911      	ldr	r1, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
   1be36:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
   1be3a:	fb06 f503 	mul.w	r5, r6, r3
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1be3e:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1be42:	45ba      	cmp	sl, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1be44:	4451      	add	r1, sl
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1be46:	bfb4      	ite	lt
   1be48:	eba7 070a 	sublt.w	r7, r7, sl
   1be4c:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1be4e:	4299      	cmp	r1, r3
   1be50:	bfca      	itet	gt
   1be52:	3301      	addgt	r3, #1
   1be54:	9b11      	ldrle	r3, [sp, #68]	; 0x44
   1be56:	eba3 030a 	subgt.w	r3, r3, sl
   1be5a:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
   1be5c:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
   1be60:	4599      	cmp	r9, r3
   1be62:	bfb4      	ite	lt
   1be64:	eba3 0309 	sublt.w	r3, r3, r9
   1be68:	2300      	movge	r3, #0
   1be6a:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   1be6c:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
   1be70:	eb02 0109 	add.w	r1, r2, r9
   1be74:	4299      	cmp	r1, r3
   1be76:	bfc4      	itt	gt
   1be78:	3301      	addgt	r3, #1
   1be7a:	eba3 0309 	subgt.w	r3, r3, r9
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   1be7e:	990e      	ldr	r1, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   1be80:	bfc8      	it	gt
   1be82:	9320      	strgt	r3, [sp, #128]	; 0x80
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   1be84:	fb07 f306 	mul.w	r3, r7, r6
   1be88:	fb01 3505 	mla	r5, r1, r5, r3
    map_p += bit_ofs >> 3;
   1be8c:	eb00 03d5 	add.w	r3, r0, r5, lsr #3
   1be90:	9312      	str	r3, [sp, #72]	; 0x48
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1be92:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   1be94:	bfd8      	it	le
   1be96:	9220      	strle	r2, [sp, #128]	; 0x80
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1be98:	4353      	muls	r3, r2
   1be9a:	2bf0      	cmp	r3, #240	; 0xf0
   1be9c:	bfa8      	it	ge
   1be9e:	23f0      	movge	r3, #240	; 0xf0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1bea0:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1bea2:	9318      	str	r3, [sp, #96]	; 0x60
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1bea4:	f001 fc02 	bl	1d6ac <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
   1bea8:	eb0a 0307 	add.w	r3, sl, r7
   1beac:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
    fill_area.x2 = col_end  + pos_x - 1;
   1beb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1beb2:	9019      	str	r0, [sp, #100]	; 0x64
    fill_area.x2 = col_end  + pos_x - 1;
   1beb4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1beb8:	449a      	add	sl, r3
    fill_area.y1 = row_start + pos_y;
   1beba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fill_area.x2 = col_end  + pos_x - 1;
   1bebc:	f8ad a0b8 	strh.w	sl, [sp, #184]	; 0xb8
    fill_area.y1 = row_start + pos_y;
   1bec0:	4499      	add	r9, r3
   1bec2:	fa0f f989 	sxth.w	r9, r9
   1bec6:	f8ad 90b6 	strh.w	r9, [sp, #182]	; 0xb6
    fill_area.y2 = fill_area.y1;
   1beca:	f8ad 90ba 	strh.w	r9, [sp, #186]	; 0xba
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   1bece:	f000 fd85 	bl	1c9dc <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
   1bed2:	f1c6 0308 	rsb	r3, r6, #8
   1bed6:	931f      	str	r3, [sp, #124]	; 0x7c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   1bed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1beda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   1bedc:	9025      	str	r0, [sp, #148]	; 0x94
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   1bede:	443b      	add	r3, r7
   1bee0:	1a9b      	subs	r3, r3, r2
   1bee2:	4373      	muls	r3, r6
   1bee4:	9326      	str	r3, [sp, #152]	; 0x98
   1bee6:	1bd3      	subs	r3, r2, r7
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
   1bee8:	f005 0507 	and.w	r5, r5, #7
    int32_t mask_p = 0;
   1beec:	f04f 0a00 	mov.w	sl, #0
   1bef0:	9322      	str	r3, [sp, #136]	; 0x88
    for(row = row_start ; row < row_end; row++) {
   1bef2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bef4:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1bef6:	4293      	cmp	r3, r2
   1bef8:	db43      	blt.n	1bf82 <lv_draw_label+0x742>
    if(fill_area.y1 != fill_area.y2) {
   1befa:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
   1befe:	f9bd 20b6 	ldrsh.w	r2, [sp, #182]	; 0xb6
   1bf02:	429a      	cmp	r2, r3
   1bf04:	d00f      	beq.n	1bf26 <lv_draw_label+0x6e6>
        fill_area.y2--;
   1bf06:	3b01      	subs	r3, #1
   1bf08:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        _lv_blend_fill(clip_area, &fill_area,
   1bf0c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1bf0e:	9302      	str	r3, [sp, #8]
   1bf10:	27ff      	movs	r7, #255	; 0xff
   1bf12:	2302      	movs	r3, #2
   1bf14:	e9cd 3700 	strd	r3, r7, [sp]
   1bf18:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1bf1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1bf1e:	a92d      	add	r1, sp, #180	; 0xb4
   1bf20:	4640      	mov	r0, r8
   1bf22:	f00b fe77 	bl	27c14 <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
   1bf26:	9819      	ldr	r0, [sp, #100]	; 0x64
   1bf28:	f001 fc22 	bl	1d770 <_lv_mem_buf_release>
   1bf2c:	e6ed      	b.n	1bd0a <lv_draw_label+0x4ca>
            bitmask_init  = 0xFF;
   1bf2e:	22ff      	movs	r2, #255	; 0xff
   1bf30:	9210      	str	r2, [sp, #64]	; 0x40
            break;       /*No opa table, pixel value will be used directly*/
   1bf32:	2608      	movs	r6, #8
            bpp_opa_table_p = _lv_bpp8_opa_table;
   1bf34:	4a5f      	ldr	r2, [pc, #380]	; (1c0b4 <lv_draw_label+0x874>)
            shades = 256;
   1bf36:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bf3a:	e760      	b.n	1bdfe <lv_draw_label+0x5be>
            LV_LOG_WARN("lv_draw_letter: invalid bpp");
   1bf3c:	4b5e      	ldr	r3, [pc, #376]	; (1c0b8 <lv_draw_label+0x878>)
   1bf3e:	9300      	str	r3, [sp, #0]
   1bf40:	f240 12e7 	movw	r2, #487	; 0x1e7
   1bf44:	4b5d      	ldr	r3, [pc, #372]	; (1c0bc <lv_draw_label+0x87c>)
   1bf46:	e0d2      	b.n	1c0ee <lv_draw_label+0x8ae>
            bitmask_init  = 0xF0;
   1bf48:	22f0      	movs	r2, #240	; 0xf0
   1bf4a:	9210      	str	r2, [sp, #64]	; 0x40
    if(bpp == 3) bpp = 4;
   1bf4c:	2604      	movs	r6, #4
            bpp_opa_table_p = _lv_bpp4_opa_table;
   1bf4e:	4a5c      	ldr	r2, [pc, #368]	; (1c0c0 <lv_draw_label+0x880>)
            shades = 16;
   1bf50:	2310      	movs	r3, #16
   1bf52:	e754      	b.n	1bdfe <lv_draw_label+0x5be>
            bitmask_init  = 0xC0;
   1bf54:	22c0      	movs	r2, #192	; 0xc0
   1bf56:	9210      	str	r2, [sp, #64]	; 0x40
    if(bpp == 3) bpp = 4;
   1bf58:	2602      	movs	r6, #2
            bpp_opa_table_p = _lv_bpp2_opa_table;
   1bf5a:	4a5a      	ldr	r2, [pc, #360]	; (1c0c4 <lv_draw_label+0x884>)
            shades = 4;
   1bf5c:	2304      	movs	r3, #4
   1bf5e:	e74e      	b.n	1bdfe <lv_draw_label+0x5be>
   1bf60:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bf62:	4d53      	ldr	r5, [pc, #332]	; (1c0b0 <lv_draw_label+0x870>)
   1bf64:	440b      	add	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   1bf66:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bf6a:	2aff      	cmp	r2, #255	; 0xff
   1bf6c:	bf17      	itett	ne
   1bf6e:	9f13      	ldrne	r7, [sp, #76]	; 0x4c
   1bf70:	9a13      	ldreq	r2, [sp, #76]	; 0x4c
   1bf72:	fb12 f207 	smulbbne	r2, r2, r7
   1bf76:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
   1bf78:	428b      	cmp	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   1bf7a:	f805 2b01 	strb.w	r2, [r5], #1
            for(i = 0; i < shades; i++) {
   1bf7e:	d1f2      	bne.n	1bf66 <lv_draw_label+0x726>
   1bf80:	e74c      	b.n	1be1c <lv_draw_label+0x5dc>
        bitmask = bitmask_init >> col_bit;
   1bf82:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bf84:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
   1bf88:	fa23 f205 	lsr.w	r2, r3, r5
        for(col = col_start; col < col_end; col++) {
   1bf8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1bf8e:	eb03 090a 	add.w	r9, r3, sl
   1bf92:	4649      	mov	r1, r9
   1bf94:	46be      	mov	lr, r7
   1bf96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bf98:	4573      	cmp	r3, lr
   1bf9a:	dc39      	bgt.n	1c010 <lv_draw_label+0x7d0>
   1bf9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1bf9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1bfa0:	4297      	cmp	r7, r2
   1bfa2:	bfc8      	it	gt
   1bfa4:	2300      	movgt	r3, #0
   1bfa6:	9311      	str	r3, [sp, #68]	; 0x44
   1bfa8:	449a      	add	sl, r3
        if(other_mask_cnt) {
   1bfaa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1bfac:	b1b3      	cbz	r3, 1bfdc <lv_draw_label+0x79c>
   1bfae:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
   1bfb2:	f9bd 10b4 	ldrsh.w	r1, [sp, #180]	; 0xb4
   1bfb6:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
   1bfba:	3301      	adds	r3, #1
   1bfbc:	1a5b      	subs	r3, r3, r1
   1bfbe:	b21b      	sxth	r3, r3
   1bfc0:	4648      	mov	r0, r9
   1bfc2:	f000 fcc1 	bl	1c948 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   1bfc6:	b948      	cbnz	r0, 1bfdc <lv_draw_label+0x79c>
   1bfc8:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
   1bfcc:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
   1bfd0:	3101      	adds	r1, #1
   1bfd2:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
   1bfd4:	b209      	sxth	r1, r1
   1bfd6:	4648      	mov	r0, r9
   1bfd8:	f00c fd03 	bl	289e2 <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
   1bfdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bfde:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1bfe0:	4413      	add	r3, r2
   1bfe2:	4699      	mov	r9, r3
   1bfe4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1bfe6:	4499      	add	r9, r3
   1bfe8:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1bfea:	454b      	cmp	r3, r9
   1bfec:	d92d      	bls.n	1c04a <lv_draw_label+0x80a>
            fill_area.y2 ++;
   1bfee:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
   1bff2:	3301      	adds	r3, #1
   1bff4:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        col_bit += col_bit_row_ofs;
   1bff8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1bffa:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
   1bffc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bffe:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   1c002:	9312      	str	r3, [sp, #72]	; 0x48
    for(row = row_start ; row < row_end; row++) {
   1c004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c006:	3301      	adds	r3, #1
        col_bit = col_bit & 0x7;
   1c008:	f005 0507 	and.w	r5, r5, #7
    for(row = row_start ; row < row_end; row++) {
   1c00c:	930e      	str	r3, [sp, #56]	; 0x38
   1c00e:	e770      	b.n	1bef2 <lv_draw_label+0x6b2>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
   1c010:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1c012:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1c014:	781b      	ldrb	r3, [r3, #0]
   1c016:	eba0 0c05 	sub.w	ip, r0, r5
   1c01a:	4013      	ands	r3, r2
   1c01c:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
   1c020:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
   1c024:	bf1c      	itt	ne
   1c026:	980b      	ldrne	r0, [sp, #44]	; 0x2c
   1c028:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
   1c02a:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
   1c02c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1c02e:	42ab      	cmp	r3, r5
                map_p++;
   1c030:	bf9d      	ittte	ls
   1c032:	9b12      	ldrls	r3, [sp, #72]	; 0x48
                bitmask = bitmask_init;
   1c034:	9a10      	ldrls	r2, [sp, #64]	; 0x40
                map_p++;
   1c036:	3301      	addls	r3, #1
                col_bit += bpp;
   1c038:	19ad      	addhi	r5, r5, r6
                bitmask = bitmask >> bpp;
   1c03a:	bf8e      	itee	hi
   1c03c:	40f2      	lsrhi	r2, r6
                map_p++;
   1c03e:	9312      	strls	r3, [sp, #72]	; 0x48
                col_bit = 0;
   1c040:	2500      	movls	r5, #0
        for(col = col_start; col < col_end; col++) {
   1c042:	f10e 0e01 	add.w	lr, lr, #1
   1c046:	3101      	adds	r1, #1
   1c048:	e7a5      	b.n	1bf96 <lv_draw_label+0x756>
            _lv_blend_fill(clip_area, &fill_area,
   1c04a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1c04c:	9302      	str	r3, [sp, #8]
   1c04e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1c052:	2302      	movs	r3, #2
   1c054:	e9cd 3c00 	strd	r3, ip, [sp]
   1c058:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1c05c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1c05e:	a92d      	add	r1, sp, #180	; 0xb4
   1c060:	4640      	mov	r0, r8
   1c062:	f00b fdd7 	bl	27c14 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   1c066:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
   1c06a:	3301      	adds	r3, #1
   1c06c:	b21b      	sxth	r3, r3
   1c06e:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            fill_area.y2 = fill_area.y1;
   1c072:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            mask_p = 0;
   1c076:	f04f 0a00 	mov.w	sl, #0
   1c07a:	e7bd      	b.n	1bff8 <lv_draw_label+0x7b8>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   1c07c:	071a      	lsls	r2, r3, #28
   1c07e:	f57f ad8f 	bpl.w	1bba0 <lv_draw_label+0x360>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1c082:	9300      	str	r3, [sp, #0]
   1c084:	465a      	mov	r2, fp
   1c086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c08a:	4638      	mov	r0, r7
   1c08c:	f001 fdbc 	bl	1dc08 <_lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
   1c090:	9b05      	ldr	r3, [sp, #20]
   1c092:	889b      	ldrh	r3, [r3, #4]
   1c094:	441d      	add	r5, r3
   1c096:	9b05      	ldr	r3, [sp, #20]
   1c098:	881b      	ldrh	r3, [r3, #0]
   1c09a:	3501      	adds	r5, #1
   1c09c:	1aed      	subs	r5, r5, r3
   1c09e:	1a2d      	subs	r5, r5, r0
   1c0a0:	e57d      	b.n	1bb9e <lv_draw_label+0x35e>
   1c0a2:	bf00      	nop
   1c0a4:	000301fa 	.word	0x000301fa
   1c0a8:	20008732 	.word	0x20008732
   1c0ac:	20003ec4 	.word	0x20003ec4
   1c0b0:	20008632 	.word	0x20008632
   1c0b4:	00030210 	.word	0x00030210
   1c0b8:	000301aa 	.word	0x000301aa
   1c0bc:	000301d5 	.word	0x000301d5
   1c0c0:	00030200 	.word	0x00030200
   1c0c4:	000301fc 	.word	0x000301fc
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
   1c0c8:	7fe3      	ldrb	r3, [r4, #31]
   1c0ca:	931e      	str	r3, [sp, #120]	; 0x78
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   1c0cc:	4632      	mov	r2, r6
   1c0ce:	2300      	movs	r3, #0
   1c0d0:	a932      	add	r1, sp, #200	; 0xc8
   1c0d2:	4658      	mov	r0, fp
   1c0d4:	f00e fc08 	bl	2a8e8 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
   1c0d8:	2800      	cmp	r0, #0
   1c0da:	f47f ae2a 	bne.w	1bd32 <lv_draw_label+0x4f2>
        if(letter >= 0x20) {
   1c0de:	2e1f      	cmp	r6, #31
   1c0e0:	f67f ae13 	bls.w	1bd0a <lv_draw_label+0x4ca>
            LV_LOG_WARN("lv_draw_letter: glyph dsc. not found");
   1c0e4:	4b04      	ldr	r3, [pc, #16]	; (1c0f8 <lv_draw_label+0x8b8>)
   1c0e6:	9300      	str	r3, [sp, #0]
   1c0e8:	4b04      	ldr	r3, [pc, #16]	; (1c0fc <lv_draw_label+0x8bc>)
   1c0ea:	f240 12a3 	movw	r2, #419	; 0x1a3
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
   1c0ee:	4904      	ldr	r1, [pc, #16]	; (1c100 <lv_draw_label+0x8c0>)
   1c0f0:	2002      	movs	r0, #2
   1c0f2:	f001 fa31 	bl	1d558 <_lv_log_add>
#endif
}
   1c0f6:	e608      	b.n	1bd0a <lv_draw_label+0x4ca>
   1c0f8:	00030107 	.word	0x00030107
   1c0fc:	000301c6 	.word	0x000301c6
   1c100:	000300ca 	.word	0x000300ca

0001c104 <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
   1c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c108:	b0c9      	sub	sp, #292	; 0x124
   1c10a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1c10e:	9206      	str	r2, [sp, #24]
    if(dsc->width == 0) return;
   1c110:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
{
   1c114:	469b      	mov	fp, r3
    if(dsc->width == 0) return;
   1c116:	2a00      	cmp	r2, #0
   1c118:	f000 80e8 	beq.w	1c2ec <lv_draw_line+0x1e8>
    if(dsc->opa <= LV_OPA_MIN) return;
   1c11c:	7a1b      	ldrb	r3, [r3, #8]
   1c11e:	2b02      	cmp	r3, #2
   1c120:	f240 80e4 	bls.w	1c2ec <lv_draw_line+0x1e8>

    if(point1->x == point2->x && point1->y == point2->y) return;
   1c124:	9b05      	ldr	r3, [sp, #20]
   1c126:	f9b0 1000 	ldrsh.w	r1, [r0]
   1c12a:	f9b3 5000 	ldrsh.w	r5, [r3]
   1c12e:	9b05      	ldr	r3, [sp, #20]
   1c130:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   1c134:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1c138:	42a9      	cmp	r1, r5
   1c13a:	d102      	bne.n	1c142 <lv_draw_line+0x3e>
   1c13c:	42a3      	cmp	r3, r4
   1c13e:	f000 80d5 	beq.w	1c2ec <lv_draw_line+0x1e8>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c142:	42a9      	cmp	r1, r5
   1c144:	460e      	mov	r6, r1
   1c146:	bfa8      	it	ge
   1c148:	462e      	movge	r6, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1c14a:	42a9      	cmp	r1, r5
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c14c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1c150:	bfb8      	it	lt
   1c152:	4629      	movlt	r1, r5
   1c154:	eb01 0162 	add.w	r1, r1, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c158:	42a3      	cmp	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c15a:	ea4f 0062 	mov.w	r0, r2, asr #1
   1c15e:	f1c0 0000 	rsb	r0, r0, #0
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1c162:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c166:	4619      	mov	r1, r3
   1c168:	bfa8      	it	ge
   1c16a:	4621      	movge	r1, r4
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c16c:	42a3      	cmp	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c16e:	fa06 f680 	sxtah	r6, r6, r0
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c172:	bfb8      	it	lt
   1c174:	4623      	movlt	r3, r4
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c176:	fa01 f080 	sxtah	r0, r1, r0

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c17a:	a90c      	add	r1, sp, #48	; 0x30
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c17c:	eb03 0362 	add.w	r3, r3, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c180:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c184:	9a06      	ldr	r2, [sp, #24]
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c186:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c18a:	4608      	mov	r0, r1
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c18c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c190:	f00d ff7b 	bl	2a08a <_lv_area_intersect>
    if(!is_common) return;
   1c194:	2800      	cmp	r0, #0
   1c196:	f000 80a9 	beq.w	1c2ec <lv_draw_line+0x1e8>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
   1c19a:	9b04      	ldr	r3, [sp, #16]
   1c19c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1c1a0:	9b05      	ldr	r3, [sp, #20]
   1c1a2:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   1c1a6:	45c1      	cmp	r9, r8
   1c1a8:	f040 813c 	bne.w	1c424 <lv_draw_line+0x320>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
   1c1ac:	f89b 5008 	ldrb.w	r5, [fp, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1c1b0:	f7fe ff06 	bl	1afc0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c1b4:	f00d fefe 	bl	29fb4 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
   1c1b8:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c1bc:	f9bb 4006 	ldrsh.w	r4, [fp, #6]
    int32_t w = dsc->width - 1;
   1c1c0:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c1c2:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c1c6:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   1c1c8:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c1cc:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c1d0:	b124      	cbz	r4, 1c1dc <lv_draw_line+0xd8>
   1c1d2:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
   1c1d6:	3c00      	subs	r4, #0
   1c1d8:	bf18      	it	ne
   1c1da:	2401      	movne	r4, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c1dc:	f000 fbfe 	bl	1c9dc <lv_draw_mask_get_cnt>
   1c1e0:	2800      	cmp	r0, #0
   1c1e2:	f040 8086 	bne.w	1c2f2 <lv_draw_line+0x1ee>
    else if(dashed) simple_mode = false;
   1c1e6:	f084 0201 	eor.w	r2, r4, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   1c1ea:	9b05      	ldr	r3, [sp, #20]
   1c1ec:	9904      	ldr	r1, [sp, #16]
   1c1ee:	f9b3 3000 	ldrsh.w	r3, [r3]
   1c1f2:	f9b1 1000 	ldrsh.w	r1, [r1]
   1c1f6:	428b      	cmp	r3, r1
   1c1f8:	4618      	mov	r0, r3
   1c1fa:	bfa8      	it	ge
   1c1fc:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
   1c1fe:	428b      	cmp	r3, r1
   1c200:	bfb8      	it	lt
   1c202:	460b      	movlt	r3, r1
   1c204:	3b01      	subs	r3, #1
   1c206:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
   1c20a:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   1c20c:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.y1 = point1->y - w_half1;
   1c210:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1c214:	1b9e      	subs	r6, r3, r6
    draw_area.y2 = point1->y + w_half0;
   1c216:	4498      	add	r8, r3
    draw_area.y1 = point1->y - w_half1;
   1c218:	f8ad 60a2 	strh.w	r6, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
   1c21c:	f8ad 80a6 	strh.w	r8, [sp, #166]	; 0xa6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
   1c220:	2a00      	cmp	r2, #0
   1c222:	d068      	beq.n	1c2f6 <lv_draw_line+0x1f2>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
   1c224:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
   1c228:	f003 0303 	and.w	r3, r3, #3
   1c22c:	e9cd 5301 	strd	r5, r3, [sp, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
   1c230:	2301      	movs	r3, #1
   1c232:	9300      	str	r3, [sp, #0]
   1c234:	f8bb 2000 	ldrh.w	r2, [fp]
   1c238:	2300      	movs	r3, #0
   1c23a:	a928      	add	r1, sp, #160	; 0xa0
   1c23c:	a80c      	add	r0, sp, #48	; 0x30
   1c23e:	f00b fce9 	bl	27c14 <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
   1c242:	f89b 3009 	ldrb.w	r3, [fp, #9]
   1c246:	f013 0f0c 	tst.w	r3, #12
   1c24a:	d04f      	beq.n	1c2ec <lv_draw_line+0x1e8>
        lv_draw_rect_dsc_init(&cir_dsc);
   1c24c:	a833      	add	r0, sp, #204	; 0xcc
   1c24e:	f000 fc81 	bl	1cb54 <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
   1c252:	f8bb 3000 	ldrh.w	r3, [fp]
   1c256:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
   1c25a:	f647 73ff 	movw	r3, #32767	; 0x7fff
   1c25e:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
   1c262:	f89b 3008 	ldrb.w	r3, [fp, #8]
        int32_t r = (dsc->width >> 1);
   1c266:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
        cir_dsc.bg_opa = dsc->opa;
   1c26a:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        if(dsc->round_start) {
   1c26e:	f89b 3009 	ldrb.w	r3, [fp, #9]
        int32_t r = (dsc->width >> 1);
   1c272:	106c      	asrs	r4, r5, #1
        if(dsc->round_start) {
   1c274:	075a      	lsls	r2, r3, #29
   1c276:	ea6f 0505 	mvn.w	r5, r5
   1c27a:	f005 0501 	and.w	r5, r5, #1
   1c27e:	d518      	bpl.n	1c2b2 <lv_draw_line+0x1ae>
            cir_area.x1 = point1->x - r;
   1c280:	9b04      	ldr	r3, [sp, #16]
   1c282:	f9b3 2000 	ldrsh.w	r2, [r3]
   1c286:	1b13      	subs	r3, r2, r4
   1c288:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
   1c28c:	9b04      	ldr	r3, [sp, #16]
   1c28e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            cir_area.x2 = point1->x + r - r_corr;
   1c292:	4422      	add	r2, r4
            cir_area.y1 = point1->y - r;
   1c294:	1b19      	subs	r1, r3, r4
            cir_area.x2 = point1->x + r - r_corr;
   1c296:	1b52      	subs	r2, r2, r5
            cir_area.y2 = point1->y + r - r_corr ;
   1c298:	4423      	add	r3, r4
            cir_area.y1 = point1->y - r;
   1c29a:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
   1c29e:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
   1c2a2:	1b5b      	subs	r3, r3, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c2a4:	9906      	ldr	r1, [sp, #24]
            cir_area.y2 = point1->y + r - r_corr ;
   1c2a6:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c2aa:	aa33      	add	r2, sp, #204	; 0xcc
   1c2ac:	a828      	add	r0, sp, #160	; 0xa0
   1c2ae:	f00d f806 	bl	292be <lv_draw_rect>
        if(dsc->round_end) {
   1c2b2:	f89b 3009 	ldrb.w	r3, [fp, #9]
   1c2b6:	071b      	lsls	r3, r3, #28
   1c2b8:	d518      	bpl.n	1c2ec <lv_draw_line+0x1e8>
            cir_area.x1 = point2->x - r;
   1c2ba:	9b05      	ldr	r3, [sp, #20]
   1c2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
   1c2c0:	1b1a      	subs	r2, r3, r4
   1c2c2:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
   1c2c6:	9a05      	ldr	r2, [sp, #20]
   1c2c8:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
   1c2cc:	4423      	add	r3, r4
            cir_area.y1 = point2->y - r;
   1c2ce:	1b11      	subs	r1, r2, r4
            cir_area.y2 = point2->y + r - r_corr ;
   1c2d0:	4414      	add	r4, r2
            cir_area.y1 = point2->y - r;
   1c2d2:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
   1c2d6:	1b5b      	subs	r3, r3, r5
            cir_area.y2 = point2->y + r - r_corr ;
   1c2d8:	1b64      	subs	r4, r4, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c2da:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
   1c2dc:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c2e0:	aa33      	add	r2, sp, #204	; 0xcc
   1c2e2:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point2->y + r - r_corr ;
   1c2e4:	f8ad 40a6 	strh.w	r4, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c2e8:	f00c ffe9 	bl	292be <lv_draw_rect>
}
   1c2ec:	b049      	add	sp, #292	; 0x124
   1c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c2f2:	2200      	movs	r2, #0
   1c2f4:	e779      	b.n	1c1ea <lv_draw_line+0xe6>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   1c2f6:	aa28      	add	r2, sp, #160	; 0xa0
   1c2f8:	a90c      	add	r1, sp, #48	; 0x30
   1c2fa:	4610      	mov	r0, r2
   1c2fc:	f00d fec5 	bl	2a08a <_lv_area_intersect>
        if(!is_common) return;
   1c300:	2800      	cmp	r0, #0
   1c302:	d09e      	beq.n	1c242 <lv_draw_line+0x13e>
        draw_area.y1 -= disp_area->y1;
   1c304:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
   1c308:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        draw_area.x1 -= disp_area->x1;
   1c30c:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
   1c310:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   1c314:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.y1 -= disp_area->y1;
   1c318:	1b91      	subs	r1, r2, r6
   1c31a:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
   1c31e:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   1c322:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        draw_area.x2 -= disp_area->x1;
   1c326:	eba1 0508 	sub.w	r5, r1, r8
   1c32a:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
   1c32e:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c332:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.y2 -= disp_area->y1;
   1c336:	1bad      	subs	r5, r5, r6
        draw_area.x1 -= disp_area->x1;
   1c338:	eba0 0308 	sub.w	r3, r0, r8
        draw_area.y2 -= disp_area->y1;
   1c33c:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
   1c340:	1c4d      	adds	r5, r1, #1
        draw_area.x1 -= disp_area->x1;
   1c342:	b21b      	sxth	r3, r3
   1c344:	1a2d      	subs	r5, r5, r0
   1c346:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
   1c34a:	b22d      	sxth	r5, r5
        fill_area.y2 = fill_area.y1;
   1c34c:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        if(dashed) {
   1c350:	b1dc      	cbz	r4, 1c38a <lv_draw_line+0x286>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
   1c352:	4498      	add	r8, r3
   1c354:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   1c358:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   1c35c:	4413      	add	r3, r2
   1c35e:	fb98 f2f3 	sdiv	r2, r8, r3
   1c362:	fb03 8812 	mls	r8, r3, r2, r8
   1c366:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c36a:	4628      	mov	r0, r5
   1c36c:	f001 f99e 	bl	1d6ac <_lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c370:	f9bd 90a2 	ldrsh.w	r9, [sp, #162]	; 0xa2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c374:	4606      	mov	r6, r0
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1c376:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c37a:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
   1c37e:	4599      	cmp	r9, r3
   1c380:	dd05      	ble.n	1c38e <lv_draw_line+0x28a>
        _lv_mem_buf_release(mask_buf);
   1c382:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
   1c384:	f001 f9f4 	bl	1d770 <_lv_mem_buf_release>
   1c388:	e75b      	b.n	1c242 <lv_draw_line+0x13e>
        lv_style_int_t dash_start = 0;
   1c38a:	46a0      	mov	r8, r4
   1c38c:	e7ed      	b.n	1c36a <lv_draw_line+0x266>
            _lv_memset_ff(mask_buf, draw_area_w);
   1c38e:	4629      	mov	r1, r5
   1c390:	4630      	mov	r0, r6
   1c392:	f00c fb2e 	bl	289f2 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   1c396:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   1c39a:	8a7a      	ldrh	r2, [r7, #18]
   1c39c:	8a39      	ldrh	r1, [r7, #16]
   1c39e:	444a      	add	r2, r9
   1c3a0:	4419      	add	r1, r3
   1c3a2:	b212      	sxth	r2, r2
   1c3a4:	462b      	mov	r3, r5
   1c3a6:	b209      	sxth	r1, r1
   1c3a8:	4630      	mov	r0, r6
   1c3aa:	f000 facd 	bl	1c948 <lv_draw_mask_apply>
   1c3ae:	4602      	mov	r2, r0
            if(dashed) {
   1c3b0:	b18c      	cbz	r4, 1c3d6 <lv_draw_line+0x2d2>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   1c3b2:	b180      	cbz	r0, 1c3d6 <lv_draw_line+0x2d2>
                    lv_style_int_t dash_cnt = dash_start;
   1c3b4:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1c3b6:	2300      	movs	r3, #0
   1c3b8:	e00a      	b.n	1c3d0 <lv_draw_line+0x2cc>
                        if(dash_cnt <= dsc->dash_width) {
   1c3ba:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   1c3be:	428a      	cmp	r2, r1
   1c3c0:	db26      	blt.n	1c410 <lv_draw_line+0x30c>
                            i += diff;
   1c3c2:	4413      	add	r3, r2
   1c3c4:	1a5b      	subs	r3, r3, r1
   1c3c6:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1c3c8:	3301      	adds	r3, #1
   1c3ca:	3201      	adds	r2, #1
   1c3cc:	b21b      	sxth	r3, r3
   1c3ce:	b211      	sxth	r1, r2
   1c3d0:	429d      	cmp	r5, r3
   1c3d2:	dcf2      	bgt.n	1c3ba <lv_draw_line+0x2b6>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
   1c3d4:	2202      	movs	r2, #2
                           dsc->blend_mode);
   1c3d6:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(clip, &fill_area,
   1c3da:	f003 0303 	and.w	r3, r3, #3
   1c3de:	9302      	str	r3, [sp, #8]
   1c3e0:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c3e4:	a933      	add	r1, sp, #204	; 0xcc
   1c3e6:	e9cd 2300 	strd	r2, r3, [sp]
   1c3ea:	a80c      	add	r0, sp, #48	; 0x30
   1c3ec:	4633      	mov	r3, r6
   1c3ee:	f8bb 2000 	ldrh.w	r2, [fp]
   1c3f2:	f00b fc0f 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
   1c3f6:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
   1c3fa:	3301      	adds	r3, #1
   1c3fc:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
   1c400:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
   1c404:	3301      	adds	r3, #1
   1c406:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c40a:	f109 0901 	add.w	r9, r9, #1
   1c40e:	e7b4      	b.n	1c37a <lv_draw_line+0x276>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   1c410:	f9bb 0006 	ldrsh.w	r0, [fp, #6]
   1c414:	4402      	add	r2, r0
   1c416:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
   1c418:	bfba      	itte	lt
   1c41a:	f806 a003 	strblt.w	sl, [r6, r3]
   1c41e:	460a      	movlt	r2, r1
                            dash_cnt = 0;
   1c420:	2200      	movge	r2, #0
   1c422:	e7d1      	b.n	1c3c8 <lv_draw_line+0x2c4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
   1c424:	9b04      	ldr	r3, [sp, #16]
   1c426:	f9b3 7000 	ldrsh.w	r7, [r3]
   1c42a:	9b05      	ldr	r3, [sp, #20]
   1c42c:	f9b3 6000 	ldrsh.w	r6, [r3]
   1c430:	42b7      	cmp	r7, r6
   1c432:	f040 80c6 	bne.w	1c5c2 <lv_draw_line+0x4be>
    lv_opa_t opa = dsc->opa;
   1c436:	f89b 4008 	ldrb.w	r4, [fp, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1c43a:	f7fe fdc1 	bl	1afc0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c43e:	f00d fdb9 	bl	29fb4 <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
   1c442:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c446:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    int32_t w = dsc->width - 1;
   1c44a:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c44c:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c450:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   1c452:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c456:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c45a:	b125      	cbz	r5, 1c466 <lv_draw_line+0x362>
   1c45c:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
   1c460:	3d00      	subs	r5, #0
   1c462:	bf18      	it	ne
   1c464:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c466:	f000 fab9 	bl	1c9dc <lv_draw_mask_get_cnt>
   1c46a:	bb20      	cbnz	r0, 1c4b6 <lv_draw_line+0x3b2>
    else if(dashed) simple_mode = false;
   1c46c:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
   1c470:	9b04      	ldr	r3, [sp, #16]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c472:	9904      	ldr	r1, [sp, #16]
    draw_area.x1 = point1->x - w_half1;
   1c474:	f9b3 3000 	ldrsh.w	r3, [r3]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c478:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
   1c47c:	1b9e      	subs	r6, r3, r6
    draw_area.x2 = point1->x + w_half0;
   1c47e:	4443      	add	r3, r8
   1c480:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c484:	9b05      	ldr	r3, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
   1c486:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c48a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1c48e:	428b      	cmp	r3, r1
   1c490:	4618      	mov	r0, r3
   1c492:	bfa8      	it	ge
   1c494:	4608      	movge	r0, r1
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   1c496:	428b      	cmp	r3, r1
   1c498:	bfb8      	it	lt
   1c49a:	460b      	movlt	r3, r1
   1c49c:	3b01      	subs	r3, #1
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c49e:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   1c4a2:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
   1c4a6:	b142      	cbz	r2, 1c4ba <lv_draw_line+0x3b6>
                       dsc->blend_mode);
   1c4a8:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
   1c4ac:	f003 0303 	and.w	r3, r3, #3
   1c4b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1c4b4:	e6bc      	b.n	1c230 <lv_draw_line+0x12c>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c4b6:	2200      	movs	r2, #0
   1c4b8:	e7da      	b.n	1c470 <lv_draw_line+0x36c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   1c4ba:	aa28      	add	r2, sp, #160	; 0xa0
   1c4bc:	a90c      	add	r1, sp, #48	; 0x30
   1c4be:	4610      	mov	r0, r2
   1c4c0:	f00d fde3 	bl	2a08a <_lv_area_intersect>
        if(!is_common) return;
   1c4c4:	2800      	cmp	r0, #0
   1c4c6:	f43f aebc 	beq.w	1c242 <lv_draw_line+0x13e>
        draw_area.x1 -= vdb->area.x1;
   1c4ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   1c4ce:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
   1c4d2:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   1c4d6:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.x1 -= vdb->area.x1;
   1c4da:	1ac2      	subs	r2, r0, r3
   1c4dc:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
   1c4e0:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c4e4:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.y1 -= vdb->area.y1;
   1c4e8:	1b11      	subs	r1, r2, r4
   1c4ea:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
   1c4ee:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   1c4f2:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        draw_area.x2 -= vdb->area.x1;
   1c4f6:	1acb      	subs	r3, r1, r3
   1c4f8:	f101 0801 	add.w	r8, r1, #1
   1c4fc:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
   1c500:	eba8 0800 	sub.w	r8, r8, r0
        draw_area.y2 -= vdb->area.y1;
   1c504:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
        fill_area.y2 = fill_area.y1;
   1c508:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
   1c50c:	fa0f f888 	sxth.w	r8, r8
        draw_area.y2 -= vdb->area.y1;
   1c510:	1b1b      	subs	r3, r3, r4
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c512:	4640      	mov	r0, r8
        draw_area.y2 -= vdb->area.y1;
   1c514:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c518:	f001 f8c8 	bl	1d6ac <_lv_mem_buf_get>
   1c51c:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
   1c520:	4681      	mov	r9, r0
        if(dashed) {
   1c522:	b1a5      	cbz	r5, 1c54e <lv_draw_line+0x44a>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
   1c524:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
   1c528:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
   1c52c:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   1c530:	4432      	add	r2, r6
   1c532:	4423      	add	r3, r4
   1c534:	fb92 f4f3 	sdiv	r4, r2, r3
   1c538:	fb03 2414 	mls	r4, r3, r4, r2
   1c53c:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   1c53e:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c542:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
   1c546:	429e      	cmp	r6, r3
   1c548:	dd03      	ble.n	1c552 <lv_draw_line+0x44e>
        _lv_mem_buf_release(mask_buf);
   1c54a:	4648      	mov	r0, r9
   1c54c:	e71a      	b.n	1c384 <lv_draw_line+0x280>
        lv_style_int_t dash_start = 0;
   1c54e:	462c      	mov	r4, r5
   1c550:	e7f5      	b.n	1c53e <lv_draw_line+0x43a>
            _lv_memset_ff(mask_buf, draw_area_w);
   1c552:	4641      	mov	r1, r8
   1c554:	4648      	mov	r0, r9
   1c556:	f00c fa4c 	bl	289f2 <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   1c55a:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   1c55e:	8a7a      	ldrh	r2, [r7, #18]
   1c560:	8a39      	ldrh	r1, [r7, #16]
   1c562:	4432      	add	r2, r6
   1c564:	4419      	add	r1, r3
   1c566:	b212      	sxth	r2, r2
   1c568:	4643      	mov	r3, r8
   1c56a:	b209      	sxth	r1, r1
   1c56c:	4648      	mov	r0, r9
   1c56e:	f000 f9eb 	bl	1c948 <lv_draw_mask_apply>
            if(dashed) {
   1c572:	b16d      	cbz	r5, 1c590 <lv_draw_line+0x48c>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   1c574:	b150      	cbz	r0, 1c58c <lv_draw_line+0x488>
                    if(dash_cnt > dsc->dash_width) {
   1c576:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   1c57a:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   1c57e:	4413      	add	r3, r2
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
   1c580:	42a2      	cmp	r2, r4
   1c582:	bfb8      	it	lt
   1c584:	2000      	movlt	r0, #0
                        dash_cnt = 0;
   1c586:	429c      	cmp	r4, r3
   1c588:	bfa8      	it	ge
   1c58a:	2400      	movge	r4, #0
                dash_cnt ++;
   1c58c:	3401      	adds	r4, #1
   1c58e:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   1c590:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c594:	f8bb 2000 	ldrh.w	r2, [fp]
   1c598:	f8cd a008 	str.w	sl, [sp, #8]
   1c59c:	e9cd 0300 	strd	r0, r3, [sp]
   1c5a0:	a933      	add	r1, sp, #204	; 0xcc
   1c5a2:	464b      	mov	r3, r9
   1c5a4:	a80c      	add	r0, sp, #48	; 0x30
   1c5a6:	f00b fb35 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
   1c5aa:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
   1c5ae:	3301      	adds	r3, #1
   1c5b0:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
   1c5b4:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
   1c5b8:	3301      	adds	r3, #1
   1c5ba:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c5be:	3601      	adds	r6, #1
   1c5c0:	e7bf      	b.n	1c542 <lv_draw_line+0x43e>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
   1c5c2:	45c1      	cmp	r9, r8
   1c5c4:	db05      	blt.n	1c5d2 <lv_draw_line+0x4ce>
   1c5c6:	464b      	mov	r3, r9
   1c5c8:	46c1      	mov	r9, r8
   1c5ca:	4698      	mov	r8, r3
   1c5cc:	463b      	mov	r3, r7
   1c5ce:	4637      	mov	r7, r6
   1c5d0:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
   1c5d2:	1bf3      	subs	r3, r6, r7
    int32_t ydiff = p2.y - p1.y;
   1c5d4:	eba8 0a09 	sub.w	sl, r8, r9
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   1c5d8:	2b00      	cmp	r3, #0
    int32_t xdiff = p2.x - p1.x;
   1c5da:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   1c5dc:	bfb8      	it	lt
   1c5de:	425b      	neglt	r3, r3
   1c5e0:	f1ba 0f00 	cmp.w	sl, #0
   1c5e4:	bfb8      	it	lt
   1c5e6:	f1ca 0a00 	rsblt	sl, sl, #0
        181,
    };

    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   1c5ea:	4553      	cmp	r3, sl
   1c5ec:	bfcc      	ite	gt
   1c5ee:	ea4f 124a 	movgt.w	r2, sl, lsl #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   1c5f2:	015a      	lslle	r2, r3, #5

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1c5f4:	49c0      	ldr	r1, [pc, #768]	; (1c8f8 <lv_draw_line+0x7f4>)
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   1c5f6:	bfcc      	ite	gt
   1c5f8:	fbb2 f2f3 	udivgt	r2, r2, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   1c5fc:	fbb2 f2fa 	udivle	r2, r2, sl
    int32_t w = dsc->width;
   1c600:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1c604:	5c89      	ldrb	r1, [r1, r2]
   1c606:	9307      	str	r3, [sp, #28]
   1c608:	223f      	movs	r2, #63	; 0x3f
   1c60a:	fb14 2401 	smlabb	r4, r4, r1, r2
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
   1c60e:	f344 12cf 	sbfx	r2, r4, #7, #16
   1c612:	42be      	cmp	r6, r7
   1c614:	bfd4      	ite	le
   1c616:	ebc2 0106 	rsble	r1, r2, r6
   1c61a:	ebc2 0107 	rsbgt	r1, r2, r7
   1c61e:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
   1c622:	42be      	cmp	r6, r7
   1c624:	bfac      	ite	ge
   1c626:	1991      	addge	r1, r2, r6
   1c628:	19d1      	addlt	r1, r2, r7
   1c62a:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
   1c62e:	45c8      	cmp	r8, r9
   1c630:	bfd4      	ite	le
   1c632:	ebc2 0108 	rsble	r1, r2, r8
   1c636:	ebc2 0109 	rsbgt	r1, r2, r9
   1c63a:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   1c63e:	45c8      	cmp	r8, r9
   1c640:	bfac      	ite	ge
   1c642:	4442      	addge	r2, r8
   1c644:	444a      	addlt	r2, r9

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   1c646:	a90e      	add	r1, sp, #56	; 0x38
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   1c648:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   1c64c:	4608      	mov	r0, r1
   1c64e:	aa0c      	add	r2, sp, #48	; 0x30
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1c650:	11e5      	asrs	r5, r4, #7
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   1c652:	f00d fd1a 	bl	2a08a <_lv_area_intersect>
    if(is_common == false) return;
   1c656:	2800      	cmp	r0, #0
   1c658:	f43f adf3 	beq.w	1c242 <lv_draw_line+0x13e>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
   1c65c:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c65e:	f005 0501 	and.w	r5, r5, #1
   1c662:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
   1c666:	4553      	cmp	r3, sl
   1c668:	b22d      	sxth	r5, r5
   1c66a:	f344 240f 	sbfx	r4, r4, #8, #16
   1c66e:	f340 80ed 	ble.w	1c84c <lv_draw_line+0x748>
        if(xdiff > 0) {
   1c672:	eb09 0305 	add.w	r3, r9, r5
   1c676:	b21b      	sxth	r3, r3
   1c678:	9307      	str	r3, [sp, #28]
   1c67a:	1bf3      	subs	r3, r6, r7
   1c67c:	eba9 0a04 	sub.w	sl, r9, r4
   1c680:	4445      	add	r5, r8
   1c682:	eba8 0404 	sub.w	r4, r8, r4
   1c686:	2b00      	cmp	r3, #0
   1c688:	f04f 0300 	mov.w	r3, #0
   1c68c:	b22d      	sxth	r5, r5
   1c68e:	fa0f fa8a 	sxth.w	sl, sl
   1c692:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c694:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
   1c696:	f340 80cc 	ble.w	1c832 <lv_draw_line+0x72e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c69a:	4633      	mov	r3, r6
   1c69c:	4652      	mov	r2, sl
   1c69e:	9400      	str	r4, [sp, #0]
   1c6a0:	4639      	mov	r1, r7
   1c6a2:	a812      	add	r0, sp, #72	; 0x48
   1c6a4:	f000 f9a8 	bl	1c9f8 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   1c6a8:	2301      	movs	r3, #1
   1c6aa:	9a07      	ldr	r2, [sp, #28]
   1c6ac:	e9cd 5300 	strd	r5, r3, [sp]
   1c6b0:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c6b2:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   1c6b4:	a81d      	add	r0, sp, #116	; 0x74
   1c6b6:	f000 f99f 	bl	1c9f8 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   1c6ba:	2100      	movs	r1, #0
   1c6bc:	a812      	add	r0, sp, #72	; 0x48
   1c6be:	f000 f91d 	bl	1c8fc <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1c6c2:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   1c6c4:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1c6c6:	a81d      	add	r0, sp, #116	; 0x74
   1c6c8:	f000 f918 	bl	1c8fc <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
   1c6cc:	f89b 4009 	ldrb.w	r4, [fp, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1c6d0:	900a      	str	r0, [sp, #40]	; 0x28
    if(!dsc->raw_end) {
   1c6d2:	f014 0410 	ands.w	r4, r4, #16
   1c6d6:	f040 80cd 	bne.w	1c874 <lv_draw_line+0x770>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   1c6da:	1bf2      	subs	r2, r6, r7
   1c6dc:	eba9 0308 	sub.w	r3, r9, r8
   1c6e0:	b215      	sxth	r5, r2
   1c6e2:	fa09 f282 	sxtah	r2, r9, r2
   1c6e6:	fa0f fa83 	sxth.w	sl, r3
   1c6ea:	2103      	movs	r1, #3
   1c6ec:	b212      	sxth	r2, r2
   1c6ee:	fa07 f383 	sxtah	r3, r7, r3
   1c6f2:	9101      	str	r1, [sp, #4]
   1c6f4:	9200      	str	r2, [sp, #0]
   1c6f6:	b21b      	sxth	r3, r3
   1c6f8:	464a      	mov	r2, r9
   1c6fa:	4639      	mov	r1, r7
   1c6fc:	a828      	add	r0, sp, #160	; 0xa0
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   1c6fe:	4445      	add	r5, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   1c700:	f000 f97a 	bl	1c9f8 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   1c704:	b22d      	sxth	r5, r5
   1c706:	2202      	movs	r2, #2
   1c708:	eb06 030a 	add.w	r3, r6, sl
   1c70c:	b21b      	sxth	r3, r3
   1c70e:	9201      	str	r2, [sp, #4]
   1c710:	4631      	mov	r1, r6
   1c712:	4642      	mov	r2, r8
   1c714:	a833      	add	r0, sp, #204	; 0xcc
   1c716:	9500      	str	r5, [sp, #0]
   1c718:	f000 f96e 	bl	1c9f8 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   1c71c:	4621      	mov	r1, r4
   1c71e:	a828      	add	r0, sp, #160	; 0xa0
   1c720:	f000 f8ec 	bl	1c8fc <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   1c724:	4621      	mov	r1, r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   1c726:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   1c728:	a833      	add	r0, sp, #204	; 0xcc
   1c72a:	f000 f8e7 	bl	1c8fc <lv_draw_mask_add>
   1c72e:	4680      	mov	r8, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1c730:	f7fe fc46 	bl	1afc0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c734:	f00d fc3e 	bl	29fb4 <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
   1c738:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
   1c73c:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   1c740:	1a8b      	subs	r3, r1, r2
   1c742:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c746:	4604      	mov	r4, r0
    draw_area.y1 -= disp_area->y1;
   1c748:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   1c74c:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   1c750:	1a1b      	subs	r3, r3, r0
   1c752:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
   1c756:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   1c75a:	1a9a      	subs	r2, r3, r2
   1c75c:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
   1c760:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
   1c764:	f103 0901 	add.w	r9, r3, #1
   1c768:	1a12      	subs	r2, r2, r0
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   1c76a:	a80e      	add	r0, sp, #56	; 0x38
   1c76c:	eba9 0901 	sub.w	r9, r9, r1
    draw_area.y2 -= disp_area->y1;
   1c770:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   1c774:	f00d fc7b 	bl	2a06e <lv_area_get_size>
   1c778:	28ef      	cmp	r0, #239	; 0xef
   1c77a:	fa0f f989 	sxth.w	r9, r9
   1c77e:	d87e      	bhi.n	1c87e <lv_draw_line+0x77a>
   1c780:	a80e      	add	r0, sp, #56	; 0x38
   1c782:	f00d fc74 	bl	2a06e <lv_area_get_size>
   1c786:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1c788:	4630      	mov	r0, r6
   1c78a:	f000 ff8f 	bl	1d6ac <_lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
   1c78e:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   1c792:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1c796:	441a      	add	r2, r3
   1c798:	b212      	sxth	r2, r2
   1c79a:	9207      	str	r2, [sp, #28]
   1c79c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
   1c7a0:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   1c7a4:	4413      	add	r3, r2
   1c7a6:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c7aa:	8a62      	ldrh	r2, [r4, #18]
   1c7ac:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   1c7b0:	4413      	add	r3, r2
   1c7b2:	b21b      	sxth	r3, r3

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
   1c7b4:	4631      	mov	r1, r6
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c7b6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
   1c7ba:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1c7be:	4605      	mov	r5, r0
    _lv_memset_ff(mask_buf, mask_buf_size);
   1c7c0:	f00c f917 	bl	289f2 <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   1c7c4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
   1c7c8:	f9b4 a012 	ldrsh.w	sl, [r4, #18]
    uint32_t mask_p = 0;
   1c7cc:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   1c7ce:	449a      	add	sl, r3
   1c7d0:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   1c7d4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   1c7d8:	4413      	add	r3, r2
   1c7da:	459a      	cmp	sl, r3
   1c7dc:	dd51      	ble.n	1c882 <lv_draw_line+0x77e>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
   1c7de:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
   1c7e2:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
   1c7e6:	429a      	cmp	r2, r3
   1c7e8:	d013      	beq.n	1c812 <lv_draw_line+0x70e>
        fill_area.y2--;
   1c7ea:	3b01      	subs	r3, #1
   1c7ec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
   1c7f0:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(&fill_area, clip,
   1c7f4:	f8bb 2000 	ldrh.w	r2, [fp]
   1c7f8:	f003 0303 	and.w	r3, r3, #3
   1c7fc:	9302      	str	r3, [sp, #8]
   1c7fe:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c802:	9301      	str	r3, [sp, #4]
   1c804:	2302      	movs	r3, #2
   1c806:	9300      	str	r3, [sp, #0]
   1c808:	a90c      	add	r1, sp, #48	; 0x30
   1c80a:	462b      	mov	r3, r5
   1c80c:	a810      	add	r0, sp, #64	; 0x40
   1c80e:	f00b fa01 	bl	27c14 <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
   1c812:	4628      	mov	r0, r5
   1c814:	f000 ffac 	bl	1d770 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
   1c818:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c81a:	f000 f8b7 	bl	1c98c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
   1c81e:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c820:	f000 f8b4 	bl	1c98c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
   1c824:	9808      	ldr	r0, [sp, #32]
   1c826:	f000 f8b1 	bl	1c98c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
   1c82a:	4640      	mov	r0, r8
   1c82c:	f000 f8ae 	bl	1c98c <lv_draw_mask_remove_id>
   1c830:	e507      	b.n	1c242 <lv_draw_line+0x13e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   1c832:	9a07      	ldr	r2, [sp, #28]
   1c834:	9500      	str	r5, [sp, #0]
   1c836:	4633      	mov	r3, r6
   1c838:	4639      	mov	r1, r7
   1c83a:	a812      	add	r0, sp, #72	; 0x48
   1c83c:	f000 f8dc 	bl	1c9f8 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c840:	2301      	movs	r3, #1
   1c842:	e9cd 4300 	strd	r4, r3, [sp]
   1c846:	4652      	mov	r2, sl
   1c848:	4633      	mov	r3, r6
   1c84a:	e732      	b.n	1c6b2 <lv_draw_line+0x5ae>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
   1c84c:	1973      	adds	r3, r6, r5
   1c84e:	2200      	movs	r2, #0
   1c850:	443d      	add	r5, r7
   1c852:	e9cd 8200 	strd	r8, r2, [sp]
   1c856:	b21b      	sxth	r3, r3
   1c858:	464a      	mov	r2, r9
   1c85a:	b229      	sxth	r1, r5
   1c85c:	a812      	add	r0, sp, #72	; 0x48
   1c85e:	f000 f8cb 	bl	1c9f8 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   1c862:	2201      	movs	r2, #1
   1c864:	1b33      	subs	r3, r6, r4
   1c866:	1b39      	subs	r1, r7, r4
   1c868:	e9cd 8200 	strd	r8, r2, [sp]
   1c86c:	b21b      	sxth	r3, r3
   1c86e:	464a      	mov	r2, r9
   1c870:	b209      	sxth	r1, r1
   1c872:	e71f      	b.n	1c6b4 <lv_draw_line+0x5b0>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
   1c874:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
   1c878:	f8cd 8020 	str.w	r8, [sp, #32]
   1c87c:	e758      	b.n	1c730 <lv_draw_line+0x62c>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   1c87e:	26f0      	movs	r6, #240	; 0xf0
   1c880:	e782      	b.n	1c788 <lv_draw_line+0x684>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
   1c882:	19eb      	adds	r3, r5, r7
   1c884:	930b      	str	r3, [sp, #44]	; 0x2c
   1c886:	9907      	ldr	r1, [sp, #28]
   1c888:	464b      	mov	r3, r9
   1c88a:	fa0f f28a 	sxth.w	r2, sl
   1c88e:	19e8      	adds	r0, r5, r7
   1c890:	f000 f85a 	bl	1c948 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   1c894:	b918      	cbnz	r0, 1c89e <lv_draw_line+0x79a>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
   1c896:	4649      	mov	r1, r9
   1c898:	19e8      	adds	r0, r5, r7
   1c89a:	f00c f8a6 	bl	289ea <_lv_memset_00>
        mask_p += draw_area_w;
   1c89e:	444f      	add	r7, r9
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
   1c8a0:	eb07 0309 	add.w	r3, r7, r9
   1c8a4:	429e      	cmp	r6, r3
   1c8a6:	d907      	bls.n	1c8b8 <lv_draw_line+0x7b4>
            fill_area.y2 ++;
   1c8a8:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1c8ac:	3301      	adds	r3, #1
   1c8ae:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   1c8b2:	f10a 0a01 	add.w	sl, sl, #1
   1c8b6:	e78b      	b.n	1c7d0 <lv_draw_line+0x6cc>
                           dsc->blend_mode);
   1c8b8:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(&fill_area, clip,
   1c8bc:	f8bb 2000 	ldrh.w	r2, [fp]
   1c8c0:	f003 0303 	and.w	r3, r3, #3
   1c8c4:	9302      	str	r3, [sp, #8]
   1c8c6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c8ca:	9301      	str	r3, [sp, #4]
   1c8cc:	2302      	movs	r3, #2
   1c8ce:	9300      	str	r3, [sp, #0]
   1c8d0:	a90c      	add	r1, sp, #48	; 0x30
   1c8d2:	462b      	mov	r3, r5
   1c8d4:	a810      	add	r0, sp, #64	; 0x40
   1c8d6:	f00b f99d 	bl	27c14 <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   1c8da:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1c8de:	3301      	adds	r3, #1
   1c8e0:	b21b      	sxth	r3, r3
            _lv_memset_ff(mask_buf, mask_buf_size);
   1c8e2:	4631      	mov	r1, r6
   1c8e4:	4628      	mov	r0, r5
            fill_area.y1 = fill_area.y2 + 1;
   1c8e6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
   1c8ea:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
   1c8ee:	2700      	movs	r7, #0
            _lv_memset_ff(mask_buf, mask_buf_size);
   1c8f0:	f00c f87f 	bl	289f2 <_lv_memset_ff>
   1c8f4:	e7dd      	b.n	1c8b2 <lv_draw_line+0x7ae>
   1c8f6:	bf00      	nop
   1c8f8:	00030310 	.word	0x00030310

0001c8fc <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
   1c8fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   1c8fe:	4c0e      	ldr	r4, [pc, #56]	; (1c938 <lv_draw_mask_add+0x3c>)
{
   1c900:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   1c902:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
   1c906:	b2da      	uxtb	r2, r3
   1c908:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
   1c90c:	b176      	cbz	r6, 1c92c <lv_draw_mask_add+0x30>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   1c90e:	3301      	adds	r3, #1
   1c910:	2b10      	cmp	r3, #16
   1c912:	d1f6      	bne.n	1c902 <lv_draw_mask_add+0x6>
    }

    if(i >= _LV_MASK_MAX_NUM) {
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
   1c914:	4b09      	ldr	r3, [pc, #36]	; (1c93c <lv_draw_mask_add+0x40>)
   1c916:	9300      	str	r3, [sp, #0]
   1c918:	2002      	movs	r0, #2
   1c91a:	4b09      	ldr	r3, [pc, #36]	; (1c940 <lv_draw_mask_add+0x44>)
   1c91c:	4909      	ldr	r1, [pc, #36]	; (1c944 <lv_draw_mask_add+0x48>)
   1c91e:	2253      	movs	r2, #83	; 0x53
   1c920:	f000 fe1a 	bl	1d558 <_lv_log_add>
        return LV_MASK_ID_INV;
   1c924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;

    return i;
}
   1c928:	b002      	add	sp, #8
   1c92a:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
   1c92c:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
   1c930:	6069      	str	r1, [r5, #4]
    return i;
   1c932:	b210      	sxth	r0, r2
   1c934:	e7f8      	b.n	1c928 <lv_draw_mask_add+0x2c>
   1c936:	bf00      	nop
   1c938:	20003edc 	.word	0x20003edc
   1c93c:	0003036d 	.word	0x0003036d
   1c940:	00030393 	.word	0x00030393
   1c944:	00030331 	.word	0x00030331

0001c948 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
   1c948:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bool changed = false;
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
   1c94c:	4e0e      	ldr	r6, [pc, #56]	; (1c988 <lv_draw_mask_apply+0x40>)
{
   1c94e:	4607      	mov	r7, r0
   1c950:	4688      	mov	r8, r1
   1c952:	4691      	mov	r9, r2
   1c954:	469a      	mov	sl, r3
    bool changed = false;
   1c956:	2500      	movs	r5, #0

    while(m->param) {
   1c958:	6834      	ldr	r4, [r6, #0]
   1c95a:	b934      	cbnz	r4, 1c96a <lv_draw_mask_apply+0x22>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;

        m++;
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
   1c95c:	2d00      	cmp	r5, #0
   1c95e:	bf14      	ite	ne
   1c960:	2002      	movne	r0, #2
   1c962:	2001      	moveq	r0, #1
}
   1c964:	b002      	add	sp, #8
   1c966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
   1c96a:	9400      	str	r4, [sp, #0]
   1c96c:	6824      	ldr	r4, [r4, #0]
   1c96e:	4653      	mov	r3, sl
   1c970:	464a      	mov	r2, r9
   1c972:	4641      	mov	r1, r8
   1c974:	4638      	mov	r0, r7
   1c976:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
   1c978:	2800      	cmp	r0, #0
   1c97a:	d0f3      	beq.n	1c964 <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
   1c97c:	2802      	cmp	r0, #2
   1c97e:	bf08      	it	eq
   1c980:	2501      	moveq	r5, #1
        m++;
   1c982:	3608      	adds	r6, #8
   1c984:	e7e8      	b.n	1c958 <lv_draw_mask_apply+0x10>
   1c986:	bf00      	nop
   1c988:	20003edc 	.word	0x20003edc

0001c98c <lv_draw_mask_remove_id>:
 */
void * lv_draw_mask_remove_id(int16_t id)
{
    void * p = NULL;

    if(id != LV_MASK_ID_INV) {
   1c98c:	1c42      	adds	r2, r0, #1
{
   1c98e:	4603      	mov	r3, r0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
   1c990:	bf18      	it	ne
   1c992:	4a07      	ldrne	r2, [pc, #28]	; (1c9b0 <lv_draw_mask_remove_id+0x24>)
   1c994:	f04f 0100 	mov.w	r1, #0
   1c998:	bf1d      	ittte	ne
   1c99a:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
   1c99e:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   1c9a2:	eb02 03c3 	addne.w	r3, r2, r3, lsl #3
    void * p = NULL;
   1c9a6:	4608      	moveq	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   1c9a8:	bf18      	it	ne
   1c9aa:	6059      	strne	r1, [r3, #4]
    }

    return p;
}
   1c9ac:	4770      	bx	lr
   1c9ae:	bf00      	nop
   1c9b0:	20003edc 	.word	0x20003edc

0001c9b4 <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
   1c9b4:	2200      	movs	r2, #0
   1c9b6:	4b08      	ldr	r3, [pc, #32]	; (1c9d8 <lv_draw_mask_remove_custom+0x24>)
   1c9b8:	b530      	push	{r4, r5, lr}
   1c9ba:	4601      	mov	r1, r0
    void * p = NULL;
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
   1c9bc:	4614      	mov	r4, r2
    void * p = NULL;
   1c9be:	4610      	mov	r0, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
   1c9c0:	685d      	ldr	r5, [r3, #4]
   1c9c2:	3201      	adds	r2, #1
   1c9c4:	428d      	cmp	r5, r1
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
   1c9c6:	bf04      	itt	eq
   1c9c8:	6818      	ldreq	r0, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
   1c9ca:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   1c9ce:	2a10      	cmp	r2, #16
   1c9d0:	f103 0308 	add.w	r3, r3, #8
   1c9d4:	d1f4      	bne.n	1c9c0 <lv_draw_mask_remove_custom+0xc>
        }
    }
    return p;
}
   1c9d6:	bd30      	pop	{r4, r5, pc}
   1c9d8:	20003edc 	.word	0x20003edc

0001c9dc <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
   1c9dc:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   1c9de:	4a05      	ldr	r2, [pc, #20]	; (1c9f4 <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
   1c9e0:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   1c9e2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1c9e6:	b109      	cbz	r1, 1c9ec <lv_draw_mask_get_cnt+0x10>
   1c9e8:	3001      	adds	r0, #1
   1c9ea:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   1c9ec:	3301      	adds	r3, #1
   1c9ee:	2b10      	cmp	r3, #16
   1c9f0:	d1f7      	bne.n	1c9e2 <lv_draw_mask_get_cnt+0x6>
    }
    return cnt;
}
   1c9f2:	4770      	bx	lr
   1c9f4:	20003edc 	.word	0x20003edc

0001c9f8 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
   1c9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9fc:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   1ca00:	4615      	mov	r5, r2
   1ca02:	460e      	mov	r6, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   1ca04:	212c      	movs	r1, #44	; 0x2c
{
   1ca06:	4604      	mov	r4, r0
   1ca08:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   1ca0a:	f00c f810 	bl	28a2e <_lv_memset_00>

    if(p1y > p2y) {
   1ca0e:	4545      	cmp	r5, r8
   1ca10:	dd05      	ble.n	1ca1e <lv_draw_mask_line_points_init+0x26>
   1ca12:	462b      	mov	r3, r5
   1ca14:	4645      	mov	r5, r8
   1ca16:	4698      	mov	r8, r3
   1ca18:	4633      	mov	r3, r6
        lv_coord_t t;
        t = p2x;
        p2x = p1x;
        p1x = t;
   1ca1a:	463e      	mov	r6, r7
        p2x = p1x;
   1ca1c:	461f      	mov	r7, r3

    param->cfg.p1.x = p1x;
    param->cfg.p1.y = p1y;
    param->cfg.p2.x = p2x;
    param->cfg.p2.y = p2y;
    param->cfg.side = side;
   1ca1e:	7c23      	ldrb	r3, [r4, #16]
   1ca20:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
   1ca24:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
   1ca26:	f362 0301 	bfi	r3, r2, #0, #2
   1ca2a:	7423      	strb	r3, [r4, #16]

    param->origo.x = p1x;
    param->origo.y = p1y;
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   1ca2c:	eba8 0205 	sub.w	r2, r8, r5
   1ca30:	1bbb      	subs	r3, r7, r6
   1ca32:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
   1ca36:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   1ca3a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
   1ca3e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
   1ca42:	4288      	cmp	r0, r1
   1ca44:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->origo.y = p1y;
   1ca48:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   1ca4a:	bfd4      	ite	le
   1ca4c:	2000      	movle	r0, #0
   1ca4e:	2001      	movgt	r0, #1
   1ca50:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
    param->xy_steep = 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   1ca54:	4d29      	ldr	r5, [pc, #164]	; (1cafc <lv_draw_mask_line_points_init+0x104>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   1ca56:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    param->yx_steep = 0;
   1ca5a:	2000      	movs	r0, #0
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;

    int32_t dx = p2x - p1x;
    int32_t dy = p2y - p1y;

    if(param->flat) {
   1ca5c:	07c9      	lsls	r1, r1, #31
    param->xy_steep = 0;
   1ca5e:	e9c4 0006 	strd	r0, r0, [r4, #24]
    param->cfg.p1.x = p1x;
   1ca62:	8126      	strh	r6, [r4, #8]
    param->cfg.p2.x = p2x;
   1ca64:	81a7      	strh	r7, [r4, #12]
    param->cfg.p2.y = p2y;
   1ca66:	f8a4 800e 	strh.w	r8, [r4, #14]
    param->origo.x = p1x;
   1ca6a:	8266      	strh	r6, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   1ca6c:	6025      	str	r5, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
   1ca6e:	7120      	strb	r0, [r4, #4]
    if(param->flat) {
   1ca70:	d524      	bpl.n	1cabc <lv_draw_mask_line_points_init+0xc4>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
   1ca72:	b133      	cbz	r3, 1ca82 <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
   1ca74:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1ca78:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
   1ca7c:	4351      	muls	r1, r2
   1ca7e:	1289      	asrs	r1, r1, #10
   1ca80:	61e1      	str	r1, [r4, #28]
        }

        if(dy) {
   1ca82:	b132      	cbz	r2, 1ca92 <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   1ca84:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1ca88:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
   1ca8c:	4353      	muls	r3, r2
   1ca8e:	129b      	asrs	r3, r3, #10
   1ca90:	61a3      	str	r3, [r4, #24]
        }
        param->steep = param->yx_steep;
   1ca92:	69e3      	ldr	r3, [r4, #28]
            param->yx_steep = (m * dy) >> 10;
        }
        param->steep = param->xy_steep;
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   1ca94:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
   1ca96:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   1ca98:	f012 0203 	ands.w	r2, r2, #3
   1ca9c:	6a21      	ldr	r1, [r4, #32]
   1ca9e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1caa2:	d11d      	bne.n	1cae0 <lv_draw_mask_line_points_init+0xe8>
   1caa4:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   1caa8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if(param->steep > 0) param->inv = 0;
        else param->inv = 1;
    }

    param->spx = param->steep >> 2;
    if(param->steep < 0) param->spx = -param->spx;
   1caac:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
   1caae:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
   1cab2:	bfb8      	it	lt
   1cab4:	425b      	neglt	r3, r3
   1cab6:	6263      	str	r3, [r4, #36]	; 0x24
}
   1cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
   1cabc:	b132      	cbz	r2, 1cacc <lv_draw_mask_line_points_init+0xd4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   1cabe:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1cac2:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
   1cac6:	4359      	muls	r1, r3
   1cac8:	1289      	asrs	r1, r1, #10
   1caca:	61a1      	str	r1, [r4, #24]
        if(dx) {
   1cacc:	b133      	cbz	r3, 1cadc <lv_draw_mask_line_points_init+0xe4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
   1cace:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1cad2:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
   1cad6:	435a      	muls	r2, r3
   1cad8:	1292      	asrs	r2, r2, #10
   1cada:	61e2      	str	r2, [r4, #28]
        param->steep = param->xy_steep;
   1cadc:	69a3      	ldr	r3, [r4, #24]
   1cade:	e7d9      	b.n	1ca94 <lv_draw_mask_line_points_init+0x9c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   1cae0:	2a01      	cmp	r2, #1
   1cae2:	d102      	bne.n	1caea <lv_draw_mask_line_points_init+0xf2>
   1cae4:	f043 0302 	orr.w	r3, r3, #2
   1cae8:	e7de      	b.n	1caa8 <lv_draw_mask_line_points_init+0xb0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
   1caea:	2a02      	cmp	r2, #2
   1caec:	d102      	bne.n	1caf4 <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
   1caee:	2900      	cmp	r1, #0
   1caf0:	dcf8      	bgt.n	1cae4 <lv_draw_mask_line_points_init+0xec>
   1caf2:	e7d7      	b.n	1caa4 <lv_draw_mask_line_points_init+0xac>
        if(param->steep > 0) param->inv = 0;
   1caf4:	2900      	cmp	r1, #0
   1caf6:	dcd5      	bgt.n	1caa4 <lv_draw_mask_line_points_init+0xac>
   1caf8:	e7f4      	b.n	1cae4 <lv_draw_mask_line_points_init+0xec>
   1cafa:	bf00      	nop
   1cafc:	00028a37 	.word	0x00028a37

0001cb00 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
   1cb00:	b570      	push	{r4, r5, r6, lr}
   1cb02:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1cb04:	88c8      	ldrh	r0, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1cb06:	888d      	ldrh	r5, [r1, #4]
   1cb08:	4616      	mov	r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1cb0a:	884a      	ldrh	r2, [r1, #2]
   1cb0c:	3001      	adds	r0, #1
   1cb0e:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1cb10:	880a      	ldrh	r2, [r1, #0]
   1cb12:	3501      	adds	r5, #1
   1cb14:	1aad      	subs	r5, r5, r2
    lv_coord_t w = lv_area_get_width(rect);
    lv_coord_t h = lv_area_get_height(rect);
    int32_t short_side = LV_MATH_MIN(w, h);
   1cb16:	b200      	sxth	r0, r0
   1cb18:	b22d      	sxth	r5, r5
   1cb1a:	42a8      	cmp	r0, r5
   1cb1c:	bfa8      	it	ge
   1cb1e:	4628      	movge	r0, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
   1cb20:	1042      	asrs	r2, r0, #1
   1cb22:	ebb6 0f60 	cmp.w	r6, r0, asr #1
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   1cb26:	f104 0008 	add.w	r0, r4, #8
   1cb2a:	bfc8      	it	gt
   1cb2c:	b216      	sxthgt	r6, r2
   1cb2e:	f00c f934 	bl	28d9a <_lv_memcpy_small.constprop.0>

    lv_area_copy(&param->cfg.rect, rect);
    param->cfg.radius = radius;
    param->cfg.outer = inv ? 1 : 0;
   1cb32:	7ca2      	ldrb	r2, [r4, #18]
    param->cfg.radius = radius;
   1cb34:	8226      	strh	r6, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
   1cb36:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
   1cb3a:	4b05      	ldr	r3, [pc, #20]	; (1cb50 <lv_draw_mask_radius_init+0x50>)
   1cb3c:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   1cb3e:	2302      	movs	r3, #2
    param->cfg.outer = inv ? 1 : 0;
   1cb40:	74a2      	strb	r2, [r4, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   1cb42:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
    param->y_prev_x.f = 0;
    param->y_prev_x.i = 0;
   1cb44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1cb48:	2300      	movs	r3, #0
   1cb4a:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
   1cb4e:	bd70      	pop	{r4, r5, r6, pc}
   1cb50:	00028da5 	.word	0x00028da5

0001cb54 <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
   1cb54:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   1cb56:	2254      	movs	r2, #84	; 0x54
   1cb58:	2100      	movs	r1, #0
   1cb5a:	4604      	mov	r4, r0
   1cb5c:	f00e fe4a 	bl	2b7f4 <memset>
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    dsc->bg_color = LV_COLOR_WHITE;
   1cb60:	4b09      	ldr	r3, [pc, #36]	; (1cb88 <lv_draw_rect_dsc_init+0x34>)
    dsc->bg_grad_color_stop = 0xFF;
    dsc->bg_opa = LV_OPA_COVER;
    dsc->outline_opa = LV_OPA_COVER;
    dsc->border_opa = LV_OPA_COVER;
    dsc->pattern_opa = LV_OPA_COVER;
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   1cb62:	4a0a      	ldr	r2, [pc, #40]	; (1cb8c <lv_draw_rect_dsc_init+0x38>)
    dsc->bg_color = LV_COLOR_WHITE;
   1cb64:	881b      	ldrh	r3, [r3, #0]
   1cb66:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color_stop = 0xFF;
   1cb68:	23ff      	movs	r3, #255	; 0xff
   1cb6a:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
   1cb6c:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
   1cb6e:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
   1cb70:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
   1cb72:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->value_opa = LV_OPA_COVER;
   1cb76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    dsc->shadow_opa = LV_OPA_COVER;
   1cb7a:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
   1cb7e:	230f      	movs	r3, #15
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   1cb80:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
   1cb82:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->border_side = LV_BORDER_SIDE_FULL;
   1cb84:	8263      	strh	r3, [r4, #18]

}
   1cb86:	bd10      	pop	{r4, pc}
   1cb88:	0002c15c 	.word	0x0002c15c
   1cb8c:	20000820 	.word	0x20000820

0001cb90 <_lv_img_cache_open>:
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    if(entry_cnt == 0) {
   1cb90:	4b56      	ldr	r3, [pc, #344]	; (1ccec <_lv_img_cache_open+0x15c>)
{
   1cb92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
   1cb96:	881c      	ldrh	r4, [r3, #0]
{
   1cb98:	4605      	mov	r5, r0
   1cb9a:	460e      	mov	r6, r1
   1cb9c:	4699      	mov	r9, r3
    if(entry_cnt == 0) {
   1cb9e:	b95c      	cbnz	r4, 1cbb8 <_lv_img_cache_open+0x28>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
   1cba0:	4b53      	ldr	r3, [pc, #332]	; (1ccf0 <_lv_img_cache_open+0x160>)
   1cba2:	9300      	str	r3, [sp, #0]
   1cba4:	4953      	ldr	r1, [pc, #332]	; (1ccf4 <_lv_img_cache_open+0x164>)
   1cba6:	4b54      	ldr	r3, [pc, #336]	; (1ccf8 <_lv_img_cache_open+0x168>)
   1cba8:	2244      	movs	r2, #68	; 0x44
   1cbaa:	2002      	movs	r0, #2
   1cbac:	f000 fcd4 	bl	1d558 <_lv_log_add>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
   1cbb0:	4620      	mov	r0, r4
   1cbb2:	b003      	add	sp, #12
   1cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1cbb8:	4b50      	ldr	r3, [pc, #320]	; (1ccfc <_lv_img_cache_open+0x16c>)
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   1cbba:	4851      	ldr	r0, [pc, #324]	; (1cd00 <_lv_img_cache_open+0x170>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1cbbc:	681f      	ldr	r7, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
   1cbbe:	2100      	movs	r1, #0
   1cbc0:	463b      	mov	r3, r7
   1cbc2:	b28a      	uxth	r2, r1
   1cbc4:	4294      	cmp	r4, r2
   1cbc6:	d846      	bhi.n	1cc56 <_lv_img_cache_open+0xc6>
   1cbc8:	f04f 0800 	mov.w	r8, #0
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   1cbcc:	f04f 0a24 	mov.w	sl, #36	; 0x24
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   1cbd0:	fa1f fb86 	uxth.w	fp, r6
    for(i = 0; i < entry_cnt; i++) {
   1cbd4:	f8b9 1000 	ldrh.w	r1, [r9]
   1cbd8:	fa1f f388 	uxth.w	r3, r8
   1cbdc:	4299      	cmp	r1, r3
   1cbde:	d843      	bhi.n	1cc68 <_lv_img_cache_open+0xd8>
   1cbe0:	f107 0224 	add.w	r2, r7, #36	; 0x24
        cached_src = &cache[0];
   1cbe4:	463c      	mov	r4, r7
        for(i = 1; i < entry_cnt; i++) {
   1cbe6:	2301      	movs	r3, #1
   1cbe8:	4299      	cmp	r1, r3
   1cbea:	d861      	bhi.n	1ccb0 <_lv_img_cache_open+0x120>
        if(cached_src->dec_dsc.src) {
   1cbec:	6863      	ldr	r3, [r4, #4]
   1cbee:	2b00      	cmp	r3, #0
   1cbf0:	d067      	beq.n	1ccc2 <_lv_img_cache_open+0x132>
            lv_img_decoder_close(&cached_src->dec_dsc);
   1cbf2:	4620      	mov	r0, r4
   1cbf4:	f00d f9a0 	bl	29f38 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, close and reuse an entry");
   1cbf8:	4b42      	ldr	r3, [pc, #264]	; (1cd04 <_lv_img_cache_open+0x174>)
   1cbfa:	9300      	str	r3, [sp, #0]
   1cbfc:	4b3e      	ldr	r3, [pc, #248]	; (1ccf8 <_lv_img_cache_open+0x168>)
   1cbfe:	2277      	movs	r2, #119	; 0x77
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
   1cc00:	493c      	ldr	r1, [pc, #240]	; (1ccf4 <_lv_img_cache_open+0x164>)
   1cc02:	2001      	movs	r0, #1
   1cc04:	f000 fca8 	bl	1d558 <_lv_log_add>
        t_start                          = lv_tick_get();
   1cc08:	f00d f9ed 	bl	29fe6 <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
   1cc0c:	f04f 0800 	mov.w	r8, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   1cc10:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
   1cc12:	4607      	mov	r7, r0
        cached_src->dec_dsc.time_to_open = 0;
   1cc14:	f8c4 8014 	str.w	r8, [r4, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   1cc18:	4632      	mov	r2, r6
   1cc1a:	4620      	mov	r0, r4
   1cc1c:	f000 fb46 	bl	1d2ac <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
   1cc20:	4605      	mov	r5, r0
   1cc22:	2800      	cmp	r0, #0
   1cc24:	d152      	bne.n	1cccc <_lv_img_cache_open+0x13c>
            LV_LOG_WARN("Image draw cannot open the image resource");
   1cc26:	4b38      	ldr	r3, [pc, #224]	; (1cd08 <_lv_img_cache_open+0x178>)
   1cc28:	4932      	ldr	r1, [pc, #200]	; (1ccf4 <_lv_img_cache_open+0x164>)
   1cc2a:	9300      	str	r3, [sp, #0]
   1cc2c:	2283      	movs	r2, #131	; 0x83
   1cc2e:	4b32      	ldr	r3, [pc, #200]	; (1ccf8 <_lv_img_cache_open+0x168>)
   1cc30:	2002      	movs	r0, #2
   1cc32:	f000 fc91 	bl	1d558 <_lv_log_add>
            lv_img_decoder_close(&cached_src->dec_dsc);
   1cc36:	4620      	mov	r0, r4
   1cc38:	f00d f97e 	bl	29f38 <lv_img_decoder_close>
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1cc3c:	4620      	mov	r0, r4
   1cc3e:	2120      	movs	r1, #32
   1cc40:	f00d f950 	bl	29ee4 <_lv_memset_00>
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
   1cc44:	4620      	mov	r0, r4
   1cc46:	2124      	movs	r1, #36	; 0x24
   1cc48:	f00d f94c 	bl	29ee4 <_lv_memset_00>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
   1cc4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1cc50:	6223      	str	r3, [r4, #32]
            return NULL;
   1cc52:	462c      	mov	r4, r5
   1cc54:	e7ac      	b.n	1cbb0 <_lv_img_cache_open+0x20>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   1cc56:	6a1a      	ldr	r2, [r3, #32]
   1cc58:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
   1cc5a:	bfa4      	itt	ge
   1cc5c:	f102 32ff 	addge.w	r2, r2, #4294967295	; 0xffffffff
   1cc60:	621a      	strge	r2, [r3, #32]
    for(i = 0; i < entry_cnt; i++) {
   1cc62:	3101      	adds	r1, #1
   1cc64:	3324      	adds	r3, #36	; 0x24
   1cc66:	e7ac      	b.n	1cbc2 <_lv_img_cache_open+0x32>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   1cc68:	fa1f f488 	uxth.w	r4, r8
   1cc6c:	fb0a 7404 	mla	r4, sl, r4, r7
   1cc70:	6860      	ldr	r0, [r4, #4]
   1cc72:	f00b fe94 	bl	2899e <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
   1cc76:	b968      	cbnz	r0, 1cc94 <_lv_img_cache_open+0x104>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   1cc78:	6863      	ldr	r3, [r4, #4]
   1cc7a:	42ab      	cmp	r3, r5
   1cc7c:	d112      	bne.n	1cca4 <_lv_img_cache_open+0x114>
   1cc7e:	8923      	ldrh	r3, [r4, #8]
   1cc80:	455b      	cmp	r3, fp
   1cc82:	d10f      	bne.n	1cca4 <_lv_img_cache_open+0x114>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
   1cc84:	6a23      	ldr	r3, [r4, #32]
   1cc86:	6962      	ldr	r2, [r4, #20]
   1cc88:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   1cc8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1cc8e:	dc0c      	bgt.n	1ccaa <_lv_img_cache_open+0x11a>
   1cc90:	6223      	str	r3, [r4, #32]
   1cc92:	e78d      	b.n	1cbb0 <_lv_img_cache_open+0x20>
        else if(src_type == LV_IMG_SRC_FILE) {
   1cc94:	2801      	cmp	r0, #1
   1cc96:	d105      	bne.n	1cca4 <_lv_img_cache_open+0x114>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
   1cc98:	6860      	ldr	r0, [r4, #4]
   1cc9a:	4629      	mov	r1, r5
   1cc9c:	f7e3 fbec 	bl	478 <strcmp>
   1cca0:	2800      	cmp	r0, #0
   1cca2:	d0ef      	beq.n	1cc84 <_lv_img_cache_open+0xf4>
    for(i = 0; i < entry_cnt; i++) {
   1cca4:	f108 0801 	add.w	r8, r8, #1
   1cca8:	e794      	b.n	1cbd4 <_lv_img_cache_open+0x44>
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   1ccaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1ccae:	e7ef      	b.n	1cc90 <_lv_img_cache_open+0x100>
            if(cache[i].life < cached_src->life) {
   1ccb0:	6a17      	ldr	r7, [r2, #32]
   1ccb2:	6a20      	ldr	r0, [r4, #32]
        for(i = 1; i < entry_cnt; i++) {
   1ccb4:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
   1ccb6:	4287      	cmp	r7, r0
   1ccb8:	bfb8      	it	lt
   1ccba:	4614      	movlt	r4, r2
        for(i = 1; i < entry_cnt; i++) {
   1ccbc:	b29b      	uxth	r3, r3
   1ccbe:	3224      	adds	r2, #36	; 0x24
   1ccc0:	e792      	b.n	1cbe8 <_lv_img_cache_open+0x58>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
   1ccc2:	4b12      	ldr	r3, [pc, #72]	; (1cd0c <_lv_img_cache_open+0x17c>)
   1ccc4:	9300      	str	r3, [sp, #0]
   1ccc6:	227a      	movs	r2, #122	; 0x7a
   1ccc8:	4b0b      	ldr	r3, [pc, #44]	; (1ccf8 <_lv_img_cache_open+0x168>)
   1ccca:	e799      	b.n	1cc00 <_lv_img_cache_open+0x70>
        if(cached_src->dec_dsc.time_to_open == 0) {
   1cccc:	6963      	ldr	r3, [r4, #20]
        cached_src->life = 0;
   1ccce:	f8c4 8020 	str.w	r8, [r4, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
   1ccd2:	2b00      	cmp	r3, #0
   1ccd4:	f47f af6c 	bne.w	1cbb0 <_lv_img_cache_open+0x20>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   1ccd8:	4638      	mov	r0, r7
   1ccda:	f00d f991 	bl	2a000 <lv_tick_elaps>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   1ccde:	b108      	cbz	r0, 1cce4 <_lv_img_cache_open+0x154>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   1cce0:	6160      	str	r0, [r4, #20]
   1cce2:	e765      	b.n	1cbb0 <_lv_img_cache_open+0x20>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   1cce4:	2301      	movs	r3, #1
   1cce6:	6163      	str	r3, [r4, #20]
   1cce8:	e762      	b.n	1cbb0 <_lv_img_cache_open+0x20>
   1ccea:	bf00      	nop
   1ccec:	200080fa 	.word	0x200080fa
   1ccf0:	000303e0 	.word	0x000303e0
   1ccf4:	000303a4 	.word	0x000303a4
   1ccf8:	00030493 	.word	0x00030493
   1ccfc:	20003f60 	.word	0x20003f60
   1cd00:	80000002 	.word	0x80000002
   1cd04:	00030407 	.word	0x00030407
   1cd08:	00030469 	.word	0x00030469
   1cd0c:	00030438 	.word	0x00030438

0001cd10 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
   1cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1cd14:	4b11      	ldr	r3, [pc, #68]	; (1cd5c <lv_img_cache_invalidate_src+0x4c>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
   1cd16:	4f12      	ldr	r7, [pc, #72]	; (1cd60 <lv_img_cache_invalidate_src+0x50>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1cd18:	f8d3 8000 	ldr.w	r8, [r3]
{
   1cd1c:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
   1cd1e:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
   1cd20:	f04f 0924 	mov.w	r9, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
   1cd24:	883a      	ldrh	r2, [r7, #0]
   1cd26:	b2ab      	uxth	r3, r5
   1cd28:	429a      	cmp	r2, r3
   1cd2a:	d801      	bhi.n	1cd30 <lv_img_cache_invalidate_src+0x20>

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
}
   1cd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
   1cd30:	b2ac      	uxth	r4, r5
   1cd32:	fb09 8404 	mla	r4, r9, r4, r8
   1cd36:	6863      	ldr	r3, [r4, #4]
   1cd38:	42b3      	cmp	r3, r6
   1cd3a:	d000      	beq.n	1cd3e <lv_img_cache_invalidate_src+0x2e>
   1cd3c:	b95e      	cbnz	r6, 1cd56 <lv_img_cache_invalidate_src+0x46>
            if(cache[i].dec_dsc.src != NULL) {
   1cd3e:	b113      	cbz	r3, 1cd46 <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
   1cd40:	4620      	mov	r0, r4
   1cd42:	f00d f8f9 	bl	29f38 <lv_img_decoder_close>
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1cd46:	2120      	movs	r1, #32
   1cd48:	4620      	mov	r0, r4
   1cd4a:	f00d f8cb 	bl	29ee4 <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
   1cd4e:	2124      	movs	r1, #36	; 0x24
   1cd50:	4620      	mov	r0, r4
   1cd52:	f00d f8c7 	bl	29ee4 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
   1cd56:	3501      	adds	r5, #1
   1cd58:	e7e4      	b.n	1cd24 <lv_img_cache_invalidate_src+0x14>
   1cd5a:	bf00      	nop
   1cd5c:	20003f60 	.word	0x20003f60
   1cd60:	200080fa 	.word	0x200080fa

0001cd64 <lv_img_cache_set_size>:
{
   1cd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1cd68:	4c13      	ldr	r4, [pc, #76]	; (1cdb8 <lv_img_cache_set_size+0x54>)
   1cd6a:	6823      	ldr	r3, [r4, #0]
{
   1cd6c:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1cd6e:	b12b      	cbz	r3, 1cd7c <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
   1cd70:	2000      	movs	r0, #0
   1cd72:	f7ff ffcd 	bl	1cd10 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
   1cd76:	6820      	ldr	r0, [r4, #0]
   1cd78:	f000 fc3e 	bl	1d5f8 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
   1cd7c:	2724      	movs	r7, #36	; 0x24
   1cd7e:	fb07 f005 	mul.w	r0, r7, r5
   1cd82:	f000 fc11 	bl	1d5a8 <lv_mem_alloc>
   1cd86:	4b0d      	ldr	r3, [pc, #52]	; (1cdbc <lv_img_cache_set_size+0x58>)
   1cd88:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
   1cd8a:	b910      	cbnz	r0, 1cd92 <lv_img_cache_set_size+0x2e>
        entry_cnt = 0;
   1cd8c:	8018      	strh	r0, [r3, #0]
}
   1cd8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
   1cd92:	801d      	strh	r5, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
   1cd94:	2600      	movs	r6, #0
   1cd96:	42b5      	cmp	r5, r6
   1cd98:	d0f9      	beq.n	1cd8e <lv_img_cache_set_size+0x2a>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1cd9a:	6820      	ldr	r0, [r4, #0]
   1cd9c:	fb07 f806 	mul.w	r8, r7, r6
   1cda0:	2120      	movs	r1, #32
   1cda2:	4440      	add	r0, r8
   1cda4:	f00d f89e 	bl	29ee4 <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
   1cda8:	6820      	ldr	r0, [r4, #0]
   1cdaa:	2124      	movs	r1, #36	; 0x24
   1cdac:	4440      	add	r0, r8
   1cdae:	f00d f899 	bl	29ee4 <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
   1cdb2:	3601      	adds	r6, #1
   1cdb4:	e7ef      	b.n	1cd96 <lv_img_cache_set_size+0x32>
   1cdb6:	bf00      	nop
   1cdb8:	20003f60 	.word	0x20003f60
   1cdbc:	200080fa 	.word	0x200080fa

0001cdc0 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
   1cdc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
   1cdc2:	4608      	mov	r0, r1
{
   1cdc4:	460d      	mov	r5, r1
   1cdc6:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
   1cdc8:	f00b fde9 	bl	2899e <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
   1cdcc:	b9c8      	cbnz	r0, 1ce02 <lv_img_decoder_built_in_info+0x42>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1cdce:	782b      	ldrb	r3, [r5, #0]
   1cdd0:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   1cdd4:	3b04      	subs	r3, #4
   1cdd6:	b2db      	uxtb	r3, r3
   1cdd8:	2b0a      	cmp	r3, #10
   1cdda:	d810      	bhi.n	1cdfe <lv_img_decoder_built_in_info+0x3e>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1cddc:	886b      	ldrh	r3, [r5, #2]
   1cdde:	8862      	ldrh	r2, [r4, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1cde0:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1cde2:	095b      	lsrs	r3, r3, #5
   1cde4:	f363 124f 	bfi	r2, r3, #5, #11
   1cde8:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
   1cdea:	6823      	ldr	r3, [r4, #0]
   1cdec:	4a0e      	ldr	r2, [pc, #56]	; (1ce28 <lv_img_decoder_built_in_info+0x68>)
   1cdee:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
   1cdf2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
   1cdf6:	400a      	ands	r2, r1
         * function*/
        header->w = 1;
        header->h = 1;
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   1cdf8:	4313      	orrs	r3, r2
   1cdfa:	6023      	str	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
   1cdfc:	2001      	movs	r0, #1
}
   1cdfe:	b003      	add	sp, #12
   1ce00:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
   1ce02:	2802      	cmp	r0, #2
   1ce04:	d104      	bne.n	1ce10 <lv_img_decoder_built_in_info+0x50>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   1ce06:	6823      	ldr	r3, [r4, #0]
   1ce08:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
   1ce0c:	4b07      	ldr	r3, [pc, #28]	; (1ce2c <lv_img_decoder_built_in_info+0x6c>)
   1ce0e:	e7f3      	b.n	1cdf8 <lv_img_decoder_built_in_info+0x38>
        LV_LOG_WARN("Image get info found unknown src type");
   1ce10:	4b07      	ldr	r3, [pc, #28]	; (1ce30 <lv_img_decoder_built_in_info+0x70>)
   1ce12:	9300      	str	r3, [sp, #0]
   1ce14:	2002      	movs	r0, #2
   1ce16:	4b07      	ldr	r3, [pc, #28]	; (1ce34 <lv_img_decoder_built_in_info+0x74>)
   1ce18:	4907      	ldr	r1, [pc, #28]	; (1ce38 <lv_img_decoder_built_in_info+0x78>)
   1ce1a:	f240 1233 	movw	r2, #307	; 0x133
   1ce1e:	f000 fb9b 	bl	1d558 <_lv_log_add>
   1ce22:	2000      	movs	r0, #0
   1ce24:	e7eb      	b.n	1cdfe <lv_img_decoder_built_in_info+0x3e>
   1ce26:	bf00      	nop
   1ce28:	001ffc1f 	.word	0x001ffc1f
   1ce2c:	0020040b 	.word	0x0020040b
   1ce30:	000304e4 	.word	0x000304e4
   1ce34:	000306fe 	.word	0x000306fe
   1ce38:	000304a6 	.word	0x000304a6

0001ce3c <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
   1ce3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1ce40:	7a8c      	ldrb	r4, [r1, #10]
   1ce42:	2c01      	cmp	r4, #1
{
   1ce44:	4606      	mov	r6, r0
   1ce46:	460d      	mov	r5, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1ce48:	d109      	bne.n	1ce5e <lv_img_decoder_built_in_open+0x22>
        }

        _lv_memcpy_small(user_data->f, &f, sizeof(f));

#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   1ce4a:	4b49      	ldr	r3, [pc, #292]	; (1cf70 <lv_img_decoder_built_in_open+0x134>)
   1ce4c:	9300      	str	r3, [sp, #0]
   1ce4e:	4b49      	ldr	r3, [pc, #292]	; (1cf74 <lv_img_decoder_built_in_open+0x138>)
   1ce50:	f44f 72b3 	mov.w	r2, #358	; 0x166
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);

        LV_LOG_WARN("Image decoder open: unknown color format")
   1ce54:	4948      	ldr	r1, [pc, #288]	; (1cf78 <lv_img_decoder_built_in_open+0x13c>)
   1ce56:	2002      	movs	r0, #2
   1ce58:	f000 fb7e 	bl	1d558 <_lv_log_add>
   1ce5c:	e050      	b.n	1cf00 <lv_img_decoder_built_in_open+0xc4>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1ce5e:	b914      	cbnz	r4, 1ce66 <lv_img_decoder_built_in_open+0x2a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
   1ce60:	684a      	ldr	r2, [r1, #4]
   1ce62:	6892      	ldr	r2, [r2, #8]
   1ce64:	b15a      	cbz	r2, 1ce7e <lv_img_decoder_built_in_open+0x42>
    lv_img_cf_t cf = dsc->header.cf;
   1ce66:	7b2a      	ldrb	r2, [r5, #12]
   1ce68:	f002 001f 	and.w	r0, r2, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   1ce6c:	1f02      	subs	r2, r0, #4
   1ce6e:	2a02      	cmp	r2, #2
   1ce70:	d809      	bhi.n	1ce86 <lv_img_decoder_built_in_open+0x4a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1ce72:	2c00      	cmp	r4, #0
   1ce74:	d156      	bne.n	1cf24 <lv_img_decoder_built_in_open+0xe8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
   1ce76:	686b      	ldr	r3, [r5, #4]
   1ce78:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
   1ce7a:	612b      	str	r3, [r5, #16]
            return LV_RES_OK;
   1ce7c:	2401      	movs	r4, #1
        return LV_RES_INV;
    }
}
   1ce7e:	4620      	mov	r0, r4
   1ce80:	b003      	add	sp, #12
   1ce82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
   1ce86:	1fc3      	subs	r3, r0, #7
   1ce88:	2b03      	cmp	r3, #3
   1ce8a:	d863      	bhi.n	1cf54 <lv_img_decoder_built_in_open+0x118>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   1ce8c:	f7fe fbb6 	bl	1b5fc <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
   1ce90:	69eb      	ldr	r3, [r5, #28]
        uint32_t palette_size = 1 << px_size;
   1ce92:	2701      	movs	r7, #1
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   1ce94:	4680      	mov	r8, r0
        uint32_t palette_size = 1 << px_size;
   1ce96:	4087      	lsls	r7, r0
        if(dsc->user_data == NULL) {
   1ce98:	b9b3      	cbnz	r3, 1cec8 <lv_img_decoder_built_in_open+0x8c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
   1ce9a:	2008      	movs	r0, #8
   1ce9c:	f000 fb84 	bl	1d5a8 <lv_mem_alloc>
   1cea0:	4604      	mov	r4, r0
   1cea2:	61e8      	str	r0, [r5, #28]
            if(dsc->user_data == NULL) {
   1cea4:	b968      	cbnz	r0, 1cec2 <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   1cea6:	4b35      	ldr	r3, [pc, #212]	; (1cf7c <lv_img_decoder_built_in_open+0x140>)
   1cea8:	9300      	str	r3, [sp, #0]
   1ceaa:	4933      	ldr	r1, [pc, #204]	; (1cf78 <lv_img_decoder_built_in_open+0x13c>)
   1ceac:	4b31      	ldr	r3, [pc, #196]	; (1cf74 <lv_img_decoder_built_in_open+0x138>)
   1ceae:	f240 128d 	movw	r2, #397	; 0x18d
   1ceb2:	2003      	movs	r0, #3
   1ceb4:	f000 fb50 	bl	1d558 <_lv_log_add>
                lv_img_decoder_built_in_close(decoder, dsc);
   1ceb8:	4629      	mov	r1, r5
   1ceba:	4630      	mov	r0, r6
   1cebc:	f00d f816 	bl	29eec <lv_img_decoder_built_in_close>
                return LV_RES_INV;
   1cec0:	e7dd      	b.n	1ce7e <lv_img_decoder_built_in_open+0x42>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
   1cec2:	2108      	movs	r1, #8
   1cec4:	f00d f824 	bl	29f10 <_lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1cec8:	f04f 0902 	mov.w	r9, #2
   1cecc:	fa09 f008 	lsl.w	r0, r9, r8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1ced0:	69ec      	ldr	r4, [r5, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1ced2:	f000 fb69 	bl	1d5a8 <lv_mem_alloc>
   1ced6:	6020      	str	r0, [r4, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1ced8:	4638      	mov	r0, r7
   1ceda:	f000 fb65 	bl	1d5a8 <lv_mem_alloc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1cede:	6823      	ldr	r3, [r4, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1cee0:	6060      	str	r0, [r4, #4]
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1cee2:	b103      	cbz	r3, 1cee6 <lv_img_decoder_built_in_open+0xaa>
   1cee4:	b970      	cbnz	r0, 1cf04 <lv_img_decoder_built_in_open+0xc8>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   1cee6:	4b25      	ldr	r3, [pc, #148]	; (1cf7c <lv_img_decoder_built_in_open+0x140>)
   1cee8:	4923      	ldr	r1, [pc, #140]	; (1cf78 <lv_img_decoder_built_in_open+0x13c>)
   1ceea:	9300      	str	r3, [sp, #0]
   1ceec:	2003      	movs	r0, #3
   1ceee:	4b21      	ldr	r3, [pc, #132]	; (1cf74 <lv_img_decoder_built_in_open+0x138>)
   1cef0:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1cef4:	f000 fb30 	bl	1d558 <_lv_log_add>
            lv_img_decoder_built_in_close(decoder, dsc);
   1cef8:	4629      	mov	r1, r5
   1cefa:	4630      	mov	r0, r6
   1cefc:	f00c fff6 	bl	29eec <lv_img_decoder_built_in_close>
        return LV_RES_INV;
   1cf00:	2400      	movs	r4, #0
   1cf02:	e7bc      	b.n	1ce7e <lv_img_decoder_built_in_open+0x42>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1cf04:	7aab      	ldrb	r3, [r5, #10]
   1cf06:	2b01      	cmp	r3, #1
   1cf08:	d105      	bne.n	1cf16 <lv_img_decoder_built_in_open+0xda>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
   1cf0a:	4b1d      	ldr	r3, [pc, #116]	; (1cf80 <lv_img_decoder_built_in_open+0x144>)
   1cf0c:	9300      	str	r3, [sp, #0]
   1cf0e:	f240 12ab 	movw	r2, #427	; 0x1ab
   1cf12:	4b18      	ldr	r3, [pc, #96]	; (1cf74 <lv_img_decoder_built_in_open+0x138>)
   1cf14:	e79e      	b.n	1ce54 <lv_img_decoder_built_in_open+0x18>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
   1cf16:	686b      	ldr	r3, [r5, #4]
   1cf18:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
   1cf1a:	2000      	movs	r0, #0
   1cf1c:	42b8      	cmp	r0, r7
   1cf1e:	f102 0204 	add.w	r2, r2, #4
   1cf22:	d101      	bne.n	1cf28 <lv_img_decoder_built_in_open+0xec>
            dsc->img_data = NULL;
   1cf24:	2300      	movs	r3, #0
   1cf26:	e7a8      	b.n	1ce7a <lv_img_decoder_built_in_open+0x3e>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
   1cf28:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   1cf2c:	6821      	ldr	r1, [r4, #0]
   1cf2e:	089e      	lsrs	r6, r3, #2
   1cf30:	f812 3c04 	ldrb.w	r3, [r2, #-4]
   1cf34:	08db      	lsrs	r3, r3, #3
   1cf36:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   1cf3a:	f812 6c02 	ldrb.w	r6, [r2, #-2]
   1cf3e:	08f6      	lsrs	r6, r6, #3
   1cf40:	ea43 23c6 	orr.w	r3, r3, r6, lsl #11
   1cf44:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
   1cf48:	6863      	ldr	r3, [r4, #4]
   1cf4a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   1cf4e:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
   1cf50:	3001      	adds	r0, #1
   1cf52:	e7e3      	b.n	1cf1c <lv_img_decoder_built_in_open+0xe0>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
   1cf54:	f1a0 030b 	sub.w	r3, r0, #11
   1cf58:	2b03      	cmp	r3, #3
   1cf5a:	d9e3      	bls.n	1cf24 <lv_img_decoder_built_in_open+0xe8>
        lv_img_decoder_built_in_close(decoder, dsc);
   1cf5c:	4629      	mov	r1, r5
   1cf5e:	4630      	mov	r0, r6
   1cf60:	f00c ffc4 	bl	29eec <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
   1cf64:	4b07      	ldr	r3, [pc, #28]	; (1cf84 <lv_img_decoder_built_in_open+0x148>)
   1cf66:	9300      	str	r3, [sp, #0]
   1cf68:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1cf6c:	4b01      	ldr	r3, [pc, #4]	; (1cf74 <lv_img_decoder_built_in_open+0x138>)
   1cf6e:	e771      	b.n	1ce54 <lv_img_decoder_built_in_open+0x18>
   1cf70:	0003050a 	.word	0x0003050a
   1cf74:	0003071b 	.word	0x0003071b
   1cf78:	000304a6 	.word	0x000304a6
   1cf7c:	00030550 	.word	0x00030550
   1cf80:	00030579 	.word	0x00030579
   1cf84:	000305c3 	.word	0x000305c3

0001cf88 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
   1cf88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cf8c:	7b08      	ldrb	r0, [r1, #12]
{
   1cf8e:	b089      	sub	sp, #36	; 0x24
   1cf90:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cf92:	f000 031e 	and.w	r3, r0, #30
   1cf96:	2b04      	cmp	r3, #4
{
   1cf98:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
   1cf9c:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cf9e:	460d      	mov	r5, r1
   1cfa0:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cfa2:	d003      	beq.n	1cfac <lv_img_decoder_built_in_read_line+0x24>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   1cfa4:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cfa8:	2b06      	cmp	r3, #6
   1cfaa:	d10d      	bne.n	1cfc8 <lv_img_decoder_built_in_read_line+0x40>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1cfac:	7aab      	ldrb	r3, [r5, #10]
   1cfae:	2b01      	cmp	r3, #1
   1cfb0:	d108      	bne.n	1cfc4 <lv_img_decoder_built_in_read_line+0x3c>
    LV_UNUSED(dsc);
    LV_UNUSED(x);
    LV_UNUSED(y);
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   1cfb2:	4ba2      	ldr	r3, [pc, #648]	; (1d23c <lv_img_decoder_built_in_read_line+0x2b4>)
   1cfb4:	9300      	str	r3, [sp, #0]
   1cfb6:	4ba2      	ldr	r3, [pc, #648]	; (1d240 <lv_img_decoder_built_in_read_line+0x2b8>)
   1cfb8:	f240 223f 	movw	r2, #575	; 0x23f
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1cfbc:	49a1      	ldr	r1, [pc, #644]	; (1d244 <lv_img_decoder_built_in_read_line+0x2bc>)
   1cfbe:	2002      	movs	r0, #2
   1cfc0:	f000 faca 	bl	1d558 <_lv_log_add>
    lv_res_t res = LV_RES_INV;
   1cfc4:	2000      	movs	r0, #0
   1cfc6:	e060      	b.n	1d08a <lv_img_decoder_built_in_read_line+0x102>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   1cfc8:	f1a3 020b 	sub.w	r2, r3, #11
   1cfcc:	2a03      	cmp	r2, #3
   1cfce:	f200 80ad 	bhi.w	1d12c <lv_img_decoder_built_in_read_line+0x1a4>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   1cfd2:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   1cfd6:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   1cfda:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   1cfde:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   1cfe2:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   1cfe4:	4b98      	ldr	r3, [pc, #608]	; (1d248 <lv_img_decoder_built_in_read_line+0x2c0>)
   1cfe6:	aa04      	add	r2, sp, #16
   1cfe8:	f103 0e10 	add.w	lr, r3, #16
   1cfec:	4691      	mov	r9, r2
   1cfee:	6818      	ldr	r0, [r3, #0]
   1cff0:	6859      	ldr	r1, [r3, #4]
   1cff2:	4694      	mov	ip, r2
   1cff4:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1cff8:	3308      	adds	r3, #8
   1cffa:	4573      	cmp	r3, lr
   1cffc:	4662      	mov	r2, ip
   1cffe:	d1f6      	bne.n	1cfee <lv_img_decoder_built_in_read_line+0x66>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
   1d000:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
   1d002:	463b      	mov	r3, r7
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
   1d004:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    for(i = 0; i < len; i++) {
   1d008:	2200      	movs	r2, #0
   1d00a:	b210      	sxth	r0, r2
   1d00c:	4580      	cmp	r8, r0
   1d00e:	f103 0303 	add.w	r3, r3, #3
   1d012:	dc16      	bgt.n	1d042 <lv_img_decoder_built_in_read_line+0xba>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
   1d014:	7b28      	ldrb	r0, [r5, #12]
   1d016:	f000 001f 	and.w	r0, r0, #31
   1d01a:	f7fe faef 	bl	1b5fc <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
   1d01e:	7b2b      	ldrb	r3, [r5, #12]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1d020:	f04f 0c01 	mov.w	ip, #1
   1d024:	fa0c fc00 	lsl.w	ip, ip, r0
   1d028:	f003 031f 	and.w	r3, r3, #31
   1d02c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1d030:	3b0b      	subs	r3, #11
   1d032:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   1d036:	2b03      	cmp	r3, #3
   1d038:	d854      	bhi.n	1d0e4 <lv_img_decoder_built_in_read_line+0x15c>
   1d03a:	e8df f003 	tbb	[pc, r3]
   1d03e:	2908      	.short	0x2908
   1d040:	4b3b      	.short	0x4b3b
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
   1d042:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
   1d046:	f803 cc02 	strb.w	ip, [r3, #-2]
    for(i = 0; i < len; i++) {
   1d04a:	3201      	adds	r2, #1
   1d04c:	e7dd      	b.n	1d00a <lv_img_decoder_built_in_read_line+0x82>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1d04e:	68ea      	ldr	r2, [r5, #12]
   1d050:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   1d054:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
   1d058:	bf18      	it	ne
   1d05a:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   1d05c:	10e2      	asrs	r2, r4, #3
            pos       = 7 - (x & 0x7);
   1d05e:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
   1d060:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
   1d064:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   1d068:	ae02      	add	r6, sp, #8
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = _lv_mem_buf_get(w);
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1d06a:	7aa9      	ldrb	r1, [r5, #10]
   1d06c:	2900      	cmp	r1, #0
   1d06e:	d13c      	bne.n	1d0ea <lv_img_decoder_built_in_read_line+0x162>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
   1d070:	686a      	ldr	r2, [r5, #4]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
   1d072:	b240      	sxtb	r0, r0
        data_tmp = img_dsc->data + ofs;
   1d074:	6892      	ldr	r2, [r2, #8]
        if(pos < 0) {
            pos = 8 - px_size;
   1d076:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp = img_dsc->data + ofs;
   1d07a:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d07c:	3702      	adds	r7, #2
            pos = 8 - px_size;
   1d07e:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1d082:	b20a      	sxth	r2, r1
   1d084:	4590      	cmp	r8, r2
   1d086:	dc36      	bgt.n	1d0f6 <lv_img_decoder_built_in_read_line+0x16e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
#endif
    return LV_RES_OK;
   1d088:	2001      	movs	r0, #1
}
   1d08a:	b009      	add	sp, #36	; 0x24
   1d08c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   1d090:	68ea      	ldr	r2, [r5, #12]
   1d092:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   1d096:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            ofs += w * y + (x >> 2); /*First pixel*/
   1d09a:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
   1d09e:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   1d0a2:	bf18      	it	ne
   1d0a4:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
   1d0a6:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
   1d0aa:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
   1d0ae:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   1d0b0:	ae03      	add	r6, sp, #12
            break;
   1d0b2:	e7da      	b.n	1d06a <lv_img_decoder_built_in_read_line+0xe2>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1d0b4:	68ea      	ldr	r2, [r5, #12]
   1d0b6:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   1d0ba:	0551      	lsls	r1, r2, #21
   1d0bc:	bf48      	it	mi
   1d0be:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d0c0:	1062      	asrs	r2, r4, #1
            pos       = 4 - ((x & 0x1) * 4);
   1d0c2:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d0c6:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
   1d0ca:	bf0c      	ite	eq
   1d0cc:	2404      	moveq	r4, #4
   1d0ce:	2400      	movne	r4, #0
   1d0d0:	464e      	mov	r6, r9
   1d0d2:	e7ca      	b.n	1d06a <lv_img_decoder_built_in_read_line+0xe2>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1d0d4:	68eb      	ldr	r3, [r5, #12]
   1d0d6:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1d0da:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   1d0de:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
   1d0e0:	4626      	mov	r6, r4
   1d0e2:	e7c2      	b.n	1d06a <lv_img_decoder_built_in_read_line+0xe2>
   1d0e4:	2400      	movs	r4, #0
   1d0e6:	4623      	mov	r3, r4
   1d0e8:	e7fa      	b.n	1d0e0 <lv_img_decoder_built_in_read_line+0x158>
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
   1d0ea:	4b58      	ldr	r3, [pc, #352]	; (1d24c <lv_img_decoder_built_in_read_line+0x2c4>)
   1d0ec:	9300      	str	r3, [sp, #0]
   1d0ee:	f240 2295 	movw	r2, #661	; 0x295
   1d0f2:	4b57      	ldr	r3, [pc, #348]	; (1d250 <lv_img_decoder_built_in_read_line+0x2c8>)
   1d0f4:	e762      	b.n	1cfbc <lv_img_decoder_built_in_read_line+0x34>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1d0f6:	781a      	ldrb	r2, [r3, #0]
   1d0f8:	fa0c f904 	lsl.w	r9, ip, r4
   1d0fc:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   1d100:	f895 900c 	ldrb.w	r9, [r5, #12]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1d104:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d106:	f009 091f 	and.w	r9, r9, #31
   1d10a:	b2d2      	uxtb	r2, r2
        pos -= px_size;
   1d10c:	1a24      	subs	r4, r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d10e:	f1b9 0f0e 	cmp.w	r9, #14
        pos -= px_size;
   1d112:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d114:	eb01 0941 	add.w	r9, r1, r1, lsl #1
   1d118:	bf18      	it	ne
   1d11a:	5cb2      	ldrbne	r2, [r6, r2]
   1d11c:	f807 2009 	strb.w	r2, [r7, r9]
        if(pos < 0) {
   1d120:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   1d122:	bfbc      	itt	lt
   1d124:	4674      	movlt	r4, lr
            data_tmp++;
   1d126:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   1d128:	3101      	adds	r1, #1
   1d12a:	e7aa      	b.n	1d082 <lv_img_decoder_built_in_read_line+0xfa>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   1d12c:	3b07      	subs	r3, #7
   1d12e:	2b03      	cmp	r3, #3
   1d130:	d87e      	bhi.n	1d230 <lv_img_decoder_built_in_read_line+0x2a8>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
   1d132:	f000 001f 	and.w	r0, r0, #31
   1d136:	f7fe fa61 	bl	1b5fc <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
   1d13a:	7b2b      	ldrb	r3, [r5, #12]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1d13c:	2101      	movs	r1, #1
   1d13e:	4081      	lsls	r1, r0
   1d140:	f003 031f 	and.w	r3, r3, #31
   1d144:	3901      	subs	r1, #1
   1d146:	3b07      	subs	r3, #7
   1d148:	b289      	uxth	r1, r1
    switch(dsc->header.cf) {
   1d14a:	2b03      	cmp	r3, #3
   1d14c:	d867      	bhi.n	1d21e <lv_img_decoder_built_in_read_line+0x296>
   1d14e:	e8df f003 	tbb	[pc, r3]
   1d152:	3c02      	.short	0x3c02
   1d154:	5d4c      	.short	0x5d4c
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1d156:	68ea      	ldr	r2, [r5, #12]
   1d158:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   1d15c:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
   1d160:	bf18      	it	ne
   1d162:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   1d164:	10e2      	asrs	r2, r4, #3
   1d166:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
   1d16a:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
   1d16c:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
   1d16e:	f004 0407 	and.w	r4, r4, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1d172:	7aaa      	ldrb	r2, [r5, #10]
   1d174:	2a00      	cmp	r2, #0
   1d176:	d155      	bne.n	1d224 <lv_img_decoder_built_in_read_line+0x29c>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1d178:	f8d5 c01c 	ldr.w	ip, [r5, #28]
        data_tmp                     = img_dsc->data + ofs;
   1d17c:	686d      	ldr	r5, [r5, #4]
        pos -= px_size;
   1d17e:	b240      	sxtb	r0, r0
        data_tmp                     = img_dsc->data + ofs;
   1d180:	68ae      	ldr	r6, [r5, #8]
            pos = 8 - px_size;
   1d182:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp                     = img_dsc->data + ofs;
   1d186:	4433      	add	r3, r6
    for(i = 0; i < len; i++) {
   1d188:	4615      	mov	r5, r2
            pos = 8 - px_size;
   1d18a:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1d18e:	b22a      	sxth	r2, r5
   1d190:	4590      	cmp	r8, r2
   1d192:	f77f af79 	ble.w	1d088 <lv_img_decoder_built_in_read_line+0x100>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1d196:	781a      	ldrb	r2, [r3, #0]
   1d198:	fa01 f604 	lsl.w	r6, r1, r4
   1d19c:	4032      	ands	r2, r6
   1d19e:	4122      	asrs	r2, r4
        lv_color_t color = user_data->palette[val_act];
   1d1a0:	f8dc 6000 	ldr.w	r6, [ip]
   1d1a4:	b2d2      	uxtb	r2, r2
        pos -= px_size;
   1d1a6:	1a24      	subs	r4, r4, r0
        lv_color_t color = user_data->palette[val_act];
   1d1a8:	f836 6012 	ldrh.w	r6, [r6, r2, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
   1d1ac:	703e      	strb	r6, [r7, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
   1d1ae:	0a36      	lsrs	r6, r6, #8
   1d1b0:	707e      	strb	r6, [r7, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1d1b2:	f8dc 6004 	ldr.w	r6, [ip, #4]
        pos -= px_size;
   1d1b6:	b264      	sxtb	r4, r4
        if(pos < 0) {
   1d1b8:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1d1ba:	5cb2      	ldrb	r2, [r6, r2]
   1d1bc:	70ba      	strb	r2, [r7, #2]
            pos = 8 - px_size;
   1d1be:	bfbc      	itt	lt
   1d1c0:	4674      	movlt	r4, lr
            data_tmp++;
   1d1c2:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   1d1c4:	3501      	adds	r5, #1
   1d1c6:	3703      	adds	r7, #3
   1d1c8:	e7e1      	b.n	1d18e <lv_img_decoder_built_in_read_line+0x206>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   1d1ca:	68ea      	ldr	r2, [r5, #12]
   1d1cc:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   1d1d0:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   1d1d4:	bf18      	it	ne
   1d1d6:	3301      	addne	r3, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   1d1d8:	10a2      	asrs	r2, r4, #2
            pos = 6 - ((x & 0x3) * 2);
   1d1da:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
   1d1dc:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
   1d1e0:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
   1d1e4:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
   1d1e6:	0064      	lsls	r4, r4, #1
            break;
   1d1e8:	e7c3      	b.n	1d172 <lv_img_decoder_built_in_read_line+0x1ea>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1d1ea:	68ea      	ldr	r2, [r5, #12]
   1d1ec:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   1d1f0:	0552      	lsls	r2, r2, #21
   1d1f2:	bf48      	it	mi
   1d1f4:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d1f6:	1062      	asrs	r2, r4, #1
            pos = 4 - ((x & 0x1) * 4);
   1d1f8:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d1fc:	fb03 2306 	mla	r3, r3, r6, r2
            ofs += 64;               /*Skip the palette*/
   1d200:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   1d204:	bf0c      	ite	eq
   1d206:	2404      	moveq	r4, #4
   1d208:	2400      	movne	r4, #0
   1d20a:	e7b2      	b.n	1d172 <lv_img_decoder_built_in_read_line+0x1ea>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1d20c:	68eb      	ldr	r3, [r5, #12]
   1d20e:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1d212:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
   1d216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
   1d21a:	2400      	movs	r4, #0
            break;
   1d21c:	e7a9      	b.n	1d172 <lv_img_decoder_built_in_read_line+0x1ea>
    switch(dsc->header.cf) {
   1d21e:	2300      	movs	r3, #0
   1d220:	461c      	mov	r4, r3
   1d222:	e7a6      	b.n	1d172 <lv_img_decoder_built_in_read_line+0x1ea>
        LV_LOG_WARN("Image built-in indexed line reader can't read file because LV_USE_FILESYSTEM = 0");
   1d224:	4b0b      	ldr	r3, [pc, #44]	; (1d254 <lv_img_decoder_built_in_read_line+0x2cc>)
   1d226:	9300      	str	r3, [sp, #0]
   1d228:	f240 22eb 	movw	r2, #747	; 0x2eb
   1d22c:	4b0a      	ldr	r3, [pc, #40]	; (1d258 <lv_img_decoder_built_in_read_line+0x2d0>)
   1d22e:	e6c5      	b.n	1cfbc <lv_img_decoder_built_in_read_line+0x34>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1d230:	4b0a      	ldr	r3, [pc, #40]	; (1d25c <lv_img_decoder_built_in_read_line+0x2d4>)
   1d232:	9300      	str	r3, [sp, #0]
   1d234:	f240 12fb 	movw	r2, #507	; 0x1fb
   1d238:	4b09      	ldr	r3, [pc, #36]	; (1d260 <lv_img_decoder_built_in_read_line+0x2d8>)
   1d23a:	e6bf      	b.n	1cfbc <lv_img_decoder_built_in_read_line+0x34>
   1d23c:	0003050a 	.word	0x0003050a
   1d240:	0003075a 	.word	0x0003075a
   1d244:	000304a6 	.word	0x000304a6
   1d248:	0002c167 	.word	0x0002c167
   1d24c:	000305ec 	.word	0x000305ec
   1d250:	00030782 	.word	0x00030782
   1d254:	0003063b 	.word	0x0003063b
   1d258:	000307a5 	.word	0x000307a5
   1d25c:	0003068c 	.word	0x0003068c
   1d260:	00030738 	.word	0x00030738

0001d264 <lv_img_decoder_get_info>:
    header->cf = LV_IMG_CF_UNKNOWN;
   1d264:	680b      	ldr	r3, [r1, #0]
   1d266:	f403 7340 	and.w	r3, r3, #768	; 0x300
{
   1d26a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d26e:	4607      	mov	r7, r0
    header->cf = LV_IMG_CF_UNKNOWN;
   1d270:	600b      	str	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d272:	480d      	ldr	r0, [pc, #52]	; (1d2a8 <lv_img_decoder_get_info+0x44>)
   1d274:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1d2a8 <lv_img_decoder_get_info+0x44>
{
   1d278:	460e      	mov	r6, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d27a:	f00d f9a0 	bl	2a5be <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   1d27e:	2400      	movs	r4, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d280:	4605      	mov	r5, r0
   1d282:	b915      	cbnz	r5, 1d28a <lv_img_decoder_get_info+0x26>
}
   1d284:	4620      	mov	r0, r4
   1d286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
   1d28a:	682c      	ldr	r4, [r5, #0]
   1d28c:	b134      	cbz	r4, 1d29c <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
   1d28e:	4632      	mov	r2, r6
   1d290:	4639      	mov	r1, r7
   1d292:	4628      	mov	r0, r5
   1d294:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
   1d296:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
   1d298:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
   1d29a:	d0f3      	beq.n	1d284 <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d29c:	4629      	mov	r1, r5
   1d29e:	4640      	mov	r0, r8
   1d2a0:	f00d f993 	bl	2a5ca <_lv_ll_get_next>
   1d2a4:	4605      	mov	r5, r0
   1d2a6:	e7ec      	b.n	1d282 <lv_img_decoder_get_info+0x1e>
   1d2a8:	20003f64 	.word	0x20003f64

0001d2ac <lv_img_decoder_open>:
{
   1d2ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d2b0:	4605      	mov	r5, r0
    dsc->color     = color;
   1d2b2:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
   1d2b4:	4608      	mov	r0, r1
{
   1d2b6:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
   1d2b8:	f00b fb71 	bl	2899e <lv_img_src_get_type>
    dsc->user_data = NULL;
   1d2bc:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1d2be:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
   1d2c0:	72a8      	strb	r0, [r5, #10]
    dsc->user_data = NULL;
   1d2c2:	61eb      	str	r3, [r5, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1d2c4:	d117      	bne.n	1d2f6 <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
   1d2c6:	4638      	mov	r0, r7
   1d2c8:	f7e3 f8e0 	bl	48c <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
   1d2cc:	3001      	adds	r0, #1
   1d2ce:	f000 f96b 	bl	1d5a8 <lv_mem_alloc>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1d2d2:	4639      	mov	r1, r7
   1d2d4:	6068      	str	r0, [r5, #4]
   1d2d6:	f00e fa97 	bl	2b808 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d2da:	4816      	ldr	r0, [pc, #88]	; (1d334 <lv_img_decoder_open+0x88>)
   1d2dc:	f8df a054 	ldr.w	sl, [pc, #84]	; 1d334 <lv_img_decoder_open+0x88>
   1d2e0:	f00d f96d 	bl	2a5be <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   1d2e4:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d2e6:	4604      	mov	r4, r0
        res = d->info_cb(d, src, &dsc->header);
   1d2e8:	f105 090c 	add.w	r9, r5, #12
        dsc->error_msg = NULL;
   1d2ec:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d2ee:	b924      	cbnz	r4, 1d2fa <lv_img_decoder_open+0x4e>
}
   1d2f0:	4630      	mov	r0, r6
   1d2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
   1d2f6:	606f      	str	r7, [r5, #4]
   1d2f8:	e7ef      	b.n	1d2da <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
   1d2fa:	6823      	ldr	r3, [r4, #0]
   1d2fc:	b1a3      	cbz	r3, 1d328 <lv_img_decoder_open+0x7c>
   1d2fe:	6862      	ldr	r2, [r4, #4]
   1d300:	b192      	cbz	r2, 1d328 <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
   1d302:	464a      	mov	r2, r9
   1d304:	4639      	mov	r1, r7
   1d306:	4620      	mov	r0, r4
   1d308:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
   1d30a:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
   1d30c:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
   1d30e:	d10b      	bne.n	1d328 <lv_img_decoder_open+0x7c>
        res = d->open_cb(d, dsc);
   1d310:	6863      	ldr	r3, [r4, #4]
        dsc->error_msg = NULL;
   1d312:	f8c5 8018 	str.w	r8, [r5, #24]
        dsc->img_data  = NULL;
   1d316:	f8c5 8010 	str.w	r8, [r5, #16]
        dsc->decoder   = d;
   1d31a:	602c      	str	r4, [r5, #0]
        res = d->open_cb(d, dsc);
   1d31c:	4629      	mov	r1, r5
   1d31e:	4620      	mov	r0, r4
   1d320:	4798      	blx	r3
        if(res == LV_RES_OK) break;
   1d322:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
   1d324:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
   1d326:	d0e3      	beq.n	1d2f0 <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d328:	4621      	mov	r1, r4
   1d32a:	4650      	mov	r0, sl
   1d32c:	f00d f94d 	bl	2a5ca <_lv_ll_get_next>
   1d330:	4604      	mov	r4, r0
   1d332:	e7dc      	b.n	1d2ee <lv_img_decoder_open+0x42>
   1d334:	20003f64 	.word	0x20003f64

0001d338 <lv_img_decoder_create>:
{
   1d338:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   1d33a:	4805      	ldr	r0, [pc, #20]	; (1d350 <lv_img_decoder_create+0x18>)
   1d33c:	f00d f908 	bl	2a550 <_lv_ll_ins_head>
    if(decoder == NULL) return NULL;
   1d340:	4604      	mov	r4, r0
   1d342:	b110      	cbz	r0, 1d34a <lv_img_decoder_create+0x12>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
   1d344:	2114      	movs	r1, #20
   1d346:	f00c fde3 	bl	29f10 <_lv_memset_00>
}
   1d34a:	4620      	mov	r0, r4
   1d34c:	bd10      	pop	{r4, pc}
   1d34e:	bf00      	nop
   1d350:	20003f64 	.word	0x20003f64

0001d354 <_lv_img_decoder_init>:
{
   1d354:	b507      	push	{r0, r1, r2, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   1d356:	480d      	ldr	r0, [pc, #52]	; (1d38c <_lv_img_decoder_init+0x38>)
   1d358:	2114      	movs	r1, #20
   1d35a:	f00d f8f1 	bl	2a540 <_lv_ll_init>
    decoder = lv_img_decoder_create();
   1d35e:	f7ff ffeb 	bl	1d338 <lv_img_decoder_create>
    if(decoder == NULL) {
   1d362:	b950      	cbnz	r0, 1d37a <_lv_img_decoder_init+0x26>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   1d364:	4b0a      	ldr	r3, [pc, #40]	; (1d390 <_lv_img_decoder_init+0x3c>)
   1d366:	9300      	str	r3, [sp, #0]
   1d368:	490a      	ldr	r1, [pc, #40]	; (1d394 <_lv_img_decoder_init+0x40>)
   1d36a:	4b0b      	ldr	r3, [pc, #44]	; (1d398 <_lv_img_decoder_init+0x44>)
   1d36c:	2247      	movs	r2, #71	; 0x47
   1d36e:	2002      	movs	r0, #2
   1d370:	f000 f8f2 	bl	1d558 <_lv_log_add>
}
   1d374:	b003      	add	sp, #12
   1d376:	f85d fb04 	ldr.w	pc, [sp], #4
    decoder->info_cb = info_cb;
   1d37a:	4b08      	ldr	r3, [pc, #32]	; (1d39c <_lv_img_decoder_init+0x48>)
   1d37c:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
   1d37e:	4b08      	ldr	r3, [pc, #32]	; (1d3a0 <_lv_img_decoder_init+0x4c>)
   1d380:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   1d382:	4b08      	ldr	r3, [pc, #32]	; (1d3a4 <_lv_img_decoder_init+0x50>)
   1d384:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
   1d386:	4b08      	ldr	r3, [pc, #32]	; (1d3a8 <_lv_img_decoder_init+0x54>)
   1d388:	60c3      	str	r3, [r0, #12]
}
   1d38a:	e7f3      	b.n	1d374 <_lv_img_decoder_init+0x20>
   1d38c:	20003f64 	.word	0x20003f64
   1d390:	000306c6 	.word	0x000306c6
   1d394:	000304a6 	.word	0x000304a6
   1d398:	000306e9 	.word	0x000306e9
   1d39c:	0001cdc1 	.word	0x0001cdc1
   1d3a0:	0001ce3d 	.word	0x0001ce3d
   1d3a4:	0001cf89 	.word	0x0001cf89
   1d3a8:	00029eed 	.word	0x00029eed

0001d3ac <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   1d3ac:	4b01      	ldr	r3, [pc, #4]	; (1d3b4 <lv_disp_get_default+0x8>)
   1d3ae:	6818      	ldr	r0, [r3, #0]
   1d3b0:	4770      	bx	lr
   1d3b2:	bf00      	nop
   1d3b4:	20003ec8 	.word	0x20003ec8

0001d3b8 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1d3b8:	b910      	cbnz	r0, 1d3c0 <lv_disp_get_hor_res+0x8>
    return disp_def;
   1d3ba:	4b06      	ldr	r3, [pc, #24]	; (1d3d4 <lv_disp_get_hor_res+0x1c>)
   1d3bc:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1d3be:	b138      	cbz	r0, 1d3d0 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   1d3c0:	7a03      	ldrb	r3, [r0, #8]
   1d3c2:	07db      	lsls	r3, r3, #31
   1d3c4:	bf54      	ite	pl
   1d3c6:	f9b0 0000 	ldrshpl.w	r0, [r0]
   1d3ca:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
   1d3ce:	4770      	bx	lr
        return LV_HOR_RES_MAX;
   1d3d0:	20f0      	movs	r0, #240	; 0xf0
}
   1d3d2:	4770      	bx	lr
   1d3d4:	20003ec8 	.word	0x20003ec8

0001d3d8 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1d3d8:	b910      	cbnz	r0, 1d3e0 <lv_disp_get_ver_res+0x8>
    return disp_def;
   1d3da:	4b06      	ldr	r3, [pc, #24]	; (1d3f4 <lv_disp_get_ver_res+0x1c>)
   1d3dc:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1d3de:	b138      	cbz	r0, 1d3f0 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   1d3e0:	7a03      	ldrb	r3, [r0, #8]
   1d3e2:	07db      	lsls	r3, r3, #31
   1d3e4:	bf54      	ite	pl
   1d3e6:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
   1d3ea:	f9b0 0000 	ldrshmi.w	r0, [r0]
   1d3ee:	4770      	bx	lr
        return LV_VER_RES_MAX;
   1d3f0:	20f0      	movs	r0, #240	; 0xf0
}
   1d3f2:	4770      	bx	lr
   1d3f4:	20003ec8 	.word	0x20003ec8

0001d3f8 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1d3f8:	b910      	cbnz	r0, 1d400 <lv_disp_get_dpi+0x8>
    return disp_def;
   1d3fa:	4b04      	ldr	r3, [pc, #16]	; (1d40c <lv_disp_get_dpi+0x14>)
   1d3fc:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   1d3fe:	b118      	cbz	r0, 1d408 <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
   1d400:	8900      	ldrh	r0, [r0, #8]
   1d402:	f3c0 0049 	ubfx	r0, r0, #1, #10
   1d406:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   1d408:	2080      	movs	r0, #128	; 0x80
}
   1d40a:	4770      	bx	lr
   1d40c:	20003ec8 	.word	0x20003ec8

0001d410 <lv_disp_drv_register>:
{
   1d410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d412:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   1d414:	483b      	ldr	r0, [pc, #236]	; (1d504 <lv_disp_drv_register+0xf4>)
   1d416:	f00d f89b 	bl	2a550 <_lv_ll_ins_head>
    if(!disp) {
   1d41a:	4604      	mov	r4, r0
   1d41c:	b918      	cbnz	r0, 1d426 <lv_disp_drv_register+0x16>
        return NULL;
   1d41e:	2400      	movs	r4, #0
}
   1d420:	4620      	mov	r0, r4
   1d422:	b003      	add	sp, #12
   1d424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _lv_memset_00(disp, sizeof(lv_disp_t));
   1d426:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1d42a:	f00c fd96 	bl	29f5a <_lv_memset_00>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d42e:	4628      	mov	r0, r5
   1d430:	4623      	mov	r3, r4
   1d432:	f105 0230 	add.w	r2, r5, #48	; 0x30
   1d436:	f850 1b04 	ldr.w	r1, [r0], #4
   1d43a:	f843 1b04 	str.w	r1, [r3], #4
   1d43e:	4290      	cmp	r0, r2
   1d440:	d1f9      	bne.n	1d436 <lv_disp_drv_register+0x26>
    if(disp_def == NULL) disp_def = disp;
   1d442:	4e31      	ldr	r6, [pc, #196]	; (1d508 <lv_disp_drv_register+0xf8>)
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   1d444:	213c      	movs	r1, #60	; 0x3c
   1d446:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1d44a:	f00d f879 	bl	2a540 <_lv_ll_init>
    disp->last_activity_time = 0;
   1d44e:	2300      	movs	r3, #0
   1d450:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
    if(disp_def == NULL) disp_def = disp;
   1d454:	6833      	ldr	r3, [r6, #0]
   1d456:	b903      	cbnz	r3, 1d45a <lv_disp_drv_register+0x4a>
   1d458:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1d45a:	482c      	ldr	r0, [pc, #176]	; (1d50c <lv_disp_drv_register+0xfc>)
    lv_disp_t * disp_def_tmp = disp_def;
   1d45c:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   1d45e:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1d460:	4623      	mov	r3, r4
   1d462:	2203      	movs	r2, #3
   1d464:	211e      	movs	r1, #30
   1d466:	f00d f962 	bl	2a72e <lv_task_create>
   1d46a:	6320      	str	r0, [r4, #48]	; 0x30
    if(disp->refr_task == NULL) return NULL;
   1d46c:	2800      	cmp	r0, #0
   1d46e:	d0d6      	beq.n	1d41e <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
   1d470:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   1d474:	f36f 0309 	bfc	r3, #0, #10
   1d478:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
    disp->bg_color = LV_COLOR_WHITE;
   1d47c:	4b24      	ldr	r3, [pc, #144]	; (1d510 <lv_disp_drv_register+0x100>)
   1d47e:	881b      	ldrh	r3, [r3, #0]
   1d480:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    disp->last_activity_time = 0;
   1d484:	2500      	movs	r5, #0
    disp->bg_opa = LV_OPA_COVER;
   1d486:	23ff      	movs	r3, #255	; 0xff
   1d488:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1d48c:	4629      	mov	r1, r5
    disp->last_activity_time = 0;
   1d48e:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
    disp->bg_img = NULL;
   1d492:	6565      	str	r5, [r4, #84]	; 0x54
    disp->prev_scr  = NULL;
   1d494:	6465      	str	r5, [r4, #68]	; 0x44
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1d496:	4628      	mov	r0, r5
   1d498:	f7fc ff66 	bl	1a368 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1d49c:	4629      	mov	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1d49e:	6420      	str	r0, [r4, #64]	; 0x40
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1d4a0:	4628      	mov	r0, r5
   1d4a2:	f7fc ff61 	bl	1a368 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1d4a6:	4629      	mov	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1d4a8:	64a0      	str	r0, [r4, #72]	; 0x48
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1d4aa:	4628      	mov	r0, r5
   1d4ac:	f7fc ff5c 	bl	1a368 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   1d4b0:	4629      	mov	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1d4b2:	64e0      	str	r0, [r4, #76]	; 0x4c
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   1d4b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1d4b6:	f009 f9e9 	bl	2688c <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   1d4ba:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1d4bc:	4629      	mov	r1, r5
   1d4be:	f009 f9e5 	bl	2688c <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
   1d4c2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1d4c4:	4629      	mov	r1, r5
   1d4c6:	f008 fe98 	bl	261fa <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
   1d4ca:	4629      	mov	r1, r5
   1d4cc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1d4ce:	f008 fe94 	bl	261fa <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
   1d4d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1d4d4:	f008 ff29 	bl	2632a <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   1d4d8:	6b20      	ldr	r0, [r4, #48]	; 0x30
    disp_def = disp_def_tmp; /*Revert the default display*/
   1d4da:	6037      	str	r7, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   1d4dc:	f00d f93b 	bl	2a756 <lv_task_ready>
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
   1d4e0:	4620      	mov	r0, r4
   1d4e2:	f00c fd71 	bl	29fc8 <lv_disp_is_true_double_buf>
   1d4e6:	2800      	cmp	r0, #0
   1d4e8:	d09a      	beq.n	1d420 <lv_disp_drv_register+0x10>
   1d4ea:	6963      	ldr	r3, [r4, #20]
   1d4ec:	2b00      	cmp	r3, #0
   1d4ee:	d097      	beq.n	1d420 <lv_disp_drv_register+0x10>
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
   1d4f0:	4b08      	ldr	r3, [pc, #32]	; (1d514 <lv_disp_drv_register+0x104>)
   1d4f2:	9300      	str	r3, [sp, #0]
   1d4f4:	4908      	ldr	r1, [pc, #32]	; (1d518 <lv_disp_drv_register+0x108>)
   1d4f6:	4b09      	ldr	r3, [pc, #36]	; (1d51c <lv_disp_drv_register+0x10c>)
   1d4f8:	22ac      	movs	r2, #172	; 0xac
   1d4fa:	2003      	movs	r0, #3
   1d4fc:	f000 f82c 	bl	1d558 <_lv_log_add>
   1d500:	e78e      	b.n	1d420 <lv_disp_drv_register+0x10>
   1d502:	bf00      	nop
   1d504:	20003ed0 	.word	0x20003ed0
   1d508:	20003ec8 	.word	0x20003ec8
   1d50c:	0001afcd 	.word	0x0001afcd
   1d510:	0002c15e 	.word	0x0002c15e
   1d514:	00030804 	.word	0x00030804
   1d518:	000307ca 	.word	0x000307ca
   1d51c:	00030857 	.word	0x00030857

0001d520 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
   1d520:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1d522:	4803      	ldr	r0, [pc, #12]	; (1d530 <lv_indev_get_next+0x10>)
    if(indev == NULL)
   1d524:	b909      	cbnz	r1, 1d52a <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1d526:	f00d b84a 	b.w	2a5be <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   1d52a:	f00d b84e 	b.w	2a5ca <_lv_ll_get_next>
   1d52e:	bf00      	nop
   1d530:	20003f70 	.word	0x20003f70

0001d534 <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
   1d534:	4b03      	ldr	r3, [pc, #12]	; (1d544 <lv_tick_inc+0x10>)
   1d536:	2200      	movs	r2, #0
   1d538:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
   1d53a:	4a03      	ldr	r2, [pc, #12]	; (1d548 <lv_tick_inc+0x14>)
   1d53c:	6813      	ldr	r3, [r2, #0]
   1d53e:	4403      	add	r3, r0
   1d540:	6013      	str	r3, [r2, #0]
}
   1d542:	4770      	bx	lr
   1d544:	20008733 	.word	0x20008733
   1d548:	20003ecc 	.word	0x20003ecc

0001d54c <lv_log_register_print_cb>:
 * and send the formatted log message to a console or serial port.
 * @param print_cb a function pointer to print a log
 */
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb)
{
    custom_print_cb = print_cb;
   1d54c:	4b01      	ldr	r3, [pc, #4]	; (1d554 <lv_log_register_print_cb+0x8>)
   1d54e:	6018      	str	r0, [r3, #0]
}
   1d550:	4770      	bx	lr
   1d552:	bf00      	nop
   1d554:	2000401c 	.word	0x2000401c

0001d558 <_lv_log_add>:
 * @param func name of the function when the log added
 * @param format printf-like format string
 * @param ... parameters for `format`
 */
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)
{
   1d558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d55c:	461f      	mov	r7, r3
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   1d55e:	1e43      	subs	r3, r0, #1
   1d560:	b2db      	uxtb	r3, r3
   1d562:	2b04      	cmp	r3, #4
{
   1d564:	b0c5      	sub	sp, #276	; 0x114
   1d566:	4604      	mov	r4, r0
   1d568:	460d      	mov	r5, r1
   1d56a:	4616      	mov	r6, r2
    if(level >= LV_LOG_LEVEL) {
   1d56c:	d816      	bhi.n	1d59c <_lv_log_add+0x44>
        va_list args;
        va_start(args, format);
        char buf[256];
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1d56e:	f10d 0910 	add.w	r9, sp, #16
        va_start(args, format);
   1d572:	ab4d      	add	r3, sp, #308	; 0x134
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1d574:	9a4c      	ldr	r2, [sp, #304]	; 0x130
        va_start(args, format);
   1d576:	9303      	str	r3, [sp, #12]
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1d578:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d57c:	4648      	mov	r0, r9
   1d57e:	f004 fd51 	bl	22024 <vsniprintf>
        }

        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error", "User"};
        printf("%s: %s \t(%s #%d %s())\n", lvl_prefix[level], buf, &file[p], line, func);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, func, buf);
   1d582:	4b08      	ldr	r3, [pc, #32]	; (1d5a4 <_lv_log_add+0x4c>)
   1d584:	f8d3 8000 	ldr.w	r8, [r3]
   1d588:	f1b8 0f00 	cmp.w	r8, #0
   1d58c:	d006      	beq.n	1d59c <_lv_log_add+0x44>
   1d58e:	f8cd 9000 	str.w	r9, [sp]
   1d592:	463b      	mov	r3, r7
   1d594:	4632      	mov	r2, r6
   1d596:	4629      	mov	r1, r5
   1d598:	4620      	mov	r0, r4
   1d59a:	47c0      	blx	r8
#endif
    }
}
   1d59c:	b045      	add	sp, #276	; 0x114
   1d59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d5a2:	bf00      	nop
   1d5a4:	2000401c 	.word	0x2000401c

0001d5a8 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
   1d5a8:	b513      	push	{r0, r1, r4, lr}
    if(size == 0) {
   1d5aa:	b1d0      	cbz	r0, 1d5e2 <lv_mem_alloc+0x3a>
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    size = (size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    size = (size + 3) & (~0x3);
   1d5ac:	3003      	adds	r0, #3
   1d5ae:	f020 0403 	bic.w	r4, r0, #3
	return k_aligned_alloc(sizeof(void *), size);
   1d5b2:	1d21      	adds	r1, r4, #4
   1d5b4:	2004      	movs	r0, #4
   1d5b6:	f003 f9b3 	bl	20920 <k_aligned_alloc>
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
    if(alloc != NULL) {
   1d5ba:	b950      	cbnz	r0, 1d5d2 <lv_mem_alloc+0x2a>
#if LV_MEM_ADD_JUNK
    if(alloc != NULL) _lv_memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) {
        LV_LOG_WARN("Couldn't allocate memory");
   1d5bc:	4b0a      	ldr	r3, [pc, #40]	; (1d5e8 <lv_mem_alloc+0x40>)
   1d5be:	9300      	str	r3, [sp, #0]
   1d5c0:	2002      	movs	r0, #2
   1d5c2:	4b0a      	ldr	r3, [pc, #40]	; (1d5ec <lv_mem_alloc+0x44>)
   1d5c4:	490a      	ldr	r1, [pc, #40]	; (1d5f0 <lv_mem_alloc+0x48>)
   1d5c6:	22d0      	movs	r2, #208	; 0xd0
   1d5c8:	f7ff ffc6 	bl	1d558 <_lv_log_add>
   1d5cc:	2000      	movs	r0, #0
        }
#endif
    }

    return alloc;
}
   1d5ce:	b002      	add	sp, #8
   1d5d0:	bd10      	pop	{r4, pc}
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
   1d5d2:	0064      	lsls	r4, r4, #1
   1d5d4:	f044 0401 	orr.w	r4, r4, #1
   1d5d8:	f840 4b04 	str.w	r4, [r0], #4
    if(alloc == NULL) {
   1d5dc:	2800      	cmp	r0, #0
   1d5de:	d1f6      	bne.n	1d5ce <lv_mem_alloc+0x26>
   1d5e0:	e7ec      	b.n	1d5bc <lv_mem_alloc+0x14>
        return &zero_mem;
   1d5e2:	4804      	ldr	r0, [pc, #16]	; (1d5f4 <lv_mem_alloc+0x4c>)
   1d5e4:	e7f3      	b.n	1d5ce <lv_mem_alloc+0x26>
   1d5e6:	bf00      	nop
   1d5e8:	000308a2 	.word	0x000308a2
   1d5ec:	000308e7 	.word	0x000308e7
   1d5f0:	0003086c 	.word	0x0003086c
   1d5f4:	20004020 	.word	0x20004020

0001d5f8 <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
   1d5f8:	4b06      	ldr	r3, [pc, #24]	; (1d614 <lv_mem_free+0x1c>)
   1d5fa:	4298      	cmp	r0, r3
   1d5fc:	d008      	beq.n	1d610 <lv_mem_free+0x18>
    if(data == NULL) return;
   1d5fe:	b138      	cbz	r0, 1d610 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
   1d600:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1d604:	f36f 0300 	bfc	r3, #0, #1
   1d608:	f800 3d04 	strb.w	r3, [r0, #-4]!


#endif /*LV_MEM_AUTO_DEFRAG*/
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
   1d60c:	f00e b8bb 	b.w	2b786 <k_free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
   1d610:	4770      	bx	lr
   1d612:	bf00      	nop
   1d614:	20004020 	.word	0x20004020

0001d618 <_lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
   1d618:	b140      	cbz	r0, 1d62c <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
   1d61a:	4b05      	ldr	r3, [pc, #20]	; (1d630 <_lv_mem_get_size+0x18>)
   1d61c:	4298      	cmp	r0, r3
   1d61e:	d004      	beq.n	1d62a <_lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
   1d620:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1d624:	f3c0 005e 	ubfx	r0, r0, #1, #31
   1d628:	4770      	bx	lr
    if(data == NULL) return 0;
   1d62a:	2000      	movs	r0, #0
}
   1d62c:	4770      	bx	lr
   1d62e:	bf00      	nop
   1d630:	20004020 	.word	0x20004020

0001d634 <lv_mem_realloc>:
{
   1d634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    new_size = (new_size + 3) & (~0x3);
   1d636:	1ccd      	adds	r5, r1, #3
   1d638:	f025 0503 	bic.w	r5, r5, #3
    if(data_p != NULL) {
   1d63c:	4604      	mov	r4, r0
   1d63e:	b130      	cbz	r0, 1d64e <lv_mem_realloc+0x1a>
        if(e->header.s.used == 0) {
   1d640:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
   1d644:	f013 0f01 	tst.w	r3, #1
   1d648:	bf14      	ite	ne
   1d64a:	4604      	movne	r4, r0
   1d64c:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   1d64e:	4620      	mov	r0, r4
   1d650:	f7ff ffe2 	bl	1d618 <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   1d654:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
   1d656:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   1d658:	d01f      	beq.n	1d69a <lv_mem_realloc+0x66>
    new_p = lv_mem_alloc(new_size);
   1d65a:	4628      	mov	r0, r5
   1d65c:	f7ff ffa4 	bl	1d5a8 <lv_mem_alloc>
    if(new_p == NULL) {
   1d660:	4606      	mov	r6, r0
   1d662:	b958      	cbnz	r0, 1d67c <lv_mem_realloc+0x48>
        LV_LOG_WARN("Couldn't allocate memory");
   1d664:	4b0e      	ldr	r3, [pc, #56]	; (1d6a0 <lv_mem_realloc+0x6c>)
   1d666:	9300      	str	r3, [sp, #0]
   1d668:	490e      	ldr	r1, [pc, #56]	; (1d6a4 <lv_mem_realloc+0x70>)
   1d66a:	4b0f      	ldr	r3, [pc, #60]	; (1d6a8 <lv_mem_realloc+0x74>)
   1d66c:	f240 1243 	movw	r2, #323	; 0x143
   1d670:	2002      	movs	r0, #2
   1d672:	f7ff ff71 	bl	1d558 <_lv_log_add>
}
   1d676:	4630      	mov	r0, r6
   1d678:	b003      	add	sp, #12
   1d67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data_p != NULL) {
   1d67c:	2c00      	cmp	r4, #0
   1d67e:	d0fa      	beq.n	1d676 <lv_mem_realloc+0x42>
        if(old_size != 0) {
   1d680:	2f00      	cmp	r7, #0
   1d682:	d0f8      	beq.n	1d676 <lv_mem_realloc+0x42>
   1d684:	42bd      	cmp	r5, r7
   1d686:	462a      	mov	r2, r5
   1d688:	4621      	mov	r1, r4
   1d68a:	bf28      	it	cs
   1d68c:	463a      	movcs	r2, r7
   1d68e:	f00e f890 	bl	2b7b2 <memcpy>
            lv_mem_free(data_p);
   1d692:	4620      	mov	r0, r4
   1d694:	f7ff ffb0 	bl	1d5f8 <lv_mem_free>
   1d698:	e7ed      	b.n	1d676 <lv_mem_realloc+0x42>
   1d69a:	4626      	mov	r6, r4
   1d69c:	e7eb      	b.n	1d676 <lv_mem_realloc+0x42>
   1d69e:	bf00      	nop
   1d6a0:	000308a2 	.word	0x000308a2
   1d6a4:	0003086c 	.word	0x0003086c
   1d6a8:	000308f4 	.word	0x000308f4

0001d6ac <_lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
   1d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
   1d6ae:	4601      	mov	r1, r0
   1d6b0:	b190      	cbz	r0, 1d6d8 <_lv_mem_buf_get+0x2c>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
   1d6b2:	2810      	cmp	r0, #16
   1d6b4:	d811      	bhi.n	1d6da <_lv_mem_buf_get+0x2e>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
            if(mem_buf_small[i].used == 0) {
   1d6b6:	4a2c      	ldr	r2, [pc, #176]	; (1d768 <_lv_mem_buf_get+0xbc>)
   1d6b8:	7993      	ldrb	r3, [r2, #6]
   1d6ba:	f013 0301 	ands.w	r3, r3, #1
   1d6be:	d003      	beq.n	1d6c8 <_lv_mem_buf_get+0x1c>
   1d6c0:	7b93      	ldrb	r3, [r2, #14]
   1d6c2:	07df      	lsls	r7, r3, #31
   1d6c4:	d409      	bmi.n	1d6da <_lv_mem_buf_get+0x2e>
   1d6c6:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
   1d6c8:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   1d6cc:	7981      	ldrb	r1, [r0, #6]
   1d6ce:	f041 0101 	orr.w	r1, r1, #1
   1d6d2:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
   1d6d4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_DRAW_BUF_MAX_NUM.", 0x00);
    return NULL;
}
   1d6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   1d6da:	4824      	ldr	r0, [pc, #144]	; (1d76c <_lv_mem_buf_get+0xc0>)
            if(mem_buf_small[i].used == 0) {
   1d6dc:	2300      	movs	r3, #0
   1d6de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d6e2:	4605      	mov	r5, r0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   1d6e4:	f100 0c04 	add.w	ip, r0, #4
   1d6e8:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
   1d6ec:	79be      	ldrb	r6, [r7, #6]
   1d6ee:	4634      	mov	r4, r6
   1d6f0:	07f6      	lsls	r6, r6, #31
   1d6f2:	d413      	bmi.n	1d71c <_lv_mem_buf_get+0x70>
   1d6f4:	f83c 6033 	ldrh.w	r6, [ip, r3, lsl #3]
   1d6f8:	428e      	cmp	r6, r1
   1d6fa:	d30f      	bcc.n	1d71c <_lv_mem_buf_get+0x70>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   1d6fc:	d105      	bne.n	1d70a <_lv_mem_buf_get+0x5e>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d6fe:	f044 0401 	orr.w	r4, r4, #1
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   1d702:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d706:	71bc      	strb	r4, [r7, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   1d708:	e7e6      	b.n	1d6d8 <_lv_mem_buf_get+0x2c>
            else if(i_guess < 0) {
   1d70a:	1c57      	adds	r7, r2, #1
   1d70c:	d101      	bne.n	1d712 <_lv_mem_buf_get+0x66>
                i_guess = i;
   1d70e:	b25a      	sxtb	r2, r3
   1d710:	e004      	b.n	1d71c <_lv_mem_buf_get+0x70>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   1d712:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   1d716:	88a4      	ldrh	r4, [r4, #4]
   1d718:	42b4      	cmp	r4, r6
   1d71a:	d8f8      	bhi.n	1d70e <_lv_mem_buf_get+0x62>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d71c:	3301      	adds	r3, #1
   1d71e:	2b10      	cmp	r3, #16
   1d720:	d1e2      	bne.n	1d6e8 <_lv_mem_buf_get+0x3c>
    if(i_guess >= 0) {
   1d722:	1c54      	adds	r4, r2, #1
   1d724:	d008      	beq.n	1d738 <_lv_mem_buf_get+0x8c>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   1d726:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   1d72a:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   1d72e:	798b      	ldrb	r3, [r1, #6]
   1d730:	f043 0301 	orr.w	r3, r3, #1
   1d734:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   1d736:	e7cf      	b.n	1d6d8 <_lv_mem_buf_get+0x2c>
   1d738:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   1d73a:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   1d73e:	7998      	ldrb	r0, [r3, #6]
   1d740:	4602      	mov	r2, r0
   1d742:	07c0      	lsls	r0, r0, #31
   1d744:	d40a      	bmi.n	1d75c <_lv_mem_buf_get+0xb0>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d746:	f042 0201 	orr.w	r2, r2, #1
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   1d74a:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d74e:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   1d750:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   1d752:	f7ff ff6f 	bl	1d634 <lv_mem_realloc>
   1d756:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   1d75a:	e7bd      	b.n	1d6d8 <_lv_mem_buf_get+0x2c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d75c:	3401      	adds	r4, #1
   1d75e:	2c10      	cmp	r4, #16
   1d760:	d1eb      	bne.n	1d73a <_lv_mem_buf_get+0x8e>
    if(size == 0) return NULL;
   1d762:	2000      	movs	r0, #0
   1d764:	e7b8      	b.n	1d6d8 <_lv_mem_buf_get+0x2c>
   1d766:	bf00      	nop
   1d768:	200007d8 	.word	0x200007d8
   1d76c:	20003f7c 	.word	0x20003f7c

0001d770 <_lv_mem_buf_release>:
{
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        if(mem_buf_small[i].p == p) {
   1d770:	4b16      	ldr	r3, [pc, #88]	; (1d7cc <_lv_mem_buf_release+0x5c>)
   1d772:	681a      	ldr	r2, [r3, #0]
   1d774:	4290      	cmp	r0, r2
{
   1d776:	b513      	push	{r0, r1, r4, lr}
        if(mem_buf_small[i].p == p) {
   1d778:	d00b      	beq.n	1d792 <_lv_mem_buf_release+0x22>
   1d77a:	689a      	ldr	r2, [r3, #8]
   1d77c:	4290      	cmp	r0, r2
   1d77e:	d10a      	bne.n	1d796 <_lv_mem_buf_release+0x26>
   1d780:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
   1d782:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d786:	799a      	ldrb	r2, [r3, #6]
   1d788:	f36f 0200 	bfc	r2, #0, #1
   1d78c:	719a      	strb	r2, [r3, #6]
            return;
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
   1d78e:	b002      	add	sp, #8
   1d790:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   1d792:	2200      	movs	r2, #0
   1d794:	e7f5      	b.n	1d782 <_lv_mem_buf_release+0x12>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   1d796:	4a0e      	ldr	r2, [pc, #56]	; (1d7d0 <_lv_mem_buf_release+0x60>)
        if(mem_buf_small[i].p == p) {
   1d798:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   1d79a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   1d79e:	4284      	cmp	r4, r0
   1d7a0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1d7a4:	d104      	bne.n	1d7b0 <_lv_mem_buf_release+0x40>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1d7a6:	798b      	ldrb	r3, [r1, #6]
   1d7a8:	f36f 0300 	bfc	r3, #0, #1
   1d7ac:	718b      	strb	r3, [r1, #6]
            return;
   1d7ae:	e7ee      	b.n	1d78e <_lv_mem_buf_release+0x1e>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d7b0:	3301      	adds	r3, #1
   1d7b2:	2b10      	cmp	r3, #16
   1d7b4:	d1f1      	bne.n	1d79a <_lv_mem_buf_release+0x2a>
    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
   1d7b6:	4b07      	ldr	r3, [pc, #28]	; (1d7d4 <_lv_mem_buf_release+0x64>)
   1d7b8:	9300      	str	r3, [sp, #0]
   1d7ba:	4907      	ldr	r1, [pc, #28]	; (1d7d8 <_lv_mem_buf_release+0x68>)
   1d7bc:	4b07      	ldr	r3, [pc, #28]	; (1d7dc <_lv_mem_buf_release+0x6c>)
   1d7be:	f240 2236 	movw	r2, #566	; 0x236
   1d7c2:	2003      	movs	r0, #3
   1d7c4:	f7ff fec8 	bl	1d558 <_lv_log_add>
   1d7c8:	e7e1      	b.n	1d78e <_lv_mem_buf_release+0x1e>
   1d7ca:	bf00      	nop
   1d7cc:	200007d8 	.word	0x200007d8
   1d7d0:	20003f7c 	.word	0x20003f7c
   1d7d4:	000308bb 	.word	0x000308bb
   1d7d8:	0003086c 	.word	0x0003086c
   1d7dc:	00030903 	.word	0x00030903

0001d7e0 <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
   1d7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        mem_buf_small[i].used = 0;
   1d7e2:	4b0f      	ldr	r3, [pc, #60]	; (1d820 <_lv_mem_buf_free_all+0x40>)
   1d7e4:	4c0f      	ldr	r4, [pc, #60]	; (1d824 <_lv_mem_buf_free_all+0x44>)
   1d7e6:	799a      	ldrb	r2, [r3, #6]
   1d7e8:	f36f 0200 	bfc	r2, #0, #1
   1d7ec:	719a      	strb	r2, [r3, #6]
   1d7ee:	7b9a      	ldrb	r2, [r3, #14]
   1d7f0:	2500      	movs	r5, #0
   1d7f2:	f36f 0200 	bfc	r2, #0, #1
   1d7f6:	739a      	strb	r2, [r3, #14]
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d7f8:	4627      	mov	r7, r4
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1d7fa:	462e      	mov	r6, r5
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   1d7fc:	6820      	ldr	r0, [r4, #0]
   1d7fe:	b148      	cbz	r0, 1d814 <_lv_mem_buf_free_all+0x34>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   1d800:	f7ff fefa 	bl	1d5f8 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1d804:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1d808:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1d80a:	799a      	ldrb	r2, [r3, #6]
   1d80c:	f366 0200 	bfi	r2, r6, #0, #1
   1d810:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   1d812:	80a6      	strh	r6, [r4, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d814:	3501      	adds	r5, #1
   1d816:	2d10      	cmp	r5, #16
   1d818:	f104 0408 	add.w	r4, r4, #8
   1d81c:	d1ee      	bne.n	1d7fc <_lv_mem_buf_free_all+0x1c>
        }
    }
}
   1d81e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d820:	200007d8 	.word	0x200007d8
   1d824:	20003f7c 	.word	0x20003f7c

0001d828 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   1d828:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   1d82a:	4805      	ldr	r0, [pc, #20]	; (1d840 <_lv_task_core_init+0x18>)
   1d82c:	2118      	movs	r1, #24
   1d82e:	f00c fe87 	bl	2a540 <_lv_ll_init>

    task_list_changed = false;
   1d832:	4b04      	ldr	r3, [pc, #16]	; (1d844 <_lv_task_core_init+0x1c>)
   1d834:	2200      	movs	r2, #0
   1d836:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   1d838:	4b03      	ldr	r3, [pc, #12]	; (1d848 <_lv_task_core_init+0x20>)
   1d83a:	2201      	movs	r2, #1
   1d83c:	701a      	strb	r2, [r3, #0]
}
   1d83e:	bd08      	pop	{r3, pc}
   1d840:	2000400c 	.word	0x2000400c
   1d844:	20008759 	.word	0x20008759
   1d848:	20008756 	.word	0x20008756

0001d84c <lv_task_create_basic>:
{
   1d84c:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d84e:	481c      	ldr	r0, [pc, #112]	; (1d8c0 <lv_task_create_basic+0x74>)
   1d850:	f00c feb5 	bl	2a5be <_lv_ll_get_head>
    if(NULL == tmp) {
   1d854:	4601      	mov	r1, r0
   1d856:	b148      	cbz	r0, 1d86c <lv_task_create_basic+0x20>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   1d858:	4c19      	ldr	r4, [pc, #100]	; (1d8c0 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
   1d85a:	7d0b      	ldrb	r3, [r1, #20]
   1d85c:	f003 0307 	and.w	r3, r3, #7
   1d860:	2b03      	cmp	r3, #3
   1d862:	d80b      	bhi.n	1d87c <lv_task_create_basic+0x30>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   1d864:	4816      	ldr	r0, [pc, #88]	; (1d8c0 <lv_task_create_basic+0x74>)
   1d866:	f00c feb9 	bl	2a5dc <_lv_ll_ins_prev>
   1d86a:	e002      	b.n	1d872 <lv_task_create_basic+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   1d86c:	4814      	ldr	r0, [pc, #80]	; (1d8c0 <lv_task_create_basic+0x74>)
   1d86e:	f00c fe6f 	bl	2a550 <_lv_ll_ins_head>
        if(new_task == NULL) return NULL;
   1d872:	4604      	mov	r4, r0
   1d874:	b960      	cbnz	r0, 1d890 <lv_task_create_basic+0x44>
   1d876:	2400      	movs	r4, #0
}
   1d878:	4620      	mov	r0, r4
   1d87a:	bd70      	pop	{r4, r5, r6, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   1d87c:	4620      	mov	r0, r4
   1d87e:	f00c fea4 	bl	2a5ca <_lv_ll_get_next>
        } while(tmp != NULL);
   1d882:	4601      	mov	r1, r0
   1d884:	2800      	cmp	r0, #0
   1d886:	d1e8      	bne.n	1d85a <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   1d888:	480d      	ldr	r0, [pc, #52]	; (1d8c0 <lv_task_create_basic+0x74>)
   1d88a:	f00c fe7c 	bl	2a586 <_lv_ll_ins_tail>
   1d88e:	e7f0      	b.n	1d872 <lv_task_create_basic+0x26>
    task_list_changed = true;
   1d890:	4b0c      	ldr	r3, [pc, #48]	; (1d8c4 <lv_task_create_basic+0x78>)
   1d892:	2501      	movs	r5, #1
   1d894:	701d      	strb	r5, [r3, #0]
    new_task->period  = DEF_PERIOD;
   1d896:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1d89a:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
   1d89c:	7d03      	ldrb	r3, [r0, #20]
   1d89e:	2203      	movs	r2, #3
   1d8a0:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->task_cb = NULL;
   1d8a4:	2600      	movs	r6, #0
    new_task->prio    = DEF_PRIO;
   1d8a6:	7503      	strb	r3, [r0, #20]
    new_task->repeat_count = -1;
   1d8a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d8ac:	6103      	str	r3, [r0, #16]
    new_task->task_cb = NULL;
   1d8ae:	6086      	str	r6, [r0, #8]
    new_task->last_run = lv_tick_get();
   1d8b0:	f00c fb99 	bl	29fe6 <lv_tick_get>
    task_created = true;
   1d8b4:	4b04      	ldr	r3, [pc, #16]	; (1d8c8 <lv_task_create_basic+0x7c>)
    new_task->last_run = lv_tick_get();
   1d8b6:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
   1d8b8:	60e6      	str	r6, [r4, #12]
    task_created = true;
   1d8ba:	701d      	strb	r5, [r3, #0]
    return new_task;
   1d8bc:	e7dc      	b.n	1d878 <lv_task_create_basic+0x2c>
   1d8be:	bf00      	nop
   1d8c0:	2000400c 	.word	0x2000400c
   1d8c4:	20008759 	.word	0x20008759
   1d8c8:	20008757 	.word	0x20008757

0001d8cc <lv_task_del>:
{
   1d8cc:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   1d8ce:	4601      	mov	r1, r0
{
   1d8d0:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   1d8d2:	4808      	ldr	r0, [pc, #32]	; (1d8f4 <lv_task_del+0x28>)
   1d8d4:	f00c feb4 	bl	2a640 <_lv_ll_remove>
    task_list_changed = true;
   1d8d8:	4b07      	ldr	r3, [pc, #28]	; (1d8f8 <lv_task_del+0x2c>)
   1d8da:	2501      	movs	r5, #1
    lv_mem_free(task);
   1d8dc:	4620      	mov	r0, r4
    task_list_changed = true;
   1d8de:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
   1d8e0:	f7ff fe8a 	bl	1d5f8 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   1d8e4:	4b05      	ldr	r3, [pc, #20]	; (1d8fc <lv_task_del+0x30>)
   1d8e6:	681b      	ldr	r3, [r3, #0]
   1d8e8:	42a3      	cmp	r3, r4
   1d8ea:	bf04      	itt	eq
   1d8ec:	4b04      	ldreq	r3, [pc, #16]	; (1d900 <lv_task_del+0x34>)
   1d8ee:	701d      	strbeq	r5, [r3, #0]
}
   1d8f0:	bd38      	pop	{r3, r4, r5, pc}
   1d8f2:	bf00      	nop
   1d8f4:	2000400c 	.word	0x2000400c
   1d8f8:	20008759 	.word	0x20008759
   1d8fc:	20004008 	.word	0x20004008
   1d900:	20008758 	.word	0x20008758

0001d904 <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   1d904:	b538      	push	{r3, r4, r5, lr}
   1d906:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   1d908:	6840      	ldr	r0, [r0, #4]
   1d90a:	f00c fb79 	bl	2a000 <lv_tick_elaps>
    if(elp >= task->period)
   1d90e:	6823      	ldr	r3, [r4, #0]
   1d910:	4298      	cmp	r0, r3
   1d912:	d31c      	bcc.n	1d94e <lv_task_exec+0x4a>
        task->last_run = lv_tick_get();
   1d914:	f00c fb67 	bl	29fe6 <lv_tick_get>
        task_deleted   = false;
   1d918:	4d0e      	ldr	r5, [pc, #56]	; (1d954 <lv_task_exec+0x50>)
        task_created   = false;
   1d91a:	4a0f      	ldr	r2, [pc, #60]	; (1d958 <lv_task_exec+0x54>)
        task->last_run = lv_tick_get();
   1d91c:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   1d91e:	2300      	movs	r3, #0
   1d920:	702b      	strb	r3, [r5, #0]
        task_created   = false;
   1d922:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   1d924:	68a3      	ldr	r3, [r4, #8]
   1d926:	b943      	cbnz	r3, 1d93a <lv_task_exec+0x36>
            if(task->repeat_count > 0) {
   1d928:	6923      	ldr	r3, [r4, #16]
   1d92a:	2b00      	cmp	r3, #0
   1d92c:	dc0c      	bgt.n	1d948 <lv_task_exec+0x44>
            if(task->repeat_count == 0) {
   1d92e:	6923      	ldr	r3, [r4, #16]
   1d930:	b943      	cbnz	r3, 1d944 <lv_task_exec+0x40>
                lv_task_del(task);
   1d932:	4620      	mov	r0, r4
   1d934:	f7ff ffca 	bl	1d8cc <lv_task_del>
   1d938:	e004      	b.n	1d944 <lv_task_exec+0x40>
        if(task->task_cb) task->task_cb(task);
   1d93a:	4620      	mov	r0, r4
   1d93c:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   1d93e:	782b      	ldrb	r3, [r5, #0]
   1d940:	2b00      	cmp	r3, #0
   1d942:	d0f1      	beq.n	1d928 <lv_task_exec+0x24>
                lv_task_del(task);
   1d944:	2001      	movs	r0, #1
}
   1d946:	bd38      	pop	{r3, r4, r5, pc}
                task->repeat_count--;
   1d948:	3b01      	subs	r3, #1
   1d94a:	6123      	str	r3, [r4, #16]
   1d94c:	e7ef      	b.n	1d92e <lv_task_exec+0x2a>
    bool exec = false;
   1d94e:	2000      	movs	r0, #0
   1d950:	e7f9      	b.n	1d946 <lv_task_exec+0x42>
   1d952:	bf00      	nop
   1d954:	20008758 	.word	0x20008758
   1d958:	20008757 	.word	0x20008757

0001d95c <lv_task_handler>:
    if(already_running) return 1;
   1d95c:	4b55      	ldr	r3, [pc, #340]	; (1dab4 <lv_task_handler+0x158>)
{
   1d95e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
   1d962:	781c      	ldrb	r4, [r3, #0]
   1d964:	2001      	movs	r0, #1
   1d966:	b924      	cbnz	r4, 1d972 <lv_task_handler+0x16>
    if(lv_task_run == false) {
   1d968:	4a53      	ldr	r2, [pc, #332]	; (1dab8 <lv_task_handler+0x15c>)
    already_running = true;
   1d96a:	7018      	strb	r0, [r3, #0]
    if(lv_task_run == false) {
   1d96c:	7812      	ldrb	r2, [r2, #0]
   1d96e:	b91a      	cbnz	r2, 1d978 <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
   1d970:	701a      	strb	r2, [r3, #0]
}
   1d972:	b003      	add	sp, #12
   1d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
   1d978:	f00c fb35 	bl	29fe6 <lv_tick_get>
   1d97c:	4b4f      	ldr	r3, [pc, #316]	; (1dabc <lv_task_handler+0x160>)
        task_deleted             = false;
   1d97e:	4d50      	ldr	r5, [pc, #320]	; (1dac0 <lv_task_handler+0x164>)
    handler_start = lv_tick_get();
   1d980:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   1d982:	9301      	str	r3, [sp, #4]
        task_deleted             = false;
   1d984:	46a3      	mov	fp, r4
        task_created             = false;
   1d986:	4f4f      	ldr	r7, [pc, #316]	; (1dac4 <lv_task_handler+0x168>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d988:	484f      	ldr	r0, [pc, #316]	; (1dac8 <lv_task_handler+0x16c>)
        task_deleted             = false;
   1d98a:	f885 b000 	strb.w	fp, [r5]
        task_created             = false;
   1d98e:	f887 b000 	strb.w	fp, [r7]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d992:	f00c fe14 	bl	2a5be <_lv_ll_get_head>
   1d996:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1dadc <lv_task_handler+0x180>
            if(task_list_changed) {
   1d99a:	f8df a144 	ldr.w	sl, [pc, #324]	; 1dae0 <lv_task_handler+0x184>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d99e:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
   1d9a2:	46c1      	mov	r9, r8
   1d9a4:	f8d9 1000 	ldr.w	r1, [r9]
   1d9a8:	b1b9      	cbz	r1, 1d9da <lv_task_handler+0x7e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   1d9aa:	4847      	ldr	r0, [pc, #284]	; (1dac8 <lv_task_handler+0x16c>)
   1d9ac:	f00c fe0d 	bl	2a5ca <_lv_ll_get_next>
   1d9b0:	4606      	mov	r6, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   1d9b2:	f8d9 0000 	ldr.w	r0, [r9]
   1d9b6:	7d03      	ldrb	r3, [r0, #20]
   1d9b8:	f013 0207 	ands.w	r2, r3, #7
   1d9bc:	d00d      	beq.n	1d9da <lv_task_handler+0x7e>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   1d9be:	42a0      	cmp	r0, r4
   1d9c0:	d103      	bne.n	1d9ca <lv_task_handler+0x6e>
                LV_GC_ROOT(_lv_task_act) = next;
   1d9c2:	f8c9 6000 	str.w	r6, [r9]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   1d9c6:	2400      	movs	r4, #0
                continue; /*Load the next task*/
   1d9c8:	e7ec      	b.n	1d9a4 <lv_task_handler+0x48>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   1d9ca:	2a05      	cmp	r2, #5
   1d9cc:	d138      	bne.n	1da40 <lv_task_handler+0xe4>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   1d9ce:	f7ff ff99 	bl	1d904 <lv_task_exec>
            if(task_created || task_deleted) {
   1d9d2:	4b3c      	ldr	r3, [pc, #240]	; (1dac4 <lv_task_handler+0x168>)
   1d9d4:	781b      	ldrb	r3, [r3, #0]
   1d9d6:	2b00      	cmp	r3, #0
   1d9d8:	d060      	beq.n	1da9c <lv_task_handler+0x140>
    busy_time += lv_tick_elaps(handler_start);
   1d9da:	9b01      	ldr	r3, [sp, #4]
   1d9dc:	4c3b      	ldr	r4, [pc, #236]	; (1dacc <lv_task_handler+0x170>)
   1d9de:	6818      	ldr	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1d9e0:	4d3b      	ldr	r5, [pc, #236]	; (1dad0 <lv_task_handler+0x174>)
    busy_time += lv_tick_elaps(handler_start);
   1d9e2:	f00c fb0d 	bl	2a000 <lv_tick_elaps>
   1d9e6:	6823      	ldr	r3, [r4, #0]
   1d9e8:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1d9ea:	6828      	ldr	r0, [r5, #0]
    busy_time += lv_tick_elaps(handler_start);
   1d9ec:	6023      	str	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1d9ee:	f00c fb07 	bl	2a000 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   1d9f2:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1d9f6:	d315      	bcc.n	1da24 <lv_task_handler+0xc8>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   1d9f8:	6822      	ldr	r2, [r4, #0]
   1d9fa:	2364      	movs	r3, #100	; 0x64
   1d9fc:	4353      	muls	r3, r2
   1d9fe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1da02:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   1da06:	b2da      	uxtb	r2, r3
   1da08:	2a64      	cmp	r2, #100	; 0x64
   1da0a:	bf98      	it	ls
   1da0c:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   1da10:	4a30      	ldr	r2, [pc, #192]	; (1dad4 <lv_task_handler+0x178>)
   1da12:	bf94      	ite	ls
   1da14:	b2db      	uxtbls	r3, r3
   1da16:	2300      	movhi	r3, #0
   1da18:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   1da1a:	2300      	movs	r3, #0
   1da1c:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
   1da1e:	f00c fae2 	bl	29fe6 <lv_tick_get>
   1da22:	6028      	str	r0, [r5, #0]
    time_till_next = LV_NO_TASK_READY;
   1da24:	4d2c      	ldr	r5, [pc, #176]	; (1dad8 <lv_task_handler+0x17c>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1da26:	4828      	ldr	r0, [pc, #160]	; (1dac8 <lv_task_handler+0x16c>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   1da28:	4e27      	ldr	r6, [pc, #156]	; (1dac8 <lv_task_handler+0x16c>)
    time_till_next = LV_NO_TASK_READY;
   1da2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1da2e:	602b      	str	r3, [r5, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1da30:	f00c fdc5 	bl	2a5be <_lv_ll_get_head>
   1da34:	4604      	mov	r4, r0
    while(next) {
   1da36:	b9dc      	cbnz	r4, 1da70 <lv_task_handler+0x114>
    already_running = false; /*Release the mutex*/
   1da38:	4b1e      	ldr	r3, [pc, #120]	; (1dab4 <lv_task_handler+0x158>)
    return time_till_next;
   1da3a:	6828      	ldr	r0, [r5, #0]
    already_running = false; /*Release the mutex*/
   1da3c:	701c      	strb	r4, [r3, #0]
    return time_till_next;
   1da3e:	e798      	b.n	1d972 <lv_task_handler+0x16>
            else if(task_interrupter) {
   1da40:	b134      	cbz	r4, 1da50 <lv_task_handler+0xf4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   1da42:	7d22      	ldrb	r2, [r4, #20]
   1da44:	f003 0307 	and.w	r3, r3, #7
   1da48:	f002 0207 	and.w	r2, r2, #7
   1da4c:	4293      	cmp	r3, r2
   1da4e:	d9c0      	bls.n	1d9d2 <lv_task_handler+0x76>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   1da50:	f7ff ff58 	bl	1d904 <lv_task_exec>
   1da54:	2800      	cmp	r0, #0
   1da56:	d0bc      	beq.n	1d9d2 <lv_task_handler+0x76>
                    if(!task_created && !task_deleted) {
   1da58:	783b      	ldrb	r3, [r7, #0]
   1da5a:	2b00      	cmp	r3, #0
   1da5c:	d1bd      	bne.n	1d9da <lv_task_handler+0x7e>
   1da5e:	782b      	ldrb	r3, [r5, #0]
   1da60:	2b00      	cmp	r3, #0
   1da62:	d1ba      	bne.n	1d9da <lv_task_handler+0x7e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   1da64:	f8d8 4000 	ldr.w	r4, [r8]
    } while(!end_flag);
   1da68:	e78d      	b.n	1d986 <lv_task_handler+0x2a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   1da6a:	f8c9 6000 	str.w	r6, [r9]
   1da6e:	e799      	b.n	1d9a4 <lv_task_handler+0x48>
        if(next->prio != LV_TASK_PRIO_OFF) {
   1da70:	7d23      	ldrb	r3, [r4, #20]
   1da72:	075b      	lsls	r3, r3, #29
   1da74:	d00c      	beq.n	1da90 <lv_task_handler+0x134>
    uint32_t elp = lv_tick_elaps(task->last_run);
   1da76:	6860      	ldr	r0, [r4, #4]
   1da78:	f00c fac2 	bl	2a000 <lv_tick_elaps>
    if(elp >= task->period)
   1da7c:	6823      	ldr	r3, [r4, #0]
   1da7e:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
   1da80:	bf38      	it	cc
   1da82:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
   1da84:	682b      	ldr	r3, [r5, #0]
        return 0;
   1da86:	bf28      	it	cs
   1da88:	2000      	movcs	r0, #0
            if(delay < time_till_next)
   1da8a:	4283      	cmp	r3, r0
                time_till_next = delay;
   1da8c:	bf88      	it	hi
   1da8e:	6028      	strhi	r0, [r5, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   1da90:	4621      	mov	r1, r4
   1da92:	4630      	mov	r0, r6
   1da94:	f00c fd99 	bl	2a5ca <_lv_ll_get_next>
   1da98:	4604      	mov	r4, r0
   1da9a:	e7cc      	b.n	1da36 <lv_task_handler+0xda>
            if(task_created || task_deleted) {
   1da9c:	782b      	ldrb	r3, [r5, #0]
   1da9e:	2b00      	cmp	r3, #0
   1daa0:	d19b      	bne.n	1d9da <lv_task_handler+0x7e>
            if(task_list_changed) {
   1daa2:	f89a 2000 	ldrb.w	r2, [sl]
   1daa6:	2a00      	cmp	r2, #0
   1daa8:	d0df      	beq.n	1da6a <lv_task_handler+0x10e>
                task_list_changed = false;
   1daaa:	f88a 3000 	strb.w	r3, [sl]
                task_interrupter = NULL;
   1daae:	461c      	mov	r4, r3
   1dab0:	e769      	b.n	1d986 <lv_task_handler+0x2a>
   1dab2:	bf00      	nop
   1dab4:	20008754 	.word	0x20008754
   1dab8:	20008756 	.word	0x20008756
   1dabc:	20004028 	.word	0x20004028
   1dac0:	20008758 	.word	0x20008758
   1dac4:	20008757 	.word	0x20008757
   1dac8:	2000400c 	.word	0x2000400c
   1dacc:	20004024 	.word	0x20004024
   1dad0:	2000402c 	.word	0x2000402c
   1dad4:	20008755 	.word	0x20008755
   1dad8:	20004030 	.word	0x20004030
   1dadc:	20004008 	.word	0x20004008
   1dae0:	20008759 	.word	0x20008759

0001dae4 <lv_task_set_prio>:
    if(task->prio == prio) return;
   1dae4:	7d03      	ldrb	r3, [r0, #20]
   1dae6:	f003 0307 	and.w	r3, r3, #7
   1daea:	428b      	cmp	r3, r1
{
   1daec:	b570      	push	{r4, r5, r6, lr}
   1daee:	4604      	mov	r4, r0
   1daf0:	460d      	mov	r5, r1
    if(task->prio == prio) return;
   1daf2:	d017      	beq.n	1db24 <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   1daf4:	480f      	ldr	r0, [pc, #60]	; (1db34 <lv_task_set_prio+0x50>)
   1daf6:	4e0f      	ldr	r6, [pc, #60]	; (1db34 <lv_task_set_prio+0x50>)
   1daf8:	f00c fd61 	bl	2a5be <_lv_ll_get_head>
   1dafc:	4602      	mov	r2, r0
   1dafe:	b132      	cbz	r2, 1db0e <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
   1db00:	7d13      	ldrb	r3, [r2, #20]
   1db02:	f003 0307 	and.w	r3, r3, #7
   1db06:	429d      	cmp	r5, r3
   1db08:	db0d      	blt.n	1db26 <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   1db0a:	42a2      	cmp	r2, r4
   1db0c:	d003      	beq.n	1db16 <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   1db0e:	4809      	ldr	r0, [pc, #36]	; (1db34 <lv_task_set_prio+0x50>)
   1db10:	4621      	mov	r1, r4
   1db12:	f00c fdce 	bl	2a6b2 <_lv_ll_move_before>
    task_list_changed = true;
   1db16:	4b08      	ldr	r3, [pc, #32]	; (1db38 <lv_task_set_prio+0x54>)
   1db18:	2201      	movs	r2, #1
   1db1a:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   1db1c:	7d23      	ldrb	r3, [r4, #20]
   1db1e:	f365 0302 	bfi	r3, r5, #0, #3
   1db22:	7523      	strb	r3, [r4, #20]
}
   1db24:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   1db26:	4611      	mov	r1, r2
   1db28:	4630      	mov	r0, r6
   1db2a:	f00c fd4e 	bl	2a5ca <_lv_ll_get_next>
   1db2e:	4602      	mov	r2, r0
   1db30:	e7e5      	b.n	1dafe <lv_task_set_prio+0x1a>
   1db32:	bf00      	nop
   1db34:	2000400c 	.word	0x2000400c
   1db38:	20008759 	.word	0x20008759

0001db3c <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
   1db3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
   1db40:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   1db42:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1db6c <lv_txt_utf8_get_byte_id+0x30>
{
   1db46:	4607      	mov	r7, r0
   1db48:	460d      	mov	r5, r1
    for(i = 0; i < utf8_id; i++) {
   1db4a:	4626      	mov	r6, r4
   1db4c:	42ae      	cmp	r6, r5
   1db4e:	d102      	bne.n	1db56 <lv_txt_utf8_get_byte_id+0x1a>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
   1db50:	4620      	mov	r0, r4
   1db52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   1db56:	1938      	adds	r0, r7, r4
   1db58:	f8d8 3000 	ldr.w	r3, [r8]
   1db5c:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
   1db5e:	2801      	cmp	r0, #1
   1db60:	bf38      	it	cc
   1db62:	2001      	movcc	r0, #1
   1db64:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id; i++) {
   1db68:	3601      	adds	r6, #1
   1db6a:	e7ef      	b.n	1db4c <lv_txt_utf8_get_byte_id+0x10>
   1db6c:	200007f8 	.word	0x200007f8

0001db70 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   1db70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
   1db72:	2400      	movs	r4, #0
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   1db74:	4f07      	ldr	r7, [pc, #28]	; (1db94 <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
   1db76:	9401      	str	r4, [sp, #4]
{
   1db78:	4606      	mov	r6, r0
   1db7a:	460d      	mov	r5, r1
    while(i < byte_id) {
   1db7c:	9b01      	ldr	r3, [sp, #4]
   1db7e:	42ab      	cmp	r3, r5
   1db80:	d302      	bcc.n	1db88 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
   1db82:	4620      	mov	r0, r4
   1db84:	b003      	add	sp, #12
   1db86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   1db88:	683b      	ldr	r3, [r7, #0]
   1db8a:	a901      	add	r1, sp, #4
   1db8c:	4630      	mov	r0, r6
   1db8e:	4798      	blx	r3
        char_cnt++;
   1db90:	3401      	adds	r4, #1
   1db92:	e7f3      	b.n	1db7c <lv_txt_utf8_get_char_id+0xc>
   1db94:	200007f0 	.word	0x200007f0

0001db98 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
   1db98:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
   1db9a:	2400      	movs	r4, #0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
   1db9c:	4e07      	ldr	r6, [pc, #28]	; (1dbbc <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
   1db9e:	9401      	str	r4, [sp, #4]
{
   1dba0:	4605      	mov	r5, r0
    while(txt[i] != '\0') {
   1dba2:	9b01      	ldr	r3, [sp, #4]
   1dba4:	5ceb      	ldrb	r3, [r5, r3]
   1dba6:	b913      	cbnz	r3, 1dbae <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
   1dba8:	4620      	mov	r0, r4
   1dbaa:	b002      	add	sp, #8
   1dbac:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
   1dbae:	6833      	ldr	r3, [r6, #0]
   1dbb0:	a901      	add	r1, sp, #4
   1dbb2:	4628      	mov	r0, r5
   1dbb4:	4798      	blx	r3
        len++;
   1dbb6:	3401      	adds	r4, #1
   1dbb8:	e7f3      	b.n	1dba2 <lv_txt_utf8_get_length+0xa>
   1dbba:	bf00      	nop
   1dbbc:	200007f0 	.word	0x200007f0

0001dbc0 <lv_txt_utf8_prev>:
    (*i)--;
   1dbc0:	680b      	ldr	r3, [r1, #0]
{
   1dbc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
   1dbc4:	3b01      	subs	r3, #1
        c_size = _lv_txt_encoded_size(&txt[*i]);
   1dbc6:	4f0e      	ldr	r7, [pc, #56]	; (1dc00 <lv_txt_utf8_prev+0x40>)
    (*i)--;
   1dbc8:	600b      	str	r3, [r1, #0]
{
   1dbca:	4606      	mov	r6, r0
   1dbcc:	460c      	mov	r4, r1
    (*i)--;
   1dbce:	2504      	movs	r5, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
   1dbd0:	6820      	ldr	r0, [r4, #0]
   1dbd2:	683b      	ldr	r3, [r7, #0]
   1dbd4:	4430      	add	r0, r6
   1dbd6:	4798      	blx	r3
        if(c_size == 0) {
   1dbd8:	6823      	ldr	r3, [r4, #0]
   1dbda:	b948      	cbnz	r0, 1dbf0 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
   1dbdc:	b12b      	cbz	r3, 1dbea <lv_txt_utf8_prev+0x2a>
                (*i)--;
   1dbde:	3d01      	subs	r5, #1
   1dbe0:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   1dbe2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
   1dbe6:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   1dbe8:	d1f2      	bne.n	1dbd0 <lv_txt_utf8_prev+0x10>
   1dbea:	2000      	movs	r0, #0
}
   1dbec:	b003      	add	sp, #12
   1dbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
   1dbf0:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
   1dbf2:	4b04      	ldr	r3, [pc, #16]	; (1dc04 <lv_txt_utf8_prev+0x44>)
   1dbf4:	a901      	add	r1, sp, #4
   1dbf6:	681b      	ldr	r3, [r3, #0]
   1dbf8:	4630      	mov	r0, r6
   1dbfa:	4798      	blx	r3
    return letter;
   1dbfc:	e7f6      	b.n	1dbec <lv_txt_utf8_prev+0x2c>
   1dbfe:	bf00      	nop
   1dc00:	200007f8 	.word	0x200007f8
   1dc04:	200007f0 	.word	0x200007f0

0001dc08 <_lv_txt_get_width>:
{
   1dc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc0c:	4688      	mov	r8, r1
   1dc0e:	b085      	sub	sp, #20
   1dc10:	4617      	mov	r7, r2
   1dc12:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
   1dc14:	4605      	mov	r5, r0
   1dc16:	2400      	movs	r4, #0
   1dc18:	2800      	cmp	r0, #0
   1dc1a:	d040      	beq.n	1dc9e <_lv_txt_get_width+0x96>
    if(font == NULL) return 0;
   1dc1c:	2a00      	cmp	r2, #0
   1dc1e:	d040      	beq.n	1dca2 <_lv_txt_get_width+0x9a>
    uint32_t i                   = 0;
   1dc20:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1dc22:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
   1dc26:	2900      	cmp	r1, #0
   1dc28:	d132      	bne.n	1dc90 <_lv_txt_get_width+0x88>
    lv_coord_t width             = 0;
   1dc2a:	460c      	mov	r4, r1
}
   1dc2c:	4620      	mov	r0, r4
   1dc2e:	b005      	add	sp, #20
   1dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   1dc34:	f8da 3000 	ldr.w	r3, [sl]
   1dc38:	a903      	add	r1, sp, #12
   1dc3a:	4628      	mov	r0, r5
   1dc3c:	4798      	blx	r3
   1dc3e:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   1dc40:	9803      	ldr	r0, [sp, #12]
   1dc42:	f8da 3000 	ldr.w	r3, [sl]
   1dc46:	2100      	movs	r1, #0
   1dc48:	4428      	add	r0, r5
   1dc4a:	4798      	blx	r3
   1dc4c:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dc4e:	f1b9 0f00 	cmp.w	r9, #0
   1dc52:	d10e      	bne.n	1dc72 <_lv_txt_get_width+0x6a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   1dc54:	4659      	mov	r1, fp
   1dc56:	4638      	mov	r0, r7
   1dc58:	f00c fe4b 	bl	2a8f2 <lv_font_get_glyph_width>
   1dc5c:	b200      	sxth	r0, r0
            if(char_width > 0) {
   1dc5e:	2800      	cmp	r0, #0
   1dc60:	dc11      	bgt.n	1dc86 <_lv_txt_get_width+0x7e>
        while(i < length) {
   1dc62:	9b03      	ldr	r3, [sp, #12]
   1dc64:	4598      	cmp	r8, r3
   1dc66:	d8e5      	bhi.n	1dc34 <_lv_txt_get_width+0x2c>
        if(width > 0) {
   1dc68:	2c00      	cmp	r4, #0
   1dc6a:	dddf      	ble.n	1dc2c <_lv_txt_get_width+0x24>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   1dc6c:	1ba4      	subs	r4, r4, r6
   1dc6e:	b224      	sxth	r4, r4
   1dc70:	e7dc      	b.n	1dc2c <_lv_txt_get_width+0x24>
   1dc72:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   1dc74:	4659      	mov	r1, fp
   1dc76:	f10d 000b 	add.w	r0, sp, #11
   1dc7a:	f00c fdf8 	bl	2a86e <_lv_txt_is_cmd>
   1dc7e:	9a01      	ldr	r2, [sp, #4]
   1dc80:	2800      	cmp	r0, #0
   1dc82:	d0e7      	beq.n	1dc54 <_lv_txt_get_width+0x4c>
   1dc84:	e7ed      	b.n	1dc62 <_lv_txt_get_width+0x5a>
                width += letter_space;
   1dc86:	4434      	add	r4, r6
   1dc88:	fa00 f484 	sxtah	r4, r0, r4
   1dc8c:	b224      	sxth	r4, r4
   1dc8e:	e7e8      	b.n	1dc62 <_lv_txt_get_width+0x5a>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dc90:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   1dc94:	f8df a010 	ldr.w	sl, [pc, #16]	; 1dca8 <_lv_txt_get_width+0xa0>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dc98:	f009 0901 	and.w	r9, r9, #1
   1dc9c:	e7e1      	b.n	1dc62 <_lv_txt_get_width+0x5a>
    if(txt == NULL) return 0;
   1dc9e:	4604      	mov	r4, r0
   1dca0:	e7c4      	b.n	1dc2c <_lv_txt_get_width+0x24>
   1dca2:	4614      	mov	r4, r2
   1dca4:	e7c2      	b.n	1dc2c <_lv_txt_get_width+0x24>
   1dca6:	bf00      	nop
   1dca8:	200007f0 	.word	0x200007f0

0001dcac <_lv_txt_get_next_line>:
{
   1dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dcb0:	b08f      	sub	sp, #60	; 0x3c
   1dcb2:	4699      	mov	r9, r3
   1dcb4:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   1dcb8:	9102      	str	r1, [sp, #8]
   1dcba:	9204      	str	r2, [sp, #16]
   1dcbc:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
   1dcbe:	4606      	mov	r6, r0
   1dcc0:	b190      	cbz	r0, 1dce8 <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
   1dcc2:	2900      	cmp	r1, #0
   1dcc4:	f000 80cd 	beq.w	1de62 <_lv_txt_get_next_line+0x1b6>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   1dcc8:	9b03      	ldr	r3, [sp, #12]
   1dcca:	f013 0312 	ands.w	r3, r3, #18
   1dcce:	d00e      	beq.n	1dcee <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1dcd0:	2000      	movs	r0, #0
   1dcd2:	e000      	b.n	1dcd6 <_lv_txt_get_next_line+0x2a>
   1dcd4:	3001      	adds	r0, #1
   1dcd6:	5c33      	ldrb	r3, [r6, r0]
   1dcd8:	2b0a      	cmp	r3, #10
   1dcda:	f000 80c4 	beq.w	1de66 <_lv_txt_get_next_line+0x1ba>
   1dcde:	2b0d      	cmp	r3, #13
   1dce0:	f000 80c1 	beq.w	1de66 <_lv_txt_get_next_line+0x1ba>
   1dce4:	2b00      	cmp	r3, #0
   1dce6:	d1f5      	bne.n	1dcd4 <_lv_txt_get_next_line+0x28>
}
   1dce8:	b00f      	add	sp, #60	; 0x3c
   1dcea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dcee:	9a03      	ldr	r2, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1dcf0:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dcf4:	f012 0202 	ands.w	r2, r2, #2
   1dcf8:	9205      	str	r2, [sp, #20]
   1dcfa:	f647 4218 	movw	r2, #31768	; 0x7c18
   1dcfe:	bf18      	it	ne
   1dd00:	4691      	movne	r9, r2
    uint32_t i = 0;                                        /* Iterating index into txt */
   1dd02:	930b      	str	r3, [sp, #44]	; 0x2c
    while(txt[i] != '\0' && max_width > 0) {
   1dd04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1dd06:	9300      	str	r3, [sp, #0]
   1dd08:	eb06 0a03 	add.w	sl, r6, r3
   1dd0c:	5cf3      	ldrb	r3, [r6, r3]
   1dd0e:	2b00      	cmp	r3, #0
   1dd10:	f000 808e 	beq.w	1de30 <_lv_txt_get_next_line+0x184>
   1dd14:	f1b9 0f00 	cmp.w	r9, #0
   1dd18:	f340 808a 	ble.w	1de30 <_lv_txt_get_next_line+0x184>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dd1c:	9a05      	ldr	r2, [sp, #20]
   1dd1e:	f647 4318 	movw	r3, #31768	; 0x7c18
   1dd22:	2a00      	cmp	r2, #0
   1dd24:	bf08      	it	eq
   1dd26:	464b      	moveq	r3, r9
   1dd28:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dd2a:	4b50      	ldr	r3, [pc, #320]	; (1de6c <_lv_txt_get_next_line+0x1c0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1dd2c:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dd2e:	681a      	ldr	r2, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1dd30:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dd34:	a90c      	add	r1, sp, #48	; 0x30
   1dd36:	4650      	mov	r0, sl
   1dd38:	4790      	blx	r2
    i_next_next = i_next;
   1dd3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1dd3c:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd3e:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   1dd40:	9401      	str	r4, [sp, #4]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd42:	f003 0301 	and.w	r3, r3, #1
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dd46:	4680      	mov	r8, r0
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   1dd48:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   1dd4c:	4627      	mov	r7, r4
    uint32_t letter_next = 0; /* Letter at i_next */
   1dd4e:	4622      	mov	r2, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1dd50:	4625      	mov	r5, r4
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd52:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
   1dd54:	f81a 1005 	ldrb.w	r1, [sl, r5]
   1dd58:	b949      	cbnz	r1, 1dd6e <_lv_txt_get_next_line+0xc2>
    if(break_index == NO_BREAK_FOUND) {
   1dd5a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1dd5e:	d053      	beq.n	1de08 <_lv_txt_get_next_line+0x15c>
    if(force) return break_index;
   1dd60:	9b00      	ldr	r3, [sp, #0]
   1dd62:	465d      	mov	r5, fp
   1dd64:	2b00      	cmp	r3, #0
   1dd66:	d057      	beq.n	1de18 <_lv_txt_get_next_line+0x16c>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
   1dd68:	2400      	movs	r4, #0
    return 0;
   1dd6a:	4625      	mov	r5, r4
   1dd6c:	e054      	b.n	1de18 <_lv_txt_get_next_line+0x16c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1dd6e:	4b3f      	ldr	r3, [pc, #252]	; (1de6c <_lv_txt_get_next_line+0x1c0>)
   1dd70:	a90d      	add	r1, sp, #52	; 0x34
   1dd72:	681a      	ldr	r2, [r3, #0]
   1dd74:	4650      	mov	r0, sl
   1dd76:	4790      	blx	r2
        word_len++;
   1dd78:	9b01      	ldr	r3, [sp, #4]
   1dd7a:	3301      	adds	r3, #1
   1dd7c:	9306      	str	r3, [sp, #24]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd7e:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1dd80:	4602      	mov	r2, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd82:	b173      	cbz	r3, 1dda2 <_lv_txt_get_next_line+0xf6>
   1dd84:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   1dd86:	4641      	mov	r1, r8
   1dd88:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1dd8c:	f00c fd6f 	bl	2a86e <_lv_txt_is_cmd>
   1dd90:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dd92:	b130      	cbz	r0, 1dda2 <_lv_txt_get_next_line+0xf6>
        i_next = i_next_next;
   1dd94:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1dd98:	9b06      	ldr	r3, [sp, #24]
        i_next = i_next_next;
   1dd9a:	910c      	str	r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1dd9c:	9301      	str	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1dd9e:	4690      	mov	r8, r2
   1dda0:	e7d8      	b.n	1dd54 <_lv_txt_get_next_line+0xa8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1dda2:	4641      	mov	r1, r8
   1dda4:	9802      	ldr	r0, [sp, #8]
   1dda6:	9209      	str	r2, [sp, #36]	; 0x24
   1dda8:	f00c fda3 	bl	2a8f2 <lv_font_get_glyph_width>
   1ddac:	b201      	sxth	r1, r0
        if(letter_w > 0) {
   1ddae:	2900      	cmp	r1, #0
            cur_w += letter_space;
   1ddb0:	bfc8      	it	gt
   1ddb2:	9b04      	ldrgt	r3, [sp, #16]
        if(letter_w > 0) {
   1ddb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
        cur_w += letter_w;
   1ddb6:	fa07 f780 	sxtah	r7, r7, r0
   1ddba:	b23f      	sxth	r7, r7
            cur_w += letter_space;
   1ddbc:	bfc4      	itt	gt
   1ddbe:	18ff      	addgt	r7, r7, r3
   1ddc0:	b23f      	sxthgt	r7, r7
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   1ddc2:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1ddc6:	d105      	bne.n	1ddd4 <_lv_txt_get_next_line+0x128>
   1ddc8:	9b04      	ldr	r3, [sp, #16]
   1ddca:	1af9      	subs	r1, r7, r3
   1ddcc:	9b07      	ldr	r3, [sp, #28]
   1ddce:	4299      	cmp	r1, r3
   1ddd0:	bfc8      	it	gt
   1ddd2:	46ab      	movgt	fp, r5
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1ddd4:	f1b8 0f0a 	cmp.w	r8, #10
   1ddd8:	d010      	beq.n	1ddfc <_lv_txt_get_next_line+0x150>
   1ddda:	f1b8 0f0d 	cmp.w	r8, #13
   1ddde:	d00d      	beq.n	1ddfc <_lv_txt_get_next_line+0x150>
   1dde0:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   1dde2:	4b23      	ldr	r3, [pc, #140]	; (1de70 <_lv_txt_get_next_line+0x1c4>)
   1dde4:	b2c8      	uxtb	r0, r1
   1dde6:	5c18      	ldrb	r0, [r3, r0]
   1dde8:	b920      	cbnz	r0, 1ddf4 <_lv_txt_get_next_line+0x148>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   1ddea:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1ddee:	bf08      	it	eq
   1ddf0:	463c      	moveq	r4, r7
   1ddf2:	e7cf      	b.n	1dd94 <_lv_txt_get_next_line+0xe8>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1ddf4:	4580      	cmp	r8, r0
   1ddf6:	f101 0101 	add.w	r1, r1, #1
   1ddfa:	d1f2      	bne.n	1dde2 <_lv_txt_get_next_line+0x136>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   1ddfc:	2d00      	cmp	r5, #0
   1ddfe:	d1ac      	bne.n	1dd5a <_lv_txt_get_next_line+0xae>
   1de00:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1de04:	d1ac      	bne.n	1dd60 <_lv_txt_get_next_line+0xb4>
   1de06:	463c      	mov	r4, r7
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   1de08:	9b01      	ldr	r3, [sp, #4]
   1de0a:	b123      	cbz	r3, 1de16 <_lv_txt_get_next_line+0x16a>
   1de0c:	f1b8 0f0d 	cmp.w	r8, #13
   1de10:	d102      	bne.n	1de18 <_lv_txt_get_next_line+0x16c>
   1de12:	2a0a      	cmp	r2, #10
   1de14:	d100      	bne.n	1de18 <_lv_txt_get_next_line+0x16c>
   1de16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
        max_width -= word_w;
   1de18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1de1a:	eba9 0904 	sub.w	r9, r9, r4
   1de1e:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
   1de22:	b975      	cbnz	r5, 1de42 <_lv_txt_get_next_line+0x196>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   1de24:	b95b      	cbnz	r3, 1de3e <_lv_txt_get_next_line+0x192>
   1de26:	4b11      	ldr	r3, [pc, #68]	; (1de6c <_lv_txt_get_next_line+0x1c0>)
   1de28:	a90b      	add	r1, sp, #44	; 0x2c
   1de2a:	681b      	ldr	r3, [r3, #0]
   1de2c:	4630      	mov	r0, r6
   1de2e:	4798      	blx	r3
    if(i == 0) {
   1de30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1de32:	b923      	cbnz	r3, 1de3e <_lv_txt_get_next_line+0x192>
        _lv_txt_encoded_next(txt, &i);
   1de34:	4b0d      	ldr	r3, [pc, #52]	; (1de6c <_lv_txt_get_next_line+0x1c0>)
   1de36:	a90b      	add	r1, sp, #44	; 0x2c
   1de38:	681b      	ldr	r3, [r3, #0]
   1de3a:	4630      	mov	r0, r6
   1de3c:	4798      	blx	r3
    return i;
   1de3e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1de40:	e752      	b.n	1dce8 <_lv_txt_get_next_line+0x3c>
        i += advance;
   1de42:	441d      	add	r5, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1de44:	7833      	ldrb	r3, [r6, #0]
        i += advance;
   1de46:	950b      	str	r5, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1de48:	2b0a      	cmp	r3, #10
   1de4a:	d0f1      	beq.n	1de30 <_lv_txt_get_next_line+0x184>
   1de4c:	2b0d      	cmp	r3, #13
   1de4e:	d0ef      	beq.n	1de30 <_lv_txt_get_next_line+0x184>
        if(txt[i] == '\n' || txt[i] == '\r') {
   1de50:	5d73      	ldrb	r3, [r6, r5]
   1de52:	2b0a      	cmp	r3, #10
   1de54:	d002      	beq.n	1de5c <_lv_txt_get_next_line+0x1b0>
   1de56:	2b0d      	cmp	r3, #13
   1de58:	f47f af54 	bne.w	1dd04 <_lv_txt_get_next_line+0x58>
            i++;  /* Include the following newline in the current line */
   1de5c:	3501      	adds	r5, #1
   1de5e:	950b      	str	r5, [sp, #44]	; 0x2c
            break;
   1de60:	e7e6      	b.n	1de30 <_lv_txt_get_next_line+0x184>
    if(txt == NULL) return 0;
   1de62:	9802      	ldr	r0, [sp, #8]
   1de64:	e740      	b.n	1dce8 <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   1de66:	3001      	adds	r0, #1
   1de68:	e73e      	b.n	1dce8 <_lv_txt_get_next_line+0x3c>
   1de6a:	bf00      	nop
   1de6c:	200007f0 	.word	0x200007f0
   1de70:	00030917 	.word	0x00030917

0001de74 <_lv_txt_get_size>:
{
   1de74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de78:	b087      	sub	sp, #28
    size_res->x = 0;
   1de7a:	2500      	movs	r5, #0
{
   1de7c:	4698      	mov	r8, r3
   1de7e:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1de82:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
   1de86:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
   1de8a:	9303      	str	r3, [sp, #12]
   1de8c:	4604      	mov	r4, r0
   1de8e:	4616      	mov	r6, r2
    size_res->x = 0;
   1de90:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
   1de92:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
   1de94:	9102      	str	r1, [sp, #8]
   1de96:	b329      	cbz	r1, 1dee4 <_lv_txt_get_size+0x70>
    if(font == NULL) return;
   1de98:	b322      	cbz	r2, 1dee4 <_lv_txt_get_size+0x70>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1de9a:	9b03      	ldr	r3, [sp, #12]
    uint16_t letter_height = lv_font_get_line_height(font);
   1de9c:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dea0:	f013 0f02 	tst.w	r3, #2
   1dea4:	f647 4318 	movw	r3, #31768	; 0x7c18
   1dea8:	bf18      	it	ne
   1deaa:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
   1deac:	8913      	ldrh	r3, [r2, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1deae:	443b      	add	r3, r7
   1deb0:	9304      	str	r3, [sp, #16]
            size_res->y += line_space;
   1deb2:	eb07 030b 	add.w	r3, r7, fp
   1deb6:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
   1deb8:	9b02      	ldr	r3, [sp, #8]
   1deba:	eb03 0905 	add.w	r9, r3, r5
   1debe:	5d5b      	ldrb	r3, [r3, r5]
   1dec0:	b99b      	cbnz	r3, 1deea <_lv_txt_get_size+0x76>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   1dec2:	b155      	cbz	r5, 1deda <_lv_txt_get_size+0x66>
   1dec4:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   1dec8:	2b0a      	cmp	r3, #10
   1deca:	d001      	beq.n	1ded0 <_lv_txt_get_size+0x5c>
   1decc:	2b0d      	cmp	r3, #13
   1dece:	d104      	bne.n	1deda <_lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
   1ded0:	8862      	ldrh	r2, [r4, #2]
   1ded2:	eb07 030b 	add.w	r3, r7, fp
   1ded6:	4413      	add	r3, r2
   1ded8:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
   1deda:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1dede:	bb8b      	cbnz	r3, 1df44 <_lv_txt_get_size+0xd0>
        size_res->y = letter_height;
   1dee0:	f8a4 b002 	strh.w	fp, [r4, #2]
}
   1dee4:	b007      	add	sp, #28
   1dee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1deea:	9b03      	ldr	r3, [sp, #12]
   1deec:	9300      	str	r3, [sp, #0]
   1deee:	4642      	mov	r2, r8
   1def0:	4653      	mov	r3, sl
   1def2:	4631      	mov	r1, r6
   1def4:	4648      	mov	r0, r9
   1def6:	f7ff fed9 	bl	1dcac <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1defa:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1defe:	9a04      	ldr	r2, [sp, #16]
   1df00:	441a      	add	r2, r3
   1df02:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1df06:	4601      	mov	r1, r0
   1df08:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1df0a:	d30a      	bcc.n	1df22 <_lv_txt_get_size+0xae>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   1df0c:	4b0f      	ldr	r3, [pc, #60]	; (1df4c <_lv_txt_get_size+0xd8>)
   1df0e:	9310      	str	r3, [sp, #64]	; 0x40
   1df10:	490f      	ldr	r1, [pc, #60]	; (1df50 <_lv_txt_get_size+0xdc>)
   1df12:	4b10      	ldr	r3, [pc, #64]	; (1df54 <_lv_txt_get_size+0xe0>)
   1df14:	2271      	movs	r2, #113	; 0x71
   1df16:	2002      	movs	r0, #2
}
   1df18:	b007      	add	sp, #28
   1df1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   1df1e:	f7ff bb1b 	b.w	1d558 <_lv_log_add>
            size_res->y += line_space;
   1df22:	9a05      	ldr	r2, [sp, #20]
   1df24:	4413      	add	r3, r2
   1df26:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   1df28:	9b03      	ldr	r3, [sp, #12]
   1df2a:	9300      	str	r3, [sp, #0]
   1df2c:	4632      	mov	r2, r6
   1df2e:	4643      	mov	r3, r8
   1df30:	4648      	mov	r0, r9
   1df32:	f7ff fe69 	bl	1dc08 <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   1df36:	f9b4 3000 	ldrsh.w	r3, [r4]
   1df3a:	4283      	cmp	r3, r0
   1df3c:	bfb8      	it	lt
   1df3e:	4603      	movlt	r3, r0
   1df40:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
   1df42:	e7b9      	b.n	1deb8 <_lv_txt_get_size+0x44>
        size_res->y -= line_space;
   1df44:	1bdf      	subs	r7, r3, r7
   1df46:	8067      	strh	r7, [r4, #2]
   1df48:	e7cc      	b.n	1dee4 <_lv_txt_get_size+0x70>
   1df4a:	bf00      	nop
   1df4c:	00030955 	.word	0x00030955
   1df50:	0003091f 	.word	0x0003091f
   1df54:	00030995 	.word	0x00030995

0001df58 <get_glyph_dsc_id.isra.0.part.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   1df58:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if(letter == '\0') return 0;

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1df5a:	6804      	ldr	r4, [r0, #0]

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1df5c:	69a3      	ldr	r3, [r4, #24]
   1df5e:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   1df60:	b085      	sub	sp, #20
   1df62:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1df64:	d00b      	beq.n	1df7e <get_glyph_dsc_id.isra.0.part.0+0x26>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
   1df66:	8a67      	ldrh	r7, [r4, #18]
   1df68:	2300      	movs	r3, #0
   1df6a:	f3c7 0709 	ubfx	r7, r7, #0, #10
   1df6e:	f04f 0c14 	mov.w	ip, #20
   1df72:	b29a      	uxth	r2, r3
   1df74:	4297      	cmp	r7, r2
   1df76:	d805      	bhi.n	1df84 <get_glyph_dsc_id.isra.0.part.0+0x2c>
        fdsc->last_letter = letter;
        fdsc->last_glyph_id = glyph_id;
        return glyph_id;
    }

    fdsc->last_letter = letter;
   1df78:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   1df7a:	2000      	movs	r0, #0
   1df7c:	e012      	b.n	1dfa4 <get_glyph_dsc_id.isra.0.part.0+0x4c>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1df7e:	69e0      	ldr	r0, [r4, #28]
    return 0;

}
   1df80:	b005      	add	sp, #20
   1df82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1df84:	68a2      	ldr	r2, [r4, #8]
   1df86:	fb0c f603 	mul.w	r6, ip, r3
   1df8a:	1991      	adds	r1, r2, r6
   1df8c:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1df8e:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1df90:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1df92:	4282      	cmp	r2, r0
   1df94:	f103 0301 	add.w	r3, r3, #1
   1df98:	d8eb      	bhi.n	1df72 <get_glyph_dsc_id.isra.0.part.0+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   1df9a:	7c8b      	ldrb	r3, [r1, #18]
   1df9c:	b923      	cbnz	r3, 1dfa8 <get_glyph_dsc_id.isra.0.part.0+0x50>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   1df9e:	88c8      	ldrh	r0, [r1, #6]
   1dfa0:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   1dfa2:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   1dfa4:	61e0      	str	r0, [r4, #28]
    return 0;
   1dfa6:	e7eb      	b.n	1df80 <get_glyph_dsc_id.isra.0.part.0+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   1dfa8:	2b01      	cmp	r3, #1
   1dfaa:	d104      	bne.n	1dfb6 <get_glyph_dsc_id.isra.0.part.0+0x5e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   1dfac:	68cb      	ldr	r3, [r1, #12]
   1dfae:	5c98      	ldrb	r0, [r3, r2]
   1dfb0:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1dfb2:	4418      	add	r0, r3
   1dfb4:	e7f5      	b.n	1dfa2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   1dfb6:	2b02      	cmp	r3, #2
   1dfb8:	d113      	bne.n	1dfe2 <get_glyph_dsc_id.isra.0.part.0+0x8a>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1dfba:	4817      	ldr	r0, [pc, #92]	; (1e018 <get_glyph_dsc_id.isra.0.part.0+0xc0>)
            uint16_t key = rcp;
   1dfbc:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1dfc0:	8a0a      	ldrh	r2, [r1, #16]
   1dfc2:	9000      	str	r0, [sp, #0]
   1dfc4:	6889      	ldr	r1, [r1, #8]
   1dfc6:	f10d 000e 	add.w	r0, sp, #14
   1dfca:	f00c fc6b 	bl	2a8a4 <_lv_utils_bsearch>
            if(p) {
   1dfce:	2800      	cmp	r0, #0
   1dfd0:	d0e7      	beq.n	1dfa2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1dfd2:	68a3      	ldr	r3, [r4, #8]
   1dfd4:	441e      	add	r6, r3
   1dfd6:	68b3      	ldr	r3, [r6, #8]
   1dfd8:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   1dfda:	88f3      	ldrh	r3, [r6, #6]
   1dfdc:	eb03 0050 	add.w	r0, r3, r0, lsr #1
   1dfe0:	e7df      	b.n	1dfa2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   1dfe2:	2b03      	cmp	r3, #3
   1dfe4:	d115      	bne.n	1e012 <get_glyph_dsc_id.isra.0.part.0+0xba>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1dfe6:	4b0c      	ldr	r3, [pc, #48]	; (1e018 <get_glyph_dsc_id.isra.0.part.0+0xc0>)
            uint16_t key = rcp;
   1dfe8:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1dfec:	8a0a      	ldrh	r2, [r1, #16]
   1dfee:	9300      	str	r3, [sp, #0]
   1dff0:	6889      	ldr	r1, [r1, #8]
   1dff2:	2302      	movs	r3, #2
   1dff4:	f10d 000e 	add.w	r0, sp, #14
   1dff8:	f00c fc54 	bl	2a8a4 <_lv_utils_bsearch>
            if(p) {
   1dffc:	2800      	cmp	r0, #0
   1dffe:	d0d0      	beq.n	1dfa2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1e000:	68a3      	ldr	r3, [r4, #8]
   1e002:	441e      	add	r6, r3
   1e004:	68b3      	ldr	r3, [r6, #8]
   1e006:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   1e008:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1e00a:	68f3      	ldr	r3, [r6, #12]
   1e00c:	5c18      	ldrb	r0, [r3, r0]
   1e00e:	88f3      	ldrh	r3, [r6, #6]
   1e010:	e7cf      	b.n	1dfb2 <get_glyph_dsc_id.isra.0.part.0+0x5a>
        uint32_t glyph_id = 0;
   1e012:	2000      	movs	r0, #0
   1e014:	e7c5      	b.n	1dfa2 <get_glyph_dsc_id.isra.0.part.0+0x4a>
   1e016:	bf00      	nop
   1e018:	0002a92f 	.word	0x0002a92f

0001e01c <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
   1e01c:	2a09      	cmp	r2, #9
{
   1e01e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e022:	460c      	mov	r4, r1
   1e024:	4680      	mov	r8, r0
   1e026:	4611      	mov	r1, r2
   1e028:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
   1e02a:	d006      	beq.n	1e03a <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
   1e02c:	2a00      	cmp	r2, #0
   1e02e:	d135      	bne.n	1e09c <lv_font_get_glyph_dsc_fmt_txt+0x80>
    if(!gid) return false;
   1e030:	2600      	movs	r6, #0
}
   1e032:	4630      	mov	r0, r6
   1e034:	b004      	add	sp, #16
   1e036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
   1e03a:	2601      	movs	r6, #1
        unicode_letter = ' ';
   1e03c:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1e03e:	46c1      	mov	r9, r8
   1e040:	f859 7f10 	ldr.w	r7, [r9, #16]!
   1e044:	4648      	mov	r0, r9
   1e046:	f7ff ff87 	bl	1df58 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
   1e04a:	4605      	mov	r5, r0
   1e04c:	2800      	cmp	r0, #0
   1e04e:	d0ef      	beq.n	1e030 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
   1e050:	68fb      	ldr	r3, [r7, #12]
   1e052:	bb2b      	cbnz	r3, 1e0a0 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
   1e054:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1e056:	687b      	ldr	r3, [r7, #4]
   1e058:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1e05c:	8a3b      	ldrh	r3, [r7, #16]
   1e05e:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
   1e060:	8868      	ldrh	r0, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1e062:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
   1e064:	f3c0 120b 	ubfx	r2, r0, #4, #12
   1e068:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
   1e06a:	b106      	cbz	r6, 1e06e <lv_font_get_glyph_dsc_fmt_txt+0x52>
   1e06c:	0050      	lsls	r0, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
   1e06e:	3308      	adds	r3, #8
   1e070:	4403      	add	r3, r0
   1e072:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
   1e074:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   1e076:	796b      	ldrb	r3, [r5, #5]
   1e078:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
   1e07a:	792b      	ldrb	r3, [r5, #4]
   1e07c:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   1e07e:	f995 2006 	ldrsb.w	r2, [r5, #6]
   1e082:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
   1e084:	f995 2007 	ldrsb.w	r2, [r5, #7]
   1e088:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   1e08a:	7cfa      	ldrb	r2, [r7, #19]
   1e08c:	f3c2 0283 	ubfx	r2, r2, #2, #4
   1e090:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
   1e092:	2e00      	cmp	r6, #0
   1e094:	d060      	beq.n	1e158 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
   1e096:	005b      	lsls	r3, r3, #1
   1e098:	8063      	strh	r3, [r4, #2]
   1e09a:	e7ca      	b.n	1e032 <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
   1e09c:	2600      	movs	r6, #0
   1e09e:	e7ce      	b.n	1e03e <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
   1e0a0:	f1ba 0f00 	cmp.w	sl, #0
   1e0a4:	d0d6      	beq.n	1e054 <lv_font_get_glyph_dsc_fmt_txt+0x38>
   1e0a6:	4651      	mov	r1, sl
   1e0a8:	4648      	mov	r0, r9
   1e0aa:	f7ff ff55 	bl	1df58 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
   1e0ae:	2800      	cmp	r0, #0
   1e0b0:	d0d0      	beq.n	1e054 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
   1e0b2:	f8d8 3010 	ldr.w	r3, [r8, #16]
{
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
   1e0b6:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1e0ba:	7cdb      	ldrb	r3, [r3, #19]
   1e0bc:	065b      	lsls	r3, r3, #25
   1e0be:	d436      	bmi.n	1e12e <lv_font_get_glyph_dsc_fmt_txt+0x112>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
        if(kdsc->glyph_ids_size == 0) {
   1e0c0:	f898 300b 	ldrb.w	r3, [r8, #11]
   1e0c4:	f013 0303 	ands.w	r3, r3, #3
   1e0c8:	d119      	bne.n	1e0fe <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
   1e0ca:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1e0ce:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e0d2:	4b22      	ldr	r3, [pc, #136]	; (1e15c <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   1e0d4:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   1e0d6:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   1e0da:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1e0de:	2302      	movs	r3, #2
   1e0e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e0e4:	4649      	mov	r1, r9
   1e0e6:	a803      	add	r0, sp, #12
   1e0e8:	f00c fbdc 	bl	2a8a4 <_lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
   1e0ec:	2800      	cmp	r0, #0
   1e0ee:	d0b2      	beq.n	1e056 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   1e0f0:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   1e0f4:	0840      	lsrs	r0, r0, #1

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
                value = kdsc->values[ofs];
   1e0f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e0fa:	5618      	ldrsb	r0, [r3, r0]
   1e0fc:	e7ab      	b.n	1e056 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
   1e0fe:	2b01      	cmp	r3, #1
   1e100:	d1a8      	bne.n	1e054 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint16_t * g_ids = kdsc->glyph_ids;
   1e102:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1e106:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e10a:	4b15      	ldr	r3, [pc, #84]	; (1e160 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
   1e10c:	9300      	str	r3, [sp, #0]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   1e10e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   1e112:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1e114:	2304      	movs	r3, #4
   1e116:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e11a:	4649      	mov	r1, r9
   1e11c:	a803      	add	r0, sp, #12
   1e11e:	f00c fbc1 	bl	2a8a4 <_lv_utils_bsearch>
            if(kid_p) {
   1e122:	2800      	cmp	r0, #0
   1e124:	d097      	beq.n	1e056 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
   1e126:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   1e12a:	0900      	lsrs	r0, r0, #4
   1e12c:	e7e3      	b.n	1e0f6 <lv_font_get_glyph_dsc_fmt_txt+0xda>
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   1e12e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e132:	5d5b      	ldrb	r3, [r3, r5]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
   1e134:	2b00      	cmp	r3, #0
   1e136:	d08d      	beq.n	1e054 <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
   1e138:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e13c:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
   1e13e:	2900      	cmp	r1, #0
   1e140:	d088      	beq.n	1e054 <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
   1e142:	f8d8 2000 	ldr.w	r2, [r8]
   1e146:	f898 000d 	ldrb.w	r0, [r8, #13]
   1e14a:	3b01      	subs	r3, #1
   1e14c:	440a      	add	r2, r1
   1e14e:	fb00 2303 	mla	r3, r0, r3, r2
   1e152:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
   1e156:	e77e      	b.n	1e056 <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
   1e158:	2601      	movs	r6, #1
   1e15a:	e76a      	b.n	1e032 <lv_font_get_glyph_dsc_fmt_txt+0x16>
   1e15c:	0002a90b 	.word	0x0002a90b
   1e160:	0002a91d 	.word	0x0002a91d

0001e164 <_lv_font_clean_up_fmt_txt>:
{
   1e164:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
   1e166:	4c04      	ldr	r4, [pc, #16]	; (1e178 <_lv_font_clean_up_fmt_txt+0x14>)
   1e168:	6820      	ldr	r0, [r4, #0]
   1e16a:	b118      	cbz	r0, 1e174 <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
   1e16c:	f7ff fa44 	bl	1d5f8 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
   1e170:	2300      	movs	r3, #0
   1e172:	6023      	str	r3, [r4, #0]
}
   1e174:	bd10      	pop	{r4, pc}
   1e176:	bf00      	nop
   1e178:	20003f5c 	.word	0x20003f5c

0001e17c <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
   1e17c:	b570      	push	{r4, r5, r6, lr}
   1e17e:	4604      	mov	r4, r0
    if(th->base) {
   1e180:	6880      	ldr	r0, [r0, #8]
{
   1e182:	460d      	mov	r5, r1
   1e184:	4616      	mov	r6, r2
    if(th->base) {
   1e186:	b108      	cbz	r0, 1e18c <apply_theme+0x10>
        apply_theme(th->base, obj, name);
   1e188:	f7ff fff8 	bl	1e17c <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
   1e18c:	6863      	ldr	r3, [r4, #4]
   1e18e:	b123      	cbz	r3, 1e19a <apply_theme+0x1e>
        th->apply_xcb(obj, name);
   1e190:	4631      	mov	r1, r6
   1e192:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
   1e194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
   1e198:	4718      	bx	r3
    else if(th->apply_cb) {
   1e19a:	6823      	ldr	r3, [r4, #0]
   1e19c:	b133      	cbz	r3, 1e1ac <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
   1e19e:	4804      	ldr	r0, [pc, #16]	; (1e1b0 <apply_theme+0x34>)
   1e1a0:	4632      	mov	r2, r6
   1e1a2:	4629      	mov	r1, r5
   1e1a4:	6800      	ldr	r0, [r0, #0]
}
   1e1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
   1e1aa:	4718      	bx	r3
}
   1e1ac:	bd70      	pop	{r4, r5, r6, pc}
   1e1ae:	bf00      	nop
   1e1b0:	20004034 	.word	0x20004034

0001e1b4 <lv_theme_set_act>:
    act_theme = th;
   1e1b4:	4b01      	ldr	r3, [pc, #4]	; (1e1bc <lv_theme_set_act+0x8>)
   1e1b6:	6018      	str	r0, [r3, #0]
}
   1e1b8:	4770      	bx	lr
   1e1ba:	bf00      	nop
   1e1bc:	20004034 	.word	0x20004034

0001e1c0 <lv_theme_apply>:
{
   1e1c0:	b538      	push	{r3, r4, r5, lr}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
   1e1c2:	1e4b      	subs	r3, r1, #1
   1e1c4:	2b05      	cmp	r3, #5
{
   1e1c6:	4605      	mov	r5, r0
   1e1c8:	460c      	mov	r4, r1
    switch(name) {
   1e1ca:	d802      	bhi.n	1e1d2 <lv_theme_apply+0x12>
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1e1cc:	2100      	movs	r1, #0
   1e1ce:	f7fc fa3b 	bl	1a648 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
   1e1d2:	4b04      	ldr	r3, [pc, #16]	; (1e1e4 <lv_theme_apply+0x24>)
   1e1d4:	4622      	mov	r2, r4
   1e1d6:	6818      	ldr	r0, [r3, #0]
   1e1d8:	4629      	mov	r1, r5
}
   1e1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(act_theme, obj, name);
   1e1de:	f7ff bfcd 	b.w	1e17c <apply_theme>
   1e1e2:	bf00      	nop
   1e1e4:	20004034 	.word	0x20004034

0001e1e8 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
   1e1e8:	4b01      	ldr	r3, [pc, #4]	; (1e1f0 <lv_theme_get_font_normal+0x8>)
   1e1ea:	681b      	ldr	r3, [r3, #0]
}
   1e1ec:	6958      	ldr	r0, [r3, #20]
   1e1ee:	4770      	bx	lr
   1e1f0:	20004034 	.word	0x20004034

0001e1f4 <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
   1e1f4:	3a01      	subs	r2, #1
{
   1e1f6:	b570      	push	{r4, r5, r6, lr}
   1e1f8:	460c      	mov	r4, r1
   1e1fa:	2a05      	cmp	r2, #5
   1e1fc:	d80c      	bhi.n	1e218 <theme_apply+0x24>
   1e1fe:	e8df f002 	tbb	[pc, r2]
   1e202:	1203      	.short	0x1203
   1e204:	2d2d121a 	.word	0x2d2d121a
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   1e208:	2100      	movs	r1, #0
   1e20a:	4620      	mov	r0, r4
   1e20c:	f008 f9b6 	bl	2657c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
   1e210:	4b15      	ldr	r3, [pc, #84]	; (1e268 <theme_apply+0x74>)
   1e212:	6819      	ldr	r1, [r3, #0]
#if LV_USE_BTN
        case LV_THEME_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
            _lv_style_list_add_style(list, &styles->bg);
            _lv_style_list_add_style(list, &styles->btn);
            _lv_style_list_add_style(list, &styles->txt_underline);
   1e214:	f7fd f962 	bl	1b4dc <_lv_style_list_add_style>
        default:
            break;
    }


    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1e218:	22ff      	movs	r2, #255	; 0xff
   1e21a:	4620      	mov	r0, r4
   1e21c:	4611      	mov	r1, r2


}
   1e21e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1e222:	f7fc bcb7 	b.w	1ab94 <lv_obj_refresh_style>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   1e226:	2100      	movs	r1, #0
   1e228:	4620      	mov	r0, r4
   1e22a:	f008 f9a7 	bl	2657c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
   1e22e:	4b0e      	ldr	r3, [pc, #56]	; (1e268 <theme_apply+0x74>)
   1e230:	6819      	ldr	r1, [r3, #0]
   1e232:	3104      	adds	r1, #4
   1e234:	e7ee      	b.n	1e214 <theme_apply+0x20>
            _lv_style_list_add_style(list, &styles->bg);
   1e236:	4e0c      	ldr	r6, [pc, #48]	; (1e268 <theme_apply+0x74>)
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1e238:	2100      	movs	r1, #0
   1e23a:	4620      	mov	r0, r4
   1e23c:	f008 f99e 	bl	2657c <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
   1e240:	6831      	ldr	r1, [r6, #0]
   1e242:	3104      	adds	r1, #4
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1e244:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
   1e246:	f7fd f949 	bl	1b4dc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->btn);
   1e24a:	6831      	ldr	r1, [r6, #0]
   1e24c:	4628      	mov	r0, r5
   1e24e:	310c      	adds	r1, #12
   1e250:	f7fd f944 	bl	1b4dc <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->txt_underline);
   1e254:	6831      	ldr	r1, [r6, #0]
   1e256:	4628      	mov	r0, r5
   1e258:	3134      	adds	r1, #52	; 0x34
   1e25a:	e7db      	b.n	1e214 <theme_apply+0x20>
            list = lv_obj_get_style_list(obj, LV_IMG_PART_MAIN);
   1e25c:	2100      	movs	r1, #0
   1e25e:	4620      	mov	r0, r4
   1e260:	f008 f98c 	bl	2657c <lv_obj_get_style_list>
            break;
   1e264:	e7d8      	b.n	1e218 <theme_apply+0x24>
   1e266:	bf00      	nop
   1e268:	20004038 	.word	0x20004038

0001e26c <lv_theme_mono_init>:
{
   1e26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e270:	4680      	mov	r8, r0
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1e272:	2038      	movs	r0, #56	; 0x38
{
   1e274:	4689      	mov	r9, r1
   1e276:	4616      	mov	r6, r2
   1e278:	461f      	mov	r7, r3
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1e27a:	f7ff f995 	bl	1d5a8 <lv_mem_alloc>
   1e27e:	4bc6      	ldr	r3, [pc, #792]	; (1e598 <lv_theme_mono_init+0x32c>)
    theme.color_primary = color_primary;
   1e280:	4dc6      	ldr	r5, [pc, #792]	; (1e59c <lv_theme_mono_init+0x330>)
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1e282:	6018      	str	r0, [r3, #0]
    theme.font_normal = font_normal;
   1e284:	9b08      	ldr	r3, [sp, #32]
   1e286:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
   1e288:	9b09      	ldr	r3, [sp, #36]	; 0x24
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_mono_styles);
   1e28a:	4cc5      	ldr	r4, [pc, #788]	; (1e5a0 <lv_theme_mono_init+0x334>)
    theme.font_subtitle = font_subtitle;
   1e28c:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
   1e28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_mono_styles);
   1e290:	6020      	str	r0, [r4, #0]
    theme.flags = flags;
   1e292:	e9c5 3607 	strd	r3, r6, [r5, #28]
    theme.color_primary = color_primary;
   1e296:	f8a5 800c 	strh.w	r8, [r5, #12]
    theme.color_secondary = color_secondary;
   1e29a:	f8a5 900e 	strh.w	r9, [r5, #14]
    theme.font_small = font_small;
   1e29e:	612f      	str	r7, [r5, #16]
    style_init_reset(&styles->scr);
   1e2a0:	f00c fb65 	bl	2a96e <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1e2a4:	212c      	movs	r1, #44	; 0x2c
   1e2a6:	6820      	ldr	r0, [r4, #0]
   1e2a8:	22ff      	movs	r2, #255	; 0xff
   1e2aa:	f009 fa2d 	bl	27708 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, BG_COLOR);
   1e2ae:	7b6b      	ldrb	r3, [r5, #13]
   1e2b0:	6820      	ldr	r0, [r4, #0]
   1e2b2:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e2b6:	bf1a      	itte	ne
   1e2b8:	2100      	movne	r1, #0
   1e2ba:	460b      	movne	r3, r1
   1e2bc:	231f      	moveq	r3, #31
   1e2be:	f04f 0200 	mov.w	r2, #0
   1e2c2:	bf08      	it	eq
   1e2c4:	213f      	moveq	r1, #63	; 0x3f
   1e2c6:	f363 0204 	bfi	r2, r3, #0, #5
   1e2ca:	f361 124a 	bfi	r2, r1, #5, #6
   1e2ce:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e2d2:	2129      	movs	r1, #41	; 0x29
   1e2d4:	f009 f9d4 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1e2d8:	7b6b      	ldrb	r3, [r5, #13]
   1e2da:	6820      	ldr	r0, [r4, #0]
   1e2dc:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e2e0:	bf0c      	ite	eq
   1e2e2:	231f      	moveq	r3, #31
   1e2e4:	2300      	movne	r3, #0
   1e2e6:	2b00      	cmp	r3, #0
   1e2e8:	f040 83fa 	bne.w	1eae0 <lv_theme_mono_init+0x874>
   1e2ec:	213f      	movs	r1, #63	; 0x3f
   1e2ee:	231f      	movs	r3, #31
   1e2f0:	f04f 0200 	mov.w	r2, #0
   1e2f4:	f363 0204 	bfi	r2, r3, #0, #5
   1e2f8:	f361 124a 	bfi	r2, r1, #5, #6
   1e2fc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e300:	f248 0189 	movw	r1, #32905	; 0x8089
   1e304:	f009 f9bc 	bl	27680 <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1e308:	7b6b      	ldrb	r3, [r5, #13]
   1e30a:	6820      	ldr	r0, [r4, #0]
   1e30c:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e310:	bf0c      	ite	eq
   1e312:	231f      	moveq	r3, #31
   1e314:	2300      	movne	r3, #0
   1e316:	2b00      	cmp	r3, #0
   1e318:	f040 83e5 	bne.w	1eae6 <lv_theme_mono_init+0x87a>
   1e31c:	213f      	movs	r1, #63	; 0x3f
   1e31e:	231f      	movs	r3, #31
   1e320:	f04f 0200 	mov.w	r2, #0
   1e324:	f363 0204 	bfi	r2, r3, #0, #5
   1e328:	f361 124a 	bfi	r2, r1, #5, #6
   1e32c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1e330:	2179      	movs	r1, #121	; 0x79
   1e332:	f009 f9a5 	bl	27680 <_lv_style_set_color>
    style_init_reset(&styles->bg);
   1e336:	6820      	ldr	r0, [r4, #0]
   1e338:	3004      	adds	r0, #4
   1e33a:	f00c fb18 	bl	2a96e <style_init_reset>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   1e33e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1e340:	2201      	movs	r2, #1
   1e342:	2133      	movs	r1, #51	; 0x33
   1e344:	3004      	adds	r0, #4
   1e346:	f009 f957 	bl	275f8 <_lv_style_set_int>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, RADIUS);
   1e34a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1e34c:	2204      	movs	r2, #4
   1e34e:	4410      	add	r0, r2
   1e350:	2101      	movs	r1, #1
   1e352:	f009 f951 	bl	275f8 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   1e356:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1e358:	212c      	movs	r1, #44	; 0x2c
   1e35a:	22ff      	movs	r2, #255	; 0xff
   1e35c:	3004      	adds	r0, #4
   1e35e:	f009 f9d3 	bl	27708 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, BG_COLOR);
   1e362:	7b6b      	ldrb	r3, [r5, #13]
   1e364:	6820      	ldr	r0, [r4, #0]
   1e366:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e36a:	bf1a      	itte	ne
   1e36c:	2100      	movne	r1, #0
   1e36e:	460b      	movne	r3, r1
   1e370:	231f      	moveq	r3, #31
   1e372:	f04f 0200 	mov.w	r2, #0
   1e376:	bf08      	it	eq
   1e378:	213f      	moveq	r1, #63	; 0x3f
   1e37a:	f363 0204 	bfi	r2, r3, #0, #5
   1e37e:	f361 124a 	bfi	r2, r1, #5, #6
   1e382:	f363 22cf 	bfi	r2, r3, #11, #5
   1e386:	3004      	adds	r0, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e388:	2129      	movs	r1, #41	; 0x29
   1e38a:	f009 f979 	bl	27680 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   1e38e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1e390:	2202      	movs	r2, #2
   1e392:	2130      	movs	r1, #48	; 0x30
   1e394:	3004      	adds	r0, #4
   1e396:	f009 f92f 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_width(&styles->bg, LV_STATE_FOCUSED, BORDER_WIDTH * 2);
   1e39a:	6820      	ldr	r0, [r4, #0]
   1e39c:	2204      	movs	r2, #4
   1e39e:	4410      	add	r0, r2
   1e3a0:	f44f 710c 	mov.w	r1, #560	; 0x230
   1e3a4:	f009 f928 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_width(&styles->bg, LV_STATE_FOCUSED | LV_STATE_EDITED, BORDER_WIDTH * 3);
   1e3a8:	6820      	ldr	r0, [r4, #0]
   1e3aa:	2206      	movs	r2, #6
   1e3ac:	3004      	adds	r0, #4
   1e3ae:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   1e3b2:	f009 f921 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e3b6:	7b6b      	ldrb	r3, [r5, #13]
   1e3b8:	6820      	ldr	r0, [r4, #0]
   1e3ba:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e3be:	bf0c      	ite	eq
   1e3c0:	231f      	moveq	r3, #31
   1e3c2:	2300      	movne	r3, #0
   1e3c4:	3004      	adds	r0, #4
   1e3c6:	2b00      	cmp	r3, #0
   1e3c8:	f040 8390 	bne.w	1eaec <lv_theme_mono_init+0x880>
   1e3cc:	213f      	movs	r1, #63	; 0x3f
   1e3ce:	231f      	movs	r3, #31
   1e3d0:	f04f 0200 	mov.w	r2, #0
   1e3d4:	f363 0204 	bfi	r2, r3, #0, #5
   1e3d8:	f361 124a 	bfi	r2, r1, #5, #6
   1e3dc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1e3e0:	2139      	movs	r1, #57	; 0x39
   1e3e2:	f009 f94d 	bl	27680 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, LV_MATH_MAX(LV_DPI / 100, 1));
   1e3e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1e3e8:	2201      	movs	r2, #1
   1e3ea:	2190      	movs	r1, #144	; 0x90
   1e3ec:	3004      	adds	r0, #4
   1e3ee:	f009 f903 	bl	275f8 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->bg, LV_STATE_DEFAULT, LV_MATH_MAX(LV_DPI / 100, 1));
   1e3f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   1e3f4:	2201      	movs	r2, #1
   1e3f6:	3004      	adds	r0, #4
   1e3f8:	21c3      	movs	r1, #195	; 0xc3
   1e3fa:	f009 f8fd 	bl	275f8 <_lv_style_set_int>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e3fe:	7b6b      	ldrb	r3, [r5, #13]
   1e400:	6820      	ldr	r0, [r4, #0]
   1e402:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e406:	bf0c      	ite	eq
   1e408:	231f      	moveq	r3, #31
   1e40a:	2300      	movne	r3, #0
   1e40c:	3004      	adds	r0, #4
   1e40e:	2b00      	cmp	r3, #0
   1e410:	f040 836f 	bne.w	1eaf2 <lv_theme_mono_init+0x886>
   1e414:	213f      	movs	r1, #63	; 0x3f
   1e416:	231f      	movs	r3, #31
   1e418:	f04f 0200 	mov.w	r2, #0
   1e41c:	f363 0204 	bfi	r2, r3, #0, #5
   1e420:	f361 124a 	bfi	r2, r1, #5, #6
   1e424:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1e428:	2199      	movs	r1, #153	; 0x99
   1e42a:	f009 f929 	bl	27680 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e42e:	7b6b      	ldrb	r3, [r5, #13]
   1e430:	6820      	ldr	r0, [r4, #0]
   1e432:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e436:	bf0c      	ite	eq
   1e438:	231f      	moveq	r3, #31
   1e43a:	2300      	movne	r3, #0
   1e43c:	3004      	adds	r0, #4
   1e43e:	2b00      	cmp	r3, #0
   1e440:	f040 835a 	bne.w	1eaf8 <lv_theme_mono_init+0x88c>
   1e444:	213f      	movs	r1, #63	; 0x3f
   1e446:	231f      	movs	r3, #31
   1e448:	f04f 0200 	mov.w	r2, #0
   1e44c:	f363 0204 	bfi	r2, r3, #0, #5
   1e450:	f361 124a 	bfi	r2, r1, #5, #6
   1e454:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   1e458:	21c9      	movs	r1, #201	; 0xc9
   1e45a:	f009 f911 	bl	27680 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e45e:	7b6b      	ldrb	r3, [r5, #13]
   1e460:	6820      	ldr	r0, [r4, #0]
   1e462:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e466:	bf0c      	ite	eq
   1e468:	231f      	moveq	r3, #31
   1e46a:	2300      	movne	r3, #0
   1e46c:	3004      	adds	r0, #4
   1e46e:	2b00      	cmp	r3, #0
   1e470:	f040 8345 	bne.w	1eafe <lv_theme_mono_init+0x892>
   1e474:	213f      	movs	r1, #63	; 0x3f
   1e476:	231f      	movs	r3, #31
   1e478:	f04f 0200 	mov.w	r2, #0
   1e47c:	f363 0204 	bfi	r2, r3, #0, #5
   1e480:	f361 124a 	bfi	r2, r1, #5, #6
   1e484:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   1e488:	21ca      	movs	r1, #202	; 0xca
   1e48a:	f009 f8f9 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e48e:	7b6b      	ldrb	r3, [r5, #13]
   1e490:	6820      	ldr	r0, [r4, #0]
   1e492:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e496:	bf0c      	ite	eq
   1e498:	231f      	moveq	r3, #31
   1e49a:	2300      	movne	r3, #0
   1e49c:	3004      	adds	r0, #4
   1e49e:	2b00      	cmp	r3, #0
   1e4a0:	f040 8330 	bne.w	1eb04 <lv_theme_mono_init+0x898>
   1e4a4:	213f      	movs	r1, #63	; 0x3f
   1e4a6:	231f      	movs	r3, #31
   1e4a8:	f04f 0200 	mov.w	r2, #0
   1e4ac:	f363 0204 	bfi	r2, r3, #0, #5
   1e4b0:	f361 124a 	bfi	r2, r1, #5, #6
   1e4b4:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e4b8:	f248 0189 	movw	r1, #32905	; 0x8089
   1e4bc:	f009 f8e0 	bl	27680 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e4c0:	7b6b      	ldrb	r3, [r5, #13]
   1e4c2:	6820      	ldr	r0, [r4, #0]
   1e4c4:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e4c8:	bf0c      	ite	eq
   1e4ca:	231f      	moveq	r3, #31
   1e4cc:	2300      	movne	r3, #0
   1e4ce:	3004      	adds	r0, #4
   1e4d0:	2b00      	cmp	r3, #0
   1e4d2:	f040 831a 	bne.w	1eb0a <lv_theme_mono_init+0x89e>
   1e4d6:	213f      	movs	r1, #63	; 0x3f
   1e4d8:	231f      	movs	r3, #31
   1e4da:	f04f 0200 	mov.w	r2, #0
   1e4de:	f363 0204 	bfi	r2, r3, #0, #5
   1e4e2:	f361 124a 	bfi	r2, r1, #5, #6
   1e4e6:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1e4ea:	2179      	movs	r1, #121	; 0x79
   1e4ec:	f009 f8c8 	bl	27680 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e4f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1e4f2:	220c      	movs	r2, #12
   1e4f4:	2112      	movs	r1, #18
   1e4f6:	3004      	adds	r0, #4
   1e4f8:	f009 f87e 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e4fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1e4fe:	220c      	movs	r2, #12
   1e500:	2113      	movs	r1, #19
   1e502:	3004      	adds	r0, #4
   1e504:	f009 f878 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e508:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1e50a:	220c      	movs	r2, #12
   1e50c:	2110      	movs	r1, #16
   1e50e:	3004      	adds	r0, #4
   1e510:	f009 f872 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e514:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1e516:	220c      	movs	r2, #12
   1e518:	2111      	movs	r1, #17
   1e51a:	3004      	adds	r0, #4
   1e51c:	f009 f86c 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e520:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1e522:	220c      	movs	r2, #12
   1e524:	2114      	movs	r1, #20
   1e526:	3004      	adds	r0, #4
   1e528:	f009 f866 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->clip_corner);
   1e52c:	6820      	ldr	r0, [r4, #0]
   1e52e:	3008      	adds	r0, #8
   1e530:	f00c fa1d 	bl	2a96e <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, LV_STATE_DEFAULT, true);
   1e534:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1e536:	2201      	movs	r2, #1
   1e538:	2102      	movs	r1, #2
   1e53a:	3008      	adds	r0, #8
   1e53c:	f009 f85c 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->btn);
   1e540:	6820      	ldr	r0, [r4, #0]
   1e542:	300c      	adds	r0, #12
   1e544:	f00c fa13 	bl	2a96e <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, RADIUS);
   1e548:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1e54a:	2204      	movs	r2, #4
   1e54c:	2101      	movs	r1, #1
   1e54e:	300c      	adds	r0, #12
   1e550:	f009 f852 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   1e554:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1e556:	2202      	movs	r2, #2
   1e558:	2130      	movs	r1, #48	; 0x30
   1e55a:	300c      	adds	r0, #12
   1e55c:	f009 f84c 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED, BORDER_WIDTH + 1);
   1e560:	6820      	ldr	r0, [r4, #0]
   1e562:	2203      	movs	r2, #3
   1e564:	f44f 710c 	mov.w	r1, #560	; 0x230
   1e568:	300c      	adds	r0, #12
   1e56a:	f009 f845 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED | LV_STATE_EDITED, BORDER_WIDTH + 2);
   1e56e:	6820      	ldr	r0, [r4, #0]
   1e570:	2204      	movs	r2, #4
   1e572:	300c      	adds	r0, #12
   1e574:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   1e578:	f009 f83e 	bl	275f8 <_lv_style_set_int>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e57c:	7b6b      	ldrb	r3, [r5, #13]
   1e57e:	6820      	ldr	r0, [r4, #0]
   1e580:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e584:	bf0c      	ite	eq
   1e586:	231f      	moveq	r3, #31
   1e588:	2300      	movne	r3, #0
   1e58a:	300c      	adds	r0, #12
   1e58c:	2b00      	cmp	r3, #0
   1e58e:	f040 82bf 	bne.w	1eb10 <lv_theme_mono_init+0x8a4>
   1e592:	213f      	movs	r1, #63	; 0x3f
   1e594:	231f      	movs	r3, #31
   1e596:	e005      	b.n	1e5a4 <lv_theme_mono_init+0x338>
   1e598:	20004018 	.word	0x20004018
   1e59c:	2000403c 	.word	0x2000403c
   1e5a0:	20004038 	.word	0x20004038
   1e5a4:	f04f 0200 	mov.w	r2, #0
   1e5a8:	f363 0204 	bfi	r2, r3, #0, #5
   1e5ac:	f361 124a 	bfi	r2, r1, #5, #6
   1e5b0:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1e5b4:	2139      	movs	r1, #57	; 0x39
   1e5b6:	f009 f863 	bl	27680 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, BG_COLOR);
   1e5ba:	7b6b      	ldrb	r3, [r5, #13]
   1e5bc:	6820      	ldr	r0, [r4, #0]
   1e5be:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e5c2:	bf1a      	itte	ne
   1e5c4:	2100      	movne	r1, #0
   1e5c6:	460b      	movne	r3, r1
   1e5c8:	231f      	moveq	r3, #31
   1e5ca:	f04f 0200 	mov.w	r2, #0
   1e5ce:	bf08      	it	eq
   1e5d0:	213f      	moveq	r1, #63	; 0x3f
   1e5d2:	f363 0204 	bfi	r2, r3, #0, #5
   1e5d6:	f361 124a 	bfi	r2, r1, #5, #6
   1e5da:	300c      	adds	r0, #12
   1e5dc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e5e0:	2129      	movs	r1, #41	; 0x29
   1e5e2:	f009 f84d 	bl	27680 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, FG_COLOR);
   1e5e6:	7b6b      	ldrb	r3, [r5, #13]
   1e5e8:	6820      	ldr	r0, [r4, #0]
   1e5ea:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e5ee:	bf0c      	ite	eq
   1e5f0:	231f      	moveq	r3, #31
   1e5f2:	2300      	movne	r3, #0
   1e5f4:	300c      	adds	r0, #12
   1e5f6:	2b00      	cmp	r3, #0
   1e5f8:	f000 828d 	beq.w	1eb16 <lv_theme_mono_init+0x8aa>
   1e5fc:	2100      	movs	r1, #0
   1e5fe:	460b      	mov	r3, r1
   1e600:	f04f 0200 	mov.w	r2, #0
   1e604:	f363 0204 	bfi	r2, r3, #0, #5
   1e608:	f361 124a 	bfi	r2, r1, #5, #6
   1e60c:	f363 22cf 	bfi	r2, r3, #11, #5
   1e610:	f241 0129 	movw	r1, #4137	; 0x1029
   1e614:	f009 f834 	bl	27680 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, FG_COLOR);
   1e618:	7b6b      	ldrb	r3, [r5, #13]
   1e61a:	6820      	ldr	r0, [r4, #0]
   1e61c:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e620:	bf0c      	ite	eq
   1e622:	231f      	moveq	r3, #31
   1e624:	2300      	movne	r3, #0
   1e626:	300c      	adds	r0, #12
   1e628:	2b00      	cmp	r3, #0
   1e62a:	f000 8277 	beq.w	1eb1c <lv_theme_mono_init+0x8b0>
   1e62e:	2100      	movs	r1, #0
   1e630:	460b      	mov	r3, r1
   1e632:	f04f 0200 	mov.w	r2, #0
   1e636:	f363 0204 	bfi	r2, r3, #0, #5
   1e63a:	f361 124a 	bfi	r2, r1, #5, #6
   1e63e:	f363 22cf 	bfi	r2, r3, #11, #5
   1e642:	f240 1129 	movw	r1, #297	; 0x129
   1e646:	f009 f81b 	bl	27680 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, BG_COLOR);
   1e64a:	7b6b      	ldrb	r3, [r5, #13]
   1e64c:	6820      	ldr	r0, [r4, #0]
   1e64e:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e652:	bf1a      	itte	ne
   1e654:	2100      	movne	r1, #0
   1e656:	460b      	movne	r3, r1
   1e658:	231f      	moveq	r3, #31
   1e65a:	f04f 0200 	mov.w	r2, #0
   1e65e:	bf08      	it	eq
   1e660:	213f      	moveq	r1, #63	; 0x3f
   1e662:	f363 0204 	bfi	r2, r3, #0, #5
   1e666:	f361 124a 	bfi	r2, r1, #5, #6
   1e66a:	300c      	adds	r0, #12
   1e66c:	f363 22cf 	bfi	r2, r3, #11, #5
   1e670:	f241 1129 	movw	r1, #4393	; 0x1129
   1e674:	f009 f804 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e678:	7b6b      	ldrb	r3, [r5, #13]
   1e67a:	6820      	ldr	r0, [r4, #0]
   1e67c:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e680:	bf0c      	ite	eq
   1e682:	231f      	moveq	r3, #31
   1e684:	2300      	movne	r3, #0
   1e686:	300c      	adds	r0, #12
   1e688:	2b00      	cmp	r3, #0
   1e68a:	f040 824a 	bne.w	1eb22 <lv_theme_mono_init+0x8b6>
   1e68e:	213f      	movs	r1, #63	; 0x3f
   1e690:	231f      	movs	r3, #31
   1e692:	f04f 0200 	mov.w	r2, #0
   1e696:	f363 0204 	bfi	r2, r3, #0, #5
   1e69a:	f361 124a 	bfi	r2, r1, #5, #6
   1e69e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e6a2:	f248 0189 	movw	r1, #32905	; 0x8089
   1e6a6:	f008 ffeb 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1e6aa:	7b6b      	ldrb	r3, [r5, #13]
   1e6ac:	6820      	ldr	r0, [r4, #0]
   1e6ae:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e6b2:	bf1a      	itte	ne
   1e6b4:	2100      	movne	r1, #0
   1e6b6:	460b      	movne	r3, r1
   1e6b8:	231f      	moveq	r3, #31
   1e6ba:	f04f 0200 	mov.w	r2, #0
   1e6be:	bf08      	it	eq
   1e6c0:	213f      	moveq	r1, #63	; 0x3f
   1e6c2:	f363 0204 	bfi	r2, r3, #0, #5
   1e6c6:	f361 124a 	bfi	r2, r1, #5, #6
   1e6ca:	f363 22cf 	bfi	r2, r3, #11, #5
   1e6ce:	f249 0189 	movw	r1, #37001	; 0x9089
   1e6d2:	300c      	adds	r0, #12
   1e6d4:	f008 ffd4 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   1e6d8:	7b6b      	ldrb	r3, [r5, #13]
   1e6da:	6820      	ldr	r0, [r4, #0]
   1e6dc:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e6e0:	bf1a      	itte	ne
   1e6e2:	2100      	movne	r1, #0
   1e6e4:	460b      	movne	r3, r1
   1e6e6:	231f      	moveq	r3, #31
   1e6e8:	f04f 0200 	mov.w	r2, #0
   1e6ec:	bf08      	it	eq
   1e6ee:	213f      	moveq	r1, #63	; 0x3f
   1e6f0:	f363 0204 	bfi	r2, r3, #0, #5
   1e6f4:	f361 124a 	bfi	r2, r1, #5, #6
   1e6f8:	300c      	adds	r0, #12
   1e6fa:	f363 22cf 	bfi	r2, r3, #11, #5
   1e6fe:	f248 1189 	movw	r1, #33161	; 0x8189
   1e702:	f008 ffbd 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1e706:	7b6b      	ldrb	r3, [r5, #13]
   1e708:	6820      	ldr	r0, [r4, #0]
   1e70a:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e70e:	bf0c      	ite	eq
   1e710:	231f      	moveq	r3, #31
   1e712:	2300      	movne	r3, #0
   1e714:	300c      	adds	r0, #12
   1e716:	2b00      	cmp	r3, #0
   1e718:	f040 8206 	bne.w	1eb28 <lv_theme_mono_init+0x8bc>
   1e71c:	213f      	movs	r1, #63	; 0x3f
   1e71e:	231f      	movs	r3, #31
   1e720:	f04f 0200 	mov.w	r2, #0
   1e724:	f363 0204 	bfi	r2, r3, #0, #5
   1e728:	f361 124a 	bfi	r2, r1, #5, #6
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e72c:	4d9e      	ldr	r5, [pc, #632]	; (1e9a8 <lv_theme_mono_init+0x73c>)
   1e72e:	4c9f      	ldr	r4, [pc, #636]	; (1e9ac <lv_theme_mono_init+0x740>)
   1e730:	f363 22cf 	bfi	r2, r3, #11, #5
   1e734:	f249 1189 	movw	r1, #37257	; 0x9189
   1e738:	f008 ffa2 	bl	27680 <_lv_style_set_color>
   1e73c:	7b6b      	ldrb	r3, [r5, #13]
   1e73e:	6820      	ldr	r0, [r4, #0]
   1e740:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e744:	bf0c      	ite	eq
   1e746:	231f      	moveq	r3, #31
   1e748:	2300      	movne	r3, #0
   1e74a:	300c      	adds	r0, #12
   1e74c:	2b00      	cmp	r3, #0
   1e74e:	f040 81ee 	bne.w	1eb2e <lv_theme_mono_init+0x8c2>
   1e752:	213f      	movs	r1, #63	; 0x3f
   1e754:	231f      	movs	r3, #31
   1e756:	f04f 0200 	mov.w	r2, #0
   1e75a:	f363 0204 	bfi	r2, r3, #0, #5
   1e75e:	f361 124a 	bfi	r2, r1, #5, #6
   1e762:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1e766:	2179      	movs	r1, #121	; 0x79
   1e768:	f008 ff8a 	bl	27680 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1e76c:	7b6b      	ldrb	r3, [r5, #13]
   1e76e:	6820      	ldr	r0, [r4, #0]
   1e770:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e774:	bf1a      	itte	ne
   1e776:	2100      	movne	r1, #0
   1e778:	460b      	movne	r3, r1
   1e77a:	231f      	moveq	r3, #31
   1e77c:	f04f 0200 	mov.w	r2, #0
   1e780:	bf08      	it	eq
   1e782:	213f      	moveq	r1, #63	; 0x3f
   1e784:	f363 0204 	bfi	r2, r3, #0, #5
   1e788:	f361 124a 	bfi	r2, r1, #5, #6
   1e78c:	f363 22cf 	bfi	r2, r3, #11, #5
   1e790:	f241 0179 	movw	r1, #4217	; 0x1079
   1e794:	300c      	adds	r0, #12
   1e796:	f008 ff73 	bl	27680 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   1e79a:	7b6b      	ldrb	r3, [r5, #13]
   1e79c:	6820      	ldr	r0, [r4, #0]
   1e79e:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e7a2:	bf1a      	itte	ne
   1e7a4:	2100      	movne	r1, #0
   1e7a6:	460b      	movne	r3, r1
   1e7a8:	231f      	moveq	r3, #31
   1e7aa:	f04f 0200 	mov.w	r2, #0
   1e7ae:	bf08      	it	eq
   1e7b0:	213f      	moveq	r1, #63	; 0x3f
   1e7b2:	f363 0204 	bfi	r2, r3, #0, #5
   1e7b6:	f361 124a 	bfi	r2, r1, #5, #6
   1e7ba:	300c      	adds	r0, #12
   1e7bc:	f363 22cf 	bfi	r2, r3, #11, #5
   1e7c0:	f240 1179 	movw	r1, #377	; 0x179
   1e7c4:	f008 ff5c 	bl	27680 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1e7c8:	7b6b      	ldrb	r3, [r5, #13]
   1e7ca:	6820      	ldr	r0, [r4, #0]
   1e7cc:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e7d0:	bf0c      	ite	eq
   1e7d2:	231f      	moveq	r3, #31
   1e7d4:	2300      	movne	r3, #0
   1e7d6:	300c      	adds	r0, #12
   1e7d8:	2b00      	cmp	r3, #0
   1e7da:	f040 81ab 	bne.w	1eb34 <lv_theme_mono_init+0x8c8>
   1e7de:	213f      	movs	r1, #63	; 0x3f
   1e7e0:	231f      	movs	r3, #31
   1e7e2:	f04f 0200 	mov.w	r2, #0
   1e7e6:	f363 0204 	bfi	r2, r3, #0, #5
   1e7ea:	f361 124a 	bfi	r2, r1, #5, #6
   1e7ee:	f363 22cf 	bfi	r2, r3, #11, #5
   1e7f2:	f241 1179 	movw	r1, #4473	; 0x1179
   1e7f6:	f008 ff43 	bl	27680 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e7fa:	7b6b      	ldrb	r3, [r5, #13]
   1e7fc:	6820      	ldr	r0, [r4, #0]
   1e7fe:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e802:	bf0c      	ite	eq
   1e804:	231f      	moveq	r3, #31
   1e806:	2300      	movne	r3, #0
   1e808:	300c      	adds	r0, #12
   1e80a:	2b00      	cmp	r3, #0
   1e80c:	f040 8195 	bne.w	1eb3a <lv_theme_mono_init+0x8ce>
   1e810:	213f      	movs	r1, #63	; 0x3f
   1e812:	231f      	movs	r3, #31
   1e814:	f04f 0200 	mov.w	r2, #0
   1e818:	f363 0204 	bfi	r2, r3, #0, #5
   1e81c:	f361 124a 	bfi	r2, r1, #5, #6
   1e820:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1e824:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1e828:	f008 ff2a 	bl	27680 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1e82c:	7b6b      	ldrb	r3, [r5, #13]
   1e82e:	6820      	ldr	r0, [r4, #0]
   1e830:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e834:	bf1a      	itte	ne
   1e836:	2100      	movne	r1, #0
   1e838:	460b      	movne	r3, r1
   1e83a:	231f      	moveq	r3, #31
   1e83c:	f04f 0200 	mov.w	r2, #0
   1e840:	bf08      	it	eq
   1e842:	213f      	moveq	r1, #63	; 0x3f
   1e844:	f363 0204 	bfi	r2, r3, #0, #5
   1e848:	f361 124a 	bfi	r2, r1, #5, #6
   1e84c:	f363 22cf 	bfi	r2, r3, #11, #5
   1e850:	f249 01a9 	movw	r1, #37033	; 0x90a9
   1e854:	300c      	adds	r0, #12
   1e856:	f008 ff13 	bl	27680 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   1e85a:	7b6b      	ldrb	r3, [r5, #13]
   1e85c:	6820      	ldr	r0, [r4, #0]
   1e85e:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e862:	bf1a      	itte	ne
   1e864:	2100      	movne	r1, #0
   1e866:	460b      	movne	r3, r1
   1e868:	231f      	moveq	r3, #31
   1e86a:	f04f 0200 	mov.w	r2, #0
   1e86e:	bf08      	it	eq
   1e870:	213f      	moveq	r1, #63	; 0x3f
   1e872:	f363 0204 	bfi	r2, r3, #0, #5
   1e876:	f361 124a 	bfi	r2, r1, #5, #6
   1e87a:	300c      	adds	r0, #12
   1e87c:	f363 22cf 	bfi	r2, r3, #11, #5
   1e880:	f248 11a9 	movw	r1, #33193	; 0x81a9
   1e884:	f008 fefc 	bl	27680 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1e888:	7b6b      	ldrb	r3, [r5, #13]
   1e88a:	6820      	ldr	r0, [r4, #0]
   1e88c:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e890:	bf0c      	ite	eq
   1e892:	231f      	moveq	r3, #31
   1e894:	2300      	movne	r3, #0
   1e896:	300c      	adds	r0, #12
   1e898:	2b00      	cmp	r3, #0
   1e89a:	f040 8151 	bne.w	1eb40 <lv_theme_mono_init+0x8d4>
   1e89e:	213f      	movs	r1, #63	; 0x3f
   1e8a0:	231f      	movs	r3, #31
   1e8a2:	f04f 0200 	mov.w	r2, #0
   1e8a6:	f363 0204 	bfi	r2, r3, #0, #5
   1e8aa:	f361 124a 	bfi	r2, r1, #5, #6
   1e8ae:	f363 22cf 	bfi	r2, r3, #11, #5
   1e8b2:	f249 11a9 	movw	r1, #37289	; 0x91a9
   1e8b6:	f008 fee3 	bl	27680 <_lv_style_set_color>
    style_init_reset(&styles->round);
   1e8ba:	6820      	ldr	r0, [r4, #0]
   1e8bc:	3010      	adds	r0, #16
   1e8be:	f00c f856 	bl	2a96e <style_init_reset>
    lv_style_set_radius(&styles->round, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1e8c2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1e8c4:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1e8c8:	2101      	movs	r1, #1
   1e8ca:	3010      	adds	r0, #16
   1e8cc:	f008 fe94 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->no_radius);
   1e8d0:	6820      	ldr	r0, [r4, #0]
   1e8d2:	3014      	adds	r0, #20
   1e8d4:	f00c f84b 	bl	2a96e <style_init_reset>
    lv_style_set_radius(&styles->no_radius, LV_STATE_DEFAULT, 0);
   1e8d8:	6820      	ldr	r0, [r4, #0]
   1e8da:	2200      	movs	r2, #0
   1e8dc:	2101      	movs	r1, #1
   1e8de:	3014      	adds	r0, #20
   1e8e0:	f008 fe8a 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->border_none);
   1e8e4:	6820      	ldr	r0, [r4, #0]
   1e8e6:	301c      	adds	r0, #28
   1e8e8:	f00c f841 	bl	2a96e <style_init_reset>
    lv_style_set_border_width(&styles->border_none, LV_STATE_DEFAULT, 0);
   1e8ec:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1e8ee:	2200      	movs	r2, #0
   1e8f0:	2130      	movs	r1, #48	; 0x30
   1e8f2:	301c      	adds	r0, #28
   1e8f4:	f008 fe80 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->fg_color);
   1e8f8:	6820      	ldr	r0, [r4, #0]
   1e8fa:	3018      	adds	r0, #24
   1e8fc:	f00c f837 	bl	2a96e <style_init_reset>
    lv_style_set_bg_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1e900:	7b6b      	ldrb	r3, [r5, #13]
   1e902:	6820      	ldr	r0, [r4, #0]
   1e904:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e908:	bf0c      	ite	eq
   1e90a:	231f      	moveq	r3, #31
   1e90c:	2300      	movne	r3, #0
   1e90e:	3018      	adds	r0, #24
   1e910:	2b00      	cmp	r3, #0
   1e912:	f040 8118 	bne.w	1eb46 <lv_theme_mono_init+0x8da>
   1e916:	213f      	movs	r1, #63	; 0x3f
   1e918:	231f      	movs	r3, #31
   1e91a:	f04f 0200 	mov.w	r2, #0
   1e91e:	f363 0204 	bfi	r2, r3, #0, #5
   1e922:	f361 124a 	bfi	r2, r1, #5, #6
   1e926:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e92a:	2129      	movs	r1, #41	; 0x29
   1e92c:	f008 fea8 	bl	27680 <_lv_style_set_color>
    lv_style_set_text_color(&styles->fg_color, LV_STATE_DEFAULT, BG_COLOR);
   1e930:	7b6b      	ldrb	r3, [r5, #13]
   1e932:	6820      	ldr	r0, [r4, #0]
   1e934:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e938:	bf1a      	itte	ne
   1e93a:	2100      	movne	r1, #0
   1e93c:	460b      	movne	r3, r1
   1e93e:	231f      	moveq	r3, #31
   1e940:	f04f 0200 	mov.w	r2, #0
   1e944:	bf08      	it	eq
   1e946:	213f      	moveq	r1, #63	; 0x3f
   1e948:	f363 0204 	bfi	r2, r3, #0, #5
   1e94c:	f361 124a 	bfi	r2, r1, #5, #6
   1e950:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e954:	f248 0189 	movw	r1, #32905	; 0x8089
   1e958:	3018      	adds	r0, #24
   1e95a:	f008 fe91 	bl	27680 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->fg_color, LV_STATE_DEFAULT, BG_COLOR);
   1e95e:	7b6b      	ldrb	r3, [r5, #13]
   1e960:	6820      	ldr	r0, [r4, #0]
   1e962:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e966:	bf1a      	itte	ne
   1e968:	2100      	movne	r1, #0
   1e96a:	460b      	movne	r3, r1
   1e96c:	231f      	moveq	r3, #31
   1e96e:	f04f 0200 	mov.w	r2, #0
   1e972:	bf08      	it	eq
   1e974:	213f      	moveq	r1, #63	; 0x3f
   1e976:	f363 0204 	bfi	r2, r3, #0, #5
   1e97a:	f361 124a 	bfi	r2, r1, #5, #6
   1e97e:	3018      	adds	r0, #24
   1e980:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1e984:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1e988:	f008 fe7a 	bl	27680 <_lv_style_set_color>
    lv_style_set_line_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1e98c:	7b6b      	ldrb	r3, [r5, #13]
   1e98e:	6820      	ldr	r0, [r4, #0]
   1e990:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e994:	bf0c      	ite	eq
   1e996:	231f      	moveq	r3, #31
   1e998:	2300      	movne	r3, #0
   1e99a:	3018      	adds	r0, #24
   1e99c:	2b00      	cmp	r3, #0
   1e99e:	f040 80d5 	bne.w	1eb4c <lv_theme_mono_init+0x8e0>
   1e9a2:	213f      	movs	r1, #63	; 0x3f
   1e9a4:	231f      	movs	r3, #31
   1e9a6:	e003      	b.n	1e9b0 <lv_theme_mono_init+0x744>
   1e9a8:	2000403c 	.word	0x2000403c
   1e9ac:	20004038 	.word	0x20004038
   1e9b0:	f04f 0200 	mov.w	r2, #0
   1e9b4:	f363 0204 	bfi	r2, r3, #0, #5
   1e9b8:	f361 124a 	bfi	r2, r1, #5, #6
   1e9bc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1e9c0:	2199      	movs	r1, #153	; 0x99
   1e9c2:	f008 fe5d 	bl	27680 <_lv_style_set_color>
    style_init_reset(&styles->big_line_space);
   1e9c6:	6820      	ldr	r0, [r4, #0]
   1e9c8:	3020      	adds	r0, #32
   1e9ca:	f00b ffd0 	bl	2a96e <style_init_reset>
    lv_style_set_text_line_space(&styles->big_line_space, LV_STATE_DEFAULT, LV_DPI / 10);
   1e9ce:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1e9d0:	220c      	movs	r2, #12
   1e9d2:	f248 0181 	movw	r1, #32897	; 0x8081
   1e9d6:	3020      	adds	r0, #32
   1e9d8:	f008 fe0e 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->pad_none);
   1e9dc:	6820      	ldr	r0, [r4, #0]
   1e9de:	3024      	adds	r0, #36	; 0x24
   1e9e0:	f00b ffc5 	bl	2a96e <style_init_reset>
    lv_style_set_pad_left(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e9e4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1e9e6:	2200      	movs	r2, #0
   1e9e8:	2112      	movs	r1, #18
   1e9ea:	3024      	adds	r0, #36	; 0x24
   1e9ec:	f008 fe04 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e9f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1e9f2:	2200      	movs	r2, #0
   1e9f4:	2113      	movs	r1, #19
   1e9f6:	3024      	adds	r0, #36	; 0x24
   1e9f8:	f008 fdfe 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e9fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1e9fe:	2200      	movs	r2, #0
   1ea00:	2110      	movs	r1, #16
   1ea02:	3024      	adds	r0, #36	; 0x24
   1ea04:	f008 fdf8 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1ea08:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ea0a:	2200      	movs	r2, #0
   1ea0c:	2111      	movs	r1, #17
   1ea0e:	3024      	adds	r0, #36	; 0x24
   1ea10:	f008 fdf2 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1ea14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1ea16:	2200      	movs	r2, #0
   1ea18:	2114      	movs	r1, #20
   1ea1a:	3024      	adds	r0, #36	; 0x24
   1ea1c:	f008 fdec 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->pad_normal);
   1ea20:	6820      	ldr	r0, [r4, #0]
   1ea22:	3028      	adds	r0, #40	; 0x28
   1ea24:	f00b ffa3 	bl	2a96e <style_init_reset>
    lv_style_set_pad_left(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1ea28:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ea2a:	220c      	movs	r2, #12
   1ea2c:	2112      	movs	r1, #18
   1ea2e:	3028      	adds	r0, #40	; 0x28
   1ea30:	f008 fde2 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1ea34:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ea36:	220c      	movs	r2, #12
   1ea38:	2113      	movs	r1, #19
   1ea3a:	3028      	adds	r0, #40	; 0x28
   1ea3c:	f008 fddc 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1ea40:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ea42:	220c      	movs	r2, #12
   1ea44:	2110      	movs	r1, #16
   1ea46:	3028      	adds	r0, #40	; 0x28
   1ea48:	f008 fdd6 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1ea4c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ea4e:	220c      	movs	r2, #12
   1ea50:	2111      	movs	r1, #17
   1ea52:	3028      	adds	r0, #40	; 0x28
   1ea54:	f008 fdd0 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1ea58:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1ea5a:	220c      	movs	r2, #12
   1ea5c:	2114      	movs	r1, #20
   1ea5e:	3028      	adds	r0, #40	; 0x28
   1ea60:	f008 fdca 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->pad_small);
   1ea64:	6820      	ldr	r0, [r4, #0]
   1ea66:	302c      	adds	r0, #44	; 0x2c
   1ea68:	f00b ff81 	bl	2a96e <style_init_reset>
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea6c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ea6e:	2206      	movs	r2, #6
   1ea70:	2112      	movs	r1, #18
   1ea72:	302c      	adds	r0, #44	; 0x2c
   1ea74:	f008 fdc0 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea78:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ea7a:	2206      	movs	r2, #6
   1ea7c:	2113      	movs	r1, #19
   1ea7e:	302c      	adds	r0, #44	; 0x2c
   1ea80:	f008 fdba 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea84:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ea86:	2206      	movs	r2, #6
   1ea88:	2110      	movs	r1, #16
   1ea8a:	302c      	adds	r0, #44	; 0x2c
   1ea8c:	f008 fdb4 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea90:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ea92:	2206      	movs	r2, #6
   1ea94:	2111      	movs	r1, #17
   1ea96:	302c      	adds	r0, #44	; 0x2c
   1ea98:	f008 fdae 	bl	275f8 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea9c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1ea9e:	2206      	movs	r2, #6
   1eaa0:	2114      	movs	r1, #20
   1eaa2:	302c      	adds	r0, #44	; 0x2c
   1eaa4:	f008 fda8 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->pad_inner);
   1eaa8:	6820      	ldr	r0, [r4, #0]
   1eaaa:	3030      	adds	r0, #48	; 0x30
   1eaac:	f00b ff5f 	bl	2a96e <style_init_reset>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT, LV_DPI / 15);
   1eab0:	6820      	ldr	r0, [r4, #0]
   1eab2:	2208      	movs	r2, #8
   1eab4:	2114      	movs	r1, #20
   1eab6:	3030      	adds	r0, #48	; 0x30
   1eab8:	f008 fd9e 	bl	275f8 <_lv_style_set_int>
    style_init_reset(&styles->txt_underline);
   1eabc:	6820      	ldr	r0, [r4, #0]
   1eabe:	3034      	adds	r0, #52	; 0x34
   1eac0:	f00b ff55 	bl	2a96e <style_init_reset>
    lv_style_set_text_decor(&styles->txt_underline, LV_STATE_FOCUSED, LV_TEXT_DECOR_UNDERLINE);
   1eac4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1eac6:	2201      	movs	r2, #1
   1eac8:	f248 2182 	movw	r1, #33410	; 0x8282
   1eacc:	3034      	adds	r0, #52	; 0x34
   1eace:	f008 fd93 	bl	275f8 <_lv_style_set_int>
    theme.apply_xcb = NULL;
   1ead2:	2300      	movs	r3, #0
   1ead4:	606b      	str	r3, [r5, #4]
    theme.apply_cb = theme_apply;
   1ead6:	4b1f      	ldr	r3, [pc, #124]	; (1eb54 <lv_theme_mono_init+0x8e8>)
}
   1ead8:	481f      	ldr	r0, [pc, #124]	; (1eb58 <lv_theme_mono_init+0x8ec>)
    theme.apply_cb = theme_apply;
   1eada:	602b      	str	r3, [r5, #0]
}
   1eadc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1eae0:	2100      	movs	r1, #0
   1eae2:	460b      	mov	r3, r1
   1eae4:	e404      	b.n	1e2f0 <lv_theme_mono_init+0x84>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1eae6:	2100      	movs	r1, #0
   1eae8:	460b      	mov	r3, r1
   1eaea:	e419      	b.n	1e320 <lv_theme_mono_init+0xb4>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eaec:	2100      	movs	r1, #0
   1eaee:	460b      	mov	r3, r1
   1eaf0:	e46e      	b.n	1e3d0 <lv_theme_mono_init+0x164>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eaf2:	2100      	movs	r1, #0
   1eaf4:	460b      	mov	r3, r1
   1eaf6:	e48f      	b.n	1e418 <lv_theme_mono_init+0x1ac>
    lv_style_set_scale_grad_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eaf8:	2100      	movs	r1, #0
   1eafa:	460b      	mov	r3, r1
   1eafc:	e4a4      	b.n	1e448 <lv_theme_mono_init+0x1dc>
    lv_style_set_scale_end_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eafe:	2100      	movs	r1, #0
   1eb00:	460b      	mov	r3, r1
   1eb02:	e4b9      	b.n	1e478 <lv_theme_mono_init+0x20c>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eb04:	2100      	movs	r1, #0
   1eb06:	460b      	mov	r3, r1
   1eb08:	e4ce      	b.n	1e4a8 <lv_theme_mono_init+0x23c>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eb0a:	2100      	movs	r1, #0
   1eb0c:	460b      	mov	r3, r1
   1eb0e:	e4e4      	b.n	1e4da <lv_theme_mono_init+0x26e>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eb10:	2100      	movs	r1, #0
   1eb12:	460b      	mov	r3, r1
   1eb14:	e546      	b.n	1e5a4 <lv_theme_mono_init+0x338>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, FG_COLOR);
   1eb16:	213f      	movs	r1, #63	; 0x3f
   1eb18:	231f      	movs	r3, #31
   1eb1a:	e571      	b.n	1e600 <lv_theme_mono_init+0x394>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, FG_COLOR);
   1eb1c:	213f      	movs	r1, #63	; 0x3f
   1eb1e:	231f      	movs	r3, #31
   1eb20:	e587      	b.n	1e632 <lv_theme_mono_init+0x3c6>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eb22:	2100      	movs	r1, #0
   1eb24:	460b      	mov	r3, r1
   1eb26:	e5b4      	b.n	1e692 <lv_theme_mono_init+0x426>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1eb28:	2100      	movs	r1, #0
   1eb2a:	460b      	mov	r3, r1
   1eb2c:	e5f8      	b.n	1e720 <lv_theme_mono_init+0x4b4>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eb2e:	2100      	movs	r1, #0
   1eb30:	460b      	mov	r3, r1
   1eb32:	e610      	b.n	1e756 <lv_theme_mono_init+0x4ea>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1eb34:	2100      	movs	r1, #0
   1eb36:	460b      	mov	r3, r1
   1eb38:	e653      	b.n	1e7e2 <lv_theme_mono_init+0x576>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eb3a:	2100      	movs	r1, #0
   1eb3c:	460b      	mov	r3, r1
   1eb3e:	e669      	b.n	1e814 <lv_theme_mono_init+0x5a8>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1eb40:	2100      	movs	r1, #0
   1eb42:	460b      	mov	r3, r1
   1eb44:	e6ad      	b.n	1e8a2 <lv_theme_mono_init+0x636>
    lv_style_set_bg_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1eb46:	2100      	movs	r1, #0
   1eb48:	460b      	mov	r3, r1
   1eb4a:	e6e6      	b.n	1e91a <lv_theme_mono_init+0x6ae>
    lv_style_set_line_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1eb4c:	2100      	movs	r1, #0
   1eb4e:	460b      	mov	r3, r1
   1eb50:	e72e      	b.n	1e9b0 <lv_theme_mono_init+0x744>
   1eb52:	bf00      	nop
   1eb54:	0001e1f5 	.word	0x0001e1f5
   1eb58:	2000403c 	.word	0x2000403c

0001eb5c <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
   1eb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb5e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb60:	f007 fea2 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1eb64:	7c03      	ldrb	r3, [r0, #16]
   1eb66:	f003 0307 	and.w	r3, r3, #7
   1eb6a:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb6c:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1eb6e:	d129      	bne.n	1ebc4 <lv_label_revert_dots+0x68>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   1eb70:	6881      	ldr	r1, [r0, #8]
   1eb72:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eb76:	4299      	cmp	r1, r3
   1eb78:	d024      	beq.n	1ebc4 <lv_label_revert_dots+0x68>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
   1eb7a:	4b14      	ldr	r3, [pc, #80]	; (1ebcc <lv_label_revert_dots+0x70>)
   1eb7c:	6800      	ldr	r0, [r0, #0]
   1eb7e:	681b      	ldr	r3, [r3, #0]
   1eb80:	3903      	subs	r1, #3
   1eb82:	4798      	blx	r3
   1eb84:	4607      	mov	r7, r0
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb86:	4628      	mov	r0, r5
   1eb88:	f007 fe8e 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
   1eb8c:	7c42      	ldrb	r2, [r0, #17]
   1eb8e:	07d2      	lsls	r2, r2, #31
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb90:	4603      	mov	r3, r0
        return ext->dot.tmp_ptr;
   1eb92:	bf4c      	ite	mi
   1eb94:	6843      	ldrmi	r3, [r0, #4]
    }
    else {
        return ext->dot.tmp;
   1eb96:	3304      	addpl	r3, #4
    while(ext->text[byte_i + i] != '\0') {
   1eb98:	2200      	movs	r2, #0
   1eb9a:	fa57 f182 	uxtab	r1, r7, r2
   1eb9e:	6826      	ldr	r6, [r4, #0]
   1eba0:	b2d0      	uxtb	r0, r2
   1eba2:	f816 e001 	ldrb.w	lr, [r6, r1]
   1eba6:	5c18      	ldrb	r0, [r3, r0]
   1eba8:	eb06 0c01 	add.w	ip, r6, r1
   1ebac:	3201      	adds	r2, #1
   1ebae:	f1be 0f00 	cmp.w	lr, #0
   1ebb2:	d108      	bne.n	1ebc6 <lv_label_revert_dots+0x6a>
    ext->text[byte_i + i] = dot_tmp[i];
   1ebb4:	f88c 0000 	strb.w	r0, [ip]
    lv_label_dot_tmp_free(label);
   1ebb8:	4628      	mov	r0, r5
   1ebba:	f00b feda 	bl	2a972 <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
   1ebbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ebc2:	60a3      	str	r3, [r4, #8]
}
   1ebc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
   1ebc6:	5470      	strb	r0, [r6, r1]
        i++;
   1ebc8:	e7e7      	b.n	1eb9a <lv_label_revert_dots+0x3e>
   1ebca:	bf00      	nop
   1ebcc:	200007e8 	.word	0x200007e8

0001ebd0 <lv_label_set_dot_tmp>:
{
   1ebd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ebd2:	4616      	mov	r6, r2
   1ebd4:	4604      	mov	r4, r0
   1ebd6:	460f      	mov	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1ebd8:	f007 fe66 	bl	268a8 <lv_obj_get_ext_attr>
   1ebdc:	4605      	mov	r5, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   1ebde:	4620      	mov	r0, r4
   1ebe0:	f00b fec7 	bl	2a972 <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
   1ebe4:	2e04      	cmp	r6, #4
   1ebe6:	d91e      	bls.n	1ec26 <lv_label_set_dot_tmp+0x56>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   1ebe8:	1c70      	adds	r0, r6, #1
   1ebea:	f7fe fcdd 	bl	1d5a8 <lv_mem_alloc>
   1ebee:	4604      	mov	r4, r0
   1ebf0:	6068      	str	r0, [r5, #4]
        if(ext->dot.tmp_ptr == NULL) {
   1ebf2:	b958      	cbnz	r0, 1ec0c <lv_label_set_dot_tmp+0x3c>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
   1ebf4:	4b11      	ldr	r3, [pc, #68]	; (1ec3c <lv_label_set_dot_tmp+0x6c>)
   1ebf6:	9300      	str	r3, [sp, #0]
   1ebf8:	2003      	movs	r0, #3
   1ebfa:	4b11      	ldr	r3, [pc, #68]	; (1ec40 <lv_label_set_dot_tmp+0x70>)
   1ebfc:	4911      	ldr	r1, [pc, #68]	; (1ec44 <lv_label_set_dot_tmp+0x74>)
   1ebfe:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
   1ec02:	f7fe fca9 	bl	1d558 <_lv_log_add>
   1ec06:	4620      	mov	r0, r4
}
   1ec08:	b003      	add	sp, #12
   1ec0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
   1ec0c:	4632      	mov	r2, r6
   1ec0e:	4639      	mov	r1, r7
   1ec10:	f00b fec1 	bl	2a996 <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
   1ec14:	686b      	ldr	r3, [r5, #4]
   1ec16:	2200      	movs	r2, #0
   1ec18:	559a      	strb	r2, [r3, r6]
        ext->dot_tmp_alloc    = true;
   1ec1a:	7c6b      	ldrb	r3, [r5, #17]
   1ec1c:	f043 0301 	orr.w	r3, r3, #1
   1ec20:	746b      	strb	r3, [r5, #17]
    return true;
   1ec22:	2001      	movs	r0, #1
   1ec24:	e7f0      	b.n	1ec08 <lv_label_set_dot_tmp+0x38>
        ext->dot_tmp_alloc = false;
   1ec26:	7c6b      	ldrb	r3, [r5, #17]
   1ec28:	f36f 0300 	bfc	r3, #0, #1
   1ec2c:	746b      	strb	r3, [r5, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
   1ec2e:	4632      	mov	r2, r6
   1ec30:	4639      	mov	r1, r7
   1ec32:	1d28      	adds	r0, r5, #4
   1ec34:	f00b feaf 	bl	2a996 <_lv_memcpy>
   1ec38:	e7f3      	b.n	1ec22 <lv_label_set_dot_tmp+0x52>
   1ec3a:	bf00      	nop
   1ec3c:	00039240 	.word	0x00039240
   1ec40:	00039296 	.word	0x00039296
   1ec44:	00039205 	.word	0x00039205

0001ec48 <lv_label_get_letter_on>:
{
   1ec48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec4c:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
   1ec4e:	f9b1 3000 	ldrsh.w	r3, [r1]
   1ec52:	9305      	str	r3, [sp, #20]
{
   1ec54:	460c      	mov	r4, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ec56:	2212      	movs	r2, #18
   1ec58:	2100      	movs	r1, #0
   1ec5a:	4606      	mov	r6, r0
   1ec5c:	f7fb fd44 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ec60:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ec62:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ec64:	2100      	movs	r1, #0
   1ec66:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
   1ec68:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
   1ec6c:	f7fb fd3c 	bl	1a6e8 <_lv_obj_get_style_int>
   1ec70:	1a24      	subs	r4, r4, r0
   1ec72:	b223      	sxth	r3, r4
    get_txt_coords(label, &txt_coords);
   1ec74:	a90c      	add	r1, sp, #48	; 0x30
   1ec76:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
   1ec78:	9306      	str	r3, [sp, #24]
    get_txt_coords(label, &txt_coords);
   1ec7a:	f00b fe8e 	bl	2a99a <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
   1ec7e:	4630      	mov	r0, r6
   1ec80:	f00b feca 	bl	2aa18 <lv_label_get_text>
   1ec84:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   1ec86:	4630      	mov	r0, r6
   1ec88:	f007 fe0e 	bl	268a8 <lv_obj_get_ext_attr>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ec8c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ec90:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1ec94:	3301      	adds	r3, #1
   1ec96:	1a9b      	subs	r3, r3, r2
   1ec98:	b21b      	sxth	r3, r3
   1ec9a:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ec9c:	f248 028e 	movw	r2, #32910	; 0x808e
   1eca0:	2100      	movs	r1, #0
   1eca2:	4630      	mov	r0, r6
   1eca4:	9307      	str	r3, [sp, #28]
   1eca6:	f007 fd1b 	bl	266e0 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ecaa:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ecae:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ecb0:	2100      	movs	r1, #0
   1ecb2:	4630      	mov	r0, r6
   1ecb4:	f7fb fd18 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1ecb8:	f248 0280 	movw	r2, #32896	; 0x8080
   1ecbc:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ecbe:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1ecc0:	4630      	mov	r0, r6
   1ecc2:	f7fb fd11 	bl	1a6e8 <_lv_obj_get_style_int>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
   1ecc6:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   1ecca:	9304      	str	r3, [sp, #16]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1eccc:	7c2b      	ldrb	r3, [r5, #16]
   1ecce:	9003      	str	r0, [sp, #12]
   1ecd0:	f3c3 1580 	ubfx	r5, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1ecd4:	061a      	lsls	r2, r3, #24
   1ecd6:	bf48      	it	mi
   1ecd8:	f045 0502 	orrmi.w	r5, r5, #2
    lv_label_align_t align = lv_label_get_align(label);
   1ecdc:	4630      	mov	r0, r6
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1ecde:	075b      	lsls	r3, r3, #29
   1ece0:	bf08      	it	eq
   1ece2:	f045 0510 	orreq.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
   1ece6:	f00b fea3 	bl	2aa30 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1ecea:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
   1ecec:	4682      	mov	sl, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1ecee:	d108      	bne.n	1ed02 <lv_label_get_letter_on+0xba>
   1ecf0:	f045 0504 	orr.w	r5, r5, #4
        y += letter_height + line_space;
   1ecf4:	9b04      	ldr	r3, [sp, #16]
{
   1ecf6:	f04f 0b00 	mov.w	fp, #0
        y += letter_height + line_space;
   1ecfa:	4423      	add	r3, r4
{
   1ecfc:	465e      	mov	r6, fp
        y += letter_height + line_space;
   1ecfe:	9309      	str	r3, [sp, #36]	; 0x24
   1ed00:	e051      	b.n	1eda6 <lv_label_get_letter_on+0x15e>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1ed02:	2802      	cmp	r0, #2
   1ed04:	d1f6      	bne.n	1ecf4 <lv_label_get_letter_on+0xac>
   1ed06:	f045 0508 	orr.w	r5, r5, #8
   1ed0a:	e7f3      	b.n	1ecf4 <lv_label_get_letter_on+0xac>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1ed0c:	9b07      	ldr	r3, [sp, #28]
   1ed0e:	9a03      	ldr	r2, [sp, #12]
   1ed10:	9500      	str	r5, [sp, #0]
   1ed12:	4649      	mov	r1, r9
   1ed14:	4640      	mov	r0, r8
   1ed16:	f7fe ffc9 	bl	1dcac <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
   1ed1a:	9b04      	ldr	r3, [sp, #16]
   1ed1c:	9a06      	ldr	r2, [sp, #24]
   1ed1e:	445b      	add	r3, fp
   1ed20:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1ed22:	eb06 0400 	add.w	r4, r6, r0
        if(pos.y <= y + letter_height) {
   1ed26:	dc39      	bgt.n	1ed9c <lv_label_get_letter_on+0x154>
            letter = _lv_txt_encoded_prev(txt, &tmp);
   1ed28:	4b50      	ldr	r3, [pc, #320]	; (1ee6c <lv_label_get_letter_on+0x224>)
            uint32_t tmp = new_line_start;
   1ed2a:	940b      	str	r4, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
   1ed2c:	681b      	ldr	r3, [r3, #0]
   1ed2e:	a90b      	add	r1, sp, #44	; 0x2c
   1ed30:	4638      	mov	r0, r7
   1ed32:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
   1ed34:	280a      	cmp	r0, #10
   1ed36:	d002      	beq.n	1ed3e <lv_label_get_letter_on+0xf6>
   1ed38:	5d3b      	ldrb	r3, [r7, r4]
   1ed3a:	b903      	cbnz	r3, 1ed3e <lv_label_get_letter_on+0xf6>
   1ed3c:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   1ed3e:	f1ba 0f01 	cmp.w	sl, #1
   1ed42:	d137      	bne.n	1edb4 <lv_label_get_letter_on+0x16c>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   1ed44:	9b03      	ldr	r3, [sp, #12]
   1ed46:	9500      	str	r5, [sp, #0]
   1ed48:	464a      	mov	r2, r9
   1ed4a:	1ba1      	subs	r1, r4, r6
   1ed4c:	4640      	mov	r0, r8
   1ed4e:	f7fe ff5b 	bl	1dc08 <_lv_txt_get_width>
   1ed52:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ed56:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1ed5a:	3301      	adds	r3, #1
   1ed5c:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
   1ed5e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   1ed62:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1ed66:	fa02 f283 	sxtah	r2, r2, r3
   1ed6a:	1043      	asrs	r3, r0, #1
   1ed6c:	ebc3 0362 	rsb	r3, r3, r2, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
   1ed70:	fa0f fb83 	sxth.w	fp, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1ed74:	2200      	movs	r2, #0
   1ed76:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    uint32_t i = 0;
   1ed7a:	920b      	str	r2, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
   1ed7c:	2c00      	cmp	r4, #0
   1ed7e:	d16d      	bne.n	1ee5c <lv_label_get_letter_on+0x214>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   1ed80:	4d3b      	ldr	r5, [pc, #236]	; (1ee70 <lv_label_get_letter_on+0x228>)
   1ed82:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ed84:	682b      	ldr	r3, [r5, #0]
   1ed86:	4640      	mov	r0, r8
   1ed88:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   1ed8a:	682b      	ldr	r3, [r5, #0]
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   1ed8c:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   1ed8e:	4631      	mov	r1, r6
   1ed90:	4638      	mov	r0, r7
   1ed92:	4798      	blx	r3
}
   1ed94:	4420      	add	r0, r4
   1ed96:	b00f      	add	sp, #60	; 0x3c
   1ed98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
   1ed9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ed9e:	449b      	add	fp, r3
   1eda0:	fa0f fb8b 	sxth.w	fp, fp
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1eda4:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
   1eda6:	5dbb      	ldrb	r3, [r7, r6]
   1eda8:	eb07 0806 	add.w	r8, r7, r6
   1edac:	2b00      	cmp	r3, #0
   1edae:	d1ad      	bne.n	1ed0c <lv_label_get_letter_on+0xc4>
   1edb0:	4634      	mov	r4, r6
   1edb2:	e7c4      	b.n	1ed3e <lv_label_get_letter_on+0xf6>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   1edb4:	f1ba 0f02 	cmp.w	sl, #2
   1edb8:	d10e      	bne.n	1edd8 <lv_label_get_letter_on+0x190>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   1edba:	9b03      	ldr	r3, [sp, #12]
   1edbc:	9500      	str	r5, [sp, #0]
   1edbe:	464a      	mov	r2, r9
   1edc0:	1ba1      	subs	r1, r4, r6
   1edc2:	4640      	mov	r0, r8
   1edc4:	f7fe ff20 	bl	1dc08 <_lv_txt_get_width>
   1edc8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1edcc:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1edd0:	3301      	adds	r3, #1
   1edd2:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
   1edd4:	1a1b      	subs	r3, r3, r0
   1edd6:	e7cb      	b.n	1ed70 <lv_label_get_letter_on+0x128>
    lv_coord_t x = 0;
   1edd8:	f04f 0b00 	mov.w	fp, #0
   1eddc:	e7ca      	b.n	1ed74 <lv_label_get_letter_on+0x12c>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   1edde:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ede0:	9007      	str	r0, [sp, #28]
   1ede2:	f818 1001 	ldrb.w	r1, [r8, r1]
   1ede6:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1edea:	f00b fd40 	bl	2a86e <_lv_txt_is_cmd>
   1edee:	9a07      	ldr	r2, [sp, #28]
   1edf0:	b198      	cbz	r0, 1ee1a <lv_label_get_letter_on+0x1d2>
        while(i + line_start < new_line_start) {
   1edf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1edf4:	4432      	add	r2, r6
   1edf6:	42a2      	cmp	r2, r4
   1edf8:	d2c2      	bcs.n	1ed80 <lv_label_get_letter_on+0x138>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   1edfa:	f8da 2000 	ldr.w	r2, [sl]
   1edfe:	a90b      	add	r1, sp, #44	; 0x2c
   1ee00:	4640      	mov	r0, r8
   1ee02:	4790      	blx	r2
   1ee04:	4605      	mov	r5, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1ee06:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1ee08:	f8da 2000 	ldr.w	r2, [sl]
   1ee0c:	2100      	movs	r1, #0
   1ee0e:	4440      	add	r0, r8
   1ee10:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ee12:	9b06      	ldr	r3, [sp, #24]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1ee14:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ee16:	2b00      	cmp	r3, #0
   1ee18:	d1e1      	bne.n	1edde <lv_label_get_letter_on+0x196>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
   1ee1a:	4629      	mov	r1, r5
   1ee1c:	4648      	mov	r0, r9
   1ee1e:	f00b fd68 	bl	2a8f2 <lv_font_get_glyph_width>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
   1ee22:	9b05      	ldr	r3, [sp, #20]
   1ee24:	9a08      	ldr	r2, [sp, #32]
   1ee26:	1a9a      	subs	r2, r3, r2
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
   1ee28:	b201      	sxth	r1, r0
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
   1ee2a:	b212      	sxth	r2, r2
   1ee2c:	fa0b f080 	sxtah	r0, fp, r0
   1ee30:	4282      	cmp	r2, r0
   1ee32:	da02      	bge.n	1ee3a <lv_label_get_letter_on+0x1f2>
                i = i_act;
   1ee34:	9b04      	ldr	r3, [sp, #16]
   1ee36:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
   1ee38:	e7a2      	b.n	1ed80 <lv_label_get_letter_on+0x138>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
   1ee3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ee3c:	1990      	adds	r0, r2, r6
   1ee3e:	42a0      	cmp	r0, r4
   1ee40:	d0f8      	beq.n	1ee34 <lv_label_get_letter_on+0x1ec>
   1ee42:	9b04      	ldr	r3, [sp, #16]
   1ee44:	19b8      	adds	r0, r7, r6
   1ee46:	5cc0      	ldrb	r0, [r0, r3]
   1ee48:	2800      	cmp	r0, #0
   1ee4a:	d0f3      	beq.n	1ee34 <lv_label_get_letter_on+0x1ec>
            x += letter_space;
   1ee4c:	9b03      	ldr	r3, [sp, #12]
            i_act = i;
   1ee4e:	9204      	str	r2, [sp, #16]
   1ee50:	445b      	add	r3, fp
            x += letter_space;
   1ee52:	fa01 f383 	sxtah	r3, r1, r3
   1ee56:	fa0f fb83 	sxth.w	fp, r3
            i_act = i;
   1ee5a:	e7ca      	b.n	1edf2 <lv_label_get_letter_on+0x1aa>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ee5c:	f005 0301 	and.w	r3, r5, #1
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   1ee60:	f8df a010 	ldr.w	sl, [pc, #16]	; 1ee74 <lv_label_get_letter_on+0x22c>
    uint32_t i_act = i;
   1ee64:	9204      	str	r2, [sp, #16]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ee66:	9306      	str	r3, [sp, #24]
   1ee68:	e7c3      	b.n	1edf2 <lv_label_get_letter_on+0x1aa>
   1ee6a:	bf00      	nop
   1ee6c:	200007f4 	.word	0x200007f4
   1ee70:	200007ec 	.word	0x200007ec
   1ee74:	200007f0 	.word	0x200007f0

0001ee78 <lv_label_refr_text>:
{
   1ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee7c:	b08b      	sub	sp, #44	; 0x2c
   1ee7e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1ee80:	f007 fd12 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
   1ee84:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1ee86:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
   1ee88:	2b00      	cmp	r3, #0
   1ee8a:	d062      	beq.n	1ef52 <lv_label_refr_text+0xda>
    get_txt_coords(label, &txt_coords);
   1ee8c:	a908      	add	r1, sp, #32
   1ee8e:	4628      	mov	r0, r5
   1ee90:	f00b fd83 	bl	2a99a <get_txt_coords>
   1ee94:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   1ee98:	f8bd 3020 	ldrh.w	r3, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ee9c:	f248 028e 	movw	r2, #32910	; 0x808e
   1eea0:	2100      	movs	r1, #0
   1eea2:	3601      	adds	r6, #1
   1eea4:	4628      	mov	r0, r5
   1eea6:	1af6      	subs	r6, r6, r3
   1eea8:	f007 fc1a 	bl	266e0 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1eeac:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1eeb0:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1eeb2:	2100      	movs	r1, #0
   1eeb4:	4628      	mov	r0, r5
   1eeb6:	f7fb fc17 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1eeba:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1eebc:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1eebe:	f248 0280 	movw	r2, #32896	; 0x8080
   1eec2:	4628      	mov	r0, r5
   1eec4:	f7fb fc10 	bl	1a6e8 <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1eec8:	7c22      	ldrb	r2, [r4, #16]
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   1eeca:	9700      	str	r7, [sp, #0]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1eecc:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1eed0:	0611      	lsls	r1, r2, #24
   1eed2:	bf48      	it	mi
   1eed4:	f043 0302 	orrmi.w	r3, r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1eed8:	0752      	lsls	r2, r2, #29
   1eeda:	bf08      	it	eq
   1eedc:	f043 0310 	orreq.w	r3, r3, #16
   1eee0:	b236      	sxth	r6, r6
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   1eee2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1eee6:	4681      	mov	r9, r0
   1eee8:	4603      	mov	r3, r0
   1eeea:	6821      	ldr	r1, [r4, #0]
   1eeec:	4642      	mov	r2, r8
   1eeee:	a805      	add	r0, sp, #20
   1eef0:	f7fe ffc0 	bl	1de74 <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   1eef4:	7c26      	ldrb	r6, [r4, #16]
   1eef6:	f016 0607 	ands.w	r6, r6, #7
   1eefa:	d12d      	bne.n	1ef58 <lv_label_refr_text+0xe0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1eefc:	2212      	movs	r2, #18
   1eefe:	4631      	mov	r1, r6
   1ef00:	4628      	mov	r0, r5
   1ef02:	f7fb fbf1 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ef06:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ef08:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ef0a:	4631      	mov	r1, r6
   1ef0c:	4628      	mov	r0, r5
   1ef0e:	f7fb fbeb 	bl	1a6e8 <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
   1ef12:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1ef16:	4420      	add	r0, r4
   1ef18:	4418      	add	r0, r3
   1ef1a:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ef1e:	2210      	movs	r2, #16
   1ef20:	4631      	mov	r1, r6
   1ef22:	4628      	mov	r0, r5
   1ef24:	f7fb fbe0 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ef28:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ef2a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ef2c:	4631      	mov	r1, r6
   1ef2e:	4628      	mov	r0, r5
   1ef30:	f7fb fbda 	bl	1a6e8 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1ef34:	1902      	adds	r2, r0, r4
   1ef36:	f8bd 0016 	ldrh.w	r0, [sp, #22]
        lv_obj_set_size(label, size.x, size.y);
   1ef3a:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1ef3e:	4402      	add	r2, r0
   1ef40:	b212      	sxth	r2, r2
        lv_obj_set_size(label, size.x, size.y);
   1ef42:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1ef44:	f8ad 2016 	strh.w	r2, [sp, #22]
        lv_obj_set_size(label, size.x, size.y);
   1ef48:	f007 fa73 	bl	26432 <lv_obj_set_size>
    lv_obj_invalidate(label);
   1ef4c:	4628      	mov	r0, r5
   1ef4e:	f007 f9ec 	bl	2632a <lv_obj_invalidate>
}
   1ef52:	b00b      	add	sp, #44	; 0x2c
   1ef54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   1ef58:	1ef3      	subs	r3, r6, #3
   1ef5a:	2b01      	cmp	r3, #1
   1ef5c:	d9f6      	bls.n	1ef4c <lv_label_refr_text+0xd4>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   1ef5e:	2e02      	cmp	r6, #2
   1ef60:	f040 8086 	bne.w	1f070 <lv_label_refr_text+0x1f8>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ef64:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ef68:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1ef6c:	3301      	adds	r3, #1
   1ef6e:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
   1ef70:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   1ef74:	b21b      	sxth	r3, r3
   1ef76:	429a      	cmp	r2, r3
   1ef78:	dc03      	bgt.n	1ef82 <lv_label_refr_text+0x10a>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1ef7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ef7e:	60a3      	str	r3, [r4, #8]
   1ef80:	e7e4      	b.n	1ef4c <lv_label_refr_text+0xd4>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
   1ef82:	4b48      	ldr	r3, [pc, #288]	; (1f0a4 <lv_label_refr_text+0x22c>)
   1ef84:	6820      	ldr	r0, [r4, #0]
   1ef86:	681b      	ldr	r3, [r3, #0]
   1ef88:	4798      	blx	r3
   1ef8a:	2803      	cmp	r0, #3
   1ef8c:	d9f5      	bls.n	1ef7a <lv_label_refr_text+0x102>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ef8e:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   1ef92:	f8bd 3020 	ldrh.w	r3, [sp, #32]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
   1ef96:	222e      	movs	r2, #46	; 0x2e
   1ef98:	4611      	mov	r1, r2
   1ef9a:	4640      	mov	r0, r8
   1ef9c:	3601      	adds	r6, #1
   1ef9e:	1af6      	subs	r6, r6, r3
   1efa0:	f00b fca7 	bl	2a8f2 <lv_font_get_glyph_width>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1efa4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1efa8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1efac:	3301      	adds	r3, #1
   1efae:	4481      	add	r9, r0
   1efb0:	1a9b      	subs	r3, r3, r2
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   1efb2:	f9b8 0008 	ldrsh.w	r0, [r8, #8]
   1efb6:	b21b      	sxth	r3, r3
            p.y -= line_space;                                               /*Trim the last line space*/
   1efb8:	1bda      	subs	r2, r3, r7
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   1efba:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
   1efbc:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
            p.y -= p.y %
   1efc0:	fb93 f0f7 	sdiv	r0, r3, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1efc4:	b236      	sxth	r6, r6
   1efc6:	fb07 3710 	mls	r7, r7, r0, r3
            p.y -= line_space;                                               /*Trim the last line space*/
   1efca:	1bd7      	subs	r7, r2, r7
            p.x = lv_area_get_width(&txt_coords) -
   1efcc:	444e      	add	r6, r9
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1efce:	a906      	add	r1, sp, #24
   1efd0:	4628      	mov	r0, r5
            p.x = lv_area_get_width(&txt_coords) -
   1efd2:	f8ad 6018 	strh.w	r6, [sp, #24]
            p.y -= line_space;                                               /*Trim the last line space*/
   1efd6:	f8ad 701a 	strh.w	r7, [sp, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1efda:	f7ff fe35 	bl	1ec48 <lv_label_get_letter_on>
   1efde:	4606      	mov	r6, r0
            size_t txt_len = strlen(ext->text);
   1efe0:	6820      	ldr	r0, [r4, #0]
   1efe2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1f0b0 <lv_label_refr_text+0x238>
   1efe6:	f7e1 fa51 	bl	48c <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1efea:	4b2f      	ldr	r3, [pc, #188]	; (1f0a8 <lv_label_refr_text+0x230>)
            size_t txt_len = strlen(ext->text);
   1efec:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1efee:	681b      	ldr	r3, [r3, #0]
   1eff0:	6820      	ldr	r0, [r4, #0]
   1eff2:	4631      	mov	r1, r6
   1eff4:	4798      	blx	r3
   1eff6:	46ca      	mov	sl, r9
   1eff8:	9007      	str	r0, [sp, #28]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   1effa:	9f07      	ldr	r7, [sp, #28]
   1effc:	6820      	ldr	r0, [r4, #0]
   1effe:	f8d9 3000 	ldr.w	r3, [r9]
   1f002:	f107 0b03 	add.w	fp, r7, #3
   1f006:	45c3      	cmp	fp, r8
   1f008:	4438      	add	r0, r7
   1f00a:	d82b      	bhi.n	1f064 <lv_label_refr_text+0x1ec>
   1f00c:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
   1f010:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1f014:	9907      	ldr	r1, [sp, #28]
   1f016:	6820      	ldr	r0, [r4, #0]
   1f018:	f8da 3000 	ldr.w	r3, [sl]
   1f01c:	4408      	add	r0, r1
   1f01e:	4798      	blx	r3
                _lv_txt_encoded_next(ext->text, &byte_id);
   1f020:	4b22      	ldr	r3, [pc, #136]	; (1f0ac <lv_label_refr_text+0x234>)
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1f022:	4481      	add	r9, r0
                _lv_txt_encoded_next(ext->text, &byte_id);
   1f024:	681b      	ldr	r3, [r3, #0]
   1f026:	6820      	ldr	r0, [r4, #0]
   1f028:	a907      	add	r1, sp, #28
   1f02a:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1f02c:	f1b8 0801 	subs.w	r8, r8, #1
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1f030:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1f034:	d1ee      	bne.n	1f014 <lv_label_refr_text+0x19c>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   1f036:	6821      	ldr	r1, [r4, #0]
   1f038:	464a      	mov	r2, r9
   1f03a:	4439      	add	r1, r7
   1f03c:	4628      	mov	r0, r5
   1f03e:	f7ff fdc7 	bl	1ebd0 <lv_label_set_dot_tmp>
   1f042:	2800      	cmp	r0, #0
   1f044:	d082      	beq.n	1ef4c <lv_label_refr_text+0xd4>
                    ext->text[byte_id_ori + i] = '.';
   1f046:	6823      	ldr	r3, [r4, #0]
   1f048:	222e      	movs	r2, #46	; 0x2e
   1f04a:	55da      	strb	r2, [r3, r7]
   1f04c:	6823      	ldr	r3, [r4, #0]
   1f04e:	443b      	add	r3, r7
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1f050:	3603      	adds	r6, #3
                    ext->text[byte_id_ori + i] = '.';
   1f052:	705a      	strb	r2, [r3, #1]
   1f054:	6823      	ldr	r3, [r4, #0]
   1f056:	441f      	add	r7, r3
   1f058:	70ba      	strb	r2, [r7, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   1f05a:	6823      	ldr	r3, [r4, #0]
   1f05c:	f803 800b 	strb.w	r8, [r3, fp]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1f060:	60a6      	str	r6, [r4, #8]
   1f062:	e773      	b.n	1ef4c <lv_label_refr_text+0xd4>
                byte_id -= _lv_txt_encoded_size(&ext->text[byte_id]);
   1f064:	4798      	blx	r3
   1f066:	9b07      	ldr	r3, [sp, #28]
   1f068:	1a1b      	subs	r3, r3, r0
   1f06a:	9307      	str	r3, [sp, #28]
                letter_id--;
   1f06c:	3e01      	subs	r6, #1
   1f06e:	e7c4      	b.n	1effa <lv_label_refr_text+0x182>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   1f070:	2e01      	cmp	r6, #1
   1f072:	f47f af6b 	bne.w	1ef4c <lv_label_refr_text+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1f076:	2210      	movs	r2, #16
   1f078:	2100      	movs	r1, #0
   1f07a:	4628      	mov	r0, r5
   1f07c:	f7fb fb34 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1f080:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1f082:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1f084:	2100      	movs	r1, #0
   1f086:	4628      	mov	r0, r5
   1f088:	f7fb fb2e 	bl	1a6e8 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1f08c:	1901      	adds	r1, r0, r4
   1f08e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1f092:	4401      	add	r1, r0
   1f094:	b209      	sxth	r1, r1
        lv_obj_set_height(label, size.y);
   1f096:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1f098:	f8ad 1016 	strh.w	r1, [sp, #22]
        lv_obj_set_height(label, size.y);
   1f09c:	f007 fa0b 	bl	264b6 <lv_obj_set_height>
   1f0a0:	e754      	b.n	1ef4c <lv_label_refr_text+0xd4>
   1f0a2:	bf00      	nop
   1f0a4:	200007fc 	.word	0x200007fc
   1f0a8:	200007e8 	.word	0x200007e8
   1f0ac:	200007f0 	.word	0x200007f0
   1f0b0:	200007f8 	.word	0x200007f8

0001f0b4 <lv_label_create>:
{
   1f0b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f0b8:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1f0ba:	f7fb f955 	bl	1a368 <lv_obj_create>
    if(new_label == NULL) return NULL;
   1f0be:	4604      	mov	r4, r0
   1f0c0:	b920      	cbnz	r0, 1f0cc <lv_label_create+0x18>
   1f0c2:	2400      	movs	r4, #0
}
   1f0c4:	4620      	mov	r0, r4
   1f0c6:	b002      	add	sp, #8
   1f0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1f0cc:	4d53      	ldr	r5, [pc, #332]	; (1f21c <lv_label_create+0x168>)
   1f0ce:	682b      	ldr	r3, [r5, #0]
   1f0d0:	b913      	cbnz	r3, 1f0d8 <lv_label_create+0x24>
   1f0d2:	f007 fbe7 	bl	268a4 <lv_obj_get_signal_cb>
   1f0d6:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   1f0d8:	2114      	movs	r1, #20
   1f0da:	4620      	mov	r0, r4
   1f0dc:	f007 f8ab 	bl	26236 <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1f0e0:	4620      	mov	r0, r4
   1f0e2:	f007 fbe1 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext == NULL) {
   1f0e6:	2300      	movs	r3, #0
   1f0e8:	4605      	mov	r5, r0
   1f0ea:	b918      	cbnz	r0, 1f0f4 <lv_label_create+0x40>
        lv_obj_del(new_label);
   1f0ec:	4620      	mov	r0, r4
   1f0ee:	f007 f9ec 	bl	264ca <lv_obj_del>
        return NULL;
   1f0f2:	e7e6      	b.n	1f0c2 <lv_label_create+0xe>
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1f0f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->dot.tmp_ptr   = NULL;
   1f0f8:	e9c0 3300 	strd	r3, r3, [r0]
    ext->offset.x = 0;
   1f0fc:	e9c0 2302 	strd	r2, r3, [r0, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1f100:	8a03      	ldrh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1f102:	4947      	ldr	r1, [pc, #284]	; (1f220 <lv_label_create+0x16c>)
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1f104:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
   1f108:	f023 0301 	bic.w	r3, r3, #1
   1f10c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f110:	8203      	strh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1f112:	4620      	mov	r0, r4
   1f114:	f007 f88d 	bl	26232 <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   1f118:	4942      	ldr	r1, [pc, #264]	; (1f224 <lv_label_create+0x170>)
   1f11a:	4620      	mov	r0, r4
   1f11c:	f007 f881 	bl	26222 <lv_obj_set_signal_cb>
    if(copy == NULL) {
   1f120:	b9c7      	cbnz	r7, 1f154 <lv_label_create+0xa0>
        lv_theme_apply(new_label, LV_THEME_LABEL);
   1f122:	2106      	movs	r1, #6
   1f124:	4620      	mov	r0, r4
   1f126:	f7ff f84b 	bl	1e1c0 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
   1f12a:	4639      	mov	r1, r7
   1f12c:	4620      	mov	r0, r4
   1f12e:	f007 f864 	bl	261fa <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   1f132:	4639      	mov	r1, r7
   1f134:	4620      	mov	r0, r4
   1f136:	f00b fde9 	bl	2ad0c <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
   1f13a:	493b      	ldr	r1, [pc, #236]	; (1f228 <lv_label_create+0x174>)
   1f13c:	4620      	mov	r0, r4
   1f13e:	f00b fd8e 	bl	2ac5e <lv_label_set_text>
    LV_LOG_INFO("label created");
   1f142:	4b3a      	ldr	r3, [pc, #232]	; (1f22c <lv_label_create+0x178>)
   1f144:	9300      	str	r3, [sp, #0]
   1f146:	493a      	ldr	r1, [pc, #232]	; (1f230 <lv_label_create+0x17c>)
   1f148:	4b3a      	ldr	r3, [pc, #232]	; (1f234 <lv_label_create+0x180>)
   1f14a:	22a7      	movs	r2, #167	; 0xa7
   1f14c:	2001      	movs	r0, #1
   1f14e:	f7fe fa03 	bl	1d558 <_lv_log_add>
    return new_label;
   1f152:	e7b7      	b.n	1f0c4 <lv_label_create+0x10>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1f154:	4638      	mov	r0, r7
   1f156:	f007 fba7 	bl	268a8 <lv_obj_get_ext_attr>
   1f15a:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   1f15c:	4638      	mov	r0, r7
   1f15e:	f00b fc60 	bl	2aa22 <lv_label_get_long_mode>
   1f162:	4601      	mov	r1, r0
   1f164:	4620      	mov	r0, r4
   1f166:	f00b fdd1 	bl	2ad0c <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   1f16a:	4638      	mov	r0, r7
   1f16c:	f00b fd70 	bl	2ac50 <lv_label_get_recolor>
   1f170:	4601      	mov	r1, r0
   1f172:	4620      	mov	r0, r4
   1f174:	f00b fdf0 	bl	2ad58 <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
   1f178:	4638      	mov	r0, r7
   1f17a:	f00b fc59 	bl	2aa30 <lv_label_get_align>
   1f17e:	4601      	mov	r1, r0
   1f180:	4620      	mov	r0, r4
   1f182:	f00b fc36 	bl	2a9f2 <lv_label_set_align>
        if(copy_ext->static_txt == 0)
   1f186:	7c33      	ldrb	r3, [r6, #16]
   1f188:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1f18a:	4638      	mov	r0, r7
        if(copy_ext->static_txt == 0)
   1f18c:	d439      	bmi.n	1f202 <lv_label_create+0x14e>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1f18e:	f00b fc43 	bl	2aa18 <lv_label_get_text>
   1f192:	4601      	mov	r1, r0
   1f194:	4620      	mov	r0, r4
   1f196:	f00b fd62 	bl	2ac5e <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   1f19a:	7c33      	ldrb	r3, [r6, #16]
   1f19c:	f003 0307 	and.w	r3, r3, #7
   1f1a0:	2b02      	cmp	r3, #2
   1f1a2:	d115      	bne.n	1f1d0 <lv_label_create+0x11c>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
   1f1a4:	6830      	ldr	r0, [r6, #0]
   1f1a6:	682f      	ldr	r7, [r5, #0]
   1f1a8:	f7fe fa36 	bl	1d618 <_lv_mem_get_size>
   1f1ac:	4601      	mov	r1, r0
   1f1ae:	4638      	mov	r0, r7
   1f1b0:	f7fe fa40 	bl	1d634 <lv_mem_realloc>
   1f1b4:	4607      	mov	r7, r0
   1f1b6:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
   1f1b8:	2800      	cmp	r0, #0
   1f1ba:	d082      	beq.n	1f0c2 <lv_label_create+0xe>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
   1f1bc:	f8d6 8000 	ldr.w	r8, [r6]
   1f1c0:	4640      	mov	r0, r8
   1f1c2:	f7fe fa29 	bl	1d618 <_lv_mem_get_size>
   1f1c6:	4641      	mov	r1, r8
   1f1c8:	4602      	mov	r2, r0
   1f1ca:	4638      	mov	r0, r7
   1f1cc:	f00b fbe3 	bl	2a996 <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1f1d0:	7c73      	ldrb	r3, [r6, #17]
   1f1d2:	07db      	lsls	r3, r3, #31
   1f1d4:	d51c      	bpl.n	1f210 <lv_label_create+0x15c>
   1f1d6:	6870      	ldr	r0, [r6, #4]
   1f1d8:	b1d0      	cbz	r0, 1f210 <lv_label_create+0x15c>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
   1f1da:	f7e1 f957 	bl	48c <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1f1de:	6869      	ldr	r1, [r5, #4]
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
   1f1e0:	4602      	mov	r2, r0
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1f1e2:	4620      	mov	r0, r4
   1f1e4:	f7ff fcf4 	bl	1ebd0 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   1f1e8:	7c72      	ldrb	r2, [r6, #17]
   1f1ea:	7c6b      	ldrb	r3, [r5, #17]
   1f1ec:	f362 0300 	bfi	r3, r2, #0, #1
   1f1f0:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
   1f1f2:	68b3      	ldr	r3, [r6, #8]
   1f1f4:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1f1f6:	22ff      	movs	r2, #255	; 0xff
   1f1f8:	4611      	mov	r1, r2
   1f1fa:	4620      	mov	r0, r4
   1f1fc:	f7fb fcca 	bl	1ab94 <lv_obj_refresh_style>
   1f200:	e79f      	b.n	1f142 <lv_label_create+0x8e>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
   1f202:	f00b fc09 	bl	2aa18 <lv_label_get_text>
   1f206:	4601      	mov	r1, r0
   1f208:	4620      	mov	r0, r4
   1f20a:	f00b fd65 	bl	2acd8 <lv_label_set_text_static>
   1f20e:	e7c4      	b.n	1f19a <lv_label_create+0xe6>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   1f210:	2204      	movs	r2, #4
   1f212:	18b1      	adds	r1, r6, r2
   1f214:	18a8      	adds	r0, r5, r2
   1f216:	f00b fbbe 	bl	2a996 <_lv_memcpy>
   1f21a:	e7e5      	b.n	1f1e8 <lv_label_create+0x134>
   1f21c:	20004064 	.word	0x20004064
   1f220:	0002aa45 	.word	0x0002aa45
   1f224:	0001f239 	.word	0x0001f239
   1f228:	0003926a 	.word	0x0003926a
   1f22c:	0003926f 	.word	0x0003926f
   1f230:	00039205 	.word	0x00039205
   1f234:	00039286 	.word	0x00039286

0001f238 <lv_label_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
   1f238:	2908      	cmp	r1, #8
{
   1f23a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f23e:	4604      	mov	r4, r0
   1f240:	460e      	mov	r6, r1
   1f242:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
   1f244:	d114      	bne.n	1f270 <lv_label_signal+0x38>
    switch(type) {
   1f246:	7813      	ldrb	r3, [r2, #0]
   1f248:	b14b      	cbz	r3, 1f25e <lv_label_signal+0x26>
        info->result = lv_label_get_style(label, info->part);
   1f24a:	2300      	movs	r3, #0
   1f24c:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
   1f24e:	4b28      	ldr	r3, [pc, #160]	; (1f2f0 <lv_label_signal+0xb8>)
   1f250:	462a      	mov	r2, r5
   1f252:	4620      	mov	r0, r4
   1f254:	681b      	ldr	r3, [r3, #0]
}
   1f256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(label, sign, param);
   1f25a:	2108      	movs	r1, #8
   1f25c:	4718      	bx	r3
            style_dsc_p = &label->style_list;
   1f25e:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
   1f262:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
   1f264:	2b00      	cmp	r3, #0
   1f266:	d0f2      	beq.n	1f24e <lv_label_signal+0x16>
   1f268:	2701      	movs	r7, #1
}
   1f26a:	4638      	mov	r0, r7
   1f26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(label, sign, param);
   1f270:	4b1f      	ldr	r3, [pc, #124]	; (1f2f0 <lv_label_signal+0xb8>)
   1f272:	681b      	ldr	r3, [r3, #0]
   1f274:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   1f276:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
   1f278:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
   1f27a:	d1f6      	bne.n	1f26a <lv_label_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1f27c:	2e07      	cmp	r6, #7
   1f27e:	d105      	bne.n	1f28c <lv_label_signal+0x54>
   1f280:	4628      	mov	r0, r5
   1f282:	491c      	ldr	r1, [pc, #112]	; (1f2f4 <lv_label_signal+0xbc>)
}
   1f284:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1f288:	f007 bb10 	b.w	268ac <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1f28c:	4620      	mov	r0, r4
   1f28e:	f007 fb0b 	bl	268a8 <lv_obj_get_ext_attr>
   1f292:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   1f294:	b966      	cbnz	r6, 1f2b0 <lv_label_signal+0x78>
        if(ext->static_txt == 0) {
   1f296:	7c03      	ldrb	r3, [r0, #16]
   1f298:	f013 0508 	ands.w	r5, r3, #8
   1f29c:	d104      	bne.n	1f2a8 <lv_label_signal+0x70>
            lv_mem_free(ext->text);
   1f29e:	6800      	ldr	r0, [r0, #0]
   1f2a0:	f7fe f9aa 	bl	1d5f8 <lv_mem_free>
            ext->text = NULL;
   1f2a4:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
   1f2a8:	4620      	mov	r0, r4
   1f2aa:	f00b fb62 	bl	2a972 <lv_label_dot_tmp_free>
   1f2ae:	e7dc      	b.n	1f26a <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1f2b0:	2e04      	cmp	r6, #4
   1f2b2:	d106      	bne.n	1f2c2 <lv_label_signal+0x8a>
        lv_label_revert_dots(label);
   1f2b4:	4620      	mov	r0, r4
   1f2b6:	f7ff fc51 	bl	1eb5c <lv_label_revert_dots>
        lv_label_refr_text(label);
   1f2ba:	4620      	mov	r0, r4
   1f2bc:	f7ff fddc 	bl	1ee78 <lv_label_refr_text>
   1f2c0:	e7d3      	b.n	1f26a <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_COORD_CHG) {
   1f2c2:	2e02      	cmp	r6, #2
   1f2c4:	d1d0      	bne.n	1f268 <lv_label_signal+0x30>
   1f2c6:	8a23      	ldrh	r3, [r4, #16]
   1f2c8:	8aa2      	ldrh	r2, [r4, #20]
   1f2ca:	8829      	ldrh	r1, [r5, #0]
   1f2cc:	1ad2      	subs	r2, r2, r3
   1f2ce:	88ab      	ldrh	r3, [r5, #4]
   1f2d0:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1f2d2:	b212      	sxth	r2, r2
   1f2d4:	b21b      	sxth	r3, r3
   1f2d6:	429a      	cmp	r2, r3
   1f2d8:	d1ec      	bne.n	1f2b4 <lv_label_signal+0x7c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f2da:	8a63      	ldrh	r3, [r4, #18]
   1f2dc:	8ae2      	ldrh	r2, [r4, #22]
   1f2de:	8869      	ldrh	r1, [r5, #2]
   1f2e0:	1ad2      	subs	r2, r2, r3
   1f2e2:	88eb      	ldrh	r3, [r5, #6]
   1f2e4:	1a5b      	subs	r3, r3, r1
   1f2e6:	b212      	sxth	r2, r2
   1f2e8:	b21b      	sxth	r3, r3
   1f2ea:	429a      	cmp	r2, r3
   1f2ec:	d1e2      	bne.n	1f2b4 <lv_label_signal+0x7c>
   1f2ee:	e7bb      	b.n	1f268 <lv_label_signal+0x30>
   1f2f0:	20004064 	.word	0x20004064
   1f2f4:	0003927d 	.word	0x0003927d

0001f2f8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1f2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2fa:	4b10      	ldr	r3, [pc, #64]	; (1f33c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1f2fc:	4f10      	ldr	r7, [pc, #64]	; (1f340 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2fe:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1f302:	3001      	adds	r0, #1
   1f304:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f308:	42ae      	cmp	r6, r5
   1f30a:	d800      	bhi.n	1f30e <z_sys_init_run_level+0x16>
		}
	}
}
   1f30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1f30e:	e9d5 3400 	ldrd	r3, r4, [r5]
   1f312:	4620      	mov	r0, r4
   1f314:	4798      	blx	r3
   1f316:	b170      	cbz	r0, 1f336 <z_sys_init_run_level+0x3e>
   1f318:	b16c      	cbz	r4, 1f336 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1f31a:	1be4      	subs	r4, r4, r7
   1f31c:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f31e:	0961      	lsrs	r1, r4, #5
   1f320:	4a08      	ldr	r2, [pc, #32]	; (1f344 <z_sys_init_run_level+0x4c>)
   1f322:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f326:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1f32a:	2301      	movs	r3, #1
   1f32c:	fa03 f404 	lsl.w	r4, r3, r4
   1f330:	4304      	orrs	r4, r0
   1f332:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f336:	3508      	adds	r5, #8
   1f338:	e7e6      	b.n	1f308 <z_sys_init_run_level+0x10>
   1f33a:	bf00      	nop
   1f33c:	0002d9a0 	.word	0x0002d9a0
   1f340:	20000aac 	.word	0x20000aac
   1f344:	20000b1c 	.word	0x20000b1c

0001f348 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1f348:	4b08      	ldr	r3, [pc, #32]	; (1f36c <z_device_ready+0x24>)
   1f34a:	1ac0      	subs	r0, r0, r3
   1f34c:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f34e:	4b08      	ldr	r3, [pc, #32]	; (1f370 <z_device_ready+0x28>)
   1f350:	0942      	lsrs	r2, r0, #5
   1f352:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f356:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1f35a:	2301      	movs	r3, #1
   1f35c:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1f360:	4210      	tst	r0, r2
}
   1f362:	bf0c      	ite	eq
   1f364:	4618      	moveq	r0, r3
   1f366:	2000      	movne	r0, #0
   1f368:	4770      	bx	lr
   1f36a:	bf00      	nop
   1f36c:	20000aac 	.word	0x20000aac
   1f370:	20000b1c 	.word	0x20000b1c

0001f374 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1f374:	4911      	ldr	r1, [pc, #68]	; (1f3bc <z_impl_device_get_binding+0x48>)
{
   1f376:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1f378:	4c11      	ldr	r4, [pc, #68]	; (1f3c0 <z_impl_device_get_binding+0x4c>)
{
   1f37a:	4605      	mov	r5, r0
   1f37c:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1f37e:	428c      	cmp	r4, r1
   1f380:	d104      	bne.n	1f38c <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f382:	4c0f      	ldr	r4, [pc, #60]	; (1f3c0 <z_impl_device_get_binding+0x4c>)
   1f384:	42b4      	cmp	r4, r6
   1f386:	d10a      	bne.n	1f39e <z_impl_device_get_binding+0x2a>
	return NULL;
   1f388:	2400      	movs	r4, #0
   1f38a:	e014      	b.n	1f3b6 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f38c:	4620      	mov	r0, r4
   1f38e:	f7ff ffdb 	bl	1f348 <z_device_ready>
   1f392:	b110      	cbz	r0, 1f39a <z_impl_device_get_binding+0x26>
   1f394:	6823      	ldr	r3, [r4, #0]
   1f396:	42ab      	cmp	r3, r5
   1f398:	d00d      	beq.n	1f3b6 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f39a:	3410      	adds	r4, #16
   1f39c:	e7ef      	b.n	1f37e <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f39e:	4620      	mov	r0, r4
   1f3a0:	f7ff ffd2 	bl	1f348 <z_device_ready>
   1f3a4:	b908      	cbnz	r0, 1f3aa <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f3a6:	3410      	adds	r4, #16
   1f3a8:	e7ec      	b.n	1f384 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f3aa:	6821      	ldr	r1, [r4, #0]
   1f3ac:	4628      	mov	r0, r5
   1f3ae:	f7e1 f863 	bl	478 <strcmp>
   1f3b2:	2800      	cmp	r0, #0
   1f3b4:	d1f7      	bne.n	1f3a6 <z_impl_device_get_binding+0x32>
}
   1f3b6:	4620      	mov	r0, r4
   1f3b8:	bd70      	pop	{r4, r5, r6, pc}
   1f3ba:	bf00      	nop
   1f3bc:	20000b1c 	.word	0x20000b1c
   1f3c0:	20000aac 	.word	0x20000aac

0001f3c4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f3c4:	b510      	push	{r4, lr}
   1f3c6:	4604      	mov	r4, r0
	z_impl_log_panic();
   1f3c8:	f7e3 fd86 	bl	2ed8 <z_impl_log_panic>
   1f3cc:	4b06      	ldr	r3, [pc, #24]	; (1f3e8 <k_sys_fatal_error_handler+0x24>)
   1f3ce:	4907      	ldr	r1, [pc, #28]	; (1f3ec <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f3d0:	4807      	ldr	r0, [pc, #28]	; (1f3f0 <k_sys_fatal_error_handler+0x2c>)
   1f3d2:	1ac9      	subs	r1, r1, r3
   1f3d4:	08c9      	lsrs	r1, r1, #3
   1f3d6:	0189      	lsls	r1, r1, #6
   1f3d8:	f041 0101 	orr.w	r1, r1, #1
   1f3dc:	f004 f928 	bl	23630 <log_0>
	arch_system_halt(reason);
   1f3e0:	4620      	mov	r0, r4
   1f3e2:	f00b fccc 	bl	2ad7e <arch_system_halt>
   1f3e6:	bf00      	nop
   1f3e8:	0002bfa8 	.word	0x0002bfa8
   1f3ec:	0002c0d8 	.word	0x0002c0d8
   1f3f0:	000392ab 	.word	0x000392ab

0001f3f4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f3f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f3f8:	4606      	mov	r6, r0
   1f3fa:	460f      	mov	r7, r1
	__asm__ volatile(
   1f3fc:	f04f 0320 	mov.w	r3, #32
   1f400:	f3ef 8811 	mrs	r8, BASEPRI
   1f404:	f383 8811 	msr	BASEPRI, r3
   1f408:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f40c:	f000 fe60 	bl	200d0 <z_impl_k_current_get>
   1f410:	4c1f      	ldr	r4, [pc, #124]	; (1f490 <z_fatal_error+0x9c>)
   1f412:	4b20      	ldr	r3, [pc, #128]	; (1f494 <z_fatal_error+0xa0>)
   1f414:	1ae4      	subs	r4, r4, r3
   1f416:	2e04      	cmp	r6, #4
   1f418:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f41c:	bf96      	itet	ls
   1f41e:	4a1e      	ldrls	r2, [pc, #120]	; (1f498 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f420:	4a1e      	ldrhi	r2, [pc, #120]	; (1f49c <z_fatal_error+0xa8>)
   1f422:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1f426:	01a4      	lsls	r4, r4, #6
   1f428:	f044 0301 	orr.w	r3, r4, #1
   1f42c:	4605      	mov	r5, r0
   1f42e:	f8ad 3000 	strh.w	r3, [sp]
   1f432:	481b      	ldr	r0, [pc, #108]	; (1f4a0 <z_fatal_error+0xac>)
   1f434:	2300      	movs	r3, #0
   1f436:	4631      	mov	r1, r6
   1f438:	f004 f934 	bl	236a4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f43c:	b147      	cbz	r7, 1f450 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f43e:	69fb      	ldr	r3, [r7, #28]
   1f440:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f444:	b123      	cbz	r3, 1f450 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f446:	4817      	ldr	r0, [pc, #92]	; (1f4a4 <z_fatal_error+0xb0>)
   1f448:	f044 0101 	orr.w	r1, r4, #1
   1f44c:	f004 f8f0 	bl	23630 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f450:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1f454:	b12d      	cbz	r5, 1f462 <z_fatal_error+0x6e>
   1f456:	4628      	mov	r0, r5
   1f458:	f00b ff07 	bl	2b26a <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f45c:	b108      	cbz	r0, 1f462 <z_fatal_error+0x6e>
   1f45e:	7803      	ldrb	r3, [r0, #0]
   1f460:	b903      	cbnz	r3, 1f464 <z_fatal_error+0x70>
		thread_name = "unknown";
   1f462:	4811      	ldr	r0, [pc, #68]	; (1f4a8 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1f464:	f7e3 fbb4 	bl	2bd0 <log_strdup>
   1f468:	4623      	mov	r3, r4
   1f46a:	4602      	mov	r2, r0
   1f46c:	4629      	mov	r1, r5
   1f46e:	480f      	ldr	r0, [pc, #60]	; (1f4ac <z_fatal_error+0xb8>)
   1f470:	f004 f8ff 	bl	23672 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f474:	4639      	mov	r1, r7
   1f476:	4630      	mov	r0, r6
   1f478:	f7ff ffa4 	bl	1f3c4 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f47c:	f388 8811 	msr	BASEPRI, r8
   1f480:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f484:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f486:	b002      	add	sp, #8
   1f488:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f48c:	f7e5 bb56 	b.w	4b3c <z_impl_k_thread_abort>
   1f490:	0002c0d8 	.word	0x0002c0d8
   1f494:	0002bfa8 	.word	0x0002bfa8
   1f498:	0002d9b8 	.word	0x0002d9b8
   1f49c:	000392ba 	.word	0x000392ba
   1f4a0:	000392d0 	.word	0x000392d0
   1f4a4:	000392f8 	.word	0x000392f8
   1f4a8:	000392c8 	.word	0x000392c8
   1f4ac:	00039319 	.word	0x00039319

0001f4b0 <z_pm_save_idle_exit>:
}
#endif /* !SMP_FALLBACK */


void z_pm_save_idle_exit(int32_t ticks)
{
   1f4b0:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   1f4b2:	4b04      	ldr	r3, [pc, #16]	; (1f4c4 <z_pm_save_idle_exit+0x14>)
   1f4b4:	781b      	ldrb	r3, [r3, #0]
   1f4b6:	b10b      	cbz	r3, 1f4bc <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   1f4b8:	f7e4 f9c8 	bl	384c <pm_system_resume>
	}
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}
   1f4bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   1f4c0:	f004 bd76 	b.w	23fb0 <z_clock_idle_exit>
   1f4c4:	2000875a 	.word	0x2000875a

0001f4c8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1f4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1f4cc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1f540 <idle+0x78>
	pm_idle_exit_notify = 1U;
   1f4d0:	4e1a      	ldr	r6, [pc, #104]	; (1f53c <idle+0x74>)
{
   1f4d2:	4605      	mov	r5, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f4d4:	2701      	movs	r7, #1
	__asm__ volatile(
   1f4d6:	f04f 0220 	mov.w	r2, #32
   1f4da:	f3ef 8311 	mrs	r3, BASEPRI
   1f4de:	f382 8811 	msr	BASEPRI, r2
   1f4e2:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1f4e6:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1f4e8:	b190      	cbz	r0, 1f510 <idle+0x48>
			cpu->pending_abort = NULL;
   1f4ea:	2200      	movs	r2, #0
   1f4ec:	612a      	str	r2, [r5, #16]
	__asm__ volatile(
   1f4ee:	f383 8811 	msr	BASEPRI, r3
   1f4f2:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1f4f6:	f000 fc1b 	bl	1fd30 <z_thread_single_abort>
	__asm__ volatile(
   1f4fa:	f04f 0320 	mov.w	r3, #32
   1f4fe:	f3ef 8011 	mrs	r0, BASEPRI
   1f502:	f383 8811 	msr	BASEPRI, r3
   1f506:	f3bf 8f6f 	isb	sy
   1f50a:	f00b fdbf 	bl	2b08c <z_reschedule_irqlock>
			continue;
   1f50e:	e7e2      	b.n	1f4d6 <idle+0xe>
		int32_t ticks = z_get_next_timeout_expiry();
   1f510:	f00b ff3c 	bl	2b38c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f514:	2101      	movs	r1, #1
   1f516:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1f518:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f51a:	bfd8      	it	le
   1f51c:	4608      	movle	r0, r1
   1f51e:	f00b ff45 	bl	2b3ac <z_set_timeout_expiry>
	idle_state = pm_system_suspend(ticks);
   1f522:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   1f524:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   1f528:	7037      	strb	r7, [r6, #0]
	idle_state = pm_system_suspend(ticks);
   1f52a:	f7e4 f953 	bl	37d4 <pm_system_suspend>
	if (idle_state == PM_STATE_ACTIVE) {
   1f52e:	2800      	cmp	r0, #0
   1f530:	d1d1      	bne.n	1f4d6 <idle+0xe>
		pm_idle_exit_notify = 0U;
   1f532:	7030      	strb	r0, [r6, #0]
	arch_cpu_idle();
   1f534:	f7e5 f822 	bl	457c <arch_cpu_idle>
}
   1f538:	e7cd      	b.n	1f4d6 <idle+0xe>
   1f53a:	bf00      	nop
   1f53c:	2000875a 	.word	0x2000875a
   1f540:	20004068 	.word	0x20004068

0001f544 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f544:	4802      	ldr	r0, [pc, #8]	; (1f550 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1f546:	4a03      	ldr	r2, [pc, #12]	; (1f554 <z_bss_zero+0x10>)
   1f548:	2100      	movs	r1, #0
   1f54a:	1a12      	subs	r2, r2, r0
   1f54c:	f00c b952 	b.w	2b7f4 <memset>
   1f550:	20000d78 	.word	0x20000d78
   1f554:	20008778 	.word	0x20008778

0001f558 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f558:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f55a:	4b0a      	ldr	r3, [pc, #40]	; (1f584 <bg_thread_main+0x2c>)
   1f55c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f55e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f560:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f562:	f7ff fec9 	bl	1f2f8 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f566:	f00b fefa 	bl	2b35e <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f56a:	2003      	movs	r0, #3
   1f56c:	f7ff fec4 	bl	1f2f8 <z_sys_init_run_level>

	z_init_static_threads();
   1f570:	f000 fe78 	bl	20264 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f574:	f003 fb81 	bl	22c7a <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f578:	4a03      	ldr	r2, [pc, #12]	; (1f588 <bg_thread_main+0x30>)
   1f57a:	7b13      	ldrb	r3, [r2, #12]
   1f57c:	f023 0301 	bic.w	r3, r3, #1
   1f580:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f582:	bd08      	pop	{r3, pc}
   1f584:	2000875b 	.word	0x2000875b
   1f588:	200013d0 	.word	0x200013d0

0001f58c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f58c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f590:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f592:	f7e3 fa75 	bl	2a80 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f596:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1f68c <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f59a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f59e:	4d33      	ldr	r5, [pc, #204]	; (1f66c <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1f5a0:	4e33      	ldr	r6, [pc, #204]	; (1f670 <z_cstart+0xe4>)
   1f5a2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f5a4:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1f690 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1f5a8:	4f32      	ldr	r7, [pc, #200]	; (1f674 <z_cstart+0xe8>)
   1f5aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f5ae:	2400      	movs	r4, #0
   1f5b0:	616b      	str	r3, [r5, #20]
   1f5b2:	23e0      	movs	r3, #224	; 0xe0
   1f5b4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f5b8:	77ec      	strb	r4, [r5, #31]
   1f5ba:	762c      	strb	r4, [r5, #24]
   1f5bc:	766c      	strb	r4, [r5, #25]
   1f5be:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f5c0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f5c2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f5c6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f5c8:	f7e5 fa96 	bl	4af8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f5cc:	f7e4 ffd0 	bl	4570 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f5d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f5d4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f5d6:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f5d8:	4d27      	ldr	r5, [pc, #156]	; (1f678 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f5da:	f240 1301 	movw	r3, #257	; 0x101
   1f5de:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f5e2:	ab06      	add	r3, sp, #24
   1f5e4:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f5e6:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f5e8:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1f5ec:	f7ff fe84 	bl	1f2f8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f5f0:	2001      	movs	r0, #1
   1f5f2:	f7ff fe81 	bl	1f2f8 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f5f6:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1f5fa:	f000 fced 	bl	1ffd8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f5fe:	4b1f      	ldr	r3, [pc, #124]	; (1f67c <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1f600:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f602:	491f      	ldr	r1, [pc, #124]	; (1f680 <z_cstart+0xf4>)
   1f604:	9305      	str	r3, [sp, #20]
   1f606:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f60a:	4653      	mov	r3, sl
   1f60c:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1f610:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f614:	9400      	str	r4, [sp, #0]
   1f616:	4630      	mov	r0, r6
   1f618:	f000 fdc8 	bl	201ac <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f61c:	7b73      	ldrb	r3, [r6, #13]
   1f61e:	4680      	mov	r8, r0
   1f620:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1f624:	4630      	mov	r0, r6
   1f626:	7373      	strb	r3, [r6, #13]
   1f628:	f00b fd72 	bl	2b110 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1f62c:	230f      	movs	r3, #15
   1f62e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1f632:	4914      	ldr	r1, [pc, #80]	; (1f684 <z_cstart+0xf8>)
   1f634:	4b14      	ldr	r3, [pc, #80]	; (1f688 <z_cstart+0xfc>)
   1f636:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f63a:	e9cd b404 	strd	fp, r4, [sp, #16]
   1f63e:	e9cd 5400 	strd	r5, r4, [sp]
   1f642:	4638      	mov	r0, r7
   1f644:	f000 fdb2 	bl	201ac <z_setup_new_thread>
   1f648:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f64a:	60ef      	str	r7, [r5, #12]
   1f64c:	f023 0304 	bic.w	r3, r3, #4
   1f650:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f652:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1f656:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1f65a:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1f65c:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f660:	4652      	mov	r2, sl
   1f662:	4641      	mov	r1, r8
   1f664:	4630      	mov	r0, r6
   1f666:	f7e4 ff6b 	bl	4540 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f66a:	bf00      	nop
   1f66c:	e000ed00 	.word	0xe000ed00
   1f670:	200013d0 	.word	0x200013d0
   1f674:	20001348 	.word	0x20001348
   1f678:	20004068 	.word	0x20004068
   1f67c:	0003937b 	.word	0x0003937b
   1f680:	20009880 	.word	0x20009880
   1f684:	2000a080 	.word	0x2000a080
   1f688:	0001f4c9 	.word	0x0001f4c9
   1f68c:	2000a9c0 	.word	0x2000a9c0
   1f690:	0001f559 	.word	0x0001f559

0001f694 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1f694:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f696:	4c06      	ldr	r4, [pc, #24]	; (1f6b0 <statics_init+0x1c>)
   1f698:	4d06      	ldr	r5, [pc, #24]	; (1f6b4 <statics_init+0x20>)
   1f69a:	42ac      	cmp	r4, r5
   1f69c:	d301      	bcc.n	1f6a2 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1f69e:	2000      	movs	r0, #0
   1f6a0:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f6a2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f6a6:	4620      	mov	r0, r4
   1f6a8:	f00b fb72 	bl	2ad90 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f6ac:	3414      	adds	r4, #20
   1f6ae:	e7f4      	b.n	1f69a <statics_init+0x6>
   1f6b0:	20000bac 	.word	0x20000bac
   1f6b4:	20000bc0 	.word	0x20000bc0

0001f6b8 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f6b8:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f6ba:	4b0e      	ldr	r3, [pc, #56]	; (1f6f4 <init_mem_slab_module+0x3c>)
   1f6bc:	4c0e      	ldr	r4, [pc, #56]	; (1f6f8 <init_mem_slab_module+0x40>)
   1f6be:	42a3      	cmp	r3, r4
   1f6c0:	d301      	bcc.n	1f6c6 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1f6c2:	2000      	movs	r0, #0
	return rc;
}
   1f6c4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f6c6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1f6ca:	ea41 0200 	orr.w	r2, r1, r0
   1f6ce:	f012 0203 	ands.w	r2, r2, #3
   1f6d2:	d10b      	bne.n	1f6ec <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1f6d4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f6d6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f6d8:	42aa      	cmp	r2, r5
   1f6da:	d101      	bne.n	1f6e0 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f6dc:	331c      	adds	r3, #28
   1f6de:	e7ee      	b.n	1f6be <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1f6e0:	695e      	ldr	r6, [r3, #20]
   1f6e2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f6e4:	3201      	adds	r2, #1
		slab->free_list = p;
   1f6e6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1f6e8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1f6ea:	e7f5      	b.n	1f6d8 <init_mem_slab_module+0x20>
		return -EINVAL;
   1f6ec:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1f6f0:	e7e8      	b.n	1f6c4 <init_mem_slab_module+0xc>
   1f6f2:	bf00      	nop
   1f6f4:	20000b58 	.word	0x20000b58
   1f6f8:	20000bac 	.word	0x20000bac

0001f6fc <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f6fc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1f6fe:	460c      	mov	r4, r1
   1f700:	4616      	mov	r6, r2
   1f702:	461f      	mov	r7, r3
   1f704:	f04f 0320 	mov.w	r3, #32
   1f708:	f3ef 8111 	mrs	r1, BASEPRI
   1f70c:	f383 8811 	msr	BASEPRI, r3
   1f710:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f714:	6943      	ldr	r3, [r0, #20]
   1f716:	b15b      	cbz	r3, 1f730 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1f718:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f71a:	681b      	ldr	r3, [r3, #0]
   1f71c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f71e:	6983      	ldr	r3, [r0, #24]
   1f720:	3301      	adds	r3, #1
   1f722:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f724:	2000      	movs	r0, #0
	__asm__ volatile(
   1f726:	f381 8811 	msr	BASEPRI, r1
   1f72a:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f72e:	e011      	b.n	1f754 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f730:	ea56 0207 	orrs.w	r2, r6, r7
   1f734:	d103      	bne.n	1f73e <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1f736:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1f738:	f06f 000b 	mvn.w	r0, #11
   1f73c:	e7f3      	b.n	1f726 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f73e:	4602      	mov	r2, r0
   1f740:	e9cd 6700 	strd	r6, r7, [sp]
   1f744:	4804      	ldr	r0, [pc, #16]	; (1f758 <k_mem_slab_alloc+0x5c>)
   1f746:	f000 fbb5 	bl	1feb4 <z_pend_curr>
		if (result == 0) {
   1f74a:	b918      	cbnz	r0, 1f754 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1f74c:	4b03      	ldr	r3, [pc, #12]	; (1f75c <k_mem_slab_alloc+0x60>)
   1f74e:	689b      	ldr	r3, [r3, #8]
   1f750:	695b      	ldr	r3, [r3, #20]
   1f752:	6023      	str	r3, [r4, #0]
}
   1f754:	b002      	add	sp, #8
   1f756:	bdd0      	pop	{r4, r6, r7, pc}
   1f758:	2000875c 	.word	0x2000875c
   1f75c:	20004068 	.word	0x20004068

0001f760 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f762:	4604      	mov	r4, r0
   1f764:	460d      	mov	r5, r1
	__asm__ volatile(
   1f766:	f04f 0320 	mov.w	r3, #32
   1f76a:	f3ef 8611 	mrs	r6, BASEPRI
   1f76e:	f383 8811 	msr	BASEPRI, r3
   1f772:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1f776:	6947      	ldr	r7, [r0, #20]
   1f778:	b977      	cbnz	r7, 1f798 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f77a:	f00b fd24 	bl	2b1c6 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f77e:	b158      	cbz	r0, 1f798 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f780:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f782:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f784:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1f788:	f00b fcc2 	bl	2b110 <z_ready_thread>
			z_reschedule(&lock, key);
   1f78c:	4631      	mov	r1, r6
   1f78e:	4809      	ldr	r0, [pc, #36]	; (1f7b4 <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1f790:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1f794:	f000 b946 	b.w	1fa24 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f798:	682b      	ldr	r3, [r5, #0]
   1f79a:	6962      	ldr	r2, [r4, #20]
   1f79c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f79e:	682b      	ldr	r3, [r5, #0]
   1f7a0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1f7a2:	69a3      	ldr	r3, [r4, #24]
   1f7a4:	3b01      	subs	r3, #1
   1f7a6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f7a8:	f386 8811 	msr	BASEPRI, r6
   1f7ac:	f3bf 8f6f 	isb	sy
}
   1f7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f7b2:	bf00      	nop
   1f7b4:	2000875c 	.word	0x2000875c

0001f7b8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f7b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f7bc:	4604      	mov	r4, r0
   1f7be:	4616      	mov	r6, r2
   1f7c0:	461f      	mov	r7, r3
	__asm__ volatile(
   1f7c2:	f04f 0320 	mov.w	r3, #32
   1f7c6:	f3ef 8811 	mrs	r8, BASEPRI
   1f7ca:	f383 8811 	msr	BASEPRI, r3
   1f7ce:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f7d2:	68c3      	ldr	r3, [r0, #12]
   1f7d4:	4a32      	ldr	r2, [pc, #200]	; (1f8a0 <z_impl_k_mutex_lock+0xe8>)
   1f7d6:	b16b      	cbz	r3, 1f7f4 <z_impl_k_mutex_lock+0x3c>
   1f7d8:	6880      	ldr	r0, [r0, #8]
   1f7da:	6891      	ldr	r1, [r2, #8]
   1f7dc:	4288      	cmp	r0, r1
   1f7de:	d019      	beq.n	1f814 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f7e0:	ea56 0307 	orrs.w	r3, r6, r7
   1f7e4:	d118      	bne.n	1f818 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f7e6:	f388 8811 	msr	BASEPRI, r8
   1f7ea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1f7ee:	f06f 000f 	mvn.w	r0, #15
   1f7f2:	e00c      	b.n	1f80e <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1f7f4:	6891      	ldr	r1, [r2, #8]
   1f7f6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f7fa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f7fc:	3301      	adds	r3, #1
   1f7fe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f800:	6893      	ldr	r3, [r2, #8]
   1f802:	60a3      	str	r3, [r4, #8]
   1f804:	f388 8811 	msr	BASEPRI, r8
   1f808:	f3bf 8f6f 	isb	sy
		return 0;
   1f80c:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1f80e:	b002      	add	sp, #8
   1f810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f814:	6921      	ldr	r1, [r4, #16]
   1f816:	e7f0      	b.n	1f7fa <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f818:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f81c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f820:	4299      	cmp	r1, r3
   1f822:	bfa8      	it	ge
   1f824:	4619      	movge	r1, r3
   1f826:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f82a:	428b      	cmp	r3, r1
   1f82c:	dd2c      	ble.n	1f888 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1f82e:	f000 fb8f 	bl	1ff50 <z_set_prio>
   1f832:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f834:	e9cd 6700 	strd	r6, r7, [sp]
   1f838:	481a      	ldr	r0, [pc, #104]	; (1f8a4 <z_impl_k_mutex_lock+0xec>)
   1f83a:	4622      	mov	r2, r4
   1f83c:	4641      	mov	r1, r8
   1f83e:	f000 fb39 	bl	1feb4 <z_pend_curr>
	if (got_mutex == 0) {
   1f842:	2800      	cmp	r0, #0
   1f844:	d0e3      	beq.n	1f80e <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1f846:	f04f 0320 	mov.w	r3, #32
   1f84a:	f3ef 8611 	mrs	r6, BASEPRI
   1f84e:	f383 8811 	msr	BASEPRI, r3
   1f852:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f856:	6823      	ldr	r3, [r4, #0]
   1f858:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f85a:	42a3      	cmp	r3, r4
   1f85c:	d007      	beq.n	1f86e <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f85e:	b133      	cbz	r3, 1f86e <z_impl_k_mutex_lock+0xb6>
   1f860:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f864:	4299      	cmp	r1, r3
   1f866:	bfa8      	it	ge
   1f868:	4619      	movge	r1, r3
   1f86a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f86e:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f870:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f874:	4299      	cmp	r1, r3
   1f876:	d109      	bne.n	1f88c <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1f878:	b16d      	cbz	r5, 1f896 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1f87a:	480a      	ldr	r0, [pc, #40]	; (1f8a4 <z_impl_k_mutex_lock+0xec>)
   1f87c:	4631      	mov	r1, r6
   1f87e:	f000 f8d1 	bl	1fa24 <z_reschedule>
	return -EAGAIN;
   1f882:	f06f 000a 	mvn.w	r0, #10
   1f886:	e7c2      	b.n	1f80e <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1f888:	2500      	movs	r5, #0
   1f88a:	e7d3      	b.n	1f834 <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1f88c:	f000 fb60 	bl	1ff50 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f890:	2800      	cmp	r0, #0
   1f892:	d1f2      	bne.n	1f87a <z_impl_k_mutex_lock+0xc2>
   1f894:	e7f0      	b.n	1f878 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1f896:	f386 8811 	msr	BASEPRI, r6
   1f89a:	f3bf 8f6f 	isb	sy
   1f89e:	e7f0      	b.n	1f882 <z_impl_k_mutex_lock+0xca>
   1f8a0:	20004068 	.word	0x20004068
   1f8a4:	2000875c 	.word	0x2000875c

0001f8a8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f8a8:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1f8aa:	6883      	ldr	r3, [r0, #8]
{
   1f8ac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f8ae:	2b00      	cmp	r3, #0
   1f8b0:	d037      	beq.n	1f922 <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f8b2:	4a1f      	ldr	r2, [pc, #124]	; (1f930 <z_impl_k_mutex_unlock+0x88>)
   1f8b4:	6892      	ldr	r2, [r2, #8]
   1f8b6:	4293      	cmp	r3, r2
   1f8b8:	d136      	bne.n	1f928 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1f8ba:	7bda      	ldrb	r2, [r3, #15]
   1f8bc:	3a01      	subs	r2, #1
   1f8be:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1f8c0:	68c3      	ldr	r3, [r0, #12]
   1f8c2:	2b01      	cmp	r3, #1
   1f8c4:	d005      	beq.n	1f8d2 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1f8c6:	3b01      	subs	r3, #1
   1f8c8:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1f8ca:	f000 f90f 	bl	1faec <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1f8ce:	2000      	movs	r0, #0
}
   1f8d0:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f8d2:	f04f 0320 	mov.w	r3, #32
   1f8d6:	f3ef 8511 	mrs	r5, BASEPRI
   1f8da:	f383 8811 	msr	BASEPRI, r3
   1f8de:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f8e2:	6901      	ldr	r1, [r0, #16]
   1f8e4:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f8e6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f8ea:	4299      	cmp	r1, r3
   1f8ec:	d001      	beq.n	1f8f2 <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1f8ee:	f000 fb2f 	bl	1ff50 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f8f2:	4620      	mov	r0, r4
   1f8f4:	f00b fc67 	bl	2b1c6 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f8f8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f8fa:	b160      	cbz	r0, 1f916 <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f8fc:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f900:	6122      	str	r2, [r4, #16]
   1f902:	2200      	movs	r2, #0
   1f904:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1f908:	f00b fc02 	bl	2b110 <z_ready_thread>
		z_reschedule(&lock, key);
   1f90c:	4809      	ldr	r0, [pc, #36]	; (1f934 <z_impl_k_mutex_unlock+0x8c>)
   1f90e:	4629      	mov	r1, r5
   1f910:	f000 f888 	bl	1fa24 <z_reschedule>
   1f914:	e7d9      	b.n	1f8ca <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1f916:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1f918:	f385 8811 	msr	BASEPRI, r5
   1f91c:	f3bf 8f6f 	isb	sy
   1f920:	e7d3      	b.n	1f8ca <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1f922:	f06f 0015 	mvn.w	r0, #21
   1f926:	e7d3      	b.n	1f8d0 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1f928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f92c:	e7d0      	b.n	1f8d0 <z_impl_k_mutex_unlock+0x28>
   1f92e:	bf00      	nop
   1f930:	20004068 	.word	0x20004068
   1f934:	2000875c 	.word	0x2000875c

0001f938 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f93a:	4616      	mov	r6, r2
   1f93c:	461f      	mov	r7, r3
	__asm__ volatile(
   1f93e:	f04f 0320 	mov.w	r3, #32
   1f942:	f3ef 8511 	mrs	r5, BASEPRI
   1f946:	f383 8811 	msr	BASEPRI, r3
   1f94a:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1f94e:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f950:	b19c      	cbz	r4, 1f97a <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f952:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f954:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f956:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f95a:	4294      	cmp	r4, r2
	list->head = node;
   1f95c:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1f95e:	bf08      	it	eq
   1f960:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f962:	2101      	movs	r1, #1
   1f964:	4620      	mov	r0, r4
   1f966:	f00b faff 	bl	2af68 <z_queue_node_peek>
   1f96a:	4604      	mov	r4, r0
	__asm__ volatile(
   1f96c:	f385 8811 	msr	BASEPRI, r5
   1f970:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f974:	4620      	mov	r0, r4
   1f976:	b003      	add	sp, #12
   1f978:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f97a:	ea56 0307 	orrs.w	r3, r6, r7
   1f97e:	d0f5      	beq.n	1f96c <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f980:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f984:	e9cd 6700 	strd	r6, r7, [sp]
   1f988:	4629      	mov	r1, r5
   1f98a:	4610      	mov	r0, r2
   1f98c:	f000 fa92 	bl	1feb4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f990:	2800      	cmp	r0, #0
   1f992:	d1ef      	bne.n	1f974 <z_impl_k_queue_get+0x3c>
   1f994:	4b01      	ldr	r3, [pc, #4]	; (1f99c <z_impl_k_queue_get+0x64>)
   1f996:	689b      	ldr	r3, [r3, #8]
   1f998:	695c      	ldr	r4, [r3, #20]
   1f99a:	e7eb      	b.n	1f974 <z_impl_k_queue_get+0x3c>
   1f99c:	20004068 	.word	0x20004068

0001f9a0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1f9a0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1f9a2:	4c08      	ldr	r4, [pc, #32]	; (1f9c4 <z_reset_time_slice+0x24>)
   1f9a4:	6823      	ldr	r3, [r4, #0]
   1f9a6:	b15b      	cbz	r3, 1f9c0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f9a8:	f7e4 fb90 	bl	40cc <z_clock_elapsed>
   1f9ac:	4603      	mov	r3, r0
   1f9ae:	6820      	ldr	r0, [r4, #0]
   1f9b0:	4a05      	ldr	r2, [pc, #20]	; (1f9c8 <z_reset_time_slice+0x28>)
   1f9b2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1f9b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f9b8:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1f9ba:	2100      	movs	r1, #0
   1f9bc:	f00b bcf6 	b.w	2b3ac <z_set_timeout_expiry>
}
   1f9c0:	bd10      	pop	{r4, pc}
   1f9c2:	bf00      	nop
   1f9c4:	200040a4 	.word	0x200040a4
   1f9c8:	20004068 	.word	0x20004068

0001f9cc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9ce:	4605      	mov	r5, r0
   1f9d0:	460c      	mov	r4, r1
	__asm__ volatile(
   1f9d2:	f04f 0320 	mov.w	r3, #32
   1f9d6:	f3ef 8611 	mrs	r6, BASEPRI
   1f9da:	f383 8811 	msr	BASEPRI, r3
   1f9de:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1f9e2:	4b0d      	ldr	r3, [pc, #52]	; (1fa18 <k_sched_time_slice_set+0x4c>)
   1f9e4:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1f9e6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1f9ea:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f9ee:	2100      	movs	r1, #0
   1f9f0:	615a      	str	r2, [r3, #20]
   1f9f2:	fbe7 0105 	umlal	r0, r1, r7, r5
   1f9f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f9fa:	2300      	movs	r3, #0
   1f9fc:	f7e0 fbc0 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1fa00:	4b06      	ldr	r3, [pc, #24]	; (1fa1c <k_sched_time_slice_set+0x50>)
   1fa02:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1fa04:	4b06      	ldr	r3, [pc, #24]	; (1fa20 <k_sched_time_slice_set+0x54>)
   1fa06:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1fa08:	f7ff ffca 	bl	1f9a0 <z_reset_time_slice>
	__asm__ volatile(
   1fa0c:	f386 8811 	msr	BASEPRI, r6
   1fa10:	f3bf 8f6f 	isb	sy
	}
}
   1fa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fa16:	bf00      	nop
   1fa18:	20004068 	.word	0x20004068
   1fa1c:	200040a4 	.word	0x200040a4
   1fa20:	200040a0 	.word	0x200040a0

0001fa24 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fa24:	b949      	cbnz	r1, 1fa3a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fa26:	f3ef 8005 	mrs	r0, IPSR
   1fa2a:	b930      	cbnz	r0, 1fa3a <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1fa2c:	4b05      	ldr	r3, [pc, #20]	; (1fa44 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1fa2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1fa30:	689b      	ldr	r3, [r3, #8]
   1fa32:	429a      	cmp	r2, r3
   1fa34:	d001      	beq.n	1fa3a <z_reschedule+0x16>
	ret = arch_swap(key);
   1fa36:	f7e4 bcbf 	b.w	43b8 <arch_swap>
   1fa3a:	f381 8811 	msr	BASEPRI, r1
   1fa3e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1fa42:	4770      	bx	lr
   1fa44:	20004068 	.word	0x20004068

0001fa48 <k_sched_lock>:
	__asm__ volatile(
   1fa48:	f04f 0320 	mov.w	r3, #32
   1fa4c:	f3ef 8111 	mrs	r1, BASEPRI
   1fa50:	f383 8811 	msr	BASEPRI, r3
   1fa54:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1fa58:	4b04      	ldr	r3, [pc, #16]	; (1fa6c <k_sched_lock+0x24>)
   1fa5a:	689a      	ldr	r2, [r3, #8]
   1fa5c:	7bd3      	ldrb	r3, [r2, #15]
   1fa5e:	3b01      	subs	r3, #1
   1fa60:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1fa62:	f381 8811 	msr	BASEPRI, r1
   1fa66:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1fa6a:	4770      	bx	lr
   1fa6c:	20004068 	.word	0x20004068

0001fa70 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1fa70:	4b09      	ldr	r3, [pc, #36]	; (1fa98 <z_priq_dumb_remove+0x28>)
   1fa72:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1fa76:	4282      	cmp	r2, r0
   1fa78:	d105      	bne.n	1fa86 <z_priq_dumb_remove+0x16>
   1fa7a:	689b      	ldr	r3, [r3, #8]
   1fa7c:	428b      	cmp	r3, r1
   1fa7e:	d102      	bne.n	1fa86 <z_priq_dumb_remove+0x16>
   1fa80:	7b4b      	ldrb	r3, [r1, #13]
   1fa82:	06db      	lsls	r3, r3, #27
   1fa84:	d106      	bne.n	1fa94 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1fa86:	e9d1 3200 	ldrd	r3, r2, [r1]
   1fa8a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fa8c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fa8e:	2300      	movs	r3, #0
	node->prev = NULL;
   1fa90:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1fa94:	4770      	bx	lr
   1fa96:	bf00      	nop
   1fa98:	20004068 	.word	0x20004068

0001fa9c <update_cache>:
{
   1fa9c:	b538      	push	{r3, r4, r5, lr}
   1fa9e:	4c12      	ldr	r4, [pc, #72]	; (1fae8 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1faa0:	6923      	ldr	r3, [r4, #16]
   1faa2:	68a2      	ldr	r2, [r4, #8]
{
   1faa4:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1faa6:	b10b      	cbz	r3, 1faac <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1faa8:	68e5      	ldr	r5, [r4, #12]
   1faaa:	e00c      	b.n	1fac6 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1faac:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1fab0:	f00b fb24 	bl	2b0fc <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fab4:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fab6:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fab8:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1faba:	bf44      	itt	mi
   1fabc:	f043 0308 	orrmi.w	r3, r3, #8
   1fac0:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1fac2:	2d00      	cmp	r5, #0
   1fac4:	d0f0      	beq.n	1faa8 <update_cache+0xc>
	if (preempt_ok != 0) {
   1fac6:	b949      	cbnz	r1, 1fadc <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1fac8:	7b53      	ldrb	r3, [r2, #13]
   1faca:	06db      	lsls	r3, r3, #27
   1facc:	d106      	bne.n	1fadc <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1face:	69ab      	ldr	r3, [r5, #24]
   1fad0:	b923      	cbnz	r3, 1fadc <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fad2:	89d3      	ldrh	r3, [r2, #14]
   1fad4:	2b7f      	cmp	r3, #127	; 0x7f
   1fad6:	d901      	bls.n	1fadc <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1fad8:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1fada:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1fadc:	4295      	cmp	r5, r2
   1fade:	d001      	beq.n	1fae4 <update_cache+0x48>
			z_reset_time_slice();
   1fae0:	f7ff ff5e 	bl	1f9a0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1fae4:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1fae6:	e7f8      	b.n	1fada <update_cache+0x3e>
   1fae8:	20004068 	.word	0x20004068

0001faec <k_sched_unlock>:
{
   1faec:	b510      	push	{r4, lr}
	__asm__ volatile(
   1faee:	f04f 0320 	mov.w	r3, #32
   1faf2:	f3ef 8411 	mrs	r4, BASEPRI
   1faf6:	f383 8811 	msr	BASEPRI, r3
   1fafa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1fafe:	4b08      	ldr	r3, [pc, #32]	; (1fb20 <k_sched_unlock+0x34>)
   1fb00:	689a      	ldr	r2, [r3, #8]
   1fb02:	7bd3      	ldrb	r3, [r2, #15]
   1fb04:	3301      	adds	r3, #1
   1fb06:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1fb08:	2000      	movs	r0, #0
   1fb0a:	f7ff ffc7 	bl	1fa9c <update_cache>
	__asm__ volatile(
   1fb0e:	f384 8811 	msr	BASEPRI, r4
   1fb12:	f3bf 8f6f 	isb	sy
}
   1fb16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1fb1a:	f00b bac3 	b.w	2b0a4 <z_reschedule_unlocked>
   1fb1e:	bf00      	nop
   1fb20:	20004068 	.word	0x20004068

0001fb24 <ready_thread>:
{
   1fb24:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1fb26:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1fb2a:	7b43      	ldrb	r3, [r0, #13]
   1fb2c:	2a00      	cmp	r2, #0
   1fb2e:	db2c      	blt.n	1fb8a <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fb30:	06db      	lsls	r3, r3, #27
   1fb32:	d12a      	bne.n	1fb8a <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1fb34:	6983      	ldr	r3, [r0, #24]
   1fb36:	bb43      	cbnz	r3, 1fb8a <ready_thread+0x66>
	return list->head == list;
   1fb38:	4a15      	ldr	r2, [pc, #84]	; (1fb90 <ready_thread+0x6c>)
   1fb3a:	4611      	mov	r1, r2
   1fb3c:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fb40:	428c      	cmp	r4, r1
   1fb42:	bf18      	it	ne
   1fb44:	4623      	movne	r3, r4
   1fb46:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fb48:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1fb4a:	bf38      	it	cc
   1fb4c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fb4e:	b1b3      	cbz	r3, 1fb7e <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fb50:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fb54:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1fb58:	42ae      	cmp	r6, r5
   1fb5a:	db03      	blt.n	1fb64 <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1fb5c:	42a3      	cmp	r3, r4
   1fb5e:	d00e      	beq.n	1fb7e <ready_thread+0x5a>
   1fb60:	681b      	ldr	r3, [r3, #0]
   1fb62:	e7f4      	b.n	1fb4e <ready_thread+0x2a>
	node->prev = successor->prev;
   1fb64:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fb66:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1fb6a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1fb6c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1fb6e:	7b43      	ldrb	r3, [r0, #13]
   1fb70:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fb74:	7343      	strb	r3, [r0, #13]
}
   1fb76:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1fb78:	2000      	movs	r0, #0
   1fb7a:	f7ff bf8f 	b.w	1fa9c <update_cache>
	node->prev = list->tail;
   1fb7e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1fb82:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fb84:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1fb86:	6310      	str	r0, [r2, #48]	; 0x30
}
   1fb88:	e7f1      	b.n	1fb6e <ready_thread+0x4a>
}
   1fb8a:	bc70      	pop	{r4, r5, r6}
   1fb8c:	4770      	bx	lr
   1fb8e:	bf00      	nop
   1fb90:	20004068 	.word	0x20004068

0001fb94 <z_sched_start>:
{
   1fb94:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fb96:	f04f 0220 	mov.w	r2, #32
   1fb9a:	f3ef 8411 	mrs	r4, BASEPRI
   1fb9e:	f382 8811 	msr	BASEPRI, r2
   1fba2:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1fba6:	7b42      	ldrb	r2, [r0, #13]
   1fba8:	0751      	lsls	r1, r2, #29
   1fbaa:	d404      	bmi.n	1fbb6 <z_sched_start+0x22>
	__asm__ volatile(
   1fbac:	f384 8811 	msr	BASEPRI, r4
   1fbb0:	f3bf 8f6f 	isb	sy
}
   1fbb4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fbb6:	f022 0204 	bic.w	r2, r2, #4
   1fbba:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1fbbc:	f7ff ffb2 	bl	1fb24 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1fbc0:	4621      	mov	r1, r4
   1fbc2:	4802      	ldr	r0, [pc, #8]	; (1fbcc <z_sched_start+0x38>)
}
   1fbc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1fbc8:	f7ff bf2c 	b.w	1fa24 <z_reschedule>
   1fbcc:	2000875c 	.word	0x2000875c

0001fbd0 <move_thread_to_end_of_prio_q>:
{
   1fbd0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1fbd2:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fbd6:	2b00      	cmp	r3, #0
{
   1fbd8:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fbda:	da02      	bge.n	1fbe2 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fbdc:	4817      	ldr	r0, [pc, #92]	; (1fc3c <move_thread_to_end_of_prio_q+0x6c>)
   1fbde:	f7ff ff47 	bl	1fa70 <z_priq_dumb_remove>
	return list->head == list;
   1fbe2:	4a17      	ldr	r2, [pc, #92]	; (1fc40 <move_thread_to_end_of_prio_q+0x70>)
   1fbe4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fbe6:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1fbe8:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fbec:	4283      	cmp	r3, r0
   1fbee:	bf08      	it	eq
   1fbf0:	2300      	moveq	r3, #0
   1fbf2:	2b00      	cmp	r3, #0
   1fbf4:	bf38      	it	cc
   1fbf6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fbf8:	b1d3      	cbz	r3, 1fc30 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fbfa:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1fbfe:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1fc02:	42ae      	cmp	r6, r5
   1fc04:	db03      	blt.n	1fc0e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1fc06:	42a3      	cmp	r3, r4
   1fc08:	d012      	beq.n	1fc30 <move_thread_to_end_of_prio_q+0x60>
   1fc0a:	681b      	ldr	r3, [r3, #0]
   1fc0c:	e7f4      	b.n	1fbf8 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1fc0e:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1fc10:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1fc14:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1fc16:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1fc18:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1fc1a:	6890      	ldr	r0, [r2, #8]
   1fc1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fc20:	734b      	strb	r3, [r1, #13]
   1fc22:	1a43      	subs	r3, r0, r1
   1fc24:	4258      	negs	r0, r3
}
   1fc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1fc2a:	4158      	adcs	r0, r3
   1fc2c:	f7ff bf36 	b.w	1fa9c <update_cache>
	node->prev = list->tail;
   1fc30:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1fc34:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fc36:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1fc38:	6311      	str	r1, [r2, #48]	; 0x30
}
   1fc3a:	e7ed      	b.n	1fc18 <move_thread_to_end_of_prio_q+0x48>
   1fc3c:	20004094 	.word	0x20004094
   1fc40:	20004068 	.word	0x20004068

0001fc44 <z_time_slice>:
{
   1fc44:	b570      	push	{r4, r5, r6, lr}
   1fc46:	4601      	mov	r1, r0
	__asm__ volatile(
   1fc48:	f04f 0320 	mov.w	r3, #32
   1fc4c:	f3ef 8411 	mrs	r4, BASEPRI
   1fc50:	f383 8811 	msr	BASEPRI, r3
   1fc54:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1fc58:	4b16      	ldr	r3, [pc, #88]	; (1fcb4 <z_time_slice+0x70>)
   1fc5a:	4a17      	ldr	r2, [pc, #92]	; (1fcb8 <z_time_slice+0x74>)
   1fc5c:	6898      	ldr	r0, [r3, #8]
   1fc5e:	6815      	ldr	r5, [r2, #0]
   1fc60:	42a8      	cmp	r0, r5
   1fc62:	461d      	mov	r5, r3
   1fc64:	d106      	bne.n	1fc74 <z_time_slice+0x30>
			z_reset_time_slice();
   1fc66:	f7ff fe9b 	bl	1f9a0 <z_reset_time_slice>
	__asm__ volatile(
   1fc6a:	f384 8811 	msr	BASEPRI, r4
   1fc6e:	f3bf 8f6f 	isb	sy
}
   1fc72:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1fc74:	2600      	movs	r6, #0
   1fc76:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1fc78:	4a10      	ldr	r2, [pc, #64]	; (1fcbc <z_time_slice+0x78>)
   1fc7a:	6812      	ldr	r2, [r2, #0]
   1fc7c:	b1ba      	cbz	r2, 1fcae <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fc7e:	89c2      	ldrh	r2, [r0, #14]
   1fc80:	2a7f      	cmp	r2, #127	; 0x7f
   1fc82:	d814      	bhi.n	1fcae <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1fc84:	7b42      	ldrb	r2, [r0, #13]
   1fc86:	06d2      	lsls	r2, r2, #27
   1fc88:	d111      	bne.n	1fcae <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1fc8a:	4a0d      	ldr	r2, [pc, #52]	; (1fcc0 <z_time_slice+0x7c>)
   1fc8c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fc90:	6812      	ldr	r2, [r2, #0]
   1fc92:	4296      	cmp	r6, r2
   1fc94:	db0b      	blt.n	1fcae <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fc96:	4a0b      	ldr	r2, [pc, #44]	; (1fcc4 <z_time_slice+0x80>)
   1fc98:	4290      	cmp	r0, r2
   1fc9a:	d008      	beq.n	1fcae <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1fc9c:	695a      	ldr	r2, [r3, #20]
   1fc9e:	428a      	cmp	r2, r1
   1fca0:	dc02      	bgt.n	1fca8 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1fca2:	f7ff ff95 	bl	1fbd0 <move_thread_to_end_of_prio_q>
   1fca6:	e7de      	b.n	1fc66 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1fca8:	1a52      	subs	r2, r2, r1
   1fcaa:	615a      	str	r2, [r3, #20]
   1fcac:	e7dd      	b.n	1fc6a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1fcae:	2300      	movs	r3, #0
   1fcb0:	616b      	str	r3, [r5, #20]
   1fcb2:	e7da      	b.n	1fc6a <z_time_slice+0x26>
   1fcb4:	20004068 	.word	0x20004068
   1fcb8:	2000409c 	.word	0x2000409c
   1fcbc:	200040a4 	.word	0x200040a4
   1fcc0:	200040a0 	.word	0x200040a0
   1fcc4:	20001348 	.word	0x20001348

0001fcc8 <z_impl_k_thread_suspend>:
{
   1fcc8:	b570      	push	{r4, r5, r6, lr}
   1fcca:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1fccc:	3018      	adds	r0, #24
   1fcce:	f00b fb47 	bl	2b360 <z_abort_timeout>
	__asm__ volatile(
   1fcd2:	f04f 0320 	mov.w	r3, #32
   1fcd6:	f3ef 8611 	mrs	r6, BASEPRI
   1fcda:	f383 8811 	msr	BASEPRI, r3
   1fcde:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1fce2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1fce6:	2b00      	cmp	r3, #0
   1fce8:	da07      	bge.n	1fcfa <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fcea:	480f      	ldr	r0, [pc, #60]	; (1fd28 <z_impl_k_thread_suspend+0x60>)
   1fcec:	4621      	mov	r1, r4
   1fcee:	f7ff febf 	bl	1fa70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fcf2:	7b63      	ldrb	r3, [r4, #13]
   1fcf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fcf8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1fcfa:	4d0c      	ldr	r5, [pc, #48]	; (1fd2c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fcfc:	7b63      	ldrb	r3, [r4, #13]
   1fcfe:	68a8      	ldr	r0, [r5, #8]
   1fd00:	f043 0310 	orr.w	r3, r3, #16
   1fd04:	7363      	strb	r3, [r4, #13]
   1fd06:	1b03      	subs	r3, r0, r4
   1fd08:	4258      	negs	r0, r3
   1fd0a:	4158      	adcs	r0, r3
   1fd0c:	f7ff fec6 	bl	1fa9c <update_cache>
	__asm__ volatile(
   1fd10:	f386 8811 	msr	BASEPRI, r6
   1fd14:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1fd18:	68ab      	ldr	r3, [r5, #8]
   1fd1a:	42a3      	cmp	r3, r4
   1fd1c:	d103      	bne.n	1fd26 <z_impl_k_thread_suspend+0x5e>
}
   1fd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1fd22:	f00b b9bf 	b.w	2b0a4 <z_reschedule_unlocked>
}
   1fd26:	bd70      	pop	{r4, r5, r6, pc}
   1fd28:	20004094 	.word	0x20004094
   1fd2c:	20004068 	.word	0x20004068

0001fd30 <z_thread_single_abort>:
{
   1fd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd34:	4604      	mov	r4, r0
	__asm__ volatile(
   1fd36:	f04f 0320 	mov.w	r3, #32
   1fd3a:	f3ef 8211 	mrs	r2, BASEPRI
   1fd3e:	f383 8811 	msr	BASEPRI, r3
   1fd42:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1fd46:	7b43      	ldrb	r3, [r0, #13]
   1fd48:	f013 0f28 	tst.w	r3, #40	; 0x28
   1fd4c:	d005      	beq.n	1fd5a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1fd4e:	f382 8811 	msr	BASEPRI, r2
   1fd52:	f3bf 8f6f 	isb	sy
}
   1fd56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1fd5a:	f043 0320 	orr.w	r3, r3, #32
   1fd5e:	7343      	strb	r3, [r0, #13]
   1fd60:	f382 8811 	msr	BASEPRI, r2
   1fd64:	f3bf 8f6f 	isb	sy
   1fd68:	3018      	adds	r0, #24
   1fd6a:	f00b faf9 	bl	2b360 <z_abort_timeout>
	__asm__ volatile(
   1fd6e:	f04f 0320 	mov.w	r3, #32
   1fd72:	f3ef 8611 	mrs	r6, BASEPRI
   1fd76:	f383 8811 	msr	BASEPRI, r3
   1fd7a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fd7e:	7b63      	ldrb	r3, [r4, #13]
   1fd80:	06d8      	lsls	r0, r3, #27
   1fd82:	d116      	bne.n	1fdb2 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1fd84:	69a2      	ldr	r2, [r4, #24]
   1fd86:	b9a2      	cbnz	r2, 1fdb2 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1fd88:	0619      	lsls	r1, r3, #24
   1fd8a:	d507      	bpl.n	1fd9c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1fd8c:	4826      	ldr	r0, [pc, #152]	; (1fe28 <z_thread_single_abort+0xf8>)
   1fd8e:	4621      	mov	r1, r4
   1fd90:	f7ff fe6e 	bl	1fa70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fd94:	7b63      	ldrb	r3, [r4, #13]
   1fd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fd9a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1fd9c:	4b23      	ldr	r3, [pc, #140]	; (1fe2c <z_thread_single_abort+0xfc>)
   1fd9e:	6898      	ldr	r0, [r3, #8]
   1fda0:	1b02      	subs	r2, r0, r4
   1fda2:	4250      	negs	r0, r2
   1fda4:	4150      	adcs	r0, r2
   1fda6:	f7ff fe79 	bl	1fa9c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1fdaa:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1fdae:	2700      	movs	r7, #0
   1fdb0:	e01e      	b.n	1fdf0 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1fdb2:	079b      	lsls	r3, r3, #30
   1fdb4:	d5f9      	bpl.n	1fdaa <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1fdb6:	68a0      	ldr	r0, [r4, #8]
   1fdb8:	4621      	mov	r1, r4
   1fdba:	f7ff fe59 	bl	1fa70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fdbe:	7b63      	ldrb	r3, [r4, #13]
   1fdc0:	f023 0302 	bic.w	r3, r3, #2
   1fdc4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1fdc6:	2300      	movs	r3, #0
   1fdc8:	60a3      	str	r3, [r4, #8]
   1fdca:	e7ee      	b.n	1fdaa <z_thread_single_abort+0x7a>
   1fdcc:	f105 0018 	add.w	r0, r5, #24
   1fdd0:	f00b fac6 	bl	2b360 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1fdd4:	68a8      	ldr	r0, [r5, #8]
   1fdd6:	4629      	mov	r1, r5
   1fdd8:	f7ff fe4a 	bl	1fa70 <z_priq_dumb_remove>
   1fddc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1fdde:	60af      	str	r7, [r5, #8]
   1fde0:	f023 0302 	bic.w	r3, r3, #2
   1fde4:	736b      	strb	r3, [r5, #13]
   1fde6:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1fdea:	4628      	mov	r0, r5
   1fdec:	f7ff fe9a 	bl	1fb24 <ready_thread>
	return list->head == list;
   1fdf0:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fdf2:	4545      	cmp	r5, r8
   1fdf4:	d001      	beq.n	1fdfa <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1fdf6:	2d00      	cmp	r5, #0
   1fdf8:	d1e8      	bne.n	1fdcc <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1fdfa:	4b0c      	ldr	r3, [pc, #48]	; (1fe2c <z_thread_single_abort+0xfc>)
   1fdfc:	689a      	ldr	r2, [r3, #8]
   1fdfe:	4b0c      	ldr	r3, [pc, #48]	; (1fe30 <z_thread_single_abort+0x100>)
   1fe00:	429a      	cmp	r2, r3
   1fe02:	d102      	bne.n	1fe0a <z_thread_single_abort+0xda>
			update_cache(1);
   1fe04:	2001      	movs	r0, #1
   1fe06:	f7ff fe49 	bl	1fa9c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1fe0a:	7b63      	ldrb	r3, [r4, #13]
   1fe0c:	f043 0308 	orr.w	r3, r3, #8
   1fe10:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1fe12:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1fe14:	f386 8811 	msr	BASEPRI, r6
   1fe18:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1fe1c:	2b00      	cmp	r3, #0
   1fe1e:	d09a      	beq.n	1fd56 <z_thread_single_abort+0x26>
		fn_abort(thread);
   1fe20:	4620      	mov	r0, r4
}
   1fe22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1fe26:	4718      	bx	r3
   1fe28:	20004094 	.word	0x20004094
   1fe2c:	20004068 	.word	0x20004068
   1fe30:	20001348 	.word	0x20001348

0001fe34 <unready_thread>:
{
   1fe34:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1fe36:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fe3a:	2b00      	cmp	r3, #0
{
   1fe3c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fe3e:	da06      	bge.n	1fe4e <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fe40:	4807      	ldr	r0, [pc, #28]	; (1fe60 <unready_thread+0x2c>)
   1fe42:	f7ff fe15 	bl	1fa70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fe46:	7b4b      	ldrb	r3, [r1, #13]
   1fe48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fe4c:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1fe4e:	4b05      	ldr	r3, [pc, #20]	; (1fe64 <unready_thread+0x30>)
   1fe50:	6898      	ldr	r0, [r3, #8]
   1fe52:	1a43      	subs	r3, r0, r1
   1fe54:	4258      	negs	r0, r3
   1fe56:	4158      	adcs	r0, r3
}
   1fe58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1fe5c:	f7ff be1e 	b.w	1fa9c <update_cache>
   1fe60:	20004094 	.word	0x20004094
   1fe64:	20004068 	.word	0x20004068

0001fe68 <pend>:
{
   1fe68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe6c:	4606      	mov	r6, r0
   1fe6e:	4614      	mov	r4, r2
   1fe70:	461d      	mov	r5, r3
	__asm__ volatile(
   1fe72:	f04f 0320 	mov.w	r3, #32
   1fe76:	f3ef 8711 	mrs	r7, BASEPRI
   1fe7a:	f383 8811 	msr	BASEPRI, r3
   1fe7e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1fe82:	f00b f975 	bl	2b170 <add_to_waitq_locked>
	__asm__ volatile(
   1fe86:	f387 8811 	msr	BASEPRI, r7
   1fe8a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fe8e:	1c6b      	adds	r3, r5, #1
   1fe90:	bf08      	it	eq
   1fe92:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1fe96:	d008      	beq.n	1feaa <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1fe98:	4622      	mov	r2, r4
   1fe9a:	462b      	mov	r3, r5
   1fe9c:	f106 0018 	add.w	r0, r6, #24
   1fea0:	4903      	ldr	r1, [pc, #12]	; (1feb0 <pend+0x48>)
}
   1fea2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fea6:	f000 bb1f 	b.w	204e8 <z_add_timeout>
   1feaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1feae:	bf00      	nop
   1feb0:	0002b131 	.word	0x0002b131

0001feb4 <z_pend_curr>:
{
   1feb4:	b510      	push	{r4, lr}
	pending_current = _current;
   1feb6:	4b07      	ldr	r3, [pc, #28]	; (1fed4 <z_pend_curr+0x20>)
   1feb8:	6898      	ldr	r0, [r3, #8]
   1feba:	4b07      	ldr	r3, [pc, #28]	; (1fed8 <z_pend_curr+0x24>)
{
   1febc:	460c      	mov	r4, r1
	pending_current = _current;
   1febe:	6018      	str	r0, [r3, #0]
{
   1fec0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1fec2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fec6:	f7ff ffcf 	bl	1fe68 <pend>
   1feca:	4620      	mov	r0, r4
}
   1fecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fed0:	f7e4 ba72 	b.w	43b8 <arch_swap>
   1fed4:	20004068 	.word	0x20004068
   1fed8:	2000409c 	.word	0x2000409c

0001fedc <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1fedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fee0:	4605      	mov	r5, r0
   1fee2:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1fee4:	f00b fa7c 	bl	2b3e0 <z_tick_get_32>
   1fee8:	4604      	mov	r4, r0
	__asm__ volatile(
   1feea:	f04f 0320 	mov.w	r3, #32
   1feee:	f3ef 8811 	mrs	r8, BASEPRI
   1fef2:	f383 8811 	msr	BASEPRI, r3
   1fef6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1fefa:	4e12      	ldr	r6, [pc, #72]	; (1ff44 <z_tick_sleep.part.0+0x68>)
   1fefc:	4b12      	ldr	r3, [pc, #72]	; (1ff48 <z_tick_sleep.part.0+0x6c>)
   1fefe:	68b0      	ldr	r0, [r6, #8]
   1ff00:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1ff02:	f7ff ff97 	bl	1fe34 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1ff06:	68b0      	ldr	r0, [r6, #8]
   1ff08:	4910      	ldr	r1, [pc, #64]	; (1ff4c <z_tick_sleep.part.0+0x70>)
   1ff0a:	462a      	mov	r2, r5
   1ff0c:	463b      	mov	r3, r7
   1ff0e:	3018      	adds	r0, #24
   1ff10:	f000 faea 	bl	204e8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1ff14:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ff16:	7b53      	ldrb	r3, [r2, #13]
   1ff18:	f043 0310 	orr.w	r3, r3, #16
   1ff1c:	7353      	strb	r3, [r2, #13]
   1ff1e:	4640      	mov	r0, r8
   1ff20:	f7e4 fa4a 	bl	43b8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1ff24:	f00b fa5c 	bl	2b3e0 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1ff28:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1ff2a:	1a24      	subs	r4, r4, r0
   1ff2c:	f04f 0500 	mov.w	r5, #0
   1ff30:	f165 0500 	sbc.w	r5, r5, #0
   1ff34:	2c00      	cmp	r4, #0
   1ff36:	f175 0300 	sbcs.w	r3, r5, #0
   1ff3a:	bfb8      	it	lt
   1ff3c:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1ff3e:	4620      	mov	r0, r4
   1ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff44:	20004068 	.word	0x20004068
   1ff48:	2000409c 	.word	0x2000409c
   1ff4c:	0002b131 	.word	0x0002b131

0001ff50 <z_set_prio>:
{
   1ff50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff54:	4604      	mov	r4, r0
   1ff56:	f04f 0320 	mov.w	r3, #32
   1ff5a:	f3ef 8811 	mrs	r8, BASEPRI
   1ff5e:	f383 8811 	msr	BASEPRI, r3
   1ff62:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ff66:	7b43      	ldrb	r3, [r0, #13]
   1ff68:	06db      	lsls	r3, r3, #27
   1ff6a:	b24e      	sxtb	r6, r1
   1ff6c:	d12e      	bne.n	1ffcc <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1ff6e:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1ff70:	bb65      	cbnz	r5, 1ffcc <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ff72:	4f18      	ldr	r7, [pc, #96]	; (1ffd4 <z_set_prio+0x84>)
   1ff74:	4621      	mov	r1, r4
   1ff76:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1ff7a:	f7ff fd79 	bl	1fa70 <z_priq_dumb_remove>
	return list->head == list;
   1ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ff80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1ff82:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff84:	4283      	cmp	r3, r0
   1ff86:	bf18      	it	ne
   1ff88:	461d      	movne	r5, r3
   1ff8a:	2d00      	cmp	r5, #0
   1ff8c:	bf38      	it	cc
   1ff8e:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ff90:	b1b5      	cbz	r5, 1ffc0 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ff92:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1ff96:	42b1      	cmp	r1, r6
   1ff98:	dc03      	bgt.n	1ffa2 <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1ff9a:	42aa      	cmp	r2, r5
   1ff9c:	d010      	beq.n	1ffc0 <z_set_prio+0x70>
   1ff9e:	682d      	ldr	r5, [r5, #0]
   1ffa0:	e7f6      	b.n	1ff90 <z_set_prio+0x40>
	node->prev = successor->prev;
   1ffa2:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1ffa4:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1ffa8:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ffaa:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1ffac:	2001      	movs	r0, #1
   1ffae:	f7ff fd75 	bl	1fa9c <update_cache>
   1ffb2:	2001      	movs	r0, #1
	__asm__ volatile(
   1ffb4:	f388 8811 	msr	BASEPRI, r8
   1ffb8:	f3bf 8f6f 	isb	sy
}
   1ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1ffc0:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1ffc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ffc6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ffc8:	633c      	str	r4, [r7, #48]	; 0x30
}
   1ffca:	e7ef      	b.n	1ffac <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ffcc:	73a6      	strb	r6, [r4, #14]
   1ffce:	2000      	movs	r0, #0
   1ffd0:	e7f0      	b.n	1ffb4 <z_set_prio+0x64>
   1ffd2:	bf00      	nop
   1ffd4:	20004068 	.word	0x20004068

0001ffd8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ffd8:	4b04      	ldr	r3, [pc, #16]	; (1ffec <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ffda:	2100      	movs	r1, #0
   1ffdc:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1ffe0:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1ffe4:	4608      	mov	r0, r1
   1ffe6:	f7ff bcf1 	b.w	1f9cc <k_sched_time_slice_set>
   1ffea:	bf00      	nop
   1ffec:	20004068 	.word	0x20004068

0001fff0 <z_impl_k_yield>:
{
   1fff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1fff2:	4c24      	ldr	r4, [pc, #144]	; (20084 <z_impl_k_yield+0x94>)
   1fff4:	4b24      	ldr	r3, [pc, #144]	; (20088 <z_impl_k_yield+0x98>)
   1fff6:	68a2      	ldr	r2, [r4, #8]
   1fff8:	429a      	cmp	r2, r3
   1fffa:	d030      	beq.n	2005e <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1fffc:	f04f 0320 	mov.w	r3, #32
   20000:	f3ef 8511 	mrs	r5, BASEPRI
   20004:	f383 8811 	msr	BASEPRI, r3
   20008:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   2000c:	68a1      	ldr	r1, [r4, #8]
   2000e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   20012:	f7ff fd2d 	bl	1fa70 <z_priq_dumb_remove>
	return list->head == list;
   20016:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   20018:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2001a:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2001c:	4283      	cmp	r3, r0
   2001e:	bf08      	it	eq
   20020:	2300      	moveq	r3, #0
   20022:	2b00      	cmp	r3, #0
   20024:	bf38      	it	cc
   20026:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20028:	b32b      	cbz	r3, 20076 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   2002a:	f992 700e 	ldrsb.w	r7, [r2, #14]
   2002e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   20032:	42b7      	cmp	r7, r6
   20034:	db03      	blt.n	2003e <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   20036:	428b      	cmp	r3, r1
   20038:	d01d      	beq.n	20076 <z_impl_k_yield+0x86>
   2003a:	681b      	ldr	r3, [r3, #0]
   2003c:	e7f4      	b.n	20028 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   2003e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   20040:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   20044:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   20046:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   20048:	7b53      	ldrb	r3, [r2, #13]
   2004a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2004e:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   20050:	2001      	movs	r0, #1
   20052:	f7ff fd23 	bl	1fa9c <update_cache>
	__asm__ volatile(
   20056:	f385 8811 	msr	BASEPRI, r5
   2005a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2005e:	f04f 0320 	mov.w	r3, #32
   20062:	f3ef 8011 	mrs	r0, BASEPRI
   20066:	f383 8811 	msr	BASEPRI, r3
   2006a:	f3bf 8f6f 	isb	sy
}
   2006e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20072:	f7e4 b9a1 	b.w	43b8 <arch_swap>
	node->prev = list->tail;
   20076:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   2007a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2007c:	601a      	str	r2, [r3, #0]
	list->tail = node;
   2007e:	6322      	str	r2, [r4, #48]	; 0x30
}
   20080:	e7e2      	b.n	20048 <z_impl_k_yield+0x58>
   20082:	bf00      	nop
   20084:	20004068 	.word	0x20004068
   20088:	20001348 	.word	0x20001348

0002008c <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2008c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   20090:	bf08      	it	eq
   20092:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   20096:	b508      	push	{r3, lr}
   20098:	4602      	mov	r2, r0
   2009a:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2009c:	d106      	bne.n	200ac <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   2009e:	4b0b      	ldr	r3, [pc, #44]	; (200cc <z_impl_k_sleep+0x40>)
   200a0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   200a2:	f7ff fe11 	bl	1fcc8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   200a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   200aa:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   200ac:	4313      	orrs	r3, r2
   200ae:	d10a      	bne.n	200c6 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   200b0:	f7ff ff9e 	bl	1fff0 <z_impl_k_yield>
		return 0;
   200b4:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   200b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   200ba:	fb80 2303 	smull	r2, r3, r0, r3
   200be:	0bd0      	lsrs	r0, r2, #15
   200c0:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   200c4:	e7f1      	b.n	200aa <z_impl_k_sleep+0x1e>
   200c6:	f7ff ff09 	bl	1fedc <z_tick_sleep.part.0>
   200ca:	e7f4      	b.n	200b6 <z_impl_k_sleep+0x2a>
   200cc:	20004068 	.word	0x20004068

000200d0 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   200d0:	4b01      	ldr	r3, [pc, #4]	; (200d8 <z_impl_k_current_get+0x8>)
   200d2:	6898      	ldr	r0, [r3, #8]
   200d4:	4770      	bx	lr
   200d6:	bf00      	nop
   200d8:	20004068 	.word	0x20004068

000200dc <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   200dc:	b538      	push	{r3, r4, r5, lr}
   200de:	4604      	mov	r4, r0
   200e0:	f04f 0320 	mov.w	r3, #32
   200e4:	f3ef 8511 	mrs	r5, BASEPRI
   200e8:	f383 8811 	msr	BASEPRI, r3
   200ec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   200f0:	f00b f869 	bl	2b1c6 <z_unpend_first_thread>

	if (thread != NULL) {
   200f4:	b150      	cbz	r0, 2010c <z_impl_k_sem_give+0x30>
   200f6:	2200      	movs	r2, #0
   200f8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   200fc:	f00b f808 	bl	2b110 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20100:	4629      	mov	r1, r5
   20102:	4808      	ldr	r0, [pc, #32]	; (20124 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   20104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20108:	f7ff bc8c 	b.w	1fa24 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   2010c:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20110:	429a      	cmp	r2, r3
   20112:	bf18      	it	ne
   20114:	3301      	addne	r3, #1
   20116:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   20118:	2102      	movs	r1, #2
   2011a:	f104 0010 	add.w	r0, r4, #16
   2011e:	f00b fb11 	bl	2b744 <z_handle_obj_poll_events>
}
   20122:	e7ed      	b.n	20100 <z_impl_k_sem_give+0x24>
   20124:	2000875c 	.word	0x2000875c

00020128 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   20128:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2012a:	4614      	mov	r4, r2
   2012c:	461d      	mov	r5, r3
   2012e:	f04f 0320 	mov.w	r3, #32
   20132:	f3ef 8111 	mrs	r1, BASEPRI
   20136:	f383 8811 	msr	BASEPRI, r3
   2013a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   2013e:	6883      	ldr	r3, [r0, #8]
   20140:	b143      	cbz	r3, 20154 <z_impl_k_sem_take+0x2c>
		sem->count--;
   20142:	3b01      	subs	r3, #1
   20144:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   20146:	f381 8811 	msr	BASEPRI, r1
   2014a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2014e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   20150:	b003      	add	sp, #12
   20152:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20154:	ea54 0305 	orrs.w	r3, r4, r5
   20158:	d106      	bne.n	20168 <z_impl_k_sem_take+0x40>
   2015a:	f381 8811 	msr	BASEPRI, r1
   2015e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20162:	f06f 000f 	mvn.w	r0, #15
   20166:	e7f3      	b.n	20150 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20168:	4602      	mov	r2, r0
   2016a:	e9cd 4500 	strd	r4, r5, [sp]
   2016e:	4802      	ldr	r0, [pc, #8]	; (20178 <z_impl_k_sem_take+0x50>)
   20170:	f7ff fea0 	bl	1feb4 <z_pend_curr>
	return ret;
   20174:	e7ec      	b.n	20150 <z_impl_k_sem_take+0x28>
   20176:	bf00      	nop
   20178:	2000875c 	.word	0x2000875c

0002017c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2017c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2017e:	4c08      	ldr	r4, [pc, #32]	; (201a0 <k_sys_work_q_init+0x24>)
   20180:	4908      	ldr	r1, [pc, #32]	; (201a4 <k_sys_work_q_init+0x28>)
   20182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20186:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2018a:	4620      	mov	r0, r4
   2018c:	f000 f8dc 	bl	20348 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   20190:	4905      	ldr	r1, [pc, #20]	; (201a8 <k_sys_work_q_init+0x2c>)
   20192:	f104 0018 	add.w	r0, r4, #24
   20196:	f00b f865 	bl	2b264 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2019a:	2000      	movs	r0, #0
   2019c:	bd10      	pop	{r4, pc}
   2019e:	bf00      	nop
   201a0:	20001458 	.word	0x20001458
   201a4:	2000a9c0 	.word	0x2000a9c0
   201a8:	00039383 	.word	0x00039383

000201ac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   201ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   201b0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   201b4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   201b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   201ba:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   201bc:	2504      	movs	r5, #4
   201be:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   201c0:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   201c2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   201c4:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   201c8:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   201ca:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   201ce:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   201d2:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	thread_base->sched_locked = 0U;
   201d6:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   201d8:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201da:	9202      	str	r2, [sp, #8]
   201dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   201de:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   201e0:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   201e6:	9200      	str	r2, [sp, #0]
   201e8:	4642      	mov	r2, r8
{
   201ea:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   201ec:	f7e4 f98c 	bl	4508 <arch_new_thread>
	if (!_current) {
   201f0:	4b05      	ldr	r3, [pc, #20]	; (20208 <z_setup_new_thread+0x5c>)
   201f2:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   201f4:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   201f8:	b103      	cbz	r3, 201fc <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   201fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   201fc:	67a3      	str	r3, [r4, #120]	; 0x78
}
   201fe:	4640      	mov	r0, r8
   20200:	b004      	add	sp, #16
   20202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20206:	bf00      	nop
   20208:	20004068 	.word	0x20004068

0002020c <z_impl_k_thread_create>:
{
   2020c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2020e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20210:	2500      	movs	r5, #0
   20212:	9505      	str	r5, [sp, #20]
   20214:	9d10      	ldr	r5, [sp, #64]	; 0x40
   20216:	9504      	str	r5, [sp, #16]
   20218:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2021a:	9503      	str	r5, [sp, #12]
   2021c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2021e:	9502      	str	r5, [sp, #8]
{
   20220:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20224:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   20226:	9501      	str	r5, [sp, #4]
   20228:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   2022a:	9500      	str	r5, [sp, #0]
{
   2022c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2022e:	f7ff ffbd 	bl	201ac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20232:	1c7b      	adds	r3, r7, #1
   20234:	bf08      	it	eq
   20236:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2023a:	d005      	beq.n	20248 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2023c:	ea56 0307 	orrs.w	r3, r6, r7
   20240:	d105      	bne.n	2024e <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   20242:	4620      	mov	r0, r4
   20244:	f7ff fca6 	bl	1fb94 <z_sched_start>
}
   20248:	4620      	mov	r0, r4
   2024a:	b007      	add	sp, #28
   2024c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2024e:	4904      	ldr	r1, [pc, #16]	; (20260 <z_impl_k_thread_create+0x54>)
   20250:	4632      	mov	r2, r6
   20252:	463b      	mov	r3, r7
   20254:	f104 0018 	add.w	r0, r4, #24
   20258:	f000 f946 	bl	204e8 <z_add_timeout>
   2025c:	e7f4      	b.n	20248 <z_impl_k_thread_create+0x3c>
   2025e:	bf00      	nop
   20260:	0002b131 	.word	0x0002b131

00020264 <z_init_static_threads>:
{
   20264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   20268:	4e2a      	ldr	r6, [pc, #168]	; (20314 <z_init_static_threads+0xb0>)
   2026a:	4d2b      	ldr	r5, [pc, #172]	; (20318 <z_init_static_threads+0xb4>)
{
   2026c:	b086      	sub	sp, #24
   2026e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   20270:	42b5      	cmp	r5, r6
   20272:	f105 0430 	add.w	r4, r5, #48	; 0x30
   20276:	d310      	bcc.n	2029a <z_init_static_threads+0x36>
	k_sched_lock();
   20278:	f7ff fbe6 	bl	1fa48 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   2027c:	4c26      	ldr	r4, [pc, #152]	; (20318 <z_init_static_threads+0xb4>)
   2027e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 2031c <z_init_static_threads+0xb8>
   20282:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   20286:	f240 36e7 	movw	r6, #999	; 0x3e7
   2028a:	2700      	movs	r7, #0
   2028c:	4544      	cmp	r4, r8
   2028e:	d321      	bcc.n	202d4 <z_init_static_threads+0x70>
}
   20290:	b006      	add	sp, #24
   20292:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   20296:	f7ff bc29 	b.w	1faec <k_sched_unlock>
		z_setup_new_thread(
   2029a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2029e:	9305      	str	r3, [sp, #20]
   202a0:	f854 3c10 	ldr.w	r3, [r4, #-16]
   202a4:	9304      	str	r3, [sp, #16]
   202a6:	f854 3c14 	ldr.w	r3, [r4, #-20]
   202aa:	9303      	str	r3, [sp, #12]
   202ac:	f854 3c18 	ldr.w	r3, [r4, #-24]
   202b0:	9302      	str	r3, [sp, #8]
   202b2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   202b6:	9301      	str	r3, [sp, #4]
   202b8:	f854 3c20 	ldr.w	r3, [r4, #-32]
   202bc:	9300      	str	r3, [sp, #0]
   202be:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   202c2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   202c6:	f7ff ff71 	bl	201ac <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   202ca:	f854 3c30 	ldr.w	r3, [r4, #-48]
   202ce:	65dd      	str	r5, [r3, #92]	; 0x5c
   202d0:	4625      	mov	r5, r4
   202d2:	e7cd      	b.n	20270 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   202d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   202d6:	1c5a      	adds	r2, r3, #1
   202d8:	d00d      	beq.n	202f6 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   202da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   202de:	4630      	mov	r0, r6
   202e0:	4639      	mov	r1, r7
   202e2:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   202e6:	42b9      	cmp	r1, r7
   202e8:	bf08      	it	eq
   202ea:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   202ec:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   202ee:	d104      	bne.n	202fa <z_init_static_threads+0x96>
	z_sched_start(thread);
   202f0:	4628      	mov	r0, r5
   202f2:	f7ff fc4f 	bl	1fb94 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   202f6:	3430      	adds	r4, #48	; 0x30
   202f8:	e7c8      	b.n	2028c <z_init_static_threads+0x28>
   202fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   202fe:	2300      	movs	r3, #0
   20300:	f7df ff3e 	bl	180 <__aeabi_uldivmod>
   20304:	4602      	mov	r2, r0
   20306:	460b      	mov	r3, r1
   20308:	f105 0018 	add.w	r0, r5, #24
   2030c:	4651      	mov	r1, sl
   2030e:	f000 f8eb 	bl	204e8 <z_add_timeout>
   20312:	e7f0      	b.n	202f6 <z_init_static_threads+0x92>
   20314:	20000b20 	.word	0x20000b20
   20318:	20000b20 	.word	0x20000b20
   2031c:	0002b131 	.word	0x0002b131

00020320 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   20320:	b508      	push	{r3, lr}
	__asm__ volatile(
   20322:	f04f 0320 	mov.w	r3, #32
   20326:	f3ef 8411 	mrs	r4, BASEPRI
   2032a:	f383 8811 	msr	BASEPRI, r3
   2032e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   20332:	4b04      	ldr	r3, [pc, #16]	; (20344 <z_self_abort+0x24>)
   20334:	6898      	ldr	r0, [r3, #8]
   20336:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   20338:	f7ff fcc6 	bl	1fcc8 <z_impl_k_thread_suspend>
   2033c:	4620      	mov	r0, r4
   2033e:	f7e4 f83b 	bl	43b8 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20342:	bf00      	nop
   20344:	20004068 	.word	0x20004068

00020348 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   20348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2034c:	4604      	mov	r4, r0
   2034e:	b088      	sub	sp, #32
   20350:	460d      	mov	r5, r1
   20352:	4616      	mov	r6, r2
   20354:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   20356:	f00a fe13 	bl	2af80 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2035a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2035e:	2200      	movs	r2, #0
   20360:	2300      	movs	r3, #0
   20362:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20366:	e9cd 7203 	strd	r7, r2, [sp, #12]
   2036a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2036e:	4b07      	ldr	r3, [pc, #28]	; (2038c <k_work_q_start+0x44>)
   20370:	9400      	str	r4, [sp, #0]
   20372:	4632      	mov	r2, r6
   20374:	4629      	mov	r1, r5
   20376:	4640      	mov	r0, r8
   20378:	f7ff ff48 	bl	2020c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2037c:	4904      	ldr	r1, [pc, #16]	; (20390 <k_work_q_start+0x48>)
   2037e:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   20380:	b008      	add	sp, #32
   20382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20386:	f00a bf6d 	b.w	2b264 <z_impl_k_thread_name_set>
   2038a:	bf00      	nop
   2038c:	00023017 	.word	0x00023017
   20390:	0003938c 	.word	0x0003938c

00020394 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   20394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20398:	4606      	mov	r6, r0
   2039a:	460d      	mov	r5, r1
   2039c:	4690      	mov	r8, r2
   2039e:	4699      	mov	r9, r3
   203a0:	f04f 0320 	mov.w	r3, #32
   203a4:	f3ef 8711 	mrs	r7, BASEPRI
   203a8:	f383 8811 	msr	BASEPRI, r3
   203ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   203b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   203b2:	b17b      	cbz	r3, 203d4 <k_delayed_work_submit_to_queue+0x40>
   203b4:	4283      	cmp	r3, r0
   203b6:	d128      	bne.n	2040a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   203b8:	4628      	mov	r0, r5
   203ba:	f00a ff75 	bl	2b2a8 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   203be:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   203c2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   203c4:	d008      	beq.n	203d8 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   203c6:	2800      	cmp	r0, #0
   203c8:	da07      	bge.n	203da <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   203ca:	f387 8811 	msr	BASEPRI, r7
   203ce:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   203d2:	e00f      	b.n	203f4 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   203d4:	2800      	cmp	r0, #0
   203d6:	d0ef      	beq.n	203b8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   203d8:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   203da:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   203de:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   203e0:	d10b      	bne.n	203fa <k_delayed_work_submit_to_queue+0x66>
   203e2:	f387 8811 	msr	BASEPRI, r7
   203e6:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   203ea:	4629      	mov	r1, r5
   203ec:	4630      	mov	r0, r6
   203ee:	f00a ff3e 	bl	2b26e <k_work_submit_to_queue>
		return 0;
   203f2:	2400      	movs	r4, #0
}
   203f4:	4620      	mov	r0, r4
   203f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   203fa:	4905      	ldr	r1, [pc, #20]	; (20410 <k_delayed_work_submit_to_queue+0x7c>)
   203fc:	4642      	mov	r2, r8
   203fe:	464b      	mov	r3, r9
   20400:	f105 0010 	add.w	r0, r5, #16
   20404:	f000 f870 	bl	204e8 <z_add_timeout>
   20408:	e7df      	b.n	203ca <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   2040a:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   2040e:	e7dc      	b.n	203ca <k_delayed_work_submit_to_queue+0x36>
   20410:	0002b29f 	.word	0x0002b29f

00020414 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   20414:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20416:	4806      	ldr	r0, [pc, #24]	; (20430 <z_data_copy+0x1c>)
   20418:	4a06      	ldr	r2, [pc, #24]	; (20434 <z_data_copy+0x20>)
   2041a:	4907      	ldr	r1, [pc, #28]	; (20438 <z_data_copy+0x24>)
   2041c:	1a12      	subs	r2, r2, r0
   2041e:	f00b f9c8 	bl	2b7b2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   20422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20426:	4a05      	ldr	r2, [pc, #20]	; (2043c <z_data_copy+0x28>)
   20428:	4905      	ldr	r1, [pc, #20]	; (20440 <z_data_copy+0x2c>)
   2042a:	4806      	ldr	r0, [pc, #24]	; (20444 <z_data_copy+0x30>)
   2042c:	f00b b9c1 	b.w	2b7b2 <memcpy>
   20430:	20000000 	.word	0x20000000
   20434:	20000d78 	.word	0x20000d78
   20438:	000396a0 	.word	0x000396a0
   2043c:	00000000 	.word	0x00000000
   20440:	000396a0 	.word	0x000396a0
   20444:	20000000 	.word	0x20000000

00020448 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   20448:	4b03      	ldr	r3, [pc, #12]	; (20458 <elapsed+0x10>)
   2044a:	681b      	ldr	r3, [r3, #0]
   2044c:	b90b      	cbnz	r3, 20452 <elapsed+0xa>
   2044e:	f7e3 be3d 	b.w	40cc <z_clock_elapsed>
}
   20452:	2000      	movs	r0, #0
   20454:	4770      	bx	lr
   20456:	bf00      	nop
   20458:	200040a8 	.word	0x200040a8

0002045c <remove_timeout>:
{
   2045c:	b530      	push	{r4, r5, lr}
   2045e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20460:	b168      	cbz	r0, 2047e <remove_timeout+0x22>
   20462:	4a0a      	ldr	r2, [pc, #40]	; (2048c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   20464:	6852      	ldr	r2, [r2, #4]
   20466:	4290      	cmp	r0, r2
   20468:	d009      	beq.n	2047e <remove_timeout+0x22>
	if (next(t) != NULL) {
   2046a:	b143      	cbz	r3, 2047e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   2046c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   20470:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   20474:	1912      	adds	r2, r2, r4
   20476:	eb45 0101 	adc.w	r1, r5, r1
   2047a:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2047e:	6842      	ldr	r2, [r0, #4]
   20480:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20482:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20484:	2300      	movs	r3, #0
	node->prev = NULL;
   20486:	e9c0 3300 	strd	r3, r3, [r0]
}
   2048a:	bd30      	pop	{r4, r5, pc}
   2048c:	20000838 	.word	0x20000838

00020490 <next_timeout>:

static int32_t next_timeout(void)
{
   20490:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   20492:	4b13      	ldr	r3, [pc, #76]	; (204e0 <next_timeout+0x50>)
   20494:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20496:	429c      	cmp	r4, r3
   20498:	bf08      	it	eq
   2049a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2049c:	f7ff ffd4 	bl	20448 <elapsed>
   204a0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   204a2:	b1bc      	cbz	r4, 204d4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   204a4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   204a8:	1b40      	subs	r0, r0, r5
   204aa:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   204ae:	2801      	cmp	r0, #1
   204b0:	f171 0300 	sbcs.w	r3, r1, #0
   204b4:	db11      	blt.n	204da <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   204b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   204ba:	2300      	movs	r3, #0
   204bc:	4282      	cmp	r2, r0
   204be:	eb73 0401 	sbcs.w	r4, r3, r1
   204c2:	da00      	bge.n	204c6 <next_timeout+0x36>
   204c4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   204c6:	4b07      	ldr	r3, [pc, #28]	; (204e4 <next_timeout+0x54>)
   204c8:	695b      	ldr	r3, [r3, #20]
   204ca:	b113      	cbz	r3, 204d2 <next_timeout+0x42>
   204cc:	4298      	cmp	r0, r3
   204ce:	bfa8      	it	ge
   204d0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   204d2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   204d4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   204d8:	e7f5      	b.n	204c6 <next_timeout+0x36>
   204da:	2000      	movs	r0, #0
   204dc:	e7f3      	b.n	204c6 <next_timeout+0x36>
   204de:	bf00      	nop
   204e0:	20000838 	.word	0x20000838
   204e4:	20004068 	.word	0x20004068

000204e8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   204e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   204ec:	9101      	str	r1, [sp, #4]
   204ee:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   204f0:	1c4b      	adds	r3, r1, #1
   204f2:	bf08      	it	eq
   204f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   204f8:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   204fa:	d071      	beq.n	205e0 <z_add_timeout+0xf8>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   204fc:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   204fe:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   20502:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20506:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   2050a:	ebb3 0804 	subs.w	r8, r3, r4
   2050e:	eb6b 0905 	sbc.w	r9, fp, r5
   20512:	f1b8 0f00 	cmp.w	r8, #0
   20516:	f179 0300 	sbcs.w	r3, r9, #0
   2051a:	db0f      	blt.n	2053c <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   2051c:	f7ff ff94 	bl	20448 <elapsed>
   20520:	4a36      	ldr	r2, [pc, #216]	; (205fc <z_add_timeout+0x114>)
   20522:	e9d2 1c00 	ldrd	r1, ip, [r2]
   20526:	f06f 0301 	mvn.w	r3, #1
   2052a:	1a5b      	subs	r3, r3, r1
   2052c:	eb6b 020c 	sbc.w	r2, fp, ip
   20530:	1b1e      	subs	r6, r3, r4
   20532:	eb62 0705 	sbc.w	r7, r2, r5
   20536:	1a34      	subs	r4, r6, r0
   20538:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2053c:	9b01      	ldr	r3, [sp, #4]
   2053e:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   20542:	f04f 0320 	mov.w	r3, #32
   20546:	f3ef 8611 	mrs	r6, BASEPRI
   2054a:	f383 8811 	msr	BASEPRI, r3
   2054e:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   20552:	f7ff ff79 	bl	20448 <elapsed>
	ticks = MAX(1, ticks);
   20556:	2c01      	cmp	r4, #1
   20558:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   2055c:	4b28      	ldr	r3, [pc, #160]	; (20600 <z_add_timeout+0x118>)
   2055e:	bfb8      	it	lt
   20560:	2401      	movlt	r4, #1
   20562:	681a      	ldr	r2, [r3, #0]
   20564:	bfb8      	it	lt
   20566:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   20568:	1824      	adds	r4, r4, r0
   2056a:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2056e:	429a      	cmp	r2, r3
   20570:	e9ca 4504 	strd	r4, r5, [sl, #16]
   20574:	d001      	beq.n	2057a <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20576:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20578:	b952      	cbnz	r2, 20590 <z_add_timeout+0xa8>
	node->prev = list->tail;
   2057a:	685a      	ldr	r2, [r3, #4]
   2057c:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   20580:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   20582:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   20586:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   2058a:	f8c3 a004 	str.w	sl, [r3, #4]
}
   2058e:	e014      	b.n	205ba <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   20590:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   20594:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   20598:	4544      	cmp	r4, r8
   2059a:	eb75 0109 	sbcs.w	r1, r5, r9
   2059e:	da22      	bge.n	205e6 <z_add_timeout+0xfe>
				t->dticks -= to->dticks;
   205a0:	ebb8 0004 	subs.w	r0, r8, r4
   205a4:	eb69 0105 	sbc.w	r1, r9, r5
   205a8:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   205ac:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   205ae:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   205b2:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   205b6:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   205ba:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205bc:	429a      	cmp	r2, r3
   205be:	d00b      	beq.n	205d8 <z_add_timeout+0xf0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   205c0:	4592      	cmp	sl, r2
   205c2:	d109      	bne.n	205d8 <z_add_timeout+0xf0>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   205c4:	f7ff ff64 	bl	20490 <next_timeout>

			if (next_time == 0 ||
   205c8:	b118      	cbz	r0, 205d2 <z_add_timeout+0xea>
			    _current_cpu->slice_ticks != next_time) {
   205ca:	4b0e      	ldr	r3, [pc, #56]	; (20604 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   205cc:	695b      	ldr	r3, [r3, #20]
   205ce:	4283      	cmp	r3, r0
   205d0:	d002      	beq.n	205d8 <z_add_timeout+0xf0>
				z_clock_set_timeout(next_time, false);
   205d2:	2100      	movs	r1, #0
   205d4:	f7e3 fd48 	bl	4068 <z_clock_set_timeout>
	__asm__ volatile(
   205d8:	f386 8811 	msr	BASEPRI, r6
   205dc:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   205e0:	b003      	add	sp, #12
   205e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   205e6:	ebb4 0008 	subs.w	r0, r4, r8
   205ea:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   205ee:	42ba      	cmp	r2, r7
   205f0:	e9ca 0104 	strd	r0, r1, [sl, #16]
   205f4:	d0c1      	beq.n	2057a <z_add_timeout+0x92>
   205f6:	6812      	ldr	r2, [r2, #0]
   205f8:	e7be      	b.n	20578 <z_add_timeout+0x90>
   205fa:	bf00      	nop
   205fc:	200014f8 	.word	0x200014f8
   20600:	20000838 	.word	0x20000838
   20604:	20004068 	.word	0x20004068

00020608 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   20608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2060c:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2060e:	f7ff fb19 	bl	1fc44 <z_time_slice>
	__asm__ volatile(
   20612:	f04f 0320 	mov.w	r3, #32
   20616:	f3ef 8411 	mrs	r4, BASEPRI
   2061a:	f383 8811 	msr	BASEPRI, r3
   2061e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20622:	4d2c      	ldr	r5, [pc, #176]	; (206d4 <z_clock_announce+0xcc>)
   20624:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 206d8 <z_clock_announce+0xd0>
	return list->head == list;
   20628:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 206dc <z_clock_announce+0xd4>
   2062c:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   2062e:	4651      	mov	r1, sl
   20630:	f8d5 c000 	ldr.w	ip, [r5]
   20634:	f8db 0000 	ldr.w	r0, [fp]
   20638:	4662      	mov	r2, ip
   2063a:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2063c:	4558      	cmp	r0, fp
   2063e:	e9da 8900 	ldrd	r8, r9, [sl]
   20642:	e9cd 2300 	strd	r2, r3, [sp]
   20646:	d00d      	beq.n	20664 <z_clock_announce+0x5c>
   20648:	b160      	cbz	r0, 20664 <z_clock_announce+0x5c>
   2064a:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   2064e:	45b4      	cmp	ip, r6
   20650:	41bb      	sbcs	r3, r7
   20652:	da1e      	bge.n	20692 <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   20654:	9b00      	ldr	r3, [sp, #0]
   20656:	ebb6 0c03 	subs.w	ip, r6, r3
   2065a:	9b01      	ldr	r3, [sp, #4]
   2065c:	eb67 0603 	sbc.w	r6, r7, r3
   20660:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   20664:	9b00      	ldr	r3, [sp, #0]
   20666:	eb13 0208 	adds.w	r2, r3, r8
   2066a:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   2066c:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   20670:	eb43 0309 	adc.w	r3, r3, r9
   20674:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   20678:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   2067a:	f7ff ff09 	bl	20490 <next_timeout>
   2067e:	4631      	mov	r1, r6
   20680:	f7e3 fcf2 	bl	4068 <z_clock_set_timeout>
	__asm__ volatile(
   20684:	f384 8811 	msr	BASEPRI, r4
   20688:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2068c:	b003      	add	sp, #12
   2068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   20692:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   20696:	f04f 0200 	mov.w	r2, #0
   2069a:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   2069e:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   206a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   206a6:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   206aa:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   206ae:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   206b0:	f7ff fed4 	bl	2045c <remove_timeout>
   206b4:	f384 8811 	msr	BASEPRI, r4
   206b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   206bc:	6883      	ldr	r3, [r0, #8]
   206be:	4798      	blx	r3
	__asm__ volatile(
   206c0:	f04f 0320 	mov.w	r3, #32
   206c4:	f3ef 8411 	mrs	r4, BASEPRI
   206c8:	f383 8811 	msr	BASEPRI, r3
   206cc:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   206d0:	4901      	ldr	r1, [pc, #4]	; (206d8 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   206d2:	e7ad      	b.n	20630 <z_clock_announce+0x28>
   206d4:	200040a8 	.word	0x200040a8
   206d8:	200014f8 	.word	0x200014f8
   206dc:	20000838 	.word	0x20000838

000206e0 <z_tick_get>:

int64_t z_tick_get(void)
{
   206e0:	b510      	push	{r4, lr}
   206e2:	f04f 0320 	mov.w	r3, #32
   206e6:	f3ef 8411 	mrs	r4, BASEPRI
   206ea:	f383 8811 	msr	BASEPRI, r3
   206ee:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   206f2:	f7e3 fceb 	bl	40cc <z_clock_elapsed>
   206f6:	4b06      	ldr	r3, [pc, #24]	; (20710 <z_tick_get+0x30>)
   206f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   206fc:	1812      	adds	r2, r2, r0
   206fe:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   20702:	f384 8811 	msr	BASEPRI, r4
   20706:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2070a:	4610      	mov	r0, r2
   2070c:	4619      	mov	r1, r3
   2070e:	bd10      	pop	{r4, pc}
   20710:	200014f8 	.word	0x200014f8

00020714 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20716:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2071a:	1c56      	adds	r6, r2, #1
   2071c:	f143 0700 	adc.w	r7, r3, #0
   20720:	2f00      	cmp	r7, #0
   20722:	bf08      	it	eq
   20724:	2e02      	cmpeq	r6, #2
{
   20726:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20728:	d302      	bcc.n	20730 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2072a:	490c      	ldr	r1, [pc, #48]	; (2075c <z_timer_expiration_handler+0x48>)
   2072c:	f7ff fedc 	bl	204e8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20730:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20732:	3301      	adds	r3, #1
   20734:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20736:	6a23      	ldr	r3, [r4, #32]
   20738:	b10b      	cbz	r3, 2073e <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   2073a:	4620      	mov	r0, r4
   2073c:	4798      	blx	r3
	return list->head == list;
   2073e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20742:	42a5      	cmp	r5, r4
   20744:	d009      	beq.n	2075a <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20746:	b145      	cbz	r5, 2075a <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20748:	4628      	mov	r0, r5
   2074a:	f00a fc8f 	bl	2b06c <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2074e:	4628      	mov	r0, r5
   20750:	f00a fcde 	bl	2b110 <z_ready_thread>
   20754:	2300      	movs	r3, #0
   20756:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   2075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2075c:	00020715 	.word	0x00020715

00020760 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20760:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   20764:	4619      	mov	r1, r3
   20766:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20768:	1c4c      	adds	r4, r1, #1
{
   2076a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2076c:	bf08      	it	eq
   2076e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   20772:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   20776:	4680      	mov	r8, r0
   20778:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2077a:	d047      	beq.n	2080c <z_impl_k_timer_start+0xac>
   2077c:	4614      	mov	r4, r2
   2077e:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20780:	ea54 0305 	orrs.w	r3, r4, r5
   20784:	d016      	beq.n	207b4 <z_impl_k_timer_start+0x54>
   20786:	f06f 0301 	mvn.w	r3, #1
   2078a:	ebb3 0a02 	subs.w	sl, r3, r2
   2078e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20792:	eb63 0b05 	sbc.w	fp, r3, r5
   20796:	f1ba 0f00 	cmp.w	sl, #0
   2079a:	f17b 0300 	sbcs.w	r3, fp, #0
   2079e:	da09      	bge.n	207b4 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   207a0:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   207a4:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   207a8:	2c01      	cmp	r4, #1
   207aa:	f175 0300 	sbcs.w	r3, r5, #0
   207ae:	bfbc      	itt	lt
   207b0:	2401      	movlt	r4, #1
   207b2:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   207b4:	f06f 0301 	mvn.w	r3, #1
   207b8:	1a1b      	subs	r3, r3, r0
   207ba:	9300      	str	r3, [sp, #0]
   207bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207c0:	eb63 0301 	sbc.w	r3, r3, r1
   207c4:	9301      	str	r3, [sp, #4]
   207c6:	e9dd 2300 	ldrd	r2, r3, [sp]
   207ca:	2a00      	cmp	r2, #0
   207cc:	f173 0300 	sbcs.w	r3, r3, #0
   207d0:	da0c      	bge.n	207ec <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   207d2:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   207d6:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   207da:	f1b8 0f00 	cmp.w	r8, #0
   207de:	f179 0300 	sbcs.w	r3, r9, #0
   207e2:	bfbc      	itt	lt
   207e4:	f04f 0800 	movlt.w	r8, #0
   207e8:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   207ec:	4630      	mov	r0, r6
   207ee:	f00a fdb7 	bl	2b360 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   207f2:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   207f4:	4907      	ldr	r1, [pc, #28]	; (20814 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   207f6:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   207f8:	4642      	mov	r2, r8
   207fa:	464b      	mov	r3, r9
   207fc:	4630      	mov	r0, r6
	timer->period = period;
   207fe:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   20802:	b002      	add	sp, #8
   20804:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20808:	f7ff be6e 	b.w	204e8 <z_add_timeout>
}
   2080c:	b002      	add	sp, #8
   2080e:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   20812:	bf00      	nop
   20814:	00020715 	.word	0x00020715

00020818 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2081c:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2081e:	4b2a      	ldr	r3, [pc, #168]	; (208c8 <z_impl_k_poll+0xb0>)
   20820:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   20822:	2301      	movs	r3, #1
   20824:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   20828:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   2082c:	ea52 0307 	orrs.w	r3, r2, r7
{
   20830:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   20832:	bf0c      	ite	eq
   20834:	2301      	moveq	r3, #1
   20836:	2300      	movne	r3, #0
   20838:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   2083c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2083e:	f00a ff11 	bl	2b664 <register_events>
   20842:	4681      	mov	r9, r0
	__asm__ volatile(
   20844:	f04f 0320 	mov.w	r3, #32
   20848:	f3ef 8a11 	mrs	sl, BASEPRI
   2084c:	f383 8811 	msr	BASEPRI, r3
   20850:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20854:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   20858:	b964      	cbnz	r4, 20874 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2085a:	4601      	mov	r1, r0
   2085c:	4652      	mov	r2, sl
   2085e:	4640      	mov	r0, r8
   20860:	f00a fe2c 	bl	2b4bc <clear_event_registrations>
	__asm__ volatile(
   20864:	f38a 8811 	msr	BASEPRI, sl
   20868:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   2086c:	4620      	mov	r0, r4
   2086e:	b004      	add	sp, #16
   20870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20874:	2300      	movs	r3, #0
   20876:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2087a:	ea56 0307 	orrs.w	r3, r6, r7
   2087e:	d106      	bne.n	2088e <z_impl_k_poll+0x76>
   20880:	f38a 8811 	msr	BASEPRI, sl
   20884:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20888:	f06f 040a 	mvn.w	r4, #10
   2088c:	e7ee      	b.n	2086c <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   2088e:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20890:	e9cd 6700 	strd	r6, r7, [sp]
   20894:	4651      	mov	r1, sl
   20896:	480d      	ldr	r0, [pc, #52]	; (208cc <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20898:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   2089c:	f7ff fb0a 	bl	1feb4 <z_pend_curr>
   208a0:	4604      	mov	r4, r0
	__asm__ volatile(
   208a2:	f04f 0320 	mov.w	r3, #32
   208a6:	f3ef 8511 	mrs	r5, BASEPRI
   208aa:	f383 8811 	msr	BASEPRI, r3
   208ae:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   208b2:	462a      	mov	r2, r5
   208b4:	4649      	mov	r1, r9
   208b6:	4640      	mov	r0, r8
   208b8:	f00a fe00 	bl	2b4bc <clear_event_registrations>
	__asm__ volatile(
   208bc:	f385 8811 	msr	BASEPRI, r5
   208c0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   208c4:	e7d2      	b.n	2086c <z_impl_k_poll+0x54>
   208c6:	bf00      	nop
   208c8:	20004068 	.word	0x20004068
   208cc:	2000875c 	.word	0x2000875c

000208d0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   208d0:	b538      	push	{r3, r4, r5, lr}
   208d2:	4603      	mov	r3, r0
	__asm__ volatile(
   208d4:	f04f 0220 	mov.w	r2, #32
   208d8:	f3ef 8511 	mrs	r5, BASEPRI
   208dc:	f382 8811 	msr	BASEPRI, r2
   208e0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   208e4:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   208e6:	2101      	movs	r1, #1
   208e8:	6081      	str	r1, [r0, #8]
	return list->head == list;
   208ea:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   208ec:	4283      	cmp	r3, r0
   208ee:	d106      	bne.n	208fe <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   208f0:	f385 8811 	msr	BASEPRI, r5
   208f4:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   208f8:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   208fa:	4620      	mov	r0, r4
   208fc:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   208fe:	e9d0 3200 	ldrd	r3, r2, [r0]
   20902:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20904:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20906:	2300      	movs	r3, #0
	node->prev = NULL;
   20908:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   2090c:	f00a fe19 	bl	2b542 <signal_poll_event>
	z_reschedule(&lock, key);
   20910:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20912:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20914:	4801      	ldr	r0, [pc, #4]	; (2091c <z_impl_k_poll_signal_raise+0x4c>)
   20916:	f7ff f885 	bl	1fa24 <z_reschedule>
	return rc;
   2091a:	e7ee      	b.n	208fa <z_impl_k_poll_signal_raise+0x2a>
   2091c:	2000875c 	.word	0x2000875c

00020920 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   20920:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   20922:	4601      	mov	r1, r0
   20924:	4801      	ldr	r0, [pc, #4]	; (2092c <k_aligned_alloc+0xc>)
   20926:	f00a bf1b 	b.w	2b760 <z_heap_aligned_alloc>
   2092a:	bf00      	nop
   2092c:	20000bac 	.word	0x20000bac

00020930 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20930:	b538      	push	{r3, r4, r5, lr}
   20932:	4604      	mov	r4, r0
   20934:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   20936:	f00a fc8b 	bl	2b250 <k_is_in_isr>
   2093a:	b950      	cbnz	r0, 20952 <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2093c:	4b06      	ldr	r3, [pc, #24]	; (20958 <z_thread_aligned_alloc+0x28>)
   2093e:	689b      	ldr	r3, [r3, #8]
   20940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   20942:	b143      	cbz	r3, 20956 <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   20944:	462a      	mov	r2, r5
   20946:	4621      	mov	r1, r4
   20948:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   2094a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   2094e:	f00a bf07 	b.w	2b760 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   20952:	4b02      	ldr	r3, [pc, #8]	; (2095c <z_thread_aligned_alloc+0x2c>)
   20954:	e7f6      	b.n	20944 <z_thread_aligned_alloc+0x14>
}
   20956:	bd38      	pop	{r3, r4, r5, pc}
   20958:	20004068 	.word	0x20004068
   2095c:	20000bac 	.word	0x20000bac

00020960 <validate_structure>:
   20960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20962:	6801      	ldr	r1, [r0, #0]
   20964:	293b      	cmp	r1, #59	; 0x3b
   20966:	4604      	mov	r4, r0
   20968:	d911      	bls.n	2098e <validate_structure+0x2e>
   2096a:	223c      	movs	r2, #60	; 0x3c
   2096c:	4668      	mov	r0, sp
   2096e:	f00a ffce 	bl	2b90e <div>
   20972:	9a01      	ldr	r2, [sp, #4]
   20974:	6863      	ldr	r3, [r4, #4]
   20976:	9900      	ldr	r1, [sp, #0]
   20978:	2a00      	cmp	r2, #0
   2097a:	440b      	add	r3, r1
   2097c:	6063      	str	r3, [r4, #4]
   2097e:	bfbb      	ittet	lt
   20980:	323c      	addlt	r2, #60	; 0x3c
   20982:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20986:	6022      	strge	r2, [r4, #0]
   20988:	6022      	strlt	r2, [r4, #0]
   2098a:	bfb8      	it	lt
   2098c:	6063      	strlt	r3, [r4, #4]
   2098e:	6861      	ldr	r1, [r4, #4]
   20990:	293b      	cmp	r1, #59	; 0x3b
   20992:	d911      	bls.n	209b8 <validate_structure+0x58>
   20994:	223c      	movs	r2, #60	; 0x3c
   20996:	4668      	mov	r0, sp
   20998:	f00a ffb9 	bl	2b90e <div>
   2099c:	9a01      	ldr	r2, [sp, #4]
   2099e:	68a3      	ldr	r3, [r4, #8]
   209a0:	9900      	ldr	r1, [sp, #0]
   209a2:	2a00      	cmp	r2, #0
   209a4:	440b      	add	r3, r1
   209a6:	60a3      	str	r3, [r4, #8]
   209a8:	bfbb      	ittet	lt
   209aa:	323c      	addlt	r2, #60	; 0x3c
   209ac:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   209b0:	6062      	strge	r2, [r4, #4]
   209b2:	6062      	strlt	r2, [r4, #4]
   209b4:	bfb8      	it	lt
   209b6:	60a3      	strlt	r3, [r4, #8]
   209b8:	68a1      	ldr	r1, [r4, #8]
   209ba:	2917      	cmp	r1, #23
   209bc:	d911      	bls.n	209e2 <validate_structure+0x82>
   209be:	2218      	movs	r2, #24
   209c0:	4668      	mov	r0, sp
   209c2:	f00a ffa4 	bl	2b90e <div>
   209c6:	9a01      	ldr	r2, [sp, #4]
   209c8:	68e3      	ldr	r3, [r4, #12]
   209ca:	9900      	ldr	r1, [sp, #0]
   209cc:	2a00      	cmp	r2, #0
   209ce:	440b      	add	r3, r1
   209d0:	60e3      	str	r3, [r4, #12]
   209d2:	bfbb      	ittet	lt
   209d4:	3218      	addlt	r2, #24
   209d6:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   209da:	60a2      	strge	r2, [r4, #8]
   209dc:	60a2      	strlt	r2, [r4, #8]
   209de:	bfb8      	it	lt
   209e0:	60e3      	strlt	r3, [r4, #12]
   209e2:	6921      	ldr	r1, [r4, #16]
   209e4:	290b      	cmp	r1, #11
   209e6:	d911      	bls.n	20a0c <validate_structure+0xac>
   209e8:	220c      	movs	r2, #12
   209ea:	4668      	mov	r0, sp
   209ec:	f00a ff8f 	bl	2b90e <div>
   209f0:	9a01      	ldr	r2, [sp, #4]
   209f2:	6963      	ldr	r3, [r4, #20]
   209f4:	9900      	ldr	r1, [sp, #0]
   209f6:	2a00      	cmp	r2, #0
   209f8:	440b      	add	r3, r1
   209fa:	6163      	str	r3, [r4, #20]
   209fc:	bfbb      	ittet	lt
   209fe:	320c      	addlt	r2, #12
   20a00:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20a04:	6122      	strge	r2, [r4, #16]
   20a06:	6122      	strlt	r2, [r4, #16]
   20a08:	bfb8      	it	lt
   20a0a:	6163      	strlt	r3, [r4, #20]
   20a0c:	6963      	ldr	r3, [r4, #20]
   20a0e:	0799      	lsls	r1, r3, #30
   20a10:	d120      	bne.n	20a54 <validate_structure+0xf4>
   20a12:	2164      	movs	r1, #100	; 0x64
   20a14:	fb93 f2f1 	sdiv	r2, r3, r1
   20a18:	fb01 3212 	mls	r2, r1, r2, r3
   20a1c:	b9e2      	cbnz	r2, 20a58 <validate_structure+0xf8>
   20a1e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   20a22:	f44f 71c8 	mov.w	r1, #400	; 0x190
   20a26:	fb93 f2f1 	sdiv	r2, r3, r1
   20a2a:	fb01 3312 	mls	r3, r1, r2, r3
   20a2e:	2b00      	cmp	r3, #0
   20a30:	bf14      	ite	ne
   20a32:	231c      	movne	r3, #28
   20a34:	231d      	moveq	r3, #29
   20a36:	68e2      	ldr	r2, [r4, #12]
   20a38:	2a00      	cmp	r2, #0
   20a3a:	dc0f      	bgt.n	20a5c <validate_structure+0xfc>
   20a3c:	4f33      	ldr	r7, [pc, #204]	; (20b0c <validate_structure+0x1ac>)
   20a3e:	260b      	movs	r6, #11
   20a40:	2064      	movs	r0, #100	; 0x64
   20a42:	f44f 75c8 	mov.w	r5, #400	; 0x190
   20a46:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   20a4a:	f1bc 0f00 	cmp.w	ip, #0
   20a4e:	dd31      	ble.n	20ab4 <validate_structure+0x154>
   20a50:	b003      	add	sp, #12
   20a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20a54:	231c      	movs	r3, #28
   20a56:	e7ee      	b.n	20a36 <validate_structure+0xd6>
   20a58:	231d      	movs	r3, #29
   20a5a:	e7ec      	b.n	20a36 <validate_structure+0xd6>
   20a5c:	4f2b      	ldr	r7, [pc, #172]	; (20b0c <validate_structure+0x1ac>)
   20a5e:	f04f 0c00 	mov.w	ip, #0
   20a62:	2564      	movs	r5, #100	; 0x64
   20a64:	f44f 76c8 	mov.w	r6, #400	; 0x190
   20a68:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   20a6c:	2a01      	cmp	r2, #1
   20a6e:	bf14      	ite	ne
   20a70:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   20a74:	4618      	moveq	r0, r3
   20a76:	4281      	cmp	r1, r0
   20a78:	ddea      	ble.n	20a50 <validate_structure+0xf0>
   20a7a:	3201      	adds	r2, #1
   20a7c:	1a09      	subs	r1, r1, r0
   20a7e:	2a0c      	cmp	r2, #12
   20a80:	60e1      	str	r1, [r4, #12]
   20a82:	6122      	str	r2, [r4, #16]
   20a84:	d1f0      	bne.n	20a68 <validate_structure+0x108>
   20a86:	6963      	ldr	r3, [r4, #20]
   20a88:	1c5a      	adds	r2, r3, #1
   20a8a:	0791      	lsls	r1, r2, #30
   20a8c:	e9c4 c204 	strd	ip, r2, [r4, #16]
   20a90:	d137      	bne.n	20b02 <validate_structure+0x1a2>
   20a92:	fb92 f1f5 	sdiv	r1, r2, r5
   20a96:	fb05 2211 	mls	r2, r5, r1, r2
   20a9a:	2a00      	cmp	r2, #0
   20a9c:	d133      	bne.n	20b06 <validate_structure+0x1a6>
   20a9e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   20aa2:	fb93 f2f6 	sdiv	r2, r3, r6
   20aa6:	fb06 3312 	mls	r3, r6, r2, r3
   20aaa:	2b00      	cmp	r3, #0
   20aac:	bf14      	ite	ne
   20aae:	231c      	movne	r3, #28
   20ab0:	231d      	moveq	r3, #29
   20ab2:	e7d9      	b.n	20a68 <validate_structure+0x108>
   20ab4:	6921      	ldr	r1, [r4, #16]
   20ab6:	3901      	subs	r1, #1
   20ab8:	6121      	str	r1, [r4, #16]
   20aba:	3101      	adds	r1, #1
   20abc:	d114      	bne.n	20ae8 <validate_structure+0x188>
   20abe:	6963      	ldr	r3, [r4, #20]
   20ac0:	1e59      	subs	r1, r3, #1
   20ac2:	078a      	lsls	r2, r1, #30
   20ac4:	e9c4 6104 	strd	r6, r1, [r4, #16]
   20ac8:	d117      	bne.n	20afa <validate_structure+0x19a>
   20aca:	fb91 f2f0 	sdiv	r2, r1, r0
   20ace:	fb00 1112 	mls	r1, r0, r2, r1
   20ad2:	b9a1      	cbnz	r1, 20afe <validate_structure+0x19e>
   20ad4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   20ad8:	fb93 f2f5 	sdiv	r2, r3, r5
   20adc:	fb05 3312 	mls	r3, r5, r2, r3
   20ae0:	2b00      	cmp	r3, #0
   20ae2:	bf14      	ite	ne
   20ae4:	231c      	movne	r3, #28
   20ae6:	231d      	moveq	r3, #29
   20ae8:	6922      	ldr	r2, [r4, #16]
   20aea:	2a01      	cmp	r2, #1
   20aec:	bf14      	ite	ne
   20aee:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   20af2:	461a      	moveq	r2, r3
   20af4:	4462      	add	r2, ip
   20af6:	60e2      	str	r2, [r4, #12]
   20af8:	e7a5      	b.n	20a46 <validate_structure+0xe6>
   20afa:	231c      	movs	r3, #28
   20afc:	e7f4      	b.n	20ae8 <validate_structure+0x188>
   20afe:	231d      	movs	r3, #29
   20b00:	e7f2      	b.n	20ae8 <validate_structure+0x188>
   20b02:	231c      	movs	r3, #28
   20b04:	e7b0      	b.n	20a68 <validate_structure+0x108>
   20b06:	231d      	movs	r3, #29
   20b08:	e7ae      	b.n	20a68 <validate_structure+0x108>
   20b0a:	bf00      	nop
   20b0c:	0002d9cc 	.word	0x0002d9cc

00020b10 <mktime>:
   20b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b14:	b08b      	sub	sp, #44	; 0x2c
   20b16:	4605      	mov	r5, r0
   20b18:	f001 facc 	bl	220b4 <__gettzinfo>
   20b1c:	4607      	mov	r7, r0
   20b1e:	4628      	mov	r0, r5
   20b20:	f7ff ff1e 	bl	20960 <validate_structure>
   20b24:	e9d5 2300 	ldrd	r2, r3, [r5]
   20b28:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   20b2c:	68a8      	ldr	r0, [r5, #8]
   20b2e:	696e      	ldr	r6, [r5, #20]
   20b30:	fb0a 2303 	mla	r3, sl, r3, r2
   20b34:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   20b38:	fb0a 3a00 	mla	sl, sl, r0, r3
   20b3c:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   20b40:	4abb      	ldr	r2, [pc, #748]	; (20e30 <mktime+0x320>)
   20b42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   20b46:	3c01      	subs	r4, #1
   20b48:	2b01      	cmp	r3, #1
   20b4a:	4414      	add	r4, r2
   20b4c:	dd11      	ble.n	20b72 <mktime+0x62>
   20b4e:	07b1      	lsls	r1, r6, #30
   20b50:	d10f      	bne.n	20b72 <mktime+0x62>
   20b52:	2264      	movs	r2, #100	; 0x64
   20b54:	fb96 f3f2 	sdiv	r3, r6, r2
   20b58:	fb02 6313 	mls	r3, r2, r3, r6
   20b5c:	b943      	cbnz	r3, 20b70 <mktime+0x60>
   20b5e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   20b62:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20b66:	fb91 f3f2 	sdiv	r3, r1, r2
   20b6a:	fb02 1313 	mls	r3, r2, r3, r1
   20b6e:	b903      	cbnz	r3, 20b72 <mktime+0x62>
   20b70:	3401      	adds	r4, #1
   20b72:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   20b76:	3310      	adds	r3, #16
   20b78:	f644 6220 	movw	r2, #20000	; 0x4e20
   20b7c:	4293      	cmp	r3, r2
   20b7e:	61ec      	str	r4, [r5, #28]
   20b80:	f200 8162 	bhi.w	20e48 <mktime+0x338>
   20b84:	2e46      	cmp	r6, #70	; 0x46
   20b86:	dd75      	ble.n	20c74 <mktime+0x164>
   20b88:	2346      	movs	r3, #70	; 0x46
   20b8a:	f240 1e6d 	movw	lr, #365	; 0x16d
   20b8e:	2164      	movs	r1, #100	; 0x64
   20b90:	f44f 70c8 	mov.w	r0, #400	; 0x190
   20b94:	079a      	lsls	r2, r3, #30
   20b96:	d167      	bne.n	20c68 <mktime+0x158>
   20b98:	fb93 f2f1 	sdiv	r2, r3, r1
   20b9c:	fb01 3212 	mls	r2, r1, r2, r3
   20ba0:	2a00      	cmp	r2, #0
   20ba2:	d164      	bne.n	20c6e <mktime+0x15e>
   20ba4:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   20ba8:	fb9c f2f0 	sdiv	r2, ip, r0
   20bac:	fb00 c212 	mls	r2, r0, r2, ip
   20bb0:	2a00      	cmp	r2, #0
   20bb2:	bf14      	ite	ne
   20bb4:	4672      	movne	r2, lr
   20bb6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   20bba:	3301      	adds	r3, #1
   20bbc:	429e      	cmp	r6, r3
   20bbe:	4414      	add	r4, r2
   20bc0:	d1e8      	bne.n	20b94 <mktime+0x84>
   20bc2:	4b9c      	ldr	r3, [pc, #624]	; (20e34 <mktime+0x324>)
   20bc4:	ea4f 7bea 	mov.w	fp, sl, asr #31
   20bc8:	fbc3 ab04 	smlal	sl, fp, r3, r4
   20bcc:	f00a fe6d 	bl	2b8aa <_tzset_unlocked>
   20bd0:	4b99      	ldr	r3, [pc, #612]	; (20e38 <mktime+0x328>)
   20bd2:	f8d3 9000 	ldr.w	r9, [r3]
   20bd6:	f1b9 0f00 	cmp.w	r9, #0
   20bda:	d03f      	beq.n	20c5c <mktime+0x14c>
   20bdc:	f8d5 9020 	ldr.w	r9, [r5, #32]
   20be0:	6968      	ldr	r0, [r5, #20]
   20be2:	687b      	ldr	r3, [r7, #4]
   20be4:	f1b9 0f01 	cmp.w	r9, #1
   20be8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   20bec:	46c8      	mov	r8, r9
   20bee:	bfa8      	it	ge
   20bf0:	f04f 0801 	movge.w	r8, #1
   20bf4:	4283      	cmp	r3, r0
   20bf6:	d17f      	bne.n	20cf8 <mktime+0x1e8>
   20bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20bfa:	4619      	mov	r1, r3
   20bfc:	17da      	asrs	r2, r3, #31
   20bfe:	e9cd 1200 	strd	r1, r2, [sp]
   20c02:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   20c06:	e9cd 1202 	strd	r1, r2, [sp, #8]
   20c0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20c10:	1a80      	subs	r0, r0, r2
   20c12:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   20c16:	4582      	cmp	sl, r0
   20c18:	e9cd 0106 	strd	r0, r1, [sp, #24]
   20c1c:	eb7b 0101 	sbcs.w	r1, fp, r1
   20c20:	da71      	bge.n	20d06 <mktime+0x1f6>
   20c22:	9800      	ldr	r0, [sp, #0]
   20c24:	6a39      	ldr	r1, [r7, #32]
   20c26:	1a09      	subs	r1, r1, r0
   20c28:	9104      	str	r1, [sp, #16]
   20c2a:	9801      	ldr	r0, [sp, #4]
   20c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20c2e:	eb61 0100 	sbc.w	r1, r1, r0
   20c32:	9105      	str	r1, [sp, #20]
   20c34:	6839      	ldr	r1, [r7, #0]
   20c36:	2900      	cmp	r1, #0
   20c38:	d075      	beq.n	20d26 <mktime+0x216>
   20c3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20c3e:	4582      	cmp	sl, r0
   20c40:	eb7b 0101 	sbcs.w	r1, fp, r1
   20c44:	db05      	blt.n	20c52 <mktime+0x142>
   20c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   20c4a:	4582      	cmp	sl, r0
   20c4c:	eb7b 0101 	sbcs.w	r1, fp, r1
   20c50:	db6f      	blt.n	20d32 <mktime+0x222>
   20c52:	f1b9 0f00 	cmp.w	r9, #0
   20c56:	f04f 0900 	mov.w	r9, #0
   20c5a:	da6f      	bge.n	20d3c <mktime+0x22c>
   20c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c5e:	eb1a 0003 	adds.w	r0, sl, r3
   20c62:	eb4b 71e3 	adc.w	r1, fp, r3, asr #31
   20c66:	e0ae      	b.n	20dc6 <mktime+0x2b6>
   20c68:	f240 126d 	movw	r2, #365	; 0x16d
   20c6c:	e7a5      	b.n	20bba <mktime+0xaa>
   20c6e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   20c72:	e7a2      	b.n	20bba <mktime+0xaa>
   20c74:	d0a5      	beq.n	20bc2 <mktime+0xb2>
   20c76:	2345      	movs	r3, #69	; 0x45
   20c78:	f240 1e6d 	movw	lr, #365	; 0x16d
   20c7c:	2164      	movs	r1, #100	; 0x64
   20c7e:	f44f 70c8 	mov.w	r0, #400	; 0x190
   20c82:	e012      	b.n	20caa <mktime+0x19a>
   20c84:	bb62      	cbnz	r2, 20ce0 <mktime+0x1d0>
   20c86:	fb93 f2f1 	sdiv	r2, r3, r1
   20c8a:	fb01 3212 	mls	r2, r1, r2, r3
   20c8e:	bb52      	cbnz	r2, 20ce6 <mktime+0x1d6>
   20c90:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   20c94:	fb9c f2f0 	sdiv	r2, ip, r0
   20c98:	fb00 c212 	mls	r2, r0, r2, ip
   20c9c:	2a00      	cmp	r2, #0
   20c9e:	bf14      	ite	ne
   20ca0:	4672      	movne	r2, lr
   20ca2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   20ca6:	1aa4      	subs	r4, r4, r2
   20ca8:	3b01      	subs	r3, #1
   20caa:	429e      	cmp	r6, r3
   20cac:	f003 0203 	and.w	r2, r3, #3
   20cb0:	dbe8      	blt.n	20c84 <mktime+0x174>
   20cb2:	b9da      	cbnz	r2, 20cec <mktime+0x1dc>
   20cb4:	2264      	movs	r2, #100	; 0x64
   20cb6:	fb96 f3f2 	sdiv	r3, r6, r2
   20cba:	fb02 6313 	mls	r3, r2, r3, r6
   20cbe:	b9c3      	cbnz	r3, 20cf2 <mktime+0x1e2>
   20cc0:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   20cc4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20cc8:	fb91 f3f2 	sdiv	r3, r1, r2
   20ccc:	fb02 1313 	mls	r3, r2, r3, r1
   20cd0:	2b00      	cmp	r3, #0
   20cd2:	f240 136d 	movw	r3, #365	; 0x16d
   20cd6:	bf08      	it	eq
   20cd8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   20cdc:	1ae4      	subs	r4, r4, r3
   20cde:	e770      	b.n	20bc2 <mktime+0xb2>
   20ce0:	f240 126d 	movw	r2, #365	; 0x16d
   20ce4:	e7df      	b.n	20ca6 <mktime+0x196>
   20ce6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   20cea:	e7dc      	b.n	20ca6 <mktime+0x196>
   20cec:	f240 136d 	movw	r3, #365	; 0x16d
   20cf0:	e7f4      	b.n	20cdc <mktime+0x1cc>
   20cf2:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   20cf6:	e7f1      	b.n	20cdc <mktime+0x1cc>
   20cf8:	f000 ff6a 	bl	21bd0 <__tzcalc_limits>
   20cfc:	2800      	cmp	r0, #0
   20cfe:	f47f af7b 	bne.w	20bf8 <mktime+0xe8>
   20d02:	46c1      	mov	r9, r8
   20d04:	e054      	b.n	20db0 <mktime+0x2a0>
   20d06:	9800      	ldr	r0, [sp, #0]
   20d08:	9902      	ldr	r1, [sp, #8]
   20d0a:	1a09      	subs	r1, r1, r0
   20d0c:	9108      	str	r1, [sp, #32]
   20d0e:	9801      	ldr	r0, [sp, #4]
   20d10:	9903      	ldr	r1, [sp, #12]
   20d12:	eb61 0100 	sbc.w	r1, r1, r0
   20d16:	9109      	str	r1, [sp, #36]	; 0x24
   20d18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   20d1c:	4582      	cmp	sl, r0
   20d1e:	eb7b 0101 	sbcs.w	r1, fp, r1
   20d22:	dbee      	blt.n	20d02 <mktime+0x1f2>
   20d24:	e77d      	b.n	20c22 <mktime+0x112>
   20d26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20d2a:	4582      	cmp	sl, r0
   20d2c:	eb7b 0101 	sbcs.w	r1, fp, r1
   20d30:	db89      	blt.n	20c46 <mktime+0x136>
   20d32:	f1b9 0f00 	cmp.w	r9, #0
   20d36:	db3f      	blt.n	20db8 <mktime+0x2a8>
   20d38:	f04f 0901 	mov.w	r9, #1
   20d3c:	ea88 0809 	eor.w	r8, r8, r9
   20d40:	f1b8 0f01 	cmp.w	r8, #1
   20d44:	d134      	bne.n	20db0 <mktime+0x2a0>
   20d46:	f1b9 0f00 	cmp.w	r9, #0
   20d4a:	d04b      	beq.n	20de4 <mktime+0x2d4>
   20d4c:	1ad3      	subs	r3, r2, r3
   20d4e:	682a      	ldr	r2, [r5, #0]
   20d50:	f8d5 800c 	ldr.w	r8, [r5, #12]
   20d54:	441a      	add	r2, r3
   20d56:	eb1a 0a03 	adds.w	sl, sl, r3
   20d5a:	602a      	str	r2, [r5, #0]
   20d5c:	4628      	mov	r0, r5
   20d5e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   20d62:	f7ff fdfd 	bl	20960 <validate_structure>
   20d66:	68ea      	ldr	r2, [r5, #12]
   20d68:	ebb2 0208 	subs.w	r2, r2, r8
   20d6c:	d020      	beq.n	20db0 <mktime+0x2a0>
   20d6e:	2a01      	cmp	r2, #1
   20d70:	dc3a      	bgt.n	20de8 <mktime+0x2d8>
   20d72:	1c90      	adds	r0, r2, #2
   20d74:	bfd8      	it	le
   20d76:	2201      	movle	r2, #1
   20d78:	69eb      	ldr	r3, [r5, #28]
   20d7a:	18d3      	adds	r3, r2, r3
   20d7c:	4414      	add	r4, r2
   20d7e:	d53c      	bpl.n	20dfa <mktime+0x2ea>
   20d80:	1e72      	subs	r2, r6, #1
   20d82:	0791      	lsls	r1, r2, #30
   20d84:	d133      	bne.n	20dee <mktime+0x2de>
   20d86:	2164      	movs	r1, #100	; 0x64
   20d88:	fb92 f3f1 	sdiv	r3, r2, r1
   20d8c:	fb01 2313 	mls	r3, r1, r3, r2
   20d90:	bb83      	cbnz	r3, 20df4 <mktime+0x2e4>
   20d92:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   20d96:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20d9a:	fb96 f3f2 	sdiv	r3, r6, r2
   20d9e:	fb02 6613 	mls	r6, r2, r3, r6
   20da2:	2e00      	cmp	r6, #0
   20da4:	f240 136d 	movw	r3, #365	; 0x16d
   20da8:	bf18      	it	ne
   20daa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   20dae:	61eb      	str	r3, [r5, #28]
   20db0:	f1b9 0f01 	cmp.w	r9, #1
   20db4:	f47f af52 	bne.w	20c5c <mktime+0x14c>
   20db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20dba:	eb1a 0003 	adds.w	r0, sl, r3
   20dbe:	eb4b 71e3 	adc.w	r1, fp, r3, asr #31
   20dc2:	f04f 0901 	mov.w	r9, #1
   20dc6:	3404      	adds	r4, #4
   20dc8:	2307      	movs	r3, #7
   20dca:	fb94 f3f3 	sdiv	r3, r4, r3
   20dce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   20dd2:	1ae4      	subs	r4, r4, r3
   20dd4:	bf48      	it	mi
   20dd6:	3407      	addmi	r4, #7
   20dd8:	f8c5 9020 	str.w	r9, [r5, #32]
   20ddc:	61ac      	str	r4, [r5, #24]
   20dde:	b00b      	add	sp, #44	; 0x2c
   20de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20de4:	1a9b      	subs	r3, r3, r2
   20de6:	e7b2      	b.n	20d4e <mktime+0x23e>
   20de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20dec:	e7c4      	b.n	20d78 <mktime+0x268>
   20dee:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   20df2:	e7dc      	b.n	20dae <mktime+0x29e>
   20df4:	f240 136d 	movw	r3, #365	; 0x16d
   20df8:	e7d9      	b.n	20dae <mktime+0x29e>
   20dfa:	07b2      	lsls	r2, r6, #30
   20dfc:	d11e      	bne.n	20e3c <mktime+0x32c>
   20dfe:	2164      	movs	r1, #100	; 0x64
   20e00:	fb96 f2f1 	sdiv	r2, r6, r1
   20e04:	fb01 6212 	mls	r2, r1, r2, r6
   20e08:	b9da      	cbnz	r2, 20e42 <mktime+0x332>
   20e0a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   20e0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   20e12:	fb96 f2f1 	sdiv	r2, r6, r1
   20e16:	fb01 6612 	mls	r6, r1, r2, r6
   20e1a:	2e00      	cmp	r6, #0
   20e1c:	f240 126d 	movw	r2, #365	; 0x16d
   20e20:	bf08      	it	eq
   20e22:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   20e26:	4293      	cmp	r3, r2
   20e28:	bfa8      	it	ge
   20e2a:	1a9b      	subge	r3, r3, r2
   20e2c:	e7bf      	b.n	20dae <mktime+0x29e>
   20e2e:	bf00      	nop
   20e30:	0002d9fc 	.word	0x0002d9fc
   20e34:	00015180 	.word	0x00015180
   20e38:	200080b0 	.word	0x200080b0
   20e3c:	f240 126d 	movw	r2, #365	; 0x16d
   20e40:	e7f1      	b.n	20e26 <mktime+0x316>
   20e42:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   20e46:	e7ee      	b.n	20e26 <mktime+0x316>
   20e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20e50:	e7c5      	b.n	20dde <mktime+0x2ce>
   20e52:	bf00      	nop

00020e54 <sniprintf>:
   20e54:	b40c      	push	{r2, r3}
   20e56:	b530      	push	{r4, r5, lr}
   20e58:	4b17      	ldr	r3, [pc, #92]	; (20eb8 <sniprintf+0x64>)
   20e5a:	1e0c      	subs	r4, r1, #0
   20e5c:	681d      	ldr	r5, [r3, #0]
   20e5e:	b09b      	sub	sp, #108	; 0x6c
   20e60:	da08      	bge.n	20e74 <sniprintf+0x20>
   20e62:	238b      	movs	r3, #139	; 0x8b
   20e64:	602b      	str	r3, [r5, #0]
   20e66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e6a:	b01b      	add	sp, #108	; 0x6c
   20e6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20e70:	b002      	add	sp, #8
   20e72:	4770      	bx	lr
   20e74:	f44f 7302 	mov.w	r3, #520	; 0x208
   20e78:	f8ad 3010 	strh.w	r3, [sp, #16]
   20e7c:	bf14      	ite	ne
   20e7e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   20e82:	4623      	moveq	r3, r4
   20e84:	9303      	str	r3, [sp, #12]
   20e86:	9306      	str	r3, [sp, #24]
   20e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20e8c:	9001      	str	r0, [sp, #4]
   20e8e:	9005      	str	r0, [sp, #20]
   20e90:	f8ad 3012 	strh.w	r3, [sp, #18]
   20e94:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   20e96:	ab1f      	add	r3, sp, #124	; 0x7c
   20e98:	a901      	add	r1, sp, #4
   20e9a:	4628      	mov	r0, r5
   20e9c:	9300      	str	r3, [sp, #0]
   20e9e:	f001 f9bd 	bl	2221c <_svfiprintf_r>
   20ea2:	1c43      	adds	r3, r0, #1
   20ea4:	bfbc      	itt	lt
   20ea6:	238b      	movlt	r3, #139	; 0x8b
   20ea8:	602b      	strlt	r3, [r5, #0]
   20eaa:	2c00      	cmp	r4, #0
   20eac:	d0dd      	beq.n	20e6a <sniprintf+0x16>
   20eae:	9b01      	ldr	r3, [sp, #4]
   20eb0:	2200      	movs	r2, #0
   20eb2:	701a      	strb	r2, [r3, #0]
   20eb4:	e7d9      	b.n	20e6a <sniprintf+0x16>
   20eb6:	bf00      	nop
   20eb8:	20000848 	.word	0x20000848

00020ebc <siscanf>:
   20ebc:	b40e      	push	{r1, r2, r3}
   20ebe:	b530      	push	{r4, r5, lr}
   20ec0:	b09a      	sub	sp, #104	; 0x68
   20ec2:	ac1d      	add	r4, sp, #116	; 0x74
   20ec4:	f44f 7201 	mov.w	r2, #516	; 0x204
   20ec8:	f854 5b04 	ldr.w	r5, [r4], #4
   20ecc:	f8ad 2010 	strh.w	r2, [sp, #16]
   20ed0:	9001      	str	r0, [sp, #4]
   20ed2:	9005      	str	r0, [sp, #20]
   20ed4:	f7df fada 	bl	48c <strlen>
   20ed8:	4b0b      	ldr	r3, [pc, #44]	; (20f08 <siscanf+0x4c>)
   20eda:	9002      	str	r0, [sp, #8]
   20edc:	9006      	str	r0, [sp, #24]
   20ede:	930a      	str	r3, [sp, #40]	; 0x28
   20ee0:	480a      	ldr	r0, [pc, #40]	; (20f0c <siscanf+0x50>)
   20ee2:	9400      	str	r4, [sp, #0]
   20ee4:	2300      	movs	r3, #0
   20ee6:	930e      	str	r3, [sp, #56]	; 0x38
   20ee8:	9313      	str	r3, [sp, #76]	; 0x4c
   20eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20eee:	f8ad 3012 	strh.w	r3, [sp, #18]
   20ef2:	462a      	mov	r2, r5
   20ef4:	4623      	mov	r3, r4
   20ef6:	a901      	add	r1, sp, #4
   20ef8:	6800      	ldr	r0, [r0, #0]
   20efa:	f001 fa8f 	bl	2241c <__ssvfiscanf_r>
   20efe:	b01a      	add	sp, #104	; 0x68
   20f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20f04:	b003      	add	sp, #12
   20f06:	4770      	bx	lr
   20f08:	0002b805 	.word	0x0002b805
   20f0c:	20000848 	.word	0x20000848

00020f10 <iso_year_adjust>:
   20f10:	6941      	ldr	r1, [r0, #20]
   20f12:	2900      	cmp	r1, #0
   20f14:	f240 736c 	movw	r3, #1900	; 0x76c
   20f18:	bfa8      	it	ge
   20f1a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   20f1e:	18ca      	adds	r2, r1, r3
   20f20:	078b      	lsls	r3, r1, #30
   20f22:	d105      	bne.n	20f30 <iso_year_adjust+0x20>
   20f24:	2164      	movs	r1, #100	; 0x64
   20f26:	fb92 f3f1 	sdiv	r3, r2, r1
   20f2a:	fb01 2313 	mls	r3, r1, r3, r2
   20f2e:	b9db      	cbnz	r3, 20f68 <iso_year_adjust+0x58>
   20f30:	f44f 71c8 	mov.w	r1, #400	; 0x190
   20f34:	fb92 f3f1 	sdiv	r3, r2, r1
   20f38:	fb01 2313 	mls	r3, r1, r3, r2
   20f3c:	fab3 f383 	clz	r3, r3
   20f40:	095b      	lsrs	r3, r3, #5
   20f42:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
   20f46:	0040      	lsls	r0, r0, #1
   20f48:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   20f4c:	4418      	add	r0, r3
   20f4e:	f241 63a2 	movw	r3, #5794	; 0x16a2
   20f52:	4298      	cmp	r0, r3
   20f54:	d03a      	beq.n	20fcc <iso_year_adjust+0xbc>
   20f56:	dc21      	bgt.n	20f9c <iso_year_adjust+0x8c>
   20f58:	2801      	cmp	r0, #1
   20f5a:	dc1a      	bgt.n	20f92 <iso_year_adjust+0x82>
   20f5c:	2800      	cmp	r0, #0
   20f5e:	bfb4      	ite	lt
   20f60:	2000      	movlt	r0, #0
   20f62:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   20f66:	4770      	bx	lr
   20f68:	2301      	movs	r3, #1
   20f6a:	e7ea      	b.n	20f42 <iso_year_adjust+0x32>
   20f6c:	2817      	cmp	r0, #23
   20f6e:	d813      	bhi.n	20f98 <iso_year_adjust+0x88>
   20f70:	e8df f000 	tbb	[pc, r0]
   20f74:	0c0c0c0c 	.word	0x0c0c0c0c
   20f78:	0c0c1212 	.word	0x0c0c1212
   20f7c:	12121212 	.word	0x12121212
   20f80:	12121212 	.word	0x12121212
   20f84:	0c0c1212 	.word	0x0c0c1212
   20f88:	0c0c1212 	.word	0x0c0c1212
   20f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20f90:	4770      	bx	lr
   20f92:	380a      	subs	r0, #10
   20f94:	2817      	cmp	r0, #23
   20f96:	d9e9      	bls.n	20f6c <iso_year_adjust+0x5c>
   20f98:	2000      	movs	r0, #0
   20f9a:	4770      	bx	lr
   20f9c:	f241 63b4 	movw	r3, #5812	; 0x16b4
   20fa0:	4298      	cmp	r0, r3
   20fa2:	dc06      	bgt.n	20fb2 <iso_year_adjust+0xa2>
   20fa4:	f241 63b1 	movw	r3, #5809	; 0x16b1
   20fa8:	4298      	cmp	r0, r3
   20faa:	bfd4      	ite	le
   20fac:	2000      	movle	r0, #0
   20fae:	2001      	movgt	r0, #1
   20fb0:	4770      	bx	lr
   20fb2:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
   20fb6:	3802      	subs	r0, #2
   20fb8:	2815      	cmp	r0, #21
   20fba:	d8ed      	bhi.n	20f98 <iso_year_adjust+0x88>
   20fbc:	2301      	movs	r3, #1
   20fbe:	4083      	lsls	r3, r0
   20fc0:	4803      	ldr	r0, [pc, #12]	; (20fd0 <iso_year_adjust+0xc0>)
   20fc2:	4018      	ands	r0, r3
   20fc4:	3800      	subs	r0, #0
   20fc6:	bf18      	it	ne
   20fc8:	2001      	movne	r0, #1
   20fca:	4770      	bx	lr
   20fcc:	2001      	movs	r0, #1
   20fce:	4770      	bx	lr
   20fd0:	002a001f 	.word	0x002a001f

00020fd4 <__strftime>:
   20fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fd8:	b091      	sub	sp, #68	; 0x44
   20fda:	461e      	mov	r6, r3
   20fdc:	2300      	movs	r3, #0
   20fde:	4607      	mov	r7, r0
   20fe0:	460d      	mov	r5, r1
   20fe2:	9304      	str	r3, [sp, #16]
   20fe4:	461c      	mov	r4, r3
   20fe6:	7813      	ldrb	r3, [r2, #0]
   20fe8:	2b00      	cmp	r3, #0
   20fea:	f000 84cd 	beq.w	21988 <__strftime+0x9b4>
   20fee:	2b25      	cmp	r3, #37	; 0x25
   20ff0:	d11f      	bne.n	21032 <__strftime+0x5e>
   20ff2:	f892 9001 	ldrb.w	r9, [r2, #1]
   20ff6:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   20ffa:	d024      	beq.n	21046 <__strftime+0x72>
   20ffc:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   21000:	d021      	beq.n	21046 <__strftime+0x72>
   21002:	f102 0a01 	add.w	sl, r2, #1
   21006:	f04f 0900 	mov.w	r9, #0
   2100a:	f89a 3000 	ldrb.w	r3, [sl]
   2100e:	3b31      	subs	r3, #49	; 0x31
   21010:	2b08      	cmp	r3, #8
   21012:	d81b      	bhi.n	2104c <__strftime+0x78>
   21014:	4650      	mov	r0, sl
   21016:	220a      	movs	r2, #10
   21018:	a908      	add	r1, sp, #32
   2101a:	f000 fdcf 	bl	21bbc <strtoul>
   2101e:	f8dd a020 	ldr.w	sl, [sp, #32]
   21022:	4680      	mov	r8, r0
   21024:	f89a 3000 	ldrb.w	r3, [sl]
   21028:	2b45      	cmp	r3, #69	; 0x45
   2102a:	d112      	bne.n	21052 <__strftime+0x7e>
   2102c:	f10a 0a01 	add.w	sl, sl, #1
   21030:	e011      	b.n	21056 <__strftime+0x82>
   21032:	1e69      	subs	r1, r5, #1
   21034:	42a1      	cmp	r1, r4
   21036:	d802      	bhi.n	2103e <__strftime+0x6a>
   21038:	2400      	movs	r4, #0
   2103a:	f000 bca8 	b.w	2198e <__strftime+0x9ba>
   2103e:	553b      	strb	r3, [r7, r4]
   21040:	3201      	adds	r2, #1
   21042:	3401      	adds	r4, #1
   21044:	e7cf      	b.n	20fe6 <__strftime+0x12>
   21046:	f102 0a02 	add.w	sl, r2, #2
   2104a:	e7de      	b.n	2100a <__strftime+0x36>
   2104c:	f04f 0800 	mov.w	r8, #0
   21050:	e7e8      	b.n	21024 <__strftime+0x50>
   21052:	2b4f      	cmp	r3, #79	; 0x4f
   21054:	d0ea      	beq.n	2102c <__strftime+0x58>
   21056:	f89a 0000 	ldrb.w	r0, [sl]
   2105a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   2105e:	2b55      	cmp	r3, #85	; 0x55
   21060:	d8ea      	bhi.n	21038 <__strftime+0x64>
   21062:	a201      	add	r2, pc, #4	; (adr r2, 21068 <__strftime+0x94>)
   21064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21068:	0002197d 	.word	0x0002197d
   2106c:	00021039 	.word	0x00021039
   21070:	00021039 	.word	0x00021039
   21074:	00021039 	.word	0x00021039
   21078:	00021039 	.word	0x00021039
   2107c:	00021039 	.word	0x00021039
   21080:	00021039 	.word	0x00021039
   21084:	00021039 	.word	0x00021039
   21088:	00021039 	.word	0x00021039
   2108c:	00021039 	.word	0x00021039
   21090:	00021039 	.word	0x00021039
   21094:	00021039 	.word	0x00021039
   21098:	00021039 	.word	0x00021039
   2109c:	00021039 	.word	0x00021039
   210a0:	00021039 	.word	0x00021039
   210a4:	00021039 	.word	0x00021039
   210a8:	00021039 	.word	0x00021039
   210ac:	00021039 	.word	0x00021039
   210b0:	00021039 	.word	0x00021039
   210b4:	00021039 	.word	0x00021039
   210b8:	00021039 	.word	0x00021039
   210bc:	00021039 	.word	0x00021039
   210c0:	00021039 	.word	0x00021039
   210c4:	00021039 	.word	0x00021039
   210c8:	00021039 	.word	0x00021039
   210cc:	00021039 	.word	0x00021039
   210d0:	00021039 	.word	0x00021039
   210d4:	00021039 	.word	0x00021039
   210d8:	000211fd 	.word	0x000211fd
   210dc:	00021255 	.word	0x00021255
   210e0:	000212c7 	.word	0x000212c7
   210e4:	0002135f 	.word	0x0002135f
   210e8:	00021039 	.word	0x00021039
   210ec:	000213a9 	.word	0x000213a9
   210f0:	0002149d 	.word	0x0002149d
   210f4:	000215a9 	.word	0x000215a9
   210f8:	000215b7 	.word	0x000215b7
   210fc:	00021039 	.word	0x00021039
   21100:	00021039 	.word	0x00021039
   21104:	00021039 	.word	0x00021039
   21108:	000215e7 	.word	0x000215e7
   2110c:	00021039 	.word	0x00021039
   21110:	00021039 	.word	0x00021039
   21114:	000215fb 	.word	0x000215fb
   21118:	00021039 	.word	0x00021039
   2111c:	0002164b 	.word	0x0002164b
   21120:	00021759 	.word	0x00021759
   21124:	00021769 	.word	0x00021769
   21128:	000217bf 	.word	0x000217bf
   2112c:	000217cf 	.word	0x000217cf
   21130:	00021843 	.word	0x00021843
   21134:	000212bf 	.word	0x000212bf
   21138:	00021877 	.word	0x00021877
   2113c:	0002193b 	.word	0x0002193b
   21140:	00021039 	.word	0x00021039
   21144:	00021039 	.word	0x00021039
   21148:	00021039 	.word	0x00021039
   2114c:	00021039 	.word	0x00021039
   21150:	00021039 	.word	0x00021039
   21154:	00021039 	.word	0x00021039
   21158:	000211c1 	.word	0x000211c1
   2115c:	0002122b 	.word	0x0002122b
   21160:	00021281 	.word	0x00021281
   21164:	0002133b 	.word	0x0002133b
   21168:	0002133b 	.word	0x0002133b
   2116c:	00021039 	.word	0x00021039
   21170:	000213ff 	.word	0x000213ff
   21174:	0002122b 	.word	0x0002122b
   21178:	00021039 	.word	0x00021039
   2117c:	000215d9 	.word	0x000215d9
   21180:	000215a9 	.word	0x000215a9
   21184:	000215b7 	.word	0x000215b7
   21188:	000215e1 	.word	0x000215e1
   2118c:	000215eb 	.word	0x000215eb
   21190:	00021039 	.word	0x00021039
   21194:	000215fb 	.word	0x000215fb
   21198:	00021039 	.word	0x00021039
   2119c:	000212af 	.word	0x000212af
   211a0:	0002165d 	.word	0x0002165d
   211a4:	0002175d 	.word	0x0002175d
   211a8:	000217a5 	.word	0x000217a5
   211ac:	00021039 	.word	0x00021039
   211b0:	00021835 	.word	0x00021835
   211b4:	000212b7 	.word	0x000212b7
   211b8:	0002185b 	.word	0x0002185b
   211bc:	000218d3 	.word	0x000218d3
   211c0:	69b3      	ldr	r3, [r6, #24]
   211c2:	4aa9      	ldr	r2, [pc, #676]	; (21468 <__strftime+0x494>)
   211c4:	3318      	adds	r3, #24
   211c6:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   211ca:	4640      	mov	r0, r8
   211cc:	f7df f95e 	bl	48c <strlen>
   211d0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   211d4:	4420      	add	r0, r4
   211d6:	1e6b      	subs	r3, r5, #1
   211d8:	42a0      	cmp	r0, r4
   211da:	d107      	bne.n	211ec <__strftime+0x218>
   211dc:	f89a 3000 	ldrb.w	r3, [sl]
   211e0:	2b00      	cmp	r3, #0
   211e2:	f000 83d1 	beq.w	21988 <__strftime+0x9b4>
   211e6:	f10a 0201 	add.w	r2, sl, #1
   211ea:	e6fc      	b.n	20fe6 <__strftime+0x12>
   211ec:	42a3      	cmp	r3, r4
   211ee:	f67f af23 	bls.w	21038 <__strftime+0x64>
   211f2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   211f6:	553a      	strb	r2, [r7, r4]
   211f8:	3401      	adds	r4, #1
   211fa:	e7ed      	b.n	211d8 <__strftime+0x204>
   211fc:	69b2      	ldr	r2, [r6, #24]
   211fe:	4b9a      	ldr	r3, [pc, #616]	; (21468 <__strftime+0x494>)
   21200:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   21204:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   21208:	4640      	mov	r0, r8
   2120a:	f7df f93f 	bl	48c <strlen>
   2120e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   21212:	4420      	add	r0, r4
   21214:	1e6b      	subs	r3, r5, #1
   21216:	42a0      	cmp	r0, r4
   21218:	d0e0      	beq.n	211dc <__strftime+0x208>
   2121a:	42a3      	cmp	r3, r4
   2121c:	f67f af0c 	bls.w	21038 <__strftime+0x64>
   21220:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   21224:	553a      	strb	r2, [r7, r4]
   21226:	3401      	adds	r4, #1
   21228:	e7f5      	b.n	21216 <__strftime+0x242>
   2122a:	4b8f      	ldr	r3, [pc, #572]	; (21468 <__strftime+0x494>)
   2122c:	6932      	ldr	r2, [r6, #16]
   2122e:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
   21232:	4640      	mov	r0, r8
   21234:	f7df f92a 	bl	48c <strlen>
   21238:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2123c:	4420      	add	r0, r4
   2123e:	1e6b      	subs	r3, r5, #1
   21240:	42a0      	cmp	r0, r4
   21242:	d0cb      	beq.n	211dc <__strftime+0x208>
   21244:	42a3      	cmp	r3, r4
   21246:	f67f aef7 	bls.w	21038 <__strftime+0x64>
   2124a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   2124e:	553a      	strb	r2, [r7, r4]
   21250:	3401      	adds	r4, #1
   21252:	e7f5      	b.n	21240 <__strftime+0x26c>
   21254:	6933      	ldr	r3, [r6, #16]
   21256:	4a84      	ldr	r2, [pc, #528]	; (21468 <__strftime+0x494>)
   21258:	330c      	adds	r3, #12
   2125a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   2125e:	4640      	mov	r0, r8
   21260:	f7df f914 	bl	48c <strlen>
   21264:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   21268:	4420      	add	r0, r4
   2126a:	1e6b      	subs	r3, r5, #1
   2126c:	42a0      	cmp	r0, r4
   2126e:	d0b5      	beq.n	211dc <__strftime+0x208>
   21270:	42a3      	cmp	r3, r4
   21272:	f67f aee1 	bls.w	21038 <__strftime+0x64>
   21276:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   2127a:	553a      	strb	r2, [r7, r4]
   2127c:	3401      	adds	r4, #1
   2127e:	e7f5      	b.n	2126c <__strftime+0x298>
   21280:	4b79      	ldr	r3, [pc, #484]	; (21468 <__strftime+0x494>)
   21282:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   21286:	4640      	mov	r0, r8
   21288:	f7df f900 	bl	48c <strlen>
   2128c:	f898 3000 	ldrb.w	r3, [r8]
   21290:	2b00      	cmp	r3, #0
   21292:	d0a3      	beq.n	211dc <__strftime+0x208>
   21294:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   21296:	9300      	str	r3, [sp, #0]
   21298:	4642      	mov	r2, r8
   2129a:	4633      	mov	r3, r6
   2129c:	1b29      	subs	r1, r5, r4
   2129e:	1938      	adds	r0, r7, r4
   212a0:	f7ff fe98 	bl	20fd4 <__strftime>
   212a4:	2800      	cmp	r0, #0
   212a6:	f77f aec7 	ble.w	21038 <__strftime+0x64>
   212aa:	4404      	add	r4, r0
   212ac:	e796      	b.n	211dc <__strftime+0x208>
   212ae:	4b6e      	ldr	r3, [pc, #440]	; (21468 <__strftime+0x494>)
   212b0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   212b4:	e7e7      	b.n	21286 <__strftime+0x2b2>
   212b6:	4b6c      	ldr	r3, [pc, #432]	; (21468 <__strftime+0x494>)
   212b8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   212bc:	e7e3      	b.n	21286 <__strftime+0x2b2>
   212be:	4b6a      	ldr	r3, [pc, #424]	; (21468 <__strftime+0x494>)
   212c0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   212c4:	e7df      	b.n	21286 <__strftime+0x2b2>
   212c6:	4969      	ldr	r1, [pc, #420]	; (2146c <__strftime+0x498>)
   212c8:	f8d6 b014 	ldr.w	fp, [r6, #20]
   212cc:	458b      	cmp	fp, r1
   212ce:	bfac      	ite	ge
   212d0:	2100      	movge	r1, #0
   212d2:	2101      	movlt	r1, #1
   212d4:	f1bb 0f00 	cmp.w	fp, #0
   212d8:	db10      	blt.n	212fc <__strftime+0x328>
   212da:	2064      	movs	r0, #100	; 0x64
   212dc:	fb9b f0f0 	sdiv	r0, fp, r0
   212e0:	3013      	adds	r0, #19
   212e2:	f1b9 0f00 	cmp.w	r9, #0
   212e6:	d013      	beq.n	21310 <__strftime+0x33c>
   212e8:	2863      	cmp	r0, #99	; 0x63
   212ea:	dd24      	ble.n	21336 <__strftime+0x362>
   212ec:	4a60      	ldr	r2, [pc, #384]	; (21470 <__strftime+0x49c>)
   212ee:	4b61      	ldr	r3, [pc, #388]	; (21474 <__strftime+0x4a0>)
   212f0:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   212f4:	bf18      	it	ne
   212f6:	4613      	movne	r3, r2
   212f8:	4a5f      	ldr	r2, [pc, #380]	; (21478 <__strftime+0x4a4>)
   212fa:	e00b      	b.n	21314 <__strftime+0x340>
   212fc:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   21300:	9105      	str	r1, [sp, #20]
   21302:	f00a fb00 	bl	2b906 <abs>
   21306:	2364      	movs	r3, #100	; 0x64
   21308:	9905      	ldr	r1, [sp, #20]
   2130a:	fb90 f0f3 	sdiv	r0, r0, r3
   2130e:	e7e8      	b.n	212e2 <__strftime+0x30e>
   21310:	4b57      	ldr	r3, [pc, #348]	; (21470 <__strftime+0x49c>)
   21312:	4a5a      	ldr	r2, [pc, #360]	; (2147c <__strftime+0x4a8>)
   21314:	9001      	str	r0, [sp, #4]
   21316:	f1b8 0f02 	cmp.w	r8, #2
   2131a:	bf2c      	ite	cs
   2131c:	ebc1 0108 	rsbcs	r1, r1, r8
   21320:	f1c1 0102 	rsbcc	r1, r1, #2
   21324:	4851      	ldr	r0, [pc, #324]	; (2146c <__strftime+0x498>)
   21326:	9100      	str	r1, [sp, #0]
   21328:	4955      	ldr	r1, [pc, #340]	; (21480 <__strftime+0x4ac>)
   2132a:	4583      	cmp	fp, r0
   2132c:	bfb8      	it	lt
   2132e:	460b      	movlt	r3, r1
   21330:	1b29      	subs	r1, r5, r4
   21332:	1938      	adds	r0, r7, r4
   21334:	e029      	b.n	2138a <__strftime+0x3b6>
   21336:	4b4e      	ldr	r3, [pc, #312]	; (21470 <__strftime+0x49c>)
   21338:	e7de      	b.n	212f8 <__strftime+0x324>
   2133a:	4952      	ldr	r1, [pc, #328]	; (21484 <__strftime+0x4b0>)
   2133c:	4a52      	ldr	r2, [pc, #328]	; (21488 <__strftime+0x4b4>)
   2133e:	68f3      	ldr	r3, [r6, #12]
   21340:	2864      	cmp	r0, #100	; 0x64
   21342:	bf08      	it	eq
   21344:	460a      	moveq	r2, r1
   21346:	1b29      	subs	r1, r5, r4
   21348:	1938      	adds	r0, r7, r4
   2134a:	f7ff fd83 	bl	20e54 <sniprintf>
   2134e:	2800      	cmp	r0, #0
   21350:	f6ff ae72 	blt.w	21038 <__strftime+0x64>
   21354:	4404      	add	r4, r0
   21356:	42a5      	cmp	r5, r4
   21358:	f63f af40 	bhi.w	211dc <__strftime+0x208>
   2135c:	e66c      	b.n	21038 <__strftime+0x64>
   2135e:	6970      	ldr	r0, [r6, #20]
   21360:	6933      	ldr	r3, [r6, #16]
   21362:	2800      	cmp	r0, #0
   21364:	f103 0b01 	add.w	fp, r3, #1
   21368:	eb07 0804 	add.w	r8, r7, r4
   2136c:	68f3      	ldr	r3, [r6, #12]
   2136e:	eba5 0904 	sub.w	r9, r5, r4
   21372:	db0d      	blt.n	21390 <__strftime+0x3bc>
   21374:	2164      	movs	r1, #100	; 0x64
   21376:	fb90 f2f1 	sdiv	r2, r0, r1
   2137a:	fb01 0212 	mls	r2, r1, r2, r0
   2137e:	e9cd 3200 	strd	r3, r2, [sp]
   21382:	4a42      	ldr	r2, [pc, #264]	; (2148c <__strftime+0x4b8>)
   21384:	465b      	mov	r3, fp
   21386:	4649      	mov	r1, r9
   21388:	4640      	mov	r0, r8
   2138a:	f7ff fd63 	bl	20e54 <sniprintf>
   2138e:	e7de      	b.n	2134e <__strftime+0x37a>
   21390:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   21394:	9305      	str	r3, [sp, #20]
   21396:	f00a fab6 	bl	2b906 <abs>
   2139a:	2264      	movs	r2, #100	; 0x64
   2139c:	9b05      	ldr	r3, [sp, #20]
   2139e:	fb90 f1f2 	sdiv	r1, r0, r2
   213a2:	fb01 0212 	mls	r2, r1, r2, r0
   213a6:	e7ea      	b.n	2137e <__strftime+0x3aa>
   213a8:	2325      	movs	r3, #37	; 0x25
   213aa:	f88d 3020 	strb.w	r3, [sp, #32]
   213ae:	f1b9 0f00 	cmp.w	r9, #0
   213b2:	d013      	beq.n	213dc <__strftime+0x408>
   213b4:	f1b8 0f06 	cmp.w	r8, #6
   213b8:	bf38      	it	cc
   213ba:	f04f 0806 	movcc.w	r8, #6
   213be:	f1b8 0306 	subs.w	r3, r8, #6
   213c2:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
   213c6:	d10e      	bne.n	213e6 <__strftime+0x412>
   213c8:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   213cc:	4930      	ldr	r1, [pc, #192]	; (21490 <__strftime+0x4bc>)
   213ce:	f00a fa1b 	bl	2b808 <strcpy>
   213d2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   213d4:	9300      	str	r3, [sp, #0]
   213d6:	aa08      	add	r2, sp, #32
   213d8:	4633      	mov	r3, r6
   213da:	e75f      	b.n	2129c <__strftime+0x2c8>
   213dc:	f04f 092b 	mov.w	r9, #43	; 0x2b
   213e0:	f04f 080a 	mov.w	r8, #10
   213e4:	e7eb      	b.n	213be <__strftime+0x3ea>
   213e6:	4a2b      	ldr	r2, [pc, #172]	; (21494 <__strftime+0x4c0>)
   213e8:	211e      	movs	r1, #30
   213ea:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   213ee:	f7ff fd31 	bl	20e54 <sniprintf>
   213f2:	2800      	cmp	r0, #0
   213f4:	dde8      	ble.n	213c8 <__strftime+0x3f4>
   213f6:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   213fa:	4418      	add	r0, r3
   213fc:	e7e6      	b.n	213cc <__strftime+0x3f8>
   213fe:	4630      	mov	r0, r6
   21400:	f7ff fd86 	bl	20f10 <iso_year_adjust>
   21404:	4680      	mov	r8, r0
   21406:	6970      	ldr	r0, [r6, #20]
   21408:	2800      	cmp	r0, #0
   2140a:	db11      	blt.n	21430 <__strftime+0x45c>
   2140c:	2264      	movs	r2, #100	; 0x64
   2140e:	fb90 f3f2 	sdiv	r3, r0, r2
   21412:	fb02 0313 	mls	r3, r2, r3, r0
   21416:	4498      	add	r8, r3
   21418:	2364      	movs	r3, #100	; 0x64
   2141a:	fb98 f0f3 	sdiv	r0, r8, r3
   2141e:	fb03 8810 	mls	r8, r3, r0, r8
   21422:	4498      	add	r8, r3
   21424:	fbb8 f2f3 	udiv	r2, r8, r3
   21428:	fb03 8312 	mls	r3, r3, r2, r8
   2142c:	4a15      	ldr	r2, [pc, #84]	; (21484 <__strftime+0x4b0>)
   2142e:	e78a      	b.n	21346 <__strftime+0x372>
   21430:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   21434:	f00a fa67 	bl	2b906 <abs>
   21438:	2364      	movs	r3, #100	; 0x64
   2143a:	f1b8 0f00 	cmp.w	r8, #0
   2143e:	fb90 f2f3 	sdiv	r2, r0, r3
   21442:	fb02 0313 	mls	r3, r2, r3, r0
   21446:	da06      	bge.n	21456 <__strftime+0x482>
   21448:	6971      	ldr	r1, [r6, #20]
   2144a:	4a13      	ldr	r2, [pc, #76]	; (21498 <__strftime+0x4c4>)
   2144c:	4291      	cmp	r1, r2
   2144e:	bfb8      	it	lt
   21450:	f04f 0801 	movlt.w	r8, #1
   21454:	e7df      	b.n	21416 <__strftime+0x442>
   21456:	d0de      	beq.n	21416 <__strftime+0x442>
   21458:	6971      	ldr	r1, [r6, #20]
   2145a:	4a04      	ldr	r2, [pc, #16]	; (2146c <__strftime+0x498>)
   2145c:	4291      	cmp	r1, r2
   2145e:	bfb8      	it	lt
   21460:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   21464:	e7d7      	b.n	21416 <__strftime+0x442>
   21466:	bf00      	nop
   21468:	0002da2c 	.word	0x0002da2c
   2146c:	fffff894 	.word	0xfffff894
   21470:	0002e0bc 	.word	0x0002e0bc
   21474:	000394a6 	.word	0x000394a6
   21478:	0003949e 	.word	0x0003949e
   2147c:	00039497 	.word	0x00039497
   21480:	00039686 	.word	0x00039686
   21484:	000394b2 	.word	0x000394b2
   21488:	0002de40 	.word	0x0002de40
   2148c:	000394a8 	.word	0x000394a8
   21490:	000394bb 	.word	0x000394bb
   21494:	000394b7 	.word	0x000394b7
   21498:	fffff895 	.word	0xfffff895
   2149c:	4bb6      	ldr	r3, [pc, #728]	; (21778 <__strftime+0x7a4>)
   2149e:	6971      	ldr	r1, [r6, #20]
   214a0:	4299      	cmp	r1, r3
   214a2:	bfac      	ite	ge
   214a4:	2300      	movge	r3, #0
   214a6:	2301      	movlt	r3, #1
   214a8:	4630      	mov	r0, r6
   214aa:	e9cd 3105 	strd	r3, r1, [sp, #20]
   214ae:	f7ff fd2f 	bl	20f10 <iso_year_adjust>
   214b2:	9906      	ldr	r1, [sp, #24]
   214b4:	2900      	cmp	r1, #0
   214b6:	4683      	mov	fp, r0
   214b8:	db2a      	blt.n	21510 <__strftime+0x53c>
   214ba:	2264      	movs	r2, #100	; 0x64
   214bc:	fb91 f2f2 	sdiv	r2, r1, r2
   214c0:	3213      	adds	r2, #19
   214c2:	6970      	ldr	r0, [r6, #20]
   214c4:	2800      	cmp	r0, #0
   214c6:	db2d      	blt.n	21524 <__strftime+0x550>
   214c8:	f04f 0c64 	mov.w	ip, #100	; 0x64
   214cc:	fb90 fefc 	sdiv	lr, r0, ip
   214d0:	fb0c 001e 	mls	r0, ip, lr, r0
   214d4:	f1bb 0f00 	cmp.w	fp, #0
   214d8:	da33      	bge.n	21542 <__strftime+0x56e>
   214da:	6971      	ldr	r1, [r6, #20]
   214dc:	4ba7      	ldr	r3, [pc, #668]	; (2177c <__strftime+0x7a8>)
   214de:	4299      	cmp	r1, r3
   214e0:	db3a      	blt.n	21558 <__strftime+0x584>
   214e2:	eb0b 0300 	add.w	r3, fp, r0
   214e6:	1c59      	adds	r1, r3, #1
   214e8:	d13b      	bne.n	21562 <__strftime+0x58e>
   214ea:	3a01      	subs	r2, #1
   214ec:	2363      	movs	r3, #99	; 0x63
   214ee:	2064      	movs	r0, #100	; 0x64
   214f0:	fb00 3202 	mla	r2, r0, r2, r3
   214f4:	9b05      	ldr	r3, [sp, #20]
   214f6:	2b00      	cmp	r3, #0
   214f8:	d038      	beq.n	2156c <__strftime+0x598>
   214fa:	232d      	movs	r3, #45	; 0x2d
   214fc:	f88d 3020 	strb.w	r3, [sp, #32]
   21500:	f1b8 0f00 	cmp.w	r8, #0
   21504:	d001      	beq.n	2150a <__strftime+0x536>
   21506:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2150a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   2150e:	e038      	b.n	21582 <__strftime+0x5ae>
   21510:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   21514:	9106      	str	r1, [sp, #24]
   21516:	f00a f9f6 	bl	2b906 <abs>
   2151a:	2264      	movs	r2, #100	; 0x64
   2151c:	9906      	ldr	r1, [sp, #24]
   2151e:	fb90 f2f2 	sdiv	r2, r0, r2
   21522:	e7ce      	b.n	214c2 <__strftime+0x4ee>
   21524:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   21528:	e9cd 1206 	strd	r1, r2, [sp, #24]
   2152c:	f00a f9eb 	bl	2b906 <abs>
   21530:	f04f 0c64 	mov.w	ip, #100	; 0x64
   21534:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   21538:	fb90 fefc 	sdiv	lr, r0, ip
   2153c:	fb0e 001c 	mls	r0, lr, ip, r0
   21540:	e7c8      	b.n	214d4 <__strftime+0x500>
   21542:	d0ce      	beq.n	214e2 <__strftime+0x50e>
   21544:	4b8c      	ldr	r3, [pc, #560]	; (21778 <__strftime+0x7a4>)
   21546:	4299      	cmp	r1, r3
   21548:	bfb4      	ite	lt
   2154a:	2301      	movlt	r3, #1
   2154c:	2300      	movge	r3, #0
   2154e:	9305      	str	r3, [sp, #20]
   21550:	bfb8      	it	lt
   21552:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   21556:	e7c4      	b.n	214e2 <__strftime+0x50e>
   21558:	f04f 0b01 	mov.w	fp, #1
   2155c:	f8cd b014 	str.w	fp, [sp, #20]
   21560:	e7bf      	b.n	214e2 <__strftime+0x50e>
   21562:	2b64      	cmp	r3, #100	; 0x64
   21564:	bf04      	itt	eq
   21566:	3201      	addeq	r2, #1
   21568:	2300      	moveq	r3, #0
   2156a:	e7c0      	b.n	214ee <__strftime+0x51a>
   2156c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   21570:	d106      	bne.n	21580 <__strftime+0x5ac>
   21572:	f242 730f 	movw	r3, #9999	; 0x270f
   21576:	429a      	cmp	r2, r3
   21578:	d902      	bls.n	21580 <__strftime+0x5ac>
   2157a:	f88d 9020 	strb.w	r9, [sp, #32]
   2157e:	e7bf      	b.n	21500 <__strftime+0x52c>
   21580:	ab08      	add	r3, sp, #32
   21582:	2125      	movs	r1, #37	; 0x25
   21584:	7019      	strb	r1, [r3, #0]
   21586:	f1b9 0f00 	cmp.w	r9, #0
   2158a:	d109      	bne.n	215a0 <__strftime+0x5cc>
   2158c:	1c58      	adds	r0, r3, #1
   2158e:	497c      	ldr	r1, [pc, #496]	; (21780 <__strftime+0x7ac>)
   21590:	9205      	str	r2, [sp, #20]
   21592:	f00a f939 	bl	2b808 <strcpy>
   21596:	9a05      	ldr	r2, [sp, #20]
   21598:	9200      	str	r2, [sp, #0]
   2159a:	4643      	mov	r3, r8
   2159c:	aa08      	add	r2, sp, #32
   2159e:	e058      	b.n	21652 <__strftime+0x67e>
   215a0:	2130      	movs	r1, #48	; 0x30
   215a2:	1c98      	adds	r0, r3, #2
   215a4:	7059      	strb	r1, [r3, #1]
   215a6:	e7f2      	b.n	2158e <__strftime+0x5ba>
   215a8:	4976      	ldr	r1, [pc, #472]	; (21784 <__strftime+0x7b0>)
   215aa:	4a77      	ldr	r2, [pc, #476]	; (21788 <__strftime+0x7b4>)
   215ac:	68b3      	ldr	r3, [r6, #8]
   215ae:	286b      	cmp	r0, #107	; 0x6b
   215b0:	bf08      	it	eq
   215b2:	460a      	moveq	r2, r1
   215b4:	e6c7      	b.n	21346 <__strftime+0x372>
   215b6:	68b3      	ldr	r3, [r6, #8]
   215b8:	b163      	cbz	r3, 215d4 <__strftime+0x600>
   215ba:	2b0c      	cmp	r3, #12
   215bc:	d004      	beq.n	215c8 <__strftime+0x5f4>
   215be:	210c      	movs	r1, #12
   215c0:	fb93 f2f1 	sdiv	r2, r3, r1
   215c4:	fb01 3312 	mls	r3, r1, r2, r3
   215c8:	496f      	ldr	r1, [pc, #444]	; (21788 <__strftime+0x7b4>)
   215ca:	4a6e      	ldr	r2, [pc, #440]	; (21784 <__strftime+0x7b0>)
   215cc:	2849      	cmp	r0, #73	; 0x49
   215ce:	bf08      	it	eq
   215d0:	460a      	moveq	r2, r1
   215d2:	e6b8      	b.n	21346 <__strftime+0x372>
   215d4:	230c      	movs	r3, #12
   215d6:	e7f7      	b.n	215c8 <__strftime+0x5f4>
   215d8:	69f3      	ldr	r3, [r6, #28]
   215da:	4a6c      	ldr	r2, [pc, #432]	; (2178c <__strftime+0x7b8>)
   215dc:	3301      	adds	r3, #1
   215de:	e6b2      	b.n	21346 <__strftime+0x372>
   215e0:	6933      	ldr	r3, [r6, #16]
   215e2:	3301      	adds	r3, #1
   215e4:	e722      	b.n	2142c <__strftime+0x458>
   215e6:	6873      	ldr	r3, [r6, #4]
   215e8:	e720      	b.n	2142c <__strftime+0x458>
   215ea:	1e6b      	subs	r3, r5, #1
   215ec:	42a3      	cmp	r3, r4
   215ee:	f67f ad23 	bls.w	21038 <__strftime+0x64>
   215f2:	230a      	movs	r3, #10
   215f4:	553b      	strb	r3, [r7, r4]
   215f6:	3401      	adds	r4, #1
   215f8:	e5f0      	b.n	211dc <__strftime+0x208>
   215fa:	68b3      	ldr	r3, [r6, #8]
   215fc:	2b0b      	cmp	r3, #11
   215fe:	bfcc      	ite	gt
   21600:	22a4      	movgt	r2, #164	; 0xa4
   21602:	22a0      	movle	r2, #160	; 0xa0
   21604:	4b62      	ldr	r3, [pc, #392]	; (21790 <__strftime+0x7bc>)
   21606:	4413      	add	r3, r2
   21608:	f8d3 8004 	ldr.w	r8, [r3, #4]
   2160c:	4640      	mov	r0, r8
   2160e:	f7de ff3d 	bl	48c <strlen>
   21612:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   21616:	4420      	add	r0, r4
   21618:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   2161c:	42a0      	cmp	r0, r4
   2161e:	f43f addd 	beq.w	211dc <__strftime+0x208>
   21622:	45a4      	cmp	ip, r4
   21624:	f67f ad08 	bls.w	21038 <__strftime+0x64>
   21628:	f89a 1000 	ldrb.w	r1, [sl]
   2162c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   21630:	2950      	cmp	r1, #80	; 0x50
   21632:	d107      	bne.n	21644 <__strftime+0x670>
   21634:	4957      	ldr	r1, [pc, #348]	; (21794 <__strftime+0x7c0>)
   21636:	5cc9      	ldrb	r1, [r1, r3]
   21638:	f001 0103 	and.w	r1, r1, #3
   2163c:	2901      	cmp	r1, #1
   2163e:	bf08      	it	eq
   21640:	3320      	addeq	r3, #32
   21642:	b2db      	uxtb	r3, r3
   21644:	553b      	strb	r3, [r7, r4]
   21646:	3401      	adds	r4, #1
   21648:	e7e8      	b.n	2161c <__strftime+0x648>
   2164a:	6873      	ldr	r3, [r6, #4]
   2164c:	9300      	str	r3, [sp, #0]
   2164e:	4a52      	ldr	r2, [pc, #328]	; (21798 <__strftime+0x7c4>)
   21650:	68b3      	ldr	r3, [r6, #8]
   21652:	1b29      	subs	r1, r5, r4
   21654:	1938      	adds	r0, r7, r4
   21656:	f7ff fbfd 	bl	20e54 <sniprintf>
   2165a:	e678      	b.n	2134e <__strftime+0x37a>
   2165c:	6a33      	ldr	r3, [r6, #32]
   2165e:	2b00      	cmp	r3, #0
   21660:	db77      	blt.n	21752 <__strftime+0x77e>
   21662:	9b04      	ldr	r3, [sp, #16]
   21664:	b90b      	cbnz	r3, 2166a <__strftime+0x696>
   21666:	f00a f920 	bl	2b8aa <_tzset_unlocked>
   2166a:	f000 fd23 	bl	220b4 <__gettzinfo>
   2166e:	6a33      	ldr	r3, [r6, #32]
   21670:	2b00      	cmp	r3, #0
   21672:	bfcc      	ite	gt
   21674:	2350      	movgt	r3, #80	; 0x50
   21676:	2328      	movle	r3, #40	; 0x28
   21678:	58c3      	ldr	r3, [r0, r3]
   2167a:	f1c3 0900 	rsb	r9, r3, #0
   2167e:	2301      	movs	r3, #1
   21680:	9304      	str	r3, [sp, #16]
   21682:	f8d6 c014 	ldr.w	ip, [r6, #20]
   21686:	4662      	mov	r2, ip
   21688:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
   2168c:	ea4f 73e2 	mov.w	r3, r2, asr #31
   21690:	9102      	str	r1, [sp, #8]
   21692:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
   21696:	9103      	str	r1, [sp, #12]
   21698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2169c:	2800      	cmp	r0, #0
   2169e:	f171 0100 	sbcs.w	r1, r1, #0
   216a2:	eba5 0e04 	sub.w	lr, r5, r4
   216a6:	eb07 0804 	add.w	r8, r7, r4
   216aa:	da05      	bge.n	216b8 <__strftime+0x6e4>
   216ac:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
   216b0:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   216b4:	9102      	str	r1, [sp, #8]
   216b6:	9303      	str	r3, [sp, #12]
   216b8:	9b02      	ldr	r3, [sp, #8]
   216ba:	0898      	lsrs	r0, r3, #2
   216bc:	9b03      	ldr	r3, [sp, #12]
   216be:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
   216c2:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   216c6:	1099      	asrs	r1, r3, #2
   216c8:	2364      	movs	r3, #100	; 0x64
   216ca:	fb92 f3f3 	sdiv	r3, r2, r3
   216ce:	1ac0      	subs	r0, r0, r3
   216d0:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   216d4:	f20c 122b 	addw	r2, ip, #299	; 0x12b
   216d8:	f44f 73c8 	mov.w	r3, #400	; 0x190
   216dc:	fb92 f3f3 	sdiv	r3, r2, r3
   216e0:	18c0      	adds	r0, r0, r3
   216e2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   216e6:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
   216ea:	f240 136d 	movw	r3, #365	; 0x16d
   216ee:	fb03 fc0c 	mul.w	ip, r3, ip
   216f2:	69f3      	ldr	r3, [r6, #28]
   216f4:	eb10 000c 	adds.w	r0, r0, ip
   216f8:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
   216fc:	18c0      	adds	r0, r0, r3
   216fe:	f04f 0c18 	mov.w	ip, #24
   21702:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   21706:	fba0 230c 	umull	r2, r3, r0, ip
   2170a:	fb0c 3301 	mla	r3, ip, r1, r3
   2170e:	68b1      	ldr	r1, [r6, #8]
   21710:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   21714:	1852      	adds	r2, r2, r1
   21716:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   2171a:	fba2 010c 	umull	r0, r1, r2, ip
   2171e:	fb0c 1103 	mla	r1, ip, r3, r1
   21722:	6873      	ldr	r3, [r6, #4]
   21724:	18c0      	adds	r0, r0, r3
   21726:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2172a:	fba0 230c 	umull	r2, r3, r0, ip
   2172e:	fb0c 3301 	mla	r3, ip, r1, r3
   21732:	6831      	ldr	r1, [r6, #0]
   21734:	1852      	adds	r2, r2, r1
   21736:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   2173a:	ebb2 0209 	subs.w	r2, r2, r9
   2173e:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
   21742:	e9cd 2300 	strd	r2, r3, [sp]
   21746:	4671      	mov	r1, lr
   21748:	4a14      	ldr	r2, [pc, #80]	; (2179c <__strftime+0x7c8>)
   2174a:	4640      	mov	r0, r8
   2174c:	f7ff fb82 	bl	20e54 <sniprintf>
   21750:	e5fd      	b.n	2134e <__strftime+0x37a>
   21752:	f04f 0900 	mov.w	r9, #0
   21756:	e794      	b.n	21682 <__strftime+0x6ae>
   21758:	6833      	ldr	r3, [r6, #0]
   2175a:	e667      	b.n	2142c <__strftime+0x458>
   2175c:	1e6b      	subs	r3, r5, #1
   2175e:	42a3      	cmp	r3, r4
   21760:	f67f ac6a 	bls.w	21038 <__strftime+0x64>
   21764:	2309      	movs	r3, #9
   21766:	e745      	b.n	215f4 <__strftime+0x620>
   21768:	6833      	ldr	r3, [r6, #0]
   2176a:	9301      	str	r3, [sp, #4]
   2176c:	6873      	ldr	r3, [r6, #4]
   2176e:	9300      	str	r3, [sp, #0]
   21770:	4a0b      	ldr	r2, [pc, #44]	; (217a0 <__strftime+0x7cc>)
   21772:	68b3      	ldr	r3, [r6, #8]
   21774:	e5dc      	b.n	21330 <__strftime+0x35c>
   21776:	bf00      	nop
   21778:	fffff894 	.word	0xfffff894
   2177c:	fffff895 	.word	0xfffff895
   21780:	000394c3 	.word	0x000394c3
   21784:	0002de40 	.word	0x0002de40
   21788:	000394b2 	.word	0x000394b2
   2178c:	000394c7 	.word	0x000394c7
   21790:	0002da2c 	.word	0x0002da2c
   21794:	00039397 	.word	0x00039397
   21798:	000394d6 	.word	0x000394d6
   2179c:	000394cc 	.word	0x000394cc
   217a0:	000394d1 	.word	0x000394d1
   217a4:	1e6b      	subs	r3, r5, #1
   217a6:	42a3      	cmp	r3, r4
   217a8:	f67f ac46 	bls.w	21038 <__strftime+0x64>
   217ac:	69b3      	ldr	r3, [r6, #24]
   217ae:	193a      	adds	r2, r7, r4
   217b0:	3401      	adds	r4, #1
   217b2:	b913      	cbnz	r3, 217ba <__strftime+0x7e6>
   217b4:	2337      	movs	r3, #55	; 0x37
   217b6:	7013      	strb	r3, [r2, #0]
   217b8:	e510      	b.n	211dc <__strftime+0x208>
   217ba:	3330      	adds	r3, #48	; 0x30
   217bc:	e7fb      	b.n	217b6 <__strftime+0x7e2>
   217be:	69f3      	ldr	r3, [r6, #28]
   217c0:	69b2      	ldr	r2, [r6, #24]
   217c2:	3307      	adds	r3, #7
   217c4:	1a9b      	subs	r3, r3, r2
   217c6:	2207      	movs	r2, #7
   217c8:	fb93 f3f2 	sdiv	r3, r3, r2
   217cc:	e62e      	b.n	2142c <__strftime+0x458>
   217ce:	4630      	mov	r0, r6
   217d0:	f7ff fb9e 	bl	20f10 <iso_year_adjust>
   217d4:	69b2      	ldr	r2, [r6, #24]
   217d6:	b132      	cbz	r2, 217e6 <__strftime+0x812>
   217d8:	3a01      	subs	r2, #1
   217da:	2800      	cmp	r0, #0
   217dc:	dc28      	bgt.n	21830 <__strftime+0x85c>
   217de:	69f3      	ldr	r3, [r6, #28]
   217e0:	d103      	bne.n	217ea <__strftime+0x816>
   217e2:	330a      	adds	r3, #10
   217e4:	e7ee      	b.n	217c4 <__strftime+0x7f0>
   217e6:	2206      	movs	r2, #6
   217e8:	e7f7      	b.n	217da <__strftime+0x806>
   217ea:	6970      	ldr	r0, [r6, #20]
   217ec:	2800      	cmp	r0, #0
   217ee:	eba2 0303 	sub.w	r3, r2, r3
   217f2:	f240 726b 	movw	r2, #1899	; 0x76b
   217f6:	bfa8      	it	ge
   217f8:	f06f 0264 	mvnge.w	r2, #100	; 0x64
   217fc:	4410      	add	r0, r2
   217fe:	0782      	lsls	r2, r0, #30
   21800:	d105      	bne.n	2180e <__strftime+0x83a>
   21802:	2264      	movs	r2, #100	; 0x64
   21804:	fb90 f1f2 	sdiv	r1, r0, r2
   21808:	fb02 0111 	mls	r1, r2, r1, r0
   2180c:	b971      	cbnz	r1, 2182c <__strftime+0x858>
   2180e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   21812:	fb90 f2f1 	sdiv	r2, r0, r1
   21816:	fb01 0212 	mls	r2, r1, r2, r0
   2181a:	fab2 f282 	clz	r2, r2
   2181e:	0952      	lsrs	r2, r2, #5
   21820:	1a9a      	subs	r2, r3, r2
   21822:	2a05      	cmp	r2, #5
   21824:	bfb4      	ite	lt
   21826:	2335      	movlt	r3, #53	; 0x35
   21828:	2334      	movge	r3, #52	; 0x34
   2182a:	e5ff      	b.n	2142c <__strftime+0x458>
   2182c:	2201      	movs	r2, #1
   2182e:	e7f7      	b.n	21820 <__strftime+0x84c>
   21830:	2301      	movs	r3, #1
   21832:	e5fb      	b.n	2142c <__strftime+0x458>
   21834:	1e6b      	subs	r3, r5, #1
   21836:	42a3      	cmp	r3, r4
   21838:	f67f abfe 	bls.w	21038 <__strftime+0x64>
   2183c:	69b3      	ldr	r3, [r6, #24]
   2183e:	3330      	adds	r3, #48	; 0x30
   21840:	e6d8      	b.n	215f4 <__strftime+0x620>
   21842:	69b3      	ldr	r3, [r6, #24]
   21844:	b13b      	cbz	r3, 21856 <__strftime+0x882>
   21846:	3b01      	subs	r3, #1
   21848:	69f2      	ldr	r2, [r6, #28]
   2184a:	3207      	adds	r2, #7
   2184c:	1ad2      	subs	r2, r2, r3
   2184e:	2307      	movs	r3, #7
   21850:	fb92 f3f3 	sdiv	r3, r2, r3
   21854:	e5ea      	b.n	2142c <__strftime+0x458>
   21856:	2306      	movs	r3, #6
   21858:	e7f6      	b.n	21848 <__strftime+0x874>
   2185a:	6970      	ldr	r0, [r6, #20]
   2185c:	2800      	cmp	r0, #0
   2185e:	db05      	blt.n	2186c <__strftime+0x898>
   21860:	2264      	movs	r2, #100	; 0x64
   21862:	fb90 f3f2 	sdiv	r3, r0, r2
   21866:	fb03 0312 	mls	r3, r3, r2, r0
   2186a:	e5df      	b.n	2142c <__strftime+0x458>
   2186c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   21870:	f00a f849 	bl	2b906 <abs>
   21874:	e7f4      	b.n	21860 <__strftime+0x88c>
   21876:	6973      	ldr	r3, [r6, #20]
   21878:	4a47      	ldr	r2, [pc, #284]	; (21998 <__strftime+0x9c4>)
   2187a:	4293      	cmp	r3, r2
   2187c:	da0c      	bge.n	21898 <__strftime+0x8c4>
   2187e:	212d      	movs	r1, #45	; 0x2d
   21880:	f88d 1020 	strb.w	r1, [sp, #32]
   21884:	eba2 0b03 	sub.w	fp, r2, r3
   21888:	f1b8 0f00 	cmp.w	r8, #0
   2188c:	d001      	beq.n	21892 <__strftime+0x8be>
   2188e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   21892:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   21896:	e00c      	b.n	218b2 <__strftime+0x8de>
   21898:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   2189c:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   218a0:	d106      	bne.n	218b0 <__strftime+0x8dc>
   218a2:	f242 730f 	movw	r3, #9999	; 0x270f
   218a6:	459b      	cmp	fp, r3
   218a8:	d902      	bls.n	218b0 <__strftime+0x8dc>
   218aa:	f88d 9020 	strb.w	r9, [sp, #32]
   218ae:	e7eb      	b.n	21888 <__strftime+0x8b4>
   218b0:	ab08      	add	r3, sp, #32
   218b2:	2225      	movs	r2, #37	; 0x25
   218b4:	701a      	strb	r2, [r3, #0]
   218b6:	f1b9 0f00 	cmp.w	r9, #0
   218ba:	d106      	bne.n	218ca <__strftime+0x8f6>
   218bc:	1c58      	adds	r0, r3, #1
   218be:	4937      	ldr	r1, [pc, #220]	; (2199c <__strftime+0x9c8>)
   218c0:	f009 ffa2 	bl	2b808 <strcpy>
   218c4:	f8cd b000 	str.w	fp, [sp]
   218c8:	e667      	b.n	2159a <__strftime+0x5c6>
   218ca:	2230      	movs	r2, #48	; 0x30
   218cc:	1c98      	adds	r0, r3, #2
   218ce:	705a      	strb	r2, [r3, #1]
   218d0:	e7f5      	b.n	218be <__strftime+0x8ea>
   218d2:	6a33      	ldr	r3, [r6, #32]
   218d4:	2b00      	cmp	r3, #0
   218d6:	f6ff ac81 	blt.w	211dc <__strftime+0x208>
   218da:	9b04      	ldr	r3, [sp, #16]
   218dc:	b90b      	cbnz	r3, 218e2 <__strftime+0x90e>
   218de:	f009 ffe4 	bl	2b8aa <_tzset_unlocked>
   218e2:	f000 fbe7 	bl	220b4 <__gettzinfo>
   218e6:	6a33      	ldr	r3, [r6, #32]
   218e8:	2b00      	cmp	r3, #0
   218ea:	bfcc      	ite	gt
   218ec:	2350      	movgt	r3, #80	; 0x50
   218ee:	2328      	movle	r3, #40	; 0x28
   218f0:	eb07 0804 	add.w	r8, r7, r4
   218f4:	58c3      	ldr	r3, [r0, r3]
   218f6:	f1c3 0b00 	rsb	fp, r3, #0
   218fa:	233c      	movs	r3, #60	; 0x3c
   218fc:	fb9b f0f3 	sdiv	r0, fp, r3
   21900:	f00a f820 	bl	2b944 <labs>
   21904:	233c      	movs	r3, #60	; 0x3c
   21906:	eba5 0904 	sub.w	r9, r5, r4
   2190a:	fb90 f2f3 	sdiv	r2, r0, r3
   2190e:	fb02 0013 	mls	r0, r2, r3, r0
   21912:	9000      	str	r0, [sp, #0]
   21914:	4a22      	ldr	r2, [pc, #136]	; (219a0 <__strftime+0x9cc>)
   21916:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   2191a:	4649      	mov	r1, r9
   2191c:	4640      	mov	r0, r8
   2191e:	fb9b f3f3 	sdiv	r3, fp, r3
   21922:	f7ff fa97 	bl	20e54 <sniprintf>
   21926:	2800      	cmp	r0, #0
   21928:	f6ff ab86 	blt.w	21038 <__strftime+0x64>
   2192c:	4404      	add	r4, r0
   2192e:	42a5      	cmp	r5, r4
   21930:	f67f ab82 	bls.w	21038 <__strftime+0x64>
   21934:	2301      	movs	r3, #1
   21936:	9304      	str	r3, [sp, #16]
   21938:	e450      	b.n	211dc <__strftime+0x208>
   2193a:	6a33      	ldr	r3, [r6, #32]
   2193c:	2b00      	cmp	r3, #0
   2193e:	f6ff ac4d 	blt.w	211dc <__strftime+0x208>
   21942:	9b04      	ldr	r3, [sp, #16]
   21944:	b90b      	cbnz	r3, 2194a <__strftime+0x976>
   21946:	f009 ffb0 	bl	2b8aa <_tzset_unlocked>
   2194a:	6a33      	ldr	r3, [r6, #32]
   2194c:	4a15      	ldr	r2, [pc, #84]	; (219a4 <__strftime+0x9d0>)
   2194e:	2b00      	cmp	r3, #0
   21950:	bfd4      	ite	le
   21952:	2300      	movle	r3, #0
   21954:	2301      	movgt	r3, #1
   21956:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   2195a:	4640      	mov	r0, r8
   2195c:	f7de fd96 	bl	48c <strlen>
   21960:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   21964:	4420      	add	r0, r4
   21966:	1e6b      	subs	r3, r5, #1
   21968:	42a0      	cmp	r0, r4
   2196a:	d0e3      	beq.n	21934 <__strftime+0x960>
   2196c:	42a3      	cmp	r3, r4
   2196e:	f67f ab63 	bls.w	21038 <__strftime+0x64>
   21972:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   21976:	553a      	strb	r2, [r7, r4]
   21978:	3401      	adds	r4, #1
   2197a:	e7f5      	b.n	21968 <__strftime+0x994>
   2197c:	1e6b      	subs	r3, r5, #1
   2197e:	42a3      	cmp	r3, r4
   21980:	f67f ab5a 	bls.w	21038 <__strftime+0x64>
   21984:	2325      	movs	r3, #37	; 0x25
   21986:	e635      	b.n	215f4 <__strftime+0x620>
   21988:	b10d      	cbz	r5, 2198e <__strftime+0x9ba>
   2198a:	2300      	movs	r3, #0
   2198c:	553b      	strb	r3, [r7, r4]
   2198e:	4620      	mov	r0, r4
   21990:	b011      	add	sp, #68	; 0x44
   21992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21996:	bf00      	nop
   21998:	fffff894 	.word	0xfffff894
   2199c:	000394c3 	.word	0x000394c3
   219a0:	000394e0 	.word	0x000394e0
   219a4:	20000840 	.word	0x20000840

000219a8 <strftime>:
   219a8:	b513      	push	{r0, r1, r4, lr}
   219aa:	4c03      	ldr	r4, [pc, #12]	; (219b8 <strftime+0x10>)
   219ac:	9400      	str	r4, [sp, #0]
   219ae:	f7ff fb11 	bl	20fd4 <__strftime>
   219b2:	b002      	add	sp, #8
   219b4:	bd10      	pop	{r4, pc}
   219b6:	bf00      	nop
   219b8:	200008ac 	.word	0x200008ac

000219bc <_strtol_l.isra.0>:
   219bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   219c0:	4e3a      	ldr	r6, [pc, #232]	; (21aac <_strtol_l.isra.0+0xf0>)
   219c2:	4686      	mov	lr, r0
   219c4:	468c      	mov	ip, r1
   219c6:	4660      	mov	r0, ip
   219c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   219cc:	5da5      	ldrb	r5, [r4, r6]
   219ce:	f015 0508 	ands.w	r5, r5, #8
   219d2:	d1f8      	bne.n	219c6 <_strtol_l.isra.0+0xa>
   219d4:	2c2d      	cmp	r4, #45	; 0x2d
   219d6:	d133      	bne.n	21a40 <_strtol_l.isra.0+0x84>
   219d8:	f89c 4000 	ldrb.w	r4, [ip]
   219dc:	f04f 0801 	mov.w	r8, #1
   219e0:	f100 0c02 	add.w	ip, r0, #2
   219e4:	2b00      	cmp	r3, #0
   219e6:	d05c      	beq.n	21aa2 <_strtol_l.isra.0+0xe6>
   219e8:	2b10      	cmp	r3, #16
   219ea:	d10c      	bne.n	21a06 <_strtol_l.isra.0+0x4a>
   219ec:	2c30      	cmp	r4, #48	; 0x30
   219ee:	d10a      	bne.n	21a06 <_strtol_l.isra.0+0x4a>
   219f0:	f89c 0000 	ldrb.w	r0, [ip]
   219f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   219f8:	2858      	cmp	r0, #88	; 0x58
   219fa:	d14d      	bne.n	21a98 <_strtol_l.isra.0+0xdc>
   219fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   21a00:	2310      	movs	r3, #16
   21a02:	f10c 0c02 	add.w	ip, ip, #2
   21a06:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   21a0a:	3f01      	subs	r7, #1
   21a0c:	2600      	movs	r6, #0
   21a0e:	fbb7 f9f3 	udiv	r9, r7, r3
   21a12:	4630      	mov	r0, r6
   21a14:	fb03 7a19 	mls	sl, r3, r9, r7
   21a18:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   21a1c:	2d09      	cmp	r5, #9
   21a1e:	d818      	bhi.n	21a52 <_strtol_l.isra.0+0x96>
   21a20:	462c      	mov	r4, r5
   21a22:	42a3      	cmp	r3, r4
   21a24:	dd24      	ble.n	21a70 <_strtol_l.isra.0+0xb4>
   21a26:	1c75      	adds	r5, r6, #1
   21a28:	d007      	beq.n	21a3a <_strtol_l.isra.0+0x7e>
   21a2a:	4581      	cmp	r9, r0
   21a2c:	d31d      	bcc.n	21a6a <_strtol_l.isra.0+0xae>
   21a2e:	d101      	bne.n	21a34 <_strtol_l.isra.0+0x78>
   21a30:	45a2      	cmp	sl, r4
   21a32:	db1a      	blt.n	21a6a <_strtol_l.isra.0+0xae>
   21a34:	fb00 4003 	mla	r0, r0, r3, r4
   21a38:	2601      	movs	r6, #1
   21a3a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21a3e:	e7eb      	b.n	21a18 <_strtol_l.isra.0+0x5c>
   21a40:	2c2b      	cmp	r4, #43	; 0x2b
   21a42:	bf08      	it	eq
   21a44:	f89c 4000 	ldrbeq.w	r4, [ip]
   21a48:	46a8      	mov	r8, r5
   21a4a:	bf08      	it	eq
   21a4c:	f100 0c02 	addeq.w	ip, r0, #2
   21a50:	e7c8      	b.n	219e4 <_strtol_l.isra.0+0x28>
   21a52:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   21a56:	2d19      	cmp	r5, #25
   21a58:	d801      	bhi.n	21a5e <_strtol_l.isra.0+0xa2>
   21a5a:	3c37      	subs	r4, #55	; 0x37
   21a5c:	e7e1      	b.n	21a22 <_strtol_l.isra.0+0x66>
   21a5e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   21a62:	2d19      	cmp	r5, #25
   21a64:	d804      	bhi.n	21a70 <_strtol_l.isra.0+0xb4>
   21a66:	3c57      	subs	r4, #87	; 0x57
   21a68:	e7db      	b.n	21a22 <_strtol_l.isra.0+0x66>
   21a6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21a6e:	e7e4      	b.n	21a3a <_strtol_l.isra.0+0x7e>
   21a70:	1c73      	adds	r3, r6, #1
   21a72:	d106      	bne.n	21a82 <_strtol_l.isra.0+0xc6>
   21a74:	2322      	movs	r3, #34	; 0x22
   21a76:	f8ce 3000 	str.w	r3, [lr]
   21a7a:	4638      	mov	r0, r7
   21a7c:	b942      	cbnz	r2, 21a90 <_strtol_l.isra.0+0xd4>
   21a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a82:	f1b8 0f00 	cmp.w	r8, #0
   21a86:	d000      	beq.n	21a8a <_strtol_l.isra.0+0xce>
   21a88:	4240      	negs	r0, r0
   21a8a:	2a00      	cmp	r2, #0
   21a8c:	d0f7      	beq.n	21a7e <_strtol_l.isra.0+0xc2>
   21a8e:	b10e      	cbz	r6, 21a94 <_strtol_l.isra.0+0xd8>
   21a90:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   21a94:	6011      	str	r1, [r2, #0]
   21a96:	e7f2      	b.n	21a7e <_strtol_l.isra.0+0xc2>
   21a98:	2430      	movs	r4, #48	; 0x30
   21a9a:	2b00      	cmp	r3, #0
   21a9c:	d1b3      	bne.n	21a06 <_strtol_l.isra.0+0x4a>
   21a9e:	2308      	movs	r3, #8
   21aa0:	e7b1      	b.n	21a06 <_strtol_l.isra.0+0x4a>
   21aa2:	2c30      	cmp	r4, #48	; 0x30
   21aa4:	d0a4      	beq.n	219f0 <_strtol_l.isra.0+0x34>
   21aa6:	230a      	movs	r3, #10
   21aa8:	e7ad      	b.n	21a06 <_strtol_l.isra.0+0x4a>
   21aaa:	bf00      	nop
   21aac:	00039397 	.word	0x00039397

00021ab0 <strtol>:
   21ab0:	4613      	mov	r3, r2
   21ab2:	460a      	mov	r2, r1
   21ab4:	4601      	mov	r1, r0
   21ab6:	4802      	ldr	r0, [pc, #8]	; (21ac0 <strtol+0x10>)
   21ab8:	6800      	ldr	r0, [r0, #0]
   21aba:	f7ff bf7f 	b.w	219bc <_strtol_l.isra.0>
   21abe:	bf00      	nop
   21ac0:	20000848 	.word	0x20000848

00021ac4 <_strtoul_l.isra.0>:
   21ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21ac8:	4e3b      	ldr	r6, [pc, #236]	; (21bb8 <_strtoul_l.isra.0+0xf4>)
   21aca:	4686      	mov	lr, r0
   21acc:	468c      	mov	ip, r1
   21ace:	4660      	mov	r0, ip
   21ad0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21ad4:	5da5      	ldrb	r5, [r4, r6]
   21ad6:	f015 0508 	ands.w	r5, r5, #8
   21ada:	d1f8      	bne.n	21ace <_strtoul_l.isra.0+0xa>
   21adc:	2c2d      	cmp	r4, #45	; 0x2d
   21ade:	d134      	bne.n	21b4a <_strtoul_l.isra.0+0x86>
   21ae0:	f89c 4000 	ldrb.w	r4, [ip]
   21ae4:	f04f 0801 	mov.w	r8, #1
   21ae8:	f100 0c02 	add.w	ip, r0, #2
   21aec:	2b00      	cmp	r3, #0
   21aee:	d05e      	beq.n	21bae <_strtoul_l.isra.0+0xea>
   21af0:	2b10      	cmp	r3, #16
   21af2:	d10c      	bne.n	21b0e <_strtoul_l.isra.0+0x4a>
   21af4:	2c30      	cmp	r4, #48	; 0x30
   21af6:	d10a      	bne.n	21b0e <_strtoul_l.isra.0+0x4a>
   21af8:	f89c 0000 	ldrb.w	r0, [ip]
   21afc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   21b00:	2858      	cmp	r0, #88	; 0x58
   21b02:	d14f      	bne.n	21ba4 <_strtoul_l.isra.0+0xe0>
   21b04:	f89c 4001 	ldrb.w	r4, [ip, #1]
   21b08:	2310      	movs	r3, #16
   21b0a:	f10c 0c02 	add.w	ip, ip, #2
   21b0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21b12:	2500      	movs	r5, #0
   21b14:	fbb7 f7f3 	udiv	r7, r7, r3
   21b18:	fb03 f907 	mul.w	r9, r3, r7
   21b1c:	ea6f 0909 	mvn.w	r9, r9
   21b20:	4628      	mov	r0, r5
   21b22:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   21b26:	2e09      	cmp	r6, #9
   21b28:	d818      	bhi.n	21b5c <_strtoul_l.isra.0+0x98>
   21b2a:	4634      	mov	r4, r6
   21b2c:	42a3      	cmp	r3, r4
   21b2e:	dd24      	ble.n	21b7a <_strtoul_l.isra.0+0xb6>
   21b30:	2d00      	cmp	r5, #0
   21b32:	db1f      	blt.n	21b74 <_strtoul_l.isra.0+0xb0>
   21b34:	4287      	cmp	r7, r0
   21b36:	d31d      	bcc.n	21b74 <_strtoul_l.isra.0+0xb0>
   21b38:	d101      	bne.n	21b3e <_strtoul_l.isra.0+0x7a>
   21b3a:	45a1      	cmp	r9, r4
   21b3c:	db1a      	blt.n	21b74 <_strtoul_l.isra.0+0xb0>
   21b3e:	fb00 4003 	mla	r0, r0, r3, r4
   21b42:	2501      	movs	r5, #1
   21b44:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21b48:	e7eb      	b.n	21b22 <_strtoul_l.isra.0+0x5e>
   21b4a:	2c2b      	cmp	r4, #43	; 0x2b
   21b4c:	bf08      	it	eq
   21b4e:	f89c 4000 	ldrbeq.w	r4, [ip]
   21b52:	46a8      	mov	r8, r5
   21b54:	bf08      	it	eq
   21b56:	f100 0c02 	addeq.w	ip, r0, #2
   21b5a:	e7c7      	b.n	21aec <_strtoul_l.isra.0+0x28>
   21b5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   21b60:	2e19      	cmp	r6, #25
   21b62:	d801      	bhi.n	21b68 <_strtoul_l.isra.0+0xa4>
   21b64:	3c37      	subs	r4, #55	; 0x37
   21b66:	e7e1      	b.n	21b2c <_strtoul_l.isra.0+0x68>
   21b68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   21b6c:	2e19      	cmp	r6, #25
   21b6e:	d804      	bhi.n	21b7a <_strtoul_l.isra.0+0xb6>
   21b70:	3c57      	subs	r4, #87	; 0x57
   21b72:	e7db      	b.n	21b2c <_strtoul_l.isra.0+0x68>
   21b74:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21b78:	e7e4      	b.n	21b44 <_strtoul_l.isra.0+0x80>
   21b7a:	2d00      	cmp	r5, #0
   21b7c:	da07      	bge.n	21b8e <_strtoul_l.isra.0+0xca>
   21b7e:	2322      	movs	r3, #34	; 0x22
   21b80:	f8ce 3000 	str.w	r3, [lr]
   21b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21b88:	b942      	cbnz	r2, 21b9c <_strtoul_l.isra.0+0xd8>
   21b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21b8e:	f1b8 0f00 	cmp.w	r8, #0
   21b92:	d000      	beq.n	21b96 <_strtoul_l.isra.0+0xd2>
   21b94:	4240      	negs	r0, r0
   21b96:	2a00      	cmp	r2, #0
   21b98:	d0f7      	beq.n	21b8a <_strtoul_l.isra.0+0xc6>
   21b9a:	b10d      	cbz	r5, 21ba0 <_strtoul_l.isra.0+0xdc>
   21b9c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   21ba0:	6011      	str	r1, [r2, #0]
   21ba2:	e7f2      	b.n	21b8a <_strtoul_l.isra.0+0xc6>
   21ba4:	2430      	movs	r4, #48	; 0x30
   21ba6:	2b00      	cmp	r3, #0
   21ba8:	d1b1      	bne.n	21b0e <_strtoul_l.isra.0+0x4a>
   21baa:	2308      	movs	r3, #8
   21bac:	e7af      	b.n	21b0e <_strtoul_l.isra.0+0x4a>
   21bae:	2c30      	cmp	r4, #48	; 0x30
   21bb0:	d0a2      	beq.n	21af8 <_strtoul_l.isra.0+0x34>
   21bb2:	230a      	movs	r3, #10
   21bb4:	e7ab      	b.n	21b0e <_strtoul_l.isra.0+0x4a>
   21bb6:	bf00      	nop
   21bb8:	00039397 	.word	0x00039397

00021bbc <strtoul>:
   21bbc:	4613      	mov	r3, r2
   21bbe:	460a      	mov	r2, r1
   21bc0:	4601      	mov	r1, r0
   21bc2:	4802      	ldr	r0, [pc, #8]	; (21bcc <strtoul+0x10>)
   21bc4:	6800      	ldr	r0, [r0, #0]
   21bc6:	f7ff bf7d 	b.w	21ac4 <_strtoul_l.isra.0>
   21bca:	bf00      	nop
   21bcc:	20000848 	.word	0x20000848

00021bd0 <__tzcalc_limits>:
   21bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21bd4:	4680      	mov	r8, r0
   21bd6:	f000 fa6d 	bl	220b4 <__gettzinfo>
   21bda:	f240 73b1 	movw	r3, #1969	; 0x7b1
   21bde:	4598      	cmp	r8, r3
   21be0:	f340 8098 	ble.w	21d14 <__tzcalc_limits+0x144>
   21be4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   21be8:	4443      	add	r3, r8
   21bea:	109b      	asrs	r3, r3, #2
   21bec:	f240 126d 	movw	r2, #365	; 0x16d
   21bf0:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   21bf4:	fb02 3505 	mla	r5, r2, r5, r3
   21bf8:	f06f 0263 	mvn.w	r2, #99	; 0x63
   21bfc:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   21c00:	fb93 f3f2 	sdiv	r3, r3, r2
   21c04:	441d      	add	r5, r3
   21c06:	f44f 73c8 	mov.w	r3, #400	; 0x190
   21c0a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   21c0e:	fb98 f7f3 	sdiv	r7, r8, r3
   21c12:	fb03 8717 	mls	r7, r3, r7, r8
   21c16:	4442      	add	r2, r8
   21c18:	fab7 fc87 	clz	ip, r7
   21c1c:	fbb2 f2f3 	udiv	r2, r2, r3
   21c20:	f008 0303 	and.w	r3, r8, #3
   21c24:	4415      	add	r5, r2
   21c26:	2264      	movs	r2, #100	; 0x64
   21c28:	f8c0 8004 	str.w	r8, [r0, #4]
   21c2c:	fb98 f6f2 	sdiv	r6, r8, r2
   21c30:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   21c34:	fb02 8616 	mls	r6, r2, r6, r8
   21c38:	4604      	mov	r4, r0
   21c3a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   21c3e:	9300      	str	r3, [sp, #0]
   21c40:	f04f 0e07 	mov.w	lr, #7
   21c44:	7a22      	ldrb	r2, [r4, #8]
   21c46:	6963      	ldr	r3, [r4, #20]
   21c48:	2a4a      	cmp	r2, #74	; 0x4a
   21c4a:	d128      	bne.n	21c9e <__tzcalc_limits+0xce>
   21c4c:	9900      	ldr	r1, [sp, #0]
   21c4e:	18ea      	adds	r2, r5, r3
   21c50:	b901      	cbnz	r1, 21c54 <__tzcalc_limits+0x84>
   21c52:	b906      	cbnz	r6, 21c56 <__tzcalc_limits+0x86>
   21c54:	bb0f      	cbnz	r7, 21c9a <__tzcalc_limits+0xca>
   21c56:	2b3b      	cmp	r3, #59	; 0x3b
   21c58:	bfd4      	ite	le
   21c5a:	2300      	movle	r3, #0
   21c5c:	2301      	movgt	r3, #1
   21c5e:	4413      	add	r3, r2
   21c60:	1e5a      	subs	r2, r3, #1
   21c62:	69a3      	ldr	r3, [r4, #24]
   21c64:	492c      	ldr	r1, [pc, #176]	; (21d18 <__tzcalc_limits+0x148>)
   21c66:	fb01 3202 	mla	r2, r1, r2, r3
   21c6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21c6c:	4413      	add	r3, r2
   21c6e:	461a      	mov	r2, r3
   21c70:	17db      	asrs	r3, r3, #31
   21c72:	e9c4 2308 	strd	r2, r3, [r4, #32]
   21c76:	3428      	adds	r4, #40	; 0x28
   21c78:	45a3      	cmp	fp, r4
   21c7a:	d1e3      	bne.n	21c44 <__tzcalc_limits+0x74>
   21c7c:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   21c80:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   21c84:	4294      	cmp	r4, r2
   21c86:	eb75 0303 	sbcs.w	r3, r5, r3
   21c8a:	bfb4      	ite	lt
   21c8c:	2301      	movlt	r3, #1
   21c8e:	2300      	movge	r3, #0
   21c90:	6003      	str	r3, [r0, #0]
   21c92:	2001      	movs	r0, #1
   21c94:	b003      	add	sp, #12
   21c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c9a:	2300      	movs	r3, #0
   21c9c:	e7df      	b.n	21c5e <__tzcalc_limits+0x8e>
   21c9e:	2a44      	cmp	r2, #68	; 0x44
   21ca0:	d101      	bne.n	21ca6 <__tzcalc_limits+0xd6>
   21ca2:	18ea      	adds	r2, r5, r3
   21ca4:	e7dd      	b.n	21c62 <__tzcalc_limits+0x92>
   21ca6:	9a00      	ldr	r2, [sp, #0]
   21ca8:	bb72      	cbnz	r2, 21d08 <__tzcalc_limits+0x138>
   21caa:	2e00      	cmp	r6, #0
   21cac:	bf0c      	ite	eq
   21cae:	46e0      	moveq	r8, ip
   21cb0:	f04f 0801 	movne.w	r8, #1
   21cb4:	4919      	ldr	r1, [pc, #100]	; (21d1c <__tzcalc_limits+0x14c>)
   21cb6:	68e2      	ldr	r2, [r4, #12]
   21cb8:	9201      	str	r2, [sp, #4]
   21cba:	f04f 0a30 	mov.w	sl, #48	; 0x30
   21cbe:	fb0a 1808 	mla	r8, sl, r8, r1
   21cc2:	462a      	mov	r2, r5
   21cc4:	f04f 0900 	mov.w	r9, #0
   21cc8:	f1a8 0804 	sub.w	r8, r8, #4
   21ccc:	9901      	ldr	r1, [sp, #4]
   21cce:	f109 0901 	add.w	r9, r9, #1
   21cd2:	4549      	cmp	r1, r9
   21cd4:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   21cd8:	dc18      	bgt.n	21d0c <__tzcalc_limits+0x13c>
   21cda:	f102 0804 	add.w	r8, r2, #4
   21cde:	fb98 f9fe 	sdiv	r9, r8, lr
   21ce2:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   21ce6:	eba8 0909 	sub.w	r9, r8, r9
   21cea:	ebb3 0909 	subs.w	r9, r3, r9
   21cee:	6923      	ldr	r3, [r4, #16]
   21cf0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   21cf4:	bf48      	it	mi
   21cf6:	f109 0907 	addmi.w	r9, r9, #7
   21cfa:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   21cfe:	444b      	add	r3, r9
   21d00:	4553      	cmp	r3, sl
   21d02:	da05      	bge.n	21d10 <__tzcalc_limits+0x140>
   21d04:	441a      	add	r2, r3
   21d06:	e7ac      	b.n	21c62 <__tzcalc_limits+0x92>
   21d08:	46e0      	mov	r8, ip
   21d0a:	e7d3      	b.n	21cb4 <__tzcalc_limits+0xe4>
   21d0c:	4452      	add	r2, sl
   21d0e:	e7dd      	b.n	21ccc <__tzcalc_limits+0xfc>
   21d10:	3b07      	subs	r3, #7
   21d12:	e7f5      	b.n	21d00 <__tzcalc_limits+0x130>
   21d14:	2000      	movs	r0, #0
   21d16:	e7bd      	b.n	21c94 <__tzcalc_limits+0xc4>
   21d18:	00015180 	.word	0x00015180
   21d1c:	0002db28 	.word	0x0002db28

00021d20 <tzset>:
   21d20:	4b01      	ldr	r3, [pc, #4]	; (21d28 <tzset+0x8>)
   21d22:	6818      	ldr	r0, [r3, #0]
   21d24:	f000 b802 	b.w	21d2c <_tzset_unlocked_r>
   21d28:	20000848 	.word	0x20000848

00021d2c <_tzset_unlocked_r>:
   21d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d30:	b08d      	sub	sp, #52	; 0x34
   21d32:	4607      	mov	r7, r0
   21d34:	f000 f9be 	bl	220b4 <__gettzinfo>
   21d38:	49ae      	ldr	r1, [pc, #696]	; (21ff4 <_tzset_unlocked_r+0x2c8>)
   21d3a:	4eaf      	ldr	r6, [pc, #700]	; (21ff8 <_tzset_unlocked_r+0x2cc>)
   21d3c:	4605      	mov	r5, r0
   21d3e:	4638      	mov	r0, r7
   21d40:	f009 fdf9 	bl	2b936 <_getenv_r>
   21d44:	4604      	mov	r4, r0
   21d46:	b970      	cbnz	r0, 21d66 <_tzset_unlocked_r+0x3a>
   21d48:	4bac      	ldr	r3, [pc, #688]	; (21ffc <_tzset_unlocked_r+0x2d0>)
   21d4a:	4aad      	ldr	r2, [pc, #692]	; (22000 <_tzset_unlocked_r+0x2d4>)
   21d4c:	6018      	str	r0, [r3, #0]
   21d4e:	4bad      	ldr	r3, [pc, #692]	; (22004 <_tzset_unlocked_r+0x2d8>)
   21d50:	6018      	str	r0, [r3, #0]
   21d52:	4bad      	ldr	r3, [pc, #692]	; (22008 <_tzset_unlocked_r+0x2dc>)
   21d54:	6830      	ldr	r0, [r6, #0]
   21d56:	e9c3 2200 	strd	r2, r2, [r3]
   21d5a:	f000 f9af 	bl	220bc <free>
   21d5e:	6034      	str	r4, [r6, #0]
   21d60:	b00d      	add	sp, #52	; 0x34
   21d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d66:	6831      	ldr	r1, [r6, #0]
   21d68:	2900      	cmp	r1, #0
   21d6a:	d15f      	bne.n	21e2c <_tzset_unlocked_r+0x100>
   21d6c:	6830      	ldr	r0, [r6, #0]
   21d6e:	f000 f9a5 	bl	220bc <free>
   21d72:	4620      	mov	r0, r4
   21d74:	f7de fb8a 	bl	48c <strlen>
   21d78:	1c41      	adds	r1, r0, #1
   21d7a:	4638      	mov	r0, r7
   21d7c:	f000 f9f4 	bl	22168 <_malloc_r>
   21d80:	6030      	str	r0, [r6, #0]
   21d82:	2800      	cmp	r0, #0
   21d84:	d157      	bne.n	21e36 <_tzset_unlocked_r+0x10a>
   21d86:	7823      	ldrb	r3, [r4, #0]
   21d88:	4aa0      	ldr	r2, [pc, #640]	; (2200c <_tzset_unlocked_r+0x2e0>)
   21d8a:	49a1      	ldr	r1, [pc, #644]	; (22010 <_tzset_unlocked_r+0x2e4>)
   21d8c:	2b3a      	cmp	r3, #58	; 0x3a
   21d8e:	bf08      	it	eq
   21d90:	3401      	addeq	r4, #1
   21d92:	ae0a      	add	r6, sp, #40	; 0x28
   21d94:	4633      	mov	r3, r6
   21d96:	4620      	mov	r0, r4
   21d98:	f7ff f890 	bl	20ebc <siscanf>
   21d9c:	2800      	cmp	r0, #0
   21d9e:	dddf      	ble.n	21d60 <_tzset_unlocked_r+0x34>
   21da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21da2:	18e7      	adds	r7, r4, r3
   21da4:	5ce3      	ldrb	r3, [r4, r3]
   21da6:	2b2d      	cmp	r3, #45	; 0x2d
   21da8:	d149      	bne.n	21e3e <_tzset_unlocked_r+0x112>
   21daa:	3701      	adds	r7, #1
   21dac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21db0:	f10d 0a20 	add.w	sl, sp, #32
   21db4:	f10d 0b1e 	add.w	fp, sp, #30
   21db8:	f04f 0800 	mov.w	r8, #0
   21dbc:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   21dc0:	4994      	ldr	r1, [pc, #592]	; (22014 <_tzset_unlocked_r+0x2e8>)
   21dc2:	9603      	str	r6, [sp, #12]
   21dc4:	f8cd b000 	str.w	fp, [sp]
   21dc8:	4633      	mov	r3, r6
   21dca:	aa07      	add	r2, sp, #28
   21dcc:	4638      	mov	r0, r7
   21dce:	f8ad 801e 	strh.w	r8, [sp, #30]
   21dd2:	f8ad 8020 	strh.w	r8, [sp, #32]
   21dd6:	f7ff f871 	bl	20ebc <siscanf>
   21dda:	4540      	cmp	r0, r8
   21ddc:	ddc0      	ble.n	21d60 <_tzset_unlocked_r+0x34>
   21dde:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21de2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21de6:	f8df 9238 	ldr.w	r9, [pc, #568]	; 22020 <_tzset_unlocked_r+0x2f4>
   21dea:	213c      	movs	r1, #60	; 0x3c
   21dec:	fb01 2203 	mla	r2, r1, r3, r2
   21df0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21df4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   21df8:	fb01 2303 	mla	r3, r1, r3, r2
   21dfc:	435c      	muls	r4, r3
   21dfe:	62ac      	str	r4, [r5, #40]	; 0x28
   21e00:	4c81      	ldr	r4, [pc, #516]	; (22008 <_tzset_unlocked_r+0x2dc>)
   21e02:	4b82      	ldr	r3, [pc, #520]	; (2200c <_tzset_unlocked_r+0x2e0>)
   21e04:	6023      	str	r3, [r4, #0]
   21e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e08:	4981      	ldr	r1, [pc, #516]	; (22010 <_tzset_unlocked_r+0x2e4>)
   21e0a:	441f      	add	r7, r3
   21e0c:	464a      	mov	r2, r9
   21e0e:	4633      	mov	r3, r6
   21e10:	4638      	mov	r0, r7
   21e12:	f7ff f853 	bl	20ebc <siscanf>
   21e16:	4540      	cmp	r0, r8
   21e18:	dc16      	bgt.n	21e48 <_tzset_unlocked_r+0x11c>
   21e1a:	6823      	ldr	r3, [r4, #0]
   21e1c:	6063      	str	r3, [r4, #4]
   21e1e:	4b77      	ldr	r3, [pc, #476]	; (21ffc <_tzset_unlocked_r+0x2d0>)
   21e20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21e22:	601a      	str	r2, [r3, #0]
   21e24:	4b77      	ldr	r3, [pc, #476]	; (22004 <_tzset_unlocked_r+0x2d8>)
   21e26:	f8c3 8000 	str.w	r8, [r3]
   21e2a:	e799      	b.n	21d60 <_tzset_unlocked_r+0x34>
   21e2c:	f7de fb24 	bl	478 <strcmp>
   21e30:	2800      	cmp	r0, #0
   21e32:	d19b      	bne.n	21d6c <_tzset_unlocked_r+0x40>
   21e34:	e794      	b.n	21d60 <_tzset_unlocked_r+0x34>
   21e36:	4621      	mov	r1, r4
   21e38:	f009 fce6 	bl	2b808 <strcpy>
   21e3c:	e7a3      	b.n	21d86 <_tzset_unlocked_r+0x5a>
   21e3e:	2b2b      	cmp	r3, #43	; 0x2b
   21e40:	bf08      	it	eq
   21e42:	3701      	addeq	r7, #1
   21e44:	2401      	movs	r4, #1
   21e46:	e7b3      	b.n	21db0 <_tzset_unlocked_r+0x84>
   21e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e4a:	f8c4 9004 	str.w	r9, [r4, #4]
   21e4e:	18fc      	adds	r4, r7, r3
   21e50:	5cfb      	ldrb	r3, [r7, r3]
   21e52:	2b2d      	cmp	r3, #45	; 0x2d
   21e54:	f040 808b 	bne.w	21f6e <_tzset_unlocked_r+0x242>
   21e58:	3401      	adds	r4, #1
   21e5a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21e5e:	2300      	movs	r3, #0
   21e60:	f8ad 301c 	strh.w	r3, [sp, #28]
   21e64:	f8ad 301e 	strh.w	r3, [sp, #30]
   21e68:	f8ad 3020 	strh.w	r3, [sp, #32]
   21e6c:	930a      	str	r3, [sp, #40]	; 0x28
   21e6e:	e9cd a602 	strd	sl, r6, [sp, #8]
   21e72:	e9cd b600 	strd	fp, r6, [sp]
   21e76:	4967      	ldr	r1, [pc, #412]	; (22014 <_tzset_unlocked_r+0x2e8>)
   21e78:	4633      	mov	r3, r6
   21e7a:	aa07      	add	r2, sp, #28
   21e7c:	4620      	mov	r0, r4
   21e7e:	f7ff f81d 	bl	20ebc <siscanf>
   21e82:	2800      	cmp	r0, #0
   21e84:	dc78      	bgt.n	21f78 <_tzset_unlocked_r+0x24c>
   21e86:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   21e88:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   21e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e8e:	652f      	str	r7, [r5, #80]	; 0x50
   21e90:	441c      	add	r4, r3
   21e92:	462f      	mov	r7, r5
   21e94:	f04f 0900 	mov.w	r9, #0
   21e98:	7823      	ldrb	r3, [r4, #0]
   21e9a:	2b2c      	cmp	r3, #44	; 0x2c
   21e9c:	bf08      	it	eq
   21e9e:	3401      	addeq	r4, #1
   21ea0:	f894 8000 	ldrb.w	r8, [r4]
   21ea4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   21ea8:	d178      	bne.n	21f9c <_tzset_unlocked_r+0x270>
   21eaa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   21eae:	e9cd 6301 	strd	r6, r3, [sp, #4]
   21eb2:	ab09      	add	r3, sp, #36	; 0x24
   21eb4:	9300      	str	r3, [sp, #0]
   21eb6:	4958      	ldr	r1, [pc, #352]	; (22018 <_tzset_unlocked_r+0x2ec>)
   21eb8:	9603      	str	r6, [sp, #12]
   21eba:	4633      	mov	r3, r6
   21ebc:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   21ec0:	4620      	mov	r0, r4
   21ec2:	f7fe fffb 	bl	20ebc <siscanf>
   21ec6:	2803      	cmp	r0, #3
   21ec8:	f47f af4a 	bne.w	21d60 <_tzset_unlocked_r+0x34>
   21ecc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   21ed0:	1e4b      	subs	r3, r1, #1
   21ed2:	2b0b      	cmp	r3, #11
   21ed4:	f63f af44 	bhi.w	21d60 <_tzset_unlocked_r+0x34>
   21ed8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   21edc:	1e53      	subs	r3, r2, #1
   21ede:	2b04      	cmp	r3, #4
   21ee0:	f63f af3e 	bhi.w	21d60 <_tzset_unlocked_r+0x34>
   21ee4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   21ee8:	2b06      	cmp	r3, #6
   21eea:	f63f af39 	bhi.w	21d60 <_tzset_unlocked_r+0x34>
   21eee:	e9c7 1203 	strd	r1, r2, [r7, #12]
   21ef2:	f887 8008 	strb.w	r8, [r7, #8]
   21ef6:	617b      	str	r3, [r7, #20]
   21ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21efa:	eb04 0803 	add.w	r8, r4, r3
   21efe:	2302      	movs	r3, #2
   21f00:	f8ad 301c 	strh.w	r3, [sp, #28]
   21f04:	2300      	movs	r3, #0
   21f06:	f8ad 301e 	strh.w	r3, [sp, #30]
   21f0a:	f8ad 3020 	strh.w	r3, [sp, #32]
   21f0e:	930a      	str	r3, [sp, #40]	; 0x28
   21f10:	f898 3000 	ldrb.w	r3, [r8]
   21f14:	2b2f      	cmp	r3, #47	; 0x2f
   21f16:	d109      	bne.n	21f2c <_tzset_unlocked_r+0x200>
   21f18:	e9cd a602 	strd	sl, r6, [sp, #8]
   21f1c:	e9cd b600 	strd	fp, r6, [sp]
   21f20:	493e      	ldr	r1, [pc, #248]	; (2201c <_tzset_unlocked_r+0x2f0>)
   21f22:	4633      	mov	r3, r6
   21f24:	aa07      	add	r2, sp, #28
   21f26:	4640      	mov	r0, r8
   21f28:	f7fe ffc8 	bl	20ebc <siscanf>
   21f2c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21f30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21f34:	213c      	movs	r1, #60	; 0x3c
   21f36:	fb01 2203 	mla	r2, r1, r3, r2
   21f3a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21f3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   21f42:	fb01 2303 	mla	r3, r1, r3, r2
   21f46:	61bb      	str	r3, [r7, #24]
   21f48:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21f4a:	3728      	adds	r7, #40	; 0x28
   21f4c:	4444      	add	r4, r8
   21f4e:	f1b9 0f00 	cmp.w	r9, #0
   21f52:	d020      	beq.n	21f96 <_tzset_unlocked_r+0x26a>
   21f54:	6868      	ldr	r0, [r5, #4]
   21f56:	f7ff fe3b 	bl	21bd0 <__tzcalc_limits>
   21f5a:	4b28      	ldr	r3, [pc, #160]	; (21ffc <_tzset_unlocked_r+0x2d0>)
   21f5c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21f5e:	601a      	str	r2, [r3, #0]
   21f60:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21f62:	1a9b      	subs	r3, r3, r2
   21f64:	4a27      	ldr	r2, [pc, #156]	; (22004 <_tzset_unlocked_r+0x2d8>)
   21f66:	bf18      	it	ne
   21f68:	2301      	movne	r3, #1
   21f6a:	6013      	str	r3, [r2, #0]
   21f6c:	e6f8      	b.n	21d60 <_tzset_unlocked_r+0x34>
   21f6e:	2b2b      	cmp	r3, #43	; 0x2b
   21f70:	bf08      	it	eq
   21f72:	3401      	addeq	r4, #1
   21f74:	2701      	movs	r7, #1
   21f76:	e772      	b.n	21e5e <_tzset_unlocked_r+0x132>
   21f78:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21f7c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21f80:	213c      	movs	r1, #60	; 0x3c
   21f82:	fb01 2203 	mla	r2, r1, r3, r2
   21f86:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21f8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   21f8e:	fb01 2303 	mla	r3, r1, r3, r2
   21f92:	435f      	muls	r7, r3
   21f94:	e77a      	b.n	21e8c <_tzset_unlocked_r+0x160>
   21f96:	f04f 0901 	mov.w	r9, #1
   21f9a:	e77d      	b.n	21e98 <_tzset_unlocked_r+0x16c>
   21f9c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   21fa0:	bf06      	itte	eq
   21fa2:	3401      	addeq	r4, #1
   21fa4:	4643      	moveq	r3, r8
   21fa6:	2344      	movne	r3, #68	; 0x44
   21fa8:	220a      	movs	r2, #10
   21faa:	a90b      	add	r1, sp, #44	; 0x2c
   21fac:	4620      	mov	r0, r4
   21fae:	9305      	str	r3, [sp, #20]
   21fb0:	f7ff fe04 	bl	21bbc <strtoul>
   21fb4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   21fb8:	9b05      	ldr	r3, [sp, #20]
   21fba:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   21fbe:	45a0      	cmp	r8, r4
   21fc0:	d114      	bne.n	21fec <_tzset_unlocked_r+0x2c0>
   21fc2:	234d      	movs	r3, #77	; 0x4d
   21fc4:	f1b9 0f00 	cmp.w	r9, #0
   21fc8:	d107      	bne.n	21fda <_tzset_unlocked_r+0x2ae>
   21fca:	722b      	strb	r3, [r5, #8]
   21fcc:	2103      	movs	r1, #3
   21fce:	2302      	movs	r3, #2
   21fd0:	e9c5 1303 	strd	r1, r3, [r5, #12]
   21fd4:	f8c5 9014 	str.w	r9, [r5, #20]
   21fd8:	e791      	b.n	21efe <_tzset_unlocked_r+0x1d2>
   21fda:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   21fde:	220b      	movs	r2, #11
   21fe0:	2301      	movs	r3, #1
   21fe2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   21fe6:	2300      	movs	r3, #0
   21fe8:	63eb      	str	r3, [r5, #60]	; 0x3c
   21fea:	e788      	b.n	21efe <_tzset_unlocked_r+0x1d2>
   21fec:	b280      	uxth	r0, r0
   21fee:	723b      	strb	r3, [r7, #8]
   21ff0:	6178      	str	r0, [r7, #20]
   21ff2:	e784      	b.n	21efe <_tzset_unlocked_r+0x1d2>
   21ff4:	00039610 	.word	0x00039610
   21ff8:	200080ac 	.word	0x200080ac
   21ffc:	200080b4 	.word	0x200080b4
   22000:	00039613 	.word	0x00039613
   22004:	200080b0 	.word	0x200080b0
   22008:	20000840 	.word	0x20000840
   2200c:	20008767 	.word	0x20008767
   22010:	00039617 	.word	0x00039617
   22014:	0003963a 	.word	0x0003963a
   22018:	00039626 	.word	0x00039626
   2201c:	00039639 	.word	0x00039639
   22020:	2000875c 	.word	0x2000875c

00022024 <vsniprintf>:
   22024:	b507      	push	{r0, r1, r2, lr}
   22026:	9300      	str	r3, [sp, #0]
   22028:	4613      	mov	r3, r2
   2202a:	460a      	mov	r2, r1
   2202c:	4601      	mov	r1, r0
   2202e:	4803      	ldr	r0, [pc, #12]	; (2203c <vsniprintf+0x18>)
   22030:	6800      	ldr	r0, [r0, #0]
   22032:	f009 fc3c 	bl	2b8ae <_vsniprintf_r>
   22036:	b003      	add	sp, #12
   22038:	f85d fb04 	ldr.w	pc, [sp], #4
   2203c:	20000848 	.word	0x20000848

00022040 <_findenv_r>:
   22040:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22044:	4607      	mov	r7, r0
   22046:	4689      	mov	r9, r1
   22048:	4616      	mov	r6, r2
   2204a:	f009 fe34 	bl	2bcb6 <__env_lock>
   2204e:	4b18      	ldr	r3, [pc, #96]	; (220b0 <_findenv_r+0x70>)
   22050:	681c      	ldr	r4, [r3, #0]
   22052:	469a      	mov	sl, r3
   22054:	b134      	cbz	r4, 22064 <_findenv_r+0x24>
   22056:	464b      	mov	r3, r9
   22058:	4698      	mov	r8, r3
   2205a:	f813 1b01 	ldrb.w	r1, [r3], #1
   2205e:	b139      	cbz	r1, 22070 <_findenv_r+0x30>
   22060:	293d      	cmp	r1, #61	; 0x3d
   22062:	d1f9      	bne.n	22058 <_findenv_r+0x18>
   22064:	4638      	mov	r0, r7
   22066:	f009 fe27 	bl	2bcb8 <__env_unlock>
   2206a:	2000      	movs	r0, #0
   2206c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22070:	eba8 0809 	sub.w	r8, r8, r9
   22074:	46a3      	mov	fp, r4
   22076:	f854 0b04 	ldr.w	r0, [r4], #4
   2207a:	2800      	cmp	r0, #0
   2207c:	d0f2      	beq.n	22064 <_findenv_r+0x24>
   2207e:	4642      	mov	r2, r8
   22080:	4649      	mov	r1, r9
   22082:	f009 fbc9 	bl	2b818 <strncmp>
   22086:	2800      	cmp	r0, #0
   22088:	d1f4      	bne.n	22074 <_findenv_r+0x34>
   2208a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2208e:	eb03 0508 	add.w	r5, r3, r8
   22092:	f813 3008 	ldrb.w	r3, [r3, r8]
   22096:	2b3d      	cmp	r3, #61	; 0x3d
   22098:	d1ec      	bne.n	22074 <_findenv_r+0x34>
   2209a:	f8da 3000 	ldr.w	r3, [sl]
   2209e:	ebab 0303 	sub.w	r3, fp, r3
   220a2:	109b      	asrs	r3, r3, #2
   220a4:	4638      	mov	r0, r7
   220a6:	6033      	str	r3, [r6, #0]
   220a8:	f009 fe06 	bl	2bcb8 <__env_unlock>
   220ac:	1c68      	adds	r0, r5, #1
   220ae:	e7dd      	b.n	2206c <_findenv_r+0x2c>
   220b0:	20000a18 	.word	0x20000a18

000220b4 <__gettzinfo>:
   220b4:	4800      	ldr	r0, [pc, #0]	; (220b8 <__gettzinfo+0x4>)
   220b6:	4770      	bx	lr
   220b8:	20000170 	.word	0x20000170

000220bc <free>:
   220bc:	4b02      	ldr	r3, [pc, #8]	; (220c8 <free+0xc>)
   220be:	4601      	mov	r1, r0
   220c0:	6818      	ldr	r0, [r3, #0]
   220c2:	f000 b803 	b.w	220cc <_free_r>
   220c6:	bf00      	nop
   220c8:	20000848 	.word	0x20000848

000220cc <_free_r>:
   220cc:	b538      	push	{r3, r4, r5, lr}
   220ce:	4605      	mov	r5, r0
   220d0:	2900      	cmp	r1, #0
   220d2:	d045      	beq.n	22160 <_free_r+0x94>
   220d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   220d8:	1f0c      	subs	r4, r1, #4
   220da:	2b00      	cmp	r3, #0
   220dc:	bfb8      	it	lt
   220de:	18e4      	addlt	r4, r4, r3
   220e0:	f009 fe05 	bl	2bcee <__malloc_lock>
   220e4:	4a1f      	ldr	r2, [pc, #124]	; (22164 <_free_r+0x98>)
   220e6:	6813      	ldr	r3, [r2, #0]
   220e8:	4610      	mov	r0, r2
   220ea:	b933      	cbnz	r3, 220fa <_free_r+0x2e>
   220ec:	6063      	str	r3, [r4, #4]
   220ee:	6014      	str	r4, [r2, #0]
   220f0:	4628      	mov	r0, r5
   220f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   220f6:	f009 bdfb 	b.w	2bcf0 <__malloc_unlock>
   220fa:	42a3      	cmp	r3, r4
   220fc:	d90b      	bls.n	22116 <_free_r+0x4a>
   220fe:	6821      	ldr	r1, [r4, #0]
   22100:	1862      	adds	r2, r4, r1
   22102:	4293      	cmp	r3, r2
   22104:	bf04      	itt	eq
   22106:	681a      	ldreq	r2, [r3, #0]
   22108:	685b      	ldreq	r3, [r3, #4]
   2210a:	6063      	str	r3, [r4, #4]
   2210c:	bf04      	itt	eq
   2210e:	1852      	addeq	r2, r2, r1
   22110:	6022      	streq	r2, [r4, #0]
   22112:	6004      	str	r4, [r0, #0]
   22114:	e7ec      	b.n	220f0 <_free_r+0x24>
   22116:	461a      	mov	r2, r3
   22118:	685b      	ldr	r3, [r3, #4]
   2211a:	b10b      	cbz	r3, 22120 <_free_r+0x54>
   2211c:	42a3      	cmp	r3, r4
   2211e:	d9fa      	bls.n	22116 <_free_r+0x4a>
   22120:	6811      	ldr	r1, [r2, #0]
   22122:	1850      	adds	r0, r2, r1
   22124:	42a0      	cmp	r0, r4
   22126:	d10b      	bne.n	22140 <_free_r+0x74>
   22128:	6820      	ldr	r0, [r4, #0]
   2212a:	4401      	add	r1, r0
   2212c:	1850      	adds	r0, r2, r1
   2212e:	4283      	cmp	r3, r0
   22130:	6011      	str	r1, [r2, #0]
   22132:	d1dd      	bne.n	220f0 <_free_r+0x24>
   22134:	6818      	ldr	r0, [r3, #0]
   22136:	685b      	ldr	r3, [r3, #4]
   22138:	6053      	str	r3, [r2, #4]
   2213a:	4401      	add	r1, r0
   2213c:	6011      	str	r1, [r2, #0]
   2213e:	e7d7      	b.n	220f0 <_free_r+0x24>
   22140:	d902      	bls.n	22148 <_free_r+0x7c>
   22142:	230c      	movs	r3, #12
   22144:	602b      	str	r3, [r5, #0]
   22146:	e7d3      	b.n	220f0 <_free_r+0x24>
   22148:	6820      	ldr	r0, [r4, #0]
   2214a:	1821      	adds	r1, r4, r0
   2214c:	428b      	cmp	r3, r1
   2214e:	bf04      	itt	eq
   22150:	6819      	ldreq	r1, [r3, #0]
   22152:	685b      	ldreq	r3, [r3, #4]
   22154:	6063      	str	r3, [r4, #4]
   22156:	bf04      	itt	eq
   22158:	1809      	addeq	r1, r1, r0
   2215a:	6021      	streq	r1, [r4, #0]
   2215c:	6054      	str	r4, [r2, #4]
   2215e:	e7c7      	b.n	220f0 <_free_r+0x24>
   22160:	bd38      	pop	{r3, r4, r5, pc}
   22162:	bf00      	nop
   22164:	200080b8 	.word	0x200080b8

00022168 <_malloc_r>:
   22168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2216a:	1ccd      	adds	r5, r1, #3
   2216c:	f025 0503 	bic.w	r5, r5, #3
   22170:	3508      	adds	r5, #8
   22172:	2d0c      	cmp	r5, #12
   22174:	bf38      	it	cc
   22176:	250c      	movcc	r5, #12
   22178:	2d00      	cmp	r5, #0
   2217a:	4606      	mov	r6, r0
   2217c:	db01      	blt.n	22182 <_malloc_r+0x1a>
   2217e:	42a9      	cmp	r1, r5
   22180:	d903      	bls.n	2218a <_malloc_r+0x22>
   22182:	230c      	movs	r3, #12
   22184:	6033      	str	r3, [r6, #0]
   22186:	2000      	movs	r0, #0
   22188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2218a:	f009 fdb0 	bl	2bcee <__malloc_lock>
   2218e:	4921      	ldr	r1, [pc, #132]	; (22214 <_malloc_r+0xac>)
   22190:	680a      	ldr	r2, [r1, #0]
   22192:	4614      	mov	r4, r2
   22194:	b99c      	cbnz	r4, 221be <_malloc_r+0x56>
   22196:	4f20      	ldr	r7, [pc, #128]	; (22218 <_malloc_r+0xb0>)
   22198:	683b      	ldr	r3, [r7, #0]
   2219a:	b923      	cbnz	r3, 221a6 <_malloc_r+0x3e>
   2219c:	4621      	mov	r1, r4
   2219e:	4630      	mov	r0, r6
   221a0:	f000 fd26 	bl	22bf0 <_sbrk_r>
   221a4:	6038      	str	r0, [r7, #0]
   221a6:	4629      	mov	r1, r5
   221a8:	4630      	mov	r0, r6
   221aa:	f000 fd21 	bl	22bf0 <_sbrk_r>
   221ae:	1c43      	adds	r3, r0, #1
   221b0:	d123      	bne.n	221fa <_malloc_r+0x92>
   221b2:	230c      	movs	r3, #12
   221b4:	6033      	str	r3, [r6, #0]
   221b6:	4630      	mov	r0, r6
   221b8:	f009 fd9a 	bl	2bcf0 <__malloc_unlock>
   221bc:	e7e3      	b.n	22186 <_malloc_r+0x1e>
   221be:	6823      	ldr	r3, [r4, #0]
   221c0:	1b5b      	subs	r3, r3, r5
   221c2:	d417      	bmi.n	221f4 <_malloc_r+0x8c>
   221c4:	2b0b      	cmp	r3, #11
   221c6:	d903      	bls.n	221d0 <_malloc_r+0x68>
   221c8:	6023      	str	r3, [r4, #0]
   221ca:	441c      	add	r4, r3
   221cc:	6025      	str	r5, [r4, #0]
   221ce:	e004      	b.n	221da <_malloc_r+0x72>
   221d0:	6863      	ldr	r3, [r4, #4]
   221d2:	42a2      	cmp	r2, r4
   221d4:	bf0c      	ite	eq
   221d6:	600b      	streq	r3, [r1, #0]
   221d8:	6053      	strne	r3, [r2, #4]
   221da:	4630      	mov	r0, r6
   221dc:	f009 fd88 	bl	2bcf0 <__malloc_unlock>
   221e0:	f104 000b 	add.w	r0, r4, #11
   221e4:	1d23      	adds	r3, r4, #4
   221e6:	f020 0007 	bic.w	r0, r0, #7
   221ea:	1ac2      	subs	r2, r0, r3
   221ec:	d0cc      	beq.n	22188 <_malloc_r+0x20>
   221ee:	1a1b      	subs	r3, r3, r0
   221f0:	50a3      	str	r3, [r4, r2]
   221f2:	e7c9      	b.n	22188 <_malloc_r+0x20>
   221f4:	4622      	mov	r2, r4
   221f6:	6864      	ldr	r4, [r4, #4]
   221f8:	e7cc      	b.n	22194 <_malloc_r+0x2c>
   221fa:	1cc4      	adds	r4, r0, #3
   221fc:	f024 0403 	bic.w	r4, r4, #3
   22200:	42a0      	cmp	r0, r4
   22202:	d0e3      	beq.n	221cc <_malloc_r+0x64>
   22204:	1a21      	subs	r1, r4, r0
   22206:	4630      	mov	r0, r6
   22208:	f000 fcf2 	bl	22bf0 <_sbrk_r>
   2220c:	3001      	adds	r0, #1
   2220e:	d1dd      	bne.n	221cc <_malloc_r+0x64>
   22210:	e7cf      	b.n	221b2 <_malloc_r+0x4a>
   22212:	bf00      	nop
   22214:	200080b8 	.word	0x200080b8
   22218:	200080bc 	.word	0x200080bc

0002221c <_svfiprintf_r>:
   2221c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22220:	4698      	mov	r8, r3
   22222:	898b      	ldrh	r3, [r1, #12]
   22224:	061b      	lsls	r3, r3, #24
   22226:	b09d      	sub	sp, #116	; 0x74
   22228:	4607      	mov	r7, r0
   2222a:	460d      	mov	r5, r1
   2222c:	4614      	mov	r4, r2
   2222e:	d50e      	bpl.n	2224e <_svfiprintf_r+0x32>
   22230:	690b      	ldr	r3, [r1, #16]
   22232:	b963      	cbnz	r3, 2224e <_svfiprintf_r+0x32>
   22234:	2140      	movs	r1, #64	; 0x40
   22236:	f7ff ff97 	bl	22168 <_malloc_r>
   2223a:	6028      	str	r0, [r5, #0]
   2223c:	6128      	str	r0, [r5, #16]
   2223e:	b920      	cbnz	r0, 2224a <_svfiprintf_r+0x2e>
   22240:	230c      	movs	r3, #12
   22242:	603b      	str	r3, [r7, #0]
   22244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22248:	e0d1      	b.n	223ee <_svfiprintf_r+0x1d2>
   2224a:	2340      	movs	r3, #64	; 0x40
   2224c:	616b      	str	r3, [r5, #20]
   2224e:	2300      	movs	r3, #0
   22250:	9309      	str	r3, [sp, #36]	; 0x24
   22252:	2320      	movs	r3, #32
   22254:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   22258:	f8cd 800c 	str.w	r8, [sp, #12]
   2225c:	2330      	movs	r3, #48	; 0x30
   2225e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 22408 <_svfiprintf_r+0x1ec>
   22262:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   22266:	f04f 0901 	mov.w	r9, #1
   2226a:	4623      	mov	r3, r4
   2226c:	469a      	mov	sl, r3
   2226e:	f813 2b01 	ldrb.w	r2, [r3], #1
   22272:	b10a      	cbz	r2, 22278 <_svfiprintf_r+0x5c>
   22274:	2a25      	cmp	r2, #37	; 0x25
   22276:	d1f9      	bne.n	2226c <_svfiprintf_r+0x50>
   22278:	ebba 0b04 	subs.w	fp, sl, r4
   2227c:	d00b      	beq.n	22296 <_svfiprintf_r+0x7a>
   2227e:	465b      	mov	r3, fp
   22280:	4622      	mov	r2, r4
   22282:	4629      	mov	r1, r5
   22284:	4638      	mov	r0, r7
   22286:	f009 fb73 	bl	2b970 <__ssputs_r>
   2228a:	3001      	adds	r0, #1
   2228c:	f000 80aa 	beq.w	223e4 <_svfiprintf_r+0x1c8>
   22290:	9a09      	ldr	r2, [sp, #36]	; 0x24
   22292:	445a      	add	r2, fp
   22294:	9209      	str	r2, [sp, #36]	; 0x24
   22296:	f89a 3000 	ldrb.w	r3, [sl]
   2229a:	2b00      	cmp	r3, #0
   2229c:	f000 80a2 	beq.w	223e4 <_svfiprintf_r+0x1c8>
   222a0:	2300      	movs	r3, #0
   222a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   222a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   222aa:	f10a 0a01 	add.w	sl, sl, #1
   222ae:	9304      	str	r3, [sp, #16]
   222b0:	9307      	str	r3, [sp, #28]
   222b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   222b6:	931a      	str	r3, [sp, #104]	; 0x68
   222b8:	4654      	mov	r4, sl
   222ba:	2205      	movs	r2, #5
   222bc:	f814 1b01 	ldrb.w	r1, [r4], #1
   222c0:	4851      	ldr	r0, [pc, #324]	; (22408 <_svfiprintf_r+0x1ec>)
   222c2:	f7dd ff0d 	bl	e0 <memchr>
   222c6:	9a04      	ldr	r2, [sp, #16]
   222c8:	b9d8      	cbnz	r0, 22302 <_svfiprintf_r+0xe6>
   222ca:	06d0      	lsls	r0, r2, #27
   222cc:	bf44      	itt	mi
   222ce:	2320      	movmi	r3, #32
   222d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   222d4:	0711      	lsls	r1, r2, #28
   222d6:	bf44      	itt	mi
   222d8:	232b      	movmi	r3, #43	; 0x2b
   222da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   222de:	f89a 3000 	ldrb.w	r3, [sl]
   222e2:	2b2a      	cmp	r3, #42	; 0x2a
   222e4:	d015      	beq.n	22312 <_svfiprintf_r+0xf6>
   222e6:	9a07      	ldr	r2, [sp, #28]
   222e8:	4654      	mov	r4, sl
   222ea:	2000      	movs	r0, #0
   222ec:	f04f 0c0a 	mov.w	ip, #10
   222f0:	4621      	mov	r1, r4
   222f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   222f6:	3b30      	subs	r3, #48	; 0x30
   222f8:	2b09      	cmp	r3, #9
   222fa:	d94e      	bls.n	2239a <_svfiprintf_r+0x17e>
   222fc:	b1b0      	cbz	r0, 2232c <_svfiprintf_r+0x110>
   222fe:	9207      	str	r2, [sp, #28]
   22300:	e014      	b.n	2232c <_svfiprintf_r+0x110>
   22302:	eba0 0308 	sub.w	r3, r0, r8
   22306:	fa09 f303 	lsl.w	r3, r9, r3
   2230a:	4313      	orrs	r3, r2
   2230c:	9304      	str	r3, [sp, #16]
   2230e:	46a2      	mov	sl, r4
   22310:	e7d2      	b.n	222b8 <_svfiprintf_r+0x9c>
   22312:	9b03      	ldr	r3, [sp, #12]
   22314:	1d19      	adds	r1, r3, #4
   22316:	681b      	ldr	r3, [r3, #0]
   22318:	9103      	str	r1, [sp, #12]
   2231a:	2b00      	cmp	r3, #0
   2231c:	bfbb      	ittet	lt
   2231e:	425b      	neglt	r3, r3
   22320:	f042 0202 	orrlt.w	r2, r2, #2
   22324:	9307      	strge	r3, [sp, #28]
   22326:	9307      	strlt	r3, [sp, #28]
   22328:	bfb8      	it	lt
   2232a:	9204      	strlt	r2, [sp, #16]
   2232c:	7823      	ldrb	r3, [r4, #0]
   2232e:	2b2e      	cmp	r3, #46	; 0x2e
   22330:	d10c      	bne.n	2234c <_svfiprintf_r+0x130>
   22332:	7863      	ldrb	r3, [r4, #1]
   22334:	2b2a      	cmp	r3, #42	; 0x2a
   22336:	d135      	bne.n	223a4 <_svfiprintf_r+0x188>
   22338:	9b03      	ldr	r3, [sp, #12]
   2233a:	1d1a      	adds	r2, r3, #4
   2233c:	681b      	ldr	r3, [r3, #0]
   2233e:	9203      	str	r2, [sp, #12]
   22340:	2b00      	cmp	r3, #0
   22342:	bfb8      	it	lt
   22344:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   22348:	3402      	adds	r4, #2
   2234a:	9305      	str	r3, [sp, #20]
   2234c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 22418 <_svfiprintf_r+0x1fc>
   22350:	7821      	ldrb	r1, [r4, #0]
   22352:	2203      	movs	r2, #3
   22354:	4650      	mov	r0, sl
   22356:	f7dd fec3 	bl	e0 <memchr>
   2235a:	b140      	cbz	r0, 2236e <_svfiprintf_r+0x152>
   2235c:	2340      	movs	r3, #64	; 0x40
   2235e:	eba0 000a 	sub.w	r0, r0, sl
   22362:	fa03 f000 	lsl.w	r0, r3, r0
   22366:	9b04      	ldr	r3, [sp, #16]
   22368:	4303      	orrs	r3, r0
   2236a:	3401      	adds	r4, #1
   2236c:	9304      	str	r3, [sp, #16]
   2236e:	f814 1b01 	ldrb.w	r1, [r4], #1
   22372:	4826      	ldr	r0, [pc, #152]	; (2240c <_svfiprintf_r+0x1f0>)
   22374:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   22378:	2206      	movs	r2, #6
   2237a:	f7dd feb1 	bl	e0 <memchr>
   2237e:	2800      	cmp	r0, #0
   22380:	d038      	beq.n	223f4 <_svfiprintf_r+0x1d8>
   22382:	4b23      	ldr	r3, [pc, #140]	; (22410 <_svfiprintf_r+0x1f4>)
   22384:	bb1b      	cbnz	r3, 223ce <_svfiprintf_r+0x1b2>
   22386:	9b03      	ldr	r3, [sp, #12]
   22388:	3307      	adds	r3, #7
   2238a:	f023 0307 	bic.w	r3, r3, #7
   2238e:	3308      	adds	r3, #8
   22390:	9303      	str	r3, [sp, #12]
   22392:	9b09      	ldr	r3, [sp, #36]	; 0x24
   22394:	4433      	add	r3, r6
   22396:	9309      	str	r3, [sp, #36]	; 0x24
   22398:	e767      	b.n	2226a <_svfiprintf_r+0x4e>
   2239a:	fb0c 3202 	mla	r2, ip, r2, r3
   2239e:	460c      	mov	r4, r1
   223a0:	2001      	movs	r0, #1
   223a2:	e7a5      	b.n	222f0 <_svfiprintf_r+0xd4>
   223a4:	2300      	movs	r3, #0
   223a6:	3401      	adds	r4, #1
   223a8:	9305      	str	r3, [sp, #20]
   223aa:	4619      	mov	r1, r3
   223ac:	f04f 0c0a 	mov.w	ip, #10
   223b0:	4620      	mov	r0, r4
   223b2:	f810 2b01 	ldrb.w	r2, [r0], #1
   223b6:	3a30      	subs	r2, #48	; 0x30
   223b8:	2a09      	cmp	r2, #9
   223ba:	d903      	bls.n	223c4 <_svfiprintf_r+0x1a8>
   223bc:	2b00      	cmp	r3, #0
   223be:	d0c5      	beq.n	2234c <_svfiprintf_r+0x130>
   223c0:	9105      	str	r1, [sp, #20]
   223c2:	e7c3      	b.n	2234c <_svfiprintf_r+0x130>
   223c4:	fb0c 2101 	mla	r1, ip, r1, r2
   223c8:	4604      	mov	r4, r0
   223ca:	2301      	movs	r3, #1
   223cc:	e7f0      	b.n	223b0 <_svfiprintf_r+0x194>
   223ce:	ab03      	add	r3, sp, #12
   223d0:	9300      	str	r3, [sp, #0]
   223d2:	462a      	mov	r2, r5
   223d4:	4b0f      	ldr	r3, [pc, #60]	; (22414 <_svfiprintf_r+0x1f8>)
   223d6:	a904      	add	r1, sp, #16
   223d8:	4638      	mov	r0, r7
   223da:	f3af 8000 	nop.w
   223de:	1c42      	adds	r2, r0, #1
   223e0:	4606      	mov	r6, r0
   223e2:	d1d6      	bne.n	22392 <_svfiprintf_r+0x176>
   223e4:	89ab      	ldrh	r3, [r5, #12]
   223e6:	065b      	lsls	r3, r3, #25
   223e8:	f53f af2c 	bmi.w	22244 <_svfiprintf_r+0x28>
   223ec:	9809      	ldr	r0, [sp, #36]	; 0x24
   223ee:	b01d      	add	sp, #116	; 0x74
   223f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223f4:	ab03      	add	r3, sp, #12
   223f6:	9300      	str	r3, [sp, #0]
   223f8:	462a      	mov	r2, r5
   223fa:	4b06      	ldr	r3, [pc, #24]	; (22414 <_svfiprintf_r+0x1f8>)
   223fc:	a904      	add	r1, sp, #16
   223fe:	4638      	mov	r0, r7
   22400:	f000 f984 	bl	2270c <_printf_i>
   22404:	e7eb      	b.n	223de <_svfiprintf_r+0x1c2>
   22406:	bf00      	nop
   22408:	00039652 	.word	0x00039652
   2240c:	0003965c 	.word	0x0003965c
   22410:	00000000 	.word	0x00000000
   22414:	0002b971 	.word	0x0002b971
   22418:	00039658 	.word	0x00039658

0002241c <__ssvfiscanf_r>:
   2241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22420:	460c      	mov	r4, r1
   22422:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   22426:	2100      	movs	r1, #0
   22428:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   2242c:	49b2      	ldr	r1, [pc, #712]	; (226f8 <__ssvfiscanf_r+0x2dc>)
   2242e:	91a0      	str	r1, [sp, #640]	; 0x280
   22430:	f10d 0804 	add.w	r8, sp, #4
   22434:	49b1      	ldr	r1, [pc, #708]	; (226fc <__ssvfiscanf_r+0x2e0>)
   22436:	4fb2      	ldr	r7, [pc, #712]	; (22700 <__ssvfiscanf_r+0x2e4>)
   22438:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 22704 <__ssvfiscanf_r+0x2e8>
   2243c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   22440:	4606      	mov	r6, r0
   22442:	91a1      	str	r1, [sp, #644]	; 0x284
   22444:	9300      	str	r3, [sp, #0]
   22446:	f892 a000 	ldrb.w	sl, [r2]
   2244a:	f1ba 0f00 	cmp.w	sl, #0
   2244e:	f000 8151 	beq.w	226f4 <__ssvfiscanf_r+0x2d8>
   22452:	f81a 3007 	ldrb.w	r3, [sl, r7]
   22456:	f013 0308 	ands.w	r3, r3, #8
   2245a:	f102 0501 	add.w	r5, r2, #1
   2245e:	d019      	beq.n	22494 <__ssvfiscanf_r+0x78>
   22460:	6863      	ldr	r3, [r4, #4]
   22462:	2b00      	cmp	r3, #0
   22464:	dd0f      	ble.n	22486 <__ssvfiscanf_r+0x6a>
   22466:	6823      	ldr	r3, [r4, #0]
   22468:	781a      	ldrb	r2, [r3, #0]
   2246a:	5cba      	ldrb	r2, [r7, r2]
   2246c:	0712      	lsls	r2, r2, #28
   2246e:	d401      	bmi.n	22474 <__ssvfiscanf_r+0x58>
   22470:	462a      	mov	r2, r5
   22472:	e7e8      	b.n	22446 <__ssvfiscanf_r+0x2a>
   22474:	9a45      	ldr	r2, [sp, #276]	; 0x114
   22476:	3201      	adds	r2, #1
   22478:	9245      	str	r2, [sp, #276]	; 0x114
   2247a:	6862      	ldr	r2, [r4, #4]
   2247c:	3301      	adds	r3, #1
   2247e:	3a01      	subs	r2, #1
   22480:	6062      	str	r2, [r4, #4]
   22482:	6023      	str	r3, [r4, #0]
   22484:	e7ec      	b.n	22460 <__ssvfiscanf_r+0x44>
   22486:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   22488:	4621      	mov	r1, r4
   2248a:	4630      	mov	r0, r6
   2248c:	4798      	blx	r3
   2248e:	2800      	cmp	r0, #0
   22490:	d0e9      	beq.n	22466 <__ssvfiscanf_r+0x4a>
   22492:	e7ed      	b.n	22470 <__ssvfiscanf_r+0x54>
   22494:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   22498:	f040 8083 	bne.w	225a2 <__ssvfiscanf_r+0x186>
   2249c:	9341      	str	r3, [sp, #260]	; 0x104
   2249e:	9343      	str	r3, [sp, #268]	; 0x10c
   224a0:	7853      	ldrb	r3, [r2, #1]
   224a2:	2b2a      	cmp	r3, #42	; 0x2a
   224a4:	bf02      	ittt	eq
   224a6:	2310      	moveq	r3, #16
   224a8:	1c95      	addeq	r5, r2, #2
   224aa:	9341      	streq	r3, [sp, #260]	; 0x104
   224ac:	220a      	movs	r2, #10
   224ae:	46ab      	mov	fp, r5
   224b0:	f81b 1b01 	ldrb.w	r1, [fp], #1
   224b4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   224b8:	2b09      	cmp	r3, #9
   224ba:	d91d      	bls.n	224f8 <__ssvfiscanf_r+0xdc>
   224bc:	4891      	ldr	r0, [pc, #580]	; (22704 <__ssvfiscanf_r+0x2e8>)
   224be:	2203      	movs	r2, #3
   224c0:	f7dd fe0e 	bl	e0 <memchr>
   224c4:	b140      	cbz	r0, 224d8 <__ssvfiscanf_r+0xbc>
   224c6:	2301      	movs	r3, #1
   224c8:	eba0 0009 	sub.w	r0, r0, r9
   224cc:	fa03 f000 	lsl.w	r0, r3, r0
   224d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
   224d2:	4318      	orrs	r0, r3
   224d4:	9041      	str	r0, [sp, #260]	; 0x104
   224d6:	465d      	mov	r5, fp
   224d8:	f815 3b01 	ldrb.w	r3, [r5], #1
   224dc:	2b78      	cmp	r3, #120	; 0x78
   224de:	d806      	bhi.n	224ee <__ssvfiscanf_r+0xd2>
   224e0:	2b57      	cmp	r3, #87	; 0x57
   224e2:	d810      	bhi.n	22506 <__ssvfiscanf_r+0xea>
   224e4:	2b25      	cmp	r3, #37	; 0x25
   224e6:	d05c      	beq.n	225a2 <__ssvfiscanf_r+0x186>
   224e8:	d856      	bhi.n	22598 <__ssvfiscanf_r+0x17c>
   224ea:	2b00      	cmp	r3, #0
   224ec:	d074      	beq.n	225d8 <__ssvfiscanf_r+0x1bc>
   224ee:	2303      	movs	r3, #3
   224f0:	9347      	str	r3, [sp, #284]	; 0x11c
   224f2:	230a      	movs	r3, #10
   224f4:	9342      	str	r3, [sp, #264]	; 0x108
   224f6:	e081      	b.n	225fc <__ssvfiscanf_r+0x1e0>
   224f8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   224fa:	fb02 1303 	mla	r3, r2, r3, r1
   224fe:	3b30      	subs	r3, #48	; 0x30
   22500:	9343      	str	r3, [sp, #268]	; 0x10c
   22502:	465d      	mov	r5, fp
   22504:	e7d3      	b.n	224ae <__ssvfiscanf_r+0x92>
   22506:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   2250a:	2a20      	cmp	r2, #32
   2250c:	d8ef      	bhi.n	224ee <__ssvfiscanf_r+0xd2>
   2250e:	a101      	add	r1, pc, #4	; (adr r1, 22514 <__ssvfiscanf_r+0xf8>)
   22510:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   22514:	000225e7 	.word	0x000225e7
   22518:	000224ef 	.word	0x000224ef
   2251c:	000224ef 	.word	0x000224ef
   22520:	00022645 	.word	0x00022645
   22524:	000224ef 	.word	0x000224ef
   22528:	000224ef 	.word	0x000224ef
   2252c:	000224ef 	.word	0x000224ef
   22530:	000224ef 	.word	0x000224ef
   22534:	000224ef 	.word	0x000224ef
   22538:	000224ef 	.word	0x000224ef
   2253c:	000224ef 	.word	0x000224ef
   22540:	0002265b 	.word	0x0002265b
   22544:	00022631 	.word	0x00022631
   22548:	0002259f 	.word	0x0002259f
   2254c:	0002259f 	.word	0x0002259f
   22550:	0002259f 	.word	0x0002259f
   22554:	000224ef 	.word	0x000224ef
   22558:	00022635 	.word	0x00022635
   2255c:	000224ef 	.word	0x000224ef
   22560:	000224ef 	.word	0x000224ef
   22564:	000224ef 	.word	0x000224ef
   22568:	000224ef 	.word	0x000224ef
   2256c:	0002266b 	.word	0x0002266b
   22570:	0002263d 	.word	0x0002263d
   22574:	000225df 	.word	0x000225df
   22578:	000224ef 	.word	0x000224ef
   2257c:	000224ef 	.word	0x000224ef
   22580:	00022667 	.word	0x00022667
   22584:	000224ef 	.word	0x000224ef
   22588:	00022631 	.word	0x00022631
   2258c:	000224ef 	.word	0x000224ef
   22590:	000224ef 	.word	0x000224ef
   22594:	000225e7 	.word	0x000225e7
   22598:	3b45      	subs	r3, #69	; 0x45
   2259a:	2b02      	cmp	r3, #2
   2259c:	d8a7      	bhi.n	224ee <__ssvfiscanf_r+0xd2>
   2259e:	2305      	movs	r3, #5
   225a0:	e02b      	b.n	225fa <__ssvfiscanf_r+0x1de>
   225a2:	6863      	ldr	r3, [r4, #4]
   225a4:	2b00      	cmp	r3, #0
   225a6:	dd0d      	ble.n	225c4 <__ssvfiscanf_r+0x1a8>
   225a8:	6823      	ldr	r3, [r4, #0]
   225aa:	781a      	ldrb	r2, [r3, #0]
   225ac:	4552      	cmp	r2, sl
   225ae:	f040 80a1 	bne.w	226f4 <__ssvfiscanf_r+0x2d8>
   225b2:	3301      	adds	r3, #1
   225b4:	6862      	ldr	r2, [r4, #4]
   225b6:	6023      	str	r3, [r4, #0]
   225b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
   225ba:	3a01      	subs	r2, #1
   225bc:	3301      	adds	r3, #1
   225be:	6062      	str	r2, [r4, #4]
   225c0:	9345      	str	r3, [sp, #276]	; 0x114
   225c2:	e755      	b.n	22470 <__ssvfiscanf_r+0x54>
   225c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   225c6:	4621      	mov	r1, r4
   225c8:	4630      	mov	r0, r6
   225ca:	4798      	blx	r3
   225cc:	2800      	cmp	r0, #0
   225ce:	d0eb      	beq.n	225a8 <__ssvfiscanf_r+0x18c>
   225d0:	9844      	ldr	r0, [sp, #272]	; 0x110
   225d2:	2800      	cmp	r0, #0
   225d4:	f040 8084 	bne.w	226e0 <__ssvfiscanf_r+0x2c4>
   225d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   225dc:	e086      	b.n	226ec <__ssvfiscanf_r+0x2d0>
   225de:	9a41      	ldr	r2, [sp, #260]	; 0x104
   225e0:	f042 0220 	orr.w	r2, r2, #32
   225e4:	9241      	str	r2, [sp, #260]	; 0x104
   225e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
   225e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   225ec:	9241      	str	r2, [sp, #260]	; 0x104
   225ee:	2210      	movs	r2, #16
   225f0:	2b6f      	cmp	r3, #111	; 0x6f
   225f2:	9242      	str	r2, [sp, #264]	; 0x108
   225f4:	bf34      	ite	cc
   225f6:	2303      	movcc	r3, #3
   225f8:	2304      	movcs	r3, #4
   225fa:	9347      	str	r3, [sp, #284]	; 0x11c
   225fc:	6863      	ldr	r3, [r4, #4]
   225fe:	2b00      	cmp	r3, #0
   22600:	dd41      	ble.n	22686 <__ssvfiscanf_r+0x26a>
   22602:	9b41      	ldr	r3, [sp, #260]	; 0x104
   22604:	0659      	lsls	r1, r3, #25
   22606:	d404      	bmi.n	22612 <__ssvfiscanf_r+0x1f6>
   22608:	6823      	ldr	r3, [r4, #0]
   2260a:	781a      	ldrb	r2, [r3, #0]
   2260c:	5cba      	ldrb	r2, [r7, r2]
   2260e:	0712      	lsls	r2, r2, #28
   22610:	d440      	bmi.n	22694 <__ssvfiscanf_r+0x278>
   22612:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   22614:	2b02      	cmp	r3, #2
   22616:	dc4f      	bgt.n	226b8 <__ssvfiscanf_r+0x29c>
   22618:	466b      	mov	r3, sp
   2261a:	4622      	mov	r2, r4
   2261c:	a941      	add	r1, sp, #260	; 0x104
   2261e:	4630      	mov	r0, r6
   22620:	f000 f99a 	bl	22958 <_scanf_chars>
   22624:	2801      	cmp	r0, #1
   22626:	d065      	beq.n	226f4 <__ssvfiscanf_r+0x2d8>
   22628:	2802      	cmp	r0, #2
   2262a:	f47f af21 	bne.w	22470 <__ssvfiscanf_r+0x54>
   2262e:	e7cf      	b.n	225d0 <__ssvfiscanf_r+0x1b4>
   22630:	220a      	movs	r2, #10
   22632:	e7dd      	b.n	225f0 <__ssvfiscanf_r+0x1d4>
   22634:	2300      	movs	r3, #0
   22636:	9342      	str	r3, [sp, #264]	; 0x108
   22638:	2303      	movs	r3, #3
   2263a:	e7de      	b.n	225fa <__ssvfiscanf_r+0x1de>
   2263c:	2308      	movs	r3, #8
   2263e:	9342      	str	r3, [sp, #264]	; 0x108
   22640:	2304      	movs	r3, #4
   22642:	e7da      	b.n	225fa <__ssvfiscanf_r+0x1de>
   22644:	4629      	mov	r1, r5
   22646:	4640      	mov	r0, r8
   22648:	f009 fab4 	bl	2bbb4 <__sccl>
   2264c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2264e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22652:	9341      	str	r3, [sp, #260]	; 0x104
   22654:	4605      	mov	r5, r0
   22656:	2301      	movs	r3, #1
   22658:	e7cf      	b.n	225fa <__ssvfiscanf_r+0x1de>
   2265a:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2265c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22660:	9341      	str	r3, [sp, #260]	; 0x104
   22662:	2300      	movs	r3, #0
   22664:	e7c9      	b.n	225fa <__ssvfiscanf_r+0x1de>
   22666:	2302      	movs	r3, #2
   22668:	e7c7      	b.n	225fa <__ssvfiscanf_r+0x1de>
   2266a:	9841      	ldr	r0, [sp, #260]	; 0x104
   2266c:	06c3      	lsls	r3, r0, #27
   2266e:	f53f aeff 	bmi.w	22470 <__ssvfiscanf_r+0x54>
   22672:	9b00      	ldr	r3, [sp, #0]
   22674:	9a45      	ldr	r2, [sp, #276]	; 0x114
   22676:	1d19      	adds	r1, r3, #4
   22678:	9100      	str	r1, [sp, #0]
   2267a:	681b      	ldr	r3, [r3, #0]
   2267c:	07c0      	lsls	r0, r0, #31
   2267e:	bf4c      	ite	mi
   22680:	801a      	strhmi	r2, [r3, #0]
   22682:	601a      	strpl	r2, [r3, #0]
   22684:	e6f4      	b.n	22470 <__ssvfiscanf_r+0x54>
   22686:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   22688:	4621      	mov	r1, r4
   2268a:	4630      	mov	r0, r6
   2268c:	4798      	blx	r3
   2268e:	2800      	cmp	r0, #0
   22690:	d0b7      	beq.n	22602 <__ssvfiscanf_r+0x1e6>
   22692:	e79d      	b.n	225d0 <__ssvfiscanf_r+0x1b4>
   22694:	9a45      	ldr	r2, [sp, #276]	; 0x114
   22696:	3201      	adds	r2, #1
   22698:	9245      	str	r2, [sp, #276]	; 0x114
   2269a:	6862      	ldr	r2, [r4, #4]
   2269c:	3a01      	subs	r2, #1
   2269e:	2a00      	cmp	r2, #0
   226a0:	6062      	str	r2, [r4, #4]
   226a2:	dd02      	ble.n	226aa <__ssvfiscanf_r+0x28e>
   226a4:	3301      	adds	r3, #1
   226a6:	6023      	str	r3, [r4, #0]
   226a8:	e7ae      	b.n	22608 <__ssvfiscanf_r+0x1ec>
   226aa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   226ac:	4621      	mov	r1, r4
   226ae:	4630      	mov	r0, r6
   226b0:	4798      	blx	r3
   226b2:	2800      	cmp	r0, #0
   226b4:	d0a8      	beq.n	22608 <__ssvfiscanf_r+0x1ec>
   226b6:	e78b      	b.n	225d0 <__ssvfiscanf_r+0x1b4>
   226b8:	2b04      	cmp	r3, #4
   226ba:	dc06      	bgt.n	226ca <__ssvfiscanf_r+0x2ae>
   226bc:	466b      	mov	r3, sp
   226be:	4622      	mov	r2, r4
   226c0:	a941      	add	r1, sp, #260	; 0x104
   226c2:	4630      	mov	r0, r6
   226c4:	f000 f9a0 	bl	22a08 <_scanf_i>
   226c8:	e7ac      	b.n	22624 <__ssvfiscanf_r+0x208>
   226ca:	4b0f      	ldr	r3, [pc, #60]	; (22708 <__ssvfiscanf_r+0x2ec>)
   226cc:	2b00      	cmp	r3, #0
   226ce:	f43f aecf 	beq.w	22470 <__ssvfiscanf_r+0x54>
   226d2:	466b      	mov	r3, sp
   226d4:	4622      	mov	r2, r4
   226d6:	a941      	add	r1, sp, #260	; 0x104
   226d8:	4630      	mov	r0, r6
   226da:	f3af 8000 	nop.w
   226de:	e7a1      	b.n	22624 <__ssvfiscanf_r+0x208>
   226e0:	89a3      	ldrh	r3, [r4, #12]
   226e2:	f013 0f40 	tst.w	r3, #64	; 0x40
   226e6:	bf18      	it	ne
   226e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   226ec:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   226f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226f4:	9844      	ldr	r0, [sp, #272]	; 0x110
   226f6:	e7f9      	b.n	226ec <__ssvfiscanf_r+0x2d0>
   226f8:	0002ba27 	.word	0x0002ba27
   226fc:	0002baa1 	.word	0x0002baa1
   22700:	00039397 	.word	0x00039397
   22704:	00039658 	.word	0x00039658
   22708:	00000000 	.word	0x00000000

0002270c <_printf_i>:
   2270c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   22710:	460c      	mov	r4, r1
   22712:	4691      	mov	r9, r2
   22714:	7e27      	ldrb	r7, [r4, #24]
   22716:	990c      	ldr	r1, [sp, #48]	; 0x30
   22718:	2f78      	cmp	r7, #120	; 0x78
   2271a:	4680      	mov	r8, r0
   2271c:	469a      	mov	sl, r3
   2271e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   22722:	d807      	bhi.n	22734 <_printf_i+0x28>
   22724:	2f62      	cmp	r7, #98	; 0x62
   22726:	d80a      	bhi.n	2273e <_printf_i+0x32>
   22728:	2f00      	cmp	r7, #0
   2272a:	f000 80d8 	beq.w	228de <_printf_i+0x1d2>
   2272e:	2f58      	cmp	r7, #88	; 0x58
   22730:	f000 80a3 	beq.w	2287a <_printf_i+0x16e>
   22734:	f104 0642 	add.w	r6, r4, #66	; 0x42
   22738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2273c:	e03a      	b.n	227b4 <_printf_i+0xa8>
   2273e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   22742:	2b15      	cmp	r3, #21
   22744:	d8f6      	bhi.n	22734 <_printf_i+0x28>
   22746:	a001      	add	r0, pc, #4	; (adr r0, 2274c <_printf_i+0x40>)
   22748:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   2274c:	000227a5 	.word	0x000227a5
   22750:	000227b9 	.word	0x000227b9
   22754:	00022735 	.word	0x00022735
   22758:	00022735 	.word	0x00022735
   2275c:	00022735 	.word	0x00022735
   22760:	00022735 	.word	0x00022735
   22764:	000227b9 	.word	0x000227b9
   22768:	00022735 	.word	0x00022735
   2276c:	00022735 	.word	0x00022735
   22770:	00022735 	.word	0x00022735
   22774:	00022735 	.word	0x00022735
   22778:	000228c5 	.word	0x000228c5
   2277c:	000227e9 	.word	0x000227e9
   22780:	000228a7 	.word	0x000228a7
   22784:	00022735 	.word	0x00022735
   22788:	00022735 	.word	0x00022735
   2278c:	000228e7 	.word	0x000228e7
   22790:	00022735 	.word	0x00022735
   22794:	000227e9 	.word	0x000227e9
   22798:	00022735 	.word	0x00022735
   2279c:	00022735 	.word	0x00022735
   227a0:	000228af 	.word	0x000228af
   227a4:	680b      	ldr	r3, [r1, #0]
   227a6:	1d1a      	adds	r2, r3, #4
   227a8:	681b      	ldr	r3, [r3, #0]
   227aa:	600a      	str	r2, [r1, #0]
   227ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
   227b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   227b4:	2301      	movs	r3, #1
   227b6:	e0a3      	b.n	22900 <_printf_i+0x1f4>
   227b8:	6825      	ldr	r5, [r4, #0]
   227ba:	6808      	ldr	r0, [r1, #0]
   227bc:	062e      	lsls	r6, r5, #24
   227be:	f100 0304 	add.w	r3, r0, #4
   227c2:	d50a      	bpl.n	227da <_printf_i+0xce>
   227c4:	6805      	ldr	r5, [r0, #0]
   227c6:	600b      	str	r3, [r1, #0]
   227c8:	2d00      	cmp	r5, #0
   227ca:	da03      	bge.n	227d4 <_printf_i+0xc8>
   227cc:	232d      	movs	r3, #45	; 0x2d
   227ce:	426d      	negs	r5, r5
   227d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   227d4:	485e      	ldr	r0, [pc, #376]	; (22950 <_printf_i+0x244>)
   227d6:	230a      	movs	r3, #10
   227d8:	e019      	b.n	2280e <_printf_i+0x102>
   227da:	f015 0f40 	tst.w	r5, #64	; 0x40
   227de:	6805      	ldr	r5, [r0, #0]
   227e0:	600b      	str	r3, [r1, #0]
   227e2:	bf18      	it	ne
   227e4:	b22d      	sxthne	r5, r5
   227e6:	e7ef      	b.n	227c8 <_printf_i+0xbc>
   227e8:	680b      	ldr	r3, [r1, #0]
   227ea:	6825      	ldr	r5, [r4, #0]
   227ec:	1d18      	adds	r0, r3, #4
   227ee:	6008      	str	r0, [r1, #0]
   227f0:	0628      	lsls	r0, r5, #24
   227f2:	d501      	bpl.n	227f8 <_printf_i+0xec>
   227f4:	681d      	ldr	r5, [r3, #0]
   227f6:	e002      	b.n	227fe <_printf_i+0xf2>
   227f8:	0669      	lsls	r1, r5, #25
   227fa:	d5fb      	bpl.n	227f4 <_printf_i+0xe8>
   227fc:	881d      	ldrh	r5, [r3, #0]
   227fe:	4854      	ldr	r0, [pc, #336]	; (22950 <_printf_i+0x244>)
   22800:	2f6f      	cmp	r7, #111	; 0x6f
   22802:	bf0c      	ite	eq
   22804:	2308      	moveq	r3, #8
   22806:	230a      	movne	r3, #10
   22808:	2100      	movs	r1, #0
   2280a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2280e:	6866      	ldr	r6, [r4, #4]
   22810:	60a6      	str	r6, [r4, #8]
   22812:	2e00      	cmp	r6, #0
   22814:	bfa2      	ittt	ge
   22816:	6821      	ldrge	r1, [r4, #0]
   22818:	f021 0104 	bicge.w	r1, r1, #4
   2281c:	6021      	strge	r1, [r4, #0]
   2281e:	b90d      	cbnz	r5, 22824 <_printf_i+0x118>
   22820:	2e00      	cmp	r6, #0
   22822:	d04d      	beq.n	228c0 <_printf_i+0x1b4>
   22824:	4616      	mov	r6, r2
   22826:	fbb5 f1f3 	udiv	r1, r5, r3
   2282a:	fb03 5711 	mls	r7, r3, r1, r5
   2282e:	5dc7      	ldrb	r7, [r0, r7]
   22830:	f806 7d01 	strb.w	r7, [r6, #-1]!
   22834:	462f      	mov	r7, r5
   22836:	42bb      	cmp	r3, r7
   22838:	460d      	mov	r5, r1
   2283a:	d9f4      	bls.n	22826 <_printf_i+0x11a>
   2283c:	2b08      	cmp	r3, #8
   2283e:	d10b      	bne.n	22858 <_printf_i+0x14c>
   22840:	6823      	ldr	r3, [r4, #0]
   22842:	07df      	lsls	r7, r3, #31
   22844:	d508      	bpl.n	22858 <_printf_i+0x14c>
   22846:	6923      	ldr	r3, [r4, #16]
   22848:	6861      	ldr	r1, [r4, #4]
   2284a:	4299      	cmp	r1, r3
   2284c:	bfde      	ittt	le
   2284e:	2330      	movle	r3, #48	; 0x30
   22850:	f806 3c01 	strble.w	r3, [r6, #-1]
   22854:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   22858:	1b92      	subs	r2, r2, r6
   2285a:	6122      	str	r2, [r4, #16]
   2285c:	f8cd a000 	str.w	sl, [sp]
   22860:	464b      	mov	r3, r9
   22862:	aa03      	add	r2, sp, #12
   22864:	4621      	mov	r1, r4
   22866:	4640      	mov	r0, r8
   22868:	f009 f937 	bl	2bada <_printf_common>
   2286c:	3001      	adds	r0, #1
   2286e:	d14c      	bne.n	2290a <_printf_i+0x1fe>
   22870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22874:	b004      	add	sp, #16
   22876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2287a:	4835      	ldr	r0, [pc, #212]	; (22950 <_printf_i+0x244>)
   2287c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   22880:	6823      	ldr	r3, [r4, #0]
   22882:	680e      	ldr	r6, [r1, #0]
   22884:	061f      	lsls	r7, r3, #24
   22886:	f856 5b04 	ldr.w	r5, [r6], #4
   2288a:	600e      	str	r6, [r1, #0]
   2288c:	d514      	bpl.n	228b8 <_printf_i+0x1ac>
   2288e:	07d9      	lsls	r1, r3, #31
   22890:	bf44      	itt	mi
   22892:	f043 0320 	orrmi.w	r3, r3, #32
   22896:	6023      	strmi	r3, [r4, #0]
   22898:	b91d      	cbnz	r5, 228a2 <_printf_i+0x196>
   2289a:	6823      	ldr	r3, [r4, #0]
   2289c:	f023 0320 	bic.w	r3, r3, #32
   228a0:	6023      	str	r3, [r4, #0]
   228a2:	2310      	movs	r3, #16
   228a4:	e7b0      	b.n	22808 <_printf_i+0xfc>
   228a6:	6823      	ldr	r3, [r4, #0]
   228a8:	f043 0320 	orr.w	r3, r3, #32
   228ac:	6023      	str	r3, [r4, #0]
   228ae:	2378      	movs	r3, #120	; 0x78
   228b0:	4828      	ldr	r0, [pc, #160]	; (22954 <_printf_i+0x248>)
   228b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   228b6:	e7e3      	b.n	22880 <_printf_i+0x174>
   228b8:	065e      	lsls	r6, r3, #25
   228ba:	bf48      	it	mi
   228bc:	b2ad      	uxthmi	r5, r5
   228be:	e7e6      	b.n	2288e <_printf_i+0x182>
   228c0:	4616      	mov	r6, r2
   228c2:	e7bb      	b.n	2283c <_printf_i+0x130>
   228c4:	680b      	ldr	r3, [r1, #0]
   228c6:	6826      	ldr	r6, [r4, #0]
   228c8:	6960      	ldr	r0, [r4, #20]
   228ca:	1d1d      	adds	r5, r3, #4
   228cc:	600d      	str	r5, [r1, #0]
   228ce:	0635      	lsls	r5, r6, #24
   228d0:	681b      	ldr	r3, [r3, #0]
   228d2:	d501      	bpl.n	228d8 <_printf_i+0x1cc>
   228d4:	6018      	str	r0, [r3, #0]
   228d6:	e002      	b.n	228de <_printf_i+0x1d2>
   228d8:	0671      	lsls	r1, r6, #25
   228da:	d5fb      	bpl.n	228d4 <_printf_i+0x1c8>
   228dc:	8018      	strh	r0, [r3, #0]
   228de:	2300      	movs	r3, #0
   228e0:	6123      	str	r3, [r4, #16]
   228e2:	4616      	mov	r6, r2
   228e4:	e7ba      	b.n	2285c <_printf_i+0x150>
   228e6:	680b      	ldr	r3, [r1, #0]
   228e8:	1d1a      	adds	r2, r3, #4
   228ea:	600a      	str	r2, [r1, #0]
   228ec:	681e      	ldr	r6, [r3, #0]
   228ee:	6862      	ldr	r2, [r4, #4]
   228f0:	2100      	movs	r1, #0
   228f2:	4630      	mov	r0, r6
   228f4:	f7dd fbf4 	bl	e0 <memchr>
   228f8:	b108      	cbz	r0, 228fe <_printf_i+0x1f2>
   228fa:	1b80      	subs	r0, r0, r6
   228fc:	6060      	str	r0, [r4, #4]
   228fe:	6863      	ldr	r3, [r4, #4]
   22900:	6123      	str	r3, [r4, #16]
   22902:	2300      	movs	r3, #0
   22904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   22908:	e7a8      	b.n	2285c <_printf_i+0x150>
   2290a:	6923      	ldr	r3, [r4, #16]
   2290c:	4632      	mov	r2, r6
   2290e:	4649      	mov	r1, r9
   22910:	4640      	mov	r0, r8
   22912:	47d0      	blx	sl
   22914:	3001      	adds	r0, #1
   22916:	d0ab      	beq.n	22870 <_printf_i+0x164>
   22918:	6823      	ldr	r3, [r4, #0]
   2291a:	079b      	lsls	r3, r3, #30
   2291c:	d413      	bmi.n	22946 <_printf_i+0x23a>
   2291e:	68e0      	ldr	r0, [r4, #12]
   22920:	9b03      	ldr	r3, [sp, #12]
   22922:	4298      	cmp	r0, r3
   22924:	bfb8      	it	lt
   22926:	4618      	movlt	r0, r3
   22928:	e7a4      	b.n	22874 <_printf_i+0x168>
   2292a:	2301      	movs	r3, #1
   2292c:	4632      	mov	r2, r6
   2292e:	4649      	mov	r1, r9
   22930:	4640      	mov	r0, r8
   22932:	47d0      	blx	sl
   22934:	3001      	adds	r0, #1
   22936:	d09b      	beq.n	22870 <_printf_i+0x164>
   22938:	3501      	adds	r5, #1
   2293a:	68e3      	ldr	r3, [r4, #12]
   2293c:	9903      	ldr	r1, [sp, #12]
   2293e:	1a5b      	subs	r3, r3, r1
   22940:	42ab      	cmp	r3, r5
   22942:	dcf2      	bgt.n	2292a <_printf_i+0x21e>
   22944:	e7eb      	b.n	2291e <_printf_i+0x212>
   22946:	2500      	movs	r5, #0
   22948:	f104 0619 	add.w	r6, r4, #25
   2294c:	e7f5      	b.n	2293a <_printf_i+0x22e>
   2294e:	bf00      	nop
   22950:	00039663 	.word	0x00039663
   22954:	00039674 	.word	0x00039674

00022958 <_scanf_chars>:
   22958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2295c:	4615      	mov	r5, r2
   2295e:	688a      	ldr	r2, [r1, #8]
   22960:	4680      	mov	r8, r0
   22962:	460c      	mov	r4, r1
   22964:	b932      	cbnz	r2, 22974 <_scanf_chars+0x1c>
   22966:	698a      	ldr	r2, [r1, #24]
   22968:	2a00      	cmp	r2, #0
   2296a:	bf0c      	ite	eq
   2296c:	2201      	moveq	r2, #1
   2296e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   22972:	608a      	str	r2, [r1, #8]
   22974:	6822      	ldr	r2, [r4, #0]
   22976:	f8df 908c 	ldr.w	r9, [pc, #140]	; 22a04 <_scanf_chars+0xac>
   2297a:	06d1      	lsls	r1, r2, #27
   2297c:	bf5f      	itttt	pl
   2297e:	681a      	ldrpl	r2, [r3, #0]
   22980:	1d11      	addpl	r1, r2, #4
   22982:	6019      	strpl	r1, [r3, #0]
   22984:	6816      	ldrpl	r6, [r2, #0]
   22986:	2700      	movs	r7, #0
   22988:	69a0      	ldr	r0, [r4, #24]
   2298a:	b188      	cbz	r0, 229b0 <_scanf_chars+0x58>
   2298c:	2801      	cmp	r0, #1
   2298e:	d107      	bne.n	229a0 <_scanf_chars+0x48>
   22990:	682b      	ldr	r3, [r5, #0]
   22992:	781a      	ldrb	r2, [r3, #0]
   22994:	6963      	ldr	r3, [r4, #20]
   22996:	5c9b      	ldrb	r3, [r3, r2]
   22998:	b953      	cbnz	r3, 229b0 <_scanf_chars+0x58>
   2299a:	bb27      	cbnz	r7, 229e6 <_scanf_chars+0x8e>
   2299c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   229a0:	2802      	cmp	r0, #2
   229a2:	d120      	bne.n	229e6 <_scanf_chars+0x8e>
   229a4:	682b      	ldr	r3, [r5, #0]
   229a6:	781b      	ldrb	r3, [r3, #0]
   229a8:	f813 3009 	ldrb.w	r3, [r3, r9]
   229ac:	071b      	lsls	r3, r3, #28
   229ae:	d41a      	bmi.n	229e6 <_scanf_chars+0x8e>
   229b0:	6823      	ldr	r3, [r4, #0]
   229b2:	06da      	lsls	r2, r3, #27
   229b4:	bf5e      	ittt	pl
   229b6:	682b      	ldrpl	r3, [r5, #0]
   229b8:	781b      	ldrbpl	r3, [r3, #0]
   229ba:	f806 3b01 	strbpl.w	r3, [r6], #1
   229be:	682a      	ldr	r2, [r5, #0]
   229c0:	686b      	ldr	r3, [r5, #4]
   229c2:	3201      	adds	r2, #1
   229c4:	602a      	str	r2, [r5, #0]
   229c6:	68a2      	ldr	r2, [r4, #8]
   229c8:	3b01      	subs	r3, #1
   229ca:	3a01      	subs	r2, #1
   229cc:	606b      	str	r3, [r5, #4]
   229ce:	3701      	adds	r7, #1
   229d0:	60a2      	str	r2, [r4, #8]
   229d2:	b142      	cbz	r2, 229e6 <_scanf_chars+0x8e>
   229d4:	2b00      	cmp	r3, #0
   229d6:	dcd7      	bgt.n	22988 <_scanf_chars+0x30>
   229d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   229dc:	4629      	mov	r1, r5
   229de:	4640      	mov	r0, r8
   229e0:	4798      	blx	r3
   229e2:	2800      	cmp	r0, #0
   229e4:	d0d0      	beq.n	22988 <_scanf_chars+0x30>
   229e6:	6823      	ldr	r3, [r4, #0]
   229e8:	f013 0310 	ands.w	r3, r3, #16
   229ec:	d105      	bne.n	229fa <_scanf_chars+0xa2>
   229ee:	68e2      	ldr	r2, [r4, #12]
   229f0:	3201      	adds	r2, #1
   229f2:	60e2      	str	r2, [r4, #12]
   229f4:	69a2      	ldr	r2, [r4, #24]
   229f6:	b102      	cbz	r2, 229fa <_scanf_chars+0xa2>
   229f8:	7033      	strb	r3, [r6, #0]
   229fa:	6923      	ldr	r3, [r4, #16]
   229fc:	441f      	add	r7, r3
   229fe:	6127      	str	r7, [r4, #16]
   22a00:	2000      	movs	r0, #0
   22a02:	e7cb      	b.n	2299c <_scanf_chars+0x44>
   22a04:	00039397 	.word	0x00039397

00022a08 <_scanf_i>:
   22a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a0c:	4698      	mov	r8, r3
   22a0e:	4b74      	ldr	r3, [pc, #464]	; (22be0 <_scanf_i+0x1d8>)
   22a10:	460c      	mov	r4, r1
   22a12:	4682      	mov	sl, r0
   22a14:	4616      	mov	r6, r2
   22a16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   22a1a:	b087      	sub	sp, #28
   22a1c:	ab03      	add	r3, sp, #12
   22a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   22a22:	4b70      	ldr	r3, [pc, #448]	; (22be4 <_scanf_i+0x1dc>)
   22a24:	69a1      	ldr	r1, [r4, #24]
   22a26:	4a70      	ldr	r2, [pc, #448]	; (22be8 <_scanf_i+0x1e0>)
   22a28:	2903      	cmp	r1, #3
   22a2a:	bf18      	it	ne
   22a2c:	461a      	movne	r2, r3
   22a2e:	68a3      	ldr	r3, [r4, #8]
   22a30:	9201      	str	r2, [sp, #4]
   22a32:	1e5a      	subs	r2, r3, #1
   22a34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   22a38:	bf88      	it	hi
   22a3a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   22a3e:	4627      	mov	r7, r4
   22a40:	bf82      	ittt	hi
   22a42:	eb03 0905 	addhi.w	r9, r3, r5
   22a46:	f240 135d 	movwhi	r3, #349	; 0x15d
   22a4a:	60a3      	strhi	r3, [r4, #8]
   22a4c:	f857 3b1c 	ldr.w	r3, [r7], #28
   22a50:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   22a54:	bf98      	it	ls
   22a56:	f04f 0900 	movls.w	r9, #0
   22a5a:	6023      	str	r3, [r4, #0]
   22a5c:	463d      	mov	r5, r7
   22a5e:	f04f 0b00 	mov.w	fp, #0
   22a62:	6831      	ldr	r1, [r6, #0]
   22a64:	ab03      	add	r3, sp, #12
   22a66:	7809      	ldrb	r1, [r1, #0]
   22a68:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   22a6c:	2202      	movs	r2, #2
   22a6e:	f7dd fb37 	bl	e0 <memchr>
   22a72:	b328      	cbz	r0, 22ac0 <_scanf_i+0xb8>
   22a74:	f1bb 0f01 	cmp.w	fp, #1
   22a78:	d159      	bne.n	22b2e <_scanf_i+0x126>
   22a7a:	6862      	ldr	r2, [r4, #4]
   22a7c:	b92a      	cbnz	r2, 22a8a <_scanf_i+0x82>
   22a7e:	6822      	ldr	r2, [r4, #0]
   22a80:	2308      	movs	r3, #8
   22a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   22a86:	6063      	str	r3, [r4, #4]
   22a88:	6022      	str	r2, [r4, #0]
   22a8a:	6822      	ldr	r2, [r4, #0]
   22a8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   22a90:	6022      	str	r2, [r4, #0]
   22a92:	68a2      	ldr	r2, [r4, #8]
   22a94:	1e51      	subs	r1, r2, #1
   22a96:	60a1      	str	r1, [r4, #8]
   22a98:	b192      	cbz	r2, 22ac0 <_scanf_i+0xb8>
   22a9a:	6832      	ldr	r2, [r6, #0]
   22a9c:	1c51      	adds	r1, r2, #1
   22a9e:	6031      	str	r1, [r6, #0]
   22aa0:	7812      	ldrb	r2, [r2, #0]
   22aa2:	f805 2b01 	strb.w	r2, [r5], #1
   22aa6:	6872      	ldr	r2, [r6, #4]
   22aa8:	3a01      	subs	r2, #1
   22aaa:	2a00      	cmp	r2, #0
   22aac:	6072      	str	r2, [r6, #4]
   22aae:	dc07      	bgt.n	22ac0 <_scanf_i+0xb8>
   22ab0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   22ab4:	4631      	mov	r1, r6
   22ab6:	4650      	mov	r0, sl
   22ab8:	4790      	blx	r2
   22aba:	2800      	cmp	r0, #0
   22abc:	f040 8085 	bne.w	22bca <_scanf_i+0x1c2>
   22ac0:	f10b 0b01 	add.w	fp, fp, #1
   22ac4:	f1bb 0f03 	cmp.w	fp, #3
   22ac8:	d1cb      	bne.n	22a62 <_scanf_i+0x5a>
   22aca:	6863      	ldr	r3, [r4, #4]
   22acc:	b90b      	cbnz	r3, 22ad2 <_scanf_i+0xca>
   22ace:	230a      	movs	r3, #10
   22ad0:	6063      	str	r3, [r4, #4]
   22ad2:	6863      	ldr	r3, [r4, #4]
   22ad4:	4945      	ldr	r1, [pc, #276]	; (22bec <_scanf_i+0x1e4>)
   22ad6:	6960      	ldr	r0, [r4, #20]
   22ad8:	1ac9      	subs	r1, r1, r3
   22ada:	f009 f86b 	bl	2bbb4 <__sccl>
   22ade:	f04f 0b00 	mov.w	fp, #0
   22ae2:	68a3      	ldr	r3, [r4, #8]
   22ae4:	6822      	ldr	r2, [r4, #0]
   22ae6:	2b00      	cmp	r3, #0
   22ae8:	d03d      	beq.n	22b66 <_scanf_i+0x15e>
   22aea:	6831      	ldr	r1, [r6, #0]
   22aec:	6960      	ldr	r0, [r4, #20]
   22aee:	f891 c000 	ldrb.w	ip, [r1]
   22af2:	f810 000c 	ldrb.w	r0, [r0, ip]
   22af6:	2800      	cmp	r0, #0
   22af8:	d035      	beq.n	22b66 <_scanf_i+0x15e>
   22afa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   22afe:	d124      	bne.n	22b4a <_scanf_i+0x142>
   22b00:	0510      	lsls	r0, r2, #20
   22b02:	d522      	bpl.n	22b4a <_scanf_i+0x142>
   22b04:	f10b 0b01 	add.w	fp, fp, #1
   22b08:	f1b9 0f00 	cmp.w	r9, #0
   22b0c:	d003      	beq.n	22b16 <_scanf_i+0x10e>
   22b0e:	3301      	adds	r3, #1
   22b10:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   22b14:	60a3      	str	r3, [r4, #8]
   22b16:	6873      	ldr	r3, [r6, #4]
   22b18:	3b01      	subs	r3, #1
   22b1a:	2b00      	cmp	r3, #0
   22b1c:	6073      	str	r3, [r6, #4]
   22b1e:	dd1b      	ble.n	22b58 <_scanf_i+0x150>
   22b20:	6833      	ldr	r3, [r6, #0]
   22b22:	3301      	adds	r3, #1
   22b24:	6033      	str	r3, [r6, #0]
   22b26:	68a3      	ldr	r3, [r4, #8]
   22b28:	3b01      	subs	r3, #1
   22b2a:	60a3      	str	r3, [r4, #8]
   22b2c:	e7d9      	b.n	22ae2 <_scanf_i+0xda>
   22b2e:	f1bb 0f02 	cmp.w	fp, #2
   22b32:	d1ae      	bne.n	22a92 <_scanf_i+0x8a>
   22b34:	6822      	ldr	r2, [r4, #0]
   22b36:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   22b3a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   22b3e:	d1bf      	bne.n	22ac0 <_scanf_i+0xb8>
   22b40:	2310      	movs	r3, #16
   22b42:	6063      	str	r3, [r4, #4]
   22b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   22b48:	e7a2      	b.n	22a90 <_scanf_i+0x88>
   22b4a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   22b4e:	6022      	str	r2, [r4, #0]
   22b50:	780b      	ldrb	r3, [r1, #0]
   22b52:	f805 3b01 	strb.w	r3, [r5], #1
   22b56:	e7de      	b.n	22b16 <_scanf_i+0x10e>
   22b58:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   22b5c:	4631      	mov	r1, r6
   22b5e:	4650      	mov	r0, sl
   22b60:	4798      	blx	r3
   22b62:	2800      	cmp	r0, #0
   22b64:	d0df      	beq.n	22b26 <_scanf_i+0x11e>
   22b66:	6823      	ldr	r3, [r4, #0]
   22b68:	05d9      	lsls	r1, r3, #23
   22b6a:	d50d      	bpl.n	22b88 <_scanf_i+0x180>
   22b6c:	42bd      	cmp	r5, r7
   22b6e:	d909      	bls.n	22b84 <_scanf_i+0x17c>
   22b70:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   22b74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   22b78:	4632      	mov	r2, r6
   22b7a:	4650      	mov	r0, sl
   22b7c:	4798      	blx	r3
   22b7e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   22b82:	464d      	mov	r5, r9
   22b84:	42bd      	cmp	r5, r7
   22b86:	d028      	beq.n	22bda <_scanf_i+0x1d2>
   22b88:	6822      	ldr	r2, [r4, #0]
   22b8a:	f012 0210 	ands.w	r2, r2, #16
   22b8e:	d113      	bne.n	22bb8 <_scanf_i+0x1b0>
   22b90:	702a      	strb	r2, [r5, #0]
   22b92:	6863      	ldr	r3, [r4, #4]
   22b94:	9e01      	ldr	r6, [sp, #4]
   22b96:	4639      	mov	r1, r7
   22b98:	4650      	mov	r0, sl
   22b9a:	47b0      	blx	r6
   22b9c:	f8d8 3000 	ldr.w	r3, [r8]
   22ba0:	6821      	ldr	r1, [r4, #0]
   22ba2:	1d1a      	adds	r2, r3, #4
   22ba4:	f8c8 2000 	str.w	r2, [r8]
   22ba8:	f011 0f20 	tst.w	r1, #32
   22bac:	681b      	ldr	r3, [r3, #0]
   22bae:	d00f      	beq.n	22bd0 <_scanf_i+0x1c8>
   22bb0:	6018      	str	r0, [r3, #0]
   22bb2:	68e3      	ldr	r3, [r4, #12]
   22bb4:	3301      	adds	r3, #1
   22bb6:	60e3      	str	r3, [r4, #12]
   22bb8:	1bed      	subs	r5, r5, r7
   22bba:	44ab      	add	fp, r5
   22bbc:	6925      	ldr	r5, [r4, #16]
   22bbe:	445d      	add	r5, fp
   22bc0:	6125      	str	r5, [r4, #16]
   22bc2:	2000      	movs	r0, #0
   22bc4:	b007      	add	sp, #28
   22bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22bca:	f04f 0b00 	mov.w	fp, #0
   22bce:	e7ca      	b.n	22b66 <_scanf_i+0x15e>
   22bd0:	07ca      	lsls	r2, r1, #31
   22bd2:	bf4c      	ite	mi
   22bd4:	8018      	strhmi	r0, [r3, #0]
   22bd6:	6018      	strpl	r0, [r3, #0]
   22bd8:	e7eb      	b.n	22bb2 <_scanf_i+0x1aa>
   22bda:	2001      	movs	r0, #1
   22bdc:	e7f2      	b.n	22bc4 <_scanf_i+0x1bc>
   22bde:	bf00      	nop
   22be0:	0002c144 	.word	0x0002c144
   22be4:	0002b8a7 	.word	0x0002b8a7
   22be8:	0002b8a3 	.word	0x0002b8a3
   22bec:	0003969b 	.word	0x0003969b

00022bf0 <_sbrk_r>:
   22bf0:	b538      	push	{r3, r4, r5, lr}
   22bf2:	4d06      	ldr	r5, [pc, #24]	; (22c0c <_sbrk_r+0x1c>)
   22bf4:	2300      	movs	r3, #0
   22bf6:	4604      	mov	r4, r0
   22bf8:	4608      	mov	r0, r1
   22bfa:	602b      	str	r3, [r5, #0]
   22bfc:	f7e2 f88a 	bl	4d14 <_sbrk>
   22c00:	1c43      	adds	r3, r0, #1
   22c02:	d102      	bne.n	22c0a <_sbrk_r+0x1a>
   22c04:	682b      	ldr	r3, [r5, #0]
   22c06:	b103      	cbz	r3, 22c0a <_sbrk_r+0x1a>
   22c08:	6023      	str	r3, [r4, #0]
   22c0a:	bd38      	pop	{r3, r4, r5, pc}
   22c0c:	20008774 	.word	0x20008774

00022c10 <le_param_req>:
}
   22c10:	2001      	movs	r0, #1
   22c12:	4770      	bx	lr

00022c14 <le_param_updated>:
}
   22c14:	4770      	bx	lr

00022c16 <display_task_handler>:
{
   22c16:	b508      	push	{r3, lr}
	lv_tick_inc(TICK_PERIOD);
   22c18:	200a      	movs	r0, #10
   22c1a:	f7fa fc8b 	bl	1d534 <lv_tick_inc>
}
   22c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lv_task_handler();
   22c22:	f7fa be9b 	b.w	1d95c <lv_task_handler>

00022c26 <lv_scr_act>:
{
   22c26:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   22c28:	f7fa fbc0 	bl	1d3ac <lv_disp_get_default>
}
   22c2c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   22c30:	f7f7 b94a 	b.w	19ec8 <lv_disp_get_scr_act>

00022c34 <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22c34:	0413      	lsls	r3, r2, #16
{
   22c36:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   22c38:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22c3a:	d507      	bpl.n	22c4c <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   22c3c:	68c5      	ldr	r5, [r0, #12]
   22c3e:	2301      	movs	r3, #1
   22c40:	682d      	ldr	r5, [r5, #0]
   22c42:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22c44:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   22c46:	bf18      	it	ne
   22c48:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22c4c:	69a4      	ldr	r4, [r4, #24]
   22c4e:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   22c52:	46a4      	mov	ip, r4
   22c54:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   22c58:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22c5a:	4760      	bx	ip

00022c5c <gpio_pin_configure>:
{
   22c5c:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   22c5e:	68c5      	ldr	r5, [r0, #12]
{
   22c60:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   22c62:	6883      	ldr	r3, [r0, #8]
   22c64:	681b      	ldr	r3, [r3, #0]
   22c66:	4798      	blx	r3
	if (ret != 0) {
   22c68:	b930      	cbnz	r0, 22c78 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   22c6a:	2301      	movs	r3, #1
   22c6c:	fa03 f104 	lsl.w	r1, r3, r4
   22c70:	682b      	ldr	r3, [r5, #0]
   22c72:	ea23 0301 	bic.w	r3, r3, r1
   22c76:	602b      	str	r3, [r5, #0]
}
   22c78:	bd38      	pop	{r3, r4, r5, pc}

00022c7a <main>:
#include "event_handler.h"
#include "bt.h"


void main(void)
{
   22c7a:	b508      	push	{r3, lr}
#if !(defined(CONFIG_BOARD_NATIVE_POSIX_64BIT)||defined(CONFIG_BOARD_NRF52_BSIM)) //both the pinetime & ds_d6 have a real button 
	{
		init_button();
   22c7c:	f7df f942 	bl	1f04 <init_button>
	}
#endif
	display_init();
   22c80:	f7df f89a 	bl	1db8 <display_init>
	clock_init();
   22c84:	f7de fcd4 	bl	1630 <clock_init>
	clock_show_time(); //time of build
   22c88:	f7de fd22 	bl	16d0 <clock_show_time>
        bt_init();
   22c8c:	f7de fc36 	bl	14fc <bt_init>
	return z_impl_k_sleep(timeout);
   22c90:	2100      	movs	r1, #0
   22c92:	f640 40cd 	movw	r0, #3277	; 0xccd
   22c96:	f7fd f9f9 	bl	2008c <z_impl_k_sleep>


	while (1) {
   22c9a:	e7f9      	b.n	22c90 <main+0x16>

00022c9c <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   22c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   22c9e:	f04f 0c0a 	mov.w	ip, #10
{
   22ca2:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   22ca4:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   22ca6:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   22ca8:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   22caa:	b111      	cbz	r1, 22cb2 <u8_to_dec+0x16>
   22cac:	3e01      	subs	r6, #1
   22cae:	d101      	bne.n	22cb4 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   22cb0:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   22cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22cb4:	42a2      	cmp	r2, r4
		digit = value / divisor;
   22cb6:	fbb2 f7f4 	udiv	r7, r2, r4
   22cba:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22cbc:	d202      	bcs.n	22cc4 <u8_to_dec+0x28>
   22cbe:	2c01      	cmp	r4, #1
   22cc0:	d000      	beq.n	22cc4 <u8_to_dec+0x28>
   22cc2:	b130      	cbz	r0, 22cd2 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   22cc4:	3330      	adds	r3, #48	; 0x30
   22cc6:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   22cca:	3901      	subs	r1, #1
			num_digits++;
   22ccc:	1c43      	adds	r3, r0, #1
			buflen--;
   22cce:	b2c9      	uxtb	r1, r1
			num_digits++;
   22cd0:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   22cd2:	fb04 2217 	mls	r2, r4, r7, r2
   22cd6:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   22cd8:	fbb4 f4fc 	udiv	r4, r4, ip
   22cdc:	e7e5      	b.n	22caa <u8_to_dec+0xe>

00022cde <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   22cde:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   22ce2:	b2db      	uxtb	r3, r3
   22ce4:	2b09      	cmp	r3, #9
   22ce6:	d802      	bhi.n	22cee <char2hex+0x10>
		*x = c - '0';
   22ce8:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   22cea:	2000      	movs	r0, #0
   22cec:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   22cee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   22cf2:	2b05      	cmp	r3, #5
   22cf4:	d802      	bhi.n	22cfc <char2hex+0x1e>
		*x = c - 'a' + 10;
   22cf6:	3857      	subs	r0, #87	; 0x57
   22cf8:	7008      	strb	r0, [r1, #0]
   22cfa:	e7f6      	b.n	22cea <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   22cfc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   22d00:	2b05      	cmp	r3, #5
   22d02:	d801      	bhi.n	22d08 <char2hex+0x2a>
		*x = c - 'A' + 10;
   22d04:	3837      	subs	r0, #55	; 0x37
   22d06:	e7f7      	b.n	22cf8 <char2hex+0x1a>
		return -EINVAL;
   22d08:	f06f 0015 	mvn.w	r0, #21
}
   22d0c:	4770      	bx	lr

00022d0e <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   22d0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22d10:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   22d12:	f001 0001 	and.w	r0, r1, #1
   22d16:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   22d1a:	429d      	cmp	r5, r3
   22d1c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   22d20:	d903      	bls.n	22d2a <hex2bin+0x1c>
		return 0;
   22d22:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   22d24:	4628      	mov	r0, r5
   22d26:	b003      	add	sp, #12
   22d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   22d2a:	b158      	cbz	r0, 22d44 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   22d2c:	7820      	ldrb	r0, [r4, #0]
   22d2e:	f10d 0107 	add.w	r1, sp, #7
   22d32:	f7ff ffd4 	bl	22cde <char2hex>
   22d36:	2800      	cmp	r0, #0
   22d38:	dbf3      	blt.n	22d22 <hex2bin+0x14>
		buf[0] = dec;
   22d3a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22d3e:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   22d42:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22d44:	3401      	adds	r4, #1
   22d46:	4416      	add	r6, r2
   22d48:	42b2      	cmp	r2, r6
   22d4a:	d0eb      	beq.n	22d24 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   22d4c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   22d50:	f10d 0107 	add.w	r1, sp, #7
   22d54:	f7ff ffc3 	bl	22cde <char2hex>
   22d58:	2800      	cmp	r0, #0
   22d5a:	dbe2      	blt.n	22d22 <hex2bin+0x14>
		buf[i] = dec << 4;
   22d5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22d60:	011b      	lsls	r3, r3, #4
   22d62:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   22d64:	f814 0b02 	ldrb.w	r0, [r4], #2
   22d68:	f10d 0107 	add.w	r1, sp, #7
   22d6c:	f7ff ffb7 	bl	22cde <char2hex>
   22d70:	2800      	cmp	r0, #0
   22d72:	dbd6      	blt.n	22d22 <hex2bin+0x14>
		buf[i] += dec;
   22d74:	7813      	ldrb	r3, [r2, #0]
   22d76:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22d7a:	440b      	add	r3, r1
   22d7c:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22d80:	e7e2      	b.n	22d48 <hex2bin+0x3a>

00022d82 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   22d82:	4603      	mov	r3, r0
   22d84:	b140      	cbz	r0, 22d98 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22d86:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22d88:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   22d8c:	2a02      	cmp	r2, #2
   22d8e:	d006      	beq.n	22d9e <sys_notify_validate+0x1c>
   22d90:	2a03      	cmp	r2, #3
   22d92:	d004      	beq.n	22d9e <sys_notify_validate+0x1c>
   22d94:	2a01      	cmp	r2, #1
   22d96:	d005      	beq.n	22da4 <sys_notify_validate+0x22>
		return -EINVAL;
   22d98:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   22d9c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   22d9e:	681a      	ldr	r2, [r3, #0]
   22da0:	2a00      	cmp	r2, #0
   22da2:	d0f9      	beq.n	22d98 <sys_notify_validate+0x16>
		notify->result = 0;
   22da4:	2000      	movs	r0, #0
   22da6:	6098      	str	r0, [r3, #8]
   22da8:	4770      	bx	lr

00022daa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22daa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22dac:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   22db0:	2a02      	cmp	r2, #2
{
   22db2:	b510      	push	{r4, lr}
   22db4:	4603      	mov	r3, r0
	notify->result = res;
   22db6:	6081      	str	r1, [r0, #8]
	switch (method) {
   22db8:	d00a      	beq.n	22dd0 <sys_notify_finalize+0x26>
   22dba:	2a03      	cmp	r2, #3
   22dbc:	d10b      	bne.n	22dd6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   22dbe:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   22dc0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22dc2:	2200      	movs	r2, #0
   22dc4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   22dc6:	b108      	cbz	r0, 22dcc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   22dc8:	f7fd fd82 	bl	208d0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   22dcc:	4620      	mov	r0, r4
   22dce:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   22dd0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   22dd2:	2400      	movs	r4, #0
		break;
   22dd4:	e7f5      	b.n	22dc2 <sys_notify_finalize+0x18>
	switch (method) {
   22dd6:	2400      	movs	r4, #0
   22dd8:	4620      	mov	r0, r4
   22dda:	e7f2      	b.n	22dc2 <sys_notify_finalize+0x18>

00022ddc <arch_printk_char_out>:
}
   22ddc:	2000      	movs	r0, #0
   22dde:	4770      	bx	lr

00022de0 <str_out>:
{
   22de0:	b530      	push	{r4, r5, lr}
   22de2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   22de4:	680c      	ldr	r4, [r1, #0]
   22de6:	1c55      	adds	r5, r2, #1
   22de8:	b114      	cbz	r4, 22df0 <str_out+0x10>
   22dea:	684b      	ldr	r3, [r1, #4]
   22dec:	4293      	cmp	r3, r2
   22dee:	dc01      	bgt.n	22df4 <str_out+0x14>
		ctx->count++;
   22df0:	608d      	str	r5, [r1, #8]
}
   22df2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   22df4:	3b01      	subs	r3, #1
   22df6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   22df8:	bf08      	it	eq
   22dfa:	2200      	moveq	r2, #0
   22dfc:	608d      	str	r5, [r1, #8]
   22dfe:	bf0c      	ite	eq
   22e00:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   22e02:	54a0      	strbne	r0, [r4, r2]
   22e04:	e7f5      	b.n	22df2 <str_out+0x12>

00022e06 <printk>:
{
   22e06:	b40f      	push	{r0, r1, r2, r3}
   22e08:	b507      	push	{r0, r1, r2, lr}
   22e0a:	a904      	add	r1, sp, #16
   22e0c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22e10:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   22e12:	f7df f8d7 	bl	1fc4 <vprintk>
}
   22e16:	b003      	add	sp, #12
   22e18:	f85d eb04 	ldr.w	lr, [sp], #4
   22e1c:	b004      	add	sp, #16
   22e1e:	4770      	bx	lr

00022e20 <snprintk>:
{
   22e20:	b40c      	push	{r2, r3}
   22e22:	b507      	push	{r0, r1, r2, lr}
   22e24:	ab04      	add	r3, sp, #16
   22e26:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   22e2a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   22e2c:	f7df f8d8 	bl	1fe0 <vsnprintk>
}
   22e30:	b003      	add	sp, #12
   22e32:	f85d eb04 	ldr.w	lr, [sp], #4
   22e36:	b002      	add	sp, #8
   22e38:	4770      	bx	lr

00022e3a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22e3a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   22e3c:	f013 0307 	ands.w	r3, r3, #7
   22e40:	d105      	bne.n	22e4e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22e42:	6803      	ldr	r3, [r0, #0]
   22e44:	2b00      	cmp	r3, #0
		evt = EVT_START;
   22e46:	bf0c      	ite	eq
   22e48:	2000      	moveq	r0, #0
   22e4a:	2003      	movne	r0, #3
   22e4c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   22e4e:	2b02      	cmp	r3, #2
   22e50:	d105      	bne.n	22e5e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22e52:	8b43      	ldrh	r3, [r0, #26]
   22e54:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   22e56:	bf14      	ite	ne
   22e58:	2000      	movne	r0, #0
   22e5a:	2004      	moveq	r0, #4
   22e5c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   22e5e:	2b01      	cmp	r3, #1
   22e60:	d105      	bne.n	22e6e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22e62:	6803      	ldr	r3, [r0, #0]
   22e64:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   22e66:	bf0c      	ite	eq
   22e68:	2000      	moveq	r0, #0
   22e6a:	2005      	movne	r0, #5
   22e6c:	4770      	bx	lr
	int evt = EVT_NOP;
   22e6e:	2000      	movs	r0, #0
}
   22e70:	4770      	bx	lr

00022e72 <notify_one>:
{
   22e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e76:	460d      	mov	r5, r1
   22e78:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22e7a:	4619      	mov	r1, r3
   22e7c:	1d28      	adds	r0, r5, #4
{
   22e7e:	4690      	mov	r8, r2
   22e80:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22e82:	f7ff ff92 	bl	22daa <sys_notify_finalize>
	if (cb) {
   22e86:	4604      	mov	r4, r0
   22e88:	b138      	cbz	r0, 22e9a <notify_one+0x28>
		cb(mgr, cli, state, res);
   22e8a:	4633      	mov	r3, r6
   22e8c:	4642      	mov	r2, r8
   22e8e:	4629      	mov	r1, r5
   22e90:	4638      	mov	r0, r7
   22e92:	46a4      	mov	ip, r4
}
   22e94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   22e98:	4760      	bx	ip
}
   22e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022e9e <transition_complete>:
{
   22e9e:	b410      	push	{r4}
	__asm__ volatile(
   22ea0:	f04f 0420 	mov.w	r4, #32
   22ea4:	f3ef 8211 	mrs	r2, BASEPRI
   22ea8:	f384 8811 	msr	BASEPRI, r4
   22eac:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   22eb0:	6141      	str	r1, [r0, #20]
}
   22eb2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   22eb4:	2101      	movs	r1, #1
   22eb6:	f7df b8a7 	b.w	2008 <process_event>

00022eba <validate_args>:
{
   22eba:	b510      	push	{r4, lr}
   22ebc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   22ebe:	b140      	cbz	r0, 22ed2 <validate_args+0x18>
   22ec0:	b139      	cbz	r1, 22ed2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   22ec2:	1d08      	adds	r0, r1, #4
   22ec4:	f7ff ff5d 	bl	22d82 <sys_notify_validate>
	if ((rv == 0)
   22ec8:	b928      	cbnz	r0, 22ed6 <validate_args+0x1c>
	    && ((cli->notify.flags
   22eca:	68a3      	ldr	r3, [r4, #8]
   22ecc:	f033 0303 	bics.w	r3, r3, #3
   22ed0:	d001      	beq.n	22ed6 <validate_args+0x1c>
		rv = -EINVAL;
   22ed2:	f06f 0015 	mvn.w	r0, #21
}
   22ed6:	bd10      	pop	{r4, pc}

00022ed8 <onoff_manager_init>:
{
   22ed8:	b538      	push	{r3, r4, r5, lr}
   22eda:	460c      	mov	r4, r1
	if ((mgr == NULL)
   22edc:	4605      	mov	r5, r0
   22ede:	b158      	cbz	r0, 22ef8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   22ee0:	b151      	cbz	r1, 22ef8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   22ee2:	680b      	ldr	r3, [r1, #0]
   22ee4:	b143      	cbz	r3, 22ef8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   22ee6:	684b      	ldr	r3, [r1, #4]
   22ee8:	b133      	cbz	r3, 22ef8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   22eea:	221c      	movs	r2, #28
   22eec:	2100      	movs	r1, #0
   22eee:	f008 fc81 	bl	2b7f4 <memset>
   22ef2:	612c      	str	r4, [r5, #16]
	return 0;
   22ef4:	2000      	movs	r0, #0
}
   22ef6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22ef8:	f06f 0015 	mvn.w	r0, #21
   22efc:	e7fb      	b.n	22ef6 <onoff_manager_init+0x1e>

00022efe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   22efe:	b570      	push	{r4, r5, r6, lr}
   22f00:	4604      	mov	r4, r0
   22f02:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   22f04:	f7ff ffd9 	bl	22eba <validate_args>

	if (rv < 0) {
   22f08:	1e05      	subs	r5, r0, #0
   22f0a:	db31      	blt.n	22f70 <onoff_request+0x72>
   22f0c:	f04f 0320 	mov.w	r3, #32
   22f10:	f3ef 8111 	mrs	r1, BASEPRI
   22f14:	f383 8811 	msr	BASEPRI, r3
   22f18:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   22f1c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22f1e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   22f20:	f64f 75ff 	movw	r5, #65535	; 0xffff
   22f24:	42ab      	cmp	r3, r5
   22f26:	f000 0207 	and.w	r2, r0, #7
   22f2a:	d02e      	beq.n	22f8a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   22f2c:	2a02      	cmp	r2, #2
   22f2e:	d10e      	bne.n	22f4e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   22f30:	3301      	adds	r3, #1
   22f32:	8363      	strh	r3, [r4, #26]
	rv = state;
   22f34:	4615      	mov	r5, r2
		notify = true;
   22f36:	2301      	movs	r3, #1
	__asm__ volatile(
   22f38:	f381 8811 	msr	BASEPRI, r1
   22f3c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   22f40:	b1b3      	cbz	r3, 22f70 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   22f42:	2300      	movs	r3, #0
   22f44:	4631      	mov	r1, r6
   22f46:	4620      	mov	r0, r4
   22f48:	f7ff ff93 	bl	22e72 <notify_one>
   22f4c:	e010      	b.n	22f70 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   22f4e:	0783      	lsls	r3, r0, #30
   22f50:	d001      	beq.n	22f56 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   22f52:	2a06      	cmp	r2, #6
   22f54:	d10e      	bne.n	22f74 <onoff_request+0x76>
	parent->next = child;
   22f56:	2300      	movs	r3, #0
   22f58:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   22f5a:	6863      	ldr	r3, [r4, #4]
   22f5c:	b993      	cbnz	r3, 22f84 <onoff_request+0x86>
	list->head = node;
   22f5e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   22f62:	4615      	mov	r5, r2
   22f64:	b962      	cbnz	r2, 22f80 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   22f66:	460a      	mov	r2, r1
   22f68:	4620      	mov	r0, r4
   22f6a:	2102      	movs	r1, #2
   22f6c:	f7df f84c 	bl	2008 <process_event>
		}
	}

	return rv;
}
   22f70:	4628      	mov	r0, r5
   22f72:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   22f74:	2a05      	cmp	r2, #5
   22f76:	bf0c      	ite	eq
   22f78:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   22f7c:	f06f 0504 	mvnne.w	r5, #4
   22f80:	2300      	movs	r3, #0
   22f82:	e7d9      	b.n	22f38 <onoff_request+0x3a>
	parent->next = child;
   22f84:	601e      	str	r6, [r3, #0]
	list->tail = node;
   22f86:	6066      	str	r6, [r4, #4]
}
   22f88:	e7eb      	b.n	22f62 <onoff_request+0x64>
		rv = -EAGAIN;
   22f8a:	f06f 050a 	mvn.w	r5, #10
   22f8e:	e7f7      	b.n	22f80 <onoff_request+0x82>

00022f90 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   22f90:	b510      	push	{r4, lr}
	__asm__ volatile(
   22f92:	f04f 0320 	mov.w	r3, #32
   22f96:	f3ef 8211 	mrs	r2, BASEPRI
   22f9a:	f383 8811 	msr	BASEPRI, r3
   22f9e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22fa2:	8b04      	ldrh	r4, [r0, #24]
   22fa4:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   22fa8:	2c02      	cmp	r4, #2
   22faa:	d00a      	beq.n	22fc2 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   22fac:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   22fae:	bf0c      	ite	eq
   22fb0:	f06f 0004 	mvneq.w	r0, #4
   22fb4:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   22fb8:	f382 8811 	msr	BASEPRI, r2
   22fbc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   22fc0:	e008      	b.n	22fd4 <onoff_release+0x44>
	mgr->refs -= 1U;
   22fc2:	8b43      	ldrh	r3, [r0, #26]
   22fc4:	3b01      	subs	r3, #1
   22fc6:	b29b      	uxth	r3, r3
   22fc8:	8343      	strh	r3, [r0, #26]
	if (stop) {
   22fca:	b923      	cbnz	r3, 22fd6 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   22fcc:	4621      	mov	r1, r4
   22fce:	f7df f81b 	bl	2008 <process_event>
	int rv = state;
   22fd2:	4620      	mov	r0, r4
}
   22fd4:	bd10      	pop	{r4, pc}
	int rv = state;
   22fd6:	4620      	mov	r0, r4
   22fd8:	e7ee      	b.n	22fb8 <onoff_release+0x28>

00022fda <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   22fda:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   22fdc:	f7fd f87e 	bl	200dc <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   22fe0:	2000      	movs	r0, #0
   22fe2:	bd08      	pop	{r3, pc}

00022fe4 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   22fe4:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   22fe6:	f7fd f89f 	bl	20128 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   22fea:	f110 0f0b 	cmn.w	r0, #11
   22fee:	d005      	beq.n	22ffc <sys_sem_take+0x18>
   22ff0:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   22ff4:	bf08      	it	eq
   22ff6:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   22ffa:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   22ffc:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   23000:	e7fb      	b.n	22ffa <sys_sem_take+0x16>

00023002 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   23002:	4604      	mov	r4, r0
   23004:	b508      	push	{r3, lr}
   23006:	4608      	mov	r0, r1
   23008:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   2300a:	461a      	mov	r2, r3
   2300c:	47a0      	blx	r4
	return z_impl_k_current_get();
   2300e:	f7fd f85f 	bl	200d0 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   23012:	f7e1 fd93 	bl	4b3c <z_impl_k_thread_abort>

00023016 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   23016:	b510      	push	{r4, lr}
   23018:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   2301a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2301e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23022:	4620      	mov	r0, r4
   23024:	f7fc fc88 	bl	1f938 <z_impl_k_queue_get>
   23028:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   2302a:	2800      	cmp	r0, #0
   2302c:	d0f5      	beq.n	2301a <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2302e:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   23030:	6842      	ldr	r2, [r0, #4]
   23032:	f3bf 8f5b 	dmb	ish
   23036:	e853 1f00 	ldrex	r1, [r3]
   2303a:	f021 0c01 	bic.w	ip, r1, #1
   2303e:	e843 ce00 	strex	lr, ip, [r3]
   23042:	f1be 0f00 	cmp.w	lr, #0
   23046:	d1f6      	bne.n	23036 <z_work_q_main+0x20>
   23048:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   2304c:	07cb      	lsls	r3, r1, #31
   2304e:	d500      	bpl.n	23052 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   23050:	4790      	blx	r2
	z_impl_k_yield();
   23052:	f7fc ffcd 	bl	1fff0 <z_impl_k_yield>
   23056:	e7e0      	b.n	2301a <z_work_q_main+0x4>

00023058 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   23058:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   2305a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2305e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   23062:	bf2c      	ite	cs
   23064:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   23068:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   2306c:	4770      	bx	lr

0002306e <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   2306e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   23072:	6880      	ldr	r0, [r0, #8]
   23074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   23078:	bf2c      	ite	cs
   2307a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   2307e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   23082:	4770      	bx	lr

00023084 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   23084:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   23086:	2201      	movs	r2, #1
   23088:	f7ff ffe6 	bl	23058 <chunk_field>
}
   2308c:	0840      	lsrs	r0, r0, #1
   2308e:	bd08      	pop	{r3, pc}

00023090 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   23090:	6883      	ldr	r3, [r0, #8]
   23092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   23096:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   2309a:	d308      	bcc.n	230ae <set_chunk_used+0x1e>
		if (used) {
   2309c:	684b      	ldr	r3, [r1, #4]
   2309e:	b11a      	cbz	r2, 230a8 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   230a0:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   230a4:	604b      	str	r3, [r1, #4]
   230a6:	4770      	bx	lr
   230a8:	f023 0301 	bic.w	r3, r3, #1
   230ac:	e7fa      	b.n	230a4 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   230ae:	884b      	ldrh	r3, [r1, #2]
   230b0:	b11a      	cbz	r2, 230ba <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   230b2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   230b6:	804b      	strh	r3, [r1, #2]
		}
	}
}
   230b8:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   230ba:	f023 0301 	bic.w	r3, r3, #1
   230be:	e7fa      	b.n	230b6 <set_chunk_used+0x26>

000230c0 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   230c0:	0053      	lsls	r3, r2, #1
   230c2:	2201      	movs	r2, #1
   230c4:	f7ff bfd3 	b.w	2306e <chunk_set>

000230c8 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   230c8:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   230ca:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   230cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   230d0:	bf2c      	ite	cs
   230d2:	2002      	movcs	r0, #2
   230d4:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   230d6:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   230d8:	fab0 f080 	clz	r0, r0
}
   230dc:	f1c0 001f 	rsb	r0, r0, #31
   230e0:	4770      	bx	lr

000230e2 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   230e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230e6:	4616      	mov	r6, r2
   230e8:	4604      	mov	r4, r0
   230ea:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   230ec:	f7ff ffca 	bl	23084 <chunk_size>
   230f0:	4631      	mov	r1, r6
   230f2:	4605      	mov	r5, r0
   230f4:	4620      	mov	r0, r4
   230f6:	f7ff ffc5 	bl	23084 <chunk_size>
   230fa:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   230fc:	462a      	mov	r2, r5
   230fe:	4639      	mov	r1, r7
   23100:	4620      	mov	r0, r4
   23102:	f7ff ffdd 	bl	230c0 <set_chunk_size>
	return c + chunk_size(h, c);
   23106:	4631      	mov	r1, r6
   23108:	4620      	mov	r0, r4
   2310a:	f7ff ffbb 	bl	23084 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2310e:	462b      	mov	r3, r5
   23110:	1831      	adds	r1, r6, r0
   23112:	2200      	movs	r2, #0
   23114:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   23116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2311a:	f7ff bfa8 	b.w	2306e <chunk_set>

0002311e <split_chunks>:
{
   2311e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23122:	4614      	mov	r4, r2
   23124:	4605      	mov	r5, r0
   23126:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   23128:	f7ff ffac 	bl	23084 <chunk_size>
	size_t lsz = rc - lc;
   2312c:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   23130:	1b37      	subs	r7, r6, r4
   23132:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   23134:	4642      	mov	r2, r8
   23136:	4631      	mov	r1, r6
   23138:	4628      	mov	r0, r5
   2313a:	f7ff ffc1 	bl	230c0 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   2313e:	463a      	mov	r2, r7
   23140:	4621      	mov	r1, r4
   23142:	4628      	mov	r0, r5
   23144:	f7ff ffbc 	bl	230c0 <set_chunk_size>
   23148:	4643      	mov	r3, r8
   2314a:	2200      	movs	r2, #0
   2314c:	4621      	mov	r1, r4
   2314e:	4628      	mov	r0, r5
   23150:	f7ff ff8d 	bl	2306e <chunk_set>
	return c + chunk_size(h, c);
   23154:	4621      	mov	r1, r4
   23156:	4628      	mov	r0, r5
   23158:	f7ff ff94 	bl	23084 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2315c:	463b      	mov	r3, r7
   2315e:	1821      	adds	r1, r4, r0
   23160:	2200      	movs	r2, #0
   23162:	4628      	mov	r0, r5
}
   23164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23168:	f7ff bf81 	b.w	2306e <chunk_set>

0002316c <free_list_remove_bidx>:
{
   2316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23170:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   23172:	2203      	movs	r2, #3
   23174:	460e      	mov	r6, r1
   23176:	4604      	mov	r4, r0
   23178:	f7ff ff6e 	bl	23058 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   2317c:	4286      	cmp	r6, r0
   2317e:	4605      	mov	r5, r0
   23180:	f107 0804 	add.w	r8, r7, #4
   23184:	d10b      	bne.n	2319e <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   23186:	2301      	movs	r3, #1
   23188:	fa03 f707 	lsl.w	r7, r3, r7
   2318c:	68e3      	ldr	r3, [r4, #12]
   2318e:	ea23 0307 	bic.w	r3, r3, r7
   23192:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   23194:	2300      	movs	r3, #0
   23196:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   2319a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   2319e:	4631      	mov	r1, r6
   231a0:	2202      	movs	r2, #2
   231a2:	4620      	mov	r0, r4
   231a4:	f7ff ff58 	bl	23058 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   231a8:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   231aa:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   231ac:	4601      	mov	r1, r0
		b->next = second;
   231ae:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   231b2:	4620      	mov	r0, r4
   231b4:	2203      	movs	r2, #3
   231b6:	f7ff ff5a 	bl	2306e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   231ba:	4633      	mov	r3, r6
   231bc:	4629      	mov	r1, r5
   231be:	4620      	mov	r0, r4
   231c0:	2202      	movs	r2, #2
}
   231c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   231c6:	f7ff bf52 	b.w	2306e <chunk_set>

000231ca <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   231ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   231ce:	4604      	mov	r4, r0
   231d0:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   231d2:	f7ff ff79 	bl	230c8 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   231d6:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   231d8:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   231da:	4620      	mov	r0, r4
   231dc:	f7ff ff74 	bl	230c8 <bucket_idx>
   231e0:	42a8      	cmp	r0, r5
   231e2:	da03      	bge.n	231ec <alloc_chunk+0x22>
		return 0;
   231e4:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   231e6:	4630      	mov	r0, r6
   231e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   231ec:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   231f0:	f8da 9010 	ldr.w	r9, [sl, #16]
   231f4:	f1b9 0f00 	cmp.w	r9, #0
   231f8:	d019      	beq.n	2322e <alloc_chunk+0x64>
   231fa:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   231fc:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   23200:	4620      	mov	r0, r4
   23202:	4631      	mov	r1, r6
   23204:	f7ff ff3e 	bl	23084 <chunk_size>
   23208:	4540      	cmp	r0, r8
   2320a:	d305      	bcc.n	23218 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   2320c:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   2320e:	4631      	mov	r1, r6
   23210:	4620      	mov	r0, r4
   23212:	f7ff ffab 	bl	2316c <free_list_remove_bidx>
		return c;
   23216:	e7e6      	b.n	231e6 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   23218:	2203      	movs	r2, #3
   2321a:	4631      	mov	r1, r6
   2321c:	4620      	mov	r0, r4
   2321e:	f7ff ff1b 	bl	23058 <chunk_field>
		} while (--i && b->next != first);
   23222:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   23224:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   23228:	d001      	beq.n	2322e <alloc_chunk+0x64>
   2322a:	4581      	cmp	r9, r0
   2322c:	d1e6      	bne.n	231fc <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   2322e:	68e3      	ldr	r3, [r4, #12]
   23230:	3501      	adds	r5, #1
   23232:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23236:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   23238:	401a      	ands	r2, r3
   2323a:	d0d3      	beq.n	231e4 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   2323c:	fa92 f2a2 	rbit	r2, r2
   23240:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   23244:	1d13      	adds	r3, r2, #4
   23246:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   2324a:	e7e0      	b.n	2320e <alloc_chunk+0x44>

0002324c <free_list_add>:
{
   2324c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23250:	4604      	mov	r4, r0
   23252:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   23254:	f7ff ff16 	bl	23084 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   23258:	68a3      	ldr	r3, [r4, #8]
   2325a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2325e:	4601      	mov	r1, r0
   23260:	d301      	bcc.n	23266 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   23262:	2801      	cmp	r0, #1
   23264:	d035      	beq.n	232d2 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   23266:	4620      	mov	r0, r4
   23268:	f7ff ff2e 	bl	230c8 <bucket_idx>
	if (b->next == 0U) {
   2326c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   23270:	6916      	ldr	r6, [r2, #16]
   23272:	b99e      	cbnz	r6, 2329c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   23274:	2301      	movs	r3, #1
   23276:	fa03 f000 	lsl.w	r0, r3, r0
   2327a:	68e3      	ldr	r3, [r4, #12]
   2327c:	4303      	orrs	r3, r0
   2327e:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   23280:	4629      	mov	r1, r5
		b->next = c;
   23282:	6115      	str	r5, [r2, #16]
   23284:	462b      	mov	r3, r5
   23286:	2202      	movs	r2, #2
   23288:	4620      	mov	r0, r4
   2328a:	f7ff fef0 	bl	2306e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2328e:	2203      	movs	r2, #3
   23290:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   23292:	4620      	mov	r0, r4
}
   23294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23298:	f7ff bee9 	b.w	2306e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   2329c:	2202      	movs	r2, #2
   2329e:	4631      	mov	r1, r6
   232a0:	4620      	mov	r0, r4
   232a2:	f7ff fed9 	bl	23058 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   232a6:	2202      	movs	r2, #2
   232a8:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   232aa:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   232ac:	4629      	mov	r1, r5
   232ae:	4620      	mov	r0, r4
   232b0:	f7ff fedd 	bl	2306e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   232b4:	4633      	mov	r3, r6
   232b6:	2203      	movs	r2, #3
   232b8:	4629      	mov	r1, r5
   232ba:	4620      	mov	r0, r4
   232bc:	f7ff fed7 	bl	2306e <chunk_set>
   232c0:	2203      	movs	r2, #3
   232c2:	4639      	mov	r1, r7
   232c4:	462b      	mov	r3, r5
   232c6:	4620      	mov	r0, r4
   232c8:	f7ff fed1 	bl	2306e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   232cc:	2202      	movs	r2, #2
   232ce:	4631      	mov	r1, r6
   232d0:	e7df      	b.n	23292 <free_list_add+0x46>
   232d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000232d6 <free_list_remove>:
{
   232d6:	b538      	push	{r3, r4, r5, lr}
   232d8:	4604      	mov	r4, r0
   232da:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   232dc:	f7ff fed2 	bl	23084 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   232e0:	68a3      	ldr	r3, [r4, #8]
   232e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   232e6:	4601      	mov	r1, r0
   232e8:	d301      	bcc.n	232ee <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   232ea:	2801      	cmp	r0, #1
   232ec:	d009      	beq.n	23302 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   232ee:	4620      	mov	r0, r4
   232f0:	f7ff feea 	bl	230c8 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   232f4:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   232f6:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   232f8:	4620      	mov	r0, r4
}
   232fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   232fe:	f7ff bf35 	b.w	2316c <free_list_remove_bidx>
}
   23302:	bd38      	pop	{r3, r4, r5, pc}

00023304 <free_chunk>:
{
   23304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23306:	460c      	mov	r4, r1
   23308:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2330a:	f7ff febb 	bl	23084 <chunk_size>
   2330e:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23310:	2201      	movs	r2, #1
   23312:	4631      	mov	r1, r6
   23314:	4628      	mov	r0, r5
   23316:	f7ff fe9f 	bl	23058 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   2331a:	07c3      	lsls	r3, r0, #31
   2331c:	d40c      	bmi.n	23338 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   2331e:	4631      	mov	r1, r6
   23320:	4628      	mov	r0, r5
   23322:	f7ff ffd8 	bl	232d6 <free_list_remove>
	return c + chunk_size(h, c);
   23326:	4621      	mov	r1, r4
   23328:	4628      	mov	r0, r5
   2332a:	f7ff feab 	bl	23084 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2332e:	4621      	mov	r1, r4
   23330:	1822      	adds	r2, r4, r0
   23332:	4628      	mov	r0, r5
   23334:	f7ff fed5 	bl	230e2 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   23338:	2200      	movs	r2, #0
   2333a:	4621      	mov	r1, r4
   2333c:	4628      	mov	r0, r5
   2333e:	f7ff fe8b 	bl	23058 <chunk_field>
   23342:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   23344:	2201      	movs	r2, #1
   23346:	4639      	mov	r1, r7
   23348:	4628      	mov	r0, r5
   2334a:	f7ff fe85 	bl	23058 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   2334e:	f010 0601 	ands.w	r6, r0, #1
   23352:	d113      	bne.n	2337c <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   23354:	4639      	mov	r1, r7
   23356:	4628      	mov	r0, r5
   23358:	f7ff ffbd 	bl	232d6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   2335c:	4621      	mov	r1, r4
   2335e:	4632      	mov	r2, r6
   23360:	4628      	mov	r0, r5
   23362:	f7ff fe79 	bl	23058 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   23366:	4622      	mov	r2, r4
   23368:	1a21      	subs	r1, r4, r0
   2336a:	4628      	mov	r0, r5
   2336c:	f7ff feb9 	bl	230e2 <merge_chunks>
   23370:	4621      	mov	r1, r4
   23372:	4632      	mov	r2, r6
   23374:	4628      	mov	r0, r5
   23376:	f7ff fe6f 	bl	23058 <chunk_field>
   2337a:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   2337c:	4621      	mov	r1, r4
   2337e:	4628      	mov	r0, r5
}
   23380:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   23384:	f7ff bf62 	b.w	2324c <free_list_add>

00023388 <sys_heap_free>:
{
   23388:	b510      	push	{r4, lr}
	if (mem == NULL) {
   2338a:	b191      	cbz	r1, 233b2 <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   2338c:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   2338e:	6883      	ldr	r3, [r0, #8]
   23390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23394:	bf2c      	ite	cs
   23396:	2408      	movcs	r4, #8
   23398:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2339a:	1b0c      	subs	r4, r1, r4
   2339c:	1a24      	subs	r4, r4, r0
   2339e:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   233a0:	4621      	mov	r1, r4
   233a2:	2200      	movs	r2, #0
   233a4:	f7ff fe74 	bl	23090 <set_chunk_used>
	free_chunk(h, c);
   233a8:	4621      	mov	r1, r4
}
   233aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   233ae:	f7ff bfa9 	b.w	23304 <free_chunk>
}
   233b2:	bd10      	pop	{r4, pc}

000233b4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   233b4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   233b6:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   233b8:	b909      	cbnz	r1, 233be <sys_heap_alloc+0xa>
		return NULL;
   233ba:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   233bc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   233be:	68ab      	ldr	r3, [r5, #8]
   233c0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   233c4:	d9f9      	bls.n	233ba <sys_heap_alloc+0x6>
   233c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   233ca:	bf2c      	ite	cs
   233cc:	2208      	movcs	r2, #8
   233ce:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   233d0:	1dcc      	adds	r4, r1, #7
   233d2:	4414      	add	r4, r2
   233d4:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   233d6:	4621      	mov	r1, r4
   233d8:	4628      	mov	r0, r5
   233da:	f7ff fef6 	bl	231ca <alloc_chunk>
	if (c == 0U) {
   233de:	4606      	mov	r6, r0
   233e0:	2800      	cmp	r0, #0
   233e2:	d0ea      	beq.n	233ba <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   233e4:	4601      	mov	r1, r0
   233e6:	4628      	mov	r0, r5
   233e8:	f7ff fe4c 	bl	23084 <chunk_size>
   233ec:	42a0      	cmp	r0, r4
   233ee:	d909      	bls.n	23404 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   233f0:	4434      	add	r4, r6
   233f2:	4631      	mov	r1, r6
   233f4:	4628      	mov	r0, r5
   233f6:	4622      	mov	r2, r4
   233f8:	f7ff fe91 	bl	2311e <split_chunks>
		free_list_add(h, c + chunk_sz);
   233fc:	4621      	mov	r1, r4
   233fe:	4628      	mov	r0, r5
   23400:	f7ff ff24 	bl	2324c <free_list_add>
	set_chunk_used(h, c, true);
   23404:	4628      	mov	r0, r5
   23406:	2201      	movs	r2, #1
   23408:	4631      	mov	r1, r6
   2340a:	f7ff fe41 	bl	23090 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   2340e:	68ab      	ldr	r3, [r5, #8]
   23410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23414:	bf2c      	ite	cs
   23416:	2008      	movcs	r0, #8
   23418:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2341a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   2341e:	4428      	add	r0, r5
	return chunk_mem(h, c);
   23420:	e7cc      	b.n	233bc <sys_heap_alloc+0x8>

00023422 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   23422:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   23426:	6806      	ldr	r6, [r0, #0]
{
   23428:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   2342a:	424a      	negs	r2, r1
   2342c:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   23430:	ea31 0202 	bics.w	r2, r1, r2
   23434:	68b5      	ldr	r5, [r6, #8]
{
   23436:	460b      	mov	r3, r1
	if (align != rewind) {
   23438:	d00f      	beq.n	2345a <sys_heap_aligned_alloc+0x38>
   2343a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2343e:	bf34      	ite	cc
   23440:	2104      	movcc	r1, #4
   23442:	2108      	movcs	r1, #8
   23444:	42b9      	cmp	r1, r7
   23446:	460a      	mov	r2, r1
   23448:	46b9      	mov	r9, r7
   2344a:	bf28      	it	cs
   2344c:	463a      	movcs	r2, r7
		align -= rewind;
   2344e:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   23450:	b994      	cbnz	r4, 23478 <sys_heap_aligned_alloc+0x56>
		return NULL;
   23452:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   23454:	4628      	mov	r0, r5
   23456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2345a:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2345e:	bf34      	ite	cc
   23460:	2204      	movcc	r2, #4
   23462:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   23464:	4291      	cmp	r1, r2
   23466:	d804      	bhi.n	23472 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   23468:	4621      	mov	r1, r4
}
   2346a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2346e:	f7ff bfa1 	b.w	233b4 <sys_heap_alloc>
		rewind = 0;
   23472:	f04f 0900 	mov.w	r9, #0
   23476:	e7eb      	b.n	23450 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   23478:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   2347c:	d9e9      	bls.n	23452 <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   2347e:	1de1      	adds	r1, r4, #7
   23480:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   23484:	4439      	add	r1, r7
   23486:	bf2c      	ite	cs
   23488:	2308      	movcs	r3, #8
   2348a:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2348c:	1a89      	subs	r1, r1, r2
   2348e:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23490:	08c9      	lsrs	r1, r1, #3
   23492:	4630      	mov	r0, r6
   23494:	f7ff fe99 	bl	231ca <alloc_chunk>
	if (c0 == 0) {
   23498:	4680      	mov	r8, r0
   2349a:	2800      	cmp	r0, #0
   2349c:	d0d9      	beq.n	23452 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   2349e:	68b3      	ldr	r3, [r6, #8]
   234a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   234a4:	bf2c      	ite	cs
   234a6:	2308      	movcs	r3, #8
   234a8:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   234aa:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   234ae:	441d      	add	r5, r3
   234b0:	1e7a      	subs	r2, r7, #1
   234b2:	4435      	add	r5, r6
   234b4:	427f      	negs	r7, r7
   234b6:	4415      	add	r5, r2
   234b8:	403d      	ands	r5, r7
   234ba:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   234be:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   234c0:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   234c2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   234c4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   234c6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   234ca:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   234cc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   234d0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   234d4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   234d8:	d208      	bcs.n	234ec <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   234da:	4601      	mov	r1, r0
   234dc:	463a      	mov	r2, r7
   234de:	4630      	mov	r0, r6
   234e0:	f7ff fe1d 	bl	2311e <split_chunks>
		free_list_add(h, c0);
   234e4:	4641      	mov	r1, r8
   234e6:	4630      	mov	r0, r6
   234e8:	f7ff feb0 	bl	2324c <free_list_add>
	return c + chunk_size(h, c);
   234ec:	4639      	mov	r1, r7
   234ee:	4630      	mov	r0, r6
   234f0:	f7ff fdc8 	bl	23084 <chunk_size>
   234f4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   234f6:	4284      	cmp	r4, r0
   234f8:	d208      	bcs.n	2350c <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   234fa:	4639      	mov	r1, r7
   234fc:	4630      	mov	r0, r6
   234fe:	4622      	mov	r2, r4
   23500:	f7ff fe0d 	bl	2311e <split_chunks>
		free_list_add(h, c_end);
   23504:	4621      	mov	r1, r4
   23506:	4630      	mov	r0, r6
   23508:	f7ff fea0 	bl	2324c <free_list_add>
	set_chunk_used(h, c, true);
   2350c:	2201      	movs	r2, #1
   2350e:	4639      	mov	r1, r7
   23510:	4630      	mov	r0, r6
   23512:	f7ff fdbd 	bl	23090 <set_chunk_used>
	return mem;
   23516:	e79d      	b.n	23454 <sys_heap_aligned_alloc+0x32>

00023518 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   23518:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   2351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2351e:	bf2c      	ite	cs
   23520:	2508      	movcs	r5, #8
   23522:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   23524:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   23526:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   23528:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2352a:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2352e:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   23532:	2200      	movs	r2, #0
   23534:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   23536:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   23538:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2353a:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   2353c:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   23540:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   23542:	4629      	mov	r1, r5
	h->len = buf_sz;
   23544:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   23546:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   23548:	4620      	mov	r0, r4
   2354a:	f7ff fdbd 	bl	230c8 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2354e:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23550:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   23552:	1c41      	adds	r1, r0, #1
   23554:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   23556:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   2355a:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   2355c:	428b      	cmp	r3, r1
   2355e:	db29      	blt.n	235b4 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   23560:	4632      	mov	r2, r6
   23562:	4620      	mov	r0, r4
   23564:	2100      	movs	r1, #0
   23566:	f7ff fdab 	bl	230c0 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   2356a:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   2356c:	4620      	mov	r0, r4
   2356e:	2201      	movs	r2, #1
   23570:	2100      	movs	r1, #0
   23572:	f7ff fd8d 	bl	23090 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   23576:	463a      	mov	r2, r7
   23578:	4631      	mov	r1, r6
   2357a:	f7ff fda1 	bl	230c0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   2357e:	4633      	mov	r3, r6
   23580:	4631      	mov	r1, r6
   23582:	4620      	mov	r0, r4
   23584:	2200      	movs	r2, #0
   23586:	f7ff fd72 	bl	2306e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   2358a:	4629      	mov	r1, r5
   2358c:	4620      	mov	r0, r4
   2358e:	2200      	movs	r2, #0
   23590:	f7ff fd96 	bl	230c0 <set_chunk_size>
   23594:	463b      	mov	r3, r7
   23596:	4629      	mov	r1, r5
   23598:	4620      	mov	r0, r4
   2359a:	2200      	movs	r2, #0
   2359c:	f7ff fd67 	bl	2306e <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   235a0:	4629      	mov	r1, r5
   235a2:	4620      	mov	r0, r4
   235a4:	2201      	movs	r2, #1
   235a6:	f7ff fd73 	bl	23090 <set_chunk_used>

	free_list_add(h, chunk0_size);
   235aa:	4631      	mov	r1, r6
}
   235ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   235b0:	f7ff be4c 	b.w	2324c <free_list_add>
		h->buckets[i].next = 0;
   235b4:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   235b8:	3301      	adds	r3, #1
   235ba:	e7cf      	b.n	2355c <sys_heap_init+0x44>

000235bc <outs>:
{
   235bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   235c0:	4607      	mov	r7, r0
   235c2:	4688      	mov	r8, r1
   235c4:	4615      	mov	r5, r2
   235c6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   235c8:	4614      	mov	r4, r2
   235ca:	42b4      	cmp	r4, r6
   235cc:	eba4 0005 	sub.w	r0, r4, r5
   235d0:	d302      	bcc.n	235d8 <outs+0x1c>
   235d2:	b93e      	cbnz	r6, 235e4 <outs+0x28>
   235d4:	7823      	ldrb	r3, [r4, #0]
   235d6:	b12b      	cbz	r3, 235e4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   235d8:	f814 0b01 	ldrb.w	r0, [r4], #1
   235dc:	4641      	mov	r1, r8
   235de:	47b8      	blx	r7
		if (rc < 0) {
   235e0:	2800      	cmp	r0, #0
   235e2:	daf2      	bge.n	235ca <outs+0xe>
}
   235e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000235e8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   235e8:	4770      	bx	lr

000235ea <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   235ea:	2300      	movs	r3, #0
	list->head = NULL;
   235ec:	e9c0 3300 	strd	r3, r3, [r0]
}
   235f0:	4770      	bx	lr

000235f2 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   235f2:	6803      	ldr	r3, [r0, #0]
   235f4:	b923      	cbnz	r3, 23600 <log_list_add_tail+0xe>
		list->head = msg;
   235f6:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   235f8:	2300      	movs	r3, #0
	list->tail = msg;
   235fa:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   235fc:	600b      	str	r3, [r1, #0]
}
   235fe:	4770      	bx	lr
		list->tail->next = msg;
   23600:	6843      	ldr	r3, [r0, #4]
   23602:	6019      	str	r1, [r3, #0]
   23604:	e7f8      	b.n	235f8 <log_list_add_tail+0x6>

00023606 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   23606:	6800      	ldr	r0, [r0, #0]
   23608:	4770      	bx	lr

0002360a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2360a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2360c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2360e:	b108      	cbz	r0, 23614 <log_list_head_get+0xa>
		list->head = list->head->next;
   23610:	6802      	ldr	r2, [r0, #0]
   23612:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   23614:	4770      	bx	lr

00023616 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   23616:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23618:	f7df fcbe 	bl	2f98 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2361c:	b118      	cbz	r0, 23626 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2361e:	2301      	movs	r3, #1
   23620:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   23622:	2300      	movs	r3, #0
   23624:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   23626:	bd08      	pop	{r3, pc}

00023628 <k_cycle_get_32_wrapper>:
   23628:	f7e0 bd6a 	b.w	4100 <z_timer_cycle_get_32>

0002362c <dummy_timestamp>:
   2362c:	2000      	movs	r0, #0
   2362e:	4770      	bx	lr

00023630 <log_0>:
{
   23630:	b538      	push	{r3, r4, r5, lr}
   23632:	4605      	mov	r5, r0
   23634:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   23636:	f7ff ffee 	bl	23616 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2363a:	b128      	cbz	r0, 23648 <log_0+0x18>
		msg->str = str;
   2363c:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2363e:	4621      	mov	r1, r4
}
   23640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   23644:	f7df bbc2 	b.w	2dcc <msg_finalize>
}
   23648:	bd38      	pop	{r3, r4, r5, pc}

0002364a <log_1>:
{
   2364a:	b570      	push	{r4, r5, r6, lr}
   2364c:	4606      	mov	r6, r0
   2364e:	460d      	mov	r5, r1
   23650:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23652:	f7ff ffe0 	bl	23616 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23656:	b158      	cbz	r0, 23670 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23658:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   2365a:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2365c:	2101      	movs	r1, #1
   2365e:	f361 1207 	bfi	r2, r1, #4, #4
   23662:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   23664:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   23666:	4621      	mov	r1, r4
}
   23668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2366c:	f7df bbae 	b.w	2dcc <msg_finalize>
}
   23670:	bd70      	pop	{r4, r5, r6, pc}

00023672 <log_2>:
{
   23672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23676:	4680      	mov	r8, r0
   23678:	460f      	mov	r7, r1
   2367a:	4616      	mov	r6, r2
   2367c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2367e:	f7ff ffca 	bl	23616 <z_log_msg_std_alloc>

	if (msg != NULL) {
   23682:	b168      	cbz	r0, 236a0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   23684:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   23686:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   2368a:	2202      	movs	r2, #2
   2368c:	f362 1307 	bfi	r3, r2, #4, #4
   23690:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23692:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   23696:	4629      	mov	r1, r5
}
   23698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2369c:	f7df bb96 	b.w	2dcc <msg_finalize>
}
   236a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000236a4 <log_3>:
{
   236a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   236a8:	4680      	mov	r8, r0
   236aa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   236ae:	460f      	mov	r7, r1
   236b0:	4616      	mov	r6, r2
   236b2:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   236b4:	f7ff ffaf 	bl	23616 <z_log_msg_std_alloc>

	if (msg != NULL) {
   236b8:	b170      	cbz	r0, 236d8 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   236ba:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   236bc:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   236c0:	2203      	movs	r2, #3
   236c2:	f362 1307 	bfi	r3, r2, #4, #4
   236c6:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   236c8:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   236cc:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   236ce:	4649      	mov	r1, r9
}
   236d0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   236d4:	f7df bb7a 	b.w	2dcc <msg_finalize>
}
   236d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000236dc <log_n>:
{
   236dc:	b510      	push	{r4, lr}
   236de:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   236e0:	f000 f8a1 	bl	23826 <log_msg_create_n>
		if (msg == NULL) {
   236e4:	b120      	cbz	r0, 236f0 <log_n+0x14>
		msg_finalize(msg, src_level);
   236e6:	4621      	mov	r1, r4
}
   236e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   236ec:	f7df bb6e 	b.w	2dcc <msg_finalize>
}
   236f0:	bd10      	pop	{r4, pc}

000236f2 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   236f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   236f6:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   236f8:	8903      	ldrh	r3, [r0, #8]
{
   236fa:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   236fe:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   23702:	460e      	mov	r6, r1
   23704:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   23706:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   2370a:	d303      	bcc.n	23714 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   2370c:	2300      	movs	r3, #0
   2370e:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   23710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   23714:	680b      	ldr	r3, [r1, #0]
   23716:	4423      	add	r3, r4
   23718:	4293      	cmp	r3, r2
		*length = available_len - offset;
   2371a:	bf84      	itt	hi
   2371c:	1b13      	subhi	r3, r2, r4
   2371e:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23720:	2a0c      	cmp	r2, #12
	req_len = *length;
   23722:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   23726:	d92b      	bls.n	23780 <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   23728:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2372a:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   2372c:	d82e      	bhi.n	2378c <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   2372e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   23730:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23732:	454a      	cmp	r2, r9
   23734:	bf28      	it	cs
   23736:	464a      	movcs	r2, r9
   23738:	4615      	mov	r5, r2
		if (put_op) {
   2373a:	4420      	add	r0, r4
   2373c:	f1b8 0f00 	cmp.w	r8, #0
   23740:	d021      	beq.n	23786 <log_msg_hexdump_data_op+0x94>
   23742:	4631      	mov	r1, r6
   23744:	f008 f835 	bl	2b7b2 <memcpy>
		req_len -= cpy_len;
   23748:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2374c:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2374e:	f1b9 0f00 	cmp.w	r9, #0
   23752:	d0dd      	beq.n	23710 <log_msg_hexdump_data_op+0x1e>
   23754:	2f00      	cmp	r7, #0
   23756:	d0db      	beq.n	23710 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23758:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2375c:	454d      	cmp	r5, r9
   2375e:	bf28      	it	cs
   23760:	464d      	movcs	r5, r9
		if (put_op) {
   23762:	1d20      	adds	r0, r4, #4
   23764:	4438      	add	r0, r7
   23766:	462a      	mov	r2, r5
   23768:	f1b8 0f00 	cmp.w	r8, #0
   2376c:	d014      	beq.n	23798 <log_msg_hexdump_data_op+0xa6>
   2376e:	4631      	mov	r1, r6
   23770:	f008 f81f 	bl	2b7b2 <memcpy>
		req_len -= cpy_len;
   23774:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   23778:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   2377a:	442e      	add	r6, r5
		offset = 0;
   2377c:	2400      	movs	r4, #0
   2377e:	e7e6      	b.n	2374e <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   23780:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   23782:	2700      	movs	r7, #0
   23784:	e7d5      	b.n	23732 <log_msg_hexdump_data_op+0x40>
   23786:	4601      	mov	r1, r0
   23788:	4630      	mov	r0, r6
   2378a:	e7db      	b.n	23744 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   2378c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2378e:	2c1b      	cmp	r4, #27
   23790:	d9dd      	bls.n	2374e <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   23792:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   23794:	3c1c      	subs	r4, #28
   23796:	e7fa      	b.n	2378e <log_msg_hexdump_data_op+0x9c>
   23798:	4601      	mov	r1, r0
   2379a:	4630      	mov	r0, r6
   2379c:	e7e8      	b.n	23770 <log_msg_hexdump_data_op+0x7e>

0002379e <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2379e:	3004      	adds	r0, #4
   237a0:	f3bf 8f5b 	dmb	ish
   237a4:	e850 3f00 	ldrex	r3, [r0]
   237a8:	3301      	adds	r3, #1
   237aa:	e840 3200 	strex	r2, r3, [r0]
   237ae:	2a00      	cmp	r2, #0
   237b0:	d1f8      	bne.n	237a4 <log_msg_get+0x6>
   237b2:	f3bf 8f5b 	dmb	ish
}
   237b6:	4770      	bx	lr

000237b8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   237b8:	7a40      	ldrb	r0, [r0, #9]
}
   237ba:	0900      	lsrs	r0, r0, #4
   237bc:	4770      	bx	lr

000237be <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   237be:	7a43      	ldrb	r3, [r0, #9]
   237c0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   237c4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   237c8:	d216      	bcs.n	237f8 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   237ca:	2a03      	cmp	r2, #3
   237cc:	d803      	bhi.n	237d6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   237ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   237d2:	6948      	ldr	r0, [r1, #20]
   237d4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   237d6:	2901      	cmp	r1, #1
   237d8:	d803      	bhi.n	237e2 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   237da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   237de:	6988      	ldr	r0, [r1, #24]
   237e0:	4770      	bx	lr
	cont = msg->payload.ext.next;
   237e2:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   237e4:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   237e6:	2906      	cmp	r1, #6
   237e8:	d803      	bhi.n	237f2 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   237ea:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   237ee:	6848      	ldr	r0, [r1, #4]
   237f0:	4770      	bx	lr
		cont = cont->next;
   237f2:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   237f4:	3907      	subs	r1, #7
		cont = cont->next;
   237f6:	e7f6      	b.n	237e6 <log_msg_arg_get+0x28>
		return 0;
   237f8:	2000      	movs	r0, #0
}
   237fa:	4770      	bx	lr

000237fc <log_msg_put>:
{
   237fc:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   237fe:	1d02      	adds	r2, r0, #4
   23800:	f3bf 8f5b 	dmb	ish
   23804:	e852 1f00 	ldrex	r1, [r2]
   23808:	3901      	subs	r1, #1
   2380a:	e842 1c00 	strex	ip, r1, [r2]
   2380e:	f1bc 0f00 	cmp.w	ip, #0
   23812:	d1f7      	bne.n	23804 <log_msg_put+0x8>
   23814:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   23818:	685b      	ldr	r3, [r3, #4]
   2381a:	b90b      	cbnz	r3, 23820 <log_msg_put+0x24>
		msg_free(msg);
   2381c:	f7df bbd0 	b.w	2fc0 <msg_free>
}
   23820:	4770      	bx	lr

00023822 <log_msg_str_get>:
}
   23822:	6900      	ldr	r0, [r0, #16]
   23824:	4770      	bx	lr

00023826 <log_msg_create_n>:
{
   23826:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2382a:	4681      	mov	r9, r0
   2382c:	4688      	mov	r8, r1
   2382e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   23830:	f7df fbb2 	bl	2f98 <log_msg_chunk_alloc>
	if (msg != NULL) {
   23834:	4604      	mov	r4, r0
   23836:	b330      	cbz	r0, 23886 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   23838:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   2383a:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2383c:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   2383e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   23840:	8107      	strh	r7, [r0, #8]
   23842:	d909      	bls.n	23858 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   23844:	2202      	movs	r2, #2
   23846:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   23848:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   2384c:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   23850:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   23852:	f1ba 0f00 	cmp.w	sl, #0
   23856:	dc0e      	bgt.n	23876 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   23858:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   2385a:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   2385e:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   23862:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   23864:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   23866:	d818      	bhi.n	2389a <log_msg_create_n+0x74>
   23868:	00aa      	lsls	r2, r5, #2
   2386a:	4641      	mov	r1, r8
   2386c:	f104 0014 	add.w	r0, r4, #20
   23870:	f007 ff9f 	bl	2b7b2 <memcpy>
	while (nargs != 0U) {
   23874:	e007      	b.n	23886 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   23876:	f7df fb8f 	bl	2f98 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2387a:	4606      	mov	r6, r0
   2387c:	b930      	cbnz	r0, 2388c <log_msg_create_n+0x66>
			msg_free(msg);
   2387e:	4620      	mov	r0, r4
   23880:	f7df fb9e 	bl	2fc0 <msg_free>
			return NULL;
   23884:	4634      	mov	r4, r6
}
   23886:	4620      	mov	r0, r4
   23888:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   2388c:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   23890:	f1aa 0a07 	sub.w	sl, sl, #7
   23894:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   23896:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   23898:	e7db      	b.n	23852 <log_msg_create_n+0x2c>
   2389a:	f8d8 3000 	ldr.w	r3, [r8]
   2389e:	61a3      	str	r3, [r4, #24]
   238a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   238a4:	6967      	ldr	r7, [r4, #20]
   238a6:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   238a8:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   238aa:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   238ae:	2d07      	cmp	r5, #7
   238b0:	462e      	mov	r6, r5
   238b2:	bf28      	it	cs
   238b4:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   238b6:	ea4f 0986 	mov.w	r9, r6, lsl #2
   238ba:	4641      	mov	r1, r8
   238bc:	1d38      	adds	r0, r7, #4
   238be:	464a      	mov	r2, r9
   238c0:	f007 ff77 	bl	2b7b2 <memcpy>
	while (nargs != 0U) {
   238c4:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   238c6:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   238c8:	44c8      	add	r8, r9
	while (nargs != 0U) {
   238ca:	d1f0      	bne.n	238ae <log_msg_create_n+0x88>
   238cc:	e7db      	b.n	23886 <log_msg_create_n+0x60>

000238ce <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   238ce:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   238d0:	2400      	movs	r4, #0
   238d2:	9400      	str	r4, [sp, #0]
   238d4:	f7ff ff0d 	bl	236f2 <log_msg_hexdump_data_op>
}
   238d8:	b002      	add	sp, #8
   238da:	bd10      	pop	{r4, pc}

000238dc <buffer_write>:
{
   238dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238de:	4606      	mov	r6, r0
   238e0:	460d      	mov	r5, r1
   238e2:	4614      	mov	r4, r2
   238e4:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   238e6:	4621      	mov	r1, r4
   238e8:	4628      	mov	r0, r5
   238ea:	463a      	mov	r2, r7
   238ec:	47b0      	blx	r6
	} while (len != 0);
   238ee:	1a24      	subs	r4, r4, r0
		buf += processed;
   238f0:	4405      	add	r5, r0
	} while (len != 0);
   238f2:	d1f8      	bne.n	238e6 <buffer_write+0xa>
}
   238f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000238f6 <std_print>:
{
   238f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238fa:	b08e      	sub	sp, #56	; 0x38
   238fc:	af0e      	add	r7, sp, #56	; 0x38
   238fe:	4680      	mov	r8, r0
   23900:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   23902:	f7ff ff8e 	bl	23822 <log_msg_str_get>
   23906:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   23908:	4640      	mov	r0, r8
   2390a:	f7ff ff55 	bl	237b8 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2390e:	0083      	lsls	r3, r0, #2
   23910:	3307      	adds	r3, #7
   23912:	f023 0307 	bic.w	r3, r3, #7
   23916:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   2391a:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2391c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2391e:	f04f 0900 	mov.w	r9, #0
   23922:	45d1      	cmp	r9, sl
   23924:	d116      	bne.n	23954 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   23926:	4640      	mov	r0, r8
   23928:	f7ff ff46 	bl	237b8 <log_msg_nargs_get>
   2392c:	280f      	cmp	r0, #15
   2392e:	d81e      	bhi.n	2396e <std_print+0x78>
   23930:	e8df f010 	tbh	[pc, r0, lsl #1]
   23934:	00200019 	.word	0x00200019
   23938:	002d0026 	.word	0x002d0026
   2393c:	00410036 	.word	0x00410036
   23940:	005d004e 	.word	0x005d004e
   23944:	0081006e 	.word	0x0081006e
   23948:	00ad0096 	.word	0x00ad0096
   2394c:	00e100c6 	.word	0x00e100c6
   23950:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   23954:	4649      	mov	r1, r9
   23956:	4640      	mov	r0, r8
   23958:	f7ff ff31 	bl	237be <log_msg_arg_get>
   2395c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   23960:	f109 0901 	add.w	r9, r9, #1
   23964:	e7dd      	b.n	23922 <std_print+0x2c>
		print_formatted(log_output, str);
   23966:	4631      	mov	r1, r6
   23968:	4628      	mov	r0, r5
   2396a:	f7df fb67 	bl	303c <print_formatted>
}
   2396e:	46bd      	mov	sp, r7
   23970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   23974:	6822      	ldr	r2, [r4, #0]
   23976:	4631      	mov	r1, r6
   23978:	4628      	mov	r0, r5
   2397a:	f7df fb5f 	bl	303c <print_formatted>
		break;
   2397e:	e7f6      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   23980:	e9d4 2300 	ldrd	r2, r3, [r4]
   23984:	4631      	mov	r1, r6
   23986:	4628      	mov	r0, r5
   23988:	f7df fb58 	bl	303c <print_formatted>
		break;
   2398c:	e7ef      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2398e:	68a3      	ldr	r3, [r4, #8]
   23990:	9300      	str	r3, [sp, #0]
   23992:	e9d4 2300 	ldrd	r2, r3, [r4]
   23996:	4631      	mov	r1, r6
   23998:	4628      	mov	r0, r5
   2399a:	f7df fb4f 	bl	303c <print_formatted>
		break;
   2399e:	e7e6      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   239a0:	68e3      	ldr	r3, [r4, #12]
   239a2:	9301      	str	r3, [sp, #4]
   239a4:	68a3      	ldr	r3, [r4, #8]
   239a6:	9300      	str	r3, [sp, #0]
   239a8:	e9d4 2300 	ldrd	r2, r3, [r4]
   239ac:	4631      	mov	r1, r6
   239ae:	4628      	mov	r0, r5
   239b0:	f7df fb44 	bl	303c <print_formatted>
		break;
   239b4:	e7db      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   239b6:	6923      	ldr	r3, [r4, #16]
   239b8:	9302      	str	r3, [sp, #8]
   239ba:	68e3      	ldr	r3, [r4, #12]
   239bc:	9301      	str	r3, [sp, #4]
   239be:	68a3      	ldr	r3, [r4, #8]
   239c0:	9300      	str	r3, [sp, #0]
   239c2:	e9d4 2300 	ldrd	r2, r3, [r4]
   239c6:	4631      	mov	r1, r6
   239c8:	4628      	mov	r0, r5
   239ca:	f7df fb37 	bl	303c <print_formatted>
		break;
   239ce:	e7ce      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   239d0:	6963      	ldr	r3, [r4, #20]
   239d2:	9303      	str	r3, [sp, #12]
   239d4:	6923      	ldr	r3, [r4, #16]
   239d6:	9302      	str	r3, [sp, #8]
   239d8:	68e3      	ldr	r3, [r4, #12]
   239da:	9301      	str	r3, [sp, #4]
   239dc:	68a3      	ldr	r3, [r4, #8]
   239de:	9300      	str	r3, [sp, #0]
   239e0:	e9d4 2300 	ldrd	r2, r3, [r4]
   239e4:	4631      	mov	r1, r6
   239e6:	4628      	mov	r0, r5
   239e8:	f7df fb28 	bl	303c <print_formatted>
		break;
   239ec:	e7bf      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   239ee:	69a3      	ldr	r3, [r4, #24]
   239f0:	9304      	str	r3, [sp, #16]
   239f2:	6963      	ldr	r3, [r4, #20]
   239f4:	9303      	str	r3, [sp, #12]
   239f6:	6923      	ldr	r3, [r4, #16]
   239f8:	9302      	str	r3, [sp, #8]
   239fa:	68e3      	ldr	r3, [r4, #12]
   239fc:	9301      	str	r3, [sp, #4]
   239fe:	68a3      	ldr	r3, [r4, #8]
   23a00:	9300      	str	r3, [sp, #0]
   23a02:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a06:	4631      	mov	r1, r6
   23a08:	4628      	mov	r0, r5
   23a0a:	f7df fb17 	bl	303c <print_formatted>
		break;
   23a0e:	e7ae      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a10:	69e3      	ldr	r3, [r4, #28]
   23a12:	9305      	str	r3, [sp, #20]
   23a14:	69a3      	ldr	r3, [r4, #24]
   23a16:	9304      	str	r3, [sp, #16]
   23a18:	6963      	ldr	r3, [r4, #20]
   23a1a:	9303      	str	r3, [sp, #12]
   23a1c:	6923      	ldr	r3, [r4, #16]
   23a1e:	9302      	str	r3, [sp, #8]
   23a20:	68e3      	ldr	r3, [r4, #12]
   23a22:	9301      	str	r3, [sp, #4]
   23a24:	68a3      	ldr	r3, [r4, #8]
   23a26:	9300      	str	r3, [sp, #0]
   23a28:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a2c:	4631      	mov	r1, r6
   23a2e:	4628      	mov	r0, r5
   23a30:	f7df fb04 	bl	303c <print_formatted>
		break;
   23a34:	e79b      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a36:	6a23      	ldr	r3, [r4, #32]
   23a38:	9306      	str	r3, [sp, #24]
   23a3a:	69e3      	ldr	r3, [r4, #28]
   23a3c:	9305      	str	r3, [sp, #20]
   23a3e:	69a3      	ldr	r3, [r4, #24]
   23a40:	9304      	str	r3, [sp, #16]
   23a42:	6963      	ldr	r3, [r4, #20]
   23a44:	9303      	str	r3, [sp, #12]
   23a46:	6923      	ldr	r3, [r4, #16]
   23a48:	9302      	str	r3, [sp, #8]
   23a4a:	68e3      	ldr	r3, [r4, #12]
   23a4c:	9301      	str	r3, [sp, #4]
   23a4e:	68a3      	ldr	r3, [r4, #8]
   23a50:	9300      	str	r3, [sp, #0]
   23a52:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a56:	4631      	mov	r1, r6
   23a58:	4628      	mov	r0, r5
   23a5a:	f7df faef 	bl	303c <print_formatted>
		break;
   23a5e:	e786      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23a62:	9307      	str	r3, [sp, #28]
   23a64:	6a23      	ldr	r3, [r4, #32]
   23a66:	9306      	str	r3, [sp, #24]
   23a68:	69e3      	ldr	r3, [r4, #28]
   23a6a:	9305      	str	r3, [sp, #20]
   23a6c:	69a3      	ldr	r3, [r4, #24]
   23a6e:	9304      	str	r3, [sp, #16]
   23a70:	6963      	ldr	r3, [r4, #20]
   23a72:	9303      	str	r3, [sp, #12]
   23a74:	6923      	ldr	r3, [r4, #16]
   23a76:	9302      	str	r3, [sp, #8]
   23a78:	68e3      	ldr	r3, [r4, #12]
   23a7a:	9301      	str	r3, [sp, #4]
   23a7c:	68a3      	ldr	r3, [r4, #8]
   23a7e:	9300      	str	r3, [sp, #0]
   23a80:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a84:	4631      	mov	r1, r6
   23a86:	4628      	mov	r0, r5
   23a88:	f7df fad8 	bl	303c <print_formatted>
		break;
   23a8c:	e76f      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23a90:	9308      	str	r3, [sp, #32]
   23a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23a94:	9307      	str	r3, [sp, #28]
   23a96:	6a23      	ldr	r3, [r4, #32]
   23a98:	9306      	str	r3, [sp, #24]
   23a9a:	69e3      	ldr	r3, [r4, #28]
   23a9c:	9305      	str	r3, [sp, #20]
   23a9e:	69a3      	ldr	r3, [r4, #24]
   23aa0:	9304      	str	r3, [sp, #16]
   23aa2:	6963      	ldr	r3, [r4, #20]
   23aa4:	9303      	str	r3, [sp, #12]
   23aa6:	6923      	ldr	r3, [r4, #16]
   23aa8:	9302      	str	r3, [sp, #8]
   23aaa:	68e3      	ldr	r3, [r4, #12]
   23aac:	9301      	str	r3, [sp, #4]
   23aae:	68a3      	ldr	r3, [r4, #8]
   23ab0:	9300      	str	r3, [sp, #0]
   23ab2:	e9d4 2300 	ldrd	r2, r3, [r4]
   23ab6:	4631      	mov	r1, r6
   23ab8:	4628      	mov	r0, r5
   23aba:	f7df fabf 	bl	303c <print_formatted>
		break;
   23abe:	e756      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23ac0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23ac2:	9309      	str	r3, [sp, #36]	; 0x24
   23ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23ac6:	9308      	str	r3, [sp, #32]
   23ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23aca:	9307      	str	r3, [sp, #28]
   23acc:	6a23      	ldr	r3, [r4, #32]
   23ace:	9306      	str	r3, [sp, #24]
   23ad0:	69e3      	ldr	r3, [r4, #28]
   23ad2:	9305      	str	r3, [sp, #20]
   23ad4:	69a3      	ldr	r3, [r4, #24]
   23ad6:	9304      	str	r3, [sp, #16]
   23ad8:	6963      	ldr	r3, [r4, #20]
   23ada:	9303      	str	r3, [sp, #12]
   23adc:	6923      	ldr	r3, [r4, #16]
   23ade:	9302      	str	r3, [sp, #8]
   23ae0:	68e3      	ldr	r3, [r4, #12]
   23ae2:	9301      	str	r3, [sp, #4]
   23ae4:	68a3      	ldr	r3, [r4, #8]
   23ae6:	9300      	str	r3, [sp, #0]
   23ae8:	e9d4 2300 	ldrd	r2, r3, [r4]
   23aec:	4631      	mov	r1, r6
   23aee:	4628      	mov	r0, r5
   23af0:	f7df faa4 	bl	303c <print_formatted>
		break;
   23af4:	e73b      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23af6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23af8:	930a      	str	r3, [sp, #40]	; 0x28
   23afa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23afc:	9309      	str	r3, [sp, #36]	; 0x24
   23afe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23b00:	9308      	str	r3, [sp, #32]
   23b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23b04:	9307      	str	r3, [sp, #28]
   23b06:	6a23      	ldr	r3, [r4, #32]
   23b08:	9306      	str	r3, [sp, #24]
   23b0a:	69e3      	ldr	r3, [r4, #28]
   23b0c:	9305      	str	r3, [sp, #20]
   23b0e:	69a3      	ldr	r3, [r4, #24]
   23b10:	9304      	str	r3, [sp, #16]
   23b12:	6963      	ldr	r3, [r4, #20]
   23b14:	9303      	str	r3, [sp, #12]
   23b16:	6923      	ldr	r3, [r4, #16]
   23b18:	9302      	str	r3, [sp, #8]
   23b1a:	68e3      	ldr	r3, [r4, #12]
   23b1c:	9301      	str	r3, [sp, #4]
   23b1e:	68a3      	ldr	r3, [r4, #8]
   23b20:	9300      	str	r3, [sp, #0]
   23b22:	e9d4 2300 	ldrd	r2, r3, [r4]
   23b26:	4631      	mov	r1, r6
   23b28:	4628      	mov	r0, r5
   23b2a:	f7df fa87 	bl	303c <print_formatted>
		break;
   23b2e:	e71e      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23b30:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23b32:	930b      	str	r3, [sp, #44]	; 0x2c
   23b34:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23b36:	930a      	str	r3, [sp, #40]	; 0x28
   23b38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23b3a:	9309      	str	r3, [sp, #36]	; 0x24
   23b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23b3e:	9308      	str	r3, [sp, #32]
   23b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23b42:	9307      	str	r3, [sp, #28]
   23b44:	6a23      	ldr	r3, [r4, #32]
   23b46:	9306      	str	r3, [sp, #24]
   23b48:	69e3      	ldr	r3, [r4, #28]
   23b4a:	9305      	str	r3, [sp, #20]
   23b4c:	69a3      	ldr	r3, [r4, #24]
   23b4e:	9304      	str	r3, [sp, #16]
   23b50:	6963      	ldr	r3, [r4, #20]
   23b52:	9303      	str	r3, [sp, #12]
   23b54:	6923      	ldr	r3, [r4, #16]
   23b56:	9302      	str	r3, [sp, #8]
   23b58:	68e3      	ldr	r3, [r4, #12]
   23b5a:	9301      	str	r3, [sp, #4]
   23b5c:	68a3      	ldr	r3, [r4, #8]
   23b5e:	9300      	str	r3, [sp, #0]
   23b60:	e9d4 2300 	ldrd	r2, r3, [r4]
   23b64:	4631      	mov	r1, r6
   23b66:	4628      	mov	r0, r5
   23b68:	f7df fa68 	bl	303c <print_formatted>
		break;
   23b6c:	e6ff      	b.n	2396e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23b6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23b70:	930c      	str	r3, [sp, #48]	; 0x30
   23b72:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23b74:	930b      	str	r3, [sp, #44]	; 0x2c
   23b76:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23b78:	930a      	str	r3, [sp, #40]	; 0x28
   23b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23b7c:	9309      	str	r3, [sp, #36]	; 0x24
   23b7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23b80:	9308      	str	r3, [sp, #32]
   23b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23b84:	9307      	str	r3, [sp, #28]
   23b86:	6a23      	ldr	r3, [r4, #32]
   23b88:	9306      	str	r3, [sp, #24]
   23b8a:	69e3      	ldr	r3, [r4, #28]
   23b8c:	9305      	str	r3, [sp, #20]
   23b8e:	69a3      	ldr	r3, [r4, #24]
   23b90:	9304      	str	r3, [sp, #16]
   23b92:	6963      	ldr	r3, [r4, #20]
   23b94:	9303      	str	r3, [sp, #12]
   23b96:	6923      	ldr	r3, [r4, #16]
   23b98:	9302      	str	r3, [sp, #8]
   23b9a:	68e3      	ldr	r3, [r4, #12]
   23b9c:	9301      	str	r3, [sp, #4]
   23b9e:	68a3      	ldr	r3, [r4, #8]
   23ba0:	9300      	str	r3, [sp, #0]
   23ba2:	e9d4 2300 	ldrd	r2, r3, [r4]
   23ba6:	4631      	mov	r1, r6
   23ba8:	4628      	mov	r0, r5
   23baa:	f7df fa47 	bl	303c <print_formatted>
}
   23bae:	e6de      	b.n	2396e <std_print+0x78>

00023bb0 <log_output_flush>:
		     log_output->control_block->offset,
   23bb0:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   23bb2:	6881      	ldr	r1, [r0, #8]
{
   23bb4:	b510      	push	{r4, lr}
   23bb6:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   23bb8:	e9d2 2300 	ldrd	r2, r3, [r2]
   23bbc:	6800      	ldr	r0, [r0, #0]
   23bbe:	f7ff fe8d 	bl	238dc <buffer_write>
	log_output->control_block->offset = 0;
   23bc2:	6863      	ldr	r3, [r4, #4]
   23bc4:	2200      	movs	r2, #0
   23bc6:	601a      	str	r2, [r3, #0]
}
   23bc8:	bd10      	pop	{r4, pc}

00023bca <out_func>:
{
   23bca:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   23bcc:	684b      	ldr	r3, [r1, #4]
   23bce:	681a      	ldr	r2, [r3, #0]
   23bd0:	68cb      	ldr	r3, [r1, #12]
   23bd2:	429a      	cmp	r2, r3
{
   23bd4:	4605      	mov	r5, r0
   23bd6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   23bd8:	d102      	bne.n	23be0 <out_func+0x16>
		log_output_flush(out_ctx);
   23bda:	4608      	mov	r0, r1
   23bdc:	f7ff ffe8 	bl	23bb0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23be0:	6863      	ldr	r3, [r4, #4]
   23be2:	f3bf 8f5b 	dmb	ish
   23be6:	e853 2f00 	ldrex	r2, [r3]
   23bea:	1c51      	adds	r1, r2, #1
   23bec:	e843 1000 	strex	r0, r1, [r3]
   23bf0:	2800      	cmp	r0, #0
   23bf2:	d1f8      	bne.n	23be6 <out_func+0x1c>
   23bf4:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   23bf8:	68a3      	ldr	r3, [r4, #8]
   23bfa:	549d      	strb	r5, [r3, r2]
}
   23bfc:	2000      	movs	r0, #0
   23bfe:	bd38      	pop	{r3, r4, r5, pc}

00023c00 <settings_load>:
	return settings_load_subtree(NULL);
   23c00:	2000      	movs	r0, #0
   23c02:	f7df bcb5 	b.w	3570 <settings_load_subtree>

00023c06 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   23c06:	2200      	movs	r2, #0
   23c08:	4611      	mov	r1, r2
   23c0a:	f7df bc8b 	b.w	3524 <settings_save_one>

00023c0e <settings_name_steq>:
{
   23c0e:	4603      	mov	r3, r0
   23c10:	b530      	push	{r4, r5, lr}
   23c12:	4608      	mov	r0, r1
	if (next) {
   23c14:	b10a      	cbz	r2, 23c1a <settings_name_steq+0xc>
		*next = NULL;
   23c16:	2100      	movs	r1, #0
   23c18:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   23c1a:	b163      	cbz	r3, 23c36 <settings_name_steq+0x28>
   23c1c:	b190      	cbz	r0, 23c44 <settings_name_steq+0x36>
   23c1e:	1e41      	subs	r1, r0, #1
   23c20:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   23c22:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   23c26:	4604      	mov	r4, r0
   23c28:	f810 3b01 	ldrb.w	r3, [r0], #1
   23c2c:	b15d      	cbz	r5, 23c46 <settings_name_steq+0x38>
   23c2e:	429d      	cmp	r5, r3
   23c30:	d101      	bne.n	23c36 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23c32:	2d3d      	cmp	r5, #61	; 0x3d
   23c34:	d1f5      	bne.n	23c22 <settings_name_steq+0x14>
	return 0;
   23c36:	2000      	movs	r0, #0
   23c38:	e004      	b.n	23c44 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23c3a:	2b3d      	cmp	r3, #61	; 0x3d
   23c3c:	d008      	beq.n	23c50 <settings_name_steq+0x42>
   23c3e:	fab3 f083 	clz	r0, r3
   23c42:	0940      	lsrs	r0, r0, #5
}
   23c44:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23c46:	2b2f      	cmp	r3, #47	; 0x2f
   23c48:	d1f7      	bne.n	23c3a <settings_name_steq+0x2c>
		if (next) {
   23c4a:	b10a      	cbz	r2, 23c50 <settings_name_steq+0x42>
			*next = name + 1;
   23c4c:	3401      	adds	r4, #1
   23c4e:	6014      	str	r4, [r2, #0]
		return 1;
   23c50:	2001      	movs	r0, #1
   23c52:	e7f7      	b.n	23c44 <settings_name_steq+0x36>

00023c54 <settings_name_next>:
{
   23c54:	b530      	push	{r4, r5, lr}
   23c56:	4603      	mov	r3, r0
	if (next) {
   23c58:	b109      	cbz	r1, 23c5e <settings_name_next+0xa>
		*next = NULL;
   23c5a:	2200      	movs	r2, #0
   23c5c:	600a      	str	r2, [r1, #0]
	if (!name) {
   23c5e:	b16b      	cbz	r3, 23c7c <settings_name_next+0x28>
   23c60:	461a      	mov	r2, r3
   23c62:	4614      	mov	r4, r2
   23c64:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   23c66:	f812 5b01 	ldrb.w	r5, [r2], #1
   23c6a:	b135      	cbz	r5, 23c7a <settings_name_next+0x26>
   23c6c:	2d3d      	cmp	r5, #61	; 0x3d
   23c6e:	d004      	beq.n	23c7a <settings_name_next+0x26>
   23c70:	2d2f      	cmp	r5, #47	; 0x2f
   23c72:	d1f6      	bne.n	23c62 <settings_name_next+0xe>
		if (next) {
   23c74:	b109      	cbz	r1, 23c7a <settings_name_next+0x26>
			*next = name + 1;
   23c76:	3401      	adds	r4, #1
   23c78:	600c      	str	r4, [r1, #0]
}
   23c7a:	bd30      	pop	{r4, r5, pc}
		return 0;
   23c7c:	4618      	mov	r0, r3
   23c7e:	e7fc      	b.n	23c7a <settings_name_next+0x26>

00023c80 <settings_runtime_read_cb>:
{
   23c80:	b538      	push	{r3, r4, r5, lr}
   23c82:	4604      	mov	r4, r0
   23c84:	4615      	mov	r5, r2
	memcpy(data, arg->data, MIN(arg->len, len));
   23c86:	6862      	ldr	r2, [r4, #4]
   23c88:	42aa      	cmp	r2, r5
   23c8a:	bf28      	it	cs
   23c8c:	462a      	movcs	r2, r5
{
   23c8e:	4608      	mov	r0, r1
   23c90:	6821      	ldr	r1, [r4, #0]
   23c92:	f007 fd8e 	bl	2b7b2 <memcpy>
	return MIN(arg->len, len);
   23c96:	6860      	ldr	r0, [r4, #4]
}
   23c98:	42a8      	cmp	r0, r5
   23c9a:	bf28      	it	cs
   23c9c:	4628      	movcs	r0, r5
   23c9e:	bd38      	pop	{r3, r4, r5, pc}

00023ca0 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   23ca0:	2000      	movs	r0, #0
   23ca2:	4770      	bx	lr

00023ca4 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   23ca4:	2200      	movs	r2, #0
   23ca6:	8002      	strh	r2, [r0, #0]
   23ca8:	6042      	str	r2, [r0, #4]
}
   23caa:	4770      	bx	lr

00023cac <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   23cac:	68c2      	ldr	r2, [r0, #12]
   23cae:	b2cb      	uxtb	r3, r1
   23cb0:	210c      	movs	r1, #12
   23cb2:	fb03 2101 	mla	r1, r3, r1, r2
   23cb6:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   23cb8:	f000 0007 	and.w	r0, r0, #7
   23cbc:	4770      	bx	lr

00023cbe <set_off_state>:
	__asm__ volatile(
   23cbe:	f04f 0320 	mov.w	r3, #32
   23cc2:	f3ef 8211 	mrs	r2, BASEPRI
   23cc6:	f383 8811 	msr	BASEPRI, r3
   23cca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23cce:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23cd0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   23cd4:	d001      	beq.n	23cda <set_off_state+0x1c>
   23cd6:	428b      	cmp	r3, r1
   23cd8:	d107      	bne.n	23cea <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23cda:	2301      	movs	r3, #1
   23cdc:	6003      	str	r3, [r0, #0]
	int err = 0;
   23cde:	2000      	movs	r0, #0
	__asm__ volatile(
   23ce0:	f382 8811 	msr	BASEPRI, r2
   23ce4:	f3bf 8f6f 	isb	sy
}
   23ce8:	4770      	bx	lr
		err = -EPERM;
   23cea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23cee:	e7f7      	b.n	23ce0 <set_off_state+0x22>

00023cf0 <set_starting_state>:
{
   23cf0:	b510      	push	{r4, lr}
	__asm__ volatile(
   23cf2:	f04f 0320 	mov.w	r3, #32
   23cf6:	f3ef 8211 	mrs	r2, BASEPRI
   23cfa:	f383 8811 	msr	BASEPRI, r3
   23cfe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23d02:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23d04:	f003 0407 	and.w	r4, r3, #7
   23d08:	2c01      	cmp	r4, #1
   23d0a:	d106      	bne.n	23d1a <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23d0c:	6001      	str	r1, [r0, #0]
	int err = 0;
   23d0e:	2000      	movs	r0, #0
	__asm__ volatile(
   23d10:	f382 8811 	msr	BASEPRI, r2
   23d14:	f3bf 8f6f 	isb	sy
}
   23d18:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   23d1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   23d1e:	428b      	cmp	r3, r1
		err = -EALREADY;
   23d20:	bf14      	ite	ne
   23d22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   23d26:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   23d2a:	e7f1      	b.n	23d10 <set_starting_state+0x20>

00023d2c <set_on_state>:
	__asm__ volatile(
   23d2c:	f04f 0320 	mov.w	r3, #32
   23d30:	f3ef 8211 	mrs	r2, BASEPRI
   23d34:	f383 8811 	msr	BASEPRI, r3
   23d38:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   23d3c:	6803      	ldr	r3, [r0, #0]
   23d3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23d42:	f043 0302 	orr.w	r3, r3, #2
   23d46:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   23d48:	f382 8811 	msr	BASEPRI, r2
   23d4c:	f3bf 8f6f 	isb	sy
}
   23d50:	4770      	bx	lr

00023d52 <onoff_started_callback>:
	return &data->mgr[type];
   23d52:	68c0      	ldr	r0, [r0, #12]
{
   23d54:	b410      	push	{r4}
	return &data->mgr[type];
   23d56:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   23d58:	241c      	movs	r4, #28
   23d5a:	fb03 0004 	mla	r0, r3, r4, r0
   23d5e:	2100      	movs	r1, #0
}
   23d60:	bc10      	pop	{r4}
	notify(mgr, 0);
   23d62:	4710      	bx	r2

00023d64 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   23d64:	2000      	movs	r0, #0
   23d66:	f7f5 bbd9 	b.w	1951c <nrfx_clock_stop>

00023d6a <blocking_start_callback>:
{
   23d6a:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   23d6c:	f7fc b9b6 	b.w	200dc <z_impl_k_sem_give>

00023d70 <api_stop>:
{
   23d70:	b538      	push	{r3, r4, r5, lr}
   23d72:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   23d74:	240c      	movs	r4, #12
   23d76:	434c      	muls	r4, r1
{
   23d78:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   23d7a:	68c0      	ldr	r0, [r0, #12]
   23d7c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   23d80:	2180      	movs	r1, #128	; 0x80
   23d82:	4418      	add	r0, r3
   23d84:	f7ff ff9b 	bl	23cbe <set_off_state>
	if (err < 0) {
   23d88:	2800      	cmp	r0, #0
   23d8a:	db04      	blt.n	23d96 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   23d8c:	6869      	ldr	r1, [r5, #4]
   23d8e:	440c      	add	r4, r1
   23d90:	6863      	ldr	r3, [r4, #4]
   23d92:	4798      	blx	r3
	return 0;
   23d94:	2000      	movs	r0, #0
}
   23d96:	bd38      	pop	{r3, r4, r5, pc}

00023d98 <api_start>:
{
   23d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d9c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   23d9e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23da0:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   23da2:	434c      	muls	r4, r1
{
   23da4:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   23da6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   23daa:	2180      	movs	r1, #128	; 0x80
   23dac:	4428      	add	r0, r5
{
   23dae:	4690      	mov	r8, r2
   23db0:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   23db2:	f7ff ff9d 	bl	23cf0 <set_starting_state>
	if (err < 0) {
   23db6:	2800      	cmp	r0, #0
   23db8:	db06      	blt.n	23dc8 <api_start+0x30>
	subdata->cb = cb;
   23dba:	4425      	add	r5, r4
	subdata->user_data = user_data;
   23dbc:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   23dc0:	6873      	ldr	r3, [r6, #4]
   23dc2:	591b      	ldr	r3, [r3, r4]
   23dc4:	4798      	blx	r3
	return 0;
   23dc6:	2000      	movs	r0, #0
}
   23dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023dcc <gpio_pin_configure>:
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   23dcc:	04d3      	lsls	r3, r2, #19
{
   23dce:	b570      	push	{r4, r5, r6, lr}
	struct gpio_driver_data *data =
   23dd0:	68c5      	ldr	r5, [r0, #12]
{
   23dd2:	460e      	mov	r6, r1
   23dd4:	4614      	mov	r4, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   23dd6:	d506      	bpl.n	23de6 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   23dd8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   23ddc:	d003      	beq.n	23de6 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   23dde:	07d1      	lsls	r1, r2, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   23de0:	bf48      	it	mi
   23de2:	f482 54e0 	eormi.w	r4, r2, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
   23de6:	6883      	ldr	r3, [r0, #8]
   23de8:	4622      	mov	r2, r4
   23dea:	681b      	ldr	r3, [r3, #0]
   23dec:	4631      	mov	r1, r6
   23dee:	4798      	blx	r3
	if (ret != 0) {
   23df0:	b940      	cbnz	r0, 23e04 <gpio_pin_configure+0x38>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   23df2:	682b      	ldr	r3, [r5, #0]
   23df4:	2201      	movs	r2, #1
   23df6:	fa02 f106 	lsl.w	r1, r2, r6
   23dfa:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   23dfc:	bf4c      	ite	mi
   23dfe:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   23e00:	438b      	bicpl	r3, r1
   23e02:	602b      	str	r3, [r5, #0]
}
   23e04:	bd70      	pop	{r4, r5, r6, pc}

00023e06 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   23e06:	2301      	movs	r3, #1
   23e08:	fa03 f101 	lsl.w	r1, r3, r1
   23e0c:	68c3      	ldr	r3, [r0, #12]
   23e0e:	681b      	ldr	r3, [r3, #0]
   23e10:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   23e12:	bf18      	it	ne
   23e14:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   23e18:	b112      	cbz	r2, 23e20 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   23e1a:	6883      	ldr	r3, [r0, #8]
   23e1c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   23e1e:	4718      	bx	r3
   23e20:	6883      	ldr	r3, [r0, #8]
   23e22:	691b      	ldr	r3, [r3, #16]
   23e24:	e7fb      	b.n	23e1e <gpio_pin_set+0x18>

00023e26 <st7789v_read>:
}
   23e26:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23e2a:	4770      	bx	lr

00023e2c <st7789v_get_framebuffer>:
}
   23e2c:	2000      	movs	r0, #0
   23e2e:	4770      	bx	lr

00023e30 <st7789v_set_brightness>:
}
   23e30:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23e34:	4770      	bx	lr

00023e36 <st7789v_get_capabilities>:
{
   23e36:	b538      	push	{r3, r4, r5, lr}
   23e38:	460b      	mov	r3, r1
__ssp_bos_icheck3(memset, void *, int)
   23e3a:	2410      	movs	r4, #16
	struct st7789v_data *data = (struct st7789v_data *)dev->data;
   23e3c:	68c5      	ldr	r5, [r0, #12]
   23e3e:	4622      	mov	r2, r4
   23e40:	2100      	movs	r1, #0
   23e42:	4618      	mov	r0, r3
   23e44:	f007 fcd6 	bl	2b7f4 <memset>
	capabilities->x_resolution = data->width;
   23e48:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   23e4a:	8002      	strh	r2, [r0, #0]
	capabilities->y_resolution = data->height;
   23e4c:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
   23e4e:	7304      	strb	r4, [r0, #12]
	capabilities->y_resolution = data->height;
   23e50:	8042      	strh	r2, [r0, #2]
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
   23e52:	6044      	str	r4, [r0, #4]
}
   23e54:	bd38      	pop	{r3, r4, r5, pc}

00023e56 <st7789v_set_contrast>:
   23e56:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23e5a:	4770      	bx	lr

00023e5c <st7789v_transmit>:
{
   23e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e60:	4604      	mov	r4, r0
   23e62:	b086      	sub	sp, #24
   23e64:	461f      	mov	r7, r3
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23e66:	4625      	mov	r5, r4
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e68:	f10d 0307 	add.w	r3, sp, #7
{
   23e6c:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e70:	9302      	str	r3, [sp, #8]
{
   23e72:	4616      	mov	r6, r2
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   23e74:	ab02      	add	r3, sp, #8
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e76:	2201      	movs	r2, #1
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e78:	2112      	movs	r1, #18
   23e7a:	6a00      	ldr	r0, [r0, #32]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e7c:	9203      	str	r2, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   23e7e:	e9cd 3204 	strd	r3, r2, [sp, #16]
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e82:	f7ff ffc0 	bl	23e06 <gpio_pin_set>
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23e86:	f855 0b04 	ldr.w	r0, [r5], #4
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   23e8a:	6883      	ldr	r3, [r0, #8]
   23e8c:	aa04      	add	r2, sp, #16
   23e8e:	f8d3 8000 	ldr.w	r8, [r3]
   23e92:	4629      	mov	r1, r5
   23e94:	2300      	movs	r3, #0
   23e96:	47c0      	blx	r8
	if (tx_data != NULL) {
   23e98:	b16e      	cbz	r6, 23eb6 <st7789v_transmit+0x5a>
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e9a:	6a20      	ldr	r0, [r4, #32]
   23e9c:	2200      	movs	r2, #0
   23e9e:	2112      	movs	r1, #18
		tx_buf.len = tx_count;
   23ea0:	e9cd 6702 	strd	r6, r7, [sp, #8]
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23ea4:	f7ff ffaf 	bl	23e06 <gpio_pin_set>
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23ea8:	6820      	ldr	r0, [r4, #0]
   23eaa:	6883      	ldr	r3, [r0, #8]
   23eac:	aa04      	add	r2, sp, #16
   23eae:	681c      	ldr	r4, [r3, #0]
   23eb0:	4629      	mov	r1, r5
   23eb2:	2300      	movs	r3, #0
   23eb4:	47a0      	blx	r4
}
   23eb6:	b006      	add	sp, #24
   23eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023ebc <st7789v_blanking_on>:
{
   23ebc:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_OFF, NULL, 0);
   23ebe:	2300      	movs	r3, #0
   23ec0:	68c0      	ldr	r0, [r0, #12]
   23ec2:	461a      	mov	r2, r3
   23ec4:	2128      	movs	r1, #40	; 0x28
   23ec6:	f7ff ffc9 	bl	23e5c <st7789v_transmit>
}
   23eca:	2000      	movs	r0, #0
   23ecc:	bd08      	pop	{r3, pc}

00023ece <st7789v_blanking_off>:
{
   23ece:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_ON, NULL, 0);
   23ed0:	2300      	movs	r3, #0
   23ed2:	68c0      	ldr	r0, [r0, #12]
   23ed4:	461a      	mov	r2, r3
   23ed6:	2129      	movs	r1, #41	; 0x29
   23ed8:	f7ff ffc0 	bl	23e5c <st7789v_transmit>
}
   23edc:	2000      	movs	r0, #0
   23ede:	bd08      	pop	{r3, pc}

00023ee0 <st7789v_write>:
{
   23ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->data;
   23ee4:	68c5      	ldr	r5, [r0, #12]
{
   23ee6:	461c      	mov	r4, r3
	uint16_t ram_x = x + data->x_offset;
   23ee8:	8d28      	ldrh	r0, [r5, #40]	; 0x28
	uint16_t ram_y = y + data->y_offset;
   23eea:	f8b5 802a 	ldrh.w	r8, [r5, #42]	; 0x2a
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
   23eee:	889b      	ldrh	r3, [r3, #4]
   23ef0:	88e6      	ldrh	r6, [r4, #6]
	uint16_t ram_x = x + data->x_offset;
   23ef2:	4401      	add	r1, r0
	uint16_t ram_y = y + data->y_offset;
   23ef4:	4442      	add	r2, r8
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   23ef6:	3b01      	subs	r3, #1
{
   23ef8:	b085      	sub	sp, #20
	uint16_t ram_y = y + data->y_offset;
   23efa:	fa1f f882 	uxth.w	r8, r2
	spi_data[0] = sys_cpu_to_be16(ram_x);
   23efe:	ba4a      	rev16	r2, r1
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   23f00:	fa13 f181 	uxtah	r1, r3, r1
   23f04:	ba49      	rev16	r1, r1
	spi_data[0] = sys_cpu_to_be16(ram_x);
   23f06:	f8ad 2008 	strh.w	r2, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   23f0a:	f8ad 100a 	strh.w	r1, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_CASET, (uint8_t *)&spi_data[0], 4);
   23f0e:	2304      	movs	r3, #4
   23f10:	aa02      	add	r2, sp, #8
   23f12:	212a      	movs	r1, #42	; 0x2a
   23f14:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23f16:	3e01      	subs	r6, #1
{
   23f18:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23f1a:	4446      	add	r6, r8
	st7789v_transmit(data, ST7789V_CMD_CASET, (uint8_t *)&spi_data[0], 4);
   23f1c:	f7ff ff9e 	bl	23e5c <st7789v_transmit>
	spi_data[0] = sys_cpu_to_be16(ram_y);
   23f20:	fa98 f398 	rev16.w	r3, r8
   23f24:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23f28:	ba76      	rev16	r6, r6
	st7789v_transmit(data, ST7789V_CMD_RASET, (uint8_t *)&spi_data[0], 4);
   23f2a:	2304      	movs	r3, #4
   23f2c:	aa02      	add	r2, sp, #8
   23f2e:	212b      	movs	r1, #43	; 0x2b
   23f30:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23f32:	f8ad 600a 	strh.w	r6, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_RASET, (uint8_t *)&spi_data[0], 4);
   23f36:	f7ff ff91 	bl	23e5c <st7789v_transmit>
	if (desc->pitch > desc->width) {
   23f3a:	88a3      	ldrh	r3, [r4, #4]
   23f3c:	8922      	ldrh	r2, [r4, #8]
   23f3e:	88e6      	ldrh	r6, [r4, #6]
		nbr_of_writes = desc->height;
   23f40:	429a      	cmp	r2, r3
   23f42:	bf84      	itt	hi
   23f44:	46b0      	movhi	r8, r6
   23f46:	2601      	movhi	r6, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   23f48:	fb06 f303 	mul.w	r3, r6, r3
   23f4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   23f50:	463a      	mov	r2, r7
   23f52:	f04f 012c 	mov.w	r1, #44	; 0x2c
   23f56:	4628      	mov	r0, r5
		nbr_of_writes = desc->height;
   23f58:	bf98      	it	ls
   23f5a:	f04f 0801 	movls.w	r8, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   23f5e:	f7ff ff7d 	bl	23e5c <st7789v_transmit>
	tx_bufs.count = 1;
   23f62:	2301      	movs	r3, #1
   23f64:	9303      	str	r3, [sp, #12]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   23f66:	8923      	ldrh	r3, [r4, #8]
	tx_bufs.buffers = &tx_buf;
   23f68:	f8cd d008 	str.w	sp, [sp, #8]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   23f6c:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   23f70:	f04f 0900 	mov.w	r9, #0
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23f74:	f105 0a04 	add.w	sl, r5, #4
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   23f78:	f109 0901 	add.w	r9, r9, #1
   23f7c:	fa1f f389 	uxth.w	r3, r9
   23f80:	4598      	cmp	r8, r3
   23f82:	d803      	bhi.n	23f8c <st7789v_write+0xac>
}
   23f84:	2000      	movs	r0, #0
   23f86:	b005      	add	sp, #20
   23f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   23f8c:	88a3      	ldrh	r3, [r4, #4]
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23f8e:	6828      	ldr	r0, [r5, #0]
		tx_buf.buf = (void *)write_data_start;
   23f90:	9700      	str	r7, [sp, #0]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   23f92:	4373      	muls	r3, r6
   23f94:	005b      	lsls	r3, r3, #1
   23f96:	9301      	str	r3, [sp, #4]
   23f98:	6883      	ldr	r3, [r0, #8]
   23f9a:	aa02      	add	r2, sp, #8
   23f9c:	f8d3 b000 	ldr.w	fp, [r3]
   23fa0:	4651      	mov	r1, sl
   23fa2:	2300      	movs	r3, #0
   23fa4:	47d8      	blx	fp
		write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   23fa6:	8923      	ldrh	r3, [r4, #8]
   23fa8:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   23fac:	e7e4      	b.n	23f78 <st7789v_write+0x98>

00023fae <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   23fae:	4770      	bx	lr

00023fb0 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   23fb0:	4770      	bx	lr

00023fb2 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   23fb2:	f7e0 b8bf 	b.w	4134 <_DoInit>

00023fb6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   23fb6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   23fb8:	f7ff fffb 	bl	23fb2 <SEGGER_RTT_Init>

	return 0;
}
   23fbc:	2000      	movs	r0, #0
   23fbe:	bd08      	pop	{r3, pc}

00023fc0 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23fc0:	b538      	push	{r3, r4, r5, lr}
   23fc2:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   23fc4:	42ab      	cmp	r3, r5
{
   23fc6:	4611      	mov	r1, r2
   23fc8:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   23fca:	d804      	bhi.n	23fd6 <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23fcc:	461a      	mov	r2, r3
   23fce:	f007 fbf0 	bl	2b7b2 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23fd2:	4620      	mov	r0, r4
   23fd4:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   23fd6:	2400      	movs	r4, #0
   23fd8:	e7fb      	b.n	23fd2 <_copy+0x12>

00023fda <_set>:
__ssp_bos_icheck3(memset, void *, int)
   23fda:	f007 bc0b 	b.w	2b7f4 <memset>

00023fde <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23fde:	09c3      	lsrs	r3, r0, #7
   23fe0:	005a      	lsls	r2, r3, #1
   23fe2:	4413      	add	r3, r2
   23fe4:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   23fe8:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   23fec:	b2c0      	uxtb	r0, r0
   23fee:	4770      	bx	lr

00023ff0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23ff0:	78cb      	ldrb	r3, [r1, #3]
   23ff2:	7802      	ldrb	r2, [r0, #0]
   23ff4:	4053      	eors	r3, r2
   23ff6:	7003      	strb	r3, [r0, #0]
   23ff8:	884b      	ldrh	r3, [r1, #2]
   23ffa:	7842      	ldrb	r2, [r0, #1]
   23ffc:	4053      	eors	r3, r2
   23ffe:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   24000:	680a      	ldr	r2, [r1, #0]
   24002:	7883      	ldrb	r3, [r0, #2]
   24004:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24008:	7083      	strb	r3, [r0, #2]
   2400a:	680a      	ldr	r2, [r1, #0]
   2400c:	78c3      	ldrb	r3, [r0, #3]
   2400e:	4053      	eors	r3, r2
   24010:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   24012:	79cb      	ldrb	r3, [r1, #7]
   24014:	7902      	ldrb	r2, [r0, #4]
   24016:	4053      	eors	r3, r2
   24018:	7103      	strb	r3, [r0, #4]
   2401a:	88cb      	ldrh	r3, [r1, #6]
   2401c:	7942      	ldrb	r2, [r0, #5]
   2401e:	4053      	eors	r3, r2
   24020:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   24022:	684a      	ldr	r2, [r1, #4]
   24024:	7983      	ldrb	r3, [r0, #6]
   24026:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2402a:	7183      	strb	r3, [r0, #6]
   2402c:	684a      	ldr	r2, [r1, #4]
   2402e:	79c3      	ldrb	r3, [r0, #7]
   24030:	4053      	eors	r3, r2
   24032:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   24034:	7acb      	ldrb	r3, [r1, #11]
   24036:	7a02      	ldrb	r2, [r0, #8]
   24038:	4053      	eors	r3, r2
   2403a:	7203      	strb	r3, [r0, #8]
   2403c:	7a42      	ldrb	r2, [r0, #9]
   2403e:	894b      	ldrh	r3, [r1, #10]
   24040:	4053      	eors	r3, r2
   24042:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   24044:	688a      	ldr	r2, [r1, #8]
   24046:	7a83      	ldrb	r3, [r0, #10]
   24048:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2404c:	7283      	strb	r3, [r0, #10]
   2404e:	688a      	ldr	r2, [r1, #8]
   24050:	7ac3      	ldrb	r3, [r0, #11]
   24052:	4053      	eors	r3, r2
   24054:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   24056:	7bcb      	ldrb	r3, [r1, #15]
   24058:	7b02      	ldrb	r2, [r0, #12]
   2405a:	4053      	eors	r3, r2
   2405c:	7303      	strb	r3, [r0, #12]
   2405e:	89cb      	ldrh	r3, [r1, #14]
   24060:	7b42      	ldrb	r2, [r0, #13]
   24062:	4053      	eors	r3, r2
   24064:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   24066:	68ca      	ldr	r2, [r1, #12]
   24068:	7b83      	ldrb	r3, [r0, #14]
   2406a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2406e:	7383      	strb	r3, [r0, #14]
   24070:	68ca      	ldr	r2, [r1, #12]
   24072:	7bc3      	ldrb	r3, [r0, #15]
   24074:	4053      	eors	r3, r2
   24076:	73c3      	strb	r3, [r0, #15]
}
   24078:	4770      	bx	lr

0002407a <shift_rows>:
{
   2407a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2407c:	7802      	ldrb	r2, [r0, #0]
   2407e:	f88d 2000 	strb.w	r2, [sp]
   24082:	7942      	ldrb	r2, [r0, #5]
   24084:	f88d 2001 	strb.w	r2, [sp, #1]
   24088:	7a82      	ldrb	r2, [r0, #10]
   2408a:	f88d 2002 	strb.w	r2, [sp, #2]
   2408e:	7bc2      	ldrb	r2, [r0, #15]
   24090:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   24094:	7902      	ldrb	r2, [r0, #4]
   24096:	f88d 2004 	strb.w	r2, [sp, #4]
   2409a:	7a42      	ldrb	r2, [r0, #9]
   2409c:	f88d 2005 	strb.w	r2, [sp, #5]
   240a0:	7b82      	ldrb	r2, [r0, #14]
   240a2:	f88d 2006 	strb.w	r2, [sp, #6]
   240a6:	78c2      	ldrb	r2, [r0, #3]
   240a8:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   240ac:	7a02      	ldrb	r2, [r0, #8]
   240ae:	f88d 2008 	strb.w	r2, [sp, #8]
   240b2:	7b42      	ldrb	r2, [r0, #13]
   240b4:	f88d 2009 	strb.w	r2, [sp, #9]
   240b8:	7882      	ldrb	r2, [r0, #2]
   240ba:	f88d 200a 	strb.w	r2, [sp, #10]
   240be:	79c2      	ldrb	r2, [r0, #7]
   240c0:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   240c4:	7b02      	ldrb	r2, [r0, #12]
   240c6:	f88d 200c 	strb.w	r2, [sp, #12]
   240ca:	7842      	ldrb	r2, [r0, #1]
   240cc:	7ac3      	ldrb	r3, [r0, #11]
   240ce:	f88d 200d 	strb.w	r2, [sp, #13]
   240d2:	7982      	ldrb	r2, [r0, #6]
   240d4:	f88d 200e 	strb.w	r2, [sp, #14]
   240d8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   240dc:	2310      	movs	r3, #16
   240de:	466a      	mov	r2, sp
   240e0:	4619      	mov	r1, r3
   240e2:	f7ff ff6d 	bl	23fc0 <_copy>
}
   240e6:	b005      	add	sp, #20
   240e8:	f85d fb04 	ldr.w	pc, [sp], #4

000240ec <mult_row_column>:
{
   240ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   240ee:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   240f0:	7808      	ldrb	r0, [r1, #0]
{
   240f2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   240f4:	f7ff ff73 	bl	23fde <_double_byte>
   240f8:	4605      	mov	r5, r0
   240fa:	7860      	ldrb	r0, [r4, #1]
   240fc:	f7ff ff6f 	bl	23fde <_double_byte>
   24100:	78a2      	ldrb	r2, [r4, #2]
   24102:	7863      	ldrb	r3, [r4, #1]
   24104:	4053      	eors	r3, r2
   24106:	78e2      	ldrb	r2, [r4, #3]
   24108:	4053      	eors	r3, r2
   2410a:	405d      	eors	r5, r3
   2410c:	4045      	eors	r5, r0
   2410e:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   24110:	7860      	ldrb	r0, [r4, #1]
   24112:	7827      	ldrb	r7, [r4, #0]
   24114:	f7ff ff63 	bl	23fde <_double_byte>
   24118:	4605      	mov	r5, r0
   2411a:	78a0      	ldrb	r0, [r4, #2]
   2411c:	f7ff ff5f 	bl	23fde <_double_byte>
   24120:	78a3      	ldrb	r3, [r4, #2]
   24122:	405f      	eors	r7, r3
   24124:	78e3      	ldrb	r3, [r4, #3]
   24126:	405f      	eors	r7, r3
   24128:	407d      	eors	r5, r7
   2412a:	4045      	eors	r5, r0
   2412c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2412e:	78a0      	ldrb	r0, [r4, #2]
   24130:	7865      	ldrb	r5, [r4, #1]
   24132:	7827      	ldrb	r7, [r4, #0]
   24134:	f7ff ff53 	bl	23fde <_double_byte>
   24138:	406f      	eors	r7, r5
   2413a:	4605      	mov	r5, r0
   2413c:	78e0      	ldrb	r0, [r4, #3]
   2413e:	f7ff ff4e 	bl	23fde <_double_byte>
   24142:	78e3      	ldrb	r3, [r4, #3]
   24144:	405f      	eors	r7, r3
   24146:	407d      	eors	r5, r7
   24148:	4045      	eors	r5, r0
   2414a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2414c:	7820      	ldrb	r0, [r4, #0]
   2414e:	f7ff ff46 	bl	23fde <_double_byte>
   24152:	7863      	ldrb	r3, [r4, #1]
   24154:	7825      	ldrb	r5, [r4, #0]
   24156:	405d      	eors	r5, r3
   24158:	78a3      	ldrb	r3, [r4, #2]
   2415a:	405d      	eors	r5, r3
   2415c:	4045      	eors	r5, r0
   2415e:	78e0      	ldrb	r0, [r4, #3]
   24160:	f7ff ff3d 	bl	23fde <_double_byte>
   24164:	b2ed      	uxtb	r5, r5
   24166:	4045      	eors	r5, r0
   24168:	70f5      	strb	r5, [r6, #3]
}
   2416a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002416c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2416c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2416e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24170:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24172:	f912 3b10 	ldrsb.w	r3, [r2], #16
   24176:	2b00      	cmp	r3, #0
   24178:	bfb4      	ite	lt
   2417a:	2387      	movlt	r3, #135	; 0x87
   2417c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2417e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   24182:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   24186:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   24188:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2418c:	d002      	beq.n	24194 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2418e:	7813      	ldrb	r3, [r2, #0]
   24190:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   24192:	e7f4      	b.n	2417e <gf_double+0x12>
	}
}
   24194:	bd10      	pop	{r4, pc}

00024196 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   24196:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24198:	b120      	cbz	r0, 241a4 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2419a:	2258      	movs	r2, #88	; 0x58
   2419c:	2100      	movs	r1, #0
   2419e:	f7ff ff1c 	bl	23fda <_set>
   241a2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   241a4:	bd08      	pop	{r3, pc}

000241a6 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   241a6:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   241a8:	4604      	mov	r4, r0
   241aa:	b188      	cbz	r0, 241d0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   241ac:	2210      	movs	r2, #16
   241ae:	2100      	movs	r1, #0
   241b0:	f7ff ff13 	bl	23fda <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   241b4:	2210      	movs	r2, #16
   241b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   241ba:	2100      	movs	r1, #0
   241bc:	f7ff ff0d 	bl	23fda <_set>
	s->leftover_offset = 0;
   241c0:	2300      	movs	r3, #0
   241c2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   241c4:	2200      	movs	r2, #0
   241c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   241ca:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   241ce:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   241d0:	bd10      	pop	{r4, pc}

000241d2 <tc_cmac_setup>:
{
   241d2:	b570      	push	{r4, r5, r6, lr}
   241d4:	460d      	mov	r5, r1
   241d6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   241d8:	4604      	mov	r4, r0
   241da:	b310      	cbz	r0, 24222 <tc_cmac_setup+0x50>
   241dc:	b311      	cbz	r1, 24224 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   241de:	2258      	movs	r2, #88	; 0x58
   241e0:	2100      	movs	r1, #0
   241e2:	f7ff fefa 	bl	23fda <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   241e6:	4629      	mov	r1, r5
	s->sched = sched;
   241e8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   241ea:	4630      	mov	r0, r6
   241ec:	f7e0 f828 	bl	4240 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   241f0:	2210      	movs	r2, #16
   241f2:	2100      	movs	r1, #0
   241f4:	4620      	mov	r0, r4
   241f6:	f7ff fef0 	bl	23fda <_set>
	gf_double (s->K1, s->iv);
   241fa:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   241fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24200:	4621      	mov	r1, r4
   24202:	4620      	mov	r0, r4
   24204:	f7e0 f86e 	bl	42e4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   24208:	4621      	mov	r1, r4
   2420a:	4628      	mov	r0, r5
   2420c:	f7ff ffae 	bl	2416c <gf_double>
	gf_double (s->K2, s->K1);
   24210:	4629      	mov	r1, r5
   24212:	f104 0020 	add.w	r0, r4, #32
   24216:	f7ff ffa9 	bl	2416c <gf_double>
	tc_cmac_init(s);
   2421a:	4620      	mov	r0, r4
   2421c:	f7ff ffc3 	bl	241a6 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24220:	2001      	movs	r0, #1
}
   24222:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24224:	4608      	mov	r0, r1
   24226:	e7fc      	b.n	24222 <tc_cmac_setup+0x50>

00024228 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   24228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2422c:	460d      	mov	r5, r1
   2422e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24230:	4604      	mov	r4, r0
   24232:	2800      	cmp	r0, #0
   24234:	d062      	beq.n	242fc <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24236:	b912      	cbnz	r2, 2423e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   24238:	2001      	movs	r0, #1
}
   2423a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2423e:	2900      	cmp	r1, #0
   24240:	d05c      	beq.n	242fc <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   24242:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   24246:	ea50 0301 	orrs.w	r3, r0, r1
   2424a:	d057      	beq.n	242fc <tc_cmac_update+0xd4>
	s->countdown--;
   2424c:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   24250:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   24254:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   24258:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2425c:	f1b8 0f00 	cmp.w	r8, #0
   24260:	d02a      	beq.n	242b8 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24262:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   24266:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2426a:	42be      	cmp	r6, r7
   2426c:	4420      	add	r0, r4
   2426e:	d208      	bcs.n	24282 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24270:	462a      	mov	r2, r5
   24272:	4633      	mov	r3, r6
   24274:	4631      	mov	r1, r6
   24276:	f7ff fea3 	bl	23fc0 <_copy>
			s->leftover_offset += data_length;
   2427a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2427c:	4432      	add	r2, r6
   2427e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24280:	e7da      	b.n	24238 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   24282:	463b      	mov	r3, r7
   24284:	462a      	mov	r2, r5
   24286:	4639      	mov	r1, r7
   24288:	f7ff fe9a 	bl	23fc0 <_copy>
		data_length -= remaining_space;
   2428c:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2428e:	2300      	movs	r3, #0
   24290:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24292:	4446      	add	r6, r8
		data += remaining_space;
   24294:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24296:	1e63      	subs	r3, r4, #1
   24298:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2429c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   242a0:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242a4:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   242a6:	ea82 0200 	eor.w	r2, r2, r0
   242aa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242ac:	d1f6      	bne.n	2429c <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   242ae:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   242b0:	4621      	mov	r1, r4
   242b2:	4620      	mov	r0, r4
   242b4:	f7e0 f816 	bl	42e4 <tc_aes_encrypt>
   242b8:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   242bc:	2e10      	cmp	r6, #16
   242be:	d80a      	bhi.n	242d6 <tc_cmac_update+0xae>
	if (data_length > 0) {
   242c0:	2e00      	cmp	r6, #0
   242c2:	d0b9      	beq.n	24238 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   242c4:	4633      	mov	r3, r6
   242c6:	462a      	mov	r2, r5
   242c8:	4631      	mov	r1, r6
   242ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
   242ce:	f7ff fe77 	bl	23fc0 <_copy>
		s->leftover_offset = data_length;
   242d2:	6466      	str	r6, [r4, #68]	; 0x44
   242d4:	e7b0      	b.n	24238 <tc_cmac_update+0x10>
   242d6:	1e63      	subs	r3, r4, #1
   242d8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   242da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   242de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242e2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   242e4:	ea82 0200 	eor.w	r2, r2, r0
   242e8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242ea:	d1f6      	bne.n	242da <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   242ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   242ee:	4621      	mov	r1, r4
   242f0:	4620      	mov	r0, r4
   242f2:	f7df fff7 	bl	42e4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   242f6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   242f8:	3e10      	subs	r6, #16
   242fa:	e7df      	b.n	242bc <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   242fc:	2000      	movs	r0, #0
   242fe:	e79c      	b.n	2423a <tc_cmac_update+0x12>

00024300 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24300:	b570      	push	{r4, r5, r6, lr}
   24302:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24304:	4605      	mov	r5, r0
   24306:	b1e8      	cbz	r0, 24344 <tc_cmac_final+0x44>
   24308:	b369      	cbz	r1, 24366 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2430a:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2430c:	2a10      	cmp	r2, #16
   2430e:	d11a      	bne.n	24346 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24310:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24312:	1e63      	subs	r3, r4, #1
   24314:	3901      	subs	r1, #1
   24316:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2431a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2431e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24322:	4072      	eors	r2, r6
   24324:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24328:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2432a:	ea82 0206 	eor.w	r2, r2, r6
   2432e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24330:	d1f3      	bne.n	2431a <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24332:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24334:	4621      	mov	r1, r4
   24336:	4628      	mov	r0, r5
   24338:	f7df ffd4 	bl	42e4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2433c:	4620      	mov	r0, r4
   2433e:	f7ff ff2a 	bl	24196 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24342:	2001      	movs	r0, #1
}
   24344:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24346:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2434a:	2100      	movs	r1, #0
   2434c:	f1c2 0210 	rsb	r2, r2, #16
   24350:	4420      	add	r0, r4
   24352:	f7ff fe42 	bl	23fda <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24356:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24358:	4423      	add	r3, r4
   2435a:	2280      	movs	r2, #128	; 0x80
   2435c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24360:	f104 0120 	add.w	r1, r4, #32
   24364:	e7d5      	b.n	24312 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24366:	4608      	mov	r0, r1
   24368:	e7ec      	b.n	24344 <tc_cmac_final+0x44>

0002436a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2436a:	2100      	movs	r1, #0
   2436c:	2001      	movs	r0, #1
   2436e:	f7e0 b91d 	b.w	45ac <z_arm_fatal_error>

00024372 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24372:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24374:	6800      	ldr	r0, [r0, #0]
   24376:	f7e0 b919 	b.w	45ac <z_arm_fatal_error>

0002437a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2437a:	b508      	push	{r3, lr}
	handler();
   2437c:	f7e0 f94e 	bl	461c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24380:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24384:	f7e0 bbc0 	b.w	4b08 <z_arm_exc_exit>

00024388 <_stdout_hook_default>:
}
   24388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2438c:	4770      	bx	lr

0002438e <display_get_capabilities>:
   2438e:	6883      	ldr	r3, [r0, #8]
   24390:	69db      	ldr	r3, [r3, #28]
   24392:	4718      	bx	r3

00024394 <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   24394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t w = area->x2 - area->x1 + 1;
   24398:	888d      	ldrh	r5, [r1, #4]
   2439a:	880b      	ldrh	r3, [r1, #0]
	uint16_t h = area->y2 - area->y1 + 1;
   2439c:	88ce      	ldrh	r6, [r1, #6]
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   2439e:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
	uint16_t w = area->x2 - area->x1 + 1;
   243a2:	3501      	adds	r5, #1
   243a4:	1aed      	subs	r5, r5, r3
	uint16_t h = area->y2 - area->y1 + 1;
   243a6:	884b      	ldrh	r3, [r1, #2]
   243a8:	3601      	adds	r6, #1
{
   243aa:	b08b      	sub	sp, #44	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   243ac:	1af6      	subs	r6, r6, r3
	uint16_t w = area->x2 - area->x1 + 1;
   243ae:	b2ad      	uxth	r5, r5
{
   243b0:	460c      	mov	r4, r1
	uint16_t h = area->y2 - area->y1 + 1;
   243b2:	b2b6      	uxth	r6, r6
	struct display_capabilities cap;
	struct display_buffer_descriptor desc;

	display_get_capabilities(display_dev, &cap);
   243b4:	a906      	add	r1, sp, #24
{
   243b6:	4607      	mov	r7, r0
	display_get_capabilities(display_dev, &cap);
   243b8:	4648      	mov	r0, r9
{
   243ba:	4690      	mov	r8, r2
	display_get_capabilities(display_dev, &cap);
   243bc:	f7ff ffe7 	bl	2438e <display_get_capabilities>

	desc.buf_size = (w * h)/8U;
   243c0:	fb06 f305 	mul.w	r3, r6, r5
   243c4:	08db      	lsrs	r3, r3, #3
   243c6:	9303      	str	r3, [sp, #12]
	return api->write(dev, x, y, desc, buf);
   243c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   243cc:	f8cd 8000 	str.w	r8, [sp]
	desc.width = w;
   243d0:	f8ad 5010 	strh.w	r5, [sp, #16]
	desc.pitch = w;
   243d4:	f8ad 5014 	strh.w	r5, [sp, #20]
   243d8:	8862      	ldrh	r2, [r4, #2]
   243da:	689d      	ldr	r5, [r3, #8]
   243dc:	8821      	ldrh	r1, [r4, #0]
	desc.height = h;
   243de:	f8ad 6012 	strh.w	r6, [sp, #18]
   243e2:	ab03      	add	r3, sp, #12
   243e4:	4648      	mov	r0, r9
   243e6:	47a8      	blx	r5
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
   243e8:	9b08      	ldr	r3, [sp, #32]
   243ea:	071b      	lsls	r3, r3, #28
   243ec:	d509      	bpl.n	24402 <lvgl_flush_cb_mono+0x6e>
   243ee:	f8d9 3008 	ldr.w	r3, [r9, #8]
   243f2:	f8cd 8000 	str.w	r8, [sp]
   243f6:	689d      	ldr	r5, [r3, #8]
   243f8:	8862      	ldrh	r2, [r4, #2]
   243fa:	8821      	ldrh	r1, [r4, #0]
   243fc:	ab03      	add	r3, sp, #12
   243fe:	4648      	mov	r0, r9
   24400:	47a8      	blx	r5
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	lv_disp_flush_ready(disp_drv);
   24402:	4638      	mov	r0, r7
   24404:	f005 fdd1 	bl	29faa <lv_disp_flush_ready>
}
   24408:	b00b      	add	sp, #44	; 0x2c
   2440a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002440e <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   2440e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint8_t *buf_xy;
	uint8_t bit;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   24412:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   24414:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
   24418:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
   2441c:	460f      	mov	r7, r1
	display_get_capabilities(display_dev, &cap);
   2441e:	4669      	mov	r1, sp
{
   24420:	4690      	mov	r8, r2
   24422:	461c      	mov	r4, r3
	display_get_capabilities(display_dev, &cap);
   24424:	f7ff ffb3 	bl	2438e <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   24428:	9802      	ldr	r0, [sp, #8]
   2442a:	f010 0f01 	tst.w	r0, #1
   2442e:	f000 0002 	and.w	r0, r0, #2
   24432:	d01f      	beq.n	24474 <lvgl_set_px_cb_mono+0x66>
		buf_xy = buf + x + y/8 * buf_w;
   24434:	2d00      	cmp	r5, #0
   24436:	462b      	mov	r3, r5
   24438:	bfb8      	it	lt
   2443a:	1deb      	addlt	r3, r5, #7
   2443c:	10d9      	asrs	r1, r3, #3
   2443e:	fb11 4408 	smlabb	r4, r1, r8, r4
   24442:	1939      	adds	r1, r7, r4

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   24444:	426b      	negs	r3, r5
   24446:	f005 0407 	and.w	r4, r5, #7
   2444a:	f003 0307 	and.w	r3, r3, #7
   2444e:	bf58      	it	pl
   24450:	425c      	negpl	r4, r3
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   24452:	b108      	cbz	r0, 24458 <lvgl_set_px_cb_mono+0x4a>
			bit = 7 - x%8;
   24454:	f1c4 0407 	rsb	r4, r4, #7
		} else {
			bit = x%8;
   24458:	2201      	movs	r2, #1
   2445a:	b2e4      	uxtb	r4, r4
		}
	}

	if (cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
   2445c:	fa02 f404 	lsl.w	r4, r2, r4
   24460:	f89d 200c 	ldrb.w	r2, [sp, #12]
   24464:	780b      	ldrb	r3, [r1, #0]
   24466:	2a04      	cmp	r2, #4
   24468:	b2e4      	uxtb	r4, r4
   2446a:	d115      	bne.n	24498 <lvgl_set_px_cb_mono+0x8a>
		if (color.full == 0) {
   2446c:	b9b6      	cbnz	r6, 2449c <lvgl_set_px_cb_mono+0x8e>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
   2446e:	ea23 0304 	bic.w	r3, r3, r4
   24472:	e014      	b.n	2449e <lvgl_set_px_cb_mono+0x90>
		buf_xy = buf + x/8 + y * buf_w/8;
   24474:	4643      	mov	r3, r8
   24476:	435d      	muls	r5, r3
   24478:	bf48      	it	mi
   2447a:	3507      	addmi	r5, #7
   2447c:	2c00      	cmp	r4, #0
   2447e:	4621      	mov	r1, r4
   24480:	ea4f 05e5 	mov.w	r5, r5, asr #3
   24484:	bfb8      	it	lt
   24486:	1de1      	addlt	r1, r4, #7
   24488:	eb05 05e1 	add.w	r5, r5, r1, asr #3
   2448c:	4263      	negs	r3, r4
   2448e:	eb07 0105 	add.w	r1, r7, r5
		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   24492:	f004 0407 	and.w	r4, r4, #7
   24496:	e7d8      	b.n	2444a <lvgl_set_px_cb_mono+0x3c>
		if (color.full == 0) {
   24498:	2e00      	cmp	r6, #0
   2449a:	d1e8      	bne.n	2446e <lvgl_set_px_cb_mono+0x60>
			*buf_xy |= BIT(bit);
   2449c:	4323      	orrs	r3, r4
			*buf_xy &= ~BIT(bit);
   2449e:	700b      	strb	r3, [r1, #0]
		}
	}
}
   244a0:	b004      	add	sp, #16
   244a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000244a6 <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(struct _disp_drv_t *disp_drv,
		lv_area_t *area)
{
   244a6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   244a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   244aa:	460c      	mov	r4, r1
	display_get_capabilities(display_dev, &cap);
   244ac:	4669      	mov	r1, sp
   244ae:	f7ff ff6e 	bl	2438e <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_X_ALIGNMENT_WIDTH) {
   244b2:	9b02      	ldr	r3, [sp, #8]
   244b4:	06da      	lsls	r2, r3, #27
   244b6:	d506      	bpl.n	244c6 <lvgl_rounder_cb_mono+0x20>
		area->x1 = 0;
   244b8:	2300      	movs	r3, #0
   244ba:	8023      	strh	r3, [r4, #0]
		area->x2 = cap.x_resolution - 1;
   244bc:	f8bd 3000 	ldrh.w	r3, [sp]
   244c0:	3b01      	subs	r3, #1
		if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
			area->y1 &= ~0x7;
			area->y2 |= 0x7;
		} else {
			area->x1 &= ~0x7;
			area->x2 |= 0x7;
   244c2:	80a3      	strh	r3, [r4, #4]
		}
	}
}
   244c4:	e009      	b.n	244da <lvgl_rounder_cb_mono+0x34>
		if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   244c6:	07db      	lsls	r3, r3, #31
   244c8:	d509      	bpl.n	244de <lvgl_rounder_cb_mono+0x38>
			area->y1 &= ~0x7;
   244ca:	8863      	ldrh	r3, [r4, #2]
   244cc:	f023 0307 	bic.w	r3, r3, #7
   244d0:	8063      	strh	r3, [r4, #2]
			area->y2 |= 0x7;
   244d2:	88e3      	ldrh	r3, [r4, #6]
   244d4:	f043 0307 	orr.w	r3, r3, #7
   244d8:	80e3      	strh	r3, [r4, #6]
}
   244da:	b004      	add	sp, #16
   244dc:	bd10      	pop	{r4, pc}
			area->x1 &= ~0x7;
   244de:	8823      	ldrh	r3, [r4, #0]
   244e0:	f023 0307 	bic.w	r3, r3, #7
   244e4:	8023      	strh	r3, [r4, #0]
			area->x2 |= 0x7;
   244e6:	88a3      	ldrh	r3, [r4, #4]
   244e8:	f043 0307 	orr.w	r3, r3, #7
   244ec:	e7e9      	b.n	244c2 <lvgl_rounder_cb_mono+0x1c>

000244ee <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   244ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   244f0:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   244f2:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   244f4:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   244f8:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   244fc:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   244fe:	3401      	adds	r4, #1
{
   24500:	b087      	sub	sp, #28
   24502:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   24504:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   24506:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   24508:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   2450a:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   2450c:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
   2450e:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   24512:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   24516:	f8ad 3014 	strh.w	r3, [sp, #20]
   2451a:	6883      	ldr	r3, [r0, #8]
   2451c:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 2U * h;
   2451e:	0049      	lsls	r1, r1, #1
   24520:	9103      	str	r1, [sp, #12]
	desc.height = h;
   24522:	f8ad 4012 	strh.w	r4, [sp, #18]
   24526:	b2ba      	uxth	r2, r7
   24528:	689c      	ldr	r4, [r3, #8]
   2452a:	b2b1      	uxth	r1, r6
   2452c:	ab03      	add	r3, sp, #12
   2452e:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   24530:	4628      	mov	r0, r5
   24532:	f005 fd3a 	bl	29faa <lv_disp_flush_ready>
}
   24536:	b007      	add	sp, #28
   24538:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002453a <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   2453a:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   2453c:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   2453e:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   24540:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   24544:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   24548:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   2454a:	3401      	adds	r4, #1
{
   2454c:	b087      	sub	sp, #28
   2454e:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   24550:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   24552:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   24554:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   24556:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   24558:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
   2455a:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   2455e:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   24562:	f8ad 3014 	strh.w	r3, [sp, #20]
   24566:	6883      	ldr	r3, [r0, #8]
   24568:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 3U * h;
   2456a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   2456e:	9103      	str	r1, [sp, #12]
	desc.height = h;
   24570:	f8ad 4012 	strh.w	r4, [sp, #18]
   24574:	b2ba      	uxth	r2, r7
   24576:	689c      	ldr	r4, [r3, #8]
   24578:	b2b1      	uxth	r1, r6
   2457a:	ab03      	add	r3, sp, #12
   2457c:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   2457e:	4628      	mov	r0, r5
   24580:	f005 fd13 	bl	29faa <lv_disp_flush_ready>
}
   24584:	b007      	add	sp, #28
   24586:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024588 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   24588:	b5f0      	push	{r4, r5, r6, r7, lr}
   2458a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   2458e:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
   24592:	f000 071f 	and.w	r7, r0, #31
   24596:	f3c0 1c45 	ubfx	ip, r0, #5, #6
     *       5         129     33        1       255
     *       6         259      3        0       255
     */

    lv_color32_t ret;
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   2459a:	f240 1507 	movw	r5, #263	; 0x107
   2459e:	0ac0      	lsrs	r0, r0, #11
   245a0:	fb04 3302 	mla	r3, r4, r2, r3
   245a4:	4368      	muls	r0, r5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   245a6:	f240 1203 	movw	r2, #259	; 0x103
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   245aa:	3007      	adds	r0, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   245ac:	fb02 f20c 	mul.w	r2, r2, ip
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   245b0:	1140      	asrs	r0, r0, #5
   245b2:	2400      	movs	r4, #0
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   245b4:	3203      	adds	r2, #3
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   245b6:	437d      	muls	r5, r7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   245b8:	1192      	asrs	r2, r2, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   245ba:	f360 4417 	bfi	r4, r0, #16, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   245be:	3507      	adds	r5, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   245c0:	f362 240f 	bfi	r4, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   245c4:	116d      	asrs	r5, r5, #5
   245c6:	f365 0407 	bfi	r4, r5, #0, #8
   245ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    LV_COLOR_SET_A32(ret, 0xFF);
   245ce:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
   245d2:	18ce      	adds	r6, r1, r3
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
   245d4:	f3c4 4207 	ubfx	r2, r4, #16, #8
   245d8:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
   245da:	f3c4 2307 	ubfx	r3, r4, #8, #8
   245de:	7073      	strb	r3, [r6, #1]
	*(buf_xy + 2) = converted_color.ch.blue;
   245e0:	70b4      	strb	r4, [r6, #2]
}
   245e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000245e4 <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   245e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   245e6:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   245e8:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   245ea:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   245ee:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   245f2:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   245f4:	3401      	adds	r4, #1
{
   245f6:	b087      	sub	sp, #28
   245f8:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   245fa:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   245fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   245fe:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   24600:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   24602:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
   24604:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   24608:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   2460c:	f8ad 3014 	strh.w	r3, [sp, #20]
   24610:	6883      	ldr	r3, [r0, #8]
   24612:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 4U * h;
   24614:	0089      	lsls	r1, r1, #2
   24616:	9103      	str	r1, [sp, #12]
	desc.height = h;
   24618:	f8ad 4012 	strh.w	r4, [sp, #18]
   2461c:	b2ba      	uxth	r2, r7
   2461e:	689c      	ldr	r4, [r3, #8]
   24620:	b2b1      	uxth	r1, r6
   24622:	ab03      	add	r3, sp, #12
   24624:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   24626:	4628      	mov	r0, r5
   24628:	f005 fcbf 	bl	29faa <lv_disp_flush_ready>
}
   2462c:	b007      	add	sp, #28
   2462e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024630 <lvgl_set_px_cb_32bit>:

#ifndef CONFIG_LVGL_COLOR_DEPTH_32
void lvgl_set_px_cb_32bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   24630:	b5f0      	push	{r4, r5, r6, r7, lr}
   24632:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   24636:	f240 1407 	movw	r4, #263	; 0x107
   2463a:	f000 051f 	and.w	r5, r0, #31
   2463e:	f3c0 1745 	ubfx	r7, r0, #5, #6
   24642:	0ac0      	lsrs	r0, r0, #11
   24644:	4360      	muls	r0, r4
   24646:	3007      	adds	r0, #7
   24648:	1140      	asrs	r0, r0, #5
   2464a:	2600      	movs	r6, #0
   2464c:	f360 4617 	bfi	r6, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   24650:	f240 1003 	movw	r0, #259	; 0x103
   24654:	4378      	muls	r0, r7
   24656:	3003      	adds	r0, #3
   24658:	1180      	asrs	r0, r0, #6
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   2465a:	436c      	muls	r4, r5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   2465c:	f360 260f 	bfi	r6, r0, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   24660:	3407      	adds	r4, #7
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
   24662:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
   24666:	1164      	asrs	r4, r4, #5
   24668:	f364 0607 	bfi	r6, r4, #0, #8
   2466c:	fb00 3202 	mla	r2, r0, r2, r3
    LV_COLOR_SET_A32(ret, 0xFF);
   24670:	f046 467f 	orr.w	r6, r6, #4278190080	; 0xff000000
	*buf_xy = lv_color_to32(color);
   24674:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
}
   24678:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002467a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   2467a:	f7f4 bdc9 	b.w	19210 <SystemInit>

0002467e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   2467e:	b082      	sub	sp, #8
   24680:	ab02      	add	r3, sp, #8
   24682:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   24686:	f89d 3000 	ldrb.w	r3, [sp]
   2468a:	2b06      	cmp	r3, #6
   2468c:	d108      	bne.n	246a0 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2468e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24692:	2201      	movs	r2, #1
   24694:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24698:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   2469c:	bf20      	wfe
    while (true)
   2469e:	e7fd      	b.n	2469c <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   246a0:	b002      	add	sp, #8
   246a2:	4770      	bx	lr

000246a4 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   246a4:	b082      	sub	sp, #8
   246a6:	ab02      	add	r3, sp, #8
   246a8:	e903 0003 	stmdb	r3, {r0, r1}
   246ac:	2300      	movs	r3, #0
   246ae:	f383 8811 	msr	BASEPRI, r3
   246b2:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   246b6:	b002      	add	sp, #8
   246b8:	4770      	bx	lr

000246ba <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   246ba:	b530      	push	{r4, r5, lr}
   246bc:	b085      	sub	sp, #20
   246be:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   246c0:	880a      	ldrh	r2, [r1, #0]
   246c2:	788b      	ldrb	r3, [r1, #2]
   246c4:	f8ad 2000 	strh.w	r2, [sp]
{
   246c8:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   246ca:	220d      	movs	r2, #13
   246cc:	2100      	movs	r1, #0
   246ce:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   246d2:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   246d6:	f007 f88d 	bl	2b7f4 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   246da:	466a      	mov	r2, sp
   246dc:	4669      	mov	r1, sp
   246de:	4628      	mov	r0, r5
   246e0:	f7e9 fdba 	bl	e258 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   246e4:	b928      	cbnz	r0, 246f2 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   246e6:	f8bd 2000 	ldrh.w	r2, [sp]
   246ea:	f89d 3002 	ldrb.w	r3, [sp, #2]
   246ee:	8022      	strh	r2, [r4, #0]
   246f0:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   246f2:	b005      	add	sp, #20
   246f4:	bd30      	pop	{r4, r5, pc}

000246f6 <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   246f6:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   246f8:	1cce      	adds	r6, r1, #3
{
   246fa:	4605      	mov	r5, r0
   246fc:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   246fe:	4630      	mov	r0, r6
   24700:	2103      	movs	r1, #3
   24702:	f7e9 fda7 	bl	e254 <bt_rand>
	if (err) {
   24706:	b960      	cbnz	r0, 24722 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   24708:	7963      	ldrb	r3, [r4, #5]
   2470a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2470e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24712:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   24714:	4622      	mov	r2, r4
   24716:	4631      	mov	r1, r6
   24718:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   2471a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2471e:	f7ff bfcc 	b.w	246ba <ah>
}
   24722:	bd70      	pop	{r4, r5, r6, pc}

00024724 <bt_settings_decode_key>:
{
   24724:	b570      	push	{r4, r5, r6, lr}
   24726:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24728:	2100      	movs	r1, #0
{
   2472a:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   2472c:	f7ff fa92 	bl	23c54 <settings_name_next>
   24730:	280d      	cmp	r0, #13
   24732:	d118      	bne.n	24766 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   24734:	7b23      	ldrb	r3, [r4, #12]
   24736:	2b30      	cmp	r3, #48	; 0x30
   24738:	d111      	bne.n	2475e <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   2473a:	2300      	movs	r3, #0
   2473c:	702b      	strb	r3, [r5, #0]
   2473e:	f104 060c 	add.w	r6, r4, #12
   24742:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24744:	462a      	mov	r2, r5
   24746:	4620      	mov	r0, r4
   24748:	2301      	movs	r3, #1
   2474a:	2102      	movs	r1, #2
   2474c:	3402      	adds	r4, #2
   2474e:	f7fe fade 	bl	22d0e <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   24752:	42b4      	cmp	r4, r6
   24754:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   24758:	d1f4      	bne.n	24744 <bt_settings_decode_key+0x20>
	return 0;
   2475a:	2000      	movs	r0, #0
}
   2475c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2475e:	2b31      	cmp	r3, #49	; 0x31
   24760:	d101      	bne.n	24766 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   24762:	2301      	movs	r3, #1
   24764:	e7ea      	b.n	2473c <bt_settings_decode_key+0x18>
		return -EINVAL;
   24766:	f06f 0015 	mvn.w	r0, #21
   2476a:	e7f7      	b.n	2475c <bt_settings_decode_key+0x38>

0002476c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   2476c:	b510      	push	{r4, lr}
   2476e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24770:	7801      	ldrb	r1, [r0, #0]
   24772:	7822      	ldrb	r2, [r4, #0]
   24774:	428a      	cmp	r2, r1
{
   24776:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24778:	d00e      	beq.n	24798 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2477a:	4669      	mov	r1, sp
   2477c:	f7e0 fdd8 	bl	5330 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24780:	a905      	add	r1, sp, #20
   24782:	4620      	mov	r0, r4
   24784:	f7e0 fdd4 	bl	5330 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24788:	2210      	movs	r2, #16
   2478a:	f10d 0115 	add.w	r1, sp, #21
   2478e:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24792:	f007 f800 	bl	2b796 <memcmp>
   24796:	e007      	b.n	247a8 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   24798:	2a01      	cmp	r2, #1
   2479a:	d007      	beq.n	247ac <bt_uuid_cmp+0x40>
   2479c:	2a02      	cmp	r2, #2
   2479e:	d008      	beq.n	247b2 <bt_uuid_cmp+0x46>
   247a0:	b95a      	cbnz	r2, 247ba <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   247a2:	8840      	ldrh	r0, [r0, #2]
   247a4:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   247a6:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   247a8:	b00a      	add	sp, #40	; 0x28
   247aa:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   247ac:	6840      	ldr	r0, [r0, #4]
   247ae:	6863      	ldr	r3, [r4, #4]
   247b0:	e7f9      	b.n	247a6 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   247b2:	2210      	movs	r2, #16
   247b4:	1c61      	adds	r1, r4, #1
   247b6:	3001      	adds	r0, #1
   247b8:	e7eb      	b.n	24792 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   247ba:	f06f 0015 	mvn.w	r0, #21
   247be:	e7f3      	b.n	247a8 <bt_uuid_cmp+0x3c>

000247c0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   247c0:	2a04      	cmp	r2, #4
{
   247c2:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   247c4:	d00d      	beq.n	247e2 <bt_uuid_create+0x22>
   247c6:	2a10      	cmp	r2, #16
   247c8:	d019      	beq.n	247fe <bt_uuid_create+0x3e>
   247ca:	2a02      	cmp	r2, #2
   247cc:	f04f 0300 	mov.w	r3, #0
   247d0:	d121      	bne.n	24816 <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   247d2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   247d4:	784a      	ldrb	r2, [r1, #1]
   247d6:	780b      	ldrb	r3, [r1, #0]
   247d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   247dc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   247de:	2001      	movs	r0, #1
}
   247e0:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   247e2:	2301      	movs	r3, #1
   247e4:	7003      	strb	r3, [r0, #0]
   247e6:	788a      	ldrb	r2, [r1, #2]
   247e8:	78cc      	ldrb	r4, [r1, #3]
   247ea:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   247ec:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   247f0:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   247f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   247f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   247fa:	6042      	str	r2, [r0, #4]
		break;
   247fc:	e7ef      	b.n	247de <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   247fe:	2302      	movs	r3, #2
   24800:	f800 3b01 	strb.w	r3, [r0], #1
   24804:	f101 0310 	add.w	r3, r1, #16
   24808:	f851 2b04 	ldr.w	r2, [r1], #4
   2480c:	f840 2b04 	str.w	r2, [r0], #4
   24810:	4299      	cmp	r1, r3
   24812:	d1f9      	bne.n	24808 <bt_uuid_create+0x48>
   24814:	e7e3      	b.n	247de <bt_uuid_create+0x1e>
	switch (data_len) {
   24816:	4618      	mov	r0, r3
   24818:	e7e2      	b.n	247e0 <bt_uuid_create+0x20>

0002481a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2481a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2481c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2481e:	2106      	movs	r1, #6
{
   24820:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24822:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24826:	f7e9 fd15 	bl	e254 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2482a:	b918      	cbnz	r0, 24834 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2482c:	79a3      	ldrb	r3, [r4, #6]
   2482e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24832:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24834:	bd10      	pop	{r4, pc}

00024836 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24836:	280f      	cmp	r0, #15
   24838:	d806      	bhi.n	24848 <bt_hci_evt_get_flags+0x12>
   2483a:	280d      	cmp	r0, #13
   2483c:	d80b      	bhi.n	24856 <bt_hci_evt_get_flags+0x20>
   2483e:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   24840:	bf14      	ite	ne
   24842:	2002      	movne	r0, #2
   24844:	2003      	moveq	r0, #3
   24846:	4770      	bx	lr
	switch (evt) {
   24848:	2813      	cmp	r0, #19
   2484a:	d004      	beq.n	24856 <bt_hci_evt_get_flags+0x20>
   2484c:	281a      	cmp	r0, #26
   2484e:	bf14      	ite	ne
   24850:	2002      	movne	r0, #2
   24852:	2001      	moveq	r0, #1
   24854:	4770      	bx	lr
   24856:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24858:	4770      	bx	lr

0002485a <get_adv_channel_map>:
{
   2485a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2485c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24860:	bf0c      	ite	eq
   24862:	2007      	moveq	r0, #7
   24864:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24866:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24868:	bf48      	it	mi
   2486a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2486e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24870:	bf48      	it	mi
   24872:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24876:	4770      	bx	lr

00024878 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24878:	f3bf 8f5b 	dmb	ish
   2487c:	6800      	ldr	r0, [r0, #0]
   2487e:	f3bf 8f5b 	dmb	ish
}
   24882:	4770      	bx	lr

00024884 <atomic_or>:
{
   24884:	4603      	mov	r3, r0
}
   24886:	f3bf 8f5b 	dmb	ish
   2488a:	e853 0f00 	ldrex	r0, [r3]
   2488e:	ea40 0201 	orr.w	r2, r0, r1
   24892:	e843 2c00 	strex	ip, r2, [r3]
   24896:	f1bc 0f00 	cmp.w	ip, #0
   2489a:	d1f6      	bne.n	2488a <atomic_or+0x6>
   2489c:	f3bf 8f5b 	dmb	ish
   248a0:	4770      	bx	lr

000248a2 <atomic_and>:
{
   248a2:	4603      	mov	r3, r0
}
   248a4:	f3bf 8f5b 	dmb	ish
   248a8:	e853 0f00 	ldrex	r0, [r3]
   248ac:	ea00 0201 	and.w	r2, r0, r1
   248b0:	e843 2c00 	strex	ip, r2, [r3]
   248b4:	f1bc 0f00 	cmp.w	ip, #0
   248b8:	d1f6      	bne.n	248a8 <atomic_and+0x6>
   248ba:	f3bf 8f5b 	dmb	ish
   248be:	4770      	bx	lr

000248c0 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   248c0:	460b      	mov	r3, r1
   248c2:	b410      	push	{r4}
   248c4:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   248c6:	f001 041f 	and.w	r4, r1, #31
   248ca:	2101      	movs	r1, #1
   248cc:	40a1      	lsls	r1, r4

	if (val) {
   248ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   248d2:	b112      	cbz	r2, 248da <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   248d4:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   248d6:	f7ff bfd5 	b.w	24884 <atomic_or>
}
   248da:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   248dc:	43c9      	mvns	r1, r1
   248de:	f7ff bfe0 	b.w	248a2 <atomic_and>

000248e2 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   248e2:	2207      	movs	r2, #7
   248e4:	f006 bf57 	b.w	2b796 <memcmp>

000248e8 <bt_addr_copy>:
   248e8:	680b      	ldr	r3, [r1, #0]
   248ea:	6003      	str	r3, [r0, #0]
   248ec:	888b      	ldrh	r3, [r1, #4]
   248ee:	8083      	strh	r3, [r0, #4]
}
   248f0:	4770      	bx	lr

000248f2 <bt_addr_le_copy>:
   248f2:	680b      	ldr	r3, [r1, #0]
   248f4:	6003      	str	r3, [r0, #0]
   248f6:	888b      	ldrh	r3, [r1, #4]
   248f8:	8083      	strh	r3, [r0, #4]
   248fa:	798b      	ldrb	r3, [r1, #6]
   248fc:	7183      	strb	r3, [r0, #6]
}
   248fe:	4770      	bx	lr

00024900 <bt_hci_disconnect>:
{
   24900:	b570      	push	{r4, r5, r6, lr}
   24902:	4606      	mov	r6, r0
   24904:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24906:	f240 4006 	movw	r0, #1030	; 0x406
   2490a:	2103      	movs	r1, #3
   2490c:	f7e1 f93c 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
   24910:	4604      	mov	r4, r0
   24912:	b168      	cbz	r0, 24930 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   24914:	2103      	movs	r1, #3
   24916:	3008      	adds	r0, #8
   24918:	f001 fac2 	bl	25ea0 <net_buf_simple_add>
	disconn->reason = reason;
   2491c:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2491e:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24920:	4621      	mov	r1, r4
   24922:	2200      	movs	r2, #0
}
   24924:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24928:	f240 4006 	movw	r0, #1030	; 0x406
   2492c:	f7e1 b964 	b.w	5bf8 <bt_hci_cmd_send_sync>
}
   24930:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24934:	bd70      	pop	{r4, r5, r6, pc}

00024936 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   24936:	8802      	ldrh	r2, [r0, #0]
   24938:	8843      	ldrh	r3, [r0, #2]
   2493a:	429a      	cmp	r2, r3
{
   2493c:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2493e:	d818      	bhi.n	24972 <bt_le_conn_params_valid+0x3c>
   24940:	2a05      	cmp	r2, #5
   24942:	d916      	bls.n	24972 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24944:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   24948:	d813      	bhi.n	24972 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2494a:	8884      	ldrh	r4, [r0, #4]
   2494c:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   24950:	d20f      	bcs.n	24972 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24952:	88c1      	ldrh	r1, [r0, #6]
   24954:	f1a1 020a 	sub.w	r2, r1, #10
   24958:	b292      	uxth	r2, r2
   2495a:	f640 4076 	movw	r0, #3190	; 0xc76
   2495e:	4282      	cmp	r2, r0
   24960:	d807      	bhi.n	24972 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   24962:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   24966:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2496a:	bf34      	ite	cc
   2496c:	2001      	movcc	r0, #1
   2496e:	2000      	movcs	r0, #0
}
   24970:	bd10      	pop	{r4, pc}
		return false;
   24972:	2000      	movs	r0, #0
   24974:	e7fc      	b.n	24970 <bt_le_conn_params_valid+0x3a>

00024976 <bt_le_set_data_len>:
{
   24976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24978:	4607      	mov	r7, r0
   2497a:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2497c:	f242 0022 	movw	r0, #8226	; 0x2022
   24980:	2106      	movs	r1, #6
{
   24982:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24984:	f7e1 f900 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
   24988:	4604      	mov	r4, r0
   2498a:	b170      	cbz	r0, 249aa <bt_le_set_data_len+0x34>
   2498c:	2106      	movs	r1, #6
   2498e:	3008      	adds	r0, #8
   24990:	f001 fa86 	bl	25ea0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24994:	883b      	ldrh	r3, [r7, #0]
   24996:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24998:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2499a:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2499c:	4621      	mov	r1, r4
   2499e:	f242 0022 	movw	r0, #8226	; 0x2022
}
   249a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   249a6:	f7e1 bb6d 	b.w	6084 <bt_hci_cmd_send>
}
   249aa:	f06f 0068 	mvn.w	r0, #104	; 0x68
   249ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000249b0 <bt_le_set_phy>:
{
   249b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   249b4:	4680      	mov	r8, r0
   249b6:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   249b8:	f242 0032 	movw	r0, #8242	; 0x2032
   249bc:	2107      	movs	r1, #7
{
   249be:	f89d 9020 	ldrb.w	r9, [sp, #32]
   249c2:	4616      	mov	r6, r2
   249c4:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   249c6:	f7e1 f8df 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
   249ca:	4604      	mov	r4, r0
   249cc:	b190      	cbz	r0, 249f4 <bt_le_set_phy+0x44>
   249ce:	2107      	movs	r1, #7
   249d0:	3008      	adds	r0, #8
   249d2:	f001 fa65 	bl	25ea0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   249d6:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   249da:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   249dc:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   249de:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   249e0:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   249e2:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   249e6:	4621      	mov	r1, r4
   249e8:	f242 0032 	movw	r0, #8242	; 0x2032
}
   249ec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   249f0:	f7e1 bb48 	b.w	6084 <bt_hci_cmd_send>
}
   249f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   249f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000249fc <bt_addr_le_is_bonded>:
}
   249fc:	2000      	movs	r0, #0
   249fe:	4770      	bx	lr

00024a00 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   24a00:	6880      	ldr	r0, [r0, #8]
   24a02:	f7e2 bc8d 	b.w	7320 <enh_conn_complete>

00024a06 <le_legacy_conn_complete>:
{
   24a06:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   24a08:	6881      	ldr	r1, [r0, #8]
{
   24a0a:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   24a0c:	780b      	ldrb	r3, [r1, #0]
   24a0e:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   24a12:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   24a16:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   24a1a:	78cb      	ldrb	r3, [r1, #3]
   24a1c:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   24a20:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   24a24:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   24a28:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   24a2c:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   24a30:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   24a34:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   24a38:	7c4b      	ldrb	r3, [r1, #17]
   24a3a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   24a3e:	a803      	add	r0, sp, #12
   24a40:	3104      	adds	r1, #4
   24a42:	f7ff ff56 	bl	248f2 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   24a46:	2200      	movs	r2, #0
   24a48:	4669      	mov	r1, sp
   24a4a:	f10d 0013 	add.w	r0, sp, #19
   24a4e:	9200      	str	r2, [sp, #0]
   24a50:	f8ad 2004 	strh.w	r2, [sp, #4]
   24a54:	f7ff ff48 	bl	248e8 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   24a58:	4669      	mov	r1, sp
   24a5a:	f10d 0019 	add.w	r0, sp, #25
   24a5e:	9200      	str	r2, [sp, #0]
   24a60:	f8ad 2004 	strh.w	r2, [sp, #4]
   24a64:	f7ff ff40 	bl	248e8 <bt_addr_copy>
	enh_conn_complete(&enh);
   24a68:	a802      	add	r0, sp, #8
   24a6a:	f7e2 fc59 	bl	7320 <enh_conn_complete>
}
   24a6e:	b00b      	add	sp, #44	; 0x2c
   24a70:	f85d fb04 	ldr.w	pc, [sp], #4

00024a74 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   24a74:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   24a7a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24a80:	2100      	movs	r1, #0
{
   24a82:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24a84:	f7e0 fcce 	bl	5424 <bt_buf_get_evt>
   24a88:	2102      	movs	r1, #2
   24a8a:	4604      	mov	r4, r0
   24a8c:	3008      	adds	r0, #8
   24a8e:	f001 fa07 	bl	25ea0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   24a92:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   24a94:	7045      	strb	r5, [r0, #1]

	return buf;
}
   24a96:	4620      	mov	r0, r4
   24a98:	bd70      	pop	{r4, r5, r6, pc}

00024a9a <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24a9a:	3103      	adds	r1, #3
{
   24a9c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24a9e:	b2c9      	uxtb	r1, r1
{
   24aa0:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24aa2:	200e      	movs	r0, #14
   24aa4:	f7ff ffe6 	bl	24a74 <bt_hci_evt_create>
   24aa8:	2103      	movs	r1, #3
   24aaa:	4604      	mov	r4, r0
   24aac:	3008      	adds	r0, #8
   24aae:	f001 f9f7 	bl	25ea0 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   24ab2:	2301      	movs	r3, #1
   24ab4:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   24ab6:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   24aba:	4620      	mov	r0, r4
   24abc:	bd38      	pop	{r3, r4, r5, pc}

00024abe <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   24abe:	b570      	push	{r4, r5, r6, lr}
   24ac0:	4605      	mov	r5, r0
   24ac2:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   24ac4:	200f      	movs	r0, #15
   24ac6:	2104      	movs	r1, #4
   24ac8:	f7ff ffd4 	bl	24a74 <bt_hci_evt_create>
   24acc:	2104      	movs	r1, #4
   24ace:	4604      	mov	r4, r0
   24ad0:	3008      	adds	r0, #8
   24ad2:	f001 f9e5 	bl	25ea0 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   24ad6:	2201      	movs	r2, #1
	cs->status = status;
   24ad8:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24ada:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   24adc:	8045      	strh	r5, [r0, #2]

	return buf;
}
   24ade:	4620      	mov	r0, r4
   24ae0:	bd70      	pop	{r4, r5, r6, pc}

00024ae2 <tx_notify>:
{
   24ae2:	b570      	push	{r4, r5, r6, lr}
   24ae4:	4604      	mov	r4, r0
	__asm__ volatile(
   24ae6:	f04f 0220 	mov.w	r2, #32
   24aea:	f3ef 8311 	mrs	r3, BASEPRI
   24aee:	f382 8811 	msr	BASEPRI, r2
   24af2:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   24af6:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   24af8:	b920      	cbnz	r0, 24b04 <tx_notify+0x22>
	__asm__ volatile(
   24afa:	f383 8811 	msr	BASEPRI, r3
   24afe:	f3bf 8f6f 	isb	sy
}
   24b02:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24b04:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24b06:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24b08:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24b0a:	4288      	cmp	r0, r1
	list->tail = node;
   24b0c:	bf08      	it	eq
   24b0e:	6262      	streq	r2, [r4, #36]	; 0x24
   24b10:	f383 8811 	msr	BASEPRI, r3
   24b14:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   24b18:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   24b1c:	f7e2 fcc6 	bl	74ac <tx_free>
		cb(conn, user_data);
   24b20:	4631      	mov	r1, r6
   24b22:	4620      	mov	r0, r4
   24b24:	47a8      	blx	r5
	while (1) {
   24b26:	e7de      	b.n	24ae6 <tx_notify+0x4>

00024b28 <tx_complete_work>:
	tx_notify(conn);
   24b28:	3828      	subs	r0, #40	; 0x28
   24b2a:	f7ff bfda 	b.w	24ae2 <tx_notify>

00024b2e <bt_conn_new>:
{
   24b2e:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   24b30:	2200      	movs	r2, #0
   24b32:	4603      	mov	r3, r0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24b34:	2401      	movs	r4, #1
   24b36:	428a      	cmp	r2, r1
   24b38:	d102      	bne.n	24b40 <bt_conn_new+0x12>
		return NULL;
   24b3a:	2300      	movs	r3, #0
}
   24b3c:	4618      	mov	r0, r3
   24b3e:	bd38      	pop	{r3, r4, r5, pc}
   24b40:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
   24b44:	f3bf 8f5b 	dmb	ish
   24b48:	e850 5f00 	ldrex	r5, [r0]
   24b4c:	2d00      	cmp	r5, #0
   24b4e:	d104      	bne.n	24b5a <bt_conn_new+0x2c>
   24b50:	e840 4c00 	strex	ip, r4, [r0]
   24b54:	f1bc 0f00 	cmp.w	ip, #0
   24b58:	d1f6      	bne.n	24b48 <bt_conn_new+0x1a>
   24b5a:	f3bf 8f5b 	dmb	ish
   24b5e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   24b62:	d002      	beq.n	24b6a <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   24b64:	3201      	adds	r2, #1
   24b66:	4603      	mov	r3, r0
   24b68:	e7e5      	b.n	24b36 <bt_conn_new+0x8>
	if (!conn) {
   24b6a:	2b00      	cmp	r3, #0
   24b6c:	d0e6      	beq.n	24b3c <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   24b6e:	4618      	mov	r0, r3
   24b70:	22b8      	movs	r2, #184	; 0xb8
   24b72:	2100      	movs	r1, #0
   24b74:	f006 fe3e 	bl	2b7f4 <memset>
   24b78:	4603      	mov	r3, r0
   24b7a:	e7df      	b.n	24b3c <bt_conn_new+0xe>

00024b7c <bt_conn_get_security>:
}
   24b7c:	2001      	movs	r0, #1
   24b7e:	4770      	bx	lr

00024b80 <bt_conn_reset_rx_state>:
{
   24b80:	b510      	push	{r4, lr}
   24b82:	4604      	mov	r4, r0
	if (!conn->rx) {
   24b84:	6900      	ldr	r0, [r0, #16]
   24b86:	b118      	cbz	r0, 24b90 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24b88:	f7f3 fc4c 	bl	18424 <net_buf_unref>
	conn->rx = NULL;
   24b8c:	2300      	movs	r3, #0
   24b8e:	6123      	str	r3, [r4, #16]
}
   24b90:	bd10      	pop	{r4, pc}

00024b92 <bt_conn_is_peer_addr_le>:
{
   24b92:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24b94:	7a03      	ldrb	r3, [r0, #8]
   24b96:	428b      	cmp	r3, r1
{
   24b98:	4604      	mov	r4, r0
   24b9a:	4615      	mov	r5, r2
	if (id != conn->id) {
   24b9c:	d115      	bne.n	24bca <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24b9e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24ba2:	2207      	movs	r2, #7
   24ba4:	4628      	mov	r0, r5
   24ba6:	f006 fdf6 	bl	2b796 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   24baa:	b180      	cbz	r0, 24bce <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   24bac:	78e3      	ldrb	r3, [r4, #3]
   24bae:	2207      	movs	r2, #7
   24bb0:	b943      	cbnz	r3, 24bc4 <bt_conn_is_peer_addr_le+0x32>
   24bb2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24bb6:	4628      	mov	r0, r5
   24bb8:	f006 fded 	bl	2b796 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   24bbc:	fab0 f080 	clz	r0, r0
   24bc0:	0940      	lsrs	r0, r0, #5
}
   24bc2:	bd38      	pop	{r3, r4, r5, pc}
   24bc4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   24bc8:	e7f5      	b.n	24bb6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   24bca:	2000      	movs	r0, #0
   24bcc:	e7f9      	b.n	24bc2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   24bce:	2001      	movs	r0, #1
   24bd0:	e7f7      	b.n	24bc2 <bt_conn_is_peer_addr_le+0x30>

00024bd2 <bt_conn_ref>:
{
   24bd2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   24bd4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24bd8:	f3bf 8f5b 	dmb	ish
   24bdc:	6813      	ldr	r3, [r2, #0]
   24bde:	f3bf 8f5b 	dmb	ish
		if (!old) {
   24be2:	b17b      	cbz	r3, 24c04 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24be4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24be8:	1c59      	adds	r1, r3, #1
   24bea:	e852 4f00 	ldrex	r4, [r2]
   24bee:	429c      	cmp	r4, r3
   24bf0:	d104      	bne.n	24bfc <bt_conn_ref+0x2a>
   24bf2:	e842 1c00 	strex	ip, r1, [r2]
   24bf6:	f1bc 0f00 	cmp.w	ip, #0
   24bfa:	d1f6      	bne.n	24bea <bt_conn_ref+0x18>
   24bfc:	f3bf 8f5b 	dmb	ish
   24c00:	d1ea      	bne.n	24bd8 <bt_conn_ref+0x6>
}
   24c02:	bd10      	pop	{r4, pc}
			return NULL;
   24c04:	4618      	mov	r0, r3
   24c06:	e7fc      	b.n	24c02 <bt_conn_ref+0x30>

00024c08 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   24c08:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24c0c:	f3bf 8f5b 	dmb	ish
   24c10:	e853 2f00 	ldrex	r2, [r3]
   24c14:	3a01      	subs	r2, #1
   24c16:	e843 2100 	strex	r1, r2, [r3]
   24c1a:	2900      	cmp	r1, #0
   24c1c:	d1f8      	bne.n	24c10 <bt_conn_unref+0x8>
   24c1e:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24c22:	f3bf 8f5b 	dmb	ish
   24c26:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24c2a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24c2e:	b90b      	cbnz	r3, 24c34 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   24c30:	f7e2 bb40 	b.w	72b4 <bt_le_adv_resume>
}
   24c34:	4770      	bx	lr

00024c36 <conn_lookup_handle>:
{
   24c36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24c3a:	4607      	mov	r7, r0
   24c3c:	460e      	mov	r6, r1
   24c3e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24c40:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24c42:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   24c46:	42b4      	cmp	r4, r6
   24c48:	d103      	bne.n	24c52 <conn_lookup_handle+0x1c>
	return NULL;
   24c4a:	2300      	movs	r3, #0
}
   24c4c:	4618      	mov	r0, r3
   24c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24c52:	fb09 7004 	mla	r0, r9, r4, r7
   24c56:	f7ff ffbc 	bl	24bd2 <bt_conn_ref>
   24c5a:	4603      	mov	r3, r0
		if (!conn) {
   24c5c:	b158      	cbz	r0, 24c76 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24c5e:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24c60:	2d01      	cmp	r5, #1
   24c62:	d002      	beq.n	24c6a <conn_lookup_handle+0x34>
   24c64:	3d07      	subs	r5, #7
   24c66:	2d01      	cmp	r5, #1
   24c68:	d803      	bhi.n	24c72 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24c6a:	881a      	ldrh	r2, [r3, #0]
   24c6c:	4542      	cmp	r2, r8
   24c6e:	d0ed      	beq.n	24c4c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24c70:	4618      	mov	r0, r3
   24c72:	f7ff ffc9 	bl	24c08 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24c76:	3401      	adds	r4, #1
   24c78:	e7e5      	b.n	24c46 <conn_lookup_handle+0x10>

00024c7a <bt_conn_le_conn_update>:
{
   24c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c7c:	4607      	mov	r7, r0
   24c7e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24c80:	f242 0013 	movw	r0, #8211	; 0x2013
   24c84:	210e      	movs	r1, #14
   24c86:	f7e0 ff7f 	bl	5b88 <bt_hci_cmd_create>
	if (!buf) {
   24c8a:	4606      	mov	r6, r0
   24c8c:	b1d0      	cbz	r0, 24cc4 <bt_conn_le_conn_update+0x4a>
   24c8e:	210e      	movs	r1, #14
   24c90:	3008      	adds	r0, #8
   24c92:	f001 f905 	bl	25ea0 <net_buf_simple_add>
   24c96:	220e      	movs	r2, #14
   24c98:	4604      	mov	r4, r0
   24c9a:	2100      	movs	r1, #0
   24c9c:	f006 fdaa 	bl	2b7f4 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24ca0:	883b      	ldrh	r3, [r7, #0]
   24ca2:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24ca4:	882b      	ldrh	r3, [r5, #0]
   24ca6:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24ca8:	886b      	ldrh	r3, [r5, #2]
   24caa:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24cac:	88ab      	ldrh	r3, [r5, #4]
   24cae:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24cb0:	88eb      	ldrh	r3, [r5, #6]
   24cb2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24cb4:	4631      	mov	r1, r6
   24cb6:	2200      	movs	r2, #0
}
   24cb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24cbc:	f242 0013 	movw	r0, #8211	; 0x2013
   24cc0:	f7e0 bf9a 	b.w	5bf8 <bt_hci_cmd_send_sync>
}
   24cc4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024cca <l2cap_connected>:
}
   24cca:	4770      	bx	lr

00024ccc <l2cap_disconnected>:
   24ccc:	4770      	bx	lr

00024cce <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24cce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24cd0:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24cd2:	b17b      	cbz	r3, 24cf4 <bt_l2cap_chan_remove+0x26>
   24cd4:	3b08      	subs	r3, #8
   24cd6:	2200      	movs	r2, #0
   24cd8:	b163      	cbz	r3, 24cf4 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24cda:	428b      	cmp	r3, r1
   24cdc:	f103 0408 	add.w	r4, r3, #8
   24ce0:	d10f      	bne.n	24d02 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   24ce2:	688b      	ldr	r3, [r1, #8]
   24ce4:	b93a      	cbnz	r2, 24cf6 <bt_l2cap_chan_remove+0x28>
   24ce6:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   24ce8:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   24cea:	4294      	cmp	r4, r2
   24cec:	d100      	bne.n	24cf0 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24cee:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   24cf0:	2300      	movs	r3, #0
   24cf2:	608b      	str	r3, [r1, #8]
}
   24cf4:	bd10      	pop	{r4, pc}
   24cf6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24cf8:	6d03      	ldr	r3, [r0, #80]	; 0x50
   24cfa:	429c      	cmp	r4, r3
	list->tail = node;
   24cfc:	bf08      	it	eq
   24cfe:	6502      	streq	r2, [r0, #80]	; 0x50
}
   24d00:	e7f6      	b.n	24cf0 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d02:	2c00      	cmp	r4, #0
   24d04:	d0f6      	beq.n	24cf4 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24d06:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24d08:	2b00      	cmp	r3, #0
   24d0a:	d0f3      	beq.n	24cf4 <bt_l2cap_chan_remove+0x26>
   24d0c:	3b08      	subs	r3, #8
   24d0e:	4622      	mov	r2, r4
   24d10:	e7e2      	b.n	24cd8 <bt_l2cap_chan_remove+0xa>

00024d12 <bt_l2cap_chan_del>:
{
   24d12:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24d14:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   24d18:	4604      	mov	r4, r0
	if (!chan->conn) {
   24d1a:	b123      	cbz	r3, 24d26 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24d1c:	686b      	ldr	r3, [r5, #4]
   24d1e:	b103      	cbz	r3, 24d22 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24d20:	4798      	blx	r3
	chan->conn = NULL;
   24d22:	2300      	movs	r3, #0
   24d24:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24d26:	68e3      	ldr	r3, [r4, #12]
   24d28:	b10b      	cbz	r3, 24d2e <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24d2a:	4620      	mov	r0, r4
   24d2c:	4798      	blx	r3
	if (ops->released) {
   24d2e:	69eb      	ldr	r3, [r5, #28]
   24d30:	b11b      	cbz	r3, 24d3a <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24d32:	4620      	mov	r0, r4
}
   24d34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   24d38:	4718      	bx	r3
}
   24d3a:	bd70      	pop	{r4, r5, r6, pc}

00024d3c <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24d3c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24d3e:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24d40:	b18b      	cbz	r3, 24d66 <bt_l2cap_disconnected+0x2a>
   24d42:	f1b3 0008 	subs.w	r0, r3, #8
   24d46:	d00e      	beq.n	24d66 <bt_l2cap_disconnected+0x2a>
   24d48:	681c      	ldr	r4, [r3, #0]
   24d4a:	b104      	cbz	r4, 24d4e <bt_l2cap_disconnected+0x12>
   24d4c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   24d4e:	f7ff ffe0 	bl	24d12 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24d52:	b144      	cbz	r4, 24d66 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d54:	f114 0308 	adds.w	r3, r4, #8
   24d58:	d002      	beq.n	24d60 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24d5a:	68a3      	ldr	r3, [r4, #8]
   24d5c:	b103      	cbz	r3, 24d60 <bt_l2cap_disconnected+0x24>
   24d5e:	3b08      	subs	r3, #8
{
   24d60:	4620      	mov	r0, r4
   24d62:	461c      	mov	r4, r3
   24d64:	e7f3      	b.n	24d4e <bt_l2cap_disconnected+0x12>
}
   24d66:	bd10      	pop	{r4, pc}

00024d68 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   24d68:	3104      	adds	r1, #4
   24d6a:	f7e3 b839 	b.w	7de0 <bt_conn_create_pdu_timeout>

00024d6e <bt_l2cap_send_cb>:
{
   24d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d72:	4614      	mov	r4, r2
   24d74:	4605      	mov	r5, r0
   24d76:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   24d78:	f102 0008 	add.w	r0, r2, #8
   24d7c:	2104      	movs	r1, #4
   24d7e:	461e      	mov	r6, r3
   24d80:	f8dd 8018 	ldr.w	r8, [sp, #24]
   24d84:	f001 f8ae 	bl	25ee4 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24d88:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   24d8a:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24d8c:	3a04      	subs	r2, #4
   24d8e:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24d90:	4643      	mov	r3, r8
   24d92:	4632      	mov	r2, r6
   24d94:	4621      	mov	r1, r4
   24d96:	4628      	mov	r0, r5
}
   24d98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24d9c:	f7e2 bd52 	b.w	7844 <bt_conn_send_cb>

00024da0 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24da0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   24da2:	b160      	cbz	r0, 24dbe <bt_l2cap_le_lookup_tx_cid+0x1e>
   24da4:	3808      	subs	r0, #8
   24da6:	b900      	cbnz	r0, 24daa <bt_l2cap_le_lookup_tx_cid+0xa>
   24da8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24daa:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   24dae:	428b      	cmp	r3, r1
   24db0:	d005      	beq.n	24dbe <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24db2:	f110 0308 	adds.w	r3, r0, #8
   24db6:	d001      	beq.n	24dbc <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24db8:	6880      	ldr	r0, [r0, #8]
   24dba:	e7f2      	b.n	24da2 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   24dbc:	4618      	mov	r0, r3
}
   24dbe:	4770      	bx	lr

00024dc0 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24dc0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   24dc2:	b160      	cbz	r0, 24dde <bt_l2cap_le_lookup_rx_cid+0x1e>
   24dc4:	3808      	subs	r0, #8
   24dc6:	b900      	cbnz	r0, 24dca <bt_l2cap_le_lookup_rx_cid+0xa>
   24dc8:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24dca:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   24dce:	428b      	cmp	r3, r1
   24dd0:	d005      	beq.n	24dde <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24dd2:	f110 0308 	adds.w	r3, r0, #8
   24dd6:	d001      	beq.n	24ddc <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24dd8:	6880      	ldr	r0, [r0, #8]
   24dda:	e7f2      	b.n	24dc2 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   24ddc:	4618      	mov	r0, r3
}
   24dde:	4770      	bx	lr

00024de0 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   24de0:	4770      	bx	lr

00024de2 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   24de2:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   24de4:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24de6:	b128      	cbz	r0, 24df4 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24de8:	6859      	ldr	r1, [r3, #4]
   24dea:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24dec:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dee:	4288      	cmp	r0, r1
	list->tail = node;
   24df0:	bf08      	it	eq
   24df2:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24df4:	4770      	bx	lr

00024df6 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24df6:	4603      	mov	r3, r0
   24df8:	6800      	ldr	r0, [r0, #0]
   24dfa:	2200      	movs	r2, #0
   24dfc:	b900      	cbnz	r0, 24e00 <sys_slist_find_and_remove+0xa>
   24dfe:	4770      	bx	lr
   24e00:	4288      	cmp	r0, r1
   24e02:	d110      	bne.n	24e26 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   24e04:	6808      	ldr	r0, [r1, #0]
   24e06:	b942      	cbnz	r2, 24e1a <sys_slist_find_and_remove+0x24>
   24e08:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   24e0a:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e0c:	4291      	cmp	r1, r2
   24e0e:	d100      	bne.n	24e12 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   24e10:	6058      	str	r0, [r3, #4]
	parent->next = child;
   24e12:	2300      	movs	r3, #0
   24e14:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e16:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   24e18:	4770      	bx	lr
	parent->next = child;
   24e1a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e1c:	6858      	ldr	r0, [r3, #4]
   24e1e:	4281      	cmp	r1, r0
	list->tail = node;
   24e20:	bf08      	it	eq
   24e22:	605a      	streq	r2, [r3, #4]
}
   24e24:	e7f5      	b.n	24e12 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24e26:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24e28:	6800      	ldr	r0, [r0, #0]
   24e2a:	e7e7      	b.n	24dfc <sys_slist_find_and_remove+0x6>

00024e2c <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24e2c:	4603      	mov	r3, r0
	size_t bytes = 0;
   24e2e:	2000      	movs	r0, #0

	while (buf) {
   24e30:	b903      	cbnz	r3, 24e34 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24e32:	4770      	bx	lr
		bytes += buf->len;
   24e34:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24e36:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24e38:	4410      	add	r0, r2
		buf = buf->frags;
   24e3a:	e7f9      	b.n	24e30 <net_buf_frags_len+0x4>

00024e3c <att_sent>:
	if (chan->ops->sent) {
   24e3c:	684b      	ldr	r3, [r1, #4]
   24e3e:	695b      	ldr	r3, [r3, #20]
{
   24e40:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   24e42:	b103      	cbz	r3, 24e46 <att_sent+0xa>
		chan->ops->sent(chan);
   24e44:	4718      	bx	r3
}
   24e46:	4770      	bx	lr

00024e48 <attr_read_type_cb>:
{
   24e48:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24e4a:	68d4      	ldr	r4, [r2, #12]
   24e4c:	7823      	ldrb	r3, [r4, #0]
   24e4e:	3102      	adds	r1, #2
   24e50:	b913      	cbnz	r3, 24e58 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24e52:	7021      	strb	r1, [r4, #0]
	return true;
   24e54:	2001      	movs	r0, #1
   24e56:	e006      	b.n	24e66 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24e58:	428b      	cmp	r3, r1
   24e5a:	d0fb      	beq.n	24e54 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24e5c:	8983      	ldrh	r3, [r0, #12]
   24e5e:	3b02      	subs	r3, #2
   24e60:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24e62:	2000      	movs	r0, #0
   24e64:	6110      	str	r0, [r2, #16]
}
   24e66:	bd10      	pop	{r4, pc}

00024e68 <att_op_get_type>:
	switch (op) {
   24e68:	281e      	cmp	r0, #30
   24e6a:	d816      	bhi.n	24e9a <att_op_get_type+0x32>
   24e6c:	b308      	cbz	r0, 24eb2 <att_op_get_type+0x4a>
   24e6e:	1e43      	subs	r3, r0, #1
   24e70:	2b1d      	cmp	r3, #29
   24e72:	d81e      	bhi.n	24eb2 <att_op_get_type+0x4a>
   24e74:	e8df f003 	tbb	[pc, r3]
   24e78:	23172317 	.word	0x23172317
   24e7c:	23172317 	.word	0x23172317
   24e80:	23172317 	.word	0x23172317
   24e84:	23172317 	.word	0x23172317
   24e88:	1d172317 	.word	0x1d172317
   24e8c:	2317231d 	.word	0x2317231d
   24e90:	1d191d17 	.word	0x1d191d17
   24e94:	0f1b      	.short	0x0f1b
   24e96:	2004      	movs	r0, #4
   24e98:	4770      	bx	lr
   24e9a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   24e9e:	2b52      	cmp	r3, #82	; 0x52
   24ea0:	d107      	bne.n	24eb2 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   24ea2:	2000      	movs	r0, #0
}
   24ea4:	4770      	bx	lr
		return ATT_RESPONSE;
   24ea6:	2002      	movs	r0, #2
   24ea8:	4770      	bx	lr
		return ATT_NOTIFICATION;
   24eaa:	2003      	movs	r0, #3
   24eac:	4770      	bx	lr
		return ATT_INDICATION;
   24eae:	2005      	movs	r0, #5
   24eb0:	4770      	bx	lr
		return ATT_COMMAND;
   24eb2:	f010 0f40 	tst.w	r0, #64	; 0x40
   24eb6:	bf0c      	ite	eq
   24eb8:	2006      	moveq	r0, #6
   24eba:	2000      	movne	r0, #0
   24ebc:	4770      	bx	lr
		return ATT_REQUEST;
   24ebe:	2001      	movs	r0, #1
   24ec0:	4770      	bx	lr

00024ec2 <att_notify_mult>:
{
   24ec2:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   24ec4:	6803      	ldr	r3, [r0, #0]
   24ec6:	898a      	ldrh	r2, [r1, #12]
   24ec8:	6818      	ldr	r0, [r3, #0]
   24eca:	6889      	ldr	r1, [r1, #8]
   24ecc:	f7e6 f906 	bl	b0dc <bt_gatt_mult_notification>
}
   24ed0:	2000      	movs	r0, #0
   24ed2:	bd08      	pop	{r3, pc}

00024ed4 <att_notify>:
{
   24ed4:	b538      	push	{r3, r4, r5, lr}
   24ed6:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   24ed8:	f101 0008 	add.w	r0, r1, #8
   24edc:	460c      	mov	r4, r1
   24ede:	f001 f819 	bl	25f14 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   24ee2:	682d      	ldr	r5, [r5, #0]
   24ee4:	89a3      	ldrh	r3, [r4, #12]
   24ee6:	68a2      	ldr	r2, [r4, #8]
   24ee8:	4601      	mov	r1, r0
   24eea:	6828      	ldr	r0, [r5, #0]
   24eec:	f000 fefc 	bl	25ce8 <bt_gatt_notification>
}
   24ef0:	2000      	movs	r0, #0
   24ef2:	bd38      	pop	{r3, r4, r5, pc}

00024ef4 <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   24ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24ef6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24efa:	2300      	movs	r3, #0
   24efc:	9300      	str	r3, [sp, #0]
   24efe:	461a      	mov	r2, r3
   24f00:	f7e5 f994 	bl	a22c <bt_gatt_foreach_attr_type>
				  user_data);
}
   24f04:	b005      	add	sp, #20
   24f06:	f85d fb04 	ldr.w	pc, [sp], #4

00024f0a <attr_read_group_cb>:
	if (!data->rsp->len) {
   24f0a:	68d0      	ldr	r0, [r2, #12]
   24f0c:	7803      	ldrb	r3, [r0, #0]
   24f0e:	3104      	adds	r1, #4
   24f10:	b913      	cbnz	r3, 24f18 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   24f12:	7001      	strb	r1, [r0, #0]
	return true;
   24f14:	2001      	movs	r0, #1
}
   24f16:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   24f18:	428b      	cmp	r3, r1
   24f1a:	d0fb      	beq.n	24f14 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24f1c:	6891      	ldr	r1, [r2, #8]
   24f1e:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   24f20:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24f22:	3b04      	subs	r3, #4
   24f24:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   24f26:	6110      	str	r0, [r2, #16]
		return false;
   24f28:	4770      	bx	lr

00024f2a <bt_att_chan_send>:
{
   24f2a:	b570      	push	{r4, r5, r6, lr}
   24f2c:	4604      	mov	r4, r0
   24f2e:	460e      	mov	r6, r1
	if (!cb) {
   24f30:	4615      	mov	r5, r2
   24f32:	b132      	cbz	r2, 24f42 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   24f34:	462a      	mov	r2, r5
   24f36:	4631      	mov	r1, r6
   24f38:	4620      	mov	r0, r4
}
   24f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   24f3e:	f7e3 bab7 	b.w	84b0 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   24f42:	2200      	movs	r2, #0
   24f44:	2300      	movs	r3, #0
   24f46:	f500 7088 	add.w	r0, r0, #272	; 0x110
   24f4a:	f7fb f8ed 	bl	20128 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   24f4e:	2800      	cmp	r0, #0
   24f50:	daf0      	bge.n	24f34 <bt_att_chan_send+0xa>
}
   24f52:	f06f 000a 	mvn.w	r0, #10
   24f56:	bd70      	pop	{r4, r5, r6, pc}

00024f58 <bt_att_chan_send_rsp>:
{
   24f58:	b538      	push	{r3, r4, r5, lr}
   24f5a:	4604      	mov	r4, r0
   24f5c:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   24f5e:	f7ff ffe4 	bl	24f2a <bt_att_chan_send>
	if (err) {
   24f62:	b130      	cbz	r0, 24f72 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   24f64:	4629      	mov	r1, r5
   24f66:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   24f6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   24f6e:	f000 bf64 	b.w	25e3a <net_buf_put>
}
   24f72:	bd38      	pop	{r3, r4, r5, pc}

00024f74 <process_queue>:
{
   24f74:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   24f76:	2200      	movs	r2, #0
{
   24f78:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   24f7a:	2300      	movs	r3, #0
   24f7c:	4608      	mov	r0, r1
{
   24f7e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   24f80:	f000 ff37 	bl	25df2 <net_buf_get>
	if (buf) {
   24f84:	4605      	mov	r5, r0
   24f86:	b160      	cbz	r0, 24fa2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   24f88:	4601      	mov	r1, r0
   24f8a:	2200      	movs	r2, #0
   24f8c:	4620      	mov	r0, r4
   24f8e:	f7e3 fa8f 	bl	84b0 <chan_send>
		if (err) {
   24f92:	4604      	mov	r4, r0
   24f94:	b118      	cbz	r0, 24f9e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   24f96:	4629      	mov	r1, r5
   24f98:	4630      	mov	r0, r6
   24f9a:	f006 f808 	bl	2afae <k_queue_prepend>
}
   24f9e:	4620      	mov	r0, r4
   24fa0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24fa2:	f06f 0401 	mvn.w	r4, #1
   24fa6:	e7fa      	b.n	24f9e <process_queue+0x2a>

00024fa8 <find_info_cb>:
{
   24fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   24faa:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24fac:	6816      	ldr	r6, [r2, #0]
{
   24fae:	4605      	mov	r5, r0
   24fb0:	460f      	mov	r7, r1
   24fb2:	4614      	mov	r4, r2
	if (!data->rsp) {
   24fb4:	b963      	cbnz	r3, 24fd0 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   24fb6:	6850      	ldr	r0, [r2, #4]
   24fb8:	2101      	movs	r1, #1
   24fba:	3008      	adds	r0, #8
   24fbc:	f000 ff70 	bl	25ea0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24fc0:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   24fc2:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24fc4:	781b      	ldrb	r3, [r3, #0]
   24fc6:	2b00      	cmp	r3, #0
   24fc8:	bf0c      	ite	eq
   24fca:	2301      	moveq	r3, #1
   24fcc:	2302      	movne	r3, #2
   24fce:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   24fd0:	68a3      	ldr	r3, [r4, #8]
   24fd2:	781b      	ldrb	r3, [r3, #0]
   24fd4:	2b01      	cmp	r3, #1
   24fd6:	d003      	beq.n	24fe0 <find_info_cb+0x38>
   24fd8:	2b02      	cmp	r3, #2
   24fda:	d019      	beq.n	25010 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   24fdc:	2000      	movs	r0, #0
   24fde:	e016      	b.n	2500e <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   24fe0:	682b      	ldr	r3, [r5, #0]
   24fe2:	781b      	ldrb	r3, [r3, #0]
   24fe4:	2b00      	cmp	r3, #0
   24fe6:	d1f9      	bne.n	24fdc <find_info_cb+0x34>
   24fe8:	6860      	ldr	r0, [r4, #4]
   24fea:	2104      	movs	r1, #4
   24fec:	3008      	adds	r0, #8
   24fee:	f000 ff57 	bl	25ea0 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24ff2:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   24ff4:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24ff6:	885b      	ldrh	r3, [r3, #2]
   24ff8:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24ffa:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   24ffc:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   24ffe:	899b      	ldrh	r3, [r3, #12]
   25000:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   25004:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25006:	2804      	cmp	r0, #4
   25008:	bf94      	ite	ls
   2500a:	2000      	movls	r0, #0
   2500c:	2001      	movhi	r0, #1
}
   2500e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25010:	682b      	ldr	r3, [r5, #0]
   25012:	781b      	ldrb	r3, [r3, #0]
   25014:	2b02      	cmp	r3, #2
   25016:	d1e1      	bne.n	24fdc <find_info_cb+0x34>
   25018:	6860      	ldr	r0, [r4, #4]
   2501a:	2112      	movs	r1, #18
   2501c:	3008      	adds	r0, #8
   2501e:	f000 ff3f 	bl	25ea0 <net_buf_simple_add>
   25022:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25024:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25026:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   25028:	f823 7b02 	strh.w	r7, [r3], #2
   2502c:	1c51      	adds	r1, r2, #1
   2502e:	3211      	adds	r2, #17
   25030:	f851 0b04 	ldr.w	r0, [r1], #4
   25034:	f843 0b04 	str.w	r0, [r3], #4
   25038:	4291      	cmp	r1, r2
   2503a:	d1f9      	bne.n	25030 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2503c:	6863      	ldr	r3, [r4, #4]
   2503e:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   25042:	899b      	ldrh	r3, [r3, #12]
   25044:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25046:	2812      	cmp	r0, #18
   25048:	e7de      	b.n	25008 <find_info_cb+0x60>

0002504a <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2504a:	30c0      	adds	r0, #192	; 0xc0
   2504c:	f3bf 8f5b 	dmb	ish
   25050:	e850 3f00 	ldrex	r3, [r0]
   25054:	f023 0301 	bic.w	r3, r3, #1
   25058:	e840 3200 	strex	r2, r3, [r0]
   2505c:	2a00      	cmp	r2, #0
   2505e:	d1f7      	bne.n	25050 <chan_rsp_sent+0x6>
   25060:	f3bf 8f5b 	dmb	ish
}
   25064:	4770      	bx	lr

00025066 <chan_cfm_sent>:
   25066:	30c0      	adds	r0, #192	; 0xc0
   25068:	f3bf 8f5b 	dmb	ish
   2506c:	e850 3f00 	ldrex	r3, [r0]
   25070:	f023 0302 	bic.w	r3, r3, #2
   25074:	e840 3200 	strex	r2, r3, [r0]
   25078:	2a00      	cmp	r2, #0
   2507a:	d1f7      	bne.n	2506c <chan_cfm_sent+0x6>
   2507c:	f3bf 8f5b 	dmb	ish
}
   25080:	4770      	bx	lr

00025082 <att_chan_read>:
{
   25082:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25086:	4680      	mov	r8, r0
   25088:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2508a:	4610      	mov	r0, r2
{
   2508c:	4699      	mov	r9, r3
   2508e:	468b      	mov	fp, r1
   25090:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25092:	f7ff fecb 	bl	24e2c <net_buf_frags_len>
   25096:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   2509a:	4283      	cmp	r3, r0
   2509c:	d97a      	bls.n	25194 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2509e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   250a2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   250a4:	4630      	mov	r0, r6
   250a6:	f000 fed9 	bl	25e5c <net_buf_frag_last>
	size_t len, total = 0;
   250aa:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   250ae:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   250b0:	4630      	mov	r0, r6
   250b2:	f7ff febb 	bl	24e2c <net_buf_frags_len>
   250b6:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   250ba:	f105 0708 	add.w	r7, r5, #8
   250be:	1a24      	subs	r4, r4, r0
   250c0:	4638      	mov	r0, r7
   250c2:	f000 ff33 	bl	25f2c <net_buf_simple_tailroom>
   250c6:	4284      	cmp	r4, r0
   250c8:	d211      	bcs.n	250ee <att_chan_read+0x6c>
   250ca:	4630      	mov	r0, r6
   250cc:	f7ff feae 	bl	24e2c <net_buf_frags_len>
   250d0:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   250d4:	1a24      	subs	r4, r4, r0
		if (!len) {
   250d6:	bb34      	cbnz	r4, 25126 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   250d8:	79b0      	ldrb	r0, [r6, #6]
   250da:	f7f3 f8e7 	bl	182ac <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   250de:	2200      	movs	r2, #0
   250e0:	2300      	movs	r3, #0
   250e2:	f000 fe81 	bl	25de8 <net_buf_alloc_fixed>
			if (!frag) {
   250e6:	4605      	mov	r5, r0
   250e8:	b930      	cbnz	r0, 250f8 <att_chan_read+0x76>
	return total;
   250ea:	4657      	mov	r7, sl
   250ec:	e02c      	b.n	25148 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   250ee:	4638      	mov	r0, r7
   250f0:	f000 ff1c 	bl	25f2c <net_buf_simple_tailroom>
   250f4:	4604      	mov	r4, r0
   250f6:	e7ee      	b.n	250d6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   250f8:	4601      	mov	r1, r0
   250fa:	4630      	mov	r0, r6
   250fc:	f000 febf 	bl	25e7e <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25100:	4630      	mov	r0, r6
   25102:	f7ff fe93 	bl	24e2c <net_buf_frags_len>
   25106:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2510a:	f105 0708 	add.w	r7, r5, #8
   2510e:	1a24      	subs	r4, r4, r0
   25110:	4638      	mov	r0, r7
   25112:	f000 ff0b 	bl	25f2c <net_buf_simple_tailroom>
   25116:	4284      	cmp	r4, r0
   25118:	d21a      	bcs.n	25150 <att_chan_read+0xce>
   2511a:	4630      	mov	r0, r6
   2511c:	f7ff fe86 	bl	24e2c <net_buf_frags_len>
   25120:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   25124:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25126:	68a9      	ldr	r1, [r5, #8]
   25128:	89aa      	ldrh	r2, [r5, #12]
   2512a:	f8db 7004 	ldr.w	r7, [fp, #4]
   2512e:	9803      	ldr	r0, [sp, #12]
   25130:	f8cd 9000 	str.w	r9, [sp]
   25134:	440a      	add	r2, r1
   25136:	b2a3      	uxth	r3, r4
   25138:	4659      	mov	r1, fp
   2513a:	47b8      	blx	r7
		if (read < 0) {
   2513c:	1e07      	subs	r7, r0, #0
   2513e:	da0c      	bge.n	2515a <att_chan_read+0xd8>
				return total;
   25140:	f1ba 0f00 	cmp.w	sl, #0
   25144:	bf18      	it	ne
   25146:	4657      	movne	r7, sl
}
   25148:	4638      	mov	r0, r7
   2514a:	b005      	add	sp, #20
   2514c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25150:	4638      	mov	r0, r7
   25152:	f000 feeb 	bl	25f2c <net_buf_simple_tailroom>
   25156:	4604      	mov	r4, r0
   25158:	e7e5      	b.n	25126 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2515a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2515c:	b993      	cbnz	r3, 25184 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2515e:	4639      	mov	r1, r7
   25160:	f105 0008 	add.w	r0, r5, #8
   25164:	f000 fe9c 	bl	25ea0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25168:	4630      	mov	r0, r6
   2516a:	f7ff fe5f 	bl	24e2c <net_buf_frags_len>
   2516e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   25172:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25174:	4283      	cmp	r3, r0
		total += read;
   25176:	44ba      	add	sl, r7
		offset += read;
   25178:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2517c:	d9b5      	bls.n	250ea <att_chan_read+0x68>
   2517e:	42a7      	cmp	r7, r4
   25180:	d096      	beq.n	250b0 <att_chan_read+0x2e>
   25182:	e7b2      	b.n	250ea <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25184:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25188:	4639      	mov	r1, r7
   2518a:	4628      	mov	r0, r5
   2518c:	4798      	blx	r3
   2518e:	2800      	cmp	r0, #0
   25190:	d1e5      	bne.n	2515e <att_chan_read+0xdc>
   25192:	e7aa      	b.n	250ea <att_chan_read+0x68>
		return 0;
   25194:	2700      	movs	r7, #0
   25196:	e7d7      	b.n	25148 <att_chan_read+0xc6>

00025198 <chan_req_send>:
{
   25198:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2519a:	690e      	ldr	r6, [r1, #16]
{
   2519c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2519e:	4630      	mov	r0, r6
{
   251a0:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   251a2:	f7ff fe43 	bl	24e2c <net_buf_frags_len>
   251a6:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   251aa:	4283      	cmp	r3, r0
   251ac:	d317      	bcc.n	251de <chan_req_send+0x46>
	chan->req = req;
   251ae:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   251b2:	f106 0008 	add.w	r0, r6, #8
   251b6:	f000 feb5 	bl	25f24 <net_buf_simple_headroom>
	state->len = buf->len;
   251ba:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   251bc:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   251be:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   251c0:	6920      	ldr	r0, [r4, #16]
   251c2:	f000 fe47 	bl	25e54 <net_buf_ref>
   251c6:	2200      	movs	r2, #0
   251c8:	4601      	mov	r1, r0
   251ca:	4628      	mov	r0, r5
   251cc:	f7e3 f970 	bl	84b0 <chan_send>
	if (err) {
   251d0:	4605      	mov	r5, r0
   251d2:	b110      	cbz	r0, 251da <chan_req_send+0x42>
		net_buf_unref(req->buf);
   251d4:	6920      	ldr	r0, [r4, #16]
   251d6:	f7f3 f925 	bl	18424 <net_buf_unref>
}
   251da:	4628      	mov	r0, r5
   251dc:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   251de:	f06f 0579 	mvn.w	r5, #121	; 0x79
   251e2:	e7fa      	b.n	251da <chan_req_send+0x42>

000251e4 <bt_att_chan_req_send>:
{
   251e4:	b570      	push	{r4, r5, r6, lr}
   251e6:	4604      	mov	r4, r0
   251e8:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   251ea:	f500 7688 	add.w	r6, r0, #272	; 0x110
   251ee:	2200      	movs	r2, #0
   251f0:	2300      	movs	r3, #0
   251f2:	4630      	mov	r0, r6
   251f4:	f7fa ff98 	bl	20128 <z_impl_k_sem_take>
   251f8:	2800      	cmp	r0, #0
   251fa:	db0a      	blt.n	25212 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   251fc:	4620      	mov	r0, r4
   251fe:	4629      	mov	r1, r5
   25200:	f7ff ffca 	bl	25198 <chan_req_send>
	if (err < 0) {
   25204:	1e04      	subs	r4, r0, #0
   25206:	da02      	bge.n	2520e <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   25208:	4630      	mov	r0, r6
   2520a:	f7fa ff67 	bl	200dc <z_impl_k_sem_give>
}
   2520e:	4620      	mov	r0, r4
   25210:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   25212:	f06f 040a 	mvn.w	r4, #10
   25216:	e7fa      	b.n	2520e <bt_att_chan_req_send+0x2a>

00025218 <bt_att_status>:
{
   25218:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2521a:	f3bf 8f5b 	dmb	ish
   2521e:	680b      	ldr	r3, [r1, #0]
   25220:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25224:	07db      	lsls	r3, r3, #31
{
   25226:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25228:	d519      	bpl.n	2525e <bt_att_status+0x46>
	if (!chan->att) {
   2522a:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2522e:	b1b0      	cbz	r0, 2525e <bt_att_status+0x46>
	if (chan->req) {
   25230:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   25234:	b99b      	cbnz	r3, 2525e <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   25236:	3004      	adds	r0, #4
   25238:	f7ff fdd3 	bl	24de2 <sys_slist_get>
	if (!node) {
   2523c:	4604      	mov	r4, r0
   2523e:	b170      	cbz	r0, 2525e <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25240:	4601      	mov	r1, r0
   25242:	f1a5 0008 	sub.w	r0, r5, #8
   25246:	f7ff ffcd 	bl	251e4 <bt_att_chan_req_send>
   2524a:	2800      	cmp	r0, #0
   2524c:	da07      	bge.n	2525e <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2524e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   25252:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25254:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   25256:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25258:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2525a:	b902      	cbnz	r2, 2525e <bt_att_status+0x46>
	list->tail = node;
   2525c:	609c      	str	r4, [r3, #8]
}
   2525e:	bd38      	pop	{r3, r4, r5, pc}

00025260 <write_cb>:
{
   25260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25262:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   25264:	4601      	mov	r1, r0
{
   25266:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25268:	222a      	movs	r2, #42	; 0x2a
   2526a:	6820      	ldr	r0, [r4, #0]
   2526c:	f000 fc38 	bl	25ae0 <bt_gatt_check_perm>
   25270:	4605      	mov	r5, r0
   25272:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   25274:	bb00      	cbnz	r0, 252b8 <write_cb+0x58>
	if (!data->req) {
   25276:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   25278:	68b7      	ldr	r7, [r6, #8]
   2527a:	68e2      	ldr	r2, [r4, #12]
   2527c:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   2527e:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25280:	bf14      	ite	ne
   25282:	2300      	movne	r3, #0
   25284:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   25286:	9301      	str	r3, [sp, #4]
   25288:	8a63      	ldrh	r3, [r4, #18]
   2528a:	9300      	str	r3, [sp, #0]
   2528c:	4631      	mov	r1, r6
   2528e:	8a23      	ldrh	r3, [r4, #16]
   25290:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   25292:	1e03      	subs	r3, r0, #0
   25294:	db05      	blt.n	252a2 <write_cb+0x42>
   25296:	8a22      	ldrh	r2, [r4, #16]
   25298:	4293      	cmp	r3, r2
   2529a:	d10b      	bne.n	252b4 <write_cb+0x54>
	data->err = 0U;
   2529c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2529e:	2501      	movs	r5, #1
   252a0:	e005      	b.n	252ae <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   252a2:	f113 0fff 	cmn.w	r3, #255	; 0xff
   252a6:	d305      	bcc.n	252b4 <write_cb+0x54>
		return -err;
   252a8:	425b      	negs	r3, r3
   252aa:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   252ac:	7523      	strb	r3, [r4, #20]
}
   252ae:	4628      	mov	r0, r5
   252b0:	b003      	add	sp, #12
   252b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   252b4:	230e      	movs	r3, #14
   252b6:	e7f9      	b.n	252ac <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   252b8:	2500      	movs	r5, #0
   252ba:	e7f8      	b.n	252ae <write_cb+0x4e>

000252bc <bt_att_sent>:
{
   252bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   252be:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   252c2:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   252c6:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   252c8:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   252cc:	b10b      	cbz	r3, 252d2 <bt_att_sent+0x16>
		chan->sent(chan);
   252ce:	4638      	mov	r0, r7
   252d0:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   252d2:	f3bf 8f5b 	dmb	ish
   252d6:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   252da:	e853 2f00 	ldrex	r2, [r3]
   252de:	f022 0210 	bic.w	r2, r2, #16
   252e2:	e843 2100 	strex	r1, r2, [r3]
   252e6:	2900      	cmp	r1, #0
   252e8:	d1f7      	bne.n	252da <bt_att_sent+0x1e>
   252ea:	f3bf 8f5b 	dmb	ish
	if (!att) {
   252ee:	b335      	cbz	r5, 2533e <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   252f0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   252f4:	b98b      	cbnz	r3, 2531a <bt_att_sent+0x5e>
   252f6:	686b      	ldr	r3, [r5, #4]
   252f8:	b17b      	cbz	r3, 2531a <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   252fa:	1d28      	adds	r0, r5, #4
   252fc:	f7ff fd71 	bl	24de2 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25300:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25302:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25304:	4638      	mov	r0, r7
   25306:	f7ff ff47 	bl	25198 <chan_req_send>
   2530a:	2800      	cmp	r0, #0
   2530c:	da17      	bge.n	2533e <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   2530e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   25310:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25312:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   25314:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   25316:	b903      	cbnz	r3, 2531a <bt_att_sent+0x5e>
	list->tail = node;
   25318:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   2531a:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   2531e:	4638      	mov	r0, r7
   25320:	f7ff fe28 	bl	24f74 <process_queue>
	if (!err) {
   25324:	b158      	cbz	r0, 2533e <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   25326:	f105 010c 	add.w	r1, r5, #12
   2532a:	4638      	mov	r0, r7
   2532c:	f7ff fe22 	bl	24f74 <process_queue>
	if (!err) {
   25330:	b128      	cbz	r0, 2533e <bt_att_sent+0x82>
   25332:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   25336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2533a:	f7fa becf 	b.w	200dc <z_impl_k_sem_give>
   2533e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025340 <read_cb>:
{
   25340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25344:	f8d2 8000 	ldr.w	r8, [r2]
{
   25348:	4606      	mov	r6, r0
	data->err = 0x00;
   2534a:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2534c:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   25350:	7317      	strb	r7, [r2, #12]
{
   25352:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25354:	4631      	mov	r1, r6
   25356:	2215      	movs	r2, #21
   25358:	f000 fbc2 	bl	25ae0 <bt_gatt_check_perm>
   2535c:	4604      	mov	r4, r0
   2535e:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   25360:	b9a0      	cbnz	r0, 2538c <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25362:	e9cd 0000 	strd	r0, r0, [sp]
   25366:	88ab      	ldrh	r3, [r5, #4]
   25368:	68aa      	ldr	r2, [r5, #8]
   2536a:	4631      	mov	r1, r6
   2536c:	4640      	mov	r0, r8
   2536e:	f7ff fe88 	bl	25082 <att_chan_read>
	if (ret < 0) {
   25372:	1e03      	subs	r3, r0, #0
   25374:	da0c      	bge.n	25390 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   25376:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2537a:	bf26      	itte	cs
   2537c:	425b      	negcs	r3, r3
   2537e:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25380:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   25382:	732b      	strb	r3, [r5, #12]
}
   25384:	4620      	mov	r0, r4
   25386:	b002      	add	sp, #8
   25388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2538c:	463c      	mov	r4, r7
   2538e:	e7f9      	b.n	25384 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   25390:	2401      	movs	r4, #1
   25392:	e7f7      	b.n	25384 <read_cb+0x44>

00025394 <att_write_cmd>:
{
   25394:	b530      	push	{r4, r5, lr}
   25396:	460c      	mov	r4, r1
   25398:	b085      	sub	sp, #20
   2539a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2539c:	f101 0008 	add.w	r0, r1, #8
   253a0:	f000 fdb8 	bl	25f14 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   253a4:	89a2      	ldrh	r2, [r4, #12]
   253a6:	9202      	str	r2, [sp, #8]
   253a8:	68a2      	ldr	r2, [r4, #8]
   253aa:	9201      	str	r2, [sp, #4]
   253ac:	2200      	movs	r2, #0
   253ae:	4603      	mov	r3, r0
   253b0:	9200      	str	r2, [sp, #0]
   253b2:	4611      	mov	r1, r2
   253b4:	4628      	mov	r0, r5
   253b6:	f7e3 fbfd 	bl	8bb4 <att_write_rsp>
}
   253ba:	b005      	add	sp, #20
   253bc:	bd30      	pop	{r4, r5, pc}

000253be <att_write_req>:
{
   253be:	b530      	push	{r4, r5, lr}
   253c0:	460c      	mov	r4, r1
   253c2:	b085      	sub	sp, #20
   253c4:	4605      	mov	r5, r0
   253c6:	f101 0008 	add.w	r0, r1, #8
   253ca:	f000 fda3 	bl	25f14 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   253ce:	89a2      	ldrh	r2, [r4, #12]
   253d0:	9202      	str	r2, [sp, #8]
   253d2:	68a2      	ldr	r2, [r4, #8]
   253d4:	9201      	str	r2, [sp, #4]
   253d6:	2200      	movs	r2, #0
   253d8:	4603      	mov	r3, r0
   253da:	9200      	str	r2, [sp, #0]
   253dc:	2112      	movs	r1, #18
   253de:	2213      	movs	r2, #19
   253e0:	4628      	mov	r0, r5
   253e2:	f7e3 fbe7 	bl	8bb4 <att_write_rsp>
}
   253e6:	b005      	add	sp, #20
   253e8:	bd30      	pop	{r4, r5, pc}

000253ea <att_read_blob_req>:
{
   253ea:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   253ec:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   253ee:	8813      	ldrh	r3, [r2, #0]
   253f0:	8852      	ldrh	r2, [r2, #2]
   253f2:	9200      	str	r2, [sp, #0]
   253f4:	210c      	movs	r1, #12
   253f6:	220d      	movs	r2, #13
   253f8:	f7e3 fdfa 	bl	8ff0 <att_read_rsp>
}
   253fc:	b003      	add	sp, #12
   253fe:	f85d fb04 	ldr.w	pc, [sp], #4

00025402 <att_read_req>:
{
   25402:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25404:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25406:	2200      	movs	r2, #0
   25408:	881b      	ldrh	r3, [r3, #0]
   2540a:	9200      	str	r2, [sp, #0]
   2540c:	210a      	movs	r1, #10
   2540e:	220b      	movs	r2, #11
   25410:	f7e3 fdee 	bl	8ff0 <att_read_rsp>
}
   25414:	b003      	add	sp, #12
   25416:	f85d fb04 	ldr.w	pc, [sp], #4

0002541a <bt_att_init>:
	bt_gatt_init();
   2541a:	f7e4 be6f 	b.w	a0fc <bt_gatt_init>

0002541e <bt_att_get_mtu>:
{
   2541e:	b508      	push	{r3, lr}
	att = att_get(conn);
   25420:	f7e3 f8bc 	bl	859c <att_get>
	if (!att) {
   25424:	b1d8      	cbz	r0, 2545e <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25426:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   25428:	b1c8      	cbz	r0, 2545e <bt_att_get_mtu+0x40>
   2542a:	f5b0 7196 	subs.w	r1, r0, #300	; 0x12c
   2542e:	d015      	beq.n	2545c <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25430:	6803      	ldr	r3, [r0, #0]
   25432:	b10b      	cbz	r3, 25438 <bt_att_get_mtu+0x1a>
   25434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   25438:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2543a:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   2543e:	4290      	cmp	r0, r2
   25440:	bf38      	it	cc
   25442:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25444:	b15b      	cbz	r3, 2545e <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25446:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
   2544a:	d004      	beq.n	25456 <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2544c:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   25450:	b10a      	cbz	r2, 25456 <bt_att_get_mtu+0x38>
   25452:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
   25456:	4619      	mov	r1, r3
   25458:	4613      	mov	r3, r2
   2545a:	e7ee      	b.n	2543a <bt_att_get_mtu+0x1c>
		return 0;
   2545c:	4608      	mov	r0, r1
}
   2545e:	bd08      	pop	{r3, pc}

00025460 <att_req_destroy>:
{
   25460:	b510      	push	{r4, lr}
   25462:	4604      	mov	r4, r0
	if (req->buf) {
   25464:	6900      	ldr	r0, [r0, #16]
   25466:	b108      	cbz	r0, 2546c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   25468:	f7f2 ffdc 	bl	18424 <net_buf_unref>
	if (req->destroy) {
   2546c:	68a3      	ldr	r3, [r4, #8]
   2546e:	b10b      	cbz	r3, 25474 <att_req_destroy+0x14>
		req->destroy(req);
   25470:	4620      	mov	r0, r4
   25472:	4798      	blx	r3
	bt_att_req_free(req);
   25474:	4620      	mov	r0, r4
}
   25476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   2547a:	f7e3 bf59 	b.w	9330 <bt_att_req_free>

0002547e <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2547e:	898a      	ldrh	r2, [r1, #12]
   25480:	6889      	ldr	r1, [r1, #8]
   25482:	2300      	movs	r3, #0
   25484:	f7e3 bf60 	b.w	9348 <att_handle_rsp>

00025488 <att_handle_find_type_rsp>:
   25488:	f7ff bff9 	b.w	2547e <att_handle_find_info_rsp>

0002548c <att_handle_read_type_rsp>:
   2548c:	f7ff bff7 	b.w	2547e <att_handle_find_info_rsp>

00025490 <att_handle_read_rsp>:
   25490:	f7ff bff5 	b.w	2547e <att_handle_find_info_rsp>

00025494 <att_handle_read_blob_rsp>:
   25494:	f7ff bff3 	b.w	2547e <att_handle_find_info_rsp>

00025498 <att_handle_read_mult_rsp>:
   25498:	f7ff bff1 	b.w	2547e <att_handle_find_info_rsp>

0002549c <att_handle_read_group_rsp>:
   2549c:	f7ff bfef 	b.w	2547e <att_handle_find_info_rsp>

000254a0 <att_handle_write_rsp>:
   254a0:	f7ff bfed 	b.w	2547e <att_handle_find_info_rsp>

000254a4 <att_handle_prepare_write_rsp>:
   254a4:	f7ff bfeb 	b.w	2547e <att_handle_find_info_rsp>

000254a8 <att_handle_exec_write_rsp>:
   254a8:	f7ff bfe9 	b.w	2547e <att_handle_find_info_rsp>

000254ac <att_confirm>:
   254ac:	f7ff bfe7 	b.w	2547e <att_handle_find_info_rsp>

000254b0 <att_mtu_rsp>:
{
   254b0:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   254b2:	6889      	ldr	r1, [r1, #8]
{
   254b4:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   254b6:	880c      	ldrh	r4, [r1, #0]
{
   254b8:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   254ba:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   254bc:	bf89      	itett	hi
   254be:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   254c0:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   254c2:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   254c6:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   254ca:	bf88      	it	hi
   254cc:	8992      	ldrhhi	r2, [r2, #12]
}
   254ce:	bc10      	pop	{r4}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   254d0:	bf9a      	itte	ls
   254d2:	2304      	movls	r3, #4
   254d4:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   254d6:	2300      	movhi	r3, #0
   254d8:	f7e3 bf36 	b.w	9348 <att_handle_rsp>

000254dc <bt_att_send>:
{
   254dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   254e0:	4605      	mov	r5, r0
   254e2:	460e      	mov	r6, r1
   254e4:	4614      	mov	r4, r2
   254e6:	4698      	mov	r8, r3
	att = att_get(conn);
   254e8:	f7e3 f858 	bl	859c <att_get>
	if (!att) {
   254ec:	4607      	mov	r7, r0
   254ee:	b938      	cbnz	r0, 25500 <bt_att_send+0x24>
		net_buf_unref(buf);
   254f0:	4630      	mov	r0, r6
   254f2:	f7f2 ff97 	bl	18424 <net_buf_unref>
		return -ENOTCONN;
   254f6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   254fa:	b002      	add	sp, #8
   254fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   25500:	b144      	cbz	r4, 25514 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   25502:	f8cd 8000 	str.w	r8, [sp]
   25506:	4623      	mov	r3, r4
   25508:	4632      	mov	r2, r6
   2550a:	2104      	movs	r1, #4
   2550c:	4628      	mov	r0, r5
   2550e:	f7ff fc2e 	bl	24d6e <bt_l2cap_send_cb>
   25512:	e7f2      	b.n	254fa <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25514:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   25516:	b184      	cbz	r4, 2553a <bt_att_send+0x5e>
   25518:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   2551c:	d00f      	beq.n	2553e <bt_att_send+0x62>
   2551e:	6824      	ldr	r4, [r4, #0]
   25520:	b10c      	cbz	r4, 25526 <bt_att_send+0x4a>
   25522:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   25526:	2000      	movs	r0, #0
   25528:	b95d      	cbnz	r5, 25542 <bt_att_send+0x66>
	if (ret < 0) {
   2552a:	b188      	cbz	r0, 25550 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   2552c:	f107 000c 	add.w	r0, r7, #12
   25530:	4631      	mov	r1, r6
   25532:	f000 fc82 	bl	25e3a <net_buf_put>
	return 0;
   25536:	4628      	mov	r0, r5
   25538:	e7df      	b.n	254fa <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2553a:	4625      	mov	r5, r4
   2553c:	e7f3      	b.n	25526 <bt_att_send+0x4a>
   2553e:	462c      	mov	r4, r5
   25540:	e7f1      	b.n	25526 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   25542:	2200      	movs	r2, #0
   25544:	4631      	mov	r1, r6
   25546:	4628      	mov	r0, r5
   25548:	f7ff fcef 	bl	24f2a <bt_att_chan_send>
		if (ret >= 0) {
   2554c:	2800      	cmp	r0, #0
   2554e:	db01      	blt.n	25554 <bt_att_send+0x78>
	return 0;
   25550:	2000      	movs	r0, #0
   25552:	e7d2      	b.n	254fa <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25554:	b154      	cbz	r4, 2556c <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25556:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   2555a:	d004      	beq.n	25566 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2555c:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   25560:	b10b      	cbz	r3, 25566 <bt_att_send+0x8a>
   25562:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   25566:	4625      	mov	r5, r4
   25568:	461c      	mov	r4, r3
   2556a:	e7dd      	b.n	25528 <bt_att_send+0x4c>
   2556c:	4623      	mov	r3, r4
   2556e:	e7fa      	b.n	25566 <bt_att_send+0x8a>

00025570 <bt_att_req_send>:
{
   25570:	b570      	push	{r4, r5, r6, lr}
   25572:	460c      	mov	r4, r1
	att = att_get(conn);
   25574:	f7e3 f812 	bl	859c <att_get>
	if (!att) {
   25578:	4605      	mov	r5, r0
   2557a:	b930      	cbnz	r0, 2558a <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   2557c:	6920      	ldr	r0, [r4, #16]
   2557e:	f7f2 ff51 	bl	18424 <net_buf_unref>
		req->buf = NULL;
   25582:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   25584:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   25588:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2558a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   2558c:	b153      	cbz	r3, 255a4 <bt_att_req_send+0x34>
   2558e:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   25592:	d007      	beq.n	255a4 <bt_att_req_send+0x34>
   25594:	681e      	ldr	r6, [r3, #0]
   25596:	b10e      	cbz	r6, 2559c <bt_att_req_send+0x2c>
   25598:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   2559c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   255a0:	b143      	cbz	r3, 255b4 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   255a2:	b96e      	cbnz	r6, 255c0 <bt_att_req_send+0x50>
	parent->next = child;
   255a4:	2000      	movs	r0, #0
   255a6:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   255a8:	68ab      	ldr	r3, [r5, #8]
   255aa:	b9a3      	cbnz	r3, 255d6 <bt_att_req_send+0x66>
	list->head = node;
   255ac:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   255b0:	4618      	mov	r0, r3
}
   255b2:	e7e9      	b.n	25588 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   255b4:	4621      	mov	r1, r4
   255b6:	f7ff fe15 	bl	251e4 <bt_att_chan_req_send>
			if (ret >= 0) {
   255ba:	2800      	cmp	r0, #0
   255bc:	dbf1      	blt.n	255a2 <bt_att_req_send+0x32>
   255be:	e7e3      	b.n	25588 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   255c0:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   255c4:	d004      	beq.n	255d0 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   255c6:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   255ca:	b10b      	cbz	r3, 255d0 <bt_att_req_send+0x60>
   255cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   255d0:	4630      	mov	r0, r6
   255d2:	461e      	mov	r6, r3
   255d4:	e7e2      	b.n	2559c <bt_att_req_send+0x2c>
	parent->next = child;
   255d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   255d8:	60ac      	str	r4, [r5, #8]
}
   255da:	e7d5      	b.n	25588 <bt_att_req_send+0x18>

000255dc <gatt_ccc_changed>:
{
   255dc:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   255de:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   255e0:	895a      	ldrh	r2, [r3, #10]
   255e2:	428a      	cmp	r2, r1
   255e4:	d003      	beq.n	255ee <gatt_ccc_changed+0x12>
		ccc->value = value;
   255e6:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   255e8:	68db      	ldr	r3, [r3, #12]
   255ea:	b103      	cbz	r3, 255ee <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   255ec:	4718      	bx	r3
}
   255ee:	4770      	bx	lr

000255f0 <gatt_indicate_rsp>:
{
   255f0:	b510      	push	{r4, lr}
   255f2:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   255f4:	7da3      	ldrb	r3, [r4, #22]
   255f6:	3b01      	subs	r3, #1
{
   255f8:	460a      	mov	r2, r1
	params->_ref--;
   255fa:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   255fc:	4621      	mov	r1, r4
   255fe:	68a3      	ldr	r3, [r4, #8]
   25600:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   25602:	68e3      	ldr	r3, [r4, #12]
   25604:	b12b      	cbz	r3, 25612 <gatt_indicate_rsp+0x22>
   25606:	7da2      	ldrb	r2, [r4, #22]
   25608:	b91a      	cbnz	r2, 25612 <gatt_indicate_rsp+0x22>
		params->destroy(params);
   2560a:	4620      	mov	r0, r4
}
   2560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25610:	4718      	bx	r3
}
   25612:	bd10      	pop	{r4, pc}

00025614 <match_uuid>:
	data->attr = attr;
   25614:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   25616:	8091      	strh	r1, [r2, #4]
}
   25618:	2000      	movs	r0, #0
   2561a:	4770      	bx	lr

0002561c <ccc_set_cb>:
}
   2561c:	2000      	movs	r0, #0
   2561e:	4770      	bx	lr

00025620 <write_name>:
{
   25620:	b570      	push	{r4, r5, r6, lr}
   25622:	b092      	sub	sp, #72	; 0x48
   25624:	4615      	mov	r5, r2
   25626:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2562a:	2100      	movs	r1, #0
   2562c:	223d      	movs	r2, #61	; 0x3d
   2562e:	a802      	add	r0, sp, #8
{
   25630:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25632:	9101      	str	r1, [sp, #4]
   25634:	f006 f8de 	bl	2b7f4 <memset>
	if (offset) {
   25638:	b96e      	cbnz	r6, 25656 <write_name+0x36>
	if (len >= sizeof(value)) {
   2563a:	2c40      	cmp	r4, #64	; 0x40
   2563c:	d80e      	bhi.n	2565c <write_name+0x3c>
	memcpy(value, buf, len);
   2563e:	2341      	movs	r3, #65	; 0x41
   25640:	4622      	mov	r2, r4
   25642:	4629      	mov	r1, r5
   25644:	a801      	add	r0, sp, #4
   25646:	f006 f8c2 	bl	2b7ce <__memcpy_chk>
	bt_set_name(value);
   2564a:	a801      	add	r0, sp, #4
   2564c:	f7e1 fb42 	bl	6cd4 <bt_set_name>
	return len;
   25650:	4620      	mov	r0, r4
}
   25652:	b012      	add	sp, #72	; 0x48
   25654:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25656:	f06f 0006 	mvn.w	r0, #6
   2565a:	e7fa      	b.n	25652 <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   2565c:	f06f 000c 	mvn.w	r0, #12
   25660:	e7f7      	b.n	25652 <write_name+0x32>

00025662 <gen_hash_m>:
{
   25662:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25664:	6807      	ldr	r7, [r0, #0]
   25666:	783d      	ldrb	r5, [r7, #0]
{
   25668:	b089      	sub	sp, #36	; 0x24
   2566a:	4606      	mov	r6, r0
   2566c:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2566e:	b10d      	cbz	r5, 25674 <gen_hash_m+0x12>
	switch (u16->val) {
   25670:	2501      	movs	r5, #1
   25672:	e014      	b.n	2569e <gen_hash_m+0x3c>
   25674:	887b      	ldrh	r3, [r7, #2]
   25676:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2567a:	d004      	beq.n	25686 <gen_hash_m+0x24>
   2567c:	d812      	bhi.n	256a4 <gen_hash_m+0x42>
   2567e:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25682:	2b03      	cmp	r3, #3
   25684:	d8f4      	bhi.n	25670 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25686:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2568a:	2202      	movs	r2, #2
   2568c:	f10d 010e 	add.w	r1, sp, #14
   25690:	4620      	mov	r0, r4
   25692:	f7fe fdc9 	bl	24228 <tc_cmac_update>
   25696:	b9e0      	cbnz	r0, 256d2 <gen_hash_m+0x70>
			state->err = -EINVAL;
   25698:	f06f 0315 	mvn.w	r3, #21
   2569c:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2569e:	4628      	mov	r0, r5
   256a0:	b009      	add	sp, #36	; 0x24
   256a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   256a4:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   256a8:	33ff      	adds	r3, #255	; 0xff
   256aa:	b29b      	uxth	r3, r3
   256ac:	2b04      	cmp	r3, #4
   256ae:	d8df      	bhi.n	25670 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   256b0:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256b4:	2202      	movs	r2, #2
   256b6:	f10d 010e 	add.w	r1, sp, #14
   256ba:	4620      	mov	r0, r4
   256bc:	f7fe fdb4 	bl	24228 <tc_cmac_update>
   256c0:	2800      	cmp	r0, #0
   256c2:	d0e9      	beq.n	25698 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   256c4:	887b      	ldrh	r3, [r7, #2]
   256c6:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256ca:	2202      	movs	r2, #2
   256cc:	f10d 010e 	add.w	r1, sp, #14
   256d0:	e017      	b.n	25702 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   256d2:	887b      	ldrh	r3, [r7, #2]
   256d4:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256d8:	2202      	movs	r2, #2
   256da:	f10d 010e 	add.w	r1, sp, #14
   256de:	4620      	mov	r0, r4
   256e0:	f7fe fda2 	bl	24228 <tc_cmac_update>
   256e4:	2800      	cmp	r0, #0
   256e6:	d0d7      	beq.n	25698 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   256e8:	2000      	movs	r0, #0
   256ea:	2310      	movs	r3, #16
   256ec:	eb0d 0203 	add.w	r2, sp, r3
   256f0:	6877      	ldr	r7, [r6, #4]
   256f2:	9000      	str	r0, [sp, #0]
   256f4:	4631      	mov	r1, r6
   256f6:	47b8      	blx	r7
		if (len < 0) {
   256f8:	1e02      	subs	r2, r0, #0
   256fa:	da01      	bge.n	25700 <gen_hash_m+0x9e>
			state->err = len;
   256fc:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   256fe:	e7ce      	b.n	2569e <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   25700:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25702:	4620      	mov	r0, r4
   25704:	f7fe fd90 	bl	24228 <tc_cmac_update>
   25708:	2800      	cmp	r0, #0
   2570a:	d1b1      	bne.n	25670 <gen_hash_m+0xe>
   2570c:	e7c4      	b.n	25698 <gen_hash_m+0x36>

0002570e <bt_addr_le_cmp>:
   2570e:	2207      	movs	r2, #7
   25710:	f006 b841 	b.w	2b796 <memcmp>

00025714 <find_ccc_cfg>:
{
   25714:	b513      	push	{r0, r1, r4, lr}
   25716:	1c4a      	adds	r2, r1, #1
   25718:	460c      	mov	r4, r1
		if (conn) {
   2571a:	b140      	cbz	r0, 2572e <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2571c:	7809      	ldrb	r1, [r1, #0]
   2571e:	f7ff fa38 	bl	24b92 <bt_conn_is_peer_addr_le>
   25722:	2800      	cmp	r0, #0
	return NULL;
   25724:	bf08      	it	eq
   25726:	2400      	moveq	r4, #0
}
   25728:	4620      	mov	r0, r4
   2572a:	b002      	add	sp, #8
   2572c:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2572e:	9000      	str	r0, [sp, #0]
   25730:	4669      	mov	r1, sp
   25732:	f8cd 0003 	str.w	r0, [sp, #3]
   25736:	4610      	mov	r0, r2
   25738:	f7ff ffe9 	bl	2570e <bt_addr_le_cmp>
   2573c:	2800      	cmp	r0, #0
	return NULL;
   2573e:	bf18      	it	ne
   25740:	2400      	movne	r4, #0
   25742:	e7f1      	b.n	25728 <find_ccc_cfg+0x14>

00025744 <ccc_find_cfg>:
{
   25744:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   25746:	7803      	ldrb	r3, [r0, #0]
   25748:	4293      	cmp	r3, r2
{
   2574a:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   2574c:	d001      	beq.n	25752 <ccc_find_cfg+0xe>
	return NULL;
   2574e:	2000      	movs	r0, #0
}
   25750:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   25752:	3001      	adds	r0, #1
   25754:	f7ff ffdb 	bl	2570e <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   25758:	2800      	cmp	r0, #0
   2575a:	d1f8      	bne.n	2574e <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2575c:	4620      	mov	r0, r4
   2575e:	e7f7      	b.n	25750 <ccc_find_cfg+0xc>

00025760 <atomic_and>:
{
   25760:	4603      	mov	r3, r0
}
   25762:	f3bf 8f5b 	dmb	ish
   25766:	e853 0f00 	ldrex	r0, [r3]
   2576a:	ea00 0201 	and.w	r2, r0, r1
   2576e:	e843 2c00 	strex	ip, r2, [r3]
   25772:	f1bc 0f00 	cmp.w	ip, #0
   25776:	d1f6      	bne.n	25766 <atomic_and+0x6>
   25778:	f3bf 8f5b 	dmb	ish
   2577c:	4770      	bx	lr

0002577e <gatt_read_mult_rsp>:
{
   2577e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25780:	9d08      	ldr	r5, [sp, #32]
   25782:	4606      	mov	r6, r0
   25784:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   25786:	460c      	mov	r4, r1
   25788:	b901      	cbnz	r1, 2578c <gatt_read_mult_rsp+0xe>
   2578a:	b94b      	cbnz	r3, 257a0 <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   2578c:	2300      	movs	r3, #0
   2578e:	9308      	str	r3, [sp, #32]
   25790:	462a      	mov	r2, r5
   25792:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   25794:	4630      	mov	r0, r6
   25796:	46bc      	mov	ip, r7
}
   25798:	b003      	add	sp, #12
   2579a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2579e:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   257a0:	9300      	str	r3, [sp, #0]
   257a2:	4613      	mov	r3, r2
   257a4:	462a      	mov	r2, r5
   257a6:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   257a8:	9408      	str	r4, [sp, #32]
   257aa:	682f      	ldr	r7, [r5, #0]
   257ac:	4623      	mov	r3, r4
   257ae:	462a      	mov	r2, r5
   257b0:	4621      	mov	r1, r4
   257b2:	e7ef      	b.n	25794 <gatt_read_mult_rsp+0x16>

000257b4 <bt_addr_le_copy>:
   257b4:	680b      	ldr	r3, [r1, #0]
   257b6:	6003      	str	r3, [r0, #0]
   257b8:	888b      	ldrh	r3, [r1, #4]
   257ba:	8083      	strh	r3, [r0, #4]
   257bc:	798b      	ldrb	r3, [r1, #6]
   257be:	7183      	strb	r3, [r0, #6]
}
   257c0:	4770      	bx	lr

000257c2 <clear_ccc_cfg>:
{
   257c2:	b513      	push	{r0, r1, r4, lr}
   257c4:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   257c6:	2400      	movs	r4, #0
   257c8:	4669      	mov	r1, sp
   257ca:	3001      	adds	r0, #1
   257cc:	9400      	str	r4, [sp, #0]
   257ce:	f8cd 4003 	str.w	r4, [sp, #3]
   257d2:	f7ff ffef 	bl	257b4 <bt_addr_le_copy>
	cfg->id = 0U;
   257d6:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   257d8:	8114      	strh	r4, [r2, #8]
}
   257da:	b002      	add	sp, #8
   257dc:	bd10      	pop	{r4, pc}

000257de <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   257de:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   257e0:	2300      	movs	r3, #0
   257e2:	4669      	mov	r1, sp
   257e4:	3001      	adds	r0, #1
   257e6:	9300      	str	r3, [sp, #0]
   257e8:	f8cd 3003 	str.w	r3, [sp, #3]
   257ec:	f7ff ffe2 	bl	257b4 <bt_addr_le_copy>
}
   257f0:	b003      	add	sp, #12
   257f2:	f85d fb04 	ldr.w	pc, [sp], #4

000257f6 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   257f6:	2300      	movs	r3, #0
   257f8:	6003      	str	r3, [r0, #0]
   257fa:	6043      	str	r3, [r0, #4]
   257fc:	6083      	str	r3, [r0, #8]
}
   257fe:	4770      	bx	lr

00025800 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25800:	2a02      	cmp	r2, #2
{
   25802:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25804:	d108      	bne.n	25818 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25806:	2300      	movs	r3, #0
   25808:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2580c:	461a      	mov	r2, r3
   2580e:	7a00      	ldrb	r0, [r0, #8]
   25810:	f7e4 f822 	bl	9858 <sc_save>
}
   25814:	2002      	movs	r0, #2
   25816:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25818:	f7e4 f95e 	bl	9ad8 <sc_clear>
   2581c:	e7fa      	b.n	25814 <sc_ccc_cfg_write+0x14>

0002581e <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2581e:	b538      	push	{r3, r4, r5, lr}
   25820:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   25824:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   25826:	460c      	mov	r4, r1
   25828:	4611      	mov	r1, r2
	if (offset > value_len) {
   2582a:	d30a      	bcc.n	25842 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2582c:	1aad      	subs	r5, r5, r2
   2582e:	42a5      	cmp	r5, r4
   25830:	bfa8      	it	ge
   25832:	4625      	movge	r5, r4
   25834:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25836:	462a      	mov	r2, r5
   25838:	4419      	add	r1, r3
   2583a:	f005 ffba 	bl	2b7b2 <memcpy>
}
   2583e:	4628      	mov	r0, r5
   25840:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25842:	f06f 0506 	mvn.w	r5, #6
   25846:	e7fa      	b.n	2583e <bt_gatt_attr_read.constprop.0+0x20>

00025848 <bt_gatt_attr_read_ccc>:
{
   25848:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2584a:	68c9      	ldr	r1, [r1, #12]
{
   2584c:	b085      	sub	sp, #20
   2584e:	4614      	mov	r4, r2
   25850:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   25852:	f7ff ff5f 	bl	25714 <find_ccc_cfg>
	if (cfg) {
   25856:	b100      	cbz	r0, 2585a <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   25858:	8900      	ldrh	r0, [r0, #8]
   2585a:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2585e:	2302      	movs	r3, #2
   25860:	9300      	str	r3, [sp, #0]
   25862:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25866:	f10d 030e 	add.w	r3, sp, #14
   2586a:	4629      	mov	r1, r5
   2586c:	4620      	mov	r0, r4
   2586e:	f7ff ffd6 	bl	2581e <bt_gatt_attr_read.constprop.0>
}
   25872:	b005      	add	sp, #20
   25874:	bd30      	pop	{r4, r5, pc}

00025876 <bt_gatt_attr_read_service>:
{
   25876:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25878:	460c      	mov	r4, r1
   2587a:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2587c:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2587e:	781c      	ldrb	r4, [r3, #0]
{
   25880:	4610      	mov	r0, r2
   25882:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   25886:	b954      	cbnz	r4, 2589e <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25888:	885b      	ldrh	r3, [r3, #2]
   2588a:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2588e:	2302      	movs	r3, #2
   25890:	9300      	str	r3, [sp, #0]
   25892:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25896:	f7ff ffc2 	bl	2581e <bt_gatt_attr_read.constprop.0>
}
   2589a:	b004      	add	sp, #16
   2589c:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2589e:	2410      	movs	r4, #16
   258a0:	9400      	str	r4, [sp, #0]
   258a2:	3301      	adds	r3, #1
   258a4:	e7f7      	b.n	25896 <bt_gatt_attr_read_service+0x20>

000258a6 <cf_read>:
{
   258a6:	b530      	push	{r4, r5, lr}
   258a8:	b085      	sub	sp, #20
   258aa:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   258ac:	2300      	movs	r3, #0
{
   258ae:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   258b0:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   258b4:	f7e3 fed4 	bl	9660 <find_cf_cfg>
	if (cfg) {
   258b8:	b110      	cbz	r0, 258c0 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   258ba:	7a03      	ldrb	r3, [r0, #8]
   258bc:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   258c0:	2301      	movs	r3, #1
   258c2:	9300      	str	r3, [sp, #0]
   258c4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   258c8:	ab03      	add	r3, sp, #12
   258ca:	4629      	mov	r1, r5
   258cc:	4620      	mov	r0, r4
   258ce:	f7ff ffa6 	bl	2581e <bt_gatt_attr_read.constprop.0>
}
   258d2:	b005      	add	sp, #20
   258d4:	bd30      	pop	{r4, r5, pc}

000258d6 <read_name>:
{
   258d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258da:	4614      	mov	r4, r2
   258dc:	461d      	mov	r5, r3
   258de:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   258e2:	f7e1 fa49 	bl	6d78 <bt_get_name>
   258e6:	4606      	mov	r6, r0
				 strlen(name));
   258e8:	f7da fdd0 	bl	48c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   258ec:	b280      	uxth	r0, r0
   258ee:	9006      	str	r0, [sp, #24]
   258f0:	4633      	mov	r3, r6
   258f2:	463a      	mov	r2, r7
   258f4:	4629      	mov	r1, r5
   258f6:	4620      	mov	r0, r4
}
   258f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   258fc:	f7ff bf8f 	b.w	2581e <bt_gatt_attr_read.constprop.0>

00025900 <read_appearance>:
{
   25900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25902:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25904:	f240 3341 	movw	r3, #833	; 0x341
   25908:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2590c:	2302      	movs	r3, #2
   2590e:	9300      	str	r3, [sp, #0]
{
   25910:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   25912:	f10d 030e 	add.w	r3, sp, #14
   25916:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2591a:	f7ff ff80 	bl	2581e <bt_gatt_attr_read.constprop.0>
}
   2591e:	b005      	add	sp, #20
   25920:	f85d fb04 	ldr.w	pc, [sp], #4

00025924 <clear_cf_cfg>:
{
   25924:	b513      	push	{r0, r1, r4, lr}
   25926:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25928:	2400      	movs	r4, #0
   2592a:	4669      	mov	r1, sp
   2592c:	3001      	adds	r0, #1
   2592e:	9400      	str	r4, [sp, #0]
   25930:	f8cd 4003 	str.w	r4, [sp, #3]
   25934:	f7ff ff3e 	bl	257b4 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   25938:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2593a:	320c      	adds	r2, #12
   2593c:	f3bf 8f5b 	dmb	ish
   25940:	e852 3f00 	ldrex	r3, [r2]
   25944:	e842 4100 	strex	r1, r4, [r2]
   25948:	2900      	cmp	r1, #0
   2594a:	d1f9      	bne.n	25940 <clear_cf_cfg+0x1c>
   2594c:	f3bf 8f5b 	dmb	ish
}
   25950:	b002      	add	sp, #8
   25952:	bd10      	pop	{r4, pc}

00025954 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25954:	2301      	movs	r3, #1
   25956:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25958:	f3bf 8f5b 	dmb	ish
   2595c:	e850 2f00 	ldrex	r2, [r0]
   25960:	431a      	orrs	r2, r3
   25962:	e840 2100 	strex	r1, r2, [r0]
   25966:	2900      	cmp	r1, #0
   25968:	d1f8      	bne.n	2595c <atomic_set_bit+0x8>
   2596a:	f3bf 8f5b 	dmb	ish
}
   2596e:	4770      	bx	lr

00025970 <sc_restore_rsp>:
{
   25970:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   25972:	f7e3 fe75 	bl	9660 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   25976:	b140      	cbz	r0, 2598a <sc_restore_rsp+0x1a>
   25978:	7a03      	ldrb	r3, [r0, #8]
   2597a:	07db      	lsls	r3, r3, #31
   2597c:	d505      	bpl.n	2598a <sc_restore_rsp+0x1a>
}
   2597e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25982:	2100      	movs	r1, #0
   25984:	300c      	adds	r0, #12
   25986:	f7ff bfe5 	b.w	25954 <atomic_set_bit>
}
   2598a:	bd08      	pop	{r3, pc}

0002598c <gatt_sub_remove>:
{
   2598c:	b538      	push	{r3, r4, r5, lr}
   2598e:	460c      	mov	r4, r1
	if (params) {
   25990:	4619      	mov	r1, r3
   25992:	b16b      	cbz	r3, 259b0 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   25994:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   25998:	695b      	ldr	r3, [r3, #20]
   2599a:	b982      	cbnz	r2, 259be <gatt_sub_remove+0x32>
   2599c:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   2599e:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   259a0:	4295      	cmp	r5, r2
   259a2:	d100      	bne.n	259a6 <gatt_sub_remove+0x1a>
	list->tail = node;
   259a4:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   259a6:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   259a8:	680d      	ldr	r5, [r1, #0]
   259aa:	614b      	str	r3, [r1, #20]
   259ac:	461a      	mov	r2, r3
   259ae:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   259b0:	68a3      	ldr	r3, [r4, #8]
   259b2:	b953      	cbnz	r3, 259ca <gatt_sub_remove+0x3e>
   259b4:	4620      	mov	r0, r4
}
   259b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   259ba:	f7ff bf10 	b.w	257de <gatt_sub_remove.part.0>
   259be:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   259c0:	68e3      	ldr	r3, [r4, #12]
   259c2:	429d      	cmp	r5, r3
	list->tail = node;
   259c4:	bf08      	it	eq
   259c6:	60e2      	streq	r2, [r4, #12]
}
   259c8:	e7ed      	b.n	259a6 <gatt_sub_remove+0x1a>
   259ca:	bd38      	pop	{r3, r4, r5, pc}

000259cc <gatt_write_ccc_rsp>:
{
   259cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   259d0:	9c06      	ldr	r4, [sp, #24]
   259d2:	460e      	mov	r6, r1
   259d4:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   259d6:	f06f 0104 	mvn.w	r1, #4
   259da:	f104 0010 	add.w	r0, r4, #16
   259de:	f7ff febf 	bl	25760 <atomic_and>
	if (err) {
   259e2:	b1e6      	cbz	r6, 25a1e <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   259e4:	4628      	mov	r0, r5
   259e6:	f7e3 fe69 	bl	96bc <gatt_sub_find>
		if (!sub) {
   259ea:	4601      	mov	r1, r0
   259ec:	b308      	cbz	r0, 25a32 <gatt_write_ccc_rsp+0x66>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   259ee:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   259f0:	b143      	cbz	r3, 25a04 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   259f2:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   259f4:	f104 0014 	add.w	r0, r4, #20
   259f8:	4283      	cmp	r3, r0
   259fa:	d10b      	bne.n	25a14 <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   259fc:	4623      	mov	r3, r4
   259fe:	4628      	mov	r0, r5
   25a00:	f7ff ffc4 	bl	2598c <gatt_sub_remove>
	if (params->write) {
   25a04:	6863      	ldr	r3, [r4, #4]
   25a06:	b1a3      	cbz	r3, 25a32 <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   25a08:	4631      	mov	r1, r6
   25a0a:	4628      	mov	r0, r5
   25a0c:	2200      	movs	r2, #0
}
   25a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   25a12:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   25a14:	2a00      	cmp	r2, #0
   25a16:	d0f5      	beq.n	25a04 <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25a18:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   25a1a:	6812      	ldr	r2, [r2, #0]
   25a1c:	e7ec      	b.n	259f8 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   25a1e:	89a3      	ldrh	r3, [r4, #12]
   25a20:	2b00      	cmp	r3, #0
   25a22:	d1ef      	bne.n	25a04 <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   25a24:	6827      	ldr	r7, [r4, #0]
   25a26:	4633      	mov	r3, r6
   25a28:	4632      	mov	r2, r6
   25a2a:	4621      	mov	r1, r4
   25a2c:	4628      	mov	r0, r5
   25a2e:	47b8      	blx	r7
   25a30:	e7e8      	b.n	25a04 <gatt_write_ccc_rsp+0x38>
}
   25a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025a36 <bt_gatt_attr_value_handle>:
{
   25a36:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25a38:	4604      	mov	r4, r0
   25a3a:	b910      	cbnz	r0, 25a42 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25a3c:	2000      	movs	r0, #0
}
   25a3e:	b002      	add	sp, #8
   25a40:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25a42:	2300      	movs	r3, #0
   25a44:	f88d 3004 	strb.w	r3, [sp, #4]
   25a48:	6800      	ldr	r0, [r0, #0]
   25a4a:	f642 0303 	movw	r3, #10243	; 0x2803
   25a4e:	a901      	add	r1, sp, #4
   25a50:	f8ad 3006 	strh.w	r3, [sp, #6]
   25a54:	f7fe fe8a 	bl	2476c <bt_uuid_cmp>
   25a58:	2800      	cmp	r0, #0
   25a5a:	d1ef      	bne.n	25a3c <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25a5c:	68e3      	ldr	r3, [r4, #12]
   25a5e:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25a60:	2800      	cmp	r0, #0
   25a62:	d1ec      	bne.n	25a3e <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25a64:	4620      	mov	r0, r4
   25a66:	f7e4 fbb1 	bl	a1cc <bt_gatt_attr_get_handle>
   25a6a:	3001      	adds	r0, #1
   25a6c:	b280      	uxth	r0, r0
	return handle;
   25a6e:	e7e6      	b.n	25a3e <bt_gatt_attr_value_handle+0x8>

00025a70 <bt_gatt_attr_read_chrc>:
{
   25a70:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25a72:	68ce      	ldr	r6, [r1, #12]
{
   25a74:	b088      	sub	sp, #32
   25a76:	4608      	mov	r0, r1
   25a78:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   25a7a:	79b3      	ldrb	r3, [r6, #6]
   25a7c:	f88d 300c 	strb.w	r3, [sp, #12]
{
   25a80:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25a82:	f7ff ffd8 	bl	25a36 <bt_gatt_attr_value_handle>
   25a86:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25a8a:	6830      	ldr	r0, [r6, #0]
   25a8c:	7803      	ldrb	r3, [r0, #0]
   25a8e:	b96b      	cbnz	r3, 25aac <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25a90:	8843      	ldrh	r3, [r0, #2]
   25a92:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   25a96:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25a98:	9300      	str	r3, [sp, #0]
   25a9a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   25a9e:	ab03      	add	r3, sp, #12
   25aa0:	4629      	mov	r1, r5
   25aa2:	4620      	mov	r0, r4
   25aa4:	f7ff febb 	bl	2581e <bt_gatt_attr_read.constprop.0>
}
   25aa8:	b008      	add	sp, #32
   25aaa:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25aac:	1c43      	adds	r3, r0, #1
   25aae:	f10d 020f 	add.w	r2, sp, #15
   25ab2:	3011      	adds	r0, #17
   25ab4:	f853 1b04 	ldr.w	r1, [r3], #4
   25ab8:	f842 1b04 	str.w	r1, [r2], #4
   25abc:	4283      	cmp	r3, r0
   25abe:	d1f9      	bne.n	25ab4 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   25ac0:	2313      	movs	r3, #19
   25ac2:	e7e9      	b.n	25a98 <bt_gatt_attr_read_chrc+0x28>

00025ac4 <bt_gatt_foreach_attr>:
{
   25ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25ac6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25aca:	2300      	movs	r3, #0
   25acc:	9300      	str	r3, [sp, #0]
   25ace:	461a      	mov	r2, r3
   25ad0:	f7e4 fbac 	bl	a22c <bt_gatt_foreach_attr_type>
}
   25ad4:	b005      	add	sp, #20
   25ad6:	f85d fb04 	ldr.w	pc, [sp], #4

00025ada <db_hash_process>:
	db_hash_gen(true);
   25ada:	2001      	movs	r0, #1
   25adc:	f7e4 bc00 	b.w	a2e0 <db_hash_gen>

00025ae0 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   25ae0:	07d3      	lsls	r3, r2, #31
{
   25ae2:	b510      	push	{r4, lr}
   25ae4:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25ae6:	d504      	bpl.n	25af2 <bt_gatt_check_perm+0x12>
   25ae8:	f014 0f15 	tst.w	r4, #21
   25aec:	d017      	beq.n	25b1e <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25aee:	684b      	ldr	r3, [r1, #4]
   25af0:	b1ab      	cbz	r3, 25b1e <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25af2:	0793      	lsls	r3, r2, #30
   25af4:	d504      	bpl.n	25b00 <bt_gatt_check_perm+0x20>
   25af6:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   25afa:	d012      	beq.n	25b22 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25afc:	688b      	ldr	r3, [r1, #8]
   25afe:	b183      	cbz	r3, 25b22 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   25b00:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25b02:	f014 0f30 	tst.w	r4, #48	; 0x30
   25b06:	d104      	bne.n	25b12 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25b08:	f014 000c 	ands.w	r0, r4, #12
   25b0c:	bf18      	it	ne
   25b0e:	200f      	movne	r0, #15
}
   25b10:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25b12:	f7ff f833 	bl	24b7c <bt_conn_get_security>
   25b16:	2802      	cmp	r0, #2
   25b18:	d8f6      	bhi.n	25b08 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   25b1a:	2005      	movs	r0, #5
   25b1c:	e7f8      	b.n	25b10 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25b1e:	2002      	movs	r0, #2
   25b20:	e7f6      	b.n	25b10 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25b22:	2003      	movs	r0, #3
   25b24:	e7f4      	b.n	25b10 <bt_gatt_check_perm+0x30>

00025b26 <gatt_discover_next>:
{
   25b26:	b570      	push	{r4, r5, r6, lr}
   25b28:	4605      	mov	r5, r0
   25b2a:	4614      	mov	r4, r2
	if (!last_handle)
   25b2c:	b929      	cbnz	r1, 25b3a <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   25b2e:	4621      	mov	r1, r4
   25b30:	4628      	mov	r0, r5
   25b32:	f7e4 fe27 	bl	a784 <bt_gatt_discover>
   25b36:	b928      	cbnz	r0, 25b44 <gatt_discover_next+0x1e>
}
   25b38:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   25b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25b3e:	4291      	cmp	r1, r2
   25b40:	d107      	bne.n	25b52 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   25b42:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   25b44:	6863      	ldr	r3, [r4, #4]
   25b46:	4622      	mov	r2, r4
   25b48:	4628      	mov	r0, r5
   25b4a:	2100      	movs	r1, #0
}
   25b4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   25b50:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   25b52:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   25b54:	1c4b      	adds	r3, r1, #1
   25b56:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   25b58:	429a      	cmp	r2, r3
		params->start_handle++;
   25b5a:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   25b5c:	d2e7      	bcs.n	25b2e <gatt_discover_next+0x8>
   25b5e:	e7f1      	b.n	25b44 <gatt_discover_next+0x1e>

00025b60 <gatt_find_type_rsp>:
{
   25b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25b64:	b088      	sub	sp, #32
   25b66:	4607      	mov	r7, r0
   25b68:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   25b6c:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   25b6e:	b911      	cbnz	r1, 25b76 <gatt_find_type_rsp+0x16>
   25b70:	f013 0803 	ands.w	r8, r3, #3
   25b74:	d008      	beq.n	25b88 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   25b76:	f8d9 3004 	ldr.w	r3, [r9, #4]
   25b7a:	464a      	mov	r2, r9
   25b7c:	2100      	movs	r1, #0
   25b7e:	4638      	mov	r0, r7
   25b80:	4798      	blx	r3
}
   25b82:	b008      	add	sp, #32
   25b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   25b88:	f3c3 0387 	ubfx	r3, r3, #2, #8
   25b8c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   25b90:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   25b92:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   25b96:	42ac      	cmp	r4, r5
   25b98:	d105      	bne.n	25ba6 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   25b9a:	464a      	mov	r2, r9
   25b9c:	4641      	mov	r1, r8
   25b9e:	4638      	mov	r0, r7
   25ba0:	f7ff ffc1 	bl	25b26 <gatt_discover_next>
	return;
   25ba4:	e7ed      	b.n	25b82 <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   25ba6:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   25ba8:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   25bac:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   25bb0:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   25bb2:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   25bb6:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   25bba:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   25bbc:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   25bbe:	bf0c      	ite	eq
   25bc0:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   25bc4:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   25bc6:	ab01      	add	r3, sp, #4
   25bc8:	f8ad 1002 	strh.w	r1, [sp, #2]
   25bcc:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   25bce:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   25bd2:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   25bd6:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   25bda:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   25bde:	f8cd d00c 	str.w	sp, [sp, #12]
   25be2:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   25be6:	464a      	mov	r2, r9
   25be8:	a903      	add	r1, sp, #12
   25bea:	4638      	mov	r0, r7
   25bec:	4798      	blx	r3
   25bee:	3404      	adds	r4, #4
   25bf0:	2800      	cmp	r0, #0
   25bf2:	d1d0      	bne.n	25b96 <gatt_find_type_rsp+0x36>
   25bf4:	e7c5      	b.n	25b82 <gatt_find_type_rsp+0x22>

00025bf6 <bt_gatt_unsubscribe>:
{
   25bf6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25bfa:	7a83      	ldrb	r3, [r0, #10]
   25bfc:	2b07      	cmp	r3, #7
{
   25bfe:	4681      	mov	r9, r0
   25c00:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   25c02:	d16e      	bne.n	25ce2 <bt_gatt_unsubscribe+0xec>
	sub = gatt_sub_find(conn);
   25c04:	f7e3 fd5a 	bl	96bc <gatt_sub_find>
	if (!sub) {
   25c08:	4607      	mov	r7, r0
   25c0a:	b920      	cbnz	r0, 25c16 <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
   25c0c:	f06f 0015 	mvn.w	r0, #21
}
   25c10:	b001      	add	sp, #4
   25c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25c16:	6884      	ldr	r4, [r0, #8]
   25c18:	b1cc      	cbz	r4, 25c4e <bt_gatt_unsubscribe+0x58>
   25c1a:	f1b4 0514 	subs.w	r5, r4, #20
   25c1e:	d018      	beq.n	25c52 <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25c20:	6824      	ldr	r4, [r4, #0]
   25c22:	b104      	cbz	r4, 25c26 <bt_gatt_unsubscribe+0x30>
   25c24:	3c14      	subs	r4, #20
   25c26:	f04f 0800 	mov.w	r8, #0
   25c2a:	46c3      	mov	fp, r8
   25c2c:	46c2      	mov	sl, r8
	parent->next = child;
   25c2e:	4642      	mov	r2, r8
   25c30:	b98d      	cbnz	r5, 25c56 <bt_gatt_unsubscribe+0x60>
	if (!found) {
   25c32:	f1bb 0f00 	cmp.w	fp, #0
   25c36:	d0e9      	beq.n	25c0c <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
   25c38:	f1ba 0f00 	cmp.w	sl, #0
   25c3c:	d046      	beq.n	25ccc <bt_gatt_unsubscribe+0xd6>
		params->notify(conn, params, NULL, 0);
   25c3e:	6834      	ldr	r4, [r6, #0]
   25c40:	462b      	mov	r3, r5
   25c42:	462a      	mov	r2, r5
   25c44:	4631      	mov	r1, r6
   25c46:	4648      	mov	r0, r9
   25c48:	47a0      	blx	r4
		return 0;
   25c4a:	4628      	mov	r0, r5
   25c4c:	e7e0      	b.n	25c10 <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25c4e:	4625      	mov	r5, r4
   25c50:	e7e9      	b.n	25c26 <bt_gatt_unsubscribe+0x30>
   25c52:	462c      	mov	r4, r5
   25c54:	e7e7      	b.n	25c26 <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
   25c56:	42b5      	cmp	r5, r6
   25c58:	f105 0114 	add.w	r1, r5, #20
   25c5c:	d129      	bne.n	25cb2 <bt_gatt_unsubscribe+0xbc>
Z_GENLIST_REMOVE(slist, snode)
   25c5e:	6968      	ldr	r0, [r5, #20]
   25c60:	f1b8 0f00 	cmp.w	r8, #0
   25c64:	d11d      	bne.n	25ca2 <bt_gatt_unsubscribe+0xac>
   25c66:	68fb      	ldr	r3, [r7, #12]
	list->head = node;
   25c68:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   25c6a:	4299      	cmp	r1, r3
   25c6c:	d100      	bne.n	25c70 <bt_gatt_unsubscribe+0x7a>
	list->tail = node;
   25c6e:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   25c70:	616a      	str	r2, [r5, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25c72:	f3bf 8f5b 	dmb	ish
   25c76:	6933      	ldr	r3, [r6, #16]
   25c78:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25c7c:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   25c80:	075b      	lsls	r3, r3, #29
   25c82:	d51e      	bpl.n	25cc2 <bt_gatt_unsubscribe+0xcc>
	bt_att_req_cancel(conn, params);
   25c84:	4631      	mov	r1, r6
   25c86:	4648      	mov	r0, r9
   25c88:	f7e3 fc7a 	bl	9580 <bt_att_req_cancel>
}
   25c8c:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25c8e:	b1dc      	cbz	r4, 25cc8 <bt_gatt_unsubscribe+0xd2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25c90:	f114 0314 	adds.w	r3, r4, #20
   25c94:	d002      	beq.n	25c9c <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25c96:	6963      	ldr	r3, [r4, #20]
   25c98:	b103      	cbz	r3, 25c9c <bt_gatt_unsubscribe+0xa6>
   25c9a:	3b14      	subs	r3, #20
   25c9c:	4625      	mov	r5, r4
   25c9e:	461c      	mov	r4, r3
   25ca0:	e7c6      	b.n	25c30 <bt_gatt_unsubscribe+0x3a>
	parent->next = child;
   25ca2:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25ca6:	68fb      	ldr	r3, [r7, #12]
   25ca8:	4299      	cmp	r1, r3
	list->tail = node;
   25caa:	bf08      	it	eq
   25cac:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   25cb0:	e7de      	b.n	25c70 <bt_gatt_unsubscribe+0x7a>
		if (tmp->value_handle == params->value_handle) {
   25cb2:	8928      	ldrh	r0, [r5, #8]
   25cb4:	8933      	ldrh	r3, [r6, #8]
   25cb6:	4688      	mov	r8, r1
   25cb8:	4298      	cmp	r0, r3
   25cba:	bf08      	it	eq
   25cbc:	f04f 0a01 	moveq.w	sl, #1
   25cc0:	e7e5      	b.n	25c8e <bt_gatt_unsubscribe+0x98>
			found = true;
   25cc2:	f04f 0b01 	mov.w	fp, #1
   25cc6:	e7e2      	b.n	25c8e <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25cc8:	4623      	mov	r3, r4
   25cca:	e7e7      	b.n	25c9c <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   25ccc:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   25cce:	f8a6 a00c 	strh.w	sl, [r6, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   25cd2:	4633      	mov	r3, r6
   25cd4:	4652      	mov	r2, sl
   25cd6:	4648      	mov	r0, r9
}
   25cd8:	b001      	add	sp, #4
   25cda:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   25cde:	f7e4 b8b1 	b.w	9e44 <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   25ce2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25ce6:	e793      	b.n	25c10 <bt_gatt_unsubscribe+0x1a>

00025ce8 <bt_gatt_notification>:
{
   25ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25cec:	4607      	mov	r7, r0
   25cee:	4688      	mov	r8, r1
   25cf0:	4691      	mov	r9, r2
   25cf2:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   25cf4:	f7e3 fce2 	bl	96bc <gatt_sub_find>
	if (!sub) {
   25cf8:	b1f8      	cbz	r0, 25d3a <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25cfa:	6883      	ldr	r3, [r0, #8]
   25cfc:	b1eb      	cbz	r3, 25d3a <bt_gatt_notification+0x52>
   25cfe:	f1b3 0614 	subs.w	r6, r3, #20
   25d02:	d01a      	beq.n	25d3a <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25d04:	681c      	ldr	r4, [r3, #0]
   25d06:	b104      	cbz	r4, 25d0a <bt_gatt_notification+0x22>
   25d08:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   25d0a:	8933      	ldrh	r3, [r6, #8]
   25d0c:	4543      	cmp	r3, r8
   25d0e:	d10a      	bne.n	25d26 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   25d10:	6835      	ldr	r5, [r6, #0]
   25d12:	4653      	mov	r3, sl
   25d14:	464a      	mov	r2, r9
   25d16:	4631      	mov	r1, r6
   25d18:	4638      	mov	r0, r7
   25d1a:	47a8      	blx	r5
   25d1c:	b918      	cbnz	r0, 25d26 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   25d1e:	4631      	mov	r1, r6
   25d20:	4638      	mov	r0, r7
   25d22:	f7ff ff68 	bl	25bf6 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25d26:	b144      	cbz	r4, 25d3a <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25d28:	f114 0514 	adds.w	r5, r4, #20
   25d2c:	d002      	beq.n	25d34 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25d2e:	6965      	ldr	r5, [r4, #20]
   25d30:	b105      	cbz	r5, 25d34 <bt_gatt_notification+0x4c>
   25d32:	3d14      	subs	r5, #20
{
   25d34:	4626      	mov	r6, r4
   25d36:	462c      	mov	r4, r5
   25d38:	e7e7      	b.n	25d0a <bt_gatt_notification+0x22>
}
   25d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025d3e <bt_gatt_change_aware>:
{
   25d3e:	b570      	push	{r4, r5, r6, lr}
   25d40:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   25d42:	f7e3 fc8d 	bl	9660 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25d46:	b910      	cbnz	r0, 25d4e <bt_gatt_change_aware+0x10>
		return true;
   25d48:	2401      	movs	r4, #1
}
   25d4a:	4620      	mov	r0, r4
   25d4c:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25d4e:	7a03      	ldrb	r3, [r0, #8]
   25d50:	07da      	lsls	r2, r3, #31
   25d52:	d5f9      	bpl.n	25d48 <bt_gatt_change_aware+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25d54:	f3bf 8f5b 	dmb	ish
   25d58:	68c5      	ldr	r5, [r0, #12]
   25d5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25d5e:	f015 0501 	ands.w	r5, r5, #1
   25d62:	f100 060c 	add.w	r6, r0, #12
   25d66:	d1ef      	bne.n	25d48 <bt_gatt_change_aware+0xa>
	if (!req) {
   25d68:	2c00      	cmp	r4, #0
   25d6a:	d0ee      	beq.n	25d4a <bt_gatt_change_aware+0xc>
   25d6c:	f3bf 8f5b 	dmb	ish
   25d70:	68c3      	ldr	r3, [r0, #12]
   25d72:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25d76:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   25d7a:	079b      	lsls	r3, r3, #30
   25d7c:	d509      	bpl.n	25d92 <bt_gatt_change_aware+0x54>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25d7e:	f06f 0102 	mvn.w	r1, #2
   25d82:	4630      	mov	r0, r6
   25d84:	f7ff fcec 	bl	25760 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25d88:	4629      	mov	r1, r5
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   25d8a:	4630      	mov	r0, r6
   25d8c:	f7ff fde2 	bl	25954 <atomic_set_bit>
	return false;
   25d90:	e7db      	b.n	25d4a <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   25d92:	2101      	movs	r1, #1
   25d94:	e7f9      	b.n	25d8a <bt_gatt_change_aware+0x4c>

00025d96 <bt_smp_recv>:
{
   25d96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   25d98:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   25d9a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   25d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25da4:	4608      	mov	r0, r1
   25da6:	f7fe ffdf 	bl	24d68 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   25daa:	f100 0608 	add.w	r6, r0, #8
   25dae:	4604      	mov	r4, r0
   25db0:	2101      	movs	r1, #1
   25db2:	4630      	mov	r0, r6
   25db4:	f000 f874 	bl	25ea0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   25db8:	2505      	movs	r5, #5
   25dba:	7005      	strb	r5, [r0, #0]
   25dbc:	2101      	movs	r1, #1
   25dbe:	4630      	mov	r0, r6
   25dc0:	f000 f86e 	bl	25ea0 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   25dc4:	7005      	strb	r5, [r0, #0]
   25dc6:	2500      	movs	r5, #0
   25dc8:	9500      	str	r5, [sp, #0]
   25dca:	462b      	mov	r3, r5
   25dcc:	4622      	mov	r2, r4
   25dce:	2106      	movs	r1, #6
   25dd0:	4638      	mov	r0, r7
   25dd2:	f7fe ffcc 	bl	24d6e <bt_l2cap_send_cb>
}
   25dd6:	4628      	mov	r0, r5
   25dd8:	b003      	add	sp, #12
   25dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025ddc <bt_smp_sign>:
   25ddc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25de0:	4770      	bx	lr

00025de2 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25de2:	2000      	movs	r0, #0
   25de4:	4770      	bx	lr

00025de6 <fixed_data_unref>:
}
   25de6:	4770      	bx	lr

00025de8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25de8:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   25dea:	6849      	ldr	r1, [r1, #4]
   25dec:	6809      	ldr	r1, [r1, #0]
   25dee:	f7f2 ba8d 	b.w	1830c <net_buf_alloc_len>

00025df2 <net_buf_get>:
{
   25df2:	b570      	push	{r4, r5, r6, lr}
   25df4:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   25df6:	f7f9 fd9f 	bl	1f938 <z_impl_k_queue_get>
	if (!buf) {
   25dfa:	4605      	mov	r5, r0
   25dfc:	b128      	cbz	r0, 25e0a <net_buf_get+0x18>
   25dfe:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25e00:	7963      	ldrb	r3, [r4, #5]
   25e02:	f013 0301 	ands.w	r3, r3, #1
   25e06:	d102      	bne.n	25e0e <net_buf_get+0x1c>
	frag->frags = NULL;
   25e08:	6023      	str	r3, [r4, #0]
}
   25e0a:	4628      	mov	r0, r5
   25e0c:	bd70      	pop	{r4, r5, r6, pc}
   25e0e:	2300      	movs	r3, #0
   25e10:	2200      	movs	r2, #0
   25e12:	4630      	mov	r0, r6
   25e14:	f7f9 fd90 	bl	1f938 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   25e18:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   25e1a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   25e1c:	f023 0301 	bic.w	r3, r3, #1
   25e20:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25e22:	4604      	mov	r4, r0
   25e24:	e7ec      	b.n	25e00 <net_buf_get+0xe>

00025e26 <net_buf_simple_init_with_data>:
	buf->size  = size;
   25e26:	b292      	uxth	r2, r2
	buf->__buf = data;
   25e28:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   25e2a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   25e2c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   25e2e:	8082      	strh	r2, [r0, #4]
}
   25e30:	4770      	bx	lr

00025e32 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   25e32:	6883      	ldr	r3, [r0, #8]
   25e34:	440b      	add	r3, r1
   25e36:	6003      	str	r3, [r0, #0]
}
   25e38:	4770      	bx	lr

00025e3a <net_buf_put>:
{
   25e3a:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   25e3c:	460a      	mov	r2, r1
   25e3e:	6814      	ldr	r4, [r2, #0]
   25e40:	b914      	cbnz	r4, 25e48 <net_buf_put+0xe>
}
   25e42:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   25e44:	f005 b8bd 	b.w	2afc2 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   25e48:	7953      	ldrb	r3, [r2, #5]
   25e4a:	f043 0301 	orr.w	r3, r3, #1
   25e4e:	7153      	strb	r3, [r2, #5]
   25e50:	4622      	mov	r2, r4
   25e52:	e7f4      	b.n	25e3e <net_buf_put+0x4>

00025e54 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   25e54:	7902      	ldrb	r2, [r0, #4]
   25e56:	3201      	adds	r2, #1
   25e58:	7102      	strb	r2, [r0, #4]
	return buf;
}
   25e5a:	4770      	bx	lr

00025e5c <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25e5c:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25e5e:	4618      	mov	r0, r3
   25e60:	681b      	ldr	r3, [r3, #0]
   25e62:	2b00      	cmp	r3, #0
   25e64:	d1fb      	bne.n	25e5e <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   25e66:	4770      	bx	lr

00025e68 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   25e68:	6802      	ldr	r2, [r0, #0]
{
   25e6a:	b510      	push	{r4, lr}
	if (parent->frags) {
   25e6c:	b12a      	cbz	r2, 25e7a <net_buf_frag_insert+0x12>
   25e6e:	460b      	mov	r3, r1
	while (buf->frags) {
   25e70:	461c      	mov	r4, r3
   25e72:	681b      	ldr	r3, [r3, #0]
   25e74:	2b00      	cmp	r3, #0
   25e76:	d1fb      	bne.n	25e70 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   25e78:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   25e7a:	6001      	str	r1, [r0, #0]
}
   25e7c:	bd10      	pop	{r4, pc}

00025e7e <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   25e7e:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   25e80:	4604      	mov	r4, r0
   25e82:	b920      	cbnz	r0, 25e8e <net_buf_frag_add+0x10>
	buf->ref++;
   25e84:	790b      	ldrb	r3, [r1, #4]
   25e86:	3301      	adds	r3, #1
   25e88:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   25e8a:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   25e8c:	bd10      	pop	{r4, pc}
   25e8e:	4603      	mov	r3, r0
	while (buf->frags) {
   25e90:	4618      	mov	r0, r3
   25e92:	681b      	ldr	r3, [r3, #0]
   25e94:	2b00      	cmp	r3, #0
   25e96:	d1fb      	bne.n	25e90 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   25e98:	f7ff ffe6 	bl	25e68 <net_buf_frag_insert>
   25e9c:	4620      	mov	r0, r4
   25e9e:	e7f5      	b.n	25e8c <net_buf_frag_add+0xe>

00025ea0 <net_buf_simple_add>:
	return buf->data + buf->len;
   25ea0:	8883      	ldrh	r3, [r0, #4]
   25ea2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   25ea4:	4419      	add	r1, r3
   25ea6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   25ea8:	18d0      	adds	r0, r2, r3
   25eaa:	4770      	bx	lr

00025eac <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   25eac:	b510      	push	{r4, lr}
   25eae:	6803      	ldr	r3, [r0, #0]
   25eb0:	8884      	ldrh	r4, [r0, #4]
   25eb2:	4423      	add	r3, r4
	buf->len += len;
   25eb4:	4414      	add	r4, r2
   25eb6:	8084      	strh	r4, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25eb8:	4618      	mov	r0, r3
   25eba:	f005 fc7a 	bl	2b7b2 <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   25ebe:	bd10      	pop	{r4, pc}

00025ec0 <net_buf_simple_add_u8>:
   25ec0:	8883      	ldrh	r3, [r0, #4]
   25ec2:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   25ec4:	b510      	push	{r4, lr}
	buf->len += len;
   25ec6:	1c5c      	adds	r4, r3, #1
   25ec8:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   25eca:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   25ecc:	18d0      	adds	r0, r2, r3
   25ece:	bd10      	pop	{r4, pc}

00025ed0 <net_buf_simple_add_le16>:
   25ed0:	8883      	ldrh	r3, [r0, #4]
   25ed2:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   25ed4:	b530      	push	{r4, r5, lr}
   25ed6:	18d4      	adds	r4, r2, r3
	buf->len += len;
   25ed8:	1c9d      	adds	r5, r3, #2
   25eda:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   25edc:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   25ede:	0a09      	lsrs	r1, r1, #8
   25ee0:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   25ee2:	bd30      	pop	{r4, r5, pc}

00025ee4 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   25ee4:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   25ee6:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   25ee8:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   25eea:	1a40      	subs	r0, r0, r1
	buf->len += len;
   25eec:	4411      	add	r1, r2
	buf->data -= len;
   25eee:	6018      	str	r0, [r3, #0]
	buf->len += len;
   25ef0:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   25ef2:	4770      	bx	lr

00025ef4 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25ef4:	8882      	ldrh	r2, [r0, #4]
   25ef6:	1a52      	subs	r2, r2, r1
{
   25ef8:	4603      	mov	r3, r0
	buf->len -= len;
   25efa:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   25efc:	6800      	ldr	r0, [r0, #0]
   25efe:	4408      	add	r0, r1
   25f00:	6018      	str	r0, [r3, #0]
}
   25f02:	4770      	bx	lr

00025f04 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   25f04:	4603      	mov	r3, r0
	void *data = buf->data;
   25f06:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25f08:	889a      	ldrh	r2, [r3, #4]
   25f0a:	1a52      	subs	r2, r2, r1
	buf->data += len;
   25f0c:	4401      	add	r1, r0
	buf->len -= len;
   25f0e:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   25f10:	6019      	str	r1, [r3, #0]

	return data;
}
   25f12:	4770      	bx	lr

00025f14 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   25f14:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   25f16:	6803      	ldr	r3, [r0, #0]
   25f18:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25f1a:	2102      	movs	r1, #2
   25f1c:	f7ff ffea 	bl	25ef4 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25f20:	4620      	mov	r0, r4
   25f22:	bd10      	pop	{r4, pc}

00025f24 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   25f24:	6802      	ldr	r2, [r0, #0]
   25f26:	6880      	ldr	r0, [r0, #8]
}
   25f28:	1a10      	subs	r0, r2, r0
   25f2a:	4770      	bx	lr

00025f2c <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25f2c:	8883      	ldrh	r3, [r0, #4]
   25f2e:	88c2      	ldrh	r2, [r0, #6]
   25f30:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   25f32:	6803      	ldr	r3, [r0, #0]
   25f34:	6880      	ldr	r0, [r0, #8]
   25f36:	1a18      	subs	r0, r3, r0
}
   25f38:	1a10      	subs	r0, r2, r0
   25f3a:	4770      	bx	lr

00025f3c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   25f3c:	f000 001f 	and.w	r0, r0, #31
   25f40:	0080      	lsls	r0, r0, #2
   25f42:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   25f46:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   25f4a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   25f4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   25f52:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   25f56:	4770      	bx	lr

00025f58 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f58:	6843      	ldr	r3, [r0, #4]
   25f5a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25f5c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   25f60:	600b      	str	r3, [r1, #0]
}
   25f62:	2000      	movs	r0, #0
   25f64:	4770      	bx	lr

00025f66 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f66:	6843      	ldr	r3, [r0, #4]
   25f68:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25f6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25f6e:	4042      	eors	r2, r0
   25f70:	400a      	ands	r2, r1
   25f72:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25f74:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   25f78:	2000      	movs	r0, #0
   25f7a:	4770      	bx	lr

00025f7c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f7c:	6843      	ldr	r3, [r0, #4]
   25f7e:	685b      	ldr	r3, [r3, #4]
}
   25f80:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   25f82:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25f86:	4770      	bx	lr

00025f88 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f88:	6843      	ldr	r3, [r0, #4]
   25f8a:	685b      	ldr	r3, [r3, #4]
}
   25f8c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25f8e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   25f92:	4770      	bx	lr

00025f94 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f94:	6843      	ldr	r3, [r0, #4]
   25f96:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25f98:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   25f9c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   25f9e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   25fa2:	2000      	movs	r0, #0
   25fa4:	4770      	bx	lr

00025fa6 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25fa6:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   25fa8:	6858      	ldr	r0, [r3, #4]
{
   25faa:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   25fac:	b158      	cbz	r0, 25fc6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25fae:	2400      	movs	r4, #0
   25fb0:	4281      	cmp	r1, r0
   25fb2:	d113      	bne.n	25fdc <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   25fb4:	6808      	ldr	r0, [r1, #0]
   25fb6:	b95c      	cbnz	r4, 25fd0 <gpio_nrfx_manage_callback+0x2a>
   25fb8:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   25fba:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25fbc:	42a1      	cmp	r1, r4
   25fbe:	d100      	bne.n	25fc2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   25fc0:	6098      	str	r0, [r3, #8]
	parent->next = child;
   25fc2:	2000      	movs	r0, #0
   25fc4:	6008      	str	r0, [r1, #0]
	if (set) {
   25fc6:	b972      	cbnz	r2, 25fe6 <gpio_nrfx_manage_callback+0x40>
	return 0;
   25fc8:	2000      	movs	r0, #0
}
   25fca:	bd30      	pop	{r4, r5, pc}
   25fcc:	4628      	mov	r0, r5
   25fce:	e7ef      	b.n	25fb0 <gpio_nrfx_manage_callback+0xa>
   25fd0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   25fd2:	6898      	ldr	r0, [r3, #8]
   25fd4:	4281      	cmp	r1, r0
	list->tail = node;
   25fd6:	bf08      	it	eq
   25fd8:	609c      	streq	r4, [r3, #8]
}
   25fda:	e7f2      	b.n	25fc2 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25fdc:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25fde:	4604      	mov	r4, r0
   25fe0:	2d00      	cmp	r5, #0
   25fe2:	d1f3      	bne.n	25fcc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   25fe4:	b13a      	cbz	r2, 25ff6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   25fe6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25fe8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   25fea:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   25fec:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25fee:	2800      	cmp	r0, #0
   25ff0:	d1ea      	bne.n	25fc8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   25ff2:	6099      	str	r1, [r3, #8]
}
   25ff4:	e7e9      	b.n	25fca <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   25ff6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25ffa:	e7e6      	b.n	25fca <gpio_nrfx_manage_callback+0x24>

00025ffc <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25ffc:	2301      	movs	r3, #1
   25ffe:	fa03 f101 	lsl.w	r1, r3, r1
   26002:	68c3      	ldr	r3, [r0, #12]
   26004:	681b      	ldr	r3, [r3, #0]
   26006:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   26008:	bf18      	it	ne
   2600a:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2600e:	b112      	cbz	r2, 26016 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   26010:	6883      	ldr	r3, [r0, #8]
   26012:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26014:	4718      	bx	r3
   26016:	6883      	ldr	r3, [r0, #8]
   26018:	691b      	ldr	r3, [r3, #16]
   2601a:	e7fb      	b.n	26014 <gpio_pin_set+0x18>

0002601c <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   2601c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2601e:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   26020:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   26022:	b1fd      	cbz	r5, 26064 <_spi_context_cs_control.isra.0+0x48>
   26024:	68ab      	ldr	r3, [r5, #8]
   26026:	b1eb      	cbz	r3, 26064 <_spi_context_cs_control.isra.0+0x48>
   26028:	6818      	ldr	r0, [r3, #0]
   2602a:	b1d8      	cbz	r0, 26064 <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   2602c:	b151      	cbz	r1, 26044 <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2602e:	7a19      	ldrb	r1, [r3, #8]
   26030:	2201      	movs	r2, #1
   26032:	f7ff ffe3 	bl	25ffc <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   26036:	6823      	ldr	r3, [r4, #0]
   26038:	689b      	ldr	r3, [r3, #8]
   2603a:	6858      	ldr	r0, [r3, #4]
}
   2603c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   26040:	f005 b90c 	b.w	2b25c <z_impl_k_busy_wait>
			if (!force_off &&
   26044:	b912      	cbnz	r2, 2604c <_spi_context_cs_control.isra.0+0x30>
   26046:	88aa      	ldrh	r2, [r5, #4]
   26048:	0492      	lsls	r2, r2, #18
   2604a:	d40b      	bmi.n	26064 <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   2604c:	6858      	ldr	r0, [r3, #4]
   2604e:	f005 f905 	bl	2b25c <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   26052:	6823      	ldr	r3, [r4, #0]
   26054:	689b      	ldr	r3, [r3, #8]
   26056:	2200      	movs	r2, #0
   26058:	7a19      	ldrb	r1, [r3, #8]
   2605a:	6818      	ldr	r0, [r3, #0]
}
   2605c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   26060:	f7ff bfcc 	b.w	25ffc <gpio_pin_set>
}
   26064:	bd38      	pop	{r3, r4, r5, pc}

00026066 <spi_context_unlock_unconditionally>:
{
   26066:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   26068:	2201      	movs	r2, #1
   2606a:	2100      	movs	r1, #0
{
   2606c:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2606e:	f7ff ffd5 	bl	2601c <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   26072:	6923      	ldr	r3, [r4, #16]
   26074:	b933      	cbnz	r3, 26084 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   26076:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   26078:	f104 0008 	add.w	r0, r4, #8
}
   2607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26080:	f7fa b82c 	b.w	200dc <z_impl_k_sem_give>
   26084:	bd10      	pop	{r4, pc}

00026086 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   26086:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26088:	6803      	ldr	r3, [r0, #0]
   2608a:	428b      	cmp	r3, r1
{
   2608c:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2608e:	d106      	bne.n	2609e <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   26090:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   26094:	b934      	cbnz	r4, 260a4 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   26096:	f7ff ffe6 	bl	26066 <spi_context_unlock_unconditionally>
	return 0;
   2609a:	4620      	mov	r0, r4
}
   2609c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2609e:	f06f 0015 	mvn.w	r0, #21
   260a2:	e7fb      	b.n	2609c <spi_nrfx_release+0x16>
		return -EBUSY;
   260a4:	f06f 000f 	mvn.w	r0, #15
   260a8:	e7f8      	b.n	2609c <spi_nrfx_release+0x16>

000260aa <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   260aa:	4700      	bx	r0

000260ac <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   260ac:	f005 b8d6 	b.w	2b25c <z_impl_k_busy_wait>

000260b0 <nrfx_clock_enable>:
{
   260b0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   260b2:	2000      	movs	r0, #0
   260b4:	f7de f9f4 	bl	44a0 <arch_irq_is_enabled>
   260b8:	b918      	cbnz	r0, 260c2 <nrfx_clock_enable+0x12>
}
   260ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   260be:	f7de b9cb 	b.w	4458 <arch_irq_enable>
   260c2:	bd08      	pop	{r3, pc}

000260c4 <transfer_byte>:
{
   260c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   260c6:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   260ca:	698a      	ldr	r2, [r1, #24]
   260cc:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   260ce:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   260d2:	6a0b      	ldr	r3, [r1, #32]
   260d4:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   260d6:	bf3e      	ittt	cc
   260d8:	694a      	ldrcc	r2, [r1, #20]
   260da:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   260de:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   260e0:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   260e2:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   260e6:	1c53      	adds	r3, r2, #1
   260e8:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   260ea:	3202      	adds	r2, #2
    if (p_cb->abort)
   260ec:	b13c      	cbz	r4, 260fe <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   260ee:	690c      	ldr	r4, [r1, #16]
   260f0:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   260f2:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   260f4:	bf38      	it	cc
   260f6:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   260f8:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   260fa:	bf88      	it	hi
   260fc:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   260fe:	690d      	ldr	r5, [r1, #16]
   26100:	4295      	cmp	r5, r2
   26102:	d905      	bls.n	26110 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   26104:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   26106:	5c9b      	ldrb	r3, [r3, r2]
   26108:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2610c:	2001      	movs	r0, #1
   2610e:	e00a      	b.n	26126 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   26110:	698c      	ldr	r4, [r1, #24]
   26112:	4294      	cmp	r4, r2
   26114:	d901      	bls.n	2611a <transfer_byte+0x56>
   26116:	7fcb      	ldrb	r3, [r1, #31]
   26118:	e7f6      	b.n	26108 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   2611a:	42ab      	cmp	r3, r5
   2611c:	d3f6      	bcc.n	2610c <transfer_byte+0x48>
   2611e:	42a3      	cmp	r3, r4
   26120:	bf2c      	ite	cs
   26122:	2000      	movcs	r0, #0
   26124:	2001      	movcc	r0, #1
}
   26126:	b003      	add	sp, #12
   26128:	bd30      	pop	{r4, r5, pc}

0002612a <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2612a:	7b0a      	ldrb	r2, [r1, #12]
{
   2612c:	4603      	mov	r3, r0
   2612e:	2a03      	cmp	r2, #3
   26130:	d829      	bhi.n	26186 <xfer_completeness_check+0x5c>
   26132:	e8df f002 	tbb	[pc, r2]
   26136:	2521      	.short	0x2521
   26138:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2613a:	688a      	ldr	r2, [r1, #8]
   2613c:	0350      	lsls	r0, r2, #13
   2613e:	d504      	bpl.n	2614a <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   26140:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   26144:	6908      	ldr	r0, [r1, #16]
   26146:	4290      	cmp	r0, r2
   26148:	d107      	bne.n	2615a <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2614a:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2614c:	0352      	lsls	r2, r2, #13
   2614e:	d41a      	bmi.n	26186 <xfer_completeness_check+0x5c>
   26150:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   26154:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   26156:	4291      	cmp	r1, r2
   26158:	d015      	beq.n	26186 <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2615a:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2615c:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2615e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   26162:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   26166:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   26168:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2616c:	6908      	ldr	r0, [r1, #16]
   2616e:	4290      	cmp	r0, r2
   26170:	d1f3      	bne.n	2615a <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   26172:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   26176:	e7ed      	b.n	26154 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   26178:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2617c:	6909      	ldr	r1, [r1, #16]
   2617e:	e7ea      	b.n	26156 <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   26180:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   26184:	e7fa      	b.n	2617c <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   26186:	2001      	movs	r0, #1
}
   26188:	4770      	bx	lr

0002618a <lv_disp_load_scr>:
{
   2618a:	b510      	push	{r4, lr}
   2618c:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
   2618e:	f7f4 f86b 	bl	1a268 <lv_obj_get_disp>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
   26192:	b128      	cbz	r0, 261a0 <lv_disp_load_scr+0x16>
    d->act_scr = scr;
   26194:	6404      	str	r4, [r0, #64]	; 0x40
    lv_obj_invalidate(scr);
   26196:	4620      	mov	r0, r4
}
   26198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
   2619c:	f000 b8c5 	b.w	2632a <lv_obj_invalidate>
}
   261a0:	bd10      	pop	{r4, pc}

000261a2 <_lv_indev_init>:
    if(indev) {
   261a2:	2000      	movs	r0, #0
   261a4:	f7f3 bef8 	b.w	19f98 <lv_indev_reset.part.0>

000261a8 <refresh_children_position>:
{
   261a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _LV_LL_READ(obj->child_ll, i) {
   261aa:	1d07      	adds	r7, r0, #4
   261ac:	4638      	mov	r0, r7
{
   261ae:	460d      	mov	r5, r1
   261b0:	4616      	mov	r6, r2
    _LV_LL_READ(obj->child_ll, i) {
   261b2:	f004 fa04 	bl	2a5be <_lv_ll_get_head>
   261b6:	4604      	mov	r4, r0
   261b8:	b900      	cbnz	r0, 261bc <refresh_children_position+0x14>
}
   261ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
   261bc:	8a23      	ldrh	r3, [r4, #16]
   261be:	442b      	add	r3, r5
   261c0:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
   261c2:	8a63      	ldrh	r3, [r4, #18]
   261c4:	4433      	add	r3, r6
   261c6:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
   261c8:	8aa3      	ldrh	r3, [r4, #20]
   261ca:	442b      	add	r3, r5
   261cc:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
   261ce:	8ae3      	ldrh	r3, [r4, #22]
   261d0:	4433      	add	r3, r6
        refresh_children_position(i, x_diff, y_diff);
   261d2:	4629      	mov	r1, r5
   261d4:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
   261d6:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
   261d8:	4632      	mov	r2, r6
   261da:	f7ff ffe5 	bl	261a8 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
   261de:	4621      	mov	r1, r4
   261e0:	4638      	mov	r0, r7
   261e2:	f004 f9f2 	bl	2a5ca <_lv_ll_get_next>
   261e6:	e7e6      	b.n	261b6 <refresh_children_position+0xe>

000261e8 <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   261e8:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   261ea:	2100      	movs	r1, #0
   261ec:	f005 bb02 	b.w	2b7f4 <memset>

000261f0 <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   261f0:	f005 badf 	b.w	2b7b2 <memcpy>

000261f4 <lv_area_copy>:
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   261f4:	2208      	movs	r2, #8
   261f6:	f7ff bffb 	b.w	261f0 <_lv_memcpy>

000261fa <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
   261fa:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   261fe:	f361 0300 	bfi	r3, r1, #0, #1
   26202:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
}
   26206:	4770      	bx	lr

00026208 <lv_event_send>:
{
   26208:	b410      	push	{r4}
   2620a:	4613      	mov	r3, r2
   2620c:	460c      	mov	r4, r1
    if(obj == NULL) return LV_RES_OK;
   2620e:	4601      	mov	r1, r0
   26210:	b120      	cbz	r0, 2621c <lv_event_send+0x14>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   26212:	4622      	mov	r2, r4
   26214:	6980      	ldr	r0, [r0, #24]
}
   26216:	bc10      	pop	{r4}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   26218:	f7f3 bfe2 	b.w	1a1e0 <lv_event_send_func>
}
   2621c:	2001      	movs	r0, #1
   2621e:	bc10      	pop	{r4}
   26220:	4770      	bx	lr

00026222 <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
   26222:	61c1      	str	r1, [r0, #28]
}
   26224:	4770      	bx	lr

00026226 <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
   26226:	b110      	cbz	r0, 2622e <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
   26228:	69c3      	ldr	r3, [r0, #28]
   2622a:	b103      	cbz	r3, 2622e <lv_signal_send+0x8>
   2622c:	4718      	bx	r3
}
   2622e:	2001      	movs	r0, #1
   26230:	4770      	bx	lr

00026232 <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
   26232:	6201      	str	r1, [r0, #32]
}
   26234:	4770      	bx	lr

00026236 <lv_obj_allocate_ext_attr>:
{
   26236:	b510      	push	{r4, lr}
   26238:	4604      	mov	r4, r0
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
   2623a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   2623c:	f7f7 f9fa 	bl	1d634 <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
   26240:	b100      	cbz	r0, 26244 <lv_obj_allocate_ext_attr+0xe>
    obj->ext_attr = new_ext;
   26242:	6260      	str	r0, [r4, #36]	; 0x24
}
   26244:	bd10      	pop	{r4, pc}

00026246 <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
   26246:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   26248:	69c3      	ldr	r3, [r0, #28]
    obj->ext_draw_pad = 0;
   2624a:	8602      	strh	r2, [r0, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   2624c:	2106      	movs	r1, #6
   2624e:	4718      	bx	r3

00026250 <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
   26250:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
   26254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return false;
   26256:	06da      	lsls	r2, r3, #27
{
   26258:	4605      	mov	r5, r0
   2625a:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
   2625c:	d42e      	bmi.n	262bc <lv_obj_area_is_visible+0x6c>
   2625e:	4603      	mov	r3, r0
    return obj->parent;
   26260:	461c      	mov	r4, r3
   26262:	681b      	ldr	r3, [r3, #0]
    } while(par != NULL);
   26264:	2b00      	cmp	r3, #0
   26266:	d1fb      	bne.n	26260 <lv_obj_area_is_visible+0x10>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
   26268:	4620      	mov	r0, r4
   2626a:	f7f3 fffd 	bl	1a268 <lv_obj_get_disp>
   2626e:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   26270:	f7f3 fe2a 	bl	19ec8 <lv_disp_get_scr_act>
   26274:	4284      	cmp	r4, r0
   26276:	d123      	bne.n	262c0 <lv_obj_area_is_visible+0x70>
        lv_area_copy(&obj_coords, &obj->coords);
   26278:	f105 0110 	add.w	r1, r5, #16
   2627c:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
   2627e:	f9b5 4030 	ldrsh.w	r4, [r5, #48]	; 0x30
        lv_area_copy(&obj_coords, &obj->coords);
   26282:	f7ff ffb7 	bl	261f4 <lv_area_copy>
        obj_coords.x1 -= ext_size;
   26286:	f8bd 3000 	ldrh.w	r3, [sp]
   2628a:	1b1b      	subs	r3, r3, r4
   2628c:	f8ad 3000 	strh.w	r3, [sp]
        obj_coords.y1 -= ext_size;
   26290:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   26294:	1b1b      	subs	r3, r3, r4
   26296:	f8ad 3002 	strh.w	r3, [sp, #2]
        obj_coords.x2 += ext_size;
   2629a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   2629e:	4423      	add	r3, r4
   262a0:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
   262a4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   262a8:	466a      	mov	r2, sp
        obj_coords.y2 += ext_size;
   262aa:	441c      	add	r4, r3
        is_common = _lv_area_intersect(area, area, &obj_coords);
   262ac:	4631      	mov	r1, r6
   262ae:	4630      	mov	r0, r6
        obj_coords.y2 += ext_size;
   262b0:	f8ad 4006 	strh.w	r4, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   262b4:	f003 fee9 	bl	2a08a <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
   262b8:	4604      	mov	r4, r0
   262ba:	bb00      	cbnz	r0, 262fe <lv_obj_area_is_visible+0xae>
    if(lv_obj_get_hidden(obj)) return false;
   262bc:	2400      	movs	r4, #0
   262be:	e00f      	b.n	262e0 <lv_obj_area_is_visible+0x90>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   262c0:	4638      	mov	r0, r7
   262c2:	f7f3 fe1b 	bl	19efc <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   262c6:	4284      	cmp	r4, r0
   262c8:	d0d6      	beq.n	26278 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
   262ca:	4638      	mov	r0, r7
   262cc:	f7f3 fe30 	bl	19f30 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   262d0:	4284      	cmp	r4, r0
   262d2:	d0d1      	beq.n	26278 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
   262d4:	4638      	mov	r0, r7
   262d6:	f7f3 fe45 	bl	19f64 <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
   262da:	4284      	cmp	r4, r0
   262dc:	d0cc      	beq.n	26278 <lv_obj_area_is_visible+0x28>
    return true;
   262de:	2401      	movs	r4, #1
}
   262e0:	4620      	mov	r0, r4
   262e2:	b003      	add	sp, #12
   262e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
   262e6:	f105 0210 	add.w	r2, r5, #16
   262ea:	4631      	mov	r1, r6
   262ec:	4630      	mov	r0, r6
   262ee:	f003 fecc 	bl	2a08a <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
   262f2:	2800      	cmp	r0, #0
   262f4:	d0e2      	beq.n	262bc <lv_obj_area_is_visible+0x6c>
    return obj->hidden == 0 ? false : true;
   262f6:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
   262fa:	06db      	lsls	r3, r3, #27
   262fc:	d4de      	bmi.n	262bc <lv_obj_area_is_visible+0x6c>
    return obj->parent;
   262fe:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
   26300:	2d00      	cmp	r5, #0
   26302:	d1f0      	bne.n	262e6 <lv_obj_area_is_visible+0x96>
   26304:	e7ec      	b.n	262e0 <lv_obj_area_is_visible+0x90>

00026306 <lv_obj_invalidate_area>:
{
   26306:	b513      	push	{r0, r1, r4, lr}
   26308:	4604      	mov	r4, r0
    lv_area_copy(&area_tmp, area);
   2630a:	4668      	mov	r0, sp
   2630c:	f7ff ff72 	bl	261f4 <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
   26310:	4669      	mov	r1, sp
   26312:	4620      	mov	r0, r4
   26314:	f7ff ff9c 	bl	26250 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
   26318:	b128      	cbz	r0, 26326 <lv_obj_invalidate_area+0x20>
   2631a:	4620      	mov	r0, r4
   2631c:	f7f3 ffa4 	bl	1a268 <lv_obj_get_disp>
   26320:	4669      	mov	r1, sp
   26322:	f001 f85c 	bl	273de <_lv_inv_area>
}
   26326:	b002      	add	sp, #8
   26328:	bd10      	pop	{r4, pc}

0002632a <lv_obj_invalidate>:
{
   2632a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_coord_t ext_size = obj->ext_draw_pad;
   2632c:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
{
   26330:	4605      	mov	r5, r0
    lv_area_copy(&obj_coords, &obj->coords);
   26332:	f100 0110 	add.w	r1, r0, #16
   26336:	4668      	mov	r0, sp
   26338:	f7ff ff5c 	bl	261f4 <lv_area_copy>
    obj_coords.x1 -= ext_size;
   2633c:	f8bd 3000 	ldrh.w	r3, [sp]
   26340:	1b1b      	subs	r3, r3, r4
   26342:	f8ad 3000 	strh.w	r3, [sp]
    obj_coords.y1 -= ext_size;
   26346:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2634a:	1b1b      	subs	r3, r3, r4
   2634c:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj_coords.x2 += ext_size;
   26350:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   26354:	4423      	add	r3, r4
   26356:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
   2635a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   2635e:	4669      	mov	r1, sp
    obj_coords.y2 += ext_size;
   26360:	441c      	add	r4, r3
    lv_obj_invalidate_area(obj, &obj_coords);
   26362:	4628      	mov	r0, r5
    obj_coords.y2 += ext_size;
   26364:	f8ad 4006 	strh.w	r4, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   26368:	f7ff ffcd 	bl	26306 <lv_obj_invalidate_area>
}
   2636c:	b003      	add	sp, #12
   2636e:	bd30      	pop	{r4, r5, pc}

00026370 <lv_obj_set_pos>:
{
   26370:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->parent;
   26372:	6807      	ldr	r7, [r0, #0]
{
   26374:	4604      	mov	r4, r0
    if(par) {
   26376:	b12f      	cbz	r7, 26384 <lv_obj_set_pos+0x14>
        x = x + par->coords.x1;
   26378:	8a3d      	ldrh	r5, [r7, #16]
        y = y + par->coords.y1;
   2637a:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
   2637c:	4429      	add	r1, r5
        y = y + par->coords.y1;
   2637e:	4432      	add	r2, r6
        x = x + par->coords.x1;
   26380:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
   26382:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
   26384:	8a25      	ldrh	r5, [r4, #16]
    diff.y = y - obj->coords.y1;
   26386:	8a66      	ldrh	r6, [r4, #18]
    diff.x = x - obj->coords.x1;
   26388:	1b49      	subs	r1, r1, r5
    diff.y = y - obj->coords.y1;
   2638a:	1b92      	subs	r2, r2, r6
    diff.x = x - obj->coords.x1;
   2638c:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
   2638e:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
   26390:	ea55 0306 	orrs.w	r3, r5, r6
   26394:	d026      	beq.n	263e4 <lv_obj_set_pos+0x74>
    lv_obj_invalidate(obj);
   26396:	4620      	mov	r0, r4
   26398:	f7ff ffc7 	bl	2632a <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   2639c:	f104 0110 	add.w	r1, r4, #16
   263a0:	4668      	mov	r0, sp
   263a2:	f7ff ff27 	bl	261f4 <lv_area_copy>
    obj->coords.x1 += diff.x;
   263a6:	8a23      	ldrh	r3, [r4, #16]
   263a8:	442b      	add	r3, r5
   263aa:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
   263ac:	8a63      	ldrh	r3, [r4, #18]
   263ae:	4433      	add	r3, r6
   263b0:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
   263b2:	8aa3      	ldrh	r3, [r4, #20]
   263b4:	442b      	add	r3, r5
   263b6:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
   263b8:	8ae3      	ldrh	r3, [r4, #22]
   263ba:	4433      	add	r3, r6
   263bc:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
   263be:	4632      	mov	r2, r6
   263c0:	4629      	mov	r1, r5
   263c2:	4620      	mov	r0, r4
   263c4:	f7ff fef0 	bl	261a8 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   263c8:	69e3      	ldr	r3, [r4, #28]
   263ca:	466a      	mov	r2, sp
   263cc:	2102      	movs	r1, #2
   263ce:	4620      	mov	r0, r4
   263d0:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   263d2:	b127      	cbz	r7, 263de <lv_obj_set_pos+0x6e>
   263d4:	69fb      	ldr	r3, [r7, #28]
   263d6:	4622      	mov	r2, r4
   263d8:	2101      	movs	r1, #1
   263da:	4638      	mov	r0, r7
   263dc:	4798      	blx	r3
    lv_obj_invalidate(obj);
   263de:	4620      	mov	r0, r4
   263e0:	f7ff ffa3 	bl	2632a <lv_obj_invalidate>
}
   263e4:	b003      	add	sp, #12
   263e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000263e8 <lv_obj_align>:
{
   263e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   263ea:	4605      	mov	r5, r0
   263ec:	461c      	mov	r4, r3
    if(base == NULL) base = lv_obj_get_parent(obj);
   263ee:	4608      	mov	r0, r1
   263f0:	b901      	cbnz	r1, 263f4 <lv_obj_align+0xc>
    return obj->parent;
   263f2:	6828      	ldr	r0, [r5, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
   263f4:	ab01      	add	r3, sp, #4
   263f6:	f105 0110 	add.w	r1, r5, #16
   263fa:	3010      	adds	r0, #16
   263fc:	f003 ff88 	bl	2a310 <_lv_area_align>
    return obj->parent;
   26400:	6828      	ldr	r0, [r5, #0]
    new_pos.x += x_ofs;
   26402:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    new_pos.y += y_ofs;
   26406:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2640a:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    lv_coord_t par_abs_y  = par->coords.y1;
   2640e:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
    new_pos.x += x_ofs;
   26412:	4421      	add	r1, r4
    new_pos.x -= par_abs_x;
   26414:	8a04      	ldrh	r4, [r0, #16]
    new_pos.y += y_ofs;
   26416:	441a      	add	r2, r3
    new_pos.x -= par_abs_x;
   26418:	1b09      	subs	r1, r1, r4
    new_pos.y -= par_abs_y;
   2641a:	1b92      	subs	r2, r2, r6
    new_pos.x -= par_abs_x;
   2641c:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
   2641e:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   26420:	4628      	mov	r0, r5
    new_pos.x -= par_abs_x;
   26422:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
   26426:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   2642a:	f7ff ffa1 	bl	26370 <lv_obj_set_pos>
}
   2642e:	b002      	add	sp, #8
   26430:	bd70      	pop	{r4, r5, r6, pc}

00026432 <lv_obj_set_size>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   26432:	8a83      	ldrh	r3, [r0, #20]
{
   26434:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26436:	4616      	mov	r6, r2
   26438:	8a02      	ldrh	r2, [r0, #16]
   2643a:	3301      	adds	r3, #1
   2643c:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   2643e:	b21b      	sxth	r3, r3
   26440:	428b      	cmp	r3, r1
{
   26442:	4604      	mov	r4, r0
   26444:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   26446:	d106      	bne.n	26456 <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   26448:	8ac3      	ldrh	r3, [r0, #22]
   2644a:	8a42      	ldrh	r2, [r0, #18]
   2644c:	3301      	adds	r3, #1
   2644e:	1a9b      	subs	r3, r3, r2
   26450:	b21b      	sxth	r3, r3
   26452:	429e      	cmp	r6, r3
   26454:	d023      	beq.n	2649e <lv_obj_set_size+0x6c>
    lv_obj_invalidate(obj);
   26456:	4620      	mov	r0, r4
   26458:	f7ff ff67 	bl	2632a <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   2645c:	f104 0110 	add.w	r1, r4, #16
   26460:	4668      	mov	r0, sp
   26462:	f7ff fec7 	bl	261f4 <lv_area_copy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
   26466:	8a62      	ldrh	r2, [r4, #18]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   26468:	8a21      	ldrh	r1, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   2646a:	69e3      	ldr	r3, [r4, #28]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   2646c:	3e01      	subs	r6, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
   2646e:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   26470:	4416      	add	r6, r2
        obj->coords.x2 = obj->coords.x1 + w - 1;
   26472:	440d      	add	r5, r1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   26474:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   26476:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   26478:	466a      	mov	r2, sp
   2647a:	2102      	movs	r1, #2
   2647c:	4620      	mov	r0, r4
   2647e:	4798      	blx	r3
    return obj->parent;
   26480:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   26482:	b118      	cbz	r0, 2648c <lv_obj_set_size+0x5a>
   26484:	69c3      	ldr	r3, [r0, #28]
   26486:	4622      	mov	r2, r4
   26488:	2101      	movs	r1, #1
   2648a:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   2648c:	1d26      	adds	r6, r4, #4
   2648e:	4630      	mov	r0, r6
   26490:	f004 f895 	bl	2a5be <_lv_ll_get_head>
   26494:	4605      	mov	r5, r0
   26496:	b920      	cbnz	r0, 264a2 <lv_obj_set_size+0x70>
    lv_obj_invalidate(obj);
   26498:	4620      	mov	r0, r4
   2649a:	f7ff ff46 	bl	2632a <lv_obj_invalidate>
}
   2649e:	b002      	add	sp, #8
   264a0:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
   264a2:	69eb      	ldr	r3, [r5, #28]
   264a4:	466a      	mov	r2, sp
   264a6:	2103      	movs	r1, #3
   264a8:	4628      	mov	r0, r5
   264aa:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   264ac:	4629      	mov	r1, r5
   264ae:	4630      	mov	r0, r6
   264b0:	f004 f88b 	bl	2a5ca <_lv_ll_get_next>
   264b4:	e7ee      	b.n	26494 <lv_obj_set_size+0x62>

000264b6 <lv_obj_set_height>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   264b6:	8a83      	ldrh	r3, [r0, #20]
{
   264b8:	460a      	mov	r2, r1
   264ba:	8a01      	ldrh	r1, [r0, #16]
   264bc:	3301      	adds	r3, #1
   264be:	b410      	push	{r4}
   264c0:	1a59      	subs	r1, r3, r1
}
   264c2:	bc10      	pop	{r4}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
   264c4:	b209      	sxth	r1, r1
   264c6:	f7ff bfb4 	b.w	26432 <lv_obj_set_size>

000264ca <lv_obj_del>:
{
   264ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   264cc:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
   264ce:	f7ff ff2c 	bl	2632a <lv_obj_invalidate>
    return obj->parent;
   264d2:	682f      	ldr	r7, [r5, #0]
    if(par == NULL) {
   264d4:	b9b7      	cbnz	r7, 26504 <lv_obj_del+0x3a>
        disp = lv_obj_get_disp(obj);
   264d6:	4628      	mov	r0, r5
   264d8:	f7f3 fec6 	bl	1a268 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
   264dc:	4604      	mov	r4, r0
   264de:	b178      	cbz	r0, 26500 <lv_obj_del+0x36>
        if(disp->act_scr == obj) act_scr_del = true;
   264e0:	6c06      	ldr	r6, [r0, #64]	; 0x40
   264e2:	1b73      	subs	r3, r6, r5
   264e4:	425e      	negs	r6, r3
   264e6:	415e      	adcs	r6, r3
    obj_del_core(obj);
   264e8:	4628      	mov	r0, r5
   264ea:	f7f3 fef3 	bl	1a2d4 <obj_del_core>
    if(par) {
   264ee:	b127      	cbz	r7, 264fa <lv_obj_del+0x30>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
   264f0:	69fb      	ldr	r3, [r7, #28]
   264f2:	2200      	movs	r2, #0
   264f4:	2101      	movs	r1, #1
   264f6:	4638      	mov	r0, r7
   264f8:	4798      	blx	r3
    if(act_scr_del)  {
   264fa:	b10e      	cbz	r6, 26500 <lv_obj_del+0x36>
        disp->act_scr = NULL;
   264fc:	2300      	movs	r3, #0
   264fe:	6423      	str	r3, [r4, #64]	; 0x40
}
   26500:	2000      	movs	r0, #0
   26502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
   26504:	2600      	movs	r6, #0
    lv_disp_t * disp = NULL;
   26506:	4634      	mov	r4, r6
   26508:	e7ee      	b.n	264e8 <lv_obj_del+0x1e>

0002650a <lv_obj_get_parent>:
}
   2650a:	6800      	ldr	r0, [r0, #0]
   2650c:	4770      	bx	lr

0002650e <lv_obj_get_child>:
    if(child == NULL) {
   2650e:	3004      	adds	r0, #4
   26510:	b909      	cbnz	r1, 26516 <lv_obj_get_child+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   26512:	f004 b854 	b.w	2a5be <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
   26516:	f004 b858 	b.w	2a5ca <_lv_ll_get_next>

0002651a <refresh_children_style>:
{
   2651a:	b538      	push	{r3, r4, r5, lr}
   2651c:	4605      	mov	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
   2651e:	3004      	adds	r0, #4
   26520:	f004 f84d 	bl	2a5be <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   26524:	4604      	mov	r4, r0
    while(child != NULL) {
   26526:	b900      	cbnz	r0, 2652a <refresh_children_style+0x10>
}
   26528:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
   2652a:	4620      	mov	r0, r4
   2652c:	f7ff fefd 	bl	2632a <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
   26530:	69e3      	ldr	r3, [r4, #28]
   26532:	2200      	movs	r2, #0
   26534:	2104      	movs	r1, #4
   26536:	4620      	mov	r0, r4
   26538:	4798      	blx	r3
        lv_obj_invalidate(child);
   2653a:	4620      	mov	r0, r4
   2653c:	f7ff fef5 	bl	2632a <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
   26540:	4620      	mov	r0, r4
   26542:	f7ff ffea 	bl	2651a <refresh_children_style>
        child = lv_obj_get_child(obj, child);
   26546:	4621      	mov	r1, r4
   26548:	4628      	mov	r0, r5
   2654a:	f7ff ffe0 	bl	2650e <lv_obj_get_child>
   2654e:	e7e9      	b.n	26524 <refresh_children_style+0xa>

00026550 <lv_obj_get_coords>:
{
   26550:	460b      	mov	r3, r1
    lv_area_copy(cords_p, &obj->coords);
   26552:	f100 0110 	add.w	r1, r0, #16
   26556:	4618      	mov	r0, r3
   26558:	f7ff be4c 	b.w	261f4 <lv_area_copy>

0002655c <lv_obj_get_x>:
    return obj->parent;
   2655c:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   2655e:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
   26562:	b113      	cbz	r3, 2656a <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
   26564:	8a1b      	ldrh	r3, [r3, #16]
   26566:	1ac0      	subs	r0, r0, r3
   26568:	b200      	sxth	r0, r0
}
   2656a:	4770      	bx	lr

0002656c <lv_obj_get_y>:
    return obj->parent;
   2656c:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   2656e:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   26572:	b113      	cbz	r3, 2657a <lv_obj_get_y+0xe>
        rel_y             = obj->coords.y1 - parent->coords.y1;
   26574:	8a5b      	ldrh	r3, [r3, #18]
   26576:	1ac0      	subs	r0, r0, r3
   26578:	b200      	sxth	r0, r0
}
   2657a:	4770      	bx	lr

0002657c <lv_obj_get_style_list>:
{
   2657c:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
   2657e:	b911      	cbnz	r1, 26586 <lv_obj_get_style_list+0xa>
   26580:	3028      	adds	r0, #40	; 0x28
}
   26582:	b002      	add	sp, #8
   26584:	bd10      	pop	{r4, pc}
    info.part = part;
   26586:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
   2658a:	2400      	movs	r4, #0
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   2658c:	466a      	mov	r2, sp
   2658e:	2108      	movs	r1, #8
    info.result = NULL;
   26590:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   26592:	f7ff fe48 	bl	26226 <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
   26596:	2801      	cmp	r0, #1
    return info.result;
   26598:	bf0c      	ite	eq
   2659a:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
   2659c:	4620      	movne	r0, r4
   2659e:	e7f0      	b.n	26582 <lv_obj_get_style_list+0x6>

000265a0 <_lv_obj_disable_style_caching>:
{
   265a0:	b570      	push	{r4, r5, r6, lr}
   265a2:	4606      	mov	r6, r0
   265a4:	460d      	mov	r5, r1
   265a6:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   265a8:	b2e1      	uxtb	r1, r4
   265aa:	4630      	mov	r0, r6
   265ac:	f7ff ffe6 	bl	2657c <lv_obj_get_style_list>
        if(list == NULL) break;
   265b0:	b130      	cbz	r0, 265c0 <_lv_obj_disable_style_caching+0x20>
        list->ignore_cache = dis;
   265b2:	7943      	ldrb	r3, [r0, #5]
   265b4:	3401      	adds	r4, #1
   265b6:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   265ba:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
   265bc:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   265be:	d1f3      	bne.n	265a8 <_lv_obj_disable_style_caching+0x8>
{
   265c0:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   265c2:	4621      	mov	r1, r4
   265c4:	4630      	mov	r0, r6
   265c6:	f7ff ffd9 	bl	2657c <lv_obj_get_style_list>
        if(list == NULL) break;
   265ca:	b138      	cbz	r0, 265dc <_lv_obj_disable_style_caching+0x3c>
        list->ignore_cache = dis;
   265cc:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   265ce:	3401      	adds	r4, #1
   265d0:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
   265d2:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   265d6:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
   265d8:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   265da:	d1f2      	bne.n	265c2 <_lv_obj_disable_style_caching+0x22>
}
   265dc:	bd70      	pop	{r4, r5, r6, pc}

000265de <lv_obj_get_state>:
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   265de:	293f      	cmp	r1, #63	; 0x3f
{
   265e0:	b507      	push	{r0, r1, r2, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   265e2:	d804      	bhi.n	265ee <lv_obj_get_state+0x10>
   265e4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
   265e8:	b003      	add	sp, #12
   265ea:	f85d fb04 	ldr.w	pc, [sp], #4
    info.part = part;
   265ee:	f88d 1004 	strb.w	r1, [sp, #4]
    info.result = LV_STATE_DEFAULT;
   265f2:	2300      	movs	r3, #0
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   265f4:	aa01      	add	r2, sp, #4
   265f6:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
   265f8:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   265fc:	f7ff fe13 	bl	26226 <lv_signal_send>
    return info.result;
   26600:	f89d 0005 	ldrb.w	r0, [sp, #5]
   26604:	e7f0      	b.n	265e8 <lv_obj_get_state+0xa>

00026606 <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   26606:	b508      	push	{r3, lr}
   26608:	2202      	movs	r2, #2
   2660a:	f7f4 f86d 	bl	1a6e8 <_lv_obj_get_style_int>
   2660e:	3800      	subs	r0, #0
   26610:	bf18      	it	ne
   26612:	2001      	movne	r0, #1
   26614:	bd08      	pop	{r3, pc}

00026616 <_lv_obj_get_style_opa>:
{
   26616:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2661a:	4605      	mov	r5, r0
   2661c:	b085      	sub	sp, #20
   2661e:	460f      	mov	r7, r1
   26620:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
   26622:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
   26626:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   26628:	f248 0a0c 	movw	sl, #32780	; 0x800c
   2662c:	f248 0bad 	movw	fp, #32941	; 0x80ad
    while(parent) {
   26630:	b96d      	cbnz	r5, 2664e <_lv_obj_get_style_opa+0x38>
    prop = prop & (~LV_STYLE_STATE_MASK);
   26632:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   26636:	2c6d      	cmp	r4, #109	; 0x6d
    prop = prop & (~LV_STYLE_STATE_MASK);
   26638:	b2a0      	uxth	r0, r4
    switch(prop) {
   2663a:	d04f      	beq.n	266dc <_lv_obj_get_style_opa+0xc6>
   2663c:	f248 03ad 	movw	r3, #32941	; 0x80ad
   26640:	4298      	cmp	r0, r3
   26642:	d04b      	beq.n	266dc <_lv_obj_get_style_opa+0xc6>
   26644:	282c      	cmp	r0, #44	; 0x2c
   26646:	bf14      	ite	ne
   26648:	20ff      	movne	r0, #255	; 0xff
   2664a:	2000      	moveq	r0, #0
   2664c:	e036      	b.n	266bc <_lv_obj_get_style_opa+0xa6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   2664e:	4639      	mov	r1, r7
   26650:	4628      	mov	r0, r5
   26652:	f7ff ff93 	bl	2657c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   26656:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   26658:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   2665a:	0718      	lsls	r0, r3, #28
   2665c:	d41d      	bmi.n	2669a <_lv_obj_get_style_opa+0x84>
   2665e:	7932      	ldrb	r2, [r6, #4]
   26660:	0691      	lsls	r1, r2, #26
   26662:	d01a      	beq.n	2669a <_lv_obj_get_style_opa+0x84>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   26664:	f013 0f04 	tst.w	r3, #4
   26668:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
   2666c:	d105      	bne.n	2667a <_lv_obj_get_style_opa+0x64>
   2666e:	4639      	mov	r1, r7
   26670:	4628      	mov	r0, r5
   26672:	9201      	str	r2, [sp, #4]
   26674:	f7f4 f934 	bl	1a8e0 <update_style_cache>
   26678:	9a01      	ldr	r2, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   2667a:	4552      	cmp	r2, sl
   2667c:	d009      	beq.n	26692 <_lv_obj_get_style_opa+0x7c>
   2667e:	455a      	cmp	r2, fp
   26680:	d01f      	beq.n	266c2 <_lv_obj_get_style_opa+0xac>
   26682:	2a2c      	cmp	r2, #44	; 0x2c
   26684:	d109      	bne.n	2669a <_lv_obj_get_style_opa+0x84>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   26686:	79b3      	ldrb	r3, [r6, #6]
   26688:	06da      	lsls	r2, r3, #27
   2668a:	d425      	bmi.n	266d8 <_lv_obj_get_style_opa+0xc2>
                    if(list->bg_opa_transp) def = true;
   2668c:	f013 0f08 	tst.w	r3, #8
   26690:	e002      	b.n	26698 <_lv_obj_get_style_opa+0x82>
                    if(list->opa_scale_cover) def = true;
   26692:	7973      	ldrb	r3, [r6, #5]
   26694:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
   26698:	d1cb      	bne.n	26632 <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
   2669a:	4639      	mov	r1, r7
   2669c:	4628      	mov	r0, r5
   2669e:	f7ff ff9e 	bl	265de <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   266a2:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   266a6:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
   266a8:	f10d 020f 	add.w	r2, sp, #15
   266ac:	4621      	mov	r1, r4
   266ae:	4630      	mov	r0, r6
   266b0:	f001 f9fe 	bl	27ab0 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
   266b4:	2801      	cmp	r0, #1
   266b6:	d108      	bne.n	266ca <_lv_obj_get_style_opa+0xb4>
   266b8:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
   266bc:	b005      	add	sp, #20
   266be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
   266c2:	79f3      	ldrb	r3, [r6, #7]
   266c4:	f013 0f10 	tst.w	r3, #16
   266c8:	e7e6      	b.n	26698 <_lv_obj_get_style_opa+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   266ca:	f019 0f80 	tst.w	r9, #128	; 0x80
   266ce:	d0b0      	beq.n	26632 <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
   266d0:	b907      	cbnz	r7, 266d4 <_lv_obj_get_style_opa+0xbe>
    return obj->parent;
   266d2:	682d      	ldr	r5, [r5, #0]
{
   266d4:	2700      	movs	r7, #0
   266d6:	e7ab      	b.n	26630 <_lv_obj_get_style_opa+0x1a>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   266d8:	20ff      	movs	r0, #255	; 0xff
   266da:	e7ef      	b.n	266bc <_lv_obj_get_style_opa+0xa6>
            return LV_OPA_TRANSP;
   266dc:	2000      	movs	r0, #0
   266de:	e7ed      	b.n	266bc <_lv_obj_get_style_opa+0xa6>

000266e0 <_lv_obj_get_style_ptr>:
{
   266e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   266e4:	4606      	mov	r6, r0
   266e6:	468b      	mov	fp, r1
   266e8:	4690      	mov	r8, r2
    while(parent) {
   266ea:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   266ec:	f248 098e 	movw	r9, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   266f0:	f342 2a07 	sbfx	sl, r2, #8, #8
    while(parent) {
   266f4:	b316      	cbz	r6, 2673c <_lv_obj_get_style_ptr+0x5c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   266f6:	4659      	mov	r1, fp
   266f8:	4630      	mov	r0, r6
   266fa:	f7ff ff3f 	bl	2657c <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   266fe:	7943      	ldrb	r3, [r0, #5]
   26700:	0719      	lsls	r1, r3, #28
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   26702:	4607      	mov	r7, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   26704:	d42a      	bmi.n	2675c <_lv_obj_get_style_ptr+0x7c>
   26706:	7902      	ldrb	r2, [r0, #4]
   26708:	0692      	lsls	r2, r2, #26
   2670a:	d027      	beq.n	2675c <_lv_obj_get_style_ptr+0x7c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   2670c:	f013 0f04 	tst.w	r3, #4
   26710:	f424 45fe 	bic.w	r5, r4, #32512	; 0x7f00
   26714:	d104      	bne.n	26720 <_lv_obj_get_style_ptr+0x40>
   26716:	462a      	mov	r2, r5
   26718:	4659      	mov	r1, fp
   2671a:	4630      	mov	r0, r6
   2671c:	f7f4 f8e0 	bl	1a8e0 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   26720:	2d7f      	cmp	r5, #127	; 0x7f
   26722:	d007      	beq.n	26734 <_lv_obj_get_style_ptr+0x54>
   26724:	454d      	cmp	r5, r9
   26726:	d015      	beq.n	26754 <_lv_obj_get_style_ptr+0x74>
   26728:	2d6e      	cmp	r5, #110	; 0x6e
   2672a:	d117      	bne.n	2675c <_lv_obj_get_style_ptr+0x7c>
                    if(list->pattern_img_null) def = true;
   2672c:	79fb      	ldrb	r3, [r7, #7]
   2672e:	f013 0f02 	tst.w	r3, #2
   26732:	e002      	b.n	2673a <_lv_obj_get_style_ptr+0x5a>
                    if(list->value_txt_str) def = true;
   26734:	79fb      	ldrb	r3, [r7, #7]
   26736:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
   2673a:	d00f      	beq.n	2675c <_lv_obj_get_style_ptr+0x7c>
    prop = prop & (~LV_STYLE_STATE_MASK);
   2673c:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   26740:	2c7e      	cmp	r4, #126	; 0x7e
    prop = prop & (~LV_STYLE_STATE_MASK);
   26742:	b2a2      	uxth	r2, r4
    switch(prop) {
   26744:	d003      	beq.n	2674e <_lv_obj_get_style_ptr+0x6e>
   26746:	f248 038e 	movw	r3, #32910	; 0x808e
   2674a:	429a      	cmp	r2, r3
   2674c:	d122      	bne.n	26794 <_lv_obj_get_style_ptr+0xb4>
            return lv_theme_get_font_normal();
   2674e:	f7f7 fd4b 	bl	1e1e8 <lv_theme_get_font_normal>
   26752:	e012      	b.n	2677a <_lv_obj_get_style_ptr+0x9a>
                    if(list->text_font_normal) def = true;
   26754:	f997 3007 	ldrsb.w	r3, [r7, #7]
   26758:	2b00      	cmp	r3, #0
   2675a:	dbef      	blt.n	2673c <_lv_obj_get_style_ptr+0x5c>
        lv_state_t state = lv_obj_get_state(parent, part);
   2675c:	4659      	mov	r1, fp
   2675e:	4630      	mov	r0, r6
   26760:	f7ff ff3d 	bl	265de <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   26764:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   26768:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
   2676a:	aa01      	add	r2, sp, #4
   2676c:	4621      	mov	r1, r4
   2676e:	4638      	mov	r0, r7
   26770:	f001 f9e0 	bl	27b34 <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
   26774:	2801      	cmp	r0, #1
   26776:	d103      	bne.n	26780 <_lv_obj_get_style_ptr+0xa0>
   26778:	9801      	ldr	r0, [sp, #4]
}
   2677a:	b003      	add	sp, #12
   2677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   26780:	f1ba 0f00 	cmp.w	sl, #0
   26784:	dada      	bge.n	2673c <_lv_obj_get_style_ptr+0x5c>
        if(part != LV_OBJ_PART_MAIN) {
   26786:	f1bb 0f00 	cmp.w	fp, #0
   2678a:	d100      	bne.n	2678e <_lv_obj_get_style_ptr+0xae>
    return obj->parent;
   2678c:	6836      	ldr	r6, [r6, #0]
{
   2678e:	f04f 0b00 	mov.w	fp, #0
   26792:	e7af      	b.n	266f4 <_lv_obj_get_style_ptr+0x14>
    switch(prop) {
   26794:	2000      	movs	r0, #0
   26796:	e7f0      	b.n	2677a <_lv_obj_get_style_ptr+0x9a>

00026798 <update_style_cache_children>:
{
   26798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2679c:	4605      	mov	r5, r0
   2679e:	2700      	movs	r7, #0
   267a0:	b2fe      	uxtb	r6, r7
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   267a2:	4631      	mov	r1, r6
   267a4:	4628      	mov	r0, r5
   267a6:	f7ff fee9 	bl	2657c <lv_obj_get_style_list>
        if(list == NULL) break;
   267aa:	4604      	mov	r4, r0
   267ac:	2800      	cmp	r0, #0
   267ae:	d055      	beq.n	2685c <update_style_cache_children+0xc4>
        bool ignore_cache_ori = list->ignore_cache;
   267b0:	7943      	ldrb	r3, [r0, #5]
   267b2:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
   267b6:	f043 0308 	orr.w	r3, r3, #8
   267ba:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   267bc:	f248 020c 	movw	r2, #32780	; 0x800c
   267c0:	4631      	mov	r1, r6
   267c2:	4628      	mov	r0, r5
   267c4:	f7ff ff27 	bl	26616 <_lv_obj_get_style_opa>
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
   267c8:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   267cc:	4258      	negs	r0, r3
   267ce:	4158      	adcs	r0, r3
   267d0:	7963      	ldrb	r3, [r4, #5]
   267d2:	f360 1345 	bfi	r3, r0, #5, #1
   267d6:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   267d8:	f248 0282 	movw	r2, #32898	; 0x8082
   267dc:	4631      	mov	r1, r6
   267de:	4628      	mov	r0, r5
   267e0:	f7f3 ff82 	bl	1a6e8 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   267e4:	b2c0      	uxtb	r0, r0
   267e6:	79e3      	ldrb	r3, [r4, #7]
   267e8:	fab0 f080 	clz	r0, r0
   267ec:	0940      	lsrs	r0, r0, #5
   267ee:	f360 1386 	bfi	r3, r0, #6, #1
   267f2:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   267f4:	f248 028e 	movw	r2, #32910	; 0x808e
   267f8:	4631      	mov	r1, r6
   267fa:	4628      	mov	r0, r5
   267fc:	f7ff ff70 	bl	266e0 <_lv_obj_get_style_ptr>
   26800:	4681      	mov	r9, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
   26802:	f7f7 fcf1 	bl	1e1e8 <lv_theme_get_font_normal>
   26806:	eba9 0200 	sub.w	r2, r9, r0
   2680a:	f1d2 0900 	rsbs	r9, r2, #0
   2680e:	79e3      	ldrb	r3, [r4, #7]
   26810:	eb49 0902 	adc.w	r9, r9, r2
   26814:	f369 13c7 	bfi	r3, r9, #7, #1
   26818:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   2681a:	f248 02ad 	movw	r2, #32941	; 0x80ad
   2681e:	4631      	mov	r1, r6
   26820:	4628      	mov	r0, r5
   26822:	f7ff fef8 	bl	26616 <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   26826:	79e3      	ldrb	r3, [r4, #7]
   26828:	2800      	cmp	r0, #0
   2682a:	bf0c      	ite	eq
   2682c:	2030      	moveq	r0, #48	; 0x30
   2682e:	2020      	movne	r0, #32
   26830:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   26834:	4318      	orrs	r0, r3
   26836:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   26838:	f248 0280 	movw	r2, #32896	; 0x8080
   2683c:	4631      	mov	r1, r6
   2683e:	4628      	mov	r0, r5
   26840:	f7f3 ff52 	bl	1a6e8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   26844:	b188      	cbz	r0, 2686a <update_style_cache_children+0xd2>
            list->text_space_zero = 0;
   26846:	79e3      	ldrb	r3, [r4, #7]
   26848:	f36f 1345 	bfc	r3, #5, #1
   2684c:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
   2684e:	7963      	ldrb	r3, [r4, #5]
   26850:	3701      	adds	r7, #1
   26852:	f368 03c3 	bfi	r3, r8, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   26856:	2f40      	cmp	r7, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
   26858:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   2685a:	d1a1      	bne.n	267a0 <update_style_cache_children+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   2685c:	1d28      	adds	r0, r5, #4
   2685e:	f003 feae 	bl	2a5be <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   26862:	4604      	mov	r4, r0
    while(child) {
   26864:	b950      	cbnz	r0, 2687c <update_style_cache_children+0xe4>
}
   26866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   2686a:	f248 0281 	movw	r2, #32897	; 0x8081
   2686e:	4631      	mov	r1, r6
   26870:	4628      	mov	r0, r5
   26872:	f7f3 ff39 	bl	1a6e8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   26876:	2800      	cmp	r0, #0
   26878:	d1e5      	bne.n	26846 <update_style_cache_children+0xae>
   2687a:	e7e8      	b.n	2684e <update_style_cache_children+0xb6>
        update_style_cache_children(child);
   2687c:	4620      	mov	r0, r4
   2687e:	f7ff ff8b 	bl	26798 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   26882:	4621      	mov	r1, r4
   26884:	4628      	mov	r0, r5
   26886:	f7ff fe42 	bl	2650e <lv_obj_get_child>
   2688a:	e7ea      	b.n	26862 <update_style_cache_children+0xca>

0002688c <lv_obj_reset_style_list>:
{
   2688c:	b538      	push	{r3, r4, r5, lr}
   2688e:	4604      	mov	r4, r0
   26890:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
   26892:	f7f3 fed9 	bl	1a648 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   26896:	4629      	mov	r1, r5
   26898:	4620      	mov	r0, r4
   2689a:	22ff      	movs	r2, #255	; 0xff
}
   2689c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   268a0:	f7f4 b978 	b.w	1ab94 <lv_obj_refresh_style>

000268a4 <lv_obj_get_signal_cb>:
}
   268a4:	69c0      	ldr	r0, [r0, #28]
   268a6:	4770      	bx	lr

000268a8 <lv_obj_get_ext_attr>:
}
   268a8:	6a40      	ldr	r0, [r0, #36]	; 0x24
   268aa:	4770      	bx	lr

000268ac <lv_obj_handle_get_type_signal>:
{
   268ac:	b510      	push	{r4, lr}
   268ae:	2300      	movs	r3, #0
        if(buf->type[i] == NULL) break;
   268b0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   268b4:	b2da      	uxtb	r2, r3
   268b6:	b11c      	cbz	r4, 268c0 <lv_obj_handle_get_type_signal+0x14>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
   268b8:	3301      	adds	r3, #1
   268ba:	2b07      	cmp	r3, #7
   268bc:	d1f8      	bne.n	268b0 <lv_obj_handle_get_type_signal+0x4>
   268be:	461a      	mov	r2, r3
    buf->type[i] = name;
   268c0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   268c4:	2001      	movs	r0, #1
   268c6:	bd10      	pop	{r4, pc}

000268c8 <lv_obj_init_draw_rect_dsc>:
{
   268c8:	b570      	push	{r4, r5, r6, lr}
   268ca:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   268cc:	2201      	movs	r2, #1
   268ce:	4605      	mov	r5, r0
   268d0:	460e      	mov	r6, r1
   268d2:	f7f3 ff09 	bl	1a6e8 <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   268d6:	7b23      	ldrb	r3, [r4, #12]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
   268d8:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   268da:	b33b      	cbz	r3, 2692c <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   268dc:	222c      	movs	r2, #44	; 0x2c
   268de:	4631      	mov	r1, r6
   268e0:	4628      	mov	r0, r5
   268e2:	f7ff fe98 	bl	26616 <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   268e6:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
   268e8:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   268ea:	d91f      	bls.n	2692c <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   268ec:	2229      	movs	r2, #41	; 0x29
   268ee:	4631      	mov	r1, r6
   268f0:	4628      	mov	r0, r5
   268f2:	f7f3 fec5 	bl	1a680 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
   268f6:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
   268f8:	8060      	strh	r0, [r4, #2]
   268fa:	4631      	mov	r1, r6
   268fc:	4628      	mov	r0, r5
   268fe:	f7f3 fef3 	bl	1a6e8 <_lv_obj_get_style_int>
   26902:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
   26904:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
   26906:	b188      	cbz	r0, 2692c <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
   26908:	222a      	movs	r2, #42	; 0x2a
   2690a:	4631      	mov	r1, r6
   2690c:	4628      	mov	r0, r5
   2690e:	f7f3 feb7 	bl	1a680 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
   26912:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
   26914:	80a0      	strh	r0, [r4, #4]
   26916:	4631      	mov	r1, r6
   26918:	4628      	mov	r0, r5
   2691a:	f7f3 fee5 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
   2691e:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
   26920:	8120      	strh	r0, [r4, #8]
   26922:	4631      	mov	r1, r6
   26924:	4628      	mov	r0, r5
   26926:	f7f3 fedf 	bl	1a6e8 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
   2692a:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   2692c:	2230      	movs	r2, #48	; 0x30
   2692e:	4631      	mov	r1, r6
   26930:	4628      	mov	r0, r5
   26932:	f7f3 fed9 	bl	1a6e8 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
   26936:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
   26938:	b1b0      	cbz	r0, 26968 <lv_obj_init_draw_rect_dsc+0xa0>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
   2693a:	7d23      	ldrb	r3, [r4, #20]
   2693c:	b1a3      	cbz	r3, 26968 <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   2693e:	223c      	movs	r2, #60	; 0x3c
   26940:	4631      	mov	r1, r6
   26942:	4628      	mov	r0, r5
   26944:	f7ff fe67 	bl	26616 <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   26948:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
   2694a:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   2694c:	d90c      	bls.n	26968 <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   2694e:	2231      	movs	r2, #49	; 0x31
   26950:	4631      	mov	r1, r6
   26952:	4628      	mov	r0, r5
   26954:	f7f3 fec8 	bl	1a6e8 <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
   26958:	b2c0      	uxtb	r0, r0
   2695a:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   2695c:	2239      	movs	r2, #57	; 0x39
   2695e:	4631      	mov	r1, r6
   26960:	4628      	mov	r0, r5
   26962:	f7f3 fe8d 	bl	1a680 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
   26966:	81e0      	strh	r0, [r4, #14]
}
   26968:	bd70      	pop	{r4, r5, r6, pc}

0002696a <lv_obj_design>:
{
   2696a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
   2696e:	2a02      	cmp	r2, #2
{
   26970:	b09a      	sub	sp, #104	; 0x68
   26972:	4604      	mov	r4, r0
   26974:	4688      	mov	r8, r1
   26976:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
   26978:	d15b      	bne.n	26a32 <lv_obj_design+0xc8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   2697a:	2100      	movs	r1, #0
   2697c:	f7ff fe43 	bl	26606 <lv_obj_get_style_clip_corner>
   26980:	4606      	mov	r6, r0
   26982:	2800      	cmp	r0, #0
   26984:	d153      	bne.n	26a2e <lv_obj_design+0xc4>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   26986:	4601      	mov	r1, r0
   26988:	2201      	movs	r2, #1
   2698a:	4620      	mov	r0, r4
   2698c:	f7f3 feac 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26990:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   26992:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26994:	4631      	mov	r1, r6
   26996:	4620      	mov	r0, r4
   26998:	f7f3 fea6 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   2699c:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2699e:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   269a0:	4631      	mov	r1, r6
   269a2:	4620      	mov	r0, r4
   269a4:	f7f3 fea0 	bl	1a6e8 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
   269a8:	f104 0110 	add.w	r1, r4, #16
   269ac:	4681      	mov	r9, r0
   269ae:	a805      	add	r0, sp, #20
   269b0:	f7ff fc20 	bl	261f4 <lv_area_copy>
        coords.x1 -= w;
   269b4:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        coords.x2 += w;
   269b8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        coords.x1 -= w;
   269bc:	1bdb      	subs	r3, r3, r7
   269be:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
   269c2:	4407      	add	r7, r0
        coords.y1 -= h;
   269c4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        coords.y2 += h;
   269c8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
        coords.x2 += w;
   269cc:	f8ad 7018 	strh.w	r7, [sp, #24]
        coords.y1 -= h;
   269d0:	eba3 0309 	sub.w	r3, r3, r9
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   269d4:	4652      	mov	r2, sl
        coords.y2 += h;
   269d6:	4481      	add	r9, r0
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   269d8:	a905      	add	r1, sp, #20
   269da:	4640      	mov	r0, r8
        coords.y1 -= h;
   269dc:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
   269e0:	f8ad 901a 	strh.w	r9, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   269e4:	f003 fc44 	bl	2a270 <_lv_area_is_in>
   269e8:	b1e8      	cbz	r0, 26a26 <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   269ea:	222c      	movs	r2, #44	; 0x2c
   269ec:	4631      	mov	r1, r6
   269ee:	4620      	mov	r0, r4
   269f0:	f7ff fe11 	bl	26616 <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
   269f4:	28fc      	cmp	r0, #252	; 0xfc
   269f6:	d916      	bls.n	26a26 <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
   269f8:	4631      	mov	r1, r6
   269fa:	2220      	movs	r2, #32
   269fc:	4620      	mov	r0, r4
   269fe:	f7f3 fe73 	bl	1a6e8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   26a02:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   26a06:	d10e      	bne.n	26a26 <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
   26a08:	2232      	movs	r2, #50	; 0x32
   26a0a:	4620      	mov	r0, r4
   26a0c:	f7f3 fe6c 	bl	1a6e8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   26a10:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   26a14:	d107      	bne.n	26a26 <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   26a16:	f248 020c 	movw	r2, #32780	; 0x800c
   26a1a:	4620      	mov	r0, r4
   26a1c:	f7ff fdfb 	bl	26616 <_lv_obj_get_style_opa>
        return  LV_DESIGN_RES_COVER;
   26a20:	28fc      	cmp	r0, #252	; 0xfc
   26a22:	bf88      	it	hi
   26a24:	2501      	movhi	r5, #1
}
   26a26:	4628      	mov	r0, r5
   26a28:	b01a      	add	sp, #104	; 0x68
   26a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   26a2e:	2503      	movs	r5, #3
   26a30:	e7f9      	b.n	26a26 <lv_obj_design+0xbc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   26a32:	2a00      	cmp	r2, #0
   26a34:	d178      	bne.n	26b28 <lv_obj_design+0x1be>
        lv_draw_rect_dsc_init(&draw_dsc);
   26a36:	a805      	add	r0, sp, #20
   26a38:	f7f6 f88c 	bl	1cb54 <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   26a3c:	2233      	movs	r2, #51	; 0x33
   26a3e:	4629      	mov	r1, r5
   26a40:	4620      	mov	r0, r4
   26a42:	f7f3 fe51 	bl	1a6e8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   26a46:	b128      	cbz	r0, 26a54 <lv_obj_design+0xea>
            draw_dsc.border_post = 1;
   26a48:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   26a4c:	f043 0301 	orr.w	r3, r3, #1
   26a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   26a54:	aa05      	add	r2, sp, #20
   26a56:	2100      	movs	r1, #0
   26a58:	4620      	mov	r0, r4
   26a5a:	f7ff ff35 	bl	268c8 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26a5e:	2204      	movs	r2, #4
   26a60:	2100      	movs	r1, #0
   26a62:	4620      	mov	r0, r4
   26a64:	f7f3 fe40 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26a68:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26a6a:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26a6c:	2100      	movs	r1, #0
   26a6e:	4620      	mov	r0, r4
   26a70:	f7f3 fe3a 	bl	1a6e8 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
   26a74:	f104 0910 	add.w	r9, r4, #16
   26a78:	4607      	mov	r7, r0
   26a7a:	4649      	mov	r1, r9
   26a7c:	a801      	add	r0, sp, #4
   26a7e:	f7ff fbb9 	bl	261f4 <lv_area_copy>
        coords.x1 -= w;
   26a82:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        coords.x2 += w;
   26a86:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        coords.x1 -= w;
   26a8a:	1b9b      	subs	r3, r3, r6
   26a8c:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
   26a90:	4406      	add	r6, r0
        coords.y1 -= h;
   26a92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        coords.y2 += h;
   26a96:	f8bd 000a 	ldrh.w	r0, [sp, #10]
        coords.x2 += w;
   26a9a:	f8ad 6008 	strh.w	r6, [sp, #8]
        coords.y1 -= h;
   26a9e:	1bdb      	subs	r3, r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   26aa0:	4641      	mov	r1, r8
        coords.y2 += h;
   26aa2:	4407      	add	r7, r0
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   26aa4:	aa05      	add	r2, sp, #20
   26aa6:	a801      	add	r0, sp, #4
        coords.y1 -= h;
   26aa8:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
   26aac:	f8ad 700a 	strh.w	r7, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   26ab0:	f002 fc05 	bl	292be <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   26ab4:	2100      	movs	r1, #0
   26ab6:	4620      	mov	r0, r4
   26ab8:	f7ff fda5 	bl	26606 <lv_obj_get_style_clip_corner>
   26abc:	2800      	cmp	r0, #0
   26abe:	d0b2      	beq.n	26a26 <lv_obj_design+0xbc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
   26ac0:	201c      	movs	r0, #28
   26ac2:	f7f6 fdf3 	bl	1d6ac <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   26ac6:	2201      	movs	r2, #1
   26ac8:	4606      	mov	r6, r0
   26aca:	2100      	movs	r1, #0
   26acc:	4620      	mov	r0, r4
   26ace:	f7f3 fe0b 	bl	1a6e8 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
   26ad2:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   26ad6:	07db      	lsls	r3, r3, #31
   26ad8:	4602      	mov	r2, r0
   26ada:	d522      	bpl.n	26b22 <lv_obj_design+0x1b8>
   26adc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   26ae0:	2b01      	cmp	r3, #1
   26ae2:	d91e      	bls.n	26b22 <lv_obj_design+0x1b8>
   26ae4:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
   26ae8:	2b00      	cmp	r3, #0
   26aea:	dd1a      	ble.n	26b22 <lv_obj_design+0x1b8>
                cc_area.x1 = obj->coords.x1 + 1;
   26aec:	8a23      	ldrh	r3, [r4, #16]
   26aee:	3301      	adds	r3, #1
   26af0:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
   26af4:	8a63      	ldrh	r3, [r4, #18]
   26af6:	3301      	adds	r3, #1
   26af8:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
   26afc:	8aa3      	ldrh	r3, [r4, #20]
   26afe:	3b01      	subs	r3, #1
   26b00:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
   26b04:	8ae3      	ldrh	r3, [r4, #22]
   26b06:	3b01      	subs	r3, #1
   26b08:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
   26b0c:	a903      	add	r1, sp, #12
   26b0e:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   26b10:	4630      	mov	r0, r6
   26b12:	f7f5 fff5 	bl	1cb00 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
   26b16:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
   26b1a:	4630      	mov	r0, r6
   26b1c:	f7f5 feee 	bl	1c8fc <lv_draw_mask_add>
   26b20:	e781      	b.n	26a26 <lv_obj_design+0xbc>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   26b22:	2300      	movs	r3, #0
   26b24:	4649      	mov	r1, r9
   26b26:	e7f3      	b.n	26b10 <lv_obj_design+0x1a6>
    else if(mode == LV_DESIGN_DRAW_POST) {
   26b28:	2a01      	cmp	r2, #1
   26b2a:	d001      	beq.n	26b30 <lv_obj_design+0x1c6>
    return LV_DESIGN_RES_OK;
   26b2c:	2500      	movs	r5, #0
   26b2e:	e77a      	b.n	26a26 <lv_obj_design+0xbc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   26b30:	2100      	movs	r1, #0
   26b32:	f7ff fd68 	bl	26606 <lv_obj_get_style_clip_corner>
   26b36:	b128      	cbz	r0, 26b44 <lv_obj_design+0x1da>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
   26b38:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   26b3c:	f7f5 ff3a 	bl	1c9b4 <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
   26b40:	f7f6 fe16 	bl	1d770 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   26b44:	2233      	movs	r2, #51	; 0x33
   26b46:	2100      	movs	r1, #0
   26b48:	4620      	mov	r0, r4
   26b4a:	f7f3 fdcd 	bl	1a6e8 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   26b4e:	2800      	cmp	r0, #0
   26b50:	d0ec      	beq.n	26b2c <lv_obj_design+0x1c2>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   26b52:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
   26b54:	a805      	add	r0, sp, #20
   26b56:	f7f5 fffd 	bl	1cb54 <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   26b5a:	aa05      	add	r2, sp, #20
   26b5c:	4629      	mov	r1, r5
   26b5e:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   26b60:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
   26b64:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
   26b68:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
   26b6c:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   26b70:	f7ff feaa 	bl	268c8 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26b74:	4629      	mov	r1, r5
   26b76:	2204      	movs	r2, #4
   26b78:	4620      	mov	r0, r4
   26b7a:	f7f3 fdb5 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26b7e:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26b80:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26b82:	4629      	mov	r1, r5
   26b84:	4620      	mov	r0, r4
   26b86:	f7f3 fdaf 	bl	1a6e8 <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
   26b8a:	f104 0110 	add.w	r1, r4, #16
   26b8e:	4606      	mov	r6, r0
   26b90:	a803      	add	r0, sp, #12
   26b92:	f7ff fb2f 	bl	261f4 <lv_area_copy>
            coords.x1 -= w;
   26b96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            coords.x2 += w;
   26b9a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
            coords.x1 -= w;
   26b9e:	1bdb      	subs	r3, r3, r7
   26ba0:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
   26ba4:	4407      	add	r7, r0
            coords.y1 -= h;
   26ba6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            coords.y2 += h;
   26baa:	f8bd 0012 	ldrh.w	r0, [sp, #18]
            coords.x2 += w;
   26bae:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
   26bb2:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   26bb4:	aa05      	add	r2, sp, #20
            coords.y2 += h;
   26bb6:	4406      	add	r6, r0
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   26bb8:	4641      	mov	r1, r8
   26bba:	a803      	add	r0, sp, #12
            coords.y1 -= h;
   26bbc:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
   26bc0:	f8ad 6012 	strh.w	r6, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   26bc4:	f002 fb7b 	bl	292be <lv_draw_rect>
   26bc8:	e72d      	b.n	26a26 <lv_obj_design+0xbc>

00026bca <lv_obj_init_draw_label_dsc>:
{
   26bca:	b570      	push	{r4, r5, r6, lr}
   26bcc:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
   26bce:	f248 028c 	movw	r2, #32908	; 0x808c
   26bd2:	4605      	mov	r5, r0
   26bd4:	460e      	mov	r6, r1
   26bd6:	f7ff fd1e 	bl	26616 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   26bda:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
   26bdc:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   26bde:	d931      	bls.n	26c44 <lv_obj_init_draw_label_dsc+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   26be0:	f248 0289 	movw	r2, #32905	; 0x8089
   26be4:	4631      	mov	r1, r6
   26be6:	4628      	mov	r0, r5
   26be8:	f7f3 fd4a 	bl	1a680 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   26bec:	f248 0280 	movw	r2, #32896	; 0x8080
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
   26bf0:	8020      	strh	r0, [r4, #0]
   26bf2:	4631      	mov	r1, r6
   26bf4:	4628      	mov	r0, r5
   26bf6:	f7f3 fd77 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   26bfa:	f248 0281 	movw	r2, #32897	; 0x8081
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
   26bfe:	81a0      	strh	r0, [r4, #12]
   26c00:	4631      	mov	r1, r6
   26c02:	4628      	mov	r0, r5
   26c04:	f7f3 fd70 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   26c08:	f248 0282 	movw	r2, #32898	; 0x8082
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
   26c0c:	8160      	strh	r0, [r4, #10]
   26c0e:	4631      	mov	r1, r6
   26c10:	4628      	mov	r0, r5
   26c12:	f7f3 fd69 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   26c16:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   26c1a:	77a0      	strb	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   26c1c:	4631      	mov	r1, r6
   26c1e:	4628      	mov	r0, r5
   26c20:	f7ff fd5e 	bl	266e0 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   26c24:	6922      	ldr	r2, [r4, #16]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
   26c26:	6060      	str	r0, [r4, #4]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   26c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26c2c:	429a      	cmp	r2, r3
   26c2e:	d009      	beq.n	26c44 <lv_obj_init_draw_label_dsc+0x7a>
   26c30:	6962      	ldr	r2, [r4, #20]
   26c32:	429a      	cmp	r2, r3
   26c34:	d006      	beq.n	26c44 <lv_obj_init_draw_label_dsc+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
   26c36:	f248 028a 	movw	r2, #32906	; 0x808a
   26c3a:	4631      	mov	r1, r6
   26c3c:	4628      	mov	r0, r5
   26c3e:	f7f3 fd1f 	bl	1a680 <_lv_obj_get_style_color>
        draw_dsc->color = lv_obj_get_style_text_sel_color(obj, part);
   26c42:	8020      	strh	r0, [r4, #0]
}
   26c44:	bd70      	pop	{r4, r5, r6, pc}

00026c46 <lv_obj_init_draw_img_dsc>:
{
   26c46:	b570      	push	{r4, r5, r6, lr}
   26c48:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
   26c4a:	f248 02ac 	movw	r2, #32940	; 0x80ac
   26c4e:	4605      	mov	r5, r0
   26c50:	460e      	mov	r6, r1
   26c52:	f7ff fce0 	bl	26616 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26c56:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
   26c58:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26c5a:	d927      	bls.n	26cac <lv_obj_init_draw_img_dsc+0x66>
    draw_dsc->angle = 0;
   26c5c:	2300      	movs	r3, #0
   26c5e:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
   26c60:	f44f 7380 	mov.w	r3, #256	; 0x100
   26c64:	8123      	strh	r3, [r4, #8]
   26c66:	8aab      	ldrh	r3, [r5, #20]
   26c68:	8a2a      	ldrh	r2, [r5, #16]
   26c6a:	3301      	adds	r3, #1
   26c6c:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
   26c6e:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   26c72:	fa02 f383 	sxtah	r3, r2, r3
   26c76:	105b      	asrs	r3, r3, #1
   26c78:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   26c7a:	8aeb      	ldrh	r3, [r5, #22]
   26c7c:	8a6a      	ldrh	r2, [r5, #18]
   26c7e:	3301      	adds	r3, #1
   26c80:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
   26c82:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   26c86:	fa02 f383 	sxtah	r3, r2, r3
   26c8a:	105b      	asrs	r3, r3, #1
   26c8c:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   26c8e:	f248 02ad 	movw	r2, #32941	; 0x80ad
   26c92:	4631      	mov	r1, r6
   26c94:	4628      	mov	r0, r5
   26c96:	f7ff fcbe 	bl	26616 <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
   26c9a:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
   26c9c:	b130      	cbz	r0, 26cac <lv_obj_init_draw_img_dsc+0x66>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   26c9e:	f248 02a9 	movw	r2, #32937	; 0x80a9
   26ca2:	4631      	mov	r1, r6
   26ca4:	4628      	mov	r0, r5
   26ca6:	f7f3 fceb 	bl	1a680 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
   26caa:	81a0      	strh	r0, [r4, #12]
}
   26cac:	bd70      	pop	{r4, r5, r6, pc}

00026cae <lv_obj_init_draw_line_dsc>:
{
   26cae:	b570      	push	{r4, r5, r6, lr}
   26cb0:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   26cb2:	2290      	movs	r2, #144	; 0x90
   26cb4:	4605      	mov	r5, r0
   26cb6:	460e      	mov	r6, r1
   26cb8:	f7f3 fd16 	bl	1a6e8 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
   26cbc:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
   26cbe:	b340      	cbz	r0, 26d12 <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
   26cc0:	229c      	movs	r2, #156	; 0x9c
   26cc2:	4631      	mov	r1, r6
   26cc4:	4628      	mov	r0, r5
   26cc6:	f7ff fca6 	bl	26616 <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26cca:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
   26ccc:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26cce:	d920      	bls.n	26d12 <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   26cd0:	2299      	movs	r2, #153	; 0x99
   26cd2:	4631      	mov	r1, r6
   26cd4:	4628      	mov	r0, r5
   26cd6:	f7f3 fcd3 	bl	1a680 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   26cda:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
   26cdc:	8020      	strh	r0, [r4, #0]
   26cde:	4631      	mov	r1, r6
   26ce0:	4628      	mov	r0, r5
   26ce2:	f7f3 fd01 	bl	1a6e8 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
   26ce6:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
   26ce8:	b128      	cbz	r0, 26cf6 <lv_obj_init_draw_line_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   26cea:	2293      	movs	r2, #147	; 0x93
   26cec:	4631      	mov	r1, r6
   26cee:	4628      	mov	r0, r5
   26cf0:	f7f3 fcfa 	bl	1a6e8 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
   26cf4:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   26cf6:	2294      	movs	r2, #148	; 0x94
   26cf8:	4631      	mov	r1, r6
   26cfa:	4628      	mov	r0, r5
   26cfc:	f7f3 fcf4 	bl	1a6e8 <_lv_obj_get_style_int>
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
   26d00:	7a63      	ldrb	r3, [r4, #9]
   26d02:	3800      	subs	r0, #0
   26d04:	bf18      	it	ne
   26d06:	2001      	movne	r0, #1
   26d08:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
   26d0c:	f360 03c3 	bfi	r3, r0, #3, #1
   26d10:	7263      	strb	r3, [r4, #9]
}
   26d12:	bd70      	pop	{r4, r5, r6, pc}

00026d14 <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
   26d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26d18:	4614      	mov	r4, r2
   26d1a:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
   26d1c:	2101      	movs	r1, #1
{
   26d1e:	4605      	mov	r5, r0
    _lv_obj_disable_style_caching(obj, true);
   26d20:	f7ff fc3e 	bl	265a0 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
   26d24:	21b8      	movs	r1, #184	; 0xb8
   26d26:	4620      	mov	r0, r4
   26d28:	f7ff fa5e 	bl	261e8 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
   26d2c:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    lv_draw_rect_dsc_init(&shot->rect);
   26d30:	4620      	mov	r0, r4
   26d32:	f7f5 ff0f 	bl	1cb54 <lv_draw_rect_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
   26d36:	f104 097e 	add.w	r9, r4, #126	; 0x7e
    lv_draw_label_dsc_init(&shot->label);
   26d3a:	4650      	mov	r0, sl
   26d3c:	f7f4 fd6a 	bl	1b814 <lv_draw_label_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   26d40:	f104 0874 	add.w	r8, r4, #116	; 0x74
    lv_draw_img_dsc_init(&shot->img);
   26d44:	4648      	mov	r0, r9
   26d46:	f001 fe01 	bl	2894c <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   26d4a:	4640      	mov	r0, r8
   26d4c:	f001 fe55 	bl	289fa <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   26d50:	4631      	mov	r1, r6
   26d52:	4628      	mov	r0, r5
   26d54:	f7ff fc12 	bl	2657c <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
   26d58:	7943      	ldrb	r3, [r0, #5]
   26d5a:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
   26d5e:	f043 0301 	orr.w	r3, r3, #1
   26d62:	7143      	strb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   26d64:	4607      	mov	r7, r0

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
   26d66:	4622      	mov	r2, r4
   26d68:	4631      	mov	r1, r6
   26d6a:	4628      	mov	r0, r5
   26d6c:	f7ff fdac 	bl	268c8 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
   26d70:	4652      	mov	r2, sl
   26d72:	4631      	mov	r1, r6
   26d74:	4628      	mov	r0, r5
   26d76:	f7ff ff28 	bl	26bca <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
   26d7a:	464a      	mov	r2, r9
   26d7c:	4631      	mov	r1, r6
   26d7e:	4628      	mov	r0, r5
   26d80:	f7ff ff61 	bl	26c46 <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
   26d84:	4642      	mov	r2, r8
   26d86:	4631      	mov	r1, r6
   26d88:	4628      	mov	r0, r5
   26d8a:	f7ff ff90 	bl	26cae <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   26d8e:	2210      	movs	r2, #16
   26d90:	4631      	mov	r1, r6
   26d92:	4628      	mov	r0, r5
   26d94:	f7f3 fca8 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   26d98:	2211      	movs	r2, #17


    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
   26d9a:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
   26d9e:	4631      	mov	r1, r6
   26da0:	4628      	mov	r0, r5
   26da2:	f7f3 fca1 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   26da6:	2213      	movs	r2, #19
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
   26da8:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   26dac:	4631      	mov	r1, r6
   26dae:	4628      	mov	r0, r5
   26db0:	f7f3 fc9a 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   26db4:	2212      	movs	r2, #18
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
   26db6:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
   26dba:	4631      	mov	r1, r6
   26dbc:	4628      	mov	r0, r5
   26dbe:	f7f3 fc93 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   26dc2:	2214      	movs	r2, #20
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
   26dc4:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
   26dc8:	4631      	mov	r1, r6
   26dca:	4628      	mov	r0, r5
   26dcc:	f7f3 fc8c 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   26dd0:	2215      	movs	r2, #21
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
   26dd2:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
   26dd6:	4631      	mov	r1, r6
   26dd8:	4628      	mov	r0, r5
   26dda:	f7f3 fc85 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   26dde:	2216      	movs	r2, #22
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
   26de0:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
   26de4:	4631      	mov	r1, r6
   26de6:	4628      	mov	r0, r5
   26de8:	f7f3 fc7e 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   26dec:	2217      	movs	r2, #23
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
   26dee:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
   26df2:	4631      	mov	r1, r6
   26df4:	4628      	mov	r0, r5
   26df6:	f7f3 fc77 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   26dfa:	2218      	movs	r2, #24
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
   26dfc:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
   26e00:	4631      	mov	r1, r6
   26e02:	4628      	mov	r0, r5
   26e04:	f7f3 fc70 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   26e08:	2203      	movs	r2, #3
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
   26e0a:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
   26e0e:	4631      	mov	r1, r6
   26e10:	4628      	mov	r0, r5
   26e12:	f7f3 fc69 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26e16:	2204      	movs	r2, #4
    shot->size = lv_obj_get_style_size(obj, part);
   26e18:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
   26e1c:	4631      	mov	r1, r6
   26e1e:	4628      	mov	r0, r5
   26e20:	f7f3 fc62 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26e24:	2205      	movs	r2, #5
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
   26e26:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
   26e2a:	4631      	mov	r1, r6
   26e2c:	4628      	mov	r0, r5
   26e2e:	f7f3 fc5b 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   26e32:	2206      	movs	r2, #6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
   26e34:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
   26e38:	4631      	mov	r1, r6
   26e3a:	4628      	mov	r0, r5
   26e3c:	f7f3 fc54 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   26e40:	2207      	movs	r2, #7
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
   26e42:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   26e46:	4631      	mov	r1, r6
   26e48:	4628      	mov	r0, r5
   26e4a:	f7f3 fc4d 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   26e4e:	22c0      	movs	r2, #192	; 0xc0
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
   26e50:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
   26e54:	4631      	mov	r1, r6
   26e56:	4628      	mov	r0, r5
   26e58:	f7f3 fc46 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
   26e5c:	22c1      	movs	r2, #193	; 0xc1
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
   26e5e:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
   26e62:	4631      	mov	r1, r6
   26e64:	4628      	mov	r0, r5
   26e66:	f7f3 fc3f 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   26e6a:	22c2      	movs	r2, #194	; 0xc2
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
   26e6c:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
   26e70:	4631      	mov	r1, r6
   26e72:	4628      	mov	r0, r5
   26e74:	f7f3 fc38 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   26e78:	22c3      	movs	r2, #195	; 0xc3
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
   26e7a:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
   26e7e:	4631      	mov	r1, r6
   26e80:	4628      	mov	r0, r5
   26e82:	f7f3 fc31 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   26e86:	22c9      	movs	r2, #201	; 0xc9
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
   26e88:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
   26e8c:	4631      	mov	r1, r6
   26e8e:	4628      	mov	r0, r5
   26e90:	f7f3 fbf6 	bl	1a680 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   26e94:	22ca      	movs	r2, #202	; 0xca
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
   26e96:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
   26e9a:	4631      	mov	r1, r6
   26e9c:	4628      	mov	r0, r5
   26e9e:	f7f3 fbef 	bl	1a680 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   26ea2:	f248 020c 	movw	r2, #32780	; 0x800c
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
   26ea6:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
   26eaa:	4631      	mov	r1, r6
   26eac:	4628      	mov	r0, r5
   26eae:	f7ff fbb2 	bl	26616 <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   26eb2:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
   26eb4:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   26eb8:	4628      	mov	r0, r5
   26eba:	f7ff fba4 	bl	26606 <lv_obj_get_style_clip_corner>
   26ebe:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
   26ec2:	f360 0300 	bfi	r3, r0, #0, #1
   26ec6:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   26eca:	2233      	movs	r2, #51	; 0x33
   26ecc:	4631      	mov	r1, r6
   26ece:	4628      	mov	r0, r5
   26ed0:	f7f3 fc0a 	bl	1a6e8 <_lv_obj_get_style_int>
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
   26ed4:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
   26ed8:	3800      	subs	r0, #0
   26eda:	bf18      	it	ne
   26edc:	2001      	movne	r0, #1
   26ede:	f360 0341 	bfi	r3, r0, #1, #1
   26ee2:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7

    _lv_obj_disable_style_caching(obj, false);
   26ee6:	2100      	movs	r1, #0
   26ee8:	4628      	mov	r0, r5
   26eea:	f7ff fb59 	bl	265a0 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
   26eee:	797b      	ldrb	r3, [r7, #5]
   26ef0:	f36b 0300 	bfi	r3, fp, #0, #1
   26ef4:	717b      	strb	r3, [r7, #5]
}
   26ef6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026efa <lv_obj_set_state>:
{
   26efa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(obj->state == new_state) return;
   26efe:	f890 9035 	ldrb.w	r9, [r0, #53]	; 0x35
   26f02:	4589      	cmp	r9, r1
{
   26f04:	b0dd      	sub	sp, #372	; 0x174
   26f06:	4605      	mov	r5, r0
   26f08:	4688      	mov	r8, r1
    if(obj->state == new_state) return;
   26f0a:	f000 80ac 	beq.w	27066 <lv_obj_set_state+0x16c>
   26f0e:	2600      	movs	r6, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
   26f10:	4634      	mov	r4, r6
   26f12:	b2f7      	uxtb	r7, r6
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
   26f14:	4639      	mov	r1, r7
   26f16:	4628      	mov	r0, r5
   26f18:	f7ff fb30 	bl	2657c <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
   26f1c:	2800      	cmp	r0, #0
   26f1e:	f000 8096 	beq.w	2704e <lv_obj_set_state+0x154>
        style_snapshot(obj, part, &shot_pre);
   26f22:	466a      	mov	r2, sp
   26f24:	4639      	mov	r1, r7
   26f26:	4628      	mov	r0, r5
        obj->state = prev_state;
   26f28:	f885 9035 	strb.w	r9, [r5, #53]	; 0x35
        style_snapshot(obj, part, &shot_pre);
   26f2c:	f7ff fef2 	bl	26d14 <style_snapshot>
        style_snapshot(obj, part, &shot_post);
   26f30:	aa2e      	add	r2, sp, #184	; 0xb8
   26f32:	4639      	mov	r1, r7
   26f34:	4628      	mov	r0, r5
        obj->state = new_state;
   26f36:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
        style_snapshot(obj, part, &shot_post);
   26f3a:	f7ff feeb 	bl	26d14 <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
   26f3e:	22b8      	movs	r2, #184	; 0xb8
   26f40:	eb0d 0102 	add.w	r1, sp, r2
   26f44:	4668      	mov	r0, sp
   26f46:	f004 fc26 	bl	2b796 <memcmp>
   26f4a:	2800      	cmp	r0, #0
   26f4c:	d07a      	beq.n	27044 <lv_obj_set_state+0x14a>


    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
   26f4e:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
   26f52:	f9bd 3146 	ldrsh.w	r3, [sp, #326]	; 0x146
   26f56:	429a      	cmp	r2, r3
   26f58:	f040 8088 	bne.w	2706c <lv_obj_set_state+0x172>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
   26f5c:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
   26f60:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
   26f64:	429a      	cmp	r2, r3
   26f66:	f040 8081 	bne.w	2706c <lv_obj_set_state+0x172>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
   26f6a:	f9bd 214a 	ldrsh.w	r2, [sp, #330]	; 0x14a
   26f6e:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
   26f72:	4293      	cmp	r3, r2
   26f74:	d17a      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
   26f76:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
   26f7a:	429a      	cmp	r2, r3
   26f7c:	d176      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
   26f7e:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
   26f82:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
   26f86:	429a      	cmp	r2, r3
   26f88:	d170      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
   26f8a:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	; 0x98
   26f8e:	f9bd 3150 	ldrsh.w	r3, [sp, #336]	; 0x150
   26f92:	429a      	cmp	r2, r3
   26f94:	d16a      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
   26f96:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
   26f9a:	f9bd 3152 	ldrsh.w	r3, [sp, #338]	; 0x152
   26f9e:	429a      	cmp	r2, r3
   26fa0:	d164      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
   26fa2:	f9bd 3156 	ldrsh.w	r3, [sp, #342]	; 0x156
   26fa6:	f9bd 209c 	ldrsh.w	r2, [sp, #156]	; 0x9c
   26faa:	429a      	cmp	r2, r3
   26fac:	d15e      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
   26fae:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
   26fb2:	429a      	cmp	r2, r3
   26fb4:	d15a      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
   26fb6:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
   26fba:	f9bd 315a 	ldrsh.w	r3, [sp, #346]	; 0x15a
   26fbe:	429a      	cmp	r2, r3
   26fc0:	d154      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
   26fc2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
   26fc6:	f9bd 315c 	ldrsh.w	r3, [sp, #348]	; 0x15c
   26fca:	429a      	cmp	r2, r3
   26fcc:	d14e      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
   26fce:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
   26fd2:	f9bd 315e 	ldrsh.w	r3, [sp, #350]	; 0x15e
   26fd6:	429a      	cmp	r2, r3
   26fd8:	d148      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
   26fda:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
   26fde:	f9bd 3160 	ldrsh.w	r3, [sp, #352]	; 0x160
   26fe2:	429a      	cmp	r2, r3
   26fe4:	d142      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
   26fe6:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
   26fea:	f9bd 30d2 	ldrsh.w	r3, [sp, #210]	; 0xd2
   26fee:	429a      	cmp	r2, r3
   26ff0:	d13c      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
   26ff2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
   26ff6:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
   26ffa:	429a      	cmp	r2, r3
   26ffc:	d136      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
   26ffe:	9a10      	ldr	r2, [sp, #64]	; 0x40
   27000:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   27002:	429a      	cmp	r2, r3
   27004:	d132      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
   27006:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   2700a:	f89d 3108 	ldrb.w	r3, [sp, #264]	; 0x108
   2700e:	429a      	cmp	r2, r3
   27010:	d12c      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
   27012:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   27016:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
   2701a:	429a      	cmp	r2, r3
   2701c:	d126      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
   2701e:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
   27022:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
   27026:	429a      	cmp	r2, r3
   27028:	d120      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
   2702a:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   2702e:	f9bd 30dc 	ldrsh.w	r3, [sp, #220]	; 0xdc
   27032:	429a      	cmp	r2, r3
   27034:	d11a      	bne.n	2706c <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
   27036:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
   2703a:	f9bd 30de 	ldrsh.w	r3, [sp, #222]	; 0xde
   2703e:	429a      	cmp	r2, r3
   27040:	d114      	bne.n	2706c <lv_obj_set_state+0x172>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
   27042:	2401      	movs	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   27044:	3601      	adds	r6, #1
   27046:	2e40      	cmp	r6, #64	; 0x40
   27048:	f47f af63 	bne.w	26f12 <lv_obj_set_state+0x18>
   2704c:	4637      	mov	r7, r6
    obj->state = new_state;
   2704e:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
    if(cmp_res == STYLE_COMPARE_SAME) {
   27052:	b144      	cbz	r4, 27066 <lv_obj_set_state+0x16c>
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   27054:	2c02      	cmp	r4, #2
   27056:	f04f 02ff 	mov.w	r2, #255	; 0xff
   2705a:	bf0c      	ite	eq
   2705c:	4639      	moveq	r1, r7
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   2705e:	4611      	movne	r1, r2
   27060:	4628      	mov	r0, r5
   27062:	f7f3 fd97 	bl	1ab94 <lv_obj_refresh_style>
}
   27066:	b05d      	add	sp, #372	; 0x174
   27068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            cmp_res = STYLE_COMPARE_DIFF;
   2706c:	2402      	movs	r4, #2
   2706e:	e7ee      	b.n	2704e <lv_obj_set_state+0x154>

00027070 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
   27070:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
   27074:	460b      	mov	r3, r1
    if(obj->state != new_state) {
   27076:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
   27078:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
   2707c:	d001      	beq.n	27082 <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
   2707e:	f7ff bf3c 	b.w	26efa <lv_obj_set_state>
}
   27082:	4770      	bx	lr

00027084 <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
   27084:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
   27088:	460a      	mov	r2, r1
    if(obj->state != new_state) {
   2708a:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
   2708c:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
   27090:	d001      	beq.n	27096 <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
   27092:	f7ff bf32 	b.w	26efa <lv_obj_set_state>
}
   27096:	4770      	bx	lr

00027098 <lv_obj_get_draw_rect_ext_pad_size>:
{
   27098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   2709c:	2250      	movs	r2, #80	; 0x50
   2709e:	b088      	sub	sp, #32
   270a0:	4605      	mov	r5, r0
   270a2:	460e      	mov	r6, r1
   270a4:	f7f3 fb20 	bl	1a6e8 <_lv_obj_get_style_int>
    if(sh_width) {
   270a8:	4604      	mov	r4, r0
   270aa:	2800      	cmp	r0, #0
   270ac:	f040 80bb 	bne.w	27226 <lv_obj_get_draw_rect_ext_pad_size+0x18e>
    lv_coord_t s = 0;
   270b0:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   270b2:	227f      	movs	r2, #127	; 0x7f
   270b4:	4631      	mov	r1, r6
   270b6:	4628      	mov	r0, r5
   270b8:	f7ff fb12 	bl	266e0 <_lv_obj_get_style_ptr>
    if(value_str) {
   270bc:	4607      	mov	r7, r0
   270be:	2800      	cmp	r0, #0
   270c0:	f000 8082 	beq.w	271c8 <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
   270c4:	227c      	movs	r2, #124	; 0x7c
   270c6:	4631      	mov	r1, r6
   270c8:	4628      	mov	r0, r5
   270ca:	f7ff faa4 	bl	26616 <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
   270ce:	2802      	cmp	r0, #2
   270d0:	d97a      	bls.n	271c8 <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   270d2:	2270      	movs	r2, #112	; 0x70
   270d4:	4631      	mov	r1, r6
   270d6:	4628      	mov	r0, r5
   270d8:	f7f3 fb06 	bl	1a6e8 <_lv_obj_get_style_int>
   270dc:	2270      	movs	r2, #112	; 0x70
   270de:	4680      	mov	r8, r0
   270e0:	4631      	mov	r1, r6
   270e2:	4628      	mov	r0, r5
   270e4:	f7f3 fb00 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   270e8:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   270ea:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   270ec:	4631      	mov	r1, r6
   270ee:	4628      	mov	r0, r5
   270f0:	f7ff faf6 	bl	266e0 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
   270f4:	f04f 0a00 	mov.w	sl, #0
   270f8:	f647 4318 	movw	r3, #31768	; 0x7c18
   270fc:	4602      	mov	r2, r0
   270fe:	4639      	mov	r1, r7
   27100:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   27104:	f8cd 9000 	str.w	r9, [sp]
   27108:	4643      	mov	r3, r8
   2710a:	a804      	add	r0, sp, #16
   2710c:	f7f6 feb2 	bl	1de74 <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
   27110:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            value_area.x1 = 0;
   27114:	f8cd a018 	str.w	sl, [sp, #24]
            value_area.x2 = txt_size.x - 1;
   27118:	3b01      	subs	r3, #1
   2711a:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
   2711e:	f8bd 3012 	ldrh.w	r3, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   27122:	2275      	movs	r2, #117	; 0x75
   27124:	3b01      	subs	r3, #1
   27126:	4631      	mov	r1, r6
   27128:	4628      	mov	r0, r5
   2712a:	f8ad 301e 	strh.w	r3, [sp, #30]
   2712e:	f7f3 fadb 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   27132:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   27134:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   27136:	4631      	mov	r1, r6
   27138:	4628      	mov	r0, r5
   2713a:	f7f3 fad5 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   2713e:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   27140:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   27142:	4631      	mov	r1, r6
   27144:	4628      	mov	r0, r5
   27146:	f7f3 facf 	bl	1a6e8 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
   2714a:	ab05      	add	r3, sp, #20
   2714c:	4607      	mov	r7, r0
   2714e:	fa5f f289 	uxtb.w	r2, r9
   27152:	a906      	add	r1, sp, #24
   27154:	f105 0010 	add.w	r0, r5, #16
   27158:	f003 f8da 	bl	2a310 <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
   2715c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27160:	f8bd 1018 	ldrh.w	r1, [sp, #24]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   27164:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
            value_area.y1 += p_align.y + yofs;
   27168:	f8bd 0016 	ldrh.w	r0, [sp, #22]
            value_area.x1 += p_align.x + xofs;
   2716c:	4443      	add	r3, r8
   2716e:	fa01 f183 	sxtah	r1, r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   27172:	b209      	sxth	r1, r1
   27174:	1a52      	subs	r2, r2, r1
            value_area.y1 += p_align.y + yofs;
   27176:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   2717a:	4294      	cmp	r4, r2
            value_area.y1 += p_align.y + yofs;
   2717c:	4438      	add	r0, r7
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   2717e:	bfb8      	it	lt
   27180:	4614      	movlt	r4, r2
            value_area.y1 += p_align.y + yofs;
   27182:	fa01 f180 	sxtah	r1, r1, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
   27186:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   2718a:	b209      	sxth	r1, r1
   2718c:	1a52      	subs	r2, r2, r1
   2718e:	b224      	sxth	r4, r4
   27190:	42a2      	cmp	r2, r4
   27192:	bfb8      	it	lt
   27194:	4622      	movlt	r2, r4
            value_area.x2 += p_align.x + xofs;
   27196:	f8bd 401c 	ldrh.w	r4, [sp, #28]
   2719a:	fa04 f383 	sxtah	r3, r4, r3
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
   2719e:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
   271a2:	b21b      	sxth	r3, r3
   271a4:	1b1c      	subs	r4, r3, r4
   271a6:	b213      	sxth	r3, r2
   271a8:	42a3      	cmp	r3, r4
   271aa:	bfb8      	it	lt
   271ac:	4623      	movlt	r3, r4
            value_area.y2 += p_align.y + yofs;
   271ae:	f8bd 401e 	ldrh.w	r4, [sp, #30]
   271b2:	fa04 f080 	sxtah	r0, r4, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
   271b6:	b204      	sxth	r4, r0
   271b8:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
   271bc:	1a20      	subs	r0, r4, r0
   271be:	b21c      	sxth	r4, r3
   271c0:	4284      	cmp	r4, r0
   271c2:	bfb8      	it	lt
   271c4:	4604      	movlt	r4, r0
   271c6:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   271c8:	2240      	movs	r2, #64	; 0x40
   271ca:	4631      	mov	r1, r6
   271cc:	4628      	mov	r0, r5
   271ce:	f7f3 fa8b 	bl	1a6e8 <_lv_obj_get_style_int>
    if(outline_width) {
   271d2:	4607      	mov	r7, r0
   271d4:	b180      	cbz	r0, 271f8 <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   271d6:	224c      	movs	r2, #76	; 0x4c
   271d8:	4631      	mov	r1, r6
   271da:	4628      	mov	r0, r5
   271dc:	f7ff fa1b 	bl	26616 <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
   271e0:	2802      	cmp	r0, #2
   271e2:	d909      	bls.n	271f8 <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   271e4:	2241      	movs	r2, #65	; 0x41
   271e6:	4631      	mov	r1, r6
   271e8:	4628      	mov	r0, r5
   271ea:	f7f3 fa7d 	bl	1a6e8 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
   271ee:	4438      	add	r0, r7
   271f0:	4284      	cmp	r4, r0
   271f2:	bfb8      	it	lt
   271f4:	4604      	movlt	r4, r0
   271f6:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   271f8:	4631      	mov	r1, r6
   271fa:	2204      	movs	r2, #4
   271fc:	4628      	mov	r0, r5
   271fe:	f7f3 fa73 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   27202:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   27204:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   27206:	4631      	mov	r1, r6
   27208:	4628      	mov	r0, r5
   2720a:	f7f3 fa6d 	bl	1a6e8 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
   2720e:	42b8      	cmp	r0, r7
   27210:	bfb8      	it	lt
   27212:	4638      	movlt	r0, r7
   27214:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
   27216:	2800      	cmp	r0, #0
   27218:	bfc4      	itt	gt
   2721a:	1824      	addgt	r4, r4, r0
   2721c:	b224      	sxthgt	r4, r4
}
   2721e:	4620      	mov	r0, r4
   27220:	b008      	add	sp, #32
   27222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
   27226:	225c      	movs	r2, #92	; 0x5c
   27228:	4631      	mov	r1, r6
   2722a:	4628      	mov	r0, r5
   2722c:	f7ff f9f3 	bl	26616 <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
   27230:	2802      	cmp	r0, #2
   27232:	f67f af3d 	bls.w	270b0 <lv_obj_get_draw_rect_ext_pad_size+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   27236:	2253      	movs	r2, #83	; 0x53
   27238:	4631      	mov	r1, r6
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
   2723a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   2723e:	4628      	mov	r0, r5
   27240:	f7f3 fa52 	bl	1a6e8 <_lv_obj_get_style_int>
   27244:	f344 044f 	sbfx	r4, r4, #1, #16
            sh_width++;
   27248:	3401      	adds	r4, #1
   2724a:	b224      	sxth	r4, r4
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   2724c:	4404      	add	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   2724e:	2251      	movs	r2, #81	; 0x51
   27250:	4631      	mov	r1, r6
   27252:	4628      	mov	r0, r5
   27254:	f7f3 fa48 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   27258:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   2725a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   2725c:	4631      	mov	r1, r6
   2725e:	4628      	mov	r0, r5
   27260:	f7f3 fa42 	bl	1a6e8 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   27264:	2800      	cmp	r0, #0
   27266:	bfb8      	it	lt
   27268:	4240      	neglt	r0, r0
   2726a:	2f00      	cmp	r7, #0
   2726c:	bfb8      	it	lt
   2726e:	427f      	neglt	r7, r7
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   27270:	b224      	sxth	r4, r4
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   27272:	b280      	uxth	r0, r0
   27274:	b2bf      	uxth	r7, r7
   27276:	42b8      	cmp	r0, r7
   27278:	bf2c      	ite	cs
   2727a:	1824      	addcs	r4, r4, r0
   2727c:	19e4      	addcc	r4, r4, r7
            s = LV_MATH_MAX(s, sh_width);
   2727e:	b224      	sxth	r4, r4
   27280:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   27284:	e715      	b.n	270b2 <lv_obj_get_draw_rect_ext_pad_size+0x1a>

00027286 <lv_obj_get_focused_obj>:
    if(obj == NULL) return NULL;
   27286:	b908      	cbnz	r0, 2728c <lv_obj_get_focused_obj+0x6>
   27288:	4770      	bx	lr
    return obj->parent;
   2728a:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
   2728c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
   27290:	079b      	lsls	r3, r3, #30
   27292:	d4fa      	bmi.n	2728a <lv_obj_get_focused_obj+0x4>
}
   27294:	4770      	bx	lr

00027296 <_lv_memcpy>:
   27296:	f004 ba8c 	b.w	2b7b2 <memcpy>

0002729a <lv_refr_get_top_obj>:
{
   2729a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   2729e:	2200      	movs	r2, #0
{
   272a0:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   272a2:	3110      	adds	r1, #16
{
   272a4:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   272a6:	f002 ffe3 	bl	2a270 <_lv_area_is_in>
   272aa:	b910      	cbnz	r0, 272b2 <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
   272ac:	2000      	movs	r0, #0
}
   272ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   272b2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   272b6:	06db      	lsls	r3, r3, #27
   272b8:	d4f8      	bmi.n	272ac <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   272ba:	6a23      	ldr	r3, [r4, #32]
   272bc:	2202      	movs	r2, #2
   272be:	4639      	mov	r1, r7
   272c0:	4620      	mov	r0, r4
   272c2:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   272c4:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   272c6:	4606      	mov	r6, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   272c8:	d0f0      	beq.n	272ac <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
   272ca:	f104 0804 	add.w	r8, r4, #4
   272ce:	4640      	mov	r0, r8
   272d0:	f003 f975 	bl	2a5be <_lv_ll_get_head>
   272d4:	4605      	mov	r5, r0
   272d6:	b918      	cbnz	r0, 272e0 <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
   272d8:	2e01      	cmp	r6, #1
   272da:	d1e7      	bne.n	272ac <lv_refr_get_top_obj+0x12>
   272dc:	4620      	mov	r0, r4
   272de:	e7e6      	b.n	272ae <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
   272e0:	4629      	mov	r1, r5
   272e2:	4638      	mov	r0, r7
   272e4:	f7ff ffd9 	bl	2729a <lv_refr_get_top_obj>
            if(found_p != NULL) {
   272e8:	2800      	cmp	r0, #0
   272ea:	d1e0      	bne.n	272ae <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
   272ec:	4629      	mov	r1, r5
   272ee:	4640      	mov	r0, r8
   272f0:	f003 f96b 	bl	2a5ca <_lv_ll_get_next>
   272f4:	e7ee      	b.n	272d4 <lv_refr_get_top_obj+0x3a>

000272f6 <lv_refr_obj>:
{
   272f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
   272f8:	f890 7032 	ldrb.w	r7, [r0, #50]	; 0x32
   272fc:	f017 0710 	ands.w	r7, r7, #16
{
   27300:	b08b      	sub	sp, #44	; 0x2c
   27302:	4604      	mov	r4, r0
   27304:	460e      	mov	r6, r1
    if(obj->hidden != 0) return;
   27306:	d13a      	bne.n	2737e <lv_refr_obj+0x88>
    lv_obj_get_coords(obj, &obj_area);
   27308:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
   2730a:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
   2730e:	f7ff f91f 	bl	26550 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
   27312:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   27316:	1b5b      	subs	r3, r3, r5
   27318:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
   2731c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   27320:	1b5b      	subs	r3, r3, r5
   27322:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
   27326:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   2732a:	442b      	add	r3, r5
   2732c:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
   27330:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   27334:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
   27336:	441d      	add	r5, r3
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   27338:	4631      	mov	r1, r6
   2733a:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
   2733c:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   27340:	f002 fea3 	bl	2a08a <_lv_area_intersect>
    if(union_ok != false) {
   27344:	b1d8      	cbz	r0, 2737e <lv_refr_obj+0x88>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
   27346:	6a23      	ldr	r3, [r4, #32]
   27348:	b11b      	cbz	r3, 27352 <lv_refr_obj+0x5c>
   2734a:	463a      	mov	r2, r7
   2734c:	a902      	add	r1, sp, #8
   2734e:	4620      	mov	r0, r4
   27350:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
   27352:	a904      	add	r1, sp, #16
   27354:	4620      	mov	r0, r4
   27356:	f7ff f8fb 	bl	26550 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
   2735a:	aa04      	add	r2, sp, #16
   2735c:	4631      	mov	r1, r6
   2735e:	4668      	mov	r0, sp
   27360:	f002 fe93 	bl	2a08a <_lv_area_intersect>
        if(union_ok != false) {
   27364:	b128      	cbz	r0, 27372 <lv_refr_obj+0x7c>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   27366:	1d26      	adds	r6, r4, #4
   27368:	4630      	mov	r0, r6
   2736a:	f003 f92b 	bl	2a5c4 <_lv_ll_get_tail>
   2736e:	4605      	mov	r5, r0
   27370:	b938      	cbnz	r0, 27382 <lv_refr_obj+0x8c>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
   27372:	6a23      	ldr	r3, [r4, #32]
   27374:	b11b      	cbz	r3, 2737e <lv_refr_obj+0x88>
   27376:	2201      	movs	r2, #1
   27378:	a902      	add	r1, sp, #8
   2737a:	4620      	mov	r0, r4
   2737c:	4798      	blx	r3
}
   2737e:	b00b      	add	sp, #44	; 0x2c
   27380:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
   27382:	a908      	add	r1, sp, #32
   27384:	4628      	mov	r0, r5
   27386:	f7ff f8e3 	bl	26550 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
   2738a:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
                child_area.x1 -= ext_size;
   2738e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   27392:	1ad2      	subs	r2, r2, r3
   27394:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
   27398:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   2739c:	1ad2      	subs	r2, r2, r3
   2739e:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
   273a2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   273a6:	441a      	add	r2, r3
   273a8:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
   273ac:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   273b0:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
   273b2:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   273b4:	a806      	add	r0, sp, #24
   273b6:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
   273b8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   273bc:	f002 fe65 	bl	2a08a <_lv_area_intersect>
                if(union_ok) {
   273c0:	b118      	cbz	r0, 273ca <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
   273c2:	a906      	add	r1, sp, #24
   273c4:	4628      	mov	r0, r5
   273c6:	f7ff ff96 	bl	272f6 <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   273ca:	4629      	mov	r1, r5
   273cc:	4630      	mov	r0, r6
   273ce:	f003 f901 	bl	2a5d4 <_lv_ll_get_prev>
   273d2:	e7cc      	b.n	2736e <lv_refr_obj+0x78>

000273d4 <_lv_memset_00>:
   273d4:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   273d6:	2100      	movs	r1, #0
   273d8:	f004 ba0c 	b.w	2b7f4 <memset>

000273dc <_lv_refr_init>:
}
   273dc:	4770      	bx	lr

000273de <_lv_inv_area>:
{
   273de:	b5f0      	push	{r4, r5, r6, r7, lr}
   273e0:	460d      	mov	r5, r1
   273e2:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
   273e4:	4604      	mov	r4, r0
   273e6:	b918      	cbnz	r0, 273f0 <_lv_inv_area+0x12>
   273e8:	f7f5 ffe0 	bl	1d3ac <lv_disp_get_default>
    if(!disp) return;
   273ec:	4604      	mov	r4, r0
   273ee:	b130      	cbz	r0, 273fe <_lv_inv_area+0x20>
    if(area_p == NULL) {
   273f0:	b93d      	cbnz	r5, 27402 <_lv_inv_area+0x24>
        disp->inv_p = 0;
   273f2:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   273f6:	f365 0309 	bfi	r3, r5, #0, #10
   273fa:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
}
   273fe:	b005      	add	sp, #20
   27400:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
   27402:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   27404:	4620      	mov	r0, r4
    scr_area.x1 = 0;
   27406:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   27408:	f7f5 ffd6 	bl	1d3b8 <lv_disp_get_hor_res>
   2740c:	3801      	subs	r0, #1
   2740e:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
   27412:	4620      	mov	r0, r4
   27414:	f7f5 ffe0 	bl	1d3d8 <lv_disp_get_ver_res>
   27418:	3801      	subs	r0, #1
   2741a:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
   2741e:	466a      	mov	r2, sp
   27420:	4629      	mov	r1, r5
   27422:	a802      	add	r0, sp, #8
   27424:	f002 fe31 	bl	2a08a <_lv_area_intersect>
    if(suc != false) {
   27428:	2800      	cmp	r0, #0
   2742a:	d0e8      	beq.n	273fe <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
   2742c:	6923      	ldr	r3, [r4, #16]
   2742e:	b113      	cbz	r3, 27436 <_lv_inv_area+0x58>
   27430:	a902      	add	r1, sp, #8
   27432:	4620      	mov	r0, r4
   27434:	4798      	blx	r3
   27436:	f104 055a 	add.w	r5, r4, #90	; 0x5a
{
   2743a:	2600      	movs	r6, #0
   2743c:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
   2743e:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   27442:	b2b2      	uxth	r2, r6
   27444:	f3c3 0009 	ubfx	r0, r3, #0, #10
   27448:	4290      	cmp	r0, r2
   2744a:	d815      	bhi.n	27478 <_lv_inv_area+0x9a>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
   2744c:	281f      	cmp	r0, #31
   2744e:	d81d      	bhi.n	2748c <_lv_inv_area+0xae>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
   27450:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   27454:	2208      	movs	r2, #8
   27456:	eb0d 0102 	add.w	r1, sp, r2
   2745a:	305a      	adds	r0, #90	; 0x5a
   2745c:	f7ff ff1b 	bl	27296 <_lv_memcpy>
        disp->inv_p++;
   27460:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   27464:	6b20      	ldr	r0, [r4, #48]	; 0x30
        disp->inv_p++;
   27466:	1c5a      	adds	r2, r3, #1
   27468:	f362 0309 	bfi	r3, r2, #0, #10
   2746c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   27470:	2103      	movs	r1, #3
   27472:	f7f6 fb37 	bl	1dae4 <lv_task_set_prio>
   27476:	e7c2      	b.n	273fe <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
   27478:	4629      	mov	r1, r5
   2747a:	2200      	movs	r2, #0
   2747c:	a802      	add	r0, sp, #8
   2747e:	f002 fef7 	bl	2a270 <_lv_area_is_in>
   27482:	3601      	adds	r6, #1
   27484:	3508      	adds	r5, #8
   27486:	2800      	cmp	r0, #0
   27488:	d0d9      	beq.n	2743e <_lv_inv_area+0x60>
   2748a:	e7b8      	b.n	273fe <_lv_inv_area+0x20>
            disp->inv_p = 0;
   2748c:	f36f 0309 	bfc	r3, #0, #10
   27490:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
   27494:	2208      	movs	r2, #8
   27496:	4669      	mov	r1, sp
   27498:	4638      	mov	r0, r7
   2749a:	e7df      	b.n	2745c <_lv_inv_area+0x7e>

0002749c <lv_style_list_get_style>:
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
   2749c:	8882      	ldrh	r2, [r0, #4]
   2749e:	f402 72c0 	and.w	r2, r2, #384	; 0x180
   274a2:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   274a6:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
   274a8:	bf08      	it	eq
   274aa:	3101      	addeq	r1, #1
{
   274ac:	4603      	mov	r3, r0
    if(list->has_trans && list->skip_trans) id++;
   274ae:	bf08      	it	eq
   274b0:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   274b2:	f012 003f 	ands.w	r0, r2, #63	; 0x3f
   274b6:	d006      	beq.n	274c6 <lv_style_list_get_style+0x2a>
   274b8:	4288      	cmp	r0, r1
   274ba:	d903      	bls.n	274c4 <lv_style_list_get_style+0x28>
    return list->style_list[id];
   274bc:	681b      	ldr	r3, [r3, #0]
   274be:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   274c2:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   274c4:	2000      	movs	r0, #0
}
   274c6:	4770      	bx	lr

000274c8 <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
   274c8:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
   274cc:	280b      	cmp	r0, #11
   274ce:	d904      	bls.n	274da <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
    else size += sizeof(const void *);
   274d0:	280e      	cmp	r0, #14
   274d2:	bf34      	ite	cc
   274d4:	2003      	movcc	r0, #3
   274d6:	2006      	movcs	r0, #6
   274d8:	4770      	bx	lr
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
   274da:	2004      	movs	r0, #4
    return size;
}
   274dc:	4770      	bx	lr

000274de <get_style_prop.isra.0>:
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
   274de:	b082      	sub	sp, #8
    prop_p[0] = style->map[idx];
   274e0:	5c43      	ldrb	r3, [r0, r1]
   274e2:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
   274e6:	4408      	add	r0, r1
   274e8:	7843      	ldrb	r3, [r0, #1]
   274ea:	f88d 3007 	strb.w	r3, [sp, #7]
}
   274ee:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   274f2:	b002      	add	sp, #8
   274f4:	4770      	bx	lr

000274f6 <get_style_prop_attr>:
{
   274f6:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
   274f8:	6800      	ldr	r0, [r0, #0]
   274fa:	f7ff fff0 	bl	274de <get_style_prop.isra.0>
}
   274fe:	f3c0 2007 	ubfx	r0, r0, #8, #8
   27502:	bd08      	pop	{r3, pc}

00027504 <get_property_index>:
{
   27504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(style->map == NULL) return -1;
   27508:	6803      	ldr	r3, [r0, #0]
{
   2750a:	4605      	mov	r5, r0
   2750c:	460a      	mov	r2, r1
    if(style->map == NULL) return -1;
   2750e:	b37b      	cbz	r3, 27570 <get_property_index+0x6c>
    int16_t id_guess = -1;
   27510:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   27514:	f3c2 2206 	ubfx	r2, r2, #8, #7
    uint8_t id_to_find = prop & 0xFF;
   27518:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
   2751a:	ea4f 2811 	mov.w	r8, r1, lsr #8
    int16_t weight = -1;
   2751e:	4626      	mov	r6, r4
    size_t i = 0;
   27520:	2100      	movs	r1, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   27522:	43d2      	mvns	r2, r2
    return get_style_prop(style, idx) & 0xFF;
   27524:	6828      	ldr	r0, [r5, #0]
   27526:	f7ff ffda 	bl	274de <get_style_prop.isra.0>
   2752a:	fa5f f980 	uxtb.w	r9, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   2752e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   27532:	d101      	bne.n	27538 <get_property_index+0x34>
    return id_guess;
   27534:	4620      	mov	r0, r4
   27536:	e00a      	b.n	2754e <get_property_index+0x4a>
        if(prop_id == id_to_find) {
   27538:	454f      	cmp	r7, r9
   2753a:	d114      	bne.n	27566 <get_property_index+0x62>
            attr_i = get_style_prop_attr(style, i);
   2753c:	4628      	mov	r0, r5
   2753e:	f7ff ffda 	bl	274f6 <get_style_prop_attr>
   27542:	4603      	mov	r3, r0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
   27544:	ea88 0000 	eor.w	r0, r8, r0
   27548:	0640      	lsls	r0, r0, #25
   2754a:	d102      	bne.n	27552 <get_property_index+0x4e>
                return i;
   2754c:	4608      	mov	r0, r1
}
   2754e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   27552:	ea02 0003 	and.w	r0, r2, r3
   27556:	0640      	lsls	r0, r0, #25
   27558:	d105      	bne.n	27566 <get_property_index+0x62>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
   2755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2755e:	42b3      	cmp	r3, r6
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
   27560:	bfc4      	itt	gt
   27562:	b21e      	sxthgt	r6, r3
                    id_guess = i;
   27564:	b20c      	sxthgt	r4, r1
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
   27566:	4648      	mov	r0, r9
   27568:	f7ff ffae 	bl	274c8 <get_prop_size>
   2756c:	4401      	add	r1, r0
   2756e:	e7d9      	b.n	27524 <get_property_index+0x20>
    if(style->map == NULL) return -1;
   27570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27574:	e7eb      	b.n	2754e <get_property_index+0x4a>

00027576 <_lv_memset_00>:
   27576:	460a      	mov	r2, r1
   27578:	2100      	movs	r1, #0
   2757a:	f004 b93b 	b.w	2b7f4 <memset>

0002757e <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2757e:	f004 b918 	b.w	2b7b2 <memcpy>

00027582 <style_resize.isra.0>:
static inline void style_resize(lv_style_t * style, size_t sz)
   27582:	b510      	push	{r4, lr}
   27584:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
   27586:	6800      	ldr	r0, [r0, #0]
   27588:	f7f6 f854 	bl	1d634 <lv_mem_realloc>
   2758c:	6020      	str	r0, [r4, #0]
}
   2758e:	bd10      	pop	{r4, pc}

00027590 <lv_style_init>:
    _lv_memset_00(style, sizeof(lv_style_t));
   27590:	2104      	movs	r1, #4
   27592:	f7ff bff0 	b.w	27576 <_lv_memset_00>

00027596 <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
   27596:	2108      	movs	r1, #8
   27598:	f7ff bfed 	b.w	27576 <_lv_memset_00>

0002759c <lv_style_reset>:
{
   2759c:	b510      	push	{r4, lr}
   2759e:	4604      	mov	r4, r0
    lv_mem_free(style->map);
   275a0:	6800      	ldr	r0, [r0, #0]
   275a2:	f7f6 f829 	bl	1d5f8 <lv_mem_free>
    style->map = NULL;
   275a6:	2300      	movs	r3, #0
   275a8:	6023      	str	r3, [r4, #0]
}
   275aa:	bd10      	pop	{r4, pc}

000275ac <_lv_style_get_mem_size>:
{
   275ac:	4602      	mov	r2, r0
    if(style->map == NULL) return 0;
   275ae:	6800      	ldr	r0, [r0, #0]
{
   275b0:	b508      	push	{r3, lr}
    if(style->map == NULL) return 0;
   275b2:	b140      	cbz	r0, 275c6 <_lv_style_get_mem_size+0x1a>
    size_t i = 0;
   275b4:	2100      	movs	r1, #0
    return get_style_prop(style, idx) & 0xFF;
   275b6:	6810      	ldr	r0, [r2, #0]
   275b8:	f7ff ff91 	bl	274de <get_style_prop.isra.0>
   275bc:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   275be:	28ff      	cmp	r0, #255	; 0xff
   275c0:	d102      	bne.n	275c8 <_lv_style_get_mem_size+0x1c>
    return i + sizeof(lv_style_property_t);
   275c2:	3102      	adds	r1, #2
   275c4:	b288      	uxth	r0, r1
}
   275c6:	bd08      	pop	{r3, pc}
    return idx + get_prop_size(prop_id);
   275c8:	f7ff ff7e 	bl	274c8 <get_prop_size>
   275cc:	4401      	add	r1, r0
   275ce:	e7f2      	b.n	275b6 <_lv_style_get_mem_size+0xa>

000275d0 <lv_style_copy>:
{
   275d0:	b570      	push	{r4, r5, r6, lr}
   275d2:	4606      	mov	r6, r0
    if(style_src == NULL) return;
   275d4:	460c      	mov	r4, r1
   275d6:	b171      	cbz	r1, 275f6 <lv_style_copy+0x26>
    if(style_src->map == NULL) return;
   275d8:	680b      	ldr	r3, [r1, #0]
   275da:	b163      	cbz	r3, 275f6 <lv_style_copy+0x26>
    uint16_t size = _lv_style_get_mem_size(style_src);
   275dc:	4608      	mov	r0, r1
   275de:	f7ff ffe5 	bl	275ac <_lv_style_get_mem_size>
   275e2:	4605      	mov	r5, r0
    style_dest->map = lv_mem_alloc(size);
   275e4:	f7f5 ffe0 	bl	1d5a8 <lv_mem_alloc>
   275e8:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
   275ea:	6821      	ldr	r1, [r4, #0]
   275ec:	462a      	mov	r2, r5
}
   275ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
   275f2:	f7ff bfc4 	b.w	2757e <_lv_memcpy>
}
   275f6:	bd70      	pop	{r4, r5, r6, pc}

000275f8 <_lv_style_set_int>:
{
   275f8:	b530      	push	{r4, r5, lr}
   275fa:	b085      	sub	sp, #20
   275fc:	4605      	mov	r5, r0
   275fe:	f8ad 1006 	strh.w	r1, [sp, #6]
   27602:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   27606:	f7ff ff7d 	bl	27504 <get_property_index>
    if(id >= 0) {
   2760a:	1e01      	subs	r1, r0, #0
   2760c:	db11      	blt.n	27632 <_lv_style_set_int+0x3a>
        attr_found = get_style_prop_attr(style, id);
   2760e:	4628      	mov	r0, r5
   27610:	f7ff ff71 	bl	274f6 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   27614:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   27618:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   2761c:	0643      	lsls	r3, r0, #25
   2761e:	d108      	bne.n	27632 <_lv_style_set_int+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
   27620:	682b      	ldr	r3, [r5, #0]
   27622:	1c88      	adds	r0, r1, #2
   27624:	2202      	movs	r2, #2
   27626:	a901      	add	r1, sp, #4
   27628:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2762a:	f7ff ffa8 	bl	2757e <_lv_memcpy>
}
   2762e:	b005      	add	sp, #20
   27630:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   27632:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   27634:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   27636:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   2763a:	f7ff ffb7 	bl	275ac <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   2763e:	1e04      	subs	r4, r0, #0
   27640:	bf08      	it	eq
   27642:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
   27644:	3404      	adds	r4, #4
    style_resize(style, size);
   27646:	b2a4      	uxth	r4, r4
   27648:	4621      	mov	r1, r4
   2764a:	4628      	mov	r0, r5
   2764c:	f7ff ff99 	bl	27582 <style_resize.isra.0>
    if(style == NULL) return;
   27650:	2d00      	cmp	r5, #0
   27652:	d0ec      	beq.n	2762e <_lv_style_set_int+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27654:	6828      	ldr	r0, [r5, #0]
   27656:	1fa3      	subs	r3, r4, #6
   27658:	2202      	movs	r2, #2
   2765a:	f10d 0106 	add.w	r1, sp, #6
   2765e:	4418      	add	r0, r3
   27660:	f7ff ff8d 	bl	2757e <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   27664:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27666:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   27668:	2202      	movs	r2, #2
   2766a:	a901      	add	r1, sp, #4
   2766c:	4418      	add	r0, r3
   2766e:	f7ff ff86 	bl	2757e <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   27672:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   27674:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   27676:	2202      	movs	r2, #2
   27678:	f10d 010e 	add.w	r1, sp, #14
   2767c:	4420      	add	r0, r4
   2767e:	e7d4      	b.n	2762a <_lv_style_set_int+0x32>

00027680 <_lv_style_set_color>:
{
   27680:	b530      	push	{r4, r5, lr}
   27682:	b085      	sub	sp, #20
   27684:	4605      	mov	r5, r0
   27686:	f8ad 1006 	strh.w	r1, [sp, #6]
   2768a:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   2768e:	f7ff ff39 	bl	27504 <get_property_index>
    if(id >= 0) {
   27692:	1e01      	subs	r1, r0, #0
   27694:	db11      	blt.n	276ba <_lv_style_set_color+0x3a>
        attr_found = get_style_prop_attr(style, id);
   27696:	4628      	mov	r0, r5
   27698:	f7ff ff2d 	bl	274f6 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   2769c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   276a0:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   276a4:	0643      	lsls	r3, r0, #25
   276a6:	d108      	bne.n	276ba <_lv_style_set_color+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
   276a8:	682b      	ldr	r3, [r5, #0]
   276aa:	1c88      	adds	r0, r1, #2
   276ac:	2202      	movs	r2, #2
   276ae:	a901      	add	r1, sp, #4
   276b0:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   276b2:	f7ff ff64 	bl	2757e <_lv_memcpy>
}
   276b6:	b005      	add	sp, #20
   276b8:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   276ba:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   276bc:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   276be:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   276c2:	f7ff ff73 	bl	275ac <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   276c6:	1e04      	subs	r4, r0, #0
   276c8:	bf08      	it	eq
   276ca:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
   276cc:	3404      	adds	r4, #4
    style_resize(style, size);
   276ce:	b2a4      	uxth	r4, r4
   276d0:	4621      	mov	r1, r4
   276d2:	4628      	mov	r0, r5
   276d4:	f7ff ff55 	bl	27582 <style_resize.isra.0>
    if(style == NULL) return;
   276d8:	2d00      	cmp	r5, #0
   276da:	d0ec      	beq.n	276b6 <_lv_style_set_color+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   276dc:	6828      	ldr	r0, [r5, #0]
   276de:	1fa3      	subs	r3, r4, #6
   276e0:	2202      	movs	r2, #2
   276e2:	f10d 0106 	add.w	r1, sp, #6
   276e6:	4418      	add	r0, r3
   276e8:	f7ff ff49 	bl	2757e <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   276ec:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   276ee:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   276f0:	2202      	movs	r2, #2
   276f2:	a901      	add	r1, sp, #4
   276f4:	4418      	add	r0, r3
   276f6:	f7ff ff42 	bl	2757e <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   276fa:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   276fc:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   276fe:	2202      	movs	r2, #2
   27700:	f10d 010e 	add.w	r1, sp, #14
   27704:	4420      	add	r0, r4
   27706:	e7d4      	b.n	276b2 <_lv_style_set_color+0x32>

00027708 <_lv_style_set_opa>:
{
   27708:	b530      	push	{r4, r5, lr}
   2770a:	b085      	sub	sp, #20
   2770c:	4605      	mov	r5, r0
   2770e:	f8ad 1006 	strh.w	r1, [sp, #6]
   27712:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
   27716:	f7ff fef5 	bl	27504 <get_property_index>
    if(id >= 0) {
   2771a:	1e01      	subs	r1, r0, #0
   2771c:	db12      	blt.n	27744 <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
   2771e:	4628      	mov	r0, r5
   27720:	f7ff fee9 	bl	274f6 <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   27724:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   27728:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   2772c:	0643      	lsls	r3, r0, #25
   2772e:	d109      	bne.n	27744 <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
   27730:	682b      	ldr	r3, [r5, #0]
   27732:	1c88      	adds	r0, r1, #2
   27734:	2201      	movs	r2, #1
   27736:	f10d 0105 	add.w	r1, sp, #5
   2773a:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2773c:	f7ff ff1f 	bl	2757e <_lv_memcpy>
}
   27740:	b005      	add	sp, #20
   27742:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   27744:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   27746:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   27748:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   2774c:	f7ff ff2e 	bl	275ac <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   27750:	1e04      	subs	r4, r0, #0
   27752:	bf08      	it	eq
   27754:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
   27756:	3403      	adds	r4, #3
    style_resize(style, size);
   27758:	b2a4      	uxth	r4, r4
   2775a:	4621      	mov	r1, r4
   2775c:	4628      	mov	r0, r5
   2775e:	f7ff ff10 	bl	27582 <style_resize.isra.0>
    if(style == NULL) return;
   27762:	2d00      	cmp	r5, #0
   27764:	d0ec      	beq.n	27740 <_lv_style_set_opa+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27766:	6828      	ldr	r0, [r5, #0]
   27768:	1f63      	subs	r3, r4, #5
   2776a:	2202      	movs	r2, #2
   2776c:	f10d 0106 	add.w	r1, sp, #6
   27770:	4418      	add	r0, r3
   27772:	f7ff ff04 	bl	2757e <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   27776:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27778:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   2777a:	2201      	movs	r2, #1
   2777c:	f10d 0105 	add.w	r1, sp, #5
   27780:	4418      	add	r0, r3
   27782:	f7ff fefc 	bl	2757e <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   27786:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   27788:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2778a:	2202      	movs	r2, #2
   2778c:	f10d 010e 	add.w	r1, sp, #14
   27790:	4420      	add	r0, r4
   27792:	e7d3      	b.n	2773c <_lv_style_set_opa+0x34>

00027794 <_lv_style_get_int>:
{
   27794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27796:	4604      	mov	r4, r0
   27798:	460e      	mov	r6, r1
   2779a:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   2779c:	b910      	cbnz	r0, 277a4 <_lv_style_get_int+0x10>
   2779e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   277a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   277a4:	6803      	ldr	r3, [r0, #0]
   277a6:	2b00      	cmp	r3, #0
   277a8:	d0f9      	beq.n	2779e <_lv_style_get_int+0xa>
    int32_t id = get_property_index(style, prop);
   277aa:	f7ff feab 	bl	27504 <get_property_index>
    if(id < 0) {
   277ae:	1e05      	subs	r5, r0, #0
   277b0:	dbf5      	blt.n	2779e <_lv_style_get_int+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
   277b2:	6821      	ldr	r1, [r4, #0]
   277b4:	1cab      	adds	r3, r5, #2
   277b6:	4419      	add	r1, r3
   277b8:	2202      	movs	r2, #2
   277ba:	4638      	mov	r0, r7
   277bc:	f7ff fedf 	bl	2757e <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   277c0:	4629      	mov	r1, r5
   277c2:	4620      	mov	r0, r4
   277c4:	f7ff fe97 	bl	274f6 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   277c8:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   277cc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   277d0:	e7e7      	b.n	277a2 <_lv_style_get_int+0xe>

000277d2 <_lv_style_get_opa>:
{
   277d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277d4:	4604      	mov	r4, r0
   277d6:	460e      	mov	r6, r1
   277d8:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   277da:	b910      	cbnz	r0, 277e2 <_lv_style_get_opa+0x10>
   277dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   277e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   277e2:	6803      	ldr	r3, [r0, #0]
   277e4:	2b00      	cmp	r3, #0
   277e6:	d0f9      	beq.n	277dc <_lv_style_get_opa+0xa>
    int32_t id = get_property_index(style, prop);
   277e8:	f7ff fe8c 	bl	27504 <get_property_index>
    if(id < 0) {
   277ec:	1e05      	subs	r5, r0, #0
   277ee:	dbf5      	blt.n	277dc <_lv_style_get_opa+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
   277f0:	6821      	ldr	r1, [r4, #0]
   277f2:	1cab      	adds	r3, r5, #2
   277f4:	4419      	add	r1, r3
   277f6:	2201      	movs	r2, #1
   277f8:	4638      	mov	r0, r7
   277fa:	f7ff fec0 	bl	2757e <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   277fe:	4629      	mov	r1, r5
   27800:	4620      	mov	r0, r4
   27802:	f7ff fe78 	bl	274f6 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   27806:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   2780a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   2780e:	e7e7      	b.n	277e0 <_lv_style_get_opa+0xe>

00027810 <_lv_style_get_ptr>:
{
   27810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27812:	4604      	mov	r4, r0
   27814:	460e      	mov	r6, r1
   27816:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   27818:	b910      	cbnz	r0, 27820 <_lv_style_get_ptr+0x10>
   2781a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2781e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   27820:	6803      	ldr	r3, [r0, #0]
   27822:	2b00      	cmp	r3, #0
   27824:	d0f9      	beq.n	2781a <_lv_style_get_ptr+0xa>
    int32_t id = get_property_index(style, prop);
   27826:	f7ff fe6d 	bl	27504 <get_property_index>
    if(id < 0) {
   2782a:	1e05      	subs	r5, r0, #0
   2782c:	dbf5      	blt.n	2781a <_lv_style_get_ptr+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
   2782e:	6821      	ldr	r1, [r4, #0]
   27830:	1cab      	adds	r3, r5, #2
   27832:	4419      	add	r1, r3
   27834:	2204      	movs	r2, #4
   27836:	4638      	mov	r0, r7
   27838:	f7ff fea1 	bl	2757e <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   2783c:	4629      	mov	r1, r5
   2783e:	4620      	mov	r0, r4
   27840:	f7ff fe59 	bl	274f6 <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   27844:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   27848:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   2784c:	e7e7      	b.n	2781e <_lv_style_get_ptr+0xe>

0002784e <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
   2784e:	7902      	ldrb	r2, [r0, #4]
{
   27850:	4603      	mov	r3, r0
    if(!list->has_local) return NULL;
   27852:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   27856:	d005      	beq.n	27864 <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
   27858:	0612      	lsls	r2, r2, #24
   2785a:	681b      	ldr	r3, [r3, #0]
   2785c:	d501      	bpl.n	27862 <lv_style_list_get_local_style+0x14>
   2785e:	6858      	ldr	r0, [r3, #4]
   27860:	4770      	bx	lr
    else return list->style_list[0];
   27862:	6818      	ldr	r0, [r3, #0]
}
   27864:	4770      	bx	lr

00027866 <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
   27866:	f990 3004 	ldrsb.w	r3, [r0, #4]
   2786a:	2b00      	cmp	r3, #0
    return list->style_list[0];
   2786c:	bfba      	itte	lt
   2786e:	6803      	ldrlt	r3, [r0, #0]
   27870:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
   27872:	2000      	movge	r0, #0
}
   27874:	4770      	bx	lr

00027876 <_lv_style_list_reset>:
{
   27876:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
   27878:	4604      	mov	r4, r0
   2787a:	b328      	cbz	r0, 278c8 <_lv_style_list_reset+0x52>
    if(list->has_local) {
   2787c:	7903      	ldrb	r3, [r0, #4]
   2787e:	065a      	lsls	r2, r3, #25
   27880:	d508      	bpl.n	27894 <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
   27882:	f7ff ffe4 	bl	2784e <lv_style_list_get_local_style>
        if(local) {
   27886:	4605      	mov	r5, r0
   27888:	b120      	cbz	r0, 27894 <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
   2788a:	f7ff fe87 	bl	2759c <lv_style_reset>
            lv_mem_free(local);
   2788e:	4628      	mov	r0, r5
   27890:	f7f5 feb2 	bl	1d5f8 <lv_mem_free>
    if(list->has_trans) {
   27894:	f994 3004 	ldrsb.w	r3, [r4, #4]
   27898:	2b00      	cmp	r3, #0
   2789a:	da09      	bge.n	278b0 <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
   2789c:	4620      	mov	r0, r4
   2789e:	f7ff ffe2 	bl	27866 <_lv_style_list_get_transition_style>
        if(trans) {
   278a2:	4605      	mov	r5, r0
   278a4:	b120      	cbz	r0, 278b0 <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
   278a6:	f7ff fe79 	bl	2759c <lv_style_reset>
            lv_mem_free(trans);
   278aa:	4628      	mov	r0, r5
   278ac:	f7f5 fea4 	bl	1d5f8 <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
   278b0:	7923      	ldrb	r3, [r4, #4]
   278b2:	069b      	lsls	r3, r3, #26
   278b4:	d002      	beq.n	278bc <_lv_style_list_reset+0x46>
   278b6:	6820      	ldr	r0, [r4, #0]
   278b8:	f7f5 fe9e 	bl	1d5f8 <lv_mem_free>
    list->style_list = NULL;
   278bc:	2300      	movs	r3, #0
   278be:	6023      	str	r3, [r4, #0]
    list->style_cnt = 0;
   278c0:	88a3      	ldrh	r3, [r4, #4]
   278c2:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   278c6:	80a3      	strh	r3, [r4, #4]
}
   278c8:	bd38      	pop	{r3, r4, r5, pc}

000278ca <lv_style_list_copy>:
{
   278ca:	b538      	push	{r3, r4, r5, lr}
   278cc:	460c      	mov	r4, r1
   278ce:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
   278d0:	f7ff ffd1 	bl	27876 <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
   278d4:	6823      	ldr	r3, [r4, #0]
   278d6:	b1f3      	cbz	r3, 27916 <lv_style_list_copy+0x4c>
    if(list_src->has_local == 0) {
   278d8:	7922      	ldrb	r2, [r4, #4]
   278da:	f994 3004 	ldrsb.w	r3, [r4, #4]
   278de:	f002 003f 	and.w	r0, r2, #63	; 0x3f
   278e2:	0652      	lsls	r2, r2, #25
   278e4:	d429      	bmi.n	2793a <lv_style_list_copy+0x70>
        if(list_src->has_trans) {
   278e6:	2b00      	cmp	r3, #0
   278e8:	da16      	bge.n	27918 <lv_style_list_copy+0x4e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   278ea:	3801      	subs	r0, #1
   278ec:	0080      	lsls	r0, r0, #2
   278ee:	f7f5 fe5b 	bl	1d5a8 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   278f2:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   278f4:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   278f6:	6821      	ldr	r1, [r4, #0]
   278f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   278fc:	3a01      	subs	r2, #1
   278fe:	0092      	lsls	r2, r2, #2
   27900:	3104      	adds	r1, #4
   27902:	f7ff fe3c 	bl	2757e <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   27906:	7923      	ldrb	r3, [r4, #4]
   27908:	792a      	ldrb	r2, [r5, #4]
   2790a:	f3c3 0305 	ubfx	r3, r3, #0, #6
   2790e:	3b01      	subs	r3, #1
   27910:	f363 0205 	bfi	r2, r3, #0, #6
   27914:	712a      	strb	r2, [r5, #4]
}
   27916:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   27918:	0080      	lsls	r0, r0, #2
   2791a:	f7f5 fe45 	bl	1d5a8 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   2791e:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   27920:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   27922:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   27926:	0092      	lsls	r2, r2, #2
   27928:	6821      	ldr	r1, [r4, #0]
   2792a:	f7ff fe28 	bl	2757e <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
   2792e:	7922      	ldrb	r2, [r4, #4]
   27930:	792b      	ldrb	r3, [r5, #4]
   27932:	f362 0305 	bfi	r3, r2, #0, #6
   27936:	712b      	strb	r3, [r5, #4]
   27938:	e7ed      	b.n	27916 <lv_style_list_copy+0x4c>
        if(list_src->has_trans) {
   2793a:	2b00      	cmp	r3, #0
   2793c:	da22      	bge.n	27984 <lv_style_list_copy+0xba>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   2793e:	3802      	subs	r0, #2
   27940:	0080      	lsls	r0, r0, #2
   27942:	f7f5 fe31 	bl	1d5a8 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   27946:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   27948:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   2794a:	6821      	ldr	r1, [r4, #0]
   2794c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   27950:	3a02      	subs	r2, #2
   27952:	0092      	lsls	r2, r2, #2
   27954:	3108      	adds	r1, #8
   27956:	f7ff fe12 	bl	2757e <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
   2795a:	7923      	ldrb	r3, [r4, #4]
   2795c:	f3c3 0305 	ubfx	r3, r3, #0, #6
   27960:	3b02      	subs	r3, #2
            list_dest->style_cnt = list_src->style_cnt - 1;
   27962:	792a      	ldrb	r2, [r5, #4]
   27964:	f363 0205 	bfi	r2, r3, #0, #6
   27968:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
   2796a:	4628      	mov	r0, r5
   2796c:	f7f3 fdf8 	bl	1b560 <get_alloc_local_style>
   27970:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   27972:	4620      	mov	r0, r4
   27974:	f7f3 fdf4 	bl	1b560 <get_alloc_local_style>
   27978:	4601      	mov	r1, r0
   2797a:	4628      	mov	r0, r5
}
   2797c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   27980:	f7ff be26 	b.w	275d0 <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   27984:	3801      	subs	r0, #1
   27986:	0080      	lsls	r0, r0, #2
   27988:	f7f5 fe0e 	bl	1d5a8 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   2798c:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   2798e:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   27990:	6821      	ldr	r1, [r4, #0]
   27992:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   27996:	3a01      	subs	r2, #1
   27998:	0092      	lsls	r2, r2, #2
   2799a:	3104      	adds	r1, #4
   2799c:	f7ff fdef 	bl	2757e <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   279a0:	7923      	ldrb	r3, [r4, #4]
   279a2:	f3c3 0305 	ubfx	r3, r3, #0, #6
   279a6:	3b01      	subs	r3, #1
   279a8:	e7db      	b.n	27962 <lv_style_list_copy+0x98>

000279aa <_lv_style_list_get_int>:
{
   279aa:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   279ae:	460f      	mov	r7, r1
   279b0:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   279b2:	4605      	mov	r5, r0
   279b4:	b318      	cbz	r0, 279fe <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   279b6:	6800      	ldr	r0, [r0, #0]
   279b8:	b308      	cbz	r0, 279fe <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
   279ba:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   279bc:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_style_int_t value_act = 0;
   279c0:	f8ad 6006 	strh.w	r6, [sp, #6]
    int16_t weight = -1;
   279c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   279c8:	792b      	ldrb	r3, [r5, #4]
   279ca:	fa0f f986 	sxth.w	r9, r6
   279ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   279d2:	4599      	cmp	r9, r3
   279d4:	db03      	blt.n	279de <_lv_style_list_get_int+0x34>
    if(weight >= 0) return LV_RES_OK;
   279d6:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   279d8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   279dc:	e00f      	b.n	279fe <_lv_style_list_get_int+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   279de:	b2f1      	uxtb	r1, r6
   279e0:	4628      	mov	r0, r5
   279e2:	f7ff fd5b 	bl	2749c <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
   279e6:	f10d 0206 	add.w	r2, sp, #6
   279ea:	4639      	mov	r1, r7
   279ec:	f7ff fed2 	bl	27794 <_lv_style_get_int>
        if(weight_act == weight_goal) {
   279f0:	4582      	cmp	sl, r0
   279f2:	d107      	bne.n	27a04 <_lv_style_list_get_int+0x5a>
            *res = value_act;
   279f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   279f8:	f8a8 3000 	strh.w	r3, [r8]
            return LV_RES_OK;
   279fc:	2001      	movs	r0, #1
}
   279fe:	b002      	add	sp, #8
   27a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27a04:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27a08:	2b00      	cmp	r3, #0
   27a0a:	da07      	bge.n	27a1c <_lv_style_list_get_int+0x72>
   27a0c:	2800      	cmp	r0, #0
   27a0e:	db05      	blt.n	27a1c <_lv_style_list_get_int+0x72>
   27a10:	f1b9 0f00 	cmp.w	r9, #0
   27a14:	d102      	bne.n	27a1c <_lv_style_list_get_int+0x72>
   27a16:	796b      	ldrb	r3, [r5, #5]
   27a18:	07db      	lsls	r3, r3, #31
   27a1a:	d5eb      	bpl.n	279f4 <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
   27a1c:	4284      	cmp	r4, r0
            *res = value_act;
   27a1e:	bfbe      	ittt	lt
   27a20:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
   27a24:	f8a8 3000 	strhlt.w	r3, [r8]
   27a28:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27a2a:	3601      	adds	r6, #1
   27a2c:	e7cc      	b.n	279c8 <_lv_style_list_get_int+0x1e>

00027a2e <_lv_style_list_get_color>:
{
   27a2e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27a32:	460f      	mov	r7, r1
   27a34:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   27a36:	4605      	mov	r5, r0
   27a38:	b310      	cbz	r0, 27a80 <_lv_style_list_get_color+0x52>
    if(list->style_list == NULL) return LV_RES_INV;
   27a3a:	6800      	ldr	r0, [r0, #0]
   27a3c:	b300      	cbz	r0, 27a80 <_lv_style_list_get_color+0x52>
    value_act.full = 0;
   27a3e:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   27a40:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    value_act.full = 0;
   27a44:	f8ad 6004 	strh.w	r6, [sp, #4]
    int16_t weight = -1;
   27a48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   27a4c:	792b      	ldrb	r3, [r5, #4]
   27a4e:	fa0f f986 	sxth.w	r9, r6
   27a52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27a56:	4599      	cmp	r9, r3
   27a58:	db03      	blt.n	27a62 <_lv_style_list_get_color+0x34>
    if(weight >= 0)  return LV_RES_OK;
   27a5a:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27a5c:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27a60:	e00e      	b.n	27a80 <_lv_style_list_get_color+0x52>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27a62:	b2f1      	uxtb	r1, r6
   27a64:	4628      	mov	r0, r5
   27a66:	f7ff fd19 	bl	2749c <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
   27a6a:	aa01      	add	r2, sp, #4
   27a6c:	4639      	mov	r1, r7
   27a6e:	f7ff fe91 	bl	27794 <_lv_style_get_int>
        if(weight_act == weight_goal) {
   27a72:	4582      	cmp	sl, r0
   27a74:	d107      	bne.n	27a86 <_lv_style_list_get_color+0x58>
            *res = value_act;
   27a76:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   27a7a:	f8a8 3000 	strh.w	r3, [r8]
            return LV_RES_OK;
   27a7e:	2001      	movs	r0, #1
}
   27a80:	b002      	add	sp, #8
   27a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27a86:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27a8a:	2b00      	cmp	r3, #0
   27a8c:	da07      	bge.n	27a9e <_lv_style_list_get_color+0x70>
   27a8e:	2800      	cmp	r0, #0
   27a90:	db05      	blt.n	27a9e <_lv_style_list_get_color+0x70>
   27a92:	f1b9 0f00 	cmp.w	r9, #0
   27a96:	d102      	bne.n	27a9e <_lv_style_list_get_color+0x70>
   27a98:	796b      	ldrb	r3, [r5, #5]
   27a9a:	07db      	lsls	r3, r3, #31
   27a9c:	d5eb      	bpl.n	27a76 <_lv_style_list_get_color+0x48>
        else if(weight_act > weight) {
   27a9e:	4284      	cmp	r4, r0
            *res = value_act;
   27aa0:	bfbe      	ittt	lt
   27aa2:	f8bd 3004 	ldrhlt.w	r3, [sp, #4]
   27aa6:	f8a8 3000 	strhlt.w	r3, [r8]
   27aaa:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27aac:	3601      	adds	r6, #1
   27aae:	e7cd      	b.n	27a4c <_lv_style_list_get_color+0x1e>

00027ab0 <_lv_style_list_get_opa>:
{
   27ab0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27ab4:	460f      	mov	r7, r1
   27ab6:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   27ab8:	4605      	mov	r5, r0
   27aba:	b318      	cbz	r0, 27b04 <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   27abc:	6800      	ldr	r0, [r0, #0]
   27abe:	b308      	cbz	r0, 27b04 <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
   27ac0:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   27ac2:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
   27ac6:	f88d 6007 	strb.w	r6, [sp, #7]
    int16_t weight = -1;
   27aca:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   27ace:	792b      	ldrb	r3, [r5, #4]
   27ad0:	fa0f f986 	sxth.w	r9, r6
   27ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27ad8:	4599      	cmp	r9, r3
   27ada:	db03      	blt.n	27ae4 <_lv_style_list_get_opa+0x34>
    if(weight >= 0)  return LV_RES_OK;
   27adc:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27ade:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27ae2:	e00f      	b.n	27b04 <_lv_style_list_get_opa+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27ae4:	b2f1      	uxtb	r1, r6
   27ae6:	4628      	mov	r0, r5
   27ae8:	f7ff fcd8 	bl	2749c <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
   27aec:	f10d 0207 	add.w	r2, sp, #7
   27af0:	4639      	mov	r1, r7
   27af2:	f7ff fe6e 	bl	277d2 <_lv_style_get_opa>
        if(weight_act == weight_goal) {
   27af6:	4582      	cmp	sl, r0
   27af8:	d107      	bne.n	27b0a <_lv_style_list_get_opa+0x5a>
            *res = value_act;
   27afa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27afe:	f888 3000 	strb.w	r3, [r8]
            return LV_RES_OK;
   27b02:	2001      	movs	r0, #1
}
   27b04:	b002      	add	sp, #8
   27b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27b0a:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27b0e:	2b00      	cmp	r3, #0
   27b10:	da07      	bge.n	27b22 <_lv_style_list_get_opa+0x72>
   27b12:	2800      	cmp	r0, #0
   27b14:	db05      	blt.n	27b22 <_lv_style_list_get_opa+0x72>
   27b16:	f1b9 0f00 	cmp.w	r9, #0
   27b1a:	d102      	bne.n	27b22 <_lv_style_list_get_opa+0x72>
   27b1c:	796b      	ldrb	r3, [r5, #5]
   27b1e:	07db      	lsls	r3, r3, #31
   27b20:	d5eb      	bpl.n	27afa <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
   27b22:	4284      	cmp	r4, r0
            *res = value_act;
   27b24:	bfbe      	ittt	lt
   27b26:	f89d 3007 	ldrblt.w	r3, [sp, #7]
   27b2a:	f888 3000 	strblt.w	r3, [r8]
   27b2e:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27b30:	3601      	adds	r6, #1
   27b32:	e7cc      	b.n	27ace <_lv_style_list_get_opa+0x1e>

00027b34 <_lv_style_list_get_ptr>:
{
   27b34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27b38:	460f      	mov	r7, r1
   27b3a:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   27b3c:	4605      	mov	r5, r0
   27b3e:	b1f8      	cbz	r0, 27b80 <_lv_style_list_get_ptr+0x4c>
    if(list->style_list == NULL) return LV_RES_INV;
   27b40:	6800      	ldr	r0, [r0, #0]
   27b42:	b1e8      	cbz	r0, 27b80 <_lv_style_list_get_ptr+0x4c>
    int16_t weight_goal = attr;
   27b44:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
   27b48:	2600      	movs	r6, #0
    int16_t weight = -1;
   27b4a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   27b4e:	792b      	ldrb	r3, [r5, #4]
   27b50:	fa0f f986 	sxth.w	r9, r6
   27b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27b58:	4599      	cmp	r9, r3
   27b5a:	db03      	blt.n	27b64 <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
   27b5c:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27b5e:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27b62:	e00d      	b.n	27b80 <_lv_style_list_get_ptr+0x4c>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27b64:	b2f1      	uxtb	r1, r6
   27b66:	4628      	mov	r0, r5
   27b68:	f7ff fc98 	bl	2749c <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
   27b6c:	aa01      	add	r2, sp, #4
   27b6e:	4639      	mov	r1, r7
   27b70:	f7ff fe4e 	bl	27810 <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
   27b74:	4582      	cmp	sl, r0
   27b76:	d106      	bne.n	27b86 <_lv_style_list_get_ptr+0x52>
            *res = value_act;
   27b78:	9b01      	ldr	r3, [sp, #4]
   27b7a:	f8c8 3000 	str.w	r3, [r8]
            return LV_RES_OK;
   27b7e:	2001      	movs	r0, #1
}
   27b80:	b002      	add	sp, #8
   27b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27b86:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27b8a:	2b00      	cmp	r3, #0
   27b8c:	da07      	bge.n	27b9e <_lv_style_list_get_ptr+0x6a>
   27b8e:	2800      	cmp	r0, #0
   27b90:	db05      	blt.n	27b9e <_lv_style_list_get_ptr+0x6a>
   27b92:	f1b9 0f00 	cmp.w	r9, #0
   27b96:	d102      	bne.n	27b9e <_lv_style_list_get_ptr+0x6a>
   27b98:	796b      	ldrb	r3, [r5, #5]
   27b9a:	07db      	lsls	r3, r3, #31
   27b9c:	d5ec      	bpl.n	27b78 <_lv_style_list_get_ptr+0x44>
        else if(weight_act > weight) {
   27b9e:	4284      	cmp	r4, r0
            *res = value_act;
   27ba0:	bfbe      	ittt	lt
   27ba2:	9b01      	ldrlt	r3, [sp, #4]
   27ba4:	f8c8 3000 	strlt.w	r3, [r8]
   27ba8:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27baa:	3601      	adds	r6, #1
   27bac:	e7cf      	b.n	27b4e <_lv_style_list_get_ptr+0x1a>

00027bae <lv_color_mix>:
{
   27bae:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27bb0:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   27bb4:	f3c1 1445 	ubfx	r4, r1, #5, #6
   27bb8:	4374      	muls	r4, r6
   27bba:	f3c0 1345 	ubfx	r3, r0, #5, #6
   27bbe:	fb03 4302 	mla	r3, r3, r2, r4
   27bc2:	f248 0481 	movw	r4, #32897	; 0x8081
   27bc6:	4363      	muls	r3, r4
   27bc8:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   27bcc:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27bd0:	f001 071f 	and.w	r7, r1, #31
    return ret;
   27bd4:	f3c3 55c5 	ubfx	r5, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27bd8:	4377      	muls	r7, r6
   27bda:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27bde:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27be2:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27be6:	434e      	muls	r6, r1
   27be8:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27bec:	4363      	muls	r3, r4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27bee:	fb00 6002 	mla	r0, r0, r2, r6
   27bf2:	4360      	muls	r0, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27bf4:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   27bf8:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27bfc:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
    return ret;
   27c00:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27c04:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
    return ret;
   27c08:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27c0c:	0dc0      	lsrs	r0, r0, #23
}
   27c0e:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
   27c12:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027c14 <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
   27c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27c18:	b08d      	sub	sp, #52	; 0x34
   27c1a:	461e      	mov	r6, r3
   27c1c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
   27c20:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   27c24:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
   27c28:	9308      	str	r3, [sp, #32]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
   27c2a:	2d01      	cmp	r5, #1
{
   27c2c:	4681      	mov	r9, r0
   27c2e:	468a      	mov	sl, r1
   27c30:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
   27c32:	f240 80b1 	bls.w	27d98 <_lv_blend_fill+0x184>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   27c36:	2b00      	cmp	r3, #0
   27c38:	f000 80ae 	beq.w	27d98 <_lv_blend_fill+0x184>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   27c3c:	f7f3 f9c0 	bl	1afc0 <_lv_refr_get_disp_refreshing>
   27c40:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   27c42:	f002 f9b7 	bl	29fb4 <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
   27c46:	6883      	ldr	r3, [r0, #8]
   27c48:	9305      	str	r3, [sp, #20]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   27c4a:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   27c4e:	4683      	mov	fp, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   27c50:	b10b      	cbz	r3, 27c56 <_lv_blend_fill+0x42>
   27c52:	4640      	mov	r0, r8
   27c54:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
   27c56:	4652      	mov	r2, sl
   27c58:	4649      	mov	r1, r9
   27c5a:	a80a      	add	r0, sp, #40	; 0x28
   27c5c:	f002 fa15 	bl	2a08a <_lv_area_intersect>
    if(!is_common) return;
   27c60:	2800      	cmp	r0, #0
   27c62:	f000 8099 	beq.w	27d98 <_lv_blend_fill+0x184>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
   27c66:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   27c6a:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    draw_area.y1 -= disp_area->y1;
   27c6e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
   27c72:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    draw_area.x1 -= disp_area->x1;
   27c76:	1a53      	subs	r3, r2, r1
   27c78:	fa0f fe83 	sxth.w	lr, r3
    draw_area.y1 -= disp_area->y1;
   27c7c:	ebaa 0300 	sub.w	r3, sl, r0
   27c80:	b21b      	sxth	r3, r3
   27c82:	9306      	str	r3, [sp, #24]
   27c84:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
   27c88:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
   27c8c:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
    draw_area.x2 -= disp_area->x1;
   27c90:	1a59      	subs	r1, r3, r1
   27c92:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
   27c96:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
   27c9a:	9107      	str	r1, [sp, #28]
   27c9c:	1a08      	subs	r0, r1, r0
   27c9e:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
#else
    if(mask)
   27ca2:	2e00      	cmp	r6, #0
   27ca4:	d14a      	bne.n	27d3c <_lv_blend_fill+0x128>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
   27ca6:	f8d8 0014 	ldr.w	r0, [r8, #20]
   27caa:	2800      	cmp	r0, #0
   27cac:	d161      	bne.n	27d72 <_lv_blend_fill+0x15e>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
   27cae:	2f00      	cmp	r7, #0
   27cb0:	d172      	bne.n	27d98 <_lv_blend_fill+0x184>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   27cb2:	f1c2 0201 	rsb	r2, r2, #1
   27cb6:	4413      	add	r3, r2
   27cb8:	f8bb 0014 	ldrh.w	r0, [fp, #20]
   27cbc:	f8bb c010 	ldrh.w	ip, [fp, #16]

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   27cc0:	9a05      	ldr	r2, [sp, #20]
   27cc2:	fa0f f883 	sxth.w	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   27cc6:	9b07      	ldr	r3, [sp, #28]
   27cc8:	f1ca 0a01 	rsb	sl, sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   27ccc:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   27cce:	4453      	add	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   27cd0:	eba0 000c 	sub.w	r0, r0, ip
   27cd4:	f8dd a018 	ldr.w	sl, [sp, #24]
   27cd8:	b200      	sxth	r0, r0
    int32_t draw_area_h = lv_area_get_height(draw_area);
   27cda:	b21b      	sxth	r3, r3
   27cdc:	9307      	str	r3, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   27cde:	fb00 e30a 	mla	r3, r0, sl, lr
   27ce2:	eb02 0943 	add.w	r9, r2, r3, lsl #1

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   27ce6:	0042      	lsls	r2, r0, #1
   27ce8:	9206      	str	r2, [sp, #24]
   27cea:	9a08      	ldr	r2, [sp, #32]
   27cec:	2a01      	cmp	r2, #1
   27cee:	f040 80ef 	bne.w	27ed0 <_lv_blend_fill+0x2bc>
        if(opa > LV_OPA_MAX) {
   27cf2:	2dfd      	cmp	r5, #253	; 0xfd
   27cf4:	f200 80a6 	bhi.w	27e44 <_lv_blend_fill+0x230>

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   27cf8:	462a      	mov	r2, r5
   27cfa:	4620      	mov	r0, r4
   27cfc:	4639      	mov	r1, r7
   27cfe:	f7ff ff56 	bl	27bae <lv_color_mix>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   27d02:	f3c4 22c4 	ubfx	r2, r4, #11, #5
   27d06:	436a      	muls	r2, r5
   27d08:	9205      	str	r2, [sp, #20]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   27d0a:	f3c4 1245 	ubfx	r2, r4, #5, #6
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   27d0e:	f004 041f 	and.w	r4, r4, #31
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   27d12:	436a      	muls	r2, r5
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   27d14:	fb04 fb05 	mul.w	fp, r4, r5

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
            lv_opa_t opa_inv = 255 - opa;
   27d18:	43ed      	mvns	r5, r5
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   27d1a:	f000 031f 	and.w	r3, r0, #31
   27d1e:	f3c0 1645 	ubfx	r6, r0, #5, #6
            lv_color_t last_dest_color = LV_COLOR_BLACK;
   27d22:	46ba      	mov	sl, r7
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   27d24:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   27d28:	9208      	str	r2, [sp, #32]
            lv_opa_t opa_inv = 255 - opa;
   27d2a:	b2ed      	uxtb	r5, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27d2c:	f248 0c81 	movw	ip, #32897	; 0x8081

            for(y = 0; y < draw_area_h; y++) {
   27d30:	9a07      	ldr	r2, [sp, #28]
   27d32:	42ba      	cmp	r2, r7
   27d34:	dd30      	ble.n	27d98 <_lv_blend_fill+0x184>
   27d36:	4649      	mov	r1, r9
                for(x = 0; x < draw_area_w; x++) {
   27d38:	2400      	movs	r4, #0
   27d3a:	e0c3      	b.n	27ec4 <_lv_blend_fill+0x2b0>
   27d3c:	f103 0901 	add.w	r9, r3, #1
   27d40:	eba9 0902 	sub.w	r9, r9, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   27d44:	f1c6 0101 	rsb	r1, r6, #1
        int32_t mask_w = lv_area_get_width(&draw_area);
   27d48:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   27d4c:	1e70      	subs	r0, r6, #1
   27d4e:	9109      	str	r1, [sp, #36]	; 0x24
   27d50:	9909      	ldr	r1, [sp, #36]	; 0x24
   27d52:	eb01 0c00 	add.w	ip, r1, r0
   27d56:	45e1      	cmp	r9, ip
   27d58:	dda5      	ble.n	27ca6 <_lv_blend_fill+0x92>
   27d5a:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   27d5e:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   27d62:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   27d66:	bf98      	it	ls
   27d68:	f04f 0c00 	movls.w	ip, #0
   27d6c:	f880 c000 	strb.w	ip, [r0]
   27d70:	e7ee      	b.n	27d50 <_lv_blend_fill+0x13c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   27d72:	f7f3 f925 	bl	1afc0 <_lv_refr_get_disp_refreshing>
   27d76:	f8bb 2014 	ldrh.w	r2, [fp, #20]
   27d7a:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   27d7e:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
   27d82:	3201      	adds	r2, #1
   27d84:	1ad2      	subs	r2, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   27d86:	9b08      	ldr	r3, [sp, #32]
   27d88:	2b01      	cmp	r3, #1
   27d8a:	fa0f fb82 	sxth.w	fp, r2
   27d8e:	d11f      	bne.n	27dd0 <_lv_blend_fill+0x1bc>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27d90:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   27d94:	4598      	cmp	r8, r3
   27d96:	dd02      	ble.n	27d9e <_lv_blend_fill+0x18a>
}
   27d98:	b00d      	add	sp, #52	; 0x34
   27d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27d9e:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   27da2:	fa0f f988 	sxth.w	r9, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27da6:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   27daa:	429f      	cmp	r7, r3
   27dac:	dd02      	ble.n	27db4 <_lv_blend_fill+0x1a0>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27dae:	f108 0801 	add.w	r8, r8, #1
   27db2:	e7ed      	b.n	27d90 <_lv_blend_fill+0x17c>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   27db4:	9502      	str	r5, [sp, #8]
   27db6:	f8ad 4004 	strh.w	r4, [sp, #4]
   27dba:	f8cd 9000 	str.w	r9, [sp]
   27dbe:	6946      	ldr	r6, [r0, #20]
   27dc0:	9905      	ldr	r1, [sp, #20]
   27dc2:	9006      	str	r0, [sp, #24]
   27dc4:	b23b      	sxth	r3, r7
   27dc6:	465a      	mov	r2, fp
   27dc8:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27dca:	3701      	adds	r7, #1
   27dcc:	9806      	ldr	r0, [sp, #24]
   27dce:	e7ea      	b.n	27da6 <_lv_blend_fill+0x192>
   27dd0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   27dd4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   27dd8:	f109 0901 	add.w	r9, r9, #1
   27ddc:	eba9 0903 	sub.w	r9, r9, r3
   27de0:	1af6      	subs	r6, r6, r3
   27de2:	fa0f f989 	sxth.w	r9, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27de6:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   27dea:	4598      	cmp	r8, r3
   27dec:	dcd4      	bgt.n	27d98 <_lv_blend_fill+0x184>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   27dee:	fa0f f388 	sxth.w	r3, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27df2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   27df6:	9306      	str	r3, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27df8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   27dfc:	459a      	cmp	sl, r3
   27dfe:	dd03      	ble.n	27e08 <_lv_blend_fill+0x1f4>
            mask_tmp += draw_area_w;
   27e00:	444e      	add	r6, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27e02:	f108 0801 	add.w	r8, r8, #1
   27e06:	e7ee      	b.n	27de6 <_lv_blend_fill+0x1d2>
                if(mask_tmp[x]) {
   27e08:	f816 300a 	ldrb.w	r3, [r6, sl]
   27e0c:	b17b      	cbz	r3, 27e2e <_lv_blend_fill+0x21a>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   27e0e:	fb15 f303 	smulbb	r3, r5, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   27e12:	0a1b      	lsrs	r3, r3, #8
   27e14:	9302      	str	r3, [sp, #8]
   27e16:	9b06      	ldr	r3, [sp, #24]
   27e18:	9300      	str	r3, [sp, #0]
   27e1a:	f8ad 4004 	strh.w	r4, [sp, #4]
   27e1e:	6947      	ldr	r7, [r0, #20]
   27e20:	9905      	ldr	r1, [sp, #20]
   27e22:	9007      	str	r0, [sp, #28]
   27e24:	fa0f f38a 	sxth.w	r3, sl
   27e28:	465a      	mov	r2, fp
   27e2a:	47b8      	blx	r7
   27e2c:	9807      	ldr	r0, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27e2e:	f10a 0a01 	add.w	sl, sl, #1
   27e32:	e7e1      	b.n	27df8 <_lv_blend_fill+0x1e4>
                lv_color_fill(disp_buf_first, color, draw_area_w);
   27e34:	4648      	mov	r0, r9
   27e36:	4642      	mov	r2, r8
   27e38:	4621      	mov	r1, r4
   27e3a:	f002 fb57 	bl	2a4ec <lv_color_fill>
                disp_buf_first += disp_w;
   27e3e:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   27e40:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
   27e42:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
   27e44:	9b07      	ldr	r3, [sp, #28]
   27e46:	42bb      	cmp	r3, r7
   27e48:	dcf4      	bgt.n	27e34 <_lv_blend_fill+0x220>
   27e4a:	e7a5      	b.n	27d98 <_lv_blend_fill+0x184>
                    if(last_dest_color.full != disp_buf_first[x].full) {
   27e4c:	880a      	ldrh	r2, [r1, #0]
   27e4e:	fa1f fe8a 	uxth.w	lr, sl
   27e52:	4596      	cmp	lr, r2
   27e54:	d027      	beq.n	27ea6 <_lv_blend_fill+0x292>
   27e56:	7848      	ldrb	r0, [r1, #1]
   27e58:	9b05      	ldr	r3, [sp, #20]
   27e5a:	08c0      	lsrs	r0, r0, #3
   27e5c:	fb00 3005 	mla	r0, r0, r5, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e60:	9b08      	ldr	r3, [sp, #32]
   27e62:	f3c2 1645 	ubfx	r6, r2, #5, #6
   27e66:	fb06 3605 	mla	r6, r6, r5, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e6a:	780b      	ldrb	r3, [r1, #0]
   27e6c:	f003 031f 	and.w	r3, r3, #31
   27e70:	fb03 b305 	mla	r3, r3, r5, fp
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e74:	fb0c f000 	mul.w	r0, ip, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e78:	fb0c f606 	mul.w	r6, ip, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e7c:	fb0c f303 	mul.w	r3, ip, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e80:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e84:	f506 0680 	add.w	r6, r6, #4194304	; 0x400000
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e88:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e8c:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e90:	f506 4681 	add.w	r6, r6, #16512	; 0x4080
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e94:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
                        last_dest_color = disp_buf_first[x];
   27e98:	4692      	mov	sl, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e9a:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e9e:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27ea2:	f3c3 53c4 	ubfx	r3, r3, #23, #5
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
   27ea6:	780a      	ldrb	r2, [r1, #0]
   27ea8:	f363 0204 	bfi	r2, r3, #0, #5
   27eac:	700a      	strb	r2, [r1, #0]
   27eae:	880a      	ldrh	r2, [r1, #0]
   27eb0:	f366 124a 	bfi	r2, r6, #5, #6
   27eb4:	800a      	strh	r2, [r1, #0]
   27eb6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   27eba:	f360 02c7 	bfi	r2, r0, #3, #5
   27ebe:	704a      	strb	r2, [r1, #1]
                for(x = 0; x < draw_area_w; x++) {
   27ec0:	3401      	adds	r4, #1
   27ec2:	3102      	adds	r1, #2
   27ec4:	45a0      	cmp	r8, r4
   27ec6:	dcc1      	bgt.n	27e4c <_lv_blend_fill+0x238>
                }
                disp_buf_first += disp_w;
   27ec8:	9a06      	ldr	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   27eca:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
   27ecc:	4491      	add	r9, r2
            for(y = 0; y < draw_area_h; y++) {
   27ece:	e72f      	b.n	27d30 <_lv_blend_fill+0x11c>
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   27ed0:	2dfd      	cmp	r5, #253	; 0xfd
   27ed2:	f200 8089 	bhi.w	27fe8 <_lv_blend_fill+0x3d4>
        last_dest_color.full = disp_buf_first[0].full;
   27ed6:	9a05      	ldr	r2, [sp, #20]
   27ed8:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
                mask += draw_area_w;
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
   27edc:	463a      	mov	r2, r7
        last_res_color.full = disp_buf_first[0].full;
   27ede:	4660      	mov	r0, ip
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27ee0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   27ee4:	459a      	cmp	sl, r3
   27ee6:	f73f af57 	bgt.w	27d98 <_lv_blend_fill+0x184>
                const lv_opa_t * mask_tmp_x = mask;
                for(x = 0; x < draw_area_w; x++) {
   27eea:	f04f 0b00 	mov.w	fp, #0
   27eee:	e09e      	b.n	2802e <_lv_blend_fill+0x41a>
                    FILL_NORMAL_MASK_PX(x, color)
   27ef0:	f815 2b01 	ldrb.w	r2, [r5], #1
   27ef4:	b11a      	cbz	r2, 27efe <_lv_blend_fill+0x2ea>
   27ef6:	2aff      	cmp	r2, #255	; 0xff
   27ef8:	d11d      	bne.n	27f36 <_lv_blend_fill+0x322>
   27efa:	f829 401a 	strh.w	r4, [r9, sl, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   27efe:	f10a 0a01 	add.w	sl, sl, #1
   27f02:	45d0      	cmp	r8, sl
   27f04:	46ab      	mov	fp, r5
   27f06:	dd01      	ble.n	27f0c <_lv_blend_fill+0x2f8>
   27f08:	07ab      	lsls	r3, r5, #30
   27f0a:	d1f1      	bne.n	27ef0 <_lv_blend_fill+0x2dc>
   27f0c:	eb09 054a 	add.w	r5, r9, sl, lsl #1
                for(; x <= x_end4; x += 4) {
   27f10:	9b05      	ldr	r3, [sp, #20]
   27f12:	4553      	cmp	r3, sl
   27f14:	da17      	bge.n	27f46 <_lv_blend_fill+0x332>
   27f16:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
                for(; x < draw_area_w ; x++) {
   27f1a:	45d0      	cmp	r8, sl
   27f1c:	dc52      	bgt.n	27fc4 <_lv_blend_fill+0x3b0>
                disp_buf_first += disp_w;
   27f1e:	9b06      	ldr	r3, [sp, #24]
                mask += draw_area_w;
   27f20:	4446      	add	r6, r8
                disp_buf_first += disp_w;
   27f22:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
   27f24:	3701      	adds	r7, #1
   27f26:	9b07      	ldr	r3, [sp, #28]
   27f28:	42bb      	cmp	r3, r7
   27f2a:	f77f af35 	ble.w	27d98 <_lv_blend_fill+0x184>
   27f2e:	4635      	mov	r5, r6
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   27f30:	f04f 0a00 	mov.w	sl, #0
   27f34:	e7e5      	b.n	27f02 <_lv_blend_fill+0x2ee>
                    FILL_NORMAL_MASK_PX(x, color)
   27f36:	f839 101a 	ldrh.w	r1, [r9, sl, lsl #1]
   27f3a:	4620      	mov	r0, r4
   27f3c:	f7ff fe37 	bl	27bae <lv_color_mix>
   27f40:	f829 001a 	strh.w	r0, [r9, sl, lsl #1]
   27f44:	e7db      	b.n	27efe <_lv_blend_fill+0x2ea>
                    if(*mask32) {
   27f46:	f8db 2000 	ldr.w	r2, [fp]
   27f4a:	b12a      	cbz	r2, 27f58 <_lv_blend_fill+0x344>
                        if((*mask32) == 0xFFFFFFFF) {
   27f4c:	3201      	adds	r2, #1
   27f4e:	d109      	bne.n	27f64 <_lv_blend_fill+0x350>
                            disp_buf_first[x] = color;
   27f50:	802c      	strh	r4, [r5, #0]
                            disp_buf_first[x + 1] = color;
   27f52:	806c      	strh	r4, [r5, #2]
                            disp_buf_first[x + 2] = color;
   27f54:	80ac      	strh	r4, [r5, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   27f56:	80ec      	strh	r4, [r5, #6]
                    mask32++;
   27f58:	f10b 0b04 	add.w	fp, fp, #4
                for(; x <= x_end4; x += 4) {
   27f5c:	f10a 0a04 	add.w	sl, sl, #4
   27f60:	3508      	adds	r5, #8
   27f62:	e7d5      	b.n	27f10 <_lv_blend_fill+0x2fc>
                            FILL_NORMAL_MASK_PX(x, color)
   27f64:	f89b 2000 	ldrb.w	r2, [fp]
   27f68:	b112      	cbz	r2, 27f70 <_lv_blend_fill+0x35c>
   27f6a:	2aff      	cmp	r2, #255	; 0xff
   27f6c:	d118      	bne.n	27fa0 <_lv_blend_fill+0x38c>
   27f6e:	802c      	strh	r4, [r5, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
   27f70:	f89b 2001 	ldrb.w	r2, [fp, #1]
   27f74:	b112      	cbz	r2, 27f7c <_lv_blend_fill+0x368>
   27f76:	2aff      	cmp	r2, #255	; 0xff
   27f78:	d118      	bne.n	27fac <_lv_blend_fill+0x398>
   27f7a:	806c      	strh	r4, [r5, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
   27f7c:	f89b 2002 	ldrb.w	r2, [fp, #2]
   27f80:	b112      	cbz	r2, 27f88 <_lv_blend_fill+0x374>
   27f82:	2aff      	cmp	r2, #255	; 0xff
   27f84:	d118      	bne.n	27fb8 <_lv_blend_fill+0x3a4>
   27f86:	80ac      	strh	r4, [r5, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   27f88:	f89b 2003 	ldrb.w	r2, [fp, #3]
   27f8c:	2a00      	cmp	r2, #0
   27f8e:	d0e3      	beq.n	27f58 <_lv_blend_fill+0x344>
   27f90:	2aff      	cmp	r2, #255	; 0xff
   27f92:	d0e0      	beq.n	27f56 <_lv_blend_fill+0x342>
   27f94:	88e9      	ldrh	r1, [r5, #6]
   27f96:	4620      	mov	r0, r4
   27f98:	f7ff fe09 	bl	27bae <lv_color_mix>
   27f9c:	80e8      	strh	r0, [r5, #6]
   27f9e:	e7db      	b.n	27f58 <_lv_blend_fill+0x344>
                            FILL_NORMAL_MASK_PX(x, color)
   27fa0:	8829      	ldrh	r1, [r5, #0]
   27fa2:	4620      	mov	r0, r4
   27fa4:	f7ff fe03 	bl	27bae <lv_color_mix>
   27fa8:	8028      	strh	r0, [r5, #0]
   27faa:	e7e1      	b.n	27f70 <_lv_blend_fill+0x35c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
   27fac:	8869      	ldrh	r1, [r5, #2]
   27fae:	4620      	mov	r0, r4
   27fb0:	f7ff fdfd 	bl	27bae <lv_color_mix>
   27fb4:	8068      	strh	r0, [r5, #2]
   27fb6:	e7e1      	b.n	27f7c <_lv_blend_fill+0x368>
                            FILL_NORMAL_MASK_PX(x + 2, color)
   27fb8:	88a9      	ldrh	r1, [r5, #4]
   27fba:	4620      	mov	r0, r4
   27fbc:	f7ff fdf7 	bl	27bae <lv_color_mix>
   27fc0:	80a8      	strh	r0, [r5, #4]
   27fc2:	e7e1      	b.n	27f88 <_lv_blend_fill+0x374>
                    FILL_NORMAL_MASK_PX(x, color)
   27fc4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   27fc8:	b11a      	cbz	r2, 27fd2 <_lv_blend_fill+0x3be>
   27fca:	2aff      	cmp	r2, #255	; 0xff
   27fcc:	d104      	bne.n	27fd8 <_lv_blend_fill+0x3c4>
   27fce:	f829 401a 	strh.w	r4, [r9, sl, lsl #1]
                for(; x < draw_area_w ; x++) {
   27fd2:	f10a 0a01 	add.w	sl, sl, #1
   27fd6:	e7a0      	b.n	27f1a <_lv_blend_fill+0x306>
                    FILL_NORMAL_MASK_PX(x, color)
   27fd8:	f839 101a 	ldrh.w	r1, [r9, sl, lsl #1]
   27fdc:	4620      	mov	r0, r4
   27fde:	f7ff fde6 	bl	27bae <lv_color_mix>
   27fe2:	f829 001a 	strh.w	r0, [r9, sl, lsl #1]
   27fe6:	e7f4      	b.n	27fd2 <_lv_blend_fill+0x3be>
        int32_t x_end4 = draw_area_w - 4;
   27fe8:	f1a8 0304 	sub.w	r3, r8, #4
   27fec:	9305      	str	r3, [sp, #20]
   27fee:	e79a      	b.n	27f26 <_lv_blend_fill+0x312>
                    if(*mask_tmp_x) {
   27ff0:	f816 300b 	ldrb.w	r3, [r6, fp]
   27ff4:	b1cb      	cbz	r3, 2802a <_lv_blend_fill+0x416>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   27ff6:	42bb      	cmp	r3, r7
   27ff8:	eb09 014b 	add.w	r1, r9, fp, lsl #1
   27ffc:	d00f      	beq.n	2801e <_lv_blend_fill+0x40a>
   27ffe:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
   28000:	bf1a      	itte	ne
   28002:	fb13 f205 	smulbbne	r2, r3, r5
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   28006:	0a12      	lsrne	r2, r2, #8
   28008:	462a      	moveq	r2, r5
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
   2800a:	8809      	ldrh	r1, [r1, #0]
   2800c:	4620      	mov	r0, r4
   2800e:	f7ff fdce 	bl	27bae <lv_color_mix>
                            }
                            last_mask = *mask_tmp_x;
   28012:	f816 700b 	ldrb.w	r7, [r6, fp]
                            last_dest_color.full = disp_buf_first[x].full;
   28016:	f839 c01b 	ldrh.w	ip, [r9, fp, lsl #1]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
   2801a:	b280      	uxth	r0, r0
                            last_dest_color.full = disp_buf_first[x].full;
   2801c:	e003      	b.n	28026 <_lv_blend_fill+0x412>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
   2801e:	f839 301b 	ldrh.w	r3, [r9, fp, lsl #1]
   28022:	4563      	cmp	r3, ip
   28024:	d1f1      	bne.n	2800a <_lv_blend_fill+0x3f6>
                        }
                        disp_buf_first[x] = last_res_color;
   28026:	f829 001b 	strh.w	r0, [r9, fp, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
   2802a:	f10b 0b01 	add.w	fp, fp, #1
   2802e:	45d8      	cmp	r8, fp
   28030:	dcde      	bgt.n	27ff0 <_lv_blend_fill+0x3dc>
                    }
                    mask_tmp_x++;
                }
                disp_buf_first += disp_w;
   28032:	9b06      	ldr	r3, [sp, #24]
                mask += draw_area_w;
   28034:	4446      	add	r6, r8
                disp_buf_first += disp_w;
   28036:	4499      	add	r9, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   28038:	f10a 0a01 	add.w	sl, sl, #1
   2803c:	e750      	b.n	27ee0 <_lv_blend_fill+0x2cc>

0002803e <_lv_blend_map>:
{
   2803e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28042:	b08d      	sub	sp, #52	; 0x34
   28044:	460f      	mov	r7, r1
   28046:	9304      	str	r3, [sp, #16]
   28048:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   2804c:	9308      	str	r3, [sp, #32]
   2804e:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   28052:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   28056:	9209      	str	r2, [sp, #36]	; 0x24
    if(opa < LV_OPA_MIN) return;
   28058:	2b01      	cmp	r3, #1
{
   2805a:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
   2805c:	f240 80d0 	bls.w	28200 <_lv_blend_map+0x1c2>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   28060:	9b08      	ldr	r3, [sp, #32]
   28062:	2b00      	cmp	r3, #0
   28064:	f000 80cc 	beq.w	28200 <_lv_blend_map+0x1c2>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
   28068:	460a      	mov	r2, r1
   2806a:	4601      	mov	r1, r0
   2806c:	a80a      	add	r0, sp, #40	; 0x28
   2806e:	f002 f80c 	bl	2a08a <_lv_area_intersect>
    if(!is_common) return;
   28072:	2800      	cmp	r0, #0
   28074:	f000 80c4 	beq.w	28200 <_lv_blend_map+0x1c2>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   28078:	f7f2 ffa2 	bl	1afc0 <_lv_refr_get_disp_refreshing>
   2807c:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2807e:	f001 ff99 	bl	29fb4 <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
   28082:	6883      	ldr	r3, [r0, #8]
   28084:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   28086:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   28088:	4681      	mov	r9, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   2808a:	b10b      	cbz	r3, 28090 <_lv_blend_map+0x52>
   2808c:	4620      	mov	r0, r4
   2808e:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
   28090:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   28094:	f9b9 0010 	ldrsh.w	r0, [r9, #16]
    draw_area.y1 -= disp_area->y1;
   28098:	f9bd b02a 	ldrsh.w	fp, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
   2809c:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    draw_area.x2 -= disp_area->x1;
   280a0:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
   280a4:	1a13      	subs	r3, r2, r0
   280a6:	fa0f fc83 	sxth.w	ip, r3
    draw_area.y1 -= disp_area->y1;
   280aa:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    draw_area.x1 -= disp_area->x1;
   280ae:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
   280b2:	ebab 0e03 	sub.w	lr, fp, r3
    draw_area.y2 -= disp_area->y1;
   280b6:	1acb      	subs	r3, r1, r3
   280b8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    if(mask)
   280bc:	9b04      	ldr	r3, [sp, #16]
    draw_area.y1 -= disp_area->y1;
   280be:	fa0f fe8e 	sxth.w	lr, lr
    draw_area.x2 -= disp_area->x1;
   280c2:	eba8 0000 	sub.w	r0, r8, r0
    draw_area.y1 -= disp_area->y1;
   280c6:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
   280ca:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    if(mask)
   280ce:	2b00      	cmp	r3, #0
   280d0:	d152      	bne.n	28178 <_lv_blend_map+0x13a>
    if(disp->driver.set_px_cb) {
   280d2:	6963      	ldr	r3, [r4, #20]
   280d4:	2b00      	cmp	r3, #0
   280d6:	d165      	bne.n	281a4 <_lv_blend_map+0x166>
    else if(mode == LV_BLEND_MODE_NORMAL) {
   280d8:	2e00      	cmp	r6, #0
   280da:	f040 8091 	bne.w	28200 <_lv_blend_map+0x1c2>
   280de:	f8b9 a014 	ldrh.w	sl, [r9, #20]
   280e2:	f9b9 3010 	ldrsh.w	r3, [r9, #16]

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   280e6:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   280ea:	f1cb 0b01 	rsb	fp, fp, #1
   280ee:	448b      	add	fp, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   280f0:	f1c2 0201 	rsb	r2, r2, #1
   280f4:	f10a 0a01 	add.w	sl, sl, #1
   280f8:	ebaa 0a03 	sub.w	sl, sl, r3
   280fc:	4490      	add	r8, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
   280fe:	fa0f f28b 	sxth.w	r2, fp
   28102:	fa0f fa8a 	sxth.w	sl, sl
   28106:	9206      	str	r2, [sp, #24]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   28108:	9a07      	ldr	r2, [sp, #28]
   2810a:	f8b7 b004 	ldrh.w	fp, [r7, #4]
   2810e:	f9b7 1000 	ldrsh.w	r1, [r7]
   28112:	fb0a c50e 	mla	r5, sl, lr, ip
   28116:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   2811a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   2811e:	f10b 0b01 	add.w	fp, fp, #1
   28122:	ebab 0b01 	sub.w	fp, fp, r1
   28126:	1aa4      	subs	r4, r4, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   28128:	1a5b      	subs	r3, r3, r1
   2812a:	fa0f fb8b 	sxth.w	fp, fp
   2812e:	4463      	add	r3, ip
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   28130:	4474      	add	r4, lr
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   28132:	fb0b 3404 	mla	r4, fp, r4, r3
   28136:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28138:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   2813c:	ea4f 034a 	mov.w	r3, sl, lsl #1
   28140:	9307      	str	r3, [sp, #28]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   28142:	9b08      	ldr	r3, [sp, #32]
   28144:	2b01      	cmp	r3, #1
   28146:	fa0f f888 	sxth.w	r8, r8
            }
            return;
        }
#endif

        if(opa > LV_OPA_MAX) {
   2814a:	9b05      	ldr	r3, [sp, #20]
   2814c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   28150:	f040 80c0 	bne.w	282d4 <_lv_blend_map+0x296>
        if(opa > LV_OPA_MAX) {
   28154:	2bfd      	cmp	r3, #253	; 0xfd
   28156:	f240 80b8 	bls.w	282ca <_lv_blend_map+0x28c>
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
   2815a:	ea4f 0848 	mov.w	r8, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
   2815e:	9b06      	ldr	r3, [sp, #24]
   28160:	42b3      	cmp	r3, r6
   28162:	dd4d      	ble.n	28200 <_lv_blend_map+0x1c2>
   28164:	4621      	mov	r1, r4
   28166:	4628      	mov	r0, r5
   28168:	4642      	mov	r2, r8
   2816a:	f003 fb22 	bl	2b7b2 <memcpy>
                disp_buf_first += disp_w;
   2816e:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
   28170:	445c      	add	r4, fp
                disp_buf_first += disp_w;
   28172:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
   28174:	3601      	adds	r6, #1
   28176:	e7f2      	b.n	2815e <_lv_blend_map+0x120>
   28178:	9804      	ldr	r0, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   2817a:	9d04      	ldr	r5, [sp, #16]
   2817c:	f108 0301 	add.w	r3, r8, #1
   28180:	1a9b      	subs	r3, r3, r2
        int32_t mask_w = lv_area_get_width(&draw_area);
   28182:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   28184:	3801      	subs	r0, #1
   28186:	f1c5 0a01 	rsb	sl, r5, #1
   2818a:	eb0a 0500 	add.w	r5, sl, r0
   2818e:	42ab      	cmp	r3, r5
   28190:	dd9f      	ble.n	280d2 <_lv_blend_map+0x94>
   28192:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   28196:	2d80      	cmp	r5, #128	; 0x80
   28198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2819c:	bf98      	it	ls
   2819e:	2500      	movls	r5, #0
   281a0:	7005      	strb	r5, [r0, #0]
   281a2:	e7f2      	b.n	2818a <_lv_blend_map+0x14c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   281a4:	f7f2 ff0c 	bl	1afc0 <_lv_refr_get_disp_refreshing>
   281a8:	88bd      	ldrh	r5, [r7, #4]
   281aa:	f9b7 c000 	ldrsh.w	ip, [r7]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   281ae:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
   281b2:	f8b9 2014 	ldrh.w	r2, [r9, #20]
   281b6:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
   281ba:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
   281be:	f9b9 7012 	ldrsh.w	r7, [r9, #18]
   281c2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   281c6:	3501      	adds	r5, #1
   281c8:	3201      	adds	r2, #1
   281ca:	eba5 050c 	sub.w	r5, r5, ip
   281ce:	1b34      	subs	r4, r6, r4
   281d0:	1ad2      	subs	r2, r2, r3
   281d2:	b22d      	sxth	r5, r5
    map_buf_tmp -= draw_area->x1;
   281d4:	eba3 030c 	sub.w	r3, r3, ip
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   281d8:	443c      	add	r4, r7
    map_buf_tmp -= draw_area->x1;
   281da:	fb05 3404 	mla	r4, r5, r4, r3
   281de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   281e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   281e4:	9b08      	ldr	r3, [sp, #32]
   281e6:	2b01      	cmp	r3, #1
   281e8:	ea4f 0345 	mov.w	r3, r5, lsl #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   281ec:	4683      	mov	fp, r0
   281ee:	b212      	sxth	r2, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   281f0:	f1c1 0a00 	rsb	sl, r1, #0
   281f4:	9306      	str	r3, [sp, #24]
   281f6:	d124      	bne.n	28242 <_lv_blend_map+0x204>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   281f8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   281fc:	429e      	cmp	r6, r3
   281fe:	dd02      	ble.n	28206 <_lv_blend_map+0x1c8>
}
   28200:	b00d      	add	sp, #52	; 0x34
   28202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   28206:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   2820a:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2820c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   28210:	4598      	cmp	r8, r3
   28212:	dd03      	ble.n	2821c <_lv_blend_map+0x1de>
            map_buf_tmp += map_w;
   28214:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   28216:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
   28218:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   2821a:	e7ed      	b.n	281f8 <_lv_blend_map+0x1ba>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   2821c:	9b05      	ldr	r3, [sp, #20]
   2821e:	9302      	str	r3, [sp, #8]
   28220:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
   28224:	f8ad 3004 	strh.w	r3, [sp, #4]
   28228:	9700      	str	r7, [sp, #0]
   2822a:	fa0f f388 	sxth.w	r3, r8
   2822e:	9907      	ldr	r1, [sp, #28]
   28230:	f8db 5014 	ldr.w	r5, [fp, #20]
   28234:	9204      	str	r2, [sp, #16]
   28236:	4658      	mov	r0, fp
   28238:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2823a:	f108 0801 	add.w	r8, r8, #1
   2823e:	9a04      	ldr	r2, [sp, #16]
   28240:	e7e4      	b.n	2820c <_lv_blend_map+0x1ce>
   28242:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   28246:	9b04      	ldr	r3, [sp, #16]
   28248:	f108 0801 	add.w	r8, r8, #1
   2824c:	4453      	add	r3, sl
   2824e:	eba8 0801 	sub.w	r8, r8, r1
   28252:	469a      	mov	sl, r3
            mask_tmp += draw_area_w;
   28254:	fa0f f888 	sxth.w	r8, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   28258:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   2825c:	429e      	cmp	r6, r3
   2825e:	dccf      	bgt.n	28200 <_lv_blend_map+0x1c2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   28260:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   28264:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   28266:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   2826a:	4599      	cmp	r9, r3
   2826c:	dd04      	ble.n	28278 <_lv_blend_map+0x23a>
            map_buf_tmp += map_w;
   2826e:	9b06      	ldr	r3, [sp, #24]
            mask_tmp += draw_area_w;
   28270:	44c2      	add	sl, r8
            map_buf_tmp += map_w;
   28272:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   28274:	3601      	adds	r6, #1
   28276:	e7ef      	b.n	28258 <_lv_blend_map+0x21a>
                if(mask_tmp[x]) {
   28278:	f81a 3009 	ldrb.w	r3, [sl, r9]
   2827c:	b193      	cbz	r3, 282a4 <_lv_blend_map+0x266>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   2827e:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   28280:	9204      	str	r2, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   28282:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   28286:	0a1b      	lsrs	r3, r3, #8
   28288:	9302      	str	r3, [sp, #8]
   2828a:	f834 3019 	ldrh.w	r3, [r4, r9, lsl #1]
   2828e:	f8ad 3004 	strh.w	r3, [sp, #4]
   28292:	9700      	str	r7, [sp, #0]
   28294:	9907      	ldr	r1, [sp, #28]
   28296:	f8db 5014 	ldr.w	r5, [fp, #20]
   2829a:	fa0f f389 	sxth.w	r3, r9
   2829e:	4658      	mov	r0, fp
   282a0:	47a8      	blx	r5
   282a2:	9a04      	ldr	r2, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   282a4:	f109 0901 	add.w	r9, r9, #1
   282a8:	e7dd      	b.n	28266 <_lv_blend_map+0x228>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
   282aa:	f835 1017 	ldrh.w	r1, [r5, r7, lsl #1]
   282ae:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
   282b2:	9a05      	ldr	r2, [sp, #20]
   282b4:	f7ff fc7b 	bl	27bae <lv_color_mix>
   282b8:	f825 0017 	strh.w	r0, [r5, r7, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
   282bc:	3701      	adds	r7, #1
   282be:	45b8      	cmp	r8, r7
   282c0:	dcf3      	bgt.n	282aa <_lv_blend_map+0x26c>
                    }
                }
                disp_buf_first += disp_w;
   282c2:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
   282c4:	445c      	add	r4, fp
                disp_buf_first += disp_w;
   282c6:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
   282c8:	3601      	adds	r6, #1
   282ca:	9b06      	ldr	r3, [sp, #24]
   282cc:	42b3      	cmp	r3, r6
   282ce:	dd97      	ble.n	28200 <_lv_blend_map+0x1c2>
                for(x = 0; x < draw_area_w; x++) {
   282d0:	2700      	movs	r7, #0
   282d2:	e7f4      	b.n	282be <_lv_blend_map+0x280>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   282d4:	2bfd      	cmp	r3, #253	; 0xfd
   282d6:	f240 80bb 	bls.w	28450 <_lv_blend_map+0x412>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
   282da:	f1a8 0304 	sub.w	r3, r8, #4
   282de:	9308      	str	r3, [sp, #32]

            for(y = 0; y < draw_area_h; y++) {
   282e0:	9605      	str	r6, [sp, #20]
   282e2:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   282e6:	4293      	cmp	r3, r2
   282e8:	dd8a      	ble.n	28200 <_lv_blend_map+0x1c2>
   282ea:	9f04      	ldr	r7, [sp, #16]
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   282ec:	2600      	movs	r6, #0
   282ee:	e009      	b.n	28304 <_lv_blend_map+0x2c6>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
   282f0:	f817 2b01 	ldrb.w	r2, [r7], #1
   282f4:	b12a      	cbz	r2, 28302 <_lv_blend_map+0x2c4>
   282f6:	2aff      	cmp	r2, #255	; 0xff
   282f8:	d11e      	bne.n	28338 <_lv_blend_map+0x2fa>
   282fa:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
   282fe:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   28302:	3601      	adds	r6, #1
   28304:	45b0      	cmp	r8, r6
   28306:	46ba      	mov	sl, r7
   28308:	dd01      	ble.n	2830e <_lv_blend_map+0x2d0>
   2830a:	07bb      	lsls	r3, r7, #30
   2830c:	d1f0      	bne.n	282f0 <_lv_blend_map+0x2b2>
   2830e:	eb05 0746 	add.w	r7, r5, r6, lsl #1
   28312:	eb04 0946 	add.w	r9, r4, r6, lsl #1
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
   28316:	9b08      	ldr	r3, [sp, #32]
   28318:	42b3      	cmp	r3, r6
   2831a:	dc16      	bgt.n	2834a <_lv_blend_map+0x30c>
   2831c:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
   28320:	45b0      	cmp	r8, r6
   28322:	dc64      	bgt.n	283ee <_lv_blend_map+0x3b0>
#else
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
   28324:	9b07      	ldr	r3, [sp, #28]
   28326:	441d      	add	r5, r3
                mask += draw_area_w;
   28328:	9b04      	ldr	r3, [sp, #16]
   2832a:	4443      	add	r3, r8
   2832c:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
   2832e:	9b05      	ldr	r3, [sp, #20]
   28330:	3301      	adds	r3, #1
                map_buf_first += map_w;
   28332:	445c      	add	r4, fp
            for(y = 0; y < draw_area_h; y++) {
   28334:	9305      	str	r3, [sp, #20]
   28336:	e7d4      	b.n	282e2 <_lv_blend_map+0x2a4>
                    MAP_NORMAL_MASK_PX(x)
   28338:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
   2833c:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
   28340:	f7ff fc35 	bl	27bae <lv_color_mix>
   28344:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
   28348:	e7db      	b.n	28302 <_lv_blend_map+0x2c4>
                    if(*mask32) {
   2834a:	f8da 2000 	ldr.w	r2, [sl]
   2834e:	b16a      	cbz	r2, 2836c <_lv_blend_map+0x32e>
                        if((*mask32) == 0xFFFFFFFF) {
   28350:	3201      	adds	r2, #1
   28352:	d112      	bne.n	2837a <_lv_blend_map+0x33c>
                            disp_buf_first[x] = map_buf_first[x];
   28354:	f8b9 2000 	ldrh.w	r2, [r9]
   28358:	803a      	strh	r2, [r7, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
   2835a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   2835e:	807a      	strh	r2, [r7, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
   28360:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   28364:	80ba      	strh	r2, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
   28366:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   2836a:	80fa      	strh	r2, [r7, #6]
                    mask32++;
   2836c:	f10a 0a04 	add.w	sl, sl, #4
                for(; x < x_end4; x += 4) {
   28370:	3604      	adds	r6, #4
   28372:	3708      	adds	r7, #8
   28374:	f109 0908 	add.w	r9, r9, #8
   28378:	e7cd      	b.n	28316 <_lv_blend_map+0x2d8>
                            MAP_NORMAL_MASK_PX(x)
   2837a:	f89a 2000 	ldrb.w	r2, [sl]
   2837e:	b122      	cbz	r2, 2838a <_lv_blend_map+0x34c>
   28380:	2aff      	cmp	r2, #255	; 0xff
   28382:	d11f      	bne.n	283c4 <_lv_blend_map+0x386>
   28384:	f8b9 2000 	ldrh.w	r2, [r9]
   28388:	803a      	strh	r2, [r7, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
   2838a:	f89a 2001 	ldrb.w	r2, [sl, #1]
   2838e:	b122      	cbz	r2, 2839a <_lv_blend_map+0x35c>
   28390:	2aff      	cmp	r2, #255	; 0xff
   28392:	d11e      	bne.n	283d2 <_lv_blend_map+0x394>
   28394:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   28398:	807a      	strh	r2, [r7, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
   2839a:	f89a 2002 	ldrb.w	r2, [sl, #2]
   2839e:	b122      	cbz	r2, 283aa <_lv_blend_map+0x36c>
   283a0:	2aff      	cmp	r2, #255	; 0xff
   283a2:	d11d      	bne.n	283e0 <_lv_blend_map+0x3a2>
   283a4:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   283a8:	80ba      	strh	r2, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
   283aa:	f89a 2003 	ldrb.w	r2, [sl, #3]
   283ae:	2a00      	cmp	r2, #0
   283b0:	d0dc      	beq.n	2836c <_lv_blend_map+0x32e>
   283b2:	2aff      	cmp	r2, #255	; 0xff
   283b4:	d0d7      	beq.n	28366 <_lv_blend_map+0x328>
   283b6:	88f9      	ldrh	r1, [r7, #6]
   283b8:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   283bc:	f7ff fbf7 	bl	27bae <lv_color_mix>
   283c0:	80f8      	strh	r0, [r7, #6]
   283c2:	e7d3      	b.n	2836c <_lv_blend_map+0x32e>
                            MAP_NORMAL_MASK_PX(x)
   283c4:	8839      	ldrh	r1, [r7, #0]
   283c6:	f8b9 0000 	ldrh.w	r0, [r9]
   283ca:	f7ff fbf0 	bl	27bae <lv_color_mix>
   283ce:	8038      	strh	r0, [r7, #0]
   283d0:	e7db      	b.n	2838a <_lv_blend_map+0x34c>
                            MAP_NORMAL_MASK_PX(x + 1)
   283d2:	8879      	ldrh	r1, [r7, #2]
   283d4:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   283d8:	f7ff fbe9 	bl	27bae <lv_color_mix>
   283dc:	8078      	strh	r0, [r7, #2]
   283de:	e7dc      	b.n	2839a <_lv_blend_map+0x35c>
                            MAP_NORMAL_MASK_PX(x + 2)
   283e0:	88b9      	ldrh	r1, [r7, #4]
   283e2:	f8b9 0004 	ldrh.w	r0, [r9, #4]
   283e6:	f7ff fbe2 	bl	27bae <lv_color_mix>
   283ea:	80b8      	strh	r0, [r7, #4]
   283ec:	e7dd      	b.n	283aa <_lv_blend_map+0x36c>
                    MAP_NORMAL_MASK_PX(x)
   283ee:	f817 2f01 	ldrb.w	r2, [r7, #1]!
   283f2:	b12a      	cbz	r2, 28400 <_lv_blend_map+0x3c2>
   283f4:	2aff      	cmp	r2, #255	; 0xff
   283f6:	d105      	bne.n	28404 <_lv_blend_map+0x3c6>
   283f8:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
   283fc:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(; x < draw_area_w ; x++) {
   28400:	3601      	adds	r6, #1
   28402:	e78d      	b.n	28320 <_lv_blend_map+0x2e2>
                    MAP_NORMAL_MASK_PX(x)
   28404:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
   28408:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
   2840c:	f7ff fbcf 	bl	27bae <lv_color_mix>
   28410:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
   28414:	e7f4      	b.n	28400 <_lv_blend_map+0x3c2>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
   28416:	9b04      	ldr	r3, [sp, #16]
   28418:	5dda      	ldrb	r2, [r3, r7]
   2841a:	b17a      	cbz	r2, 2843c <_lv_blend_map+0x3fe>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
   2841c:	2afc      	cmp	r2, #252	; 0xfc
   2841e:	bf94      	ite	ls
   28420:	9b05      	ldrls	r3, [sp, #20]
   28422:	9a05      	ldrhi	r2, [sp, #20]
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
   28424:	f835 1017 	ldrh.w	r1, [r5, r7, lsl #1]
   28428:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
   2842c:	bf9c      	itt	ls
   2842e:	fb13 f202 	smulbbls	r2, r3, r2
   28432:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
   28434:	f7ff fbbb 	bl	27bae <lv_color_mix>
   28438:	f825 0017 	strh.w	r0, [r5, r7, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
   2843c:	3701      	adds	r7, #1
   2843e:	45b8      	cmp	r8, r7
   28440:	dce9      	bgt.n	28416 <_lv_blend_map+0x3d8>
                        }
                    }
                }
                disp_buf_first += disp_w;
   28442:	9b07      	ldr	r3, [sp, #28]
   28444:	441d      	add	r5, r3
                mask += draw_area_w;
   28446:	9b04      	ldr	r3, [sp, #16]
   28448:	4443      	add	r3, r8
   2844a:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
   2844c:	445c      	add	r4, fp
            for(y = 0; y < draw_area_h; y++) {
   2844e:	3601      	adds	r6, #1
   28450:	9b06      	ldr	r3, [sp, #24]
   28452:	42b3      	cmp	r3, r6
   28454:	f77f aed4 	ble.w	28200 <_lv_blend_map+0x1c2>
                for(x = 0; x < draw_area_w; x++) {
   28458:	2700      	movs	r7, #0
   2845a:	e7f0      	b.n	2843e <_lv_blend_map+0x400>

0002845c <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   2845c:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   2845e:	2100      	movs	r1, #0
   28460:	f003 b9c8 	b.w	2b7f4 <memset>

00028464 <_lv_memset_ff>:
 * Wrapper for the standard memset with fixed 0xFF value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
   28464:	460a      	mov	r2, r1
   28466:	21ff      	movs	r1, #255	; 0xff
   28468:	f003 b9c4 	b.w	2b7f4 <memset>

0002846c <lv_area_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2846c:	4603      	mov	r3, r0
   2846e:	6808      	ldr	r0, [r1, #0]
   28470:	6849      	ldr	r1, [r1, #4]
   28472:	c303      	stmia	r3!, {r0, r1}
}
   28474:	4770      	bx	lr

00028476 <lv_draw_map>:
{
   28476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2847a:	b09b      	sub	sp, #108	; 0x6c
   2847c:	461c      	mov	r4, r3
   2847e:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
   28482:	930a      	str	r3, [sp, #40]	; 0x28
   28484:	4606      	mov	r6, r0
   28486:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   2848a:	9307      	str	r3, [sp, #28]
    lv_area_copy(&draw_area, clip_area);
   2848c:	a816      	add	r0, sp, #88	; 0x58
{
   2848e:	468a      	mov	sl, r1
   28490:	4617      	mov	r7, r2
    lv_area_copy(&draw_area, clip_area);
   28492:	f7ff ffeb 	bl	2846c <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   28496:	f7f2 fd93 	bl	1afc0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2849a:	f001 fd8b 	bl	29fb4 <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
   2849e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   284a2:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    draw_area.y1 -= disp_area->y1;
   284a6:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   284aa:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
    draw_area.x1 -= disp_area->x1;
   284ae:	1b5b      	subs	r3, r3, r5
   284b0:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   284b4:	4683      	mov	fp, r0
    draw_area.y2 -= disp_area->y1;
   284b6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    draw_area.y1 -= disp_area->y1;
   284ba:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    draw_area.x2 -= disp_area->x1;
   284be:	1b52      	subs	r2, r2, r5
    draw_area.y1 -= disp_area->y1;
   284c0:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
   284c2:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
   284c4:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   284c8:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
   284cc:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   284d0:	f7f4 fa84 	bl	1c9dc <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
   284d4:	9006      	str	r0, [sp, #24]
   284d6:	b9e8      	cbnz	r0, 28514 <lv_draw_map+0x9e>
   284d8:	8863      	ldrh	r3, [r4, #2]
   284da:	b9db      	cbnz	r3, 28514 <lv_draw_map+0x9e>
   284dc:	8923      	ldrh	r3, [r4, #8]
   284de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   284e2:	d117      	bne.n	28514 <lv_draw_map+0x9e>
   284e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   284e6:	b9ab      	cbnz	r3, 28514 <lv_draw_map+0x9e>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
   284e8:	9b07      	ldr	r3, [sp, #28]
   284ea:	2b00      	cmp	r3, #0
   284ec:	f040 8088 	bne.w	28600 <lv_draw_map+0x18a>
   284f0:	7aa3      	ldrb	r3, [r4, #10]
   284f2:	2b00      	cmp	r3, #0
   284f4:	f040 8086 	bne.w	28604 <lv_draw_map+0x18e>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
   284f8:	7ba2      	ldrb	r2, [r4, #14]
   284fa:	9202      	str	r2, [sp, #8]
   284fc:	7822      	ldrb	r2, [r4, #0]
   284fe:	9201      	str	r2, [sp, #4]
   28500:	2201      	movs	r2, #1
   28502:	9200      	str	r2, [sp, #0]
   28504:	4631      	mov	r1, r6
   28506:	463a      	mov	r2, r7
   28508:	4650      	mov	r0, sl
   2850a:	f7ff fd98 	bl	2803e <_lv_blend_map>
}
   2850e:	b01b      	add	sp, #108	; 0x6c
   28510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   28514:	9b07      	ldr	r3, [sp, #28]
   28516:	2b00      	cmp	r3, #0
   28518:	bf14      	ite	ne
   2851a:	2303      	movne	r3, #3
   2851c:	2302      	moveq	r3, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2851e:	88b5      	ldrh	r5, [r6, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   28520:	f9bd c05a 	ldrsh.w	ip, [sp, #90]	; 0x5a
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   28524:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
   28528:	f9b6 0000 	ldrsh.w	r0, [r6]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   2852c:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
   28530:	f9bb 1012 	ldrsh.w	r1, [fp, #18]
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   28534:	9304      	str	r3, [sp, #16]
   28536:	3501      	adds	r5, #1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   28538:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
   2853c:	1a2d      	subs	r5, r5, r0
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   2853e:	ebac 0202 	sub.w	r2, ip, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   28542:	ebae 0000 	sub.w	r0, lr, r0
   28546:	4418      	add	r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   28548:	440a      	add	r2, r1
   2854a:	b22d      	sxth	r5, r5
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   2854c:	fb05 0202 	mla	r2, r5, r2, r0
   28550:	9804      	ldr	r0, [sp, #16]
   28552:	fb02 7200 	mla	r2, r2, r0, r7
   28556:	9205      	str	r2, [sp, #20]
   28558:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   2855c:	3201      	adds	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   2855e:	4473      	add	r3, lr
   28560:	eba2 0e0e 	sub.w	lr, r2, lr
   28564:	fa0f f28e 	sxth.w	r2, lr
   28568:	b21b      	sxth	r3, r3
   2856a:	9209      	str	r2, [sp, #36]	; 0x24
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   2856c:	3a01      	subs	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   2856e:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   28572:	4413      	add	r3, r2
   28574:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28578:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   2857c:	3301      	adds	r3, #1
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   2857e:	4461      	add	r1, ip
   28580:	eba3 0c0c 	sub.w	ip, r3, ip
   28584:	fa0f f38c 	sxth.w	r3, ip
   28588:	930f      	str	r3, [sp, #60]	; 0x3c
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   2858a:	9b06      	ldr	r3, [sp, #24]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   2858c:	b209      	sxth	r1, r1
   2858e:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
        blend_area.y2 = blend_area.y1;
   28592:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   28596:	2b00      	cmp	r3, #0
   28598:	f040 8093 	bne.w	286c2 <lv_draw_map+0x24c>
   2859c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2859e:	2b00      	cmp	r3, #0
   285a0:	f040 808f 	bne.w	286c2 <lv_draw_map+0x24c>
   285a4:	7aa3      	ldrb	r3, [r4, #10]
   285a6:	2b00      	cmp	r3, #0
   285a8:	f040 808b 	bne.w	286c2 <lv_draw_map+0x24c>
   285ac:	9b07      	ldr	r3, [sp, #28]
   285ae:	2b00      	cmp	r3, #0
   285b0:	f000 8087 	beq.w	286c2 <lv_draw_map+0x24c>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   285b4:	a816      	add	r0, sp, #88	; 0x58
   285b6:	f001 fd5a 	bl	2a06e <lv_area_get_size>
   285ba:	28f0      	cmp	r0, #240	; 0xf0
   285bc:	d824      	bhi.n	28608 <lv_draw_map+0x192>
   285be:	a816      	add	r0, sp, #88	; 0x58
   285c0:	f001 fd55 	bl	2a06e <lv_area_get_size>
   285c4:	4680      	mov	r8, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   285c6:	ea4f 0048 	mov.w	r0, r8, lsl #1
   285ca:	f7f5 f86f 	bl	1d6ac <_lv_mem_buf_get>
   285ce:	4606      	mov	r6, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   285d0:	4640      	mov	r0, r8
   285d2:	f7f5 f86b 	bl	1d6ac <_lv_mem_buf_get>
   285d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
                map_buf_tmp += map_w * px_size_byte;
   285d8:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
   285da:	f04f 0900 	mov.w	r9, #0
   285de:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
                map_buf_tmp += map_w * px_size_byte;
   285e2:	fb13 f505 	smulbb	r5, r3, r5
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   285e6:	4607      	mov	r7, r0
        uint32_t px_i = 0;
   285e8:	464b      	mov	r3, r9
   285ea:	9206      	str	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   285ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   285ee:	454a      	cmp	r2, r9
   285f0:	dd4b      	ble.n	2868a <lv_draw_map+0x214>
                map_px = map_buf_tmp;
   285f2:	9a05      	ldr	r2, [sp, #20]
   285f4:	eb07 0c03 	add.w	ip, r7, r3
   285f8:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   285fc:	2100      	movs	r1, #0
   285fe:	e014      	b.n	2862a <lv_draw_map+0x1b4>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   28600:	2303      	movs	r3, #3
   28602:	e78c      	b.n	2851e <lv_draw_map+0xa8>
   28604:	2302      	movs	r3, #2
   28606:	e78a      	b.n	2851e <lv_draw_map+0xa8>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   28608:	f04f 08f0 	mov.w	r8, #240	; 0xf0
   2860c:	e7db      	b.n	285c6 <lv_draw_map+0x150>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   2860e:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
   28610:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
   28614:	b130      	cbz	r0, 28624 <lv_draw_map+0x1ae>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
   28616:	f892 b001 	ldrb.w	fp, [r2, #1]
   2861a:	7810      	ldrb	r0, [r2, #0]
   2861c:	eb00 200b 	add.w	r0, r0, fp, lsl #8
   28620:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   28624:	9804      	ldr	r0, [sp, #16]
   28626:	3101      	adds	r1, #1
   28628:	4402      	add	r2, r0
   2862a:	9809      	ldr	r0, [sp, #36]	; 0x24
   2862c:	4288      	cmp	r0, r1
   2862e:	dcee      	bgt.n	2860e <lv_draw_map+0x198>
   28630:	9a06      	ldr	r2, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   28632:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   28636:	4413      	add	r3, r2
                map_buf_tmp += map_w * px_size_byte;
   28638:	9a05      	ldr	r2, [sp, #20]
   2863a:	442a      	add	r2, r5
   2863c:	9205      	str	r2, [sp, #20]
   2863e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   28642:	3201      	adds	r2, #1
   28644:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   28646:	fa03 f282 	sxtah	r2, r3, r2
   2864a:	4542      	cmp	r2, r8
   2864c:	d207      	bcs.n	2865e <lv_draw_map+0x1e8>
                    blend_area.y2 ++;
   2864e:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   28652:	3201      	adds	r2, #1
   28654:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
   28658:	f109 0901 	add.w	r9, r9, #1
   2865c:	e7c6      	b.n	285ec <lv_draw_map+0x176>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   2865e:	7ba3      	ldrb	r3, [r4, #14]
   28660:	9302      	str	r3, [sp, #8]
   28662:	7823      	ldrb	r3, [r4, #0]
   28664:	9301      	str	r3, [sp, #4]
   28666:	2302      	movs	r3, #2
   28668:	9300      	str	r3, [sp, #0]
   2866a:	4632      	mov	r2, r6
   2866c:	463b      	mov	r3, r7
   2866e:	a918      	add	r1, sp, #96	; 0x60
   28670:	4650      	mov	r0, sl
   28672:	f7ff fce4 	bl	2803e <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   28676:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   2867a:	3301      	adds	r3, #1
   2867c:	b21b      	sxth	r3, r3
   2867e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
   28682:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    px_i = 0;
   28686:	2300      	movs	r3, #0
   28688:	e7e6      	b.n	28658 <lv_draw_map+0x1e2>
            if(blend_area.y1 != blend_area.y2) {
   2868a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   2868e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   28692:	429a      	cmp	r2, r3
   28694:	d00e      	beq.n	286b4 <lv_draw_map+0x23e>
                blend_area.y2--;
   28696:	3b01      	subs	r3, #1
   28698:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   2869c:	7ba3      	ldrb	r3, [r4, #14]
   2869e:	9302      	str	r3, [sp, #8]
   286a0:	7823      	ldrb	r3, [r4, #0]
   286a2:	9301      	str	r3, [sp, #4]
   286a4:	2302      	movs	r3, #2
   286a6:	9300      	str	r3, [sp, #0]
   286a8:	4632      	mov	r2, r6
   286aa:	463b      	mov	r3, r7
   286ac:	a918      	add	r1, sp, #96	; 0x60
   286ae:	4650      	mov	r0, sl
   286b0:	f7ff fcc5 	bl	2803e <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   286b4:	4638      	mov	r0, r7
   286b6:	f7f5 f85b 	bl	1d770 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   286ba:	4630      	mov	r0, r6
            _lv_mem_buf_release(map2);
   286bc:	f7f5 f858 	bl	1d770 <_lv_mem_buf_release>
}
   286c0:	e725      	b.n	2850e <lv_draw_map+0x98>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   286c2:	a816      	add	r0, sp, #88	; 0x58
   286c4:	f001 fcd3 	bl	2a06e <lv_area_get_size>
   286c8:	28f0      	cmp	r0, #240	; 0xf0
   286ca:	d84f      	bhi.n	2876c <lv_draw_map+0x2f6>
   286cc:	a816      	add	r0, sp, #88	; 0x58
   286ce:	f001 fcce 	bl	2a06e <lv_area_get_size>
   286d2:	4680      	mov	r8, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   286d4:	ea4f 0048 	mov.w	r0, r8, lsl #1
   286d8:	f7f4 ffe8 	bl	1d6ac <_lv_mem_buf_get>
   286dc:	4681      	mov	r9, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   286de:	4640      	mov	r0, r8
   286e0:	f7f4 ffe4 	bl	1d6ac <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   286e4:	7aa3      	ldrb	r3, [r4, #10]
   286e6:	43da      	mvns	r2, r3
   286e8:	b2d2      	uxtb	r2, r2
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   286ea:	4607      	mov	r7, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   286ec:	920d      	str	r2, [sp, #52]	; 0x34
            if(draw_dsc->recolor_opa != 0) {
   286ee:	2b00      	cmp	r3, #0
   286f0:	d03f      	beq.n	28772 <lv_draw_map+0x2fc>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   286f2:	7b62      	ldrb	r2, [r4, #13]
   286f4:	08d2      	lsrs	r2, r2, #3
   286f6:	435a      	muls	r2, r3
   286f8:	920e      	str	r2, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   286fa:	89a2      	ldrh	r2, [r4, #12]
   286fc:	f3c2 1245 	ubfx	r2, r2, #5, #6
   28700:	435a      	muls	r2, r3
   28702:	9210      	str	r2, [sp, #64]	; 0x40
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   28704:	7b22      	ldrb	r2, [r4, #12]
   28706:	f002 021f 	and.w	r2, r2, #31
   2870a:	4353      	muls	r3, r2
   2870c:	930c      	str	r3, [sp, #48]	; 0x30
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   2870e:	9b07      	ldr	r3, [sp, #28]
   28710:	2b00      	cmp	r3, #0
   28712:	d132      	bne.n	2877a <lv_draw_map+0x304>
   28714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28716:	2b00      	cmp	r3, #0
   28718:	d12f      	bne.n	2877a <lv_draw_map+0x304>
   2871a:	8863      	ldrh	r3, [r4, #2]
   2871c:	bb6b      	cbnz	r3, 2877a <lv_draw_map+0x304>
   2871e:	8923      	ldrh	r3, [r4, #8]
   28720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   28724:	bf14      	ite	ne
   28726:	2602      	movne	r6, #2
   28728:	2601      	moveq	r6, #1
            if(other_mask_cnt) {
   2872a:	9b06      	ldr	r3, [sp, #24]
   2872c:	b11b      	cbz	r3, 28736 <lv_draw_map+0x2c0>
                _lv_memset_ff(mask_buf, mask_buf_size);
   2872e:	4641      	mov	r1, r8
   28730:	4638      	mov	r0, r7
   28732:	f7ff fe97 	bl	28464 <_lv_memset_ff>
                map_buf_tmp += map_w * px_size_byte;
   28736:	9b04      	ldr	r3, [sp, #16]
   28738:	fb13 f305 	smulbb	r3, r3, r5
   2873c:	9312      	str	r3, [sp, #72]	; 0x48
   2873e:	2300      	movs	r3, #0
   28740:	9308      	str	r3, [sp, #32]
   28742:	461d      	mov	r5, r3
   28744:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2874a:	9315      	str	r3, [sp, #84]	; 0x54
            for(y = 0; y < draw_area_h; y++) {
   2874c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2874e:	9a08      	ldr	r2, [sp, #32]
   28750:	4293      	cmp	r3, r2
   28752:	f340 80e2 	ble.w	2891a <lv_draw_map+0x4a4>
   28756:	197b      	adds	r3, r7, r5
   28758:	9311      	str	r3, [sp, #68]	; 0x44
   2875a:	469e      	mov	lr, r3
   2875c:	eb09 0345 	add.w	r3, r9, r5, lsl #1
   28760:	9313      	str	r3, [sp, #76]	; 0x4c
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   28762:	2300      	movs	r3, #0
                map_px = map_buf_tmp;
   28764:	f8dd c014 	ldr.w	ip, [sp, #20]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   28768:	930b      	str	r3, [sp, #44]	; 0x2c
   2876a:	e018      	b.n	2879e <lv_draw_map+0x328>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   2876c:	f04f 08f0 	mov.w	r8, #240	; 0xf0
   28770:	e7b0      	b.n	286d4 <lv_draw_map+0x25e>
            uint16_t recolor_premult[3] = {0};
   28772:	930c      	str	r3, [sp, #48]	; 0x30
   28774:	9310      	str	r3, [sp, #64]	; 0x40
   28776:	930e      	str	r3, [sp, #56]	; 0x38
   28778:	e7c9      	b.n	2870e <lv_draw_map+0x298>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   2877a:	2602      	movs	r6, #2
   2877c:	e7d5      	b.n	2872a <lv_draw_map+0x2b4>
                        if(alpha_byte) {
   2877e:	9b07      	ldr	r3, [sp, #28]
   28780:	2b00      	cmp	r3, #0
   28782:	d04e      	beq.n	28822 <lv_draw_map+0x3ac>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   28784:	f89c 3002 	ldrb.w	r3, [ip, #2]
                            mask_buf[px_i] = px_opa;
   28788:	f88e 3000 	strb.w	r3, [lr]
                            if(px_opa == 0) {
   2878c:	2b00      	cmp	r3, #0
   2878e:	d14c      	bne.n	2882a <lv_draw_map+0x3b4>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   28790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   28792:	3301      	adds	r3, #1
   28794:	930b      	str	r3, [sp, #44]	; 0x2c
   28796:	9b04      	ldr	r3, [sp, #16]
   28798:	f10e 0e01 	add.w	lr, lr, #1
   2879c:	449c      	add	ip, r3
   2879e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   287a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   287a2:	4293      	cmp	r3, r2
   287a4:	dceb      	bgt.n	2877e <lv_draw_map+0x308>
   287a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   287a8:	441d      	add	r5, r3
                if(other_mask_cnt) {
   287aa:	9b06      	ldr	r3, [sp, #24]
   287ac:	b313      	cbz	r3, 287f4 <lv_draw_map+0x37e>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
   287ae:	f8bb 0012 	ldrh.w	r0, [fp, #18]
   287b2:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
   287b6:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   287ba:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
   287be:	4402      	add	r2, r0
   287c0:	9808      	ldr	r0, [sp, #32]
   287c2:	4402      	add	r2, r0
   287c4:	f8bb 0010 	ldrh.w	r0, [fp, #16]
   287c8:	3301      	adds	r3, #1
   287ca:	1a5b      	subs	r3, r3, r1
   287cc:	4401      	add	r1, r0
   287ce:	b21b      	sxth	r3, r3
   287d0:	9811      	ldr	r0, [sp, #68]	; 0x44
   287d2:	b212      	sxth	r2, r2
   287d4:	b209      	sxth	r1, r1
   287d6:	f7f4 f8b7 	bl	1c948 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
   287da:	2800      	cmp	r0, #0
   287dc:	d16e      	bne.n	288bc <lv_draw_map+0x446>
   287de:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   287e2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
   287e6:	9811      	ldr	r0, [sp, #68]	; 0x44
   287e8:	3101      	adds	r1, #1
   287ea:	1ac9      	subs	r1, r1, r3
   287ec:	b209      	sxth	r1, r1
   287ee:	f7ff fe35 	bl	2845c <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   287f2:	2602      	movs	r6, #2
                map_buf_tmp += map_w * px_size_byte;
   287f4:	9b05      	ldr	r3, [sp, #20]
   287f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   287f8:	4413      	add	r3, r2
   287fa:	9305      	str	r3, [sp, #20]
   287fc:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   28800:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   28804:	3301      	adds	r3, #1
   28806:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   28808:	fa05 f383 	sxtah	r3, r5, r3
   2880c:	4543      	cmp	r3, r8
   2880e:	d259      	bcs.n	288c4 <lv_draw_map+0x44e>
                    blend_area.y2 ++;
   28810:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   28814:	3301      	adds	r3, #1
   28816:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
   2881a:	9b08      	ldr	r3, [sp, #32]
   2881c:	3301      	adds	r3, #1
   2881e:	9308      	str	r3, [sp, #32]
   28820:	e794      	b.n	2874c <lv_draw_map+0x2d6>
                            mask_buf[px_i] = 0xFF;
   28822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28826:	f88e 3000 	strb.w	r3, [lr]
                        c.full =  map_px[0] + (map_px[1] << 8);
   2882a:	f89c 2001 	ldrb.w	r2, [ip, #1]
   2882e:	f89c 3000 	ldrb.w	r3, [ip]
   28832:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        if(chroma_key) {
   28836:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        c.full =  map_px[0] + (map_px[1] << 8);
   28838:	b29b      	uxth	r3, r3
                        if(chroma_key) {
   2883a:	b13a      	cbz	r2, 2884c <lv_draw_map+0x3d6>
                            if(c.full == chroma_keyed_color.full) {
   2883c:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
   28840:	d104      	bne.n	2884c <lv_draw_map+0x3d6>
                                mask_buf[px_i] = LV_OPA_TRANSP;
   28842:	f04f 0300 	mov.w	r3, #0
   28846:	f88e 3000 	strb.w	r3, [lr]
                                continue;
   2884a:	e7a1      	b.n	28790 <lv_draw_map+0x31a>
                    if(draw_dsc->recolor_opa != 0) {
   2884c:	7aa2      	ldrb	r2, [r4, #10]
   2884e:	b382      	cbz	r2, 288b2 <lv_draw_map+0x43c>
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   28850:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   28852:	4610      	mov	r0, r2
   28854:	9a10      	ldr	r2, [sp, #64]	; 0x40
   28856:	f3c3 1145 	ubfx	r1, r3, #5, #6
   2885a:	fb01 2100 	mla	r1, r1, r0, r2
   2885e:	f248 0281 	movw	r2, #32897	; 0x8081
   28862:	4351      	muls	r1, r2
   28864:	f501 0180 	add.w	r1, r1, #4194304	; 0x400000
   28868:	f501 4181 	add.w	r1, r1, #16512	; 0x4080
   2886c:	f3c1 52c5 	ubfx	r2, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   28870:	990c      	ldr	r1, [sp, #48]	; 0x30
   28872:	9214      	str	r2, [sp, #80]	; 0x50
   28874:	f003 021f 	and.w	r2, r3, #31
   28878:	fb02 1200 	mla	r2, r2, r0, r1
   2887c:	f248 0181 	movw	r1, #32897	; 0x8081
   28880:	434a      	muls	r2, r1
   28882:	f502 0280 	add.w	r2, r2, #4194304	; 0x400000
   28886:	9914      	ldr	r1, [sp, #80]	; 0x50
   28888:	f502 4281 	add.w	r2, r2, #16512	; 0x4080
   2888c:	f3c2 52c4 	ubfx	r2, r2, #23, #5
   28890:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   28894:	990e      	ldr	r1, [sp, #56]	; 0x38
   28896:	0adb      	lsrs	r3, r3, #11
   28898:	fb03 1300 	mla	r3, r3, r0, r1
   2889c:	f248 0181 	movw	r1, #32897	; 0x8081
   288a0:	434b      	muls	r3, r1
   288a2:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   288a6:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
   288aa:	0ddb      	lsrs	r3, r3, #23
   288ac:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
   288b0:	b29b      	uxth	r3, r3
                    map2[px_i].full = c.full;
   288b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   288b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   288b6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   288ba:	e769      	b.n	28790 <lv_draw_map+0x31a>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   288bc:	2802      	cmp	r0, #2
   288be:	bf08      	it	eq
   288c0:	2602      	moveq	r6, #2
   288c2:	e797      	b.n	287f4 <lv_draw_map+0x37e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   288c4:	7ba3      	ldrb	r3, [r4, #14]
   288c6:	9302      	str	r3, [sp, #8]
   288c8:	7823      	ldrb	r3, [r4, #0]
   288ca:	464a      	mov	r2, r9
   288cc:	e9cd 6300 	strd	r6, r3, [sp]
   288d0:	a918      	add	r1, sp, #96	; 0x60
   288d2:	463b      	mov	r3, r7
   288d4:	4650      	mov	r0, sl
   288d6:	f7ff fbb2 	bl	2803e <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   288da:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   288de:	3301      	adds	r3, #1
   288e0:	b21b      	sxth	r3, r3
   288e2:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
   288e6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   288ea:	9b07      	ldr	r3, [sp, #28]
   288ec:	b98b      	cbnz	r3, 28912 <lv_draw_map+0x49c>
   288ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   288f0:	b97b      	cbnz	r3, 28912 <lv_draw_map+0x49c>
   288f2:	8863      	ldrh	r3, [r4, #2]
   288f4:	b96b      	cbnz	r3, 28912 <lv_draw_map+0x49c>
   288f6:	8923      	ldrh	r3, [r4, #8]
   288f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   288fc:	bf14      	ite	ne
   288fe:	2602      	movne	r6, #2
   28900:	2601      	moveq	r6, #1
                    if(other_mask_cnt) {
   28902:	9b06      	ldr	r3, [sp, #24]
   28904:	b13b      	cbz	r3, 28916 <lv_draw_map+0x4a0>
                        _lv_memset_ff(mask_buf, mask_buf_size);
   28906:	4641      	mov	r1, r8
   28908:	4638      	mov	r0, r7
   2890a:	f7ff fdab 	bl	28464 <_lv_memset_ff>
                    px_i = 0;
   2890e:	2500      	movs	r5, #0
   28910:	e783      	b.n	2881a <lv_draw_map+0x3a4>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   28912:	2602      	movs	r6, #2
   28914:	e7f5      	b.n	28902 <lv_draw_map+0x48c>
                    px_i = 0;
   28916:	9d06      	ldr	r5, [sp, #24]
   28918:	e77f      	b.n	2881a <lv_draw_map+0x3a4>
            if(blend_area.y1 != blend_area.y2) {
   2891a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   2891e:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   28922:	429a      	cmp	r2, r3
   28924:	d00d      	beq.n	28942 <lv_draw_map+0x4cc>
                blend_area.y2--;
   28926:	3b01      	subs	r3, #1
   28928:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   2892c:	7ba3      	ldrb	r3, [r4, #14]
   2892e:	9302      	str	r3, [sp, #8]
   28930:	7823      	ldrb	r3, [r4, #0]
   28932:	464a      	mov	r2, r9
   28934:	e9cd 6300 	strd	r6, r3, [sp]
   28938:	a918      	add	r1, sp, #96	; 0x60
   2893a:	463b      	mov	r3, r7
   2893c:	4650      	mov	r0, sl
   2893e:	f7ff fb7e 	bl	2803e <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   28942:	4638      	mov	r0, r7
   28944:	f7f4 ff14 	bl	1d770 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   28948:	4648      	mov	r0, r9
   2894a:	e6b7      	b.n	286bc <lv_draw_map+0x246>

0002894c <lv_draw_img_dsc_init>:
{
   2894c:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
   2894e:	2110      	movs	r1, #16
{
   28950:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
   28952:	f7ff fd83 	bl	2845c <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   28956:	23ff      	movs	r3, #255	; 0xff
   28958:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
   2895a:	f44f 7380 	mov.w	r3, #256	; 0x100
   2895e:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
   28960:	7be3      	ldrb	r3, [r4, #15]
    dsc->recolor = LV_COLOR_BLACK;
   28962:	2200      	movs	r2, #0
    dsc->antialias = LV_ANTIALIAS;
   28964:	f362 0300 	bfi	r3, r2, #0, #1
    dsc->recolor = LV_COLOR_BLACK;
   28968:	81a2      	strh	r2, [r4, #12]
    dsc->antialias = LV_ANTIALIAS;
   2896a:	73e3      	strb	r3, [r4, #15]
}
   2896c:	bd10      	pop	{r4, pc}

0002896e <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
   2896e:	2803      	cmp	r0, #3
   28970:	d005      	beq.n	2897e <lv_img_cf_is_chroma_keyed+0x10>
   28972:	3806      	subs	r0, #6
   28974:	2804      	cmp	r0, #4
   28976:	bf8c      	ite	hi
   28978:	2000      	movhi	r0, #0
   2897a:	2001      	movls	r0, #1
   2897c:	4770      	bx	lr
            is_chroma_keyed = true;
   2897e:	2001      	movs	r0, #1
}
   28980:	4770      	bx	lr

00028982 <lv_img_cf_has_alpha>:
    switch(cf) {
   28982:	280e      	cmp	r0, #14
   28984:	d809      	bhi.n	2899a <lv_img_cf_has_alpha+0x18>
   28986:	2301      	movs	r3, #1
   28988:	fa03 f000 	lsl.w	r0, r3, r0
   2898c:	f647 73a4 	movw	r3, #32676	; 0x7fa4
   28990:	4218      	tst	r0, r3
   28992:	bf14      	ite	ne
   28994:	2001      	movne	r0, #1
   28996:	2000      	moveq	r0, #0
   28998:	4770      	bx	lr
{
   2899a:	2000      	movs	r0, #0
}
   2899c:	4770      	bx	lr

0002899e <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
   2899e:	b150      	cbz	r0, 289b6 <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
   289a0:	7803      	ldrb	r3, [r0, #0]
   289a2:	f1a3 0220 	sub.w	r2, r3, #32
   289a6:	2a5f      	cmp	r2, #95	; 0x5f
   289a8:	d907      	bls.n	289ba <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
   289aa:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
   289ae:	bf0c      	ite	eq
   289b0:	2000      	moveq	r0, #0
   289b2:	2002      	movne	r0, #2
   289b4:	4770      	bx	lr
    if(src == NULL) return img_src_type;
   289b6:	2003      	movs	r0, #3
   289b8:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
   289ba:	2001      	movs	r0, #1
}
   289bc:	4770      	bx	lr

000289be <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
   289be:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
   289c0:	3830      	subs	r0, #48	; 0x30
   289c2:	b2c0      	uxtb	r0, r0
   289c4:	2809      	cmp	r0, #9
   289c6:	d90b      	bls.n	289e0 <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
   289c8:	2b60      	cmp	r3, #96	; 0x60
   289ca:	bf84      	itt	hi
   289cc:	3b20      	subhi	r3, #32
   289ce:	b2db      	uxtbhi	r3, r3

        switch(hex) {
   289d0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   289d4:	2a05      	cmp	r2, #5
   289d6:	d802      	bhi.n	289de <hex_char_to_num+0x20>
   289d8:	3b37      	subs	r3, #55	; 0x37
   289da:	b2d8      	uxtb	r0, r3
   289dc:	4770      	bx	lr
{
   289de:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
   289e0:	4770      	bx	lr

000289e2 <_lv_memset_00>:
{
   289e2:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   289e4:	2100      	movs	r1, #0
   289e6:	f002 bf05 	b.w	2b7f4 <memset>

000289ea <_lv_memset_00>:
   289ea:	460a      	mov	r2, r1
   289ec:	2100      	movs	r1, #0
   289ee:	f002 bf01 	b.w	2b7f4 <memset>

000289f2 <_lv_memset_ff>:
{
   289f2:	460a      	mov	r2, r1
   289f4:	21ff      	movs	r1, #255	; 0xff
   289f6:	f002 befd 	b.w	2b7f4 <memset>

000289fa <lv_draw_line_dsc_init>:
{
   289fa:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
   289fc:	210a      	movs	r1, #10
{
   289fe:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
   28a00:	f7ff fff3 	bl	289ea <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   28a04:	23ff      	movs	r3, #255	; 0xff
   28a06:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
   28a08:	2300      	movs	r3, #0
   28a0a:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
   28a0c:	2301      	movs	r3, #1
   28a0e:	8063      	strh	r3, [r4, #2]
}
   28a10:	bd10      	pop	{r4, pc}

00028a12 <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
   28a12:	29fc      	cmp	r1, #252	; 0xfc
   28a14:	d80a      	bhi.n	28a2c <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
   28a16:	2902      	cmp	r1, #2
   28a18:	d907      	bls.n	28a2a <mask_mix+0x18>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
   28a1a:	fb10 f001 	smulbb	r0, r0, r1
   28a1e:	f248 0181 	movw	r1, #32897	; 0x8081
   28a22:	4348      	muls	r0, r1
   28a24:	f3c0 50c7 	ubfx	r0, r0, #23, #8
   28a28:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
   28a2a:	2000      	movs	r0, #0
}
   28a2c:	4770      	bx	lr

00028a2e <_lv_memset_00>:
{
   28a2e:	460a      	mov	r2, r1
   28a30:	2100      	movs	r1, #0
   28a32:	f002 bedf 	b.w	2b7f4 <memset>

00028a36 <lv_draw_mask_line>:
{
   28a36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28a3a:	9e08      	ldr	r6, [sp, #32]
    abs_x -= p->origo.x;
   28a3c:	8a75      	ldrh	r5, [r6, #18]
   28a3e:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
   28a42:	1b49      	subs	r1, r1, r5
{
   28a44:	4604      	mov	r4, r0
    abs_y -= p->origo.y;
   28a46:	8ab0      	ldrh	r0, [r6, #20]
    abs_x -= p->origo.x;
   28a48:	b20d      	sxth	r5, r1
    if(p->steep == 0) {
   28a4a:	6a31      	ldr	r1, [r6, #32]
    abs_y -= p->origo.y;
   28a4c:	1a12      	subs	r2, r2, r0
   28a4e:	b212      	sxth	r2, r2
    if(p->steep == 0) {
   28a50:	f00c 0001 	and.w	r0, ip, #1
   28a54:	bb89      	cbnz	r1, 28aba <lv_draw_mask_line+0x84>
        if(p->flat) {
   28a56:	7c31      	ldrb	r1, [r6, #16]
   28a58:	f001 0602 	and.w	r6, r1, #2
   28a5c:	b170      	cbz	r0, 28a7c <lv_draw_mask_line+0x46>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
   28a5e:	b12e      	cbz	r6, 28a6c <lv_draw_mask_line+0x36>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a60:	f001 0103 	and.w	r1, r1, #3
   28a64:	2902      	cmp	r1, #2
   28a66:	d103      	bne.n	28a70 <lv_draw_mask_line+0x3a>
   28a68:	1c50      	adds	r0, r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   28a6a:	0fc0      	lsrs	r0, r0, #31
}
   28a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a70:	2903      	cmp	r1, #3
   28a72:	d101      	bne.n	28a78 <lv_draw_mask_line+0x42>
   28a74:	2a00      	cmp	r2, #0
   28a76:	dcf9      	bgt.n	28a6c <lv_draw_mask_line+0x36>
                return LV_DRAW_MASK_RES_TRANSP;
   28a78:	2000      	movs	r0, #0
   28a7a:	e7f7      	b.n	28a6c <lv_draw_mask_line+0x36>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
   28a7c:	2e00      	cmp	r6, #0
   28a7e:	f040 816a 	bne.w	28d56 <lv_draw_mask_line+0x320>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a82:	f001 0003 	and.w	r0, r1, #3
   28a86:	2801      	cmp	r0, #1
   28a88:	d10a      	bne.n	28aa0 <lv_draw_mask_line+0x6a>
   28a8a:	2d00      	cmp	r5, #0
   28a8c:	dcee      	bgt.n	28a6c <lv_draw_mask_line+0x36>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
   28a8e:	42dd      	cmn	r5, r3
   28a90:	d4f2      	bmi.n	28a78 <lv_draw_mask_line+0x42>
                    int32_t k = - abs_x;
   28a92:	4269      	negs	r1, r5
                    if(k < 0) k = 0;
   28a94:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
   28a98:	428b      	cmp	r3, r1
   28a9a:	dded      	ble.n	28a78 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   28a9c:	4620      	mov	r0, r4
   28a9e:	e0a2      	b.n	28be6 <lv_draw_mask_line+0x1b0>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
   28aa0:	2800      	cmp	r0, #0
   28aa2:	d1f4      	bne.n	28a8e <lv_draw_mask_line+0x58>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28aa4:	1959      	adds	r1, r3, r5
   28aa6:	f100 8156 	bmi.w	28d56 <lv_draw_mask_line+0x320>
                    int32_t k = - abs_x;
   28aaa:	4268      	negs	r0, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
   28aac:	2800      	cmp	r0, #0
   28aae:	dbe3      	blt.n	28a78 <lv_draw_mask_line+0x42>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
   28ab0:	4298      	cmp	r0, r3
   28ab2:	f2c0 8097 	blt.w	28be4 <lv_draw_mask_line+0x1ae>
    return LV_DRAW_MASK_RES_CHANGED;
   28ab6:	2002      	movs	r0, #2
   28ab8:	e7d8      	b.n	28a6c <lv_draw_mask_line+0x36>
    if(p->flat) {
   28aba:	f00c 0c02 	and.w	ip, ip, #2
   28abe:	2800      	cmp	r0, #0
   28ac0:	f000 8094 	beq.w	28bec <lv_draw_mask_line+0x1b6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   28ac4:	69f7      	ldr	r7, [r6, #28]
   28ac6:	fb05 f107 	mul.w	r1, r5, r7
    if(p->yx_steep > 0) {
   28aca:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   28acc:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   28ad0:	fa5f f08c 	uxtb.w	r0, ip
   28ad4:	dd05      	ble.n	28ae2 <lv_draw_mask_line+0xac>
        if(y_at_x > abs_y) {
   28ad6:	4291      	cmp	r1, r2
   28ad8:	dd05      	ble.n	28ae6 <lv_draw_mask_line+0xb0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   28ada:	3800      	subs	r0, #0
   28adc:	bf18      	it	ne
   28ade:	2001      	movne	r0, #1
   28ae0:	e7c4      	b.n	28a6c <lv_draw_mask_line+0x36>
        if(y_at_x < abs_y) {
   28ae2:	4291      	cmp	r1, r2
   28ae4:	dbf9      	blt.n	28ada <lv_draw_mask_line+0xa4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   28ae6:	1959      	adds	r1, r3, r5
   28ae8:	4379      	muls	r1, r7
    if(p->yx_steep > 0) {
   28aea:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   28aec:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   28af0:	dd05      	ble.n	28afe <lv_draw_mask_line+0xc8>
        if(y_at_x < abs_y) {
   28af2:	4291      	cmp	r1, r2
   28af4:	da06      	bge.n	28b04 <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   28af6:	fab0 f080 	clz	r0, r0
   28afa:	0940      	lsrs	r0, r0, #5
   28afc:	e7b6      	b.n	28a6c <lv_draw_mask_line+0x36>
        if(y_at_x > abs_y) {
   28afe:	4291      	cmp	r1, r2
   28b00:	dcf9      	bgt.n	28af6 <lv_draw_mask_line+0xc0>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   28b02:	3201      	adds	r2, #1
   28b04:	69b1      	ldr	r1, [r6, #24]
   28b06:	0212      	lsls	r2, r2, #8
   28b08:	434a      	muls	r2, r1
   28b0a:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
   28b0c:	ea4f 2c22 	mov.w	ip, r2, asr #8
    if(xef == 0) px_h = 255;
   28b10:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
   28b14:	bf1f      	itttt	ne
   28b16:	6a71      	ldrne	r1, [r6, #36]	; 0x24
   28b18:	f1c2 07ff 	rsbne	r7, r2, #255	; 0xff
   28b1c:	434f      	mulne	r7, r1
   28b1e:	123f      	asrne	r7, r7, #8
   28b20:	bf14      	ite	ne
   28b22:	f1c7 07ff 	rsbne	r7, r7, #255	; 0xff
    if(xef == 0) px_h = 255;
   28b26:	27ff      	moveq	r7, #255	; 0xff
    int32_t k = xei - abs_x;
   28b28:	ebac 0505 	sub.w	r5, ip, r5
    if(xef) {
   28b2c:	2a00      	cmp	r2, #0
   28b2e:	d050      	beq.n	28bd2 <lv_draw_mask_line+0x19c>
        if(k >= 0 && k < len) {
   28b30:	2d00      	cmp	r5, #0
   28b32:	db0f      	blt.n	28b54 <lv_draw_mask_line+0x11e>
   28b34:	42ab      	cmp	r3, r5
   28b36:	dd0d      	ble.n	28b54 <lv_draw_mask_line+0x11e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   28b38:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
   28b3c:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
   28b40:	434a      	muls	r2, r1
   28b42:	f3c2 2147 	ubfx	r1, r2, #9, #8
            if(p->inv) m = 255 - m;
   28b46:	b908      	cbnz	r0, 28b4c <lv_draw_mask_line+0x116>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   28b48:	43c9      	mvns	r1, r1
   28b4a:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   28b4c:	5d60      	ldrb	r0, [r4, r5]
   28b4e:	f7ff ff60 	bl	28a12 <mask_mix>
   28b52:	5560      	strb	r0, [r4, r5]
        k++;
   28b54:	1c6a      	adds	r2, r5, #1
    while(px_h > p->spx) {
   28b56:	6a71      	ldr	r1, [r6, #36]	; 0x24
   28b58:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
   28b5c:	428f      	cmp	r7, r1
   28b5e:	f000 0002 	and.w	r0, r0, #2
   28b62:	dc16      	bgt.n	28b92 <lv_draw_mask_line+0x15c>
    if(k < len && k >= 0) {
   28b64:	4293      	cmp	r3, r2
   28b66:	dd28      	ble.n	28bba <lv_draw_mask_line+0x184>
   28b68:	2a00      	cmp	r2, #0
   28b6a:	db26      	blt.n	28bba <lv_draw_mask_line+0x184>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
   28b6c:	69b1      	ldr	r1, [r6, #24]
   28b6e:	4379      	muls	r1, r7
   28b70:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
   28b72:	4379      	muls	r1, r7
        if(p->yx_steep < 0) m = 255 - m;
   28b74:	69f7      	ldr	r7, [r6, #28]
        m = (x_inters * px_h) >> 9;
   28b76:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
   28b7a:	2f00      	cmp	r7, #0
   28b7c:	bfbc      	itt	lt
   28b7e:	43c9      	mvnlt	r1, r1
   28b80:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
   28b82:	b108      	cbz	r0, 28b88 <lv_draw_mask_line+0x152>
   28b84:	43c9      	mvns	r1, r1
   28b86:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
   28b88:	5ca0      	ldrb	r0, [r4, r2]
   28b8a:	f7ff ff42 	bl	28a12 <mask_mix>
   28b8e:	54a0      	strb	r0, [r4, r2]
   28b90:	e013      	b.n	28bba <lv_draw_mask_line+0x184>
        if(k >= 0 && k < len) {
   28b92:	2a00      	cmp	r2, #0
   28b94:	db0b      	blt.n	28bae <lv_draw_mask_line+0x178>
   28b96:	4293      	cmp	r3, r2
   28b98:	dd09      	ble.n	28bae <lv_draw_mask_line+0x178>
            m = px_h - (p->spx >> 1);
   28b9a:	eba7 0161 	sub.w	r1, r7, r1, asr #1
   28b9e:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
   28ba0:	b108      	cbz	r0, 28ba6 <lv_draw_mask_line+0x170>
   28ba2:	43c9      	mvns	r1, r1
   28ba4:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   28ba6:	5ca0      	ldrb	r0, [r4, r2]
   28ba8:	f7ff ff33 	bl	28a12 <mask_mix>
   28bac:	54a0      	strb	r0, [r4, r2]
        px_h -= p->spx;
   28bae:	6a71      	ldr	r1, [r6, #36]	; 0x24
        k++;
   28bb0:	3201      	adds	r2, #1
        if(k >= len) break;
   28bb2:	4293      	cmp	r3, r2
        px_h -= p->spx;
   28bb4:	eba7 0701 	sub.w	r7, r7, r1
        if(k >= len) break;
   28bb8:	dccd      	bgt.n	28b56 <lv_draw_mask_line+0x120>
    if(p->inv) {
   28bba:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28bbe:	0788      	lsls	r0, r1, #30
   28bc0:	d509      	bpl.n	28bd6 <lv_draw_mask_line+0x1a0>
        if(k > len) {
   28bc2:	42ab      	cmp	r3, r5
   28bc4:	f6ff af58 	blt.w	28a78 <lv_draw_mask_line+0x42>
        if(k >= 0) {
   28bc8:	2d00      	cmp	r5, #0
   28bca:	f6ff af74 	blt.w	28ab6 <lv_draw_mask_line+0x80>
            _lv_memset_00(&mask_buf[0], k);
   28bce:	4629      	mov	r1, r5
   28bd0:	e764      	b.n	28a9c <lv_draw_mask_line+0x66>
    int32_t k = xei - abs_x;
   28bd2:	462a      	mov	r2, r5
   28bd4:	e7bf      	b.n	28b56 <lv_draw_mask_line+0x120>
        if(k < 0) {
   28bd6:	1c50      	adds	r0, r2, #1
   28bd8:	f53f af4e 	bmi.w	28a78 <lv_draw_mask_line+0x42>
        if(k <= len) {
   28bdc:	4283      	cmp	r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   28bde:	f6ff af6a 	blt.w	28ab6 <lv_draw_mask_line+0x80>
   28be2:	1a19      	subs	r1, r3, r0
   28be4:	4420      	add	r0, r4
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   28be6:	f7ff ff22 	bl	28a2e <_lv_memset_00>
   28bea:	e764      	b.n	28ab6 <lv_draw_mask_line+0x80>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   28bec:	69b1      	ldr	r1, [r6, #24]
   28bee:	fb02 f701 	mul.w	r7, r2, r1
    if(p->xy_steep > 0) x_at_y++;
   28bf2:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   28bf4:	ea4f 27a7 	mov.w	r7, r7, asr #10
    if(p->xy_steep > 0) x_at_y++;
   28bf8:	bfcc      	ite	gt
   28bfa:	f107 0e01 	addgt.w	lr, r7, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   28bfe:	46be      	movle	lr, r7
    if(x_at_y < abs_x) {
   28c00:	45ae      	cmp	lr, r5
   28c02:	fa5f f08c 	uxtb.w	r0, ip
   28c06:	f6ff af68 	blt.w	28ada <lv_draw_mask_line+0xa4>
    if(x_at_y > abs_x + len) {
   28c0a:	eb03 0c05 	add.w	ip, r3, r5
   28c0e:	4567      	cmp	r7, ip
   28c10:	f73f af71 	bgt.w	28af6 <lv_draw_mask_line+0xc0>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   28c14:	1c57      	adds	r7, r2, #1
   28c16:	023f      	lsls	r7, r7, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   28c18:	ea4f 2e02 	mov.w	lr, r2, lsl #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   28c1c:	434f      	muls	r7, r1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   28c1e:	fb01 fe0e 	mul.w	lr, r1, lr
    int32_t xei = xe >> 8;
   28c22:	ea4f 48a7 	mov.w	r8, r7, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   28c26:	ebb8 4fae 	cmp.w	r8, lr, asr #18
    int32_t xsf = xs & 0xFF;
   28c2a:	f3ce 2c87 	ubfx	ip, lr, #10, #8
    k = xsi - abs_x;
   28c2e:	ebc5 42ae 	rsb	r2, r5, lr, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   28c32:	f000 8095 	beq.w	28d60 <lv_draw_mask_line+0x32a>
   28c36:	2900      	cmp	r1, #0
   28c38:	da54      	bge.n	28ce4 <lv_draw_mask_line+0x2ae>
   28c3a:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   28c3e:	f1bc 0f00 	cmp.w	ip, #0
   28c42:	f000 808a 	beq.w	28d5a <lv_draw_mask_line+0x324>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   28c46:	69f5      	ldr	r5, [r6, #28]
   28c48:	fb05 f50c 	mul.w	r5, r5, ip
   28c4c:	426d      	negs	r5, r5
            if(k >= 0 && k < len) {
   28c4e:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   28c50:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   28c54:	db0c      	blt.n	28c70 <lv_draw_mask_line+0x23a>
   28c56:	4293      	cmp	r3, r2
   28c58:	dd0a      	ble.n	28c70 <lv_draw_mask_line+0x23a>
                m = (y_inters * xsf) >> 9;
   28c5a:	fb05 f10c 	mul.w	r1, r5, ip
   28c5e:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   28c62:	b108      	cbz	r0, 28c68 <lv_draw_mask_line+0x232>
   28c64:	43c9      	mvns	r1, r1
   28c66:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28c68:	5ca0      	ldrb	r0, [r4, r2]
   28c6a:	f7ff fed2 	bl	28a12 <mask_mix>
   28c6e:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   28c70:	f1b9 0f00 	cmp.w	r9, #0
   28c74:	db18      	blt.n	28ca8 <lv_draw_mask_line+0x272>
   28c76:	454b      	cmp	r3, r9
   28c78:	dd16      	ble.n	28ca8 <lv_draw_mask_line+0x272>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
   28c7a:	69b1      	ldr	r1, [r6, #24]
   28c7c:	f1a5 00ff 	sub.w	r0, r5, #255	; 0xff
   28c80:	4341      	muls	r1, r0
   28c82:	1288      	asrs	r0, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c84:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
   28c88:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
   28c8a:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c8e:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   28c92:	0787      	lsls	r7, r0, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c94:	bf58      	it	pl
   28c96:	43c9      	mvnpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28c98:	f814 0009 	ldrb.w	r0, [r4, r9]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c9c:	bf58      	it	pl
   28c9e:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28ca0:	f7ff feb7 	bl	28a12 <mask_mix>
   28ca4:	f804 0009 	strb.w	r0, [r4, r9]
            if(p->inv) {
   28ca8:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28cac:	078d      	lsls	r5, r1, #30
   28cae:	d514      	bpl.n	28cda <lv_draw_mask_line+0x2a4>
                if(k > len) k = len;
   28cb0:	454b      	cmp	r3, r9
   28cb2:	f6ff af00 	blt.w	28ab6 <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
   28cb6:	f1b9 0f00 	cmp.w	r9, #0
   28cba:	f77f aefc 	ble.w	28ab6 <lv_draw_mask_line+0x80>
   28cbe:	4649      	mov	r1, r9
   28cc0:	e6ec      	b.n	28a9c <lv_draw_mask_line+0x66>
        k++;
   28cc2:	3201      	adds	r2, #1
   28cc4:	429a      	cmp	r2, r3
   28cc6:	bfa8      	it	ge
   28cc8:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
   28cca:	2a00      	cmp	r2, #0
   28ccc:	f43f aed4 	beq.w	28a78 <lv_draw_mask_line+0x42>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   28cd0:	f77f aef1 	ble.w	28ab6 <lv_draw_mask_line+0x80>
   28cd4:	1a99      	subs	r1, r3, r2
   28cd6:	18a0      	adds	r0, r4, r2
   28cd8:	e785      	b.n	28be6 <lv_draw_mask_line+0x1b0>
            k += 2;
   28cda:	1c50      	adds	r0, r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   28cdc:	4283      	cmp	r3, r0
   28cde:	db3a      	blt.n	28d56 <lv_draw_mask_line+0x320>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   28ce0:	2800      	cmp	r0, #0
   28ce2:	e77c      	b.n	28bde <lv_draw_mask_line+0x1a8>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   28ce4:	69f5      	ldr	r5, [r6, #28]
   28ce6:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
   28cea:	434d      	muls	r5, r1
            if(k >= 0 && k < len) {
   28cec:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   28cee:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   28cf2:	db0b      	blt.n	28d0c <lv_draw_mask_line+0x2d6>
   28cf4:	4293      	cmp	r3, r2
   28cf6:	dd09      	ble.n	28d0c <lv_draw_mask_line+0x2d6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   28cf8:	4369      	muls	r1, r5
   28cfa:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   28cfe:	b908      	cbnz	r0, 28d04 <lv_draw_mask_line+0x2ce>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   28d00:	43c9      	mvns	r1, r1
   28d02:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28d04:	5ca0      	ldrb	r0, [r4, r2]
   28d06:	f7ff fe84 	bl	28a12 <mask_mix>
   28d0a:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   28d0c:	1c57      	adds	r7, r2, #1
   28d0e:	d414      	bmi.n	28d3a <lv_draw_mask_line+0x304>
   28d10:	42bb      	cmp	r3, r7
   28d12:	dd12      	ble.n	28d3a <lv_draw_mask_line+0x304>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   28d14:	69b1      	ldr	r1, [r6, #24]
                if(p->inv) m = 255 - m;
   28d16:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   28d1a:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
   28d1e:	4369      	muls	r1, r5
   28d20:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
   28d22:	434d      	muls	r5, r1
                if(p->inv) m = 255 - m;
   28d24:	0780      	lsls	r0, r0, #30
                m = ((255 - y_inters) * x_inters) >> 9;
   28d26:	f3c5 2147 	ubfx	r1, r5, #9, #8
                if(p->inv) m = 255 - m;
   28d2a:	bf48      	it	mi
   28d2c:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28d2e:	5de0      	ldrb	r0, [r4, r7]
                if(p->inv) m = 255 - m;
   28d30:	bf48      	it	mi
   28d32:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28d34:	f7ff fe6d 	bl	28a12 <mask_mix>
   28d38:	55e0      	strb	r0, [r4, r7]
            if(p->inv) {
   28d3a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28d3e:	0789      	lsls	r1, r1, #30
   28d40:	d507      	bpl.n	28d52 <lv_draw_mask_line+0x31c>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
   28d42:	4293      	cmp	r3, r2
   28d44:	f6ff ae98 	blt.w	28a78 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   28d48:	2a00      	cmp	r2, #0
   28d4a:	f6ff aeb4 	blt.w	28ab6 <lv_draw_mask_line+0x80>
   28d4e:	4611      	mov	r1, r2
   28d50:	e6a4      	b.n	28a9c <lv_draw_mask_line+0x66>
            k++;
   28d52:	3202      	adds	r2, #2
   28d54:	e7b6      	b.n	28cc4 <lv_draw_mask_line+0x28e>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   28d56:	2001      	movs	r0, #1
   28d58:	e688      	b.n	28a6c <lv_draw_mask_line+0x36>
   28d5a:	464a      	mov	r2, r9
        xsf = 0xFF;
   28d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if(k >= 0 && k < len) {
   28d60:	2a00      	cmp	r2, #0
   28d62:	db0d      	blt.n	28d80 <lv_draw_mask_line+0x34a>
   28d64:	4293      	cmp	r3, r2
   28d66:	dd0b      	ble.n	28d80 <lv_draw_mask_line+0x34a>
    int32_t xef = xe & 0xFF;
   28d68:	f3c7 2187 	ubfx	r1, r7, #10, #8
            m = (xsf + xef) >> 1;
   28d6c:	4461      	add	r1, ip
   28d6e:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
   28d72:	b108      	cbz	r0, 28d78 <lv_draw_mask_line+0x342>
   28d74:	43c9      	mvns	r1, r1
   28d76:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   28d78:	5ca0      	ldrb	r0, [r4, r2]
   28d7a:	f7ff fe4a 	bl	28a12 <mask_mix>
   28d7e:	54a0      	strb	r0, [r4, r2]
        if(p->inv) {
   28d80:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28d84:	0789      	lsls	r1, r1, #30
   28d86:	d59c      	bpl.n	28cc2 <lv_draw_mask_line+0x28c>
            k = xsi - abs_x;
   28d88:	eba8 0105 	sub.w	r1, r8, r5
            if(k >= len) {
   28d8c:	428b      	cmp	r3, r1
   28d8e:	f77f ae73 	ble.w	28a78 <lv_draw_mask_line+0x42>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
   28d92:	2900      	cmp	r1, #0
   28d94:	f6ff ae8f 	blt.w	28ab6 <lv_draw_mask_line+0x80>
   28d98:	e680      	b.n	28a9c <lv_draw_mask_line+0x66>

00028d9a <_lv_memcpy_small.constprop.0>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28d9a:	680a      	ldr	r2, [r1, #0]
   28d9c:	6002      	str	r2, [r0, #0]
   28d9e:	684a      	ldr	r2, [r1, #4]
   28da0:	6042      	str	r2, [r0, #4]
}
   28da2:	4770      	bx	lr

00028da4 <lv_draw_mask_radius>:
{
   28da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28da8:	b08d      	sub	sp, #52	; 0x34
   28daa:	4605      	mov	r5, r0
   28dac:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
   28dae:	f897 8012 	ldrb.w	r8, [r7, #18]
    int32_t radius = p->cfg.radius;
   28db2:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
{
   28db6:	468b      	mov	fp, r1
   28db8:	461c      	mov	r4, r3
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   28dba:	f107 0108 	add.w	r1, r7, #8
    bool outer = p->cfg.outer;
   28dbe:	f008 0301 	and.w	r3, r8, #1
   28dc2:	a80a      	add	r0, sp, #40	; 0x28
{
   28dc4:	4691      	mov	r9, r2
    bool outer = p->cfg.outer;
   28dc6:	9301      	str	r3, [sp, #4]
   28dc8:	f7ff ffe7 	bl	28d9a <_lv_memcpy_small.constprop.0>
    if(outer == false) {
   28dcc:	9b01      	ldr	r3, [sp, #4]
   28dce:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
   28dd2:	bbc3      	cbnz	r3, 28e46 <lv_draw_mask_radius+0xa2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28dd4:	454a      	cmp	r2, r9
   28dd6:	dd01      	ble.n	28ddc <lv_draw_mask_radius+0x38>
                    return LV_DRAW_MASK_RES_TRANSP;
   28dd8:	2000      	movs	r0, #0
   28dda:	e037      	b.n	28e4c <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28ddc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   28de0:	454b      	cmp	r3, r9
   28de2:	dbf9      	blt.n	28dd8 <lv_draw_mask_radius+0x34>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   28de4:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   28de8:	eb01 030a 	add.w	r3, r1, sl
   28dec:	459b      	cmp	fp, r3
   28dee:	eba1 060b 	sub.w	r6, r1, fp
   28df2:	db07      	blt.n	28e04 <lv_draw_mask_radius+0x60>
   28df4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   28df8:	eb04 000b 	add.w	r0, r4, fp
   28dfc:	eba3 030a 	sub.w	r3, r3, sl
   28e00:	4298      	cmp	r0, r3
   28e02:	dd09      	ble.n	28e18 <lv_draw_mask_radius+0x74>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   28e04:	eb02 030a 	add.w	r3, r2, sl
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   28e08:	4599      	cmp	r9, r3
   28e0a:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
   28e0e:	db3a      	blt.n	28e86 <lv_draw_mask_radius+0xe2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   28e10:	eba0 030a 	sub.w	r3, r0, sl
   28e14:	4599      	cmp	r9, r3
   28e16:	dc36      	bgt.n	28e86 <lv_draw_mask_radius+0xe2>
        if(outer == false) {
   28e18:	9b01      	ldr	r3, [sp, #4]
   28e1a:	bb23      	cbnz	r3, 28e66 <lv_draw_mask_radius+0xc2>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
   28e1c:	42b4      	cmp	r4, r6
   28e1e:	dbdb      	blt.n	28dd8 <lv_draw_mask_radius+0x34>
            if(last >= 0) {
   28e20:	2e00      	cmp	r6, #0
   28e22:	db03      	blt.n	28e2c <lv_draw_mask_radius+0x88>
                _lv_memset_00(&mask_buf[0], last);
   28e24:	4631      	mov	r1, r6
   28e26:	4628      	mov	r0, r5
   28e28:	f7ff fe01 	bl	28a2e <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
   28e2c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   28e30:	3101      	adds	r1, #1
   28e32:	eba1 000b 	sub.w	r0, r1, fp
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
   28e36:	2800      	cmp	r0, #0
   28e38:	ddce      	ble.n	28dd8 <lv_draw_mask_radius+0x34>
            else if(first < len) {
   28e3a:	42a0      	cmp	r0, r4
   28e3c:	da0e      	bge.n	28e5c <lv_draw_mask_radius+0xb8>
                _lv_memset_00(&mask_buf[first], len - first);
   28e3e:	1a61      	subs	r1, r4, r1
   28e40:	4459      	add	r1, fp
                    _lv_memset_00(&mask_buf[first], len_tmp);
   28e42:	4428      	add	r0, r5
   28e44:	e0b8      	b.n	28fb8 <lv_draw_mask_radius+0x214>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28e46:	454a      	cmp	r2, r9
   28e48:	dd03      	ble.n	28e52 <lv_draw_mask_radius+0xae>
            return LV_DRAW_MASK_RES_FULL_COVER;
   28e4a:	2001      	movs	r0, #1
}
   28e4c:	b00d      	add	sp, #52	; 0x34
   28e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28e52:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   28e56:	454b      	cmp	r3, r9
   28e58:	dac4      	bge.n	28de4 <lv_draw_mask_radius+0x40>
   28e5a:	e7f6      	b.n	28e4a <lv_draw_mask_radius+0xa6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
   28e5c:	b90e      	cbnz	r6, 28e62 <lv_draw_mask_radius+0xbe>
   28e5e:	42a0      	cmp	r0, r4
   28e60:	d0f3      	beq.n	28e4a <lv_draw_mask_radius+0xa6>
    return LV_DRAW_MASK_RES_CHANGED;
   28e62:	2002      	movs	r0, #2
   28e64:	e7f2      	b.n	28e4c <lv_draw_mask_radius+0xa8>
            if(first < 0) first = 0;
   28e66:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
            if(first <= len) {
   28e6a:	42a0      	cmp	r0, r4
   28e6c:	dcf9      	bgt.n	28e62 <lv_draw_mask_radius+0xbe>
                int32_t last =  rect.x2 - abs_x - first + 1;
   28e6e:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   28e72:	3101      	adds	r1, #1
   28e74:	eba1 010b 	sub.w	r1, r1, fp
                if(first + last > len) last = len - first;
   28e78:	42a1      	cmp	r1, r4
                int32_t last =  rect.x2 - abs_x - first + 1;
   28e7a:	bfd4      	ite	le
   28e7c:	1a09      	suble	r1, r1, r0
                if(first + last > len) last = len - first;
   28e7e:	1a21      	subgt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   28e80:	2900      	cmp	r1, #0
   28e82:	dbee      	blt.n	28e62 <lv_draw_mask_radius+0xbe>
   28e84:	e7dd      	b.n	28e42 <lv_draw_mask_radius+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   28e86:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   28e8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    abs_y -= rect.y1;
   28e8e:	eba9 0902 	sub.w	r9, r9, r2
   28e92:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28e96:	3001      	adds	r0, #1
   28e98:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   28e9c:	ebab 0b01 	sub.w	fp, fp, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28ea0:	1a80      	subs	r0, r0, r2
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   28ea2:	435b      	muls	r3, r3
    if(abs_y < radius || abs_y > h - radius - 1) {
   28ea4:	45ca      	cmp	sl, r9
    int32_t w = lv_area_get_width(&rect);
   28ea6:	fa0f fb8b 	sxth.w	fp, fp
    int32_t h = lv_area_get_height(&rect);
   28eaa:	b200      	sxth	r0, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   28eac:	9302      	str	r3, [sp, #8]
    if(abs_y < radius || abs_y > h - radius - 1) {
   28eae:	f300 8193 	bgt.w	291d8 <lv_draw_mask_radius+0x434>
   28eb2:	1e43      	subs	r3, r0, #1
   28eb4:	eba3 030a 	sub.w	r3, r3, sl
   28eb8:	4599      	cmp	r9, r3
   28eba:	ddd2      	ble.n	28e62 <lv_draw_mask_radius+0xbe>
            y = radius - (h - abs_y) + 1;
   28ebc:	eba9 0900 	sub.w	r9, r9, r0
            if((y - 1) == p->y_prev) {
   28ec0:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   28ec2:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - (h - abs_y) + 1;
   28ec6:	eb09 000a 	add.w	r0, r9, sl
        if(radius <= 256) sqrt_mask = 0x800;
   28eca:	bfd4      	ite	le
   28ecc:	f44f 6800 	movle.w	r8, #2048	; 0x800
   28ed0:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
   28ed4:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
   28ed6:	f100 0901 	add.w	r9, r0, #1
            if((y - 1) == p->y_prev) {
   28eda:	d070      	beq.n	28fbe <lv_draw_mask_radius+0x21a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   28edc:	9b02      	ldr	r3, [sp, #8]
   28ede:	4642      	mov	r2, r8
   28ee0:	a907      	add	r1, sp, #28
   28ee2:	fb00 3010 	mls	r0, r0, r0, r3
   28ee6:	f001 fc10 	bl	2a70a <_lv_sqrt>
   28eea:	e06a      	b.n	28fc2 <lv_draw_mask_radius+0x21e>
                x0.i = p->y_prev_x.i;
   28eec:	69bb      	ldr	r3, [r7, #24]
   28eee:	9306      	str	r3, [sp, #24]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   28ef0:	9802      	ldr	r0, [sp, #8]
   28ef2:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   28ef6:	fb03 0013 	mls	r0, r3, r3, r0
   28efa:	4642      	mov	r2, r8
   28efc:	a907      	add	r1, sp, #28
   28efe:	9303      	str	r3, [sp, #12]
   28f00:	f001 fc03 	bl	2a70a <_lv_sqrt>
            p->y_prev = y - 1;
   28f04:	9b03      	ldr	r3, [sp, #12]
   28f06:	617b      	str	r3, [r7, #20]
            p->y_prev_x.i = x1.i;
   28f08:	9b07      	ldr	r3, [sp, #28]
            p->y_prev_x.i = x0.i;
   28f0a:	61bb      	str	r3, [r7, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
   28f0c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   28f10:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   28f14:	3b01      	subs	r3, #1
   28f16:	4299      	cmp	r1, r3
   28f18:	d107      	bne.n	28f2a <lv_draw_mask_radius+0x186>
   28f1a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   28f1e:	b923      	cbnz	r3, 28f2a <lv_draw_mask_radius+0x186>
            x1.f = 0xFF;
   28f20:	23ff      	movs	r3, #255	; 0xff
            x1.i--;
   28f22:	f8ad 101c 	strh.w	r1, [sp, #28]
            x1.f = 0xFF;
   28f26:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(x0.i == x1.i) {
   28f2a:	eb06 070b 	add.w	r7, r6, fp
   28f2e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   28f32:	ea6f 0b01 	mvn.w	fp, r1
   28f36:	44d3      	add	fp, sl
   28f38:	eba7 030b 	sub.w	r3, r7, fp
   28f3c:	4288      	cmp	r0, r1
   28f3e:	eb06 0a0b 	add.w	sl, r6, fp
   28f42:	9303      	str	r3, [sp, #12]
   28f44:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   28f48:	d152      	bne.n	28ff0 <lv_draw_mask_radius+0x24c>
            lv_opa_t m = (x0.f + x1.f) >> 1;
   28f4a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   28f4e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(outer) m = 255 - m;
   28f52:	9b01      	ldr	r3, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
   28f54:	440a      	add	r2, r1
   28f56:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
   28f5a:	b10b      	cbz	r3, 28f60 <lv_draw_mask_radius+0x1bc>
   28f5c:	43d2      	mvns	r2, r2
   28f5e:	b2d2      	uxtb	r2, r2
            if(kl >= 0 && kl < len) {
   28f60:	f1ba 0f00 	cmp.w	sl, #0
   28f64:	db08      	blt.n	28f78 <lv_draw_mask_radius+0x1d4>
   28f66:	4554      	cmp	r4, sl
   28f68:	dd06      	ble.n	28f78 <lv_draw_mask_radius+0x1d4>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
   28f6a:	f815 000a 	ldrb.w	r0, [r5, sl]
   28f6e:	4611      	mov	r1, r2
   28f70:	f7ff fd4f 	bl	28a12 <mask_mix>
   28f74:	f805 000a 	strb.w	r0, [r5, sl]
            if(kr >= 0 && kr < len) {
   28f78:	2e00      	cmp	r6, #0
   28f7a:	db06      	blt.n	28f8a <lv_draw_mask_radius+0x1e6>
   28f7c:	42b4      	cmp	r4, r6
   28f7e:	dd04      	ble.n	28f8a <lv_draw_mask_radius+0x1e6>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
   28f80:	5da8      	ldrb	r0, [r5, r6]
   28f82:	4611      	mov	r1, r2
   28f84:	f7ff fd45 	bl	28a12 <mask_mix>
   28f88:	55a8      	strb	r0, [r5, r6]
            if(outer == false) {
   28f8a:	9b01      	ldr	r3, [sp, #4]
   28f8c:	bb23      	cbnz	r3, 28fd8 <lv_draw_mask_radius+0x234>
                if(kl > len)  {
   28f8e:	4554      	cmp	r4, sl
   28f90:	f6ff af22 	blt.w	28dd8 <lv_draw_mask_radius+0x34>
                if(kl >= 0) {
   28f94:	f1ba 0f00 	cmp.w	sl, #0
   28f98:	db03      	blt.n	28fa2 <lv_draw_mask_radius+0x1fe>
                    _lv_memset_00(&mask_buf[0], kl);
   28f9a:	4651      	mov	r1, sl
   28f9c:	4628      	mov	r0, r5
   28f9e:	f7ff fd46 	bl	28a2e <_lv_memset_00>
                if(kr < 0) {
   28fa2:	9b03      	ldr	r3, [sp, #12]
   28fa4:	2b00      	cmp	r3, #0
   28fa6:	f6ff af17 	blt.w	28dd8 <lv_draw_mask_radius+0x34>
                if(kr <= len) {
   28faa:	429c      	cmp	r4, r3
   28fac:	f6ff af59 	blt.w	28e62 <lv_draw_mask_radius+0xbe>
                    _lv_memset_00(&mask_buf[kr], len - kr);
   28fb0:	1be1      	subs	r1, r4, r7
   28fb2:	442b      	add	r3, r5
   28fb4:	4459      	add	r1, fp
   28fb6:	4618      	mov	r0, r3
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   28fb8:	f7ff fd39 	bl	28a2e <_lv_memset_00>
   28fbc:	e751      	b.n	28e62 <lv_draw_mask_radius+0xbe>
                x1.i = p->y_prev_x.i;
   28fbe:	69bb      	ldr	r3, [r7, #24]
   28fc0:	9307      	str	r3, [sp, #28]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   28fc2:	9b02      	ldr	r3, [sp, #8]
   28fc4:	4642      	mov	r2, r8
   28fc6:	fb09 3019 	mls	r0, r9, r9, r3
   28fca:	a906      	add	r1, sp, #24
   28fcc:	f001 fb9d 	bl	2a70a <_lv_sqrt>
            p->y_prev_x.i = x0.i;
   28fd0:	9b06      	ldr	r3, [sp, #24]
            p->y_prev = y;
   28fd2:	f8c7 9014 	str.w	r9, [r7, #20]
            p->y_prev_x.i = x0.i;
   28fd6:	e798      	b.n	28f0a <lv_draw_mask_radius+0x166>
                kl++;
   28fd8:	f10a 0001 	add.w	r0, sl, #1
   28fdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   28fe0:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   28fe2:	bfac      	ite	ge
   28fe4:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   28fe6:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   28fe8:	42a0      	cmp	r0, r4
   28fea:	f6bf af3a 	bge.w	28e62 <lv_draw_mask_radius+0xbe>
   28fee:	e747      	b.n	28e80 <lv_draw_mask_radius+0xdc>
            if(outer) {
   28ff0:	9b01      	ldr	r3, [sp, #4]
   28ff2:	b173      	cbz	r3, 29012 <lv_draw_mask_radius+0x26e>
                int32_t first = kl + 1;
   28ff4:	f10a 0001 	add.w	r0, sl, #1
                if(first < 0) first = 0;
   28ff8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   28ffc:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   28ffe:	bfac      	ite	ge
   29000:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   29002:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   29004:	42a0      	cmp	r0, r4
   29006:	da04      	bge.n	29012 <lv_draw_mask_radius+0x26e>
   29008:	2900      	cmp	r1, #0
   2900a:	db02      	blt.n	29012 <lv_draw_mask_radius+0x26e>
                    _lv_memset_00(&mask_buf[first], len_tmp);
   2900c:	4428      	add	r0, r5
   2900e:	f7ff fd0e 	bl	28a2e <_lv_memset_00>
            uint32_t i = x0.i + 1;
   29012:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
   29016:	9b02      	ldr	r3, [sp, #8]
   29018:	a908      	add	r1, sp, #32
   2901a:	4642      	mov	r2, r8
   2901c:	fb07 3017 	mls	r0, r7, r7, r3
   29020:	f001 fb73 	bl	2a70a <_lv_sqrt>
            if(y_prev.f == 0) {
   29024:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            uint32_t i = x0.i + 1;
   29028:	f107 0b01 	add.w	fp, r7, #1
            if(y_prev.f == 0) {
   2902c:	b939      	cbnz	r1, 2903e <lv_draw_mask_radius+0x29a>
                y_prev.i--;
   2902e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   29032:	3901      	subs	r1, #1
   29034:	f8ad 1020 	strh.w	r1, [sp, #32]
                y_prev.f = 0xFF;
   29038:	21ff      	movs	r1, #255	; 0xff
   2903a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
   2903e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   29042:	4549      	cmp	r1, r9
   29044:	db31      	blt.n	290aa <lv_draw_mask_radius+0x306>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
   29046:	9b02      	ldr	r3, [sp, #8]
   29048:	4642      	mov	r2, r8
   2904a:	a909      	add	r1, sp, #36	; 0x24
   2904c:	fb0b 301b 	mls	r0, fp, fp, r3
   29050:	f001 fb5b 	bl	2a70a <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   29054:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   29058:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
                if(outer) m = 255 - m;
   2905c:	9b01      	ldr	r3, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   2905e:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
   29062:	f1c9 02ff 	rsb	r2, r9, #255	; 0xff
   29066:	434a      	muls	r2, r1
   29068:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   2906c:	b90b      	cbnz	r3, 29072 <lv_draw_mask_radius+0x2ce>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   2906e:	43d2      	mvns	r2, r2
   29070:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   29072:	f1ba 0f00 	cmp.w	sl, #0
   29076:	db08      	blt.n	2908a <lv_draw_mask_radius+0x2e6>
   29078:	4554      	cmp	r4, sl
   2907a:	dd06      	ble.n	2908a <lv_draw_mask_radius+0x2e6>
   2907c:	f815 000a 	ldrb.w	r0, [r5, sl]
   29080:	4611      	mov	r1, r2
   29082:	f7ff fcc6 	bl	28a12 <mask_mix>
   29086:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   2908a:	2e00      	cmp	r6, #0
   2908c:	db06      	blt.n	2909c <lv_draw_mask_radius+0x2f8>
   2908e:	42b4      	cmp	r4, r6
   29090:	dd04      	ble.n	2909c <lv_draw_mask_radius+0x2f8>
   29092:	5da8      	ldrb	r0, [r5, r6]
   29094:	4611      	mov	r1, r2
   29096:	f7ff fcbc 	bl	28a12 <mask_mix>
   2909a:	55a8      	strb	r0, [r5, r6]
                i++;
   2909c:	9e03      	ldr	r6, [sp, #12]
                y_prev.f = y_next.f;
   2909e:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
                kl--;
   290a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
                i++;
   290a6:	f107 0b02 	add.w	fp, r7, #2
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   290aa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            for(; i <= x1.i; i++) {
   290ae:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   290b2:	9303      	str	r3, [sp, #12]
   290b4:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
   290b8:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   290bc:	0113      	lsls	r3, r2, #4
   290be:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   290c2:	9304      	str	r3, [sp, #16]
   290c4:	46b1      	mov	r9, r6
   290c6:	465b      	mov	r3, fp
   290c8:	4657      	mov	r7, sl
   290ca:	2000      	movs	r0, #0
            for(; i <= x1.i; i++) {
   290cc:	9903      	ldr	r1, [sp, #12]
   290ce:	4299      	cmp	r1, r3
   290d0:	d24a      	bcs.n	29168 <lv_draw_mask_radius+0x3c4>
   290d2:	460f      	mov	r7, r1
   290d4:	3701      	adds	r7, #1
   290d6:	45bb      	cmp	fp, r7
   290d8:	eba7 010b 	sub.w	r1, r7, fp
   290dc:	ebab 0e07 	sub.w	lr, fp, r7
   290e0:	bf84      	itt	hi
   290e2:	2100      	movhi	r1, #0
   290e4:	f04f 0e00 	movhi.w	lr, #0
   290e8:	eb0e 030a 	add.w	r3, lr, sl
   290ec:	440e      	add	r6, r1
   290ee:	b128      	cbz	r0, 290fc <lv_draw_mask_radius+0x358>
   290f0:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
   290f4:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
   290f8:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            if(y_prev.f) {
   290fc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   29100:	b1e2      	cbz	r2, 2913c <lv_draw_mask_radius+0x398>
                m = (y_prev.f * x1.f) >> 9;
   29102:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   29106:	434a      	muls	r2, r1
                if(outer) m = 255 - m;
   29108:	9901      	ldr	r1, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
   2910a:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   2910e:	b109      	cbz	r1, 29114 <lv_draw_mask_radius+0x370>
   29110:	43d2      	mvns	r2, r2
   29112:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   29114:	2b00      	cmp	r3, #0
   29116:	db06      	blt.n	29126 <lv_draw_mask_radius+0x382>
   29118:	429c      	cmp	r4, r3
   2911a:	dd04      	ble.n	29126 <lv_draw_mask_radius+0x382>
   2911c:	5ce8      	ldrb	r0, [r5, r3]
   2911e:	4611      	mov	r1, r2
   29120:	f7ff fc77 	bl	28a12 <mask_mix>
   29124:	54e8      	strb	r0, [r5, r3]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   29126:	2e00      	cmp	r6, #0
   29128:	db06      	blt.n	29138 <lv_draw_mask_radius+0x394>
   2912a:	42b4      	cmp	r4, r6
   2912c:	dd04      	ble.n	29138 <lv_draw_mask_radius+0x394>
   2912e:	5da8      	ldrb	r0, [r5, r6]
   29130:	4611      	mov	r1, r2
   29132:	f7ff fc6e 	bl	28a12 <mask_mix>
   29136:	55a8      	strb	r0, [r5, r6]
                kl--;
   29138:	3b01      	subs	r3, #1
                kr++;
   2913a:	3601      	adds	r6, #1
            if(outer == 0) {
   2913c:	9a01      	ldr	r2, [sp, #4]
   2913e:	2a00      	cmp	r2, #0
   29140:	f47f ae8f 	bne.w	28e62 <lv_draw_mask_radius+0xbe>
                kl++;
   29144:	1c59      	adds	r1, r3, #1
                if(kl > len) {
   29146:	428c      	cmp	r4, r1
   29148:	f6ff ae46 	blt.w	28dd8 <lv_draw_mask_radius+0x34>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
   2914c:	2900      	cmp	r1, #0
   2914e:	db02      	blt.n	29156 <lv_draw_mask_radius+0x3b2>
   29150:	4628      	mov	r0, r5
   29152:	f7ff fc6c 	bl	28a2e <_lv_memset_00>
                if(kr < 0) {
   29156:	2e00      	cmp	r6, #0
   29158:	f6ff ae3e 	blt.w	28dd8 <lv_draw_mask_radius+0x34>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   2915c:	42b4      	cmp	r4, r6
   2915e:	f77f ae80 	ble.w	28e62 <lv_draw_mask_radius+0xbe>
   29162:	1ba1      	subs	r1, r4, r6
   29164:	19a8      	adds	r0, r5, r6
   29166:	e727      	b.n	28fb8 <lv_draw_mask_radius+0x214>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   29168:	9904      	ldr	r1, [sp, #16]
   2916a:	f3cc 120f 	ubfx	r2, ip, #4, #16
   2916e:	1851      	adds	r1, r2, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   29170:	9a02      	ldr	r2, [sp, #8]
    uint32_t raw2 = raw * raw;
   29172:	fb01 f001 	mul.w	r0, r1, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   29176:	fb03 2213 	mls	r2, r3, r3, r2

    int32_t d = x - raw2;
   2917a:	ebc0 2202 	rsb	r2, r0, r2, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
   2917e:	0048      	lsls	r0, r1, #1
   29180:	fb92 f2f0 	sdiv	r2, r2, r0
   29184:	440a      	add	r2, r1

    q->i = d >> 4;
   29186:	f3c2 180f 	ubfx	r8, r2, #4, #16
    q->f = (d & 0xF) << 4;
   2918a:	0112      	lsls	r2, r2, #4
   2918c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
                if(outer) m = 255 - m;
   29190:	9801      	ldr	r0, [sp, #4]
                m = (y_prev.f + y_next.f) >> 1;
   29192:	eb0c 0102 	add.w	r1, ip, r2
   29196:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
   2919a:	b108      	cbz	r0, 291a0 <lv_draw_mask_radius+0x3fc>
   2919c:	43c9      	mvns	r1, r1
   2919e:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   291a0:	2f00      	cmp	r7, #0
   291a2:	db07      	blt.n	291b4 <lv_draw_mask_radius+0x410>
   291a4:	42bc      	cmp	r4, r7
   291a6:	dd05      	ble.n	291b4 <lv_draw_mask_radius+0x410>
   291a8:	5de8      	ldrb	r0, [r5, r7]
   291aa:	9105      	str	r1, [sp, #20]
   291ac:	f7ff fc31 	bl	28a12 <mask_mix>
   291b0:	9905      	ldr	r1, [sp, #20]
   291b2:	55e8      	strb	r0, [r5, r7]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   291b4:	f1b9 0f00 	cmp.w	r9, #0
   291b8:	db07      	blt.n	291ca <lv_draw_mask_radius+0x426>
   291ba:	454c      	cmp	r4, r9
   291bc:	dd05      	ble.n	291ca <lv_draw_mask_radius+0x426>
   291be:	f815 0009 	ldrb.w	r0, [r5, r9]
   291c2:	f7ff fc26 	bl	28a12 <mask_mix>
   291c6:	f805 0009 	strb.w	r0, [r5, r9]
                kl--;
   291ca:	3f01      	subs	r7, #1
                kr++;
   291cc:	f109 0901 	add.w	r9, r9, #1
            for(; i <= x1.i; i++) {
   291d0:	3301      	adds	r3, #1
                y_prev.f = y_next.f;
   291d2:	4694      	mov	ip, r2
            for(; i <= x1.i; i++) {
   291d4:	2001      	movs	r0, #1
   291d6:	e779      	b.n	290cc <lv_draw_mask_radius+0x328>
            if(y == p->y_prev) {
   291d8:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   291da:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - abs_y;
   291de:	ebaa 0909 	sub.w	r9, sl, r9
        if(radius <= 256) sqrt_mask = 0x800;
   291e2:	bfd4      	ite	le
   291e4:	f44f 6800 	movle.w	r8, #2048	; 0x800
   291e8:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if(y == p->y_prev) {
   291ec:	454b      	cmp	r3, r9
   291ee:	f43f ae7d 	beq.w	28eec <lv_draw_mask_radius+0x148>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   291f2:	9b02      	ldr	r3, [sp, #8]
   291f4:	4642      	mov	r2, r8
   291f6:	a906      	add	r1, sp, #24
   291f8:	fb09 3019 	mls	r0, r9, r9, r3
   291fc:	f001 fa85 	bl	2a70a <_lv_sqrt>
   29200:	e676      	b.n	28ef0 <lv_draw_mask_radius+0x14c>

00029202 <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
   29202:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   29204:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   29208:	fb04 f301 	mul.w	r3, r4, r1
    if(i <= min) return dsc->bg_color;
   2920c:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   29210:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
   29214:	dc01      	bgt.n	2921a <grad_get+0x18>
   29216:	8840      	ldrh	r0, [r0, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
   29218:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
   2921a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   2921e:	fb01 f603 	mul.w	r6, r1, r3
    if(i >= max) return dsc->bg_grad_color;
   29222:	ebb2 2f26 	cmp.w	r2, r6, asr #8
   29226:	db01      	blt.n	2922c <grad_get+0x2a>
   29228:	8880      	ldrh	r0, [r0, #4]
   2922a:	e7f5      	b.n	29218 <grad_get+0x16>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
   2922c:	1b1b      	subs	r3, r3, r4
    i -= min;
   2922e:	1b52      	subs	r2, r2, r5
    d = (s * d) >> 8;
   29230:	4359      	muls	r1, r3
    lv_opa_t mix = (i * 255) / d;
   29232:	b212      	sxth	r2, r2
    d = (s * d) >> 8;
   29234:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
   29236:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
   2923a:	fb92 f2f1 	sdiv	r2, r2, r1
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   2923e:	8841      	ldrh	r1, [r0, #2]
   29240:	8883      	ldrh	r3, [r0, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   29242:	7886      	ldrb	r6, [r0, #2]
   29244:	b2d2      	uxtb	r2, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   29246:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   2924a:	f3c1 1145 	ubfx	r1, r1, #5, #6
   2924e:	4369      	muls	r1, r5
   29250:	f3c3 1345 	ubfx	r3, r3, #5, #6
   29254:	f248 0481 	movw	r4, #32897	; 0x8081
   29258:	fb02 1303 	mla	r3, r2, r3, r1
   2925c:	4363      	muls	r3, r4
   2925e:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   29262:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
   29266:	f3c3 51c5 	ubfx	r1, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   2926a:	7903      	ldrb	r3, [r0, #4]
   2926c:	f006 061f 	and.w	r6, r6, #31
   29270:	f003 031f 	and.w	r3, r3, #31
   29274:	436e      	muls	r6, r5
   29276:	fb02 6303 	mla	r3, r2, r3, r6
   2927a:	4363      	muls	r3, r4
   2927c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   29280:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
   29284:	f3c3 53c4 	ubfx	r3, r3, #23, #5
   29288:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   2928c:	7941      	ldrb	r1, [r0, #5]
   2928e:	78c0      	ldrb	r0, [r0, #3]
   29290:	08c0      	lsrs	r0, r0, #3
   29292:	08c9      	lsrs	r1, r1, #3
   29294:	4368      	muls	r0, r5
   29296:	fb02 0001 	mla	r0, r2, r1, r0
   2929a:	4360      	muls	r0, r4
   2929c:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
   292a0:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
   292a4:	0dc0      	lsrs	r0, r0, #23
   292a6:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
   292aa:	e7b5      	b.n	29218 <grad_get+0x16>

000292ac <_lv_memset_ff>:
 * Wrapper for the standard memset with fixed 0xFF value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
   292ac:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   292ae:	21ff      	movs	r1, #255	; 0xff
   292b0:	f002 baa0 	b.w	2b7f4 <memset>

000292b4 <lv_area_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   292b4:	4603      	mov	r3, r0
   292b6:	6808      	ldr	r0, [r1, #0]
   292b8:	6849      	ldr	r1, [r1, #4]
   292ba:	c303      	stmia	r3!, {r0, r1}
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
   292bc:	4770      	bx	lr

000292be <lv_draw_rect>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   292be:	88c3      	ldrh	r3, [r0, #6]
{
   292c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   292c4:	4615      	mov	r5, r2
   292c6:	8842      	ldrh	r2, [r0, #2]
   292c8:	3301      	adds	r3, #1
   292ca:	1a9b      	subs	r3, r3, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   292cc:	b21b      	sxth	r3, r3
   292ce:	2b00      	cmp	r3, #0
{
   292d0:	b0ab      	sub	sp, #172	; 0xac
   292d2:	4604      	mov	r4, r0
   292d4:	4689      	mov	r9, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   292d6:	f340 822b 	ble.w	29730 <lv_draw_rect+0x472>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   292da:	8883      	ldrh	r3, [r0, #4]
   292dc:	8802      	ldrh	r2, [r0, #0]
   292de:	3301      	adds	r3, #1
   292e0:	1a9b      	subs	r3, r3, r2
   292e2:	b21b      	sxth	r3, r3
   292e4:	2b00      	cmp	r3, #0
   292e6:	f340 8223 	ble.w	29730 <lv_draw_rect+0x472>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
   292ea:	7b2b      	ldrb	r3, [r5, #12]
   292ec:	2b02      	cmp	r3, #2
   292ee:	f240 80af 	bls.w	29450 <lv_draw_rect+0x192>
    lv_area_copy(&coords_bg, coords);
   292f2:	4601      	mov	r1, r0
   292f4:	a816      	add	r0, sp, #88	; 0x58
   292f6:	f7ff ffdd 	bl	292b4 <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
   292fa:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   292fe:	2b01      	cmp	r3, #1
   29300:	dd24      	ble.n	2934c <lv_draw_rect+0x8e>
   29302:	7d2b      	ldrb	r3, [r5, #20]
   29304:	2bfc      	cmp	r3, #252	; 0xfc
   29306:	d921      	bls.n	2934c <lv_draw_rect+0x8e>
   29308:	f9b5 3000 	ldrsh.w	r3, [r5]
   2930c:	b1f3      	cbz	r3, 2934c <lv_draw_rect+0x8e>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   2930e:	8a6b      	ldrh	r3, [r5, #18]
   29310:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
   29314:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   29318:	f3c3 0180 	ubfx	r1, r3, #2, #1
   2931c:	4401      	add	r1, r0
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   2931e:	f8bd 005a 	ldrh.w	r0, [sp, #90]	; 0x5a
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   29322:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   29326:	f3c3 0140 	ubfx	r1, r3, #1, #1
   2932a:	4401      	add	r1, r0
   2932c:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
   29330:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   29334:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   29338:	1acb      	subs	r3, r1, r3
   2933a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
   2933e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   29342:	f002 0201 	and.w	r2, r2, #1
   29346:	1a9b      	subs	r3, r3, r2
   29348:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    lv_opa_t opa = dsc->bg_opa;
   2934c:	f895 a00c 	ldrb.w	sl, [r5, #12]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   29350:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
   29354:	bf28      	it	cs
   29356:	f04f 0aff 	movcs.w	sl, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   2935a:	f7f1 fe31 	bl	1afc0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2935e:	f000 fe29 	bl	29fb4 <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   29362:	464a      	mov	r2, r9
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29364:	9005      	str	r0, [sp, #20]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   29366:	a916      	add	r1, sp, #88	; 0x58
   29368:	a818      	add	r0, sp, #96	; 0x60
   2936a:	f000 fe8e 	bl	2a08a <_lv_area_intersect>
    if(is_common == false) return;
   2936e:	2800      	cmp	r0, #0
   29370:	d06e      	beq.n	29450 <lv_draw_rect+0x192>
    draw_area.x1 -= disp_area->x1;
   29372:	9b05      	ldr	r3, [sp, #20]
   29374:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
   29378:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
    draw_area.y1 -= disp_area->y1;
   2937c:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    draw_area.x1 -= disp_area->x1;
   29380:	1a83      	subs	r3, r0, r2
   29382:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
   29386:	9b05      	ldr	r3, [sp, #20]
   29388:	f9b3 6012 	ldrsh.w	r6, [r3, #18]
    draw_area.x2 -= disp_area->x1;
   2938c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   29390:	1a9a      	subs	r2, r3, r2
   29392:	3301      	adds	r3, #1
   29394:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
   29398:	1a1b      	subs	r3, r3, r0
    draw_area.y2 -= disp_area->y1;
   2939a:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   2939e:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
   293a0:	1b89      	subs	r1, r1, r6
    draw_area.y2 -= disp_area->y1;
   293a2:	1b92      	subs	r2, r2, r6
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   293a4:	4618      	mov	r0, r3
    draw_area.y1 -= disp_area->y1;
   293a6:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
    draw_area.y2 -= disp_area->y1;
   293aa:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
   293ae:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   293b0:	f7f4 f97c 	bl	1d6ac <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   293b4:	88ab      	ldrh	r3, [r5, #4]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
   293b6:	79ae      	ldrb	r6, [r5, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   293b8:	886a      	ldrh	r2, [r5, #2]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   293ba:	4680      	mov	r8, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   293bc:	429a      	cmp	r2, r3
   293be:	bf08      	it	eq
   293c0:	2600      	moveq	r6, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
   293c2:	f7f3 fb0b 	bl	1c9dc <lv_draw_mask_get_cnt>
   293c6:	9010      	str	r0, [sp, #64]	; 0x40
   293c8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   293cc:	9311      	str	r3, [sp, #68]	; 0x44
    if(other_mask_cnt) simple_mode = false;
   293ce:	2b00      	cmp	r3, #0
   293d0:	f040 81b1 	bne.w	29736 <lv_draw_rect+0x478>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
   293d4:	1eb3      	subs	r3, r6, #2
   293d6:	bf18      	it	ne
   293d8:	2301      	movne	r3, #1
   293da:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   293de:	f8bd b05e 	ldrh.w	fp, [sp, #94]	; 0x5e
    if(other_mask_cnt) simple_mode = false;
   293e2:	930a      	str	r3, [sp, #40]	; 0x28
   293e4:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   293e8:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   293ec:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   293ee:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   293f2:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   293f4:	ebab 0b02 	sub.w	fp, fp, r2
    int32_t coords_h = lv_area_get_height(&coords_bg);
   293f8:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   293fc:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   293fe:	45bb      	cmp	fp, r7
    int32_t rout = dsc->radius;
   29400:	f9b5 3000 	ldrsh.w	r3, [r5]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   29404:	bfa8      	it	ge
   29406:	46bb      	movge	fp, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   29408:	ea4f 0b6b 	mov.w	fp, fp, asr #1
   2940c:	459b      	cmp	fp, r3
   2940e:	bfa8      	it	ge
   29410:	469b      	movge	fp, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
   29412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29414:	2b00      	cmp	r3, #0
   29416:	f000 8190 	beq.w	2973a <lv_draw_rect+0x47c>
   2941a:	f1bb 0f00 	cmp.w	fp, #0
   2941e:	f040 818c 	bne.w	2973a <lv_draw_rect+0x47c>
   29422:	2e00      	cmp	r6, #0
   29424:	f040 8231 	bne.w	2988a <lv_draw_rect+0x5cc>
        _lv_blend_fill(clip, &coords_bg,
   29428:	7b6b      	ldrb	r3, [r5, #13]
   2942a:	e9cd a301 	strd	sl, r3, [sp, #4]
   2942e:	2301      	movs	r3, #1
   29430:	9300      	str	r3, [sp, #0]
   29432:	886a      	ldrh	r2, [r5, #2]
   29434:	4633      	mov	r3, r6
   29436:	a916      	add	r1, sp, #88	; 0x58
   29438:	4648      	mov	r0, r9
   2943a:	f7fe fbeb 	bl	27c14 <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   2943e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29442:	930d      	str	r3, [sp, #52]	; 0x34
    lv_draw_mask_remove_id(mask_rout_id);
   29444:	980d      	ldr	r0, [sp, #52]	; 0x34
   29446:	f7f3 faa1 	bl	1c98c <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   2944a:	4640      	mov	r0, r8
   2944c:	f7f4 f990 	bl	1d770 <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
   29450:	7d2b      	ldrb	r3, [r5, #20]
   29452:	2b02      	cmp	r3, #2
   29454:	f240 816c 	bls.w	29730 <lv_draw_rect+0x472>
    if(dsc->border_width == 0) return;
   29458:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   2945c:	2b00      	cmp	r3, #0
   2945e:	f000 8167 	beq.w	29730 <lv_draw_rect+0x472>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
   29462:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
   29466:	2b00      	cmp	r3, #0
   29468:	f000 8162 	beq.w	29730 <lv_draw_rect+0x472>
    if(dsc->border_post) return;
   2946c:	7dab      	ldrb	r3, [r5, #22]
   2946e:	07d9      	lsls	r1, r3, #31
   29470:	f100 815e 	bmi.w	29730 <lv_draw_rect+0x472>
   29474:	88a3      	ldrh	r3, [r4, #4]
   29476:	8827      	ldrh	r7, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29478:	88e2      	ldrh	r2, [r4, #6]
    int32_t rout = dsc->radius;
   2947a:	f9b5 8000 	ldrsh.w	r8, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2947e:	3301      	adds	r3, #1
   29480:	1bdb      	subs	r3, r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29482:	8867      	ldrh	r7, [r4, #2]
   29484:	3201      	adds	r2, #1
   29486:	1bd2      	subs	r2, r2, r7
    int32_t coords_h = lv_area_get_height(coords);
   29488:	b217      	sxth	r7, r2
    int32_t coords_w = lv_area_get_width(coords);
   2948a:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   2948c:	42bb      	cmp	r3, r7
   2948e:	bfa8      	it	ge
   29490:	463b      	movge	r3, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   29492:	105f      	asrs	r7, r3, #1
   29494:	45b8      	cmp	r8, r7
    lv_area_copy(&area_inner, coords);
   29496:	4621      	mov	r1, r4
   29498:	a814      	add	r0, sp, #80	; 0x50
   2949a:	bfa8      	it	ge
   2949c:	46b8      	movge	r8, r7
   2949e:	f7ff ff09 	bl	292b4 <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   294a2:	8a68      	ldrh	r0, [r5, #18]
   294a4:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   294a8:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   294ac:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   294b0:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
   294b4:	f010 0f04 	tst.w	r0, #4
   294b8:	bf03      	ittte	eq
   294ba:	8a2a      	ldrheq	r2, [r5, #16]
   294bc:	4442      	addeq	r2, r8
   294be:	4252      	negeq	r2, r2
   294c0:	461a      	movne	r2, r3
   294c2:	bf08      	it	eq
   294c4:	b212      	sxtheq	r2, r2
   294c6:	4432      	add	r2, r6
   294c8:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   294cc:	0702      	lsls	r2, r0, #28
   294ce:	bf5b      	ittet	pl
   294d0:	eb03 0208 	addpl.w	r2, r3, r8
   294d4:	4252      	negpl	r2, r2
   294d6:	461a      	movmi	r2, r3
   294d8:	b212      	sxthpl	r2, r2
   294da:	1aba      	subs	r2, r7, r2
   294dc:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   294e0:	0782      	lsls	r2, r0, #30
   294e2:	bf5c      	itt	pl
   294e4:	eb03 0208 	addpl.w	r2, r3, r8
   294e8:	4252      	negpl	r2, r2
   294ea:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
   294ee:	bf4c      	ite	mi
   294f0:	461a      	movmi	r2, r3
   294f2:	b212      	sxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   294f4:	07c0      	lsls	r0, r0, #31
   294f6:	461e      	mov	r6, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   294f8:	443a      	add	r2, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   294fa:	bf5c      	itt	pl
   294fc:	4443      	addpl	r3, r8
   294fe:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   29500:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   29504:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   29508:	bf58      	it	pl
   2950a:	b21e      	sxthpl	r6, r3
   2950c:	1b93      	subs	r3, r2, r6
   2950e:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
   29512:	290f      	cmp	r1, #15
   29514:	7d2b      	ldrb	r3, [r5, #20]
   29516:	9305      	str	r3, [sp, #20]
   29518:	f040 83e1 	bne.w	29cde <lv_draw_rect+0xa20>
        draw_full_border(&area_inner, coords, clip, dsc->radius, dsc->border_color, dsc->border_opa, dsc->border_blend_mode);
   2951c:	7d6b      	ldrb	r3, [r5, #21]
   2951e:	f9b5 a000 	ldrsh.w	sl, [r5]
   29522:	89ee      	ldrh	r6, [r5, #14]
   29524:	9306      	str	r3, [sp, #24]
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   29526:	f7f3 fa59 	bl	1c9dc <lv_draw_mask_get_cnt>
   2952a:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   2952e:	9308      	str	r3, [sp, #32]
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   29530:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   29534:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29536:	f9b4 3000 	ldrsh.w	r3, [r4]
   2953a:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2953c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   29540:	930e      	str	r3, [sp, #56]	; 0x38
   29542:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   29546:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29548:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
   2954c:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29550:	f9bd 5056 	ldrsh.w	r5, [sp, #86]	; 0x56
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   29554:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    if(rout > short_side >> 1) rout = short_side >> 1;

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   29556:	f7f1 fd33 	bl	1afc0 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2955a:	f000 fd2b 	bl	29fb4 <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   2955e:	464a      	mov	r2, r9
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29560:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   29562:	4621      	mov	r1, r4
   29564:	a816      	add	r0, sp, #88	; 0x58
   29566:	f000 fd90 	bl	2a08a <_lv_area_intersect>
    if(is_common == false) return;
   2956a:	2800      	cmp	r0, #0
   2956c:	f000 80e0 	beq.w	29730 <lv_draw_rect+0x472>
   29570:	1c7a      	adds	r2, r7, #1
   29572:	b213      	sxth	r3, r2
   29574:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   29576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29578:	990b      	ldr	r1, [sp, #44]	; 0x2c
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    draw_area.y1 -= disp_area->y1;
   2957a:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   2957e:	1bdf      	subs	r7, r3, r7
   29580:	b23b      	sxth	r3, r7
   29582:	9307      	str	r3, [sp, #28]
   29584:	9b08      	ldr	r3, [sp, #32]
   29586:	1c6a      	adds	r2, r5, #1
   29588:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2958a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2958c:	eba3 0808 	sub.w	r8, r3, r8
    int32_t inner_h = lv_area_get_height(area_inner);
   29590:	b212      	sxth	r2, r2
    int32_t inner_w = lv_area_get_width(area_inner);
   29592:	fa0f f888 	sxth.w	r8, r8
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
   29596:	4542      	cmp	r2, r8
   29598:	bfa8      	it	ge
   2959a:	4642      	movge	r2, r8
   2959c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if(rin > short_side >> 1) rin = short_side >> 1;
   2959e:	1052      	asrs	r2, r2, #1
   295a0:	4592      	cmp	sl, r2
   295a2:	bfa8      	it	ge
   295a4:	4692      	movge	sl, r2
   295a6:	1c5a      	adds	r2, r3, #1
   295a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   295aa:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   295ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   295ae:	3301      	adds	r3, #1
   295b0:	1a5b      	subs	r3, r3, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
   295b2:	b212      	sxth	r2, r2
    int32_t coords_out_h = lv_area_get_height(area_outer);
   295b4:	b21b      	sxth	r3, r3
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
   295b6:	4293      	cmp	r3, r2
   295b8:	bfa8      	it	ge
   295ba:	4613      	movge	r3, r2
    int32_t rout = rin + border_width;
   295bc:	fa0a f787 	sxtah	r7, sl, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   295c0:	105b      	asrs	r3, r3, #1
   295c2:	42bb      	cmp	r3, r7
    draw_area.x1 -= disp_area->x1;
   295c4:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   295c8:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
   295cc:	bfa8      	it	ge
   295ce:	463b      	movge	r3, r7
   295d0:	9308      	str	r3, [sp, #32]
   295d2:	1a8b      	subs	r3, r1, r2
   295d4:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
   295d8:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   295dc:	1a1b      	subs	r3, r3, r0
   295de:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   295e2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   295e6:	1a9a      	subs	r2, r3, r2
   295e8:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
   295ec:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   295f0:	1c5f      	adds	r7, r3, #1
   295f2:	1a12      	subs	r2, r2, r0

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   295f4:	2301      	movs	r3, #1
    draw_area.y2 -= disp_area->y1;
   295f6:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
   295fa:	1a7f      	subs	r7, r7, r1
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   295fc:	fa0f f28a 	sxth.w	r2, sl
   29600:	a914      	add	r1, sp, #80	; 0x50
   29602:	a81c      	add	r0, sp, #112	; 0x70
   29604:	f7f3 fa7c 	bl	1cb00 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   29608:	2100      	movs	r1, #0
   2960a:	a81c      	add	r0, sp, #112	; 0x70
   2960c:	f7f3 f976 	bl	1c8fc <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   29610:	f9bd a020 	ldrsh.w	sl, [sp, #32]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   29614:	900e      	str	r0, [sp, #56]	; 0x38
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   29616:	2300      	movs	r3, #0
   29618:	4652      	mov	r2, sl
   2961a:	4621      	mov	r1, r4
   2961c:	a823      	add	r0, sp, #140	; 0x8c
   2961e:	f7f3 fa6f 	bl	1cb00 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   29622:	2100      	movs	r1, #0
   29624:	a823      	add	r0, sp, #140	; 0x8c
   29626:	f7f3 f969 	bl	1c8fc <lv_draw_mask_add>
   2962a:	b23f      	sxth	r7, r7
   2962c:	900f      	str	r0, [sp, #60]	; 0x3c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   2962e:	4638      	mov	r0, r7
   29630:	f7f4 f83c 	bl	1d6ac <_lv_mem_buf_get>
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
   29634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29636:	4605      	mov	r5, r0
    if(simple_mode) {
   29638:	2b00      	cmp	r3, #0
   2963a:	f040 8312 	bne.w	29c62 <lv_draw_rect+0x9a4>
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   2963e:	9b07      	ldr	r3, [sp, #28]
   29640:	9a08      	ldr	r2, [sp, #32]
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29642:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   29646:	3b01      	subs	r3, #1
   29648:	4293      	cmp	r3, r2
   2964a:	bfb8      	it	lt
   2964c:	4613      	movlt	r3, r2
   2964e:	9309      	str	r3, [sp, #36]	; 0x24
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
   29650:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   29654:	9909      	ldr	r1, [sp, #36]	; 0x24
   29656:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   2965a:	440a      	add	r2, r1
   2965c:	1ad2      	subs	r2, r2, r3
   2965e:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29660:	4443      	add	r3, r8
        fill_area.x1 = area_outer->x1;
   29662:	8822      	ldrh	r2, [r4, #0]
   29664:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29668:	b21b      	sxth	r3, r3
        fill_area.x2 = area_outer->x2;
   2966a:	88a2      	ldrh	r2, [r4, #4]
   2966c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29670:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   29674:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   29678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2967a:	4543      	cmp	r3, r8
   2967c:	f280 81fd 	bge.w	29a7a <lv_draw_rect+0x7bc>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   29680:	9a09      	ldr	r2, [sp, #36]	; 0x24
   29682:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
   29686:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   2968a:	eba8 0802 	sub.w	r8, r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   2968e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   29690:	eba8 0803 	sub.w	r8, r8, r3
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   29694:	4542      	cmp	r2, r8
   29696:	bfa8      	it	ge
   29698:	f102 0801 	addge.w	r8, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
   2969c:	4443      	add	r3, r8
   2969e:	b21b      	sxth	r3, r3
   296a0:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   296a4:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   296a8:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   296ac:	4598      	cmp	r8, r3
   296ae:	f340 825e 	ble.w	29b6e <lv_draw_rect+0x8b0>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
   296b2:	8863      	ldrh	r3, [r4, #2]
   296b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   296b6:	3301      	adds	r3, #1
   296b8:	fa03 f382 	sxtah	r3, r3, r2
   296bc:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   296c0:	88e3      	ldrh	r3, [r4, #6]
   296c2:	3b01      	subs	r3, #1
   296c4:	1a9b      	subs	r3, r3, r2
   296c6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66

        fill_area.x1 = area_outer->x1;
   296ca:	f9b4 3000 	ldrsh.w	r3, [r4]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   296ce:	9a07      	ldr	r2, [sp, #28]
        fill_area.x1 = area_outer->x1;
   296d0:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        fill_area.x2 = area_outer->x1 + border_width - 1;
   296d4:	3b01      	subs	r3, #1
   296d6:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   296d8:	9b06      	ldr	r3, [sp, #24]
   296da:	9302      	str	r3, [sp, #8]
   296dc:	2701      	movs	r7, #1
   296de:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   296e0:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   296e4:	9301      	str	r3, [sp, #4]
   296e6:	4632      	mov	r2, r6
   296e8:	2300      	movs	r3, #0
   296ea:	a918      	add	r1, sp, #96	; 0x60
   296ec:	4648      	mov	r0, r9
   296ee:	9700      	str	r7, [sp, #0]
   296f0:	f7fe fa90 	bl	27c14 <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
   296f4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   296f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   296fa:	990a      	ldr	r1, [sp, #40]	; 0x28
        fill_area.x2 = area_outer->x2;
   296fc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.x1 = area_outer->x2 - border_width + 1;
   29700:	4413      	add	r3, r2
   29702:	1a5b      	subs	r3, r3, r1
   29704:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   29708:	9b06      	ldr	r3, [sp, #24]
   2970a:	9302      	str	r3, [sp, #8]
   2970c:	9b05      	ldr	r3, [sp, #20]
   2970e:	4632      	mov	r2, r6
   29710:	e9cd 7300 	strd	r7, r3, [sp]
   29714:	a918      	add	r1, sp, #96	; 0x60
   29716:	2300      	movs	r3, #0
   29718:	4648      	mov	r0, r9
   2971a:	f7fe fa7b 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
   2971e:	980e      	ldr	r0, [sp, #56]	; 0x38
   29720:	f7f3 f934 	bl	1c98c <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
   29724:	980f      	ldr	r0, [sp, #60]	; 0x3c
   29726:	f7f3 f931 	bl	1c98c <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   2972a:	4628      	mov	r0, r5
        _lv_mem_buf_release(mask_buf);
   2972c:	f7f4 f820 	bl	1d770 <_lv_mem_buf_release>
}
   29730:	b02b      	add	sp, #172	; 0xac
   29732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
   29736:	2300      	movs	r3, #0
   29738:	e64f      	b.n	293da <lv_draw_rect+0x11c>
        if(rout > 0) {
   2973a:	f1bb 0f00 	cmp.w	fp, #0
   2973e:	f340 80a4 	ble.w	2988a <lv_draw_rect+0x5cc>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
   29742:	2300      	movs	r3, #0
   29744:	465a      	mov	r2, fp
   29746:	a916      	add	r1, sp, #88	; 0x58
   29748:	a823      	add	r0, sp, #140	; 0x8c
   2974a:	f7f3 f9d9 	bl	1cb00 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   2974e:	2100      	movs	r1, #0
   29750:	a823      	add	r0, sp, #140	; 0x8c
   29752:	f7f3 f8d3 	bl	1c8fc <lv_draw_mask_add>
   29756:	900d      	str	r0, [sp, #52]	; 0x34
        lv_color_t grad_color = dsc->bg_color;
   29758:	886b      	ldrh	r3, [r5, #2]
   2975a:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(grad_dir == LV_GRAD_DIR_HOR) {
   2975e:	2e02      	cmp	r6, #2
   29760:	f040 80a4 	bne.w	298ac <lv_draw_rect+0x5ee>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   29764:	0078      	lsls	r0, r7, #1
   29766:	f7f3 ffa1 	bl	1d6ac <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
   2976a:	2300      	movs	r3, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   2976c:	900b      	str	r0, [sp, #44]	; 0x2c
            for(i = 0; i < coords_w; i++) {
   2976e:	429f      	cmp	r7, r3
   29770:	f300 808f 	bgt.w	29892 <lv_draw_rect+0x5d4>
   29774:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
   29778:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
        fill_area.x1 = coords_bg.x1;
   2977c:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
   29780:	1c4a      	adds	r2, r1, #1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
   29782:	f06f 0301 	mvn.w	r3, #1
   29786:	1a12      	subs	r2, r2, r0
   29788:	fb03 f30b 	mul.w	r3, r3, fp
   2978c:	fa03 f382 	sxtah	r3, r3, r2
   29790:	930f      	str	r3, [sp, #60]	; 0x3c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29792:	9b05      	ldr	r3, [sp, #20]
   29794:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   29798:	8a5b      	ldrh	r3, [r3, #18]
        fill_area.x2 = coords_bg.x2;
   2979a:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   2979e:	4413      	add	r3, r2
   297a0:	b21b      	sxth	r3, r3
   297a2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   297a6:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   297aa:	fa0f f38b 	sxth.w	r3, fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   297ae:	9207      	str	r2, [sp, #28]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   297b0:	930e      	str	r3, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   297b2:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   297b6:	9a07      	ldr	r2, [sp, #28]
   297b8:	429a      	cmp	r2, r3
   297ba:	dd7a      	ble.n	298b2 <lv_draw_rect+0x5f4>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
   297bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   297be:	4333      	orrs	r3, r6
   297c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   297c4:	d159      	bne.n	2987a <lv_draw_rect+0x5bc>
   297c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   297c8:	2a32      	cmp	r2, #50	; 0x32
   297ca:	dd56      	ble.n	2987a <lv_draw_rect+0x5bc>
            fill_area.x1 = coords_bg.x1 + rout;
   297cc:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   297d0:	445a      	add	r2, fp
   297d2:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2 - rout;
   297d6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   297da:	eba2 020b 	sub.w	r2, r2, fp
   297de:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1;
   297e2:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   297e6:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            fill_area.x1 = coords_bg.x1 + rout;
   297ea:	fa0f f78b 	sxth.w	r7, fp
            fill_area.y2 = coords_bg.y1 + rout;
   297ee:	4493      	add	fp, r2
            _lv_blend_fill(clip, &fill_area,
   297f0:	7b6a      	ldrb	r2, [r5, #13]
            fill_area.y2 = coords_bg.y1 + rout;
   297f2:	f8ad b06e 	strh.w	fp, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
   297f6:	e9cd a201 	strd	sl, r2, [sp, #4]
   297fa:	2201      	movs	r2, #1
   297fc:	9200      	str	r2, [sp, #0]
   297fe:	886a      	ldrh	r2, [r5, #2]
   29800:	a91a      	add	r1, sp, #104	; 0x68
   29802:	4648      	mov	r0, r9
   29804:	f7fe fa06 	bl	27c14 <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
   29808:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   2980c:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y2;
   29810:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
            fill_area.y1 = coords_bg.y2 - rout;
   29814:	1bca      	subs	r2, r1, r7
   29816:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   29818:	429a      	cmp	r2, r3
   2981a:	bfd8      	it	le
   2981c:	3301      	addle	r3, #1
            fill_area.y1 = coords_bg.y2 - rout;
   2981e:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   29822:	bfd8      	it	le
   29824:	f8ad 306a 	strhle.w	r3, [sp, #106]	; 0x6a
            _lv_blend_fill(clip, &fill_area,
   29828:	7b6b      	ldrb	r3, [r5, #13]
   2982a:	e9cd a301 	strd	sl, r3, [sp, #4]
   2982e:	2601      	movs	r6, #1
   29830:	9600      	str	r6, [sp, #0]
   29832:	886a      	ldrh	r2, [r5, #2]
   29834:	2300      	movs	r3, #0
   29836:	a91a      	add	r1, sp, #104	; 0x68
   29838:	4648      	mov	r0, r9
   2983a:	f7fe f9eb 	bl	27c14 <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
   2983e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29842:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2;
   29846:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   2984a:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1 + rout + 1;
   2984e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   29852:	4433      	add	r3, r6
   29854:	443b      	add	r3, r7
   29856:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2 = coords_bg.y2 - rout - 1;
   2985a:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   2985e:	3b01      	subs	r3, #1
   29860:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
   29862:	7b6b      	ldrb	r3, [r5, #13]
   29864:	9600      	str	r6, [sp, #0]
   29866:	e9cd a301 	strd	sl, r3, [sp, #4]
   2986a:	a91a      	add	r1, sp, #104	; 0x68
   2986c:	886a      	ldrh	r2, [r5, #2]
            fill_area.y2 = coords_bg.y2 - rout - 1;
   2986e:	f8ad 706e 	strh.w	r7, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
   29872:	2300      	movs	r3, #0
   29874:	4648      	mov	r0, r9
   29876:	f7fe f9cd 	bl	27c14 <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
   2987a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2987c:	2b00      	cmp	r3, #0
   2987e:	f43f ade1 	beq.w	29444 <lv_draw_rect+0x186>
   29882:	4618      	mov	r0, r3
   29884:	f7f3 ff74 	bl	1d770 <_lv_mem_buf_release>
   29888:	e5dc      	b.n	29444 <lv_draw_rect+0x186>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   2988a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2988e:	930d      	str	r3, [sp, #52]	; 0x34
   29890:	e762      	b.n	29758 <lv_draw_rect+0x49a>
                grad_map[i] = grad_get(dsc, coords_w, i);
   29892:	b21a      	sxth	r2, r3
   29894:	4639      	mov	r1, r7
   29896:	4628      	mov	r0, r5
   29898:	9306      	str	r3, [sp, #24]
   2989a:	f7ff fcb2 	bl	29202 <grad_get>
   2989e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   298a0:	461a      	mov	r2, r3
   298a2:	9b06      	ldr	r3, [sp, #24]
   298a4:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
            for(i = 0; i < coords_w; i++) {
   298a8:	3301      	adds	r3, #1
   298aa:	e760      	b.n	2976e <lv_draw_rect+0x4b0>
        lv_color_t * grad_map = NULL;
   298ac:	2300      	movs	r3, #0
   298ae:	930b      	str	r3, [sp, #44]	; 0x2c
   298b0:	e760      	b.n	29774 <lv_draw_rect+0x4b6>
            int32_t y = h + vdb->area.y1;
   298b2:	9b05      	ldr	r3, [sp, #20]
   298b4:	9a07      	ldr	r2, [sp, #28]
   298b6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
   298ba:	4413      	add	r3, r2
   298bc:	930c      	str	r3, [sp, #48]	; 0x30
            if(y > coords_bg.y1 + rout + 1 &&
   298be:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   298c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   298c4:	3301      	adds	r3, #1
   298c6:	445b      	add	r3, fp
   298c8:	429a      	cmp	r2, r3
   298ca:	dd0a      	ble.n	298e2 <lv_draw_rect+0x624>
               y < coords_bg.y2 - rout - 1) {
   298cc:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   298d0:	3b01      	subs	r3, #1
   298d2:	eba3 030b 	sub.w	r3, r3, fp
            if(y > coords_bg.y1 + rout + 1 &&
   298d6:	429a      	cmp	r2, r3
   298d8:	da03      	bge.n	298e2 <lv_draw_rect+0x624>
                if(simple_mode == false) {
   298da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   298dc:	2b00      	cmp	r3, #0
   298de:	f040 82ee 	bne.w	29ebe <lv_draw_rect+0xc00>
__ssp_bos_icheck3(memset, void *, int)
   298e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   298e4:	4651      	mov	r1, sl
   298e6:	4640      	mov	r0, r8
   298e8:	f001 ff84 	bl	2b7f4 <memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   298ec:	9b05      	ldr	r3, [sp, #20]
   298ee:	8a5a      	ldrh	r2, [r3, #18]
   298f0:	9b07      	ldr	r3, [sp, #28]
   298f2:	441a      	add	r2, r3
   298f4:	9b05      	ldr	r3, [sp, #20]
   298f6:	8a19      	ldrh	r1, [r3, #16]
   298f8:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   298fc:	4419      	add	r1, r3
   298fe:	b212      	sxth	r2, r2
   29900:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29902:	b209      	sxth	r1, r1
   29904:	4640      	mov	r0, r8
   29906:	f7f3 f81f 	bl	1c948 <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
   2990a:	2802      	cmp	r0, #2
   2990c:	bf14      	ite	ne
   2990e:	4653      	movne	r3, sl
   29910:	23ff      	moveq	r3, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
   29912:	2e01      	cmp	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29914:	4607      	mov	r7, r0
                opa2 = LV_OPA_COVER;
   29916:	9306      	str	r3, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
   29918:	d11c      	bne.n	29954 <lv_draw_rect+0x696>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2991a:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   2991e:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   29922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29924:	3101      	adds	r1, #1
   29926:	1ad2      	subs	r2, r2, r3
   29928:	1ac9      	subs	r1, r1, r3
   2992a:	b212      	sxth	r2, r2
   2992c:	b209      	sxth	r1, r1
   2992e:	4628      	mov	r0, r5
   29930:	f7ff fc67 	bl	29202 <grad_get>
            if(simple_mode && split &&
   29934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   29936:	f8ad 0020 	strh.w	r0, [sp, #32]
            if(simple_mode && split &&
   2993a:	b97b      	cbnz	r3, 2995c <lv_draw_rect+0x69e>
                    _lv_blend_fill(clip, &fill_area,
   2993c:	7b6b      	ldrb	r3, [r5, #13]
   2993e:	9302      	str	r3, [sp, #8]
   29940:	9b06      	ldr	r3, [sp, #24]
   29942:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29946:	e9cd 7300 	strd	r7, r3, [sp]
   2994a:	a91a      	add	r1, sp, #104	; 0x68
   2994c:	4643      	mov	r3, r8
   2994e:	e06a      	b.n	29a26 <lv_draw_rect+0x768>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   29950:	4637      	mov	r7, r6
   29952:	e7e2      	b.n	2991a <lv_draw_rect+0x65c>
            if(simple_mode && split &&
   29954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29956:	2b00      	cmp	r3, #0
   29958:	f000 82b8 	beq.w	29ecc <lv_draw_rect+0xc0e>
   2995c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2995e:	2b32      	cmp	r3, #50	; 0x32
   29960:	dd65      	ble.n	29a2e <lv_draw_rect+0x770>
               (y < coords_bg.y1 + rout + 1 ||
   29962:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            if(simple_mode && split &&
   29966:	9a0c      	ldr	r2, [sp, #48]	; 0x30
               (y < coords_bg.y1 + rout + 1 ||
   29968:	3301      	adds	r3, #1
   2996a:	445b      	add	r3, fp
            if(simple_mode && split &&
   2996c:	429a      	cmp	r2, r3
   2996e:	db06      	blt.n	2997e <lv_draw_rect+0x6c0>
                y > coords_bg.y2 - rout - 1)) {
   29970:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   29974:	3b01      	subs	r3, #1
   29976:	eba3 030b 	sub.w	r3, r3, fp
               (y < coords_bg.y1 + rout + 1 ||
   2997a:	429a      	cmp	r2, r3
   2997c:	dd57      	ble.n	29a2e <lv_draw_rect+0x770>
                fill_area2.x1 = coords_bg.x1;
   2997e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   29982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                fill_area2.x1 = coords_bg.x1;
   29984:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   29988:	3b01      	subs	r3, #1
   2998a:	4413      	add	r3, r2
   2998c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                fill_area2.y1 = fill_area.y1;
   29990:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   29994:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
                fill_area2.y2 = fill_area.y2;
   29998:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   2999c:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fill_area2,
   299a0:	7b6b      	ldrb	r3, [r5, #13]
   299a2:	9302      	str	r3, [sp, #8]
   299a4:	9b06      	ldr	r3, [sp, #24]
   299a6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   299aa:	e9cd 7300 	strd	r7, r3, [sp]
   299ae:	a91c      	add	r1, sp, #112	; 0x70
   299b0:	4643      	mov	r3, r8
   299b2:	4648      	mov	r0, r9
   299b4:	f7fe f92e 	bl	27c14 <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
   299b8:	2e01      	cmp	r6, #1
   299ba:	d115      	bne.n	299e8 <lv_draw_rect+0x72a>
                    fill_area2.x1 = coords_bg.x1 + rout;
   299bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   299be:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   299c2:	4413      	add	r3, r2
   299c4:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                    fill_area2.x2 = coords_bg.x2 - rout;
   299c8:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   299cc:	1a9b      	subs	r3, r3, r2
   299ce:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    _lv_blend_fill(clip, &fill_area2,
   299d2:	7b6b      	ldrb	r3, [r5, #13]
   299d4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   299d8:	9600      	str	r6, [sp, #0]
   299da:	e9cd a301 	strd	sl, r3, [sp, #4]
   299de:	a91c      	add	r1, sp, #112	; 0x70
   299e0:	2300      	movs	r3, #0
   299e2:	4648      	mov	r0, r9
   299e4:	f7fe f916 	bl	27c14 <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   299e8:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
   299ec:	990e      	ldr	r1, [sp, #56]	; 0x38
                fill_area2.x2 = coords_bg.x2;
   299ee:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   299f2:	1c53      	adds	r3, r2, #1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   299f4:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   299f8:	1a59      	subs	r1, r3, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   299fa:	1a9b      	subs	r3, r3, r2
   299fc:	9a05      	ldr	r2, [sp, #20]
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   299fe:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   29a02:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
   29a06:	eba3 030b 	sub.w	r3, r3, fp
   29a0a:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
   29a0c:	7b6a      	ldrb	r2, [r5, #13]
   29a0e:	9202      	str	r2, [sp, #8]
   29a10:	9a06      	ldr	r2, [sp, #24]
   29a12:	e9cd 7200 	strd	r7, r2, [sp]
   29a16:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29a1a:	2b00      	cmp	r3, #0
   29a1c:	bfac      	ite	ge
   29a1e:	4443      	addge	r3, r8
   29a20:	f108 0300 	addlt.w	r3, r8, #0
   29a24:	a91c      	add	r1, sp, #112	; 0x70
                    _lv_blend_fill(clip, &fill_area,
   29a26:	4648      	mov	r0, r9
   29a28:	f7fe f8f4 	bl	27c14 <_lv_blend_fill>
   29a2c:	e00c      	b.n	29a48 <lv_draw_rect+0x78a>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   29a2e:	2e02      	cmp	r6, #2
   29a30:	d118      	bne.n	29a64 <lv_draw_rect+0x7a6>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
   29a32:	7b6b      	ldrb	r3, [r5, #13]
   29a34:	9302      	str	r3, [sp, #8]
   29a36:	9b06      	ldr	r3, [sp, #24]
   29a38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29a3a:	e9cd 7300 	strd	r7, r3, [sp]
   29a3e:	a91a      	add	r1, sp, #104	; 0x68
   29a40:	4643      	mov	r3, r8
   29a42:	4648      	mov	r0, r9
   29a44:	f7fe fafb 	bl	2803e <_lv_blend_map>
            fill_area.y1++;
   29a48:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   29a4c:	3301      	adds	r3, #1
   29a4e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   29a52:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   29a56:	3301      	adds	r3, #1
   29a58:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29a5c:	9b07      	ldr	r3, [sp, #28]
   29a5e:	3301      	adds	r3, #1
   29a60:	9307      	str	r3, [sp, #28]
   29a62:	e6a6      	b.n	297b2 <lv_draw_rect+0x4f4>
                else if(grad_dir == LV_GRAD_DIR_VER) {
   29a64:	2e01      	cmp	r6, #1
   29a66:	f43f af69 	beq.w	2993c <lv_draw_rect+0x67e>
                else if(other_mask_cnt != 0 || !split) {
   29a6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29a6c:	2b00      	cmp	r3, #0
   29a6e:	f47f af65 	bne.w	2993c <lv_draw_rect+0x67e>
   29a72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29a74:	2b32      	cmp	r3, #50	; 0x32
   29a76:	dce7      	bgt.n	29a48 <lv_draw_rect+0x78a>
   29a78:	e760      	b.n	2993c <lv_draw_rect+0x67e>
            _lv_memset_ff(mask_buf, draw_area_w);
   29a7a:	4639      	mov	r1, r7
   29a7c:	4628      	mov	r0, r5
   29a7e:	f7ff fc15 	bl	292ac <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29a82:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29a86:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29a8a:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29a8e:	4442      	add	r2, r8
   29a90:	4419      	add	r1, r3
   29a92:	b212      	sxth	r2, r2
   29a94:	463b      	mov	r3, r7
   29a96:	b209      	sxth	r1, r1
   29a98:	4628      	mov	r0, r5
   29a9a:	f7f2 ff55 	bl	1c948 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
   29a9e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29aa2:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area2.y2 = fill_area.y2;
   29aa6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29aaa:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area2.x1 = area_outer->x1;
   29aae:	f9b4 3000 	ldrsh.w	r3, [r4]
   29ab2:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area2.x2 = area_outer->x1 + rout - 1;
   29ab6:	3b01      	subs	r3, #1
   29ab8:	4453      	add	r3, sl
   29aba:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29abe:	9b06      	ldr	r3, [sp, #24]
   29ac0:	9302      	str	r3, [sp, #8]
   29ac2:	9b05      	ldr	r3, [sp, #20]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29ac4:	900c      	str	r0, [sp, #48]	; 0x30
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29ac6:	9301      	str	r3, [sp, #4]
   29ac8:	9000      	str	r0, [sp, #0]
   29aca:	462b      	mov	r3, r5
   29acc:	4632      	mov	r2, r6
   29ace:	a91a      	add	r1, sp, #104	; 0x68
   29ad0:	4648      	mov	r0, r9
   29ad2:	f7fe f89f 	bl	27c14 <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
   29ad6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   29ada:	9907      	ldr	r1, [sp, #28]
   29adc:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
   29ae0:	440b      	add	r3, r1
   29ae2:	429a      	cmp	r2, r3
   29ae4:	da14      	bge.n	29b10 <lv_draw_rect+0x852>
                fill_area2.x1 = area_outer->x1 + rout;
   29ae6:	8823      	ldrh	r3, [r4, #0]
   29ae8:	4453      	add	r3, sl
   29aea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = area_outer->x2 - rout;
   29aee:	88a3      	ldrh	r3, [r4, #4]
   29af0:	eba3 030a 	sub.w	r3, r3, sl
   29af4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   29af8:	9b06      	ldr	r3, [sp, #24]
   29afa:	9302      	str	r3, [sp, #8]
   29afc:	9b05      	ldr	r3, [sp, #20]
   29afe:	9301      	str	r3, [sp, #4]
   29b00:	2301      	movs	r3, #1
   29b02:	9300      	str	r3, [sp, #0]
   29b04:	4632      	mov	r2, r6
   29b06:	2300      	movs	r3, #0
   29b08:	a91a      	add	r1, sp, #104	; 0x68
   29b0a:	4648      	mov	r0, r9
   29b0c:	f7fe f882 	bl	27c14 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29b10:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
            fill_area2.x2 = area_outer->x2;
   29b14:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29b18:	1c53      	adds	r3, r2, #1
   29b1a:	eba3 030a 	sub.w	r3, r3, sl
   29b1e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   29b22:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   29b26:	f1c3 0301 	rsb	r3, r3, #1
   29b2a:	4413      	add	r3, r2
   29b2c:	9a08      	ldr	r2, [sp, #32]
   29b2e:	1a9b      	subs	r3, r3, r2
   29b30:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29b34:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   29b36:	9a06      	ldr	r2, [sp, #24]
   29b38:	9202      	str	r2, [sp, #8]
   29b3a:	9a05      	ldr	r2, [sp, #20]
   29b3c:	9201      	str	r2, [sp, #4]
   29b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29b40:	9200      	str	r2, [sp, #0]
   29b42:	2b00      	cmp	r3, #0
   29b44:	bfac      	ite	ge
   29b46:	18eb      	addge	r3, r5, r3
   29b48:	1c2b      	addlt	r3, r5, #0
   29b4a:	4632      	mov	r2, r6
   29b4c:	a91a      	add	r1, sp, #104	; 0x68
   29b4e:	4648      	mov	r0, r9
   29b50:	f7fe f860 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
   29b54:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29b58:	3301      	adds	r3, #1
   29b5a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   29b5e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29b62:	3301      	adds	r3, #1
   29b64:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   29b68:	f108 0801 	add.w	r8, r8, #1
   29b6c:	e584      	b.n	29678 <lv_draw_rect+0x3ba>
            _lv_memset_ff(mask_buf, draw_area_w);
   29b6e:	4639      	mov	r1, r7
   29b70:	4628      	mov	r0, r5
   29b72:	f7ff fb9b 	bl	292ac <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29b76:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29b7a:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29b7e:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29b82:	4442      	add	r2, r8
   29b84:	4419      	add	r1, r3
   29b86:	b212      	sxth	r2, r2
   29b88:	463b      	mov	r3, r7
   29b8a:	b209      	sxth	r1, r1
   29b8c:	4628      	mov	r0, r5
   29b8e:	f7f2 fedb 	bl	1c948 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
   29b92:	f9b4 3000 	ldrsh.w	r3, [r4]
   29b96:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area2.x2 = area_outer->x1 + rout - 1;
   29b9a:	3b01      	subs	r3, #1
   29b9c:	4453      	add	r3, sl
   29b9e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            fill_area2.y1 = fill_area.y1;
   29ba2:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29ba6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area2.y2 = fill_area.y2;
   29baa:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29bae:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29bb2:	9b06      	ldr	r3, [sp, #24]
   29bb4:	9302      	str	r3, [sp, #8]
   29bb6:	9b05      	ldr	r3, [sp, #20]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29bb8:	900b      	str	r0, [sp, #44]	; 0x2c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29bba:	9301      	str	r3, [sp, #4]
   29bbc:	9000      	str	r0, [sp, #0]
   29bbe:	462b      	mov	r3, r5
   29bc0:	4632      	mov	r2, r6
   29bc2:	a91a      	add	r1, sp, #104	; 0x68
   29bc4:	4648      	mov	r0, r9
   29bc6:	f7fe f825 	bl	27c14 <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
   29bca:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   29bce:	9907      	ldr	r1, [sp, #28]
   29bd0:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
   29bd4:	1a5b      	subs	r3, r3, r1
   29bd6:	429a      	cmp	r2, r3
   29bd8:	dd14      	ble.n	29c04 <lv_draw_rect+0x946>
                fill_area2.x1 = area_outer->x1 + rout;
   29bda:	8823      	ldrh	r3, [r4, #0]
   29bdc:	4453      	add	r3, sl
   29bde:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = area_outer->x2 - rout;
   29be2:	88a3      	ldrh	r3, [r4, #4]
   29be4:	eba3 030a 	sub.w	r3, r3, sl
   29be8:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   29bec:	9b06      	ldr	r3, [sp, #24]
   29bee:	9302      	str	r3, [sp, #8]
   29bf0:	9b05      	ldr	r3, [sp, #20]
   29bf2:	9301      	str	r3, [sp, #4]
   29bf4:	2301      	movs	r3, #1
   29bf6:	9300      	str	r3, [sp, #0]
   29bf8:	4632      	mov	r2, r6
   29bfa:	2300      	movs	r3, #0
   29bfc:	a91a      	add	r1, sp, #104	; 0x68
   29bfe:	4648      	mov	r0, r9
   29c00:	f7fe f808 	bl	27c14 <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29c04:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
            fill_area2.x2 = area_outer->x2;
   29c08:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29c0c:	1c53      	adds	r3, r2, #1
   29c0e:	eba3 030a 	sub.w	r3, r3, sl
   29c12:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   29c16:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   29c1a:	f1c3 0301 	rsb	r3, r3, #1
   29c1e:	4413      	add	r3, r2
   29c20:	9a08      	ldr	r2, [sp, #32]
   29c22:	1a9b      	subs	r3, r3, r2
   29c24:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29c28:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   29c2a:	9a06      	ldr	r2, [sp, #24]
   29c2c:	9202      	str	r2, [sp, #8]
   29c2e:	9a05      	ldr	r2, [sp, #20]
   29c30:	9201      	str	r2, [sp, #4]
   29c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29c34:	9200      	str	r2, [sp, #0]
   29c36:	2b00      	cmp	r3, #0
   29c38:	bfac      	ite	ge
   29c3a:	18eb      	addge	r3, r5, r3
   29c3c:	1c2b      	addlt	r3, r5, #0
   29c3e:	4632      	mov	r2, r6
   29c40:	a91a      	add	r1, sp, #104	; 0x68
   29c42:	4648      	mov	r0, r9
   29c44:	f7fd ffe6 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
   29c48:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29c4c:	3301      	adds	r3, #1
   29c4e:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   29c52:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29c56:	3301      	adds	r3, #1
   29c58:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   29c5c:	f108 0801 	add.w	r8, r8, #1
   29c60:	e522      	b.n	296a8 <lv_draw_rect+0x3ea>
        fill_area.x1 = area_outer->x1;
   29c62:	8823      	ldrh	r3, [r4, #0]
   29c64:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        fill_area.x2 = area_outer->x2;
   29c68:	88a3      	ldrh	r3, [r4, #4]
   29c6a:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29c6e:	f9bd 405a 	ldrsh.w	r4, [sp, #90]	; 0x5a
   29c72:	f8bb 3012 	ldrh.w	r3, [fp, #18]
   29c76:	4423      	add	r3, r4
   29c78:	b21b      	sxth	r3, r3
   29c7a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   29c7e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29c82:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   29c86:	429c      	cmp	r4, r3
   29c88:	f73f ad49 	bgt.w	2971e <lv_draw_rect+0x460>
            _lv_memset_ff(mask_buf, draw_area_w);
   29c8c:	4639      	mov	r1, r7
   29c8e:	4628      	mov	r0, r5
   29c90:	f7ff fb0c 	bl	292ac <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29c94:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29c98:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29c9c:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29ca0:	4422      	add	r2, r4
   29ca2:	4419      	add	r1, r3
   29ca4:	b212      	sxth	r2, r2
   29ca6:	463b      	mov	r3, r7
   29ca8:	b209      	sxth	r1, r1
   29caa:	4628      	mov	r0, r5
   29cac:	f7f2 fe4c 	bl	1c948 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
   29cb0:	9b06      	ldr	r3, [sp, #24]
   29cb2:	9302      	str	r3, [sp, #8]
   29cb4:	9b05      	ldr	r3, [sp, #20]
   29cb6:	4632      	mov	r2, r6
   29cb8:	e9cd 0300 	strd	r0, r3, [sp]
   29cbc:	a918      	add	r1, sp, #96	; 0x60
   29cbe:	462b      	mov	r3, r5
   29cc0:	4648      	mov	r0, r9
   29cc2:	f7fd ffa7 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
   29cc6:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29cca:	3301      	adds	r3, #1
   29ccc:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   29cd0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29cd4:	3301      	adds	r3, #1
   29cd6:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29cda:	3401      	adds	r4, #1
   29cdc:	e7d1      	b.n	29c82 <lv_draw_rect+0x9c4>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   29cde:	9b05      	ldr	r3, [sp, #20]
   29ce0:	2bfe      	cmp	r3, #254	; 0xfe
   29ce2:	bf28      	it	cs
   29ce4:	23ff      	movcs	r3, #255	; 0xff
   29ce6:	9305      	str	r3, [sp, #20]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   29ce8:	f7f1 f96a 	bl	1afc0 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29cec:	f000 f962 	bl	29fb4 <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   29cf0:	464a      	mov	r2, r9
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29cf2:	4683      	mov	fp, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   29cf4:	4621      	mov	r1, r4
   29cf6:	a818      	add	r0, sp, #96	; 0x60
   29cf8:	f000 f9c7 	bl	2a08a <_lv_area_intersect>
        if(is_common == false) return;
   29cfc:	2800      	cmp	r0, #0
   29cfe:	f43f ad17 	beq.w	29730 <lv_draw_rect+0x472>
        draw_area.x1 -= disp_area->x1;
   29d02:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29d06:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
        draw_area.y1 -= disp_area->y1;
   29d0a:	f9bb 6012 	ldrsh.w	r6, [fp, #18]
   29d0e:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
        draw_area.x1 -= disp_area->x1;
   29d12:	1a83      	subs	r3, r0, r2
   29d14:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        draw_area.x2 -= disp_area->x1;
   29d18:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   29d1c:	1a9a      	subs	r2, r3, r2
   29d1e:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        draw_area.y2 -= disp_area->y1;
   29d22:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
        draw_area.y1 -= disp_area->y1;
   29d26:	1b89      	subs	r1, r1, r6
        draw_area.y2 -= disp_area->y1;
   29d28:	1b92      	subs	r2, r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29d2a:	1c5e      	adds	r6, r3, #1
   29d2c:	1a36      	subs	r6, r6, r0
   29d2e:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29d30:	4630      	mov	r0, r6
        draw_area.y1 -= disp_area->y1;
   29d32:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
        draw_area.y2 -= disp_area->y1;
   29d36:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29d3a:	f7f3 fcb7 	bl	1d6ac <_lv_mem_buf_get>
        if(rout > 0) {
   29d3e:	f1b8 0f00 	cmp.w	r8, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29d42:	4682      	mov	sl, r0
        if(rout > 0) {
   29d44:	fa0f f788 	sxth.w	r7, r8
   29d48:	dd3d      	ble.n	29dc6 <lv_draw_rect+0xb08>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
   29d4a:	2300      	movs	r3, #0
   29d4c:	463a      	mov	r2, r7
   29d4e:	4621      	mov	r1, r4
   29d50:	a81c      	add	r0, sp, #112	; 0x70
   29d52:	f7f2 fed5 	bl	1cb00 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   29d56:	2100      	movs	r1, #0
   29d58:	a81c      	add	r0, sp, #112	; 0x70
   29d5a:	f7f2 fdcf 	bl	1c8fc <lv_draw_mask_add>
   29d5e:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
   29d60:	8a2a      	ldrh	r2, [r5, #16]
   29d62:	1aba      	subs	r2, r7, r2
   29d64:	2301      	movs	r3, #1
   29d66:	b212      	sxth	r2, r2
   29d68:	a914      	add	r1, sp, #80	; 0x50
   29d6a:	a823      	add	r0, sp, #140	; 0x8c
   29d6c:	f7f2 fec8 	bl	1cb00 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   29d70:	2100      	movs	r1, #0
   29d72:	a823      	add	r0, sp, #140	; 0x8c
   29d74:	f7f2 fdc2 	bl	1c8fc <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   29d78:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29d7c:	f8bb 2012 	ldrh.w	r2, [fp, #18]
        lv_color_t color = dsc->border_color;
   29d80:	89eb      	ldrh	r3, [r5, #14]
   29d82:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   29d86:	3f01      	subs	r7, #1
   29d88:	4547      	cmp	r7, r8
   29d8a:	bfb8      	it	lt
   29d8c:	4647      	movlt	r7, r8
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29d8e:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   29d92:	7d6b      	ldrb	r3, [r5, #21]
        fill_area.x1 = coords->x1;
   29d94:	f9b4 1000 	ldrsh.w	r1, [r4]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   29d98:	9308      	str	r3, [sp, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29d9a:	4442      	add	r2, r8
   29d9c:	b212      	sxth	r2, r2
   29d9e:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   29da2:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   29da6:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
        fill_area.x2 = coords->x2;
   29daa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   29dae:	9007      	str	r0, [sp, #28]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   29db0:	2a04      	cmp	r2, #4
        fill_area.x1 = coords->x1;
   29db2:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
        fill_area.x2 = coords->x2;
   29db6:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   29dba:	d108      	bne.n	29dce <lv_draw_rect+0xb10>
   29dbc:	19cd      	adds	r5, r1, r7
   29dbe:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
        uint32_t buf_ofs = 0;
   29dc2:	2500      	movs	r5, #0
   29dc4:	e00a      	b.n	29ddc <lv_draw_rect+0xb1e>
        int16_t mask_rout_id = LV_MASK_ID_INV;
   29dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29dca:	9306      	str	r3, [sp, #24]
   29dcc:	e7c8      	b.n	29d60 <lv_draw_rect+0xaa2>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
   29dce:	2a08      	cmp	r2, #8
   29dd0:	d1f7      	bne.n	29dc2 <lv_draw_rect+0xb04>
            fill_area.x1 = coords->x2 - corner_size;
   29dd2:	1bdd      	subs	r5, r3, r7
   29dd4:	b22d      	sxth	r5, r5
   29dd6:	f8ad 5068 	strh.w	r5, [sp, #104]	; 0x68
            buf_ofs = fill_area.x1 - coords->x1;
   29dda:	1a6d      	subs	r5, r5, r1
        volatile bool top_only = false;
   29ddc:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   29dde:	2a02      	cmp	r2, #2
        volatile bool top_only = false;
   29de0:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
   29de4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   29de8:	d11a      	bne.n	29e20 <lv_draw_rect+0xb62>
   29dea:	2301      	movs	r3, #1
   29dec:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
   29df0:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   29df4:	bb0b      	cbnz	r3, 29e3a <lv_draw_rect+0xb7c>
   29df6:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   29dfa:	f083 0301 	eor.w	r3, r3, #1
   29dfe:	f003 0301 	and.w	r3, r3, #1
   29e02:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   29e06:	4455      	add	r5, sl
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29e08:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   29e0c:	4598      	cmp	r8, r3
   29e0e:	dd16      	ble.n	29e3e <lv_draw_rect+0xb80>
        lv_draw_mask_remove_id(mask_rin_id);
   29e10:	9807      	ldr	r0, [sp, #28]
   29e12:	f7f2 fdbb 	bl	1c98c <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
   29e16:	9806      	ldr	r0, [sp, #24]
   29e18:	f7f2 fdb8 	bl	1c98c <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
   29e1c:	4650      	mov	r0, sl
   29e1e:	e485      	b.n	2972c <lv_draw_rect+0x46e>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   29e20:	2a01      	cmp	r2, #1
   29e22:	d007      	beq.n	29e34 <lv_draw_rect+0xb76>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   29e24:	2a03      	cmp	r2, #3
   29e26:	d1e3      	bne.n	29df0 <lv_draw_rect+0xb32>
            top_only = true;
   29e28:	2301      	movs	r3, #1
   29e2a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
   29e2e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   29e32:	e7dd      	b.n	29df0 <lv_draw_rect+0xb32>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   29e34:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   29e38:	e7da      	b.n	29df0 <lv_draw_rect+0xb32>
        volatile bool normal = !top_only && !bottom_only ? true : false;
   29e3a:	2300      	movs	r3, #0
   29e3c:	e7df      	b.n	29dfe <lv_draw_rect+0xb40>
            if(normal ||
   29e3e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   29e42:	b98b      	cbnz	r3, 29e68 <lv_draw_rect+0xbaa>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   29e44:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   29e48:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
            if(normal ||
   29e4c:	b123      	cbz	r3, 29e58 <lv_draw_rect+0xb9a>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   29e4e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   29e52:	443b      	add	r3, r7
   29e54:	429a      	cmp	r2, r3
   29e56:	dd07      	ble.n	29e68 <lv_draw_rect+0xbaa>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   29e58:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   29e5c:	b313      	cbz	r3, 29ea4 <lv_draw_rect+0xbe6>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   29e5e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   29e62:	1bdb      	subs	r3, r3, r7
   29e64:	429a      	cmp	r2, r3
   29e66:	db1d      	blt.n	29ea4 <lv_draw_rect+0xbe6>
                _lv_memset_ff(mask_buf, draw_area_w);
   29e68:	4631      	mov	r1, r6
   29e6a:	4650      	mov	r0, sl
   29e6c:	f7ff fa1e 	bl	292ac <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29e70:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   29e74:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29e78:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29e7c:	4442      	add	r2, r8
   29e7e:	4419      	add	r1, r3
   29e80:	b212      	sxth	r2, r2
   29e82:	4633      	mov	r3, r6
   29e84:	b209      	sxth	r1, r1
   29e86:	4650      	mov	r0, sl
   29e88:	f7f2 fd5e 	bl	1c948 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   29e8c:	9b08      	ldr	r3, [sp, #32]
   29e8e:	9302      	str	r3, [sp, #8]
   29e90:	9b05      	ldr	r3, [sp, #20]
   29e92:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   29e96:	e9cd 0300 	strd	r0, r3, [sp]
   29e9a:	a91a      	add	r1, sp, #104	; 0x68
   29e9c:	462b      	mov	r3, r5
   29e9e:	4648      	mov	r0, r9
   29ea0:	f7fd feb8 	bl	27c14 <_lv_blend_fill>
            fill_area.y1++;
   29ea4:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   29ea8:	3301      	adds	r3, #1
   29eaa:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   29eae:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   29eb2:	3301      	adds	r3, #1
   29eb4:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29eb8:	f108 0801 	add.w	r8, r8, #1
   29ebc:	e7a4      	b.n	29e08 <lv_draw_rect+0xb4a>
            if(grad_dir == LV_GRAD_DIR_VER) {
   29ebe:	2e01      	cmp	r6, #1
            opa2 = opa;
   29ec0:	f8cd a018 	str.w	sl, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
   29ec4:	f43f ad44 	beq.w	29950 <lv_draw_rect+0x692>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   29ec8:	2701      	movs	r7, #1
   29eca:	e547      	b.n	2995c <lv_draw_rect+0x69e>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   29ecc:	2e02      	cmp	r6, #2
   29ece:	f47f adcc 	bne.w	29a6a <lv_draw_rect+0x7ac>
   29ed2:	e5ae      	b.n	29a32 <lv_draw_rect+0x774>

00029ed4 <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
   29ed4:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
   29ed6:	3901      	subs	r1, #1
    res->y2 = h - 1;
   29ed8:	3a01      	subs	r2, #1
    res->x1 = 0;
   29eda:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
   29edc:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
   29ede:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
   29ee0:	80c2      	strh	r2, [r0, #6]
#endif
}
   29ee2:	4770      	bx	lr

00029ee4 <_lv_memset_00>:
{
   29ee4:	460a      	mov	r2, r1
   29ee6:	2100      	movs	r1, #0
   29ee8:	f001 bc84 	b.w	2b7f4 <memset>

00029eec <lv_img_decoder_built_in_close>:
{
   29eec:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   29eee:	69cd      	ldr	r5, [r1, #28]
{
   29ef0:	460c      	mov	r4, r1
    if(user_data) {
   29ef2:	b165      	cbz	r5, 29f0e <lv_img_decoder_built_in_close+0x22>
        if(user_data->palette) lv_mem_free(user_data->palette);
   29ef4:	6828      	ldr	r0, [r5, #0]
   29ef6:	b108      	cbz	r0, 29efc <lv_img_decoder_built_in_close+0x10>
   29ef8:	f7f3 fb7e 	bl	1d5f8 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
   29efc:	6868      	ldr	r0, [r5, #4]
   29efe:	b108      	cbz	r0, 29f04 <lv_img_decoder_built_in_close+0x18>
   29f00:	f7f3 fb7a 	bl	1d5f8 <lv_mem_free>
        lv_mem_free(user_data);
   29f04:	4628      	mov	r0, r5
   29f06:	f7f3 fb77 	bl	1d5f8 <lv_mem_free>
        dsc->user_data = NULL;
   29f0a:	2300      	movs	r3, #0
   29f0c:	61e3      	str	r3, [r4, #28]
}
   29f0e:	bd38      	pop	{r3, r4, r5, pc}

00029f10 <_lv_memset_00>:
   29f10:	460a      	mov	r2, r1
   29f12:	2100      	movs	r1, #0
   29f14:	f001 bc6e 	b.w	2b7f4 <memset>

00029f18 <lv_img_decoder_read_line>:
{
   29f18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29f1a:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
   29f1c:	6800      	ldr	r0, [r0, #0]
   29f1e:	6884      	ldr	r4, [r0, #8]
   29f20:	b144      	cbz	r4, 29f34 <lv_img_decoder_read_line+0x1c>
   29f22:	9e06      	ldr	r6, [sp, #24]
   29f24:	e9cd 3600 	strd	r3, r6, [sp]
   29f28:	4613      	mov	r3, r2
   29f2a:	460a      	mov	r2, r1
   29f2c:	4629      	mov	r1, r5
   29f2e:	47a0      	blx	r4
}
   29f30:	b002      	add	sp, #8
   29f32:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
   29f34:	4620      	mov	r0, r4
   29f36:	e7fb      	b.n	29f30 <lv_img_decoder_read_line+0x18>

00029f38 <lv_img_decoder_close>:
{
   29f38:	b510      	push	{r4, lr}
   29f3a:	4604      	mov	r4, r0
    if(dsc->decoder) {
   29f3c:	6800      	ldr	r0, [r0, #0]
   29f3e:	b158      	cbz	r0, 29f58 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   29f40:	68c3      	ldr	r3, [r0, #12]
   29f42:	b10b      	cbz	r3, 29f48 <lv_img_decoder_close+0x10>
   29f44:	4621      	mov	r1, r4
   29f46:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   29f48:	7aa3      	ldrb	r3, [r4, #10]
   29f4a:	2b01      	cmp	r3, #1
   29f4c:	d104      	bne.n	29f58 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
   29f4e:	6860      	ldr	r0, [r4, #4]
   29f50:	f7f3 fb52 	bl	1d5f8 <lv_mem_free>
            dsc->src = NULL;
   29f54:	2300      	movs	r3, #0
   29f56:	6063      	str	r3, [r4, #4]
}
   29f58:	bd10      	pop	{r4, pc}

00029f5a <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   29f5a:	460a      	mov	r2, r1
   29f5c:	2100      	movs	r1, #0
   29f5e:	f001 bc49 	b.w	2b7f4 <memset>

00029f62 <lv_disp_drv_init>:
{
   29f62:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   29f64:	2130      	movs	r1, #48	; 0x30
{
   29f66:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   29f68:	f7ff fff7 	bl	29f5a <_lv_memset_00>
    driver->color_chroma_key = LV_COLOR_TRANSP;
   29f6c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    driver->flush_cb         = NULL;
   29f70:	2200      	movs	r2, #0
    driver->color_chroma_key = LV_COLOR_TRANSP;
   29f72:	8523      	strh	r3, [r4, #40]	; 0x28
    driver->hor_res          = LV_HOR_RES_MAX;
   29f74:	f04f 13f0 	mov.w	r3, #15728880	; 0xf000f0
    driver->buffer           = NULL;
   29f78:	e9c4 3200 	strd	r3, r2, [r4]
    driver->rotated          = 0;
   29f7c:	8923      	ldrh	r3, [r4, #8]
    driver->flush_cb         = NULL;
   29f7e:	60e2      	str	r2, [r4, #12]
    driver->rotated          = 0;
   29f80:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
   29f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   29f88:	8123      	strh	r3, [r4, #8]
    driver->user_data = NULL;
   29f8a:	62e2      	str	r2, [r4, #44]	; 0x2c
    driver->set_px_cb = NULL;
   29f8c:	6162      	str	r2, [r4, #20]
}
   29f8e:	bd10      	pop	{r4, pc}

00029f90 <lv_disp_buf_init>:
{
   29f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f92:	4604      	mov	r4, r0
   29f94:	460d      	mov	r5, r1
   29f96:	4617      	mov	r7, r2
   29f98:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
   29f9a:	2124      	movs	r1, #36	; 0x24
   29f9c:	f7ff ffdd 	bl	29f5a <_lv_memset_00>
    disp_buf->buf2    = buf2;
   29fa0:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
   29fa4:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
   29fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029faa <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   29faa:	6843      	ldr	r3, [r0, #4]
   29fac:	2200      	movs	r2, #0
   29fae:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
   29fb0:	61da      	str	r2, [r3, #28]
}
   29fb2:	4770      	bx	lr

00029fb4 <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   29fb4:	6840      	ldr	r0, [r0, #4]
   29fb6:	4770      	bx	lr

00029fb8 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   29fb8:	6843      	ldr	r3, [r0, #4]
   29fba:	6818      	ldr	r0, [r3, #0]
   29fbc:	b118      	cbz	r0, 29fc6 <lv_disp_is_double_buf+0xe>
   29fbe:	6858      	ldr	r0, [r3, #4]
   29fc0:	3800      	subs	r0, #0
   29fc2:	bf18      	it	ne
   29fc4:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
   29fc6:	4770      	bx	lr

00029fc8 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   29fc8:	b508      	push	{r3, lr}
   29fca:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   29fcc:	f7ff fff4 	bl	29fb8 <lv_disp_is_double_buf>
   29fd0:	b140      	cbz	r0, 29fe4 <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   29fd2:	8853      	ldrh	r3, [r2, #2]
   29fd4:	8810      	ldrh	r0, [r2, #0]
   29fd6:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   29fda:	6853      	ldr	r3, [r2, #4]
   29fdc:	68db      	ldr	r3, [r3, #12]
   29fde:	1ac3      	subs	r3, r0, r3
   29fe0:	4258      	negs	r0, r3
   29fe2:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
   29fe4:	bd08      	pop	{r3, pc}

00029fe6 <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
   29fe6:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   29fe8:	f001 f9fe 	bl	2b3e8 <z_impl_k_uptime_ticks>
   29fec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29ff0:	fba0 2304 	umull	r2, r3, r0, r4
   29ff4:	fb04 3301 	mla	r3, r4, r1, r3
   29ff8:	0bd0      	lsrs	r0, r2, #15

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   29ffa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   29ffe:	bd10      	pop	{r4, pc}

0002a000 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   2a000:	b538      	push	{r3, r4, r5, lr}
   2a002:	4604      	mov	r4, r0
   2a004:	f001 f9f0 	bl	2b3e8 <z_impl_k_uptime_ticks>
   2a008:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   2a00c:	fba0 2305 	umull	r2, r3, r0, r5
   2a010:	fb05 3301 	mla	r3, r5, r1, r3
   2a014:	0bd0      	lsrs	r0, r2, #15
   2a016:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   2a01a:	1b00      	subs	r0, r0, r4
   2a01c:	bd38      	pop	{r3, r4, r5, pc}

0002a01e <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   2a01e:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   2a020:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   2a024:	f9b0 5000 	ldrsh.w	r5, [r0]
    /* Circle center */
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   2a028:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
   2a02a:	8840      	ldrh	r0, [r0, #2]
   2a02c:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
   2a02e:	1b5b      	subs	r3, r3, r5
   2a030:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t py = p->y - cy;
   2a034:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
   2a036:	105c      	asrs	r4, r3, #1
    lv_coord_t px = p->x - cx;
   2a038:	1b52      	subs	r2, r2, r5
    lv_coord_t r = (area->x2 - area->x1) / 2;
   2a03a:	f343 034f 	sbfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
   2a03e:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
   2a040:	1acb      	subs	r3, r1, r3

    int32_t r_sqrd = r * r;
    int32_t dist = (px * px) + (py * py);
   2a042:	fb13 f303 	smulbb	r3, r3, r3
    int32_t r_sqrd = r * r;
   2a046:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
   2a048:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   2a04c:	4294      	cmp	r4, r2
   2a04e:	bfb4      	ite	lt
   2a050:	2000      	movlt	r0, #0
   2a052:	2001      	movge	r0, #1
   2a054:	bd30      	pop	{r4, r5, pc}

0002a056 <lv_area_set>:
    area_p->x2 = x2;
   2a056:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
   2a058:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
   2a05c:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
   2a05e:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
   2a060:	80c3      	strh	r3, [r0, #6]
}
   2a062:	4770      	bx	lr

0002a064 <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   2a064:	8843      	ldrh	r3, [r0, #2]
   2a066:	3901      	subs	r1, #1
   2a068:	4419      	add	r1, r3
   2a06a:	80c1      	strh	r1, [r0, #6]
}
   2a06c:	4770      	bx	lr

0002a06e <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   2a06e:	f9b0 3000 	ldrsh.w	r3, [r0]
   2a072:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   2a076:	1ad2      	subs	r2, r2, r3
   2a078:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   2a07c:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   2a080:	3301      	adds	r3, #1
   2a082:	1a18      	subs	r0, r3, r0
}
   2a084:	fb02 0000 	mla	r0, r2, r0, r0
   2a088:	4770      	bx	lr

0002a08a <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a08a:	f9b1 3000 	ldrsh.w	r3, [r1]
{
   2a08e:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a090:	f9b2 6000 	ldrsh.w	r6, [r2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a094:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a098:	429e      	cmp	r6, r3
   2a09a:	bfb8      	it	lt
   2a09c:	461e      	movlt	r6, r3
{
   2a09e:	4604      	mov	r4, r0
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2a0a0:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a0a4:	8006      	strh	r6, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2a0a6:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
   2a0aa:	4283      	cmp	r3, r0
   2a0ac:	bfb8      	it	lt
   2a0ae:	4603      	movlt	r3, r0
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a0b0:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2a0b4:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a0b6:	4285      	cmp	r5, r0
   2a0b8:	bfa8      	it	ge
   2a0ba:	4605      	movge	r5, r0
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2a0bc:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
   2a0c0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a0c4:	80a5      	strh	r5, [r4, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2a0c6:	4290      	cmp	r0, r2
   2a0c8:	bfa8      	it	ge
   2a0ca:	4610      	movge	r0, r2
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2a0cc:	42ae      	cmp	r6, r5
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2a0ce:	80e0      	strh	r0, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2a0d0:	dc04      	bgt.n	2a0dc <_lv_area_intersect+0x52>
   2a0d2:	4283      	cmp	r3, r0
   2a0d4:	bfcc      	ite	gt
   2a0d6:	2000      	movgt	r0, #0
   2a0d8:	2001      	movle	r0, #1
}
   2a0da:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
   2a0dc:	2000      	movs	r0, #0
   2a0de:	e7fc      	b.n	2a0da <_lv_area_intersect+0x50>

0002a0e0 <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2a0e0:	f9b2 3000 	ldrsh.w	r3, [r2]
{
   2a0e4:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2a0e6:	f9b1 4000 	ldrsh.w	r4, [r1]
   2a0ea:	42a3      	cmp	r3, r4
   2a0ec:	bfa8      	it	ge
   2a0ee:	4623      	movge	r3, r4
   2a0f0:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   2a0f2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   2a0f6:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   2a0fa:	42a3      	cmp	r3, r4
   2a0fc:	bfa8      	it	ge
   2a0fe:	4623      	movge	r3, r4
   2a100:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   2a102:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   2a106:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   2a10a:	42a3      	cmp	r3, r4
   2a10c:	bfb8      	it	lt
   2a10e:	4623      	movlt	r3, r4
   2a110:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   2a112:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   2a116:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   2a11a:	4293      	cmp	r3, r2
   2a11c:	bfb8      	it	lt
   2a11e:	4613      	movlt	r3, r2
   2a120:	80c3      	strh	r3, [r0, #6]
}
   2a122:	bd10      	pop	{r4, pc}

0002a124 <_lv_area_is_point_on>:
{
   2a124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   2a128:	f9b1 3000 	ldrsh.w	r3, [r1]
   2a12c:	f9b0 5000 	ldrsh.w	r5, [r0]
   2a130:	42ab      	cmp	r3, r5
{
   2a132:	460e      	mov	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   2a134:	db7d      	blt.n	2a232 <_lv_area_is_point_on+0x10e>
   2a136:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   2a13a:	4543      	cmp	r3, r8
   2a13c:	dc79      	bgt.n	2a232 <_lv_area_is_point_on+0x10e>
   2a13e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2a142:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
   2a146:	42bb      	cmp	r3, r7
   2a148:	db73      	blt.n	2a232 <_lv_area_is_point_on+0x10e>
   2a14a:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
   2a14e:	454b      	cmp	r3, r9
   2a150:	dc6f      	bgt.n	2a232 <_lv_area_is_point_on+0x10e>
    if(radius <= 0) {
   2a152:	2a00      	cmp	r2, #0
   2a154:	dc03      	bgt.n	2a15e <_lv_area_is_point_on+0x3a>
        return true;
   2a156:	2001      	movs	r0, #1
}
   2a158:	b003      	add	sp, #12
   2a15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a15e:	f108 0301 	add.w	r3, r8, #1
   2a162:	1b5b      	subs	r3, r3, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a164:	f109 0001 	add.w	r0, r9, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   2a168:	f3c3 34c0 	ubfx	r4, r3, #15, #1
   2a16c:	1bc0      	subs	r0, r0, r7
   2a16e:	fa04 f383 	sxtah	r3, r4, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   2a172:	f3c0 34c0 	ubfx	r4, r0, #15, #1
   2a176:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   2a17a:	105c      	asrs	r4, r3, #1
   2a17c:	1043      	asrs	r3, r0, #1
   2a17e:	429c      	cmp	r4, r3
   2a180:	bfa8      	it	ge
   2a182:	461c      	movge	r4, r3
   2a184:	4294      	cmp	r4, r2
   2a186:	bfa8      	it	ge
   2a188:	4614      	movge	r4, r2
    corner_area.x1 = a_p->x1;
   2a18a:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.y2 = a_p->y1 + radius;
   2a18e:	eb07 0a04 	add.w	sl, r7, r4
    corner_area.x2 = a_p->x1 + radius;
   2a192:	4425      	add	r5, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a194:	2200      	movs	r2, #0
    corner_area.x2 = a_p->x1 + radius;
   2a196:	b22d      	sxth	r5, r5
    corner_area.y2 = a_p->y1 + radius;
   2a198:	fa0f fa8a 	sxth.w	sl, sl
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a19c:	4668      	mov	r0, sp
    corner_area.x2 = a_p->x1 + radius;
   2a19e:	f8ad 5004 	strh.w	r5, [sp, #4]
    corner_area.y1 = a_p->y1;
   2a1a2:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   2a1a6:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1aa:	f7ff ffbb 	bl	2a124 <_lv_area_is_point_on>
   2a1ae:	4602      	mov	r2, r0
   2a1b0:	b130      	cbz	r0, 2a1c0 <_lv_area_is_point_on+0x9c>
        corner_area.x2 += radius;
   2a1b2:	4425      	add	r5, r4
   2a1b4:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y2 += radius;
   2a1b8:	4454      	add	r4, sl
   2a1ba:	f8ad 4006 	strh.w	r4, [sp, #6]
   2a1be:	e014      	b.n	2a1ea <_lv_area_is_point_on+0xc6>
    corner_area.y1 = a_p->y2 - radius;
   2a1c0:	eba9 0b04 	sub.w	fp, r9, r4
   2a1c4:	fa0f fb8b 	sxth.w	fp, fp
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1c8:	4631      	mov	r1, r6
   2a1ca:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y2 - radius;
   2a1cc:	f8ad b002 	strh.w	fp, [sp, #2]
    corner_area.y2 = a_p->y2;
   2a1d0:	f8ad 9006 	strh.w	r9, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1d4:	f7ff ffa6 	bl	2a124 <_lv_area_is_point_on>
   2a1d8:	4602      	mov	r2, r0
   2a1da:	b158      	cbz	r0, 2a1f4 <_lv_area_is_point_on+0xd0>
        corner_area.x2 += radius;
   2a1dc:	4425      	add	r5, r4
   2a1de:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y1 -= radius;
   2a1e2:	ebab 0404 	sub.w	r4, fp, r4
   2a1e6:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
   2a1ea:	4631      	mov	r1, r6
   2a1ec:	4668      	mov	r0, sp
   2a1ee:	f7ff ff16 	bl	2a01e <lv_point_within_circle>
   2a1f2:	e7b1      	b.n	2a158 <_lv_area_is_point_on+0x34>
    corner_area.x1 = a_p->x2 - radius;
   2a1f4:	eba8 0304 	sub.w	r3, r8, r4
   2a1f8:	b21d      	sxth	r5, r3
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1fa:	4631      	mov	r1, r6
   2a1fc:	4668      	mov	r0, sp
    corner_area.x1 = a_p->x2 - radius;
   2a1fe:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.x2 = a_p->x2;
   2a202:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a206:	f7ff ff8d 	bl	2a124 <_lv_area_is_point_on>
   2a20a:	4602      	mov	r2, r0
   2a20c:	b118      	cbz	r0, 2a216 <_lv_area_is_point_on+0xf2>
        corner_area.x1 -= radius;
   2a20e:	1b2b      	subs	r3, r5, r4
   2a210:	f8ad 3000 	strh.w	r3, [sp]
   2a214:	e7e5      	b.n	2a1e2 <_lv_area_is_point_on+0xbe>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a216:	4631      	mov	r1, r6
   2a218:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y1;
   2a21a:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   2a21e:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a222:	f7ff ff7f 	bl	2a124 <_lv_area_is_point_on>
   2a226:	2800      	cmp	r0, #0
   2a228:	d095      	beq.n	2a156 <_lv_area_is_point_on+0x32>
        corner_area.x1 -= radius;
   2a22a:	1b2b      	subs	r3, r5, r4
   2a22c:	f8ad 3000 	strh.w	r3, [sp]
   2a230:	e7c2      	b.n	2a1b8 <_lv_area_is_point_on+0x94>
        return false;
   2a232:	2000      	movs	r0, #0
   2a234:	e790      	b.n	2a158 <_lv_area_is_point_on+0x34>

0002a236 <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   2a236:	f9b0 2000 	ldrsh.w	r2, [r0]
   2a23a:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   2a23e:	429a      	cmp	r2, r3
   2a240:	dc14      	bgt.n	2a26c <_lv_area_is_on+0x36>
   2a242:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   2a246:	f9b1 3000 	ldrsh.w	r3, [r1]
   2a24a:	429a      	cmp	r2, r3
   2a24c:	db0e      	blt.n	2a26c <_lv_area_is_on+0x36>
   2a24e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   2a252:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   2a256:	429a      	cmp	r2, r3
   2a258:	dc08      	bgt.n	2a26c <_lv_area_is_on+0x36>
   2a25a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   2a25e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2a262:	4298      	cmp	r0, r3
   2a264:	bfb4      	ite	lt
   2a266:	2000      	movlt	r0, #0
   2a268:	2001      	movge	r0, #1
   2a26a:	4770      	bx	lr
        return false;
   2a26c:	2000      	movs	r0, #0
}
   2a26e:	4770      	bx	lr

0002a270 <_lv_area_is_in>:
{
   2a270:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   2a274:	f9b1 3000 	ldrsh.w	r3, [r1]
   2a278:	f9b0 7000 	ldrsh.w	r7, [r0]
   2a27c:	42bb      	cmp	r3, r7
{
   2a27e:	4605      	mov	r5, r0
   2a280:	460c      	mov	r4, r1
   2a282:	4616      	mov	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   2a284:	dc23      	bgt.n	2a2ce <_lv_area_is_in+0x5e>
   2a286:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   2a28a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2a28e:	429a      	cmp	r2, r3
   2a290:	db1d      	blt.n	2a2ce <_lv_area_is_in+0x5e>
   2a292:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   2a296:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   2a29a:	429a      	cmp	r2, r3
   2a29c:	dc17      	bgt.n	2a2ce <_lv_area_is_in+0x5e>
   2a29e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   2a2a2:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
   2a2a6:	4283      	cmp	r3, r0
   2a2a8:	bfcc      	ite	gt
   2a2aa:	2000      	movgt	r0, #0
   2a2ac:	2001      	movle	r0, #1
    if(radius == 0) return is_in;
   2a2ae:	b15e      	cbz	r6, 2a2c8 <_lv_area_is_in+0x58>
    p.y = ain_p->y1;
   2a2b0:	886b      	ldrh	r3, [r5, #2]
    p.x = ain_p->x1;
   2a2b2:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2b6:	4632      	mov	r2, r6
   2a2b8:	a901      	add	r1, sp, #4
   2a2ba:	4620      	mov	r0, r4
    p.y = ain_p->y1;
   2a2bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2c0:	f7ff ff30 	bl	2a124 <_lv_area_is_point_on>
   2a2c4:	b928      	cbnz	r0, 2a2d2 <_lv_area_is_in+0x62>
   2a2c6:	2000      	movs	r0, #0
}
   2a2c8:	b002      	add	sp, #8
   2a2ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   2a2ce:	2000      	movs	r0, #0
   2a2d0:	e7ed      	b.n	2a2ae <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
   2a2d2:	f9b5 8004 	ldrsh.w	r8, [r5, #4]
   2a2d6:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2da:	4632      	mov	r2, r6
   2a2dc:	a901      	add	r1, sp, #4
   2a2de:	4620      	mov	r0, r4
   2a2e0:	f7ff ff20 	bl	2a124 <_lv_area_is_point_on>
   2a2e4:	2800      	cmp	r0, #0
   2a2e6:	d0ee      	beq.n	2a2c6 <_lv_area_is_in+0x56>
    p.y = ain_p->y2;
   2a2e8:	88eb      	ldrh	r3, [r5, #6]
    p.x = ain_p->x1;
   2a2ea:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2ee:	4632      	mov	r2, r6
   2a2f0:	a901      	add	r1, sp, #4
   2a2f2:	4620      	mov	r0, r4
    p.y = ain_p->y2;
   2a2f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2f8:	f7ff ff14 	bl	2a124 <_lv_area_is_point_on>
   2a2fc:	2800      	cmp	r0, #0
   2a2fe:	d0e2      	beq.n	2a2c6 <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a300:	4632      	mov	r2, r6
   2a302:	a901      	add	r1, sp, #4
   2a304:	4620      	mov	r0, r4
    p.x = ain_p->x2;
   2a306:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a30a:	f7ff ff0b 	bl	2a124 <_lv_area_is_point_on>
   2a30e:	e7db      	b.n	2a2c8 <_lv_area_is_in+0x58>

0002a310 <_lv_area_align>:
{
   2a310:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a312:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   2a316:	f9b0 5000 	ldrsh.w	r5, [r0]
   2a31a:	2a14      	cmp	r2, #20
   2a31c:	d83f      	bhi.n	2a39e <_lv_area_align+0x8e>
   2a31e:	e8df f012 	tbh	[pc, r2, lsl #1]
   2a322:	0015      	.short	0x0015
   2a324:	0045003b 	.word	0x0045003b
   2a328:	0061005a 	.word	0x0061005a
   2a32c:	007c0069 	.word	0x007c0069
   2a330:	00850083 	.word	0x00850083
   2a334:	0093008c 	.word	0x0093008c
   2a338:	00ad00a6 	.word	0x00ad00a6
   2a33c:	00c600b3 	.word	0x00c600b3
   2a340:	00d200cd 	.word	0x00d200cd
   2a344:	00dc00d7 	.word	0x00dc00d7
   2a348:	00e200df 	.word	0x00e200df
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a34c:	888a      	ldrh	r2, [r1, #4]
   2a34e:	880e      	ldrh	r6, [r1, #0]
   2a350:	3201      	adds	r2, #1
   2a352:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a354:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a358:	fa06 f682 	sxtah	r6, r6, r2
   2a35c:	8882      	ldrh	r2, [r0, #4]
   2a35e:	3201      	adds	r2, #1
   2a360:	1b52      	subs	r2, r2, r5
   2a362:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   2a366:	fa07 f282 	sxtah	r2, r7, r2
   2a36a:	1052      	asrs	r2, r2, #1
   2a36c:	eba2 0266 	sub.w	r2, r2, r6, asr #1
            res->x = lv_area_get_width(base);
   2a370:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a372:	88ca      	ldrh	r2, [r1, #6]
   2a374:	8849      	ldrh	r1, [r1, #2]
   2a376:	3201      	adds	r2, #1
   2a378:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   2a37a:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2a37e:	fa01 f182 	sxtah	r1, r1, r2
   2a382:	88c2      	ldrh	r2, [r0, #6]
   2a384:	3201      	adds	r2, #1
   2a386:	1b12      	subs	r2, r2, r4
   2a388:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2a38c:	fa00 f282 	sxtah	r2, r0, r2
   2a390:	1052      	asrs	r2, r2, #1
   2a392:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   2a396:	e001      	b.n	2a39c <_lv_area_align+0x8c>
            res->x = 0;
   2a398:	2200      	movs	r2, #0
   2a39a:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   2a39c:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   2a39e:	881a      	ldrh	r2, [r3, #0]
   2a3a0:	4415      	add	r5, r2
    res->y += base->y1;
   2a3a2:	885a      	ldrh	r2, [r3, #2]
    res->x += base->x1;
   2a3a4:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
   2a3a6:	4414      	add	r4, r2
   2a3a8:	805c      	strh	r4, [r3, #2]
}
   2a3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a3ac:	888a      	ldrh	r2, [r1, #4]
   2a3ae:	8809      	ldrh	r1, [r1, #0]
   2a3b0:	3201      	adds	r2, #1
   2a3b2:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a3b4:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2a3b8:	fa01 f182 	sxtah	r1, r1, r2
   2a3bc:	8882      	ldrh	r2, [r0, #4]
   2a3be:	3201      	adds	r2, #1
   2a3c0:	1b52      	subs	r2, r2, r5
   2a3c2:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2a3c6:	fa00 f282 	sxtah	r2, r0, r2
   2a3ca:	1052      	asrs	r2, r2, #1
   2a3cc:	eba2 0261 	sub.w	r2, r2, r1, asr #1
            res->x = lv_area_get_width(base);
   2a3d0:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   2a3d2:	2200      	movs	r2, #0
   2a3d4:	e7e2      	b.n	2a39c <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a3d6:	880a      	ldrh	r2, [r1, #0]
   2a3d8:	8889      	ldrh	r1, [r1, #4]
   2a3da:	1a52      	subs	r2, r2, r1
   2a3dc:	8881      	ldrh	r1, [r0, #4]
   2a3de:	440a      	add	r2, r1
   2a3e0:	1b52      	subs	r2, r2, r5
   2a3e2:	e7f5      	b.n	2a3d0 <_lv_area_align+0xc0>
            res->x = 0;
   2a3e4:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
   2a3e6:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   2a3e8:	884a      	ldrh	r2, [r1, #2]
   2a3ea:	88c9      	ldrh	r1, [r1, #6]
   2a3ec:	1a52      	subs	r2, r2, r1
   2a3ee:	88c1      	ldrh	r1, [r0, #6]
   2a3f0:	440a      	add	r2, r1
   2a3f2:	e047      	b.n	2a484 <_lv_area_align+0x174>
   2a3f4:	888a      	ldrh	r2, [r1, #4]
   2a3f6:	880e      	ldrh	r6, [r1, #0]
   2a3f8:	3201      	adds	r2, #1
   2a3fa:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a3fc:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a400:	fa06 f682 	sxtah	r6, r6, r2
   2a404:	8882      	ldrh	r2, [r0, #4]
   2a406:	3201      	adds	r2, #1
   2a408:	1b52      	subs	r2, r2, r5
   2a40a:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   2a40e:	fa07 f282 	sxtah	r2, r7, r2
   2a412:	1052      	asrs	r2, r2, #1
   2a414:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   2a418:	e7e5      	b.n	2a3e6 <_lv_area_align+0xd6>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a41a:	888e      	ldrh	r6, [r1, #4]
   2a41c:	880a      	ldrh	r2, [r1, #0]
   2a41e:	1b92      	subs	r2, r2, r6
   2a420:	8886      	ldrh	r6, [r0, #4]
   2a422:	4432      	add	r2, r6
   2a424:	1b52      	subs	r2, r2, r5
   2a426:	e7de      	b.n	2a3e6 <_lv_area_align+0xd6>
            res->x = 0;
   2a428:	2200      	movs	r2, #0
   2a42a:	e7a1      	b.n	2a370 <_lv_area_align+0x60>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a42c:	888e      	ldrh	r6, [r1, #4]
   2a42e:	880a      	ldrh	r2, [r1, #0]
   2a430:	1b92      	subs	r2, r2, r6
   2a432:	8886      	ldrh	r6, [r0, #4]
   2a434:	4432      	add	r2, r6
   2a436:	1b52      	subs	r2, r2, r5
   2a438:	e79a      	b.n	2a370 <_lv_area_align+0x60>
            res->x = 0;
   2a43a:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a43c:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a43e:	88ca      	ldrh	r2, [r1, #6]
   2a440:	1c50      	adds	r0, r2, #1
   2a442:	884a      	ldrh	r2, [r1, #2]
            res->y = -lv_area_get_height(to_align);
   2a444:	1a12      	subs	r2, r2, r0
   2a446:	e7a9      	b.n	2a39c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a448:	888a      	ldrh	r2, [r1, #4]
   2a44a:	880e      	ldrh	r6, [r1, #0]
   2a44c:	3201      	adds	r2, #1
   2a44e:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a450:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a454:	fa06 f682 	sxtah	r6, r6, r2
   2a458:	8882      	ldrh	r2, [r0, #4]
   2a45a:	3201      	adds	r2, #1
   2a45c:	1b52      	subs	r2, r2, r5
   2a45e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2a462:	fa00 f282 	sxtah	r2, r0, r2
   2a466:	1052      	asrs	r2, r2, #1
   2a468:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   2a46c:	e7e6      	b.n	2a43c <_lv_area_align+0x12c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a46e:	880a      	ldrh	r2, [r1, #0]
   2a470:	888e      	ldrh	r6, [r1, #4]
   2a472:	8880      	ldrh	r0, [r0, #4]
   2a474:	1b92      	subs	r2, r2, r6
   2a476:	4402      	add	r2, r0
   2a478:	1b52      	subs	r2, r2, r5
   2a47a:	e7df      	b.n	2a43c <_lv_area_align+0x12c>
            res->x = 0;
   2a47c:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a47e:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a480:	88c2      	ldrh	r2, [r0, #6]
   2a482:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   2a484:	1b12      	subs	r2, r2, r4
   2a486:	e789      	b.n	2a39c <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a488:	888a      	ldrh	r2, [r1, #4]
   2a48a:	8809      	ldrh	r1, [r1, #0]
   2a48c:	3201      	adds	r2, #1
   2a48e:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a490:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2a494:	fa01 f182 	sxtah	r1, r1, r2
   2a498:	8882      	ldrh	r2, [r0, #4]
   2a49a:	3201      	adds	r2, #1
   2a49c:	1b52      	subs	r2, r2, r5
   2a49e:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a4a2:	fa06 f282 	sxtah	r2, r6, r2
   2a4a6:	1052      	asrs	r2, r2, #1
   2a4a8:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   2a4ac:	e7e7      	b.n	2a47e <_lv_area_align+0x16e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a4ae:	880a      	ldrh	r2, [r1, #0]
   2a4b0:	8889      	ldrh	r1, [r1, #4]
   2a4b2:	1a52      	subs	r2, r2, r1
   2a4b4:	8881      	ldrh	r1, [r0, #4]
   2a4b6:	440a      	add	r2, r1
   2a4b8:	1b52      	subs	r2, r2, r5
   2a4ba:	e7e0      	b.n	2a47e <_lv_area_align+0x16e>
   2a4bc:	888a      	ldrh	r2, [r1, #4]
   2a4be:	1c50      	adds	r0, r2, #1
   2a4c0:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2a4c2:	1a12      	subs	r2, r2, r0
   2a4c4:	e784      	b.n	2a3d0 <_lv_area_align+0xc0>
   2a4c6:	888a      	ldrh	r2, [r1, #4]
   2a4c8:	1c56      	adds	r6, r2, #1
   2a4ca:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2a4cc:	1b92      	subs	r2, r2, r6
   2a4ce:	e74f      	b.n	2a370 <_lv_area_align+0x60>
   2a4d0:	888a      	ldrh	r2, [r1, #4]
   2a4d2:	1c56      	adds	r6, r2, #1
   2a4d4:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2a4d6:	1b92      	subs	r2, r2, r6
   2a4d8:	e785      	b.n	2a3e6 <_lv_area_align+0xd6>
   2a4da:	8882      	ldrh	r2, [r0, #4]
   2a4dc:	3201      	adds	r2, #1
   2a4de:	e77f      	b.n	2a3e0 <_lv_area_align+0xd0>
   2a4e0:	8882      	ldrh	r2, [r0, #4]
   2a4e2:	3201      	adds	r2, #1
   2a4e4:	e7a7      	b.n	2a436 <_lv_area_align+0x126>
   2a4e6:	8882      	ldrh	r2, [r0, #4]
   2a4e8:	3201      	adds	r2, #1
   2a4ea:	e79b      	b.n	2a424 <_lv_area_align+0x114>

0002a4ec <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   2a4ec:	0783      	lsls	r3, r0, #30
{
   2a4ee:	b510      	push	{r4, lr}
   2a4f0:	b28c      	uxth	r4, r1
        *buf = color;
   2a4f2:	bf1c      	itt	ne
   2a4f4:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
   2a4f8:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
    }

    uint32_t c32 = color.full + (color.full << 16);
   2a4fc:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   2a500:	2a10      	cmp	r2, #16
   2a502:	4601      	mov	r1, r0
   2a504:	f100 0020 	add.w	r0, r0, #32
   2a508:	d804      	bhi.n	2a514 <lv_color_fill+0x28>
   2a50a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   2a50e:	4291      	cmp	r1, r2
   2a510:	d10a      	bne.n	2a528 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   2a512:	bd10      	pop	{r4, pc}
        *buf32 = c32;
   2a514:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
   2a518:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
   2a51c:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
   2a520:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
   2a524:	3a10      	subs	r2, #16
   2a526:	e7eb      	b.n	2a500 <lv_color_fill+0x14>
        *buf = color;
   2a528:	f821 4b02 	strh.w	r4, [r1], #2
        px_num --;
   2a52c:	e7ef      	b.n	2a50e <lv_color_fill+0x22>

0002a52e <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   2a52e:	b109      	cbz	r1, 2a534 <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
   2a530:	6803      	ldr	r3, [r0, #0]
   2a532:	50ca      	str	r2, [r1, r3]
}
   2a534:	4770      	bx	lr

0002a536 <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   2a536:	b111      	cbz	r1, 2a53e <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
   2a538:	6803      	ldr	r3, [r0, #0]
   2a53a:	4419      	add	r1, r3
   2a53c:	604a      	str	r2, [r1, #4]
}
   2a53e:	4770      	bx	lr

0002a540 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
   2a540:	3103      	adds	r1, #3
    ll_p->head = NULL;
   2a542:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
   2a544:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
   2a548:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
   2a54c:	6001      	str	r1, [r0, #0]
}
   2a54e:	4770      	bx	lr

0002a550 <_lv_ll_ins_head>:
{
   2a550:	b538      	push	{r3, r4, r5, lr}
   2a552:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2a554:	6800      	ldr	r0, [r0, #0]
   2a556:	3008      	adds	r0, #8
   2a558:	f7f3 f826 	bl	1d5a8 <lv_mem_alloc>
    if(n_new != NULL) {
   2a55c:	4605      	mov	r5, r0
   2a55e:	b180      	cbz	r0, 2a582 <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   2a560:	4601      	mov	r1, r0
   2a562:	2200      	movs	r2, #0
   2a564:	4620      	mov	r0, r4
   2a566:	f7ff ffe2 	bl	2a52e <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   2a56a:	6862      	ldr	r2, [r4, #4]
   2a56c:	f7ff ffe3 	bl	2a536 <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   2a570:	6861      	ldr	r1, [r4, #4]
   2a572:	b111      	cbz	r1, 2a57a <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
   2a574:	462a      	mov	r2, r5
   2a576:	f7ff ffda 	bl	2a52e <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   2a57a:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   2a57c:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   2a57e:	b903      	cbnz	r3, 2a582 <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
   2a580:	60a5      	str	r5, [r4, #8]
}
   2a582:	4628      	mov	r0, r5
   2a584:	bd38      	pop	{r3, r4, r5, pc}

0002a586 <_lv_ll_ins_tail>:
{
   2a586:	b538      	push	{r3, r4, r5, lr}
   2a588:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2a58a:	6800      	ldr	r0, [r0, #0]
   2a58c:	3008      	adds	r0, #8
   2a58e:	f7f3 f80b 	bl	1d5a8 <lv_mem_alloc>
    if(n_new != NULL) {
   2a592:	4605      	mov	r5, r0
   2a594:	b188      	cbz	r0, 2a5ba <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   2a596:	4601      	mov	r1, r0
   2a598:	2200      	movs	r2, #0
   2a59a:	4620      	mov	r0, r4
   2a59c:	f7ff ffcb 	bl	2a536 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
   2a5a0:	4629      	mov	r1, r5
   2a5a2:	68a2      	ldr	r2, [r4, #8]
   2a5a4:	f7ff ffc3 	bl	2a52e <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   2a5a8:	68a1      	ldr	r1, [r4, #8]
   2a5aa:	b111      	cbz	r1, 2a5b2 <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
   2a5ac:	462a      	mov	r2, r5
   2a5ae:	f7ff ffc2 	bl	2a536 <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   2a5b2:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   2a5b4:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   2a5b6:	b903      	cbnz	r3, 2a5ba <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
   2a5b8:	6065      	str	r5, [r4, #4]
}
   2a5ba:	4628      	mov	r0, r5
   2a5bc:	bd38      	pop	{r3, r4, r5, pc}

0002a5be <_lv_ll_get_head>:
    if(ll_p != NULL) {
   2a5be:	b100      	cbz	r0, 2a5c2 <_lv_ll_get_head+0x4>
        head = ll_p->head;
   2a5c0:	6840      	ldr	r0, [r0, #4]
}
   2a5c2:	4770      	bx	lr

0002a5c4 <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   2a5c4:	b100      	cbz	r0, 2a5c8 <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
   2a5c6:	6880      	ldr	r0, [r0, #8]
}
   2a5c8:	4770      	bx	lr

0002a5ca <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
   2a5ca:	b110      	cbz	r0, 2a5d2 <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
   2a5cc:	6803      	ldr	r3, [r0, #0]
   2a5ce:	4419      	add	r1, r3
   2a5d0:	6848      	ldr	r0, [r1, #4]
}
   2a5d2:	4770      	bx	lr

0002a5d4 <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
   2a5d4:	b108      	cbz	r0, 2a5da <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
   2a5d6:	6803      	ldr	r3, [r0, #0]
   2a5d8:	58c8      	ldr	r0, [r1, r3]
}
   2a5da:	4770      	bx	lr

0002a5dc <_lv_ll_ins_prev>:
{
   2a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a5de:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   2a5e0:	4605      	mov	r5, r0
   2a5e2:	b348      	cbz	r0, 2a638 <_lv_ll_ins_prev+0x5c>
   2a5e4:	b351      	cbz	r1, 2a63c <_lv_ll_ins_prev+0x60>
    if(_lv_ll_get_head(ll_p) == n_act) {
   2a5e6:	6843      	ldr	r3, [r0, #4]
   2a5e8:	4299      	cmp	r1, r3
   2a5ea:	d107      	bne.n	2a5fc <_lv_ll_ins_prev+0x20>
        n_new = _lv_ll_ins_head(ll_p);
   2a5ec:	f7ff ffb0 	bl	2a550 <_lv_ll_ins_head>
        if(n_new == NULL) return NULL;
   2a5f0:	2800      	cmp	r0, #0
   2a5f2:	bf38      	it	cc
   2a5f4:	2000      	movcc	r0, #0
   2a5f6:	4604      	mov	r4, r0
}
   2a5f8:	4620      	mov	r0, r4
   2a5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2a5fc:	6800      	ldr	r0, [r0, #0]
   2a5fe:	3008      	adds	r0, #8
   2a600:	f7f2 ffd2 	bl	1d5a8 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
   2a604:	4604      	mov	r4, r0
   2a606:	2800      	cmp	r0, #0
   2a608:	d0f6      	beq.n	2a5f8 <_lv_ll_ins_prev+0x1c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   2a60a:	4631      	mov	r1, r6
   2a60c:	4628      	mov	r0, r5
   2a60e:	f7ff ffe1 	bl	2a5d4 <_lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
   2a612:	4622      	mov	r2, r4
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   2a614:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   2a616:	4601      	mov	r1, r0
   2a618:	4628      	mov	r0, r5
   2a61a:	f7ff ff8c 	bl	2a536 <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
   2a61e:	463a      	mov	r2, r7
   2a620:	4621      	mov	r1, r4
   2a622:	f7ff ff84 	bl	2a52e <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
   2a626:	4622      	mov	r2, r4
   2a628:	4631      	mov	r1, r6
   2a62a:	f7ff ff80 	bl	2a52e <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
   2a62e:	4632      	mov	r2, r6
   2a630:	4621      	mov	r1, r4
   2a632:	f7ff ff80 	bl	2a536 <node_set_next.isra.0>
   2a636:	e7df      	b.n	2a5f8 <_lv_ll_ins_prev+0x1c>
    if(NULL == ll_p || NULL == n_act) return NULL;
   2a638:	4604      	mov	r4, r0
   2a63a:	e7dd      	b.n	2a5f8 <_lv_ll_ins_prev+0x1c>
   2a63c:	460c      	mov	r4, r1
   2a63e:	e7db      	b.n	2a5f8 <_lv_ll_ins_prev+0x1c>

0002a640 <_lv_ll_remove>:
{
   2a640:	b570      	push	{r4, r5, r6, lr}
   2a642:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   2a644:	4604      	mov	r4, r0
   2a646:	b308      	cbz	r0, 2a68c <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
   2a648:	6843      	ldr	r3, [r0, #4]
   2a64a:	4299      	cmp	r1, r3
   2a64c:	d10e      	bne.n	2a66c <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   2a64e:	4629      	mov	r1, r5
   2a650:	4620      	mov	r0, r4
   2a652:	f7ff ffba 	bl	2a5ca <_lv_ll_get_next>
   2a656:	4601      	mov	r1, r0
   2a658:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   2a65a:	b908      	cbnz	r0, 2a660 <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
   2a65c:	60a0      	str	r0, [r4, #8]
}
   2a65e:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
   2a660:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
   2a662:	4620      	mov	r0, r4
}
   2a664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
   2a668:	f7ff bf61 	b.w	2a52e <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   2a66c:	6883      	ldr	r3, [r0, #8]
   2a66e:	4299      	cmp	r1, r3
   2a670:	d10e      	bne.n	2a690 <_lv_ll_remove+0x50>
   2a672:	f7ff ffaf 	bl	2a5d4 <_lv_ll_get_prev>
   2a676:	4601      	mov	r1, r0
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   2a678:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   2a67a:	b908      	cbnz	r0, 2a680 <_lv_ll_remove+0x40>
            ll_p->head = NULL;
   2a67c:	6060      	str	r0, [r4, #4]
   2a67e:	e7ee      	b.n	2a65e <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
   2a680:	4620      	mov	r0, r4
   2a682:	2200      	movs	r2, #0
}
   2a684:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
   2a688:	f7ff bf55 	b.w	2a536 <node_set_next.isra.0>
    if(_lv_ll_get_head(ll_p) == node_p) {
   2a68c:	2900      	cmp	r1, #0
   2a68e:	d0de      	beq.n	2a64e <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   2a690:	4629      	mov	r1, r5
   2a692:	4620      	mov	r0, r4
   2a694:	f7ff ff9e 	bl	2a5d4 <_lv_ll_get_prev>
   2a698:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   2a69a:	4620      	mov	r0, r4
   2a69c:	f7ff ff95 	bl	2a5ca <_lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
   2a6a0:	4631      	mov	r1, r6
   2a6a2:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   2a6a4:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   2a6a6:	4620      	mov	r0, r4
   2a6a8:	f7ff ff45 	bl	2a536 <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
   2a6ac:	4632      	mov	r2, r6
   2a6ae:	4629      	mov	r1, r5
   2a6b0:	e7d7      	b.n	2a662 <_lv_ll_remove+0x22>

0002a6b2 <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   2a6b2:	4291      	cmp	r1, r2
{
   2a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a6b6:	4604      	mov	r4, r0
   2a6b8:	460d      	mov	r5, r1
   2a6ba:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   2a6bc:	d01f      	beq.n	2a6fe <_lv_ll_move_before+0x4c>
    if(n_after != NULL)
   2a6be:	b1fa      	cbz	r2, 2a700 <_lv_ll_move_before+0x4e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   2a6c0:	4611      	mov	r1, r2
   2a6c2:	f7ff ff87 	bl	2a5d4 <_lv_ll_get_prev>
   2a6c6:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   2a6c8:	42ae      	cmp	r6, r5
   2a6ca:	d018      	beq.n	2a6fe <_lv_ll_move_before+0x4c>
    _lv_ll_remove(ll_p, n_act);
   2a6cc:	4629      	mov	r1, r5
   2a6ce:	4620      	mov	r0, r4
   2a6d0:	f7ff ffb6 	bl	2a640 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
   2a6d4:	4620      	mov	r0, r4
   2a6d6:	462a      	mov	r2, r5
   2a6d8:	4631      	mov	r1, r6
   2a6da:	f7ff ff2c 	bl	2a536 <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
   2a6de:	4632      	mov	r2, r6
   2a6e0:	4629      	mov	r1, r5
   2a6e2:	f7ff ff24 	bl	2a52e <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
   2a6e6:	462a      	mov	r2, r5
   2a6e8:	4639      	mov	r1, r7
   2a6ea:	f7ff ff20 	bl	2a52e <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
   2a6ee:	463a      	mov	r2, r7
   2a6f0:	4629      	mov	r1, r5
   2a6f2:	f7ff ff20 	bl	2a536 <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
   2a6f6:	b907      	cbnz	r7, 2a6fa <_lv_ll_move_before+0x48>
   2a6f8:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
   2a6fa:	b906      	cbnz	r6, 2a6fe <_lv_ll_move_before+0x4c>
   2a6fc:	6065      	str	r5, [r4, #4]
}
   2a6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   2a700:	b108      	cbz	r0, 2a706 <_lv_ll_move_before+0x54>
        tail = ll_p->tail;
   2a702:	6886      	ldr	r6, [r0, #8]
   2a704:	e7e0      	b.n	2a6c8 <_lv_ll_move_before+0x16>
    void * tail = NULL;
   2a706:	4606      	mov	r6, r0
   2a708:	e7de      	b.n	2a6c8 <_lv_ll_move_before+0x16>

0002a70a <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   2a70a:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   2a70c:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   2a70e:	2300      	movs	r3, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   2a710:	18d4      	adds	r4, r2, r3
        if((uint32_t)trial * trial <= x) root = trial;
   2a712:	fb04 f504 	mul.w	r5, r4, r4
   2a716:	4285      	cmp	r5, r0
   2a718:	bf98      	it	ls
   2a71a:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
   2a71c:	0852      	lsrs	r2, r2, #1
   2a71e:	d1f7      	bne.n	2a710 <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   2a720:	091a      	lsrs	r2, r3, #4
    q->f = (uint32_t)(root & 0xf) << 4;
   2a722:	011b      	lsls	r3, r3, #4
   2a724:	b2db      	uxtb	r3, r3
    q->i = (uint32_t) root >> 4;
   2a726:	800a      	strh	r2, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   2a728:	804b      	strh	r3, [r1, #2]
}
   2a72a:	bd30      	pop	{r4, r5, pc}

0002a72c <_lv_mem_init>:
}
   2a72c:	4770      	bx	lr

0002a72e <lv_task_create>:
{
   2a72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a732:	4680      	mov	r8, r0
   2a734:	460f      	mov	r7, r1
   2a736:	4616      	mov	r6, r2
   2a738:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   2a73a:	f7f3 f887 	bl	1d84c <lv_task_create_basic>
    if(new_task == NULL) return NULL;
   2a73e:	4604      	mov	r4, r0
   2a740:	b130      	cbz	r0, 2a750 <lv_task_create+0x22>
    task->task_cb = task_cb;
   2a742:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
   2a746:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
   2a748:	4631      	mov	r1, r6
   2a74a:	f7f3 f9cb 	bl	1dae4 <lv_task_set_prio>
    new_task->user_data = user_data;
   2a74e:	60e5      	str	r5, [r4, #12]
}
   2a750:	4620      	mov	r0, r4
   2a752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a756 <lv_task_ready>:
{
   2a756:	b510      	push	{r4, lr}
   2a758:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   2a75a:	f7ff fc44 	bl	29fe6 <lv_tick_get>
   2a75e:	6823      	ldr	r3, [r4, #0]
   2a760:	43db      	mvns	r3, r3
   2a762:	4403      	add	r3, r0
   2a764:	6063      	str	r3, [r4, #4]
}
   2a766:	bd10      	pop	{r4, pc}

0002a768 <lv_txt_utf8_size>:
    if((str[0] & 0x80) == 0)
   2a768:	f990 2000 	ldrsb.w	r2, [r0]
   2a76c:	7803      	ldrb	r3, [r0, #0]
   2a76e:	2a00      	cmp	r2, #0
   2a770:	da0e      	bge.n	2a790 <lv_txt_utf8_size+0x28>
    else if((str[0] & 0xE0) == 0xC0)
   2a772:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
   2a776:	2ac0      	cmp	r2, #192	; 0xc0
   2a778:	d00c      	beq.n	2a794 <lv_txt_utf8_size+0x2c>
    else if((str[0] & 0xF0) == 0xE0)
   2a77a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   2a77e:	2ae0      	cmp	r2, #224	; 0xe0
   2a780:	d00a      	beq.n	2a798 <lv_txt_utf8_size+0x30>
    else if((str[0] & 0xF8) == 0xF0)
   2a782:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   2a786:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
   2a788:	bf14      	ite	ne
   2a78a:	2000      	movne	r0, #0
   2a78c:	2004      	moveq	r0, #4
   2a78e:	4770      	bx	lr
        return 1;
   2a790:	2001      	movs	r0, #1
   2a792:	4770      	bx	lr
        return 2;
   2a794:	2002      	movs	r0, #2
   2a796:	4770      	bx	lr
        return 3;
   2a798:	2003      	movs	r0, #3
}
   2a79a:	4770      	bx	lr

0002a79c <lv_txt_utf8_next>:
{
   2a79c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
   2a79e:	2300      	movs	r3, #0
{
   2a7a0:	4602      	mov	r2, r0
    uint32_t i_tmp = 0;
   2a7a2:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   2a7a4:	b901      	cbnz	r1, 2a7a8 <lv_txt_utf8_next+0xc>
   2a7a6:	a901      	add	r1, sp, #4
    if((txt[*i] & 0x80) == 0) {
   2a7a8:	680b      	ldr	r3, [r1, #0]
   2a7aa:	56d5      	ldrsb	r5, [r2, r3]
   2a7ac:	5cd0      	ldrb	r0, [r2, r3]
   2a7ae:	2d00      	cmp	r5, #0
   2a7b0:	f103 0401 	add.w	r4, r3, #1
   2a7b4:	db02      	blt.n	2a7bc <lv_txt_utf8_next+0x20>
        (*i)++;
   2a7b6:	600c      	str	r4, [r1, #0]
}
   2a7b8:	b002      	add	sp, #8
   2a7ba:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
   2a7bc:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
   2a7c0:	2dc0      	cmp	r5, #192	; 0xc0
   2a7c2:	d110      	bne.n	2a7e6 <lv_txt_utf8_next+0x4a>
            (*i)++;
   2a7c4:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7c6:	5d12      	ldrb	r2, [r2, r4]
   2a7c8:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
   2a7cc:	2c80      	cmp	r4, #128	; 0x80
   2a7ce:	d001      	beq.n	2a7d4 <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
   2a7d0:	2000      	movs	r0, #0
   2a7d2:	e7f1      	b.n	2a7b8 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   2a7d4:	0180      	lsls	r0, r0, #6
   2a7d6:	f400 60f8 	and.w	r0, r0, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
   2a7da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2a7de:	4410      	add	r0, r2
            (*i)++;
   2a7e0:	3302      	adds	r3, #2
            (*i)++;
   2a7e2:	600b      	str	r3, [r1, #0]
   2a7e4:	e7e8      	b.n	2a7b8 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
   2a7e6:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
   2a7ea:	2de0      	cmp	r5, #224	; 0xe0
   2a7ec:	d117      	bne.n	2a81e <lv_txt_utf8_next+0x82>
            (*i)++;
   2a7ee:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7f0:	5d14      	ldrb	r4, [r2, r4]
   2a7f2:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   2a7f6:	2d80      	cmp	r5, #128	; 0x80
   2a7f8:	d1ea      	bne.n	2a7d0 <lv_txt_utf8_next+0x34>
            (*i)++;
   2a7fa:	1c9d      	adds	r5, r3, #2
   2a7fc:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7fe:	5d52      	ldrb	r2, [r2, r5]
   2a800:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
   2a804:	2d80      	cmp	r5, #128	; 0x80
   2a806:	d1e3      	bne.n	2a7d0 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   2a808:	0300      	lsls	r0, r0, #12
   2a80a:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
   2a80c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   2a810:	01a4      	lsls	r4, r4, #6
   2a812:	4410      	add	r0, r2
   2a814:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
   2a818:	4420      	add	r0, r4
            (*i)++;
   2a81a:	3303      	adds	r3, #3
   2a81c:	e7e1      	b.n	2a7e2 <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
   2a81e:	f000 05f8 	and.w	r5, r0, #248	; 0xf8
   2a822:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
   2a824:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
   2a826:	d1d3      	bne.n	2a7d0 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a828:	5d14      	ldrb	r4, [r2, r4]
   2a82a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   2a82e:	2d80      	cmp	r5, #128	; 0x80
   2a830:	d1ce      	bne.n	2a7d0 <lv_txt_utf8_next+0x34>
            (*i)++;
   2a832:	1c9d      	adds	r5, r3, #2
   2a834:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a836:	5d55      	ldrb	r5, [r2, r5]
   2a838:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   2a83c:	2e80      	cmp	r6, #128	; 0x80
   2a83e:	d1c7      	bne.n	2a7d0 <lv_txt_utf8_next+0x34>
            (*i)++;
   2a840:	1cde      	adds	r6, r3, #3
   2a842:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a844:	5d92      	ldrb	r2, [r2, r6]
   2a846:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
   2a84a:	2e80      	cmp	r6, #128	; 0x80
   2a84c:	d1c0      	bne.n	2a7d0 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   2a84e:	0480      	lsls	r0, r0, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   2a850:	0324      	lsls	r4, r4, #12
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   2a852:	01ad      	lsls	r5, r5, #6
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   2a854:	f400 10e0 	and.w	r0, r0, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   2a858:	f404 347c 	and.w	r4, r4, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   2a85c:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
   2a860:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   2a864:	4320      	orrs	r0, r4
            result += txt[*i] & 0x3F;
   2a866:	4415      	add	r5, r2
   2a868:	4428      	add	r0, r5
            (*i)++;
   2a86a:	3304      	adds	r3, #4
   2a86c:	e7b9      	b.n	2a7e2 <lv_txt_utf8_next+0x46>

0002a86e <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   2a86e:	2923      	cmp	r1, #35	; 0x23
{
   2a870:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   2a872:	d115      	bne.n	2a8a0 <_lv_txt_is_cmd+0x32>
   2a874:	7802      	ldrb	r2, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   2a876:	b952      	cbnz	r2, 2a88e <_lv_txt_is_cmd+0x20>
            *state = LV_TXT_CMD_STATE_PAR;
   2a878:	2001      	movs	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
   2a87a:	7018      	strb	r0, [r3, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
   2a87c:	781a      	ldrb	r2, [r3, #0]
   2a87e:	2a01      	cmp	r2, #1
   2a880:	d104      	bne.n	2a88c <_lv_txt_is_cmd+0x1e>
        if(c == ' ') {
   2a882:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   2a884:	bf04      	itt	eq
   2a886:	2102      	moveq	r1, #2
   2a888:	7019      	strbeq	r1, [r3, #0]
        ret = true;
   2a88a:	4610      	mov	r0, r2
}
   2a88c:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   2a88e:	2a01      	cmp	r2, #1
   2a890:	f04f 0000 	mov.w	r0, #0
   2a894:	d0f1      	beq.n	2a87a <_lv_txt_is_cmd+0xc>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   2a896:	2a02      	cmp	r2, #2
   2a898:	d1f0      	bne.n	2a87c <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_WAIT;
   2a89a:	7018      	strb	r0, [r3, #0]
            ret    = true;
   2a89c:	2001      	movs	r0, #1
   2a89e:	e7ed      	b.n	2a87c <_lv_txt_is_cmd+0xe>
    bool ret = false;
   2a8a0:	2000      	movs	r0, #0
   2a8a2:	e7eb      	b.n	2a87c <_lv_txt_is_cmd+0xe>

0002a8a4 <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   2a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a8a8:	9d08      	ldr	r5, [sp, #32]
   2a8aa:	4680      	mov	r8, r0
   2a8ac:	460f      	mov	r7, r1
   2a8ae:	4614      	mov	r4, r2
   2a8b0:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   2a8b2:	b90c      	cbnz	r4, 2a8b8 <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   2a8b4:	4626      	mov	r6, r4
   2a8b6:	e012      	b.n	2a8de <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
   2a8b8:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   2a8bc:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
   2a8c0:	4631      	mov	r1, r6
   2a8c2:	4640      	mov	r0, r8
   2a8c4:	47a8      	blx	r5
   2a8c6:	2800      	cmp	r0, #0
   2a8c8:	dd08      	ble.n	2a8dc <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
   2a8ca:	43e4      	mvns	r4, r4
   2a8cc:	f004 0401 	and.w	r4, r4, #1
   2a8d0:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
   2a8d4:	eb06 0709 	add.w	r7, r6, r9
{
   2a8d8:	4654      	mov	r4, sl
   2a8da:	e7ea      	b.n	2a8b2 <_lv_utils_bsearch+0xe>
        else if(c < 0) {
   2a8dc:	d1fc      	bne.n	2a8d8 <_lv_utils_bsearch+0x34>
}
   2a8de:	4630      	mov	r0, r6
   2a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a8e4 <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
   2a8e4:	6843      	ldr	r3, [r0, #4]
   2a8e6:	4718      	bx	r3

0002a8e8 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
   2a8e8:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   2a8ea:	6804      	ldr	r4, [r0, #0]
   2a8ec:	46a4      	mov	ip, r4
}
   2a8ee:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   2a8f0:	4760      	bx	ip

0002a8f2 <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   2a8f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2a8f4:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   2a8f6:	460a      	mov	r2, r1
   2a8f8:	a901      	add	r1, sp, #4
   2a8fa:	f7ff fff5 	bl	2a8e8 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
   2a8fe:	b108      	cbz	r0, 2a904 <lv_font_get_glyph_width+0x12>
   2a900:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
   2a904:	b005      	add	sp, #20
   2a906:	f85d fb04 	ldr.w	pc, [sp], #4

0002a90a <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   2a90a:	7803      	ldrb	r3, [r0, #0]
   2a90c:	780a      	ldrb	r2, [r1, #0]
   2a90e:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   2a910:	bf09      	itett	eq
   2a912:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   2a914:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   2a916:	7840      	ldrbeq	r0, [r0, #1]
   2a918:	1ac0      	subeq	r0, r0, r3

}
   2a91a:	4770      	bx	lr

0002a91c <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   2a91c:	8803      	ldrh	r3, [r0, #0]
   2a91e:	880a      	ldrh	r2, [r1, #0]
   2a920:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   2a922:	bf09      	itett	eq
   2a924:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   2a926:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   2a928:	8840      	ldrheq	r0, [r0, #2]
   2a92a:	1ac0      	subeq	r0, r0, r3
}
   2a92c:	4770      	bx	lr

0002a92e <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
   2a92e:	8800      	ldrh	r0, [r0, #0]
   2a930:	880b      	ldrh	r3, [r1, #0]
}
   2a932:	1ac0      	subs	r0, r0, r3
   2a934:	4770      	bx	lr

0002a936 <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
   2a936:	2909      	cmp	r1, #9
{
   2a938:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
   2a93a:	d002      	beq.n	2a942 <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
   2a93c:	b911      	cbnz	r1, 2a944 <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
   2a93e:	2000      	movs	r0, #0
}
   2a940:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
   2a942:	2120      	movs	r1, #32
   2a944:	f850 4f10 	ldr.w	r4, [r0, #16]!
   2a948:	f7f3 fb06 	bl	1df58 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
   2a94c:	2800      	cmp	r0, #0
   2a94e:	d0f6      	beq.n	2a93e <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2a950:	7d21      	ldrb	r1, [r4, #20]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   2a952:	6863      	ldr	r3, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2a954:	0789      	lsls	r1, r1, #30
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   2a956:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2a95a:	d1f0      	bne.n	2a93e <lv_font_get_bitmap_fmt_txt+0x8>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   2a95c:	2a00      	cmp	r2, #0
   2a95e:	d0ee      	beq.n	2a93e <lv_font_get_bitmap_fmt_txt+0x8>
   2a960:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   2a964:	6820      	ldr	r0, [r4, #0]
   2a966:	f3c3 0313 	ubfx	r3, r3, #0, #20
   2a96a:	4418      	add	r0, r3
   2a96c:	e7e8      	b.n	2a940 <lv_font_get_bitmap_fmt_txt+0xa>

0002a96e <style_init_reset>:
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
    else lv_style_init(style);
   2a96e:	f7fc be0f 	b.w	27590 <lv_style_init>

0002a972 <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   2a972:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a974:	f7fb ff98 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   2a978:	7c43      	ldrb	r3, [r0, #17]
   2a97a:	07db      	lsls	r3, r3, #31
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a97c:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   2a97e:	d503      	bpl.n	2a988 <lv_label_dot_tmp_free+0x16>
   2a980:	6840      	ldr	r0, [r0, #4]
   2a982:	b108      	cbz	r0, 2a988 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
   2a984:	f7f2 fe38 	bl	1d5f8 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
   2a988:	7c63      	ldrb	r3, [r4, #17]
   2a98a:	f36f 0300 	bfc	r3, #0, #1
   2a98e:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
   2a990:	2300      	movs	r3, #0
   2a992:	6063      	str	r3, [r4, #4]
}
   2a994:	bd10      	pop	{r4, pc}

0002a996 <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a996:	f000 bf0c 	b.w	2b7b2 <memcpy>

0002a99a <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
   2a99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a99e:	4605      	mov	r5, r0
   2a9a0:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
   2a9a2:	f7fb fdd5 	bl	26550 <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   2a9a6:	2212      	movs	r2, #18
   2a9a8:	2100      	movs	r1, #0
   2a9aa:	4628      	mov	r0, r5
   2a9ac:	f7ef fe9c 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   2a9b0:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   2a9b2:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   2a9b4:	2100      	movs	r1, #0
   2a9b6:	4628      	mov	r0, r5
   2a9b8:	f7ef fe96 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   2a9bc:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   2a9be:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   2a9c0:	2100      	movs	r1, #0
   2a9c2:	4628      	mov	r0, r5
   2a9c4:	f7ef fe90 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   2a9c8:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   2a9ca:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   2a9cc:	2100      	movs	r1, #0
   2a9ce:	4628      	mov	r0, r5
   2a9d0:	f7ef fe8a 	bl	1a6e8 <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
   2a9d4:	8823      	ldrh	r3, [r4, #0]
    area->x2 -= right;
   2a9d6:	88a2      	ldrh	r2, [r4, #4]
    area->x1 += left;
   2a9d8:	441f      	add	r7, r3
    area->y1 += top;
   2a9da:	8863      	ldrh	r3, [r4, #2]
    area->x1 += left;
   2a9dc:	8027      	strh	r7, [r4, #0]
    area->y1 += top;
   2a9de:	441e      	add	r6, r3
    area->y2 -= bottom;
   2a9e0:	88e3      	ldrh	r3, [r4, #6]
    area->y1 += top;
   2a9e2:	8066      	strh	r6, [r4, #2]
    area->x2 -= right;
   2a9e4:	eba2 0208 	sub.w	r2, r2, r8
    area->y2 -= bottom;
   2a9e8:	1a1b      	subs	r3, r3, r0
    area->x2 -= right;
   2a9ea:	80a2      	strh	r2, [r4, #4]
    area->y2 -= bottom;
   2a9ec:	80e3      	strh	r3, [r4, #6]
}
   2a9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a9f2 <lv_label_set_align>:
{
   2a9f2:	b538      	push	{r3, r4, r5, lr}
   2a9f4:	460c      	mov	r4, r1
   2a9f6:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a9f8:	f7fb ff56 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
   2a9fc:	7c03      	ldrb	r3, [r0, #16]
   2a9fe:	f3c3 1201 	ubfx	r2, r3, #4, #2
   2aa02:	42a2      	cmp	r2, r4
   2aa04:	d007      	beq.n	2aa16 <lv_label_set_align+0x24>
    ext->align = align;
   2aa06:	f364 1305 	bfi	r3, r4, #4, #2
   2aa0a:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   2aa0c:	4628      	mov	r0, r5
}
   2aa0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   2aa12:	f7fb bc8a 	b.w	2632a <lv_obj_invalidate>
}
   2aa16:	bd38      	pop	{r3, r4, r5, pc}

0002aa18 <lv_label_get_text>:
{
   2aa18:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2aa1a:	f7fb ff45 	bl	268a8 <lv_obj_get_ext_attr>
}
   2aa1e:	6800      	ldr	r0, [r0, #0]
   2aa20:	bd08      	pop	{r3, pc}

0002aa22 <lv_label_get_long_mode>:
{
   2aa22:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2aa24:	f7fb ff40 	bl	268a8 <lv_obj_get_ext_attr>
    return ext->long_mode;
   2aa28:	7c00      	ldrb	r0, [r0, #16]
}
   2aa2a:	f000 0007 	and.w	r0, r0, #7
   2aa2e:	bd08      	pop	{r3, pc}

0002aa30 <lv_label_get_align>:
{
   2aa30:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2aa32:	f7fb ff39 	bl	268a8 <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
   2aa36:	7c00      	ldrb	r0, [r0, #16]
   2aa38:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
   2aa3c:	2803      	cmp	r0, #3
}
   2aa3e:	bf08      	it	eq
   2aa40:	2000      	moveq	r0, #0
   2aa42:	bd08      	pop	{r3, pc}

0002aa44 <lv_label_design>:
{
   2aa44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK)
   2aa48:	2a02      	cmp	r2, #2
{
   2aa4a:	b0a9      	sub	sp, #164	; 0xa4
   2aa4c:	4607      	mov	r7, r0
   2aa4e:	4689      	mov	r9, r1
   2aa50:	4616      	mov	r6, r2
    if(mode == LV_DESIGN_COVER_CHK)
   2aa52:	f000 80f2 	beq.w	2ac3a <lv_label_design+0x1f6>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   2aa56:	2a00      	cmp	r2, #0
   2aa58:	f040 80f8 	bne.w	2ac4c <lv_label_design+0x208>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2aa5c:	f7fb ff24 	bl	268a8 <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2aa60:	2204      	movs	r2, #4
   2aa62:	4631      	mov	r1, r6
   2aa64:	4604      	mov	r4, r0
   2aa66:	4638      	mov	r0, r7
   2aa68:	f7ef fe3e 	bl	1a6e8 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   2aa6c:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2aa6e:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   2aa70:	4631      	mov	r1, r6
   2aa72:	4638      	mov	r0, r7
   2aa74:	f7ef fe38 	bl	1a6e8 <_lv_obj_get_style_int>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   2aa78:	2208      	movs	r2, #8
   2aa7a:	4605      	mov	r5, r0
   2aa7c:	f107 0110 	add.w	r1, r7, #16
   2aa80:	a805      	add	r0, sp, #20
   2aa82:	f7ff ff88 	bl	2a996 <_lv_memcpy>
        bg_coords.x1 -= w;
   2aa86:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        bg_coords.x2 += w;
   2aa8a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        bg_coords.x1 -= w;
   2aa8e:	eba3 0308 	sub.w	r3, r3, r8
   2aa92:	f8ad 3014 	strh.w	r3, [sp, #20]
        bg_coords.x2 += w;
   2aa96:	4480      	add	r8, r0
        bg_coords.y1 -= h;
   2aa98:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        bg_coords.y2 += h;
   2aa9c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
        bg_coords.x2 += w;
   2aaa0:	f8ad 8018 	strh.w	r8, [sp, #24]
        bg_coords.y1 -= h;
   2aaa4:	1b5b      	subs	r3, r3, r5
        bg_coords.y2 += h;
   2aaa6:	4405      	add	r5, r0
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   2aaa8:	a813      	add	r0, sp, #76	; 0x4c
        bg_coords.y1 -= h;
   2aaaa:	f8ad 3016 	strh.w	r3, [sp, #22]
        bg_coords.y2 += h;
   2aaae:	f8ad 501a 	strh.w	r5, [sp, #26]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   2aab2:	f7f2 f84f 	bl	1cb54 <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
   2aab6:	aa13      	add	r2, sp, #76	; 0x4c
   2aab8:	4631      	mov	r1, r6
   2aaba:	4638      	mov	r0, r7
   2aabc:	f7fb ff04 	bl	268c8 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
   2aac0:	aa13      	add	r2, sp, #76	; 0x4c
   2aac2:	4649      	mov	r1, r9
   2aac4:	a805      	add	r0, sp, #20
   2aac6:	f7fe fbfa 	bl	292be <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
   2aaca:	a907      	add	r1, sp, #28
   2aacc:	4638      	mov	r0, r7
   2aace:	f7ff ff64 	bl	2a99a <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
   2aad2:	aa07      	add	r2, sp, #28
   2aad4:	4649      	mov	r1, r9
   2aad6:	a809      	add	r0, sp, #36	; 0x24
   2aad8:	f7ff fad7 	bl	2a08a <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
   2aadc:	2800      	cmp	r0, #0
   2aade:	f000 80ac 	beq.w	2ac3a <lv_label_design+0x1f6>
        lv_label_align_t align = lv_label_get_align(label);
   2aae2:	4638      	mov	r0, r7
   2aae4:	f7ff ffa4 	bl	2aa30 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   2aae8:	7c23      	ldrb	r3, [r4, #16]
   2aaea:	f3c3 1580 	ubfx	r5, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   2aaee:	061a      	lsls	r2, r3, #24
   2aaf0:	bf48      	it	mi
   2aaf2:	f045 0502 	orrmi.w	r5, r5, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   2aaf6:	075b      	lsls	r3, r3, #29
   2aaf8:	bf08      	it	eq
   2aafa:	f045 0510 	orreq.w	r5, r5, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   2aafe:	2801      	cmp	r0, #1
   2ab00:	f040 809f 	bne.w	2ac42 <lv_label_design+0x1fe>
   2ab04:	f045 0504 	orr.w	r5, r5, #4
        lv_draw_label_dsc_init(&label_draw_dsc);
   2ab08:	a80b      	add	r0, sp, #44	; 0x2c
   2ab0a:	f7f0 fe83 	bl	1b814 <lv_draw_label_dsc_init>
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
   2ab0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
   2ab12:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
        label_draw_dsc.ofs_x = ext->offset.x;
   2ab16:	89a3      	ldrh	r3, [r4, #12]
   2ab18:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   2ab1c:	aa0b      	add	r2, sp, #44	; 0x2c
        label_draw_dsc.ofs_y = ext->offset.y;
   2ab1e:	89e3      	ldrh	r3, [r4, #14]
   2ab20:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   2ab24:	2100      	movs	r1, #0
   2ab26:	4638      	mov	r0, r7
        label_draw_dsc.flag = flag;
   2ab28:	f88d 5049 	strb.w	r5, [sp, #73]	; 0x49
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   2ab2c:	f7fc f84d 	bl	26bca <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   2ab30:	7c23      	ldrb	r3, [r4, #16]
   2ab32:	f003 0207 	and.w	r2, r3, #7
   2ab36:	3a03      	subs	r2, #3
   2ab38:	2a01      	cmp	r2, #1
   2ab3a:	d824      	bhi.n	2ab86 <lv_label_design+0x142>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   2ab3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   2ab40:	2b10      	cmp	r3, #16
   2ab42:	d001      	beq.n	2ab48 <lv_label_design+0x104>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   2ab44:	2b20      	cmp	r3, #32
   2ab46:	d11e      	bne.n	2ab86 <lv_label_design+0x142>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   2ab48:	f647 4318 	movw	r3, #31768	; 0x7c18
   2ab4c:	9301      	str	r3, [sp, #4]
   2ab4e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   2ab52:	9300      	str	r3, [sp, #0]
   2ab54:	9502      	str	r5, [sp, #8]
   2ab56:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   2ab5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ab5c:	6821      	ldr	r1, [r4, #0]
   2ab5e:	a804      	add	r0, sp, #16
   2ab60:	f7f3 f988 	bl	1de74 <_lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2ab64:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2ab68:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2ab6c:	3301      	adds	r3, #1
   2ab6e:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
   2ab70:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   2ab74:	b21b      	sxth	r3, r3
   2ab76:	429a      	cmp	r2, r3
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
   2ab78:	bfc2      	ittt	gt
   2ab7a:	f89d 3049 	ldrbgt.w	r3, [sp, #73]	; 0x49
   2ab7e:	f023 030c 	bicgt.w	r3, r3, #12
   2ab82:	f88d 3049 	strbgt.w	r3, [sp, #73]	; 0x49
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2ab86:	2700      	movs	r7, #0
   2ab88:	9700      	str	r7, [sp, #0]
   2ab8a:	6823      	ldr	r3, [r4, #0]
   2ab8c:	aa0b      	add	r2, sp, #44	; 0x2c
   2ab8e:	a909      	add	r1, sp, #36	; 0x24
   2ab90:	a807      	add	r0, sp, #28
   2ab92:	f7f0 fe55 	bl	1b840 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   2ab96:	7c23      	ldrb	r3, [r4, #16]
   2ab98:	f003 0307 	and.w	r3, r3, #7
   2ab9c:	2b04      	cmp	r3, #4
   2ab9e:	d14c      	bne.n	2ac3a <lv_label_design+0x1f6>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   2aba0:	f647 4318 	movw	r3, #31768	; 0x7c18
   2aba4:	9301      	str	r3, [sp, #4]
   2aba6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   2abaa:	9300      	str	r3, [sp, #0]
   2abac:	9502      	str	r5, [sp, #8]
   2abae:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   2abb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2abb4:	6821      	ldr	r1, [r4, #0]
   2abb6:	a804      	add	r0, sp, #16
   2abb8:	f7f3 f95c 	bl	1de74 <_lv_txt_get_size>
   2abbc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2abc0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            if(size.x > lv_area_get_width(&txt_coords)) {
   2abc4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   2abc8:	3201      	adds	r2, #1
   2abca:	1a52      	subs	r2, r2, r1
   2abcc:	b212      	sxth	r2, r2
   2abce:	4293      	cmp	r3, r2
   2abd0:	dd16      	ble.n	2ac00 <lv_label_design+0x1bc>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2abd2:	89a5      	ldrh	r5, [r4, #12]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   2abd4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2abd6:	2220      	movs	r2, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2abd8:	442b      	add	r3, r5
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   2abda:	4611      	mov	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2abdc:	b21d      	sxth	r5, r3
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   2abde:	f7ff fe88 	bl	2a8f2 <lv_font_get_glyph_width>
                label_draw_dsc.ofs_y = ext->offset.y;
   2abe2:	89e3      	ldrh	r3, [r4, #14]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2abe4:	9700      	str	r7, [sp, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2abe6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2abea:	4405      	add	r5, r0
                label_draw_dsc.ofs_y = ext->offset.y;
   2abec:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2abf0:	aa0b      	add	r2, sp, #44	; 0x2c
   2abf2:	6823      	ldr	r3, [r4, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2abf4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2abf8:	a909      	add	r1, sp, #36	; 0x24
   2abfa:	a807      	add	r0, sp, #28
   2abfc:	f7f0 fe20 	bl	1b840 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2ac00:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   2ac04:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(size.y > lv_area_get_height(&txt_coords)) {
   2ac08:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
   2ac0c:	3301      	adds	r3, #1
   2ac0e:	1a5b      	subs	r3, r3, r1
   2ac10:	b21b      	sxth	r3, r3
   2ac12:	429a      	cmp	r2, r3
   2ac14:	dd11      	ble.n	2ac3a <lv_label_design+0x1f6>
                label_draw_dsc.ofs_x = ext->offset.x;
   2ac16:	89a3      	ldrh	r3, [r4, #12]
   2ac18:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   2ac1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2ac1e:	891b      	ldrh	r3, [r3, #8]
   2ac20:	441a      	add	r2, r3
   2ac22:	89e3      	ldrh	r3, [r4, #14]
   2ac24:	441a      	add	r2, r3
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2ac26:	2300      	movs	r3, #0
   2ac28:	9300      	str	r3, [sp, #0]
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   2ac2a:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2ac2e:	6823      	ldr	r3, [r4, #0]
   2ac30:	aa0b      	add	r2, sp, #44	; 0x2c
   2ac32:	a909      	add	r1, sp, #36	; 0x24
   2ac34:	a807      	add	r0, sp, #28
   2ac36:	f7f0 fe03 	bl	1b840 <lv_draw_label>
}
   2ac3a:	4630      	mov	r0, r6
   2ac3c:	b029      	add	sp, #164	; 0xa4
   2ac3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   2ac42:	2802      	cmp	r0, #2
   2ac44:	bf08      	it	eq
   2ac46:	f045 0508 	orreq.w	r5, r5, #8
   2ac4a:	e75d      	b.n	2ab08 <lv_label_design+0xc4>
    return LV_DESIGN_RES_OK;
   2ac4c:	2600      	movs	r6, #0
   2ac4e:	e7f4      	b.n	2ac3a <lv_label_design+0x1f6>

0002ac50 <lv_label_get_recolor>:
{
   2ac50:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ac52:	f7fb fe29 	bl	268a8 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
   2ac56:	7c00      	ldrb	r0, [r0, #16]
}
   2ac58:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2ac5c:	bd08      	pop	{r3, pc}

0002ac5e <lv_label_set_text>:
{
   2ac5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac62:	4607      	mov	r7, r0
   2ac64:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
   2ac66:	f7fb fb60 	bl	2632a <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ac6a:	4638      	mov	r0, r7
   2ac6c:	f7fb fe1c 	bl	268a8 <lv_obj_get_ext_attr>
   2ac70:	4604      	mov	r4, r0
    if(text == NULL) {
   2ac72:	b925      	cbnz	r5, 2ac7e <lv_label_set_text+0x20>
        lv_label_refr_text(label);
   2ac74:	4638      	mov	r0, r7
}
   2ac76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
   2ac7a:	f7f4 b8fd 	b.w	1ee78 <lv_label_refr_text>
    if(ext->text == text && ext->static_txt == 0) {
   2ac7e:	6806      	ldr	r6, [r0, #0]
   2ac80:	42ae      	cmp	r6, r5
   2ac82:	d10e      	bne.n	2aca2 <lv_label_set_text+0x44>
   2ac84:	7c03      	ldrb	r3, [r0, #16]
   2ac86:	071b      	lsls	r3, r3, #28
   2ac88:	d415      	bmi.n	2acb6 <lv_label_set_text+0x58>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   2ac8a:	4630      	mov	r0, r6
   2ac8c:	f7d5 fbfe 	bl	48c <strlen>
   2ac90:	1c41      	adds	r1, r0, #1
   2ac92:	4630      	mov	r0, r6
   2ac94:	f7f2 fcce 	bl	1d634 <lv_mem_realloc>
   2ac98:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   2ac9a:	2800      	cmp	r0, #0
   2ac9c:	d1ea      	bne.n	2ac74 <lv_label_set_text+0x16>
}
   2ac9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
   2aca2:	b146      	cbz	r6, 2acb6 <lv_label_set_text+0x58>
   2aca4:	7c03      	ldrb	r3, [r0, #16]
   2aca6:	f013 0808 	ands.w	r8, r3, #8
   2acaa:	d104      	bne.n	2acb6 <lv_label_set_text+0x58>
            lv_mem_free(ext->text);
   2acac:	4630      	mov	r0, r6
   2acae:	f7f2 fca3 	bl	1d5f8 <lv_mem_free>
            ext->text = NULL;
   2acb2:	f8c4 8000 	str.w	r8, [r4]
        size_t len = strlen(text) + 1;
   2acb6:	4628      	mov	r0, r5
   2acb8:	f7d5 fbe8 	bl	48c <strlen>
        ext->text = lv_mem_alloc(len);
   2acbc:	3001      	adds	r0, #1
   2acbe:	f7f2 fc73 	bl	1d5a8 <lv_mem_alloc>
   2acc2:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   2acc4:	2800      	cmp	r0, #0
   2acc6:	d0ea      	beq.n	2ac9e <lv_label_set_text+0x40>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2acc8:	4629      	mov	r1, r5
   2acca:	f000 fd9d 	bl	2b808 <strcpy>
        ext->static_txt = 0;
   2acce:	7c23      	ldrb	r3, [r4, #16]
   2acd0:	f36f 03c3 	bfc	r3, #3, #1
   2acd4:	7423      	strb	r3, [r4, #16]
   2acd6:	e7cd      	b.n	2ac74 <lv_label_set_text+0x16>

0002acd8 <lv_label_set_text_static>:
{
   2acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2acda:	4607      	mov	r7, r0
   2acdc:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2acde:	f7fb fde3 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
   2ace2:	7c03      	ldrb	r3, [r0, #16]
   2ace4:	f013 0608 	ands.w	r6, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ace8:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   2acea:	d104      	bne.n	2acf6 <lv_label_set_text_static+0x1e>
   2acec:	6800      	ldr	r0, [r0, #0]
   2acee:	b110      	cbz	r0, 2acf6 <lv_label_set_text_static+0x1e>
        lv_mem_free(ext->text);
   2acf0:	f7f2 fc82 	bl	1d5f8 <lv_mem_free>
        ext->text = NULL;
   2acf4:	6026      	str	r6, [r4, #0]
    if(text != NULL) {
   2acf6:	b125      	cbz	r5, 2ad02 <lv_label_set_text_static+0x2a>
        ext->static_txt = 1;
   2acf8:	7c23      	ldrb	r3, [r4, #16]
        ext->text       = (char *)text;
   2acfa:	6025      	str	r5, [r4, #0]
        ext->static_txt = 1;
   2acfc:	f043 0308 	orr.w	r3, r3, #8
   2ad00:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   2ad02:	4638      	mov	r0, r7
}
   2ad04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
   2ad08:	f7f4 b8b6 	b.w	1ee78 <lv_label_refr_text>

0002ad0c <lv_label_set_long_mode>:
{
   2ad0c:	b570      	push	{r4, r5, r6, lr}
   2ad0e:	460e      	mov	r6, r1
   2ad10:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ad12:	f7fb fdc9 	bl	268a8 <lv_obj_get_ext_attr>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   2ad16:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
   2ad18:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   2ad1a:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
   2ad1c:	60c3      	str	r3, [r0, #12]
   2ad1e:	7c03      	ldrb	r3, [r0, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   2ad20:	bf8c      	ite	hi
   2ad22:	2200      	movhi	r2, #0
   2ad24:	2201      	movls	r2, #1
   2ad26:	f362 13c7 	bfi	r3, r2, #7, #1
   2ad2a:	7403      	strb	r3, [r0, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   2ad2c:	f003 0307 	and.w	r3, r3, #7
   2ad30:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ad32:	4604      	mov	r4, r0
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   2ad34:	d107      	bne.n	2ad46 <lv_label_set_long_mode+0x3a>
   2ad36:	6882      	ldr	r2, [r0, #8]
   2ad38:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ad3c:	429a      	cmp	r2, r3
   2ad3e:	d002      	beq.n	2ad46 <lv_label_set_long_mode+0x3a>
        lv_label_revert_dots(label);
   2ad40:	4628      	mov	r0, r5
   2ad42:	f7f3 ff0b 	bl	1eb5c <lv_label_revert_dots>
    ext->long_mode = long_mode;
   2ad46:	7c23      	ldrb	r3, [r4, #16]
   2ad48:	f366 0302 	bfi	r3, r6, #0, #3
   2ad4c:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   2ad4e:	4628      	mov	r0, r5
}
   2ad50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
   2ad54:	f7f4 b890 	b.w	1ee78 <lv_label_refr_text>

0002ad58 <lv_label_set_recolor>:
{
   2ad58:	b538      	push	{r3, r4, r5, lr}
   2ad5a:	460c      	mov	r4, r1
   2ad5c:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ad5e:	f7fb fda3 	bl	268a8 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
   2ad62:	7c03      	ldrb	r3, [r0, #16]
   2ad64:	f3c3 1280 	ubfx	r2, r3, #6, #1
   2ad68:	42a2      	cmp	r2, r4
   2ad6a:	d007      	beq.n	2ad7c <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
   2ad6c:	f364 1386 	bfi	r3, r4, #6, #1
   2ad70:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
   2ad72:	4628      	mov	r0, r5
}
   2ad74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
   2ad78:	f7f4 b87e 	b.w	1ee78 <lv_label_refr_text>
}
   2ad7c:	bd38      	pop	{r3, r4, r5, pc}

0002ad7e <arch_system_halt>:
	__asm__ volatile(
   2ad7e:	f04f 0220 	mov.w	r2, #32
   2ad82:	f3ef 8311 	mrs	r3, BASEPRI
   2ad86:	f382 8811 	msr	BASEPRI, r2
   2ad8a:	f3bf 8f6f 	isb	sy
	for (;;) {
   2ad8e:	e7fe      	b.n	2ad8e <arch_system_halt+0x10>

0002ad90 <k_heap_init>:
{
   2ad90:	b410      	push	{r4}
   2ad92:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2ad96:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2ad9a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2ad9c:	f7f8 bbbc 	b.w	23518 <sys_heap_init>

0002ada0 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ada4:	b087      	sub	sp, #28
   2ada6:	4604      	mov	r4, r0
   2ada8:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2adaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   2adae:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   2adb0:	f000 fb1c 	bl	2b3ec <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2adb4:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2adb8:	4605      	mov	r5, r0
   2adba:	4688      	mov	r8, r1
   2adbc:	f04f 0320 	mov.w	r3, #32
   2adc0:	f3ef 8b11 	mrs	fp, BASEPRI
   2adc4:	f383 8811 	msr	BASEPRI, r3
   2adc8:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2adcc:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2add0:	463a      	mov	r2, r7
   2add2:	4631      	mov	r1, r6
   2add4:	4620      	mov	r0, r4
   2add6:	f7f8 fb24 	bl	23422 <sys_heap_aligned_alloc>
   2adda:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   2addc:	f7f5 fc80 	bl	206e0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2ade0:	9b05      	ldr	r3, [sp, #20]
   2ade2:	b13b      	cbz	r3, 2adf4 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2ade4:	f38b 8811 	msr	BASEPRI, fp
   2ade8:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2adec:	4618      	mov	r0, r3
   2adee:	b007      	add	sp, #28
   2adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2adf4:	1a2a      	subs	r2, r5, r0
   2adf6:	9202      	str	r2, [sp, #8]
   2adf8:	eb68 0201 	sbc.w	r2, r8, r1
   2adfc:	9203      	str	r2, [sp, #12]
   2adfe:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2ae02:	2901      	cmp	r1, #1
   2ae04:	f172 0200 	sbcs.w	r2, r2, #0
   2ae08:	dbec      	blt.n	2ade4 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ae0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2ae0e:	4659      	mov	r1, fp
   2ae10:	e9cd 2300 	strd	r2, r3, [sp]
   2ae14:	4648      	mov	r0, r9
   2ae16:	4652      	mov	r2, sl
   2ae18:	f7f5 f84c 	bl	1feb4 <z_pend_curr>
	__asm__ volatile(
   2ae1c:	f04f 0320 	mov.w	r3, #32
   2ae20:	f3ef 8b11 	mrs	fp, BASEPRI
   2ae24:	f383 8811 	msr	BASEPRI, r3
   2ae28:	f3bf 8f6f 	isb	sy
   2ae2c:	e7d0      	b.n	2add0 <k_heap_aligned_alloc+0x30>

0002ae2e <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2ae2e:	b538      	push	{r3, r4, r5, lr}
   2ae30:	4604      	mov	r4, r0
   2ae32:	f04f 0320 	mov.w	r3, #32
   2ae36:	f3ef 8511 	mrs	r5, BASEPRI
   2ae3a:	f383 8811 	msr	BASEPRI, r3
   2ae3e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2ae42:	f7f8 faa1 	bl	23388 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2ae46:	f104 000c 	add.w	r0, r4, #12
   2ae4a:	f000 f9e1 	bl	2b210 <z_unpend_all>
   2ae4e:	b130      	cbz	r0, 2ae5e <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2ae50:	4629      	mov	r1, r5
   2ae52:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2ae56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2ae5a:	f7f4 bde3 	b.w	1fa24 <z_reschedule>
	__asm__ volatile(
   2ae5e:	f385 8811 	msr	BASEPRI, r5
   2ae62:	f3bf 8f6f 	isb	sy
}
   2ae66:	bd38      	pop	{r3, r4, r5, pc}

0002ae68 <k_mem_slab_init>:
{
   2ae68:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2ae6a:	2400      	movs	r4, #0
   2ae6c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ae6e:	ea41 0402 	orr.w	r4, r1, r2
   2ae72:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2ae76:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2ae7a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ae7c:	d10c      	bne.n	2ae98 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2ae7e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ae80:	42a3      	cmp	r3, r4
   2ae82:	d103      	bne.n	2ae8c <k_mem_slab_init+0x24>
   2ae84:	e9c0 0000 	strd	r0, r0, [r0]
}
   2ae88:	2000      	movs	r0, #0
}
   2ae8a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2ae8c:	6945      	ldr	r5, [r0, #20]
   2ae8e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ae90:	3401      	adds	r4, #1
		slab->free_list = p;
   2ae92:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2ae94:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2ae96:	e7f3      	b.n	2ae80 <k_mem_slab_init+0x18>
		return -EINVAL;
   2ae98:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2ae9c:	e7f5      	b.n	2ae8a <k_mem_slab_init+0x22>

0002ae9e <queue_insert>:
{
   2ae9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aea2:	4699      	mov	r9, r3
   2aea4:	4604      	mov	r4, r0
   2aea6:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2aeaa:	460d      	mov	r5, r1
   2aeac:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2aeae:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2aeb2:	f04f 0220 	mov.w	r2, #32
   2aeb6:	f3ef 8711 	mrs	r7, BASEPRI
   2aeba:	f382 8811 	msr	BASEPRI, r2
   2aebe:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2aec2:	b103      	cbz	r3, 2aec6 <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2aec4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2aec6:	4630      	mov	r0, r6
   2aec8:	f000 f97d 	bl	2b1c6 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2aecc:	b160      	cbz	r0, 2aee8 <queue_insert+0x4a>
   2aece:	2400      	movs	r4, #0
   2aed0:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   2aed4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2aed8:	f000 f91a 	bl	2b110 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2aedc:	4630      	mov	r0, r6
   2aede:	4639      	mov	r1, r7
   2aee0:	f7f4 fda0 	bl	1fa24 <z_reschedule>
	return 0;
   2aee4:	2000      	movs	r0, #0
   2aee6:	e00c      	b.n	2af02 <queue_insert+0x64>
	if (alloc) {
   2aee8:	f1b9 0f00 	cmp.w	r9, #0
   2aeec:	d01b      	beq.n	2af26 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2aeee:	2108      	movs	r1, #8
   2aef0:	f7f5 fd1e 	bl	20930 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2aef4:	b938      	cbnz	r0, 2af06 <queue_insert+0x68>
	__asm__ volatile(
   2aef6:	f387 8811 	msr	BASEPRI, r7
   2aefa:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2aefe:	f06f 000b 	mvn.w	r0, #11
}
   2af02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2af06:	2301      	movs	r3, #1
		anode->data = data;
   2af08:	f8c0 8004 	str.w	r8, [r0, #4]
   2af0c:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2af0e:	6803      	ldr	r3, [r0, #0]
   2af10:	f003 0203 	and.w	r2, r3, #3
   2af14:	b95d      	cbnz	r5, 2af2e <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2af16:	6823      	ldr	r3, [r4, #0]
   2af18:	4313      	orrs	r3, r2
   2af1a:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2af1c:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2af1e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2af20:	b973      	cbnz	r3, 2af40 <queue_insert+0xa2>
	list->tail = node;
   2af22:	6060      	str	r0, [r4, #4]
}
   2af24:	e00c      	b.n	2af40 <queue_insert+0xa2>
	node->next_and_flags = flags;
   2af26:	f8c8 9000 	str.w	r9, [r8]
}
   2af2a:	4640      	mov	r0, r8
   2af2c:	e7ef      	b.n	2af0e <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2af2e:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2af30:	f033 0303 	bics.w	r3, r3, #3
   2af34:	d110      	bne.n	2af58 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2af36:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2af38:	6862      	ldr	r2, [r4, #4]
   2af3a:	b93a      	cbnz	r2, 2af4c <queue_insert+0xae>
	list->head = node;
   2af3c:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2af40:	2104      	movs	r1, #4
   2af42:	f104 0010 	add.w	r0, r4, #16
   2af46:	f000 fbfd 	bl	2b744 <z_handle_obj_poll_events>
   2af4a:	e7c7      	b.n	2aedc <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2af4c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2af4e:	f003 0303 	and.w	r3, r3, #3
   2af52:	4303      	orrs	r3, r0
   2af54:	6013      	str	r3, [r2, #0]
   2af56:	e7e4      	b.n	2af22 <queue_insert+0x84>
   2af58:	4313      	orrs	r3, r2
   2af5a:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2af5c:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2af5e:	f003 0303 	and.w	r3, r3, #3
   2af62:	4303      	orrs	r3, r0
   2af64:	602b      	str	r3, [r5, #0]
}
   2af66:	e7eb      	b.n	2af40 <queue_insert+0xa2>

0002af68 <z_queue_node_peek>:
{
   2af68:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2af6a:	4604      	mov	r4, r0
   2af6c:	b130      	cbz	r0, 2af7c <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2af6e:	6802      	ldr	r2, [r0, #0]
   2af70:	0793      	lsls	r3, r2, #30
   2af72:	d003      	beq.n	2af7c <z_queue_node_peek+0x14>
		ret = anode->data;
   2af74:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2af76:	b109      	cbz	r1, 2af7c <z_queue_node_peek+0x14>
			k_free(anode);
   2af78:	f000 fc05 	bl	2b786 <k_free>
}
   2af7c:	4620      	mov	r0, r4
   2af7e:	bd10      	pop	{r4, pc}

0002af80 <z_impl_k_queue_init>:
	list->head = NULL;
   2af80:	2300      	movs	r3, #0
	list->tail = NULL;
   2af82:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2af86:	f100 0308 	add.w	r3, r0, #8
   2af8a:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2af8e:	f100 0310 	add.w	r3, r0, #16
   2af92:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2af96:	4770      	bx	lr

0002af98 <k_queue_append>:
{
   2af98:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2af9a:	2301      	movs	r3, #1
   2af9c:	9300      	str	r3, [sp, #0]
   2af9e:	2300      	movs	r3, #0
{
   2afa0:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2afa2:	4619      	mov	r1, r3
   2afa4:	f7ff ff7b 	bl	2ae9e <queue_insert>
}
   2afa8:	b003      	add	sp, #12
   2afaa:	f85d fb04 	ldr.w	pc, [sp], #4

0002afae <k_queue_prepend>:
{
   2afae:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2afb0:	2300      	movs	r3, #0
{
   2afb2:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2afb4:	9300      	str	r3, [sp, #0]
   2afb6:	4619      	mov	r1, r3
   2afb8:	f7ff ff71 	bl	2ae9e <queue_insert>
}
   2afbc:	b003      	add	sp, #12
   2afbe:	f85d fb04 	ldr.w	pc, [sp], #4

0002afc2 <k_queue_append_list>:
{
   2afc2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2afc6:	4605      	mov	r5, r0
   2afc8:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2afca:	460c      	mov	r4, r1
   2afcc:	b391      	cbz	r1, 2b034 <k_queue_append_list+0x72>
   2afce:	b38a      	cbz	r2, 2b034 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2afd0:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2afd4:	f04f 0320 	mov.w	r3, #32
   2afd8:	f3ef 8811 	mrs	r8, BASEPRI
   2afdc:	f383 8811 	msr	BASEPRI, r3
   2afe0:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2afe4:	4638      	mov	r0, r7
   2afe6:	f000 f8ee 	bl	2b1c6 <z_unpend_first_thread>
   2afea:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2afee:	b920      	cbnz	r0, 2affa <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2aff0:	686b      	ldr	r3, [r5, #4]
   2aff2:	b9cb      	cbnz	r3, 2b028 <k_queue_append_list+0x66>
	list->head = node;
   2aff4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2aff6:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2aff8:	e00a      	b.n	2b010 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2affa:	6144      	str	r4, [r0, #20]
   2affc:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   2b000:	f000 f886 	bl	2b110 <z_ready_thread>
		head = *(void **)head;
   2b004:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2b006:	4638      	mov	r0, r7
   2b008:	f000 f8dd 	bl	2b1c6 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2b00c:	2c00      	cmp	r4, #0
   2b00e:	d1ee      	bne.n	2afee <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2b010:	2104      	movs	r1, #4
   2b012:	f105 0010 	add.w	r0, r5, #16
   2b016:	f000 fb95 	bl	2b744 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2b01a:	4638      	mov	r0, r7
   2b01c:	4641      	mov	r1, r8
   2b01e:	f7f4 fd01 	bl	1fa24 <z_reschedule>
	return 0;
   2b022:	2000      	movs	r0, #0
}
   2b024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b028:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b02a:	f001 0103 	and.w	r1, r1, #3
   2b02e:	430c      	orrs	r4, r1
   2b030:	601c      	str	r4, [r3, #0]
}
   2b032:	e7e0      	b.n	2aff6 <k_queue_append_list+0x34>
		return -EINVAL;
   2b034:	f06f 0015 	mvn.w	r0, #21
   2b038:	e7f4      	b.n	2b024 <k_queue_append_list+0x62>

0002b03a <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2b03a:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2b03e:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2b042:	4298      	cmp	r0, r3
   2b044:	bfac      	ite	ge
   2b046:	2000      	movge	r0, #0
   2b048:	2001      	movlt	r0, #1
   2b04a:	4770      	bx	lr

0002b04c <z_find_first_thread_to_unpend>:
{
   2b04c:	b510      	push	{r4, lr}
   2b04e:	f04f 0320 	mov.w	r3, #32
   2b052:	f3ef 8411 	mrs	r4, BASEPRI
   2b056:	f383 8811 	msr	BASEPRI, r3
   2b05a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2b05e:	f000 f84d 	bl	2b0fc <z_priq_dumb_best>
	__asm__ volatile(
   2b062:	f384 8811 	msr	BASEPRI, r4
   2b066:	f3bf 8f6f 	isb	sy
}
   2b06a:	bd10      	pop	{r4, pc}

0002b06c <z_unpend_thread_no_timeout>:
{
   2b06c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b06e:	f04f 0320 	mov.w	r3, #32
   2b072:	f3ef 8411 	mrs	r4, BASEPRI
   2b076:	f383 8811 	msr	BASEPRI, r3
   2b07a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b07e:	f000 f81b 	bl	2b0b8 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b082:	f384 8811 	msr	BASEPRI, r4
   2b086:	f3bf 8f6f 	isb	sy
}
   2b08a:	bd10      	pop	{r4, pc}

0002b08c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2b08c:	4603      	mov	r3, r0
   2b08e:	b920      	cbnz	r0, 2b09a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b090:	f3ef 8205 	mrs	r2, IPSR
   2b094:	b90a      	cbnz	r2, 2b09a <z_reschedule_irqlock+0xe>
   2b096:	f7d9 b98f 	b.w	43b8 <arch_swap>
   2b09a:	f383 8811 	msr	BASEPRI, r3
   2b09e:	f3bf 8f6f 	isb	sy
}
   2b0a2:	4770      	bx	lr

0002b0a4 <z_reschedule_unlocked>:
	__asm__ volatile(
   2b0a4:	f04f 0320 	mov.w	r3, #32
   2b0a8:	f3ef 8011 	mrs	r0, BASEPRI
   2b0ac:	f383 8811 	msr	BASEPRI, r3
   2b0b0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b0b4:	f7ff bfea 	b.w	2b08c <z_reschedule_irqlock>

0002b0b8 <unpend_thread_no_timeout>:
{
   2b0b8:	4601      	mov	r1, r0
   2b0ba:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2b0bc:	6880      	ldr	r0, [r0, #8]
   2b0be:	f7f4 fcd7 	bl	1fa70 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b0c2:	7b4b      	ldrb	r3, [r1, #13]
   2b0c4:	f023 0302 	bic.w	r3, r3, #2
   2b0c8:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2b0ca:	2300      	movs	r3, #0
   2b0cc:	608b      	str	r3, [r1, #8]
}
   2b0ce:	bd08      	pop	{r3, pc}

0002b0d0 <z_unpend_thread>:
{
   2b0d0:	b538      	push	{r3, r4, r5, lr}
   2b0d2:	4604      	mov	r4, r0
   2b0d4:	f04f 0320 	mov.w	r3, #32
   2b0d8:	f3ef 8511 	mrs	r5, BASEPRI
   2b0dc:	f383 8811 	msr	BASEPRI, r3
   2b0e0:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b0e4:	f7ff ffe8 	bl	2b0b8 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b0e8:	f385 8811 	msr	BASEPRI, r5
   2b0ec:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2b0f0:	f104 0018 	add.w	r0, r4, #24
}
   2b0f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b0f8:	f000 b932 	b.w	2b360 <z_abort_timeout>

0002b0fc <z_priq_dumb_best>:
{
   2b0fc:	4603      	mov	r3, r0
	return list->head == list;
   2b0fe:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b100:	4283      	cmp	r3, r0
   2b102:	d003      	beq.n	2b10c <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2b104:	2800      	cmp	r0, #0
   2b106:	bf38      	it	cc
   2b108:	2000      	movcc	r0, #0
   2b10a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2b10c:	2000      	movs	r0, #0
}
   2b10e:	4770      	bx	lr

0002b110 <z_ready_thread>:
{
   2b110:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b112:	f04f 0320 	mov.w	r3, #32
   2b116:	f3ef 8411 	mrs	r4, BASEPRI
   2b11a:	f383 8811 	msr	BASEPRI, r3
   2b11e:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2b122:	f7f4 fcff 	bl	1fb24 <ready_thread>
	__asm__ volatile(
   2b126:	f384 8811 	msr	BASEPRI, r4
   2b12a:	f3bf 8f6f 	isb	sy
}
   2b12e:	bd10      	pop	{r4, pc}

0002b130 <z_thread_timeout>:
{
   2b130:	b570      	push	{r4, r5, r6, lr}
   2b132:	4604      	mov	r4, r0
	__asm__ volatile(
   2b134:	f04f 0320 	mov.w	r3, #32
   2b138:	f3ef 8611 	mrs	r6, BASEPRI
   2b13c:	f383 8811 	msr	BASEPRI, r3
   2b140:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2b144:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2b148:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   2b14c:	b113      	cbz	r3, 2b154 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   2b14e:	4628      	mov	r0, r5
   2b150:	f7ff ffb2 	bl	2b0b8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b154:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2b158:	f023 0314 	bic.w	r3, r3, #20
   2b15c:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   2b160:	4628      	mov	r0, r5
   2b162:	f7f4 fcdf 	bl	1fb24 <ready_thread>
	__asm__ volatile(
   2b166:	f386 8811 	msr	BASEPRI, r6
   2b16a:	f3bf 8f6f 	isb	sy
}
   2b16e:	bd70      	pop	{r4, r5, r6, pc}

0002b170 <add_to_waitq_locked>:
{
   2b170:	b538      	push	{r3, r4, r5, lr}
   2b172:	4604      	mov	r4, r0
   2b174:	460d      	mov	r5, r1
	unready_thread(thread);
   2b176:	f7f4 fe5d 	bl	1fe34 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2b17a:	7b63      	ldrb	r3, [r4, #13]
   2b17c:	f043 0302 	orr.w	r3, r3, #2
   2b180:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2b182:	b1c5      	cbz	r5, 2b1b6 <add_to_waitq_locked+0x46>
	return list->head == list;
   2b184:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2b186:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b188:	429d      	cmp	r5, r3
   2b18a:	bf08      	it	eq
   2b18c:	2300      	moveq	r3, #0
   2b18e:	2b00      	cmp	r3, #0
   2b190:	bf38      	it	cc
   2b192:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b194:	b183      	cbz	r3, 2b1b8 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   2b196:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2b19a:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2b19e:	4291      	cmp	r1, r2
   2b1a0:	db04      	blt.n	2b1ac <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2b1a2:	686a      	ldr	r2, [r5, #4]
   2b1a4:	429a      	cmp	r2, r3
   2b1a6:	d007      	beq.n	2b1b8 <add_to_waitq_locked+0x48>
   2b1a8:	681b      	ldr	r3, [r3, #0]
   2b1aa:	e7f3      	b.n	2b194 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   2b1ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b1ae:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2b1b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b1b4:	605c      	str	r4, [r3, #4]
}
   2b1b6:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   2b1b8:	686b      	ldr	r3, [r5, #4]
   2b1ba:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2b1bc:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2b1be:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   2b1c0:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b1c2:	606c      	str	r4, [r5, #4]
   2b1c4:	e7f7      	b.n	2b1b6 <add_to_waitq_locked+0x46>

0002b1c6 <z_unpend_first_thread>:
{
   2b1c6:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b1c8:	f04f 0320 	mov.w	r3, #32
   2b1cc:	f3ef 8211 	mrs	r2, BASEPRI
   2b1d0:	f383 8811 	msr	BASEPRI, r3
   2b1d4:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2b1d8:	f7ff ff90 	bl	2b0fc <z_priq_dumb_best>
   2b1dc:	4604      	mov	r4, r0
	__asm__ volatile(
   2b1de:	f382 8811 	msr	BASEPRI, r2
   2b1e2:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2b1e6:	b188      	cbz	r0, 2b20c <z_unpend_first_thread+0x46>
	__asm__ volatile(
   2b1e8:	f04f 0320 	mov.w	r3, #32
   2b1ec:	f3ef 8511 	mrs	r5, BASEPRI
   2b1f0:	f383 8811 	msr	BASEPRI, r3
   2b1f4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b1f8:	f7ff ff5e 	bl	2b0b8 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b1fc:	f385 8811 	msr	BASEPRI, r5
   2b200:	f3bf 8f6f 	isb	sy
   2b204:	f104 0018 	add.w	r0, r4, #24
   2b208:	f000 f8aa 	bl	2b360 <z_abort_timeout>
}
   2b20c:	4620      	mov	r0, r4
   2b20e:	bd38      	pop	{r3, r4, r5, pc}

0002b210 <z_unpend_all>:
{
   2b210:	b538      	push	{r3, r4, r5, lr}
   2b212:	4605      	mov	r5, r0
	int need_sched = 0;
   2b214:	2000      	movs	r0, #0
	return list->head == list;
   2b216:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b218:	42a5      	cmp	r5, r4
   2b21a:	d000      	beq.n	2b21e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b21c:	b904      	cbnz	r4, 2b220 <z_unpend_all+0x10>
}
   2b21e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2b220:	4620      	mov	r0, r4
   2b222:	f7ff ff55 	bl	2b0d0 <z_unpend_thread>
		z_ready_thread(thread);
   2b226:	4620      	mov	r0, r4
   2b228:	f7ff ff72 	bl	2b110 <z_ready_thread>
		need_sched = 1;
   2b22c:	2001      	movs	r0, #1
   2b22e:	e7f2      	b.n	2b216 <z_unpend_all+0x6>

0002b230 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2b230:	b15a      	cbz	r2, 2b24a <z_impl_k_sem_init+0x1a>
   2b232:	428a      	cmp	r2, r1
   2b234:	d309      	bcc.n	2b24a <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b236:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b23a:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2b23e:	e9c0 0000 	strd	r0, r0, [r0]
   2b242:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b246:	2000      	movs	r0, #0
   2b248:	4770      	bx	lr
		return -EINVAL;
   2b24a:	f06f 0015 	mvn.w	r0, #21
}
   2b24e:	4770      	bx	lr

0002b250 <k_is_in_isr>:
   2b250:	f3ef 8005 	mrs	r0, IPSR
}
   2b254:	3800      	subs	r0, #0
   2b256:	bf18      	it	ne
   2b258:	2001      	movne	r0, #1
   2b25a:	4770      	bx	lr

0002b25c <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2b25c:	b108      	cbz	r0, 2b262 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2b25e:	f7d9 bea7 	b.w	4fb0 <arch_busy_wait>
}
   2b262:	4770      	bx	lr

0002b264 <z_impl_k_thread_name_set>:
}
   2b264:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b268:	4770      	bx	lr

0002b26a <k_thread_name_get>:
}
   2b26a:	2000      	movs	r0, #0
   2b26c:	4770      	bx	lr

0002b26e <k_work_submit_to_queue>:
{
   2b26e:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b270:	f101 0308 	add.w	r3, r1, #8
   2b274:	f3bf 8f5b 	dmb	ish
   2b278:	e853 2f00 	ldrex	r2, [r3]
   2b27c:	f042 0c01 	orr.w	ip, r2, #1
   2b280:	e843 ce00 	strex	lr, ip, [r3]
   2b284:	f1be 0f00 	cmp.w	lr, #0
   2b288:	d1f6      	bne.n	2b278 <k_work_submit_to_queue+0xa>
   2b28a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b28e:	07d3      	lsls	r3, r2, #31
   2b290:	d403      	bmi.n	2b29a <k_work_submit_to_queue+0x2c>
}
   2b292:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2b296:	f7ff be7f 	b.w	2af98 <k_queue_append>
}
   2b29a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b29e <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2b29e:	f1a0 0110 	sub.w	r1, r0, #16
   2b2a2:	6980      	ldr	r0, [r0, #24]
   2b2a4:	f7ff bfe3 	b.w	2b26e <k_work_submit_to_queue>

0002b2a8 <work_cancel>:
{
   2b2a8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b2aa:	f3bf 8f5b 	dmb	ish
   2b2ae:	6883      	ldr	r3, [r0, #8]
   2b2b0:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2b2b4:	07db      	lsls	r3, r3, #31
{
   2b2b6:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2b2b8:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2b2bc:	d532      	bpl.n	2b324 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2b2be:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2b2c0:	6813      	ldr	r3, [r2, #0]
   2b2c2:	2100      	movs	r1, #0
   2b2c4:	b913      	cbnz	r3, 2b2cc <work_cancel+0x24>
			return -EINVAL;
   2b2c6:	f06f 0015 	mvn.w	r0, #21
}
   2b2ca:	bd70      	pop	{r4, r5, r6, pc}
   2b2cc:	429c      	cmp	r4, r3
   2b2ce:	d124      	bne.n	2b31a <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2b2d0:	6823      	ldr	r3, [r4, #0]
   2b2d2:	6856      	ldr	r6, [r2, #4]
   2b2d4:	f023 0003 	bic.w	r0, r3, #3
   2b2d8:	b9b1      	cbnz	r1, 2b308 <work_cancel+0x60>
   2b2da:	42b4      	cmp	r4, r6
	list->head = node;
   2b2dc:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2b2de:	d100      	bne.n	2b2e2 <work_cancel+0x3a>
	list->tail = node;
   2b2e0:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b2e2:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b2e4:	f003 0303 	and.w	r3, r3, #3
   2b2e8:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2b2ea:	2000      	movs	r0, #0
   2b2ec:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b2ee:	f3bf 8f5b 	dmb	ish
   2b2f2:	e855 3f00 	ldrex	r3, [r5]
   2b2f6:	f023 0301 	bic.w	r3, r3, #1
   2b2fa:	e845 3200 	strex	r2, r3, [r5]
   2b2fe:	2a00      	cmp	r2, #0
   2b300:	d1f7      	bne.n	2b2f2 <work_cancel+0x4a>
   2b302:	f3bf 8f5b 	dmb	ish
   2b306:	e7e0      	b.n	2b2ca <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b308:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b30a:	f003 0303 	and.w	r3, r3, #3
   2b30e:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2b310:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b312:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2b314:	bf08      	it	eq
   2b316:	6051      	streq	r1, [r2, #4]
}
   2b318:	e7e3      	b.n	2b2e2 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b31a:	6818      	ldr	r0, [r3, #0]
   2b31c:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2b31e:	f020 0303 	bic.w	r3, r0, #3
   2b322:	e7cf      	b.n	2b2c4 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2b324:	3010      	adds	r0, #16
   2b326:	f000 f81b 	bl	2b360 <z_abort_timeout>
		if (err) {
   2b32a:	2800      	cmp	r0, #0
   2b32c:	d0dd      	beq.n	2b2ea <work_cancel+0x42>
			return -EALREADY;
   2b32e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b332:	e7ca      	b.n	2b2ca <work_cancel+0x22>

0002b334 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2b334:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b336:	f04f 0220 	mov.w	r2, #32
   2b33a:	f3ef 8411 	mrs	r4, BASEPRI
   2b33e:	f382 8811 	msr	BASEPRI, r2
   2b342:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   2b346:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b348:	b133      	cbz	r3, 2b358 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   2b34a:	f7ff ffad 	bl	2b2a8 <work_cancel>
	__asm__ volatile(
   2b34e:	f384 8811 	msr	BASEPRI, r4
   2b352:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   2b356:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b358:	f06f 0015 	mvn.w	r0, #21
   2b35c:	e7f7      	b.n	2b34e <k_delayed_work_cancel+0x1a>

0002b35e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2b35e:	4770      	bx	lr

0002b360 <z_abort_timeout>:
{
   2b360:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b362:	f04f 0220 	mov.w	r2, #32
   2b366:	f3ef 8411 	mrs	r4, BASEPRI
   2b36a:	f382 8811 	msr	BASEPRI, r2
   2b36e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2b372:	6803      	ldr	r3, [r0, #0]
   2b374:	b13b      	cbz	r3, 2b386 <z_abort_timeout+0x26>
			remove_timeout(to);
   2b376:	f7f5 f871 	bl	2045c <remove_timeout>
			ret = 0;
   2b37a:	2000      	movs	r0, #0
	__asm__ volatile(
   2b37c:	f384 8811 	msr	BASEPRI, r4
   2b380:	f3bf 8f6f 	isb	sy
}
   2b384:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b386:	f06f 0015 	mvn.w	r0, #21
   2b38a:	e7f7      	b.n	2b37c <z_abort_timeout+0x1c>

0002b38c <z_get_next_timeout_expiry>:
{
   2b38c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b38e:	f04f 0320 	mov.w	r3, #32
   2b392:	f3ef 8411 	mrs	r4, BASEPRI
   2b396:	f383 8811 	msr	BASEPRI, r3
   2b39a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2b39e:	f7f5 f877 	bl	20490 <next_timeout>
	__asm__ volatile(
   2b3a2:	f384 8811 	msr	BASEPRI, r4
   2b3a6:	f3bf 8f6f 	isb	sy
}
   2b3aa:	bd10      	pop	{r4, pc}

0002b3ac <z_set_timeout_expiry>:
{
   2b3ac:	b570      	push	{r4, r5, r6, lr}
   2b3ae:	4604      	mov	r4, r0
   2b3b0:	460d      	mov	r5, r1
	__asm__ volatile(
   2b3b2:	f04f 0320 	mov.w	r3, #32
   2b3b6:	f3ef 8611 	mrs	r6, BASEPRI
   2b3ba:	f383 8811 	msr	BASEPRI, r3
   2b3be:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2b3c2:	f7f5 f865 	bl	20490 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2b3c6:	2801      	cmp	r0, #1
   2b3c8:	dd05      	ble.n	2b3d6 <z_set_timeout_expiry+0x2a>
   2b3ca:	42a0      	cmp	r0, r4
   2b3cc:	db03      	blt.n	2b3d6 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2b3ce:	4629      	mov	r1, r5
   2b3d0:	4620      	mov	r0, r4
   2b3d2:	f7d8 fe49 	bl	4068 <z_clock_set_timeout>
	__asm__ volatile(
   2b3d6:	f386 8811 	msr	BASEPRI, r6
   2b3da:	f3bf 8f6f 	isb	sy
}
   2b3de:	bd70      	pop	{r4, r5, r6, pc}

0002b3e0 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2b3e0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2b3e2:	f7f5 f97d 	bl	206e0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2b3e6:	bd08      	pop	{r3, pc}

0002b3e8 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2b3e8:	f7f5 b97a 	b.w	206e0 <z_tick_get>

0002b3ec <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2b3ec:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b3ee:	1c4b      	adds	r3, r1, #1
   2b3f0:	bf08      	it	eq
   2b3f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2b3f6:	4604      	mov	r4, r0
   2b3f8:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b3fa:	d013      	beq.n	2b424 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b3fc:	ea54 0105 	orrs.w	r1, r4, r5
   2b400:	d103      	bne.n	2b40a <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2b402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2b406:	f7f5 b96b 	b.w	206e0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2b40a:	f06f 0101 	mvn.w	r1, #1
   2b40e:	1a0a      	subs	r2, r1, r0
   2b410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b414:	eb61 0305 	sbc.w	r3, r1, r5
   2b418:	2a00      	cmp	r2, #0
   2b41a:	f173 0100 	sbcs.w	r1, r3, #0
   2b41e:	db02      	blt.n	2b426 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2b420:	4610      	mov	r0, r2
   2b422:	4619      	mov	r1, r3
}
   2b424:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2b426:	f7f5 f95b 	bl	206e0 <z_tick_get>
   2b42a:	2c01      	cmp	r4, #1
   2b42c:	f175 0300 	sbcs.w	r3, r5, #0
   2b430:	bfbc      	itt	lt
   2b432:	2401      	movlt	r4, #1
   2b434:	2500      	movlt	r5, #0
   2b436:	1820      	adds	r0, r4, r0
   2b438:	eb45 0101 	adc.w	r1, r5, r1
   2b43c:	e7f2      	b.n	2b424 <z_timeout_end_calc+0x38>

0002b43e <k_timer_init>:
	timer->status = 0U;
   2b43e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2b440:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2b444:	f100 0218 	add.w	r2, r0, #24
   2b448:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2b44c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2b450:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2b452:	6343      	str	r3, [r0, #52]	; 0x34
}
   2b454:	4770      	bx	lr

0002b456 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2b456:	b510      	push	{r4, lr}
   2b458:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2b45a:	f7ff ff81 	bl	2b360 <z_abort_timeout>

	if (inactive) {
   2b45e:	b9d8      	cbnz	r0, 2b498 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2b460:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b462:	b10b      	cbz	r3, 2b468 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2b464:	4620      	mov	r0, r4
   2b466:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2b468:	f104 0018 	add.w	r0, r4, #24
   2b46c:	2100      	movs	r1, #0
   2b46e:	f7ff fded 	bl	2b04c <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2b472:	4604      	mov	r4, r0
   2b474:	b180      	cbz	r0, 2b498 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2b476:	f7ff fdf9 	bl	2b06c <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2b47a:	4620      	mov	r0, r4
   2b47c:	f7ff fe48 	bl	2b110 <z_ready_thread>
	__asm__ volatile(
   2b480:	f04f 0320 	mov.w	r3, #32
   2b484:	f3ef 8011 	mrs	r0, BASEPRI
   2b488:	f383 8811 	msr	BASEPRI, r3
   2b48c:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2b490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b494:	f7ff bdfa 	b.w	2b08c <z_reschedule_irqlock>
   2b498:	bd10      	pop	{r4, pc}

0002b49a <z_impl_k_timer_status_get>:
}
#include <syscalls/k_timer_stop_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_get(struct k_timer *timer)
{
   2b49a:	4603      	mov	r3, r0
   2b49c:	f04f 0120 	mov.w	r1, #32
   2b4a0:	f3ef 8211 	mrs	r2, BASEPRI
   2b4a4:	f381 8811 	msr	BASEPRI, r1
   2b4a8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;

	timer->status = 0U;
   2b4ac:	2100      	movs	r1, #0
	uint32_t result = timer->status;
   2b4ae:	6b00      	ldr	r0, [r0, #48]	; 0x30
	timer->status = 0U;
   2b4b0:	6319      	str	r1, [r3, #48]	; 0x30
	__asm__ volatile(
   2b4b2:	f382 8811 	msr	BASEPRI, r2
   2b4b6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
   2b4ba:	4770      	bx	lr

0002b4bc <clear_event_registrations>:
	while (num_events--) {
   2b4bc:	2314      	movs	r3, #20
{
   2b4be:	b530      	push	{r4, r5, lr}
   2b4c0:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2b4c4:	2400      	movs	r4, #0
	while (num_events--) {
   2b4c6:	4281      	cmp	r1, r0
   2b4c8:	d100      	bne.n	2b4cc <clear_event_registrations+0x10>
}
   2b4ca:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2b4cc:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2b4d0:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2b4d4:	f003 030f 	and.w	r3, r3, #15
   2b4d8:	2b02      	cmp	r3, #2
   2b4da:	d80a      	bhi.n	2b4f2 <clear_event_registrations+0x36>
   2b4dc:	b15b      	cbz	r3, 2b4f6 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2b4de:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2b4e2:	b143      	cbz	r3, 2b4f6 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2b4e4:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2b4e8:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2b4ea:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b4ec:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2b4f0:	e001      	b.n	2b4f6 <clear_event_registrations+0x3a>
	switch (event->type) {
   2b4f2:	2b04      	cmp	r3, #4
   2b4f4:	d0f3      	beq.n	2b4de <clear_event_registrations+0x22>
   2b4f6:	f382 8811 	msr	BASEPRI, r2
   2b4fa:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b4fe:	f04f 0320 	mov.w	r3, #32
   2b502:	f3ef 8211 	mrs	r2, BASEPRI
   2b506:	f383 8811 	msr	BASEPRI, r3
   2b50a:	f3bf 8f6f 	isb	sy
   2b50e:	3914      	subs	r1, #20
   2b510:	e7d9      	b.n	2b4c6 <clear_event_registrations+0xa>

0002b512 <k_work_submit_to_queue>:
{
   2b512:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b514:	f101 0308 	add.w	r3, r1, #8
   2b518:	f3bf 8f5b 	dmb	ish
   2b51c:	e853 2f00 	ldrex	r2, [r3]
   2b520:	f042 0c01 	orr.w	ip, r2, #1
   2b524:	e843 ce00 	strex	lr, ip, [r3]
   2b528:	f1be 0f00 	cmp.w	lr, #0
   2b52c:	d1f6      	bne.n	2b51c <k_work_submit_to_queue+0xa>
   2b52e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b532:	07d3      	lsls	r3, r2, #31
   2b534:	d403      	bmi.n	2b53e <k_work_submit_to_queue+0x2c>
}
   2b536:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2b53a:	f7ff bd2d 	b.w	2af98 <k_queue_append>
}
   2b53e:	f85d fb04 	ldr.w	pc, [sp], #4

0002b542 <signal_poll_event>:
{
   2b542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2b546:	6884      	ldr	r4, [r0, #8]
{
   2b548:	4605      	mov	r5, r0
   2b54a:	460e      	mov	r6, r1
	if (poller) {
   2b54c:	b144      	cbz	r4, 2b560 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2b54e:	7863      	ldrb	r3, [r4, #1]
   2b550:	2b01      	cmp	r3, #1
   2b552:	d138      	bne.n	2b5c6 <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2b554:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   2b558:	f013 0302 	ands.w	r3, r3, #2
   2b55c:	d10a      	bne.n	2b574 <signal_poll_event+0x32>
		poller->is_polling = false;
   2b55e:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2b560:	68eb      	ldr	r3, [r5, #12]
   2b562:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2b566:	430e      	orrs	r6, r1
	event->poller = NULL;
   2b568:	2000      	movs	r0, #0
	event->state |= state;
   2b56a:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   2b56e:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2b570:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b572:	e00d      	b.n	2b590 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2b574:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   2b578:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b57c:	f06f 0001 	mvn.w	r0, #1
   2b580:	428b      	cmp	r3, r1
   2b582:	bf08      	it	eq
   2b584:	4282      	cmpeq	r2, r0
   2b586:	d105      	bne.n	2b594 <signal_poll_event+0x52>
		poller->is_polling = false;
   2b588:	2300      	movs	r3, #0
   2b58a:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2b58c:	f06f 000a 	mvn.w	r0, #10
}
   2b590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b594:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   2b598:	4640      	mov	r0, r8
   2b59a:	f7ff fd99 	bl	2b0d0 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b59e:	2e08      	cmp	r6, #8
   2b5a0:	bf0c      	ite	eq
   2b5a2:	f06f 0303 	mvneq.w	r3, #3
   2b5a6:	2300      	movne	r3, #0
   2b5a8:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b5aa:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   2b5ae:	06db      	lsls	r3, r3, #27
   2b5b0:	d102      	bne.n	2b5b8 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   2b5b2:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   2b5b6:	b10f      	cbz	r7, 2b5bc <signal_poll_event+0x7a>
		poller->is_polling = false;
   2b5b8:	2300      	movs	r3, #0
   2b5ba:	e7d0      	b.n	2b55e <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2b5bc:	4640      	mov	r0, r8
   2b5be:	f7ff fda7 	bl	2b110 <z_ready_thread>
		poller->is_polling = false;
   2b5c2:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2b5c4:	e7cc      	b.n	2b560 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2b5c6:	2b02      	cmp	r3, #2
   2b5c8:	d1f6      	bne.n	2b5b8 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2b5ca:	7823      	ldrb	r3, [r4, #0]
   2b5cc:	2b00      	cmp	r3, #0
   2b5ce:	d0c7      	beq.n	2b560 <signal_poll_event+0x1e>
   2b5d0:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2b5d4:	2f00      	cmp	r7, #0
   2b5d6:	d0f4      	beq.n	2b5c2 <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2b5d8:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2b5dc:	f1a4 0910 	sub.w	r9, r4, #16
   2b5e0:	f104 0010 	add.w	r0, r4, #16
   2b5e4:	f7ff febc 	bl	2b360 <z_abort_timeout>
		twork->poll_result = 0;
   2b5e8:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   2b5ec:	4649      	mov	r1, r9
   2b5ee:	4638      	mov	r0, r7
   2b5f0:	f7ff ff8f 	bl	2b512 <k_work_submit_to_queue>
		poller->is_polling = false;
   2b5f4:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b5f8:	e7b2      	b.n	2b560 <signal_poll_event+0x1e>

0002b5fa <add_event>:
{
   2b5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5fc:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2b5fe:	e9d0 2300 	ldrd	r2, r3, [r0]
   2b602:	4290      	cmp	r0, r2
   2b604:	4604      	mov	r4, r0
   2b606:	460d      	mov	r5, r1
   2b608:	d106      	bne.n	2b618 <add_event+0x1e>
	node->prev = list->tail;
   2b60a:	6863      	ldr	r3, [r4, #4]
   2b60c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2b60e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2b610:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2b612:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b614:	6065      	str	r5, [r4, #4]
}
   2b616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2b618:	2b00      	cmp	r3, #0
   2b61a:	d0f6      	beq.n	2b60a <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2b61c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b61e:	b100      	cbz	r0, 2b622 <add_event+0x28>
   2b620:	3864      	subs	r0, #100	; 0x64
   2b622:	b107      	cbz	r7, 2b626 <add_event+0x2c>
   2b624:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2b626:	4639      	mov	r1, r7
   2b628:	f7ff fd07 	bl	2b03a <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2b62c:	2800      	cmp	r0, #0
   2b62e:	d1ec      	bne.n	2b60a <add_event+0x10>
	return list->head == list;
   2b630:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b632:	42b4      	cmp	r4, r6
   2b634:	d0e9      	beq.n	2b60a <add_event+0x10>
   2b636:	2e00      	cmp	r6, #0
   2b638:	bf38      	it	cc
   2b63a:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2b63c:	2e00      	cmp	r6, #0
   2b63e:	d0e4      	beq.n	2b60a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2b640:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b642:	b101      	cbz	r1, 2b646 <add_event+0x4c>
   2b644:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2b646:	4638      	mov	r0, r7
   2b648:	f7ff fcf7 	bl	2b03a <z_is_t1_higher_prio_than_t2>
   2b64c:	b128      	cbz	r0, 2b65a <add_event+0x60>
	node->prev = successor->prev;
   2b64e:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b650:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2b654:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2b656:	6075      	str	r5, [r6, #4]
			return;
   2b658:	e7dd      	b.n	2b616 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2b65a:	6863      	ldr	r3, [r4, #4]
   2b65c:	42b3      	cmp	r3, r6
   2b65e:	d0d4      	beq.n	2b60a <add_event+0x10>
   2b660:	6836      	ldr	r6, [r6, #0]
   2b662:	e7eb      	b.n	2b63c <add_event+0x42>

0002b664 <register_events>:
{
   2b664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2b668:	f04f 0a00 	mov.w	sl, #0
{
   2b66c:	460e      	mov	r6, r1
   2b66e:	4614      	mov	r4, r2
   2b670:	461f      	mov	r7, r3
   2b672:	4683      	mov	fp, r0
	int events_registered = 0;
   2b674:	4655      	mov	r5, sl
	event->poller = NULL;
   2b676:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2b678:	45b2      	cmp	sl, r6
   2b67a:	db02      	blt.n	2b682 <register_events+0x1e>
}
   2b67c:	4628      	mov	r0, r5
   2b67e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b682:	f04f 0320 	mov.w	r3, #32
   2b686:	f3ef 8911 	mrs	r9, BASEPRI
   2b68a:	f383 8811 	msr	BASEPRI, r3
   2b68e:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2b692:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2b696:	f002 020f 	and.w	r2, r2, #15
   2b69a:	2a02      	cmp	r2, #2
   2b69c:	d006      	beq.n	2b6ac <register_events+0x48>
   2b69e:	2a04      	cmp	r2, #4
   2b6a0:	d008      	beq.n	2b6b4 <register_events+0x50>
   2b6a2:	2a01      	cmp	r2, #1
   2b6a4:	d120      	bne.n	2b6e8 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2b6a6:	f8db 3010 	ldr.w	r3, [fp, #16]
   2b6aa:	e001      	b.n	2b6b0 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   2b6ac:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2b6b0:	689b      	ldr	r3, [r3, #8]
   2b6b2:	e002      	b.n	2b6ba <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2b6b4:	f8db 3010 	ldr.w	r3, [fp, #16]
   2b6b8:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2b6ba:	b1ab      	cbz	r3, 2b6e8 <register_events+0x84>
	event->state |= state;
   2b6bc:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2b6c0:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2b6c4:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2b6c8:	430a      	orrs	r2, r1
   2b6ca:	f362 3310 	bfi	r3, r2, #12, #5
   2b6ce:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2b6d2:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2b6d6:	f389 8811 	msr	BASEPRI, r9
   2b6da:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b6de:	f10a 0a01 	add.w	sl, sl, #1
   2b6e2:	f10b 0b14 	add.w	fp, fp, #20
   2b6e6:	e7c7      	b.n	2b678 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2b6e8:	2f00      	cmp	r7, #0
   2b6ea:	d1f4      	bne.n	2b6d6 <register_events+0x72>
   2b6ec:	7823      	ldrb	r3, [r4, #0]
   2b6ee:	2b00      	cmp	r3, #0
   2b6f0:	d0f1      	beq.n	2b6d6 <register_events+0x72>
	switch (event->type) {
   2b6f2:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2b6f6:	f003 030f 	and.w	r3, r3, #15
   2b6fa:	2b02      	cmp	r3, #2
   2b6fc:	d008      	beq.n	2b710 <register_events+0xac>
   2b6fe:	2b04      	cmp	r3, #4
   2b700:	d006      	beq.n	2b710 <register_events+0xac>
   2b702:	2b01      	cmp	r3, #1
   2b704:	d10b      	bne.n	2b71e <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2b706:	f8db 0010 	ldr.w	r0, [fp, #16]
   2b70a:	4622      	mov	r2, r4
   2b70c:	4659      	mov	r1, fp
   2b70e:	e004      	b.n	2b71a <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   2b710:	f8db 0010 	ldr.w	r0, [fp, #16]
   2b714:	4622      	mov	r2, r4
   2b716:	4659      	mov	r1, fp
   2b718:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2b71a:	f7ff ff6e 	bl	2b5fa <add_event>
	event->poller = poller;
   2b71e:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   2b722:	3501      	adds	r5, #1
   2b724:	e7d7      	b.n	2b6d6 <register_events+0x72>

0002b726 <k_poll_event_init>:
{
   2b726:	b510      	push	{r4, lr}
	event->type = type;
   2b728:	0452      	lsls	r2, r2, #17
   2b72a:	0209      	lsls	r1, r1, #8
   2b72c:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   2b730:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2b734:	430a      	orrs	r2, r1
   2b736:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2b738:	2400      	movs	r4, #0
	event->type = type;
   2b73a:	430a      	orrs	r2, r1
	event->obj = obj;
   2b73c:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2b740:	6084      	str	r4, [r0, #8]
}
   2b742:	bd10      	pop	{r4, pc}

0002b744 <z_handle_obj_poll_events>:
{
   2b744:	4603      	mov	r3, r0
	return list->head == list;
   2b746:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b748:	4283      	cmp	r3, r0
   2b74a:	d008      	beq.n	2b75e <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2b74c:	e9d0 3200 	ldrd	r3, r2, [r0]
   2b750:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2b752:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b754:	2300      	movs	r3, #0
	node->prev = NULL;
   2b756:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b75a:	f7ff bef2 	b.w	2b542 <signal_poll_event>
}
   2b75e:	4770      	bx	lr

0002b760 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2b760:	2304      	movs	r3, #4
   2b762:	18d2      	adds	r2, r2, r3
{
   2b764:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2b766:	4604      	mov	r4, r0
   2b768:	d207      	bcs.n	2b77a <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2b76a:	2600      	movs	r6, #0
   2b76c:	2700      	movs	r7, #0
   2b76e:	e9cd 6700 	strd	r6, r7, [sp]
   2b772:	4319      	orrs	r1, r3
   2b774:	f7ff fb14 	bl	2ada0 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2b778:	b910      	cbnz	r0, 2b780 <z_heap_aligned_alloc+0x20>
		return NULL;
   2b77a:	2000      	movs	r0, #0
}
   2b77c:	b002      	add	sp, #8
   2b77e:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2b780:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2b784:	e7fa      	b.n	2b77c <z_heap_aligned_alloc+0x1c>

0002b786 <k_free>:
	if (ptr != NULL) {
   2b786:	b120      	cbz	r0, 2b792 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b788:	1f01      	subs	r1, r0, #4
   2b78a:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b78e:	f7ff bb4e 	b.w	2ae2e <k_heap_free>
}
   2b792:	4770      	bx	lr

0002b794 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2b794:	4770      	bx	lr

0002b796 <memcmp>:
   2b796:	b530      	push	{r4, r5, lr}
   2b798:	3901      	subs	r1, #1
   2b79a:	2400      	movs	r4, #0
   2b79c:	42a2      	cmp	r2, r4
   2b79e:	d101      	bne.n	2b7a4 <memcmp+0xe>
   2b7a0:	2000      	movs	r0, #0
   2b7a2:	e005      	b.n	2b7b0 <memcmp+0x1a>
   2b7a4:	5d03      	ldrb	r3, [r0, r4]
   2b7a6:	3401      	adds	r4, #1
   2b7a8:	5d0d      	ldrb	r5, [r1, r4]
   2b7aa:	42ab      	cmp	r3, r5
   2b7ac:	d0f6      	beq.n	2b79c <memcmp+0x6>
   2b7ae:	1b58      	subs	r0, r3, r5
   2b7b0:	bd30      	pop	{r4, r5, pc}

0002b7b2 <memcpy>:
   2b7b2:	440a      	add	r2, r1
   2b7b4:	4291      	cmp	r1, r2
   2b7b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2b7ba:	d100      	bne.n	2b7be <memcpy+0xc>
   2b7bc:	4770      	bx	lr
   2b7be:	b510      	push	{r4, lr}
   2b7c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b7c4:	f803 4f01 	strb.w	r4, [r3, #1]!
   2b7c8:	4291      	cmp	r1, r2
   2b7ca:	d1f9      	bne.n	2b7c0 <memcpy+0xe>
   2b7cc:	bd10      	pop	{r4, pc}

0002b7ce <__memcpy_chk>:
   2b7ce:	429a      	cmp	r2, r3
   2b7d0:	b508      	push	{r3, lr}
   2b7d2:	d901      	bls.n	2b7d8 <__memcpy_chk+0xa>
   2b7d4:	f7d9 fac0 	bl	4d58 <__chk_fail>
   2b7d8:	4281      	cmp	r1, r0
   2b7da:	d804      	bhi.n	2b7e6 <__memcpy_chk+0x18>
   2b7dc:	188b      	adds	r3, r1, r2
   2b7de:	4298      	cmp	r0, r3
   2b7e0:	d3f8      	bcc.n	2b7d4 <__memcpy_chk+0x6>
   2b7e2:	4281      	cmp	r1, r0
   2b7e4:	d102      	bne.n	2b7ec <__memcpy_chk+0x1e>
   2b7e6:	1883      	adds	r3, r0, r2
   2b7e8:	4299      	cmp	r1, r3
   2b7ea:	d3f3      	bcc.n	2b7d4 <__memcpy_chk+0x6>
   2b7ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b7f0:	f7ff bfdf 	b.w	2b7b2 <memcpy>

0002b7f4 <memset>:
   2b7f4:	4402      	add	r2, r0
   2b7f6:	4603      	mov	r3, r0
   2b7f8:	4293      	cmp	r3, r2
   2b7fa:	d100      	bne.n	2b7fe <memset+0xa>
   2b7fc:	4770      	bx	lr
   2b7fe:	f803 1b01 	strb.w	r1, [r3], #1
   2b802:	e7f9      	b.n	2b7f8 <memset+0x4>

0002b804 <__seofread>:
   2b804:	2000      	movs	r0, #0
   2b806:	4770      	bx	lr

0002b808 <strcpy>:
   2b808:	4603      	mov	r3, r0
   2b80a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b80e:	f803 2b01 	strb.w	r2, [r3], #1
   2b812:	2a00      	cmp	r2, #0
   2b814:	d1f9      	bne.n	2b80a <strcpy+0x2>
   2b816:	4770      	bx	lr

0002b818 <strncmp>:
   2b818:	b510      	push	{r4, lr}
   2b81a:	b16a      	cbz	r2, 2b838 <strncmp+0x20>
   2b81c:	3901      	subs	r1, #1
   2b81e:	1884      	adds	r4, r0, r2
   2b820:	f810 3b01 	ldrb.w	r3, [r0], #1
   2b824:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2b828:	4293      	cmp	r3, r2
   2b82a:	d103      	bne.n	2b834 <strncmp+0x1c>
   2b82c:	42a0      	cmp	r0, r4
   2b82e:	d001      	beq.n	2b834 <strncmp+0x1c>
   2b830:	2b00      	cmp	r3, #0
   2b832:	d1f5      	bne.n	2b820 <strncmp+0x8>
   2b834:	1a98      	subs	r0, r3, r2
   2b836:	bd10      	pop	{r4, pc}
   2b838:	4610      	mov	r0, r2
   2b83a:	e7fc      	b.n	2b836 <strncmp+0x1e>

0002b83c <strncpy>:
   2b83c:	b510      	push	{r4, lr}
   2b83e:	3901      	subs	r1, #1
   2b840:	4603      	mov	r3, r0
   2b842:	b132      	cbz	r2, 2b852 <strncpy+0x16>
   2b844:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b848:	f803 4b01 	strb.w	r4, [r3], #1
   2b84c:	3a01      	subs	r2, #1
   2b84e:	2c00      	cmp	r4, #0
   2b850:	d1f7      	bne.n	2b842 <strncpy+0x6>
   2b852:	441a      	add	r2, r3
   2b854:	2100      	movs	r1, #0
   2b856:	4293      	cmp	r3, r2
   2b858:	d100      	bne.n	2b85c <strncpy+0x20>
   2b85a:	bd10      	pop	{r4, pc}
   2b85c:	f803 1b01 	strb.w	r1, [r3], #1
   2b860:	e7f9      	b.n	2b856 <strncpy+0x1a>

0002b862 <__strncpy_chk>:
   2b862:	429a      	cmp	r2, r3
   2b864:	b508      	push	{r3, lr}
   2b866:	d901      	bls.n	2b86c <__strncpy_chk+0xa>
   2b868:	f7d9 fa76 	bl	4d58 <__chk_fail>
   2b86c:	4281      	cmp	r1, r0
   2b86e:	d804      	bhi.n	2b87a <__strncpy_chk+0x18>
   2b870:	188b      	adds	r3, r1, r2
   2b872:	4298      	cmp	r0, r3
   2b874:	d3f8      	bcc.n	2b868 <__strncpy_chk+0x6>
   2b876:	4281      	cmp	r1, r0
   2b878:	d102      	bne.n	2b880 <__strncpy_chk+0x1e>
   2b87a:	1883      	adds	r3, r0, r2
   2b87c:	4299      	cmp	r1, r3
   2b87e:	d3f3      	bcc.n	2b868 <__strncpy_chk+0x6>
   2b880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b884:	f7ff bfda 	b.w	2b83c <strncpy>

0002b888 <strnlen>:
   2b888:	b510      	push	{r4, lr}
   2b88a:	4602      	mov	r2, r0
   2b88c:	4401      	add	r1, r0
   2b88e:	428a      	cmp	r2, r1
   2b890:	4613      	mov	r3, r2
   2b892:	d101      	bne.n	2b898 <strnlen+0x10>
   2b894:	1a18      	subs	r0, r3, r0
   2b896:	bd10      	pop	{r4, pc}
   2b898:	781c      	ldrb	r4, [r3, #0]
   2b89a:	3201      	adds	r2, #1
   2b89c:	2c00      	cmp	r4, #0
   2b89e:	d1f6      	bne.n	2b88e <strnlen+0x6>
   2b8a0:	e7f8      	b.n	2b894 <strnlen+0xc>

0002b8a2 <_strtol_r>:
   2b8a2:	f7f6 b88b 	b.w	219bc <_strtol_l.isra.0>

0002b8a6 <_strtoul_r>:
   2b8a6:	f7f6 b90d 	b.w	21ac4 <_strtoul_l.isra.0>

0002b8aa <_tzset_unlocked>:
   2b8aa:	f7f6 ba39 	b.w	21d20 <tzset>

0002b8ae <_vsniprintf_r>:
   2b8ae:	b530      	push	{r4, r5, lr}
   2b8b0:	1e14      	subs	r4, r2, #0
   2b8b2:	4605      	mov	r5, r0
   2b8b4:	b09b      	sub	sp, #108	; 0x6c
   2b8b6:	4618      	mov	r0, r3
   2b8b8:	da05      	bge.n	2b8c6 <_vsniprintf_r+0x18>
   2b8ba:	238b      	movs	r3, #139	; 0x8b
   2b8bc:	602b      	str	r3, [r5, #0]
   2b8be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b8c2:	b01b      	add	sp, #108	; 0x6c
   2b8c4:	bd30      	pop	{r4, r5, pc}
   2b8c6:	f44f 7302 	mov.w	r3, #520	; 0x208
   2b8ca:	f8ad 3010 	strh.w	r3, [sp, #16]
   2b8ce:	bf14      	ite	ne
   2b8d0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2b8d4:	4623      	moveq	r3, r4
   2b8d6:	9303      	str	r3, [sp, #12]
   2b8d8:	9306      	str	r3, [sp, #24]
   2b8da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b8de:	9101      	str	r1, [sp, #4]
   2b8e0:	9105      	str	r1, [sp, #20]
   2b8e2:	f8ad 3012 	strh.w	r3, [sp, #18]
   2b8e6:	4602      	mov	r2, r0
   2b8e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b8ea:	a901      	add	r1, sp, #4
   2b8ec:	4628      	mov	r0, r5
   2b8ee:	f7f6 fc95 	bl	2221c <_svfiprintf_r>
   2b8f2:	1c43      	adds	r3, r0, #1
   2b8f4:	bfbc      	itt	lt
   2b8f6:	238b      	movlt	r3, #139	; 0x8b
   2b8f8:	602b      	strlt	r3, [r5, #0]
   2b8fa:	2c00      	cmp	r4, #0
   2b8fc:	d0e1      	beq.n	2b8c2 <_vsniprintf_r+0x14>
   2b8fe:	9b01      	ldr	r3, [sp, #4]
   2b900:	2200      	movs	r2, #0
   2b902:	701a      	strb	r2, [r3, #0]
   2b904:	e7dd      	b.n	2b8c2 <_vsniprintf_r+0x14>

0002b906 <abs>:
   2b906:	2800      	cmp	r0, #0
   2b908:	bfb8      	it	lt
   2b90a:	4240      	neglt	r0, r0
   2b90c:	4770      	bx	lr

0002b90e <div>:
   2b90e:	2900      	cmp	r1, #0
   2b910:	b510      	push	{r4, lr}
   2b912:	fb91 f4f2 	sdiv	r4, r1, r2
   2b916:	fb02 1314 	mls	r3, r2, r4, r1
   2b91a:	db06      	blt.n	2b92a <div+0x1c>
   2b91c:	2b00      	cmp	r3, #0
   2b91e:	da01      	bge.n	2b924 <div+0x16>
   2b920:	3401      	adds	r4, #1
   2b922:	1a9b      	subs	r3, r3, r2
   2b924:	e9c0 4300 	strd	r4, r3, [r0]
   2b928:	bd10      	pop	{r4, pc}
   2b92a:	2b00      	cmp	r3, #0
   2b92c:	bfc4      	itt	gt
   2b92e:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   2b932:	189b      	addgt	r3, r3, r2
   2b934:	e7f6      	b.n	2b924 <div+0x16>

0002b936 <_getenv_r>:
   2b936:	b507      	push	{r0, r1, r2, lr}
   2b938:	aa01      	add	r2, sp, #4
   2b93a:	f7f6 fb81 	bl	22040 <_findenv_r>
   2b93e:	b003      	add	sp, #12
   2b940:	f85d fb04 	ldr.w	pc, [sp], #4

0002b944 <labs>:
   2b944:	2800      	cmp	r0, #0
   2b946:	bfb8      	it	lt
   2b948:	4240      	neglt	r0, r0
   2b94a:	4770      	bx	lr

0002b94c <__ascii_mbtowc>:
   2b94c:	b082      	sub	sp, #8
   2b94e:	b901      	cbnz	r1, 2b952 <__ascii_mbtowc+0x6>
   2b950:	a901      	add	r1, sp, #4
   2b952:	b142      	cbz	r2, 2b966 <__ascii_mbtowc+0x1a>
   2b954:	b14b      	cbz	r3, 2b96a <__ascii_mbtowc+0x1e>
   2b956:	7813      	ldrb	r3, [r2, #0]
   2b958:	600b      	str	r3, [r1, #0]
   2b95a:	7812      	ldrb	r2, [r2, #0]
   2b95c:	1e10      	subs	r0, r2, #0
   2b95e:	bf18      	it	ne
   2b960:	2001      	movne	r0, #1
   2b962:	b002      	add	sp, #8
   2b964:	4770      	bx	lr
   2b966:	4610      	mov	r0, r2
   2b968:	e7fb      	b.n	2b962 <__ascii_mbtowc+0x16>
   2b96a:	f06f 0001 	mvn.w	r0, #1
   2b96e:	e7f8      	b.n	2b962 <__ascii_mbtowc+0x16>

0002b970 <__ssputs_r>:
   2b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b974:	688e      	ldr	r6, [r1, #8]
   2b976:	429e      	cmp	r6, r3
   2b978:	4682      	mov	sl, r0
   2b97a:	460c      	mov	r4, r1
   2b97c:	4690      	mov	r8, r2
   2b97e:	461f      	mov	r7, r3
   2b980:	d838      	bhi.n	2b9f4 <__ssputs_r+0x84>
   2b982:	898a      	ldrh	r2, [r1, #12]
   2b984:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2b988:	d032      	beq.n	2b9f0 <__ssputs_r+0x80>
   2b98a:	6825      	ldr	r5, [r4, #0]
   2b98c:	6909      	ldr	r1, [r1, #16]
   2b98e:	eba5 0901 	sub.w	r9, r5, r1
   2b992:	6965      	ldr	r5, [r4, #20]
   2b994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2b998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2b99c:	3301      	adds	r3, #1
   2b99e:	444b      	add	r3, r9
   2b9a0:	106d      	asrs	r5, r5, #1
   2b9a2:	429d      	cmp	r5, r3
   2b9a4:	bf38      	it	cc
   2b9a6:	461d      	movcc	r5, r3
   2b9a8:	0553      	lsls	r3, r2, #21
   2b9aa:	d531      	bpl.n	2ba10 <__ssputs_r+0xa0>
   2b9ac:	4629      	mov	r1, r5
   2b9ae:	f7f6 fbdb 	bl	22168 <_malloc_r>
   2b9b2:	4606      	mov	r6, r0
   2b9b4:	b950      	cbnz	r0, 2b9cc <__ssputs_r+0x5c>
   2b9b6:	230c      	movs	r3, #12
   2b9b8:	f8ca 3000 	str.w	r3, [sl]
   2b9bc:	89a3      	ldrh	r3, [r4, #12]
   2b9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b9c2:	81a3      	strh	r3, [r4, #12]
   2b9c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b9cc:	6921      	ldr	r1, [r4, #16]
   2b9ce:	464a      	mov	r2, r9
   2b9d0:	f7ff feef 	bl	2b7b2 <memcpy>
   2b9d4:	89a3      	ldrh	r3, [r4, #12]
   2b9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2b9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b9de:	81a3      	strh	r3, [r4, #12]
   2b9e0:	6126      	str	r6, [r4, #16]
   2b9e2:	6165      	str	r5, [r4, #20]
   2b9e4:	444e      	add	r6, r9
   2b9e6:	eba5 0509 	sub.w	r5, r5, r9
   2b9ea:	6026      	str	r6, [r4, #0]
   2b9ec:	60a5      	str	r5, [r4, #8]
   2b9ee:	463e      	mov	r6, r7
   2b9f0:	42be      	cmp	r6, r7
   2b9f2:	d900      	bls.n	2b9f6 <__ssputs_r+0x86>
   2b9f4:	463e      	mov	r6, r7
   2b9f6:	4632      	mov	r2, r6
   2b9f8:	6820      	ldr	r0, [r4, #0]
   2b9fa:	4641      	mov	r1, r8
   2b9fc:	f000 f95d 	bl	2bcba <memmove>
   2ba00:	68a3      	ldr	r3, [r4, #8]
   2ba02:	6822      	ldr	r2, [r4, #0]
   2ba04:	1b9b      	subs	r3, r3, r6
   2ba06:	4432      	add	r2, r6
   2ba08:	60a3      	str	r3, [r4, #8]
   2ba0a:	6022      	str	r2, [r4, #0]
   2ba0c:	2000      	movs	r0, #0
   2ba0e:	e7db      	b.n	2b9c8 <__ssputs_r+0x58>
   2ba10:	462a      	mov	r2, r5
   2ba12:	f000 f96e 	bl	2bcf2 <_realloc_r>
   2ba16:	4606      	mov	r6, r0
   2ba18:	2800      	cmp	r0, #0
   2ba1a:	d1e1      	bne.n	2b9e0 <__ssputs_r+0x70>
   2ba1c:	6921      	ldr	r1, [r4, #16]
   2ba1e:	4650      	mov	r0, sl
   2ba20:	f7f6 fb54 	bl	220cc <_free_r>
   2ba24:	e7c7      	b.n	2b9b6 <__ssputs_r+0x46>

0002ba26 <_sungetc_r>:
   2ba26:	b538      	push	{r3, r4, r5, lr}
   2ba28:	1c4b      	adds	r3, r1, #1
   2ba2a:	4614      	mov	r4, r2
   2ba2c:	d103      	bne.n	2ba36 <_sungetc_r+0x10>
   2ba2e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ba32:	4628      	mov	r0, r5
   2ba34:	bd38      	pop	{r3, r4, r5, pc}
   2ba36:	8993      	ldrh	r3, [r2, #12]
   2ba38:	f023 0320 	bic.w	r3, r3, #32
   2ba3c:	8193      	strh	r3, [r2, #12]
   2ba3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2ba40:	6852      	ldr	r2, [r2, #4]
   2ba42:	b2cd      	uxtb	r5, r1
   2ba44:	b18b      	cbz	r3, 2ba6a <_sungetc_r+0x44>
   2ba46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2ba48:	4293      	cmp	r3, r2
   2ba4a:	dd08      	ble.n	2ba5e <_sungetc_r+0x38>
   2ba4c:	6823      	ldr	r3, [r4, #0]
   2ba4e:	1e5a      	subs	r2, r3, #1
   2ba50:	6022      	str	r2, [r4, #0]
   2ba52:	f803 5c01 	strb.w	r5, [r3, #-1]
   2ba56:	6863      	ldr	r3, [r4, #4]
   2ba58:	3301      	adds	r3, #1
   2ba5a:	6063      	str	r3, [r4, #4]
   2ba5c:	e7e9      	b.n	2ba32 <_sungetc_r+0xc>
   2ba5e:	4621      	mov	r1, r4
   2ba60:	f000 f8e2 	bl	2bc28 <__submore>
   2ba64:	2800      	cmp	r0, #0
   2ba66:	d0f1      	beq.n	2ba4c <_sungetc_r+0x26>
   2ba68:	e7e1      	b.n	2ba2e <_sungetc_r+0x8>
   2ba6a:	6921      	ldr	r1, [r4, #16]
   2ba6c:	6823      	ldr	r3, [r4, #0]
   2ba6e:	b151      	cbz	r1, 2ba86 <_sungetc_r+0x60>
   2ba70:	4299      	cmp	r1, r3
   2ba72:	d208      	bcs.n	2ba86 <_sungetc_r+0x60>
   2ba74:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2ba78:	42a9      	cmp	r1, r5
   2ba7a:	d104      	bne.n	2ba86 <_sungetc_r+0x60>
   2ba7c:	3b01      	subs	r3, #1
   2ba7e:	3201      	adds	r2, #1
   2ba80:	6023      	str	r3, [r4, #0]
   2ba82:	6062      	str	r2, [r4, #4]
   2ba84:	e7d5      	b.n	2ba32 <_sungetc_r+0xc>
   2ba86:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2ba8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ba8e:	6363      	str	r3, [r4, #52]	; 0x34
   2ba90:	2303      	movs	r3, #3
   2ba92:	63a3      	str	r3, [r4, #56]	; 0x38
   2ba94:	4623      	mov	r3, r4
   2ba96:	f803 5f46 	strb.w	r5, [r3, #70]!
   2ba9a:	6023      	str	r3, [r4, #0]
   2ba9c:	2301      	movs	r3, #1
   2ba9e:	e7dc      	b.n	2ba5a <_sungetc_r+0x34>

0002baa0 <__ssrefill_r>:
   2baa0:	b510      	push	{r4, lr}
   2baa2:	460c      	mov	r4, r1
   2baa4:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2baa6:	b169      	cbz	r1, 2bac4 <__ssrefill_r+0x24>
   2baa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2baac:	4299      	cmp	r1, r3
   2baae:	d001      	beq.n	2bab4 <__ssrefill_r+0x14>
   2bab0:	f7f6 fb0c 	bl	220cc <_free_r>
   2bab4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2bab6:	6063      	str	r3, [r4, #4]
   2bab8:	2000      	movs	r0, #0
   2baba:	6360      	str	r0, [r4, #52]	; 0x34
   2babc:	b113      	cbz	r3, 2bac4 <__ssrefill_r+0x24>
   2babe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2bac0:	6023      	str	r3, [r4, #0]
   2bac2:	bd10      	pop	{r4, pc}
   2bac4:	6923      	ldr	r3, [r4, #16]
   2bac6:	6023      	str	r3, [r4, #0]
   2bac8:	2300      	movs	r3, #0
   2baca:	6063      	str	r3, [r4, #4]
   2bacc:	89a3      	ldrh	r3, [r4, #12]
   2bace:	f043 0320 	orr.w	r3, r3, #32
   2bad2:	81a3      	strh	r3, [r4, #12]
   2bad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bad8:	e7f3      	b.n	2bac2 <__ssrefill_r+0x22>

0002bada <_printf_common>:
   2bada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bade:	4616      	mov	r6, r2
   2bae0:	4699      	mov	r9, r3
   2bae2:	688a      	ldr	r2, [r1, #8]
   2bae4:	690b      	ldr	r3, [r1, #16]
   2bae6:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2baea:	4293      	cmp	r3, r2
   2baec:	bfb8      	it	lt
   2baee:	4613      	movlt	r3, r2
   2baf0:	6033      	str	r3, [r6, #0]
   2baf2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2baf6:	4607      	mov	r7, r0
   2baf8:	460c      	mov	r4, r1
   2bafa:	b10a      	cbz	r2, 2bb00 <_printf_common+0x26>
   2bafc:	3301      	adds	r3, #1
   2bafe:	6033      	str	r3, [r6, #0]
   2bb00:	6823      	ldr	r3, [r4, #0]
   2bb02:	0699      	lsls	r1, r3, #26
   2bb04:	bf42      	ittt	mi
   2bb06:	6833      	ldrmi	r3, [r6, #0]
   2bb08:	3302      	addmi	r3, #2
   2bb0a:	6033      	strmi	r3, [r6, #0]
   2bb0c:	6825      	ldr	r5, [r4, #0]
   2bb0e:	f015 0506 	ands.w	r5, r5, #6
   2bb12:	d106      	bne.n	2bb22 <_printf_common+0x48>
   2bb14:	f104 0a19 	add.w	sl, r4, #25
   2bb18:	68e3      	ldr	r3, [r4, #12]
   2bb1a:	6832      	ldr	r2, [r6, #0]
   2bb1c:	1a9b      	subs	r3, r3, r2
   2bb1e:	42ab      	cmp	r3, r5
   2bb20:	dc26      	bgt.n	2bb70 <_printf_common+0x96>
   2bb22:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2bb26:	1e13      	subs	r3, r2, #0
   2bb28:	6822      	ldr	r2, [r4, #0]
   2bb2a:	bf18      	it	ne
   2bb2c:	2301      	movne	r3, #1
   2bb2e:	0692      	lsls	r2, r2, #26
   2bb30:	d42b      	bmi.n	2bb8a <_printf_common+0xb0>
   2bb32:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2bb36:	4649      	mov	r1, r9
   2bb38:	4638      	mov	r0, r7
   2bb3a:	47c0      	blx	r8
   2bb3c:	3001      	adds	r0, #1
   2bb3e:	d01e      	beq.n	2bb7e <_printf_common+0xa4>
   2bb40:	6823      	ldr	r3, [r4, #0]
   2bb42:	68e5      	ldr	r5, [r4, #12]
   2bb44:	6832      	ldr	r2, [r6, #0]
   2bb46:	f003 0306 	and.w	r3, r3, #6
   2bb4a:	2b04      	cmp	r3, #4
   2bb4c:	bf08      	it	eq
   2bb4e:	1aad      	subeq	r5, r5, r2
   2bb50:	68a3      	ldr	r3, [r4, #8]
   2bb52:	6922      	ldr	r2, [r4, #16]
   2bb54:	bf0c      	ite	eq
   2bb56:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2bb5a:	2500      	movne	r5, #0
   2bb5c:	4293      	cmp	r3, r2
   2bb5e:	bfc4      	itt	gt
   2bb60:	1a9b      	subgt	r3, r3, r2
   2bb62:	18ed      	addgt	r5, r5, r3
   2bb64:	2600      	movs	r6, #0
   2bb66:	341a      	adds	r4, #26
   2bb68:	42b5      	cmp	r5, r6
   2bb6a:	d11a      	bne.n	2bba2 <_printf_common+0xc8>
   2bb6c:	2000      	movs	r0, #0
   2bb6e:	e008      	b.n	2bb82 <_printf_common+0xa8>
   2bb70:	2301      	movs	r3, #1
   2bb72:	4652      	mov	r2, sl
   2bb74:	4649      	mov	r1, r9
   2bb76:	4638      	mov	r0, r7
   2bb78:	47c0      	blx	r8
   2bb7a:	3001      	adds	r0, #1
   2bb7c:	d103      	bne.n	2bb86 <_printf_common+0xac>
   2bb7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bb82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bb86:	3501      	adds	r5, #1
   2bb88:	e7c6      	b.n	2bb18 <_printf_common+0x3e>
   2bb8a:	18e1      	adds	r1, r4, r3
   2bb8c:	1c5a      	adds	r2, r3, #1
   2bb8e:	2030      	movs	r0, #48	; 0x30
   2bb90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2bb94:	4422      	add	r2, r4
   2bb96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2bb9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2bb9e:	3302      	adds	r3, #2
   2bba0:	e7c7      	b.n	2bb32 <_printf_common+0x58>
   2bba2:	2301      	movs	r3, #1
   2bba4:	4622      	mov	r2, r4
   2bba6:	4649      	mov	r1, r9
   2bba8:	4638      	mov	r0, r7
   2bbaa:	47c0      	blx	r8
   2bbac:	3001      	adds	r0, #1
   2bbae:	d0e6      	beq.n	2bb7e <_printf_common+0xa4>
   2bbb0:	3601      	adds	r6, #1
   2bbb2:	e7d9      	b.n	2bb68 <_printf_common+0x8e>

0002bbb4 <__sccl>:
   2bbb4:	b570      	push	{r4, r5, r6, lr}
   2bbb6:	780b      	ldrb	r3, [r1, #0]
   2bbb8:	4604      	mov	r4, r0
   2bbba:	2b5e      	cmp	r3, #94	; 0x5e
   2bbbc:	bf0b      	itete	eq
   2bbbe:	784b      	ldrbeq	r3, [r1, #1]
   2bbc0:	1c48      	addne	r0, r1, #1
   2bbc2:	1c88      	addeq	r0, r1, #2
   2bbc4:	2200      	movne	r2, #0
   2bbc6:	bf08      	it	eq
   2bbc8:	2201      	moveq	r2, #1
   2bbca:	1e61      	subs	r1, r4, #1
   2bbcc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2bbd0:	f801 2f01 	strb.w	r2, [r1, #1]!
   2bbd4:	42a9      	cmp	r1, r5
   2bbd6:	d1fb      	bne.n	2bbd0 <__sccl+0x1c>
   2bbd8:	b90b      	cbnz	r3, 2bbde <__sccl+0x2a>
   2bbda:	3801      	subs	r0, #1
   2bbdc:	bd70      	pop	{r4, r5, r6, pc}
   2bbde:	f082 0101 	eor.w	r1, r2, #1
   2bbe2:	54e1      	strb	r1, [r4, r3]
   2bbe4:	1c42      	adds	r2, r0, #1
   2bbe6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   2bbea:	2d2d      	cmp	r5, #45	; 0x2d
   2bbec:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
   2bbf0:	4610      	mov	r0, r2
   2bbf2:	d006      	beq.n	2bc02 <__sccl+0x4e>
   2bbf4:	2d5d      	cmp	r5, #93	; 0x5d
   2bbf6:	d0f1      	beq.n	2bbdc <__sccl+0x28>
   2bbf8:	b90d      	cbnz	r5, 2bbfe <__sccl+0x4a>
   2bbfa:	4630      	mov	r0, r6
   2bbfc:	e7ee      	b.n	2bbdc <__sccl+0x28>
   2bbfe:	462b      	mov	r3, r5
   2bc00:	e7ef      	b.n	2bbe2 <__sccl+0x2e>
   2bc02:	7816      	ldrb	r6, [r2, #0]
   2bc04:	2e5d      	cmp	r6, #93	; 0x5d
   2bc06:	d0fa      	beq.n	2bbfe <__sccl+0x4a>
   2bc08:	42b3      	cmp	r3, r6
   2bc0a:	dcf8      	bgt.n	2bbfe <__sccl+0x4a>
   2bc0c:	4618      	mov	r0, r3
   2bc0e:	3001      	adds	r0, #1
   2bc10:	4286      	cmp	r6, r0
   2bc12:	5421      	strb	r1, [r4, r0]
   2bc14:	dcfb      	bgt.n	2bc0e <__sccl+0x5a>
   2bc16:	43d8      	mvns	r0, r3
   2bc18:	4430      	add	r0, r6
   2bc1a:	1c5d      	adds	r5, r3, #1
   2bc1c:	42b3      	cmp	r3, r6
   2bc1e:	bfa8      	it	ge
   2bc20:	2000      	movge	r0, #0
   2bc22:	182b      	adds	r3, r5, r0
   2bc24:	3202      	adds	r2, #2
   2bc26:	e7de      	b.n	2bbe6 <__sccl+0x32>

0002bc28 <__submore>:
   2bc28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bc2c:	460c      	mov	r4, r1
   2bc2e:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2bc30:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2bc34:	4299      	cmp	r1, r3
   2bc36:	d11d      	bne.n	2bc74 <__submore+0x4c>
   2bc38:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2bc3c:	f7f6 fa94 	bl	22168 <_malloc_r>
   2bc40:	b918      	cbnz	r0, 2bc4a <__submore+0x22>
   2bc42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bc46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bc4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2bc4e:	63a3      	str	r3, [r4, #56]	; 0x38
   2bc50:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2bc54:	6360      	str	r0, [r4, #52]	; 0x34
   2bc56:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   2bc5a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2bc5e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   2bc62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2bc66:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   2bc6a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2bc6e:	6020      	str	r0, [r4, #0]
   2bc70:	2000      	movs	r0, #0
   2bc72:	e7e8      	b.n	2bc46 <__submore+0x1e>
   2bc74:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2bc76:	0077      	lsls	r7, r6, #1
   2bc78:	463a      	mov	r2, r7
   2bc7a:	f000 f83a 	bl	2bcf2 <_realloc_r>
   2bc7e:	4605      	mov	r5, r0
   2bc80:	2800      	cmp	r0, #0
   2bc82:	d0de      	beq.n	2bc42 <__submore+0x1a>
   2bc84:	eb00 0806 	add.w	r8, r0, r6
   2bc88:	4601      	mov	r1, r0
   2bc8a:	4632      	mov	r2, r6
   2bc8c:	4640      	mov	r0, r8
   2bc8e:	f7ff fd90 	bl	2b7b2 <memcpy>
   2bc92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2bc96:	f8c4 8000 	str.w	r8, [r4]
   2bc9a:	e7e9      	b.n	2bc70 <__submore+0x48>

0002bc9c <__ascii_wctomb>:
   2bc9c:	4603      	mov	r3, r0
   2bc9e:	4608      	mov	r0, r1
   2bca0:	b141      	cbz	r1, 2bcb4 <__ascii_wctomb+0x18>
   2bca2:	2aff      	cmp	r2, #255	; 0xff
   2bca4:	d904      	bls.n	2bcb0 <__ascii_wctomb+0x14>
   2bca6:	228a      	movs	r2, #138	; 0x8a
   2bca8:	601a      	str	r2, [r3, #0]
   2bcaa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bcae:	4770      	bx	lr
   2bcb0:	700a      	strb	r2, [r1, #0]
   2bcb2:	2001      	movs	r0, #1
   2bcb4:	4770      	bx	lr

0002bcb6 <__env_lock>:
   2bcb6:	4770      	bx	lr

0002bcb8 <__env_unlock>:
   2bcb8:	4770      	bx	lr

0002bcba <memmove>:
   2bcba:	4288      	cmp	r0, r1
   2bcbc:	b510      	push	{r4, lr}
   2bcbe:	eb01 0402 	add.w	r4, r1, r2
   2bcc2:	d902      	bls.n	2bcca <memmove+0x10>
   2bcc4:	4284      	cmp	r4, r0
   2bcc6:	4623      	mov	r3, r4
   2bcc8:	d807      	bhi.n	2bcda <memmove+0x20>
   2bcca:	1e43      	subs	r3, r0, #1
   2bccc:	42a1      	cmp	r1, r4
   2bcce:	d008      	beq.n	2bce2 <memmove+0x28>
   2bcd0:	f811 2b01 	ldrb.w	r2, [r1], #1
   2bcd4:	f803 2f01 	strb.w	r2, [r3, #1]!
   2bcd8:	e7f8      	b.n	2bccc <memmove+0x12>
   2bcda:	4402      	add	r2, r0
   2bcdc:	4601      	mov	r1, r0
   2bcde:	428a      	cmp	r2, r1
   2bce0:	d100      	bne.n	2bce4 <memmove+0x2a>
   2bce2:	bd10      	pop	{r4, pc}
   2bce4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2bce8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2bcec:	e7f7      	b.n	2bcde <memmove+0x24>

0002bcee <__malloc_lock>:
   2bcee:	4770      	bx	lr

0002bcf0 <__malloc_unlock>:
   2bcf0:	4770      	bx	lr

0002bcf2 <_realloc_r>:
   2bcf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bcf4:	4607      	mov	r7, r0
   2bcf6:	4614      	mov	r4, r2
   2bcf8:	460e      	mov	r6, r1
   2bcfa:	b921      	cbnz	r1, 2bd06 <_realloc_r+0x14>
   2bcfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2bd00:	4611      	mov	r1, r2
   2bd02:	f7f6 ba31 	b.w	22168 <_malloc_r>
   2bd06:	b922      	cbnz	r2, 2bd12 <_realloc_r+0x20>
   2bd08:	f7f6 f9e0 	bl	220cc <_free_r>
   2bd0c:	4625      	mov	r5, r4
   2bd0e:	4628      	mov	r0, r5
   2bd10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bd12:	f000 f814 	bl	2bd3e <_malloc_usable_size_r>
   2bd16:	42a0      	cmp	r0, r4
   2bd18:	d20f      	bcs.n	2bd3a <_realloc_r+0x48>
   2bd1a:	4621      	mov	r1, r4
   2bd1c:	4638      	mov	r0, r7
   2bd1e:	f7f6 fa23 	bl	22168 <_malloc_r>
   2bd22:	4605      	mov	r5, r0
   2bd24:	2800      	cmp	r0, #0
   2bd26:	d0f2      	beq.n	2bd0e <_realloc_r+0x1c>
   2bd28:	4631      	mov	r1, r6
   2bd2a:	4622      	mov	r2, r4
   2bd2c:	f7ff fd41 	bl	2b7b2 <memcpy>
   2bd30:	4631      	mov	r1, r6
   2bd32:	4638      	mov	r0, r7
   2bd34:	f7f6 f9ca 	bl	220cc <_free_r>
   2bd38:	e7e9      	b.n	2bd0e <_realloc_r+0x1c>
   2bd3a:	4635      	mov	r5, r6
   2bd3c:	e7e7      	b.n	2bd0e <_realloc_r+0x1c>

0002bd3e <_malloc_usable_size_r>:
   2bd3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2bd42:	1f18      	subs	r0, r3, #4
   2bd44:	2b00      	cmp	r3, #0
   2bd46:	bfbc      	itt	lt
   2bd48:	580b      	ldrlt	r3, [r1, r0]
   2bd4a:	18c0      	addlt	r0, r0, r3
   2bd4c:	4770      	bx	lr
