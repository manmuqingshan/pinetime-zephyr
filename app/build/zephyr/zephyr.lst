
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	2000a058 	.word	0x2000a058
 **********************/

void _lv_gc_clear_roots(void)
{
#define LV_CLEAR_ROOT(root_type, root_name) _lv_memset_00(&LV_GC_ROOT(root_name), sizeof(LV_GC_ROOT(root_name)));
    LV_ITERATE_ROOTS(LV_CLEAR_ROOT)
   4:	00004651 	.word	0x00004651
   8:	00024323 	.word	0x00024323
   c:	00004681 	.word	0x00004681
  10:	00004681 	.word	0x00004681
  14:	00004681 	.word	0x00004681
  18:	00004681 	.word	0x00004681
	...
  2c:	000043e1 	.word	0x000043e1
  30:	00004681 	.word	0x00004681
  34:	00000000 	.word	0x00000000
  38:	00004399 	.word	0x00004399
  3c:	00023f57 	.word	0x00023f57

00000040 <_irq_vector_table>:
  40:	00004611 000157c9 00004611 00004611     .F...W...F...F..
  50:	00004611 00004611 00004611 00004611     .F...F...F...F..
  60:	00004611 00004611 00004611 00004611     .F...F...F...F..
  70:	00004611 00004611 00004611 00004611     .F...F...F...F..
  80:	00004611 00004611 00004611 00004611     .F...F...F...F..
  90:	00004611 00004611 00004611 00004611     .F...F...F...F..
  a0:	00004611 00004611 00004611 00004611     .F...F...F...F..
  b0:	00004611 00004611 00004611 00004611     .F...F...F...F..
  c0:	00004611 00004611 00004611 00004611     .F...F...F...F..
  d0:	00004611 00004611 00004611              .F...F...F..

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x2e>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_uldivmod>:
     180:	b953      	cbnz	r3, 198 <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x8>
     182:	b94a      	cbnz	r2, 198 <CONFIG_LVGL_INDEV_DEF_LONG_PRESS_TIME+0x8>
     184:	2900      	cmp	r1, #0
     186:	bf08      	it	eq
     188:	2800      	cmpeq	r0, #0
     18a:	bf1c      	itt	ne
     18c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     190:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     194:	f000 b96e 	b.w	474 <__aeabi_idiv0>
     198:	f1ad 0c08 	sub.w	ip, sp, #8
     19c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1a0:	f000 f806 	bl	1b0 <__udivmoddi4>
     1a4:	f8dd e004 	ldr.w	lr, [sp, #4]
     1a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1ac:	b004      	add	sp, #16
     1ae:	4770      	bx	lr

000001b0 <__udivmoddi4>:
     1b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1b4:	9d08      	ldr	r5, [sp, #32]
     1b6:	460e      	mov	r6, r1
     1b8:	4604      	mov	r4, r0
     1ba:	468c      	mov	ip, r1
     1bc:	2b00      	cmp	r3, #0
     1be:	f040 8081 	bne.w	2c4 <CONFIG_BT_HCI_TX_STACK_SIZE+0x44>
     1c2:	428a      	cmp	r2, r1
     1c4:	4617      	mov	r7, r2
     1c6:	d945      	bls.n	254 <CONFIG_FLASH_SIZE+0x54>
     1c8:	fab2 f282 	clz	r2, r2
     1cc:	b14a      	cbz	r2, 1e2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x22>
     1ce:	f1c2 0120 	rsb	r1, r2, #32
     1d2:	fa06 f302 	lsl.w	r3, r6, r2
     1d6:	fa20 f101 	lsr.w	r1, r0, r1
     1da:	4097      	lsls	r7, r2
     1dc:	ea41 0c03 	orr.w	ip, r1, r3
     1e0:	4094      	lsls	r4, r2
     1e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e6:	0c23      	lsrs	r3, r4, #16
     1e8:	fbbc f6fe 	udiv	r6, ip, lr
     1ec:	b2b9      	uxth	r1, r7
     1ee:	fb0e cc16 	mls	ip, lr, r6, ip
     1f2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     1f6:	fb06 f001 	mul.w	r0, r6, r1
     1fa:	4298      	cmp	r0, r3
     1fc:	d909      	bls.n	212 <CONFIG_FLASH_SIZE+0x12>
     1fe:	18fb      	adds	r3, r7, r3
     200:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     204:	f080 8115 	bcs.w	432 <CONFIG_LOG_BUFFER_SIZE+0x32>
     208:	4298      	cmp	r0, r3
     20a:	f240 8112 	bls.w	432 <CONFIG_LOG_BUFFER_SIZE+0x32>
     20e:	3e02      	subs	r6, #2
     210:	443b      	add	r3, r7
     212:	1a1b      	subs	r3, r3, r0
     214:	b2a4      	uxth	r4, r4
     216:	fbb3 f0fe 	udiv	r0, r3, lr
     21a:	fb0e 3310 	mls	r3, lr, r0, r3
     21e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     222:	fb00 f101 	mul.w	r1, r0, r1
     226:	42a1      	cmp	r1, r4
     228:	d909      	bls.n	23e <CONFIG_FLASH_SIZE+0x3e>
     22a:	193c      	adds	r4, r7, r4
     22c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     230:	f080 8101 	bcs.w	436 <CONFIG_LOG_BUFFER_SIZE+0x36>
     234:	42a1      	cmp	r1, r4
     236:	f240 80fe 	bls.w	436 <CONFIG_LOG_BUFFER_SIZE+0x36>
     23a:	3802      	subs	r0, #2
     23c:	443c      	add	r4, r7
     23e:	1a64      	subs	r4, r4, r1
     240:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     244:	2100      	movs	r1, #0
     246:	b11d      	cbz	r5, 250 <CONFIG_FLASH_SIZE+0x50>
     248:	40d4      	lsrs	r4, r2
     24a:	2300      	movs	r3, #0
     24c:	e9c5 4300 	strd	r4, r3, [r5]
     250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     254:	b902      	cbnz	r2, 258 <CONFIG_FLASH_SIZE+0x58>
     256:	deff      	udf	#255	; 0xff
     258:	fab2 f282 	clz	r2, r2
     25c:	2a00      	cmp	r2, #0
     25e:	d14f      	bne.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     260:	1bcb      	subs	r3, r1, r7
     262:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     266:	fa1f f887 	uxth.w	r8, r7
     26a:	2101      	movs	r1, #1
     26c:	fbb3 fcfe 	udiv	ip, r3, lr
     270:	0c26      	lsrs	r6, r4, #16
     272:	fb0e 331c 	mls	r3, lr, ip, r3
     276:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     27a:	fb08 f30c 	mul.w	r3, r8, ip
     27e:	42b3      	cmp	r3, r6
     280:	d907      	bls.n	292 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     282:	19be      	adds	r6, r7, r6
     284:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     288:	d202      	bcs.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     28a:	42b3      	cmp	r3, r6
     28c:	f200 80eb 	bhi.w	466 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     290:	4684      	mov	ip, r0
     292:	1af6      	subs	r6, r6, r3
     294:	b2a3      	uxth	r3, r4
     296:	fbb6 f0fe 	udiv	r0, r6, lr
     29a:	fb0e 6610 	mls	r6, lr, r0, r6
     29e:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     2a2:	fb08 f800 	mul.w	r8, r8, r0
     2a6:	45a0      	cmp	r8, r4
     2a8:	d907      	bls.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     2aa:	193c      	adds	r4, r7, r4
     2ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     2b0:	d202      	bcs.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2b2:	45a0      	cmp	r8, r4
     2b4:	f200 80d2 	bhi.w	45c <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10>
     2b8:	4618      	mov	r0, r3
     2ba:	eba4 0408 	sub.w	r4, r4, r8
     2be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     2c2:	e7c0      	b.n	246 <CONFIG_FLASH_SIZE+0x46>
     2c4:	428b      	cmp	r3, r1
     2c6:	d908      	bls.n	2da <CONFIG_BT_HCI_TX_STACK_SIZE+0x5a>
     2c8:	2d00      	cmp	r5, #0
     2ca:	f000 80af 	beq.w	42c <CONFIG_LOG_BUFFER_SIZE+0x2c>
     2ce:	2100      	movs	r1, #0
     2d0:	e9c5 0600 	strd	r0, r6, [r5]
     2d4:	4608      	mov	r0, r1
     2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     2da:	fab3 f183 	clz	r1, r3
     2de:	2900      	cmp	r1, #0
     2e0:	d149      	bne.n	376 <CONFIG_BT_DEVICE_APPEARANCE+0x35>
     2e2:	42b3      	cmp	r3, r6
     2e4:	d302      	bcc.n	2ec <CONFIG_BT_HCI_TX_STACK_SIZE+0x6c>
     2e6:	4282      	cmp	r2, r0
     2e8:	f200 80bb 	bhi.w	462 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x16>
     2ec:	1a84      	subs	r4, r0, r2
     2ee:	eb66 0303 	sbc.w	r3, r6, r3
     2f2:	2001      	movs	r0, #1
     2f4:	469c      	mov	ip, r3
     2f6:	2d00      	cmp	r5, #0
     2f8:	d0aa      	beq.n	250 <CONFIG_FLASH_SIZE+0x50>
     2fa:	e9c5 4c00 	strd	r4, ip, [r5]
     2fe:	e7a7      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     300:	f1c2 0320 	rsb	r3, r2, #32
     304:	4097      	lsls	r7, r2
     306:	40d8      	lsrs	r0, r3
     308:	4091      	lsls	r1, r2
     30a:	40de      	lsrs	r6, r3
     30c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     310:	4308      	orrs	r0, r1
     312:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     316:	fbb6 f1fe 	udiv	r1, r6, lr
     31a:	fa1f f887 	uxth.w	r8, r7
     31e:	fb0e 6611 	mls	r6, lr, r1, r6
     322:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     326:	fb01 f308 	mul.w	r3, r1, r8
     32a:	42b3      	cmp	r3, r6
     32c:	fa04 f402 	lsl.w	r4, r4, r2
     330:	d909      	bls.n	346 <CONFIG_BT_DEVICE_APPEARANCE+0x5>
     332:	19be      	adds	r6, r7, r6
     334:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     338:	f080 808e 	bcs.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     33c:	42b3      	cmp	r3, r6
     33e:	f240 808b 	bls.w	458 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xc>
     342:	3902      	subs	r1, #2
     344:	443e      	add	r6, r7
     346:	1af3      	subs	r3, r6, r3
     348:	b286      	uxth	r6, r0
     34a:	fbb3 f0fe 	udiv	r0, r3, lr
     34e:	fb0e 3310 	mls	r3, lr, r0, r3
     352:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     356:	fb00 f308 	mul.w	r3, r0, r8
     35a:	42b3      	cmp	r3, r6
     35c:	d907      	bls.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     35e:	19be      	adds	r6, r7, r6
     360:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     364:	d274      	bcs.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     366:	42b3      	cmp	r3, r6
     368:	d972      	bls.n	450 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x4>
     36a:	3802      	subs	r0, #2
     36c:	443e      	add	r6, r7
     36e:	1af3      	subs	r3, r6, r3
     370:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     374:	e77a      	b.n	26c <CONFIG_FLASH_SIZE+0x6c>
     376:	f1c1 0720 	rsb	r7, r1, #32
     37a:	fa03 f401 	lsl.w	r4, r3, r1
     37e:	fa22 f307 	lsr.w	r3, r2, r7
     382:	431c      	orrs	r4, r3
     384:	fa20 f907 	lsr.w	r9, r0, r7
     388:	fa06 f301 	lsl.w	r3, r6, r1
     38c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     390:	40fe      	lsrs	r6, r7
     392:	ea49 0903 	orr.w	r9, r9, r3
     396:	ea4f 4319 	mov.w	r3, r9, lsr #16
     39a:	fbb6 fefc 	udiv	lr, r6, ip
     39e:	fa1f f884 	uxth.w	r8, r4
     3a2:	fb0c 661e 	mls	r6, ip, lr, r6
     3a6:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     3aa:	fb0e fa08 	mul.w	sl, lr, r8
     3ae:	45b2      	cmp	sl, r6
     3b0:	fa02 f201 	lsl.w	r2, r2, r1
     3b4:	fa00 f301 	lsl.w	r3, r0, r1
     3b8:	d908      	bls.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     3ba:	19a6      	adds	r6, r4, r6
     3bc:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     3c0:	d248      	bcs.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3c2:	45b2      	cmp	sl, r6
     3c4:	d946      	bls.n	454 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x8>
     3c6:	f1ae 0e02 	sub.w	lr, lr, #2
     3ca:	4426      	add	r6, r4
     3cc:	eba6 060a 	sub.w	r6, r6, sl
     3d0:	fa1f f989 	uxth.w	r9, r9
     3d4:	fbb6 f0fc 	udiv	r0, r6, ip
     3d8:	fb0c 6610 	mls	r6, ip, r0, r6
     3dc:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     3e0:	fb00 f808 	mul.w	r8, r0, r8
     3e4:	45b0      	cmp	r8, r6
     3e6:	d907      	bls.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     3e8:	19a6      	adds	r6, r4, r6
     3ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     3ee:	d22d      	bcs.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     3f0:	45b0      	cmp	r8, r6
     3f2:	d92b      	bls.n	44c <CONFIG_BT_HCI_ECC_STACK_SIZE>
     3f4:	3802      	subs	r0, #2
     3f6:	4426      	add	r6, r4
     3f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     3fc:	eba6 0608 	sub.w	r6, r6, r8
     400:	fba0 8902 	umull	r8, r9, r0, r2
     404:	454e      	cmp	r6, r9
     406:	46c4      	mov	ip, r8
     408:	46ce      	mov	lr, r9
     40a:	d318      	bcc.n	43e <CONFIG_LOG_BUFFER_SIZE+0x3e>
     40c:	d015      	beq.n	43a <CONFIG_LOG_BUFFER_SIZE+0x3a>
     40e:	b375      	cbz	r5, 46e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x22>
     410:	ebb3 020c 	subs.w	r2, r3, ip
     414:	eb66 060e 	sbc.w	r6, r6, lr
     418:	fa06 f707 	lsl.w	r7, r6, r7
     41c:	fa22 f301 	lsr.w	r3, r2, r1
     420:	40ce      	lsrs	r6, r1
     422:	431f      	orrs	r7, r3
     424:	e9c5 7600 	strd	r7, r6, [r5]
     428:	2100      	movs	r1, #0
     42a:	e711      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     42c:	4629      	mov	r1, r5
     42e:	4628      	mov	r0, r5
     430:	e70e      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     432:	4666      	mov	r6, ip
     434:	e6ed      	b.n	212 <CONFIG_FLASH_SIZE+0x12>
     436:	4618      	mov	r0, r3
     438:	e701      	b.n	23e <CONFIG_FLASH_SIZE+0x3e>
     43a:	4543      	cmp	r3, r8
     43c:	d2e7      	bcs.n	40e <CONFIG_LOG_BUFFER_SIZE+0xe>
     43e:	ebb8 0c02 	subs.w	ip, r8, r2
     442:	eb69 0404 	sbc.w	r4, r9, r4
     446:	3801      	subs	r0, #1
     448:	46a6      	mov	lr, r4
     44a:	e7e0      	b.n	40e <CONFIG_LOG_BUFFER_SIZE+0xe>
     44c:	4660      	mov	r0, ip
     44e:	e7d3      	b.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     450:	4660      	mov	r0, ip
     452:	e78c      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     454:	4686      	mov	lr, r0
     456:	e7b9      	b.n	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     458:	4661      	mov	r1, ip
     45a:	e774      	b.n	346 <CONFIG_BT_DEVICE_APPEARANCE+0x5>
     45c:	3802      	subs	r0, #2
     45e:	443c      	add	r4, r7
     460:	e72b      	b.n	2ba <CONFIG_BT_HCI_TX_STACK_SIZE+0x3a>
     462:	4608      	mov	r0, r1
     464:	e747      	b.n	2f6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x76>
     466:	f1ac 0c02 	sub.w	ip, ip, #2
     46a:	443e      	add	r6, r7
     46c:	e711      	b.n	292 <CONFIG_BT_HCI_TX_STACK_SIZE+0x12>
     46e:	4629      	mov	r1, r5
     470:	e6ee      	b.n	250 <CONFIG_FLASH_SIZE+0x50>
     472:	bf00      	nop

00000474 <__aeabi_idiv0>:
     474:	4770      	bx	lr
     476:	bf00      	nop

00000478 <strcmp>:
     478:	f810 2b01 	ldrb.w	r2, [r0], #1
     47c:	f811 3b01 	ldrb.w	r3, [r1], #1
     480:	2a01      	cmp	r2, #1
     482:	bf28      	it	cs
     484:	429a      	cmpcs	r2, r3
     486:	d0f7      	beq.n	478 <strcmp>
     488:	1ad0      	subs	r0, r2, r3
     48a:	4770      	bx	lr

0000048c <strlen>:
     48c:	4603      	mov	r3, r0
     48e:	f813 2b01 	ldrb.w	r2, [r3], #1
     492:	2a00      	cmp	r2, #0
     494:	d1fb      	bne.n	48e <strlen+0x2>
     496:	1a18      	subs	r0, r3, r0
     498:	3801      	subs	r0, #1
     49a:	4770      	bx	lr
     49c:	0000      	movs	r0, r0
	...

000004a0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     4a4:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     4a8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     4ac:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
     4b0:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4b2:	45a0      	cmp	r8, r4
{
     4b4:	460e      	mov	r6, r1
     4b6:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     4b8:	d818      	bhi.n	4ec <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4ba:	4f1b      	ldr	r7, [pc, #108]	; (528 <ull_drift_ticks_get+0x88>)
     4bc:	a318      	add	r3, pc, #96	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4be:	e9d3 2300 	ldrd	r2, r3, [r3]
     4c2:	fbac 0107 	umull	r0, r1, ip, r7
     4c6:	f7ff fe5b 	bl	180 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4ca:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     4ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     4d2:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     4d4:	a312      	add	r3, pc, #72	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
     4da:	fba4 0107 	umull	r0, r1, r4, r7
     4de:	f7ff fe4f 	bl	180 <__aeabi_uldivmod>
     4e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     4e6:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     4ec:	4c0e      	ldr	r4, [pc, #56]	; (528 <ull_drift_ticks_get+0x88>)
     4ee:	a30c      	add	r3, pc, #48	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
     4f4:	fba8 0104 	umull	r0, r1, r8, r4
     4f8:	f7ff fe42 	bl	180 <__aeabi_uldivmod>
     4fc:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     500:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
     504:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     506:	fba0 0104 	umull	r0, r1, r0, r4
     50a:	a305      	add	r3, pc, #20	; (adr r3, 520 <ull_drift_ticks_get+0x80>)
     50c:	e9d3 2300 	ldrd	r2, r3, [r3]
     510:	f7ff fe36 	bl	180 <__aeabi_uldivmod>
     514:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     518:	6028      	str	r0, [r5, #0]
}
     51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     51e:	bf00      	nop
     520:	1afd498d 	.word	0x1afd498d
     524:	00000007 	.word	0x00000007
     528:	3b9aca00 	.word	0x3b9aca00
     52c:	00000000 	.word	0x00000000

00000530 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     534:	4cac      	ldr	r4, [pc, #688]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     536:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
     53a:	b08f      	sub	sp, #60	; 0x3c
     53c:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     540:	2800      	cmp	r0, #0
     542:	f000 815b 	beq.w	7fc <CONFIG_BT_COMPANY_ID+0x20b>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     546:	bbb6      	cbnz	r6, 5b6 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     548:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     54c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
	ull_filter_adv_update(lll->filter_policy);
     550:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     554:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     558:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     55c:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
     560:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     562:	f8d2 803c 	ldr.w	r8, [r2, #60]	; 0x3c
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     566:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
     56a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
     56e:	f014 fbdb 	bl	14d28 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     572:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
     576:	0742      	lsls	r2, r0, #29
     578:	f100 8116 	bmi.w	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
	if (pdu_adv_to_update) {
     57c:	f1b9 0f00 	cmp.w	r9, #0
     580:	d011      	beq.n	5a6 <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     582:	4899      	ldr	r0, [pc, #612]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     584:	4649      	mov	r1, r9
     586:	f00f fcd9 	bl	ff3c <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
     58a:	f899 3000 	ldrb.w	r3, [r9]
     58e:	065b      	lsls	r3, r3, #25
     590:	d505      	bpl.n	59e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     592:	2106      	movs	r1, #6
     594:	f00a ffd2 	bl	b53c <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     598:	2800      	cmp	r0, #0
     59a:	f000 8240 	beq.w	a1e <CONFIG_BT_RX_STACK_SIZE+0x186>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     59e:	4892      	ldr	r0, [pc, #584]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     5a0:	4641      	mov	r1, r8
     5a2:	f00f fccb 	bl	ff3c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     5a6:	f899 3000 	ldrb.w	r3, [r9]
     5aa:	f013 0f0e 	tst.w	r3, #14
     5ae:	f040 80d1 	bne.w	754 <CONFIG_BT_COMPANY_ID+0x163>
		if (lll->conn) {
     5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
     5b4:	b123      	cbz	r3, 5c0 <ll_adv_enable+0x90>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     5b6:	260c      	movs	r6, #12
}
     5b8:	4630      	mov	r0, r6
     5ba:	b00f      	add	sp, #60	; 0x3c
     5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     5c0:	f00e fe58 	bl	f274 <ll_rx_link_alloc>
		if (!link) {
     5c4:	4682      	mov	sl, r0
     5c6:	2800      	cmp	r0, #0
     5c8:	f000 8246 	beq.w	a58 <CONFIG_BT_RX_STACK_SIZE+0x1c0>
		node_rx = ll_rx_alloc();
     5cc:	f00e fe5e 	bl	f28c <ll_rx_alloc>
		if (!node_rx) {
     5d0:	4683      	mov	fp, r0
     5d2:	2800      	cmp	r0, #0
     5d4:	f000 8259 	beq.w	a8a <CONFIG_BT_RX_STACK_SIZE+0x1f2>
		conn = ll_conn_acquire();
     5d8:	f010 f9be 	bl	10958 <ll_conn_acquire>
		if (!conn) {
     5dc:	4605      	mov	r5, r0
     5de:	2800      	cmp	r0, #0
     5e0:	f000 8250 	beq.w	a84 <CONFIG_BT_RX_STACK_SIZE+0x1ec>
		conn_lll->handle = 0xFFFF;
     5e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     5e8:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     5ea:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     5ec:	f105 031c 	add.w	r3, r5, #28
     5f0:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     5f2:	2800      	cmp	r0, #0
     5f4:	f000 822c 	beq.w	a50 <CONFIG_BT_RX_STACK_SIZE+0x1b8>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     5f8:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     5fc:	f105 0168 	add.w	r1, r5, #104	; 0x68
     600:	f00a ffa8 	bl	b554 <memq_init>
			conn_lll->phy_tx = PHY_1M;
     604:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
     608:	4878      	ldr	r0, [pc, #480]	; (7ec <CONFIG_BT_COMPANY_ID+0x1fb>)
		conn_lll->data_chan_sel = 0;
     60a:	f895 103d 	ldrb.w	r1, [r5, #61]	; 0x3d
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     60e:	f895 7132 	ldrb.w	r7, [r5, #306]	; 0x132
		conn_lll->slave.latency_enabled = 0;
     612:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     616:	4b76      	ldr	r3, [pc, #472]	; (7f0 <CONFIG_BT_COMPANY_ID+0x1ff>)
     618:	662b      	str	r3, [r5, #96]	; 0x60
			conn_lll->phy_tx = PHY_1M;
     61a:	4002      	ands	r2, r0
     61c:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn_lll->sn = 0;
     620:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_terminate.node_rx.hdr.link = link;
     624:	f8c5 a13c 	str.w	sl, [r5, #316]	; 0x13c
			conn_lll->phy_tx = PHY_1M;
     628:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     62c:	f001 013f 	and.w	r1, r1, #63	; 0x3f
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     630:	f027 0e03 	bic.w	lr, r7, #3
		conn_lll->data_chan_sel = 0;
     634:	f061 017f 	orn	r1, r1, #127	; 0x7f
		conn_lll->data_chan_use = 0;
     638:	2700      	movs	r7, #0
			conn_lll->phy_tx = PHY_1M;
     63a:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     63e:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->sn = 0;
     642:	f020 001f 	bic.w	r0, r0, #31
		conn_lll->data_chan_sel = 0;
     646:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
		conn_lll->slave.latency_enabled = 0;
     64a:	f367 0c00 	bfi	ip, r7, #0, #1
		conn->connect_expire = 6;
     64e:	2106      	movs	r1, #6
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     650:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->llcp_feature.features_conn = LL_FEAT;
     652:	4a68      	ldr	r2, [pc, #416]	; (7f4 <CONFIG_BT_COMPANY_ID+0x203>)
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     654:	f885 e132 	strb.w	lr, [r5, #306]	; 0x132
		conn_lll->slave.latency_enabled = 0;
     658:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->sn = 0;
     65c:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_feature.features_conn = LL_FEAT;
     660:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
		conn_lll->slave.window_widening_event_us = 0;
     664:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
     668:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
     66c:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     66e:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     670:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     672:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     676:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_rx = NULL;
     67a:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     67e:	f8a5 7110 	strh.w	r7, [r5, #272]	; 0x110
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     682:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_feature.features_peer = 0;
     686:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     68a:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_terminate.reason_peer = 0;
     68e:	f885 713b 	strb.w	r7, [r5, #315]	; 0x13b
		conn_lll->link_tx_free = NULL;
     692:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
     694:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     698:	f8a5 715c 	strh.w	r7, [r5, #348]	; 0x15c
		conn->connect_expire = 6;
     69c:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6a0:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
		conn->llcp_conn_param.disabled = 0;
     6a4:	f895 c17e 	ldrb.w	ip, [r5, #382]	; 0x17e
		conn->llcp_length.disabled = 0U;
     6a8:	f895 01a6 	ldrb.w	r0, [r5, #422]	; 0x1a6
		conn->common.fex_valid = 0;
     6ac:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
		conn->llcp_conn_param.req = 0;
     6b0:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		conn->llcp_conn_param.disabled = 0;
     6b4:	f367 1c04 	bfi	ip, r7, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6b8:	f021 0107 	bic.w	r1, r1, #7
		conn->common.fex_valid = 0;
     6bc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
		conn->llcp_length.disabled = 0U;
     6c0:	f367 00c3 	bfi	r0, r7, #3, #1
		conn->llcp_conn_param.disabled = 0;
     6c4:	f885 c17e 	strb.w	ip, [r5, #382]	; 0x17e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     6c8:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
		conn->common.fex_valid = 0;
     6cc:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
		conn->slave.ticks_to_offset = 0;
     6d0:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     6d4:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
     6d8:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     6dc:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.cache.tx_octets = 0U;
     6e0:	f8a5 71b0 	strh.w	r7, [r5, #432]	; 0x1b0
		conn->llcp_length.disabled = 0U;
     6e4:	f885 01a6 	strb.w	r0, [r5, #422]	; 0x1a6
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     6e8:	f010 fc66 	bl	10fb8 <ull_conn_default_tx_octets_get>
     6ec:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     6f0:	f010 fc68 	bl	10fc4 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     6f4:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
     6f8:	4a3f      	ldr	r2, [pc, #252]	; (7f8 <CONFIG_BT_COMPANY_ID+0x207>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     6fa:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     6fe:	400a      	ands	r2, r1
     700:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     704:	f010 fc64 	bl	10fd0 <ull_conn_default_phy_tx_get>
     708:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
     70c:	f360 0202 	bfi	r2, r0, #0, #3
     710:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     714:	f010 fc62 	bl	10fdc <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     718:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		lll->conn = conn_lll;
     71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     71e:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     720:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     724:	f895 3020 	ldrb.w	r3, [r5, #32]
		conn->tx_data = conn->tx_data_last = 0;
     728:	f8c5 71cc 	str.w	r7, [r5, #460]	; 0x1cc
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     72c:	f360 02c5 	bfi	r2, r0, #3, #3
     730:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     734:	e9c5 7771 	strd	r7, r7, [r5, #452]	; 0x1c4
     738:	e9c5 776f 	strd	r7, r7, [r5, #444]	; 0x1bc
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     73c:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->parent = parent;
     740:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     742:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
	hdr->is_stop = 0U;
     746:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
     74a:	f015 fc5d 	bl	16008 <lll_clock_wait>
		if (err) {
     74e:	2800      	cmp	r0, #0
     750:	f040 8167 	bne.w	a22 <CONFIG_BT_RX_STACK_SIZE+0x18a>
	uint8_t ch_map = lll->chan_map;
     754:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     758:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     75a:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     75e:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     760:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     764:	f00b f86e 	bl	b844 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     768:	b390      	cbz	r0, 7d0 <CONFIG_BT_COMPANY_ID+0x1df>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     76a:	f899 3000 	ldrb.w	r3, [r9]
     76e:	f003 030f 	and.w	r3, r3, #15
     772:	2b02      	cmp	r3, #2
     774:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     778:	f000 809e 	beq.w	8b8 <CONFIG_BT_RX_STACK_SIZE+0x20>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     77c:	2b01      	cmp	r3, #1
     77e:	f000 8154 	beq.w	a2a <CONFIG_BT_RX_STACK_SIZE+0x192>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     782:	f898 0001 	ldrb.w	r0, [r8, #1]
     786:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     788:	00c0      	lsls	r0, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     78a:	2b00      	cmp	r3, #0
     78c:	f040 813f 	bne.w	a0e <CONFIG_BT_RX_STACK_SIZE+0x176>
				adv_size += pdu_adv->len;
     790:	f899 3001 	ldrb.w	r3, [r9, #1]
     794:	3310      	adds	r3, #16
     796:	00db      	lsls	r3, r3, #3
     798:	f503 714d 	add.w	r1, r3, #820	; 0x334
     79c:	4408      	add	r0, r1
     79e:	f503 739a 	add.w	r3, r3, #308	; 0x134
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     7a2:	fb03 0002 	mla	r0, r3, r2, r0
     7a6:	e092      	b.n	8ce <CONFIG_BT_RX_STACK_SIZE+0x36>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     7a8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     7ac:	4632      	mov	r2, r6
     7ae:	f104 014f 	add.w	r1, r4, #79	; 0x4f
     7b2:	f014 fc29 	bl	15008 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     7b6:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     7b8:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
     7bc:	f43f aede 	beq.w	57c <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
     7c0:	4630      	mov	r0, r6
     7c2:	f014 facb 	bl	14d5c <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
     7c6:	f1b9 0f00 	cmp.w	r9, #0
     7ca:	f47f aeda 	bne.w	582 <ll_adv_enable+0x52>
     7ce:	e6ea      	b.n	5a6 <ll_adv_enable+0x76>
	if (adv->lll.conn) {
     7d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     7d2:	2b00      	cmp	r3, #0
     7d4:	f43f aeef 	beq.w	5b6 <ll_adv_enable+0x86>
		conn_release(adv);
     7d8:	f00f f94c 	bl	fa74 <conn_release.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
     7dc:	260c      	movs	r6, #12
}
     7de:	4630      	mov	r0, r6
     7e0:	b00f      	add	sp, #60	; 0x3c
     7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7e6:	bf00      	nop
     7e8:	200032b0 	.word	0x200032b0
     7ec:	fffff880 	.word	0xfffff880
     7f0:	01480148 	.word	0x01480148
     7f4:	0001417f 	.word	0x0001417f
     7f8:	f6ff0000 	.word	0xf6ff0000
	if (!adv || !adv->is_enabled) {
     7fc:	2e00      	cmp	r6, #0
     7fe:	f43f aeda 	beq.w	5b6 <ll_adv_enable+0x86>
	mark = ull_disable_mark(adv);
     802:	4620      	mov	r0, r4
     804:	f00e fdec 	bl	f3e0 <ull_disable_mark>
	LL_ASSERT(mark == adv);
     808:	4284      	cmp	r4, r0
     80a:	d00c      	beq.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
     80c:	4aa8      	ldr	r2, [pc, #672]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     80e:	49a9      	ldr	r1, [pc, #676]	; (ab4 <CONFIG_BT_RX_STACK_SIZE+0x21c>)
     810:	48a9      	ldr	r0, [pc, #676]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     812:	f44f 63f3 	mov.w	r3, #1944	; 0x798
     816:	f022 faca 	bl	22dae <printk>
     81a:	4040      	eors	r0, r0
     81c:	f380 8811 	msr	BASEPRI, r0
     820:	f04f 0003 	mov.w	r0, #3
     824:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     826:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     82a:	07d9      	lsls	r1, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     82c:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     82e:	d50e      	bpl.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
		ret_cb = TICKER_STATUS_BUSY;
     830:	2202      	movs	r2, #2
     832:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     834:	2103      	movs	r1, #3
     836:	4ba1      	ldr	r3, [pc, #644]	; (abc <CONFIG_BT_RX_STACK_SIZE+0x224>)
     838:	9500      	str	r5, [sp, #0]
     83a:	2201      	movs	r2, #1
     83c:	2000      	movs	r0, #0
     83e:	f00c f9e9 	bl	cc14 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     842:	4629      	mov	r1, r5
     844:	f00e fda4 	bl	f390 <ull_ticker_status_take>
		if (ret) {
     848:	2800      	cmp	r0, #0
     84a:	f040 8123 	bne.w	a94 <CONFIG_BT_RX_STACK_SIZE+0x1fc>
	ret_cb = TICKER_STATUS_BUSY;
     84e:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     850:	2103      	movs	r1, #3
     852:	4b9a      	ldr	r3, [pc, #616]	; (abc <CONFIG_BT_RX_STACK_SIZE+0x224>)
     854:	9500      	str	r5, [sp, #0]
     856:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     858:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     85a:	f00c f9db 	bl	cc14 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     85e:	4629      	mov	r1, r5
     860:	f00e fd96 	bl	f390 <ull_ticker_status_take>
	if (ret) {
     864:	2800      	cmp	r0, #0
     866:	f040 80f9 	bne.w	a5c <CONFIG_BT_RX_STACK_SIZE+0x1c4>
	}

	ret = ull_disable(&adv->lll);
     86a:	4895      	ldr	r0, [pc, #596]	; (ac0 <CONFIG_BT_RX_STACK_SIZE+0x228>)
     86c:	f00e fdf4 	bl	f458 <ull_disable>
	LL_ASSERT(!ret);
     870:	2800      	cmp	r0, #0
     872:	f040 80df 	bne.w	a34 <CONFIG_BT_RX_STACK_SIZE+0x19c>

	mark = ull_disable_unmark(adv);
     876:	4893      	ldr	r0, [pc, #588]	; (ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>)
     878:	f00e fdbe 	bl	f3f8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     87c:	4284      	cmp	r4, r0
     87e:	d00c      	beq.n	89a <CONFIG_BT_RX_STACK_SIZE+0x2>
     880:	4a8b      	ldr	r2, [pc, #556]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     882:	498c      	ldr	r1, [pc, #560]	; (ab4 <CONFIG_BT_RX_STACK_SIZE+0x21c>)
     884:	488c      	ldr	r0, [pc, #560]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     886:	f240 73ba 	movw	r3, #1978	; 0x7ba
     88a:	f022 fa90 	bl	22dae <printk>
     88e:	4040      	eors	r0, r0
     890:	f380 8811 	msr	BASEPRI, r0
     894:	f04f 0003 	mov.w	r0, #3
     898:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     89a:	6a63      	ldr	r3, [r4, #36]	; 0x24
     89c:	b10b      	cbz	r3, 8a2 <CONFIG_BT_RX_STACK_SIZE+0xa>
		conn_release(adv);
     89e:	f00f f8e9 	bl	fa74 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     8a2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     8a6:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
     8a8:	f36f 0300 	bfc	r3, #0, #1
}
     8ac:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
     8ae:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     8b2:	b00f      	add	sp, #60	; 0x3c
     8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			adv_size += pdu_adv->len;
     8b8:	f899 3001 	ldrb.w	r3, [r9, #1]
     8bc:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     8be:	00db      	lsls	r3, r3, #3
     8c0:	fb00 f003 	mul.w	r0, r0, r3
     8c4:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     8c8:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     8ca:	fb03 0002 	mla	r0, r3, r2, r0
     8ce:	f894 7020 	ldrb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8d2:	4a7d      	ldr	r2, [pc, #500]	; (ac8 <CONFIG_BT_RX_STACK_SIZE+0x230>)
	hdr->parent = parent;
     8d4:	61e4      	str	r4, [r4, #28]
     8d6:	2500      	movs	r5, #0
	adv->evt.ticks_xtal_to_start =
     8d8:	2331      	movs	r3, #49	; 0x31
	hdr->is_stop = 0U;
     8da:	f365 0700 	bfi	r7, r5, #0, #1
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8de:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     8e2:	6023      	str	r3, [r4, #0]
     8e4:	f884 7020 	strb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8e8:	a36f      	add	r3, pc, #444	; (adr r3, aa8 <CONFIG_BT_RX_STACK_SIZE+0x210>)
     8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
     8ee:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     8f2:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8f6:	f7ff fc43 	bl	180 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     8fa:	f8b4 804c 	ldrh.w	r8, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     8fe:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     900:	f00c f9ce 	bl	cca0 <ticker_ticks_now_get>
     904:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     906:	f1b8 0f00 	cmp.w	r8, #0
     90a:	d108      	bne.n	91e <CONFIG_BT_RX_STACK_SIZE+0x86>
     90c:	f899 5000 	ldrb.w	r5, [r9]
     910:	f005 050f 	and.w	r5, r5, #15
     914:	f1a5 0501 	sub.w	r5, r5, #1
     918:	fab5 f585 	clz	r5, r5
     91c:	096d      	lsrs	r5, r5, #5
     91e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     922:	68e3      	ldr	r3, [r4, #12]
     924:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
     928:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     92c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     930:	d03d      	beq.n	9ae <CONFIG_BT_RX_STACK_SIZE+0x116>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     932:	f8df 9188 	ldr.w	r9, [pc, #392]	; abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     936:	4965      	ldr	r1, [pc, #404]	; (acc <CONFIG_BT_RX_STACK_SIZE+0x234>)
     938:	9304      	str	r3, [sp, #16]
     93a:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     93c:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     93e:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     942:	9301      	str	r3, [sp, #4]
     944:	9105      	str	r1, [sp, #20]
     946:	e9cd 9807 	strd	r9, r8, [sp, #28]
     94a:	2103      	movs	r1, #3
     94c:	e9cd 0002 	strd	r0, r0, [sp, #8]
     950:	9406      	str	r4, [sp, #24]
     952:	462a      	mov	r2, r5
     954:	9000      	str	r0, [sp, #0]
     956:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
     958:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     95a:	f00c f8d3 	bl	cb04 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     95e:	4641      	mov	r1, r8
     960:	f00e fd16 	bl	f390 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     964:	2800      	cmp	r0, #0
     966:	f47f af33 	bne.w	7d0 <CONFIG_BT_COMPANY_ID+0x1df>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     96a:	4959      	ldr	r1, [pc, #356]	; (ad0 <CONFIG_BT_RX_STACK_SIZE+0x238>)
     96c:	9105      	str	r1, [sp, #20]
     96e:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     972:	9200      	str	r2, [sp, #0]
     974:	e9cd 9807 	strd	r9, r8, [sp, #28]
     978:	e9cd 0003 	strd	r0, r0, [sp, #12]
     97c:	e9cd 0001 	strd	r0, r0, [sp, #4]
     980:	9406      	str	r4, [sp, #24]
     982:	463b      	mov	r3, r7
     984:	2201      	movs	r2, #1
     986:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     988:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     98a:	f00c f8bb 	bl	cb04 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
     98e:	4641      	mov	r1, r8
     990:	f00e fcfe 	bl	f390 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     994:	2800      	cmp	r0, #0
     996:	f47f af1b 	bne.w	7d0 <CONFIG_BT_COMPANY_ID+0x1df>
	adv->is_enabled = 1;
     99a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
}
     99e:	4630      	mov	r0, r6
	adv->is_enabled = 1;
     9a0:	f043 0301 	orr.w	r3, r3, #1
     9a4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
     9a8:	b00f      	add	sp, #60	; 0x3c
     9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9ae:	4849      	ldr	r0, [pc, #292]	; (ad4 <CONFIG_BT_RX_STACK_SIZE+0x23c>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
     9b0:	4a49      	ldr	r2, [pc, #292]	; (ad8 <CONFIG_BT_RX_STACK_SIZE+0x240>)
		ret = ticker_start_ext(
     9b2:	f8df e108 	ldr.w	lr, [pc, #264]	; abc <CONFIG_BT_RX_STACK_SIZE+0x224>
     9b6:	f8df c114 	ldr.w	ip, [pc, #276]	; acc <CONFIG_BT_RX_STACK_SIZE+0x234>
     9ba:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9bc:	fba8 0100 	umull	r0, r1, r8, r0
     9c0:	f04f 0991 	mov.w	r9, #145	; 0x91
     9c4:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     9c8:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     9cc:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
     9d0:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     9d4:	9304      	str	r3, [sp, #16]
     9d6:	9209      	str	r2, [sp, #36]	; 0x24
     9d8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9dc:	a332      	add	r3, pc, #200	; (adr r3, aa8 <CONFIG_BT_RX_STACK_SIZE+0x210>)
     9de:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     9e2:	f64f 7aff 	movw	sl, #65535	; 0xffff
     9e6:	e9cd e807 	strd	lr, r8, [sp, #28]
     9ea:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     9ec:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     9f0:	f8cd c014 	str.w	ip, [sp, #20]
     9f4:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     9f8:	f7ff fbc2 	bl	180 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     9fc:	464a      	mov	r2, r9
     9fe:	e9cd 5000 	strd	r5, r0, [sp]
     a02:	463b      	mov	r3, r7
     a04:	4628      	mov	r0, r5
     a06:	2103      	movs	r1, #3
     a08:	f00c f826 	bl	ca58 <ticker_start_ext>
     a0c:	e7bf      	b.n	98e <CONFIG_BT_RX_STACK_SIZE+0xf6>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     a0e:	2b06      	cmp	r3, #6
     a10:	f43f aebe 	beq.w	790 <CONFIG_BT_COMPANY_ID+0x19f>
     a14:	f44f 73da 	mov.w	r3, #436	; 0x1b4
     a18:	f44f 701b 	mov.w	r0, #620	; 0x26c
     a1c:	e6c1      	b.n	7a2 <CONFIG_BT_COMPANY_ID+0x1b1>
			return BT_HCI_ERR_INVALID_PARAM;
     a1e:	2612      	movs	r6, #18
     a20:	e5ca      	b.n	5b8 <ll_adv_enable+0x88>
			conn_release(adv);
     a22:	f00f f827 	bl	fa74 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     a26:	2603      	movs	r6, #3
     a28:	e5c6      	b.n	5b8 <ll_adv_enable+0x88>
     a2a:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
     a2e:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
     a32:	e6b6      	b.n	7a2 <CONFIG_BT_COMPANY_ID+0x1b1>
	LL_ASSERT(!ret);
     a34:	4a1e      	ldr	r2, [pc, #120]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     a36:	4929      	ldr	r1, [pc, #164]	; (adc <CONFIG_BT_RX_STACK_SIZE+0x244>)
     a38:	481f      	ldr	r0, [pc, #124]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     a3a:	f240 73b7 	movw	r3, #1975	; 0x7b7
     a3e:	f022 f9b6 	bl	22dae <printk>
     a42:	4040      	eors	r0, r0
     a44:	f380 8811 	msr	BASEPRI, r0
     a48:	f04f 0003 	mov.w	r0, #3
     a4c:	df02      	svc	2
     a4e:	e712      	b.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     a50:	f105 0070 	add.w	r0, r5, #112	; 0x70
     a54:	67a8      	str	r0, [r5, #120]	; 0x78
     a56:	e5cf      	b.n	5f8 <CONFIG_BT_COMPANY_ID+0x7>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     a58:	2607      	movs	r6, #7
     a5a:	e5ad      	b.n	5b8 <ll_adv_enable+0x88>
		mark = ull_disable_unmark(adv);
     a5c:	4819      	ldr	r0, [pc, #100]	; (ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>)
     a5e:	f00e fccb 	bl	f3f8 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
     a62:	4284      	cmp	r4, r0
     a64:	f43f ada7 	beq.w	5b6 <ll_adv_enable+0x86>
     a68:	f240 73b1 	movw	r3, #1969	; 0x7b1
     a6c:	4a10      	ldr	r2, [pc, #64]	; (ab0 <CONFIG_BT_RX_STACK_SIZE+0x218>)
     a6e:	4911      	ldr	r1, [pc, #68]	; (ab4 <CONFIG_BT_RX_STACK_SIZE+0x21c>)
     a70:	4811      	ldr	r0, [pc, #68]	; (ab8 <CONFIG_BT_RX_STACK_SIZE+0x220>)
     a72:	f022 f99c 	bl	22dae <printk>
     a76:	4040      	eors	r0, r0
     a78:	f380 8811 	msr	BASEPRI, r0
     a7c:	f04f 0003 	mov.w	r0, #3
     a80:	df02      	svc	2
     a82:	e598      	b.n	5b6 <ll_adv_enable+0x86>
			ll_rx_release(node_rx);
     a84:	4658      	mov	r0, fp
     a86:	f00e fc07 	bl	f298 <ll_rx_release>
			ll_rx_link_release(link);
     a8a:	4650      	mov	r0, sl
     a8c:	f00e fbf8 	bl	f280 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     a90:	2607      	movs	r6, #7
     a92:	e591      	b.n	5b8 <ll_adv_enable+0x88>
			mark = ull_disable_unmark(adv);
     a94:	480b      	ldr	r0, [pc, #44]	; (ac4 <CONFIG_BT_RX_STACK_SIZE+0x22c>)
     a96:	f00e fcaf 	bl	f3f8 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
     a9a:	4284      	cmp	r4, r0
     a9c:	f43f ad8b 	beq.w	5b6 <ll_adv_enable+0x86>
     aa0:	f240 73a3 	movw	r3, #1955	; 0x7a3
     aa4:	e7e2      	b.n	a6c <CONFIG_BT_RX_STACK_SIZE+0x1d4>
     aa6:	bf00      	nop
     aa8:	1afd498d 	.word	0x1afd498d
     aac:	00000007 	.word	0x00000007
     ab0:	0002c990 	.word	0x0002c990
     ab4:	0002ca80 	.word	0x0002ca80
     ab8:	0002c5e0 	.word	0x0002c5e0
     abc:	0000e2a1 	.word	0x0000e2a1
     ac0:	200032cc 	.word	0x200032cc
     ac4:	200032b0 	.word	0x200032b0
     ac8:	3b9aca00 	.word	0x3b9aca00
     acc:	0000f74d 	.word	0x0000f74d
     ad0:	0000f9ed 	.word	0x0000f9ed
     ad4:	84e72a00 	.word	0x84e72a00
     ad8:	20003308 	.word	0x20003308
     adc:	0002c86c 	.word	0x0002c86c

00000ae0 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
     ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
     ae4:	4dc8      	ldr	r5, [pc, #800]	; (e08 <event_conn_upd_prep+0x328>)

	/* set mutex */
	if (!conn_upd) {
     ae6:	682b      	ldr	r3, [r5, #0]
{
     ae8:	b08b      	sub	sp, #44	; 0x2c
     aea:	4604      	mov	r4, r0
     aec:	460f      	mov	r7, r1
     aee:	4691      	mov	r9, r2
	if (!conn_upd) {
     af0:	2b00      	cmp	r3, #0
     af2:	f000 821b 	beq.w	f2c <event_conn_upd_prep+0x44c>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     af6:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
     af8:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     afa:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     afe:	4416      	add	r6, r2
     b00:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     b02:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     b06:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     b08:	f040 81a7 	bne.w	e5a <event_conn_upd_prep+0x37a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     b0c:	f8b4 80ec 	ldrh.w	r8, [r4, #236]	; 0xec
     b10:	eba6 0208 	sub.w	r2, r6, r8
     b14:	fa1f fa82 	uxth.w	sl, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     b18:	0412      	lsls	r2, r2, #16
     b1a:	f100 8202 	bmi.w	f22 <event_conn_upd_prep+0x442>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
     b1e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
     b22:	2a00      	cmp	r2, #0
     b24:	f2c0 813d 	blt.w	da2 <event_conn_upd_prep+0x2c2>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
     b28:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
     b2c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     b30:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
     b34:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
		conn->llcp_cu.ack = conn->llcp_cu.req;
     b38:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
     b3c:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     b40:	4293      	cmp	r3, r2
     b42:	d006      	beq.n	b52 <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     b44:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     b48:	f003 0307 	and.w	r3, r3, #7
     b4c:	2b05      	cmp	r3, #5
     b4e:	f000 8246 	beq.w	fde <event_conn_upd_prep+0x4fe>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
     b52:	682b      	ldr	r3, [r5, #0]
     b54:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
     b56:	bf04      	itt	eq
     b58:	2300      	moveq	r3, #0
     b5a:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     b5c:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
     b60:	2d00      	cmp	r5, #0
     b62:	f000 816b 	beq.w	e3c <event_conn_upd_prep+0x35c>
     b66:	6828      	ldr	r0, [r5, #0]
     b68:	2800      	cmp	r0, #0
     b6a:	f000 8167 	beq.w	e3c <event_conn_upd_prep+0x35c>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     b6e:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
     b72:	f8b4 c02e 	ldrh.w	ip, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
     b76:	6842      	ldr	r2, [r0, #4]
     b78:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((conn->llcp_cu.interval != lll->interval) ||
     b7c:	4563      	cmp	r3, ip
     b7e:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
     b82:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
     b86:	f000 8120 	beq.w	dca <event_conn_upd_prep+0x2ea>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     b8a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
     b8e:	f8a5 c006 	strh.w	ip, [r5, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     b92:	f04f 0e15 	mov.w	lr, #21

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
     b96:	f04f 0c00 	mov.w	ip, #0
			cu->interval = conn->llcp_cu.interval;
     b9a:	83eb      	strh	r3, [r5, #30]
			cu->latency = conn->llcp_cu.latency;
     b9c:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     b9e:	8469      	strh	r1, [r5, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     ba0:	f885 e004 	strb.w	lr, [r5, #4]
			cu->status = 0x00;
     ba4:	f885 c01c 	strb.w	ip, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     ba8:	4629      	mov	r1, r5
     baa:	f00e fb7b 	bl	f2a4 <ll_rx_put>
		ll_rx_sched();
     bae:	f00e fb83 	bl	f2b8 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
     bb2:	6823      	ldr	r3, [r4, #0]
     bb4:	2b00      	cmp	r3, #0
     bb6:	f2c0 80fc 	blt.w	db2 <event_conn_upd_prep+0x2d2>
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     bba:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
     bbc:	f8b4 5114 	ldrh.w	r5, [r4, #276]	; 0x114
		conn_interval_old = instant_latency * lll->interval;
     bc0:	fb10 f00a 	smulbb	r0, r0, sl
     bc4:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
     bc6:	fbb0 f3f5 	udiv	r3, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
     bca:	fb15 f203 	smulbb	r2, r5, r3
     bce:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
     bd0:	4290      	cmp	r0, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
     bd2:	fa1f fb83 	uxth.w	fp, r3
		if (conn_interval_new > conn_interval_old) {
     bd6:	f0c0 80d3 	bcc.w	d80 <event_conn_upd_prep+0x2a0>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
				(conn_interval_new - conn_interval_old) *
				CONN_INT_UNIT_US);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     bda:	fb05 0313 	mls	r3, r5, r3, r0
     bde:	f240 42e2 	movw	r2, #1250	; 0x4e2
     be2:	488a      	ldr	r0, [pc, #552]	; (e0c <event_conn_upd_prep+0x32c>)
     be4:	b29b      	uxth	r3, r3
     be6:	fb02 f303 	mul.w	r3, r2, r3
     bea:	fba3 0100 	umull	r0, r1, r3, r0
     bee:	a384      	add	r3, pc, #528	; (adr r3, e00 <event_conn_upd_prep+0x320>)
     bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
     bf4:	f7ff fac4 	bl	180 <__aeabi_uldivmod>
     bf8:	eba9 0900 	sub.w	r9, r9, r0
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
     bfc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     bfe:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
     c02:	eba8 0606 	sub.w	r6, r8, r6
     c06:	445e      	add	r6, fp
		lll->latency_prepare += lazy;
     c08:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
     c0a:	4437      	add	r7, r6
		conn_interval_us = conn->llcp_cu.interval *
     c0c:	f240 48e2 	movw	r8, #1250	; 0x4e2
		} else if (lll->role) {
     c10:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
     c12:	8667      	strh	r7, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval *
     c14:	fb08 f505 	mul.w	r5, r8, r5
		} else if (lll->role) {
     c18:	f2c0 818a 	blt.w	f30 <event_conn_upd_prep+0x450>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
     c1c:	4a7c      	ldr	r2, [pc, #496]	; (e10 <event_conn_upd_prep+0x330>)
     c1e:	497d      	ldr	r1, [pc, #500]	; (e14 <event_conn_upd_prep+0x334>)
     c20:	487d      	ldr	r0, [pc, #500]	; (e18 <event_conn_upd_prep+0x338>)
     c22:	f640 13f6 	movw	r3, #2550	; 0x9f6
     c26:	f022 f8c2 	bl	22dae <printk>
     c2a:	4040      	eors	r0, r0
     c2c:	f380 8811 	msr	BASEPRI, r0
     c30:	f04f 0003 	mov.w	r0, #3
     c34:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
     c36:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
     c38:	46aa      	mov	sl, r5

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c3a:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
		lll->latency = conn->llcp_cu.latency;
     c3e:	f8b4 0116 	ldrh.w	r0, [r4, #278]	; 0x116
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c42:	4b76      	ldr	r3, [pc, #472]	; (e1c <event_conn_upd_prep+0x33c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c44:	4976      	ldr	r1, [pc, #472]	; (e20 <event_conn_upd_prep+0x340>)
		lll->latency = conn->llcp_cu.latency;
     c46:	8620      	strh	r0, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c48:	f242 7c10 	movw	ip, #10000	; 0x2710
     c4c:	fb0c 5202 	mla	r2, ip, r2, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c50:	442b      	add	r3, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c52:	4429      	add	r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c54:	fbb3 f3f5 	udiv	r3, r3, r5
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c58:	f100 0c06 	add.w	ip, r0, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c5c:	3a01      	subs	r2, #1
     c5e:	fbb2 f2f5 	udiv	r2, r2, r5
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c62:	fbb1 f5f5 	udiv	r5, r1, r5
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c66:	b299      	uxth	r1, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     c68:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c6c:	4561      	cmp	r1, ip
		lll->interval = conn->llcp_cu.interval;
     c6e:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     c72:	f8a4 10d2 	strh.w	r1, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     c76:	f8a4 50ca 	strh.w	r5, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
     c7a:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c7c:	dd02      	ble.n	c84 <event_conn_upd_prep+0x1a4>
				     (conn->apto_reload - (lll->latency + 6)) :
     c7e:	1a09      	subs	r1, r1, r0
     c80:	3906      	subs	r1, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c82:	b289      	uxth	r1, r1
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     c84:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     c88:	f8a4 10ce 	strh.w	r1, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
     c8c:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
     c8e:	bf44      	itt	mi
     c90:	2300      	movmi	r3, #0
     c92:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     c96:	2102      	movs	r1, #2
     c98:	2001      	movs	r0, #1
     c9a:	f017 f919 	bl	17ed0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     c9e:	2200      	movs	r2, #0
     ca0:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     ca2:	4605      	mov	r5, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     ca4:	2001      	movs	r0, #1
     ca6:	f00a fca3 	bl	b5f0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
     caa:	495e      	ldr	r1, [pc, #376]	; (e24 <event_conn_upd_prep+0x344>)
     cac:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
     cb0:	4620      	mov	r0, r4
     cb2:	f00a fc2f 	bl	b514 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
     cb6:	f100 0803 	add.w	r8, r0, #3
     cba:	fa5f f888 	uxtb.w	r8, r8
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
     cbe:	4b5a      	ldr	r3, [pc, #360]	; (e28 <event_conn_upd_prep+0x348>)
     cc0:	9400      	str	r4, [sp, #0]
     cc2:	4642      	mov	r2, r8
     cc4:	2101      	movs	r1, #1
     cc6:	2000      	movs	r0, #0
     cc8:	f00b ffa4 	bl	cc14 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     ccc:	f030 0302 	bics.w	r3, r0, #2
     cd0:	d00c      	beq.n	cec <event_conn_upd_prep+0x20c>
     cd2:	4a4f      	ldr	r2, [pc, #316]	; (e10 <event_conn_upd_prep+0x330>)
     cd4:	4955      	ldr	r1, [pc, #340]	; (e2c <event_conn_upd_prep+0x34c>)
     cd6:	4850      	ldr	r0, [pc, #320]	; (e18 <event_conn_upd_prep+0x338>)
     cd8:	f640 2325 	movw	r3, #2597	; 0xa25
     cdc:	f022 f867 	bl	22dae <printk>
     ce0:	4040      	eors	r0, r0
     ce2:	f380 8811 	msr	BASEPRI, r0
     ce6:	f04f 0003 	mov.w	r0, #3
     cea:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
     cec:	4b47      	ldr	r3, [pc, #284]	; (e0c <event_conn_upd_prep+0x32c>)
     cee:	fbaa ab03 	umull	sl, fp, sl, r3
     cf2:	4650      	mov	r0, sl
     cf4:	a342      	add	r3, pc, #264	; (adr r3, e00 <event_conn_upd_prep+0x320>)
     cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
     cfa:	4659      	mov	r1, fp
     cfc:	f7ff fa40 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
     d00:	4a4b      	ldr	r2, [pc, #300]	; (e30 <event_conn_upd_prep+0x350>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d02:	68e3      	ldr	r3, [r4, #12]
     d04:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
     d06:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
     d0a:	fba6 2302 	umull	r2, r3, r6, r2
     d0e:	2007      	movs	r0, #7
     d10:	fb00 3306 	mla	r3, r0, r6, r3
     d14:	ebba 0002 	subs.w	r0, sl, r2
     d18:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d1c:	f8df e114 	ldr.w	lr, [pc, #276]	; e34 <event_conn_upd_prep+0x354>
     d20:	f8df c114 	ldr.w	ip, [pc, #276]	; e38 <event_conn_upd_prep+0x358>
     d24:	9408      	str	r4, [sp, #32]
     d26:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
     d28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     d2c:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d2e:	f64f 74fe 	movw	r4, #65534	; 0xfffe
     d32:	f8cd e01c 	str.w	lr, [sp, #28]
     d36:	f8cd c014 	str.w	ip, [sp, #20]
     d3a:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
     d3c:	f7ff fa20 	bl	180 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
     d40:	464b      	mov	r3, r9
     d42:	e9cd 6001 	strd	r6, r0, [sp, #4]
     d46:	9700      	str	r7, [sp, #0]
     d48:	4642      	mov	r2, r8
     d4a:	2101      	movs	r1, #1
     d4c:	2000      	movs	r0, #0
     d4e:	f00b fed9 	bl	cb04 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
     d52:	f030 0302 	bics.w	r3, r0, #2
     d56:	d00c      	beq.n	d72 <event_conn_upd_prep+0x292>
     d58:	4a2d      	ldr	r2, [pc, #180]	; (e10 <event_conn_upd_prep+0x330>)
     d5a:	4934      	ldr	r1, [pc, #208]	; (e2c <event_conn_upd_prep+0x34c>)
     d5c:	482e      	ldr	r0, [pc, #184]	; (e18 <event_conn_upd_prep+0x338>)
     d5e:	f640 233f 	movw	r3, #2623	; 0xa3f
     d62:	f022 f824 	bl	22dae <printk>
     d66:	4040      	eors	r0, r0
     d68:	f380 8811 	msr	BASEPRI, r0
     d6c:	f04f 0003 	mov.w	r0, #3
     d70:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
     d72:	2d00      	cmp	r5, #0
     d74:	f040 812a 	bne.w	fcc <event_conn_upd_prep+0x4ec>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
     d78:	4628      	mov	r0, r5
	}

	return -EINPROGRESS;
}
     d7a:	b00b      	add	sp, #44	; 0x2c
     d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     d80:	1a12      	subs	r2, r2, r0
     d82:	f240 43e2 	movw	r3, #1250	; 0x4e2
     d86:	4821      	ldr	r0, [pc, #132]	; (e0c <event_conn_upd_prep+0x32c>)
     d88:	fb03 f202 	mul.w	r2, r3, r2
     d8c:	fba2 0100 	umull	r0, r1, r2, r0
     d90:	a31b      	add	r3, pc, #108	; (adr r3, e00 <event_conn_upd_prep+0x320>)
     d92:	e9d3 2300 	ldrd	r2, r3, [r3]
     d96:	f7ff f9f3 	bl	180 <__aeabi_uldivmod>
     d9a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     d9e:	4481      	add	r9, r0
     da0:	e72c      	b.n	bfc <event_conn_upd_prep+0x11c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
     da2:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
     da6:	2a00      	cmp	r2, #0
     da8:	f43f aebe 	beq.w	b28 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
     dac:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
     db0:	e6be      	b.n	b30 <event_conn_upd_prep+0x50>
			uint32_t ticks_prepare_to_start =
     db2:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
     db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     dba:	4282      	cmp	r2, r0
     dbc:	bf2c      	ite	cs
     dbe:	4491      	addcs	r9, r2
     dc0:	4481      	addcc	r9, r0
     dc2:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
     dc4:	eba9 0903 	sub.w	r9, r9, r3
     dc8:	e6f7      	b.n	bba <event_conn_upd_prep+0xda>
		if ((conn->llcp_cu.interval != lll->interval) ||
     dca:	f8b4 c030 	ldrh.w	ip, [r4, #48]	; 0x30
     dce:	4594      	cmp	ip, r2
     dd0:	f47f aedb 	bne.w	b8a <event_conn_upd_prep+0xaa>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     dd4:	f240 4ce2 	movw	ip, #1250	; 0x4e2
     dd8:	fb0c fb03 	mul.w	fp, ip, r3
     ddc:	f242 7c10 	movw	ip, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
     de0:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     de4:	fb0c bc01 	mla	ip, ip, r1, fp
     de8:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
     dec:	fbbc fcfb 	udiv	ip, ip, fp
		    (conn->llcp_cu.latency != lll->latency) ||
     df0:	fa1f fc8c 	uxth.w	ip, ip
     df4:	45e6      	cmp	lr, ip
     df6:	f47f aec8 	bne.w	b8a <event_conn_upd_prep+0xaa>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
     dfa:	2301      	movs	r3, #1
     dfc:	712b      	strb	r3, [r5, #4]
     dfe:	e6d3      	b.n	ba8 <event_conn_upd_prep+0xc8>
     e00:	1afd498d 	.word	0x1afd498d
     e04:	00000007 	.word	0x00000007
     e08:	200034fc 	.word	0x200034fc
     e0c:	3b9aca00 	.word	0x3b9aca00
     e10:	0002ca9c 	.word	0x0002ca9c
     e14:	0002c650 	.word	0x0002c650
     e18:	0002c5e0 	.word	0x0002c5e0
     e1c:	01c9c37f 	.word	0x01c9c37f
     e20:	026259ff 	.word	0x026259ff
     e24:	20003328 	.word	0x20003328
     e28:	000102f1 	.word	0x000102f1
     e2c:	0002cb7c 	.word	0x0002cb7c
     e30:	1afd498d 	.word	0x1afd498d
     e34:	00010299 	.word	0x00010299
     e38:	0001467d 	.word	0x0001467d
		LL_ASSERT(rx && rx->hdr.link);
     e3c:	4a78      	ldr	r2, [pc, #480]	; (1020 <event_conn_upd_prep+0x540>)
     e3e:	4979      	ldr	r1, [pc, #484]	; (1024 <event_conn_upd_prep+0x544>)
     e40:	4879      	ldr	r0, [pc, #484]	; (1028 <event_conn_upd_prep+0x548>)
     e42:	f640 137a 	movw	r3, #2426	; 0x97a
     e46:	f021 ffb2 	bl	22dae <printk>
     e4a:	4040      	eors	r0, r0
     e4c:	f380 8811 	msr	BASEPRI, r0
     e50:	f04f 0003 	mov.w	r0, #3
     e54:	df02      	svc	2
     e56:	6828      	ldr	r0, [r5, #0]
     e58:	e689      	b.n	b6e <event_conn_upd_prep+0x8e>
		rx = ll_pdu_rx_alloc_peek(1);
     e5a:	2001      	movs	r0, #1
     e5c:	f00e fa32 	bl	f2c4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
     e60:	4607      	mov	r7, r0
     e62:	2800      	cmp	r0, #0
     e64:	f000 80cd 	beq.w	1002 <event_conn_upd_prep+0x522>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     e68:	4870      	ldr	r0, [pc, #448]	; (102c <event_conn_upd_prep+0x54c>)
     e6a:	f00a fb1f 	bl	b4ac <mem_acquire>
		if (!tx) {
     e6e:	4605      	mov	r5, r0
     e70:	2800      	cmp	r0, #0
     e72:	f000 80c6 	beq.w	1002 <event_conn_upd_prep+0x522>
		(void)ll_pdu_rx_alloc();
     e76:	f00e fa43 	bl	f300 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
     e7a:	683a      	ldr	r2, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e7c:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
     e7e:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
     e82:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e84:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e88:	220c      	movs	r2, #12
		conn->llcp_rx = rx;
     e8a:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
     e8e:	716a      	strb	r2, [r5, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
     e90:	712b      	strb	r3, [r5, #4]
		conn->llcp.conn_upd.instant = event_counter +
     e92:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     e94:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
     e98:	4f65      	ldr	r7, [pc, #404]	; (1030 <event_conn_upd_prep+0x550>)
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     e9a:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     e9e:	2000      	movs	r0, #0
		conn->llcp.conn_upd.instant = event_counter +
     ea0:	441e      	add	r6, r3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
     ea2:	71e8      	strb	r0, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
     ea4:	fba7 3202 	umull	r3, r2, r7, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     ea8:	f3c2 228f 	ubfx	r2, r2, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
     eac:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
     eb0:	722b      	strb	r3, [r5, #8]
	    conn->tx_head &&
     eb2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
     eb6:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
     eba:	f8b4 2114 	ldrh.w	r2, [r4, #276]	; 0x114
     ebe:	f8a5 200b 	strh.w	r2, [r5, #11]
					      conn->lll.latency + 6;
     ec2:	3606      	adds	r6, #6
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
     ec4:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
     ec8:	f8a5 200d 	strh.w	r2, [r5, #13]
					      conn->lll.latency + 6;
     ecc:	b2b6      	uxth	r6, r6
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
     ece:	f8b4 2118 	ldrh.w	r2, [r4, #280]	; 0x118
     ed2:	f8a5 200f 	strh.w	r2, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ed6:	f360 0102 	bfi	r1, r0, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
     eda:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
     ede:	f884 1112 	strb.w	r1, [r4, #274]	; 0x112
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
     ee2:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
     ee6:	2b00      	cmp	r3, #0
     ee8:	d07f      	beq.n	fea <event_conn_upd_prep+0x50a>
	    !conn->llcp_enc.pause_tx &&
     eea:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
     eee:	0790      	lsls	r0, r2, #30
     ef0:	d47b      	bmi.n	fea <event_conn_upd_prep+0x50a>
	    !conn->llcp_phy.pause_tx &&
     ef2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
     ef6:	07d1      	lsls	r1, r2, #31
     ef8:	d477      	bmi.n	fea <event_conn_upd_prep+0x50a>
		if (conn->tx_head == conn->tx_data) {
     efa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
     efe:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
     f00:	bf04      	itt	eq
     f02:	681a      	ldreq	r2, [r3, #0]
     f04:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
     f08:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
     f0c:	2a00      	cmp	r2, #0
     f0e:	d16f      	bne.n	ff0 <event_conn_upd_prep+0x510>
			tx->next = conn->tx_head->next;
     f10:	681a      	ldr	r2, [r3, #0]
     f12:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
     f14:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
     f16:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
     f18:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
     f1c:	b90b      	cbnz	r3, f22 <event_conn_upd_prep+0x442>
		conn->tx_data_last = tx;
     f1e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	return -EINPROGRESS;
     f22:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
     f26:	b00b      	add	sp, #44	; 0x2c
     f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		conn_upd_curr = conn;
     f2c:	6028      	str	r0, [r5, #0]
     f2e:	e5e2      	b.n	af6 <event_conn_upd_prep+0x16>
			lll->slave.window_widening_prepare_us -=
     f30:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
     f32:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f34:	4f3f      	ldr	r7, [pc, #252]	; (1034 <event_conn_upd_prep+0x554>)
			lll->slave.window_widening_prepare_us -=
     f36:	fb03 231a 	mls	r3, r3, sl, r2
     f3a:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
     f3c:	f015 f8b6 	bl	160ac <lll_clock_ppm_local_get>
     f40:	4606      	mov	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
     f42:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
     f46:	f3c0 0082 	ubfx	r0, r0, #2, #3
     f4a:	f015 f8b1 	bl	160b0 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
     f4e:	4406      	add	r6, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
     f50:	fb05 f606 	mul.w	r6, r5, r6
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
     f54:	4b38      	ldr	r3, [pc, #224]	; (1038 <event_conn_upd_prep+0x558>)
			lll->slave.window_widening_prepare_us +=
     f56:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     f58:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
     f5c:	f506 2674 	add.w	r6, r6, #999424	; 0xf4000
     f60:	f206 263f 	addw	r6, r6, #575	; 0x23f
     f64:	fba3 3606 	umull	r3, r6, r3, r6
     f68:	0cb6      	lsrs	r6, r6, #18
				lll->slave.window_widening_periodic_us *
     f6a:	fb06 f00b 	mul.w	r0, r6, fp
				(conn_interval_us >> 1) - EVENT_IFS_US;
     f6e:	086b      	lsrs	r3, r5, #1
			lll->slave.window_widening_prepare_us +=
     f70:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
     f72:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
     f74:	429a      	cmp	r2, r3
     f76:	bf28      	it	cs
     f78:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
     f7a:	fb08 fc01 	mul.w	ip, r8, r1
			conn->slave.ticks_to_offset = 0U;
     f7e:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
     f82:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f86:	fba0 0107 	umull	r0, r1, r0, r7
     f8a:	a323      	add	r3, pc, #140	; (adr r3, 1018 <event_conn_upd_prep+0x538>)
     f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
     f90:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
     f94:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
     f98:	6466      	str	r6, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     f9a:	f7ff f8f1 	bl	180 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     f9e:	4b24      	ldr	r3, [pc, #144]	; (1030 <event_conn_upd_prep+0x550>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     fa0:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     fa2:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
     fa6:	fba3 3000 	umull	r3, r0, r3, r0
     faa:	0a80      	lsrs	r0, r0, #10
     fac:	fb08 f000 	mul.w	r0, r8, r0
     fb0:	fba0 0107 	umull	r0, r1, r0, r7
     fb4:	a318      	add	r3, pc, #96	; (adr r3, 1018 <event_conn_upd_prep+0x538>)
     fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
     fba:	eba9 090c 	sub.w	r9, r9, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     fbe:	f7ff f8df 	bl	180 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
     fc2:	eba5 0a06 	sub.w	sl, r5, r6
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
     fc6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
     fca:	e636      	b.n	c3a <event_conn_upd_prep+0x15a>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
     fcc:	2201      	movs	r2, #1
     fce:	4610      	mov	r0, r2
     fd0:	2102      	movs	r1, #2
     fd2:	f00a fb0d 	bl	b5f0 <mayfly_enable>
		return 0;
     fd6:	2000      	movs	r0, #0
}
     fd8:	b00b      	add	sp, #44	; 0x2c
     fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conn->procedure_expire = 0U;
     fde:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
     fe0:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
			conn->procedure_expire = 0U;
     fe4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
     fe8:	e5b3      	b.n	b52 <event_conn_upd_prep+0x72>
		if (!conn->tx_ctrl) {
     fea:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
     fee:	b16a      	cbz	r2, 100c <event_conn_upd_prep+0x52c>
	tx->next = conn->tx_ctrl_last->next;
     ff0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
     ff4:	681a      	ldr	r2, [r3, #0]
     ff6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
     ff8:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
     ffa:	682b      	ldr	r3, [r5, #0]
     ffc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
    1000:	e78c      	b.n	f1c <event_conn_upd_prep+0x43c>
			return -ENOBUFS;
    1002:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    1006:	b00b      	add	sp, #44	; 0x2c
    1008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    100c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    100e:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
    1012:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    1016:	e781      	b.n	f1c <event_conn_upd_prep+0x43c>
    1018:	1afd498d 	.word	0x1afd498d
    101c:	00000007 	.word	0x00000007
    1020:	0002ca9c 	.word	0x0002ca9c
    1024:	0002cb68 	.word	0x0002cb68
    1028:	0002c5e0 	.word	0x0002c5e0
    102c:	20003580 	.word	0x20003580
    1030:	d1b71759 	.word	0xd1b71759
    1034:	3b9aca00 	.word	0x3b9aca00
    1038:	431bde83 	.word	0x431bde83
    103c:	00000000 	.word	0x00000000

00001040 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    1040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1044:	461c      	mov	r4, r3
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    1046:	6813      	ldr	r3, [r2, #0]
{
    1048:	460d      	mov	r5, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    104a:	f8d3 a000 	ldr.w	sl, [r3]
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    104e:	f831 cf2e 	ldrh.w	ip, [r1, #46]!
	conn = lll->hdr.parent;
    1052:	4623      	mov	r3, r4
{
    1054:	4617      	mov	r7, r2
	conn = lll->hdr.parent;
    1056:	f853 6b0c 	ldr.w	r6, [r3], #12
    105a:	788a      	ldrb	r2, [r1, #2]
    105c:	f8a4 c00c 	strh.w	ip, [r4, #12]
    1060:	709a      	strb	r2, [r3, #2]
    1062:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
    1066:	60a3      	str	r3, [r4, #8]
    1068:	462b      	mov	r3, r5
{
    106a:	4681      	mov	r9, r0
    106c:	f853 2f3a 	ldr.w	r2, [r3, #58]!
    1070:	61e2      	str	r2, [r4, #28]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    1072:	f104 001c 	add.w	r0, r4, #28
    1076:	791b      	ldrb	r3, [r3, #4]
    1078:	7103      	strb	r3, [r0, #4]
{
    107a:	b093      	sub	sp, #76	; 0x4c
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    107c:	2105      	movs	r1, #5
    107e:	f00a fbe1 	bl	b844 <util_ones_count_get>
    1082:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    1086:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    108a:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    108e:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1090:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    1094:	d90a      	bls.n	10ac <ull_slave_setup+0x6c>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1096:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    109a:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    109e:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    10a0:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    10a4:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    10a6:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    10aa:	d902      	bls.n	10b2 <ull_slave_setup+0x72>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    10ac:	b013      	add	sp, #76	; 0x4c
    10ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    10b2:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    10b4:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    10b8:	2000      	movs	r0, #0
    10ba:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    10bc:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
	lll->interval = interval;
    10c0:	f8a4 8012 	strh.w	r8, [r4, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    10c4:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
    10c8:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    10cc:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    10d0:	82a2      	strh	r2, [r4, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    10d2:	095b      	lsrs	r3, r3, #5
    10d4:	f363 0184 	bfi	r1, r3, #2, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    10d8:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
    10da:	930b      	str	r3, [sp, #44]	; 0x2c
	conn->slave.sca = pdu_adv->connect_ind.sca;
    10dc:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	conn_interval_us = interval * CONN_INT_UNIT_US;
    10e0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    10e4:	fb03 f808 	mul.w	r8, r3, r8
		(((lll_clock_ppm_local_get() +
    10e8:	f014 ffe0 	bl	160ac <lll_clock_ppm_local_get>
    10ec:	4683      	mov	fp, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    10ee:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
    10f2:	f3c0 0082 	ubfx	r0, r0, #2, #3
    10f6:	f014 ffdb 	bl	160b0 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    10fa:	4458      	add	r0, fp
		   lll_clock_ppm_get(conn->slave.sca)) *
    10fc:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1100:	f8df e324 	ldr.w	lr, [pc, #804]	; 1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    1104:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1108:	8aa1      	ldrh	r1, [r4, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    110a:	4abd      	ldr	r2, [pc, #756]	; (1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>)
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    110c:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    1110:	f200 203f 	addw	r0, r0, #575	; 0x23f
    1114:	fbae 3000 	umull	r3, r0, lr, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1118:	ea4f 0e58 	mov.w	lr, r8, lsr #1
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    111c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1120:	fb03 f30c 	mul.w	r3, r3, ip
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1124:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    1126:	f1ae 0e96 	sub.w	lr, lr, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    112a:	62a0      	str	r0, [r4, #40]	; 0x28
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    112c:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    112e:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1132:	f8b5 b038 	ldrh.w	fp, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1136:	48b3      	ldr	r0, [pc, #716]	; (1404 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7c>)
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1138:	f242 7310 	movw	r3, #10000	; 0x2710
    113c:	fb03 830b 	mla	r3, r3, fp, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1140:	4442      	add	r2, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1142:	f101 0c06 	add.w	ip, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1146:	3b01      	subs	r3, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1148:	fbb2 f2f8 	udiv	r2, r2, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    114c:	fbb3 f3f8 	udiv	r3, r3, r8
    1150:	f8a6 30c6 	strh.w	r3, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1154:	b293      	uxth	r3, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1156:	4563      	cmp	r3, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1158:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    115a:	f8a6 30d2 	strh.w	r3, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    115e:	fbb0 f0f8 	udiv	r0, r0, r8
    1162:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1166:	dd02      	ble.n	116e <ull_slave_setup+0x12e>
			     (conn->apto_reload - (lll->latency + 6)) :
    1168:	1a5b      	subs	r3, r3, r1
    116a:	3b06      	subs	r3, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    116c:	b29b      	uxth	r3, r3
    116e:	f8a6 30ce 	strh.w	r3, [r6, #206]	; 0xce
    1172:	4629      	mov	r1, r5
    1174:	68a3      	ldr	r3, [r4, #8]
    1176:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	peer_addr_type = pdu_adv->tx_addr;
    117a:	f851 0f1e 	ldr.w	r0, [r1, #30]!
    117e:	7f2b      	ldrb	r3, [r5, #28]
    1180:	888a      	ldrh	r2, [r1, #4]
    1182:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
	cc->status = 0U;
    1186:	f44f 7c80 	mov.w	ip, #256	; 0x100
	peer_addr_type = pdu_adv->tx_addr;
    118a:	f3c3 1280 	ubfx	r2, r3, #6, #1
	cc->status = 0U;
    118e:	f8a5 c01c 	strh.w	ip, [r5, #28]
	peer_addr_type = pdu_adv->tx_addr;
    1192:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
		chan_sel = pdu_adv->chan_sel;
    1196:	f3c3 1240 	ubfx	r2, r3, #5, #1
    119a:	9010      	str	r0, [sp, #64]	; 0x40
    119c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    11a0:	920a      	str	r2, [sp, #40]	; 0x28
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    11a2:	f89a 002a 	ldrb.w	r0, [sl, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    11a6:	7cba      	ldrb	r2, [r7, #18]
    11a8:	910d      	str	r1, [sp, #52]	; 0x34
    11aa:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    11ac:	f014 fa20 	bl	155f0 <ull_filter_lll_lrpa_used>
    11b0:	e9dd 210c 	ldrd	r2, r1, [sp, #48]	; 0x30
    11b4:	f105 032b 	add.w	r3, r5, #43	; 0x2b
    11b8:	2800      	cmp	r0, #0
    11ba:	f040 80eb 	bne.w	1394 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc>
	if (rl_idx != FILTER_IDX_NONE) {
    11be:	2aff      	cmp	r2, #255	; 0xff
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    11c0:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    11c4:	8098      	strh	r0, [r3, #4]
    11c6:	f105 0325 	add.w	r3, r5, #37	; 0x25
    11ca:	f000 80ef 	beq.w	13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    11ce:	4610      	mov	r0, r2
    11d0:	f105 021f 	add.w	r2, r5, #31
    11d4:	930c      	str	r3, [sp, #48]	; 0x30
    11d6:	f013 fcdd 	bl	14b94 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    11da:	7faa      	ldrb	r2, [r5, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    11dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    11de:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    11e2:	9810      	ldr	r0, [sp, #64]	; 0x40
    11e4:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
    11e8:	3202      	adds	r2, #2
    11ea:	77aa      	strb	r2, [r5, #30]
    11ec:	8099      	strh	r1, [r3, #4]
	cc->sca = conn->slave.sca;
    11ee:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    11f2:	8a61      	ldrh	r1, [r4, #18]
	cc->latency = lll->latency;
    11f4:	8aa2      	ldrh	r2, [r4, #20]
    11f6:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    11f8:	f3c3 0382 	ubfx	r3, r3, #2, #3
    11fc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->interval = lll->interval;
    1200:	8669      	strh	r1, [r5, #50]	; 0x32
	cc->timeout = timeout;
    1202:	f8a5 b036 	strh.w	fp, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    1206:	4630      	mov	r0, r6
    1208:	f00f fbb2 	bl	10970 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    120c:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    120e:	8220      	strh	r0, [r4, #16]
	rx->handle = lll->handle;
    1210:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    1212:	687d      	ldr	r5, [r7, #4]
		ll_rx_put(link, rx);
    1214:	4648      	mov	r0, r9
    1216:	f00e f845 	bl	f2a4 <ll_rx_put>
		rx->handle = lll->handle;
    121a:	8a23      	ldrh	r3, [r4, #16]
    121c:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    121e:	2318      	movs	r3, #24
    1220:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    1222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		link = rx->link;
    1224:	6828      	ldr	r0, [r5, #0]
		if (chan_sel) {
    1226:	2b00      	cmp	r3, #0
    1228:	f000 80cf 	beq.w	13ca <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x42>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    122c:	f894 e009 	ldrb.w	lr, [r4, #9]
				      lll->access_addr[0];
    1230:	7a23      	ldrb	r3, [r4, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    1232:	f894 c00b 	ldrb.w	ip, [r4, #11]
				      lll->access_addr[2];
    1236:	7aa1      	ldrb	r1, [r4, #10]
			lll->data_chan_sel = 1;
    1238:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    123c:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    1240:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    1244:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    1246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    124a:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    124c:	8463      	strh	r3, [r4, #34]	; 0x22
			lll->data_chan_sel = 1;
    124e:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
			cs->csa = 0x01;
    1252:	7729      	strb	r1, [r5, #28]
	ll_rx_put(link, rx);
    1254:	4629      	mov	r1, r5
    1256:	f00e f825 	bl	f2a4 <ll_rx_put>
	ll_rx_sched();
    125a:	f00e f82d 	bl	f2b8 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    125e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    1262:	2101      	movs	r1, #1
    1264:	f000 0007 	and.w	r0, r0, #7
    1268:	f014 fe2e 	bl	15ec8 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    126c:	4a66      	ldr	r2, [pc, #408]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
	conn->evt.ticks_active_to_start = 0U;
    126e:	f04f 0900 	mov.w	r9, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1272:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    1274:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1276:	f200 4052 	addw	r0, r0, #1106	; 0x452
    127a:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    127e:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    1280:	e9c6 9901 	strd	r9, r9, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1284:	a35c      	add	r3, pc, #368	; (adr r3, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    1286:	e9d3 2300 	ldrd	r2, r3, [r3]
    128a:	f7fe ff79 	bl	180 <__aeabi_uldivmod>
	conn_offset_us = ftr->radio_end_us;
    128e:	68fd      	ldr	r5, [r7, #12]
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1290:	990b      	ldr	r1, [sp, #44]	; 0x2c
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    1292:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1294:	f240 42e2 	movw	r2, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1298:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    129c:	fb02 5501 	mla	r5, r2, r1, r5
	conn->evt.ticks_slot =
    12a0:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    12a2:	464a      	mov	r2, r9
    12a4:	2102      	movs	r1, #2
    12a6:	2001      	movs	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    12a8:	eba8 0803 	sub.w	r8, r8, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    12ac:	f00a f9a0 	bl	b5f0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    12b0:	4650      	mov	r0, sl
    12b2:	f00e fd7f 	bl	fdb4 <ull_adv_handle_get>
    12b6:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    12b8:	4b54      	ldr	r3, [pc, #336]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    12ba:	f8cd a000 	str.w	sl, [sp]
    12be:	b2d2      	uxtb	r2, r2
    12c0:	4648      	mov	r0, r9
    12c2:	2101      	movs	r1, #1
    12c4:	f00b fca6 	bl	cc14 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    12c8:	f205 3586 	addw	r5, r5, #902	; 0x386
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    12cc:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    12ce:	eba5 050b 	sub.w	r5, r5, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    12d2:	f000 8086 	beq.w	13e2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5a>
	if (adv->lll.is_hdcd) {
    12d6:	f89a 3028 	ldrb.w	r3, [sl, #40]	; 0x28
    12da:	07db      	lsls	r3, r3, #31
    12dc:	d479      	bmi.n	13d2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    12de:	4630      	mov	r0, r6
    12e0:	f00f fb46 	bl	10970 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    12e4:	f8df b120 	ldr.w	fp, [pc, #288]	; 1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>
    12e8:	fba8 890b 	umull	r8, r9, r8, fp
    12ec:	a342      	add	r3, pc, #264	; (adr r3, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    12ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    12f2:	4604      	mov	r4, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    12f4:	4649      	mov	r1, r9
    12f6:	4640      	mov	r0, r8
    12f8:	f7fe ff42 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    12fc:	4a44      	ldr	r2, [pc, #272]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    12fe:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1300:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    1304:	fbaa 2302 	umull	r2, r3, sl, r2
    1308:	2107      	movs	r1, #7
    130a:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    130e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
    1312:	68bf      	ldr	r7, [r7, #8]
    1314:	9108      	str	r1, [sp, #32]
    1316:	493f      	ldr	r1, [pc, #252]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    1318:	9107      	str	r1, [sp, #28]
    131a:	493f      	ldr	r1, [pc, #252]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    131c:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    131e:	ebb8 0002 	subs.w	r0, r8, r2
    1322:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1326:	68f3      	ldr	r3, [r6, #12]
    1328:	9304      	str	r3, [sp, #16]
    132a:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    132c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1330:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1332:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    1334:	f7fe ff24 	bl	180 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1338:	a32f      	add	r3, pc, #188	; (adr r3, 13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    133a:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    133e:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1340:	fba5 010b 	umull	r0, r1, r5, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1344:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    1348:	f7fe ff1a 	bl	180 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    134c:	3403      	adds	r4, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    134e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1352:	b2e4      	uxtb	r4, r4
    1354:	3f31      	subs	r7, #49	; 0x31
    1356:	463b      	mov	r3, r7
    1358:	9000      	str	r0, [sp, #0]
    135a:	4622      	mov	r2, r4
    135c:	4630      	mov	r0, r6
    135e:	2101      	movs	r1, #1
    1360:	f00b fbd0 	bl	cb04 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1364:	f030 0302 	bics.w	r3, r0, #2
    1368:	d00c      	beq.n	1384 <ull_slave_setup+0x344>
    136a:	4a2c      	ldr	r2, [pc, #176]	; (141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>)
    136c:	492c      	ldr	r1, [pc, #176]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    136e:	482d      	ldr	r0, [pc, #180]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    1370:	f240 136d 	movw	r3, #365	; 0x16d
    1374:	f021 fd1b 	bl	22dae <printk>
    1378:	4040      	eors	r0, r0
    137a:	f380 8811 	msr	BASEPRI, r0
    137e:	f04f 0003 	mov.w	r0, #3
    1382:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1384:	2201      	movs	r2, #1
    1386:	4610      	mov	r0, r2
    1388:	2102      	movs	r1, #2
}
    138a:	b013      	add	sp, #76	; 0x4c
    138c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    1390:	f00a b92e 	b.w	b5f0 <mayfly_enable>
    1394:	4628      	mov	r0, r5
	if (rl_idx != FILTER_IDX_NONE) {
    1396:	2aff      	cmp	r2, #255	; 0xff
    1398:	f850 cf24 	ldr.w	ip, [r0, #36]!
    139c:	f8c5 c02b 	str.w	ip, [r5, #43]	; 0x2b
    13a0:	8880      	ldrh	r0, [r0, #4]
    13a2:	8098      	strh	r0, [r3, #4]
    13a4:	f105 0325 	add.w	r3, r5, #37	; 0x25
    13a8:	f47f af11 	bne.w	11ce <ull_slave_setup+0x18e>
__ssp_bos_icheck3(memset, void *, int)
    13ac:	2200      	movs	r2, #0
    13ae:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    13b2:	9810      	ldr	r0, [sp, #64]	; 0x40
    13b4:	f8c5 2025 	str.w	r2, [r5, #37]	; 0x25
    13b8:	809a      	strh	r2, [r3, #4]
		cc->peer_addr_type = peer_addr_type;
    13ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    13be:	f8a5 1023 	strh.w	r1, [r5, #35]	; 0x23
    13c2:	77ab      	strb	r3, [r5, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    13c4:	f8c5 001f 	str.w	r0, [r5, #31]
    13c8:	e711      	b.n	11ee <ull_slave_setup+0x1ae>
			cs->csa = 0x00;
    13ca:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    13ce:	772b      	strb	r3, [r5, #28]
    13d0:	e740      	b.n	1254 <ull_slave_setup+0x214>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    13d2:	2300      	movs	r3, #0
    13d4:	2201      	movs	r2, #1
    13d6:	9300      	str	r3, [sp, #0]
    13d8:	4618      	mov	r0, r3
    13da:	4611      	mov	r1, r2
    13dc:	f00b fc1a 	bl	cc14 <ticker_stop>
    13e0:	e77d      	b.n	12de <ull_slave_setup+0x29e>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    13e2:	f00e f815 	bl	f410 <ull_disable_mark_get>
    13e6:	4582      	cmp	sl, r0
    13e8:	f43f af75 	beq.w	12d6 <ull_slave_setup+0x296>
    13ec:	f013 f922 	bl	14634 <ticker_op_stop_adv_cb.part.0>
    13f0:	e771      	b.n	12d6 <ull_slave_setup+0x296>
    13f2:	bf00      	nop
    13f4:	f3af 8000 	nop.w
    13f8:	1afd498d 	.word	0x1afd498d
    13fc:	00000007 	.word	0x00000007
    1400:	01c9c37f 	.word	0x01c9c37f
    1404:	026259ff 	.word	0x026259ff
    1408:	3b9aca00 	.word	0x3b9aca00
    140c:	00014661 	.word	0x00014661
    1410:	1afd498d 	.word	0x1afd498d
    1414:	00014605 	.word	0x00014605
    1418:	0001467d 	.word	0x0001467d
    141c:	0002ccc4 	.word	0x0002ccc4
    1420:	0002cb7c 	.word	0x0002cb7c
    1424:	0002c5e0 	.word	0x0002c5e0
    1428:	431bde83 	.word	0x431bde83

0000142c <disconnected>:
	//clock_show_time();
	//gfx_update();
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
    142c:	b508      	push	{r3, lr}
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    142e:	4a07      	ldr	r2, [pc, #28]	; (144c <disconnected+0x20>)
    1430:	4b07      	ldr	r3, [pc, #28]	; (1450 <disconnected+0x24>)
	LOG_INF("disconnected (reason: %u)", reason);
    1432:	4808      	ldr	r0, [pc, #32]	; (1454 <disconnected+0x28>)
    1434:	1ad2      	subs	r2, r2, r3
    1436:	08d2      	lsrs	r2, r2, #3
    1438:	0192      	lsls	r2, r2, #6
    143a:	f042 0203 	orr.w	r2, r2, #3
    143e:	f022 f8d8 	bl	235f2 <log_1>
	cts_sync_enable(false);
	//display_set_bluetooth_disconnected(); //bt-symbol is displayed -- readability is not top...
	//gfx_bt_set_label(BT_ADVERTISING_ON);
	//gfx_update();
}
    1442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	cts_sync_enable(false);
    1446:	2000      	movs	r0, #0
    1448:	f000 ba42 	b.w	18d0 <cts_sync_enable>
    144c:	0002bf50 	.word	0x0002bf50
    1450:	0002bf50 	.word	0x0002bf50
    1454:	0002dc0e 	.word	0x0002dc0e

00001458 <connected>:
{
    1458:	b510      	push	{r4, lr}
	printk("test\n");
    145a:	480b      	ldr	r0, [pc, #44]	; (1488 <connected+0x30>)
{
    145c:	460c      	mov	r4, r1
	printk("test\n");
    145e:	f021 fca6 	bl	22dae <printk>
	if (err) {
    1462:	b984      	cbnz	r4, 1486 <connected+0x2e>
    1464:	4b09      	ldr	r3, [pc, #36]	; (148c <connected+0x34>)
    1466:	490a      	ldr	r1, [pc, #40]	; (1490 <connected+0x38>)
	LOG_INF("connected");
    1468:	480a      	ldr	r0, [pc, #40]	; (1494 <connected+0x3c>)
    146a:	1ac9      	subs	r1, r1, r3
    146c:	08c9      	lsrs	r1, r1, #3
    146e:	0189      	lsls	r1, r1, #6
    1470:	f041 0103 	orr.w	r1, r1, #3
    1474:	f022 f8b0 	bl	235d8 <log_0>
	cts_sync_enable(true);
    1478:	2001      	movs	r0, #1
    147a:	f000 fa29 	bl	18d0 <cts_sync_enable>
}
    147e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	display_set_bluetooth_connected(); //bt-connected-symbol is displayed -- wifi symbol is used because this is more readable on smaller display
    1482:	f000 ba65 	b.w	1950 <display_set_bluetooth_connected>
}
    1486:	bd10      	pop	{r4, pc}
    1488:	0002dc28 	.word	0x0002dc28
    148c:	0002bf50 	.word	0x0002bf50
    1490:	0002bf50 	.word	0x0002bf50
    1494:	0002f406 	.word	0x0002f406

00001498 <advertise>:
{
    1498:	b507      	push	{r0, r1, r2, lr}
	bt_le_adv_stop();
    149a:	f005 fe93 	bl	71c4 <bt_le_adv_stop>
	rc = bt_le_adv_start(&param, ad, ARRAY_SIZE(ad), NULL, 0);
    149e:	2300      	movs	r3, #0
    14a0:	490e      	ldr	r1, [pc, #56]	; (14dc <advertise+0x44>)
    14a2:	9300      	str	r3, [sp, #0]
    14a4:	2203      	movs	r2, #3
    14a6:	480e      	ldr	r0, [pc, #56]	; (14e0 <advertise+0x48>)
    14a8:	f005 fe7e 	bl	71a8 <bt_le_adv_start>
	if (rc) {
    14ac:	4a0d      	ldr	r2, [pc, #52]	; (14e4 <advertise+0x4c>)
    14ae:	4b0e      	ldr	r3, [pc, #56]	; (14e8 <advertise+0x50>)
    14b0:	1ad2      	subs	r2, r2, r3
    14b2:	08d2      	lsrs	r2, r2, #3
    14b4:	4601      	mov	r1, r0
    14b6:	0192      	lsls	r2, r2, #6
    14b8:	b138      	cbz	r0, 14ca <advertise+0x32>
		LOG_ERR("Advertising failed to start (rc %d)", rc);
    14ba:	480c      	ldr	r0, [pc, #48]	; (14ec <advertise+0x54>)
    14bc:	f042 0201 	orr.w	r2, r2, #1
}
    14c0:	b003      	add	sp, #12
    14c2:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_ERR("Advertising failed to start (rc %d)", rc);
    14c6:	f022 b894 	b.w	235f2 <log_1>
	LOG_INF("Advertising successfully started");
    14ca:	4809      	ldr	r0, [pc, #36]	; (14f0 <advertise+0x58>)
    14cc:	f042 0103 	orr.w	r1, r2, #3
}
    14d0:	b003      	add	sp, #12
    14d2:	f85d eb04 	ldr.w	lr, [sp], #4
	LOG_INF("Advertising successfully started");
    14d6:	f022 b87f 	b.w	235d8 <log_0>
    14da:	bf00      	nop
    14dc:	0002c138 	.word	0x0002c138
    14e0:	200001dc 	.word	0x200001dc
    14e4:	0002bf50 	.word	0x0002bf50
    14e8:	0002bf50 	.word	0x0002bf50
    14ec:	0002dc2e 	.word	0x0002dc2e
    14f0:	0002dc52 	.word	0x0002dc52

000014f4 <bt_init>:
{

}

void bt_init(void)
{
    14f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = bt_enable(NULL);
    14f6:	2000      	movs	r0, #0
    14f8:	f005 fb48 	bl	6b8c <bt_enable>
	if (err) {
    14fc:	4c22      	ldr	r4, [pc, #136]	; (1588 <bt_init+0x94>)
    14fe:	4b23      	ldr	r3, [pc, #140]	; (158c <bt_init+0x98>)
    1500:	1ae4      	subs	r4, r4, r3
    1502:	08e4      	lsrs	r4, r4, #3
    1504:	4605      	mov	r5, r0
    1506:	01a4      	lsls	r4, r4, #6
    1508:	b138      	cbz	r0, 151a <bt_init+0x26>
		LOG_ERR("Bluetooth init failed (err %d)", err);
    150a:	f044 0201 	orr.w	r2, r4, #1
    150e:	4601      	mov	r1, r0
#endif
	cts_sync_init();

	LOG_INF("Bluetooth initialized"); //jj
	LOG_DBG("Bluetooth initialized");
}
    1510:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		LOG_ERR("Bluetooth init failed (err %d)", err);
    1514:	481e      	ldr	r0, [pc, #120]	; (1590 <bt_init+0x9c>)
    1516:	f022 b86c 	b.w	235f2 <log_1>
 *
 * @return N/A
 */
static inline void k_work_init(struct k_work *work, k_work_handler_t handler)
{
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    151a:	4f1e      	ldr	r7, [pc, #120]	; (1594 <bt_init+0xa0>)
	settings_load();
    151c:	f022 fb44 	bl	23ba8 <settings_load>
	settings_runtime_set("bt/dis/sw",
    1520:	491d      	ldr	r1, [pc, #116]	; (1598 <bt_init+0xa4>)
    1522:	481e      	ldr	r0, [pc, #120]	; (159c <bt_init+0xa8>)
    1524:	2209      	movs	r2, #9
    1526:	f002 f8eb 	bl	3700 <settings_runtime_set>
    152a:	463e      	mov	r6, r7
	settings_runtime_set("bt/dis/fw",
    152c:	491c      	ldr	r1, [pc, #112]	; (15a0 <bt_init+0xac>)
    152e:	481d      	ldr	r0, [pc, #116]	; (15a4 <bt_init+0xb0>)
    1530:	2201      	movs	r2, #1
    1532:	f002 f8e5 	bl	3700 <settings_runtime_set>
    1536:	4b1c      	ldr	r3, [pc, #112]	; (15a8 <bt_init+0xb4>)
	bt_conn_cb_register(&m_conn_callbacks);
    1538:	481c      	ldr	r0, [pc, #112]	; (15ac <bt_init+0xb8>)
    153a:	607b      	str	r3, [r7, #4]
    153c:	f846 5f08 	str.w	r5, [r6, #8]!
    1540:	603d      	str	r5, [r7, #0]
    1542:	f006 f89f 	bl	7684 <bt_conn_cb_register>
		LOG_INF("bt init callback started\n");
    1546:	481a      	ldr	r0, [pc, #104]	; (15b0 <bt_init+0xbc>)
    1548:	f044 0103 	orr.w	r1, r4, #3
    154c:	f022 f844 	bl	235d8 <log_0>
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1550:	f3bf 8f5b 	dmb	ish
    1554:	e856 3f00 	ldrex	r3, [r6]
    1558:	f043 0201 	orr.w	r2, r3, #1
    155c:	e846 2100 	strex	r1, r2, [r6]
    1560:	2900      	cmp	r1, #0
    1562:	d1f7      	bne.n	1554 <bt_init+0x60>
    1564:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    1568:	07db      	lsls	r3, r3, #31
    156a:	d403      	bmi.n	1574 <bt_init+0x80>
		k_queue_append(&work_q->queue, work);
    156c:	4811      	ldr	r0, [pc, #68]	; (15b4 <bt_init+0xc0>)
    156e:	4639      	mov	r1, r7
    1570:	f029 fce6 	bl	2af40 <k_queue_append>
	cts_sync_init();
    1574:	f000 f990 	bl	1898 <cts_sync_init>
	LOG_INF("Bluetooth initialized"); //jj
    1578:	f044 0103 	orr.w	r1, r4, #3
    157c:	480e      	ldr	r0, [pc, #56]	; (15b8 <bt_init+0xc4>)
}
    157e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	LOG_INF("Bluetooth initialized"); //jj
    1582:	f022 b829 	b.w	235d8 <log_0>
    1586:	bf00      	nop
    1588:	0002bf50 	.word	0x0002bf50
    158c:	0002bf50 	.word	0x0002bf50
    1590:	0002dc73 	.word	0x0002dc73
    1594:	200014e0 	.word	0x200014e0
    1598:	0002dc92 	.word	0x0002dc92
    159c:	0002dc9b 	.word	0x0002dc9b
    15a0:	0002e061 	.word	0x0002e061
    15a4:	0002dca5 	.word	0x0002dca5
    15a8:	00001499 	.word	0x00001499
    15ac:	200001c8 	.word	0x200001c8
    15b0:	0002dcaf 	.word	0x0002dcaf
    15b4:	20001438 	.word	0x20001438
    15b8:	0002dcc9 	.word	0x0002dcc9

000015bc <clock_str_to_local_time>:
	.tm_wday = 0,
};

/* ********** ********** FUNCTIONS *********** ********** */
void clock_str_to_local_time(const char *str)
{
    15bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (sscanf(str, "%d-%d-%dT%d:%d:%d", &ti.tm_year, &ti.tm_mon,
    15be:	4c15      	ldr	r4, [pc, #84]	; (1614 <clock_str_to_local_time+0x58>)
    15c0:	4915      	ldr	r1, [pc, #84]	; (1618 <clock_str_to_local_time+0x5c>)
    15c2:	9403      	str	r4, [sp, #12]
    15c4:	1d23      	adds	r3, r4, #4
    15c6:	9302      	str	r3, [sp, #8]
    15c8:	f104 0308 	add.w	r3, r4, #8
    15cc:	9301      	str	r3, [sp, #4]
    15ce:	f104 030c 	add.w	r3, r4, #12
    15d2:	9300      	str	r3, [sp, #0]
    15d4:	f104 0214 	add.w	r2, r4, #20
    15d8:	f104 0310 	add.w	r3, r4, #16
    15dc:	f01f fc42 	bl	20e64 <siscanf>
    15e0:	2806      	cmp	r0, #6
    15e2:	d009      	beq.n	15f8 <clock_str_to_local_time+0x3c>
    15e4:	490d      	ldr	r1, [pc, #52]	; (161c <clock_str_to_local_time+0x60>)
    15e6:	4b0e      	ldr	r3, [pc, #56]	; (1620 <clock_str_to_local_time+0x64>)
		   &ti.tm_mday, &ti.tm_hour, &ti.tm_min, &ti.tm_sec) != 6) {
		LOG_ERR("Failed to parse time of build.");
    15e8:	480e      	ldr	r0, [pc, #56]	; (1624 <clock_str_to_local_time+0x68>)
    15ea:	1ac9      	subs	r1, r1, r3
    15ec:	08c9      	lsrs	r1, r1, #3
    15ee:	0189      	lsls	r1, r1, #6
    15f0:	f041 0101 	orr.w	r1, r1, #1
    15f4:	f021 fff0 	bl	235d8 <log_0>
	}
	ti.tm_year-=1900;
    15f8:	6963      	ldr	r3, [r4, #20]
	ti.tm_mon-=1;
	mktime(&ti);
    15fa:	4806      	ldr	r0, [pc, #24]	; (1614 <clock_str_to_local_time+0x58>)
	ti.tm_year-=1900;
    15fc:	f2a3 736c 	subw	r3, r3, #1900	; 0x76c
    1600:	6163      	str	r3, [r4, #20]
	ti.tm_mon-=1;
    1602:	6923      	ldr	r3, [r4, #16]
    1604:	3b01      	subs	r3, #1
    1606:	6123      	str	r3, [r4, #16]
}
    1608:	b004      	add	sp, #16
    160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	mktime(&ti);
    160e:	f01f ba53 	b.w	20ab8 <mktime>
    1612:	bf00      	nop
    1614:	200014ec 	.word	0x200014ec
    1618:	0002dcdf 	.word	0x0002dcdf
    161c:	0002bf50 	.word	0x0002bf50
    1620:	0002bf50 	.word	0x0002bf50
    1624:	0002dcf1 	.word	0x0002dcf1

00001628 <clock_init>:

void clock_init()
{
	/* Set time to time of build */
	clock_str_to_local_time(TIME_OF_BUILD);
    1628:	4801      	ldr	r0, [pc, #4]	; (1630 <clock_init+0x8>)
    162a:	f7ff bfc7 	b.w	15bc <clock_str_to_local_time>
    162e:	bf00      	nop
    1630:	0002dd10 	.word	0x0002dd10

00001634 <clock_update_elapsed_ms>:
	LOG_DBG("Time set to time of build");
	LOG_DBG("Clock init: Done");
}

void clock_update_elapsed_ms()
{
    1634:	b538      	push	{r3, r4, r5, lr}
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    1636:	f029 feab 	bl	2b390 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    163e:	460a      	mov	r2, r1
    1640:	fba0 0103 	umull	r0, r1, r0, r3
    1644:	fb03 1102 	mla	r1, r3, r2, r1
	uptime_ms = k_uptime_get();
	elapsed_ms = uptime_ms - last_uptime_ms;
    1648:	4a0d      	ldr	r2, [pc, #52]	; (1680 <clock_update_elapsed_ms+0x4c>)
    164a:	4d0e      	ldr	r5, [pc, #56]	; (1684 <clock_update_elapsed_ms+0x50>)
    164c:	0bc3      	lsrs	r3, r0, #15
    164e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    1652:	0bcc      	lsrs	r4, r1, #15
    1654:	e9d2 1000 	ldrd	r1, r0, [r2]
    1658:	1a59      	subs	r1, r3, r1
    165a:	eb64 0000 	sbc.w	r0, r4, r0
    165e:	e9c5 1000 	strd	r1, r0, [r5]
	last_uptime_ms = uptime_ms;
    1662:	e9c2 3400 	strd	r3, r4, [r2]
    1666:	4908      	ldr	r1, [pc, #32]	; (1688 <clock_update_elapsed_ms+0x54>)
    1668:	4b08      	ldr	r3, [pc, #32]	; (168c <clock_update_elapsed_ms+0x58>)
	LOG_INF("Clock updated: "); //jj
    166a:	4809      	ldr	r0, [pc, #36]	; (1690 <clock_update_elapsed_ms+0x5c>)
    166c:	1ac9      	subs	r1, r1, r3
    166e:	08c9      	lsrs	r1, r1, #3
    1670:	0189      	lsls	r1, r1, #6
}
    1672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	LOG_INF("Clock updated: "); //jj
    1676:	f041 0103 	orr.w	r1, r1, #3
    167a:	f021 bfad 	b.w	235d8 <log_0>
    167e:	bf00      	nop
    1680:	20000d60 	.word	0x20000d60
    1684:	20000d58 	.word	0x20000d58
    1688:	0002bf50 	.word	0x0002bf50
    168c:	0002bf50 	.word	0x0002bf50
    1690:	0002dd24 	.word	0x0002dd24

00001694 <clock_sync_time>:

/* Called by cts sync */
void clock_sync_time(cts_datetime_t *cts)
{
    1694:	b508      	push	{r3, lr}
    1696:	4603      	mov	r3, r0
	ti.tm_year = cts->year -1900;
    1698:	480a      	ldr	r0, [pc, #40]	; (16c4 <clock_sync_time+0x30>)
    169a:	881a      	ldrh	r2, [r3, #0]
    169c:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
    16a0:	6142      	str	r2, [r0, #20]
	ti.tm_mon = cts->month -1;
    16a2:	789a      	ldrb	r2, [r3, #2]
    16a4:	3a01      	subs	r2, #1
    16a6:	6102      	str	r2, [r0, #16]
	ti.tm_mday = cts->day;
    16a8:	78da      	ldrb	r2, [r3, #3]
    16aa:	60c2      	str	r2, [r0, #12]
	ti.tm_hour = cts->hours;
    16ac:	791a      	ldrb	r2, [r3, #4]
    16ae:	6082      	str	r2, [r0, #8]
	ti.tm_min = cts->minutes;
    16b0:	795a      	ldrb	r2, [r3, #5]
    16b2:	6042      	str	r2, [r0, #4]
	ti.tm_sec = cts->seconds;
    16b4:	799b      	ldrb	r3, [r3, #6]
    16b6:	6003      	str	r3, [r0, #0]
	mktime(&ti);
    16b8:	f01f f9fe 	bl	20ab8 <mktime>
	clock_update_elapsed_ms();
}
    16bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	clock_update_elapsed_ms();
    16c0:	f7ff bfb8 	b.w	1634 <clock_update_elapsed_ms>
    16c4:	200014ec 	.word	0x200014ec

000016c8 <clock_show_time>:
	ti.tm_sec += elapsed_ms / 1000;
	mktime(&ti);
}

void clock_show_time()
{
    16c8:	b570      	push	{r4, r5, r6, lr}
	strftime(time_label_str, 32, "%H:%M", &ti);
    16ca:	4e0b      	ldr	r6, [pc, #44]	; (16f8 <clock_show_time+0x30>)
    16cc:	4d0b      	ldr	r5, [pc, #44]	; (16fc <clock_show_time+0x34>)
	strftime(date_label_str, 32, "%a %d %b", &ti);
    16ce:	4c0c      	ldr	r4, [pc, #48]	; (1700 <clock_show_time+0x38>)
	strftime(time_label_str, 32, "%H:%M", &ti);
    16d0:	4a0c      	ldr	r2, [pc, #48]	; (1704 <clock_show_time+0x3c>)
    16d2:	4633      	mov	r3, r6
    16d4:	2120      	movs	r1, #32
    16d6:	4628      	mov	r0, r5
    16d8:	f020 f93a 	bl	21950 <strftime>
	strftime(date_label_str, 32, "%a %d %b", &ti);
    16dc:	4633      	mov	r3, r6
    16de:	4a0a      	ldr	r2, [pc, #40]	; (1708 <clock_show_time+0x40>)
    16e0:	2120      	movs	r1, #32
    16e2:	4620      	mov	r0, r4
    16e4:	f020 f934 	bl	21950 <strftime>
	//gfx_time_set_label(time_label_str); jj
	display_time_set_label(time_label_str);
    16e8:	4628      	mov	r0, r5
    16ea:	f000 f921 	bl	1930 <display_time_set_label>
	//gfx_date_set_label(date_label_str);
	display_date_set_label(date_label_str);
    16ee:	4620      	mov	r0, r4
}
    16f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	display_date_set_label(date_label_str);
    16f4:	f000 b924 	b.w	1940 <display_date_set_label>
    16f8:	200014ec 	.word	0x200014ec
    16fc:	200080f6 	.word	0x200080f6
    1700:	200080d6 	.word	0x200080d6
    1704:	0002dd34 	.word	0x0002dd34
    1708:	0002dd3a 	.word	0x0002dd3a

0000170c <cts_sync_timer_timeout_handler>:
	t->tm_sec = clock_datetime.seconds;
}

static void cts_sync_timer_timeout_handler(struct k_timer *tmr)
{
	bt_conn_foreach(BT_CONN_TYPE_LE, cts_sync_processor, NULL);
    170c:	4902      	ldr	r1, [pc, #8]	; (1718 <cts_sync_timer_timeout_handler+0xc>)
    170e:	2200      	movs	r2, #0
    1710:	2001      	movs	r0, #1
    1712:	f006 baa3 	b.w	7c5c <bt_conn_foreach>
    1716:	bf00      	nop
    1718:	0000171d 	.word	0x0000171d

0000171c <cts_sync_processor>:

	return BT_GATT_ITER_STOP;
}

static void cts_sync_processor(struct bt_conn *conn, void *data)
{
    171c:	b507      	push	{r0, r1, r2, lr}
	memcpy(&uuid, BT_UUID_CTS_CURRENT_TIME, sizeof(uuid));
    171e:	2300      	movs	r3, #0
    1720:	f88d 3004 	strb.w	r3, [sp, #4]
    1724:	f642 232b 	movw	r3, #10795	; 0x2a2b
    1728:	f8ad 3006 	strh.w	r3, [sp, #6]
    172c:	4b10      	ldr	r3, [pc, #64]	; (1770 <cts_sync_processor+0x54>)
	cts_discovery_params.func = cts_sync_service_discovered;
    172e:	4911      	ldr	r1, [pc, #68]	; (1774 <cts_sync_processor+0x58>)
    1730:	9a01      	ldr	r2, [sp, #4]
    1732:	601a      	str	r2, [r3, #0]
    1734:	4a10      	ldr	r2, [pc, #64]	; (1778 <cts_sync_processor+0x5c>)
    1736:	604a      	str	r2, [r1, #4]
	cts_discovery_params.start_handle = 0x0001;
    1738:	2201      	movs	r2, #1
    173a:	810a      	strh	r2, [r1, #8]
	cts_discovery_params.end_handle = 0xFFFF;
    173c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1740:	81ca      	strh	r2, [r1, #14]
	cts_discovery_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
    1742:	2203      	movs	r2, #3
    1744:	740a      	strb	r2, [r1, #16]
	cts_discovery_params.uuid = (struct bt_uuid *) &uuid;
    1746:	600b      	str	r3, [r1, #0]

	if (bt_gatt_discover(conn, &cts_discovery_params) != 0) {
    1748:	f008 fff0 	bl	a72c <bt_gatt_discover>
    174c:	b160      	cbz	r0, 1768 <cts_sync_processor+0x4c>
    174e:	4b0b      	ldr	r3, [pc, #44]	; (177c <cts_sync_processor+0x60>)
    1750:	490b      	ldr	r1, [pc, #44]	; (1780 <cts_sync_processor+0x64>)
		LOG_ERR("CTS Sync > GATT discovery FAILED.");
    1752:	480c      	ldr	r0, [pc, #48]	; (1784 <cts_sync_processor+0x68>)
    1754:	1ac9      	subs	r1, r1, r3
    1756:	08c9      	lsrs	r1, r1, #3
    1758:	0189      	lsls	r1, r1, #6
    175a:	f041 0101 	orr.w	r1, r1, #1
	}
}
    175e:	b003      	add	sp, #12
    1760:	f85d eb04 	ldr.w	lr, [sp], #4
		LOG_ERR("CTS Sync > GATT discovery FAILED.");
    1764:	f021 bf38 	b.w	235d8 <log_0>
}
    1768:	b003      	add	sp, #12
    176a:	f85d fb04 	ldr.w	pc, [sp], #4
    176e:	bf00      	nop
    1770:	200080aa 	.word	0x200080aa
    1774:	20001510 	.word	0x20001510
    1778:	00001789 	.word	0x00001789
    177c:	0002bf50 	.word	0x0002bf50
    1780:	0002bf50 	.word	0x0002bf50
    1784:	0002dd43 	.word	0x0002dd43

00001788 <cts_sync_service_discovered>:
{
    1788:	b510      	push	{r4, lr}
	if (!attr) {
    178a:	460b      	mov	r3, r1
    178c:	b959      	cbnz	r1, 17a6 <cts_sync_service_discovered+0x1e>
    178e:	490e      	ldr	r1, [pc, #56]	; (17c8 <cts_sync_service_discovered+0x40>)
    1790:	4b0e      	ldr	r3, [pc, #56]	; (17cc <cts_sync_service_discovered+0x44>)
		LOG_INF("CTS Service Discovery completed");
    1792:	480f      	ldr	r0, [pc, #60]	; (17d0 <cts_sync_service_discovered+0x48>)
    1794:	1ac9      	subs	r1, r1, r3
    1796:	08c9      	lsrs	r1, r1, #3
    1798:	0189      	lsls	r1, r1, #6
    179a:	f041 0103 	orr.w	r1, r1, #3
    179e:	f021 ff1b 	bl	235d8 <log_0>
}
    17a2:	2000      	movs	r0, #0
    17a4:	bd10      	pop	{r4, pc}
	memset(&read_params, 0, sizeof(read_params));
    17a6:	490b      	ldr	r1, [pc, #44]	; (17d4 <cts_sync_service_discovered+0x4c>)
	read_params.by_uuid.start_handle = attr->handle;
    17a8:	8a1b      	ldrh	r3, [r3, #16]
    17aa:	810b      	strh	r3, [r1, #8]
	read_params.by_uuid.end_handle = 0xffff;
    17ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
	memset(&read_params, 0, sizeof(read_params));
    17b0:	2200      	movs	r2, #0
	read_params.func = cts_sync_read;
    17b2:	4c09      	ldr	r4, [pc, #36]	; (17d8 <cts_sync_service_discovered+0x50>)
	read_params.by_uuid.end_handle = 0xffff;
    17b4:	814b      	strh	r3, [r1, #10]
	m_read_buf.offset = 0;
    17b6:	4b09      	ldr	r3, [pc, #36]	; (17dc <cts_sync_service_discovered+0x54>)
	read_params.func = cts_sync_read;
    17b8:	600c      	str	r4, [r1, #0]
	memset(&read_params, 0, sizeof(read_params));
    17ba:	604a      	str	r2, [r1, #4]
	read_params.by_uuid.uuid = (struct bt_uuid *) &uuid;
    17bc:	4c08      	ldr	r4, [pc, #32]	; (17e0 <cts_sync_service_discovered+0x58>)
    17be:	60cc      	str	r4, [r1, #12]
	m_read_buf.offset = 0;
    17c0:	601a      	str	r2, [r3, #0]
	if (bt_gatt_read(conn, &read_params) < 0) {
    17c2:	f009 fb61 	bl	ae88 <bt_gatt_read>
	return BT_GATT_ITER_STOP;
    17c6:	e7ec      	b.n	17a2 <cts_sync_service_discovered+0x1a>
    17c8:	0002bf50 	.word	0x0002bf50
    17cc:	0002bf50 	.word	0x0002bf50
    17d0:	0002dd65 	.word	0x0002dd65
    17d4:	20001534 	.word	0x20001534
    17d8:	000017e5 	.word	0x000017e5
    17dc:	20001524 	.word	0x20001524
    17e0:	200080aa 	.word	0x200080aa

000017e4 <cts_sync_read>:
{
    17e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    17e6:	b087      	sub	sp, #28
    17e8:	4c23      	ldr	r4, [pc, #140]	; (1878 <cts_sync_read+0x94>)
    17ea:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
	if (!data || length <= 0) {
    17ee:	4619      	mov	r1, r3
    17f0:	b10b      	cbz	r3, 17f6 <cts_sync_read+0x12>
    17f2:	2d00      	cmp	r5, #0
    17f4:	d132      	bne.n	185c <cts_sync_read+0x78>
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    17f6:	88a6      	ldrh	r6, [r4, #4]
    17f8:	79e5      	ldrb	r5, [r4, #7]
    17fa:	7a22      	ldrb	r2, [r4, #8]
	    + cts_datetime->minutes + cts_datetime->seconds == 0) {
    17fc:	7a63      	ldrb	r3, [r4, #9]
    17fe:	7aa7      	ldrb	r7, [r4, #10]
    1800:	491e      	ldr	r1, [pc, #120]	; (187c <cts_sync_read+0x98>)
    1802:	4c1f      	ldr	r4, [pc, #124]	; (1880 <cts_sync_read+0x9c>)
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    1804:	1970      	adds	r0, r6, r5
    1806:	4410      	add	r0, r2
    1808:	1b09      	subs	r1, r1, r4
	    + cts_datetime->minutes + cts_datetime->seconds == 0) {
    180a:	4418      	add	r0, r3
    180c:	08c9      	lsrs	r1, r1, #3
	if (cts_datetime->year + cts_datetime->day + cts_datetime->hours
    180e:	19c4      	adds	r4, r0, r7
    1810:	ea4f 1181 	mov.w	r1, r1, lsl #6
    1814:	d107      	bne.n	1826 <cts_sync_read+0x42>
		LOG_WRN("Ignoring suspicious time data from companion application.");
    1816:	481b      	ldr	r0, [pc, #108]	; (1884 <cts_sync_read+0xa0>)
    1818:	f041 0102 	orr.w	r1, r1, #2
	LOG_INF("CTS sync to clock complete.");
    181c:	f021 fedc 	bl	235d8 <log_0>
		return BT_GATT_ITER_STOP;
    1820:	2000      	movs	r0, #0
}
    1822:	b007      	add	sp, #28
    1824:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("CTS sync to clock started.\n Y%04d D%03d T%2d:%2d:%2d",
    1826:	f041 0403 	orr.w	r4, r1, #3
    182a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    182e:	4816      	ldr	r0, [pc, #88]	; (1888 <cts_sync_read+0xa4>)
    1830:	9705      	str	r7, [sp, #20]
    1832:	4623      	mov	r3, r4
    1834:	2205      	movs	r2, #5
    1836:	a901      	add	r1, sp, #4
    1838:	e9cd 6501 	strd	r6, r5, [sp, #4]
    183c:	f021 ff22 	bl	23684 <log_n>
	memcpy(&clock_datetime, cts_datetime, sizeof(clock_datetime));
    1840:	4b12      	ldr	r3, [pc, #72]	; (188c <cts_sync_read+0xa8>)
    1842:	4a13      	ldr	r2, [pc, #76]	; (1890 <cts_sync_read+0xac>)
    1844:	cb03      	ldmia	r3!, {r0, r1}
    1846:	6010      	str	r0, [r2, #0]
    1848:	4618      	mov	r0, r3
    184a:	6051      	str	r1, [r2, #4]
    184c:	f830 3908 	ldrh.w	r3, [r0], #-8
    1850:	8113      	strh	r3, [r2, #8]
	clock_sync_time(cts_datetime);
    1852:	f7ff ff1f 	bl	1694 <clock_sync_time>
	LOG_INF("CTS sync to clock complete.");
    1856:	480f      	ldr	r0, [pc, #60]	; (1894 <cts_sync_read+0xb0>)
    1858:	4621      	mov	r1, r4
    185a:	e7df      	b.n	181c <cts_sync_read+0x38>
	memcpy(&m_read_buf.datetime + m_read_buf.offset, data, length);
    185c:	4623      	mov	r3, r4
    185e:	260a      	movs	r6, #10
    1860:	f853 0b04 	ldr.w	r0, [r3], #4
    1864:	462a      	mov	r2, r5
    1866:	fb06 3000 	mla	r0, r6, r0, r3
    186a:	f029 ff76 	bl	2b75a <memcpy>
	m_read_buf.offset += length;
    186e:	6823      	ldr	r3, [r4, #0]
    1870:	442b      	add	r3, r5
    1872:	6023      	str	r3, [r4, #0]
    1874:	2001      	movs	r0, #1
    1876:	e7d4      	b.n	1822 <cts_sync_read+0x3e>
    1878:	20001524 	.word	0x20001524
    187c:	0002bf50 	.word	0x0002bf50
    1880:	0002bf50 	.word	0x0002bf50
    1884:	0002dd85 	.word	0x0002dd85
    1888:	0002ddbf 	.word	0x0002ddbf
    188c:	20001528 	.word	0x20001528
    1890:	200080a0 	.word	0x200080a0
    1894:	0002ddf4 	.word	0x0002ddf4

00001898 <cts_sync_init>:
{
    1898:	b508      	push	{r3, lr}
    189a:	4908      	ldr	r1, [pc, #32]	; (18bc <cts_sync_init+0x24>)
    189c:	4b08      	ldr	r3, [pc, #32]	; (18c0 <cts_sync_init+0x28>)
	LOG_INF("CTS sync init\n");
    189e:	4809      	ldr	r0, [pc, #36]	; (18c4 <cts_sync_init+0x2c>)
    18a0:	1ac9      	subs	r1, r1, r3
    18a2:	08c9      	lsrs	r1, r1, #3
    18a4:	0189      	lsls	r1, r1, #6
    18a6:	f041 0103 	orr.w	r1, r1, #3
    18aa:	f021 fe95 	bl	235d8 <log_0>
}
    18ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_timer_init(&m_cts_sync_timer, cts_sync_timer_timeout_handler, NULL);
    18b2:	4905      	ldr	r1, [pc, #20]	; (18c8 <cts_sync_init+0x30>)
    18b4:	4805      	ldr	r0, [pc, #20]	; (18cc <cts_sync_init+0x34>)
    18b6:	2200      	movs	r2, #0
    18b8:	f029 bd95 	b.w	2b3e6 <k_timer_init>
    18bc:	0002bf50 	.word	0x0002bf50
    18c0:	0002bf50 	.word	0x0002bf50
    18c4:	0002de10 	.word	0x0002de10
    18c8:	0000170d 	.word	0x0000170d
    18cc:	20000d68 	.word	0x20000d68

000018d0 <cts_sync_enable>:
{
    18d0:	b507      	push	{r0, r1, r2, lr}
	if (enable) {
    18d2:	b160      	cbz	r0, 18ee <cts_sync_enable+0x1e>
	z_impl_k_timer_start(timer, duration, period);
    18d4:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
    18d8:	2300      	movs	r3, #0
    18da:	e9cd 2300 	strd	r2, r3, [sp]
    18de:	4807      	ldr	r0, [pc, #28]	; (18fc <cts_sync_enable+0x2c>)
    18e0:	2200      	movs	r2, #0
    18e2:	2300      	movs	r3, #0
    18e4:	f01e ff10 	bl	20708 <z_impl_k_timer_start>
}
    18e8:	b003      	add	sp, #12
    18ea:	f85d fb04 	ldr.w	pc, [sp], #4
	z_impl_k_timer_stop(timer);
    18ee:	4803      	ldr	r0, [pc, #12]	; (18fc <cts_sync_enable+0x2c>)
    18f0:	b003      	add	sp, #12
    18f2:	f85d eb04 	ldr.w	lr, [sp], #4
    18f6:	f029 bd82 	b.w	2b3fe <z_impl_k_timer_stop>
    18fa:	bf00      	nop
    18fc:	20000d68 	.word	0x20000d68

00001900 <display_timer_handler>:
    1900:	4909      	ldr	r1, [pc, #36]	; (1928 <display_timer_handler+0x28>)
    1902:	f3bf 8f5b 	dmb	ish
    1906:	e851 3f00 	ldrex	r3, [r1]
    190a:	f043 0201 	orr.w	r2, r3, #1
    190e:	e841 2000 	strex	r0, r2, [r1]
    1912:	2800      	cmp	r0, #0
    1914:	d1f7      	bne.n	1906 <display_timer_handler+0x6>
    1916:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    191a:	07db      	lsls	r3, r3, #31
    191c:	d403      	bmi.n	1926 <display_timer_handler+0x26>
		k_queue_append(&work_q->queue, work);
    191e:	4803      	ldr	r0, [pc, #12]	; (192c <display_timer_handler+0x2c>)
    1920:	3908      	subs	r1, #8
    1922:	f029 bb0d 	b.w	2af40 <k_queue_append>
/*                                                                           */
/*---------------------------------------------------------------------------*/
void display_timer_handler(struct k_timer * timer)
{
	k_work_submit(&display_work);
}
    1926:	4770      	bx	lr
    1928:	200001f8 	.word	0x200001f8
    192c:	20001438 	.word	0x20001438

00001930 <display_time_set_label>:
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*---------------------------------------------------------------------------*/
void display_time_set_label(char *str)
{
	lv_label_set_text(time_label, str);
    1930:	4b02      	ldr	r3, [pc, #8]	; (193c <display_time_set_label+0xc>)
{
    1932:	4601      	mov	r1, r0
	lv_label_set_text(time_label, str);
    1934:	6818      	ldr	r0, [r3, #0]
    1936:	f029 b966 	b.w	2ac06 <lv_label_set_text>
    193a:	bf00      	nop
    193c:	20001570 	.word	0x20001570

00001940 <display_date_set_label>:
	// lv_obj_align(time_label, NULL, LV_ALIGN_CENTER, 0, 0);
}

void display_date_set_label(char *str)
{
	lv_label_set_text(date_label, str);
    1940:	4b02      	ldr	r3, [pc, #8]	; (194c <display_date_set_label+0xc>)
{
    1942:	4601      	mov	r1, r0
	lv_label_set_text(date_label, str);
    1944:	6818      	ldr	r0, [r3, #0]
    1946:	f029 b95e 	b.w	2ac06 <lv_label_set_text>
    194a:	bf00      	nop
    194c:	2000154c 	.word	0x2000154c

00001950 <display_set_bluetooth_connected>:
/*                                                                           */
/*---------------------------------------------------------------------------*/
//todo if no touch screen define real button ds_d6

void display_set_bluetooth_connected()
{
    1950:	b513      	push	{r0, r1, r4, lr}
  /* title label */
        title_label = lv_label_create(lv_scr_act(), NULL);
    1952:	f021 f93c 	bl	22bce <lv_scr_act>
    1956:	2100      	movs	r1, #0
    1958:	f01d fb80 	bl	1f05c <lv_label_create>
    195c:	4c07      	ldr	r4, [pc, #28]	; (197c <display_set_bluetooth_connected+0x2c>)
        lv_obj_align(title_label, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    195e:	2300      	movs	r3, #0
    1960:	4619      	mov	r1, r3
    1962:	9300      	str	r3, [sp, #0]
    1964:	2201      	movs	r2, #1
        title_label = lv_label_create(lv_scr_act(), NULL);
    1966:	6020      	str	r0, [r4, #0]
        lv_obj_align(title_label, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    1968:	f024 fd12 	bl	26390 <lv_obj_align>
        //lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH"symb");
        //lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH);
        lv_label_set_text(title_label, LV_SYMBOL_WIFI);
    196c:	4904      	ldr	r1, [pc, #16]	; (1980 <display_set_bluetooth_connected+0x30>)
    196e:	6820      	ldr	r0, [r4, #0]

}
    1970:	b002      	add	sp, #8
    1972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_label_set_text(title_label, LV_SYMBOL_WIFI);
    1976:	f029 b946 	b.w	2ac06 <lv_label_set_text>
    197a:	bf00      	nop
    197c:	20001574 	.word	0x20001574
    1980:	0002de1f 	.word	0x0002de1f

00001984 <display_set_bluetooth_disconnected>:


void display_set_bluetooth_disconnected()
{
    1984:	b513      	push	{r0, r1, r4, lr}
  /* title label */
        title_label = lv_label_create(lv_scr_act(), NULL);
    1986:	f021 f922 	bl	22bce <lv_scr_act>
    198a:	2100      	movs	r1, #0
    198c:	f01d fb66 	bl	1f05c <lv_label_create>
    1990:	4c07      	ldr	r4, [pc, #28]	; (19b0 <display_set_bluetooth_disconnected+0x2c>)
        lv_obj_align(title_label, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    1992:	2300      	movs	r3, #0
    1994:	4619      	mov	r1, r3
    1996:	9300      	str	r3, [sp, #0]
    1998:	2201      	movs	r2, #1
        title_label = lv_label_create(lv_scr_act(), NULL);
    199a:	6020      	str	r0, [r4, #0]
        lv_obj_align(title_label, NULL, LV_ALIGN_IN_TOP_LEFT, 0, 0);
    199c:	f024 fcf8 	bl	26390 <lv_obj_align>
        //lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH"symb");
        lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH);
    19a0:	4904      	ldr	r1, [pc, #16]	; (19b4 <display_set_bluetooth_disconnected+0x30>)
    19a2:	6820      	ldr	r0, [r4, #0]
        //lv_label_set_text(title_label, LV_SYMBOL_WIFI);

}
    19a4:	b002      	add	sp, #8
    19a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        lv_label_set_text(title_label, LV_SYMBOL_BLUETOOTH);
    19aa:	f029 b92c 	b.w	2ac06 <lv_label_set_text>
    19ae:	bf00      	nop
    19b0:	20001574 	.word	0x20001574
    19b4:	0002de23 	.word	0x0002de23

000019b8 <display_battery>:



void display_battery(enum battery_symbol s)
{
        switch (s) {
    19b8:	4a0b      	ldr	r2, [pc, #44]	; (19e8 <display_battery+0x30>)
{
    19ba:	4603      	mov	r3, r0
    19bc:	6810      	ldr	r0, [r2, #0]
    19be:	2b04      	cmp	r3, #4
    19c0:	d80f      	bhi.n	19e2 <display_battery+0x2a>
    19c2:	e8df f003 	tbb	[pc, r3]
    19c6:	0603      	.short	0x0603
    19c8:	0a08      	.short	0x0a08
    19ca:	0c          	.byte	0x0c
    19cb:	00          	.byte	0x00
                case BAT_CHARGE:
                        lv_label_set_text(battery_label, LV_SYMBOL_CHARGE);
    19cc:	4907      	ldr	r1, [pc, #28]	; (19ec <display_battery+0x34>)
                        break;
                case BAT_1:
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_1);
                        break;
                default:
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_EMPTY);
    19ce:	f029 b91a 	b.w	2ac06 <lv_label_set_text>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_FULL);
    19d2:	4907      	ldr	r1, [pc, #28]	; (19f0 <display_battery+0x38>)
    19d4:	e7fb      	b.n	19ce <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_3);
    19d6:	4907      	ldr	r1, [pc, #28]	; (19f4 <display_battery+0x3c>)
    19d8:	e7f9      	b.n	19ce <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_2);
    19da:	4907      	ldr	r1, [pc, #28]	; (19f8 <display_battery+0x40>)
    19dc:	e7f7      	b.n	19ce <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_1);
    19de:	4907      	ldr	r1, [pc, #28]	; (19fc <display_battery+0x44>)
    19e0:	e7f5      	b.n	19ce <display_battery+0x16>
                        lv_label_set_text(battery_label, LV_SYMBOL_BATTERY_EMPTY);
    19e2:	4907      	ldr	r1, [pc, #28]	; (1a00 <display_battery+0x48>)
    19e4:	e7f3      	b.n	19ce <display_battery+0x16>
    19e6:	bf00      	nop
    19e8:	20001544 	.word	0x20001544
    19ec:	0002de27 	.word	0x0002de27
    19f0:	0002de2b 	.word	0x0002de2b
    19f4:	0002de2f 	.word	0x0002de2f
    19f8:	0002de33 	.word	0x0002de33
    19fc:	0002de37 	.word	0x0002de37
    1a00:	0002de3b 	.word	0x0002de3b

00001a04 <display_btn_event>:
	static int screen_id = 0;  // init to first screen id
	static int param_id  = 0;  // init to first parameter index

	//LOG_INF("%s: BTN%d", __func__, btn_id);

	switch (btn_id) {
    1a04:	2801      	cmp	r0, #1
{
    1a06:	b510      	push	{r4, lr}
	switch (btn_id) {
    1a08:	d01f      	beq.n	1a4a <display_btn_event+0x46>
    1a0a:	2802      	cmp	r0, #2
    1a0c:	d13d      	bne.n	1a8a <display_btn_event+0x86>

		case BTN1_LONG:
			screen_id++;
    1a0e:	4c1f      	ldr	r4, [pc, #124]	; (1a8c <display_btn_event+0x88>)
    1a10:	6823      	ldr	r3, [r4, #0]
    1a12:	3301      	adds	r3, #1
			if (screen_id >= SCREEN_COUNT)
    1a14:	2b03      	cmp	r3, #3
				screen_id = 0;
    1a16:	bfc8      	it	gt
    1a18:	2300      	movgt	r3, #0
    1a1a:	6023      	str	r3, [r4, #0]
			lv_scr_load(screens[screen_id].screen);
    1a1c:	6822      	ldr	r2, [r4, #0]
    1a1e:	230c      	movs	r3, #12
    1a20:	4353      	muls	r3, r2
    return lv_disp_get_layer_sys(lv_disp_get_default());
}

static inline void lv_scr_load(lv_obj_t * scr)
{
    lv_disp_load_scr(scr);
    1a22:	4a1b      	ldr	r2, [pc, #108]	; (1a90 <display_btn_event+0x8c>)
    1a24:	58d0      	ldr	r0, [r2, r3]
    1a26:	f024 fb84 	bl	26132 <lv_disp_load_scr>
			param_id = 0;
    1a2a:	4b1a      	ldr	r3, [pc, #104]	; (1a94 <display_btn_event+0x90>)
			LOG_INF("BTN1: screen_id(%d)", screen_id);
    1a2c:	6821      	ldr	r1, [r4, #0]
    1a2e:	481a      	ldr	r0, [pc, #104]	; (1a98 <display_btn_event+0x94>)
			param_id = 0;
    1a30:	2200      	movs	r2, #0
    1a32:	601a      	str	r2, [r3, #0]
    1a34:	4a19      	ldr	r2, [pc, #100]	; (1a9c <display_btn_event+0x98>)
    1a36:	4b1a      	ldr	r3, [pc, #104]	; (1aa0 <display_btn_event+0x9c>)
    1a38:	1ad2      	subs	r2, r2, r3
    1a3a:	08d2      	lsrs	r2, r2, #3
			LOG_INF("BTN1: screen_id(%d)", screen_id);
    1a3c:	0192      	lsls	r2, r2, #6


		default:
			break;
	}
}
    1a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_INF("BTN1: screen_id(%d)", screen_id);
    1a42:	f042 0203 	orr.w	r2, r2, #3
    1a46:	f021 bdd4 	b.w	235f2 <log_1>
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a4a:	4a10      	ldr	r2, [pc, #64]	; (1a8c <display_btn_event+0x88>)
    1a4c:	4c10      	ldr	r4, [pc, #64]	; (1a90 <display_btn_event+0x8c>)
    1a4e:	6811      	ldr	r1, [r2, #0]
			param_id++;
    1a50:	4b10      	ldr	r3, [pc, #64]	; (1a94 <display_btn_event+0x90>)
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a52:	220c      	movs	r2, #12
    1a54:	fb02 4201 	mla	r2, r2, r1, r4
			param_id++;
    1a58:	6818      	ldr	r0, [r3, #0]
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a5a:	6852      	ldr	r2, [r2, #4]
			param_id++;
    1a5c:	3001      	adds	r0, #1
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a5e:	4290      	cmp	r0, r2
			param_id++;
    1a60:	6018      	str	r0, [r3, #0]
			if (param_id >= screens[screen_id].count)  param_id = 0;
    1a62:	461a      	mov	r2, r3
    1a64:	db0e      	blt.n	1a84 <display_btn_event+0x80>
    1a66:	2300      	movs	r3, #0
    1a68:	6013      	str	r3, [r2, #0]
    1a6a:	480d      	ldr	r0, [pc, #52]	; (1aa0 <display_btn_event+0x9c>)
    1a6c:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <display_btn_event+0x98>)
			LOG_INF("BTN2: screen_id(%d) param_id(%d)", screen_id, param_id);
    1a6e:	6812      	ldr	r2, [r2, #0]
    1a70:	1a1b      	subs	r3, r3, r0
    1a72:	08db      	lsrs	r3, r3, #3
    1a74:	019b      	lsls	r3, r3, #6
}
    1a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			LOG_INF("BTN2: screen_id(%d) param_id(%d)", screen_id, param_id);
    1a7a:	480a      	ldr	r0, [pc, #40]	; (1aa4 <display_btn_event+0xa0>)
    1a7c:	f043 0303 	orr.w	r3, r3, #3
    1a80:	f021 bdcb 	b.w	2361a <log_2>
			if (param_id < 0)                          param_id = 0;
    1a84:	2800      	cmp	r0, #0
    1a86:	dbee      	blt.n	1a66 <display_btn_event+0x62>
    1a88:	e7ef      	b.n	1a6a <display_btn_event+0x66>
}
    1a8a:	bd10      	pop	{r4, pc}
    1a8c:	2000156c 	.word	0x2000156c
    1a90:	200002dc 	.word	0x200002dc
    1a94:	20001554 	.word	0x20001554
    1a98:	0002de3f 	.word	0x0002de3f
    1a9c:	0002c040 	.word	0x0002c040
    1aa0:	0002bf50 	.word	0x0002bf50
    1aa4:	0002de53 	.word	0x0002de53

00001aa8 <display_screens_init>:

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*---------------------------------------------------------------------------*/
void display_screens_init(void)
{
    1aa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	screens[0].screen = lv_obj_create(NULL, NULL);
    1aac:	2100      	movs	r1, #0
    1aae:	4608      	mov	r0, r1
    1ab0:	f018 fc2e 	bl	1a310 <lv_obj_create>
    1ab4:	4d97      	ldr	r5, [pc, #604]	; (1d14 <display_screens_init+0x26c>)
	lv_obj_align(screen1_page, screens[1].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);

	// to avoid creating the same button all over again jj
	display_button();

	screen1_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1ab6:	4f98      	ldr	r7, [pc, #608]	; (1d18 <display_screens_init+0x270>)
	screens[0].screen = lv_obj_create(NULL, NULL);
    1ab8:	6028      	str	r0, [r5, #0]
	screens[1].screen = lv_obj_create(NULL, NULL);
    1aba:	2100      	movs	r1, #0
    1abc:	4608      	mov	r0, r1
    1abe:	f018 fc27 	bl	1a310 <lv_obj_create>
	screens[2].screen = lv_obj_create(NULL, NULL);
    1ac2:	2100      	movs	r1, #0
	screens[1].screen = lv_obj_create(NULL, NULL);
    1ac4:	60e8      	str	r0, [r5, #12]
	screens[2].screen = lv_obj_create(NULL, NULL);
    1ac6:	4608      	mov	r0, r1
    1ac8:	f018 fc22 	bl	1a310 <lv_obj_create>
	screens[3].screen = lv_obj_create(NULL, NULL);
    1acc:	2100      	movs	r1, #0
	screens[2].screen = lv_obj_create(NULL, NULL);
    1ace:	61a8      	str	r0, [r5, #24]
	screens[3].screen = lv_obj_create(NULL, NULL);
    1ad0:	4608      	mov	r0, r1
    1ad2:	f018 fc1d 	bl	1a310 <lv_obj_create>
    1ad6:	6268      	str	r0, [r5, #36]	; 0x24
    1ad8:	6828      	ldr	r0, [r5, #0]
    1ada:	f024 fb2a 	bl	26132 <lv_disp_load_scr>
	lv_obj_t * screen0_label = lv_label_create(lv_scr_act(), NULL);
    1ade:	f021 f876 	bl	22bce <lv_scr_act>
    1ae2:	2100      	movs	r1, #0
    1ae4:	f01d faba 	bl	1f05c <lv_label_create>
	lv_obj_align(screen0_label, screens[0].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1ae8:	2400      	movs	r4, #0
	lv_obj_t * screen0_label = lv_label_create(lv_scr_act(), NULL);
    1aea:	4606      	mov	r6, r0
	lv_label_set_text(screen0_label, "Pg1");
    1aec:	498b      	ldr	r1, [pc, #556]	; (1d1c <display_screens_init+0x274>)
    1aee:	f029 f88a 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen0_label, screens[0].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1af2:	4623      	mov	r3, r4
    1af4:	6829      	ldr	r1, [r5, #0]
    1af6:	9400      	str	r4, [sp, #0]
    1af8:	2203      	movs	r2, #3
    1afa:	4630      	mov	r0, r6
    1afc:	f024 fc48 	bl	26390 <lv_obj_align>
	time_label = lv_label_create(lv_scr_act(), NULL);
    1b00:	f021 f865 	bl	22bce <lv_scr_act>
    1b04:	4621      	mov	r1, r4
    1b06:	f01d faa9 	bl	1f05c <lv_label_create>
    1b0a:	4e85      	ldr	r6, [pc, #532]	; (1d20 <display_screens_init+0x278>)
	lv_obj_align(time_label, NULL, LV_ALIGN_IN_TOP_MID, 0, 0); //jj
    1b0c:	4623      	mov	r3, r4
    1b0e:	2202      	movs	r2, #2
	time_label = lv_label_create(lv_scr_act(), NULL);
    1b10:	6030      	str	r0, [r6, #0]
	lv_obj_align(time_label, NULL, LV_ALIGN_IN_TOP_MID, 0, 0); //jj
    1b12:	4621      	mov	r1, r4
    1b14:	9400      	str	r4, [sp, #0]
    1b16:	f024 fc3b 	bl	26390 <lv_obj_align>
	lv_label_set_text(time_label, "00:00");
    1b1a:	4982      	ldr	r1, [pc, #520]	; (1d24 <display_screens_init+0x27c>)
    1b1c:	6830      	ldr	r0, [r6, #0]
	date_label = lv_label_create(lv_scr_act(), NULL);
    1b1e:	4e82      	ldr	r6, [pc, #520]	; (1d28 <display_screens_init+0x280>)
	lv_label_set_text(time_label, "00:00");
    1b20:	f029 f871 	bl	2ac06 <lv_label_set_text>
	date_label = lv_label_create(lv_scr_act(), NULL);
    1b24:	f021 f853 	bl	22bce <lv_scr_act>
    1b28:	4621      	mov	r1, r4
    1b2a:	f01d fa97 	bl	1f05c <lv_label_create>
	lv_obj_align(date_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    1b2e:	4623      	mov	r3, r4
    1b30:	2205      	movs	r2, #5
	date_label = lv_label_create(lv_scr_act(), NULL);
    1b32:	6030      	str	r0, [r6, #0]
	lv_obj_align(date_label, NULL, LV_ALIGN_IN_BOTTOM_MID, 0, 0);
    1b34:	4621      	mov	r1, r4
    1b36:	9400      	str	r4, [sp, #0]
    1b38:	f024 fc2a 	bl	26390 <lv_obj_align>
	lv_label_set_text(date_label, "Mon 10 Jan");
    1b3c:	497b      	ldr	r1, [pc, #492]	; (1d2c <display_screens_init+0x284>)
    1b3e:	6830      	ldr	r0, [r6, #0]
	battery_label = lv_label_create(lv_scr_act(), NULL);
    1b40:	4e7b      	ldr	r6, [pc, #492]	; (1d30 <display_screens_init+0x288>)
	lv_label_set_text(date_label, "Mon 10 Jan");
    1b42:	f029 f860 	bl	2ac06 <lv_label_set_text>
        display_set_bluetooth_disconnected(); //sets the bluetooth symbol
    1b46:	f7ff ff1d 	bl	1984 <display_set_bluetooth_disconnected>
	battery_label = lv_label_create(lv_scr_act(), NULL);
    1b4a:	f021 f840 	bl	22bce <lv_scr_act>
    1b4e:	4621      	mov	r1, r4
    1b50:	f01d fa84 	bl	1f05c <lv_label_create>
    1b54:	6030      	str	r0, [r6, #0]
	display_battery(BAT_3); //todo just demo value -- need real level
    1b56:	2002      	movs	r0, #2
    1b58:	f7ff ff2e 	bl	19b8 <display_battery>
        lv_obj_align(battery_label, NULL, LV_ALIGN_IN_BOTTOM_LEFT, 0, 0);
    1b5c:	9400      	str	r4, [sp, #0]
    1b5e:	4623      	mov	r3, r4
    1b60:	2204      	movs	r2, #4
    1b62:	4621      	mov	r1, r4
    1b64:	6830      	ldr	r0, [r6, #0]
    1b66:	f024 fc13 	bl	26390 <lv_obj_align>
    1b6a:	68e8      	ldr	r0, [r5, #12]
    1b6c:	f024 fae1 	bl	26132 <lv_disp_load_scr>
	lv_obj_t * screen1_page = lv_label_create(lv_scr_act(), NULL);
    1b70:	f021 f82d 	bl	22bce <lv_scr_act>
    1b74:	4621      	mov	r1, r4
    1b76:	f01d fa71 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen1_page, "Pg2");
    1b7a:	496e      	ldr	r1, [pc, #440]	; (1d34 <display_screens_init+0x28c>)
	lv_obj_t * screen1_page = lv_label_create(lv_scr_act(), NULL);
    1b7c:	4606      	mov	r6, r0
	lv_label_set_text(screen1_page, "Pg2");
    1b7e:	f029 f842 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen1_page, screens[1].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1b82:	4623      	mov	r3, r4
    1b84:	2203      	movs	r2, #3
    1b86:	68e9      	ldr	r1, [r5, #12]
    1b88:	9400      	str	r4, [sp, #0]
    1b8a:	4630      	mov	r0, r6
    1b8c:	f024 fc00 	bl	26390 <lv_obj_align>
	screen1_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1b90:	f021 f81d 	bl	22bce <lv_scr_act>
    1b94:	4621      	mov	r1, r4
    1b96:	f01d fa61 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen1_label0_obj, "0");
    1b9a:	4e67      	ldr	r6, [pc, #412]	; (1d38 <display_screens_init+0x290>)
	screen1_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1b9c:	6038      	str	r0, [r7, #0]
	lv_label_set_text(screen1_label0_obj, "0");
    1b9e:	4631      	mov	r1, r6
	lv_obj_align(screen1_label0_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1ba0:	f06f 0804 	mvn.w	r8, #4
	lv_label_set_text(screen1_label0_obj, "0");
    1ba4:	f029 f82f 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen1_label0_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1ba8:	f8cd 8000 	str.w	r8, [sp]
    1bac:	2305      	movs	r3, #5
    1bae:	2204      	movs	r2, #4
    1bb0:	68e9      	ldr	r1, [r5, #12]
    1bb2:	6838      	ldr	r0, [r7, #0]

	screen1_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1bb4:	4f61      	ldr	r7, [pc, #388]	; (1d3c <display_screens_init+0x294>)
	lv_obj_align(screen1_label0_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_LEFT, 5, -5);
    1bb6:	f024 fbeb 	bl	26390 <lv_obj_align>
	screen1_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1bba:	f021 f808 	bl	22bce <lv_scr_act>
    1bbe:	4621      	mov	r1, r4
    1bc0:	f01d fa4c 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen1_label1_obj, "0");
    1bc4:	4631      	mov	r1, r6
	screen1_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1bc6:	6038      	str	r0, [r7, #0]
	lv_label_set_text(screen1_label1_obj, "0");
    1bc8:	f029 f81d 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen1_label1_obj, screens[1].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -15, -5);
    1bcc:	f8cd 8000 	str.w	r8, [sp]
    1bd0:	f06f 030e 	mvn.w	r3, #14
    1bd4:	2206      	movs	r2, #6
    1bd6:	68e9      	ldr	r1, [r5, #12]
    1bd8:	6838      	ldr	r0, [r7, #0]
    1bda:	f024 fbd9 	bl	26390 <lv_obj_align>
    1bde:	69a8      	ldr	r0, [r5, #24]
    1be0:	f024 faa7 	bl	26132 <lv_disp_load_scr>

	/*
	 *  build basic screen2
	 */
	lv_scr_load(screens[2].screen);
	lv_obj_t * screen2_page = lv_label_create(lv_scr_act(), NULL);
    1be4:	f020 fff3 	bl	22bce <lv_scr_act>
    1be8:	4621      	mov	r1, r4
    1bea:	f01d fa37 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen2_page, "Pg3");
    1bee:	4954      	ldr	r1, [pc, #336]	; (1d40 <display_screens_init+0x298>)
	lv_obj_t * screen2_page = lv_label_create(lv_scr_act(), NULL);
    1bf0:	4607      	mov	r7, r0
	lv_label_set_text(screen2_page, "Pg3");
    1bf2:	f029 f808 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_page, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1bf6:	4623      	mov	r3, r4
    1bf8:	2203      	movs	r2, #3
    1bfa:	69a9      	ldr	r1, [r5, #24]
    1bfc:	9400      	str	r4, [sp, #0]
    1bfe:	4638      	mov	r0, r7
    1c00:	f024 fbc6 	bl	26390 <lv_obj_align>
	// why define the same button all over again? jj
	display_button();

	//
	lv_obj_t * screen2_label0_tag = lv_label_create(lv_scr_act(), NULL);
    1c04:	f020 ffe3 	bl	22bce <lv_scr_act>
    1c08:	4621      	mov	r1, r4
    1c0a:	f01d fa27 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen2_label0_tag, "value-0");
	lv_obj_align(screen2_label0_tag, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, -70, 2);
    1c0e:	f04f 0802 	mov.w	r8, #2
	lv_obj_t * screen2_label0_tag = lv_label_create(lv_scr_act(), NULL);
    1c12:	4607      	mov	r7, r0
	lv_label_set_text(screen2_label0_tag, "value-0");
    1c14:	494b      	ldr	r1, [pc, #300]	; (1d44 <display_screens_init+0x29c>)
    1c16:	f028 fff6 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_label0_tag, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, -70, 2);
    1c1a:	f06f 0345 	mvn.w	r3, #69	; 0x45
    1c1e:	2203      	movs	r2, #3
    1c20:	69a9      	ldr	r1, [r5, #24]
    1c22:	f8cd 8000 	str.w	r8, [sp]
    1c26:	4638      	mov	r0, r7
    1c28:	f024 fbb2 	bl	26390 <lv_obj_align>

	screen2_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1c2c:	f020 ffcf 	bl	22bce <lv_scr_act>
    1c30:	4621      	mov	r1, r4
    1c32:	f01d fa13 	bl	1f05c <lv_label_create>
    1c36:	4f44      	ldr	r7, [pc, #272]	; (1d48 <display_screens_init+0x2a0>)
	lv_label_set_text(screen2_label0_obj, "0");
    1c38:	4631      	mov	r1, r6
	screen2_label0_obj = lv_label_create(lv_scr_act(), NULL);
    1c3a:	6038      	str	r0, [r7, #0]
	lv_label_set_text(screen2_label0_obj, "0");
    1c3c:	f028 ffe3 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_label0_obj, screens[2].screen, LV_ALIGN_IN_TOP_RIGHT, -45, 2);
    1c40:	f8cd 8000 	str.w	r8, [sp]
    1c44:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1c48:	2203      	movs	r2, #3
    1c4a:	69a9      	ldr	r1, [r5, #24]
    1c4c:	6838      	ldr	r0, [r7, #0]
    1c4e:	f024 fb9f 	bl	26390 <lv_obj_align>

	//
	lv_obj_t * screen2_label1_tag = lv_label_create(lv_scr_act(), NULL);
    1c52:	f020 ffbc 	bl	22bce <lv_scr_act>
    1c56:	4621      	mov	r1, r4
    1c58:	f01d fa00 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen2_label1_tag, "value-1");
    1c5c:	493b      	ldr	r1, [pc, #236]	; (1d4c <display_screens_init+0x2a4>)
	lv_obj_t * screen2_label1_tag = lv_label_create(lv_scr_act(), NULL);
    1c5e:	4607      	mov	r7, r0
	lv_label_set_text(screen2_label1_tag, "value-1");
    1c60:	f028 ffd1 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_label1_tag, screens[2].screen, LV_ALIGN_IN_RIGHT_MID, -70, 0);
    1c64:	f06f 0345 	mvn.w	r3, #69	; 0x45
    1c68:	2208      	movs	r2, #8
    1c6a:	69a9      	ldr	r1, [r5, #24]
    1c6c:	9400      	str	r4, [sp, #0]
    1c6e:	4638      	mov	r0, r7
    1c70:	f024 fb8e 	bl	26390 <lv_obj_align>

	screen2_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1c74:	f020 ffab 	bl	22bce <lv_scr_act>
    1c78:	4621      	mov	r1, r4
    1c7a:	f01d f9ef 	bl	1f05c <lv_label_create>
    1c7e:	4f34      	ldr	r7, [pc, #208]	; (1d50 <display_screens_init+0x2a8>)
	lv_label_set_text(screen2_label1_obj, "0");
    1c80:	4631      	mov	r1, r6
	screen2_label1_obj = lv_label_create(lv_scr_act(), NULL);
    1c82:	6038      	str	r0, [r7, #0]
	lv_label_set_text(screen2_label1_obj, "0");
    1c84:	f028 ffbf 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_label1_obj, screens[2].screen, LV_ALIGN_IN_RIGHT_MID, -45, 0);
    1c88:	9400      	str	r4, [sp, #0]
    1c8a:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1c8e:	2208      	movs	r2, #8
    1c90:	69a9      	ldr	r1, [r5, #24]
    1c92:	6838      	ldr	r0, [r7, #0]
    1c94:	f024 fb7c 	bl	26390 <lv_obj_align>

	//
	lv_obj_t * screen2_value2_tag = lv_label_create(lv_scr_act(), NULL);
    1c98:	f020 ff99 	bl	22bce <lv_scr_act>
    1c9c:	4621      	mov	r1, r4
    1c9e:	f01d f9dd 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen2_value2_tag, "value-2");
	lv_obj_align(screen2_value2_tag, screens[2].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -70, -2);
    1ca2:	f06f 0801 	mvn.w	r8, #1
	lv_obj_t * screen2_value2_tag = lv_label_create(lv_scr_act(), NULL);
    1ca6:	4607      	mov	r7, r0
	lv_label_set_text(screen2_value2_tag, "value-2");
    1ca8:	492a      	ldr	r1, [pc, #168]	; (1d54 <display_screens_init+0x2ac>)
    1caa:	f028 ffac 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_value2_tag, screens[2].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -70, -2);
    1cae:	f06f 0345 	mvn.w	r3, #69	; 0x45
    1cb2:	2206      	movs	r2, #6
    1cb4:	69a9      	ldr	r1, [r5, #24]
    1cb6:	f8cd 8000 	str.w	r8, [sp]
    1cba:	4638      	mov	r0, r7
    1cbc:	f024 fb68 	bl	26390 <lv_obj_align>

	screen2_label2_obj = lv_label_create(lv_scr_act(), NULL);
    1cc0:	f020 ff85 	bl	22bce <lv_scr_act>
    1cc4:	4621      	mov	r1, r4
    1cc6:	f01d f9c9 	bl	1f05c <lv_label_create>
    1cca:	4f23      	ldr	r7, [pc, #140]	; (1d58 <display_screens_init+0x2b0>)
	lv_label_set_text(screen2_label2_obj, "0");
    1ccc:	4631      	mov	r1, r6
	screen2_label2_obj = lv_label_create(lv_scr_act(), NULL);
    1cce:	6038      	str	r0, [r7, #0]
	lv_label_set_text(screen2_label2_obj, "0");
    1cd0:	f028 ff99 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen2_label2_obj, screens[2].screen, LV_ALIGN_IN_BOTTOM_RIGHT, -45, -2);
    1cd4:	f8cd 8000 	str.w	r8, [sp]
    1cd8:	f06f 032c 	mvn.w	r3, #44	; 0x2c
    1cdc:	2206      	movs	r2, #6
    1cde:	69a9      	ldr	r1, [r5, #24]
    1ce0:	6838      	ldr	r0, [r7, #0]
    1ce2:	f024 fb55 	bl	26390 <lv_obj_align>
    1ce6:	6a68      	ldr	r0, [r5, #36]	; 0x24
    1ce8:	f024 fa23 	bl	26132 <lv_disp_load_scr>

	/*
	 *  build basic screen3
	 */
	lv_scr_load(screens[3].screen);
	lv_obj_t * screen3_page = lv_label_create(lv_scr_act(), NULL);
    1cec:	f020 ff6f 	bl	22bce <lv_scr_act>
    1cf0:	4621      	mov	r1, r4
    1cf2:	f01d f9b3 	bl	1f05c <lv_label_create>
	lv_label_set_text(screen3_page, "Sc4");
    1cf6:	4919      	ldr	r1, [pc, #100]	; (1d5c <display_screens_init+0x2b4>)
	lv_obj_t * screen3_page = lv_label_create(lv_scr_act(), NULL);
    1cf8:	4606      	mov	r6, r0
	lv_label_set_text(screen3_page, "Sc4");
    1cfa:	f028 ff84 	bl	2ac06 <lv_label_set_text>
	lv_obj_align(screen3_page, screens[3].screen, LV_ALIGN_IN_TOP_RIGHT, 0, 0);
    1cfe:	6a69      	ldr	r1, [r5, #36]	; 0x24
    1d00:	9400      	str	r4, [sp, #0]
    1d02:	4623      	mov	r3, r4
    1d04:	2203      	movs	r2, #3
    1d06:	4630      	mov	r0, r6
    1d08:	f024 fb42 	bl	26390 <lv_obj_align>
	display_button();

	//	lv_obj_t * icon_3 = lv_img_create(lv_scr_act(), NULL);
	//	lv_img_set_src(icon_3, &icon3);
	//	lv_obj_align(icon_3, NULL, LV_ALIGN_CENTER, 0, 0);
}
    1d0c:	b002      	add	sp, #8
    1d0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1d12:	bf00      	nop
    1d14:	200002dc 	.word	0x200002dc
    1d18:	20001558 	.word	0x20001558
    1d1c:	0002de74 	.word	0x0002de74
    1d20:	20001570 	.word	0x20001570
    1d24:	0002de78 	.word	0x0002de78
    1d28:	2000154c 	.word	0x2000154c
    1d2c:	0002de7e 	.word	0x0002de7e
    1d30:	20001544 	.word	0x20001544
    1d34:	0002de89 	.word	0x0002de89
    1d38:	000305de 	.word	0x000305de
    1d3c:	2000155c 	.word	0x2000155c
    1d40:	0002de8d 	.word	0x0002de8d
    1d44:	0002de91 	.word	0x0002de91
    1d48:	20001560 	.word	0x20001560
    1d4c:	0002de99 	.word	0x0002de99
    1d50:	20001564 	.word	0x20001564
    1d54:	0002dea1 	.word	0x0002dea1
    1d58:	20001568 	.word	0x20001568
    1d5c:	0002dea9 	.word	0x0002dea9

00001d60 <display_init>:
#endif



int display_init(void)
{
    1d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1d62:	4823      	ldr	r0, [pc, #140]	; (1df0 <display_init+0x90>)
    1d64:	f01d fada 	bl	1f31c <z_impl_device_get_binding>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    1d68:	68c5      	ldr	r5, [r0, #12]
    1d6a:	4604      	mov	r4, r0
	return api->pin_configure(port, pin, flags);
    1d6c:	6883      	ldr	r3, [r0, #8]
    1d6e:	f240 6201 	movw	r2, #1537	; 0x601
    1d72:	681b      	ldr	r3, [r3, #0]
    1d74:	2116      	movs	r1, #22
    1d76:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    1d78:	b918      	cbnz	r0, 1d82 <display_init+0x22>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1d7a:	682b      	ldr	r3, [r5, #0]
    1d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    1d80:	602b      	str	r3, [r5, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1d82:	68e3      	ldr	r3, [r4, #12]
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	025b      	lsls	r3, r3, #9
	return api->port_set_bits_raw(port, pins);
    1d88:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    1d8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
	return api->port_set_bits_raw(port, pins);
    1d8e:	bf54      	ite	pl
    1d90:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    1d92:	691b      	ldrmi	r3, [r3, #16]
    1d94:	4620      	mov	r0, r4
    1d96:	4798      	blx	r3
    1d98:	4816      	ldr	r0, [pc, #88]	; (1df4 <display_init+0x94>)
#if defined(CONFIG_BOARD_PINETIME_DEVKIT1)
	backlight_init();
#endif
	display_dev = device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
    1d9a:	4c17      	ldr	r4, [pc, #92]	; (1df8 <display_init+0x98>)
    1d9c:	f01d fabe 	bl	1f31c <z_impl_device_get_binding>
    1da0:	6020      	str	r0, [r4, #0]

	if (display_dev == NULL) {
    1da2:	b970      	cbnz	r0, 1dc2 <display_init+0x62>
    1da4:	4b15      	ldr	r3, [pc, #84]	; (1dfc <display_init+0x9c>)
    1da6:	4a16      	ldr	r2, [pc, #88]	; (1e00 <display_init+0xa0>)
		LOG_ERR("device not found. %s", CONFIG_LVGL_DISPLAY_DEV_NAME);
    1da8:	4816      	ldr	r0, [pc, #88]	; (1e04 <display_init+0xa4>)
    1daa:	4912      	ldr	r1, [pc, #72]	; (1df4 <display_init+0x94>)
    1dac:	1ad2      	subs	r2, r2, r3
    1dae:	08d2      	lsrs	r2, r2, #3
    1db0:	0192      	lsls	r2, r2, #6
    1db2:	f042 0201 	orr.w	r2, r2, #1
    1db6:	f021 fc1c 	bl	235f2 <log_1>
		return -1;
    1dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	 *  Start task handler timer loop
	 */
	k_timer_start(&display_timer, K_MSEC(TICK_PERIOD), K_MSEC(TICK_PERIOD));

	return 0;
};
    1dbe:	b003      	add	sp, #12
    1dc0:	bd30      	pop	{r4, r5, pc}
	display_screens_init();
    1dc2:	f7ff fe71 	bl	1aa8 <display_screens_init>
	lv_scr_load(screens[0].screen);
    1dc6:	4b10      	ldr	r3, [pc, #64]	; (1e08 <display_init+0xa8>)
    1dc8:	6818      	ldr	r0, [r3, #0]
    1dca:	f024 f9b2 	bl	26132 <lv_disp_load_scr>
	lv_task_handler();//jj
    1dce:	f01b fd99 	bl	1d904 <lv_task_handler>
	display_blanking_off(display_dev);
    1dd2:	6820      	ldr	r0, [r4, #0]
static inline int display_blanking_off(const struct device *dev)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	return api->blanking_off(dev);
    1dd4:	6883      	ldr	r3, [r0, #8]
    1dd6:	685b      	ldr	r3, [r3, #4]
    1dd8:	4798      	blx	r3
    1dda:	f44f 72a4 	mov.w	r2, #328	; 0x148
    1dde:	2300      	movs	r3, #0
	z_impl_k_timer_start(timer, duration, period);
    1de0:	480a      	ldr	r0, [pc, #40]	; (1e0c <display_init+0xac>)
    1de2:	e9cd 2300 	strd	r2, r3, [sp]
    1de6:	f01e fc8f 	bl	20708 <z_impl_k_timer_start>
	return 0;
    1dea:	2000      	movs	r0, #0
    1dec:	e7e7      	b.n	1dbe <display_init+0x5e>
    1dee:	bf00      	nop
    1df0:	0002dead 	.word	0x0002dead
    1df4:	0002deb4 	.word	0x0002deb4
    1df8:	20001550 	.word	0x20001550
    1dfc:	0002bf50 	.word	0x0002bf50
    1e00:	0002c040 	.word	0x0002c040
    1e04:	0002debc 	.word	0x0002debc
    1e08:	200002dc 	.word	0x200002dc
    1e0c:	20000b00 	.word	0x20000b00

00001e10 <button_pressed>:

static uint8_t button_press_cnt;
struct k_timer button_timer;
void button_pressed(const struct device *dev, struct gpio_callback *cb,
		uint32_t pins)
{
    1e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    1e12:	4b1f      	ldr	r3, [pc, #124]	; (1e90 <button_pressed+0x80>)
    1e14:	4c1f      	ldr	r4, [pc, #124]	; (1e94 <button_pressed+0x84>)
    1e16:	1ae4      	subs	r4, r4, r3
    1e18:	08e4      	lsrs	r4, r4, #3
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    1e1a:	f002 f945 	bl	40a8 <z_timer_cycle_get_32>
	buttons_id_t btn_id;

	LOG_INF("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    1e1e:	01a4      	lsls	r4, r4, #6
    1e20:	f044 0503 	orr.w	r5, r4, #3
    1e24:	462a      	mov	r2, r5

	if (button_press_cnt == 0U) {
    1e26:	4d1c      	ldr	r5, [pc, #112]	; (1e98 <button_pressed+0x88>)
    1e28:	4601      	mov	r1, r0
	LOG_INF("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    1e2a:	481c      	ldr	r0, [pc, #112]	; (1e9c <button_pressed+0x8c>)
    1e2c:	f021 fbe1 	bl	235f2 <log_1>
	if (button_press_cnt == 0U) {
    1e30:	782b      	ldrb	r3, [r5, #0]
    1e32:	b94b      	cbnz	r3, 1e48 <button_pressed+0x38>
    1e34:	2200      	movs	r2, #0
    1e36:	2300      	movs	r3, #0
    1e38:	e9cd 2300 	strd	r2, r3, [sp]
    1e3c:	4818      	ldr	r0, [pc, #96]	; (1ea0 <button_pressed+0x90>)
    1e3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1e42:	2300      	movs	r3, #0
    1e44:	f01e fc60 	bl	20708 <z_impl_k_timer_start>
	return z_impl_k_timer_status_get(timer);
    1e48:	4815      	ldr	r0, [pc, #84]	; (1ea0 <button_pressed+0x90>)
    1e4a:	f029 fafa 	bl	2b442 <z_impl_k_timer_status_get>
		k_timer_start(&button_timer, K_SECONDS(1), K_NO_WAIT);
		btn_id=BTN1_SHORT;
	}

	if (k_timer_status_get(&button_timer) > 0) {
    1e4e:	b180      	cbz	r0, 1e72 <button_pressed+0x62>
		/* timer has expired */
		LOG_INF("SHORT PRESS EVENT %02x\n", button_press_cnt);
    1e50:	4814      	ldr	r0, [pc, #80]	; (1ea4 <button_pressed+0x94>)
    1e52:	7829      	ldrb	r1, [r5, #0]
    1e54:	f044 0203 	orr.w	r2, r4, #3
    1e58:	f021 fbcb 	bl	235f2 <log_1>
		if (button_press_cnt > 2){
    1e5c:	782b      	ldrb	r3, [r5, #0]
    1e5e:	2b02      	cmp	r3, #2
			display_btn_event(BTN1_LONG);
    1e60:	bf8c      	ite	hi
    1e62:	2002      	movhi	r0, #2
		}
		else
			display_btn_event(BTN1_SHORT);
    1e64:	2001      	movls	r0, #1
    1e66:	f7ff fdcd 	bl	1a04 <display_btn_event>
		button_press_cnt=0;
    1e6a:	2300      	movs	r3, #0
    1e6c:	702b      	strb	r3, [r5, #0]


	// 	LOG_INF("Button time %d\n", button_time);
	//      sensor_attr_set(dev, SENSOR_CHAN_LIGHT, SENSOR_ATTR_SAMPLING_FREQUENCY,0x22);
	//	button_time_previous = k_cycle_get32();
}
    1e6e:	b003      	add	sp, #12
    1e70:	bd30      	pop	{r4, r5, pc}
		button_press_cnt++;
    1e72:	7829      	ldrb	r1, [r5, #0]
    1e74:	3101      	adds	r1, #1
    1e76:	b2c9      	uxtb	r1, r1
		if (button_press_cnt > 2){
    1e78:	2902      	cmp	r1, #2
		button_press_cnt++;
    1e7a:	7029      	strb	r1, [r5, #0]
		if (button_press_cnt > 2){
    1e7c:	d9f7      	bls.n	1e6e <button_pressed+0x5e>
			LOG_INF("LONG PRESS EVENT %02x\n", button_press_cnt);
    1e7e:	480a      	ldr	r0, [pc, #40]	; (1ea8 <button_pressed+0x98>)
    1e80:	f044 0203 	orr.w	r2, r4, #3
}
    1e84:	b003      	add	sp, #12
    1e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			LOG_INF("LONG PRESS EVENT %02x\n", button_press_cnt);
    1e8a:	f021 bbb2 	b.w	235f2 <log_1>
    1e8e:	bf00      	nop
    1e90:	0002bf50 	.word	0x0002bf50
    1e94:	0002bf50 	.word	0x0002bf50
    1e98:	20008116 	.word	0x20008116
    1e9c:	0002ded9 	.word	0x0002ded9
    1ea0:	20000da0 	.word	0x20000da0
    1ea4:	0002deef 	.word	0x0002deef
    1ea8:	0002df07 	.word	0x0002df07

00001eac <init_button>:


static struct gpio_callback button_cb_data;

void init_button(void)
{
    1eac:	b510      	push	{r4, lr}
    1eae:	4824      	ldr	r0, [pc, #144]	; (1f40 <init_button+0x94>)
    1eb0:	f01d fa34 	bl	1f31c <z_impl_device_get_binding>
	const struct device *button;
	int ret;
	button = device_get_binding(SW0_GPIO_LABEL);
	if (button == NULL) {
    1eb4:	4604      	mov	r4, r0
    1eb6:	b928      	cbnz	r0, 1ec4 <init_button+0x18>
	gpio_add_callback(button, &button_cb_data);
	printk("Set up button at %s pin %d\n", SW0_GPIO_LABEL, SW0_GPIO_PIN);



}
    1eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    1ebc:	4920      	ldr	r1, [pc, #128]	; (1f40 <init_button+0x94>)
    1ebe:	4821      	ldr	r0, [pc, #132]	; (1f44 <init_button+0x98>)
    1ec0:	f020 bf75 	b.w	22dae <printk>
	ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    1ec4:	210d      	movs	r1, #13
    1ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
    1eca:	f020 fe9b 	bl	22c04 <gpio_pin_configure>
	if (ret != 0) {
    1ece:	4601      	mov	r1, r0
    1ed0:	b130      	cbz	r0, 1ee0 <init_button+0x34>
		printk("Error %d: failed to configure %s pin %d\n",
    1ed2:	4a1b      	ldr	r2, [pc, #108]	; (1f40 <init_button+0x94>)
    1ed4:	481c      	ldr	r0, [pc, #112]	; (1f48 <init_button+0x9c>)
    1ed6:	230d      	movs	r3, #13
}
    1ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1edc:	f020 bf67 	b.w	22dae <printk>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
    1ee0:	210d      	movs	r1, #13
    1ee2:	f44f 22b8 	mov.w	r2, #376832	; 0x5c000
    1ee6:	4620      	mov	r0, r4
    1ee8:	f020 fe78 	bl	22bdc <z_impl_gpio_pin_interrupt_configure>
	if (ret != 0) {
    1eec:	4601      	mov	r1, r0
    1eee:	b118      	cbz	r0, 1ef8 <init_button+0x4c>
		printk("Error %d: failed to configure interrupt on %s pin %d\n",
    1ef0:	4a13      	ldr	r2, [pc, #76]	; (1f40 <init_button+0x94>)
    1ef2:	4816      	ldr	r0, [pc, #88]	; (1f4c <init_button+0xa0>)
    1ef4:	230d      	movs	r3, #13
    1ef6:	e7ef      	b.n	1ed8 <init_button+0x2c>
        gpio_pin_configure(button, SW1_GPIO_PIN,SW1_GPIO_FLAGS); //push button out
    1ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
    1efc:	210f      	movs	r1, #15
    1efe:	4620      	mov	r0, r4
    1f00:	f020 fe80 	bl	22c04 <gpio_pin_configure>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    1f04:	68e3      	ldr	r3, [r4, #12]
    1f06:	681b      	ldr	r3, [r3, #0]
    1f08:	041b      	lsls	r3, r3, #16
	return api->port_set_bits_raw(port, pins);
    1f0a:	68a3      	ldr	r3, [r4, #8]
	return api->port_clear_bits_raw(port, pins);
    1f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	return api->port_set_bits_raw(port, pins);
    1f10:	bf54      	ite	pl
    1f12:	68db      	ldrpl	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    1f14:	691b      	ldrmi	r3, [r3, #16]
    1f16:	4620      	mov	r0, r4
    1f18:	4798      	blx	r3
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    1f1a:	490d      	ldr	r1, [pc, #52]	; (1f50 <init_button+0xa4>)
    1f1c:	4b0d      	ldr	r3, [pc, #52]	; (1f54 <init_button+0xa8>)
    1f1e:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    1f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1f24:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    1f26:	68a3      	ldr	r3, [r4, #8]
    1f28:	69db      	ldr	r3, [r3, #28]
    1f2a:	b113      	cbz	r3, 1f32 <init_button+0x86>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    1f2c:	2201      	movs	r2, #1
    1f2e:	4620      	mov	r0, r4
    1f30:	4798      	blx	r3
}
    1f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Set up button at %s pin %d\n", SW0_GPIO_LABEL, SW0_GPIO_PIN);
    1f36:	4902      	ldr	r1, [pc, #8]	; (1f40 <init_button+0x94>)
    1f38:	4807      	ldr	r0, [pc, #28]	; (1f58 <init_button+0xac>)
    1f3a:	220d      	movs	r2, #13
    1f3c:	f020 bf37 	b.w	22dae <printk>
    1f40:	0002dead 	.word	0x0002dead
    1f44:	0002df1e 	.word	0x0002df1e
    1f48:	0002df3c 	.word	0x0002df3c
    1f4c:	0002df65 	.word	0x0002df65
    1f50:	20001578 	.word	0x20001578
    1f54:	00001e11 	.word	0x00001e11
    1f58:	0002df9b 	.word	0x0002df9b

00001f5c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1f5c:	680b      	ldr	r3, [r1, #0]
    1f5e:	3301      	adds	r3, #1
    1f60:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1f62:	4b01      	ldr	r3, [pc, #4]	; (1f68 <char_out+0xc>)
    1f64:	681b      	ldr	r3, [r3, #0]
    1f66:	4718      	bx	r3
    1f68:	2000030c 	.word	0x2000030c

00001f6c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1f6c:	b507      	push	{r0, r1, r2, lr}
    1f6e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1f70:	2100      	movs	r1, #0
{
    1f72:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1f74:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1f76:	4803      	ldr	r0, [pc, #12]	; (1f84 <vprintk+0x18>)
    1f78:	a901      	add	r1, sp, #4
    1f7a:	f000 f965 	bl	2248 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1f7e:	b003      	add	sp, #12
    1f80:	f85d fb04 	ldr.w	pc, [sp], #4
    1f84:	00001f5d 	.word	0x00001f5d

00001f88 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1f88:	b530      	push	{r4, r5, lr}
    1f8a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1f8c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1f90:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1f92:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1f94:	a901      	add	r1, sp, #4
    1f96:	4805      	ldr	r0, [pc, #20]	; (1fac <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1f98:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1f9a:	f000 f955 	bl	2248 <cbvprintf>

	if (ctx.count < ctx.max) {
    1f9e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1fa2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1fa4:	bfb8      	it	lt
    1fa6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1fa8:	b005      	add	sp, #20
    1faa:	bd30      	pop	{r4, r5, pc}
    1fac:	00022d89 	.word	0x00022d89

00001fb0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fb4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1fb8:	f019 0808 	ands.w	r8, r9, #8
{
    1fbc:	4604      	mov	r4, r0
    1fbe:	4693      	mov	fp, r2
	if (processing) {
    1fc0:	d00d      	beq.n	1fde <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1fc2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1fc4:	bf0c      	ite	eq
    1fc6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1fca:	f049 0920 	orrne.w	r9, r9, #32
    1fce:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1fd2:	f38b 8811 	msr	BASEPRI, fp
    1fd6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1fde:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1fe2:	2902      	cmp	r1, #2
    1fe4:	d107      	bne.n	1ff6 <process_event+0x46>
			evt = process_recheck(mgr);
    1fe6:	4620      	mov	r0, r4
    1fe8:	f020 fefb 	bl	22de2 <process_recheck>
		if (evt == EVT_NOP) {
    1fec:	2800      	cmp	r0, #0
    1fee:	d0f0      	beq.n	1fd2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1ff0:	2801      	cmp	r0, #1
    1ff2:	8b23      	ldrh	r3, [r4, #24]
    1ff4:	d150      	bne.n	2098 <process_event+0xe8>
			res = mgr->last_res;
    1ff6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1ff8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1ffa:	2f00      	cmp	r7, #0
    1ffc:	da15      	bge.n	202a <process_event+0x7a>
		*clients = mgr->clients;
    1ffe:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2000:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    2004:	e9c4 8800 	strd	r8, r8, [r4]
    2008:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    200c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    200e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2010:	8b21      	ldrh	r1, [r4, #24]
    2012:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2016:	45ca      	cmp	sl, r9
    2018:	d002      	beq.n	2020 <process_event+0x70>
		if (do_monitors
    201a:	68a3      	ldr	r3, [r4, #8]
    201c:	2b00      	cmp	r3, #0
    201e:	d15c      	bne.n	20da <process_event+0x12a>
		    || !sys_slist_is_empty(&clients)
    2020:	b90d      	cbnz	r5, 2026 <process_event+0x76>
		    || (transit != NULL)) {
    2022:	2e00      	cmp	r6, #0
    2024:	d074      	beq.n	2110 <process_event+0x160>
    2026:	2300      	movs	r3, #0
    2028:	e058      	b.n	20dc <process_event+0x12c>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    202a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    202e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2030:	2a01      	cmp	r2, #1
    2032:	d820      	bhi.n	2076 <process_event+0xc6>
		*clients = mgr->clients;
    2034:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    2038:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    203a:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    203c:	b289      	uxth	r1, r1
	list->tail = NULL;
    203e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2042:	d10c      	bne.n	205e <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2044:	2d00      	cmp	r5, #0
    2046:	462b      	mov	r3, r5
    2048:	bf38      	it	cc
    204a:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    204c:	b12b      	cbz	r3, 205a <process_event+0xaa>
				mgr->refs += 1U;
    204e:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2050:	681b      	ldr	r3, [r3, #0]
    2052:	3201      	adds	r2, #1
    2054:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2056:	2b00      	cmp	r3, #0
    2058:	d1f8      	bne.n	204c <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    205a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    205e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2060:	4620      	mov	r0, r4
    2062:	f020 febe 	bl	22de2 <process_recheck>
    2066:	4606      	mov	r6, r0
    2068:	2800      	cmp	r0, #0
    206a:	d0d1      	beq.n	2010 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    206c:	8b23      	ldrh	r3, [r4, #24]
    206e:	f043 0320 	orr.w	r3, r3, #32
    2072:	8323      	strh	r3, [r4, #24]
    2074:	e7cb      	b.n	200e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2076:	2b04      	cmp	r3, #4
    2078:	d10c      	bne.n	2094 <process_event+0xe4>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    207a:	f021 0107 	bic.w	r1, r1, #7
    207e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    2080:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    2082:	4620      	mov	r0, r4
    2084:	f020 fead 	bl	22de2 <process_recheck>
    2088:	4605      	mov	r5, r0
    208a:	2800      	cmp	r0, #0
    208c:	d0bf      	beq.n	200e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    208e:	f041 0120 	orr.w	r1, r1, #32
    2092:	8321      	strh	r1, [r4, #24]
    2094:	2500      	movs	r5, #0
    2096:	e7ba      	b.n	200e <process_event+0x5e>
		} else if (evt == EVT_START) {
    2098:	2803      	cmp	r0, #3
    209a:	d109      	bne.n	20b0 <process_event+0x100>
			transit = mgr->transitions->start;
    209c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    209e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    20a2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20a4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    20a8:	8323      	strh	r3, [r4, #24]
}
    20aa:	2500      	movs	r5, #0
		res = 0;
    20ac:	462f      	mov	r7, r5
    20ae:	e7af      	b.n	2010 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    20b0:	2804      	cmp	r0, #4
    20b2:	d106      	bne.n	20c2 <process_event+0x112>
			transit = mgr->transitions->stop;
    20b4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20b6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    20ba:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20bc:	f043 0304 	orr.w	r3, r3, #4
    20c0:	e7f2      	b.n	20a8 <process_event+0xf8>
		} else if (evt == EVT_RESET) {
    20c2:	2805      	cmp	r0, #5
    20c4:	d106      	bne.n	20d4 <process_event+0x124>
			transit = mgr->transitions->reset;
    20c6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20c8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    20cc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    20ce:	f043 0305 	orr.w	r3, r3, #5
    20d2:	e7e9      	b.n	20a8 <process_event+0xf8>
    20d4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    20d6:	462e      	mov	r6, r5
    20d8:	e7e8      	b.n	20ac <process_event+0xfc>
				   && !sys_slist_is_empty(&mgr->monitors);
    20da:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    20dc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    20e0:	8321      	strh	r1, [r4, #24]
    20e2:	f38b 8811 	msr	BASEPRI, fp
    20e6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    20ea:	bb03      	cbnz	r3, 212e <process_event+0x17e>
	while (!sys_slist_is_empty(list)) {
    20ec:	2d00      	cmp	r5, #0
    20ee:	d133      	bne.n	2158 <process_event+0x1a8>
			if (transit != NULL) {
    20f0:	b116      	cbz	r6, 20f8 <process_event+0x148>
				transit(mgr, transition_complete);
    20f2:	4921      	ldr	r1, [pc, #132]	; (2178 <process_event+0x1c8>)
    20f4:	4620      	mov	r0, r4
    20f6:	47b0      	blx	r6
	__asm__ volatile(
    20f8:	f04f 0320 	mov.w	r3, #32
    20fc:	f3ef 8b11 	mrs	fp, BASEPRI
    2100:	f383 8811 	msr	BASEPRI, r3
    2104:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2108:	8b23      	ldrh	r3, [r4, #24]
    210a:	f023 0308 	bic.w	r3, r3, #8
    210e:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2110:	8b23      	ldrh	r3, [r4, #24]
    2112:	06da      	lsls	r2, r3, #27
    2114:	d528      	bpl.n	2168 <process_event+0x1b8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2116:	f023 0310 	bic.w	r3, r3, #16
    211a:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    211c:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    211e:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    2122:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    2126:	2900      	cmp	r1, #0
    2128:	f47f af5b 	bne.w	1fe2 <process_event+0x32>
out:
    212c:	e751      	b.n	1fd2 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    212e:	68a1      	ldr	r1, [r4, #8]
    2130:	2900      	cmp	r1, #0
    2132:	d0db      	beq.n	20ec <process_event+0x13c>
	return node->next;
    2134:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    2136:	f8d1 b004 	ldr.w	fp, [r1, #4]
    213a:	2b00      	cmp	r3, #0
    213c:	bf38      	it	cc
    213e:	2300      	movcc	r3, #0
    2140:	4699      	mov	r9, r3
    2142:	4652      	mov	r2, sl
    2144:	463b      	mov	r3, r7
    2146:	4620      	mov	r0, r4
    2148:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    214a:	f1b9 0f00 	cmp.w	r9, #0
    214e:	d0cd      	beq.n	20ec <process_event+0x13c>
    2150:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2154:	4649      	mov	r1, r9
    2156:	e7ee      	b.n	2136 <process_event+0x186>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    2158:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    215a:	463b      	mov	r3, r7
    215c:	4652      	mov	r2, sl
    215e:	4620      	mov	r0, r4
    2160:	682d      	ldr	r5, [r5, #0]
    2162:	f020 fe5a 	bl	22e1a <notify_one>
    2166:	e7c1      	b.n	20ec <process_event+0x13c>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    2168:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    216c:	bf1e      	ittt	ne
    216e:	f023 0320 	bicne.w	r3, r3, #32
    2172:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    2174:	2102      	movne	r1, #2
    2176:	e7d2      	b.n	211e <process_event+0x16e>
    2178:	00022e47 	.word	0x00022e47

0000217c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    217c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    217e:	4e09      	ldr	r6, [pc, #36]	; (21a4 <extract_decimal+0x28>)
    2180:	6801      	ldr	r1, [r0, #0]
{
    2182:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
    2184:	270a      	movs	r7, #10
	size_t val = 0;
    2186:	2000      	movs	r0, #0
    2188:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
    218a:	3101      	adds	r1, #1
    218c:	7823      	ldrb	r3, [r4, #0]
    218e:	5d9d      	ldrb	r5, [r3, r6]
    2190:	076d      	lsls	r5, r5, #29
    2192:	d401      	bmi.n	2198 <extract_decimal+0x1c>
	}
	*str = sp;
    2194:	6014      	str	r4, [r2, #0]
	return val;
}
    2196:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    2198:	fb07 3300 	mla	r3, r7, r0, r3
    219c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    21a0:	e7f2      	b.n	2188 <extract_decimal+0xc>
    21a2:	bf00      	nop
    21a4:	0003933c 	.word	0x0003933c

000021a8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    21a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21ac:	4614      	mov	r4, r2
    21ae:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    21b0:	78d3      	ldrb	r3, [r2, #3]
    21b2:	4a24      	ldr	r2, [pc, #144]	; (2244 <encode_uint+0x9c>)
    21b4:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
    21b8:	2b6f      	cmp	r3, #111	; 0x6f
    21ba:	f00a 0203 	and.w	r2, sl, #3
{
    21be:	4606      	mov	r6, r0
    21c0:	460f      	mov	r7, r1
    21c2:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    21c4:	d02d      	beq.n	2222 <encode_uint+0x7a>
    21c6:	d828      	bhi.n	221a <encode_uint+0x72>
		return 16;
    21c8:	2b58      	cmp	r3, #88	; 0x58
    21ca:	bf14      	ite	ne
    21cc:	250a      	movne	r5, #10
    21ce:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    21d0:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    21d4:	46aa      	mov	sl, r5
    21d6:	f04f 0b00 	mov.w	fp, #0
    21da:	4652      	mov	r2, sl
    21dc:	465b      	mov	r3, fp
    21de:	4630      	mov	r0, r6
    21e0:	4639      	mov	r1, r7
    21e2:	f7fd ffcd 	bl	180 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    21e6:	2a09      	cmp	r2, #9
    21e8:	b2d3      	uxtb	r3, r2
    21ea:	d81f      	bhi.n	222c <encode_uint+0x84>
    21ec:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    21ee:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    21f0:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    21f2:	bf08      	it	eq
    21f4:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    21f6:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    21fa:	d301      	bcc.n	2200 <encode_uint+0x58>
    21fc:	45c8      	cmp	r8, r9
    21fe:	d812      	bhi.n	2226 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    2200:	7823      	ldrb	r3, [r4, #0]
    2202:	069b      	lsls	r3, r3, #26
    2204:	d505      	bpl.n	2212 <encode_uint+0x6a>
		if (radix == 8) {
    2206:	2d08      	cmp	r5, #8
    2208:	d116      	bne.n	2238 <encode_uint+0x90>
			conv->altform_0 = true;
    220a:	78a3      	ldrb	r3, [r4, #2]
    220c:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    2210:	70a3      	strb	r3, [r4, #2]
		}
	}

	return bp;
}
    2212:	4640      	mov	r0, r8
    2214:	b003      	add	sp, #12
    2216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    221a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    221e:	2b70      	cmp	r3, #112	; 0x70
    2220:	e7d3      	b.n	21ca <encode_uint+0x22>
	switch (specifier) {
    2222:	2508      	movs	r5, #8
    2224:	e7d4      	b.n	21d0 <encode_uint+0x28>
		value /= radix;
    2226:	4606      	mov	r6, r0
    2228:	460f      	mov	r7, r1
    222a:	e7d6      	b.n	21da <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    222c:	9a01      	ldr	r2, [sp, #4]
    222e:	2a01      	cmp	r2, #1
    2230:	bf0c      	ite	eq
    2232:	3337      	addeq	r3, #55	; 0x37
    2234:	3357      	addne	r3, #87	; 0x57
    2236:	e7da      	b.n	21ee <encode_uint+0x46>
		} else if (radix == 16) {
    2238:	2d10      	cmp	r5, #16
    223a:	d1ea      	bne.n	2212 <encode_uint+0x6a>
			conv->altform_0c = true;
    223c:	78a3      	ldrb	r3, [r4, #2]
    223e:	f043 0310 	orr.w	r3, r3, #16
    2242:	e7e5      	b.n	2210 <encode_uint+0x68>
    2244:	0003933c 	.word	0x0003933c

00002248 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    224c:	4682      	mov	sl, r0
    224e:	b093      	sub	sp, #76	; 0x4c
    2250:	468b      	mov	fp, r1
    2252:	4691      	mov	r9, r2
    2254:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2256:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2258:	f899 0000 	ldrb.w	r0, [r9]
    225c:	b908      	cbnz	r0, 2262 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    225e:	4628      	mov	r0, r5
    2260:	e33a      	b.n	28d8 <cbvprintf+0x690>
		if (*fp != '%') {
    2262:	f109 0301 	add.w	r3, r9, #1
    2266:	2825      	cmp	r0, #37	; 0x25
    2268:	9302      	str	r3, [sp, #8]
    226a:	d006      	beq.n	227a <cbvprintf+0x32>
			OUTC('%');
    226c:	4659      	mov	r1, fp
    226e:	47d0      	blx	sl
    2270:	2800      	cmp	r0, #0
    2272:	f2c0 8331 	blt.w	28d8 <cbvprintf+0x690>
    2276:	3501      	adds	r5, #1
			break;
    2278:	e1f1      	b.n	265e <cbvprintf+0x416>
		} state = {
    227a:	2218      	movs	r2, #24
    227c:	2100      	movs	r1, #0
    227e:	a80c      	add	r0, sp, #48	; 0x30
    2280:	f029 fa8c 	bl	2b79c <memset>
	if (*sp == '%') {
    2284:	f899 3001 	ldrb.w	r3, [r9, #1]
    2288:	2b25      	cmp	r3, #37	; 0x25
    228a:	d059      	beq.n	2340 <cbvprintf+0xf8>
    228c:	9a02      	ldr	r2, [sp, #8]
    228e:	4616      	mov	r6, r2
		switch (*sp) {
    2290:	f812 3b01 	ldrb.w	r3, [r2], #1
    2294:	2b2b      	cmp	r3, #43	; 0x2b
    2296:	f000 808b 	beq.w	23b0 <cbvprintf+0x168>
    229a:	d879      	bhi.n	2390 <cbvprintf+0x148>
    229c:	2b20      	cmp	r3, #32
    229e:	f000 808c 	beq.w	23ba <cbvprintf+0x172>
    22a2:	2b23      	cmp	r3, #35	; 0x23
    22a4:	f000 808e 	beq.w	23c4 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
    22a8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    22ac:	f003 0244 	and.w	r2, r3, #68	; 0x44
    22b0:	2a44      	cmp	r2, #68	; 0x44
    22b2:	d103      	bne.n	22bc <cbvprintf+0x74>
		conv->flag_zero = false;
    22b4:	f36f 1386 	bfc	r3, #6, #1
    22b8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    22bc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    22c0:	9605      	str	r6, [sp, #20]
    22c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    22c6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    22ca:	7833      	ldrb	r3, [r6, #0]
    22cc:	2b2a      	cmp	r3, #42	; 0x2a
    22ce:	d17e      	bne.n	23ce <cbvprintf+0x186>
		conv->width_star = true;
    22d0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    22d4:	f043 0301 	orr.w	r3, r3, #1
    22d8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    22dc:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
    22de:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    22e0:	781a      	ldrb	r2, [r3, #0]
    22e2:	2a2e      	cmp	r2, #46	; 0x2e
    22e4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    22e8:	bf0c      	ite	eq
    22ea:	2101      	moveq	r1, #1
    22ec:	2100      	movne	r1, #0
    22ee:	f361 0241 	bfi	r2, r1, #1, #1
    22f2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    22f6:	d10b      	bne.n	2310 <cbvprintf+0xc8>
	++sp;
    22f8:	1c5a      	adds	r2, r3, #1
    22fa:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    22fc:	785a      	ldrb	r2, [r3, #1]
    22fe:	2a2a      	cmp	r2, #42	; 0x2a
    2300:	d17b      	bne.n	23fa <cbvprintf+0x1b2>
		conv->prec_star = true;
    2302:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2306:	f042 0204 	orr.w	r2, r2, #4
    230a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    230e:	3302      	adds	r3, #2
	switch (*sp) {
    2310:	4619      	mov	r1, r3
    2312:	f811 0b01 	ldrb.w	r0, [r1], #1
    2316:	286c      	cmp	r0, #108	; 0x6c
    2318:	f000 80b6 	beq.w	2488 <cbvprintf+0x240>
    231c:	d87d      	bhi.n	241a <cbvprintf+0x1d2>
    231e:	2868      	cmp	r0, #104	; 0x68
    2320:	f000 8084 	beq.w	242c <cbvprintf+0x1e4>
    2324:	286a      	cmp	r0, #106	; 0x6a
    2326:	f000 80b9 	beq.w	249c <cbvprintf+0x254>
    232a:	284c      	cmp	r0, #76	; 0x4c
    232c:	f000 80bd 	beq.w	24aa <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
    2330:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2334:	f36f 02c6 	bfc	r2, #3, #4
    2338:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    233c:	4619      	mov	r1, r3
    233e:	e080      	b.n	2442 <cbvprintf+0x1fa>
		conv->specifier = *sp++;
    2340:	f109 0202 	add.w	r2, r9, #2
    2344:	9202      	str	r2, [sp, #8]
    2346:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    234a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    234e:	07d9      	lsls	r1, r3, #31
    2350:	f140 8149 	bpl.w	25e6 <cbvprintf+0x39e>
			width = va_arg(ap, int);
    2354:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    2358:	f1b8 0f00 	cmp.w	r8, #0
    235c:	da07      	bge.n	236e <cbvprintf+0x126>
				conv->flag_dash = true;
    235e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2362:	f042 0204 	orr.w	r2, r2, #4
    2366:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    236a:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    236e:	075a      	lsls	r2, r3, #29
    2370:	f140 8142 	bpl.w	25f8 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
    2374:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
    2378:	2f00      	cmp	r7, #0
    237a:	f280 8141 	bge.w	2600 <cbvprintf+0x3b8>
				conv->prec_present = false;
    237e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    2382:	f36f 0341 	bfc	r3, #1, #1
    2386:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    238a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    238e:	e137      	b.n	2600 <cbvprintf+0x3b8>
		switch (*sp) {
    2390:	2b2d      	cmp	r3, #45	; 0x2d
    2392:	d006      	beq.n	23a2 <cbvprintf+0x15a>
    2394:	2b30      	cmp	r3, #48	; 0x30
    2396:	d187      	bne.n	22a8 <cbvprintf+0x60>
			conv->flag_zero = true;
    2398:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    239c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    23a0:	e003      	b.n	23aa <cbvprintf+0x162>
			conv->flag_dash = true;
    23a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    23a6:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    23aa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    23ae:	e76e      	b.n	228e <cbvprintf+0x46>
			conv->flag_plus = true;
    23b0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    23b4:	f043 0308 	orr.w	r3, r3, #8
    23b8:	e7f7      	b.n	23aa <cbvprintf+0x162>
			conv->flag_space = true;
    23ba:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    23be:	f043 0310 	orr.w	r3, r3, #16
    23c2:	e7f2      	b.n	23aa <cbvprintf+0x162>
			conv->flag_hash = true;
    23c4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    23c8:	f043 0320 	orr.w	r3, r3, #32
    23cc:	e7ed      	b.n	23aa <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
    23ce:	a805      	add	r0, sp, #20
    23d0:	f7ff fed4 	bl	217c <extract_decimal>
	if (sp != wp) {
    23d4:	9b05      	ldr	r3, [sp, #20]
    23d6:	42b3      	cmp	r3, r6
    23d8:	d081      	beq.n	22de <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
    23da:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    23de:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    23e0:	f3c1 0240 	ubfx	r2, r1, #1, #1
    23e4:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    23e8:	0052      	lsls	r2, r2, #1
    23ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
    23ee:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    23f2:	430a      	orrs	r2, r1
    23f4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    23f8:	e771      	b.n	22de <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
    23fa:	a805      	add	r0, sp, #20
    23fc:	f7ff febe 	bl	217c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    2400:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    2404:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    2406:	f3c3 0240 	ubfx	r2, r3, #1, #1
    240a:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    240e:	f360 0341 	bfi	r3, r0, #1, #1
    2412:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    2416:	9b05      	ldr	r3, [sp, #20]
    2418:	e77a      	b.n	2310 <cbvprintf+0xc8>
	switch (*sp) {
    241a:	2874      	cmp	r0, #116	; 0x74
    241c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2420:	d040      	beq.n	24a4 <cbvprintf+0x25c>
    2422:	287a      	cmp	r0, #122	; 0x7a
    2424:	d184      	bne.n	2330 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
    2426:	4613      	mov	r3, r2
    2428:	2206      	movs	r2, #6
    242a:	e028      	b.n	247e <cbvprintf+0x236>
		if (*++sp == 'h') {
    242c:	785a      	ldrb	r2, [r3, #1]
    242e:	2a68      	cmp	r2, #104	; 0x68
    2430:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2434:	d121      	bne.n	247a <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
    2436:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    2438:	f361 02c6 	bfi	r2, r1, #3, #4
    243c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    2440:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
    2442:	460b      	mov	r3, r1
    2444:	f813 2b01 	ldrb.w	r2, [r3], #1
    2448:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    244a:	2a78      	cmp	r2, #120	; 0x78
    244c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
    2450:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    2454:	f200 80bf 	bhi.w	25d6 <cbvprintf+0x38e>
    2458:	2a57      	cmp	r2, #87	; 0x57
    245a:	d833      	bhi.n	24c4 <cbvprintf+0x27c>
    245c:	2a41      	cmp	r2, #65	; 0x41
    245e:	d003      	beq.n	2468 <cbvprintf+0x220>
    2460:	3a45      	subs	r2, #69	; 0x45
    2462:	2a02      	cmp	r2, #2
    2464:	f200 80b7 	bhi.w	25d6 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
    2468:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    246c:	2204      	movs	r2, #4
    246e:	f362 0302 	bfi	r3, r2, #0, #3
    2472:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
    2476:	2301      	movs	r3, #1
			break;
    2478:	e084      	b.n	2584 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
    247a:	4613      	mov	r3, r2
    247c:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
    247e:	f362 03c6 	bfi	r3, r2, #3, #4
    2482:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    2486:	e7dc      	b.n	2442 <cbvprintf+0x1fa>
		if (*++sp == 'l') {
    2488:	785a      	ldrb	r2, [r3, #1]
    248a:	2a6c      	cmp	r2, #108	; 0x6c
    248c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    2490:	d101      	bne.n	2496 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
    2492:	2104      	movs	r1, #4
    2494:	e7d0      	b.n	2438 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
    2496:	4613      	mov	r3, r2
    2498:	2203      	movs	r2, #3
    249a:	e7f0      	b.n	247e <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
    249c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    24a0:	2205      	movs	r2, #5
    24a2:	e7ec      	b.n	247e <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
    24a4:	4613      	mov	r3, r2
    24a6:	2207      	movs	r2, #7
    24a8:	e7e9      	b.n	247e <cbvprintf+0x236>
		conv->unsupported = true;
    24aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    24ae:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    24b2:	f023 0302 	bic.w	r3, r3, #2
    24b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    24ba:	f043 0302 	orr.w	r3, r3, #2
    24be:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    24c2:	e7be      	b.n	2442 <cbvprintf+0x1fa>
    24c4:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    24c8:	2920      	cmp	r1, #32
    24ca:	f200 8084 	bhi.w	25d6 <cbvprintf+0x38e>
    24ce:	a001      	add	r0, pc, #4	; (adr r0, 24d4 <cbvprintf+0x28c>)
    24d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    24d4:	00002599 	.word	0x00002599
    24d8:	000025d7 	.word	0x000025d7
    24dc:	000025d7 	.word	0x000025d7
    24e0:	000025d7 	.word	0x000025d7
    24e4:	000025d7 	.word	0x000025d7
    24e8:	000025d7 	.word	0x000025d7
    24ec:	000025d7 	.word	0x000025d7
    24f0:	000025d7 	.word	0x000025d7
    24f4:	000025d7 	.word	0x000025d7
    24f8:	00002469 	.word	0x00002469
    24fc:	000025d7 	.word	0x000025d7
    2500:	00002599 	.word	0x00002599
    2504:	00002559 	.word	0x00002559
    2508:	00002469 	.word	0x00002469
    250c:	00002469 	.word	0x00002469
    2510:	00002469 	.word	0x00002469
    2514:	000025d7 	.word	0x000025d7
    2518:	00002559 	.word	0x00002559
    251c:	000025d7 	.word	0x000025d7
    2520:	000025d7 	.word	0x000025d7
    2524:	000025d7 	.word	0x000025d7
    2528:	000025d7 	.word	0x000025d7
    252c:	000025a1 	.word	0x000025a1
    2530:	00002599 	.word	0x00002599
    2534:	000025bd 	.word	0x000025bd
    2538:	000025d7 	.word	0x000025d7
    253c:	000025d7 	.word	0x000025d7
    2540:	000025bd 	.word	0x000025bd
    2544:	000025d7 	.word	0x000025d7
    2548:	00002599 	.word	0x00002599
    254c:	000025d7 	.word	0x000025d7
    2550:	000025d7 	.word	0x000025d7
    2554:	00002599 	.word	0x00002599
		conv->specifier_cat = SPECIFIER_SINT;
    2558:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    255c:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    255e:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2562:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2566:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    2568:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
    256c:	bf02      	ittt	eq
    256e:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    2572:	f041 0101 	orreq.w	r1, r1, #1
    2576:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    257a:	2a63      	cmp	r2, #99	; 0x63
    257c:	d131      	bne.n	25e2 <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    257e:	3b00      	subs	r3, #0
    2580:	bf18      	it	ne
    2582:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    2584:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    2588:	f3c2 0140 	ubfx	r1, r2, #1, #1
    258c:	430b      	orrs	r3, r1
    258e:	f363 0241 	bfi	r2, r3, #1, #1
    2592:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    2596:	e6d8      	b.n	234a <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
    2598:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
    259c:	2002      	movs	r0, #2
    259e:	e7de      	b.n	255e <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
    25a0:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    25a4:	f003 0378 	and.w	r3, r3, #120	; 0x78
    25a8:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    25ac:	2103      	movs	r1, #3
    25ae:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    25b2:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    25b4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    25b8:	4143      	adcs	r3, r0
    25ba:	e7e3      	b.n	2584 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
    25bc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    25c0:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    25c2:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    25c6:	f361 0202 	bfi	r2, r1, #0, #3
    25ca:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    25ce:	bf14      	ite	ne
    25d0:	2301      	movne	r3, #1
    25d2:	2300      	moveq	r3, #0
    25d4:	e7d6      	b.n	2584 <cbvprintf+0x33c>
		conv->invalid = true;
    25d6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    25da:	f043 0301 	orr.w	r3, r3, #1
    25de:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
    25e2:	2300      	movs	r3, #0
    25e4:	e7ce      	b.n	2584 <cbvprintf+0x33c>
		} else if (conv->width_present) {
    25e6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    25ea:	2a00      	cmp	r2, #0
			width = conv->width_value;
    25ec:	bfb4      	ite	lt
    25ee:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
    25f2:	f04f 38ff 	movge.w	r8, #4294967295	; 0xffffffff
    25f6:	e6ba      	b.n	236e <cbvprintf+0x126>
		} else if (conv->prec_present) {
    25f8:	079f      	lsls	r7, r3, #30
    25fa:	f57f aec6 	bpl.w	238a <cbvprintf+0x142>
			precision = conv->prec_value;
    25fe:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
    2600:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
    2604:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2606:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
    260a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
    260e:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    2612:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    2614:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2618:	d137      	bne.n	268a <cbvprintf+0x442>
			switch (length_mod) {
    261a:	1ecb      	subs	r3, r1, #3
    261c:	2b04      	cmp	r3, #4
    261e:	d821      	bhi.n	2664 <cbvprintf+0x41c>
    2620:	e8df f003 	tbb	[pc, r3]
    2624:	20070703 	.word	0x20070703
    2628:	20          	.byte	0x20
    2629:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    262a:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
    262e:	17d3      	asrs	r3, r2, #31
    2630:	e004      	b.n	263c <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
    2632:	3407      	adds	r4, #7
    2634:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    2638:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
    263c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    2640:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2644:	f013 0603 	ands.w	r6, r3, #3
    2648:	d055      	beq.n	26f6 <cbvprintf+0x4ae>
			OUTS(sp, fp);
    264a:	9b02      	ldr	r3, [sp, #8]
    264c:	464a      	mov	r2, r9
    264e:	4659      	mov	r1, fp
    2650:	4650      	mov	r0, sl
    2652:	f020 ff87 	bl	23564 <outs>
    2656:	2800      	cmp	r0, #0
    2658:	f2c0 813e 	blt.w	28d8 <cbvprintf+0x690>
    265c:	4405      	add	r5, r0
			OUTS(bps, bpe);
    265e:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2662:	e5f9      	b.n	2258 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2664:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
    2668:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    266a:	ea4f 73e2 	mov.w	r3, r2, asr #31
    266e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    2672:	d105      	bne.n	2680 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
    2674:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    2678:	930c      	str	r3, [sp, #48]	; 0x30
    267a:	2300      	movs	r3, #0
    267c:	930d      	str	r3, [sp, #52]	; 0x34
    267e:	e7df      	b.n	2640 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
    2680:	2902      	cmp	r1, #2
    2682:	d1dd      	bne.n	2640 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
    2684:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
    2688:	e7d1      	b.n	262e <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
    268a:	2b02      	cmp	r3, #2
    268c:	d123      	bne.n	26d6 <cbvprintf+0x48e>
			switch (length_mod) {
    268e:	1ecb      	subs	r3, r1, #3
    2690:	2b04      	cmp	r3, #4
    2692:	d813      	bhi.n	26bc <cbvprintf+0x474>
    2694:	e8df f003 	tbb	[pc, r3]
    2698:	120a0a03 	.word	0x120a0a03
    269c:	12          	.byte	0x12
    269d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    269e:	6822      	ldr	r2, [r4, #0]
    26a0:	920c      	str	r2, [sp, #48]	; 0x30
    26a2:	2300      	movs	r3, #0
    26a4:	1d20      	adds	r0, r4, #4
    26a6:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    26a8:	4604      	mov	r4, r0
    26aa:	e7c9      	b.n	2640 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
    26ac:	3407      	adds	r4, #7
    26ae:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
    26b2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    26b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    26ba:	e7f5      	b.n	26a8 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
    26bc:	f854 3b04 	ldr.w	r3, [r4], #4
    26c0:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    26c2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    26c4:	f04f 0300 	mov.w	r3, #0
    26c8:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    26ca:	d0d3      	beq.n	2674 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
    26cc:	2902      	cmp	r1, #2
    26ce:	d1b7      	bne.n	2640 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
    26d0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    26d4:	e7d0      	b.n	2678 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    26d6:	2b04      	cmp	r3, #4
    26d8:	d107      	bne.n	26ea <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
    26da:	3407      	adds	r4, #7
    26dc:	f024 0407 	bic.w	r4, r4, #7
    26e0:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
    26e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    26e8:	e7aa      	b.n	2640 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
    26ea:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    26ec:	bf04      	itt	eq
    26ee:	f854 3b04 	ldreq.w	r3, [r4], #4
    26f2:	930c      	streq	r3, [sp, #48]	; 0x30
    26f4:	e7a4      	b.n	2640 <cbvprintf+0x3f8>
		switch (conv->specifier) {
    26f6:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    26fa:	2878      	cmp	r0, #120	; 0x78
    26fc:	d8af      	bhi.n	265e <cbvprintf+0x416>
    26fe:	2862      	cmp	r0, #98	; 0x62
    2700:	d820      	bhi.n	2744 <cbvprintf+0x4fc>
    2702:	2825      	cmp	r0, #37	; 0x25
    2704:	f43f adb2 	beq.w	226c <cbvprintf+0x24>
    2708:	2858      	cmp	r0, #88	; 0x58
    270a:	d1a8      	bne.n	265e <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
    270c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2710:	9300      	str	r3, [sp, #0]
    2712:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    2716:	ab06      	add	r3, sp, #24
    2718:	aa0e      	add	r2, sp, #56	; 0x38
    271a:	f7ff fd45 	bl	21a8 <encode_uint>
    271e:	4681      	mov	r9, r0
			if (precision >= 0) {
    2720:	2f00      	cmp	r7, #0
    2722:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    2726:	db0b      	blt.n	2740 <cbvprintf+0x4f8>
				conv->flag_zero = false;
    2728:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    272c:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
    2730:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2734:	429f      	cmp	r7, r3
				conv->flag_zero = false;
    2736:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    273a:	d901      	bls.n	2740 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
    273c:	1aff      	subs	r7, r7, r3
    273e:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
    2740:	4607      	mov	r7, r0
    2742:	e03c      	b.n	27be <cbvprintf+0x576>
    2744:	3863      	subs	r0, #99	; 0x63
    2746:	2815      	cmp	r0, #21
    2748:	d889      	bhi.n	265e <cbvprintf+0x416>
    274a:	a201      	add	r2, pc, #4	; (adr r2, 2750 <cbvprintf+0x508>)
    274c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2750:	000027cf 	.word	0x000027cf
    2754:	00002831 	.word	0x00002831
    2758:	0000265f 	.word	0x0000265f
    275c:	0000265f 	.word	0x0000265f
    2760:	0000265f 	.word	0x0000265f
    2764:	0000265f 	.word	0x0000265f
    2768:	00002831 	.word	0x00002831
    276c:	0000265f 	.word	0x0000265f
    2770:	0000265f 	.word	0x0000265f
    2774:	0000265f 	.word	0x0000265f
    2778:	0000265f 	.word	0x0000265f
    277c:	0000288f 	.word	0x0000288f
    2780:	0000285d 	.word	0x0000285d
    2784:	00002861 	.word	0x00002861
    2788:	0000265f 	.word	0x0000265f
    278c:	0000265f 	.word	0x0000265f
    2790:	000027a9 	.word	0x000027a9
    2794:	0000265f 	.word	0x0000265f
    2798:	0000285d 	.word	0x0000285d
    279c:	0000265f 	.word	0x0000265f
    27a0:	0000265f 	.word	0x0000265f
    27a4:	0000285d 	.word	0x0000285d
			if (precision >= 0) {
    27a8:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
    27aa:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
    27ae:	db0a      	blt.n	27c6 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
    27b0:	4639      	mov	r1, r7
    27b2:	4648      	mov	r0, r9
    27b4:	f029 f83c 	bl	2b830 <strnlen>
			bpe = bps + len;
    27b8:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
    27bc:	2600      	movs	r6, #0
		if (bps == NULL) {
    27be:	f1b9 0f00 	cmp.w	r9, #0
    27c2:	d10c      	bne.n	27de <cbvprintf+0x596>
    27c4:	e74b      	b.n	265e <cbvprintf+0x416>
				len = strlen(bps);
    27c6:	4648      	mov	r0, r9
    27c8:	f7fd fe60 	bl	48c <strlen>
    27cc:	e7f4      	b.n	27b8 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    27ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    27d0:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
    27d4:	2600      	movs	r6, #0
			bpe = buf + 1;
    27d6:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
    27da:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
    27de:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
    27e2:	b106      	cbz	r6, 27e6 <cbvprintf+0x59e>
			nj_len += 1U;
    27e4:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    27e6:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    27ea:	06d0      	lsls	r0, r2, #27
    27ec:	d569      	bpl.n	28c2 <cbvprintf+0x67a>
			nj_len += 2U;
    27ee:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    27f0:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    27f2:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
    27f4:	bf48      	it	mi
    27f6:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
    27f8:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    27fa:	bf48      	it	mi
    27fc:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    27fe:	f1b8 0f00 	cmp.w	r8, #0
    2802:	dd76      	ble.n	28f2 <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
    2804:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
    2808:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
    280c:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2810:	9303      	str	r3, [sp, #12]
    2812:	0753      	lsls	r3, r2, #29
    2814:	d46d      	bmi.n	28f2 <cbvprintf+0x6aa>
				if (conv->flag_zero) {
    2816:	0650      	lsls	r0, r2, #25
    2818:	d561      	bpl.n	28de <cbvprintf+0x696>
					if (sign != 0) {
    281a:	b13e      	cbz	r6, 282c <cbvprintf+0x5e4>
						OUTC(sign);
    281c:	4659      	mov	r1, fp
    281e:	4630      	mov	r0, r6
    2820:	47d0      	blx	sl
    2822:	2800      	cmp	r0, #0
    2824:	db58      	blt.n	28d8 <cbvprintf+0x690>
						sign = 0;
    2826:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    2828:	3501      	adds	r5, #1
						sign = 0;
    282a:	461e      	mov	r6, r3
					pad = '0';
    282c:	2330      	movs	r3, #48	; 0x30
    282e:	e057      	b.n	28e0 <cbvprintf+0x698>
			if (conv->flag_plus) {
    2830:	071e      	lsls	r6, r3, #28
    2832:	d411      	bmi.n	2858 <cbvprintf+0x610>
				sign = ' ';
    2834:	f013 0610 	ands.w	r6, r3, #16
    2838:	bf18      	it	ne
    283a:	2620      	movne	r6, #32
			sint = value->sint;
    283c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    2840:	2a00      	cmp	r2, #0
    2842:	f173 0100 	sbcs.w	r1, r3, #0
    2846:	f6bf af61 	bge.w	270c <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
    284a:	4252      	negs	r2, r2
    284c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2850:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    2854:	262d      	movs	r6, #45	; 0x2d
    2856:	e759      	b.n	270c <cbvprintf+0x4c4>
				sign = '+';
    2858:	262b      	movs	r6, #43	; 0x2b
    285a:	e7ef      	b.n	283c <cbvprintf+0x5f4>
		switch (conv->specifier) {
    285c:	2600      	movs	r6, #0
    285e:	e755      	b.n	270c <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
    2860:	980c      	ldr	r0, [sp, #48]	; 0x30
    2862:	b348      	cbz	r0, 28b8 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2864:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
    2868:	9300      	str	r3, [sp, #0]
    286a:	aa0e      	add	r2, sp, #56	; 0x38
    286c:	ab06      	add	r3, sp, #24
    286e:	2100      	movs	r1, #0
    2870:	f7ff fc9a 	bl	21a8 <encode_uint>
				conv->altform_0c = true;
    2874:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    2878:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    287c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2880:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2884:	4681      	mov	r9, r0
				conv->altform_0c = true;
    2886:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    288a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    288c:	e748      	b.n	2720 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
    288e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    2890:	2907      	cmp	r1, #7
    2892:	f63f aee4 	bhi.w	265e <cbvprintf+0x416>
    2896:	e8df f001 	tbb	[pc, r1]
    289a:	040d      	.short	0x040d
    289c:	08080d06 	.word	0x08080d06
    28a0:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    28a2:	701d      	strb	r5, [r3, #0]
		break;
    28a4:	e6db      	b.n	265e <cbvprintf+0x416>
		*(short *)dp = (short)count;
    28a6:	801d      	strh	r5, [r3, #0]
		break;
    28a8:	e6d9      	b.n	265e <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
    28aa:	4628      	mov	r0, r5
    28ac:	17e9      	asrs	r1, r5, #31
    28ae:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    28b2:	e6d4      	b.n	265e <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    28b4:	601d      	str	r5, [r3, #0]
		break;
    28b6:	e6d2      	b.n	265e <cbvprintf+0x416>
			bpe = bps + 5;
    28b8:	4f2e      	ldr	r7, [pc, #184]	; (2974 <cbvprintf+0x72c>)
    28ba:	4606      	mov	r6, r0
			bps = "(nil)";
    28bc:	f1a7 0905 	sub.w	r9, r7, #5
    28c0:	e78d      	b.n	27de <cbvprintf+0x596>
		} else if (conv->altform_0) {
    28c2:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    28c4:	bf48      	it	mi
    28c6:	3301      	addmi	r3, #1
    28c8:	e792      	b.n	27f0 <cbvprintf+0x5a8>
					OUTC(pad);
    28ca:	4618      	mov	r0, r3
    28cc:	4659      	mov	r1, fp
    28ce:	9303      	str	r3, [sp, #12]
    28d0:	47d0      	blx	sl
    28d2:	2800      	cmp	r0, #0
    28d4:	9b03      	ldr	r3, [sp, #12]
    28d6:	da04      	bge.n	28e2 <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
    28d8:	b013      	add	sp, #76	; 0x4c
    28da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    28de:	2320      	movs	r3, #32
    28e0:	4445      	add	r5, r8
    28e2:	4642      	mov	r2, r8
				while (width-- > 0) {
    28e4:	2a00      	cmp	r2, #0
    28e6:	eba5 0108 	sub.w	r1, r5, r8
    28ea:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    28ee:	dcec      	bgt.n	28ca <cbvprintf+0x682>
    28f0:	460d      	mov	r5, r1
		if (sign != 0) {
    28f2:	b12e      	cbz	r6, 2900 <cbvprintf+0x6b8>
			OUTC(sign);
    28f4:	4659      	mov	r1, fp
    28f6:	4630      	mov	r0, r6
    28f8:	47d0      	blx	sl
    28fa:	2800      	cmp	r0, #0
    28fc:	dbec      	blt.n	28d8 <cbvprintf+0x690>
    28fe:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2900:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    2904:	06d9      	lsls	r1, r3, #27
    2906:	d401      	bmi.n	290c <cbvprintf+0x6c4>
    2908:	071a      	lsls	r2, r3, #28
    290a:	d505      	bpl.n	2918 <cbvprintf+0x6d0>
				OUTC('0');
    290c:	4659      	mov	r1, fp
    290e:	2030      	movs	r0, #48	; 0x30
    2910:	47d0      	blx	sl
    2912:	2800      	cmp	r0, #0
    2914:	dbe0      	blt.n	28d8 <cbvprintf+0x690>
    2916:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2918:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    291c:	06db      	lsls	r3, r3, #27
    291e:	d506      	bpl.n	292e <cbvprintf+0x6e6>
				OUTC(conv->specifier);
    2920:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    2924:	4659      	mov	r1, fp
    2926:	47d0      	blx	sl
    2928:	2800      	cmp	r0, #0
    292a:	dbd5      	blt.n	28d8 <cbvprintf+0x690>
    292c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    292e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    2930:	442e      	add	r6, r5
    2932:	1b73      	subs	r3, r6, r5
    2934:	2b00      	cmp	r3, #0
    2936:	dc15      	bgt.n	2964 <cbvprintf+0x71c>
			OUTS(bps, bpe);
    2938:	463b      	mov	r3, r7
    293a:	464a      	mov	r2, r9
    293c:	4659      	mov	r1, fp
    293e:	4650      	mov	r0, sl
    2940:	f020 fe10 	bl	23564 <outs>
    2944:	2800      	cmp	r0, #0
    2946:	dbc7      	blt.n	28d8 <cbvprintf+0x690>
    2948:	4405      	add	r5, r0
		while (width > 0) {
    294a:	44a8      	add	r8, r5
    294c:	eba8 0305 	sub.w	r3, r8, r5
    2950:	2b00      	cmp	r3, #0
    2952:	f77f ae84 	ble.w	265e <cbvprintf+0x416>
			OUTC(' ');
    2956:	4659      	mov	r1, fp
    2958:	2020      	movs	r0, #32
    295a:	47d0      	blx	sl
    295c:	2800      	cmp	r0, #0
    295e:	dbbb      	blt.n	28d8 <cbvprintf+0x690>
    2960:	3501      	adds	r5, #1
			--width;
    2962:	e7f3      	b.n	294c <cbvprintf+0x704>
				OUTC('0');
    2964:	4659      	mov	r1, fp
    2966:	2030      	movs	r0, #48	; 0x30
    2968:	47d0      	blx	sl
    296a:	2800      	cmp	r0, #0
    296c:	dbb4      	blt.n	28d8 <cbvprintf+0x690>
    296e:	3501      	adds	r5, #1
    2970:	e7df      	b.n	2932 <cbvprintf+0x6ea>
    2972:	bf00      	nop
    2974:	0002dfc0 	.word	0x0002dfc0

00002978 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2978:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    297a:	4910      	ldr	r1, [pc, #64]	; (29bc <enable_logger+0x44>)
    297c:	4810      	ldr	r0, [pc, #64]	; (29c0 <enable_logger+0x48>)
{
    297e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2980:	2200      	movs	r2, #0
    2982:	f028 fd30 	bl	2b3e6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2986:	4d0f      	ldr	r5, [pc, #60]	; (29c4 <enable_logger+0x4c>)
    2988:	490f      	ldr	r1, [pc, #60]	; (29c8 <enable_logger+0x50>)
    298a:	2200      	movs	r2, #0
    298c:	2300      	movs	r3, #0
    298e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2992:	2400      	movs	r4, #0
    2994:	230e      	movs	r3, #14
    2996:	e9cd 3403 	strd	r3, r4, [sp, #12]
    299a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    299e:	4b0b      	ldr	r3, [pc, #44]	; (29cc <enable_logger+0x54>)
    29a0:	9400      	str	r4, [sp, #0]
    29a2:	f44f 7240 	mov.w	r2, #768	; 0x300
    29a6:	4628      	mov	r0, r5
    29a8:	f01d fc04 	bl	201b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    29ac:	4908      	ldr	r1, [pc, #32]	; (29d0 <enable_logger+0x58>)
    29ae:	4628      	mov	r0, r5
    29b0:	f028 fc2c 	bl	2b20c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    29b4:	4620      	mov	r0, r4
    29b6:	b009      	add	sp, #36	; 0x24
    29b8:	bd30      	pop	{r4, r5, pc}
    29ba:	bf00      	nop
    29bc:	000029d5 	.word	0x000029d5
    29c0:	20000dd8 	.word	0x20000dd8
    29c4:	20000e10 	.word	0x20000e10
    29c8:	20008750 	.word	0x20008750
    29cc:	00002e39 	.word	0x00002e39
    29d0:	0002dfc1 	.word	0x0002dfc1

000029d4 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    29d4:	4801      	ldr	r0, [pc, #4]	; (29dc <log_process_thread_timer_expiry_fn+0x8>)
    29d6:	f01d bb55 	b.w	20084 <z_impl_k_sem_give>
    29da:	bf00      	nop
    29dc:	20000be0 	.word	0x20000be0

000029e0 <z_log_get_s_mask>:
{
    29e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    29e2:	4605      	mov	r5, r0
		} else if (arm && isalpha((int)curr)) {
    29e4:	4e0f      	ldr	r6, [pc, #60]	; (2a24 <z_log_get_s_mask+0x44>)
	uint32_t mask = 0;
    29e6:	2000      	movs	r0, #0
	uint32_t arg = 0;
    29e8:	4603      	mov	r3, r0
	bool arm = false;
    29ea:	4602      	mov	r2, r0
				mask |= BIT(arg);
    29ec:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
    29ee:	f815 4b01 	ldrb.w	r4, [r5], #1
    29f2:	b10c      	cbz	r4, 29f8 <z_log_get_s_mask+0x18>
    29f4:	428b      	cmp	r3, r1
    29f6:	d300      	bcc.n	29fa <z_log_get_s_mask+0x1a>
}
    29f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
    29fa:	2c25      	cmp	r4, #37	; 0x25
    29fc:	d102      	bne.n	2a04 <z_log_get_s_mask+0x24>
			arm = !arm;
    29fe:	f082 0201 	eor.w	r2, r2, #1
    2a02:	e7f4      	b.n	29ee <z_log_get_s_mask+0xe>
		} else if (arm && isalpha((int)curr)) {
    2a04:	2a00      	cmp	r2, #0
    2a06:	d0f2      	beq.n	29ee <z_log_get_s_mask+0xe>
    2a08:	f814 c006 	ldrb.w	ip, [r4, r6]
    2a0c:	f01c 0f03 	tst.w	ip, #3
    2a10:	d0ed      	beq.n	29ee <z_log_get_s_mask+0xe>
			if (curr == 's') {
    2a12:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
    2a14:	bf04      	itt	eq
    2a16:	fa07 f203 	lsleq.w	r2, r7, r3
    2a1a:	4310      	orreq	r0, r2
			arg++;
    2a1c:	3301      	adds	r3, #1
			arm = false;
    2a1e:	2200      	movs	r2, #0
    2a20:	e7e5      	b.n	29ee <z_log_get_s_mask+0xe>
    2a22:	bf00      	nop
    2a24:	0003933c 	.word	0x0003933c

00002a28 <log_core_init>:
{
    2a28:	b508      	push	{r3, lr}
		log_msg_pool_init();
    2a2a:	f000 fa67 	bl	2efc <log_msg_pool_init>
		log_list_init(&list);
    2a2e:	4809      	ldr	r0, [pc, #36]	; (2a54 <log_core_init+0x2c>)
    2a30:	f020 fdaf 	bl	23592 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2a34:	2304      	movs	r3, #4
    2a36:	2228      	movs	r2, #40	; 0x28
    2a38:	4907      	ldr	r1, [pc, #28]	; (2a58 <log_core_init+0x30>)
    2a3a:	4808      	ldr	r0, [pc, #32]	; (2a5c <log_core_init+0x34>)
    2a3c:	f028 f9e8 	bl	2ae10 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    2a40:	4b07      	ldr	r3, [pc, #28]	; (2a60 <log_core_init+0x38>)
    2a42:	4a08      	ldr	r2, [pc, #32]	; (2a64 <log_core_init+0x3c>)
    2a44:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2a46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    2a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    2a4e:	f000 bc9f 	b.w	3390 <log_output_timestamp_freq_set>
    2a52:	bf00      	nop
    2a54:	20001590 	.word	0x20001590
    2a58:	2000ad98 	.word	0x2000ad98
    2a5c:	20001598 	.word	0x20001598
    2a60:	20000310 	.word	0x20000310
    2a64:	000235d1 	.word	0x000235d1

00002a68 <dropped_notify>:
{
    2a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2a6a:	4b0f      	ldr	r3, [pc, #60]	; (2aa8 <dropped_notify+0x40>)
    2a6c:	f3bf 8f5b 	dmb	ish
    2a70:	2500      	movs	r5, #0
    2a72:	e853 7f00 	ldrex	r7, [r3]
    2a76:	e843 5200 	strex	r2, r5, [r3]
    2a7a:	2a00      	cmp	r2, #0
    2a7c:	d1f9      	bne.n	2a72 <dropped_notify+0xa>
    2a7e:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2a82:	4c0a      	ldr	r4, [pc, #40]	; (2aac <dropped_notify+0x44>)
    2a84:	4e0a      	ldr	r6, [pc, #40]	; (2ab0 <dropped_notify+0x48>)
    2a86:	1b36      	subs	r6, r6, r4
    2a88:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2a8a:	42b5      	cmp	r5, r6
    2a8c:	db00      	blt.n	2a90 <dropped_notify+0x28>
}
    2a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2a90:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2a92:	795b      	ldrb	r3, [r3, #5]
    2a94:	b12b      	cbz	r3, 2aa2 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    2a96:	6823      	ldr	r3, [r4, #0]
    2a98:	68db      	ldr	r3, [r3, #12]
    2a9a:	b113      	cbz	r3, 2aa2 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    2a9c:	4639      	mov	r1, r7
    2a9e:	4620      	mov	r0, r4
    2aa0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2aa2:	3501      	adds	r5, #1
    2aa4:	3410      	adds	r4, #16
    2aa6:	e7f0      	b.n	2a8a <dropped_notify+0x22>
    2aa8:	20001588 	.word	0x20001588
    2aac:	0002c0a8 	.word	0x0002c0a8
    2ab0:	0002c0b8 	.word	0x0002c0b8

00002ab4 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2ab4:	4b06      	ldr	r3, [pc, #24]	; (2ad0 <log_dropped+0x1c>)
    2ab6:	f3bf 8f5b 	dmb	ish
    2aba:	e853 2f00 	ldrex	r2, [r3]
    2abe:	3201      	adds	r2, #1
    2ac0:	e843 2100 	strex	r1, r2, [r3]
    2ac4:	2900      	cmp	r1, #0
    2ac6:	d1f8      	bne.n	2aba <log_dropped+0x6>
    2ac8:	f3bf 8f5b 	dmb	ish
}
    2acc:	4770      	bx	lr
    2ace:	bf00      	nop
    2ad0:	20001588 	.word	0x20001588

00002ad4 <log_source_name_get>:
    2ad4:	4a04      	ldr	r2, [pc, #16]	; (2ae8 <log_source_name_get+0x14>)
    2ad6:	4b05      	ldr	r3, [pc, #20]	; (2aec <log_source_name_get+0x18>)
    2ad8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2ada:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2ade:	bf34      	ite	cc
    2ae0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2ae4:	2000      	movcs	r0, #0
}
    2ae6:	4770      	bx	lr
    2ae8:	0002bf50 	.word	0x0002bf50
    2aec:	0002c0a8 	.word	0x0002c0a8

00002af0 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2af0:	4b09      	ldr	r3, [pc, #36]	; (2b18 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    2af2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    2af4:	1ac3      	subs	r3, r0, r3
    2af6:	111b      	asrs	r3, r3, #4
    2af8:	3301      	adds	r3, #1
{
    2afa:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    2afc:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    2afe:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    2b00:	4c06      	ldr	r4, [pc, #24]	; (2b1c <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    2b02:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2b04:	2201      	movs	r2, #1
    2b06:	715a      	strb	r2, [r3, #5]
    2b08:	7822      	ldrb	r2, [r4, #0]
    2b0a:	b912      	cbnz	r2, 2b12 <log_backend_enable+0x22>
    2b0c:	4804      	ldr	r0, [pc, #16]	; (2b20 <log_backend_enable+0x30>)
    2b0e:	f01d fab9 	bl	20084 <z_impl_k_sem_give>
	backend_attached = true;
    2b12:	2301      	movs	r3, #1
    2b14:	7023      	strb	r3, [r4, #0]
}
    2b16:	bd10      	pop	{r4, pc}
    2b18:	0002c0a8 	.word	0x0002c0a8
    2b1c:	20008117 	.word	0x20008117
    2b20:	20000be0 	.word	0x20000be0

00002b24 <log_init>:
{
    2b24:	b570      	push	{r4, r5, r6, lr}
    2b26:	4b11      	ldr	r3, [pc, #68]	; (2b6c <log_init+0x48>)
    2b28:	f3bf 8f5b 	dmb	ish
    2b2c:	e853 5f00 	ldrex	r5, [r3]
    2b30:	1c6a      	adds	r2, r5, #1
    2b32:	e843 2100 	strex	r1, r2, [r3]
    2b36:	2900      	cmp	r1, #0
    2b38:	d1f8      	bne.n	2b2c <log_init+0x8>
    2b3a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2b3e:	b92d      	cbnz	r5, 2b4c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    2b40:	4c0b      	ldr	r4, [pc, #44]	; (2b70 <log_init+0x4c>)
    2b42:	4e0c      	ldr	r6, [pc, #48]	; (2b74 <log_init+0x50>)
    2b44:	1b36      	subs	r6, r6, r4
    2b46:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    2b48:	42b5      	cmp	r5, r6
    2b4a:	db00      	blt.n	2b4e <log_init+0x2a>
}
    2b4c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2b4e:	7b23      	ldrb	r3, [r4, #12]
    2b50:	b143      	cbz	r3, 2b64 <log_init+0x40>
			if (backend->api->init != NULL) {
    2b52:	6823      	ldr	r3, [r4, #0]
    2b54:	695b      	ldr	r3, [r3, #20]
    2b56:	b103      	cbz	r3, 2b5a <log_init+0x36>
				backend->api->init();
    2b58:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    2b5a:	2204      	movs	r2, #4
    2b5c:	2100      	movs	r1, #0
    2b5e:	4620      	mov	r0, r4
    2b60:	f7ff ffc6 	bl	2af0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2b64:	3501      	adds	r5, #1
    2b66:	3410      	adds	r4, #16
    2b68:	e7ee      	b.n	2b48 <log_init+0x24>
    2b6a:	bf00      	nop
    2b6c:	2000158c 	.word	0x2000158c
    2b70:	0002c0a8 	.word	0x0002c0a8
    2b74:	0002c0b8 	.word	0x0002c0b8

00002b78 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    2b78:	4b17      	ldr	r3, [pc, #92]	; (2bd8 <log_strdup+0x60>)
    2b7a:	4298      	cmp	r0, r3
{
    2b7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2b7e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2b80:	d302      	bcc.n	2b88 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2b82:	4b16      	ldr	r3, [pc, #88]	; (2bdc <log_strdup+0x64>)
    2b84:	4298      	cmp	r0, r3
    2b86:	d321      	bcc.n	2bcc <log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2b88:	4815      	ldr	r0, [pc, #84]	; (2be0 <log_strdup+0x68>)
    2b8a:	2200      	movs	r2, #0
    2b8c:	2300      	movs	r3, #0
    2b8e:	a901      	add	r1, sp, #4
    2b90:	f01c fd88 	bl	1f6a4 <k_mem_slab_alloc>
	if (err != 0) {
    2b94:	4605      	mov	r5, r0
    2b96:	b9e0      	cbnz	r0, 2bd2 <log_strdup+0x5a>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2b98:	2201      	movs	r2, #1
    2b9a:	9b01      	ldr	r3, [sp, #4]
    2b9c:	f3bf 8f5b 	dmb	ish
    2ba0:	e853 1f00 	ldrex	r1, [r3]
    2ba4:	e843 2000 	strex	r0, r2, [r3]
    2ba8:	2800      	cmp	r0, #0
    2baa:	d1f9      	bne.n	2ba0 <log_strdup+0x28>
    2bac:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2bb0:	9e01      	ldr	r6, [sp, #4]
    2bb2:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
    2bb4:	221f      	movs	r2, #31
    2bb6:	4618      	mov	r0, r3
    2bb8:	4621      	mov	r1, r4
    2bba:	f028 fe13 	bl	2b7e4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2bbe:	227e      	movs	r2, #126	; 0x7e
    2bc0:	4603      	mov	r3, r0
    2bc2:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    2bc6:	f886 5024 	strb.w	r5, [r6, #36]	; 0x24
	return dup->buf;
    2bca:	461c      	mov	r4, r3
}
    2bcc:	4620      	mov	r0, r4
    2bce:	b002      	add	sp, #8
    2bd0:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
    2bd2:	4b04      	ldr	r3, [pc, #16]	; (2be4 <log_strdup+0x6c>)
    2bd4:	e7f9      	b.n	2bca <log_strdup+0x52>
    2bd6:	bf00      	nop
    2bd8:	0002bd00 	.word	0x0002bd00
    2bdc:	00039644 	.word	0x00039644
    2be0:	20001598 	.word	0x20001598
    2be4:	0002dfc9 	.word	0x0002dfc9

00002be8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2be8:	b148      	cbz	r0, 2bfe <log_is_strdup+0x16>
    2bea:	4b05      	ldr	r3, [pc, #20]	; (2c00 <log_is_strdup+0x18>)
    2bec:	4298      	cmp	r0, r3
    2bee:	d305      	bcc.n	2bfc <log_is_strdup+0x14>
    2bf0:	33a0      	adds	r3, #160	; 0xa0
    2bf2:	4298      	cmp	r0, r3
    2bf4:	bf2c      	ite	cs
    2bf6:	2000      	movcs	r0, #0
    2bf8:	2001      	movcc	r0, #1
    2bfa:	4770      	bx	lr
    2bfc:	2000      	movs	r0, #0
}
    2bfe:	4770      	bx	lr
    2c00:	2000ad98 	.word	0x2000ad98

00002c04 <z_impl_log_process>:
{
    2c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2c08:	4b4c      	ldr	r3, [pc, #304]	; (2d3c <z_impl_log_process+0x138>)
    2c0a:	781b      	ldrb	r3, [r3, #0]
{
    2c0c:	b085      	sub	sp, #20
    2c0e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2c10:	b903      	cbnz	r3, 2c14 <z_impl_log_process+0x10>
    2c12:	b360      	cbz	r0, 2c6e <z_impl_log_process+0x6a>
    2c14:	f04f 0320 	mov.w	r3, #32
    2c18:	f3ef 8611 	mrs	r6, BASEPRI
    2c1c:	f383 8811 	msr	BASEPRI, r3
    2c20:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    2c24:	4846      	ldr	r0, [pc, #280]	; (2d40 <z_impl_log_process+0x13c>)
    2c26:	f020 fcc4 	bl	235b2 <log_list_head_get>
    2c2a:	4605      	mov	r5, r0
	__asm__ volatile(
    2c2c:	f386 8811 	msr	BASEPRI, r6
    2c30:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    2c34:	b178      	cbz	r0, 2c56 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2c36:	f3bf 8f5b 	dmb	ish
    2c3a:	4b42      	ldr	r3, [pc, #264]	; (2d44 <z_impl_log_process+0x140>)
    2c3c:	e853 2f00 	ldrex	r2, [r3]
    2c40:	3a01      	subs	r2, #1
    2c42:	e843 2100 	strex	r1, r2, [r3]
    2c46:	2900      	cmp	r1, #0
    2c48:	d1f8      	bne.n	2c3c <z_impl_log_process+0x38>
    2c4a:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    2c4e:	b194      	cbz	r4, 2c76 <z_impl_log_process+0x72>
	log_msg_put(msg);
    2c50:	4628      	mov	r0, r5
    2c52:	f020 fda7 	bl	237a4 <log_msg_put>
	if (!bypass && dropped_cnt) {
    2c56:	b924      	cbnz	r4, 2c62 <z_impl_log_process+0x5e>
    2c58:	4b3b      	ldr	r3, [pc, #236]	; (2d48 <z_impl_log_process+0x144>)
    2c5a:	681b      	ldr	r3, [r3, #0]
    2c5c:	b10b      	cbz	r3, 2c62 <z_impl_log_process+0x5e>
		dropped_notify();
    2c5e:	f7ff ff03 	bl	2a68 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    2c62:	4837      	ldr	r0, [pc, #220]	; (2d40 <z_impl_log_process+0x13c>)
    2c64:	f020 fca3 	bl	235ae <log_list_head_peek>
    2c68:	1e04      	subs	r4, r0, #0
    2c6a:	bf18      	it	ne
    2c6c:	2401      	movne	r4, #1
}
    2c6e:	4620      	mov	r0, r4
    2c70:	b005      	add	sp, #20
    2c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    2c76:	4b35      	ldr	r3, [pc, #212]	; (2d4c <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    2c78:	781b      	ldrb	r3, [r3, #0]
    2c7a:	b9cb      	cbnz	r3, 2cb0 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2c7c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    2c7e:	07db      	lsls	r3, r3, #31
    2c80:	d416      	bmi.n	2cb0 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    2c82:	f020 fda2 	bl	237ca <log_msg_str_get>
    2c86:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2c88:	4628      	mov	r0, r5
    2c8a:	f020 fd69 	bl	23760 <log_msg_nargs_get>
    2c8e:	4601      	mov	r1, r0
    2c90:	4640      	mov	r0, r8
    2c92:	f7ff fea5 	bl	29e0 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2c96:	4f2e      	ldr	r7, [pc, #184]	; (2d50 <z_impl_log_process+0x14c>)
    2c98:	4b2e      	ldr	r3, [pc, #184]	; (2d54 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2c9a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 2d70 <z_impl_log_process+0x16c>
    2c9e:	1bdb      	subs	r3, r3, r7
    2ca0:	08db      	lsrs	r3, r3, #3
    2ca2:	9303      	str	r3, [sp, #12]
    2ca4:	4b2c      	ldr	r3, [pc, #176]	; (2d58 <z_impl_log_process+0x154>)
    2ca6:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2ca8:	4606      	mov	r6, r0
    2caa:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    2cae:	b936      	cbnz	r6, 2cbe <z_impl_log_process+0xba>
    2cb0:	4e2a      	ldr	r6, [pc, #168]	; (2d5c <z_impl_log_process+0x158>)
    2cb2:	4f2b      	ldr	r7, [pc, #172]	; (2d60 <z_impl_log_process+0x15c>)
    2cb4:	1bbf      	subs	r7, r7, r6
    2cb6:	113f      	asrs	r7, r7, #4
    2cb8:	f04f 0800 	mov.w	r8, #0
    2cbc:	e03a      	b.n	2d34 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    2cbe:	fab6 f186 	clz	r1, r6
    2cc2:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2cc6:	4649      	mov	r1, r9
    2cc8:	4628      	mov	r0, r5
    2cca:	f020 fd4c 	bl	23766 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2cce:	4b25      	ldr	r3, [pc, #148]	; (2d64 <z_impl_log_process+0x160>)
    2cd0:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2cd2:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2cd4:	d302      	bcc.n	2cdc <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2cd6:	4b24      	ldr	r3, [pc, #144]	; (2d68 <z_impl_log_process+0x164>)
    2cd8:	4298      	cmp	r0, r3
    2cda:	d31a      	bcc.n	2d12 <z_impl_log_process+0x10e>
    2cdc:	4608      	mov	r0, r1
    2cde:	f7ff ff83 	bl	2be8 <log_is_strdup>
    2ce2:	4602      	mov	r2, r0
    2ce4:	b9a8      	cbnz	r0, 2d12 <z_impl_log_process+0x10e>
    2ce6:	4b21      	ldr	r3, [pc, #132]	; (2d6c <z_impl_log_process+0x168>)
    2ce8:	4299      	cmp	r1, r3
    2cea:	d012      	beq.n	2d12 <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    2cec:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2cee:	9803      	ldr	r0, [sp, #12]
    2cf0:	0999      	lsrs	r1, r3, #6
    2cf2:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2cf6:	ea4f 138a 	mov.w	r3, sl, lsl #6
    2cfa:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    2cfe:	bf88      	it	hi
    2d00:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    2d04:	f8ad 3000 	strh.w	r3, [sp]
    2d08:	4649      	mov	r1, r9
    2d0a:	4643      	mov	r3, r8
    2d0c:	4658      	mov	r0, fp
    2d0e:	f020 fc9d 	bl	2364c <log_3>
		mask &= ~BIT(idx);
    2d12:	2101      	movs	r1, #1
    2d14:	fa01 f109 	lsl.w	r1, r1, r9
    2d18:	ea26 0601 	bic.w	r6, r6, r1
    2d1c:	e7c7      	b.n	2cae <z_impl_log_process+0xaa>
	return backend->cb->active;
    2d1e:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2d20:	795b      	ldrb	r3, [r3, #5]
    2d22:	b123      	cbz	r3, 2d2e <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    2d24:	6833      	ldr	r3, [r6, #0]
    2d26:	4629      	mov	r1, r5
    2d28:	681b      	ldr	r3, [r3, #0]
    2d2a:	4630      	mov	r0, r6
    2d2c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    2d2e:	f108 0801 	add.w	r8, r8, #1
    2d32:	3610      	adds	r6, #16
    2d34:	45b8      	cmp	r8, r7
    2d36:	dbf2      	blt.n	2d1e <z_impl_log_process+0x11a>
    2d38:	e78a      	b.n	2c50 <z_impl_log_process+0x4c>
    2d3a:	bf00      	nop
    2d3c:	20008117 	.word	0x20008117
    2d40:	20001590 	.word	0x20001590
    2d44:	20001584 	.word	0x20001584
    2d48:	20001588 	.word	0x20001588
    2d4c:	20008118 	.word	0x20008118
    2d50:	0002bf50 	.word	0x0002bf50
    2d54:	0002c0a8 	.word	0x0002c0a8
    2d58:	0002c060 	.word	0x0002c060
    2d5c:	0002c0a8 	.word	0x0002c0a8
    2d60:	0002c0b8 	.word	0x0002c0b8
    2d64:	0002bd00 	.word	0x0002bd00
    2d68:	00039644 	.word	0x00039644
    2d6c:	0002dfc9 	.word	0x0002dfc9
    2d70:	0002dfe3 	.word	0x0002dfe3

00002d74 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2d74:	4b29      	ldr	r3, [pc, #164]	; (2e1c <msg_finalize+0xa8>)
{
    2d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    2d78:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    2d7a:	8141      	strh	r1, [r0, #10]
{
    2d7c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2d7e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2d80:	4d27      	ldr	r5, [pc, #156]	; (2e20 <msg_finalize+0xac>)
    2d82:	60e0      	str	r0, [r4, #12]
    2d84:	f3bf 8f5b 	dmb	ish
    2d88:	e855 3f00 	ldrex	r3, [r5]
    2d8c:	3301      	adds	r3, #1
    2d8e:	e845 3200 	strex	r2, r3, [r5]
    2d92:	2a00      	cmp	r2, #0
    2d94:	d1f8      	bne.n	2d88 <msg_finalize+0x14>
    2d96:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    2d9a:	f04f 0320 	mov.w	r3, #32
    2d9e:	f3ef 8611 	mrs	r6, BASEPRI
    2da2:	f383 8811 	msr	BASEPRI, r3
    2da6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2daa:	481e      	ldr	r0, [pc, #120]	; (2e24 <msg_finalize+0xb0>)
    2dac:	4621      	mov	r1, r4
    2dae:	f020 fbf4 	bl	2359a <log_list_add_tail>
	__asm__ volatile(
    2db2:	f386 8811 	msr	BASEPRI, r6
    2db6:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    2dba:	4b1b      	ldr	r3, [pc, #108]	; (2e28 <msg_finalize+0xb4>)
    2dbc:	781b      	ldrb	r3, [r3, #0]
    2dbe:	b183      	cbz	r3, 2de2 <msg_finalize+0x6e>
	__asm__ volatile(
    2dc0:	f04f 0320 	mov.w	r3, #32
    2dc4:	f3ef 8411 	mrs	r4, BASEPRI
    2dc8:	f383 8811 	msr	BASEPRI, r3
    2dcc:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2dd0:	2000      	movs	r0, #0
    2dd2:	f7ff ff17 	bl	2c04 <z_impl_log_process>
	__asm__ volatile(
    2dd6:	f384 8811 	msr	BASEPRI, r4
    2dda:	f3bf 8f6f 	isb	sy
}
    2dde:	b002      	add	sp, #8
    2de0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2de2:	4a12      	ldr	r2, [pc, #72]	; (2e2c <msg_finalize+0xb8>)
    2de4:	682b      	ldr	r3, [r5, #0]
    2de6:	6812      	ldr	r2, [r2, #0]
    2de8:	2a00      	cmp	r2, #0
    2dea:	d0f8      	beq.n	2dde <msg_finalize+0x6a>
    2dec:	2b01      	cmp	r3, #1
    2dee:	d10a      	bne.n	2e06 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    2df0:	2200      	movs	r2, #0
    2df2:	2300      	movs	r3, #0
    2df4:	e9cd 2300 	strd	r2, r3, [sp]
    2df8:	480d      	ldr	r0, [pc, #52]	; (2e30 <msg_finalize+0xbc>)
    2dfa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2dfe:	2300      	movs	r3, #0
    2e00:	f01d fc82 	bl	20708 <z_impl_k_timer_start>
    2e04:	e7eb      	b.n	2dde <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2e06:	2b0a      	cmp	r3, #10
    2e08:	d1e9      	bne.n	2dde <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    2e0a:	4809      	ldr	r0, [pc, #36]	; (2e30 <msg_finalize+0xbc>)
    2e0c:	f028 faf7 	bl	2b3fe <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2e10:	4808      	ldr	r0, [pc, #32]	; (2e34 <msg_finalize+0xc0>)
}
    2e12:	b002      	add	sp, #8
    2e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    2e18:	f01d b934 	b.w	20084 <z_impl_k_sem_give>
    2e1c:	20000310 	.word	0x20000310
    2e20:	20001584 	.word	0x20001584
    2e24:	20001590 	.word	0x20001590
    2e28:	20008118 	.word	0x20008118
    2e2c:	200015b4 	.word	0x200015b4
    2e30:	20000dd8 	.word	0x20000dd8
    2e34:	20000be0 	.word	0x20000be0

00002e38 <log_process_thread_func>:
{
    2e38:	b510      	push	{r4, lr}
	log_init();
    2e3a:	f7ff fe73 	bl	2b24 <log_init>
	return z_impl_k_current_get();
    2e3e:	f01d f91b 	bl	20078 <z_impl_k_current_get>
	proc_tid = process_tid;
    2e42:	4b0c      	ldr	r3, [pc, #48]	; (2e74 <log_process_thread_func+0x3c>)
    2e44:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2e46:	b130      	cbz	r0, 2e56 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2e48:	4b0b      	ldr	r3, [pc, #44]	; (2e78 <log_process_thread_func+0x40>)
	    process_tid &&
    2e4a:	681b      	ldr	r3, [r3, #0]
    2e4c:	2b09      	cmp	r3, #9
    2e4e:	dd02      	ble.n	2e56 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    2e50:	480a      	ldr	r0, [pc, #40]	; (2e7c <log_process_thread_func+0x44>)
    2e52:	f01d f917 	bl	20084 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2e56:	4c09      	ldr	r4, [pc, #36]	; (2e7c <log_process_thread_func+0x44>)
    2e58:	2000      	movs	r0, #0
    2e5a:	f7ff fed3 	bl	2c04 <z_impl_log_process>
		if (log_process(false) == false) {
    2e5e:	2800      	cmp	r0, #0
    2e60:	d1fa      	bne.n	2e58 <log_process_thread_func+0x20>
    2e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e6a:	4620      	mov	r0, r4
    2e6c:	f01d f930 	bl	200d0 <z_impl_k_sem_take>
    2e70:	e7f2      	b.n	2e58 <log_process_thread_func+0x20>
    2e72:	bf00      	nop
    2e74:	200015b4 	.word	0x200015b4
    2e78:	20001584 	.word	0x20001584
    2e7c:	20000be0 	.word	0x20000be0

00002e80 <z_impl_log_panic>:
{
    2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    2e82:	4f0e      	ldr	r7, [pc, #56]	; (2ebc <z_impl_log_panic+0x3c>)
    2e84:	783d      	ldrb	r5, [r7, #0]
    2e86:	b975      	cbnz	r5, 2ea6 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    2e88:	4c0d      	ldr	r4, [pc, #52]	; (2ec0 <z_impl_log_panic+0x40>)
    2e8a:	4e0e      	ldr	r6, [pc, #56]	; (2ec4 <z_impl_log_panic+0x44>)
	log_init();
    2e8c:	f7ff fe4a 	bl	2b24 <log_init>
    2e90:	1b36      	subs	r6, r6, r4
    2e92:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2e94:	42b5      	cmp	r5, r6
    2e96:	db07      	blt.n	2ea8 <z_impl_log_panic+0x28>
    2e98:	2000      	movs	r0, #0
    2e9a:	f7ff feb3 	bl	2c04 <z_impl_log_process>
		while (log_process(false) == true) {
    2e9e:	2800      	cmp	r0, #0
    2ea0:	d1fa      	bne.n	2e98 <z_impl_log_panic+0x18>
	panic_mode = true;
    2ea2:	2301      	movs	r3, #1
    2ea4:	703b      	strb	r3, [r7, #0]
}
    2ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2ea8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2eaa:	795b      	ldrb	r3, [r3, #5]
    2eac:	b11b      	cbz	r3, 2eb6 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2eae:	6823      	ldr	r3, [r4, #0]
    2eb0:	4620      	mov	r0, r4
    2eb2:	691b      	ldr	r3, [r3, #16]
    2eb4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2eb6:	3501      	adds	r5, #1
    2eb8:	3410      	adds	r4, #16
    2eba:	e7eb      	b.n	2e94 <z_impl_log_panic+0x14>
    2ebc:	20008118 	.word	0x20008118
    2ec0:	0002c0a8 	.word	0x0002c0a8
    2ec4:	0002c0b8 	.word	0x0002c0b8

00002ec8 <log_free>:
{
    2ec8:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2eca:	3804      	subs	r0, #4
    2ecc:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2ece:	f3bf 8f5b 	dmb	ish
    2ed2:	e850 3f00 	ldrex	r3, [r0]
    2ed6:	1e5a      	subs	r2, r3, #1
    2ed8:	e840 2100 	strex	r1, r2, [r0]
    2edc:	2900      	cmp	r1, #0
    2ede:	d1f8      	bne.n	2ed2 <log_free+0xa>
    2ee0:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2ee4:	2b01      	cmp	r3, #1
    2ee6:	d103      	bne.n	2ef0 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2ee8:	4803      	ldr	r0, [pc, #12]	; (2ef8 <log_free+0x30>)
    2eea:	a901      	add	r1, sp, #4
    2eec:	f01c fc0c 	bl	1f708 <k_mem_slab_free>
}
    2ef0:	b003      	add	sp, #12
    2ef2:	f85d fb04 	ldr.w	pc, [sp], #4
    2ef6:	bf00      	nop
    2ef8:	20001598 	.word	0x20001598

00002efc <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2efc:	2320      	movs	r3, #32
    2efe:	4902      	ldr	r1, [pc, #8]	; (2f08 <log_msg_pool_init+0xc>)
    2f00:	4802      	ldr	r0, [pc, #8]	; (2f0c <log_msg_pool_init+0x10>)
    2f02:	461a      	mov	r2, r3
    2f04:	f027 bf84 	b.w	2ae10 <k_mem_slab_init>
    2f08:	2000ae38 	.word	0x2000ae38
    2f0c:	200015b8 	.word	0x200015b8

00002f10 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2f12:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2f14:	4d09      	ldr	r5, [pc, #36]	; (2f3c <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2f16:	9301      	str	r3, [sp, #4]
    2f18:	2001      	movs	r0, #1
    2f1a:	f7ff fe73 	bl	2c04 <z_impl_log_process>
    2f1e:	4604      	mov	r4, r0
			log_dropped();
    2f20:	f7ff fdc8 	bl	2ab4 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2f24:	2200      	movs	r2, #0
    2f26:	2300      	movs	r3, #0
    2f28:	a901      	add	r1, sp, #4
    2f2a:	4628      	mov	r0, r5
    2f2c:	f01c fbba 	bl	1f6a4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2f30:	b108      	cbz	r0, 2f36 <log_msg_no_space_handle+0x26>
    2f32:	2c00      	cmp	r4, #0
    2f34:	d1f0      	bne.n	2f18 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    2f36:	9801      	ldr	r0, [sp, #4]
    2f38:	b003      	add	sp, #12
    2f3a:	bd30      	pop	{r4, r5, pc}
    2f3c:	200015b8 	.word	0x200015b8

00002f40 <log_msg_chunk_alloc>:
{
    2f40:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2f42:	2300      	movs	r3, #0
    2f44:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2f46:	4807      	ldr	r0, [pc, #28]	; (2f64 <log_msg_chunk_alloc+0x24>)
    2f48:	2200      	movs	r2, #0
    2f4a:	2300      	movs	r3, #0
    2f4c:	a901      	add	r1, sp, #4
    2f4e:	f01c fba9 	bl	1f6a4 <k_mem_slab_alloc>
	if (err != 0) {
    2f52:	b110      	cbz	r0, 2f5a <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2f54:	f7ff ffdc 	bl	2f10 <log_msg_no_space_handle>
    2f58:	9001      	str	r0, [sp, #4]
}
    2f5a:	9801      	ldr	r0, [sp, #4]
    2f5c:	b003      	add	sp, #12
    2f5e:	f85d fb04 	ldr.w	pc, [sp], #4
    2f62:	bf00      	nop
    2f64:	200015b8 	.word	0x200015b8

00002f68 <msg_free>:
{
    2f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2f6a:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2f6c:	7a45      	ldrb	r5, [r0, #9]
{
    2f6e:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    2f70:	092d      	lsrs	r5, r5, #4
{
    2f72:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2f74:	07d8      	lsls	r0, r3, #31
    2f76:	d41c      	bmi.n	2fb2 <msg_free+0x4a>
    2f78:	b1dd      	cbz	r5, 2fb2 <msg_free+0x4a>
		uint32_t smask = 0;
    2f7a:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    2f7c:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2f7e:	9801      	ldr	r0, [sp, #4]
    2f80:	4631      	mov	r1, r6
    2f82:	f020 fbf0 	bl	23766 <log_msg_arg_get>
    2f86:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2f88:	f7ff fe2e 	bl	2be8 <log_is_strdup>
    2f8c:	b170      	cbz	r0, 2fac <msg_free+0x44>
				if (smask == 0) {
    2f8e:	b934      	cbnz	r4, 2f9e <msg_free+0x36>
					smask = z_log_get_s_mask(
    2f90:	9b01      	ldr	r3, [sp, #4]
    2f92:	4629      	mov	r1, r5
    2f94:	6918      	ldr	r0, [r3, #16]
    2f96:	f7ff fd23 	bl	29e0 <z_log_get_s_mask>
					if (smask == 0) {
    2f9a:	4604      	mov	r4, r0
    2f9c:	b148      	cbz	r0, 2fb2 <msg_free+0x4a>
				if (smask & BIT(i)) {
    2f9e:	fa24 f306 	lsr.w	r3, r4, r6
    2fa2:	07d9      	lsls	r1, r3, #31
    2fa4:	d502      	bpl.n	2fac <msg_free+0x44>
					log_free(buf);
    2fa6:	4638      	mov	r0, r7
    2fa8:	f7ff ff8e 	bl	2ec8 <log_free>
		for (i = 0; i < nargs; i++) {
    2fac:	3601      	adds	r6, #1
    2fae:	42ae      	cmp	r6, r5
    2fb0:	d3e5      	bcc.n	2f7e <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    2fb2:	9b01      	ldr	r3, [sp, #4]
    2fb4:	7a1a      	ldrb	r2, [r3, #8]
    2fb6:	0792      	lsls	r2, r2, #30
    2fb8:	d504      	bpl.n	2fc4 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2fba:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2fbc:	4c08      	ldr	r4, [pc, #32]	; (2fe0 <msg_free+0x78>)
    2fbe:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    2fc0:	9b03      	ldr	r3, [sp, #12]
    2fc2:	b92b      	cbnz	r3, 2fd0 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2fc4:	4806      	ldr	r0, [pc, #24]	; (2fe0 <msg_free+0x78>)
    2fc6:	a901      	add	r1, sp, #4
    2fc8:	f01c fb9e 	bl	1f708 <k_mem_slab_free>
}
    2fcc:	b005      	add	sp, #20
    2fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    2fd0:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2fd2:	a903      	add	r1, sp, #12
    2fd4:	4620      	mov	r0, r4
    2fd6:	f01c fb97 	bl	1f708 <k_mem_slab_free>
		cont = next;
    2fda:	9503      	str	r5, [sp, #12]
    2fdc:	e7f0      	b.n	2fc0 <msg_free+0x58>
    2fde:	bf00      	nop
    2fe0:	200015b8 	.word	0x200015b8

00002fe4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    2fe4:	b40e      	push	{r1, r2, r3}
    2fe6:	b503      	push	{r0, r1, lr}
    2fe8:	ab03      	add	r3, sp, #12
    2fea:	4601      	mov	r1, r0
    2fec:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    2ff0:	4804      	ldr	r0, [pc, #16]	; (3004 <print_formatted+0x20>)
	va_start(args, fmt);
    2ff2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    2ff4:	f7ff f928 	bl	2248 <cbvprintf>
	va_end(args);

	return length;
}
    2ff8:	b002      	add	sp, #8
    2ffa:	f85d eb04 	ldr.w	lr, [sp], #4
    2ffe:	b003      	add	sp, #12
    3000:	4770      	bx	lr
    3002:	bf00      	nop
    3004:	00023b73 	.word	0x00023b73

00003008 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    3008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    300c:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    300e:	f011 0402 	ands.w	r4, r1, #2
{
    3012:	4690      	mov	r8, r2
    3014:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    3018:	4606      	mov	r6, r0
    301a:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    301c:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3020:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3024:	d007      	beq.n	3036 <prefix_print+0x2e>
	if (!format) {
    3026:	f011 0f44 	tst.w	r1, #68	; 0x44
    302a:	d137      	bne.n	309c <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    302c:	4932      	ldr	r1, [pc, #200]	; (30f8 <prefix_print+0xf0>)
    302e:	f7ff ffd9 	bl	2fe4 <print_formatted>
			length = print_formatted(log_output,
    3032:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    3034:	460c      	mov	r4, r1
	if (color) {
    3036:	f1b9 0f00 	cmp.w	r9, #0
    303a:	d00a      	beq.n	3052 <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    303c:	4b2f      	ldr	r3, [pc, #188]	; (30fc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    303e:	4930      	ldr	r1, [pc, #192]	; (3100 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    3040:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    3044:	4b2f      	ldr	r3, [pc, #188]	; (3104 <prefix_print+0xfc>)
    3046:	4630      	mov	r0, r6
    3048:	2a00      	cmp	r2, #0
    304a:	bf08      	it	eq
    304c:	461a      	moveq	r2, r3
    304e:	f7ff ffc9 	bl	2fe4 <print_formatted>
	if (level_on) {
    3052:	b13d      	cbz	r5, 3064 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    3054:	4b2c      	ldr	r3, [pc, #176]	; (3108 <prefix_print+0x100>)
    3056:	492d      	ldr	r1, [pc, #180]	; (310c <prefix_print+0x104>)
    3058:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    305c:	4630      	mov	r0, r6
    305e:	f7ff ffc1 	bl	2fe4 <print_formatted>
    3062:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    3064:	f1b8 0f00 	cmp.w	r8, #0
    3068:	d043      	beq.n	30f2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    306a:	2301      	movs	r3, #1
    306c:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    3070:	4b27      	ldr	r3, [pc, #156]	; (3110 <prefix_print+0x108>)
    3072:	f017 0f10 	tst.w	r7, #16
    3076:	4f27      	ldr	r7, [pc, #156]	; (3114 <prefix_print+0x10c>)
    3078:	bf18      	it	ne
    307a:	461f      	movne	r7, r3
    307c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    3080:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3084:	f7ff fd26 	bl	2ad4 <log_source_name_get>
    3088:	4639      	mov	r1, r7
    308a:	4602      	mov	r2, r0
    308c:	4630      	mov	r0, r6
    308e:	f7ff ffa9 	bl	2fe4 <print_formatted>
    3092:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    3094:	4420      	add	r0, r4
    3096:	b005      	add	sp, #20
    3098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    309c:	4b1e      	ldr	r3, [pc, #120]	; (3118 <prefix_print+0x110>)
    309e:	6819      	ldr	r1, [r3, #0]
    30a0:	2900      	cmp	r1, #0
    30a2:	d0c7      	beq.n	3034 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    30a4:	4b1d      	ldr	r3, [pc, #116]	; (311c <prefix_print+0x114>)
    30a6:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    30b0:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    30b4:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    30b8:	fbb4 f2fe 	udiv	r2, r4, lr
    30bc:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    30c0:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    30c4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    30c8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    30cc:	fbb4 fbf1 	udiv	fp, r4, r1
    30d0:	fb01 441b 	mls	r4, r1, fp, r4
    30d4:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    30d8:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    30dc:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    30e0:	e9cd b101 	strd	fp, r1, [sp, #4]
    30e4:	fb0a e113 	mls	r1, sl, r3, lr
    30e8:	9100      	str	r1, [sp, #0]
    30ea:	490d      	ldr	r1, [pc, #52]	; (3120 <prefix_print+0x118>)
    30ec:	f7ff ff7a 	bl	2fe4 <print_formatted>
    30f0:	e79f      	b.n	3032 <prefix_print+0x2a>
	total += print_formatted(log_output,
    30f2:	4f08      	ldr	r7, [pc, #32]	; (3114 <prefix_print+0x10c>)
    30f4:	e7c2      	b.n	307c <prefix_print+0x74>
    30f6:	bf00      	nop
    30f8:	0002e034 	.word	0x0002e034
    30fc:	0002c150 	.word	0x0002c150
    3100:	0002dece 	.word	0x0002dece
    3104:	0002e026 	.word	0x0002e026
    3108:	0002c164 	.word	0x0002c164
    310c:	0002e059 	.word	0x0002e059
    3110:	0002e030 	.word	0x0002e030
    3114:	0002e02b 	.word	0x0002e02b
    3118:	200015d4 	.word	0x200015d4
    311c:	200015d8 	.word	0x200015d8
    3120:	0002e03d 	.word	0x0002e03d

00003124 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    3124:	b538      	push	{r3, r4, r5, lr}
    3126:	460c      	mov	r4, r1
	if (color) {
    3128:	07e1      	lsls	r1, r4, #31
{
    312a:	4605      	mov	r5, r0
	if (color) {
    312c:	d503      	bpl.n	3136 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    312e:	4a08      	ldr	r2, [pc, #32]	; (3150 <postfix_print+0x2c>)
    3130:	4908      	ldr	r1, [pc, #32]	; (3154 <postfix_print+0x30>)
    3132:	f7ff ff57 	bl	2fe4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3136:	06e2      	lsls	r2, r4, #27
    3138:	d408      	bmi.n	314c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    313a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    313c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    313e:	bf4c      	ite	mi
    3140:	4905      	ldrmi	r1, [pc, #20]	; (3158 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    3142:	4906      	ldrpl	r1, [pc, #24]	; (315c <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    3144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    3148:	f7ff bf4c 	b.w	2fe4 <print_formatted>
}
    314c:	bd38      	pop	{r3, r4, r5, pc}
    314e:	bf00      	nop
    3150:	0002e026 	.word	0x0002e026
    3154:	0002dece 	.word	0x0002dece
    3158:	0002e060 	.word	0x0002e060
    315c:	0002e05f 	.word	0x0002e05f

00003160 <hexdump_line_print>:
{
    3160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3164:	461d      	mov	r5, r3
    3166:	9b08      	ldr	r3, [sp, #32]
    3168:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    316a:	06da      	lsls	r2, r3, #27
{
    316c:	4604      	mov	r4, r0
    316e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3170:	d405      	bmi.n	317e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3172:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    3174:	bf4c      	ite	mi
    3176:	492b      	ldrmi	r1, [pc, #172]	; (3224 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    3178:	492b      	ldrpl	r1, [pc, #172]	; (3228 <hexdump_line_print+0xc8>)
    317a:	f7ff ff33 	bl	2fe4 <print_formatted>
		print_formatted(log_output, " ");
    317e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 3230 <hexdump_line_print+0xd0>
{
    3182:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    3186:	45a8      	cmp	r8, r5
    3188:	db2d      	blt.n	31e6 <hexdump_line_print+0x86>
			print_formatted(log_output, "   ");
    318a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3234 <hexdump_line_print+0xd4>
			print_formatted(log_output, "%02x ", data[i]);
    318e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 3238 <hexdump_line_print+0xd8>
			print_formatted(log_output, " ");
    3192:	f8df a09c 	ldr.w	sl, [pc, #156]	; 3230 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3196:	2500      	movs	r5, #0
		if (i < length) {
    3198:	42bd      	cmp	r5, r7
    319a:	d232      	bcs.n	3202 <hexdump_line_print+0xa2>
			print_formatted(log_output, "%02x ", data[i]);
    319c:	5d72      	ldrb	r2, [r6, r5]
    319e:	4649      	mov	r1, r9
    31a0:	4620      	mov	r0, r4
    31a2:	f7ff ff1f 	bl	2fe4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31a6:	3501      	adds	r5, #1
    31a8:	2d10      	cmp	r5, #16
    31aa:	d123      	bne.n	31f4 <hexdump_line_print+0x94>
	print_formatted(log_output, "|");
    31ac:	491f      	ldr	r1, [pc, #124]	; (322c <hexdump_line_print+0xcc>)
			print_formatted(log_output, " ");
    31ae:	f8df 8080 	ldr.w	r8, [pc, #128]	; 3230 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
    31b2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 323c <hexdump_line_print+0xdc>
			print_formatted(log_output, "%c",
    31b6:	f8df a088 	ldr.w	sl, [pc, #136]	; 3240 <hexdump_line_print+0xe0>
	print_formatted(log_output, "|");
    31ba:	4620      	mov	r0, r4
    31bc:	f7ff ff12 	bl	2fe4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31c0:	2500      	movs	r5, #0
		if (i < length) {
    31c2:	42af      	cmp	r7, r5
    31c4:	d929      	bls.n	321a <hexdump_line_print+0xba>
			char c = (char)data[i];
    31c6:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(log_output, "%c",
    31c8:	f812 3009 	ldrb.w	r3, [r2, r9]
    31cc:	f013 0f97 	tst.w	r3, #151	; 0x97
    31d0:	bf08      	it	eq
    31d2:	222e      	moveq	r2, #46	; 0x2e
    31d4:	4651      	mov	r1, sl
    31d6:	4620      	mov	r0, r4
    31d8:	f7ff ff04 	bl	2fe4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    31dc:	3501      	adds	r5, #1
    31de:	2d10      	cmp	r5, #16
    31e0:	d114      	bne.n	320c <hexdump_line_print+0xac>
}
    31e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    31e6:	4649      	mov	r1, r9
    31e8:	4620      	mov	r0, r4
    31ea:	f7ff fefb 	bl	2fe4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    31ee:	f108 0801 	add.w	r8, r8, #1
    31f2:	e7c8      	b.n	3186 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    31f4:	076a      	lsls	r2, r5, #29
    31f6:	d1cf      	bne.n	3198 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    31f8:	4651      	mov	r1, sl
    31fa:	4620      	mov	r0, r4
    31fc:	f7ff fef2 	bl	2fe4 <print_formatted>
    3200:	e7ca      	b.n	3198 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    3202:	4641      	mov	r1, r8
    3204:	4620      	mov	r0, r4
    3206:	f7ff feed 	bl	2fe4 <print_formatted>
    320a:	e7cc      	b.n	31a6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    320c:	076b      	lsls	r3, r5, #29
    320e:	d1d8      	bne.n	31c2 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    3210:	4641      	mov	r1, r8
    3212:	4620      	mov	r0, r4
    3214:	f7ff fee6 	bl	2fe4 <print_formatted>
    3218:	e7d3      	b.n	31c2 <hexdump_line_print+0x62>
			print_formatted(log_output, " ");
    321a:	4641      	mov	r1, r8
    321c:	4620      	mov	r0, r4
    321e:	f7ff fee1 	bl	2fe4 <print_formatted>
    3222:	e7db      	b.n	31dc <hexdump_line_print+0x7c>
    3224:	0002e060 	.word	0x0002e060
    3228:	0002e05f 	.word	0x0002e05f
    322c:	0002e06c 	.word	0x0002e06c
    3230:	0002e06a 	.word	0x0002e06a
    3234:	0002e068 	.word	0x0002e068
    3238:	0002e062 	.word	0x0002e062
    323c:	0003933c 	.word	0x0003933c
    3240:	0002e06e 	.word	0x0002e06e

00003244 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    3244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    3248:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    324a:	f013 0807 	ands.w	r8, r3, #7
{
    324e:	4617      	mov	r7, r2
    3250:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3252:	7a0a      	ldrb	r2, [r1, #8]
    3254:	4605      	mov	r5, r0
    3256:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    3258:	d020      	beq.n	329c <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    325a:	8949      	ldrh	r1, [r1, #10]
    325c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    3260:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3262:	43d2      	mvns	r2, r2
    3264:	e9cd 8300 	strd	r8, r3, [sp]
    3268:	9102      	str	r1, [sp, #8]
    326a:	68f3      	ldr	r3, [r6, #12]
    326c:	f002 0201 	and.w	r2, r2, #1
    3270:	4639      	mov	r1, r7
    3272:	f7ff fec9 	bl	3008 <prefix_print>
    3276:	4681      	mov	r9, r0
    3278:	7a34      	ldrb	r4, [r6, #8]
    327a:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    327c:	f014 0401 	ands.w	r4, r4, #1
    3280:	d00e      	beq.n	32a0 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    3282:	4629      	mov	r1, r5
    3284:	4630      	mov	r0, r6
    3286:	f020 fb0a 	bl	2389e <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    328a:	f1b8 0f00 	cmp.w	r8, #0
    328e:	d02b      	beq.n	32e8 <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    3290:	4642      	mov	r2, r8
    3292:	4639      	mov	r1, r7
    3294:	4628      	mov	r0, r5
    3296:	f7ff ff45 	bl	3124 <postfix_print>
    329a:	e025      	b.n	32e8 <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    329c:	46c1      	mov	r9, r8
    329e:	e7eb      	b.n	3278 <log_output_msg_process+0x34>
	} else if (raw_string) {
    32a0:	f1b8 0f00 	cmp.w	r8, #0
    32a4:	d126      	bne.n	32f4 <log_output_msg_process+0xb0>
	size_t offset = 0;
    32a6:	4627      	mov	r7, r4
		length = log_output->size;
    32a8:	68eb      	ldr	r3, [r5, #12]
    32aa:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    32ac:	aa06      	add	r2, sp, #24
    32ae:	463b      	mov	r3, r7
    32b0:	68a9      	ldr	r1, [r5, #8]
    32b2:	4630      	mov	r0, r6
    32b4:	f020 fadf 	bl	23876 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    32b8:	9a06      	ldr	r2, [sp, #24]
    32ba:	686b      	ldr	r3, [r5, #4]
    32bc:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    32be:	b13a      	cbz	r2, 32d0 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    32c0:	68ab      	ldr	r3, [r5, #8]
    32c2:	4413      	add	r3, r2
    32c4:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    32c8:	f1a4 030a 	sub.w	r3, r4, #10
    32cc:	425c      	negs	r4, r3
    32ce:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    32d0:	4628      	mov	r0, r5
    32d2:	f020 fc41 	bl	23b58 <log_output_flush>
		offset += length;
    32d6:	9b06      	ldr	r3, [sp, #24]
    32d8:	441f      	add	r7, r3
	} while (length > 0);
    32da:	2b00      	cmp	r3, #0
    32dc:	d1e4      	bne.n	32a8 <log_output_msg_process+0x64>
	if (eol) {
    32de:	b11c      	cbz	r4, 32e8 <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    32e0:	4913      	ldr	r1, [pc, #76]	; (3330 <log_output_msg_process+0xec>)
    32e2:	4628      	mov	r0, r5
    32e4:	f7ff fe7e 	bl	2fe4 <print_formatted>
	}

	log_output_flush(log_output);
    32e8:	4628      	mov	r0, r5
    32ea:	f020 fc35 	bl	23b58 <log_output_flush>
}
    32ee:	b00a      	add	sp, #40	; 0x28
    32f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    32f4:	4630      	mov	r0, r6
    32f6:	f020 fa68 	bl	237ca <log_msg_str_get>
    32fa:	490e      	ldr	r1, [pc, #56]	; (3334 <log_output_msg_process+0xf0>)
    32fc:	4602      	mov	r2, r0
    32fe:	4628      	mov	r0, r5
    3300:	f7ff fe70 	bl	2fe4 <print_formatted>
		length = sizeof(buf);
    3304:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3308:	aa05      	add	r2, sp, #20
    330a:	4623      	mov	r3, r4
    330c:	a906      	add	r1, sp, #24
    330e:	4630      	mov	r0, r6
		length = sizeof(buf);
    3310:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    3314:	f020 faaf 	bl	23876 <log_msg_hexdump_data_get>
		if (length) {
    3318:	9a05      	ldr	r2, [sp, #20]
    331a:	2a00      	cmp	r2, #0
    331c:	d0b8      	beq.n	3290 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    331e:	464b      	mov	r3, r9
    3320:	9700      	str	r7, [sp, #0]
    3322:	a906      	add	r1, sp, #24
    3324:	4628      	mov	r0, r5
    3326:	f7ff ff1b 	bl	3160 <hexdump_line_print>
			offset += length;
    332a:	9b05      	ldr	r3, [sp, #20]
    332c:	441c      	add	r4, r3
		length = sizeof(buf);
    332e:	e7eb      	b.n	3308 <log_output_msg_process+0xc4>
    3330:	0002e071 	.word	0x0002e071
    3334:	0002dece 	.word	0x0002dece

00003338 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    3338:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    333a:	f242 730f 	movw	r3, #9999	; 0x270f
    333e:	428b      	cmp	r3, r1
    3340:	bf28      	it	cs
    3342:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    3344:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3346:	4a0f      	ldr	r2, [pc, #60]	; (3384 <log_output_dropped_process+0x4c>)
{
    3348:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    334a:	2105      	movs	r1, #5
    334c:	4668      	mov	r0, sp
    334e:	f01f fd3b 	bl	22dc8 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3352:	6863      	ldr	r3, [r4, #4]
    3354:	490c      	ldr	r1, [pc, #48]	; (3388 <log_output_dropped_process+0x50>)
    3356:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3358:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    335a:	220b      	movs	r2, #11
    335c:	4628      	mov	r0, r5
    335e:	f020 fa91 	bl	23884 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    3362:	6863      	ldr	r3, [r4, #4]
    3364:	4632      	mov	r2, r6
    3366:	4669      	mov	r1, sp
    3368:	4628      	mov	r0, r5
    336a:	685b      	ldr	r3, [r3, #4]
    336c:	f020 fa8a 	bl	23884 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3370:	6863      	ldr	r3, [r4, #4]
    3372:	4906      	ldr	r1, [pc, #24]	; (338c <log_output_dropped_process+0x54>)
    3374:	685b      	ldr	r3, [r3, #4]
    3376:	221b      	movs	r2, #27
    3378:	4628      	mov	r0, r5
    337a:	f020 fa83 	bl	23884 <buffer_write>
		     log_output->control_block->ctx);
}
    337e:	b002      	add	sp, #8
    3380:	bd70      	pop	{r4, r5, r6, pc}
    3382:	bf00      	nop
    3384:	0002f6be 	.word	0x0002f6be
    3388:	0002e0af 	.word	0x0002e0af
    338c:	0002e093 	.word	0x0002e093

00003390 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3390:	4a08      	ldr	r2, [pc, #32]	; (33b4 <log_output_timestamp_freq_set+0x24>)
{
    3392:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    3394:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3396:	4c08      	ldr	r4, [pc, #32]	; (33b8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    3398:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    339a:	2100      	movs	r1, #0
    339c:	42a0      	cmp	r0, r4
    339e:	d804      	bhi.n	33aa <log_output_timestamp_freq_set+0x1a>
    33a0:	b101      	cbz	r1, 33a4 <log_output_timestamp_freq_set+0x14>
    33a2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    33a4:	4b05      	ldr	r3, [pc, #20]	; (33bc <log_output_timestamp_freq_set+0x2c>)
    33a6:	6018      	str	r0, [r3, #0]
}
    33a8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    33aa:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    33ac:	005b      	lsls	r3, r3, #1
    33ae:	2101      	movs	r1, #1
    33b0:	e7f4      	b.n	339c <log_output_timestamp_freq_set+0xc>
    33b2:	bf00      	nop
    33b4:	200015d8 	.word	0x200015d8
    33b8:	000f4240 	.word	0x000f4240
    33bc:	200015d4 	.word	0x200015d4

000033c0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    33c0:	4b01      	ldr	r3, [pc, #4]	; (33c8 <log_backend_rtt_init+0x8>)
    33c2:	2201      	movs	r2, #1
    33c4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    33c6:	4770      	bx	lr
    33c8:	20008129 	.word	0x20008129

000033cc <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    33cc:	4b02      	ldr	r3, [pc, #8]	; (33d8 <panic+0xc>)
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    33ce:	4803      	ldr	r0, [pc, #12]	; (33dc <panic+0x10>)
    33d0:	2201      	movs	r2, #1
    33d2:	701a      	strb	r2, [r3, #0]
    33d4:	f020 bbc0 	b.w	23b58 <log_output_flush>
    33d8:	2000812a 	.word	0x2000812a
    33dc:	0002c190 	.word	0x0002c190

000033e0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    33e0:	4801      	ldr	r0, [pc, #4]	; (33e8 <dropped+0x8>)
    33e2:	f7ff bfa9 	b.w	3338 <log_output_dropped_process>
    33e6:	bf00      	nop
    33e8:	0002c190 	.word	0x0002c190

000033ec <put>:
{
    33ec:	b510      	push	{r4, lr}
	log_msg_get(msg);
    33ee:	4608      	mov	r0, r1
    33f0:	460c      	mov	r4, r1
    33f2:	f020 f9a8 	bl	23746 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    33f6:	4805      	ldr	r0, [pc, #20]	; (340c <put+0x20>)
    33f8:	4621      	mov	r1, r4
    33fa:	220f      	movs	r2, #15
    33fc:	f7ff ff22 	bl	3244 <log_output_msg_process>
	log_msg_put(msg);
    3400:	4620      	mov	r0, r4
}
    3402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3406:	f020 b9cd 	b.w	237a4 <log_msg_put>
    340a:	bf00      	nop
    340c:	0002c190 	.word	0x0002c190

00003410 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3410:	4b05      	ldr	r3, [pc, #20]	; (3428 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    3412:	781b      	ldrb	r3, [r3, #0]
    3414:	b11b      	cbz	r3, 341e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    3416:	f241 3088 	movw	r0, #5000	; 0x1388
    341a:	f027 bef3 	b.w	2b204 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    341e:	20a4      	movs	r0, #164	; 0xa4
    3420:	2100      	movs	r1, #0
    3422:	f01c be07 	b.w	20034 <z_impl_k_sleep>
    3426:	bf00      	nop
    3428:	2000812a 	.word	0x2000812a

0000342c <data_out_block_mode>:
{
    342c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3430:	f8df 9090 	ldr.w	r9, [pc, #144]	; 34c4 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    3434:	f8df b090 	ldr.w	fp, [pc, #144]	; 34c8 <data_out_block_mode+0x9c>
{
    3438:	4607      	mov	r7, r0
    343a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    343c:	2404      	movs	r4, #4
    343e:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    3440:	f899 3000 	ldrb.w	r3, [r9]
    3444:	b933      	cbnz	r3, 3454 <data_out_block_mode+0x28>
    3446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    344a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    344e:	4658      	mov	r0, fp
    3450:	f01c f986 	bl	1f760 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3454:	4632      	mov	r2, r6
    3456:	4639      	mov	r1, r7
    3458:	2000      	movs	r0, #0
    345a:	f000 fe6f 	bl	413c <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    345e:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3462:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    3464:	b913      	cbnz	r3, 346c <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    3466:	4658      	mov	r0, fp
    3468:	f01c f9f2 	bl	1f850 <z_impl_k_mutex_unlock>
		if (ret) {
    346c:	4d14      	ldr	r5, [pc, #80]	; (34c0 <data_out_block_mode+0x94>)
    346e:	f1b8 0f00 	cmp.w	r8, #0
    3472:	d018      	beq.n	34a6 <data_out_block_mode+0x7a>
	host_present = true;
    3474:	2301      	movs	r3, #1
    3476:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    3478:	f89a 3000 	ldrb.w	r3, [sl]
    347c:	b933      	cbnz	r3, 348c <data_out_block_mode+0x60>
}
    347e:	4630      	mov	r0, r6
    3480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    3484:	b95c      	cbnz	r4, 349e <data_out_block_mode+0x72>
		host_present = false;
    3486:	702c      	strb	r4, [r5, #0]
    3488:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    348c:	2000      	movs	r0, #0
    348e:	f000 fea1 	bl	41d4 <SEGGER_RTT_HasDataUp>
    3492:	2800      	cmp	r0, #0
    3494:	d0f3      	beq.n	347e <data_out_block_mode+0x52>
    3496:	782b      	ldrb	r3, [r5, #0]
    3498:	2b00      	cmp	r3, #0
    349a:	d1f3      	bne.n	3484 <data_out_block_mode+0x58>
    349c:	e7ef      	b.n	347e <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    349e:	3c01      	subs	r4, #1
    34a0:	f7ff ffb6 	bl	3410 <on_failed_write.part.0>
    34a4:	e7f2      	b.n	348c <data_out_block_mode+0x60>
		} else if (host_present) {
    34a6:	782b      	ldrb	r3, [r5, #0]
    34a8:	b113      	cbz	r3, 34b0 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    34aa:	3c01      	subs	r4, #1
    34ac:	d104      	bne.n	34b8 <data_out_block_mode+0x8c>
		host_present = false;
    34ae:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    34b0:	782b      	ldrb	r3, [r5, #0]
    34b2:	2b00      	cmp	r3, #0
    34b4:	d1c4      	bne.n	3440 <data_out_block_mode+0x14>
    34b6:	e7e2      	b.n	347e <data_out_block_mode+0x52>
    34b8:	f7ff ffaa 	bl	3410 <on_failed_write.part.0>
    34bc:	e7f8      	b.n	34b0 <data_out_block_mode+0x84>
    34be:	bf00      	nop
    34c0:	20008129 	.word	0x20008129
    34c4:	2000812a 	.word	0x2000812a
    34c8:	20000ba0 	.word	0x20000ba0

000034cc <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    34cc:	4b10      	ldr	r3, [pc, #64]	; (3510 <settings_save_one+0x44>)
{
    34ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    34d2:	681c      	ldr	r4, [r3, #0]
{
    34d4:	4605      	mov	r5, r0
    34d6:	460e      	mov	r6, r1
    34d8:	4617      	mov	r7, r2
	if (!cs) {
    34da:	b1ac      	cbz	r4, 3508 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    34dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    34e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    34e4:	480b      	ldr	r0, [pc, #44]	; (3514 <settings_save_one+0x48>)
    34e6:	f01c f93b 	bl	1f760 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    34ea:	6863      	ldr	r3, [r4, #4]
    34ec:	4632      	mov	r2, r6
    34ee:	f8d3 8008 	ldr.w	r8, [r3, #8]
    34f2:	4629      	mov	r1, r5
    34f4:	463b      	mov	r3, r7
    34f6:	4620      	mov	r0, r4
    34f8:	47c0      	blx	r8
    34fa:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    34fc:	4805      	ldr	r0, [pc, #20]	; (3514 <settings_save_one+0x48>)
    34fe:	f01c f9a7 	bl	1f850 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    3502:	4620      	mov	r0, r4
    3504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    3508:	f06f 0401 	mvn.w	r4, #1
    350c:	e7f9      	b.n	3502 <settings_save_one+0x36>
    350e:	bf00      	nop
    3510:	200015f8 	.word	0x200015f8
    3514:	20000bb4 	.word	0x20000bb4

00003518 <settings_load_subtree>:
{
    3518:	b530      	push	{r4, r5, lr}
    351a:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    351c:	2300      	movs	r3, #0
{
    351e:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    3520:	e9cd 3302 	strd	r3, r3, [sp, #8]
    3524:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    3526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    352a:	480e      	ldr	r0, [pc, #56]	; (3564 <settings_load_subtree+0x4c>)
    352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3530:	f01c f916 	bl	1f760 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3534:	4b0c      	ldr	r3, [pc, #48]	; (3568 <settings_load_subtree+0x50>)
    3536:	681c      	ldr	r4, [r3, #0]
    3538:	2c00      	cmp	r4, #0
    353a:	bf38      	it	cc
    353c:	2400      	movcc	r4, #0
    353e:	b13c      	cbz	r4, 3550 <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
    3540:	6863      	ldr	r3, [r4, #4]
    3542:	4620      	mov	r0, r4
    3544:	681b      	ldr	r3, [r3, #0]
    3546:	a901      	add	r1, sp, #4
    3548:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    354a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    354c:	2c00      	cmp	r4, #0
    354e:	d1f6      	bne.n	353e <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
    3550:	4628      	mov	r0, r5
    3552:	f000 f889 	bl	3668 <settings_commit_subtree>
    3556:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3558:	4802      	ldr	r0, [pc, #8]	; (3564 <settings_load_subtree+0x4c>)
    355a:	f01c f979 	bl	1f850 <z_impl_k_mutex_unlock>
}
    355e:	4620      	mov	r0, r4
    3560:	b005      	add	sp, #20
    3562:	bd30      	pop	{r4, r5, pc}
    3564:	20000bb4 	.word	0x20000bb4
    3568:	200015f0 	.word	0x200015f0

0000356c <settings_load_subtree_direct>:
{
    356c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    356e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    3572:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    3574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3578:	480c      	ldr	r0, [pc, #48]	; (35ac <settings_load_subtree_direct+0x40>)
    357a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    357e:	f01c f8ef 	bl	1f760 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    3582:	4b0b      	ldr	r3, [pc, #44]	; (35b0 <settings_load_subtree_direct+0x44>)
    3584:	681c      	ldr	r4, [r3, #0]
    3586:	2c00      	cmp	r4, #0
    3588:	bf38      	it	cc
    358a:	2400      	movcc	r4, #0
    358c:	b13c      	cbz	r4, 359e <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    358e:	6863      	ldr	r3, [r4, #4]
    3590:	4620      	mov	r0, r4
    3592:	681b      	ldr	r3, [r3, #0]
    3594:	a901      	add	r1, sp, #4
    3596:	4798      	blx	r3
    3598:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    359a:	2c00      	cmp	r4, #0
    359c:	d1f6      	bne.n	358c <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    359e:	4803      	ldr	r0, [pc, #12]	; (35ac <settings_load_subtree_direct+0x40>)
    35a0:	f01c f956 	bl	1f850 <z_impl_k_mutex_unlock>
}
    35a4:	2000      	movs	r0, #0
    35a6:	b004      	add	sp, #16
    35a8:	bd10      	pop	{r4, pc}
    35aa:	bf00      	nop
    35ac:	20000bb4 	.word	0x20000bb4
    35b0:	200015f0 	.word	0x200015f0

000035b4 <settings_store_init>:
	list->head = NULL;
    35b4:	4b02      	ldr	r3, [pc, #8]	; (35c0 <settings_store_init+0xc>)
    35b6:	2200      	movs	r2, #0
	list->tail = NULL;
    35b8:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    35bc:	4770      	bx	lr
    35be:	bf00      	nop
    35c0:	200015f0 	.word	0x200015f0

000035c4 <settings_init>:
	list->head = NULL;
    35c4:	4b02      	ldr	r3, [pc, #8]	; (35d0 <settings_init+0xc>)
    35c6:	2200      	movs	r2, #0
	list->tail = NULL;
    35c8:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    35cc:	f7ff bff2 	b.w	35b4 <settings_store_init>
    35d0:	200015fc 	.word	0x200015fc

000035d4 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    35d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    35d8:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    35da:	460e      	mov	r6, r1
    35dc:	b109      	cbz	r1, 35e2 <settings_parse_and_lookup+0xe>
		*next = NULL;
    35de:	2300      	movs	r3, #0
    35e0:	600b      	str	r3, [r1, #0]
    35e2:	4c1e      	ldr	r4, [pc, #120]	; (365c <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    35e4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3664 <settings_parse_and_lookup+0x90>
    35e8:	2500      	movs	r5, #0
    35ea:	4544      	cmp	r4, r8
    35ec:	d308      	bcc.n	3600 <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    35ee:	4b1c      	ldr	r3, [pc, #112]	; (3660 <settings_parse_and_lookup+0x8c>)
    35f0:	681c      	ldr	r4, [r3, #0]
    35f2:	b10c      	cbz	r4, 35f8 <settings_parse_and_lookup+0x24>
    35f4:	3c14      	subs	r4, #20
    35f6:	b9c4      	cbnz	r4, 362a <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    35f8:	4628      	mov	r0, r5
    35fa:	b002      	add	sp, #8
    35fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    3600:	6821      	ldr	r1, [r4, #0]
    3602:	aa01      	add	r2, sp, #4
    3604:	4638      	mov	r0, r7
    3606:	f020 fad6 	bl	23bb6 <settings_name_steq>
    360a:	b160      	cbz	r0, 3626 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    360c:	b925      	cbnz	r5, 3618 <settings_parse_and_lookup+0x44>
			if (next) {
    360e:	b10e      	cbz	r6, 3614 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    3610:	9b01      	ldr	r3, [sp, #4]
    3612:	6033      	str	r3, [r6, #0]
    3614:	4625      	mov	r5, r4
    3616:	e006      	b.n	3626 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3618:	6829      	ldr	r1, [r5, #0]
    361a:	6820      	ldr	r0, [r4, #0]
    361c:	2200      	movs	r2, #0
    361e:	f020 faca 	bl	23bb6 <settings_name_steq>
    3622:	2800      	cmp	r0, #0
    3624:	d1f3      	bne.n	360e <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3626:	3414      	adds	r4, #20
    3628:	e7df      	b.n	35ea <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    362a:	6821      	ldr	r1, [r4, #0]
    362c:	aa01      	add	r2, sp, #4
    362e:	4638      	mov	r0, r7
    3630:	f020 fac1 	bl	23bb6 <settings_name_steq>
    3634:	b160      	cbz	r0, 3650 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    3636:	b925      	cbnz	r5, 3642 <settings_parse_and_lookup+0x6e>
			if (next) {
    3638:	b10e      	cbz	r6, 363e <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    363a:	9b01      	ldr	r3, [sp, #4]
    363c:	6033      	str	r3, [r6, #0]
    363e:	4625      	mov	r5, r4
    3640:	e006      	b.n	3650 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    3642:	6829      	ldr	r1, [r5, #0]
    3644:	6820      	ldr	r0, [r4, #0]
    3646:	2200      	movs	r2, #0
    3648:	f020 fab5 	bl	23bb6 <settings_name_steq>
    364c:	2800      	cmp	r0, #0
    364e:	d1f3      	bne.n	3638 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    3650:	f114 0f14 	cmn.w	r4, #20
    3654:	d0d0      	beq.n	35f8 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3656:	6964      	ldr	r4, [r4, #20]
    3658:	e7cb      	b.n	35f2 <settings_parse_and_lookup+0x1e>
    365a:	bf00      	nop
    365c:	0002beec 	.word	0x0002beec
    3660:	200015fc 	.word	0x200015fc
    3664:	0002bf50 	.word	0x0002bf50

00003668 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    3668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    366a:	4c1a      	ldr	r4, [pc, #104]	; (36d4 <settings_commit_subtree+0x6c>)
    366c:	4f1a      	ldr	r7, [pc, #104]	; (36d8 <settings_commit_subtree+0x70>)
{
    366e:	4606      	mov	r6, r0
	rc = 0;
    3670:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    3672:	42bc      	cmp	r4, r7
    3674:	d306      	bcc.n	3684 <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    3676:	4b19      	ldr	r3, [pc, #100]	; (36dc <settings_commit_subtree+0x74>)
    3678:	681c      	ldr	r4, [r3, #0]
    367a:	b10c      	cbz	r4, 3680 <settings_commit_subtree+0x18>
    367c:	3c14      	subs	r4, #20
    367e:	b99c      	cbnz	r4, 36a8 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    3680:	4628      	mov	r0, r5
    3682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    3684:	b91e      	cbnz	r6, 368e <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    3686:	68e3      	ldr	r3, [r4, #12]
    3688:	b94b      	cbnz	r3, 369e <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    368a:	3414      	adds	r4, #20
    368c:	e7f1      	b.n	3672 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    368e:	6820      	ldr	r0, [r4, #0]
    3690:	2200      	movs	r2, #0
    3692:	4631      	mov	r1, r6
    3694:	f020 fa8f 	bl	23bb6 <settings_name_steq>
    3698:	2800      	cmp	r0, #0
    369a:	d1f4      	bne.n	3686 <settings_commit_subtree+0x1e>
    369c:	e7f5      	b.n	368a <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    369e:	4798      	blx	r3
				rc = rc2;
    36a0:	2d00      	cmp	r5, #0
    36a2:	bf08      	it	eq
    36a4:	4605      	moveq	r5, r0
    36a6:	e7f0      	b.n	368a <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    36a8:	b936      	cbnz	r6, 36b8 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    36aa:	68e3      	ldr	r3, [r4, #12]
    36ac:	b963      	cbnz	r3, 36c8 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    36ae:	f114 0f14 	cmn.w	r4, #20
    36b2:	d0e5      	beq.n	3680 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    36b4:	6964      	ldr	r4, [r4, #20]
    36b6:	e7e0      	b.n	367a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    36b8:	6820      	ldr	r0, [r4, #0]
    36ba:	2200      	movs	r2, #0
    36bc:	4631      	mov	r1, r6
    36be:	f020 fa7a 	bl	23bb6 <settings_name_steq>
    36c2:	2800      	cmp	r0, #0
    36c4:	d1f1      	bne.n	36aa <settings_commit_subtree+0x42>
    36c6:	e7f2      	b.n	36ae <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    36c8:	4798      	blx	r3
				rc = rc2;
    36ca:	2d00      	cmp	r5, #0
    36cc:	bf08      	it	eq
    36ce:	4605      	moveq	r5, r0
    36d0:	e7ed      	b.n	36ae <settings_commit_subtree+0x46>
    36d2:	bf00      	nop
    36d4:	0002beec 	.word	0x0002beec
    36d8:	0002bf50 	.word	0x0002bf50
    36dc:	200015fc 	.word	0x200015fc

000036e0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    36e0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    36e2:	4c06      	ldr	r4, [pc, #24]	; (36fc <settings_subsys_init+0x1c>)
    36e4:	7823      	ldrb	r3, [r4, #0]
    36e6:	b93b      	cbnz	r3, 36f8 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    36e8:	f7ff ff6c 	bl	35c4 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    36ec:	f020 faac 	bl	23c48 <settings_backend_init>

	if (!err) {
    36f0:	b908      	cbnz	r0, 36f6 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    36f2:	2301      	movs	r3, #1
    36f4:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    36f6:	bd10      	pop	{r4, pc}
		return 0;
    36f8:	2000      	movs	r0, #0
    36fa:	e7fc      	b.n	36f6 <settings_subsys_init+0x16>
    36fc:	2000812b 	.word	0x2000812b

00003700 <settings_runtime_set>:
	memcpy(data, arg->data, MIN(arg->len, len));
	return MIN(arg->len, len);
}

int settings_runtime_set(const char *name, const void *data, size_t len)
{
    3700:	b530      	push	{r4, r5, lr}
    3702:	b085      	sub	sp, #20
    3704:	460d      	mov	r5, r1
	struct settings_handler_static *ch;
	const char *name_key;
	struct read_cb_arg arg;

	ch = settings_parse_and_lookup(name, &name_key);
    3706:	a901      	add	r1, sp, #4
{
    3708:	4614      	mov	r4, r2
	ch = settings_parse_and_lookup(name, &name_key);
    370a:	f7ff ff63 	bl	35d4 <settings_parse_and_lookup>
	if (!ch) {
    370e:	b148      	cbz	r0, 3724 <settings_runtime_set+0x24>
		return -EINVAL;
	}

	arg.data = data;
	arg.len = len;
    3710:	e9cd 5402 	strd	r5, r4, [sp, #8]
	return ch->h_set(name_key, len, settings_runtime_read_cb, (void *)&arg);
    3714:	4a05      	ldr	r2, [pc, #20]	; (372c <settings_runtime_set+0x2c>)
    3716:	6885      	ldr	r5, [r0, #8]
    3718:	9801      	ldr	r0, [sp, #4]
    371a:	ab02      	add	r3, sp, #8
    371c:	4621      	mov	r1, r4
    371e:	47a8      	blx	r5
}
    3720:	b005      	add	sp, #20
    3722:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    3724:	f06f 0015 	mvn.w	r0, #21
    3728:	e7fa      	b.n	3720 <settings_runtime_set+0x20>
    372a:	bf00      	nop
    372c:	00023c29 	.word	0x00023c29

00003730 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    3730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3732:	4605      	mov	r5, r0
	__asm__ volatile(
    3734:	f04f 0320 	mov.w	r3, #32
    3738:	f3ef 8611 	mrs	r6, BASEPRI
    373c:	f383 8811 	msr	BASEPRI, r3
    3740:	f3bf 8f6f 	isb	sy
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3744:	4b0b      	ldr	r3, [pc, #44]	; (3774 <pm_state_notify+0x44>)
    3746:	681c      	ldr	r4, [r3, #0]
    3748:	2c00      	cmp	r4, #0
    374a:	bf38      	it	cc
    374c:	2400      	movcc	r4, #0
    374e:	b15c      	cbz	r4, 3768 <pm_state_notify+0x38>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    3750:	4f09      	ldr	r7, [pc, #36]	; (3778 <pm_state_notify+0x48>)
			callback = notifier->state_exit;
    3752:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3756:	2d00      	cmp	r5, #0
    3758:	bf08      	it	eq
    375a:	4613      	moveq	r3, r2
		if (callback) {
    375c:	b10b      	cbz	r3, 3762 <pm_state_notify+0x32>
			callback(z_power_state.state);
    375e:	7838      	ldrb	r0, [r7, #0]
    3760:	4798      	blx	r3
    3762:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3764:	2c00      	cmp	r4, #0
    3766:	d1f4      	bne.n	3752 <pm_state_notify+0x22>
	__asm__ volatile(
    3768:	f386 8811 	msr	BASEPRI, r6
    376c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3772:	bf00      	nop
    3774:	20001604 	.word	0x20001604
    3778:	2000160c 	.word	0x2000160c

0000377c <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
    377c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
    3780:	4f18      	ldr	r7, [pc, #96]	; (37e4 <pm_system_suspend+0x68>)
    3782:	4c19      	ldr	r4, [pc, #100]	; (37e8 <pm_system_suspend+0x6c>)
    3784:	783b      	ldrb	r3, [r7, #0]
{
    3786:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
    3788:	b93b      	cbnz	r3, 379a <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
    378a:	466d      	mov	r5, sp
    378c:	4628      	mov	r0, r5
    378e:	f020 fa5d 	bl	23c4c <pm_policy_next_state>
    3792:	e895 0003 	ldmia.w	r5, {r0, r1}
    3796:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    379a:	7825      	ldrb	r5, [r4, #0]
    379c:	b1f5      	cbz	r5, 37dc <pm_system_suspend+0x60>
	post_ops_done = 0;
    379e:	4e13      	ldr	r6, [pc, #76]	; (37ec <pm_system_suspend+0x70>)
    37a0:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
    37a4:	2001      	movs	r0, #1
	if (deep_sleep) {
    37a6:	3d04      	subs	r5, #4
	post_ops_done = 0;
    37a8:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
    37ac:	f7ff ffc0 	bl	3730 <pm_state_notify>
	if (deep_sleep) {
    37b0:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    37b2:	bf98      	it	ls
    37b4:	4b0e      	ldrls	r3, [pc, #56]	; (37f0 <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
    37b6:	e894 0003 	ldmia.w	r4, {r0, r1}
    37ba:	bf98      	it	ls
    37bc:	f883 8000 	strbls.w	r8, [r3]
    37c0:	f020 ff31 	bl	24626 <pm_power_state_set>
	if (!post_ops_done) {
    37c4:	6830      	ldr	r0, [r6, #0]
    37c6:	b940      	cbnz	r0, 37da <pm_system_suspend+0x5e>
		post_ops_done = 1;
    37c8:	2301      	movs	r3, #1
		z_forced_power_state = false;
    37ca:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
    37cc:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
    37ce:	f7ff ffaf 	bl	3730 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    37d2:	e894 0003 	ldmia.w	r4, {r0, r1}
    37d6:	f020 ff39 	bl	2464c <pm_power_state_exit_post_ops>
	return z_power_state.state;
    37da:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
    37dc:	4628      	mov	r0, r5
    37de:	b002      	add	sp, #8
    37e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37e4:	2000812c 	.word	0x2000812c
    37e8:	2000160c 	.word	0x2000160c
    37ec:	20000314 	.word	0x20000314
    37f0:	20008734 	.word	0x20008734

000037f4 <pm_system_resume>:

void pm_system_resume(void)
{
    37f4:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    37f6:	4b06      	ldr	r3, [pc, #24]	; (3810 <pm_system_resume+0x1c>)
    37f8:	6818      	ldr	r0, [r3, #0]
    37fa:	b940      	cbnz	r0, 380e <pm_system_resume+0x1a>
		post_ops_done = 1;
    37fc:	2201      	movs	r2, #1
    37fe:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
    3800:	f7ff ff96 	bl	3730 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    3804:	4b03      	ldr	r3, [pc, #12]	; (3814 <pm_system_resume+0x20>)
    3806:	e893 0003 	ldmia.w	r3, {r0, r1}
    380a:	f020 ff1f 	bl	2464c <pm_power_state_exit_post_ops>
	}
}
    380e:	bd08      	pop	{r3, pc}
    3810:	20000314 	.word	0x20000314
    3814:	2000160c 	.word	0x2000160c

00003818 <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3818:	b570      	push	{r4, r5, r6, lr}
    381a:	4604      	mov	r4, r0
	size_t offset = (size_t)(mgr - data->mgr);
    381c:	480d      	ldr	r0, [pc, #52]	; (3854 <onoff_stop+0x3c>)
    381e:	1a23      	subs	r3, r4, r0
    3820:	109a      	asrs	r2, r3, #2
    3822:	4b0d      	ldr	r3, [pc, #52]	; (3858 <onoff_stop+0x40>)
    3824:	4353      	muls	r3, r2
    3826:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    3828:	250c      	movs	r5, #12
    382a:	435d      	muls	r5, r3
    382c:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    3830:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    3832:	4418      	add	r0, r3
    3834:	2140      	movs	r1, #64	; 0x40
    3836:	f020 fa16 	bl	23c66 <set_off_state>
	if (err < 0) {
    383a:	1e01      	subs	r1, r0, #0
    383c:	db04      	blt.n	3848 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    383e:	4b07      	ldr	r3, [pc, #28]	; (385c <onoff_stop+0x44>)
    3840:	442b      	add	r3, r5
    3842:	685b      	ldr	r3, [r3, #4]
    3844:	4798      	blx	r3
	return 0;
    3846:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    3848:	4620      	mov	r0, r4
    384a:	4633      	mov	r3, r6
}
    384c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3850:	4718      	bx	r3
    3852:	bf00      	nop
    3854:	20001624 	.word	0x20001624
    3858:	b6db6db7 	.word	0xb6db6db7
    385c:	0002c1b4 	.word	0x0002c1b4

00003860 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3864:	4c0f      	ldr	r4, [pc, #60]	; (38a4 <onoff_start+0x44>)
    3866:	4d10      	ldr	r5, [pc, #64]	; (38a8 <onoff_start+0x48>)
    3868:	1b03      	subs	r3, r0, r4
    386a:	109b      	asrs	r3, r3, #2
    386c:	435d      	muls	r5, r3
    386e:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    3870:	250c      	movs	r5, #12
    3872:	435d      	muls	r5, r3
{
    3874:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    3876:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    387a:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    387c:	4420      	add	r0, r4
    387e:	2140      	movs	r1, #64	; 0x40
    3880:	f020 fa0a 	bl	23c98 <set_starting_state>
	if (err < 0) {
    3884:	1e01      	subs	r1, r0, #0
    3886:	db08      	blt.n	389a <onoff_start+0x3a>
	subdata->cb = cb;
    3888:	4b08      	ldr	r3, [pc, #32]	; (38ac <onoff_start+0x4c>)
    388a:	442c      	add	r4, r5
	subdata->user_data = user_data;
    388c:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    3890:	4b07      	ldr	r3, [pc, #28]	; (38b0 <onoff_start+0x50>)
    3892:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    3894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    3898:	4718      	bx	r3
		notify(mgr, err);
    389a:	4638      	mov	r0, r7
    389c:	4633      	mov	r3, r6
}
    389e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    38a2:	4718      	bx	r3
    38a4:	20001624 	.word	0x20001624
    38a8:	b6db6db7 	.word	0xb6db6db7
    38ac:	00023cfb 	.word	0x00023cfb
    38b0:	0002c1b4 	.word	0x0002c1b4

000038b4 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38b4:	2200      	movs	r2, #0
{
    38b6:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38b8:	2101      	movs	r1, #1
{
    38ba:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    38bc:	4610      	mov	r0, r2
    38be:	f000 fdd1 	bl	4464 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    38c2:	2000      	movs	r0, #0
    38c4:	f000 fd9c 	bl	4400 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    38c8:	480f      	ldr	r0, [pc, #60]	; (3908 <clk_init+0x54>)
    38ca:	f015 fd9f 	bl	1940c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    38ce:	4b0f      	ldr	r3, [pc, #60]	; (390c <clk_init+0x58>)
    38d0:	4298      	cmp	r0, r3
    38d2:	d115      	bne.n	3900 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    38d4:	f022 fbc0 	bl	26058 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    38d8:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    38da:	490d      	ldr	r1, [pc, #52]	; (3910 <clk_init+0x5c>)
    38dc:	4630      	mov	r0, r6
    38de:	f01f facf 	bl	22e80 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    38e2:	2800      	cmp	r0, #0
    38e4:	db0b      	blt.n	38fe <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    38e6:	2501      	movs	r5, #1
    38e8:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    38ea:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    38ec:	4908      	ldr	r1, [pc, #32]	; (3910 <clk_init+0x5c>)
    38ee:	f104 001c 	add.w	r0, r4, #28
    38f2:	f01f fac5 	bl	22e80 <onoff_manager_init>
		if (err < 0) {
    38f6:	2800      	cmp	r0, #0
    38f8:	db01      	blt.n	38fe <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    38fa:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    38fc:	2000      	movs	r0, #0
}
    38fe:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3900:	f06f 0004 	mvn.w	r0, #4
    3904:	e7fb      	b.n	38fe <clk_init+0x4a>
    3906:	bf00      	nop
    3908:	00003949 	.word	0x00003949
    390c:	0bad0000 	.word	0x0bad0000
    3910:	0002c1cc 	.word	0x0002c1cc

00003914 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3914:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3916:	230c      	movs	r3, #12
    3918:	4809      	ldr	r0, [pc, #36]	; (3940 <clkstarted_handle.constprop.0+0x2c>)
    391a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    391c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    391e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3920:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    3924:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    3926:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    3928:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    392a:	4418      	add	r0, r3
    392c:	f020 f9d2 	bl	23cd4 <set_on_state>
	if (callback) {
    3930:	b12d      	cbz	r5, 393e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3932:	4632      	mov	r2, r6
    3934:	462b      	mov	r3, r5
    3936:	4803      	ldr	r0, [pc, #12]	; (3944 <clkstarted_handle.constprop.0+0x30>)
}
    3938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    393c:	4718      	bx	r3
}
    393e:	bd70      	pop	{r4, r5, r6, pc}
    3940:	20001624 	.word	0x20001624
    3944:	20000a8c 	.word	0x20000a8c

00003948 <clock_event_handler>:
	switch (event) {
    3948:	b110      	cbz	r0, 3950 <clock_event_handler+0x8>
    394a:	2801      	cmp	r0, #1
    394c:	d004      	beq.n	3958 <clock_event_handler+0x10>
    394e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3950:	4b03      	ldr	r3, [pc, #12]	; (3960 <clock_event_handler+0x18>)
    3952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3954:	075b      	lsls	r3, r3, #29
    3956:	d101      	bne.n	395c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3958:	f7ff bfdc 	b.w	3914 <clkstarted_handle.constprop.0>
}
    395c:	4770      	bx	lr
    395e:	bf00      	nop
    3960:	20001624 	.word	0x20001624

00003964 <generic_hfclk_start>:
{
    3964:	b508      	push	{r3, lr}
	__asm__ volatile(
    3966:	f04f 0320 	mov.w	r3, #32
    396a:	f3ef 8111 	mrs	r1, BASEPRI
    396e:	f383 8811 	msr	BASEPRI, r3
    3972:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    3976:	4a12      	ldr	r2, [pc, #72]	; (39c0 <generic_hfclk_start+0x5c>)
    3978:	6813      	ldr	r3, [r2, #0]
    397a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    397e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3982:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3984:	d00c      	beq.n	39a0 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    398a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    398e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3992:	f013 0301 	ands.w	r3, r3, #1
    3996:	d003      	beq.n	39a0 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3998:	480a      	ldr	r0, [pc, #40]	; (39c4 <generic_hfclk_start+0x60>)
    399a:	f020 f99b 	bl	23cd4 <set_on_state>
			already_started = true;
    399e:	2301      	movs	r3, #1
	__asm__ volatile(
    39a0:	f381 8811 	msr	BASEPRI, r1
    39a4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    39a8:	b123      	cbz	r3, 39b4 <generic_hfclk_start+0x50>
}
    39aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    39ae:	2000      	movs	r0, #0
    39b0:	f7ff bfb0 	b.w	3914 <clkstarted_handle.constprop.0>
}
    39b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    39b8:	2001      	movs	r0, #1
    39ba:	f015 bd37 	b.w	1942c <nrfx_clock_start>
    39be:	bf00      	nop
    39c0:	20001674 	.word	0x20001674
    39c4:	20001664 	.word	0x20001664

000039c8 <lfclk_start>:
{
    39c8:	b510      	push	{r4, lr}
	if (!once) {
    39ca:	4c07      	ldr	r4, [pc, #28]	; (39e8 <lfclk_start+0x20>)
    39cc:	7823      	ldrb	r3, [r4, #0]
    39ce:	b92b      	cbnz	r3, 39dc <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    39d0:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    39d4:	f027 fc16 	bl	2b204 <z_impl_k_busy_wait>
		once = true;
    39d8:	2301      	movs	r3, #1
    39da:	7023      	strb	r3, [r4, #0]
}
    39dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    39e0:	2000      	movs	r0, #0
    39e2:	f015 bd23 	b.w	1942c <nrfx_clock_start>
    39e6:	bf00      	nop
    39e8:	2000812d 	.word	0x2000812d

000039ec <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    39ec:	4b09      	ldr	r3, [pc, #36]	; (3a14 <generic_hfclk_stop+0x28>)
    39ee:	f3bf 8f5b 	dmb	ish
    39f2:	e853 2f00 	ldrex	r2, [r3]
    39f6:	f022 0102 	bic.w	r1, r2, #2
    39fa:	e843 1000 	strex	r0, r1, [r3]
    39fe:	2800      	cmp	r0, #0
    3a00:	d1f7      	bne.n	39f2 <generic_hfclk_stop+0x6>
    3a02:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3a06:	07d3      	lsls	r3, r2, #31
    3a08:	d402      	bmi.n	3a10 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3a0a:	2001      	movs	r0, #1
    3a0c:	f015 bd5a 	b.w	194c4 <nrfx_clock_stop>
}
    3a10:	4770      	bx	lr
    3a12:	bf00      	nop
    3a14:	20001674 	.word	0x20001674

00003a18 <api_blocking_start>:
{
    3a18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3a1a:	2200      	movs	r2, #0
    3a1c:	2301      	movs	r3, #1
    3a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3a22:	ab04      	add	r3, sp, #16
    3a24:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3a28:	4a09      	ldr	r2, [pc, #36]	; (3a50 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3a2a:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3a2e:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3a30:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3a34:	f020 f984 	bl	23d40 <api_start>
	if (err < 0) {
    3a38:	2800      	cmp	r0, #0
    3a3a:	db05      	blt.n	3a48 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3a3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3a40:	2300      	movs	r3, #0
    3a42:	4668      	mov	r0, sp
    3a44:	f01c fb44 	bl	200d0 <z_impl_k_sem_take>
}
    3a48:	b007      	add	sp, #28
    3a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    3a4e:	bf00      	nop
    3a50:	00023d13 	.word	0x00023d13

00003a54 <z_nrf_clock_control_get_onoff>:
}
    3a54:	4a02      	ldr	r2, [pc, #8]	; (3a60 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3a56:	b2c3      	uxtb	r3, r0
}
    3a58:	201c      	movs	r0, #28
    3a5a:	fb03 2000 	mla	r0, r3, r0, r2
    3a5e:	4770      	bx	lr
    3a60:	20001624 	.word	0x20001624

00003a64 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3a64:	4b09      	ldr	r3, [pc, #36]	; (3a8c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    3a66:	f3bf 8f5b 	dmb	ish
    3a6a:	e853 2f00 	ldrex	r2, [r3]
    3a6e:	f042 0101 	orr.w	r1, r2, #1
    3a72:	e843 1000 	strex	r0, r1, [r3]
    3a76:	2800      	cmp	r0, #0
    3a78:	d1f7      	bne.n	3a6a <z_nrf_clock_bt_ctlr_hf_request+0x6>
    3a7a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    3a7e:	0793      	lsls	r3, r2, #30
    3a80:	d402      	bmi.n	3a88 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3a82:	2001      	movs	r0, #1
    3a84:	f015 bcd2 	b.w	1942c <nrfx_clock_start>
}
    3a88:	4770      	bx	lr
    3a8a:	bf00      	nop
    3a8c:	20001674 	.word	0x20001674

00003a90 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3a90:	4b09      	ldr	r3, [pc, #36]	; (3ab8 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    3a92:	f3bf 8f5b 	dmb	ish
    3a96:	e853 2f00 	ldrex	r2, [r3]
    3a9a:	f022 0101 	bic.w	r1, r2, #1
    3a9e:	e843 1000 	strex	r0, r1, [r3]
    3aa2:	2800      	cmp	r0, #0
    3aa4:	d1f7      	bne.n	3a96 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    3aa6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    3aaa:	0793      	lsls	r3, r2, #30
    3aac:	d402      	bmi.n	3ab4 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3aae:	2001      	movs	r0, #1
    3ab0:	f015 bd08 	b.w	194c4 <nrfx_clock_stop>
}
    3ab4:	4770      	bx	lr
    3ab6:	bf00      	nop
    3ab8:	20001674 	.word	0x20001674

00003abc <z_nrf_clock_control_lf_on>:
{
    3abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3ac0:	493a      	ldr	r1, [pc, #232]	; (3bac <z_nrf_clock_control_lf_on+0xf0>)
    3ac2:	f3bf 8f5b 	dmb	ish
    3ac6:	4606      	mov	r6, r0
    3ac8:	2201      	movs	r2, #1
    3aca:	e851 3f00 	ldrex	r3, [r1]
    3ace:	e841 2000 	strex	r0, r2, [r1]
    3ad2:	2800      	cmp	r0, #0
    3ad4:	d1f9      	bne.n	3aca <z_nrf_clock_control_lf_on+0xe>
    3ad6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3ada:	b933      	cbnz	r3, 3aea <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3adc:	4934      	ldr	r1, [pc, #208]	; (3bb0 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    3ade:	4835      	ldr	r0, [pc, #212]	; (3bb4 <z_nrf_clock_control_lf_on+0xf8>)
    3ae0:	604b      	str	r3, [r1, #4]
    3ae2:	60cb      	str	r3, [r1, #12]
    3ae4:	608a      	str	r2, [r1, #8]
    3ae6:	f01f f9de 	bl	22ea6 <onoff_request>
	switch (start_mode) {
    3aea:	1e73      	subs	r3, r6, #1
    3aec:	2b01      	cmp	r3, #1
    3aee:	d832      	bhi.n	3b56 <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3af0:	2e01      	cmp	r6, #1
    3af2:	d107      	bne.n	3b04 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3af8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    3afc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3b00:	2b01      	cmp	r3, #1
    3b02:	d028      	beq.n	3b56 <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3b04:	f027 fb78 	bl	2b1f8 <k_is_in_isr>
    3b08:	4604      	mov	r4, r0
    3b0a:	b918      	cbnz	r0, 3b14 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    3b0c:	4b2a      	ldr	r3, [pc, #168]	; (3bb8 <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    3b0e:	781b      	ldrb	r3, [r3, #0]
    3b10:	2b00      	cmp	r3, #0
    3b12:	d144      	bne.n	3b9e <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    3b14:	f04f 0320 	mov.w	r3, #32
    3b18:	f3ef 8511 	mrs	r5, BASEPRI
    3b1c:	f383 8811 	msr	BASEPRI, r3
    3b20:	f3bf 8f6f 	isb	sy
    3b24:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b26:	4f25      	ldr	r7, [pc, #148]	; (3bbc <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b28:	f8df 8094 	ldr.w	r8, [pc, #148]	; 3bc0 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b2c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 3bc4 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3b30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b34:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3b38:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    3b3c:	03d2      	lsls	r2, r2, #15
    3b3e:	d50c      	bpl.n	3b5a <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    3b40:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3b44:	2b01      	cmp	r3, #1
    3b46:	d001      	beq.n	3b4c <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3b48:	2e01      	cmp	r6, #1
    3b4a:	d106      	bne.n	3b5a <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    3b4c:	b30c      	cbz	r4, 3b92 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    3b4e:	f385 8811 	msr	BASEPRI, r5
    3b52:	f3bf 8f6f 	isb	sy
}
    3b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    3b5a:	b1ac      	cbz	r4, 3b88 <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3b5c:	4628      	mov	r0, r5
    3b5e:	f000 fcef 	bl	4540 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    3b62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3b66:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d1e0      	bne.n	3b30 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3b6e:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    3b70:	2900      	cmp	r1, #0
    3b72:	d0dd      	beq.n	3b30 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b74:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3b76:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3b78:	2301      	movs	r3, #1
    3b7a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3b7e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b82:	f8c9 3000 	str.w	r3, [r9]
}
    3b86:	e7d3      	b.n	3b30 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    3b88:	2100      	movs	r1, #0
    3b8a:	2021      	movs	r0, #33	; 0x21
    3b8c:	f01c fa52 	bl	20034 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3b90:	e7e7      	b.n	3b62 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    3b92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3b96:	2202      	movs	r2, #2
    3b98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3b9c:	e7db      	b.n	3b56 <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    3b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3ba2:	2202      	movs	r2, #2
    3ba4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3ba8:	4605      	mov	r5, r0
}
    3baa:	e7bc      	b.n	3b26 <z_nrf_clock_control_lf_on+0x6a>
    3bac:	20001678 	.word	0x20001678
    3bb0:	20001614 	.word	0x20001614
    3bb4:	20001640 	.word	0x20001640
    3bb8:	20008735 	.word	0x20008735
    3bbc:	40000104 	.word	0x40000104
    3bc0:	e000e100 	.word	0xe000e100
    3bc4:	40000008 	.word	0x40000008

00003bc8 <st7789v_set_orientation>:
	return -ENOTSUP;
}

static int st7789v_set_orientation(const struct device *dev,
			    const enum display_orientation orientation)
{
    3bc8:	b508      	push	{r3, lr}
	if (orientation == DISPLAY_ORIENTATION_NORMAL) {
    3bca:	4608      	mov	r0, r1
    3bcc:	b159      	cbz	r1, 3be6 <st7789v_set_orientation+0x1e>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3bce:	4b06      	ldr	r3, [pc, #24]	; (3be8 <st7789v_set_orientation+0x20>)
    3bd0:	4906      	ldr	r1, [pc, #24]	; (3bec <st7789v_set_orientation+0x24>)
		return 0;
	}
	LOG_ERR("Changing display orientation not implemented");
    3bd2:	4807      	ldr	r0, [pc, #28]	; (3bf0 <st7789v_set_orientation+0x28>)
    3bd4:	1ac9      	subs	r1, r1, r3
    3bd6:	08c9      	lsrs	r1, r1, #3
    3bd8:	0189      	lsls	r1, r1, #6
    3bda:	f041 0101 	orr.w	r1, r1, #1
    3bde:	f01f fcfb 	bl	235d8 <log_0>
	return -ENOTSUP;
    3be2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3be6:	bd08      	pop	{r3, pc}
    3be8:	0002bf50 	.word	0x0002bf50
    3bec:	0002c048 	.word	0x0002c048
    3bf0:	0002e0f1 	.word	0x0002e0f1

00003bf4 <st7789v_set_pixel_format>:
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3bf4:	2910      	cmp	r1, #16
{
    3bf6:	b508      	push	{r3, lr}
	if (pixel_format == PIXEL_FORMAT_RGB_565) {
    3bf8:	d00c      	beq.n	3c14 <st7789v_set_pixel_format+0x20>
    3bfa:	4b07      	ldr	r3, [pc, #28]	; (3c18 <st7789v_set_pixel_format+0x24>)
    3bfc:	4907      	ldr	r1, [pc, #28]	; (3c1c <st7789v_set_pixel_format+0x28>)
	LOG_ERR("Pixel format change not implemented");
    3bfe:	4808      	ldr	r0, [pc, #32]	; (3c20 <st7789v_set_pixel_format+0x2c>)
    3c00:	1ac9      	subs	r1, r1, r3
    3c02:	08c9      	lsrs	r1, r1, #3
    3c04:	0189      	lsls	r1, r1, #6
    3c06:	f041 0101 	orr.w	r1, r1, #1
    3c0a:	f01f fce5 	bl	235d8 <log_0>
	return -ENOTSUP;
    3c0e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3c12:	bd08      	pop	{r3, pc}
		return 0;
    3c14:	2000      	movs	r0, #0
    3c16:	e7fc      	b.n	3c12 <st7789v_set_pixel_format+0x1e>
    3c18:	0002bf50 	.word	0x0002bf50
    3c1c:	0002c048 	.word	0x0002c048
    3c20:	0002e11e 	.word	0x0002e11e

00003c24 <st7789v_init>:
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
			 sizeof(st7789v_rgb_param));
}

static int st7789v_init(const struct device *dev)
{
    3c24:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->data;
    3c26:	68c4      	ldr	r4, [r0, #12]
{
    3c28:	4606      	mov	r6, r0
    3c2a:	4892      	ldr	r0, [pc, #584]	; (3e74 <st7789v_init+0x250>)
    3c2c:	f01b fb76 	bl	1f31c <z_impl_device_get_binding>

	data->spi_dev = device_get_binding(DT_INST_BUS_LABEL(0));
    3c30:	6020      	str	r0, [r4, #0]
	if (data->spi_dev == NULL) {
    3c32:	b970      	cbnz	r0, 3c52 <st7789v_init+0x2e>
    3c34:	4990      	ldr	r1, [pc, #576]	; (3e78 <st7789v_init+0x254>)
    3c36:	4b91      	ldr	r3, [pc, #580]	; (3e7c <st7789v_init+0x258>)
		LOG_ERR("Could not get SPI device for LCD");
    3c38:	4891      	ldr	r0, [pc, #580]	; (3e80 <st7789v_init+0x25c>)
    3c3a:	1ac9      	subs	r1, r1, r3
    3c3c:	08c9      	lsrs	r1, r1, #3
    3c3e:	0189      	lsls	r1, r1, #6
    3c40:	f041 0101 	orr.w	r1, r1, #1
#endif

	data->cmd_data_gpio = device_get_binding(
			DT_INST_GPIO_LABEL(0, cmd_data_gpios));
	if (data->cmd_data_gpio == NULL) {
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    3c44:	f01f fcc8 	bl	235d8 <log_0>
		return -EPERM;
    3c48:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
	st7789v_lcd_init(data);

	st7789v_exit_sleep(data);

	return 0;
}
    3c4c:	4628      	mov	r0, r5
    3c4e:	b002      	add	sp, #8
    3c50:	bd70      	pop	{r4, r5, r6, pc}
	data->spi_config.operation = SPI_OP_MODE_MASTER | SPI_WORD_SET(8);
    3c52:	4a8c      	ldr	r2, [pc, #560]	; (3e84 <st7789v_init+0x260>)
    3c54:	4b8c      	ldr	r3, [pc, #560]	; (3e88 <st7789v_init+0x264>)
    3c56:	e9c4 2301 	strd	r2, r3, [r4, #4]
    3c5a:	488c      	ldr	r0, [pc, #560]	; (3e8c <st7789v_init+0x268>)
    3c5c:	f01b fb5e 	bl	1f31c <z_impl_device_get_binding>
	data->cs_ctrl.delay = 0U;
    3c60:	2300      	movs	r3, #0
    3c62:	6163      	str	r3, [r4, #20]
	data->cs_ctrl.gpio_pin = DT_INST_SPI_DEV_CS_GPIOS_PIN(0);
    3c64:	f240 1319 	movw	r3, #281	; 0x119
    3c68:	8323      	strh	r3, [r4, #24]
	data->spi_config.cs = &(data->cs_ctrl);
    3c6a:	f104 0310 	add.w	r3, r4, #16
	data->cs_ctrl.gpio_dev = device_get_binding(
    3c6e:	6120      	str	r0, [r4, #16]
	data->spi_config.cs = &(data->cs_ctrl);
    3c70:	60e3      	str	r3, [r4, #12]
    3c72:	4886      	ldr	r0, [pc, #536]	; (3e8c <st7789v_init+0x268>)
    3c74:	f01b fb52 	bl	1f31c <z_impl_device_get_binding>
	data->reset_gpio = device_get_binding(
    3c78:	61e0      	str	r0, [r4, #28]
	if (data->reset_gpio == NULL) {
    3c7a:	b940      	cbnz	r0, 3c8e <st7789v_init+0x6a>
    3c7c:	497e      	ldr	r1, [pc, #504]	; (3e78 <st7789v_init+0x254>)
    3c7e:	4b7f      	ldr	r3, [pc, #508]	; (3e7c <st7789v_init+0x258>)
		LOG_ERR("Could not get GPIO port for display reset");
    3c80:	4883      	ldr	r0, [pc, #524]	; (3e90 <st7789v_init+0x26c>)
    3c82:	1ac9      	subs	r1, r1, r3
    3c84:	08c9      	lsrs	r1, r1, #3
    3c86:	0189      	lsls	r1, r1, #6
    3c88:	f041 0101 	orr.w	r1, r1, #1
    3c8c:	e7da      	b.n	3c44 <st7789v_init+0x20>
	if (gpio_pin_configure(data->reset_gpio, ST7789V_RESET_PIN,
    3c8e:	f241 6201 	movw	r2, #5633	; 0x1601
    3c92:	211a      	movs	r1, #26
    3c94:	f020 f86e 	bl	23d74 <gpio_pin_configure>
    3c98:	b160      	cbz	r0, 3cb4 <st7789v_init+0x90>
    3c9a:	4977      	ldr	r1, [pc, #476]	; (3e78 <st7789v_init+0x254>)
    3c9c:	4b77      	ldr	r3, [pc, #476]	; (3e7c <st7789v_init+0x258>)
		LOG_ERR("Couldn't configure reset pin");
    3c9e:	487d      	ldr	r0, [pc, #500]	; (3e94 <st7789v_init+0x270>)
    3ca0:	1ac9      	subs	r1, r1, r3
    3ca2:	08c9      	lsrs	r1, r1, #3
    3ca4:	0189      	lsls	r1, r1, #6
    3ca6:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Couldn't configure cmd/DATA pin");
    3caa:	f01f fc95 	bl	235d8 <log_0>
		return -EIO;
    3cae:	f06f 0504 	mvn.w	r5, #4
    3cb2:	e7cb      	b.n	3c4c <st7789v_init+0x28>
    3cb4:	4875      	ldr	r0, [pc, #468]	; (3e8c <st7789v_init+0x268>)
    3cb6:	f01b fb31 	bl	1f31c <z_impl_device_get_binding>
	data->cmd_data_gpio = device_get_binding(
    3cba:	6220      	str	r0, [r4, #32]
	if (data->cmd_data_gpio == NULL) {
    3cbc:	b940      	cbnz	r0, 3cd0 <st7789v_init+0xac>
    3cbe:	496e      	ldr	r1, [pc, #440]	; (3e78 <st7789v_init+0x254>)
    3cc0:	4b6e      	ldr	r3, [pc, #440]	; (3e7c <st7789v_init+0x258>)
		LOG_ERR("Could not get GPIO port for cmd/DATA port");
    3cc2:	4875      	ldr	r0, [pc, #468]	; (3e98 <st7789v_init+0x274>)
    3cc4:	1ac9      	subs	r1, r1, r3
    3cc6:	08c9      	lsrs	r1, r1, #3
    3cc8:	0189      	lsls	r1, r1, #6
    3cca:	f041 0101 	orr.w	r1, r1, #1
    3cce:	e7b9      	b.n	3c44 <st7789v_init+0x20>
	if (gpio_pin_configure(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN,
    3cd0:	f240 2201 	movw	r2, #513	; 0x201
    3cd4:	2112      	movs	r1, #18
    3cd6:	f020 f84d 	bl	23d74 <gpio_pin_configure>
    3cda:	4605      	mov	r5, r0
    3cdc:	b140      	cbz	r0, 3cf0 <st7789v_init+0xcc>
    3cde:	4966      	ldr	r1, [pc, #408]	; (3e78 <st7789v_init+0x254>)
    3ce0:	4b66      	ldr	r3, [pc, #408]	; (3e7c <st7789v_init+0x258>)
		LOG_ERR("Couldn't configure cmd/DATA pin");
    3ce2:	486e      	ldr	r0, [pc, #440]	; (3e9c <st7789v_init+0x278>)
    3ce4:	1ac9      	subs	r1, r1, r3
    3ce6:	08c9      	lsrs	r1, r1, #3
    3ce8:	0189      	lsls	r1, r1, #6
    3cea:	f041 0101 	orr.w	r1, r1, #1
    3cee:	e7dc      	b.n	3caa <st7789v_init+0x86>
    3cf0:	2100      	movs	r1, #0
    3cf2:	2021      	movs	r0, #33	; 0x21
    3cf4:	f01c f99e 	bl	20034 <z_impl_k_sleep>
	gpio_pin_set(data->reset_gpio, ST7789V_RESET_PIN, 1);
    3cf8:	69e0      	ldr	r0, [r4, #28]
    3cfa:	2201      	movs	r2, #1
    3cfc:	211a      	movs	r1, #26
    3cfe:	f020 f856 	bl	23dae <gpio_pin_set>
    3d02:	2100      	movs	r1, #0
    3d04:	20c5      	movs	r0, #197	; 0xc5
    3d06:	f01c f995 	bl	20034 <z_impl_k_sleep>
	gpio_pin_set(data->reset_gpio, ST7789V_RESET_PIN, 0);
    3d0a:	69e0      	ldr	r0, [r4, #28]
    3d0c:	462a      	mov	r2, r5
    3d0e:	211a      	movs	r1, #26
    3d10:	f020 f84d 	bl	23dae <gpio_pin_set>
    3d14:	2100      	movs	r1, #0
    3d16:	f44f 7024 	mov.w	r0, #656	; 0x290
    3d1a:	f01c f98b 	bl	20034 <z_impl_k_sleep>
	st7789v_blanking_on(dev);
    3d1e:	4630      	mov	r0, r6
    3d20:	f020 f8a0 	bl	23e64 <st7789v_blanking_on>
	st7789v_transmit(p_st7789v, ST7789V_CMD_CMD2EN, st7789v_cmd2en_param,
    3d24:	4620      	mov	r0, r4
    3d26:	4a5e      	ldr	r2, [pc, #376]	; (3ea0 <st7789v_init+0x27c>)
    3d28:	2304      	movs	r3, #4
    3d2a:	21df      	movs	r1, #223	; 0xdf
    3d2c:	f020 f86a 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PORCTRL, st7789v_porch_param,
    3d30:	4620      	mov	r0, r4
    3d32:	4a5c      	ldr	r2, [pc, #368]	; (3ea4 <st7789v_init+0x280>)
    3d34:	2305      	movs	r3, #5
    3d36:	21b2      	movs	r1, #178	; 0xb2
    3d38:	f020 f864 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    3d3c:	f10d 0207 	add.w	r2, sp, #7
    3d40:	4620      	mov	r0, r4
    3d42:	2301      	movs	r3, #1
    3d44:	21ba      	movs	r1, #186	; 0xba
	tmp = 0x00;
    3d46:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_DGMEN, &tmp, 1);
    3d4a:	f020 f85b 	bl	23e04 <st7789v_transmit>
	tmp = 0x0f;
    3d4e:	230f      	movs	r3, #15
    3d50:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_FRCTRL2, &tmp, 1);
    3d54:	f10d 0207 	add.w	r2, sp, #7
    3d58:	4620      	mov	r0, r4
    3d5a:	2301      	movs	r3, #1
    3d5c:	21c6      	movs	r1, #198	; 0xc6
    3d5e:	f020 f851 	bl	23e04 <st7789v_transmit>
	tmp = DT_INST_PROP(0, gctrl);
    3d62:	2335      	movs	r3, #53	; 0x35
    3d64:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GCTRL, &tmp, 1);
    3d68:	f10d 0207 	add.w	r2, sp, #7
    3d6c:	4620      	mov	r0, r4
    3d6e:	2301      	movs	r3, #1
    3d70:	21b7      	movs	r1, #183	; 0xb7
    3d72:	f020 f847 	bl	23e04 <st7789v_transmit>
	tmp = DT_INST_PROP(0, vcom);
    3d76:	2319      	movs	r3, #25
	tmp = 0x01;
    3d78:	2601      	movs	r6, #1
	tmp = DT_INST_PROP(0, vcom);
    3d7a:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VCOMS, &tmp, 1);
    3d7e:	f10d 0207 	add.w	r2, sp, #7
    3d82:	4620      	mov	r0, r4
    3d84:	2301      	movs	r3, #1
    3d86:	21bb      	movs	r1, #187	; 0xbb
    3d88:	f020 f83c 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    3d8c:	4633      	mov	r3, r6
    3d8e:	f10d 0207 	add.w	r2, sp, #7
    3d92:	4620      	mov	r0, r4
    3d94:	21c2      	movs	r1, #194	; 0xc2
	tmp = 0x01;
    3d96:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDVVRHEN, &tmp, 1);
    3d9a:	f020 f833 	bl	23e04 <st7789v_transmit>
	tmp = DT_INST_PROP(0, vrhs);
    3d9e:	2312      	movs	r3, #18
    3da0:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VRH, &tmp, 1);
    3da4:	f10d 0207 	add.w	r2, sp, #7
    3da8:	4633      	mov	r3, r6
    3daa:	4620      	mov	r0, r4
    3dac:	21c3      	movs	r1, #195	; 0xc3
    3dae:	f020 f829 	bl	23e04 <st7789v_transmit>
	tmp = DT_INST_PROP(0, vdvs);
    3db2:	2320      	movs	r3, #32
    3db4:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_VDS, &tmp, 1);
    3db8:	f10d 0207 	add.w	r2, sp, #7
    3dbc:	4633      	mov	r3, r6
    3dbe:	4620      	mov	r0, r4
    3dc0:	21c4      	movs	r1, #196	; 0xc4
    3dc2:	f020 f81f 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PWCTRL1, st7789v_pwctrl1_param,
    3dc6:	4620      	mov	r0, r4
    3dc8:	4a37      	ldr	r2, [pc, #220]	; (3ea8 <st7789v_init+0x284>)
    3dca:	2302      	movs	r3, #2
    3dcc:	21d0      	movs	r1, #208	; 0xd0
    3dce:	f020 f819 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    3dd2:	4633      	mov	r3, r6
    3dd4:	f10d 0207 	add.w	r2, sp, #7
    3dd8:	4620      	mov	r0, r4
    3dda:	2136      	movs	r1, #54	; 0x36
	tmp = DT_INST_PROP(0, mdac);
    3ddc:	f88d 5007 	strb.w	r5, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_MADCTL, &tmp, 1);
    3de0:	f020 f810 	bl	23e04 <st7789v_transmit>
	tmp = DT_INST_PROP(0, colmod);
    3de4:	2305      	movs	r3, #5
    3de6:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_COLMOD, &tmp, 1);
    3dea:	f10d 0207 	add.w	r2, sp, #7
    3dee:	4633      	mov	r3, r6
    3df0:	4620      	mov	r0, r4
    3df2:	213a      	movs	r1, #58	; 0x3a
    3df4:	f020 f806 	bl	23e04 <st7789v_transmit>
	tmp = DT_INST_PROP(0, lcm);
    3df8:	232c      	movs	r3, #44	; 0x2c
    3dfa:	f88d 3007 	strb.w	r3, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_LCMCTRL, &tmp, 1);
    3dfe:	f10d 0207 	add.w	r2, sp, #7
    3e02:	4633      	mov	r3, r6
    3e04:	4620      	mov	r0, r4
    3e06:	21c0      	movs	r1, #192	; 0xc0
    3e08:	f01f fffc 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    3e0c:	4633      	mov	r3, r6
    3e0e:	f10d 0207 	add.w	r2, sp, #7
    3e12:	4620      	mov	r0, r4
    3e14:	2126      	movs	r1, #38	; 0x26
	tmp = DT_INST_PROP(0, gamma);
    3e16:	f88d 6007 	strb.w	r6, [sp, #7]
	st7789v_transmit(p_st7789v, ST7789V_CMD_GAMSET, &tmp, 1);
    3e1a:	f01f fff3 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_INV_ON, NULL, 0);
    3e1e:	462b      	mov	r3, r5
    3e20:	462a      	mov	r2, r5
    3e22:	4620      	mov	r0, r4
    3e24:	2121      	movs	r1, #33	; 0x21
    3e26:	f01f ffed 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_PVGAMCTRL, st7789v_pvgam_param,
    3e2a:	4620      	mov	r0, r4
    3e2c:	4a1f      	ldr	r2, [pc, #124]	; (3eac <st7789v_init+0x288>)
    3e2e:	230e      	movs	r3, #14
    3e30:	21e0      	movs	r1, #224	; 0xe0
    3e32:	f01f ffe7 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_NVGAMCTRL, st7789v_nvgam_param,
    3e36:	4620      	mov	r0, r4
    3e38:	4a1d      	ldr	r2, [pc, #116]	; (3eb0 <st7789v_init+0x28c>)
    3e3a:	230e      	movs	r3, #14
    3e3c:	21e1      	movs	r1, #225	; 0xe1
    3e3e:	f01f ffe1 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RAMCTRL, st7789v_ram_param,
    3e42:	4620      	mov	r0, r4
    3e44:	4a1b      	ldr	r2, [pc, #108]	; (3eb4 <st7789v_init+0x290>)
    3e46:	2302      	movs	r3, #2
    3e48:	21b0      	movs	r1, #176	; 0xb0
    3e4a:	f01f ffdb 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(p_st7789v, ST7789V_CMD_RGBCTRL, st7789v_rgb_param,
    3e4e:	4620      	mov	r0, r4
    3e50:	4a19      	ldr	r2, [pc, #100]	; (3eb8 <st7789v_init+0x294>)
    3e52:	2303      	movs	r3, #3
    3e54:	21b1      	movs	r1, #177	; 0xb1
    3e56:	f01f ffd5 	bl	23e04 <st7789v_transmit>
	st7789v_transmit(data, ST7789V_CMD_SLEEP_OUT, NULL, 0);
    3e5a:	462b      	mov	r3, r5
    3e5c:	462a      	mov	r2, r5
    3e5e:	2111      	movs	r1, #17
    3e60:	4620      	mov	r0, r4
    3e62:	f01f ffcf 	bl	23e04 <st7789v_transmit>
    3e66:	2100      	movs	r1, #0
    3e68:	f640 705d 	movw	r0, #3933	; 0xf5d
    3e6c:	f01c f8e2 	bl	20034 <z_impl_k_sleep>
}
    3e70:	e6ec      	b.n	3c4c <st7789v_init+0x28>
    3e72:	bf00      	nop
    3e74:	0002e142 	.word	0x0002e142
    3e78:	0002c048 	.word	0x0002c048
    3e7c:	0002bf50 	.word	0x0002bf50
    3e80:	0002e148 	.word	0x0002e148
    3e84:	007a1200 	.word	0x007a1200
    3e88:	00010100 	.word	0x00010100
    3e8c:	0002dead 	.word	0x0002dead
    3e90:	0002e169 	.word	0x0002e169
    3e94:	0002e193 	.word	0x0002e193
    3e98:	0002e1b0 	.word	0x0002e1b0
    3e9c:	0002e1da 	.word	0x0002e1da
    3ea0:	20000a5d 	.word	0x20000a5d
    3ea4:	20000a6f 	.word	0x20000a6f
    3ea8:	20000a82 	.word	0x20000a82
    3eac:	20000a74 	.word	0x20000a74
    3eb0:	20000a61 	.word	0x20000a61
    3eb4:	20000a84 	.word	0x20000a84
    3eb8:	20000a86 	.word	0x20000a86

00003ebc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    3ebc:	4a04      	ldr	r2, [pc, #16]	; (3ed0 <sys_clock_timeout_handler+0x14>)
    3ebe:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3ec0:	1ac8      	subs	r0, r1, r3
    3ec2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    3ec6:	4403      	add	r3, r0
    3ec8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3eca:	f01c bb71 	b.w	205b0 <z_clock_announce>
    3ece:	bf00      	nop
    3ed0:	20001688 	.word	0x20001688

00003ed4 <set_absolute_alarm>:
{
    3ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3ed8:	0086      	lsls	r6, r0, #2
    3eda:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    3ede:	f100 0450 	add.w	r4, r0, #80	; 0x50
    3ee2:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    3ee6:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    3ee8:	f8df 807c 	ldr.w	r8, [pc, #124]	; 3f68 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    3eec:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3ef0:	b2a4      	uxth	r4, r4
    3ef2:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ef6:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    3efa:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    3efe:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f02:	4087      	lsls	r7, r0
    3f04:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    3f06:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3f0a:	eba3 030a 	sub.w	r3, r3, sl
    3f0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3f12:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    3f16:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    3f18:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    3f1c:	d102      	bne.n	3f24 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    3f1e:	2013      	movs	r0, #19
    3f20:	f027 f970 	bl	2b204 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3f24:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    3f28:	1aab      	subs	r3, r5, r2
    3f2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    3f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3f32:	bf88      	it	hi
    3f34:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f36:	2300      	movs	r3, #0
    3f38:	6023      	str	r3, [r4, #0]
    3f3a:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3f3c:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3f40:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3f44:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    3f48:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    3f4c:	459a      	cmp	sl, r3
    3f4e:	d006      	beq.n	3f5e <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    3f50:	1aeb      	subs	r3, r5, r3
    3f52:	3b02      	subs	r3, #2
    3f54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3f5c:	d801      	bhi.n	3f62 <set_absolute_alarm+0x8e>
}
    3f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    3f62:	462b      	mov	r3, r5
    3f64:	e7cf      	b.n	3f06 <set_absolute_alarm+0x32>
    3f66:	bf00      	nop
    3f68:	40011000 	.word	0x40011000

00003f6c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    3f6e:	4e10      	ldr	r6, [pc, #64]	; (3fb0 <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f70:	4f10      	ldr	r7, [pc, #64]	; (3fb4 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3f72:	2500      	movs	r5, #0
    3f74:	4b10      	ldr	r3, [pc, #64]	; (3fb8 <rtc_nrf_isr+0x4c>)
    3f76:	2000      	movs	r0, #0
    3f78:	681c      	ldr	r4, [r3, #0]
    3f7a:	461a      	mov	r2, r3
    3f7c:	b105      	cbz	r5, 3f80 <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    3f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    3f80:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    3f84:	03c9      	lsls	r1, r1, #15
    3f86:	d5fa      	bpl.n	3f7e <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3f88:	6839      	ldr	r1, [r7, #0]
    3f8a:	2900      	cmp	r1, #0
    3f8c:	d0f7      	beq.n	3f7e <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3f8e:	603d      	str	r5, [r7, #0]
    3f90:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3f92:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3f96:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    3f9a:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    3f9e:	2501      	movs	r5, #1
			if (handler) {
    3fa0:	b11c      	cbz	r4, 3faa <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    3fa2:	685a      	ldr	r2, [r3, #4]
    3fa4:	6018      	str	r0, [r3, #0]
    3fa6:	47a0      	blx	r4
    3fa8:	e7e4      	b.n	3f74 <rtc_nrf_isr+0x8>
    3faa:	6014      	str	r4, [r2, #0]
}
    3fac:	e7e7      	b.n	3f7e <rtc_nrf_isr+0x12>
    3fae:	bf00      	nop
    3fb0:	40011000 	.word	0x40011000
    3fb4:	40011140 	.word	0x40011140
    3fb8:	2000167c 	.word	0x2000167c

00003fbc <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    3fbc:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    3fbe:	4d10      	ldr	r5, [pc, #64]	; (4000 <CONFIG_HEAP_MEM_POOL_SIZE>)
    3fc0:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    3fc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    3fc6:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    3fca:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    3fce:	4b0d      	ldr	r3, [pc, #52]	; (4004 <CONFIG_HEAP_MEM_POOL_SIZE+0x4>)
    3fd0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3fd4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3fd8:	2101      	movs	r1, #1
    3fda:	4622      	mov	r2, r4
    3fdc:	2011      	movs	r0, #17
    3fde:	f000 fa41 	bl	4464 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3fe2:	2011      	movs	r0, #17
    3fe4:	f000 fa0c 	bl	4400 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3fe8:	4a07      	ldr	r2, [pc, #28]	; (4008 <CONFIG_HEAP_MEM_POOL_SIZE+0x8>)
    3fea:	2301      	movs	r3, #1
    3fec:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3fee:	4a07      	ldr	r2, [pc, #28]	; (400c <CONFIG_HEAP_MEM_POOL_SIZE+0xc>)
    3ff0:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    3ff2:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    3ff4:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    3ff6:	f7ff fd61 	bl	3abc <z_nrf_clock_control_lf_on>

	return 0;
}
    3ffa:	4620      	mov	r0, r4
    3ffc:	bd38      	pop	{r3, r4, r5, pc}
    3ffe:	bf00      	nop
    4000:	40011000 	.word	0x40011000
    4004:	e000e100 	.word	0xe000e100
    4008:	40011008 	.word	0x40011008
    400c:	20001684 	.word	0x20001684

00004010 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4010:	4b13      	ldr	r3, [pc, #76]	; (4060 <z_clock_set_timeout+0x50>)
    4012:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4016:	bf08      	it	eq
    4018:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    401a:	3801      	subs	r0, #1
    401c:	2800      	cmp	r0, #0
    401e:	dd1c      	ble.n	405a <z_clock_set_timeout+0x4a>
    4020:	4298      	cmp	r0, r3
    4022:	bfa8      	it	ge
    4024:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    4026:	4b0f      	ldr	r3, [pc, #60]	; (4064 <z_clock_set_timeout+0x54>)
    4028:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    402c:	4b0e      	ldr	r3, [pc, #56]	; (4068 <z_clock_set_timeout+0x58>)
    402e:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    4030:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    4032:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    4036:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    403a:	bf18      	it	ne
    403c:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    403e:	4a0b      	ldr	r2, [pc, #44]	; (406c <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4040:	3301      	adds	r3, #1
    4042:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    4044:	480a      	ldr	r0, [pc, #40]	; (4070 <z_clock_set_timeout+0x60>)
    4046:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    4048:	2000      	movs	r0, #0
    404a:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    404c:	4a04      	ldr	r2, [pc, #16]	; (4060 <z_clock_set_timeout+0x50>)
    404e:	4293      	cmp	r3, r2
    4050:	bf94      	ite	ls
    4052:	18c9      	addls	r1, r1, r3
    4054:	1889      	addhi	r1, r1, r2
    4056:	f7ff bf3d 	b.w	3ed4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    405a:	2000      	movs	r0, #0
    405c:	e7e3      	b.n	4026 <z_clock_set_timeout+0x16>
    405e:	bf00      	nop
    4060:	007fffff 	.word	0x007fffff
    4064:	40011000 	.word	0x40011000
    4068:	20001688 	.word	0x20001688
    406c:	2000167c 	.word	0x2000167c
    4070:	00003ebd 	.word	0x00003ebd

00004074 <z_clock_elapsed>:
	__asm__ volatile(
    4074:	f04f 0220 	mov.w	r2, #32
    4078:	f3ef 8311 	mrs	r3, BASEPRI
    407c:	f382 8811 	msr	BASEPRI, r2
    4080:	f3bf 8f6f 	isb	sy
    4084:	4a06      	ldr	r2, [pc, #24]	; (40a0 <z_clock_elapsed+0x2c>)
    4086:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    408a:	4a06      	ldr	r2, [pc, #24]	; (40a4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    408c:	6812      	ldr	r2, [r2, #0]
    408e:	1a80      	subs	r0, r0, r2
    4090:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    4094:	f383 8811 	msr	BASEPRI, r3
    4098:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    409c:	4770      	bx	lr
    409e:	bf00      	nop
    40a0:	40011000 	.word	0x40011000
    40a4:	20001688 	.word	0x20001688

000040a8 <z_timer_cycle_get_32>:
	__asm__ volatile(
    40a8:	f04f 0320 	mov.w	r3, #32
    40ac:	f3ef 8211 	mrs	r2, BASEPRI
    40b0:	f383 8811 	msr	BASEPRI, r3
    40b4:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    40b8:	4906      	ldr	r1, [pc, #24]	; (40d4 <z_timer_cycle_get_32+0x2c>)
    40ba:	4b07      	ldr	r3, [pc, #28]	; (40d8 <z_timer_cycle_get_32+0x30>)
    40bc:	6808      	ldr	r0, [r1, #0]
    40be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    40c2:	f382 8811 	msr	BASEPRI, r2
    40c6:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    40ca:	1a1b      	subs	r3, r3, r0
    40cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    40d0:	4418      	add	r0, r3
    40d2:	4770      	bx	lr
    40d4:	20001688 	.word	0x20001688
    40d8:	40011000 	.word	0x40011000

000040dc <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    40dc:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    40de:	4c11      	ldr	r4, [pc, #68]	; (4124 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    40e0:	4a11      	ldr	r2, [pc, #68]	; (4128 <_DoInit+0x4c>)
    40e2:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    40e4:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    40e6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    40ea:	4b10      	ldr	r3, [pc, #64]	; (412c <_DoInit+0x50>)
    40ec:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    40ee:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    40f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    40f4:	4a0e      	ldr	r2, [pc, #56]	; (4130 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    40f6:	490f      	ldr	r1, [pc, #60]	; (4134 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    40f8:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    40fa:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    40fc:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    40fe:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    4100:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    4102:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4104:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4106:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    4108:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    410a:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    410c:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    410e:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    4110:	f027 fb4e 	bl	2b7b0 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    4114:	4908      	ldr	r1, [pc, #32]	; (4138 <_DoInit+0x5c>)
    4116:	4620      	mov	r0, r4
    4118:	f027 fb4a 	bl	2b7b0 <strcpy>
  p->acID[6] = ' ';
    411c:	2320      	movs	r3, #32
    411e:	71a3      	strb	r3, [r4, #6]
}
    4120:	bd10      	pop	{r4, pc}
    4122:	bf00      	nop
    4124:	2000168c 	.word	0x2000168c
    4128:	0002e214 	.word	0x0002e214
    412c:	2000813e 	.word	0x2000813e
    4130:	2000812e 	.word	0x2000812e
    4134:	0002e21d 	.word	0x0002e21d
    4138:	0002e221 	.word	0x0002e221

0000413c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    413c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    4140:	4f23      	ldr	r7, [pc, #140]	; (41d0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    4142:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4146:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4148:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    414c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    414e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4150:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4152:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4154:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4156:	d834      	bhi.n	41c2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4158:	f8d2 a020 	ldr.w	sl, [r2, #32]
    415c:	ebaa 0905 	sub.w	r9, sl, r5
    4160:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    4164:	4294      	cmp	r4, r2
    4166:	d811      	bhi.n	418c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    4168:	f04f 0918 	mov.w	r9, #24
    416c:	fb06 9309 	mla	r3, r6, r9, r9
    4170:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4172:	4622      	mov	r2, r4
    4174:	6858      	ldr	r0, [r3, #4]
    4176:	4641      	mov	r1, r8
    4178:	4428      	add	r0, r5
    417a:	f027 faee 	bl	2b75a <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    417e:	fb09 7606 	mla	r6, r9, r6, r7
    4182:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    4184:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4186:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4188:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    418c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    418e:	429c      	cmp	r4, r3
    4190:	d81b      	bhi.n	41ca <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    4192:	fb00 bb0b 	mla	fp, r0, fp, fp
    4196:	44bb      	add	fp, r7
    4198:	464a      	mov	r2, r9
    419a:	f8db 0004 	ldr.w	r0, [fp, #4]
    419e:	442c      	add	r4, r5
    41a0:	4428      	add	r0, r5
    41a2:	f027 fada 	bl	2b75a <memcpy>
      if (NumBytes) {
    41a6:	ebb4 040a 	subs.w	r4, r4, sl
    41aa:	d006      	beq.n	41ba <SEGGER_RTT_WriteSkipNoLock+0x7e>
    41ac:	f8db 0004 	ldr.w	r0, [fp, #4]
    41b0:	4622      	mov	r2, r4
    41b2:	eb08 0109 	add.w	r1, r8, r9
    41b6:	f027 fad0 	bl	2b75a <memcpy>
      pRing->WrOff = NumBytes;
    41ba:	2018      	movs	r0, #24
    41bc:	fb00 7606 	mla	r6, r0, r6, r7
    41c0:	e7e0      	b.n	4184 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    41c2:	3b01      	subs	r3, #1
    41c4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    41c6:	42a3      	cmp	r3, r4
    41c8:	d2ce      	bcs.n	4168 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    41ca:	2000      	movs	r0, #0
    41cc:	e7dc      	b.n	4188 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    41ce:	bf00      	nop
    41d0:	2000168c 	.word	0x2000168c

000041d4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    41d4:	4b03      	ldr	r3, [pc, #12]	; (41e4 <SEGGER_RTT_HasDataUp+0x10>)
    41d6:	2218      	movs	r2, #24
    41d8:	fb02 3300 	mla	r3, r2, r0, r3
    41dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    41de:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    41e0:	1a80      	subs	r0, r0, r2
    41e2:	4770      	bx	lr
    41e4:	2000168c 	.word	0x2000168c

000041e8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    41e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    41ea:	4e26      	ldr	r6, [pc, #152]	; (4284 <tc_aes128_set_encrypt_key+0x9c>)
{
    41ec:	4607      	mov	r7, r0
    41ee:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    41f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    41f2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    41f4:	ad01      	add	r5, sp, #4
    41f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    41f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    41fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    41fc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    4200:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    4204:	4638      	mov	r0, r7
    4206:	2f00      	cmp	r7, #0
    4208:	d038      	beq.n	427c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    420a:	2c00      	cmp	r4, #0
    420c:	d038      	beq.n	4280 <tc_aes128_set_encrypt_key+0x98>
    420e:	1f38      	subs	r0, r7, #4
    4210:	4621      	mov	r1, r4
    4212:	4602      	mov	r2, r0
    4214:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    4216:	784b      	ldrb	r3, [r1, #1]
    4218:	780d      	ldrb	r5, [r1, #0]
    421a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    421c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    4220:	78cd      	ldrb	r5, [r1, #3]
    4222:	432b      	orrs	r3, r5
    4224:	788d      	ldrb	r5, [r1, #2]
    4226:	3104      	adds	r1, #4
    4228:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    422c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    422e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    4232:	d1f0      	bne.n	4216 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    4234:	4c14      	ldr	r4, [pc, #80]	; (4288 <tc_aes128_set_encrypt_key+0xa0>)
    4236:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    4238:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    423a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    423c:	d116      	bne.n	426c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    423e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4242:	5ca5      	ldrb	r5, [r4, r2]
    4244:	0e1a      	lsrs	r2, r3, #24
    4246:	5ca2      	ldrb	r2, [r4, r2]
    4248:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    424c:	f3c3 2507 	ubfx	r5, r3, #8, #8
    4250:	b2db      	uxtb	r3, r3
    4252:	5d65      	ldrb	r5, [r4, r5]
    4254:	5ce3      	ldrb	r3, [r4, r3]
    4256:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    425a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    425e:	ad0c      	add	r5, sp, #48	; 0x30
    4260:	f021 0303 	bic.w	r3, r1, #3
    4264:	442b      	add	r3, r5
    4266:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    426a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    426c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    4270:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    4272:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    4274:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    4276:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    4278:	d1de      	bne.n	4238 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    427a:	2001      	movs	r0, #1
}
    427c:	b00d      	add	sp, #52	; 0x34
    427e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    4280:	4620      	mov	r0, r4
    4282:	e7fb      	b.n	427c <tc_aes128_set_encrypt_key+0x94>
    4284:	0002c0c0 	.word	0x0002c0c0
    4288:	0002e228 	.word	0x0002e228

0000428c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    428c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4290:	4615      	mov	r5, r2
    4292:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    4294:	4606      	mov	r6, r0
    4296:	2800      	cmp	r0, #0
    4298:	d058      	beq.n	434c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    429a:	2900      	cmp	r1, #0
    429c:	d059      	beq.n	4352 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    429e:	2a00      	cmp	r2, #0
    42a0:	d059      	beq.n	4356 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    42a2:	2310      	movs	r3, #16
    42a4:	460a      	mov	r2, r1
    42a6:	4668      	mov	r0, sp
    42a8:	4619      	mov	r1, r3
    42aa:	f01f fe5d 	bl	23f68 <_copy>
	add_round_key(state, s->words);
    42ae:	4629      	mov	r1, r5
    42b0:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    42b2:	4c2a      	ldr	r4, [pc, #168]	; (435c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    42b4:	f01f fe70 	bl	23f98 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    42b8:	f105 0710 	add.w	r7, r5, #16
    42bc:	46a1      	mov	r9, r4
    42be:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    42c0:	46e8      	mov	r8, sp
{
    42c2:	466a      	mov	r2, sp
    42c4:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    42c6:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    42c8:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    42ca:	5c61      	ldrb	r1, [r4, r1]
    42cc:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    42d0:	d1f9      	bne.n	42c6 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    42d2:	4668      	mov	r0, sp
    42d4:	f01f fea5 	bl	24022 <shift_rows>
	mult_row_column(t, s);
    42d8:	4669      	mov	r1, sp
    42da:	a804      	add	r0, sp, #16
    42dc:	f01f feda 	bl	24094 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    42e0:	a901      	add	r1, sp, #4
    42e2:	a805      	add	r0, sp, #20
    42e4:	f01f fed6 	bl	24094 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    42e8:	a902      	add	r1, sp, #8
    42ea:	a806      	add	r0, sp, #24
    42ec:	f01f fed2 	bl	24094 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    42f0:	a903      	add	r1, sp, #12
    42f2:	a807      	add	r0, sp, #28
    42f4:	f01f fece 	bl	24094 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    42f8:	2310      	movs	r3, #16
    42fa:	4619      	mov	r1, r3
    42fc:	eb0d 0203 	add.w	r2, sp, r3
    4300:	4668      	mov	r0, sp
    4302:	f01f fe31 	bl	23f68 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    4306:	4639      	mov	r1, r7
    4308:	4668      	mov	r0, sp
    430a:	3710      	adds	r7, #16
    430c:	f01f fe44 	bl	23f98 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    4310:	42af      	cmp	r7, r5
    4312:	d1d5      	bne.n	42c0 <tc_aes_encrypt+0x34>
    4314:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    4316:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    431a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    431c:	f819 3003 	ldrb.w	r3, [r9, r3]
    4320:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    4324:	d1f7      	bne.n	4316 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    4326:	4668      	mov	r0, sp
    4328:	f01f fe7b 	bl	24022 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    432c:	4629      	mov	r1, r5
    432e:	4668      	mov	r0, sp
    4330:	f01f fe32 	bl	23f98 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    4334:	2310      	movs	r3, #16
    4336:	4619      	mov	r1, r3
    4338:	466a      	mov	r2, sp
    433a:	4630      	mov	r0, r6
    433c:	f01f fe14 	bl	23f68 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    4340:	4668      	mov	r0, sp
    4342:	2210      	movs	r2, #16
    4344:	4621      	mov	r1, r4
    4346:	f01f fe1c 	bl	23f82 <_set>

	return TC_CRYPTO_SUCCESS;
    434a:	2001      	movs	r0, #1
}
    434c:	b009      	add	sp, #36	; 0x24
    434e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    4352:	4608      	mov	r0, r1
    4354:	e7fa      	b.n	434c <tc_aes_encrypt+0xc0>
    4356:	4610      	mov	r0, r2
    4358:	e7f8      	b.n	434c <tc_aes_encrypt+0xc0>
    435a:	bf00      	nop
    435c:	0002e228 	.word	0x0002e228

00004360 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4360:	4a0a      	ldr	r2, [pc, #40]	; (438c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    4362:	490b      	ldr	r1, [pc, #44]	; (4390 <arch_swap+0x30>)
	_current->arch.basepri = key;
    4364:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4366:	6809      	ldr	r1, [r1, #0]
    4368:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    436c:	4909      	ldr	r1, [pc, #36]	; (4394 <arch_swap+0x34>)
	_current->arch.basepri = key;
    436e:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4370:	684b      	ldr	r3, [r1, #4]
    4372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4376:	604b      	str	r3, [r1, #4]
    4378:	2300      	movs	r3, #0
    437a:	f383 8811 	msr	BASEPRI, r3
    437e:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4382:	6893      	ldr	r3, [r2, #8]
}
    4384:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    4388:	4770      	bx	lr
    438a:	bf00      	nop
    438c:	20004044 	.word	0x20004044
    4390:	0002d964 	.word	0x0002d964
    4394:	e000ed00 	.word	0xe000ed00

00004398 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4398:	490f      	ldr	r1, [pc, #60]	; (43d8 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    439a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    439c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    43a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    43a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    43a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    43aa:	2020      	movs	r0, #32
    msr BASEPRI, r0
    43ac:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    43b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    43b4:	4f09      	ldr	r7, [pc, #36]	; (43dc <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    43b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    43ba:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    43bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    43be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    43c0:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    43c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    43c4:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    43c6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    43ca:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    43ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    43d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    43d6:	4770      	bx	lr
    ldr r1, =_kernel
    43d8:	20004044 	.word	0x20004044
    ldr v4, =_SCS_ICSR
    43dc:	e000ed04 	.word	0xe000ed04

000043e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    43e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    43e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    43e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    43ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    43ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    43f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    43f4:	2902      	cmp	r1, #2
    beq _oops
    43f6:	d0ff      	beq.n	43f8 <_oops>

000043f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    43f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    43fa:	f01f ff8e 	bl	2431a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    43fe:	bd01      	pop	{r0, pc}

00004400 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4400:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4402:	2b00      	cmp	r3, #0
    4404:	db08      	blt.n	4418 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4406:	2201      	movs	r2, #1
    4408:	f000 001f 	and.w	r0, r0, #31
    440c:	fa02 f000 	lsl.w	r0, r2, r0
    4410:	095b      	lsrs	r3, r3, #5
    4412:	4a02      	ldr	r2, [pc, #8]	; (441c <arch_irq_enable+0x1c>)
    4414:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    4418:	4770      	bx	lr
    441a:	bf00      	nop
    441c:	e000e100 	.word	0xe000e100

00004420 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4420:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    4422:	2b00      	cmp	r3, #0
    4424:	db0d      	blt.n	4442 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4426:	2201      	movs	r2, #1
    4428:	095b      	lsrs	r3, r3, #5
    442a:	f000 001f 	and.w	r0, r0, #31
    442e:	fa02 f000 	lsl.w	r0, r2, r0
    4432:	3320      	adds	r3, #32
    4434:	4a03      	ldr	r2, [pc, #12]	; (4444 <arch_irq_disable+0x24>)
    4436:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    443a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    443e:	f3bf 8f6f 	isb	sy
}
    4442:	4770      	bx	lr
    4444:	e000e100 	.word	0xe000e100

00004448 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4448:	4b05      	ldr	r3, [pc, #20]	; (4460 <arch_irq_is_enabled+0x18>)
    444a:	0942      	lsrs	r2, r0, #5
    444c:	f000 001f 	and.w	r0, r0, #31
    4450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4454:	2301      	movs	r3, #1
    4456:	fa03 f000 	lsl.w	r0, r3, r0
}
    445a:	4010      	ands	r0, r2
    445c:	4770      	bx	lr
    445e:	bf00      	nop
    4460:	e000e100 	.word	0xe000e100

00004464 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4464:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    4466:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4468:	bfa8      	it	ge
    446a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    446e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4472:	bfb8      	it	lt
    4474:	4b06      	ldrlt	r3, [pc, #24]	; (4490 <z_arm_irq_priority_set+0x2c>)
    4476:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    447a:	bfac      	ite	ge
    447c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4480:	f000 000f 	andlt.w	r0, r0, #15
    4484:	b2c9      	uxtb	r1, r1
    4486:	bfb4      	ite	lt
    4488:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    448a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    448e:	4770      	bx	lr
    4490:	e000ed14 	.word	0xe000ed14

00004494 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    4494:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    4496:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4498:	4b04      	ldr	r3, [pc, #16]	; (44ac <_arch_isr_direct_pm+0x18>)
    449a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    449c:	b118      	cbz	r0, 44a6 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    449e:	2200      	movs	r2, #0
    44a0:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    44a2:	f01a ffd9 	bl	1f458 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    44a6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    44a8:	bd08      	pop	{r3, pc}
    44aa:	bf00      	nop
    44ac:	20004044 	.word	0x20004044

000044b0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    44b0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    44b4:	9b00      	ldr	r3, [sp, #0]
    44b6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    44ba:	490a      	ldr	r1, [pc, #40]	; (44e4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    44bc:	9b01      	ldr	r3, [sp, #4]
    44be:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    44c2:	9b02      	ldr	r3, [sp, #8]
    44c4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    44c8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    44cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    44d0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    44d4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    44d8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    44da:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    44dc:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    44de:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    44e0:	4770      	bx	lr
    44e2:	bf00      	nop
    44e4:	00022fab 	.word	0x00022fab

000044e8 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    44e8:	b508      	push	{r3, lr}
    44ea:	4606      	mov	r6, r0
    44ec:	460d      	mov	r5, r1
    44ee:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    44f0:	f000 fb1a 	bl	4b28 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    44f4:	4b07      	ldr	r3, [pc, #28]	; (4514 <arch_switch_to_main_thread+0x2c>)
    44f6:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    44f8:	4620      	mov	r0, r4
    44fa:	f385 8809 	msr	PSP, r5
    44fe:	2100      	movs	r1, #0
    4500:	b663      	cpsie	if
    4502:	f381 8811 	msr	BASEPRI, r1
    4506:	f3bf 8f6f 	isb	sy
    450a:	2200      	movs	r2, #0
    450c:	2300      	movs	r3, #0
    450e:	f01e fd4c 	bl	22faa <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4512:	bf00      	nop
    4514:	20004044 	.word	0x20004044

00004518 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    4518:	4901      	ldr	r1, [pc, #4]	; (4520 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    451a:	2210      	movs	r2, #16
	str	r2, [r1]
    451c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    451e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    4520:	e000ed10 	.word	0xe000ed10

00004524 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    4524:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    4526:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    4528:	f380 8811 	msr	BASEPRI, r0
	isb
    452c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    4530:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    4534:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    4536:	b662      	cpsie	i
	isb
    4538:	f3bf 8f6f 	isb	sy

	bx	lr
    453c:	4770      	bx	lr
    453e:	bf00      	nop

00004540 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    4540:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    4542:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    4544:	f381 8811 	msr	BASEPRI, r1

	wfe
    4548:	bf20      	wfe

	msr	BASEPRI, r0
    454a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    454e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    4550:	4770      	bx	lr
    4552:	bf00      	nop

00004554 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4554:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4556:	4606      	mov	r6, r0

	if (esf != NULL) {
    4558:	460c      	mov	r4, r1
    455a:	b301      	cbz	r1, 459e <z_arm_fatal_error+0x4a>
    455c:	4b13      	ldr	r3, [pc, #76]	; (45ac <z_arm_fatal_error+0x58>)
    455e:	4d14      	ldr	r5, [pc, #80]	; (45b0 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4560:	4814      	ldr	r0, [pc, #80]	; (45b4 <z_arm_fatal_error+0x60>)
    4562:	1aed      	subs	r5, r5, r3
    4564:	08ed      	lsrs	r5, r5, #3
    4566:	01ad      	lsls	r5, r5, #6
    4568:	f045 0501 	orr.w	r5, r5, #1
    456c:	f8ad 5000 	strh.w	r5, [sp]
    4570:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    4574:	6809      	ldr	r1, [r1, #0]
    4576:	f01f f869 	bl	2364c <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    457a:	f8ad 5000 	strh.w	r5, [sp]
    457e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4582:	68e1      	ldr	r1, [r4, #12]
    4584:	480c      	ldr	r0, [pc, #48]	; (45b8 <z_arm_fatal_error+0x64>)
    4586:	f01f f861 	bl	2364c <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    458a:	69e1      	ldr	r1, [r4, #28]
    458c:	480b      	ldr	r0, [pc, #44]	; (45bc <z_arm_fatal_error+0x68>)
    458e:	462a      	mov	r2, r5
    4590:	f01f f82f 	bl	235f2 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4594:	69a1      	ldr	r1, [r4, #24]
    4596:	480a      	ldr	r0, [pc, #40]	; (45c0 <z_arm_fatal_error+0x6c>)
    4598:	462a      	mov	r2, r5
    459a:	f01f f82a 	bl	235f2 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    459e:	4621      	mov	r1, r4
    45a0:	4630      	mov	r0, r6
}
    45a2:	b002      	add	sp, #8
    45a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    45a8:	f01a bef8 	b.w	1f39c <z_fatal_error>
    45ac:	0002bf50 	.word	0x0002bf50
    45b0:	0002c080 	.word	0x0002c080
    45b4:	0002e328 	.word	0x0002e328
    45b8:	0002e357 	.word	0x0002e357
    45bc:	0002e386 	.word	0x0002e386
    45c0:	0002e395 	.word	0x0002e395

000045c4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    45c4:	bf30      	wfi
    b z_SysNmiOnReset
    45c6:	f7ff bffd 	b.w	45c4 <z_SysNmiOnReset>
    45ca:	bf00      	nop

000045cc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    45cc:	4a0e      	ldr	r2, [pc, #56]	; (4608 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    45ce:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    45d0:	4b0e      	ldr	r3, [pc, #56]	; (460c <z_arm_prep_c+0x40>)
    45d2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    45d6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    45d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45dc:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    45e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    45e4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    45e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    45ec:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    45f0:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    45f4:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    45f8:	f01a ff78 	bl	1f4ec <z_bss_zero>
	z_data_copy();
    45fc:	f01b fede 	bl	203bc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4600:	f000 fa64 	bl	4acc <z_arm_interrupt_init>
	z_cstart();
    4604:	f01a ff96 	bl	1f534 <z_cstart>
    4608:	00000000 	.word	0x00000000
    460c:	e000ed00 	.word	0xe000ed00

00004610 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4610:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4612:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4614:	4a0b      	ldr	r2, [pc, #44]	; (4644 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4616:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    4618:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    461a:	bf1e      	ittt	ne
	movne	r1, #0
    461c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    461e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    4620:	f01a ff1a 	blne	1f458 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4624:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4626:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    462a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    462e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4632:	4905      	ldr	r1, [pc, #20]	; (4648 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4634:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4636:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4638:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    463a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    463e:	4903      	ldr	r1, [pc, #12]	; (464c <_isr_wrapper+0x3c>)
	bx r1
    4640:	4708      	bx	r1
    4642:	0000      	.short	0x0000
	ldr r2, =_kernel
    4644:	20004044 	.word	0x20004044
	ldr r1, =_sw_isr_table
    4648:	0002bd80 	.word	0x0002bd80
	ldr r1, =z_arm_int_exit
    464c:	00004ab1 	.word	0x00004ab1

00004650 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    4650:	f01f ffe7 	bl	24622 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4654:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4656:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    465a:	4808      	ldr	r0, [pc, #32]	; (467c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    465c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4660:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4662:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4666:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    466a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    466c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    466e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4672:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4676:	f7ff ffa9 	bl	45cc <z_arm_prep_c>
    467a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    467c:	2000a198 	.word	0x2000a198

00004680 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4680:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4684:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4688:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    468a:	4672      	mov	r2, lr
	bl z_arm_fault
    468c:	f000 f934 	bl	48f8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4690:	bd01      	pop	{r0, pc}
    4692:	bf00      	nop

00004694 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	4b23      	ldr	r3, [pc, #140]	; (4724 <usage_fault.isra.0+0x90>)
    4698:	4c23      	ldr	r4, [pc, #140]	; (4728 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    469a:	4d24      	ldr	r5, [pc, #144]	; (472c <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    469c:	4824      	ldr	r0, [pc, #144]	; (4730 <usage_fault.isra.0+0x9c>)
    469e:	1ae4      	subs	r4, r4, r3
    46a0:	08e4      	lsrs	r4, r4, #3
    46a2:	01a4      	lsls	r4, r4, #6
    46a4:	f044 0601 	orr.w	r6, r4, #1
    46a8:	4631      	mov	r1, r6
    46aa:	f01e ff95 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    46ae:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    46b0:	0193      	lsls	r3, r2, #6
    46b2:	d503      	bpl.n	46bc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    46b4:	481f      	ldr	r0, [pc, #124]	; (4734 <usage_fault.isra.0+0xa0>)
    46b6:	4631      	mov	r1, r6
    46b8:	f01e ff8e 	bl	235d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    46bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    46be:	01dd      	lsls	r5, r3, #7
    46c0:	d504      	bpl.n	46cc <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    46c2:	481d      	ldr	r0, [pc, #116]	; (4738 <usage_fault.isra.0+0xa4>)
    46c4:	f044 0101 	orr.w	r1, r4, #1
    46c8:	f01e ff86 	bl	235d8 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    46cc:	4d17      	ldr	r5, [pc, #92]	; (472c <usage_fault.isra.0+0x98>)
    46ce:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    46d0:	0310      	lsls	r0, r2, #12
    46d2:	d504      	bpl.n	46de <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    46d4:	4819      	ldr	r0, [pc, #100]	; (473c <usage_fault.isra.0+0xa8>)
    46d6:	f044 0101 	orr.w	r1, r4, #1
    46da:	f01e ff7d 	bl	235d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    46de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    46e0:	0359      	lsls	r1, r3, #13
    46e2:	d504      	bpl.n	46ee <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    46e4:	4816      	ldr	r0, [pc, #88]	; (4740 <usage_fault.isra.0+0xac>)
    46e6:	f044 0101 	orr.w	r1, r4, #1
    46ea:	f01e ff75 	bl	235d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    46ee:	4d0f      	ldr	r5, [pc, #60]	; (472c <usage_fault.isra.0+0x98>)
    46f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    46f2:	0392      	lsls	r2, r2, #14
    46f4:	d504      	bpl.n	4700 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    46f6:	4813      	ldr	r0, [pc, #76]	; (4744 <usage_fault.isra.0+0xb0>)
    46f8:	f044 0101 	orr.w	r1, r4, #1
    46fc:	f01e ff6c 	bl	235d8 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4700:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4702:	03db      	lsls	r3, r3, #15
    4704:	d504      	bpl.n	4710 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4706:	4810      	ldr	r0, [pc, #64]	; (4748 <usage_fault.isra.0+0xb4>)
    4708:	f044 0101 	orr.w	r1, r4, #1
    470c:	f01e ff64 	bl	235d8 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4710:	4a06      	ldr	r2, [pc, #24]	; (472c <usage_fault.isra.0+0x98>)
    4712:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4714:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4718:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    471c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    471e:	2000      	movs	r0, #0
    4720:	bd70      	pop	{r4, r5, r6, pc}
    4722:	bf00      	nop
    4724:	0002bf50 	.word	0x0002bf50
    4728:	0002c080 	.word	0x0002c080
    472c:	e000ed00 	.word	0xe000ed00
    4730:	0002e3c3 	.word	0x0002e3c3
    4734:	0002e3db 	.word	0x0002e3db
    4738:	0002e3ee 	.word	0x0002e3ee
    473c:	0002e408 	.word	0x0002e408
    4740:	0002e426 	.word	0x0002e426
    4744:	0002e44b 	.word	0x0002e44b
    4748:	0002e465 	.word	0x0002e465

0000474c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    474c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4750:	4b28      	ldr	r3, [pc, #160]	; (47f4 <mem_manage_fault.isra.0+0xa8>)
    4752:	4c29      	ldr	r4, [pc, #164]	; (47f8 <mem_manage_fault.isra.0+0xac>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4754:	4d29      	ldr	r5, [pc, #164]	; (47fc <mem_manage_fault.isra.0+0xb0>)
    4756:	1ae4      	subs	r4, r4, r3
    4758:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    475a:	01a4      	lsls	r4, r4, #6
    475c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    4760:	4607      	mov	r7, r0
    4762:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    4764:	4826      	ldr	r0, [pc, #152]	; (4800 <mem_manage_fault.isra.0+0xb4>)
    4766:	4641      	mov	r1, r8
    4768:	f01e ff36 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    476c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    476e:	06d0      	lsls	r0, r2, #27
    4770:	d503      	bpl.n	477a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4772:	4824      	ldr	r0, [pc, #144]	; (4804 <mem_manage_fault.isra.0+0xb8>)
    4774:	4641      	mov	r1, r8
    4776:	f01e ff2f 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    477a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    477c:	0719      	lsls	r1, r3, #28
    477e:	d504      	bpl.n	478a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    4780:	4821      	ldr	r0, [pc, #132]	; (4808 <mem_manage_fault.isra.0+0xbc>)
    4782:	f044 0101 	orr.w	r1, r4, #1
    4786:	f01e ff27 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    478a:	4d1c      	ldr	r5, [pc, #112]	; (47fc <mem_manage_fault.isra.0+0xb0>)
    478c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    478e:	079a      	lsls	r2, r3, #30
    4790:	d512      	bpl.n	47b8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    4792:	f044 0801 	orr.w	r8, r4, #1
    4796:	4641      	mov	r1, r8
    4798:	481c      	ldr	r0, [pc, #112]	; (480c <mem_manage_fault.isra.0+0xc0>)
    479a:	f01e ff1d 	bl	235d8 <log_0>
		uint32_t temp = SCB->MMFAR;
    479e:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    47a0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47a2:	061b      	lsls	r3, r3, #24
    47a4:	d508      	bpl.n	47b8 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    47a6:	481a      	ldr	r0, [pc, #104]	; (4810 <mem_manage_fault.isra.0+0xc4>)
    47a8:	4642      	mov	r2, r8
    47aa:	f01e ff22 	bl	235f2 <log_1>
			if (from_hard_fault) {
    47ae:	b11f      	cbz	r7, 47b8 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    47b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    47b6:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    47b8:	4d10      	ldr	r5, [pc, #64]	; (47fc <mem_manage_fault.isra.0+0xb0>)
    47ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    47bc:	07d0      	lsls	r0, r2, #31
    47be:	d504      	bpl.n	47ca <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    47c0:	4814      	ldr	r0, [pc, #80]	; (4814 <mem_manage_fault.isra.0+0xc8>)
    47c2:	f044 0101 	orr.w	r1, r4, #1
    47c6:	f01e ff07 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    47ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    47cc:	0699      	lsls	r1, r3, #26
    47ce:	d504      	bpl.n	47da <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    47d0:	4811      	ldr	r0, [pc, #68]	; (4818 <mem_manage_fault.isra.0+0xcc>)
    47d2:	f044 0101 	orr.w	r1, r4, #1
    47d6:	f01e feff 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    47da:	4b08      	ldr	r3, [pc, #32]	; (47fc <mem_manage_fault.isra.0+0xb0>)
    47dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    47de:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    47e0:	bf58      	it	pl
    47e2:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    47e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    47e6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    47e8:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    47ec:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    47ee:	7030      	strb	r0, [r6, #0]
}
    47f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    47f4:	0002bf50 	.word	0x0002bf50
    47f8:	0002c080 	.word	0x0002c080
    47fc:	e000ed00 	.word	0xe000ed00
    4800:	0002e490 	.word	0x0002e490
    4804:	0002e4a6 	.word	0x0002e4a6
    4808:	0002e4d9 	.word	0x0002e4d9
    480c:	0002e4ec 	.word	0x0002e4ec
    4810:	0002e504 	.word	0x0002e504
    4814:	0002e51a 	.word	0x0002e51a
    4818:	0002e539 	.word	0x0002e539

0000481c <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4820:	4b2a      	ldr	r3, [pc, #168]	; (48cc <bus_fault.isra.0+0xb0>)
    4822:	4c2b      	ldr	r4, [pc, #172]	; (48d0 <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4824:	4d2b      	ldr	r5, [pc, #172]	; (48d4 <bus_fault.isra.0+0xb8>)
    4826:	1ae4      	subs	r4, r4, r3
    4828:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    482a:	01a4      	lsls	r4, r4, #6
    482c:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4830:	4607      	mov	r7, r0
    4832:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    4834:	4828      	ldr	r0, [pc, #160]	; (48d8 <bus_fault.isra.0+0xbc>)
    4836:	4641      	mov	r1, r8
    4838:	f01e fece 	bl	235d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    483c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    483e:	04d1      	lsls	r1, r2, #19
    4840:	d503      	bpl.n	484a <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    4842:	4826      	ldr	r0, [pc, #152]	; (48dc <bus_fault.isra.0+0xc0>)
    4844:	4641      	mov	r1, r8
    4846:	f01e fec7 	bl	235d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    484a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    484c:	051a      	lsls	r2, r3, #20
    484e:	d504      	bpl.n	485a <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    4850:	4823      	ldr	r0, [pc, #140]	; (48e0 <bus_fault.isra.0+0xc4>)
    4852:	f044 0101 	orr.w	r1, r4, #1
    4856:	f01e febf 	bl	235d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    485a:	4d1e      	ldr	r5, [pc, #120]	; (48d4 <bus_fault.isra.0+0xb8>)
    485c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    485e:	059b      	lsls	r3, r3, #22
    4860:	d512      	bpl.n	4888 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    4862:	f044 0801 	orr.w	r8, r4, #1
    4866:	481f      	ldr	r0, [pc, #124]	; (48e4 <bus_fault.isra.0+0xc8>)
    4868:	4641      	mov	r1, r8
    486a:	f01e feb5 	bl	235d8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    486e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4870:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4872:	0418      	lsls	r0, r3, #16
    4874:	d508      	bpl.n	4888 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4876:	481c      	ldr	r0, [pc, #112]	; (48e8 <bus_fault.isra.0+0xcc>)
    4878:	4642      	mov	r2, r8
    487a:	f01e feba 	bl	235f2 <log_1>
			if (from_hard_fault) {
    487e:	b11f      	cbz	r7, 4888 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4880:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4882:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4886:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4888:	4d12      	ldr	r5, [pc, #72]	; (48d4 <bus_fault.isra.0+0xb8>)
    488a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    488c:	0559      	lsls	r1, r3, #21
    488e:	d504      	bpl.n	489a <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    4890:	4816      	ldr	r0, [pc, #88]	; (48ec <bus_fault.isra.0+0xd0>)
    4892:	f044 0101 	orr.w	r1, r4, #1
    4896:	f01e fe9f 	bl	235d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    489a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    489c:	05da      	lsls	r2, r3, #23
    489e:	d50d      	bpl.n	48bc <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    48a0:	4813      	ldr	r0, [pc, #76]	; (48f0 <bus_fault.isra.0+0xd4>)
    48a2:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    48a6:	f01e fe97 	bl	235d8 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    48aa:	4a0a      	ldr	r2, [pc, #40]	; (48d4 <bus_fault.isra.0+0xb8>)
    48ac:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    48ae:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    48b0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    48b4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    48b6:	7030      	strb	r0, [r6, #0]
}
    48b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    48bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    48be:	049b      	lsls	r3, r3, #18
    48c0:	d5f3      	bpl.n	48aa <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    48c2:	480c      	ldr	r0, [pc, #48]	; (48f4 <bus_fault.isra.0+0xd8>)
    48c4:	f044 0101 	orr.w	r1, r4, #1
    48c8:	e7ed      	b.n	48a6 <bus_fault.isra.0+0x8a>
    48ca:	bf00      	nop
    48cc:	0002bf50 	.word	0x0002bf50
    48d0:	0002c080 	.word	0x0002c080
    48d4:	e000ed00 	.word	0xe000ed00
    48d8:	0002e568 	.word	0x0002e568
    48dc:	0002e57e 	.word	0x0002e57e
    48e0:	0002e4d9 	.word	0x0002e4d9
    48e4:	0002e58f 	.word	0x0002e58f
    48e8:	0002e5a8 	.word	0x0002e5a8
    48ec:	0002e5bd 	.word	0x0002e5bd
    48f0:	0002e5d8 	.word	0x0002e5d8
    48f4:	0002e539 	.word	0x0002e539

000048f8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    48f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48fc:	460d      	mov	r5, r1
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    48fe:	495a      	ldr	r1, [pc, #360]	; (4a68 <z_arm_fault+0x170>)
    4900:	684f      	ldr	r7, [r1, #4]
{
    4902:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4904:	f3c7 0408 	ubfx	r4, r7, #0, #9
    4908:	2600      	movs	r6, #0
    490a:	f386 8811 	msr	BASEPRI, r6
    490e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4912:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    4916:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    491a:	d10d      	bne.n	4938 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    491c:	f002 010c 	and.w	r1, r2, #12
    4920:	2908      	cmp	r1, #8
    4922:	d10b      	bne.n	493c <z_arm_fault+0x44>
    4924:	4951      	ldr	r1, [pc, #324]	; (4a6c <z_arm_fault+0x174>)
    4926:	4b52      	ldr	r3, [pc, #328]	; (4a70 <z_arm_fault+0x178>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4928:	4852      	ldr	r0, [pc, #328]	; (4a74 <z_arm_fault+0x17c>)
    492a:	1ac9      	subs	r1, r1, r3
    492c:	08c9      	lsrs	r1, r1, #3
    492e:	0189      	lsls	r1, r1, #6
    4930:	f041 0101 	orr.w	r1, r1, #1
    4934:	f01e fe50 	bl	235d8 <log_0>
		return NULL;
    4938:	4635      	mov	r5, r6
    493a:	e003      	b.n	4944 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    493c:	0712      	lsls	r2, r2, #28
    493e:	d401      	bmi.n	4944 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    4940:	4605      	mov	r5, r0
			*nested_exc = true;
    4942:	2601      	movs	r6, #1
	*recoverable = false;
    4944:	2300      	movs	r3, #0
    4946:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    494a:	1ee3      	subs	r3, r4, #3
    494c:	2b09      	cmp	r3, #9
    494e:	d871      	bhi.n	4a34 <z_arm_fault+0x13c>
    4950:	e8df f003 	tbb	[pc, r3]
    4954:	3c635f05 	.word	0x3c635f05
    4958:	70707070 	.word	0x70707070
    495c:	6770      	.short	0x6770
    495e:	4b44      	ldr	r3, [pc, #272]	; (4a70 <z_arm_fault+0x178>)
    4960:	4f42      	ldr	r7, [pc, #264]	; (4a6c <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    4962:	4845      	ldr	r0, [pc, #276]	; (4a78 <z_arm_fault+0x180>)
    4964:	1aff      	subs	r7, r7, r3
    4966:	08ff      	lsrs	r7, r7, #3
    4968:	01bf      	lsls	r7, r7, #6
    496a:	f047 0701 	orr.w	r7, r7, #1
    496e:	4639      	mov	r1, r7
    4970:	f01e fe32 	bl	235d8 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4974:	4b3c      	ldr	r3, [pc, #240]	; (4a68 <z_arm_fault+0x170>)
    4976:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    4978:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    497c:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    4980:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4984:	d005      	beq.n	4992 <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    4986:	483d      	ldr	r0, [pc, #244]	; (4a7c <z_arm_fault+0x184>)
    4988:	4639      	mov	r1, r7
	PR_FAULT_INFO(
    498a:	f01e fe25 	bl	235d8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    498e:	2400      	movs	r4, #0
}
    4990:	e01f      	b.n	49d2 <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4994:	005b      	lsls	r3, r3, #1
    4996:	d51c      	bpl.n	49d2 <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    4998:	4839      	ldr	r0, [pc, #228]	; (4a80 <z_arm_fault+0x188>)
    499a:	4639      	mov	r1, r7
    499c:	f01e fe1c 	bl	235d8 <log_0>
		if (SCB_MMFSR != 0) {
    49a0:	4b38      	ldr	r3, [pc, #224]	; (4a84 <z_arm_fault+0x18c>)
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b12b      	cbz	r3, 49b2 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    49a6:	f10d 0107 	add.w	r1, sp, #7
    49aa:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    49ac:	f7ff fece 	bl	474c <mem_manage_fault.isra.0>
    49b0:	e00e      	b.n	49d0 <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    49b2:	4b35      	ldr	r3, [pc, #212]	; (4a88 <z_arm_fault+0x190>)
    49b4:	781b      	ldrb	r3, [r3, #0]
    49b6:	b12b      	cbz	r3, 49c4 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    49b8:	f10d 0107 	add.w	r1, sp, #7
    49bc:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    49be:	f7ff ff2d 	bl	481c <bus_fault.isra.0>
    49c2:	e005      	b.n	49d0 <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    49c4:	4b31      	ldr	r3, [pc, #196]	; (4a8c <z_arm_fault+0x194>)
    49c6:	881b      	ldrh	r3, [r3, #0]
    49c8:	b29b      	uxth	r3, r3
    49ca:	b113      	cbz	r3, 49d2 <z_arm_fault+0xda>
			reason = usage_fault(esf);
    49cc:	f7ff fe62 	bl	4694 <usage_fault.isra.0>
    49d0:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    49d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    49d6:	b9cb      	cbnz	r3, 4a0c <z_arm_fault+0x114>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    49d8:	462b      	mov	r3, r5
    49da:	f103 0720 	add.w	r7, r3, #32
    49de:	ad02      	add	r5, sp, #8
    49e0:	6818      	ldr	r0, [r3, #0]
    49e2:	6859      	ldr	r1, [r3, #4]
    49e4:	462a      	mov	r2, r5
    49e6:	c203      	stmia	r2!, {r0, r1}
    49e8:	3308      	adds	r3, #8
    49ea:	42bb      	cmp	r3, r7
    49ec:	4615      	mov	r5, r2
    49ee:	d1f7      	bne.n	49e0 <z_arm_fault+0xe8>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    49f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    49f2:	b39e      	cbz	r6, 4a5c <z_arm_fault+0x164>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    49f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    49f8:	b922      	cbnz	r2, 4a04 <z_arm_fault+0x10c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    49fa:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    49fe:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4a02:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    4a04:	a902      	add	r1, sp, #8
    4a06:	4620      	mov	r0, r4
    4a08:	f7ff fda4 	bl	4554 <z_arm_fatal_error>
}
    4a0c:	b00a      	add	sp, #40	; 0x28
    4a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    4a12:	f10d 0107 	add.w	r1, sp, #7
    4a16:	2000      	movs	r0, #0
    4a18:	e7c8      	b.n	49ac <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    4a1a:	f10d 0107 	add.w	r1, sp, #7
    4a1e:	2000      	movs	r0, #0
    4a20:	e7cd      	b.n	49be <z_arm_fault+0xc6>
    4a22:	4912      	ldr	r1, [pc, #72]	; (4a6c <z_arm_fault+0x174>)
    4a24:	4b12      	ldr	r3, [pc, #72]	; (4a70 <z_arm_fault+0x178>)
	PR_FAULT_INFO(
    4a26:	481a      	ldr	r0, [pc, #104]	; (4a90 <z_arm_fault+0x198>)
    4a28:	1ac9      	subs	r1, r1, r3
    4a2a:	08c9      	lsrs	r1, r1, #3
    4a2c:	0189      	lsls	r1, r1, #6
    4a2e:	f041 0101 	orr.w	r1, r1, #1
    4a32:	e7aa      	b.n	498a <z_arm_fault+0x92>
    4a34:	4a0e      	ldr	r2, [pc, #56]	; (4a70 <z_arm_fault+0x178>)
    4a36:	4b0d      	ldr	r3, [pc, #52]	; (4a6c <z_arm_fault+0x174>)
	PR_FAULT_INFO("***** %s %d) *****",
    4a38:	4816      	ldr	r0, [pc, #88]	; (4a94 <z_arm_fault+0x19c>)
    4a3a:	4917      	ldr	r1, [pc, #92]	; (4a98 <z_arm_fault+0x1a0>)
    4a3c:	1a9b      	subs	r3, r3, r2
    4a3e:	08db      	lsrs	r3, r3, #3
    4a40:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    4a44:	ea4f 1383 	mov.w	r3, r3, lsl #6
    4a48:	bf18      	it	ne
    4a4a:	4601      	movne	r1, r0
    4a4c:	f043 0301 	orr.w	r3, r3, #1
    4a50:	4812      	ldr	r0, [pc, #72]	; (4a9c <z_arm_fault+0x1a4>)
    4a52:	f1a4 0210 	sub.w	r2, r4, #16
    4a56:	f01e fde0 	bl	2361a <log_2>
    4a5a:	e798      	b.n	498e <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4a5c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4a60:	f023 0301 	bic.w	r3, r3, #1
    4a64:	e7cd      	b.n	4a02 <z_arm_fault+0x10a>
    4a66:	bf00      	nop
    4a68:	e000ed00 	.word	0xe000ed00
    4a6c:	0002c080 	.word	0x0002c080
    4a70:	0002bf50 	.word	0x0002bf50
    4a74:	0002e5f0 	.word	0x0002e5f0
    4a78:	0002e61b 	.word	0x0002e61b
    4a7c:	0002e632 	.word	0x0002e632
    4a80:	0002e653 	.word	0x0002e653
    4a84:	e000ed28 	.word	0xe000ed28
    4a88:	e000ed29 	.word	0xe000ed29
    4a8c:	e000ed2a 	.word	0xe000ed2a
    4a90:	0002e672 	.word	0x0002e672
    4a94:	0002e6bd 	.word	0x0002e6bd
    4a98:	0002e6a8 	.word	0x0002e6a8
    4a9c:	0002e6d6 	.word	0x0002e6d6

00004aa0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4aa0:	4a02      	ldr	r2, [pc, #8]	; (4aac <z_arm_fault_init+0xc>)
    4aa2:	6953      	ldr	r3, [r2, #20]
    4aa4:	f043 0310 	orr.w	r3, r3, #16
    4aa8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4aaa:	4770      	bx	lr
    4aac:	e000ed00 	.word	0xe000ed00

00004ab0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4ab0:	4b04      	ldr	r3, [pc, #16]	; (4ac4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4ab2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4ab4:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    4ab6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4ab8:	d003      	beq.n	4ac2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4aba:	4903      	ldr	r1, [pc, #12]	; (4ac8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4ac0:	600a      	str	r2, [r1, #0]

00004ac2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4ac2:	4770      	bx	lr
	ldr r3, =_kernel
    4ac4:	20004044 	.word	0x20004044
	ldr r1, =_SCS_ICSR
    4ac8:	e000ed04 	.word	0xe000ed04

00004acc <z_arm_interrupt_init>:
    4acc:	4804      	ldr	r0, [pc, #16]	; (4ae0 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4ace:	2300      	movs	r3, #0
    4ad0:	2120      	movs	r1, #32
    4ad2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4ad4:	3301      	adds	r3, #1
    4ad6:	2b27      	cmp	r3, #39	; 0x27
    4ad8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    4adc:	d1f9      	bne.n	4ad2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    4ade:	4770      	bx	lr
    4ae0:	e000e100 	.word	0xe000e100

00004ae4 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4ae4:	b508      	push	{r3, lr}
	if (_current == thread) {
    4ae6:	4b0e      	ldr	r3, [pc, #56]	; (4b20 <z_impl_k_thread_abort+0x3c>)
    4ae8:	689b      	ldr	r3, [r3, #8]
    4aea:	4283      	cmp	r3, r0
    4aec:	d107      	bne.n	4afe <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4aee:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4af2:	b193      	cbz	r3, 4b1a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4af4:	4a0b      	ldr	r2, [pc, #44]	; (4b24 <z_impl_k_thread_abort+0x40>)
    4af6:	6853      	ldr	r3, [r2, #4]
    4af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4afc:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    4afe:	f01b f8eb 	bl	1fcd8 <z_thread_single_abort>
	__asm__ volatile(
    4b02:	f04f 0320 	mov.w	r3, #32
    4b06:	f3ef 8011 	mrs	r0, BASEPRI
    4b0a:	f383 8811 	msr	BASEPRI, r3
    4b0e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    4b12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    4b16:	f026 ba8d 	b.w	2b034 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    4b1a:	f01b fbd5 	bl	202c8 <z_self_abort>
    4b1e:	bf00      	nop
    4b20:	20004044 	.word	0x20004044
    4b24:	e000ed00 	.word	0xe000ed00

00004b28 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4b28:	4b02      	ldr	r3, [pc, #8]	; (4b34 <z_arm_configure_static_mpu_regions+0xc>)
    4b2a:	4a03      	ldr	r2, [pc, #12]	; (4b38 <z_arm_configure_static_mpu_regions+0x10>)
    4b2c:	4803      	ldr	r0, [pc, #12]	; (4b3c <z_arm_configure_static_mpu_regions+0x14>)
    4b2e:	2101      	movs	r1, #1
    4b30:	f000 b8a2 	b.w	4c78 <arm_core_mpu_configure_static_mpu_regions>
    4b34:	20010000 	.word	0x20010000
    4b38:	20000000 	.word	0x20000000
    4b3c:	0002c200 	.word	0x0002c200

00004b40 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4b42:	4f28      	ldr	r7, [pc, #160]	; (4be4 <mpu_configure_regions+0xa4>)
    4b44:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    4b46:	2100      	movs	r1, #0
    4b48:	42b1      	cmp	r1, r6
    4b4a:	da14      	bge.n	4b76 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    4b4c:	6844      	ldr	r4, [r0, #4]
    4b4e:	2c00      	cmp	r4, #0
    4b50:	d045      	beq.n	4bde <mpu_configure_regions+0x9e>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4b52:	b1c3      	cbz	r3, 4b86 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4b54:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4b58:	ea14 0f0c 	tst.w	r4, ip
    4b5c:	d00d      	beq.n	4b7a <mpu_configure_regions+0x3a>
    4b5e:	4a22      	ldr	r2, [pc, #136]	; (4be8 <mpu_configure_regions+0xa8>)
    4b60:	4b22      	ldr	r3, [pc, #136]	; (4bec <mpu_configure_regions+0xac>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4b62:	4823      	ldr	r0, [pc, #140]	; (4bf0 <mpu_configure_regions+0xb0>)
    4b64:	1ad2      	subs	r2, r2, r3
    4b66:	08d2      	lsrs	r2, r2, #3
    4b68:	0192      	lsls	r2, r2, #6
    4b6a:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4b6e:	f01e fd40 	bl	235f2 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4b72:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4b76:	4610      	mov	r0, r2
    4b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    4b7a:	2c1f      	cmp	r4, #31
    4b7c:	d9ef      	bls.n	4b5e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    4b7e:	6805      	ldr	r5, [r0, #0]
		&&
    4b80:	ea1c 0f05 	tst.w	ip, r5
    4b84:	d1eb      	bne.n	4b5e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4b86:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4b88:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    4b8a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    4b8e:	6802      	ldr	r2, [r0, #0]
    4b90:	d916      	bls.n	4bc0 <mpu_configure_regions+0x80>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    4b92:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4b96:	d815      	bhi.n	4bc4 <mpu_configure_regions+0x84>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4b98:	3c01      	subs	r4, #1
    4b9a:	fab4 f484 	clz	r4, r4
    4b9e:	f1c4 041f 	rsb	r4, r4, #31
    4ba2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4ba4:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4ba6:	ea4c 0404 	orr.w	r4, ip, r4
    4baa:	d90d      	bls.n	4bc8 <mpu_configure_regions+0x88>
    4bac:	4a0e      	ldr	r2, [pc, #56]	; (4be8 <mpu_configure_regions+0xa8>)
    4bae:	4b0f      	ldr	r3, [pc, #60]	; (4bec <mpu_configure_regions+0xac>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4bb0:	4810      	ldr	r0, [pc, #64]	; (4bf4 <mpu_configure_regions+0xb4>)
    4bb2:	1ad2      	subs	r2, r2, r3
    4bb4:	08d2      	lsrs	r2, r2, #3
    4bb6:	0192      	lsls	r2, r2, #6
    4bb8:	f042 0201 	orr.w	r2, r2, #1
    4bbc:	4629      	mov	r1, r5
    4bbe:	e7d6      	b.n	4b6e <mpu_configure_regions+0x2e>
		return REGION_32B;
    4bc0:	2408      	movs	r4, #8
    4bc2:	e7ef      	b.n	4ba4 <mpu_configure_regions+0x64>
		return REGION_4G;
    4bc4:	243e      	movs	r4, #62	; 0x3e
    4bc6:	e7ed      	b.n	4ba4 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4bc8:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4bcc:	432a      	orrs	r2, r5
    4bce:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4bd2:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    4bd6:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4bd8:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4bda:	613c      	str	r4, [r7, #16]
		reg_index++;
    4bdc:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4bde:	3101      	adds	r1, #1
    4be0:	300c      	adds	r0, #12
    4be2:	e7b1      	b.n	4b48 <mpu_configure_regions+0x8>
    4be4:	e000ed90 	.word	0xe000ed90
    4be8:	0002c070 	.word	0x0002c070
    4bec:	0002bf50 	.word	0x0002bf50
    4bf0:	0002e6ed 	.word	0x0002e6ed
    4bf4:	0002e710 	.word	0x0002e710

00004bf8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4bf8:	4b03      	ldr	r3, [pc, #12]	; (4c08 <arm_core_mpu_enable+0x10>)
    4bfa:	2205      	movs	r2, #5
    4bfc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c02:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4c06:	4770      	bx	lr
    4c08:	e000ed90 	.word	0xe000ed90

00004c0c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    4c0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4c10:	4b01      	ldr	r3, [pc, #4]	; (4c18 <arm_core_mpu_disable+0xc>)
    4c12:	2200      	movs	r2, #0
    4c14:	605a      	str	r2, [r3, #4]
}
    4c16:	4770      	bx	lr
    4c18:	e000ed90 	.word	0xe000ed90

00004c1c <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4c1c:	4913      	ldr	r1, [pc, #76]	; (4c6c <arm_mpu_init+0x50>)
    4c1e:	6808      	ldr	r0, [r1, #0]
    4c20:	2808      	cmp	r0, #8
{
    4c22:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4c24:	d81e      	bhi.n	4c64 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4c26:	f7ff fff1 	bl	4c0c <arm_core_mpu_disable>
	MPU->RNR = index;
    4c2a:	4c11      	ldr	r4, [pc, #68]	; (4c70 <arm_mpu_init+0x54>)
    4c2c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4c2e:	2200      	movs	r2, #0
    4c30:	4290      	cmp	r0, r2
    4c32:	f101 010c 	add.w	r1, r1, #12
    4c36:	d105      	bne.n	4c44 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4c38:	4b0e      	ldr	r3, [pc, #56]	; (4c74 <arm_mpu_init+0x58>)
    4c3a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4c3c:	f7ff ffdc 	bl	4bf8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    4c40:	2000      	movs	r0, #0
}
    4c42:	bd10      	pop	{r4, pc}
    4c44:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c46:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4c4a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4c4e:	4313      	orrs	r3, r2
    4c50:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4c54:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4c5a:	f043 0301 	orr.w	r3, r3, #1
    4c5e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4c60:	3201      	adds	r2, #1
    4c62:	e7e5      	b.n	4c30 <arm_mpu_init+0x14>
		return -1;
    4c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4c68:	e7eb      	b.n	4c42 <arm_mpu_init+0x26>
    4c6a:	bf00      	nop
    4c6c:	0002c20c 	.word	0x0002c20c
    4c70:	e000ed90 	.word	0xe000ed90
    4c74:	2000853e 	.word	0x2000853e

00004c78 <arm_core_mpu_configure_static_mpu_regions>:
{
    4c78:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4c7a:	4c03      	ldr	r4, [pc, #12]	; (4c88 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4c7c:	2301      	movs	r3, #1
    4c7e:	7822      	ldrb	r2, [r4, #0]
    4c80:	f7ff ff5e 	bl	4b40 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4c84:	7020      	strb	r0, [r4, #0]
}
    4c86:	bd10      	pop	{r4, pc}
    4c88:	2000853e 	.word	0x2000853e

00004c8c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    4c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c8e:	4f0a      	ldr	r7, [pc, #40]	; (4cb8 <z_impl_zephyr_write_stdout+0x2c>)
    4c90:	460d      	mov	r5, r1
    4c92:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    4c94:	f1c0 0401 	rsb	r4, r0, #1
    4c98:	19a3      	adds	r3, r4, r6
    4c9a:	429d      	cmp	r5, r3
    4c9c:	dc01      	bgt.n	4ca2 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    4c9e:	4628      	mov	r0, r5
    4ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    4ca2:	7873      	ldrb	r3, [r6, #1]
    4ca4:	2b0a      	cmp	r3, #10
    4ca6:	d102      	bne.n	4cae <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    4ca8:	683b      	ldr	r3, [r7, #0]
    4caa:	200d      	movs	r0, #13
    4cac:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    4cae:	683b      	ldr	r3, [r7, #0]
    4cb0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    4cb4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    4cb6:	e7ef      	b.n	4c98 <z_impl_zephyr_write_stdout+0xc>
    4cb8:	20000344 	.word	0x20000344

00004cbc <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(intptr_t count)
{
    4cbc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	/* coverity[CHECKED_RETURN] */
	sys_sem_take(&heap_sem, K_FOREVER);
    4cbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
    4cc2:	4604      	mov	r4, r0
	sys_sem_take(&heap_sem, K_FOREVER);
    4cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4cc8:	480a      	ldr	r0, [pc, #40]	; (4cf4 <_sbrk+0x38>)
    4cca:	f01e f95f 	bl	22f8c <sys_sem_take>
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4cce:	490a      	ldr	r1, [pc, #40]	; (4cf8 <_sbrk+0x3c>)
    4cd0:	680b      	ldr	r3, [r1, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    4cd2:	18e0      	adds	r0, r4, r3
    4cd4:	4c09      	ldr	r4, [pc, #36]	; (4cfc <_sbrk+0x40>)
    4cd6:	f1c4 5200 	rsb	r2, r4, #536870912	; 0x20000000
    4cda:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
    4cde:	4290      	cmp	r0, r2
	ptr = ((char *)HEAP_BASE) + heap_sz;
    4ce0:	bf3a      	itte	cc
    4ce2:	18e4      	addcc	r4, r4, r3
		heap_sz += count;
    4ce4:	6008      	strcc	r0, [r1, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
    4ce6:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
	}

	/* coverity[CHECKED_RETURN] */
	sys_sem_give(&heap_sem);
    4cea:	4802      	ldr	r0, [pc, #8]	; (4cf4 <_sbrk+0x38>)
    4cec:	f01e f949 	bl	22f82 <sys_sem_give>

	return ret;
}
    4cf0:	4620      	mov	r0, r4
    4cf2:	bd10      	pop	{r4, pc}
    4cf4:	20000bc8 	.word	0x20000bc8
    4cf8:	20001734 	.word	0x20001734
    4cfc:	2000b7a4 	.word	0x2000b7a4

00004d00 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    4d00:	b508      	push	{r3, lr}
	return z_impl_zephyr_write_stdout(buf, nbytes);
    4d02:	211d      	movs	r1, #29
    4d04:	4804      	ldr	r0, [pc, #16]	; (4d18 <__chk_fail+0x18>)
    4d06:	f7ff ffc1 	bl	4c8c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    4d0a:	4040      	eors	r0, r0
    4d0c:	f380 8811 	msr	BASEPRI, r0
    4d10:	f04f 0003 	mov.w	r0, #3
    4d14:	df02      	svc	2
	CODE_UNREACHABLE;
    4d16:	bf00      	nop
    4d18:	0002e736 	.word	0x0002e736

00004d1c <lvgl_log>:
#endif /* CONFIG_LVGL_BUFFER_ALLOC_STATIC */

#if CONFIG_LVGL_LOG_LEVEL != 0
static void lvgl_log(lv_log_level_t level, const char *file, uint32_t line,
		const char *func, const char *dsc)
{
    4d1c:	4601      	mov	r1, r0
	 * * LOG_LEVEL_ERR 1
	 * * LOG_LEVEL_WRN 2
	 * * LOG_LEVEL_INF 3
	 * * LOG_LEVEL_DBG 4
	 */
	uint8_t zephyr_level = LOG_LEVEL_DBG - level;
    4d1e:	f1c1 0104 	rsb	r1, r1, #4
    4d22:	b2c9      	uxtb	r1, r1
{
    4d24:	b510      	push	{r4, lr}

	ARG_UNUSED(file);
	ARG_UNUSED(line);
	ARG_UNUSED(func);

	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4d26:	2903      	cmp	r1, #3
{
    4d28:	9802      	ldr	r0, [sp, #8]
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4d2a:	d81c      	bhi.n	4d66 <lvgl_log+0x4a>
    4d2c:	4b0e      	ldr	r3, [pc, #56]	; (4d68 <lvgl_log+0x4c>)
    4d2e:	4a0f      	ldr	r2, [pc, #60]	; (4d6c <lvgl_log+0x50>)
    4d30:	1a9b      	subs	r3, r3, r2
    4d32:	08db      	lsrs	r3, r3, #3
    4d34:	f001 0407 	and.w	r4, r1, #7
    4d38:	2904      	cmp	r1, #4
    4d3a:	ea44 1483 	orr.w	r4, r4, r3, lsl #6
    4d3e:	d109      	bne.n	4d54 <lvgl_log+0x38>
    4d40:	f7fd ff1a 	bl	2b78 <log_strdup>
    4d44:	4623      	mov	r3, r4
    4d46:	4602      	mov	r2, r0
}
    4d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4d4c:	4908      	ldr	r1, [pc, #32]	; (4d70 <lvgl_log+0x54>)
    4d4e:	4809      	ldr	r0, [pc, #36]	; (4d74 <lvgl_log+0x58>)
    4d50:	f01e bc63 	b.w	2361a <log_2>
    4d54:	f7fd ff10 	bl	2b78 <log_strdup>
    4d58:	4622      	mov	r2, r4
    4d5a:	4601      	mov	r1, r0
}
    4d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Z_LOG(zephyr_level, "%s", log_strdup(dsc));
    4d60:	4805      	ldr	r0, [pc, #20]	; (4d78 <lvgl_log+0x5c>)
    4d62:	f01e bc46 	b.w	235f2 <log_1>
}
    4d66:	bd10      	pop	{r4, pc}
    4d68:	0002c068 	.word	0x0002c068
    4d6c:	0002bf50 	.word	0x0002bf50
    4d70:	0002e80c 	.word	0x0002e80c
    4d74:	0002e754 	.word	0x0002e754
    4d78:	0002dece 	.word	0x0002dece

00004d7c <lvgl_init>:
	return 0;
}
#endif /* CONFIG_LVGL_POINTER_KSCAN */

static int lvgl_init(const struct device *dev)
{
    4d7c:	b510      	push	{r4, lr}
    4d7e:	b090      	sub	sp, #64	; 0x40
    4d80:	483b      	ldr	r0, [pc, #236]	; (4e70 <lvgl_init+0xf4>)
    4d82:	f01a facb 	bl	1f31c <z_impl_device_get_binding>
	const struct device *display_dev =
		device_get_binding(CONFIG_LVGL_DISPLAY_DEV_NAME);
	int err = 0;
	lv_disp_drv_t disp_drv;

	if (display_dev == NULL) {
    4d86:	4604      	mov	r4, r0
    4d88:	b970      	cbnz	r0, 4da8 <lvgl_init+0x2c>
    4d8a:	4b3a      	ldr	r3, [pc, #232]	; (4e74 <lvgl_init+0xf8>)
    4d8c:	493a      	ldr	r1, [pc, #232]	; (4e78 <lvgl_init+0xfc>)
		LOG_ERR("Display device not found.");
    4d8e:	483b      	ldr	r0, [pc, #236]	; (4e7c <lvgl_init+0x100>)
    4d90:	1ac9      	subs	r1, r1, r3
    4d92:	08c9      	lsrs	r1, r1, #3
    4d94:	0189      	lsls	r1, r1, #6
    4d96:	f041 0101 	orr.w	r1, r1, #1
    4d9a:	f01e fc1d 	bl	235d8 <log_0>
		return -ENODEV;
    4d9e:	f06f 0412 	mvn.w	r4, #18
#ifdef CONFIG_LVGL_POINTER_KSCAN
	lvgl_pointer_kscan_init();
#endif /* CONFIG_LVGL_POINTER_KSCAN */

	return 0;
}
    4da2:	4620      	mov	r0, r4
    4da4:	b010      	add	sp, #64	; 0x40
    4da6:	bd10      	pop	{r4, pc}
	lv_log_register_print_cb(lvgl_log);
    4da8:	4835      	ldr	r0, [pc, #212]	; (4e80 <lvgl_init+0x104>)
    4daa:	f018 fba3 	bl	1d4f4 <lv_log_register_print_cb>
	lv_init();
    4dae:	f015 f999 	bl	1a0e4 <lv_init>
	lv_disp_drv_init(&disp_drv);
    4db2:	a804      	add	r0, sp, #16
    4db4:	f025 f8a9 	bl	29f0a <lv_disp_drv_init>
					    capabilities)
{
	struct display_driver_api *api =
		(struct display_driver_api *)dev->api;

	api->get_capabilities(dev, capabilities);
    4db8:	68a3      	ldr	r3, [r4, #8]
	disp_drv.user_data = (void *) display_dev;
    4dba:	940f      	str	r4, [sp, #60]	; 0x3c
    4dbc:	69db      	ldr	r3, [r3, #28]
    4dbe:	4669      	mov	r1, sp
    4dc0:	4620      	mov	r0, r4
    4dc2:	4798      	blx	r3
	if (cap.x_resolution <= CONFIG_LVGL_HOR_RES_MAX) {
    4dc4:	f8bd 3000 	ldrh.w	r3, [sp]
    4dc8:	2bf0      	cmp	r3, #240	; 0xf0
    4dca:	d824      	bhi.n	4e16 <lvgl_init+0x9a>
		disp_drv->hor_res = cap.x_resolution;
    4dcc:	f8ad 3010 	strh.w	r3, [sp, #16]
	int err = 0;
    4dd0:	2400      	movs	r4, #0
	if (cap.y_resolution <= CONFIG_LVGL_VER_RES_MAX) {
    4dd2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    4dd6:	2bf0      	cmp	r3, #240	; 0xf0
    4dd8:	d82a      	bhi.n	4e30 <lvgl_init+0xb4>
		disp_drv->ver_res = cap.y_resolution;
    4dda:	f8ad 3012 	strh.w	r3, [sp, #18]
	disp_drv->buffer = &disp_buf;
    4dde:	4829      	ldr	r0, [pc, #164]	; (4e84 <lvgl_init+0x108>)
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4de0:	4929      	ldr	r1, [pc, #164]	; (4e88 <lvgl_init+0x10c>)
	disp_drv->buffer = &disp_buf;
    4de2:	9005      	str	r0, [sp, #20]
	lv_disp_buf_init(disp_drv->buffer, &buf0, NULL, NBR_PIXELS_IN_BUFFER);
    4de4:	f44f 6390 	mov.w	r3, #1152	; 0x480
    4de8:	2200      	movs	r2, #0
    4dea:	f025 f8a5 	bl	29f38 <lv_disp_buf_init>
	if (err != 0) {
    4dee:	2c00      	cmp	r4, #0
    4df0:	d1d7      	bne.n	4da2 <lvgl_init+0x26>
	if (set_lvgl_rendering_cb(&disp_drv) != 0) {
    4df2:	a804      	add	r0, sp, #16
    4df4:	f000 f852 	bl	4e9c <set_lvgl_rendering_cb>
    4df8:	4604      	mov	r4, r0
    4dfa:	b330      	cbz	r0, 4e4a <lvgl_init+0xce>
    4dfc:	4b1d      	ldr	r3, [pc, #116]	; (4e74 <lvgl_init+0xf8>)
    4dfe:	491e      	ldr	r1, [pc, #120]	; (4e78 <lvgl_init+0xfc>)
		LOG_ERR("Display not supported.");
    4e00:	4822      	ldr	r0, [pc, #136]	; (4e8c <lvgl_init+0x110>)
    4e02:	1ac9      	subs	r1, r1, r3
    4e04:	08c9      	lsrs	r1, r1, #3
    4e06:	0189      	lsls	r1, r1, #6
    4e08:	f041 0101 	orr.w	r1, r1, #1
    4e0c:	f01e fbe4 	bl	235d8 <log_0>
		return -ENOTSUP;
    4e10:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e14:	e7c5      	b.n	4da2 <lvgl_init+0x26>
    4e16:	4b17      	ldr	r3, [pc, #92]	; (4e74 <lvgl_init+0xf8>)
    4e18:	4917      	ldr	r1, [pc, #92]	; (4e78 <lvgl_init+0xfc>)
		LOG_ERR("Horizontal resolution is larger than maximum");
    4e1a:	481d      	ldr	r0, [pc, #116]	; (4e90 <lvgl_init+0x114>)
    4e1c:	1ac9      	subs	r1, r1, r3
    4e1e:	08c9      	lsrs	r1, r1, #3
    4e20:	0189      	lsls	r1, r1, #6
    4e22:	f041 0101 	orr.w	r1, r1, #1
    4e26:	f01e fbd7 	bl	235d8 <log_0>
		err = -ENOTSUP;
    4e2a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e2e:	e7d0      	b.n	4dd2 <lvgl_init+0x56>
    4e30:	4b10      	ldr	r3, [pc, #64]	; (4e74 <lvgl_init+0xf8>)
    4e32:	4911      	ldr	r1, [pc, #68]	; (4e78 <lvgl_init+0xfc>)
		LOG_ERR("Vertical resolution is larger than maximum");
    4e34:	4817      	ldr	r0, [pc, #92]	; (4e94 <lvgl_init+0x118>)
    4e36:	1ac9      	subs	r1, r1, r3
    4e38:	08c9      	lsrs	r1, r1, #3
    4e3a:	0189      	lsls	r1, r1, #6
    4e3c:	f041 0101 	orr.w	r1, r1, #1
    4e40:	f01e fbca 	bl	235d8 <log_0>
		err = -ENOTSUP;
    4e44:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e48:	e7c9      	b.n	4dde <lvgl_init+0x62>
	if (lv_disp_drv_register(&disp_drv) == NULL) {
    4e4a:	a804      	add	r0, sp, #16
    4e4c:	f018 fab4 	bl	1d3b8 <lv_disp_drv_register>
    4e50:	2800      	cmp	r0, #0
    4e52:	d1a6      	bne.n	4da2 <lvgl_init+0x26>
    4e54:	4b07      	ldr	r3, [pc, #28]	; (4e74 <lvgl_init+0xf8>)
    4e56:	4908      	ldr	r1, [pc, #32]	; (4e78 <lvgl_init+0xfc>)
		LOG_ERR("Failed to register display device.");
    4e58:	480f      	ldr	r0, [pc, #60]	; (4e98 <lvgl_init+0x11c>)
    4e5a:	1ac9      	subs	r1, r1, r3
    4e5c:	08c9      	lsrs	r1, r1, #3
    4e5e:	0189      	lsls	r1, r1, #6
    4e60:	f041 0101 	orr.w	r1, r1, #1
    4e64:	f01e fbb8 	bl	235d8 <log_0>
		return -EPERM;
    4e68:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    4e6c:	e799      	b.n	4da2 <lvgl_init+0x26>
    4e6e:	bf00      	nop
    4e70:	0002deb4 	.word	0x0002deb4
    4e74:	0002bf50 	.word	0x0002bf50
    4e78:	0002c068 	.word	0x0002c068
    4e7c:	0002e75b 	.word	0x0002e75b
    4e80:	00004d1d 	.word	0x00004d1d
    4e84:	20002938 	.word	0x20002938
    4e88:	20001738 	.word	0x20001738
    4e8c:	0002e7cd 	.word	0x0002e7cd
    4e90:	0002e775 	.word	0x0002e775
    4e94:	0002e7a2 	.word	0x0002e7a2
    4e98:	0002e7e4 	.word	0x0002e7e4

00004e9c <set_lvgl_rendering_cb>:
 */

#include "lvgl_display.h"

int set_lvgl_rendering_cb(lv_disp_drv_t *disp_drv)
{
    4e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4e9e:	4604      	mov	r4, r0
	int err = 0;
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
    4ea0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4ea2:	6883      	ldr	r3, [r0, #8]
    4ea4:	4669      	mov	r1, sp
    4ea6:	69db      	ldr	r3, [r3, #28]
    4ea8:	4798      	blx	r3
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);

	switch (cap.current_pixel_format) {
    4eaa:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4eae:	2b08      	cmp	r3, #8
    4eb0:	d80a      	bhi.n	4ec8 <set_lvgl_rendering_cb+0x2c>
    4eb2:	b16b      	cbz	r3, 4ed0 <set_lvgl_rendering_cb+0x34>
    4eb4:	3b01      	subs	r3, #1
    4eb6:	2200      	movs	r2, #0
    4eb8:	2b07      	cmp	r3, #7
    4eba:	d809      	bhi.n	4ed0 <set_lvgl_rendering_cb+0x34>
    4ebc:	e8df f003 	tbb	[pc, r3]
    4ec0:	22082217 	.word	0x22082217
    4ec4:	0f080808 	.word	0x0f080808
    4ec8:	2b10      	cmp	r3, #16
    4eca:	d015      	beq.n	4ef8 <set_lvgl_rendering_cb+0x5c>
    4ecc:	2b20      	cmp	r3, #32
    4ece:	d013      	beq.n	4ef8 <set_lvgl_rendering_cb+0x5c>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
		break;
	default:
		disp_drv->flush_cb = NULL;
    4ed0:	2300      	movs	r3, #0
		disp_drv->rounder_cb = NULL;
    4ed2:	e9c4 3303 	strd	r3, r3, [r4, #12]
		disp_drv->set_px_cb = NULL;
    4ed6:	6163      	str	r3, [r4, #20]
		err = -ENOTSUP;
    4ed8:	f06f 0085 	mvn.w	r0, #133	; 0x85
		break;

	}

	return err;
    4edc:	e005      	b.n	4eea <set_lvgl_rendering_cb+0x4e>
		disp_drv->flush_cb = lvgl_flush_cb_32bit;
    4ede:	4b0c      	ldr	r3, [pc, #48]	; (4f10 <set_lvgl_rendering_cb+0x74>)
		disp_drv->rounder_cb = NULL;
    4ee0:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_32bit;
    4ee4:	4b0b      	ldr	r3, [pc, #44]	; (4f14 <set_lvgl_rendering_cb+0x78>)
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4ee6:	6163      	str	r3, [r4, #20]
	int err = 0;
    4ee8:	2000      	movs	r0, #0
}
    4eea:	b004      	add	sp, #16
    4eec:	bd10      	pop	{r4, pc}
		disp_drv->flush_cb = lvgl_flush_cb_24bit;
    4eee:	4b0a      	ldr	r3, [pc, #40]	; (4f18 <set_lvgl_rendering_cb+0x7c>)
		disp_drv->rounder_cb = NULL;
    4ef0:	e9c4 3203 	strd	r3, r2, [r4, #12]
		disp_drv->set_px_cb = lvgl_set_px_cb_24bit;
    4ef4:	4b09      	ldr	r3, [pc, #36]	; (4f1c <set_lvgl_rendering_cb+0x80>)
    4ef6:	e7f6      	b.n	4ee6 <set_lvgl_rendering_cb+0x4a>
		disp_drv->flush_cb = lvgl_flush_cb_16bit;
    4ef8:	4b09      	ldr	r3, [pc, #36]	; (4f20 <set_lvgl_rendering_cb+0x84>)
    4efa:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = NULL;
    4efc:	2000      	movs	r0, #0
		disp_drv->set_px_cb = NULL;
    4efe:	e9c4 0004 	strd	r0, r0, [r4, #16]
		break;
    4f02:	e7f2      	b.n	4eea <set_lvgl_rendering_cb+0x4e>
		disp_drv->flush_cb = lvgl_flush_cb_mono;
    4f04:	4b07      	ldr	r3, [pc, #28]	; (4f24 <set_lvgl_rendering_cb+0x88>)
    4f06:	60e3      	str	r3, [r4, #12]
		disp_drv->rounder_cb = lvgl_rounder_cb_mono;
    4f08:	4b07      	ldr	r3, [pc, #28]	; (4f28 <set_lvgl_rendering_cb+0x8c>)
    4f0a:	6123      	str	r3, [r4, #16]
		disp_drv->set_px_cb = lvgl_set_px_cb_mono;
    4f0c:	4b07      	ldr	r3, [pc, #28]	; (4f2c <set_lvgl_rendering_cb+0x90>)
    4f0e:	e7ea      	b.n	4ee6 <set_lvgl_rendering_cb+0x4a>
    4f10:	0002458d 	.word	0x0002458d
    4f14:	000245d9 	.word	0x000245d9
    4f18:	000244e3 	.word	0x000244e3
    4f1c:	00024531 	.word	0x00024531
    4f20:	00024497 	.word	0x00024497
    4f24:	0002433d 	.word	0x0002433d
    4f28:	0002444f 	.word	0x0002444f
    4f2c:	000243b7 	.word	0x000243b7

00004f30 <nordicsemi_nrf52_init>:
    4f30:	f04f 0220 	mov.w	r2, #32
    4f34:	f3ef 8311 	mrs	r3, BASEPRI
    4f38:	f382 8811 	msr	BASEPRI, r2
    4f3c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4f40:	4a04      	ldr	r2, [pc, #16]	; (4f54 <nordicsemi_nrf52_init+0x24>)
    4f42:	2101      	movs	r1, #1
    4f44:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    4f48:	f383 8811 	msr	BASEPRI, r3
    4f4c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4f50:	2000      	movs	r0, #0
    4f52:	4770      	bx	lr
    4f54:	4001e000 	.word	0x4001e000

00004f58 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4f58:	b120      	cbz	r0, 4f64 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4f5a:	4b03      	ldr	r3, [pc, #12]	; (4f68 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4f5c:	0180      	lsls	r0, r0, #6
    4f5e:	f043 0301 	orr.w	r3, r3, #1
    4f62:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4f64:	4770      	bx	lr
    4f66:	bf00      	nop
    4f68:	0002c130 	.word	0x0002c130

00004f6c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4f6c:	4b0e      	ldr	r3, [pc, #56]	; (4fa8 <bt_hex_real+0x3c>)
    4f6e:	2940      	cmp	r1, #64	; 0x40
{
    4f70:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    4f72:	bf28      	it	cs
    4f74:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    4f76:	4c0d      	ldr	r4, [pc, #52]	; (4fac <bt_hex_real+0x40>)
    4f78:	1846      	adds	r6, r0, r1
    4f7a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    4f7c:	42b0      	cmp	r0, r6
    4f7e:	f103 0302 	add.w	r3, r3, #2
    4f82:	d104      	bne.n	4f8e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    4f84:	2300      	movs	r3, #0
    4f86:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4f8a:	4807      	ldr	r0, [pc, #28]	; (4fa8 <bt_hex_real+0x3c>)
    4f8c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4f8e:	7802      	ldrb	r2, [r0, #0]
    4f90:	0912      	lsrs	r2, r2, #4
    4f92:	5ca2      	ldrb	r2, [r4, r2]
    4f94:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4f98:	f810 2b01 	ldrb.w	r2, [r0], #1
    4f9c:	f002 020f 	and.w	r2, r2, #15
    4fa0:	5ca2      	ldrb	r2, [r4, r2]
    4fa2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    4fa6:	e7e9      	b.n	4f7c <bt_hex_real+0x10>
    4fa8:	2000853f 	.word	0x2000853f
    4fac:	0002e86d 	.word	0x0002e86d

00004fb0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4fb0:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4fb2:	7803      	ldrb	r3, [r0, #0]
    4fb4:	b08b      	sub	sp, #44	; 0x2c
    4fb6:	4604      	mov	r4, r0
    4fb8:	ad07      	add	r5, sp, #28
    4fba:	2b03      	cmp	r3, #3
    4fbc:	d821      	bhi.n	5002 <bt_addr_le_str_real+0x52>
    4fbe:	e8df f003 	tbb	[pc, r3]
    4fc2:	1a02      	.short	0x1a02
    4fc4:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4fc6:	4912      	ldr	r1, [pc, #72]	; (5010 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4fc8:	4628      	mov	r0, r5
    4fca:	f026 fbf1 	bl	2b7b0 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4fce:	7863      	ldrb	r3, [r4, #1]
    4fd0:	9304      	str	r3, [sp, #16]
    4fd2:	78a3      	ldrb	r3, [r4, #2]
    4fd4:	9303      	str	r3, [sp, #12]
    4fd6:	78e3      	ldrb	r3, [r4, #3]
    4fd8:	9302      	str	r3, [sp, #8]
    4fda:	7923      	ldrb	r3, [r4, #4]
    4fdc:	9301      	str	r3, [sp, #4]
    4fde:	7963      	ldrb	r3, [r4, #5]
    4fe0:	9300      	str	r3, [sp, #0]
    4fe2:	4a0c      	ldr	r2, [pc, #48]	; (5014 <bt_addr_le_str_real+0x64>)
    4fe4:	79a3      	ldrb	r3, [r4, #6]
    4fe6:	9505      	str	r5, [sp, #20]
    4fe8:	211e      	movs	r1, #30
    4fea:	480b      	ldr	r0, [pc, #44]	; (5018 <bt_addr_le_str_real+0x68>)
    4fec:	f01d feec 	bl	22dc8 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    4ff0:	4809      	ldr	r0, [pc, #36]	; (5018 <bt_addr_le_str_real+0x68>)
    4ff2:	b00b      	add	sp, #44	; 0x2c
    4ff4:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    4ff6:	4909      	ldr	r1, [pc, #36]	; (501c <bt_addr_le_str_real+0x6c>)
    4ff8:	e7e6      	b.n	4fc8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    4ffa:	4909      	ldr	r1, [pc, #36]	; (5020 <bt_addr_le_str_real+0x70>)
    4ffc:	e7e4      	b.n	4fc8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    4ffe:	4909      	ldr	r1, [pc, #36]	; (5024 <bt_addr_le_str_real+0x74>)
    5000:	e7e2      	b.n	4fc8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    5002:	4a09      	ldr	r2, [pc, #36]	; (5028 <bt_addr_le_str_real+0x78>)
    5004:	210a      	movs	r1, #10
    5006:	4628      	mov	r0, r5
    5008:	f01d fede 	bl	22dc8 <snprintk>
		break;
    500c:	e7df      	b.n	4fce <bt_addr_le_str_real+0x1e>
    500e:	bf00      	nop
    5010:	0002e828 	.word	0x0002e828
    5014:	0002e84a 	.word	0x0002e84a
    5018:	200085c0 	.word	0x200085c0
    501c:	0002e82f 	.word	0x0002e82f
    5020:	0002e836 	.word	0x0002e836
    5024:	0002e840 	.word	0x0002e840
    5028:	0002f546 	.word	0x0002f546

0000502c <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    502c:	b510      	push	{r4, lr}
    502e:	4b0d      	ldr	r3, [pc, #52]	; (5064 <save_id+0x38>)
    5030:	4c0d      	ldr	r4, [pc, #52]	; (5068 <save_id+0x3c>)
	int err;
	BT_INFO("Saving ID");
    5032:	480e      	ldr	r0, [pc, #56]	; (506c <save_id+0x40>)
    5034:	1ae4      	subs	r4, r4, r3
    5036:	08e4      	lsrs	r4, r4, #3
    5038:	01a4      	lsls	r4, r4, #6
    503a:	f044 0103 	orr.w	r1, r4, #3
    503e:	f01e facb 	bl	235d8 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    5042:	490b      	ldr	r1, [pc, #44]	; (5070 <save_id+0x44>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    5044:	480b      	ldr	r0, [pc, #44]	; (5074 <save_id+0x48>)
    5046:	79ca      	ldrb	r2, [r1, #7]
    5048:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    504c:	f7fe fa3e 	bl	34cc <settings_save_one>
	if (err) {
    5050:	4601      	mov	r1, r0
    5052:	b130      	cbz	r0, 5062 <save_id+0x36>
		BT_ERR("Failed to save ID (err %d)", err);
    5054:	f044 0201 	orr.w	r2, r4, #1
    5058:	4807      	ldr	r0, [pc, #28]	; (5078 <save_id+0x4c>)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    505a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Failed to save ID (err %d)", err);
    505e:	f01e bac8 	b.w	235f2 <log_1>
}
    5062:	bd10      	pop	{r4, pc}
    5064:	0002bf50 	.word	0x0002bf50
    5068:	0002c028 	.word	0x0002c028
    506c:	0002e885 	.word	0x0002e885
    5070:	20000000 	.word	0x20000000
    5074:	0002e88f 	.word	0x0002e88f
    5078:	0002e895 	.word	0x0002e895

0000507c <set>:
{
    507c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5080:	4605      	mov	r5, r0
    5082:	4617      	mov	r7, r2
    5084:	4698      	mov	r8, r3
	if (!name) {
    5086:	b960      	cbnz	r0, 50a2 <set+0x26>
    5088:	4934      	ldr	r1, [pc, #208]	; (515c <set+0xe0>)
    508a:	4b35      	ldr	r3, [pc, #212]	; (5160 <set+0xe4>)
		BT_ERR("Insufficient number of arguments");
    508c:	4835      	ldr	r0, [pc, #212]	; (5164 <set+0xe8>)
    508e:	1ac9      	subs	r1, r1, r3
    5090:	08c9      	lsrs	r1, r1, #3
    5092:	0189      	lsls	r1, r1, #6
    5094:	f041 0101 	orr.w	r1, r1, #1
    5098:	f01e fa9e 	bl	235d8 <log_0>
	return -ENOENT;
    509c:	f06f 0401 	mvn.w	r4, #1
    50a0:	e01c      	b.n	50dc <set+0x60>
	len = settings_name_next(name, &next);
    50a2:	a901      	add	r1, sp, #4
    50a4:	f01e fdaa 	bl	23bfc <settings_name_next>
	if (!strncmp(name, "id", len)) {
    50a8:	492f      	ldr	r1, [pc, #188]	; (5168 <set+0xec>)
    50aa:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    50ac:	4606      	mov	r6, r0
	if (!strncmp(name, "id", len)) {
    50ae:	4628      	mov	r0, r5
    50b0:	f026 fb86 	bl	2b7c0 <strncmp>
    50b4:	4604      	mov	r4, r0
    50b6:	bb90      	cbnz	r0, 511e <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    50b8:	f3bf 8f5b 	dmb	ish
    50bc:	4e2b      	ldr	r6, [pc, #172]	; (516c <set+0xf0>)
    50be:	6833      	ldr	r3, [r6, #0]
    50c0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    50c4:	075b      	lsls	r3, r3, #29
    50c6:	d50d      	bpl.n	50e4 <set+0x68>
    50c8:	4924      	ldr	r1, [pc, #144]	; (515c <set+0xe0>)
    50ca:	4b25      	ldr	r3, [pc, #148]	; (5160 <set+0xe4>)
			BT_WARN("Ignoring identities stored in flash");
    50cc:	4828      	ldr	r0, [pc, #160]	; (5170 <set+0xf4>)
    50ce:	1ac9      	subs	r1, r1, r3
    50d0:	08c9      	lsrs	r1, r1, #3
    50d2:	0189      	lsls	r1, r1, #6
    50d4:	f041 0102 	orr.w	r1, r1, #2
    50d8:	f01e fa7e 	bl	235d8 <log_0>
}
    50dc:	4620      	mov	r0, r4
    50de:	b002      	add	sp, #8
    50e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    50e4:	f1a6 0594 	sub.w	r5, r6, #148	; 0x94
    50e8:	2207      	movs	r2, #7
    50ea:	4629      	mov	r1, r5
    50ec:	4640      	mov	r0, r8
    50ee:	47b8      	blx	r7
		if (len < sizeof(bt_dev.id_addr[0])) {
    50f0:	2806      	cmp	r0, #6
    50f2:	d80f      	bhi.n	5114 <set+0x98>
    50f4:	4b1a      	ldr	r3, [pc, #104]	; (5160 <set+0xe4>)
    50f6:	4919      	ldr	r1, [pc, #100]	; (515c <set+0xe0>)
				BT_ERR("Invalid length ID address in storage");
    50f8:	481e      	ldr	r0, [pc, #120]	; (5174 <set+0xf8>)
    50fa:	1ac9      	subs	r1, r1, r3
    50fc:	08c9      	lsrs	r1, r1, #3
    50fe:	0189      	lsls	r1, r1, #6
    5100:	f041 0101 	orr.w	r1, r1, #1
    5104:	f01e fa68 	bl	235d8 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    5108:	f846 4c94 	str.w	r4, [r6, #-148]
			bt_dev.id_count = 0U;
    510c:	71ec      	strb	r4, [r5, #7]
			(void)memset(bt_dev.id_addr, 0,
    510e:	f8c5 4003 	str.w	r4, [r5, #3]
			bt_dev.id_count = 0U;
    5112:	e7e3      	b.n	50dc <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    5114:	2307      	movs	r3, #7
    5116:	fbb0 f0f3 	udiv	r0, r0, r3
    511a:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    511c:	e7de      	b.n	50dc <set+0x60>
	if (!strncmp(name, "name", len)) {
    511e:	4916      	ldr	r1, [pc, #88]	; (5178 <set+0xfc>)
    5120:	4632      	mov	r2, r6
    5122:	4628      	mov	r0, r5
    5124:	f026 fb4c 	bl	2b7c0 <strncmp>
    5128:	4604      	mov	r4, r0
    512a:	2800      	cmp	r0, #0
    512c:	d1b6      	bne.n	509c <set+0x20>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    512e:	4913      	ldr	r1, [pc, #76]	; (517c <set+0x100>)
    5130:	2241      	movs	r2, #65	; 0x41
    5132:	4640      	mov	r0, r8
    5134:	47b8      	blx	r7
		if (len < 0) {
    5136:	1e01      	subs	r1, r0, #0
    5138:	da0a      	bge.n	5150 <set+0xd4>
    513a:	4b09      	ldr	r3, [pc, #36]	; (5160 <set+0xe4>)
    513c:	4a07      	ldr	r2, [pc, #28]	; (515c <set+0xe0>)
			BT_ERR("Failed to read device name from storage"
    513e:	4810      	ldr	r0, [pc, #64]	; (5180 <set+0x104>)
    5140:	1ad2      	subs	r2, r2, r3
    5142:	08d2      	lsrs	r2, r2, #3
    5144:	0192      	lsls	r2, r2, #6
    5146:	f042 0201 	orr.w	r2, r2, #1
    514a:	f01e fa52 	bl	235f2 <log_1>
    514e:	e7c5      	b.n	50dc <set+0x60>
			bt_dev.name[len] = '\0';
    5150:	480c      	ldr	r0, [pc, #48]	; (5184 <set+0x108>)
    5152:	4401      	add	r1, r0
    5154:	f881 4118 	strb.w	r4, [r1, #280]	; 0x118
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    5158:	e7c0      	b.n	50dc <set+0x60>
    515a:	bf00      	nop
    515c:	0002c028 	.word	0x0002c028
    5160:	0002bf50 	.word	0x0002bf50
    5164:	0002e8b0 	.word	0x0002e8b0
    5168:	0002e83d 	.word	0x0002e83d
    516c:	20000094 	.word	0x20000094
    5170:	0002e8d1 	.word	0x0002e8d1
    5174:	0002e8f5 	.word	0x0002e8f5
    5178:	0002ef0c 	.word	0x0002ef0c
    517c:	20000118 	.word	0x20000118
    5180:	0002e91a 	.word	0x0002e91a
    5184:	20000000 	.word	0x20000000

00005188 <bt_settings_encode_key>:
{
    5188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    518c:	b088      	sub	sp, #32
    518e:	799c      	ldrb	r4, [r3, #6]
    5190:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    5194:	795d      	ldrb	r5, [r3, #5]
    5196:	791e      	ldrb	r6, [r3, #4]
    5198:	78df      	ldrb	r7, [r3, #3]
    519a:	f893 c002 	ldrb.w	ip, [r3, #2]
    519e:	f893 e001 	ldrb.w	lr, [r3, #1]
    51a2:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    51a4:	f1b8 0f00 	cmp.w	r8, #0
    51a8:	d00e      	beq.n	51c8 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    51aa:	e9cd 3806 	strd	r3, r8, [sp, #24]
    51ae:	e9cd ce04 	strd	ip, lr, [sp, #16]
    51b2:	4613      	mov	r3, r2
    51b4:	e9cd 6702 	strd	r6, r7, [sp, #8]
    51b8:	e9cd 4500 	strd	r4, r5, [sp]
    51bc:	4a08      	ldr	r2, [pc, #32]	; (51e0 <bt_settings_encode_key+0x58>)
    51be:	f01d fe03 	bl	22dc8 <snprintk>
}
    51c2:	b008      	add	sp, #32
    51c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    51c8:	e9cd e305 	strd	lr, r3, [sp, #20]
    51cc:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    51d0:	4613      	mov	r3, r2
    51d2:	e9cd 5601 	strd	r5, r6, [sp, #4]
    51d6:	4a03      	ldr	r2, [pc, #12]	; (51e4 <bt_settings_encode_key+0x5c>)
    51d8:	9400      	str	r4, [sp, #0]
    51da:	f01d fdf5 	bl	22dc8 <snprintk>
}
    51de:	e7f0      	b.n	51c2 <bt_settings_encode_key+0x3a>
    51e0:	0002e94c 	.word	0x0002e94c
    51e4:	0002e970 	.word	0x0002e970

000051e8 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    51e8:	4909      	ldr	r1, [pc, #36]	; (5210 <bt_settings_save_id+0x28>)
    51ea:	f3bf 8f5b 	dmb	ish
    51ee:	e851 3f00 	ldrex	r3, [r1]
    51f2:	f043 0201 	orr.w	r2, r3, #1
    51f6:	e841 2000 	strex	r0, r2, [r1]
    51fa:	2800      	cmp	r0, #0
    51fc:	d1f7      	bne.n	51ee <bt_settings_save_id+0x6>
    51fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5202:	07db      	lsls	r3, r3, #31
    5204:	d403      	bmi.n	520e <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    5206:	4803      	ldr	r0, [pc, #12]	; (5214 <bt_settings_save_id+0x2c>)
    5208:	3908      	subs	r1, #8
    520a:	f025 be99 	b.w	2af40 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    520e:	4770      	bx	lr
    5210:	20000350 	.word	0x20000350
    5214:	20001438 	.word	0x20001438

00005218 <commit>:

static int commit(void)
{
    5218:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    521a:	4c1d      	ldr	r4, [pc, #116]	; (5290 <commit+0x78>)
    521c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    5220:	b913      	cbnz	r3, 5228 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    5222:	481c      	ldr	r0, [pc, #112]	; (5294 <commit+0x7c>)
    5224:	f001 fd2a 	bl	6c7c <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    5228:	79e3      	ldrb	r3, [r4, #7]
    522a:	b99b      	cbnz	r3, 5254 <commit+0x3c>
		bt_setup_public_id_addr();
    522c:	f001 fdd2 	bl	6dd4 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    5230:	79e3      	ldrb	r3, [r4, #7]
    5232:	b97b      	cbnz	r3, 5254 <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    5234:	f001 fe78 	bl	6f28 <bt_setup_random_id_addr>
		if (err) {
    5238:	4604      	mov	r4, r0
    523a:	b158      	cbz	r0, 5254 <commit+0x3c>
    523c:	4916      	ldr	r1, [pc, #88]	; (5298 <commit+0x80>)
    523e:	4b17      	ldr	r3, [pc, #92]	; (529c <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    5240:	4817      	ldr	r0, [pc, #92]	; (52a0 <commit+0x88>)
    5242:	1ac9      	subs	r1, r1, r3
    5244:	08c9      	lsrs	r1, r1, #3
    5246:	0189      	lsls	r1, r1, #6
    5248:	f041 0101 	orr.w	r1, r1, #1
    524c:	f01e f9c4 	bl	235d8 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    5250:	4620      	mov	r0, r4
    5252:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5254:	4d13      	ldr	r5, [pc, #76]	; (52a4 <commit+0x8c>)
    5256:	f3bf 8f5b 	dmb	ish
    525a:	682b      	ldr	r3, [r5, #0]
    525c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5260:	079b      	lsls	r3, r3, #30
    5262:	d401      	bmi.n	5268 <commit+0x50>
		bt_finalize_init();
    5264:	f001 fa70 	bl	6748 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5268:	f3bf 8f5b 	dmb	ish
    526c:	e855 4f00 	ldrex	r4, [r5]
    5270:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    5274:	e845 3200 	strex	r2, r3, [r5]
    5278:	2a00      	cmp	r2, #0
    527a:	d1f7      	bne.n	526c <commit+0x54>
    527c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    5280:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    5284:	d0e4      	beq.n	5250 <commit+0x38>
		bt_settings_save_id();
    5286:	f7ff ffaf 	bl	51e8 <bt_settings_save_id>
	return 0;
    528a:	2400      	movs	r4, #0
    528c:	e7e0      	b.n	5250 <commit+0x38>
    528e:	bf00      	nop
    5290:	20000000 	.word	0x20000000
    5294:	0002dc92 	.word	0x0002dc92
    5298:	0002c028 	.word	0x0002c028
    529c:	0002bf50 	.word	0x0002bf50
    52a0:	0002e991 	.word	0x0002e991
    52a4:	20000094 	.word	0x20000094

000052a8 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    52a8:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    52aa:	f7fe fa19 	bl	36e0 <settings_subsys_init>
	if (err) {
    52ae:	4604      	mov	r4, r0
    52b0:	b150      	cbz	r0, 52c8 <bt_settings_init+0x20>
    52b2:	4a06      	ldr	r2, [pc, #24]	; (52cc <bt_settings_init+0x24>)
    52b4:	4b06      	ldr	r3, [pc, #24]	; (52d0 <bt_settings_init+0x28>)
    52b6:	1ad2      	subs	r2, r2, r3
    52b8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    52ba:	0192      	lsls	r2, r2, #6
    52bc:	4601      	mov	r1, r0
    52be:	f042 0201 	orr.w	r2, r2, #1
    52c2:	4804      	ldr	r0, [pc, #16]	; (52d4 <bt_settings_init+0x2c>)
    52c4:	f01e f995 	bl	235f2 <log_1>
		return err;
	}

	return 0;
}
    52c8:	4620      	mov	r0, r4
    52ca:	bd10      	pop	{r4, pc}
    52cc:	0002c028 	.word	0x0002c028
    52d0:	0002bf50 	.word	0x0002bf50
    52d4:	0002e9b5 	.word	0x0002e9b5

000052d8 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    52d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    52da:	460b      	mov	r3, r1
	switch (src->type) {
    52dc:	7801      	ldrb	r1, [r0, #0]
    52de:	2901      	cmp	r1, #1
{
    52e0:	4602      	mov	r2, r0
	switch (src->type) {
    52e2:	d015      	beq.n	5310 <uuid_to_uuid128+0x38>
    52e4:	2902      	cmp	r1, #2
    52e6:	d02b      	beq.n	5340 <uuid_to_uuid128+0x68>
    52e8:	b989      	cbnz	r1, 530e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    52ea:	4c1c      	ldr	r4, [pc, #112]	; (535c <uuid_to_uuid128+0x84>)
    52ec:	461d      	mov	r5, r3
    52ee:	f104 0710 	add.w	r7, r4, #16
    52f2:	6820      	ldr	r0, [r4, #0]
    52f4:	6861      	ldr	r1, [r4, #4]
    52f6:	462e      	mov	r6, r5
    52f8:	c603      	stmia	r6!, {r0, r1}
    52fa:	3408      	adds	r4, #8
    52fc:	42bc      	cmp	r4, r7
    52fe:	4635      	mov	r5, r6
    5300:	d1f7      	bne.n	52f2 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
    5302:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
    5304:	7821      	ldrb	r1, [r4, #0]
    5306:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    5308:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    530a:	0a12      	lsrs	r2, r2, #8
    530c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    530e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
    5310:	4c12      	ldr	r4, [pc, #72]	; (535c <uuid_to_uuid128+0x84>)
    5312:	461d      	mov	r5, r3
    5314:	f104 0710 	add.w	r7, r4, #16
    5318:	6820      	ldr	r0, [r4, #0]
    531a:	6861      	ldr	r1, [r4, #4]
    531c:	462e      	mov	r6, r5
    531e:	c603      	stmia	r6!, {r0, r1}
    5320:	3408      	adds	r4, #8
    5322:	42bc      	cmp	r4, r7
    5324:	4635      	mov	r5, r6
    5326:	d1f7      	bne.n	5318 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
    5328:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
    532a:	7821      	ldrb	r1, [r4, #0]
    532c:	7031      	strb	r1, [r6, #0]
    532e:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
    5332:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    5334:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    5336:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    5338:	0a12      	lsrs	r2, r2, #8
    533a:	7399      	strb	r1, [r3, #14]
    533c:	741a      	strb	r2, [r3, #16]
}
    533e:	e7e6      	b.n	530e <uuid_to_uuid128+0x36>
    5340:	f100 0510 	add.w	r5, r0, #16
    5344:	6810      	ldr	r0, [r2, #0]
    5346:	6851      	ldr	r1, [r2, #4]
    5348:	461c      	mov	r4, r3
    534a:	c403      	stmia	r4!, {r0, r1}
    534c:	3208      	adds	r2, #8
    534e:	42aa      	cmp	r2, r5
    5350:	4623      	mov	r3, r4
    5352:	d1f7      	bne.n	5344 <uuid_to_uuid128+0x6c>
    5354:	7812      	ldrb	r2, [r2, #0]
    5356:	7022      	strb	r2, [r4, #0]
    5358:	e7d9      	b.n	530e <uuid_to_uuid128+0x36>
    535a:	bf00      	nop
    535c:	0002e9e9 	.word	0x0002e9e9

00005360 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    5360:	b538      	push	{r3, r4, r5, lr}
    5362:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
    5364:	4805      	ldr	r0, [pc, #20]	; (537c <bt_buf_get_rx+0x1c>)
    5366:	f020 fd13 	bl	25d90 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    536a:	4604      	mov	r4, r0
    536c:	b120      	cbz	r0, 5378 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
    536e:	2100      	movs	r1, #0
    5370:	3008      	adds	r0, #8
    5372:	f020 fd32 	bl	25dda <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    5376:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    5378:	4620      	mov	r0, r4
    537a:	bd38      	pop	{r3, r4, r5, pc}
    537c:	20000ce0 	.word	0x20000ce0

00005380 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    5380:	b570      	push	{r4, r5, r6, lr}
    5382:	4602      	mov	r2, r0
    5384:	460b      	mov	r3, r1
	__asm__ volatile(
    5386:	f04f 0120 	mov.w	r1, #32
    538a:	f3ef 8511 	mrs	r5, BASEPRI
    538e:	f381 8811 	msr	BASEPRI, r1
    5392:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    5396:	480c      	ldr	r0, [pc, #48]	; (53c8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    5398:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    539a:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
	bt_dev.sent_cmd = NULL;
    539e:	f8c0 10f8 	str.w	r1, [r0, #248]	; 0xf8
	__asm__ volatile(
    53a2:	f385 8811 	msr	BASEPRI, r5
    53a6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    53aa:	b924      	cbnz	r4, 53b6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    53ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    53b0:	2001      	movs	r0, #1
    53b2:	f7ff bfd5 	b.w	5360 <bt_buf_get_rx>
    53b6:	2301      	movs	r3, #1
    53b8:	f104 0008 	add.w	r0, r4, #8
    53bc:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    53be:	81a1      	strh	r1, [r4, #12]
    53c0:	f020 fd0b 	bl	25dda <net_buf_simple_reserve>
}
    53c4:	4620      	mov	r0, r4
    53c6:	bd70      	pop	{r4, r5, r6, pc}
    53c8:	20000000 	.word	0x20000000

000053cc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    53cc:	b570      	push	{r4, r5, r6, lr}
    53ce:	4604      	mov	r4, r0
	switch (evt) {
    53d0:	2c0f      	cmp	r4, #15
{
    53d2:	460d      	mov	r5, r1
    53d4:	4610      	mov	r0, r2
    53d6:	4619      	mov	r1, r3
	switch (evt) {
    53d8:	d805      	bhi.n	53e6 <bt_buf_get_evt+0x1a>
    53da:	2c0d      	cmp	r4, #13
    53dc:	d912      	bls.n	5404 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    53de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    53e2:	f7ff bfcd 	b.w	5380 <bt_buf_get_cmd_complete>
	switch (evt) {
    53e6:	2c13      	cmp	r4, #19
    53e8:	d10c      	bne.n	5404 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    53ea:	480b      	ldr	r0, [pc, #44]	; (5418 <bt_buf_get_evt+0x4c>)
    53ec:	f020 fcd0 	bl	25d90 <net_buf_alloc_fixed>
			if (buf) {
    53f0:	4604      	mov	r4, r0
    53f2:	b128      	cbz	r0, 5400 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    53f4:	2100      	movs	r1, #0
    53f6:	3008      	adds	r0, #8
    53f8:	f020 fcef 	bl	25dda <net_buf_simple_reserve>
    53fc:	2301      	movs	r3, #1
    53fe:	7523      	strb	r3, [r4, #20]
}
    5400:	4620      	mov	r0, r4
    5402:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    5404:	4602      	mov	r2, r0
    5406:	460b      	mov	r3, r1
		if (discardable) {
    5408:	b10d      	cbz	r5, 540e <bt_buf_get_evt+0x42>
    540a:	4804      	ldr	r0, [pc, #16]	; (541c <bt_buf_get_evt+0x50>)
    540c:	e7ee      	b.n	53ec <bt_buf_get_evt+0x20>
}
    540e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    5412:	2001      	movs	r0, #1
    5414:	f7ff bfa4 	b.w	5360 <bt_buf_get_rx>
    5418:	20000d08 	.word	0x20000d08
    541c:	20000c68 	.word	0x20000c68

00005420 <hci_data_buf_overflow>:
    5420:	4905      	ldr	r1, [pc, #20]	; (5438 <hci_data_buf_overflow+0x18>)
    5422:	4a06      	ldr	r2, [pc, #24]	; (543c <hci_data_buf_overflow+0x1c>)
	bt_conn_unref(conn);
}

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    5424:	6883      	ldr	r3, [r0, #8]

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    5426:	4806      	ldr	r0, [pc, #24]	; (5440 <hci_data_buf_overflow+0x20>)
    5428:	1a52      	subs	r2, r2, r1
    542a:	08d2      	lsrs	r2, r2, #3
    542c:	0192      	lsls	r2, r2, #6
    542e:	7819      	ldrb	r1, [r3, #0]
    5430:	f042 0202 	orr.w	r2, r2, #2
    5434:	f01e b8dd 	b.w	235f2 <log_1>
    5438:	0002bf50 	.word	0x0002bf50
    543c:	0002c010 	.word	0x0002c010
    5440:	0002ea01 	.word	0x0002ea01

00005444 <le_data_len_change>:
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5444:	6883      	ldr	r3, [r0, #8]
{
    5446:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5448:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
    544a:	4620      	mov	r0, r4
    544c:	f002 faa6 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    5450:	b960      	cbnz	r0, 546c <le_data_len_change+0x28>
    5452:	4a08      	ldr	r2, [pc, #32]	; (5474 <le_data_len_change+0x30>)
    5454:	4b08      	ldr	r3, [pc, #32]	; (5478 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5456:	4809      	ldr	r0, [pc, #36]	; (547c <le_data_len_change+0x38>)
    5458:	1ad2      	subs	r2, r2, r3
    545a:	08d2      	lsrs	r2, r2, #3
    545c:	0192      	lsls	r2, r2, #6
    545e:	4621      	mov	r1, r4
    5460:	f042 0201 	orr.w	r2, r2, #1
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
    5464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5468:	f01e b8c3 	b.w	235f2 <log_1>
}
    546c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    5470:	f01f bb9e 	b.w	24bb0 <bt_conn_unref>
    5474:	0002c010 	.word	0x0002c010
    5478:	0002bf50 	.word	0x0002bf50
    547c:	0002ea29 	.word	0x0002ea29

00005480 <hci_disconn_complete_prio>:
{
    5480:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5482:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    5484:	781a      	ldrb	r2, [r3, #0]
    5486:	b9da      	cbnz	r2, 54c0 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5488:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    548c:	4628      	mov	r0, r5
    548e:	f002 fa85 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    5492:	4604      	mov	r4, r0
    5494:	b960      	cbnz	r0, 54b0 <hci_disconn_complete_prio+0x30>
    5496:	4b0b      	ldr	r3, [pc, #44]	; (54c4 <hci_disconn_complete_prio+0x44>)
    5498:	4a0b      	ldr	r2, [pc, #44]	; (54c8 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    549a:	480c      	ldr	r0, [pc, #48]	; (54cc <hci_disconn_complete_prio+0x4c>)
    549c:	1ad2      	subs	r2, r2, r3
    549e:	08d2      	lsrs	r2, r2, #3
    54a0:	0192      	lsls	r2, r2, #6
    54a2:	4629      	mov	r1, r5
    54a4:	f042 0201 	orr.w	r2, r2, #1
}
    54a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    54ac:	f01e b8a1 	b.w	235f2 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    54b0:	2101      	movs	r1, #1
    54b2:	f002 fa7f 	bl	79b4 <bt_conn_set_state>
	bt_conn_unref(conn);
    54b6:	4620      	mov	r0, r4
}
    54b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    54bc:	f01f bb78 	b.w	24bb0 <bt_conn_unref>
}
    54c0:	bd38      	pop	{r3, r4, r5, pc}
    54c2:	bf00      	nop
    54c4:	0002bf50 	.word	0x0002bf50
    54c8:	0002c010 	.word	0x0002c010
    54cc:	0002ea4d 	.word	0x0002ea4d

000054d0 <hci_disconn_complete>:
{
    54d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    54d2:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    54d4:	7835      	ldrb	r5, [r6, #0]
    54d6:	b9f5      	cbnz	r5, 5516 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    54d8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    54dc:	4638      	mov	r0, r7
    54de:	f002 fa5d 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    54e2:	4604      	mov	r4, r0
    54e4:	b960      	cbnz	r0, 5500 <hci_disconn_complete+0x30>
    54e6:	4b0c      	ldr	r3, [pc, #48]	; (5518 <hci_disconn_complete+0x48>)
    54e8:	4a0c      	ldr	r2, [pc, #48]	; (551c <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    54ea:	480d      	ldr	r0, [pc, #52]	; (5520 <hci_disconn_complete+0x50>)
    54ec:	1ad2      	subs	r2, r2, r3
    54ee:	08d2      	lsrs	r2, r2, #3
    54f0:	0192      	lsls	r2, r2, #6
    54f2:	4639      	mov	r1, r7
    54f4:	f042 0201 	orr.w	r2, r2, #1
}
    54f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    54fc:	f01e b879 	b.w	235f2 <log_1>
	conn->err = evt->reason;
    5500:	78f3      	ldrb	r3, [r6, #3]
    5502:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5504:	4629      	mov	r1, r5
    5506:	f002 fa55 	bl	79b4 <bt_conn_set_state>
	conn->handle = 0U;
    550a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    550c:	4620      	mov	r0, r4
}
    550e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    5512:	f01f bb4d 	b.w	24bb0 <bt_conn_unref>
}
    5516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5518:	0002bf50 	.word	0x0002bf50
    551c:	0002c010 	.word	0x0002c010
    5520:	0002ea4d 	.word	0x0002ea4d

00005524 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
    5524:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    5526:	2101      	movs	r1, #1
    5528:	3008      	adds	r0, #8
    552a:	f020 fcbf 	bl	25eac <net_buf_simple_pull_mem>
    552e:	4b06      	ldr	r3, [pc, #24]	; (5548 <hci_hardware_error+0x24>)
    5530:	4a06      	ldr	r2, [pc, #24]	; (554c <hci_hardware_error+0x28>)
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    5532:	7801      	ldrb	r1, [r0, #0]
    5534:	4806      	ldr	r0, [pc, #24]	; (5550 <hci_hardware_error+0x2c>)
    5536:	1ad2      	subs	r2, r2, r3
    5538:	08d2      	lsrs	r2, r2, #3
    553a:	0192      	lsls	r2, r2, #6
}
    553c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    5540:	f042 0201 	orr.w	r2, r2, #1
    5544:	f01e b855 	b.w	235f2 <log_1>
    5548:	0002bf50 	.word	0x0002bf50
    554c:	0002c010 	.word	0x0002c010
    5550:	0002ea73 	.word	0x0002ea73

00005554 <hci_vendor_event>:
	return 0;
}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

static void hci_vendor_event(struct net_buf *buf)
{
    5554:	b510      	push	{r4, lr}
    5556:	4a0a      	ldr	r2, [pc, #40]	; (5580 <hci_vendor_event+0x2c>)
    5558:	4c0a      	ldr	r4, [pc, #40]	; (5584 <hci_vendor_event+0x30>)
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
    555a:	8981      	ldrh	r1, [r0, #12]
    555c:	6880      	ldr	r0, [r0, #8]
    555e:	1aa4      	subs	r4, r4, r2
    5560:	f7ff fd04 	bl	4f6c <bt_hex_real>
    5564:	f7fd fb08 	bl	2b78 <log_strdup>
    5568:	08e4      	lsrs	r4, r4, #3
    556a:	01a4      	lsls	r4, r4, #6
    556c:	f044 0402 	orr.w	r4, r4, #2
    5570:	4601      	mov	r1, r0
    5572:	4622      	mov	r2, r4
    5574:	4804      	ldr	r0, [pc, #16]	; (5588 <hci_vendor_event+0x34>)
			bt_hex(buf->data, buf->len));
	}
}
    5576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    557a:	f01e b83a 	b.w	235f2 <log_1>
    557e:	bf00      	nop
    5580:	0002bf50 	.word	0x0002bf50
    5584:	0002c010 	.word	0x0002c010
    5588:	0002ea95 	.word	0x0002ea95

0000558c <le_conn_update_complete>:
{
    558c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    558e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5590:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5594:	4630      	mov	r0, r6
    5596:	f002 fa01 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    559a:	4604      	mov	r4, r0
    559c:	b960      	cbnz	r0, 55b8 <le_conn_update_complete+0x2c>
    559e:	4a1f      	ldr	r2, [pc, #124]	; (561c <le_conn_update_complete+0x90>)
    55a0:	4b1f      	ldr	r3, [pc, #124]	; (5620 <le_conn_update_complete+0x94>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    55a2:	4820      	ldr	r0, [pc, #128]	; (5624 <le_conn_update_complete+0x98>)
    55a4:	1ad2      	subs	r2, r2, r3
    55a6:	08d2      	lsrs	r2, r2, #3
    55a8:	0192      	lsls	r2, r2, #6
    55aa:	f042 0201 	orr.w	r2, r2, #1
    55ae:	4631      	mov	r1, r6
    55b0:	f01e f81f 	bl	235f2 <log_1>
}
    55b4:	b002      	add	sp, #8
    55b6:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    55b8:	782b      	ldrb	r3, [r5, #0]
    55ba:	b9bb      	cbnz	r3, 55ec <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    55bc:	792a      	ldrb	r2, [r5, #4]
    55be:	78eb      	ldrb	r3, [r5, #3]
    55c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    55c4:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    55c8:	79aa      	ldrb	r2, [r5, #6]
    55ca:	796b      	ldrb	r3, [r5, #5]
    55cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    55d0:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    55d4:	79eb      	ldrb	r3, [r5, #7]
    55d6:	7a2a      	ldrb	r2, [r5, #8]
    55d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    55dc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    55e0:	f001 fff8 	bl	75d4 <notify_le_param_updated>
	bt_conn_unref(conn);
    55e4:	4620      	mov	r0, r4
    55e6:	f01f fae3 	bl	24bb0 <bt_conn_unref>
    55ea:	e7e3      	b.n	55b4 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    55ec:	2b1a      	cmp	r3, #26
    55ee:	d1f9      	bne.n	55e4 <le_conn_update_complete+0x58>
    55f0:	78c3      	ldrb	r3, [r0, #3]
    55f2:	2b01      	cmp	r3, #1
    55f4:	d1f6      	bne.n	55e4 <le_conn_update_complete+0x58>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    55f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    55fa:	3004      	adds	r0, #4
    55fc:	f01f f916 	bl	2482c <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    5600:	0543      	lsls	r3, r0, #21
    5602:	d4ef      	bmi.n	55e4 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    5604:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    5608:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    560a:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    560c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    5610:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    5612:	4620      	mov	r0, r4
    5614:	f002 fe1c 	bl	8250 <bt_l2cap_update_conn_param>
    5618:	e7e4      	b.n	55e4 <le_conn_update_complete+0x58>
    561a:	bf00      	nop
    561c:	0002c010 	.word	0x0002c010
    5620:	0002bf50 	.word	0x0002bf50
    5624:	0002ea29 	.word	0x0002ea29

00005628 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    5628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    562a:	4f0a      	ldr	r7, [pc, #40]	; (5654 <id_find+0x2c>)
{
    562c:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    562e:	2500      	movs	r5, #0
    5630:	79fb      	ldrb	r3, [r7, #7]
    5632:	b2ec      	uxtb	r4, r5
    5634:	42a3      	cmp	r3, r4
    5636:	d802      	bhi.n	563e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5638:	f06f 0401 	mvn.w	r4, #1
    563c:	e008      	b.n	5650 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    563e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    5642:	4439      	add	r1, r7
    5644:	4630      	mov	r0, r6
    5646:	f01f f920 	bl	2488a <bt_addr_le_cmp>
    564a:	3501      	adds	r5, #1
    564c:	2800      	cmp	r0, #0
    564e:	d1ef      	bne.n	5630 <id_find+0x8>
}
    5650:	4620      	mov	r0, r4
    5652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5654:	20000000 	.word	0x20000000

00005658 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    5658:	6843      	ldr	r3, [r0, #4]
{
    565a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    565c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    565e:	0558      	lsls	r0, r3, #21
    5660:	d502      	bpl.n	5668 <valid_adv_param+0x10>
		return false;
    5662:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    5664:	b003      	add	sp, #12
    5666:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5668:	6922      	ldr	r2, [r4, #16]
    566a:	b10a      	cbz	r2, 5670 <valid_adv_param+0x18>
    566c:	07d9      	lsls	r1, r3, #31
    566e:	d5f8      	bpl.n	5662 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    5670:	4d1a      	ldr	r5, [pc, #104]	; (56dc <valid_adv_param+0x84>)
    5672:	7820      	ldrb	r0, [r4, #0]
    5674:	79eb      	ldrb	r3, [r5, #7]
    5676:	4283      	cmp	r3, r0
    5678:	d9f3      	bls.n	5662 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    567a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    567e:	2300      	movs	r3, #0
    5680:	4669      	mov	r1, sp
    5682:	4428      	add	r0, r5
    5684:	9300      	str	r3, [sp, #0]
    5686:	f8cd 3003 	str.w	r3, [sp, #3]
    568a:	f01f f8fe 	bl	2488a <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    568e:	2800      	cmp	r0, #0
    5690:	d0e7      	beq.n	5662 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5692:	6860      	ldr	r0, [r4, #4]
    5694:	07c2      	lsls	r2, r0, #31
    5696:	d406      	bmi.n	56a6 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    5698:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    569c:	2b08      	cmp	r3, #8
    569e:	d802      	bhi.n	56a6 <valid_adv_param+0x4e>
    56a0:	68a3      	ldr	r3, [r4, #8]
    56a2:	2b9f      	cmp	r3, #159	; 0x9f
    56a4:	d9dd      	bls.n	5662 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    56a6:	f010 0f30 	tst.w	r0, #48	; 0x30
    56aa:	d002      	beq.n	56b2 <valid_adv_param+0x5a>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    56ac:	6923      	ldr	r3, [r4, #16]
    56ae:	2b00      	cmp	r3, #0
    56b0:	d0d7      	beq.n	5662 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    56b2:	06c3      	lsls	r3, r0, #27
    56b4:	d401      	bmi.n	56ba <valid_adv_param+0x62>
    56b6:	6923      	ldr	r3, [r4, #16]
    56b8:	b943      	cbnz	r3, 56cc <valid_adv_param+0x74>
		if (param->interval_min > param->interval_max ||
    56ba:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    56be:	429a      	cmp	r2, r3
    56c0:	d8cf      	bhi.n	5662 <valid_adv_param+0xa>
    56c2:	2a1f      	cmp	r2, #31
    56c4:	d9cd      	bls.n	5662 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    56c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    56ca:	d8ca      	bhi.n	5662 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    56cc:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    56d0:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    56d4:	bf18      	it	ne
    56d6:	2001      	movne	r0, #1
    56d8:	e7c4      	b.n	5664 <valid_adv_param+0xc>
    56da:	bf00      	nop
    56dc:	20000000 	.word	0x20000000

000056e0 <hci_cmd_done>:
{
    56e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    56e4:	4607      	mov	r7, r0
    56e6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    56e8:	7990      	ldrb	r0, [r2, #6]
    56ea:	4e34      	ldr	r6, [pc, #208]	; (57bc <hci_cmd_done+0xdc>)
{
    56ec:	4688      	mov	r8, r1
    56ee:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    56f0:	f012 fdb0 	bl	18254 <net_buf_pool_get>
    56f4:	4286      	cmp	r6, r0
    56f6:	d016      	beq.n	5726 <hci_cmd_done+0x46>
    56f8:	4b31      	ldr	r3, [pc, #196]	; (57c0 <hci_cmd_done+0xe0>)
    56fa:	4d32      	ldr	r5, [pc, #200]	; (57c4 <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    56fc:	79a0      	ldrb	r0, [r4, #6]
    56fe:	9700      	str	r7, [sp, #0]
    5700:	1aed      	subs	r5, r5, r3
    5702:	08ed      	lsrs	r5, r5, #3
    5704:	9001      	str	r0, [sp, #4]
    5706:	f012 fda5 	bl	18254 <net_buf_pool_get>
    570a:	01ad      	lsls	r5, r5, #6
    570c:	f045 0502 	orr.w	r5, r5, #2
    5710:	e9cd 0602 	strd	r0, r6, [sp, #8]
    5714:	462b      	mov	r3, r5
    5716:	482c      	ldr	r0, [pc, #176]	; (57c8 <hci_cmd_done+0xe8>)
    5718:	2204      	movs	r2, #4
    571a:	4669      	mov	r1, sp
    571c:	f01d ffb2 	bl	23684 <log_n>
}
    5720:	b005      	add	sp, #20
    5722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    5726:	4620      	mov	r0, r4
    5728:	f012 fd9c 	bl	18264 <net_buf_id>
    572c:	4d27      	ldr	r5, [pc, #156]	; (57cc <hci_cmd_done+0xec>)
    572e:	f04f 090c 	mov.w	r9, #12
    5732:	fb09 5300 	mla	r3, r9, r0, r5
    5736:	885b      	ldrh	r3, [r3, #2]
    5738:	42bb      	cmp	r3, r7
    573a:	d011      	beq.n	5760 <hci_cmd_done+0x80>
    573c:	4b20      	ldr	r3, [pc, #128]	; (57c0 <hci_cmd_done+0xe0>)
    573e:	4e21      	ldr	r6, [pc, #132]	; (57c4 <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    5740:	4620      	mov	r0, r4
    5742:	1af6      	subs	r6, r6, r3
    5744:	f012 fd8e 	bl	18264 <net_buf_id>
    5748:	08f6      	lsrs	r6, r6, #3
    574a:	fb09 5000 	mla	r0, r9, r0, r5
    574e:	01b6      	lsls	r6, r6, #6
    5750:	f046 0602 	orr.w	r6, r6, #2
    5754:	8842      	ldrh	r2, [r0, #2]
    5756:	481e      	ldr	r0, [pc, #120]	; (57d0 <hci_cmd_done+0xf0>)
    5758:	4633      	mov	r3, r6
    575a:	4639      	mov	r1, r7
    575c:	f01d ff5d 	bl	2361a <log_2>
	if (cmd(buf)->state && !status) {
    5760:	4620      	mov	r0, r4
    5762:	f012 fd7f 	bl	18264 <net_buf_id>
    5766:	260c      	movs	r6, #12
    5768:	fb06 5000 	mla	r0, r6, r0, r5
    576c:	6843      	ldr	r3, [r0, #4]
    576e:	b16b      	cbz	r3, 578c <hci_cmd_done+0xac>
    5770:	f1b8 0f00 	cmp.w	r8, #0
    5774:	d10a      	bne.n	578c <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    5776:	4620      	mov	r0, r4
    5778:	f012 fd74 	bl	18264 <net_buf_id>
    577c:	fb06 5000 	mla	r0, r6, r0, r5
    5780:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    5782:	e9d3 0100 	ldrd	r0, r1, [r3]
    5786:	7a1a      	ldrb	r2, [r3, #8]
    5788:	f01f f86e 	bl	24868 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    578c:	4620      	mov	r0, r4
    578e:	f012 fd69 	bl	18264 <net_buf_id>
    5792:	260c      	movs	r6, #12
    5794:	fb06 5000 	mla	r0, r6, r0, r5
    5798:	6883      	ldr	r3, [r0, #8]
    579a:	2b00      	cmp	r3, #0
    579c:	d0c0      	beq.n	5720 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    579e:	4620      	mov	r0, r4
    57a0:	f012 fd60 	bl	18264 <net_buf_id>
    57a4:	4370      	muls	r0, r6
    57a6:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    57aa:	4620      	mov	r0, r4
    57ac:	f012 fd5a 	bl	18264 <net_buf_id>
    57b0:	fb06 5500 	mla	r5, r6, r0, r5
    57b4:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    57b6:	f01a fc65 	bl	20084 <z_impl_k_sem_give>
}
    57ba:	e7b1      	b.n	5720 <hci_cmd_done+0x40>
    57bc:	20000cb8 	.word	0x20000cb8
    57c0:	0002bf50 	.word	0x0002bf50
    57c4:	0002c010 	.word	0x0002c010
    57c8:	0002eab9 	.word	0x0002eab9
    57cc:	2000295c 	.word	0x2000295c
    57d0:	0002eaee 	.word	0x0002eaee

000057d4 <handle_event>:
{
    57d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    57d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    57da:	4605      	mov	r5, r0
    57dc:	4608      	mov	r0, r1
		if (handler->event != event) {
    57de:	7811      	ldrb	r1, [r2, #0]
    57e0:	42a9      	cmp	r1, r5
    57e2:	d01a      	beq.n	581a <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    57e4:	3208      	adds	r2, #8
    57e6:	429a      	cmp	r2, r3
    57e8:	d1f9      	bne.n	57de <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    57ea:	8986      	ldrh	r6, [r0, #12]
    57ec:	4b16      	ldr	r3, [pc, #88]	; (5848 <handle_event+0x74>)
    57ee:	4c17      	ldr	r4, [pc, #92]	; (584c <handle_event+0x78>)
    57f0:	6880      	ldr	r0, [r0, #8]
    57f2:	4631      	mov	r1, r6
    57f4:	1ae4      	subs	r4, r4, r3
    57f6:	f7ff fbb9 	bl	4f6c <bt_hex_real>
    57fa:	f7fd f9bd 	bl	2b78 <log_strdup>
    57fe:	08e4      	lsrs	r4, r4, #3
    5800:	01a4      	lsls	r4, r4, #6
    5802:	f044 0402 	orr.w	r4, r4, #2
    5806:	4603      	mov	r3, r0
    5808:	f8ad 4000 	strh.w	r4, [sp]
    580c:	4810      	ldr	r0, [pc, #64]	; (5850 <handle_event+0x7c>)
    580e:	4632      	mov	r2, r6
    5810:	4629      	mov	r1, r5
    5812:	f01d ff1b 	bl	2364c <log_3>
}
    5816:	b002      	add	sp, #8
    5818:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    581a:	8981      	ldrh	r1, [r0, #12]
    581c:	7853      	ldrb	r3, [r2, #1]
    581e:	428b      	cmp	r3, r1
    5820:	d90d      	bls.n	583e <handle_event+0x6a>
    5822:	4a09      	ldr	r2, [pc, #36]	; (5848 <handle_event+0x74>)
    5824:	4b09      	ldr	r3, [pc, #36]	; (584c <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    5826:	480b      	ldr	r0, [pc, #44]	; (5854 <handle_event+0x80>)
    5828:	1a9b      	subs	r3, r3, r2
    582a:	08db      	lsrs	r3, r3, #3
    582c:	019b      	lsls	r3, r3, #6
    582e:	f043 0301 	orr.w	r3, r3, #1
    5832:	462a      	mov	r2, r5
}
    5834:	b002      	add	sp, #8
    5836:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    583a:	f01d beee 	b.w	2361a <log_2>
		handler->handler(buf);
    583e:	6853      	ldr	r3, [r2, #4]
}
    5840:	b002      	add	sp, #8
    5842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    5846:	4718      	bx	r3
    5848:	0002bf50 	.word	0x0002bf50
    584c:	0002c010 	.word	0x0002c010
    5850:	0002eb43 	.word	0x0002eb43
    5854:	0002eb21 	.word	0x0002eb21

00005858 <hci_le_meta_event>:
{
    5858:	b510      	push	{r4, lr}
    585a:	2101      	movs	r1, #1
    585c:	4604      	mov	r4, r0
    585e:	3008      	adds	r0, #8
    5860:	f020 fb24 	bl	25eac <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    5864:	4621      	mov	r1, r4
    5866:	4a03      	ldr	r2, [pc, #12]	; (5874 <hci_le_meta_event+0x1c>)
    5868:	7800      	ldrb	r0, [r0, #0]
}
    586a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    586e:	2307      	movs	r3, #7
    5870:	f7ff bfb0 	b.w	57d4 <handle_event>
    5874:	0002c25c 	.word	0x0002c25c

00005878 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    5878:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    587a:	4c0c      	ldr	r4, [pc, #48]	; (58ac <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    587c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    587e:	2205      	movs	r2, #5
    5880:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    5884:	f002 f9c6 	bl	7c14 <bt_conn_lookup_state_le>
		if (!conn) {
    5888:	b970      	cbnz	r0, 58a8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    588a:	4b09      	ldr	r3, [pc, #36]	; (58b0 <find_pending_connect.part.0+0x38>)
    588c:	6818      	ldr	r0, [r3, #0]
    588e:	889a      	ldrh	r2, [r3, #4]
    5890:	9000      	str	r0, [sp, #0]
    5892:	799b      	ldrb	r3, [r3, #6]
    5894:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    5898:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    589c:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    58a0:	2204      	movs	r2, #4
    58a2:	4669      	mov	r1, sp
    58a4:	f002 f9b6 	bl	7c14 <bt_conn_lookup_state_le>
}
    58a8:	b002      	add	sp, #8
    58aa:	bd10      	pop	{r4, pc}
    58ac:	20000000 	.word	0x20000000
    58b0:	0002c110 	.word	0x0002c110

000058b4 <id_create.isra.0>:
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    58b4:	b530      	push	{r4, r5, lr}
    58b6:	4d17      	ldr	r5, [pc, #92]	; (5914 <id_create.isra.0+0x60>)
    58b8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    58bc:	b085      	sub	sp, #20
    58be:	4405      	add	r5, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    58c0:	460c      	mov	r4, r1
    58c2:	b1a9      	cbz	r1, 58f0 <id_create.isra.0+0x3c>
    58c4:	2300      	movs	r3, #0
    58c6:	a902      	add	r1, sp, #8
    58c8:	4620      	mov	r0, r4
    58ca:	9302      	str	r3, [sp, #8]
    58cc:	f8cd 300b 	str.w	r3, [sp, #11]
    58d0:	f01e ffdb 	bl	2488a <bt_addr_le_cmp>
    58d4:	b160      	cbz	r0, 58f0 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    58d6:	4621      	mov	r1, r4
    58d8:	4628      	mov	r0, r5
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    58da:	f01e ffde 	bl	2489a <bt_addr_le_copy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    58de:	480e      	ldr	r0, [pc, #56]	; (5918 <id_create.isra.0+0x64>)
    58e0:	f01e ff9e 	bl	24820 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    58e4:	0783      	lsls	r3, r0, #30
    58e6:	d501      	bpl.n	58ec <id_create.isra.0+0x38>
		bt_settings_save_id();
    58e8:	f7ff fc7e 	bl	51e8 <bt_settings_save_id>
}
    58ec:	b005      	add	sp, #20
    58ee:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    58f0:	4668      	mov	r0, sp
    58f2:	f01e ff66 	bl	247c2 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    58f6:	4668      	mov	r0, sp
    58f8:	f7ff fe96 	bl	5628 <id_find>
    58fc:	2800      	cmp	r0, #0
    58fe:	daf7      	bge.n	58f0 <id_create.isra.0+0x3c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5900:	4669      	mov	r1, sp
    5902:	4628      	mov	r0, r5
    5904:	f01e ffc9 	bl	2489a <bt_addr_le_copy>
		if (addr) {
    5908:	2c00      	cmp	r4, #0
    590a:	d0e8      	beq.n	58de <id_create.isra.0+0x2a>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    590c:	4629      	mov	r1, r5
    590e:	4620      	mov	r0, r4
    5910:	e7e3      	b.n	58da <id_create.isra.0+0x26>
    5912:	bf00      	nop
    5914:	20000000 	.word	0x20000000
    5918:	20000094 	.word	0x20000094

0000591c <hci_num_completed_packets>:
{
    591c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5920:	4d3d      	ldr	r5, [pc, #244]	; (5a18 <hci_num_completed_packets+0xfc>)
    5922:	4b3e      	ldr	r3, [pc, #248]	; (5a1c <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    5924:	f8d0 8008 	ldr.w	r8, [r0, #8]
    5928:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 5a28 <hci_num_completed_packets+0x10c>
    592c:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    592e:	2600      	movs	r6, #0
    5930:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    5932:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    5934:	f898 3000 	ldrb.w	r3, [r8]
    5938:	429e      	cmp	r6, r3
    593a:	db01      	blt.n	5940 <hci_num_completed_packets+0x24>
}
    593c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    5940:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    5944:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    5948:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    594c:	4658      	mov	r0, fp
    594e:	f002 f825 	bl	799c <bt_conn_lookup_handle>
		if (!conn) {
    5952:	4604      	mov	r4, r0
    5954:	b1d8      	cbz	r0, 598e <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5956:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    595a:	2f00      	cmp	r7, #0
    595c:	d033      	beq.n	59c6 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    595e:	f04f 0320 	mov.w	r3, #32
    5962:	f3ef 8211 	mrs	r2, BASEPRI
    5966:	f383 8811 	msr	BASEPRI, r3
    596a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    596e:	69e3      	ldr	r3, [r4, #28]
    5970:	b1b3      	cbz	r3, 59a0 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    5972:	3b01      	subs	r3, #1
    5974:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    5976:	f382 8811 	msr	BASEPRI, r2
    597a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    597e:	4620      	mov	r0, r4
    5980:	f001 fe24 	bl	75cc <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    5984:	3f01      	subs	r7, #1
    5986:	f01a fb7d 	bl	20084 <z_impl_k_sem_give>
    598a:	b2bf      	uxth	r7, r7
    598c:	e7e5      	b.n	595a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    598e:	01aa      	lsls	r2, r5, #6
    5990:	4823      	ldr	r0, [pc, #140]	; (5a20 <hci_num_completed_packets+0x104>)
    5992:	f042 0201 	orr.w	r2, r2, #1
    5996:	4659      	mov	r1, fp
    5998:	f01d fe2b 	bl	235f2 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    599c:	3601      	adds	r6, #1
    599e:	e7c9      	b.n	5934 <hci_num_completed_packets+0x18>
Z_GENLIST_IS_EMPTY(slist)
    59a0:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    59a2:	b12b      	cbz	r3, 59b0 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    59a4:	69a1      	ldr	r1, [r4, #24]
    59a6:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    59a8:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    59aa:	428b      	cmp	r3, r1
	list->tail = node;
    59ac:	bf08      	it	eq
    59ae:	61a0      	streq	r0, [r4, #24]
    59b0:	f382 8811 	msr	BASEPRI, r2
    59b4:	f3bf 8f6f 	isb	sy
			if (!node) {
    59b8:	b94b      	cbnz	r3, 59ce <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    59ba:	01a9      	lsls	r1, r5, #6
    59bc:	4819      	ldr	r0, [pc, #100]	; (5a24 <hci_num_completed_packets+0x108>)
    59be:	f041 0101 	orr.w	r1, r1, #1
    59c2:	f01d fe09 	bl	235d8 <log_0>
		bt_conn_unref(conn);
    59c6:	4620      	mov	r0, r4
    59c8:	f01f f8f2 	bl	24bb0 <bt_conn_unref>
    59cc:	e7e6      	b.n	599c <hci_num_completed_packets+0x80>
	__asm__ volatile(
    59ce:	f04f 0220 	mov.w	r2, #32
    59d2:	f3ef 8111 	mrs	r1, BASEPRI
    59d6:	f382 8811 	msr	BASEPRI, r2
    59da:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    59de:	68da      	ldr	r2, [r3, #12]
    59e0:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    59e2:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    59e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    59e8:	f8c3 900c 	str.w	r9, [r3, #12]
    59ec:	b98a      	cbnz	r2, 5a12 <hci_num_completed_packets+0xf6>
	list->head = node;
    59ee:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    59f2:	f381 8811 	msr	BASEPRI, r1
    59f6:	f3bf 8f6f 	isb	sy
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    59fa:	2101      	movs	r1, #1
    59fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
    5a00:	f01e ff14 	bl	2482c <atomic_or>
    5a04:	07c3      	lsls	r3, r0, #31
    5a06:	d4ba      	bmi.n	597e <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    5a08:	4659      	mov	r1, fp
    5a0a:	4650      	mov	r0, sl
    5a0c:	f025 fa98 	bl	2af40 <k_queue_append>
    5a10:	e7b5      	b.n	597e <hci_num_completed_packets+0x62>
	parent->next = child;
    5a12:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5a14:	6263      	str	r3, [r4, #36]	; 0x24
}
    5a16:	e7ec      	b.n	59f2 <hci_num_completed_packets+0xd6>
    5a18:	0002c010 	.word	0x0002c010
    5a1c:	0002bf50 	.word	0x0002bf50
    5a20:	0002eb65 	.word	0x0002eb65
    5a24:	0002eb81 	.word	0x0002eb81
    5a28:	20001438 	.word	0x20001438

00005a2c <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    5a2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    5a2e:	4b28      	ldr	r3, [pc, #160]	; (5ad0 <le_adv_start_add_conn+0xa4>)
    5a30:	b085      	sub	sp, #20
    5a32:	4605      	mov	r5, r0
    5a34:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    5a36:	7801      	ldrb	r1, [r0, #0]
    5a38:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5a3c:	f01e fef0 	bl	24820 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    5a40:	f010 0f40 	tst.w	r0, #64	; 0x40
    5a44:	461a      	mov	r2, r3
    5a46:	d008      	beq.n	5a5a <le_adv_start_add_conn+0x2e>
    5a48:	f103 0028 	add.w	r0, r3, #40	; 0x28
    5a4c:	f01e fee8 	bl	24820 <atomic_get>
    5a50:	05c0      	lsls	r0, r0, #23
    5a52:	d502      	bpl.n	5a5a <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    5a54:	7e1b      	ldrb	r3, [r3, #24]
    5a56:	428b      	cmp	r3, r1
    5a58:	d131      	bne.n	5abe <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    5a5a:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5a5c:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    5a5e:	f816 3b09 	ldrb.w	r3, [r6], #9
    5a62:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    5a66:	4630      	mov	r0, r6
    5a68:	2300      	movs	r3, #0
    5a6a:	9300      	str	r3, [sp, #0]
    5a6c:	f8cd 3003 	str.w	r3, [sp, #3]
    5a70:	f01e ff0b 	bl	2488a <bt_addr_le_cmp>
    5a74:	4604      	mov	r4, r0
    5a76:	7828      	ldrb	r0, [r5, #0]
    5a78:	b164      	cbz	r4, 5a94 <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    5a7a:	4631      	mov	r1, r6
    5a7c:	f002 f8a4 	bl	7bc8 <bt_conn_exists_le>
    5a80:	4604      	mov	r4, r0
    5a82:	b9f8      	cbnz	r0, 5ac4 <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    5a84:	7828      	ldrb	r0, [r5, #0]
    5a86:	4631      	mov	r1, r6
    5a88:	f001 ff5a 	bl	7940 <bt_conn_add_le>
	if (!conn) {
    5a8c:	4605      	mov	r5, r0
    5a8e:	b1e0      	cbz	r0, 5aca <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5a90:	2105      	movs	r1, #5
    5a92:	e00e      	b.n	5ab2 <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    5a94:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    5a98:	9302      	str	r3, [sp, #8]
    5a9a:	a902      	add	r1, sp, #8
    5a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5aa0:	f8ad 300c 	strh.w	r3, [sp, #12]
    5aa4:	f88d 300e 	strb.w	r3, [sp, #14]
    5aa8:	f001 ff4a 	bl	7940 <bt_conn_add_le>
		if (!conn) {
    5aac:	4605      	mov	r5, r0
    5aae:	b160      	cbz	r0, 5aca <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    5ab0:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    5ab2:	f001 ff7f 	bl	79b4 <bt_conn_set_state>
	*out_conn = conn;
    5ab6:	603d      	str	r5, [r7, #0]
	return 0;
}
    5ab8:	4620      	mov	r0, r4
    5aba:	b005      	add	sp, #20
    5abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    5abe:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5ac2:	e7f9      	b.n	5ab8 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    5ac4:	f06f 0415 	mvn.w	r4, #21
    5ac8:	e7f6      	b.n	5ab8 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    5aca:	f06f 040b 	mvn.w	r4, #11
    5ace:	e7f3      	b.n	5ab8 <le_adv_start_add_conn+0x8c>
    5ad0:	20000000 	.word	0x20000000

00005ad4 <hci_cmd_status>:
{
    5ad4:	b538      	push	{r3, r4, r5, lr}
    5ad6:	2104      	movs	r1, #4
    5ad8:	4604      	mov	r4, r0
    5ada:	3008      	adds	r0, #8
    5adc:	f020 f9e6 	bl	25eac <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    5ae0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    5ae2:	7801      	ldrb	r1, [r0, #0]
    5ae4:	8840      	ldrh	r0, [r0, #2]
    5ae6:	4622      	mov	r2, r4
    5ae8:	f7ff fdfa 	bl	56e0 <hci_cmd_done>
	if (ncmd) {
    5aec:	b125      	cbz	r5, 5af8 <hci_cmd_status+0x24>
    5aee:	4803      	ldr	r0, [pc, #12]	; (5afc <hci_cmd_status+0x28>)
}
    5af0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5af4:	f01a bac6 	b.w	20084 <z_impl_k_sem_give>
    5af8:	bd38      	pop	{r3, r4, r5, pc}
    5afa:	bf00      	nop
    5afc:	200000e0 	.word	0x200000e0

00005b00 <hci_cmd_complete>:
{
    5b00:	b538      	push	{r3, r4, r5, lr}
    5b02:	2103      	movs	r1, #3
    5b04:	4604      	mov	r4, r0
    5b06:	3008      	adds	r0, #8
    5b08:	f020 f9d0 	bl	25eac <net_buf_simple_pull_mem>
	status = buf->data[0];
    5b0c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    5b0e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    5b10:	7819      	ldrb	r1, [r3, #0]
    5b12:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    5b16:	4622      	mov	r2, r4
    5b18:	f7ff fde2 	bl	56e0 <hci_cmd_done>
	if (ncmd) {
    5b1c:	b125      	cbz	r5, 5b28 <hci_cmd_complete+0x28>
    5b1e:	4803      	ldr	r0, [pc, #12]	; (5b2c <hci_cmd_complete+0x2c>)
}
    5b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5b24:	f01a baae 	b.w	20084 <z_impl_k_sem_give>
    5b28:	bd38      	pop	{r3, r4, r5, pc}
    5b2a:	bf00      	nop
    5b2c:	200000e0 	.word	0x200000e0

00005b30 <bt_hci_cmd_create>:
{
    5b30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
    5b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5b38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b3c:	4605      	mov	r5, r0
    5b3e:	4816      	ldr	r0, [pc, #88]	; (5b98 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    5b40:	f8df 8058 	ldr.w	r8, [pc, #88]	; 5b9c <bt_hci_cmd_create+0x6c>
{
    5b44:	460e      	mov	r6, r1
    5b46:	f020 f923 	bl	25d90 <net_buf_alloc_fixed>
    5b4a:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5b4c:	f100 0b08 	add.w	fp, r0, #8
    5b50:	2100      	movs	r1, #0
    5b52:	2700      	movs	r7, #0
    5b54:	4658      	mov	r0, fp
    5b56:	f020 f940 	bl	25dda <net_buf_simple_reserve>
    5b5a:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    5b5c:	4620      	mov	r0, r4
    5b5e:	f012 fb81 	bl	18264 <net_buf_id>
    5b62:	f04f 0a0c 	mov.w	sl, #12
    5b66:	fb0a 8000 	mla	r0, sl, r0, r8
    5b6a:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    5b6c:	4620      	mov	r0, r4
    5b6e:	f012 fb79 	bl	18264 <net_buf_id>
    5b72:	fb0a 8000 	mla	r0, sl, r0, r8
    5b76:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    5b78:	4620      	mov	r0, r4
    5b7a:	f012 fb73 	bl	18264 <net_buf_id>
    5b7e:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
    5b82:	2103      	movs	r1, #3
    5b84:	6047      	str	r7, [r0, #4]
    5b86:	4658      	mov	r0, fp
    5b88:	f020 f95e 	bl	25e48 <net_buf_simple_add>
	hdr->param_len = param_len;
    5b8c:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    5b8e:	8005      	strh	r5, [r0, #0]
}
    5b90:	4620      	mov	r0, r4
    5b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5b96:	bf00      	nop
    5b98:	20000cb8 	.word	0x20000cb8
    5b9c:	2000295c 	.word	0x2000295c

00005ba0 <bt_hci_cmd_send_sync>:
{
    5ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ba4:	4607      	mov	r7, r0
    5ba6:	b086      	sub	sp, #24
    5ba8:	4615      	mov	r5, r2
	if (!buf) {
    5baa:	460c      	mov	r4, r1
    5bac:	b921      	cbnz	r1, 5bb8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    5bae:	f7ff ffbf 	bl	5b30 <bt_hci_cmd_create>
		if (!buf) {
    5bb2:	4604      	mov	r4, r0
    5bb4:	2800      	cmp	r0, #0
    5bb6:	d055      	beq.n	5c64 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    5bb8:	2201      	movs	r2, #1
    5bba:	2100      	movs	r1, #0
    5bbc:	4668      	mov	r0, sp
    5bbe:	f025 fb0b 	bl	2b1d8 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5bc2:	4620      	mov	r0, r4
    5bc4:	f012 fb4e 	bl	18264 <net_buf_id>
    5bc8:	4e28      	ldr	r6, [pc, #160]	; (5c6c <bt_hci_cmd_send_sync+0xcc>)
    5bca:	230c      	movs	r3, #12
    5bcc:	fb03 6000 	mla	r0, r3, r0, r6
    5bd0:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    5bd4:	4620      	mov	r0, r4
    5bd6:	f020 f911 	bl	25dfc <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5bda:	4825      	ldr	r0, [pc, #148]	; (5c70 <bt_hci_cmd_send_sync+0xd0>)
    5bdc:	4621      	mov	r1, r4
    5bde:	f020 f900 	bl	25de2 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5be2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5be6:	2300      	movs	r3, #0
    5be8:	4668      	mov	r0, sp
    5bea:	f01a fa71 	bl	200d0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    5bee:	4680      	mov	r8, r0
    5bf0:	b180      	cbz	r0, 5c14 <bt_hci_cmd_send_sync+0x74>
    5bf2:	4a20      	ldr	r2, [pc, #128]	; (5c74 <bt_hci_cmd_send_sync+0xd4>)
    5bf4:	4920      	ldr	r1, [pc, #128]	; (5c78 <bt_hci_cmd_send_sync+0xd8>)
    5bf6:	4821      	ldr	r0, [pc, #132]	; (5c7c <bt_hci_cmd_send_sync+0xdc>)
    5bf8:	f240 134d 	movw	r3, #333	; 0x14d
    5bfc:	f01d f8d7 	bl	22dae <printk>
    5c00:	481f      	ldr	r0, [pc, #124]	; (5c80 <bt_hci_cmd_send_sync+0xe0>)
    5c02:	4641      	mov	r1, r8
    5c04:	f01d f8d3 	bl	22dae <printk>
    5c08:	4040      	eors	r0, r0
    5c0a:	f380 8811 	msr	BASEPRI, r0
    5c0e:	f04f 0003 	mov.w	r0, #3
    5c12:	df02      	svc	2
	status = cmd(buf)->status;
    5c14:	4620      	mov	r0, r4
    5c16:	f012 fb25 	bl	18264 <net_buf_id>
    5c1a:	230c      	movs	r3, #12
    5c1c:	4343      	muls	r3, r0
    5c1e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    5c20:	b1be      	cbz	r6, 5c52 <bt_hci_cmd_send_sync+0xb2>
    5c22:	4a18      	ldr	r2, [pc, #96]	; (5c84 <bt_hci_cmd_send_sync+0xe4>)
    5c24:	4b18      	ldr	r3, [pc, #96]	; (5c88 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    5c26:	4819      	ldr	r0, [pc, #100]	; (5c8c <bt_hci_cmd_send_sync+0xec>)
    5c28:	1a9b      	subs	r3, r3, r2
    5c2a:	08db      	lsrs	r3, r3, #3
    5c2c:	019b      	lsls	r3, r3, #6
    5c2e:	f043 0302 	orr.w	r3, r3, #2
    5c32:	4632      	mov	r2, r6
    5c34:	4639      	mov	r1, r7
    5c36:	f01d fcf0 	bl	2361a <log_2>
		net_buf_unref(buf);
    5c3a:	4620      	mov	r0, r4
    5c3c:	f012 fbc6 	bl	183cc <net_buf_unref>
			return -EIO;
    5c40:	2e09      	cmp	r6, #9
    5c42:	bf0c      	ite	eq
    5c44:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    5c48:	f06f 0004 	mvnne.w	r0, #4
}
    5c4c:	b006      	add	sp, #24
    5c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    5c52:	b115      	cbz	r5, 5c5a <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    5c54:	602c      	str	r4, [r5, #0]
	return 0;
    5c56:	4630      	mov	r0, r6
    5c58:	e7f8      	b.n	5c4c <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    5c5a:	4620      	mov	r0, r4
    5c5c:	f012 fbb6 	bl	183cc <net_buf_unref>
	return 0;
    5c60:	4628      	mov	r0, r5
    5c62:	e7f3      	b.n	5c4c <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    5c64:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5c68:	e7f0      	b.n	5c4c <bt_hci_cmd_send_sync+0xac>
    5c6a:	bf00      	nop
    5c6c:	2000295c 	.word	0x2000295c
    5c70:	200000fc 	.word	0x200000fc
    5c74:	0002eb98 	.word	0x0002eb98
    5c78:	0002ebcc 	.word	0x0002ebcc
    5c7c:	0002ebd5 	.word	0x0002ebd5
    5c80:	0002ebf2 	.word	0x0002ebf2
    5c84:	0002bf50 	.word	0x0002bf50
    5c88:	0002c010 	.word	0x0002c010
    5c8c:	0002ec12 	.word	0x0002ec12

00005c90 <hci_le_read_max_data_len>:
{
    5c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5c92:	4606      	mov	r6, r0
    5c94:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5c96:	aa01      	add	r2, sp, #4
    5c98:	2100      	movs	r1, #0
    5c9a:	f242 002f 	movw	r0, #8239	; 0x202f
    5c9e:	f7ff ff7f 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    5ca2:	4604      	mov	r4, r0
    5ca4:	b160      	cbz	r0, 5cc0 <hci_le_read_max_data_len+0x30>
    5ca6:	490c      	ldr	r1, [pc, #48]	; (5cd8 <hci_le_read_max_data_len+0x48>)
    5ca8:	4b0c      	ldr	r3, [pc, #48]	; (5cdc <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    5caa:	480d      	ldr	r0, [pc, #52]	; (5ce0 <hci_le_read_max_data_len+0x50>)
    5cac:	1ac9      	subs	r1, r1, r3
    5cae:	08c9      	lsrs	r1, r1, #3
    5cb0:	0189      	lsls	r1, r1, #6
    5cb2:	f041 0101 	orr.w	r1, r1, #1
    5cb6:	f01d fc8f 	bl	235d8 <log_0>
}
    5cba:	4620      	mov	r0, r4
    5cbc:	b002      	add	sp, #8
    5cbe:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    5cc0:	9801      	ldr	r0, [sp, #4]
    5cc2:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5cc4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    5cc8:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5cca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    5cce:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    5cd0:	f012 fb7c 	bl	183cc <net_buf_unref>
	return 0;
    5cd4:	e7f1      	b.n	5cba <hci_le_read_max_data_len+0x2a>
    5cd6:	bf00      	nop
    5cd8:	0002c010 	.word	0x0002c010
    5cdc:	0002bf50 	.word	0x0002bf50
    5ce0:	0002ec2e 	.word	0x0002ec2e

00005ce4 <hci_set_ad>:
{
    5ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ce8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5cea:	2120      	movs	r1, #32
{
    5cec:	4682      	mov	sl, r0
    5cee:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    5cf0:	f7ff ff1e 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    5cf4:	4606      	mov	r6, r0
    5cf6:	2800      	cmp	r0, #0
    5cf8:	d05c      	beq.n	5db4 <hci_set_ad+0xd0>
    5cfa:	2120      	movs	r1, #32
    5cfc:	3008      	adds	r0, #8
    5cfe:	f020 f8a3 	bl	25e48 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    5d02:	2220      	movs	r2, #32
    5d04:	2100      	movs	r1, #0
    5d06:	4681      	mov	r9, r0
    5d08:	f025 fd48 	bl	2b79c <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    5d0c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    5d10:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    5d14:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    5d16:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    5d18:	f8d4 8000 	ldr.w	r8, [r4]
    5d1c:	2300      	movs	r3, #0
    5d1e:	6862      	ldr	r2, [r4, #4]
    5d20:	4293      	cmp	r3, r2
    5d22:	d30d      	bcc.n	5d40 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    5d24:	9b00      	ldr	r3, [sp, #0]
    5d26:	3408      	adds	r4, #8
    5d28:	429c      	cmp	r4, r3
    5d2a:	d1f5      	bne.n	5d18 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5d2c:	2200      	movs	r2, #0
    5d2e:	4631      	mov	r1, r6
    5d30:	4650      	mov	r0, sl
	*data_len = set_data_len;
    5d32:	f889 5000 	strb.w	r5, [r9]
}
    5d36:	b003      	add	sp, #12
    5d38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5d3c:	f7ff bf30 	b.w	5ba0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    5d40:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    5d44:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    5d48:	1ca8      	adds	r0, r5, #2
    5d4a:	1811      	adds	r1, r2, r0
    5d4c:	291f      	cmp	r1, #31
    5d4e:	d91a      	bls.n	5d86 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    5d50:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    5d54:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    5d58:	d101      	bne.n	5d5e <hci_set_ad+0x7a>
    5d5a:	2a00      	cmp	r2, #0
    5d5c:	dc11      	bgt.n	5d82 <hci_set_ad+0x9e>
    5d5e:	4b17      	ldr	r3, [pc, #92]	; (5dbc <hci_set_ad+0xd8>)
    5d60:	4917      	ldr	r1, [pc, #92]	; (5dc0 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    5d62:	4818      	ldr	r0, [pc, #96]	; (5dc4 <hci_set_ad+0xe0>)
    5d64:	1ac9      	subs	r1, r1, r3
    5d66:	08c9      	lsrs	r1, r1, #3
    5d68:	0189      	lsls	r1, r1, #6
    5d6a:	f041 0101 	orr.w	r1, r1, #1
    5d6e:	f01d fc33 	bl	235d8 <log_0>
		net_buf_unref(buf);
    5d72:	4630      	mov	r0, r6
    5d74:	f012 fb2a 	bl	183cc <net_buf_unref>
					return -EINVAL;
    5d78:	f06f 0015 	mvn.w	r0, #21
}
    5d7c:	b003      	add	sp, #12
    5d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    5d82:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    5d86:	b2d7      	uxtb	r7, r2
    5d88:	1c79      	adds	r1, r7, #1
    5d8a:	f80b 1005 	strb.w	r1, [fp, r5]
    5d8e:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    5d90:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    5d92:	fa5b f080 	uxtab	r0, fp, r0
    5d96:	f80b c001 	strb.w	ip, [fp, r1]
    5d9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
    5d9e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    5da0:	3702      	adds	r7, #2
    5da2:	f025 fcda 	bl	2b75a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    5da6:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    5da8:	443d      	add	r5, r7
    5daa:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    5dac:	3301      	adds	r3, #1
    5dae:	f108 0808 	add.w	r8, r8, #8
    5db2:	e7b4      	b.n	5d1e <hci_set_ad+0x3a>
		return -ENOBUFS;
    5db4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    5db8:	e7e0      	b.n	5d7c <hci_set_ad+0x98>
    5dba:	bf00      	nop
    5dbc:	0002bf50 	.word	0x0002bf50
    5dc0:	0002c010 	.word	0x0002c010
    5dc4:	0002ec4e 	.word	0x0002ec4e

00005dc8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    5dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dcc:	b087      	sub	sp, #28
    5dce:	4606      	mov	r6, r0
    5dd0:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    5dd4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    5dd8:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    5ddc:	460c      	mov	r4, r1
    5dde:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    5de0:	2100      	movs	r1, #0
    5de2:	2210      	movs	r2, #16
    5de4:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    5de6:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    5de8:	f025 fcd8 	bl	2b79c <memset>
	if (use_name) {
    5dec:	f1b8 0f00 	cmp.w	r8, #0
    5df0:	d00e      	beq.n	5e10 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    5df2:	bbb4      	cbnz	r4, 5e62 <le_adv_update.constprop.0+0x9a>
    5df4:	2d00      	cmp	r5, #0
    5df6:	d13f      	bne.n	5e78 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    5df8:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 5eac <le_adv_update.constprop.0+0xe4>
    5dfc:	4658      	mov	r0, fp
    5dfe:	f7fa fb45 	bl	48c <strlen>
    5e02:	2309      	movs	r3, #9
    5e04:	f88d 3000 	strb.w	r3, [sp]
    5e08:	f88d 0001 	strb.w	r0, [sp, #1]
    5e0c:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    5e10:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    5e14:	f1b8 0f00 	cmp.w	r8, #0
    5e18:	d030      	beq.n	5e7c <le_adv_update.constprop.0+0xb4>
    5e1a:	f1ba 0f00 	cmp.w	sl, #0
    5e1e:	d12d      	bne.n	5e7c <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    5e20:	2301      	movs	r3, #1
			d[1].data = &data;
    5e22:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    5e26:	9305      	str	r3, [sp, #20]
			d_len = 2;
    5e28:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    5e2a:	a902      	add	r1, sp, #8
    5e2c:	f242 0008 	movw	r0, #8200	; 0x2008
    5e30:	f7ff ff58 	bl	5ce4 <hci_set_ad>
		if (err) {
    5e34:	4604      	mov	r4, r0
    5e36:	b938      	cbnz	r0, 5e48 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    5e38:	f1ba 0f00 	cmp.w	sl, #0
    5e3c:	d120      	bne.n	5e80 <le_adv_update.constprop.0+0xb8>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    5e3e:	2104      	movs	r1, #4
    5e40:	f106 0010 	add.w	r0, r6, #16
    5e44:	f01e fcf2 	bl	2482c <atomic_or>
}
    5e48:	4620      	mov	r0, r4
    5e4a:	b007      	add	sp, #28
    5e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    5e50:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    5e54:	3a08      	subs	r2, #8
    5e56:	2a01      	cmp	r2, #1
    5e58:	d925      	bls.n	5ea6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    5e5a:	3301      	adds	r3, #1
    5e5c:	429f      	cmp	r7, r3
    5e5e:	d1f7      	bne.n	5e50 <le_adv_update.constprop.0+0x88>
    5e60:	e7c8      	b.n	5df4 <le_adv_update.constprop.0+0x2c>
    5e62:	2300      	movs	r3, #0
    5e64:	e7fa      	b.n	5e5c <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    5e66:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    5e6a:	3a08      	subs	r2, #8
    5e6c:	2a01      	cmp	r2, #1
    5e6e:	d91a      	bls.n	5ea6 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    5e70:	3301      	adds	r3, #1
    5e72:	4599      	cmp	r9, r3
    5e74:	d1f7      	bne.n	5e66 <le_adv_update.constprop.0+0x9e>
    5e76:	e7bf      	b.n	5df8 <le_adv_update.constprop.0+0x30>
    5e78:	2300      	movs	r3, #0
    5e7a:	e7fa      	b.n	5e72 <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    5e7c:	2201      	movs	r2, #1
    5e7e:	e7d4      	b.n	5e2a <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    5e80:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    5e84:	2201      	movs	r2, #1
    5e86:	f1b8 0f00 	cmp.w	r8, #0
    5e8a:	d003      	beq.n	5e94 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    5e8c:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    5e8e:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    5e92:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5e94:	a902      	add	r1, sp, #8
    5e96:	f242 0009 	movw	r0, #8201	; 0x2009
    5e9a:	f7ff ff23 	bl	5ce4 <hci_set_ad>
		if (err) {
    5e9e:	2800      	cmp	r0, #0
    5ea0:	d0cd      	beq.n	5e3e <le_adv_update.constprop.0+0x76>
    5ea2:	4604      	mov	r4, r0
    5ea4:	e7d0      	b.n	5e48 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    5ea6:	f06f 0415 	mvn.w	r4, #21
    5eaa:	e7cd      	b.n	5e48 <le_adv_update.constprop.0+0x80>
    5eac:	20000118 	.word	0x20000118

00005eb0 <set_random_address>:
{
    5eb0:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    5eb2:	4e15      	ldr	r6, [pc, #84]	; (5f08 <set_random_address+0x58>)
    5eb4:	2206      	movs	r2, #6
    5eb6:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    5eba:	4605      	mov	r5, r0
    5ebc:	f025 fc3f 	bl	2b73e <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5ec0:	4602      	mov	r2, r0
    5ec2:	b1d8      	cbz	r0, 5efc <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5ec4:	2106      	movs	r1, #6
    5ec6:	f242 0005 	movw	r0, #8197	; 0x2005
    5eca:	f7ff fe31 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    5ece:	4604      	mov	r4, r0
    5ed0:	b1b0      	cbz	r0, 5f00 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5ed2:	2206      	movs	r2, #6
    5ed4:	4629      	mov	r1, r5
    5ed6:	3008      	adds	r0, #8
    5ed8:	f01f ffbc 	bl	25e54 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5edc:	2200      	movs	r2, #0
    5ede:	4621      	mov	r1, r4
    5ee0:	f242 0005 	movw	r0, #8197	; 0x2005
    5ee4:	f7ff fe5c 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    5ee8:	4602      	mov	r2, r0
    5eea:	b938      	cbnz	r0, 5efc <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    5eec:	4629      	mov	r1, r5
    5eee:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    5ef2:	f01e fccd 	bl	24890 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5ef6:	2301      	movs	r3, #1
    5ef8:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    5efc:	4610      	mov	r0, r2
    5efe:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5f00:	f06f 0268 	mvn.w	r2, #104	; 0x68
    5f04:	e7fa      	b.n	5efc <set_random_address+0x4c>
    5f06:	bf00      	nop
    5f08:	20000000 	.word	0x20000000

00005f0c <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    5f0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f10:	4604      	mov	r4, r0
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5f12:	f011 0001 	ands.w	r0, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    5f16:	460e      	mov	r6, r1
    5f18:	4690      	mov	r8, r2
    5f1a:	461d      	mov	r5, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    5f1c:	d027      	beq.n	5f6e <le_adv_set_random_addr.isra.0+0x62>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    5f1e:	4f27      	ldr	r7, [pc, #156]	; (5fbc <le_adv_set_random_addr.isra.0+0xb0>)
    5f20:	b12a      	cbz	r2, 5f2e <le_adv_set_random_addr.isra.0+0x22>
    5f22:	0688      	lsls	r0, r1, #26
    5f24:	d503      	bpl.n	5f2e <le_adv_set_random_addr.isra.0+0x22>
    5f26:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
    5f2a:	0659      	lsls	r1, r3, #25
    5f2c:	d542      	bpl.n	5fb4 <le_adv_set_random_addr.isra.0+0xa8>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5f2e:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    5f32:	ea4f 09c4 	mov.w	r9, r4, lsl #3
    5f36:	5cfb      	ldrb	r3, [r7, r3]
    5f38:	2b01      	cmp	r3, #1
    5f3a:	d008      	beq.n	5f4e <le_adv_set_random_addr.isra.0+0x42>
			*own_addr_type = id_addr->type;
    5f3c:	eba9 0404 	sub.w	r4, r9, r4
    5f40:	5d3b      	ldrb	r3, [r7, r4]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5f42:	f1b8 0f00 	cmp.w	r8, #0
    5f46:	d10d      	bne.n	5f64 <le_adv_set_random_addr.isra.0+0x58>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5f48:	702b      	strb	r3, [r5, #0]
	return 0;
    5f4a:	2000      	movs	r0, #0
    5f4c:	e007      	b.n	5f5e <le_adv_set_random_addr.isra.0+0x52>
				err = set_adv_random_address(adv, &id_addr->a);
    5f4e:	2007      	movs	r0, #7
    5f50:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    5f54:	4438      	add	r0, r7
    5f56:	f7ff ffab 	bl	5eb0 <set_random_address>
				if (err) {
    5f5a:	2800      	cmp	r0, #0
    5f5c:	d0ee      	beq.n	5f3c <le_adv_set_random_addr.isra.0+0x30>
}
    5f5e:	b003      	add	sp, #12
    5f60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    5f64:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    5f66:	bf48      	it	mi
    5f68:	f043 0302 	orrmi.w	r3, r3, #2
    5f6c:	e7ec      	b.n	5f48 <le_adv_set_random_addr.isra.0+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    5f6e:	074b      	lsls	r3, r1, #29
    5f70:	d510      	bpl.n	5f94 <le_adv_set_random_addr.isra.0+0x88>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    5f72:	4e12      	ldr	r6, [pc, #72]	; (5fbc <le_adv_set_random_addr.isra.0+0xb0>)
    5f74:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    5f78:	00e7      	lsls	r7, r4, #3
    5f7a:	5cf3      	ldrb	r3, [r6, r3]
    5f7c:	2b01      	cmp	r3, #1
    5f7e:	d105      	bne.n	5f8c <le_adv_set_random_addr.isra.0+0x80>
				err = set_adv_random_address(adv, &id_addr->a);
    5f80:	2007      	movs	r0, #7
    5f82:	fb10 3004 	smlabb	r0, r0, r4, r3
		return set_random_address(addr);
    5f86:	4430      	add	r0, r6
    5f88:	f7ff ff92 	bl	5eb0 <set_random_address>
			*own_addr_type = id_addr->type;
    5f8c:	1b3c      	subs	r4, r7, r4
    5f8e:	5d33      	ldrb	r3, [r6, r4]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5f90:	702b      	strb	r3, [r5, #0]
		if (err) {
    5f92:	e7e4      	b.n	5f5e <le_adv_set_random_addr.isra.0+0x52>
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    5f94:	2106      	movs	r1, #6
    5f96:	4668      	mov	r0, sp
    5f98:	f008 f930 	bl	e1fc <bt_rand>
	if (err) {
    5f9c:	b940      	cbnz	r0, 5fb0 <le_adv_set_random_addr.isra.0+0xa4>
	BT_ADDR_SET_NRPA(&nrpa);
    5f9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
    5fa2:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
    5fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5fa8:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
    5fac:	f7ff ff80 	bl	5eb0 <set_random_address>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    5fb0:	2301      	movs	r3, #1
    5fb2:	e7ed      	b.n	5f90 <le_adv_set_random_addr.isra.0+0x84>
			return -ENOTSUP;
    5fb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5fb8:	e7d1      	b.n	5f5e <le_adv_set_random_addr.isra.0+0x52>
    5fba:	bf00      	nop
    5fbc:	20000000 	.word	0x20000000

00005fc0 <set_le_adv_enable_legacy>:
{
    5fc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5fc2:	4606      	mov	r6, r0
    5fc4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    5fc6:	f242 000a 	movw	r0, #8202	; 0x200a
    5fca:	2101      	movs	r1, #1
    5fcc:	f7ff fdb0 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    5fd0:	4604      	mov	r4, r0
    5fd2:	b1e8      	cbz	r0, 6010 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    5fd4:	3008      	adds	r0, #8
    5fd6:	b1cd      	cbz	r5, 600c <set_le_adv_enable_legacy+0x4c>
	return net_buf_simple_add_u8(&buf->b, val);
    5fd8:	2101      	movs	r1, #1
    5fda:	f01f ff45 	bl	25e68 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    5fde:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    5fe0:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    5fe2:	4620      	mov	r0, r4
    5fe4:	9302      	str	r3, [sp, #8]
	state->target = target;
    5fe6:	9601      	str	r6, [sp, #4]
	state->val = val;
    5fe8:	f88d 500c 	strb.w	r5, [sp, #12]
    5fec:	f012 f93a 	bl	18264 <net_buf_id>
    5ff0:	4b09      	ldr	r3, [pc, #36]	; (6018 <set_le_adv_enable_legacy+0x58>)
    5ff2:	220c      	movs	r2, #12
    5ff4:	fb02 3000 	mla	r0, r2, r0, r3
    5ff8:	ab01      	add	r3, sp, #4
    5ffa:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    5ffc:	2200      	movs	r2, #0
    5ffe:	4621      	mov	r1, r4
    6000:	f242 000a 	movw	r0, #8202	; 0x200a
    6004:	f7ff fdcc 	bl	5ba0 <bt_hci_cmd_send_sync>
}
    6008:	b004      	add	sp, #16
    600a:	bd70      	pop	{r4, r5, r6, pc}
    600c:	4629      	mov	r1, r5
    600e:	e7e4      	b.n	5fda <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    6010:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6014:	e7f8      	b.n	6008 <set_le_adv_enable_legacy+0x48>
    6016:	bf00      	nop
    6018:	2000295c 	.word	0x2000295c

0000601c <bt_send>:
	return bt_dev.drv->send(buf);
    601c:	4b02      	ldr	r3, [pc, #8]	; (6028 <bt_send+0xc>)
    601e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
    6022:	691b      	ldr	r3, [r3, #16]
    6024:	4718      	bx	r3
    6026:	bf00      	nop
    6028:	20000000 	.word	0x20000000

0000602c <bt_hci_cmd_send>:
{
    602c:	b538      	push	{r3, r4, r5, lr}
    602e:	4605      	mov	r5, r0
	if (!buf) {
    6030:	460c      	mov	r4, r1
    6032:	b919      	cbnz	r1, 603c <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    6034:	f7ff fd7c 	bl	5b30 <bt_hci_cmd_create>
		if (!buf) {
    6038:	4604      	mov	r4, r0
    603a:	b1f0      	cbz	r0, 607a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    603c:	f640 4335 	movw	r3, #3125	; 0xc35
    6040:	429d      	cmp	r5, r3
    6042:	d114      	bne.n	606e <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
    6044:	4620      	mov	r0, r4
    6046:	f7ff ffe9 	bl	601c <bt_send>
		if (err) {
    604a:	4605      	mov	r5, r0
    604c:	b168      	cbz	r0, 606a <bt_hci_cmd_send+0x3e>
    604e:	4b0c      	ldr	r3, [pc, #48]	; (6080 <bt_hci_cmd_send+0x54>)
    6050:	4a0c      	ldr	r2, [pc, #48]	; (6084 <bt_hci_cmd_send+0x58>)
    6052:	1ad2      	subs	r2, r2, r3
    6054:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    6056:	0192      	lsls	r2, r2, #6
    6058:	4601      	mov	r1, r0
    605a:	f042 0201 	orr.w	r2, r2, #1
    605e:	480a      	ldr	r0, [pc, #40]	; (6088 <bt_hci_cmd_send+0x5c>)
    6060:	f01d fac7 	bl	235f2 <log_1>
			net_buf_unref(buf);
    6064:	4620      	mov	r0, r4
    6066:	f012 f9b1 	bl	183cc <net_buf_unref>
}
    606a:	4628      	mov	r0, r5
    606c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    606e:	4807      	ldr	r0, [pc, #28]	; (608c <bt_hci_cmd_send+0x60>)
    6070:	4621      	mov	r1, r4
    6072:	f01f feb6 	bl	25de2 <net_buf_put>
	return 0;
    6076:	2500      	movs	r5, #0
    6078:	e7f7      	b.n	606a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    607a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    607e:	e7f4      	b.n	606a <bt_hci_cmd_send+0x3e>
    6080:	0002bf50 	.word	0x0002bf50
    6084:	0002c010 	.word	0x0002c010
    6088:	0002ec67 	.word	0x0002ec67
    608c:	200000fc 	.word	0x200000fc

00006090 <conn_auto_initiate>:
{
    6090:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6092:	7a83      	ldrb	r3, [r0, #10]
    6094:	2b07      	cmp	r3, #7
{
    6096:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6098:	d11e      	bne.n	60d8 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    609a:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    609c:	4630      	mov	r0, r6
    609e:	f01e fbbf 	bl	24820 <atomic_get>
    60a2:	0483      	lsls	r3, r0, #18
    60a4:	d41a      	bmi.n	60dc <conn_auto_initiate+0x4c>
    60a6:	78e3      	ldrb	r3, [r4, #3]
    60a8:	b123      	cbz	r3, 60b4 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    60aa:	4b31      	ldr	r3, [pc, #196]	; (6170 <conn_auto_initiate+0xe0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    60ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    60b0:	071d      	lsls	r5, r3, #28
    60b2:	d513      	bpl.n	60dc <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    60b4:	2102      	movs	r1, #2
    60b6:	f242 0016 	movw	r0, #8214	; 0x2016
    60ba:	f7ff fd39 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    60be:	4605      	mov	r5, r0
    60c0:	b160      	cbz	r0, 60dc <conn_auto_initiate+0x4c>
	return net_buf_simple_add(&buf->b, len);
    60c2:	2102      	movs	r1, #2
    60c4:	3008      	adds	r0, #8
    60c6:	f01f febf 	bl	25e48 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    60ca:	8823      	ldrh	r3, [r4, #0]
    60cc:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    60ce:	4629      	mov	r1, r5
    60d0:	f242 0016 	movw	r0, #8214	; 0x2016
    60d4:	f7ff ffaa 	bl	602c <bt_hci_cmd_send>
}
    60d8:	b004      	add	sp, #16
    60da:	bd70      	pop	{r4, r5, r6, pc}
    60dc:	4630      	mov	r0, r6
    60de:	f01e fb9f 	bl	24820 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    60e2:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    60e6:	4d22      	ldr	r5, [pc, #136]	; (6170 <conn_auto_initiate+0xe0>)
    60e8:	f3c0 3100 	ubfx	r1, r0, #12, #1
    60ec:	d11a      	bne.n	6124 <conn_auto_initiate+0x94>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    60ee:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    60f2:	07d8      	lsls	r0, r3, #31
    60f4:	d516      	bpl.n	6124 <conn_auto_initiate+0x94>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    60f6:	2302      	movs	r3, #2
    60f8:	9100      	str	r1, [sp, #0]
    60fa:	461a      	mov	r2, r3
    60fc:	4620      	mov	r0, r4
    60fe:	f01e fc2b 	bl	24958 <bt_le_set_phy>
		if (!err) {
    6102:	4601      	mov	r1, r0
    6104:	b920      	cbnz	r0, 6110 <conn_auto_initiate+0x80>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6106:	2180      	movs	r1, #128	; 0x80
    6108:	4630      	mov	r0, r6
    610a:	f01e fb8f 	bl	2482c <atomic_or>
			return;
    610e:	e7e3      	b.n	60d8 <conn_auto_initiate+0x48>
    6110:	4a18      	ldr	r2, [pc, #96]	; (6174 <conn_auto_initiate+0xe4>)
    6112:	4b19      	ldr	r3, [pc, #100]	; (6178 <conn_auto_initiate+0xe8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    6114:	4819      	ldr	r0, [pc, #100]	; (617c <conn_auto_initiate+0xec>)
    6116:	1ad2      	subs	r2, r2, r3
    6118:	08d2      	lsrs	r2, r2, #3
    611a:	0192      	lsls	r2, r2, #6
    611c:	f042 0201 	orr.w	r2, r2, #1
    6120:	f01d fa67 	bl	235f2 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    6124:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    6128:	069a      	lsls	r2, r3, #26
    612a:	d5d5      	bpl.n	60d8 <conn_auto_initiate+0x48>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    612c:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    6130:	689b      	ldr	r3, [r3, #8]
    6132:	079b      	lsls	r3, r3, #30
    6134:	d5d0      	bpl.n	60d8 <conn_auto_initiate+0x48>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    6136:	f10d 010e 	add.w	r1, sp, #14
    613a:	a803      	add	r0, sp, #12
    613c:	f7ff fda8 	bl	5c90 <hci_le_read_max_data_len>
			if (!err) {
    6140:	2800      	cmp	r0, #0
    6142:	d1c9      	bne.n	60d8 <conn_auto_initiate+0x48>
				err = bt_le_set_data_len(conn,
    6144:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6148:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    614c:	4620      	mov	r0, r4
    614e:	f01e fbe6 	bl	2491e <bt_le_set_data_len>
				if (err) {
    6152:	4601      	mov	r1, r0
    6154:	2800      	cmp	r0, #0
    6156:	d0bf      	beq.n	60d8 <conn_auto_initiate+0x48>
    6158:	4b07      	ldr	r3, [pc, #28]	; (6178 <conn_auto_initiate+0xe8>)
    615a:	4a06      	ldr	r2, [pc, #24]	; (6174 <conn_auto_initiate+0xe4>)
					BT_ERR("Failed to set data len (%d)", err);
    615c:	4808      	ldr	r0, [pc, #32]	; (6180 <conn_auto_initiate+0xf0>)
    615e:	1ad2      	subs	r2, r2, r3
    6160:	08d2      	lsrs	r2, r2, #3
    6162:	0192      	lsls	r2, r2, #6
    6164:	f042 0201 	orr.w	r2, r2, #1
    6168:	f01d fa43 	bl	235f2 <log_1>
		}
    616c:	e7b4      	b.n	60d8 <conn_auto_initiate+0x48>
    616e:	bf00      	nop
    6170:	20000000 	.word	0x20000000
    6174:	0002c010 	.word	0x0002c010
    6178:	0002bf50 	.word	0x0002bf50
    617c:	0002ec89 	.word	0x0002ec89
    6180:	0002eca3 	.word	0x0002eca3

00006184 <le_phy_update_complete>:
{
    6184:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6186:	6883      	ldr	r3, [r0, #8]
    6188:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    618c:	4628      	mov	r0, r5
    618e:	f001 fc05 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    6192:	4604      	mov	r4, r0
    6194:	b960      	cbnz	r0, 61b0 <le_phy_update_complete+0x2c>
    6196:	4b11      	ldr	r3, [pc, #68]	; (61dc <le_phy_update_complete+0x58>)
    6198:	4a11      	ldr	r2, [pc, #68]	; (61e0 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    619a:	4812      	ldr	r0, [pc, #72]	; (61e4 <le_phy_update_complete+0x60>)
    619c:	1ad2      	subs	r2, r2, r3
    619e:	08d2      	lsrs	r2, r2, #3
    61a0:	0192      	lsls	r2, r2, #6
    61a2:	4629      	mov	r1, r5
    61a4:	f042 0201 	orr.w	r2, r2, #1
}
    61a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    61ac:	f01d ba21 	b.w	235f2 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    61b0:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    61b2:	f06f 0180 	mvn.w	r1, #128	; 0x80
    61b6:	4628      	mov	r0, r5
    61b8:	f01e fb47 	bl	2484a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    61bc:	0603      	lsls	r3, r0, #24
    61be:	d507      	bpl.n	61d0 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    61c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    61c4:	4628      	mov	r0, r5
    61c6:	f01e fb31 	bl	2482c <atomic_or>
		conn_auto_initiate(conn);
    61ca:	4620      	mov	r0, r4
    61cc:	f7ff ff60 	bl	6090 <conn_auto_initiate>
	bt_conn_unref(conn);
    61d0:	4620      	mov	r0, r4
}
    61d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    61d6:	f01e bceb 	b.w	24bb0 <bt_conn_unref>
    61da:	bf00      	nop
    61dc:	0002bf50 	.word	0x0002bf50
    61e0:	0002c010 	.word	0x0002c010
    61e4:	0002ea29 	.word	0x0002ea29

000061e8 <le_remote_feat_complete>:
{
    61e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    61ea:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    61ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    61f0:	4630      	mov	r0, r6
    61f2:	f001 fbd3 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    61f6:	4604      	mov	r4, r0
    61f8:	b960      	cbnz	r0, 6214 <le_remote_feat_complete+0x2c>
    61fa:	4a11      	ldr	r2, [pc, #68]	; (6240 <le_remote_feat_complete+0x58>)
    61fc:	4b11      	ldr	r3, [pc, #68]	; (6244 <le_remote_feat_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    61fe:	4812      	ldr	r0, [pc, #72]	; (6248 <le_remote_feat_complete+0x60>)
    6200:	1ad2      	subs	r2, r2, r3
    6202:	08d2      	lsrs	r2, r2, #3
    6204:	0192      	lsls	r2, r2, #6
    6206:	4631      	mov	r1, r6
    6208:	f042 0201 	orr.w	r2, r2, #1
}
    620c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6210:	f01d b9ef 	b.w	235f2 <log_1>
	if (!evt->status) {
    6214:	782b      	ldrb	r3, [r5, #0]
    6216:	b933      	cbnz	r3, 6226 <le_remote_feat_complete+0x3e>
    6218:	f855 3f03 	ldr.w	r3, [r5, #3]!
    621c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    6220:	686b      	ldr	r3, [r5, #4]
    6222:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    6226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    622a:	1d20      	adds	r0, r4, #4
    622c:	f01e fafe 	bl	2482c <atomic_or>
	conn_auto_initiate(conn);
    6230:	4620      	mov	r0, r4
    6232:	f7ff ff2d 	bl	6090 <conn_auto_initiate>
	bt_conn_unref(conn);
    6236:	4620      	mov	r0, r4
}
    6238:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    623c:	f01e bcb8 	b.w	24bb0 <bt_conn_unref>
    6240:	0002c010 	.word	0x0002c010
    6244:	0002bf50 	.word	0x0002bf50
    6248:	0002ea29 	.word	0x0002ea29

0000624c <le_conn_param_neg_reply>:
{
    624c:	b570      	push	{r4, r5, r6, lr}
    624e:	4606      	mov	r6, r0
    6250:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    6252:	f242 0021 	movw	r0, #8225	; 0x2021
    6256:	2103      	movs	r1, #3
    6258:	f7ff fc6a 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    625c:	4604      	mov	r4, r0
    625e:	b958      	cbnz	r0, 6278 <le_conn_param_neg_reply+0x2c>
    6260:	490c      	ldr	r1, [pc, #48]	; (6294 <le_conn_param_neg_reply+0x48>)
    6262:	4b0d      	ldr	r3, [pc, #52]	; (6298 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    6264:	480d      	ldr	r0, [pc, #52]	; (629c <le_conn_param_neg_reply+0x50>)
    6266:	1ac9      	subs	r1, r1, r3
    6268:	08c9      	lsrs	r1, r1, #3
    626a:	0189      	lsls	r1, r1, #6
}
    626c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    6270:	f041 0101 	orr.w	r1, r1, #1
    6274:	f01d b9b0 	b.w	235d8 <log_0>
    6278:	2103      	movs	r1, #3
    627a:	3008      	adds	r0, #8
    627c:	f01f fde4 	bl	25e48 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    6280:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    6282:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6284:	4621      	mov	r1, r4
    6286:	f242 0021 	movw	r0, #8225	; 0x2021
}
    628a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    628e:	f7ff becd 	b.w	602c <bt_hci_cmd_send>
    6292:	bf00      	nop
    6294:	0002c010 	.word	0x0002c010
    6298:	0002bf50 	.word	0x0002bf50
    629c:	0002ecbf 	.word	0x0002ecbf

000062a0 <le_conn_param_req>:
{
    62a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    62a2:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    62a4:	78d9      	ldrb	r1, [r3, #3]
    62a6:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    62a8:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    62aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    62ae:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    62b2:	7959      	ldrb	r1, [r3, #5]
    62b4:	791a      	ldrb	r2, [r3, #4]
    62b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    62ba:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    62be:	799a      	ldrb	r2, [r3, #6]
    62c0:	79d9      	ldrb	r1, [r3, #7]
    62c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    62c6:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    62ca:	7a1a      	ldrb	r2, [r3, #8]
    62cc:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    62ce:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    62d0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    62d4:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    62d6:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    62da:	f001 fb5f 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    62de:	4606      	mov	r6, r0
    62e0:	b980      	cbnz	r0, 6304 <le_conn_param_req+0x64>
    62e2:	4b20      	ldr	r3, [pc, #128]	; (6364 <le_conn_param_req+0xc4>)
    62e4:	4a20      	ldr	r2, [pc, #128]	; (6368 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    62e6:	4821      	ldr	r0, [pc, #132]	; (636c <le_conn_param_req+0xcc>)
    62e8:	1ad2      	subs	r2, r2, r3
    62ea:	08d2      	lsrs	r2, r2, #3
    62ec:	0192      	lsls	r2, r2, #6
    62ee:	4621      	mov	r1, r4
    62f0:	f042 0201 	orr.w	r2, r2, #1
    62f4:	f01d f97d 	bl	235f2 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    62f8:	2102      	movs	r1, #2
    62fa:	4620      	mov	r0, r4
    62fc:	f7ff ffa6 	bl	624c <le_conn_param_neg_reply>
}
    6300:	b003      	add	sp, #12
    6302:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    6304:	4669      	mov	r1, sp
    6306:	f001 f99d 	bl	7644 <le_param_req>
    630a:	b938      	cbnz	r0, 631c <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    630c:	211e      	movs	r1, #30
    630e:	4620      	mov	r0, r4
    6310:	f7ff ff9c 	bl	624c <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    6314:	4630      	mov	r0, r6
    6316:	f01e fc4b 	bl	24bb0 <bt_conn_unref>
    631a:	e7f1      	b.n	6300 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    631c:	210e      	movs	r1, #14
    631e:	f242 0020 	movw	r0, #8224	; 0x2020
    6322:	f7ff fc05 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    6326:	4605      	mov	r5, r0
    6328:	2800      	cmp	r0, #0
    632a:	d0f3      	beq.n	6314 <le_conn_param_req+0x74>
    632c:	210e      	movs	r1, #14
    632e:	3008      	adds	r0, #8
    6330:	f01f fd8a 	bl	25e48 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    6334:	220e      	movs	r2, #14
    6336:	4604      	mov	r4, r0
    6338:	2100      	movs	r1, #0
    633a:	f025 fa2f 	bl	2b79c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    633e:	f8bd 3000 	ldrh.w	r3, [sp]
    6342:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    6344:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6348:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    634a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    634e:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6350:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    6354:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    6356:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    6358:	4629      	mov	r1, r5
    635a:	f242 0020 	movw	r0, #8224	; 0x2020
    635e:	f7ff fe65 	bl	602c <bt_hci_cmd_send>
    6362:	e7d7      	b.n	6314 <le_conn_param_req+0x74>
    6364:	0002bf50 	.word	0x0002bf50
    6368:	0002c010 	.word	0x0002c010
    636c:	0002ea29 	.word	0x0002ea29

00006370 <hci_tx_thread>:
{
    6370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6374:	4d51      	ldr	r5, [pc, #324]	; (64bc <hci_tx_thread+0x14c>)
    6376:	4b52      	ldr	r3, [pc, #328]	; (64c0 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    6378:	f8df 914c 	ldr.w	r9, [pc, #332]	; 64c8 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    637c:	f8df a174 	ldr.w	sl, [pc, #372]	; 64f4 <hci_tx_thread+0x184>
    6380:	1aed      	subs	r5, r5, r3
    6382:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    6384:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6388:	484e      	ldr	r0, [pc, #312]	; (64c4 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    638a:	f36f 3310 	bfc	r3, #12, #5
    638e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6392:	f001 fa97 	bl	78c4 <bt_conn_prepare_events>
    6396:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    6398:	484b      	ldr	r0, [pc, #300]	; (64c8 <hci_tx_thread+0x158>)
    639a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    639e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63a2:	4639      	mov	r1, r7
    63a4:	f01a fa0c 	bl	207c0 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    63a8:	b160      	cbz	r0, 63c4 <hci_tx_thread+0x54>
    63aa:	4948      	ldr	r1, [pc, #288]	; (64cc <hci_tx_thread+0x15c>)
    63ac:	4848      	ldr	r0, [pc, #288]	; (64d0 <hci_tx_thread+0x160>)
    63ae:	f241 4371 	movw	r3, #5233	; 0x1471
    63b2:	4652      	mov	r2, sl
    63b4:	f01c fcfb 	bl	22dae <printk>
    63b8:	4040      	eors	r0, r0
    63ba:	f380 8811 	msr	BASEPRI, r0
    63be:	f04f 0003 	mov.w	r0, #3
    63c2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    63c4:	4e43      	ldr	r6, [pc, #268]	; (64d4 <hci_tx_thread+0x164>)
{
    63c6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 64c8 <hci_tx_thread+0x158>
    63ca:	f106 0be0 	add.w	fp, r6, #224	; 0xe0
	for (; count; ev++, count--) {
    63ce:	b917      	cbnz	r7, 63d6 <hci_tx_thread+0x66>
	z_impl_k_yield();
    63d0:	f019 fde2 	bl	1ff98 <z_impl_k_yield>
	while (1) {
    63d4:	e7d6      	b.n	6384 <hci_tx_thread+0x14>
		switch (ev->state) {
    63d6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    63da:	f3c1 3104 	ubfx	r1, r1, #12, #5
    63de:	2901      	cmp	r1, #1
    63e0:	d959      	bls.n	6496 <hci_tx_thread+0x126>
    63e2:	2904      	cmp	r1, #4
    63e4:	d163      	bne.n	64ae <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    63e6:	f898 300c 	ldrb.w	r3, [r8, #12]
    63ea:	2b00      	cmp	r3, #0
    63ec:	d157      	bne.n	649e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    63ee:	483a      	ldr	r0, [pc, #232]	; (64d8 <hci_tx_thread+0x168>)
    63f0:	2200      	movs	r2, #0
    63f2:	2300      	movs	r3, #0
    63f4:	f01f fcd1 	bl	25d9a <net_buf_get>
	BT_ASSERT(buf);
    63f8:	4604      	mov	r4, r0
    63fa:	b960      	cbnz	r0, 6416 <hci_tx_thread+0xa6>
    63fc:	4937      	ldr	r1, [pc, #220]	; (64dc <hci_tx_thread+0x16c>)
    63fe:	4834      	ldr	r0, [pc, #208]	; (64d0 <hci_tx_thread+0x160>)
    6400:	f241 430e 	movw	r3, #5134	; 0x140e
    6404:	4652      	mov	r2, sl
    6406:	f01c fcd2 	bl	22dae <printk>
    640a:	4040      	eors	r0, r0
    640c:	f380 8811 	msr	BASEPRI, r0
    6410:	f04f 0003 	mov.w	r0, #3
    6414:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    6416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    641a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    641e:	4658      	mov	r0, fp
    6420:	f019 fe56 	bl	200d0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    6424:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    6428:	b163      	cbz	r3, 6444 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    642a:	01a9      	lsls	r1, r5, #6
    642c:	482c      	ldr	r0, [pc, #176]	; (64e0 <hci_tx_thread+0x170>)
    642e:	f041 0101 	orr.w	r1, r1, #1
    6432:	f01d f8d1 	bl	235d8 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    6436:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    643a:	f011 ffc7 	bl	183cc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    643e:	2300      	movs	r3, #0
    6440:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
	bt_dev.sent_cmd = net_buf_ref(buf);
    6444:	4620      	mov	r0, r4
    6446:	f01f fcd9 	bl	25dfc <net_buf_ref>
    644a:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
	err = bt_send(buf);
    644e:	4620      	mov	r0, r4
    6450:	f7ff fde4 	bl	601c <bt_send>
	if (err) {
    6454:	4601      	mov	r1, r0
    6456:	b1f0      	cbz	r0, 6496 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    6458:	01aa      	lsls	r2, r5, #6
    645a:	4822      	ldr	r0, [pc, #136]	; (64e4 <hci_tx_thread+0x174>)
    645c:	f042 0201 	orr.w	r2, r2, #1
    6460:	f01d f8c7 	bl	235f2 <log_1>
	z_impl_k_sem_give(sem);
    6464:	4820      	ldr	r0, [pc, #128]	; (64e8 <hci_tx_thread+0x178>)
    6466:	f019 fe0d 	bl	20084 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    646a:	4620      	mov	r0, r4
    646c:	f011 fefa 	bl	18264 <net_buf_id>
    6470:	4b1e      	ldr	r3, [pc, #120]	; (64ec <hci_tx_thread+0x17c>)
    6472:	220c      	movs	r2, #12
    6474:	fb02 3000 	mla	r0, r2, r0, r3
    6478:	211f      	movs	r1, #31
    647a:	8840      	ldrh	r0, [r0, #2]
    647c:	4622      	mov	r2, r4
    647e:	f7ff f92f 	bl	56e0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6482:	f8d6 00f8 	ldr.w	r0, [r6, #248]	; 0xf8
    6486:	f011 ffa1 	bl	183cc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    648a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    648c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    648e:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
		net_buf_unref(buf);
    6492:	f011 ff9b 	bl	183cc <net_buf_unref>
	for (; count; ev++, count--) {
    6496:	f108 0814 	add.w	r8, r8, #20
    649a:	3f01      	subs	r7, #1
    649c:	e797      	b.n	63ce <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    649e:	2b01      	cmp	r3, #1
    64a0:	d1f9      	bne.n	6496 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    64a2:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    64a6:	3834      	subs	r0, #52	; 0x34
    64a8:	f001 fcce 	bl	7e48 <bt_conn_process_tx>
    64ac:	e7f3      	b.n	6496 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    64ae:	01aa      	lsls	r2, r5, #6
    64b0:	480f      	ldr	r0, [pc, #60]	; (64f0 <hci_tx_thread+0x180>)
    64b2:	f042 0202 	orr.w	r2, r2, #2
    64b6:	f01d f89c 	bl	235f2 <log_1>
    64ba:	e7ec      	b.n	6496 <hci_tx_thread+0x126>
    64bc:	0002c010 	.word	0x0002c010
    64c0:	0002bf50 	.word	0x0002bf50
    64c4:	20000368 	.word	0x20000368
    64c8:	20000354 	.word	0x20000354
    64cc:	0002ebcc 	.word	0x0002ebcc
    64d0:	0002ebd5 	.word	0x0002ebd5
    64d4:	20000000 	.word	0x20000000
    64d8:	200000fc 	.word	0x200000fc
    64dc:	0002e9fd 	.word	0x0002e9fd
    64e0:	0002ecd9 	.word	0x0002ecd9
    64e4:	0002ec67 	.word	0x0002ec67
    64e8:	200000e0 	.word	0x200000e0
    64ec:	2000295c 	.word	0x2000295c
    64f0:	0002ecf4 	.word	0x0002ecf4
    64f4:	0002eb98 	.word	0x0002eb98

000064f8 <hci_event_prio>:
{
    64f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    64fc:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    64fe:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    6502:	4630      	mov	r0, r6
    6504:	f01f fce2 	bl	25ecc <net_buf_simple_headroom>
	state->len = buf->len;
    6508:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    650c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    6510:	4605      	mov	r5, r0
    6512:	d80c      	bhi.n	652e <hci_event_prio+0x36>
    6514:	4a1c      	ldr	r2, [pc, #112]	; (6588 <hci_event_prio+0x90>)
    6516:	491d      	ldr	r1, [pc, #116]	; (658c <hci_event_prio+0x94>)
    6518:	481d      	ldr	r0, [pc, #116]	; (6590 <hci_event_prio+0x98>)
    651a:	f641 03ae 	movw	r3, #6318	; 0x18ae
    651e:	f01c fc46 	bl	22dae <printk>
    6522:	4040      	eors	r0, r0
    6524:	f380 8811 	msr	BASEPRI, r0
    6528:	f04f 0003 	mov.w	r0, #3
    652c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    652e:	2102      	movs	r1, #2
    6530:	4630      	mov	r0, r6
    6532:	f01f fcbb 	bl	25eac <net_buf_simple_pull_mem>
    6536:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6538:	7800      	ldrb	r0, [r0, #0]
    653a:	f01e f950 	bl	247de <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    653e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6540:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6542:	d40c      	bmi.n	655e <hci_event_prio+0x66>
    6544:	4a10      	ldr	r2, [pc, #64]	; (6588 <hci_event_prio+0x90>)
    6546:	4913      	ldr	r1, [pc, #76]	; (6594 <hci_event_prio+0x9c>)
    6548:	4811      	ldr	r0, [pc, #68]	; (6590 <hci_event_prio+0x98>)
    654a:	f641 03b2 	movw	r3, #6322	; 0x18b2
    654e:	f01c fc2e 	bl	22dae <printk>
    6552:	4040      	eors	r0, r0
    6554:	f380 8811 	msr	BASEPRI, r0
    6558:	f04f 0003 	mov.w	r0, #3
    655c:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    655e:	2305      	movs	r3, #5
    6560:	4a0d      	ldr	r2, [pc, #52]	; (6598 <hci_event_prio+0xa0>)
    6562:	7838      	ldrb	r0, [r7, #0]
    6564:	4621      	mov	r1, r4
    6566:	f7ff f935 	bl	57d4 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    656a:	07b3      	lsls	r3, r6, #30
    656c:	d507      	bpl.n	657e <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    656e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6570:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6574:	fa10 f585 	uxtah	r5, r0, r5
    6578:	60a5      	str	r5, [r4, #8]
}
    657a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    657e:	4620      	mov	r0, r4
}
    6580:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6584:	f011 bf22 	b.w	183cc <net_buf_unref>
    6588:	0002eb98 	.word	0x0002eb98
    658c:	0002ed15 	.word	0x0002ed15
    6590:	0002ebd5 	.word	0x0002ebd5
    6594:	0002ed2e 	.word	0x0002ed2e
    6598:	0002c2c4 	.word	0x0002c2c4

0000659c <bt_recv>:
{
    659c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    659e:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    65a0:	2901      	cmp	r1, #1
{
    65a2:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    65a4:	d04b      	beq.n	663e <bt_recv+0xa2>
    65a6:	2903      	cmp	r1, #3
    65a8:	d178      	bne.n	669c <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    65aa:	8983      	ldrh	r3, [r0, #12]
    65ac:	2b03      	cmp	r3, #3
    65ae:	d80c      	bhi.n	65ca <bt_recv+0x2e>
    65b0:	4a42      	ldr	r2, [pc, #264]	; (66bc <bt_recv+0x120>)
    65b2:	4943      	ldr	r1, [pc, #268]	; (66c0 <bt_recv+0x124>)
    65b4:	4843      	ldr	r0, [pc, #268]	; (66c4 <bt_recv+0x128>)
    65b6:	f240 43ac 	movw	r3, #1196	; 0x4ac
    65ba:	f01c fbf8 	bl	22dae <printk>
    65be:	4040      	eors	r0, r0
    65c0:	f380 8811 	msr	BASEPRI, r0
    65c4:	f04f 0003 	mov.w	r0, #3
    65c8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    65ca:	2104      	movs	r1, #4
    65cc:	f104 0008 	add.w	r0, r4, #8
    65d0:	f01f fc6c 	bl	25eac <net_buf_simple_pull_mem>
	if (buf->len != len) {
    65d4:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    65d6:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    65d8:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    65da:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    65dc:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    65e0:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    65e2:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    65e4:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    65e6:	d00d      	beq.n	6604 <bt_recv+0x68>
    65e8:	4837      	ldr	r0, [pc, #220]	; (66c8 <bt_recv+0x12c>)
    65ea:	4b38      	ldr	r3, [pc, #224]	; (66cc <bt_recv+0x130>)
    65ec:	1a1b      	subs	r3, r3, r0
    65ee:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    65f0:	019b      	lsls	r3, r3, #6
    65f2:	4837      	ldr	r0, [pc, #220]	; (66d0 <bt_recv+0x134>)
    65f4:	f043 0301 	orr.w	r3, r3, #1
    65f8:	f01d f80f 	bl	2361a <log_2>
	net_buf_unref(buf);
    65fc:	4620      	mov	r0, r4
    65fe:	f011 fee5 	bl	183cc <net_buf_unref>
    6602:	e01a      	b.n	663a <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    6604:	f001 f9ca 	bl	799c <bt_conn_lookup_handle>
	if (!conn) {
    6608:	4605      	mov	r5, r0
    660a:	b958      	cbnz	r0, 6624 <bt_recv+0x88>
    660c:	4b2e      	ldr	r3, [pc, #184]	; (66c8 <bt_recv+0x12c>)
    660e:	4a2f      	ldr	r2, [pc, #188]	; (66cc <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    6610:	8ae1      	ldrh	r1, [r4, #22]
    6612:	4830      	ldr	r0, [pc, #192]	; (66d4 <bt_recv+0x138>)
    6614:	1ad2      	subs	r2, r2, r3
    6616:	08d2      	lsrs	r2, r2, #3
    6618:	0192      	lsls	r2, r2, #6
    661a:	f042 0201 	orr.w	r2, r2, #1
    661e:	f01c ffe8 	bl	235f2 <log_1>
		net_buf_unref(buf);
    6622:	e7eb      	b.n	65fc <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    6624:	f001 fc78 	bl	7f18 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6628:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    662a:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    662c:	4621      	mov	r1, r4
    662e:	4628      	mov	r0, r5
    6630:	f001 f852 	bl	76d8 <bt_conn_recv>
	bt_conn_unref(conn);
    6634:	4628      	mov	r0, r5
    6636:	f01e fabb 	bl	24bb0 <bt_conn_unref>
		return 0;
    663a:	2000      	movs	r0, #0
}
    663c:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    663e:	8983      	ldrh	r3, [r0, #12]
    6640:	2b01      	cmp	r3, #1
    6642:	d80c      	bhi.n	665e <bt_recv+0xc2>
    6644:	4a1d      	ldr	r2, [pc, #116]	; (66bc <bt_recv+0x120>)
    6646:	491e      	ldr	r1, [pc, #120]	; (66c0 <bt_recv+0x124>)
    6648:	481e      	ldr	r0, [pc, #120]	; (66c4 <bt_recv+0x128>)
    664a:	f241 33fb 	movw	r3, #5115	; 0x13fb
    664e:	f01c fbae 	bl	22dae <printk>
    6652:	4040      	eors	r0, r0
    6654:	f380 8811 	msr	BASEPRI, r0
    6658:	f04f 0003 	mov.w	r0, #3
    665c:	df02      	svc	2
    665e:	2102      	movs	r1, #2
    6660:	f104 0008 	add.w	r0, r4, #8
    6664:	f01f fc22 	bl	25eac <net_buf_simple_pull_mem>
    6668:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    666a:	7800      	ldrb	r0, [r0, #0]
    666c:	f01e f8b7 	bl	247de <bt_hci_evt_get_flags>
    6670:	0783      	lsls	r3, r0, #30
    6672:	d40c      	bmi.n	668e <bt_recv+0xf2>
    6674:	4a11      	ldr	r2, [pc, #68]	; (66bc <bt_recv+0x120>)
    6676:	4918      	ldr	r1, [pc, #96]	; (66d8 <bt_recv+0x13c>)
    6678:	4812      	ldr	r0, [pc, #72]	; (66c4 <bt_recv+0x128>)
    667a:	f241 33ff 	movw	r3, #5119	; 0x13ff
    667e:	f01c fb96 	bl	22dae <printk>
    6682:	4040      	eors	r0, r0
    6684:	f380 8811 	msr	BASEPRI, r0
    6688:	f04f 0003 	mov.w	r0, #3
    668c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    668e:	4a13      	ldr	r2, [pc, #76]	; (66dc <bt_recv+0x140>)
    6690:	7828      	ldrb	r0, [r5, #0]
    6692:	2304      	movs	r3, #4
    6694:	4621      	mov	r1, r4
    6696:	f7ff f89d 	bl	57d4 <handle_event>
    669a:	e7af      	b.n	65fc <bt_recv+0x60>
    669c:	4b0a      	ldr	r3, [pc, #40]	; (66c8 <bt_recv+0x12c>)
    669e:	4a0b      	ldr	r2, [pc, #44]	; (66cc <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    66a0:	480f      	ldr	r0, [pc, #60]	; (66e0 <bt_recv+0x144>)
    66a2:	1ad2      	subs	r2, r2, r3
    66a4:	08d2      	lsrs	r2, r2, #3
    66a6:	0192      	lsls	r2, r2, #6
    66a8:	f042 0201 	orr.w	r2, r2, #1
    66ac:	f01c ffa1 	bl	235f2 <log_1>
		net_buf_unref(buf);
    66b0:	4620      	mov	r0, r4
    66b2:	f011 fe8b 	bl	183cc <net_buf_unref>
		return -EINVAL;
    66b6:	f06f 0015 	mvn.w	r0, #21
    66ba:	e7bf      	b.n	663c <bt_recv+0xa0>
    66bc:	0002eb98 	.word	0x0002eb98
    66c0:	0002ed15 	.word	0x0002ed15
    66c4:	0002ebd5 	.word	0x0002ebd5
    66c8:	0002bf50 	.word	0x0002bf50
    66cc:	0002c010 	.word	0x0002c010
    66d0:	0002ed47 	.word	0x0002ed47
    66d4:	0002ed6b 	.word	0x0002ed6b
    66d8:	0002ed8d 	.word	0x0002ed8d
    66dc:	0002c2a4 	.word	0x0002c2a4
    66e0:	0002edbb 	.word	0x0002edbb

000066e4 <bt_recv_prio>:
{
    66e4:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    66e6:	7d03      	ldrb	r3, [r0, #20]
    66e8:	2b01      	cmp	r3, #1
{
    66ea:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    66ec:	d00c      	beq.n	6708 <bt_recv_prio+0x24>
    66ee:	4a09      	ldr	r2, [pc, #36]	; (6714 <bt_recv_prio+0x30>)
    66f0:	4909      	ldr	r1, [pc, #36]	; (6718 <bt_recv_prio+0x34>)
    66f2:	480a      	ldr	r0, [pc, #40]	; (671c <bt_recv_prio+0x38>)
    66f4:	f641 03f5 	movw	r3, #6389	; 0x18f5
    66f8:	f01c fb59 	bl	22dae <printk>
    66fc:	4040      	eors	r0, r0
    66fe:	f380 8811 	msr	BASEPRI, r0
    6702:	f04f 0003 	mov.w	r0, #3
    6706:	df02      	svc	2
	hci_event_prio(buf);
    6708:	4620      	mov	r0, r4
    670a:	f7ff fef5 	bl	64f8 <hci_event_prio>
}
    670e:	2000      	movs	r0, #0
    6710:	bd10      	pop	{r4, pc}
    6712:	bf00      	nop
    6714:	0002eb98 	.word	0x0002eb98
    6718:	0002edcf 	.word	0x0002edcf
    671c:	0002ebd5 	.word	0x0002ebd5

00006720 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6720:	4a08      	ldr	r2, [pc, #32]	; (6744 <bt_hci_driver_register+0x24>)
{
    6722:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6724:	f8d2 0114 	ldr.w	r0, [r2, #276]	; 0x114
    6728:	b930      	cbnz	r0, 6738 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    672a:	68d9      	ldr	r1, [r3, #12]
    672c:	b139      	cbz	r1, 673e <bt_hci_driver_register+0x1e>
    672e:	6919      	ldr	r1, [r3, #16]
    6730:	b129      	cbz	r1, 673e <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6732:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
	return 0;
    6736:	4770      	bx	lr
		return -EALREADY;
    6738:	f06f 0077 	mvn.w	r0, #119	; 0x77
    673c:	4770      	bx	lr
		return -EINVAL;
    673e:	f06f 0015 	mvn.w	r0, #21
}
    6742:	4770      	bx	lr
    6744:	20000000 	.word	0x20000000

00006748 <bt_finalize_init>:
    6748:	4801      	ldr	r0, [pc, #4]	; (6750 <bt_finalize_init+0x8>)
    674a:	2102      	movs	r1, #2
    674c:	f01e b86e 	b.w	2482c <atomic_or>
    6750:	20000094 	.word	0x20000094

00006754 <bt_init>:
{
    6754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    6756:	4d43      	ldr	r5, [pc, #268]	; (6864 <bt_init+0x110>)
    6758:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    675c:	6899      	ldr	r1, [r3, #8]
    675e:	f011 0101 	ands.w	r1, r1, #1
    6762:	d11f      	bne.n	67a4 <bt_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    6764:	aa01      	add	r2, sp, #4
    6766:	f640 4003 	movw	r0, #3075	; 0xc03
    676a:	f7ff fa19 	bl	5ba0 <bt_hci_cmd_send_sync>
		if (err) {
    676e:	4604      	mov	r4, r0
    6770:	2800      	cmp	r0, #0
    6772:	d173      	bne.n	685c <bt_init+0x108>
		hci_reset_complete(rsp);
    6774:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
    6776:	689b      	ldr	r3, [r3, #8]
	if (status) {
    6778:	781b      	ldrb	r3, [r3, #0]
    677a:	b983      	cbnz	r3, 679e <bt_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    677c:	f105 0394 	add.w	r3, r5, #148	; 0x94
    6780:	4618      	mov	r0, r3
    6782:	f01e f84d 	bl	24820 <atomic_get>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6786:	f3bf 8f5b 	dmb	ish
    678a:	f000 0005 	and.w	r0, r0, #5
    678e:	e853 2f00 	ldrex	r2, [r3]
    6792:	e843 0100 	strex	r1, r0, [r3]
    6796:	2900      	cmp	r1, #0
    6798:	d1f9      	bne.n	678e <bt_init+0x3a>
    679a:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    679e:	9801      	ldr	r0, [sp, #4]
    67a0:	f011 fe14 	bl	183cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    67a4:	aa01      	add	r2, sp, #4
    67a6:	2100      	movs	r1, #0
    67a8:	f241 0003 	movw	r0, #4099	; 0x1003
    67ac:	f7ff f9f8 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    67b0:	4604      	mov	r4, r0
    67b2:	2800      	cmp	r0, #0
    67b4:	d152      	bne.n	685c <bt_init+0x108>
	read_local_features_complete(rsp);
    67b6:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    67b8:	4e2b      	ldr	r6, [pc, #172]	; (6868 <bt_init+0x114>)
    67ba:	6893      	ldr	r3, [r2, #8]
    67bc:	f853 0f01 	ldr.w	r0, [r3, #1]!
    67c0:	6859      	ldr	r1, [r3, #4]
    67c2:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    67c4:	4610      	mov	r0, r2
    67c6:	f011 fe01 	bl	183cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    67ca:	4621      	mov	r1, r4
    67cc:	aa01      	add	r2, sp, #4
    67ce:	f241 0001 	movw	r0, #4097	; 0x1001
    67d2:	f7ff f9e5 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    67d6:	4604      	mov	r4, r0
    67d8:	2800      	cmp	r0, #0
    67da:	d13f      	bne.n	685c <bt_init+0x108>
	read_local_ver_complete(rsp);
    67dc:	9801      	ldr	r0, [sp, #4]
    67de:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    67e0:	785a      	ldrb	r2, [r3, #1]
    67e2:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    67e6:	78d9      	ldrb	r1, [r3, #3]
    67e8:	789a      	ldrb	r2, [r3, #2]
    67ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    67ee:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    67f0:	791a      	ldrb	r2, [r3, #4]
    67f2:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    67f6:	7a19      	ldrb	r1, [r3, #8]
    67f8:	79da      	ldrb	r2, [r3, #7]
    67fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    67fe:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    6800:	795a      	ldrb	r2, [r3, #5]
    6802:	799b      	ldrb	r3, [r3, #6]
    6804:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    6808:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    680a:	f011 fddf 	bl	183cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    680e:	4621      	mov	r1, r4
    6810:	aa01      	add	r2, sp, #4
    6812:	f241 0002 	movw	r0, #4098	; 0x1002
    6816:	f7ff f9c3 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    681a:	4604      	mov	r4, r0
    681c:	b9f0      	cbnz	r0, 685c <bt_init+0x108>
	read_supported_commands_complete(rsp);
    681e:	9f01      	ldr	r7, [sp, #4]
    6820:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    6822:	1c53      	adds	r3, r2, #1
    6824:	3241      	adds	r2, #65	; 0x41
    6826:	6818      	ldr	r0, [r3, #0]
    6828:	6859      	ldr	r1, [r3, #4]
    682a:	4634      	mov	r4, r6
    682c:	c403      	stmia	r4!, {r0, r1}
    682e:	3308      	adds	r3, #8
    6830:	4293      	cmp	r3, r2
    6832:	4626      	mov	r6, r4
    6834:	d1f7      	bne.n	6826 <bt_init+0xd2>
	net_buf_unref(rsp);
    6836:	4638      	mov	r0, r7
    6838:	f011 fdc8 	bl	183cc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    683c:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    6840:	065e      	lsls	r6, r3, #25
    6842:	d419      	bmi.n	6878 <bt_init+0x124>
    6844:	4b09      	ldr	r3, [pc, #36]	; (686c <bt_init+0x118>)
    6846:	490a      	ldr	r1, [pc, #40]	; (6870 <bt_init+0x11c>)
		BT_ERR("Non-LE capable controller detected!");
    6848:	480a      	ldr	r0, [pc, #40]	; (6874 <bt_init+0x120>)
    684a:	1ac9      	subs	r1, r1, r3
    684c:	08c9      	lsrs	r1, r1, #3
    684e:	0189      	lsls	r1, r1, #6
    6850:	f041 0101 	orr.w	r1, r1, #1
    6854:	f01c fec0 	bl	235d8 <log_0>
		return -ENODEV;
    6858:	f06f 0412 	mvn.w	r4, #18
}
    685c:	4620      	mov	r0, r4
    685e:	b003      	add	sp, #12
    6860:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6862:	bf00      	nop
    6864:	20000000 	.word	0x20000000
    6868:	2000003c 	.word	0x2000003c
    686c:	0002bf50 	.word	0x0002bf50
    6870:	0002c010 	.word	0x0002c010
    6874:	0002edf2 	.word	0x0002edf2
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    6878:	aa01      	add	r2, sp, #4
    687a:	2100      	movs	r1, #0
    687c:	f242 0003 	movw	r0, #8195	; 0x2003
    6880:	f7ff f98e 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    6884:	4604      	mov	r4, r0
    6886:	2800      	cmp	r0, #0
    6888:	d1e8      	bne.n	685c <bt_init+0x108>
	read_le_features_complete(rsp);
    688a:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    688c:	4eb0      	ldr	r6, [pc, #704]	; (6b50 <bt_init+0x3fc>)
    688e:	6893      	ldr	r3, [r2, #8]
    6890:	f853 0f01 	ldr.w	r0, [r3, #1]!
    6894:	6859      	ldr	r1, [r3, #4]
    6896:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    6898:	4610      	mov	r0, r2
    689a:	f011 fd97 	bl	183cc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    689e:	4621      	mov	r1, r4
    68a0:	aa01      	add	r2, sp, #4
    68a2:	f242 0002 	movw	r0, #8194	; 0x2002
    68a6:	f7ff f97b 	bl	5ba0 <bt_hci_cmd_send_sync>
		if (err) {
    68aa:	4604      	mov	r4, r0
    68ac:	2800      	cmp	r0, #0
    68ae:	d1d5      	bne.n	685c <bt_init+0x108>
		le_read_buffer_size_complete(rsp);
    68b0:	9b01      	ldr	r3, [sp, #4]
    68b2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    68b4:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    68b8:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    68bc:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    68be:	b129      	cbz	r1, 68cc <bt_init+0x178>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    68c0:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
    68c2:	4611      	mov	r1, r2
    68c4:	f106 0028 	add.w	r0, r6, #40	; 0x28
    68c8:	f024 fc86 	bl	2b1d8 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    68cc:	9801      	ldr	r0, [sp, #4]
    68ce:	f011 fd7d 	bl	183cc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    68d2:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    68d6:	f016 0620 	ands.w	r6, r6, #32
    68da:	f000 80dd 	beq.w	6a98 <bt_init+0x344>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    68de:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    68e2:	071c      	lsls	r4, r3, #28
    68e4:	d511      	bpl.n	690a <bt_init+0x1b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    68e6:	aa01      	add	r2, sp, #4
    68e8:	2100      	movs	r1, #0
    68ea:	f242 001c 	movw	r0, #8220	; 0x201c
    68ee:	f7ff f957 	bl	5ba0 <bt_hci_cmd_send_sync>
		if (err) {
    68f2:	4604      	mov	r4, r0
    68f4:	2800      	cmp	r0, #0
    68f6:	d1b1      	bne.n	685c <bt_init+0x108>
		le_read_supp_states_complete(rsp);
    68f8:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    68fa:	6883      	ldr	r3, [r0, #8]
    68fc:	f853 2f01 	ldr.w	r2, [r3, #1]!
    6900:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    6902:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    6906:	f011 fd61 	bl	183cc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    690a:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    690e:	0698      	lsls	r0, r3, #26
    6910:	d523      	bpl.n	695a <bt_init+0x206>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    6912:	f10d 0102 	add.w	r1, sp, #2
    6916:	4668      	mov	r0, sp
    6918:	f7ff f9ba 	bl	5c90 <hci_le_read_max_data_len>
		if (err) {
    691c:	4604      	mov	r4, r0
    691e:	2800      	cmp	r0, #0
    6920:	d19c      	bne.n	685c <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    6922:	2104      	movs	r1, #4
    6924:	f242 0024 	movw	r0, #8228	; 0x2024
    6928:	f7ff f902 	bl	5b30 <bt_hci_cmd_create>
		if (!buf) {
    692c:	4606      	mov	r6, r0
    692e:	2800      	cmp	r0, #0
    6930:	f000 80b9 	beq.w	6aa6 <bt_init+0x352>
	return net_buf_simple_add(&buf->b, len);
    6934:	2104      	movs	r1, #4
    6936:	3008      	adds	r0, #8
    6938:	f01f fa86 	bl	25e48 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    693c:	f8bd 3000 	ldrh.w	r3, [sp]
    6940:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    6942:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6946:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    6948:	4622      	mov	r2, r4
    694a:	4631      	mov	r1, r6
    694c:	f242 0024 	movw	r0, #8228	; 0x2024
    6950:	f7ff f926 	bl	5ba0 <bt_hci_cmd_send_sync>
		if (err) {
    6954:	4604      	mov	r4, r0
    6956:	2800      	cmp	r0, #0
    6958:	d180      	bne.n	685c <bt_init+0x108>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    695a:	2108      	movs	r1, #8
    695c:	f242 0001 	movw	r0, #8193	; 0x2001
    6960:	f7ff f8e6 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    6964:	4604      	mov	r4, r0
    6966:	2800      	cmp	r0, #0
    6968:	f000 809d 	beq.w	6aa6 <bt_init+0x352>
    696c:	2108      	movs	r1, #8
    696e:	4408      	add	r0, r1
    6970:	f01f fa6a 	bl	25e48 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    6974:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    6978:	f012 0f02 	tst.w	r2, #2
    697c:	bf14      	ite	ne
    697e:	232f      	movne	r3, #47	; 0x2f
    6980:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    6982:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    6984:	f895 2099 	ldrb.w	r2, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    6988:	bf48      	it	mi
    698a:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    698e:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    6992:	bf18      	it	ne
    6994:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
    6998:	2200      	movs	r2, #0
    699a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    699c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    69a0:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
    69a2:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    69a4:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    69a6:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    69a8:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    69aa:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    69ac:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    69ae:	4621      	mov	r1, r4
    69b0:	f242 0001 	movw	r0, #8193	; 0x2001
    69b4:	f7ff f8f4 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    69b8:	4604      	mov	r4, r0
    69ba:	2800      	cmp	r0, #0
    69bc:	f47f af4e 	bne.w	685c <bt_init+0x108>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    69c0:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    69c4:	069a      	lsls	r2, r3, #26
    69c6:	d41e      	bmi.n	6a06 <bt_init+0x2b2>
	if (bt_dev.le.acl_mtu) {
    69c8:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    69cc:	b9d9      	cbnz	r1, 6a06 <bt_init+0x2b2>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    69ce:	aa01      	add	r2, sp, #4
    69d0:	f241 0005 	movw	r0, #4101	; 0x1005
    69d4:	f7ff f8e4 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    69d8:	4604      	mov	r4, r0
    69da:	2800      	cmp	r0, #0
    69dc:	f47f af3e 	bne.w	685c <bt_init+0x108>
	if (bt_dev.le.acl_mtu) {
    69e0:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    69e4:	b963      	cbnz	r3, 6a00 <bt_init+0x2ac>
	read_buffer_size_complete(rsp);
    69e6:	9b01      	ldr	r3, [sp, #4]
    69e8:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    69ea:	785a      	ldrb	r2, [r3, #1]
    69ec:	7899      	ldrb	r1, [r3, #2]
    69ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    69f2:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    69f6:	889a      	ldrh	r2, [r3, #4]
    69f8:	4856      	ldr	r0, [pc, #344]	; (6b54 <bt_init+0x400>)
    69fa:	4611      	mov	r1, r2
    69fc:	f024 fbec 	bl	2b1d8 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    6a00:	9801      	ldr	r0, [sp, #4]
    6a02:	f011 fce3 	bl	183cc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    6a06:	2108      	movs	r1, #8
    6a08:	f640 4001 	movw	r0, #3073	; 0xc01
    6a0c:	f7ff f890 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    6a10:	4604      	mov	r4, r0
    6a12:	2800      	cmp	r0, #0
    6a14:	d047      	beq.n	6aa6 <bt_init+0x352>
    6a16:	2108      	movs	r1, #8
    6a18:	4408      	add	r0, r1
    6a1a:	f01f fa15 	bl	25e48 <net_buf_simple_add>
	dst[0] = val;
    6a1e:	2310      	movs	r3, #16
    6a20:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    6a22:	2388      	movs	r3, #136	; 0x88
    6a24:	7043      	strb	r3, [r0, #1]
    6a26:	2302      	movs	r3, #2
	dst[0] = val;
    6a28:	2200      	movs	r2, #0
	dst[1] = val >> 8;
    6a2a:	70c3      	strb	r3, [r0, #3]
    6a2c:	2320      	movs	r3, #32
	dst[0] = val;
    6a2e:	7082      	strb	r2, [r0, #2]
    6a30:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
    6a32:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
    6a34:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
    6a36:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    6a38:	4621      	mov	r1, r4
    6a3a:	f640 4001 	movw	r0, #3073	; 0xc01
    6a3e:	f7ff f8af 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    6a42:	4604      	mov	r4, r0
    6a44:	2800      	cmp	r0, #0
    6a46:	f47f af09 	bne.w	685c <bt_init+0x108>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    6a4a:	4601      	mov	r1, r0
    6a4c:	aa01      	add	r2, sp, #4
    6a4e:	f64f 4001 	movw	r0, #64513	; 0xfc01
    6a52:	f7ff f8a5 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    6a56:	4604      	mov	r4, r0
    6a58:	2800      	cmp	r0, #0
    6a5a:	d039      	beq.n	6ad0 <bt_init+0x37c>
    6a5c:	493e      	ldr	r1, [pc, #248]	; (6b58 <bt_init+0x404>)
    6a5e:	4b3f      	ldr	r3, [pc, #252]	; (6b5c <bt_init+0x408>)
		BT_WARN("Vendor HCI extensions not available");
    6a60:	483f      	ldr	r0, [pc, #252]	; (6b60 <bt_init+0x40c>)
    6a62:	1ac9      	subs	r1, r1, r3
    6a64:	08c9      	lsrs	r1, r1, #3
    6a66:	0189      	lsls	r1, r1, #6
    6a68:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
    6a6c:	f01c fdb4 	bl	235d8 <log_0>
		err = bt_conn_init();
    6a70:	f001 fa5e 	bl	7f30 <bt_conn_init>
		if (err) {
    6a74:	4604      	mov	r4, r0
    6a76:	2800      	cmp	r0, #0
    6a78:	f47f aef0 	bne.w	685c <bt_init+0x108>
		if (!bt_dev.id_count) {
    6a7c:	79eb      	ldrb	r3, [r5, #7]
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d15e      	bne.n	6b40 <bt_init+0x3ec>
    6a82:	4b36      	ldr	r3, [pc, #216]	; (6b5c <bt_init+0x408>)
    6a84:	4934      	ldr	r1, [pc, #208]	; (6b58 <bt_init+0x404>)
			BT_INFO("No ID address. App must call settings_load()");
    6a86:	4837      	ldr	r0, [pc, #220]	; (6b64 <bt_init+0x410>)
    6a88:	1ac9      	subs	r1, r1, r3
    6a8a:	08c9      	lsrs	r1, r1, #3
    6a8c:	0189      	lsls	r1, r1, #6
    6a8e:	f041 0103 	orr.w	r1, r1, #3
    6a92:	f01c fda1 	bl	235d8 <log_0>
			return 0;
    6a96:	e6e1      	b.n	685c <bt_init+0x108>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    6a98:	2102      	movs	r1, #2
    6a9a:	f640 406d 	movw	r0, #3181	; 0xc6d
    6a9e:	f7ff f847 	bl	5b30 <bt_hci_cmd_create>
		if (!buf) {
    6aa2:	4604      	mov	r4, r0
    6aa4:	b910      	cbnz	r0, 6aac <bt_init+0x358>
		return -ENOBUFS;
    6aa6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6aaa:	e6d7      	b.n	685c <bt_init+0x108>
    6aac:	2102      	movs	r1, #2
    6aae:	3008      	adds	r0, #8
    6ab0:	f01f f9ca 	bl	25e48 <net_buf_simple_add>
		cp_le->le = 0x01;
    6ab4:	2301      	movs	r3, #1
    6ab6:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    6ab8:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    6aba:	4621      	mov	r1, r4
    6abc:	4632      	mov	r2, r6
    6abe:	f640 406d 	movw	r0, #3181	; 0xc6d
    6ac2:	f7ff f86d 	bl	5ba0 <bt_hci_cmd_send_sync>
		if (err) {
    6ac6:	4604      	mov	r4, r0
    6ac8:	2800      	cmp	r0, #0
    6aca:	f43f af08 	beq.w	68de <bt_init+0x18a>
    6ace:	e6c5      	b.n	685c <bt_init+0x108>
	net_buf_unref(rsp);
    6ad0:	9801      	ldr	r0, [sp, #4]
    6ad2:	f011 fc7b 	bl	183cc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    6ad6:	4621      	mov	r1, r4
    6ad8:	aa01      	add	r2, sp, #4
    6ada:	f64f 4002 	movw	r0, #64514	; 0xfc02
    6ade:	f7ff f85f 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    6ae2:	4604      	mov	r4, r0
    6ae4:	b140      	cbz	r0, 6af8 <bt_init+0x3a4>
    6ae6:	491c      	ldr	r1, [pc, #112]	; (6b58 <bt_init+0x404>)
    6ae8:	4b1c      	ldr	r3, [pc, #112]	; (6b5c <bt_init+0x408>)
		BT_WARN("Failed to read supported vendor commands");
    6aea:	481f      	ldr	r0, [pc, #124]	; (6b68 <bt_init+0x414>)
    6aec:	1ac9      	subs	r1, r1, r3
    6aee:	08c9      	lsrs	r1, r1, #3
    6af0:	0189      	lsls	r1, r1, #6
    6af2:	f041 0102 	orr.w	r1, r1, #2
    6af6:	e7b9      	b.n	6a6c <bt_init+0x318>
	rp.cmds = (void *)rsp->data;
    6af8:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    6afa:	6883      	ldr	r3, [r0, #8]
    6afc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    6b00:	f8a5 3085 	strh.w	r3, [r5, #133]	; 0x85
	net_buf_unref(rsp);
    6b04:	f011 fc62 	bl	183cc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    6b08:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    6b0c:	075b      	lsls	r3, r3, #29
    6b0e:	d5af      	bpl.n	6a70 <bt_init+0x31c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    6b10:	aa01      	add	r2, sp, #4
    6b12:	4621      	mov	r1, r4
    6b14:	f64f 4003 	movw	r0, #64515	; 0xfc03
    6b18:	f7ff f842 	bl	5ba0 <bt_hci_cmd_send_sync>
		if (err) {
    6b1c:	b140      	cbz	r0, 6b30 <bt_init+0x3dc>
    6b1e:	490e      	ldr	r1, [pc, #56]	; (6b58 <bt_init+0x404>)
    6b20:	4b0e      	ldr	r3, [pc, #56]	; (6b5c <bt_init+0x408>)
			BT_WARN("Failed to read supported vendor features");
    6b22:	4812      	ldr	r0, [pc, #72]	; (6b6c <bt_init+0x418>)
    6b24:	1ac9      	subs	r1, r1, r3
    6b26:	08c9      	lsrs	r1, r1, #3
    6b28:	0189      	lsls	r1, r1, #6
    6b2a:	f041 0102 	orr.w	r1, r1, #2
    6b2e:	e79d      	b.n	6a6c <bt_init+0x318>
		rp.feat = (void *)rsp->data;
    6b30:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
    6b32:	6883      	ldr	r3, [r0, #8]
    6b34:	785b      	ldrb	r3, [r3, #1]
    6b36:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
		net_buf_unref(rsp);
    6b3a:	f011 fc47 	bl	183cc <net_buf_unref>
    6b3e:	e797      	b.n	6a70 <bt_init+0x31c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6b40:	2104      	movs	r1, #4
    6b42:	480b      	ldr	r0, [pc, #44]	; (6b70 <bt_init+0x41c>)
    6b44:	f01d fe72 	bl	2482c <atomic_or>
	bt_finalize_init();
    6b48:	f7ff fdfe 	bl	6748 <bt_finalize_init>
	return 0;
    6b4c:	e686      	b.n	685c <bt_init+0x108>
    6b4e:	bf00      	nop
    6b50:	20000098 	.word	0x20000098
    6b54:	200000c8 	.word	0x200000c8
    6b58:	0002c010 	.word	0x0002c010
    6b5c:	0002bf50 	.word	0x0002bf50
    6b60:	0002ee16 	.word	0x0002ee16
    6b64:	0002ee8c 	.word	0x0002ee8c
    6b68:	0002ee3a 	.word	0x0002ee3a
    6b6c:	0002ee63 	.word	0x0002ee63
    6b70:	20000094 	.word	0x20000094

00006b74 <init_work>:
{
    6b74:	b510      	push	{r4, lr}
	err = bt_init();
    6b76:	f7ff fded 	bl	6754 <bt_init>
	if (ready_cb) {
    6b7a:	4b03      	ldr	r3, [pc, #12]	; (6b88 <init_work+0x14>)
    6b7c:	681b      	ldr	r3, [r3, #0]
    6b7e:	b113      	cbz	r3, 6b86 <init_work+0x12>
}
    6b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    6b84:	4718      	bx	r3
}
    6b86:	bd10      	pop	{r4, pc}
    6b88:	20002974 	.word	0x20002974

00006b8c <bt_enable>:
{
    6b8c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    6b8e:	4d30      	ldr	r5, [pc, #192]	; (6c50 <bt_enable+0xc4>)
    6b90:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
{
    6b94:	b088      	sub	sp, #32
    6b96:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    6b98:	b973      	cbnz	r3, 6bb8 <bt_enable+0x2c>
    6b9a:	4b2e      	ldr	r3, [pc, #184]	; (6c54 <bt_enable+0xc8>)
    6b9c:	492e      	ldr	r1, [pc, #184]	; (6c58 <bt_enable+0xcc>)
		BT_ERR("No HCI driver registered");
    6b9e:	482f      	ldr	r0, [pc, #188]	; (6c5c <bt_enable+0xd0>)
    6ba0:	1ac9      	subs	r1, r1, r3
    6ba2:	08c9      	lsrs	r1, r1, #3
    6ba4:	0189      	lsls	r1, r1, #6
    6ba6:	f041 0101 	orr.w	r1, r1, #1
    6baa:	f01c fd15 	bl	235d8 <log_0>
		return -ENODEV;
    6bae:	f06f 0412 	mvn.w	r4, #18
}
    6bb2:	4620      	mov	r0, r4
    6bb4:	b008      	add	sp, #32
    6bb6:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    6bb8:	2101      	movs	r1, #1
    6bba:	f105 0094 	add.w	r0, r5, #148	; 0x94
    6bbe:	f01d fe35 	bl	2482c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6bc2:	07c2      	lsls	r2, r0, #31
    6bc4:	d441      	bmi.n	6c4a <bt_enable+0xbe>
		err = bt_settings_init();
    6bc6:	f7fe fb6f 	bl	52a8 <bt_settings_init>
		if (err) {
    6bca:	4604      	mov	r4, r0
    6bcc:	2800      	cmp	r0, #0
    6bce:	d1f0      	bne.n	6bb2 <bt_enable+0x26>
	ready_cb = cb;
    6bd0:	4b23      	ldr	r3, [pc, #140]	; (6c60 <bt_enable+0xd4>)
    6bd2:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6bd4:	2200      	movs	r2, #0
    6bd6:	2300      	movs	r3, #0
    6bd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6bdc:	f06f 0308 	mvn.w	r3, #8
    6be0:	e9cd 0302 	strd	r0, r3, [sp, #8]
    6be4:	e9cd 0000 	strd	r0, r0, [sp]
    6be8:	9004      	str	r0, [sp, #16]
    6bea:	4b1e      	ldr	r3, [pc, #120]	; (6c64 <bt_enable+0xd8>)
    6bec:	491e      	ldr	r1, [pc, #120]	; (6c68 <bt_enable+0xdc>)
    6bee:	481f      	ldr	r0, [pc, #124]	; (6c6c <bt_enable+0xe0>)
    6bf0:	f44f 7220 	mov.w	r2, #640	; 0x280
    6bf4:	f019 fade 	bl	201b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    6bf8:	491d      	ldr	r1, [pc, #116]	; (6c70 <bt_enable+0xe4>)
    6bfa:	481c      	ldr	r0, [pc, #112]	; (6c6c <bt_enable+0xe0>)
    6bfc:	f024 fb06 	bl	2b20c <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
    6c00:	f8d5 3114 	ldr.w	r3, [r5, #276]	; 0x114
    6c04:	68db      	ldr	r3, [r3, #12]
    6c06:	4798      	blx	r3
	if (err) {
    6c08:	4604      	mov	r4, r0
    6c0a:	b158      	cbz	r0, 6c24 <bt_enable+0x98>
    6c0c:	4b11      	ldr	r3, [pc, #68]	; (6c54 <bt_enable+0xc8>)
    6c0e:	4a12      	ldr	r2, [pc, #72]	; (6c58 <bt_enable+0xcc>)
    6c10:	1ad2      	subs	r2, r2, r3
    6c12:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    6c14:	0192      	lsls	r2, r2, #6
    6c16:	4601      	mov	r1, r0
    6c18:	f042 0201 	orr.w	r2, r2, #1
    6c1c:	4815      	ldr	r0, [pc, #84]	; (6c74 <bt_enable+0xe8>)
    6c1e:	f01c fce8 	bl	235f2 <log_1>
		return err;
    6c22:	e7c6      	b.n	6bb2 <bt_enable+0x26>
	if (!cb) {
    6c24:	b926      	cbnz	r6, 6c30 <bt_enable+0xa4>
}
    6c26:	b008      	add	sp, #32
    6c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    6c2c:	f7ff bd92 	b.w	6754 <bt_init>
    6c30:	2101      	movs	r1, #1
    6c32:	f105 0090 	add.w	r0, r5, #144	; 0x90
    6c36:	f01d fdf9 	bl	2482c <atomic_or>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6c3a:	07c3      	lsls	r3, r0, #31
    6c3c:	d4b9      	bmi.n	6bb2 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    6c3e:	480e      	ldr	r0, [pc, #56]	; (6c78 <bt_enable+0xec>)
    6c40:	f105 0188 	add.w	r1, r5, #136	; 0x88
    6c44:	f024 f97c 	bl	2af40 <k_queue_append>
    6c48:	e7b3      	b.n	6bb2 <bt_enable+0x26>
		return -EALREADY;
    6c4a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6c4e:	e7b0      	b.n	6bb2 <bt_enable+0x26>
    6c50:	20000000 	.word	0x20000000
    6c54:	0002bf50 	.word	0x0002bf50
    6c58:	0002c010 	.word	0x0002c010
    6c5c:	0002eeb9 	.word	0x0002eeb9
    6c60:	20002974 	.word	0x20002974
    6c64:	00006371 	.word	0x00006371
    6c68:	20008a50 	.word	0x20008a50
    6c6c:	20000e98 	.word	0x20000e98
    6c70:	0002eed2 	.word	0x0002eed2
    6c74:	0002eed8 	.word	0x0002eed8
    6c78:	20001438 	.word	0x20001438

00006c7c <bt_set_name>:
{
    6c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6c7e:	4605      	mov	r5, r0
	size_t len = strlen(name);
    6c80:	f7f9 fc04 	bl	48c <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    6c84:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    6c86:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    6c88:	d83b      	bhi.n	6d02 <bt_set_name+0x86>
	if (!strcmp(bt_dev.name, name)) {
    6c8a:	4e1f      	ldr	r6, [pc, #124]	; (6d08 <bt_set_name+0x8c>)
    6c8c:	4629      	mov	r1, r5
    6c8e:	f506 708c 	add.w	r0, r6, #280	; 0x118
    6c92:	f7f9 fbf1 	bl	478 <strcmp>
    6c96:	b910      	cbnz	r0, 6c9e <bt_set_name+0x22>
	return 0;
    6c98:	2000      	movs	r0, #0
}
    6c9a:	b004      	add	sp, #16
    6c9c:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    6c9e:	2348      	movs	r3, #72	; 0x48
    6ca0:	4622      	mov	r2, r4
    6ca2:	4629      	mov	r1, r5
    6ca4:	f506 708c 	add.w	r0, r6, #280	; 0x118
    6ca8:	f024 fdaf 	bl	2b80a <__strncpy_chk>
	bt_dev.name[len] = '\0';
    6cac:	1933      	adds	r3, r6, r4
    6cae:	2200      	movs	r2, #0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6cb0:	f106 0028 	add.w	r0, r6, #40	; 0x28
    6cb4:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    6cb8:	f01d fdb2 	bl	24820 <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    6cbc:	0603      	lsls	r3, r0, #24
    6cbe:	d50e      	bpl.n	6cde <bt_set_name+0x62>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6cc0:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6cc2:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6cc4:	a902      	add	r1, sp, #8
    6cc6:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    6cca:	f88d 3000 	strb.w	r3, [sp]
    6cce:	f88d 4001 	strb.w	r4, [sp, #1]
    6cd2:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    6cd4:	f8cd d008 	str.w	sp, [sp, #8]
    6cd8:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6cda:	f7ff f803 	bl	5ce4 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    6cde:	490b      	ldr	r1, [pc, #44]	; (6d0c <bt_set_name+0x90>)
    6ce0:	480b      	ldr	r0, [pc, #44]	; (6d10 <bt_set_name+0x94>)
    6ce2:	4622      	mov	r2, r4
    6ce4:	f7fc fbf2 	bl	34cc <settings_save_one>
		if (err) {
    6ce8:	2800      	cmp	r0, #0
    6cea:	d0d5      	beq.n	6c98 <bt_set_name+0x1c>
    6cec:	4b09      	ldr	r3, [pc, #36]	; (6d14 <bt_set_name+0x98>)
    6cee:	490a      	ldr	r1, [pc, #40]	; (6d18 <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    6cf0:	480a      	ldr	r0, [pc, #40]	; (6d1c <bt_set_name+0xa0>)
    6cf2:	1ac9      	subs	r1, r1, r3
    6cf4:	08c9      	lsrs	r1, r1, #3
    6cf6:	0189      	lsls	r1, r1, #6
    6cf8:	f041 0102 	orr.w	r1, r1, #2
    6cfc:	f01c fc6c 	bl	235d8 <log_0>
    6d00:	e7ca      	b.n	6c98 <bt_set_name+0x1c>
		return -ENOMEM;
    6d02:	f06f 000b 	mvn.w	r0, #11
    6d06:	e7c8      	b.n	6c9a <bt_set_name+0x1e>
    6d08:	20000000 	.word	0x20000000
    6d0c:	20000118 	.word	0x20000118
    6d10:	0002eef4 	.word	0x0002eef4
    6d14:	0002bf50 	.word	0x0002bf50
    6d18:	0002c010 	.word	0x0002c010
    6d1c:	0002eefc 	.word	0x0002eefc

00006d20 <bt_get_name>:
}
    6d20:	4800      	ldr	r0, [pc, #0]	; (6d24 <bt_get_name+0x4>)
    6d22:	4770      	bx	lr
    6d24:	20000118 	.word	0x20000118

00006d28 <bt_id_create>:
{
    6d28:	b573      	push	{r0, r1, r4, r5, r6, lr}
    6d2a:	460c      	mov	r4, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d2c:	4605      	mov	r5, r0
    6d2e:	b918      	cbnz	r0, 6d38 <bt_id_create+0x10>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6d30:	b344      	cbz	r4, 6d84 <bt_id_create+0x5c>
		return -EINVAL;
    6d32:	f06f 0415 	mvn.w	r4, #21
    6d36:	e022      	b.n	6d7e <bt_id_create+0x56>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d38:	2300      	movs	r3, #0
    6d3a:	4669      	mov	r1, sp
    6d3c:	9300      	str	r3, [sp, #0]
    6d3e:	f8cd 3003 	str.w	r3, [sp, #3]
    6d42:	f01d fda2 	bl	2488a <bt_addr_le_cmp>
    6d46:	2800      	cmp	r0, #0
    6d48:	d0f2      	beq.n	6d30 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    6d4a:	782b      	ldrb	r3, [r5, #0]
    6d4c:	2b01      	cmp	r3, #1
    6d4e:	d104      	bne.n	6d5a <bt_id_create+0x32>
    6d50:	79ab      	ldrb	r3, [r5, #6]
    6d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6d56:	2bc0      	cmp	r3, #192	; 0xc0
    6d58:	d00a      	beq.n	6d70 <bt_id_create+0x48>
    6d5a:	4b1a      	ldr	r3, [pc, #104]	; (6dc4 <bt_id_create+0x9c>)
    6d5c:	491a      	ldr	r1, [pc, #104]	; (6dc8 <bt_id_create+0xa0>)
			BT_ERR("Only static random identity address supported");
    6d5e:	481b      	ldr	r0, [pc, #108]	; (6dcc <bt_id_create+0xa4>)
    6d60:	1ac9      	subs	r1, r1, r3
    6d62:	08c9      	lsrs	r1, r1, #3
    6d64:	0189      	lsls	r1, r1, #6
    6d66:	f041 0101 	orr.w	r1, r1, #1
    6d6a:	f01c fc35 	bl	235d8 <log_0>
			return -EINVAL;
    6d6e:	e7e0      	b.n	6d32 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    6d70:	4628      	mov	r0, r5
    6d72:	f7fe fc59 	bl	5628 <id_find>
    6d76:	2800      	cmp	r0, #0
    6d78:	dbda      	blt.n	6d30 <bt_id_create+0x8>
			return -EALREADY;
    6d7a:	f06f 0477 	mvn.w	r4, #119	; 0x77
}
    6d7e:	4620      	mov	r0, r4
    6d80:	b002      	add	sp, #8
    6d82:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    6d84:	4e12      	ldr	r6, [pc, #72]	; (6dd0 <bt_id_create+0xa8>)
    6d86:	79f3      	ldrb	r3, [r6, #7]
    6d88:	2b01      	cmp	r3, #1
    6d8a:	d018      	beq.n	6dbe <bt_id_create+0x96>
    6d8c:	f106 0094 	add.w	r0, r6, #148	; 0x94
    6d90:	f01d fd46 	bl	24820 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    6d94:	07c3      	lsls	r3, r0, #31
    6d96:	d40a      	bmi.n	6dae <bt_id_create+0x86>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    6d98:	2d00      	cmp	r5, #0
    6d9a:	d0ca      	beq.n	6d32 <bt_id_create+0xa>
    6d9c:	4669      	mov	r1, sp
    6d9e:	4628      	mov	r0, r5
    6da0:	9400      	str	r4, [sp, #0]
    6da2:	f8cd 4003 	str.w	r4, [sp, #3]
    6da6:	f01d fd70 	bl	2488a <bt_addr_le_cmp>
    6daa:	2800      	cmp	r0, #0
    6dac:	d0c1      	beq.n	6d32 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    6dae:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    6db0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    6db2:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    6db4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    6db6:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    6db8:	f7fe fd7c 	bl	58b4 <id_create.isra.0>
	return new_id;
    6dbc:	e7df      	b.n	6d7e <bt_id_create+0x56>
		return -ENOMEM;
    6dbe:	f06f 040b 	mvn.w	r4, #11
    6dc2:	e7dc      	b.n	6d7e <bt_id_create+0x56>
    6dc4:	0002bf50 	.word	0x0002bf50
    6dc8:	0002c010 	.word	0x0002c010
    6dcc:	0002ef11 	.word	0x0002ef11
    6dd0:	20000000 	.word	0x20000000

00006dd4 <bt_setup_public_id_addr>:
{
    6dd4:	b570      	push	{r4, r5, r6, lr}
    6dd6:	b086      	sub	sp, #24
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6dd8:	aa01      	add	r2, sp, #4
    6dda:	2100      	movs	r1, #0
    6ddc:	f241 0009 	movw	r0, #4105	; 0x1009
    6de0:	f7fe fede 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    6de4:	4e1e      	ldr	r6, [pc, #120]	; (6e60 <bt_setup_public_id_addr+0x8c>)
    6de6:	4604      	mov	r4, r0
    6de8:	b168      	cbz	r0, 6e06 <bt_setup_public_id_addr+0x32>
    6dea:	491e      	ldr	r1, [pc, #120]	; (6e64 <bt_setup_public_id_addr+0x90>)
    6dec:	4b1e      	ldr	r3, [pc, #120]	; (6e68 <bt_setup_public_id_addr+0x94>)
		BT_WARN("Failed to read public address");
    6dee:	481f      	ldr	r0, [pc, #124]	; (6e6c <bt_setup_public_id_addr+0x98>)
    6df0:	1ac9      	subs	r1, r1, r3
    6df2:	08c9      	lsrs	r1, r1, #3
    6df4:	0189      	lsls	r1, r1, #6
    6df6:	f041 0102 	orr.w	r1, r1, #2
    6dfa:	f01c fbed 	bl	235d8 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    6dfe:	2300      	movs	r3, #0
    6e00:	71f3      	strb	r3, [r6, #7]
}
    6e02:	b006      	add	sp, #24
    6e04:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    6e06:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6e08:	689d      	ldr	r5, [r3, #8]
    6e0a:	9004      	str	r0, [sp, #16]
    6e0c:	3501      	adds	r5, #1
    6e0e:	f8ad 0014 	strh.w	r0, [sp, #20]
    6e12:	2206      	movs	r2, #6
    6e14:	a904      	add	r1, sp, #16
    6e16:	4628      	mov	r0, r5
    6e18:	f024 fc91 	bl	2b73e <memcmp>
    6e1c:	b918      	cbnz	r0, 6e26 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    6e1e:	9801      	ldr	r0, [sp, #4]
    6e20:	f011 fad4 	bl	183cc <net_buf_unref>
    6e24:	e7eb      	b.n	6dfe <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    6e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e2a:	2206      	movs	r2, #6
    6e2c:	a902      	add	r1, sp, #8
    6e2e:	4628      	mov	r0, r5
    6e30:	9302      	str	r3, [sp, #8]
    6e32:	f8ad 300c 	strh.w	r3, [sp, #12]
    6e36:	f024 fc82 	bl	2b73e <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    6e3a:	2800      	cmp	r0, #0
    6e3c:	d0ef      	beq.n	6e1e <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    6e3e:	4629      	mov	r1, r5
    6e40:	f10d 0011 	add.w	r0, sp, #17
    6e44:	f01d fd24 	bl	24890 <bt_addr_copy>
	net_buf_unref(rsp);
    6e48:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    6e4a:	f88d 4010 	strb.w	r4, [sp, #16]
	net_buf_unref(rsp);
    6e4e:	f011 fabd 	bl	183cc <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    6e52:	2301      	movs	r3, #1
	id_create(BT_ID_DEFAULT, &addr, irk);
    6e54:	a904      	add	r1, sp, #16
    6e56:	4620      	mov	r0, r4
	bt_dev.id_count = bt_read_public_addr(&addr);
    6e58:	71f3      	strb	r3, [r6, #7]
	id_create(BT_ID_DEFAULT, &addr, irk);
    6e5a:	f7fe fd2b 	bl	58b4 <id_create.isra.0>
    6e5e:	e7d0      	b.n	6e02 <bt_setup_public_id_addr+0x2e>
    6e60:	20000000 	.word	0x20000000
    6e64:	0002c010 	.word	0x0002c010
    6e68:	0002bf50 	.word	0x0002bf50
    6e6c:	0002ef3f 	.word	0x0002ef3f

00006e70 <bt_read_static_addr>:
{
    6e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6e72:	4b27      	ldr	r3, [pc, #156]	; (6f10 <bt_read_static_addr+0xa0>)
    6e74:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    6e78:	f014 0401 	ands.w	r4, r4, #1
{
    6e7c:	4605      	mov	r5, r0
    6e7e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    6e80:	d10a      	bne.n	6e98 <bt_read_static_addr+0x28>
    6e82:	4924      	ldr	r1, [pc, #144]	; (6f14 <bt_read_static_addr+0xa4>)
    6e84:	4b24      	ldr	r3, [pc, #144]	; (6f18 <bt_read_static_addr+0xa8>)
		BT_WARN("Read Static Addresses command not available");
    6e86:	4825      	ldr	r0, [pc, #148]	; (6f1c <bt_read_static_addr+0xac>)
    6e88:	1ac9      	subs	r1, r1, r3
    6e8a:	08c9      	lsrs	r1, r1, #3
    6e8c:	0189      	lsls	r1, r1, #6
    6e8e:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    6e92:	f01c fba1 	bl	235d8 <log_0>
    6e96:	e012      	b.n	6ebe <bt_read_static_addr+0x4e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    6e98:	aa01      	add	r2, sp, #4
    6e9a:	2100      	movs	r1, #0
    6e9c:	f64f 4009 	movw	r0, #64521	; 0xfc09
    6ea0:	f7fe fe7e 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    6ea4:	4603      	mov	r3, r0
    6ea6:	b168      	cbz	r0, 6ec4 <bt_read_static_addr+0x54>
    6ea8:	4b1b      	ldr	r3, [pc, #108]	; (6f18 <bt_read_static_addr+0xa8>)
    6eaa:	491a      	ldr	r1, [pc, #104]	; (6f14 <bt_read_static_addr+0xa4>)
		BT_WARN("Failed to read static addresses");
    6eac:	481c      	ldr	r0, [pc, #112]	; (6f20 <bt_read_static_addr+0xb0>)
    6eae:	1ac9      	subs	r1, r1, r3
    6eb0:	08c9      	lsrs	r1, r1, #3
    6eb2:	0189      	lsls	r1, r1, #6
    6eb4:	f041 0102 	orr.w	r1, r1, #2
    6eb8:	f01c fb8e 	bl	235d8 <log_0>
		return 0;
    6ebc:	2400      	movs	r4, #0
}
    6ebe:	4620      	mov	r0, r4
    6ec0:	b003      	add	sp, #12
    6ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    6ec4:	9801      	ldr	r0, [sp, #4]
    6ec6:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    6ec8:	7854      	ldrb	r4, [r2, #1]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    6eca:	f04f 0c16 	mov.w	ip, #22
    6ece:	42b4      	cmp	r4, r6
    6ed0:	bf28      	it	cs
    6ed2:	4634      	movcs	r4, r6
    6ed4:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    6ed8:	42a3      	cmp	r3, r4
    6eda:	db0c      	blt.n	6ef6 <bt_read_static_addr+0x86>
	net_buf_unref(rsp);
    6edc:	f011 fa76 	bl	183cc <net_buf_unref>
	if (!cnt) {
    6ee0:	2c00      	cmp	r4, #0
    6ee2:	d1ec      	bne.n	6ebe <bt_read_static_addr+0x4e>
    6ee4:	490b      	ldr	r1, [pc, #44]	; (6f14 <bt_read_static_addr+0xa4>)
    6ee6:	4b0c      	ldr	r3, [pc, #48]	; (6f18 <bt_read_static_addr+0xa8>)
		BT_WARN("No static addresses stored in controller");
    6ee8:	480e      	ldr	r0, [pc, #56]	; (6f24 <bt_read_static_addr+0xb4>)
    6eea:	1ac9      	subs	r1, r1, r3
    6eec:	08c9      	lsrs	r1, r1, #3
    6eee:	0189      	lsls	r1, r1, #6
    6ef0:	f041 0102 	orr.w	r1, r1, #2
    6ef4:	e7cd      	b.n	6e92 <bt_read_static_addr+0x22>
    6ef6:	1c96      	adds	r6, r2, #2
    6ef8:	fb0c 5103 	mla	r1, ip, r3, r5
    6efc:	f856 eb04 	ldr.w	lr, [r6], #4
    6f00:	f841 eb04 	str.w	lr, [r1], #4
    6f04:	42be      	cmp	r6, r7
    6f06:	d1f9      	bne.n	6efc <bt_read_static_addr+0x8c>
    6f08:	883e      	ldrh	r6, [r7, #0]
    6f0a:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    6f0c:	3301      	adds	r3, #1
    6f0e:	e7e3      	b.n	6ed8 <bt_read_static_addr+0x68>
    6f10:	20000000 	.word	0x20000000
    6f14:	0002c010 	.word	0x0002c010
    6f18:	0002bf50 	.word	0x0002bf50
    6f1c:	0002ef5d 	.word	0x0002ef5d
    6f20:	0002ef89 	.word	0x0002ef89
    6f24:	0002efa9 	.word	0x0002efa9

00006f28 <bt_setup_random_id_addr>:
{
    6f28:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.id_count) {
    6f2a:	4d13      	ldr	r5, [pc, #76]	; (6f78 <bt_setup_random_id_addr+0x50>)
    6f2c:	79ec      	ldrb	r4, [r5, #7]
{
    6f2e:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    6f30:	b9ec      	cbnz	r4, 6f6e <bt_setup_random_id_addr+0x46>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    6f32:	2101      	movs	r1, #1
    6f34:	a802      	add	r0, sp, #8
    6f36:	f7ff ff9b 	bl	6e70 <bt_read_static_addr>
    6f3a:	71e8      	strb	r0, [r5, #7]
		if (bt_dev.id_count) {
    6f3c:	b1b8      	cbz	r0, 6f6e <bt_setup_random_id_addr+0x46>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    6f3e:	2616      	movs	r6, #22
    6f40:	e00e      	b.n	6f60 <bt_setup_random_id_addr+0x38>
    6f42:	ab02      	add	r3, sp, #8
    6f44:	fb06 3102 	mla	r1, r6, r2, r3
    6f48:	f10d 0001 	add.w	r0, sp, #1
    6f4c:	f01d fca0 	bl	24890 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    6f50:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    6f52:	4669      	mov	r1, sp
    6f54:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    6f56:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    6f5a:	f7fe fcab 	bl	58b4 <id_create.isra.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    6f5e:	3401      	adds	r4, #1
    6f60:	79eb      	ldrb	r3, [r5, #7]
    6f62:	b2e2      	uxtb	r2, r4
    6f64:	4293      	cmp	r3, r2
    6f66:	d8ec      	bhi.n	6f42 <bt_setup_random_id_addr+0x1a>
			return 0;
    6f68:	2000      	movs	r0, #0
}
    6f6a:	b008      	add	sp, #32
    6f6c:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    6f6e:	2100      	movs	r1, #0
    6f70:	4608      	mov	r0, r1
    6f72:	f7ff fed9 	bl	6d28 <bt_id_create>
    6f76:	e7f8      	b.n	6f6a <bt_setup_random_id_addr+0x42>
    6f78:	20000000 	.word	0x20000000

00006f7c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    6f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    6f80:	690d      	ldr	r5, [r1, #16]
{
    6f82:	b08d      	sub	sp, #52	; 0x34
    6f84:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    6f86:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    6f88:	ebb5 0b03 	subs.w	fp, r5, r3
{
    6f8c:	4606      	mov	r6, r0
    6f8e:	4881      	ldr	r0, [pc, #516]	; (7194 <bt_le_adv_start_legacy+0x218>)
	struct bt_conn *conn = NULL;
    6f90:	9305      	str	r3, [sp, #20]
	bool dir_adv = (param->peer != NULL), scannable;
    6f92:	bf18      	it	ne
    6f94:	f04f 0b01 	movne.w	fp, #1
{
    6f98:	460c      	mov	r4, r1
    6f9a:	4691      	mov	r9, r2
    6f9c:	f01d fc40 	bl	24820 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6fa0:	0787      	lsls	r7, r0, #30
    6fa2:	f140 80e9 	bpl.w	7178 <bt_le_adv_start_legacy+0x1fc>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    6fa6:	4608      	mov	r0, r1
    6fa8:	f7fe fb56 	bl	5658 <valid_adv_param>
    6fac:	4607      	mov	r7, r0
    6fae:	2800      	cmp	r0, #0
    6fb0:	f000 80e5 	beq.w	717e <bt_le_adv_start_legacy+0x202>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    6fb4:	f106 0810 	add.w	r8, r6, #16
    6fb8:	4640      	mov	r0, r8
    6fba:	f01d fc31 	bl	24820 <atomic_get>
    6fbe:	f3c0 1380 	ubfx	r3, r0, #6, #1
    6fc2:	0640      	lsls	r0, r0, #25
    6fc4:	f100 80de 	bmi.w	7184 <bt_le_adv_start_legacy+0x208>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    6fc8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    6fcc:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    6fd0:	68a3      	ldr	r3, [r4, #8]
    6fd2:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    6fd6:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    6fd8:	68e3      	ldr	r3, [r4, #12]
    6fda:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    6fde:	f01d fc10 	bl	24802 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    6fe2:	7832      	ldrb	r2, [r6, #0]
    6fe4:	7823      	ldrb	r3, [r4, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    6fe6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    6fea:	429a      	cmp	r2, r3
    6fec:	d004      	beq.n	6ff8 <bt_le_adv_start_legacy+0x7c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6fee:	4869      	ldr	r0, [pc, #420]	; (7194 <bt_le_adv_start_legacy+0x218>)
    6ff0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    6ff4:	f01d fc29 	bl	2484a <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    6ff8:	4b67      	ldr	r3, [pc, #412]	; (7198 <bt_le_adv_start_legacy+0x21c>)
	adv->id = param->id;
    6ffa:	7820      	ldrb	r0, [r4, #0]
    6ffc:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    6ffe:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    7002:	465a      	mov	r2, fp
    7004:	6861      	ldr	r1, [r4, #4]
    7006:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    700a:	f7fe ff7f 	bl	5f0c <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    700e:	4683      	mov	fp, r0
    7010:	2800      	cmp	r0, #0
    7012:	d16f      	bne.n	70f4 <bt_le_adv_start_legacy+0x178>
		return err;
	}

	if (dir_adv) {
    7014:	f106 0009 	add.w	r0, r6, #9
    7018:	2d00      	cmp	r5, #0
    701a:	d048      	beq.n	70ae <bt_le_adv_start_legacy+0x132>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    701c:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    701e:	f01d fc3c 	bl	2489a <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    7022:	6860      	ldr	r0, [r4, #4]
    7024:	07c1      	lsls	r1, r0, #31
    7026:	d54a      	bpl.n	70be <bt_le_adv_start_legacy+0x142>
		scannable = true;

		if (dir_adv) {
    7028:	2d00      	cmp	r5, #0
    702a:	d045      	beq.n	70b8 <bt_le_adv_start_legacy+0x13c>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    702c:	f010 0f10 	tst.w	r0, #16
    7030:	bf14      	ite	ne
    7032:	2304      	movne	r3, #4
    7034:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    7036:	6921      	ldr	r1, [r4, #16]
    7038:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    703c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    7040:	f01d fc2b 	bl	2489a <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    7044:	210f      	movs	r1, #15
    7046:	f242 0006 	movw	r0, #8198	; 0x2006
    704a:	f7fe fd71 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
    704e:	4683      	mov	fp, r0
    7050:	2800      	cmp	r0, #0
    7052:	f000 809a 	beq.w	718a <bt_le_adv_start_legacy+0x20e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7056:	220f      	movs	r2, #15
    7058:	a908      	add	r1, sp, #32
    705a:	3008      	adds	r0, #8
    705c:	f01e fefa 	bl	25e54 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    7060:	2200      	movs	r2, #0
    7062:	4659      	mov	r1, fp
    7064:	f242 0006 	movw	r0, #8198	; 0x2006
    7068:	f7fe fd9a 	bl	5ba0 <bt_hci_cmd_send_sync>
	if (err) {
    706c:	2800      	cmp	r0, #0
    706e:	f040 808f 	bne.w	7190 <bt_le_adv_start_legacy+0x214>
		return err;
	}

	if (!dir_adv) {
    7072:	b37d      	cbz	r5, 70d4 <bt_le_adv_start_legacy+0x158>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    7074:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7076:	07da      	lsls	r2, r3, #31
    7078:	d440      	bmi.n	70fc <bt_le_adv_start_legacy+0x180>
	return set_le_adv_enable_legacy(adv, enable);
    707a:	2101      	movs	r1, #1
    707c:	4630      	mov	r0, r6
    707e:	f7fe ff9f 	bl	5fc0 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    7082:	4683      	mov	fp, r0
    7084:	2800      	cmp	r0, #0
    7086:	d070      	beq.n	716a <bt_le_adv_start_legacy+0x1ee>
    7088:	4b44      	ldr	r3, [pc, #272]	; (719c <bt_le_adv_start_legacy+0x220>)
    708a:	4945      	ldr	r1, [pc, #276]	; (71a0 <bt_le_adv_start_legacy+0x224>)
		BT_ERR("Failed to start advertiser");
    708c:	4845      	ldr	r0, [pc, #276]	; (71a4 <bt_le_adv_start_legacy+0x228>)
    708e:	1ac9      	subs	r1, r1, r3
    7090:	08c9      	lsrs	r1, r1, #3
    7092:	0189      	lsls	r1, r1, #6
    7094:	f041 0101 	orr.w	r1, r1, #1
    7098:	f01c fa9e 	bl	235d8 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    709c:	9805      	ldr	r0, [sp, #20]
    709e:	b348      	cbz	r0, 70f4 <bt_le_adv_start_legacy+0x178>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    70a0:	2100      	movs	r1, #0
    70a2:	f000 fc87 	bl	79b4 <bt_conn_set_state>
			bt_conn_unref(conn);
    70a6:	9805      	ldr	r0, [sp, #20]
    70a8:	f01d fd82 	bl	24bb0 <bt_conn_unref>
    70ac:	e022      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    70ae:	9506      	str	r5, [sp, #24]
    70b0:	a906      	add	r1, sp, #24
    70b2:	f8cd 501b 	str.w	r5, [sp, #27]
    70b6:	e7b2      	b.n	701e <bt_le_adv_start_legacy+0xa2>
			set_param.type = BT_HCI_ADV_IND;
    70b8:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    70bc:	e7c2      	b.n	7044 <bt_le_adv_start_legacy+0xc8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    70be:	9b16      	ldr	r3, [sp, #88]	; 0x58
    70c0:	b933      	cbnz	r3, 70d0 <bt_le_adv_start_legacy+0x154>
    70c2:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    70c6:	f1c7 0303 	rsb	r3, r7, #3
    70ca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    70ce:	e7b9      	b.n	7044 <bt_le_adv_start_legacy+0xc8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    70d0:	2701      	movs	r7, #1
    70d2:	e7f8      	b.n	70c6 <bt_le_adv_start_legacy+0x14a>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    70d4:	6863      	ldr	r3, [r4, #4]
    70d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    70da:	e9cd 7301 	strd	r7, r3, [sp, #4]
    70de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    70e0:	9300      	str	r3, [sp, #0]
    70e2:	4652      	mov	r2, sl
    70e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
    70e6:	4649      	mov	r1, r9
    70e8:	4630      	mov	r0, r6
    70ea:	f7fe fe6d 	bl	5dc8 <le_adv_update.constprop.0>
		if (err) {
    70ee:	4683      	mov	fp, r0
    70f0:	2800      	cmp	r0, #0
    70f2:	d0bf      	beq.n	7074 <bt_le_adv_start_legacy+0xf8>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    70f4:	4658      	mov	r0, fp
    70f6:	b00d      	add	sp, #52	; 0x34
    70f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    70fc:	a905      	add	r1, sp, #20
    70fe:	4630      	mov	r0, r6
    7100:	f7fe fc94 	bl	5a2c <le_adv_start_add_conn>
		if (err) {
    7104:	4683      	mov	fp, r0
    7106:	2800      	cmp	r0, #0
    7108:	d0b7      	beq.n	707a <bt_le_adv_start_legacy+0xfe>
			if (err == -ENOMEM && !dir_adv &&
    710a:	f110 0f0c 	cmn.w	r0, #12
    710e:	d1f1      	bne.n	70f4 <bt_le_adv_start_legacy+0x178>
    7110:	2d00      	cmp	r5, #0
    7112:	d1ef      	bne.n	70f4 <bt_le_adv_start_legacy+0x178>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    7114:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    7116:	079b      	lsls	r3, r3, #30
    7118:	d4ec      	bmi.n	70f4 <bt_le_adv_start_legacy+0x178>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    711a:	6860      	ldr	r0, [r4, #4]
    711c:	f080 0002 	eor.w	r0, r0, #2
    7120:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    7124:	f00b 0201 	and.w	r2, fp, #1
    7128:	210c      	movs	r1, #12
    712a:	4640      	mov	r0, r8
    712c:	f01d fb9c 	bl	24868 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    7130:	6862      	ldr	r2, [r4, #4]
    7132:	2107      	movs	r1, #7
    7134:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    7138:	4640      	mov	r0, r8
    713a:	f01d fb95 	bl	24868 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    713e:	6862      	ldr	r2, [r4, #4]
    7140:	2108      	movs	r1, #8
    7142:	f002 0201 	and.w	r2, r2, #1
    7146:	4640      	mov	r0, r8
    7148:	f01d fb8e 	bl	24868 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    714c:	463a      	mov	r2, r7
    714e:	2109      	movs	r1, #9
    7150:	4640      	mov	r0, r8
    7152:	f01d fb89 	bl	24868 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    7156:	6862      	ldr	r2, [r4, #4]
    7158:	210b      	movs	r1, #11
    715a:	f3c2 0280 	ubfx	r2, r2, #2, #1
    715e:	4640      	mov	r0, r8
    7160:	f01d fb82 	bl	24868 <atomic_set_bit_to>
	return 0;
    7164:	f04f 0b00 	mov.w	fp, #0
    7168:	e7c4      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    716a:	9805      	ldr	r0, [sp, #20]
    716c:	b108      	cbz	r0, 7172 <bt_le_adv_start_legacy+0x1f6>
		bt_conn_unref(conn);
    716e:	f01d fd1f 	bl	24bb0 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    7172:	2d00      	cmp	r5, #0
    7174:	d1d6      	bne.n	7124 <bt_le_adv_start_legacy+0x1a8>
    7176:	e7d0      	b.n	711a <bt_le_adv_start_legacy+0x19e>
		return -EAGAIN;
    7178:	f06f 0b0a 	mvn.w	fp, #10
    717c:	e7ba      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
		return -EINVAL;
    717e:	f06f 0b15 	mvn.w	fp, #21
    7182:	e7b7      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
		return -EALREADY;
    7184:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    7188:	e7b4      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
		return -ENOBUFS;
    718a:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    718e:	e7b1      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
    7190:	4683      	mov	fp, r0
    7192:	e7af      	b.n	70f4 <bt_le_adv_start_legacy+0x178>
    7194:	20000094 	.word	0x20000094
    7198:	20000000 	.word	0x20000000
    719c:	0002bf50 	.word	0x0002bf50
    71a0:	0002c010 	.word	0x0002c010
    71a4:	0002efd2 	.word	0x0002efd2

000071a8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    71a8:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    71aa:	9c04      	ldr	r4, [sp, #16]
    71ac:	e9cd 3400 	strd	r3, r4, [sp]
    71b0:	4613      	mov	r3, r2
    71b2:	460a      	mov	r2, r1
    71b4:	4601      	mov	r1, r0
    71b6:	4802      	ldr	r0, [pc, #8]	; (71c0 <bt_le_adv_start+0x18>)
    71b8:	f7ff fee0 	bl	6f7c <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    71bc:	b002      	add	sp, #8
    71be:	bd10      	pop	{r4, pc}
    71c0:	20000018 	.word	0x20000018

000071c4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    71c4:	b530      	push	{r4, r5, lr}
    71c6:	4c22      	ldr	r4, [pc, #136]	; (7250 <bt_le_adv_stop+0x8c>)
    71c8:	b085      	sub	sp, #20
    71ca:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    71ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
    71d2:	f01d fb3a 	bl	2484a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    71d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    71da:	f01d fb21 	bl	24820 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    71de:	0642      	lsls	r2, r0, #25
    71e0:	f3c0 1380 	ubfx	r3, r0, #6, #1
    71e4:	d531      	bpl.n	724a <bt_le_adv_stop+0x86>
    71e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    71ea:	f01d fb19 	bl	24820 <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    71ee:	05c3      	lsls	r3, r0, #23
    71f0:	d521      	bpl.n	7236 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    71f2:	2300      	movs	r3, #0
    71f4:	4669      	mov	r1, sp
    71f6:	f104 0021 	add.w	r0, r4, #33	; 0x21
    71fa:	9300      	str	r3, [sp, #0]
    71fc:	f8cd 3003 	str.w	r3, [sp, #3]
    7200:	f01d fb43 	bl	2488a <bt_addr_le_cmp>
    7204:	7e25      	ldrb	r5, [r4, #24]
    7206:	b9e0      	cbnz	r0, 7242 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7208:	4b12      	ldr	r3, [pc, #72]	; (7254 <bt_le_adv_stop+0x90>)
    720a:	889a      	ldrh	r2, [r3, #4]
    720c:	6818      	ldr	r0, [r3, #0]
    720e:	799b      	ldrb	r3, [r3, #6]
    7210:	f8ad 200c 	strh.w	r2, [sp, #12]
    7214:	9002      	str	r0, [sp, #8]
    7216:	f88d 300e 	strb.w	r3, [sp, #14]
    721a:	2204      	movs	r2, #4
    721c:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    721e:	4628      	mov	r0, r5
    7220:	f000 fcf8 	bl	7c14 <bt_conn_lookup_state_le>
    7224:	4604      	mov	r4, r0
	if (conn) {
    7226:	b130      	cbz	r0, 7236 <bt_le_adv_stop+0x72>
		conn->err = status;
    7228:	2100      	movs	r1, #0
    722a:	7241      	strb	r1, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    722c:	f000 fbc2 	bl	79b4 <bt_conn_set_state>
		bt_conn_unref(conn);
    7230:	4620      	mov	r0, r4
    7232:	f01d fcbd 	bl	24bb0 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    7236:	4808      	ldr	r0, [pc, #32]	; (7258 <bt_le_adv_stop+0x94>)
    7238:	2100      	movs	r1, #0
    723a:	f7fe fec1 	bl	5fc0 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    723e:	b005      	add	sp, #20
    7240:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    7242:	2205      	movs	r2, #5
    7244:	f104 0121 	add.w	r1, r4, #33	; 0x21
    7248:	e7e9      	b.n	721e <bt_le_adv_stop+0x5a>
		return 0;
    724a:	4618      	mov	r0, r3
    724c:	e7f7      	b.n	723e <bt_le_adv_stop+0x7a>
    724e:	bf00      	nop
    7250:	20000000 	.word	0x20000000
    7254:	0002c110 	.word	0x0002c110
    7258:	20000018 	.word	0x20000018

0000725c <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    725c:	b513      	push	{r0, r1, r4, lr}
    725e:	4818      	ldr	r0, [pc, #96]	; (72c0 <bt_le_adv_resume+0x64>)
    7260:	f01d fade 	bl	24820 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    7264:	04c1      	lsls	r1, r0, #19
    7266:	d529      	bpl.n	72bc <bt_le_adv_resume+0x60>
    7268:	4815      	ldr	r0, [pc, #84]	; (72c0 <bt_le_adv_resume+0x64>)
    726a:	f01d fad9 	bl	24820 <atomic_get>
    726e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7270:	f3c0 1480 	ubfx	r4, r0, #6, #1
    7274:	d422      	bmi.n	72bc <bt_le_adv_resume+0x60>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7276:	4812      	ldr	r0, [pc, #72]	; (72c0 <bt_le_adv_resume+0x64>)
    7278:	f01d fad2 	bl	24820 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    727c:	05c3      	lsls	r3, r0, #23
    727e:	d51d      	bpl.n	72bc <bt_le_adv_resume+0x60>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    7280:	4810      	ldr	r0, [pc, #64]	; (72c4 <bt_le_adv_resume+0x68>)
    7282:	a901      	add	r1, sp, #4
    7284:	f7fe fbd2 	bl	5a2c <le_adv_start_add_conn>
	if (err) {
    7288:	b9c0      	cbnz	r0, 72bc <bt_le_adv_resume+0x60>
	return set_le_adv_enable_legacy(adv, enable);
    728a:	480e      	ldr	r0, [pc, #56]	; (72c4 <bt_le_adv_resume+0x68>)
    728c:	2101      	movs	r1, #1
    728e:	f7fe fe97 	bl	5fc0 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    7292:	b150      	cbz	r0, 72aa <bt_le_adv_resume+0x4e>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7294:	4621      	mov	r1, r4
    7296:	9801      	ldr	r0, [sp, #4]
    7298:	f000 fb8c 	bl	79b4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    729c:	4808      	ldr	r0, [pc, #32]	; (72c0 <bt_le_adv_resume+0x64>)
    729e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    72a2:	f01d fad2 	bl	2484a <atomic_and>
	return (old & mask) != 0;
    72a6:	f3c0 3400 	ubfx	r4, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    72aa:	9801      	ldr	r0, [sp, #4]
    72ac:	f01d fc80 	bl	24bb0 <bt_conn_unref>
	if (persist_paused) {
    72b0:	b124      	cbz	r4, 72bc <bt_le_adv_resume+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    72b2:	4803      	ldr	r0, [pc, #12]	; (72c0 <bt_le_adv_resume+0x64>)
    72b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    72b8:	f01d fab8 	bl	2482c <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    72bc:	b002      	add	sp, #8
    72be:	bd10      	pop	{r4, pc}
    72c0:	20000028 	.word	0x20000028
    72c4:	20000018 	.word	0x20000018

000072c8 <enh_conn_complete>:
{
    72c8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	if (evt->status) {
    72cc:	7805      	ldrb	r5, [r0, #0]
{
    72ce:	4604      	mov	r4, r0
	if (evt->status) {
    72d0:	b365      	cbz	r5, 732c <enh_conn_complete+0x64>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    72d2:	2d3c      	cmp	r5, #60	; 0x3c
    72d4:	d11e      	bne.n	7314 <enh_conn_complete+0x4c>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    72d6:	f06f 0140 	mvn.w	r1, #64	; 0x40
    72da:	4857      	ldr	r0, [pc, #348]	; (7438 <enh_conn_complete+0x170>)
    72dc:	f01d fab5 	bl	2484a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    72e0:	2000      	movs	r0, #0
    72e2:	f7fe fac9 	bl	5878 <find_pending_connect.part.0>
		if (!conn) {
    72e6:	4604      	mov	r4, r0
    72e8:	b960      	cbnz	r0, 7304 <enh_conn_complete+0x3c>
    72ea:	4954      	ldr	r1, [pc, #336]	; (743c <enh_conn_complete+0x174>)
    72ec:	4b54      	ldr	r3, [pc, #336]	; (7440 <enh_conn_complete+0x178>)
			BT_ERR("No pending slave connection");
    72ee:	4855      	ldr	r0, [pc, #340]	; (7444 <enh_conn_complete+0x17c>)
    72f0:	1ac9      	subs	r1, r1, r3
    72f2:	08c9      	lsrs	r1, r1, #3
    72f4:	0189      	lsls	r1, r1, #6
    72f6:	f041 0101 	orr.w	r1, r1, #1
    72fa:	f01c f96d 	bl	235d8 <log_0>
}
    72fe:	b004      	add	sp, #16
    7300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    7304:	7245      	strb	r5, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7306:	2100      	movs	r1, #0
    7308:	f000 fb54 	bl	79b4 <bt_conn_set_state>
		bt_conn_unref(conn);
    730c:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    730e:	f01d fc4f 	bl	24bb0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7312:	e7f4      	b.n	72fe <enh_conn_complete+0x36>
    7314:	4b4a      	ldr	r3, [pc, #296]	; (7440 <enh_conn_complete+0x178>)
    7316:	4a49      	ldr	r2, [pc, #292]	; (743c <enh_conn_complete+0x174>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    7318:	484b      	ldr	r0, [pc, #300]	; (7448 <enh_conn_complete+0x180>)
    731a:	1ad2      	subs	r2, r2, r3
    731c:	08d2      	lsrs	r2, r2, #3
    731e:	0192      	lsls	r2, r2, #6
    7320:	f042 0202 	orr.w	r2, r2, #2
    7324:	4629      	mov	r1, r5
    7326:	f01c f964 	bl	235f2 <log_1>
		return;
    732a:	e7e8      	b.n	72fe <enh_conn_complete+0x36>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    732c:	7903      	ldrb	r3, [r0, #4]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    732e:	f8b0 8001 	ldrh.w	r8, [r0, #1]
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7332:	3b02      	subs	r3, #2
    7334:	1d06      	adds	r6, r0, #4
    7336:	2b01      	cmp	r3, #1
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7338:	fa1f f788 	uxth.w	r7, r8
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    733c:	4631      	mov	r1, r6
    733e:	a802      	add	r0, sp, #8
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    7340:	d835      	bhi.n	73ae <enh_conn_complete+0xe6>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    7342:	f01d faaa 	bl	2489a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7346:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    734a:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    734e:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    7350:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    7354:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    7358:	f01d fa9a 	bl	24890 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    735c:	2301      	movs	r3, #1
    735e:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    7362:	78e3      	ldrb	r3, [r4, #3]
    7364:	2b01      	cmp	r3, #1
    7366:	d10c      	bne.n	7382 <enh_conn_complete+0xba>
    7368:	a802      	add	r0, sp, #8
    736a:	f7fe fa85 	bl	5878 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    736e:	78e3      	ldrb	r3, [r4, #3]
    7370:	2b01      	cmp	r3, #1
    7372:	4605      	mov	r5, r0
    7374:	d104      	bne.n	7380 <enh_conn_complete+0xb8>
    7376:	4830      	ldr	r0, [pc, #192]	; (7438 <enh_conn_complete+0x170>)
    7378:	f06f 0140 	mvn.w	r1, #64	; 0x40
    737c:	f01d fa65 	bl	2484a <atomic_and>
	if (!conn) {
    7380:	b9dd      	cbnz	r5, 73ba <enh_conn_complete+0xf2>
    7382:	4a2f      	ldr	r2, [pc, #188]	; (7440 <enh_conn_complete+0x178>)
    7384:	4c2d      	ldr	r4, [pc, #180]	; (743c <enh_conn_complete+0x174>)
		BT_ERR("No pending conn for peer %s",
    7386:	4630      	mov	r0, r6
    7388:	1aa4      	subs	r4, r4, r2
    738a:	f7fd fe11 	bl	4fb0 <bt_addr_le_str_real>
    738e:	f7fb fbf3 	bl	2b78 <log_strdup>
    7392:	08e4      	lsrs	r4, r4, #3
    7394:	01a4      	lsls	r4, r4, #6
    7396:	f044 0401 	orr.w	r4, r4, #1
    739a:	4601      	mov	r1, r0
    739c:	4622      	mov	r2, r4
    739e:	482b      	ldr	r0, [pc, #172]	; (744c <enh_conn_complete+0x184>)
    73a0:	f01c f927 	bl	235f2 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    73a4:	211f      	movs	r1, #31
    73a6:	4638      	mov	r0, r7
    73a8:	f01d fa7e 	bl	248a8 <bt_hci_disconnect>
		return;
    73ac:	e7a7      	b.n	72fe <enh_conn_complete+0x36>
		bt_addr_le_copy(&id_addr,
    73ae:	f01d fa74 	bl	2489a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    73b2:	4668      	mov	r0, sp
    73b4:	f01d fa71 	bl	2489a <bt_addr_le_copy>
    73b8:	e7d3      	b.n	7362 <enh_conn_complete+0x9a>
	conn->handle = handle;
    73ba:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    73bc:	a902      	add	r1, sp, #8
	conn->handle = handle;
    73be:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    73c2:	f01d fa6a 	bl	2489a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    73c6:	7e22      	ldrb	r2, [r4, #24]
    73c8:	7de3      	ldrb	r3, [r4, #23]
    73ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    73ce:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    73d2:	7ea2      	ldrb	r2, [r4, #26]
    73d4:	7e63      	ldrb	r3, [r4, #25]
    73d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    73da:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    73de:	7ee3      	ldrb	r3, [r4, #27]
    73e0:	7f22      	ldrb	r2, [r4, #28]
    73e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    73e6:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    73ea:	78e3      	ldrb	r3, [r4, #3]
    73ec:	70eb      	strb	r3, [r5, #3]
	conn->err = 0U;
    73ee:	2400      	movs	r4, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    73f0:	2b01      	cmp	r3, #1
	conn->err = 0U;
    73f2:	726c      	strb	r4, [r5, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    73f4:	d116      	bne.n	7424 <enh_conn_complete+0x15c>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    73f6:	4669      	mov	r1, sp
    73f8:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    73fc:	f01d fa4d 	bl	2489a <bt_addr_le_copy>
						&bt_dev.id_addr[conn->id]);
    7400:	7a29      	ldrb	r1, [r5, #8]
    7402:	4a13      	ldr	r2, [pc, #76]	; (7450 <enh_conn_complete+0x188>)
    7404:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    7408:	4411      	add	r1, r2
    740a:	f105 0096 	add.w	r0, r5, #150	; 0x96
    740e:	f01d fa44 	bl	2489a <bt_addr_le_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    7412:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
    7416:	4622      	mov	r2, r4
    7418:	f001 0340 	and.w	r3, r1, #64	; 0x40
    741c:	4313      	orrs	r3, r2
    741e:	d001      	beq.n	7424 <enh_conn_complete+0x15c>
			bt_le_adv_resume();
    7420:	f7ff ff1c 	bl	725c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    7424:	2107      	movs	r1, #7
    7426:	4628      	mov	r0, r5
    7428:	f000 fac4 	bl	79b4 <bt_conn_set_state>
	conn_auto_initiate(conn);
    742c:	4628      	mov	r0, r5
    742e:	f7fe fe2f 	bl	6090 <conn_auto_initiate>
	bt_conn_unref(conn);
    7432:	4628      	mov	r0, r5
    7434:	e76b      	b.n	730e <enh_conn_complete+0x46>
    7436:	bf00      	nop
    7438:	20000028 	.word	0x20000028
    743c:	0002c010 	.word	0x0002c010
    7440:	0002bf50 	.word	0x0002bf50
    7444:	0002efed 	.word	0x0002efed
    7448:	0002f009 	.word	0x0002f009
    744c:	0002f022 	.word	0x0002f022
    7450:	20000000 	.word	0x20000000

00007454 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7454:	2300      	movs	r3, #0
	tx->user_data = NULL;
    7456:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    745a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    745c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    745e:	4801      	ldr	r0, [pc, #4]	; (7464 <tx_free+0x10>)
    7460:	f023 bd6e 	b.w	2af40 <k_queue_append>
    7464:	20000c10 	.word	0x20000c10

00007468 <notify_connected>:
{
    7468:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    746a:	4b09      	ldr	r3, [pc, #36]	; (7490 <notify_connected+0x28>)
    746c:	681d      	ldr	r5, [r3, #0]
{
    746e:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7470:	7a61      	ldrb	r1, [r4, #9]
    7472:	b92d      	cbnz	r5, 7480 <notify_connected+0x18>
	if (!conn->err) {
    7474:	b951      	cbnz	r1, 748c <notify_connected+0x24>
		bt_gatt_connected(conn);
    7476:	4620      	mov	r0, r4
}
    7478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    747c:	f003 be60 	b.w	b140 <bt_gatt_connected>
		if (cb->connected) {
    7480:	682b      	ldr	r3, [r5, #0]
    7482:	b10b      	cbz	r3, 7488 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    7484:	4620      	mov	r0, r4
    7486:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7488:	692d      	ldr	r5, [r5, #16]
    748a:	e7f1      	b.n	7470 <notify_connected+0x8>
}
    748c:	bd38      	pop	{r3, r4, r5, pc}
    748e:	bf00      	nop
    7490:	20002978 	.word	0x20002978

00007494 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    7494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    7498:	694d      	ldr	r5, [r1, #20]
{
    749a:	4604      	mov	r4, r0
    749c:	460e      	mov	r6, r1
    749e:	4691      	mov	r9, r2
    74a0:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    74a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    74a6:	4845      	ldr	r0, [pc, #276]	; (75bc <send_frag+0x128>)
    74a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    74ac:	f018 fe10 	bl	200d0 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    74b0:	7aa3      	ldrb	r3, [r4, #10]
    74b2:	2b07      	cmp	r3, #7
    74b4:	d151      	bne.n	755a <send_frag+0xc6>
	__asm__ volatile(
    74b6:	f04f 0320 	mov.w	r3, #32
    74ba:	f3ef 8211 	mrs	r2, BASEPRI
    74be:	f383 8811 	msr	BASEPRI, r3
    74c2:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    74c6:	2d00      	cmp	r5, #0
    74c8:	d059      	beq.n	757e <send_frag+0xea>
	parent->next = child;
    74ca:	2300      	movs	r3, #0
    74cc:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    74ce:	69a3      	ldr	r3, [r4, #24]
    74d0:	2b00      	cmp	r3, #0
    74d2:	d151      	bne.n	7578 <send_frag+0xe4>
	list->head = node;
    74d4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    74d8:	f382 8811 	msr	BASEPRI, r2
    74dc:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    74e0:	2104      	movs	r1, #4
    74e2:	f106 0008 	add.w	r0, r6, #8
    74e6:	f01e fcd1 	bl	25e8c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    74ea:	8823      	ldrh	r3, [r4, #0]
    74ec:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    74f0:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    74f4:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    74f6:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    74fa:	3b04      	subs	r3, #4
    74fc:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    74fe:	2302      	movs	r3, #2
    7500:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    7502:	4630      	mov	r0, r6
    7504:	f7fe fd8a 	bl	601c <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7508:	4601      	mov	r1, r0
    750a:	2800      	cmp	r0, #0
    750c:	d053      	beq.n	75b6 <send_frag+0x122>
    750e:	4b2c      	ldr	r3, [pc, #176]	; (75c0 <send_frag+0x12c>)
    7510:	4a2c      	ldr	r2, [pc, #176]	; (75c4 <send_frag+0x130>)
		BT_ERR("Unable to send to driver (err %d)", err);
    7512:	482d      	ldr	r0, [pc, #180]	; (75c8 <send_frag+0x134>)
    7514:	1ad2      	subs	r2, r2, r3
    7516:	08d2      	lsrs	r2, r2, #3
    7518:	0192      	lsls	r2, r2, #6
    751a:	f042 0201 	orr.w	r2, r2, #1
    751e:	f01c f868 	bl	235f2 <log_1>
	__asm__ volatile(
    7522:	f04f 0320 	mov.w	r3, #32
    7526:	f3ef 8111 	mrs	r1, BASEPRI
    752a:	f383 8811 	msr	BASEPRI, r3
    752e:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    7532:	2d00      	cmp	r5, #0
    7534:	d039      	beq.n	75aa <send_frag+0x116>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7536:	6963      	ldr	r3, [r4, #20]
    7538:	2200      	movs	r2, #0
    753a:	b153      	cbz	r3, 7552 <send_frag+0xbe>
    753c:	429d      	cmp	r5, r3
    753e:	d131      	bne.n	75a4 <send_frag+0x110>
Z_GENLIST_REMOVE(slist, snode)
    7540:	682b      	ldr	r3, [r5, #0]
    7542:	bb4a      	cbnz	r2, 7598 <send_frag+0x104>
    7544:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    7546:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7548:	4295      	cmp	r5, r2
    754a:	d100      	bne.n	754e <send_frag+0xba>
	list->tail = node;
    754c:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    754e:	2300      	movs	r3, #0
    7550:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7552:	f381 8811 	msr	BASEPRI, r1
    7556:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    755a:	4818      	ldr	r0, [pc, #96]	; (75bc <send_frag+0x128>)
    755c:	f018 fd92 	bl	20084 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    7560:	b115      	cbz	r5, 7568 <send_frag+0xd4>
		tx_free(tx);
    7562:	4628      	mov	r0, r5
    7564:	f7ff ff76 	bl	7454 <tx_free>
	}

	if (always_consume) {
    7568:	b11f      	cbz	r7, 7572 <send_frag+0xde>
		net_buf_unref(buf);
    756a:	4630      	mov	r0, r6
    756c:	f010 ff2e 	bl	183cc <net_buf_unref>
	}
	return false;
    7570:	2700      	movs	r7, #0
}
    7572:	4638      	mov	r0, r7
    7574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7578:	601d      	str	r5, [r3, #0]
	list->tail = node;
    757a:	61a5      	str	r5, [r4, #24]
}
    757c:	e7ac      	b.n	74d8 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    757e:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    7580:	b133      	cbz	r3, 7590 <send_frag+0xfc>
			pending_no_cb = &tail_tx->pending_no_cb;
    7582:	f103 080c 	add.w	r8, r3, #12
    7586:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7588:	3301      	adds	r3, #1
    758a:	f8c8 3000 	str.w	r3, [r8]
    758e:	e7a3      	b.n	74d8 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7590:	69e3      	ldr	r3, [r4, #28]
    7592:	f104 081c 	add.w	r8, r4, #28
    7596:	e7f7      	b.n	7588 <send_frag+0xf4>
	parent->next = child;
    7598:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    759a:	69a3      	ldr	r3, [r4, #24]
    759c:	429d      	cmp	r5, r3
	list->tail = node;
    759e:	bf08      	it	eq
    75a0:	61a2      	streq	r2, [r4, #24]
}
    75a2:	e7d4      	b.n	754e <send_frag+0xba>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    75a4:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    75a6:	681b      	ldr	r3, [r3, #0]
    75a8:	e7c7      	b.n	753a <send_frag+0xa6>
			(*pending_no_cb)--;
    75aa:	f8d8 3000 	ldr.w	r3, [r8]
    75ae:	3b01      	subs	r3, #1
    75b0:	f8c8 3000 	str.w	r3, [r8]
    75b4:	e7cd      	b.n	7552 <send_frag+0xbe>
	return true;
    75b6:	2701      	movs	r7, #1
    75b8:	e7db      	b.n	7572 <send_frag+0xde>
    75ba:	bf00      	nop
    75bc:	200000c8 	.word	0x200000c8
    75c0:	0002bf50 	.word	0x0002bf50
    75c4:	0002bf68 	.word	0x0002bf68
    75c8:	0002ec67 	.word	0x0002ec67

000075cc <bt_conn_get_pkts>:
}
    75cc:	4800      	ldr	r0, [pc, #0]	; (75d0 <bt_conn_get_pkts+0x4>)
    75ce:	4770      	bx	lr
    75d0:	200000c8 	.word	0x200000c8

000075d4 <notify_le_param_updated>:
{
    75d4:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    75d6:	f3bf 8f5b 	dmb	ish
    75da:	6842      	ldr	r2, [r0, #4]
    75dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    75e0:	0592      	lsls	r2, r2, #22
{
    75e2:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    75e4:	f100 0304 	add.w	r3, r0, #4
    75e8:	d519      	bpl.n	761e <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    75ea:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    75ee:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
    75f2:	4291      	cmp	r1, r2
    75f4:	d813      	bhi.n	761e <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
    75f6:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
    75fa:	4291      	cmp	r1, r2
    75fc:	d30f      	bcc.n	761e <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
    75fe:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
    7602:	4291      	cmp	r1, r2
    7604:	d10b      	bne.n	761e <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7606:	f3bf 8f5b 	dmb	ish
    760a:	e853 2f00 	ldrex	r2, [r3]
    760e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    7612:	e843 2100 	strex	r1, r2, [r3]
    7616:	2900      	cmp	r1, #0
    7618:	d1f7      	bne.n	760a <notify_le_param_updated+0x36>
    761a:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    761e:	4b08      	ldr	r3, [pc, #32]	; (7640 <notify_le_param_updated+0x6c>)
    7620:	681d      	ldr	r5, [r3, #0]
    7622:	b905      	cbnz	r5, 7626 <notify_le_param_updated+0x52>
}
    7624:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7626:	68ee      	ldr	r6, [r5, #12]
    7628:	b13e      	cbz	r6, 763a <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
    762a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    762e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7632:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7636:	4620      	mov	r0, r4
    7638:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    763a:	692d      	ldr	r5, [r5, #16]
    763c:	e7f1      	b.n	7622 <notify_le_param_updated+0x4e>
    763e:	bf00      	nop
    7640:	20002978 	.word	0x20002978

00007644 <le_param_req>:
{
    7644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7646:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    7648:	4608      	mov	r0, r1
{
    764a:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    764c:	f01d f947 	bl	248de <bt_le_conn_params_valid>
    7650:	4604      	mov	r4, r0
    7652:	b910      	cbnz	r0, 765a <le_param_req+0x16>
		return false;
    7654:	2400      	movs	r4, #0
}
    7656:	4620      	mov	r0, r4
    7658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    765a:	4b09      	ldr	r3, [pc, #36]	; (7680 <le_param_req+0x3c>)
    765c:	681e      	ldr	r6, [r3, #0]
    765e:	2e00      	cmp	r6, #0
    7660:	d0f9      	beq.n	7656 <le_param_req+0x12>
		if (!cb->le_param_req) {
    7662:	68b3      	ldr	r3, [r6, #8]
    7664:	b90b      	cbnz	r3, 766a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    7666:	6936      	ldr	r6, [r6, #16]
    7668:	e7f9      	b.n	765e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    766a:	4629      	mov	r1, r5
    766c:	4638      	mov	r0, r7
    766e:	4798      	blx	r3
    7670:	2800      	cmp	r0, #0
    7672:	d0ef      	beq.n	7654 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    7674:	4628      	mov	r0, r5
    7676:	f01d f932 	bl	248de <bt_le_conn_params_valid>
    767a:	2800      	cmp	r0, #0
    767c:	d1f3      	bne.n	7666 <le_param_req+0x22>
    767e:	e7e9      	b.n	7654 <le_param_req+0x10>
    7680:	20002978 	.word	0x20002978

00007684 <bt_conn_cb_register>:
	cb->_next = callback_list;
    7684:	4b02      	ldr	r3, [pc, #8]	; (7690 <bt_conn_cb_register+0xc>)
    7686:	681a      	ldr	r2, [r3, #0]
    7688:	6102      	str	r2, [r0, #16]
	callback_list = cb;
    768a:	6018      	str	r0, [r3, #0]
}
    768c:	4770      	bx	lr
    768e:	bf00      	nop
    7690:	20002978 	.word	0x20002978

00007694 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    7694:	b570      	push	{r4, r5, r6, lr}
    7696:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7698:	f100 0634 	add.w	r6, r0, #52	; 0x34
    769c:	2200      	movs	r2, #0
    769e:	2300      	movs	r3, #0
    76a0:	4630      	mov	r0, r6
    76a2:	f01e fb7a 	bl	25d9a <net_buf_get>
    76a6:	4605      	mov	r5, r0
    76a8:	b958      	cbnz	r0, 76c2 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    76aa:	4620      	mov	r0, r4
    76ac:	f01d fa3c 	bl	24b28 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    76b0:	f104 0158 	add.w	r1, r4, #88	; 0x58
    76b4:	4807      	ldr	r0, [pc, #28]	; (76d4 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    76b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    76ba:	2200      	movs	r2, #0
    76bc:	2300      	movs	r3, #0
    76be:	f018 be3d 	b.w	2033c <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    76c2:	6968      	ldr	r0, [r5, #20]
    76c4:	b108      	cbz	r0, 76ca <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    76c6:	f7ff fec5 	bl	7454 <tx_free>
		net_buf_unref(buf);
    76ca:	4628      	mov	r0, r5
    76cc:	f010 fe7e 	bl	183cc <net_buf_unref>
    76d0:	e7e4      	b.n	769c <conn_cleanup+0x8>
    76d2:	bf00      	nop
    76d4:	20001438 	.word	0x20001438

000076d8 <bt_conn_recv>:
{
    76d8:	b570      	push	{r4, r5, r6, lr}
    76da:	4616      	mov	r6, r2
    76dc:	4604      	mov	r4, r0
    76de:	460d      	mov	r5, r1
	tx_notify(conn);
    76e0:	f01d f9d3 	bl	24a8a <tx_notify>
	switch (flags) {
    76e4:	2e01      	cmp	r6, #1
    76e6:	d02e      	beq.n	7746 <bt_conn_recv+0x6e>
    76e8:	2e02      	cmp	r6, #2
    76ea:	d15b      	bne.n	77a4 <bt_conn_recv+0xcc>
		if (conn->rx) {
    76ec:	6923      	ldr	r3, [r4, #16]
    76ee:	b163      	cbz	r3, 770a <bt_conn_recv+0x32>
    76f0:	4b37      	ldr	r3, [pc, #220]	; (77d0 <bt_conn_recv+0xf8>)
    76f2:	4938      	ldr	r1, [pc, #224]	; (77d4 <bt_conn_recv+0xfc>)
			BT_ERR("Unexpected first L2CAP frame");
    76f4:	4838      	ldr	r0, [pc, #224]	; (77d8 <bt_conn_recv+0x100>)
    76f6:	1ac9      	subs	r1, r1, r3
    76f8:	08c9      	lsrs	r1, r1, #3
    76fa:	0189      	lsls	r1, r1, #6
    76fc:	f041 0101 	orr.w	r1, r1, #1
    7700:	f01b ff6a 	bl	235d8 <log_0>
			bt_conn_reset_rx_state(conn);
    7704:	4620      	mov	r0, r4
    7706:	f01d fa0f 	bl	24b28 <bt_conn_reset_rx_state>
		conn->rx = buf;
    770a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    770c:	6923      	ldr	r3, [r4, #16]
    770e:	8999      	ldrh	r1, [r3, #12]
    7710:	2901      	cmp	r1, #1
    7712:	d95b      	bls.n	77cc <bt_conn_recv+0xf4>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    7714:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
    7716:	7845      	ldrb	r5, [r0, #1]
    7718:	7802      	ldrb	r2, [r0, #0]
    771a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    771e:	3204      	adds	r2, #4
    7720:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    7722:	428a      	cmp	r2, r1
    7724:	d852      	bhi.n	77cc <bt_conn_recv+0xf4>
	if (conn->rx->len > acl_total_len) {
    7726:	d249      	bcs.n	77bc <bt_conn_recv+0xe4>
    7728:	4829      	ldr	r0, [pc, #164]	; (77d0 <bt_conn_recv+0xf8>)
    772a:	4b2a      	ldr	r3, [pc, #168]	; (77d4 <bt_conn_recv+0xfc>)
    772c:	1a1b      	subs	r3, r3, r0
    772e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    7730:	019b      	lsls	r3, r3, #6
    7732:	482a      	ldr	r0, [pc, #168]	; (77dc <bt_conn_recv+0x104>)
    7734:	f043 0301 	orr.w	r3, r3, #1
    7738:	f01b ff6f 	bl	2361a <log_2>
		bt_conn_reset_rx_state(conn);
    773c:	4620      	mov	r0, r4
}
    773e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    7742:	f01d b9f1 	b.w	24b28 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    7746:	6920      	ldr	r0, [r4, #16]
    7748:	b968      	cbnz	r0, 7766 <bt_conn_recv+0x8e>
    774a:	4922      	ldr	r1, [pc, #136]	; (77d4 <bt_conn_recv+0xfc>)
    774c:	4b20      	ldr	r3, [pc, #128]	; (77d0 <bt_conn_recv+0xf8>)
			BT_ERR("Unexpected L2CAP continuation");
    774e:	4824      	ldr	r0, [pc, #144]	; (77e0 <bt_conn_recv+0x108>)
    7750:	1ac9      	subs	r1, r1, r3
    7752:	08c9      	lsrs	r1, r1, #3
    7754:	0189      	lsls	r1, r1, #6
    7756:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    775a:	f01b ff3d 	bl	235d8 <log_0>
			bt_conn_reset_rx_state(conn);
    775e:	4620      	mov	r0, r4
    7760:	f01d f9e2 	bl	24b28 <bt_conn_reset_rx_state>
    7764:	e001      	b.n	776a <bt_conn_recv+0x92>
		if (!buf->len) {
    7766:	89ae      	ldrh	r6, [r5, #12]
    7768:	b926      	cbnz	r6, 7774 <bt_conn_recv+0x9c>
			net_buf_unref(buf);
    776a:	4628      	mov	r0, r5
}
    776c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    7770:	f010 be2c 	b.w	183cc <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    7774:	3008      	adds	r0, #8
    7776:	f01e fbad 	bl	25ed4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    777a:	4286      	cmp	r6, r0
    777c:	d908      	bls.n	7790 <bt_conn_recv+0xb8>
    777e:	4915      	ldr	r1, [pc, #84]	; (77d4 <bt_conn_recv+0xfc>)
    7780:	4b13      	ldr	r3, [pc, #76]	; (77d0 <bt_conn_recv+0xf8>)
			BT_ERR("Not enough buffer space for L2CAP data");
    7782:	4818      	ldr	r0, [pc, #96]	; (77e4 <bt_conn_recv+0x10c>)
    7784:	1ac9      	subs	r1, r1, r3
    7786:	08c9      	lsrs	r1, r1, #3
    7788:	0189      	lsls	r1, r1, #6
    778a:	f041 0101 	orr.w	r1, r1, #1
    778e:	e7e4      	b.n	775a <bt_conn_recv+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7790:	6920      	ldr	r0, [r4, #16]
    7792:	89aa      	ldrh	r2, [r5, #12]
    7794:	68a9      	ldr	r1, [r5, #8]
    7796:	3008      	adds	r0, #8
    7798:	f01e fb5c 	bl	25e54 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    779c:	4628      	mov	r0, r5
    779e:	f010 fe15 	bl	183cc <net_buf_unref>
		break;
    77a2:	e7b3      	b.n	770c <bt_conn_recv+0x34>
    77a4:	4a0a      	ldr	r2, [pc, #40]	; (77d0 <bt_conn_recv+0xf8>)
    77a6:	4b0b      	ldr	r3, [pc, #44]	; (77d4 <bt_conn_recv+0xfc>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    77a8:	480f      	ldr	r0, [pc, #60]	; (77e8 <bt_conn_recv+0x110>)
    77aa:	1a9b      	subs	r3, r3, r2
    77ac:	08db      	lsrs	r3, r3, #3
    77ae:	019b      	lsls	r3, r3, #6
    77b0:	f043 0201 	orr.w	r2, r3, #1
    77b4:	4631      	mov	r1, r6
    77b6:	f01b ff1c 	bl	235f2 <log_1>
		bt_conn_reset_rx_state(conn);
    77ba:	e7d0      	b.n	775e <bt_conn_recv+0x86>
	conn->rx = NULL;
    77bc:	2200      	movs	r2, #0
    77be:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    77c0:	4620      	mov	r0, r4
    77c2:	4619      	mov	r1, r3
}
    77c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    77c8:	f000 bd0a 	b.w	81e0 <bt_l2cap_recv>
}
    77cc:	bd70      	pop	{r4, r5, r6, pc}
    77ce:	bf00      	nop
    77d0:	0002bf50 	.word	0x0002bf50
    77d4:	0002bf68 	.word	0x0002bf68
    77d8:	0002f04a 	.word	0x0002f04a
    77dc:	0002f0ca 	.word	0x0002f0ca
    77e0:	0002f067 	.word	0x0002f067
    77e4:	0002f085 	.word	0x0002f085
    77e8:	0002f0ac 	.word	0x0002f0ac

000077ec <bt_conn_send_cb>:
{
    77ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77f0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    77f2:	7a83      	ldrb	r3, [r0, #10]
    77f4:	2b07      	cmp	r3, #7
{
    77f6:	4606      	mov	r6, r0
    77f8:	460d      	mov	r5, r1
    77fa:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    77fc:	d00f      	beq.n	781e <bt_conn_send_cb+0x32>
    77fe:	4b2a      	ldr	r3, [pc, #168]	; (78a8 <bt_conn_send_cb+0xbc>)
    7800:	492a      	ldr	r1, [pc, #168]	; (78ac <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    7802:	482b      	ldr	r0, [pc, #172]	; (78b0 <bt_conn_send_cb+0xc4>)
    7804:	1ac9      	subs	r1, r1, r3
    7806:	08c9      	lsrs	r1, r1, #3
    7808:	0189      	lsls	r1, r1, #6
    780a:	f041 0101 	orr.w	r1, r1, #1
    780e:	f01b fee3 	bl	235d8 <log_0>
		net_buf_unref(buf);
    7812:	4628      	mov	r0, r5
    7814:	f010 fdda 	bl	183cc <net_buf_unref>
			return -ENOTCONN;
    7818:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    781c:	e020      	b.n	7860 <bt_conn_send_cb+0x74>
	if (cb) {
    781e:	2a00      	cmp	r2, #0
    7820:	d040      	beq.n	78a4 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    7822:	f018 fc29 	bl	20078 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    7826:	4b23      	ldr	r3, [pc, #140]	; (78b4 <bt_conn_send_cb+0xc8>)
    7828:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    782a:	4823      	ldr	r0, [pc, #140]	; (78b8 <bt_conn_send_cb+0xcc>)
    782c:	bf07      	ittee	eq
    782e:	2200      	moveq	r2, #0
    7830:	2300      	moveq	r3, #0
    7832:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    7836:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    783a:	f018 f851 	bl	1f8e0 <z_impl_k_queue_get>
    783e:	4604      	mov	r4, r0
		if (!tx) {
    7840:	b980      	cbnz	r0, 7864 <bt_conn_send_cb+0x78>
    7842:	4b19      	ldr	r3, [pc, #100]	; (78a8 <bt_conn_send_cb+0xbc>)
    7844:	4919      	ldr	r1, [pc, #100]	; (78ac <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    7846:	481d      	ldr	r0, [pc, #116]	; (78bc <bt_conn_send_cb+0xd0>)
    7848:	1ac9      	subs	r1, r1, r3
    784a:	08c9      	lsrs	r1, r1, #3
    784c:	0189      	lsls	r1, r1, #6
    784e:	f041 0101 	orr.w	r1, r1, #1
    7852:	f01b fec1 	bl	235d8 <log_0>
			net_buf_unref(buf);
    7856:	4628      	mov	r0, r5
    7858:	f010 fdb8 	bl	183cc <net_buf_unref>
			return -ENOBUFS;
    785c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    7860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7864:	7ab3      	ldrb	r3, [r6, #10]
    7866:	2b07      	cmp	r3, #7
    7868:	d010      	beq.n	788c <bt_conn_send_cb+0xa0>
    786a:	4b0f      	ldr	r3, [pc, #60]	; (78a8 <bt_conn_send_cb+0xbc>)
    786c:	490f      	ldr	r1, [pc, #60]	; (78ac <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    786e:	4814      	ldr	r0, [pc, #80]	; (78c0 <bt_conn_send_cb+0xd4>)
    7870:	1ac9      	subs	r1, r1, r3
    7872:	08c9      	lsrs	r1, r1, #3
    7874:	0189      	lsls	r1, r1, #6
    7876:	f041 0102 	orr.w	r1, r1, #2
    787a:	f01b fead 	bl	235d8 <log_0>
			net_buf_unref(buf);
    787e:	4628      	mov	r0, r5
    7880:	f010 fda4 	bl	183cc <net_buf_unref>
			tx_free(tx);
    7884:	4620      	mov	r0, r4
    7886:	f7ff fde5 	bl	7454 <tx_free>
    788a:	e7c5      	b.n	7818 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    788c:	2300      	movs	r3, #0
		tx->user_data = user_data;
    788e:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7892:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7894:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7896:	f106 0034 	add.w	r0, r6, #52	; 0x34
    789a:	4629      	mov	r1, r5
    789c:	f01e faa1 	bl	25de2 <net_buf_put>
	return 0;
    78a0:	2000      	movs	r0, #0
    78a2:	e7dd      	b.n	7860 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    78a4:	614a      	str	r2, [r1, #20]
    78a6:	e7f6      	b.n	7896 <bt_conn_send_cb+0xaa>
    78a8:	0002bf50 	.word	0x0002bf50
    78ac:	0002bf68 	.word	0x0002bf68
    78b0:	0002f0e5 	.word	0x0002f0e5
    78b4:	20001450 	.word	0x20001450
    78b8:	20000c10 	.word	0x20000c10
    78bc:	0002f0f4 	.word	0x0002f0f4
    78c0:	0002f112 	.word	0x0002f112

000078c4 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    78c4:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    78c6:	4b1b      	ldr	r3, [pc, #108]	; (7934 <bt_conn_prepare_events+0x70>)
    78c8:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    78ca:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    78cc:	609a      	str	r2, [r3, #8]
{
    78ce:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    78d0:	f023 fefd 	bl	2b6ce <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    78d4:	f3bf 8f5b 	dmb	ish
    78d8:	4b17      	ldr	r3, [pc, #92]	; (7938 <bt_conn_prepare_events+0x74>)
    78da:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
    78de:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    78e2:	f104 0014 	add.w	r0, r4, #20
    78e6:	4619      	mov	r1, r3
	if (!atomic_get(&conn->ref)) {
    78e8:	b90a      	cbnz	r2, 78ee <bt_conn_prepare_events+0x2a>
		conn_cleanup(conn);
    78ea:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    78ec:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    78ee:	7a9a      	ldrb	r2, [r3, #10]
    78f0:	b99a      	cbnz	r2, 791a <bt_conn_prepare_events+0x56>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    78f2:	f3bf 8f5b 	dmb	ish
    78f6:	1d1a      	adds	r2, r3, #4
    78f8:	e852 5f00 	ldrex	r5, [r2]
    78fc:	f025 0c40 	bic.w	ip, r5, #64	; 0x40
    7900:	e842 ce00 	strex	lr, ip, [r2]
    7904:	f1be 0f00 	cmp.w	lr, #0
    7908:	d1f6      	bne.n	78f8 <bt_conn_prepare_events+0x34>
    790a:	f3bf 8f5b 	dmb	ish
    790e:	066a      	lsls	r2, r5, #25
    7910:	d503      	bpl.n	791a <bt_conn_prepare_events+0x56>
		conn_cleanup(conn);
    7912:	4618      	mov	r0, r3
    7914:	f7ff febe 	bl	7694 <conn_cleanup>
    7918:	e7e7      	b.n	78ea <bt_conn_prepare_events+0x26>
	if (conn->state != BT_CONN_CONNECTED) {
    791a:	7a8b      	ldrb	r3, [r1, #10]
    791c:	2b07      	cmp	r3, #7
    791e:	d1e4      	bne.n	78ea <bt_conn_prepare_events+0x26>
	k_poll_event_init(&events[0],
    7920:	4b06      	ldr	r3, [pc, #24]	; (793c <bt_conn_prepare_events+0x78>)
    7922:	2200      	movs	r2, #0
    7924:	2104      	movs	r1, #4
    7926:	f023 fed2 	bl	2b6ce <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    792a:	2301      	movs	r3, #1
    792c:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    7930:	2002      	movs	r0, #2
	return ev_count;
    7932:	e7db      	b.n	78ec <bt_conn_prepare_events+0x28>
    7934:	20000390 	.word	0x20000390
    7938:	20000f20 	.word	0x20000f20
    793c:	20000f54 	.word	0x20000f54

00007940 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    7940:	b570      	push	{r4, r5, r6, lr}
    7942:	4606      	mov	r6, r0
    7944:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    7946:	4811      	ldr	r0, [pc, #68]	; (798c <bt_conn_add_le+0x4c>)
    7948:	2101      	movs	r1, #1
    794a:	f01d f8c4 	bl	24ad6 <bt_conn_new>
	if (!conn) {
    794e:	4604      	mov	r4, r0
    7950:	b1d0      	cbz	r0, 7988 <bt_conn_add_le+0x48>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    7952:	2230      	movs	r2, #48	; 0x30
    7954:	2100      	movs	r1, #0
    7956:	3058      	adds	r0, #88	; 0x58
    7958:	f023 ff20 	bl	2b79c <memset>
    795c:	4b0c      	ldr	r3, [pc, #48]	; (7990 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    795e:	4a0d      	ldr	r2, [pc, #52]	; (7994 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    7960:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7962:	2300      	movs	r3, #0
    7964:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    7968:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    796a:	7226      	strb	r6, [r4, #8]
    796c:	682b      	ldr	r3, [r5, #0]
    796e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    7972:	88ab      	ldrh	r3, [r5, #4]
    7974:	f8a4 308c 	strh.w	r3, [r4, #140]	; 0x8c
    7978:	79ab      	ldrb	r3, [r5, #6]
    797a:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    797e:	2301      	movs	r3, #1
    7980:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7982:	4b05      	ldr	r3, [pc, #20]	; (7998 <bt_conn_add_le+0x58>)
    7984:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    7988:	4620      	mov	r0, r4
    798a:	bd70      	pop	{r4, r5, r6, pc}
    798c:	20000f20 	.word	0x20000f20
    7990:	00007ced 	.word	0x00007ced
    7994:	00024ad1 	.word	0x00024ad1
    7998:	00280018 	.word	0x00280018

0000799c <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    799c:	4602      	mov	r2, r0
    799e:	b508      	push	{r3, lr}
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    79a0:	2101      	movs	r1, #1
    79a2:	4803      	ldr	r0, [pc, #12]	; (79b0 <bt_conn_lookup_handle+0x14>)
    79a4:	f01d f91b 	bl	24bde <conn_lookup_handle>
		return conn;
	}
#endif

	return NULL;
}
    79a8:	2800      	cmp	r0, #0
    79aa:	bf38      	it	cc
    79ac:	2000      	movcc	r0, #0
    79ae:	bd08      	pop	{r3, pc}
    79b0:	20000f20 	.word	0x20000f20

000079b4 <bt_conn_set_state>:
{
    79b4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    79b6:	7a86      	ldrb	r6, [r0, #10]
    79b8:	428e      	cmp	r6, r1
{
    79ba:	4604      	mov	r4, r0
    79bc:	460d      	mov	r5, r1
	if (conn->state == state) {
    79be:	d112      	bne.n	79e6 <bt_conn_set_state+0x32>
    79c0:	4b68      	ldr	r3, [pc, #416]	; (7b64 <bt_conn_set_state+0x1b0>)
    79c2:	4a69      	ldr	r2, [pc, #420]	; (7b68 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    79c4:	4869      	ldr	r0, [pc, #420]	; (7b6c <bt_conn_set_state+0x1b8>)
    79c6:	2e08      	cmp	r6, #8
    79c8:	eba2 0203 	sub.w	r2, r2, r3
    79cc:	bf96      	itet	ls
    79ce:	4b68      	ldrls	r3, [pc, #416]	; (7b70 <bt_conn_set_state+0x1bc>)
    79d0:	4968      	ldrhi	r1, [pc, #416]	; (7b74 <bt_conn_set_state+0x1c0>)
    79d2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    79d6:	08d2      	lsrs	r2, r2, #3
    79d8:	0192      	lsls	r2, r2, #6
    79da:	f042 0202 	orr.w	r2, r2, #2
}
    79de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    79e2:	f01b be06 	b.w	235f2 <log_1>
	conn->state = state;
    79e6:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
    79e8:	b90e      	cbnz	r6, 79ee <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    79ea:	f01d f8c6 	bl	24b7a <bt_conn_ref>
	switch (conn->state) {
    79ee:	7aa3      	ldrb	r3, [r4, #10]
    79f0:	2b08      	cmp	r3, #8
    79f2:	f200 80ac 	bhi.w	7b4e <bt_conn_set_state+0x19a>
    79f6:	e8df f003 	tbb	[pc, r3]
    79fa:	053e      	.short	0x053e
    79fc:	b4b4b4b4 	.word	0xb4b4b4b4
    7a00:	1cb4      	.short	0x1cb4
    7a02:	b4          	.byte	0xb4
    7a03:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    7a04:	4d5c      	ldr	r5, [pc, #368]	; (7b78 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    7a06:	2600      	movs	r6, #0
	__asm__ volatile(
    7a08:	f04f 0320 	mov.w	r3, #32
    7a0c:	f3ef 8211 	mrs	r2, BASEPRI
    7a10:	f383 8811 	msr	BASEPRI, r3
    7a14:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7a18:	69e3      	ldr	r3, [r4, #28]
    7a1a:	2b00      	cmp	r3, #0
    7a1c:	d078      	beq.n	7b10 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    7a1e:	3b01      	subs	r3, #1
    7a20:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7a22:	f382 8811 	msr	BASEPRI, r2
    7a26:	f3bf 8f6f 	isb	sy
    7a2a:	4628      	mov	r0, r5
    7a2c:	f018 fb2a 	bl	20084 <z_impl_k_sem_give>
}
    7a30:	e7ea      	b.n	7a08 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7a32:	78a3      	ldrb	r3, [r4, #2]
    7a34:	2b04      	cmp	r3, #4
    7a36:	f000 8094 	beq.w	7b62 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    7a3a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7a3e:	f023 fa73 	bl	2af28 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    7a42:	2100      	movs	r1, #0
    7a44:	484d      	ldr	r0, [pc, #308]	; (7b7c <bt_conn_set_state+0x1c8>)
    7a46:	f018 ff17 	bl	20878 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7a4a:	2300      	movs	r3, #0
	list->tail = NULL;
    7a4c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    7a50:	4620      	mov	r0, r4
    7a52:	f000 faf5 	bl	8040 <bt_l2cap_connected>
		notify_connected(conn);
    7a56:	4620      	mov	r0, r4
    7a58:	f7ff fd06 	bl	7468 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7a5c:	78e3      	ldrb	r3, [r4, #3]
    7a5e:	2b01      	cmp	r3, #1
    7a60:	d17f      	bne.n	7b62 <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7a62:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7a66:	4846      	ldr	r0, [pc, #280]	; (7b80 <bt_conn_set_state+0x1cc>)
}
    7a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7a6c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    7a70:	2300      	movs	r3, #0
    7a72:	f018 bc63 	b.w	2033c <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7a76:	78a3      	ldrb	r3, [r4, #2]
    7a78:	2b04      	cmp	r3, #4
    7a7a:	d104      	bne.n	7a86 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    7a7c:	4620      	mov	r0, r4
}
    7a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    7a82:	f01d b895 	b.w	24bb0 <bt_conn_unref>
		switch (old_state) {
    7a86:	2e08      	cmp	r6, #8
    7a88:	d86b      	bhi.n	7b62 <bt_conn_set_state+0x1ae>
    7a8a:	a301      	add	r3, pc, #4	; (adr r3, 7a90 <bt_conn_set_state+0xdc>)
    7a8c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    7a90:	00007afd 	.word	0x00007afd
    7a94:	00007ab5 	.word	0x00007ab5
    7a98:	00007aef 	.word	0x00007aef
    7a9c:	00007a7d 	.word	0x00007a7d
    7aa0:	00007a7d 	.word	0x00007a7d
    7aa4:	00007aef 	.word	0x00007aef
    7aa8:	00007aef 	.word	0x00007aef
    7aac:	00007afd 	.word	0x00007afd
    7ab0:	00007afd 	.word	0x00007afd
			tx_notify(conn);
    7ab4:	4620      	mov	r0, r4
    7ab6:	f01c ffe8 	bl	24a8a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    7aba:	78a3      	ldrb	r3, [r4, #2]
    7abc:	2b01      	cmp	r3, #1
    7abe:	d103      	bne.n	7ac8 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    7ac0:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7ac4:	f023 fc0a 	bl	2b2dc <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7ac8:	f3bf 8f5b 	dmb	ish
    7acc:	3404      	adds	r4, #4
    7ace:	e854 3f00 	ldrex	r3, [r4]
    7ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7ad6:	e844 3200 	strex	r2, r3, [r4]
    7ada:	2a00      	cmp	r2, #0
    7adc:	d1f7      	bne.n	7ace <bt_conn_set_state+0x11a>
    7ade:	f3bf 8f5b 	dmb	ish
    7ae2:	4826      	ldr	r0, [pc, #152]	; (7b7c <bt_conn_set_state+0x1c8>)
}
    7ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7ae8:	2100      	movs	r1, #0
    7aea:	f018 bec5 	b.w	20878 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    7aee:	7a63      	ldrb	r3, [r4, #9]
    7af0:	2b00      	cmp	r3, #0
    7af2:	d0c3      	beq.n	7a7c <bt_conn_set_state+0xc8>
				notify_connected(conn);
    7af4:	4620      	mov	r0, r4
    7af6:	f7ff fcb7 	bl	7468 <notify_connected>
    7afa:	e7bf      	b.n	7a7c <bt_conn_set_state+0xc8>
    7afc:	4a1a      	ldr	r2, [pc, #104]	; (7b68 <bt_conn_set_state+0x1b4>)
    7afe:	4b19      	ldr	r3, [pc, #100]	; (7b64 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    7b00:	4820      	ldr	r0, [pc, #128]	; (7b84 <bt_conn_set_state+0x1d0>)
    7b02:	1ad2      	subs	r2, r2, r3
    7b04:	08d2      	lsrs	r2, r2, #3
    7b06:	0192      	lsls	r2, r2, #6
    7b08:	f042 0202 	orr.w	r2, r2, #2
    7b0c:	4629      	mov	r1, r5
    7b0e:	e766      	b.n	79de <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    7b10:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7b12:	b128      	cbz	r0, 7b20 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b14:	69a1      	ldr	r1, [r4, #24]
    7b16:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    7b18:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7b1a:	4288      	cmp	r0, r1
	list->tail = node;
    7b1c:	bf08      	it	eq
    7b1e:	61a3      	streq	r3, [r4, #24]
    7b20:	f382 8811 	msr	BASEPRI, r2
    7b24:	f3bf 8f6f 	isb	sy
		if (!node) {
    7b28:	b1d8      	cbz	r0, 7b62 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    7b2a:	f04f 0220 	mov.w	r2, #32
    7b2e:	f3ef 8311 	mrs	r3, BASEPRI
    7b32:	f382 8811 	msr	BASEPRI, r2
    7b36:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    7b3a:	68c2      	ldr	r2, [r0, #12]
    7b3c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    7b3e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7b40:	f383 8811 	msr	BASEPRI, r3
    7b44:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    7b48:	f7ff fc84 	bl	7454 <tx_free>
    7b4c:	e76d      	b.n	7a2a <bt_conn_set_state+0x76>
    7b4e:	4a06      	ldr	r2, [pc, #24]	; (7b68 <bt_conn_set_state+0x1b4>)
    7b50:	4b04      	ldr	r3, [pc, #16]	; (7b64 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    7b52:	480d      	ldr	r0, [pc, #52]	; (7b88 <bt_conn_set_state+0x1d4>)
    7b54:	1ad2      	subs	r2, r2, r3
    7b56:	08d2      	lsrs	r2, r2, #3
    7b58:	0192      	lsls	r2, r2, #6
    7b5a:	f042 0202 	orr.w	r2, r2, #2
    7b5e:	4629      	mov	r1, r5
    7b60:	e73d      	b.n	79de <bt_conn_set_state+0x2a>
}
    7b62:	bd70      	pop	{r4, r5, r6, pc}
    7b64:	0002bf50 	.word	0x0002bf50
    7b68:	0002bf68 	.word	0x0002bf68
    7b6c:	0002f142 	.word	0x0002f142
    7b70:	0002c2ec 	.word	0x0002c2ec
    7b74:	0002f138 	.word	0x0002f138
    7b78:	200000c8 	.word	0x200000c8
    7b7c:	20000390 	.word	0x20000390
    7b80:	20001438 	.word	0x20001438
    7b84:	0002f153 	.word	0x0002f153
    7b88:	0002f16a 	.word	0x0002f16a

00007b8c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    7b8c:	b570      	push	{r4, r5, r6, lr}
    7b8e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7b90:	480c      	ldr	r0, [pc, #48]	; (7bc4 <bt_conn_lookup_addr_le+0x38>)
{
    7b92:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7b94:	f01c fff1 	bl	24b7a <bt_conn_ref>

		if (!conn) {
    7b98:	4604      	mov	r4, r0
    7b9a:	b128      	cbz	r0, 7ba8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    7b9c:	7883      	ldrb	r3, [r0, #2]
    7b9e:	2b01      	cmp	r3, #1
    7ba0:	d004      	beq.n	7bac <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    7ba2:	f01d f805 	bl	24bb0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    7ba6:	2400      	movs	r4, #0
}
    7ba8:	4620      	mov	r0, r4
    7baa:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    7bac:	4629      	mov	r1, r5
    7bae:	4632      	mov	r2, r6
    7bb0:	f01c ffc3 	bl	24b3a <bt_conn_is_peer_addr_le>
    7bb4:	4605      	mov	r5, r0
    7bb6:	2800      	cmp	r0, #0
    7bb8:	d1f6      	bne.n	7ba8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    7bba:	4620      	mov	r0, r4
    7bbc:	f01c fff8 	bl	24bb0 <bt_conn_unref>
	return NULL;
    7bc0:	462c      	mov	r4, r5
			continue;
    7bc2:	e7f1      	b.n	7ba8 <bt_conn_lookup_addr_le+0x1c>
    7bc4:	20000f20 	.word	0x20000f20

00007bc8 <bt_conn_exists_le>:
{
    7bc8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    7bca:	f7ff ffdf 	bl	7b8c <bt_conn_lookup_addr_le>
	if (conn) {
    7bce:	4604      	mov	r4, r0
    7bd0:	b1a0      	cbz	r0, 7bfc <bt_conn_exists_le+0x34>
    7bd2:	4b0b      	ldr	r3, [pc, #44]	; (7c00 <bt_conn_exists_le+0x38>)
    7bd4:	4a0b      	ldr	r2, [pc, #44]	; (7c04 <bt_conn_exists_le+0x3c>)
    7bd6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    7bd8:	7a83      	ldrb	r3, [r0, #10]
    7bda:	480b      	ldr	r0, [pc, #44]	; (7c08 <bt_conn_exists_le+0x40>)
    7bdc:	2b08      	cmp	r3, #8
    7bde:	bf96      	itet	ls
    7be0:	490a      	ldrls	r1, [pc, #40]	; (7c0c <bt_conn_exists_le+0x44>)
    7be2:	490b      	ldrhi	r1, [pc, #44]	; (7c10 <bt_conn_exists_le+0x48>)
    7be4:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    7be8:	08d2      	lsrs	r2, r2, #3
    7bea:	0192      	lsls	r2, r2, #6
    7bec:	f042 0202 	orr.w	r2, r2, #2
    7bf0:	f01b fcff 	bl	235f2 <log_1>
		bt_conn_unref(conn);
    7bf4:	4620      	mov	r0, r4
    7bf6:	f01c ffdb 	bl	24bb0 <bt_conn_unref>
		return true;
    7bfa:	2001      	movs	r0, #1
}
    7bfc:	bd10      	pop	{r4, pc}
    7bfe:	bf00      	nop
    7c00:	0002bf50 	.word	0x0002bf50
    7c04:	0002bf68 	.word	0x0002bf68
    7c08:	0002f186 	.word	0x0002f186
    7c0c:	0002c2ec 	.word	0x0002c2ec
    7c10:	0002f138 	.word	0x0002f138

00007c14 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    7c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c16:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c18:	480f      	ldr	r0, [pc, #60]	; (7c58 <bt_conn_lookup_state_le+0x44>)
{
    7c1a:	460e      	mov	r6, r1
    7c1c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c1e:	f01c ffac 	bl	24b7a <bt_conn_ref>

		if (!conn) {
    7c22:	4604      	mov	r4, r0
    7c24:	b1b0      	cbz	r0, 7c54 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    7c26:	7883      	ldrb	r3, [r0, #2]
    7c28:	2b01      	cmp	r3, #1
    7c2a:	d003      	beq.n	7c34 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    7c2c:	f01c ffa5 	bl	24b7a <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    7c30:	2400      	movs	r4, #0
			continue;
    7c32:	e00f      	b.n	7c54 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    7c34:	b146      	cbz	r6, 7c48 <bt_conn_lookup_state_le+0x34>
    7c36:	4632      	mov	r2, r6
    7c38:	4629      	mov	r1, r5
    7c3a:	f01c ff7e 	bl	24b3a <bt_conn_is_peer_addr_le>
    7c3e:	b918      	cbnz	r0, 7c48 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    7c40:	4620      	mov	r0, r4
    7c42:	f01c ffb5 	bl	24bb0 <bt_conn_unref>
    7c46:	e7f3      	b.n	7c30 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    7c48:	7aa3      	ldrb	r3, [r4, #10]
    7c4a:	42bb      	cmp	r3, r7
    7c4c:	d1f8      	bne.n	7c40 <bt_conn_lookup_state_le+0x2c>
    7c4e:	7a23      	ldrb	r3, [r4, #8]
    7c50:	42ab      	cmp	r3, r5
    7c52:	d1f5      	bne.n	7c40 <bt_conn_lookup_state_le+0x2c>
}
    7c54:	4620      	mov	r0, r4
    7c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c58:	20000f20 	.word	0x20000f20

00007c5c <bt_conn_foreach>:

void bt_conn_foreach(int type, void (*func)(struct bt_conn *conn, void *data),
		     void *data)
{
    7c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c5e:	4607      	mov	r7, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c60:	4809      	ldr	r0, [pc, #36]	; (7c88 <bt_conn_foreach+0x2c>)
{
    7c62:	460d      	mov	r5, r1
    7c64:	4616      	mov	r6, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7c66:	f01c ff88 	bl	24b7a <bt_conn_ref>

		if (!conn) {
    7c6a:	4604      	mov	r4, r0
    7c6c:	b150      	cbz	r0, 7c84 <bt_conn_foreach+0x28>
			continue;
		}

		if (!(conn->type & type)) {
    7c6e:	7883      	ldrb	r3, [r0, #2]
    7c70:	423b      	tst	r3, r7
    7c72:	d103      	bne.n	7c7c <bt_conn_foreach+0x20>
			func(conn, data);
			bt_conn_unref(conn);
		}
	}
#endif /* defined(CONFIG_BT_ISO) */
}
    7c74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    7c78:	f01c bf9a 	b.w	24bb0 <bt_conn_unref>
		func(conn, data);
    7c7c:	4631      	mov	r1, r6
    7c7e:	47a8      	blx	r5
		bt_conn_unref(conn);
    7c80:	4620      	mov	r0, r4
    7c82:	e7f7      	b.n	7c74 <bt_conn_foreach+0x18>
}
    7c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c86:	bf00      	nop
    7c88:	20000f20 	.word	0x20000f20

00007c8c <send_conn_le_param_update>:
{
    7c8c:	b538      	push	{r3, r4, r5, lr}
    7c8e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    7c90:	4608      	mov	r0, r1
{
    7c92:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7c94:	f01c fe23 	bl	248de <bt_le_conn_params_valid>
    7c98:	b318      	cbz	r0, 7ce2 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7c9a:	4b13      	ldr	r3, [pc, #76]	; (7ce8 <send_conn_le_param_update+0x5c>)
    7c9c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    7ca0:	0799      	lsls	r1, r3, #30
    7ca2:	d407      	bmi.n	7cb4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    7ca4:	78e3      	ldrb	r3, [r4, #3]
    7ca6:	b183      	cbz	r3, 7cca <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    7ca8:	4629      	mov	r1, r5
    7caa:	4620      	mov	r0, r4
}
    7cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    7cb0:	f000 bace 	b.w	8250 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7cb4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    7cb8:	079a      	lsls	r2, r3, #30
    7cba:	d5f3      	bpl.n	7ca4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7cbc:	f3bf 8f5b 	dmb	ish
    7cc0:	6863      	ldr	r3, [r4, #4]
    7cc2:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    7cc6:	055b      	lsls	r3, r3, #21
    7cc8:	d4ec      	bmi.n	7ca4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    7cca:	4629      	mov	r1, r5
    7ccc:	4620      	mov	r0, r4
    7cce:	f01c ffa8 	bl	24c22 <bt_conn_le_conn_update>
		if (rc == 0) {
    7cd2:	b928      	cbnz	r0, 7ce0 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    7cd4:	88ab      	ldrh	r3, [r5, #4]
    7cd6:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    7cda:	88eb      	ldrh	r3, [r5, #6]
    7cdc:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    7ce0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7ce2:	f06f 0015 	mvn.w	r0, #21
    7ce6:	e7fb      	b.n	7ce0 <send_conn_le_param_update+0x54>
    7ce8:	20000000 	.word	0x20000000

00007cec <deferred_work>:
{
    7cec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    7cee:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
    7cf2:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    7cf4:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    7cf8:	b993      	cbnz	r3, 7d20 <deferred_work+0x34>
		bt_l2cap_disconnected(conn);
    7cfa:	4630      	mov	r0, r6
    7cfc:	f01c fff2 	bl	24ce4 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    7d00:	4b1f      	ldr	r3, [pc, #124]	; (7d80 <deferred_work+0x94>)
    7d02:	681d      	ldr	r5, [r3, #0]
    7d04:	b925      	cbnz	r5, 7d10 <deferred_work+0x24>
		bt_conn_unref(conn);
    7d06:	4630      	mov	r0, r6
    7d08:	f01c ff52 	bl	24bb0 <bt_conn_unref>
}
    7d0c:	b002      	add	sp, #8
    7d0e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    7d10:	686b      	ldr	r3, [r5, #4]
    7d12:	b11b      	cbz	r3, 7d1c <deferred_work+0x30>
			cb->disconnected(conn, conn->err);
    7d14:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
    7d18:	4630      	mov	r0, r6
    7d1a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7d1c:	692d      	ldr	r5, [r5, #16]
    7d1e:	e7f1      	b.n	7d04 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    7d20:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    7d24:	2b01      	cmp	r3, #1
    7d26:	d1f1      	bne.n	7d0c <deferred_work+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7d28:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
    7d2c:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    7d30:	e855 3f00 	ldrex	r3, [r5]
    7d34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    7d38:	e845 2100 	strex	r1, r2, [r5]
    7d3c:	2900      	cmp	r1, #0
    7d3e:	d1f7      	bne.n	7d30 <deferred_work+0x44>
    7d40:	f3bf 8f5b 	dmb	ish
    7d44:	059b      	lsls	r3, r3, #22
    7d46:	d514      	bpl.n	7d72 <deferred_work+0x86>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    7d48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7d4a:	9300      	str	r3, [sp, #0]
    7d4c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    7d4e:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
    7d50:	4669      	mov	r1, sp
    7d52:	4630      	mov	r0, r6
    7d54:	f7ff ff9a 	bl	7c8c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7d58:	f3bf 8f5b 	dmb	ish
    7d5c:	e855 3f00 	ldrex	r3, [r5]
    7d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7d64:	e845 3200 	strex	r2, r3, [r5]
    7d68:	2a00      	cmp	r2, #0
    7d6a:	d1f7      	bne.n	7d5c <deferred_work+0x70>
    7d6c:	f3bf 8f5b 	dmb	ish
    7d70:	e7cc      	b.n	7d0c <deferred_work+0x20>
		param = BT_LE_CONN_PARAM(
    7d72:	4a04      	ldr	r2, [pc, #16]	; (7d84 <deferred_work+0x98>)
    7d74:	6810      	ldr	r0, [r2, #0]
    7d76:	6851      	ldr	r1, [r2, #4]
    7d78:	466b      	mov	r3, sp
    7d7a:	c303      	stmia	r3!, {r0, r1}
    7d7c:	e7e8      	b.n	7d50 <deferred_work+0x64>
    7d7e:	bf00      	nop
    7d80:	20002978 	.word	0x20002978
    7d84:	0002c100 	.word	0x0002c100

00007d88 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    7d88:	b538      	push	{r3, r4, r5, lr}
    7d8a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    7d8c:	490c      	ldr	r1, [pc, #48]	; (7dc0 <bt_conn_create_pdu_timeout+0x38>)
    7d8e:	2800      	cmp	r0, #0
    7d90:	bf08      	it	eq
    7d92:	4608      	moveq	r0, r1
    7d94:	f01d fffc 	bl	25d90 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    7d98:	4604      	mov	r4, r0
    7d9a:	b958      	cbnz	r0, 7db4 <bt_conn_create_pdu_timeout+0x2c>
    7d9c:	4909      	ldr	r1, [pc, #36]	; (7dc4 <bt_conn_create_pdu_timeout+0x3c>)
    7d9e:	4b0a      	ldr	r3, [pc, #40]	; (7dc8 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    7da0:	480a      	ldr	r0, [pc, #40]	; (7dcc <bt_conn_create_pdu_timeout+0x44>)
    7da2:	1ac9      	subs	r1, r1, r3
    7da4:	08c9      	lsrs	r1, r1, #3
    7da6:	0189      	lsls	r1, r1, #6
    7da8:	f041 0102 	orr.w	r1, r1, #2
    7dac:	f01b fc14 	bl	235d8 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    7db0:	4620      	mov	r0, r4
    7db2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    7db4:	1d29      	adds	r1, r5, #4
    7db6:	3008      	adds	r0, #8
    7db8:	f01e f80f 	bl	25dda <net_buf_simple_reserve>
	return buf;
    7dbc:	e7f8      	b.n	7db0 <bt_conn_create_pdu_timeout+0x28>
    7dbe:	bf00      	nop
    7dc0:	20000c40 	.word	0x20000c40
    7dc4:	0002bf68 	.word	0x0002bf68
    7dc8:	0002bf50 	.word	0x0002bf50
    7dcc:	0002f1a9 	.word	0x0002f1a9

00007dd0 <bt_conn_create_frag_timeout>:
{
    7dd0:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    7dd2:	4801      	ldr	r0, [pc, #4]	; (7dd8 <bt_conn_create_frag_timeout+0x8>)
    7dd4:	f7ff bfd8 	b.w	7d88 <bt_conn_create_pdu_timeout>
    7dd8:	20000c90 	.word	0x20000c90

00007ddc <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    7ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7de0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    7de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7de6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7dea:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    7dec:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    7dee:	f7ff ffef 	bl	7dd0 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    7df2:	7833      	ldrb	r3, [r6, #0]
    7df4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    7df6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7df8:	f04f 0600 	mov.w	r6, #0
    7dfc:	d005      	beq.n	7e0a <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    7dfe:	f010 fae5 	bl	183cc <net_buf_unref>
		return NULL;
    7e02:	4635      	mov	r5, r6
}
    7e04:	4628      	mov	r0, r5
    7e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    7e0a:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    7e0c:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    7e10:	4e0c      	ldr	r6, [pc, #48]	; (7e44 <create_frag.isra.0+0x68>)
    7e12:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7e14:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    7e18:	f01e f85c 	bl	25ed4 <net_buf_simple_tailroom>
    7e1c:	4580      	cmp	r8, r0
    7e1e:	d20c      	bcs.n	7e3a <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    7e20:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    7e24:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7e28:	4632      	mov	r2, r6
    7e2a:	4638      	mov	r0, r7
    7e2c:	f01e f812 	bl	25e54 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    7e30:	4631      	mov	r1, r6
    7e32:	4620      	mov	r0, r4
    7e34:	f01e f832 	bl	25e9c <net_buf_simple_pull>
    7e38:	e7e4      	b.n	7e04 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
    7e3a:	4638      	mov	r0, r7
    7e3c:	f01e f84a 	bl	25ed4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7e40:	b286      	uxth	r6, r0
    7e42:	e7ef      	b.n	7e24 <create_frag.isra.0+0x48>
    7e44:	20000000 	.word	0x20000000

00007e48 <bt_conn_process_tx>:
{
    7e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7e4a:	7a83      	ldrb	r3, [r0, #10]
{
    7e4c:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    7e4e:	b993      	cbnz	r3, 7e76 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7e50:	f3bf 8f5b 	dmb	ish
    7e54:	1d03      	adds	r3, r0, #4
    7e56:	e853 2f00 	ldrex	r2, [r3]
    7e5a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    7e5e:	e843 1400 	strex	r4, r1, [r3]
    7e62:	2c00      	cmp	r4, #0
    7e64:	d1f7      	bne.n	7e56 <bt_conn_process_tx+0xe>
    7e66:	f3bf 8f5b 	dmb	ish
    7e6a:	0653      	lsls	r3, r2, #25
    7e6c:	d503      	bpl.n	7e76 <bt_conn_process_tx+0x2e>
}
    7e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    7e72:	f7ff bc0f 	b.w	7694 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7e76:	2200      	movs	r2, #0
    7e78:	2300      	movs	r3, #0
    7e7a:	f105 0034 	add.w	r0, r5, #52	; 0x34
    7e7e:	f01d ff8c 	bl	25d9a <net_buf_get>
	BT_ASSERT(buf);
    7e82:	4604      	mov	r4, r0
    7e84:	b960      	cbnz	r0, 7ea0 <bt_conn_process_tx+0x58>
    7e86:	4a20      	ldr	r2, [pc, #128]	; (7f08 <bt_conn_process_tx+0xc0>)
    7e88:	4920      	ldr	r1, [pc, #128]	; (7f0c <bt_conn_process_tx+0xc4>)
    7e8a:	4821      	ldr	r0, [pc, #132]	; (7f10 <bt_conn_process_tx+0xc8>)
    7e8c:	f240 535f 	movw	r3, #1375	; 0x55f
    7e90:	f01a ff8d 	bl	22dae <printk>
    7e94:	4040      	eors	r0, r0
    7e96:	f380 8811 	msr	BASEPRI, r0
    7e9a:	f04f 0003 	mov.w	r0, #3
    7e9e:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    7ea0:	4f1c      	ldr	r7, [pc, #112]	; (7f14 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    7ea2:	89a1      	ldrh	r1, [r4, #12]
    7ea4:	f8b7 20c4 	ldrh.w	r2, [r7, #196]	; 0xc4
    7ea8:	4291      	cmp	r1, r2
    7eaa:	d807      	bhi.n	7ebc <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    7eac:	2300      	movs	r3, #0
    7eae:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    7eb0:	4621      	mov	r1, r4
    7eb2:	4628      	mov	r0, r5
    7eb4:	f7ff faee 	bl	7494 <send_frag>
	if (!send_buf(conn, buf)) {
    7eb8:	b140      	cbz	r0, 7ecc <bt_conn_process_tx+0x84>
}
    7eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    7ebc:	f105 060a 	add.w	r6, r5, #10
    7ec0:	4621      	mov	r1, r4
    7ec2:	4630      	mov	r0, r6
    7ec4:	f7ff ff8a 	bl	7ddc <create_frag.isra.0>
	if (!frag) {
    7ec8:	4601      	mov	r1, r0
    7eca:	b920      	cbnz	r0, 7ed6 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    7ecc:	4620      	mov	r0, r4
}
    7ece:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    7ed2:	f010 ba7b 	b.w	183cc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    7ed6:	2301      	movs	r3, #1
    7ed8:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    7eda:	4628      	mov	r0, r5
    7edc:	f7ff fada 	bl	7494 <send_frag>
    7ee0:	2800      	cmp	r0, #0
    7ee2:	d0f3      	beq.n	7ecc <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    7ee4:	89a2      	ldrh	r2, [r4, #12]
    7ee6:	f8b7 30c4 	ldrh.w	r3, [r7, #196]	; 0xc4
    7eea:	429a      	cmp	r2, r3
    7eec:	d802      	bhi.n	7ef4 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    7eee:	2300      	movs	r3, #0
    7ef0:	2203      	movs	r2, #3
    7ef2:	e7dd      	b.n	7eb0 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    7ef4:	4621      	mov	r1, r4
    7ef6:	4630      	mov	r0, r6
    7ef8:	f7ff ff70 	bl	7ddc <create_frag.isra.0>
		if (!frag) {
    7efc:	4601      	mov	r1, r0
    7efe:	2800      	cmp	r0, #0
    7f00:	d0e4      	beq.n	7ecc <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    7f02:	2301      	movs	r3, #1
    7f04:	461a      	mov	r2, r3
    7f06:	e7e8      	b.n	7eda <bt_conn_process_tx+0x92>
    7f08:	0002f1d2 	.word	0x0002f1d2
    7f0c:	0002e9fd 	.word	0x0002e9fd
    7f10:	0002ebd5 	.word	0x0002ebd5
    7f14:	20000000 	.word	0x20000000

00007f18 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    7f18:	4b03      	ldr	r3, [pc, #12]	; (7f28 <bt_conn_index+0x10>)
    7f1a:	1ac0      	subs	r0, r0, r3
    7f1c:	4b03      	ldr	r3, [pc, #12]	; (7f2c <bt_conn_index+0x14>)
    7f1e:	1180      	asrs	r0, r0, #6
    7f20:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    7f22:	b2c0      	uxtb	r0, r0
    7f24:	4770      	bx	lr
    7f26:	bf00      	nop
    7f28:	20000f20 	.word	0x20000f20
    7f2c:	aaaaaaab 	.word	0xaaaaaaab

00007f30 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    7f30:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    7f32:	490b      	ldr	r1, [pc, #44]	; (7f60 <bt_conn_init+0x30>)
    7f34:	480b      	ldr	r0, [pc, #44]	; (7f64 <bt_conn_init+0x34>)
    7f36:	f023 f803 	bl	2af40 <k_queue_append>
    7f3a:	490b      	ldr	r1, [pc, #44]	; (7f68 <bt_conn_init+0x38>)
    7f3c:	4809      	ldr	r0, [pc, #36]	; (7f64 <bt_conn_init+0x34>)
    7f3e:	f022 ffff 	bl	2af40 <k_queue_append>
    7f42:	490a      	ldr	r1, [pc, #40]	; (7f6c <bt_conn_init+0x3c>)
    7f44:	4807      	ldr	r0, [pc, #28]	; (7f64 <bt_conn_init+0x34>)
    7f46:	f022 fffb 	bl	2af40 <k_queue_append>
	}

	bt_att_init();
    7f4a:	f01d fa3a 	bl	253c2 <bt_att_init>

	err = bt_smp_init();
    7f4e:	f01d ff1c 	bl	25d8a <bt_smp_init>
	if (err) {
    7f52:	4604      	mov	r4, r0
    7f54:	b908      	cbnz	r0, 7f5a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    7f56:	f01c ff17 	bl	24d88 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    7f5a:	4620      	mov	r0, r4
    7f5c:	bd10      	pop	{r4, pc}
    7f5e:	bf00      	nop
    7f60:	2000297c 	.word	0x2000297c
    7f64:	20000c10 	.word	0x20000c10
    7f68:	2000298c 	.word	0x2000298c
    7f6c:	2000299c 	.word	0x2000299c

00007f70 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    7f70:	4a0b      	ldr	r2, [pc, #44]	; (7fa0 <l2cap_accept+0x30>)
{
    7f72:	b508      	push	{r3, lr}
    7f74:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    7f76:	6810      	ldr	r0, [r2, #0]
    7f78:	b918      	cbnz	r0, 7f82 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    7f7a:	4b0a      	ldr	r3, [pc, #40]	; (7fa4 <l2cap_accept+0x34>)
    7f7c:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    7f7e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    7f80:	bd08      	pop	{r3, pc}
    7f82:	4909      	ldr	r1, [pc, #36]	; (7fa8 <l2cap_accept+0x38>)
    7f84:	4a09      	ldr	r2, [pc, #36]	; (7fac <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    7f86:	480a      	ldr	r0, [pc, #40]	; (7fb0 <l2cap_accept+0x40>)
    7f88:	1a52      	subs	r2, r2, r1
    7f8a:	08d2      	lsrs	r2, r2, #3
    7f8c:	0192      	lsls	r2, r2, #6
    7f8e:	f042 0201 	orr.w	r2, r2, #1
    7f92:	4619      	mov	r1, r3
    7f94:	f01b fb2d 	bl	235f2 <log_1>
	return -ENOMEM;
    7f98:	f06f 000b 	mvn.w	r0, #11
    7f9c:	e7f0      	b.n	7f80 <l2cap_accept+0x10>
    7f9e:	bf00      	nop
    7fa0:	20000fe0 	.word	0x20000fe0
    7fa4:	0002c330 	.word	0x0002c330
    7fa8:	0002bf50 	.word	0x0002bf50
    7fac:	0002c018 	.word	0x0002c018
    7fb0:	0002f25f 	.word	0x0002f25f

00007fb4 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    7fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7fb6:	4605      	mov	r5, r0
    7fb8:	460f      	mov	r7, r1
    7fba:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    7fbc:	2300      	movs	r3, #0
    7fbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7fc2:	2104      	movs	r1, #4
    7fc4:	2000      	movs	r0, #0
    7fc6:	f7ff fedf 	bl	7d88 <bt_conn_create_pdu_timeout>
	if (!buf) {
    7fca:	4604      	mov	r4, r0
    7fcc:	b960      	cbnz	r0, 7fe8 <l2cap_create_le_sig_pdu.isra.0+0x34>
    7fce:	4a0a      	ldr	r2, [pc, #40]	; (7ff8 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    7fd0:	4b0a      	ldr	r3, [pc, #40]	; (7ffc <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    7fd2:	480b      	ldr	r0, [pc, #44]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7fd4:	1ad2      	subs	r2, r2, r3
    7fd6:	08d2      	lsrs	r2, r2, #3
    7fd8:	0192      	lsls	r2, r2, #6
    7fda:	f042 0201 	orr.w	r2, r2, #1
    7fde:	4629      	mov	r1, r5
    7fe0:	f01b fb07 	bl	235f2 <log_1>
}
    7fe4:	4620      	mov	r0, r4
    7fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    7fe8:	2104      	movs	r1, #4
    7fea:	3008      	adds	r0, #8
    7fec:	f01d ff2c 	bl	25e48 <net_buf_simple_add>
	hdr->code = code;
    7ff0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    7ff2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    7ff4:	8046      	strh	r6, [r0, #2]
	return buf;
    7ff6:	e7f5      	b.n	7fe4 <l2cap_create_le_sig_pdu.isra.0+0x30>
    7ff8:	0002c018 	.word	0x0002c018
    7ffc:	0002bf50 	.word	0x0002bf50
    8000:	0002f286 	.word	0x0002f286

00008004 <l2cap_rtx_timeout>:
{
    8004:	b538      	push	{r3, r4, r5, lr}
    8006:	4a0b      	ldr	r2, [pc, #44]	; (8034 <l2cap_rtx_timeout+0x30>)
    8008:	4b0b      	ldr	r3, [pc, #44]	; (8038 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    800a:	4604      	mov	r4, r0
    800c:	1ad2      	subs	r2, r2, r3
    800e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    8012:	480a      	ldr	r0, [pc, #40]	; (803c <l2cap_rtx_timeout+0x38>)
    8014:	08d2      	lsrs	r2, r2, #3
    8016:	0192      	lsls	r2, r2, #6
    8018:	4621      	mov	r1, r4
    801a:	f042 0201 	orr.w	r2, r2, #1
    801e:	f01b fae8 	bl	235f2 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    8022:	4628      	mov	r0, r5
    8024:	4621      	mov	r1, r4
    8026:	f01c fe26 	bl	24c76 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    802a:	4620      	mov	r0, r4
}
    802c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    8030:	f01c be43 	b.w	24cba <bt_l2cap_chan_del>
    8034:	0002c018 	.word	0x0002c018
    8038:	0002bf50 	.word	0x0002bf50
    803c:	0002f2ae 	.word	0x0002f2ae

00008040 <bt_l2cap_connected>:
{
    8040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8044:	4e2a      	ldr	r6, [pc, #168]	; (80f0 <bt_l2cap_connected+0xb0>)
    8046:	4f2b      	ldr	r7, [pc, #172]	; (80f4 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    8048:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80f8 <bt_l2cap_connected+0xb8>
{
    804c:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    804e:	42be      	cmp	r6, r7
    8050:	d302      	bcc.n	8058 <bt_l2cap_connected+0x18>
}
    8052:	b003      	add	sp, #12
    8054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8058:	6873      	ldr	r3, [r6, #4]
    805a:	a901      	add	r1, sp, #4
    805c:	4628      	mov	r0, r5
    805e:	4798      	blx	r3
    8060:	2800      	cmp	r0, #0
    8062:	db40      	blt.n	80e6 <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    8064:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    8066:	8833      	ldrh	r3, [r6, #0]
    8068:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    806c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    8070:	2230      	movs	r2, #48	; 0x30
    8072:	2100      	movs	r1, #0
    8074:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    8078:	f8d6 9008 	ldr.w	r9, [r6, #8]
    807c:	f023 fb8e 	bl	2b79c <memset>
    8080:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8084:	f104 0340 	add.w	r3, r4, #64	; 0x40
    8088:	2200      	movs	r2, #0
    808a:	f3bf 8f5b 	dmb	ish
    808e:	e853 1f00 	ldrex	r1, [r3]
    8092:	e843 2000 	strex	r0, r2, [r3]
    8096:	2800      	cmp	r0, #0
    8098:	d1f9      	bne.n	808e <bt_l2cap_connected+0x4e>
    809a:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    809e:	60a2      	str	r2, [r4, #8]
Z_GENLIST_APPEND(slist, snode)
    80a0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    80a2:	f104 0308 	add.w	r3, r4, #8
    80a6:	bb02      	cbnz	r2, 80ea <bt_l2cap_connected+0xaa>
	list->head = node;
    80a8:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    80ac:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    80ae:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    80b0:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    80b2:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    80b6:	681b      	ldr	r3, [r3, #0]
    80b8:	b103      	cbz	r3, 80bc <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    80ba:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80bc:	9b01      	ldr	r3, [sp, #4]
    80be:	f3bf 8f5b 	dmb	ish
    80c2:	3340      	adds	r3, #64	; 0x40
    80c4:	e853 2f00 	ldrex	r2, [r3]
    80c8:	f042 0201 	orr.w	r2, r2, #1
    80cc:	e843 2100 	strex	r1, r2, [r3]
    80d0:	2900      	cmp	r1, #0
    80d2:	d1f7      	bne.n	80c4 <bt_l2cap_connected+0x84>
    80d4:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    80d8:	9801      	ldr	r0, [sp, #4]
    80da:	6843      	ldr	r3, [r0, #4]
    80dc:	699b      	ldr	r3, [r3, #24]
    80de:	b113      	cbz	r3, 80e6 <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    80e0:	f100 0140 	add.w	r1, r0, #64	; 0x40
    80e4:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    80e6:	360c      	adds	r6, #12
    80e8:	e7b1      	b.n	804e <bt_l2cap_connected+0xe>
	parent->next = child;
    80ea:	6013      	str	r3, [r2, #0]
	list->tail = node;
    80ec:	652b      	str	r3, [r5, #80]	; 0x50
}
    80ee:	e7dd      	b.n	80ac <bt_l2cap_connected+0x6c>
    80f0:	0002beb8 	.word	0x0002beb8
    80f4:	0002bedc 	.word	0x0002bedc
    80f8:	00008005 	.word	0x00008005

000080fc <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    80fc:	898b      	ldrh	r3, [r1, #12]
    80fe:	2b03      	cmp	r3, #3
{
    8100:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8102:	4606      	mov	r6, r0
    8104:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8106:	d80a      	bhi.n	811e <l2cap_recv+0x22>
    8108:	492e      	ldr	r1, [pc, #184]	; (81c4 <l2cap_recv+0xc8>)
    810a:	4b2f      	ldr	r3, [pc, #188]	; (81c8 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    810c:	482f      	ldr	r0, [pc, #188]	; (81cc <l2cap_recv+0xd0>)
    810e:	1ac9      	subs	r1, r1, r3
    8110:	08c9      	lsrs	r1, r1, #3
    8112:	0189      	lsls	r1, r1, #6
    8114:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    8118:	f01b fa5e 	bl	235d8 <log_0>
		return 0;
    811c:	e013      	b.n	8146 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    811e:	2104      	movs	r1, #4
    8120:	f105 0008 	add.w	r0, r5, #8
    8124:	f01d fec2 	bl	25eac <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8128:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    812a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    812c:	428a      	cmp	r2, r1
    812e:	4604      	mov	r4, r0
    8130:	d00c      	beq.n	814c <l2cap_recv+0x50>
    8132:	4825      	ldr	r0, [pc, #148]	; (81c8 <l2cap_recv+0xcc>)
    8134:	4b23      	ldr	r3, [pc, #140]	; (81c4 <l2cap_recv+0xc8>)
    8136:	1a1b      	subs	r3, r3, r0
    8138:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    813a:	019b      	lsls	r3, r3, #6
    813c:	4824      	ldr	r0, [pc, #144]	; (81d0 <l2cap_recv+0xd4>)
    813e:	f043 0301 	orr.w	r3, r3, #1
    8142:	f01b fa6a 	bl	2361a <log_2>
}
    8146:	2000      	movs	r0, #0
    8148:	b002      	add	sp, #8
    814a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    814c:	7843      	ldrb	r3, [r0, #1]
    814e:	b943      	cbnz	r3, 8162 <l2cap_recv+0x66>
    8150:	491c      	ldr	r1, [pc, #112]	; (81c4 <l2cap_recv+0xc8>)
    8152:	4b1d      	ldr	r3, [pc, #116]	; (81c8 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    8154:	481f      	ldr	r0, [pc, #124]	; (81d4 <l2cap_recv+0xd8>)
    8156:	1ac9      	subs	r1, r1, r3
    8158:	08c9      	lsrs	r1, r1, #3
    815a:	0189      	lsls	r1, r1, #6
    815c:	f041 0101 	orr.w	r1, r1, #1
    8160:	e7da      	b.n	8118 <l2cap_recv+0x1c>
	switch (hdr->code) {
    8162:	7801      	ldrb	r1, [r0, #0]
    8164:	2901      	cmp	r1, #1
    8166:	d0ee      	beq.n	8146 <l2cap_recv+0x4a>
    8168:	2913      	cmp	r1, #19
    816a:	d10a      	bne.n	8182 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    816c:	2a01      	cmp	r2, #1
    816e:	d8ea      	bhi.n	8146 <l2cap_recv+0x4a>
    8170:	4914      	ldr	r1, [pc, #80]	; (81c4 <l2cap_recv+0xc8>)
    8172:	4b15      	ldr	r3, [pc, #84]	; (81c8 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    8174:	4818      	ldr	r0, [pc, #96]	; (81d8 <l2cap_recv+0xdc>)
    8176:	1ac9      	subs	r1, r1, r3
    8178:	08c9      	lsrs	r1, r1, #3
    817a:	0189      	lsls	r1, r1, #6
    817c:	f041 0101 	orr.w	r1, r1, #1
    8180:	e7ca      	b.n	8118 <l2cap_recv+0x1c>
    8182:	4b11      	ldr	r3, [pc, #68]	; (81c8 <l2cap_recv+0xcc>)
    8184:	4a0f      	ldr	r2, [pc, #60]	; (81c4 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    8186:	4815      	ldr	r0, [pc, #84]	; (81dc <l2cap_recv+0xe0>)
    8188:	1ad2      	subs	r2, r2, r3
    818a:	08d2      	lsrs	r2, r2, #3
    818c:	0192      	lsls	r2, r2, #6
    818e:	f042 0202 	orr.w	r2, r2, #2
    8192:	f01b fa2e 	bl	235f2 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    8196:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    8198:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    819a:	2202      	movs	r2, #2
    819c:	2001      	movs	r0, #1
    819e:	f7ff ff09 	bl	7fb4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    81a2:	4604      	mov	r4, r0
    81a4:	2800      	cmp	r0, #0
    81a6:	d0ce      	beq.n	8146 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    81a8:	2102      	movs	r1, #2
    81aa:	3008      	adds	r0, #8
    81ac:	f01d fe4c 	bl	25e48 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    81b0:	2300      	movs	r3, #0
    81b2:	7003      	strb	r3, [r0, #0]
    81b4:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    81b6:	4622      	mov	r2, r4
    81b8:	9300      	str	r3, [sp, #0]
    81ba:	2105      	movs	r1, #5
    81bc:	4628      	mov	r0, r5
    81be:	f01c fdaa 	bl	24d16 <bt_l2cap_send_cb>
}
    81c2:	e7c0      	b.n	8146 <l2cap_recv+0x4a>
    81c4:	0002c018 	.word	0x0002c018
    81c8:	0002bf50 	.word	0x0002bf50
    81cc:	0002f2be 	.word	0x0002f2be
    81d0:	0002f2dc 	.word	0x0002f2dc
    81d4:	0002f2fd 	.word	0x0002f2fd
    81d8:	0002f31e 	.word	0x0002f31e
    81dc:	0002f33a 	.word	0x0002f33a

000081e0 <bt_l2cap_recv>:
{
    81e0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    81e2:	898b      	ldrh	r3, [r1, #12]
    81e4:	2b03      	cmp	r3, #3
{
    81e6:	4605      	mov	r5, r0
    81e8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    81ea:	d80e      	bhi.n	820a <bt_l2cap_recv+0x2a>
    81ec:	4914      	ldr	r1, [pc, #80]	; (8240 <bt_l2cap_recv+0x60>)
    81ee:	4b15      	ldr	r3, [pc, #84]	; (8244 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    81f0:	4815      	ldr	r0, [pc, #84]	; (8248 <bt_l2cap_recv+0x68>)
    81f2:	1ac9      	subs	r1, r1, r3
    81f4:	08c9      	lsrs	r1, r1, #3
    81f6:	0189      	lsls	r1, r1, #6
    81f8:	f041 0101 	orr.w	r1, r1, #1
    81fc:	f01b f9ec 	bl	235d8 <log_0>
	net_buf_unref(buf);
    8200:	4620      	mov	r0, r4
}
    8202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    8206:	f010 b8e1 	b.w	183cc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    820a:	2104      	movs	r1, #4
    820c:	f104 0008 	add.w	r0, r4, #8
    8210:	f01d fe4c 	bl	25eac <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    8214:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8216:	4628      	mov	r0, r5
    8218:	f01c fda6 	bl	24d68 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    821c:	b950      	cbnz	r0, 8234 <bt_l2cap_recv+0x54>
    821e:	4b09      	ldr	r3, [pc, #36]	; (8244 <bt_l2cap_recv+0x64>)
    8220:	4a07      	ldr	r2, [pc, #28]	; (8240 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    8222:	480a      	ldr	r0, [pc, #40]	; (824c <bt_l2cap_recv+0x6c>)
    8224:	1ad2      	subs	r2, r2, r3
    8226:	08d2      	lsrs	r2, r2, #3
    8228:	0192      	lsls	r2, r2, #6
    822a:	f042 0202 	orr.w	r2, r2, #2
    822e:	f01b f9e0 	bl	235f2 <log_1>
		net_buf_unref(buf);
    8232:	e7e5      	b.n	8200 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    8234:	6843      	ldr	r3, [r0, #4]
    8236:	4621      	mov	r1, r4
    8238:	691b      	ldr	r3, [r3, #16]
    823a:	4798      	blx	r3
    823c:	e7e0      	b.n	8200 <bt_l2cap_recv+0x20>
    823e:	bf00      	nop
    8240:	0002c018 	.word	0x0002c018
    8244:	0002bf50 	.word	0x0002bf50
    8248:	0002f358 	.word	0x0002f358
    824c:	0002f375 	.word	0x0002f375

00008250 <bt_l2cap_update_conn_param>:
{
    8250:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    8252:	4b15      	ldr	r3, [pc, #84]	; (82a8 <bt_l2cap_update_conn_param+0x58>)
    8254:	781a      	ldrb	r2, [r3, #0]
    8256:	3201      	adds	r2, #1
	if (!ident) {
    8258:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    825c:	bf08      	it	eq
    825e:	2201      	moveq	r2, #1
    8260:	701a      	strb	r2, [r3, #0]
{
    8262:	4605      	mov	r5, r0
    8264:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    8266:	2208      	movs	r2, #8
    8268:	7819      	ldrb	r1, [r3, #0]
    826a:	2012      	movs	r0, #18
    826c:	f7ff fea2 	bl	7fb4 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    8270:	4606      	mov	r6, r0
    8272:	b1b0      	cbz	r0, 82a2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    8274:	2108      	movs	r1, #8
    8276:	4408      	add	r0, r1
    8278:	f01d fde6 	bl	25e48 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    827c:	8822      	ldrh	r2, [r4, #0]
    827e:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    8280:	8862      	ldrh	r2, [r4, #2]
    8282:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    8284:	88a2      	ldrh	r2, [r4, #4]
    8286:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    8288:	88e2      	ldrh	r2, [r4, #6]
    828a:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    828c:	2400      	movs	r4, #0
    828e:	9400      	str	r4, [sp, #0]
    8290:	4623      	mov	r3, r4
    8292:	4632      	mov	r2, r6
    8294:	2105      	movs	r1, #5
    8296:	4628      	mov	r0, r5
    8298:	f01c fd3d 	bl	24d16 <bt_l2cap_send_cb>
	return 0;
    829c:	4620      	mov	r0, r4
}
    829e:	b002      	add	sp, #8
    82a0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    82a2:	f06f 000b 	mvn.w	r0, #11
    82a6:	e7fa      	b.n	829e <bt_l2cap_update_conn_param+0x4e>
    82a8:	200085de 	.word	0x200085de

000082ac <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    82ac:	4b02      	ldr	r3, [pc, #8]	; (82b8 <att_cfm_sent+0xc>)
    82ae:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    82b2:	f01c bd97 	b.w	24de4 <att_sent>
    82b6:	bf00      	nop
    82b8:	0002500f 	.word	0x0002500f

000082bc <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    82bc:	4b02      	ldr	r3, [pc, #8]	; (82c8 <att_rsp_sent+0xc>)
    82be:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    82c2:	f01c bd8f 	b.w	24de4 <att_sent>
    82c6:	bf00      	nop
    82c8:	00024ff3 	.word	0x00024ff3

000082cc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    82cc:	4b02      	ldr	r3, [pc, #8]	; (82d8 <att_req_sent+0xc>)
    82ce:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    82d2:	f01c bd87 	b.w	24de4 <att_sent>
    82d6:	bf00      	nop
    82d8:	000085c5 	.word	0x000085c5

000082dc <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    82dc:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    82de:	3808      	subs	r0, #8
    82e0:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    82e2:	a901      	add	r1, sp, #4
    82e4:	4802      	ldr	r0, [pc, #8]	; (82f0 <bt_att_released+0x14>)
    82e6:	f017 fa0f 	bl	1f708 <k_mem_slab_free>
}
    82ea:	b003      	add	sp, #12
    82ec:	f85d fb04 	ldr.w	pc, [sp], #4
    82f0:	20000b54 	.word	0x20000b54

000082f4 <find_type_cb>:
{
    82f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    82f8:	f8d2 9000 	ldr.w	r9, [r2]
{
    82fc:	b091      	sub	sp, #68	; 0x44
    82fe:	4607      	mov	r7, r0
    8300:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8302:	2500      	movs	r5, #0
    8304:	f642 0301 	movw	r3, #10241	; 0x2801
    8308:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    830a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    830e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    8312:	a90b      	add	r1, sp, #44	; 0x2c
{
    8314:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8316:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    831a:	f01c f9fb 	bl	24714 <bt_uuid_cmp>
    831e:	2800      	cmp	r0, #0
    8320:	d066      	beq.n	83f0 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8322:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8326:	6838      	ldr	r0, [r7, #0]
    8328:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    832c:	a90b      	add	r1, sp, #44	; 0x2c
    832e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    8332:	f01c f9ef 	bl	24714 <bt_uuid_cmp>
    8336:	b138      	cbz	r0, 8348 <find_type_cb+0x54>
		if (data->group &&
    8338:	68a3      	ldr	r3, [r4, #8]
    833a:	b11b      	cbz	r3, 8344 <find_type_cb+0x50>
    833c:	885a      	ldrh	r2, [r3, #2]
    833e:	42b2      	cmp	r2, r6
    8340:	d200      	bcs.n	8344 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    8342:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    8344:	2001      	movs	r0, #1
    8346:	e009      	b.n	835c <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    8348:	6861      	ldr	r1, [r4, #4]
    834a:	4608      	mov	r0, r1
    834c:	f01c fd42 	bl	24dd4 <net_buf_frags_len>
    8350:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    8354:	1a1b      	subs	r3, r3, r0
    8356:	2b03      	cmp	r3, #3
    8358:	d803      	bhi.n	8362 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    835a:	2000      	movs	r0, #0
}
    835c:	b011      	add	sp, #68	; 0x44
    835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    8362:	4608      	mov	r0, r1
    8364:	f01d fd4e 	bl	25e04 <net_buf_frag_last>
    8368:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    836a:	6860      	ldr	r0, [r4, #4]
    836c:	f01c fd32 	bl	24dd4 <net_buf_frags_len>
    8370:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    8374:	f105 0b08 	add.w	fp, r5, #8
    8378:	ebaa 0a00 	sub.w	sl, sl, r0
    837c:	4658      	mov	r0, fp
    837e:	f01d fda9 	bl	25ed4 <net_buf_simple_tailroom>
    8382:	4582      	cmp	sl, r0
    8384:	d237      	bcs.n	83f6 <find_type_cb+0x102>
    8386:	6860      	ldr	r0, [r4, #4]
    8388:	f01c fd24 	bl	24dd4 <net_buf_frags_len>
    838c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    8390:	1a18      	subs	r0, r3, r0
	if (!len) {
    8392:	b970      	cbnz	r0, 83b2 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    8394:	6863      	ldr	r3, [r4, #4]
    8396:	7998      	ldrb	r0, [r3, #6]
    8398:	f00f ff5c 	bl	18254 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    839c:	2200      	movs	r2, #0
    839e:	2300      	movs	r3, #0
    83a0:	f01d fcf6 	bl	25d90 <net_buf_alloc_fixed>
		if (!frag) {
    83a4:	4605      	mov	r5, r0
    83a6:	2800      	cmp	r0, #0
    83a8:	d0d7      	beq.n	835a <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    83aa:	4601      	mov	r1, r0
    83ac:	6860      	ldr	r0, [r4, #4]
    83ae:	f01d fd3a 	bl	25e26 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    83b2:	2300      	movs	r3, #0
    83b4:	9300      	str	r3, [sp, #0]
    83b6:	f8d7 9004 	ldr.w	r9, [r7, #4]
    83ba:	4639      	mov	r1, r7
    83bc:	2310      	movs	r3, #16
    83be:	aa02      	add	r2, sp, #8
    83c0:	4640      	mov	r0, r8
    83c2:	47c8      	blx	r9
	if (read < 0) {
    83c4:	1e07      	subs	r7, r0, #0
    83c6:	db13      	blt.n	83f0 <find_type_cb+0xfc>
	if (read != data->value_len) {
    83c8:	7c22      	ldrb	r2, [r4, #16]
    83ca:	68e0      	ldr	r0, [r4, #12]
    83cc:	42ba      	cmp	r2, r7
    83ce:	d037      	beq.n	8440 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    83d0:	4601      	mov	r1, r0
    83d2:	a80b      	add	r0, sp, #44	; 0x2c
    83d4:	f01c f9c8 	bl	24768 <bt_uuid_create>
    83d8:	b988      	cbnz	r0, 83fe <find_type_cb+0x10a>
    83da:	4a1b      	ldr	r2, [pc, #108]	; (8448 <find_type_cb+0x154>)
    83dc:	4b1b      	ldr	r3, [pc, #108]	; (844c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    83de:	7c21      	ldrb	r1, [r4, #16]
    83e0:	481b      	ldr	r0, [pc, #108]	; (8450 <find_type_cb+0x15c>)
    83e2:	1ad2      	subs	r2, r2, r3
    83e4:	08d2      	lsrs	r2, r2, #3
    83e6:	0192      	lsls	r2, r2, #6
    83e8:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    83ec:	f01b f901 	bl	235f2 <log_1>
	data->group = NULL;
    83f0:	2300      	movs	r3, #0
    83f2:	60a3      	str	r3, [r4, #8]
    83f4:	e7a6      	b.n	8344 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    83f6:	4658      	mov	r0, fp
    83f8:	f01d fd6c 	bl	25ed4 <net_buf_simple_tailroom>
    83fc:	e7c9      	b.n	8392 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    83fe:	b2fa      	uxtb	r2, r7
    8400:	a902      	add	r1, sp, #8
    8402:	a806      	add	r0, sp, #24
    8404:	f01c f9b0 	bl	24768 <bt_uuid_create>
    8408:	b948      	cbnz	r0, 841e <find_type_cb+0x12a>
    840a:	4a0f      	ldr	r2, [pc, #60]	; (8448 <find_type_cb+0x154>)
    840c:	4b0f      	ldr	r3, [pc, #60]	; (844c <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    840e:	4811      	ldr	r0, [pc, #68]	; (8454 <find_type_cb+0x160>)
    8410:	1ad2      	subs	r2, r2, r3
    8412:	08d2      	lsrs	r2, r2, #3
    8414:	0192      	lsls	r2, r2, #6
    8416:	f042 0202 	orr.w	r2, r2, #2
    841a:	4639      	mov	r1, r7
    841c:	e7e6      	b.n	83ec <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    841e:	a906      	add	r1, sp, #24
    8420:	a80b      	add	r0, sp, #44	; 0x2c
    8422:	f01c f977 	bl	24714 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    8426:	2800      	cmp	r0, #0
    8428:	d1e2      	bne.n	83f0 <find_type_cb+0xfc>
	data->err = 0x00;
    842a:	2300      	movs	r3, #0
    842c:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    842e:	2104      	movs	r1, #4
    8430:	f105 0008 	add.w	r0, r5, #8
    8434:	f01d fd08 	bl	25e48 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    8438:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    843a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    843c:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    843e:	e781      	b.n	8344 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    8440:	a902      	add	r1, sp, #8
    8442:	f023 f97c 	bl	2b73e <memcmp>
    8446:	e7ee      	b.n	8426 <find_type_cb+0x132>
    8448:	0002bf58 	.word	0x0002bf58
    844c:	0002bf50 	.word	0x0002bf50
    8450:	0002f3b1 	.word	0x0002f3b1
    8454:	0002f3d0 	.word	0x0002f3d0

00008458 <chan_send>:
{
    8458:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    845c:	688b      	ldr	r3, [r1, #8]
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	2bd2      	cmp	r3, #210	; 0xd2
{
    8462:	4605      	mov	r5, r0
    8464:	460c      	mov	r4, r1
    8466:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8468:	d116      	bne.n	8498 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    846a:	6803      	ldr	r3, [r0, #0]
    846c:	6818      	ldr	r0, [r3, #0]
    846e:	f01d fc89 	bl	25d84 <bt_smp_sign>
		if (err) {
    8472:	4606      	mov	r6, r0
    8474:	b180      	cbz	r0, 8498 <chan_send+0x40>
    8476:	4928      	ldr	r1, [pc, #160]	; (8518 <chan_send+0xc0>)
    8478:	4b28      	ldr	r3, [pc, #160]	; (851c <chan_send+0xc4>)
			BT_ERR("Error signing data");
    847a:	4829      	ldr	r0, [pc, #164]	; (8520 <chan_send+0xc8>)
    847c:	1ac9      	subs	r1, r1, r3
    847e:	08c9      	lsrs	r1, r1, #3
    8480:	0189      	lsls	r1, r1, #6
    8482:	f041 0101 	orr.w	r1, r1, #1
    8486:	f01b f8a7 	bl	235d8 <log_0>
		net_buf_unref(buf);
    848a:	4620      	mov	r0, r4
    848c:	f00f ff9e 	bl	183cc <net_buf_unref>
}
    8490:	4630      	mov	r0, r6
    8492:	b003      	add	sp, #12
    8494:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8498:	f104 0008 	add.w	r0, r4, #8
    849c:	f01d fd16 	bl	25ecc <net_buf_simple_headroom>
	state->len = buf->len;
    84a0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    84a4:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    84a6:	f1b9 0f00 	cmp.w	r9, #0
    84aa:	d10a      	bne.n	84c2 <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    84ac:	68a3      	ldr	r3, [r4, #8]
    84ae:	7818      	ldrb	r0, [r3, #0]
    84b0:	f01c fcae 	bl	24e10 <att_op_get_type>
    84b4:	1e43      	subs	r3, r0, #1
    84b6:	b2db      	uxtb	r3, r3
    84b8:	2b04      	cmp	r3, #4
    84ba:	bf9c      	itt	ls
    84bc:	4a19      	ldrls	r2, [pc, #100]	; (8524 <chan_send+0xcc>)
    84be:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    84c2:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    84c4:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    84c8:	4620      	mov	r0, r4
    84ca:	681e      	ldr	r6, [r3, #0]
    84cc:	f01d fc96 	bl	25dfc <net_buf_ref>
    84d0:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    84d4:	4b14      	ldr	r3, [pc, #80]	; (8528 <chan_send+0xd0>)
    84d6:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    84d8:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    84da:	d019      	beq.n	8510 <chan_send+0xb8>
	} else if (cb == chan_cfm_sent) {
    84dc:	4b13      	ldr	r3, [pc, #76]	; (852c <chan_send+0xd4>)
    84de:	4299      	cmp	r1, r3
    84e0:	d018      	beq.n	8514 <chan_send+0xbc>
		return att_sent;
    84e2:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8540 <chan_send+0xe8>
    84e6:	4b12      	ldr	r3, [pc, #72]	; (8530 <chan_send+0xd8>)
    84e8:	4812      	ldr	r0, [pc, #72]	; (8534 <chan_send+0xdc>)
    84ea:	4561      	cmp	r1, ip
    84ec:	bf18      	it	ne
    84ee:	4603      	movne	r3, r0
				&chan->chan.chan);
    84f0:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    84f2:	4630      	mov	r0, r6
    84f4:	9500      	str	r5, [sp, #0]
    84f6:	2104      	movs	r1, #4
    84f8:	f01c fc0d 	bl	24d16 <bt_l2cap_send_cb>
	if (!err) {
    84fc:	4606      	mov	r6, r0
    84fe:	2800      	cmp	r0, #0
    8500:	d0c3      	beq.n	848a <chan_send+0x32>
	buf->data = buf->__buf + state->offset;
    8502:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8504:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8508:	fa10 f787 	uxtah	r7, r0, r7
    850c:	60a7      	str	r7, [r4, #8]
}
    850e:	e7bf      	b.n	8490 <chan_send+0x38>
		return att_rsp_sent;
    8510:	4b09      	ldr	r3, [pc, #36]	; (8538 <chan_send+0xe0>)
    8512:	e7ed      	b.n	84f0 <chan_send+0x98>
		return att_cfm_sent;
    8514:	4b09      	ldr	r3, [pc, #36]	; (853c <chan_send+0xe4>)
    8516:	e7eb      	b.n	84f0 <chan_send+0x98>
    8518:	0002bf58 	.word	0x0002bf58
    851c:	0002bf50 	.word	0x0002bf50
    8520:	0002f3ef 	.word	0x0002f3ef
    8524:	0002c350 	.word	0x0002c350
    8528:	00024ff3 	.word	0x00024ff3
    852c:	0002500f 	.word	0x0002500f
    8530:	000082cd 	.word	0x000082cd
    8534:	00024de5 	.word	0x00024de5
    8538:	000082bd 	.word	0x000082bd
    853c:	000082ad 	.word	0x000082ad
    8540:	000085c5 	.word	0x000085c5

00008544 <att_get>:
{
    8544:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    8546:	7a83      	ldrb	r3, [r0, #10]
    8548:	2b07      	cmp	r3, #7
    854a:	d00b      	beq.n	8564 <att_get+0x20>
    854c:	4918      	ldr	r1, [pc, #96]	; (85b0 <att_get+0x6c>)
    854e:	4b19      	ldr	r3, [pc, #100]	; (85b4 <att_get+0x70>)
		BT_WARN("Not connected");
    8550:	4819      	ldr	r0, [pc, #100]	; (85b8 <att_get+0x74>)
    8552:	1ac9      	subs	r1, r1, r3
    8554:	08c9      	lsrs	r1, r1, #3
    8556:	0189      	lsls	r1, r1, #6
    8558:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    855c:	f01b f83c 	bl	235d8 <log_0>
		return NULL;
    8560:	2400      	movs	r4, #0
    8562:	e00e      	b.n	8582 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8564:	2104      	movs	r1, #4
    8566:	f01c fbff 	bl	24d68 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    856a:	4604      	mov	r4, r0
    856c:	b958      	cbnz	r0, 8586 <att_get+0x42>
    856e:	4910      	ldr	r1, [pc, #64]	; (85b0 <att_get+0x6c>)
    8570:	4b10      	ldr	r3, [pc, #64]	; (85b4 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    8572:	4812      	ldr	r0, [pc, #72]	; (85bc <att_get+0x78>)
    8574:	1ac9      	subs	r1, r1, r3
    8576:	08c9      	lsrs	r1, r1, #3
    8578:	0189      	lsls	r1, r1, #6
    857a:	f041 0101 	orr.w	r1, r1, #1
    857e:	f01b f82b 	bl	235d8 <log_0>
}
    8582:	4620      	mov	r0, r4
    8584:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8586:	f3bf 8f5b 	dmb	ish
    858a:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    858e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    8592:	075b      	lsls	r3, r3, #29
    8594:	d508      	bpl.n	85a8 <att_get+0x64>
    8596:	4906      	ldr	r1, [pc, #24]	; (85b0 <att_get+0x6c>)
    8598:	4b06      	ldr	r3, [pc, #24]	; (85b4 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    859a:	4809      	ldr	r0, [pc, #36]	; (85c0 <att_get+0x7c>)
    859c:	1ac9      	subs	r1, r1, r3
    859e:	08c9      	lsrs	r1, r1, #3
    85a0:	0189      	lsls	r1, r1, #6
    85a2:	f041 0102 	orr.w	r1, r1, #2
    85a6:	e7d9      	b.n	855c <att_get+0x18>
	return att_chan->att;
    85a8:	f850 4c08 	ldr.w	r4, [r0, #-8]
    85ac:	e7e9      	b.n	8582 <att_get+0x3e>
    85ae:	bf00      	nop
    85b0:	0002bf58 	.word	0x0002bf58
    85b4:	0002bf50 	.word	0x0002bf50
    85b8:	0002f402 	.word	0x0002f402
    85bc:	0002f410 	.word	0x0002f410
    85c0:	0002f42b 	.word	0x0002f42b

000085c4 <chan_req_sent>:
	if (chan->req) {
    85c4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    85c8:	b13b      	cbz	r3, 85da <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    85ca:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    85ce:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    85d2:	4802      	ldr	r0, [pc, #8]	; (85dc <chan_req_sent+0x18>)
    85d4:	2300      	movs	r3, #0
    85d6:	f017 beb1 	b.w	2033c <k_delayed_work_submit_to_queue>
}
    85da:	4770      	bx	lr
    85dc:	20001438 	.word	0x20001438

000085e0 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    85e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    85e2:	2300      	movs	r3, #0
{
    85e4:	4606      	mov	r6, r0
    85e6:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    85e8:	482c      	ldr	r0, [pc, #176]	; (869c <bt_att_accept+0xbc>)
    85ea:	2200      	movs	r2, #0
    85ec:	4669      	mov	r1, sp
    85ee:	f017 f859 	bl	1f6a4 <k_mem_slab_alloc>
    85f2:	4604      	mov	r4, r0
    85f4:	b178      	cbz	r0, 8616 <bt_att_accept+0x36>
    85f6:	4a2a      	ldr	r2, [pc, #168]	; (86a0 <bt_att_accept+0xc0>)
    85f8:	4b2a      	ldr	r3, [pc, #168]	; (86a4 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    85fa:	482b      	ldr	r0, [pc, #172]	; (86a8 <bt_att_accept+0xc8>)
    85fc:	1ad2      	subs	r2, r2, r3
    85fe:	08d2      	lsrs	r2, r2, #3
    8600:	0192      	lsls	r2, r2, #6
    8602:	f042 0201 	orr.w	r2, r2, #1
    8606:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8608:	f01a fff3 	bl	235f2 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    860c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8610:	4620      	mov	r0, r4
    8612:	b003      	add	sp, #12
    8614:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3(memset, void *, int)
    8616:	4601      	mov	r1, r0
    8618:	2244      	movs	r2, #68	; 0x44
    861a:	9800      	ldr	r0, [sp, #0]
    861c:	f023 f8be 	bl	2b79c <memset>
	att->conn = conn;
    8620:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8622:	4822      	ldr	r0, [pc, #136]	; (86ac <bt_att_accept+0xcc>)
	list->tail = NULL;
    8624:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    8626:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    862a:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    862e:	2200      	movs	r2, #0
    8630:	2300      	movs	r3, #0
    8632:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    8634:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    8636:	f017 f835 	bl	1f6a4 <k_mem_slab_alloc>
    863a:	4604      	mov	r4, r0
    863c:	b148      	cbz	r0, 8652 <bt_att_accept+0x72>
    863e:	4a18      	ldr	r2, [pc, #96]	; (86a0 <bt_att_accept+0xc0>)
    8640:	4b18      	ldr	r3, [pc, #96]	; (86a4 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8642:	6829      	ldr	r1, [r5, #0]
    8644:	481a      	ldr	r0, [pc, #104]	; (86b0 <bt_att_accept+0xd0>)
    8646:	1ad2      	subs	r2, r2, r3
    8648:	08d2      	lsrs	r2, r2, #3
    864a:	0192      	lsls	r2, r2, #6
    864c:	f042 0201 	orr.w	r2, r2, #1
    8650:	e7da      	b.n	8608 <bt_att_accept+0x28>
    8652:	4601      	mov	r1, r0
    8654:	f44f 7298 	mov.w	r2, #304	; 0x130
    8658:	9801      	ldr	r0, [sp, #4]
    865a:	f023 f89f 	bl	2b79c <memset>
	chan->chan.chan.ops = &ops;
    865e:	9801      	ldr	r0, [sp, #4]
    8660:	4b14      	ldr	r3, [pc, #80]	; (86b4 <bt_att_accept+0xd4>)
    8662:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8664:	30c8      	adds	r0, #200	; 0xc8
    8666:	f022 fc5f 	bl	2af28 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    866a:	9801      	ldr	r0, [sp, #4]
    866c:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    8670:	2203      	movs	r2, #3
    8672:	4611      	mov	r1, r2
    8674:	f022 fdb0 	bl	2b1d8 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8678:	9b01      	ldr	r3, [sp, #4]
    867a:	f3bf 8f5b 	dmb	ish
    867e:	33c0      	adds	r3, #192	; 0xc0
    8680:	e853 2f00 	ldrex	r2, [r3]
    8684:	e843 4100 	strex	r1, r4, [r3]
    8688:	2900      	cmp	r1, #0
    868a:	d1f9      	bne.n	8680 <bt_att_accept+0xa0>
    868c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    8690:	9b01      	ldr	r3, [sp, #4]
    8692:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8696:	603b      	str	r3, [r7, #0]
	return 0;
    8698:	e7ba      	b.n	8610 <bt_att_accept+0x30>
    869a:	bf00      	nop
    869c:	20000b38 	.word	0x20000b38
    86a0:	0002bf58 	.word	0x0002bf58
    86a4:	0002bf50 	.word	0x0002bf50
    86a8:	0002f44f 	.word	0x0002f44f
    86ac:	20000b54 	.word	0x20000b54
    86b0:	0002f474 	.word	0x0002f474
    86b4:	200003a0 	.word	0x200003a0

000086b8 <read_group_cb>:
{
    86b8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    86bc:	4606      	mov	r6, r0
    86be:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    86c0:	f04f 0800 	mov.w	r8, #0
    86c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    86c8:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    86ca:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    86cc:	f88d 8008 	strb.w	r8, [sp, #8]
    86d0:	a902      	add	r1, sp, #8
{
    86d2:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    86d4:	f8ad 300a 	strh.w	r3, [sp, #10]
    86d8:	f01c f81c 	bl	24714 <bt_uuid_cmp>
    86dc:	b1a0      	cbz	r0, 8708 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    86de:	f642 0301 	movw	r3, #10241	; 0x2801
    86e2:	6830      	ldr	r0, [r6, #0]
    86e4:	f88d 800c 	strb.w	r8, [sp, #12]
    86e8:	a903      	add	r1, sp, #12
    86ea:	f8ad 300e 	strh.w	r3, [sp, #14]
    86ee:	f01c f811 	bl	24714 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    86f2:	b148      	cbz	r0, 8708 <read_group_cb+0x50>
		if (data->group &&
    86f4:	6923      	ldr	r3, [r4, #16]
    86f6:	b11b      	cbz	r3, 8700 <read_group_cb+0x48>
    86f8:	885a      	ldrh	r2, [r3, #2]
    86fa:	42aa      	cmp	r2, r5
    86fc:	d200      	bcs.n	8700 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    86fe:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    8700:	2001      	movs	r0, #1
}
    8702:	b004      	add	sp, #16
    8704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8708:	6861      	ldr	r1, [r4, #4]
    870a:	6830      	ldr	r0, [r6, #0]
    870c:	f01c f802 	bl	24714 <bt_uuid_cmp>
    8710:	b110      	cbz	r0, 8718 <read_group_cb+0x60>
		data->group = NULL;
    8712:	2300      	movs	r3, #0
    8714:	6123      	str	r3, [r4, #16]
    8716:	e7f3      	b.n	8700 <read_group_cb+0x48>
	if (data->rsp->len &&
    8718:	68e3      	ldr	r3, [r4, #12]
    871a:	68a0      	ldr	r0, [r4, #8]
    871c:	781a      	ldrb	r2, [r3, #0]
    871e:	b13a      	cbz	r2, 8730 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8720:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    8724:	8981      	ldrh	r1, [r0, #12]
    8726:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    8728:	4293      	cmp	r3, r2
    872a:	da01      	bge.n	8730 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    872c:	2000      	movs	r0, #0
    872e:	e7e8      	b.n	8702 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    8730:	2104      	movs	r1, #4
    8732:	3008      	adds	r0, #8
    8734:	f01d fb88 	bl	25e48 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8738:	4b09      	ldr	r3, [pc, #36]	; (8760 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    873a:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    873c:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    873e:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8740:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8742:	4631      	mov	r1, r6
    8744:	9300      	str	r3, [sp, #0]
    8746:	9401      	str	r4, [sp, #4]
    8748:	2300      	movs	r3, #0
    874a:	4638      	mov	r0, r7
    874c:	f01c fc6d 	bl	2502a <att_chan_read>
	if (read < 0) {
    8750:	2800      	cmp	r0, #0
    8752:	dbeb      	blt.n	872c <read_group_cb+0x74>
	if (!data->group) {
    8754:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8756:	3800      	subs	r0, #0
    8758:	bf18      	it	ne
    875a:	2001      	movne	r0, #1
    875c:	e7d1      	b.n	8702 <read_group_cb+0x4a>
    875e:	bf00      	nop
    8760:	00024eb3 	.word	0x00024eb3

00008764 <read_type_cb>:
{
    8764:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8768:	f8d2 8000 	ldr.w	r8, [r2]
{
    876c:	4606      	mov	r6, r0
    876e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8770:	6800      	ldr	r0, [r0, #0]
    8772:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    8774:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8778:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    877a:	f01b ffcb 	bl	24714 <bt_uuid_cmp>
    877e:	4607      	mov	r7, r0
    8780:	2800      	cmp	r0, #0
    8782:	d13e      	bne.n	8802 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8784:	4628      	mov	r0, r5
    8786:	2215      	movs	r2, #21
    8788:	4631      	mov	r1, r6
    878a:	f01d f97d 	bl	25a88 <bt_gatt_check_perm>
    878e:	4605      	mov	r5, r0
    8790:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8792:	b148      	cbz	r0, 87a8 <read_type_cb+0x44>
		if (data->rsp->len) {
    8794:	68e3      	ldr	r3, [r4, #12]
    8796:	781b      	ldrb	r3, [r3, #0]
    8798:	b923      	cbnz	r3, 87a4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    879a:	2500      	movs	r5, #0
}
    879c:	4628      	mov	r0, r5
    879e:	b003      	add	sp, #12
    87a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    87a4:	7527      	strb	r7, [r4, #20]
    87a6:	e7f8      	b.n	879a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    87a8:	68a0      	ldr	r0, [r4, #8]
    87aa:	f01d fb2b 	bl	25e04 <net_buf_frag_last>
    87ae:	2102      	movs	r1, #2
    87b0:	3008      	adds	r0, #8
    87b2:	f01d fb49 	bl	25e48 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    87b6:	4b14      	ldr	r3, [pc, #80]	; (8808 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    87b8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    87ba:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    87bc:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    87c0:	4631      	mov	r1, r6
    87c2:	9300      	str	r3, [sp, #0]
    87c4:	9401      	str	r4, [sp, #4]
    87c6:	462b      	mov	r3, r5
    87c8:	4640      	mov	r0, r8
    87ca:	f01c fc2e 	bl	2502a <att_chan_read>
	if (read < 0) {
    87ce:	2800      	cmp	r0, #0
    87d0:	da07      	bge.n	87e2 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    87d2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    87d6:	bf26      	itte	cs
    87d8:	4240      	negcs	r0, r0
    87da:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    87dc:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    87de:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    87e0:	e7dc      	b.n	879c <read_type_cb+0x38>
	if (!data->item) {
    87e2:	6923      	ldr	r3, [r4, #16]
    87e4:	2b00      	cmp	r3, #0
    87e6:	d0d8      	beq.n	879a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    87e8:	68a0      	ldr	r0, [r4, #8]
    87ea:	f01c faf3 	bl	24dd4 <net_buf_frags_len>
    87ee:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    87f2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    87f4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    87f6:	7818      	ldrb	r0, [r3, #0]
    87f8:	4285      	cmp	r5, r0
    87fa:	bf94      	ite	ls
    87fc:	2500      	movls	r5, #0
    87fe:	2501      	movhi	r5, #1
    8800:	e7cc      	b.n	879c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    8802:	2501      	movs	r5, #1
    8804:	e7ca      	b.n	879c <read_type_cb+0x38>
    8806:	bf00      	nop
    8808:	00024df1 	.word	0x00024df1

0000880c <bt_att_connected>:
{
    880c:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    880e:	2104      	movs	r1, #4
{
    8810:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8812:	6800      	ldr	r0, [r0, #0]
    8814:	f01c fa98 	bl	24d48 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8818:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    881c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    881e:	b93b      	cbnz	r3, 8830 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    8820:	f105 000c 	add.w	r0, r5, #12
    8824:	f022 fb80 	bl	2af28 <z_impl_k_queue_init>
    8828:	f105 0024 	add.w	r0, r5, #36	; 0x24
    882c:	f022 fb7c 	bl	2af28 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    8830:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    8832:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    8836:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    8838:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    883c:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    883e:	b902      	cbnz	r2, 8842 <bt_att_connected+0x36>
	list->tail = node;
    8840:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8842:	f3bf 8f5b 	dmb	ish
    8846:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    884a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    884e:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8850:	bf5e      	ittt	pl
    8852:	2317      	movpl	r3, #23
    8854:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8858:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    885c:	2230      	movs	r2, #48	; 0x30
    885e:	2100      	movs	r1, #0
    8860:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    8864:	f022 ff9a 	bl	2b79c <memset>
    8868:	4b01      	ldr	r3, [pc, #4]	; (8870 <bt_att_connected+0x64>)
    886a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    886e:	bd38      	pop	{r3, r4, r5, pc}
    8870:	000094f9 	.word	0x000094f9

00008874 <prep_write_cb>:
{
    8874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8878:	4614      	mov	r4, r2
    887a:	4606      	mov	r6, r0
    887c:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    887e:	222a      	movs	r2, #42	; 0x2a
    8880:	4601      	mov	r1, r0
    8882:	6820      	ldr	r0, [r4, #0]
    8884:	f01d f900 	bl	25a88 <bt_gatt_check_perm>
    8888:	4605      	mov	r5, r0
    888a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    888c:	2800      	cmp	r0, #0
    888e:	d12e      	bne.n	88ee <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    8890:	7cb3      	ldrb	r3, [r6, #18]
    8892:	065b      	lsls	r3, r3, #25
    8894:	d516      	bpl.n	88c4 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    8896:	2301      	movs	r3, #1
    8898:	9301      	str	r3, [sp, #4]
    889a:	89e3      	ldrh	r3, [r4, #14]
    889c:	9300      	str	r3, [sp, #0]
    889e:	f8d6 8008 	ldr.w	r8, [r6, #8]
    88a2:	89a3      	ldrh	r3, [r4, #12]
    88a4:	68a2      	ldr	r2, [r4, #8]
    88a6:	6820      	ldr	r0, [r4, #0]
    88a8:	4631      	mov	r1, r6
    88aa:	47c0      	blx	r8
	if (write != 0) {
    88ac:	b150      	cbz	r0, 88c4 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    88ae:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    88b2:	bf26      	itte	cs
    88b4:	4243      	negcs	r3, r0
    88b6:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    88b8:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    88ba:	7423      	strb	r3, [r4, #16]
}
    88bc:	4628      	mov	r0, r5
    88be:	b002      	add	sp, #8
    88c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    88c4:	480b      	ldr	r0, [pc, #44]	; (88f4 <prep_write_cb+0x80>)
    88c6:	2200      	movs	r2, #0
    88c8:	2300      	movs	r3, #0
    88ca:	f01d fa61 	bl	25d90 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    88ce:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    88d0:	b908      	cbnz	r0, 88d6 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    88d2:	2309      	movs	r3, #9
    88d4:	e7f1      	b.n	88ba <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    88d6:	89e3      	ldrh	r3, [r4, #14]
    88d8:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    88da:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    88dc:	89a2      	ldrh	r2, [r4, #12]
    88de:	68a1      	ldr	r1, [r4, #8]
    88e0:	3008      	adds	r0, #8
    88e2:	f01d fab7 	bl	25e54 <net_buf_simple_add_mem>
	data->err = 0U;
    88e6:	2300      	movs	r3, #0
    88e8:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    88ea:	2501      	movs	r5, #1
    88ec:	e7e6      	b.n	88bc <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    88ee:	2500      	movs	r5, #0
    88f0:	e7e4      	b.n	88bc <prep_write_cb+0x48>
    88f2:	bf00      	nop
    88f4:	20000d30 	.word	0x20000d30

000088f8 <bt_att_chan_create_pdu>:
{
    88f8:	b538      	push	{r3, r4, r5, lr}
    88fa:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    88fc:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    8900:	3201      	adds	r2, #1
    8902:	428a      	cmp	r2, r1
    8904:	d90c      	bls.n	8920 <bt_att_chan_create_pdu+0x28>
    8906:	481a      	ldr	r0, [pc, #104]	; (8970 <bt_att_chan_create_pdu+0x78>)
    8908:	4b1a      	ldr	r3, [pc, #104]	; (8974 <bt_att_chan_create_pdu+0x7c>)
    890a:	1a1b      	subs	r3, r3, r0
    890c:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    890e:	019b      	lsls	r3, r3, #6
    8910:	4819      	ldr	r0, [pc, #100]	; (8978 <bt_att_chan_create_pdu+0x80>)
    8912:	f043 0302 	orr.w	r3, r3, #2
    8916:	f01a fe80 	bl	2361a <log_2>
		return NULL;
    891a:	2400      	movs	r4, #0
}
    891c:	4620      	mov	r0, r4
    891e:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    8920:	4628      	mov	r0, r5
    8922:	f01c fa75 	bl	24e10 <att_op_get_type>
    8926:	2802      	cmp	r0, #2
    8928:	d001      	beq.n	892e <bt_att_chan_create_pdu+0x36>
    892a:	2804      	cmp	r0, #4
    892c:	d114      	bne.n	8958 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    892e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    8932:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    8934:	2100      	movs	r1, #0
    8936:	4608      	mov	r0, r1
    8938:	f01c f9ea 	bl	24d10 <bt_l2cap_create_pdu_timeout>
    893c:	4604      	mov	r4, r0
	if (!buf) {
    893e:	b980      	cbnz	r0, 8962 <bt_att_chan_create_pdu+0x6a>
    8940:	4b0b      	ldr	r3, [pc, #44]	; (8970 <bt_att_chan_create_pdu+0x78>)
    8942:	4a0c      	ldr	r2, [pc, #48]	; (8974 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    8944:	480d      	ldr	r0, [pc, #52]	; (897c <bt_att_chan_create_pdu+0x84>)
    8946:	1ad2      	subs	r2, r2, r3
    8948:	08d2      	lsrs	r2, r2, #3
    894a:	0192      	lsls	r2, r2, #6
    894c:	f042 0201 	orr.w	r2, r2, #1
    8950:	4629      	mov	r1, r5
    8952:	f01a fe4e 	bl	235f2 <log_1>
		return NULL;
    8956:	e7e1      	b.n	891c <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    8958:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    895c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8960:	e7e8      	b.n	8934 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    8962:	2101      	movs	r1, #1
    8964:	3008      	adds	r0, #8
    8966:	f01d fa6f 	bl	25e48 <net_buf_simple_add>
	hdr->code = op;
    896a:	7005      	strb	r5, [r0, #0]
	return buf;
    896c:	e7d6      	b.n	891c <bt_att_chan_create_pdu+0x24>
    896e:	bf00      	nop
    8970:	0002bf50 	.word	0x0002bf50
    8974:	0002bf58 	.word	0x0002bf58
    8978:	0002f499 	.word	0x0002f499
    897c:	0002f286 	.word	0x0002f286

00008980 <att_indicate>:
{
    8980:	b570      	push	{r4, r5, r6, lr}
    8982:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    8984:	f101 0008 	add.w	r0, r1, #8
    8988:	460d      	mov	r5, r1
    898a:	f01d fa97 	bl	25ebc <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    898e:	6826      	ldr	r6, [r4, #0]
    8990:	89ab      	ldrh	r3, [r5, #12]
    8992:	68aa      	ldr	r2, [r5, #8]
    8994:	4601      	mov	r1, r0
    8996:	6830      	ldr	r0, [r6, #0]
    8998:	f01d f97a 	bl	25c90 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    899c:	211e      	movs	r1, #30
    899e:	2200      	movs	r2, #0
    89a0:	4620      	mov	r0, r4
    89a2:	f7ff ffa9 	bl	88f8 <bt_att_chan_create_pdu>
	if (!buf) {
    89a6:	4601      	mov	r1, r0
    89a8:	b118      	cbz	r0, 89b2 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    89aa:	4a03      	ldr	r2, [pc, #12]	; (89b8 <att_indicate+0x38>)
    89ac:	4620      	mov	r0, r4
    89ae:	f01c faa7 	bl	24f00 <bt_att_chan_send_rsp>
}
    89b2:	2000      	movs	r0, #0
    89b4:	bd70      	pop	{r4, r5, r6, pc}
    89b6:	bf00      	nop
    89b8:	0002500f 	.word	0x0002500f

000089bc <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    89bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89c0:	4688      	mov	r8, r1
    89c2:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    89c4:	2101      	movs	r1, #1
    89c6:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    89c8:	4605      	mov	r5, r0
    89ca:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    89cc:	f7ff ff94 	bl	88f8 <bt_att_chan_create_pdu>
	if (!buf) {
    89d0:	4604      	mov	r4, r0
    89d2:	b178      	cbz	r0, 89f4 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    89d4:	2104      	movs	r1, #4
    89d6:	3008      	adds	r0, #8
    89d8:	f01d fa36 	bl	25e48 <net_buf_simple_add>
	rsp->request = req;
    89dc:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    89e0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    89e2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    89e6:	4621      	mov	r1, r4
    89e8:	4628      	mov	r0, r5
    89ea:	4a03      	ldr	r2, [pc, #12]	; (89f8 <send_err_rsp.part.0+0x3c>)
}
    89ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    89f0:	f01c ba86 	b.w	24f00 <bt_att_chan_send_rsp>
}
    89f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    89f8:	00024ff3 	.word	0x00024ff3

000089fc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    89fc:	898b      	ldrh	r3, [r1, #12]
{
    89fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a02:	4604      	mov	r4, r0
    8a04:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    8a06:	b963      	cbnz	r3, 8a22 <bt_att_recv+0x26>
    8a08:	494c      	ldr	r1, [pc, #304]	; (8b3c <bt_att_recv+0x140>)
    8a0a:	4b4d      	ldr	r3, [pc, #308]	; (8b40 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    8a0c:	484d      	ldr	r0, [pc, #308]	; (8b44 <bt_att_recv+0x148>)
    8a0e:	1ac9      	subs	r1, r1, r3
    8a10:	08c9      	lsrs	r1, r1, #3
    8a12:	0189      	lsls	r1, r1, #6
    8a14:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    8a18:	f01a fdde 	bl	235d8 <log_0>
}
    8a1c:	2000      	movs	r0, #0
    8a1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    8a22:	2101      	movs	r1, #1
    8a24:	f108 0008 	add.w	r0, r8, #8
    8a28:	f01d fa40 	bl	25eac <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8a2c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    8a30:	4605      	mov	r5, r0
    8a32:	2b00      	cmp	r3, #0
    8a34:	d0f2      	beq.n	8a1c <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    8a36:	4a44      	ldr	r2, [pc, #272]	; (8b48 <bt_att_recv+0x14c>)
    8a38:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8a3a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8a3e:	2300      	movs	r3, #0
    8a40:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    8a42:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8a46:	4288      	cmp	r0, r1
    8a48:	d11d      	bne.n	8a86 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    8a4a:	00d8      	lsls	r0, r3, #3
    8a4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8a50:	789f      	ldrb	r7, [r3, #2]
    8a52:	2f01      	cmp	r7, #1
    8a54:	d132      	bne.n	8abc <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8a56:	f3bf 8f5b 	dmb	ish
    8a5a:	34b8      	adds	r4, #184	; 0xb8
    8a5c:	e854 3f00 	ldrex	r3, [r4]
    8a60:	f043 0201 	orr.w	r2, r3, #1
    8a64:	e844 2100 	strex	r1, r2, [r4]
    8a68:	2900      	cmp	r1, #0
    8a6a:	d1f7      	bne.n	8a5c <bt_att_recv+0x60>
    8a6c:	f3bf 8f5b 	dmb	ish
    8a70:	07da      	lsls	r2, r3, #31
    8a72:	d53d      	bpl.n	8af0 <bt_att_recv+0xf4>
    8a74:	4931      	ldr	r1, [pc, #196]	; (8b3c <bt_att_recv+0x140>)
    8a76:	4b32      	ldr	r3, [pc, #200]	; (8b40 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    8a78:	4834      	ldr	r0, [pc, #208]	; (8b4c <bt_att_recv+0x150>)
    8a7a:	1ac9      	subs	r1, r1, r3
    8a7c:	08c9      	lsrs	r1, r1, #3
    8a7e:	0189      	lsls	r1, r1, #6
    8a80:	f041 0102 	orr.w	r1, r1, #2
    8a84:	e7c8      	b.n	8a18 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8a86:	3301      	adds	r3, #1
    8a88:	2b1c      	cmp	r3, #28
    8a8a:	d1da      	bne.n	8a42 <bt_att_recv+0x46>
    8a8c:	4b2c      	ldr	r3, [pc, #176]	; (8b40 <bt_att_recv+0x144>)
    8a8e:	4a2b      	ldr	r2, [pc, #172]	; (8b3c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    8a90:	482f      	ldr	r0, [pc, #188]	; (8b50 <bt_att_recv+0x154>)
    8a92:	1ad2      	subs	r2, r2, r3
    8a94:	08d2      	lsrs	r2, r2, #3
    8a96:	0192      	lsls	r2, r2, #6
    8a98:	f042 0202 	orr.w	r2, r2, #2
    8a9c:	f01a fda9 	bl	235f2 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8aa0:	7829      	ldrb	r1, [r5, #0]
    8aa2:	4608      	mov	r0, r1
    8aa4:	f01c f9b4 	bl	24e10 <att_op_get_type>
    8aa8:	2800      	cmp	r0, #0
    8aaa:	d0b7      	beq.n	8a1c <bt_att_recv+0x20>
	if (!req) {
    8aac:	2900      	cmp	r1, #0
    8aae:	d0b5      	beq.n	8a1c <bt_att_recv+0x20>
    8ab0:	2306      	movs	r3, #6
    8ab2:	2200      	movs	r2, #0
    8ab4:	4630      	mov	r0, r6
    8ab6:	f7ff ff81 	bl	89bc <send_err_rsp.part.0>
    8aba:	e7af      	b.n	8a1c <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    8abc:	2f05      	cmp	r7, #5
    8abe:	d117      	bne.n	8af0 <bt_att_recv+0xf4>
    8ac0:	f3bf 8f5b 	dmb	ish
    8ac4:	34b8      	adds	r4, #184	; 0xb8
    8ac6:	e854 3f00 	ldrex	r3, [r4]
    8aca:	f043 0202 	orr.w	r2, r3, #2
    8ace:	e844 2100 	strex	r1, r2, [r4]
    8ad2:	2900      	cmp	r1, #0
    8ad4:	d1f7      	bne.n	8ac6 <bt_att_recv+0xca>
    8ad6:	f3bf 8f5b 	dmb	ish
    8ada:	079b      	lsls	r3, r3, #30
    8adc:	d508      	bpl.n	8af0 <bt_att_recv+0xf4>
    8ade:	4917      	ldr	r1, [pc, #92]	; (8b3c <bt_att_recv+0x140>)
    8ae0:	4b17      	ldr	r3, [pc, #92]	; (8b40 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    8ae2:	481c      	ldr	r0, [pc, #112]	; (8b54 <bt_att_recv+0x158>)
    8ae4:	1ac9      	subs	r1, r1, r3
    8ae6:	08c9      	lsrs	r1, r1, #3
    8ae8:	0189      	lsls	r1, r1, #6
    8aea:	f041 0102 	orr.w	r1, r1, #2
    8aee:	e793      	b.n	8a18 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    8af0:	eb0c 0300 	add.w	r3, ip, r0
    8af4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    8af8:	785a      	ldrb	r2, [r3, #1]
    8afa:	428a      	cmp	r2, r1
    8afc:	d90e      	bls.n	8b1c <bt_att_recv+0x120>
    8afe:	4a10      	ldr	r2, [pc, #64]	; (8b40 <bt_att_recv+0x144>)
    8b00:	4b0e      	ldr	r3, [pc, #56]	; (8b3c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    8b02:	4815      	ldr	r0, [pc, #84]	; (8b58 <bt_att_recv+0x15c>)
    8b04:	1a9b      	subs	r3, r3, r2
    8b06:	08db      	lsrs	r3, r3, #3
    8b08:	019b      	lsls	r3, r3, #6
    8b0a:	782a      	ldrb	r2, [r5, #0]
    8b0c:	f043 0301 	orr.w	r3, r3, #1
    8b10:	f01a fd83 	bl	2361a <log_2>
	if (handler->type == ATT_REQUEST && err) {
    8b14:	2f01      	cmp	r7, #1
    8b16:	d181      	bne.n	8a1c <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    8b18:	2304      	movs	r3, #4
    8b1a:	e00a      	b.n	8b32 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    8b1c:	685b      	ldr	r3, [r3, #4]
    8b1e:	4641      	mov	r1, r8
    8b20:	4630      	mov	r0, r6
    8b22:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8b24:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    8b26:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8b28:	f47f af78 	bne.w	8a1c <bt_att_recv+0x20>
    8b2c:	2800      	cmp	r0, #0
    8b2e:	f43f af75 	beq.w	8a1c <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    8b32:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8b34:	2900      	cmp	r1, #0
    8b36:	f43f af71 	beq.w	8a1c <bt_att_recv+0x20>
    8b3a:	e7ba      	b.n	8ab2 <bt_att_recv+0xb6>
    8b3c:	0002bf58 	.word	0x0002bf58
    8b40:	0002bf50 	.word	0x0002bf50
    8b44:	0002f4be 	.word	0x0002f4be
    8b48:	0002c364 	.word	0x0002c364
    8b4c:	0002f4d9 	.word	0x0002f4d9
    8b50:	0002f533 	.word	0x0002f533
    8b54:	0002f4f5 	.word	0x0002f4f5
    8b58:	0002f514 	.word	0x0002f514

00008b5c <att_write_rsp>:
{
    8b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b60:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8b62:	6803      	ldr	r3, [r0, #0]
    8b64:	460e      	mov	r6, r1
    8b66:	3900      	subs	r1, #0
{
    8b68:	b086      	sub	sp, #24
    8b6a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8b6c:	bf18      	it	ne
    8b6e:	2101      	movne	r1, #1
    8b70:	6818      	ldr	r0, [r3, #0]
{
    8b72:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8b74:	f01d f8b7 	bl	25ce6 <bt_gatt_change_aware>
    8b78:	2800      	cmp	r0, #0
    8b7a:	d04e      	beq.n	8c1a <att_write_rsp+0xbe>
	if (!handle) {
    8b7c:	2f00      	cmp	r7, #0
    8b7e:	d04e      	beq.n	8c1e <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    8b80:	2218      	movs	r2, #24
    8b82:	2100      	movs	r1, #0
    8b84:	4668      	mov	r0, sp
    8b86:	f022 fe09 	bl	2b79c <memset>
	if (rsp) {
    8b8a:	f1b8 0f00 	cmp.w	r8, #0
    8b8e:	d126      	bne.n	8bde <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    8b90:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8b92:	4a24      	ldr	r2, [pc, #144]	; (8c24 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    8b94:	681b      	ldr	r3, [r3, #0]
    8b96:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    8b98:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8b9c:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8ba2:	9303      	str	r3, [sp, #12]
	data.len = len;
    8ba4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    8ba8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8bac:	2301      	movs	r3, #1
    8bae:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8bb2:	4639      	mov	r1, r7
    8bb4:	466b      	mov	r3, sp
    8bb6:	4638      	mov	r0, r7
	data.req = req;
    8bb8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8bbc:	f01c f96e 	bl	24e9c <bt_gatt_foreach_attr>
	if (data.err) {
    8bc0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8bc4:	b30c      	cbz	r4, 8c0a <att_write_rsp+0xae>
		if (rsp) {
    8bc6:	f1b8 0f00 	cmp.w	r8, #0
    8bca:	d019      	beq.n	8c00 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    8bcc:	9801      	ldr	r0, [sp, #4]
    8bce:	f00f fbfd 	bl	183cc <net_buf_unref>
	if (!req) {
    8bd2:	b976      	cbnz	r6, 8bf2 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8bd4:	2400      	movs	r4, #0
}
    8bd6:	4620      	mov	r0, r4
    8bd8:	b006      	add	sp, #24
    8bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    8bde:	2200      	movs	r2, #0
    8be0:	4641      	mov	r1, r8
    8be2:	4628      	mov	r0, r5
    8be4:	f7ff fe88 	bl	88f8 <bt_att_chan_create_pdu>
    8be8:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8bea:	2800      	cmp	r0, #0
    8bec:	d1d0      	bne.n	8b90 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    8bee:	240e      	movs	r4, #14
    8bf0:	e7f1      	b.n	8bd6 <att_write_rsp+0x7a>
    8bf2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8bf6:	463a      	mov	r2, r7
    8bf8:	4631      	mov	r1, r6
    8bfa:	4628      	mov	r0, r5
    8bfc:	f7ff fede 	bl	89bc <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8c00:	2e18      	cmp	r6, #24
    8c02:	d1e7      	bne.n	8bd4 <att_write_rsp+0x78>
    8c04:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8c08:	e7e5      	b.n	8bd6 <att_write_rsp+0x7a>
	if (data.buf) {
    8c0a:	9901      	ldr	r1, [sp, #4]
    8c0c:	2900      	cmp	r1, #0
    8c0e:	d0e1      	beq.n	8bd4 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8c10:	4a05      	ldr	r2, [pc, #20]	; (8c28 <att_write_rsp+0xcc>)
    8c12:	4628      	mov	r0, r5
    8c14:	f01c f974 	bl	24f00 <bt_att_chan_send_rsp>
    8c18:	e7dd      	b.n	8bd6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8c1a:	2412      	movs	r4, #18
    8c1c:	e7db      	b.n	8bd6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    8c1e:	2401      	movs	r4, #1
    8c20:	e7d9      	b.n	8bd6 <att_write_rsp+0x7a>
    8c22:	bf00      	nop
    8c24:	00025209 	.word	0x00025209
    8c28:	00024ff3 	.word	0x00024ff3

00008c2c <bt_att_create_pdu>:
{
    8c2c:	b570      	push	{r4, r5, r6, lr}
    8c2e:	460e      	mov	r6, r1
    8c30:	4615      	mov	r5, r2
	att = att_get(conn);
    8c32:	f7ff fc87 	bl	8544 <att_get>
	if (!att) {
    8c36:	b1c0      	cbz	r0, 8c6a <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8c38:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    8c3a:	1c69      	adds	r1, r5, #1
    8c3c:	b15b      	cbz	r3, 8c56 <bt_att_create_pdu+0x2a>
    8c3e:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    8c42:	d008      	beq.n	8c56 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8c44:	681b      	ldr	r3, [r3, #0]
    8c46:	b10b      	cbz	r3, 8c4c <bt_att_create_pdu+0x20>
    8c48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    8c4c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    8c50:	4291      	cmp	r1, r2
    8c52:	d90c      	bls.n	8c6e <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8c54:	b98b      	cbnz	r3, 8c7a <bt_att_create_pdu+0x4e>
    8c56:	4a0e      	ldr	r2, [pc, #56]	; (8c90 <bt_att_create_pdu+0x64>)
    8c58:	4b0e      	ldr	r3, [pc, #56]	; (8c94 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    8c5a:	480f      	ldr	r0, [pc, #60]	; (8c98 <bt_att_create_pdu+0x6c>)
    8c5c:	1ad2      	subs	r2, r2, r3
    8c5e:	08d2      	lsrs	r2, r2, #3
    8c60:	0192      	lsls	r2, r2, #6
    8c62:	f042 0202 	orr.w	r2, r2, #2
    8c66:	f01a fcc4 	bl	235f2 <log_1>
}
    8c6a:	2000      	movs	r0, #0
    8c6c:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    8c6e:	462a      	mov	r2, r5
    8c70:	4631      	mov	r1, r6
}
    8c72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    8c76:	f7ff be3f 	b.w	88f8 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    8c7a:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    8c7e:	d004      	beq.n	8c8a <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8c80:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8c84:	b10c      	cbz	r4, 8c8a <bt_att_create_pdu+0x5e>
    8c86:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    8c8a:	4618      	mov	r0, r3
    8c8c:	4623      	mov	r3, r4
    8c8e:	e7dd      	b.n	8c4c <bt_att_create_pdu+0x20>
    8c90:	0002bf58 	.word	0x0002bf58
    8c94:	0002bf50 	.word	0x0002bf50
    8c98:	0002f54d 	.word	0x0002f54d

00008c9c <att_exec_write_req>:
{
    8c9c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    8ca0:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    8ca2:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    8ca4:	f893 8000 	ldrb.w	r8, [r3]
{
    8ca8:	4606      	mov	r6, r0
	uint8_t err = 0U;
    8caa:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    8cac:	6830      	ldr	r0, [r6, #0]
    8cae:	2200      	movs	r2, #0
    8cb0:	2300      	movs	r3, #0
    8cb2:	3024      	adds	r0, #36	; 0x24
    8cb4:	f01d f871 	bl	25d9a <net_buf_get>
    8cb8:	4605      	mov	r5, r0
    8cba:	b978      	cbnz	r0, 8cdc <att_exec_write_req+0x40>
	if (err) {
    8cbc:	bb54      	cbnz	r4, 8d14 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    8cbe:	2119      	movs	r1, #25
    8cc0:	4622      	mov	r2, r4
    8cc2:	4638      	mov	r0, r7
    8cc4:	f7ff ffb2 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    8cc8:	4601      	mov	r1, r0
    8cca:	b328      	cbz	r0, 8d18 <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8ccc:	4a13      	ldr	r2, [pc, #76]	; (8d1c <att_exec_write_req+0x80>)
    8cce:	4630      	mov	r0, r6
    8cd0:	f01c f916 	bl	24f00 <bt_att_chan_send_rsp>
}
    8cd4:	4620      	mov	r0, r4
    8cd6:	b004      	add	sp, #16
    8cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    8cdc:	b9b4      	cbnz	r4, 8d0c <att_exec_write_req+0x70>
    8cde:	f1b8 0f01 	cmp.w	r8, #1
    8ce2:	d113      	bne.n	8d0c <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    8ce4:	89aa      	ldrh	r2, [r5, #12]
    8ce6:	8aab      	ldrh	r3, [r5, #20]
    8ce8:	9202      	str	r2, [sp, #8]
    8cea:	68aa      	ldr	r2, [r5, #8]
    8cec:	9201      	str	r2, [sp, #4]
    8cee:	8aea      	ldrh	r2, [r5, #22]
    8cf0:	9200      	str	r2, [sp, #0]
    8cf2:	2118      	movs	r1, #24
    8cf4:	4622      	mov	r2, r4
    8cf6:	4630      	mov	r0, r6
    8cf8:	f7ff ff30 	bl	8b5c <att_write_rsp>
			if (err) {
    8cfc:	4604      	mov	r4, r0
    8cfe:	b128      	cbz	r0, 8d0c <att_exec_write_req+0x70>
	if (!req) {
    8d00:	4603      	mov	r3, r0
    8d02:	8aaa      	ldrh	r2, [r5, #20]
    8d04:	2118      	movs	r1, #24
    8d06:	4630      	mov	r0, r6
    8d08:	f7ff fe58 	bl	89bc <send_err_rsp.part.0>
		net_buf_unref(buf);
    8d0c:	4628      	mov	r0, r5
    8d0e:	f00f fb5d 	bl	183cc <net_buf_unref>
    8d12:	e7cb      	b.n	8cac <att_exec_write_req+0x10>
		return 0;
    8d14:	4604      	mov	r4, r0
    8d16:	e7dd      	b.n	8cd4 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    8d18:	240e      	movs	r4, #14
    8d1a:	e7db      	b.n	8cd4 <att_exec_write_req+0x38>
    8d1c:	00024ff3 	.word	0x00024ff3

00008d20 <att_prepare_write_req>:
{
    8d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d24:	460c      	mov	r4, r1
    8d26:	b087      	sub	sp, #28
    8d28:	4605      	mov	r5, r0
    8d2a:	2104      	movs	r1, #4
    8d2c:	f104 0008 	add.w	r0, r4, #8
    8d30:	f01d f8bc 	bl	25eac <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    8d34:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    8d38:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    8d3c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    8d40:	f8d4 8008 	ldr.w	r8, [r4, #8]
    8d44:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    8d46:	2101      	movs	r1, #1
    8d48:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    8d4a:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    8d4e:	f01c ffca 	bl	25ce6 <bt_gatt_change_aware>
    8d52:	2800      	cmp	r0, #0
    8d54:	d04b      	beq.n	8dee <att_prepare_write_req+0xce>
	if (!handle) {
    8d56:	2e00      	cmp	r6, #0
    8d58:	d04b      	beq.n	8df2 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    8d5a:	2210      	movs	r2, #16
    8d5c:	2100      	movs	r1, #0
    8d5e:	a802      	add	r0, sp, #8
    8d60:	f022 fd1c 	bl	2b79c <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8d64:	2301      	movs	r3, #1
    8d66:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8d6a:	4a24      	ldr	r2, [pc, #144]	; (8dfc <att_prepare_write_req+0xdc>)
	data.conn = conn;
    8d6c:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    8d70:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8d72:	ab01      	add	r3, sp, #4
    8d74:	4631      	mov	r1, r6
    8d76:	4630      	mov	r0, r6
	data.offset = offset;
    8d78:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    8d7c:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    8d80:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8d84:	f01c f88a 	bl	24e9c <bt_gatt_foreach_attr>
	if (data.err) {
    8d88:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8d8c:	b154      	cbz	r4, 8da4 <att_prepare_write_req+0x84>
	if (!req) {
    8d8e:	4623      	mov	r3, r4
    8d90:	4632      	mov	r2, r6
    8d92:	2116      	movs	r1, #22
    8d94:	4628      	mov	r0, r5
    8d96:	f7ff fe11 	bl	89bc <send_err_rsp.part.0>
		return 0;
    8d9a:	2400      	movs	r4, #0
}
    8d9c:	4620      	mov	r0, r4
    8d9e:	b007      	add	sp, #28
    8da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    8da4:	6828      	ldr	r0, [r5, #0]
    8da6:	9902      	ldr	r1, [sp, #8]
    8da8:	3024      	adds	r0, #36	; 0x24
    8daa:	f01d f81a 	bl	25de2 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    8dae:	4622      	mov	r2, r4
    8db0:	2117      	movs	r1, #23
    8db2:	4658      	mov	r0, fp
    8db4:	f7ff ff3a 	bl	8c2c <bt_att_create_pdu>
    8db8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8dba:	b1e0      	cbz	r0, 8df6 <att_prepare_write_req+0xd6>
	return net_buf_simple_add(&buf->b, len);
    8dbc:	2104      	movs	r1, #4
    8dbe:	3008      	adds	r0, #8
    8dc0:	f01d f842 	bl	25e48 <net_buf_simple_add>
    8dc4:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    8dc6:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    8dca:	f8a0 9002 	strh.w	r9, [r0, #2]
    8dce:	9802      	ldr	r0, [sp, #8]
    8dd0:	4639      	mov	r1, r7
    8dd2:	3008      	adds	r0, #8
    8dd4:	f01d f838 	bl	25e48 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8dd8:	463a      	mov	r2, r7
    8dda:	4641      	mov	r1, r8
    8ddc:	1d30      	adds	r0, r6, #4
    8dde:	f022 fcbc 	bl	2b75a <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8de2:	4a07      	ldr	r2, [pc, #28]	; (8e00 <att_prepare_write_req+0xe0>)
    8de4:	9902      	ldr	r1, [sp, #8]
    8de6:	4628      	mov	r0, r5
    8de8:	f01c f88a 	bl	24f00 <bt_att_chan_send_rsp>
	return 0;
    8dec:	e7d6      	b.n	8d9c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8dee:	2412      	movs	r4, #18
    8df0:	e7d4      	b.n	8d9c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8df2:	2401      	movs	r4, #1
    8df4:	e7d2      	b.n	8d9c <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    8df6:	240e      	movs	r4, #14
    8df8:	e7d0      	b.n	8d9c <att_prepare_write_req+0x7c>
    8dfa:	bf00      	nop
    8dfc:	00008875 	.word	0x00008875
    8e00:	00024ff3 	.word	0x00024ff3

00008e04 <att_read_group_req>:
{
    8e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8e08:	7b0c      	ldrb	r4, [r1, #12]
    8e0a:	3c04      	subs	r4, #4
    8e0c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8e0e:	2c02      	cmp	r4, #2
{
    8e10:	4605      	mov	r5, r0
    8e12:	b08c      	sub	sp, #48	; 0x30
    8e14:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8e16:	d001      	beq.n	8e1c <att_read_group_req+0x18>
    8e18:	2c10      	cmp	r4, #16
    8e1a:	d16f      	bne.n	8efc <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
    8e1c:	2104      	movs	r1, #4
    8e1e:	3008      	adds	r0, #8
    8e20:	f01d f844 	bl	25eac <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8e24:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    8e28:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8e2a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8e2c:	1d01      	adds	r1, r0, #4
    8e2e:	4622      	mov	r2, r4
    8e30:	4640      	mov	r0, r8
    8e32:	f01b fc99 	bl	24768 <bt_uuid_create>
    8e36:	2800      	cmp	r0, #0
    8e38:	d062      	beq.n	8f00 <att_read_group_req+0xfc>
	if (!start || !end) {
    8e3a:	2e00      	cmp	r6, #0
    8e3c:	d03a      	beq.n	8eb4 <att_read_group_req+0xb0>
    8e3e:	2400      	movs	r4, #0
    8e40:	2f00      	cmp	r7, #0
    8e42:	d036      	beq.n	8eb2 <att_read_group_req+0xae>
	if (start > end) {
    8e44:	42be      	cmp	r6, r7
    8e46:	d835      	bhi.n	8eb4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8e48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8e4c:	a901      	add	r1, sp, #4
    8e4e:	4640      	mov	r0, r8
    8e50:	f88d 4004 	strb.w	r4, [sp, #4]
    8e54:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e58:	f01b fc5c 	bl	24714 <bt_uuid_cmp>
    8e5c:	2800      	cmp	r0, #0
    8e5e:	d134      	bne.n	8eca <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    8e60:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8e62:	2214      	movs	r2, #20
    8e64:	2100      	movs	r1, #0
    8e66:	a807      	add	r0, sp, #28
    8e68:	f022 fc98 	bl	2b79c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8e6c:	2201      	movs	r2, #1
    8e6e:	2111      	movs	r1, #17
    8e70:	4620      	mov	r0, r4
    8e72:	f7ff fedb 	bl	8c2c <bt_att_create_pdu>
    8e76:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    8e78:	2800      	cmp	r0, #0
    8e7a:	d041      	beq.n	8f00 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    8e7c:	2101      	movs	r1, #1
    8e7e:	3008      	adds	r0, #8
	data.uuid = uuid;
    8e80:	e9cd 5807 	strd	r5, r8, [sp, #28]
    8e84:	f01c ffe0 	bl	25e48 <net_buf_simple_add>
	data.rsp->len = 0U;
    8e88:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8e8c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8e8e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    8e90:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8e94:	4a1b      	ldr	r2, [pc, #108]	; (8f04 <att_read_group_req+0x100>)
	data.group = NULL;
    8e96:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8e9a:	4639      	mov	r1, r7
    8e9c:	4630      	mov	r0, r6
    8e9e:	f01b fffd 	bl	24e9c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8ea2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8ea4:	781c      	ldrb	r4, [r3, #0]
    8ea6:	bb1c      	cbnz	r4, 8ef0 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    8ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8eaa:	f00f fa8f 	bl	183cc <net_buf_unref>
	if (!req) {
    8eae:	230a      	movs	r3, #10
    8eb0:	e018      	b.n	8ee4 <att_read_group_req+0xe0>
			*err = 0U;
    8eb2:	463e      	mov	r6, r7
	if (!req) {
    8eb4:	2301      	movs	r3, #1
    8eb6:	4632      	mov	r2, r6
    8eb8:	2110      	movs	r1, #16
    8eba:	4628      	mov	r0, r5
    8ebc:	f7ff fd7e 	bl	89bc <send_err_rsp.part.0>
		return 0;
    8ec0:	2400      	movs	r4, #0
}
    8ec2:	4620      	mov	r0, r4
    8ec4:	b00c      	add	sp, #48	; 0x30
    8ec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8eca:	f642 0301 	movw	r3, #10241	; 0x2801
    8ece:	a907      	add	r1, sp, #28
    8ed0:	4640      	mov	r0, r8
    8ed2:	f88d 401c 	strb.w	r4, [sp, #28]
    8ed6:	f8ad 301e 	strh.w	r3, [sp, #30]
    8eda:	f01b fc1b 	bl	24714 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8ede:	2800      	cmp	r0, #0
    8ee0:	d0be      	beq.n	8e60 <att_read_group_req+0x5c>
	if (!req) {
    8ee2:	2310      	movs	r3, #16
    8ee4:	4632      	mov	r2, r6
    8ee6:	2110      	movs	r1, #16
    8ee8:	4628      	mov	r0, r5
    8eea:	f7ff fd67 	bl	89bc <send_err_rsp.part.0>
		return 0;
    8eee:	e7e8      	b.n	8ec2 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8ef0:	4a05      	ldr	r2, [pc, #20]	; (8f08 <att_read_group_req+0x104>)
    8ef2:	9909      	ldr	r1, [sp, #36]	; 0x24
    8ef4:	4628      	mov	r0, r5
    8ef6:	f01c f803 	bl	24f00 <bt_att_chan_send_rsp>
	return 0;
    8efa:	e7e1      	b.n	8ec0 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    8efc:	2404      	movs	r4, #4
    8efe:	e7e0      	b.n	8ec2 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    8f00:	240e      	movs	r4, #14
    8f02:	e7de      	b.n	8ec2 <att_read_group_req+0xbe>
    8f04:	000086b9 	.word	0x000086b9
    8f08:	00024ff3 	.word	0x00024ff3

00008f0c <att_read_mult_req>:
{
    8f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8f10:	6886      	ldr	r6, [r0, #8]
{
    8f12:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    8f14:	2210      	movs	r2, #16
{
    8f16:	4604      	mov	r4, r0
    8f18:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    8f1a:	4668      	mov	r0, sp
    8f1c:	2100      	movs	r1, #0
    8f1e:	f022 fc3d 	bl	2b79c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8f22:	2200      	movs	r2, #0
    8f24:	210f      	movs	r1, #15
    8f26:	4630      	mov	r0, r6
    8f28:	f7ff fe80 	bl	8c2c <bt_att_create_pdu>
    8f2c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8f2e:	b360      	cbz	r0, 8f8a <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f30:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8f94 <att_read_mult_req+0x88>
	data.chan = chan;
    8f34:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    8f36:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f3a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    8f3e:	89ab      	ldrh	r3, [r5, #12]
    8f40:	2b01      	cmp	r3, #1
    8f42:	d805      	bhi.n	8f50 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f44:	4a12      	ldr	r2, [pc, #72]	; (8f90 <att_read_mult_req+0x84>)
    8f46:	9902      	ldr	r1, [sp, #8]
    8f48:	4620      	mov	r0, r4
    8f4a:	f01b ffd9 	bl	24f00 <bt_att_chan_send_rsp>
    8f4e:	e018      	b.n	8f82 <att_read_mult_req+0x76>
    8f50:	4638      	mov	r0, r7
    8f52:	f01c ffb3 	bl	25ebc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f56:	466b      	mov	r3, sp
    8f58:	464a      	mov	r2, r9
    8f5a:	4601      	mov	r1, r0
    8f5c:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f5e:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8f62:	f01b ff9b 	bl	24e9c <bt_gatt_foreach_attr>
		if (data.err) {
    8f66:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d0e7      	beq.n	8f3e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    8f6e:	9802      	ldr	r0, [sp, #8]
    8f70:	f00f fa2c 	bl	183cc <net_buf_unref>
	if (!req) {
    8f74:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8f78:	4632      	mov	r2, r6
    8f7a:	210e      	movs	r1, #14
    8f7c:	4620      	mov	r0, r4
    8f7e:	f7ff fd1d 	bl	89bc <send_err_rsp.part.0>
	return 0;
    8f82:	2000      	movs	r0, #0
}
    8f84:	b005      	add	sp, #20
    8f86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    8f8a:	200e      	movs	r0, #14
    8f8c:	e7fa      	b.n	8f84 <att_read_mult_req+0x78>
    8f8e:	bf00      	nop
    8f90:	00024ff3 	.word	0x00024ff3
    8f94:	000252e9 	.word	0x000252e9

00008f98 <att_read_rsp>:
{
    8f98:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8f9c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    8fa0:	4605      	mov	r5, r0
    8fa2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    8fa4:	4640      	mov	r0, r8
    8fa6:	2101      	movs	r1, #1
{
    8fa8:	4614      	mov	r4, r2
    8faa:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    8fac:	f01c fe9b 	bl	25ce6 <bt_gatt_change_aware>
    8fb0:	b390      	cbz	r0, 9018 <att_read_rsp+0x80>
	if (!handle) {
    8fb2:	b39e      	cbz	r6, 901c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    8fb4:	2210      	movs	r2, #16
    8fb6:	2100      	movs	r1, #0
    8fb8:	4668      	mov	r0, sp
    8fba:	f022 fbef 	bl	2b79c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8fbe:	2200      	movs	r2, #0
    8fc0:	4621      	mov	r1, r4
    8fc2:	4640      	mov	r0, r8
    8fc4:	f7ff fe32 	bl	8c2c <bt_att_create_pdu>
    8fc8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8fca:	b348      	cbz	r0, 9020 <att_read_rsp+0x88>
	data.offset = offset;
    8fcc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8fd0:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8fd4:	2301      	movs	r3, #1
    8fd6:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8fda:	4a12      	ldr	r2, [pc, #72]	; (9024 <att_read_rsp+0x8c>)
	data.chan = chan;
    8fdc:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8fde:	466b      	mov	r3, sp
    8fe0:	4631      	mov	r1, r6
    8fe2:	4630      	mov	r0, r6
    8fe4:	f01b ff5a 	bl	24e9c <bt_gatt_foreach_attr>
	if (data.err) {
    8fe8:	f89d 400c 	ldrb.w	r4, [sp, #12]
    8fec:	b174      	cbz	r4, 900c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    8fee:	9802      	ldr	r0, [sp, #8]
    8ff0:	f00f f9ec 	bl	183cc <net_buf_unref>
	if (!req) {
    8ff4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8ff8:	4632      	mov	r2, r6
    8ffa:	4639      	mov	r1, r7
    8ffc:	4628      	mov	r0, r5
    8ffe:	f7ff fcdd 	bl	89bc <send_err_rsp.part.0>
		return 0;
    9002:	2400      	movs	r4, #0
}
    9004:	4620      	mov	r0, r4
    9006:	b004      	add	sp, #16
    9008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    900c:	4a06      	ldr	r2, [pc, #24]	; (9028 <att_read_rsp+0x90>)
    900e:	9902      	ldr	r1, [sp, #8]
    9010:	4628      	mov	r0, r5
    9012:	f01b ff75 	bl	24f00 <bt_att_chan_send_rsp>
	return 0;
    9016:	e7f5      	b.n	9004 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    9018:	2412      	movs	r4, #18
    901a:	e7f3      	b.n	9004 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    901c:	2401      	movs	r4, #1
    901e:	e7f1      	b.n	9004 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    9020:	240e      	movs	r4, #14
    9022:	e7ef      	b.n	9004 <att_read_rsp+0x6c>
    9024:	000252e9 	.word	0x000252e9
    9028:	00024ff3 	.word	0x00024ff3

0000902c <att_read_type_req>:
{
    902c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    9030:	7b0c      	ldrb	r4, [r1, #12]
    9032:	3c04      	subs	r4, #4
    9034:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    9036:	2c02      	cmp	r4, #2
{
    9038:	4605      	mov	r5, r0
    903a:	b08c      	sub	sp, #48	; 0x30
    903c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    903e:	d001      	beq.n	9044 <att_read_type_req+0x18>
    9040:	2c10      	cmp	r4, #16
    9042:	d150      	bne.n	90e6 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    9044:	2104      	movs	r1, #4
    9046:	3008      	adds	r0, #8
    9048:	f01c ff30 	bl	25eac <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    904c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    9050:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9052:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    9054:	1d01      	adds	r1, r0, #4
    9056:	4622      	mov	r2, r4
    9058:	4640      	mov	r0, r8
    905a:	f01b fb85 	bl	24768 <bt_uuid_create>
    905e:	b188      	cbz	r0, 9084 <att_read_type_req+0x58>
	if (!start || !end) {
    9060:	b19e      	cbz	r6, 908a <att_read_type_req+0x5e>
    9062:	b18f      	cbz	r7, 9088 <att_read_type_req+0x5c>
	if (start > end) {
    9064:	42b7      	cmp	r7, r6
    9066:	d310      	bcc.n	908a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    9068:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    906a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    906c:	2100      	movs	r1, #0
    906e:	eb0d 0002 	add.w	r0, sp, r2
    9072:	f022 fb93 	bl	2b79c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9076:	2201      	movs	r2, #1
    9078:	2109      	movs	r1, #9
    907a:	4620      	mov	r0, r4
    907c:	f7ff fdd6 	bl	8c2c <bt_att_create_pdu>
    9080:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    9082:	b968      	cbnz	r0, 90a0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    9084:	240e      	movs	r4, #14
    9086:	e007      	b.n	9098 <att_read_type_req+0x6c>
			*err = 0U;
    9088:	463e      	mov	r6, r7
	if (!req) {
    908a:	2301      	movs	r3, #1
    908c:	4632      	mov	r2, r6
    908e:	2108      	movs	r1, #8
    9090:	4628      	mov	r0, r5
    9092:	f7ff fc93 	bl	89bc <send_err_rsp.part.0>
		return 0;
    9096:	2400      	movs	r4, #0
}
    9098:	4620      	mov	r0, r4
    909a:	b00c      	add	sp, #48	; 0x30
    909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    90a0:	2101      	movs	r1, #1
    90a2:	3008      	adds	r0, #8
	data.uuid = uuid;
    90a4:	e9cd 5806 	strd	r5, r8, [sp, #24]
    90a8:	f01c fece 	bl	25e48 <net_buf_simple_add>
	data.rsp->len = 0U;
    90ac:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    90b0:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    90b2:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    90b4:	4a0d      	ldr	r2, [pc, #52]	; (90ec <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    90b6:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    90ba:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    90bc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    90c0:	4630      	mov	r0, r6
    90c2:	ab06      	add	r3, sp, #24
    90c4:	f01b feea 	bl	24e9c <bt_gatt_foreach_attr>
	if (data.err) {
    90c8:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    90cc:	b12c      	cbz	r4, 90da <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    90ce:	9808      	ldr	r0, [sp, #32]
    90d0:	f00f f97c 	bl	183cc <net_buf_unref>
	if (!req) {
    90d4:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    90d8:	e7d8      	b.n	908c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    90da:	4a05      	ldr	r2, [pc, #20]	; (90f0 <att_read_type_req+0xc4>)
    90dc:	9908      	ldr	r1, [sp, #32]
    90de:	4628      	mov	r0, r5
    90e0:	f01b ff0e 	bl	24f00 <bt_att_chan_send_rsp>
	return 0;
    90e4:	e7d8      	b.n	9098 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    90e6:	2404      	movs	r4, #4
    90e8:	e7d6      	b.n	9098 <att_read_type_req+0x6c>
    90ea:	bf00      	nop
    90ec:	00008765 	.word	0x00008765
    90f0:	00024ff3 	.word	0x00024ff3

000090f4 <att_find_type_req>:
{
    90f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90f8:	4688      	mov	r8, r1
    90fa:	b086      	sub	sp, #24
    90fc:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    90fe:	2106      	movs	r1, #6
    9100:	f108 0008 	add.w	r0, r8, #8
    9104:	f01c fed2 	bl	25eac <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    9108:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    910a:	b317      	cbz	r7, 9152 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    910c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    9110:	f1b9 0f00 	cmp.w	r9, #0
    9114:	d01c      	beq.n	9150 <att_find_type_req+0x5c>
	if (start > end) {
    9116:	454f      	cmp	r7, r9
    9118:	d81b      	bhi.n	9152 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    911a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    911c:	f8ad 3002 	strh.w	r3, [sp, #2]
    9120:	2400      	movs	r4, #0
    9122:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9126:	a901      	add	r1, sp, #4
    9128:	4668      	mov	r0, sp
	value = buf->data;
    912a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    912e:	f88d 4000 	strb.w	r4, [sp]
    9132:	f88d 4004 	strb.w	r4, [sp, #4]
    9136:	f8ad 3006 	strh.w	r3, [sp, #6]
    913a:	f01b faeb 	bl	24714 <bt_uuid_cmp>
    913e:	4606      	mov	r6, r0
    9140:	b190      	cbz	r0, 9168 <att_find_type_req+0x74>
	if (!req) {
    9142:	230a      	movs	r3, #10
    9144:	463a      	mov	r2, r7
    9146:	2106      	movs	r1, #6
    9148:	4628      	mov	r0, r5
    914a:	f7ff fc37 	bl	89bc <send_err_rsp.part.0>
		return 0;
    914e:	e007      	b.n	9160 <att_find_type_req+0x6c>
			*err = 0U;
    9150:	464f      	mov	r7, r9
	if (!req) {
    9152:	2301      	movs	r3, #1
    9154:	463a      	mov	r2, r7
    9156:	2106      	movs	r1, #6
    9158:	4628      	mov	r0, r5
    915a:	f7ff fc2f 	bl	89bc <send_err_rsp.part.0>
		return 0;
    915e:	2400      	movs	r4, #0
}
    9160:	4620      	mov	r0, r4
    9162:	b006      	add	sp, #24
    9164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    9168:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    916c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    9170:	4601      	mov	r1, r0
    9172:	2214      	movs	r2, #20
    9174:	a801      	add	r0, sp, #4
    9176:	f022 fb11 	bl	2b79c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    917a:	4632      	mov	r2, r6
    917c:	2107      	movs	r1, #7
    917e:	4640      	mov	r0, r8
    9180:	f7ff fd54 	bl	8c2c <bt_att_create_pdu>
    9184:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9186:	b1e0      	cbz	r0, 91c2 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9188:	230a      	movs	r3, #10
    918a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    918e:	4a0e      	ldr	r2, [pc, #56]	; (91c8 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    9190:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9194:	ab01      	add	r3, sp, #4
    9196:	4649      	mov	r1, r9
    9198:	4638      	mov	r0, r7
	data.value = value;
    919a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    919e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    91a0:	f01b fe7c 	bl	24e9c <bt_gatt_foreach_attr>
	if (data.err) {
    91a4:	f89d 4015 	ldrb.w	r4, [sp, #21]
    91a8:	b12c      	cbz	r4, 91b6 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    91aa:	9802      	ldr	r0, [sp, #8]
    91ac:	f00f f90e 	bl	183cc <net_buf_unref>
	if (!req) {
    91b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    91b4:	e7ce      	b.n	9154 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    91b6:	4a05      	ldr	r2, [pc, #20]	; (91cc <att_find_type_req+0xd8>)
    91b8:	9902      	ldr	r1, [sp, #8]
    91ba:	4628      	mov	r0, r5
    91bc:	f01b fea0 	bl	24f00 <bt_att_chan_send_rsp>
	return 0;
    91c0:	e7ce      	b.n	9160 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    91c2:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    91c4:	e7cc      	b.n	9160 <att_find_type_req+0x6c>
    91c6:	bf00      	nop
    91c8:	000082f5 	.word	0x000082f5
    91cc:	00024ff3 	.word	0x00024ff3

000091d0 <att_find_info_req>:
{
    91d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    91d2:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    91d4:	881e      	ldrh	r6, [r3, #0]
{
    91d6:	b085      	sub	sp, #20
    91d8:	4605      	mov	r5, r0
	if (!start || !end) {
    91da:	b19e      	cbz	r6, 9204 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    91dc:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    91de:	b184      	cbz	r4, 9202 <att_find_info_req+0x32>
	if (start > end) {
    91e0:	42b4      	cmp	r4, r6
    91e2:	d30f      	bcc.n	9204 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    91e4:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    91e6:	2210      	movs	r2, #16
    91e8:	2100      	movs	r1, #0
    91ea:	4668      	mov	r0, sp
    91ec:	f022 fad6 	bl	2b79c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    91f0:	2200      	movs	r2, #0
    91f2:	2105      	movs	r1, #5
    91f4:	4638      	mov	r0, r7
    91f6:	f7ff fd19 	bl	8c2c <bt_att_create_pdu>
    91fa:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    91fc:	b958      	cbnz	r0, 9216 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    91fe:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    9200:	e007      	b.n	9212 <att_find_info_req+0x42>
			*err = 0U;
    9202:	4626      	mov	r6, r4
	if (!req) {
    9204:	2301      	movs	r3, #1
    9206:	4632      	mov	r2, r6
    9208:	2104      	movs	r1, #4
    920a:	4628      	mov	r0, r5
    920c:	f7ff fbd6 	bl	89bc <send_err_rsp.part.0>
	return 0;
    9210:	2000      	movs	r0, #0
}
    9212:	b005      	add	sp, #20
    9214:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9216:	4621      	mov	r1, r4
    9218:	4a09      	ldr	r2, [pc, #36]	; (9240 <att_find_info_req+0x70>)
	data.chan = chan;
    921a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    921c:	466b      	mov	r3, sp
    921e:	4630      	mov	r0, r6
    9220:	f01b fe3c 	bl	24e9c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9224:	9c02      	ldr	r4, [sp, #8]
    9226:	b924      	cbnz	r4, 9232 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    9228:	9801      	ldr	r0, [sp, #4]
    922a:	f00f f8cf 	bl	183cc <net_buf_unref>
	if (!req) {
    922e:	230a      	movs	r3, #10
    9230:	e7e9      	b.n	9206 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    9232:	4a04      	ldr	r2, [pc, #16]	; (9244 <att_find_info_req+0x74>)
    9234:	9901      	ldr	r1, [sp, #4]
    9236:	4628      	mov	r0, r5
    9238:	f01b fe62 	bl	24f00 <bt_att_chan_send_rsp>
    923c:	e7e8      	b.n	9210 <att_find_info_req+0x40>
    923e:	bf00      	nop
    9240:	00024f51 	.word	0x00024f51
    9244:	00024ff3 	.word	0x00024ff3

00009248 <att_mtu_req>:
{
    9248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    924a:	6803      	ldr	r3, [r0, #0]
{
    924c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    924e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9250:	f3bf 8f5b 	dmb	ish
    9254:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    9258:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    925c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    9260:	071b      	lsls	r3, r3, #28
    9262:	d41b      	bmi.n	929c <att_mtu_req+0x54>
	mtu_client = sys_le16_to_cpu(req->mtu);
    9264:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9266:	881b      	ldrh	r3, [r3, #0]
    9268:	2b16      	cmp	r3, #22
    926a:	d919      	bls.n	92a0 <att_mtu_req+0x58>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    926c:	2202      	movs	r2, #2
    926e:	2103      	movs	r1, #3
    9270:	f7ff fcdc 	bl	8c2c <bt_att_create_pdu>
	if (!pdu) {
    9274:	4606      	mov	r6, r0
    9276:	b1a8      	cbz	r0, 92a4 <att_mtu_req+0x5c>
	return net_buf_simple_add(&buf->b, len);
    9278:	2102      	movs	r1, #2
    927a:	3008      	adds	r0, #8
    927c:	f01c fde4 	bl	25e48 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    9280:	2717      	movs	r7, #23
    9282:	7007      	strb	r7, [r0, #0]
    9284:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    9286:	4a08      	ldr	r2, [pc, #32]	; (92a8 <att_mtu_req+0x60>)
    9288:	4628      	mov	r0, r5
    928a:	4631      	mov	r1, r6
    928c:	f01b fe38 	bl	24f00 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    9290:	f8a5 7052 	strh.w	r7, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    9294:	f8a5 705e 	strh.w	r7, [r5, #94]	; 0x5e
	return 0;
    9298:	4620      	mov	r0, r4
}
    929a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    929c:	2006      	movs	r0, #6
    929e:	e7fc      	b.n	929a <att_mtu_req+0x52>
		return BT_ATT_ERR_INVALID_PDU;
    92a0:	2004      	movs	r0, #4
    92a2:	e7fa      	b.n	929a <att_mtu_req+0x52>
		return BT_ATT_ERR_UNLIKELY;
    92a4:	200e      	movs	r0, #14
    92a6:	e7f8      	b.n	929a <att_mtu_req+0x52>
    92a8:	00024ff3 	.word	0x00024ff3

000092ac <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    92ac:	b513      	push	{r0, r1, r4, lr}
    92ae:	4602      	mov	r2, r0
    92b0:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    92b2:	4808      	ldr	r0, [pc, #32]	; (92d4 <bt_att_req_alloc+0x28>)
    92b4:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    92b6:	2400      	movs	r4, #0
    92b8:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    92ba:	f016 f9f3 	bl	1f6a4 <k_mem_slab_alloc>
    92be:	4601      	mov	r1, r0
    92c0:	b930      	cbnz	r0, 92d0 <bt_att_req_alloc+0x24>
__ssp_bos_icheck3(memset, void *, int)
    92c2:	9801      	ldr	r0, [sp, #4]
    92c4:	2218      	movs	r2, #24
    92c6:	f022 fa69 	bl	2b79c <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    92ca:	9801      	ldr	r0, [sp, #4]
}
    92cc:	b002      	add	sp, #8
    92ce:	bd10      	pop	{r4, pc}
		return NULL;
    92d0:	4620      	mov	r0, r4
    92d2:	e7fb      	b.n	92cc <bt_att_req_alloc+0x20>
    92d4:	20000b70 	.word	0x20000b70

000092d8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    92d8:	b507      	push	{r0, r1, r2, lr}
    92da:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    92dc:	a901      	add	r1, sp, #4
    92de:	4803      	ldr	r0, [pc, #12]	; (92ec <bt_att_req_free+0x14>)
    92e0:	f016 fa12 	bl	1f708 <k_mem_slab_free>
}
    92e4:	b003      	add	sp, #12
    92e6:	f85d fb04 	ldr.w	pc, [sp], #4
    92ea:	bf00      	nop
    92ec:	20000b70 	.word	0x20000b70

000092f0 <att_handle_rsp>:
{
    92f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92f4:	4605      	mov	r5, r0
    92f6:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    92f8:	30e0      	adds	r0, #224	; 0xe0
{
    92fa:	4689      	mov	r9, r1
    92fc:	4692      	mov	sl, r2
    92fe:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    9300:	f021 ffec 	bl	2b2dc <k_delayed_work_cancel>
	if (!chan->req) {
    9304:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    9308:	bb64      	cbnz	r4, 9364 <att_handle_rsp+0x74>
    930a:	4932      	ldr	r1, [pc, #200]	; (93d4 <att_handle_rsp+0xe4>)
    930c:	4b32      	ldr	r3, [pc, #200]	; (93d8 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    930e:	4833      	ldr	r0, [pc, #204]	; (93dc <att_handle_rsp+0xec>)
    9310:	1ac9      	subs	r1, r1, r3
    9312:	08c9      	lsrs	r1, r1, #3
    9314:	0189      	lsls	r1, r1, #6
    9316:	f041 0102 	orr.w	r1, r1, #2
    931a:	f01a f95d 	bl	235d8 <log_0>
	att_process(chan->att);
    931e:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    9322:	f10b 0004 	add.w	r0, fp, #4
    9326:	f01b fd30 	bl	24d8a <sys_slist_get>
	if (!node) {
    932a:	4607      	mov	r7, r0
    932c:	2800      	cmp	r0, #0
    932e:	d039      	beq.n	93a4 <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9330:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    9334:	b15a      	cbz	r2, 934e <att_handle_rsp+0x5e>
    9336:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    933a:	d008      	beq.n	934e <att_handle_rsp+0x5e>
    933c:	6816      	ldr	r6, [r2, #0]
    933e:	b10e      	cbz	r6, 9344 <att_handle_rsp+0x54>
    9340:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    9344:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    9348:	b33a      	cbz	r2, 939a <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    934a:	2e00      	cmp	r6, #0
    934c:	d137      	bne.n	93be <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    934e:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    9352:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    9354:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    9358:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    935c:	bb12      	cbnz	r2, 93a4 <att_handle_rsp+0xb4>
	list->tail = node;
    935e:	f8cb 7008 	str.w	r7, [fp, #8]
}
    9362:	e01f      	b.n	93a4 <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    9364:	4b1e      	ldr	r3, [pc, #120]	; (93e0 <att_handle_rsp+0xf0>)
    9366:	429c      	cmp	r4, r3
    9368:	d103      	bne.n	9372 <att_handle_rsp+0x82>
		chan->req = NULL;
    936a:	2400      	movs	r4, #0
    936c:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    9370:	e7d5      	b.n	931e <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    9372:	6920      	ldr	r0, [r4, #16]
    9374:	b128      	cbz	r0, 9382 <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    9376:	f00f f829 	bl	183cc <net_buf_unref>
		chan->req->buf = NULL;
    937a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    937e:	2200      	movs	r2, #0
    9380:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    9382:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
    9386:	2600      	movs	r6, #0
	func = chan->req->func;
    9388:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    938a:	6943      	ldr	r3, [r0, #20]
	chan->req->func = NULL;
    938c:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    938e:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    9390:	f01c f83a 	bl	25408 <att_req_destroy>
	chan->req = NULL;
    9394:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    9398:	e7c1      	b.n	931e <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    939a:	4639      	mov	r1, r7
    939c:	f01b fef6 	bl	2518c <bt_att_chan_req_send>
    93a0:	2800      	cmp	r0, #0
    93a2:	dbd2      	blt.n	934a <att_handle_rsp+0x5a>
	if (func) {
    93a4:	b13c      	cbz	r4, 93b6 <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    93a6:	9b03      	ldr	r3, [sp, #12]
    93a8:	6828      	ldr	r0, [r5, #0]
    93aa:	9300      	str	r3, [sp, #0]
    93ac:	6800      	ldr	r0, [r0, #0]
    93ae:	4653      	mov	r3, sl
    93b0:	464a      	mov	r2, r9
    93b2:	4641      	mov	r1, r8
    93b4:	47a0      	blx	r4
}
    93b6:	2000      	movs	r0, #0
    93b8:	b005      	add	sp, #20
    93ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    93be:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    93c2:	d004      	beq.n	93ce <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    93c4:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    93c8:	b10a      	cbz	r2, 93ce <att_handle_rsp+0xde>
    93ca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    93ce:	4630      	mov	r0, r6
    93d0:	4616      	mov	r6, r2
    93d2:	e7b7      	b.n	9344 <att_handle_rsp+0x54>
    93d4:	0002bf58 	.word	0x0002bf58
    93d8:	0002bf50 	.word	0x0002bf50
    93dc:	0002f568 	.word	0x0002f568
    93e0:	200029ac 	.word	0x200029ac

000093e4 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    93e4:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
{
    93e8:	b430      	push	{r4, r5}
	if (!chan->req || chan->req == &cancel) {
    93ea:	b18b      	cbz	r3, 9410 <att_error_rsp+0x2c>
    93ec:	4a09      	ldr	r2, [pc, #36]	; (9414 <att_error_rsp+0x30>)
    93ee:	4293      	cmp	r3, r2
    93f0:	d00e      	beq.n	9410 <att_error_rsp+0x2c>
	if (chan->req->buf) {
    93f2:	691a      	ldr	r2, [r3, #16]
	rsp = (void *)buf->data;
    93f4:	688c      	ldr	r4, [r1, #8]
	if (chan->req->buf) {
    93f6:	b12a      	cbz	r2, 9404 <att_error_rsp+0x20>
	buf->data = buf->__buf + state->offset;
    93f8:	899d      	ldrh	r5, [r3, #12]
    93fa:	6911      	ldr	r1, [r2, #16]
	buf->len = state->len;
    93fc:	89db      	ldrh	r3, [r3, #14]
    93fe:	8193      	strh	r3, [r2, #12]
	buf->data = buf->__buf + state->offset;
    9400:	4429      	add	r1, r5
    9402:	6091      	str	r1, [r2, #8]
	err = rsp->error;
    9404:	78e3      	ldrb	r3, [r4, #3]
	return att_handle_rsp(chan, NULL, 0, err);
    9406:	2200      	movs	r2, #0
}
    9408:	bc30      	pop	{r4, r5}
	return att_handle_rsp(chan, NULL, 0, err);
    940a:	4611      	mov	r1, r2
    940c:	f7ff bf70 	b.w	92f0 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
    9410:	230e      	movs	r3, #14
    9412:	e7f8      	b.n	9406 <att_error_rsp+0x22>
    9414:	200029ac 	.word	0x200029ac

00009418 <bt_att_disconnected>:
{
    9418:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    941a:	f850 6c08 	ldr.w	r6, [r0, #-8]
{
    941e:	b085      	sub	sp, #20
    9420:	4604      	mov	r4, r0
	if (!att_chan->att) {
    9422:	2e00      	cmp	r6, #0
    9424:	d042      	beq.n	94ac <bt_att_disconnected+0x94>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    9426:	f500 7192 	add.w	r1, r0, #292	; 0x124
    942a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    942e:	f01b fcb6 	bl	24d9e <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
    9432:	f504 7584 	add.w	r5, r4, #264	; 0x108
	z_impl_k_sem_give(sem);
    9436:	4628      	mov	r0, r5
    9438:	f016 fe24 	bl	20084 <z_impl_k_sem_give>
    943c:	4628      	mov	r0, r5
    943e:	f016 fe21 	bl	20084 <z_impl_k_sem_give>
    9442:	4628      	mov	r0, r5
    9444:	f016 fe1e 	bl	20084 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    9448:	f1a4 0508 	sub.w	r5, r4, #8
    944c:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    9450:	2200      	movs	r2, #0
    9452:	2300      	movs	r3, #0
    9454:	4638      	mov	r0, r7
    9456:	f01c fca0 	bl	25d9a <net_buf_get>
    945a:	4602      	mov	r2, r0
    945c:	bb40      	cbnz	r0, 94b0 <bt_att_disconnected+0x98>
	if (chan->req) {
    945e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    9462:	b123      	cbz	r3, 946e <bt_att_disconnected+0x56>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    9464:	4601      	mov	r1, r0
    9466:	230e      	movs	r3, #14
    9468:	4628      	mov	r0, r5
    946a:	f7ff ff41 	bl	92f0 <att_handle_rsp>
	chan->att = NULL;
    946e:	2300      	movs	r3, #0
    9470:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    9474:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    9476:	b9cb      	cbnz	r3, 94ac <bt_att_disconnected+0x94>
	att_reset(att);
    9478:	9603      	str	r6, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    947a:	9803      	ldr	r0, [sp, #12]
    947c:	2200      	movs	r2, #0
    947e:	2300      	movs	r3, #0
    9480:	3024      	adds	r0, #36	; 0x24
    9482:	f01c fc8a 	bl	25d9a <net_buf_get>
    9486:	b9b0      	cbnz	r0, 94b6 <bt_att_disconnected+0x9e>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    9488:	9803      	ldr	r0, [sp, #12]
    948a:	2200      	movs	r2, #0
    948c:	2300      	movs	r3, #0
    948e:	300c      	adds	r0, #12
    9490:	f01c fc83 	bl	25d9a <net_buf_get>
    9494:	b990      	cbnz	r0, 94bc <bt_att_disconnected+0xa4>
	att->conn = NULL;
    9496:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9498:	6856      	ldr	r6, [r2, #4]
	att->conn = NULL;
    949a:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    949c:	b98e      	cbnz	r6, 94c2 <bt_att_disconnected+0xaa>
	k_mem_slab_free(&att_slab, (void **)&att);
    949e:	4815      	ldr	r0, [pc, #84]	; (94f4 <bt_att_disconnected+0xdc>)
    94a0:	a903      	add	r1, sp, #12
    94a2:	f016 f931 	bl	1f708 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    94a6:	6820      	ldr	r0, [r4, #0]
    94a8:	f001 ff00 	bl	b2ac <bt_gatt_disconnected>
}
    94ac:	b005      	add	sp, #20
    94ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    94b0:	f00e ff8c 	bl	183cc <net_buf_unref>
    94b4:	e7cc      	b.n	9450 <bt_att_disconnected+0x38>
		net_buf_unref(buf);
    94b6:	f00e ff89 	bl	183cc <net_buf_unref>
    94ba:	e7de      	b.n	947a <bt_att_disconnected+0x62>
		net_buf_unref(buf);
    94bc:	f00e ff86 	bl	183cc <net_buf_unref>
    94c0:	e7e2      	b.n	9488 <bt_att_disconnected+0x70>
	return node->next;
    94c2:	6835      	ldr	r5, [r6, #0]
    94c4:	2d00      	cmp	r5, #0
    94c6:	bf38      	it	cc
    94c8:	2500      	movcc	r5, #0
		if (req->func) {
    94ca:	6877      	ldr	r7, [r6, #4]
    94cc:	b137      	cbz	r7, 94dc <bt_att_disconnected+0xc4>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    94ce:	6973      	ldr	r3, [r6, #20]
    94d0:	9300      	str	r3, [sp, #0]
    94d2:	2300      	movs	r3, #0
    94d4:	461a      	mov	r2, r3
    94d6:	210e      	movs	r1, #14
    94d8:	4618      	mov	r0, r3
    94da:	47b8      	blx	r7
		att_req_destroy(req);
    94dc:	4630      	mov	r0, r6
    94de:	f01b ff93 	bl	25408 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    94e2:	2d00      	cmp	r5, #0
    94e4:	d0db      	beq.n	949e <bt_att_disconnected+0x86>
    94e6:	682b      	ldr	r3, [r5, #0]
    94e8:	2b00      	cmp	r3, #0
    94ea:	bf38      	it	cc
    94ec:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    94ee:	462e      	mov	r6, r5
    94f0:	461d      	mov	r5, r3
    94f2:	e7ea      	b.n	94ca <bt_att_disconnected+0xb2>
    94f4:	20000b38 	.word	0x20000b38

000094f8 <att_timeout>:
    94f8:	4b08      	ldr	r3, [pc, #32]	; (951c <att_timeout+0x24>)
    94fa:	4909      	ldr	r1, [pc, #36]	; (9520 <att_timeout+0x28>)
{
    94fc:	b510      	push	{r4, lr}
    94fe:	1ac9      	subs	r1, r1, r3
    9500:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    9502:	0189      	lsls	r1, r1, #6
{
    9504:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    9506:	f041 0101 	orr.w	r1, r1, #1
    950a:	4806      	ldr	r0, [pc, #24]	; (9524 <att_timeout+0x2c>)
    950c:	f01a f864 	bl	235d8 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    9510:	f1a4 00d8 	sub.w	r0, r4, #216	; 0xd8
}
    9514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    9518:	f7ff bf7e 	b.w	9418 <bt_att_disconnected>
    951c:	0002bf50 	.word	0x0002bf50
    9520:	0002bf58 	.word	0x0002bf58
    9524:	0002f57f 	.word	0x0002f57f

00009528 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    9528:	b510      	push	{r4, lr}
    952a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    952c:	b348      	cbz	r0, 9582 <bt_att_req_cancel+0x5a>
    952e:	b341      	cbz	r1, 9582 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
    9530:	f7ff f808 	bl	8544 <att_get>
	if (!att) {
    9534:	b328      	cbz	r0, 9582 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9536:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    9538:	b15b      	cbz	r3, 9552 <bt_att_req_cancel+0x2a>
    953a:	f5b3 7196 	subs.w	r1, r3, #300	; 0x12c
    953e:	d008      	beq.n	9552 <bt_att_req_cancel+0x2a>
    9540:	681b      	ldr	r3, [r3, #0]
    9542:	b10b      	cbz	r3, 9548 <bt_att_req_cancel+0x20>
    9544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
	if (chan->req != req) {
    9548:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
    954c:	4294      	cmp	r4, r2
    954e:	d005      	beq.n	955c <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9550:	b963      	cbnz	r3, 956c <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    9552:	4621      	mov	r1, r4
    9554:	3004      	adds	r0, #4
    9556:	f01b fc22 	bl	24d9e <sys_slist_find_and_remove>
    955a:	e002      	b.n	9562 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
    955c:	4b09      	ldr	r3, [pc, #36]	; (9584 <bt_att_req_cancel+0x5c>)
    955e:	f8c1 30c4 	str.w	r3, [r1, #196]	; 0xc4

	att_req_destroy(req);
    9562:	4620      	mov	r0, r4
}
    9564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	att_req_destroy(req);
    9568:	f01b bf4e 	b.w	25408 <att_req_destroy>
Z_GENLIST_PEEK_NEXT(slist, snode)
    956c:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
    9570:	d004      	beq.n	957c <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9572:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9576:	b10a      	cbz	r2, 957c <bt_att_req_cancel+0x54>
    9578:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
    957c:	4619      	mov	r1, r3
    957e:	4613      	mov	r3, r2
    9580:	e7e2      	b.n	9548 <bt_att_req_cancel+0x20>
}
    9582:	bd10      	pop	{r4, pc}
    9584:	200029ac 	.word	0x200029ac

00009588 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    9588:	490a      	ldr	r1, [pc, #40]	; (95b4 <db_hash_store+0x2c>)
    958a:	480b      	ldr	r0, [pc, #44]	; (95b8 <db_hash_store+0x30>)
{
    958c:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    958e:	2210      	movs	r2, #16
    9590:	f7f9 ff9c 	bl	34cc <settings_save_one>
	if (err) {
    9594:	4601      	mov	r1, r0
    9596:	b158      	cbz	r0, 95b0 <db_hash_store+0x28>
    9598:	4b08      	ldr	r3, [pc, #32]	; (95bc <db_hash_store+0x34>)
    959a:	4a09      	ldr	r2, [pc, #36]	; (95c0 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    959c:	4809      	ldr	r0, [pc, #36]	; (95c4 <db_hash_store+0x3c>)
    959e:	1ad2      	subs	r2, r2, r3
    95a0:	08d2      	lsrs	r2, r2, #3
    95a2:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    95a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    95a8:	f042 0201 	orr.w	r2, r2, #1
    95ac:	f01a b821 	b.w	235f2 <log_1>
}
    95b0:	bd08      	pop	{r3, pc}
    95b2:	bf00      	nop
    95b4:	200085df 	.word	0x200085df
    95b8:	0002f592 	.word	0x0002f592
    95bc:	0002bf50 	.word	0x0002bf50
    95c0:	0002c008 	.word	0x0002c008
    95c4:	0002f59a 	.word	0x0002f59a

000095c8 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    95c8:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    95ca:	490b      	ldr	r1, [pc, #44]	; (95f8 <db_hash_set+0x30>)
{
    95cc:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    95ce:	4618      	mov	r0, r3
    95d0:	2210      	movs	r2, #16
    95d2:	47a0      	blx	r4
	if (len < 0) {
    95d4:	1e04      	subs	r4, r0, #0
    95d6:	da0c      	bge.n	95f2 <db_hash_set+0x2a>
    95d8:	4a08      	ldr	r2, [pc, #32]	; (95fc <db_hash_set+0x34>)
    95da:	4b09      	ldr	r3, [pc, #36]	; (9600 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    95dc:	4809      	ldr	r0, [pc, #36]	; (9604 <db_hash_set+0x3c>)
    95de:	1ad2      	subs	r2, r2, r3
    95e0:	08d2      	lsrs	r2, r2, #3
    95e2:	0192      	lsls	r2, r2, #6
    95e4:	f042 0201 	orr.w	r2, r2, #1
    95e8:	4621      	mov	r1, r4
    95ea:	f01a f802 	bl	235f2 <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    95ee:	4620      	mov	r0, r4
    95f0:	bd10      	pop	{r4, pc}
	return 0;
    95f2:	2400      	movs	r4, #0
    95f4:	e7fb      	b.n	95ee <db_hash_set+0x26>
    95f6:	bf00      	nop
    95f8:	200085ef 	.word	0x200085ef
    95fc:	0002c008 	.word	0x0002c008
    9600:	0002bf50 	.word	0x0002bf50
    9604:	0002f5c0 	.word	0x0002f5c0

00009608 <find_cf_cfg>:
{
    9608:	b537      	push	{r0, r1, r2, r4, r5, lr}
    960a:	4d0d      	ldr	r5, [pc, #52]	; (9640 <find_cf_cfg+0x38>)
		if (!conn) {
    960c:	4604      	mov	r4, r0
    960e:	b960      	cbnz	r0, 962a <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9610:	9000      	str	r0, [sp, #0]
    9612:	4669      	mov	r1, sp
    9614:	f8cd 0003 	str.w	r0, [sp, #3]
    9618:	1c68      	adds	r0, r5, #1
    961a:	f01c f84c 	bl	256b6 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    961e:	2800      	cmp	r0, #0
    9620:	bf08      	it	eq
    9622:	462c      	moveq	r4, r5
}
    9624:	4620      	mov	r0, r4
    9626:	b003      	add	sp, #12
    9628:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    962a:	462a      	mov	r2, r5
    962c:	f812 1b01 	ldrb.w	r1, [r2], #1
    9630:	f01b fa83 	bl	24b3a <bt_conn_is_peer_addr_le>
    9634:	2800      	cmp	r0, #0
	return NULL;
    9636:	bf14      	ite	ne
    9638:	462c      	movne	r4, r5
    963a:	2400      	moveq	r4, #0
    963c:	e7f2      	b.n	9624 <find_cf_cfg+0x1c>
    963e:	bf00      	nop
    9640:	200029c4 	.word	0x200029c4

00009644 <find_sc_cfg>:
{
    9644:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
    9646:	4c06      	ldr	r4, [pc, #24]	; (9660 <find_sc_cfg+0x1c>)
    9648:	7823      	ldrb	r3, [r4, #0]
    964a:	4283      	cmp	r3, r0
    964c:	d103      	bne.n	9656 <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    964e:	1c60      	adds	r0, r4, #1
    9650:	f01c f831 	bl	256b6 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    9654:	b108      	cbz	r0, 965a <find_sc_cfg+0x16>
	return NULL;
    9656:	2000      	movs	r0, #0
}
    9658:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
    965a:	4620      	mov	r0, r4
    965c:	e7fc      	b.n	9658 <find_sc_cfg+0x14>
    965e:	bf00      	nop
    9660:	200080c0 	.word	0x200080c0

00009664 <gatt_sub_find>:
{
    9664:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9666:	4d0d      	ldr	r5, [pc, #52]	; (969c <gatt_sub_find+0x38>)
		if (!conn) {
    9668:	4604      	mov	r4, r0
    966a:	b960      	cbnz	r0, 9686 <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    966c:	9000      	str	r0, [sp, #0]
    966e:	4669      	mov	r1, sp
    9670:	f8cd 0003 	str.w	r0, [sp, #3]
    9674:	1c68      	adds	r0, r5, #1
    9676:	f01c f81e 	bl	256b6 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
    967a:	2800      	cmp	r0, #0
    967c:	bf08      	it	eq
    967e:	462c      	moveq	r4, r5
}
    9680:	4620      	mov	r0, r4
    9682:	b003      	add	sp, #12
    9684:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    9686:	462a      	mov	r2, r5
    9688:	f812 1b01 	ldrb.w	r1, [r2], #1
    968c:	f01b fa55 	bl	24b3a <bt_conn_is_peer_addr_le>
    9690:	2800      	cmp	r0, #0
	return NULL;
    9692:	bf14      	ite	ne
    9694:	462c      	movne	r4, r5
    9696:	2400      	moveq	r4, #0
    9698:	e7f2      	b.n	9680 <gatt_sub_find+0x1c>
    969a:	bf00      	nop
    969c:	200029f4 	.word	0x200029f4

000096a0 <sc_store>:
{
    96a0:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    96a2:	4605      	mov	r5, r0
{
    96a4:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    96a6:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    96aa:	4604      	mov	r4, r0
	if (cfg->id) {
    96ac:	b1fa      	cbz	r2, 96ee <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    96ae:	ae02      	add	r6, sp, #8
    96b0:	2104      	movs	r1, #4
    96b2:	4630      	mov	r0, r6
    96b4:	f019 fac6 	bl	22c44 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    96b8:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    96ba:	4a0e      	ldr	r2, [pc, #56]	; (96f4 <sc_store+0x54>)
    96bc:	462b      	mov	r3, r5
    96be:	2124      	movs	r1, #36	; 0x24
    96c0:	a803      	add	r0, sp, #12
    96c2:	f7fb fd61 	bl	5188 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    96c6:	f104 0108 	add.w	r1, r4, #8
    96ca:	2204      	movs	r2, #4
    96cc:	a803      	add	r0, sp, #12
    96ce:	f7f9 fefd 	bl	34cc <settings_save_one>
	if (err) {
    96d2:	4601      	mov	r1, r0
    96d4:	b148      	cbz	r0, 96ea <sc_store+0x4a>
    96d6:	4a08      	ldr	r2, [pc, #32]	; (96f8 <sc_store+0x58>)
    96d8:	4b08      	ldr	r3, [pc, #32]	; (96fc <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    96da:	4809      	ldr	r0, [pc, #36]	; (9700 <sc_store+0x60>)
    96dc:	1ad2      	subs	r2, r2, r3
    96de:	08d2      	lsrs	r2, r2, #3
    96e0:	0192      	lsls	r2, r2, #6
    96e2:	f042 0201 	orr.w	r2, r2, #1
    96e6:	f019 ff84 	bl	235f2 <log_1>
}
    96ea:	b00c      	add	sp, #48	; 0x30
    96ec:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    96ee:	9200      	str	r2, [sp, #0]
    96f0:	e7e3      	b.n	96ba <sc_store+0x1a>
    96f2:	bf00      	nop
    96f4:	0002f8a3 	.word	0x0002f8a3
    96f8:	0002c008 	.word	0x0002c008
    96fc:	0002bf50 	.word	0x0002bf50
    9700:	0002f5e1 	.word	0x0002f5e1

00009704 <ccc_save>:
{
    9704:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9706:	4b0c      	ldr	r3, [pc, #48]	; (9738 <ccc_save+0x34>)
{
    9708:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    970a:	6882      	ldr	r2, [r0, #8]
    970c:	429a      	cmp	r2, r3
{
    970e:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9710:	d10f      	bne.n	9732 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    9712:	7922      	ldrb	r2, [r4, #4]
    9714:	6821      	ldr	r1, [r4, #0]
    9716:	68c0      	ldr	r0, [r0, #12]
    9718:	f01b ffe8 	bl	256ec <ccc_find_cfg>
	if (!cfg) {
    971c:	b148      	cbz	r0, 9732 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    971e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    9722:	8901      	ldrh	r1, [r0, #8]
    9724:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    9728:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    972a:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    972c:	8151      	strh	r1, [r2, #10]
	save->count++;
    972e:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    9732:	2001      	movs	r0, #1
    9734:	bd38      	pop	{r3, r4, r5, pc}
    9736:	bf00      	nop
    9738:	0000973d 	.word	0x0000973d

0000973c <bt_gatt_attr_write_ccc>:
{
    973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9740:	461f      	mov	r7, r3
    9742:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9746:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    974a:	4606      	mov	r6, r0
    974c:	4688      	mov	r8, r1
	if (offset) {
    974e:	2b00      	cmp	r3, #0
    9750:	d14a      	bne.n	97e8 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
    9752:	1e7b      	subs	r3, r7, #1
    9754:	2b01      	cmp	r3, #1
    9756:	d84a      	bhi.n	97ee <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
    9758:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    975a:	7815      	ldrb	r5, [r2, #0]
    975c:	bf18      	it	ne
    975e:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    9760:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    9762:	bf0c      	ite	eq
    9764:	b2ad      	uxtheq	r5, r5
    9766:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    976a:	f01b ffa7 	bl	256bc <find_ccc_cfg>
	if (!cfg) {
    976e:	4604      	mov	r4, r0
    9770:	b9e0      	cbnz	r0, 97ac <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    9772:	b915      	cbnz	r5, 977a <bt_gatt_attr_write_ccc+0x3e>
			return len;
    9774:	4638      	mov	r0, r7
}
    9776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    977a:	4649      	mov	r1, r9
    977c:	f01b ff9e 	bl	256bc <find_ccc_cfg>
		if (!cfg) {
    9780:	4604      	mov	r4, r0
    9782:	b960      	cbnz	r0, 979e <bt_gatt_attr_write_ccc+0x62>
    9784:	4b1b      	ldr	r3, [pc, #108]	; (97f4 <bt_gatt_attr_write_ccc+0xb8>)
    9786:	491c      	ldr	r1, [pc, #112]	; (97f8 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    9788:	481c      	ldr	r0, [pc, #112]	; (97fc <bt_gatt_attr_write_ccc+0xc0>)
    978a:	1ac9      	subs	r1, r1, r3
    978c:	08c9      	lsrs	r1, r1, #3
    978e:	0189      	lsls	r1, r1, #6
    9790:	f041 0102 	orr.w	r1, r1, #2
    9794:	f019 ff20 	bl	235d8 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9798:	f06f 0010 	mvn.w	r0, #16
    979c:	e7eb      	b.n	9776 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    979e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    97a2:	3001      	adds	r0, #1
    97a4:	f01b ffda 	bl	2575c <bt_addr_le_copy>
		cfg->id = conn->id;
    97a8:	7a33      	ldrb	r3, [r6, #8]
    97aa:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    97ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
    97b0:	b973      	cbnz	r3, 97d0 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    97b2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    97b6:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    97b8:	42ab      	cmp	r3, r5
    97ba:	d003      	beq.n	97c4 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    97bc:	4649      	mov	r1, r9
    97be:	4640      	mov	r0, r8
    97c0:	f01b fee0 	bl	25584 <gatt_ccc_changed>
	if (!value) {
    97c4:	2d00      	cmp	r5, #0
    97c6:	d1d5      	bne.n	9774 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    97c8:	4620      	mov	r0, r4
    97ca:	f01b ffce 	bl	2576a <clear_ccc_cfg>
    97ce:	e7d1      	b.n	9774 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    97d0:	462a      	mov	r2, r5
    97d2:	4641      	mov	r1, r8
    97d4:	4630      	mov	r0, r6
    97d6:	4798      	blx	r3
		if (write < 0) {
    97d8:	2800      	cmp	r0, #0
    97da:	dbcc      	blt.n	9776 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    97dc:	1e42      	subs	r2, r0, #1
    97de:	2a01      	cmp	r2, #1
    97e0:	d9e7      	bls.n	97b2 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    97e2:	f06f 000d 	mvn.w	r0, #13
    97e6:	e7c6      	b.n	9776 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    97e8:	f06f 0006 	mvn.w	r0, #6
    97ec:	e7c3      	b.n	9776 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    97ee:	f06f 000c 	mvn.w	r0, #12
    97f2:	e7c0      	b.n	9776 <bt_gatt_attr_write_ccc+0x3a>
    97f4:	0002bf50 	.word	0x0002bf50
    97f8:	0002c008 	.word	0x0002c008
    97fc:	0002f5fd 	.word	0x0002f5fd

00009800 <sc_save>:
{
    9800:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9804:	4680      	mov	r8, r0
    9806:	460f      	mov	r7, r1
    9808:	4616      	mov	r6, r2
    980a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    980c:	f7ff ff1a 	bl	9644 <find_sc_cfg>
	if (!cfg) {
    9810:	4604      	mov	r4, r0
    9812:	b9c8      	cbnz	r0, 9848 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9814:	4669      	mov	r1, sp
    9816:	9000      	str	r0, [sp, #0]
    9818:	f8cd 0003 	str.w	r0, [sp, #3]
    981c:	f7ff ff12 	bl	9644 <find_sc_cfg>
		if (!cfg) {
    9820:	4604      	mov	r4, r0
    9822:	b960      	cbnz	r0, 983e <sc_save+0x3e>
    9824:	4915      	ldr	r1, [pc, #84]	; (987c <sc_save+0x7c>)
    9826:	4b16      	ldr	r3, [pc, #88]	; (9880 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
    9828:	4816      	ldr	r0, [pc, #88]	; (9884 <sc_save+0x84>)
    982a:	1ac9      	subs	r1, r1, r3
    982c:	08c9      	lsrs	r1, r1, #3
    982e:	0189      	lsls	r1, r1, #6
    9830:	f041 0101 	orr.w	r1, r1, #1
    9834:	f019 fed0 	bl	235d8 <log_0>
}
    9838:	b002      	add	sp, #8
    983a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    983e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    9842:	4639      	mov	r1, r7
    9844:	f01b ff8a 	bl	2575c <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    9848:	8922      	ldrh	r2, [r4, #8]
    984a:	8963      	ldrh	r3, [r4, #10]
    984c:	b96a      	cbnz	r2, 986a <sc_save+0x6a>
    984e:	b973      	cbnz	r3, 986e <sc_save+0x6e>
		cfg->data.start = start;
    9850:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    9852:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    9854:	4621      	mov	r1, r4
    9856:	f811 0b01 	ldrb.w	r0, [r1], #1
    985a:	f01b f8a3 	bl	249a4 <bt_addr_le_is_bonded>
    985e:	2800      	cmp	r0, #0
    9860:	d0ea      	beq.n	9838 <sc_save+0x38>
		sc_store(cfg);
    9862:	4620      	mov	r0, r4
    9864:	f7ff ff1c 	bl	96a0 <sc_store>
    9868:	e7e6      	b.n	9838 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    986a:	4296      	cmp	r6, r2
    986c:	d302      	bcc.n	9874 <sc_save+0x74>
    986e:	429d      	cmp	r5, r3
    9870:	d8ef      	bhi.n	9852 <sc_save+0x52>
    9872:	e7e1      	b.n	9838 <sc_save+0x38>
	if (*end < new_end) {
    9874:	429d      	cmp	r5, r3
		*start = new_start;
    9876:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    9878:	d9ec      	bls.n	9854 <sc_save+0x54>
    987a:	e7ea      	b.n	9852 <sc_save+0x52>
    987c:	0002c008 	.word	0x0002c008
    9880:	0002bf50 	.word	0x0002bf50
    9884:	0002f617 	.word	0x0002f617

00009888 <ccc_load>:
{
    9888:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    988a:	4b20      	ldr	r3, [pc, #128]	; (990c <ccc_load+0x84>)
{
    988c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    988e:	6882      	ldr	r2, [r0, #8]
    9890:	429a      	cmp	r2, r3
    9892:	d002      	beq.n	989a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    9894:	2001      	movs	r0, #1
}
    9896:	b003      	add	sp, #12
    9898:	bd30      	pop	{r4, r5, pc}
	if (!load->entry) {
    989a:	68a3      	ldr	r3, [r4, #8]
	ccc = attr->user_data;
    989c:	68c5      	ldr	r5, [r0, #12]
	if (!load->entry) {
    989e:	b94b      	cbnz	r3, 98b4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    98a0:	7922      	ldrb	r2, [r4, #4]
    98a2:	6821      	ldr	r1, [r4, #0]
    98a4:	4628      	mov	r0, r5
    98a6:	f01b ff21 	bl	256ec <ccc_find_cfg>
	if (!cfg) {
    98aa:	2800      	cmp	r0, #0
    98ac:	d0f2      	beq.n	9894 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    98ae:	f01b ff5c 	bl	2576a <clear_ccc_cfg>
    98b2:	e7ef      	b.n	9894 <ccc_load+0xc>
	} else if (!load->count) {
    98b4:	68e0      	ldr	r0, [r4, #12]
    98b6:	2800      	cmp	r0, #0
    98b8:	d0ed      	beq.n	9896 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    98ba:	881b      	ldrh	r3, [r3, #0]
    98bc:	4299      	cmp	r1, r3
    98be:	d00a      	beq.n	98d6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    98c0:	d9e8      	bls.n	9894 <ccc_load+0xc>
	load->count--;
    98c2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    98c4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    98c6:	3801      	subs	r0, #1
	load->entry++;
    98c8:	3304      	adds	r3, #4
	load->count--;
    98ca:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    98cc:	3800      	subs	r0, #0
	load->entry++;
    98ce:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    98d0:	bf18      	it	ne
    98d2:	2001      	movne	r0, #1
    98d4:	e7df      	b.n	9896 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    98d6:	7922      	ldrb	r2, [r4, #4]
    98d8:	6821      	ldr	r1, [r4, #0]
    98da:	4628      	mov	r0, r5
    98dc:	f01b ff06 	bl	256ec <ccc_find_cfg>
	if (!cfg) {
    98e0:	4602      	mov	r2, r0
    98e2:	b978      	cbnz	r0, 9904 <ccc_load+0x7c>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    98e4:	9000      	str	r0, [sp, #0]
    98e6:	4669      	mov	r1, sp
    98e8:	f8cd 0003 	str.w	r0, [sp, #3]
    98ec:	4628      	mov	r0, r5
    98ee:	f01b fefd 	bl	256ec <ccc_find_cfg>
		if (!cfg) {
    98f2:	4602      	mov	r2, r0
    98f4:	2800      	cmp	r0, #0
    98f6:	d0e4      	beq.n	98c2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    98f8:	6821      	ldr	r1, [r4, #0]
    98fa:	3001      	adds	r0, #1
    98fc:	f01b ff2e 	bl	2575c <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    9900:	7923      	ldrb	r3, [r4, #4]
    9902:	7013      	strb	r3, [r2, #0]
	cfg->value = load->entry->value;
    9904:	68a3      	ldr	r3, [r4, #8]
    9906:	885b      	ldrh	r3, [r3, #2]
    9908:	8113      	strh	r3, [r2, #8]
    990a:	e7da      	b.n	98c2 <ccc_load+0x3a>
    990c:	0000973d 	.word	0x0000973d

00009910 <sc_set>:
{
    9910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9914:	460e      	mov	r6, r1
    9916:	b087      	sub	sp, #28
    9918:	4690      	mov	r8, r2
    991a:	4699      	mov	r9, r3
	if (!name) {
    991c:	4607      	mov	r7, r0
    991e:	b978      	cbnz	r0, 9940 <sc_set+0x30>
    9920:	4936      	ldr	r1, [pc, #216]	; (99fc <sc_set+0xec>)
    9922:	4b37      	ldr	r3, [pc, #220]	; (9a00 <sc_set+0xf0>)
		BT_ERR("Insufficient number of arguments");
    9924:	4837      	ldr	r0, [pc, #220]	; (9a04 <sc_set+0xf4>)
    9926:	1ac9      	subs	r1, r1, r3
    9928:	08c9      	lsrs	r1, r1, #3
    992a:	0189      	lsls	r1, r1, #6
    992c:	f041 0101 	orr.w	r1, r1, #1
    9930:	f019 fe52 	bl	235d8 <log_0>
		return -EINVAL;
    9934:	f06f 0515 	mvn.w	r5, #21
}
    9938:	4628      	mov	r0, r5
    993a:	b007      	add	sp, #28
    993c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9940:	a902      	add	r1, sp, #8
    9942:	f01a fec3 	bl	246cc <bt_settings_decode_key>
	if (err) {
    9946:	4605      	mov	r5, r0
    9948:	b178      	cbz	r0, 996a <sc_set+0x5a>
    994a:	4a2d      	ldr	r2, [pc, #180]	; (9a00 <sc_set+0xf0>)
    994c:	4c2b      	ldr	r4, [pc, #172]	; (99fc <sc_set+0xec>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    994e:	4638      	mov	r0, r7
    9950:	1aa4      	subs	r4, r4, r2
    9952:	08e4      	lsrs	r4, r4, #3
    9954:	f7f9 f910 	bl	2b78 <log_strdup>
    9958:	01a4      	lsls	r4, r4, #6
    995a:	f044 0401 	orr.w	r4, r4, #1
    995e:	4601      	mov	r1, r0
    9960:	4622      	mov	r2, r4
    9962:	4829      	ldr	r0, [pc, #164]	; (9a08 <sc_set+0xf8>)
    9964:	f019 fe45 	bl	235f2 <log_1>
    9968:	e7e4      	b.n	9934 <sc_set+0x24>
	settings_name_next(name, &next);
    996a:	a901      	add	r1, sp, #4
    996c:	4638      	mov	r0, r7
    996e:	f01a f945 	bl	23bfc <settings_name_next>
	if (!next) {
    9972:	9801      	ldr	r0, [sp, #4]
    9974:	b308      	cbz	r0, 99ba <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    9976:	220a      	movs	r2, #10
    9978:	4629      	mov	r1, r5
    997a:	f018 f86d 	bl	21a58 <strtol>
    997e:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    9980:	a902      	add	r1, sp, #8
    9982:	4638      	mov	r0, r7
    9984:	f7ff fe5e 	bl	9644 <find_sc_cfg>
	if (!cfg && len_rd) {
    9988:	4604      	mov	r4, r0
    998a:	bb88      	cbnz	r0, 99f0 <sc_set+0xe0>
    998c:	2e00      	cmp	r6, #0
    998e:	d0d3      	beq.n	9938 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    9990:	a904      	add	r1, sp, #16
    9992:	9004      	str	r0, [sp, #16]
    9994:	f8cd 0013 	str.w	r0, [sp, #19]
    9998:	f7ff fe54 	bl	9644 <find_sc_cfg>
		if (!cfg) {
    999c:	4604      	mov	r4, r0
    999e:	b970      	cbnz	r0, 99be <sc_set+0xae>
    99a0:	4b17      	ldr	r3, [pc, #92]	; (9a00 <sc_set+0xf0>)
    99a2:	4916      	ldr	r1, [pc, #88]	; (99fc <sc_set+0xec>)
			BT_ERR("Unable to restore SC: no cfg left");
    99a4:	4819      	ldr	r0, [pc, #100]	; (9a0c <sc_set+0xfc>)
    99a6:	1ac9      	subs	r1, r1, r3
    99a8:	08c9      	lsrs	r1, r1, #3
    99aa:	0189      	lsls	r1, r1, #6
    99ac:	f041 0101 	orr.w	r1, r1, #1
    99b0:	f019 fe12 	bl	235d8 <log_0>
			return -ENOMEM;
    99b4:	f06f 050b 	mvn.w	r5, #11
    99b8:	e7be      	b.n	9938 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    99ba:	462f      	mov	r7, r5
    99bc:	e7e0      	b.n	9980 <sc_set+0x70>
		cfg->id = id;
    99be:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    99c2:	a902      	add	r1, sp, #8
    99c4:	f01b feca 	bl	2575c <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    99c8:	f104 0108 	add.w	r1, r4, #8
    99cc:	2204      	movs	r2, #4
    99ce:	4648      	mov	r0, r9
    99d0:	47c0      	blx	r8
		if (len < 0) {
    99d2:	1e04      	subs	r4, r0, #0
    99d4:	dab0      	bge.n	9938 <sc_set+0x28>
    99d6:	4b0a      	ldr	r3, [pc, #40]	; (9a00 <sc_set+0xf0>)
    99d8:	4a08      	ldr	r2, [pc, #32]	; (99fc <sc_set+0xec>)
			BT_ERR("Failed to decode value (err %zd)", len);
    99da:	480d      	ldr	r0, [pc, #52]	; (9a10 <sc_set+0x100>)
    99dc:	1ad2      	subs	r2, r2, r3
    99de:	08d2      	lsrs	r2, r2, #3
    99e0:	0192      	lsls	r2, r2, #6
    99e2:	f042 0201 	orr.w	r2, r2, #1
    99e6:	4621      	mov	r1, r4
    99e8:	f019 fe03 	bl	235f2 <log_1>
			return len;
    99ec:	4625      	mov	r5, r4
    99ee:	e7a3      	b.n	9938 <sc_set+0x28>
	if (len_rd) {
    99f0:	2e00      	cmp	r6, #0
    99f2:	d1e9      	bne.n	99c8 <sc_set+0xb8>
    99f4:	6026      	str	r6, [r4, #0]
    99f6:	6066      	str	r6, [r4, #4]
    99f8:	60a6      	str	r6, [r4, #8]
    99fa:	e79d      	b.n	9938 <sc_set+0x28>
    99fc:	0002c008 	.word	0x0002c008
    9a00:	0002bf50 	.word	0x0002bf50
    9a04:	0002e8b0 	.word	0x0002e8b0
    9a08:	0002f636 	.word	0x0002f636
    9a0c:	0002f652 	.word	0x0002f652
    9a10:	0002f5c0 	.word	0x0002f5c0

00009a14 <bt_gatt_clear_sc>:
{
    9a14:	b570      	push	{r4, r5, r6, lr}
    9a16:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    9a18:	f7ff fe14 	bl	9644 <find_sc_cfg>
	if (!cfg) {
    9a1c:	4604      	mov	r4, r0
    9a1e:	b308      	cbz	r0, 9a64 <bt_gatt_clear_sc+0x50>
		if (cfg->id) {
    9a20:	4605      	mov	r5, r0
    9a22:	f815 2b01 	ldrb.w	r2, [r5], #1
    9a26:	b302      	cbz	r2, 9a6a <bt_gatt_clear_sc+0x56>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    9a28:	ae02      	add	r6, sp, #8
    9a2a:	2104      	movs	r1, #4
    9a2c:	4630      	mov	r0, r6
    9a2e:	f019 f909 	bl	22c44 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    9a32:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    9a34:	2124      	movs	r1, #36	; 0x24
    9a36:	4a0e      	ldr	r2, [pc, #56]	; (9a70 <bt_gatt_clear_sc+0x5c>)
    9a38:	462b      	mov	r3, r5
    9a3a:	a803      	add	r0, sp, #12
    9a3c:	f7fb fba4 	bl	5188 <bt_settings_encode_key>
		err = settings_delete(key);
    9a40:	a803      	add	r0, sp, #12
    9a42:	f01a f8b4 	bl	23bae <settings_delete>
		if (err) {
    9a46:	4601      	mov	r1, r0
    9a48:	b148      	cbz	r0, 9a5e <bt_gatt_clear_sc+0x4a>
    9a4a:	4a0a      	ldr	r2, [pc, #40]	; (9a74 <bt_gatt_clear_sc+0x60>)
    9a4c:	4b0a      	ldr	r3, [pc, #40]	; (9a78 <bt_gatt_clear_sc+0x64>)
			BT_ERR("failed to delete SC (err %d)", err);
    9a4e:	480b      	ldr	r0, [pc, #44]	; (9a7c <bt_gatt_clear_sc+0x68>)
    9a50:	1ad2      	subs	r2, r2, r3
    9a52:	08d2      	lsrs	r2, r2, #3
    9a54:	0192      	lsls	r2, r2, #6
    9a56:	f042 0201 	orr.w	r2, r2, #1
    9a5a:	f019 fdca 	bl	235f2 <log_1>
	clear_sc_cfg(cfg);
    9a5e:	4620      	mov	r0, r4
    9a60:	f01b fe9d 	bl	2579e <clear_sc_cfg>
}
    9a64:	2000      	movs	r0, #0
    9a66:	b00c      	add	sp, #48	; 0x30
    9a68:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    9a6a:	9200      	str	r2, [sp, #0]
    9a6c:	e7e2      	b.n	9a34 <bt_gatt_clear_sc+0x20>
    9a6e:	bf00      	nop
    9a70:	0002f8a3 	.word	0x0002f8a3
    9a74:	0002c008 	.word	0x0002c008
    9a78:	0002bf50 	.word	0x0002bf50
    9a7c:	0002f674 	.word	0x0002f674

00009a80 <sc_clear>:
{
    9a80:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9a82:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    9a86:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9a88:	4629      	mov	r1, r5
    9a8a:	7a00      	ldrb	r0, [r0, #8]
    9a8c:	f01a ff8a 	bl	249a4 <bt_addr_le_is_bonded>
    9a90:	4603      	mov	r3, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    9a92:	4629      	mov	r1, r5
    9a94:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9a96:	b17b      	cbz	r3, 9ab8 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    9a98:	f7ff ffbc 	bl	9a14 <bt_gatt_clear_sc>
		if (err) {
    9a9c:	4601      	mov	r1, r0
    9a9e:	b190      	cbz	r0, 9ac6 <sc_clear+0x46>
    9aa0:	4b09      	ldr	r3, [pc, #36]	; (9ac8 <sc_clear+0x48>)
    9aa2:	4a0a      	ldr	r2, [pc, #40]	; (9acc <sc_clear+0x4c>)
			BT_ERR("Failed to clear SC %d", err);
    9aa4:	480a      	ldr	r0, [pc, #40]	; (9ad0 <sc_clear+0x50>)
    9aa6:	1ad2      	subs	r2, r2, r3
    9aa8:	08d2      	lsrs	r2, r2, #3
    9aaa:	0192      	lsls	r2, r2, #6
}
    9aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			BT_ERR("Failed to clear SC %d", err);
    9ab0:	f042 0201 	orr.w	r2, r2, #1
    9ab4:	f019 bd9d 	b.w	235f2 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9ab8:	f7ff fdc4 	bl	9644 <find_sc_cfg>
		if (cfg) {
    9abc:	b118      	cbz	r0, 9ac6 <sc_clear+0x46>
}
    9abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
    9ac2:	f01b be6c 	b.w	2579e <clear_sc_cfg>
}
    9ac6:	bd38      	pop	{r3, r4, r5, pc}
    9ac8:	0002bf50 	.word	0x0002bf50
    9acc:	0002c008 	.word	0x0002c008
    9ad0:	0002f691 	.word	0x0002f691

00009ad4 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    9ad4:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ad6:	6881      	ldr	r1, [r0, #8]
{
    9ad8:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ada:	4a07      	ldr	r2, [pc, #28]	; (9af8 <remove_peer_from_attr+0x24>)
    9adc:	4291      	cmp	r1, r2
    9ade:	d109      	bne.n	9af4 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    9ae0:	791a      	ldrb	r2, [r3, #4]
    9ae2:	6819      	ldr	r1, [r3, #0]
    9ae4:	68c0      	ldr	r0, [r0, #12]
    9ae6:	f01b fe01 	bl	256ec <ccc_find_cfg>
	if (cfg) {
    9aea:	b118      	cbz	r0, 9af4 <remove_peer_from_attr+0x20>
    9aec:	2300      	movs	r3, #0
    9aee:	6003      	str	r3, [r0, #0]
    9af0:	6043      	str	r3, [r0, #4]
    9af2:	8103      	strh	r3, [r0, #8]
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
    9af4:	2001      	movs	r0, #1
    9af6:	bd08      	pop	{r3, pc}
    9af8:	0000973d 	.word	0x0000973d

00009afc <disconnected_cb>:
{
    9afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b00:	4b1f      	ldr	r3, [pc, #124]	; (9b80 <disconnected_cb+0x84>)
{
    9b02:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b04:	6882      	ldr	r2, [r0, #8]
    9b06:	429a      	cmp	r2, r3
{
    9b08:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b0a:	d102      	bne.n	9b12 <disconnected_cb+0x16>
	ccc = attr->user_data;
    9b0c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    9b0e:	8963      	ldrh	r3, [r4, #10]
    9b10:	b9c3      	cbnz	r3, 9b44 <disconnected_cb+0x48>
}
    9b12:	2001      	movs	r0, #1
    9b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9b18:	f105 0888 	add.w	r8, r5, #136	; 0x88
    9b1c:	7a28      	ldrb	r0, [r5, #8]
    9b1e:	4641      	mov	r1, r8
    9b20:	f01a ff40 	bl	249a4 <bt_addr_le_is_bonded>
    9b24:	b948      	cbnz	r0, 9b3a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    9b26:	4b17      	ldr	r3, [pc, #92]	; (9b84 <disconnected_cb+0x88>)
    9b28:	429c      	cmp	r4, r3
    9b2a:	d102      	bne.n	9b32 <disconnected_cb+0x36>
					sc_clear(conn);
    9b2c:	4628      	mov	r0, r5
    9b2e:	f7ff ffa7 	bl	9a80 <sc_clear>
				clear_ccc_cfg(cfg);
    9b32:	4620      	mov	r0, r4
    9b34:	f01b fe19 	bl	2576a <clear_ccc_cfg>
	if (!value_used) {
    9b38:	e019      	b.n	9b6e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9b3a:	4641      	mov	r1, r8
    9b3c:	4638      	mov	r0, r7
    9b3e:	f01b fe0d 	bl	2575c <bt_addr_le_copy>
	if (!value_used) {
    9b42:	e014      	b.n	9b6e <disconnected_cb+0x72>
		if (!cfg->value) {
    9b44:	8923      	ldrh	r3, [r4, #8]
    9b46:	b193      	cbz	r3, 9b6e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9b48:	4627      	mov	r7, r4
    9b4a:	4628      	mov	r0, r5
    9b4c:	f817 1b01 	ldrb.w	r1, [r7], #1
    9b50:	463a      	mov	r2, r7
    9b52:	f01a fff2 	bl	24b3a <bt_conn_is_peer_addr_le>
    9b56:	2800      	cmp	r0, #0
    9b58:	d1de      	bne.n	9b18 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9b5a:	7820      	ldrb	r0, [r4, #0]
    9b5c:	4639      	mov	r1, r7
    9b5e:	f7fe f815 	bl	7b8c <bt_conn_lookup_addr_le>
			if (tmp) {
    9b62:	b120      	cbz	r0, 9b6e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    9b64:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
    9b66:	f01b f823 	bl	24bb0 <bt_conn_unref>
	if (!value_used) {
    9b6a:	2d07      	cmp	r5, #7
    9b6c:	d0d1      	beq.n	9b12 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    9b6e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    9b70:	2100      	movs	r1, #0
    9b72:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    9b74:	2b00      	cmp	r3, #0
    9b76:	d0cc      	beq.n	9b12 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    9b78:	4630      	mov	r0, r6
    9b7a:	4798      	blx	r3
    9b7c:	e7c9      	b.n	9b12 <disconnected_cb+0x16>
    9b7e:	bf00      	nop
    9b80:	0000973d 	.word	0x0000973d
    9b84:	200003f0 	.word	0x200003f0

00009b88 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    9b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b8c:	4606      	mov	r6, r0
    9b8e:	4688      	mov	r8, r1
    9b90:	4617      	mov	r7, r2
	if (params) {
    9b92:	461c      	mov	r4, r3
    9b94:	b34b      	cbz	r3, 9bea <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9b96:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9b9a:	2100      	movs	r1, #0
    9b9c:	f7ff fb86 	bl	92ac <bt_att_req_alloc>
		if (!req) {
    9ba0:	4605      	mov	r5, r0
    9ba2:	b920      	cbnz	r0, 9bae <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    9ba4:	f06f 040b 	mvn.w	r4, #11
}
    9ba8:	4620      	mov	r0, r4
    9baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    9bae:	2300      	movs	r3, #0
		req->user_data = params;
    9bb0:	6144      	str	r4, [r0, #20]
		req->buf = buf;
    9bb2:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    9bb6:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    9bb8:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    9bba:	4601      	mov	r1, r0
    9bbc:	4630      	mov	r0, r6
    9bbe:	f01b fcab 	bl	25518 <bt_att_req_send>
		if (err) {
    9bc2:	4604      	mov	r4, r0
    9bc4:	2800      	cmp	r0, #0
    9bc6:	d0ef      	beq.n	9ba8 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    9bc8:	4628      	mov	r0, r5
    9bca:	f7ff fb85 	bl	92d8 <bt_att_req_free>
	if (err) {
    9bce:	2c00      	cmp	r4, #0
    9bd0:	d0ea      	beq.n	9ba8 <gatt_send.constprop.0+0x20>
    9bd2:	4b08      	ldr	r3, [pc, #32]	; (9bf4 <gatt_send.constprop.0+0x6c>)
    9bd4:	4a08      	ldr	r2, [pc, #32]	; (9bf8 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    9bd6:	4809      	ldr	r0, [pc, #36]	; (9bfc <gatt_send.constprop.0+0x74>)
    9bd8:	1ad2      	subs	r2, r2, r3
    9bda:	08d2      	lsrs	r2, r2, #3
    9bdc:	0192      	lsls	r2, r2, #6
    9bde:	f042 0201 	orr.w	r2, r2, #1
    9be2:	4621      	mov	r1, r4
    9be4:	f019 fd05 	bl	235f2 <log_1>
    9be8:	e7de      	b.n	9ba8 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    9bea:	461a      	mov	r2, r3
    9bec:	f01b fc4a 	bl	25484 <bt_att_send>
    9bf0:	4604      	mov	r4, r0
    9bf2:	e7ec      	b.n	9bce <gatt_send.constprop.0+0x46>
    9bf4:	0002bf50 	.word	0x0002bf50
    9bf8:	0002c008 	.word	0x0002c008
    9bfc:	0002f6a7 	.word	0x0002f6a7

00009c00 <gatt_indicate>:
{
    9c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c04:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    9c06:	8a92      	ldrh	r2, [r2, #20]
{
    9c08:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9c0a:	3202      	adds	r2, #2
    9c0c:	211d      	movs	r1, #29
{
    9c0e:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    9c10:	f7ff f80c 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    9c14:	4605      	mov	r5, r0
    9c16:	b1e8      	cbz	r0, 9c54 <gatt_indicate+0x54>
	return net_buf_simple_add(&buf->b, len);
    9c18:	f100 0808 	add.w	r8, r0, #8
    9c1c:	2102      	movs	r1, #2
    9c1e:	4640      	mov	r0, r8
    9c20:	f01c f912 	bl	25e48 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    9c24:	4606      	mov	r6, r0
    9c26:	8aa1      	ldrh	r1, [r4, #20]
    9c28:	f826 9b02 	strh.w	r9, [r6], #2
    9c2c:	4640      	mov	r0, r8
    9c2e:	f01c f90b 	bl	25e48 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9c32:	8aa2      	ldrh	r2, [r4, #20]
    9c34:	6921      	ldr	r1, [r4, #16]
    9c36:	4630      	mov	r0, r6
    9c38:	f021 fd8f 	bl	2b75a <memcpy>
	if (!params->func) {
    9c3c:	68a3      	ldr	r3, [r4, #8]
    9c3e:	b933      	cbnz	r3, 9c4e <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    9c40:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9c42:	4629      	mov	r1, r5
    9c44:	4638      	mov	r0, r7
}
    9c46:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9c4a:	f7ff bf9d 	b.w	9b88 <gatt_send.constprop.0>
    9c4e:	4a08      	ldr	r2, [pc, #32]	; (9c70 <gatt_indicate+0x70>)
    9c50:	4623      	mov	r3, r4
    9c52:	e7f6      	b.n	9c42 <gatt_indicate+0x42>
    9c54:	4b07      	ldr	r3, [pc, #28]	; (9c74 <gatt_indicate+0x74>)
    9c56:	4908      	ldr	r1, [pc, #32]	; (9c78 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    9c58:	4808      	ldr	r0, [pc, #32]	; (9c7c <gatt_indicate+0x7c>)
    9c5a:	1ac9      	subs	r1, r1, r3
    9c5c:	08c9      	lsrs	r1, r1, #3
    9c5e:	0189      	lsls	r1, r1, #6
    9c60:	f041 0102 	orr.w	r1, r1, #2
    9c64:	f019 fcb8 	bl	235d8 <log_0>
}
    9c68:	f06f 000b 	mvn.w	r0, #11
    9c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9c70:	00025599 	.word	0x00025599
    9c74:	0002bf50 	.word	0x0002bf50
    9c78:	0002c008 	.word	0x0002c008
    9c7c:	0002f6c1 	.word	0x0002f6c1

00009c80 <read_ppcp>:
{
    9c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9c82:	4610      	mov	r0, r2
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    9c84:	4a07      	ldr	r2, [pc, #28]	; (9ca4 <read_ppcp+0x24>)
{
    9c86:	4619      	mov	r1, r3
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    9c88:	f44f 1328 	mov.w	r3, #2752512	; 0x2a0000
    9c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    9c90:	2308      	movs	r3, #8
    9c92:	9300      	str	r3, [sp, #0]
    9c94:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    9c98:	446b      	add	r3, sp
    9c9a:	f01b fd94 	bl	257c6 <bt_gatt_attr_read.constprop.0>
}
    9c9e:	b005      	add	sp, #20
    9ca0:	f85d fb04 	ldr.w	pc, [sp], #4
    9ca4:	00280018 	.word	0x00280018

00009ca8 <cf_set>:
{
    9ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9cac:	460f      	mov	r7, r1
    9cae:	b085      	sub	sp, #20
    9cb0:	4690      	mov	r8, r2
    9cb2:	4699      	mov	r9, r3
	if (!name) {
    9cb4:	4606      	mov	r6, r0
    9cb6:	b978      	cbnz	r0, 9cd8 <cf_set+0x30>
    9cb8:	4936      	ldr	r1, [pc, #216]	; (9d94 <cf_set+0xec>)
    9cba:	4b37      	ldr	r3, [pc, #220]	; (9d98 <cf_set+0xf0>)
		BT_ERR("Insufficient number of arguments");
    9cbc:	4837      	ldr	r0, [pc, #220]	; (9d9c <cf_set+0xf4>)
    9cbe:	1ac9      	subs	r1, r1, r3
    9cc0:	08c9      	lsrs	r1, r1, #3
    9cc2:	0189      	lsls	r1, r1, #6
    9cc4:	f041 0101 	orr.w	r1, r1, #1
    9cc8:	f019 fc86 	bl	235d8 <log_0>
		return -EINVAL;
    9ccc:	f06f 0515 	mvn.w	r5, #21
}
    9cd0:	4628      	mov	r0, r5
    9cd2:	b005      	add	sp, #20
    9cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    9cd8:	a902      	add	r1, sp, #8
    9cda:	f01a fcf7 	bl	246cc <bt_settings_decode_key>
	if (err) {
    9cde:	4605      	mov	r5, r0
    9ce0:	b178      	cbz	r0, 9d02 <cf_set+0x5a>
    9ce2:	4a2d      	ldr	r2, [pc, #180]	; (9d98 <cf_set+0xf0>)
    9ce4:	4c2b      	ldr	r4, [pc, #172]	; (9d94 <cf_set+0xec>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    9ce6:	4630      	mov	r0, r6
    9ce8:	1aa4      	subs	r4, r4, r2
    9cea:	08e4      	lsrs	r4, r4, #3
    9cec:	f7f8 ff44 	bl	2b78 <log_strdup>
    9cf0:	01a4      	lsls	r4, r4, #6
    9cf2:	f044 0401 	orr.w	r4, r4, #1
    9cf6:	4601      	mov	r1, r0
    9cf8:	4622      	mov	r2, r4
    9cfa:	4829      	ldr	r0, [pc, #164]	; (9da0 <cf_set+0xf8>)
    9cfc:	f019 fc79 	bl	235f2 <log_1>
    9d00:	e7e4      	b.n	9ccc <cf_set+0x24>
	settings_name_next(name, &next);
    9d02:	a901      	add	r1, sp, #4
    9d04:	4630      	mov	r0, r6
    9d06:	f019 ff79 	bl	23bfc <settings_name_next>
	if (!next) {
    9d0a:	9801      	ldr	r0, [sp, #4]
    9d0c:	b310      	cbz	r0, 9d54 <cf_set+0xac>
		id = strtol(next, NULL, 10);
    9d0e:	220a      	movs	r2, #10
    9d10:	4629      	mov	r1, r5
    9d12:	f017 fea1 	bl	21a58 <strtol>
    9d16:	b2c6      	uxtb	r6, r0
			if (id == cf_cfg[i].id &&
    9d18:	4c22      	ldr	r4, [pc, #136]	; (9da4 <cf_set+0xfc>)
    9d1a:	7823      	ldrb	r3, [r4, #0]
    9d1c:	42b3      	cmp	r3, r6
    9d1e:	d126      	bne.n	9d6e <cf_set+0xc6>
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
    9d20:	1c61      	adds	r1, r4, #1
    9d22:	a802      	add	r0, sp, #8
    9d24:	f01b fcc7 	bl	256b6 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
    9d28:	bb08      	cbnz	r0, 9d6e <cf_set+0xc6>
	if (len_rd) {
    9d2a:	b1e7      	cbz	r7, 9d66 <cf_set+0xbe>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    9d2c:	f104 0108 	add.w	r1, r4, #8
    9d30:	2201      	movs	r2, #1
    9d32:	4648      	mov	r0, r9
    9d34:	47c0      	blx	r8
		if (len < 0) {
    9d36:	1e04      	subs	r4, r0, #0
    9d38:	daca      	bge.n	9cd0 <cf_set+0x28>
    9d3a:	4b17      	ldr	r3, [pc, #92]	; (9d98 <cf_set+0xf0>)
    9d3c:	4a15      	ldr	r2, [pc, #84]	; (9d94 <cf_set+0xec>)
			BT_ERR("Failed to decode value (err %zd)", len);
    9d3e:	481a      	ldr	r0, [pc, #104]	; (9da8 <cf_set+0x100>)
    9d40:	1ad2      	subs	r2, r2, r3
    9d42:	08d2      	lsrs	r2, r2, #3
    9d44:	0192      	lsls	r2, r2, #6
    9d46:	f042 0201 	orr.w	r2, r2, #1
    9d4a:	4621      	mov	r1, r4
    9d4c:	f019 fc51 	bl	235f2 <log_1>
			return len;
    9d50:	4625      	mov	r5, r4
    9d52:	e7bd      	b.n	9cd0 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    9d54:	462e      	mov	r6, r5
    9d56:	e7df      	b.n	9d18 <cf_set+0x70>
		cfg->id = id;
    9d58:	4620      	mov	r0, r4
		bt_addr_le_copy(&cfg->peer, &addr);
    9d5a:	a902      	add	r1, sp, #8
		cfg->id = id;
    9d5c:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    9d60:	f01b fcfc 	bl	2575c <bt_addr_le_copy>
    9d64:	e7e1      	b.n	9d2a <cf_set+0x82>
		clear_cf_cfg(cfg);
    9d66:	4620      	mov	r0, r4
    9d68:	f01b fdb0 	bl	258cc <clear_cf_cfg>
    9d6c:	e7b0      	b.n	9cd0 <cf_set+0x28>
		cfg = find_cf_cfg(NULL);
    9d6e:	2000      	movs	r0, #0
    9d70:	f7ff fc4a 	bl	9608 <find_cf_cfg>
		if (!cfg) {
    9d74:	4604      	mov	r4, r0
    9d76:	2800      	cmp	r0, #0
    9d78:	d1ee      	bne.n	9d58 <cf_set+0xb0>
    9d7a:	4b07      	ldr	r3, [pc, #28]	; (9d98 <cf_set+0xf0>)
    9d7c:	4905      	ldr	r1, [pc, #20]	; (9d94 <cf_set+0xec>)
			BT_ERR("Unable to restore CF: no cfg left");
    9d7e:	480b      	ldr	r0, [pc, #44]	; (9dac <cf_set+0x104>)
    9d80:	1ac9      	subs	r1, r1, r3
    9d82:	08c9      	lsrs	r1, r1, #3
    9d84:	0189      	lsls	r1, r1, #6
    9d86:	f041 0101 	orr.w	r1, r1, #1
    9d8a:	f019 fc25 	bl	235d8 <log_0>
			return -ENOMEM;
    9d8e:	f06f 050b 	mvn.w	r5, #11
    9d92:	e79d      	b.n	9cd0 <cf_set+0x28>
    9d94:	0002c008 	.word	0x0002c008
    9d98:	0002bf50 	.word	0x0002bf50
    9d9c:	0002e8b0 	.word	0x0002e8b0
    9da0:	0002f636 	.word	0x0002f636
    9da4:	200029c4 	.word	0x200029c4
    9da8:	0002f5c0 	.word	0x0002f5c0
    9dac:	0002f6e8 	.word	0x0002f6e8

00009db0 <sc_commit>:
{
    9db0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9db2:	4c0c      	ldr	r4, [pc, #48]	; (9de4 <sc_commit+0x34>)
    9db4:	f06f 0102 	mvn.w	r1, #2
    9db8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    9dbc:	f01b fca4 	bl	25708 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9dc0:	f3bf 8f5b 	dmb	ish
    9dc4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9dc6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9dca:	07db      	lsls	r3, r3, #31
    9dcc:	d507      	bpl.n	9dde <sc_commit+0x2e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9dce:	4806      	ldr	r0, [pc, #24]	; (9de8 <sc_commit+0x38>)
    9dd0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9dd4:	2300      	movs	r3, #0
    9dd6:	f104 0120 	add.w	r1, r4, #32
    9dda:	f016 faaf 	bl	2033c <k_delayed_work_submit_to_queue>
}
    9dde:	2000      	movs	r0, #0
    9de0:	bd10      	pop	{r4, pc}
    9de2:	bf00      	nop
    9de4:	200010c8 	.word	0x200010c8
    9de8:	20001438 	.word	0x20001438

00009dec <gatt_write_ccc.constprop.0>:
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    9dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9df0:	4688      	mov	r8, r1
    9df2:	4617      	mov	r7, r2
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    9df4:	2112      	movs	r1, #18
    9df6:	2204      	movs	r2, #4
static int gatt_write_ccc(struct bt_conn *conn, uint16_t handle, uint16_t value,
    9df8:	4606      	mov	r6, r0
    9dfa:	461d      	mov	r5, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_REQ,
    9dfc:	f7fe ff16 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    9e00:	4604      	mov	r4, r0
    9e02:	b308      	cbz	r0, 9e48 <gatt_write_ccc.constprop.0+0x5c>
    9e04:	f100 0908 	add.w	r9, r0, #8
    9e08:	2102      	movs	r1, #2
    9e0a:	4648      	mov	r0, r9
    9e0c:	f01c f81c 	bl	25e48 <net_buf_simple_add>
	net_buf_simple_add_le16(&buf->b, val);
    9e10:	4639      	mov	r1, r7
	req->handle = sys_cpu_to_le16(handle);
    9e12:	f8a0 8000 	strh.w	r8, [r0]
    9e16:	4648      	mov	r0, r9
    9e18:	f01c f82e 	bl	25e78 <net_buf_simple_add_le16>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9e1c:	f3bf 8f5b 	dmb	ish
    9e20:	f105 0310 	add.w	r3, r5, #16
    9e24:	e853 2f00 	ldrex	r2, [r3]
    9e28:	f042 0204 	orr.w	r2, r2, #4
    9e2c:	e843 2100 	strex	r1, r2, [r3]
    9e30:	2900      	cmp	r1, #0
    9e32:	d1f7      	bne.n	9e24 <gatt_write_ccc.constprop.0+0x38>
    9e34:	f3bf 8f5b 	dmb	ish
	return gatt_send(conn, buf, func, params, NULL);
    9e38:	462b      	mov	r3, r5
    9e3a:	4621      	mov	r1, r4
    9e3c:	4630      	mov	r0, r6
    9e3e:	4a04      	ldr	r2, [pc, #16]	; (9e50 <gatt_write_ccc.constprop.0+0x64>)
}
    9e40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, func, params, NULL);
    9e44:	f7ff bea0 	b.w	9b88 <gatt_send.constprop.0>
}
    9e48:	f06f 000b 	mvn.w	r0, #11
    9e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9e50:	00025975 	.word	0x00025975

00009e54 <cf_write>:
{
    9e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e58:	461f      	mov	r7, r3
    9e5a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    9e5e:	2b01      	cmp	r3, #1
{
    9e60:	4680      	mov	r8, r0
    9e62:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    9e64:	d847      	bhi.n	9ef6 <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    9e66:	443b      	add	r3, r7
    9e68:	2b01      	cmp	r3, #1
    9e6a:	463d      	mov	r5, r7
    9e6c:	dc46      	bgt.n	9efc <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    9e6e:	f7ff fbcb 	bl	9608 <find_cf_cfg>
	if (!cfg) {
    9e72:	4604      	mov	r4, r0
    9e74:	b990      	cbnz	r0, 9e9c <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    9e76:	f7ff fbc7 	bl	9608 <find_cf_cfg>
	if (!cfg) {
    9e7a:	4604      	mov	r4, r0
    9e7c:	b970      	cbnz	r0, 9e9c <cf_write+0x48>
    9e7e:	4b22      	ldr	r3, [pc, #136]	; (9f08 <cf_write+0xb4>)
    9e80:	4922      	ldr	r1, [pc, #136]	; (9f0c <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    9e82:	4823      	ldr	r0, [pc, #140]	; (9f10 <cf_write+0xbc>)
    9e84:	1ac9      	subs	r1, r1, r3
    9e86:	08c9      	lsrs	r1, r1, #3
    9e88:	0189      	lsls	r1, r1, #6
    9e8a:	f041 0102 	orr.w	r1, r1, #2
    9e8e:	f019 fba3 	bl	235d8 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    9e92:	f06f 0510 	mvn.w	r5, #16
}
    9e96:	4628      	mov	r0, r5
    9e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    9e9c:	4632      	mov	r2, r6
    9e9e:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    9ea2:	4562      	cmp	r2, ip
    9ea4:	d114      	bne.n	9ed0 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    9ea6:	b12f      	cbz	r7, 9eb4 <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    9ea8:	7833      	ldrb	r3, [r6, #0]
    9eaa:	7a22      	ldrb	r2, [r4, #8]
    9eac:	f003 0307 	and.w	r3, r3, #7
    9eb0:	4313      	orrs	r3, r2
    9eb2:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9eb4:	f108 0188 	add.w	r1, r8, #136	; 0x88
    9eb8:	1c60      	adds	r0, r4, #1
    9eba:	f01b fc4f 	bl	2575c <bt_addr_le_copy>
	cfg->id = conn->id;
    9ebe:	4620      	mov	r0, r4
    9ec0:	f898 3008 	ldrb.w	r3, [r8, #8]
    9ec4:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9ec8:	2100      	movs	r1, #0
    9eca:	f01b fd17 	bl	258fc <atomic_set_bit>
	return len;
    9ece:	e7e2      	b.n	9e96 <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    9ed0:	f812 1b01 	ldrb.w	r1, [r2], #1
    9ed4:	7a20      	ldrb	r0, [r4, #8]
    9ed6:	2300      	movs	r3, #0
    9ed8:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    9eda:	fa21 fe03 	lsr.w	lr, r1, r3
    9ede:	f01e 0f01 	tst.w	lr, #1
    9ee2:	d004      	beq.n	9eee <cf_write+0x9a>
    9ee4:	fa20 fe03 	lsr.w	lr, r0, r3
    9ee8:	f01e 0f01 	tst.w	lr, #1
    9eec:	d109      	bne.n	9f02 <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    9eee:	3301      	adds	r3, #1
    9ef0:	2b03      	cmp	r3, #3
    9ef2:	d1f2      	bne.n	9eda <cf_write+0x86>
    9ef4:	e7d5      	b.n	9ea2 <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9ef6:	f06f 0506 	mvn.w	r5, #6
    9efa:	e7cc      	b.n	9e96 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    9efc:	f06f 050c 	mvn.w	r5, #12
    9f00:	e7c9      	b.n	9e96 <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    9f02:	f06f 0512 	mvn.w	r5, #18
    9f06:	e7c6      	b.n	9e96 <cf_write+0x42>
    9f08:	0002bf50 	.word	0x0002bf50
    9f0c:	0002c008 	.word	0x0002c008
    9f10:	0002f70a 	.word	0x0002f70a

00009f14 <sc_indicate_rsp>:
{
    9f14:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f16:	4d12      	ldr	r5, [pc, #72]	; (9f60 <sc_indicate_rsp+0x4c>)
    9f18:	4604      	mov	r4, r0
    9f1a:	f06f 0102 	mvn.w	r1, #2
    9f1e:	f105 0050 	add.w	r0, r5, #80	; 0x50
    9f22:	f01b fbf1 	bl	25708 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f26:	f3bf 8f5b 	dmb	ish
    9f2a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    9f2c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9f30:	07da      	lsls	r2, r3, #31
    9f32:	d506      	bpl.n	9f42 <sc_indicate_rsp+0x2e>
    9f34:	480b      	ldr	r0, [pc, #44]	; (9f64 <sc_indicate_rsp+0x50>)
    9f36:	2200      	movs	r2, #0
    9f38:	2300      	movs	r3, #0
    9f3a:	f105 0120 	add.w	r1, r5, #32
    9f3e:	f016 f9fd 	bl	2033c <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    9f42:	4620      	mov	r0, r4
    9f44:	f7ff fb60 	bl	9608 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    9f48:	b140      	cbz	r0, 9f5c <sc_indicate_rsp+0x48>
    9f4a:	7a03      	ldrb	r3, [r0, #8]
    9f4c:	07db      	lsls	r3, r3, #31
    9f4e:	d505      	bpl.n	9f5c <sc_indicate_rsp+0x48>
}
    9f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9f54:	2100      	movs	r1, #0
    9f56:	300c      	adds	r0, #12
    9f58:	f01b bcd0 	b.w	258fc <atomic_set_bit>
}
    9f5c:	bd38      	pop	{r3, r4, r5, pc}
    9f5e:	bf00      	nop
    9f60:	200010c8 	.word	0x200010c8
    9f64:	20001438 	.word	0x20001438

00009f68 <gatt_notify>:
{
    9f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9f6c:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    9f6e:	8992      	ldrh	r2, [r2, #12]
{
    9f70:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9f72:	3202      	adds	r2, #2
    9f74:	211b      	movs	r1, #27
{
    9f76:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    9f78:	f7fe fe58 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    9f7c:	4605      	mov	r5, r0
    9f7e:	b1c8      	cbz	r0, 9fb4 <gatt_notify+0x4c>
	return net_buf_simple_add(&buf->b, len);
    9f80:	f100 0908 	add.w	r9, r0, #8
    9f84:	2102      	movs	r1, #2
    9f86:	4648      	mov	r0, r9
    9f88:	f01b ff5e 	bl	25e48 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9f8c:	4606      	mov	r6, r0
    9f8e:	89a1      	ldrh	r1, [r4, #12]
    9f90:	f826 8b02 	strh.w	r8, [r6], #2
    9f94:	4648      	mov	r0, r9
    9f96:	f01b ff57 	bl	25e48 <net_buf_simple_add>
    9f9a:	89a2      	ldrh	r2, [r4, #12]
    9f9c:	68a1      	ldr	r1, [r4, #8]
    9f9e:	4630      	mov	r0, r6
    9fa0:	f021 fbdb 	bl	2b75a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    9fa4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    9fa8:	4629      	mov	r1, r5
    9faa:	4638      	mov	r0, r7
}
    9fac:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    9fb0:	f01b ba68 	b.w	25484 <bt_att_send>
    9fb4:	4b06      	ldr	r3, [pc, #24]	; (9fd0 <gatt_notify+0x68>)
    9fb6:	4907      	ldr	r1, [pc, #28]	; (9fd4 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    9fb8:	4807      	ldr	r0, [pc, #28]	; (9fd8 <gatt_notify+0x70>)
    9fba:	1ac9      	subs	r1, r1, r3
    9fbc:	08c9      	lsrs	r1, r1, #3
    9fbe:	0189      	lsls	r1, r1, #6
    9fc0:	f041 0102 	orr.w	r1, r1, #2
    9fc4:	f019 fb08 	bl	235d8 <log_0>
}
    9fc8:	f06f 000b 	mvn.w	r0, #11
    9fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9fd0:	0002bf50 	.word	0x0002bf50
    9fd4:	0002c008 	.word	0x0002c008
    9fd8:	0002f736 	.word	0x0002f736

00009fdc <notify_cb>:
{
    9fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9fde:	4b2e      	ldr	r3, [pc, #184]	; (a098 <notify_cb+0xbc>)
{
    9fe0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9fe2:	6882      	ldr	r2, [r0, #8]
    9fe4:	429a      	cmp	r2, r3
{
    9fe6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9fe8:	d12d      	bne.n	a046 <notify_cb+0x6a>
	ccc = attr->user_data;
    9fea:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    9fec:	4b2b      	ldr	r3, [pc, #172]	; (a09c <notify_cb+0xc0>)
    9fee:	429f      	cmp	r7, r3
    9ff0:	d119      	bne.n	a026 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9ff2:	4d2b      	ldr	r5, [pc, #172]	; (a0a0 <notify_cb+0xc4>)
    9ff4:	2300      	movs	r3, #0
    9ff6:	4669      	mov	r1, sp
    9ff8:	1c68      	adds	r0, r5, #1
    9ffa:	9300      	str	r3, [sp, #0]
    9ffc:	f8cd 3003 	str.w	r3, [sp, #3]
    a000:	f01b fb59 	bl	256b6 <bt_addr_le_cmp>
    a004:	b178      	cbz	r0, a026 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    a006:	4629      	mov	r1, r5
    a008:	2207      	movs	r2, #7
    a00a:	f811 0b01 	ldrb.w	r0, [r1], #1
    a00e:	f7fd fe01 	bl	7c14 <bt_conn_lookup_state_le>
			if (!conn) {
    a012:	b9d8      	cbnz	r0, a04c <notify_cb+0x70>
				sc = (struct sc_data *)data->ind_params->data;
    a014:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    a016:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
    a018:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    a01a:	f811 0b01 	ldrb.w	r0, [r1], #1
    a01e:	8853      	ldrh	r3, [r2, #2]
    a020:	8812      	ldrh	r2, [r2, #0]
    a022:	f7ff fbed 	bl	9800 <sc_save>
		if (cfg->value != data->type) {
    a026:	893a      	ldrh	r2, [r7, #8]
    a028:	89a3      	ldrh	r3, [r4, #12]
    a02a:	429a      	cmp	r2, r3
    a02c:	d10b      	bne.n	a046 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    a02e:	4639      	mov	r1, r7
    a030:	f811 0b01 	ldrb.w	r0, [r1], #1
    a034:	f7fd fdaa 	bl	7b8c <bt_conn_lookup_addr_le>
		if (!conn) {
    a038:	4605      	mov	r5, r0
    a03a:	b120      	cbz	r0, a046 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
    a03c:	7a83      	ldrb	r3, [r0, #10]
    a03e:	2b07      	cmp	r3, #7
    a040:	d007      	beq.n	a052 <notify_cb+0x76>
			bt_conn_unref(conn);
    a042:	f01a fdb5 	bl	24bb0 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    a046:	2001      	movs	r0, #1
}
    a048:	b003      	add	sp, #12
    a04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
    a04c:	f01a fdb0 	bl	24bb0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    a050:	e7e9      	b.n	a026 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    a052:	697b      	ldr	r3, [r7, #20]
    a054:	b123      	cbz	r3, a060 <notify_cb+0x84>
    a056:	4631      	mov	r1, r6
    a058:	4798      	blx	r3
    a05a:	b908      	cbnz	r0, a060 <notify_cb+0x84>
			bt_conn_unref(conn);
    a05c:	4628      	mov	r0, r5
    a05e:	e7f0      	b.n	a042 <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a060:	89a3      	ldrh	r3, [r4, #12]
    a062:	88a1      	ldrh	r1, [r4, #4]
    a064:	6922      	ldr	r2, [r4, #16]
    a066:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    a068:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    a06a:	d110      	bne.n	a08e <notify_cb+0xb2>
			err = gatt_indicate(conn, data->handle,
    a06c:	f7ff fdc8 	bl	9c00 <gatt_indicate>
			if (err == 0) {
    a070:	4606      	mov	r6, r0
    a072:	b918      	cbnz	r0, a07c <notify_cb+0xa0>
				data->ind_params->_ref++;
    a074:	6922      	ldr	r2, [r4, #16]
    a076:	7d93      	ldrb	r3, [r2, #22]
    a078:	3301      	adds	r3, #1
    a07a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    a07c:	4628      	mov	r0, r5
    a07e:	f01a fd97 	bl	24bb0 <bt_conn_unref>
		if (err < 0) {
    a082:	2e00      	cmp	r6, #0
    a084:	f04f 0000 	mov.w	r0, #0
    a088:	dbde      	blt.n	a048 <notify_cb+0x6c>
		data->err = 0;
    a08a:	60a0      	str	r0, [r4, #8]
    a08c:	e7db      	b.n	a046 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    a08e:	f7ff ff6b 	bl	9f68 <gatt_notify>
    a092:	4606      	mov	r6, r0
    a094:	e7f2      	b.n	a07c <notify_cb+0xa0>
    a096:	bf00      	nop
    a098:	0000973d 	.word	0x0000973d
    a09c:	200003f0 	.word	0x200003f0
    a0a0:	200080c0 	.word	0x200080c0

0000a0a4 <bt_gatt_init>:
{
    a0a4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a0a6:	4b29      	ldr	r3, [pc, #164]	; (a14c <bt_gatt_init+0xa8>)
    a0a8:	f3bf 8f5b 	dmb	ish
    a0ac:	2201      	movs	r2, #1
    a0ae:	e853 1f00 	ldrex	r1, [r3]
    a0b2:	2900      	cmp	r1, #0
    a0b4:	d103      	bne.n	a0be <bt_gatt_init+0x1a>
    a0b6:	e843 2000 	strex	r0, r2, [r3]
    a0ba:	2800      	cmp	r0, #0
    a0bc:	d1f7      	bne.n	a0ae <bt_gatt_init+0xa>
    a0be:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    a0c2:	d13b      	bne.n	a13c <bt_gatt_init+0x98>
    a0c4:	f3bf 8f5b 	dmb	ish
    a0c8:	4b21      	ldr	r3, [pc, #132]	; (a150 <bt_gatt_init+0xac>)
    a0ca:	e853 1f00 	ldrex	r1, [r3]
    a0ce:	2900      	cmp	r1, #0
    a0d0:	d103      	bne.n	a0da <bt_gatt_init+0x36>
    a0d2:	e843 2000 	strex	r0, r2, [r3]
    a0d6:	2800      	cmp	r0, #0
    a0d8:	d1f7      	bne.n	a0ca <bt_gatt_init+0x26>
    a0da:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    a0de:	d108      	bne.n	a0f2 <bt_gatt_init+0x4e>
    a0e0:	4a1c      	ldr	r2, [pc, #112]	; (a154 <bt_gatt_init+0xb0>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a0e2:	491d      	ldr	r1, [pc, #116]	; (a158 <bt_gatt_init+0xb4>)
    a0e4:	8813      	ldrh	r3, [r2, #0]
    a0e6:	4c1d      	ldr	r4, [pc, #116]	; (a15c <bt_gatt_init+0xb8>)
	if (!atomic_cas(&service_init, 0, 1)) {
    a0e8:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a0ea:	42a1      	cmp	r1, r4
    a0ec:	d327      	bcc.n	a13e <bt_gatt_init+0x9a>
    a0ee:	b100      	cbz	r0, a0f2 <bt_gatt_init+0x4e>
    a0f0:	8013      	strh	r3, [r2, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a0f2:	4c1b      	ldr	r4, [pc, #108]	; (a160 <bt_gatt_init+0xbc>)
    a0f4:	2230      	movs	r2, #48	; 0x30
    a0f6:	2100      	movs	r1, #0
    a0f8:	4620      	mov	r0, r4
    a0fa:	f021 fb4f 	bl	2b79c <memset>
    a0fe:	4b19      	ldr	r3, [pc, #100]	; (a164 <bt_gatt_init+0xc0>)
    a100:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a102:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a104:	4c18      	ldr	r4, [pc, #96]	; (a168 <bt_gatt_init+0xc4>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a106:	4819      	ldr	r0, [pc, #100]	; (a16c <bt_gatt_init+0xc8>)
    a108:	2300      	movs	r3, #0
    a10a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a10e:	f016 f915 	bl	2033c <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    a112:	f104 0020 	add.w	r0, r4, #32
    a116:	2230      	movs	r2, #48	; 0x30
    a118:	2100      	movs	r1, #0
    a11a:	f021 fb3f 	bl	2b79c <memset>
    a11e:	4b14      	ldr	r3, [pc, #80]	; (a170 <bt_gatt_init+0xcc>)
    a120:	6263      	str	r3, [r4, #36]	; 0x24
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a122:	3450      	adds	r4, #80	; 0x50
    a124:	f3bf 8f5b 	dmb	ish
    a128:	e854 3f00 	ldrex	r3, [r4]
    a12c:	f043 0302 	orr.w	r3, r3, #2
    a130:	e844 3200 	strex	r2, r3, [r4]
    a134:	2a00      	cmp	r2, #0
    a136:	d1f7      	bne.n	a128 <bt_gatt_init+0x84>
    a138:	f3bf 8f5b 	dmb	ish
}
    a13c:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    a13e:	6848      	ldr	r0, [r1, #4]
    a140:	4403      	add	r3, r0
    a142:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    a144:	3108      	adds	r1, #8
    a146:	2001      	movs	r0, #1
    a148:	e7cf      	b.n	a0ea <bt_gatt_init+0x46>
    a14a:	bf00      	nop
    a14c:	200029d4 	.word	0x200029d4
    a150:	200029f0 	.word	0x200029f0
    a154:	200080be 	.word	0x200080be
    a158:	0002bedc 	.word	0x0002bedc
    a15c:	0002beec 	.word	0x0002beec
    a160:	20001098 	.word	0x20001098
    a164:	00025a83 	.word	0x00025a83
    a168:	200010c8 	.word	0x200010c8
    a16c:	20001438 	.word	0x20001438
    a170:	0000a5e1 	.word	0x0000a5e1

0000a174 <bt_gatt_attr_get_handle>:
{
    a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    a178:	4603      	mov	r3, r0
    a17a:	b148      	cbz	r0, a190 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    a17c:	8a00      	ldrh	r0, [r0, #16]
    a17e:	b938      	cbnz	r0, a190 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a180:	4912      	ldr	r1, [pc, #72]	; (a1cc <bt_gatt_attr_get_handle+0x58>)
    a182:	f8df e04c 	ldr.w	lr, [pc, #76]	; a1d0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    a186:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a188:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a18c:	4571      	cmp	r1, lr
    a18e:	d301      	bcc.n	a194 <bt_gatt_attr_get_handle+0x20>
}
    a190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    a194:	e9d1 7600 	ldrd	r7, r6, [r1]
    a198:	42bb      	cmp	r3, r7
    a19a:	d304      	bcc.n	a1a6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    a19c:	fb0c 7206 	mla	r2, ip, r6, r7
    a1a0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    a1a2:	4293      	cmp	r3, r2
    a1a4:	d90e      	bls.n	a1c4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    a1a6:	19a2      	adds	r2, r4, r6
    a1a8:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a1aa:	3108      	adds	r1, #8
    a1ac:	4614      	mov	r4, r2
    a1ae:	e7ed      	b.n	a18c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    a1b0:	fb0c 7805 	mla	r8, ip, r5, r7
    a1b4:	4543      	cmp	r3, r8
    a1b6:	d007      	beq.n	a1c8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    a1b8:	3501      	adds	r5, #1
    a1ba:	1962      	adds	r2, r4, r5
    a1bc:	42b5      	cmp	r5, r6
    a1be:	b292      	uxth	r2, r2
    a1c0:	d1f6      	bne.n	a1b0 <bt_gatt_attr_get_handle+0x3c>
    a1c2:	e7f2      	b.n	a1aa <bt_gatt_attr_get_handle+0x36>
    a1c4:	2500      	movs	r5, #0
    a1c6:	e7f8      	b.n	a1ba <bt_gatt_attr_get_handle+0x46>
    a1c8:	4610      	mov	r0, r2
    a1ca:	e7e1      	b.n	a190 <bt_gatt_attr_get_handle+0x1c>
    a1cc:	0002bedc 	.word	0x0002bedc
    a1d0:	0002beec 	.word	0x0002beec

0000a1d4 <bt_gatt_foreach_attr_type>:
{
    a1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a1d8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    a1dc:	9100      	str	r1, [sp, #0]
    a1de:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    a1e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a1e4:	2d00      	cmp	r5, #0
    a1e6:	bf08      	it	eq
    a1e8:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    a1ea:	4b24      	ldr	r3, [pc, #144]	; (a27c <bt_gatt_foreach_attr_type+0xa8>)
    a1ec:	881b      	ldrh	r3, [r3, #0]
    a1ee:	4283      	cmp	r3, r0
{
    a1f0:	4607      	mov	r7, r0
    a1f2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    a1f4:	d23c      	bcs.n	a270 <bt_gatt_foreach_attr_type+0x9c>
}
    a1f6:	b003      	add	sp, #12
    a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    a1fc:	6873      	ldr	r3, [r6, #4]
    a1fe:	4423      	add	r3, r4
    a200:	42bb      	cmp	r3, r7
    a202:	d232      	bcs.n	a26a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    a204:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a206:	3608      	adds	r6, #8
    a208:	4b1d      	ldr	r3, [pc, #116]	; (a280 <bt_gatt_foreach_attr_type+0xac>)
    a20a:	429e      	cmp	r6, r3
    a20c:	d3f6      	bcc.n	a1fc <bt_gatt_foreach_attr_type+0x28>
    a20e:	e7f2      	b.n	a1f6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a210:	5889      	ldr	r1, [r1, r2]
    a212:	9301      	str	r3, [sp, #4]
    a214:	4640      	mov	r0, r8
    a216:	f01a fa7d 	bl	24714 <bt_uuid_cmp>
    a21a:	9b01      	ldr	r3, [sp, #4]
    a21c:	b190      	cbz	r0, a244 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a21e:	3401      	adds	r4, #1
    a220:	f10a 0a01 	add.w	sl, sl, #1
    a224:	b2a4      	uxth	r4, r4
    a226:	6873      	ldr	r3, [r6, #4]
    a228:	4553      	cmp	r3, sl
    a22a:	d9ec      	bls.n	a206 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    a22c:	9b00      	ldr	r3, [sp, #0]
    a22e:	429c      	cmp	r4, r3
    a230:	d8e1      	bhi.n	a1f6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    a232:	42bc      	cmp	r4, r7
    a234:	d3f3      	bcc.n	a21e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a236:	6831      	ldr	r1, [r6, #0]
    a238:	fb0b f20a 	mul.w	r2, fp, sl
    a23c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    a23e:	f1b8 0f00 	cmp.w	r8, #0
    a242:	d1e5      	bne.n	a210 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    a244:	f1b9 0f00 	cmp.w	r9, #0
    a248:	d10b      	bne.n	a262 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    a24a:	3d01      	subs	r5, #1
    a24c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    a24e:	4618      	mov	r0, r3
    a250:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    a252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a254:	4621      	mov	r1, r4
    a256:	4798      	blx	r3
	if (!*num_matches) {
    a258:	2d00      	cmp	r5, #0
    a25a:	d0cc      	beq.n	a1f6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a25c:	2800      	cmp	r0, #0
    a25e:	d1de      	bne.n	a21e <bt_gatt_foreach_attr_type+0x4a>
    a260:	e7c9      	b.n	a1f6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    a262:	68da      	ldr	r2, [r3, #12]
    a264:	4591      	cmp	r9, r2
    a266:	d1da      	bne.n	a21e <bt_gatt_foreach_attr_type+0x4a>
    a268:	e7ef      	b.n	a24a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    a26a:	f04f 0a00 	mov.w	sl, #0
    a26e:	e7da      	b.n	a226 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    a270:	4e04      	ldr	r6, [pc, #16]	; (a284 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    a272:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    a274:	f04f 0b14 	mov.w	fp, #20
    a278:	e7c6      	b.n	a208 <bt_gatt_foreach_attr_type+0x34>
    a27a:	bf00      	nop
    a27c:	200080be 	.word	0x200080be
    a280:	0002beec 	.word	0x0002beec
    a284:	0002bedc 	.word	0x0002bedc

0000a288 <db_hash_gen>:
{
    a288:	b530      	push	{r4, r5, lr}
    a28a:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    a28c:	2300      	movs	r3, #0
{
    a28e:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a290:	aa1c      	add	r2, sp, #112	; 0x70
    a292:	4669      	mov	r1, sp
    a294:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    a296:	e9cd 3300 	strd	r3, r3, [sp]
    a29a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    a29e:	f019 ff6c 	bl	2417a <tc_cmac_setup>
    a2a2:	b958      	cbnz	r0, a2bc <db_hash_gen+0x34>
    a2a4:	4918      	ldr	r1, [pc, #96]	; (a308 <db_hash_gen+0x80>)
    a2a6:	4b19      	ldr	r3, [pc, #100]	; (a30c <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    a2a8:	4819      	ldr	r0, [pc, #100]	; (a310 <db_hash_gen+0x88>)
    a2aa:	1ac9      	subs	r1, r1, r3
    a2ac:	08c9      	lsrs	r1, r1, #3
    a2ae:	0189      	lsls	r1, r1, #6
    a2b0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    a2b4:	f019 f990 	bl	235d8 <log_0>
}
    a2b8:	b049      	add	sp, #292	; 0x124
    a2ba:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    a2bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a2c0:	2001      	movs	r0, #1
    a2c2:	4a14      	ldr	r2, [pc, #80]	; (a314 <db_hash_gen+0x8c>)
    a2c4:	ab04      	add	r3, sp, #16
    a2c6:	f01b fbd1 	bl	25a6c <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a2ca:	4813      	ldr	r0, [pc, #76]	; (a318 <db_hash_gen+0x90>)
    a2cc:	a904      	add	r1, sp, #16
    a2ce:	f019 ffeb 	bl	242a8 <tc_cmac_final>
    a2d2:	b940      	cbnz	r0, a2e6 <db_hash_gen+0x5e>
    a2d4:	490c      	ldr	r1, [pc, #48]	; (a308 <db_hash_gen+0x80>)
    a2d6:	4b0d      	ldr	r3, [pc, #52]	; (a30c <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    a2d8:	4810      	ldr	r0, [pc, #64]	; (a31c <db_hash_gen+0x94>)
    a2da:	1ac9      	subs	r1, r1, r3
    a2dc:	08c9      	lsrs	r1, r1, #3
    a2de:	0189      	lsls	r1, r1, #6
    a2e0:	f041 0101 	orr.w	r1, r1, #1
    a2e4:	e7e6      	b.n	a2b4 <db_hash_gen+0x2c>
    a2e6:	4b0c      	ldr	r3, [pc, #48]	; (a318 <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    a2e8:	2208      	movs	r2, #8
    a2ea:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    a2ee:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    a2f0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    a2f4:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    a2f8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    a2fa:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    a2fc:	d1f7      	bne.n	a2ee <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    a2fe:	2c00      	cmp	r4, #0
    a300:	d0da      	beq.n	a2b8 <db_hash_gen+0x30>
		db_hash_store();
    a302:	f7ff f941 	bl	9588 <db_hash_store>
    a306:	e7d7      	b.n	a2b8 <db_hash_gen+0x30>
    a308:	0002c008 	.word	0x0002c008
    a30c:	0002bf50 	.word	0x0002bf50
    a310:	0002f75f 	.word	0x0002f75f
    a314:	0002560b 	.word	0x0002560b
    a318:	200085df 	.word	0x200085df
    a31c:	0002f778 	.word	0x0002f778

0000a320 <db_hash_commit>:
{
    a320:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    a322:	4826      	ldr	r0, [pc, #152]	; (a3bc <db_hash_commit+0x9c>)
    a324:	f020 ffda 	bl	2b2dc <k_delayed_work_cancel>
	if (!err) {
    a328:	b908      	cbnz	r0, a32e <db_hash_commit+0xe>
		db_hash_gen(false);
    a32a:	f7ff ffad 	bl	a288 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    a32e:	4924      	ldr	r1, [pc, #144]	; (a3c0 <db_hash_commit+0xa0>)
    a330:	4824      	ldr	r0, [pc, #144]	; (a3c4 <db_hash_commit+0xa4>)
    a332:	2210      	movs	r2, #16
    a334:	f021 fa03 	bl	2b73e <memcmp>
    a338:	b948      	cbnz	r0, a34e <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    a33a:	4823      	ldr	r0, [pc, #140]	; (a3c8 <db_hash_commit+0xa8>)
    a33c:	f020 ffce 	bl	2b2dc <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a340:	4822      	ldr	r0, [pc, #136]	; (a3cc <db_hash_commit+0xac>)
    a342:	f06f 0101 	mvn.w	r1, #1
    a346:	f01b f9df 	bl	25708 <atomic_and>
}
    a34a:	2000      	movs	r0, #0
    a34c:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a34e:	4b20      	ldr	r3, [pc, #128]	; (a3d0 <db_hash_commit+0xb0>)
    a350:	f3bf 8f5b 	dmb	ish
    a354:	f103 0250 	add.w	r2, r3, #80	; 0x50
    a358:	e852 1f00 	ldrex	r1, [r2]
    a35c:	f041 0001 	orr.w	r0, r1, #1
    a360:	e842 0c00 	strex	ip, r0, [r2]
    a364:	f1bc 0f00 	cmp.w	ip, #0
    a368:	d1f6      	bne.n	a358 <db_hash_commit+0x38>
    a36a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a36e:	07ca      	lsls	r2, r1, #31
    a370:	d412      	bmi.n	a398 <db_hash_commit+0x78>
		gatt_sc.start = start;
    a372:	4a18      	ldr	r2, [pc, #96]	; (a3d4 <db_hash_commit+0xb4>)
    a374:	619a      	str	r2, [r3, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a376:	f3bf 8f5b 	dmb	ish
    a37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a37c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    a380:	079b      	lsls	r3, r3, #30
    a382:	d406      	bmi.n	a392 <db_hash_commit+0x72>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a384:	4910      	ldr	r1, [pc, #64]	; (a3c8 <db_hash_commit+0xa8>)
    a386:	4814      	ldr	r0, [pc, #80]	; (a3d8 <db_hash_commit+0xb8>)
    a388:	f44f 72a4 	mov.w	r2, #328	; 0x148
    a38c:	2300      	movs	r3, #0
    a38e:	f015 ffd5 	bl	2033c <k_delayed_work_submit_to_queue>
	db_hash_store();
    a392:	f7ff f8f9 	bl	9588 <db_hash_store>
	return 0;
    a396:	e7d8      	b.n	a34a <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    a398:	8b1a      	ldrh	r2, [r3, #24]
    a39a:	8b59      	ldrh	r1, [r3, #26]
    a39c:	2a01      	cmp	r2, #1
    a39e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a3a2:	d805      	bhi.n	a3b0 <db_hash_commit+0x90>
    a3a4:	4291      	cmp	r1, r2
    a3a6:	d0f4      	beq.n	a392 <db_hash_commit+0x72>
		*end = new_end;
    a3a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    a3ac:	835a      	strh	r2, [r3, #26]
    a3ae:	e7e2      	b.n	a376 <db_hash_commit+0x56>
		*start = new_start;
    a3b0:	2001      	movs	r0, #1
	if (*end < new_end) {
    a3b2:	4291      	cmp	r1, r2
		*start = new_start;
    a3b4:	8318      	strh	r0, [r3, #24]
	if (*end < new_end) {
    a3b6:	d0de      	beq.n	a376 <db_hash_commit+0x56>
    a3b8:	e7f6      	b.n	a3a8 <db_hash_commit+0x88>
    a3ba:	bf00      	nop
    a3bc:	20001098 	.word	0x20001098
    a3c0:	200085df 	.word	0x200085df
    a3c4:	200085ef 	.word	0x200085ef
    a3c8:	200010e8 	.word	0x200010e8
    a3cc:	20001118 	.word	0x20001118
    a3d0:	200010c8 	.word	0x200010c8
    a3d4:	ffff0001 	.word	0xffff0001
    a3d8:	20001438 	.word	0x20001438

0000a3dc <ccc_set_direct>:
{
    a3dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a3e0:	b0b9      	sub	sp, #228	; 0xe4
    a3e2:	4688      	mov	r8, r1
    a3e4:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a3e6:	4939      	ldr	r1, [pc, #228]	; (a4cc <ccc_set_direct+0xf0>)
    a3e8:	9840      	ldr	r0, [sp, #256]	; 0x100
    a3ea:	466a      	mov	r2, sp
{
    a3ec:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    a3ee:	f019 fbe2 	bl	23bb6 <settings_name_steq>
    a3f2:	b978      	cbnz	r0, a414 <ccc_set_direct+0x38>
    a3f4:	4b36      	ldr	r3, [pc, #216]	; (a4d0 <ccc_set_direct+0xf4>)
    a3f6:	4937      	ldr	r1, [pc, #220]	; (a4d4 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    a3f8:	4837      	ldr	r0, [pc, #220]	; (a4d8 <ccc_set_direct+0xfc>)
    a3fa:	1ac9      	subs	r1, r1, r3
    a3fc:	08c9      	lsrs	r1, r1, #3
    a3fe:	0189      	lsls	r1, r1, #6
    a400:	f041 0101 	orr.w	r1, r1, #1
    a404:	f019 f8e8 	bl	235d8 <log_0>
			return -EINVAL;
    a408:	f06f 0515 	mvn.w	r5, #21
}
    a40c:	4628      	mov	r0, r5
    a40e:	b039      	add	sp, #228	; 0xe4
    a410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    a414:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    a416:	a901      	add	r1, sp, #4
    a418:	4630      	mov	r0, r6
    a41a:	f019 fbef 	bl	23bfc <settings_name_next>
		if (!name) {
    a41e:	b96e      	cbnz	r6, a43c <ccc_set_direct+0x60>
    a420:	492c      	ldr	r1, [pc, #176]	; (a4d4 <ccc_set_direct+0xf8>)
    a422:	4b2b      	ldr	r3, [pc, #172]	; (a4d0 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    a424:	482d      	ldr	r0, [pc, #180]	; (a4dc <ccc_set_direct+0x100>)
    a426:	1ac9      	subs	r1, r1, r3
    a428:	08c9      	lsrs	r1, r1, #3
    a42a:	0189      	lsls	r1, r1, #6
    a42c:	f041 0101 	orr.w	r1, r1, #1
    a430:	f019 f8d2 	bl	235d8 <log_0>
			return -EINVAL;
    a434:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    a438:	4625      	mov	r5, r4
    a43a:	e7e7      	b.n	a40c <ccc_set_direct+0x30>
		} else if (!next) {
    a43c:	9801      	ldr	r0, [sp, #4]
    a43e:	b9c8      	cbnz	r0, a474 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    a440:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    a444:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    a448:	4649      	mov	r1, r9
    a44a:	4630      	mov	r0, r6
    a44c:	f01a f93e 	bl	246cc <bt_settings_decode_key>
		if (err) {
    a450:	4605      	mov	r5, r0
    a452:	b1a0      	cbz	r0, a47e <ccc_set_direct+0xa2>
    a454:	4a1e      	ldr	r2, [pc, #120]	; (a4d0 <ccc_set_direct+0xf4>)
    a456:	4c1f      	ldr	r4, [pc, #124]	; (a4d4 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    a458:	4630      	mov	r0, r6
    a45a:	1aa4      	subs	r4, r4, r2
    a45c:	08e4      	lsrs	r4, r4, #3
    a45e:	f7f8 fb8b 	bl	2b78 <log_strdup>
    a462:	01a4      	lsls	r4, r4, #6
    a464:	f044 0401 	orr.w	r4, r4, #1
    a468:	4601      	mov	r1, r0
    a46a:	4622      	mov	r2, r4
    a46c:	481c      	ldr	r0, [pc, #112]	; (a4e0 <ccc_set_direct+0x104>)
    a46e:	f019 f8c0 	bl	235f2 <log_1>
    a472:	e7df      	b.n	a434 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    a474:	220a      	movs	r2, #10
    a476:	2100      	movs	r1, #0
    a478:	f017 faee 	bl	21a58 <strtol>
    a47c:	e7e0      	b.n	a440 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    a47e:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    a482:	f1b8 0f00 	cmp.w	r8, #0
    a486:	d01d      	beq.n	a4c4 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    a488:	ae08      	add	r6, sp, #32
    a48a:	22c0      	movs	r2, #192	; 0xc0
    a48c:	4631      	mov	r1, r6
    a48e:	4638      	mov	r0, r7
    a490:	47a0      	blx	r4
			if (len < 0) {
    a492:	1e04      	subs	r4, r0, #0
    a494:	da0b      	bge.n	a4ae <ccc_set_direct+0xd2>
    a496:	4b0e      	ldr	r3, [pc, #56]	; (a4d0 <ccc_set_direct+0xf4>)
    a498:	4a0e      	ldr	r2, [pc, #56]	; (a4d4 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    a49a:	4812      	ldr	r0, [pc, #72]	; (a4e4 <ccc_set_direct+0x108>)
    a49c:	1ad2      	subs	r2, r2, r3
    a49e:	08d2      	lsrs	r2, r2, #3
    a4a0:	0192      	lsls	r2, r2, #6
    a4a2:	f042 0201 	orr.w	r2, r2, #1
    a4a6:	4621      	mov	r1, r4
    a4a8:	f019 f8a3 	bl	235f2 <log_1>
				return len;
    a4ac:	e7c4      	b.n	a438 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    a4ae:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    a4b0:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    a4b2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    a4b4:	4a0c      	ldr	r2, [pc, #48]	; (a4e8 <ccc_set_direct+0x10c>)
    a4b6:	ab04      	add	r3, sp, #16
    a4b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a4bc:	2001      	movs	r0, #1
    a4be:	f01b fad5 	bl	25a6c <bt_gatt_foreach_attr>
	return 0;
    a4c2:	e7a3      	b.n	a40c <ccc_set_direct+0x30>
			load.count = 0;
    a4c4:	e9cd 0006 	strd	r0, r0, [sp, #24]
    a4c8:	e7f4      	b.n	a4b4 <ccc_set_direct+0xd8>
    a4ca:	bf00      	nop
    a4cc:	0002f791 	.word	0x0002f791
    a4d0:	0002bf50 	.word	0x0002bf50
    a4d4:	0002c008 	.word	0x0002c008
    a4d8:	0002f798 	.word	0x0002f798
    a4dc:	0002e8b0 	.word	0x0002e8b0
    a4e0:	0002f636 	.word	0x0002f636
    a4e4:	0002f5c0 	.word	0x0002f5c0
    a4e8:	00009889 	.word	0x00009889

0000a4ec <bt_gatt_indicate>:
{
    a4ec:	b530      	push	{r4, r5, lr}
    a4ee:	4b39      	ldr	r3, [pc, #228]	; (a5d4 <bt_gatt_indicate+0xe8>)
    a4f0:	f3bf 8f5b 	dmb	ish
    a4f4:	681b      	ldr	r3, [r3, #0]
    a4f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a4fa:	079a      	lsls	r2, r3, #30
{
    a4fc:	b08b      	sub	sp, #44	; 0x2c
    a4fe:	4604      	mov	r4, r0
    a500:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a502:	d561      	bpl.n	a5c8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    a504:	6848      	ldr	r0, [r1, #4]
    a506:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    a508:	b114      	cbz	r4, a510 <bt_gatt_indicate+0x24>
    a50a:	7aa3      	ldrb	r3, [r4, #10]
    a50c:	2b07      	cmp	r3, #7
    a50e:	d15e      	bne.n	a5ce <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    a510:	f7ff fe30 	bl	a174 <bt_gatt_attr_get_handle>
    a514:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    a518:	b918      	cbnz	r0, a522 <bt_gatt_indicate+0x36>
		return -ENOENT;
    a51a:	f06f 0001 	mvn.w	r0, #1
}
    a51e:	b00b      	add	sp, #44	; 0x2c
    a520:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    a522:	682a      	ldr	r2, [r5, #0]
    a524:	b9ba      	cbnz	r2, a556 <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    a526:	9b05      	ldr	r3, [sp, #20]
    a528:	6818      	ldr	r0, [r3, #0]
    a52a:	2300      	movs	r3, #0
    a52c:	f88d 3010 	strb.w	r3, [sp, #16]
    a530:	a904      	add	r1, sp, #16
    a532:	f642 0303 	movw	r3, #10243	; 0x2803
    a536:	f8ad 3012 	strh.w	r3, [sp, #18]
    a53a:	f01a f8eb 	bl	24714 <bt_uuid_cmp>
    a53e:	b1d0      	cbz	r0, a576 <bt_gatt_indicate+0x8a>
	if (conn) {
    a540:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    a544:	b324      	cbz	r4, a590 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    a546:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    a548:	4601      	mov	r1, r0
		params->_ref = 1;
    a54a:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    a54c:	462a      	mov	r2, r5
    a54e:	4620      	mov	r0, r4
    a550:	f7ff fb56 	bl	9c00 <gatt_indicate>
    a554:	e7e3      	b.n	a51e <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a556:	a905      	add	r1, sp, #20
    a558:	9102      	str	r1, [sp, #8]
    a55a:	491f      	ldr	r1, [pc, #124]	; (a5d8 <bt_gatt_indicate+0xec>)
    a55c:	9101      	str	r1, [sp, #4]
    a55e:	2101      	movs	r1, #1
	found->attr = NULL;
    a560:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a562:	9100      	str	r1, [sp, #0]
    a564:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    a568:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    a56a:	f7ff fe33 	bl	a1d4 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    a56e:	9b05      	ldr	r3, [sp, #20]
    a570:	2b00      	cmp	r3, #0
    a572:	d1d8      	bne.n	a526 <bt_gatt_indicate+0x3a>
    a574:	e7d1      	b.n	a51a <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    a576:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    a578:	68c3      	ldr	r3, [r0, #12]
    a57a:	799b      	ldrb	r3, [r3, #6]
    a57c:	069b      	lsls	r3, r3, #26
    a57e:	d402      	bmi.n	a586 <bt_gatt_indicate+0x9a>
			return -EINVAL;
    a580:	f06f 0015 	mvn.w	r0, #21
    a584:	e7cb      	b.n	a51e <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    a586:	f01b fa2a 	bl	259de <bt_gatt_attr_value_handle>
    a58a:	f8ad 0018 	strh.w	r0, [sp, #24]
    a58e:	e7d7      	b.n	a540 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    a590:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a594:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    a596:	2302      	movs	r3, #2
    a598:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a59c:	f642 1302 	movw	r3, #10498	; 0x2902
    a5a0:	f8ad 3012 	strh.w	r3, [sp, #18]
    a5a4:	ab05      	add	r3, sp, #20
    a5a6:	9302      	str	r3, [sp, #8]
    a5a8:	4b0c      	ldr	r3, [pc, #48]	; (a5dc <bt_gatt_indicate+0xf0>)
    a5aa:	9301      	str	r3, [sp, #4]
    a5ac:	2301      	movs	r3, #1
    a5ae:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    a5b0:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a5b2:	4623      	mov	r3, r4
    a5b4:	aa04      	add	r2, sp, #16
    a5b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    a5ba:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    a5bc:	f88d 4010 	strb.w	r4, [sp, #16]
    a5c0:	f7ff fe08 	bl	a1d4 <bt_gatt_foreach_attr_type>
	return data.err;
    a5c4:	9807      	ldr	r0, [sp, #28]
    a5c6:	e7aa      	b.n	a51e <bt_gatt_indicate+0x32>
		return -EAGAIN;
    a5c8:	f06f 000a 	mvn.w	r0, #10
    a5cc:	e7a7      	b.n	a51e <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    a5ce:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a5d2:	e7a4      	b.n	a51e <bt_gatt_indicate+0x32>
    a5d4:	20000094 	.word	0x20000094
    a5d8:	000255bd 	.word	0x000255bd
    a5dc:	00009fdd 	.word	0x00009fdd

0000a5e0 <sc_process>:
{
    a5e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a5e2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    a5e6:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a5e8:	f850 3c08 	ldr.w	r3, [r0, #-8]
    a5ec:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a5ee:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a5f2:	f06f 0101 	mvn.w	r1, #1
    a5f6:	4628      	mov	r0, r5
    a5f8:	f01b f886 	bl	25708 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    a5fc:	4b0d      	ldr	r3, [pc, #52]	; (a634 <sc_process+0x54>)
    a5fe:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    a602:	4b0d      	ldr	r3, [pc, #52]	; (a638 <sc_process+0x58>)
    a604:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    a608:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    a60a:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    a60c:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    a610:	2304      	movs	r3, #4
	sc->start = 0U;
    a612:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    a616:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    a61a:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a61e:	4631      	mov	r1, r6
    a620:	f7ff ff64 	bl	a4ec <bt_gatt_indicate>
    a624:	b918      	cbnz	r0, a62e <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    a626:	2101      	movs	r1, #1
    a628:	4628      	mov	r0, r5
    a62a:	f01b f967 	bl	258fc <atomic_set_bit>
}
    a62e:	b002      	add	sp, #8
    a630:	bd70      	pop	{r4, r5, r6, pc}
    a632:	bf00      	nop
    a634:	0002c47c 	.word	0x0002c47c
    a638:	00009f15 	.word	0x00009f15

0000a63c <update_ccc>:
{
    a63c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    a63e:	4b32      	ldr	r3, [pc, #200]	; (a708 <update_ccc+0xcc>)
	struct bt_conn *conn = data->conn;
    a640:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
    a642:	6882      	ldr	r2, [r0, #8]
    a644:	429a      	cmp	r2, r3
{
    a646:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    a648:	d11b      	bne.n	a682 <update_ccc+0x46>
	ccc = attr->user_data;
    a64a:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
    a64c:	8933      	ldrh	r3, [r6, #8]
    a64e:	b1c3      	cbz	r3, a682 <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    a650:	4632      	mov	r2, r6
    a652:	4628      	mov	r0, r5
    a654:	f812 1b01 	ldrb.w	r1, [r2], #1
    a658:	f01a fa6f 	bl	24b3a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    a65c:	b188      	cbz	r0, a682 <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    a65e:	222a      	movs	r2, #42	; 0x2a
    a660:	4621      	mov	r1, r4
    a662:	4628      	mov	r0, r5
    a664:	f01b fa10 	bl	25a88 <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    a668:	2803      	cmp	r0, #3
    a66a:	d10d      	bne.n	a688 <update_ccc+0x4c>
    a66c:	4a27      	ldr	r2, [pc, #156]	; (a70c <update_ccc+0xd0>)
    a66e:	4b28      	ldr	r3, [pc, #160]	; (a710 <update_ccc+0xd4>)
				BT_WARN("CCC %p not writable", attr);
    a670:	4828      	ldr	r0, [pc, #160]	; (a714 <update_ccc+0xd8>)
    a672:	1ad2      	subs	r2, r2, r3
    a674:	08d2      	lsrs	r2, r2, #3
    a676:	0192      	lsls	r2, r2, #6
    a678:	f042 0202 	orr.w	r2, r2, #2
    a67c:	4621      	mov	r1, r4
    a67e:	f018 ffb8 	bl	235f2 <log_1>
}
    a682:	2001      	movs	r0, #1
    a684:	b002      	add	sp, #8
    a686:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
    a688:	4631      	mov	r1, r6
    a68a:	4620      	mov	r0, r4
    a68c:	f01a ff7a 	bl	25584 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    a690:	4b21      	ldr	r3, [pc, #132]	; (a718 <update_ccc+0xdc>)
    a692:	429e      	cmp	r6, r3
    a694:	d1f5      	bne.n	a682 <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    a696:	7a28      	ldrb	r0, [r5, #8]
    a698:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a69c:	f7fe ffd2 	bl	9644 <find_sc_cfg>
	if (!cfg) {
    a6a0:	4604      	mov	r4, r0
    a6a2:	2800      	cmp	r0, #0
    a6a4:	d0ed      	beq.n	a682 <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
    a6a6:	8902      	ldrh	r2, [r0, #8]
    a6a8:	8943      	ldrh	r3, [r0, #10]
    a6aa:	ea52 0103 	orrs.w	r1, r2, r3
    a6ae:	d0e8      	beq.n	a682 <update_ccc+0x46>
	index = bt_conn_index(conn);
    a6b0:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    a6b2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    a6b6:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    a6ba:	f7fd fc2d 	bl	7f18 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    a6be:	4917      	ldr	r1, [pc, #92]	; (a71c <update_ccc+0xe0>)
    a6c0:	4a17      	ldr	r2, [pc, #92]	; (a720 <update_ccc+0xe4>)
    a6c2:	2318      	movs	r3, #24
    a6c4:	fb03 1300 	mla	r3, r3, r0, r1
    a6c8:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    a6ca:	4a16      	ldr	r2, [pc, #88]	; (a724 <update_ccc+0xe8>)
    a6cc:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    a6ce:	aa01      	add	r2, sp, #4
    a6d0:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    a6d2:	2204      	movs	r2, #4
    a6d4:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    a6d6:	b203      	sxth	r3, r0
    a6d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    a6dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    a6e0:	4628      	mov	r0, r5
    a6e2:	f7ff ff03 	bl	a4ec <bt_gatt_indicate>
    a6e6:	b148      	cbz	r0, a6fc <update_ccc+0xc0>
    a6e8:	4908      	ldr	r1, [pc, #32]	; (a70c <update_ccc+0xd0>)
    a6ea:	4b09      	ldr	r3, [pc, #36]	; (a710 <update_ccc+0xd4>)
		BT_ERR("SC restore indication failed");
    a6ec:	480e      	ldr	r0, [pc, #56]	; (a728 <update_ccc+0xec>)
    a6ee:	1ac9      	subs	r1, r1, r3
    a6f0:	08c9      	lsrs	r1, r1, #3
    a6f2:	0189      	lsls	r1, r1, #6
    a6f4:	f041 0101 	orr.w	r1, r1, #1
    a6f8:	f018 ff6e 	bl	235d8 <log_0>
__ssp_bos_icheck3(memset, void *, int)
    a6fc:	2300      	movs	r3, #0
    a6fe:	60a3      	str	r3, [r4, #8]
		sc_store(cfg);
    a700:	4620      	mov	r0, r4
    a702:	f7fe ffcd 	bl	96a0 <sc_store>
    a706:	e7bc      	b.n	a682 <update_ccc+0x46>
    a708:	0000973d 	.word	0x0000973d
    a70c:	0002c008 	.word	0x0002c008
    a710:	0002bf50 	.word	0x0002bf50
    a714:	0002f7a4 	.word	0x0002f7a4
    a718:	200003f0 	.word	0x200003f0
    a71c:	200029d8 	.word	0x200029d8
    a720:	0002c47c 	.word	0x0002c47c
    a724:	00025919 	.word	0x00025919
    a728:	0002f7b8 	.word	0x0002f7b8

0000a72c <bt_gatt_discover>:
{
    a72c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a72e:	7a83      	ldrb	r3, [r0, #10]
    a730:	2b07      	cmp	r3, #7
{
    a732:	b085      	sub	sp, #20
    a734:	4605      	mov	r5, r0
    a736:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    a738:	f040 80dc 	bne.w	a8f4 <bt_gatt_discover+0x1c8>
	switch (params->type) {
    a73c:	7c09      	ldrb	r1, [r1, #16]
    a73e:	2905      	cmp	r1, #5
    a740:	f200 80cd 	bhi.w	a8de <bt_gatt_discover+0x1b2>
    a744:	e8df f001 	tbb	[pc, r1]
    a748:	66660303 	.word	0x66660303
    a74c:	b784      	.short	0xb784
		if (params->uuid) {
    a74e:	6823      	ldr	r3, [r4, #0]
    a750:	2b00      	cmp	r3, #0
    a752:	d041      	beq.n	a7d8 <bt_gatt_discover+0xac>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_REQ, sizeof(*req));
    a754:	2206      	movs	r2, #6
    a756:	4611      	mov	r1, r2
    a758:	f7fe fa68 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    a75c:	4606      	mov	r6, r0
    a75e:	b918      	cbnz	r0, a768 <bt_gatt_discover+0x3c>
		return -ENOMEM;
    a760:	f06f 000b 	mvn.w	r0, #11
}
    a764:	b005      	add	sp, #20
    a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a768:	f100 0708 	add.w	r7, r0, #8
    a76c:	2106      	movs	r1, #6
    a76e:	4638      	mov	r0, r7
    a770:	f01b fb6a 	bl	25e48 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a774:	8923      	ldrh	r3, [r4, #8]
    a776:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a778:	89e3      	ldrh	r3, [r4, #14]
    a77a:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a77c:	7c23      	ldrb	r3, [r4, #16]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
    a77e:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
    a780:	f642 0301 	movw	r3, #10241	; 0x2801
    a784:	bf08      	it	eq
    a786:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    a78a:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
    a78c:	6823      	ldr	r3, [r4, #0]
    a78e:	7819      	ldrb	r1, [r3, #0]
    a790:	b189      	cbz	r1, a7b6 <bt_gatt_discover+0x8a>
    a792:	2902      	cmp	r1, #2
    a794:	d01a      	beq.n	a7cc <bt_gatt_discover+0xa0>
    a796:	4b59      	ldr	r3, [pc, #356]	; (a8fc <bt_gatt_discover+0x1d0>)
    a798:	4a59      	ldr	r2, [pc, #356]	; (a900 <bt_gatt_discover+0x1d4>)
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    a79a:	485a      	ldr	r0, [pc, #360]	; (a904 <bt_gatt_discover+0x1d8>)
    a79c:	1ad2      	subs	r2, r2, r3
    a79e:	08d2      	lsrs	r2, r2, #3
    a7a0:	0192      	lsls	r2, r2, #6
    a7a2:	f042 0201 	orr.w	r2, r2, #1
    a7a6:	f018 ff24 	bl	235f2 <log_1>
		net_buf_unref(buf);
    a7aa:	4630      	mov	r0, r6
    a7ac:	f00d fe0e 	bl	183cc <net_buf_unref>
	return -EINVAL;
    a7b0:	f06f 0015 	mvn.w	r0, #21
    a7b4:	e7d6      	b.n	a764 <bt_gatt_discover+0x38>
	net_buf_simple_add_le16(&buf->b, val);
    a7b6:	8859      	ldrh	r1, [r3, #2]
    a7b8:	4638      	mov	r0, r7
    a7ba:	f01b fb5d 	bl	25e78 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_find_type_rsp, params, NULL);
    a7be:	4a52      	ldr	r2, [pc, #328]	; (a908 <bt_gatt_discover+0x1dc>)
    a7c0:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a7c2:	4631      	mov	r1, r6
    a7c4:	4628      	mov	r0, r5
    a7c6:	f7ff f9df 	bl	9b88 <gatt_send.constprop.0>
    a7ca:	e7cb      	b.n	a764 <bt_gatt_discover+0x38>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a7cc:	2210      	movs	r2, #16
    a7ce:	1c59      	adds	r1, r3, #1
    a7d0:	4638      	mov	r0, r7
    a7d2:	f01b fb3f 	bl	25e54 <net_buf_simple_add_mem>
    a7d6:	e7f2      	b.n	a7be <bt_gatt_discover+0x92>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_REQ, sizeof(*req));
    a7d8:	2204      	movs	r2, #4
    a7da:	2110      	movs	r1, #16
    a7dc:	f7fe fa26 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    a7e0:	4606      	mov	r6, r0
    a7e2:	2800      	cmp	r0, #0
    a7e4:	d0bc      	beq.n	a760 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a7e6:	f100 0708 	add.w	r7, r0, #8
    a7ea:	2104      	movs	r1, #4
    a7ec:	4638      	mov	r0, r7
    a7ee:	f01b fb2b 	bl	25e48 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a7f2:	8923      	ldrh	r3, [r4, #8]
    a7f4:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a7f6:	89e3      	ldrh	r3, [r4, #14]
    a7f8:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a7fa:	7c23      	ldrb	r3, [r4, #16]
    a7fc:	b93b      	cbnz	r3, a80e <bt_gatt_discover+0xe2>
	net_buf_simple_add_le16(&buf->b, val);
    a7fe:	f44f 5120 	mov.w	r1, #10240	; 0x2800
    a802:	4638      	mov	r0, r7
    a804:	f01b fb38 	bl	25e78 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_group_rsp, params, NULL);
    a808:	4a40      	ldr	r2, [pc, #256]	; (a90c <bt_gatt_discover+0x1e0>)
    a80a:	4623      	mov	r3, r4
    a80c:	e7d9      	b.n	a7c2 <bt_gatt_discover+0x96>
    a80e:	f642 0101 	movw	r1, #10241	; 0x2801
    a812:	e7f6      	b.n	a802 <bt_gatt_discover+0xd6>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    a814:	2204      	movs	r2, #4
    a816:	2108      	movs	r1, #8
    a818:	f7fe fa08 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    a81c:	4606      	mov	r6, r0
    a81e:	2800      	cmp	r0, #0
    a820:	d09e      	beq.n	a760 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a822:	f100 0708 	add.w	r7, r0, #8
    a826:	2104      	movs	r1, #4
    a828:	4638      	mov	r0, r7
    a82a:	f01b fb0d 	bl	25e48 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a82e:	8923      	ldrh	r3, [r4, #8]
    a830:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a832:	89e3      	ldrh	r3, [r4, #14]
    a834:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    a836:	7c23      	ldrb	r3, [r4, #16]
    a838:	2b02      	cmp	r3, #2
	net_buf_simple_add_le16(&buf->b, val);
    a83a:	bf0c      	ite	eq
    a83c:	f642 0102 	movweq	r1, #10242	; 0x2802
    a840:	f642 0103 	movwne	r1, #10243	; 0x2803
    a844:	4638      	mov	r0, r7
    a846:	f01b fb17 	bl	25e78 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_type_rsp, params, NULL);
    a84a:	4a31      	ldr	r2, [pc, #196]	; (a910 <bt_gatt_discover+0x1e4>)
    a84c:	4623      	mov	r3, r4
    a84e:	e7b8      	b.n	a7c2 <bt_gatt_discover+0x96>
		if (params->uuid &&
    a850:	6820      	ldr	r0, [r4, #0]
    a852:	b380      	cbz	r0, a8b6 <bt_gatt_discover+0x18a>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a854:	2600      	movs	r6, #0
    a856:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a85a:	4669      	mov	r1, sp
    a85c:	f88d 6000 	strb.w	r6, [sp]
    a860:	f8ad 3002 	strh.w	r3, [sp, #2]
    a864:	f019 ff56 	bl	24714 <bt_uuid_cmp>
		if (params->uuid &&
    a868:	2800      	cmp	r0, #0
    a86a:	d0a1      	beq.n	a7b0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a86c:	f642 0301 	movw	r3, #10241	; 0x2801
    a870:	6820      	ldr	r0, [r4, #0]
    a872:	f88d 6004 	strb.w	r6, [sp, #4]
    a876:	a901      	add	r1, sp, #4
    a878:	f8ad 3006 	strh.w	r3, [sp, #6]
    a87c:	f019 ff4a 	bl	24714 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    a880:	2800      	cmp	r0, #0
    a882:	d095      	beq.n	a7b0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a884:	f642 0302 	movw	r3, #10242	; 0x2802
    a888:	6820      	ldr	r0, [r4, #0]
    a88a:	f88d 6008 	strb.w	r6, [sp, #8]
    a88e:	a902      	add	r1, sp, #8
    a890:	f8ad 300a 	strh.w	r3, [sp, #10]
    a894:	f019 ff3e 	bl	24714 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    a898:	2800      	cmp	r0, #0
    a89a:	d089      	beq.n	a7b0 <bt_gatt_discover+0x84>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    a89c:	f642 0303 	movw	r3, #10243	; 0x2803
    a8a0:	6820      	ldr	r0, [r4, #0]
    a8a2:	f88d 600c 	strb.w	r6, [sp, #12]
    a8a6:	a903      	add	r1, sp, #12
    a8a8:	f8ad 300e 	strh.w	r3, [sp, #14]
    a8ac:	f019 ff32 	bl	24714 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    a8b0:	2800      	cmp	r0, #0
    a8b2:	f43f af7d 	beq.w	a7b0 <bt_gatt_discover+0x84>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_REQ, sizeof(*req));
    a8b6:	2204      	movs	r2, #4
    a8b8:	4611      	mov	r1, r2
    a8ba:	4628      	mov	r0, r5
    a8bc:	f7fe f9b6 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    a8c0:	4606      	mov	r6, r0
    a8c2:	2800      	cmp	r0, #0
    a8c4:	f43f af4c 	beq.w	a760 <bt_gatt_discover+0x34>
	return net_buf_simple_add(&buf->b, len);
    a8c8:	2104      	movs	r1, #4
    a8ca:	3008      	adds	r0, #8
    a8cc:	f01b fabc 	bl	25e48 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
    a8d0:	8923      	ldrh	r3, [r4, #8]
    a8d2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
    a8d4:	89e3      	ldrh	r3, [r4, #14]
    a8d6:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_find_info_rsp, params, NULL);
    a8d8:	4a0e      	ldr	r2, [pc, #56]	; (a914 <bt_gatt_discover+0x1e8>)
    a8da:	4623      	mov	r3, r4
    a8dc:	e771      	b.n	a7c2 <bt_gatt_discover+0x96>
    a8de:	4b07      	ldr	r3, [pc, #28]	; (a8fc <bt_gatt_discover+0x1d0>)
    a8e0:	4a07      	ldr	r2, [pc, #28]	; (a900 <bt_gatt_discover+0x1d4>)
		BT_ERR("Invalid discovery type: %u", params->type);
    a8e2:	480d      	ldr	r0, [pc, #52]	; (a918 <bt_gatt_discover+0x1ec>)
    a8e4:	1ad2      	subs	r2, r2, r3
    a8e6:	08d2      	lsrs	r2, r2, #3
    a8e8:	0192      	lsls	r2, r2, #6
    a8ea:	f042 0201 	orr.w	r2, r2, #1
    a8ee:	f018 fe80 	bl	235f2 <log_1>
    a8f2:	e75d      	b.n	a7b0 <bt_gatt_discover+0x84>
		return -ENOTCONN;
    a8f4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a8f8:	e734      	b.n	a764 <bt_gatt_discover+0x38>
    a8fa:	bf00      	nop
    a8fc:	0002bf50 	.word	0x0002bf50
    a900:	0002c008 	.word	0x0002c008
    a904:	0002f7d5 	.word	0x0002f7d5
    a908:	00025b09 	.word	0x00025b09
    a90c:	0000a91d 	.word	0x0000a91d
    a910:	0000aa35 	.word	0x0000aa35
    a914:	0000ad1d 	.word	0x0000ad1d
    a918:	0002f7ea 	.word	0x0002f7ea

0000a91c <gatt_read_group_rsp>:
{
    a91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a920:	b08e      	sub	sp, #56	; 0x38
    a922:	4690      	mov	r8, r2
    a924:	9f16      	ldr	r7, [sp, #88]	; 0x58
    a926:	4606      	mov	r6, r0
	if (err) {
    a928:	460a      	mov	r2, r1
    a92a:	b131      	cbz	r1, a93a <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	463a      	mov	r2, r7
    a930:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    a932:	4798      	blx	r3
}
    a934:	b00e      	add	sp, #56	; 0x38
    a936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (rsp->len) {
    a93a:	f898 1000 	ldrb.w	r1, [r8]
    a93e:	2906      	cmp	r1, #6
    a940:	d011      	beq.n	a966 <gatt_read_group_rsp+0x4a>
    a942:	2914      	cmp	r1, #20
    a944:	d00e      	beq.n	a964 <gatt_read_group_rsp+0x48>
    a946:	4a38      	ldr	r2, [pc, #224]	; (aa28 <gatt_read_group_rsp+0x10c>)
    a948:	4b38      	ldr	r3, [pc, #224]	; (aa2c <gatt_read_group_rsp+0x110>)
		BT_ERR("Invalid data len %u", rsp->len);
    a94a:	4839      	ldr	r0, [pc, #228]	; (aa30 <gatt_read_group_rsp+0x114>)
    a94c:	1ad2      	subs	r2, r2, r3
    a94e:	08d2      	lsrs	r2, r2, #3
    a950:	0192      	lsls	r2, r2, #6
    a952:	f042 0201 	orr.w	r2, r2, #1
    a956:	f018 fe4c 	bl	235f2 <log_1>
	params->func(conn, NULL, params);
    a95a:	687b      	ldr	r3, [r7, #4]
    a95c:	463a      	mov	r2, r7
    a95e:	2100      	movs	r1, #0
    a960:	4630      	mov	r0, r6
    a962:	e7e6      	b.n	a932 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    a964:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    a966:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
    a968:	2500      	movs	r5, #0
		u.uuid.type = BT_UUID_TYPE_128;
    a96a:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
    a96e:	b29c      	uxth	r4, r3
    a970:	f108 0901 	add.w	r9, r8, #1
		struct bt_gatt_attr attr = {};
    a974:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
    a976:	f898 3000 	ldrb.w	r3, [r8]
    a97a:	42a3      	cmp	r3, r4
    a97c:	d909      	bls.n	a992 <gatt_read_group_rsp+0x76>
	if (length == 0U && end_handle) {
    a97e:	2c00      	cmp	r4, #0
    a980:	d1eb      	bne.n	a95a <gatt_read_group_rsp+0x3e>
    a982:	2d00      	cmp	r5, #0
    a984:	d0e9      	beq.n	a95a <gatt_read_group_rsp+0x3e>
	gatt_discover_next(conn, handle, params);
    a986:	463a      	mov	r2, r7
    a988:	4629      	mov	r1, r5
    a98a:	4630      	mov	r0, r6
    a98c:	f01b f89f 	bl	25ace <gatt_discover_next>
    a990:	e7d0      	b.n	a934 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
    a992:	2214      	movs	r2, #20
    a994:	2100      	movs	r1, #0
    a996:	a809      	add	r0, sp, #36	; 0x24
    a998:	f020 ff00 	bl	2b79c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    a99c:	f8b9 2000 	ldrh.w	r2, [r9]
    a9a0:	b293      	uxth	r3, r2
		if (!start_handle) {
    a9a2:	2b00      	cmp	r3, #0
    a9a4:	d0d9      	beq.n	a95a <gatt_read_group_rsp+0x3e>
		end_handle = sys_le16_to_cpu(data->end_handle);
    a9a6:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    a9aa:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
    a9ac:	2d00      	cmp	r5, #0
    a9ae:	d0d4      	beq.n	a95a <gatt_read_group_rsp+0x3e>
    a9b0:	42ab      	cmp	r3, r5
    a9b2:	d8d2      	bhi.n	a95a <gatt_read_group_rsp+0x3e>
		switch (u.uuid.type) {
    a9b4:	f89d 3010 	ldrb.w	r3, [sp, #16]
    a9b8:	b31b      	cbz	r3, aa02 <gatt_read_group_rsp+0xe6>
    a9ba:	2b02      	cmp	r3, #2
    a9bc:	d026      	beq.n	aa0c <gatt_read_group_rsp+0xf0>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    a9be:	7c3b      	ldrb	r3, [r7, #16]
		value.end_handle = end_handle;
    a9c0:	f8ad 100c 	strh.w	r1, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    a9c4:	2b00      	cmp	r3, #0
    a9c6:	f642 0301 	movw	r3, #10241	; 0x2801
    a9ca:	bf08      	it	eq
    a9cc:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    a9d0:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
    a9d4:	ab04      	add	r3, sp, #16
    a9d6:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
    a9d8:	ab01      	add	r3, sp, #4
    a9da:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
    a9dc:	ab02      	add	r3, sp, #8
		attr.handle = start_handle;
    a9de:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		attr.user_data = &value;
    a9e2:	930c      	str	r3, [sp, #48]	; 0x30
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    a9e4:	f88d a004 	strb.w	sl, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    a9e8:	687b      	ldr	r3, [r7, #4]
    a9ea:	463a      	mov	r2, r7
    a9ec:	a909      	add	r1, sp, #36	; 0x24
    a9ee:	4630      	mov	r0, r6
    a9f0:	4798      	blx	r3
    a9f2:	2800      	cmp	r0, #0
    a9f4:	d09e      	beq.n	a934 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    a9f6:	f898 2000 	ldrb.w	r2, [r8]
    a9fa:	1aa4      	subs	r4, r4, r2
    a9fc:	b2a4      	uxth	r4, r4
    a9fe:	4491      	add	r9, r2
    aa00:	e7b9      	b.n	a976 <gatt_read_group_rsp+0x5a>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    aa02:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    aa06:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    aa0a:	e7d8      	b.n	a9be <gatt_read_group_rsp+0xa2>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    aa0c:	f109 0304 	add.w	r3, r9, #4
    aa10:	f10d 0011 	add.w	r0, sp, #17
    aa14:	f109 0c14 	add.w	ip, r9, #20
    aa18:	f853 eb04 	ldr.w	lr, [r3], #4
    aa1c:	f840 eb04 	str.w	lr, [r0], #4
    aa20:	4563      	cmp	r3, ip
    aa22:	d1f9      	bne.n	aa18 <gatt_read_group_rsp+0xfc>
    aa24:	e7cb      	b.n	a9be <gatt_read_group_rsp+0xa2>
    aa26:	bf00      	nop
    aa28:	0002c008 	.word	0x0002c008
    aa2c:	0002bf50 	.word	0x0002bf50
    aa30:	0002f805 	.word	0x0002f805

0000aa34 <gatt_read_type_rsp>:
{
    aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aa38:	b091      	sub	sp, #68	; 0x44
    aa3a:	4690      	mov	r8, r2
    aa3c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    aa3e:	4607      	mov	r7, r0
	if (err) {
    aa40:	460a      	mov	r2, r1
    aa42:	b121      	cbz	r1, aa4e <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
    aa44:	686b      	ldr	r3, [r5, #4]
    aa46:	462a      	mov	r2, r5
    aa48:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
    aa4a:	4798      	blx	r3
	if (!handle) {
    aa4c:	e06d      	b.n	ab2a <gatt_read_type_rsp+0xf6>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    aa4e:	7c28      	ldrb	r0, [r5, #16]
    aa50:	f898 1000 	ldrb.w	r1, [r8]
    aa54:	2802      	cmp	r0, #2
    aa56:	f040 8087 	bne.w	ab68 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    aa5a:	2906      	cmp	r1, #6
    aa5c:	d019      	beq.n	aa92 <gatt_read_type_rsp+0x5e>
    aa5e:	2908      	cmp	r1, #8
    aa60:	f040 8086 	bne.w	ab70 <gatt_read_type_rsp+0x13c>
		u.uuid.type = BT_UUID_TYPE_16;
    aa64:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    aa68:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    aa6a:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    aa6c:	b2a4      	uxth	r4, r4
    aa6e:	f108 0901 	add.w	r9, r8, #1
			value.uuid = &u.uuid;
    aa72:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    aa76:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    aa78:	f898 3000 	ldrb.w	r3, [r8]
    aa7c:	42a3      	cmp	r3, r4
    aa7e:	d90b      	bls.n	aa98 <gatt_read_type_rsp+0x64>
	if (length == 0U && handle) {
    aa80:	b914      	cbnz	r4, aa88 <gatt_read_type_rsp+0x54>
    aa82:	2e00      	cmp	r6, #0
    aa84:	f040 80e1 	bne.w	ac4a <gatt_read_type_rsp+0x216>
	params->func(conn, NULL, params);
    aa88:	686b      	ldr	r3, [r5, #4]
    aa8a:	462a      	mov	r2, r5
    aa8c:	2100      	movs	r1, #0
    aa8e:	4638      	mov	r0, r7
    aa90:	e7db      	b.n	aa4a <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
    aa92:	f88d 0018 	strb.w	r0, [sp, #24]
		break;
    aa96:	e7e7      	b.n	aa68 <gatt_read_type_rsp+0x34>
		handle = sys_le16_to_cpu(data->handle);
    aa98:	f8b9 3000 	ldrh.w	r3, [r9]
    aa9c:	b29e      	uxth	r6, r3
		if (!handle) {
    aa9e:	2e00      	cmp	r6, #0
    aaa0:	d0f2      	beq.n	aa88 <gatt_read_type_rsp+0x54>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    aaa2:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    aaa6:	f8ad 2014 	strh.w	r2, [sp, #20]
    aaaa:	b290      	uxth	r0, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    aaac:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    aab0:	f8ad 2016 	strh.w	r2, [sp, #22]
    aab4:	b291      	uxth	r1, r2
		switch (u.uuid.type) {
    aab6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    aaba:	b182      	cbz	r2, aade <gatt_read_type_rsp+0xaa>
    aabc:	2a02      	cmp	r2, #2
    aabe:	d019      	beq.n	aaf4 <gatt_read_type_rsp+0xc0>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    aac0:	6829      	ldr	r1, [r5, #0]
    aac2:	2900      	cmp	r1, #0
    aac4:	d037      	beq.n	ab36 <gatt_read_type_rsp+0x102>
    aac6:	4650      	mov	r0, sl
    aac8:	9301      	str	r3, [sp, #4]
    aaca:	f019 fe23 	bl	24714 <bt_uuid_cmp>
    aace:	9b01      	ldr	r3, [sp, #4]
    aad0:	b388      	cbz	r0, ab36 <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    aad2:	f898 2000 	ldrb.w	r2, [r8]
    aad6:	1aa4      	subs	r4, r4, r2
    aad8:	b2a4      	uxth	r4, r4
    aada:	4491      	add	r9, r2
    aadc:	e7cc      	b.n	aa78 <gatt_read_type_rsp+0x44>
			value.uuid = &u.uuid;
    aade:	f8cd a010 	str.w	sl, [sp, #16]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    aae2:	f899 2006 	ldrb.w	r2, [r9, #6]
    aae6:	f899 1007 	ldrb.w	r1, [r9, #7]
    aaea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    aaee:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    aaf2:	e7e5      	b.n	aac0 <gatt_read_type_rsp+0x8c>
			params->_included.start_handle = value.start_handle;
    aaf4:	8168      	strh	r0, [r5, #10]
			params->_included.end_handle = value.end_handle;
    aaf6:	81a9      	strh	r1, [r5, #12]
			params->_included.attr_handle = handle;
    aaf8:	812e      	strh	r6, [r5, #8]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    aafa:	210a      	movs	r1, #10
    aafc:	4638      	mov	r0, r7
    aafe:	9201      	str	r2, [sp, #4]
    ab00:	f7fe f894 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    ab04:	4604      	mov	r4, r0
    ab06:	b198      	cbz	r0, ab30 <gatt_read_type_rsp+0xfc>
    ab08:	9a01      	ldr	r2, [sp, #4]
    ab0a:	3008      	adds	r0, #8
    ab0c:	4611      	mov	r1, r2
    ab0e:	f01b f99b 	bl	25e48 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
    ab12:	896b      	ldrh	r3, [r5, #10]
    ab14:	8003      	strh	r3, [r0, #0]
	return gatt_send(conn, buf, read_included_uuid_cb, params, NULL);
    ab16:	4a50      	ldr	r2, [pc, #320]	; (ac58 <gatt_read_type_rsp+0x224>)
    ab18:	462b      	mov	r3, r5
    ab1a:	4621      	mov	r1, r4
    ab1c:	4638      	mov	r0, r7
    ab1e:	f7ff f833 	bl	9b88 <gatt_send.constprop.0>
			return read_included_uuid(conn, params);
    ab22:	b286      	uxth	r6, r0
	if (!handle) {
    ab24:	2e00      	cmp	r6, #0
    ab26:	f040 8090 	bne.w	ac4a <gatt_read_type_rsp+0x216>
}
    ab2a:	b011      	add	sp, #68	; 0x44
    ab2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOMEM;
    ab30:	f06f 000b 	mvn.w	r0, #11
    ab34:	e7f5      	b.n	ab22 <gatt_read_type_rsp+0xee>
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab36:	f642 0202 	movw	r2, #10242	; 0x2802
    ab3a:	f8ad 200e 	strh.w	r2, [sp, #14]
    ab3e:	aa03      	add	r2, sp, #12
    ab40:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    ab44:	aa04      	add	r2, sp, #16
    ab46:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    ab48:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab4c:	f88d b00c 	strb.w	fp, [sp, #12]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ab50:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab52:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ab56:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ab5a:	462a      	mov	r2, r5
    ab5c:	a90b      	add	r1, sp, #44	; 0x2c
    ab5e:	4638      	mov	r0, r7
    ab60:	4798      	blx	r3
    ab62:	2800      	cmp	r0, #0
    ab64:	d1b5      	bne.n	aad2 <gatt_read_type_rsp+0x9e>
    ab66:	e7e0      	b.n	ab2a <gatt_read_type_rsp+0xf6>
	switch (rsp->len) {
    ab68:	2907      	cmp	r1, #7
    ab6a:	d00d      	beq.n	ab88 <gatt_read_type_rsp+0x154>
    ab6c:	2915      	cmp	r1, #21
    ab6e:	d00a      	beq.n	ab86 <gatt_read_type_rsp+0x152>
    ab70:	4b3a      	ldr	r3, [pc, #232]	; (ac5c <gatt_read_type_rsp+0x228>)
    ab72:	4a3b      	ldr	r2, [pc, #236]	; (ac60 <gatt_read_type_rsp+0x22c>)
		BT_ERR("Invalid data len %u", rsp->len);
    ab74:	483b      	ldr	r0, [pc, #236]	; (ac64 <gatt_read_type_rsp+0x230>)
    ab76:	1ad2      	subs	r2, r2, r3
    ab78:	08d2      	lsrs	r2, r2, #3
    ab7a:	0192      	lsls	r2, r2, #6
    ab7c:	f042 0201 	orr.w	r2, r2, #1
    ab80:	f018 fd37 	bl	235f2 <log_1>
		goto done;
    ab84:	e780      	b.n	aa88 <gatt_read_type_rsp+0x54>
		u.uuid.type = BT_UUID_TYPE_128;
    ab86:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
    ab88:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    ab8a:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_128;
    ab8c:	f88d 2018 	strb.w	r2, [sp, #24]
	for (length--, pdu = rsp->data; length >= rsp->len;
    ab90:	b2a4      	uxth	r4, r4
    ab92:	f108 0901 	add.w	r9, r8, #1
    ab96:	f10d 0a18 	add.w	sl, sp, #24
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ab9a:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    ab9c:	f898 3000 	ldrb.w	r3, [r8]
    aba0:	42a3      	cmp	r3, r4
    aba2:	f63f af6d 	bhi.w	aa80 <gatt_read_type_rsp+0x4c>
		handle = sys_le16_to_cpu(data->handle);
    aba6:	f8b9 3000 	ldrh.w	r3, [r9]
    abaa:	b29e      	uxth	r6, r3
		if (!handle) {
    abac:	2e00      	cmp	r6, #0
    abae:	f43f af6b 	beq.w	aa88 <gatt_read_type_rsp+0x54>
		switch (u.uuid.type) {
    abb2:	f89d 2018 	ldrb.w	r2, [sp, #24]
    abb6:	b17a      	cbz	r2, abd8 <gatt_read_type_rsp+0x1a4>
    abb8:	2a02      	cmp	r2, #2
    abba:	d016      	beq.n	abea <gatt_read_type_rsp+0x1b6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    abbc:	6829      	ldr	r1, [r5, #0]
    abbe:	b309      	cbz	r1, ac04 <gatt_read_type_rsp+0x1d0>
    abc0:	4650      	mov	r0, sl
    abc2:	9301      	str	r3, [sp, #4]
    abc4:	f019 fda6 	bl	24714 <bt_uuid_cmp>
    abc8:	9b01      	ldr	r3, [sp, #4]
    abca:	b1d8      	cbz	r0, ac04 <gatt_read_type_rsp+0x1d0>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    abcc:	f898 2000 	ldrb.w	r2, [r8]
    abd0:	1aa4      	subs	r4, r4, r2
    abd2:	b2a4      	uxth	r4, r4
    abd4:	4491      	add	r9, r2
    abd6:	e7e1      	b.n	ab9c <gatt_read_type_rsp+0x168>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    abd8:	f899 2005 	ldrb.w	r2, [r9, #5]
    abdc:	f899 1006 	ldrb.w	r1, [r9, #6]
    abe0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    abe4:	f8ad 201a 	strh.w	r2, [sp, #26]
			break;
    abe8:	e7e8      	b.n	abbc <gatt_read_type_rsp+0x188>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    abea:	f109 0205 	add.w	r2, r9, #5
    abee:	f10d 0119 	add.w	r1, sp, #25
    abf2:	f109 0015 	add.w	r0, r9, #21
    abf6:	f852 cb04 	ldr.w	ip, [r2], #4
    abfa:	f841 cb04 	str.w	ip, [r1], #4
    abfe:	4282      	cmp	r2, r0
    ac00:	d1f9      	bne.n	abf6 <gatt_read_type_rsp+0x1c2>
    ac02:	e7db      	b.n	abbc <gatt_read_type_rsp+0x188>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    ac04:	f899 2002 	ldrb.w	r2, [r9, #2]
    ac08:	f88d 2016 	strb.w	r2, [sp, #22]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ac0c:	f642 0203 	movw	r2, #10243	; 0x2803
    ac10:	f8ad 200e 	strh.w	r2, [sp, #14]
    ac14:	aa03      	add	r2, sp, #12
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    ac16:	f8b9 1003 	ldrh.w	r1, [r9, #3]
    ac1a:	f8ad 1014 	strh.w	r1, [sp, #20]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ac1e:	e9cd 2b0b 	strd	r2, fp, [sp, #44]	; 0x2c
    ac22:	aa04      	add	r2, sp, #16
    ac24:	920e      	str	r2, [sp, #56]	; 0x38
		attr.handle = handle;
    ac26:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    ac2a:	f8cd a010 	str.w	sl, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac2e:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ac30:	f88d b00c 	strb.w	fp, [sp, #12]
    ac34:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ac38:	f88d b03e 	strb.w	fp, [sp, #62]	; 0x3e
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ac3c:	462a      	mov	r2, r5
    ac3e:	a90b      	add	r1, sp, #44	; 0x2c
    ac40:	4638      	mov	r0, r7
    ac42:	4798      	blx	r3
    ac44:	2800      	cmp	r0, #0
    ac46:	d1c1      	bne.n	abcc <gatt_read_type_rsp+0x198>
    ac48:	e76f      	b.n	ab2a <gatt_read_type_rsp+0xf6>
	gatt_discover_next(conn, handle, params);
    ac4a:	462a      	mov	r2, r5
    ac4c:	4631      	mov	r1, r6
    ac4e:	4638      	mov	r0, r7
    ac50:	f01a ff3d 	bl	25ace <gatt_discover_next>
    ac54:	e769      	b.n	ab2a <gatt_read_type_rsp+0xf6>
    ac56:	bf00      	nop
    ac58:	0000ac69 	.word	0x0000ac69
    ac5c:	0002bf50 	.word	0x0002bf50
    ac60:	0002c008 	.word	0x0002c008
    ac64:	0002f805 	.word	0x0002f805

0000ac68 <read_included_uuid_cb>:
{
    ac68:	b570      	push	{r4, r5, r6, lr}
    ac6a:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    ac6c:	2b10      	cmp	r3, #16
{
    ac6e:	9c12      	ldr	r4, [sp, #72]	; 0x48
    ac70:	4605      	mov	r5, r0
    ac72:	4619      	mov	r1, r3
	if (length != 16U) {
    ac74:	d010      	beq.n	ac98 <read_included_uuid_cb+0x30>
    ac76:	4b26      	ldr	r3, [pc, #152]	; (ad10 <read_included_uuid_cb+0xa8>)
    ac78:	4a26      	ldr	r2, [pc, #152]	; (ad14 <read_included_uuid_cb+0xac>)
		BT_ERR("Invalid data len %u", length);
    ac7a:	4827      	ldr	r0, [pc, #156]	; (ad18 <read_included_uuid_cb+0xb0>)
    ac7c:	1ad2      	subs	r2, r2, r3
    ac7e:	08d2      	lsrs	r2, r2, #3
    ac80:	0192      	lsls	r2, r2, #6
    ac82:	f042 0201 	orr.w	r2, r2, #1
    ac86:	f018 fcb4 	bl	235f2 <log_1>
		params->func(conn, NULL, params);
    ac8a:	6863      	ldr	r3, [r4, #4]
    ac8c:	4622      	mov	r2, r4
    ac8e:	2100      	movs	r1, #0
    ac90:	4628      	mov	r0, r5
    ac92:	4798      	blx	r3
}
    ac94:	b00e      	add	sp, #56	; 0x38
    ac96:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
    ac98:	8963      	ldrh	r3, [r4, #10]
    ac9a:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
    ac9e:	89a3      	ldrh	r3, [r4, #12]
    aca0:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
    aca4:	a804      	add	r0, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
    aca6:	2302      	movs	r3, #2
    aca8:	f88d 3010 	strb.w	r3, [sp, #16]
	value.uuid = &u.uuid;
    acac:	9002      	str	r0, [sp, #8]
	memcpy(u.u128.val, pdu, length);
    acae:	f10d 0311 	add.w	r3, sp, #17
    acb2:	f102 0110 	add.w	r1, r2, #16
    acb6:	f852 6b04 	ldr.w	r6, [r2], #4
    acba:	f843 6b04 	str.w	r6, [r3], #4
    acbe:	428a      	cmp	r2, r1
    acc0:	d1f9      	bne.n	acb6 <read_included_uuid_cb+0x4e>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    acc2:	6821      	ldr	r1, [r4, #0]
    acc4:	b9f1      	cbnz	r1, ad04 <read_included_uuid_cb+0x9c>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    acc6:	f642 0202 	movw	r2, #10242	; 0x2802
    acca:	2300      	movs	r3, #0
    accc:	f8ad 2006 	strh.w	r2, [sp, #6]
    acd0:	aa01      	add	r2, sp, #4
    acd2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    acd6:	f88d 3004 	strb.w	r3, [sp, #4]
    acda:	aa02      	add	r2, sp, #8
    acdc:	930b      	str	r3, [sp, #44]	; 0x2c
    acde:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
    ace2:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ace4:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
    ace6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    acea:	4622      	mov	r2, r4
    acec:	6863      	ldr	r3, [r4, #4]
    acee:	a909      	add	r1, sp, #36	; 0x24
    acf0:	4628      	mov	r0, r5
    acf2:	4798      	blx	r3
    acf4:	2800      	cmp	r0, #0
    acf6:	d0cd      	beq.n	ac94 <read_included_uuid_cb+0x2c>
	gatt_discover_next(conn, params->start_handle, params);
    acf8:	8921      	ldrh	r1, [r4, #8]
    acfa:	4622      	mov	r2, r4
    acfc:	4628      	mov	r0, r5
    acfe:	f01a fee6 	bl	25ace <gatt_discover_next>
	return;
    ad02:	e7c7      	b.n	ac94 <read_included_uuid_cb+0x2c>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ad04:	f019 fd06 	bl	24714 <bt_uuid_cmp>
    ad08:	2800      	cmp	r0, #0
    ad0a:	d0dc      	beq.n	acc6 <read_included_uuid_cb+0x5e>
    ad0c:	e7f4      	b.n	acf8 <read_included_uuid_cb+0x90>
    ad0e:	bf00      	nop
    ad10:	0002bf50 	.word	0x0002bf50
    ad14:	0002c008 	.word	0x0002c008
    ad18:	0002f805 	.word	0x0002f805

0000ad1c <gatt_find_info_rsp>:
{
    ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad20:	b08f      	sub	sp, #60	; 0x3c
    ad22:	4680      	mov	r8, r0
    ad24:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
    ad26:	4608      	mov	r0, r1
    ad28:	b971      	cbnz	r1, ad48 <gatt_find_info_rsp+0x2c>
	switch (rsp->format) {
    ad2a:	7811      	ldrb	r1, [r2, #0]
    ad2c:	2901      	cmp	r1, #1
    ad2e:	d011      	beq.n	ad54 <gatt_find_info_rsp+0x38>
    ad30:	2902      	cmp	r1, #2
    ad32:	d028      	beq.n	ad86 <gatt_find_info_rsp+0x6a>
    ad34:	4a51      	ldr	r2, [pc, #324]	; (ae7c <gatt_find_info_rsp+0x160>)
    ad36:	4b52      	ldr	r3, [pc, #328]	; (ae80 <gatt_find_info_rsp+0x164>)
		BT_ERR("Invalid format %u", rsp->format);
    ad38:	4852      	ldr	r0, [pc, #328]	; (ae84 <gatt_find_info_rsp+0x168>)
    ad3a:	1ad2      	subs	r2, r2, r3
    ad3c:	08d2      	lsrs	r2, r2, #3
    ad3e:	0192      	lsls	r2, r2, #6
    ad40:	f042 0201 	orr.w	r2, r2, #1
    ad44:	f018 fc55 	bl	235f2 <log_1>
	params->func(conn, NULL, params);
    ad48:	6873      	ldr	r3, [r6, #4]
    ad4a:	4632      	mov	r2, r6
    ad4c:	2100      	movs	r1, #0
    ad4e:	4640      	mov	r0, r8
    ad50:	4798      	blx	r3
    ad52:	e090      	b.n	ae76 <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_16;
    ad54:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
    ad58:	f04f 0a04 	mov.w	sl, #4
	length--;
    ad5c:	3b01      	subs	r3, #1
    ad5e:	b29b      	uxth	r3, r3
	if (length < len) {
    ad60:	4553      	cmp	r3, sl
    ad62:	d3f1      	bcc.n	ad48 <gatt_find_info_rsp+0x2c>
	for (i = length / len, pdu = rsp->info; i != 0;
    ad64:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    ad68:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    ad6c:	9300      	str	r3, [sp, #0]
    ad6e:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    ad70:	46cb      	mov	fp, r9
			skip = false;
    ad72:	464d      	mov	r5, r9
    ad74:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
    ad76:	9b00      	ldr	r3, [sp, #0]
    ad78:	b953      	cbnz	r3, ad90 <gatt_find_info_rsp+0x74>
	gatt_discover_next(conn, handle, params);
    ad7a:	4632      	mov	r2, r6
    ad7c:	4659      	mov	r1, fp
    ad7e:	4640      	mov	r0, r8
    ad80:	f01a fea5 	bl	25ace <gatt_discover_next>
	return;
    ad84:	e077      	b.n	ae76 <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_128;
    ad86:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
    ad8a:	f04f 0a12 	mov.w	sl, #18
		break;
    ad8e:	e7e5      	b.n	ad5c <gatt_find_info_rsp+0x40>
		handle = sys_le16_to_cpu(info.i16->handle);
    ad90:	8823      	ldrh	r3, [r4, #0]
    ad92:	f8ad 3004 	strh.w	r3, [sp, #4]
    ad96:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
    ad9a:	f1b9 0f00 	cmp.w	r9, #0
    ad9e:	d156      	bne.n	ae4e <gatt_find_info_rsp+0x132>
		switch (u.uuid.type) {
    ada0:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ada4:	2b00      	cmp	r3, #0
    ada6:	d03a      	beq.n	ae1e <gatt_find_info_rsp+0x102>
    ada8:	2b02      	cmp	r3, #2
    adaa:	d03f      	beq.n	ae2c <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    adac:	6831      	ldr	r1, [r6, #0]
    adae:	2900      	cmp	r1, #0
    adb0:	d148      	bne.n	ae44 <gatt_find_info_rsp+0x128>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    adb2:	7c33      	ldrb	r3, [r6, #16]
    adb4:	2b04      	cmp	r3, #4
    adb6:	d14d      	bne.n	ae54 <gatt_find_info_rsp+0x138>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    adb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    adbc:	a902      	add	r1, sp, #8
    adbe:	4638      	mov	r0, r7
    adc0:	f88d 5008 	strb.w	r5, [sp, #8]
    adc4:	f8ad 300a 	strh.w	r3, [sp, #10]
    adc8:	f019 fca4 	bl	24714 <bt_uuid_cmp>
    adcc:	b310      	cbz	r0, ae14 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    adce:	f642 0301 	movw	r3, #10241	; 0x2801
    add2:	a903      	add	r1, sp, #12
    add4:	4638      	mov	r0, r7
    add6:	f88d 500c 	strb.w	r5, [sp, #12]
    adda:	f8ad 300e 	strh.w	r3, [sp, #14]
    adde:	f019 fc99 	bl	24714 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    ade2:	b1b8      	cbz	r0, ae14 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    ade4:	f642 0302 	movw	r3, #10242	; 0x2802
    ade8:	a909      	add	r1, sp, #36	; 0x24
    adea:	4638      	mov	r0, r7
    adec:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    adf0:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    adf4:	f019 fc8e 	bl	24714 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    adf8:	b160      	cbz	r0, ae14 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    adfa:	f642 0303 	movw	r3, #10243	; 0x2803
    adfe:	a909      	add	r1, sp, #36	; 0x24
    ae00:	4638      	mov	r0, r7
    ae02:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    ae06:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    ae0a:	f019 fc83 	bl	24714 <bt_uuid_cmp>
    ae0e:	bb08      	cbnz	r0, ae54 <gatt_find_info_rsp+0x138>
				skip = true;
    ae10:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    ae14:	9b00      	ldr	r3, [sp, #0]
    ae16:	3b01      	subs	r3, #1
    ae18:	9300      	str	r3, [sp, #0]
    ae1a:	4454      	add	r4, sl
    ae1c:	e7ab      	b.n	ad76 <gatt_find_info_rsp+0x5a>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    ae1e:	78a3      	ldrb	r3, [r4, #2]
    ae20:	78e2      	ldrb	r2, [r4, #3]
    ae22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    ae26:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
    ae2a:	e7bf      	b.n	adac <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    ae2c:	1ca3      	adds	r3, r4, #2
    ae2e:	f10d 0211 	add.w	r2, sp, #17
    ae32:	f104 0112 	add.w	r1, r4, #18
    ae36:	f853 0b04 	ldr.w	r0, [r3], #4
    ae3a:	f842 0b04 	str.w	r0, [r2], #4
    ae3e:	428b      	cmp	r3, r1
    ae40:	d1f9      	bne.n	ae36 <gatt_find_info_rsp+0x11a>
    ae42:	e7b3      	b.n	adac <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    ae44:	4638      	mov	r0, r7
    ae46:	f019 fc65 	bl	24714 <bt_uuid_cmp>
    ae4a:	2800      	cmp	r0, #0
    ae4c:	d0b1      	beq.n	adb2 <gatt_find_info_rsp+0x96>
			skip = false;
    ae4e:	f04f 0900 	mov.w	r9, #0
    ae52:	e7df      	b.n	ae14 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    ae54:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ae58:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ae5c:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
    ae60:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ae64:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    ae66:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    ae6a:	4632      	mov	r2, r6
    ae6c:	a909      	add	r1, sp, #36	; 0x24
    ae6e:	4640      	mov	r0, r8
    ae70:	4798      	blx	r3
    ae72:	2800      	cmp	r0, #0
    ae74:	d1ce      	bne.n	ae14 <gatt_find_info_rsp+0xf8>
}
    ae76:	b00f      	add	sp, #60	; 0x3c
    ae78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae7c:	0002c008 	.word	0x0002c008
    ae80:	0002bf50 	.word	0x0002bf50
    ae84:	0002f819 	.word	0x0002f819

0000ae88 <bt_gatt_read>:
{
    ae88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    ae8c:	7a83      	ldrb	r3, [r0, #10]
    ae8e:	2b07      	cmp	r3, #7
{
    ae90:	4605      	mov	r5, r0
    ae92:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    ae94:	d166      	bne.n	af64 <bt_gatt_read+0xdc>
	if (params->handle_count == 0) {
    ae96:	684a      	ldr	r2, [r1, #4]
    ae98:	bb1a      	cbnz	r2, aee2 <bt_gatt_read+0x5a>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_REQ, sizeof(*req));
    ae9a:	2204      	movs	r2, #4
    ae9c:	2108      	movs	r1, #8
    ae9e:	f7fd fec5 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    aea2:	4606      	mov	r6, r0
    aea4:	b918      	cbnz	r0, aeae <bt_gatt_read+0x26>
		return -ENOMEM;
    aea6:	f06f 000b 	mvn.w	r0, #11
}
    aeaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aeae:	f100 0708 	add.w	r7, r0, #8
    aeb2:	2104      	movs	r1, #4
    aeb4:	4638      	mov	r0, r7
    aeb6:	f01a ffc7 	bl	25e48 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
    aeba:	8923      	ldrh	r3, [r4, #8]
    aebc:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    aebe:	68e1      	ldr	r1, [r4, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
    aec0:	8963      	ldrh	r3, [r4, #10]
    aec2:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
    aec4:	780b      	ldrb	r3, [r1, #0]
    aec6:	b933      	cbnz	r3, aed6 <bt_gatt_read+0x4e>
	net_buf_simple_add_le16(&buf->b, val);
    aec8:	8849      	ldrh	r1, [r1, #2]
    aeca:	4638      	mov	r0, r7
    aecc:	f01a ffd4 	bl	25e78 <net_buf_simple_add_le16>
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    aed0:	4a26      	ldr	r2, [pc, #152]	; (af6c <bt_gatt_read+0xe4>)
    aed2:	4623      	mov	r3, r4
    aed4:	e019      	b.n	af0a <bt_gatt_read+0x82>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    aed6:	2210      	movs	r2, #16
    aed8:	3101      	adds	r1, #1
    aeda:	4638      	mov	r0, r7
    aedc:	f01a ffba 	bl	25e54 <net_buf_simple_add_mem>
    aee0:	e7f6      	b.n	aed0 <bt_gatt_read+0x48>
	if (params->handle_count > 1) {
    aee2:	2a01      	cmp	r2, #1
    aee4:	d91e      	bls.n	af24 <bt_gatt_read+0x9c>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_REQ,
    aee6:	0052      	lsls	r2, r2, #1
    aee8:	210e      	movs	r1, #14
    aeea:	f7fd fe9f 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    aeee:	4606      	mov	r6, r0
    aef0:	2800      	cmp	r0, #0
    aef2:	d0d8      	beq.n	aea6 <bt_gatt_read+0x1e>
    aef4:	2700      	movs	r7, #0
	net_buf_simple_add_le16(&buf->b, val);
    aef6:	f100 0808 	add.w	r8, r0, #8
	for (i = 0U; i < params->handle_count; i++) {
    aefa:	6862      	ldr	r2, [r4, #4]
    aefc:	b2fb      	uxtb	r3, r7
    aefe:	429a      	cmp	r2, r3
    af00:	f107 0701 	add.w	r7, r7, #1
    af04:	d807      	bhi.n	af16 <bt_gatt_read+0x8e>
	return gatt_send(conn, buf, gatt_read_mult_rsp, params, NULL);
    af06:	4a1a      	ldr	r2, [pc, #104]	; (af70 <bt_gatt_read+0xe8>)
    af08:	4623      	mov	r3, r4
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af0a:	4631      	mov	r1, r6
    af0c:	4628      	mov	r0, r5
}
    af0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af12:	f7fe be39 	b.w	9b88 <gatt_send.constprop.0>
		net_buf_add_le16(buf, params->handles[i]);
    af16:	68a2      	ldr	r2, [r4, #8]
    af18:	4640      	mov	r0, r8
    af1a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    af1e:	f01a ffab 	bl	25e78 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
    af22:	e7ea      	b.n	aefa <bt_gatt_read+0x72>
	if (params->single.offset) {
    af24:	894b      	ldrh	r3, [r1, #10]
    af26:	b17b      	cbz	r3, af48 <bt_gatt_read+0xc0>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_BLOB_REQ, sizeof(*req));
    af28:	2204      	movs	r2, #4
    af2a:	210c      	movs	r1, #12
    af2c:	f7fd fe7e 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    af30:	4606      	mov	r6, r0
    af32:	2800      	cmp	r0, #0
    af34:	d0b7      	beq.n	aea6 <bt_gatt_read+0x1e>
	return net_buf_simple_add(&buf->b, len);
    af36:	2104      	movs	r1, #4
    af38:	3008      	adds	r0, #8
    af3a:	f01a ff85 	bl	25e48 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    af3e:	8923      	ldrh	r3, [r4, #8]
    af40:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
    af42:	8963      	ldrh	r3, [r4, #10]
    af44:	8043      	strh	r3, [r0, #2]
	return gatt_send(conn, buf, gatt_read_rsp, params, NULL);
    af46:	e7c3      	b.n	aed0 <bt_gatt_read+0x48>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_REQ, sizeof(*req));
    af48:	2202      	movs	r2, #2
    af4a:	210a      	movs	r1, #10
    af4c:	f7fd fe6e 	bl	8c2c <bt_att_create_pdu>
	if (!buf) {
    af50:	4606      	mov	r6, r0
    af52:	2800      	cmp	r0, #0
    af54:	d0a7      	beq.n	aea6 <bt_gatt_read+0x1e>
    af56:	2102      	movs	r1, #2
    af58:	3008      	adds	r0, #8
    af5a:	f01a ff75 	bl	25e48 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
    af5e:	8923      	ldrh	r3, [r4, #8]
    af60:	8003      	strh	r3, [r0, #0]
    af62:	e7b5      	b.n	aed0 <bt_gatt_read+0x48>
		return -ENOTCONN;
    af64:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    af68:	e79f      	b.n	aeaa <bt_gatt_read+0x22>
    af6a:	bf00      	nop
    af6c:	0000af75 	.word	0x0000af75
    af70:	00025727 	.word	0x00025727

0000af74 <gatt_read_rsp>:
{
    af74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    af78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    af7a:	4606      	mov	r6, r0
    af7c:	4690      	mov	r8, r2
    af7e:	4699      	mov	r9, r3
	if (err || !length) {
    af80:	460f      	mov	r7, r1
    af82:	b901      	cbnz	r1, af86 <gatt_read_rsp+0x12>
    af84:	b953      	cbnz	r3, af9c <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
    af86:	2300      	movs	r3, #0
    af88:	930a      	str	r3, [sp, #40]	; 0x28
    af8a:	6825      	ldr	r5, [r4, #0]
    af8c:	4622      	mov	r2, r4
    af8e:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    af90:	4630      	mov	r0, r6
    af92:	46ac      	mov	ip, r5
}
    af94:	b003      	add	sp, #12
    af96:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    af9a:	4760      	bx	ip
	if (!params->handle_count) {
    af9c:	6863      	ldr	r3, [r4, #4]
    af9e:	2b00      	cmp	r3, #0
    afa0:	d148      	bne.n	b034 <gatt_read_rsp+0xc0>
	for (length--, pdu = rsp->data; length;
    afa2:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
    afa6:	b2ad      	uxth	r5, r5
    afa8:	f102 0901 	add.w	r9, r2, #1
    afac:	b335      	cbz	r5, affc <gatt_read_rsp+0x88>
		handle = sys_le16_to_cpu(data->handle);
    afae:	f8b9 2000 	ldrh.w	r2, [r9]
    afb2:	b293      	uxth	r3, r2
		if (!handle) {
    afb4:	b963      	cbnz	r3, afd0 <gatt_read_rsp+0x5c>
    afb6:	4b30      	ldr	r3, [pc, #192]	; (b078 <gatt_read_rsp+0x104>)
    afb8:	4930      	ldr	r1, [pc, #192]	; (b07c <gatt_read_rsp+0x108>)
			BT_ERR("Invalid handle");
    afba:	4831      	ldr	r0, [pc, #196]	; (b080 <gatt_read_rsp+0x10c>)
    afbc:	1ac9      	subs	r1, r1, r3
    afbe:	08c9      	lsrs	r1, r1, #3
    afc0:	0189      	lsls	r1, r1, #6
    afc2:	f041 0101 	orr.w	r1, r1, #1
}
    afc6:	b003      	add	sp, #12
    afc8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
    afcc:	f018 bb04 	b.w	235d8 <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    afd0:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
    afd4:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
    afd6:	42ab      	cmp	r3, r5
    afd8:	bf8c      	ite	hi
    afda:	1eab      	subhi	r3, r5, #2
    afdc:	3b02      	subls	r3, #2
    afde:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
    afe0:	9300      	str	r3, [sp, #0]
    afe2:	6827      	ldr	r7, [r4, #0]
    afe4:	f109 0302 	add.w	r3, r9, #2
    afe8:	4622      	mov	r2, r4
    afea:	2100      	movs	r1, #0
    afec:	4630      	mov	r0, r6
    afee:	47b8      	blx	r7
    aff0:	2800      	cmp	r0, #0
    aff2:	d03e      	beq.n	b072 <gatt_read_rsp+0xfe>
		if (rsp->len > length) {
    aff4:	f898 1000 	ldrb.w	r1, [r8]
    aff8:	428d      	cmp	r5, r1
    affa:	d20b      	bcs.n	b014 <gatt_read_rsp+0xa0>
	if (bt_gatt_read(conn, params) < 0) {
    affc:	4621      	mov	r1, r4
    affe:	4630      	mov	r0, r6
    b000:	f7ff ff42 	bl	ae88 <bt_gatt_read>
    b004:	2800      	cmp	r0, #0
    b006:	da34      	bge.n	b072 <gatt_read_rsp+0xfe>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    b008:	2300      	movs	r3, #0
    b00a:	930a      	str	r3, [sp, #40]	; 0x28
    b00c:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    b00e:	4622      	mov	r2, r4
    b010:	210e      	movs	r1, #14
    b012:	e7bd      	b.n	af90 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
    b014:	8922      	ldrh	r2, [r4, #8]
    b016:	8960      	ldrh	r0, [r4, #10]
    b018:	4290      	cmp	r0, r2
    b01a:	d105      	bne.n	b028 <gatt_read_rsp+0xb4>
			params->func(conn, 0, params, NULL, 0);
    b01c:	2300      	movs	r3, #0
    b01e:	930a      	str	r3, [sp, #40]	; 0x28
    b020:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
    b022:	4622      	mov	r2, r4
    b024:	4619      	mov	r1, r3
    b026:	e7b3      	b.n	af90 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
    b028:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    b02a:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
    b02c:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    b02e:	b2ad      	uxth	r5, r5
    b030:	4489      	add	r9, r1
    b032:	e7bb      	b.n	afac <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
    b034:	f8cd 9000 	str.w	r9, [sp]
    b038:	4613      	mov	r3, r2
    b03a:	6825      	ldr	r5, [r4, #0]
    b03c:	4622      	mov	r2, r4
    b03e:	47a8      	blx	r5
    b040:	b1b8      	cbz	r0, b072 <gatt_read_rsp+0xfe>
	if (length < (bt_att_get_mtu(conn) - 1)) {
    b042:	4630      	mov	r0, r6
    b044:	f01a f9bf 	bl	253c6 <bt_att_get_mtu>
    b048:	3801      	subs	r0, #1
    b04a:	4581      	cmp	r9, r0
    b04c:	da03      	bge.n	b056 <gatt_read_rsp+0xe2>
		params->func(conn, 0, params, NULL, 0);
    b04e:	970a      	str	r7, [sp, #40]	; 0x28
    b050:	6825      	ldr	r5, [r4, #0]
    b052:	463b      	mov	r3, r7
    b054:	e7e5      	b.n	b022 <gatt_read_rsp+0xae>
	params->single.offset += length;
    b056:	8963      	ldrh	r3, [r4, #10]
    b058:	eb09 0503 	add.w	r5, r9, r3
    b05c:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
    b05e:	4621      	mov	r1, r4
    b060:	4630      	mov	r0, r6
    b062:	f7ff ff11 	bl	ae88 <bt_gatt_read>
    b066:	2800      	cmp	r0, #0
    b068:	da03      	bge.n	b072 <gatt_read_rsp+0xfe>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
    b06a:	970a      	str	r7, [sp, #40]	; 0x28
    b06c:	6825      	ldr	r5, [r4, #0]
    b06e:	463b      	mov	r3, r7
    b070:	e7cd      	b.n	b00e <gatt_read_rsp+0x9a>
}
    b072:	b003      	add	sp, #12
    b074:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b078:	0002bf50 	.word	0x0002bf50
    b07c:	0002c008 	.word	0x0002c008
    b080:	0002f82b 	.word	0x0002f82b

0000b084 <bt_gatt_mult_notification>:
{
    b084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b088:	b087      	sub	sp, #28
    b08a:	4682      	mov	sl, r0
    b08c:	460c      	mov	r4, r1
    b08e:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
    b090:	f7fe fae8 	bl	9664 <gatt_sub_find>
	if (!sub) {
    b094:	4607      	mov	r7, r0
    b096:	b1f8      	cbz	r0, b0d8 <bt_gatt_mult_notification+0x54>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    b098:	4632      	mov	r2, r6
    b09a:	4621      	mov	r1, r4
    b09c:	a803      	add	r0, sp, #12
    b09e:	f01a fe96 	bl	25dce <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    b0a2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    b0a6:	2b04      	cmp	r3, #4
    b0a8:	d916      	bls.n	b0d8 <bt_gatt_mult_notification+0x54>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    b0aa:	2104      	movs	r1, #4
    b0ac:	a803      	add	r0, sp, #12
    b0ae:	f01a fefd 	bl	25eac <net_buf_simple_pull_mem>
		if (len > buf.len) {
    b0b2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
    b0b6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    b0ba:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    b0bc:	4605      	mov	r5, r0
		if (len > buf.len) {
    b0be:	d20e      	bcs.n	b0de <bt_gatt_mult_notification+0x5a>
    b0c0:	4a1c      	ldr	r2, [pc, #112]	; (b134 <bt_gatt_mult_notification+0xb0>)
    b0c2:	4b1d      	ldr	r3, [pc, #116]	; (b138 <bt_gatt_mult_notification+0xb4>)
			BT_ERR("Invalid data len %u > %u", len, length);
    b0c4:	481d      	ldr	r0, [pc, #116]	; (b13c <bt_gatt_mult_notification+0xb8>)
    b0c6:	1a9b      	subs	r3, r3, r2
    b0c8:	08db      	lsrs	r3, r3, #3
    b0ca:	019b      	lsls	r3, r3, #6
    b0cc:	f043 0301 	orr.w	r3, r3, #1
    b0d0:	4632      	mov	r2, r6
    b0d2:	4641      	mov	r1, r8
    b0d4:	f018 faa1 	bl	2361a <log_2>
}
    b0d8:	b007      	add	sp, #28
    b0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    b0de:	68bb      	ldr	r3, [r7, #8]
    b0e0:	b31b      	cbz	r3, b12a <bt_gatt_mult_notification+0xa6>
    b0e2:	f1b3 0914 	subs.w	r9, r3, #20
    b0e6:	d020      	beq.n	b12a <bt_gatt_mult_notification+0xa6>
    b0e8:	681c      	ldr	r4, [r3, #0]
    b0ea:	b104      	cbz	r4, b0ee <bt_gatt_mult_notification+0x6a>
    b0ec:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
    b0ee:	462b      	mov	r3, r5
    b0f0:	f833 bb04 	ldrh.w	fp, [r3], #4
    b0f4:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
    b0f6:	f8b9 3008 	ldrh.w	r3, [r9, #8]
    b0fa:	455b      	cmp	r3, fp
    b0fc:	d10b      	bne.n	b116 <bt_gatt_mult_notification+0x92>
			if (params->notify(conn, params, nfy->value, len) ==
    b0fe:	9a01      	ldr	r2, [sp, #4]
    b100:	f8d9 5000 	ldr.w	r5, [r9]
    b104:	4643      	mov	r3, r8
    b106:	4649      	mov	r1, r9
    b108:	4650      	mov	r0, sl
    b10a:	47a8      	blx	r5
    b10c:	b918      	cbnz	r0, b116 <bt_gatt_mult_notification+0x92>
				bt_gatt_unsubscribe(conn, params);
    b10e:	4649      	mov	r1, r9
    b110:	4650      	mov	r0, sl
    b112:	f01a fd44 	bl	25b9e <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    b116:	b144      	cbz	r4, b12a <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b118:	f114 0314 	adds.w	r3, r4, #20
    b11c:	d002      	beq.n	b124 <bt_gatt_mult_notification+0xa0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b11e:	6963      	ldr	r3, [r4, #20]
    b120:	b103      	cbz	r3, b124 <bt_gatt_mult_notification+0xa0>
    b122:	3b14      	subs	r3, #20
{
    b124:	46a1      	mov	r9, r4
    b126:	461c      	mov	r4, r3
    b128:	e7e5      	b.n	b0f6 <bt_gatt_mult_notification+0x72>
		net_buf_simple_pull_mem(&buf, len);
    b12a:	4641      	mov	r1, r8
    b12c:	a803      	add	r0, sp, #12
    b12e:	f01a febd 	bl	25eac <net_buf_simple_pull_mem>
    b132:	e7b6      	b.n	b0a2 <bt_gatt_mult_notification+0x1e>
    b134:	0002bf50 	.word	0x0002bf50
    b138:	0002c008 	.word	0x0002c008
    b13c:	0002f83a 	.word	0x0002f83a

0000b140 <bt_gatt_connected>:
{
    b140:	b570      	push	{r4, r5, r6, lr}
    b142:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b144:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    b148:	4605      	mov	r5, r0
	data.conn = conn;
    b14a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    b14c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b14e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    b150:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b154:	4631      	mov	r1, r6
    b156:	f019 fc25 	bl	249a4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b15a:	b190      	cbz	r0, b182 <bt_gatt_connected+0x42>
		if (conn->id) {
    b15c:	7a2a      	ldrb	r2, [r5, #8]
    b15e:	b30a      	cbz	r2, b1a4 <bt_gatt_connected+0x64>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b160:	ac02      	add	r4, sp, #8
    b162:	2104      	movs	r1, #4
    b164:	4620      	mov	r0, r4
    b166:	f017 fd6d 	bl	22c44 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b16a:	9400      	str	r4, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b16c:	4a1a      	ldr	r2, [pc, #104]	; (b1d8 <bt_gatt_connected+0x98>)
    b16e:	2124      	movs	r1, #36	; 0x24
    b170:	a805      	add	r0, sp, #20
    b172:	4633      	mov	r3, r6
    b174:	f7fa f808 	bl	5188 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    b178:	aa05      	add	r2, sp, #20
    b17a:	4918      	ldr	r1, [pc, #96]	; (b1dc <bt_gatt_connected+0x9c>)
    b17c:	4610      	mov	r0, r2
    b17e:	f7f8 f9f5 	bl	356c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    b182:	2001      	movs	r0, #1
    b184:	4a16      	ldr	r2, [pc, #88]	; (b1e0 <bt_gatt_connected+0xa0>)
    b186:	ab03      	add	r3, sp, #12
    b188:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b18c:	f01a fc6e 	bl	25a6c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    b190:	4628      	mov	r0, r5
    b192:	f7fe fa67 	bl	9664 <gatt_sub_find>
	if (!sub) {
    b196:	b118      	cbz	r0, b1a0 <bt_gatt_connected+0x60>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    b198:	6884      	ldr	r4, [r0, #8]
    b19a:	b10c      	cbz	r4, b1a0 <bt_gatt_connected+0x60>
    b19c:	3c14      	subs	r4, #20
    b19e:	b91c      	cbnz	r4, b1a8 <bt_gatt_connected+0x68>
}
    b1a0:	b00e      	add	sp, #56	; 0x38
    b1a2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    b1a4:	9200      	str	r2, [sp, #0]
    b1a6:	e7e1      	b.n	b16c <bt_gatt_connected+0x2c>
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    b1a8:	7a28      	ldrb	r0, [r5, #8]
    b1aa:	4631      	mov	r1, r6
    b1ac:	f019 fbfa 	bl	249a4 <bt_addr_le_is_bonded>
    b1b0:	b160      	cbz	r0, b1cc <bt_gatt_connected+0x8c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b1b2:	f3bf 8f5b 	dmb	ish
    b1b6:	6923      	ldr	r3, [r4, #16]
    b1b8:	f3bf 8f5b 	dmb	ish
    b1bc:	079b      	lsls	r3, r3, #30
    b1be:	d405      	bmi.n	b1cc <bt_gatt_connected+0x8c>
			gatt_write_ccc(conn, params->ccc_handle, params->value,
    b1c0:	89a2      	ldrh	r2, [r4, #12]
    b1c2:	8961      	ldrh	r1, [r4, #10]
    b1c4:	4623      	mov	r3, r4
    b1c6:	4628      	mov	r0, r5
    b1c8:	f7fe fe10 	bl	9dec <gatt_write_ccc.constprop.0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b1cc:	f114 0f14 	cmn.w	r4, #20
    b1d0:	d0e6      	beq.n	b1a0 <bt_gatt_connected+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b1d2:	6964      	ldr	r4, [r4, #20]
    b1d4:	e7e1      	b.n	b19a <bt_gatt_connected+0x5a>
    b1d6:	bf00      	nop
    b1d8:	0002f794 	.word	0x0002f794
    b1dc:	0000a3dd 	.word	0x0000a3dd
    b1e0:	0000a63d 	.word	0x0000a63d

0000b1e4 <db_hash_read>:
{
    b1e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1e8:	4606      	mov	r6, r0
	err = k_delayed_work_cancel(&db_hash_work);
    b1ea:	480c      	ldr	r0, [pc, #48]	; (b21c <db_hash_read+0x38>)
{
    b1ec:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    b1f0:	4614      	mov	r4, r2
    b1f2:	461d      	mov	r5, r3
	err = k_delayed_work_cancel(&db_hash_work);
    b1f4:	f020 f872 	bl	2b2dc <k_delayed_work_cancel>
	if (!err) {
    b1f8:	b910      	cbnz	r0, b200 <db_hash_read+0x1c>
		db_hash_gen(true);
    b1fa:	2001      	movs	r0, #1
    b1fc:	f7ff f844 	bl	a288 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    b200:	2101      	movs	r1, #1
    b202:	4630      	mov	r0, r6
    b204:	f01a fd6f 	bl	25ce6 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b208:	2310      	movs	r3, #16
    b20a:	9306      	str	r3, [sp, #24]
    b20c:	463a      	mov	r2, r7
    b20e:	4629      	mov	r1, r5
    b210:	4620      	mov	r0, r4
    b212:	4b03      	ldr	r3, [pc, #12]	; (b220 <db_hash_read+0x3c>)
}
    b214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    b218:	f01a bad5 	b.w	257c6 <bt_gatt_attr_read.constprop.0>
    b21c:	20001098 	.word	0x20001098
    b220:	200085df 	.word	0x200085df

0000b224 <bt_gatt_store_ccc>:
{
    b224:	b570      	push	{r4, r5, r6, lr}
    b226:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    b228:	2300      	movs	r3, #0
{
    b22a:	4604      	mov	r4, r0
    b22c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    b22e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    b230:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    b234:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    b236:	4a18      	ldr	r2, [pc, #96]	; (b298 <bt_gatt_store_ccc+0x74>)
    b238:	ab0d      	add	r3, sp, #52	; 0x34
    b23a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b23e:	2001      	movs	r0, #1
    b240:	f01a fc14 	bl	25a6c <bt_gatt_foreach_attr>
	if (id) {
    b244:	b31c      	cbz	r4, b28e <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    b246:	ae03      	add	r6, sp, #12
    b248:	4622      	mov	r2, r4
    b24a:	2104      	movs	r1, #4
    b24c:	4630      	mov	r0, r6
    b24e:	f017 fcf9 	bl	22c44 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    b252:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b254:	4a11      	ldr	r2, [pc, #68]	; (b29c <bt_gatt_store_ccc+0x78>)
    b256:	462b      	mov	r3, r5
    b258:	2124      	movs	r1, #36	; 0x24
    b25a:	a804      	add	r0, sp, #16
    b25c:	f7f9 ff94 	bl	5188 <bt_settings_encode_key>
	if (save.count) {
    b260:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    b262:	b1b2      	cbz	r2, b292 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    b264:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    b266:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    b268:	a804      	add	r0, sp, #16
    b26a:	f7f8 f92f 	bl	34cc <settings_save_one>
	if (err) {
    b26e:	4604      	mov	r4, r0
    b270:	b150      	cbz	r0, b288 <bt_gatt_store_ccc+0x64>
    b272:	4a0b      	ldr	r2, [pc, #44]	; (b2a0 <bt_gatt_store_ccc+0x7c>)
    b274:	4b0b      	ldr	r3, [pc, #44]	; (b2a4 <bt_gatt_store_ccc+0x80>)
    b276:	1ad2      	subs	r2, r2, r3
    b278:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    b27a:	0192      	lsls	r2, r2, #6
    b27c:	4601      	mov	r1, r0
    b27e:	f042 0201 	orr.w	r2, r2, #1
    b282:	4809      	ldr	r0, [pc, #36]	; (b2a8 <bt_gatt_store_ccc+0x84>)
    b284:	f018 f9b5 	bl	235f2 <log_1>
}
    b288:	4620      	mov	r0, r4
    b28a:	b040      	add	sp, #256	; 0x100
    b28c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    b28e:	9400      	str	r4, [sp, #0]
    b290:	e7e0      	b.n	b254 <bt_gatt_store_ccc+0x30>
		str = NULL;
    b292:	4611      	mov	r1, r2
    b294:	e7e8      	b.n	b268 <bt_gatt_store_ccc+0x44>
    b296:	bf00      	nop
    b298:	00009705 	.word	0x00009705
    b29c:	0002f794 	.word	0x0002f794
    b2a0:	0002c008 	.word	0x0002c008
    b2a4:	0002bf50 	.word	0x0002bf50
    b2a8:	0002f853 	.word	0x0002f853

0000b2ac <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b2b0:	4604      	mov	r4, r0
    b2b2:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b2b4:	4603      	mov	r3, r0
    b2b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b2ba:	2001      	movs	r0, #1
    b2bc:	4a54      	ldr	r2, [pc, #336]	; (b410 <bt_gatt_disconnected+0x164>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b2be:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    b2c2:	f01a fbd3 	bl	25a6c <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b2c6:	7a20      	ldrb	r0, [r4, #8]
    b2c8:	4629      	mov	r1, r5
    b2ca:	f019 fb6b 	bl	249a4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    b2ce:	2800      	cmp	r0, #0
    b2d0:	d035      	beq.n	b33e <bt_gatt_disconnected+0x92>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    b2d2:	4629      	mov	r1, r5
    b2d4:	7a20      	ldrb	r0, [r4, #8]
    b2d6:	f7ff ffa5 	bl	b224 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    b2da:	4620      	mov	r0, r4
    b2dc:	f7fe f994 	bl	9608 <find_cf_cfg>
	if (!cfg) {
    b2e0:	4606      	mov	r6, r0
    b2e2:	2800      	cmp	r0, #0
    b2e4:	d064      	beq.n	b3b0 <bt_gatt_disconnected+0x104>
		if (conn->id) {
    b2e6:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    b2e8:	3608      	adds	r6, #8
		if (conn->id) {
    b2ea:	2a00      	cmp	r2, #0
    b2ec:	d062      	beq.n	b3b4 <bt_gatt_disconnected+0x108>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    b2ee:	af02      	add	r7, sp, #8
    b2f0:	2104      	movs	r1, #4
    b2f2:	4638      	mov	r0, r7
    b2f4:	f017 fca6 	bl	22c44 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    b2f8:	9700      	str	r7, [sp, #0]
    b2fa:	462b      	mov	r3, r5
    b2fc:	4a45      	ldr	r2, [pc, #276]	; (b414 <bt_gatt_disconnected+0x168>)
    b2fe:	2124      	movs	r1, #36	; 0x24
    b300:	a803      	add	r0, sp, #12
    b302:	f7f9 ff41 	bl	5188 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    b306:	7a23      	ldrb	r3, [r4, #8]
    b308:	2701      	movs	r7, #1
    b30a:	b93b      	cbnz	r3, b31c <bt_gatt_disconnected+0x70>
		bt_settings_encode_key(key, sizeof(key), "cf",
    b30c:	2300      	movs	r3, #0
    b30e:	9300      	str	r3, [sp, #0]
    b310:	4a40      	ldr	r2, [pc, #256]	; (b414 <bt_gatt_disconnected+0x168>)
    b312:	462b      	mov	r3, r5
    b314:	2124      	movs	r1, #36	; 0x24
    b316:	a803      	add	r0, sp, #12
    b318:	f7f9 ff36 	bl	5188 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    b31c:	4631      	mov	r1, r6
    b31e:	463a      	mov	r2, r7
    b320:	a803      	add	r0, sp, #12
    b322:	f7f8 f8d3 	bl	34cc <settings_save_one>
	if (err) {
    b326:	4601      	mov	r1, r0
    b328:	b148      	cbz	r0, b33e <bt_gatt_disconnected+0x92>
    b32a:	4a3b      	ldr	r2, [pc, #236]	; (b418 <bt_gatt_disconnected+0x16c>)
    b32c:	4b3b      	ldr	r3, [pc, #236]	; (b41c <bt_gatt_disconnected+0x170>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    b32e:	483c      	ldr	r0, [pc, #240]	; (b420 <bt_gatt_disconnected+0x174>)
    b330:	1ad2      	subs	r2, r2, r3
    b332:	08d2      	lsrs	r2, r2, #3
    b334:	0192      	lsls	r2, r2, #6
    b336:	f042 0201 	orr.w	r2, r2, #1
    b33a:	f018 f95a 	bl	235f2 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b33e:	7a20      	ldrb	r0, [r4, #8]
    b340:	4629      	mov	r1, r5
    b342:	f019 fb2f 	bl	249a4 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    b346:	b150      	cbz	r0, b35e <bt_gatt_disconnected+0xb2>
		struct addr_with_id addr_with_id = {
    b348:	7a23      	ldrb	r3, [r4, #8]
    b34a:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b34e:	4a35      	ldr	r2, [pc, #212]	; (b424 <bt_gatt_disconnected+0x178>)
		struct addr_with_id addr_with_id = {
    b350:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    b352:	ab03      	add	r3, sp, #12
    b354:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b358:	2001      	movs	r0, #1
    b35a:	f01a fb87 	bl	25a6c <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    b35e:	4620      	mov	r0, r4
    b360:	f7fe f980 	bl	9664 <gatt_sub_find>
	if (!sub) {
    b364:	4607      	mov	r7, r0
    b366:	b3c0      	cbz	r0, b3da <bt_gatt_disconnected+0x12e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b368:	6883      	ldr	r3, [r0, #8]
    b36a:	b3b3      	cbz	r3, b3da <bt_gatt_disconnected+0x12e>
    b36c:	f1b3 0814 	subs.w	r8, r3, #20
    b370:	d033      	beq.n	b3da <bt_gatt_disconnected+0x12e>
    b372:	681e      	ldr	r6, [r3, #0]
    b374:	b106      	cbz	r6, b378 <bt_gatt_disconnected+0xcc>
    b376:	3e14      	subs	r6, #20
    b378:	f04f 0b00 	mov.w	fp, #0
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b37c:	f107 0901 	add.w	r9, r7, #1
			params->value = 0U;
    b380:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b382:	7a20      	ldrb	r0, [r4, #8]
    b384:	4629      	mov	r1, r5
    b386:	f019 fb0d 	bl	249a4 <bt_addr_le_is_bonded>
    b38a:	b9a8      	cbnz	r0, b3b8 <bt_gatt_disconnected+0x10c>
			params->value = 0U;
    b38c:	f8a8 a00c 	strh.w	sl, [r8, #12]
			gatt_sub_remove(conn, sub, prev, params);
    b390:	4643      	mov	r3, r8
    b392:	465a      	mov	r2, fp
    b394:	4639      	mov	r1, r7
    b396:	4620      	mov	r0, r4
    b398:	f01a facc 	bl	25934 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    b39c:	b1ee      	cbz	r6, b3da <bt_gatt_disconnected+0x12e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    b39e:	f116 0114 	adds.w	r1, r6, #20
    b3a2:	d002      	beq.n	b3aa <bt_gatt_disconnected+0xfe>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b3a4:	6971      	ldr	r1, [r6, #20]
    b3a6:	b101      	cbz	r1, b3aa <bt_gatt_disconnected+0xfe>
    b3a8:	3914      	subs	r1, #20
    b3aa:	46b0      	mov	r8, r6
    b3ac:	460e      	mov	r6, r1
    b3ae:	e7e8      	b.n	b382 <bt_gatt_disconnected+0xd6>
		len = 0;
    b3b0:	4607      	mov	r7, r0
    b3b2:	e7ab      	b.n	b30c <bt_gatt_disconnected+0x60>
    b3b4:	2701      	movs	r7, #1
    b3b6:	e7a9      	b.n	b30c <bt_gatt_disconnected+0x60>
    b3b8:	f3bf 8f5b 	dmb	ish
    b3bc:	f8d8 3010 	ldr.w	r3, [r8, #16]
    b3c0:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    b3c4:	07db      	lsls	r3, r3, #31
    b3c6:	d4e1      	bmi.n	b38c <bt_gatt_disconnected+0xe0>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    b3c8:	787b      	ldrb	r3, [r7, #1]
    b3ca:	b11b      	cbz	r3, b3d4 <bt_gatt_disconnected+0x128>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    b3cc:	4629      	mov	r1, r5
    b3ce:	4648      	mov	r0, r9
    b3d0:	f01a f9c4 	bl	2575c <bt_addr_le_copy>
			prev = &params->node;
    b3d4:	f108 0b14 	add.w	fp, r8, #20
    b3d8:	e7e0      	b.n	b39c <bt_gatt_disconnected+0xf0>
	cfg = find_cf_cfg(conn);
    b3da:	4620      	mov	r0, r4
    b3dc:	f7fe f914 	bl	9608 <find_cf_cfg>
	if (!cfg) {
    b3e0:	4606      	mov	r6, r0
    b3e2:	b138      	cbz	r0, b3f4 <bt_gatt_disconnected+0x148>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    b3e4:	7a20      	ldrb	r0, [r4, #8]
    b3e6:	4629      	mov	r1, r5
    b3e8:	f019 fadc 	bl	249a4 <bt_addr_le_is_bonded>
    b3ec:	b928      	cbnz	r0, b3fa <bt_gatt_disconnected+0x14e>
		clear_cf_cfg(cfg);
    b3ee:	4630      	mov	r0, r6
    b3f0:	f01a fa6c 	bl	258cc <clear_cf_cfg>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    b3f4:	b00d      	add	sp, #52	; 0x34
    b3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    b3fa:	4629      	mov	r1, r5
    b3fc:	1c70      	adds	r0, r6, #1
    b3fe:	f01a f9ad 	bl	2575c <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b402:	f06f 0102 	mvn.w	r1, #2
    b406:	f106 000c 	add.w	r0, r6, #12
    b40a:	f01a f97d 	bl	25708 <atomic_and>
}
    b40e:	e7f1      	b.n	b3f4 <bt_gatt_disconnected+0x148>
    b410:	00009afd 	.word	0x00009afd
    b414:	0002f89d 	.word	0x0002f89d
    b418:	0002c008 	.word	0x0002c008
    b41c:	0002bf50 	.word	0x0002bf50
    b420:	0002f871 	.word	0x0002f871
    b424:	00009ad5 	.word	0x00009ad5

0000b428 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
    b428:	4a0b      	ldr	r2, [pc, #44]	; (b458 <bt_smp_accept+0x30>)
{
    b42a:	b508      	push	{r3, lr}
    b42c:	4603      	mov	r3, r0
		if (smp->chan.conn) {
    b42e:	6810      	ldr	r0, [r2, #0]
    b430:	b918      	cbnz	r0, b43a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
    b432:	4b0a      	ldr	r3, [pc, #40]	; (b45c <bt_smp_accept+0x34>)
    b434:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
    b436:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    b438:	bd08      	pop	{r3, pc}
    b43a:	4909      	ldr	r1, [pc, #36]	; (b460 <bt_smp_accept+0x38>)
    b43c:	4a09      	ldr	r2, [pc, #36]	; (b464 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    b43e:	480a      	ldr	r0, [pc, #40]	; (b468 <bt_smp_accept+0x40>)
    b440:	1a52      	subs	r2, r2, r1
    b442:	08d2      	lsrs	r2, r2, #3
    b444:	0192      	lsls	r2, r2, #6
    b446:	f042 0201 	orr.w	r2, r2, #1
    b44a:	4619      	mov	r1, r3
    b44c:	f018 f8d1 	bl	235f2 <log_1>
	return -ENOMEM;
    b450:	f06f 000b 	mvn.w	r0, #11
    b454:	e7f0      	b.n	b438 <bt_smp_accept+0x10>
    b456:	bf00      	nop
    b458:	20001120 	.word	0x20001120
    b45c:	0002c580 	.word	0x0002c580
    b460:	0002bf50 	.word	0x0002bf50
    b464:	0002c030 	.word	0x0002c030
    b468:	0002f8ae 	.word	0x0002f8ae

0000b46c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    b46c:	b470      	push	{r4, r5, r6}
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b46e:	1e54      	subs	r4, r2, #1
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b470:	1dc5      	adds	r5, r0, #7
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b472:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b474:	f025 0503 	bic.w	r5, r5, #3
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b478:	fb01 f604 	mul.w	r6, r1, r4
	*mem_head = mem_pool;
    b47c:	6018      	str	r0, [r3, #0]
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b47e:	802a      	strh	r2, [r5, #0]
		     sizeof(mem_pool));
	while (mem_count--) {
    b480:	1e93      	subs	r3, r2, #2
    b482:	2200      	movs	r2, #0
    b484:	5182      	str	r2, [r0, r6]
    b486:	b17c      	cbz	r4, b4a8 <mem_init+0x3c>
    b488:	b29b      	uxth	r3, r3
    b48a:	fb03 1401 	mla	r4, r3, r1, r1
    b48e:	fb03 f201 	mul.w	r2, r3, r1
    b492:	4420      	add	r0, r4
    b494:	1b12      	subs	r2, r2, r4
    b496:	f64f 74ff 	movw	r4, #65535	; 0xffff
    b49a:	3b01      	subs	r3, #1
    b49c:	b29b      	uxth	r3, r3
    b49e:	42a3      	cmp	r3, r4
    b4a0:	5080      	str	r0, [r0, r2]
    b4a2:	eba0 0001 	sub.w	r0, r0, r1
    b4a6:	d1f8      	bne.n	b49a <mem_init+0x2e>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
    b4a8:	bc70      	pop	{r4, r5, r6}
    b4aa:	4770      	bx	lr

0000b4ac <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    b4ac:	4603      	mov	r3, r0
	if (*mem_head) {
    b4ae:	6800      	ldr	r0, [r0, #0]
    b4b0:	b180      	cbz	r0, b4d4 <mem_acquire+0x28>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    b4b2:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
    b4b4:	b162      	cbz	r2, b4d0 <mem_acquire+0x24>
{
    b4b6:	b410      	push	{r4}
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b4b8:	1dc4      	adds	r4, r0, #7
    b4ba:	f024 0403 	bic.w	r4, r4, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b4be:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b4c0:	8824      	ldrh	r4, [r4, #0]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b4c2:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
    b4c6:	3c01      	subs	r4, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b4c8:	800c      	strh	r4, [r1, #0]
		*mem_head = head;
		return mem;
	}

	return NULL;
}
    b4ca:	bc10      	pop	{r4}
		*mem_head = head;
    b4cc:	601a      	str	r2, [r3, #0]
}
    b4ce:	4770      	bx	lr
		*mem_head = head;
    b4d0:	601a      	str	r2, [r3, #0]
		return mem;
    b4d2:	4770      	bx	lr
}
    b4d4:	4770      	bx	lr
    b4d6:	bf00      	nop

0000b4d8 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    b4d8:	b410      	push	{r4}
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    b4da:	680b      	ldr	r3, [r1, #0]
{
    b4dc:	b083      	sub	sp, #12
    b4de:	4602      	mov	r2, r0
    b4e0:	9001      	str	r0, [sp, #4]
	if (*mem_head) {
    b4e2:	b183      	cbz	r3, b506 <mem_release+0x2e>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b4e4:	3307      	adds	r3, #7
    b4e6:	f023 0303 	bic.w	r3, r3, #3
    b4ea:	8818      	ldrh	r0, [r3, #0]
    b4ec:	3001      	adds	r0, #1
    b4ee:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    b4f0:	4613      	mov	r3, r2
    b4f2:	680c      	ldr	r4, [r1, #0]
    b4f4:	f843 4b07 	str.w	r4, [r3], #7
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    b4f8:	f023 0303 	bic.w	r3, r3, #3
    b4fc:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
    b4fe:	600a      	str	r2, [r1, #0]
}
    b500:	b003      	add	sp, #12
    b502:	bc10      	pop	{r4}
    b504:	4770      	bx	lr
    b506:	2001      	movs	r0, #1
    b508:	e7f2      	b.n	b4f0 <mem_release+0x18>
    b50a:	bf00      	nop

0000b50c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    b50c:	fb02 0001 	mla	r0, r2, r1, r0
    b510:	4770      	bx	lr
    b512:	bf00      	nop

0000b514 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    b514:	1a40      	subs	r0, r0, r1
    b516:	b280      	uxth	r0, r0
}
    b518:	fbb0 f0f2 	udiv	r0, r0, r2
    b51c:	4770      	bx	lr
    b51e:	bf00      	nop

0000b520 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    b520:	1e53      	subs	r3, r2, #1
	src += len;
    b522:	4411      	add	r1, r2
	while (len--) {
    b524:	b29b      	uxth	r3, r3
    b526:	b142      	cbz	r2, b53a <mem_rcopy+0x1a>
    b528:	43db      	mvns	r3, r3
    b52a:	18ca      	adds	r2, r1, r3
    b52c:	3801      	subs	r0, #1
		*dst++ = *--src;
    b52e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    b532:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    b536:	4291      	cmp	r1, r2
    b538:	d1f9      	bne.n	b52e <mem_rcopy+0xe>
	}
}
    b53a:	4770      	bx	lr

0000b53c <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    b53c:	4401      	add	r1, r0
    b53e:	e002      	b.n	b546 <mem_nz+0xa>
		if (*src++) {
    b540:	f810 3b01 	ldrb.w	r3, [r0], #1
    b544:	b91b      	cbnz	r3, b54e <mem_nz+0x12>
	while (len--) {
    b546:	4288      	cmp	r0, r1
    b548:	d1fa      	bne.n	b540 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    b54a:	2000      	movs	r0, #0
    b54c:	4770      	bx	lr
			return 1;
    b54e:	2001      	movs	r0, #1
}
    b550:	4770      	bx	lr
    b552:	bf00      	nop

0000b554 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    b554:	6010      	str	r0, [r2, #0]
    b556:	6008      	str	r0, [r1, #0]

	return link;
}
    b558:	4770      	bx	lr
    b55a:	bf00      	nop

0000b55c <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    b55c:	680a      	ldr	r2, [r1, #0]
{
    b55e:	4603      	mov	r3, r0
	if (*head != *tail) {
    b560:	6800      	ldr	r0, [r0, #0]
    b562:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    b564:	bf05      	ittet	eq
    b566:	2200      	moveq	r2, #0
    b568:	600a      	streq	r2, [r1, #0]
		return NULL;
    b56a:	2000      	movne	r0, #0
	*head = *tail = NULL;
    b56c:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    b56e:	4770      	bx	lr

0000b570 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    b570:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    b572:	6814      	ldr	r4, [r2, #0]
    b574:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    b576:	6814      	ldr	r4, [r2, #0]
    b578:	6061      	str	r1, [r4, #4]
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */

	return link;
}
    b57a:	bc10      	pop	{r4}
	*tail = link; /* Commit: enqueue of memq node */
    b57c:	6010      	str	r0, [r2, #0]
}
    b57e:	4770      	bx	lr

0000b580 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    b580:	4288      	cmp	r0, r1
    b582:	d003      	beq.n	b58c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    b584:	b11a      	cbz	r2, b58e <memq_peek+0xe>
		*mem = head->mem;
    b586:	6843      	ldr	r3, [r0, #4]
    b588:	6013      	str	r3, [r2, #0]
    b58a:	4770      	bx	lr
		return NULL;
    b58c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    b58e:	4770      	bx	lr

0000b590 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    b590:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    b592:	4283      	cmp	r3, r0
    b594:	d009      	beq.n	b5aa <memq_dequeue+0x1a>
	if (mem) {
    b596:	b12a      	cbz	r2, b5a4 <memq_dequeue+0x14>
		*mem = head->mem;
    b598:	6858      	ldr	r0, [r3, #4]
    b59a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    b59c:	681a      	ldr	r2, [r3, #0]
    b59e:	600a      	str	r2, [r1, #0]

	return old_head;
}
    b5a0:	4618      	mov	r0, r3
    b5a2:	4770      	bx	lr
	if (old_head == NULL) {
    b5a4:	2b00      	cmp	r3, #0
    b5a6:	d1f9      	bne.n	b59c <memq_dequeue+0xc>
    b5a8:	e7fa      	b.n	b5a0 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    b5aa:	2300      	movs	r3, #0
    b5ac:	e7f8      	b.n	b5a0 <memq_dequeue+0x10>
    b5ae:	bf00      	nop

0000b5b0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    b5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b4:	f8df 8034 	ldr.w	r8, [pc, #52]	; b5ec <mayfly_init+0x3c>
    b5b8:	4e0b      	ldr	r6, [pc, #44]	; (b5e8 <mayfly_init+0x38>)
    b5ba:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    b5bc:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    b5c0:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    b5c2:	1d22      	adds	r2, r4, #4
    b5c4:	4621      	mov	r1, r4
    b5c6:	4628      	mov	r0, r5
    b5c8:	3c0c      	subs	r4, #12
    b5ca:	f7ff ffc3 	bl	b554 <memq_init>
		while (caller_id--) {
    b5ce:	42b4      	cmp	r4, r6
    b5d0:	f1a5 0508 	sub.w	r5, r5, #8
    b5d4:	d1f5      	bne.n	b5c2 <mayfly_init+0x12>
	while (callee_id--) {
    b5d6:	3f04      	subs	r7, #4
    b5d8:	1d3b      	adds	r3, r7, #4
    b5da:	f1a8 0820 	sub.w	r8, r8, #32
    b5de:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    b5e2:	d1eb      	bne.n	b5bc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5e8:	20002b0c 	.word	0x20002b0c
    b5ec:	20002a7c 	.word	0x20002a7c

0000b5f0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    b5f0:	b430      	push	{r4, r5}
    b5f2:	4603      	mov	r3, r0
    b5f4:	460c      	mov	r4, r1
	if (enable) {
    b5f6:	b19a      	cbz	r2, b620 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    b5f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b5fc:	0108      	lsls	r0, r1, #4
    b5fe:	4d14      	ldr	r5, [pc, #80]	; (b650 <mayfly_enable+0x60>)
    b600:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b604:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b608:	4429      	add	r1, r5
    b60a:	7a48      	ldrb	r0, [r1, #9]
    b60c:	7a0d      	ldrb	r5, [r1, #8]
    b60e:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    b610:	bf04      	itt	eq
    b612:	3001      	addeq	r0, #1
    b614:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    b616:	4621      	mov	r1, r4
    b618:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    b61a:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    b61c:	f00c bc38 	b.w	17e90 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    b620:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    b624:	4d0a      	ldr	r5, [pc, #40]	; (b650 <mayfly_enable+0x60>)
    b626:	0112      	lsls	r2, r2, #4
    b628:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b62c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b630:	442b      	add	r3, r5
    b632:	7a9d      	ldrb	r5, [r3, #10]
    b634:	7ada      	ldrb	r2, [r3, #11]
    b636:	42aa      	cmp	r2, r5
    b638:	d001      	beq.n	b63e <mayfly_enable+0x4e>
}
    b63a:	bc30      	pop	{r4, r5}
    b63c:	4770      	bx	lr
			mfp[callee_id] = 1U;
    b63e:	4d05      	ldr	r5, [pc, #20]	; (b654 <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    b640:	3201      	adds	r2, #1
    b642:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    b644:	2301      	movs	r3, #1
    b646:	546b      	strb	r3, [r5, r1]
}
    b648:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    b64a:	f00c bc77 	b.w	17f3c <mayfly_pend>
    b64e:	bf00      	nop
    b650:	20002a88 	.word	0x20002a88
    b654:	20002a84 	.word	0x20002a84

0000b658 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    b658:	b570      	push	{r4, r5, r6, lr}
    b65a:	461c      	mov	r4, r3
    b65c:	4606      	mov	r6, r0
    b65e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    b660:	b322      	cbz	r2, b6ac <mayfly_enqueue+0x54>
    b662:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    b664:	7822      	ldrb	r2, [r4, #0]
    b666:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b668:	f012 0203 	ands.w	r2, r2, #3
    b66c:	d005      	beq.n	b67a <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    b66e:	2a01      	cmp	r2, #1
    b670:	d040      	beq.n	b6f4 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    b672:	3301      	adds	r3, #1
    b674:	b2db      	uxtb	r3, r3
    b676:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    b678:	e00f      	b.n	b69a <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b67a:	2230      	movs	r2, #48	; 0x30
    b67c:	2104      	movs	r1, #4
    b67e:	fb12 1105 	smlabb	r1, r2, r5, r1
    b682:	220c      	movs	r2, #12
    b684:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    b688:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b68a:	491b      	ldr	r1, [pc, #108]	; (b6f8 <mayfly_enqueue+0xa0>)
    b68c:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    b68e:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b690:	440a      	add	r2, r1
	m->_req = ack + 1;
    b692:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b694:	4621      	mov	r1, r4
    b696:	f7ff ff6b 	bl	b570 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    b69a:	4b18      	ldr	r3, [pc, #96]	; (b6fc <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    b69c:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    b69e:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    b6a0:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    b6a2:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    b6a4:	f00c fc4a 	bl	17f3c <mayfly_pend>

	return 0;
    b6a8:	2000      	movs	r0, #0
}
    b6aa:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b6ac:	f00c fc30 	bl	17f10 <mayfly_prio_is_equal>
    b6b0:	2800      	cmp	r0, #0
    b6b2:	d0d6      	beq.n	b662 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    b6b4:	4629      	mov	r1, r5
    b6b6:	4630      	mov	r0, r6
    b6b8:	f00c fc0a 	bl	17ed0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b6bc:	2800      	cmp	r0, #0
    b6be:	d0d0      	beq.n	b662 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    b6c0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    b6c4:	0111      	lsls	r1, r2, #4
    b6c6:	480c      	ldr	r0, [pc, #48]	; (b6f8 <mayfly_enqueue+0xa0>)
    b6c8:	7863      	ldrb	r3, [r4, #1]
    b6ca:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    b6ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    b6d2:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    b6d4:	7a91      	ldrb	r1, [r2, #10]
    b6d6:	7ad2      	ldrb	r2, [r2, #11]
    b6d8:	4291      	cmp	r1, r2
    b6da:	d1c3      	bne.n	b664 <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    b6dc:	7822      	ldrb	r2, [r4, #0]
    b6de:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b6e0:	0792      	lsls	r2, r2, #30
    b6e2:	d002      	beq.n	b6ea <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    b6e4:	3302      	adds	r3, #2
    b6e6:	b2db      	uxtb	r3, r3
    b6e8:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    b6ea:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b6ee:	4798      	blx	r3
		return 0;
    b6f0:	2000      	movs	r0, #0
}
    b6f2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    b6f4:	4610      	mov	r0, r2
}
    b6f6:	bd70      	pop	{r4, r5, r6, pc}
    b6f8:	20002a88 	.word	0x20002a88
    b6fc:	20002a84 	.word	0x20002a84

0000b700 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    b700:	494e      	ldr	r1, [pc, #312]	; (b83c <mayfly_run+0x13c>)
    b702:	5c0b      	ldrb	r3, [r1, r0]
    b704:	2b00      	cmp	r3, #0
    b706:	f000 8098 	beq.w	b83a <mayfly_run+0x13a>
{
    b70a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b70e:	4b4c      	ldr	r3, [pc, #304]	; (b840 <mayfly_run+0x140>)
    b710:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    b714:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    b716:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b718:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    b71c:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    b71e:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b722:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    b726:	9203      	str	r2, [sp, #12]
    b728:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    b72c:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    b72e:	f04f 0903 	mov.w	r9, #3
    b732:	4688      	mov	r8, r1
    b734:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    b736:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    b738:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    b73c:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    b73e:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    b740:	f7ff ff1e 	bl	b580 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    b744:	f107 0624 	add.w	r6, r7, #36	; 0x24
    b748:	4683      	mov	fp, r0
    b74a:	2800      	cmp	r0, #0
    b74c:	d034      	beq.n	b7b8 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    b74e:	9c05      	ldr	r4, [sp, #20]
    b750:	7825      	ldrb	r5, [r4, #0]
    b752:	7863      	ldrb	r3, [r4, #1]
    b754:	1aed      	subs	r5, r5, r3
    b756:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    b75a:	2d01      	cmp	r5, #1
    b75c:	d106      	bne.n	b76c <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    b75e:	3b01      	subs	r3, #1
    b760:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    b762:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b766:	4798      	blx	r3
    b768:	9c05      	ldr	r4, [sp, #20]
    b76a:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    b76c:	f894 c000 	ldrb.w	ip, [r4]
    b770:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    b772:	ebac 0303 	sub.w	r3, ip, r3
    b776:	f003 0303 	and.w	r3, r3, #3
    b77a:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    b77c:	f04f 0200 	mov.w	r2, #0
    b780:	4631      	mov	r1, r6
	req = m->_req;
    b782:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    b786:	d00d      	beq.n	b7a4 <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    b788:	f7ff ff02 	bl	b590 <memq_dequeue>
		ack = m->_ack;
    b78c:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b78e:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    b790:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    b794:	1a9b      	subs	r3, r3, r2
    b796:	f003 0303 	and.w	r3, r3, #3
    b79a:	2b01      	cmp	r3, #1
		m->_ack = req;
    b79c:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b7a0:	d044      	beq.n	b82c <mayfly_run+0x12c>
    b7a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    b7a4:	4601      	mov	r1, r0
    b7a6:	aa05      	add	r2, sp, #20
    b7a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
    b7aa:	f7ff fee9 	bl	b580 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    b7ae:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    b7b0:	4683      	mov	fp, r0
			if (state == 1U) {
    b7b2:	d029      	beq.n	b808 <mayfly_run+0x108>
		while (link) {
    b7b4:	2800      	cmp	r0, #0
    b7b6:	d1ca      	bne.n	b74e <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    b7b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    b7bc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    b7c0:	429a      	cmp	r2, r3
    b7c2:	d003      	beq.n	b7cc <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    b7c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    b7c8:	2301      	movs	r3, #1
    b7ca:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    b7cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    b7d0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    b7d4:	429a      	cmp	r2, r3
    b7d6:	d003      	beq.n	b7e0 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    b7d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    b7dc:	2301      	movs	r3, #1
    b7de:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    b7e0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b7e4:	fa5f f989 	uxtb.w	r9, r9
    b7e8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    b7ec:	f1a7 070c 	sub.w	r7, r7, #12
    b7f0:	d1a1      	bne.n	b736 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    b7f2:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    b7f6:	b1b3      	cbz	r3, b826 <mayfly_run+0x126>
    b7f8:	9b03      	ldr	r3, [sp, #12]
    b7fa:	b9a3      	cbnz	r3, b826 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    b7fc:	461a      	mov	r2, r3
    b7fe:	4651      	mov	r1, sl
    b800:	4650      	mov	r0, sl
    b802:	f00c fb45 	bl	17e90 <mayfly_enable_cb>
    b806:	e00e      	b.n	b826 <mayfly_run+0x126>
				if (caller_id || link) {
    b808:	f1b9 0f00 	cmp.w	r9, #0
    b80c:	d101      	bne.n	b812 <mayfly_run+0x112>
    b80e:	2800      	cmp	r0, #0
    b810:	d0d2      	beq.n	b7b8 <mayfly_run+0xb8>
    b812:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    b816:	4a09      	ldr	r2, [pc, #36]	; (b83c <mayfly_run+0x13c>)
    b818:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    b81a:	4651      	mov	r1, sl
    b81c:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    b81e:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    b822:	f00c fb8b 	bl	17f3c <mayfly_pend>
	}
}
    b826:	b007      	add	sp, #28
    b828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    b82c:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b82e:	4621      	mov	r1, r4
    b830:	4658      	mov	r0, fp
    b832:	4642      	mov	r2, r8
    b834:	f7ff fe9c 	bl	b570 <memq_enqueue>
    b838:	e7b3      	b.n	b7a2 <mayfly_run+0xa2>
    b83a:	4770      	bx	lr
    b83c:	20002a84 	.word	0x20002a84
    b840:	20002a88 	.word	0x20002a88

0000b844 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    b844:	b1a1      	cbz	r1, b870 <util_ones_count_get+0x2c>
    b846:	1e4b      	subs	r3, r1, #1
    b848:	b2db      	uxtb	r3, r3
{
    b84a:	b410      	push	{r4}
    b84c:	1e41      	subs	r1, r0, #1
    b84e:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    b850:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    b852:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    b856:	b13b      	cbz	r3, b868 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    b858:	b25b      	sxtb	r3, r3
    b85a:	1e5a      	subs	r2, r3, #1
    b85c:	4013      	ands	r3, r2
			one_count++;
    b85e:	3001      	adds	r0, #1
		while (bite) {
    b860:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    b864:	b2c0      	uxtb	r0, r0
		while (bite) {
    b866:	d1f7      	bne.n	b858 <util_ones_count_get+0x14>
	while (octets_len--) {
    b868:	42a1      	cmp	r1, r4
    b86a:	d1f2      	bne.n	b852 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    b86c:	bc10      	pop	{r4}
    b86e:	4770      	bx	lr
	uint8_t one_count = 0U;
    b870:	4608      	mov	r0, r1
}
    b872:	4770      	bx	lr

0000b874 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    b878:	7f82      	ldrb	r2, [r0, #30]
{
    b87a:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    b87c:	2301      	movs	r3, #1
	if (instance->job_guard) {
    b87e:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    b880:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    b882:	2a00      	cmp	r2, #0
    b884:	d15b      	bne.n	b93e <ticker_worker+0xca>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    b886:	7f43      	ldrb	r3, [r0, #29]
    b888:	2bff      	cmp	r3, #255	; 0xff
    b88a:	4681      	mov	r9, r0
    b88c:	d056      	beq.n	b93c <ticker_worker+0xc8>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    b88e:	f00b fe6b 	bl	17568 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b892:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b896:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    b89a:	f899 601d 	ldrb.w	r6, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b89e:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b8a0:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b8a2:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b8a6:	f000 813b 	beq.w	bb20 <ticker_worker+0x2ac>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    b8aa:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    b8ae:	455b      	cmp	r3, fp
    b8b0:	bf94      	ite	ls
    b8b2:	2300      	movls	r3, #0
    b8b4:	2301      	movhi	r3, #1
    b8b6:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    b8b8:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    b8ba:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    b8be:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    b8c2:	d046      	beq.n	b952 <ticker_worker+0xde>
			must_expire_skip = 1U;
    b8c4:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    b8c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    b8cc:	eb07 1406 	add.w	r4, r7, r6, lsl #4
    b8d0:	0136      	lsls	r6, r6, #4
		ticks_to_expire = ticker->ticks_to_expire;
    b8d2:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b8d4:	455a      	cmp	r2, fp
    b8d6:	d83a      	bhi.n	b94e <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b8d8:	f894 a002 	ldrb.w	sl, [r4, #2]
    b8dc:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    b8de:	5dbe      	ldrb	r6, [r7, r6]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b8e0:	eba3 030a 	sub.w	r3, r3, sl
    b8e4:	b2db      	uxtb	r3, r3
    b8e6:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    b8e8:	ebab 0b02 	sub.w	fp, fp, r2
		ticks_expired += ticks_to_expire;
    b8ec:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b8ee:	d12c      	bne.n	b94a <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    b8f0:	69a0      	ldr	r0, [r4, #24]
    b8f2:	2800      	cmp	r0, #0
    b8f4:	d056      	beq.n	b9a4 <ticker_worker+0x130>
    b8f6:	9b01      	ldr	r3, [sp, #4]
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	f000 808d 	beq.w	ba18 <ticker_worker+0x1a4>
    b8fe:	8be3      	ldrh	r3, [r4, #30]
    b900:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    b902:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    b904:	b13b      	cbz	r3, b916 <ticker_worker+0xa2>
    b906:	681a      	ldr	r2, [r3, #0]
    b908:	b11a      	cbz	r2, b912 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    b90a:	7a1a      	ldrb	r2, [r3, #8]
    b90c:	2a00      	cmp	r2, #0
    b90e:	f000 80f4 	beq.w	bafa <ticker_worker+0x286>
				ext_data->reschedule_state =
    b912:	2200      	movs	r2, #0
    b914:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    b916:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    b918:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    b91c:	3201      	adds	r2, #1
    b91e:	b292      	uxth	r2, r2
    b920:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    b922:	b179      	cbz	r1, b944 <ticker_worker+0xd0>
    b924:	8ba1      	ldrh	r1, [r4, #28]
    b926:	4291      	cmp	r1, r2
    b928:	d20c      	bcs.n	b944 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    b92a:	2b00      	cmp	r3, #0
    b92c:	f000 80fb 	beq.w	bb26 <ticker_worker+0x2b2>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    b930:	7a1a      	ldrb	r2, [r3, #8]
    b932:	2a01      	cmp	r2, #1
    b934:	d006      	beq.n	b944 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    b936:	f04f 0c01 	mov.w	ip, #1
    b93a:	e037      	b.n	b9ac <ticker_worker+0x138>
		instance->worker_trigger = 0U;
    b93c:	77c2      	strb	r2, [r0, #31]
}
    b93e:	b00d      	add	sp, #52	; 0x34
    b940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    b944:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b948:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    b94a:	2eff      	cmp	r6, #255	; 0xff
    b94c:	d1bc      	bne.n	b8c8 <ticker_worker+0x54>
    b94e:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    b952:	f899 300b 	ldrb.w	r3, [r9, #11]
    b956:	f899 200a 	ldrb.w	r2, [r9, #10]
    b95a:	429a      	cmp	r2, r3
    b95c:	d10a      	bne.n	b974 <ticker_worker+0x100>
	uint8_t idx = *ticks_elapsed_index + 1;
    b95e:	3201      	adds	r2, #1
    b960:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    b962:	2a02      	cmp	r2, #2
    b964:	bf1c      	itt	ne
    b966:	4613      	movne	r3, r2
    b968:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    b96a:	9a04      	ldr	r2, [sp, #16]
    b96c:	f889 200b 	strb.w	r2, [r9, #11]
    b970:	bf08      	it	eq
    b972:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b974:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b978:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b97c:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    b980:	2200      	movs	r2, #0
    b982:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b986:	464b      	mov	r3, r9
    b988:	2201      	movs	r2, #1
    b98a:	2104      	movs	r1, #4
    b98c:	2003      	movs	r0, #3
    b98e:	46a4      	mov	ip, r4
}
    b990:	b00d      	add	sp, #52	; 0x34
    b992:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b996:	4760      	bx	ip
    b998:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    b99c:	f8dd a020 	ldr.w	sl, [sp, #32]
    b9a0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    b9a2:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    b9a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b9a6:	b1db      	cbz	r3, b9e0 <ticker_worker+0x16c>
    b9a8:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
    b9ac:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
    b9ae:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
    b9b0:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    b9b2:	605a      	str	r2, [r3, #4]
		ticker->ack--;
    b9b4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b9b8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    b9ba:	2d00      	cmp	r5, #0
    b9bc:	d0c5      	beq.n	b94a <ticker_worker+0xd6>
					   ticks_expired -
    b9be:	9b02      	ldr	r3, [sp, #8]
    b9c0:	6962      	ldr	r2, [r4, #20]
    b9c2:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    b9c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b9c6:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    b9c8:	eba8 0202 	sub.w	r2, r8, r2
    b9cc:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    b9ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    b9d2:	f1bc 0f00 	cmp.w	ip, #0
    b9d6:	d013      	beq.n	ba00 <ticker_worker+0x18c>
    b9d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b9dc:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
    b9de:	e7b4      	b.n	b94a <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    b9e0:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    b9e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b9e6:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    b9e8:	2d00      	cmp	r5, #0
    b9ea:	d0ae      	beq.n	b94a <ticker_worker+0xd6>
					   ticks_expired -
    b9ec:	9b02      	ldr	r3, [sp, #8]
    b9ee:	6962      	ldr	r2, [r4, #20]
    b9f0:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    b9f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    b9f4:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    b9f6:	eba8 0202 	sub.w	r2, r8, r2
    b9fa:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    b9fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ba00:	8be2      	ldrh	r2, [r4, #30]
    ba02:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    ba04:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    ba06:	2300      	movs	r3, #0
					slot_reserved = 1U;
    ba08:	429a      	cmp	r2, r3
    ba0a:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
    ba0c:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    ba0e:	bf18      	it	ne
    ba10:	2201      	movne	r2, #1
    ba12:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
    ba14:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    ba16:	e798      	b.n	b94a <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    ba18:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    ba1c:	9305      	str	r3, [sp, #20]
    ba1e:	3380      	adds	r3, #128	; 0x80
    ba20:	d0c0      	beq.n	b9a4 <ticker_worker+0x130>
    ba22:	2eff      	cmp	r6, #255	; 0xff
    ba24:	d0be      	beq.n	b9a4 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    ba26:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    ba28:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    ba2a:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    ba2c:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    ba2e:	bf28      	it	cs
    ba30:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    ba32:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    ba34:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    ba36:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
    ba3a:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    ba3c:	fb03 2302 	mla	r3, r3, r2, r2
    ba40:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    ba42:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    ba46:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    ba48:	4633      	mov	r3, r6
		uint32_t acc_ticks_to_expire = 0U;
    ba4a:	2500      	movs	r5, #0
    ba4c:	46a1      	mov	r9, r4
    ba4e:	960b      	str	r6, [sp, #44]	; 0x2c
    ba50:	9200      	str	r2, [sp, #0]
    ba52:	e02c      	b.n	baae <ticker_worker+0x23a>
				(ticker->ticks_periodic == 0U) ||
    ba54:	9c00      	ldr	r4, [sp, #0]
					  0U :
    ba56:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    ba5a:	2c00      	cmp	r4, #0
    ba5c:	d048      	beq.n	baf0 <ticker_worker+0x27c>
    ba5e:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    ba60:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    ba64:	4544      	cmp	r4, r8
    ba66:	bf8c      	ite	hi
    ba68:	f04f 0801 	movhi.w	r8, #1
    ba6c:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    ba70:	bf34      	ite	cc
    ba72:	f04f 0a01 	movcc.w	sl, #1
    ba76:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    ba7a:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    ba7c:	f892 b003 	ldrb.w	fp, [r2, #3]
    ba80:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    ba84:	d30f      	bcc.n	baa6 <ticker_worker+0x232>
    ba86:	4593      	cmp	fp, r2
    ba88:	d843      	bhi.n	bb12 <ticker_worker+0x29e>
			    (next_force ||
    ba8a:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    ba8e:	d040      	beq.n	bb12 <ticker_worker+0x29e>
			     next_is_critical ||
    ba90:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    ba92:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    ba96:	4594      	cmp	ip, r2
    ba98:	dd02      	ble.n	baa0 <ticker_worker+0x22c>
			     (next_has_priority && !current_is_older) ||
    ba9a:	f1b8 0f00 	cmp.w	r8, #0
    ba9e:	d038      	beq.n	bb12 <ticker_worker+0x29e>
    baa0:	9a05      	ldr	r2, [sp, #20]
    baa2:	4572      	cmp	r2, lr
    baa4:	d032      	beq.n	bb0c <ticker_worker+0x298>
			id_head = ticker_next->next;
    baa6:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    baa8:	2bff      	cmp	r3, #255	; 0xff
    baaa:	f43f af75 	beq.w	b998 <ticker_worker+0x124>
			struct ticker_node *ticker_next = &nodes[id_head];
    baae:	b21b      	sxth	r3, r3
    bab0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bab4:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    bab8:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    baba:	f8d2 8008 	ldr.w	r8, [r2, #8]
    babe:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    bac0:	42a8      	cmp	r0, r5
    bac2:	f4ff af69 	bcc.w	b998 <ticker_worker+0x124>
			if (ticker_next->ticks_slot == 0U) {
    bac6:	6991      	ldr	r1, [r2, #24]
    bac8:	2900      	cmp	r1, #0
    baca:	d0ec      	beq.n	baa6 <ticker_worker+0x232>
			int32_t lazy_next = ticker_next->lazy_current;
    bacc:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    bace:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    bad0:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    bad4:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    bad8:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    bada:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    badc:	bf28      	it	cs
    bade:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    bae2:	f1ba 0f00 	cmp.w	sl, #0
    bae6:	d1b5      	bne.n	ba54 <ticker_worker+0x1e0>
				(ticker->ticks_periodic == 0U) ||
    bae8:	9c00      	ldr	r4, [sp, #0]
					  0U :
    baea:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    baec:	2c00      	cmp	r4, #0
    baee:	d1b6      	bne.n	ba5e <ticker_worker+0x1ea>
					(ticker->ticks_periodic != 0U) &&
    baf0:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    baf4:	f04f 0801 	mov.w	r8, #1
    baf8:	e7bf      	b.n	ba7a <ticker_worker+0x206>
			    TICKER_RESCHEDULE_STATE_NONE &&
    bafa:	8ba2      	ldrh	r2, [r4, #28]
    bafc:	9903      	ldr	r1, [sp, #12]
    bafe:	428a      	cmp	r2, r1
    bb00:	f63f af07 	bhi.w	b912 <ticker_worker+0x9e>
				ext_data->reschedule_state =
    bb04:	f04f 0201 	mov.w	r2, #1
    bb08:	721a      	strb	r2, [r3, #8]
    bb0a:	e704      	b.n	b916 <ticker_worker+0xa2>
			     (equal_priority && next_is_older))) {
    bb0c:	f1ba 0f00 	cmp.w	sl, #0
    bb10:	d0c9      	beq.n	baa6 <ticker_worker+0x232>
    bb12:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
    bb16:	f8dd a020 	ldr.w	sl, [sp, #32]
    bb1a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bb1c:	464c      	mov	r4, r9
    bb1e:	e6f0      	b.n	b902 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
    bb20:	9b04      	ldr	r3, [sp, #16]
    bb22:	9301      	str	r3, [sp, #4]
    bb24:	e6c8      	b.n	b8b8 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    bb26:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    bb28:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    bb2c:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    bb2e:	2d00      	cmp	r5, #0
    bb30:	f43f af0b 	beq.w	b94a <ticker_worker+0xd6>
					   ticks_expired -
    bb34:	9b02      	ldr	r3, [sp, #8]
    bb36:	6960      	ldr	r0, [r4, #20]
    bb38:	695a      	ldr	r2, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    bb3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    bb3c:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    bb3e:	eba8 0000 	sub.w	r0, r8, r0
    bb42:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    bb44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    bb48:	e746      	b.n	b9d8 <ticker_worker+0x164>
    bb4a:	bf00      	nop

0000bb4c <ticker_job>:
	if (instance->worker_trigger) {
    bb4c:	7fc2      	ldrb	r2, [r0, #31]
    bb4e:	2a00      	cmp	r2, #0
    bb50:	f040 8631 	bne.w	c7b6 <ticker_job+0xc6a>
{
    bb54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bb58:	7a83      	ldrb	r3, [r0, #10]
    bb5a:	7ac1      	ldrb	r1, [r0, #11]
{
    bb5c:	b08f      	sub	sp, #60	; 0x3c
    bb5e:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    bb60:	6940      	ldr	r0, [r0, #20]
    bb62:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bb64:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    bb66:	f04f 0001 	mov.w	r0, #1
    bb6a:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    bb6e:	f000 8096 	beq.w	bc9e <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
    bb72:	4403      	add	r3, r0
    bb74:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    bb76:	2b02      	cmp	r3, #2
		idx = 0U;
    bb78:	bf08      	it	eq
    bb7a:	4613      	moveq	r3, r2
		ticks_elapsed =
    bb7c:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    bb80:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    bb84:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    bb86:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    bb88:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    bb8a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    bb8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb90:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    bb94:	2301      	movs	r3, #1
    bb96:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    bb98:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    bb9c:	f89b 201d 	ldrb.w	r2, [fp, #29]
    bba0:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    bba2:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    bba6:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    bbaa:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    bbac:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    bbae:	461a      	mov	r2, r3
    bbb0:	3b01      	subs	r3, #1
	users = &instance->users[0];
    bbb2:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    bbb4:	b2db      	uxtb	r3, r3
    bbb6:	2a00      	cmp	r2, #0
    bbb8:	f000 8330 	beq.w	c21c <ticker_job+0x6d0>
    bbbc:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
    bbc0:	2300      	movs	r3, #0
    bbc2:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    bbc4:	23ff      	movs	r3, #255	; 0xff
    bbc6:	9301      	str	r3, [sp, #4]
    bbc8:	4637      	mov	r7, r6
    bbca:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    bbcc:	687b      	ldr	r3, [r7, #4]
    bbce:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    bbd0:	f897 c003 	ldrb.w	ip, [r7, #3]
    bbd4:	78bb      	ldrb	r3, [r7, #2]
    bbd6:	46ba      	mov	sl, r7
    bbd8:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
    bbda:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    bbdc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    bbe0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    bbe4:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    bbe6:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    bbe8:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    bbec:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    bbee:	f000 8187 	beq.w	bf00 <ticker_job+0x3b4>
			if (middle == user->count_user_op) {
    bbf2:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    bbf6:	4298      	cmp	r0, r3
    bbf8:	bf08      	it	eq
    bbfa:	2300      	moveq	r3, #0
			user->middle = middle;
    bbfc:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    bc00:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    bc04:	2a04      	cmp	r2, #4
    bc06:	f240 8179 	bls.w	befc <ticker_job+0x3b0>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    bc0a:	2a07      	cmp	r2, #7
    bc0c:	f200 8086 	bhi.w	bd1c <ticker_job+0x1d0>
			ticker = &node[user_op->id];
    bc10:	7869      	ldrb	r1, [r5, #1]
    bc12:	9c04      	ldr	r4, [sp, #16]
    bc14:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    bc18:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    bc1c:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    bc1e:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    bc20:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    bc22:	7860      	ldrb	r0, [r4, #1]
    bc24:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    bc26:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    bc2a:	d077      	beq.n	bd1c <ticker_job+0x1d0>
			    (state == 0U) ||
    bc2c:	2a05      	cmp	r2, #5
    bc2e:	d065      	beq.n	bcfc <ticker_job+0x1b0>
			if (state == 1U) {
    bc30:	2801      	cmp	r0, #1
    bc32:	d137      	bne.n	bca4 <ticker_job+0x158>
	previous = instance->ticker_id_head;
    bc34:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bc38:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    bc3c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    bc40:	d017      	beq.n	bc72 <ticker_job+0x126>
		ticker_current = &node[current];
    bc42:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    bc46:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    bc48:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    bc4c:	f000 8090 	beq.w	bd70 <ticker_job+0x224>
	total = 0U;
    bc50:	2300      	movs	r3, #0
    bc52:	e001      	b.n	bc58 <ticker_job+0x10c>
		if (current == id) {
    bc54:	4561      	cmp	r1, ip
    bc56:	d070      	beq.n	bd3a <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
    bc58:	46e6      	mov	lr, ip
		current = ticker_current->next;
    bc5a:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    bc5e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    bc62:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    bc66:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    bc6a:	4443      	add	r3, r8
		ticker_current = &node[current];
    bc6c:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    bc70:	d1f0      	bne.n	bc54 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bc72:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bc74:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bc76:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bc78:	f000 812b 	beq.w	bed2 <ticker_job+0x386>
		ticker->req = ticker->ack;
    bc7c:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    bc7e:	f899 301c 	ldrb.w	r3, [r9, #28]
    bc82:	428b      	cmp	r3, r1
    bc84:	d022      	beq.n	bccc <ticker_job+0x180>
	if (user_op->fp_op_func) {
    bc86:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bc88:	2000      	movs	r0, #0
    bc8a:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    bc8c:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bc8e:	b10b      	cbz	r3, bc94 <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bc90:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bc92:	4798      	blx	r3
    bc94:	f89a c003 	ldrb.w	ip, [sl, #3]
    bc98:	f89a 3002 	ldrb.w	r3, [sl, #2]
    bc9c:	e79c      	b.n	bbd8 <ticker_job+0x8c>
		flag_elapsed = 0U;
    bc9e:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    bca0:	9202      	str	r2, [sp, #8]
    bca2:	e779      	b.n	bb98 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    bca4:	2104      	movs	r1, #4
    bca6:	464b      	mov	r3, r9
    bca8:	2201      	movs	r2, #1
    bcaa:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    bcae:	4608      	mov	r0, r1
    bcb0:	47a0      	blx	r4
	while (count_user--) {
    bcb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
    bcb4:	f88a 8002 	strb.w	r8, [sl, #2]
    bcb8:	4657      	mov	r7, sl
				pending = 1U;
    bcba:	2301      	movs	r3, #1
	while (count_user--) {
    bcbc:	42ba      	cmp	r2, r7
				pending = 1U;
    bcbe:	9308      	str	r3, [sp, #32]
    bcc0:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    bcc4:	f000 8123 	beq.w	bf0e <ticker_job+0x3c2>
    bcc8:	461f      	mov	r7, r3
    bcca:	e77f      	b.n	bbcc <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
    bccc:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    bcce:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    bcd0:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    bcd4:	f040 81e2 	bne.w	c09c <ticker_job+0x550>
				ticks_at_stop =
    bcd8:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    bcda:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    bcde:	1ac2      	subs	r2, r0, r3
    bce0:	0214      	lsls	r4, r2, #8
    bce2:	f100 81d2 	bmi.w	c08a <ticker_job+0x53e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bce6:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    bcea:	9a02      	ldr	r2, [sp, #8]
    bcec:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    bcee:	f8d9 2018 	ldr.w	r2, [r9, #24]
    bcf2:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    bcf4:	bf88      	it	hi
    bcf6:	f8c9 3018 	strhi.w	r3, [r9, #24]
    bcfa:	e7c4      	b.n	bc86 <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    bcfc:	686e      	ldr	r6, [r5, #4]
    bcfe:	2e00      	cmp	r6, #0
    bd00:	d196      	bne.n	bc30 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    bd02:	68ae      	ldr	r6, [r5, #8]
    bd04:	2e00      	cmp	r6, #0
    bd06:	d193      	bne.n	bc30 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    bd08:	68ee      	ldr	r6, [r5, #12]
    bd0a:	2e00      	cmp	r6, #0
    bd0c:	d190      	bne.n	bc30 <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    bd0e:	692e      	ldr	r6, [r5, #16]
    bd10:	2e00      	cmp	r6, #0
    bd12:	d18d      	bne.n	bc30 <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
    bd14:	696e      	ldr	r6, [r5, #20]
    bd16:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    bd1a:	d189      	bne.n	bc30 <ticker_job+0xe4>
	if (user_op->fp_op_func) {
    bd1c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bd1e:	2100      	movs	r1, #0
	user_op->status = status;
    bd20:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bd22:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    bd24:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bd26:	2a00      	cmp	r2, #0
    bd28:	f43f af56 	beq.w	bbd8 <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bd2c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bd2e:	4790      	blx	r2
    bd30:	f89a c003 	ldrb.w	ip, [sl, #3]
    bd34:	f89a 3002 	ldrb.w	r3, [sl, #2]
    bd38:	e74e      	b.n	bbd8 <ticker_job+0x8c>
	if (previous == current) {
    bd3a:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    bd3e:	4571      	cmp	r1, lr
    bd40:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    bd44:	d016      	beq.n	bd74 <ticker_job+0x228>
	node[previous].next = ticker_current->next;
    bd46:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    bd48:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    bd4c:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    bd4e:	29ff      	cmp	r1, #255	; 0xff
    bd50:	d006      	beq.n	bd60 <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
    bd52:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    bd56:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    bd5a:	6888      	ldr	r0, [r1, #8]
    bd5c:	4460      	add	r0, ip
    bd5e:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    bd60:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bd64:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    bd66:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bd68:	d009      	beq.n	bd7e <ticker_job+0x232>
    bd6a:	78a7      	ldrb	r7, [r4, #2]
    bd6c:	7869      	ldrb	r1, [r5, #1]
    bd6e:	e785      	b.n	bc7c <ticker_job+0x130>
		if (current == id) {
    bd70:	4607      	mov	r7, r0
	total = 0U;
    bd72:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    bd74:	7802      	ldrb	r2, [r0, #0]
    bd76:	f889 201d 	strb.w	r2, [r9, #29]
    bd7a:	782a      	ldrb	r2, [r5, #0]
    bd7c:	e7e3      	b.n	bd46 <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    bd7e:	f8d9 7014 	ldr.w	r7, [r9, #20]
    bd82:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    bd84:	f00b fbf0 	bl	17568 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bd88:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bd8a:	eba0 0c07 	sub.w	ip, r0, r7
    bd8e:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bd92:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    bd94:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    bd96:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    bd98:	f240 80a7 	bls.w	beea <ticker_job+0x39e>
		ticks_to_expire -= ticks_elapsed;
    bd9c:	6962      	ldr	r2, [r4, #20]
    bd9e:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    bda0:	6866      	ldr	r6, [r4, #4]
    bda2:	2e00      	cmp	r6, #0
    bda4:	d053      	beq.n	be4e <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
    bda6:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    bda8:	2800      	cmp	r0, #0
    bdaa:	d050      	beq.n	be4e <ticker_job+0x302>
		user_op->params.update.lazy--;
    bdac:	3801      	subs	r0, #1
    bdae:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bdb0:	429e      	cmp	r6, r3
    bdb2:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
    bdb4:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bdb6:	d225      	bcs.n	be04 <ticker_job+0x2b8>
    bdb8:	f106 0b01 	add.w	fp, r6, #1
    bdbc:	920b      	str	r2, [sp, #44]	; 0x2c
    bdbe:	e011      	b.n	bde4 <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    bdc0:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    bdc4:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    bdc8:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    bdcc:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
    bdce:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
    bdd0:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    bdd2:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    bdd6:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    bdd8:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bdda:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    bddc:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    bdde:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bde0:	d20e      	bcs.n	be00 <ticker_job+0x2b4>
    bde2:	8aa8      	ldrh	r0, [r5, #20]
    bde4:	4288      	cmp	r0, r1
    bde6:	f080 81c1 	bcs.w	c16c <ticker_job+0x620>
					   ticker_remainder_dec(ticker);
    bdea:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    bdee:	f8df e2d0 	ldr.w	lr, [pc, #720]	; c0c0 <ticker_job+0x574>
					   ticker_remainder_dec(ticker);
    bdf2:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
    bdf4:	4ab1      	ldr	r2, [pc, #708]	; (c0bc <ticker_job+0x570>)
    bdf6:	4486      	add	lr, r0
    bdf8:	4596      	cmp	lr, r2
    bdfa:	d8e1      	bhi.n	bdc0 <ticker_job+0x274>
    bdfc:	46b6      	mov	lr, r6
    bdfe:	e7e6      	b.n	bdce <ticker_job+0x282>
    be00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    be02:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be04:	4288      	cmp	r0, r1
    be06:	d921      	bls.n	be4c <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
    be08:	6a20      	ldr	r0, [r4, #32]
    be0a:	9009      	str	r0, [sp, #36]	; 0x24
    be0c:	f106 0e01 	add.w	lr, r6, #1
    be10:	920b      	str	r2, [sp, #44]	; 0x2c
    be12:	e007      	b.n	be24 <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
    be14:	6260      	str	r0, [r4, #36]	; 0x24
    be16:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be18:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    be1a:	3101      	adds	r1, #1
    be1c:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be1e:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    be20:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    be22:	d211      	bcs.n	be48 <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
    be24:	9a09      	ldr	r2, [sp, #36]	; 0x24
    be26:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    be28:	f8df b294 	ldr.w	fp, [pc, #660]	; c0c0 <ticker_job+0x574>
	ticker->remainder_current += ticker->remainder_periodic;
    be2c:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    be2e:	4aa3      	ldr	r2, [pc, #652]	; (c0bc <ticker_job+0x570>)
    be30:	4483      	add	fp, r0
    be32:	4593      	cmp	fp, r2
    be34:	d8ee      	bhi.n	be14 <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    be36:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    be3a:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    be3e:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    be42:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    be44:	46f3      	mov	fp, lr
    be46:	e7e7      	b.n	be18 <ticker_job+0x2cc>
    be48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    be4a:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    be4c:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    be4e:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    be52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    be54:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    be56:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    be58:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    be5a:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    be5c:	b136      	cbz	r6, be6c <ticker_job+0x320>
    be5e:	6831      	ldr	r1, [r6, #0]
    be60:	b121      	cbz	r1, be6c <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
    be62:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    be66:	6070      	str	r0, [r6, #4]
    be68:	68a3      	ldr	r3, [r4, #8]
    be6a:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    be6c:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    be70:	d126      	bne.n	bec0 <ticker_job+0x374>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    be72:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    be74:	4293      	cmp	r3, r2
    be76:	d920      	bls.n	beba <ticker_job+0x36e>
		ticks_to_expire -= ticks_to_expire_minus;
    be78:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    be7a:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    be7c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    be7e:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    be80:	68e9      	ldr	r1, [r5, #12]
    be82:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    be84:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    be86:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    be88:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    be8a:	bf88      	it	hi
    be8c:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    be8e:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    be90:	bf98      	it	ls
    be92:	2300      	movls	r3, #0
    be94:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    be96:	b102      	cbz	r2, be9a <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
    be98:	70e2      	strb	r2, [r4, #3]
	if (user_op->params.update.must_expire) {
    be9a:	7deb      	ldrb	r3, [r5, #23]
    be9c:	b113      	cbz	r3, bea4 <ticker_job+0x358>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    be9e:	3b01      	subs	r3, #1
    bea0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
    bea4:	9b04      	ldr	r3, [sp, #16]
    bea6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bea8:	4619      	mov	r1, r3
    beaa:	9b01      	ldr	r3, [sp, #4]
    beac:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    beae:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    beb0:	786a      	ldrb	r2, [r5, #1]
    beb2:	9201      	str	r2, [sp, #4]
		ticker->req++;
    beb4:	3301      	adds	r3, #1
    beb6:	7063      	strb	r3, [r4, #1]
    beb8:	e6e5      	b.n	bc86 <ticker_job+0x13a>
    beba:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    bebc:	2300      	movs	r3, #0
    bebe:	e7dd      	b.n	be7c <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bec0:	9903      	ldr	r1, [sp, #12]
    bec2:	eba1 0708 	sub.w	r7, r1, r8
    bec6:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    beca:	429f      	cmp	r7, r3
    becc:	d213      	bcs.n	bef6 <ticker_job+0x3aa>
			ticks_to_expire -= delta_current_start;
    bece:	1bdb      	subs	r3, r3, r7
    bed0:	e7d0      	b.n	be74 <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    bed2:	f8d9 7014 	ldr.w	r7, [r9, #20]
    bed6:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    bed8:	f00b fb46 	bl	17568 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bedc:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bede:	eba0 0c07 	sub.w	ip, r0, r7
    bee2:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    bee6:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bee8:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    beea:	6961      	ldr	r1, [r4, #20]
    beec:	440b      	add	r3, r1
    beee:	1b9a      	subs	r2, r3, r6
    bef0:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    bef2:	2300      	movs	r3, #0
    bef4:	e754      	b.n	bda0 <ticker_job+0x254>
			ticks_to_expire_minus +=
    bef6:	443a      	add	r2, r7
    bef8:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    befa:	e7df      	b.n	bebc <ticker_job+0x370>
    befc:	4698      	mov	r8, r3
    befe:	e66d      	b.n	bbdc <ticker_job+0x90>
	while (count_user--) {
    bf00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bf02:	4657      	mov	r7, sl
    bf04:	42ba      	cmp	r2, r7
    bf06:	f1a7 0308 	sub.w	r3, r7, #8
    bf0a:	f47f aedd 	bne.w	bcc8 <ticker_job+0x17c>
    bf0e:	f899 701d 	ldrb.w	r7, [r9, #29]
    bf12:	9b06      	ldr	r3, [sp, #24]
    bf14:	1bdb      	subs	r3, r3, r7
    bf16:	bf18      	it	ne
    bf18:	2301      	movne	r3, #1
    bf1a:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
    bf1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf1e:	46cb      	mov	fp, r9
    bf20:	2b00      	cmp	r3, #0
    bf22:	f040 8183 	bne.w	c22c <ticker_job+0x6e0>
	count_user = instance->count_user;
    bf26:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    bf2a:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    bf2e:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    bf32:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    bf34:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    bf36:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    bf38:	b2db      	uxtb	r3, r3
    bf3a:	2a00      	cmp	r2, #0
    bf3c:	f000 811a 	beq.w	c174 <ticker_job+0x628>
    bf40:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bf44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf46:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    bf48:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    bf4c:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    bf50:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    bf52:	9b01      	ldr	r3, [sp, #4]
    bf54:	2bff      	cmp	r3, #255	; 0xff
    bf56:	d05e      	beq.n	c016 <ticker_job+0x4ca>
				ticker = &node[id_insert];
    bf58:	f8dd a004 	ldr.w	sl, [sp, #4]
    bf5c:	9b04      	ldr	r3, [sp, #16]
    bf5e:	fa0f f48a 	sxth.w	r4, sl
    bf62:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bf66:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    bf6a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    bf6e:	f813 300c 	ldrb.w	r3, [r3, ip]
    bf72:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    bf74:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    bf76:	22ff      	movs	r2, #255	; 0xff
    bf78:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    bf7a:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    bf7e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    bf82:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bf86:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    bf88:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    bf8a:	bf18      	it	ne
    bf8c:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bf8e:	d111      	bne.n	bfb4 <ticker_job+0x468>
    bf90:	e098      	b.n	c0c4 <ticker_job+0x578>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    bf92:	ebb1 010c 	subs.w	r1, r1, ip
    bf96:	d106      	bne.n	bfa6 <ticker_job+0x45a>
    bf98:	f8be e01e 	ldrh.w	lr, [lr, #30]
    bf9c:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    bfa0:	45f1      	cmp	r9, lr
    bfa2:	f200 80e0 	bhi.w	c166 <ticker_job+0x61a>
		current = ticker_current->next;
    bfa6:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bfaa:	9302      	str	r3, [sp, #8]
    bfac:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    bfb0:	d077      	beq.n	c0a2 <ticker_job+0x556>
    bfb2:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    bfb4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    bfb8:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    bfbc:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    bfc0:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bfc4:	458c      	cmp	ip, r1
    bfc6:	d9e4      	bls.n	bf92 <ticker_job+0x446>
    bfc8:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    bfca:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    bfcc:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    bfce:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    bfd0:	d16c      	bne.n	c0ac <ticker_job+0x560>
		instance->ticker_id_head = id;
    bfd2:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    bfd6:	2bff      	cmp	r3, #255	; 0xff
    bfd8:	d006      	beq.n	bfe8 <ticker_job+0x49c>
		node[current].ticks_to_expire -= ticks_to_expire;
    bfda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bfde:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    bfe2:	68bb      	ldr	r3, [r7, #8]
    bfe4:	1a59      	subs	r1, r3, r1
    bfe6:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    bfe8:	78a3      	ldrb	r3, [r4, #2]
    bfea:	3301      	adds	r3, #1
    bfec:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    bfee:	2d00      	cmp	r5, #0
    bff0:	d0af      	beq.n	bf52 <ticker_job+0x406>
	if (user_op->fp_op_func) {
    bff2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bff4:	9a03      	ldr	r2, [sp, #12]
    bff6:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    bff8:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bffa:	b113      	cbz	r3, c002 <ticker_job+0x4b6>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bffc:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bffe:	2000      	movs	r0, #0
    c000:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    c002:	6863      	ldr	r3, [r4, #4]
    c004:	2b00      	cmp	r3, #0
    c006:	d1a4      	bne.n	bf52 <ticker_job+0x406>
					ticker->op_context =
    c008:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    c00c:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    c010:	9b01      	ldr	r3, [sp, #4]
    c012:	2bff      	cmp	r3, #255	; 0xff
    c014:	d1a0      	bne.n	bf58 <ticker_job+0x40c>
    c016:	f898 3002 	ldrb.w	r3, [r8, #2]
    c01a:	42b3      	cmp	r3, r6
    c01c:	d02e      	beq.n	c07c <ticker_job+0x530>
    c01e:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    c020:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    c024:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    c028:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    c02c:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c02e:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    c032:	b2f6      	uxtb	r6, r6
					first = 0U;
    c034:	42b0      	cmp	r0, r6
    c036:	bf08      	it	eq
    c038:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c03a:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    c03c:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c040:	d11a      	bne.n	c078 <ticker_job+0x52c>
				id_insert = user_op->id;
    c042:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    c046:	9b04      	ldr	r3, [sp, #16]
    c048:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    c04c:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    c050:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    c054:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    c056:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    c058:	1ac9      	subs	r1, r1, r3
    c05a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    c05e:	d036      	beq.n	c0ce <ticker_job+0x582>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c060:	9b03      	ldr	r3, [sp, #12]
    c062:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    c066:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    c068:	2201      	movs	r2, #1
    c06a:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c06c:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    c06e:	b10b      	cbz	r3, c074 <ticker_job+0x528>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c070:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c072:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    c074:	f898 3002 	ldrb.w	r3, [r8, #2]
    c078:	42b3      	cmp	r3, r6
    c07a:	d1d1      	bne.n	c020 <ticker_job+0x4d4>
	while (count_user--) {
    c07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c07e:	4542      	cmp	r2, r8
    c080:	f1a8 0308 	sub.w	r3, r8, #8
    c084:	d074      	beq.n	c170 <ticker_job+0x624>
    c086:	4698      	mov	r8, r3
    c088:	e75e      	b.n	bf48 <ticker_job+0x3fc>
				if (ticks_elapsed > ticks_used) {
    c08a:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c08c:	1a1b      	subs	r3, r3, r0
    c08e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    c092:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    c094:	bf8c      	ite	hi
    c096:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    c098:	2300      	movls	r3, #0
    c09a:	e628      	b.n	bcee <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
    c09c:	f00b fa64 	bl	17568 <cntr_cnt_get>
    c0a0:	e61b      	b.n	bcda <ticker_job+0x18e>
	ticker_new->next = current;
    c0a2:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    c0a4:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    c0a6:	f880 c000 	strb.w	ip, [r0]
    c0aa:	4663      	mov	r3, ip
		node[previous].next = id;
    c0ac:	b212      	sxth	r2, r2
    c0ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c0b2:	0112      	lsls	r2, r2, #4
    c0b4:	f807 a002 	strb.w	sl, [r7, r2]
    c0b8:	e78d      	b.n	bfd6 <ticker_job+0x48a>
    c0ba:	bf00      	nop
    c0bc:	7f172b59 	.word	0x7f172b59
    c0c0:	ff172b5a 	.word	0xff172b5a
	ticker_new->next = current;
    c0c4:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    c0c8:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c0cc:	e78c      	b.n	bfe8 <ticker_job+0x49c>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c0ce:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    c0d0:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c0d4:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    c0d8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    c0dc:	429f      	cmp	r7, r3
    c0de:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    c0e2:	d03a      	beq.n	c15a <ticker_job+0x60e>
		ticker->must_expire =
    c0e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c0e8:	1afb      	subs	r3, r7, r3
    c0ea:	fab3 f383 	clz	r3, r3
    c0ee:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    c0f0:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    c0f4:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    c0f8:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c0fa:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    c0fc:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    c100:	454f      	cmp	r7, r9
    c102:	bf88      	it	hi
    c104:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    c106:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c10a:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    c10c:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    c10e:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    c110:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c112:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    c116:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c11a:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    c11c:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c11e:	d40c      	bmi.n	c13a <ticker_job+0x5ee>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c120:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c124:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    c126:	b18b      	cbz	r3, c14c <ticker_job+0x600>
	ticker->ticks_to_expire = ticks_to_expire;
    c128:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    c12a:	9b03      	ldr	r3, [sp, #12]
    c12c:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    c12e:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    c130:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c134:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    c136:	70e3      	strb	r3, [r4, #3]
}
    c138:	e71d      	b.n	bf76 <ticker_job+0x42a>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c13a:	ebae 0200 	sub.w	r2, lr, r0
    c13e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c142:	4293      	cmp	r3, r2
    c144:	d905      	bls.n	c152 <ticker_job+0x606>
			ticks_to_expire -= delta_current_start;
    c146:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c148:	2b00      	cmp	r3, #0
    c14a:	d1ed      	bne.n	c128 <ticker_job+0x5dc>
		ticks_to_expire_minus -= ticks_to_expire;
    c14c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c14e:	2300      	movs	r3, #0
    c150:	e7ea      	b.n	c128 <ticker_job+0x5dc>
			    (delta_current_start - ticks_to_expire);
    c152:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    c154:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c156:	2300      	movs	r3, #0
    c158:	e7e6      	b.n	c128 <ticker_job+0x5dc>
	ticker->ext_data = start->ext_data;
    c15a:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    c15e:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c160:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    c162:	460f      	mov	r7, r1
    c164:	e7cf      	b.n	c106 <ticker_job+0x5ba>
    c166:	9a02      	ldr	r2, [sp, #8]
    c168:	4661      	mov	r1, ip
    c16a:	e72e      	b.n	bfca <ticker_job+0x47e>
    c16c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c16e:	e649      	b.n	be04 <ticker_job+0x2b8>
    c170:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    c174:	9b06      	ldr	r3, [sp, #24]
    c176:	42bb      	cmp	r3, r7
    c178:	f000 832b 	beq.w	c7d2 <ticker_job+0xc86>
	if (!pending) {
    c17c:	9b08      	ldr	r3, [sp, #32]
    c17e:	2b00      	cmp	r3, #0
    c180:	f000 834d 	beq.w	c81e <ticker_job+0xcd2>
	instance->job_guard = 0U;
    c184:	2300      	movs	r3, #0
    c186:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c18a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    c18e:	2fff      	cmp	r7, #255	; 0xff
    c190:	f000 83d3 	beq.w	c93a <ticker_job+0xdee>
	if (ticker_id_old_head == TICKER_NULL) {
    c194:	9b06      	ldr	r3, [sp, #24]
    c196:	2bff      	cmp	r3, #255	; 0xff
    c198:	f000 83ed 	beq.w	c976 <ticker_job+0xe2a>
	ticks_to_expire = ticker->ticks_to_expire;
    c19c:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    c1a0:	f8df 9304 	ldr.w	r9, [pc, #772]	; c4a8 <ticker_job+0x95c>
    c1a4:	f8df 8304 	ldr.w	r8, [pc, #772]	; c4ac <ticker_job+0x960>
    c1a8:	4ebe      	ldr	r6, [pc, #760]	; (c4a4 <ticker_job+0x958>)
	ticker = &instance->nodes[instance->ticker_id_head];
    c1aa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    c1ae:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
    c1b2:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    c1b4:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    c1b6:	f00b f9d7 	bl	17568 <cntr_cnt_get>
		cc = instance->ticks_current;
    c1ba:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    c1be:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c1c2:	1ac4      	subs	r4, r0, r3
    c1c4:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    c1c8:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    c1ca:	42bc      	cmp	r4, r7
    c1cc:	bf2c      	ite	cs
    c1ce:	191b      	addcs	r3, r3, r4
    c1d0:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
    c1d2:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    c1d6:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    c1d8:	4620      	mov	r0, r4
    c1da:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    c1dc:	f00b f9c4 	bl	17568 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c1e0:	eba0 000a 	sub.w	r0, r0, sl
    c1e4:	eba4 040a 	sub.w	r4, r4, sl
    c1e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c1ec:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    c1f0:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    c1f2:	42a0      	cmp	r0, r4
		i--;
    c1f4:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    c1f8:	f240 82f6 	bls.w	c7e8 <ticker_job+0xc9c>
		LL_ASSERT(i);
    c1fc:	2d00      	cmp	r5, #0
    c1fe:	d1da      	bne.n	c1b6 <ticker_job+0x66a>
    c200:	f640 03ba 	movw	r3, #2234	; 0x8ba
    c204:	464a      	mov	r2, r9
    c206:	4641      	mov	r1, r8
    c208:	4630      	mov	r0, r6
    c20a:	f016 fdd0 	bl	22dae <printk>
    c20e:	4040      	eors	r0, r0
    c210:	f380 8811 	msr	BASEPRI, r0
    c214:	f04f 0003 	mov.w	r0, #3
    c218:	df02      	svc	2
    c21a:	e7cc      	b.n	c1b6 <ticker_job+0x66a>
	if (flag_elapsed) {
    c21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c21e:	2b00      	cmp	r3, #0
    c220:	f000 82f0 	beq.w	c804 <ticker_job+0xcb8>
	pending = 0U;
    c224:	9b07      	ldr	r3, [sp, #28]
    c226:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    c228:	23ff      	movs	r3, #255	; 0xff
    c22a:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    c22c:	f00b f99c 	bl	17568 <cntr_cnt_get>
	node = &instance->nodes[0];
    c230:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    c234:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    c238:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c23a:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    c23c:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c23e:	eba0 0003 	sub.w	r0, r0, r3
    c242:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    c246:	d04d      	beq.n	c2e4 <ticker_job+0x798>
    c248:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    c24c:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
    c250:	9b03      	ldr	r3, [sp, #12]
    c252:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    c256:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    c25a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    c25c:	459a      	cmp	sl, r3
    c25e:	f0c0 82d7 	bcc.w	c810 <ticker_job+0xcc4>
		if (instance->ticks_slot_previous > ticks_to_expire) {
    c262:	f8db 2018 	ldr.w	r2, [fp, #24]
		skip_collision = (ticker->lazy_current != 0U);
    c266:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    c26a:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    c26c:	ebaa 0a03 	sub.w	sl, sl, r3
		ticks_expired += ticks_to_expire;
    c270:	4499      	add	r9, r3
		ticks_latency -= ticks_to_expire;
    c272:	eba8 0803 	sub.w	r8, r8, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    c276:	bf25      	ittet	cs
    c278:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    c27c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    c280:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    c282:	2300      	movcs	r3, #0
    c284:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    c288:	7861      	ldrb	r1, [r4, #1]
    c28a:	78a0      	ldrb	r0, [r4, #2]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c28c:	69a7      	ldr	r7, [r4, #24]
    c28e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    c290:	6866      	ldr	r6, [r4, #4]
    c292:	f894 c000 	ldrb.w	ip, [r4]
    c296:	9704      	str	r7, [sp, #16]
		state = (ticker->req - ticker->ack) & 0xff;
    c298:	1a0b      	subs	r3, r1, r0
    c29a:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c29c:	b117      	cbz	r7, c2a4 <ticker_job+0x758>
    c29e:	2b02      	cmp	r3, #2
    c2a0:	f000 8143 	beq.w	c52a <ticker_job+0x9de>
		ticker->ticks_to_expire = 0U;
    c2a4:	2700      	movs	r7, #0
    c2a6:	60a7      	str	r7, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c2a8:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c2ac:	2e00      	cmp	r6, #0
    c2ae:	f040 80ff 	bne.w	c4b0 <ticker_job+0x964>
    c2b2:	b11a      	cbz	r2, c2bc <ticker_job+0x770>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    c2b4:	7a12      	ldrb	r2, [r2, #8]
    c2b6:	2a01      	cmp	r2, #1
    c2b8:	f000 80d5 	beq.w	c466 <ticker_job+0x91a>
			if (state && ((state == 1U) || skip_collision) &&
    c2bc:	b153      	cbz	r3, c2d4 <ticker_job+0x788>
    c2be:	2b01      	cmp	r3, #1
    c2c0:	d002      	beq.n	c2c8 <ticker_job+0x77c>
    c2c2:	f1be 0f00 	cmp.w	lr, #0
    c2c6:	d005      	beq.n	c2d4 <ticker_job+0x788>
			    ticker->fp_op_func) {
    c2c8:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    c2ca:	b11b      	cbz	r3, c2d4 <ticker_job+0x788>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    c2cc:	2001      	movs	r0, #1
    c2ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c2d0:	4798      	blx	r3
    c2d2:	78a0      	ldrb	r0, [r4, #2]
			ticker->req = ticker->ack;
    c2d4:	7060      	strb	r0, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    c2d6:	f89b 501d 	ldrb.w	r5, [fp, #29]
    c2da:	2dff      	cmp	r5, #255	; 0xff
    c2dc:	d1b8      	bne.n	c250 <ticker_job+0x704>
    c2de:	f8db 3000 	ldr.w	r3, [fp]
    c2e2:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
    c2e4:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
    c2e8:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    c2ec:	f8db 1004 	ldr.w	r1, [fp, #4]
    c2f0:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    c2f2:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    c2f4:	42ac      	cmp	r4, r5
    c2f6:	bf18      	it	ne
    c2f8:	2001      	movne	r0, #1
    c2fa:	9007      	str	r0, [sp, #28]
	while (count_user--) {
    c2fc:	b2db      	uxtb	r3, r3
    c2fe:	2a00      	cmp	r2, #0
    c300:	f000 818a 	beq.w	c618 <ticker_job+0xacc>
    c304:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    c308:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    c30c:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    c310:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    c312:	9b01      	ldr	r3, [sp, #4]
    c314:	2bff      	cmp	r3, #255	; 0xff
    c316:	d062      	beq.n	c3de <ticker_job+0x892>
				ticker = &node[id_insert];
    c318:	f8dd a004 	ldr.w	sl, [sp, #4]
    c31c:	9b03      	ldr	r3, [sp, #12]
    c31e:	fa0f f48a 	sxth.w	r4, sl
    c322:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c326:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    c32a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    c32e:	f813 300c 	ldrb.w	r3, [r3, ip]
    c332:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    c334:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    c336:	22ff      	movs	r2, #255	; 0xff
    c338:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    c33a:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    c33e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    c342:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c346:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    c348:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    c34a:	bf18      	it	ne
    c34c:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c34e:	d112      	bne.n	c376 <ticker_job+0x82a>
    c350:	e15a      	b.n	c608 <ticker_job+0xabc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    c352:	ebb1 010c 	subs.w	r1, r1, ip
    c356:	d106      	bne.n	c366 <ticker_job+0x81a>
    c358:	f8be e01e 	ldrh.w	lr, [lr, #30]
    c35c:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    c360:	45f1      	cmp	r9, lr
    c362:	f200 8102 	bhi.w	c56a <ticker_job+0xa1e>
		current = ticker_current->next;
    c366:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c36a:	9304      	str	r3, [sp, #16]
    c36c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c370:	f000 80ef 	beq.w	c552 <ticker_job+0xa06>
    c374:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    c376:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c37a:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    c37e:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    c382:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c386:	458c      	cmp	ip, r1
    c388:	d9e3      	bls.n	c352 <ticker_job+0x806>
    c38a:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    c38c:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    c38e:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    c390:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    c392:	f040 80e3 	bne.w	c55c <ticker_job+0xa10>
		instance->ticker_id_head = id;
    c396:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c39a:	2bff      	cmp	r3, #255	; 0xff
    c39c:	d006      	beq.n	c3ac <ticker_job+0x860>
		node[current].ticks_to_expire -= ticks_to_expire;
    c39e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c3a2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    c3a6:	68bb      	ldr	r3, [r7, #8]
    c3a8:	1a59      	subs	r1, r3, r1
    c3aa:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    c3ac:	78a3      	ldrb	r3, [r4, #2]
    c3ae:	3301      	adds	r3, #1
    c3b0:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    c3b2:	2d00      	cmp	r5, #0
    c3b4:	d0ad      	beq.n	c312 <ticker_job+0x7c6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c3b6:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    c3ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c3bc:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    c3be:	2200      	movs	r2, #0
    c3c0:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    c3c2:	b113      	cbz	r3, c3ca <ticker_job+0x87e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c3c4:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c3c6:	4610      	mov	r0, r2
    c3c8:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    c3ca:	6863      	ldr	r3, [r4, #4]
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d1a0      	bne.n	c312 <ticker_job+0x7c6>
					ticker->op_context =
    c3d0:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    c3d4:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    c3d8:	9b01      	ldr	r3, [sp, #4]
    c3da:	2bff      	cmp	r3, #255	; 0xff
    c3dc:	d19c      	bne.n	c318 <ticker_job+0x7cc>
    c3de:	f898 3002 	ldrb.w	r3, [r8, #2]
    c3e2:	42b3      	cmp	r3, r6
    c3e4:	d030      	beq.n	c448 <ticker_job+0x8fc>
    c3e6:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    c3e8:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    c3ec:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    c3f0:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    c3f4:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c3f6:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    c3fa:	b2f6      	uxtb	r6, r6
					first = 0U;
    c3fc:	42b0      	cmp	r0, r6
    c3fe:	bf08      	it	eq
    c400:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c402:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    c404:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c408:	d11c      	bne.n	c444 <ticker_job+0x8f8>
				id_insert = user_op->id;
    c40a:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    c40e:	9b03      	ldr	r3, [sp, #12]
    c410:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    c414:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    c418:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    c41c:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    c41e:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    c420:	1ac9      	subs	r1, r1, r3
    c422:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    c426:	f000 80a3 	beq.w	c570 <ticker_job+0xa24>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c42a:	f04f 0300 	mov.w	r3, #0
    c42e:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    c432:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    c434:	2201      	movs	r2, #1
    c436:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c438:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    c43a:	b10b      	cbz	r3, c440 <ticker_job+0x8f4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c43c:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c43e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    c440:	f898 3002 	ldrb.w	r3, [r8, #2]
    c444:	42b3      	cmp	r3, r6
    c446:	d1cf      	bne.n	c3e8 <ticker_job+0x89c>
	while (count_user--) {
    c448:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c44a:	4542      	cmp	r2, r8
    c44c:	f1a8 0308 	sub.w	r3, r8, #8
    c450:	f000 80df 	beq.w	c612 <ticker_job+0xac6>
    c454:	4698      	mov	r8, r3
    c456:	e757      	b.n	c308 <ticker_job+0x7bc>
		ticker->ticks_to_expire = 0U;
    c458:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c45c:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c460:	2e00      	cmp	r6, #0
    c462:	f43f af27 	beq.w	c2b4 <ticker_job+0x768>
				ticker->req = ticker->ack;
    c466:	4653      	mov	r3, sl
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c468:	9e05      	ldr	r6, [sp, #20]
    c46a:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    c46e:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c470:	eb06 0709 	add.w	r7, r6, r9
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c474:	1abe      	subs	r6, r7, r2
    c476:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
    c47a:	d14b      	bne.n	c514 <ticker_job+0x9c8>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c47c:	f026 467f 	bic.w	r6, r6, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c480:	4433      	add	r3, r6
	if (ticks_to_expire > ticks_to_expire_minus) {
    c482:	4299      	cmp	r1, r3
    c484:	d24e      	bcs.n	c524 <ticker_job+0x9d8>
		ticks_to_expire -= ticks_to_expire_minus;
    c486:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
    c488:	2100      	movs	r1, #0
			ticker->next = *insert_head;
    c48a:	9a01      	ldr	r2, [sp, #4]
    c48c:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    c48e:	3001      	adds	r0, #1
    c490:	7060      	strb	r0, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    c492:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c494:	6161      	str	r1, [r4, #20]
			ticker->req++;
    c496:	9501      	str	r5, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
    c498:	f89b 501d 	ldrb.w	r5, [fp, #29]
    c49c:	2dff      	cmp	r5, #255	; 0xff
    c49e:	f47f aed7 	bne.w	c250 <ticker_job+0x704>
    c4a2:	e71c      	b.n	c2de <ticker_job+0x792>
    c4a4:	0002c5e0 	.word	0x0002c5e0
    c4a8:	0002c5a0 	.word	0x0002c5a0
    c4ac:	0002c6a4 	.word	0x0002c6a4
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    c4b0:	b112      	cbz	r2, c4b8 <ticker_job+0x96c>
    c4b2:	7a13      	ldrb	r3, [r2, #8]
    c4b4:	2b01      	cmp	r3, #1
    c4b6:	d0d6      	beq.n	c466 <ticker_job+0x91a>
				if (!ticker->lazy_current) {
    c4b8:	f1be 0f00 	cmp.w	lr, #0
    c4bc:	d146      	bne.n	c54c <ticker_job+0xa00>
					lazy_periodic = ticker->lazy_periodic;
    c4be:	8ba7      	ldrh	r7, [r4, #28]
    c4c0:	9704      	str	r7, [sp, #16]
    c4c2:	4608      	mov	r0, r1
				while (count--) {
    c4c4:	1c71      	adds	r1, r6, #1
    c4c6:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
    c4ca:	e9cd 1009 	strd	r1, r0, [sp, #36]	; 0x24
				ticks_to_expire = 0U;
    c4ce:	2300      	movs	r3, #0
    c4d0:	e004      	b.n	c4dc <ticker_job+0x990>
    c4d2:	4631      	mov	r1, r6
				while (count--) {
    c4d4:	3f01      	subs	r7, #1
					ticks_to_expire +=
    c4d6:	440b      	add	r3, r1
				while (count--) {
    c4d8:	1c79      	adds	r1, r7, #1
    c4da:	d010      	beq.n	c4fe <ticker_job+0x9b2>
	if ((ticker->remainder_current < BIT(31)) &&
    c4dc:	49b6      	ldr	r1, [pc, #728]	; (c7b8 <ticker_job+0xc6c>)
    c4de:	48b7      	ldr	r0, [pc, #732]	; (c7bc <ticker_job+0xc70>)
	ticker->remainder_current += ticker->remainder_periodic;
    c4e0:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c4e2:	1851      	adds	r1, r2, r1
    c4e4:	4281      	cmp	r1, r0
    c4e6:	d8f4      	bhi.n	c4d2 <ticker_job+0x986>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c4e8:	9909      	ldr	r1, [sp, #36]	; 0x24
    c4ea:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    c4ee:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c4f0:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
					ticks_to_expire +=
    c4f4:	440b      	add	r3, r1
				while (count--) {
    c4f6:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c4f8:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
				while (count--) {
    c4fc:	d1ee      	bne.n	c4dc <ticker_job+0x990>
				if (!ticker->must_expire) {
    c4fe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    c502:	980a      	ldr	r0, [sp, #40]	; 0x28
    c504:	6262      	str	r2, [r4, #36]	; 0x24
    c506:	2900      	cmp	r1, #0
    c508:	f000 8130 	beq.w	c76c <ticker_job+0xc20>
				ticker->lazy_current += (lazy_periodic + lazy);
    c50c:	9a04      	ldr	r2, [sp, #16]
    c50e:	4472      	add	r2, lr
    c510:	83e2      	strh	r2, [r4, #30]
    c512:	e7a9      	b.n	c468 <ticker_job+0x91c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c514:	1bd2      	subs	r2, r2, r7
    c516:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c51a:	429a      	cmp	r2, r3
    c51c:	d213      	bcs.n	c546 <ticker_job+0x9fa>
			ticks_to_expire -= delta_current_start;
    c51e:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c520:	4299      	cmp	r1, r3
    c522:	d3b0      	bcc.n	c486 <ticker_job+0x93a>
    c524:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    c526:	2300      	movs	r3, #0
    c528:	e7af      	b.n	c48a <ticker_job+0x93e>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c52a:	f1be 0f00 	cmp.w	lr, #0
    c52e:	f47f aeb9 	bne.w	c2a4 <ticker_job+0x758>
    c532:	b112      	cbz	r2, c53a <ticker_job+0x9ee>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c534:	7a17      	ldrb	r7, [r2, #8]
    c536:	2f01      	cmp	r7, #1
    c538:	d08e      	beq.n	c458 <ticker_job+0x90c>
			instance->ticks_slot_previous = ticker->ticks_slot;
    c53a:	9f04      	ldr	r7, [sp, #16]
			instance->ticker_id_slot_previous = id_expired;
    c53c:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    c540:	f8cb 7018 	str.w	r7, [fp, #24]
    c544:	e6ae      	b.n	c2a4 <ticker_job+0x758>
			ticks_to_expire_minus +=
    c546:	4411      	add	r1, r2
    c548:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    c54a:	e7ec      	b.n	c526 <ticker_job+0x9da>
    c54c:	2700      	movs	r7, #0
					lazy_periodic = 0U;
    c54e:	9704      	str	r7, [sp, #16]
    c550:	e7b8      	b.n	c4c4 <ticker_job+0x978>
	ticker_new->next = current;
    c552:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    c554:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    c556:	f880 c000 	strb.w	ip, [r0]
    c55a:	4663      	mov	r3, ip
		node[previous].next = id;
    c55c:	b212      	sxth	r2, r2
    c55e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c562:	0112      	lsls	r2, r2, #4
    c564:	f807 a002 	strb.w	sl, [r7, r2]
    c568:	e717      	b.n	c39a <ticker_job+0x84e>
    c56a:	9a04      	ldr	r2, [sp, #16]
    c56c:	4661      	mov	r1, ip
    c56e:	e70d      	b.n	c38c <ticker_job+0x840>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c570:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    c572:	f8db e014 	ldr.w	lr, [fp, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    c576:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
    c57a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
    c57e:	429f      	cmp	r7, r3
    c580:	e9d5 0203 	ldrd	r0, r2, [r5, #12]
    c584:	d03a      	beq.n	c5fc <ticker_job+0xab0>
		ticker->must_expire =
    c586:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c58a:	1afb      	subs	r3, r7, r3
    c58c:	fab3 f383 	clz	r3, r3
    c590:	095b      	lsrs	r3, r3, #5
	ticker->ext_data = start->ext_data;
    c592:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->lazy_periodic =
    c596:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	ticker->ticks_periodic = start->ticks_periodic;
    c59a:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c59c:	6222      	str	r2, [r4, #32]
		ticker->must_expire =
    c59e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
    c5a2:	454f      	cmp	r7, r9
    c5a4:	bf88      	it	hi
    c5a6:	2700      	movhi	r7, #0
	ticker->timeout_func = start->fp_timeout_func;
    c5a8:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c5ac:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    c5ae:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    c5b0:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic =
    c5b2:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c5b4:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    c5b8:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c5bc:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    c5be:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c5c0:	d40c      	bmi.n	c5dc <ticker_job+0xa90>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c5c2:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c5c6:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    c5c8:	b18b      	cbz	r3, c5ee <ticker_job+0xaa2>
	ticker->ticks_to_expire = ticks_to_expire;
    c5ca:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    c5cc:	2300      	movs	r3, #0
    c5ce:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    c5d0:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    c5d2:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c5d6:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    c5d8:	70e3      	strb	r3, [r4, #3]
}
    c5da:	e6ac      	b.n	c336 <ticker_job+0x7ea>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c5dc:	ebae 0200 	sub.w	r2, lr, r0
    c5e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c5e4:	4293      	cmp	r3, r2
    c5e6:	d905      	bls.n	c5f4 <ticker_job+0xaa8>
			ticks_to_expire -= delta_current_start;
    c5e8:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c5ea:	2b00      	cmp	r3, #0
    c5ec:	d1ed      	bne.n	c5ca <ticker_job+0xa7e>
		ticks_to_expire_minus -= ticks_to_expire;
    c5ee:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c5f0:	2300      	movs	r3, #0
    c5f2:	e7ea      	b.n	c5ca <ticker_job+0xa7e>
			    (delta_current_start - ticks_to_expire);
    c5f4:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    c5f6:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c5f8:	2300      	movs	r3, #0
    c5fa:	e7e6      	b.n	c5ca <ticker_job+0xa7e>
	ticker->ext_data = start->ext_data;
    c5fc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    c600:	6060      	str	r0, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    c602:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    c604:	460f      	mov	r7, r1
    c606:	e7cf      	b.n	c5a8 <ticker_job+0xa5c>
	ticker_new->next = current;
    c608:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    c60c:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c610:	e6cc      	b.n	c3ac <ticker_job+0x860>
    c612:	f8db 3000 	ldr.w	r3, [fp]
    c616:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
    c618:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c61c:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
    c61e:	2300      	movs	r3, #0
    c620:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
    c622:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    c626:	d010      	beq.n	c64a <ticker_job+0xafe>
    c628:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
    c62a:	fa0f f289 	sxth.w	r2, r9
    c62e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c632:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    c636:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    c638:	b117      	cbz	r7, c640 <ticker_job+0xaf4>
    c63a:	7a39      	ldrb	r1, [r7, #8]
    c63c:	2901      	cmp	r1, #1
    c63e:	d014      	beq.n	c66a <ticker_job+0xb1e>
			ticker_id_head = ticker->next;
    c640:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
    c644:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    c648:	d1ef      	bne.n	c62a <ticker_job+0xade>
	return rescheduled;
    c64a:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    c64c:	2b00      	cmp	r3, #0
    c64e:	f43f ad91 	beq.w	c174 <ticker_job+0x628>
	if (instance->ticker_id_head != ticker_id_old_head) {
    c652:	9a06      	ldr	r2, [sp, #24]
    c654:	42ba      	cmp	r2, r7
    c656:	f47f ad91 	bne.w	c17c <ticker_job+0x630>
	if (!pending) {
    c65a:	9a08      	ldr	r2, [sp, #32]
    c65c:	2a00      	cmp	r2, #0
    c65e:	f000 817a 	beq.w	c956 <ticker_job+0xe0a>
	instance->job_guard = 0U;
    c662:	2300      	movs	r3, #0
    c664:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c668:	e591      	b.n	c18e <ticker_job+0x642>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c66a:	f89b 301c 	ldrb.w	r3, [fp, #28]
    c66e:	2bff      	cmp	r3, #255	; 0xff
    c670:	d071      	beq.n	c756 <ticker_job+0xc0a>
			instance->ticks_slot_previous > ticks_elapsed) {
    c672:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c676:	9b02      	ldr	r3, [sp, #8]
    c678:	4283      	cmp	r3, r0
    c67a:	d26c      	bcs.n	c756 <ticker_job+0xc0a>
			window_start_ticks = instance->ticks_slot_previous -
    c67c:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c67e:	e9d7 4300 	ldrd	r4, r3, [r7]
    c682:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    c684:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c688:	d26d      	bcs.n	c766 <ticker_job+0xc1a>
		while (ticker_id_iter != TICKER_NULL &&
    c68a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    c68e:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    c692:	d068      	beq.n	c766 <ticker_job+0xc1a>
		       ticks_start_offset + ticker->ticks_slot <=
    c694:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    c696:	42a5      	cmp	r5, r4
    c698:	f04f 0300 	mov.w	r3, #0
    c69c:	d833      	bhi.n	c706 <ticker_job+0xbba>
    c69e:	469e      	mov	lr, r3
    c6a0:	9501      	str	r5, [sp, #4]
    c6a2:	4661      	mov	r1, ip
    c6a4:	9203      	str	r2, [sp, #12]
    c6a6:	e01d      	b.n	c6e4 <ticker_job+0xb98>
			if (node->ticks_to_expire >
    c6a8:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
    c6ac:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
    c6b0:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
    c6b4:	4473      	add	r3, lr
			if (node->ticks_to_expire >
    c6b6:	d909      	bls.n	c6cc <ticker_job+0xb80>
				window_end_ticks =
    c6b8:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
    c6ba:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
    c6bc:	bf28      	it	cs
    c6be:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    c6c0:	4293      	cmp	r3, r2
    c6c2:	d903      	bls.n	c6cc <ticker_job+0xb80>
			if (ticks_to_expire != 0U &&
    c6c4:	1b5b      	subs	r3, r3, r5
    c6c6:	d001      	beq.n	c6cc <ticker_job+0xb80>
    c6c8:	4283      	cmp	r3, r0
    c6ca:	d21b      	bcs.n	c704 <ticker_job+0xbb8>
			window_start_ticks  = node->ticks_to_expire +
    c6cc:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    c6ce:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
    c6d0:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
    c6d2:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
    c6d4:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
    c6d6:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
    c6da:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    c6dc:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
    c6de:	d011      	beq.n	c704 <ticker_job+0xbb8>
    c6e0:	4294      	cmp	r4, r2
    c6e2:	d30f      	bcc.n	c704 <ticker_job+0xbb8>
			node = &nodes[ticker_id_iter];
    c6e4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c6e8:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    c6ec:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
    c6f0:	f1b8 0f00 	cmp.w	r8, #0
    c6f4:	d0d8      	beq.n	c6a8 <ticker_job+0xb5c>
    c6f6:	f898 8008 	ldrb.w	r8, [r8, #8]
    c6fa:	f1b8 0f01 	cmp.w	r8, #1
    c6fe:	d1d3      	bne.n	c6a8 <ticker_job+0xb5c>
				ticker_id_iter = node->next;
    c700:	7809      	ldrb	r1, [r1, #0]
				continue;
    c702:	e7e8      	b.n	c6d6 <ticker_job+0xb8a>
    c704:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    c706:	6093      	str	r3, [r2, #8]
    c708:	4664      	mov	r4, ip
    c70a:	f04f 0eff 	mov.w	lr, #255	; 0xff
    c70e:	e000      	b.n	c712 <ticker_job+0xbc6>
    c710:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    c712:	b221      	sxth	r1, r4
    c714:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c718:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    c71c:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    c71e:	f8d8 5008 	ldr.w	r5, [r8, #8]
    c722:	429d      	cmp	r5, r3
    c724:	d24c      	bcs.n	c7c0 <ticker_job+0xc74>
				ticker->ticks_to_expire -=
    c726:	1b5b      	subs	r3, r3, r5
    c728:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    c72a:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    c72c:	28ff      	cmp	r0, #255	; 0xff
    c72e:	46a6      	mov	lr, r4
    c730:	d1ee      	bne.n	c710 <ticker_job+0xbc4>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c732:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c736:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    c738:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c73c:	5c73      	ldrb	r3, [r6, r1]
    c73e:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    c740:	f806 9001 	strb.w	r9, [r6, r1]
    c744:	46e2      	mov	sl, ip
		ticker->lazy_current--;
    c746:	8bd3      	ldrh	r3, [r2, #30]
    c748:	3b01      	subs	r3, #1
    c74a:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    c74c:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    c750:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    c752:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    c754:	e765      	b.n	c622 <ticker_job+0xad6>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c756:	e9d7 4300 	ldrd	r4, r3, [r7]
    c75a:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    c75c:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
    c760:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c764:	d391      	bcc.n	c68a <ticker_job+0xb3e>
		ticker->ticks_to_expire = ticks_to_expire;
    c766:	2300      	movs	r3, #0
    c768:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    c76a:	e7ec      	b.n	c746 <ticker_job+0xbfa>
					while (ticks_to_expire <
    c76c:	4598      	cmp	r8, r3
    c76e:	f67f aecd 	bls.w	c50c <ticker_job+0x9c0>
    c772:	1c77      	adds	r7, r6, #1
    c774:	9709      	str	r7, [sp, #36]	; 0x24
    c776:	e005      	b.n	c784 <ticker_job+0xc38>
    c778:	4637      	mov	r7, r6
						ticks_to_expire +=
    c77a:	443b      	add	r3, r7
						lazy++;
    c77c:	3101      	adds	r1, #1
					while (ticks_to_expire <
    c77e:	4598      	cmp	r8, r3
						lazy++;
    c780:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    c782:	d911      	bls.n	c7a8 <ticker_job+0xc5c>
	if ((ticker->remainder_current < BIT(31)) &&
    c784:	4f0c      	ldr	r7, [pc, #48]	; (c7b8 <ticker_job+0xc6c>)
    c786:	480d      	ldr	r0, [pc, #52]	; (c7bc <ticker_job+0xc70>)
	ticker->remainder_current += ticker->remainder_periodic;
    c788:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c78a:	19d7      	adds	r7, r2, r7
    c78c:	4287      	cmp	r7, r0
    c78e:	d8f3      	bhi.n	c778 <ticker_job+0xc2c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c790:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c792:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    c796:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c798:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    c79c:	3101      	adds	r1, #1
					while (ticks_to_expire <
    c79e:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c7a0:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    c7a4:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    c7a6:	d8ed      	bhi.n	c784 <ticker_job+0xc38>
    c7a8:	9e04      	ldr	r6, [sp, #16]
    c7aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    c7ac:	6262      	str	r2, [r4, #36]	; 0x24
    c7ae:	440e      	add	r6, r1
    c7b0:	b2b1      	uxth	r1, r6
    c7b2:	9104      	str	r1, [sp, #16]
    c7b4:	e6aa      	b.n	c50c <ticker_job+0x9c0>
    c7b6:	4770      	bx	lr
    c7b8:	ff172b5a 	.word	0xff172b5a
    c7bc:	7f172b59 	.word	0x7f172b59
				node->ticks_to_expire -=
    c7c0:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    c7c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    c7c6:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    c7ca:	d0bc      	beq.n	c746 <ticker_job+0xbfa>
    c7cc:	fa0f f18e 	sxth.w	r1, lr
    c7d0:	e7af      	b.n	c732 <ticker_job+0xbe6>
	if (!pending) {
    c7d2:	9b08      	ldr	r3, [sp, #32]
    c7d4:	2b00      	cmp	r3, #0
    c7d6:	f000 80a6 	beq.w	c926 <ticker_job+0xdda>
	instance->job_guard = 0U;
    c7da:	2300      	movs	r3, #0
    c7dc:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c7e0:	9b07      	ldr	r3, [sp, #28]
    c7e2:	2b00      	cmp	r3, #0
    c7e4:	f040 80c4 	bne.w	c970 <ticker_job+0xe24>
    c7e8:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
    c7ec:	b16a      	cbz	r2, c80a <ticker_job+0xcbe>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c7ee:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    c7f2:	465b      	mov	r3, fp
    c7f4:	2201      	movs	r2, #1
    c7f6:	2103      	movs	r1, #3
    c7f8:	2004      	movs	r0, #4
    c7fa:	46a4      	mov	ip, r4
}
    c7fc:	b00f      	add	sp, #60	; 0x3c
    c7fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c802:	4760      	bx	ip
	instance->job_guard = 0U;
    c804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c806:	f88b 301e 	strb.w	r3, [fp, #30]
}
    c80a:	b00f      	add	sp, #60	; 0x3c
    c80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
    c810:	eba3 030a 	sub.w	r3, r3, sl
    c814:	60a3      	str	r3, [r4, #8]
			break;
    c816:	f8db 3000 	ldr.w	r3, [fp]
    c81a:	9303      	str	r3, [sp, #12]
    c81c:	e562      	b.n	c2e4 <ticker_job+0x798>
	count_user = instance->count_user;
    c81e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c822:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c826:	1e5c      	subs	r4, r3, #1
    c828:	b2e4      	uxtb	r4, r4
    c82a:	2b00      	cmp	r3, #0
    c82c:	f43f acaa 	beq.w	c184 <ticker_job+0x638>
		flag_compare_update = 1U;
    c830:	2301      	movs	r3, #1
    c832:	9307      	str	r3, [sp, #28]
    c834:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    c838:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    c83c:	7863      	ldrb	r3, [r4, #1]
    c83e:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    c840:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    c842:	4299      	cmp	r1, r3
    c844:	d10c      	bne.n	c860 <ticker_job+0xd14>
    c846:	e060      	b.n	c90a <ticker_job+0xdbe>
	switch (uop->op) {
    c848:	2b01      	cmp	r3, #1
    c84a:	d05a      	beq.n	c902 <ticker_job+0xdb6>
			first = user->first + 1;
    c84c:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    c84e:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    c850:	3301      	adds	r3, #1
    c852:	b2db      	uxtb	r3, r3
				first = 0U;
    c854:	429a      	cmp	r2, r3
    c856:	bf08      	it	eq
    c858:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    c85a:	4299      	cmp	r1, r3
			user->first = first;
    c85c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    c85e:	d054      	beq.n	c90a <ticker_job+0xdbe>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    c860:	b21b      	sxth	r3, r3
    c862:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c866:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c86a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    c86e:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    c872:	2b02      	cmp	r3, #2
    c874:	d01b      	beq.n	c8ae <ticker_job+0xd62>
    c876:	2b03      	cmp	r3, #3
    c878:	d1e6      	bne.n	c848 <ticker_job+0xcfc>
		if (uop->id < instance->count_node) {
    c87a:	7853      	ldrb	r3, [r2, #1]
    c87c:	f89b 1008 	ldrb.w	r1, [fp, #8]
    c880:	4299      	cmp	r1, r3
    c882:	d911      	bls.n	c8a8 <ticker_job+0xd5c>
			node[uop->id].priority =
    c884:	f8db 1000 	ldr.w	r1, [fp]
    c888:	7910      	ldrb	r0, [r2, #4]
    c88a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c88e:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c892:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    c896:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    c89a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    c89c:	b113      	cbz	r3, c8a4 <ticker_job+0xd58>
		fp_op_func(uop->status, uop->op_context);
    c89e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    c8a0:	6a90      	ldr	r0, [r2, #40]	; 0x28
    c8a2:	4798      	blx	r3
    c8a4:	78e1      	ldrb	r1, [r4, #3]
    c8a6:	e7d1      	b.n	c84c <ticker_job+0xd00>
			uop->status = TICKER_STATUS_FAILURE;
    c8a8:	2301      	movs	r3, #1
    c8aa:	6293      	str	r3, [r2, #40]	; 0x28
    c8ac:	e7f5      	b.n	c89a <ticker_job+0xd4e>
		ticker_by_next_slot_get(instance,
    c8ae:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    c8b2:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    c8b6:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    c8ba:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    c8be:	f8db 8014 	ldr.w	r8, [fp, #20]
    c8c2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    c8c6:	d002      	beq.n	c8ce <ticker_job+0xd82>
    c8c8:	6803      	ldr	r3, [r0, #0]
    c8ca:	4598      	cmp	r8, r3
    c8cc:	d024      	beq.n	c918 <ticker_job+0xdcc>
		_ticker_id_head = instance->ticker_id_head;
    c8ce:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    c8d2:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    c8d6:	f04f 0e00 	mov.w	lr, #0
    c8da:	e00d      	b.n	c8f8 <ticker_job+0xdac>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    c8dc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    c8e0:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    c8e4:	0100      	lsls	r0, r0, #4
    c8e6:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    c8ea:	f8d8 8018 	ldr.w	r8, [r8, #24]
    c8ee:	44d6      	add	lr, sl
    c8f0:	f1b8 0f00 	cmp.w	r8, #0
    c8f4:	d102      	bne.n	c8fc <ticker_job+0xdb0>
		_ticker_id_head = ticker->next;
    c8f6:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    c8f8:	2bff      	cmp	r3, #255	; 0xff
    c8fa:	d1ef      	bne.n	c8dc <ticker_job+0xd90>
	*ticker_id_head = _ticker_id_head;
    c8fc:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    c8fe:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    c902:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    c904:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    c908:	e7c8      	b.n	c89c <ticker_job+0xd50>
	while (count_user--) {
    c90a:	42a6      	cmp	r6, r4
    c90c:	f1a4 0308 	sub.w	r3, r4, #8
    c910:	f43f af63 	beq.w	c7da <ticker_job+0xc8e>
    c914:	461c      	mov	r4, r3
    c916:	e791      	b.n	c83c <ticker_job+0xcf0>
		ticker = &node[_ticker_id_head];
    c918:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    c91c:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    c91e:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    c922:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    c924:	e7e8      	b.n	c8f8 <ticker_job+0xdac>
	count_user = instance->count_user;
    c926:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c92a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c92e:	1e5c      	subs	r4, r3, #1
    c930:	b2e4      	uxtb	r4, r4
    c932:	2b00      	cmp	r3, #0
    c934:	f47f af7e 	bne.w	c834 <ticker_job+0xce8>
    c938:	e74f      	b.n	c7da <ticker_job+0xc8e>
		if (cntr_stop() == 0) {
    c93a:	f00a fdef 	bl	1751c <cntr_stop>
    c93e:	2800      	cmp	r0, #0
    c940:	f47f af52 	bne.w	c7e8 <ticker_job+0xc9c>
			instance->ticks_slot_previous = 0U;
    c944:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    c948:	f00a fe0e 	bl	17568 <cntr_cnt_get>
    c94c:	f89b 201f 	ldrb.w	r2, [fp, #31]
    c950:	f8cb 0014 	str.w	r0, [fp, #20]
    c954:	e74a      	b.n	c7ec <ticker_job+0xca0>
	count_user = instance->count_user;
    c956:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    c95a:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c95e:	1e54      	subs	r4, r2, #1
    c960:	b2e4      	uxtb	r4, r4
    c962:	2a00      	cmp	r2, #0
    c964:	f47f af65 	bne.w	c832 <ticker_job+0xce6>
	instance->job_guard = 0U;
    c968:	9b08      	ldr	r3, [sp, #32]
    c96a:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c96e:	e40e      	b.n	c18e <ticker_job+0x642>
    c970:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c974:	e40b      	b.n	c18e <ticker_job+0x642>
		ticks_current = cntr_cnt_get();
    c976:	f00a fdf7 	bl	17568 <cntr_cnt_get>
    c97a:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    c97c:	f00a fdbe 	bl	174fc <cntr_start>
    c980:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c984:	2800      	cmp	r0, #0
    c986:	f47f ac09 	bne.w	c19c <ticker_job+0x650>
			instance->ticks_current = ticks_current;
    c98a:	f8cb 4014 	str.w	r4, [fp, #20]
    c98e:	e405      	b.n	c19c <ticker_job+0x650>

0000c990 <ticker_init>:
{
    c990:	b4f0      	push	{r4, r5, r6, r7}
    c992:	9f04      	ldr	r7, [sp, #16]
    c994:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c998:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    c99a:	2800      	cmp	r0, #0
    c99c:	d13e      	bne.n	ca1c <ticker_init+0x8c>
	instance->count_node = count_node;
    c99e:	f8df c084 	ldr.w	ip, [pc, #132]	; ca24 <ticker_init+0x94>
	while (count_node--) {
    c9a2:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    c9a4:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    c9a8:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    c9ac:	b2ed      	uxtb	r5, r5
    c9ae:	b149      	cbz	r1, c9c4 <ticker_init+0x34>
    c9b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c9b4:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    c9b8:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    c9ba:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    c9be:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    c9c2:	d1f9      	bne.n	c9b8 <ticker_init+0x28>
	while (count_user--) {
    c9c4:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    c9c6:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    c9ca:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    c9ce:	b2d2      	uxtb	r2, r2
    c9d0:	b17b      	cbz	r3, c9f2 <ticker_init+0x62>
    c9d2:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    c9d6:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    c9d8:	4611      	mov	r1, r2
    c9da:	f812 3908 	ldrb.w	r3, [r2], #-8
    c9de:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    c9e2:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    c9e4:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    c9e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    c9ea:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    c9ec:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    c9f0:	d1f1      	bne.n	c9d6 <ticker_init+0x46>
	if (count_op) {
    c9f2:	b99c      	cbnz	r4, ca1c <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    c9f4:	9a07      	ldr	r2, [sp, #28]
    c9f6:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    c9fa:	9a08      	ldr	r2, [sp, #32]
    c9fc:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    ca00:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    ca04:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    ca06:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    ca0a:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    ca0c:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    ca10:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    ca12:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    ca16:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    ca1a:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    ca1c:	2001      	movs	r0, #1
}
    ca1e:	bcf0      	pop	{r4, r5, r6, r7}
    ca20:	4770      	bx	lr
    ca22:	bf00      	nop
    ca24:	20002b48 	.word	0x20002b48

0000ca28 <ticker_trigger>:
	if (instance->sched_cb) {
    ca28:	4b0a      	ldr	r3, [pc, #40]	; (ca54 <ticker_trigger+0x2c>)
    ca2a:	222c      	movs	r2, #44	; 0x2c
    ca2c:	fb02 3200 	mla	r2, r2, r0, r3
{
    ca30:	b410      	push	{r4}
	if (instance->sched_cb) {
    ca32:	6a54      	ldr	r4, [r2, #36]	; 0x24
    ca34:	b15c      	cbz	r4, ca4e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    ca36:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    ca3a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ca3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca42:	46a4      	mov	ip, r4
    ca44:	2201      	movs	r2, #1
}
    ca46:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ca48:	2103      	movs	r1, #3
    ca4a:	2002      	movs	r0, #2
    ca4c:	4760      	bx	ip
}
    ca4e:	bc10      	pop	{r4}
    ca50:	4770      	bx	lr
    ca52:	bf00      	nop
    ca54:	20002b48 	.word	0x20002b48

0000ca58 <ticker_start_ext>:
{
    ca58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ca5c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; cb00 <ticker_start_ext+0xa8>
{
    ca60:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    ca64:	272c      	movs	r7, #44	; 0x2c
    ca66:	fb07 8700 	mla	r7, r7, r0, r8
{
    ca6a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    ca6c:	687d      	ldr	r5, [r7, #4]
    ca6e:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    ca72:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    ca76:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    ca7a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    ca7e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    ca82:	1c75      	adds	r5, r6, #1
{
    ca84:	4608      	mov	r0, r1
	last = user->last + 1;
    ca86:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    ca88:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    ca8c:	45a9      	cmp	r9, r5
    ca8e:	bf98      	it	ls
    ca90:	2500      	movls	r5, #0
	if (last == user->first) {
    ca92:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    ca94:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    ca98:	d02f      	beq.n	cafa <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    ca9a:	f8dc 1004 	ldr.w	r1, [ip, #4]
    ca9e:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    caa2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    caa6:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    caaa:	f04f 0904 	mov.w	r9, #4
    caae:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    cab2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    cab4:	9b08      	ldr	r3, [sp, #32]
    cab6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    cab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    caba:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    cabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cabe:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    cac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cac2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    cac4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cac6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    cac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    caca:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    cacc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cace:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    cad0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cad2:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    cad4:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    cad6:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    cad8:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    cada:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    cade:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    cae0:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    cae2:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cae6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    caea:	4798      	blx	r3
    caec:	4643      	mov	r3, r8
    caee:	4649      	mov	r1, r9
    caf0:	2200      	movs	r2, #0
    caf2:	47a8      	blx	r5
	return user_op->status;
    caf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    caf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    cafa:	2001      	movs	r0, #1
}
    cafc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb00:	20002b48 	.word	0x20002b48

0000cb04 <ticker_start>:
{
    cb04:	b530      	push	{r4, r5, lr}
    cb06:	b08b      	sub	sp, #44	; 0x2c
    cb08:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb0c:	9500      	str	r5, [sp, #0]
{
    cb0e:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb10:	9401      	str	r4, [sp, #4]
    cb12:	9502      	str	r5, [sp, #8]
{
    cb14:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    cb18:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb1a:	9403      	str	r4, [sp, #12]
    cb1c:	9504      	str	r5, [sp, #16]
{
    cb1e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    cb20:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb22:	9405      	str	r4, [sp, #20]
    cb24:	9506      	str	r5, [sp, #24]
{
    cb26:	9c15      	ldr	r4, [sp, #84]	; 0x54
    cb28:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb2a:	9407      	str	r4, [sp, #28]
    cb2c:	2400      	movs	r4, #0
    cb2e:	e9cd 5408 	strd	r5, r4, [sp, #32]
    cb32:	f7ff ff91 	bl	ca58 <ticker_start_ext>
}
    cb36:	b00b      	add	sp, #44	; 0x2c
    cb38:	bd30      	pop	{r4, r5, pc}
    cb3a:	bf00      	nop

0000cb3c <ticker_update_ext>:
	struct ticker_instance *instance = &_instance[instance_index];
    cb3c:	f8df c0a0 	ldr.w	ip, [pc, #160]	; cbe0 <ticker_update_ext+0xa4>
{
    cb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	user = &instance->users[user_id];
    cb44:	272c      	movs	r7, #44	; 0x2c
    cb46:	fb07 c700 	mla	r7, r7, r0, ip
{
    cb4a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    cb4c:	687d      	ldr	r5, [r7, #4]
{
    cb4e:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
    cb52:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
    cb56:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    cb5a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    cb5c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    cb60:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    cb64:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    cb66:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    cb6a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    cb6e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    cb72:	1c75      	adds	r5, r6, #1
    cb74:	b2ed      	uxtb	r5, r5
		last = 0U;
    cb76:	45aa      	cmp	sl, r5
    cb78:	bf98      	it	ls
    cb7a:	2500      	movls	r5, #0
	if (last == user->first) {
    cb7c:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    cb7e:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    cb82:	d02a      	beq.n	cbda <ticker_update_ext+0x9e>
	user_op = &user->user_op[user->last];
    cb84:	f8d1 c004 	ldr.w	ip, [r1, #4]
    cb88:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    cb8c:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    cb90:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    cb94:	f04f 0905 	mov.w	r9, #5
    cb98:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    cb9c:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    cb9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cba0:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    cba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cba4:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    cba6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cba8:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    cbaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbac:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    cbae:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    cbb0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    cbb2:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    cbb4:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    cbb8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    cbba:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->params.update.must_expire = must_expire;
    cbbe:	f884 b017 	strb.w	fp, [r4, #23]
	user_op->status = TICKER_STATUS_BUSY;
    cbc2:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    cbc4:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cbc6:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    cbca:	4798      	blx	r3
    cbcc:	4653      	mov	r3, sl
    cbce:	2200      	movs	r2, #0
    cbd0:	2104      	movs	r1, #4
    cbd2:	47a8      	blx	r5
	return user_op->status;
    cbd4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    cbd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    cbda:	2001      	movs	r0, #1
}
    cbdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbe0:	20002b48 	.word	0x20002b48

0000cbe4 <ticker_update>:
{
    cbe4:	b530      	push	{r4, r5, lr}
    cbe6:	b089      	sub	sp, #36	; 0x24
    cbe8:	e9dd 540c 	ldrd	r5, r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cbec:	9500      	str	r5, [sp, #0]
{
    cbee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cbf0:	9401      	str	r4, [sp, #4]
    cbf2:	9502      	str	r5, [sp, #8]
{
    cbf4:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
    cbf8:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cbfc:	9403      	str	r4, [sp, #12]
    cbfe:	9504      	str	r5, [sp, #16]
{
    cc00:	9c11      	ldr	r4, [sp, #68]	; 0x44
    cc02:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc04:	9405      	str	r4, [sp, #20]
    cc06:	2400      	movs	r4, #0
    cc08:	e9cd 5406 	strd	r5, r4, [sp, #24]
    cc0c:	f7ff ff96 	bl	cb3c <ticker_update_ext>
}
    cc10:	b009      	add	sp, #36	; 0x24
    cc12:	bd30      	pop	{r4, r5, pc}

0000cc14 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    cc14:	f8df c084 	ldr.w	ip, [pc, #132]	; cc9c <ticker_stop+0x88>
{
    cc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    cc1c:	272c      	movs	r7, #44	; 0x2c
    cc1e:	fb07 c700 	mla	r7, r7, r0, ip
{
    cc22:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    cc24:	687d      	ldr	r5, [r7, #4]
{
    cc26:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    cc28:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    cc2c:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    cc30:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    cc32:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    cc36:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    cc3a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    cc3e:	1c75      	adds	r5, r6, #1
    cc40:	b2ed      	uxtb	r5, r5
		last = 0U;
    cc42:	45a8      	cmp	r8, r5
    cc44:	bf98      	it	ls
    cc46:	2500      	movls	r5, #0
	if (last == user->first) {
    cc48:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    cc4a:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    cc4e:	d021      	beq.n	cc94 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    cc50:	f8d1 c004 	ldr.w	ip, [r1, #4]
    cc54:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    cc58:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    cc5c:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    cc60:	f04f 0e06 	mov.w	lr, #6
    cc64:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    cc68:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    cc6c:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    cc6e:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    cc70:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    cc74:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    cc78:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    cc7c:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cc7e:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    cc82:	4798      	blx	r3
    cc84:	4623      	mov	r3, r4
    cc86:	2200      	movs	r2, #0
    cc88:	2104      	movs	r1, #4
    cc8a:	47a8      	blx	r5
	return user_op->status;
    cc8c:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    cc94:	2001      	movs	r0, #1
}
    cc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cc9a:	bf00      	nop
    cc9c:	20002b48 	.word	0x20002b48

0000cca0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    cca0:	f00a bc62 	b.w	17568 <cntr_cnt_get>

0000cca4 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    cca4:	1a40      	subs	r0, r0, r1
}
    cca6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ccaa:	4770      	bx	lr

0000ccac <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    ccac:	2801      	cmp	r0, #1
    ccae:	d810      	bhi.n	ccd2 <ll_addr_get+0x26>
		return NULL;
	}

	if (addr_type) {
    ccb0:	b938      	cbnz	r0, ccc2 <ll_addr_get+0x16>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    ccb2:	b181      	cbz	r1, ccd6 <ll_addr_get+0x2a>
    ccb4:	4b0a      	ldr	r3, [pc, #40]	; (cce0 <ll_addr_get+0x34>)
    ccb6:	6818      	ldr	r0, [r3, #0]
    ccb8:	6008      	str	r0, [r1, #0]
    ccba:	889a      	ldrh	r2, [r3, #4]
    ccbc:	808a      	strh	r2, [r1, #4]
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
	}

	return pub_addr;
    ccbe:	4618      	mov	r0, r3
    ccc0:	4770      	bx	lr
		if (bdaddr) {
    ccc2:	b151      	cbz	r1, ccda <ll_addr_get+0x2e>
    ccc4:	4b07      	ldr	r3, [pc, #28]	; (cce4 <ll_addr_get+0x38>)
    ccc6:	6818      	ldr	r0, [r3, #0]
    ccc8:	6008      	str	r0, [r1, #0]
    ccca:	889a      	ldrh	r2, [r3, #4]
    cccc:	808a      	strh	r2, [r1, #4]
	return pub_addr;
    ccce:	4618      	mov	r0, r3
    ccd0:	4770      	bx	lr
		return NULL;
    ccd2:	2000      	movs	r0, #0
    ccd4:	4770      	bx	lr
	return pub_addr;
    ccd6:	4802      	ldr	r0, [pc, #8]	; (cce0 <ll_addr_get+0x34>)
}
    ccd8:	4770      	bx	lr
		return rnd_addr;
    ccda:	4802      	ldr	r0, [pc, #8]	; (cce4 <ll_addr_get+0x38>)
    ccdc:	4770      	bx	lr
    ccde:	bf00      	nop
    cce0:	20002b74 	.word	0x20002b74
    cce4:	20002b7c 	.word	0x20002b7c

0000cce8 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    cce8:	b538      	push	{r3, r4, r5, lr}
    ccea:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    ccec:	2000      	movs	r0, #0
{
    ccee:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
    ccf0:	f003 f888 	bl	fe04 <ull_adv_is_enabled>
    ccf4:	b978      	cbnz	r0, cd16 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    ccf6:	b13c      	cbz	r4, cd08 <ll_addr_set+0x20>
    ccf8:	4a08      	ldr	r2, [pc, #32]	; (cd1c <ll_addr_set+0x34>)
    ccfa:	4603      	mov	r3, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    ccfc:	6828      	ldr	r0, [r5, #0]
    ccfe:	6010      	str	r0, [r2, #0]
    cd00:	88a9      	ldrh	r1, [r5, #4]
    cd02:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    cd04:	4618      	mov	r0, r3
}
    cd06:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    cd08:	4b05      	ldr	r3, [pc, #20]	; (cd20 <ll_addr_set+0x38>)
    cd0a:	6828      	ldr	r0, [r5, #0]
    cd0c:	6018      	str	r0, [r3, #0]
    cd0e:	88aa      	ldrh	r2, [r5, #4]
    cd10:	809a      	strh	r2, [r3, #4]
	return 0;
    cd12:	4620      	mov	r0, r4
}
    cd14:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    cd16:	200c      	movs	r0, #12
}
    cd18:	bd38      	pop	{r3, r4, r5, pc}
    cd1a:	bf00      	nop
    cd1c:	20002b7c 	.word	0x20002b7c
    cd20:	20002b74 	.word	0x20002b74

0000cd24 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    cd24:	2802      	cmp	r0, #2
    cd26:	d001      	beq.n	cd2c <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    cd28:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    cd2a:	4770      	bx	lr
{
    cd2c:	b538      	push	{r3, r4, r5, lr}
    cd2e:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    cd30:	4608      	mov	r0, r1
    cd32:	461d      	mov	r5, r3
    cd34:	f003 fe2c 	bl	10990 <ll_connected_get>
			if (!conn) {
    cd38:	b110      	cbz	r0, cd40 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    cd3a:	2000      	movs	r0, #0
    cd3c:	7028      	strb	r0, [r5, #0]
}
    cd3e:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd40:	4620      	mov	r0, r4
}
    cd42:	bd38      	pop	{r3, r4, r5, pc}

0000cd44 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    cd44:	2300      	movs	r3, #0
    cd46:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    cd48:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    cd4a:	4770      	bx	lr

0000cd4c <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    cd4c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    cd4e:	4802      	ldr	r0, [pc, #8]	; (cd58 <hci_driver_init+0xc>)
    cd50:	f7f9 fce6 	bl	6720 <bt_hci_driver_register>

	return 0;
}
    cd54:	2000      	movs	r0, #0
    cd56:	bd08      	pop	{r3, pc}
    cd58:	0002c6d0 	.word	0x0002c6d0

0000cd5c <recv_thread>:
{
    cd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    cd5e:	4d37      	ldr	r5, [pc, #220]	; (ce3c <recv_thread+0xe0>)
		LL_ASSERT(0);
    cd60:	4f37      	ldr	r7, [pc, #220]	; (ce40 <recv_thread+0xe4>)
    cd62:	4e38      	ldr	r6, [pc, #224]	; (ce44 <recv_thread+0xe8>)
{
    cd64:	b083      	sub	sp, #12
    cd66:	e015      	b.n	cd94 <recv_thread+0x38>
	switch (class) {
    cd68:	2b00      	cmp	r3, #0
    cd6a:	d13c      	bne.n	cde6 <recv_thread+0x8a>
		LL_ASSERT(0);
    cd6c:	4836      	ldr	r0, [pc, #216]	; (ce48 <recv_thread+0xec>)
    cd6e:	23cf      	movs	r3, #207	; 0xcf
    cd70:	463a      	mov	r2, r7
    cd72:	4631      	mov	r1, r6
    cd74:	f016 f81b 	bl	22dae <printk>
    cd78:	4040      	eors	r0, r0
    cd7a:	f380 8811 	msr	BASEPRI, r0
    cd7e:	f04f 0003 	mov.w	r0, #3
    cd82:	df02      	svc	2
	node_rx->hdr.next = NULL;
    cd84:	9b01      	ldr	r3, [sp, #4]
    cd86:	2200      	movs	r2, #0
    cd88:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cd8a:	a801      	add	r0, sp, #4
    cd8c:	f002 f944 	bl	f018 <ll_rx_mem_release>
	z_impl_k_yield();
    cd90:	f013 f902 	bl	1ff98 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    cd94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd9c:	4628      	mov	r0, r5
    cd9e:	f012 fd9f 	bl	1f8e0 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    cda2:	2800      	cmp	r0, #0
    cda4:	d0f4      	beq.n	cd90 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
    cda6:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    cda8:	9001      	str	r0, [sp, #4]
	switch (class) {
    cdaa:	2b04      	cmp	r3, #4
    cdac:	d9dc      	bls.n	cd68 <recv_thread+0xc>
    cdae:	2b05      	cmp	r3, #5
    cdb0:	d1dc      	bne.n	cd6c <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    cdb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cdb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdba:	2003      	movs	r0, #3
    cdbc:	f7f8 fad0 	bl	5360 <bt_buf_get_rx>
    cdc0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    cdc2:	4601      	mov	r1, r0
    cdc4:	9801      	ldr	r0, [sp, #4]
    cdc6:	f000 ff11 	bl	dbec <hci_acl_encode>
	node_rx->hdr.next = NULL;
    cdca:	9b01      	ldr	r3, [sp, #4]
    cdcc:	2200      	movs	r2, #0
    cdce:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cdd0:	a801      	add	r0, sp, #4
    cdd2:	f002 f921 	bl	f018 <ll_rx_mem_release>
		if (buf) {
    cdd6:	2c00      	cmp	r4, #0
    cdd8:	d0da      	beq.n	cd90 <recv_thread+0x34>
			if (buf->len) {
    cdda:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    cddc:	4620      	mov	r0, r4
			if (buf->len) {
    cdde:	b1db      	cbz	r3, ce18 <recv_thread+0xbc>
				bt_recv(buf);
    cde0:	f7f9 fbdc 	bl	659c <bt_recv>
    cde4:	e7d4      	b.n	cd90 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    cde6:	2b02      	cmp	r3, #2
    cde8:	d019      	beq.n	ce1e <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cdea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cdee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cdf2:	2001      	movs	r0, #1
    cdf4:	f7f8 fab4 	bl	5360 <bt_buf_get_rx>
    cdf8:	4604      	mov	r4, r0
		if (buf) {
    cdfa:	9801      	ldr	r0, [sp, #4]
    cdfc:	b1cc      	cbz	r4, ce32 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
    cdfe:	4621      	mov	r1, r4
    ce00:	f000 ff2e 	bl	dc60 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    ce04:	9b01      	ldr	r3, [sp, #4]
    ce06:	2200      	movs	r2, #0
    ce08:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ce0a:	a801      	add	r0, sp, #4
    ce0c:	f002 f904 	bl	f018 <ll_rx_mem_release>
			if (buf->len) {
    ce10:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    ce12:	4620      	mov	r0, r4
			if (buf->len) {
    ce14:	2b00      	cmp	r3, #0
    ce16:	d1e3      	bne.n	cde0 <recv_thread+0x84>
				net_buf_unref(buf);
    ce18:	f00b fad8 	bl	183cc <net_buf_unref>
    ce1c:	e7b8      	b.n	cd90 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    ce1e:	2200      	movs	r2, #0
    ce20:	2300      	movs	r3, #0
    ce22:	2101      	movs	r1, #1
    ce24:	2000      	movs	r0, #0
    ce26:	f7f8 fad1 	bl	53cc <bt_buf_get_evt>
    ce2a:	4604      	mov	r4, r0
		if (buf) {
    ce2c:	9801      	ldr	r0, [sp, #4]
    ce2e:	2c00      	cmp	r4, #0
    ce30:	d1e5      	bne.n	cdfe <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
    ce32:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
    ce34:	a801      	add	r0, sp, #4
    ce36:	f002 f8ef 	bl	f018 <ll_rx_mem_release>
		if (buf) {
    ce3a:	e7a9      	b.n	cd90 <recv_thread+0x34>
    ce3c:	20000c28 	.word	0x20000c28
    ce40:	0002c610 	.word	0x0002c610
    ce44:	0002c650 	.word	0x0002c650
    ce48:	0002c5e0 	.word	0x0002c5e0

0000ce4c <prio_recv_thread>:
{
    ce4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    ce50:	f8df 80b4 	ldr.w	r8, [pc, #180]	; cf08 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    ce54:	4f2b      	ldr	r7, [pc, #172]	; (cf04 <prio_recv_thread+0xb8>)
{
    ce56:	b082      	sub	sp, #8
    ce58:	e00c      	b.n	ce74 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ce5a:	f7f8 fab7 	bl	53cc <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ce5e:	4622      	mov	r2, r4
    ce60:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ce64:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ce66:	f001 f97b 	bl	e160 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ce6a:	4620      	mov	r0, r4
    ce6c:	f7f9 fc3a 	bl	66e4 <bt_recv_prio>
	z_impl_k_yield();
    ce70:	f013 f892 	bl	1ff98 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    ce74:	f10d 0102 	add.w	r1, sp, #2
    ce78:	a801      	add	r0, sp, #4
    ce7a:	f001 ff15 	bl	eca8 <ll_rx_get>
    ce7e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ce80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce88:	2100      	movs	r1, #0
    ce8a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    ce8c:	2c00      	cmp	r4, #0
    ce8e:	d1e4      	bne.n	ce5a <prio_recv_thread+0xe>
		if (node_rx) {
    ce90:	9b01      	ldr	r3, [sp, #4]
    ce92:	b193      	cbz	r3, ceba <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    ce94:	f001 fff2 	bl	ee7c <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    ce98:	9e01      	ldr	r6, [sp, #4]
    ce9a:	4630      	mov	r0, r6
    ce9c:	f001 f978 	bl	e190 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    cea0:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cea2:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    cea4:	796b      	ldrb	r3, [r5, #5]
    cea6:	2b03      	cmp	r3, #3
    cea8:	d102      	bne.n	ceb0 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    ceaa:	792b      	ldrb	r3, [r5, #4]
    ceac:	2b14      	cmp	r3, #20
    ceae:	d00c      	beq.n	ceca <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    ceb0:	4629      	mov	r1, r5
    ceb2:	4638      	mov	r0, r7
    ceb4:	f01e f844 	bl	2af40 <k_queue_append>
			continue;
    ceb8:	e7dc      	b.n	ce74 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    ceba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cebe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cec2:	4640      	mov	r0, r8
    cec4:	f013 f904 	bl	200d0 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cec8:	e7d4      	b.n	ce74 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    ceca:	4621      	mov	r1, r4
    cecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ced0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ced4:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    ced6:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    ced8:	f7f8 fa78 	bl	53cc <bt_buf_get_evt>
    cedc:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    cede:	4622      	mov	r2, r4
    cee0:	f105 001c 	add.w	r0, r5, #28
    cee4:	4631      	mov	r1, r6
    cee6:	f000 fe69 	bl	dbbc <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    ceea:	4630      	mov	r0, r6
    ceec:	f000 fe76 	bl	dbdc <hci_disconn_complete_process>
				bt_recv_prio(buf);
    cef0:	4620      	mov	r0, r4
			if (buf) {
    cef2:	b124      	cbz	r4, cefe <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    cef4:	f7f9 fbf6 	bl	66e4 <bt_recv_prio>
					net_buf_unref(buf);
    cef8:	4620      	mov	r0, r4
    cefa:	f00b fa67 	bl	183cc <net_buf_unref>
    cefe:	9d01      	ldr	r5, [sp, #4]
    cf00:	e7d6      	b.n	ceb0 <prio_recv_thread+0x64>
    cf02:	bf00      	nop
    cf04:	20000c28 	.word	0x20000c28
    cf08:	20000bf8 	.word	0x20000bf8

0000cf0c <hci_driver_send>:
{
    cf0c:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    cf0e:	8983      	ldrh	r3, [r0, #12]
{
    cf10:	b083      	sub	sp, #12
	if (!buf->len) {
    cf12:	2b00      	cmp	r3, #0
    cf14:	d03a      	beq.n	cf8c <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cf16:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    cf18:	4604      	mov	r4, r0
    cf1a:	b31b      	cbz	r3, cf64 <hci_driver_send+0x58>
    cf1c:	2b02      	cmp	r3, #2
    cf1e:	d00f      	beq.n	cf40 <hci_driver_send+0x34>
    cf20:	4921      	ldr	r1, [pc, #132]	; (cfa8 <hci_driver_send+0x9c>)
    cf22:	4a22      	ldr	r2, [pc, #136]	; (cfac <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    cf24:	4822      	ldr	r0, [pc, #136]	; (cfb0 <hci_driver_send+0xa4>)
    cf26:	1a52      	subs	r2, r2, r1
    cf28:	08d2      	lsrs	r2, r2, #3
    cf2a:	0192      	lsls	r2, r2, #6
    cf2c:	4619      	mov	r1, r3
    cf2e:	f042 0201 	orr.w	r2, r2, #1
    cf32:	f016 fb5e 	bl	235f2 <log_1>
		return -EINVAL;
    cf36:	f06f 0515 	mvn.w	r5, #21
}
    cf3a:	4628      	mov	r0, r5
    cf3c:	b003      	add	sp, #12
    cf3e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    cf40:	a901      	add	r1, sp, #4
    cf42:	f000 fda3 	bl	da8c <hci_acl_handle>
	if (evt) {
    cf46:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    cf48:	4605      	mov	r5, r0
	if (evt) {
    cf4a:	b113      	cbz	r3, cf52 <hci_driver_send+0x46>
		bt_recv_prio(evt);
    cf4c:	4618      	mov	r0, r3
    cf4e:	f7f9 fbc9 	bl	66e4 <bt_recv_prio>
	if (!err) {
    cf52:	2d00      	cmp	r5, #0
    cf54:	d1f1      	bne.n	cf3a <hci_driver_send+0x2e>
		net_buf_unref(buf);
    cf56:	4620      	mov	r0, r4
    cf58:	f00b fa38 	bl	183cc <net_buf_unref>
    cf5c:	2500      	movs	r5, #0
}
    cf5e:	4628      	mov	r0, r5
    cf60:	b003      	add	sp, #12
    cf62:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cf64:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    cf66:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cf68:	f000 f9c0 	bl	d2ec <hci_cmd_handle>
	if (evt) {
    cf6c:	2800      	cmp	r0, #0
    cf6e:	d0f2      	beq.n	cf56 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    cf70:	f7f9 fbb8 	bl	66e4 <bt_recv_prio>
		if (node_rx) {
    cf74:	9d01      	ldr	r5, [sp, #4]
    cf76:	2d00      	cmp	r5, #0
    cf78:	d0ed      	beq.n	cf56 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cf7a:	4628      	mov	r0, r5
    cf7c:	f001 f908 	bl	e190 <hci_get_class>
    cf80:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    cf82:	9901      	ldr	r1, [sp, #4]
    cf84:	480b      	ldr	r0, [pc, #44]	; (cfb4 <hci_driver_send+0xa8>)
    cf86:	f01d ffdb 	bl	2af40 <k_queue_append>
	if (!err) {
    cf8a:	e7e4      	b.n	cf56 <hci_driver_send+0x4a>
    cf8c:	4b06      	ldr	r3, [pc, #24]	; (cfa8 <hci_driver_send+0x9c>)
    cf8e:	4907      	ldr	r1, [pc, #28]	; (cfac <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    cf90:	4809      	ldr	r0, [pc, #36]	; (cfb8 <hci_driver_send+0xac>)
    cf92:	1ac9      	subs	r1, r1, r3
    cf94:	08c9      	lsrs	r1, r1, #3
    cf96:	0189      	lsls	r1, r1, #6
    cf98:	f041 0101 	orr.w	r1, r1, #1
    cf9c:	f016 fb1c 	bl	235d8 <log_0>
		return -EINVAL;
    cfa0:	f06f 0515 	mvn.w	r5, #21
    cfa4:	e7c9      	b.n	cf3a <hci_driver_send+0x2e>
    cfa6:	bf00      	nop
    cfa8:	0002bf50 	.word	0x0002bf50
    cfac:	0002bfa0 	.word	0x0002bfa0
    cfb0:	0002c668 	.word	0x0002c668
    cfb4:	20000c28 	.word	0x20000c28
    cfb8:	0002c654 	.word	0x0002c654

0000cfbc <hci_driver_open>:
{
    cfbc:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    cfbe:	4822      	ldr	r0, [pc, #136]	; (d048 <hci_driver_open+0x8c>)
{
    cfc0:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    cfc2:	f001 fb9f 	bl	e704 <ll_init>
	if (err) {
    cfc6:	4604      	mov	r4, r0
    cfc8:	2800      	cmp	r0, #0
    cfca:	d12e      	bne.n	d02a <hci_driver_open+0x6e>
	hci_init(NULL);
    cfcc:	f001 f8f6 	bl	e1bc <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    cfd0:	2600      	movs	r6, #0
    cfd2:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cfd4:	f06f 0309 	mvn.w	r3, #9
    cfd8:	9303      	str	r3, [sp, #12]
    cfda:	e9cd 6706 	strd	r6, r7, [sp, #24]
    cfde:	e9cd 4401 	strd	r4, r4, [sp, #4]
    cfe2:	4b1a      	ldr	r3, [pc, #104]	; (d04c <hci_driver_open+0x90>)
    cfe4:	491a      	ldr	r1, [pc, #104]	; (d050 <hci_driver_open+0x94>)
    cfe6:	9404      	str	r4, [sp, #16]
    cfe8:	9400      	str	r4, [sp, #0]
    cfea:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    cfee:	4819      	ldr	r0, [pc, #100]	; (d054 <hci_driver_open+0x98>)
    cff0:	f013 f8e0 	bl	201b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    cff4:	4918      	ldr	r1, [pc, #96]	; (d058 <hci_driver_open+0x9c>)
    cff6:	4817      	ldr	r0, [pc, #92]	; (d054 <hci_driver_open+0x98>)
    cff8:	f01e f908 	bl	2b20c <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cffc:	f06f 0307 	mvn.w	r3, #7
    d000:	9303      	str	r3, [sp, #12]
    d002:	e9cd 6706 	strd	r6, r7, [sp, #24]
    d006:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d00a:	4b14      	ldr	r3, [pc, #80]	; (d05c <hci_driver_open+0xa0>)
    d00c:	4914      	ldr	r1, [pc, #80]	; (d060 <hci_driver_open+0xa4>)
    d00e:	9404      	str	r4, [sp, #16]
    d010:	9400      	str	r4, [sp, #0]
    d012:	f640 0298 	movw	r2, #2200	; 0x898
    d016:	4813      	ldr	r0, [pc, #76]	; (d064 <hci_driver_open+0xa8>)
    d018:	f013 f8cc 	bl	201b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    d01c:	4912      	ldr	r1, [pc, #72]	; (d068 <hci_driver_open+0xac>)
    d01e:	4811      	ldr	r0, [pc, #68]	; (d064 <hci_driver_open+0xa8>)
    d020:	f01e f8f4 	bl	2b20c <z_impl_k_thread_name_set>
}
    d024:	4620      	mov	r0, r4
    d026:	b008      	add	sp, #32
    d028:	bdd0      	pop	{r4, r6, r7, pc}
    d02a:	4b10      	ldr	r3, [pc, #64]	; (d06c <hci_driver_open+0xb0>)
    d02c:	4a10      	ldr	r2, [pc, #64]	; (d070 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
    d02e:	4811      	ldr	r0, [pc, #68]	; (d074 <hci_driver_open+0xb8>)
    d030:	1ad2      	subs	r2, r2, r3
    d032:	08d2      	lsrs	r2, r2, #3
    d034:	0192      	lsls	r2, r2, #6
    d036:	f042 0201 	orr.w	r2, r2, #1
    d03a:	4621      	mov	r1, r4
    d03c:	f016 fad9 	bl	235f2 <log_1>
}
    d040:	4620      	mov	r0, r4
    d042:	b008      	add	sp, #32
    d044:	bdd0      	pop	{r4, r6, r7, pc}
    d046:	bf00      	nop
    d048:	20000bf8 	.word	0x20000bf8
    d04c:	0000ce4d 	.word	0x0000ce4d
    d050:	20008e00 	.word	0x20008e00
    d054:	200011d8 	.word	0x200011d8
    d058:	0002c69c 	.word	0x0002c69c
    d05c:	0000cd5d 	.word	0x0000cd5d
    d060:	20008fc0 	.word	0x20008fc0
    d064:	20001260 	.word	0x20001260
    d068:	0002c6a8 	.word	0x0002c6a8
    d06c:	0002bf50 	.word	0x0002bf50
    d070:	0002bfa0 	.word	0x0002bfa0
    d074:	0002c67c 	.word	0x0002c67c

0000d078 <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    d078:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d07a:	4b07      	ldr	r3, [pc, #28]	; (d098 <cmd_complete_status+0x20>)
{
    d07c:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d07e:	2101      	movs	r1, #1
    d080:	8818      	ldrh	r0, [r3, #0]
    d082:	f017 fcde 	bl	24a42 <bt_hci_cmd_complete_create>
    d086:	2101      	movs	r1, #1
    d088:	4604      	mov	r4, r0
    d08a:	3008      	adds	r0, #8
    d08c:	f018 fedc 	bl	25e48 <net_buf_simple_add>
    d090:	4603      	mov	r3, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
	ccst->status = status;

	return buf;
}
    d092:	4620      	mov	r0, r4
	ccst->status = status;
    d094:	701d      	strb	r5, [r3, #0]
}
    d096:	bd38      	pop	{r3, r4, r5, pc}
    d098:	200080cc 	.word	0x200080cc

0000d09c <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    d09c:	b570      	push	{r4, r5, r6, lr}
    d09e:	f100 0408 	add.w	r4, r0, #8
    d0a2:	460e      	mov	r6, r1
    d0a4:	4620      	mov	r0, r4
    d0a6:	2102      	movs	r1, #2
    d0a8:	4615      	mov	r5, r2
    d0aa:	f018 fecd 	bl	25e48 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d0ae:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    d0b0:	223e      	movs	r2, #62	; 0x3e
    d0b2:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    d0b4:	7043      	strb	r3, [r0, #1]
    d0b6:	2101      	movs	r1, #1
    d0b8:	4620      	mov	r0, r4
    d0ba:	f018 fec5 	bl	25e48 <net_buf_simple_add>
	me = net_buf_add(buf, sizeof(*me));
	me->subevent = subevt;
    d0be:	7006      	strb	r6, [r0, #0]
    d0c0:	4629      	mov	r1, r5
    d0c2:	4620      	mov	r0, r4

	return net_buf_add(buf, melen);
}
    d0c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d0c8:	f018 bebe 	b.w	25e48 <net_buf_simple_add>

0000d0cc <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    d0cc:	b570      	push	{r4, r5, r6, lr}
    d0ce:	f102 0508 	add.w	r5, r2, #8
    d0d2:	4604      	mov	r4, r0
    d0d4:	460e      	mov	r6, r1
    d0d6:	4628      	mov	r0, r5
    d0d8:	2102      	movs	r1, #2
    d0da:	f018 feb5 	bl	25e48 <net_buf_simple_add>
    d0de:	4603      	mov	r3, r0
	hdr->evt = evt;
    d0e0:	2208      	movs	r2, #8
	hdr->len = len;
    d0e2:	2104      	movs	r1, #4
	hdr->evt = evt;
    d0e4:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    d0e6:	7059      	strb	r1, [r3, #1]
    d0e8:	4628      	mov	r0, r5
    d0ea:	f018 fead 	bl	25e48 <net_buf_simple_add>
	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    d0ee:	fab4 f384 	clz	r3, r4
    d0f2:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    d0f4:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    d0f6:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    d0f8:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    d0fc:	bd70      	pop	{r4, r5, r6, pc}
    d0fe:	bf00      	nop

0000d100 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d104:	4c17      	ldr	r4, [pc, #92]	; (d164 <le_remote_feat_complete+0x64>)
    d106:	6866      	ldr	r6, [r4, #4]
    d108:	f04f 0900 	mov.w	r9, #0
    d10c:	464c      	mov	r4, r9
    d10e:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    d112:	4690      	mov	r8, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d114:	ea54 0205 	orrs.w	r2, r4, r5
    d118:	d009      	beq.n	d12e <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    d11a:	4a13      	ldr	r2, [pc, #76]	; (d168 <le_remote_feat_complete+0x68>)
    d11c:	6812      	ldr	r2, [r2, #0]
    d11e:	4607      	mov	r7, r0
    d120:	460e      	mov	r6, r1
    d122:	f002 0008 	and.w	r0, r2, #8
    d126:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d128:	ea50 0201 	orrs.w	r2, r0, r1
    d12c:	d101      	bne.n	d132 <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    d132:	4618      	mov	r0, r3
    d134:	220b      	movs	r2, #11
    d136:	2104      	movs	r1, #4
    d138:	f7ff ffb0 	bl	d09c <meta_evt>
	sep->status = status;
    d13c:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d13e:	f8a0 8001 	strh.w	r8, [r0, #1]
	if (!status) {
    d142:	b947      	cbnz	r7, d156 <le_remote_feat_complete+0x56>
    d144:	f856 3f04 	ldr.w	r3, [r6, #4]!
    d148:	6872      	ldr	r2, [r6, #4]
    d14a:	f8c0 2007 	str.w	r2, [r0, #7]
    d14e:	f8c0 3003 	str.w	r3, [r0, #3]
}
    d152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
__ssp_bos_icheck3(memset, void *, int)
    d156:	f8c0 9003 	str.w	r9, [r0, #3]
    d15a:	f8c0 9007 	str.w	r9, [r0, #7]
    d15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d162:	bf00      	nop
    d164:	20000160 	.word	0x20000160
    d168:	20000168 	.word	0x20000168

0000d16c <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    d16c:	b570      	push	{r4, r5, r6, lr}
    d16e:	f102 0408 	add.w	r4, r2, #8
    d172:	4605      	mov	r5, r0
    d174:	460e      	mov	r6, r1
    d176:	4620      	mov	r0, r4
    d178:	2102      	movs	r1, #2
    d17a:	f018 fe65 	bl	25e48 <net_buf_simple_add>
    d17e:	4603      	mov	r3, r0
	hdr->evt = evt;
    d180:	2205      	movs	r2, #5
	hdr->len = len;
    d182:	2104      	movs	r1, #4
	hdr->evt = evt;
    d184:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    d186:	7059      	strb	r1, [r3, #1]
    d188:	4620      	mov	r0, r4
    d18a:	f018 fe5d 	bl	25e48 <net_buf_simple_add>
	ep->status = 0x00;
    d18e:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    d190:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    d194:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    d196:	782b      	ldrb	r3, [r5, #0]
    d198:	70c3      	strb	r3, [r0, #3]
}
    d19a:	bd70      	pop	{r4, r5, r6, pc}

0000d19c <hci_cmd_complete>:
{
    d19c:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d19e:	4b06      	ldr	r3, [pc, #24]	; (d1b8 <hci_cmd_complete+0x1c>)
{
    d1a0:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d1a2:	8818      	ldrh	r0, [r3, #0]
{
    d1a4:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d1a6:	f017 fc4c 	bl	24a42 <bt_hci_cmd_complete_create>
    d1aa:	4621      	mov	r1, r4
    d1ac:	6028      	str	r0, [r5, #0]
}
    d1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d1b2:	3008      	adds	r0, #8
    d1b4:	f018 be48 	b.w	25e48 <net_buf_simple_add>
    d1b8:	200080cc 	.word	0x200080cc

0000d1bc <hci_vendor_cmd_handle_common>:
{
    d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1be:	1e43      	subs	r3, r0, #1
    d1c0:	b087      	sub	sp, #28
    d1c2:	4614      	mov	r4, r2
    d1c4:	2b09      	cmp	r3, #9
    d1c6:	d806      	bhi.n	d1d6 <hci_vendor_cmd_handle_common+0x1a>
    d1c8:	e8df f003 	tbb	[pc, r3]
    d1cc:	0535220a 	.word	0x0535220a
    d1d0:	50054405 	.word	0x50054405
    d1d4:	7f70      	.short	0x7f70
	return 0;
    d1d6:	f06f 0415 	mvn.w	r4, #21
}
    d1da:	4620      	mov	r0, r4
    d1dc:	b007      	add	sp, #28
    d1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d1e0:	4620      	mov	r0, r4
    d1e2:	210d      	movs	r1, #13
    d1e4:	f7ff ffda 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d1e8:	2100      	movs	r1, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d1ea:	2302      	movs	r3, #2
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d1ec:	2205      	movs	r2, #5
	return 0;
    d1ee:	460c      	mov	r4, r1
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d1f0:	71c2      	strb	r2, [r0, #7]
	rp->status = 0x00;
    d1f2:	7001      	strb	r1, [r0, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d1f4:	7081      	strb	r1, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    d1f6:	7101      	strb	r1, [r0, #4]
	rp->fw_variant = 0U;
    d1f8:	7141      	strb	r1, [r0, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d1fa:	7201      	strb	r1, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    d1fc:	7241      	strb	r1, [r0, #9]
    d1fe:	7281      	strb	r1, [r0, #10]
    d200:	72c1      	strb	r1, [r0, #11]
    d202:	7301      	strb	r1, [r0, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d204:	7043      	strb	r3, [r0, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    d206:	70c3      	strb	r3, [r0, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d208:	7183      	strb	r3, [r0, #6]
}
    d20a:	4620      	mov	r0, r4
    d20c:	b007      	add	sp, #28
    d20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d210:	4620      	mov	r0, r4
    d212:	2141      	movs	r1, #65	; 0x41
    d214:	f7ff ffc2 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d218:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d21a:	4605      	mov	r5, r0
    d21c:	4621      	mov	r1, r4
	rp->status = 0x00;
    d21e:	f800 4b01 	strb.w	r4, [r0], #1
    d222:	2240      	movs	r2, #64	; 0x40
    d224:	f01e faba 	bl	2b79c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    d228:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
    d22a:	2303      	movs	r3, #3
}
    d22c:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    d22e:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d230:	70ab      	strb	r3, [r5, #2]
}
    d232:	b007      	add	sp, #28
    d234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d236:	4620      	mov	r0, r4
    d238:	2109      	movs	r1, #9
    d23a:	f7ff ffaf 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d23e:	4602      	mov	r2, r0
    d240:	2300      	movs	r3, #0
    d242:	f802 3b01 	strb.w	r3, [r2], #1
	return 0;
    d246:	461c      	mov	r4, r3
    d248:	f8c0 3001 	str.w	r3, [r0, #1]
}
    d24c:	4620      	mov	r0, r4
    d24e:	6053      	str	r3, [r2, #4]
    d250:	b007      	add	sp, #28
    d252:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d254:	6889      	ldr	r1, [r1, #8]
    d256:	2000      	movs	r0, #0
    d258:	f7ff fd46 	bl	cce8 <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    d25c:	2000      	movs	r0, #0
    d25e:	f7ff ff0b 	bl	d078 <cmd_complete_status>
    d262:	6020      	str	r0, [r4, #0]
    d264:	2400      	movs	r4, #0
}
    d266:	4620      	mov	r0, r4
    d268:	b007      	add	sp, #28
    d26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    d26c:	4e1e      	ldr	r6, [pc, #120]	; (d2e8 <hci_vendor_cmd_handle_common+0x12c>)
    d26e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d270:	466d      	mov	r5, sp
    d272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    d274:	e896 0003 	ldmia.w	r6, {r0, r1}
    d278:	f845 0b04 	str.w	r0, [r5], #4
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d27c:	4620      	mov	r0, r4
	const char build_info[] = HCI_VS_BUILD_INFO;
    d27e:	7029      	strb	r1, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d280:	2116      	movs	r1, #22
    d282:	f7ff ff8b 	bl	d19c <hci_cmd_complete>
    d286:	466d      	mov	r5, sp
    d288:	4607      	mov	r7, r0
    d28a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
	rp->status = 0x00;
    d28c:	463e      	mov	r6, r7
    d28e:	2400      	movs	r4, #0
    d290:	f806 4b01 	strb.w	r4, [r6], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d294:	f8c7 0001 	str.w	r0, [r7, #1]
    d298:	6828      	ldr	r0, [r5, #0]
    d29a:	792f      	ldrb	r7, [r5, #4]
    d29c:	6130      	str	r0, [r6, #16]
}
    d29e:	4620      	mov	r0, r4
    d2a0:	6071      	str	r1, [r6, #4]
    d2a2:	60b2      	str	r2, [r6, #8]
    d2a4:	60f3      	str	r3, [r6, #12]
    d2a6:	7537      	strb	r7, [r6, #20]
    d2a8:	b007      	add	sp, #28
    d2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    d2ac:	4620      	mov	r0, r4
    d2ae:	2118      	movs	r1, #24
    d2b0:	f7ff ff74 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d2b4:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    d2b6:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d2b8:	2101      	movs	r1, #1
	rp->status = 0x00;
    d2ba:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d2be:	f00a ff0b 	bl	180d8 <hci_vendor_read_static_addr>
    d2c2:	7068      	strb	r0, [r5, #1]
}
    d2c4:	4620      	mov	r0, r4
    d2c6:	b007      	add	sp, #28
    d2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d2ca:	4620      	mov	r0, r4
    d2cc:	2121      	movs	r1, #33	; 0x21
    d2ce:	f7ff ff65 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d2d2:	4601      	mov	r1, r0
    d2d4:	2400      	movs	r4, #0
    d2d6:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    d2da:	3001      	adds	r0, #1
    d2dc:	f00a ff72 	bl	181c4 <hci_vendor_read_key_hierarchy_roots>
}
    d2e0:	4620      	mov	r0, r4
    d2e2:	b007      	add	sp, #28
    d2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2e6:	bf00      	nop
    d2e8:	0002c6e4 	.word	0x0002c6e4

0000d2ec <hci_cmd_handle>:
{
    d2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d2ee:	8983      	ldrh	r3, [r0, #12]
{
    d2f0:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    d2f2:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
    d2f4:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    d2f6:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d2f8:	f240 80b6 	bls.w	d468 <hci_cmd_handle+0x17c>
	return net_buf_simple_pull_mem(&buf->b, len);
    d2fc:	4604      	mov	r4, r0
    d2fe:	2103      	movs	r1, #3
    d300:	3008      	adds	r0, #8
    d302:	f018 fdd3 	bl	25eac <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    d306:	89a2      	ldrh	r2, [r4, #12]
    d308:	7883      	ldrb	r3, [r0, #2]
    d30a:	429a      	cmp	r2, r3
    d30c:	f0c0 80d3 	bcc.w	d4b6 <hci_cmd_handle+0x1ca>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d310:	8801      	ldrh	r1, [r0, #0]
    d312:	4da4      	ldr	r5, [pc, #656]	; (d5a4 <hci_cmd_handle+0x2b8>)
	switch (BT_OGF(_opcode)) {
    d314:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d318:	b288      	uxth	r0, r1
    d31a:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
    d31c:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
    d320:	ea4f 2291 	mov.w	r2, r1, lsr #10
    d324:	d267      	bcs.n	d3f6 <hci_cmd_handle+0x10a>
    d326:	2a00      	cmp	r2, #0
    d328:	d06f      	beq.n	d40a <hci_cmd_handle+0x11e>
    d32a:	3a01      	subs	r2, #1
    d32c:	2a07      	cmp	r2, #7
    d32e:	d86c      	bhi.n	d40a <hci_cmd_handle+0x11e>
    d330:	e8df f002 	tbb	[pc, r2]
    d334:	57706b8c 	.word	0x57706b8c
    d338:	046b6b6b 	.word	0x046b6b6b
	switch (ocf) {
    d33c:	3b01      	subs	r3, #1
    d33e:	2b4d      	cmp	r3, #77	; 0x4d
    d340:	d863      	bhi.n	d40a <hci_cmd_handle+0x11e>
    d342:	e8df f013 	tbh	[pc, r3, lsl #1]
    d346:	01df      	.short	0x01df
    d348:	01bf01d2 	.word	0x01bf01d2
    d34c:	01b80062 	.word	0x01b80062
    d350:	013b01a8 	.word	0x013b01a8
    d354:	01a00126 	.word	0x01a00126
    d358:	00620199 	.word	0x00620199
    d35c:	00620062 	.word	0x00620062
    d360:	018d0062 	.word	0x018d0062
    d364:	01820188 	.word	0x01820188
    d368:	0151017c 	.word	0x0151017c
    d36c:	016c0062 	.word	0x016c0062
    d370:	033b0163 	.word	0x033b0163
    d374:	0062032f 	.word	0x0062032f
    d378:	03210329 	.word	0x03210329
    d37c:	0062030b 	.word	0x0062030b
    d380:	00620062 	.word	0x00620062
    d384:	02f002fc 	.word	0x02f002fc
    d388:	02d202e8 	.word	0x02d202e8
    d38c:	006202c9 	.word	0x006202c9
    d390:	02c00062 	.word	0x02c00062
    d394:	02b502ba 	.word	0x02b502ba
    d398:	029402a9 	.word	0x029402a9
    d39c:	0278027f 	.word	0x0278027f
    d3a0:	024f0270 	.word	0x024f0270
    d3a4:	02160227 	.word	0x02160227
    d3a8:	006201e9 	.word	0x006201e9
    d3ac:	00620062 	.word	0x00620062
    d3b0:	00620062 	.word	0x00620062
    d3b4:	00620062 	.word	0x00620062
    d3b8:	00620062 	.word	0x00620062
    d3bc:	00620062 	.word	0x00620062
    d3c0:	00620062 	.word	0x00620062
    d3c4:	00620062 	.word	0x00620062
    d3c8:	00620062 	.word	0x00620062
    d3cc:	00620062 	.word	0x00620062
    d3d0:	00620062 	.word	0x00620062
    d3d4:	00620062 	.word	0x00620062
    d3d8:	01440062 	.word	0x01440062
    d3dc:	00620062 	.word	0x00620062
    d3e0:	011f      	.short	0x011f
	switch (ocf) {
    d3e2:	3b01      	subs	r3, #1
    d3e4:	2b08      	cmp	r3, #8
    d3e6:	d810      	bhi.n	d40a <hci_cmd_handle+0x11e>
    d3e8:	e8df f003 	tbb	[pc, r3]
    d3ec:	0f7585b5 	.word	0x0f7585b5
    d3f0:	0f0f0f0f 	.word	0x0f0f0f0f
    d3f4:	69          	.byte	0x69
    d3f5:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
    d3f6:	2a3f      	cmp	r2, #63	; 0x3f
    d3f8:	d107      	bne.n	d40a <hci_cmd_handle+0x11e>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    d3fa:	4621      	mov	r1, r4
    d3fc:	4618      	mov	r0, r3
    d3fe:	aa07      	add	r2, sp, #28
    d400:	f7ff fedc 	bl	d1bc <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    d404:	3016      	adds	r0, #22
    d406:	d154      	bne.n	d4b2 <hci_cmd_handle+0x1c6>
    d408:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    d40a:	2101      	movs	r1, #1
    d40c:	f017 fb2b 	bl	24a66 <bt_hci_cmd_status_create>
}
    d410:	b00d      	add	sp, #52	; 0x34
    d412:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d414:	2b63      	cmp	r3, #99	; 0x63
    d416:	f000 8325 	beq.w	da64 <hci_cmd_handle+0x778>
    d41a:	d837      	bhi.n	d48c <hci_cmd_handle+0x1a0>
    d41c:	2b03      	cmp	r3, #3
    d41e:	f000 8307 	beq.w	da30 <hci_cmd_handle+0x744>
    d422:	2b2d      	cmp	r3, #45	; 0x2d
    d424:	d12d      	bne.n	d482 <hci_cmd_handle+0x196>
		read_tx_power_level(cmd, evt);
    d426:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d428:	2104      	movs	r1, #4
    d42a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d42c:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    d42e:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d430:	f7ff feb4 	bl	d19c <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d434:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d436:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    d438:	1cc3      	adds	r3, r0, #3
    d43a:	4632      	mov	r2, r6
    d43c:	2002      	movs	r0, #2
    d43e:	f7ff fc71 	bl	cd24 <ll_tx_pwr_lvl_get>
	rp->status = status;
    d442:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d444:	9807      	ldr	r0, [sp, #28]
    d446:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    d44a:	e7e1      	b.n	d410 <hci_cmd_handle+0x124>
	switch (ocf) {
    d44c:	2b06      	cmp	r3, #6
    d44e:	f000 82ce 	beq.w	d9ee <hci_cmd_handle+0x702>
    d452:	2b1d      	cmp	r3, #29
    d454:	d1d9      	bne.n	d40a <hci_cmd_handle+0x11e>
	handle = sys_le16_to_cpu(cmd->handle);
    d456:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    d458:	8818      	ldrh	r0, [r3, #0]
    d45a:	f003 fc1b 	bl	10c94 <ll_version_ind_send>
    d45e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d460:	8828      	ldrh	r0, [r5, #0]
    d462:	f017 fb00 	bl	24a66 <bt_hci_cmd_status_create>
}
    d466:	e7d3      	b.n	d410 <hci_cmd_handle+0x124>
    d468:	494f      	ldr	r1, [pc, #316]	; (d5a8 <hci_cmd_handle+0x2bc>)
    d46a:	4b50      	ldr	r3, [pc, #320]	; (d5ac <hci_cmd_handle+0x2c0>)
		BT_ERR("No HCI Command header");
    d46c:	4850      	ldr	r0, [pc, #320]	; (d5b0 <hci_cmd_handle+0x2c4>)
    d46e:	1ac9      	subs	r1, r1, r3
    d470:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
    d472:	0189      	lsls	r1, r1, #6
    d474:	f041 0101 	orr.w	r1, r1, #1
    d478:	f016 f8ae 	bl	235d8 <log_0>
		return NULL;
    d47c:	4628      	mov	r0, r5
}
    d47e:	b00d      	add	sp, #52	; 0x34
    d480:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d482:	2b01      	cmp	r3, #1
    d484:	d1c1      	bne.n	d40a <hci_cmd_handle+0x11e>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d486:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    d488:	4b4a      	ldr	r3, [pc, #296]	; (d5b4 <hci_cmd_handle+0x2c8>)
    d48a:	e13d      	b.n	d708 <hci_cmd_handle+0x41c>
	switch (ocf) {
    d48c:	2b7b      	cmp	r3, #123	; 0x7b
    d48e:	f000 82bb 	beq.w	da08 <hci_cmd_handle+0x71c>
    d492:	2b7c      	cmp	r3, #124	; 0x7c
    d494:	d1b9      	bne.n	d40a <hci_cmd_handle+0x11e>
		write_auth_payload_timeout(cmd, evt);
    d496:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d498:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d49a:	8859      	ldrh	r1, [r3, #2]
    d49c:	4628      	mov	r0, r5
    d49e:	f003 fd2d 	bl	10efc <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d4a2:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4a4:	2103      	movs	r1, #3
    d4a6:	a807      	add	r0, sp, #28
    d4a8:	f7ff fe78 	bl	d19c <hci_cmd_complete>
	rp->status = status;
    d4ac:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d4ae:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    d4b2:	9807      	ldr	r0, [sp, #28]
    d4b4:	e7ac      	b.n	d410 <hci_cmd_handle+0x124>
    d4b6:	493c      	ldr	r1, [pc, #240]	; (d5a8 <hci_cmd_handle+0x2bc>)
    d4b8:	4b3c      	ldr	r3, [pc, #240]	; (d5ac <hci_cmd_handle+0x2c0>)
		BT_ERR("Invalid HCI CMD packet length");
    d4ba:	483f      	ldr	r0, [pc, #252]	; (d5b8 <hci_cmd_handle+0x2cc>)
    d4bc:	e7d7      	b.n	d46e <hci_cmd_handle+0x182>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4be:	2107      	movs	r1, #7
    d4c0:	a807      	add	r0, sp, #28
    d4c2:	f7ff fe6b 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d4c6:	4601      	mov	r1, r0
    d4c8:	2000      	movs	r0, #0
    d4ca:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d4ce:	f7ff fbed 	bl	ccac <ll_addr_get>
	if (err == -EINVAL) {
    d4d2:	9807      	ldr	r0, [sp, #28]
    d4d4:	e79c      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4d6:	2109      	movs	r1, #9
    d4d8:	a807      	add	r0, sp, #28
    d4da:	f7ff fe5f 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d4de:	4602      	mov	r2, r0
    d4e0:	2100      	movs	r1, #0
    d4e2:	f802 1b01 	strb.w	r1, [r2], #1
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4e6:	4603      	mov	r3, r0
__ssp_bos_icheck3(memset, void *, int)
    d4e8:	f8c0 1001 	str.w	r1, [r0, #1]
	rp->features[4] = (1 << 5) | (1 << 6);
    d4ec:	2460      	movs	r4, #96	; 0x60
    d4ee:	6051      	str	r1, [r2, #4]
    d4f0:	9807      	ldr	r0, [sp, #28]
    d4f2:	715c      	strb	r4, [r3, #5]
	if (err == -EINVAL) {
    d4f4:	e78c      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4f6:	2141      	movs	r1, #65	; 0x41
    d4f8:	a807      	add	r0, sp, #28
    d4fa:	f7ff fe4f 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d4fe:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d500:	4604      	mov	r4, r0
    d502:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d504:	f800 1b01 	strb.w	r1, [r0], #1
    d508:	f01e f948 	bl	2b79c <memset>
	rp->commands[0] |= BIT(5);
    d50c:	2320      	movs	r3, #32
    d50e:	7063      	strb	r3, [r4, #1]
	rp->commands[14] |= BIT(3) | BIT(5);
    d510:	2228      	movs	r2, #40	; 0x28
	rp->commands[5] |= BIT(6) | BIT(7);
    d512:	23c0      	movs	r3, #192	; 0xc0
	rp->commands[15] |= BIT(1);
    d514:	2502      	movs	r5, #2
	rp->commands[26] |= BIT(0) | BIT(1);
    d516:	20c3      	movs	r0, #195	; 0xc3
	rp->commands[28] |= BIT(1) | BIT(2);
    d518:	210e      	movs	r1, #14
	rp->commands[5] |= BIT(6) | BIT(7);
    d51a:	71a3      	strb	r3, [r4, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
    d51c:	73e2      	strb	r2, [r4, #15]
	rp->commands[32] |= BIT(4) | BIT(5);
    d51e:	2330      	movs	r3, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    d520:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[15] |= BIT(1);
    d522:	7425      	strb	r5, [r4, #16]
	rp->commands[26] |= BIT(0) | BIT(1);
    d524:	76e0      	strb	r0, [r4, #27]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d526:	25f9      	movs	r5, #249	; 0xf9
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d528:	207f      	movs	r0, #127	; 0x7f
	rp->commands[28] |= BIT(1) | BIT(2);
    d52a:	7761      	strb	r1, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    d52c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[38] |= BIT(7);
    d530:	2180      	movs	r1, #128	; 0x80
	rp->commands[10] |= BIT(2);
    d532:	2304      	movs	r3, #4
	rp->commands[33] |= BIT(6) | BIT(7);
    d534:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d538:	22f7      	movs	r2, #247	; 0xf7
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d53a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d53e:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
    d542:	9807      	ldr	r0, [sp, #28]
	rp->commands[38] |= BIT(7);
    d544:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
	rp->commands[10] |= BIT(2);
    d548:	72e3      	strb	r3, [r4, #11]
	rp->commands[22] |= BIT(2);
    d54a:	75e3      	strb	r3, [r4, #23]
	rp->commands[39] |= BIT(2);
    d54c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d550:	76a2      	strb	r2, [r4, #26]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d552:	7722      	strb	r2, [r4, #28]
	if (err == -EINVAL) {
    d554:	e75c      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d556:	2109      	movs	r1, #9
    d558:	a807      	add	r0, sp, #28
    d55a:	f7ff fe1f 	bl	d19c <hci_cmd_complete>
    d55e:	4603      	mov	r3, r0
	rp->status = 0x00;
    d560:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    d562:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d568:	f06f 050e 	mvn.w	r5, #14
    d56c:	2405      	movs	r4, #5
	rp->status = 0x00;
    d56e:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    d570:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    d572:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d574:	715d      	strb	r5, [r3, #5]
    d576:	9807      	ldr	r0, [sp, #28]
    d578:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    d57a:	709a      	strb	r2, [r3, #2]
    d57c:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d57e:	71d9      	strb	r1, [r3, #7]
    d580:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    d582:	e745      	b.n	d410 <hci_cmd_handle+0x124>
		le_set_privacy_mode(cmd, evt);
    d584:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d586:	79c1      	ldrb	r1, [r0, #7]
    d588:	f007 ff84 	bl	15494 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    d58c:	f7ff fd74 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d590:	e73e      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    d592:	68a1      	ldr	r1, [r4, #8]
    d594:	f811 0b01 	ldrb.w	r0, [r1], #1
    d598:	f002 fc96 	bl	fec8 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    d59c:	f7ff fd6c 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d5a0:	e736      	b.n	d410 <hci_cmd_handle+0x124>
    d5a2:	bf00      	nop
    d5a4:	200080cc 	.word	0x200080cc
    d5a8:	0002bf98 	.word	0x0002bf98
    d5ac:	0002bf50 	.word	0x0002bf50
    d5b0:	0002c6fc 	.word	0x0002c6fc
    d5b4:	20000160 	.word	0x20000160
    d5b8:	0002c714 	.word	0x0002c714
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5bc:	2102      	movs	r1, #2
    d5be:	a807      	add	r0, sp, #28
    d5c0:	f7ff fdec 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d5c4:	2300      	movs	r3, #0
    d5c6:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d5c8:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    d5ca:	9807      	ldr	r0, [sp, #28]
    d5cc:	e720      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5ce:	2103      	movs	r1, #3
    d5d0:	a807      	add	r0, sp, #28
    d5d2:	f7ff fde3 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d5d6:	4601      	mov	r1, r0
    d5d8:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d5da:	3001      	adds	r0, #1
	rp->status = 0x00;
    d5dc:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d5e0:	f7ff fbb0 	bl	cd44 <ll_tx_pwr_get>
	if (err == -EINVAL) {
    d5e4:	9807      	ldr	r0, [sp, #28]
    d5e6:	e713      	b.n	d410 <hci_cmd_handle+0x124>
		le_conn_update(cmd, evt);
    d5e8:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    d5ea:	8911      	ldrh	r1, [r2, #8]
    d5ec:	8853      	ldrh	r3, [r2, #2]
    d5ee:	8810      	ldrh	r0, [r2, #0]
    d5f0:	9102      	str	r1, [sp, #8]
    d5f2:	88d1      	ldrh	r1, [r2, #6]
    d5f4:	9101      	str	r1, [sp, #4]
    d5f6:	8892      	ldrh	r2, [r2, #4]
    d5f8:	9200      	str	r2, [sp, #0]
    d5fa:	2200      	movs	r2, #0
    d5fc:	4611      	mov	r1, r2
    d5fe:	f003 fa2f 	bl	10a60 <ll_conn_update>
    d602:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d604:	8828      	ldrh	r0, [r5, #0]
    d606:	f017 fa2e 	bl	24a66 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d60a:	e701      	b.n	d410 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d60c:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    d60e:	8818      	ldrh	r0, [r3, #0]
    d610:	f003 fb1a 	bl	10c48 <ll_feature_req_send>
    d614:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d616:	8828      	ldrh	r0, [r5, #0]
    d618:	f017 fa25 	bl	24a66 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d61c:	e6f8      	b.n	d410 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d61e:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d620:	2108      	movs	r1, #8
    d622:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d624:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d626:	f7ff fdb9 	bl	d19c <hci_cmd_complete>
    d62a:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d62c:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    d62e:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    d630:	f003 faa8 	bl	10b84 <ll_chm_get>
	rp->status = status;
    d634:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d636:	9807      	ldr	r0, [sp, #28]
    d638:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    d63c:	e6e8      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_wl_remove(&cmd->addr);
    d63e:	68a0      	ldr	r0, [r4, #8]
    d640:	f007 fa72 	bl	14b28 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    d644:	f7ff fd18 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d648:	e6e2      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_wl_add(&cmd->addr);
    d64a:	68a0      	ldr	r0, [r4, #8]
    d64c:	f007 fd18 	bl	15080 <ll_wl_add>
	*evt = cmd_complete_status(status);
    d650:	f7ff fd12 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d654:	e6dc      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_wl_clear();
    d656:	f007 fa3d 	bl	14ad4 <ll_wl_clear>
	*evt = cmd_complete_status(status);
    d65a:	f7ff fd0d 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d65e:	e6d7      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d660:	2102      	movs	r1, #2
    d662:	a807      	add	r0, sp, #28
    d664:	f7ff fd9a 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d668:	2300      	movs	r3, #0
    d66a:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d66c:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    d66e:	f007 fa2f 	bl	14ad0 <ll_wl_size_get>
    d672:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    d674:	9807      	ldr	r0, [sp, #28]
    d676:	e6cb      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_adv_enable(cmd->enable);
    d678:	68a3      	ldr	r3, [r4, #8]
    d67a:	7818      	ldrb	r0, [r3, #0]
    d67c:	f7f2 ff58 	bl	530 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    d680:	f7ff fcfa 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d684:	e6c4      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    d686:	68a1      	ldr	r1, [r4, #8]
    d688:	f811 0b01 	ldrb.w	r0, [r1], #1
    d68c:	f002 fc4e 	bl	ff2c <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    d690:	f7ff fcf2 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d694:	e6bc      	b.n	d410 <hci_cmd_handle+0x124>
		le_set_adv_param(cmd, evt);
    d696:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    d698:	7ba5      	ldrb	r5, [r4, #14]
    d69a:	79a3      	ldrb	r3, [r4, #6]
    d69c:	7962      	ldrb	r2, [r4, #5]
    d69e:	7921      	ldrb	r1, [r4, #4]
    d6a0:	8820      	ldrh	r0, [r4, #0]
    d6a2:	9502      	str	r5, [sp, #8]
    d6a4:	7b65      	ldrb	r5, [r4, #13]
    d6a6:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    d6a8:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    d6aa:	9400      	str	r4, [sp, #0]
    d6ac:	f002 fa24 	bl	faf8 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    d6b0:	f7ff fce2 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d6b4:	e6ac      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    d6b6:	68a1      	ldr	r1, [r4, #8]
    d6b8:	2001      	movs	r0, #1
    d6ba:	f7ff fb15 	bl	cce8 <ll_addr_set>
	*evt = cmd_complete_status(status);
    d6be:	f7ff fcdb 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d6c2:	e6a5      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d6c4:	2109      	movs	r1, #9
    d6c6:	a807      	add	r0, sp, #28
    d6c8:	f7ff fd68 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d6cc:	4603      	mov	r3, r0
    d6ce:	2200      	movs	r2, #0
    d6d0:	f803 2b01 	strb.w	r2, [r3], #1
	dst[0] = val;
    d6d4:	257f      	movs	r5, #127	; 0x7f
	dst[1] = val >> 8;
    d6d6:	2441      	movs	r4, #65	; 0x41
	dst[2] = val >> 16;
    d6d8:	2101      	movs	r1, #1
    d6da:	f8c0 2001 	str.w	r2, [r0, #1]
    d6de:	605a      	str	r2, [r3, #4]
	dst[0] = val;
    d6e0:	7045      	strb	r5, [r0, #1]
	dst[1] = val >> 8;
    d6e2:	7084      	strb	r4, [r0, #2]
	dst[2] = val >> 16;
    d6e4:	70c1      	strb	r1, [r0, #3]
	if (err == -EINVAL) {
    d6e6:	9807      	ldr	r0, [sp, #28]
    d6e8:	e692      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d6ea:	2104      	movs	r1, #4
    d6ec:	a807      	add	r0, sp, #28
    d6ee:	f7ff fd55 	bl	d19c <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    d6f2:	2203      	movs	r2, #3
	rp->status = 0x00;
    d6f4:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    d6f6:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    d6f8:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    d6fa:	221b      	movs	r2, #27
    d6fc:	7042      	strb	r2, [r0, #1]
    d6fe:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    d700:	9807      	ldr	r0, [sp, #28]
    d702:	e685      	b.n	d410 <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d704:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    d706:	4bbf      	ldr	r3, [pc, #764]	; (da04 <hci_cmd_handle+0x718>)
    d708:	6811      	ldr	r1, [r2, #0]
    d70a:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d70c:	605a      	str	r2, [r3, #4]
    d70e:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    d710:	2000      	movs	r0, #0
    d712:	f7ff fcb1 	bl	d078 <cmd_complete_status>
}
    d716:	e67b      	b.n	d410 <hci_cmd_handle+0x124>
		le_set_phy(cmd, evt);
    d718:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d71a:	7894      	ldrb	r4, [r2, #2]
    d71c:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    d71e:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d720:	f8b2 6005 	ldrh.w	r6, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d724:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
    d726:	bf48      	it	mi
    d728:	f041 0103 	orrmi.w	r1, r1, #3
    d72c:	7913      	ldrb	r3, [r2, #4]
    d72e:	bf48      	it	mi
    d730:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d732:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
    d734:	bf44      	itt	mi
    d736:	f043 0303 	orrmi.w	r3, r3, #3
    d73a:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    d73c:	ea43 0201 	orr.w	r2, r3, r1
    d740:	f032 0203 	bics.w	r2, r2, #3
    d744:	f040 8195 	bne.w	da72 <hci_cmd_handle+0x786>
	if (!(cmd->tx_phys & 0x07) ||
    d748:	074c      	lsls	r4, r1, #29
    d74a:	f000 818e 	beq.w	da6a <hci_cmd_handle+0x77e>
    d74e:	075a      	lsls	r2, r3, #29
    d750:	f000 818b 	beq.w	da6a <hci_cmd_handle+0x77e>
	if (phy_opts & 0x03) {
    d754:	f016 0203 	ands.w	r2, r6, #3
		phy_opts -= 1U;
    d758:	bf1c      	itt	ne
    d75a:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		phy_opts &= 1;
    d75e:	f006 0201 	andne.w	r2, r6, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d762:	4638      	mov	r0, r7
    d764:	f003 fb58 	bl	10e18 <ll_phy_req_send>
    d768:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d76a:	8828      	ldrh	r0, [r5, #0]
    d76c:	f017 f97b 	bl	24a66 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d770:	e64e      	b.n	d410 <hci_cmd_handle+0x124>
		le_set_default_phy(cmd, evt);
    d772:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d774:	781a      	ldrb	r2, [r3, #0]
    d776:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    d778:	bf4a      	itet	mi
    d77a:	2007      	movmi	r0, #7
    d77c:	7858      	ldrbpl	r0, [r3, #1]
    d77e:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d780:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    d782:	bf4a      	itet	mi
    d784:	2107      	movmi	r1, #7
    d786:	7899      	ldrbpl	r1, [r3, #2]
    d788:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d78a:	f003 fb3b 	bl	10e04 <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    d78e:	f7ff fc73 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d792:	e63d      	b.n	d410 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d794:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d796:	2105      	movs	r1, #5
    d798:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d79a:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d79c:	f7ff fcfe 	bl	d19c <hci_cmd_complete>
    d7a0:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d7a2:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    d7a4:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d7a6:	1ce1      	adds	r1, r4, #3
    d7a8:	f003 fb0e 	bl	10dc8 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    d7ac:	78e2      	ldrb	r2, [r4, #3]
    d7ae:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    d7b0:	7020      	strb	r0, [r4, #0]
    d7b2:	2a00      	cmp	r2, #0
    d7b4:	fa92 f2a2 	rbit	r2, r2
    d7b8:	fab2 f282 	clz	r2, r2
    d7bc:	bf08      	it	eq
    d7be:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    d7c2:	2b00      	cmp	r3, #0
    d7c4:	fa93 f3a3 	rbit	r3, r3
    d7c8:	fab3 f383 	clz	r3, r3
    d7cc:	f102 0201 	add.w	r2, r2, #1
    d7d0:	bf08      	it	eq
    d7d2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d7d6:	70e2      	strb	r2, [r4, #3]
    d7d8:	3301      	adds	r3, #1
    d7da:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    d7dc:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d7e0:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    d7e2:	e615      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d7e4:	2109      	movs	r1, #9
    d7e6:	a807      	add	r0, sp, #28
    d7e8:	f7ff fcd8 	bl	d19c <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d7ec:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d7ee:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d7f0:	f10d 021a 	add.w	r2, sp, #26
    d7f4:	f10d 0016 	add.w	r0, sp, #22
    d7f8:	a906      	add	r1, sp, #24
    d7fa:	f003 fadb 	bl	10db4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d7fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d802:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    d806:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d80a:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    d80e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d812:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    d816:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d818:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d81c:	7022      	strb	r2, [r4, #0]
    d81e:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d820:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    d824:	e5f4      	b.n	d410 <hci_cmd_handle+0x124>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    d826:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    d828:	8818      	ldrh	r0, [r3, #0]
    d82a:	f007 fa51 	bl	14cd0 <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    d82e:	2000      	movs	r0, #0
    d830:	f7ff fc22 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d834:	e5ec      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_rl_enable(cmd->enable);
    d836:	68a3      	ldr	r3, [r4, #8]
    d838:	7818      	ldrb	r0, [r3, #0]
    d83a:	f007 fa33 	bl	14ca4 <ll_rl_enable>
	*evt = cmd_complete_status(status);
    d83e:	f7ff fc1b 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d842:	e5e5      	b.n	d410 <hci_cmd_handle+0x124>
	memcpy(dst, src, sizeof(*dst));
    d844:	68a3      	ldr	r3, [r4, #8]
    d846:	6818      	ldr	r0, [r3, #0]
    d848:	9008      	str	r0, [sp, #32]
    d84a:	889a      	ldrh	r2, [r3, #4]
    d84c:	799b      	ldrb	r3, [r3, #6]
    d84e:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d852:	2107      	movs	r1, #7
    d854:	a807      	add	r0, sp, #28
    d856:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    d85a:	f7ff fc9f 	bl	d19c <hci_cmd_complete>
    d85e:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d860:	1c61      	adds	r1, r4, #1
    d862:	a808      	add	r0, sp, #32
    d864:	f007 fdfa 	bl	1545c <ll_rl_lrpa_get>
    d868:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    d86a:	9807      	ldr	r0, [sp, #28]
    d86c:	e5d0      	b.n	d410 <hci_cmd_handle+0x124>
    d86e:	68a3      	ldr	r3, [r4, #8]
    d870:	6818      	ldr	r0, [r3, #0]
    d872:	9008      	str	r0, [sp, #32]
    d874:	889a      	ldrh	r2, [r3, #4]
    d876:	799b      	ldrb	r3, [r3, #6]
    d878:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d87c:	2107      	movs	r1, #7
    d87e:	a807      	add	r0, sp, #28
    d880:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    d884:	f7ff fc8a 	bl	d19c <hci_cmd_complete>
    d888:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d88a:	1c61      	adds	r1, r4, #1
    d88c:	a808      	add	r0, sp, #32
    d88e:	f007 fdc3 	bl	15418 <ll_rl_crpa_get>
    d892:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    d894:	9807      	ldr	r0, [sp, #28]
    d896:	e5bb      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d898:	2102      	movs	r1, #2
    d89a:	a807      	add	r0, sp, #28
    d89c:	f7ff fc7e 	bl	d19c <hci_cmd_complete>
    d8a0:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d8a2:	f007 f9bd 	bl	14c20 <ll_rl_size_get>
	rp->status = 0x00;
    d8a6:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    d8a8:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d8aa:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    d8ac:	9807      	ldr	r0, [sp, #28]
    d8ae:	e5af      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_rl_clear();
    d8b0:	f007 f9b8 	bl	14c24 <ll_rl_clear>
	*evt = cmd_complete_status(status);
    d8b4:	f7ff fbe0 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d8b8:	e5aa      	b.n	d410 <hci_cmd_handle+0x124>
	status = ll_rl_remove(&cmd->peer_id_addr);
    d8ba:	68a0      	ldr	r0, [r4, #8]
    d8bc:	f007 fd0a 	bl	152d4 <ll_rl_remove>
	*evt = cmd_complete_status(status);
    d8c0:	f7ff fbda 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d8c4:	e5a4      	b.n	d410 <hci_cmd_handle+0x124>
		le_add_dev_to_rl(cmd, evt);
    d8c6:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d8c8:	f100 0217 	add.w	r2, r0, #23
    d8cc:	1dc1      	adds	r1, r0, #7
    d8ce:	f007 fc3b 	bl	15148 <ll_rl_add>
	*evt = cmd_complete_status(status);
    d8d2:	f7ff fbd1 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d8d6:	e59b      	b.n	d410 <hci_cmd_handle+0x124>
		le_write_default_data_len(cmd, evt);
    d8d8:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    d8da:	8859      	ldrh	r1, [r3, #2]
    d8dc:	8818      	ldrh	r0, [r3, #0]
    d8de:	f003 fa5f 	bl	10da0 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    d8e2:	b2c0      	uxtb	r0, r0
    d8e4:	f7ff fbc8 	bl	d078 <cmd_complete_status>
	if (err == -EINVAL) {
    d8e8:	e592      	b.n	d410 <hci_cmd_handle+0x124>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8ea:	2105      	movs	r1, #5
    d8ec:	a807      	add	r0, sp, #28
    d8ee:	f7ff fc55 	bl	d19c <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    d8f2:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d8f4:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    d8f6:	f10d 001a 	add.w	r0, sp, #26
    d8fa:	f003 fa45 	bl	10d88 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d8fe:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d902:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    d906:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d908:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d90c:	7022      	strb	r2, [r4, #0]
    d90e:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d910:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    d914:	e57c      	b.n	d410 <hci_cmd_handle+0x124>
		le_set_data_len(cmd, evt);
    d916:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d918:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d91a:	889a      	ldrh	r2, [r3, #4]
    d91c:	8859      	ldrh	r1, [r3, #2]
    d91e:	4628      	mov	r0, r5
    d920:	f003 f9de 	bl	10ce0 <ll_length_req_send>
    d924:	e5bd      	b.n	d4a2 <hci_cmd_handle+0x1b6>
		le_conn_param_req_neg_reply(cmd, evt);
    d926:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d928:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    d92a:	789a      	ldrb	r2, [r3, #2]
    d92c:	2300      	movs	r3, #0
    d92e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d932:	4628      	mov	r0, r5
    d934:	9300      	str	r3, [sp, #0]
    d936:	2102      	movs	r1, #2
    d938:	f003 f892 	bl	10a60 <ll_conn_update>
    d93c:	e5b1      	b.n	d4a2 <hci_cmd_handle+0x1b6>
		le_conn_param_req_reply(cmd, evt);
    d93e:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    d940:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d942:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    d944:	8853      	ldrh	r3, [r2, #2]
    d946:	9102      	str	r1, [sp, #8]
    d948:	88d1      	ldrh	r1, [r2, #6]
    d94a:	9101      	str	r1, [sp, #4]
    d94c:	8892      	ldrh	r2, [r2, #4]
    d94e:	9200      	str	r2, [sp, #0]
    d950:	4628      	mov	r0, r5
    d952:	2200      	movs	r2, #0
    d954:	2102      	movs	r1, #2
    d956:	f003 f883 	bl	10a60 <ll_conn_update>
    d95a:	e5a2      	b.n	d4a2 <hci_cmd_handle+0x1b6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d95c:	2109      	movs	r1, #9
    d95e:	a807      	add	r0, sp, #28
    d960:	f7ff fc1c 	bl	d19c <hci_cmd_complete>
	dst[0] = val;
    d964:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    d966:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    d968:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    d96a:	2230      	movs	r2, #48	; 0x30
    d96c:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    d96e:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    d970:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    d972:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    d974:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    d976:	2201      	movs	r2, #1
    d978:	7003      	strb	r3, [r0, #0]
    d97a:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    d97c:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    d97e:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    d980:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    d982:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    d984:	9807      	ldr	r0, [sp, #28]
    d986:	e543      	b.n	d410 <hci_cmd_handle+0x124>
	handle = sys_le16_to_cpu(cmd->handle);
    d988:	68a3      	ldr	r3, [r4, #8]
    d98a:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d98c:	2200      	movs	r2, #0
    d98e:	4628      	mov	r0, r5
    d990:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d992:	f006 ff07 	bl	147a4 <ll_start_enc_req_send>
    d996:	e584      	b.n	d4a2 <hci_cmd_handle+0x1b6>
	handle = sys_le16_to_cpu(cmd->handle);
    d998:	68a2      	ldr	r2, [r4, #8]
    d99a:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d99e:	2100      	movs	r1, #0
    d9a0:	4628      	mov	r0, r5
    d9a2:	e7f6      	b.n	d992 <hci_cmd_handle+0x6a6>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9a4:	2109      	movs	r1, #9
    d9a6:	a807      	add	r0, sp, #28
    d9a8:	f7ff fbf8 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d9ac:	2300      	movs	r3, #0
    d9ae:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    d9b2:	2108      	movs	r1, #8
    d9b4:	f008 f91a 	bl	15bec <lll_csrand_get>
	if (err == -EINVAL) {
    d9b8:	9807      	ldr	r0, [sp, #28]
    d9ba:	e529      	b.n	d410 <hci_cmd_handle+0x124>
		le_encrypt(cmd, evt);
    d9bc:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d9be:	aa08      	add	r2, sp, #32
    d9c0:	f100 0110 	add.w	r1, r0, #16
    d9c4:	2300      	movs	r3, #0
    d9c6:	f009 fe07 	bl	175d8 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9ca:	2111      	movs	r1, #17
    d9cc:	a807      	add	r0, sp, #28
    d9ce:	f7ff fbe5 	bl	d19c <hci_cmd_complete>
	rp->status = 0x00;
    d9d2:	4605      	mov	r5, r0
    d9d4:	2300      	movs	r3, #0
    d9d6:	f805 3b01 	strb.w	r3, [r5], #1
    d9da:	ac08      	add	r4, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d9dc:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    d9de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    d9e0:	f8c6 0001 	str.w	r0, [r6, #1]
    d9e4:	9807      	ldr	r0, [sp, #28]
    d9e6:	6069      	str	r1, [r5, #4]
    d9e8:	60aa      	str	r2, [r5, #8]
    d9ea:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
    d9ec:	e510      	b.n	d410 <hci_cmd_handle+0x124>
		disconnect(cmd, evt);
    d9ee:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d9f0:	7899      	ldrb	r1, [r3, #2]
    d9f2:	8818      	ldrh	r0, [r3, #0]
    d9f4:	f003 f8e6 	bl	10bc4 <ll_terminate_ind_send>
    d9f8:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d9fa:	8828      	ldrh	r0, [r5, #0]
    d9fc:	f017 f833 	bl	24a66 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    da00:	e506      	b.n	d410 <hci_cmd_handle+0x124>
    da02:	bf00      	nop
    da04:	20000168 	.word	0x20000168
	handle = sys_le16_to_cpu(cmd->handle);
    da08:	68a3      	ldr	r3, [r4, #8]
    da0a:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    da0c:	a908      	add	r1, sp, #32
    da0e:	4628      	mov	r0, r5
    da10:	f003 fa50 	bl	10eb4 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    da14:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    da16:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    da18:	a807      	add	r0, sp, #28
    da1a:	f7ff fbbf 	bl	d19c <hci_cmd_complete>
	rp->status = status;
    da1e:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    da20:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    da24:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    da28:	f8a0 3003 	strh.w	r3, [r0, #3]
    da2c:	9807      	ldr	r0, [sp, #28]
}
    da2e:	e4ef      	b.n	d410 <hci_cmd_handle+0x124>
	event_mask = DEFAULT_EVENT_MASK;
    da30:	4912      	ldr	r1, [pc, #72]	; (da7c <hci_cmd_handle+0x790>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    da32:	4a13      	ldr	r2, [pc, #76]	; (da80 <hci_cmd_handle+0x794>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    da34:	4b13      	ldr	r3, [pc, #76]	; (da84 <hci_cmd_handle+0x798>)
	event_mask = DEFAULT_EVENT_MASK;
    da36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    da3a:	f641 75ff 	movw	r5, #8191	; 0x1fff
    da3e:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    da42:	201f      	movs	r0, #31
    da44:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    da46:	2400      	movs	r4, #0
    da48:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    da4a:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    da4e:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    da52:	f000 ffb3 	bl	e9bc <ll_reset>
		*evt = cmd_complete_status(0x00);
    da56:	2000      	movs	r0, #0
    da58:	f7ff fb0e 	bl	d078 <cmd_complete_status>
	conn_count = 0U;
    da5c:	4b0a      	ldr	r3, [pc, #40]	; (da88 <hci_cmd_handle+0x79c>)
    da5e:	2200      	movs	r2, #0
    da60:	601a      	str	r2, [r3, #0]
}
    da62:	e4d5      	b.n	d410 <hci_cmd_handle+0x124>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    da64:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    da66:	4b06      	ldr	r3, [pc, #24]	; (da80 <hci_cmd_handle+0x794>)
    da68:	e64e      	b.n	d708 <hci_cmd_handle+0x41c>
	return bt_hci_cmd_status_create(_opcode, status);
    da6a:	2112      	movs	r1, #18
    da6c:	f016 fffb 	bl	24a66 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    da70:	e4ce      	b.n	d410 <hci_cmd_handle+0x124>
	return bt_hci_cmd_status_create(_opcode, status);
    da72:	2111      	movs	r1, #17
    da74:	f016 fff7 	bl	24a66 <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    da78:	e4ca      	b.n	d410 <hci_cmd_handle+0x124>
    da7a:	bf00      	nop
    da7c:	20000160 	.word	0x20000160
    da80:	200012e8 	.word	0x200012e8
    da84:	20000168 	.word	0x20000168
    da88:	20002b84 	.word	0x20002b84

0000da8c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    da8c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    da8e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    da90:	2b03      	cmp	r3, #3
{
    da92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
    da96:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    da98:	d942      	bls.n	db20 <hci_acl_handle+0x94>
    da9a:	4605      	mov	r5, r0
    da9c:	460e      	mov	r6, r1
    da9e:	3008      	adds	r0, #8
    daa0:	2104      	movs	r1, #4
    daa2:	f018 fa03 	bl	25eac <net_buf_simple_pull_mem>
	if (buf->len < len) {
    daa6:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    daa8:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    daaa:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    daae:	42bb      	cmp	r3, r7
    dab0:	d343      	bcc.n	db3a <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
    dab2:	f002 ff7f 	bl	109b4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    dab6:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    daba:	4604      	mov	r4, r0
    dabc:	2800      	cmp	r0, #0
    dabe:	d040      	beq.n	db42 <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    dac0:	089a      	lsrs	r2, r3, #2
    dac2:	d102      	bne.n	daca <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
    dac4:	b333      	cbz	r3, db14 <hci_acl_handle+0x88>
    dac6:	2b01      	cmp	r3, #1
    dac8:	d003      	beq.n	dad2 <hci_acl_handle+0x46>
		return -EINVAL;
    daca:	f06f 0015 	mvn.w	r0, #21
}
    dace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dad2:	7902      	ldrb	r2, [r0, #4]
    dad4:	f363 0201 	bfi	r2, r3, #0, #2
    dad8:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    dada:	7167      	strb	r7, [r4, #5]
    dadc:	68a9      	ldr	r1, [r5, #8]
    dade:	463a      	mov	r2, r7
    dae0:	1de0      	adds	r0, r4, #7
    dae2:	f01d fe3a 	bl	2b75a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    dae6:	4621      	mov	r1, r4
    dae8:	f3c8 000b 	ubfx	r0, r8, #0, #12
    daec:	f002 ff6e 	bl	109cc <ll_tx_mem_enqueue>
    daf0:	2800      	cmp	r0, #0
    daf2:	d0ec      	beq.n	dace <hci_acl_handle+0x42>
    daf4:	4b2a      	ldr	r3, [pc, #168]	; (dba0 <hci_acl_handle+0x114>)
    daf6:	492b      	ldr	r1, [pc, #172]	; (dba4 <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
    daf8:	482b      	ldr	r0, [pc, #172]	; (dba8 <hci_acl_handle+0x11c>)
    dafa:	1ac9      	subs	r1, r1, r3
    dafc:	08c9      	lsrs	r1, r1, #3
    dafe:	0189      	lsls	r1, r1, #6
    db00:	f041 0101 	orr.w	r1, r1, #1
    db04:	f015 fd68 	bl	235d8 <log_0>
		ll_tx_mem_release(node_tx);
    db08:	4620      	mov	r0, r4
    db0a:	f002 ff59 	bl	109c0 <ll_tx_mem_release>
		return -EINVAL;
    db0e:	f06f 0015 	mvn.w	r0, #21
    db12:	e7dc      	b.n	dace <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    db14:	7903      	ldrb	r3, [r0, #4]
    db16:	2202      	movs	r2, #2
    db18:	f362 0301 	bfi	r3, r2, #0, #2
    db1c:	7103      	strb	r3, [r0, #4]
		break;
    db1e:	e7dc      	b.n	dada <hci_acl_handle+0x4e>
    db20:	4920      	ldr	r1, [pc, #128]	; (dba4 <hci_acl_handle+0x118>)
    db22:	4b1f      	ldr	r3, [pc, #124]	; (dba0 <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
    db24:	4821      	ldr	r0, [pc, #132]	; (dbac <hci_acl_handle+0x120>)
    db26:	1ac9      	subs	r1, r1, r3
    db28:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
    db2a:	0189      	lsls	r1, r1, #6
    db2c:	f041 0101 	orr.w	r1, r1, #1
    db30:	f015 fd52 	bl	235d8 <log_0>
		return -EINVAL;
    db34:	f06f 0015 	mvn.w	r0, #21
    db38:	e7c9      	b.n	dace <hci_acl_handle+0x42>
    db3a:	491a      	ldr	r1, [pc, #104]	; (dba4 <hci_acl_handle+0x118>)
    db3c:	4b18      	ldr	r3, [pc, #96]	; (dba0 <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
    db3e:	481c      	ldr	r0, [pc, #112]	; (dbb0 <hci_acl_handle+0x124>)
    db40:	e7f1      	b.n	db26 <hci_acl_handle+0x9a>
    db42:	4b17      	ldr	r3, [pc, #92]	; (dba0 <hci_acl_handle+0x114>)
    db44:	4917      	ldr	r1, [pc, #92]	; (dba4 <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
    db46:	481b      	ldr	r0, [pc, #108]	; (dbb4 <hci_acl_handle+0x128>)
    db48:	1ac9      	subs	r1, r1, r3
    db4a:	08c9      	lsrs	r1, r1, #3
    db4c:	0189      	lsls	r1, r1, #6
    db4e:	f041 0101 	orr.w	r1, r1, #1
    db52:	f015 fd41 	bl	235d8 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    db56:	4b18      	ldr	r3, [pc, #96]	; (dbb8 <hci_acl_handle+0x12c>)
    db58:	6819      	ldr	r1, [r3, #0]
    db5a:	4623      	mov	r3, r4
    db5c:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    db60:	4313      	orrs	r3, r2
    db62:	d102      	bne.n	db6a <hci_acl_handle+0xde>
		return -ENOBUFS;
    db64:	f06f 0068 	mvn.w	r0, #104	; 0x68
    db68:	e7b1      	b.n	dace <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    db6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    db6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    db72:	2001      	movs	r0, #1
    db74:	f7f7 fbf4 	bl	5360 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    db78:	2102      	movs	r1, #2
    db7a:	6030      	str	r0, [r6, #0]
    db7c:	3008      	adds	r0, #8
    db7e:	f018 f963 	bl	25e48 <net_buf_simple_add>
	hdr->len = len;
    db82:	2401      	movs	r4, #1
	hdr->evt = evt;
    db84:	221a      	movs	r2, #26
    db86:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    db88:	7044      	strb	r4, [r0, #1]
    db8a:	6830      	ldr	r0, [r6, #0]
    db8c:	4621      	mov	r1, r4
    db8e:	3008      	adds	r0, #8
    db90:	f018 f95a 	bl	25e48 <net_buf_simple_add>
    db94:	4603      	mov	r3, r0
		return -ENOBUFS;
    db96:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    db9a:	701c      	strb	r4, [r3, #0]
    db9c:	e797      	b.n	dace <hci_acl_handle+0x42>
    db9e:	bf00      	nop
    dba0:	0002bf50 	.word	0x0002bf50
    dba4:	0002bf98 	.word	0x0002bf98
    dba8:	0002c77c 	.word	0x0002c77c
    dbac:	0002c734 	.word	0x0002c734
    dbb0:	0002c748 	.word	0x0002c748
    dbb4:	0002c768 	.word	0x0002c768
    dbb8:	20000160 	.word	0x20000160

0000dbbc <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    dbbc:	4b06      	ldr	r3, [pc, #24]	; (dbd8 <hci_disconn_complete_encode+0x1c>)
    dbbe:	681b      	ldr	r3, [r3, #0]
{
    dbc0:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    dbc2:	f003 0410 	and.w	r4, r3, #16
    dbc6:	2500      	movs	r5, #0
    dbc8:	ea54 0305 	orrs.w	r3, r4, r5
    dbcc:	d101      	bne.n	dbd2 <hci_disconn_complete_encode+0x16>
}
    dbce:	bc30      	pop	{r4, r5}
    dbd0:	4770      	bx	lr
    dbd2:	bc30      	pop	{r4, r5}
    dbd4:	f7ff baca 	b.w	d16c <hci_disconn_complete_encode.part.0>
    dbd8:	20000160 	.word	0x20000160

0000dbdc <hci_disconn_complete_process>:
	conn_count--;
    dbdc:	4a02      	ldr	r2, [pc, #8]	; (dbe8 <hci_disconn_complete_process+0xc>)
    dbde:	6813      	ldr	r3, [r2, #0]
    dbe0:	3b01      	subs	r3, #1
    dbe2:	6013      	str	r3, [r2, #0]
}
    dbe4:	4770      	bx	lr
    dbe6:	bf00      	nop
    dbe8:	20002b84 	.word	0x20002b84

0000dbec <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    dbec:	7f03      	ldrb	r3, [r0, #28]
    dbee:	f003 0303 	and.w	r3, r3, #3
    dbf2:	3b01      	subs	r3, #1
    dbf4:	2b01      	cmp	r3, #1
{
    dbf6:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    dbf8:	d90d      	bls.n	dc16 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    dbfa:	4a16      	ldr	r2, [pc, #88]	; (dc54 <hci_acl_encode+0x68>)
    dbfc:	4916      	ldr	r1, [pc, #88]	; (dc58 <hci_acl_encode+0x6c>)
    dbfe:	4817      	ldr	r0, [pc, #92]	; (dc5c <hci_acl_encode+0x70>)
    dc00:	f241 737a 	movw	r3, #6010	; 0x177a
    dc04:	f015 f8d3 	bl	22dae <printk>
    dc08:	4040      	eors	r0, r0
    dc0a:	f380 8811 	msr	BASEPRI, r0
    dc0e:	f04f 0003 	mov.w	r0, #3
    dc12:	df02      	svc	2
		break;
	}
}
    dc14:	bd70      	pop	{r4, r5, r6, pc}
    dc16:	4604      	mov	r4, r0
    dc18:	f101 0508 	add.w	r5, r1, #8
    dc1c:	4628      	mov	r0, r5
    dc1e:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    dc20:	88e6      	ldrh	r6, [r4, #6]
    dc22:	f018 f911 	bl	25e48 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    dc26:	7f23      	ldrb	r3, [r4, #28]
    dc28:	f003 0303 	and.w	r3, r3, #3
    dc2c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    dc2e:	bf0c      	ite	eq
    dc30:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    dc34:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    dc38:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    dc3a:	7f61      	ldrb	r1, [r4, #29]
    dc3c:	8041      	strh	r1, [r0, #2]
    dc3e:	4628      	mov	r0, r5
    dc40:	f018 f902 	bl	25e48 <net_buf_simple_add>
    dc44:	7f62      	ldrb	r2, [r4, #29]
    dc46:	f104 011f 	add.w	r1, r4, #31
}
    dc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dc4e:	f01d bd84 	b.w	2b75a <memcpy>
    dc52:	bf00      	nop
    dc54:	0002c790 	.word	0x0002c790
    dc58:	0002c650 	.word	0x0002c650
    dc5c:	0002c5e0 	.word	0x0002c5e0

0000dc60 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    dc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dc64:	7905      	ldrb	r5, [r0, #4]
    dc66:	88c7      	ldrh	r7, [r0, #6]
    dc68:	2d03      	cmp	r5, #3
{
    dc6a:	4604      	mov	r4, r0
    dc6c:	b088      	sub	sp, #32
    dc6e:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    dc70:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    dc74:	d00c      	beq.n	dc90 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
    dc76:	3d13      	subs	r5, #19
    dc78:	2d06      	cmp	r5, #6
    dc7a:	f200 8263 	bhi.w	e144 <hci_evt_encode+0x4e4>
    dc7e:	e8df f015 	tbh	[pc, r5, lsl #1]
    dc82:	005c      	.short	0x005c
    dc84:	00b400d6 	.word	0x00b400d6
    dc88:	00e30114 	.word	0x00e30114
    dc8c:	002100fa 	.word	0x002100fa
	switch (pdu_data->llctrl.opcode) {
    dc90:	7fe3      	ldrb	r3, [r4, #31]
    dc92:	3b03      	subs	r3, #3
    dc94:	2b12      	cmp	r3, #18
    dc96:	f200 8122 	bhi.w	dede <hci_evt_encode+0x27e>
    dc9a:	e8df f013 	tbh	[pc, r3, lsl #1]
    dc9e:	016e      	.short	0x016e
    dca0:	01200120 	.word	0x01200120
    dca4:	01b30191 	.word	0x01b30191
    dca8:	01c30120 	.word	0x01c30120
    dcac:	01200120 	.word	0x01200120
    dcb0:	01ca0120 	.word	0x01ca0120
    dcb4:	01d90120 	.word	0x01d90120
    dcb8:	01200120 	.word	0x01200120
    dcbc:	01200120 	.word	0x01200120
    dcc0:	012e012e 	.word	0x012e012e
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dcc4:	4bc5      	ldr	r3, [pc, #788]	; (dfdc <hci_evt_encode+0x37c>)
    dcc6:	6858      	ldr	r0, [r3, #4]
    dcc8:	2100      	movs	r1, #0
    dcca:	460a      	mov	r2, r1
    dccc:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dcd0:	4313      	orrs	r3, r2
    dcd2:	d007      	beq.n	dce4 <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    dcd4:	4bc2      	ldr	r3, [pc, #776]	; (dfe0 <hci_evt_encode+0x380>)
    dcd6:	6818      	ldr	r0, [r3, #0]
    dcd8:	460b      	mov	r3, r1
    dcda:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dcde:	4313      	orrs	r3, r2
    dce0:	f040 812b 	bne.w	df3a <hci_evt_encode+0x2da>
    dce4:	7f61      	ldrb	r1, [r4, #29]
    dce6:	48bf      	ldr	r0, [pc, #764]	; (dfe4 <hci_evt_encode+0x384>)
    dce8:	4bbf      	ldr	r3, [pc, #764]	; (dfe8 <hci_evt_encode+0x388>)
    dcea:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    dcec:	7f25      	ldrb	r5, [r4, #28]
    dcee:	9704      	str	r7, [sp, #16]
    dcf0:	2900      	cmp	r1, #0
    dcf2:	eba3 0300 	sub.w	r3, r3, r0
    dcf6:	fa91 f1a1 	rbit	r1, r1
    dcfa:	fab1 f181 	clz	r1, r1
    dcfe:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    dd02:	bf08      	it	eq
    dd04:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
    dd08:	2a00      	cmp	r2, #0
    dd0a:	fa92 f2a2 	rbit	r2, r2
    dd0e:	fab2 f282 	clz	r2, r2
    dd12:	f101 0001 	add.w	r0, r1, #1
    dd16:	bf08      	it	eq
    dd18:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    dd1c:	019b      	lsls	r3, r3, #6
    dd1e:	1c54      	adds	r4, r2, #1
    dd20:	9006      	str	r0, [sp, #24]
    dd22:	f043 0302 	orr.w	r3, r3, #2
    dd26:	48b1      	ldr	r0, [pc, #708]	; (dfec <hci_evt_encode+0x38c>)
    dd28:	9407      	str	r4, [sp, #28]
    dd2a:	2204      	movs	r2, #4
    dd2c:	a904      	add	r1, sp, #16
    dd2e:	9505      	str	r5, [sp, #20]
    dd30:	f015 fca8 	bl	23684 <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
    dd34:	b008      	add	sp, #32
    dd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = cc->status;
    dd3a:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    dd3c:	2d00      	cmp	r5, #0
    dd3e:	f000 81a5 	beq.w	e08c <hci_evt_encode+0x42c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd42:	4ba6      	ldr	r3, [pc, #664]	; (dfdc <hci_evt_encode+0x37c>)
    dd44:	6859      	ldr	r1, [r3, #4]
    dd46:	f04f 0800 	mov.w	r8, #0
    dd4a:	4642      	mov	r2, r8
    dd4c:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    dd50:	4313      	orrs	r3, r2
    dd52:	d0ef      	beq.n	dd34 <hci_evt_encode+0xd4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    dd54:	4ba2      	ldr	r3, [pc, #648]	; (dfe0 <hci_evt_encode+0x380>)
    dd56:	f8d3 c000 	ldr.w	ip, [r3]
    dd5a:	f240 2101 	movw	r1, #513	; 0x201
    dd5e:	ea0c 0201 	and.w	r2, ip, r1
    dd62:	4643      	mov	r3, r8
    dd64:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    dd66:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    dd6a:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    dd6c:	d0e2      	beq.n	dd34 <hci_evt_encode+0xd4>
	if (!status) {
    dd6e:	2d00      	cmp	r5, #0
    dd70:	f040 819f 	bne.w	e0b2 <hci_evt_encode+0x452>
		conn_count++;
    dd74:	4a9e      	ldr	r2, [pc, #632]	; (dff0 <hci_evt_encode+0x390>)
    dd76:	6813      	ldr	r3, [r2, #0]
    dd78:	3301      	adds	r3, #1
    dd7a:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    dd7c:	ea50 0301 	orrs.w	r3, r0, r1
    dd80:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    dd84:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    dd86:	f000 81a3 	beq.w	e0d0 <hci_evt_encode+0x470>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    dd8a:	221e      	movs	r2, #30
    dd8c:	210a      	movs	r1, #10
    dd8e:	f7ff f985 	bl	d09c <meta_evt>
		leecc->status = 0x00;
    dd92:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    dd94:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = cc->role;
    dd98:	7f62      	ldrb	r2, [r4, #29]
    dd9a:	70c2      	strb	r2, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    dd9c:	7fa2      	ldrb	r2, [r4, #30]
    dd9e:	7102      	strb	r2, [r0, #4]
    dda0:	f8d8 2000 	ldr.w	r2, [r8]
    dda4:	f8c0 2005 	str.w	r2, [r0, #5]
    dda8:	f8b8 2004 	ldrh.w	r2, [r8, #4]
    ddac:	f8a0 2009 	strh.w	r2, [r0, #9]
    ddb0:	4623      	mov	r3, r4
    ddb2:	f853 2f2b 	ldr.w	r2, [r3, #43]!
    ddb6:	f8c0 200b 	str.w	r2, [r0, #11]
    ddba:	889b      	ldrh	r3, [r3, #4]
    ddbc:	f8a0 300f 	strh.w	r3, [r0, #15]
    ddc0:	4623      	mov	r3, r4
    ddc2:	f853 2f25 	ldr.w	r2, [r3, #37]!
    ddc6:	f8c0 2011 	str.w	r2, [r0, #17]
    ddca:	889b      	ldrh	r3, [r3, #4]
    ddcc:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    ddd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    ddd2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    ddd4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    ddd6:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    ddda:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    ddde:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
    dde2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    dde6:	7743      	strb	r3, [r0, #29]
		return;
    dde8:	e7a4      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ddea:	4b7c      	ldr	r3, [pc, #496]	; (dfdc <hci_evt_encode+0x37c>)
    ddec:	6858      	ldr	r0, [r3, #4]
    ddee:	2100      	movs	r1, #0
    ddf0:	460a      	mov	r2, r1
    ddf2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    ddf6:	4313      	orrs	r3, r2
    ddf8:	d09c      	beq.n	dd34 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    ddfa:	4b79      	ldr	r3, [pc, #484]	; (dfe0 <hci_evt_encode+0x380>)
    ddfc:	6818      	ldr	r0, [r3, #0]
    ddfe:	460b      	mov	r3, r1
    de00:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    de04:	4313      	orrs	r3, r2
    de06:	d095      	beq.n	dd34 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    de08:	2209      	movs	r2, #9
    de0a:	2103      	movs	r1, #3
    de0c:	4630      	mov	r0, r6
    de0e:	f7ff f945 	bl	d09c <meta_evt>
	sep->status = cu->status;
    de12:	7f23      	ldrb	r3, [r4, #28]
    de14:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    de16:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    de18:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    de1a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    de1c:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    de20:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    de24:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    de28:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    de2c:	e782      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    de2e:	4b6b      	ldr	r3, [pc, #428]	; (dfdc <hci_evt_encode+0x37c>)
    de30:	6819      	ldr	r1, [r3, #0]
    de32:	2300      	movs	r3, #0
    de34:	f001 0210 	and.w	r2, r1, #16
    de38:	4313      	orrs	r3, r2
    de3a:	f43f af7b 	beq.w	dd34 <hci_evt_encode+0xd4>
    de3e:	4632      	mov	r2, r6
    de40:	4639      	mov	r1, r7
    de42:	f7ff f993 	bl	d16c <hci_disconn_complete_encode.part.0>
    de46:	e775      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    de48:	4b6a      	ldr	r3, [pc, #424]	; (dff4 <hci_evt_encode+0x394>)
    de4a:	6819      	ldr	r1, [r3, #0]
    de4c:	2300      	movs	r3, #0
    de4e:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    de52:	4313      	orrs	r3, r2
    de54:	f43f af6e 	beq.w	dd34 <hci_evt_encode+0xd4>
    de58:	3608      	adds	r6, #8
    de5a:	2102      	movs	r1, #2
    de5c:	4630      	mov	r0, r6
    de5e:	f017 fff3 	bl	25e48 <net_buf_simple_add>
    de62:	4603      	mov	r3, r0
	hdr->evt = evt;
    de64:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    de66:	2102      	movs	r1, #2
    de68:	4630      	mov	r0, r6
	hdr->evt = evt;
    de6a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    de6c:	7059      	strb	r1, [r3, #1]
    de6e:	f017 ffeb 	bl	25e48 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    de72:	8007      	strh	r7, [r0, #0]
    de74:	e75e      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    de76:	4b59      	ldr	r3, [pc, #356]	; (dfdc <hci_evt_encode+0x37c>)
    de78:	6858      	ldr	r0, [r3, #4]
    de7a:	2100      	movs	r1, #0
    de7c:	460a      	mov	r2, r1
    de7e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    de82:	4313      	orrs	r3, r2
    de84:	f43f af56 	beq.w	dd34 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    de88:	4b55      	ldr	r3, [pc, #340]	; (dfe0 <hci_evt_encode+0x380>)
    de8a:	6818      	ldr	r0, [r3, #0]
    de8c:	460b      	mov	r3, r1
    de8e:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    de92:	4313      	orrs	r3, r2
    de94:	f43f af4e 	beq.w	dd34 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    de98:	4630      	mov	r0, r6
    de9a:	2203      	movs	r2, #3
    de9c:	2114      	movs	r1, #20
    de9e:	f7ff f8fd 	bl	d09c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    dea2:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    dea4:	7f23      	ldrb	r3, [r4, #28]
    dea6:	7083      	strb	r3, [r0, #2]
    dea8:	e744      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    deaa:	4b4c      	ldr	r3, [pc, #304]	; (dfdc <hci_evt_encode+0x37c>)
    deac:	6859      	ldr	r1, [r3, #4]
    deae:	2400      	movs	r4, #0
    deb0:	4622      	mov	r2, r4
    deb2:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    deb6:	4313      	orrs	r3, r2
    deb8:	f43f af3c 	beq.w	dd34 <hci_evt_encode+0xd4>
    debc:	3608      	adds	r6, #8
    debe:	2102      	movs	r1, #2
    dec0:	4630      	mov	r0, r6
    dec2:	f017 ffc1 	bl	25e48 <net_buf_simple_add>
    dec6:	4603      	mov	r3, r0
	hdr->evt = evt;
    dec8:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    deca:	2103      	movs	r1, #3
    decc:	4630      	mov	r0, r6
	hdr->evt = evt;
    dece:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ded0:	7059      	strb	r1, [r3, #1]
    ded2:	f017 ffb9 	bl	25e48 <net_buf_simple_add>
	ep->status = 0x00;
    ded6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ded8:	f8a0 7001 	strh.w	r7, [r0, #1]
    dedc:	e72a      	b.n	dd34 <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    dede:	f241 734e 	movw	r3, #5966	; 0x174e
    dee2:	4a45      	ldr	r2, [pc, #276]	; (dff8 <hci_evt_encode+0x398>)
    dee4:	4945      	ldr	r1, [pc, #276]	; (dffc <hci_evt_encode+0x39c>)
    dee6:	4846      	ldr	r0, [pc, #280]	; (e000 <hci_evt_encode+0x3a0>)
    dee8:	f014 ff61 	bl	22dae <printk>
    deec:	4040      	eors	r0, r0
    deee:	f380 8811 	msr	BASEPRI, r0
    def2:	f04f 0003 	mov.w	r0, #3
    def6:	df02      	svc	2
}
    def8:	e71c      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    defa:	4b38      	ldr	r3, [pc, #224]	; (dfdc <hci_evt_encode+0x37c>)
    defc:	6858      	ldr	r0, [r3, #4]
    defe:	2100      	movs	r1, #0
    df00:	460a      	mov	r2, r1
    df02:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    df06:	4313      	orrs	r3, r2
    df08:	f43f af14 	beq.w	dd34 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    df0c:	4b34      	ldr	r3, [pc, #208]	; (dfe0 <hci_evt_encode+0x380>)
    df0e:	6818      	ldr	r0, [r3, #0]
    df10:	460b      	mov	r3, r1
    df12:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    df16:	4313      	orrs	r3, r2
    df18:	f43f af0c 	beq.w	dd34 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    df1c:	4630      	mov	r0, r6
    df1e:	220a      	movs	r2, #10
    df20:	2107      	movs	r1, #7
    df22:	f7ff f8bb 	bl	d09c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    df26:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    df28:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    df2a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    df2c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    df2e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    df30:	8c23      	ldrh	r3, [r4, #32]
    df32:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    df34:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    df36:	8103      	strh	r3, [r0, #8]
    df38:	e6fc      	b.n	dd34 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    df3a:	2205      	movs	r2, #5
    df3c:	4630      	mov	r0, r6
    df3e:	210c      	movs	r1, #12
    df40:	f7ff f8ac 	bl	d09c <meta_evt>
	sep->status = pu->status;
    df44:	7f23      	ldrb	r3, [r4, #28]
    df46:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    df48:	f8a0 7001 	strh.w	r7, [r0, #1]
    df4c:	7f62      	ldrb	r2, [r4, #29]
    df4e:	2a00      	cmp	r2, #0
    df50:	fa92 f3a2 	rbit	r3, r2
    df54:	fab3 f383 	clz	r3, r3
    df58:	bf08      	it	eq
    df5a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    df5e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    df60:	70c3      	strb	r3, [r0, #3]
    df62:	7fa2      	ldrb	r2, [r4, #30]
    df64:	fa92 f3a2 	rbit	r3, r2
    df68:	2a00      	cmp	r2, #0
    df6a:	fab3 f383 	clz	r3, r3
    df6e:	bf08      	it	eq
    df70:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    df74:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    df76:	7103      	strb	r3, [r0, #4]
    df78:	e6dc      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    df7a:	4b18      	ldr	r3, [pc, #96]	; (dfdc <hci_evt_encode+0x37c>)
    df7c:	6858      	ldr	r0, [r3, #4]
    df7e:	2100      	movs	r1, #0
    df80:	460a      	mov	r2, r1
    df82:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    df86:	4313      	orrs	r3, r2
    df88:	f43f aed4 	beq.w	dd34 <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    df8c:	4b14      	ldr	r3, [pc, #80]	; (dfe0 <hci_evt_encode+0x380>)
    df8e:	6818      	ldr	r0, [r3, #0]
    df90:	460b      	mov	r3, r1
    df92:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    df96:	4313      	orrs	r3, r2
    df98:	f43f aecc 	beq.w	dd34 <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    df9c:	220c      	movs	r2, #12
    df9e:	2105      	movs	r1, #5
    dfa0:	4630      	mov	r0, r6
    dfa2:	f7ff f87b 	bl	d09c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    dfa6:	4603      	mov	r3, r0
    dfa8:	4622      	mov	r2, r4
    dfaa:	f823 7b02 	strh.w	r7, [r3], #2
    dfae:	f852 1f20 	ldr.w	r1, [r2, #32]!
    dfb2:	6852      	ldr	r2, [r2, #4]
    dfb4:	f8c0 1002 	str.w	r1, [r0, #2]
    dfb8:	605a      	str	r2, [r3, #4]
    dfba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    dfbc:	8143      	strh	r3, [r0, #10]
    dfbe:	e6b9      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    dfc0:	4b06      	ldr	r3, [pc, #24]	; (dfdc <hci_evt_encode+0x37c>)
    dfc2:	6819      	ldr	r1, [r3, #0]
    dfc4:	2000      	movs	r0, #0
    dfc6:	f001 0280 	and.w	r2, r1, #128	; 0x80
    dfca:	4603      	mov	r3, r0
    dfcc:	4313      	orrs	r3, r2
    dfce:	f43f aeb1 	beq.w	dd34 <hci_evt_encode+0xd4>
    dfd2:	4632      	mov	r2, r6
    dfd4:	4639      	mov	r1, r7
    dfd6:	f7ff f879 	bl	d0cc <encrypt_change.part.0>
    dfda:	e6ab      	b.n	dd34 <hci_evt_encode+0xd4>
    dfdc:	20000160 	.word	0x20000160
    dfe0:	20000168 	.word	0x20000168
    dfe4:	0002bf50 	.word	0x0002bf50
    dfe8:	0002bf98 	.word	0x0002bf98
    dfec:	0002c7cc 	.word	0x0002c7cc
    dff0:	20002b84 	.word	0x20002b84
    dff4:	200012e8 	.word	0x200012e8
    dff8:	0002c790 	.word	0x0002c790
    dffc:	0002c650 	.word	0x0002c650
    e000:	0002c5e0 	.word	0x0002c5e0
		le_unknown_rsp(pdu_data, handle, buf);
    e004:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e008:	290e      	cmp	r1, #14
    e00a:	f000 8083 	beq.w	e114 <hci_evt_encode+0x4b4>
    e00e:	4b4f      	ldr	r3, [pc, #316]	; (e14c <hci_evt_encode+0x4ec>)
    e010:	4a4f      	ldr	r2, [pc, #316]	; (e150 <hci_evt_encode+0x4f0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e012:	4850      	ldr	r0, [pc, #320]	; (e154 <hci_evt_encode+0x4f4>)
    e014:	1ad2      	subs	r2, r2, r3
    e016:	08d2      	lsrs	r2, r2, #3
    e018:	0192      	lsls	r2, r2, #6
    e01a:	f042 0202 	orr.w	r2, r2, #2
    e01e:	f015 fae8 	bl	235f2 <log_1>
    e022:	e687      	b.n	dd34 <hci_evt_encode+0xd4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e024:	460b      	mov	r3, r1
    e026:	463a      	mov	r2, r7
    e028:	4601      	mov	r1, r0
    e02a:	2000      	movs	r0, #0
    e02c:	f7ff f868 	bl	d100 <le_remote_feat_complete>
		break;
    e030:	e680      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    e032:	4b49      	ldr	r3, [pc, #292]	; (e158 <hci_evt_encode+0x4f8>)
    e034:	6819      	ldr	r1, [r3, #0]
    e036:	2300      	movs	r3, #0
    e038:	f001 0280 	and.w	r2, r1, #128	; 0x80
    e03c:	4313      	orrs	r3, r2
    e03e:	f43f ae79 	beq.w	dd34 <hci_evt_encode+0xd4>
    e042:	f894 0020 	ldrb.w	r0, [r4, #32]
    e046:	4632      	mov	r2, r6
    e048:	4639      	mov	r1, r7
    e04a:	f7ff f83f 	bl	d0cc <encrypt_change.part.0>
    e04e:	e671      	b.n	dd34 <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e050:	4b41      	ldr	r3, [pc, #260]	; (e158 <hci_evt_encode+0x4f8>)
    e052:	6858      	ldr	r0, [r3, #4]
    e054:	2100      	movs	r1, #0
    e056:	460a      	mov	r2, r1
    e058:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    e05c:	4313      	orrs	r3, r2
    e05e:	d01e      	beq.n	e09e <hci_evt_encode+0x43e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    e060:	4b3e      	ldr	r3, [pc, #248]	; (e15c <hci_evt_encode+0x4fc>)
    e062:	6818      	ldr	r0, [r3, #0]
    e064:	460b      	mov	r3, r1
    e066:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e06a:	4313      	orrs	r3, r2
    e06c:	d017      	beq.n	e09e <hci_evt_encode+0x43e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    e06e:	4630      	mov	r0, r6
    e070:	220a      	movs	r2, #10
    e072:	2106      	movs	r1, #6
    e074:	f7ff f812 	bl	d09c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    e078:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    e07a:	8c23      	ldrh	r3, [r4, #32]
    e07c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    e07e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    e080:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    e082:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e084:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    e086:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e088:	8103      	strh	r3, [r0, #8]
    e08a:	e653      	b.n	dd34 <hci_evt_encode+0xd4>
		ll_rl_crpa_set(cc->peer_addr_type,
    e08c:	7fa0      	ldrb	r0, [r4, #30]
    e08e:	f104 0325 	add.w	r3, r4, #37	; 0x25
    e092:	22ff      	movs	r2, #255	; 0xff
    e094:	f104 011f 	add.w	r1, r4, #31
    e098:	f007 f99c 	bl	153d4 <ll_rl_crpa_set>
    e09c:	e651      	b.n	dd42 <hci_evt_encode+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    e09e:	2300      	movs	r3, #0
    e0a0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e0a4:	4638      	mov	r0, r7
    e0a6:	9300      	str	r3, [sp, #0]
    e0a8:	221a      	movs	r2, #26
    e0aa:	2102      	movs	r1, #2
    e0ac:	f002 fcd8 	bl	10a60 <ll_conn_update>
		return;
    e0b0:	e640      	b.n	dd34 <hci_evt_encode+0xd4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    e0b2:	ea50 0301 	orrs.w	r3, r0, r1
    e0b6:	d034      	beq.n	e122 <hci_evt_encode+0x4c2>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    e0b8:	221e      	movs	r2, #30
    e0ba:	210a      	movs	r1, #10
    e0bc:	4630      	mov	r0, r6
    e0be:	f7fe ffed 	bl	d09c <meta_evt>
    e0c2:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
    e0c4:	4641      	mov	r1, r8
    e0c6:	221e      	movs	r2, #30
    e0c8:	f01d fb68 	bl	2b79c <memset>
			leecc->status = status;
    e0cc:	7025      	strb	r5, [r4, #0]
			return;
    e0ce:	e631      	b.n	dd34 <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    e0d0:	2212      	movs	r2, #18
    e0d2:	2101      	movs	r1, #1
    e0d4:	f7fe ffe2 	bl	d09c <meta_evt>
	lecc->status = 0x00;
    e0d8:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    e0da:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = cc->role;
    e0de:	7f63      	ldrb	r3, [r4, #29]
    e0e0:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    e0e2:	7fa3      	ldrb	r3, [r4, #30]
    e0e4:	f003 0301 	and.w	r3, r3, #1
    e0e8:	7103      	strb	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e0ea:	f8d8 3000 	ldr.w	r3, [r8]
    e0ee:	f8c0 3005 	str.w	r3, [r0, #5]
    e0f2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    e0f6:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    e0fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    e0fc:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    e0fe:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    e100:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    e104:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    e108:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
    e10c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    e110:	7443      	strb	r3, [r0, #17]
    e112:	e60f      	b.n	dd34 <hci_evt_encode+0xd4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e114:	4633      	mov	r3, r6
    e116:	463a      	mov	r2, r7
    e118:	2100      	movs	r1, #0
    e11a:	201a      	movs	r0, #26
    e11c:	f7fe fff0 	bl	d100 <le_remote_feat_complete>
		break;
    e120:	e608      	b.n	dd34 <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    e122:	4630      	mov	r0, r6
    e124:	2212      	movs	r2, #18
    e126:	2101      	movs	r1, #1
    e128:	f7fe ffb8 	bl	d09c <meta_evt>
__ssp_bos_icheck3(memset, void *, int)
    e12c:	f8c0 8000 	str.w	r8, [r0]
    e130:	f8c0 8004 	str.w	r8, [r0, #4]
    e134:	f8c0 8008 	str.w	r8, [r0, #8]
    e138:	f8c0 800c 	str.w	r8, [r0, #12]
    e13c:	f8a0 8010 	strh.w	r8, [r0, #16]
		lecc->status = status;
    e140:	7005      	strb	r5, [r0, #0]
		return;
    e142:	e5f7      	b.n	dd34 <hci_evt_encode+0xd4>
		LL_ASSERT(0);
    e144:	f241 6385 	movw	r3, #5765	; 0x1685
    e148:	e6cb      	b.n	dee2 <hci_evt_encode+0x282>
    e14a:	bf00      	nop
    e14c:	0002bf50 	.word	0x0002bf50
    e150:	0002bf98 	.word	0x0002bf98
    e154:	0002c7f8 	.word	0x0002c7f8
    e158:	20000160 	.word	0x20000160
    e15c:	20000168 	.word	0x20000168

0000e160 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    e160:	b570      	push	{r4, r5, r6, lr}
    e162:	f100 0408 	add.w	r4, r0, #8
    e166:	460e      	mov	r6, r1
    e168:	4620      	mov	r0, r4
    e16a:	2102      	movs	r1, #2
    e16c:	4615      	mov	r5, r2
    e16e:	f017 fe6b 	bl	25e48 <net_buf_simple_add>
    e172:	4603      	mov	r3, r0
	hdr->evt = evt;
    e174:	2213      	movs	r2, #19
	hdr->len = len;
    e176:	2105      	movs	r1, #5
	hdr->evt = evt;
    e178:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    e17a:	7059      	strb	r1, [r3, #1]
    e17c:	4620      	mov	r0, r4
    e17e:	f017 fe63 	bl	25e48 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    e182:	2301      	movs	r3, #1
    e184:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    e186:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e18a:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    e18e:	bd70      	pop	{r4, r5, r6, pc}

0000e190 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e190:	7903      	ldrb	r3, [r0, #4]
    e192:	2b03      	cmp	r3, #3
    e194:	d009      	beq.n	e1aa <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    e196:	2b13      	cmp	r3, #19
    e198:	d005      	beq.n	e1a6 <hci_get_class+0x16>
    e19a:	3b14      	subs	r3, #20
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    e19c:	2b05      	cmp	r3, #5
    e19e:	bf94      	ite	ls
    e1a0:	2003      	movls	r0, #3
    e1a2:	2000      	movhi	r0, #0
    e1a4:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e1a6:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    e1a8:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e1aa:	7f03      	ldrb	r3, [r0, #28]
    e1ac:	f003 0303 	and.w	r3, r3, #3
    e1b0:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    e1b2:	bf0c      	ite	eq
    e1b4:	2004      	moveq	r0, #4
    e1b6:	2005      	movne	r0, #5
    e1b8:	4770      	bx	lr
    e1ba:	bf00      	nop

0000e1bc <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    e1bc:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    e1be:	480b      	ldr	r0, [pc, #44]	; (e1ec <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e1c0:	490b      	ldr	r1, [pc, #44]	; (e1f0 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e1c2:	4a0c      	ldr	r2, [pc, #48]	; (e1f4 <hci_init+0x38>)
	conn_count = 0U;
    e1c4:	4b0c      	ldr	r3, [pc, #48]	; (e1f8 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
    e1c6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e1ca:	f641 75ff 	movw	r5, #8191	; 0x1fff
    e1ce:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e1d2:	2400      	movs	r4, #0
    e1d4:	2500      	movs	r5, #0
    e1d6:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e1da:	201f      	movs	r0, #31
    e1dc:	2100      	movs	r1, #0
    e1de:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    e1e2:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    e1e4:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    e1e6:	601a      	str	r2, [r3, #0]
}
    e1e8:	4770      	bx	lr
    e1ea:	bf00      	nop
    e1ec:	20000160 	.word	0x20000160
    e1f0:	200012e8 	.word	0x200012e8
    e1f4:	20000168 	.word	0x20000168
    e1f8:	20002b84 	.word	0x20002b84

0000e1fc <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    e1fc:	f007 bcf6 	b.w	15bec <lll_csrand_get>

0000e200 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    e200:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    e202:	2300      	movs	r3, #0
    e204:	f009 f9e8 	bl	175d8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    e208:	2000      	movs	r0, #0
    e20a:	bd08      	pop	{r3, pc}

0000e20c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    e20c:	b510      	push	{r4, lr}
    e20e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    e210:	f007 fd0e 	bl	15c30 <lll_reset>
	LL_ASSERT(!err);
    e214:	b950      	cbnz	r0, e22c <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    e216:	f008 f837 	bl	16288 <lll_adv_reset>
	LL_ASSERT(!err);
    e21a:	b9c0      	cbnz	r0, e24e <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    e21c:	f008 fcc6 	bl	16bac <lll_conn_reset>
	LL_ASSERT(!err);
    e220:	bb30      	cbnz	r0, e270 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    e222:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    e224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e228:	f011 bf2c 	b.w	20084 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    e22c:	4a19      	ldr	r2, [pc, #100]	; (e294 <perform_lll_reset+0x88>)
    e22e:	491a      	ldr	r1, [pc, #104]	; (e298 <perform_lll_reset+0x8c>)
    e230:	481a      	ldr	r0, [pc, #104]	; (e29c <perform_lll_reset+0x90>)
    e232:	f240 637c 	movw	r3, #1660	; 0x67c
    e236:	f014 fdba 	bl	22dae <printk>
    e23a:	4040      	eors	r0, r0
    e23c:	f380 8811 	msr	BASEPRI, r0
    e240:	f04f 0003 	mov.w	r0, #3
    e244:	df02      	svc	2
	err = lll_adv_reset();
    e246:	f008 f81f 	bl	16288 <lll_adv_reset>
	LL_ASSERT(!err);
    e24a:	2800      	cmp	r0, #0
    e24c:	d0e6      	beq.n	e21c <perform_lll_reset+0x10>
    e24e:	4a11      	ldr	r2, [pc, #68]	; (e294 <perform_lll_reset+0x88>)
    e250:	4911      	ldr	r1, [pc, #68]	; (e298 <perform_lll_reset+0x8c>)
    e252:	4812      	ldr	r0, [pc, #72]	; (e29c <perform_lll_reset+0x90>)
    e254:	f240 6381 	movw	r3, #1665	; 0x681
    e258:	f014 fda9 	bl	22dae <printk>
    e25c:	4040      	eors	r0, r0
    e25e:	f380 8811 	msr	BASEPRI, r0
    e262:	f04f 0003 	mov.w	r0, #3
    e266:	df02      	svc	2
	err = lll_conn_reset();
    e268:	f008 fca0 	bl	16bac <lll_conn_reset>
	LL_ASSERT(!err);
    e26c:	2800      	cmp	r0, #0
    e26e:	d0d8      	beq.n	e222 <perform_lll_reset+0x16>
    e270:	4a08      	ldr	r2, [pc, #32]	; (e294 <perform_lll_reset+0x88>)
    e272:	4909      	ldr	r1, [pc, #36]	; (e298 <perform_lll_reset+0x8c>)
    e274:	4809      	ldr	r0, [pc, #36]	; (e29c <perform_lll_reset+0x90>)
    e276:	f240 638d 	movw	r3, #1677	; 0x68d
    e27a:	f014 fd98 	bl	22dae <printk>
    e27e:	4040      	eors	r0, r0
    e280:	f380 8811 	msr	BASEPRI, r0
    e284:	f04f 0003 	mov.w	r0, #3
    e288:	df02      	svc	2
    e28a:	4620      	mov	r0, r4
}
    e28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e290:	f011 bef8 	b.w	20084 <z_impl_k_sem_give>
    e294:	0002c824 	.word	0x0002c824
    e298:	0002c860 	.word	0x0002c860
    e29c:	0002c5e0 	.word	0x0002c5e0

0000e2a0 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    e2a0:	6008      	str	r0, [r1, #0]
    e2a2:	4801      	ldr	r0, [pc, #4]	; (e2a8 <ull_ticker_status_give+0x8>)
    e2a4:	f011 beee 	b.w	20084 <z_impl_k_sem_give>
    e2a8:	20002f6c 	.word	0x20002f6c

0000e2ac <disabled_cb>:
    e2ac:	f011 beea 	b.w	20084 <z_impl_k_sem_give>

0000e2b0 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    e2b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e2b4:	4f2f      	ldr	r7, [pc, #188]	; (e374 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    e2b6:	780b      	ldrb	r3, [r1, #0]
    e2b8:	783c      	ldrb	r4, [r7, #0]
{
    e2ba:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e2bc:	7879      	ldrb	r1, [r7, #1]
    e2be:	4299      	cmp	r1, r3
    e2c0:	bf9c      	itt	ls
    e2c2:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    e2c4:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    e2c6:	429a      	cmp	r2, r3
{
    e2c8:	4683      	mov	fp, r0
    e2ca:	4692      	mov	sl, r2
    e2cc:	d045      	beq.n	e35a <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
    e2ce:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    e2d0:	4e29      	ldr	r6, [pc, #164]	; (e378 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    e2d2:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    e2d4:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    e2d8:	4291      	cmp	r1, r2
    e2da:	bf08      	it	eq
    e2dc:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    e2de:	18f1      	adds	r1, r6, r3

	*idx = i;
    e2e0:	702a      	strb	r2, [r5, #0]
    e2e2:	d03a      	beq.n	e35a <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
    e2e4:	5af3      	ldrh	r3, [r6, r3]
    e2e6:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    e2e8:	f04f 0800 	mov.w	r8, #0
    e2ec:	f04f 0901 	mov.w	r9, #1
    e2f0:	e022      	b.n	e338 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
    e2f2:	b37b      	cbz	r3, e354 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    e2f4:	7903      	ldrb	r3, [r0, #4]
    e2f6:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    e2fa:	3b01      	subs	r3, #1
    e2fc:	2b01      	cmp	r3, #1
    e2fe:	d931      	bls.n	e364 <tx_cmplt_get+0xb4>
    e300:	2302      	movs	r3, #2
    e302:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
    e304:	f002 fb5c 	bl	109c0 <ll_tx_mem_release>
	if (*idx >= count) {
    e308:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e30a:	7879      	ldrb	r1, [r7, #1]
    e30c:	7838      	ldrb	r0, [r7, #0]
    e30e:	4299      	cmp	r1, r3
    e310:	bf9c      	itt	ls
    e312:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    e314:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    e316:	459a      	cmp	sl, r3
    e318:	d021      	beq.n	e35e <tx_cmplt_get+0xae>
	i = *idx + 1;
    e31a:	1c5c      	adds	r4, r3, #1
    e31c:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    e31e:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    e322:	42a1      	cmp	r1, r4
    e324:	bf08      	it	eq
    e326:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    e328:	18f1      	adds	r1, r6, r3
	*idx = i;
    e32a:	702c      	strb	r4, [r5, #0]
    e32c:	d017      	beq.n	e35e <tx_cmplt_get+0xae>
    e32e:	5af0      	ldrh	r0, [r6, r3]
    e330:	f8bb 3000 	ldrh.w	r3, [fp]
    e334:	4298      	cmp	r0, r3
    e336:	d112      	bne.n	e35e <tx_cmplt_get+0xae>
		node_tx = tx->node;
    e338:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    e33a:	2801      	cmp	r0, #1
    e33c:	f020 0303 	bic.w	r3, r0, #3
    e340:	d8d7      	bhi.n	e2f2 <tx_cmplt_get+0x42>
			cmplt++;
    e342:	f108 0801 	add.w	r8, r8, #1
    e346:	fa5f f888 	uxtb.w	r8, r8
    e34a:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    e34e:	2b00      	cmp	r3, #0
    e350:	d0da      	beq.n	e308 <tx_cmplt_get+0x58>
    e352:	e7d7      	b.n	e304 <tx_cmplt_get+0x54>
    e354:	2302      	movs	r3, #2
    e356:	604b      	str	r3, [r1, #4]
    e358:	e7d6      	b.n	e308 <tx_cmplt_get+0x58>
		return 0;
    e35a:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    e35e:	4640      	mov	r0, r8
    e360:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    e364:	f108 0801 	add.w	r8, r8, #1
    e368:	fa5f f888 	uxtb.w	r8, r8
    e36c:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    e370:	e7c8      	b.n	e304 <tx_cmplt_get+0x54>
    e372:	bf00      	nop
    e374:	2000056c 	.word	0x2000056c
    e378:	20000570 	.word	0x20000570

0000e37c <rx_demux>:
{
    e37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e380:	4ca2      	ldr	r4, [pc, #648]	; (e60c <rx_demux+0x290>)
	k_sem_give(sem_recv);
    e382:	4ea3      	ldr	r6, [pc, #652]	; (e610 <rx_demux+0x294>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
    e384:	f8df b2ac 	ldr.w	fp, [pc, #684]	; e634 <rx_demux+0x2b8>
{
    e388:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e38a:	e9d4 0100 	ldrd	r0, r1, [r4]
    e38e:	aa03      	add	r2, sp, #12
    e390:	f7fd f8f6 	bl	b580 <memq_peek>
		if (link) {
    e394:	4607      	mov	r7, r0
    e396:	2800      	cmp	r0, #0
    e398:	d036      	beq.n	e408 <rx_demux+0x8c>
			LL_ASSERT(rx);
    e39a:	9b03      	ldr	r3, [sp, #12]
    e39c:	2b00      	cmp	r3, #0
    e39e:	f000 8125 	beq.w	e5ec <rx_demux+0x270>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    e3a2:	7818      	ldrb	r0, [r3, #0]
    e3a4:	aa04      	add	r2, sp, #16
    e3a6:	a902      	add	r1, sp, #8
    e3a8:	f005 ff74 	bl	14294 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    e3ac:	4605      	mov	r5, r0
    e3ae:	2800      	cmp	r0, #0
    e3b0:	d057      	beq.n	e462 <rx_demux+0xe6>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    e3b2:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    e3b6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e3ba:	f891 9000 	ldrb.w	r9, [r1]
    e3be:	9205      	str	r2, [sp, #20]
    e3c0:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    e3c4:	f10d 0814 	add.w	r8, sp, #20
    e3c8:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    e3cc:	f005 ff78 	bl	142c0 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    e3d0:	4629      	mov	r1, r5
    e3d2:	9a05      	ldr	r2, [sp, #20]
    e3d4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e3d8:	f005 ffba 	bl	14350 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    e3dc:	4628      	mov	r0, r5
    e3de:	f005 ff33 	bl	14248 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    e3e2:	4642      	mov	r2, r8
    e3e4:	4639      	mov	r1, r7
    e3e6:	4648      	mov	r0, r9
    e3e8:	f005 ff54 	bl	14294 <ull_conn_ack_by_last_peek>
	} while (link);
    e3ec:	4605      	mov	r5, r0
    e3ee:	2800      	cmp	r0, #0
    e3f0:	d1ec      	bne.n	e3cc <rx_demux+0x50>
	k_sem_give(sem_recv);
    e3f2:	6830      	ldr	r0, [r6, #0]
    e3f4:	f011 fe46 	bl	20084 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e3f8:	e9d4 0100 	ldrd	r0, r1, [r4]
    e3fc:	aa03      	add	r2, sp, #12
    e3fe:	f7fd f8bf 	bl	b580 <memq_peek>
		if (link) {
    e402:	4607      	mov	r7, r0
    e404:	2800      	cmp	r0, #0
    e406:	d1c8      	bne.n	e39a <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    e408:	aa04      	add	r2, sp, #16
    e40a:	a902      	add	r1, sp, #8
    e40c:	f10d 0007 	add.w	r0, sp, #7
    e410:	f005 ff26 	bl	14260 <ull_conn_ack_peek>
			if (link) {
    e414:	4605      	mov	r5, r0
    e416:	2800      	cmp	r0, #0
    e418:	f000 80e5 	beq.w	e5e6 <rx_demux+0x26a>
				rx_demux_conn_tx_ack(ack_last, handle,
    e41c:	9a04      	ldr	r2, [sp, #16]
    e41e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e422:	f89d 9007 	ldrb.w	r9, [sp, #7]
    e426:	9205      	str	r2, [sp, #20]
    e428:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    e42c:	f10d 0814 	add.w	r8, sp, #20
    e430:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    e434:	f005 ff44 	bl	142c0 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    e438:	4629      	mov	r1, r5
    e43a:	9a05      	ldr	r2, [sp, #20]
    e43c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e440:	f005 ff86 	bl	14350 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    e444:	4628      	mov	r0, r5
    e446:	f005 feff 	bl	14248 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    e44a:	4642      	mov	r2, r8
    e44c:	4639      	mov	r1, r7
    e44e:	4648      	mov	r0, r9
    e450:	f005 ff20 	bl	14294 <ull_conn_ack_by_last_peek>
	} while (link);
    e454:	4605      	mov	r5, r0
    e456:	2800      	cmp	r0, #0
    e458:	d1ec      	bne.n	e434 <rx_demux+0xb8>
	k_sem_give(sem_recv);
    e45a:	6830      	ldr	r0, [r6, #0]
    e45c:	f011 fe12 	bl	20084 <z_impl_k_sem_give>
			if (nack) {
    e460:	e7ca      	b.n	e3f8 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
    e462:	9b03      	ldr	r3, [sp, #12]
    e464:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    e466:	791b      	ldrb	r3, [r3, #4]
    e468:	3b01      	subs	r3, #1
    e46a:	2b13      	cmp	r3, #19
    e46c:	d80b      	bhi.n	e486 <rx_demux+0x10a>
    e46e:	e8df f003 	tbb	[pc, r3]
    e472:	2918      	.short	0x2918
    e474:	0a0a0ab4 	.word	0x0a0a0ab4
    e478:	0a0a0a0a 	.word	0x0a0a0a0a
    e47c:	0a0a0a0a 	.word	0x0a0a0a0a
    e480:	0a0a0a0a 	.word	0x0a0a0a0a
    e484:	18aa      	.short	0x18aa
		LL_ASSERT(0);
    e486:	4a63      	ldr	r2, [pc, #396]	; (e614 <rx_demux+0x298>)
    e488:	4963      	ldr	r1, [pc, #396]	; (e618 <rx_demux+0x29c>)
    e48a:	4864      	ldr	r0, [pc, #400]	; (e61c <rx_demux+0x2a0>)
    e48c:	f640 0334 	movw	r3, #2100	; 0x834
    e490:	f014 fc8d 	bl	22dae <printk>
    e494:	4040      	eors	r0, r0
    e496:	f380 8811 	msr	BASEPRI, r0
    e49a:	f04f 0003 	mov.w	r0, #3
    e49e:	df02      	svc	2
			if (nack) {
    e4a0:	e773      	b.n	e38a <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e4a2:	495a      	ldr	r1, [pc, #360]	; (e60c <rx_demux+0x290>)
    e4a4:	6860      	ldr	r0, [r4, #4]
    e4a6:	2200      	movs	r2, #0
    e4a8:	f7fd f872 	bl	b590 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e4ac:	4b5c      	ldr	r3, [pc, #368]	; (e620 <rx_demux+0x2a4>)
		ll_rx_put(link, rx);
    e4ae:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e4b0:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e4b2:	4a5c      	ldr	r2, [pc, #368]	; (e624 <rx_demux+0x2a8>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e4b4:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e4b6:	4638      	mov	r0, r7
    e4b8:	f7fd f85a 	bl	b570 <memq_enqueue>
	k_sem_give(sem_recv);
    e4bc:	6830      	ldr	r0, [r6, #0]
    e4be:	f011 fde1 	bl	20084 <z_impl_k_sem_give>
			if (nack) {
    e4c2:	e799      	b.n	e3f8 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e4c4:	4951      	ldr	r1, [pc, #324]	; (e60c <rx_demux+0x290>)
    e4c6:	6860      	ldr	r0, [r4, #4]
    e4c8:	2200      	movs	r2, #0
    e4ca:	f7fd f861 	bl	b590 <memq_dequeue>
		rx_demux_event_done(link, rx);
    e4ce:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
    e4d0:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
    e4d4:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
    e4d8:	b17b      	cbz	r3, e4fa <rx_demux+0x17e>
    e4da:	2b01      	cmp	r3, #1
    e4dc:	f000 80cb 	beq.w	e676 <rx_demux+0x2fa>
		LL_ASSERT(0);
    e4e0:	4a4c      	ldr	r2, [pc, #304]	; (e614 <rx_demux+0x298>)
    e4e2:	494d      	ldr	r1, [pc, #308]	; (e618 <rx_demux+0x29c>)
    e4e4:	484d      	ldr	r0, [pc, #308]	; (e61c <rx_demux+0x2a0>)
    e4e6:	f640 0374 	movw	r3, #2164	; 0x874
    e4ea:	f014 fc60 	bl	22dae <printk>
    e4ee:	4040      	eors	r0, r0
    e4f0:	f380 8811 	msr	BASEPRI, r0
    e4f4:	f04f 0003 	mov.w	r0, #3
    e4f8:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e4fa:	4a4b      	ldr	r2, [pc, #300]	; (e628 <rx_demux+0x2ac>)
    e4fc:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    e4fe:	f892 c001 	ldrb.w	ip, [r2, #1]
    e502:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
    e504:	1c4b      	adds	r3, r1, #1
    e506:	b2db      	uxtb	r3, r3
		last = 0U;
    e508:	459c      	cmp	ip, r3
    e50a:	bf08      	it	eq
    e50c:	2300      	moveq	r3, #0
	if (last == first) {
    e50e:	4298      	cmp	r0, r3
	done->extra.type = 0U;
    e510:	f04f 0c00 	mov.w	ip, #0
    e514:	f885 c020 	strb.w	ip, [r5, #32]
    e518:	f000 80c5 	beq.w	e6a6 <rx_demux+0x32a>
	done->hdr.link = link;
    e51c:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e51e:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e520:	fb00 2101 	mla	r1, r0, r1, r2
    e524:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
    e526:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
    e528:	4d40      	ldr	r5, [pc, #256]	; (e62c <rx_demux+0x2b0>)
    e52a:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
    e52c:	78ea      	ldrb	r2, [r5, #3]
    e52e:	f895 c000 	ldrb.w	ip, [r5]
    e532:	429a      	cmp	r2, r3
    e534:	d02a      	beq.n	e58c <rx_demux+0x210>
	return (void *)(fifo + first * size);
    e536:	f105 0a04 	add.w	sl, r5, #4
    e53a:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
    e53e:	f1bc 0f00 	cmp.w	ip, #0
    e542:	d023      	beq.n	e58c <rx_demux+0x210>
		uint8_t is_aborted = next->is_aborted;
    e544:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
    e548:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    e54a:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    e54e:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    e552:	d571      	bpl.n	e638 <rx_demux+0x2bc>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    e554:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    e556:	78ab      	ldrb	r3, [r5, #2]
    e558:	f895 c000 	ldrb.w	ip, [r5]
    e55c:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    e55e:	429a      	cmp	r2, r3
    e560:	d014      	beq.n	e58c <rx_demux+0x210>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    e562:	3301      	adds	r3, #1
    e564:	b2db      	uxtb	r3, r3
	if (_first == count) {
    e566:	4299      	cmp	r1, r3
    e568:	d07e      	beq.n	e668 <rx_demux+0x2ec>
	if (first == last) {
    e56a:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
    e56c:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    e56e:	d00d      	beq.n	e58c <rx_demux+0x210>
	return (void *)(fifo + first * size);
    e570:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    e574:	f1bc 0f00 	cmp.w	ip, #0
    e578:	d008      	beq.n	e58c <rx_demux+0x210>
    e57a:	2f00      	cmp	r7, #0
    e57c:	d1e2      	bne.n	e544 <rx_demux+0x1c8>
    e57e:	f1b8 0f00 	cmp.w	r8, #0
    e582:	d003      	beq.n	e58c <rx_demux+0x210>
    e584:	f89c 3020 	ldrb.w	r3, [ip, #32]
    e588:	07db      	lsls	r3, r3, #31
    e58a:	d5db      	bpl.n	e544 <rx_demux+0x1c8>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    e58c:	f1b9 0f00 	cmp.w	r9, #0
    e590:	f43f aefb 	beq.w	e38a <rx_demux+0xe>
	return hdr->ref;
    e594:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
    e598:	2b00      	cmp	r3, #0
    e59a:	f000 8092 	beq.w	e6c2 <rx_demux+0x346>
	return hdr->ref--;
    e59e:	f899 3000 	ldrb.w	r3, [r9]
    e5a2:	3b01      	subs	r3, #1
    e5a4:	b2db      	uxtb	r3, r3
    e5a6:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
    e5aa:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    e5ae:	2b00      	cmp	r3, #0
    e5b0:	f47f aeeb 	bne.w	e38a <rx_demux+0xe>
    e5b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e5b8:	2b00      	cmp	r3, #0
    e5ba:	f43f aee6 	beq.w	e38a <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    e5be:	f8d9 0008 	ldr.w	r0, [r9, #8]
    e5c2:	4798      	blx	r3
			if (nack) {
    e5c4:	e6e1      	b.n	e38a <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e5c6:	4911      	ldr	r1, [pc, #68]	; (e60c <rx_demux+0x290>)
    e5c8:	6860      	ldr	r0, [r4, #4]
    e5ca:	2200      	movs	r2, #0
    e5cc:	f7fc ffe0 	bl	b590 <memq_dequeue>
		ull_conn_setup(link, rx);
    e5d0:	9905      	ldr	r1, [sp, #20]
    e5d2:	4638      	mov	r0, r7
    e5d4:	f002 fd08 	bl	10fe8 <ull_conn_setup>
			if (nack) {
    e5d8:	e6d7      	b.n	e38a <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
    e5da:	a905      	add	r1, sp, #20
    e5dc:	4638      	mov	r0, r7
    e5de:	f002 fd25 	bl	1102c <ull_conn_rx>
		if (nack) {
    e5e2:	2800      	cmp	r0, #0
    e5e4:	d04b      	beq.n	e67e <rx_demux+0x302>
}
    e5e6:	b007      	add	sp, #28
    e5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    e5ec:	4a09      	ldr	r2, [pc, #36]	; (e614 <rx_demux+0x298>)
    e5ee:	4910      	ldr	r1, [pc, #64]	; (e630 <rx_demux+0x2b4>)
    e5f0:	480a      	ldr	r0, [pc, #40]	; (e61c <rx_demux+0x2a0>)
    e5f2:	f240 7333 	movw	r3, #1843	; 0x733
    e5f6:	f014 fbda 	bl	22dae <printk>
    e5fa:	4040      	eors	r0, r0
    e5fc:	f380 8811 	msr	BASEPRI, r0
    e600:	f04f 0003 	mov.w	r0, #3
    e604:	df02      	svc	2
    e606:	9b03      	ldr	r3, [sp, #12]
    e608:	e6cb      	b.n	e3a2 <rx_demux+0x26>
    e60a:	bf00      	nop
    e60c:	20002f60 	.word	0x20002f60
    e610:	20002f68 	.word	0x20002f68
    e614:	0002c824 	.word	0x0002c824
    e618:	0002c650 	.word	0x0002c650
    e61c:	0002c5e0 	.word	0x0002c5e0
    e620:	2000056c 	.word	0x2000056c
    e624:	20002f5c 	.word	0x20002f5c
    e628:	20000408 	.word	0x20000408
    e62c:	20000448 	.word	0x20000448
    e630:	0002c868 	.word	0x0002c868
    e634:	200005c0 	.word	0x200005c0
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e638:	465b      	mov	r3, fp
    e63a:	463a      	mov	r2, r7
    e63c:	4639      	mov	r1, r7
    e63e:	2001      	movs	r0, #1
			mfy.param = next;
    e640:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e644:	f7fd f808 	bl	b658 <mayfly_enqueue>
			LL_ASSERT(!ret);
    e648:	2800      	cmp	r0, #0
    e64a:	d083      	beq.n	e554 <rx_demux+0x1d8>
    e64c:	4a24      	ldr	r2, [pc, #144]	; (e6e0 <rx_demux+0x364>)
    e64e:	4925      	ldr	r1, [pc, #148]	; (e6e4 <rx_demux+0x368>)
    e650:	4825      	ldr	r0, [pc, #148]	; (e6e8 <rx_demux+0x36c>)
    e652:	f640 038c 	movw	r3, #2188	; 0x88c
    e656:	f014 fbaa 	bl	22dae <printk>
    e65a:	4040      	eors	r0, r0
    e65c:	f380 8811 	msr	BASEPRI, r0
    e660:	f04f 0003 	mov.w	r0, #3
    e664:	df02      	svc	2
    e666:	e775      	b.n	e554 <rx_demux+0x1d8>
	*first = _first; /* Write back read-index */
    e668:	2300      	movs	r3, #0
    e66a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    e66c:	2a00      	cmp	r2, #0
    e66e:	d08d      	beq.n	e58c <rx_demux+0x210>
	return (void *)(fifo + first * size);
    e670:	f8df c08c 	ldr.w	ip, [pc, #140]	; e700 <rx_demux+0x384>
    e674:	e781      	b.n	e57a <rx_demux+0x1fe>
		ull_conn_done(done);
    e676:	4628      	mov	r0, r5
    e678:	f005 fb84 	bl	13d84 <ull_conn_done>
		break;
    e67c:	e73d      	b.n	e4fa <rx_demux+0x17e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e67e:	491b      	ldr	r1, [pc, #108]	; (e6ec <rx_demux+0x370>)
    e680:	4602      	mov	r2, r0
    e682:	6860      	ldr	r0, [r4, #4]
    e684:	f7fc ff84 	bl	b590 <memq_dequeue>
		if (rx) {
    e688:	9905      	ldr	r1, [sp, #20]
    e68a:	2900      	cmp	r1, #0
    e68c:	f43f ae7d 	beq.w	e38a <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e690:	4b17      	ldr	r3, [pc, #92]	; (e6f0 <rx_demux+0x374>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e692:	4a18      	ldr	r2, [pc, #96]	; (e6f4 <rx_demux+0x378>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e694:	78db      	ldrb	r3, [r3, #3]
    e696:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e698:	4638      	mov	r0, r7
    e69a:	f7fc ff69 	bl	b570 <memq_enqueue>
	k_sem_give(sem_recv);
    e69e:	6830      	ldr	r0, [r6, #0]
    e6a0:	f011 fcf0 	bl	20084 <z_impl_k_sem_give>
			if (nack) {
    e6a4:	e671      	b.n	e38a <rx_demux+0xe>
	LL_ASSERT(release == done);
    e6a6:	4a0e      	ldr	r2, [pc, #56]	; (e6e0 <rx_demux+0x364>)
    e6a8:	4913      	ldr	r1, [pc, #76]	; (e6f8 <rx_demux+0x37c>)
    e6aa:	480f      	ldr	r0, [pc, #60]	; (e6e8 <rx_demux+0x36c>)
    e6ac:	f640 037b 	movw	r3, #2171	; 0x87b
    e6b0:	f014 fb7d 	bl	22dae <printk>
    e6b4:	4040      	eors	r0, r0
    e6b6:	f380 8811 	msr	BASEPRI, r0
    e6ba:	f04f 0003 	mov.w	r0, #3
    e6be:	df02      	svc	2
    e6c0:	e732      	b.n	e528 <rx_demux+0x1ac>
	LL_ASSERT(ull_ref_get(ull_hdr));
    e6c2:	4a07      	ldr	r2, [pc, #28]	; (e6e0 <rx_demux+0x364>)
    e6c4:	490d      	ldr	r1, [pc, #52]	; (e6fc <rx_demux+0x380>)
    e6c6:	4808      	ldr	r0, [pc, #32]	; (e6e8 <rx_demux+0x36c>)
    e6c8:	f640 039e 	movw	r3, #2206	; 0x89e
    e6cc:	f014 fb6f 	bl	22dae <printk>
    e6d0:	4040      	eors	r0, r0
    e6d2:	f380 8811 	msr	BASEPRI, r0
    e6d6:	f04f 0003 	mov.w	r0, #3
    e6da:	df02      	svc	2
    e6dc:	e75f      	b.n	e59e <rx_demux+0x222>
    e6de:	bf00      	nop
    e6e0:	0002c824 	.word	0x0002c824
    e6e4:	0002c86c 	.word	0x0002c86c
    e6e8:	0002c5e0 	.word	0x0002c5e0
    e6ec:	20002f60 	.word	0x20002f60
    e6f0:	2000056c 	.word	0x2000056c
    e6f4:	20002f5c 	.word	0x20002f5c
    e6f8:	0002c88c 	.word	0x0002c88c
    e6fc:	0002c874 	.word	0x0002c874
    e700:	2000044c 	.word	0x2000044c

0000e704 <ll_init>:
{
    e704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    e708:	4b96      	ldr	r3, [pc, #600]	; (e964 <ll_init+0x260>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e70a:	4c97      	ldr	r4, [pc, #604]	; (e968 <ll_init+0x264>)
	sem_recv = sem_rx;
    e70c:	6018      	str	r0, [r3, #0]
{
    e70e:	b086      	sub	sp, #24
	cntr_init();
    e710:	f008 fee6 	bl	174e0 <cntr_init>
	mayfly_init();
    e714:	f7fc ff4c 	bl	b5b0 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e718:	4994      	ldr	r1, [pc, #592]	; (e96c <ll_init+0x268>)
    e71a:	4895      	ldr	r0, [pc, #596]	; (e970 <ll_init+0x26c>)
    e71c:	9105      	str	r1, [sp, #20]
    e71e:	9004      	str	r0, [sp, #16]
    e720:	4994      	ldr	r1, [pc, #592]	; (e974 <ll_init+0x270>)
    e722:	4895      	ldr	r0, [pc, #596]	; (e978 <ll_init+0x274>)
    e724:	9103      	str	r1, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e726:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e728:	2203      	movs	r2, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e72a:	210b      	movs	r1, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e72c:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e72e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    e732:	9400      	str	r4, [sp, #0]
    e734:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e736:	7022      	strb	r2, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e738:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e73a:	4a90      	ldr	r2, [pc, #576]	; (e97c <ll_init+0x278>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e73c:	7425      	strb	r5, [r4, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e73e:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    e740:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e742:	f7fe f925 	bl	c990 <ticker_init>
	LL_ASSERT(!err);
    e746:	2800      	cmp	r0, #0
    e748:	f040 80dd 	bne.w	e906 <ll_init+0x202>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e74c:	2201      	movs	r2, #1
    e74e:	2100      	movs	r1, #0
    e750:	488b      	ldr	r0, [pc, #556]	; (e980 <ll_init+0x27c>)
    e752:	f01c fd41 	bl	2b1d8 <z_impl_k_sem_init>
	err = lll_init();
    e756:	f007 fa15 	bl	15b84 <lll_init>
	if (err) {
    e75a:	4604      	mov	r4, r0
    e75c:	b118      	cbz	r0, e766 <ll_init+0x62>
}
    e75e:	4620      	mov	r0, r4
    e760:	b006      	add	sp, #24
    e762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e766:	4b87      	ldr	r3, [pc, #540]	; (e984 <ll_init+0x280>)
		link = mem_acquire(&mem_link_done.free);
    e768:	f8df 8220 	ldr.w	r8, [pc, #544]	; e98c <ll_init+0x288>
    e76c:	4d86      	ldr	r5, [pc, #536]	; (e988 <ll_init+0x284>)
		rx = mem_acquire(&mem_done.free);
    e76e:	4f85      	ldr	r7, [pc, #532]	; (e984 <ll_init+0x280>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e770:	1d18      	adds	r0, r3, #4
    e772:	2203      	movs	r2, #3
    e774:	2134      	movs	r1, #52	; 0x34
    e776:	f7fc fe79 	bl	b46c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    e77a:	4643      	mov	r3, r8
    e77c:	2203      	movs	r2, #3
    e77e:	1d18      	adds	r0, r3, #4
    e780:	2108      	movs	r1, #8
    e782:	f7fc fe73 	bl	b46c <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e786:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    e788:	786a      	ldrb	r2, [r5, #1]
    e78a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e78c:	3401      	adds	r4, #1
    e78e:	b2e4      	uxtb	r4, r4
		last = 0U;
    e790:	42a2      	cmp	r2, r4
    e792:	bf08      	it	eq
    e794:	2400      	moveq	r4, #0
	if (last == first) {
    e796:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    e798:	4640      	mov	r0, r8
    e79a:	d013      	beq.n	e7c4 <ll_init+0xc0>
    e79c:	f7fc fe86 	bl	b4ac <mem_acquire>
    e7a0:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    e7a2:	4638      	mov	r0, r7
		if (!link) {
    e7a4:	b176      	cbz	r6, e7c4 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
    e7a6:	f7fc fe81 	bl	b4ac <mem_acquire>
		if (!rx) {
    e7aa:	b138      	cbz	r0, e7bc <ll_init+0xb8>
		rx->link = link;
    e7ac:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e7ae:	78ea      	ldrb	r2, [r5, #3]
    e7b0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e7b2:	fb02 5303 	mla	r3, r2, r3, r5
    e7b6:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    e7b8:	70ec      	strb	r4, [r5, #3]
}
    e7ba:	e7e5      	b.n	e788 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
    e7bc:	4973      	ldr	r1, [pc, #460]	; (e98c <ll_init+0x288>)
    e7be:	4630      	mov	r0, r6
    e7c0:	f7fc fe8a 	bl	b4d8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e7c4:	4b72      	ldr	r3, [pc, #456]	; (e990 <ll_init+0x28c>)
    e7c6:	2209      	movs	r2, #9
    e7c8:	1d18      	adds	r0, r3, #4
    e7ca:	2148      	movs	r1, #72	; 0x48
    e7cc:	f7fc fe4e 	bl	b46c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e7d0:	4b70      	ldr	r3, [pc, #448]	; (e994 <ll_init+0x290>)
    e7d2:	220b      	movs	r2, #11
    e7d4:	1d18      	adds	r0, r3, #4
    e7d6:	2108      	movs	r1, #8
    e7d8:	f7fc fe48 	bl	b46c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e7dc:	486d      	ldr	r0, [pc, #436]	; (e994 <ll_init+0x290>)
    e7de:	f7fc fe65 	bl	b4ac <mem_acquire>
	LL_ASSERT(link);
    e7e2:	4604      	mov	r4, r0
    e7e4:	2800      	cmp	r0, #0
    e7e6:	f000 80aa 	beq.w	e93e <ll_init+0x23a>
	MEMQ_INIT(ull_rx, link);
    e7ea:	4a6b      	ldr	r2, [pc, #428]	; (e998 <ll_init+0x294>)
    e7ec:	4620      	mov	r0, r4
    e7ee:	1f11      	subs	r1, r2, #4
    e7f0:	f7fc feb0 	bl	b554 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e7f4:	4867      	ldr	r0, [pc, #412]	; (e994 <ll_init+0x290>)
    e7f6:	f7fc fe59 	bl	b4ac <mem_acquire>
	LL_ASSERT(link);
    e7fa:	4604      	mov	r4, r0
    e7fc:	2800      	cmp	r0, #0
    e7fe:	f000 8090 	beq.w	e922 <ll_init+0x21e>
	MEMQ_INIT(ll_rx, link);
    e802:	4a66      	ldr	r2, [pc, #408]	; (e99c <ll_init+0x298>)
	mem_link_rx.quota_pdu = RX_CNT;
    e804:	4f66      	ldr	r7, [pc, #408]	; (e9a0 <ll_init+0x29c>)
    e806:	4d67      	ldr	r5, [pc, #412]	; (e9a4 <ll_init+0x2a0>)
		rx = mem_acquire(&mem_pdu_rx.free);
    e808:	f8df 9184 	ldr.w	r9, [pc, #388]	; e990 <ll_init+0x28c>
	MEMQ_INIT(ll_rx, link);
    e80c:	4620      	mov	r0, r4
    e80e:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    e810:	46b8      	mov	r8, r7
	MEMQ_INIT(ll_rx, link);
    e812:	f7fc fe9f 	bl	b554 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e816:	2307      	movs	r3, #7
    e818:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e81c:	78ec      	ldrb	r4, [r5, #3]
    e81e:	2606      	movs	r6, #6
	if (last == count) {
    e820:	786a      	ldrb	r2, [r5, #1]
    e822:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e824:	3401      	adds	r4, #1
    e826:	b2e4      	uxtb	r4, r4
		last = 0U;
    e828:	42a2      	cmp	r2, r4
    e82a:	bf08      	it	eq
    e82c:	2400      	moveq	r4, #0
	if (last == first) {
    e82e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e830:	4640      	mov	r0, r8
    e832:	d064      	beq.n	e8fe <ll_init+0x1fa>
    e834:	f7fc fe3a 	bl	b4ac <mem_acquire>
    e838:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e83a:	4648      	mov	r0, r9
		if (!link) {
    e83c:	f1ba 0f00 	cmp.w	sl, #0
    e840:	d041      	beq.n	e8c6 <ll_init+0x1c2>
		rx = mem_acquire(&mem_pdu_rx.free);
    e842:	f7fc fe33 	bl	b4ac <mem_acquire>
		if (!rx) {
    e846:	2800      	cmp	r0, #0
    e848:	f000 8087 	beq.w	e95a <ll_init+0x256>
		rx->link = link;
    e84c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e850:	78ea      	ldrb	r2, [r5, #3]
    e852:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e854:	fb02 5303 	mla	r3, r2, r3, r5
    e858:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e85a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    e85c:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e85e:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    e860:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e862:	b2f6      	uxtb	r6, r6
	mem_link_rx.quota_pdu += delta;
    e864:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e866:	2eff      	cmp	r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    e868:	703b      	strb	r3, [r7, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e86a:	d1d9      	bne.n	e820 <ll_init+0x11c>
	while (mem_link_rx.quota_pdu &&
    e86c:	b35b      	cbz	r3, e8c6 <ll_init+0x1c2>
    e86e:	4d4e      	ldr	r5, [pc, #312]	; (e9a8 <ll_init+0x2a4>)
		link = mem_acquire(&mem_link_rx.free);
    e870:	4e48      	ldr	r6, [pc, #288]	; (e994 <ll_init+0x290>)
    e872:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    e874:	f8df 8118 	ldr.w	r8, [pc, #280]	; e990 <ll_init+0x28c>
		link->mem = NULL;
    e878:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    e87c:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e87e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e880:	3401      	adds	r4, #1
    e882:	b2e4      	uxtb	r4, r4
		last = 0U;
    e884:	42a2      	cmp	r2, r4
    e886:	bf08      	it	eq
    e888:	2400      	moveq	r4, #0
	if (last == first) {
    e88a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e88c:	4630      	mov	r0, r6
    e88e:	d01a      	beq.n	e8c6 <ll_init+0x1c2>
    e890:	f7fc fe0c 	bl	b4ac <mem_acquire>
    e894:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e896:	4640      	mov	r0, r8
		if (!link) {
    e898:	f1ba 0f00 	cmp.w	sl, #0
    e89c:	d013      	beq.n	e8c6 <ll_init+0x1c2>
		rx = mem_acquire(&mem_pdu_rx.free);
    e89e:	f7fc fe05 	bl	b4ac <mem_acquire>
		if (!rx) {
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d059      	beq.n	e95a <ll_init+0x256>
		link->mem = NULL;
    e8a6:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    e8aa:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e8ae:	78ea      	ldrb	r2, [r5, #3]
    e8b0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e8b2:	fb02 5303 	mla	r3, r2, r3, r5
    e8b6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e8b8:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    e8ba:	70ec      	strb	r4, [r5, #3]
    e8bc:	3b01      	subs	r3, #1
    e8be:	b2db      	uxtb	r3, r3
    e8c0:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    e8c2:	2b00      	cmp	r3, #0
    e8c4:	d1da      	bne.n	e87c <ll_init+0x178>
	err = lll_adv_init();
    e8c6:	f007 fcc7 	bl	16258 <lll_adv_init>
	if (err) {
    e8ca:	4604      	mov	r4, r0
    e8cc:	2800      	cmp	r0, #0
    e8ce:	f47f af46 	bne.w	e75e <ll_init+0x5a>
	err = ull_adv_init();
    e8d2:	f001 f9af 	bl	fc34 <ull_adv_init>
	if (err) {
    e8d6:	4604      	mov	r4, r0
    e8d8:	2800      	cmp	r0, #0
    e8da:	f47f af40 	bne.w	e75e <ll_init+0x5a>
	err = lll_conn_init();
    e8de:	f008 f95b 	bl	16b98 <lll_conn_init>
	if (err) {
    e8e2:	4604      	mov	r4, r0
    e8e4:	2800      	cmp	r0, #0
    e8e6:	f47f af3a 	bne.w	e75e <ll_init+0x5a>
	err = ull_conn_init();
    e8ea:	f002 fb29 	bl	10f40 <ull_conn_init>
	if (err) {
    e8ee:	4604      	mov	r4, r0
    e8f0:	2800      	cmp	r0, #0
    e8f2:	f47f af34 	bne.w	e75e <ll_init+0x5a>
		ull_filter_reset(true);
    e8f6:	2001      	movs	r0, #1
    e8f8:	f006 fdfe 	bl	154f8 <ull_filter_reset>
	return  0;
    e8fc:	e72f      	b.n	e75e <ll_init+0x5a>
	if (!max) {
    e8fe:	2e00      	cmp	r6, #0
    e900:	d0e1      	beq.n	e8c6 <ll_init+0x1c2>
    e902:	783b      	ldrb	r3, [r7, #0]
    e904:	e7b2      	b.n	e86c <ll_init+0x168>
	LL_ASSERT(!err);
    e906:	4a29      	ldr	r2, [pc, #164]	; (e9ac <ll_init+0x2a8>)
    e908:	4929      	ldr	r1, [pc, #164]	; (e9b0 <ll_init+0x2ac>)
    e90a:	482a      	ldr	r0, [pc, #168]	; (e9b4 <ll_init+0x2b0>)
    e90c:	f44f 73b8 	mov.w	r3, #368	; 0x170
    e910:	f014 fa4d 	bl	22dae <printk>
    e914:	4040      	eors	r0, r0
    e916:	f380 8811 	msr	BASEPRI, r0
    e91a:	f04f 0003 	mov.w	r0, #3
    e91e:	df02      	svc	2
    e920:	e714      	b.n	e74c <ll_init+0x48>
	LL_ASSERT(link);
    e922:	4a22      	ldr	r2, [pc, #136]	; (e9ac <ll_init+0x2a8>)
    e924:	4924      	ldr	r1, [pc, #144]	; (e9b8 <ll_init+0x2b4>)
    e926:	4823      	ldr	r0, [pc, #140]	; (e9b4 <ll_init+0x2b0>)
    e928:	f240 636a 	movw	r3, #1642	; 0x66a
    e92c:	f014 fa3f 	bl	22dae <printk>
    e930:	4040      	eors	r0, r0
    e932:	f380 8811 	msr	BASEPRI, r0
    e936:	f04f 0003 	mov.w	r0, #3
    e93a:	df02      	svc	2
    e93c:	e761      	b.n	e802 <ll_init+0xfe>
	LL_ASSERT(link);
    e93e:	4a1b      	ldr	r2, [pc, #108]	; (e9ac <ll_init+0x2a8>)
    e940:	491d      	ldr	r1, [pc, #116]	; (e9b8 <ll_init+0x2b4>)
    e942:	481c      	ldr	r0, [pc, #112]	; (e9b4 <ll_init+0x2b0>)
    e944:	f240 6363 	movw	r3, #1635	; 0x663
    e948:	f014 fa31 	bl	22dae <printk>
    e94c:	4040      	eors	r0, r0
    e94e:	f380 8811 	msr	BASEPRI, r0
    e952:	f04f 0003 	mov.w	r0, #3
    e956:	df02      	svc	2
    e958:	e747      	b.n	e7ea <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
    e95a:	490e      	ldr	r1, [pc, #56]	; (e994 <ll_init+0x290>)
    e95c:	4650      	mov	r0, sl
    e95e:	f7fc fdbb 	bl	b4d8 <mem_release>
			return;
    e962:	e7b0      	b.n	e8c6 <ll_init+0x1c2>
    e964:	20002f68 	.word	0x20002f68
    e968:	20003280 	.word	0x20003280
    e96c:	000180d1 	.word	0x000180d1
    e970:	00017ff1 	.word	0x00017ff1
    e974:	00017f8d 	.word	0x00017f8d
    e978:	20003044 	.word	0x20003044
    e97c:	20002f84 	.word	0x20002f84
    e980:	20002f6c 	.word	0x20002f6c
    e984:	20002bb0 	.word	0x20002bb0
    e988:	20000408 	.word	0x20000408
    e98c:	20002c50 	.word	0x20002c50
    e990:	20002ccc 	.word	0x20002ccc
    e994:	20002c70 	.word	0x20002c70
    e998:	20002f64 	.word	0x20002f64
    e99c:	20002f5c 	.word	0x20002f5c
    e9a0:	20002c6c 	.word	0x20002c6c
    e9a4:	20000430 	.word	0x20000430
    e9a8:	2000041c 	.word	0x2000041c
    e9ac:	0002c824 	.word	0x0002c824
    e9b0:	0002c860 	.word	0x0002c860
    e9b4:	0002c5e0 	.word	0x0002c5e0
    e9b8:	0002caf4 	.word	0x0002caf4

0000e9bc <ll_reset>:
{
    e9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9c0:	b087      	sub	sp, #28
	err = ull_adv_reset();
    e9c2:	f001 f945 	bl	fc50 <ull_adv_reset>
	LL_ASSERT(!err);
    e9c6:	2800      	cmp	r0, #0
    e9c8:	f040 8116 	bne.w	ebf8 <ll_reset+0x23c>
	err = ull_conn_reset();
    e9cc:	f002 faba 	bl	10f44 <ull_conn_reset>
	LL_ASSERT(!err);
    e9d0:	2800      	cmp	r0, #0
    e9d2:	f040 8103 	bne.w	ebdc <ll_reset+0x220>
	MFIFO_INIT(tx_ack);
    e9d6:	4ba2      	ldr	r3, [pc, #648]	; (ec60 <ll_reset+0x2a4>)
	MFIFO_INIT(done);
    e9d8:	4ea2      	ldr	r6, [pc, #648]	; (ec64 <ll_reset+0x2a8>)
	MFIFO_INIT(pdu_rx_free);
    e9da:	4da3      	ldr	r5, [pc, #652]	; (ec68 <ll_reset+0x2ac>)
	MFIFO_INIT(ll_pdu_rx_free);
    e9dc:	4fa3      	ldr	r7, [pc, #652]	; (ec6c <ll_reset+0x2b0>)
	MFIFO_INIT(tx_ack);
    e9de:	2400      	movs	r4, #0
    e9e0:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    e9e2:	4620      	mov	r0, r4
    e9e4:	f006 fd88 	bl	154f8 <ull_filter_reset>
	MFIFO_INIT(prep);
    e9e8:	4ba1      	ldr	r3, [pc, #644]	; (ec70 <ll_reset+0x2b4>)
	MFIFO_INIT(done);
    e9ea:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
    e9ec:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    e9ee:	806c      	strh	r4, [r5, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    e9f0:	807c      	strh	r4, [r7, #2]
    e9f2:	2201      	movs	r2, #1
    e9f4:	4621      	mov	r1, r4
    e9f6:	4668      	mov	r0, sp
    e9f8:	f01c fbee 	bl	2b1d8 <z_impl_k_sem_init>
		mfy.param = &sem;
    e9fc:	4b9d      	ldr	r3, [pc, #628]	; (ec74 <ll_reset+0x2b8>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    e9fe:	4622      	mov	r2, r4
    ea00:	4621      	mov	r1, r4
    ea02:	2003      	movs	r0, #3
		mfy.param = &sem;
    ea04:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    ea08:	f7fc fe26 	bl	b658 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ea0c:	2800      	cmp	r0, #0
    ea0e:	f040 80d7 	bne.w	ebc0 <ll_reset+0x204>
	return z_impl_k_sem_take(sem, timeout);
    ea12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ea16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ea1a:	4668      	mov	r0, sp
    ea1c:	f011 fb58 	bl	200d0 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    ea20:	f001 f9b2 	bl	fd88 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    ea24:	2800      	cmp	r0, #0
    ea26:	f040 80bd 	bne.w	eba4 <ll_reset+0x1e8>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    ea2a:	4b93      	ldr	r3, [pc, #588]	; (ec78 <ll_reset+0x2bc>)
		link = mem_acquire(&mem_link_done.free);
    ea2c:	f8df 924c 	ldr.w	r9, [pc, #588]	; ec7c <ll_reset+0x2c0>
		rx = mem_acquire(&mem_done.free);
    ea30:	f8df 8244 	ldr.w	r8, [pc, #580]	; ec78 <ll_reset+0x2bc>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    ea34:	1d18      	adds	r0, r3, #4
    ea36:	2203      	movs	r2, #3
    ea38:	2134      	movs	r1, #52	; 0x34
    ea3a:	f7fc fd17 	bl	b46c <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    ea3e:	464b      	mov	r3, r9
    ea40:	2203      	movs	r2, #3
    ea42:	1d18      	adds	r0, r3, #4
    ea44:	2108      	movs	r1, #8
    ea46:	f7fc fd11 	bl	b46c <mem_init>
static inline void done_alloc(void)
    ea4a:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    ea4c:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    ea4e:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    ea50:	3401      	adds	r4, #1
    ea52:	b2e4      	uxtb	r4, r4
		last = 0U;
    ea54:	42a2      	cmp	r2, r4
    ea56:	bf08      	it	eq
    ea58:	2400      	moveq	r4, #0
	if (last == first) {
    ea5a:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    ea5c:	4648      	mov	r0, r9
    ea5e:	d016      	beq.n	ea8e <ll_reset+0xd2>
    ea60:	f7fc fd24 	bl	b4ac <mem_acquire>
    ea64:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
    ea66:	4640      	mov	r0, r8
		if (!link) {
    ea68:	f1ba 0f00 	cmp.w	sl, #0
    ea6c:	d00f      	beq.n	ea8e <ll_reset+0xd2>
		rx = mem_acquire(&mem_done.free);
    ea6e:	f7fc fd1d 	bl	b4ac <mem_acquire>
		if (!rx) {
    ea72:	b140      	cbz	r0, ea86 <ll_reset+0xca>
		rx->link = link;
    ea74:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ea78:	78f2      	ldrb	r2, [r6, #3]
    ea7a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ea7c:	fb02 6303 	mla	r3, r2, r3, r6
    ea80:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    ea82:	70f4      	strb	r4, [r6, #3]
}
    ea84:	e7e2      	b.n	ea4c <ll_reset+0x90>
			mem_release(link, &mem_link_done.free);
    ea86:	497d      	ldr	r1, [pc, #500]	; (ec7c <ll_reset+0x2c0>)
    ea88:	4650      	mov	r0, sl
    ea8a:	f7fc fd25 	bl	b4d8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    ea8e:	4b7c      	ldr	r3, [pc, #496]	; (ec80 <ll_reset+0x2c4>)
    ea90:	2209      	movs	r2, #9
    ea92:	1d18      	adds	r0, r3, #4
    ea94:	2148      	movs	r1, #72	; 0x48
    ea96:	f7fc fce9 	bl	b46c <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    ea9a:	4b7a      	ldr	r3, [pc, #488]	; (ec84 <ll_reset+0x2c8>)
    ea9c:	220b      	movs	r2, #11
    ea9e:	1d18      	adds	r0, r3, #4
    eaa0:	2108      	movs	r1, #8
    eaa2:	f7fc fce3 	bl	b46c <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    eaa6:	4877      	ldr	r0, [pc, #476]	; (ec84 <ll_reset+0x2c8>)
    eaa8:	f7fc fd00 	bl	b4ac <mem_acquire>
	LL_ASSERT(link);
    eaac:	4604      	mov	r4, r0
    eaae:	2800      	cmp	r0, #0
    eab0:	f000 80be 	beq.w	ec30 <ll_reset+0x274>
	MEMQ_INIT(ull_rx, link);
    eab4:	4a74      	ldr	r2, [pc, #464]	; (ec88 <ll_reset+0x2cc>)
    eab6:	4620      	mov	r0, r4
    eab8:	1f11      	subs	r1, r2, #4
    eaba:	f7fc fd4b 	bl	b554 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    eabe:	4871      	ldr	r0, [pc, #452]	; (ec84 <ll_reset+0x2c8>)
    eac0:	f7fc fcf4 	bl	b4ac <mem_acquire>
	LL_ASSERT(link);
    eac4:	4604      	mov	r4, r0
    eac6:	2800      	cmp	r0, #0
    eac8:	f000 80a4 	beq.w	ec14 <ll_reset+0x258>
	MEMQ_INIT(ll_rx, link);
    eacc:	4a6f      	ldr	r2, [pc, #444]	; (ec8c <ll_reset+0x2d0>)
	mem_link_rx.quota_pdu = RX_CNT;
    eace:	4e70      	ldr	r6, [pc, #448]	; (ec90 <ll_reset+0x2d4>)
		rx = mem_acquire(&mem_pdu_rx.free);
    ead0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; ec80 <ll_reset+0x2c4>
	MEMQ_INIT(ll_rx, link);
    ead4:	4620      	mov	r0, r4
    ead6:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    ead8:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
    eada:	f7fc fd3b 	bl	b554 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    eade:	2307      	movs	r3, #7
    eae0:	f808 3b04 	strb.w	r3, [r8], #4
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eae4:	78ec      	ldrb	r4, [r5, #3]
    eae6:	f04f 0a06 	mov.w	sl, #6
	if (last == count) {
    eaea:	786a      	ldrb	r2, [r5, #1]
    eaec:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    eaee:	3401      	adds	r4, #1
    eaf0:	b2e4      	uxtb	r4, r4
		last = 0U;
    eaf2:	42a2      	cmp	r2, r4
    eaf4:	bf08      	it	eq
    eaf6:	2400      	moveq	r4, #0
	if (last == first) {
    eaf8:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    eafa:	4640      	mov	r0, r8
    eafc:	d04d      	beq.n	eb9a <ll_reset+0x1de>
    eafe:	f7fc fcd5 	bl	b4ac <mem_acquire>
    eb02:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    eb04:	4648      	mov	r0, r9
		if (!link) {
    eb06:	f1bb 0f00 	cmp.w	fp, #0
    eb0a:	d043      	beq.n	eb94 <ll_reset+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
    eb0c:	f7fc fcce 	bl	b4ac <mem_acquire>
		if (!rx) {
    eb10:	2800      	cmp	r0, #0
    eb12:	f000 809b 	beq.w	ec4c <ll_reset+0x290>
		rx->link = link;
    eb16:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    eb1a:	78ea      	ldrb	r2, [r5, #3]
    eb1c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    eb1e:	fb02 5303 	mla	r3, r2, r3, r5
    eb22:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    eb24:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    eb26:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb28:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
    eb2c:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb2e:	fa5f fa8a 	uxtb.w	sl, sl
	mem_link_rx.quota_pdu += delta;
    eb32:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb34:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    eb38:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    eb3a:	d1d6      	bne.n	eaea <ll_reset+0x12e>
	while (mem_link_rx.quota_pdu &&
    eb3c:	b353      	cbz	r3, eb94 <ll_reset+0x1d8>
    eb3e:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
    eb40:	f8df 9140 	ldr.w	r9, [pc, #320]	; ec84 <ll_reset+0x2c8>
		rx = mem_acquire(&mem_pdu_rx.free);
    eb44:	f8df 8138 	ldr.w	r8, [pc, #312]	; ec80 <ll_reset+0x2c4>
		link->mem = NULL;
    eb48:	2500      	movs	r5, #0
	if (last == count) {
    eb4a:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    eb4c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    eb4e:	3401      	adds	r4, #1
    eb50:	b2e4      	uxtb	r4, r4
		last = 0U;
    eb52:	42a2      	cmp	r2, r4
    eb54:	bf08      	it	eq
    eb56:	2400      	moveq	r4, #0
	if (last == first) {
    eb58:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    eb5a:	4648      	mov	r0, r9
    eb5c:	d01a      	beq.n	eb94 <ll_reset+0x1d8>
    eb5e:	f7fc fca5 	bl	b4ac <mem_acquire>
    eb62:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    eb64:	4640      	mov	r0, r8
		if (!link) {
    eb66:	f1ba 0f00 	cmp.w	sl, #0
    eb6a:	d013      	beq.n	eb94 <ll_reset+0x1d8>
		rx = mem_acquire(&mem_pdu_rx.free);
    eb6c:	f7fc fc9e 	bl	b4ac <mem_acquire>
		if (!rx) {
    eb70:	2800      	cmp	r0, #0
    eb72:	d070      	beq.n	ec56 <ll_reset+0x29a>
		link->mem = NULL;
    eb74:	f8ca 5004 	str.w	r5, [sl, #4]
		rx->link = link;
    eb78:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    eb7c:	78fa      	ldrb	r2, [r7, #3]
    eb7e:	783b      	ldrb	r3, [r7, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    eb80:	fb02 7303 	mla	r3, r2, r3, r7
    eb84:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    eb86:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    eb88:	70fc      	strb	r4, [r7, #3]
    eb8a:	3b01      	subs	r3, #1
    eb8c:	b2db      	uxtb	r3, r3
    eb8e:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    eb90:	2b00      	cmp	r3, #0
    eb92:	d1da      	bne.n	eb4a <ll_reset+0x18e>
}
    eb94:	b007      	add	sp, #28
    eb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!max) {
    eb9a:	f1ba 0f00 	cmp.w	sl, #0
    eb9e:	d0f9      	beq.n	eb94 <ll_reset+0x1d8>
    eba0:	7833      	ldrb	r3, [r6, #0]
    eba2:	e7cb      	b.n	eb3c <ll_reset+0x180>
	LL_ASSERT(!err);
    eba4:	4a3b      	ldr	r2, [pc, #236]	; (ec94 <ll_reset+0x2d8>)
    eba6:	493c      	ldr	r1, [pc, #240]	; (ec98 <ll_reset+0x2dc>)
    eba8:	483c      	ldr	r0, [pc, #240]	; (ec9c <ll_reset+0x2e0>)
    ebaa:	f240 237b 	movw	r3, #635	; 0x27b
    ebae:	f014 f8fe 	bl	22dae <printk>
    ebb2:	4040      	eors	r0, r0
    ebb4:	f380 8811 	msr	BASEPRI, r0
    ebb8:	f04f 0003 	mov.w	r0, #3
    ebbc:	df02      	svc	2
    ebbe:	e734      	b.n	ea2a <ll_reset+0x6e>
		LL_ASSERT(!retval);
    ebc0:	4a34      	ldr	r2, [pc, #208]	; (ec94 <ll_reset+0x2d8>)
    ebc2:	4937      	ldr	r1, [pc, #220]	; (eca0 <ll_reset+0x2e4>)
    ebc4:	4835      	ldr	r0, [pc, #212]	; (ec9c <ll_reset+0x2e0>)
    ebc6:	f240 236e 	movw	r3, #622	; 0x26e
    ebca:	f014 f8f0 	bl	22dae <printk>
    ebce:	4040      	eors	r0, r0
    ebd0:	f380 8811 	msr	BASEPRI, r0
    ebd4:	f04f 0003 	mov.w	r0, #3
    ebd8:	df02      	svc	2
    ebda:	e71a      	b.n	ea12 <ll_reset+0x56>
	LL_ASSERT(!err);
    ebdc:	4a2d      	ldr	r2, [pc, #180]	; (ec94 <ll_reset+0x2d8>)
    ebde:	492e      	ldr	r1, [pc, #184]	; (ec98 <ll_reset+0x2dc>)
    ebe0:	482e      	ldr	r0, [pc, #184]	; (ec9c <ll_reset+0x2e0>)
    ebe2:	f44f 730f 	mov.w	r3, #572	; 0x23c
    ebe6:	f014 f8e2 	bl	22dae <printk>
    ebea:	4040      	eors	r0, r0
    ebec:	f380 8811 	msr	BASEPRI, r0
    ebf0:	f04f 0003 	mov.w	r0, #3
    ebf4:	df02      	svc	2
    ebf6:	e6ee      	b.n	e9d6 <ll_reset+0x1a>
	LL_ASSERT(!err);
    ebf8:	4a26      	ldr	r2, [pc, #152]	; (ec94 <ll_reset+0x2d8>)
    ebfa:	4927      	ldr	r1, [pc, #156]	; (ec98 <ll_reset+0x2dc>)
    ebfc:	4827      	ldr	r0, [pc, #156]	; (ec9c <ll_reset+0x2e0>)
    ebfe:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
    ec02:	f014 f8d4 	bl	22dae <printk>
    ec06:	4040      	eors	r0, r0
    ec08:	f380 8811 	msr	BASEPRI, r0
    ec0c:	f04f 0003 	mov.w	r0, #3
    ec10:	df02      	svc	2
    ec12:	e6db      	b.n	e9cc <ll_reset+0x10>
	LL_ASSERT(link);
    ec14:	4a1f      	ldr	r2, [pc, #124]	; (ec94 <ll_reset+0x2d8>)
    ec16:	4923      	ldr	r1, [pc, #140]	; (eca4 <ll_reset+0x2e8>)
    ec18:	4820      	ldr	r0, [pc, #128]	; (ec9c <ll_reset+0x2e0>)
    ec1a:	f240 636a 	movw	r3, #1642	; 0x66a
    ec1e:	f014 f8c6 	bl	22dae <printk>
    ec22:	4040      	eors	r0, r0
    ec24:	f380 8811 	msr	BASEPRI, r0
    ec28:	f04f 0003 	mov.w	r0, #3
    ec2c:	df02      	svc	2
    ec2e:	e74d      	b.n	eacc <ll_reset+0x110>
	LL_ASSERT(link);
    ec30:	4a18      	ldr	r2, [pc, #96]	; (ec94 <ll_reset+0x2d8>)
    ec32:	491c      	ldr	r1, [pc, #112]	; (eca4 <ll_reset+0x2e8>)
    ec34:	4819      	ldr	r0, [pc, #100]	; (ec9c <ll_reset+0x2e0>)
    ec36:	f240 6363 	movw	r3, #1635	; 0x663
    ec3a:	f014 f8b8 	bl	22dae <printk>
    ec3e:	4040      	eors	r0, r0
    ec40:	f380 8811 	msr	BASEPRI, r0
    ec44:	f04f 0003 	mov.w	r0, #3
    ec48:	df02      	svc	2
    ec4a:	e733      	b.n	eab4 <ll_reset+0xf8>
			mem_release(link, &mem_link_rx.free);
    ec4c:	490d      	ldr	r1, [pc, #52]	; (ec84 <ll_reset+0x2c8>)
    ec4e:	4658      	mov	r0, fp
    ec50:	f7fc fc42 	bl	b4d8 <mem_release>
			return;
    ec54:	e79e      	b.n	eb94 <ll_reset+0x1d8>
			mem_release(link, &mem_link_rx.free);
    ec56:	490b      	ldr	r1, [pc, #44]	; (ec84 <ll_reset+0x2c8>)
    ec58:	4650      	mov	r0, sl
    ec5a:	f7fc fc3d 	bl	b4d8 <mem_release>
			return;
    ec5e:	e799      	b.n	eb94 <ll_reset+0x1d8>
    ec60:	2000056c 	.word	0x2000056c
    ec64:	20000408 	.word	0x20000408
    ec68:	20000430 	.word	0x20000430
    ec6c:	2000041c 	.word	0x2000041c
    ec70:	20000448 	.word	0x20000448
    ec74:	20000590 	.word	0x20000590
    ec78:	20002bb0 	.word	0x20002bb0
    ec7c:	20002c50 	.word	0x20002c50
    ec80:	20002ccc 	.word	0x20002ccc
    ec84:	20002c70 	.word	0x20002c70
    ec88:	20002f64 	.word	0x20002f64
    ec8c:	20002f5c 	.word	0x20002f5c
    ec90:	20002c6c 	.word	0x20002c6c
    ec94:	0002c824 	.word	0x0002c824
    ec98:	0002c860 	.word	0x0002c860
    ec9c:	0002c5e0 	.word	0x0002c5e0
    eca0:	0002c89c 	.word	0x0002c89c
    eca4:	0002caf4 	.word	0x0002caf4

0000eca8 <ll_rx_get>:
{
    eca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ecac:	b085      	sub	sp, #20
    ecae:	e9cd 0100 	strd	r0, r1, [sp]
    ecb2:	4c67      	ldr	r4, [pc, #412]	; (ee50 <ll_rx_get+0x1a8>)
				mem_release(link, &mem_link_rx.free);
    ecb4:	4d67      	ldr	r5, [pc, #412]	; (ee54 <ll_rx_get+0x1ac>)
    ecb6:	4e68      	ldr	r6, [pc, #416]	; (ee58 <ll_rx_get+0x1b0>)
	*node_rx = NULL;
    ecb8:	9a00      	ldr	r2, [sp, #0]
    ecba:	2300      	movs	r3, #0
    ecbc:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    ecbe:	e9d6 0100 	ldrd	r0, r1, [r6]
    ecc2:	aa03      	add	r2, sp, #12
    ecc4:	f7fc fc5c 	bl	b580 <memq_peek>
	if (link) {
    ecc8:	4680      	mov	r8, r0
    ecca:	2800      	cmp	r0, #0
    eccc:	f000 80b6 	beq.w	ee3c <ll_rx_get+0x194>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ecd0:	9b03      	ldr	r3, [sp, #12]
    ecd2:	4962      	ldr	r1, [pc, #392]	; (ee5c <ll_rx_get+0x1b4>)
    ecd4:	781a      	ldrb	r2, [r3, #0]
    ecd6:	9801      	ldr	r0, [sp, #4]
    ecd8:	f7ff faea 	bl	e2b0 <tx_cmplt_get>
		if (!cmplt) {
    ecdc:	4603      	mov	r3, r0
    ecde:	2800      	cmp	r0, #0
    ece0:	f040 80a3 	bne.w	ee2a <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
    ece4:	78a2      	ldrb	r2, [r4, #2]
    ece6:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    ecea:	78e2      	ldrb	r2, [r4, #3]
    ecec:	f10d 0109 	add.w	r1, sp, #9
    ecf0:	f10d 000a 	add.w	r0, sp, #10
    ecf4:	461f      	mov	r7, r3
    ecf6:	f7ff fadb 	bl	e2b0 <tx_cmplt_get>
    ecfa:	ea47 0200 	orr.w	r2, r7, r0
			} while ((cmplt_prev != 0U) ||
    ecfe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    ed02:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    ed04:	d1f1      	bne.n	ecea <ll_rx_get+0x42>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
    ed06:	9b03      	ldr	r3, [sp, #12]
    ed08:	7919      	ldrb	r1, [r3, #4]
    ed0a:	2901      	cmp	r1, #1
    ed0c:	f040 808a 	bne.w	ee24 <ll_rx_get+0x17c>
				(void)memq_dequeue(memq_ll_rx.tail,
    ed10:	4951      	ldr	r1, [pc, #324]	; (ee58 <ll_rx_get+0x1b0>)
    ed12:	6870      	ldr	r0, [r6, #4]
    ed14:	f7fc fc3c 	bl	b590 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    ed18:	4951      	ldr	r1, [pc, #324]	; (ee60 <ll_rx_get+0x1b8>)
    ed1a:	4640      	mov	r0, r8
    ed1c:	f7fc fbdc 	bl	b4d8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ed20:	782b      	ldrb	r3, [r5, #0]
    ed22:	2b06      	cmp	r3, #6
    ed24:	d86f      	bhi.n	ee06 <ll_rx_get+0x15e>
	mem_link_rx.quota_pdu += delta;
    ed26:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    ed28:	494e      	ldr	r1, [pc, #312]	; (ee64 <ll_rx_get+0x1bc>)
    ed2a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    ed2c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    ed2e:	f7fc fbd3 	bl	b4d8 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ed32:	782b      	ldrb	r3, [r5, #0]
    ed34:	2b00      	cmp	r3, #0
    ed36:	d0bf      	beq.n	ecb8 <ll_rx_get+0x10>
    ed38:	f8df 8138 	ldr.w	r8, [pc, #312]	; ee74 <ll_rx_get+0x1cc>
	last = last + 1;
    ed3c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    ed40:	f898 2001 	ldrb.w	r2, [r8, #1]
    ed44:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    ed48:	3701      	adds	r7, #1
    ed4a:	b2ff      	uxtb	r7, r7
		last = 0U;
    ed4c:	42ba      	cmp	r2, r7
    ed4e:	bf08      	it	eq
    ed50:	2700      	moveq	r7, #0
	if (last == first) {
    ed52:	429f      	cmp	r7, r3
    ed54:	d0b0      	beq.n	ecb8 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
    ed56:	4842      	ldr	r0, [pc, #264]	; (ee60 <ll_rx_get+0x1b8>)
    ed58:	f7fc fba8 	bl	b4ac <mem_acquire>
		if (!link) {
    ed5c:	4682      	mov	sl, r0
    ed5e:	2800      	cmp	r0, #0
    ed60:	d0aa      	beq.n	ecb8 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    ed62:	4840      	ldr	r0, [pc, #256]	; (ee64 <ll_rx_get+0x1bc>)
    ed64:	f7fc fba2 	bl	b4ac <mem_acquire>
		if (!rx) {
    ed68:	2800      	cmp	r0, #0
    ed6a:	d062      	beq.n	ee32 <ll_rx_get+0x18a>
		rx->link = link;
    ed6c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ed70:	f898 2003 	ldrb.w	r2, [r8, #3]
    ed74:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ed78:	fb02 8303 	mla	r3, r2, r3, r8
    ed7c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    ed7e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    ed80:	f888 7003 	strb.w	r7, [r8, #3]
    ed84:	3b01      	subs	r3, #1
    ed86:	b2db      	uxtb	r3, r3
    ed88:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    ed8a:	2b00      	cmp	r3, #0
    ed8c:	d094      	beq.n	ecb8 <ll_rx_get+0x10>
    ed8e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; ee78 <ll_rx_get+0x1d0>
		link = mem_acquire(&mem_link_rx.free);
    ed92:	f8df 80cc 	ldr.w	r8, [pc, #204]	; ee60 <ll_rx_get+0x1b8>
    ed96:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    ed9a:	f8df b0c8 	ldr.w	fp, [pc, #200]	; ee64 <ll_rx_get+0x1bc>
    ed9e:	e014      	b.n	edca <ll_rx_get+0x122>
		link->mem = NULL;
    eda0:	2300      	movs	r3, #0
    eda2:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
    eda6:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    edaa:	f89a 2003 	ldrb.w	r2, [sl, #3]
    edae:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    edb2:	fb02 a303 	mla	r3, r2, r3, sl
    edb6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    edb8:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    edba:	f88a 7003 	strb.w	r7, [sl, #3]
    edbe:	3b01      	subs	r3, #1
    edc0:	b2db      	uxtb	r3, r3
    edc2:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    edc4:	2b00      	cmp	r3, #0
    edc6:	f43f af77 	beq.w	ecb8 <ll_rx_get+0x10>
	if (last == count) {
    edca:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    edce:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
    edd2:	3701      	adds	r7, #1
    edd4:	b2ff      	uxtb	r7, r7
		last = 0U;
    edd6:	42ba      	cmp	r2, r7
    edd8:	bf08      	it	eq
    edda:	2700      	moveq	r7, #0
	if (last == first) {
    eddc:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    edde:	4640      	mov	r0, r8
    ede0:	f43f af6a 	beq.w	ecb8 <ll_rx_get+0x10>
    ede4:	f7fc fb62 	bl	b4ac <mem_acquire>
    ede8:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    edea:	4658      	mov	r0, fp
		if (!link) {
    edec:	f1b9 0f00 	cmp.w	r9, #0
    edf0:	f43f af62 	beq.w	ecb8 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    edf4:	f7fc fb5a 	bl	b4ac <mem_acquire>
		if (!rx) {
    edf8:	2800      	cmp	r0, #0
    edfa:	d1d1      	bne.n	eda0 <ll_rx_get+0xf8>
			mem_release(link, &mem_link_rx.free);
    edfc:	4918      	ldr	r1, [pc, #96]	; (ee60 <ll_rx_get+0x1b8>)
    edfe:	4648      	mov	r0, r9
    ee00:	f7fc fb6a 	bl	b4d8 <mem_release>
			return;
    ee04:	e758      	b.n	ecb8 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ee06:	4a18      	ldr	r2, [pc, #96]	; (ee68 <ll_rx_get+0x1c0>)
    ee08:	4918      	ldr	r1, [pc, #96]	; (ee6c <ll_rx_get+0x1c4>)
    ee0a:	4819      	ldr	r0, [pc, #100]	; (ee70 <ll_rx_get+0x1c8>)
    ee0c:	f240 43ac 	movw	r3, #1196	; 0x4ac
    ee10:	f013 ffcd 	bl	22dae <printk>
    ee14:	4040      	eors	r0, r0
    ee16:	f380 8811 	msr	BASEPRI, r0
    ee1a:	f04f 0003 	mov.w	r0, #3
    ee1e:	df02      	svc	2
    ee20:	782b      	ldrb	r3, [r5, #0]
    ee22:	e780      	b.n	ed26 <ll_rx_get+0x7e>
			*node_rx = rx;
    ee24:	9900      	ldr	r1, [sp, #0]
    ee26:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ee28:	4613      	mov	r3, r2
}
    ee2a:	4618      	mov	r0, r3
    ee2c:	b005      	add	sp, #20
    ee2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    ee32:	490b      	ldr	r1, [pc, #44]	; (ee60 <ll_rx_get+0x1b8>)
    ee34:	4650      	mov	r0, sl
    ee36:	f7fc fb4f 	bl	b4d8 <mem_release>
			return;
    ee3a:	e73d      	b.n	ecb8 <ll_rx_get+0x10>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    ee3c:	78e2      	ldrb	r2, [r4, #3]
    ee3e:	4907      	ldr	r1, [pc, #28]	; (ee5c <ll_rx_get+0x1b4>)
    ee40:	9801      	ldr	r0, [sp, #4]
    ee42:	f7ff fa35 	bl	e2b0 <tx_cmplt_get>
    ee46:	4603      	mov	r3, r0
}
    ee48:	4618      	mov	r0, r3
    ee4a:	b005      	add	sp, #20
    ee4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee50:	2000056c 	.word	0x2000056c
    ee54:	20002c6c 	.word	0x20002c6c
    ee58:	20002f58 	.word	0x20002f58
    ee5c:	2000056e 	.word	0x2000056e
    ee60:	20002c70 	.word	0x20002c70
    ee64:	20002ccc 	.word	0x20002ccc
    ee68:	0002c824 	.word	0x0002c824
    ee6c:	0002c8a4 	.word	0x0002c8a4
    ee70:	0002c5e0 	.word	0x0002c5e0
    ee74:	20000430 	.word	0x20000430
    ee78:	2000041c 	.word	0x2000041c

0000ee7c <ll_rx_dequeue>:
{
    ee7c:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    ee7e:	495c      	ldr	r1, [pc, #368]	; (eff0 <ll_rx_dequeue+0x174>)
{
    ee80:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    ee82:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    ee84:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    ee86:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    ee88:	aa01      	add	r2, sp, #4
    ee8a:	f7fc fb81 	bl	b590 <memq_dequeue>
	LL_ASSERT(link);
    ee8e:	4604      	mov	r4, r0
    ee90:	2800      	cmp	r0, #0
    ee92:	d061      	beq.n	ef58 <ll_rx_dequeue+0xdc>
	mem_release(link, &mem_link_rx.free);
    ee94:	4957      	ldr	r1, [pc, #348]	; (eff4 <ll_rx_dequeue+0x178>)
    ee96:	4620      	mov	r0, r4
    ee98:	f7fc fb1e 	bl	b4d8 <mem_release>
	switch (rx->type) {
    ee9c:	9a01      	ldr	r2, [sp, #4]
    ee9e:	7913      	ldrb	r3, [r2, #4]
    eea0:	2b19      	cmp	r3, #25
    eea2:	d80e      	bhi.n	eec2 <ll_rx_dequeue+0x46>
    eea4:	e8df f003 	tbb	[pc, r3]
    eea8:	1c0d0d1c 	.word	0x1c0d0d1c
    eeac:	0d0d0d0d 	.word	0x0d0d0d0d
    eeb0:	0d0d0d0d 	.word	0x0d0d0d0d
    eeb4:	0d0d0d0d 	.word	0x0d0d0d0d
    eeb8:	2d0d0d0d 	.word	0x2d0d0d0d
    eebc:	1c1c1c1c 	.word	0x1c1c1c1c
    eec0:	1c1c      	.short	0x1c1c
		LL_ASSERT(0);
    eec2:	4a4d      	ldr	r2, [pc, #308]	; (eff8 <ll_rx_dequeue+0x17c>)
    eec4:	494d      	ldr	r1, [pc, #308]	; (effc <ll_rx_dequeue+0x180>)
    eec6:	484e      	ldr	r0, [pc, #312]	; (f000 <ll_rx_dequeue+0x184>)
    eec8:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    eecc:	f013 ff6f 	bl	22dae <printk>
    eed0:	4040      	eors	r0, r0
    eed2:	f380 8811 	msr	BASEPRI, r0
    eed6:	f04f 0003 	mov.w	r0, #3
    eeda:	df02      	svc	2
}
    eedc:	b002      	add	sp, #8
    eede:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    eee0:	2b00      	cmp	r3, #0
    eee2:	d1fb      	bne.n	eedc <ll_rx_dequeue+0x60>
    eee4:	4a44      	ldr	r2, [pc, #272]	; (eff8 <ll_rx_dequeue+0x17c>)
    eee6:	4947      	ldr	r1, [pc, #284]	; (f004 <ll_rx_dequeue+0x188>)
    eee8:	4845      	ldr	r0, [pc, #276]	; (f000 <ll_rx_dequeue+0x184>)
    eeea:	f44f 736e 	mov.w	r3, #952	; 0x3b8
    eeee:	f013 ff5e 	bl	22dae <printk>
    eef2:	4040      	eors	r0, r0
    eef4:	f380 8811 	msr	BASEPRI, r0
    eef8:	f04f 0003 	mov.w	r0, #3
    eefc:	df02      	svc	2
}
    eefe:	b002      	add	sp, #8
    ef00:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    ef02:	7f13      	ldrb	r3, [r2, #28]
    ef04:	2b3c      	cmp	r3, #60	; 0x3c
    ef06:	d035      	beq.n	ef74 <ll_rx_dequeue+0xf8>
    ef08:	7f53      	ldrb	r3, [r2, #29]
    ef0a:	b1bb      	cbz	r3, ef3c <ll_rx_dequeue+0xc0>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    ef0c:	6893      	ldr	r3, [r2, #8]
    ef0e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    ef10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    ef12:	b120      	cbz	r0, ef1e <ll_rx_dequeue+0xa2>
					adv->node_rx_cc_free = NULL;
    ef14:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    ef16:	493c      	ldr	r1, [pc, #240]	; (f008 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
    ef18:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
    ef1a:	f7fc fadd 	bl	b4d8 <mem_release>
			adv->is_enabled = 0U;
    ef1e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    ef22:	f36f 0300 	bfc	r3, #0, #1
    ef26:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
    ef2a:	2000      	movs	r0, #0
    ef2c:	f000 ff6a 	bl	fe04 <ull_adv_is_enabled>
			if (!bm) {
    ef30:	2800      	cmp	r0, #0
    ef32:	d1d3      	bne.n	eedc <ll_rx_dequeue+0x60>
				ull_filter_adv_scan_state_cb(0);
    ef34:	f005 fed6 	bl	14ce4 <ull_filter_adv_scan_state_cb>
}
    ef38:	b002      	add	sp, #8
    ef3a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    ef3c:	4a2e      	ldr	r2, [pc, #184]	; (eff8 <ll_rx_dequeue+0x17c>)
    ef3e:	492f      	ldr	r1, [pc, #188]	; (effc <ll_rx_dequeue+0x180>)
    ef40:	482f      	ldr	r0, [pc, #188]	; (f000 <ll_rx_dequeue+0x184>)
    ef42:	f44f 7359 	mov.w	r3, #868	; 0x364
    ef46:	f013 ff32 	bl	22dae <printk>
    ef4a:	4040      	eors	r0, r0
    ef4c:	f380 8811 	msr	BASEPRI, r0
    ef50:	f04f 0003 	mov.w	r0, #3
    ef54:	df02      	svc	2
    ef56:	e7e8      	b.n	ef2a <ll_rx_dequeue+0xae>
	LL_ASSERT(link);
    ef58:	4a27      	ldr	r2, [pc, #156]	; (eff8 <ll_rx_dequeue+0x17c>)
    ef5a:	492c      	ldr	r1, [pc, #176]	; (f00c <ll_rx_dequeue+0x190>)
    ef5c:	4828      	ldr	r0, [pc, #160]	; (f000 <ll_rx_dequeue+0x184>)
    ef5e:	f240 23d2 	movw	r3, #722	; 0x2d2
    ef62:	f013 ff24 	bl	22dae <printk>
    ef66:	4040      	eors	r0, r0
    ef68:	f380 8811 	msr	BASEPRI, r0
    ef6c:	f04f 0003 	mov.w	r0, #3
    ef70:	df02      	svc	2
    ef72:	e78f      	b.n	ee94 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
    ef74:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
    ef76:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    ef78:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
    ef7a:	b1ed      	cbz	r5, efb8 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
    ef7c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
    ef7e:	2200      	movs	r2, #0
    ef80:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
    ef82:	b163      	cbz	r3, ef9e <ll_rx_dequeue+0x122>
    ef84:	4a1c      	ldr	r2, [pc, #112]	; (eff8 <ll_rx_dequeue+0x17c>)
    ef86:	4922      	ldr	r1, [pc, #136]	; (f010 <ll_rx_dequeue+0x194>)
    ef88:	481d      	ldr	r0, [pc, #116]	; (f000 <ll_rx_dequeue+0x184>)
    ef8a:	f44f 734f 	mov.w	r3, #828	; 0x33c
    ef8e:	f013 ff0e 	bl	22dae <printk>
    ef92:	4040      	eors	r0, r0
    ef94:	f380 8811 	msr	BASEPRI, r0
    ef98:	f04f 0003 	mov.w	r0, #3
    ef9c:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    ef9e:	f105 0150 	add.w	r1, r5, #80	; 0x50
    efa2:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    efa6:	f7fc fad9 	bl	b55c <memq_deinit>
				LL_ASSERT(link);
    efaa:	4606      	mov	r6, r0
    efac:	b190      	cbz	r0, efd4 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
    efae:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    efb0:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
    efb2:	f001 fcd7 	bl	10964 <ll_conn_release>
    efb6:	e7b2      	b.n	ef1e <ll_rx_dequeue+0xa2>
				LL_ASSERT(conn_lll);
    efb8:	4a0f      	ldr	r2, [pc, #60]	; (eff8 <ll_rx_dequeue+0x17c>)
    efba:	4916      	ldr	r1, [pc, #88]	; (f014 <ll_rx_dequeue+0x198>)
    efbc:	4810      	ldr	r0, [pc, #64]	; (f000 <ll_rx_dequeue+0x184>)
    efbe:	f240 3339 	movw	r3, #825	; 0x339
    efc2:	f013 fef4 	bl	22dae <printk>
    efc6:	4040      	eors	r0, r0
    efc8:	f380 8811 	msr	BASEPRI, r0
    efcc:	f04f 0003 	mov.w	r0, #3
    efd0:	df02      	svc	2
    efd2:	e7d3      	b.n	ef7c <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
    efd4:	4a08      	ldr	r2, [pc, #32]	; (eff8 <ll_rx_dequeue+0x17c>)
    efd6:	490d      	ldr	r1, [pc, #52]	; (f00c <ll_rx_dequeue+0x190>)
    efd8:	4809      	ldr	r0, [pc, #36]	; (f000 <ll_rx_dequeue+0x184>)
    efda:	f240 333f 	movw	r3, #831	; 0x33f
    efde:	f013 fee6 	bl	22dae <printk>
    efe2:	4040      	eors	r0, r0
    efe4:	f380 8811 	msr	BASEPRI, r0
    efe8:	f04f 0003 	mov.w	r0, #3
    efec:	df02      	svc	2
    efee:	e7de      	b.n	efae <ll_rx_dequeue+0x132>
    eff0:	20002f58 	.word	0x20002f58
    eff4:	20002c70 	.word	0x20002c70
    eff8:	0002c824 	.word	0x0002c824
    effc:	0002c650 	.word	0x0002c650
    f000:	0002c5e0 	.word	0x0002c5e0
    f004:	0002c8fc 	.word	0x0002c8fc
    f008:	20002ccc 	.word	0x20002ccc
    f00c:	0002caf4 	.word	0x0002caf4
    f010:	0002c8e4 	.word	0x0002c8e4
    f014:	0002c8d8 	.word	0x0002c8d8

0000f018 <ll_rx_mem_release>:
{
    f018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
    f01c:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    f01e:	4e88      	ldr	r6, [pc, #544]	; (f240 <ll_rx_mem_release+0x228>)
{
    f020:	4681      	mov	r9, r0
	while (rx) {
    f022:	b33c      	cbz	r4, f074 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
    f024:	f8df 8244 	ldr.w	r8, [pc, #580]	; f26c <ll_rx_mem_release+0x254>
    f028:	f8df a244 	ldr.w	sl, [pc, #580]	; f270 <ll_rx_mem_release+0x258>
    f02c:	4f85      	ldr	r7, [pc, #532]	; (f244 <ll_rx_mem_release+0x22c>)
		rx = rx->next;
    f02e:	4625      	mov	r5, r4
    f030:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    f032:	792b      	ldrb	r3, [r5, #4]
    f034:	2b19      	cmp	r3, #25
    f036:	d80e      	bhi.n	f056 <ll_rx_mem_release+0x3e>
    f038:	e8df f003 	tbb	[pc, r3]
    f03c:	930d0d93 	.word	0x930d0d93
    f040:	0d0d0d0d 	.word	0x0d0d0d0d
    f044:	0d0d0d0d 	.word	0x0d0d0d0d
    f048:	0d0d0d0d 	.word	0x0d0d0d0d
    f04c:	810d0d0d 	.word	0x810d0d0d
    f050:	939393ae 	.word	0x939393ae
    f054:	9393      	.short	0x9393
			LL_ASSERT(0);
    f056:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
    f05a:	4642      	mov	r2, r8
    f05c:	4651      	mov	r1, sl
    f05e:	4638      	mov	r0, r7
    f060:	f013 fea5 	bl	22dae <printk>
    f064:	4040      	eors	r0, r0
    f066:	f380 8811 	msr	BASEPRI, r0
    f06a:	f04f 0003 	mov.w	r0, #3
    f06e:	df02      	svc	2
	while (rx) {
    f070:	2c00      	cmp	r4, #0
    f072:	d1dc      	bne.n	f02e <ll_rx_mem_release+0x16>
	*node_rx = rx;
    f074:	2300      	movs	r3, #0
    f076:	f8c9 3000 	str.w	r3, [r9]
	if (max > mem_link_rx.quota_pdu) {
    f07a:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f07c:	1e5f      	subs	r7, r3, #1
    f07e:	b2ff      	uxtb	r7, r7
    f080:	2b00      	cmp	r3, #0
    f082:	d05a      	beq.n	f13a <ll_rx_mem_release+0x122>
    f084:	4d70      	ldr	r5, [pc, #448]	; (f248 <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
    f086:	f8df 81c8 	ldr.w	r8, [pc, #456]	; f250 <ll_rx_mem_release+0x238>
    f08a:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    f08c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; f25c <ll_rx_mem_release+0x244>
	if (last == count) {
    f090:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f092:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    f094:	3401      	adds	r4, #1
    f096:	b2e4      	uxtb	r4, r4
		last = 0U;
    f098:	42a2      	cmp	r2, r4
    f09a:	bf08      	it	eq
    f09c:	2400      	moveq	r4, #0
	if (last == first) {
    f09e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    f0a0:	4640      	mov	r0, r8
    f0a2:	f000 80ac 	beq.w	f1fe <ll_rx_mem_release+0x1e6>
    f0a6:	f7fc fa01 	bl	b4ac <mem_acquire>
    f0aa:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    f0ac:	4648      	mov	r0, r9
		if (!link) {
    f0ae:	f1ba 0f00 	cmp.w	sl, #0
    f0b2:	d042      	beq.n	f13a <ll_rx_mem_release+0x122>
		rx = mem_acquire(&mem_pdu_rx.free);
    f0b4:	f7fc f9fa 	bl	b4ac <mem_acquire>
		if (!rx) {
    f0b8:	2800      	cmp	r0, #0
    f0ba:	f000 80ba 	beq.w	f232 <ll_rx_mem_release+0x21a>
		rx->link = link;
    f0be:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    f0c2:	78ea      	ldrb	r2, [r5, #3]
    f0c4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    f0c6:	fb02 5303 	mla	r3, r2, r3, r5
    f0ca:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    f0cc:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    f0ce:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f0d0:	3f01      	subs	r7, #1
	mem_link_rx.quota_pdu += delta;
    f0d2:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f0d4:	b2ff      	uxtb	r7, r7
	mem_link_rx.quota_pdu += delta;
    f0d6:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f0d8:	2fff      	cmp	r7, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    f0da:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    f0dc:	d1d8      	bne.n	f090 <ll_rx_mem_release+0x78>
	while (mem_link_rx.quota_pdu &&
    f0de:	b363      	cbz	r3, f13a <ll_rx_mem_release+0x122>
    f0e0:	4d5a      	ldr	r5, [pc, #360]	; (f24c <ll_rx_mem_release+0x234>)
		link = mem_acquire(&mem_link_rx.free);
    f0e2:	4f5b      	ldr	r7, [pc, #364]	; (f250 <ll_rx_mem_release+0x238>)
    f0e4:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    f0e6:	f8df 8174 	ldr.w	r8, [pc, #372]	; f25c <ll_rx_mem_release+0x244>
		link->mem = NULL;
    f0ea:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    f0ee:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    f0f0:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    f0f2:	3401      	adds	r4, #1
    f0f4:	b2e4      	uxtb	r4, r4
		last = 0U;
    f0f6:	42a2      	cmp	r2, r4
    f0f8:	bf08      	it	eq
    f0fa:	2400      	moveq	r4, #0
	if (last == first) {
    f0fc:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    f0fe:	4638      	mov	r0, r7
    f100:	d01b      	beq.n	f13a <ll_rx_mem_release+0x122>
    f102:	f7fc f9d3 	bl	b4ac <mem_acquire>
    f106:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    f108:	4640      	mov	r0, r8
		if (!link) {
    f10a:	f1ba 0f00 	cmp.w	sl, #0
    f10e:	d014      	beq.n	f13a <ll_rx_mem_release+0x122>
		rx = mem_acquire(&mem_pdu_rx.free);
    f110:	f7fc f9cc 	bl	b4ac <mem_acquire>
		if (!rx) {
    f114:	2800      	cmp	r0, #0
    f116:	f000 808c 	beq.w	f232 <ll_rx_mem_release+0x21a>
		link->mem = NULL;
    f11a:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    f11e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    f122:	78ea      	ldrb	r2, [r5, #3]
    f124:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    f126:	fb02 5303 	mla	r3, r2, r3, r5
    f12a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    f12c:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    f12e:	70ec      	strb	r4, [r5, #3]
    f130:	3b01      	subs	r3, #1
    f132:	b2db      	uxtb	r3, r3
    f134:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
    f136:	2b00      	cmp	r3, #0
    f138:	d1d9      	bne.n	f0ee <ll_rx_mem_release+0xd6>
}
    f13a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    f13e:	7f2b      	ldrb	r3, [r5, #28]
    f140:	2b3c      	cmp	r3, #60	; 0x3c
    f142:	d060      	beq.n	f206 <ll_rx_mem_release+0x1ee>
				LL_ASSERT(!cc->status);
    f144:	b1db      	cbz	r3, f17e <ll_rx_mem_release+0x166>
    f146:	4943      	ldr	r1, [pc, #268]	; (f254 <ll_rx_mem_release+0x23c>)
    f148:	f240 4326 	movw	r3, #1062	; 0x426
    f14c:	4642      	mov	r2, r8
    f14e:	4638      	mov	r0, r7
    f150:	f013 fe2d 	bl	22dae <printk>
    f154:	4040      	eors	r0, r0
    f156:	f380 8811 	msr	BASEPRI, r0
    f15a:	f04f 0003 	mov.w	r0, #3
    f15e:	df02      	svc	2
    f160:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    f162:	b963      	cbnz	r3, f17e <ll_rx_mem_release+0x166>
    f164:	493c      	ldr	r1, [pc, #240]	; (f258 <ll_rx_mem_release+0x240>)
    f166:	f240 436c 	movw	r3, #1132	; 0x46c
    f16a:	4642      	mov	r2, r8
    f16c:	4638      	mov	r0, r7
    f16e:	f013 fe1e 	bl	22dae <printk>
    f172:	4040      	eors	r0, r0
    f174:	f380 8811 	msr	BASEPRI, r0
    f178:	f04f 0003 	mov.w	r0, #3
    f17c:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    f17e:	7833      	ldrb	r3, [r6, #0]
    f180:	2b06      	cmp	r3, #6
    f182:	d82d      	bhi.n	f1e0 <ll_rx_mem_release+0x1c8>
	mem_link_rx.quota_pdu += delta;
    f184:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    f186:	4935      	ldr	r1, [pc, #212]	; (f25c <ll_rx_mem_release+0x244>)
	mem_link_rx.quota_pdu += delta;
    f188:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    f18a:	4628      	mov	r0, r5
    f18c:	f7fc f9a4 	bl	b4d8 <mem_release>
	while (rx) {
    f190:	2c00      	cmp	r4, #0
    f192:	f47f af4c 	bne.w	f02e <ll_rx_mem_release+0x16>
    f196:	e76d      	b.n	f074 <ll_rx_mem_release+0x5c>
			conn = ll_conn_get(rx_free->handle);
    f198:	88e8      	ldrh	r0, [r5, #6]
    f19a:	f001 fbf1 	bl	10980 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    f19e:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
    f1a0:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    f1a2:	b163      	cbz	r3, f1be <ll_rx_mem_release+0x1a6>
    f1a4:	492e      	ldr	r1, [pc, #184]	; (f260 <ll_rx_mem_release+0x248>)
    f1a6:	f240 4393 	movw	r3, #1171	; 0x493
    f1aa:	4642      	mov	r2, r8
    f1ac:	4638      	mov	r0, r7
    f1ae:	f013 fdfe 	bl	22dae <printk>
    f1b2:	4040      	eors	r0, r0
    f1b4:	f380 8811 	msr	BASEPRI, r0
    f1b8:	f04f 0003 	mov.w	r0, #3
    f1bc:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    f1be:	f105 016c 	add.w	r1, r5, #108	; 0x6c
    f1c2:	f105 0068 	add.w	r0, r5, #104	; 0x68
    f1c6:	f7fc f9c9 	bl	b55c <memq_deinit>
			LL_ASSERT(link);
    f1ca:	4683      	mov	fp, r0
    f1cc:	b318      	cbz	r0, f216 <ll_rx_mem_release+0x1fe>
			conn->lll.link_tx_free = link;
    f1ce:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
    f1d2:	4628      	mov	r0, r5
    f1d4:	f001 fbc6 	bl	10964 <ll_conn_release>
	while (rx) {
    f1d8:	2c00      	cmp	r4, #0
    f1da:	f47f af28 	bne.w	f02e <ll_rx_mem_release+0x16>
    f1de:	e749      	b.n	f074 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    f1e0:	4920      	ldr	r1, [pc, #128]	; (f264 <ll_rx_mem_release+0x24c>)
    f1e2:	f240 43ac 	movw	r3, #1196	; 0x4ac
    f1e6:	4642      	mov	r2, r8
    f1e8:	4638      	mov	r0, r7
    f1ea:	f013 fde0 	bl	22dae <printk>
    f1ee:	4040      	eors	r0, r0
    f1f0:	f380 8811 	msr	BASEPRI, r0
    f1f4:	f04f 0003 	mov.w	r0, #3
    f1f8:	df02      	svc	2
    f1fa:	7833      	ldrb	r3, [r6, #0]
    f1fc:	e7c2      	b.n	f184 <ll_rx_mem_release+0x16c>
	if (!max) {
    f1fe:	2f00      	cmp	r7, #0
    f200:	d09b      	beq.n	f13a <ll_rx_mem_release+0x122>
    f202:	7833      	ldrb	r3, [r6, #0]
    f204:	e76b      	b.n	f0de <ll_rx_mem_release+0xc6>
				mem_release(rx_free, &mem_pdu_rx.free);
    f206:	4915      	ldr	r1, [pc, #84]	; (f25c <ll_rx_mem_release+0x244>)
    f208:	4628      	mov	r0, r5
    f20a:	f7fc f965 	bl	b4d8 <mem_release>
	while (rx) {
    f20e:	2c00      	cmp	r4, #0
    f210:	f47f af0d 	bne.w	f02e <ll_rx_mem_release+0x16>
    f214:	e72e      	b.n	f074 <ll_rx_mem_release+0x5c>
			LL_ASSERT(link);
    f216:	4914      	ldr	r1, [pc, #80]	; (f268 <ll_rx_mem_release+0x250>)
    f218:	f240 4396 	movw	r3, #1174	; 0x496
    f21c:	4642      	mov	r2, r8
    f21e:	4638      	mov	r0, r7
    f220:	f013 fdc5 	bl	22dae <printk>
    f224:	4040      	eors	r0, r0
    f226:	f380 8811 	msr	BASEPRI, r0
    f22a:	f04f 0003 	mov.w	r0, #3
    f22e:	df02      	svc	2
    f230:	e7cd      	b.n	f1ce <ll_rx_mem_release+0x1b6>
			mem_release(link, &mem_link_rx.free);
    f232:	4650      	mov	r0, sl
    f234:	4906      	ldr	r1, [pc, #24]	; (f250 <ll_rx_mem_release+0x238>)
}
    f236:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
    f23a:	f7fc b94d 	b.w	b4d8 <mem_release>
    f23e:	bf00      	nop
    f240:	20002c6c 	.word	0x20002c6c
    f244:	0002c5e0 	.word	0x0002c5e0
    f248:	20000430 	.word	0x20000430
    f24c:	2000041c 	.word	0x2000041c
    f250:	20002c70 	.word	0x20002c70
    f254:	0002c91c 	.word	0x0002c91c
    f258:	0002c928 	.word	0x0002c928
    f25c:	20002ccc 	.word	0x20002ccc
    f260:	0002c94c 	.word	0x0002c94c
    f264:	0002c8a4 	.word	0x0002c8a4
    f268:	0002caf4 	.word	0x0002caf4
    f26c:	0002c824 	.word	0x0002c824
    f270:	0002c650 	.word	0x0002c650

0000f274 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    f274:	4801      	ldr	r0, [pc, #4]	; (f27c <ll_rx_link_alloc+0x8>)
    f276:	f7fc b919 	b.w	b4ac <mem_acquire>
    f27a:	bf00      	nop
    f27c:	20002c70 	.word	0x20002c70

0000f280 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    f280:	4901      	ldr	r1, [pc, #4]	; (f288 <ll_rx_link_release+0x8>)
    f282:	f7fc b929 	b.w	b4d8 <mem_release>
    f286:	bf00      	nop
    f288:	20002c70 	.word	0x20002c70

0000f28c <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    f28c:	4801      	ldr	r0, [pc, #4]	; (f294 <ll_rx_alloc+0x8>)
    f28e:	f7fc b90d 	b.w	b4ac <mem_acquire>
    f292:	bf00      	nop
    f294:	20002ccc 	.word	0x20002ccc

0000f298 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    f298:	4901      	ldr	r1, [pc, #4]	; (f2a0 <ll_rx_release+0x8>)
    f29a:	f7fc b91d 	b.w	b4d8 <mem_release>
    f29e:	bf00      	nop
    f2a0:	20002ccc 	.word	0x20002ccc

0000f2a4 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f2a4:	4b02      	ldr	r3, [pc, #8]	; (f2b0 <__kernel_ram_size+0x8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f2a6:	4a03      	ldr	r2, [pc, #12]	; (f2b4 <__kernel_ram_size+0xc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f2a8:	78db      	ldrb	r3, [r3, #3]
    f2aa:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f2ac:	f7fc b960 	b.w	b570 <memq_enqueue>
    f2b0:	2000056c 	.word	0x2000056c
    f2b4:	20002f5c 	.word	0x20002f5c

0000f2b8 <ll_rx_sched>:
	k_sem_give(sem_recv);
    f2b8:	4b01      	ldr	r3, [pc, #4]	; (f2c0 <ll_rx_sched+0x8>)
    f2ba:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    f2bc:	f010 bee2 	b.w	20084 <z_impl_k_sem_give>
    f2c0:	20002f68 	.word	0x20002f68

0000f2c4 <ll_pdu_rx_alloc_peek>:
{
    f2c4:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f2c6:	4b0d      	ldr	r3, [pc, #52]	; (f2fc <ll_pdu_rx_alloc_peek+0x38>)
    f2c8:	789a      	ldrb	r2, [r3, #2]
    f2ca:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    f2cc:	42a2      	cmp	r2, r4
    f2ce:	d809      	bhi.n	f2e4 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    f2d0:	1aa1      	subs	r1, r4, r2
    f2d2:	b2c9      	uxtb	r1, r1
    f2d4:	4288      	cmp	r0, r1
    f2d6:	d802      	bhi.n	f2de <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    f2d8:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f2da:	7819      	ldrb	r1, [r3, #0]
    f2dc:	d109      	bne.n	f2f2 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f2de:	2000      	movs	r0, #0
}
    f2e0:	bc10      	pop	{r4}
    f2e2:	4770      	bx	lr
		return count - first + last;
    f2e4:	7859      	ldrb	r1, [r3, #1]
    f2e6:	1a89      	subs	r1, r1, r2
    f2e8:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f2ea:	b2c9      	uxtb	r1, r1
    f2ec:	4288      	cmp	r0, r1
    f2ee:	d8f6      	bhi.n	f2de <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f2f0:	7819      	ldrb	r1, [r3, #0]
}
    f2f2:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    f2f4:	fb02 3301 	mla	r3, r2, r1, r3
    f2f8:	6858      	ldr	r0, [r3, #4]
    f2fa:	4770      	bx	lr
    f2fc:	2000041c 	.word	0x2000041c

0000f300 <ll_pdu_rx_alloc>:
{
    f300:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f302:	4b0a      	ldr	r3, [pc, #40]	; (f32c <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    f304:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f306:	78da      	ldrb	r2, [r3, #3]
    f308:	7818      	ldrb	r0, [r3, #0]
    f30a:	785c      	ldrb	r4, [r3, #1]
    f30c:	428a      	cmp	r2, r1
    f30e:	d00a      	beq.n	f326 <ll_pdu_rx_alloc+0x26>
	_first += 1U;
    f310:	1c4a      	adds	r2, r1, #1
    f312:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f314:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f318:	4294      	cmp	r4, r2
    f31a:	bf08      	it	eq
    f31c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f31e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f320:	709a      	strb	r2, [r3, #2]
}
    f322:	bc10      	pop	{r4}
    f324:	4770      	bx	lr
		return NULL;
    f326:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f328:	e7fb      	b.n	f322 <ll_pdu_rx_alloc+0x22>
    f32a:	bf00      	nop
    f32c:	2000041c 	.word	0x2000041c

0000f330 <ll_tx_ack_put>:
{
    f330:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    f332:	4a13      	ldr	r2, [pc, #76]	; (f380 <ll_tx_ack_put+0x50>)
    f334:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    f336:	7855      	ldrb	r5, [r2, #1]
    f338:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    f33a:	1c73      	adds	r3, r6, #1
    f33c:	b2db      	uxtb	r3, r3
		last = 0U;
    f33e:	429d      	cmp	r5, r3
    f340:	bf08      	it	eq
    f342:	2300      	moveq	r3, #0
	if (last == first) {
    f344:	429c      	cmp	r4, r3
    f346:	d00a      	beq.n	f35e <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f348:	4615      	mov	r5, r2
    f34a:	f815 4b04 	ldrb.w	r4, [r5], #4
    f34e:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    f352:	192e      	adds	r6, r5, r4
    f354:	d003      	beq.n	f35e <ll_tx_ack_put+0x2e>
	tx->handle = handle;
    f356:	5328      	strh	r0, [r5, r4]
	tx->node = node_tx;
    f358:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
    f35a:	70d3      	strb	r3, [r2, #3]
}
    f35c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
    f35e:	4a09      	ldr	r2, [pc, #36]	; (f384 <ll_tx_ack_put+0x54>)
    f360:	4909      	ldr	r1, [pc, #36]	; (f388 <ll_tx_ack_put+0x58>)
    f362:	480a      	ldr	r0, [pc, #40]	; (f38c <ll_tx_ack_put+0x5c>)
    f364:	f240 43f4 	movw	r3, #1268	; 0x4f4
    f368:	f013 fd21 	bl	22dae <printk>
    f36c:	4040      	eors	r0, r0
    f36e:	f380 8811 	msr	BASEPRI, r0
    f372:	f04f 0003 	mov.w	r0, #3
    f376:	df02      	svc	2
	tx->handle = handle;
    f378:	2300      	movs	r3, #0
    f37a:	801b      	strh	r3, [r3, #0]
    f37c:	deff      	udf	#255	; 0xff
    f37e:	bf00      	nop
    f380:	2000056c 	.word	0x2000056c
    f384:	0002c824 	.word	0x0002c824
    f388:	0002cae8 	.word	0x0002cae8
    f38c:	0002c5e0 	.word	0x0002c5e0

0000f390 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f390:	f030 0302 	bics.w	r3, r0, #2
{
    f394:	b510      	push	{r4, lr}
    f396:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f398:	d002      	beq.n	f3a0 <ull_ticker_status_take+0x10>
    f39a:	680b      	ldr	r3, [r1, #0]
    f39c:	2b02      	cmp	r3, #2
    f39e:	d008      	beq.n	f3b2 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    f3a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f3a8:	4809      	ldr	r0, [pc, #36]	; (f3d0 <ull_ticker_status_take+0x40>)
    f3aa:	f010 fe91 	bl	200d0 <z_impl_k_sem_take>
	return *ret_cb;
    f3ae:	6820      	ldr	r0, [r4, #0]
}
    f3b0:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3b2:	4a08      	ldr	r2, [pc, #32]	; (f3d4 <ull_ticker_status_take+0x44>)
    f3b4:	4908      	ldr	r1, [pc, #32]	; (f3d8 <ull_ticker_status_take+0x48>)
    f3b6:	4809      	ldr	r0, [pc, #36]	; (f3dc <ull_ticker_status_take+0x4c>)
    f3b8:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    f3bc:	f013 fcf7 	bl	22dae <printk>
    f3c0:	4040      	eors	r0, r0
    f3c2:	f380 8811 	msr	BASEPRI, r0
    f3c6:	f04f 0003 	mov.w	r0, #3
    f3ca:	df02      	svc	2
    f3cc:	e7e8      	b.n	f3a0 <ull_ticker_status_take+0x10>
    f3ce:	bf00      	nop
    f3d0:	20002f6c 	.word	0x20002f6c
    f3d4:	0002c824 	.word	0x0002c824
    f3d8:	0002c964 	.word	0x0002c964
    f3dc:	0002c5e0 	.word	0x0002c5e0

0000f3e0 <ull_disable_mark>:
	if (!*m) {
    f3e0:	4a04      	ldr	r2, [pc, #16]	; (f3f4 <ull_disable_mark+0x14>)
    f3e2:	6813      	ldr	r3, [r2, #0]
    f3e4:	b10b      	cbz	r3, f3ea <ull_disable_mark+0xa>
}
    f3e6:	4618      	mov	r0, r3
    f3e8:	4770      	bx	lr
		*m = param;
    f3ea:	4603      	mov	r3, r0
    f3ec:	6010      	str	r0, [r2, #0]
}
    f3ee:	4618      	mov	r0, r3
    f3f0:	4770      	bx	lr
    f3f2:	bf00      	nop
    f3f4:	20002ba8 	.word	0x20002ba8

0000f3f8 <ull_disable_unmark>:
	if (*m && *m == param) {
    f3f8:	4a04      	ldr	r2, [pc, #16]	; (f40c <ull_disable_unmark+0x14>)
    f3fa:	6813      	ldr	r3, [r2, #0]
    f3fc:	b123      	cbz	r3, f408 <ull_disable_unmark+0x10>
    f3fe:	4298      	cmp	r0, r3
		*m = NULL;
    f400:	bf06      	itte	eq
    f402:	2100      	moveq	r1, #0
    f404:	6011      	streq	r1, [r2, #0]
	return NULL;
    f406:	2300      	movne	r3, #0
}
    f408:	4618      	mov	r0, r3
    f40a:	4770      	bx	lr
    f40c:	20002ba8 	.word	0x20002ba8

0000f410 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    f410:	4b01      	ldr	r3, [pc, #4]	; (f418 <ull_disable_mark_get+0x8>)
}
    f412:	6818      	ldr	r0, [r3, #0]
    f414:	4770      	bx	lr
    f416:	bf00      	nop
    f418:	20002ba8 	.word	0x20002ba8

0000f41c <ull_update_mark>:
	if (!*m) {
    f41c:	4a04      	ldr	r2, [pc, #16]	; (f430 <ull_update_mark+0x14>)
    f41e:	6813      	ldr	r3, [r2, #0]
    f420:	b10b      	cbz	r3, f426 <ull_update_mark+0xa>
}
    f422:	4618      	mov	r0, r3
    f424:	4770      	bx	lr
		*m = param;
    f426:	4603      	mov	r3, r0
    f428:	6010      	str	r0, [r2, #0]
}
    f42a:	4618      	mov	r0, r3
    f42c:	4770      	bx	lr
    f42e:	bf00      	nop
    f430:	20002bac 	.word	0x20002bac

0000f434 <ull_update_unmark>:
	if (*m && *m == param) {
    f434:	4a04      	ldr	r2, [pc, #16]	; (f448 <ull_update_unmark+0x14>)
    f436:	6813      	ldr	r3, [r2, #0]
    f438:	b123      	cbz	r3, f444 <ull_update_unmark+0x10>
    f43a:	4298      	cmp	r0, r3
		*m = NULL;
    f43c:	bf06      	itte	eq
    f43e:	2100      	moveq	r1, #0
    f440:	6011      	streq	r1, [r2, #0]
	return NULL;
    f442:	2300      	movne	r3, #0
}
    f444:	4618      	mov	r0, r3
    f446:	4770      	bx	lr
    f448:	20002bac 	.word	0x20002bac

0000f44c <ull_update_mark_get>:
	return mark_get(mark_update);
    f44c:	4b01      	ldr	r3, [pc, #4]	; (f454 <ull_update_mark_get+0x8>)
}
    f44e:	6818      	ldr	r0, [r3, #0]
    f450:	4770      	bx	lr
    f452:	bf00      	nop
    f454:	20002bac 	.word	0x20002bac

0000f458 <ull_disable>:
{
    f458:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    f45a:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    f45c:	f115 0f10 	cmn.w	r5, #16
{
    f460:	b087      	sub	sp, #28
	if (!hdr) {
    f462:	d00b      	beq.n	f47c <ull_disable+0x24>
	compiler_barrier();
    f464:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    f466:	2201      	movs	r2, #1
    f468:	4668      	mov	r0, sp
    f46a:	2100      	movs	r1, #0
    f46c:	f01b feb4 	bl	2b1d8 <z_impl_k_sem_init>
    f470:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
    f472:	4a13      	ldr	r2, [pc, #76]	; (f4c0 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    f474:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    f478:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    f47a:	b913      	cbnz	r3, f482 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
    f47c:	2000      	movs	r0, #0
}
    f47e:	b007      	add	sp, #28
    f480:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
    f482:	4b10      	ldr	r3, [pc, #64]	; (f4c4 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f484:	2200      	movs	r2, #0
    f486:	4611      	mov	r1, r2
    f488:	2003      	movs	r0, #3
	mfy.param = lll;
    f48a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f48c:	f7fc f8e4 	bl	b658 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f490:	b940      	cbnz	r0, f4a4 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    f492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f49a:	4668      	mov	r0, sp
    f49c:	f010 fe18 	bl	200d0 <z_impl_k_sem_take>
}
    f4a0:	b007      	add	sp, #28
    f4a2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    f4a4:	4a08      	ldr	r2, [pc, #32]	; (f4c8 <ull_disable+0x70>)
    f4a6:	4909      	ldr	r1, [pc, #36]	; (f4cc <ull_disable+0x74>)
    f4a8:	4809      	ldr	r0, [pc, #36]	; (f4d0 <ull_disable+0x78>)
    f4aa:	f240 539a 	movw	r3, #1434	; 0x59a
    f4ae:	f013 fc7e 	bl	22dae <printk>
    f4b2:	4040      	eors	r0, r0
    f4b4:	f380 8811 	msr	BASEPRI, r0
    f4b8:	f04f 0003 	mov.w	r0, #3
    f4bc:	df02      	svc	2
    f4be:	e7e8      	b.n	f492 <ull_disable+0x3a>
    f4c0:	0000e2ad 	.word	0x0000e2ad
    f4c4:	200005a0 	.word	0x200005a0
    f4c8:	0002c824 	.word	0x0002c824
    f4cc:	0002c86c 	.word	0x0002c86c
    f4d0:	0002c5e0 	.word	0x0002c5e0

0000f4d4 <ull_ticker_stop_with_mark>:
{
    f4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    f4d6:	4d1d      	ldr	r5, [pc, #116]	; (f54c <ull_ticker_stop_with_mark+0x78>)
    f4d8:	682b      	ldr	r3, [r5, #0]
{
    f4da:	b085      	sub	sp, #20
    f4dc:	460c      	mov	r4, r1
    f4de:	4616      	mov	r6, r2
	if (!*m) {
    f4e0:	b323      	cbz	r3, f52c <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    f4e2:	4299      	cmp	r1, r3
    f4e4:	d112      	bne.n	f50c <ull_ticker_stop_with_mark+0x38>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f4e6:	af03      	add	r7, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
    f4e8:	2102      	movs	r1, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f4ea:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    f4ec:	9103      	str	r1, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f4ee:	4b18      	ldr	r3, [pc, #96]	; (f550 <ull_ticker_stop_with_mark+0x7c>)
    f4f0:	9700      	str	r7, [sp, #0]
    f4f2:	2103      	movs	r1, #3
    f4f4:	2000      	movs	r0, #0
    f4f6:	f7fd fb8d 	bl	cc14 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    f4fa:	4639      	mov	r1, r7
    f4fc:	f7ff ff48 	bl	f390 <ull_ticker_status_take>
	if (ret) {
    f500:	b140      	cbz	r0, f514 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    f502:	682b      	ldr	r3, [r5, #0]
    f504:	b10b      	cbz	r3, f50a <ull_ticker_stop_with_mark+0x36>
    f506:	429c      	cmp	r4, r3
    f508:	d012      	beq.n	f530 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    f50a:	b1cc      	cbz	r4, f540 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    f50c:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    f510:	b005      	add	sp, #20
    f512:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    f514:	4630      	mov	r0, r6
    f516:	f7ff ff9f 	bl	f458 <ull_disable>
	if (ret) {
    f51a:	b9a0      	cbnz	r0, f546 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    f51c:	682b      	ldr	r3, [r5, #0]
    f51e:	b10b      	cbz	r3, f524 <ull_ticker_stop_with_mark+0x50>
    f520:	429c      	cmp	r4, r3
    f522:	d00b      	beq.n	f53c <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    f524:	2c00      	cmp	r4, #0
    f526:	d1f1      	bne.n	f50c <ull_ticker_stop_with_mark+0x38>
}
    f528:	b005      	add	sp, #20
    f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    f52c:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    f52e:	e7da      	b.n	f4e6 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    f530:	2300      	movs	r3, #0
		return -EALREADY;
    f532:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    f536:	602b      	str	r3, [r5, #0]
}
    f538:	b005      	add	sp, #20
    f53a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    f53c:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    f53e:	e7e7      	b.n	f510 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    f540:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f544:	e7e4      	b.n	f510 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    f546:	f06f 000f 	mvn.w	r0, #15
    f54a:	e7e1      	b.n	f510 <ull_ticker_stop_with_mark+0x3c>
    f54c:	20002ba8 	.word	0x20002ba8
    f550:	0000e2a1 	.word	0x0000e2a1

0000f554 <ull_pdu_rx_alloc_peek>:
{
    f554:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f556:	4b0d      	ldr	r3, [pc, #52]	; (f58c <ull_pdu_rx_alloc_peek+0x38>)
    f558:	789a      	ldrb	r2, [r3, #2]
    f55a:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    f55c:	42a2      	cmp	r2, r4
    f55e:	d809      	bhi.n	f574 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    f560:	1aa1      	subs	r1, r4, r2
    f562:	b2c9      	uxtb	r1, r1
    f564:	4288      	cmp	r0, r1
    f566:	d802      	bhi.n	f56e <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    f568:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f56a:	7819      	ldrb	r1, [r3, #0]
    f56c:	d109      	bne.n	f582 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f56e:	2000      	movs	r0, #0
}
    f570:	bc10      	pop	{r4}
    f572:	4770      	bx	lr
		return count - first + last;
    f574:	7859      	ldrb	r1, [r3, #1]
    f576:	1a89      	subs	r1, r1, r2
    f578:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f57a:	b2c9      	uxtb	r1, r1
    f57c:	4288      	cmp	r0, r1
    f57e:	d8f6      	bhi.n	f56e <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f580:	7819      	ldrb	r1, [r3, #0]
}
    f582:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    f584:	fb02 3301 	mla	r3, r2, r1, r3
    f588:	6858      	ldr	r0, [r3, #4]
    f58a:	4770      	bx	lr
    f58c:	20000430 	.word	0x20000430

0000f590 <ull_pdu_rx_alloc>:
{
    f590:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
    f592:	4b0a      	ldr	r3, [pc, #40]	; (f5bc <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    f594:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f596:	78da      	ldrb	r2, [r3, #3]
    f598:	7818      	ldrb	r0, [r3, #0]
    f59a:	785c      	ldrb	r4, [r3, #1]
    f59c:	428a      	cmp	r2, r1
    f59e:	d00a      	beq.n	f5b6 <ull_pdu_rx_alloc+0x26>
	_first += 1U;
    f5a0:	1c4a      	adds	r2, r1, #1
    f5a2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f5a4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f5a8:	4294      	cmp	r4, r2
    f5aa:	bf08      	it	eq
    f5ac:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f5ae:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f5b0:	709a      	strb	r2, [r3, #2]
}
    f5b2:	bc10      	pop	{r4}
    f5b4:	4770      	bx	lr
		return NULL;
    f5b6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    f5b8:	e7fb      	b.n	f5b2 <ull_pdu_rx_alloc+0x22>
    f5ba:	bf00      	nop
    f5bc:	20000430 	.word	0x20000430

0000f5c0 <ull_rx_put>:
{
    f5c0:	b538      	push	{r3, r4, r5, lr}
    f5c2:	460c      	mov	r4, r1
    f5c4:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f5c6:	f004 fe45 	bl	14254 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f5ca:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f5cc:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f5ce:	4a03      	ldr	r2, [pc, #12]	; (f5dc <ull_rx_put+0x1c>)
    f5d0:	4628      	mov	r0, r5
}
    f5d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f5d6:	f7fb bfcb 	b.w	b570 <memq_enqueue>
    f5da:	bf00      	nop
    f5dc:	20002f64 	.word	0x20002f64

0000f5e0 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f5e0:	2201      	movs	r2, #1
    f5e2:	4b02      	ldr	r3, [pc, #8]	; (f5ec <ull_rx_sched+0xc>)
    f5e4:	4611      	mov	r1, r2
    f5e6:	2000      	movs	r0, #0
    f5e8:	f7fc b836 	b.w	b658 <mayfly_enqueue>
    f5ec:	200005b0 	.word	0x200005b0

0000f5f0 <ull_prepare_enqueue>:
{
    f5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f5f4:	4e1e      	ldr	r6, [pc, #120]	; (f670 <ull_prepare_enqueue+0x80>)
{
    f5f6:	f89d e028 	ldrb.w	lr, [sp, #40]	; 0x28
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f5fa:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    f5fc:	f896 c001 	ldrb.w	ip, [r6, #1]
    f600:	78b7      	ldrb	r7, [r6, #2]
	last = last + 1;
    f602:	1c65      	adds	r5, r4, #1
    f604:	b2ed      	uxtb	r5, r5
		last = 0U;
    f606:	45ac      	cmp	ip, r5
    f608:	bf08      	it	eq
    f60a:	2500      	moveq	r5, #0
	if (last == first) {
    f60c:	42af      	cmp	r7, r5
    f60e:	d02a      	beq.n	f666 <ull_prepare_enqueue+0x76>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f610:	46b4      	mov	ip, r6
    f612:	f81c 7b04 	ldrb.w	r7, [ip], #4
    f616:	fb17 f704 	smulbb	r7, r7, r4
	if (!e) {
    f61a:	eb1c 0407 	adds.w	r4, ip, r7
    f61e:	d022      	beq.n	f666 <ull_prepare_enqueue+0x76>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f620:	f8d2 b000 	ldr.w	fp, [r2]
    f624:	f8d2 a004 	ldr.w	sl, [r2, #4]
    f628:	f8d2 8008 	ldr.w	r8, [r2, #8]
    f62c:	f8d2 900c 	ldr.w	r9, [r2, #12]
    f630:	f84c b007 	str.w	fp, [ip, r7]
	e->is_resume = is_resume;
    f634:	f894 2020 	ldrb.w	r2, [r4, #32]
    f638:	f8c4 a004 	str.w	sl, [r4, #4]
    f63c:	f00e 0e01 	and.w	lr, lr, #1
    f640:	f022 0203 	bic.w	r2, r2, #3
	e->is_abort_cb = is_abort_cb;
    f644:	e9c4 3004 	strd	r3, r0, [r4, #16]
	e->is_resume = is_resume;
    f648:	ea42 020e 	orr.w	r2, r2, lr
	e->prio = prio;
    f64c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f64e:	f8c4 8008 	str.w	r8, [r4, #8]
    f652:	f8c4 900c 	str.w	r9, [r4, #12]
	e->abort_cb = abort_cb;
    f656:	61a1      	str	r1, [r4, #24]
	e->prio = prio;
    f658:	61e3      	str	r3, [r4, #28]
	e->is_resume = is_resume;
    f65a:	f884 2020 	strb.w	r2, [r4, #32]
	return 0;
    f65e:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
    f660:	70f5      	strb	r5, [r6, #3]
}
    f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOBUFS;
    f666:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    f66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f66e:	bf00      	nop
    f670:	20000448 	.word	0x20000448

0000f674 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    f674:	4b05      	ldr	r3, [pc, #20]	; (f68c <ull_prepare_dequeue_get+0x18>)
    f676:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    f678:	78d9      	ldrb	r1, [r3, #3]
    f67a:	7818      	ldrb	r0, [r3, #0]
    f67c:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    f67e:	bf1a      	itte	ne
    f680:	3304      	addne	r3, #4
    f682:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    f686:	2000      	moveq	r0, #0
}
    f688:	4770      	bx	lr
    f68a:	bf00      	nop
    f68c:	20000448 	.word	0x20000448

0000f690 <ull_prepare_dequeue_iter>:
{
    f690:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f692:	4b0c      	ldr	r3, [pc, #48]	; (f6c4 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    f694:	7802      	ldrb	r2, [r0, #0]
    f696:	785c      	ldrb	r4, [r3, #1]
    f698:	78dd      	ldrb	r5, [r3, #3]
    f69a:	7819      	ldrb	r1, [r3, #0]
    f69c:	4294      	cmp	r4, r2
    f69e:	bf9c      	itt	ls
    f6a0:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    f6a2:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    f6a4:	4295      	cmp	r5, r2
    f6a6:	d00a      	beq.n	f6be <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
    f6a8:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
    f6aa:	4d07      	ldr	r5, [pc, #28]	; (f6c8 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    f6ac:	b2db      	uxtb	r3, r3
		i = 0U;
    f6ae:	429c      	cmp	r4, r3
    f6b0:	bf08      	it	eq
    f6b2:	2300      	moveq	r3, #0
	*idx = i;
    f6b4:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    f6b6:	fb02 5001 	mla	r0, r2, r1, r5
}
    f6ba:	bc30      	pop	{r4, r5}
    f6bc:	4770      	bx	lr
		return NULL;
    f6be:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f6c0:	e7fb      	b.n	f6ba <ull_prepare_dequeue_iter+0x2a>
    f6c2:	bf00      	nop
    f6c4:	20000448 	.word	0x20000448
    f6c8:	2000044c 	.word	0x2000044c

0000f6cc <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    f6cc:	4b06      	ldr	r3, [pc, #24]	; (f6e8 <ull_event_done_extra_get+0x1c>)
    f6ce:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    f6d0:	78d8      	ldrb	r0, [r3, #3]
    f6d2:	781a      	ldrb	r2, [r3, #0]
    f6d4:	4288      	cmp	r0, r1
    f6d6:	d005      	beq.n	f6e4 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    f6d8:	fb01 3302 	mla	r3, r1, r2, r3
    f6dc:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    f6de:	b110      	cbz	r0, f6e6 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    f6e0:	3020      	adds	r0, #32
    f6e2:	4770      	bx	lr
		return NULL;
    f6e4:	2000      	movs	r0, #0
}
    f6e6:	4770      	bx	lr
    f6e8:	20000408 	.word	0x20000408

0000f6ec <ull_event_done>:
{
    f6ec:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    f6ee:	4a14      	ldr	r2, [pc, #80]	; (f740 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
    f6f0:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f6f2:	78d4      	ldrb	r4, [r2, #3]
    f6f4:	7811      	ldrb	r1, [r2, #0]
    f6f6:	7855      	ldrb	r5, [r2, #1]
    f6f8:	429c      	cmp	r4, r3
    f6fa:	d01f      	beq.n	f73c <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
    f6fc:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f700:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    f702:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    f704:	b2db      	uxtb	r3, r3
		_first = 0U;
    f706:	429d      	cmp	r5, r3
    f708:	bf08      	it	eq
    f70a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f70c:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    f70e:	b19c      	cbz	r4, f738 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f710:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    f712:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    f714:	6826      	ldr	r6, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f716:	7123      	strb	r3, [r4, #4]
	evdone->param = param;
    f718:	61e0      	str	r0, [r4, #28]
	evdone->hdr.link = NULL;
    f71a:	6025      	str	r5, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f71c:	f004 fd9a 	bl	14254 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f720:	4a08      	ldr	r2, [pc, #32]	; (f744 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f722:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f724:	4621      	mov	r1, r4
    f726:	4630      	mov	r0, r6
    f728:	f7fb ff22 	bl	b570 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f72c:	2201      	movs	r2, #1
    f72e:	4b06      	ldr	r3, [pc, #24]	; (f748 <ull_event_done+0x5c>)
    f730:	4628      	mov	r0, r5
    f732:	4611      	mov	r1, r2
    f734:	f7fb ff90 	bl	b658 <mayfly_enqueue>
}
    f738:	4620      	mov	r0, r4
    f73a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    f73c:	2400      	movs	r4, #0
    f73e:	e7fb      	b.n	f738 <ull_event_done+0x4c>
    f740:	20000408 	.word	0x20000408
    f744:	20002f64 	.word	0x20002f64
    f748:	200005b0 	.word	0x200005b0

0000f74c <ticker_cb>:
{
    f74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f750:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    f752:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f756:	4295      	cmp	r5, r2
{
    f758:	b08a      	sub	sp, #40	; 0x28
    f75a:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    f75c:	d018      	beq.n	f790 <ticker_cb+0x44>
	return ++hdr->ref;
    f75e:	7c1b      	ldrb	r3, [r3, #16]
    f760:	3301      	adds	r3, #1
    f762:	b2db      	uxtb	r3, r3
    f764:	4680      	mov	r8, r0
    f766:	460f      	mov	r7, r1
    f768:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
    f76a:	2b00      	cmp	r3, #0
    f76c:	d061      	beq.n	f832 <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
    f76e:	4e38      	ldr	r6, [pc, #224]	; (f850 <ticker_cb+0x104>)
		mfy.param = &p;
    f770:	4b38      	ldr	r3, [pc, #224]	; (f854 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
    f772:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f776:	2200      	movs	r2, #0
	lll = &adv->lll;
    f778:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f77c:	4611      	mov	r1, r2
    f77e:	2001      	movs	r0, #1
		mfy.param = &p;
    f780:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
    f782:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
    f784:	8135      	strh	r5, [r6, #8]
		p.param = lll;
    f786:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f78a:	f7fb ff65 	bl	b658 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f78e:	b938      	cbnz	r0, f7a0 <ticker_cb+0x54>
	if (!lll->is_hdcd)
    f790:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    f794:	f015 0501 	ands.w	r5, r5, #1
    f798:	d014      	beq.n	f7c4 <ticker_cb+0x78>
}
    f79a:	b00a      	add	sp, #40	; 0x28
    f79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    f7a0:	4a2d      	ldr	r2, [pc, #180]	; (f858 <ticker_cb+0x10c>)
    f7a2:	492e      	ldr	r1, [pc, #184]	; (f85c <ticker_cb+0x110>)
    f7a4:	482e      	ldr	r0, [pc, #184]	; (f860 <ticker_cb+0x114>)
    f7a6:	f240 6395 	movw	r3, #1685	; 0x695
    f7aa:	f013 fb00 	bl	22dae <printk>
    f7ae:	4040      	eors	r0, r0
    f7b0:	f380 8811 	msr	BASEPRI, r0
    f7b4:	f04f 0003 	mov.w	r0, #3
    f7b8:	df02      	svc	2
	if (!lll->is_hdcd)
    f7ba:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    f7be:	f015 0501 	ands.w	r5, r5, #1
    f7c2:	d1ea      	bne.n	f79a <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
    f7c4:	2104      	movs	r1, #4
    f7c6:	a809      	add	r0, sp, #36	; 0x24
    f7c8:	f006 fa30 	bl	15c2c <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f7cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    f7ce:	4925      	ldr	r1, [pc, #148]	; (f864 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f7d0:	4a25      	ldr	r2, [pc, #148]	; (f868 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f7d2:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f7d4:	fba1 3100 	umull	r3, r1, r1, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f7d8:	1aa2      	subs	r2, r4, r2
    f7da:	4c24      	ldr	r4, [pc, #144]	; (f86c <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f7dc:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f7de:	1a43      	subs	r3, r0, r1
    f7e0:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f7e4:	fba4 4202 	umull	r4, r2, r4, r2
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f7e8:	f240 1147 	movw	r1, #327	; 0x147
    f7ec:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f7ee:	0992      	lsrs	r2, r2, #6
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f7f0:	fb01 0313 	mls	r3, r1, r3, r0
				    (TICKER_ID_ADV_BASE +
    f7f4:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f7f6:	491e      	ldr	r1, [pc, #120]	; (f870 <ticker_cb+0x124>)
    f7f8:	9105      	str	r1, [sp, #20]
		random_delay += 1;
    f7fa:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f7fc:	e9cd 5502 	strd	r5, r5, [sp, #8]
    f800:	e9cd 5500 	strd	r5, r5, [sp]
    f804:	4628      	mov	r0, r5
    f806:	b2d2      	uxtb	r2, r2
    f808:	2101      	movs	r1, #1
		random_delay += 1;
    f80a:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f80c:	f7fd f9ea 	bl	cbe4 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f810:	f030 0302 	bics.w	r3, r0, #2
    f814:	d0c1      	beq.n	f79a <ticker_cb+0x4e>
    f816:	4a10      	ldr	r2, [pc, #64]	; (f858 <ticker_cb+0x10c>)
    f818:	4916      	ldr	r1, [pc, #88]	; (f874 <ticker_cb+0x128>)
    f81a:	4811      	ldr	r0, [pc, #68]	; (f860 <ticker_cb+0x114>)
    f81c:	f240 63ab 	movw	r3, #1707	; 0x6ab
    f820:	f013 fac5 	bl	22dae <printk>
    f824:	4040      	eors	r0, r0
    f826:	f380 8811 	msr	BASEPRI, r0
    f82a:	f04f 0003 	mov.w	r0, #3
    f82e:	df02      	svc	2
}
    f830:	e7b3      	b.n	f79a <ticker_cb+0x4e>
		LL_ASSERT(ref);
    f832:	4a09      	ldr	r2, [pc, #36]	; (f858 <ticker_cb+0x10c>)
    f834:	4910      	ldr	r1, [pc, #64]	; (f878 <ticker_cb+0x12c>)
    f836:	480a      	ldr	r0, [pc, #40]	; (f860 <ticker_cb+0x114>)
    f838:	f240 6389 	movw	r3, #1673	; 0x689
    f83c:	f013 fab7 	bl	22dae <printk>
    f840:	4040      	eors	r0, r0
    f842:	f380 8811 	msr	BASEPRI, r0
    f846:	f04f 0003 	mov.w	r0, #3
    f84a:	df02      	svc	2
    f84c:	e78f      	b.n	f76e <ticker_cb+0x22>
    f84e:	bf00      	nop
    f850:	20003314 	.word	0x20003314
    f854:	200005d0 	.word	0x200005d0
    f858:	0002c990 	.word	0x0002c990
    f85c:	0002c86c 	.word	0x0002c86c
    f860:	0002c5e0 	.word	0x0002c5e0
    f864:	90d4f121 	.word	0x90d4f121
    f868:	200032b0 	.word	0x200032b0
    f86c:	ba2e8ba3 	.word	0xba2e8ba3
    f870:	0000f9b5 	.word	0x0000f9b5
    f874:	0002c9d4 	.word	0x0002c9d4
    f878:	0002c9d0 	.word	0x0002c9d0

0000f87c <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    f87c:	2800      	cmp	r0, #0
    f87e:	d132      	bne.n	f8e6 <ticker_op_stop_cb+0x6a>
{
    f880:	b538      	push	{r3, r4, r5, lr}
    f882:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
    f884:	4d1f      	ldr	r5, [pc, #124]	; (f904 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
    f886:	7c09      	ldrb	r1, [r1, #16]
    f888:	f104 031c 	add.w	r3, r4, #28
    f88c:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
    f88e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f892:	b1e1      	cbz	r1, f8ce <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
    f894:	6962      	ldr	r2, [r4, #20]
    f896:	b16a      	cbz	r2, f8b4 <ticker_op_stop_cb+0x38>
    f898:	4a1b      	ldr	r2, [pc, #108]	; (f908 <ticker_op_stop_cb+0x8c>)
    f89a:	491c      	ldr	r1, [pc, #112]	; (f90c <ticker_op_stop_cb+0x90>)
    f89c:	481c      	ldr	r0, [pc, #112]	; (f910 <ticker_op_stop_cb+0x94>)
    f89e:	f240 63fc 	movw	r3, #1788	; 0x6fc
    f8a2:	f013 fa84 	bl	22dae <printk>
    f8a6:	4040      	eors	r0, r0
    f8a8:	f380 8811 	msr	BASEPRI, r0
    f8ac:	f04f 0003 	mov.w	r0, #3
    f8b0:	df02      	svc	2
    f8b2:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    f8b4:	4917      	ldr	r1, [pc, #92]	; (f914 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
    f8b6:	4818      	ldr	r0, [pc, #96]	; (f918 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
    f8b8:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f8ba:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    f8bc:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    f8be:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f8c0:	4b10      	ldr	r3, [pc, #64]	; (f904 <ticker_op_stop_cb+0x88>)
    f8c2:	4611      	mov	r1, r2
    f8c4:	2002      	movs	r0, #2
    f8c6:	f7fb fec7 	bl	b658 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f8ca:	b968      	cbnz	r0, f8e8 <ticker_op_stop_cb+0x6c>
}
    f8cc:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    f8ce:	4b11      	ldr	r3, [pc, #68]	; (f914 <ticker_op_stop_cb+0x98>)
    f8d0:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f8d2:	2101      	movs	r1, #1
    f8d4:	462b      	mov	r3, r5
    f8d6:	2002      	movs	r0, #2
    f8d8:	f7fb febe 	bl	b658 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f8dc:	2800      	cmp	r0, #0
    f8de:	d0f5      	beq.n	f8cc <ticker_op_stop_cb+0x50>
    f8e0:	f44f 63e1 	mov.w	r3, #1800	; 0x708
    f8e4:	e002      	b.n	f8ec <ticker_op_stop_cb+0x70>
    f8e6:	4770      	bx	lr
		LL_ASSERT(!ret);
    f8e8:	f240 7303 	movw	r3, #1795	; 0x703
		LL_ASSERT(!ret);
    f8ec:	4a06      	ldr	r2, [pc, #24]	; (f908 <ticker_op_stop_cb+0x8c>)
    f8ee:	490b      	ldr	r1, [pc, #44]	; (f91c <ticker_op_stop_cb+0xa0>)
    f8f0:	4807      	ldr	r0, [pc, #28]	; (f910 <ticker_op_stop_cb+0x94>)
    f8f2:	f013 fa5c 	bl	22dae <printk>
    f8f6:	4040      	eors	r0, r0
    f8f8:	f380 8811 	msr	BASEPRI, r0
    f8fc:	f04f 0003 	mov.w	r0, #3
    f900:	df02      	svc	2
}
    f902:	bd38      	pop	{r3, r4, r5, pc}
    f904:	200005e0 	.word	0x200005e0
    f908:	0002c990 	.word	0x0002c990
    f90c:	0002c9f0 	.word	0x0002c9f0
    f910:	0002c5e0 	.word	0x0002c5e0
    f914:	0000f921 	.word	0x0000f921
    f918:	00015c99 	.word	0x00015c99
    f91c:	0002c86c 	.word	0x0002c86c

0000f920 <disabled_cb>:
{
    f920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    f922:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    f924:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
    f926:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    f928:	b1d7      	cbz	r7, f960 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    f92a:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
    f92c:	2300      	movs	r3, #0
    f92e:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
    f930:	b34c      	cbz	r4, f986 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    f932:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
    f934:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f938:	2213      	movs	r2, #19
	adv->node_rx_cc_free = NULL;
    f93a:	64a9      	str	r1, [r5, #72]	; 0x48
__ssp_bos_icheck3(memset, void *, int)
    f93c:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f940:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
    f942:	80e3      	strh	r3, [r4, #6]
    f944:	221e      	movs	r2, #30
    f946:	f01b ff29 	bl	2b79c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f94a:	233c      	movs	r3, #60	; 0x3c
	rx->hdr.rx_ftr.param = param;
    f94c:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    f94e:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f950:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    f952:	4621      	mov	r1, r4
    f954:	f7ff fca6 	bl	f2a4 <ll_rx_put>
}
    f958:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    f95c:	f7ff bcac 	b.w	f2b8 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    f960:	4a10      	ldr	r2, [pc, #64]	; (f9a4 <disabled_cb+0x84>)
    f962:	4911      	ldr	r1, [pc, #68]	; (f9a8 <disabled_cb+0x88>)
    f964:	4811      	ldr	r0, [pc, #68]	; (f9ac <disabled_cb+0x8c>)
    f966:	f240 7315 	movw	r3, #1813	; 0x715
    f96a:	f013 fa20 	bl	22dae <printk>
    f96e:	4040      	eors	r0, r0
    f970:	f380 8811 	msr	BASEPRI, r0
    f974:	f04f 0003 	mov.w	r0, #3
    f978:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    f97a:	6cac      	ldr	r4, [r5, #72]	; 0x48
    f97c:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
    f97e:	2300      	movs	r3, #0
    f980:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
    f982:	2c00      	cmp	r4, #0
    f984:	d1d5      	bne.n	f932 <disabled_cb+0x12>
    f986:	4a07      	ldr	r2, [pc, #28]	; (f9a4 <disabled_cb+0x84>)
    f988:	4909      	ldr	r1, [pc, #36]	; (f9b0 <disabled_cb+0x90>)
    f98a:	4808      	ldr	r0, [pc, #32]	; (f9ac <disabled_cb+0x8c>)
    f98c:	f240 7319 	movw	r3, #1817	; 0x719
    f990:	f013 fa0d 	bl	22dae <printk>
    f994:	4040      	eors	r0, r0
    f996:	f380 8811 	msr	BASEPRI, r0
    f99a:	f04f 0003 	mov.w	r0, #3
    f99e:	df02      	svc	2
    f9a0:	6cac      	ldr	r4, [r5, #72]	; 0x48
    f9a2:	e7c6      	b.n	f932 <disabled_cb+0x12>
    f9a4:	0002c990 	.word	0x0002c990
    f9a8:	0002ca04 	.word	0x0002ca04
    f9ac:	0002c5e0 	.word	0x0002c5e0
    f9b0:	0002ca18 	.word	0x0002ca18

0000f9b4 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    f9b4:	b900      	cbnz	r0, f9b8 <ticker_op_update_cb+0x4>
    f9b6:	4770      	bx	lr
{
    f9b8:	b510      	push	{r4, lr}
    f9ba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    f9bc:	f7ff fd28 	bl	f410 <ull_disable_mark_get>
    f9c0:	4284      	cmp	r4, r0
    f9c2:	d00c      	beq.n	f9de <ticker_op_update_cb+0x2a>
    f9c4:	4a06      	ldr	r2, [pc, #24]	; (f9e0 <ticker_op_update_cb+0x2c>)
    f9c6:	4907      	ldr	r1, [pc, #28]	; (f9e4 <ticker_op_update_cb+0x30>)
    f9c8:	4807      	ldr	r0, [pc, #28]	; (f9e8 <ticker_op_update_cb+0x34>)
    f9ca:	f240 63cc 	movw	r3, #1740	; 0x6cc
    f9ce:	f013 f9ee 	bl	22dae <printk>
    f9d2:	4040      	eors	r0, r0
    f9d4:	f380 8811 	msr	BASEPRI, r0
    f9d8:	f04f 0003 	mov.w	r0, #3
    f9dc:	df02      	svc	2
}
    f9de:	bd10      	pop	{r4, pc}
    f9e0:	0002c990 	.word	0x0002c990
    f9e4:	0002ca30 	.word	0x0002ca30
    f9e8:	0002c5e0 	.word	0x0002c5e0

0000f9ec <ticker_stop_cb>:
{
    f9ec:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f9ee:	491a      	ldr	r1, [pc, #104]	; (fa58 <ticker_stop_cb+0x6c>)
    f9f0:	4a1a      	ldr	r2, [pc, #104]	; (fa5c <ticker_stop_cb+0x70>)
    f9f2:	1a59      	subs	r1, r3, r1
{
    f9f4:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f9f6:	fba2 3101 	umull	r3, r1, r2, r1
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f9fa:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
    f9fe:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fa00:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    fa04:	d119      	bne.n	fa3a <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
    fa06:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    fa08:	4b15      	ldr	r3, [pc, #84]	; (fa60 <ticker_stop_cb+0x74>)
    fa0a:	9400      	str	r4, [sp, #0]
    fa0c:	b2d2      	uxtb	r2, r2
    fa0e:	2101      	movs	r1, #1
    fa10:	2000      	movs	r0, #0
    fa12:	f7fd f8ff 	bl	cc14 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fa16:	f030 0302 	bics.w	r3, r0, #2
    fa1a:	d00c      	beq.n	fa36 <ticker_stop_cb+0x4a>
    fa1c:	4a11      	ldr	r2, [pc, #68]	; (fa64 <ticker_stop_cb+0x78>)
    fa1e:	4912      	ldr	r1, [pc, #72]	; (fa68 <ticker_stop_cb+0x7c>)
    fa20:	4812      	ldr	r0, [pc, #72]	; (fa6c <ticker_stop_cb+0x80>)
    fa22:	f240 63de 	movw	r3, #1758	; 0x6de
    fa26:	f013 f9c2 	bl	22dae <printk>
    fa2a:	4040      	eors	r0, r0
    fa2c:	f380 8811 	msr	BASEPRI, r0
    fa30:	f04f 0003 	mov.w	r0, #3
    fa34:	df02      	svc	2
}
    fa36:	b003      	add	sp, #12
    fa38:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    fa3a:	4a0a      	ldr	r2, [pc, #40]	; (fa64 <ticker_stop_cb+0x78>)
    fa3c:	490c      	ldr	r1, [pc, #48]	; (fa70 <ticker_stop_cb+0x84>)
    fa3e:	480b      	ldr	r0, [pc, #44]	; (fa6c <ticker_stop_cb+0x80>)
    fa40:	f240 63d9 	movw	r3, #1753	; 0x6d9
    fa44:	f013 f9b3 	bl	22dae <printk>
    fa48:	4040      	eors	r0, r0
    fa4a:	f380 8811 	msr	BASEPRI, r0
    fa4e:	f04f 0003 	mov.w	r0, #3
    fa52:	df02      	svc	2
    fa54:	e7d7      	b.n	fa06 <ticker_stop_cb+0x1a>
    fa56:	bf00      	nop
    fa58:	200032b0 	.word	0x200032b0
    fa5c:	ba2e8ba3 	.word	0xba2e8ba3
    fa60:	0000f87d 	.word	0x0000f87d
    fa64:	0002c990 	.word	0x0002c990
    fa68:	0002c9d4 	.word	0x0002c9d4
    fa6c:	0002c5e0 	.word	0x0002c5e0
    fa70:	0002ca60 	.word	0x0002ca60

0000fa74 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    fa74:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    fa76:	4c1b      	ldr	r4, [pc, #108]	; (fae4 <conn_release.constprop.0+0x70>)
    fa78:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
    fa7a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    fa7c:	b163      	cbz	r3, fa98 <conn_release.constprop.0+0x24>
    fa7e:	4a1a      	ldr	r2, [pc, #104]	; (fae8 <conn_release.constprop.0+0x74>)
    fa80:	491a      	ldr	r1, [pc, #104]	; (faec <conn_release.constprop.0+0x78>)
    fa82:	481b      	ldr	r0, [pc, #108]	; (faf0 <conn_release.constprop.0+0x7c>)
    fa84:	f240 7343 	movw	r3, #1859	; 0x743
    fa88:	f013 f991 	bl	22dae <printk>
    fa8c:	4040      	eors	r0, r0
    fa8e:	f380 8811 	msr	BASEPRI, r0
    fa92:	f04f 0003 	mov.w	r0, #3
    fa96:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    fa98:	f105 0150 	add.w	r1, r5, #80	; 0x50
    fa9c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    faa0:	f7fb fd5c 	bl	b55c <memq_deinit>
	LL_ASSERT(link);
    faa4:	4606      	mov	r6, r0
    faa6:	b170      	cbz	r0, fac6 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    faa8:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    faaa:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
    faac:	f000 ff5a 	bl	10964 <ll_conn_release>
	adv->lll.conn = NULL;
    fab0:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    fab2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
    fab4:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
    fab6:	f7ff fbef 	bl	f298 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    faba:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
    fabc:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
    fabe:	f7ff fbdf 	bl	f280 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    fac2:	6465      	str	r5, [r4, #68]	; 0x44
}
    fac4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    fac6:	4a08      	ldr	r2, [pc, #32]	; (fae8 <conn_release.constprop.0+0x74>)
    fac8:	490a      	ldr	r1, [pc, #40]	; (faf4 <conn_release.constprop.0+0x80>)
    faca:	4809      	ldr	r0, [pc, #36]	; (faf0 <conn_release.constprop.0+0x7c>)
    facc:	f240 7345 	movw	r3, #1861	; 0x745
    fad0:	f013 f96d 	bl	22dae <printk>
    fad4:	4040      	eors	r0, r0
    fad6:	f380 8811 	msr	BASEPRI, r0
    fada:	f04f 0003 	mov.w	r0, #3
    fade:	df02      	svc	2
    fae0:	e7e2      	b.n	faa8 <conn_release.constprop.0+0x34>
    fae2:	bf00      	nop
    fae4:	200032b0 	.word	0x200032b0
    fae8:	0002c990 	.word	0x0002c990
    faec:	0002ca6c 	.word	0x0002ca6c
    faf0:	0002c5e0 	.word	0x0002c5e0
    faf4:	0002caf4 	.word	0x0002caf4

0000faf8 <ll_adv_params_set>:
{
    faf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fafc:	4d4a      	ldr	r5, [pc, #296]	; (fc28 <ll_adv_params_set+0x130>)
	if (!adv || adv->is_enabled) {
    fafe:	4c4b      	ldr	r4, [pc, #300]	; (fc2c <ll_adv_params_set+0x134>)
{
    fb00:	4686      	mov	lr, r0
    fb02:	460e      	mov	r6, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb04:	e895 0003 	ldmia.w	r5, {r0, r1}
{
    fb08:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    fb0a:	f894 804e 	ldrb.w	r8, [r4, #78]	; 0x4e
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb0e:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
    fb10:	f018 0001 	ands.w	r0, r8, #1
{
    fb14:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    fb16:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    fb1a:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fb1e:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    fb22:	d17c      	bne.n	fc1e <ll_adv_params_set+0x126>
    fb24:	f894 902d 	ldrb.w	r9, [r4, #45]	; 0x2d
	adv->lll.chan_map = chan_map;
    fb28:	f8b4 8028 	ldrh.w	r8, [r4, #40]	; 0x28
    fb2c:	eb04 0989 	add.w	r9, r4, r9, lsl #2
	pdu->type = pdu_adv_type[adv_type];
    fb30:	a902      	add	r1, sp, #8
	adv->lll.chan_map = chan_map;
    fb32:	f00c 0c07 	and.w	ip, ip, #7
		adv->interval = 0;
    fb36:	2e01      	cmp	r6, #1
	pdu->type = pdu_adv_type[adv_type];
    fb38:	4431      	add	r1, r6
	adv->lll.chan_map = chan_map;
    fb3a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    fb3e:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
	pdu->type = pdu_adv_type[adv_type];
    fb42:	f811 9c08 	ldrb.w	r9, [r1, #-8]
    fb46:	7831      	ldrb	r1, [r6, #0]
	adv->lll.chan_map = chan_map;
    fb48:	f005 0503 	and.w	r5, r5, #3
    fb4c:	ea4c 2505 	orr.w	r5, ip, r5, lsl #8
    fb50:	f8df c0dc 	ldr.w	ip, [pc, #220]	; fc30 <ll_adv_params_set+0x138>
    fb54:	ea08 080c 	and.w	r8, r8, ip
	adv->own_addr_type = own_addr_type;
    fb58:	f894 c04e 	ldrb.w	ip, [r4, #78]	; 0x4e
		adv->interval = 0;
    fb5c:	bf08      	it	eq
    fb5e:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
    fb62:	f021 011f 	bic.w	r1, r1, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fb66:	f019 0f0e 	tst.w	r9, #14
	pdu->type = pdu_adv_type[adv_type];
    fb6a:	f009 090f 	and.w	r9, r9, #15
    fb6e:	f8a4 e04c 	strh.w	lr, [r4, #76]	; 0x4c
	adv->own_addr_type = own_addr_type;
    fb72:	f362 0c42 	bfi	ip, r2, #1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fb76:	bf0c      	ite	eq
    fb78:	f04f 0e01 	moveq.w	lr, #1
    fb7c:	f04f 0e00 	movne.w	lr, #0
    fb80:	ea49 0101 	orr.w	r1, r9, r1
	adv->lll.chan_map = chan_map;
    fb84:	ea45 0508 	orr.w	r5, r5, r8
    fb88:	f36e 1145 	bfi	r1, lr, #5, #1
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fb8c:	f01c 0f04 	tst.w	ip, #4
	adv->lll.chan_map = chan_map;
    fb90:	8525      	strh	r5, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fb92:	7031      	strb	r1, [r6, #0]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fb94:	fa5f f58c 	uxtb.w	r5, ip
	adv->own_addr_type = own_addr_type;
    fb98:	f884 c04e 	strb.w	ip, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fb9c:	d00a      	beq.n	fbb4 <ll_adv_params_set+0xbc>
		adv->id_addr_type = direct_addr_type;
    fb9e:	4629      	mov	r1, r5
    fba0:	f363 01c3 	bfi	r1, r3, #3, #1
    fba4:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    fba8:	6839      	ldr	r1, [r7, #0]
    fbaa:	f8c4 104f 	str.w	r1, [r4, #79]	; 0x4f
    fbae:	88b9      	ldrh	r1, [r7, #4]
    fbb0:	f8a4 1053 	strh.w	r1, [r4, #83]	; 0x53
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    fbb4:	7831      	ldrb	r1, [r6, #0]
    fbb6:	f001 050f 	and.w	r5, r1, #15
    fbba:	2d01      	cmp	r5, #1
    fbbc:	f002 0c01 	and.w	ip, r2, #1
    fbc0:	d01f      	beq.n	fc02 <ll_adv_params_set+0x10a>
	} else if (pdu->len == 0) {
    fbc2:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    fbc4:	f36c 1186 	bfi	r1, ip, #6, #1
	} else if (pdu->len == 0) {
    fbc8:	b1ab      	cbz	r3, fbf6 <ll_adv_params_set+0xfe>
		pdu->rx_addr = 0;
    fbca:	f36f 11c7 	bfc	r1, #7, #1
    fbce:	7031      	strb	r1, [r6, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    fbd0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    fbd4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    fbd8:	0192      	lsls	r2, r2, #6
    fbda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fbdc:	f002 0240 	and.w	r2, r2, #64	; 0x40
		if (pdu->len == 0) {
    fbe0:	7859      	ldrb	r1, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    fbe2:	f042 0204 	orr.w	r2, r2, #4
    fbe6:	701a      	strb	r2, [r3, #0]
		if (pdu->len == 0) {
    fbe8:	b911      	cbnz	r1, fbf0 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
    fbea:	2206      	movs	r2, #6
	return 0;
    fbec:	4608      	mov	r0, r1
			pdu->len = BDADDR_SIZE;
    fbee:	705a      	strb	r2, [r3, #1]
}
    fbf0:	b003      	add	sp, #12
    fbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
    fbf6:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
    fbfa:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
    fbfc:	7031      	strb	r1, [r6, #0]
		pdu->len = BDADDR_SIZE;
    fbfe:	7073      	strb	r3, [r6, #1]
    fc00:	e7e6      	b.n	fbd0 <ll_adv_params_set+0xd8>
		pdu->rx_addr = direct_addr_type;
    fc02:	4635      	mov	r5, r6
		pdu->tx_addr = own_addr_type & 0x1;
    fc04:	f36c 1186 	bfi	r1, ip, #6, #1
		pdu->rx_addr = direct_addr_type;
    fc08:	f363 11c7 	bfi	r1, r3, #7, #1
    fc0c:	f805 1b08 	strb.w	r1, [r5], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    fc10:	683b      	ldr	r3, [r7, #0]
    fc12:	60b3      	str	r3, [r6, #8]
    fc14:	88bb      	ldrh	r3, [r7, #4]
    fc16:	80ab      	strh	r3, [r5, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    fc18:	230c      	movs	r3, #12
    fc1a:	7073      	strb	r3, [r6, #1]
    fc1c:	e7d8      	b.n	fbd0 <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
    fc1e:	200c      	movs	r0, #12
}
    fc20:	b003      	add	sp, #12
    fc22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fc26:	bf00      	nop
    fc28:	0002c0ec 	.word	0x0002c0ec
    fc2c:	200032b0 	.word	0x200032b0
    fc30:	fffffcf1 	.word	0xfffffcf1

0000fc34 <ull_adv_init>:
{
    fc34:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    fc36:	4c05      	ldr	r4, [pc, #20]	; (fc4c <ull_adv_init+0x18>)
    fc38:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    fc3c:	f006 fb26 	bl	1628c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    fc40:	f104 0038 	add.w	r0, r4, #56	; 0x38
    fc44:	f006 fb22 	bl	1628c <lll_adv_data_init>
}
    fc48:	2000      	movs	r0, #0
    fc4a:	bd10      	pop	{r4, pc}
    fc4c:	200032b0 	.word	0x200032b0

0000fc50 <ull_adv_reset>:
{
    fc50:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    fc52:	4c46      	ldr	r4, [pc, #280]	; (fd6c <ull_adv_reset+0x11c>)
    fc54:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    fc58:	07da      	lsls	r2, r3, #31
{
    fc5a:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    fc5c:	d544      	bpl.n	fce8 <ull_adv_reset+0x98>
	mark = ull_disable_mark(adv);
    fc5e:	4620      	mov	r0, r4
    fc60:	f7ff fbbe 	bl	f3e0 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    fc64:	4284      	cmp	r4, r0
    fc66:	d00c      	beq.n	fc82 <ull_adv_reset+0x32>
    fc68:	4a41      	ldr	r2, [pc, #260]	; (fd70 <ull_adv_reset+0x120>)
    fc6a:	4942      	ldr	r1, [pc, #264]	; (fd74 <ull_adv_reset+0x124>)
    fc6c:	4842      	ldr	r0, [pc, #264]	; (fd78 <ull_adv_reset+0x128>)
    fc6e:	f44f 63f3 	mov.w	r3, #1944	; 0x798
    fc72:	f013 f89c 	bl	22dae <printk>
    fc76:	4040      	eors	r0, r0
    fc78:	f380 8811 	msr	BASEPRI, r0
    fc7c:	f04f 0003 	mov.w	r0, #3
    fc80:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    fc82:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    fc86:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fc88:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    fc8a:	d430      	bmi.n	fcee <ull_adv_reset+0x9e>
	ret_cb = TICKER_STATUS_BUSY;
    fc8c:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    fc8e:	2103      	movs	r1, #3
    fc90:	4b3a      	ldr	r3, [pc, #232]	; (fd7c <ull_adv_reset+0x12c>)
    fc92:	9500      	str	r5, [sp, #0]
    fc94:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    fc96:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    fc98:	f7fc ffbc 	bl	cc14 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    fc9c:	4629      	mov	r1, r5
    fc9e:	f7ff fb77 	bl	f390 <ull_ticker_status_take>
	if (ret) {
    fca2:	2800      	cmp	r0, #0
    fca4:	d14c      	bne.n	fd40 <ull_adv_reset+0xf0>
	ret = ull_disable(&adv->lll);
    fca6:	4836      	ldr	r0, [pc, #216]	; (fd80 <ull_adv_reset+0x130>)
    fca8:	f7ff fbd6 	bl	f458 <ull_disable>
	LL_ASSERT(!ret);
    fcac:	2800      	cmp	r0, #0
    fcae:	d134      	bne.n	fd1a <ull_adv_reset+0xca>
	mark = ull_disable_unmark(adv);
    fcb0:	482e      	ldr	r0, [pc, #184]	; (fd6c <ull_adv_reset+0x11c>)
    fcb2:	f7ff fba1 	bl	f3f8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    fcb6:	4284      	cmp	r4, r0
    fcb8:	d00c      	beq.n	fcd4 <ull_adv_reset+0x84>
    fcba:	4a2d      	ldr	r2, [pc, #180]	; (fd70 <ull_adv_reset+0x120>)
    fcbc:	492d      	ldr	r1, [pc, #180]	; (fd74 <ull_adv_reset+0x124>)
    fcbe:	482e      	ldr	r0, [pc, #184]	; (fd78 <ull_adv_reset+0x128>)
    fcc0:	f240 73ba 	movw	r3, #1978	; 0x7ba
    fcc4:	f013 f873 	bl	22dae <printk>
    fcc8:	4040      	eors	r0, r0
    fcca:	f380 8811 	msr	BASEPRI, r0
    fcce:	f04f 0003 	mov.w	r0, #3
    fcd2:	df02      	svc	2
	if (adv->lll.conn) {
    fcd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fcd6:	b10b      	cbz	r3, fcdc <ull_adv_reset+0x8c>
		conn_release(adv);
    fcd8:	f7ff fecc 	bl	fa74 <conn_release.constprop.0>
	adv->is_enabled = 0U;
    fcdc:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    fce0:	f36f 0300 	bfc	r3, #0, #1
    fce4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
    fce8:	2000      	movs	r0, #0
    fcea:	b005      	add	sp, #20
    fcec:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
    fcee:	2202      	movs	r2, #2
    fcf0:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fcf2:	2103      	movs	r1, #3
    fcf4:	4b21      	ldr	r3, [pc, #132]	; (fd7c <ull_adv_reset+0x12c>)
    fcf6:	9500      	str	r5, [sp, #0]
    fcf8:	2201      	movs	r2, #1
    fcfa:	2000      	movs	r0, #0
    fcfc:	f7fc ff8a 	bl	cc14 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    fd00:	4629      	mov	r1, r5
    fd02:	f7ff fb45 	bl	f390 <ull_ticker_status_take>
		if (ret) {
    fd06:	2800      	cmp	r0, #0
    fd08:	d0c0      	beq.n	fc8c <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
    fd0a:	4818      	ldr	r0, [pc, #96]	; (fd6c <ull_adv_reset+0x11c>)
    fd0c:	f7ff fb74 	bl	f3f8 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    fd10:	4284      	cmp	r4, r0
    fd12:	d0e9      	beq.n	fce8 <ull_adv_reset+0x98>
    fd14:	f240 73a3 	movw	r3, #1955	; 0x7a3
    fd18:	e019      	b.n	fd4e <ull_adv_reset+0xfe>
	LL_ASSERT(!ret);
    fd1a:	4a15      	ldr	r2, [pc, #84]	; (fd70 <ull_adv_reset+0x120>)
    fd1c:	4919      	ldr	r1, [pc, #100]	; (fd84 <ull_adv_reset+0x134>)
    fd1e:	4816      	ldr	r0, [pc, #88]	; (fd78 <ull_adv_reset+0x128>)
    fd20:	f240 73b7 	movw	r3, #1975	; 0x7b7
    fd24:	f013 f843 	bl	22dae <printk>
    fd28:	4040      	eors	r0, r0
    fd2a:	f380 8811 	msr	BASEPRI, r0
    fd2e:	f04f 0003 	mov.w	r0, #3
    fd32:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    fd34:	480d      	ldr	r0, [pc, #52]	; (fd6c <ull_adv_reset+0x11c>)
    fd36:	f7ff fb5f 	bl	f3f8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    fd3a:	4284      	cmp	r4, r0
    fd3c:	d1bd      	bne.n	fcba <ull_adv_reset+0x6a>
    fd3e:	e7c9      	b.n	fcd4 <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
    fd40:	480a      	ldr	r0, [pc, #40]	; (fd6c <ull_adv_reset+0x11c>)
    fd42:	f7ff fb59 	bl	f3f8 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    fd46:	4284      	cmp	r4, r0
    fd48:	d0ce      	beq.n	fce8 <ull_adv_reset+0x98>
    fd4a:	f240 73b1 	movw	r3, #1969	; 0x7b1
    fd4e:	4a08      	ldr	r2, [pc, #32]	; (fd70 <ull_adv_reset+0x120>)
    fd50:	4908      	ldr	r1, [pc, #32]	; (fd74 <ull_adv_reset+0x124>)
    fd52:	4809      	ldr	r0, [pc, #36]	; (fd78 <ull_adv_reset+0x128>)
    fd54:	f013 f82b 	bl	22dae <printk>
    fd58:	4040      	eors	r0, r0
    fd5a:	f380 8811 	msr	BASEPRI, r0
    fd5e:	f04f 0003 	mov.w	r0, #3
    fd62:	df02      	svc	2
}
    fd64:	2000      	movs	r0, #0
    fd66:	b005      	add	sp, #20
    fd68:	bd30      	pop	{r4, r5, pc}
    fd6a:	bf00      	nop
    fd6c:	200032b0 	.word	0x200032b0
    fd70:	0002c990 	.word	0x0002c990
    fd74:	0002ca80 	.word	0x0002ca80
    fd78:	0002c5e0 	.word	0x0002c5e0
    fd7c:	0000e2a1 	.word	0x0000e2a1
    fd80:	200032cc 	.word	0x200032cc
    fd84:	0002c86c 	.word	0x0002c86c

0000fd88 <ull_adv_reset_finalize>:
{
    fd88:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
    fd8a:	4c09      	ldr	r4, [pc, #36]	; (fdb0 <ull_adv_reset_finalize+0x28>)
    fd8c:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    fd90:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
    fd92:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
    fd94:	f006 fa88 	bl	162a8 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
    fd98:	4620      	mov	r0, r4
    fd9a:	f006 fa85 	bl	162a8 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
    fd9e:	4628      	mov	r0, r5
    fda0:	f006 fa74 	bl	1628c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
    fda4:	4620      	mov	r0, r4
    fda6:	f006 fa71 	bl	1628c <lll_adv_data_init>
}
    fdaa:	2000      	movs	r0, #0
    fdac:	bd38      	pop	{r3, r4, r5, pc}
    fdae:	bf00      	nop
    fdb0:	200032b0 	.word	0x200032b0

0000fdb4 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fdb4:	4a03      	ldr	r2, [pc, #12]	; (fdc4 <ull_adv_handle_get+0x10>)
    fdb6:	4b04      	ldr	r3, [pc, #16]	; (fdc8 <ull_adv_handle_get+0x14>)
    fdb8:	1a80      	subs	r0, r0, r2
    fdba:	fba3 3000 	umull	r3, r0, r3, r0
}
    fdbe:	f3c0 108f 	ubfx	r0, r0, #6, #16
    fdc2:	4770      	bx	lr
    fdc4:	200032b0 	.word	0x200032b0
    fdc8:	ba2e8ba3 	.word	0xba2e8ba3

0000fdcc <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fdcc:	4a04      	ldr	r2, [pc, #16]	; (fde0 <ull_adv_lll_handle_get+0x14>)
    fdce:	6800      	ldr	r0, [r0, #0]
    fdd0:	4b04      	ldr	r3, [pc, #16]	; (fde4 <ull_adv_lll_handle_get+0x18>)
    fdd2:	1a80      	subs	r0, r0, r2
    fdd4:	fba3 3000 	umull	r3, r0, r3, r0
}
    fdd8:	f3c0 108f 	ubfx	r0, r0, #6, #16
    fddc:	4770      	bx	lr
    fdde:	bf00      	nop
    fde0:	200032b0 	.word	0x200032b0
    fde4:	ba2e8ba3 	.word	0xba2e8ba3

0000fde8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    fde8:	b938      	cbnz	r0, fdfa <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    fdea:	4805      	ldr	r0, [pc, #20]	; (fe00 <ull_adv_is_enabled_get+0x18>)
    fdec:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
    fdf0:	f013 0f01 	tst.w	r3, #1
    fdf4:	bf08      	it	eq
    fdf6:	2000      	moveq	r0, #0
    fdf8:	4770      	bx	lr
		return NULL;
    fdfa:	2000      	movs	r0, #0
}
    fdfc:	4770      	bx	lr
    fdfe:	bf00      	nop
    fe00:	200032b0 	.word	0x200032b0

0000fe04 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    fe04:	b928      	cbnz	r0, fe12 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    fe06:	4b04      	ldr	r3, [pc, #16]	; (fe18 <ull_adv_is_enabled+0x14>)
    fe08:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
    fe0c:	f000 0001 	and.w	r0, r0, #1
    fe10:	4770      	bx	lr
    fe12:	2000      	movs	r0, #0
}
    fe14:	4770      	bx	lr
    fe16:	bf00      	nop
    fe18:	200032b0 	.word	0x200032b0

0000fe1c <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    fe1c:	b950      	cbnz	r0, fe34 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    fe1e:	4b06      	ldr	r3, [pc, #24]	; (fe38 <ull_adv_filter_pol_get+0x1c>)
    fe20:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
    fe24:	f010 0001 	ands.w	r0, r0, #1
    fe28:	d005      	beq.n	fe36 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    fe2a:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    fe2e:	f000 0003 	and.w	r0, r0, #3
    fe32:	4770      	bx	lr
		return 0;
    fe34:	2000      	movs	r0, #0
}
    fe36:	4770      	bx	lr
    fe38:	200032b0 	.word	0x200032b0

0000fe3c <ull_adv_data_set>:
{
    fe3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    fe40:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
    fe44:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    fe48:	b082      	sub	sp, #8
    fe4a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
    fe4c:	7833      	ldrb	r3, [r6, #0]
    fe4e:	f003 030f 	and.w	r3, r3, #15
    fe52:	2b01      	cmp	r3, #1
    fe54:	d034      	beq.n	fec0 <ull_adv_data_set+0x84>
	if (len > PDU_AC_DATA_SIZE_MAX) {
    fe56:	291f      	cmp	r1, #31
    fe58:	460d      	mov	r5, r1
    fe5a:	d82d      	bhi.n	feb8 <ull_adv_data_set+0x7c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
    fe5c:	4604      	mov	r4, r0
    fe5e:	f10d 0107 	add.w	r1, sp, #7
    fe62:	302c      	adds	r0, #44	; 0x2c
    fe64:	4690      	mov	r8, r2
    fe66:	f006 fa25 	bl	162b4 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
    fe6a:	7832      	ldrb	r2, [r6, #0]
    fe6c:	f3c2 1140 	ubfx	r1, r2, #5, #1
	pdu->type = prev->type;
    fe70:	f3c2 0303 	ubfx	r3, r2, #0, #4
    fe74:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
	pdu->tx_addr = prev->tx_addr;
    fe78:	f3c2 1180 	ubfx	r1, r2, #6, #1
	pdu->type = prev->type;
    fe7c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    fe80:	f002 0280 	and.w	r2, r2, #128	; 0x80
    fe84:	4601      	mov	r1, r0
    fe86:	4313      	orrs	r3, r2
    fe88:	f801 3b02 	strb.w	r3, [r1], #2
    fe8c:	f856 3f02 	ldr.w	r3, [r6, #2]!
    fe90:	f8c0 3002 	str.w	r3, [r0, #2]
    fe94:	88b3      	ldrh	r3, [r6, #4]
    fe96:	808b      	strh	r3, [r1, #4]
    fe98:	4607      	mov	r7, r0
    fe9a:	462a      	mov	r2, r5
    fe9c:	4641      	mov	r1, r8
    fe9e:	3008      	adds	r0, #8
    fea0:	f01b fc5b 	bl	2b75a <memcpy>
	pdu->last = idx;
    fea4:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
    fea8:	3506      	adds	r5, #6
	return 0;
    feaa:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
    feac:	707d      	strb	r5, [r7, #1]
    feae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
    feb2:	b002      	add	sp, #8
    feb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
    feb8:	2012      	movs	r0, #18
}
    feba:	b002      	add	sp, #8
    febc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
    fec0:	2000      	movs	r0, #0
}
    fec2:	b002      	add	sp, #8
    fec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000fec8 <ll_adv_data_set>:
{
    fec8:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    feca:	4601      	mov	r1, r0
    fecc:	4801      	ldr	r0, [pc, #4]	; (fed4 <ll_adv_data_set+0xc>)
    fece:	f7ff bfb5 	b.w	fe3c <ull_adv_data_set>
    fed2:	bf00      	nop
    fed4:	200032b0 	.word	0x200032b0

0000fed8 <ull_scan_rsp_set>:
{
    fed8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    feda:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
    fede:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    fee2:	b083      	sub	sp, #12
    fee4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    fee6:	460e      	mov	r6, r1
    fee8:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
    feea:	f10d 0107 	add.w	r1, sp, #7
    feee:	3038      	adds	r0, #56	; 0x38
    fef0:	4617      	mov	r7, r2
    fef2:	f006 f9df 	bl	162b4 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
    fef6:	782b      	ldrb	r3, [r5, #0]
    fef8:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    fefc:	019b      	lsls	r3, r3, #6
	pdu->len = BDADDR_SIZE + len;
    fefe:	1db2      	adds	r2, r6, #6
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff00:	f043 0304 	orr.w	r3, r3, #4
	pdu->len = BDADDR_SIZE + len;
    ff04:	7042      	strb	r2, [r0, #1]
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff06:	7003      	strb	r3, [r0, #0]
    ff08:	f855 3f02 	ldr.w	r3, [r5, #2]!
    ff0c:	f8c0 3002 	str.w	r3, [r0, #2]
    ff10:	88ab      	ldrh	r3, [r5, #4]
    ff12:	80c3      	strh	r3, [r0, #6]
    ff14:	4639      	mov	r1, r7
    ff16:	4632      	mov	r2, r6
    ff18:	3008      	adds	r0, #8
    ff1a:	f01b fc1e 	bl	2b75a <memcpy>
	pdu->last = idx;
    ff1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ff22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
    ff26:	2000      	movs	r0, #0
    ff28:	b003      	add	sp, #12
    ff2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ff2c <ll_adv_scan_rsp_set>:
{
    ff2c:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    ff2e:	4601      	mov	r1, r0
    ff30:	4801      	ldr	r0, [pc, #4]	; (ff38 <ll_adv_scan_rsp_set+0xc>)
    ff32:	f7ff bfd1 	b.w	fed8 <ull_scan_rsp_set>
    ff36:	bf00      	nop
    ff38:	200032b0 	.word	0x200032b0

0000ff3c <ull_adv_pdu_update_addrs>:
{
    ff3c:	b570      	push	{r4, r5, r6, lr}
    ff3e:	460c      	mov	r4, r1
    ff40:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
    ff42:	f005 f81b 	bl	14f7c <ull_filter_adva_get>
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
		pdu->tx_addr = 1;
    ff46:	7823      	ldrb	r3, [r4, #0]
	if (tx_addr) {
    ff48:	b308      	cbz	r0, ff8e <ull_adv_pdu_update_addrs+0x52>
		pdu->tx_addr = 1;
    ff4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ff4e:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ff50:	7823      	ldrb	r3, [r4, #0]
    ff52:	6802      	ldr	r2, [r0, #0]
    ff54:	f8c4 2002 	str.w	r2, [r4, #2]
    ff58:	f003 030f 	and.w	r3, r3, #15
    ff5c:	8882      	ldrh	r2, [r0, #4]
    ff5e:	80e2      	strh	r2, [r4, #6]
    ff60:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
    ff62:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    ff66:	d001      	beq.n	ff6c <ull_adv_pdu_update_addrs+0x30>
}
    ff68:	4630      	mov	r0, r6
    ff6a:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
    ff6c:	4628      	mov	r0, r5
    ff6e:	f005 f833 	bl	14fd8 <ull_filter_tgta_get>
	if (rx_addr) {
    ff72:	2800      	cmp	r0, #0
    ff74:	d0f8      	beq.n	ff68 <ull_adv_pdu_update_addrs+0x2c>
		pdu->rx_addr = 1;
    ff76:	7822      	ldrb	r2, [r4, #0]
    ff78:	4623      	mov	r3, r4
    ff7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ff7e:	f803 2b08 	strb.w	r2, [r3], #8
    ff82:	6802      	ldr	r2, [r0, #0]
    ff84:	60a2      	str	r2, [r4, #8]
    ff86:	8882      	ldrh	r2, [r0, #4]
    ff88:	809a      	strh	r2, [r3, #4]
}
    ff8a:	4630      	mov	r0, r6
    ff8c:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
    ff8e:	4601      	mov	r1, r0
    ff90:	f3c3 1080 	ubfx	r0, r3, #6, #1
    ff94:	f7fc fe8a 	bl	ccac <ll_addr_get>
    ff98:	e7da      	b.n	ff50 <ull_adv_pdu_update_addrs+0x14>
    ff9a:	bf00      	nop

0000ff9c <tx_ull_dequeue>:
{
    ff9c:	b410      	push	{r4}
    ff9e:	e9d0 246f 	ldrd	r2, r4, [r0, #444]	; 0x1bc
    ffa2:	4603      	mov	r3, r0
    ffa4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ffa6:	b164      	cbz	r4, ffc2 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
    ffa8:	4294      	cmp	r4, r2
    ffaa:	d027      	beq.n	fffc <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
    ffac:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
    ffb0:	4291      	cmp	r1, r2
    ffb2:	d018      	beq.n	ffe6 <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
    ffb4:	6812      	ldr	r2, [r2, #0]
    ffb6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		tx->next = NULL;
    ffba:	2300      	movs	r3, #0
}
    ffbc:	bc10      	pop	{r4}
		tx->next = NULL;
    ffbe:	6003      	str	r3, [r0, #0]
}
    ffc0:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    ffc2:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
    ffc6:	4291      	cmp	r1, r2
    ffc8:	d023      	beq.n	10012 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x13>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    ffca:	7911      	ldrb	r1, [r2, #4]
    ffcc:	f001 0103 	and.w	r1, r1, #3
    ffd0:	2903      	cmp	r1, #3
    ffd2:	d00d      	beq.n	fff0 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
    ffd4:	6812      	ldr	r2, [r2, #0]
    ffd6:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			conn->tx_ctrl = NULL;
    ffda:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    ffdc:	e9c3 2270 	strd	r2, r2, [r3, #448]	; 0x1c0
}
    ffe0:	bc10      	pop	{r4}
		tx->next = tx;
    ffe2:	6000      	str	r0, [r0, #0]
}
    ffe4:	4770      	bx	lr
    ffe6:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
    ffe8:	6809      	ldr	r1, [r1, #0]
    ffea:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
    ffee:	e7e1      	b.n	ffb4 <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
    fff0:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fff2:	2903      	cmp	r1, #3
    fff4:	d0de      	beq.n	ffb4 <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fff6:	290a      	cmp	r1, #10
    fff8:	d1ec      	bne.n	ffd4 <tx_ull_dequeue+0x38>
    fffa:	e7db      	b.n	ffb4 <tx_ull_dequeue+0x18>
    fffc:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
		conn->tx_head = conn->tx_head->next;
   10000:	6812      	ldr	r2, [r2, #0]
   10002:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   10006:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   10008:	bf18      	it	ne
   1000a:	f8c3 21c0 	strne.w	r2, [r3, #448]	; 0x1c0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1000e:	d1e7      	bne.n	ffe0 <tx_ull_dequeue+0x44>
   10010:	e7e3      	b.n	ffda <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   10012:	2a00      	cmp	r2, #0
   10014:	d1e8      	bne.n	ffe8 <tx_ull_dequeue+0x4c>
   10016:	f8d3 11c4 	ldr.w	r1, [r3, #452]	; 0x1c4
   1001a:	4614      	mov	r4, r2
   1001c:	e7f0      	b.n	10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>
   1001e:	bf00      	nop

00010020 <init_reset>:
{
   10020:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   10022:	4813      	ldr	r0, [pc, #76]	; (10070 <init_reset+0x50>)
   10024:	4b13      	ldr	r3, [pc, #76]	; (10074 <init_reset+0x54>)
   10026:	2201      	movs	r2, #1
   10028:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1002c:	f7fb fa1e 	bl	b46c <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   10030:	4b11      	ldr	r3, [pc, #68]	; (10078 <init_reset+0x58>)
   10032:	2203      	movs	r2, #3
   10034:	1d18      	adds	r0, r3, #4
   10036:	2124      	movs	r1, #36	; 0x24
   10038:	f7fb fa18 	bl	b46c <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1003c:	4b0f      	ldr	r3, [pc, #60]	; (1007c <init_reset+0x5c>)
   1003e:	2204      	movs	r2, #4
   10040:	1898      	adds	r0, r3, r2
   10042:	2120      	movs	r1, #32
   10044:	f7fb fa12 	bl	b46c <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   10048:	4b0d      	ldr	r3, [pc, #52]	; (10080 <init_reset+0x60>)
   1004a:	2207      	movs	r2, #7
   1004c:	1d18      	adds	r0, r3, #4
   1004e:	2108      	movs	r1, #8
   10050:	f7fb fa0c 	bl	b46c <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   10054:	4b0b      	ldr	r3, [pc, #44]	; (10084 <init_reset+0x64>)
	default_phy_tx |= PHY_2M;
   10056:	490c      	ldr	r1, [pc, #48]	; (10088 <init_reset+0x68>)
	default_phy_rx |= PHY_2M;
   10058:	4a0c      	ldr	r2, [pc, #48]	; (1008c <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1005a:	480d      	ldr	r0, [pc, #52]	; (10090 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1005c:	251b      	movs	r5, #27
   1005e:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= PHY_2M;
   10060:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   10062:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= PHY_2M;
   10066:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= PHY_2M;
   10068:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1006a:	8004      	strh	r4, [r0, #0]
}
   1006c:	2000      	movs	r0, #0
   1006e:	bd38      	pop	{r3, r4, r5, pc}
   10070:	20003328 	.word	0x20003328
   10074:	20003324 	.word	0x20003324
   10078:	20003510 	.word	0x20003510
   1007c:	20003580 	.word	0x20003580
   10080:	20003604 	.word	0x20003604
   10084:	200080ce 	.word	0x200080ce
   10088:	20008600 	.word	0x20008600
   1008c:	200085ff 	.word	0x200085ff
   10090:	200080d0 	.word	0x200080d0

00010094 <ctrl_tx_pause_enqueue>:
{
   10094:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   10096:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
{
   1009a:	4604      	mov	r4, r0
   1009c:	460d      	mov	r5, r1
	if (
   1009e:	b11b      	cbz	r3, 100a8 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   100a0:	f890 115e 	ldrb.w	r1, [r0, #350]	; 0x15e
	    conn->tx_head &&
   100a4:	0788      	lsls	r0, r1, #30
   100a6:	d50d      	bpl.n	100c4 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   100a8:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   100ac:	b301      	cbz	r1, 100f0 <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   100ae:	bb4a      	cbnz	r2, 10104 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   100b0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   100b4:	681a      	ldr	r2, [r3, #0]
   100b6:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   100b8:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   100ba:	682b      	ldr	r3, [r5, #0]
   100bc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   100c0:	b19b      	cbz	r3, 100ea <ctrl_tx_pause_enqueue+0x56>
}
   100c2:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   100c4:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   100c8:	07c9      	lsls	r1, r1, #31
   100ca:	d4ed      	bmi.n	100a8 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   100cc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   100d0:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   100d2:	bf04      	itt	eq
   100d4:	6819      	ldreq	r1, [r3, #0]
   100d6:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   100da:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   100de:	b1f9      	cbz	r1, 10120 <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   100e0:	2a00      	cmp	r2, #0
   100e2:	d0e5      	beq.n	100b0 <ctrl_tx_pause_enqueue+0x1c>
   100e4:	f240 73ef 	movw	r3, #2031	; 0x7ef
   100e8:	e00e      	b.n	10108 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   100ea:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   100ee:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   100f0:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   100f2:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
			if (!pause) {
   100f6:	2a00      	cmp	r2, #0
   100f8:	d1e2      	bne.n	100c0 <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   100fa:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
   100fe:	2b00      	cmp	r3, #0
   10100:	d1df      	bne.n	100c2 <ctrl_tx_pause_enqueue+0x2e>
   10102:	e7f2      	b.n	100ea <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   10104:	f640 0301 	movw	r3, #2049	; 0x801
   10108:	4a0a      	ldr	r2, [pc, #40]	; (10134 <ctrl_tx_pause_enqueue+0xa0>)
   1010a:	490b      	ldr	r1, [pc, #44]	; (10138 <ctrl_tx_pause_enqueue+0xa4>)
   1010c:	480b      	ldr	r0, [pc, #44]	; (1013c <ctrl_tx_pause_enqueue+0xa8>)
   1010e:	f012 fe4e 	bl	22dae <printk>
   10112:	4040      	eors	r0, r0
   10114:	f380 8811 	msr	BASEPRI, r0
   10118:	f04f 0003 	mov.w	r0, #3
   1011c:	df02      	svc	2
   1011e:	e7c7      	b.n	100b0 <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   10120:	6819      	ldr	r1, [r3, #0]
   10122:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   10124:	601d      	str	r5, [r3, #0]
			if (!pause) {
   10126:	b90a      	cbnz	r2, 1012c <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
   10128:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   1012c:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   1012e:	2b00      	cmp	r3, #0
   10130:	d1c7      	bne.n	100c2 <ctrl_tx_pause_enqueue+0x2e>
   10132:	e7da      	b.n	100ea <ctrl_tx_pause_enqueue+0x56>
   10134:	0002ca9c 	.word	0x0002ca9c
   10138:	0002cadc 	.word	0x0002cadc
   1013c:	0002c5e0 	.word	0x0002c5e0

00010140 <tx_lll_flush>:
{
   10140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   10144:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10148:	4934      	ldr	r1, [pc, #208]	; (1021c <tx_lll_flush+0xdc>)
{
   1014a:	b083      	sub	sp, #12
   1014c:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1014e:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   10152:	4640      	mov	r0, r8
   10154:	f7fb f9de 	bl	b514 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   10158:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   1015c:	4629      	mov	r1, r5
   1015e:	f006 fd27 	bl	16bb0 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   10162:	6d28      	ldr	r0, [r5, #80]	; 0x50
   10164:	4631      	mov	r1, r6
   10166:	aa01      	add	r2, sp, #4
   10168:	f7fb fa12 	bl	b590 <memq_dequeue>
	while (link) {
   1016c:	b328      	cbz	r0, 101ba <tx_lll_flush+0x7a>
   1016e:	4c2c      	ldr	r4, [pc, #176]	; (10220 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   10170:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10174:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   10178:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1017a:	f894 c001 	ldrb.w	ip, [r4, #1]
   1017e:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   10180:	1c4b      	adds	r3, r1, #1
   10182:	b2db      	uxtb	r3, r3
		last = 0U;
   10184:	459c      	cmp	ip, r3
   10186:	bf08      	it	eq
   10188:	2300      	moveq	r3, #0
	if (last == first) {
   1018a:	429a      	cmp	r2, r3
   1018c:	d035      	beq.n	101fa <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1018e:	7822      	ldrb	r2, [r4, #0]
   10190:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   10194:	eb19 0c02 	adds.w	ip, r9, r2
   10198:	d02f      	beq.n	101fa <tx_lll_flush+0xba>
		lll_tx->node = tx;
   1019a:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   1019c:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   101a0:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   101a2:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   101a6:	6002      	str	r2, [r0, #0]
		tx->next = link;
   101a8:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   101aa:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   101ac:	70e3      	strb	r3, [r4, #3]
   101ae:	aa01      	add	r2, sp, #4
   101b0:	4631      	mov	r1, r6
   101b2:	f7fb f9ed 	bl	b590 <memq_dequeue>
	while (link) {
   101b6:	2800      	cmp	r0, #0
   101b8:	d1de      	bne.n	10178 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   101ba:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
	rx = (void *)&conn->llcp_terminate.node_rx;
   101be:	f508 749e 	add.w	r4, r8, #316	; 0x13c
	LL_ASSERT(rx->hdr.link);
   101c2:	b150      	cbz	r0, 101da <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   101c4:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   101c6:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   101c8:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
	ull_rx_put(link, rx);
   101cc:	f7ff f9f8 	bl	f5c0 <ull_rx_put>
	ull_rx_sched();
   101d0:	f7ff fa06 	bl	f5e0 <ull_rx_sched>
}
   101d4:	b003      	add	sp, #12
   101d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   101da:	4a12      	ldr	r2, [pc, #72]	; (10224 <tx_lll_flush+0xe4>)
   101dc:	4912      	ldr	r1, [pc, #72]	; (10228 <tx_lll_flush+0xe8>)
   101de:	4813      	ldr	r0, [pc, #76]	; (1022c <tx_lll_flush+0xec>)
   101e0:	f240 7394 	movw	r3, #1940	; 0x794
   101e4:	f012 fde3 	bl	22dae <printk>
   101e8:	4040      	eors	r0, r0
   101ea:	f380 8811 	msr	BASEPRI, r0
   101ee:	f04f 0003 	mov.w	r0, #3
   101f2:	df02      	svc	2
   101f4:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
   101f8:	e7e4      	b.n	101c4 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   101fa:	4a0a      	ldr	r2, [pc, #40]	; (10224 <tx_lll_flush+0xe4>)
   101fc:	490c      	ldr	r1, [pc, #48]	; (10230 <tx_lll_flush+0xf0>)
   101fe:	480b      	ldr	r0, [pc, #44]	; (1022c <tx_lll_flush+0xec>)
   10200:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   10204:	f012 fdd3 	bl	22dae <printk>
   10208:	4040      	eors	r0, r0
   1020a:	f380 8811 	msr	BASEPRI, r0
   1020e:	f04f 0003 	mov.w	r0, #3
   10212:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   10214:	2300      	movs	r3, #0
   10216:	801b      	strh	r3, [r3, #0]
   10218:	deff      	udf	#255	; 0xff
   1021a:	bf00      	nop
   1021c:	20003328 	.word	0x20003328
   10220:	200005f0 	.word	0x200005f0
   10224:	0002ca9c 	.word	0x0002ca9c
   10228:	0002caec 	.word	0x0002caec
   1022c:	0002c5e0 	.word	0x0002c5e0
   10230:	0002cae4 	.word	0x0002cae4

00010234 <ticker_op_stop_cb>:
{
   10234:	b510      	push	{r4, lr}
   10236:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10238:	b9b0      	cbnz	r0, 10268 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   1023a:	4b12      	ldr	r3, [pc, #72]	; (10284 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1023c:	2200      	movs	r2, #0
   1023e:	4611      	mov	r1, r2
   10240:	2002      	movs	r0, #2
	mfy.param = param;
   10242:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   10244:	f7fb fa08 	bl	b658 <mayfly_enqueue>
	LL_ASSERT(!retval);
   10248:	b900      	cbnz	r0, 1024c <ticker_op_stop_cb+0x18>
}
   1024a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   1024c:	4a0e      	ldr	r2, [pc, #56]	; (10288 <ticker_op_stop_cb+0x54>)
   1024e:	490f      	ldr	r1, [pc, #60]	; (1028c <ticker_op_stop_cb+0x58>)
   10250:	480f      	ldr	r0, [pc, #60]	; (10290 <ticker_op_stop_cb+0x5c>)
   10252:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
   10256:	f012 fdaa 	bl	22dae <printk>
   1025a:	4040      	eors	r0, r0
   1025c:	f380 8811 	msr	BASEPRI, r0
   10260:	f04f 0003 	mov.w	r0, #3
   10264:	df02      	svc	2
}
   10266:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10268:	4a07      	ldr	r2, [pc, #28]	; (10288 <ticker_op_stop_cb+0x54>)
   1026a:	490a      	ldr	r1, [pc, #40]	; (10294 <ticker_op_stop_cb+0x60>)
   1026c:	4808      	ldr	r0, [pc, #32]	; (10290 <ticker_op_stop_cb+0x5c>)
   1026e:	f240 63e1 	movw	r3, #1761	; 0x6e1
   10272:	f012 fd9c 	bl	22dae <printk>
   10276:	4040      	eors	r0, r0
   10278:	f380 8811 	msr	BASEPRI, r0
   1027c:	f04f 0003 	mov.w	r0, #3
   10280:	df02      	svc	2
   10282:	e7da      	b.n	1023a <ticker_op_stop_cb+0x6>
   10284:	20000668 	.word	0x20000668
   10288:	0002ca9c 	.word	0x0002ca9c
   1028c:	0002c89c 	.word	0x0002c89c
   10290:	0002c5e0 	.word	0x0002c5e0
   10294:	0002cafc 	.word	0x0002cafc

00010298 <ticker_start_conn_op_cb>:
{
   10298:	b510      	push	{r4, lr}
   1029a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1029c:	b990      	cbnz	r0, 102c4 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1029e:	4620      	mov	r0, r4
   102a0:	f7ff f8c8 	bl	f434 <ull_update_unmark>
	LL_ASSERT(p == param);
   102a4:	4284      	cmp	r4, r0
   102a6:	d00c      	beq.n	102c2 <ticker_start_conn_op_cb+0x2a>
   102a8:	4a0d      	ldr	r2, [pc, #52]	; (102e0 <ticker_start_conn_op_cb+0x48>)
   102aa:	490e      	ldr	r1, [pc, #56]	; (102e4 <ticker_start_conn_op_cb+0x4c>)
   102ac:	480e      	ldr	r0, [pc, #56]	; (102e8 <ticker_start_conn_op_cb+0x50>)
   102ae:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   102b2:	f012 fd7c 	bl	22dae <printk>
   102b6:	4040      	eors	r0, r0
   102b8:	f380 8811 	msr	BASEPRI, r0
   102bc:	f04f 0003 	mov.w	r0, #3
   102c0:	df02      	svc	2
}
   102c2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   102c4:	4a06      	ldr	r2, [pc, #24]	; (102e0 <ticker_start_conn_op_cb+0x48>)
   102c6:	4909      	ldr	r1, [pc, #36]	; (102ec <ticker_start_conn_op_cb+0x54>)
   102c8:	4807      	ldr	r0, [pc, #28]	; (102e8 <ticker_start_conn_op_cb+0x50>)
   102ca:	f240 63d5 	movw	r3, #1749	; 0x6d5
   102ce:	f012 fd6e 	bl	22dae <printk>
   102d2:	4040      	eors	r0, r0
   102d4:	f380 8811 	msr	BASEPRI, r0
   102d8:	f04f 0003 	mov.w	r0, #3
   102dc:	df02      	svc	2
   102de:	e7de      	b.n	1029e <ticker_start_conn_op_cb+0x6>
   102e0:	0002ca9c 	.word	0x0002ca9c
   102e4:	0002cb08 	.word	0x0002cb08
   102e8:	0002c5e0 	.word	0x0002c5e0
   102ec:	0002cafc 	.word	0x0002cafc

000102f0 <ticker_stop_conn_op_cb>:
{
   102f0:	b510      	push	{r4, lr}
   102f2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   102f4:	b990      	cbnz	r0, 1031c <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   102f6:	4620      	mov	r0, r4
   102f8:	f7ff f890 	bl	f41c <ull_update_mark>
	LL_ASSERT(p == param);
   102fc:	4284      	cmp	r4, r0
   102fe:	d00c      	beq.n	1031a <ticker_stop_conn_op_cb+0x2a>
   10300:	4a0d      	ldr	r2, [pc, #52]	; (10338 <ticker_stop_conn_op_cb+0x48>)
   10302:	490e      	ldr	r1, [pc, #56]	; (1033c <ticker_stop_conn_op_cb+0x4c>)
   10304:	480e      	ldr	r0, [pc, #56]	; (10340 <ticker_stop_conn_op_cb+0x50>)
   10306:	f240 63ce 	movw	r3, #1742	; 0x6ce
   1030a:	f012 fd50 	bl	22dae <printk>
   1030e:	4040      	eors	r0, r0
   10310:	f380 8811 	msr	BASEPRI, r0
   10314:	f04f 0003 	mov.w	r0, #3
   10318:	df02      	svc	2
}
   1031a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1031c:	4a06      	ldr	r2, [pc, #24]	; (10338 <ticker_stop_conn_op_cb+0x48>)
   1031e:	4909      	ldr	r1, [pc, #36]	; (10344 <ticker_stop_conn_op_cb+0x54>)
   10320:	4807      	ldr	r0, [pc, #28]	; (10340 <ticker_stop_conn_op_cb+0x50>)
   10322:	f240 63cb 	movw	r3, #1739	; 0x6cb
   10326:	f012 fd42 	bl	22dae <printk>
   1032a:	4040      	eors	r0, r0
   1032c:	f380 8811 	msr	BASEPRI, r0
   10330:	f04f 0003 	mov.w	r0, #3
   10334:	df02      	svc	2
   10336:	e7de      	b.n	102f6 <ticker_stop_conn_op_cb+0x6>
   10338:	0002ca9c 	.word	0x0002ca9c
   1033c:	0002cb08 	.word	0x0002cb08
   10340:	0002c5e0 	.word	0x0002c5e0
   10344:	0002cafc 	.word	0x0002cafc

00010348 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   10348:	b900      	cbnz	r0, 1034c <ticker_update_conn_op_cb+0x4>
   1034a:	4770      	bx	lr
{
   1034c:	b510      	push	{r4, lr}
   1034e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   10350:	f7ff f87c 	bl	f44c <ull_update_mark_get>
   10354:	4284      	cmp	r4, r0
   10356:	d010      	beq.n	1037a <ticker_update_conn_op_cb+0x32>
   10358:	f7ff f85a 	bl	f410 <ull_disable_mark_get>
   1035c:	4284      	cmp	r4, r0
   1035e:	d00c      	beq.n	1037a <ticker_update_conn_op_cb+0x32>
   10360:	4a06      	ldr	r2, [pc, #24]	; (1037c <ticker_update_conn_op_cb+0x34>)
   10362:	4907      	ldr	r1, [pc, #28]	; (10380 <ticker_update_conn_op_cb+0x38>)
   10364:	4807      	ldr	r0, [pc, #28]	; (10384 <ticker_update_conn_op_cb+0x3c>)
   10366:	f240 63c2 	movw	r3, #1730	; 0x6c2
   1036a:	f012 fd20 	bl	22dae <printk>
   1036e:	4040      	eors	r0, r0
   10370:	f380 8811 	msr	BASEPRI, r0
   10374:	f04f 0003 	mov.w	r0, #3
   10378:	df02      	svc	2
}
   1037a:	bd10      	pop	{r4, pc}
   1037c:	0002ca9c 	.word	0x0002ca9c
   10380:	0002cb14 	.word	0x0002cb14
   10384:	0002c5e0 	.word	0x0002c5e0

00010388 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   10388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1038c:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1038e:	4826      	ldr	r0, [pc, #152]	; (10428 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   10390:	460e      	mov	r6, r1
   10392:	4690      	mov	r8, r2
   10394:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10396:	f7fb f889 	bl	b4ac <mem_acquire>
	if (!tx) {
   1039a:	2800      	cmp	r0, #0
   1039c:	d041      	beq.n	10422 <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1039e:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   103a0:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   103a2:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   103a4:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   103a8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   103ac:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   103ae:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   103b0:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   103b2:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   103b4:	71c1      	strb	r1, [r0, #7]
	if (
   103b6:	b11a      	cbz	r2, 103c0 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   103b8:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	    conn->tx_head &&
   103bc:	0799      	lsls	r1, r3, #30
   103be:	d510      	bpl.n	103e2 <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   103c0:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   103c4:	b33b      	cbz	r3, 10416 <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   103c6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   103ca:	681a      	ldr	r2, [r3, #0]
   103cc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   103ce:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   103d0:	6802      	ldr	r2, [r0, #0]
   103d2:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   103d6:	b1da      	cbz	r2, 10410 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   103d8:	2301      	movs	r3, #1
   103da:	7033      	strb	r3, [r6, #0]

	return 0;
   103dc:	2000      	movs	r0, #0
}
   103de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   103e2:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   103e6:	07db      	lsls	r3, r3, #31
   103e8:	d4ea      	bmi.n	103c0 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   103ea:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   103ee:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   103f0:	bf04      	itt	eq
   103f2:	6813      	ldreq	r3, [r2, #0]
   103f4:	f8c5 31c8 	streq.w	r3, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   103f8:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   103fc:	2b00      	cmp	r3, #0
   103fe:	d1e2      	bne.n	103c6 <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   10400:	6813      	ldr	r3, [r2, #0]
   10402:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   10404:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   10406:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   10408:	e9c5 0070 	strd	r0, r0, [r5, #448]	; 0x1c0
	if (!tx->next) {
   1040c:	2a00      	cmp	r2, #0
   1040e:	d1e3      	bne.n	103d8 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   10410:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
   10414:	e7e0      	b.n	103d8 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   10416:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   10418:	e9c5 006f 	strd	r0, r0, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1041c:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
   10420:	e7d9      	b.n	103d6 <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   10422:	f06f 0068 	mvn.w	r0, #104	; 0x68
   10426:	e7da      	b.n	103de <reject_ext_ind_send.isra.0+0x56>
   10428:	20003580 	.word	0x20003580

0001042c <start_enc_rsp_send>:
{
   1042c:	b570      	push	{r4, r5, r6, lr}
   1042e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   10430:	b179      	cbz	r1, 10452 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   10432:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10436:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   10438:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1043c:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   1043e:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10442:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   10446:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10448:	704e      	strb	r6, [r1, #1]
	return 0;
   1044a:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1044c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1044e:	70cd      	strb	r5, [r1, #3]
}
   10450:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10452:	4826      	ldr	r0, [pc, #152]	; (104ec <start_enc_rsp_send+0xc0>)
   10454:	f7fb f82a 	bl	b4ac <mem_acquire>
		if (!tx) {
   10458:	2800      	cmp	r0, #0
   1045a:	d043      	beq.n	104e4 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   1045c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10460:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   10462:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10466:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   10468:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1046c:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   1046e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10472:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   10476:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10478:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1047a:	71c1      	strb	r1, [r0, #7]
	if (
   1047c:	b1e3      	cbz	r3, 104b8 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   1047e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   10482:	0791      	lsls	r1, r2, #30
   10484:	d418      	bmi.n	104b8 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   10486:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1048a:	07d2      	lsls	r2, r2, #31
   1048c:	d414      	bmi.n	104b8 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   1048e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10492:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   10494:	bf04      	itt	eq
   10496:	681a      	ldreq	r2, [r3, #0]
   10498:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1049c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   104a0:	b1ca      	cbz	r2, 104d6 <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   104a2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   104a6:	681a      	ldr	r2, [r3, #0]
   104a8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   104aa:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   104ac:	6803      	ldr	r3, [r0, #0]
   104ae:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   104b2:	b163      	cbz	r3, 104ce <start_enc_rsp_send+0xa2>
	return 0;
   104b4:	2000      	movs	r0, #0
}
   104b6:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   104b8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   104bc:	2a00      	cmp	r2, #0
   104be:	d1f0      	bne.n	104a2 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   104c0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   104c2:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   104c6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   104ca:	2b00      	cmp	r3, #0
   104cc:	d1f2      	bne.n	104b4 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   104ce:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	return 0;
   104d2:	4618      	mov	r0, r3
}
   104d4:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   104d6:	681a      	ldr	r2, [r3, #0]
   104d8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   104da:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   104dc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   104de:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   104e2:	e7e6      	b.n	104b2 <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   104e4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   104e8:	bd70      	pop	{r4, r5, r6, pc}
   104ea:	bf00      	nop
   104ec:	20003580 	.word	0x20003580

000104f0 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   104f0:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   104f4:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   104f8:	079b      	lsls	r3, r3, #30
{
   104fa:	b570      	push	{r4, r5, r6, lr}
   104fc:	4604      	mov	r4, r0
   104fe:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   10500:	d509      	bpl.n	10516 <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   10502:	2a00      	cmp	r2, #0
   10504:	d03d      	beq.n	10582 <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   10506:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1050a:	681a      	ldr	r2, [r3, #0]
   1050c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1050e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   10510:	682b      	ldr	r3, [r5, #0]
   10512:	b333      	cbz	r3, 10562 <ctrl_tx_sec_enqueue+0x72>
}
   10514:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   10516:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
   1051a:	b1e1      	cbz	r1, 10556 <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1051c:	f890 31b7 	ldrb.w	r3, [r0, #439]	; 0x1b7
   10520:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   10524:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   10528:	4286      	cmp	r6, r0
   1052a:	f003 0301 	and.w	r3, r3, #1
   1052e:	d003      	beq.n	10538 <ctrl_tx_sec_enqueue+0x48>
   10530:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   10534:	2803      	cmp	r0, #3
   10536:	d02c      	beq.n	10592 <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   10538:	b9b3      	cbnz	r3, 10568 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   1053a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1053e:	4299      	cmp	r1, r3
   10540:	d045      	beq.n	105ce <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   10542:	b99a      	cbnz	r2, 1056c <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   10544:	680b      	ldr	r3, [r1, #0]
   10546:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   10548:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl = tx;
   1054a:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   1054c:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
		if (!tx->next) {
   10550:	2b00      	cmp	r3, #0
   10552:	d1df      	bne.n	10514 <ctrl_tx_sec_enqueue+0x24>
   10554:	e005      	b.n	10562 <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   10556:	b94a      	cbnz	r2, 1056c <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   10558:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1055a:	e9c0 556f 	strd	r5, r5, [r0, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1055e:	f8c0 51c4 	str.w	r5, [r0, #452]	; 0x1c4
			conn->tx_data_last = tx;
   10562:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   10566:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   10568:	2a00      	cmp	r2, #0
   1056a:	d036      	beq.n	105da <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   1056c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   10570:	681a      	ldr	r2, [r3, #0]
   10572:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   10574:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   10576:	682b      	ldr	r3, [r5, #0]
   10578:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
		if (!tx->next) {
   1057c:	2b00      	cmp	r3, #0
   1057e:	d1c9      	bne.n	10514 <ctrl_tx_sec_enqueue+0x24>
   10580:	e7ef      	b.n	10562 <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   10582:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   10586:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   10588:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
		if (!tx->next) {
   1058c:	2b00      	cmp	r3, #0
   1058e:	d1c1      	bne.n	10514 <ctrl_tx_sec_enqueue+0x24>
   10590:	e7e7      	b.n	10562 <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   10592:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   10594:	f000 0003 	and.w	r0, r0, #3
   10598:	2803      	cmp	r0, #3
   1059a:	d1cd      	bne.n	10538 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   1059c:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1059e:	2803      	cmp	r0, #3
   105a0:	d001      	beq.n	105a6 <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   105a2:	280a      	cmp	r0, #10
   105a4:	d1c8      	bne.n	10538 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   105a6:	b9f3      	cbnz	r3, 105e6 <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   105a8:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   105ac:	428b      	cmp	r3, r1
   105ae:	d022      	beq.n	105f6 <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   105b0:	b332      	cbz	r2, 10600 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   105b2:	f240 73ef 	movw	r3, #2031	; 0x7ef
			LL_ASSERT(!pause);
   105b6:	4a14      	ldr	r2, [pc, #80]	; (10608 <ctrl_tx_sec_enqueue+0x118>)
   105b8:	4914      	ldr	r1, [pc, #80]	; (1060c <ctrl_tx_sec_enqueue+0x11c>)
   105ba:	4815      	ldr	r0, [pc, #84]	; (10610 <ctrl_tx_sec_enqueue+0x120>)
   105bc:	f012 fbf7 	bl	22dae <printk>
   105c0:	4040      	eors	r0, r0
   105c2:	f380 8811 	msr	BASEPRI, r0
   105c6:	f04f 0003 	mov.w	r0, #3
   105ca:	df02      	svc	2
   105cc:	e7ce      	b.n	1056c <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   105ce:	680b      	ldr	r3, [r1, #0]
   105d0:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   105d4:	2a00      	cmp	r2, #0
   105d6:	d1c9      	bne.n	1056c <ctrl_tx_sec_enqueue+0x7c>
   105d8:	e7b4      	b.n	10544 <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   105da:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   105dc:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   105e0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   105e4:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   105e6:	b112      	cbz	r2, 105ee <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   105e8:	f640 0301 	movw	r3, #2049	; 0x801
   105ec:	e7e3      	b.n	105b6 <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   105ee:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   105f0:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   105f4:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   105f6:	680b      	ldr	r3, [r1, #0]
   105f8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   105fc:	2a00      	cmp	r2, #0
   105fe:	d1d8      	bne.n	105b2 <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   10600:	680b      	ldr	r3, [r1, #0]
   10602:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   10604:	600d      	str	r5, [r1, #0]
			if (!pause) {
   10606:	e783      	b.n	10510 <ctrl_tx_sec_enqueue+0x20>
   10608:	0002ca9c 	.word	0x0002ca9c
   1060c:	0002cadc 	.word	0x0002cadc
   10610:	0002c5e0 	.word	0x0002c5e0

00010614 <event_phy_upd_ind_prep>:
{
   10614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   10618:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   1061c:	f013 0201 	ands.w	r2, r3, #1
{
   10620:	4604      	mov	r4, r0
   10622:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   10624:	f040 8090 	bne.w	10748 <event_phy_upd_ind_prep+0x134>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   10628:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   1062c:	1a69      	subs	r1, r5, r1
   1062e:	0409      	lsls	r1, r1, #16
   10630:	f100 80d6 	bmi.w	107e0 <event_phy_upd_ind_prep+0x1cc>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10634:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
   10638:	2900      	cmp	r1, #0
   1063a:	469c      	mov	ip, r3
   1063c:	f2c0 80fb 	blt.w	10836 <event_phy_upd_ind_prep+0x222>
			conn->llcp_ack = conn->llcp_req;
   10640:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   10644:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		old_tx = lll->phy_tx;
   10648:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
   1064c:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		uint16_t eff_rx_time = lll->max_rx_time;
   10650:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
   10654:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   10658:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   1065c:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   10660:	f040 80c0 	bne.w	107e4 <event_phy_upd_ind_prep+0x1d0>
		uint16_t eff_tx_time = lll->max_tx_time;
   10664:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
   10668:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1066c:	d008      	beq.n	10680 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   1066e:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   10672:	095b      	lsrs	r3, r3, #5
   10674:	f363 0202 	bfi	r2, r3, #0, #3
   10678:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   1067c:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   10680:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   10684:	2d00      	cmp	r5, #0
   10686:	f000 80b6 	beq.w	107f6 <event_phy_upd_ind_prep+0x1e2>
   1068a:	6828      	ldr	r0, [r5, #0]
   1068c:	2800      	cmp	r0, #0
   1068e:	f000 80b2 	beq.w	107f6 <event_phy_upd_ind_prep+0x1e2>
		conn->llcp_rx = rx->hdr.link->mem;
   10692:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   10696:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   1069a:	6841      	ldr	r1, [r0, #4]
   1069c:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   106a0:	f01c 0f02 	tst.w	ip, #2
   106a4:	f3c3 0102 	ubfx	r1, r3, #0, #3
   106a8:	f3c2 0e02 	ubfx	lr, r2, #0, #3
   106ac:	f003 0307 	and.w	r3, r3, #7
   106b0:	f002 0207 	and.w	r2, r2, #7
   106b4:	d102      	bne.n	106bc <event_phy_upd_ind_prep+0xa8>
   106b6:	4599      	cmp	r9, r3
   106b8:	f000 80c5 	beq.w	10846 <event_phy_upd_ind_prep+0x232>
		rx->hdr.handle = lll->handle;
   106bc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   106be:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   106c0:	2219      	movs	r2, #25
		upd->status = 0U;
   106c2:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   106c4:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
   106c6:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   106ca:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
   106cc:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   106ce:	4629      	mov	r1, r5
   106d0:	f7fe fde8 	bl	f2a4 <ll_rx_put>
		rx = conn->llcp_rx;
   106d4:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   106d8:	2d00      	cmp	r5, #0
   106da:	f000 809d 	beq.w	10818 <event_phy_upd_ind_prep+0x204>
   106de:	6828      	ldr	r0, [r5, #0]
   106e0:	2800      	cmp	r0, #0
   106e2:	f000 8099 	beq.w	10818 <event_phy_upd_ind_prep+0x204>
		if ((eff_tx_time <= lll->max_tx_time) &&
   106e6:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
   106ea:	6842      	ldr	r2, [r0, #4]
   106ec:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((eff_tx_time <= lll->max_tx_time) &&
   106f0:	42b3      	cmp	r3, r6
   106f2:	d30a      	bcc.n	1070a <event_phy_upd_ind_prep+0xf6>
   106f4:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   106f8:	d807      	bhi.n	1070a <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   106fa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
   106fe:	42bb      	cmp	r3, r7
   10700:	d303      	bcc.n	1070a <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   10702:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   10706:	f240 80b0 	bls.w	1086a <event_phy_upd_ind_prep+0x256>
		lll->max_tx_time = eff_tx_time;
   1070a:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
   1070e:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10712:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   10714:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   10716:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10718:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1071c:	2103      	movs	r1, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1071e:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10720:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10722:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10724:	776a      	strb	r2, [r5, #29]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   10726:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1072a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1072e:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10730:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   10732:	84aa      	strh	r2, [r5, #36]	; 0x24
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   10734:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   10736:	84ee      	strh	r6, [r5, #38]	; 0x26
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10738:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1073a:	4629      	mov	r1, r5
   1073c:	f7fe fdb2 	bl	f2a4 <ll_rx_put>
}
   10740:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   10744:	f7fe bdb8 	b.w	f2b8 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   10748:	2002      	movs	r0, #2
   1074a:	f7fe fdbb 	bl	f2c4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   1074e:	4607      	mov	r7, r0
   10750:	2800      	cmp	r0, #0
   10752:	d045      	beq.n	107e0 <event_phy_upd_ind_prep+0x1cc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10754:	487c      	ldr	r0, [pc, #496]	; (10948 <event_phy_upd_ind_prep+0x334>)
   10756:	f7fa fea9 	bl	b4ac <mem_acquire>
		if (!tx) {
   1075a:	4606      	mov	r6, r0
   1075c:	2800      	cmp	r0, #0
   1075e:	d03f      	beq.n	107e0 <event_phy_upd_ind_prep+0x1cc>
		conn->llcp.phy_upd_ind.initiate = 0U;
   10760:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   10764:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
   10768:	f3c3 0882 	ubfx	r8, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   1076c:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   10770:	ea58 0802 	orrs.w	r8, r8, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
   10774:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
   10778:	b2db      	uxtb	r3, r3
   1077a:	d17f      	bne.n	1087c <event_phy_upd_ind_prep+0x268>
			conn->llcp_ack = conn->llcp_req;
   1077c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
   10780:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
   10784:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   10786:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
   1078a:	f100 80ad 	bmi.w	108e8 <event_phy_upd_ind_prep+0x2d4>
   1078e:	4643      	mov	r3, r8
   10790:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
   10792:	2205      	movs	r2, #5
   10794:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10796:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1079a:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1079c:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
   1079e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   107a2:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107a4:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
   107a8:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   107aa:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
   107ac:	71f1      	strb	r1, [r6, #7]
	if (
   107ae:	b13b      	cbz	r3, 107c0 <event_phy_upd_ind_prep+0x1ac>
	    !conn->llcp_enc.pause_tx &&
   107b0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   107b4:	0795      	lsls	r5, r2, #30
   107b6:	d403      	bmi.n	107c0 <event_phy_upd_ind_prep+0x1ac>
	    !conn->llcp_phy.pause_tx &&
   107b8:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   107bc:	07d0      	lsls	r0, r2, #31
   107be:	d57a      	bpl.n	108b6 <event_phy_upd_ind_prep+0x2a2>
		if (!conn->tx_ctrl) {
   107c0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   107c4:	2a00      	cmp	r2, #0
   107c6:	f000 8089 	beq.w	108dc <event_phy_upd_ind_prep+0x2c8>
	tx->next = conn->tx_ctrl_last->next;
   107ca:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   107ce:	681a      	ldr	r2, [r3, #0]
   107d0:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
   107d2:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
   107d4:	6833      	ldr	r3, [r6, #0]
   107d6:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
	if (!tx->next) {
   107da:	b90b      	cbnz	r3, 107e0 <event_phy_upd_ind_prep+0x1cc>
		conn->tx_data_last = tx;
   107dc:	f8c4 61cc 	str.w	r6, [r4, #460]	; 0x1cc
}
   107e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   107e4:	f3c3 0182 	ubfx	r1, r3, #2, #3
   107e8:	f361 0202 	bfi	r2, r1, #0, #3
   107ec:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   107f0:	f44f 76a4 	mov.w	r6, #328	; 0x148
   107f4:	e738      	b.n	10668 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   107f6:	4a55      	ldr	r2, [pc, #340]	; (1094c <event_phy_upd_ind_prep+0x338>)
   107f8:	4955      	ldr	r1, [pc, #340]	; (10950 <event_phy_upd_ind_prep+0x33c>)
   107fa:	4856      	ldr	r0, [pc, #344]	; (10954 <event_phy_upd_ind_prep+0x340>)
   107fc:	f640 732c 	movw	r3, #3884	; 0xf2c
   10800:	f012 fad5 	bl	22dae <printk>
   10804:	4040      	eors	r0, r0
   10806:	f380 8811 	msr	BASEPRI, r0
   1080a:	f04f 0003 	mov.w	r0, #3
   1080e:	df02      	svc	2
   10810:	6828      	ldr	r0, [r5, #0]
   10812:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
   10816:	e73c      	b.n	10692 <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   10818:	4a4c      	ldr	r2, [pc, #304]	; (1094c <event_phy_upd_ind_prep+0x338>)
   1081a:	494d      	ldr	r1, [pc, #308]	; (10950 <event_phy_upd_ind_prep+0x33c>)
   1081c:	484d      	ldr	r0, [pc, #308]	; (10954 <event_phy_upd_ind_prep+0x340>)
   1081e:	f640 7358 	movw	r3, #3928	; 0xf58
   10822:	f012 fac4 	bl	22dae <printk>
   10826:	4040      	eors	r0, r0
   10828:	f380 8811 	msr	BASEPRI, r0
   1082c:	f04f 0003 	mov.w	r0, #3
   10830:	df02      	svc	2
   10832:	6828      	ldr	r0, [r5, #0]
   10834:	e757      	b.n	106e6 <event_phy_upd_ind_prep+0xd2>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10836:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   1083a:	2900      	cmp	r1, #0
   1083c:	f43f af00 	beq.w	10640 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   10840:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
   10844:	e700      	b.n	10648 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10846:	4590      	cmp	r8, r2
   10848:	f47f af38 	bne.w	106bc <event_phy_upd_ind_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1084c:	2301      	movs	r3, #1
   1084e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   10850:	4629      	mov	r1, r5
   10852:	f7fe fd27 	bl	f2a4 <ll_rx_put>
				rx = conn->llcp_rx;
   10856:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
				LL_ASSERT(rx && rx->hdr.link);
   1085a:	2d00      	cmp	r5, #0
   1085c:	d064      	beq.n	10928 <event_phy_upd_ind_prep+0x314>
   1085e:	6828      	ldr	r0, [r5, #0]
   10860:	2800      	cmp	r0, #0
   10862:	d061      	beq.n	10928 <event_phy_upd_ind_prep+0x314>
				conn->llcp_rx = rx->hdr.link->mem;
   10864:	6843      	ldr	r3, [r0, #4]
   10866:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1086a:	2301      	movs	r3, #1
   1086c:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1086e:	4629      	mov	r1, r5
   10870:	f7fe fd18 	bl	f2a4 <ll_rx_put>
}
   10874:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   10878:	f7fe bd1e 	b.w	f2b8 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   1087c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1087e:	4429      	add	r1, r5
							 lll->latency +
   10880:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   10882:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
   10886:	f7fe fd3b 	bl	f300 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1088a:	683b      	ldr	r3, [r7, #0]
   1088c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   10890:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   10892:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
			rx = ll_pdu_rx_alloc();
   10896:	f7fe fd33 	bl	f300 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1089a:	6803      	ldr	r3, [r0, #0]
   1089c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   108a0:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   108a2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   108a6:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
   108aa:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
   108ae:	f3c3 0882 	ubfx	r8, r3, #2, #3
   108b2:	095b      	lsrs	r3, r3, #5
   108b4:	e76d      	b.n	10792 <event_phy_upd_ind_prep+0x17e>
		if (conn->tx_head == conn->tx_data) {
   108b6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   108ba:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   108bc:	bf04      	itt	eq
   108be:	681a      	ldreq	r2, [r3, #0]
   108c0:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   108c4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   108c8:	2a00      	cmp	r2, #0
   108ca:	f47f af7e 	bne.w	107ca <event_phy_upd_ind_prep+0x1b6>
			tx->next = conn->tx_head->next;
   108ce:	681a      	ldr	r2, [r3, #0]
   108d0:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
   108d2:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
   108d4:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
   108d6:	e9c4 6670 	strd	r6, r6, [r4, #448]	; 0x1c0
   108da:	e77e      	b.n	107da <event_phy_upd_ind_prep+0x1c6>
			tx->next = conn->tx_head;
   108dc:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
   108de:	e9c4 666f 	strd	r6, r6, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   108e2:	f8c4 61c4 	str.w	r6, [r4, #452]	; 0x1c4
   108e6:	e778      	b.n	107da <event_phy_upd_ind_prep+0x1c6>
				(void)ll_pdu_rx_alloc();
   108e8:	f7fe fd0a 	bl	f300 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   108ec:	2319      	movs	r3, #25
				rx->hdr.handle = lll->handle;
   108ee:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
   108f0:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   108f4:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
   108f6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
   108fa:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
   108fc:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
   108fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10902:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
   10904:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   10908:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1090c:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
   1090e:	4639      	mov	r1, r7
   10910:	f7fe fcc8 	bl	f2a4 <ll_rx_put>
				ll_rx_sched();
   10914:	f7fe fcd0 	bl	f2b8 <ll_rx_sched>
   10918:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   1091c:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
   10920:	f3c3 0882 	ubfx	r8, r3, #2, #3
   10924:	095b      	lsrs	r3, r3, #5
   10926:	e734      	b.n	10792 <event_phy_upd_ind_prep+0x17e>
				LL_ASSERT(rx && rx->hdr.link);
   10928:	4a08      	ldr	r2, [pc, #32]	; (1094c <event_phy_upd_ind_prep+0x338>)
   1092a:	4909      	ldr	r1, [pc, #36]	; (10950 <event_phy_upd_ind_prep+0x33c>)
   1092c:	4809      	ldr	r0, [pc, #36]	; (10954 <event_phy_upd_ind_prep+0x340>)
   1092e:	f640 733b 	movw	r3, #3899	; 0xf3b
   10932:	f012 fa3c 	bl	22dae <printk>
   10936:	4040      	eors	r0, r0
   10938:	f380 8811 	msr	BASEPRI, r0
   1093c:	f04f 0003 	mov.w	r0, #3
   10940:	df02      	svc	2
   10942:	6828      	ldr	r0, [r5, #0]
   10944:	e78e      	b.n	10864 <event_phy_upd_ind_prep+0x250>
   10946:	bf00      	nop
   10948:	20003580 	.word	0x20003580
   1094c:	0002ca9c 	.word	0x0002ca9c
   10950:	0002cb68 	.word	0x0002cb68
   10954:	0002c5e0 	.word	0x0002c5e0

00010958 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   10958:	4801      	ldr	r0, [pc, #4]	; (10960 <ll_conn_acquire+0x8>)
   1095a:	f7fa bda7 	b.w	b4ac <mem_acquire>
   1095e:	bf00      	nop
   10960:	20003324 	.word	0x20003324

00010964 <ll_conn_release>:
	mem_release(conn, &conn_free);
   10964:	4901      	ldr	r1, [pc, #4]	; (1096c <ll_conn_release+0x8>)
   10966:	f7fa bdb7 	b.w	b4d8 <mem_release>
   1096a:	bf00      	nop
   1096c:	20003324 	.word	0x20003324

00010970 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10970:	4902      	ldr	r1, [pc, #8]	; (1097c <ll_conn_handle_get+0xc>)
   10972:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   10976:	f7fa bdcd 	b.w	b514 <mem_index_get>
   1097a:	bf00      	nop
   1097c:	20003328 	.word	0x20003328

00010980 <ll_conn_get>:
{
   10980:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10982:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10986:	4801      	ldr	r0, [pc, #4]	; (1098c <ll_conn_get+0xc>)
   10988:	f7fa bdc0 	b.w	b50c <mem_get>
   1098c:	20003328 	.word	0x20003328

00010990 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10990:	b958      	cbnz	r0, 109aa <ll_connected_get+0x1a>
{
   10992:	b508      	push	{r3, lr}
   10994:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10996:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1099a:	4805      	ldr	r0, [pc, #20]	; (109b0 <ll_connected_get+0x20>)
   1099c:	f7fa fdb6 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   109a0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   109a2:	b903      	cbnz	r3, 109a6 <ll_connected_get+0x16>
}
   109a4:	bd08      	pop	{r3, pc}
		return NULL;
   109a6:	2000      	movs	r0, #0
}
   109a8:	bd08      	pop	{r3, pc}
		return NULL;
   109aa:	2000      	movs	r0, #0
}
   109ac:	4770      	bx	lr
   109ae:	bf00      	nop
   109b0:	20003328 	.word	0x20003328

000109b4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   109b4:	4801      	ldr	r0, [pc, #4]	; (109bc <ll_tx_mem_acquire+0x8>)
   109b6:	f7fa bd79 	b.w	b4ac <mem_acquire>
   109ba:	bf00      	nop
   109bc:	20003510 	.word	0x20003510

000109c0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   109c0:	4901      	ldr	r1, [pc, #4]	; (109c8 <ll_tx_mem_release+0x8>)
   109c2:	f7fa bd89 	b.w	b4d8 <mem_release>
   109c6:	bf00      	nop
   109c8:	20003510 	.word	0x20003510

000109cc <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   109cc:	2800      	cmp	r0, #0
   109ce:	d13d      	bne.n	10a4c <ll_tx_mem_enqueue+0x80>
{
   109d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109d2:	4602      	mov	r2, r0
   109d4:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   109d6:	481f      	ldr	r0, [pc, #124]	; (10a54 <ll_tx_mem_enqueue+0x88>)
   109d8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   109dc:	f7fa fd96 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   109e0:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   109e2:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   109e4:	b9e2      	cbnz	r2, 10a20 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   109e6:	491c      	ldr	r1, [pc, #112]	; (10a58 <ll_tx_mem_enqueue+0x8c>)
   109e8:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   109ea:	784e      	ldrb	r6, [r1, #1]
   109ec:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   109ee:	1c7b      	adds	r3, r7, #1
   109f0:	b2db      	uxtb	r3, r3
		last = 0U;
   109f2:	429e      	cmp	r6, r3
   109f4:	bf08      	it	eq
   109f6:	2300      	moveq	r3, #0
	if (last == first) {
   109f8:	4298      	cmp	r0, r3
   109fa:	d014      	beq.n	10a26 <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   109fc:	460e      	mov	r6, r1
   109fe:	f816 0b04 	ldrb.w	r0, [r6], #4
   10a02:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   10a06:	1837      	adds	r7, r6, r0
   10a08:	d00d      	beq.n	10a26 <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   10a0a:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   10a0c:	607d      	str	r5, [r7, #4]
   10a0e:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   10a10:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   10a12:	b958      	cbnz	r0, 10a2c <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a14:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10a18:	2b00      	cmp	r3, #0
   10a1a:	db11      	blt.n	10a40 <ll_tx_mem_enqueue+0x74>
	return 0;
   10a1c:	2000      	movs	r0, #0
}
   10a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10a20:	f06f 0015 	mvn.w	r0, #21
}
   10a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   10a26:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   10a2c:	4b0b      	ldr	r3, [pc, #44]	; (10a5c <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10a2e:	2101      	movs	r1, #1
   10a30:	2003      	movs	r0, #3
		mfy.param = conn;
   10a32:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10a34:	f7fa fe10 	bl	b658 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10a38:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10a3c:	2b00      	cmp	r3, #0
   10a3e:	daed      	bge.n	10a1c <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   10a40:	4620      	mov	r0, r4
   10a42:	2100      	movs	r1, #0
   10a44:	f003 fe76 	bl	14734 <ull_slave_latency_cancel>
	return 0;
   10a48:	2000      	movs	r0, #0
}
   10a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10a4c:	f06f 0015 	mvn.w	r0, #21
}
   10a50:	4770      	bx	lr
   10a52:	bf00      	nop
   10a54:	20003328 	.word	0x20003328
   10a58:	20000634 	.word	0x20000634
   10a5c:	20000658 	.word	0x20000658

00010a60 <ll_conn_update>:
{
   10a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a64:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   10a68:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   10a6c:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   10a70:	2800      	cmp	r0, #0
   10a72:	d154      	bne.n	10b1e <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10a74:	460c      	mov	r4, r1
   10a76:	4616      	mov	r6, r2
   10a78:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10a7c:	4602      	mov	r2, r0
   10a7e:	4840      	ldr	r0, [pc, #256]	; (10b80 <ll_conn_update+0x120>)
   10a80:	461d      	mov	r5, r3
   10a82:	f7fa fd43 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10a86:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10a88:	2b00      	cmp	r3, #0
   10a8a:	d148      	bne.n	10b1e <ll_conn_update+0xbe>
	if (!cmd) {
   10a8c:	b1e4      	cbz	r4, 10ac8 <ll_conn_update+0x68>
		cmd--;
   10a8e:	3c01      	subs	r4, #1
		if (cmd) {
   10a90:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10a94:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
   10a98:	f890 117d 	ldrb.w	r1, [r0, #381]	; 0x17d
   10a9c:	d04e      	beq.n	10b3c <ll_conn_update+0xdc>
			if ((conn->llcp_conn_param.req ==
   10a9e:	428a      	cmp	r2, r1
   10aa0:	d03a      	beq.n	10b18 <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
   10aa2:	f890 217e 	ldrb.w	r2, [r0, #382]	; 0x17e
			     conn->llcp_conn_param.ack) ||
   10aa6:	f002 0107 	and.w	r1, r2, #7
   10aaa:	2903      	cmp	r1, #3
   10aac:	d134      	bne.n	10b18 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   10aae:	f004 0407 	and.w	r4, r4, #7
   10ab2:	f044 0408 	orr.w	r4, r4, #8
   10ab6:	f022 020f 	bic.w	r2, r2, #15
   10aba:	4314      	orrs	r4, r2
   10abc:	f880 417e 	strb.w	r4, [r0, #382]	; 0x17e
			conn->llcp_conn_param.status = status;
   10ac0:	f880 617f 	strb.w	r6, [r0, #383]	; 0x17f
	return 0;
   10ac4:	4618      	mov	r0, r3
   10ac6:	e028      	b.n	10b1a <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
   10ac8:	f890 317e 	ldrb.w	r3, [r0, #382]	; 0x17e
   10acc:	06d9      	lsls	r1, r3, #27
   10ace:	d529      	bpl.n	10b24 <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
   10ad0:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   10ad4:	2b00      	cmp	r3, #0
   10ad6:	db4c      	blt.n	10b72 <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   10ad8:	f890 2110 	ldrb.w	r2, [r0, #272]	; 0x110
   10adc:	f890 3111 	ldrb.w	r3, [r0, #273]	; 0x111
   10ae0:	4293      	cmp	r3, r2
   10ae2:	d119      	bne.n	10b18 <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10ae4:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
		conn->llcp_cu.interval = interval_max;
   10ae8:	f8a0 9114 	strh.w	r9, [r0, #276]	; 0x114
		conn->llcp_cu.req++;
   10aec:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   10aee:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10af0:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.req++;
   10af4:	f880 3110 	strb.w	r3, [r0, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10af8:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   10afc:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   10afe:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
		conn->llcp_cu.latency = latency;
   10b02:	f8a0 8116 	strh.w	r8, [r0, #278]	; 0x116
		conn->llcp_cu.timeout = timeout;
   10b06:	f8a0 7118 	strh.w	r7, [r0, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10b0a:	f880 2112 	strb.w	r2, [r0, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   10b0e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
	return 0;
   10b12:	4618      	mov	r0, r3
}
   10b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10b18:	200c      	movs	r0, #12
}
   10b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10b1e:	2002      	movs	r0, #2
}
   10b20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   10b24:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   10b28:	07da      	lsls	r2, r3, #31
   10b2a:	d503      	bpl.n	10b34 <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
   10b2c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
		    (!conn->common.fex_valid ||
   10b30:	079b      	lsls	r3, r3, #30
   10b32:	d5cd      	bpl.n	10ad0 <ll_conn_update+0x70>
   10b34:	f890 217c 	ldrb.w	r2, [r0, #380]	; 0x17c
   10b38:	f890 117d 	ldrb.w	r1, [r0, #381]	; 0x17d
			if (conn->llcp_conn_param.req !=
   10b3c:	428a      	cmp	r2, r1
   10b3e:	d1eb      	bne.n	10b18 <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   10b40:	f8b0 317e 	ldrh.w	r3, [r0, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b44:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   10b48:	f8a0 5180 	strh.w	r5, [r0, #384]	; 0x180
			conn->llcp_conn_param.state = cmd;
   10b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   10b50:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   10b52:	f043 0308 	orr.w	r3, r3, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b56:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   10b58:	f8a0 9182 	strh.w	r9, [r0, #386]	; 0x182
			conn->llcp_conn_param.req++;
   10b5c:	f880 217c 	strb.w	r2, [r0, #380]	; 0x17c
			conn->llcp_conn_param.latency = latency;
   10b60:	f8a0 8184 	strh.w	r8, [r0, #388]	; 0x184
			conn->llcp_conn_param.timeout = timeout;
   10b64:	f8a0 7186 	strh.w	r7, [r0, #390]	; 0x186
			conn->llcp_conn_param.state = cmd;
   10b68:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b6c:	db03      	blt.n	10b76 <ll_conn_update+0x116>
	return 0;
   10b6e:	2000      	movs	r0, #0
   10b70:	e7d3      	b.n	10b1a <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10b72:	201a      	movs	r0, #26
   10b74:	e7d1      	b.n	10b1a <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
   10b76:	2100      	movs	r1, #0
   10b78:	f003 fddc 	bl	14734 <ull_slave_latency_cancel>
	return 0;
   10b7c:	2000      	movs	r0, #0
   10b7e:	e7cc      	b.n	10b1a <ll_conn_update+0xba>
   10b80:	20003328 	.word	0x20003328

00010b84 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10b84:	b9c8      	cbnz	r0, 10bba <ll_chm_get+0x36>
{
   10b86:	b538      	push	{r3, r4, r5, lr}
   10b88:	4602      	mov	r2, r0
   10b8a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10b8c:	480c      	ldr	r0, [pc, #48]	; (10bc0 <ll_chm_get+0x3c>)
   10b8e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10b92:	f7fa fcbb 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10b96:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10b98:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10b9a:	b965      	cbnz	r5, 10bb6 <ll_chm_get+0x32>
   10b9c:	f100 0238 	add.w	r2, r0, #56	; 0x38
		conn->chm_updated = 0U;
   10ba0:	f883 51d0 	strb.w	r5, [r3, #464]	; 0x1d0
   10ba4:	6811      	ldr	r1, [r2, #0]
   10ba6:	6021      	str	r1, [r4, #0]
   10ba8:	7911      	ldrb	r1, [r2, #4]
   10baa:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   10bac:	f893 01d0 	ldrb.w	r0, [r3, #464]	; 0x1d0
   10bb0:	2800      	cmp	r0, #0
   10bb2:	d1f5      	bne.n	10ba0 <ll_chm_get+0x1c>
}
   10bb4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10bb6:	2002      	movs	r0, #2
}
   10bb8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10bba:	2002      	movs	r0, #2
}
   10bbc:	4770      	bx	lr
   10bbe:	bf00      	nop
   10bc0:	20003328 	.word	0x20003328

00010bc4 <ll_terminate_ind_send>:
	switch (reason) {
   10bc4:	2929      	cmp	r1, #41	; 0x29
{
   10bc6:	b538      	push	{r3, r4, r5, lr}
   10bc8:	460d      	mov	r5, r1
   10bca:	4604      	mov	r4, r0
	switch (reason) {
   10bcc:	d819      	bhi.n	10c02 <ll_terminate_ind_send+0x3e>
   10bce:	2904      	cmp	r1, #4
   10bd0:	d919      	bls.n	10c06 <ll_terminate_ind_send+0x42>
   10bd2:	1f4b      	subs	r3, r1, #5
   10bd4:	2b24      	cmp	r3, #36	; 0x24
   10bd6:	d816      	bhi.n	10c06 <ll_terminate_ind_send+0x42>
   10bd8:	e8df f003 	tbb	[pc, r3]
   10bdc:	15151517 	.word	0x15151517
   10be0:	15151515 	.word	0x15151515
   10be4:	15151515 	.word	0x15151515
   10be8:	17171515 	.word	0x17171515
   10bec:	15151517 	.word	0x15151517
   10bf0:	15151715 	.word	0x15151715
   10bf4:	15151515 	.word	0x15151515
   10bf8:	15151515 	.word	0x15151515
   10bfc:	15151515 	.word	0x15151515
   10c00:	17          	.byte	0x17
   10c01:	00          	.byte	0x00
   10c02:	293b      	cmp	r1, #59	; 0x3b
   10c04:	d001      	beq.n	10c0a <ll_terminate_ind_send+0x46>
   10c06:	2012      	movs	r0, #18
}
   10c08:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   10c0a:	b9a4      	cbnz	r4, 10c36 <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c0c:	4622      	mov	r2, r4
   10c0e:	480d      	ldr	r0, [pc, #52]	; (10c44 <ll_terminate_ind_send+0x80>)
   10c10:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10c14:	f7fa fc7a 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10c18:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   10c1a:	b962      	cbnz	r2, 10c36 <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   10c1c:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10c20:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   10c24:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
	conn->llcp_terminate.req++;
   10c28:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10c2a:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   10c2c:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10c30:	db03      	blt.n	10c3a <ll_terminate_ind_send+0x76>
	return 0;
   10c32:	4620      	mov	r0, r4
}
   10c34:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c36:	2002      	movs	r0, #2
}
   10c38:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   10c3a:	4621      	mov	r1, r4
   10c3c:	f003 fd7a 	bl	14734 <ull_slave_latency_cancel>
	return 0;
   10c40:	4620      	mov	r0, r4
}
   10c42:	bd38      	pop	{r3, r4, r5, pc}
   10c44:	20003328 	.word	0x20003328

00010c48 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10c48:	b9d8      	cbnz	r0, 10c82 <ll_feature_req_send+0x3a>
{
   10c4a:	b510      	push	{r4, lr}
   10c4c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c4e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10c52:	480f      	ldr	r0, [pc, #60]	; (10c90 <ll_feature_req_send+0x48>)
   10c54:	f7fa fc5a 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10c58:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   10c5a:	b984      	cbnz	r4, 10c7e <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   10c5c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   10c60:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   10c64:	428a      	cmp	r2, r1
   10c66:	d108      	bne.n	10c7a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c68:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   10c6c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c6e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   10c70:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10c74:	db07      	blt.n	10c86 <ll_feature_req_send+0x3e>
	return 0;
   10c76:	4620      	mov	r0, r4
}
   10c78:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10c7a:	200c      	movs	r0, #12
}
   10c7c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c7e:	2002      	movs	r0, #2
}
   10c80:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10c82:	2002      	movs	r0, #2
}
   10c84:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   10c86:	4621      	mov	r1, r4
   10c88:	f003 fd54 	bl	14734 <ull_slave_latency_cancel>
	return 0;
   10c8c:	4620      	mov	r0, r4
}
   10c8e:	bd10      	pop	{r4, pc}
   10c90:	20003328 	.word	0x20003328

00010c94 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10c94:	b9d8      	cbnz	r0, 10cce <ll_version_ind_send+0x3a>
{
   10c96:	b510      	push	{r4, lr}
   10c98:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10c9a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10c9e:	480f      	ldr	r0, [pc, #60]	; (10cdc <ll_version_ind_send+0x48>)
   10ca0:	f7fa fc34 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10ca4:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   10ca6:	b984      	cbnz	r4, 10cca <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   10ca8:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   10cac:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   10cb0:	428a      	cmp	r2, r1
   10cb2:	d108      	bne.n	10cc6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10cb4:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   10cb8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10cba:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   10cbc:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10cc0:	db07      	blt.n	10cd2 <ll_version_ind_send+0x3e>
	return 0;
   10cc2:	4620      	mov	r0, r4
}
   10cc4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   10cc6:	200c      	movs	r0, #12
}
   10cc8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10cca:	2002      	movs	r0, #2
}
   10ccc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10cce:	2002      	movs	r0, #2
}
   10cd0:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   10cd2:	4621      	mov	r1, r4
   10cd4:	f003 fd2e 	bl	14734 <ull_slave_latency_cancel>
	return 0;
   10cd8:	4620      	mov	r0, r4
}
   10cda:	bd10      	pop	{r4, pc}
   10cdc:	20003328 	.word	0x20003328

00010ce0 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10ce0:	2800      	cmp	r0, #0
   10ce2:	d147      	bne.n	10d74 <ll_length_req_send+0x94>
{
   10ce4:	b538      	push	{r3, r4, r5, lr}
   10ce6:	460d      	mov	r5, r1
   10ce8:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10cea:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10cee:	4602      	mov	r2, r0
   10cf0:	4824      	ldr	r0, [pc, #144]	; (10d84 <ll_length_req_send+0xa4>)
   10cf2:	f7fa fc0b 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10cf6:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10cf8:	bb1b      	cbnz	r3, 10d42 <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   10cfa:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   10cfe:	071a      	lsls	r2, r3, #28
   10d00:	d421      	bmi.n	10d46 <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   10d02:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   10d06:	07d1      	lsls	r1, r2, #31
   10d08:	d503      	bpl.n	10d12 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   10d0a:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   10d0e:	0692      	lsls	r2, r2, #26
   10d10:	d519      	bpl.n	10d46 <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   10d12:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   10d16:	f890 21a5 	ldrb.w	r2, [r0, #421]	; 0x1a5
   10d1a:	428a      	cmp	r2, r1
   10d1c:	d017      	beq.n	10d4e <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   10d1e:	f003 0307 	and.w	r3, r3, #7
   10d22:	2b03      	cmp	r3, #3
   10d24:	d004      	beq.n	10d30 <ll_length_req_send+0x50>
   10d26:	3303      	adds	r3, #3
   10d28:	f003 0307 	and.w	r3, r3, #7
   10d2c:	2b01      	cmp	r3, #1
   10d2e:	d80c      	bhi.n	10d4a <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   10d30:	f8b0 31b0 	ldrh.w	r3, [r0, #432]	; 0x1b0
   10d34:	b94b      	cbnz	r3, 10d4a <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   10d36:	f8a0 51b0 	strh.w	r5, [r0, #432]	; 0x1b0
				conn->llcp_length.cache.tx_time = tx_time;
   10d3a:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
				return 0;
   10d3e:	4618      	mov	r0, r3
}
   10d40:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10d42:	2002      	movs	r0, #2
}
   10d44:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10d46:	201a      	movs	r0, #26
}
   10d48:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   10d4a:	200c      	movs	r0, #12
}
   10d4c:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10d4e:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10d52:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   10d56:	f8a0 51aa 	strh.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_length.req++;
   10d5a:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10d5c:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10d60:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   10d62:	f880 21a4 	strb.w	r2, [r0, #420]	; 0x1a4
	conn->llcp_length.tx_time = tx_time;
   10d66:	f8a0 41ae 	strh.w	r4, [r0, #430]	; 0x1ae
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10d6a:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10d6e:	db03      	blt.n	10d78 <ll_length_req_send+0x98>
	return 0;
   10d70:	2000      	movs	r0, #0
}
   10d72:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10d74:	2002      	movs	r0, #2
}
   10d76:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   10d78:	2100      	movs	r1, #0
   10d7a:	f003 fcdb 	bl	14734 <ull_slave_latency_cancel>
	return 0;
   10d7e:	2000      	movs	r0, #0
}
   10d80:	bd38      	pop	{r3, r4, r5, pc}
   10d82:	bf00      	nop
   10d84:	20003328 	.word	0x20003328

00010d88 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   10d88:	4a03      	ldr	r2, [pc, #12]	; (10d98 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   10d8a:	4b04      	ldr	r3, [pc, #16]	; (10d9c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   10d8c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   10d8e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   10d90:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   10d92:	800b      	strh	r3, [r1, #0]
}
   10d94:	4770      	bx	lr
   10d96:	bf00      	nop
   10d98:	200080ce 	.word	0x200080ce
   10d9c:	200080d0 	.word	0x200080d0

00010da0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   10da0:	4a02      	ldr	r2, [pc, #8]	; (10dac <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   10da2:	4b03      	ldr	r3, [pc, #12]	; (10db0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   10da4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   10da6:	8019      	strh	r1, [r3, #0]
}
   10da8:	2000      	movs	r0, #0
   10daa:	4770      	bx	lr
   10dac:	200080ce 	.word	0x200080ce
   10db0:	200080d0 	.word	0x200080d0

00010db4 <ll_length_max_get>:
{
   10db4:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10db6:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10db8:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10dbc:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10dbe:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10dc0:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10dc2:	801c      	strh	r4, [r3, #0]
}
   10dc4:	bc30      	pop	{r4, r5}
   10dc6:	4770      	bx	lr

00010dc8 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10dc8:	b9c0      	cbnz	r0, 10dfc <ll_phy_get+0x34>
{
   10dca:	b538      	push	{r3, r4, r5, lr}
   10dcc:	460d      	mov	r5, r1
   10dce:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10dd0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10dd4:	4602      	mov	r2, r0
   10dd6:	480a      	ldr	r0, [pc, #40]	; (10e00 <ll_phy_get+0x38>)
   10dd8:	f7fa fb98 	bl	b50c <mem_get>
   10ddc:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10dde:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10de0:	b950      	cbnz	r0, 10df8 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   10de2:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   10de6:	f3c2 0202 	ubfx	r2, r2, #0, #3
   10dea:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   10dec:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   10df0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10df4:	7023      	strb	r3, [r4, #0]
}
   10df6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10df8:	2002      	movs	r0, #2
}
   10dfa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10dfc:	2002      	movs	r0, #2
}
   10dfe:	4770      	bx	lr
   10e00:	20003328 	.word	0x20003328

00010e04 <ll_phy_default_set>:
	default_phy_tx = tx;
   10e04:	4a02      	ldr	r2, [pc, #8]	; (10e10 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   10e06:	4b03      	ldr	r3, [pc, #12]	; (10e14 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   10e08:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   10e0a:	7019      	strb	r1, [r3, #0]
}
   10e0c:	2000      	movs	r0, #0
   10e0e:	4770      	bx	lr
   10e10:	20008600 	.word	0x20008600
   10e14:	200085ff 	.word	0x200085ff

00010e18 <ll_phy_req_send>:
{
   10e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   10e1a:	bbd8      	cbnz	r0, 10e94 <ll_phy_req_send+0x7c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10e1c:	460c      	mov	r4, r1
   10e1e:	4615      	mov	r5, r2
   10e20:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10e24:	4602      	mov	r2, r0
   10e26:	4822      	ldr	r0, [pc, #136]	; (10eb0 <ll_phy_req_send+0x98>)
   10e28:	461e      	mov	r6, r3
   10e2a:	f7fa fb6f 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   10e2e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10e30:	bb83      	cbnz	r3, 10e94 <ll_phy_req_send+0x7c>
	if (conn->llcp_phy.disabled ||
   10e32:	f890 71b7 	ldrb.w	r7, [r0, #439]	; 0x1b7
   10e36:	f017 0708 	ands.w	r7, r7, #8
   10e3a:	d12e      	bne.n	10e9a <ll_phy_req_send+0x82>
	    (conn->common.fex_valid &&
   10e3c:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   10e40:	07db      	lsls	r3, r3, #31
   10e42:	d504      	bpl.n	10e4e <ll_phy_req_send+0x36>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   10e44:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   10e48:	f413 6f10 	tst.w	r3, #2304	; 0x900
   10e4c:	d025      	beq.n	10e9a <ll_phy_req_send+0x82>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   10e4e:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
   10e52:	f890 21b5 	ldrb.w	r2, [r0, #437]	; 0x1b5
   10e56:	429a      	cmp	r2, r3
   10e58:	d126      	bne.n	10ea8 <ll_phy_req_send+0x90>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10e5a:	f004 0407 	and.w	r4, r4, #7
   10e5e:	00a4      	lsls	r4, r4, #2
   10e60:	f8b0 11b6 	ldrh.w	r1, [r0, #438]	; 0x1b6
   10e64:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   10e68:	f006 0307 	and.w	r3, r6, #7
   10e6c:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   10e70:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10e74:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10e78:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   10e7c:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   10e80:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10e82:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10e84:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   10e86:	f880 21b4 	strb.w	r2, [r0, #436]	; 0x1b4
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10e8a:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10e8e:	db07      	blt.n	10ea0 <ll_phy_req_send+0x88>
}
   10e90:	4638      	mov	r0, r7
   10e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10e94:	2702      	movs	r7, #2
}
   10e96:	4638      	mov	r0, r7
   10e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10e9a:	271a      	movs	r7, #26
}
   10e9c:	4638      	mov	r0, r7
   10e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   10ea0:	2100      	movs	r1, #0
   10ea2:	f003 fc47 	bl	14734 <ull_slave_latency_cancel>
   10ea6:	e7f3      	b.n	10e90 <ll_phy_req_send+0x78>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10ea8:	270c      	movs	r7, #12
}
   10eaa:	4638      	mov	r0, r7
   10eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10eae:	bf00      	nop
   10eb0:	20003328 	.word	0x20003328

00010eb4 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10eb4:	b9d8      	cbnz	r0, 10eee <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10eb6:	4602      	mov	r2, r0
{
   10eb8:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10eba:	480e      	ldr	r0, [pc, #56]	; (10ef4 <ll_apto_get+0x40>)
   10ebc:	460c      	mov	r4, r1
   10ebe:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10ec2:	f7fa fb23 	bl	b50c <mem_get>
   10ec6:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10ec8:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10eca:	b970      	cbnz	r0, 10eea <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   10ecc:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   10ed0:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   10ed2:	4a09      	ldr	r2, [pc, #36]	; (10ef8 <ll_apto_get+0x44>)
   10ed4:	fb03 f301 	mul.w	r3, r3, r1
   10ed8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   10edc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10ee0:	fba2 2303 	umull	r2, r3, r2, r3
   10ee4:	099b      	lsrs	r3, r3, #6
   10ee6:	8023      	strh	r3, [r4, #0]
}
   10ee8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10eea:	2002      	movs	r0, #2
}
   10eec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10eee:	2002      	movs	r0, #2
}
   10ef0:	4770      	bx	lr
   10ef2:	bf00      	nop
   10ef4:	20003328 	.word	0x20003328
   10ef8:	10624dd3 	.word	0x10624dd3

00010efc <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10efc:	b9d8      	cbnz	r0, 10f36 <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10efe:	4602      	mov	r2, r0
{
   10f00:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f02:	480e      	ldr	r0, [pc, #56]	; (10f3c <ll_apto_set+0x40>)
   10f04:	460d      	mov	r5, r1
   10f06:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10f0a:	f7fa faff 	bl	b50c <mem_get>
   10f0e:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10f10:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10f12:	b970      	cbnz	r0, 10f32 <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   10f14:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   10f16:	f240 44e2 	movw	r4, #1250	; 0x4e2
   10f1a:	fb04 f403 	mul.w	r4, r4, r3
   10f1e:	f242 7310 	movw	r3, #10000	; 0x2710
   10f22:	fb03 4305 	mla	r3, r3, r5, r4
   10f26:	3b01      	subs	r3, #1
   10f28:	fbb3 f3f4 	udiv	r3, r3, r4
   10f2c:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   10f30:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10f32:	2002      	movs	r0, #2
}
   10f34:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10f36:	2002      	movs	r0, #2
}
   10f38:	4770      	bx	lr
   10f3a:	bf00      	nop
   10f3c:	20003328 	.word	0x20003328

00010f40 <ull_conn_init>:
	err = init_reset();
   10f40:	f7ff b86e 	b.w	10020 <init_reset>

00010f44 <ull_conn_reset>:
{
   10f44:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f46:	2200      	movs	r2, #0
   10f48:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   10f4c:	4813      	ldr	r0, [pc, #76]	; (10f9c <ull_conn_reset+0x58>)
   10f4e:	f7fa fadd 	bl	b50c <mem_get>
   10f52:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   10f54:	f100 021c 	add.w	r2, r0, #28
   10f58:	4601      	mov	r1, r0
   10f5a:	2003      	movs	r0, #3
   10f5c:	f7fe faba 	bl	f4d4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   10f60:	b108      	cbz	r0, 10f66 <ull_conn_reset+0x22>
   10f62:	3078      	adds	r0, #120	; 0x78
   10f64:	d10b      	bne.n	10f7e <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   10f66:	480e      	ldr	r0, [pc, #56]	; (10fa0 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   10f68:	490e      	ldr	r1, [pc, #56]	; (10fa4 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   10f6a:	4a0f      	ldr	r2, [pc, #60]	; (10fa8 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   10f6c:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   10f6e:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   10f70:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   10f72:	67a3      	str	r3, [r4, #120]	; 0x78
}
   10f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   10f78:	6013      	str	r3, [r2, #0]
	err = init_reset();
   10f7a:	f7ff b851 	b.w	10020 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   10f7e:	4a0b      	ldr	r2, [pc, #44]	; (10fac <ull_conn_reset+0x68>)
   10f80:	490b      	ldr	r1, [pc, #44]	; (10fb0 <ull_conn_reset+0x6c>)
   10f82:	480c      	ldr	r0, [pc, #48]	; (10fb4 <ull_conn_reset+0x70>)
   10f84:	f240 63f4 	movw	r3, #1780	; 0x6f4
   10f88:	f011 ff11 	bl	22dae <printk>
   10f8c:	4040      	eors	r0, r0
   10f8e:	f380 8811 	msr	BASEPRI, r0
   10f92:	f04f 0003 	mov.w	r0, #3
   10f96:	df02      	svc	2
   10f98:	e7e5      	b.n	10f66 <ull_conn_reset+0x22>
   10f9a:	bf00      	nop
   10f9c:	20003328 	.word	0x20003328
   10fa0:	20000634 	.word	0x20000634
   10fa4:	200005f0 	.word	0x200005f0
   10fa8:	200034fc 	.word	0x200034fc
   10fac:	0002ca9c 	.word	0x0002ca9c
   10fb0:	0002cbac 	.word	0x0002cbac
   10fb4:	0002c5e0 	.word	0x0002c5e0

00010fb8 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   10fb8:	4b01      	ldr	r3, [pc, #4]	; (10fc0 <ull_conn_default_tx_octets_get+0x8>)
}
   10fba:	8818      	ldrh	r0, [r3, #0]
   10fbc:	4770      	bx	lr
   10fbe:	bf00      	nop
   10fc0:	200080ce 	.word	0x200080ce

00010fc4 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   10fc4:	4b01      	ldr	r3, [pc, #4]	; (10fcc <ull_conn_default_tx_time_get+0x8>)
}
   10fc6:	8818      	ldrh	r0, [r3, #0]
   10fc8:	4770      	bx	lr
   10fca:	bf00      	nop
   10fcc:	200080d0 	.word	0x200080d0

00010fd0 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   10fd0:	4b01      	ldr	r3, [pc, #4]	; (10fd8 <ull_conn_default_phy_tx_get+0x8>)
}
   10fd2:	7818      	ldrb	r0, [r3, #0]
   10fd4:	4770      	bx	lr
   10fd6:	bf00      	nop
   10fd8:	20008600 	.word	0x20008600

00010fdc <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   10fdc:	4b01      	ldr	r3, [pc, #4]	; (10fe4 <ull_conn_default_phy_rx_get+0x8>)
}
   10fde:	7818      	ldrb	r0, [r3, #0]
   10fe0:	4770      	bx	lr
   10fe2:	bf00      	nop
   10fe4:	200085ff 	.word	0x200085ff

00010fe8 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   10fe8:	688b      	ldr	r3, [r1, #8]
   10fea:	689b      	ldr	r3, [r3, #8]
{
   10fec:	b510      	push	{r4, lr}
	switch (lll->role) {
   10fee:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   10ff2:	09e4      	lsrs	r4, r4, #7
   10ff4:	d10d      	bne.n	11012 <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   10ff6:	4a0a      	ldr	r2, [pc, #40]	; (11020 <ull_conn_setup+0x38>)
   10ff8:	490a      	ldr	r1, [pc, #40]	; (11024 <ull_conn_setup+0x3c>)
   10ffa:	480b      	ldr	r0, [pc, #44]	; (11028 <ull_conn_setup+0x40>)
   10ffc:	f240 331d 	movw	r3, #797	; 0x31d
   11000:	f011 fed5 	bl	22dae <printk>
   11004:	4040      	eors	r0, r0
   11006:	f380 8811 	msr	BASEPRI, r0
   1100a:	f04f 0003 	mov.w	r0, #3
   1100e:	df02      	svc	2
}
   11010:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   11012:	460a      	mov	r2, r1
}
   11014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   11018:	3208      	adds	r2, #8
   1101a:	f7f0 b811 	b.w	1040 <ull_slave_setup>
   1101e:	bf00      	nop
   11020:	0002ca9c 	.word	0x0002ca9c
   11024:	0002c650 	.word	0x0002c650
   11028:	0002c5e0 	.word	0x0002c5e0

0001102c <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1102c:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1102e:	88da      	ldrh	r2, [r3, #6]
   11030:	2a00      	cmp	r2, #0
   11032:	f040 80ba 	bne.w	111aa <ull_conn_rx+0x17e>
{
   11036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1103a:	460c      	mov	r4, r1
   1103c:	b085      	sub	sp, #20
   1103e:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11040:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   11044:	48b7      	ldr	r0, [pc, #732]	; (11324 <ull_conn_rx+0x2f8>)
   11046:	f7fa fa61 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   1104a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1104c:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   1104e:	2b00      	cmp	r3, #0
   11050:	f040 80ec 	bne.w	1122c <ull_conn_rx+0x200>
	pdu_rx = (void *)(*rx)->pdu;
   11054:	6826      	ldr	r6, [r4, #0]
	switch (pdu_rx->ll_id) {
   11056:	f890 115e 	ldrb.w	r1, [r0, #350]	; 0x15e
   1105a:	7f32      	ldrb	r2, [r6, #28]
   1105c:	f002 0203 	and.w	r2, r2, #3
   11060:	2a03      	cmp	r2, #3
   11062:	f001 0001 	and.w	r0, r1, #1
   11066:	d128      	bne.n	110ba <ull_conn_rx+0x8e>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   11068:	f896 801f 	ldrb.w	r8, [r6, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1106c:	2800      	cmp	r0, #0
   1106e:	d03a      	beq.n	110e6 <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   11070:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11074:	2b00      	cmp	r3, #0
   11076:	f001 0004 	and.w	r0, r1, #4
   1107a:	f2c0 8567 	blt.w	11b4c <ull_conn_rx+0xb20>
	return (!conn->lll.role &&
   1107e:	2800      	cmp	r0, #0
   11080:	f040 84b5 	bne.w	119ee <ull_conn_rx+0x9c2>
		((!conn->llcp_enc.refresh &&
   11084:	f1b8 0f02 	cmp.w	r8, #2
   11088:	f000 8365 	beq.w	11756 <ull_conn_rx+0x72a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1108c:	f1b8 0f05 	cmp.w	r8, #5
   11090:	d04b      	beq.n	1112a <ull_conn_rx+0xfe>
   11092:	f1b8 0f06 	cmp.w	r8, #6
   11096:	f000 857b 	beq.w	11b90 <ull_conn_rx+0xb64>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1109a:	f1b8 0f0d 	cmp.w	r8, #13
   1109e:	f000 8197 	beq.w	113d0 <ull_conn_rx+0x3a4>
   110a2:	f1b8 0f11 	cmp.w	r8, #17
   110a6:	f000 821d 	beq.w	114e4 <ull_conn_rx+0x4b8>
		conn->llcp_terminate.reason_peer =
   110aa:	233d      	movs	r3, #61	; 0x3d
   110ac:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   110b0:	6823      	ldr	r3, [r4, #0]
   110b2:	2201      	movs	r2, #1
   110b4:	711a      	strb	r2, [r3, #4]

		return 0;
   110b6:	2000      	movs	r0, #0
   110b8:	e008      	b.n	110cc <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   110ba:	b952      	cbnz	r2, 110d2 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   110bc:	b118      	cbz	r0, 110c6 <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_peer =
   110be:	233d      	movs	r3, #61	; 0x3d
   110c0:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
   110c4:	6826      	ldr	r6, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   110c6:	2301      	movs	r3, #1
   110c8:	7133      	strb	r3, [r6, #4]
	return 0;
   110ca:	2000      	movs	r0, #0
}
   110cc:	b005      	add	sp, #20
   110ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   110d2:	2800      	cmp	r0, #0
   110d4:	d0f9      	beq.n	110ca <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_peer =
   110d6:	223d      	movs	r2, #61	; 0x3d
   110d8:	f885 213b 	strb.w	r2, [r5, #315]	; 0x13b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   110dc:	6822      	ldr	r2, [r4, #0]
   110de:	2101      	movs	r1, #1
	return 0;
   110e0:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   110e2:	7111      	strb	r1, [r2, #4]
   110e4:	e7f2      	b.n	110cc <ull_conn_rx+0xa0>
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   110e6:	f1b8 0f18 	cmp.w	r8, #24
   110ea:	d81e      	bhi.n	1112a <ull_conn_rx+0xfe>
   110ec:	e8df f018 	tbh	[pc, r8, lsl #1]
   110f0:	033f02bc 	.word	0x033f02bc
   110f4:	03ec0333 	.word	0x03ec0333
   110f8:	001d001d 	.word	0x001d001d
   110fc:	03c60459 	.word	0x03c60459
   11100:	027e0373 	.word	0x027e0373
   11104:	04390230 	.word	0x04390230
   11108:	017001b3 	.word	0x017001b3
   1110c:	015f001d 	.word	0x015f001d
   11110:	01fa001d 	.word	0x01fa001d
   11114:	015501e2 	.word	0x015501e2
   11118:	01200120 	.word	0x01200120
   1111c:	001d00e8 	.word	0x001d00e8
   11120:	00a5      	.short	0x00a5
		nack = pause_enc_rsp_send(conn, *rx, 1);
		break;
#endif /* CONFIG_BT_PERIPHERAL */

	case PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   11122:	7f73      	ldrb	r3, [r6, #29]
   11124:	2b01      	cmp	r3, #1
   11126:	f000 8425 	beq.w	11974 <ull_conn_rx+0x948>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1112a:	487f      	ldr	r0, [pc, #508]	; (11328 <ull_conn_rx+0x2fc>)
   1112c:	f7fa f9be 	bl	b4ac <mem_acquire>
	if (!tx) {
   11130:	2800      	cmp	r0, #0
   11132:	f000 8682 	beq.w	11e3a <ull_conn_rx+0xe0e>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   11136:	2302      	movs	r3, #2
   11138:	7143      	strb	r3, [r0, #5]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1113a:	7903      	ldrb	r3, [r0, #4]
	    conn->tx_head &&
   1113c:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
	pdu->llctrl.unknown_rsp.type = type;
   11140:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11144:	f043 0303 	orr.w	r3, r3, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11148:	2207      	movs	r2, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1114a:	7103      	strb	r3, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1114c:	71c2      	strb	r2, [r0, #7]
	if (
   1114e:	b1e1      	cbz	r1, 1118a <ull_conn_rx+0x15e>
	    !conn->llcp_enc.pause_tx &&
   11150:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	    conn->tx_head &&
   11154:	079a      	lsls	r2, r3, #30
   11156:	d418      	bmi.n	1118a <ull_conn_rx+0x15e>
	    !conn->llcp_phy.pause_tx &&
   11158:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   1115c:	07db      	lsls	r3, r3, #31
   1115e:	d414      	bmi.n	1118a <ull_conn_rx+0x15e>
		if (conn->tx_head == conn->tx_data) {
   11160:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   11164:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   11166:	bf04      	itt	eq
   11168:	680b      	ldreq	r3, [r1, #0]
   1116a:	f8c5 31c8 	streq.w	r3, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1116e:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   11172:	b97b      	cbnz	r3, 11194 <ull_conn_rx+0x168>
			tx->next = conn->tx_head->next;
   11174:	680b      	ldr	r3, [r1, #0]
   11176:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   11178:	6008      	str	r0, [r1, #0]
	if (!tx->next) {
   1117a:	6801      	ldr	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   1117c:	e9c5 0070 	strd	r0, r0, [r5, #448]	; 0x1c0
	if (!tx->next) {
   11180:	2900      	cmp	r1, #0
   11182:	d1a0      	bne.n	110c6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   11184:	f8c5 01cc 	str.w	r0, [r5, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11188:	e79d      	b.n	110c6 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   1118a:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   1118e:	2b00      	cmp	r3, #0
   11190:	f000 84f4 	beq.w	11b7c <ull_conn_rx+0xb50>
	tx->next = conn->tx_ctrl_last->next;
   11194:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   11198:	681a      	ldr	r2, [r3, #0]
   1119a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1119c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1119e:	6801      	ldr	r1, [r0, #0]
   111a0:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   111a4:	2900      	cmp	r1, #0
   111a6:	d18e      	bne.n	110c6 <ull_conn_rx+0x9a>
   111a8:	e7ec      	b.n	11184 <ull_conn_rx+0x158>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   111aa:	2201      	movs	r2, #1
   111ac:	711a      	strb	r2, [r3, #4]
		return 0;
   111ae:	2000      	movs	r0, #0
}
   111b0:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   111b2:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   111b6:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   111b8:	f043 0303 	orr.w	r3, r3, #3
   111bc:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   111c0:	d10f      	bne.n	111e2 <ull_conn_rx+0x1b6>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   111c2:	f8b5 21b6 	ldrh.w	r2, [r5, #438]	; 0x1b6
   111c6:	4859      	ldr	r0, [pc, #356]	; (1132c <ull_conn_rx+0x300>)
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   111c8:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
					conn->llcp_phy.tx =
   111cc:	4010      	ands	r0, r2
   111ce:	f240 42fc 	movw	r2, #1276	; 0x4fc
   111d2:	ea02 0283 	and.w	r2, r2, r3, lsl #2
   111d6:	4302      	orrs	r2, r0
					conn->llcp_phy.ack--;
   111d8:	1e4b      	subs	r3, r1, #1
   111da:	f885 31b5 	strb.w	r3, [r5, #437]	; 0x1b5
					conn->llcp_phy.tx =
   111de:	f8a5 21b6 	strh.w	r2, [r5, #438]	; 0x1b6
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   111e2:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
				conn->llcp_phy.tx &= p->rx_phys;
   111e6:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   111ea:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   111ee:	f3c2 0082 	ubfx	r0, r2, #2, #3
   111f2:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   111f4:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   111f8:	009b      	lsls	r3, r3, #2
   111fa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   111fe:	f002 0203 	and.w	r2, r2, #3
   11202:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   11204:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   11208:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1120c:	d002      	beq.n	11214 <ull_conn_rx+0x1e8>
   1120e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   11212:	d105      	bne.n	11220 <ull_conn_rx+0x1f4>
					conn->llcp_phy.tx = 0;
   11214:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   11218:	f003 0303 	and.w	r3, r3, #3
   1121c:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   11220:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   11224:	f043 0301 	orr.w	r3, r3, #1
   11228:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1122c:	6823      	ldr	r3, [r4, #0]
   1122e:	2201      	movs	r2, #1
	int nack = 0;
   11230:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11232:	711a      	strb	r2, [r3, #4]
}
   11234:	b005      	add	sp, #20
   11236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1123a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1123e:	2b00      	cmp	r3, #0
   11240:	f6bf af73 	bge.w	1112a <ull_conn_rx+0xfe>
   11244:	7f73      	ldrb	r3, [r6, #29]
   11246:	2b05      	cmp	r3, #5
   11248:	f47f af6f 	bne.w	1112a <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   1124c:	f896 1020 	ldrb.w	r1, [r6, #32]
   11250:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   11254:	ea41 0003 	orr.w	r0, r1, r3
   11258:	f010 0007 	ands.w	r0, r0, #7
   1125c:	f040 8707 	bne.w	1206e <ull_conn_rx+0x1042>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11260:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   11264:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   11268:	428b      	cmp	r3, r1
   1126a:	f43f af2c 	beq.w	110c6 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1126e:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11272:	f003 0303 	and.w	r3, r3, #3
   11276:	2b02      	cmp	r3, #2
   11278:	f47f af25 	bne.w	110c6 <ull_conn_rx+0x9a>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1127c:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11280:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11284:	f885 11b5 	strb.w	r1, [r5, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   11288:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1128c:	4611      	mov	r1, r2
   1128e:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11292:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
		if (!conn->llcp_phy.cmd) {
   11296:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   1129a:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1129e:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   112a2:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   112a6:	f43f af19 	beq.w	110dc <ull_conn_rx+0xb0>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   112aa:	6823      	ldr	r3, [r4, #0]
   112ac:	2119      	movs	r1, #25
   112ae:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   112b0:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   112b2:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   112b4:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   112b8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   112bc:	77b3      	strb	r3, [r6, #30]
				 pdu_rx->len)) {
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
   112be:	e705      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   112c0:	7f73      	ldrb	r3, [r6, #29]
   112c2:	2b03      	cmp	r3, #3
   112c4:	f47f af31 	bne.w	1112a <ull_conn_rx+0xfe>
		if (!conn->lll.role) {
   112c8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   112cc:	2b00      	cmp	r3, #0
   112ce:	f2c0 8523 	blt.w	11d18 <ull_conn_rx+0xcec>
			if ((conn->llcp_phy.ack !=
   112d2:	f895 11b5 	ldrb.w	r1, [r5, #437]	; 0x1b5
			     conn->llcp_phy.req) &&
   112d6:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
			if ((conn->llcp_phy.ack !=
   112da:	4281      	cmp	r1, r0
   112dc:	d007      	beq.n	112ee <ull_conn_rx+0x2c2>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   112de:	f895 31b6 	ldrb.w	r3, [r5, #438]	; 0x1b6
   112e2:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   112e6:	3b01      	subs	r3, #1
   112e8:	2b02      	cmp	r3, #2
   112ea:	f240 878c 	bls.w	12206 <ull_conn_rx+0x11da>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   112ee:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   112f2:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   112f6:	1a9b      	subs	r3, r3, r2
   112f8:	f003 0303 	and.w	r3, r3, #3
   112fc:	2b02      	cmp	r3, #2
   112fe:	f000 86af 	beq.w	12060 <ull_conn_rx+0x1034>
				     LLCP_ENCRYPTION)) ||
   11302:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   11306:	f895 317d 	ldrb.w	r3, [r5, #381]	; 0x17d
   1130a:	429a      	cmp	r2, r3
   1130c:	f43f af51 	beq.w	111b2 <ull_conn_rx+0x186>
				nack = reject_ext_ind_send(conn, *rx,
   11310:	1d31      	adds	r1, r6, #4
   11312:	4628      	mov	r0, r5
   11314:	232a      	movs	r3, #42	; 0x2a
   11316:	2216      	movs	r2, #22
}
   11318:	b005      	add	sp, #20
   1131a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1131e:	f7ff b833 	b.w	10388 <reject_ext_ind_send.isra.0>
   11322:	bf00      	nop
   11324:	20003328 	.word	0x20003328
   11328:	20003580 	.word	0x20003580
   1132c:	fffffb03 	.word	0xfffffb03
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   11330:	7f73      	ldrb	r3, [r6, #29]
   11332:	2b09      	cmp	r3, #9
   11334:	f47f aef9 	bne.w	1112a <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   11338:	f1b8 0f14 	cmp.w	r8, #20
   1133c:	f000 8477 	beq.w	11c2e <ull_conn_rx+0xc02>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11340:	f895 31a4 	ldrb.w	r3, [r5, #420]	; 0x1a4
	if (/* Local idle, and Peer request then complete the Peer procedure
   11344:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   11348:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   1134c:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   11350:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   11354:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11358:	9300      	str	r3, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1135a:	4299      	cmp	r1, r3
	eff_rx_octets = conn->lll.max_rx_octets;
   1135c:	9201      	str	r2, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1135e:	f000 87f1 	beq.w	12344 <ull_conn_rx+0x1318>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   11362:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
	struct node_tx *tx = NULL;
   11366:	2100      	movs	r1, #0
	       tx) ||
   11368:	f002 0207 	and.w	r2, r2, #7
   1136c:	2a02      	cmp	r2, #2
   1136e:	f000 8476 	beq.w	11c5e <ull_conn_rx+0xc32>
   11372:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   11376:	f1b8 0f15 	cmp.w	r8, #21
   1137a:	f43f aea6 	beq.w	110ca <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1137e:	4608      	mov	r0, r1
   11380:	49b5      	ldr	r1, [pc, #724]	; (11658 <ull_conn_rx+0x62c>)
   11382:	f7fa f8a9 	bl	b4d8 <mem_release>
			if (conn->llcp_length.state ==
   11386:	f895 31a6 	ldrb.w	r3, [r5, #422]	; 0x1a6
   1138a:	f003 0307 	and.w	r3, r3, #7
   1138e:	2b04      	cmp	r3, #4
   11390:	f47f ae9b 	bne.w	110ca <ull_conn_rx+0x9e>
				return -EBUSY;
   11394:	f06f 000f 	mvn.w	r0, #15
   11398:	e698      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   1139a:	7f71      	ldrb	r1, [r6, #29]
   1139c:	2901      	cmp	r1, #1
   1139e:	f47f aec4 	bne.w	1112a <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   113a2:	2300      	movs	r3, #0
   113a4:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   113a8:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   113aa:	7131      	strb	r1, [r6, #4]
		break;
   113ac:	e68e      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   113ae:	7f73      	ldrb	r3, [r6, #29]
   113b0:	2b18      	cmp	r3, #24
   113b2:	f47f aeba 	bne.w	1112a <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   113b6:	4fa9      	ldr	r7, [pc, #676]	; (1165c <ull_conn_rx+0x630>)
   113b8:	683b      	ldr	r3, [r7, #0]
   113ba:	2b00      	cmp	r3, #0
   113bc:	f000 840a 	beq.w	11bd4 <ull_conn_rx+0xba8>
   113c0:	429d      	cmp	r5, r3
   113c2:	f000 8407 	beq.w	11bd4 <ull_conn_rx+0xba8>
			nack = reject_ext_ind_send(conn, *rx,
   113c6:	1d31      	adds	r1, r6, #4
   113c8:	4628      	mov	r0, r5
   113ca:	2320      	movs	r3, #32
   113cc:	220f      	movs	r2, #15
   113ce:	e7a3      	b.n	11318 <ull_conn_rx+0x2ec>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   113d0:	7f73      	ldrb	r3, [r6, #29]
   113d2:	2b02      	cmp	r3, #2
   113d4:	f47f aea9 	bne.w	1112a <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   113d8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   113dc:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   113e0:	429a      	cmp	r2, r3
   113e2:	d004      	beq.n	113ee <ull_conn_rx+0x3c2>
   113e4:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   113e8:	2a03      	cmp	r2, #3
   113ea:	f000 86fe 	beq.w	121ea <ull_conn_rx+0x11be>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   113ee:	f895 21b4 	ldrb.w	r2, [r5, #436]	; 0x1b4
   113f2:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   113f6:	4293      	cmp	r3, r2
   113f8:	f000 86b1 	beq.w	1215e <ull_conn_rx+0x1132>
		rej_ext_ind->error_code = rej_ind->error_code;
   113fc:	f896 1020 	ldrb.w	r1, [r6, #32]
   11400:	f886 1021 	strb.w	r1, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11404:	2923      	cmp	r1, #35	; 0x23
   11406:	d012      	beq.n	1142e <ull_conn_rx+0x402>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11408:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1140c:	f895 01b7 	ldrb.w	r0, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11410:	f885 21b5 	strb.w	r2, [r5, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11414:	f3c3 0202 	ubfx	r2, r3, #0, #3
   11418:	f362 1306 	bfi	r3, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1141c:	f36f 0000 	bfc	r0, #0, #1
		conn->procedure_expire = 0U;
   11420:	2200      	movs	r2, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11422:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11426:	f885 01b7 	strb.w	r0, [r5, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   1142a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   1142e:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   11432:	075f      	lsls	r7, r3, #29
   11434:	f57f ae47 	bpl.w	110c6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11438:	2319      	movs	r3, #25
	p->status = rej_ext_ind->error_code;
   1143a:	7731      	strb	r1, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1143c:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   1143e:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   11442:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11446:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   11448:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   1144c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11450:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   11452:	2000      	movs	r0, #0
   11454:	e63a      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   11456:	7f74      	ldrb	r4, [r6, #29]
   11458:	2c06      	cmp	r4, #6
   1145a:	f47f ae66 	bne.w	1112a <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   1145e:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
   11462:	07da      	lsls	r2, r3, #31
   11464:	f140 8538 	bpl.w	11ed8 <ull_conn_rx+0xeac>
	} else if (!conn->llcp_version.rx) {
   11468:	f013 0302 	ands.w	r3, r3, #2
   1146c:	f47f ae2b 	bne.w	110c6 <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   11470:	f895 2130 	ldrb.w	r2, [r5, #304]	; 0x130
		conn->procedure_expire = 0U;
   11474:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   11478:	f885 2131 	strb.w	r2, [r5, #305]	; 0x131
	conn->llcp_version.version_number = v->version_number;
   1147c:	f896 3020 	ldrb.w	r3, [r6, #32]
   11480:	f885 3133 	strb.w	r3, [r5, #307]	; 0x133
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   11484:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   11488:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1148c:	f895 3132 	ldrb.w	r3, [r5, #306]	; 0x132
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   11490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11494:	f8a5 2134 	strh.w	r2, [r5, #308]	; 0x134
		sys_le16_to_cpu(v->sub_version_number);
   11498:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   1149c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   114a0:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   114a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   114a8:	f8a5 2136 	strh.w	r2, [r5, #310]	; 0x136
	conn->llcp_version.rx = 1U;
   114ac:	f885 3132 	strb.w	r3, [r5, #306]	; 0x132
	return 0;
   114b0:	2000      	movs	r0, #0
   114b2:	e60b      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   114b4:	7f74      	ldrb	r4, [r6, #29]
   114b6:	2c01      	cmp	r4, #1
   114b8:	f47f ae37 	bne.w	1112a <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   114bc:	4866      	ldr	r0, [pc, #408]	; (11658 <ull_conn_rx+0x62c>)
   114be:	f7f9 fff5 	bl	b4ac <mem_acquire>
	if (!tx) {
   114c2:	4601      	mov	r1, r0
   114c4:	2800      	cmp	r0, #0
   114c6:	f000 84b8 	beq.w	11e3a <ull_conn_rx+0xe0e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   114ca:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   114cc:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   114ce:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   114d2:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   114d4:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   114d6:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   114d8:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   114da:	f7ff f809 	bl	104f0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   114de:	7134      	strb	r4, [r6, #4]
	return 0;
   114e0:	2000      	movs	r0, #0
   114e2:	e5f3      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   114e4:	7f73      	ldrb	r3, [r6, #29]
   114e6:	2b03      	cmp	r3, #3
   114e8:	f47f ae1f 	bne.w	1112a <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   114ec:	f896 3020 	ldrb.w	r3, [r6, #32]
   114f0:	3b03      	subs	r3, #3
   114f2:	2b13      	cmp	r3, #19
   114f4:	f63f ade7 	bhi.w	110c6 <ull_conn_rx+0x9a>
   114f8:	a201      	add	r2, pc, #4	; (adr r2, 11500 <ull_conn_rx+0x4d4>)
   114fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   114fe:	bf00      	nop
   11500:	00011ac1 	.word	0x00011ac1
   11504:	000110c7 	.word	0x000110c7
   11508:	000110c7 	.word	0x000110c7
   1150c:	000110c7 	.word	0x000110c7
   11510:	000110c7 	.word	0x000110c7
   11514:	000110c7 	.word	0x000110c7
   11518:	000110c7 	.word	0x000110c7
   1151c:	000110c7 	.word	0x000110c7
   11520:	000110c7 	.word	0x000110c7
   11524:	000110c7 	.word	0x000110c7
   11528:	000110c7 	.word	0x000110c7
   1152c:	000110c7 	.word	0x000110c7
   11530:	00011a5b 	.word	0x00011a5b
   11534:	000110c7 	.word	0x000110c7
   11538:	000110c7 	.word	0x000110c7
   1153c:	000110c7 	.word	0x000110c7
   11540:	000110c7 	.word	0x000110c7
   11544:	00011a1d 	.word	0x00011a1d
   11548:	000110c7 	.word	0x000110c7
   1154c:	00011b01 	.word	0x00011b01
		if (!conn->lll.role ||
   11550:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11554:	2b00      	cmp	r3, #0
   11556:	f6bf ade8 	bge.w	1112a <ull_conn_rx+0xfe>
   1155a:	7f74      	ldrb	r4, [r6, #29]
   1155c:	2c01      	cmp	r4, #1
   1155e:	f47f ade4 	bne.w	1112a <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11562:	483d      	ldr	r0, [pc, #244]	; (11658 <ull_conn_rx+0x62c>)
   11564:	f7f9 ffa2 	bl	b4ac <mem_acquire>
		if (!tx) {
   11568:	4603      	mov	r3, r0
   1156a:	2800      	cmp	r0, #0
   1156c:	f000 8465 	beq.w	11e3a <ull_conn_rx+0xe0e>
	conn->llcp_enc.pause_rx = 1U;
   11570:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   11574:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   11578:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   1157c:	f36f 01c3 	bfc	r1, #3, #1
   11580:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   11584:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11588:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   1158a:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1158e:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   11590:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11594:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   11598:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1159a:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1159c:	71d8      	strb	r0, [r3, #7]
	if (
   1159e:	2a00      	cmp	r2, #0
   115a0:	f000 830d 	beq.w	11bbe <ull_conn_rx+0xb92>
	    !conn->llcp_enc.pause_tx &&
   115a4:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
	    conn->tx_head &&
   115a8:	0788      	lsls	r0, r1, #30
   115aa:	f100 8308 	bmi.w	11bbe <ull_conn_rx+0xb92>
	    !conn->llcp_phy.pause_tx &&
   115ae:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
   115b2:	07c9      	lsls	r1, r1, #31
   115b4:	f100 8303 	bmi.w	11bbe <ull_conn_rx+0xb92>
		if (conn->tx_head == conn->tx_data) {
   115b8:	f8d5 11c8 	ldr.w	r1, [r5, #456]	; 0x1c8
   115bc:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   115be:	bf04      	itt	eq
   115c0:	6811      	ldreq	r1, [r2, #0]
   115c2:	f8c5 11c8 	streq.w	r1, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   115c6:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   115ca:	2900      	cmp	r1, #0
   115cc:	f000 86cc 	beq.w	12368 <ull_conn_rx+0x133c>
	tx->next = conn->tx_ctrl_last->next;
   115d0:	f8d5 21c4 	ldr.w	r2, [r5, #452]	; 0x1c4
   115d4:	6811      	ldr	r1, [r2, #0]
   115d6:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   115d8:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   115da:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
	if (!tx->next) {
   115de:	681a      	ldr	r2, [r3, #0]
   115e0:	2a00      	cmp	r2, #0
   115e2:	f47f ad70 	bne.w	110c6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   115e6:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
   115ea:	e56c      	b.n	110c6 <ull_conn_rx+0x9a>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   115ec:	7f73      	ldrb	r3, [r6, #29]
   115ee:	2b09      	cmp	r3, #9
   115f0:	f47f ad9b 	bne.w	1112a <ull_conn_rx+0xfe>
	       (features[1] << 8) | (features[2] << 16);
   115f4:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   115f8:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   115fc:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11600:	4917      	ldr	r1, [pc, #92]	; (11660 <ull_conn_rx+0x634>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11602:	4c18      	ldr	r4, [pc, #96]	; (11664 <ull_conn_rx+0x638>)
	       (features[1] << 8) | (features[2] << 16);
   11604:	041b      	lsls	r3, r3, #16
   11606:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1160a:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1160c:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   11610:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11612:	4013      	ands	r3, r2
   11614:	f3c3 0310 	ubfx	r3, r3, #0, #17
   11618:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   1161c:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   11620:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11624:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11628:	041b      	lsls	r3, r3, #16
   1162a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1162e:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   11630:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   11634:	f895 0124 	ldrb.w	r0, [r5, #292]	; 0x124
   11638:	f885 0125 	strb.w	r0, [r5, #293]	; 0x125
	       (features[1] << 8) | (features[2] << 16);
   1163c:	430b      	orrs	r3, r1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1163e:	401c      	ands	r4, r3
	conn->common.fex_valid = 1U;
   11640:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   11644:	2300      	movs	r3, #0
	conn->llcp_feature.features_peer =
   11646:	f8c5 412c 	str.w	r4, [r5, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   1164a:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	conn->procedure_expire = 0U;
   1164e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   11652:	4618      	mov	r0, r3
}
   11654:	e53a      	b.n	110cc <ull_conn_rx+0xa0>
   11656:	bf00      	nop
   11658:	20003580 	.word	0x20003580
   1165c:	200034fc 	.word	0x200034fc
   11660:	fffe30d0 	.word	0xfffe30d0
   11664:	0001ff7f 	.word	0x0001ff7f
		if (!conn->lll.role ||
   11668:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1166c:	2b00      	cmp	r3, #0
   1166e:	f6bf ad5c 	bge.w	1112a <ull_conn_rx+0xfe>
   11672:	7f73      	ldrb	r3, [r6, #29]
   11674:	2b0c      	cmp	r3, #12
   11676:	f47f ad58 	bne.w	1112a <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1167a:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1167e:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   11680:	1ac3      	subs	r3, r0, r3
   11682:	041b      	lsls	r3, r3, #16
   11684:	f100 85a9 	bmi.w	121da <ull_conn_rx+0x11ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11688:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   1168c:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   11690:	1a9b      	subs	r3, r3, r2
   11692:	f003 0303 	and.w	r3, r3, #3
   11696:	2b02      	cmp	r3, #2
   11698:	f000 8605 	beq.w	122a6 <ull_conn_rx+0x127a>
	if (!conn_upd_curr) {
   1169c:	4bdb      	ldr	r3, [pc, #876]	; (11a0c <ull_conn_rx+0x9e0>)
   1169e:	681a      	ldr	r2, [r3, #0]
   116a0:	2a00      	cmp	r2, #0
   116a2:	f000 8646 	beq.w	12332 <ull_conn_rx+0x1306>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   116a6:	f896 3020 	ldrb.w	r3, [r6, #32]
   116aa:	f885 3120 	strb.w	r3, [r5, #288]	; 0x120
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   116ae:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   116b2:	f895 3112 	ldrb.w	r3, [r5, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   116b6:	f240 42e2 	movw	r2, #1250	; 0x4e2
   116ba:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   116be:	f8c5 211c 	str.w	r2, [r5, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   116c2:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   116c6:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   116ca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   116ce:	f8a5 2114 	strh.w	r2, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   116d2:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   116d6:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   116da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   116de:	f8a5 2116 	strh.w	r2, [r5, #278]	; 0x116
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   116e2:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   116e6:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   116ea:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   116ee:	f8a5 00ec 	strh.w	r0, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   116f2:	f023 030f 	bic.w	r3, r3, #15
	link->mem = conn->llcp_rx;
   116f6:	f8d5 010c 	ldr.w	r0, [r5, #268]	; 0x10c
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   116fa:	f043 0308 	orr.w	r3, r3, #8
	conn->llcp_cu.ack--;
   116fe:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   11700:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   11704:	f885 2111 	strb.w	r2, [r5, #273]	; 0x111
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11708:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
	conn->llcp_cu.timeout =
   1170c:	f8a5 1118 	strh.w	r1, [r5, #280]	; 0x118
	link->mem = conn->llcp_rx;
   11710:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   11712:	6823      	ldr	r3, [r4, #0]
   11714:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   11716:	6823      	ldr	r3, [r4, #0]
   11718:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
	*rx = NULL;
   1171c:	2300      	movs	r3, #0
   1171e:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11720:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
   11724:	f895 317d 	ldrb.w	r3, [r5, #381]	; 0x17d
   11728:	4293      	cmp	r3, r2
   1172a:	d007      	beq.n	1173c <ull_conn_rx+0x710>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1172c:	f895 317e 	ldrb.w	r3, [r5, #382]	; 0x17e
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11730:	f003 0307 	and.w	r3, r3, #7
   11734:	2b04      	cmp	r3, #4
   11736:	d101      	bne.n	1173c <ull_conn_rx+0x710>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11738:	f885 217d 	strb.w	r2, [r5, #381]	; 0x17d
		conn->procedure_expire = 0U;
   1173c:	2300      	movs	r3, #0
   1173e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   11742:	4618      	mov	r0, r3
		break;
   11744:	e4c2      	b.n	110cc <ull_conn_rx+0xa0>
		((!conn->llcp_enc.refresh &&
   11746:	f1b8 0f07 	cmp.w	r8, #7
   1174a:	f000 8097 	beq.w	1187c <ull_conn_rx+0x850>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1174e:	f1b8 0f02 	cmp.w	r8, #2
   11752:	f040 8209 	bne.w	11b68 <ull_conn_rx+0xb3c>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   11756:	7f73      	ldrb	r3, [r6, #29]
   11758:	2b02      	cmp	r3, #2
   1175a:	f47f ace6 	bne.w	1112a <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1175e:	f896 3020 	ldrb.w	r3, [r6, #32]
   11762:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11766:	2301      	movs	r3, #1
   11768:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   1176a:	2000      	movs	r0, #0
}
   1176c:	e4ae      	b.n	110cc <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   1176e:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   11772:	2b00      	cmp	r3, #0
   11774:	f6bf acd9 	bge.w	1112a <ull_conn_rx+0xfe>
   11778:	7f73      	ldrb	r3, [r6, #29]
   1177a:	2b08      	cmp	r3, #8
   1177c:	f47f acd5 	bne.w	1112a <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   11780:	f8b6 0025 	ldrh.w	r0, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   11784:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   11786:	1ac3      	subs	r3, r0, r3
   11788:	041f      	lsls	r7, r3, #16
   1178a:	f100 8526 	bmi.w	121da <ull_conn_rx+0x11ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1178e:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   11792:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   11796:	1a9b      	subs	r3, r3, r2
   11798:	f003 0303 	and.w	r3, r3, #3
   1179c:	2b02      	cmp	r3, #2
   1179e:	f000 8582 	beq.w	122a6 <ull_conn_rx+0x127a>
   117a2:	4633      	mov	r3, r6
	conn->llcp.chan_map.initiate = 0U;
   117a4:	f895 10ec 	ldrb.w	r1, [r5, #236]	; 0xec
   117a8:	f853 4f20 	ldr.w	r4, [r3, #32]!
   117ac:	f8c5 40ed 	str.w	r4, [r5, #237]	; 0xed
   117b0:	791b      	ldrb	r3, [r3, #4]
   117b2:	f885 30f1 	strb.w	r3, [r5, #241]	; 0xf1
	conn->llcp_ack -= 2U;
   117b6:	3a02      	subs	r2, #2
	conn->llcp.chan_map.initiate = 0U;
   117b8:	f36f 0100 	bfc	r1, #0, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   117bc:	2402      	movs	r4, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   117be:	2301      	movs	r3, #1
	conn->llcp.chan_map.instant = instant;
   117c0:	f8a5 00f2 	strh.w	r0, [r5, #242]	; 0xf2
	conn->llcp_ack -= 2U;
   117c4:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp.chan_map.initiate = 0U;
   117c8:	f885 10ec 	strb.w	r1, [r5, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   117cc:	f885 40ea 	strb.w	r4, [r5, #234]	; 0xea
	int nack = 0;
   117d0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   117d2:	7133      	strb	r3, [r6, #4]
		if (err) {
   117d4:	e47a      	b.n	110cc <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   117d6:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   117da:	2b00      	cmp	r3, #0
   117dc:	f6bf aca5 	bge.w	1112a <ull_conn_rx+0xfe>
   117e0:	7f74      	ldrb	r4, [r6, #29]
   117e2:	2c09      	cmp	r4, #9
   117e4:	f47f aca1 	bne.w	1112a <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   117e8:	4889      	ldr	r0, [pc, #548]	; (11a10 <ull_conn_rx+0x9e4>)
   117ea:	f7f9 fe5f 	bl	b4ac <mem_acquire>
	if (!tx) {
   117ee:	4601      	mov	r1, r0
   117f0:	2800      	cmp	r0, #0
   117f2:	f000 8322 	beq.w	11e3a <ull_conn_rx+0xe0e>
	       (features[1] << 8) | (features[2] << 16);
   117f6:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   117fa:	f896 7021 	ldrb.w	r7, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   117fe:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11802:	4a84      	ldr	r2, [pc, #528]	; (11a14 <ull_conn_rx+0x9e8>)
   11804:	041b      	lsls	r3, r3, #16
   11806:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
   1180a:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1180c:	f8d5 0128 	ldr.w	r0, [r5, #296]	; 0x128
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11810:	4f81      	ldr	r7, [pc, #516]	; (11a18 <ull_conn_rx+0x9ec>)
	       (features[1] << 8) | (features[2] << 16);
   11812:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   11814:	4003      	ands	r3, r0
   11816:	f3c3 0310 	ubfx	r3, r3, #0, #17
   1181a:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   1181e:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   11822:	f896 c021 	ldrb.w	ip, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11826:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   1182a:	041b      	lsls	r3, r3, #16
   1182c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   11830:	4303      	orrs	r3, r0
	conn->common.fex_valid = 1U;
   11832:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   11836:	4313      	orrs	r3, r2
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11838:	401f      	ands	r7, r3
__ssp_bos_icheck3(memset, void *, int)
   1183a:	f04f 0800 	mov.w	r8, #0
	conn->common.fex_valid = 1U;
   1183e:	f040 0301 	orr.w	r3, r0, #1
	conn->llcp_feature.features_peer =
   11842:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   11846:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
   1184a:	f8c1 8008 	str.w	r8, [r1, #8]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1184e:	714c      	strb	r4, [r1, #5]
   11850:	f8c1 800c 	str.w	r8, [r1, #12]
	feat_result &= 0xFF;
   11854:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11858:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1185a:	71cc      	strb	r4, [r1, #7]
	feat_result &= 0xFF;
   1185c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11860:	f043 0303 	orr.w	r3, r3, #3
	dst[2] = val >> 16;
   11864:	2401      	movs	r4, #1
	dst[1] = val >> 8;
   11866:	2741      	movs	r7, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
   11868:	4628      	mov	r0, r5
	dst[0] = val;
   1186a:	720a      	strb	r2, [r1, #8]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1186c:	710b      	strb	r3, [r1, #4]
	dst[1] = val >> 8;
   1186e:	724f      	strb	r7, [r1, #9]
	dst[2] = val >> 16;
   11870:	728c      	strb	r4, [r1, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   11872:	f7fe fe3d 	bl	104f0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11876:	7134      	strb	r4, [r6, #4]
	return 0;
   11878:	4640      	mov	r0, r8
   1187a:	e427      	b.n	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   1187c:	7f73      	ldrb	r3, [r6, #29]
   1187e:	2b02      	cmp	r3, #2
   11880:	f47f ac53 	bne.w	1112a <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   11884:	f895 117d 	ldrb.w	r1, [r5, #381]	; 0x17d
   11888:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   1188c:	f896 2020 	ldrb.w	r2, [r6, #32]
   11890:	4299      	cmp	r1, r3
   11892:	d002      	beq.n	1189a <ull_conn_rx+0x86e>
			    conn->llcp_conn_param.req) &&
   11894:	2a0f      	cmp	r2, #15
   11896:	f000 82d4 	beq.w	11e42 <ull_conn_rx+0xe16>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1189a:	f895 31a4 	ldrb.w	r3, [r5, #420]	; 0x1a4
   1189e:	f895 11a5 	ldrb.w	r1, [r5, #421]	; 0x1a5
   118a2:	4299      	cmp	r1, r3
   118a4:	d002      	beq.n	118ac <ull_conn_rx+0x880>
   118a6:	2a14      	cmp	r2, #20
   118a8:	f000 844f 	beq.w	1214a <ull_conn_rx+0x111e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   118ac:	f895 11b4 	ldrb.w	r1, [r5, #436]	; 0x1b4
   118b0:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   118b4:	428b      	cmp	r3, r1
   118b6:	d002      	beq.n	118be <ull_conn_rx+0x892>
   118b8:	2a16      	cmp	r2, #22
   118ba:	f000 84a9 	beq.w	12210 <ull_conn_rx+0x11e4>
			switch (llctrl->unknown_rsp.type) {
   118be:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   118c0:	bf04      	itt	eq
   118c2:	2301      	moveq	r3, #1
   118c4:	7133      	strbeq	r3, [r6, #4]
				break;
   118c6:	e739      	b.n	1173c <ull_conn_rx+0x710>
		if (!conn->lll.role ||
   118c8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   118cc:	2b00      	cmp	r3, #0
   118ce:	f6bf ac2c 	bge.w	1112a <ull_conn_rx+0xfe>
   118d2:	7f73      	ldrb	r3, [r6, #29]
   118d4:	2b17      	cmp	r3, #23
   118d6:	f47f ac28 	bne.w	1112a <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   118da:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   118de:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   118e2:	1a9b      	subs	r3, r3, r2
   118e4:	f003 0303 	and.w	r3, r3, #3
   118e8:	2b02      	cmp	r3, #2
   118ea:	f000 85dc 	beq.w	124a6 <ull_conn_rx+0x147a>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   118ee:	4633      	mov	r3, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   118f0:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
   118f4:	f853 1f20 	ldr.w	r1, [r3, #32]!
   118f8:	685b      	ldr	r3, [r3, #4]
   118fa:	f8c5 3165 	str.w	r3, [r5, #357]	; 0x165
   118fe:	f8c5 1161 	str.w	r1, [r5, #353]	; 0x161
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   11902:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   11906:	f885 315f 	strb.w	r3, [r5, #351]	; 0x15f
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1190a:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   1190e:	f885 3160 	strb.w	r3, [r5, #352]	; 0x160
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11912:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   11914:	2301      	movs	r3, #1
   11916:	f363 0201 	bfi	r2, r3, #0, #2
   1191a:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1191e:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   11920:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_enc.pause_rx = 1U;
   11924:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   11928:	f8b5 10ca 	ldrh.w	r1, [r5, #202]	; 0xca
		conn->llcp_ack -= 2U;
   1192c:	3a02      	subs	r2, #2
   1192e:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   11932:	2003      	movs	r0, #3
   11934:	4632      	mov	r2, r6
   11936:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
   1193a:	f852 0f2a 	ldr.w	r0, [r2, #42]!
   1193e:	6852      	ldr	r2, [r2, #4]
   11940:	f8c5 20fe 	str.w	r2, [r5, #254]	; 0xfe
   11944:	f8c5 00fa 	str.w	r0, [r5, #250]	; 0xfa
   11948:	f8d6 2032 	ldr.w	r2, [r6, #50]	; 0x32
   1194c:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
		conn->llcp_enc.pause_rx = 1U;
   11950:	f043 0301 	orr.w	r3, r3, #1
   11954:	f885 315e 	strb.w	r3, [r5, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   11958:	f8a5 10cc 	strh.w	r1, [r5, #204]	; 0xcc
	int nack = 0;
   1195c:	2000      	movs	r0, #0
		break;
   1195e:	f7ff bbb5 	b.w	110cc <ull_conn_rx+0xa0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   11962:	7f73      	ldrb	r3, [r6, #29]
   11964:	2b01      	cmp	r3, #1
   11966:	f47f abe0 	bne.w	1112a <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   1196a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1196e:	2b00      	cmp	r3, #0
   11970:	f2c0 811d 	blt.w	11bae <ull_conn_rx+0xb82>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11974:	4826      	ldr	r0, [pc, #152]	; (11a10 <ull_conn_rx+0x9e4>)
   11976:	f7f9 fd99 	bl	b4ac <mem_acquire>
		if (!tx) {
   1197a:	4603      	mov	r3, r0
   1197c:	2800      	cmp	r0, #0
   1197e:	f000 825c 	beq.w	11e3a <ull_conn_rx+0xe0e>
	conn->llcp_enc.pause_rx = 1U;
   11982:	f895 015e 	ldrb.w	r0, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   11986:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1198a:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   1198c:	f040 0001 	orr.w	r0, r0, #1
   11990:	f885 015e 	strb.w	r0, [r5, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   11994:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11998:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   1199a:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1199e:	7158      	strb	r0, [r3, #5]
   119a0:	e5f6      	b.n	11590 <ull_conn_rx+0x564>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   119a2:	7f73      	ldrb	r3, [r6, #29]
   119a4:	2b01      	cmp	r3, #1
   119a6:	f47f abc0 	bne.w	1112a <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   119aa:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   119ae:	2b00      	cmp	r3, #0
   119b0:	f280 80f2 	bge.w	11b98 <ull_conn_rx+0xb6c>
			if ((conn->llcp_req != conn->llcp_ack) &&
   119b4:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   119b8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   119bc:	4283      	cmp	r3, r0
   119be:	f000 8476 	beq.w	122ae <ull_conn_rx+0x1282>
   119c2:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   119c6:	2b03      	cmp	r3, #3
   119c8:	f47f abaf 	bne.w	1112a <ull_conn_rx+0xfe>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   119cc:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   119d0:	f36f 0301 	bfc	r3, #0, #2
   119d4:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		if (conn->llcp_enc.refresh) {
   119d8:	074e      	lsls	r6, r1, #29
   119da:	f57f aeaf 	bpl.w	1173c <ull_conn_rx+0x710>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   119de:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
   119e0:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   119e4:	2216      	movs	r2, #22
			conn->llcp_enc.refresh = 0U;
   119e6:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   119ea:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   119ec:	e6a6      	b.n	1173c <ull_conn_rx+0x710>
		 (conn->llcp_enc.refresh &&
   119ee:	f1b8 0f02 	cmp.w	r8, #2
   119f2:	f43f aeb0 	beq.w	11756 <ull_conn_rx+0x72a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   119f6:	f1b8 0f0b 	cmp.w	r8, #11
   119fa:	f43f ab92 	beq.w	11122 <ull_conn_rx+0xf6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   119fe:	f1b8 0f04 	cmp.w	r8, #4
   11a02:	f47f ab43 	bne.w	1108c <ull_conn_rx+0x60>
   11a06:	f7ff bb90 	b.w	1112a <ull_conn_rx+0xfe>
   11a0a:	bf00      	nop
   11a0c:	200034fc 	.word	0x200034fc
   11a10:	20003580 	.word	0x20003580
   11a14:	fffe30d0 	.word	0xfffe30d0
   11a18:	0001ff7f 	.word	0x0001ff7f
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   11a1c:	f895 21a4 	ldrb.w	r2, [r5, #420]	; 0x1a4
   11a20:	f895 31a5 	ldrb.w	r3, [r5, #421]	; 0x1a5
   11a24:	4293      	cmp	r3, r2
   11a26:	f43f ab4e 	beq.w	110c6 <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   11a2a:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11a2c:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   11a2e:	f885 21a5 	strb.w	r2, [r5, #421]	; 0x1a5
	conn->procedure_expire = 0U;
   11a32:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11a36:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11a38:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   11a3c:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   11a40:	f8b5 4062 	ldrh.w	r4, [r5, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11a44:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11a48:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11a4a:	2215      	movs	r2, #21
	int nack = 0;
   11a4c:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   11a4e:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   11a50:	8474      	strh	r4, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11a52:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11a54:	77f2      	strb	r2, [r6, #31]
	if (err) {
   11a56:	f7ff bb39 	b.w	110cc <ull_conn_rx+0xa0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11a5a:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   11a5e:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   11a62:	429a      	cmp	r2, r3
   11a64:	f43f ab2f 	beq.w	110c6 <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   11a68:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   11a6c:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   11a70:	2900      	cmp	r1, #0
   11a72:	f2c0 8566 	blt.w	12542 <ull_conn_rx+0x1516>
   11a76:	2a1a      	cmp	r2, #26
   11a78:	f000 85c0 	beq.w	125fc <ull_conn_rx+0x15d0>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   11a7c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   11a80:	f002 0107 	and.w	r1, r2, #7
   11a84:	2904      	cmp	r1, #4
   11a86:	f000 8537 	beq.w	124f8 <ull_conn_rx+0x14cc>
	if (!conn->llcp_conn_param.cmd) {
   11a8a:	0713      	lsls	r3, r2, #28
   11a8c:	f57f ab1b 	bpl.w	110c6 <ull_conn_rx+0x9a>
	cu->status = rej_ext_ind->error_code;
   11a90:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   11a94:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11a96:	2215      	movs	r2, #21
   11a98:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   11a9a:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   11a9c:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
   11aa0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	cu->interval = lll->interval;
   11aa2:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   11aa4:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   11aa8:	237d      	movs	r3, #125	; 0x7d
   11aaa:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   11aae:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   11ab0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   11ab4:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   11ab6:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   11aba:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   11abc:	f7ff bb06 	b.w	110cc <ull_conn_rx+0xa0>
		if ((conn->llcp_ack != conn->llcp_req) &&
   11ac0:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   11ac4:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   11ac8:	429a      	cmp	r2, r3
   11aca:	f43f aafc 	beq.w	110c6 <ull_conn_rx+0x9a>
   11ace:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   11ad2:	2a03      	cmp	r2, #3
   11ad4:	f47f aaf7 	bne.w	110c6 <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   11ad8:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   11adc:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   11ae0:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   11ae4:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   11ae6:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	conn->procedure_expire = 0U;
   11aea:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   11aee:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   11af2:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11af6:	220d      	movs	r2, #13
	int nack = 0;
   11af8:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   11afa:	77f2      	strb	r2, [r6, #31]
	if (err) {
   11afc:	f7ff bae6 	b.w	110cc <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11b00:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
   11b04:	f895 31b5 	ldrb.w	r3, [r5, #437]	; 0x1b5
   11b08:	4283      	cmp	r3, r0
   11b0a:	f43f aadc 	beq.w	110c6 <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11b0e:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   11b12:	2a23      	cmp	r2, #35	; 0x23
   11b14:	d012      	beq.n	11b3c <ull_conn_rx+0xb10>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11b16:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11b1a:	f895 11b7 	ldrb.w	r1, [r5, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11b1e:	f885 01b5 	strb.w	r0, [r5, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11b22:	f3c3 0002 	ubfx	r0, r3, #0, #3
   11b26:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11b2a:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   11b2e:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11b30:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11b34:	f885 11b7 	strb.w	r1, [r5, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   11b38:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   11b3c:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   11b40:	0759      	lsls	r1, r3, #29
   11b42:	f57f aac0 	bpl.w	110c6 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11b46:	2319      	movs	r3, #25
	p->status = rej_ext_ind->error_code;
   11b48:	7732      	strb	r2, [r6, #28]
   11b4a:	e477      	b.n	1143c <ull_conn_rx+0x410>
	       (conn->lll.role &&
   11b4c:	2800      	cmp	r0, #0
   11b4e:	f43f adfa 	beq.w	11746 <ull_conn_rx+0x71a>
		 (conn->llcp_enc.refresh &&
   11b52:	f1b8 0f02 	cmp.w	r8, #2
   11b56:	f43f adfe 	beq.w	11756 <ull_conn_rx+0x72a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   11b5a:	f1b8 0f0b 	cmp.w	r8, #11
   11b5e:	d022      	beq.n	11ba6 <ull_conn_rx+0xb7a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   11b60:	f1b8 0f03 	cmp.w	r8, #3
   11b64:	f43f aeb5 	beq.w	118d2 <ull_conn_rx+0x8a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   11b68:	f1b8 0f06 	cmp.w	r8, #6
   11b6c:	f47f aa95 	bne.w	1109a <ull_conn_rx+0x6e>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   11b70:	7f73      	ldrb	r3, [r6, #29]
   11b72:	2b01      	cmp	r3, #1
   11b74:	f43f af1e 	beq.w	119b4 <ull_conn_rx+0x988>
   11b78:	f7ff bad7 	b.w	1112a <ull_conn_rx+0xfe>
			tx->next = conn->tx_head;
   11b7c:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl = tx;
   11b7e:	e9c5 006f 	strd	r0, r0, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   11b82:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
	if (!tx->next) {
   11b86:	2900      	cmp	r1, #0
   11b88:	f47f aa9d 	bne.w	110c6 <ull_conn_rx+0x9a>
   11b8c:	f7ff bafa 	b.w	11184 <ull_conn_rx+0x158>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   11b90:	7f73      	ldrb	r3, [r6, #29]
   11b92:	2b01      	cmp	r3, #1
   11b94:	f47f aac9 	bne.w	1112a <ull_conn_rx+0xfe>
			conn->llcp_enc.pause_rx = 0U;
   11b98:	f895 115e 	ldrb.w	r1, [r5, #350]	; 0x15e
   11b9c:	f021 0103 	bic.w	r1, r1, #3
   11ba0:	f885 115e 	strb.w	r1, [r5, #350]	; 0x15e
   11ba4:	e718      	b.n	119d8 <ull_conn_rx+0x9ac>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   11ba6:	7f73      	ldrb	r3, [r6, #29]
   11ba8:	2b01      	cmp	r3, #1
   11baa:	f47f aabe 	bne.w	1112a <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   11bae:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   11bb2:	f36f 1304 	bfc	r3, #4, #1
   11bb6:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   11bba:	f7ff ba84 	b.w	110c6 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   11bbe:	f8d5 11c0 	ldr.w	r1, [r5, #448]	; 0x1c0
   11bc2:	2900      	cmp	r1, #0
   11bc4:	f47f ad04 	bne.w	115d0 <ull_conn_rx+0x5a4>
			tx->next = conn->tx_head;
   11bc8:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   11bca:	e9c5 336f 	strd	r3, r3, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   11bce:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
   11bd2:	e504      	b.n	115de <ull_conn_rx+0x5b2>
		if (!conn->lll.role) {
   11bd4:	f995 003d 	ldrsb.w	r0, [r5, #61]	; 0x3d
   11bd8:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   11bdc:	f895 c17c 	ldrb.w	ip, [r5, #380]	; 0x17c
   11be0:	9200      	str	r2, [sp, #0]
   11be2:	2800      	cmp	r0, #0
   11be4:	f2c0 8110 	blt.w	11e08 <ull_conn_rx+0xddc>
			if ((conn->llcp_conn_param.req !=
   11be8:	4562      	cmp	r2, ip
   11bea:	d009      	beq.n	11c00 <ull_conn_rx+0xbd4>
			    ((conn->llcp_conn_param.state ==
   11bec:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
					conn->llcp_conn_param.ack) &&
   11bf0:	f012 0207 	ands.w	r2, r2, #7
   11bf4:	f000 82eb 	beq.w	121ce <ull_conn_rx+0x11a2>
			      LLCP_CPR_STATE_REQ) ||
   11bf8:	3a04      	subs	r2, #4
   11bfa:	2a01      	cmp	r2, #1
   11bfc:	f240 82e7 	bls.w	121ce <ull_conn_rx+0x11a2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   11c00:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   11c04:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   11c08:	1a12      	subs	r2, r2, r0
   11c0a:	f002 0203 	and.w	r2, r2, #3
   11c0e:	2a02      	cmp	r2, #2
   11c10:	f000 8392 	beq.w	12338 <ull_conn_rx+0x130c>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   11c14:	f895 01b4 	ldrb.w	r0, [r5, #436]	; 0x1b4
   11c18:	f895 21b5 	ldrb.w	r2, [r5, #437]	; 0x1b5
   11c1c:	4290      	cmp	r0, r2
   11c1e:	f000 83aa 	beq.w	12376 <ull_conn_rx+0x134a>
				nack = reject_ext_ind_send(conn, *rx,
   11c22:	1d31      	adds	r1, r6, #4
   11c24:	4628      	mov	r0, r5
   11c26:	232a      	movs	r3, #42	; 0x2a
   11c28:	220f      	movs	r2, #15
   11c2a:	f7ff bb75 	b.w	11318 <ull_conn_rx+0x2ec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11c2e:	48bd      	ldr	r0, [pc, #756]	; (11f24 <ull_conn_rx+0xef8>)
   11c30:	f7f9 fc3c 	bl	b4ac <mem_acquire>
		if (!tx) {
   11c34:	4601      	mov	r1, r0
   11c36:	2800      	cmp	r0, #0
   11c38:	f000 80ff 	beq.w	11e3a <ull_conn_rx+0xe0e>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11c3c:	f895 01a4 	ldrb.w	r0, [r5, #420]	; 0x1a4
   11c40:	f895 21a5 	ldrb.w	r2, [r5, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   11c44:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   11c48:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   11c4c:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   11c50:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11c54:	9000      	str	r0, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11c56:	4290      	cmp	r0, r2
	eff_rx_octets = conn->lll.max_rx_octets;
   11c58:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11c5a:	f040 848f 	bne.w	1257c <ull_conn_rx+0x1550>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   11c5e:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11c60:	2a1a      	cmp	r2, #26
   11c62:	f240 82b2 	bls.w	121ca <ull_conn_rx+0x119e>
			eff_tx_octets = MIN(max_rx_octets,
   11c66:	f8b5 00d6 	ldrh.w	r0, [r5, #214]	; 0xd6
   11c6a:	4282      	cmp	r2, r0
   11c6c:	bf28      	it	cs
   11c6e:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11c70:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
			eff_rx_octets = MIN(max_tx_octets,
   11c74:	9b01      	ldr	r3, [sp, #4]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   11c76:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   11c7a:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   11c7e:	f1be 0f1b 	cmp.w	lr, #27
   11c82:	bf34      	ite	cc
   11c84:	469e      	movcc	lr, r3
   11c86:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   11c8a:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   11c8e:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   11c90:	bf34      	ite	cc
   11c92:	4658      	movcc	r0, fp
   11c94:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   11c98:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   11c9c:	bf34      	ite	cc
   11c9e:	46d4      	movcc	ip, sl
   11ca0:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   11ca4:	459e      	cmp	lr, r3
   11ca6:	f000 82d6 	beq.w	12256 <ull_conn_rx+0x122a>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11caa:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   11cac:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11cb0:	3b01      	subs	r3, #1
   11cb2:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->llcp_length.tx_octets = eff_tx_octets;
   11cb6:	f8a5 21aa 	strh.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_length.state =
   11cba:	f895 31a6 	ldrb.w	r3, [r5, #422]	; 0x1a6
			conn->llcp_length.rx_time = eff_rx_time;
   11cbe:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
			conn->llcp_length.tx_time = eff_tx_time;
   11cc2:	f8a5 01ae 	strh.w	r0, [r5, #430]	; 0x1ae
			if (tx) {
   11cc6:	2900      	cmp	r1, #0
   11cc8:	f000 833f 	beq.w	1234a <ull_conn_rx+0x131e>
				conn->llcp_length.state =
   11ccc:	2605      	movs	r6, #5
   11cce:	f366 0302 	bfi	r3, r6, #0, #3
   11cd2:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
			link->mem = conn->llcp_rx;
   11cd6:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   11cda:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   11cdc:	6823      	ldr	r3, [r4, #0]
   11cde:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   11ce0:	6823      	ldr	r3, [r4, #0]
   11ce2:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
			*rx = NULL;
   11ce6:	2300      	movs	r3, #0
   11ce8:	6023      	str	r3, [r4, #0]
	if (tx) {
   11cea:	2900      	cmp	r1, #0
   11cec:	f43f a9ed 	beq.w	110ca <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cf0:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   11cf2:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cf4:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11cf8:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11cfa:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11cfc:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   11cfe:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   11d02:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11d04:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d08:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11d0a:	714c      	strb	r4, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11d0c:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11d0e:	f7fe fbef 	bl	104f0 <ctrl_tx_sec_enqueue>
	return 0;
   11d12:	2000      	movs	r0, #0
}
   11d14:	f7ff b9da 	b.w	110cc <ull_conn_rx+0xa0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11d18:	4882      	ldr	r0, [pc, #520]	; (11f24 <ull_conn_rx+0xef8>)
   11d1a:	f7f9 fbc7 	bl	b4ac <mem_acquire>
	if (!tx) {
   11d1e:	4602      	mov	r2, r0
   11d20:	2800      	cmp	r0, #0
   11d22:	f000 808a 	beq.w	11e3a <ull_conn_rx+0xe0e>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d26:	f895 11b6 	ldrb.w	r1, [r5, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   11d2a:	f895 e1b5 	ldrb.w	lr, [r5, #437]	; 0x1b5
   11d2e:	f895 71b4 	ldrb.w	r7, [r5, #436]	; 0x1b4
   11d32:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d36:	2002      	movs	r0, #2
   11d38:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   11d3c:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11d3e:	f885 11b6 	strb.w	r1, [r5, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   11d42:	f3c3 0402 	ubfx	r4, r3, #0, #3
   11d46:	f003 0c07 	and.w	ip, r3, #7
   11d4a:	f3c3 00c2 	ubfx	r0, r3, #3, #3
   11d4e:	d113      	bne.n	11d78 <ull_conn_rx+0xd4c>
		conn->llcp_phy.tx =
   11d50:	b2c9      	uxtb	r1, r1
   11d52:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   11d56:	f895 c1b7 	ldrb.w	ip, [r5, #439]	; 0x1b7
		conn->procedure_expire =
   11d5a:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
   11d5e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_phy.ack--;
   11d62:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   11d64:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   11d68:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   11d6c:	f885 71b5 	strb.w	r7, [r5, #437]	; 0x1b5
		conn->llcp_phy.rx =
   11d70:	f885 11b6 	strb.w	r1, [r5, #438]	; 0x1b6
		conn->llcp_phy.cmd = 0U;
   11d74:	f885 c1b7 	strb.w	ip, [r5, #439]	; 0x1b7
	conn->llcp_phy.rx &= p->tx_phys;
   11d78:	f895 11b6 	ldrb.w	r1, [r5, #438]	; 0x1b6
	conn->llcp_phy.tx &= p->rx_phys;
   11d7c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   11d80:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   11d84:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   11d88:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   11d8c:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   11d90:	009b      	lsls	r3, r3, #2
   11d92:	f001 0103 	and.w	r1, r1, #3
   11d96:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   11d9a:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11d9c:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   11d9e:	f885 31b6 	strb.w	r3, [r5, #438]	; 0x1b6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11da2:	7913      	ldrb	r3, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   11da4:	7151      	strb	r1, [r2, #5]
	    conn->tx_head &&
   11da6:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11daa:	7214      	strb	r4, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11dac:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11db0:	2417      	movs	r4, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11db2:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11db4:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11db6:	71d4      	strb	r4, [r2, #7]
	if (
   11db8:	2900      	cmp	r1, #0
   11dba:	f000 8146 	beq.w	1204a <ull_conn_rx+0x101e>
	    !conn->llcp_enc.pause_tx &&
   11dbe:	f895 315e 	ldrb.w	r3, [r5, #350]	; 0x15e
	    conn->tx_head &&
   11dc2:	079c      	lsls	r4, r3, #30
   11dc4:	f100 8141 	bmi.w	1204a <ull_conn_rx+0x101e>
	    !conn->llcp_phy.pause_tx &&
   11dc8:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
   11dcc:	07d8      	lsls	r0, r3, #31
   11dce:	f100 813c 	bmi.w	1204a <ull_conn_rx+0x101e>
		if (conn->tx_head == conn->tx_data) {
   11dd2:	f8d5 31c8 	ldr.w	r3, [r5, #456]	; 0x1c8
   11dd6:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   11dd8:	bf04      	itt	eq
   11dda:	680b      	ldreq	r3, [r1, #0]
   11ddc:	f8c5 31c8 	streq.w	r3, [r5, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   11de0:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   11de4:	2b00      	cmp	r3, #0
   11de6:	f000 83c3 	beq.w	12570 <ull_conn_rx+0x1544>
	tx->next = conn->tx_ctrl_last->next;
   11dea:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   11dee:	6819      	ldr	r1, [r3, #0]
   11df0:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   11df2:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   11df4:	f8c5 21c4 	str.w	r2, [r5, #452]	; 0x1c4
	if (!tx->next) {
   11df8:	6813      	ldr	r3, [r2, #0]
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	f47f a963 	bne.w	110c6 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   11e00:	f8c5 21cc 	str.w	r2, [r5, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11e04:	f7ff b95f 	b.w	110c6 <ull_conn_rx+0x9a>
		} else if ((conn->llcp_conn_param.req ==
   11e08:	9a00      	ldr	r2, [sp, #0]
   11e0a:	4562      	cmp	r2, ip
   11e0c:	f000 8094 	beq.w	11f38 <ull_conn_rx+0xf0c>
			    conn->llcp_conn_param.ack) ||
   11e10:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   11e14:	0790      	lsls	r0, r2, #30
   11e16:	f000 808f 	beq.w	11f38 <ull_conn_rx+0xf0c>
			LL_ASSERT(0);
   11e1a:	4a43      	ldr	r2, [pc, #268]	; (11f28 <ull_conn_rx+0xefc>)
   11e1c:	4943      	ldr	r1, [pc, #268]	; (11f2c <ull_conn_rx+0xf00>)
   11e1e:	4844      	ldr	r0, [pc, #272]	; (11f30 <ull_conn_rx+0xf04>)
   11e20:	f241 73de 	movw	r3, #6110	; 0x17de
   11e24:	f010 ffc3 	bl	22dae <printk>
   11e28:	4040      	eors	r0, r0
   11e2a:	f380 8811 	msr	BASEPRI, r0
   11e2e:	f04f 0003 	mov.w	r0, #3
   11e32:	df02      	svc	2
	int nack = 0;
   11e34:	2000      	movs	r0, #0
   11e36:	f7ff b949 	b.w	110cc <ull_conn_rx+0xa0>
		return -ENOBUFS;
   11e3a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   11e3e:	f7ff b945 	b.w	110cc <ull_conn_rx+0xa0>
			conn->llcp_conn_param.disabled = 1U;
   11e42:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
			if (!conn->lll.role) {
   11e46:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   11e4a:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   11e4e:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   11e50:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
			if (!conn->lll.role) {
   11e54:	f2c0 8239 	blt.w	122ca <ull_conn_rx+0x129e>
				LL_ASSERT(conn->llcp_cu.req ==
   11e58:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
   11e5c:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
   11e60:	4293      	cmp	r3, r2
   11e62:	d00e      	beq.n	11e82 <ull_conn_rx+0xe56>
   11e64:	4a30      	ldr	r2, [pc, #192]	; (11f28 <ull_conn_rx+0xefc>)
   11e66:	4933      	ldr	r1, [pc, #204]	; (11f34 <ull_conn_rx+0xf08>)
   11e68:	4831      	ldr	r0, [pc, #196]	; (11f30 <ull_conn_rx+0xf04>)
   11e6a:	f641 0364 	movw	r3, #6244	; 0x1864
   11e6e:	f010 ff9e 	bl	22dae <printk>
   11e72:	4040      	eors	r0, r0
   11e74:	f380 8811 	msr	BASEPRI, r0
   11e78:	f04f 0003 	mov.w	r0, #3
   11e7c:	df02      	svc	2
   11e7e:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
				conn->llcp_conn_param.state =
   11e82:	f895 017e 	ldrb.w	r0, [r5, #382]	; 0x17e
				conn->llcp_cu.interval =
   11e86:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
   11e8a:	f8a5 3114 	strh.w	r3, [r5, #276]	; 0x114
				conn->llcp_conn_param.state =
   11e8e:	2305      	movs	r3, #5
   11e90:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11e94:	f895 1112 	ldrb.w	r1, [r5, #274]	; 0x112
				conn->llcp_cu.ack--;
   11e98:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   11e9a:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.win_size = 1U;
   11e9e:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11ea0:	00d2      	lsls	r2, r2, #3
				conn->llcp_cu.ack--;
   11ea2:	f885 3111 	strb.w	r3, [r5, #273]	; 0x111
				conn->llcp_cu.win_size = 1U;
   11ea6:	f885 6120 	strb.w	r6, [r5, #288]	; 0x120
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11eaa:	f021 030f 	bic.w	r3, r1, #15
   11eae:	4332      	orrs	r2, r6
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11eb0:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.latency =
   11eb2:	f8b5 4184 	ldrh.w	r4, [r5, #388]	; 0x184
				conn->llcp_conn_param.state =
   11eb6:	f885 017e 	strb.w	r0, [r5, #382]	; 0x17e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11eba:	431a      	orrs	r2, r3
   11ebc:	f885 2112 	strb.w	r2, [r5, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   11ec0:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   11ec2:	f8b5 2186 	ldrh.w	r2, [r5, #390]	; 0x186
				conn->llcp_cu.win_offset_us = 0U;
   11ec6:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
				conn->llcp_cu.latency =
   11eca:	f8a5 4116 	strh.w	r4, [r5, #278]	; 0x116
				conn->llcp_cu.timeout =
   11ece:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11ed2:	710e      	strb	r6, [r1, #4]
				break;
   11ed4:	f7ff b8fa 	b.w	110cc <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11ed8:	4812      	ldr	r0, [pc, #72]	; (11f24 <ull_conn_rx+0xef8>)
   11eda:	f7f9 fae7 	bl	b4ac <mem_acquire>
		if (!tx) {
   11ede:	4601      	mov	r1, r0
   11ee0:	2800      	cmp	r0, #0
   11ee2:	d0aa      	beq.n	11e3a <ull_conn_rx+0xe0e>
		conn->llcp_version.tx = 1U;
   11ee4:	f895 2132 	ldrb.w	r2, [r5, #306]	; 0x132
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ee8:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   11eea:	f042 0201 	orr.w	r2, r2, #1
   11eee:	f885 2132 	strb.w	r2, [r5, #306]	; 0x132
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ef2:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11ef6:	220c      	movs	r2, #12
		pdu_tx->len =
   11ef8:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11efa:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   11efc:	240b      	movs	r4, #11
		v->sub_version_number =
   11efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f02:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11f06:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f08:	2205      	movs	r2, #5
   11f0a:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   11f0c:	72cb      	strb	r3, [r1, #11]
   11f0e:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   11f10:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11f12:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   11f14:	4628      	mov	r0, r5
   11f16:	f7fe faeb 	bl	104f0 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11f1a:	2301      	movs	r3, #1
   11f1c:	7133      	strb	r3, [r6, #4]
   11f1e:	f7ff baad 	b.w	1147c <ull_conn_rx+0x450>
   11f22:	bf00      	nop
   11f24:	20003580 	.word	0x20003580
   11f28:	0002ca9c 	.word	0x0002ca9c
   11f2c:	0002c650 	.word	0x0002c650
   11f30:	0002c5e0 	.word	0x0002c5e0
   11f34:	0002cbe8 	.word	0x0002cbe8
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11f38:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11f3c:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11f40:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11f44:	d97b      	bls.n	1203e <ull_conn_rx+0x1012>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11f46:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11f4a:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11f4e:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   11f52:	d874      	bhi.n	1203e <ull_conn_rx+0x1012>
			    (interval_max > 3200) ||
   11f54:	428a      	cmp	r2, r1
   11f56:	d872      	bhi.n	1203e <ull_conn_rx+0x1012>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11f58:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   11f5c:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11f60:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   11f64:	d26b      	bcs.n	1203e <ull_conn_rx+0x1012>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11f66:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   11f68:	f1a0 090a 	sub.w	r9, r0, #10
   11f6c:	fa1f f989 	uxth.w	r9, r9
   11f70:	f640 4b76 	movw	fp, #3190	; 0xc76
   11f74:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11f76:	b282      	uxth	r2, r0
			    (latency > 499) ||
   11f78:	d861      	bhi.n	1203e <ull_conn_rx+0x1012>
			     ((latency + 1) * interval_max)) ||
   11f7a:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   11f7e:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   11f82:	d25c      	bcs.n	1203e <ull_conn_rx+0x1012>
			     ((latency + 1) * interval_max)) ||
   11f84:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   11f88:	4559      	cmp	r1, fp
   11f8a:	d358      	bcc.n	1203e <ull_conn_rx+0x1012>
			conn->llcp_conn_param.latency =	latency;
   11f8c:	f8a5 c184 	strh.w	ip, [r5, #388]	; 0x184
			conn->llcp_conn_param.interval_min = interval_min;
   11f90:	f8a5 8180 	strh.w	r8, [r5, #384]	; 0x180
			conn->llcp_conn_param.interval_max = interval_max;
   11f94:	f8a5 e182 	strh.w	lr, [r5, #386]	; 0x182
			conn->llcp_conn_param.timeout =	timeout;
   11f98:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
			conn->llcp_conn_param.preferred_periodicity =
   11f9c:	f885 b188 	strb.w	fp, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11fa0:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   11fa4:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   11fa8:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11fac:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11fb0:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset0);
   11fb4:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   11fb8:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   11fbc:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   11fc0:	f8a5 018c 	strh.w	r0, [r5, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset1);
   11fc4:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   11fc8:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   11fcc:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   11fd0:	f8a5 018e 	strh.w	r0, [r5, #398]	; 0x18e
				sys_le16_to_cpu(cpr->offset2);
   11fd4:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   11fd8:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   11fdc:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   11fe0:	f8a5 0190 	strh.w	r0, [r5, #400]	; 0x190
				sys_le16_to_cpu(cpr->offset3);
   11fe4:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   11fe8:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   11fec:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   11ff0:	f8a5 0192 	strh.w	r0, [r5, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset4);
   11ff4:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   11ff8:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   11ffc:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   12000:	f8a5 0194 	strh.w	r0, [r5, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset5);
   12004:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   12008:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   1200c:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   1200e:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   12012:	f8a5 0196 	strh.w	r0, [r5, #406]	; 0x196
			if ((conn->llcp_conn_param.interval_max !=
   12016:	f000 82b9 	beq.w	1258c <ull_conn_rx+0x1560>
				conn->llcp_conn_param.state =
   1201a:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   1201e:	2103      	movs	r1, #3
   12020:	f361 0202 	bfi	r2, r1, #0, #3
   12024:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
			conn->llcp_conn_param.ack--;
   12028:	9a00      	ldr	r2, [sp, #0]
   1202a:	3a01      	subs	r2, #1
   1202c:	f885 217d 	strb.w	r2, [r5, #381]	; 0x17d
			if (!conn_upd_curr) {
   12030:	2b00      	cmp	r3, #0
   12032:	f47f a84a 	bne.w	110ca <ull_conn_rx+0x9e>
				conn_upd_curr = conn;
   12036:	603d      	str	r5, [r7, #0]
	int nack = 0;
   12038:	4618      	mov	r0, r3
   1203a:	f7ff b847 	b.w	110cc <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   1203e:	1d31      	adds	r1, r6, #4
   12040:	4628      	mov	r0, r5
   12042:	231e      	movs	r3, #30
   12044:	220f      	movs	r2, #15
   12046:	f7ff b967 	b.w	11318 <ull_conn_rx+0x2ec>
		if (!conn->tx_ctrl) {
   1204a:	f8d5 31c0 	ldr.w	r3, [r5, #448]	; 0x1c0
   1204e:	2b00      	cmp	r3, #0
   12050:	f47f aecb 	bne.w	11dea <ull_conn_rx+0xdbe>
			tx->next = conn->tx_head;
   12054:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   12056:	e9c5 226f 	strd	r2, r2, [r5, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1205a:	f8c5 21c4 	str.w	r2, [r5, #452]	; 0x1c4
   1205e:	e6cb      	b.n	11df8 <ull_conn_rx+0xdcc>
				      0x03) == 0x02) &&
   12060:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   12064:	2b03      	cmp	r3, #3
   12066:	f47f a953 	bne.w	11310 <ull_conn_rx+0x2e4>
   1206a:	f7ff b94a 	b.w	11302 <ull_conn_rx+0x2d6>
	instant = sys_le16_to_cpu(ind->instant);
   1206e:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   12070:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   12072:	1a82      	subs	r2, r0, r2
   12074:	0412      	lsls	r2, r2, #16
   12076:	f100 80b0 	bmi.w	121da <ull_conn_rx+0x11ae>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1207a:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   1207e:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
   12082:	eba2 020c 	sub.w	r2, r2, ip
   12086:	f002 0203 	and.w	r2, r2, #3
   1208a:	2a02      	cmp	r2, #2
   1208c:	f000 810b 	beq.w	122a6 <ull_conn_rx+0x127a>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   12090:	f895 c1b4 	ldrb.w	ip, [r5, #436]	; 0x1b4
   12094:	f895 21b5 	ldrb.w	r2, [r5, #437]	; 0x1b5
   12098:	4562      	cmp	r2, ip
   1209a:	d019      	beq.n	120d0 <ull_conn_rx+0x10a4>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1209c:	f895 21b6 	ldrb.w	r2, [r5, #438]	; 0x1b6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   120a0:	f002 0203 	and.w	r2, r2, #3
   120a4:	2a02      	cmp	r2, #2
   120a6:	d113      	bne.n	120d0 <ull_conn_rx+0x10a4>
		conn->llcp_phy.pause_tx = 0U;
   120a8:	f895 21b7 	ldrb.w	r2, [r5, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   120ac:	f895 60ec 	ldrb.w	r6, [r5, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   120b0:	f885 c1b5 	strb.w	ip, [r5, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   120b4:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   120b8:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   120bc:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   120c0:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   120c4:	f885 21b7 	strb.w	r2, [r5, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   120c8:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
   120cc:	f8a5 c0cc 	strh.w	ip, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   120d0:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   120d4:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   120d8:	009b      	lsls	r3, r3, #2
   120da:	f003 031c 	and.w	r3, r3, #28
   120de:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   120e2:	f002 0202 	and.w	r2, r2, #2
   120e6:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   120e8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
	conn->llcp.phy_upd_ind.initiate = 0U;
   120ec:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
   120f0:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   120f2:	6823      	ldr	r3, [r4, #0]
   120f4:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   120f6:	6823      	ldr	r3, [r4, #0]
   120f8:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
	*rx = NULL;
   120fc:	2300      	movs	r3, #0
   120fe:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   12100:	f7fd f8fe 	bl	f300 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   12104:	4604      	mov	r4, r0
   12106:	2800      	cmp	r0, #0
   12108:	f000 8224 	beq.w	12554 <ull_conn_rx+0x1528>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   1210c:	6823      	ldr	r3, [r4, #0]
   1210e:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   12112:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   12114:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   12118:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   1211c:	f8c5 410c 	str.w	r4, [r5, #268]	; 0x10c
	conn->llcp_ack -= 2U;
   12120:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   12122:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   12124:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   12128:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   1212c:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   12130:	f43e afcb 	beq.w	110ca <ull_conn_rx+0x9e>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   12134:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
   12138:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1213c:	f363 1206 	bfi	r2, r3, #4, #3
   12140:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
   12144:	2000      	movs	r0, #0
   12146:	f7fe bfc1 	b.w	110cc <ull_conn_rx+0xa0>
			conn->llcp_length.disabled = 1U;
   1214a:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   1214e:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->llcp_length.disabled = 1U;
   12152:	f042 0308 	orr.w	r3, r2, #8
   12156:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   1215a:	f7ff baef 	b.w	1173c <ull_conn_rx+0x710>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1215e:	f895 217d 	ldrb.w	r2, [r5, #381]	; 0x17d
   12162:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   12166:	429a      	cmp	r2, r3
   12168:	f43f ac58 	beq.w	11a1c <ull_conn_rx+0x9f0>
		rej_ext_ind->error_code = rej_ind->error_code;
   1216c:	f896 3020 	ldrb.w	r3, [r6, #32]
   12170:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   12174:	f995 203d 	ldrsb.w	r2, [r5, #61]	; 0x3d
   12178:	2a00      	cmp	r2, #0
   1217a:	f2c0 81da 	blt.w	12532 <ull_conn_rx+0x1506>
   1217e:	2b1a      	cmp	r3, #26
   12180:	f000 823c 	beq.w	125fc <ull_conn_rx+0x15d0>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   12184:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
   12188:	f002 0307 	and.w	r3, r2, #7
   1218c:	2b04      	cmp	r3, #4
   1218e:	f47f ac7c 	bne.w	11a8a <ull_conn_rx+0xa5e>
		LL_ASSERT(conn_upd_curr == conn);
   12192:	4fd4      	ldr	r7, [pc, #848]	; (124e4 <ull_conn_rx+0x14b8>)
   12194:	683b      	ldr	r3, [r7, #0]
   12196:	429d      	cmp	r5, r3
   12198:	d00e      	beq.n	121b8 <ull_conn_rx+0x118c>
   1219a:	4ad3      	ldr	r2, [pc, #844]	; (124e8 <ull_conn_rx+0x14bc>)
   1219c:	49d3      	ldr	r1, [pc, #844]	; (124ec <ull_conn_rx+0x14c0>)
   1219e:	48d4      	ldr	r0, [pc, #848]	; (124f0 <ull_conn_rx+0x14c4>)
   121a0:	f241 13ba 	movw	r3, #4538	; 0x11ba
   121a4:	f010 fe03 	bl	22dae <printk>
   121a8:	4040      	eors	r0, r0
   121aa:	f380 8811 	msr	BASEPRI, r0
   121ae:	f04f 0003 	mov.w	r0, #3
   121b2:	df02      	svc	2
   121b4:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   121b8:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   121bc:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   121c0:	2300      	movs	r3, #0
   121c2:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   121c4:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   121c8:	e45f      	b.n	11a8a <ull_conn_rx+0xa5e>
   121ca:	464a      	mov	r2, r9
   121cc:	e550      	b.n	11c70 <ull_conn_rx+0xc44>
				nack = reject_ext_ind_send(conn, *rx,
   121ce:	1d31      	adds	r1, r6, #4
   121d0:	4628      	mov	r0, r5
   121d2:	2323      	movs	r3, #35	; 0x23
   121d4:	220f      	movs	r2, #15
   121d6:	f7ff b89f 	b.w	11318 <ull_conn_rx+0x2ec>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   121da:	2301      	movs	r3, #1
   121dc:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   121de:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   121e0:	f885 313b 	strb.w	r3, [r5, #315]	; 0x13b
	int nack = 0;
   121e4:	2000      	movs	r0, #0
   121e6:	f7fe bf71 	b.w	110cc <ull_conn_rx+0xa0>
	conn->llcp_enc.pause_rx = 0U;
   121ea:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   121ee:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   121f2:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   121f6:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   121f8:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
	conn->procedure_expire = 0U;
   121fc:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   12200:	4618      	mov	r0, r3
   12202:	f7fe bf63 	b.w	110cc <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   12206:	1d31      	adds	r1, r6, #4
   12208:	4628      	mov	r0, r5
   1220a:	2323      	movs	r3, #35	; 0x23
   1220c:	f7ff b883 	b.w	11316 <ull_conn_rx+0x2ea>
			conn->llcp_phy.pause_tx = 0U;
   12210:	f895 31b7 	ldrb.w	r3, [r5, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   12214:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   12218:	f885 11b5 	strb.w	r1, [r5, #437]	; 0x1b5
			conn->llcp_phy.pause_tx = 0U;
   1221c:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   12220:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   12222:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   12226:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   1222a:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   1222c:	f885 31b7 	strb.w	r3, [r5, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   12230:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   12234:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   12238:	f140 8091 	bpl.w	1235e <ull_conn_rx+0x1332>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1223c:	6821      	ldr	r1, [r4, #0]
				p->status = 0U;
   1223e:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12240:	2019      	movs	r0, #25
   12242:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   12244:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   12246:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   12248:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   1224c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12250:	77b3      	strb	r3, [r6, #30]
   12252:	f7ff ba73 	b.w	1173c <ull_conn_rx+0x710>
			conn->llcp_length.ack = conn->llcp_length.req;
   12256:	9b00      	ldr	r3, [sp, #0]
   12258:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
			conn->procedure_expire = 0U;
   1225c:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1225e:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   12260:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   12264:	f000 8115 	beq.w	12492 <ull_conn_rx+0x1466>
			conn->lll.max_rx_time = eff_rx_time;
   12268:	f8a5 c062 	strh.w	ip, [r5, #98]	; 0x62
			if (tx) {
   1226c:	2900      	cmp	r1, #0
   1226e:	f000 8126 	beq.w	124be <ull_conn_rx+0x1492>
				conn->llcp_length.state =
   12272:	f895 41a6 	ldrb.w	r4, [r5, #422]	; 0x1a6
					(conn->llcp_length.req - 1);
   12276:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   12278:	f8a5 e1a8 	strh.w	lr, [r5, #424]	; 0x1a8
				conn->llcp_length.state =
   1227c:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   1227e:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   12280:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
   12284:	f885 31a5 	strb.w	r3, [r5, #421]	; 0x1a5
				conn->llcp_length.tx_octets = eff_tx_octets;
   12288:	f8a5 21aa 	strh.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_length.rx_time = eff_rx_time;
   1228c:	f8a5 c1ac 	strh.w	ip, [r5, #428]	; 0x1ac
				conn->llcp_length.tx_time = eff_tx_time;
   12290:	f8a5 01ae 	strh.w	r0, [r5, #430]	; 0x1ae
				conn->llcp_length.state =
   12294:	f885 41a6 	strb.w	r4, [r5, #422]	; 0x1a6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   12298:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1229c:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1229e:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   122a2:	84f0      	strh	r0, [r6, #38]	; 0x26
   122a4:	e521      	b.n	11cea <ull_conn_rx+0xcbe>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   122a6:	2301      	movs	r3, #1
   122a8:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   122aa:	232a      	movs	r3, #42	; 0x2a
   122ac:	e798      	b.n	121e0 <ull_conn_rx+0x11b4>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   122ae:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
				conn->llcp_ack -= 2U;
   122b2:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   122b4:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   122b8:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   122ba:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   122be:	f885 20f8 	strb.w	r2, [r5, #248]	; 0xf8
				conn->llcp_type = LLCP_ENCRYPTION;
   122c2:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
				conn->llcp_ack -= 2U;
   122c6:	f7ff bb87 	b.w	119d8 <ull_conn_rx+0x9ac>
			LL_ASSERT(conn_upd_curr == conn);
   122ca:	4f86      	ldr	r7, [pc, #536]	; (124e4 <ull_conn_rx+0x14b8>)
   122cc:	683a      	ldr	r2, [r7, #0]
   122ce:	4295      	cmp	r5, r2
   122d0:	d00e      	beq.n	122f0 <ull_conn_rx+0x12c4>
   122d2:	4a85      	ldr	r2, [pc, #532]	; (124e8 <ull_conn_rx+0x14bc>)
   122d4:	4985      	ldr	r1, [pc, #532]	; (124ec <ull_conn_rx+0x14c0>)
   122d6:	4886      	ldr	r0, [pc, #536]	; (124f0 <ull_conn_rx+0x14c4>)
   122d8:	f641 037c 	movw	r3, #6268	; 0x187c
   122dc:	f010 fd67 	bl	22dae <printk>
   122e0:	4040      	eors	r0, r0
   122e2:	f380 8811 	msr	BASEPRI, r0
   122e6:	f04f 0003 	mov.w	r0, #3
   122ea:	df02      	svc	2
   122ec:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
			if (!conn->llcp_conn_param.cmd) {
   122f0:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   122f4:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   122f8:	2300      	movs	r3, #0
   122fa:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   122fc:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12300:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
   12302:	f43e aeec 	beq.w	110de <ull_conn_rx+0xb2>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12306:	2115      	movs	r1, #21
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12308:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1230a:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1230c:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   1230e:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   12310:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
   12314:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
   12316:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   12318:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   1231c:	237d      	movs	r3, #125	; 0x7d
   1231e:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   12322:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   12324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12328:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1232c:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1232e:	f7ff ba05 	b.w	1173c <ull_conn_rx+0x710>
		conn_upd_curr = conn;
   12332:	601d      	str	r5, [r3, #0]
   12334:	f7ff b9b7 	b.w	116a6 <ull_conn_rx+0x67a>
				      0x03) == 0x02) &&
   12338:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   1233c:	2a03      	cmp	r2, #3
   1233e:	f47f ac70 	bne.w	11c22 <ull_conn_rx+0xbf6>
   12342:	e467      	b.n	11c14 <ull_conn_rx+0xbe8>
	struct node_tx *tx = NULL;
   12344:	2100      	movs	r1, #0
   12346:	f7ff b816 	b.w	11376 <ull_conn_rx+0x34a>
				conn->llcp_length.state =
   1234a:	2604      	movs	r6, #4
   1234c:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   12350:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   12354:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
				conn->llcp_length.state =
   12358:	f885 31a6 	strb.w	r3, [r5, #422]	; 0x1a6
   1235c:	e4bb      	b.n	11cd6 <ull_conn_rx+0xcaa>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1235e:	6823      	ldr	r3, [r4, #0]
   12360:	2201      	movs	r2, #1
   12362:	711a      	strb	r2, [r3, #4]
   12364:	f7ff b9ea 	b.w	1173c <ull_conn_rx+0x710>
			tx->next = conn->tx_head->next;
   12368:	6811      	ldr	r1, [r2, #0]
   1236a:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   1236c:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   1236e:	e9c5 3370 	strd	r3, r3, [r5, #448]	; 0x1c0
   12372:	f7ff b934 	b.w	115de <ull_conn_rx+0x5b2>
				uint16_t interval_min =
   12376:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1237a:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   1237e:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12382:	f67f ae5c 	bls.w	1203e <ull_conn_rx+0x1012>
				uint16_t interval_max =
   12386:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1238a:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   1238e:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12392:	f63f ae54 	bhi.w	1203e <ull_conn_rx+0x1012>
				    (interval_max > 3200) ||
   12396:	4290      	cmp	r0, r2
   12398:	f63f ae51 	bhi.w	1203e <ull_conn_rx+0x1012>
				uint16_t latency =
   1239c:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   123a0:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   123a4:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   123a8:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   123ac:	f4bf ae47 	bcs.w	1203e <ull_conn_rx+0x1012>
				uint16_t timeout =
   123b0:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   123b2:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
   123b6:	f1a0 090a 	sub.w	r9, r0, #10
   123ba:	fa1f f989 	uxth.w	r9, r9
   123be:	f640 4a76 	movw	sl, #3190	; 0xc76
   123c2:	45d1      	cmp	r9, sl
				uint16_t timeout =
   123c4:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   123c8:	f63f ae39 	bhi.w	1203e <ull_conn_rx+0x1012>
				     ((latency + 1) * interval_max)) ||
   123cc:	9801      	ldr	r0, [sp, #4]
   123ce:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   123d2:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   123d6:	f4bf ae32 	bcs.w	1203e <ull_conn_rx+0x1012>
				     ((latency + 1) * interval_max)) ||
   123da:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   123de:	4552      	cmp	r2, sl
   123e0:	f4ff ae2d 	bcc.w	1203e <ull_conn_rx+0x1012>
				conn->llcp_conn_param.timeout =	timeout;
   123e4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
   123e8:	f8a5 c184 	strh.w	ip, [r5, #388]	; 0x184
				conn->llcp_conn_param.interval_min =
   123ec:	f8a5 8180 	strh.w	r8, [r5, #384]	; 0x180
				conn->llcp_conn_param.interval_max =
   123f0:	f8a5 e182 	strh.w	lr, [r5, #386]	; 0x182
				conn->llcp_conn_param.timeout =	timeout;
   123f4:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
				conn->llcp_conn_param.preferred_periodicity =
   123f8:	f885 a188 	strb.w	sl, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   123fc:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   12400:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   12404:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12408:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1240c:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset0);
   12410:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   12414:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   12418:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   1241c:	f8a5 018c 	strh.w	r0, [r5, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset1);
   12420:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   12424:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   12428:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1242c:	f8a5 018e 	strh.w	r0, [r5, #398]	; 0x18e
					sys_le16_to_cpu(cpr->offset2);
   12430:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   12434:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   12438:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1243c:	f8a5 0190 	strh.w	r0, [r5, #400]	; 0x190
					sys_le16_to_cpu(cpr->offset3);
   12440:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   12444:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   12448:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1244c:	f8a5 0192 	strh.w	r0, [r5, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset4);
   12450:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   12454:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   12458:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1245c:	f8a5 0194 	strh.w	r0, [r5, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset5);
   12460:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   12464:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   12468:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   1246a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   1246e:	f8a5 0196 	strh.w	r0, [r5, #406]	; 0x196
				if ((conn->llcp_conn_param.interval_max !=
   12472:	f000 80ac 	beq.w	125ce <ull_conn_rx+0x15a2>
					if (conn->llcp_enc.pause_tx) {
   12476:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
   12478:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
					if (conn->llcp_enc.pause_tx) {
   1247c:	f57f adcf 	bpl.w	1201e <ull_conn_rx+0xff2>
						(*rx)->hdr.type =
   12480:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
   12482:	2002      	movs	r0, #2
   12484:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type =
   12488:	2001      	movs	r0, #1
						conn->llcp_conn_param.state =
   1248a:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
						(*rx)->hdr.type =
   1248e:	7108      	strb	r0, [r1, #4]
   12490:	e5ca      	b.n	12028 <ull_conn_rx+0xffc>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   12492:	4558      	cmp	r0, fp
   12494:	f47f aee8 	bne.w	12268 <ull_conn_rx+0x123c>
			    eff_rx_time == conn->lll.max_rx_time &&
   12498:	45d4      	cmp	ip, sl
   1249a:	f47f aee5 	bne.w	12268 <ull_conn_rx+0x123c>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1249e:	6823      	ldr	r3, [r4, #0]
   124a0:	2401      	movs	r4, #1
   124a2:	711c      	strb	r4, [r3, #4]
				goto send_length_resp;
   124a4:	e421      	b.n	11cea <ull_conn_rx+0xcbe>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   124a6:	f895 30dd 	ldrb.w	r3, [r5, #221]	; 0xdd
			conn->llcp_ack += 2U;
   124aa:	3202      	adds	r2, #2
   124ac:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   124b0:	b953      	cbnz	r3, 124c8 <ull_conn_rx+0x149c>
			conn->slave.llcp_type = conn->llcp_type;
   124b2:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   124b6:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   124ba:	f7ff ba18 	b.w	118ee <ull_conn_rx+0x8c2>
				conn->lll.max_tx_octets = eff_tx_octets;
   124be:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   124c2:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   124c6:	e6e7      	b.n	12298 <ull_conn_rx+0x126c>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   124c8:	4a07      	ldr	r2, [pc, #28]	; (124e8 <ull_conn_rx+0x14bc>)
   124ca:	490a      	ldr	r1, [pc, #40]	; (124f4 <ull_conn_rx+0x14c8>)
   124cc:	4808      	ldr	r0, [pc, #32]	; (124f0 <ull_conn_rx+0x14c4>)
   124ce:	f241 6309 	movw	r3, #5641	; 0x1609
   124d2:	f010 fc6c 	bl	22dae <printk>
   124d6:	4040      	eors	r0, r0
   124d8:	f380 8811 	msr	BASEPRI, r0
   124dc:	f04f 0003 	mov.w	r0, #3
   124e0:	df02      	svc	2
   124e2:	e7e6      	b.n	124b2 <ull_conn_rx+0x1486>
   124e4:	200034fc 	.word	0x200034fc
   124e8:	0002ca9c 	.word	0x0002ca9c
   124ec:	0002cc10 	.word	0x0002cc10
   124f0:	0002c5e0 	.word	0x0002c5e0
   124f4:	0002cbc4 	.word	0x0002cbc4
		LL_ASSERT(conn_upd_curr == conn);
   124f8:	4f60      	ldr	r7, [pc, #384]	; (1267c <ull_conn_rx+0x1650>)
   124fa:	6839      	ldr	r1, [r7, #0]
   124fc:	428d      	cmp	r5, r1
   124fe:	d010      	beq.n	12522 <ull_conn_rx+0x14f6>
   12500:	4a5f      	ldr	r2, [pc, #380]	; (12680 <ull_conn_rx+0x1654>)
   12502:	4960      	ldr	r1, [pc, #384]	; (12684 <ull_conn_rx+0x1658>)
   12504:	4860      	ldr	r0, [pc, #384]	; (12688 <ull_conn_rx+0x165c>)
   12506:	f241 13ba 	movw	r3, #4538	; 0x11ba
   1250a:	f010 fc50 	bl	22dae <printk>
   1250e:	4040      	eors	r0, r0
   12510:	f380 8811 	msr	BASEPRI, r0
   12514:	f04f 0003 	mov.w	r0, #3
   12518:	df02      	svc	2
   1251a:	f895 317c 	ldrb.w	r3, [r5, #380]	; 0x17c
   1251e:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12522:	f885 317d 	strb.w	r3, [r5, #381]	; 0x17d
	conn_upd_curr = NULL;
   12526:	2300      	movs	r3, #0
   12528:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1252a:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   1252e:	f7ff baac 	b.w	11a8a <ull_conn_rx+0xa5e>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   12532:	2b23      	cmp	r3, #35	; 0x23
   12534:	f43f ae26 	beq.w	12184 <ull_conn_rx+0x1158>
			conn->slave.ticks_to_offset =
   12538:	f8d5 31a0 	ldr.w	r3, [r5, #416]	; 0x1a0
   1253c:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
   12540:	e620      	b.n	12184 <ull_conn_rx+0x1158>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   12542:	2a23      	cmp	r2, #35	; 0x23
   12544:	f43f aa9a 	beq.w	11a7c <ull_conn_rx+0xa50>
			conn->slave.ticks_to_offset =
   12548:	f8d5 21a0 	ldr.w	r2, [r5, #416]	; 0x1a0
   1254c:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
   12550:	f7ff ba94 	b.w	11a7c <ull_conn_rx+0xa50>
	LL_ASSERT(rx_dle);
   12554:	4a4a      	ldr	r2, [pc, #296]	; (12680 <ull_conn_rx+0x1654>)
   12556:	494d      	ldr	r1, [pc, #308]	; (1268c <ull_conn_rx+0x1660>)
   12558:	484b      	ldr	r0, [pc, #300]	; (12688 <ull_conn_rx+0x165c>)
   1255a:	f241 4372 	movw	r3, #5234	; 0x1472
   1255e:	f010 fc26 	bl	22dae <printk>
   12562:	4040      	eors	r0, r0
   12564:	f380 8811 	msr	BASEPRI, r0
   12568:	f04f 0003 	mov.w	r0, #3
   1256c:	df02      	svc	2
   1256e:	e5cd      	b.n	1210c <ull_conn_rx+0x10e0>
			tx->next = conn->tx_head->next;
   12570:	680b      	ldr	r3, [r1, #0]
   12572:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   12574:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   12576:	e9c5 2270 	strd	r2, r2, [r5, #448]	; 0x1c0
   1257a:	e43d      	b.n	11df8 <ull_conn_rx+0xdcc>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1257c:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   12580:	f012 0f06 	tst.w	r2, #6
   12584:	f43f ab6b 	beq.w	11c5e <ull_conn_rx+0xc32>
   12588:	f7fe beee 	b.w	11368 <ull_conn_rx+0x33c>
			     lll->interval) ||
   1258c:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   1258e:	4550      	cmp	r0, sl
   12590:	f47f ad43 	bne.w	1201a <ull_conn_rx+0xfee>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12594:	f240 40e2 	movw	r0, #1250	; 0x4e2
   12598:	fb00 f101 	mul.w	r1, r0, r1
   1259c:	f242 7010 	movw	r0, #10000	; 0x2710
   125a0:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   125a4:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   125a8:	3a01      	subs	r2, #1
   125aa:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   125ae:	b292      	uxth	r2, r2
   125b0:	4290      	cmp	r0, r2
   125b2:	f47f ad32 	bne.w	1201a <ull_conn_rx+0xfee>
				conn->llcp_conn_param.state =
   125b6:	f8b5 217e 	ldrh.w	r2, [r5, #382]	; 0x17e
   125ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   125be:	f042 0201 	orr.w	r2, r2, #1
   125c2:	f8a5 217e 	strh.w	r2, [r5, #382]	; 0x17e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   125c6:	6822      	ldr	r2, [r4, #0]
   125c8:	2101      	movs	r1, #1
   125ca:	7111      	strb	r1, [r2, #4]
   125cc:	e52c      	b.n	12028 <ull_conn_rx+0xffc>
				     lll->interval) ||
   125ce:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   125d0:	9802      	ldr	r0, [sp, #8]
   125d2:	4282      	cmp	r2, r0
   125d4:	f47f af4f 	bne.w	12476 <ull_conn_rx+0x144a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   125d8:	f240 42e2 	movw	r2, #1250	; 0x4e2
   125dc:	fb02 f00c 	mul.w	r0, r2, ip
   125e0:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   125e4:	f8b5 60c6 	ldrh.w	r6, [r5, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   125e8:	fb02 020b 	mla	r2, r2, fp, r0
   125ec:	3a01      	subs	r2, #1
   125ee:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   125f2:	b292      	uxth	r2, r2
   125f4:	4296      	cmp	r6, r2
   125f6:	f47f af3e 	bne.w	12476 <ull_conn_rx+0x144a>
   125fa:	e7dc      	b.n	125b6 <ull_conn_rx+0x158a>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   125fc:	f895 3110 	ldrb.w	r3, [r5, #272]	; 0x110
   12600:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
   12604:	4293      	cmp	r3, r2
   12606:	d00e      	beq.n	12626 <ull_conn_rx+0x15fa>
   12608:	4a1d      	ldr	r2, [pc, #116]	; (12680 <ull_conn_rx+0x1654>)
   1260a:	4921      	ldr	r1, [pc, #132]	; (12690 <ull_conn_rx+0x1664>)
   1260c:	481e      	ldr	r0, [pc, #120]	; (12688 <ull_conn_rx+0x165c>)
   1260e:	f241 139f 	movw	r3, #4511	; 0x119f
   12612:	f010 fbcc 	bl	22dae <printk>
   12616:	4040      	eors	r0, r0
   12618:	f380 8811 	msr	BASEPRI, r0
   1261c:	f04f 0003 	mov.w	r0, #3
   12620:	df02      	svc	2
   12622:	f895 2111 	ldrb.w	r2, [r5, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12626:	f895 117e 	ldrb.w	r1, [r5, #382]	; 0x17e
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1262a:	f8b5 3182 	ldrh.w	r3, [r5, #386]	; 0x182
   1262e:	f8a5 3114 	strh.w	r3, [r5, #276]	; 0x114
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12632:	2305      	movs	r3, #5
   12634:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12638:	f895 0112 	ldrb.w	r0, [r5, #274]	; 0x112
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1263c:	f885 117e 	strb.w	r1, [r5, #382]	; 0x17e
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12640:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12644:	00db      	lsls	r3, r3, #3
   12646:	f020 000f 	bic.w	r0, r0, #15
   1264a:	f043 0301 	orr.w	r3, r3, #1
   1264e:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   12650:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   12652:	2401      	movs	r4, #1
		conn->llcp_cu.ack--;
   12654:	f885 2111 	strb.w	r2, [r5, #273]	; 0x111
		conn->llcp_cu.win_offset_us = 0U;
   12658:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1265a:	f8b5 2184 	ldrh.w	r2, [r5, #388]	; 0x184
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1265e:	f885 3112 	strb.w	r3, [r5, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12662:	f8b5 3186 	ldrh.w	r3, [r5, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   12666:	f885 4120 	strb.w	r4, [r5, #288]	; 0x120
		conn->llcp_cu.win_offset_us = 0U;
   1266a:	f8c5 011c 	str.w	r0, [r5, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1266e:	f8a5 2116 	strh.w	r2, [r5, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12672:	f8a5 3118 	strh.w	r3, [r5, #280]	; 0x118
	if (err) {
   12676:	f7fe bd26 	b.w	110c6 <ull_conn_rx+0x9a>
   1267a:	bf00      	nop
   1267c:	200034fc 	.word	0x200034fc
   12680:	0002ca9c 	.word	0x0002ca9c
   12684:	0002cc10 	.word	0x0002cc10
   12688:	0002c5e0 	.word	0x0002c5e0
   1268c:	0002cc28 	.word	0x0002cc28
   12690:	0002cbe8 	.word	0x0002cbe8

00012694 <ull_conn_llcp>:
{
   12694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12698:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   1269a:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   1269e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   126a2:	4298      	cmp	r0, r3
{
   126a4:	460d      	mov	r5, r1
   126a6:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   126a8:	d04f      	beq.n	1274a <ull_conn_llcp+0xb6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   126aa:	1a1b      	subs	r3, r3, r0
   126ac:	f003 0303 	and.w	r3, r3, #3
   126b0:	2b02      	cmp	r3, #2
   126b2:	d062      	beq.n	1277a <ull_conn_llcp+0xe6>
   126b4:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   126b8:	468c      	mov	ip, r1
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   126ba:	f1bc 0f00 	cmp.w	ip, #0
   126be:	f2c0 8084 	blt.w	127ca <ull_conn_llcp+0x136>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   126c2:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   126c6:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   126ca:	429a      	cmp	r2, r3
   126cc:	d03a      	beq.n	12744 <ull_conn_llcp+0xb0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   126ce:	48c3      	ldr	r0, [pc, #780]	; (129dc <ull_conn_llcp+0x348>)
   126d0:	f7f8 feec 	bl	b4ac <mem_acquire>
		if (tx) {
   126d4:	b368      	cbz	r0, 12732 <ull_conn_llcp+0x9e>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   126d6:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   126da:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   126de:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   126e0:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   126e2:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   126e6:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   126e8:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   126ea:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   126ec:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_tx->llctrl.terminate_ind.error_code =
   126f0:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   126f4:	7202      	strb	r2, [r0, #8]
	if (
   126f6:	2b00      	cmp	r3, #0
   126f8:	d05a      	beq.n	127b0 <ull_conn_llcp+0x11c>
	    !conn->llcp_enc.pause_tx &&
   126fa:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   126fe:	0791      	lsls	r1, r2, #30
   12700:	d456      	bmi.n	127b0 <ull_conn_llcp+0x11c>
	    !conn->llcp_phy.pause_tx &&
   12702:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12706:	07d2      	lsls	r2, r2, #31
   12708:	d452      	bmi.n	127b0 <ull_conn_llcp+0x11c>
		if (conn->tx_head == conn->tx_data) {
   1270a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1270e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12710:	bf04      	itt	eq
   12712:	681a      	ldreq	r2, [r3, #0]
   12714:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12718:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1271c:	2a00      	cmp	r2, #0
   1271e:	d14b      	bne.n	127b8 <ull_conn_llcp+0x124>
			tx->next = conn->tx_head->next;
   12720:	681a      	ldr	r2, [r3, #0]
   12722:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   12724:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   12726:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   12728:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   1272c:	b90b      	cbnz	r3, 12732 <ull_conn_llcp+0x9e>
		conn->tx_data_last = tx;
   1272e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		if (!conn->procedure_expire) {
   12732:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
   12736:	b928      	cbnz	r0, 12744 <ull_conn_llcp+0xb0>
			conn->procedure_expire = conn->supervision_reload;
   12738:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
   1273c:	2b01      	cmp	r3, #1
   1273e:	d95e      	bls.n	127fe <ull_conn_llcp+0x16a>
			conn->procedure_expire = conn->supervision_reload;
   12740:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   12744:	2000      	movs	r0, #0
}
   12746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1274a:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
	if ((conn->llcp_ack == conn->llcp_req) &&
   1274e:	2900      	cmp	r1, #0
   12750:	468c      	mov	ip, r1
   12752:	f2c0 81be 	blt.w	12ad2 <ull_conn_llcp+0x43e>
	    !conn->llcp_enc.pause_rx) {
   12756:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1275a:	f012 0801 	ands.w	r8, r2, #1
   1275e:	d1ac      	bne.n	126ba <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   12760:	f894 e111 	ldrb.w	lr, [r4, #273]	; 0x111
   12764:	f894 7110 	ldrb.w	r7, [r4, #272]	; 0x110
   12768:	4577      	cmp	r7, lr
   1276a:	f000 8369 	beq.w	12e40 <ull_conn_llcp+0x7ac>
			conn->llcp_ack -= 2U;
   1276e:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   12770:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   12772:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
   12776:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1277a:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   1277e:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
   12782:	429a      	cmp	r2, r3
   12784:	d006      	beq.n	12794 <ull_conn_llcp+0x100>
			if ((conn->llcp_length.state ==
   12786:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
   1278a:	f002 0106 	and.w	r1, r2, #6
   1278e:	2904      	cmp	r1, #4
   12790:	f000 81a5 	beq.w	12ade <ull_conn_llcp+0x44a>
		switch (conn->llcp_type) {
   12794:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
   12798:	1e7b      	subs	r3, r7, #1
   1279a:	2b05      	cmp	r3, #5
   1279c:	f200 818b 	bhi.w	12ab6 <ull_conn_llcp+0x422>
   127a0:	e8df f013 	tbh	[pc, r3, lsl #1]
   127a4:	01240156 	.word	0x01240156
   127a8:	01890096 	.word	0x01890096
   127ac:	004c0057 	.word	0x004c0057
		if (!conn->tx_ctrl) {
   127b0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   127b4:	2a00      	cmp	r2, #0
   127b6:	d03b      	beq.n	12830 <ull_conn_llcp+0x19c>
	tx->next = conn->tx_ctrl_last->next;
   127b8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   127bc:	681a      	ldr	r2, [r3, #0]
   127be:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   127c0:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   127c2:	6803      	ldr	r3, [r0, #0]
   127c4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
}
   127c8:	e7b0      	b.n	1272c <ull_conn_llcp+0x98>
   127ca:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   127ce:	2a00      	cmp	r2, #0
   127d0:	f43f af77 	beq.w	126c2 <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   127d4:	2a02      	cmp	r2, #2
   127d6:	f000 8146 	beq.w	12a66 <ull_conn_llcp+0x3d2>
   127da:	2a06      	cmp	r2, #6
   127dc:	d014      	beq.n	12808 <ull_conn_llcp+0x174>
   127de:	2a01      	cmp	r2, #1
   127e0:	d01b      	beq.n	1281a <ull_conn_llcp+0x186>
			LL_ASSERT(0);
   127e2:	4a7f      	ldr	r2, [pc, #508]	; (129e0 <ull_conn_llcp+0x34c>)
   127e4:	497f      	ldr	r1, [pc, #508]	; (129e4 <ull_conn_llcp+0x350>)
   127e6:	4880      	ldr	r0, [pc, #512]	; (129e8 <ull_conn_llcp+0x354>)
   127e8:	f240 4316 	movw	r3, #1046	; 0x416
   127ec:	f010 fadf 	bl	22dae <printk>
   127f0:	4040      	eors	r0, r0
   127f2:	f380 8811 	msr	BASEPRI, r0
   127f6:	f04f 0003 	mov.w	r0, #3
   127fa:	df02      	svc	2
			break;
   127fc:	e761      	b.n	126c2 <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   127fe:	3301      	adds	r3, #1
   12800:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   12804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			event_counter = lll->event_counter +
   12808:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1280a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1280c:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1280e:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12810:	b291      	uxth	r1, r2
   12812:	4620      	mov	r0, r4
   12814:	f7fd fefe 	bl	10614 <event_phy_upd_ind_prep>
		break;
   12818:	e753      	b.n	126c2 <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   1281a:	462a      	mov	r2, r5
   1281c:	4631      	mov	r1, r6
   1281e:	4620      	mov	r0, r4
   12820:	f7ee f95e 	bl	ae0 <event_conn_upd_prep>
   12824:	2800      	cmp	r0, #0
   12826:	f47f af4c 	bne.w	126c2 <ull_conn_llcp+0x2e>
				return -ECANCELED;
   1282a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1282e:	e78a      	b.n	12746 <ull_conn_llcp+0xb2>
			tx->next = conn->tx_head;
   12830:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12832:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   12836:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1283a:	e777      	b.n	1272c <ull_conn_llcp+0x98>
			event_counter = lll->event_counter +
   1283c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   1283e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   12840:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   12842:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12844:	b289      	uxth	r1, r1
   12846:	4620      	mov	r0, r4
   12848:	f7fd fee4 	bl	10614 <event_phy_upd_ind_prep>
		break;
   1284c:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12850:	e733      	b.n	126ba <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12852:	4862      	ldr	r0, [pc, #392]	; (129dc <ull_conn_llcp+0x348>)
   12854:	f7f8 fe2a 	bl	b4ac <mem_acquire>
	if (tx) {
   12858:	2800      	cmp	r0, #0
   1285a:	f000 8101 	beq.w	12a60 <ull_conn_llcp+0x3cc>
		conn->llcp_ack = conn->llcp_req;
   1285e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12862:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   12866:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12868:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   1286a:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1286c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12870:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   12874:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12876:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   12878:	71c1      	strb	r1, [r0, #7]
	if (
   1287a:	2b00      	cmp	r3, #0
   1287c:	f000 831e 	beq.w	12ebc <ull_conn_llcp+0x828>
	    !conn->llcp_enc.pause_tx &&
   12880:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12884:	0792      	lsls	r2, r2, #30
   12886:	f100 8319 	bmi.w	12ebc <ull_conn_llcp+0x828>
	    !conn->llcp_phy.pause_tx &&
   1288a:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1288e:	07d7      	lsls	r7, r2, #31
   12890:	f100 8314 	bmi.w	12ebc <ull_conn_llcp+0x828>
		if (conn->tx_head == conn->tx_data) {
   12894:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12898:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1289a:	bf04      	itt	eq
   1289c:	681a      	ldreq	r2, [r3, #0]
   1289e:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   128a2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   128a6:	2a00      	cmp	r2, #0
   128a8:	f000 87e0 	beq.w	1386c <ull_conn_llcp+0x11d8>
	tx->next = conn->tx_ctrl_last->next;
   128ac:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   128b0:	681a      	ldr	r2, [r3, #0]
   128b2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   128b4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   128b6:	6803      	ldr	r3, [r0, #0]
   128b8:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   128bc:	2b00      	cmp	r3, #0
   128be:	f000 8446 	beq.w	1314e <ull_conn_llcp+0xaba>
		conn->procedure_expire = conn->procedure_reload;
   128c2:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   128c6:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   128ca:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   128ce:	e6f4      	b.n	126ba <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   128d0:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
   128d4:	f012 0803 	ands.w	r8, r2, #3
   128d8:	f000 8165 	beq.w	12ba6 <ull_conn_llcp+0x512>
		if (lll->role &&
   128dc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   128e0:	2b00      	cmp	r3, #0
   128e2:	f6bf aeee 	bge.w	126c2 <ull_conn_llcp+0x2e>
   128e6:	f1b8 0f01 	cmp.w	r8, #1
   128ea:	f47f af6e 	bne.w	127ca <ull_conn_llcp+0x136>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   128ee:	483b      	ldr	r0, [pc, #236]	; (129dc <ull_conn_llcp+0x348>)
   128f0:	f7f8 fddc 	bl	b4ac <mem_acquire>
	if (!tx) {
   128f4:	4680      	mov	r8, r0
   128f6:	2800      	cmp	r0, #0
   128f8:	f000 80b2 	beq.w	12a60 <ull_conn_llcp+0x3cc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   128fc:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   128fe:	2204      	movs	r2, #4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12900:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   12904:	210d      	movs	r1, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12906:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1290a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1290c:	7141      	strb	r1, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1290e:	71c2      	strb	r2, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12910:	210c      	movs	r1, #12
   12912:	4638      	mov	r0, r7
   12914:	f003 f976 	bl	15c04 <lll_csrand_isr_get>
   12918:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1291c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   12920:	f8c4 2106 	str.w	r2, [r4, #262]	; 0x106
   12924:	f8c4 3102 	str.w	r3, [r4, #258]	; 0x102
	    conn->tx_head &&
   12928:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   1292c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   12930:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
	if (
   12934:	2b00      	cmp	r3, #0
   12936:	f000 85a5 	beq.w	13484 <ull_conn_llcp+0xdf0>
	    !conn->llcp_enc.pause_tx &&
   1293a:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1293e:	0791      	lsls	r1, r2, #30
   12940:	f100 85a0 	bmi.w	13484 <ull_conn_llcp+0xdf0>
	    !conn->llcp_phy.pause_tx &&
   12944:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12948:	07d2      	lsls	r2, r2, #31
   1294a:	f100 859b 	bmi.w	13484 <ull_conn_llcp+0xdf0>
		if (conn->tx_head == conn->tx_data) {
   1294e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12952:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12954:	bf04      	itt	eq
   12956:	681a      	ldreq	r2, [r3, #0]
   12958:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1295c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12960:	2a00      	cmp	r2, #0
   12962:	f000 87b4 	beq.w	138ce <ull_conn_llcp+0x123a>
	tx->next = conn->tx_ctrl_last->next;
   12966:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1296a:	681a      	ldr	r2, [r3, #0]
   1296c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   12970:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
   12974:	f8d8 3000 	ldr.w	r3, [r8]
   12978:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1297c:	2b00      	cmp	r3, #0
   1297e:	f000 86c4 	beq.w	1370a <ull_conn_llcp+0x1076>
			rx = ll_pdu_rx_alloc();
   12982:	f7fc fcbd 	bl	f300 <ll_pdu_rx_alloc>
			if (!rx) {
   12986:	4601      	mov	r1, r0
   12988:	2800      	cmp	r0, #0
   1298a:	d069      	beq.n	12a60 <ull_conn_llcp+0x3cc>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1298c:	7f0b      	ldrb	r3, [r1, #28]
			rx->hdr.handle = conn->lll.handle;
   1298e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   12990:	80ca      	strh	r2, [r1, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   12992:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12996:	2203      	movs	r2, #3
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12998:	2017      	movs	r0, #23
   1299a:	7748      	strb	r0, [r1, #29]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1299c:	770b      	strb	r3, [r1, #28]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1299e:	710a      	strb	r2, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   129a0:	77ca      	strb	r2, [r1, #31]
   129a2:	f8d4 2165 	ldr.w	r2, [r4, #357]	; 0x165
   129a6:	f8d4 3161 	ldr.w	r3, [r4, #353]	; 0x161
   129aa:	620b      	str	r3, [r1, #32]
   129ac:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   129ae:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
   129b2:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   129b6:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   129ba:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   129be:	6808      	ldr	r0, [r1, #0]
   129c0:	f7fc fc70 	bl	f2a4 <ll_rx_put>
			ll_rx_sched();
   129c4:	f7fc fc78 	bl	f2b8 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   129c8:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   129cc:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   129d0:	2202      	movs	r2, #2
   129d2:	f362 0301 	bfi	r3, r2, #0, #2
   129d6:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   129da:	e66e      	b.n	126ba <ull_conn_llcp+0x26>
   129dc:	20003580 	.word	0x20003580
   129e0:	0002ca9c 	.word	0x0002ca9c
   129e4:	0002c650 	.word	0x0002c650
   129e8:	0002c5e0 	.word	0x0002c5e0
			event_counter = lll->event_counter +
   129ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   129ee:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   129f0:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   129f4:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
   129f6:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   129f8:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   129fc:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   129fe:	f040 8085 	bne.w	12b0c <ull_conn_llcp+0x478>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12a02:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   12a06:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12a0a:	1afb      	subs	r3, r7, r3
   12a0c:	0418      	lsls	r0, r3, #16
   12a0e:	f53f ae54 	bmi.w	126ba <ull_conn_llcp+0x26>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12a12:	f1bc 0f00 	cmp.w	ip, #0
   12a16:	f2c0 8392 	blt.w	1313e <ull_conn_llcp+0xaaa>
			conn->llcp_ack = conn->llcp_req;
   12a1a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12a1e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   12a22:	4623      	mov	r3, r4
		memcpy(&lll->data_chan_map[0],
   12a24:	f104 0038 	add.w	r0, r4, #56	; 0x38
   12a28:	f853 2fed 	ldr.w	r2, [r3, #237]!
   12a2c:	63a2      	str	r2, [r4, #56]	; 0x38
   12a2e:	791b      	ldrb	r3, [r3, #4]
   12a30:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   12a32:	2105      	movs	r1, #5
   12a34:	f7f8 ff06 	bl	b844 <util_ones_count_get>
		lll->data_chan_count =
   12a38:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12a3c:	2301      	movs	r3, #1
		lll->data_chan_count =
   12a3e:	f360 0c05 	bfi	ip, r0, #0, #6
   12a42:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12a46:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
   12a4a:	fa4f fc8c 	sxtb.w	ip, ip
   12a4e:	e634      	b.n	126ba <ull_conn_llcp+0x26>
			if (event_conn_upd_prep(conn, lazy,
   12a50:	462a      	mov	r2, r5
   12a52:	4631      	mov	r1, r6
   12a54:	4620      	mov	r0, r4
   12a56:	f7ee f843 	bl	ae0 <event_conn_upd_prep>
   12a5a:	2800      	cmp	r0, #0
   12a5c:	f43f aee5 	beq.w	1282a <ull_conn_llcp+0x196>
			break;
   12a60:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12a64:	e629      	b.n	126ba <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   12a66:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   12a68:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   12a6a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   12a6e:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   12a70:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   12a72:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   12a76:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   12a78:	f040 80f6 	bne.w	12c68 <ull_conn_llcp+0x5d4>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   12a7c:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   12a80:	1ab6      	subs	r6, r6, r2
   12a82:	0430      	lsls	r0, r6, #16
   12a84:	f53f ae1d 	bmi.w	126c2 <ull_conn_llcp+0x2e>
   12a88:	4622      	mov	r2, r4
			conn->slave.llcp_type = LLCP_NONE;
   12a8a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
   12a8e:	f852 3fed 	ldr.w	r3, [r2, #237]!
   12a92:	63a3      	str	r3, [r4, #56]	; 0x38
		memcpy(&lll->data_chan_map[0],
   12a94:	f104 0038 	add.w	r0, r4, #56	; 0x38
   12a98:	7913      	ldrb	r3, [r2, #4]
   12a9a:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   12a9c:	2105      	movs	r1, #5
   12a9e:	f7f8 fed1 	bl	b844 <util_ones_count_get>
		lll->data_chan_count =
   12aa2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12aa6:	2201      	movs	r2, #1
		lll->data_chan_count =
   12aa8:	f360 0305 	bfi	r3, r0, #0, #6
   12aac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   12ab0:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
   12ab4:	e605      	b.n	126c2 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   12ab6:	4ab3      	ldr	r2, [pc, #716]	; (12d84 <ull_conn_llcp+0x6f0>)
   12ab8:	49b3      	ldr	r1, [pc, #716]	; (12d88 <ull_conn_llcp+0x6f4>)
   12aba:	48b4      	ldr	r0, [pc, #720]	; (12d8c <ull_conn_llcp+0x6f8>)
   12abc:	f240 33e5 	movw	r3, #997	; 0x3e5
   12ac0:	f010 f975 	bl	22dae <printk>
   12ac4:	4040      	eors	r0, r0
   12ac6:	f380 8811 	msr	BASEPRI, r0
   12aca:	f04f 0003 	mov.w	r0, #3
   12ace:	df02      	svc	2
   12ad0:	e7c6      	b.n	12a60 <ull_conn_llcp+0x3cc>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   12ad2:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
   12ad6:	2a00      	cmp	r2, #0
   12ad8:	f47f ae7c 	bne.w	127d4 <ull_conn_llcp+0x140>
   12adc:	e63b      	b.n	12756 <ull_conn_llcp+0xc2>
	switch (conn->llcp_length.state) {
   12ade:	f002 0107 	and.w	r1, r2, #7
   12ae2:	2906      	cmp	r1, #6
   12ae4:	f201 8049 	bhi.w	13b7a <ull_conn_llcp+0x14e6>
   12ae8:	a001      	add	r0, pc, #4	; (adr r0, 12af0 <ull_conn_llcp+0x45c>)
   12aea:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   12aee:	bf00      	nop
   12af0:	00012d95 	.word	0x00012d95
   12af4:	00012795 	.word	0x00012795
   12af8:	00012795 	.word	0x00012795
   12afc:	00012795 	.word	0x00012795
   12b00:	00012d01 	.word	0x00012d01
   12b04:	00012d01 	.word	0x00012d01
   12b08:	00012795 	.word	0x00012795
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12b0c:	48a0      	ldr	r0, [pc, #640]	; (12d90 <ull_conn_llcp+0x6fc>)
   12b0e:	f7f8 fccd 	bl	b4ac <mem_acquire>
		if (tx) {
   12b12:	2800      	cmp	r0, #0
   12b14:	d0a4      	beq.n	12a60 <ull_conn_llcp+0x3cc>
			conn->llcp.chan_map.instant = event_counter +
   12b16:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   12b18:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b1c:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   12b1e:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   12b20:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   12b22:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   12b26:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
   12b2a:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b2e:	f042 0203 	orr.w	r2, r2, #3
   12b32:	4623      	mov	r3, r4
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b34:	2708      	movs	r7, #8
			pdu_ctrl_tx->llctrl.opcode =
   12b36:	2101      	movs	r1, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12b38:	7147      	strb	r7, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12b3a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   12b3c:	71c1      	strb	r1, [r0, #7]
   12b3e:	f853 2fed 	ldr.w	r2, [r3, #237]!
   12b42:	6082      	str	r2, [r0, #8]
   12b44:	791b      	ldrb	r3, [r3, #4]
   12b46:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   12b48:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12b4c:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   12b50:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   12b54:	2b00      	cmp	r3, #0
   12b56:	f000 82d8 	beq.w	1310a <ull_conn_llcp+0xa76>
	    !conn->llcp_enc.pause_tx &&
   12b5a:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12b5e:	0792      	lsls	r2, r2, #30
   12b60:	f100 82d3 	bmi.w	1310a <ull_conn_llcp+0xa76>
	    !conn->llcp_phy.pause_tx &&
   12b64:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12b68:	07d7      	lsls	r7, r2, #31
   12b6a:	f100 82ce 	bmi.w	1310a <ull_conn_llcp+0xa76>
		if (conn->tx_head == conn->tx_data) {
   12b6e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12b72:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12b74:	bf04      	itt	eq
   12b76:	681a      	ldreq	r2, [r3, #0]
   12b78:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12b7c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12b80:	2a00      	cmp	r2, #0
   12b82:	f000 8694 	beq.w	138ae <ull_conn_llcp+0x121a>
	tx->next = conn->tx_ctrl_last->next;
   12b86:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12b8a:	681a      	ldr	r2, [r3, #0]
   12b8c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12b8e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12b90:	6803      	ldr	r3, [r0, #0]
   12b92:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12b96:	2b00      	cmp	r3, #0
   12b98:	f47f af62 	bne.w	12a60 <ull_conn_llcp+0x3cc>
		conn->tx_data_last = tx;
   12b9c:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12ba0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   12ba4:	e589      	b.n	126ba <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12ba6:	487a      	ldr	r0, [pc, #488]	; (12d90 <ull_conn_llcp+0x6fc>)
   12ba8:	f7f8 fc80 	bl	b4ac <mem_acquire>
	if (!tx) {
   12bac:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   12bb0:	4681      	mov	r9, r0
   12bb2:	2800      	cmp	r0, #0
   12bb4:	f43f ad81 	beq.w	126ba <ull_conn_llcp+0x26>
	if (!lll->role) {
   12bb8:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   12bbc:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   12bc0:	f280 8325 	bge.w	1320e <ull_conn_llcp+0xb7a>
	else if (!lll->enc_rx) {
   12bc4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   12bc8:	0719      	lsls	r1, r3, #28
   12bca:	f100 84fa 	bmi.w	135c2 <ull_conn_llcp+0xf2e>
		if (conn->llcp.encryption.error_code) {
   12bce:	f894 80f9 	ldrb.w	r8, [r4, #249]	; 0xf9
   12bd2:	f1b8 0f00 	cmp.w	r8, #0
   12bd6:	f000 859f 	beq.w	13718 <ull_conn_llcp+0x1084>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12bda:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   12bdc:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12be0:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
   12be4:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12be6:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   12be8:	f140 8522 	bpl.w	13630 <ull_conn_llcp+0xf9c>
	    (conn->llcp_feature.features_conn &
   12bec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   12bf0:	075b      	lsls	r3, r3, #29
   12bf2:	f140 851d 	bpl.w	13630 <ull_conn_llcp+0xf9c>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   12bf6:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12bf8:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   12bfa:	f880 8009 	strb.w	r8, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   12bfe:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12c00:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   12c02:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   12c06:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	conn->llcp.encryption.error_code = 0U;
   12c0a:	2200      	movs	r2, #0
   12c0c:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	if (
   12c10:	2b00      	cmp	r3, #0
   12c12:	f000 847d 	beq.w	13510 <ull_conn_llcp+0xe7c>
	    !conn->llcp_enc.pause_tx &&
   12c16:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12c1a:	0790      	lsls	r0, r2, #30
   12c1c:	f100 8478 	bmi.w	13510 <ull_conn_llcp+0xe7c>
	    !conn->llcp_phy.pause_tx &&
   12c20:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12c24:	07d1      	lsls	r1, r2, #31
   12c26:	f100 8473 	bmi.w	13510 <ull_conn_llcp+0xe7c>
		if (conn->tx_head == conn->tx_data) {
   12c2a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12c2e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12c30:	bf04      	itt	eq
   12c32:	681a      	ldreq	r2, [r3, #0]
   12c34:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12c38:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12c3c:	2a00      	cmp	r2, #0
   12c3e:	f000 8692 	beq.w	13966 <ull_conn_llcp+0x12d2>
	tx->next = conn->tx_ctrl_last->next;
   12c42:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12c46:	681a      	ldr	r2, [r3, #0]
   12c48:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   12c4c:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   12c50:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12c54:	f8d9 3000 	ldr.w	r3, [r9]
   12c58:	2b00      	cmp	r3, #0
   12c5a:	f000 834f 	beq.w	132fc <ull_conn_llcp+0xc68>
	conn->llcp_ack = conn->llcp_req;
   12c5e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12c62:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   12c66:	e528      	b.n	126ba <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12c68:	4849      	ldr	r0, [pc, #292]	; (12d90 <ull_conn_llcp+0x6fc>)
   12c6a:	f7f8 fc1f 	bl	b4ac <mem_acquire>
		if (tx) {
   12c6e:	2800      	cmp	r0, #0
   12c70:	f43f ad27 	beq.w	126c2 <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   12c74:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   12c76:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c7a:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   12c7c:	4433      	add	r3, r6
						      conn->lll.latency + 6;
   12c7e:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   12c80:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c84:	f042 0203 	orr.w	r2, r2, #3
   12c88:	4623      	mov	r3, r4
			conn->llcp.chan_map.initiate = 0U;
   12c8a:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12c8e:	2608      	movs	r6, #8
			pdu_ctrl_tx->llctrl.opcode =
   12c90:	2501      	movs	r5, #1
			conn->llcp.chan_map.initiate = 0U;
   12c92:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   12c96:	7146      	strb	r6, [r0, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c98:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   12c9a:	71c5      	strb	r5, [r0, #7]
   12c9c:	f853 2fed 	ldr.w	r2, [r3, #237]!
   12ca0:	6082      	str	r2, [r0, #8]
   12ca2:	791b      	ldrb	r3, [r3, #4]
   12ca4:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   12ca6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   12caa:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   12cae:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   12cb2:	2b00      	cmp	r3, #0
   12cb4:	f000 8238 	beq.w	13128 <ull_conn_llcp+0xa94>
	    !conn->llcp_enc.pause_tx &&
   12cb8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12cbc:	0796      	lsls	r6, r2, #30
   12cbe:	f100 8233 	bmi.w	13128 <ull_conn_llcp+0xa94>
	    !conn->llcp_phy.pause_tx &&
   12cc2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   12cc6:	07d5      	lsls	r5, r2, #31
   12cc8:	f100 822e 	bmi.w	13128 <ull_conn_llcp+0xa94>
		if (conn->tx_head == conn->tx_data) {
   12ccc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12cd0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12cd2:	bf04      	itt	eq
   12cd4:	681a      	ldreq	r2, [r3, #0]
   12cd6:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12cda:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12cde:	2a00      	cmp	r2, #0
   12ce0:	f000 85ed 	beq.w	138be <ull_conn_llcp+0x122a>
	tx->next = conn->tx_ctrl_last->next;
   12ce4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12ce8:	681a      	ldr	r2, [r3, #0]
   12cea:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12cec:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12cee:	6803      	ldr	r3, [r0, #0]
   12cf0:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12cf4:	2b00      	cmp	r3, #0
   12cf6:	f47f ace4 	bne.w	126c2 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   12cfa:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   12cfe:	e4e0      	b.n	126c2 <ull_conn_llcp+0x2e>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   12d00:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   12d04:	f8b4 c1a8 	ldrh.w	ip, [r4, #424]	; 0x1a8
		lll->max_rx_time = conn->llcp_length.rx_time;
   12d08:	f8b4 11ac 	ldrh.w	r1, [r4, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   12d0c:	f8b4 91aa 	ldrh.w	r9, [r4, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   12d10:	f8b4 81ae 	ldrh.w	r8, [r4, #430]	; 0x1ae
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   12d14:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   12d18:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   12d1a:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   12d1e:	f000 83ed 	beq.w	134fc <ull_conn_llcp+0xe68>
			conn->llcp_length.state =
   12d22:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
   12d26:	2206      	movs	r2, #6
   12d28:	f362 0302 	bfi	r3, r2, #0, #3
   12d2c:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		rx = conn->llcp_rx;
   12d30:	f8d4 710c 	ldr.w	r7, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   12d34:	2f00      	cmp	r7, #0
   12d36:	f000 83c3 	beq.w	134c0 <ull_conn_llcp+0xe2c>
   12d3a:	6838      	ldr	r0, [r7, #0]
   12d3c:	2800      	cmp	r0, #0
   12d3e:	f000 83bf 	beq.w	134c0 <ull_conn_llcp+0xe2c>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   12d42:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   12d44:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   12d46:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
   12d4a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   12d4e:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12d52:	2203      	movs	r2, #3
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   12d54:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
   12d56:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12d5a:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
   12d5c:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   12d60:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   12d64:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12d66:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12d68:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
   12d6a:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   12d6c:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   12d70:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
   12d74:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
   12d78:	f7fc fa94 	bl	f2a4 <ll_rx_put>
		ll_rx_sched();
   12d7c:	f7fc fa9c 	bl	f2b8 <ll_rx_sched>
	break;
   12d80:	e508      	b.n	12794 <ull_conn_llcp+0x100>
   12d82:	bf00      	nop
   12d84:	0002ca9c 	.word	0x0002ca9c
   12d88:	0002c650 	.word	0x0002c650
   12d8c:	0002c5e0 	.word	0x0002c5e0
   12d90:	20003580 	.word	0x20003580
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12d94:	48e2      	ldr	r0, [pc, #904]	; (13120 <ull_conn_llcp+0xa8c>)
   12d96:	f7f8 fb89 	bl	b4ac <mem_acquire>
		if (!tx) {
   12d9a:	2800      	cmp	r0, #0
   12d9c:	f43f acfa 	beq.w	12794 <ull_conn_llcp+0x100>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   12da0:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   12da4:	f8b4 11aa 	ldrh.w	r1, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   12da8:	f8b4 71ae 	ldrh.w	r7, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   12dac:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   12db0:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   12db2:	f8a4 70d8 	strh.w	r7, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   12db6:	f362 0302 	bfi	r3, r2, #0, #3
   12dba:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		pdu_ctrl_tx->len =
   12dbe:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12dc0:	7903      	ldrb	r3, [r0, #4]
		pdu_ctrl_tx->len =
   12dc2:	7147      	strb	r7, [r0, #5]
	    conn->tx_head &&
   12dc4:	f8d4 c1bc 	ldr.w	ip, [r4, #444]	; 0x1bc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   12dc8:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12dca:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   12dce:	2714      	movs	r7, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   12dd0:	72c2      	strb	r2, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   12dd2:	73c2      	strb	r2, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   12dd4:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12dd6:	7103      	strb	r3, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   12dd8:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   12dda:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   12ddc:	71c7      	strb	r7, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   12dde:	7241      	strb	r1, [r0, #9]
   12de0:	7202      	strb	r2, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   12de2:	7283      	strb	r3, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   12de4:	7383      	strb	r3, [r0, #14]
	if (
   12de6:	f1bc 0f00 	cmp.w	ip, #0
   12dea:	f000 8204 	beq.w	131f6 <ull_conn_llcp+0xb62>
	    !conn->llcp_enc.pause_tx &&
   12dee:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   12df2:	079f      	lsls	r7, r3, #30
   12df4:	f100 81ff 	bmi.w	131f6 <ull_conn_llcp+0xb62>
	    !conn->llcp_phy.pause_tx &&
   12df8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   12dfc:	07d9      	lsls	r1, r3, #31
   12dfe:	f100 81fa 	bmi.w	131f6 <ull_conn_llcp+0xb62>
		if (conn->tx_head == conn->tx_data) {
   12e02:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   12e06:	459c      	cmp	ip, r3
			conn->tx_data = conn->tx_data->next;
   12e08:	bf04      	itt	eq
   12e0a:	f8dc 3000 	ldreq.w	r3, [ip]
   12e0e:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   12e12:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   12e16:	2b00      	cmp	r3, #0
   12e18:	f000 8564 	beq.w	138e4 <ull_conn_llcp+0x1250>
	tx->next = conn->tx_ctrl_last->next;
   12e1c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   12e20:	681a      	ldr	r2, [r3, #0]
   12e22:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12e24:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   12e26:	f8d0 c000 	ldr.w	ip, [r0]
   12e2a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   12e2e:	f1bc 0f00 	cmp.w	ip, #0
   12e32:	f000 845b 	beq.w	136ec <ull_conn_llcp+0x1058>
		conn->procedure_expire = conn->procedure_reload;
   12e36:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   12e3a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
   12e3e:	e4a9      	b.n	12794 <ull_conn_llcp+0x100>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   12e40:	f894 7125 	ldrb.w	r7, [r4, #293]	; 0x125
   12e44:	f894 9124 	ldrb.w	r9, [r4, #292]	; 0x124
   12e48:	454f      	cmp	r7, r9
   12e4a:	d042      	beq.n	12ed2 <ull_conn_llcp+0x83e>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   12e4c:	eba7 0709 	sub.w	r7, r7, r9
   12e50:	07f9      	lsls	r1, r7, #31
   12e52:	f57f ac32 	bpl.w	126ba <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   12e56:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12e5a:	f013 0701 	ands.w	r7, r3, #1
   12e5e:	f000 817a 	beq.w	13156 <ull_conn_llcp+0xac2>
		rx = ll_pdu_rx_alloc();
   12e62:	f7fc fa4d 	bl	f300 <ll_pdu_rx_alloc>
		if (!rx) {
   12e66:	4601      	mov	r1, r0
   12e68:	b310      	cbz	r0, 12eb0 <ull_conn_llcp+0x81c>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   12e6a:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   12e6e:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		rx->hdr.handle = conn->lll.handle;
   12e72:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
__ssp_bos_icheck3(memset, void *, int)
   12e74:	f8c0 8020 	str.w	r8, [r0, #32]
   12e78:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12e7c:	2303      	movs	r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12e7e:	2009      	movs	r0, #9
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12e80:	7f0a      	ldrb	r2, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12e82:	710b      	strb	r3, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   12e84:	7748      	strb	r0, [r1, #29]
		sys_put_le24(conn->llcp_feature.features_peer,
   12e86:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
		rx->hdr.handle = conn->lll.handle;
   12e8a:	80cf      	strh	r7, [r1, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12e8c:	f042 0203 	orr.w	r2, r2, #3
	dst[1] = val >> 8;
   12e90:	f3c3 2707 	ubfx	r7, r3, #8, #8
   12e94:	770a      	strb	r2, [r1, #28]
	dst[2] = val >> 16;
   12e96:	0c1a      	lsrs	r2, r3, #16
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12e98:	77c8      	strb	r0, [r1, #31]
	dst[0] = val;
   12e9a:	f881 3020 	strb.w	r3, [r1, #32]
	dst[1] = val >> 8;
   12e9e:	f881 7021 	strb.w	r7, [r1, #33]	; 0x21
	dst[2] = val >> 16;
   12ea2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
	ll_rx_put(rx->hdr.link, rx);
   12ea6:	6808      	ldr	r0, [r1, #0]
   12ea8:	f7fc f9fc 	bl	f2a4 <ll_rx_put>
	ll_rx_sched();
   12eac:	f7fc fa04 	bl	f2b8 <ll_rx_sched>
	break;
   12eb0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12eb4:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   12eb8:	f7ff bbf7 	b.w	126aa <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   12ebc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   12ec0:	2a00      	cmp	r2, #0
   12ec2:	f47f acf3 	bne.w	128ac <ull_conn_llcp+0x218>
			tx->next = conn->tx_head;
   12ec6:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   12ec8:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   12ecc:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   12ed0:	e4f4      	b.n	128bc <ull_conn_llcp+0x228>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   12ed2:	f894 7131 	ldrb.w	r7, [r4, #305]	; 0x131
   12ed6:	f894 8130 	ldrb.w	r8, [r4, #304]	; 0x130
   12eda:	4547      	cmp	r7, r8
   12edc:	d038      	beq.n	12f50 <ull_conn_llcp+0x8bc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   12ede:	eba7 0708 	sub.w	r7, r7, r8
   12ee2:	07f8      	lsls	r0, r7, #31
   12ee4:	f57f abe9 	bpl.w	126ba <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   12ee8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   12eec:	07d9      	lsls	r1, r3, #31
   12eee:	f140 83b5 	bpl.w	1365c <ull_conn_llcp+0xfc8>
	} else if (conn->llcp_version.rx) {
   12ef2:	0798      	lsls	r0, r3, #30
   12ef4:	f140 83a4 	bpl.w	13640 <ull_conn_llcp+0xfac>
		rx = ll_pdu_rx_alloc();
   12ef8:	f7fc fa02 	bl	f300 <ll_pdu_rx_alloc>
		if (!rx) {
   12efc:	4601      	mov	r1, r0
   12efe:	2800      	cmp	r0, #0
   12f00:	d0d6      	beq.n	12eb0 <ull_conn_llcp+0x81c>
		conn->llcp_version.ack = conn->llcp_version.req;
   12f02:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   12f06:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12f0a:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   12f0c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   12f0e:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   12f10:	f043 0303 	orr.w	r3, r3, #3
   12f14:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12f16:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   12f18:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12f1a:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12f1c:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   12f1e:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12f20:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
   12f22:	f894 0133 	ldrb.w	r0, [r4, #307]	; 0x133
		pdu->llctrl.version_ind.sub_version_number =
   12f26:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
		pdu->llctrl.version_ind.company_id =
   12f2a:	f8b4 2134 	ldrh.w	r2, [r4, #308]	; 0x134
   12f2e:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		pdu->llctrl.version_ind.version_number =
   12f32:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.sub_version_number =
   12f36:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   12f3a:	6808      	ldr	r0, [r1, #0]
   12f3c:	f7fc f9b2 	bl	f2a4 <ll_rx_put>
		ll_rx_sched();
   12f40:	f7fc f9ba 	bl	f2b8 <ll_rx_sched>
   12f44:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   12f48:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   12f4c:	f7ff bbad 	b.w	126aa <ull_conn_llcp+0x16>
		} else if (conn->llcp_conn_param.ack !=
   12f50:	f894 817d 	ldrb.w	r8, [r4, #381]	; 0x17d
   12f54:	f894 717c 	ldrb.w	r7, [r4, #380]	; 0x17c
   12f58:	45b8      	cmp	r8, r7
   12f5a:	f000 81d2 	beq.w	13302 <ull_conn_llcp+0xc6e>
	conn_upd = conn_upd_curr;
   12f5e:	4f71      	ldr	r7, [pc, #452]	; (13124 <ull_conn_llcp+0xa90>)
   12f60:	f8d7 8000 	ldr.w	r8, [r7]
	if (conn_upd && (conn_upd != conn)) {
   12f64:	f1b8 0f00 	cmp.w	r8, #0
   12f68:	f000 846a 	beq.w	13840 <ull_conn_llcp+0x11ac>
   12f6c:	4544      	cmp	r4, r8
   12f6e:	f47f aba4 	bne.w	126ba <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   12f72:	f894 817e 	ldrb.w	r8, [r4, #382]	; 0x17e
   12f76:	f008 0807 	and.w	r8, r8, #7
   12f7a:	f1b8 0f05 	cmp.w	r8, #5
   12f7e:	f200 860e 	bhi.w	13b9e <ull_conn_llcp+0x150a>
   12f82:	f20f 0908 	addw	r9, pc, #8
   12f86:	f859 f028 	ldr.w	pc, [r9, r8, lsl #2]
   12f8a:	bf00      	nop
   12f8c:	00013073 	.word	0x00013073
   12f90:	00012ff3 	.word	0x00012ff3
   12f94:	00012fa5 	.word	0x00012fa5
   12f98:	000126ab 	.word	0x000126ab
   12f9c:	000126ab 	.word	0x000126ab
   12fa0:	000126ab 	.word	0x000126ab
	if (conn->llcp_enc.pause_tx) {
   12fa4:	0791      	lsls	r1, r2, #30
   12fa6:	f53f ab88 	bmi.w	126ba <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   12faa:	f7fc f9a9 	bl	f300 <ll_pdu_rx_alloc>
	if (!rx) {
   12fae:	4601      	mov	r1, r0
   12fb0:	2800      	cmp	r0, #0
   12fb2:	f43f af7d 	beq.w	12eb0 <ull_conn_llcp+0x81c>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   12fb6:	f894 017e 	ldrb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12fba:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   12fbc:	2203      	movs	r2, #3
   12fbe:	f362 0002 	bfi	r0, r2, #0, #3
   12fc2:	f884 017e 	strb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12fc6:	4313      	orrs	r3, r2
	rx->hdr.handle = conn->lll.handle;
   12fc8:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12fca:	710a      	strb	r2, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   12fcc:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   12fce:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   12fd0:	774a      	strb	r2, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   12fd2:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   12fd6:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
	rx->hdr.handle = conn->lll.handle;
   12fda:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   12fdc:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   12fe0:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   12fe2:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   12fe6:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12fe8:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   12fea:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   12fec:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   12fee:	77cb      	strb	r3, [r1, #31]
   12ff0:	e759      	b.n	12ea6 <ull_conn_llcp+0x812>
	if (conn->llcp_conn_param.status) {
   12ff2:	f894 817f 	ldrb.w	r8, [r4, #383]	; 0x17f
   12ff6:	f1b8 0f00 	cmp.w	r8, #0
   12ffa:	f040 84c5 	bne.w	13988 <ull_conn_llcp+0x12f4>
	if (!conn->lll.role) {
   12ffe:	2900      	cmp	r1, #0
   13000:	f2c0 854f 	blt.w	13aa2 <ull_conn_llcp+0x140e>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13004:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if (conn->llcp_conn_param.preferred_periodicity) {
   13008:	f894 1188 	ldrb.w	r1, [r4, #392]	; 0x188
		conn->llcp_cu.win_offset_us = 0U;
   1300c:	f8c4 811c 	str.w	r8, [r4, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13010:	2205      	movs	r2, #5
   13012:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
   13016:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13018:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
		conn->llcp_cu.win_size = 1U;
   1301c:	f884 2120 	strb.w	r2, [r4, #288]	; 0x120
		if (conn->llcp_conn_param.preferred_periodicity) {
   13020:	2900      	cmp	r1, #0
   13022:	f000 8588 	beq.w	13b36 <ull_conn_llcp+0x14a2>
				((conn->llcp_conn_param.interval_min /
   13026:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   1302a:	fbb3 f3f1 	udiv	r3, r3, r1
				  conn->llcp_conn_param.preferred_periodicity) +
   1302e:	4413      	add	r3, r2
			conn->llcp_cu.interval =
   13030:	fb13 f301 	smulbb	r3, r3, r1
   13034:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13036:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1303a:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
   1303e:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   13042:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   13046:	00db      	lsls	r3, r3, #3
   13048:	f021 020f 	bic.w	r2, r1, #15
   1304c:	f043 0302 	orr.w	r3, r3, #2
   13050:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   13052:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   13056:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1305a:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		conn->llcp_cu.ack--;
   1305e:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   13062:	f884 e111 	strb.w	lr, [r4, #273]	; 0x111
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   13066:	f8a4 1116 	strh.w	r1, [r4, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1306a:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1306e:	f7ff bb28 	b.w	126c2 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13072:	482b      	ldr	r0, [pc, #172]	; (13120 <ull_conn_llcp+0xa8c>)
			event_counter = lll->event_counter +
   13074:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
   13078:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1307c:	f7f8 fa16 	bl	b4ac <mem_acquire>
	if (!tx) {
   13080:	4601      	mov	r1, r0
   13082:	2800      	cmp	r0, #0
   13084:	f43f af14 	beq.w	12eb0 <ull_conn_llcp+0x81c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13088:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   1308a:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1308c:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   13090:	2218      	movs	r2, #24
   13092:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13094:	7103      	strb	r3, [r0, #4]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   13096:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1309a:	f8b4 7182 	ldrh.w	r7, [r4, #386]	; 0x182
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1309e:	f8b4 c184 	ldrh.w	ip, [r4, #388]	; 0x184
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   130a2:	810b      	strh	r3, [r1, #8]
	p->preferred_periodicity = 0U;
   130a4:	2200      	movs	r2, #0
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   130a6:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
	p->preferred_periodicity = 0U;
   130aa:	740a      	strb	r2, [r1, #16]
			event_counter = lll->event_counter +
   130ac:	eb08 0009 	add.w	r0, r8, r9
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   130b0:	814f      	strh	r7, [r1, #10]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   130b2:	4430      	add	r0, r6
	conn->procedure_expire = conn->procedure_reload;
   130b4:	f8b4 70ca 	ldrh.w	r7, [r4, #202]	; 0xca
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   130b8:	f8a1 c00c 	strh.w	ip, [r1, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   130bc:	81cb      	strh	r3, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   130be:	f04f 0c0f 	mov.w	ip, #15
	p->offset1 = sys_cpu_to_le16(0xffff);
   130c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->offset0 = sys_cpu_to_le16(0x0000);
   130c6:	74ca      	strb	r2, [r1, #19]
   130c8:	750a      	strb	r2, [r1, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   130ca:	754b      	strb	r3, [r1, #21]
   130cc:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   130ce:	75cb      	strb	r3, [r1, #23]
   130d0:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   130d2:	764b      	strb	r3, [r1, #25]
   130d4:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   130d6:	76cb      	strb	r3, [r1, #27]
   130d8:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   130da:	774b      	strb	r3, [r1, #29]
   130dc:	778b      	strb	r3, [r1, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   130de:	f881 c007 	strb.w	ip, [r1, #7]
	conn->procedure_expire = conn->procedure_reload;
   130e2:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   130e6:	f8a1 0011 	strh.w	r0, [r1, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   130ea:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   130ee:	2004      	movs	r0, #4
   130f0:	f360 0302 	bfi	r3, r0, #0, #3
   130f4:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
	ctrl_tx_pause_enqueue(conn, tx, false);
   130f8:	4620      	mov	r0, r4
   130fa:	f7fc ffcb 	bl	10094 <ctrl_tx_pause_enqueue>
   130fe:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13102:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
}
   13106:	f7ff bad0 	b.w	126aa <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   1310a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1310e:	2a00      	cmp	r2, #0
   13110:	f47f ad39 	bne.w	12b86 <ull_conn_llcp+0x4f2>
			tx->next = conn->tx_head;
   13114:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13116:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1311a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1311e:	e53a      	b.n	12b96 <ull_conn_llcp+0x502>
   13120:	20003580 	.word	0x20003580
   13124:	200034fc 	.word	0x200034fc
		if (!conn->tx_ctrl) {
   13128:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1312c:	2a00      	cmp	r2, #0
   1312e:	f47f add9 	bne.w	12ce4 <ull_conn_llcp+0x650>
			tx->next = conn->tx_head;
   13132:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13134:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13138:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1313c:	e5da      	b.n	12cf4 <ull_conn_llcp+0x660>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1313e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   13142:	2b00      	cmp	r3, #0
   13144:	f43f ac69 	beq.w	12a1a <ull_conn_llcp+0x386>
			conn->slave.llcp_type = LLCP_NONE;
   13148:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
   1314c:	e469      	b.n	12a22 <ull_conn_llcp+0x38e>
		conn->tx_data_last = tx;
   1314e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13152:	f7ff bbb6 	b.w	128c2 <ull_conn_llcp+0x22e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13156:	48d8      	ldr	r0, [pc, #864]	; (134b8 <ull_conn_llcp+0xe24>)
   13158:	f7f8 f9a8 	bl	b4ac <mem_acquire>
	if (tx) {
   1315c:	2800      	cmp	r0, #0
   1315e:	f43f aea7 	beq.w	12eb0 <ull_conn_llcp+0x81c>
		conn->llcp_feature.ack--;
   13162:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
		conn->llcp_feature.features_conn = LL_FEAT;
   13166:	4bd5      	ldr	r3, [pc, #852]	; (134bc <ull_conn_llcp+0xe28>)
   13168:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		conn->llcp_feature.ack--;
   1316c:	3a01      	subs	r2, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   1316e:	2309      	movs	r3, #9
		conn->llcp_feature.ack--;
   13170:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   13174:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   13176:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
   1317a:	6087      	str	r7, [r0, #8]
   1317c:	60c7      	str	r7, [r0, #12]
		sys_put_le24(conn->llcp_feature.features_conn,
   1317e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   13182:	7203      	strb	r3, [r0, #8]
	dst[1] = val >> 8;
   13184:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   13188:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   1318a:	7242      	strb	r2, [r0, #9]
	dst[2] = val >> 16;
   1318c:	7283      	strb	r3, [r0, #10]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1318e:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
   13190:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu->llctrl.opcode = !conn->lll.role ?
   13194:	2900      	cmp	r1, #0
   13196:	bfac      	ite	ge
   13198:	2108      	movge	r1, #8
   1319a:	210e      	movlt	r1, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1319c:	f042 0203 	orr.w	r2, r2, #3
		pdu->llctrl.opcode = !conn->lll.role ?
   131a0:	71c1      	strb	r1, [r0, #7]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   131a2:	7102      	strb	r2, [r0, #4]
	if (
   131a4:	2b00      	cmp	r3, #0
   131a6:	f000 819e 	beq.w	134e6 <ull_conn_llcp+0xe52>
	    !conn->llcp_enc.pause_tx &&
   131aa:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   131ae:	0792      	lsls	r2, r2, #30
   131b0:	f100 8199 	bmi.w	134e6 <ull_conn_llcp+0xe52>
	    !conn->llcp_phy.pause_tx &&
   131b4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   131b8:	07d7      	lsls	r7, r2, #31
   131ba:	f100 8194 	bmi.w	134e6 <ull_conn_llcp+0xe52>
		if (conn->tx_head == conn->tx_data) {
   131be:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   131c2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   131c4:	bf04      	itt	eq
   131c6:	681a      	ldreq	r2, [r3, #0]
   131c8:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   131cc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   131d0:	2a00      	cmp	r2, #0
   131d2:	f000 83c1 	beq.w	13958 <ull_conn_llcp+0x12c4>
	tx->next = conn->tx_ctrl_last->next;
   131d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   131da:	681a      	ldr	r2, [r3, #0]
   131dc:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   131de:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   131e0:	6803      	ldr	r3, [r0, #0]
   131e2:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   131e6:	2b00      	cmp	r3, #0
   131e8:	f000 8293 	beq.w	13712 <ull_conn_llcp+0x107e>
		conn->procedure_expire = conn->procedure_reload;
   131ec:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   131f0:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   131f4:	e65c      	b.n	12eb0 <ull_conn_llcp+0x81c>
		if (!conn->tx_ctrl) {
   131f6:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   131fa:	2b00      	cmp	r3, #0
   131fc:	f47f ae0e 	bne.w	12e1c <ull_conn_llcp+0x788>
			tx->next = conn->tx_head;
   13200:	f8c0 c000 	str.w	ip, [r0]
				conn->tx_ctrl = tx;
   13204:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13208:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1320c:	e60f      	b.n	12e2e <ull_conn_llcp+0x79a>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   1320e:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   13212:	463b      	mov	r3, r7
   13214:	4642      	mov	r2, r8
   13216:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   1321a:	f204 1069 	addw	r0, r4, #361	; 0x169
   1321e:	f004 f9db 	bl	175d8 <ecb_encrypt>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13222:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
   13226:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
   1322a:	f8d4 007f 	ldr.w	r0, [r4, #127]	; 0x7f
   1322e:	f8d4 1083 	ldr.w	r1, [r4, #131]	; 0x83
   13232:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
   13236:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   1323a:	4622      	mov	r2, r4
   1323c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   13240:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   13244:	f852 1f98 	ldr.w	r1, [r2, #152]!
		lll->ccm_rx.direction = 0;
   13248:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
   1324c:	6852      	ldr	r2, [r2, #4]
		lll->enc_rx = 1;
   1324e:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   13252:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
		lll->ccm_tx.direction = 1;
   13256:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
   1325a:	f8c4 10b9 	str.w	r1, [r4, #185]	; 0xb9
		lll->enc_rx = 1;
   1325e:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
   13262:	f368 0000 	bfi	r0, r8, #0, #1
		lll->ccm_tx.direction = 1;
   13266:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
   1326a:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
   1326e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
   13272:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   13276:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1327a:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1327e:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   13282:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   13286:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   1328a:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   1328e:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
   13292:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   13296:	4651      	mov	r1, sl
		lll->ccm_tx.counter = 0;
   13298:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
   1329c:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   132a0:	4620      	mov	r0, r4
   132a2:	f7fd f8c3 	bl	1042c <start_enc_rsp_send>
	    conn->tx_head &&
   132a6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   132aa:	2b00      	cmp	r3, #0
   132ac:	f000 80f7 	beq.w	1349e <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   132b0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   132b4:	0797      	lsls	r7, r2, #30
   132b6:	f100 80f2 	bmi.w	1349e <ull_conn_llcp+0xe0a>
	    !conn->llcp_phy.pause_tx &&
   132ba:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   132be:	07d0      	lsls	r0, r2, #31
   132c0:	f100 80ed 	bmi.w	1349e <ull_conn_llcp+0xe0a>
		if (conn->tx_head == conn->tx_data) {
   132c4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   132c8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   132ca:	bf04      	itt	eq
   132cc:	681a      	ldreq	r2, [r3, #0]
   132ce:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   132d2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   132d6:	2a00      	cmp	r2, #0
   132d8:	f000 831a 	beq.w	13910 <ull_conn_llcp+0x127c>
	tx->next = conn->tx_ctrl_last->next;
   132dc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   132e0:	681a      	ldr	r2, [r3, #0]
   132e2:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   132e6:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   132ea:	f8d9 3000 	ldr.w	r3, [r9]
   132ee:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   132f2:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
	if (!tx->next) {
   132f6:	2b00      	cmp	r3, #0
   132f8:	f47f acb1 	bne.w	12c5e <ull_conn_llcp+0x5ca>
		conn->tx_data_last = tx;
   132fc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13300:	e4ad      	b.n	12c5e <ull_conn_llcp+0x5ca>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13302:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   13306:	f894 71a5 	ldrb.w	r7, [r4, #421]	; 0x1a5
   1330a:	4297      	cmp	r7, r2
   1330c:	f000 810d 	beq.w	1352a <ull_conn_llcp+0xe96>
	switch (conn->llcp_length.state) {
   13310:	f894 c1a6 	ldrb.w	ip, [r4, #422]	; 0x1a6
   13314:	f00c 0107 	and.w	r1, ip, #7
   13318:	2906      	cmp	r1, #6
   1331a:	f200 843d 	bhi.w	13b98 <ull_conn_llcp+0x1504>
   1331e:	a701      	add	r7, pc, #4	; (adr r7, 13324 <ull_conn_llcp+0xc90>)
   13320:	f857 f021 	ldr.w	pc, [r7, r1, lsl #2]
   13324:	000133df 	.word	0x000133df
   13328:	000126ab 	.word	0x000126ab
   1332c:	000126ab 	.word	0x000126ab
   13330:	000126ab 	.word	0x000126ab
   13334:	00013341 	.word	0x00013341
   13338:	00013341 	.word	0x00013341
   1333c:	000126ab 	.word	0x000126ab
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   13340:	f8b4 11a8 	ldrh.w	r1, [r4, #424]	; 0x1a8
   13344:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   13348:	f00c 0107 	and.w	r1, ip, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
   1334c:	f8b4 31ac 	ldrh.w	r3, [r4, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   13350:	f8b4 81aa 	ldrh.w	r8, [r4, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   13354:	f8b4 71ae 	ldrh.w	r7, [r4, #430]	; 0x1ae
		lll->max_rx_time = conn->llcp_length.rx_time;
   13358:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1335c:	2904      	cmp	r1, #4
   1335e:	f000 82f1 	beq.w	13944 <ull_conn_llcp+0x12b0>
			conn->llcp_length.state =
   13362:	4663      	mov	r3, ip
   13364:	2206      	movs	r2, #6
   13366:	f362 0302 	bfi	r3, r2, #0, #3
   1336a:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		rx = conn->llcp_rx;
   1336e:	f8d4 910c 	ldr.w	r9, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   13372:	f1b9 0f00 	cmp.w	r9, #0
   13376:	f000 82d5 	beq.w	13924 <ull_conn_llcp+0x1290>
   1337a:	f8d9 0000 	ldr.w	r0, [r9]
   1337e:	2800      	cmp	r0, #0
   13380:	f000 82d0 	beq.w	13924 <ull_conn_llcp+0x1290>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   13384:	f899 301c 	ldrb.w	r3, [r9, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   13388:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
   1338a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
   1338e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   13392:	f043 0303 	orr.w	r3, r3, #3
   13396:	f889 301c 	strb.w	r3, [r9, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1339a:	2203      	movs	r2, #3
		pdu_ctrl_rx->len =
   1339c:	2309      	movs	r3, #9
   1339e:	f889 301d 	strb.w	r3, [r9, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133a2:	f889 2004 	strb.w	r2, [r9, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   133a6:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   133aa:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
   133ae:	f8a9 2022 	strh.w	r2, [r9, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   133b2:	2315      	movs	r3, #21
   133b4:	f889 301f 	strb.w	r3, [r9, #31]
		rx->hdr.handle = conn->lll.handle;
   133b8:	f8a9 c006 	strh.w	ip, [r9, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   133bc:	f8a9 1020 	strh.w	r1, [r9, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   133c0:	f8a9 8024 	strh.w	r8, [r9, #36]	; 0x24
		ll_rx_put(rx->hdr.link, rx);
   133c4:	4649      	mov	r1, r9
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   133c6:	f8a9 7026 	strh.w	r7, [r9, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   133ca:	f7fb ff6b 	bl	f2a4 <ll_rx_put>
		ll_rx_sched();
   133ce:	f7fb ff73 	bl	f2b8 <ll_rx_sched>
	break;
   133d2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   133d6:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   133da:	f7ff b966 	b.w	126aa <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   133de:	4836      	ldr	r0, [pc, #216]	; (134b8 <ull_conn_llcp+0xe24>)
   133e0:	f7f8 f864 	bl	b4ac <mem_acquire>
		if (!tx) {
   133e4:	4601      	mov	r1, r0
   133e6:	2800      	cmp	r0, #0
   133e8:	f43f ad62 	beq.w	12eb0 <ull_conn_llcp+0x81c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   133ec:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   133f0:	f8b4 71aa 	ldrh.w	r7, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   133f4:	f8b4 01ae 	ldrh.w	r0, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   133f8:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   133fc:	2201      	movs	r2, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
   133fe:	f8a4 00d8 	strh.w	r0, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   13402:	f362 0302 	bfi	r3, r2, #0, #3
   13406:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
		pdu_ctrl_tx->len =
   1340a:	2009      	movs	r0, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1340c:	790b      	ldrb	r3, [r1, #4]
		pdu_ctrl_tx->len =
   1340e:	7148      	strb	r0, [r1, #5]
	    conn->tx_head &&
   13410:	f8d4 01bc 	ldr.w	r0, [r4, #444]	; 0x1bc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   13414:	818f      	strh	r7, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13416:	f043 0303 	orr.w	r3, r3, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1341a:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1341e:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   13420:	73ca      	strb	r2, [r1, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   13422:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13424:	710b      	strb	r3, [r1, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   13426:	221b      	movs	r2, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   13428:	2348      	movs	r3, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1342a:	f881 c007 	strb.w	ip, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1342e:	724f      	strb	r7, [r1, #9]
   13430:	720a      	strb	r2, [r1, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   13432:	728b      	strb	r3, [r1, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   13434:	738b      	strb	r3, [r1, #14]
	if (
   13436:	2800      	cmp	r0, #0
   13438:	f000 825f 	beq.w	138fa <ull_conn_llcp+0x1266>
	    !conn->llcp_enc.pause_tx &&
   1343c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   13440:	079a      	lsls	r2, r3, #30
   13442:	f100 825a 	bmi.w	138fa <ull_conn_llcp+0x1266>
	    !conn->llcp_phy.pause_tx &&
   13446:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1344a:	07db      	lsls	r3, r3, #31
   1344c:	f100 8255 	bmi.w	138fa <ull_conn_llcp+0x1266>
		if (conn->tx_head == conn->tx_data) {
   13450:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   13454:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
   13456:	bf04      	itt	eq
   13458:	6803      	ldreq	r3, [r0, #0]
   1345a:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1345e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   13462:	2b00      	cmp	r3, #0
   13464:	f000 8383 	beq.w	13b6e <ull_conn_llcp+0x14da>
	tx->next = conn->tx_ctrl_last->next;
   13468:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1346c:	681a      	ldr	r2, [r3, #0]
   1346e:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   13470:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
   13472:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   13476:	680b      	ldr	r3, [r1, #0]
   13478:	2b00      	cmp	r3, #0
   1347a:	f47f aeb7 	bne.w	131ec <ull_conn_llcp+0xb58>
		conn->tx_data_last = tx;
   1347e:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   13482:	e6b3      	b.n	131ec <ull_conn_llcp+0xb58>
		if (!conn->tx_ctrl) {
   13484:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13488:	2a00      	cmp	r2, #0
   1348a:	f47f aa6c 	bne.w	12966 <ull_conn_llcp+0x2d2>
			tx->next = conn->tx_head;
   1348e:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   13492:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13496:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   1349a:	f7ff ba6f 	b.w	1297c <ull_conn_llcp+0x2e8>
		if (!conn->tx_ctrl) {
   1349e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   134a2:	2a00      	cmp	r2, #0
   134a4:	f47f af1a 	bne.w	132dc <ull_conn_llcp+0xc48>
			tx->next = conn->tx_head;
   134a8:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   134ac:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   134b0:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   134b4:	e71d      	b.n	132f2 <ull_conn_llcp+0xc5e>
   134b6:	bf00      	nop
   134b8:	20003580 	.word	0x20003580
   134bc:	0001417f 	.word	0x0001417f
		LL_ASSERT(rx && rx->hdr.link);
   134c0:	4ada      	ldr	r2, [pc, #872]	; (1382c <ull_conn_llcp+0x1198>)
   134c2:	49db      	ldr	r1, [pc, #876]	; (13830 <ull_conn_llcp+0x119c>)
   134c4:	48db      	ldr	r0, [pc, #876]	; (13834 <ull_conn_llcp+0x11a0>)
   134c6:	f640 53f3 	movw	r3, #3571	; 0xdf3
   134ca:	f00f fc70 	bl	22dae <printk>
   134ce:	4040      	eors	r0, r0
   134d0:	f380 8811 	msr	BASEPRI, r0
   134d4:	f04f 0003 	mov.w	r0, #3
   134d8:	df02      	svc	2
   134da:	6838      	ldr	r0, [r7, #0]
   134dc:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
   134e0:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   134e4:	e42d      	b.n	12d42 <ull_conn_llcp+0x6ae>
		if (!conn->tx_ctrl) {
   134e6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   134ea:	2a00      	cmp	r2, #0
   134ec:	f47f ae73 	bne.w	131d6 <ull_conn_llcp+0xb42>
			tx->next = conn->tx_head;
   134f0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   134f2:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   134f6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   134fa:	e674      	b.n	131e6 <ull_conn_llcp+0xb52>
			if (!conn->llcp_length.cache.tx_octets) {
   134fc:	f8b4 21b0 	ldrh.w	r2, [r4, #432]	; 0x1b0
   13500:	2a00      	cmp	r2, #0
   13502:	f040 8181 	bne.w	13808 <ull_conn_llcp+0x1174>
				conn->llcp_length.ack = conn->llcp_length.req;
   13506:	f884 31a5 	strb.w	r3, [r4, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   1350a:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
   1350e:	e40f      	b.n	12d30 <ull_conn_llcp+0x69c>
		if (!conn->tx_ctrl) {
   13510:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13514:	2a00      	cmp	r2, #0
   13516:	f47f ab94 	bne.w	12c42 <ull_conn_llcp+0x5ae>
			tx->next = conn->tx_head;
   1351a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1351e:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13522:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   13526:	f7ff bb95 	b.w	12c54 <ull_conn_llcp+0x5c0>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1352a:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
   1352e:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   13532:	4293      	cmp	r3, r2
   13534:	f43f a8c1 	beq.w	126ba <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   13538:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   1353c:	f003 0703 	and.w	r7, r3, #3
   13540:	2f03      	cmp	r7, #3
   13542:	f000 8245 	beq.w	139d0 <ull_conn_llcp+0x133c>
   13546:	2f00      	cmp	r7, #0
   13548:	f47f a8b6 	bne.w	126b8 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1354c:	48ba      	ldr	r0, [pc, #744]	; (13838 <ull_conn_llcp+0x11a4>)
   1354e:	f7f7 ffad 	bl	b4ac <mem_acquire>
		if (!tx) {
   13552:	4601      	mov	r1, r0
   13554:	2800      	cmp	r0, #0
   13556:	f43f acab 	beq.w	12eb0 <ull_conn_llcp+0x81c>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1355a:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1355e:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
		conn->lll.phy_flags = conn->llcp_phy.flags;
   13562:	f894 71b7 	ldrb.w	r7, [r4, #439]	; 0x1b7
   13566:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1356a:	2001      	movs	r0, #1
   1356c:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   13570:	f3c3 0082 	ubfx	r0, r3, #2, #3
   13574:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   13578:	f3c3 1042 	ubfx	r0, r3, #5, #3
   1357c:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   13580:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13584:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   13586:	f884 21b8 	strb.w	r2, [r4, #440]	; 0x1b8
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1358a:	f367 0cc3 	bfi	ip, r7, #3, #1
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1358e:	f3c3 0282 	ubfx	r2, r3, #2, #3
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   13592:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   13596:	f884 c064 	strb.w	ip, [r4, #100]	; 0x64
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1359a:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1359e:	f040 0003 	orr.w	r0, r0, #3
		pr->tx_phys = conn->llcp_phy.tx;
   135a2:	720a      	strb	r2, [r1, #8]
		pdu_ctrl_tx->len =
   135a4:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   135a6:	2216      	movs	r2, #22
		pr->rx_phys = conn->llcp_phy.rx;
   135a8:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   135aa:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   135ac:	71ca      	strb	r2, [r1, #7]
		pdu_ctrl_tx->len =
   135ae:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
   135b0:	2200      	movs	r2, #0
   135b2:	4620      	mov	r0, r4
   135b4:	f7fc fd6e 	bl	10094 <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   135b8:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   135bc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
   135c0:	e476      	b.n	12eb0 <ull_conn_llcp+0x81c>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
   135c2:	4651      	mov	r1, sl
   135c4:	4620      	mov	r0, r4
   135c6:	f7fc ff31 	bl	1042c <start_enc_rsp_send>
	    conn->tx_head &&
   135ca:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   135ce:	2b00      	cmp	r3, #0
   135d0:	f000 8090 	beq.w	136f4 <ull_conn_llcp+0x1060>
	    !conn->llcp_enc.pause_tx &&
   135d4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   135d8:	0790      	lsls	r0, r2, #30
   135da:	f100 808b 	bmi.w	136f4 <ull_conn_llcp+0x1060>
	    !conn->llcp_phy.pause_tx &&
   135de:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   135e2:	07d1      	lsls	r1, r2, #31
   135e4:	f100 8086 	bmi.w	136f4 <ull_conn_llcp+0x1060>
		if (conn->tx_head == conn->tx_data) {
   135e8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   135ec:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   135ee:	bf04      	itt	eq
   135f0:	681a      	ldreq	r2, [r3, #0]
   135f2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   135f6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   135fa:	2a00      	cmp	r2, #0
   135fc:	f000 81bc 	beq.w	13978 <ull_conn_llcp+0x12e4>
	tx->next = conn->tx_ctrl_last->next;
   13600:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   13604:	681a      	ldr	r2, [r3, #0]
   13606:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1360a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1360e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   13612:	f8d9 3000 	ldr.w	r3, [r9]
   13616:	2b00      	cmp	r3, #0
   13618:	f000 8146 	beq.w	138a8 <ull_conn_llcp+0x1214>
		conn->llcp_enc.pause_rx = 0U;
   1361c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   13620:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   13624:	f023 0303 	bic.w	r3, r3, #3
   13628:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
   1362c:	f7ff bb17 	b.w	12c5e <ull_conn_llcp+0x5ca>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13630:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   13632:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13636:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   1363a:	2702      	movs	r7, #2
   1363c:	f7ff bae1 	b.w	12c02 <ull_conn_llcp+0x56e>
		LL_ASSERT(0);
   13640:	f640 33f4 	movw	r3, #3060	; 0xbf4
		LL_ASSERT(0);
   13644:	4a79      	ldr	r2, [pc, #484]	; (1382c <ull_conn_llcp+0x1198>)
   13646:	497d      	ldr	r1, [pc, #500]	; (1383c <ull_conn_llcp+0x11a8>)
   13648:	487a      	ldr	r0, [pc, #488]	; (13834 <ull_conn_llcp+0x11a0>)
   1364a:	f00f fbb0 	bl	22dae <printk>
   1364e:	4040      	eors	r0, r0
   13650:	f380 8811 	msr	BASEPRI, r0
   13654:	f04f 0003 	mov.w	r0, #3
   13658:	df02      	svc	2
		break;
   1365a:	e429      	b.n	12eb0 <ull_conn_llcp+0x81c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1365c:	4876      	ldr	r0, [pc, #472]	; (13838 <ull_conn_llcp+0x11a4>)
   1365e:	f7f7 ff25 	bl	b4ac <mem_acquire>
		if (tx) {
   13662:	2800      	cmp	r0, #0
   13664:	f43f ac24 	beq.w	12eb0 <ull_conn_llcp+0x81c>
			conn->llcp_version.ack--;
   13668:	f894 2131 	ldrb.w	r2, [r4, #305]	; 0x131
			conn->llcp_version.tx = 1U;
   1366c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
			conn->llcp_version.ack--;
   13670:	3a01      	subs	r2, #1
   13672:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   13676:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
   13678:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
   1367c:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
   1367e:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   13682:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
   13686:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   13688:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1368c:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
   1368e:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
   13690:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
   13694:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
   13696:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   13698:	7242      	strb	r2, [r0, #9]
   1369a:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
   1369c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
   136a0:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
   136a2:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   136a4:	72c2      	strb	r2, [r0, #11]
   136a6:	7302      	strb	r2, [r0, #12]
	if (
   136a8:	2b00      	cmp	r3, #0
   136aa:	f000 80f2 	beq.w	13892 <ull_conn_llcp+0x11fe>
	    !conn->llcp_enc.pause_tx &&
   136ae:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   136b2:	0792      	lsls	r2, r2, #30
   136b4:	f100 80ed 	bmi.w	13892 <ull_conn_llcp+0x11fe>
	    !conn->llcp_phy.pause_tx &&
   136b8:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   136bc:	07d7      	lsls	r7, r2, #31
   136be:	f100 80e8 	bmi.w	13892 <ull_conn_llcp+0x11fe>
		if (conn->tx_head == conn->tx_data) {
   136c2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   136c6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   136c8:	bf04      	itt	eq
   136ca:	681a      	ldreq	r2, [r3, #0]
   136cc:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   136d0:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   136d4:	2a00      	cmp	r2, #0
   136d6:	f000 8232 	beq.w	13b3e <ull_conn_llcp+0x14aa>
	tx->next = conn->tx_ctrl_last->next;
   136da:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   136de:	681a      	ldr	r2, [r3, #0]
   136e0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   136e2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   136e4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   136e8:	6803      	ldr	r3, [r0, #0]
   136ea:	e57c      	b.n	131e6 <ull_conn_llcp+0xb52>
		conn->tx_data_last = tx;
   136ec:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   136f0:	f7ff bba1 	b.w	12e36 <ull_conn_llcp+0x7a2>
		if (!conn->tx_ctrl) {
   136f4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   136f8:	2a00      	cmp	r2, #0
   136fa:	d181      	bne.n	13600 <ull_conn_llcp+0xf6c>
			tx->next = conn->tx_head;
   136fc:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13700:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   13704:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   13708:	e783      	b.n	13612 <ull_conn_llcp+0xf7e>
		conn->tx_data_last = tx;
   1370a:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   1370e:	f7ff b938 	b.w	12982 <ull_conn_llcp+0x2ee>
   13712:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
			conn->procedure_expire = conn->procedure_reload;
   13716:	e569      	b.n	131ec <ull_conn_llcp+0xb58>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   13718:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   1371c:	463b      	mov	r3, r7
   1371e:	4642      	mov	r2, r8
   13720:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   13724:	f204 1069 	addw	r0, r4, #361	; 0x169
   13728:	f003 ff56 	bl	175d8 <ecb_encrypt>
   1372c:	f8d4 208b 	ldr.w	r2, [r4, #139]	; 0x8b
   13730:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
   13734:	f8d4 007f 	ldr.w	r0, [r4, #127]	; 0x7f
   13738:	f8d4 1083 	ldr.w	r1, [r4, #131]	; 0x83
   1373c:	f8d4 3087 	ldr.w	r3, [r4, #135]	; 0x87
   13740:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
   13744:	4622      	mov	r2, r4
   13746:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
   1374a:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
   1374e:	f852 1f98 	ldr.w	r1, [r2, #152]!
			lll->ccm_tx.direction = 0U;
   13752:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
   13756:	6852      	ldr	r2, [r2, #4]
   13758:	f8c4 20bd 	str.w	r2, [r4, #189]	; 0xbd
   1375c:	f8c4 10b9 	str.w	r1, [r4, #185]	; 0xb9
			lll->enc_rx = 1U;
   13760:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			lll->ccm_rx.direction = 1U;
   13764:	f894 1097 	ldrb.w	r1, [r4, #151]	; 0x97
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13768:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   1376c:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
			lll->enc_rx = 1U;
   13770:	f042 0208 	orr.w	r2, r2, #8
			lll->ccm_rx.direction = 1U;
   13774:	f041 0101 	orr.w	r1, r1, #1
			lll->ccm_tx.direction = 0U;
   13778:	f368 0000 	bfi	r0, r8, #0, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1377c:	2701      	movs	r7, #1
			lll->enc_rx = 1U;
   1377e:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
   13782:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   13786:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1378a:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   1378e:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   13792:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   13796:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   1379a:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
   1379e:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
   137a2:	f8c4 80b4 	str.w	r8, [r4, #180]	; 0xb4
			lll->ccm_rx.direction = 1U;
   137a6:	f884 1097 	strb.w	r1, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
   137aa:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137ae:	f043 0303 	orr.w	r3, r3, #3
			pdu_ctrl_tx->llctrl.opcode =
   137b2:	2205      	movs	r2, #5
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   137b4:	f889 7005 	strb.w	r7, [r9, #5]
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   137b8:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->llctrl.opcode =
   137bc:	f889 2007 	strb.w	r2, [r9, #7]
	    conn->tx_head &&
   137c0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   137c4:	2b00      	cmp	r3, #0
   137c6:	d059      	beq.n	1387c <ull_conn_llcp+0x11e8>
	    !conn->llcp_enc.pause_tx &&
   137c8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   137cc:	0792      	lsls	r2, r2, #30
   137ce:	d455      	bmi.n	1387c <ull_conn_llcp+0x11e8>
	    !conn->llcp_phy.pause_tx &&
   137d0:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   137d4:	07d7      	lsls	r7, r2, #31
   137d6:	d451      	bmi.n	1387c <ull_conn_llcp+0x11e8>
		if (conn->tx_head == conn->tx_data) {
   137d8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   137dc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   137de:	bf04      	itt	eq
   137e0:	681a      	ldreq	r2, [r3, #0]
   137e2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   137e6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   137ea:	2a00      	cmp	r2, #0
   137ec:	f000 8151 	beq.w	13a92 <ull_conn_llcp+0x13fe>
	tx->next = conn->tx_ctrl_last->next;
   137f0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   137f4:	681a      	ldr	r2, [r3, #0]
   137f6:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   137fa:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   137fe:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   13802:	f8d9 3000 	ldr.w	r3, [r9]
   13806:	e574      	b.n	132f2 <ull_conn_llcp+0xc5e>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13808:	f894 01a6 	ldrb.w	r0, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   1380c:	f8b4 71b2 	ldrh.w	r7, [r4, #434]	; 0x1b2
				conn->llcp_length.tx_octets =
   13810:	f8a4 21aa 	strh.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   13814:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13816:	f363 0002 	bfi	r0, r3, #0, #3
   1381a:	f884 01a6 	strb.w	r0, [r4, #422]	; 0x1a6
				conn->llcp_length.cache.tx_octets = 0;
   1381e:	f8a4 31b0 	strh.w	r3, [r4, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   13822:	f8a4 71ae 	strh.w	r7, [r4, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13826:	f7ff ba83 	b.w	12d30 <ull_conn_llcp+0x69c>
   1382a:	bf00      	nop
   1382c:	0002ca9c 	.word	0x0002ca9c
   13830:	0002cb68 	.word	0x0002cb68
   13834:	0002c5e0 	.word	0x0002c5e0
   13838:	20003580 	.word	0x20003580
   1383c:	0002c650 	.word	0x0002c650
	switch (conn->llcp_conn_param.state) {
   13840:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   13844:	f003 0307 	and.w	r3, r3, #7
   13848:	2b05      	cmp	r3, #5
   1384a:	f200 81a8 	bhi.w	13b9e <ull_conn_llcp+0x150a>
   1384e:	a001      	add	r0, pc, #4	; (adr r0, 13854 <ull_conn_llcp+0x11c0>)
   13850:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   13854:	00013073 	.word	0x00013073
   13858:	00012ff3 	.word	0x00012ff3
   1385c:	00012fa5 	.word	0x00012fa5
   13860:	000126bb 	.word	0x000126bb
   13864:	000126bb 	.word	0x000126bb
   13868:	000126bb 	.word	0x000126bb
			tx->next = conn->tx_head->next;
   1386c:	681a      	ldr	r2, [r3, #0]
   1386e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13870:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   13872:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13874:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   13878:	f7ff b820 	b.w	128bc <ull_conn_llcp+0x228>
		if (!conn->tx_ctrl) {
   1387c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13880:	2a00      	cmp	r2, #0
   13882:	d1b5      	bne.n	137f0 <ull_conn_llcp+0x115c>
			tx->next = conn->tx_head;
   13884:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13888:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1388c:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   13890:	e7b7      	b.n	13802 <ull_conn_llcp+0x116e>
		if (!conn->tx_ctrl) {
   13892:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   13896:	2a00      	cmp	r2, #0
   13898:	f47f af1f 	bne.w	136da <ull_conn_llcp+0x1046>
			tx->next = conn->tx_head;
   1389c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1389e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   138a2:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   138a6:	e71f      	b.n	136e8 <ull_conn_llcp+0x1054>
		conn->tx_data_last = tx;
   138a8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   138ac:	e6b6      	b.n	1361c <ull_conn_llcp+0xf88>
			tx->next = conn->tx_head->next;
   138ae:	681a      	ldr	r2, [r3, #0]
   138b0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   138b2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   138b4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   138b6:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   138ba:	f7ff b96c 	b.w	12b96 <ull_conn_llcp+0x502>
			tx->next = conn->tx_head->next;
   138be:	681a      	ldr	r2, [r3, #0]
   138c0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   138c2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   138c4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   138c6:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   138ca:	f7ff ba13 	b.w	12cf4 <ull_conn_llcp+0x660>
			tx->next = conn->tx_head->next;
   138ce:	681a      	ldr	r2, [r3, #0]
   138d0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   138d4:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
   138d8:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   138dc:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   138e0:	f7ff b84c 	b.w	1297c <ull_conn_llcp+0x2e8>
			tx->next = conn->tx_head->next;
   138e4:	f8dc 3000 	ldr.w	r3, [ip]
   138e8:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   138ea:	f8cc 0000 	str.w	r0, [ip]
				conn->tx_ctrl = tx;
   138ee:	f8d0 c000 	ldr.w	ip, [r0]
				conn->tx_ctrl_last = tx;
   138f2:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   138f6:	f7ff ba9a 	b.w	12e2e <ull_conn_llcp+0x79a>
		if (!conn->tx_ctrl) {
   138fa:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   138fe:	2b00      	cmp	r3, #0
   13900:	f47f adb2 	bne.w	13468 <ull_conn_llcp+0xdd4>
			tx->next = conn->tx_head;
   13904:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
   13906:	e9c4 116f 	strd	r1, r1, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1390a:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
   1390e:	e5b2      	b.n	13476 <ull_conn_llcp+0xde2>
			tx->next = conn->tx_head->next;
   13910:	681a      	ldr	r2, [r3, #0]
   13912:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   13916:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl = tx;
   1391a:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   1391e:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   13922:	e4e6      	b.n	132f2 <ull_conn_llcp+0xc5e>
		LL_ASSERT(rx && rx->hdr.link);
   13924:	4aa7      	ldr	r2, [pc, #668]	; (13bc4 <ull_conn_llcp+0x1530>)
   13926:	49a8      	ldr	r1, [pc, #672]	; (13bc8 <ull_conn_llcp+0x1534>)
   13928:	48a8      	ldr	r0, [pc, #672]	; (13bcc <ull_conn_llcp+0x1538>)
   1392a:	f640 53f3 	movw	r3, #3571	; 0xdf3
   1392e:	f00f fa3e 	bl	22dae <printk>
   13932:	4040      	eors	r0, r0
   13934:	f380 8811 	msr	BASEPRI, r0
   13938:	f04f 0003 	mov.w	r0, #3
   1393c:	df02      	svc	2
   1393e:	f8d9 0000 	ldr.w	r0, [r9]
   13942:	e51f      	b.n	13384 <ull_conn_llcp+0xcf0>
			if (!conn->llcp_length.cache.tx_octets) {
   13944:	f8b4 11b0 	ldrh.w	r1, [r4, #432]	; 0x1b0
   13948:	2900      	cmp	r1, #0
   1394a:	f040 8081 	bne.w	13a50 <ull_conn_llcp+0x13bc>
				conn->llcp_length.ack = conn->llcp_length.req;
   1394e:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   13952:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
   13956:	e50a      	b.n	1336e <ull_conn_llcp+0xcda>
			tx->next = conn->tx_head->next;
   13958:	681a      	ldr	r2, [r3, #0]
   1395a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1395c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1395e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13960:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   13964:	e43f      	b.n	131e6 <ull_conn_llcp+0xb52>
			tx->next = conn->tx_head->next;
   13966:	681a      	ldr	r2, [r3, #0]
   13968:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1396c:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13970:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   13974:	f7ff b96e 	b.w	12c54 <ull_conn_llcp+0x5c0>
			tx->next = conn->tx_head->next;
   13978:	681a      	ldr	r2, [r3, #0]
   1397a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1397e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13982:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   13986:	e644      	b.n	13612 <ull_conn_llcp+0xf7e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13988:	4891      	ldr	r0, [pc, #580]	; (13bd0 <ull_conn_llcp+0x153c>)
   1398a:	f7f7 fd8f 	bl	b4ac <mem_acquire>
		if (!tx) {
   1398e:	4601      	mov	r1, r0
   13990:	2800      	cmp	r0, #0
   13992:	f43f aa8d 	beq.w	12eb0 <ull_conn_llcp+0x81c>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   13996:	7903      	ldrb	r3, [r0, #4]
   13998:	f043 0303 	orr.w	r3, r3, #3
   1399c:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1399e:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   139a0:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   139a2:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   139a4:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   139a6:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   139a8:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
   139aa:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   139ae:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   139b0:	4620      	mov	r0, r4
   139b2:	2200      	movs	r2, #0
   139b4:	f7fc fb6e 	bl	10094 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   139b8:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   139bc:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   139c0:	2300      	movs	r3, #0
   139c2:	603b      	str	r3, [r7, #0]
		return;
   139c4:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   139c8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   139cc:	f7fe be6d 	b.w	126aa <ull_conn_llcp+0x16>
		if (conn->llcp_phy.tx & PHY_2M) {
   139d0:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   139d2:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
		if (conn->llcp_phy.tx & PHY_2M) {
   139d6:	f3c3 0282 	ubfx	r2, r3, #2, #3
   139da:	d550      	bpl.n	13a7e <ull_conn_llcp+0x13ea>
			conn->llcp_phy.tx = PHY_2M;
   139dc:	2202      	movs	r2, #2
   139de:	f362 0384 	bfi	r3, r2, #2, #3
   139e2:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.rx & PHY_2M) {
   139e6:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   139ea:	065f      	lsls	r7, r3, #25
   139ec:	ea4f 1253 	mov.w	r2, r3, lsr #5
   139f0:	d53d      	bpl.n	13a6e <ull_conn_llcp+0x13da>
			conn->llcp_phy.rx = PHY_2M;
   139f2:	2202      	movs	r2, #2
   139f4:	f362 1347 	bfi	r3, r2, #5, #3
   139f8:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   139fc:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   13a00:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13a04:	f894 7065 	ldrb.w	r7, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13a08:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   13a0c:	f3c3 0182 	ubfx	r1, r3, #2, #3
   13a10:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13a14:	f007 0707 	and.w	r7, r7, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   13a18:	f3c2 0280 	ubfx	r2, r2, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   13a1c:	458c      	cmp	ip, r1
   13a1e:	bf08      	it	eq
   13a20:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a22:	0052      	lsls	r2, r2, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   13a24:	ebb7 1f53 	cmp.w	r7, r3, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a28:	f042 0201 	orr.w	r2, r2, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   13a2c:	ea4f 1353 	mov.w	r3, r3, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   13a30:	bf08      	it	eq
   13a32:	2300      	moveq	r3, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a34:	ea42 1243 	orr.w	r2, r2, r3, lsl #5
   13a38:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
		conn->llcp_ack -= 2U;
   13a3c:	1e83      	subs	r3, r0, #2
		conn->llcp_type = LLCP_PHY_UPD;
   13a3e:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
   13a40:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
   13a44:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
   13a48:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   13a4c:	f7fe bea2 	b.w	12794 <ull_conn_llcp+0x100>
				conn->llcp_length.cache.tx_octets = 0;
   13a50:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13a52:	4663      	mov	r3, ip
   13a54:	f362 0302 	bfi	r3, r2, #0, #3
				conn->llcp_length.tx_octets =
   13a58:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
				conn->llcp_length.tx_time =
   13a5c:	f8b4 11b2 	ldrh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13a60:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
				conn->llcp_length.cache.tx_octets = 0;
   13a64:	f8a4 21b0 	strh.w	r2, [r4, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   13a68:	f8a4 11ae 	strh.w	r1, [r4, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13a6c:	e47f      	b.n	1336e <ull_conn_llcp+0xcda>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   13a6e:	07d1      	lsls	r1, r2, #31
   13a70:	d56b      	bpl.n	13b4a <ull_conn_llcp+0x14b6>
			conn->llcp_phy.rx = PHY_1M;
   13a72:	2201      	movs	r2, #1
   13a74:	f362 1347 	bfi	r3, r2, #5, #3
   13a78:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13a7c:	e7be      	b.n	139fc <ull_conn_llcp+0x1368>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   13a7e:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   13a80:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		} else if (conn->llcp_phy.tx & PHY_1M) {
   13a84:	d56a      	bpl.n	13b5c <ull_conn_llcp+0x14c8>
			conn->llcp_phy.tx = PHY_1M;
   13a86:	2201      	movs	r2, #1
   13a88:	f362 0384 	bfi	r3, r2, #2, #3
   13a8c:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13a90:	e7a9      	b.n	139e6 <ull_conn_llcp+0x1352>
			tx->next = conn->tx_head->next;
   13a92:	681a      	ldr	r2, [r3, #0]
   13a94:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   13a98:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13a9c:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   13aa0:	e6af      	b.n	13802 <ull_conn_llcp+0x116e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13aa2:	484b      	ldr	r0, [pc, #300]	; (13bd0 <ull_conn_llcp+0x153c>)
   13aa4:	f7f7 fd02 	bl	b4ac <mem_acquire>
	if (!tx) {
   13aa8:	4601      	mov	r1, r0
   13aaa:	2800      	cmp	r0, #0
   13aac:	f43f aa00 	beq.w	12eb0 <ull_conn_llcp+0x81c>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13ab0:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   13ab2:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13ab4:	f043 0303 	orr.w	r3, r3, #3
   13ab8:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   13aba:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   13abc:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
	rsp->interval_max =
   13ac0:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
	rsp->latency =
   13ac4:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
	rsp->interval_min =
   13ac8:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
   13aca:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
	rsp->interval_max =
   13ace:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   13ad0:	2310      	movs	r3, #16
	rsp->latency =
   13ad2:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
   13ad4:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   13ad6:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
   13ad8:	f894 3188 	ldrb.w	r3, [r4, #392]	; 0x188
   13adc:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
   13ade:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   13ae2:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   13ae6:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
	rsp->reference_conn_event_count =
   13aea:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   13aee:	f8b4 3190 	ldrh.w	r3, [r4, #400]	; 0x190
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   13af2:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   13af6:	f8b4 0192 	ldrh.w	r0, [r4, #402]	; 0x192
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   13afa:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   13afe:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   13b02:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   13b06:	f8b4 3196 	ldrh.w	r3, [r4, #406]	; 0x196
   13b0a:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   13b0e:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   13b12:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
   13b16:	4620      	mov	r0, r4
   13b18:	4642      	mov	r2, r8
   13b1a:	f7fc fabb 	bl	10094 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13b1e:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   13b22:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   13b26:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   13b2a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13b2e:	f8c7 8000 	str.w	r8, [r7]
}
   13b32:	f7fe bdba 	b.w	126aa <ull_conn_llcp+0x16>
				conn->llcp_conn_param.interval_max;
   13b36:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   13b3a:	f7ff ba7c 	b.w	13036 <ull_conn_llcp+0x9a2>
			tx->next = conn->tx_head->next;
   13b3e:	681a      	ldr	r2, [r3, #0]
   13b40:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13b42:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   13b44:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   13b48:	e5ce      	b.n	136e8 <ull_conn_llcp+0x1054>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   13b4a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   13b4e:	bf18      	it	ne
   13b50:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   13b52:	f362 1347 	bfi	r3, r2, #5, #3
   13b56:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13b5a:	e74f      	b.n	139fc <ull_conn_llcp+0x1368>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   13b5c:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   13b60:	bf18      	it	ne
   13b62:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   13b64:	f362 0384 	bfi	r3, r2, #2, #3
   13b68:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   13b6c:	e73b      	b.n	139e6 <ull_conn_llcp+0x1352>
			tx->next = conn->tx_head->next;
   13b6e:	6803      	ldr	r3, [r0, #0]
   13b70:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
   13b72:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
   13b74:	e9c4 1170 	strd	r1, r1, [r4, #448]	; 0x1c0
   13b78:	e47d      	b.n	13476 <ull_conn_llcp+0xde2>
		LL_ASSERT(0);
   13b7a:	4a12      	ldr	r2, [pc, #72]	; (13bc4 <ull_conn_llcp+0x1530>)
   13b7c:	4915      	ldr	r1, [pc, #84]	; (13bd4 <ull_conn_llcp+0x1540>)
   13b7e:	4813      	ldr	r0, [pc, #76]	; (13bcc <ull_conn_llcp+0x1538>)
   13b80:	f640 631b 	movw	r3, #3611	; 0xe1b
   13b84:	f00f f913 	bl	22dae <printk>
   13b88:	4040      	eors	r0, r0
   13b8a:	f380 8811 	msr	BASEPRI, r0
   13b8e:	f04f 0003 	mov.w	r0, #3
   13b92:	df02      	svc	2
		break;
   13b94:	f7fe bdfe 	b.w	12794 <ull_conn_llcp+0x100>
		LL_ASSERT(0);
   13b98:	f640 631b 	movw	r3, #3611	; 0xe1b
   13b9c:	e552      	b.n	13644 <ull_conn_llcp+0xfb0>
		LL_ASSERT(0);
   13b9e:	4a09      	ldr	r2, [pc, #36]	; (13bc4 <ull_conn_llcp+0x1530>)
   13ba0:	490c      	ldr	r1, [pc, #48]	; (13bd4 <ull_conn_llcp+0x1540>)
   13ba2:	480a      	ldr	r0, [pc, #40]	; (13bcc <ull_conn_llcp+0x1538>)
   13ba4:	f640 531f 	movw	r3, #3359	; 0xd1f
   13ba8:	f00f f901 	bl	22dae <printk>
   13bac:	4040      	eors	r0, r0
   13bae:	f380 8811 	msr	BASEPRI, r0
   13bb2:	f04f 0003 	mov.w	r0, #3
   13bb6:	df02      	svc	2
		break;
   13bb8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13bbc:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   13bc0:	f7fe bd73 	b.w	126aa <ull_conn_llcp+0x16>
   13bc4:	0002ca9c 	.word	0x0002ca9c
   13bc8:	0002cb68 	.word	0x0002cb68
   13bcc:	0002c5e0 	.word	0x0002c5e0
   13bd0:	20003580 	.word	0x20003580
   13bd4:	0002c650 	.word	0x0002c650

00013bd8 <ull_conn_tx_demux>:
{
   13bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13bdc:	4f24      	ldr	r7, [pc, #144]	; (13c70 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13bde:	4e25      	ldr	r6, [pc, #148]	; (13c74 <ull_conn_tx_demux+0x9c>)
   13be0:	78fa      	ldrb	r2, [r7, #3]
{
   13be2:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   13be4:	1d3d      	adds	r5, r7, #4
   13be6:	e021      	b.n	13c2c <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13be8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   13bec:	4630      	mov	r0, r6
   13bee:	f7f7 fc8d 	bl	b50c <mem_get>
	if (conn->lll.handle != handle) {
   13bf2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   13bf4:	bb32      	cbnz	r2, 13c44 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   13bf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   13bfa:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
			tx->next = NULL;
   13bfe:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   13c00:	b369      	cbz	r1, 13c5e <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   13c02:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
   13c06:	b102      	cbz	r2, 13c0a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   13c08:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   13c0a:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
		MFIFO_DEQUEUE(conn_tx);
   13c0e:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   13c10:	78bb      	ldrb	r3, [r7, #2]
   13c12:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   13c14:	429a      	cmp	r2, r3
   13c16:	d005      	beq.n	13c24 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   13c18:	3301      	adds	r3, #1
   13c1a:	b2db      	uxtb	r3, r3
		_first = 0U;
   13c1c:	4299      	cmp	r1, r3
   13c1e:	bf08      	it	eq
   13c20:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   13c22:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   13c24:	3c01      	subs	r4, #1
   13c26:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   13c2a:	d016      	beq.n	13c5a <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   13c2c:	78bb      	ldrb	r3, [r7, #2]
   13c2e:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   13c30:	4293      	cmp	r3, r2
   13c32:	d012      	beq.n	13c5a <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   13c34:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   13c38:	eb15 0803 	adds.w	r8, r5, r3
   13c3c:	d00d      	beq.n	13c5a <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   13c3e:	5aea      	ldrh	r2, [r5, r3]
   13c40:	2a00      	cmp	r2, #0
   13c42:	d0d1      	beq.n	13be8 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   13c44:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   13c48:	790b      	ldrb	r3, [r1, #4]
   13c4a:	f36f 0301 	bfc	r3, #0, #2
   13c4e:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   13c50:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13c54:	f7fb fb6c 	bl	f330 <ll_tx_ack_put>
   13c58:	e7d9      	b.n	13c0e <ull_conn_tx_demux+0x36>
}
   13c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   13c5e:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
				conn->tx_data = tx;
   13c62:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
				if (!conn->tx_head) {
   13c66:	2a00      	cmp	r2, #0
   13c68:	d1cb      	bne.n	13c02 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   13c6a:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			if (conn->tx_data_last) {
   13c6e:	e7cc      	b.n	13c0a <ull_conn_tx_demux+0x32>
   13c70:	20000634 	.word	0x20000634
   13c74:	20003328 	.word	0x20003328

00013c78 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   13c78:	4b3b      	ldr	r3, [pc, #236]	; (13d68 <conn_cleanup+0xf0>)
{
   13c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   13c7e:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   13c80:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
	*((uint8_t *)rx->pdu) = reason;
   13c84:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	if (conn == conn_upd_curr) {
   13c88:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   13c8a:	bf04      	itt	eq
   13c8c:	2200      	moveq	r2, #0
   13c8e:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   13c90:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   13c92:	f8a0 2142 	strh.w	r2, [r0, #322]	; 0x142
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13c96:	2314      	movs	r3, #20
{
   13c98:	b083      	sub	sp, #12
   13c9a:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   13c9c:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13ca0:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	while (rx) {
   13ca4:	b144      	cbz	r4, 13cb8 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   13ca6:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   13ca8:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   13caa:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   13cac:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   13cae:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   13cb0:	f7fb faf8 	bl	f2a4 <ll_rx_put>
	while (rx) {
   13cb4:	2c00      	cmp	r4, #0
   13cb6:	d1f7      	bne.n	13ca8 <conn_cleanup+0x30>
	while (conn->tx_head) {
   13cb8:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   13cbc:	b381      	cbz	r1, 13d20 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   13cbe:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 13d7c <conn_cleanup+0x104>
		LL_ASSERT(link);
   13cc2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13d74 <conn_cleanup+0xfc>
   13cc6:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 13d80 <conn_cleanup+0x108>
   13cca:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   13cce:	e007      	b.n	13ce0 <conn_cleanup+0x68>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13cd0:	4629      	mov	r1, r5
   13cd2:	4620      	mov	r0, r4
   13cd4:	463a      	mov	r2, r7
   13cd6:	f7f7 fc4b 	bl	b570 <memq_enqueue>
	while (conn->tx_head) {
   13cda:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   13cde:	b1f9      	cbz	r1, 13d20 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   13ce0:	4630      	mov	r0, r6
   13ce2:	f7fc f95b 	bl	ff9c <tx_ull_dequeue>
   13ce6:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   13ce8:	4640      	mov	r0, r8
   13cea:	f7f7 fbdf 	bl	b4ac <mem_acquire>
		LL_ASSERT(link);
   13cee:	4604      	mov	r4, r0
   13cf0:	2800      	cmp	r0, #0
   13cf2:	d1ed      	bne.n	13cd0 <conn_cleanup+0x58>
   13cf4:	481d      	ldr	r0, [pc, #116]	; (13d6c <conn_cleanup+0xf4>)
   13cf6:	f44f 63ed 	mov.w	r3, #1896	; 0x768
   13cfa:	4652      	mov	r2, sl
   13cfc:	4649      	mov	r1, r9
   13cfe:	f00f f856 	bl	22dae <printk>
   13d02:	4040      	eors	r0, r0
   13d04:	f380 8811 	msr	BASEPRI, r0
   13d08:	f04f 0003 	mov.w	r0, #3
   13d0c:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   13d0e:	4629      	mov	r1, r5
   13d10:	4620      	mov	r0, r4
   13d12:	463a      	mov	r2, r7
   13d14:	f7f7 fc2c 	bl	b570 <memq_enqueue>
	while (conn->tx_head) {
   13d18:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   13d1c:	2900      	cmp	r1, #0
   13d1e:	d1df      	bne.n	13ce0 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   13d20:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13d24:	4b12      	ldr	r3, [pc, #72]	; (13d70 <conn_cleanup+0xf8>)
   13d26:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   13d2a:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13d2c:	b2d2      	uxtb	r2, r2
   13d2e:	2101      	movs	r1, #1
   13d30:	2000      	movs	r0, #0
   13d32:	f7f8 ff6f 	bl	cc14 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d36:	f030 0302 	bics.w	r3, r0, #2
   13d3a:	d00c      	beq.n	13d56 <conn_cleanup+0xde>
   13d3c:	4a0d      	ldr	r2, [pc, #52]	; (13d74 <conn_cleanup+0xfc>)
   13d3e:	490e      	ldr	r1, [pc, #56]	; (13d78 <conn_cleanup+0x100>)
   13d40:	480a      	ldr	r0, [pc, #40]	; (13d6c <conn_cleanup+0xf4>)
   13d42:	f240 7327 	movw	r3, #1831	; 0x727
   13d46:	f00f f832 	bl	22dae <printk>
   13d4a:	4040      	eors	r0, r0
   13d4c:	f380 8811 	msr	BASEPRI, r0
   13d50:	f04f 0003 	mov.w	r0, #3
   13d54:	df02      	svc	2
	lll->handle = 0xFFFF;
   13d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   13d5a:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   13d5c:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   13d5e:	b003      	add	sp, #12
   13d60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   13d64:	f7ff bf38 	b.w	13bd8 <ull_conn_tx_demux>
   13d68:	200034fc 	.word	0x200034fc
   13d6c:	0002c5e0 	.word	0x0002c5e0
   13d70:	00010235 	.word	0x00010235
   13d74:	0002ca9c 	.word	0x0002ca9c
   13d78:	0002cb7c 	.word	0x0002cb7c
   13d7c:	20003604 	.word	0x20003604
   13d80:	0002caf4 	.word	0x0002caf4

00013d84 <ull_conn_done>:
{
   13d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   13d88:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   13d8a:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   13d8c:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   13d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13d92:	429a      	cmp	r2, r3
{
   13d94:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   13d96:	f000 8092 	beq.w	13ebe <ull_conn_done+0x13a>
	switch (done->extra.mic_state) {
   13d9a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   13d9e:	2b01      	cmp	r3, #1
   13da0:	4606      	mov	r6, r0
   13da2:	f000 80dd 	beq.w	13f60 <ull_conn_done+0x1dc>
   13da6:	2b02      	cmp	r3, #2
   13da8:	f000 80d0 	beq.w	13f4c <ull_conn_done+0x1c8>
   13dac:	2b00      	cmp	r3, #0
   13dae:	f000 80b3 	beq.w	13f18 <ull_conn_done+0x194>
	reason_peer = conn->llcp_terminate.reason_peer;
   13db2:	f894 713b 	ldrb.w	r7, [r4, #315]	; 0x13b
	if (reason_peer && (
   13db6:	2f00      	cmp	r7, #0
   13db8:	f040 80cb 	bne.w	13f52 <ull_conn_done+0x1ce>
	latency_event = lll->latency_event;
   13dbc:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   13dc0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   13dc2:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   13dc4:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   13dc8:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   13dca:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   13dce:	2b00      	cmp	r3, #0
   13dd0:	d078      	beq.n	13ec4 <ull_conn_done+0x140>
		} else if (lll->role) {
   13dd2:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   13dd6:	2b00      	cmp	r3, #0
   13dd8:	f2c0 8108 	blt.w	13fec <ull_conn_done+0x268>
	if (done->extra.crc_valid) {
   13ddc:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   13de0:	2200      	movs	r2, #0
   13de2:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   13de6:	2b00      	cmp	r3, #0
   13de8:	f000 80c0 	beq.w	13f6c <ull_conn_done+0x1e8>
		conn->supervision_expire = 0U;
   13dec:	2300      	movs	r3, #0
   13dee:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   13df2:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   13df6:	b133      	cbz	r3, 13e06 <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   13df8:	4543      	cmp	r3, r8
   13dfa:	f240 810d 	bls.w	14018 <ull_conn_done+0x294>
			conn->procedure_expire -= elapsed_event;
   13dfe:	eba3 0308 	sub.w	r3, r3, r8
   13e02:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   13e06:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   13e0a:	b133      	cbz	r3, 13e1a <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   13e0c:	4543      	cmp	r3, r8
   13e0e:	f240 80d5 	bls.w	13fbc <ull_conn_done+0x238>
			conn->apto_expire -= elapsed_event;
   13e12:	eba3 0308 	sub.w	r3, r3, r8
   13e16:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   13e1a:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   13e1e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   13e22:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   13e26:	b15a      	cbz	r2, 13e40 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   13e28:	4542      	cmp	r2, r8
   13e2a:	f200 80ab 	bhi.w	13f84 <ull_conn_done+0x200>
			if ((conn->procedure_expire == 0U) &&
   13e2e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   13e32:	2000      	movs	r0, #0
   13e34:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   13e38:	b912      	cbnz	r2, 13e40 <ull_conn_done+0xbc>
   13e3a:	4299      	cmp	r1, r3
   13e3c:	f000 8103 	beq.w	14046 <ull_conn_done+0x2c2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13e40:	1a5b      	subs	r3, r3, r1
   13e42:	f003 0303 	and.w	r3, r3, #3
   13e46:	2b02      	cmp	r3, #2
   13e48:	f000 80a6 	beq.w	13f98 <ull_conn_done+0x214>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   13e4c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   13e50:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   13e54:	429a      	cmp	r2, r3
   13e56:	f000 80c7 	beq.w	13fe8 <ull_conn_done+0x264>
		lll->latency_event = 0U;
   13e5a:	2200      	movs	r2, #0
   13e5c:	84aa      	strh	r2, [r5, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   13e5e:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   13e62:	b917      	cbnz	r7, 13e6a <ull_conn_done+0xe6>
   13e64:	454a      	cmp	r2, r9
   13e66:	f000 80a4 	beq.w	13fb2 <ull_conn_done+0x22e>
		lazy = lll->latency_event + 1U;
   13e6a:	3201      	adds	r2, #1
   13e6c:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13e6e:	b913      	cbnz	r3, 13e76 <ull_conn_done+0xf2>
   13e70:	2c00      	cmp	r4, #0
   13e72:	f000 8084 	beq.w	13f7e <ull_conn_done+0x1fa>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13e76:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13e78:	4e83      	ldr	r6, [pc, #524]	; (14088 <ull_conn_done+0x304>)
		struct ll_conn *conn = lll->hdr.parent;
   13e7a:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13e7c:	9506      	str	r5, [sp, #24]
   13e7e:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   13e80:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   13e82:	9103      	str	r1, [sp, #12]
   13e84:	e9cd 0001 	strd	r0, r0, [sp, #4]
   13e88:	b2d2      	uxtb	r2, r2
   13e8a:	9704      	str	r7, [sp, #16]
   13e8c:	9400      	str	r4, [sp, #0]
   13e8e:	9605      	str	r6, [sp, #20]
   13e90:	2101      	movs	r1, #1
   13e92:	f7f8 fea7 	bl	cbe4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13e96:	f030 0302 	bics.w	r3, r0, #2
   13e9a:	d010      	beq.n	13ebe <ull_conn_done+0x13a>
   13e9c:	f7fb fab8 	bl	f410 <ull_disable_mark_get>
   13ea0:	4285      	cmp	r5, r0
   13ea2:	d00c      	beq.n	13ebe <ull_conn_done+0x13a>
   13ea4:	4a79      	ldr	r2, [pc, #484]	; (1408c <ull_conn_done+0x308>)
   13ea6:	497a      	ldr	r1, [pc, #488]	; (14090 <ull_conn_done+0x30c>)
   13ea8:	487a      	ldr	r0, [pc, #488]	; (14094 <ull_conn_done+0x310>)
   13eaa:	f240 5376 	movw	r3, #1398	; 0x576
   13eae:	f00e ff7e 	bl	22dae <printk>
   13eb2:	4040      	eors	r0, r0
   13eb4:	f380 8811 	msr	BASEPRI, r0
   13eb8:	f04f 0003 	mov.w	r0, #3
   13ebc:	df02      	svc	2
}
   13ebe:	b00b      	add	sp, #44	; 0x2c
   13ec0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   13ec4:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   13ec8:	2b00      	cmp	r3, #0
   13eca:	d18f      	bne.n	13dec <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   13ecc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   13ed0:	2b00      	cmp	r3, #0
   13ed2:	d04b      	beq.n	13f6c <ull_conn_done+0x1e8>
		if (conn->connect_expire > elapsed_event) {
   13ed4:	4543      	cmp	r3, r8
   13ed6:	f240 80bd 	bls.w	14054 <ull_conn_done+0x2d0>
			conn->connect_expire -= elapsed_event;
   13eda:	eba3 0308 	sub.w	r3, r3, r8
   13ede:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   13ee2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   13ee6:	2b00      	cmp	r3, #0
   13ee8:	d083      	beq.n	13df2 <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   13eea:	4598      	cmp	r8, r3
   13eec:	f080 808f 	bcs.w	1400e <ull_conn_done+0x28a>
			conn->supervision_expire -= elapsed_event;
   13ef0:	eba3 0308 	sub.w	r3, r3, r8
   13ef4:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   13ef6:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   13ef8:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   13efa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   13efe:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   13f00:	d908      	bls.n	13f14 <ull_conn_done+0x190>
			else if (lll->role) {
   13f02:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   13f06:	4293      	cmp	r3, r2
   13f08:	f6bf af73 	bge.w	13df2 <ull_conn_done+0x6e>
				if (latency_event) {
   13f0c:	f1b9 0f00 	cmp.w	r9, #0
   13f10:	f000 808b 	beq.w	1402a <ull_conn_done+0x2a6>
				force = 1U;
   13f14:	2701      	movs	r7, #1
   13f16:	e76c      	b.n	13df2 <ull_conn_done+0x6e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13f18:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   13f1c:	0719      	lsls	r1, r3, #28
   13f1e:	d542      	bpl.n	13fa6 <ull_conn_done+0x222>
					    (lll->latency + 6)) ?
   13f20:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   13f22:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   13f26:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   13f28:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   13f2a:	bfc4      	itt	gt
   13f2c:	1ad3      	subgt	r3, r2, r3
   13f2e:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   13f30:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   13f34:	bfcc      	ite	gt
   13f36:	b29b      	uxthgt	r3, r3
   13f38:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   13f3a:	4299      	cmp	r1, r3
   13f3c:	d061      	beq.n	14002 <ull_conn_done+0x27e>
				conn->appto_reload = appto_reload_new;
   13f3e:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   13f42:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   13f46:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   13f4a:	e732      	b.n	13db2 <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   13f4c:	273d      	movs	r7, #61	; 0x3d
   13f4e:	f884 713b 	strb.w	r7, [r4, #315]	; 0x13b
		conn_cleanup(conn, reason_peer);
   13f52:	4639      	mov	r1, r7
   13f54:	4620      	mov	r0, r4
   13f56:	f7ff fe8f 	bl	13c78 <conn_cleanup>
}
   13f5a:	b00b      	add	sp, #44	; 0x2c
   13f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		conn->appto_expire = conn->apto_expire = 0U;
   13f60:	2300      	movs	r3, #0
   13f62:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   13f66:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   13f6a:	e722      	b.n	13db2 <ull_conn_done+0x2e>
		if (!conn->supervision_expire) {
   13f6c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   13f70:	2b00      	cmp	r3, #0
   13f72:	d1ba      	bne.n	13eea <ull_conn_done+0x166>
			conn->supervision_expire = conn->supervision_reload;
   13f74:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   13f78:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   13f7c:	e7b3      	b.n	13ee6 <ull_conn_done+0x162>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13f7e:	b371      	cbz	r1, 13fde <ull_conn_done+0x25a>
   13f80:	4623      	mov	r3, r4
   13f82:	e778      	b.n	13e76 <ull_conn_done+0xf2>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13f84:	1a5b      	subs	r3, r3, r1
   13f86:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   13f8a:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13f8e:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   13f90:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   13f94:	f47f af5a 	bne.w	13e4c <ull_conn_done+0xc8>
   13f98:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   13f9c:	3b01      	subs	r3, #1
   13f9e:	2b01      	cmp	r3, #1
   13fa0:	f63f af54 	bhi.w	13e4c <ull_conn_done+0xc8>
   13fa4:	e759      	b.n	13e5a <ull_conn_done+0xd6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   13fa6:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   13faa:	07da      	lsls	r2, r3, #31
   13fac:	f57f af01 	bpl.w	13db2 <ull_conn_done+0x2e>
   13fb0:	e7b6      	b.n	13f20 <ull_conn_done+0x19c>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13fb2:	b90b      	cbnz	r3, 13fb8 <ull_conn_done+0x234>
   13fb4:	2c00      	cmp	r4, #0
   13fb6:	d082      	beq.n	13ebe <ull_conn_done+0x13a>
	lazy = 0U;
   13fb8:	4639      	mov	r1, r7
   13fba:	e75c      	b.n	13e76 <ull_conn_done+0xf2>
			rx = ll_pdu_rx_alloc();
   13fbc:	f7fb f9a0 	bl	f300 <ll_pdu_rx_alloc>
			if (rx) {
   13fc0:	4601      	mov	r1, r0
   13fc2:	b370      	cbz	r0, 14022 <ull_conn_done+0x29e>
				conn->apto_expire = 0U;
   13fc4:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   13fc6:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   13fc8:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   13fcc:	2317      	movs	r3, #23
				rx->handle = lll->handle;
   13fce:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   13fd0:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   13fd2:	6800      	ldr	r0, [r0, #0]
   13fd4:	f7fb f966 	bl	f2a4 <ll_rx_put>
				ll_rx_sched();
   13fd8:	f7fb f96e 	bl	f2b8 <ll_rx_sched>
   13fdc:	e71d      	b.n	13e1a <ull_conn_done+0x96>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   13fde:	2f00      	cmp	r7, #0
   13fe0:	f43f af6d 	beq.w	13ebe <ull_conn_done+0x13a>
   13fe4:	4623      	mov	r3, r4
   13fe6:	e746      	b.n	13e76 <ull_conn_done+0xf2>
   13fe8:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   13fea:	e738      	b.n	13e5e <ull_conn_done+0xda>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   13fec:	aa08      	add	r2, sp, #32
   13fee:	a909      	add	r1, sp, #36	; 0x24
   13ff0:	4630      	mov	r0, r6
   13ff2:	f7ec fa55 	bl	4a0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   13ff6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   13ffa:	b383      	cbz	r3, 1405e <ull_conn_done+0x2da>
				lll->latency_event = 0;
   13ffc:	2300      	movs	r3, #0
   13ffe:	84ab      	strh	r3, [r5, #36]	; 0x24
   14000:	e6ec      	b.n	13ddc <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   14002:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   14006:	2900      	cmp	r1, #0
   14008:	f47f aed3 	bne.w	13db2 <ull_conn_done+0x2e>
   1400c:	e799      	b.n	13f42 <ull_conn_done+0x1be>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1400e:	4620      	mov	r0, r4
   14010:	2108      	movs	r1, #8
   14012:	f7ff fe31 	bl	13c78 <conn_cleanup>
			return;
   14016:	e752      	b.n	13ebe <ull_conn_done+0x13a>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   14018:	4620      	mov	r0, r4
   1401a:	2122      	movs	r1, #34	; 0x22
   1401c:	f7ff fe2c 	bl	13c78 <conn_cleanup>
			return;
   14020:	e74d      	b.n	13ebe <ull_conn_done+0x13a>
				conn->apto_expire = 1U;
   14022:	2301      	movs	r3, #1
   14024:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   14028:	e6f7      	b.n	13e1a <ull_conn_done+0x96>
					force = conn->slave.force & 0x01;
   1402a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   1402e:	085a      	lsrs	r2, r3, #1
					if (force) {
   14030:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   14034:	bf17      	itett	ne
   14036:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1403a:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   1403e:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   14042:	461f      	movne	r7, r3
   14044:	e6d5      	b.n	13df2 <ull_conn_done+0x6e>
				conn->llcp_ack -= 2U;
   14046:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   14048:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1404a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   1404e:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   14052:	e6fb      	b.n	13e4c <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   14054:	4620      	mov	r0, r4
   14056:	213e      	movs	r1, #62	; 0x3e
   14058:	f7ff fe0e 	bl	13c78 <conn_cleanup>
			return;
   1405c:	e72f      	b.n	13ebe <ull_conn_done+0x13a>
				ull_conn_tx_demux(UINT8_MAX);
   1405e:	20ff      	movs	r0, #255	; 0xff
   14060:	f7ff fdba 	bl	13bd8 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   14064:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   14068:	2b00      	cmp	r3, #0
   1406a:	d1c7      	bne.n	13ffc <ull_conn_done+0x278>
   1406c:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   14070:	463a      	mov	r2, r7
   14072:	f7f7 fa85 	bl	b580 <memq_peek>
   14076:	2800      	cmp	r0, #0
   14078:	d1c0      	bne.n	13ffc <ull_conn_done+0x278>
			} else if (lll->slave.latency_enabled) {
   1407a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   1407e:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   14080:	bf44      	itt	mi
   14082:	8c2b      	ldrhmi	r3, [r5, #32]
   14084:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   14086:	e6a9      	b.n	13ddc <ull_conn_done+0x58>
   14088:	00010349 	.word	0x00010349
   1408c:	0002ca9c 	.word	0x0002ca9c
   14090:	0002cc30 	.word	0x0002cc30
   14094:	0002c5e0 	.word	0x0002c5e0

00014098 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   14098:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   1409c:	2b00      	cmp	r3, #0
   1409e:	f000 80be 	beq.w	1421e <ull_conn_tx_lll_enqueue+0x186>
   140a2:	3901      	subs	r1, #1
{
   140a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   140a8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 14224 <ull_conn_tx_lll_enqueue+0x18c>
		LL_ASSERT(link);
   140ac:	f8df a178 	ldr.w	sl, [pc, #376]	; 14228 <ull_conn_tx_lll_enqueue+0x190>
   140b0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 1422c <ull_conn_tx_lll_enqueue+0x194>
   140b4:	4604      	mov	r4, r0
   140b6:	b2cd      	uxtb	r5, r1
   140b8:	e010      	b.n	140dc <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   140ba:	4640      	mov	r0, r8
   140bc:	f7f7 f9f6 	bl	b4ac <mem_acquire>
		LL_ASSERT(link);
   140c0:	4607      	mov	r7, r0
   140c2:	b3b0      	cbz	r0, 14132 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   140c4:	4631      	mov	r1, r6
   140c6:	4638      	mov	r0, r7
   140c8:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   140cc:	f7f7 fa50 	bl	b570 <memq_enqueue>
	while (conn->tx_head &&
   140d0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   140d4:	3d01      	subs	r5, #1
   140d6:	b2ed      	uxtb	r5, r5
   140d8:	2b00      	cmp	r3, #0
   140da:	d05c      	beq.n	14196 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   140dc:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
	while (conn->tx_head &&
   140e0:	07d1      	lsls	r1, r2, #31
   140e2:	d403      	bmi.n	140ec <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   140e4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		 !conn->llcp_phy.pause_tx &&
   140e8:	0792      	lsls	r2, r2, #30
   140ea:	d53a      	bpl.n	14162 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   140ec:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   140f0:	4293      	cmp	r3, r2
   140f2:	d150      	bne.n	14196 <ull_conn_tx_lll_enqueue+0xfe>
   140f4:	2dff      	cmp	r5, #255	; 0xff
   140f6:	d04e      	beq.n	14196 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   140f8:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   140fc:	4620      	mov	r0, r4
   140fe:	f7fb ff4d 	bl	ff9c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14102:	7903      	ldrb	r3, [r0, #4]
   14104:	f003 0303 	and.w	r3, r3, #3
   14108:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1410a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1410c:	d1d5      	bne.n	140ba <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   1410e:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   14110:	2b0b      	cmp	r3, #11
   14112:	d042      	beq.n	1419a <ull_conn_tx_lll_enqueue+0x102>
   14114:	d81b      	bhi.n	1414e <ull_conn_tx_lll_enqueue+0xb6>
   14116:	2b04      	cmp	r3, #4
   14118:	d1cf      	bne.n	140ba <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1411a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1411e:	f043 0302 	orr.w	r3, r3, #2
   14122:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		link = mem_acquire(&mem_link_tx.free);
   14126:	4640      	mov	r0, r8
   14128:	f7f7 f9c0 	bl	b4ac <mem_acquire>
		LL_ASSERT(link);
   1412c:	4607      	mov	r7, r0
   1412e:	2800      	cmp	r0, #0
   14130:	d1c8      	bne.n	140c4 <ull_conn_tx_lll_enqueue+0x2c>
   14132:	483b      	ldr	r0, [pc, #236]	; (14220 <ull_conn_tx_lll_enqueue+0x188>)
   14134:	f240 53ca 	movw	r3, #1482	; 0x5ca
   14138:	4652      	mov	r2, sl
   1413a:	4649      	mov	r1, r9
   1413c:	f00e fe37 	bl	22dae <printk>
   14140:	4040      	eors	r0, r0
   14142:	f380 8811 	msr	BASEPRI, r0
   14146:	f04f 0003 	mov.w	r0, #3
   1414a:	df02      	svc	2
   1414c:	e7ba      	b.n	140c4 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   1414e:	3b16      	subs	r3, #22
   14150:	2b01      	cmp	r3, #1
   14152:	d8b2      	bhi.n	140ba <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   14154:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   14158:	f043 0301 	orr.w	r3, r3, #1
   1415c:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
		break;
   14160:	e7ab      	b.n	140ba <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14162:	791a      	ldrb	r2, [r3, #4]
   14164:	f002 0203 	and.w	r2, r2, #3
   14168:	2a03      	cmp	r2, #3
   1416a:	d1c3      	bne.n	140f4 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   1416c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1416e:	2a03      	cmp	r2, #3
   14170:	d001      	beq.n	14176 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   14172:	2a0a      	cmp	r2, #10
   14174:	d1be      	bne.n	140f4 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   14176:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1417a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1417e:	428a      	cmp	r2, r1
   14180:	d010      	beq.n	141a4 <ull_conn_tx_lll_enqueue+0x10c>
   14182:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   14186:	2a03      	cmp	r2, #3
   14188:	d0b4      	beq.n	140f4 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   1418a:	681a      	ldr	r2, [r3, #0]
   1418c:	b11a      	cbz	r2, 14196 <ull_conn_tx_lll_enqueue+0xfe>
   1418e:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   14192:	428a      	cmp	r2, r1
   14194:	d032      	beq.n	141fc <ull_conn_tx_lll_enqueue+0x164>
}
   14196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   1419a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1419e:	2b00      	cmp	r3, #0
   141a0:	da8b      	bge.n	140ba <ull_conn_tx_lll_enqueue+0x22>
   141a2:	e7ba      	b.n	1411a <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   141a4:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   141a8:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   141ac:	4288      	cmp	r0, r1
   141ae:	d1ec      	bne.n	1418a <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   141b0:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   141b4:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   141b8:	4288      	cmp	r0, r1
   141ba:	d1e6      	bne.n	1418a <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   141bc:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
   141c0:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   141c4:	4288      	cmp	r0, r1
   141c6:	d1e0      	bne.n	1418a <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   141c8:	f894 01a5 	ldrb.w	r0, [r4, #421]	; 0x1a5
   141cc:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
   141d0:	4288      	cmp	r0, r1
   141d2:	d1da      	bne.n	1418a <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   141d4:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   141d8:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   141dc:	4288      	cmp	r0, r1
   141de:	d1d4      	bne.n	1418a <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   141e0:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   141e4:	2101      	movs	r1, #1
   141e6:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   141ea:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   141ec:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   141ee:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   141f2:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_type = LLCP_ENCRYPTION;
   141f6:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   141fa:	e77b      	b.n	140f4 <ull_conn_tx_lll_enqueue+0x5c>
				tx->next = conn->tx_ctrl_last->next;
   141fc:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
				if (!conn->tx_data_last) {
   14200:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
				conn->tx_head = tx->next;
   14204:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
				tx->next = conn->tx_ctrl_last->next;
   14208:	680a      	ldr	r2, [r1, #0]
   1420a:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1420c:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   1420e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				if (!conn->tx_data_last) {
   14212:	2800      	cmp	r0, #0
   14214:	f47f af6e 	bne.w	140f4 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   14218:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   1421c:	e76a      	b.n	140f4 <ull_conn_tx_lll_enqueue+0x5c>
   1421e:	4770      	bx	lr
   14220:	0002c5e0 	.word	0x0002c5e0
   14224:	20003604 	.word	0x20003604
   14228:	0002ca9c 	.word	0x0002ca9c
   1422c:	0002caf4 	.word	0x0002caf4

00014230 <tx_demux>:
{
   14230:	b510      	push	{r4, lr}
   14232:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   14234:	2001      	movs	r0, #1
   14236:	f7ff fccf 	bl	13bd8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1423a:	4620      	mov	r0, r4
   1423c:	2101      	movs	r1, #1
}
   1423e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   14242:	f7ff bf29 	b.w	14098 <ull_conn_tx_lll_enqueue>
   14246:	bf00      	nop

00014248 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   14248:	4901      	ldr	r1, [pc, #4]	; (14250 <ull_conn_link_tx_release+0x8>)
   1424a:	f7f7 b945 	b.w	b4d8 <mem_release>
   1424e:	bf00      	nop
   14250:	20003604 	.word	0x20003604

00014254 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   14254:	4b01      	ldr	r3, [pc, #4]	; (1425c <ull_conn_ack_last_idx_get+0x8>)
}
   14256:	78d8      	ldrb	r0, [r3, #3]
   14258:	4770      	bx	lr
   1425a:	bf00      	nop
   1425c:	200005f0 	.word	0x200005f0

00014260 <ull_conn_ack_peek>:
{
   14260:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   14262:	4b0b      	ldr	r3, [pc, #44]	; (14290 <ull_conn_ack_peek+0x30>)
   14264:	789c      	ldrb	r4, [r3, #2]
   14266:	78de      	ldrb	r6, [r3, #3]
   14268:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   1426a:	42b4      	cmp	r4, r6
   1426c:	d00d      	beq.n	1428a <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   1426e:	3304      	adds	r3, #4
   14270:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   14274:	4605      	mov	r5, r0
   14276:	1918      	adds	r0, r3, r4
   14278:	d005      	beq.n	14286 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   1427a:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   1427c:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   1427e:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   14280:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   14282:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   14284:	6818      	ldr	r0, [r3, #0]
}
   14286:	bcf0      	pop	{r4, r5, r6, r7}
   14288:	4770      	bx	lr
		return NULL;
   1428a:	2000      	movs	r0, #0
   1428c:	e7fb      	b.n	14286 <ull_conn_ack_peek+0x26>
   1428e:	bf00      	nop
   14290:	200005f0 	.word	0x200005f0

00014294 <ull_conn_ack_by_last_peek>:
{
   14294:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   14296:	4b09      	ldr	r3, [pc, #36]	; (142bc <ull_conn_ack_by_last_peek+0x28>)
   14298:	789c      	ldrb	r4, [r3, #2]
   1429a:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   1429c:	4284      	cmp	r4, r0
   1429e:	d00b      	beq.n	142b8 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   142a0:	3304      	adds	r3, #4
   142a2:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   142a6:	1918      	adds	r0, r3, r4
   142a8:	d004      	beq.n	142b4 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   142aa:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   142ac:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   142ae:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   142b0:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   142b2:	6818      	ldr	r0, [r3, #0]
}
   142b4:	bc30      	pop	{r4, r5}
   142b6:	4770      	bx	lr
		return NULL;
   142b8:	2000      	movs	r0, #0
   142ba:	e7fb      	b.n	142b4 <ull_conn_ack_by_last_peek+0x20>
   142bc:	200005f0 	.word	0x200005f0

000142c0 <ull_conn_ack_dequeue>:
{
   142c0:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   142c2:	4b0a      	ldr	r3, [pc, #40]	; (142ec <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   142c4:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   142c6:	78da      	ldrb	r2, [r3, #3]
   142c8:	7818      	ldrb	r0, [r3, #0]
   142ca:	785c      	ldrb	r4, [r3, #1]
   142cc:	428a      	cmp	r2, r1
   142ce:	d00a      	beq.n	142e6 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   142d0:	1c4a      	adds	r2, r1, #1
   142d2:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   142d4:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   142d8:	4294      	cmp	r4, r2
   142da:	bf08      	it	eq
   142dc:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   142de:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   142e0:	709a      	strb	r2, [r3, #2]
}
   142e2:	bc10      	pop	{r4}
   142e4:	4770      	bx	lr
		return NULL;
   142e6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   142e8:	e7fb      	b.n	142e2 <ull_conn_ack_dequeue+0x22>
   142ea:	bf00      	nop
   142ec:	200005f0 	.word	0x200005f0

000142f0 <ull_conn_lll_ack_enqueue>:
{
   142f0:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   142f2:	4a13      	ldr	r2, [pc, #76]	; (14340 <ull_conn_lll_ack_enqueue+0x50>)
   142f4:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   142f6:	7855      	ldrb	r5, [r2, #1]
   142f8:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   142fa:	1c73      	adds	r3, r6, #1
   142fc:	b2db      	uxtb	r3, r3
		last = 0U;
   142fe:	429d      	cmp	r5, r3
   14300:	bf08      	it	eq
   14302:	2300      	moveq	r3, #0
	if (last == first) {
   14304:	429c      	cmp	r4, r3
   14306:	d00a      	beq.n	1431e <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14308:	4615      	mov	r5, r2
   1430a:	f815 4b04 	ldrb.w	r4, [r5], #4
   1430e:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   14312:	192e      	adds	r6, r5, r4
   14314:	d003      	beq.n	1431e <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   14316:	5328      	strh	r0, [r5, r4]
	lll_tx->node = tx;
   14318:	6071      	str	r1, [r6, #4]
	*last = idx; /* Commit: Update write index */
   1431a:	70d3      	strb	r3, [r2, #3]
}
   1431c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   1431e:	4a09      	ldr	r2, [pc, #36]	; (14344 <ull_conn_lll_ack_enqueue+0x54>)
   14320:	4909      	ldr	r1, [pc, #36]	; (14348 <ull_conn_lll_ack_enqueue+0x58>)
   14322:	480a      	ldr	r0, [pc, #40]	; (1434c <ull_conn_lll_ack_enqueue+0x5c>)
   14324:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   14328:	f00e fd41 	bl	22dae <printk>
   1432c:	4040      	eors	r0, r0
   1432e:	f380 8811 	msr	BASEPRI, r0
   14332:	f04f 0003 	mov.w	r0, #3
   14336:	df02      	svc	2
	lll_tx->handle = handle;
   14338:	2300      	movs	r3, #0
   1433a:	801b      	strh	r3, [r3, #0]
   1433c:	deff      	udf	#255	; 0xff
   1433e:	bf00      	nop
   14340:	200005f0 	.word	0x200005f0
   14344:	0002ca9c 	.word	0x0002ca9c
   14348:	0002cae4 	.word	0x0002cae4
   1434c:	0002c5e0 	.word	0x0002c5e0

00014350 <ull_conn_tx_ack>:
{
   14350:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   14352:	7953      	ldrb	r3, [r2, #5]
{
   14354:	b083      	sub	sp, #12
   14356:	4614      	mov	r4, r2
   14358:	4605      	mov	r5, r0
   1435a:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1435c:	b383      	cbz	r3, 143c0 <ull_conn_tx_ack+0x70>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1435e:	7923      	ldrb	r3, [r4, #4]
   14360:	f003 0203 	and.w	r2, r3, #3
   14364:	2a03      	cmp	r2, #3
   14366:	d00d      	beq.n	14384 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   14368:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1436c:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1436e:	bf04      	itt	eq
   14370:	f36f 0301 	bfceq	r3, #0, #2
   14374:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   14376:	4621      	mov	r1, r4
   14378:	4628      	mov	r0, r5
}
   1437a:	b003      	add	sp, #12
   1437c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   14380:	f7fa bfd6 	b.w	f330 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   14384:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14388:	429d      	cmp	r5, r3
   1438a:	d127      	bne.n	143dc <ull_conn_tx_ack+0x8c>
		if (link->next == (void *)tx) {
   1438c:	6833      	ldr	r3, [r6, #0]
   1438e:	42a3      	cmp	r3, r4
   14390:	f000 80d0 	beq.w	14534 <ull_conn_tx_ack+0x1e4>
			LL_ASSERT(!link->next);
   14394:	2b00      	cmp	r3, #0
   14396:	d0ee      	beq.n	14376 <ull_conn_tx_ack+0x26>
   14398:	4a74      	ldr	r2, [pc, #464]	; (1456c <ull_conn_tx_ack+0x21c>)
   1439a:	4975      	ldr	r1, [pc, #468]	; (14570 <ull_conn_tx_ack+0x220>)
   1439c:	4875      	ldr	r0, [pc, #468]	; (14574 <ull_conn_tx_ack+0x224>)
   1439e:	f44f 63c5 	mov.w	r3, #1576	; 0x628
   143a2:	f00e fd04 	bl	22dae <printk>
   143a6:	4040      	eors	r0, r0
   143a8:	f380 8811 	msr	BASEPRI, r0
   143ac:	f04f 0003 	mov.w	r0, #3
   143b0:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   143b2:	4621      	mov	r1, r4
   143b4:	4628      	mov	r0, r5
}
   143b6:	b003      	add	sp, #12
   143b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   143bc:	f7fa bfb8 	b.w	f330 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   143c0:	4a6a      	ldr	r2, [pc, #424]	; (1456c <ull_conn_tx_ack+0x21c>)
   143c2:	496d      	ldr	r1, [pc, #436]	; (14578 <ull_conn_tx_ack+0x228>)
   143c4:	486b      	ldr	r0, [pc, #428]	; (14574 <ull_conn_tx_ack+0x224>)
   143c6:	f240 6315 	movw	r3, #1557	; 0x615
   143ca:	f00e fcf0 	bl	22dae <printk>
   143ce:	4040      	eors	r0, r0
   143d0:	f380 8811 	msr	BASEPRI, r0
   143d4:	f04f 0003 	mov.w	r0, #3
   143d8:	df02      	svc	2
   143da:	e7c0      	b.n	1435e <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   143dc:	462a      	mov	r2, r5
   143de:	4867      	ldr	r0, [pc, #412]	; (1457c <ull_conn_tx_ack+0x22c>)
   143e0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   143e4:	f7f7 f892 	bl	b50c <mem_get>
   143e8:	79e2      	ldrb	r2, [r4, #7]
   143ea:	3a02      	subs	r2, #2
   143ec:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   143ee:	2a15      	cmp	r2, #21
   143f0:	d8cc      	bhi.n	1438c <ull_conn_tx_ack+0x3c>
   143f2:	a101      	add	r1, pc, #4	; (adr r1, 143f8 <ull_conn_tx_ack+0xa8>)
   143f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   143f8:	000144c9 	.word	0x000144c9
   143fc:	0001438d 	.word	0x0001438d
   14400:	00014451 	.word	0x00014451
   14404:	0001438d 	.word	0x0001438d
   14408:	0001438d 	.word	0x0001438d
   1440c:	0001438d 	.word	0x0001438d
   14410:	0001438d 	.word	0x0001438d
   14414:	0001438d 	.word	0x0001438d
   14418:	0001438d 	.word	0x0001438d
   1441c:	00014451 	.word	0x00014451
   14420:	0001438d 	.word	0x0001438d
   14424:	000144b5 	.word	0x000144b5
   14428:	0001438d 	.word	0x0001438d
   1442c:	0001438d 	.word	0x0001438d
   14430:	0001438d 	.word	0x0001438d
   14434:	000144ad 	.word	0x000144ad
   14438:	0001438d 	.word	0x0001438d
   1443c:	0001438d 	.word	0x0001438d
   14440:	00014525 	.word	0x00014525
   14444:	000144d7 	.word	0x000144d7
   14448:	0001445f 	.word	0x0001445f
   1444c:	0001446d 	.word	0x0001446d
			conn->llcp_enc.pause_tx = 1U;
   14450:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
   14454:	f042 0202 	orr.w	r2, r2, #2
   14458:	f880 215e 	strb.w	r2, [r0, #350]	; 0x15e
		break;
   1445c:	e796      	b.n	1438c <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1445e:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   14462:	2102      	movs	r1, #2
   14464:	f361 0201 	bfi	r2, r1, #0, #2
   14468:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
		if (conn->lll.role) {
   1446c:	f993 203d 	ldrsb.w	r2, [r3, #61]	; 0x3d
   14470:	2a00      	cmp	r2, #0
   14472:	da14      	bge.n	1449e <ull_conn_tx_ack+0x14e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14474:	4942      	ldr	r1, [pc, #264]	; (14580 <ull_conn_tx_ack+0x230>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   14476:	f893 7064 	ldrb.w	r7, [r3, #100]	; 0x64
   1447a:	f893 21b6 	ldrb.w	r2, [r3, #438]	; 0x1b6
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1447e:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   14480:	ea47 0292 	orr.w	r2, r7, r2, lsr #2
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14484:	f10d 0c08 	add.w	ip, sp, #8
   14488:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   1448c:	f002 0207 	and.w	r2, r2, #7
   14490:	4462      	add	r2, ip
   14492:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   14496:	f362 1706 	bfi	r7, r2, #4, #3
   1449a:	f883 7064 	strb.w	r7, [r3, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1449e:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
   144a2:	f36f 0200 	bfc	r2, #0, #1
   144a6:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
		break;
   144aa:	e76f      	b.n	1438c <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   144ac:	7a22      	ldrb	r2, [r4, #8]
   144ae:	2a03      	cmp	r2, #3
   144b0:	f47f af6c 	bne.w	1438c <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   144b4:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   144b8:	2100      	movs	r1, #0
		conn->llcp_enc.pause_rx = 0U;
   144ba:	f022 0203 	bic.w	r2, r2, #3
   144be:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   144c2:	f8a3 10cc 	strh.w	r1, [r3, #204]	; 0xcc
		break;
   144c6:	e761      	b.n	1438c <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   144c8:	7a21      	ldrb	r1, [r4, #8]
   144ca:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   144cc:	bf08      	it	eq
   144ce:	2116      	moveq	r1, #22
   144d0:	f7ff fbd2 	bl	13c78 <conn_cleanup>
	break;
   144d4:	e75a      	b.n	1438c <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   144d6:	f890 01a4 	ldrb.w	r0, [r0, #420]	; 0x1a4
   144da:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
   144de:	4282      	cmp	r2, r0
   144e0:	f43f af54 	beq.w	1438c <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   144e4:	f893 11a6 	ldrb.w	r1, [r3, #422]	; 0x1a6
   144e8:	f001 0207 	and.w	r2, r1, #7
   144ec:	2a03      	cmp	r2, #3
   144ee:	d005      	beq.n	144fc <ull_conn_tx_ack+0x1ac>
   144f0:	3203      	adds	r2, #3
   144f2:	f002 0207 	and.w	r2, r2, #7
   144f6:	2a01      	cmp	r2, #1
   144f8:	f63f af48 	bhi.w	1438c <ull_conn_tx_ack+0x3c>
				conn->lll.max_tx_octets =
   144fc:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
   14500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   14504:	f001 0207 	and.w	r2, r1, #7
				conn->lll.max_tx_time =
   14508:	f8b3 71ae 	ldrh.w	r7, [r3, #430]	; 0x1ae
   1450c:	f8a3 7060 	strh.w	r7, [r3, #96]	; 0x60
				if (conn->llcp_length.state ==
   14510:	2a05      	cmp	r2, #5
   14512:	d016      	beq.n	14542 <ull_conn_tx_ack+0x1f2>
				if (!conn->llcp_length.cache.tx_octets) {
   14514:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
   14518:	b9ca      	cbnz	r2, 1454e <ull_conn_tx_ack+0x1fe>
					conn->llcp_length.ack =
   1451a:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
					conn->procedure_expire = 0U;
   1451e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					break;
   14522:	e733      	b.n	1438c <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   14524:	f890 21a6 	ldrb.w	r2, [r0, #422]	; 0x1a6
   14528:	2102      	movs	r1, #2
   1452a:	f361 0202 	bfi	r2, r1, #0, #3
   1452e:	f880 21a6 	strb.w	r2, [r0, #422]	; 0x1a6
		break;
   14532:	e72b      	b.n	1438c <ull_conn_tx_ack+0x3c>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14534:	4913      	ldr	r1, [pc, #76]	; (14584 <ull_conn_tx_ack+0x234>)
   14536:	4620      	mov	r0, r4
}
   14538:	b003      	add	sp, #12
   1453a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1453e:	f7f6 bfcb 	b.w	b4d8 <mem_release>
					conn->llcp_length.state =
   14542:	2204      	movs	r2, #4
   14544:	f362 0102 	bfi	r1, r2, #0, #3
   14548:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
					break;
   1454c:	e71e      	b.n	1438c <ull_conn_tx_ack+0x3c>
				conn->llcp_length.cache.tx_octets = 0;
   1454e:	2000      	movs	r0, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14550:	f360 0102 	bfi	r1, r0, #0, #3
				conn->llcp_length.tx_octets =
   14554:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
				conn->llcp_length.tx_time =
   14558:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1455c:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
				conn->llcp_length.cache.tx_octets = 0;
   14560:	f8a3 01b0 	strh.w	r0, [r3, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   14564:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
				break;
   14568:	e710      	b.n	1438c <ull_conn_tx_ack+0x3c>
   1456a:	bf00      	nop
   1456c:	0002ca9c 	.word	0x0002ca9c
   14570:	0002cc98 	.word	0x0002cc98
   14574:	0002c5e0 	.word	0x0002c5e0
   14578:	0002cc8c 	.word	0x0002cc8c
   1457c:	20003328 	.word	0x20003328
   14580:	0002cca4 	.word	0x0002cca4
   14584:	20003580 	.word	0x20003580

00014588 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   14588:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   1458c:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   14590:	f3c2 1202 	ubfx	r2, r2, #4, #3
   14594:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   14596:	bf14      	ite	ne
   14598:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1459a:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1459c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   145a0:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   145a4:	bf14      	ite	ne
   145a6:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   145a8:	3b0b      	subeq	r3, #11
   145aa:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   145ac:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   145ae:	bf44      	itt	mi
   145b0:	3b04      	submi	r3, #4
   145b2:	b29b      	uxthmi	r3, r3
}
   145b4:	4298      	cmp	r0, r3
   145b6:	bf28      	it	cs
   145b8:	4618      	movcs	r0, r3
   145ba:	4770      	bx	lr

000145bc <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   145bc:	b510      	push	{r4, lr}
   145be:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   145c0:	b930      	cbnz	r0, 145d0 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   145c2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   145c6:	f36f 0341 	bfc	r3, #1, #1
   145ca:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   145ce:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   145d0:	4a09      	ldr	r2, [pc, #36]	; (145f8 <ticker_update_latency_cancel_op_cb+0x3c>)
   145d2:	490a      	ldr	r1, [pc, #40]	; (145fc <ticker_update_latency_cancel_op_cb+0x40>)
   145d4:	480a      	ldr	r0, [pc, #40]	; (14600 <ticker_update_latency_cancel_op_cb+0x44>)
   145d6:	f240 230d 	movw	r3, #525	; 0x20d
   145da:	f00e fbe8 	bl	22dae <printk>
   145de:	4040      	eors	r0, r0
   145e0:	f380 8811 	msr	BASEPRI, r0
   145e4:	f04f 0003 	mov.w	r0, #3
   145e8:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   145ea:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   145ee:	f36f 0341 	bfc	r3, #1, #1
   145f2:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   145f6:	bd10      	pop	{r4, pc}
   145f8:	0002ccc4 	.word	0x0002ccc4
   145fc:	0002cd08 	.word	0x0002cd08
   14600:	0002c5e0 	.word	0x0002c5e0

00014604 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14604:	b900      	cbnz	r0, 14608 <ticker_op_cb+0x4>
   14606:	4770      	bx	lr
{
   14608:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1460a:	4a07      	ldr	r2, [pc, #28]	; (14628 <ticker_op_cb+0x24>)
   1460c:	4907      	ldr	r1, [pc, #28]	; (1462c <ticker_op_cb+0x28>)
   1460e:	4808      	ldr	r0, [pc, #32]	; (14630 <ticker_op_cb+0x2c>)
   14610:	f240 2305 	movw	r3, #517	; 0x205
   14614:	f00e fbcb 	bl	22dae <printk>
   14618:	4040      	eors	r0, r0
   1461a:	f380 8811 	msr	BASEPRI, r0
   1461e:	f04f 0003 	mov.w	r0, #3
   14622:	df02      	svc	2
}
   14624:	bd08      	pop	{r3, pc}
   14626:	bf00      	nop
   14628:	0002ccc4 	.word	0x0002ccc4
   1462c:	0002cafc 	.word	0x0002cafc
   14630:	0002c5e0 	.word	0x0002c5e0

00014634 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   14634:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14636:	4a07      	ldr	r2, [pc, #28]	; (14654 <ticker_op_stop_adv_cb.part.0+0x20>)
   14638:	4907      	ldr	r1, [pc, #28]	; (14658 <ticker_op_stop_adv_cb.part.0+0x24>)
   1463a:	4808      	ldr	r0, [pc, #32]	; (1465c <ticker_op_stop_adv_cb.part.0+0x28>)
   1463c:	f240 13fd 	movw	r3, #509	; 0x1fd
   14640:	f00e fbb5 	bl	22dae <printk>
   14644:	4040      	eors	r0, r0
   14646:	f380 8811 	msr	BASEPRI, r0
   1464a:	f04f 0003 	mov.w	r0, #3
   1464e:	df02      	svc	2
}
   14650:	bd08      	pop	{r3, pc}
   14652:	bf00      	nop
   14654:	0002ccc4 	.word	0x0002ccc4
   14658:	0002cd1c 	.word	0x0002cd1c
   1465c:	0002c5e0 	.word	0x0002c5e0

00014660 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14660:	2801      	cmp	r0, #1
   14662:	d000      	beq.n	14666 <ticker_op_stop_adv_cb+0x6>
   14664:	4770      	bx	lr
{
   14666:	b510      	push	{r4, lr}
   14668:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1466a:	f7fa fed1 	bl	f410 <ull_disable_mark_get>
   1466e:	4284      	cmp	r4, r0
   14670:	d003      	beq.n	1467a <ticker_op_stop_adv_cb+0x1a>
}
   14672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14676:	f7ff bfdd 	b.w	14634 <ticker_op_stop_adv_cb.part.0>
   1467a:	bd10      	pop	{r4, pc}

0001467c <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1467c:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   14680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14682:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14684:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14688:	459c      	cmp	ip, r3
   1468a:	d02a      	beq.n	146e2 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1468c:	4605      	mov	r5, r0
   1468e:	460f      	mov	r7, r1
   14690:	4601      	mov	r1, r0
   14692:	4620      	mov	r0, r4
   14694:	4616      	mov	r6, r2
   14696:	f7fd fffd 	bl	12694 <ull_conn_llcp>
		if (ret) {
   1469a:	bb10      	cbnz	r0, 146e2 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   1469c:	7c23      	ldrb	r3, [r4, #16]
   1469e:	3301      	adds	r3, #1
   146a0:	b2db      	uxtb	r3, r3
   146a2:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   146a4:	b363      	cbz	r3, 14700 <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   146a6:	f8df c088 	ldr.w	ip, [pc, #136]	; 14730 <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   146aa:	4b1c      	ldr	r3, [pc, #112]	; (1471c <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   146ac:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   146b0:	2200      	movs	r2, #0
	p.param = &conn->lll;
   146b2:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   146b6:	4611      	mov	r1, r2
   146b8:	2001      	movs	r0, #1
	mfy.param = &p;
   146ba:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   146be:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   146c2:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   146c6:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   146ca:	f7f6 ffc5 	bl	b658 <mayfly_enqueue>
	LL_ASSERT(!err);
   146ce:	b948      	cbnz	r0, 146e4 <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   146d0:	20ff      	movs	r0, #255	; 0xff
   146d2:	f7ff fa81 	bl	13bd8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   146d6:	4620      	mov	r0, r4
   146d8:	21ff      	movs	r1, #255	; 0xff
}
   146da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   146de:	f7ff bcdb 	b.w	14098 <ull_conn_tx_lll_enqueue>
}
   146e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   146e4:	4a0e      	ldr	r2, [pc, #56]	; (14720 <ull_slave_ticker_cb+0xa4>)
   146e6:	490f      	ldr	r1, [pc, #60]	; (14724 <ull_slave_ticker_cb+0xa8>)
   146e8:	480f      	ldr	r0, [pc, #60]	; (14728 <ull_slave_ticker_cb+0xac>)
   146ea:	f240 13c1 	movw	r3, #449	; 0x1c1
   146ee:	f00e fb5e 	bl	22dae <printk>
   146f2:	4040      	eors	r0, r0
   146f4:	f380 8811 	msr	BASEPRI, r0
   146f8:	f04f 0003 	mov.w	r0, #3
   146fc:	df02      	svc	2
   146fe:	e7e7      	b.n	146d0 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   14700:	4a07      	ldr	r2, [pc, #28]	; (14720 <ull_slave_ticker_cb+0xa4>)
   14702:	490a      	ldr	r1, [pc, #40]	; (1472c <ull_slave_ticker_cb+0xb0>)
   14704:	4808      	ldr	r0, [pc, #32]	; (14728 <ull_slave_ticker_cb+0xac>)
   14706:	f240 13b5 	movw	r3, #437	; 0x1b5
   1470a:	f00e fb50 	bl	22dae <printk>
   1470e:	4040      	eors	r0, r0
   14710:	f380 8811 	msr	BASEPRI, r0
   14714:	f04f 0003 	mov.w	r0, #3
   14718:	df02      	svc	2
   1471a:	e7c4      	b.n	146a6 <ull_slave_ticker_cb+0x2a>
   1471c:	20000678 	.word	0x20000678
   14720:	0002ccc4 	.word	0x0002ccc4
   14724:	0002c860 	.word	0x0002c860
   14728:	0002c5e0 	.word	0x0002c5e0
   1472c:	0002c9d0 	.word	0x0002c9d0
   14730:	20003648 	.word	0x20003648

00014734 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   14734:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   14736:	b123      	cbz	r3, 14742 <ull_slave_latency_cancel+0xe>
   14738:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   1473c:	f012 0302 	ands.w	r3, r2, #2
   14740:	d000      	beq.n	14744 <ull_slave_latency_cancel+0x10>
   14742:	4770      	bx	lr
{
   14744:	b530      	push	{r4, r5, lr}
   14746:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   14748:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   1474c:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1474e:	4d11      	ldr	r5, [pc, #68]	; (14794 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   14750:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   14754:	2401      	movs	r4, #1
   14756:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1475a:	b2ca      	uxtb	r2, r1
   1475c:	9006      	str	r0, [sp, #24]
   1475e:	9304      	str	r3, [sp, #16]
   14760:	9300      	str	r3, [sp, #0]
   14762:	4618      	mov	r0, r3
   14764:	9505      	str	r5, [sp, #20]
   14766:	9403      	str	r4, [sp, #12]
   14768:	2103      	movs	r1, #3
   1476a:	f7f8 fa3b 	bl	cbe4 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1476e:	f030 0302 	bics.w	r3, r0, #2
   14772:	d00c      	beq.n	1478e <ull_slave_latency_cancel+0x5a>
   14774:	4a08      	ldr	r2, [pc, #32]	; (14798 <ull_slave_latency_cancel+0x64>)
   14776:	4909      	ldr	r1, [pc, #36]	; (1479c <ull_slave_latency_cancel+0x68>)
   14778:	4809      	ldr	r0, [pc, #36]	; (147a0 <ull_slave_latency_cancel+0x6c>)
   1477a:	f240 1387 	movw	r3, #391	; 0x187
   1477e:	f00e fb16 	bl	22dae <printk>
   14782:	4040      	eors	r0, r0
   14784:	f380 8811 	msr	BASEPRI, r0
   14788:	f04f 0003 	mov.w	r0, #3
   1478c:	df02      	svc	2
}
   1478e:	b009      	add	sp, #36	; 0x24
   14790:	bd30      	pop	{r4, r5, pc}
   14792:	bf00      	nop
   14794:	000145bd 	.word	0x000145bd
   14798:	0002ccc4 	.word	0x0002ccc4
   1479c:	0002cb7c 	.word	0x0002cb7c
   147a0:	0002c5e0 	.word	0x0002c5e0

000147a4 <ll_start_enc_req_send>:
{
   147a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   147a6:	460d      	mov	r5, r1
   147a8:	4614      	mov	r4, r2
	conn = ll_connected_get(handle);
   147aa:	f7fc f8f1 	bl	10990 <ll_connected_get>
	if (!conn) {
   147ae:	2800      	cmp	r0, #0
   147b0:	d046      	beq.n	14840 <ll_start_enc_req_send+0x9c>
	if (error_code) {
   147b2:	4603      	mov	r3, r0
   147b4:	b9ed      	cbnz	r5, 147f2 <ll_start_enc_req_send+0x4e>
		if ((conn->llcp_req == conn->llcp_ack) ||
   147b6:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   147ba:	f890 20e9 	ldrb.w	r2, [r0, #233]	; 0xe9
   147be:	4291      	cmp	r1, r2
   147c0:	d035      	beq.n	1482e <ll_start_enc_req_send+0x8a>
   147c2:	f890 20ea 	ldrb.w	r2, [r0, #234]	; 0xea
   147c6:	2a03      	cmp	r2, #3
   147c8:	d131      	bne.n	1482e <ll_start_enc_req_send+0x8a>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   147ca:	f8b0 20f8 	ldrh.w	r2, [r0, #248]	; 0xf8
   147ce:	6827      	ldr	r7, [r4, #0]
   147d0:	68e0      	ldr	r0, [r4, #12]
   147d2:	6866      	ldr	r6, [r4, #4]
   147d4:	68a1      	ldr	r1, [r4, #8]
   147d6:	f8c3 1171 	str.w	r1, [r3, #369]	; 0x171
   147da:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   147de:	f8c3 0175 	str.w	r0, [r3, #373]	; 0x175
   147e2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
   147e6:	f8c3 7169 	str.w	r7, [r3, #361]	; 0x169
   147ea:	f8c3 616d 	str.w	r6, [r3, #365]	; 0x16d
	return 0;
   147ee:	4628      	mov	r0, r5
}
   147f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_enc.refresh == 0U) {
   147f2:	f890 015e 	ldrb.w	r0, [r0, #350]	; 0x15e
   147f6:	f010 0004 	ands.w	r0, r0, #4
   147fa:	d112      	bne.n	14822 <ll_start_enc_req_send+0x7e>
			if ((conn->llcp_req == conn->llcp_ack) ||
   147fc:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
   14800:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
   14804:	4291      	cmp	r1, r2
   14806:	d012      	beq.n	1482e <ll_start_enc_req_send+0x8a>
   14808:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   1480c:	2a03      	cmp	r2, #3
   1480e:	d10e      	bne.n	1482e <ll_start_enc_req_send+0x8a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14810:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			conn->llcp.encryption.error_code = error_code;
   14814:	f883 50f9 	strb.w	r5, [r3, #249]	; 0xf9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14818:	f360 0201 	bfi	r2, r0, #0, #2
   1481c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
}
   14820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			    conn->llcp_terminate.req) {
   14822:	f893 1138 	ldrb.w	r1, [r3, #312]	; 0x138
			if (conn->llcp_terminate.ack !=
   14826:	f893 2139 	ldrb.w	r2, [r3, #313]	; 0x139
   1482a:	428a      	cmp	r2, r1
   1482c:	d001      	beq.n	14832 <ll_start_enc_req_send+0x8e>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1482e:	200c      	movs	r0, #12
}
   14830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			conn->llcp_terminate.req++;
   14832:	3201      	adds	r2, #1
   14834:	f883 2138 	strb.w	r2, [r3, #312]	; 0x138
			conn->llcp_terminate.reason_own = error_code;
   14838:	f883 513a 	strb.w	r5, [r3, #314]	; 0x13a
	return 0;
   1483c:	2000      	movs	r0, #0
}
   1483e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14840:	2002      	movs	r0, #2
}
   14842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014844 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   14844:	b470      	push	{r4, r5, r6}
   14846:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   14848:	7800      	ldrb	r0, [r0, #0]
   1484a:	4c1b      	ldr	r4, [pc, #108]	; (148b8 <lll_chan_sel_1+0x74>)
   1484c:	fb02 1101 	mla	r1, r2, r1, r1
   14850:	180a      	adds	r2, r1, r0
   14852:	fb84 0102 	smull	r0, r1, r4, r2
   14856:	4411      	add	r1, r2
   14858:	1149      	asrs	r1, r1, #5
   1485a:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   1485e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   14862:	1a51      	subs	r1, r2, r1
   14864:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   14866:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   14868:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1486a:	5c9c      	ldrb	r4, [r3, r2]
{
   1486c:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   14870:	f001 0107 	and.w	r1, r1, #7
   14874:	410c      	asrs	r4, r1
   14876:	f014 0401 	ands.w	r4, r4, #1
   1487a:	d11b      	bne.n	148b4 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1487c:	fbb0 f2f5 	udiv	r2, r0, r5
   14880:	fb05 0212 	mls	r2, r5, r2, r0
   14884:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   14886:	1e5d      	subs	r5, r3, #1
   14888:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1488a:	f104 0108 	add.w	r1, r4, #8
   1488e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   14892:	4620      	mov	r0, r4
   14894:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   14896:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1489a:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1489e:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   148a2:	d002      	beq.n	148aa <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   148a4:	b132      	cbz	r2, 148b4 <lll_chan_sel_1+0x70>
				chan_index--;
   148a6:	3a01      	subs	r2, #1
   148a8:	b2d2      	uxtb	r2, r2
			chan_next++;
   148aa:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   148ac:	4284      	cmp	r4, r0
   148ae:	d1f2      	bne.n	14896 <lll_chan_sel_1+0x52>
	while (byte_count--) {
   148b0:	42b5      	cmp	r5, r6
   148b2:	d1ea      	bne.n	1488a <lll_chan_sel_1+0x46>
}
   148b4:	bc70      	pop	{r4, r5, r6}
   148b6:	4770      	bx	lr
   148b8:	dd67c8a7 	.word	0xdd67c8a7

000148bc <lll_chan_sel_2>:
{
   148bc:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   148be:	4f2f      	ldr	r7, [pc, #188]	; (1497c <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   148c0:	4e2f      	ldr	r6, [pc, #188]	; (14980 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   148c2:	ea80 0501 	eor.w	r5, r0, r1
   148c6:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   148c8:	0a28      	lsrs	r0, r5, #8
   148ca:	b2ed      	uxtb	r5, r5
   148cc:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   148d0:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   148d4:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   148d8:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   148dc:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   148e0:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   148e4:	ea4c 0c0e 	orr.w	ip, ip, lr
   148e8:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   148ea:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   148ee:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   148f2:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   148f6:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   148fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   148fe:	f3c0 4007 	ubfx	r0, r0, #16, #8
   14902:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   14906:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   1490a:	3c01      	subs	r4, #1
   1490c:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   1490e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   14912:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   14914:	d1d8      	bne.n	148c8 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   14916:	481b      	ldr	r0, [pc, #108]	; (14984 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   14918:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   1491a:	fba0 5001 	umull	r5, r0, r0, r1
   1491e:	1a0d      	subs	r5, r1, r0
   14920:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   14924:	0940      	lsrs	r0, r0, #5
   14926:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   1492a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1492e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   14930:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   14934:	f000 0607 	and.w	r6, r0, #7
   14938:	5d55      	ldrb	r5, [r2, r5]
   1493a:	4135      	asrs	r5, r6
   1493c:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   1493e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   14940:	d41a      	bmi.n	14978 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   14942:	fb01 f303 	mul.w	r3, r1, r3
   14946:	1e56      	subs	r6, r2, #1
   14948:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1494c:	3204      	adds	r2, #4
		bite = *chan_map;
   1494e:	f104 0508 	add.w	r5, r4, #8
   14952:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   14956:	4620      	mov	r0, r4
   14958:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1495a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1495e:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   14962:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   14966:	d002      	beq.n	1496e <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   14968:	b133      	cbz	r3, 14978 <lll_chan_sel_2+0xbc>
				chan_index--;
   1496a:	3b01      	subs	r3, #1
   1496c:	b2db      	uxtb	r3, r3
			chan_next++;
   1496e:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   14970:	42a0      	cmp	r0, r4
   14972:	d1f2      	bne.n	1495a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   14974:	42b2      	cmp	r2, r6
   14976:	d1ea      	bne.n	1494e <lll_chan_sel_2+0x92>
}
   14978:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1497a:	bf00      	nop
   1497c:	00022110 	.word	0x00022110
   14980:	00088440 	.word	0x00088440
   14984:	bacf914d 	.word	0xbacf914d

00014988 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   14988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1498c:	4688      	mov	r8, r1
	int i;

	if (free) {
   1498e:	4615      	mov	r5, r2
   14990:	b10a      	cbz	r2, 14996 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   14992:	23ff      	movs	r3, #255	; 0xff
   14994:	7013      	strb	r3, [r2, #0]
   14996:	4e17      	ldr	r6, [pc, #92]	; (149f4 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   14998:	f000 0701 	and.w	r7, r0, #1
   1499c:	f106 0902 	add.w	r9, r6, #2
{
   149a0:	2400      	movs	r4, #0
   149a2:	e004      	b.n	149ae <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   149a4:	42ba      	cmp	r2, r7
   149a6:	d014      	beq.n	149d2 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   149a8:	3401      	adds	r4, #1
   149aa:	2c08      	cmp	r4, #8
   149ac:	d00e      	beq.n	149cc <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   149ae:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   149b2:	07d9      	lsls	r1, r3, #31
   149b4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   149b8:	d4f4      	bmi.n	149a4 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   149ba:	2d00      	cmp	r5, #0
   149bc:	d0f4      	beq.n	149a8 <wl_find+0x20>
   149be:	782b      	ldrb	r3, [r5, #0]
   149c0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   149c2:	bf08      	it	eq
   149c4:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   149c6:	3401      	adds	r4, #1
   149c8:	2c08      	cmp	r4, #8
   149ca:	d1f0      	bne.n	149ae <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   149cc:	20ff      	movs	r0, #255	; 0xff
}
   149ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   149d2:	2206      	movs	r2, #6
   149d4:	4641      	mov	r1, r8
   149d6:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   149da:	f016 feb0 	bl	2b73e <memcmp>
   149de:	b130      	cbz	r0, 149ee <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   149e0:	2d00      	cmp	r5, #0
   149e2:	d0e1      	beq.n	149a8 <wl_find+0x20>
   149e4:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   149e8:	07db      	lsls	r3, r3, #31
   149ea:	d4dd      	bmi.n	149a8 <wl_find+0x20>
   149ec:	e7e7      	b.n	149be <wl_find+0x36>
			return i;
   149ee:	b2e0      	uxtb	r0, r4
   149f0:	e7ed      	b.n	149ce <wl_find+0x46>
   149f2:	bf00      	nop
   149f4:	20003888 	.word	0x20003888

000149f8 <filter_insert>:
}
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
   149f8:	b430      	push	{r4, r5}
	filter->enable_bitmask |= BIT(index);
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   149fa:	7845      	ldrb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   149fc:	7804      	ldrb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   149fe:	408a      	lsls	r2, r1
   14a00:	4315      	orrs	r5, r2
	filter->enable_bitmask |= BIT(index);
   14a02:	2201      	movs	r2, #1
   14a04:	408a      	lsls	r2, r1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14a06:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	filter->enable_bitmask |= BIT(index);
   14a0a:	4314      	orrs	r4, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14a0c:	0049      	lsls	r1, r1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   14a0e:	7045      	strb	r5, [r0, #1]
	filter->enable_bitmask |= BIT(index);
   14a10:	7004      	strb	r4, [r0, #0]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   14a12:	3102      	adds	r1, #2
   14a14:	681a      	ldr	r2, [r3, #0]
   14a16:	5042      	str	r2, [r0, r1]
   14a18:	4401      	add	r1, r0
   14a1a:	889b      	ldrh	r3, [r3, #4]
   14a1c:	808b      	strh	r3, [r1, #4]
}
   14a1e:	bc30      	pop	{r4, r5}
   14a20:	4770      	bx	lr
   14a22:	bf00      	nop

00014a24 <wl_update>:
{
   14a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   14a28:	4d16      	ldr	r5, [pc, #88]	; (14a84 <wl_update+0x60>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14a2a:	f8df 8060 	ldr.w	r8, [pc, #96]	; 14a8c <wl_update+0x68>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14a2e:	4f16      	ldr	r7, [pc, #88]	; (14a88 <wl_update+0x64>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14a30:	f8df 905c 	ldr.w	r9, [pc, #92]	; 14a90 <wl_update+0x6c>
   14a34:	1eae      	subs	r6, r5, #2
{
   14a36:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   14a38:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   14a3c:	f013 0f01 	tst.w	r3, #1
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14a40:	4621      	mov	r1, r4
   14a42:	462b      	mov	r3, r5
   14a44:	4638      	mov	r0, r7
		if (!wl[i].taken) {
   14a46:	d015      	beq.n	14a74 <wl_update+0x50>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14a48:	f898 2000 	ldrb.w	r2, [r8]
   14a4c:	b162      	cbz	r2, 14a68 <wl_update+0x44>
		j = wl[i].rl_idx;
   14a4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   14a52:	2a07      	cmp	r2, #7
   14a54:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   14a58:	d806      	bhi.n	14a68 <wl_update+0x44>
   14a5a:	f819 203c 	ldrb.w	r2, [r9, ip, lsl #3]
   14a5e:	f012 0f04 	tst.w	r2, #4
   14a62:	d001      	beq.n	14a68 <wl_update+0x44>
   14a64:	06d2      	lsls	r2, r2, #27
   14a66:	d505      	bpl.n	14a74 <wl_update+0x50>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   14a68:	f816 2034 	ldrb.w	r2, [r6, r4, lsl #3]
   14a6c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14a70:	f7ff ffc2 	bl	149f8 <filter_insert>
	for (i = 0U; i < WL_SIZE; i++) {
   14a74:	3401      	adds	r4, #1
   14a76:	2c08      	cmp	r4, #8
   14a78:	f105 0508 	add.w	r5, r5, #8
   14a7c:	d1dc      	bne.n	14a38 <wl_update+0x14>
}
   14a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14a82:	bf00      	nop
   14a84:	2000388a 	.word	0x2000388a
   14a88:	200038c8 	.word	0x200038c8
   14a8c:	20008602 	.word	0x20008602
   14a90:	20003710 	.word	0x20003710

00014a94 <rl_update>:
{
   14a94:	b570      	push	{r4, r5, r6, lr}
   14a96:	4d0c      	ldr	r5, [pc, #48]	; (14ac8 <rl_update+0x34>)
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   14a98:	480c      	ldr	r0, [pc, #48]	; (14acc <rl_update+0x38>)
   14a9a:	1c6e      	adds	r6, r5, #1
{
   14a9c:	2400      	movs	r4, #0
   14a9e:	e002      	b.n	14aa6 <rl_update+0x12>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14aa0:	3401      	adds	r4, #1
   14aa2:	2c08      	cmp	r4, #8
   14aa4:	d00f      	beq.n	14ac6 <rl_update+0x32>
		if (rl[i].taken) {
   14aa6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   14aaa:	00d3      	lsls	r3, r2, #3
   14aac:	f815 2032 	ldrb.w	r2, [r5, r2, lsl #3]
   14ab0:	07d1      	lsls	r1, r2, #31
   14ab2:	d5f5      	bpl.n	14aa0 <rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   14ab4:	4621      	mov	r1, r4
   14ab6:	4433      	add	r3, r6
   14ab8:	f3c2 1280 	ubfx	r2, r2, #6, #1
   14abc:	3401      	adds	r4, #1
   14abe:	f7ff ff9b 	bl	149f8 <filter_insert>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14ac2:	2c08      	cmp	r4, #8
   14ac4:	d1ef      	bne.n	14aa6 <rl_update+0x12>
}
   14ac6:	bd70      	pop	{r4, r5, r6, pc}
   14ac8:	20003710 	.word	0x20003710
   14acc:	20003850 	.word	0x20003850

00014ad0 <ll_wl_size_get>:
}
   14ad0:	2008      	movs	r0, #8
   14ad2:	4770      	bx	lr

00014ad4 <ll_wl_clear>:
{
   14ad4:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   14ad6:	2000      	movs	r0, #0
   14ad8:	f7fb f9a0 	bl	fe1c <ull_adv_filter_pol_get>
   14adc:	b9d8      	cbnz	r0, 14b16 <ll_wl_clear+0x42>
   14ade:	4a0f      	ldr	r2, [pc, #60]	; (14b1c <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   14ae0:	4c0f      	ldr	r4, [pc, #60]	; (14b20 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   14ae2:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   14ae6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   14ae8:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   14aea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   14aee:	d805      	bhi.n	14afc <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   14af0:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   14af4:	f36f 1345 	bfc	r3, #5, #1
   14af8:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   14afc:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   14b00:	f36f 0300 	bfc	r3, #0, #1
   14b04:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   14b08:	3001      	adds	r0, #1
   14b0a:	2808      	cmp	r0, #8
   14b0c:	d1e9      	bne.n	14ae2 <ll_wl_clear+0xe>
	wl_anon = 0U;
   14b0e:	4b05      	ldr	r3, [pc, #20]	; (14b24 <ll_wl_clear+0x50>)
   14b10:	2000      	movs	r0, #0
   14b12:	7018      	strb	r0, [r3, #0]
}
   14b14:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14b16:	200c      	movs	r0, #12
}
   14b18:	bd10      	pop	{r4, pc}
   14b1a:	bf00      	nop
   14b1c:	20003888 	.word	0x20003888
   14b20:	20003710 	.word	0x20003710
   14b24:	20008603 	.word	0x20008603

00014b28 <ll_wl_remove>:
{
   14b28:	b538      	push	{r3, r4, r5, lr}
   14b2a:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   14b2c:	2000      	movs	r0, #0
   14b2e:	f7fb f975 	bl	fe1c <ull_adv_filter_pol_get>
   14b32:	bb30      	cbnz	r0, 14b82 <ll_wl_remove+0x5a>
   14b34:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   14b36:	7828      	ldrb	r0, [r5, #0]
   14b38:	28ff      	cmp	r0, #255	; 0xff
   14b3a:	d01e      	beq.n	14b7a <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   14b3c:	1c69      	adds	r1, r5, #1
   14b3e:	4622      	mov	r2, r4
   14b40:	f7ff ff22 	bl	14988 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   14b44:	2807      	cmp	r0, #7
   14b46:	d901      	bls.n	14b4c <ll_wl_remove+0x24>
   14b48:	2002      	movs	r0, #2
}
   14b4a:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   14b4c:	4a0e      	ldr	r2, [pc, #56]	; (14b88 <ll_wl_remove+0x60>)
   14b4e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   14b52:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   14b54:	2b07      	cmp	r3, #7
   14b56:	d808      	bhi.n	14b6a <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   14b58:	490c      	ldr	r1, [pc, #48]	; (14b8c <ll_wl_remove+0x64>)
   14b5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   14b5e:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   14b62:	f364 1545 	bfi	r5, r4, #5, #1
   14b66:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   14b6a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   14b6e:	f36f 0300 	bfc	r3, #0, #1
   14b72:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   14b76:	2000      	movs	r0, #0
}
   14b78:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   14b7a:	4b05      	ldr	r3, [pc, #20]	; (14b90 <ll_wl_remove+0x68>)
   14b7c:	701c      	strb	r4, [r3, #0]
		return 0;
   14b7e:	4620      	mov	r0, r4
}
   14b80:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14b82:	200c      	movs	r0, #12
}
   14b84:	bd38      	pop	{r3, r4, r5, pc}
   14b86:	bf00      	nop
   14b88:	20003888 	.word	0x20003888
   14b8c:	20003710 	.word	0x20003710
   14b90:	20008603 	.word	0x20008603

00014b94 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14b94:	2807      	cmp	r0, #7
{
   14b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b9a:	4604      	mov	r4, r0
   14b9c:	460e      	mov	r6, r1
   14b9e:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14ba0:	d819      	bhi.n	14bd6 <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   14ba2:	4f1a      	ldr	r7, [pc, #104]	; (14c0c <ll_rl_id_addr_get+0x78>)
   14ba4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14ba8:	ea4f 0884 	mov.w	r8, r4, lsl #2
   14bac:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14bb0:	07db      	lsls	r3, r3, #31
   14bb2:	d51d      	bpl.n	14bf0 <ll_rl_id_addr_get+0x5c>
	*id_addr_type = rl[rl_idx].id_addr_type;
   14bb4:	44a0      	add	r8, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   14bb6:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   14bb8:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   14bbc:	fb00 7404 	mla	r4, r0, r4, r7
	*id_addr_type = rl[rl_idx].id_addr_type;
   14bc0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   14bc4:	7033      	strb	r3, [r6, #0]
   14bc6:	f8d4 3001 	ldr.w	r3, [r4, #1]
   14bca:	602b      	str	r3, [r5, #0]
   14bcc:	f8b4 3005 	ldrh.w	r3, [r4, #5]
   14bd0:	80ab      	strh	r3, [r5, #4]
}
   14bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   14bd6:	4a0e      	ldr	r2, [pc, #56]	; (14c10 <ll_rl_id_addr_get+0x7c>)
   14bd8:	490e      	ldr	r1, [pc, #56]	; (14c14 <ll_rl_id_addr_get+0x80>)
   14bda:	480f      	ldr	r0, [pc, #60]	; (14c18 <ll_rl_id_addr_get+0x84>)
   14bdc:	23e9      	movs	r3, #233	; 0xe9
   14bde:	f00e f8e6 	bl	22dae <printk>
   14be2:	4040      	eors	r0, r0
   14be4:	f380 8811 	msr	BASEPRI, r0
   14be8:	f04f 0003 	mov.w	r0, #3
   14bec:	df02      	svc	2
   14bee:	e7d8      	b.n	14ba2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   14bf0:	4a07      	ldr	r2, [pc, #28]	; (14c10 <ll_rl_id_addr_get+0x7c>)
   14bf2:	490a      	ldr	r1, [pc, #40]	; (14c1c <ll_rl_id_addr_get+0x88>)
   14bf4:	4808      	ldr	r0, [pc, #32]	; (14c18 <ll_rl_id_addr_get+0x84>)
   14bf6:	23ea      	movs	r3, #234	; 0xea
   14bf8:	f00e f8d9 	bl	22dae <printk>
   14bfc:	4040      	eors	r0, r0
   14bfe:	f380 8811 	msr	BASEPRI, r0
   14c02:	f04f 0003 	mov.w	r0, #3
   14c06:	df02      	svc	2
   14c08:	e7d4      	b.n	14bb4 <ll_rl_id_addr_get+0x20>
   14c0a:	bf00      	nop
   14c0c:	20003710 	.word	0x20003710
   14c10:	0002cd74 	.word	0x0002cd74
   14c14:	0002cdb8 	.word	0x0002cdb8
   14c18:	0002c5e0 	.word	0x0002c5e0
   14c1c:	0002cdc4 	.word	0x0002cdc4

00014c20 <ll_rl_size_get>:
   14c20:	2008      	movs	r0, #8
   14c22:	4770      	bx	lr

00014c24 <ll_rl_clear>:
{
   14c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   14c26:	2000      	movs	r0, #0
   14c28:	f7fb f8ec 	bl	fe04 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   14c2c:	bb98      	cbnz	r0, 14c96 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   14c2e:	4b1b      	ldr	r3, [pc, #108]	; (14c9c <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   14c30:	491b      	ldr	r1, [pc, #108]	; (14ca0 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   14c32:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   14c36:	f893 c000 	ldrb.w	ip, [r3]
   14c3a:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   14c3e:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   14c42:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   14c46:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   14c4a:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   14c4c:	f360 0200 	bfi	r2, r0, #0, #1
   14c50:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   14c54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   14c58:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   14c5c:	f360 0c00 	bfi	ip, r0, #0, #1
   14c60:	f360 0700 	bfi	r7, r0, #0, #1
   14c64:	f360 0600 	bfi	r6, r0, #0, #1
   14c68:	f360 0500 	bfi	r5, r0, #0, #1
   14c6c:	f360 0400 	bfi	r4, r0, #0, #1
   14c70:	f360 0100 	bfi	r1, r0, #0, #1
   14c74:	f360 0200 	bfi	r2, r0, #0, #1
   14c78:	f883 c000 	strb.w	ip, [r3]
   14c7c:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   14c80:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   14c84:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   14c88:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   14c8c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   14c90:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   14c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14c96:	200c      	movs	r0, #12
}
   14c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14c9a:	bf00      	nop
   14c9c:	20003710 	.word	0x20003710
   14ca0:	20008601 	.word	0x20008601

00014ca4 <ll_rl_enable>:
{
   14ca4:	b510      	push	{r4, lr}
   14ca6:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   14ca8:	2000      	movs	r0, #0
   14caa:	f7fb f8ab 	bl	fe04 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   14cae:	b958      	cbnz	r0, 14cc8 <ll_rl_enable+0x24>
	switch (enable) {
   14cb0:	b134      	cbz	r4, 14cc0 <ll_rl_enable+0x1c>
   14cb2:	2c01      	cmp	r4, #1
   14cb4:	d001      	beq.n	14cba <ll_rl_enable+0x16>
   14cb6:	2012      	movs	r0, #18
}
   14cb8:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   14cba:	4b04      	ldr	r3, [pc, #16]	; (14ccc <ll_rl_enable+0x28>)
   14cbc:	701c      	strb	r4, [r3, #0]
}
   14cbe:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   14cc0:	4b02      	ldr	r3, [pc, #8]	; (14ccc <ll_rl_enable+0x28>)
   14cc2:	701c      	strb	r4, [r3, #0]
	return 0;
   14cc4:	4620      	mov	r0, r4
}
   14cc6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   14cc8:	200c      	movs	r0, #12
}
   14cca:	bd10      	pop	{r4, pc}
   14ccc:	20008602 	.word	0x20008602

00014cd0 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   14cd0:	4a03      	ldr	r2, [pc, #12]	; (14ce0 <ll_rl_timeout_set+0x10>)
   14cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14cd6:	fb03 f300 	mul.w	r3, r3, r0
   14cda:	6013      	str	r3, [r2, #0]
}
   14cdc:	4770      	bx	lr
   14cde:	bf00      	nop
   14ce0:	20003884 	.word	0x20003884

00014ce4 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   14ce4:	b1b0      	cbz	r0, 14d14 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   14ce6:	4b0d      	ldr	r3, [pc, #52]	; (14d1c <ull_filter_adv_scan_state_cb+0x38>)
   14ce8:	681a      	ldr	r2, [r3, #0]
{
   14cea:	b510      	push	{r4, lr}
   14cec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14cf0:	f240 30e7 	movw	r0, #999	; 0x3e7
   14cf4:	2100      	movs	r1, #0
   14cf6:	fbe3 0102 	umlal	r0, r1, r3, r2
   14cfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14cfe:	2300      	movs	r3, #0
   14d00:	f7eb fa3e 	bl	180 <__aeabi_uldivmod>
}
   14d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14d08:	4602      	mov	r2, r0
   14d0a:	460b      	mov	r3, r1
   14d0c:	4804      	ldr	r0, [pc, #16]	; (14d20 <ull_filter_adv_scan_state_cb+0x3c>)
   14d0e:	4905      	ldr	r1, [pc, #20]	; (14d24 <ull_filter_adv_scan_state_cb+0x40>)
   14d10:	f00b bb14 	b.w	2033c <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   14d14:	4803      	ldr	r0, [pc, #12]	; (14d24 <ull_filter_adv_scan_state_cb+0x40>)
   14d16:	f016 bae1 	b.w	2b2dc <k_delayed_work_cancel>
   14d1a:	bf00      	nop
   14d1c:	20003884 	.word	0x20003884
   14d20:	20001438 	.word	0x20001438
   14d24:	200012f8 	.word	0x200012f8

00014d28 <ull_filter_adv_update>:
{
   14d28:	b508      	push	{r3, lr}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   14d2a:	4b09      	ldr	r3, [pc, #36]	; (14d50 <ull_filter_adv_update+0x28>)
   14d2c:	2200      	movs	r2, #0
   14d2e:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   14d30:	b930      	cbnz	r0, 14d40 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   14d32:	4b08      	ldr	r3, [pc, #32]	; (14d54 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   14d34:	4a08      	ldr	r2, [pc, #32]	; (14d58 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   14d36:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   14d38:	2100      	movs	r1, #0
   14d3a:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   14d3c:	b91b      	cbnz	r3, 14d46 <ull_filter_adv_update+0x1e>
}
   14d3e:	bd08      	pop	{r3, pc}
		wl_update();
   14d40:	f7ff fe70 	bl	14a24 <wl_update>
   14d44:	e7f5      	b.n	14d32 <ull_filter_adv_update+0xa>
}
   14d46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   14d4a:	f7ff bea3 	b.w	14a94 <rl_update>
   14d4e:	bf00      	nop
   14d50:	200038c8 	.word	0x200038c8
   14d54:	20008602 	.word	0x20008602
   14d58:	20003850 	.word	0x20003850

00014d5c <ull_filter_rpa_update>:
{
   14d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d60:	4682      	mov	sl, r0
   14d62:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   14d64:	f016 fb14 	bl	2b390 <z_impl_k_uptime_ticks>
   14d68:	0142      	lsls	r2, r0, #5
   14d6a:	014b      	lsls	r3, r1, #5
   14d6c:	ebb2 0800 	subs.w	r8, r2, r0
   14d70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   14d74:	eb63 0301 	sbc.w	r3, r3, r1
   14d78:	009b      	lsls	r3, r3, #2
   14d7a:	ea4f 0288 	mov.w	r2, r8, lsl #2
   14d7e:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   14d82:	eb12 0800 	adds.w	r8, r2, r0
   14d86:	eb43 0101 	adc.w	r1, r3, r1
   14d8a:	00c9      	lsls	r1, r1, #3
   14d8c:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   14d90:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   14d94:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   14d98:	0bc8      	lsrs	r0, r1, #15
   14d9a:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   14d9e:	9001      	str	r0, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   14da0:	f1ba 0f00 	cmp.w	sl, #0
   14da4:	d117      	bne.n	14dd6 <ull_filter_rpa_update+0x7a>
   14da6:	4b5d      	ldr	r3, [pc, #372]	; (14f1c <ull_filter_rpa_update+0x1c0>)
   14da8:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dac:	1c59      	adds	r1, r3, #1
   14dae:	bf08      	it	eq
   14db0:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   14db4:	d00f      	beq.n	14dd6 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   14db6:	495a      	ldr	r1, [pc, #360]	; (14f20 <ull_filter_rpa_update+0x1c4>)
   14db8:	6809      	ldr	r1, [r1, #0]
   14dba:	ebb8 0402 	subs.w	r4, r8, r2
   14dbe:	eb60 0503 	sbc.w	r5, r0, r3
   14dc2:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   14dc4:	428c      	cmp	r4, r1
   14dc6:	eb75 0303 	sbcs.w	r3, r5, r3
   14dca:	bfac      	ite	ge
   14dcc:	f04f 0901 	movge.w	r9, #1
   14dd0:	f04f 0900 	movlt.w	r9, #0
   14dd4:	e001      	b.n	14dda <ull_filter_rpa_update+0x7e>
   14dd6:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14dda:	4e52      	ldr	r6, [pc, #328]	; (14f24 <ull_filter_rpa_update+0x1c8>)
   14ddc:	f8df b158 	ldr.w	fp, [pc, #344]	; 14f38 <ull_filter_rpa_update+0x1dc>
   14de0:	f1a6 0717 	sub.w	r7, r6, #23
	bool all = timeout || (rpa_last_ms == -1) ||
   14de4:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   14de6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14dea:	00a5      	lsls	r5, r4, #2
   14dec:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14df0:	07da      	lsls	r2, r3, #31
   14df2:	d515      	bpl.n	14e20 <ull_filter_rpa_update+0xc4>
   14df4:	f1b9 0f00 	cmp.w	r9, #0
   14df8:	d101      	bne.n	14dfe <ull_filter_rpa_update+0xa2>
   14dfa:	0798      	lsls	r0, r3, #30
   14dfc:	d410      	bmi.n	14e20 <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   14dfe:	192b      	adds	r3, r5, r4
   14e00:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14e04:	0759      	lsls	r1, r3, #29
   14e06:	d432      	bmi.n	14e6e <ull_filter_rpa_update+0x112>
			if (rl[i].lirk) {
   14e08:	192b      	adds	r3, r5, r4
   14e0a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   14e0e:	071a      	lsls	r2, r3, #28
   14e10:	d419      	bmi.n	14e46 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   14e12:	4425      	add	r5, r4
   14e14:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   14e18:	f043 0302 	orr.w	r3, r3, #2
   14e1c:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   14e20:	3401      	adds	r4, #1
   14e22:	2c08      	cmp	r4, #8
   14e24:	f106 0628 	add.w	r6, r6, #40	; 0x28
   14e28:	d1dd      	bne.n	14de6 <ull_filter_rpa_update+0x8a>
	if (all) {
   14e2a:	f1b9 0f00 	cmp.w	r9, #0
   14e2e:	d004      	beq.n	14e3a <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   14e30:	4b3a      	ldr	r3, [pc, #232]	; (14f1c <ull_filter_rpa_update+0x1c0>)
   14e32:	9a01      	ldr	r2, [sp, #4]
   14e34:	f8c3 8000 	str.w	r8, [r3]
   14e38:	605a      	str	r2, [r3, #4]
	if (timeout) {
   14e3a:	f1ba 0f00 	cmp.w	sl, #0
   14e3e:	d139      	bne.n	14eb4 <ull_filter_rpa_update+0x158>
}
   14e40:	b007      	add	sp, #28
   14e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   14e46:	a902      	add	r1, sp, #8
   14e48:	f1a6 0010 	sub.w	r0, r6, #16
   14e4c:	f00f fc27 	bl	2469e <bt_rpa_create>
				LL_ASSERT(!err);
   14e50:	2800      	cmp	r0, #0
   14e52:	d155      	bne.n	14f00 <ull_filter_rpa_update+0x1a4>
				bt_addr_copy(&local_rpas[i], &rpa);
   14e54:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   14e58:	eb0b 0342 	add.w	r3, fp, r2, lsl #1
   14e5c:	9802      	ldr	r0, [sp, #8]
   14e5e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   14e62:	f84b 0012 	str.w	r0, [fp, r2, lsl #1]
				rl[i].local_rpa = &local_rpas[i];
   14e66:	f8c6 300d 	str.w	r3, [r6, #13]
   14e6a:	8099      	strh	r1, [r3, #4]
   14e6c:	e7d1      	b.n	14e12 <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   14e6e:	7833      	ldrb	r3, [r6, #0]
   14e70:	4a2d      	ldr	r2, [pc, #180]	; (14f28 <ull_filter_rpa_update+0x1cc>)
   14e72:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   14e76:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   14e78:	f10d 0307 	add.w	r3, sp, #7
   14e7c:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   14e80:	f812 1901 	ldrb.w	r1, [r2], #-1
   14e84:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   14e88:	4283      	cmp	r3, r0
   14e8a:	d1f9      	bne.n	14e80 <ull_filter_rpa_update+0x124>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   14e8c:	1df1      	adds	r1, r6, #7
   14e8e:	a802      	add	r0, sp, #8
   14e90:	f00f fc05 	bl	2469e <bt_rpa_create>
				LL_ASSERT(!err);
   14e94:	2800      	cmp	r0, #0
   14e96:	d0b7      	beq.n	14e08 <ull_filter_rpa_update+0xac>
   14e98:	4a24      	ldr	r2, [pc, #144]	; (14f2c <ull_filter_rpa_update+0x1d0>)
   14e9a:	4925      	ldr	r1, [pc, #148]	; (14f30 <ull_filter_rpa_update+0x1d4>)
   14e9c:	4825      	ldr	r0, [pc, #148]	; (14f34 <ull_filter_rpa_update+0x1d8>)
   14e9e:	f240 2316 	movw	r3, #534	; 0x216
   14ea2:	f00d ff84 	bl	22dae <printk>
   14ea6:	4040      	eors	r0, r0
   14ea8:	f380 8811 	msr	BASEPRI, r0
   14eac:	f04f 0003 	mov.w	r0, #3
   14eb0:	df02      	svc	2
   14eb2:	e7a9      	b.n	14e08 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   14eb4:	2000      	movs	r0, #0
   14eb6:	f7fa ff97 	bl	fde8 <ull_adv_is_enabled_get>
		if (adv) {
   14eba:	4604      	mov	r4, r0
   14ebc:	2800      	cmp	r0, #0
   14ebe:	d0bf      	beq.n	14e40 <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   14ec0:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   14ec4:	075b      	lsls	r3, r3, #29
   14ec6:	d5bb      	bpl.n	14e40 <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   14ec8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   14ecc:	2b07      	cmp	r3, #7
   14ece:	d8b7      	bhi.n	14e40 <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14ed0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   14ed4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14ed8:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14eda:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14edc:	302c      	adds	r0, #44	; 0x2c
   14ede:	f001 f9e9 	bl	162b4 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   14ee2:	786a      	ldrb	r2, [r5, #1]
   14ee4:	4629      	mov	r1, r5
   14ee6:	3202      	adds	r2, #2
   14ee8:	4605      	mov	r5, r0
   14eea:	f016 fc36 	bl	2b75a <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   14eee:	4629      	mov	r1, r5
   14ef0:	4620      	mov	r0, r4
   14ef2:	f7fb f823 	bl	ff3c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   14ef6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   14efa:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   14efe:	e79f      	b.n	14e40 <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   14f00:	4a0a      	ldr	r2, [pc, #40]	; (14f2c <ull_filter_rpa_update+0x1d0>)
   14f02:	490b      	ldr	r1, [pc, #44]	; (14f30 <ull_filter_rpa_update+0x1d4>)
   14f04:	480b      	ldr	r0, [pc, #44]	; (14f34 <ull_filter_rpa_update+0x1d8>)
   14f06:	f240 2323 	movw	r3, #547	; 0x223
   14f0a:	f00d ff50 	bl	22dae <printk>
   14f0e:	4040      	eors	r0, r0
   14f10:	f380 8811 	msr	BASEPRI, r0
   14f14:	f04f 0003 	mov.w	r0, #3
   14f18:	df02      	svc	2
   14f1a:	e79b      	b.n	14e54 <ull_filter_rpa_update+0xf8>
   14f1c:	200012f0 	.word	0x200012f0
   14f20:	20003884 	.word	0x20003884
   14f24:	20003727 	.word	0x20003727
   14f28:	20003690 	.word	0x20003690
   14f2c:	0002cd74 	.word	0x0002cd74
   14f30:	0002c860 	.word	0x0002c860
   14f34:	0002c5e0 	.word	0x0002c5e0
   14f38:	20003658 	.word	0x20003658

00014f3c <rpa_timeout>:
{
   14f3c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   14f3e:	2001      	movs	r0, #1
   14f40:	f7ff ff0c 	bl	14d5c <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   14f44:	4b0a      	ldr	r3, [pc, #40]	; (14f70 <rpa_timeout+0x34>)
   14f46:	681a      	ldr	r2, [r3, #0]
   14f48:	f240 30e7 	movw	r0, #999	; 0x3e7
   14f4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   14f50:	2100      	movs	r1, #0
   14f52:	fbe3 0102 	umlal	r0, r1, r3, r2
   14f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14f5a:	2300      	movs	r3, #0
   14f5c:	f7eb f910 	bl	180 <__aeabi_uldivmod>
}
   14f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14f64:	4602      	mov	r2, r0
   14f66:	460b      	mov	r3, r1
   14f68:	4802      	ldr	r0, [pc, #8]	; (14f74 <rpa_timeout+0x38>)
   14f6a:	4903      	ldr	r1, [pc, #12]	; (14f78 <rpa_timeout+0x3c>)
   14f6c:	f00b b9e6 	b.w	2033c <k_delayed_work_submit_to_queue>
   14f70:	20003884 	.word	0x20003884
   14f74:	20001438 	.word	0x20001438
   14f78:	200012f8 	.word	0x200012f8

00014f7c <ull_filter_adva_get>:
{
   14f7c:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   14f7e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   14f82:	2c07      	cmp	r4, #7
   14f84:	d810      	bhi.n	14fa8 <ull_filter_adva_get+0x2c>
   14f86:	4d10      	ldr	r5, [pc, #64]	; (14fc8 <ull_filter_adva_get+0x4c>)
   14f88:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   14f8c:	00a6      	lsls	r6, r4, #2
   14f8e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   14f92:	071a      	lsls	r2, r3, #28
   14f94:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   14f98:	d505      	bpl.n	14fa6 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   14f9a:	079b      	lsls	r3, r3, #30
   14f9c:	d506      	bpl.n	14fac <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   14f9e:	4434      	add	r4, r6
   14fa0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   14fa4:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   14fa6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   14fa8:	2000      	movs	r0, #0
}
   14faa:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   14fac:	4a07      	ldr	r2, [pc, #28]	; (14fcc <ull_filter_adva_get+0x50>)
   14fae:	4908      	ldr	r1, [pc, #32]	; (14fd0 <ull_filter_adva_get+0x54>)
   14fb0:	4808      	ldr	r0, [pc, #32]	; (14fd4 <ull_filter_adva_get+0x58>)
   14fb2:	f240 2349 	movw	r3, #585	; 0x249
   14fb6:	f00d fefa 	bl	22dae <printk>
   14fba:	4040      	eors	r0, r0
   14fbc:	f380 8811 	msr	BASEPRI, r0
   14fc0:	f04f 0003 	mov.w	r0, #3
   14fc4:	df02      	svc	2
   14fc6:	e7ea      	b.n	14f9e <ull_filter_adva_get+0x22>
   14fc8:	20003710 	.word	0x20003710
   14fcc:	0002cd74 	.word	0x0002cd74
   14fd0:	0002cdd8 	.word	0x0002cdd8
   14fd4:	0002c5e0 	.word	0x0002c5e0

00014fd8 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   14fd8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   14fdc:	2b07      	cmp	r3, #7
   14fde:	d80e      	bhi.n	14ffe <ull_filter_tgta_get+0x26>
   14fe0:	4908      	ldr	r1, [pc, #32]	; (15004 <ull_filter_tgta_get+0x2c>)
   14fe2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   14fe6:	f811 2032 	ldrb.w	r2, [r1, r2, lsl #3]
   14fea:	f3c2 0080 	ubfx	r0, r2, #2, #1
   14fee:	0752      	lsls	r2, r2, #29
   14ff0:	d506      	bpl.n	15000 <ull_filter_tgta_get+0x28>
		return rl[idx].peer_rpa.val;
   14ff2:	2028      	movs	r0, #40	; 0x28
   14ff4:	fb00 1303 	mla	r3, r0, r3, r1
   14ff8:	f103 001e 	add.w	r0, r3, #30
   14ffc:	4770      	bx	lr
	return NULL;
   14ffe:	2000      	movs	r0, #0
}
   15000:	4770      	bx	lr
   15002:	bf00      	nop
   15004:	20003710 	.word	0x20003710

00015008 <ull_filter_rl_find>:
{
   15008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	468b      	mov	fp, r1
	if (free) {
   1500e:	4616      	mov	r6, r2
   15010:	b10a      	cbz	r2, 15016 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   15012:	23ff      	movs	r3, #255	; 0xff
   15014:	7013      	strb	r3, [r2, #0]
   15016:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1507c <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1501a:	f000 0901 	and.w	r9, r0, #1
   1501e:	f108 0a01 	add.w	sl, r8, #1
{
   15022:	2400      	movs	r4, #0
   15024:	e004      	b.n	15030 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15026:	454a      	cmp	r2, r9
   15028:	d019      	beq.n	1505e <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1502a:	3401      	adds	r4, #1
   1502c:	2c08      	cmp	r4, #8
   1502e:	d012      	beq.n	15056 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15030:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   15034:	00e8      	lsls	r0, r5, #3
   15036:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1503a:	07d9      	lsls	r1, r3, #31
   1503c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15040:	b2e7      	uxtb	r7, r4
   15042:	d4f0      	bmi.n	15026 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15044:	2e00      	cmp	r6, #0
   15046:	d0f0      	beq.n	1502a <ull_filter_rl_find+0x22>
   15048:	7833      	ldrb	r3, [r6, #0]
   1504a:	3401      	adds	r4, #1
   1504c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1504e:	bf08      	it	eq
   15050:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15052:	2c08      	cmp	r4, #8
   15054:	d1ec      	bne.n	15030 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   15056:	27ff      	movs	r7, #255	; 0xff
}
   15058:	4638      	mov	r0, r7
   1505a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1505e:	4450      	add	r0, sl
   15060:	2206      	movs	r2, #6
   15062:	4659      	mov	r1, fp
   15064:	f016 fb6b 	bl	2b73e <memcmp>
   15068:	2800      	cmp	r0, #0
   1506a:	d0f5      	beq.n	15058 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1506c:	2e00      	cmp	r6, #0
   1506e:	d0dc      	beq.n	1502a <ull_filter_rl_find+0x22>
   15070:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   15074:	07db      	lsls	r3, r3, #31
   15076:	d4d8      	bmi.n	1502a <ull_filter_rl_find+0x22>
   15078:	e7e6      	b.n	15048 <ull_filter_rl_find+0x40>
   1507a:	bf00      	nop
   1507c:	20003710 	.word	0x20003710

00015080 <ll_wl_add>:
{
   15080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15084:	4605      	mov	r5, r0
   15086:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   15088:	2000      	movs	r0, #0
   1508a:	f7fa fec7 	bl	fe1c <ull_adv_filter_pol_get>
   1508e:	2800      	cmp	r0, #0
   15090:	d13e      	bne.n	15110 <ll_wl_add+0x90>
   15092:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   15094:	7828      	ldrb	r0, [r5, #0]
   15096:	28ff      	cmp	r0, #255	; 0xff
   15098:	d033      	beq.n	15102 <ll_wl_add+0x82>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1509a:	f105 0801 	add.w	r8, r5, #1
   1509e:	4641      	mov	r1, r8
   150a0:	f10d 0207 	add.w	r2, sp, #7
   150a4:	f7ff fc70 	bl	14988 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   150a8:	2807      	cmp	r0, #7
   150aa:	d926      	bls.n	150fa <ll_wl_add+0x7a>
	} else if (j >= ARRAY_SIZE(wl)) {
   150ac:	f89d 6007 	ldrb.w	r6, [sp, #7]
   150b0:	2e07      	cmp	r6, #7
   150b2:	d83e      	bhi.n	15132 <ll_wl_add+0xb2>
	wl[i].id_addr_type = id_addr->type & 0x1;
   150b4:	4f21      	ldr	r7, [pc, #132]	; (1513c <ll_wl_add+0xbc>)
   150b6:	782a      	ldrb	r2, [r5, #0]
   150b8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   150bc:	f362 0341 	bfi	r3, r2, #1, #1
   150c0:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   150c4:	2302      	movs	r3, #2
   150c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   150ca:	f8d5 2001 	ldr.w	r2, [r5, #1]
   150ce:	50fa      	str	r2, [r7, r3]
   150d0:	443b      	add	r3, r7
   150d2:	f8b5 2005 	ldrh.w	r2, [r5, #5]
   150d6:	809a      	strh	r2, [r3, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   150d8:	7828      	ldrb	r0, [r5, #0]
   150da:	4622      	mov	r2, r4
   150dc:	4641      	mov	r1, r8
   150de:	f7ff ff93 	bl	15008 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   150e2:	2807      	cmp	r0, #7
   150e4:	d918      	bls.n	15118 <ll_wl_add+0x98>
		wl[i].rl_idx = FILTER_IDX_NONE;
   150e6:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   150ea:	22ff      	movs	r2, #255	; 0xff
   150ec:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   150ee:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   150f2:	f043 0301 	orr.w	r3, r3, #1
   150f6:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   150fa:	2000      	movs	r0, #0
}
   150fc:	b002      	add	sp, #8
   150fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   15102:	4b0f      	ldr	r3, [pc, #60]	; (15140 <ll_wl_add+0xc0>)
   15104:	2201      	movs	r2, #1
		return 0;
   15106:	4620      	mov	r0, r4
		wl_anon = 1U;
   15108:	701a      	strb	r2, [r3, #0]
}
   1510a:	b002      	add	sp, #8
   1510c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15110:	200c      	movs	r0, #12
}
   15112:	b002      	add	sp, #8
   15114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   15118:	490a      	ldr	r1, [pc, #40]	; (15144 <ll_wl_add+0xc4>)
   1511a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   1511e:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   15122:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   15126:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   15128:	f043 0320 	orr.w	r3, r3, #32
   1512c:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   15130:	e7dd      	b.n	150ee <ll_wl_add+0x6e>
   15132:	2007      	movs	r0, #7
}
   15134:	b002      	add	sp, #8
   15136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1513a:	bf00      	nop
   1513c:	20003888 	.word	0x20003888
   15140:	20008603 	.word	0x20008603
   15144:	20003710 	.word	0x20003710

00015148 <ll_rl_add>:
{
   15148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1514c:	4606      	mov	r6, r0
   1514e:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15150:	2000      	movs	r0, #0
{
   15152:	460d      	mov	r5, r1
   15154:	4617      	mov	r7, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15156:	f7fa fe55 	bl	fe04 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1515a:	2800      	cmp	r0, #0
   1515c:	f040 8099 	bne.w	15292 <ll_rl_add+0x14a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   15160:	46b1      	mov	r9, r6
   15162:	f10d 020f 	add.w	r2, sp, #15
   15166:	f819 0b01 	ldrb.w	r0, [r9], #1
   1516a:	4649      	mov	r1, r9
   1516c:	f7ff ff4c 	bl	15008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15170:	2807      	cmp	r0, #7
   15172:	f240 80a0 	bls.w	152b6 <ll_rl_add+0x16e>
	} else if (j >= ARRAY_SIZE(rl)) {
   15176:	f89d 800f 	ldrb.w	r8, [sp, #15]
   1517a:	f1b8 0f07 	cmp.w	r8, #7
   1517e:	f200 808c 	bhi.w	1529a <ll_rl_add+0x152>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15182:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   15186:	00d2      	lsls	r2, r2, #3
   15188:	4c4d      	ldr	r4, [pc, #308]	; (152c0 <ll_rl_add+0x178>)
   1518a:	f8d9 1000 	ldr.w	r1, [r9]
   1518e:	9201      	str	r2, [sp, #4]
   15190:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   15192:	eb08 0a88 	add.w	sl, r8, r8, lsl #2
   15196:	50e1      	str	r1, [r4, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15198:	4423      	add	r3, r4
   1519a:	f8b9 1004 	ldrh.w	r1, [r9, #4]
   1519e:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   151a0:	7831      	ldrb	r1, [r6, #0]
   151a2:	f814 303a 	ldrb.w	r3, [r4, sl, lsl #3]
   151a6:	4693      	mov	fp, r2
   151a8:	f361 1386 	bfi	r3, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   151ac:	4628      	mov	r0, r5
   151ae:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   151b0:	54a3      	strb	r3, [r4, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   151b2:	f7f6 f9c3 	bl	b53c <mem_nz>
   151b6:	f814 300b 	ldrb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   151ba:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   151bc:	f360 0382 	bfi	r3, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   151c0:	4638      	mov	r0, r7
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   151c2:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   151c6:	f7f6 f9b9 	bl	b53c <mem_nz>
   151ca:	f814 300b 	ldrb.w	r3, [r4, fp]
	if (rl[i].pirk) {
   151ce:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   151d0:	f000 0001 	and.w	r0, r0, #1
   151d4:	f360 03c3 	bfi	r3, r0, #3, #1
	if (rl[i].pirk) {
   151d8:	f013 0f04 	tst.w	r3, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   151dc:	f804 300b 	strb.w	r3, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   151e0:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   151e4:	ea4f 0b88 	mov.w	fp, r8, lsl #2
	if (rl[i].pirk) {
   151e8:	d01a      	beq.n	15220 <ll_rl_add+0xd8>
		rl[i].pirk_idx = peer_irk_count;
   151ea:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 152cc <ll_rl_add+0x184>
		peer_irk_rl_ids[peer_irk_count] = i;
   151ee:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 152d0 <ll_rl_add+0x188>
		rl[i].pirk_idx = peer_irk_count;
   151f2:	f89e 1000 	ldrb.w	r1, [lr]
   151f6:	4b33      	ldr	r3, [pc, #204]	; (152c4 <ll_rl_add+0x17c>)
		peer_irk_rl_ids[peer_irk_count] = i;
   151f8:	f80c 8001 	strb.w	r8, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   151fc:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   15200:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
   15204:	3101      	adds	r1, #1
	psrc += length - 1;
   15206:	f105 030f 	add.w	r3, r5, #15
   1520a:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   1520e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   15212:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   15214:	f813 1901 	ldrb.w	r1, [r3], #-1
   15218:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1521c:	429d      	cmp	r5, r3
   1521e:	d1f9      	bne.n	15214 <ll_rl_add+0xcc>
	if (rl[i].lirk) {
   15220:	b198      	cbz	r0, 1524a <ll_rl_add+0x102>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   15222:	1dd3      	adds	r3, r2, #7
   15224:	6838      	ldr	r0, [r7, #0]
   15226:	f8d7 e004 	ldr.w	lr, [r7, #4]
   1522a:	f8d7 c008 	ldr.w	ip, [r7, #8]
   1522e:	68fd      	ldr	r5, [r7, #12]
   15230:	50e0      	str	r0, [r4, r3]
		rl[i].local_rpa = NULL;
   15232:	eb0b 0108 	add.w	r1, fp, r8
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   15236:	4423      	add	r3, r4
		rl[i].local_rpa = NULL;
   15238:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
   1523c:	2000      	movs	r0, #0
   1523e:	f8c3 e004 	str.w	lr, [r3, #4]
   15242:	f8c3 c008 	str.w	ip, [r3, #8]
   15246:	60dd      	str	r5, [r3, #12]
   15248:	6248      	str	r0, [r1, #36]	; 0x24
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1524a:	f102 0318 	add.w	r3, r2, #24
   1524e:	18e2      	adds	r2, r4, r3
__ssp_bos_icheck3(memset, void *, int)
   15250:	2700      	movs	r7, #0
   15252:	50e7      	str	r7, [r4, r3]
   15254:	eb0b 0508 	add.w	r5, fp, r8
   15258:	8097      	strh	r7, [r2, #4]
	rl[i].rpas_ready = 0U;
   1525a:	f814 3035 	ldrb.w	r3, [r4, r5, lsl #3]
   1525e:	00ed      	lsls	r5, r5, #3
   15260:	f023 0312 	bic.w	r3, r3, #18
   15264:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15266:	4649      	mov	r1, r9
   15268:	7830      	ldrb	r0, [r6, #0]
   1526a:	463a      	mov	r2, r7
   1526c:	f7ff fb8c 	bl	14988 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   15270:	2807      	cmp	r0, #7
   15272:	d916      	bls.n	152a2 <ll_rl_add+0x15a>
		rl[i].wl = 0U;
   15274:	5d63      	ldrb	r3, [r4, r5]
   15276:	f367 1345 	bfi	r3, r7, #5, #1
   1527a:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   1527c:	44d8      	add	r8, fp
	return 0;
   1527e:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   15280:	f814 3038 	ldrb.w	r3, [r4, r8, lsl #3]
   15284:	f043 0301 	orr.w	r3, r3, #1
   15288:	f804 3038 	strb.w	r3, [r4, r8, lsl #3]
}
   1528c:	b005      	add	sp, #20
   1528e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15292:	200c      	movs	r0, #12
}
   15294:	b005      	add	sp, #20
   15296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1529a:	2007      	movs	r0, #7
}
   1529c:	b005      	add	sp, #20
   1529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   152a2:	4a09      	ldr	r2, [pc, #36]	; (152c8 <ll_rl_add+0x180>)
		rl[i].wl = 1U;
   152a4:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   152a6:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   152aa:	f043 0320 	orr.w	r3, r3, #32
   152ae:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   152b0:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1U;
   152b4:	e7e2      	b.n	1527c <ll_rl_add+0x134>
		return BT_HCI_ERR_INVALID_PARAM;
   152b6:	2012      	movs	r0, #18
}
   152b8:	b005      	add	sp, #20
   152ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152be:	bf00      	nop
   152c0:	20003710 	.word	0x20003710
   152c4:	20003690 	.word	0x20003690
   152c8:	20003888 	.word	0x20003888
   152cc:	20008601 	.word	0x20008601
   152d0:	20003688 	.word	0x20003688

000152d4 <ll_rl_remove>:
{
   152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d8:	b083      	sub	sp, #12
   152da:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   152dc:	2000      	movs	r0, #0
{
   152de:	9500      	str	r5, [sp, #0]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   152e0:	f7fa fd90 	bl	fe04 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   152e4:	2800      	cmp	r0, #0
   152e6:	d160      	bne.n	153aa <ll_rl_remove+0xd6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   152e8:	462f      	mov	r7, r5
   152ea:	4602      	mov	r2, r0
   152ec:	4604      	mov	r4, r0
   152ee:	f817 0b01 	ldrb.w	r0, [r7], #1
   152f2:	9500      	str	r5, [sp, #0]
   152f4:	4639      	mov	r1, r7
   152f6:	f7ff fe87 	bl	15008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   152fa:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   152fc:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   152fe:	d903      	bls.n	15308 <ll_rl_remove+0x34>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15300:	2002      	movs	r0, #2
}
   15302:	b003      	add	sp, #12
   15304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   15308:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 153c8 <ll_rl_remove+0xf4>
   1530c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   15310:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   15314:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   15318:	075d      	lsls	r5, r3, #29
   1531a:	ea4f 0980 	mov.w	r9, r0, lsl #2
   1531e:	d52c      	bpl.n	1537a <ll_rl_remove+0xa6>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15320:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 153cc <ll_rl_remove+0xf8>
   15324:	f89e c000 	ldrb.w	ip, [lr]
   15328:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   1532c:	f01c 0bff 	ands.w	fp, ip, #255	; 0xff
   15330:	d021      	beq.n	15376 <ll_rl_remove+0xa2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15332:	7dd3      	ldrb	r3, [r2, #23]
   15334:	9301      	str	r3, [sp, #4]
			if (pj && pi != pj) {
   15336:	455b      	cmp	r3, fp
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15338:	461d      	mov	r5, r3
			if (pj && pi != pj) {
   1533a:	d01c      	beq.n	15376 <ll_rl_remove+0xa2>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1533c:	f8df a090 	ldr.w	sl, [pc, #144]	; 153d0 <ll_rl_remove+0xfc>
   15340:	eb0a 130b 	add.w	r3, sl, fp, lsl #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15344:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15346:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
   1534a:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1534e:	9d00      	ldr	r5, [sp, #0]
					if (rl[k].taken && rl[k].pirk &&
   15350:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15354:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   15358:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   1535c:	07d8      	lsls	r0, r3, #31
   1535e:	b2e1      	uxtb	r1, r4
   15360:	f104 0401 	add.w	r4, r4, #1
   15364:	d504      	bpl.n	15370 <ll_rl_remove+0x9c>
   15366:	075b      	lsls	r3, r3, #29
   15368:	d502      	bpl.n	15370 <ll_rl_remove+0x9c>
   1536a:	7dd3      	ldrb	r3, [r2, #23]
   1536c:	455b      	cmp	r3, fp
   1536e:	d020      	beq.n	153b2 <ll_rl_remove+0xde>
				for (k = 0U;
   15370:	2c08      	cmp	r4, #8
   15372:	d1ed      	bne.n	15350 <ll_rl_remove+0x7c>
   15374:	9500      	str	r5, [sp, #0]
			peer_irk_count--;
   15376:	f88e c000 	strb.w	ip, [lr]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1537a:	9b00      	ldr	r3, [sp, #0]
   1537c:	4639      	mov	r1, r7
   1537e:	7818      	ldrb	r0, [r3, #0]
   15380:	2200      	movs	r2, #0
   15382:	f7ff fb01 	bl	14988 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   15386:	2807      	cmp	r0, #7
   15388:	d804      	bhi.n	15394 <ll_rl_remove+0xc0>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1538a:	4b0d      	ldr	r3, [pc, #52]	; (153c0 <ll_rl_remove+0xec>)
   1538c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   15390:	23ff      	movs	r3, #255	; 0xff
   15392:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   15394:	444e      	add	r6, r9
		return 0;
   15396:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   15398:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   1539c:	f36f 0300 	bfc	r3, #0, #1
   153a0:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   153a4:	b003      	add	sp, #12
   153a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   153aa:	200c      	movs	r0, #12
}
   153ac:	b003      	add	sp, #12
   153ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						rl[k].pirk_idx = pi;
   153b2:	9801      	ldr	r0, [sp, #4]
						peer_irk_rl_ids[pi] = k;
   153b4:	4b03      	ldr	r3, [pc, #12]	; (153c4 <ll_rl_remove+0xf0>)
   153b6:	9500      	str	r5, [sp, #0]
   153b8:	5419      	strb	r1, [r3, r0]
						rl[k].pirk_idx = pi;
   153ba:	75d0      	strb	r0, [r2, #23]
						break;
   153bc:	e7db      	b.n	15376 <ll_rl_remove+0xa2>
   153be:	bf00      	nop
   153c0:	20003888 	.word	0x20003888
   153c4:	20003688 	.word	0x20003688
   153c8:	20003710 	.word	0x20003710
   153cc:	20008601 	.word	0x20008601
   153d0:	20003690 	.word	0x20003690

000153d4 <ll_rl_crpa_set>:
{
   153d4:	b538      	push	{r3, r4, r5, lr}
   153d6:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   153d8:	795b      	ldrb	r3, [r3, #5]
   153da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   153de:	2b40      	cmp	r3, #64	; 0x40
   153e0:	d000      	beq.n	153e4 <ll_rl_crpa_set+0x10>
}
   153e2:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   153e4:	b119      	cbz	r1, 153ee <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   153e6:	2200      	movs	r2, #0
   153e8:	f7ff fe0e 	bl	15008 <ull_filter_rl_find>
   153ec:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   153ee:	2a07      	cmp	r2, #7
   153f0:	d8f7      	bhi.n	153e2 <ll_rl_crpa_set+0xe>
   153f2:	4b08      	ldr	r3, [pc, #32]	; (15414 <ll_rl_crpa_set+0x40>)
   153f4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   153f8:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   153fc:	07c9      	lsls	r1, r1, #31
   153fe:	d5f0      	bpl.n	153e2 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15400:	2028      	movs	r0, #40	; 0x28
   15402:	2118      	movs	r1, #24
   15404:	fb10 1202 	smlabb	r2, r0, r2, r1
   15408:	6820      	ldr	r0, [r4, #0]
   1540a:	5098      	str	r0, [r3, r2]
   1540c:	4413      	add	r3, r2
   1540e:	88a2      	ldrh	r2, [r4, #4]
   15410:	809a      	strh	r2, [r3, #4]
}
   15412:	bd38      	pop	{r3, r4, r5, pc}
   15414:	20003710 	.word	0x20003710

00015418 <ll_rl_crpa_get>:
{
   15418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1541a:	4603      	mov	r3, r0
{
   1541c:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1541e:	f813 0b01 	ldrb.w	r0, [r3], #1
   15422:	2200      	movs	r2, #0
   15424:	4619      	mov	r1, r3
   15426:	f7ff fdef 	bl	15008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1542a:	2807      	cmp	r0, #7
   1542c:	d901      	bls.n	15432 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1542e:	2002      	movs	r0, #2
}
   15430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   15432:	4f09      	ldr	r7, [pc, #36]	; (15458 <ll_rl_crpa_get+0x40>)
   15434:	2428      	movs	r4, #40	; 0x28
   15436:	2318      	movs	r3, #24
   15438:	fb14 3400 	smlabb	r4, r4, r0, r3
   1543c:	193e      	adds	r6, r7, r4
   1543e:	4630      	mov	r0, r6
   15440:	2106      	movs	r1, #6
   15442:	f7f6 f87b 	bl	b53c <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   15446:	2800      	cmp	r0, #0
   15448:	d0f1      	beq.n	1542e <ll_rl_crpa_get+0x16>
   1544a:	5938      	ldr	r0, [r7, r4]
   1544c:	6028      	str	r0, [r5, #0]
   1544e:	88b3      	ldrh	r3, [r6, #4]
   15450:	80ab      	strh	r3, [r5, #4]
		return 0;
   15452:	2000      	movs	r0, #0
}
   15454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15456:	bf00      	nop
   15458:	20003710 	.word	0x20003710

0001545c <ll_rl_lrpa_get>:
{
   1545c:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1545e:	4603      	mov	r3, r0
{
   15460:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15462:	f813 0b01 	ldrb.w	r0, [r3], #1
   15466:	2200      	movs	r2, #0
   15468:	4619      	mov	r1, r3
   1546a:	f7ff fdcd 	bl	15008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1546e:	2807      	cmp	r0, #7
   15470:	d901      	bls.n	15476 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15472:	2002      	movs	r0, #2
}
   15474:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   15476:	4b06      	ldr	r3, [pc, #24]	; (15490 <ll_rl_lrpa_get+0x34>)
   15478:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1547c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
		return 0;
   15480:	2000      	movs	r0, #0
   15482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   15484:	681a      	ldr	r2, [r3, #0]
   15486:	6022      	str	r2, [r4, #0]
   15488:	889b      	ldrh	r3, [r3, #4]
   1548a:	80a3      	strh	r3, [r4, #4]
}
   1548c:	bd10      	pop	{r4, pc}
   1548e:	bf00      	nop
   15490:	20003710 	.word	0x20003710

00015494 <ll_priv_mode_set>:
{
   15494:	b570      	push	{r4, r5, r6, lr}
   15496:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15498:	2000      	movs	r0, #0
{
   1549a:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1549c:	f7fa fcb2 	bl	fe04 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   154a0:	b968      	cbnz	r0, 154be <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   154a2:	4629      	mov	r1, r5
   154a4:	4602      	mov	r2, r0
   154a6:	4604      	mov	r4, r0
   154a8:	f811 0b01 	ldrb.w	r0, [r1], #1
   154ac:	f7ff fdac 	bl	15008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   154b0:	2807      	cmp	r0, #7
   154b2:	d81c      	bhi.n	154ee <ll_priv_mode_set+0x5a>
		switch (mode) {
   154b4:	b186      	cbz	r6, 154d8 <ll_priv_mode_set+0x44>
   154b6:	2e01      	cmp	r6, #1
   154b8:	d003      	beq.n	154c2 <ll_priv_mode_set+0x2e>
   154ba:	2012      	movs	r0, #18
}
   154bc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   154be:	200c      	movs	r0, #12
}
   154c0:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   154c2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   154c6:	490b      	ldr	r1, [pc, #44]	; (154f4 <ll_priv_mode_set+0x60>)
   154c8:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   154cc:	f042 0210 	orr.w	r2, r2, #16
   154d0:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   154d4:	4620      	mov	r0, r4
}
   154d6:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   154d8:	4b06      	ldr	r3, [pc, #24]	; (154f4 <ll_priv_mode_set+0x60>)
   154da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   154de:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   154e2:	f366 1204 	bfi	r2, r6, #4, #1
   154e6:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   154ea:	4630      	mov	r0, r6
}
   154ec:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   154ee:	2002      	movs	r0, #2
}
   154f0:	bd70      	pop	{r4, r5, r6, pc}
   154f2:	bf00      	nop
   154f4:	20003710 	.word	0x20003710

000154f8 <ull_filter_reset>:
	wl_anon = 0U;
   154f8:	4a33      	ldr	r2, [pc, #204]	; (155c8 <ull_filter_reset+0xd0>)
   154fa:	4934      	ldr	r1, [pc, #208]	; (155cc <ull_filter_reset+0xd4>)
{
   154fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	wl_anon = 0U;
   154fe:	2300      	movs	r3, #0
   15500:	4c33      	ldr	r4, [pc, #204]	; (155d0 <ull_filter_reset+0xd8>)
   15502:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   15504:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   15508:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1550a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1550c:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   15510:	d805      	bhi.n	1551e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   15512:	f814 2035 	ldrb.w	r2, [r4, r5, lsl #3]
   15516:	f36f 1245 	bfc	r2, #5, #1
   1551a:	f804 2035 	strb.w	r2, [r4, r5, lsl #3]
		wl[i].taken = 0U;
   1551e:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   15522:	f36f 0200 	bfc	r2, #0, #1
   15526:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1552a:	3301      	adds	r3, #1
   1552c:	2b08      	cmp	r3, #8
   1552e:	d1e9      	bne.n	15504 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   15530:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   15534:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
   15538:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1553c:	7827      	ldrb	r7, [r4, #0]
   1553e:	f894 60a0 	ldrb.w	r6, [r4, #160]	; 0xa0
	rl_enable = 0U;
   15542:	2100      	movs	r1, #0
		rl[i].taken = 0U;
   15544:	f361 0500 	bfi	r5, r1, #0, #1
   15548:	f361 0200 	bfi	r2, r1, #0, #1
   1554c:	f361 0300 	bfi	r3, r1, #0, #1
   15550:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
   15554:	f894 50c8 	ldrb.w	r5, [r4, #200]	; 0xc8
   15558:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
   1555c:	f361 0700 	bfi	r7, r1, #0, #1
   15560:	f894 20f0 	ldrb.w	r2, [r4, #240]	; 0xf0
   15564:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15568:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1556c:	7027      	strb	r7, [r4, #0]
   1556e:	f361 0500 	bfi	r5, r1, #0, #1
	rl_enable = 0U;
   15572:	4f18      	ldr	r7, [pc, #96]	; (155d4 <ull_filter_reset+0xdc>)
		rl[i].taken = 0U;
   15574:	f884 50c8 	strb.w	r5, [r4, #200]	; 0xc8
   15578:	f361 0200 	bfi	r2, r1, #0, #1
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1557c:	4d16      	ldr	r5, [pc, #88]	; (155d8 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   1557e:	7039      	strb	r1, [r7, #0]
		rl[i].taken = 0U;
   15580:	f361 0300 	bfi	r3, r1, #0, #1
   15584:	f884 20f0 	strb.w	r2, [r4, #240]	; 0xf0
   15588:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   1558c:	4f13      	ldr	r7, [pc, #76]	; (155dc <ull_filter_reset+0xe4>)
	rpa_last_ms = -1;
   1558e:	4a14      	ldr	r2, [pc, #80]	; (155e0 <ull_filter_reset+0xe8>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15590:	4b14      	ldr	r3, [pc, #80]	; (155e4 <ull_filter_reset+0xec>)
   15592:	602b      	str	r3, [r5, #0]
		rl[i].taken = 0U;
   15594:	f361 0600 	bfi	r6, r1, #0, #1
   15598:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
	rpa_last_ms = -1;
   1559c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   155a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   155a4:	e9c2 4500 	strd	r4, r5, [r2]
	peer_irk_count = 0U;
   155a8:	7039      	strb	r1, [r7, #0]
	if (init) {
   155aa:	b138      	cbz	r0, 155bc <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   155ac:	4b0e      	ldr	r3, [pc, #56]	; (155e8 <ull_filter_reset+0xf0>)
   155ae:	2230      	movs	r2, #48	; 0x30
   155b0:	4618      	mov	r0, r3
   155b2:	f016 f8f3 	bl	2b79c <memset>
   155b6:	4a0d      	ldr	r2, [pc, #52]	; (155ec <ull_filter_reset+0xf4>)
   155b8:	6042      	str	r2, [r0, #4]
}
   155ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   155bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		k_delayed_work_cancel(&rpa_work);
   155c0:	4809      	ldr	r0, [pc, #36]	; (155e8 <ull_filter_reset+0xf0>)
   155c2:	f015 be8b 	b.w	2b2dc <k_delayed_work_cancel>
   155c6:	bf00      	nop
   155c8:	20008603 	.word	0x20008603
   155cc:	20003888 	.word	0x20003888
   155d0:	20003710 	.word	0x20003710
   155d4:	20008602 	.word	0x20008602
   155d8:	20003884 	.word	0x20003884
   155dc:	20008601 	.word	0x20008601
   155e0:	200012f0 	.word	0x200012f0
   155e4:	000dbba0 	.word	0x000dbba0
   155e8:	200012f8 	.word	0x200012f8
   155ec:	00014f3d 	.word	0x00014f3d

000155f0 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   155f0:	2807      	cmp	r0, #7
   155f2:	d807      	bhi.n	15604 <ull_filter_lll_lrpa_used+0x14>
   155f4:	4b04      	ldr	r3, [pc, #16]	; (15608 <ull_filter_lll_lrpa_used+0x18>)
   155f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   155fa:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   155fe:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   15602:	4770      	bx	lr
   15604:	2000      	movs	r0, #0
}
   15606:	4770      	bx	lr
   15608:	20003710 	.word	0x20003710

0001560c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1560c:	4b02      	ldr	r3, [pc, #8]	; (15618 <ull_filter_lll_irks_get+0xc>)
   1560e:	781b      	ldrb	r3, [r3, #0]
   15610:	7003      	strb	r3, [r0, #0]
}
   15612:	4802      	ldr	r0, [pc, #8]	; (1561c <ull_filter_lll_irks_get+0x10>)
   15614:	4770      	bx	lr
   15616:	bf00      	nop
   15618:	20008601 	.word	0x20008601
   1561c:	20003690 	.word	0x20003690

00015620 <ull_filter_lll_rl_irk_idx>:
{
   15620:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   15622:	4b20      	ldr	r3, [pc, #128]	; (156a4 <ull_filter_lll_rl_irk_idx+0x84>)
   15624:	781b      	ldrb	r3, [r3, #0]
   15626:	4283      	cmp	r3, r0
{
   15628:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1562a:	d90c      	bls.n	15646 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1562c:	4b1e      	ldr	r3, [pc, #120]	; (156a8 <ull_filter_lll_rl_irk_idx+0x88>)
   1562e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   15630:	2c07      	cmp	r4, #7
   15632:	d819      	bhi.n	15668 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   15634:	4b1d      	ldr	r3, [pc, #116]	; (156ac <ull_filter_lll_rl_irk_idx+0x8c>)
   15636:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1563a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1563e:	07db      	lsls	r3, r3, #31
   15640:	d520      	bpl.n	15684 <ull_filter_lll_rl_irk_idx+0x64>
}
   15642:	4620      	mov	r0, r4
   15644:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   15646:	4a1a      	ldr	r2, [pc, #104]	; (156b0 <ull_filter_lll_rl_irk_idx+0x90>)
   15648:	491a      	ldr	r1, [pc, #104]	; (156b4 <ull_filter_lll_rl_irk_idx+0x94>)
   1564a:	481b      	ldr	r0, [pc, #108]	; (156b8 <ull_filter_lll_rl_irk_idx+0x98>)
   1564c:	f240 23b9 	movw	r3, #697	; 0x2b9
   15650:	f00d fbad 	bl	22dae <printk>
   15654:	4040      	eors	r0, r0
   15656:	f380 8811 	msr	BASEPRI, r0
   1565a:	f04f 0003 	mov.w	r0, #3
   1565e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   15660:	4b11      	ldr	r3, [pc, #68]	; (156a8 <ull_filter_lll_rl_irk_idx+0x88>)
   15662:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   15664:	2c07      	cmp	r4, #7
   15666:	d9e5      	bls.n	15634 <ull_filter_lll_rl_irk_idx+0x14>
   15668:	4a11      	ldr	r2, [pc, #68]	; (156b0 <ull_filter_lll_rl_irk_idx+0x90>)
   1566a:	4914      	ldr	r1, [pc, #80]	; (156bc <ull_filter_lll_rl_irk_idx+0x9c>)
   1566c:	4812      	ldr	r0, [pc, #72]	; (156b8 <ull_filter_lll_rl_irk_idx+0x98>)
   1566e:	f240 23bb 	movw	r3, #699	; 0x2bb
   15672:	f00d fb9c 	bl	22dae <printk>
   15676:	4040      	eors	r0, r0
   15678:	f380 8811 	msr	BASEPRI, r0
   1567c:	f04f 0003 	mov.w	r0, #3
   15680:	df02      	svc	2
   15682:	e7d7      	b.n	15634 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   15684:	4a0a      	ldr	r2, [pc, #40]	; (156b0 <ull_filter_lll_rl_irk_idx+0x90>)
   15686:	490e      	ldr	r1, [pc, #56]	; (156c0 <ull_filter_lll_rl_irk_idx+0xa0>)
   15688:	480b      	ldr	r0, [pc, #44]	; (156b8 <ull_filter_lll_rl_irk_idx+0x98>)
   1568a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1568e:	f00d fb8e 	bl	22dae <printk>
   15692:	4040      	eors	r0, r0
   15694:	f380 8811 	msr	BASEPRI, r0
   15698:	f04f 0003 	mov.w	r0, #3
   1569c:	df02      	svc	2
}
   1569e:	4620      	mov	r0, r4
   156a0:	bd10      	pop	{r4, pc}
   156a2:	bf00      	nop
   156a4:	20008601 	.word	0x20008601
   156a8:	20003688 	.word	0x20003688
   156ac:	20003710 	.word	0x20003710
   156b0:	0002cd74 	.word	0x0002cd74
   156b4:	0002cf58 	.word	0x0002cf58
   156b8:	0002c5e0 	.word	0x0002c5e0
   156bc:	0002cf78 	.word	0x0002cf78
   156c0:	0002cf4c 	.word	0x0002cf4c

000156c4 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   156c4:	2807      	cmp	r0, #7
   156c6:	d823      	bhi.n	15710 <ull_filter_lll_irk_whitelisted+0x4c>
{
   156c8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   156ca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   156ce:	4e11      	ldr	r6, [pc, #68]	; (15714 <ull_filter_lll_irk_whitelisted+0x50>)
   156d0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   156d4:	07db      	lsls	r3, r3, #31
   156d6:	4604      	mov	r4, r0
   156d8:	ea4f 0580 	mov.w	r5, r0, lsl #2
   156dc:	d505      	bpl.n	156ea <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   156de:	442c      	add	r4, r5
   156e0:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   156e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   156e8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   156ea:	4a0b      	ldr	r2, [pc, #44]	; (15718 <ull_filter_lll_irk_whitelisted+0x54>)
   156ec:	490b      	ldr	r1, [pc, #44]	; (1571c <ull_filter_lll_irk_whitelisted+0x58>)
   156ee:	480c      	ldr	r0, [pc, #48]	; (15720 <ull_filter_lll_irk_whitelisted+0x5c>)
   156f0:	f240 23c7 	movw	r3, #711	; 0x2c7
   156f4:	f00d fb5b 	bl	22dae <printk>
   156f8:	4040      	eors	r0, r0
   156fa:	f380 8811 	msr	BASEPRI, r0
   156fe:	f04f 0003 	mov.w	r0, #3
   15702:	df02      	svc	2
	return rl[rl_idx].wl;
   15704:	442c      	add	r4, r5
   15706:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1570a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1570e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   15710:	2000      	movs	r0, #0
}
   15712:	4770      	bx	lr
   15714:	20003710 	.word	0x20003710
   15718:	0002cd74 	.word	0x0002cd74
   1571c:	0002cdc4 	.word	0x0002cdc4
   15720:	0002c5e0 	.word	0x0002c5e0

00015724 <ull_filter_lll_get>:
		return &wl_filter;
   15724:	4a03      	ldr	r2, [pc, #12]	; (15734 <ull_filter_lll_get+0x10>)
   15726:	4b04      	ldr	r3, [pc, #16]	; (15738 <ull_filter_lll_get+0x14>)
}
   15728:	2800      	cmp	r0, #0
   1572a:	bf0c      	ite	eq
   1572c:	4610      	moveq	r0, r2
   1572e:	4618      	movne	r0, r3
   15730:	4770      	bx	lr
   15732:	bf00      	nop
   15734:	20003850 	.word	0x20003850
   15738:	200038c8 	.word	0x200038c8

0001573c <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1573c:	4b1c      	ldr	r3, [pc, #112]	; (157b0 <ull_filter_lll_rl_addr_allowed+0x74>)
   1573e:	781b      	ldrb	r3, [r3, #0]
   15740:	b1fb      	cbz	r3, 15782 <ull_filter_lll_rl_addr_allowed+0x46>
   15742:	7813      	ldrb	r3, [r2, #0]
   15744:	2bff      	cmp	r3, #255	; 0xff
   15746:	d11c      	bne.n	15782 <ull_filter_lll_rl_addr_allowed+0x46>
{
   15748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1574c:	4d19      	ldr	r5, [pc, #100]	; (157b4 <ull_filter_lll_rl_addr_allowed+0x78>)
   1574e:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   15750:	2300      	movs	r3, #0
   15752:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   15754:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   15758:	fa5f fe83 	uxtb.w	lr, r3
   1575c:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   15760:	f014 0001 	ands.w	r0, r4, #1
   15764:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   15768:	d003      	beq.n	15772 <ull_filter_lll_rl_addr_allowed+0x36>
   1576a:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1576e:	42b4      	cmp	r4, r6
   15770:	d009      	beq.n	15786 <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15772:	3301      	adds	r3, #1
   15774:	2b08      	cmp	r3, #8
   15776:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1577a:	d1eb      	bne.n	15754 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1577c:	2001      	movs	r0, #1
}
   1577e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   15782:	2001      	movs	r0, #1
}
   15784:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   15786:	1fac      	subs	r4, r5, #6
   15788:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   1578c:	f814 af01 	ldrb.w	sl, [r4, #1]!
   15790:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   15794:	45ca      	cmp	sl, r9
   15796:	d1ec      	bne.n	15772 <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   15798:	42ac      	cmp	r4, r5
   1579a:	d1f7      	bne.n	1578c <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   1579c:	4463      	add	r3, ip
				*rl_idx = i;
   1579e:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   157a2:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   157a6:	075a      	lsls	r2, r3, #29
   157a8:	d5e9      	bpl.n	1577e <ull_filter_lll_rl_addr_allowed+0x42>
   157aa:	f3c3 1000 	ubfx	r0, r3, #4, #1
   157ae:	e7e6      	b.n	1577e <ull_filter_lll_rl_addr_allowed+0x42>
   157b0:	20008602 	.word	0x20008602
   157b4:	20003716 	.word	0x20003716

000157b8 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   157b8:	4b02      	ldr	r3, [pc, #8]	; (157c4 <ull_filter_lll_rl_enabled+0xc>)
   157ba:	7818      	ldrb	r0, [r3, #0]
}
   157bc:	3800      	subs	r0, #0
   157be:	bf18      	it	ne
   157c0:	2001      	movne	r0, #1
   157c2:	4770      	bx	lr
   157c4:	20008602 	.word	0x20008602

000157c8 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   157c8:	4668      	mov	r0, sp
   157ca:	f020 0107 	bic.w	r1, r0, #7
   157ce:	468d      	mov	sp, r1
   157d0:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   157d2:	f001 ff87 	bl	176e4 <isr_radio>

	ISR_DIRECT_PM();
   157d6:	f7ee fe5d 	bl	4494 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   157da:	f7ef f969 	bl	4ab0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   157de:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   157e2:	4685      	mov	sp, r0
   157e4:	4770      	bx	lr
   157e6:	bf00      	nop

000157e8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   157e8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   157ea:	4b09      	ldr	r3, [pc, #36]	; (15810 <rtc0_nrf5_isr+0x28>)
   157ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   157f0:	b93a      	cbnz	r2, 15802 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   157f2:	2001      	movs	r0, #1
   157f4:	f7f5 ff84 	bl	b700 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   157f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   157fc:	2002      	movs	r0, #2
   157fe:	f7f5 bf7f 	b.w	b700 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   15802:	2000      	movs	r0, #0
   15804:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   15808:	f7f7 f90e 	bl	ca28 <ticker_trigger>
   1580c:	e7f1      	b.n	157f2 <rtc0_nrf5_isr+0xa>
   1580e:	bf00      	nop
   15810:	4000b000 	.word	0x4000b000

00015814 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   15814:	2000      	movs	r0, #0
   15816:	f7f5 bf73 	b.w	b700 <mayfly_run>
   1581a:	bf00      	nop

0001581c <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1581c:	f002 b882 	b.w	17924 <radio_status_reset>

00015820 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   15820:	2801      	cmp	r0, #1
   15822:	d800      	bhi.n	15826 <ticker_stop_op_cb+0x6>
   15824:	4770      	bx	lr
{
   15826:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   15828:	4a06      	ldr	r2, [pc, #24]	; (15844 <ticker_stop_op_cb+0x24>)
   1582a:	4907      	ldr	r1, [pc, #28]	; (15848 <ticker_stop_op_cb+0x28>)
   1582c:	4807      	ldr	r0, [pc, #28]	; (1584c <ticker_stop_op_cb+0x2c>)
   1582e:	f240 23a3 	movw	r3, #675	; 0x2a3
   15832:	f00d fabc 	bl	22dae <printk>
   15836:	4040      	eors	r0, r0
   15838:	f380 8811 	msr	BASEPRI, r0
   1583c:	f04f 0003 	mov.w	r0, #3
   15840:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   15842:	bd08      	pop	{r3, pc}
   15844:	0002cf94 	.word	0x0002cf94
   15848:	0002cfdc 	.word	0x0002cfdc
   1584c:	0002c5e0 	.word	0x0002c5e0

00015850 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   15850:	2801      	cmp	r0, #1
   15852:	d800      	bhi.n	15856 <ticker_start_op_cb+0x6>
   15854:	4770      	bx	lr
{
   15856:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   15858:	4a06      	ldr	r2, [pc, #24]	; (15874 <ticker_start_op_cb+0x24>)
   1585a:	4907      	ldr	r1, [pc, #28]	; (15878 <ticker_start_op_cb+0x28>)
   1585c:	4807      	ldr	r0, [pc, #28]	; (1587c <ticker_start_op_cb+0x2c>)
   1585e:	f240 23ae 	movw	r3, #686	; 0x2ae
   15862:	f00d faa4 	bl	22dae <printk>
   15866:	4040      	eors	r0, r0
   15868:	f380 8811 	msr	BASEPRI, r0
   1586c:	f04f 0003 	mov.w	r0, #3
   15870:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   15872:	bd08      	pop	{r3, pc}
   15874:	0002cf94 	.word	0x0002cf94
   15878:	0002cfdc 	.word	0x0002cfdc
   1587c:	0002c5e0 	.word	0x0002c5e0

00015880 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   15880:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   15882:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   15884:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   15886:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   15888:	4c15      	ldr	r4, [pc, #84]	; (158e0 <preempt_ticker_start.isra.0+0x60>)
   1588a:	4916      	ldr	r1, [pc, #88]	; (158e4 <preempt_ticker_start.isra.0+0x64>)
   1588c:	9208      	str	r2, [sp, #32]
   1588e:	e9cd 2203 	strd	r2, r2, [sp, #12]
   15892:	e9cd 2201 	strd	r2, r2, [sp, #4]
   15896:	9206      	str	r2, [sp, #24]
   15898:	9407      	str	r4, [sp, #28]
   1589a:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   1589c:	e9d3 5400 	ldrd	r5, r4, [r3]
   158a0:	6899      	ldr	r1, [r3, #8]
   158a2:	42a5      	cmp	r5, r4
   158a4:	bf2c      	ite	cs
   158a6:	ebc1 0105 	rsbcs	r1, r1, r5
   158aa:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   158ae:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   158b0:	9100      	str	r1, [sp, #0]
   158b2:	4610      	mov	r0, r2
   158b4:	4611      	mov	r1, r2
   158b6:	f7f7 f925 	bl	cb04 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   158ba:	2802      	cmp	r0, #2
   158bc:	d801      	bhi.n	158c2 <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   158be:	b00b      	add	sp, #44	; 0x2c
   158c0:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   158c2:	4a09      	ldr	r2, [pc, #36]	; (158e8 <preempt_ticker_start.isra.0+0x68>)
   158c4:	4909      	ldr	r1, [pc, #36]	; (158ec <preempt_ticker_start.isra.0+0x6c>)
   158c6:	480a      	ldr	r0, [pc, #40]	; (158f0 <preempt_ticker_start.isra.0+0x70>)
   158c8:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   158cc:	f00d fa6f 	bl	22dae <printk>
   158d0:	4040      	eors	r0, r0
   158d2:	f380 8811 	msr	BASEPRI, r0
   158d6:	f04f 0003 	mov.w	r0, #3
   158da:	df02      	svc	2
}
   158dc:	b00b      	add	sp, #44	; 0x2c
   158de:	bd30      	pop	{r4, r5, pc}
   158e0:	00015851 	.word	0x00015851
   158e4:	00015b45 	.word	0x00015b45
   158e8:	0002cf94 	.word	0x0002cf94
   158ec:	0002cffc 	.word	0x0002cffc
   158f0:	0002c5e0 	.word	0x0002c5e0

000158f4 <prepare>:
{
   158f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   158f8:	b085      	sub	sp, #20
   158fa:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   158fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   15900:	f10d 000f 	add.w	r0, sp, #15
{
   15904:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15908:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1590c:	f88d c00f 	strb.w	ip, [sp, #15]
{
   15910:	460d      	mov	r5, r1
   15912:	4616      	mov	r6, r2
   15914:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   15916:	f7f9 febb 	bl	f690 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1591a:	b918      	cbnz	r0, 15924 <prepare+0x30>
   1591c:	e01e      	b.n	1595c <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   1591e:	f7f9 feb7 	bl	f690 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   15922:	b1d8      	cbz	r0, 1595c <prepare+0x68>
   15924:	f890 3020 	ldrb.w	r3, [r0, #32]
   15928:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1592a:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1592e:	d1f6      	bne.n	1591e <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   15930:	4b2d      	ldr	r3, [pc, #180]	; (159e8 <prepare+0xf4>)
   15932:	689a      	ldr	r2, [r3, #8]
   15934:	b9aa      	cbnz	r2, 15962 <prepare+0x6e>
   15936:	f1b9 0f00 	cmp.w	r9, #0
   1593a:	d036      	beq.n	159aa <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1593c:	2201      	movs	r2, #1
   1593e:	9201      	str	r2, [sp, #4]
   15940:	9700      	str	r7, [sp, #0]
   15942:	4633      	mov	r3, r6
   15944:	4629      	mov	r1, r5
   15946:	4620      	mov	r0, r4
   15948:	4642      	mov	r2, r8
   1594a:	f7f9 fe51 	bl	f5f0 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1594e:	b9d8      	cbnz	r0, 15988 <prepare+0x94>
		return -EINPROGRESS;
   15950:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   15954:	4620      	mov	r0, r4
   15956:	b005      	add	sp, #20
   15958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1595c:	4b22      	ldr	r3, [pc, #136]	; (159e8 <prepare+0xf4>)
   1595e:	689a      	ldr	r2, [r3, #8]
   15960:	b31a      	cbz	r2, 159aa <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   15962:	e9cd 7900 	strd	r7, r9, [sp]
   15966:	4633      	mov	r3, r6
   15968:	4629      	mov	r1, r5
   1596a:	4620      	mov	r0, r4
   1596c:	4642      	mov	r2, r8
   1596e:	f7f9 fe3f 	bl	f5f0 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   15972:	b948      	cbnz	r0, 15988 <prepare+0x94>
		if (is_resume) {
   15974:	f1b9 0f00 	cmp.w	r9, #0
   15978:	d1ea      	bne.n	15950 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   1597a:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1597e:	f8d8 0000 	ldr.w	r0, [r8]
   15982:	f7ff ff7d 	bl	15880 <preempt_ticker_start.isra.0>
   15986:	e7e3      	b.n	15950 <prepare+0x5c>
		LL_ASSERT(!err);
   15988:	4a18      	ldr	r2, [pc, #96]	; (159ec <prepare+0xf8>)
   1598a:	4919      	ldr	r1, [pc, #100]	; (159f0 <prepare+0xfc>)
   1598c:	4819      	ldr	r0, [pc, #100]	; (159f4 <prepare+0x100>)
   1598e:	f44f 7312 	mov.w	r3, #584	; 0x248
   15992:	f00d fa0c 	bl	22dae <printk>
   15996:	4040      	eors	r0, r0
   15998:	f380 8811 	msr	BASEPRI, r0
   1599c:	f04f 0003 	mov.w	r0, #3
   159a0:	df02      	svc	2
		if (is_resume) {
   159a2:	f1b9 0f00 	cmp.w	r9, #0
   159a6:	d1d3      	bne.n	15950 <prepare+0x5c>
   159a8:	e7e7      	b.n	1597a <prepare+0x86>
	event.curr.param = prepare_param->param;
   159aa:	f8d8 200c 	ldr.w	r2, [r8, #12]
   159ae:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   159b0:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   159b4:	4640      	mov	r0, r8
   159b6:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   159b8:	2200      	movs	r2, #0
   159ba:	4b0f      	ldr	r3, [pc, #60]	; (159f8 <prepare+0x104>)
   159bc:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   159be:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   159c0:	4611      	mov	r1, r2
   159c2:	4610      	mov	r0, r2
   159c4:	f7f7 f926 	bl	cc14 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   159c8:	2802      	cmp	r0, #2
   159ca:	d9c3      	bls.n	15954 <prepare+0x60>
   159cc:	4a07      	ldr	r2, [pc, #28]	; (159ec <prepare+0xf8>)
   159ce:	490b      	ldr	r1, [pc, #44]	; (159fc <prepare+0x108>)
   159d0:	4808      	ldr	r0, [pc, #32]	; (159f4 <prepare+0x100>)
   159d2:	f240 2382 	movw	r3, #642	; 0x282
   159d6:	f00d f9ea 	bl	22dae <printk>
   159da:	4040      	eors	r0, r0
   159dc:	f380 8811 	msr	BASEPRI, r0
   159e0:	f04f 0003 	mov.w	r0, #3
   159e4:	df02      	svc	2
   159e6:	e7b5      	b.n	15954 <prepare+0x60>
   159e8:	20003900 	.word	0x20003900
   159ec:	0002cf94 	.word	0x0002cf94
   159f0:	0002c860 	.word	0x0002c860
   159f4:	0002c5e0 	.word	0x0002c5e0
   159f8:	00015821 	.word	0x00015821
   159fc:	0002cffc 	.word	0x0002cffc

00015a00 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   15a00:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   15a02:	4e4b      	ldr	r6, [pc, #300]	; (15b30 <preempt+0x130>)
   15a04:	68b3      	ldr	r3, [r6, #8]
{
   15a06:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   15a08:	b1b3      	cbz	r3, 15a38 <preempt+0x38>
   15a0a:	6833      	ldr	r3, [r6, #0]
   15a0c:	b1a3      	cbz	r3, 15a38 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   15a0e:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   15a10:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   15a14:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   15a18:	f7f9 fe3a 	bl	f690 <ull_prepare_dequeue_iter>
	if (!next) {
   15a1c:	4604      	mov	r4, r0
   15a1e:	b158      	cbz	r0, 15a38 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   15a20:	f894 3020 	ldrb.w	r3, [r4, #32]
   15a24:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   15a28:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   15a2c:	d006      	beq.n	15a3c <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   15a2e:	f7f9 fe2f 	bl	f690 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   15a32:	4604      	mov	r4, r0
   15a34:	2800      	cmp	r0, #0
   15a36:	d1f3      	bne.n	15a20 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   15a38:	b00b      	add	sp, #44	; 0x2c
   15a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   15a3c:	ab05      	add	r3, sp, #20
   15a3e:	e9d6 2700 	ldrd	r2, r7, [r6]
   15a42:	69e1      	ldr	r1, [r4, #28]
   15a44:	68e0      	ldr	r0, [r4, #12]
   15a46:	9300      	str	r3, [sp, #0]
   15a48:	ab04      	add	r3, sp, #16
   15a4a:	47b8      	blx	r7
	if (!ret) {
   15a4c:	4607      	mov	r7, r0
   15a4e:	2800      	cmp	r0, #0
   15a50:	d062      	beq.n	15b18 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   15a52:	68b3      	ldr	r3, [r6, #8]
   15a54:	6831      	ldr	r1, [r6, #0]
   15a56:	4628      	mov	r0, r5
   15a58:	4798      	blx	r3
	if (ret == -EAGAIN) {
   15a5a:	f117 0f0b 	cmn.w	r7, #11
   15a5e:	d01a      	beq.n	15a96 <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   15a60:	378c      	adds	r7, #140	; 0x8c
   15a62:	d011      	beq.n	15a88 <preempt+0x88>
   15a64:	4a33      	ldr	r2, [pc, #204]	; (15b34 <preempt+0x134>)
   15a66:	4934      	ldr	r1, [pc, #208]	; (15b38 <preempt+0x138>)
   15a68:	4834      	ldr	r0, [pc, #208]	; (15b3c <preempt+0x13c>)
   15a6a:	f44f 7346 	mov.w	r3, #792	; 0x318
   15a6e:	f00d f99e 	bl	22dae <printk>
   15a72:	4040      	eors	r0, r0
   15a74:	f380 8811 	msr	BASEPRI, r0
   15a78:	f04f 0003 	mov.w	r0, #3
   15a7c:	df02      	svc	2
   15a7e:	e003      	b.n	15a88 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   15a80:	f890 3020 	ldrb.w	r3, [r0, #32]
   15a84:	079b      	lsls	r3, r3, #30
   15a86:	d041      	beq.n	15b0c <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   15a88:	f10d 000e 	add.w	r0, sp, #14
   15a8c:	f7f9 fe00 	bl	f690 <ull_prepare_dequeue_iter>
		if (!next) {
   15a90:	2800      	cmp	r0, #0
   15a92:	d1f5      	bne.n	15a80 <preempt+0x80>
   15a94:	e7d0      	b.n	15a38 <preempt+0x38>
		iter_idx = UINT8_MAX;
   15a96:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   15a98:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   15a9c:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   15aa0:	f7f9 fdf6 	bl	f690 <ull_prepare_dequeue_iter>
		while (iter) {
   15aa4:	bb48      	cbnz	r0, 15afa <preempt+0xfa>
	prepare_param.param = event.curr.param;
   15aa6:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   15aa8:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15aaa:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   15aac:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15aae:	2301      	movs	r3, #1
	event.curr.param = NULL;
   15ab0:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15ab2:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   15ab4:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   15ab6:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   15aba:	9b04      	ldr	r3, [sp, #16]
   15abc:	aa06      	add	r2, sp, #24
   15abe:	f7f9 fd97 	bl	f5f0 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   15ac2:	2800      	cmp	r0, #0
   15ac4:	d0e0      	beq.n	15a88 <preempt+0x88>
   15ac6:	4a1b      	ldr	r2, [pc, #108]	; (15b34 <preempt+0x134>)
   15ac8:	491d      	ldr	r1, [pc, #116]	; (15b40 <preempt+0x140>)
   15aca:	481c      	ldr	r0, [pc, #112]	; (15b3c <preempt+0x13c>)
   15acc:	f240 3316 	movw	r3, #790	; 0x316
   15ad0:	f00d f96d 	bl	22dae <printk>
   15ad4:	4040      	eors	r0, r0
   15ad6:	f380 8811 	msr	BASEPRI, r0
   15ada:	f04f 0003 	mov.w	r0, #3
   15ade:	df02      	svc	2
   15ae0:	e7d2      	b.n	15a88 <preempt+0x88>
				iter->is_aborted = 1;
   15ae2:	f043 0302 	orr.w	r3, r3, #2
   15ae6:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   15aea:	6983      	ldr	r3, [r0, #24]
   15aec:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   15aee:	f10d 000f 	add.w	r0, sp, #15
   15af2:	f7f9 fdcd 	bl	f690 <ull_prepare_dequeue_iter>
		while (iter) {
   15af6:	2800      	cmp	r0, #0
   15af8:	d0d5      	beq.n	15aa6 <preempt+0xa6>
			if (!iter->is_aborted &&
   15afa:	f890 3020 	ldrb.w	r3, [r0, #32]
   15afe:	079a      	lsls	r2, r3, #30
   15b00:	d4f5      	bmi.n	15aee <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   15b02:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   15b04:	6831      	ldr	r1, [r6, #0]
   15b06:	4291      	cmp	r1, r2
   15b08:	d1f1      	bne.n	15aee <preempt+0xee>
   15b0a:	e7ea      	b.n	15ae2 <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   15b0c:	68c1      	ldr	r1, [r0, #12]
   15b0e:	6800      	ldr	r0, [r0, #0]
   15b10:	f7ff feb6 	bl	15880 <preempt_ticker_start.isra.0>
}
   15b14:	b00b      	add	sp, #44	; 0x2c
   15b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   15b18:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   15b1c:	69a2      	ldr	r2, [r4, #24]
   15b1e:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   15b20:	f043 0302 	orr.w	r3, r3, #2
   15b24:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   15b28:	4620      	mov	r0, r4
   15b2a:	4790      	blx	r2
		goto preempt_next;
   15b2c:	e7ac      	b.n	15a88 <preempt+0x88>
   15b2e:	bf00      	nop
   15b30:	20003900 	.word	0x20003900
   15b34:	0002cf94 	.word	0x0002cf94
   15b38:	0002d024 	.word	0x0002d024
   15b3c:	0002c5e0 	.word	0x0002c5e0
   15b40:	0002c86c 	.word	0x0002c86c

00015b44 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15b44:	2200      	movs	r2, #0
{
   15b46:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15b48:	4611      	mov	r1, r2
   15b4a:	4b0a      	ldr	r3, [pc, #40]	; (15b74 <preempt_ticker_cb+0x30>)
   15b4c:	2001      	movs	r0, #1
   15b4e:	f7f5 fd83 	bl	b658 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15b52:	b900      	cbnz	r0, 15b56 <preempt_ticker_cb+0x12>
}
   15b54:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   15b56:	4a08      	ldr	r2, [pc, #32]	; (15b78 <preempt_ticker_cb+0x34>)
   15b58:	4908      	ldr	r1, [pc, #32]	; (15b7c <preempt_ticker_cb+0x38>)
   15b5a:	4809      	ldr	r0, [pc, #36]	; (15b80 <preempt_ticker_cb+0x3c>)
   15b5c:	f240 23da 	movw	r3, #730	; 0x2da
   15b60:	f00d f925 	bl	22dae <printk>
   15b64:	4040      	eors	r0, r0
   15b66:	f380 8811 	msr	BASEPRI, r0
   15b6a:	f04f 0003 	mov.w	r0, #3
   15b6e:	df02      	svc	2
}
   15b70:	bd08      	pop	{r3, pc}
   15b72:	bf00      	nop
   15b74:	20000688 	.word	0x20000688
   15b78:	0002cf94 	.word	0x0002cf94
   15b7c:	0002c86c 	.word	0x0002c86c
   15b80:	0002c5e0 	.word	0x0002c5e0

00015b84 <lll_init>:
{
   15b84:	b510      	push	{r4, lr}
   15b86:	4816      	ldr	r0, [pc, #88]	; (15be0 <lll_init+0x5c>)
   15b88:	f009 fbc8 	bl	1f31c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   15b8c:	4b15      	ldr	r3, [pc, #84]	; (15be4 <lll_init+0x60>)
   15b8e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   15b90:	b310      	cbz	r0, 15bd8 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   15b92:	4b15      	ldr	r3, [pc, #84]	; (15be8 <lll_init+0x64>)
   15b94:	2400      	movs	r4, #0
   15b96:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   15b98:	f000 fa26 	bl	15fe8 <lll_clock_init>
	if (err < 0) {
   15b9c:	2800      	cmp	r0, #0
   15b9e:	db1a      	blt.n	15bd6 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   15ba0:	4622      	mov	r2, r4
   15ba2:	4621      	mov	r1, r4
   15ba4:	2001      	movs	r0, #1
   15ba6:	f7ee fc5d 	bl	4464 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   15baa:	4622      	mov	r2, r4
   15bac:	2101      	movs	r1, #1
   15bae:	200b      	movs	r0, #11
   15bb0:	f7ee fc58 	bl	4464 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   15bb4:	4622      	mov	r2, r4
   15bb6:	4621      	mov	r1, r4
   15bb8:	2018      	movs	r0, #24
   15bba:	f7ee fc53 	bl	4464 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   15bbe:	2001      	movs	r0, #1
   15bc0:	f7ee fc1e 	bl	4400 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   15bc4:	200b      	movs	r0, #11
   15bc6:	f7ee fc1b 	bl	4400 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   15bca:	2018      	movs	r0, #24
   15bcc:	f7ee fc18 	bl	4400 <arch_irq_enable>
	radio_setup();
   15bd0:	f001 fdb8 	bl	17744 <radio_setup>
	return 0;
   15bd4:	4620      	mov	r0, r4
}
   15bd6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   15bd8:	f06f 0012 	mvn.w	r0, #18
}
   15bdc:	bd10      	pop	{r4, pc}
   15bde:	bf00      	nop
   15be0:	0002d030 	.word	0x0002d030
   15be4:	200038fc 	.word	0x200038fc
   15be8:	20003900 	.word	0x20003900

00015bec <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   15bec:	4a04      	ldr	r2, [pc, #16]	; (15c00 <lll_csrand_get+0x14>)
{
   15bee:	b410      	push	{r4}
   15bf0:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   15bf2:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   15bf4:	6884      	ldr	r4, [r0, #8]
   15bf6:	b28a      	uxth	r2, r1
   15bf8:	4619      	mov	r1, r3
   15bfa:	6823      	ldr	r3, [r4, #0]
}
   15bfc:	bc10      	pop	{r4}
   15bfe:	4718      	bx	r3
   15c00:	200038fc 	.word	0x200038fc

00015c04 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   15c04:	4b08      	ldr	r3, [pc, #32]	; (15c28 <lll_csrand_isr_get+0x24>)
   15c06:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   15c08:	689a      	ldr	r2, [r3, #8]
{
   15c0a:	b410      	push	{r4}
   15c0c:	6854      	ldr	r4, [r2, #4]
   15c0e:	b134      	cbz	r4, 15c1e <lll_csrand_isr_get+0x1a>
   15c10:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   15c12:	46a4      	mov	ip, r4
   15c14:	4601      	mov	r1, r0
}
   15c16:	bc10      	pop	{r4}
   15c18:	4618      	mov	r0, r3
   15c1a:	2300      	movs	r3, #0
   15c1c:	4760      	bx	ip
   15c1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   15c22:	bc10      	pop	{r4}
   15c24:	4770      	bx	lr
   15c26:	bf00      	nop
   15c28:	200038fc 	.word	0x200038fc

00015c2c <lll_rand_isr_get>:
   15c2c:	f7ff bfea 	b.w	15c04 <lll_csrand_isr_get>

00015c30 <lll_reset>:
}
   15c30:	2000      	movs	r0, #0
   15c32:	4770      	bx	lr

00015c34 <lll_prepare>:
{
   15c34:	b510      	push	{r4, lr}
   15c36:	b082      	sub	sp, #8
   15c38:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   15c3a:	9400      	str	r4, [sp, #0]
   15c3c:	2400      	movs	r4, #0
   15c3e:	9401      	str	r4, [sp, #4]
   15c40:	f7ff fe58 	bl	158f4 <prepare>
}
   15c44:	b002      	add	sp, #8
   15c46:	bd10      	pop	{r4, pc}

00015c48 <lll_resume>:
{
   15c48:	b510      	push	{r4, lr}
   15c4a:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   15c4c:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   15c4e:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   15c52:	69c3      	ldr	r3, [r0, #28]
   15c54:	6902      	ldr	r2, [r0, #16]
   15c56:	f004 0401 	and.w	r4, r4, #1
   15c5a:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   15c5e:	9401      	str	r4, [sp, #4]
   15c60:	f7ff fe48 	bl	158f4 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   15c64:	b108      	cbz	r0, 15c6a <lll_resume+0x22>
   15c66:	3077      	adds	r0, #119	; 0x77
   15c68:	d101      	bne.n	15c6e <lll_resume+0x26>
}
   15c6a:	b002      	add	sp, #8
   15c6c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   15c6e:	4a07      	ldr	r2, [pc, #28]	; (15c8c <lll_resume+0x44>)
   15c70:	4907      	ldr	r1, [pc, #28]	; (15c90 <lll_resume+0x48>)
   15c72:	4808      	ldr	r0, [pc, #32]	; (15c94 <lll_resume+0x4c>)
   15c74:	23fe      	movs	r3, #254	; 0xfe
   15c76:	f00d f89a 	bl	22dae <printk>
   15c7a:	4040      	eors	r0, r0
   15c7c:	f380 8811 	msr	BASEPRI, r0
   15c80:	f04f 0003 	mov.w	r0, #3
   15c84:	df02      	svc	2
}
   15c86:	b002      	add	sp, #8
   15c88:	bd10      	pop	{r4, pc}
   15c8a:	bf00      	nop
   15c8c:	0002cf94 	.word	0x0002cf94
   15c90:	0002d034 	.word	0x0002d034
   15c94:	0002c5e0 	.word	0x0002c5e0

00015c98 <lll_disable>:
{
   15c98:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   15c9a:	4604      	mov	r4, r0
{
   15c9c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   15c9e:	2800      	cmp	r0, #0
   15ca0:	d035      	beq.n	15d0e <lll_disable+0x76>
   15ca2:	4b27      	ldr	r3, [pc, #156]	; (15d40 <lll_disable+0xa8>)
   15ca4:	681a      	ldr	r2, [r3, #0]
   15ca6:	4282      	cmp	r2, r0
   15ca8:	d02b      	beq.n	15d02 <lll_disable+0x6a>
		idx = UINT8_MAX;
   15caa:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   15cac:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   15cb0:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   15cb4:	f7f9 fcec 	bl	f690 <ull_prepare_dequeue_iter>
		while (next) {
   15cb8:	4603      	mov	r3, r0
   15cba:	b940      	cbnz	r0, 15cce <lll_disable+0x36>
   15cbc:	e01f      	b.n	15cfe <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   15cbe:	4294      	cmp	r4, r2
   15cc0:	d00e      	beq.n	15ce0 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   15cc2:	f10d 0007 	add.w	r0, sp, #7
   15cc6:	f7f9 fce3 	bl	f690 <ull_prepare_dequeue_iter>
		while (next) {
   15cca:	4603      	mov	r3, r0
   15ccc:	b1b8      	cbz	r0, 15cfe <lll_disable+0x66>
			if (!next->is_aborted &&
   15cce:	f893 2020 	ldrb.w	r2, [r3, #32]
   15cd2:	0792      	lsls	r2, r2, #30
   15cd4:	d4f5      	bmi.n	15cc2 <lll_disable+0x2a>
				next->is_aborted = 1;
   15cd6:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   15cd8:	4618      	mov	r0, r3
   15cda:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   15cdc:	2c00      	cmp	r4, #0
   15cde:	d1ee      	bne.n	15cbe <lll_disable+0x26>
				next->is_aborted = 1;
   15ce0:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   15ce4:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   15ce6:	f042 0202 	orr.w	r2, r2, #2
   15cea:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   15cee:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   15cf0:	f10d 0007 	add.w	r0, sp, #7
   15cf4:	f7f9 fccc 	bl	f690 <ull_prepare_dequeue_iter>
		while (next) {
   15cf8:	4603      	mov	r3, r0
   15cfa:	2800      	cmp	r0, #0
   15cfc:	d1e7      	bne.n	15cce <lll_disable+0x36>
}
   15cfe:	b003      	add	sp, #12
   15d00:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   15d02:	689b      	ldr	r3, [r3, #8]
   15d04:	b16b      	cbz	r3, 15d22 <lll_disable+0x8a>
   15d06:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   15d08:	2000      	movs	r0, #0
   15d0a:	4798      	blx	r3
   15d0c:	e7cd      	b.n	15caa <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   15d0e:	4a0c      	ldr	r2, [pc, #48]	; (15d40 <lll_disable+0xa8>)
   15d10:	6893      	ldr	r3, [r2, #8]
   15d12:	2b00      	cmp	r3, #0
   15d14:	d0c9      	beq.n	15caa <lll_disable+0x12>
   15d16:	6811      	ldr	r1, [r2, #0]
   15d18:	2900      	cmp	r1, #0
   15d1a:	d0c6      	beq.n	15caa <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   15d1c:	2000      	movs	r0, #0
   15d1e:	4798      	blx	r3
   15d20:	e7c3      	b.n	15caa <lll_disable+0x12>
			LL_ASSERT(!param);
   15d22:	4a08      	ldr	r2, [pc, #32]	; (15d44 <lll_disable+0xac>)
   15d24:	4908      	ldr	r1, [pc, #32]	; (15d48 <lll_disable+0xb0>)
   15d26:	4809      	ldr	r0, [pc, #36]	; (15d4c <lll_disable+0xb4>)
   15d28:	f44f 7384 	mov.w	r3, #264	; 0x108
   15d2c:	f00d f83f 	bl	22dae <printk>
   15d30:	4040      	eors	r0, r0
   15d32:	f380 8811 	msr	BASEPRI, r0
   15d36:	f04f 0003 	mov.w	r0, #3
   15d3a:	df02      	svc	2
   15d3c:	e7b5      	b.n	15caa <lll_disable+0x12>
   15d3e:	bf00      	nop
   15d40:	20003900 	.word	0x20003900
   15d44:	0002cf94 	.word	0x0002cf94
   15d48:	0002d048 	.word	0x0002d048
   15d4c:	0002c5e0 	.word	0x0002c5e0

00015d50 <lll_prepare_done>:
}
   15d50:	2000      	movs	r0, #0
   15d52:	4770      	bx	lr

00015d54 <lll_done>:
{
   15d54:	b510      	push	{r4, lr}
   15d56:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   15d58:	f7f9 fc8c 	bl	f674 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   15d5c:	b13c      	cbz	r4, 15d6e <lll_done+0x1a>
   15d5e:	b320      	cbz	r0, 15daa <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   15d60:	6820      	ldr	r0, [r4, #0]
   15d62:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   15d64:	f7f9 fcc2 	bl	f6ec <ull_event_done>
	LL_ASSERT(evdone);
   15d68:	b180      	cbz	r0, 15d8c <lll_done+0x38>
}
   15d6a:	2000      	movs	r0, #0
   15d6c:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   15d6e:	4c1d      	ldr	r4, [pc, #116]	; (15de4 <lll_done+0x90>)
   15d70:	68a3      	ldr	r3, [r4, #8]
   15d72:	b343      	cbz	r3, 15dc6 <lll_done+0x72>
		param = event.curr.param;
   15d74:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   15d76:	2300      	movs	r3, #0
   15d78:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   15d7a:	6023      	str	r3, [r4, #0]
		if (param) {
   15d7c:	2800      	cmp	r0, #0
   15d7e:	d0f1      	beq.n	15d64 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   15d80:	6800      	ldr	r0, [r0, #0]
   15d82:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   15d84:	f7f9 fcb2 	bl	f6ec <ull_event_done>
	LL_ASSERT(evdone);
   15d88:	2800      	cmp	r0, #0
   15d8a:	d1ee      	bne.n	15d6a <lll_done+0x16>
   15d8c:	4a16      	ldr	r2, [pc, #88]	; (15de8 <lll_done+0x94>)
   15d8e:	4917      	ldr	r1, [pc, #92]	; (15dec <lll_done+0x98>)
   15d90:	4817      	ldr	r0, [pc, #92]	; (15df0 <lll_done+0x9c>)
   15d92:	f240 1359 	movw	r3, #345	; 0x159
   15d96:	f00d f80a 	bl	22dae <printk>
   15d9a:	4040      	eors	r0, r0
   15d9c:	f380 8811 	msr	BASEPRI, r0
   15da0:	f04f 0003 	mov.w	r0, #3
   15da4:	df02      	svc	2
}
   15da6:	2000      	movs	r0, #0
   15da8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   15daa:	4a0f      	ldr	r2, [pc, #60]	; (15de8 <lll_done+0x94>)
   15dac:	4911      	ldr	r1, [pc, #68]	; (15df4 <lll_done+0xa0>)
   15dae:	4810      	ldr	r0, [pc, #64]	; (15df0 <lll_done+0x9c>)
   15db0:	f240 133b 	movw	r3, #315	; 0x13b
   15db4:	f00c fffb 	bl	22dae <printk>
   15db8:	4040      	eors	r0, r0
   15dba:	f380 8811 	msr	BASEPRI, r0
   15dbe:	f04f 0003 	mov.w	r0, #3
   15dc2:	df02      	svc	2
   15dc4:	e7cc      	b.n	15d60 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   15dc6:	4a08      	ldr	r2, [pc, #32]	; (15de8 <lll_done+0x94>)
   15dc8:	490b      	ldr	r1, [pc, #44]	; (15df8 <lll_done+0xa4>)
   15dca:	4809      	ldr	r0, [pc, #36]	; (15df0 <lll_done+0x9c>)
   15dcc:	f240 1341 	movw	r3, #321	; 0x141
   15dd0:	f00c ffed 	bl	22dae <printk>
   15dd4:	4040      	eors	r0, r0
   15dd6:	f380 8811 	msr	BASEPRI, r0
   15dda:	f04f 0003 	mov.w	r0, #3
   15dde:	df02      	svc	2
   15de0:	e7c8      	b.n	15d74 <lll_done+0x20>
   15de2:	bf00      	nop
   15de4:	20003900 	.word	0x20003900
   15de8:	0002cf94 	.word	0x0002cf94
   15dec:	0002d074 	.word	0x0002d074
   15df0:	0002c5e0 	.word	0x0002c5e0
   15df4:	0002d050 	.word	0x0002d050
   15df8:	0002d060 	.word	0x0002d060

00015dfc <lll_is_abort_cb>:
}
   15dfc:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   15e00:	4770      	bx	lr
   15e02:	bf00      	nop

00015e04 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   15e04:	e9d0 2300 	ldrd	r2, r3, [r0]
   15e08:	2a00      	cmp	r2, #0
   15e0a:	db04      	blt.n	15e16 <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   15e0c:	429a      	cmp	r2, r3
   15e0e:	bf38      	it	cc
   15e10:	461a      	movcc	r2, r3
   15e12:	4610      	mov	r0, r2
}
   15e14:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   15e16:	6880      	ldr	r0, [r0, #8]
   15e18:	4298      	cmp	r0, r3
   15e1a:	bf38      	it	cc
   15e1c:	4618      	movcc	r0, r3
   15e1e:	4770      	bx	lr

00015e20 <lll_preempt_calc>:
{
   15e20:	b510      	push	{r4, lr}
   15e22:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   15e24:	f7f6 ff3c 	bl	cca0 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   15e28:	4621      	mov	r1, r4
   15e2a:	f7f6 ff3b 	bl	cca4 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   15e2e:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   15e30:	0203      	lsls	r3, r0, #8
   15e32:	d404      	bmi.n	15e3e <lll_preempt_calc+0x1e>
   15e34:	2809      	cmp	r0, #9
   15e36:	bf94      	ite	ls
   15e38:	2000      	movls	r0, #0
   15e3a:	2001      	movhi	r0, #1
}
   15e3c:	bd10      	pop	{r4, pc}
	return 0;
   15e3e:	2000      	movs	r0, #0
}
   15e40:	bd10      	pop	{r4, pc}
   15e42:	bf00      	nop

00015e44 <lll_chan_set>:
	switch (chan) {
   15e44:	2826      	cmp	r0, #38	; 0x26
{
   15e46:	b510      	push	{r4, lr}
   15e48:	4604      	mov	r4, r0
	switch (chan) {
   15e4a:	d01c      	beq.n	15e86 <lll_chan_set+0x42>
   15e4c:	2827      	cmp	r0, #39	; 0x27
   15e4e:	d012      	beq.n	15e76 <lll_chan_set+0x32>
   15e50:	2825      	cmp	r0, #37	; 0x25
   15e52:	d008      	beq.n	15e66 <lll_chan_set+0x22>
		if (chan < 11) {
   15e54:	280a      	cmp	r0, #10
   15e56:	d91e      	bls.n	15e96 <lll_chan_set+0x52>
		} else if (chan < 40) {
   15e58:	2827      	cmp	r0, #39	; 0x27
   15e5a:	d821      	bhi.n	15ea0 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   15e5c:	3003      	adds	r0, #3
   15e5e:	0040      	lsls	r0, r0, #1
   15e60:	f001 fccc 	bl	177fc <radio_freq_chan_set>
   15e64:	e002      	b.n	15e6c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   15e66:	2002      	movs	r0, #2
   15e68:	f001 fcc8 	bl	177fc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15e6c:	4620      	mov	r0, r4
}
   15e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15e72:	f001 bcc9 	b.w	17808 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   15e76:	2050      	movs	r0, #80	; 0x50
   15e78:	f001 fcc0 	bl	177fc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15e7c:	4620      	mov	r0, r4
}
   15e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15e82:	f001 bcc1 	b.w	17808 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   15e86:	201a      	movs	r0, #26
   15e88:	f001 fcb8 	bl	177fc <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   15e8c:	4620      	mov	r0, r4
}
   15e8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   15e92:	f001 bcb9 	b.w	17808 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   15e96:	3002      	adds	r0, #2
   15e98:	0040      	lsls	r0, r0, #1
   15e9a:	f001 fcaf 	bl	177fc <radio_freq_chan_set>
   15e9e:	e7e5      	b.n	15e6c <lll_chan_set+0x28>
			LL_ASSERT(0);
   15ea0:	4a06      	ldr	r2, [pc, #24]	; (15ebc <lll_chan_set+0x78>)
   15ea2:	4907      	ldr	r1, [pc, #28]	; (15ec0 <lll_chan_set+0x7c>)
   15ea4:	4807      	ldr	r0, [pc, #28]	; (15ec4 <lll_chan_set+0x80>)
   15ea6:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   15eaa:	f00c ff80 	bl	22dae <printk>
   15eae:	4040      	eors	r0, r0
   15eb0:	f380 8811 	msr	BASEPRI, r0
   15eb4:	f04f 0003 	mov.w	r0, #3
   15eb8:	df02      	svc	2
   15eba:	e7d7      	b.n	15e6c <lll_chan_set+0x28>
   15ebc:	0002cf94 	.word	0x0002cf94
   15ec0:	0002c650 	.word	0x0002c650
   15ec4:	0002c5e0 	.word	0x0002c5e0

00015ec8 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   15ec8:	f001 bd06 	b.w	178d8 <radio_rx_ready_delay_get>

00015ecc <lll_isr_tx_status_reset>:
{
   15ecc:	b508      	push	{r3, lr}
	radio_status_reset();
   15ece:	f001 fd29 	bl	17924 <radio_status_reset>
}
   15ed2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   15ed6:	f001 bde9 	b.w	17aac <radio_tmr_status_reset>
   15eda:	bf00      	nop

00015edc <lll_isr_rx_status_reset>:
{
   15edc:	b508      	push	{r3, lr}
	radio_status_reset();
   15ede:	f001 fd21 	bl	17924 <radio_status_reset>
	radio_tmr_status_reset();
   15ee2:	f001 fde3 	bl	17aac <radio_tmr_status_reset>
}
   15ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   15eea:	f001 bd8f 	b.w	17a0c <radio_rssi_status_reset>
   15eee:	bf00      	nop

00015ef0 <lll_isr_status_reset>:
{
   15ef0:	b508      	push	{r3, lr}
	radio_status_reset();
   15ef2:	f001 fd17 	bl	17924 <radio_status_reset>
	radio_tmr_status_reset();
   15ef6:	f001 fdd9 	bl	17aac <radio_tmr_status_reset>
	radio_filter_status_reset();
   15efa:	f001 fdbf 	bl	17a7c <radio_filter_status_reset>
	radio_ar_status_reset();
   15efe:	f001 ff9d 	bl	17e3c <radio_ar_status_reset>
}
   15f02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   15f06:	f001 bd81 	b.w	17a0c <radio_rssi_status_reset>
   15f0a:	bf00      	nop

00015f0c <lll_isr_cleanup>:
{
   15f0c:	b508      	push	{r3, lr}
   15f0e:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   15f10:	4815      	ldr	r0, [pc, #84]	; (15f68 <lll_isr_cleanup+0x5c>)
   15f12:	f001 fbf7 	bl	17704 <radio_isr_set>
	if (!radio_is_idle()) {
   15f16:	f001 fd25 	bl	17964 <radio_is_idle>
   15f1a:	b150      	cbz	r0, 15f32 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   15f1c:	f001 fe68 	bl	17bf0 <radio_tmr_stop>
	err = lll_hfclock_off();
   15f20:	f000 f8a6 	bl	16070 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15f24:	2800      	cmp	r0, #0
   15f26:	db0c      	blt.n	15f42 <lll_isr_cleanup+0x36>
}
   15f28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   15f2c:	2000      	movs	r0, #0
   15f2e:	f7ff bf11 	b.w	15d54 <lll_done>
		radio_disable();
   15f32:	f001 fcdf 	bl	178f4 <radio_disable>
	radio_tmr_stop();
   15f36:	f001 fe5b 	bl	17bf0 <radio_tmr_stop>
	err = lll_hfclock_off();
   15f3a:	f000 f899 	bl	16070 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   15f3e:	2800      	cmp	r0, #0
   15f40:	daf2      	bge.n	15f28 <lll_isr_cleanup+0x1c>
   15f42:	4a0a      	ldr	r2, [pc, #40]	; (15f6c <lll_isr_cleanup+0x60>)
   15f44:	490a      	ldr	r1, [pc, #40]	; (15f70 <lll_isr_cleanup+0x64>)
   15f46:	480b      	ldr	r0, [pc, #44]	; (15f74 <lll_isr_cleanup+0x68>)
   15f48:	f240 231f 	movw	r3, #543	; 0x21f
   15f4c:	f00c ff2f 	bl	22dae <printk>
   15f50:	4040      	eors	r0, r0
   15f52:	f380 8811 	msr	BASEPRI, r0
   15f56:	f04f 0003 	mov.w	r0, #3
   15f5a:	df02      	svc	2
	lll_done(NULL);
   15f5c:	2000      	movs	r0, #0
}
   15f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   15f62:	f7ff bef7 	b.w	15d54 <lll_done>
   15f66:	bf00      	nop
   15f68:	0001581d 	.word	0x0001581d
   15f6c:	0002cf94 	.word	0x0002cf94
   15f70:	0002d07c 	.word	0x0002d07c
   15f74:	0002c5e0 	.word	0x0002c5e0

00015f78 <lll_isr_abort>:
{
   15f78:	b510      	push	{r4, lr}
   15f7a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   15f7c:	f7ff ffb8 	bl	15ef0 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   15f80:	4620      	mov	r0, r4
}
   15f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   15f86:	f7ff bfc1 	b.w	15f0c <lll_isr_cleanup>
   15f8a:	bf00      	nop

00015f8c <clock_ready>:
	z_impl_k_sem_give(sem);
   15f8c:	f101 0010 	add.w	r0, r1, #16
   15f90:	f00a b878 	b.w	20084 <z_impl_k_sem_give>

00015f94 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   15f94:	b530      	push	{r4, r5, lr}
   15f96:	4604      	mov	r4, r0
   15f98:	b08b      	sub	sp, #44	; 0x2c
   15f9a:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   15f9c:	2201      	movs	r2, #1
   15f9e:	2100      	movs	r1, #0
   15fa0:	a804      	add	r0, sp, #16
   15fa2:	f015 f919 	bl	2b1d8 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   15fa6:	2300      	movs	r3, #0
   15fa8:	4a0e      	ldr	r2, [pc, #56]	; (15fe4 <blocking_on+0x50>)
   15faa:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   15fac:	4620      	mov	r0, r4
   15fae:	2303      	movs	r3, #3
   15fb0:	4669      	mov	r1, sp
   15fb2:	9201      	str	r2, [sp, #4]
   15fb4:	9302      	str	r3, [sp, #8]
   15fb6:	f00c ff76 	bl	22ea6 <onoff_request>
	if (err < 0) {
   15fba:	2800      	cmp	r0, #0
   15fbc:	db10      	blt.n	15fe0 <blocking_on+0x4c>
   15fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15fc2:	f240 30e7 	movw	r0, #999	; 0x3e7
   15fc6:	2100      	movs	r1, #0
   15fc8:	fbe3 0105 	umlal	r0, r1, r3, r5
   15fcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15fd0:	2300      	movs	r3, #0
   15fd2:	f7ea f8d5 	bl	180 <__aeabi_uldivmod>
   15fd6:	4602      	mov	r2, r0
   15fd8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   15fda:	a804      	add	r0, sp, #16
   15fdc:	f00a f878 	bl	200d0 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   15fe0:	b00b      	add	sp, #44	; 0x2c
   15fe2:	bd30      	pop	{r4, r5, pc}
   15fe4:	00015f8d 	.word	0x00015f8d

00015fe8 <lll_clock_init>:

int lll_clock_init(void)
{
   15fe8:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   15fea:	2001      	movs	r0, #1
   15fec:	f7ed fd32 	bl	3a54 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   15ff0:	4904      	ldr	r1, [pc, #16]	; (16004 <lll_clock_init+0x1c>)
   15ff2:	2401      	movs	r4, #1
   15ff4:	2300      	movs	r3, #0
   15ff6:	608c      	str	r4, [r1, #8]
   15ff8:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   15ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15ffe:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   16000:	f00c bf51 	b.w	22ea6 <onoff_request>
   16004:	20003918 	.word	0x20003918

00016008 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   16008:	4b0c      	ldr	r3, [pc, #48]	; (1603c <lll_clock_wait+0x34>)
   1600a:	781a      	ldrb	r2, [r3, #0]
   1600c:	b10a      	cbz	r2, 16012 <lll_clock_wait+0xa>
		return 0;
   1600e:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   16010:	4770      	bx	lr
{
   16012:	b510      	push	{r4, lr}
	done = true;
   16014:	2001      	movs	r0, #1
   16016:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16018:	f7ed fd1c 	bl	3a54 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1601c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16020:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   16022:	f7ff ffb7 	bl	15f94 <blocking_on>
	if (err) {
   16026:	b938      	cbnz	r0, 16038 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   16028:	4620      	mov	r0, r4
   1602a:	f00c ff85 	bl	22f38 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1602e:	2802      	cmp	r0, #2
		return 0;
   16030:	bf0c      	ite	eq
   16032:	2000      	moveq	r0, #0
		return -EIO;
   16034:	f06f 0004 	mvnne.w	r0, #4
}
   16038:	bd10      	pop	{r4, pc}
   1603a:	bf00      	nop
   1603c:	20008604 	.word	0x20008604

00016040 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   16040:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16042:	4b0a      	ldr	r3, [pc, #40]	; (1606c <lll_hfclock_on+0x2c>)
   16044:	f3bf 8f5b 	dmb	ish
   16048:	e853 2f00 	ldrex	r2, [r3]
   1604c:	1c51      	adds	r1, r2, #1
   1604e:	e843 1000 	strex	r0, r1, [r3]
   16052:	2800      	cmp	r0, #0
   16054:	d1f8      	bne.n	16048 <lll_hfclock_on+0x8>
   16056:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1605a:	2a00      	cmp	r2, #0
   1605c:	dd01      	ble.n	16062 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1605e:	2000      	movs	r0, #0
   16060:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   16062:	f7ed fcff 	bl	3a64 <z_nrf_clock_bt_ctlr_hf_request>
}
   16066:	2000      	movs	r0, #0
   16068:	bd08      	pop	{r3, pc}
   1606a:	bf00      	nop
   1606c:	20003914 	.word	0x20003914

00016070 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   16070:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   16072:	4b0d      	ldr	r3, [pc, #52]	; (160a8 <lll_hfclock_off+0x38>)
   16074:	681a      	ldr	r2, [r3, #0]
   16076:	2a00      	cmp	r2, #0
   16078:	dd12      	ble.n	160a0 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1607a:	f3bf 8f5b 	dmb	ish
   1607e:	e853 2f00 	ldrex	r2, [r3]
   16082:	1e51      	subs	r1, r2, #1
   16084:	e843 1000 	strex	r0, r1, [r3]
   16088:	2800      	cmp	r0, #0
   1608a:	d1f8      	bne.n	1607e <lll_hfclock_off+0xe>
   1608c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   16090:	2a01      	cmp	r2, #1
   16092:	dd01      	ble.n	16098 <lll_hfclock_off+0x28>
		return 0;
   16094:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   16096:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   16098:	f7ed fcfa 	bl	3a90 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1609c:	2000      	movs	r0, #0
}
   1609e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   160a0:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   160a4:	bd08      	pop	{r3, pc}
   160a6:	bf00      	nop
   160a8:	20003914 	.word	0x20003914

000160ac <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   160ac:	2014      	movs	r0, #20
   160ae:	4770      	bx	lr

000160b0 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   160b0:	4b01      	ldr	r3, [pc, #4]	; (160b8 <lll_clock_ppm_get+0x8>)
}
   160b2:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   160b6:	4770      	bx	lr
   160b8:	0002d0a8 	.word	0x0002d0a8

000160bc <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   160bc:	b510      	push	{r4, lr}
   160be:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   160c0:	f7ff ff16 	bl	15ef0 <lll_isr_status_reset>

	radio_filter_disable();
   160c4:	f001 fcd0 	bl	17a68 <radio_filter_disable>

	lll_isr_cleanup(param);
   160c8:	4620      	mov	r0, r4
}
   160ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   160ce:	f7ff bf1d 	b.w	15f0c <lll_isr_cleanup>
   160d2:	bf00      	nop

000160d4 <isr_tx>:
{
   160d4:	b530      	push	{r4, r5, lr}
   160d6:	b083      	sub	sp, #12
   160d8:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   160da:	f7ff fef7 	bl	15ecc <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   160de:	2096      	movs	r0, #150	; 0x96
   160e0:	f001 fcf4 	bl	17acc <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   160e4:	2300      	movs	r3, #0
   160e6:	461a      	mov	r2, r3
   160e8:	4619      	mov	r1, r3
   160ea:	4618      	mov	r0, r3
   160ec:	f001 fc74 	bl	179d8 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   160f0:	f001 fc5c 	bl	179ac <radio_pkt_scratch_get>
   160f4:	f001 fbe2 	bl	178bc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   160f8:	f001 fc20 	bl	1793c <radio_is_ready>
   160fc:	b9d8      	cbnz	r0, 16136 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   160fe:	481e      	ldr	r0, [pc, #120]	; (16178 <isr_tx+0xa4>)
   16100:	4621      	mov	r1, r4
   16102:	f001 faff 	bl	17704 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   16106:	f7ff fb57 	bl	157b8 <ull_filter_lll_rl_enabled>
   1610a:	bb48      	cbnz	r0, 16160 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1610c:	f001 fdcc 	bl	17ca8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16110:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   16112:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16114:	4608      	mov	r0, r1
   16116:	f001 fbe1 	bl	178dc <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1611a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1611c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1611e:	4608      	mov	r0, r1
   16120:	f001 fbd8 	bl	178d4 <radio_tx_chain_delay_get>
   16124:	442c      	add	r4, r5
   16126:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   16128:	1a20      	subs	r0, r4, r0
   1612a:	f001 fd75 	bl	17c18 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   1612e:	f001 fdad 	bl	17c8c <radio_tmr_end_capture>
}
   16132:	b003      	add	sp, #12
   16134:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   16136:	4a11      	ldr	r2, [pc, #68]	; (1617c <isr_tx+0xa8>)
   16138:	4911      	ldr	r1, [pc, #68]	; (16180 <isr_tx+0xac>)
   1613a:	4812      	ldr	r0, [pc, #72]	; (16184 <isr_tx+0xb0>)
   1613c:	f240 238d 	movw	r3, #653	; 0x28d
   16140:	f00c fe35 	bl	22dae <printk>
   16144:	4040      	eors	r0, r0
   16146:	f380 8811 	msr	BASEPRI, r0
   1614a:	f04f 0003 	mov.w	r0, #3
   1614e:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   16150:	4809      	ldr	r0, [pc, #36]	; (16178 <isr_tx+0xa4>)
   16152:	4621      	mov	r1, r4
   16154:	f001 fad6 	bl	17704 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   16158:	f7ff fb2e 	bl	157b8 <ull_filter_lll_rl_enabled>
   1615c:	2800      	cmp	r0, #0
   1615e:	d0d5      	beq.n	1610c <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   16160:	f10d 0007 	add.w	r0, sp, #7
   16164:	f7ff fa52 	bl	1560c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   16168:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1616a:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1616c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16170:	f001 fe2c 	bl	17dcc <radio_ar_configure>
   16174:	e7ca      	b.n	1610c <isr_tx+0x38>
   16176:	bf00      	nop
   16178:	000168b5 	.word	0x000168b5
   1617c:	0002d0b8 	.word	0x0002d0b8
   16180:	0002d104 	.word	0x0002d104
   16184:	0002c5e0 	.word	0x0002c5e0

00016188 <is_abort_cb>:
	if (next != curr) {
   16188:	4282      	cmp	r2, r0
{
   1618a:	b508      	push	{r3, lr}
	if (next != curr) {
   1618c:	d011      	beq.n	161b2 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1618e:	7b12      	ldrb	r2, [r2, #12]
   16190:	07d2      	lsls	r2, r2, #31
   16192:	d402      	bmi.n	1619a <is_abort_cb+0x12>
			return -ECANCELED;
   16194:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   16198:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1619a:	4a14      	ldr	r2, [pc, #80]	; (161ec <is_abort_cb+0x64>)
   1619c:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1619e:	9a02      	ldr	r2, [sp, #8]
   161a0:	2300      	movs	r3, #0
   161a2:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   161a4:	f7ff ff4c 	bl	16040 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   161a8:	2800      	cmp	r0, #0
   161aa:	db0f      	blt.n	161cc <is_abort_cb+0x44>
   161ac:	f06f 000a 	mvn.w	r0, #10
}
   161b0:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   161b2:	7c13      	ldrb	r3, [r2, #16]
   161b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   161b8:	6953      	ldr	r3, [r2, #20]
   161ba:	781b      	ldrb	r3, [r3, #0]
   161bc:	f003 030f 	and.w	r3, r3, #15
   161c0:	2b01      	cmp	r3, #1
		return 0;
   161c2:	bf14      	ite	ne
   161c4:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   161c8:	2000      	moveq	r0, #0
}
   161ca:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   161cc:	4a08      	ldr	r2, [pc, #32]	; (161f0 <is_abort_cb+0x68>)
   161ce:	4909      	ldr	r1, [pc, #36]	; (161f4 <is_abort_cb+0x6c>)
   161d0:	4809      	ldr	r0, [pc, #36]	; (161f8 <is_abort_cb+0x70>)
   161d2:	f240 234b 	movw	r3, #587	; 0x24b
   161d6:	f00c fdea 	bl	22dae <printk>
   161da:	4040      	eors	r0, r0
   161dc:	f380 8811 	msr	BASEPRI, r0
   161e0:	f04f 0003 	mov.w	r0, #3
   161e4:	df02      	svc	2
   161e6:	f06f 000a 	mvn.w	r0, #10
}
   161ea:	bd08      	pop	{r3, pc}
   161ec:	0001668d 	.word	0x0001668d
   161f0:	0002d0b8 	.word	0x0002d0b8
   161f4:	0002d07c 	.word	0x0002d07c
   161f8:	0002c5e0 	.word	0x0002c5e0

000161fc <abort_cb>:
{
   161fc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   161fe:	b1d8      	cbz	r0, 16238 <abort_cb+0x3c>
	err = lll_hfclock_off();
   16200:	460c      	mov	r4, r1
   16202:	f7ff ff35 	bl	16070 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16206:	2800      	cmp	r0, #0
   16208:	db04      	blt.n	16214 <abort_cb+0x18>
	lll_done(param);
   1620a:	4620      	mov	r0, r4
}
   1620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16210:	f7ff bda0 	b.w	15d54 <lll_done>
	LL_ASSERT(err >= 0);
   16214:	4a0c      	ldr	r2, [pc, #48]	; (16248 <abort_cb+0x4c>)
   16216:	490d      	ldr	r1, [pc, #52]	; (1624c <abort_cb+0x50>)
   16218:	480d      	ldr	r0, [pc, #52]	; (16250 <abort_cb+0x54>)
   1621a:	f240 2371 	movw	r3, #625	; 0x271
   1621e:	f00c fdc6 	bl	22dae <printk>
   16222:	4040      	eors	r0, r0
   16224:	f380 8811 	msr	BASEPRI, r0
   16228:	f04f 0003 	mov.w	r0, #3
   1622c:	df02      	svc	2
	lll_done(param);
   1622e:	4620      	mov	r0, r4
}
   16230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16234:	f7ff bd8e 	b.w	15d54 <lll_done>
		radio_isr_set(isr_abort, param);
   16238:	4806      	ldr	r0, [pc, #24]	; (16254 <abort_cb+0x58>)
   1623a:	f001 fa63 	bl	17704 <radio_isr_set>
}
   1623e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   16242:	f001 bb57 	b.w	178f4 <radio_disable>
   16246:	bf00      	nop
   16248:	0002d0b8 	.word	0x0002d0b8
   1624c:	0002d07c 	.word	0x0002d07c
   16250:	0002c5e0 	.word	0x0002c5e0
   16254:	000160bd 	.word	0x000160bd

00016258 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   16258:	4b08      	ldr	r3, [pc, #32]	; (1627c <lll_adv_init+0x24>)
{
   1625a:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1625c:	1d18      	adds	r0, r3, #4
   1625e:	2205      	movs	r2, #5
   16260:	2128      	movs	r1, #40	; 0x28
   16262:	f7f5 f903 	bl	b46c <mem_init>
	MFIFO_INIT(pdu_free);
   16266:	4b06      	ldr	r3, [pc, #24]	; (16280 <lll_adv_init+0x28>)
   16268:	2400      	movs	r4, #0
   1626a:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1626c:	2203      	movs	r2, #3
   1626e:	4621      	mov	r1, r4
   16270:	4804      	ldr	r0, [pc, #16]	; (16284 <lll_adv_init+0x2c>)
   16272:	f014 ffb1 	bl	2b1d8 <z_impl_k_sem_init>
}
   16276:	4620      	mov	r0, r4
   16278:	bd10      	pop	{r4, pc}
   1627a:	bf00      	nop
   1627c:	20003928 	.word	0x20003928
   16280:	20000698 	.word	0x20000698
   16284:	200039f4 	.word	0x200039f4

00016288 <lll_adv_reset>:
   16288:	f7ff bfe6 	b.w	16258 <lll_adv_init>

0001628c <lll_adv_data_init>:
{
   1628c:	b510      	push	{r4, lr}
   1628e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   16290:	4804      	ldr	r0, [pc, #16]	; (162a4 <lll_adv_data_init+0x18>)
   16292:	f7f5 f90b 	bl	b4ac <mem_acquire>
	if (!p) {
   16296:	b110      	cbz	r0, 1629e <lll_adv_data_init+0x12>
	pdu->pdu[0] = (void *)p;
   16298:	6060      	str	r0, [r4, #4]
	return 0;
   1629a:	2000      	movs	r0, #0
}
   1629c:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1629e:	f06f 000b 	mvn.w	r0, #11
}
   162a2:	bd10      	pop	{r4, pc}
   162a4:	20003928 	.word	0x20003928

000162a8 <lll_adv_data_reset>:
{
   162a8:	4603      	mov	r3, r0
	pdu->first = 0U;
   162aa:	2000      	movs	r0, #0
   162ac:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   162ae:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   162b0:	6098      	str	r0, [r3, #8]
}
   162b2:	4770      	bx	lr

000162b4 <lll_adv_pdu_alloc>:
{
   162b4:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   162b6:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   162b8:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   162ba:	429a      	cmp	r2, r3
   162bc:	d004      	beq.n	162c8 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   162be:	b2d4      	uxtb	r4, r2
   162c0:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   162c2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   162c4:	4294      	cmp	r4, r2
   162c6:	d003      	beq.n	162d0 <lll_adv_pdu_alloc+0x1c>
		last++;
   162c8:	3301      	adds	r3, #1
   162ca:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   162cc:	2b02      	cmp	r3, #2
   162ce:	d007      	beq.n	162e0 <lll_adv_pdu_alloc+0x2c>
	*idx = last;
   162d0:	461c      	mov	r4, r3
   162d2:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   162d6:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   162d8:	6865      	ldr	r5, [r4, #4]
	if (p) {
   162da:	b14d      	cbz	r5, 162f0 <lll_adv_pdu_alloc+0x3c>
}
   162dc:	4628      	mov	r0, r5
   162de:	bd70      	pop	{r4, r5, r6, pc}
{
   162e0:	2400      	movs	r4, #0
			last = 0U;
   162e2:	4623      	mov	r3, r4
	*idx = last;
   162e4:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   162e8:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   162ea:	6865      	ldr	r5, [r4, #4]
	if (p) {
   162ec:	2d00      	cmp	r5, #0
   162ee:	d1f5      	bne.n	162dc <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   162f0:	4e34      	ldr	r6, [pc, #208]	; (163c4 <lll_adv_pdu_alloc+0x110>)
   162f2:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   162f4:	78f1      	ldrb	r1, [r6, #3]
   162f6:	7833      	ldrb	r3, [r6, #0]
   162f8:	4291      	cmp	r1, r2
   162fa:	d003      	beq.n	16304 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   162fc:	fb02 6303 	mla	r3, r2, r3, r6
   16300:	685d      	ldr	r5, [r3, #4]
	if (p) {
   16302:	b93d      	cbnz	r5, 16314 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   16304:	4830      	ldr	r0, [pc, #192]	; (163c8 <lll_adv_pdu_alloc+0x114>)
   16306:	f7f5 f8d1 	bl	b4ac <mem_acquire>
	if (p) {
   1630a:	4605      	mov	r5, r0
   1630c:	b1a8      	cbz	r0, 1633a <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1630e:	6065      	str	r5, [r4, #4]
}
   16310:	4628      	mov	r0, r5
   16312:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   16314:	482d      	ldr	r0, [pc, #180]	; (163cc <lll_adv_pdu_alloc+0x118>)
   16316:	2200      	movs	r2, #0
   16318:	2300      	movs	r3, #0
   1631a:	f009 fed9 	bl	200d0 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1631e:	2800      	cmp	r0, #0
   16320:	d134      	bne.n	1638c <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   16322:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   16324:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   16326:	7871      	ldrb	r1, [r6, #1]
   16328:	429a      	cmp	r2, r3
   1632a:	d0f0      	beq.n	1630e <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   1632c:	3301      	adds	r3, #1
   1632e:	b2db      	uxtb	r3, r3
		_first = 0U;
   16330:	4299      	cmp	r1, r3
   16332:	bf08      	it	eq
   16334:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   16336:	70b3      	strb	r3, [r6, #2]

	return mem;
   16338:	e7e9      	b.n	1630e <lll_adv_pdu_alloc+0x5a>
   1633a:	4824      	ldr	r0, [pc, #144]	; (163cc <lll_adv_pdu_alloc+0x118>)
   1633c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16344:	f009 fec4 	bl	200d0 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   16348:	2800      	cmp	r0, #0
   1634a:	d12c      	bne.n	163a6 <lll_adv_pdu_alloc+0xf2>
	uint8_t _first = *first; /* Copy read-index */
   1634c:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1634e:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   16350:	7832      	ldrb	r2, [r6, #0]
   16352:	7870      	ldrb	r0, [r6, #1]
   16354:	4299      	cmp	r1, r3
   16356:	d00a      	beq.n	1636e <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   16358:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1635c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1635e:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   16360:	b2db      	uxtb	r3, r3
		_first = 0U;
   16362:	4298      	cmp	r0, r3
   16364:	bf08      	it	eq
   16366:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   16368:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1636a:	2d00      	cmp	r5, #0
   1636c:	d1cf      	bne.n	1630e <lll_adv_pdu_alloc+0x5a>
   1636e:	4a18      	ldr	r2, [pc, #96]	; (163d0 <lll_adv_pdu_alloc+0x11c>)
   16370:	4918      	ldr	r1, [pc, #96]	; (163d4 <lll_adv_pdu_alloc+0x120>)
   16372:	4819      	ldr	r0, [pc, #100]	; (163d8 <lll_adv_pdu_alloc+0x124>)
   16374:	f240 1309 	movw	r3, #265	; 0x109
   16378:	f00c fd19 	bl	22dae <printk>
   1637c:	4040      	eors	r0, r0
   1637e:	f380 8811 	msr	BASEPRI, r0
   16382:	f04f 0003 	mov.w	r0, #3
   16386:	df02      	svc	2
   16388:	2500      	movs	r5, #0
   1638a:	e7c0      	b.n	1630e <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   1638c:	4a10      	ldr	r2, [pc, #64]	; (163d0 <lll_adv_pdu_alloc+0x11c>)
   1638e:	4913      	ldr	r1, [pc, #76]	; (163dc <lll_adv_pdu_alloc+0x128>)
   16390:	4811      	ldr	r0, [pc, #68]	; (163d8 <lll_adv_pdu_alloc+0x124>)
   16392:	23f6      	movs	r3, #246	; 0xf6
   16394:	f00c fd0b 	bl	22dae <printk>
   16398:	4040      	eors	r0, r0
   1639a:	f380 8811 	msr	BASEPRI, r0
   1639e:	f04f 0003 	mov.w	r0, #3
   163a2:	df02      	svc	2
   163a4:	e7bd      	b.n	16322 <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   163a6:	4a0a      	ldr	r2, [pc, #40]	; (163d0 <lll_adv_pdu_alloc+0x11c>)
   163a8:	490c      	ldr	r1, [pc, #48]	; (163dc <lll_adv_pdu_alloc+0x128>)
   163aa:	480b      	ldr	r0, [pc, #44]	; (163d8 <lll_adv_pdu_alloc+0x124>)
   163ac:	f44f 7383 	mov.w	r3, #262	; 0x106
   163b0:	f00c fcfd 	bl	22dae <printk>
   163b4:	4040      	eors	r0, r0
   163b6:	f380 8811 	msr	BASEPRI, r0
   163ba:	f04f 0003 	mov.w	r0, #3
   163be:	df02      	svc	2
   163c0:	e7c4      	b.n	1634c <lll_adv_pdu_alloc+0x98>
   163c2:	bf00      	nop
   163c4:	20000698 	.word	0x20000698
   163c8:	20003928 	.word	0x20003928
   163cc:	200039f4 	.word	0x200039f4
   163d0:	0002d0b8 	.word	0x0002d0b8
   163d4:	0002d118 	.word	0x0002d118
   163d8:	0002c5e0 	.word	0x0002c5e0
   163dc:	0002c860 	.word	0x0002c860

000163e0 <lll_adv_pdu_latest_get>:
{
   163e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163e2:	4604      	mov	r4, r0
	first = pdu->first;
   163e4:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   163e6:	7840      	ldrb	r0, [r0, #1]
   163e8:	4298      	cmp	r0, r3
   163ea:	d029      	beq.n	16440 <lll_adv_pdu_latest_get+0x60>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   163ec:	4d1d      	ldr	r5, [pc, #116]	; (16464 <lll_adv_pdu_latest_get+0x84>)
   163ee:	b2da      	uxtb	r2, r3
	last = last + 1;
   163f0:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   163f2:	786e      	ldrb	r6, [r5, #1]
   163f4:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   163f6:	3301      	adds	r3, #1
   163f8:	b2db      	uxtb	r3, r3
		last = 0U;
   163fa:	429e      	cmp	r6, r3
   163fc:	bf08      	it	eq
   163fe:	2300      	moveq	r3, #0
	if (last == first) {
   16400:	4298      	cmp	r0, r3
   16402:	d01f      	beq.n	16444 <lll_adv_pdu_latest_get+0x64>
		first += 1U;
   16404:	1c50      	adds	r0, r2, #1
   16406:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   16408:	2802      	cmp	r0, #2
   1640a:	bf04      	itt	eq
   1640c:	2600      	moveq	r6, #0
			first = 0U;
   1640e:	4630      	moveq	r0, r6
		*is_modified = 1U;
   16410:	f04f 0701 	mov.w	r7, #1
		pdu->first = first;
   16414:	7020      	strb	r0, [r4, #0]
		*is_modified = 1U;
   16416:	700f      	strb	r7, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16418:	7829      	ldrb	r1, [r5, #0]
   1641a:	bf18      	it	ne
   1641c:	4606      	movne	r6, r0
   1641e:	78e8      	ldrb	r0, [r5, #3]
   16420:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16424:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   16428:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   1642a:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1642c:	6057      	str	r7, [r2, #4]
   1642e:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   16430:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   16432:	480d      	ldr	r0, [pc, #52]	; (16468 <lll_adv_pdu_latest_get+0x88>)
   16434:	f009 fe26 	bl	20084 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   16438:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1643c:	6860      	ldr	r0, [r4, #4]
}
   1643e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16440:	4606      	mov	r6, r0
   16442:	e7f9      	b.n	16438 <lll_adv_pdu_latest_get+0x58>
			LL_ASSERT(false);
   16444:	4a09      	ldr	r2, [pc, #36]	; (1646c <lll_adv_pdu_latest_get+0x8c>)
   16446:	490a      	ldr	r1, [pc, #40]	; (16470 <lll_adv_pdu_latest_get+0x90>)
   16448:	480a      	ldr	r0, [pc, #40]	; (16474 <lll_adv_pdu_latest_get+0x94>)
   1644a:	f44f 738e 	mov.w	r3, #284	; 0x11c
   1644e:	f00c fcae 	bl	22dae <printk>
   16452:	4040      	eors	r0, r0
   16454:	f380 8811 	msr	BASEPRI, r0
   16458:	f04f 0003 	mov.w	r0, #3
   1645c:	df02      	svc	2
   1645e:	2000      	movs	r0, #0
}
   16460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16462:	bf00      	nop
   16464:	20000698 	.word	0x20000698
   16468:	200039f4 	.word	0x200039f4
   1646c:	0002d0b8 	.word	0x0002d0b8
   16470:	0002c650 	.word	0x0002c650
   16474:	0002c5e0 	.word	0x0002c5e0

00016478 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   16478:	7b03      	ldrb	r3, [r0, #12]
{
   1647a:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1647c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   16480:	2b00      	cmp	r3, #0
{
   16482:	4604      	mov	r4, r0
   16484:	fa93 f0a3 	rbit	r0, r3
   16488:	fab0 f080 	clz	r0, r0
   1648c:	bf08      	it	eq
   1648e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   16492:	1c45      	adds	r5, r0, #1
{
   16494:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   16496:	d041      	beq.n	1651c <chan_prepare+0xa4>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   16498:	7b22      	ldrb	r2, [r4, #12]
   1649a:	1e59      	subs	r1, r3, #1
   1649c:	400b      	ands	r3, r1
   1649e:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   164a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   164a6:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   164a8:	f7ff fccc 	bl	15e44 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   164ac:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   164ae:	f10d 0107 	add.w	r1, sp, #7
   164b2:	f104 0010 	add.w	r0, r4, #16
   164b6:	f88d 3007 	strb.w	r3, [sp, #7]
   164ba:	f7ff ff91 	bl	163e0 <lll_adv_pdu_latest_get>
   164be:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   164c0:	f001 fa02 	bl	178c8 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   164c4:	782b      	ldrb	r3, [r5, #0]
   164c6:	f003 030f 	and.w	r3, r3, #15
   164ca:	2b02      	cmp	r3, #2
   164cc:	d01d      	beq.n	1650a <chan_prepare+0x92>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   164ce:	f10d 0107 	add.w	r1, sp, #7
   164d2:	f104 001c 	add.w	r0, r4, #28
   164d6:	f7ff ff83 	bl	163e0 <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   164da:	f89d 3007 	ldrb.w	r3, [sp, #7]
   164de:	b963      	cbnz	r3, 164fa <chan_prepare+0x82>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   164e0:	4621      	mov	r1, r4
   164e2:	4817      	ldr	r0, [pc, #92]	; (16540 <chan_prepare+0xc8>)
   164e4:	f001 f90e 	bl	17704 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   164e8:	2096      	movs	r0, #150	; 0x96
   164ea:	f001 faef 	bl	17acc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   164ee:	2000      	movs	r0, #0
   164f0:	f001 fa64 	bl	179bc <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   164f4:	4628      	mov	r0, r5
   164f6:	b003      	add	sp, #12
   164f8:	bd30      	pop	{r4, r5, pc}
   164fa:	462b      	mov	r3, r5
   164fc:	f853 2f02 	ldr.w	r2, [r3, #2]!
   16500:	f8c0 2002 	str.w	r2, [r0, #2]
   16504:	889b      	ldrh	r3, [r3, #4]
   16506:	80c3      	strh	r3, [r0, #6]
   16508:	e7ea      	b.n	164e0 <chan_prepare+0x68>
		radio_isr_set(isr_done, lll);
   1650a:	480e      	ldr	r0, [pc, #56]	; (16544 <chan_prepare+0xcc>)
   1650c:	4621      	mov	r1, r4
   1650e:	f001 f8f9 	bl	17704 <radio_isr_set>
		radio_switch_complete_and_disable();
   16512:	f001 fa6d 	bl	179f0 <radio_switch_complete_and_disable>
}
   16516:	4628      	mov	r0, r5
   16518:	b003      	add	sp, #12
   1651a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   1651c:	4a0a      	ldr	r2, [pc, #40]	; (16548 <chan_prepare+0xd0>)
   1651e:	490b      	ldr	r1, [pc, #44]	; (1654c <chan_prepare+0xd4>)
   16520:	480b      	ldr	r0, [pc, #44]	; (16550 <chan_prepare+0xd8>)
   16522:	f240 3386 	movw	r3, #902	; 0x386
   16526:	f00c fc42 	bl	22dae <printk>
   1652a:	4040      	eors	r0, r0
   1652c:	f380 8811 	msr	BASEPRI, r0
   16530:	f04f 0003 	mov.w	r0, #3
   16534:	df02      	svc	2
   16536:	7b23      	ldrb	r3, [r4, #12]
   16538:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1653c:	e7ac      	b.n	16498 <chan_prepare+0x20>
   1653e:	bf00      	nop
   16540:	000160d5 	.word	0x000160d5
   16544:	000166b5 	.word	0x000166b5
   16548:	0002d0b8 	.word	0x0002d0b8
   1654c:	0002cd6c 	.word	0x0002cd6c
   16550:	0002c5e0 	.word	0x0002c5e0

00016554 <prepare_cb>:
{
   16554:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   16556:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   16558:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1655a:	f015 0501 	ands.w	r5, r5, #1
{
   1655e:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   16560:	d16e      	bne.n	16640 <prepare_cb+0xec>
	radio_reset();
   16562:	4606      	mov	r6, r0
   16564:	f001 f910 	bl	17788 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   16568:	4628      	mov	r0, r5
   1656a:	f001 f941 	bl	177f0 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1656e:	4629      	mov	r1, r5
   16570:	4628      	mov	r0, r5
   16572:	f001 f92d 	bl	177d0 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   16576:	462a      	mov	r2, r5
   16578:	2125      	movs	r1, #37	; 0x25
   1657a:	2008      	movs	r0, #8
   1657c:	f001 f970 	bl	17860 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   16580:	4b3b      	ldr	r3, [pc, #236]	; (16670 <prepare_cb+0x11c>)
   16582:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   16584:	a801      	add	r0, sp, #4
   16586:	f001 f951 	bl	1782c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1658a:	493a      	ldr	r1, [pc, #232]	; (16674 <prepare_cb+0x120>)
   1658c:	f240 605b 	movw	r0, #1627	; 0x65b
   16590:	f001 f9f2 	bl	17978 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   16594:	7b23      	ldrb	r3, [r4, #12]
   16596:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1659a:	f362 1306 	bfi	r3, r2, #4, #3
   1659e:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   165a0:	4620      	mov	r0, r4
   165a2:	f7ff ff69 	bl	16478 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   165a6:	f7ff f907 	bl	157b8 <ull_filter_lll_rl_enabled>
   165aa:	bb50      	cbnz	r0, 16602 <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   165ac:	7b63      	ldrb	r3, [r4, #13]
   165ae:	079b      	lsls	r3, r3, #30
   165b0:	d134      	bne.n	1661c <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   165b2:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   165b4:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   165b6:	4638      	mov	r0, r7
   165b8:	f7ff fc24 	bl	15e04 <lll_evt_offset_get>
   165bc:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   165be:	6872      	ldr	r2, [r6, #4]
   165c0:	f105 0109 	add.w	r1, r5, #9
   165c4:	2001      	movs	r0, #1
   165c6:	f001 fa8d 	bl	17ae4 <radio_tmr_start>
	radio_tmr_end_capture();
   165ca:	f001 fb5f 	bl	17c8c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   165ce:	4620      	mov	r0, r4
   165d0:	f7f9 fbfc 	bl	fdcc <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   165d4:	1c81      	adds	r1, r0, #2
   165d6:	462a      	mov	r2, r5
   165d8:	b2c9      	uxtb	r1, r1
   165da:	4638      	mov	r0, r7
   165dc:	f7ff fc20 	bl	15e20 <lll_preempt_calc>
   165e0:	b930      	cbnz	r0, 165f0 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   165e2:	4620      	mov	r0, r4
   165e4:	f7ff fbb4 	bl	15d50 <lll_prepare_done>
		LL_ASSERT(!ret);
   165e8:	b9d0      	cbnz	r0, 16620 <prepare_cb+0xcc>
}
   165ea:	2000      	movs	r0, #0
   165ec:	b003      	add	sp, #12
   165ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   165f0:	4821      	ldr	r0, [pc, #132]	; (16678 <prepare_cb+0x124>)
   165f2:	4621      	mov	r1, r4
   165f4:	f001 f886 	bl	17704 <radio_isr_set>
		radio_disable();
   165f8:	f001 f97c 	bl	178f4 <radio_disable>
}
   165fc:	2000      	movs	r0, #0
   165fe:	b003      	add	sp, #12
   16600:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   16602:	7b60      	ldrb	r0, [r4, #13]
   16604:	f010 0003 	ands.w	r0, r0, #3
   16608:	bf18      	it	ne
   1660a:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1660c:	f7ff f88a 	bl	15724 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   16610:	7841      	ldrb	r1, [r0, #1]
   16612:	1c82      	adds	r2, r0, #2
   16614:	7800      	ldrb	r0, [r0, #0]
   16616:	f001 fa0b 	bl	17a30 <radio_filter_configure>
   1661a:	e7ca      	b.n	165b2 <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1661c:	2001      	movs	r0, #1
   1661e:	e7f5      	b.n	1660c <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   16620:	4a16      	ldr	r2, [pc, #88]	; (1667c <prepare_cb+0x128>)
   16622:	4917      	ldr	r1, [pc, #92]	; (16680 <prepare_cb+0x12c>)
   16624:	4817      	ldr	r0, [pc, #92]	; (16684 <prepare_cb+0x130>)
   16626:	f44f 7308 	mov.w	r3, #544	; 0x220
   1662a:	f00c fbc0 	bl	22dae <printk>
   1662e:	4040      	eors	r0, r0
   16630:	f380 8811 	msr	BASEPRI, r0
   16634:	f04f 0003 	mov.w	r0, #3
   16638:	df02      	svc	2
}
   1663a:	2000      	movs	r0, #0
   1663c:	b003      	add	sp, #12
   1663e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   16640:	f7ff fd16 	bl	16070 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   16644:	2800      	cmp	r0, #0
   16646:	db05      	blt.n	16654 <prepare_cb+0x100>
		lll_done(NULL);
   16648:	2000      	movs	r0, #0
   1664a:	f7ff fb83 	bl	15d54 <lll_done>
}
   1664e:	2000      	movs	r0, #0
   16650:	b003      	add	sp, #12
   16652:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   16654:	4a09      	ldr	r2, [pc, #36]	; (1667c <prepare_cb+0x128>)
   16656:	490c      	ldr	r1, [pc, #48]	; (16688 <prepare_cb+0x134>)
   16658:	480a      	ldr	r0, [pc, #40]	; (16684 <prepare_cb+0x130>)
   1665a:	f240 13c1 	movw	r3, #449	; 0x1c1
   1665e:	f00c fba6 	bl	22dae <printk>
   16662:	4040      	eors	r0, r0
   16664:	f380 8811 	msr	BASEPRI, r0
   16668:	f04f 0003 	mov.w	r0, #3
   1666c:	df02      	svc	2
   1666e:	e7eb      	b.n	16648 <prepare_cb+0xf4>
   16670:	8e89bed6 	.word	0x8e89bed6
   16674:	00555555 	.word	0x00555555
   16678:	000160bd 	.word	0x000160bd
   1667c:	0002d0b8 	.word	0x0002d0b8
   16680:	0002c86c 	.word	0x0002c86c
   16684:	0002c5e0 	.word	0x0002c5e0
   16688:	0002d07c 	.word	0x0002d07c

0001668c <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1668c:	68c3      	ldr	r3, [r0, #12]
{
   1668e:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   16690:	681e      	ldr	r6, [r3, #0]
{
   16692:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   16694:	f7f6 fb04 	bl	cca0 <ticker_ticks_now_get>
   16698:	4605      	mov	r5, r0
   1669a:	4630      	mov	r0, r6
   1669c:	f7ff fbb2 	bl	15e04 <lll_evt_offset_get>
	p->remainder = 0;
   166a0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   166a2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   166a4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   166a8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   166aa:	4620      	mov	r0, r4
}
   166ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   166b0:	f7ff bf50 	b.w	16554 <prepare_cb>

000166b4 <isr_done>:
{
   166b4:	b510      	push	{r4, lr}
   166b6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   166b8:	f7ff fc1a 	bl	15ef0 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   166bc:	7b23      	ldrb	r3, [r4, #12]
   166be:	f003 0271 	and.w	r2, r3, #113	; 0x71
   166c2:	2a01      	cmp	r2, #1
   166c4:	d105      	bne.n	166d2 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   166c6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   166ca:	f362 1306 	bfi	r3, r2, #4, #3
   166ce:	7323      	strb	r3, [r4, #12]
   166d0:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   166d2:	f013 0f70 	tst.w	r3, #112	; 0x70
   166d6:	d106      	bne.n	166e6 <isr_done+0x32>
	radio_filter_disable();
   166d8:	f001 f9c6 	bl	17a68 <radio_filter_disable>
	lll_isr_cleanup(param);
   166dc:	4620      	mov	r0, r4
}
   166de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   166e2:	f7ff bc13 	b.w	15f0c <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   166e6:	4620      	mov	r0, r4
   166e8:	f7ff fec6 	bl	16478 <chan_prepare>
		radio_tx_enable();
   166ec:	f001 f8fc 	bl	178e8 <radio_tx_enable>
}
   166f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   166f4:	f001 baca 	b.w	17c8c <radio_tmr_end_capture>

000166f8 <lll_adv_prepare>:
{
   166f8:	b510      	push	{r4, lr}
   166fa:	b082      	sub	sp, #8
   166fc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   166fe:	f7ff fc9f 	bl	16040 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   16702:	2800      	cmp	r0, #0
   16704:	db1a      	blt.n	1673c <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   16706:	4a14      	ldr	r2, [pc, #80]	; (16758 <lll_adv_prepare+0x60>)
   16708:	4914      	ldr	r1, [pc, #80]	; (1675c <lll_adv_prepare+0x64>)
   1670a:	4815      	ldr	r0, [pc, #84]	; (16760 <lll_adv_prepare+0x68>)
   1670c:	9400      	str	r4, [sp, #0]
   1670e:	2300      	movs	r3, #0
   16710:	f7ff fa90 	bl	15c34 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   16714:	b108      	cbz	r0, 1671a <lll_adv_prepare+0x22>
   16716:	3077      	adds	r0, #119	; 0x77
   16718:	d101      	bne.n	1671e <lll_adv_prepare+0x26>
}
   1671a:	b002      	add	sp, #8
   1671c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1671e:	4a11      	ldr	r2, [pc, #68]	; (16764 <lll_adv_prepare+0x6c>)
   16720:	4911      	ldr	r1, [pc, #68]	; (16768 <lll_adv_prepare+0x70>)
   16722:	4812      	ldr	r0, [pc, #72]	; (1676c <lll_adv_prepare+0x74>)
   16724:	f44f 739e 	mov.w	r3, #316	; 0x13c
   16728:	f00c fb41 	bl	22dae <printk>
   1672c:	4040      	eors	r0, r0
   1672e:	f380 8811 	msr	BASEPRI, r0
   16732:	f04f 0003 	mov.w	r0, #3
   16736:	df02      	svc	2
}
   16738:	b002      	add	sp, #8
   1673a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1673c:	4a09      	ldr	r2, [pc, #36]	; (16764 <lll_adv_prepare+0x6c>)
   1673e:	490c      	ldr	r1, [pc, #48]	; (16770 <lll_adv_prepare+0x78>)
   16740:	480a      	ldr	r0, [pc, #40]	; (1676c <lll_adv_prepare+0x74>)
   16742:	f240 1339 	movw	r3, #313	; 0x139
   16746:	f00c fb32 	bl	22dae <printk>
   1674a:	4040      	eors	r0, r0
   1674c:	f380 8811 	msr	BASEPRI, r0
   16750:	f04f 0003 	mov.w	r0, #3
   16754:	df02      	svc	2
   16756:	e7d6      	b.n	16706 <lll_adv_prepare+0xe>
   16758:	00016555 	.word	0x00016555
   1675c:	000161fd 	.word	0x000161fd
   16760:	00016189 	.word	0x00016189
   16764:	0002d0b8 	.word	0x0002d0b8
   16768:	0002d11c 	.word	0x0002d11c
   1676c:	0002c5e0 	.word	0x0002c5e0
   16770:	0002d07c 	.word	0x0002d07c

00016774 <lll_adv_scan_req_check>:
{
   16774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   16778:	7b45      	ldrb	r5, [r0, #13]
{
   1677a:	f89d 8020 	ldrb.w	r8, [sp, #32]
   1677e:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   16780:	07ea      	lsls	r2, r5, #31
{
   16782:	4689      	mov	r9, r1
   16784:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   16786:	d50a      	bpl.n	1679e <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   16788:	f1b8 0f00 	cmp.w	r8, #0
   1678c:	d017      	beq.n	167be <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1678e:	f899 3000 	ldrb.w	r3, [r9]
   16792:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   16796:	d019      	beq.n	167cc <lll_adv_scan_req_check+0x58>
{
   16798:	2000      	movs	r0, #0
}
   1679a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1679e:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   167a0:	f811 0b02 	ldrb.w	r0, [r1], #2
   167a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   167a6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   167aa:	f7fe ffc7 	bl	1573c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   167ae:	2800      	cmp	r0, #0
   167b0:	d1ed      	bne.n	1678e <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   167b2:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   167b4:	07db      	lsls	r3, r3, #31
   167b6:	d5ef      	bpl.n	16798 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   167b8:	f1b8 0f00 	cmp.w	r8, #0
   167bc:	d1e7      	bne.n	1678e <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   167be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   167c0:	7818      	ldrb	r0, [r3, #0]
   167c2:	f7fe ff7f 	bl	156c4 <ull_filter_lll_irk_whitelisted>
   167c6:	2800      	cmp	r0, #0
   167c8:	d1e1      	bne.n	1678e <lll_adv_scan_req_check+0x1a>
   167ca:	e7e5      	b.n	16798 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   167cc:	f109 0108 	add.w	r1, r9, #8
   167d0:	4630      	mov	r0, r6
   167d2:	2206      	movs	r2, #6
   167d4:	f014 ffb3 	bl	2b73e <memcmp>
	return (tx_addr == sr->rx_addr) &&
   167d8:	fab0 f080 	clz	r0, r0
   167dc:	0940      	lsrs	r0, r0, #5
}
   167de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   167e2:	bf00      	nop

000167e4 <lll_adv_connect_ind_check>:
{
   167e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   167e8:	461f      	mov	r7, r3
	if (tgt_addr) {
   167ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   167ec:	f89d 8020 	ldrb.w	r8, [sp, #32]
   167f0:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   167f4:	4605      	mov	r5, r0
   167f6:	460c      	mov	r4, r1
   167f8:	4692      	mov	sl, r2
	if (tgt_addr) {
   167fa:	b9fb      	cbnz	r3, 1683c <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   167fc:	7b43      	ldrb	r3, [r0, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   167fe:	079a      	lsls	r2, r3, #30
   16800:	d507      	bpl.n	16812 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   16802:	b1a6      	cbz	r6, 1682e <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   16804:	7823      	ldrb	r3, [r4, #0]
   16806:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   1680a:	d03a      	beq.n	16882 <lll_adv_connect_ind_check+0x9e>
   1680c:	2000      	movs	r0, #0
}
   1680e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   16812:	f811 0b02 	ldrb.w	r0, [r1], #2
   16816:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16818:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1681c:	f7fe ff8e 	bl	1573c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   16820:	2800      	cmp	r0, #0
   16822:	d1ef      	bne.n	16804 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   16824:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   16826:	079b      	lsls	r3, r3, #30
   16828:	d5f0      	bpl.n	1680c <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1682a:	2e00      	cmp	r6, #0
   1682c:	d1ea      	bne.n	16804 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1682e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16830:	7818      	ldrb	r0, [r3, #0]
   16832:	f7fe ff47 	bl	156c4 <ull_filter_lll_irk_whitelisted>
   16836:	2800      	cmp	r0, #0
   16838:	d1e4      	bne.n	16804 <lll_adv_connect_ind_check+0x20>
   1683a:	e7e7      	b.n	1680c <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1683c:	4689      	mov	r9, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1683e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16840:	f819 0b02 	ldrb.w	r0, [r9], #2
   16844:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16848:	4649      	mov	r1, r9
   1684a:	f7fe ff77 	bl	1573c <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1684e:	2800      	cmp	r0, #0
   16850:	d0dc      	beq.n	1680c <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   16852:	7823      	ldrb	r3, [r4, #0]
   16854:	ebba 1fd3 	cmp.w	sl, r3, lsr #7
   16858:	d1d8      	bne.n	1680c <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1685a:	4638      	mov	r0, r7
   1685c:	2206      	movs	r2, #6
   1685e:	f104 0108 	add.w	r1, r4, #8
   16862:	f014 ff6c 	bl	2b73e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   16866:	2800      	cmp	r0, #0
   16868:	d1d0      	bne.n	1680c <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1686a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1686c:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1686e:	28ff      	cmp	r0, #255	; 0xff
   16870:	d011      	beq.n	16896 <lll_adv_connect_ind_check+0xb2>
   16872:	7bab      	ldrb	r3, [r5, #14]
   16874:	2bff      	cmp	r3, #255	; 0xff
   16876:	d00e      	beq.n	16896 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   16878:	1ac0      	subs	r0, r0, r3
   1687a:	fab0 f080 	clz	r0, r0
   1687e:	0940      	lsrs	r0, r0, #5
   16880:	e7c5      	b.n	1680e <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   16882:	f104 0108 	add.w	r1, r4, #8
   16886:	4638      	mov	r0, r7
   16888:	2206      	movs	r2, #6
   1688a:	f014 ff58 	bl	2b73e <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1688e:	fab0 f080 	clz	r0, r0
   16892:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   16894:	e7bb      	b.n	1680e <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   16896:	7823      	ldrb	r3, [r4, #0]
   16898:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1689c:	4543      	cmp	r3, r8
   1689e:	d1b5      	bne.n	1680c <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   168a0:	9809      	ldr	r0, [sp, #36]	; 0x24
   168a2:	4649      	mov	r1, r9
   168a4:	2206      	movs	r2, #6
   168a6:	f014 ff4a 	bl	2b73e <memcmp>
	return (rx_addr == ci->tx_addr) &&
   168aa:	fab0 f080 	clz	r0, r0
   168ae:	0940      	lsrs	r0, r0, #5
   168b0:	e7ad      	b.n	1680e <lll_adv_connect_ind_check+0x2a>
   168b2:	bf00      	nop

000168b4 <isr_rx>:
{
   168b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   168b8:	b089      	sub	sp, #36	; 0x24
   168ba:	4605      	mov	r5, r0
	trx_done = radio_is_done();
   168bc:	f001 f848 	bl	17950 <radio_is_done>
	if (trx_done) {
   168c0:	f010 0fff 	tst.w	r0, #255	; 0xff
   168c4:	d10a      	bne.n	168dc <isr_rx+0x28>
	lll_isr_status_reset();
   168c6:	f7ff fb13 	bl	15ef0 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   168ca:	4881      	ldr	r0, [pc, #516]	; (16ad0 <isr_rx+0x21c>)
   168cc:	4629      	mov	r1, r5
   168ce:	f000 ff19 	bl	17704 <radio_isr_set>
	radio_disable();
   168d2:	f001 f80f 	bl	178f4 <radio_disable>
}
   168d6:	b009      	add	sp, #36	; 0x24
   168d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		crc_ok = radio_crc_is_valid();
   168dc:	f001 f858 	bl	17990 <radio_crc_is_valid>
   168e0:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   168e2:	f001 f8d3 	bl	17a8c <radio_filter_has_match>
   168e6:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   168e8:	f001 f8da 	bl	17aa0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   168ec:	f001 fabc 	bl	17e68 <radio_ar_has_match>
   168f0:	4604      	mov	r4, r0
		irkmatch_id = radio_ar_match_get();
   168f2:	f001 fa9d 	bl	17e30 <radio_ar_match_get>
   168f6:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   168f8:	f001 f890 	bl	17a1c <radio_rssi_is_ready>
	lll_isr_status_reset();
   168fc:	f7ff faf8 	bl	15ef0 <lll_isr_status_reset>
	if (crc_ok) {
   16900:	f017 0fff 	tst.w	r7, #255	; 0xff
   16904:	d0e1      	beq.n	168ca <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   16906:	f014 07ff 	ands.w	r7, r4, #255	; 0xff
   1690a:	f040 8086 	bne.w	16a1a <isr_rx+0x166>
   1690e:	20ff      	movs	r0, #255	; 0xff
   16910:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   16914:	f001 f84a 	bl	179ac <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   16918:	7c2b      	ldrb	r3, [r5, #16]
   1691a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   1691e:	4604      	mov	r4, r0
   16920:	6959      	ldr	r1, [r3, #20]
	addr = pdu_adv->adv_ind.addr;
   16922:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   16924:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   16928:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1692c:	f000 0c0f 	and.w	ip, r0, #15
   16930:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   16934:	bf08      	it	eq
   16936:	f101 0808 	addeq.w	r8, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1693a:	7821      	ldrb	r1, [r4, #0]
   1693c:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   16940:	bf18      	it	ne
   16942:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16946:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   16948:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1694c:	ea4f 16d0 	mov.w	r6, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16950:	d06a      	beq.n	16a28 <isr_rx+0x174>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16952:	2905      	cmp	r1, #5
   16954:	d1b9      	bne.n	168ca <isr_rx+0x16>
   16956:	7861      	ldrb	r1, [r4, #1]
   16958:	2922      	cmp	r1, #34	; 0x22
   1695a:	d1b6      	bne.n	168ca <isr_rx+0x16>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1695c:	f10d 011f 	add.w	r1, sp, #31
   16960:	9103      	str	r1, [sp, #12]
   16962:	e9cd 8901 	strd	r8, r9, [sp, #4]
   16966:	9600      	str	r6, [sp, #0]
   16968:	4621      	mov	r1, r4
   1696a:	4628      	mov	r0, r5
   1696c:	f7ff ff3a 	bl	167e4 <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   16970:	2800      	cmp	r0, #0
   16972:	d0aa      	beq.n	168ca <isr_rx+0x16>
					     devmatch_ok, &rl_idx) &&
   16974:	68ab      	ldr	r3, [r5, #8]
   16976:	2b00      	cmp	r3, #0
   16978:	d0a7      	beq.n	168ca <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   1697a:	2004      	movs	r0, #4
   1697c:	f7f8 fdea 	bl	f554 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   16980:	2800      	cmp	r0, #0
   16982:	d0a2      	beq.n	168ca <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   16984:	4853      	ldr	r0, [pc, #332]	; (16ad4 <isr_rx+0x220>)
   16986:	4629      	mov	r1, r5
   16988:	f000 febc 	bl	17704 <radio_isr_set>
		radio_disable();
   1698c:	f000 ffb2 	bl	178f4 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   16990:	f000 ffd4 	bl	1793c <radio_is_ready>
   16994:	2800      	cmp	r0, #0
   16996:	d16e      	bne.n	16a76 <isr_rx+0x1c2>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   16998:	792b      	ldrb	r3, [r5, #4]

	hdr->is_stop = 1U;
   1699a:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1699e:	07db      	lsls	r3, r3, #31
   169a0:	712a      	strb	r2, [r5, #4]
   169a2:	d45a      	bmi.n	16a5a <isr_rx+0x1a6>
		rx = ull_pdu_rx_alloc();
   169a4:	f7f8 fdf4 	bl	f590 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   169a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   169ac:	2213      	movs	r2, #19
		rx->hdr.handle = 0xffff;
   169ae:	80c3      	strh	r3, [r0, #6]
		rx = ull_pdu_rx_alloc();
   169b0:	4606      	mov	r6, r0
   169b2:	4621      	mov	r1, r4
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   169b4:	7102      	strb	r2, [r0, #4]
   169b6:	f100 031c 	add.w	r3, r0, #28
   169ba:	f104 0e20 	add.w	lr, r4, #32
   169be:	680c      	ldr	r4, [r1, #0]
   169c0:	6848      	ldr	r0, [r1, #4]
   169c2:	688a      	ldr	r2, [r1, #8]
   169c4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   169c8:	f8c3 c00c 	str.w	ip, [r3, #12]
   169cc:	3110      	adds	r1, #16
   169ce:	4571      	cmp	r1, lr
   169d0:	601c      	str	r4, [r3, #0]
   169d2:	6058      	str	r0, [r3, #4]
   169d4:	609a      	str	r2, [r3, #8]
   169d6:	f103 0310 	add.w	r3, r3, #16
   169da:	d1f0      	bne.n	169be <isr_rx+0x10a>
   169dc:	680a      	ldr	r2, [r1, #0]
   169de:	601a      	str	r2, [r3, #0]
		ftr->param = lll;
   169e0:	60b5      	str	r5, [r6, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   169e2:	f001 f8ff 	bl	17be4 <radio_tmr_start_get>
   169e6:	6130      	str	r0, [r6, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   169e8:	f001 f958 	bl	17c9c <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   169ec:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   169ee:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   169f0:	4608      	mov	r0, r1
   169f2:	f000 ff6f 	bl	178d4 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   169f6:	1a24      	subs	r4, r4, r0
   169f8:	6174      	str	r4, [r6, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   169fa:	b19f      	cbz	r7, 16a24 <isr_rx+0x170>
   169fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
   16a00:	76b3      	strb	r3, [r6, #26]
			ftr->extra = ull_pdu_rx_alloc();
   16a02:	f7f8 fdc5 	bl	f590 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   16a06:	4631      	mov	r1, r6
			ftr->extra = ull_pdu_rx_alloc();
   16a08:	60f0      	str	r0, [r6, #12]
		ull_rx_put(rx->hdr.link, rx);
   16a0a:	6830      	ldr	r0, [r6, #0]
   16a0c:	f7f8 fdd8 	bl	f5c0 <ull_rx_put>
		ull_rx_sched();
   16a10:	f7f8 fde6 	bl	f5e0 <ull_rx_sched>
}
   16a14:	b009      	add	sp, #36	; 0x24
   16a16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   16a1a:	fa5f f088 	uxtb.w	r0, r8
   16a1e:	f7fe fdff 	bl	15620 <ull_filter_lll_rl_irk_idx>
   16a22:	e775      	b.n	16910 <isr_rx+0x5c>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   16a24:	23ff      	movs	r3, #255	; 0xff
   16a26:	e7eb      	b.n	16a00 <isr_rx+0x14c>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16a28:	7861      	ldrb	r1, [r4, #1]
   16a2a:	290c      	cmp	r1, #12
   16a2c:	f47f af4d 	bne.w	168ca <isr_rx+0x16>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   16a30:	f1b8 0f00 	cmp.w	r8, #0
   16a34:	f47f af49 	bne.w	168ca <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   16a38:	f10d 011f 	add.w	r1, sp, #31
   16a3c:	e9cd 9100 	strd	r9, r1, [sp]
   16a40:	4628      	mov	r0, r5
   16a42:	4621      	mov	r1, r4
   16a44:	e9cd 2304 	strd	r2, r3, [sp, #16]
   16a48:	f7ff fe94 	bl	16774 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   16a4c:	bb08      	cbnz	r0, 16a92 <isr_rx+0x1de>
   16a4e:	7821      	ldrb	r1, [r4, #0]
   16a50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   16a54:	f001 010f 	and.w	r1, r1, #15
   16a58:	e77b      	b.n	16952 <isr_rx+0x9e>
		LL_ASSERT(!ret);
   16a5a:	4a1f      	ldr	r2, [pc, #124]	; (16ad8 <isr_rx+0x224>)
   16a5c:	491f      	ldr	r1, [pc, #124]	; (16adc <isr_rx+0x228>)
   16a5e:	4820      	ldr	r0, [pc, #128]	; (16ae0 <isr_rx+0x22c>)
   16a60:	f44f 6385 	mov.w	r3, #1064	; 0x428
   16a64:	f00c f9a3 	bl	22dae <printk>
   16a68:	4040      	eors	r0, r0
   16a6a:	f380 8811 	msr	BASEPRI, r0
   16a6e:	f04f 0003 	mov.w	r0, #3
   16a72:	df02      	svc	2
   16a74:	e796      	b.n	169a4 <isr_rx+0xf0>
		LL_ASSERT(!radio_is_ready());
   16a76:	4a18      	ldr	r2, [pc, #96]	; (16ad8 <isr_rx+0x224>)
   16a78:	491a      	ldr	r1, [pc, #104]	; (16ae4 <isr_rx+0x230>)
   16a7a:	4819      	ldr	r0, [pc, #100]	; (16ae0 <isr_rx+0x22c>)
   16a7c:	f240 431a 	movw	r3, #1050	; 0x41a
   16a80:	f00c f995 	bl	22dae <printk>
   16a84:	4040      	eors	r0, r0
   16a86:	f380 8811 	msr	BASEPRI, r0
   16a8a:	f04f 0003 	mov.w	r0, #3
   16a8e:	df02      	svc	2
   16a90:	e782      	b.n	16998 <isr_rx+0xe4>
		radio_isr_set(isr_done, lll);
   16a92:	4629      	mov	r1, r5
   16a94:	480e      	ldr	r0, [pc, #56]	; (16ad0 <isr_rx+0x21c>)
   16a96:	f000 fe35 	bl	17704 <radio_isr_set>
		radio_switch_complete_and_disable();
   16a9a:	f000 ffa9 	bl	179f0 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   16a9e:	7f2b      	ldrb	r3, [r5, #28]
   16aa0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   16aa4:	6a28      	ldr	r0, [r5, #32]
   16aa6:	f000 ff0f 	bl	178c8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16aaa:	f000 ff47 	bl	1793c <radio_is_ready>
   16aae:	2800      	cmp	r0, #0
   16ab0:	f43f af11 	beq.w	168d6 <isr_rx+0x22>
   16ab4:	4a08      	ldr	r2, [pc, #32]	; (16ad8 <isr_rx+0x224>)
   16ab6:	490b      	ldr	r1, [pc, #44]	; (16ae4 <isr_rx+0x230>)
   16ab8:	4809      	ldr	r0, [pc, #36]	; (16ae0 <isr_rx+0x22c>)
   16aba:	f44f 7377 	mov.w	r3, #988	; 0x3dc
   16abe:	f00c f976 	bl	22dae <printk>
   16ac2:	4040      	eors	r0, r0
   16ac4:	f380 8811 	msr	BASEPRI, r0
   16ac8:	f04f 0003 	mov.w	r0, #3
   16acc:	df02      	svc	2
		if (!err) {
   16ace:	e702      	b.n	168d6 <isr_rx+0x22>
   16ad0:	000166b5 	.word	0x000166b5
   16ad4:	000160bd 	.word	0x000160bd
   16ad8:	0002d0b8 	.word	0x0002d0b8
   16adc:	0002c86c 	.word	0x0002c86c
   16ae0:	0002c5e0 	.word	0x0002c5e0
   16ae4:	0002d104 	.word	0x0002d104

00016ae8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   16ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16aea:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   16aec:	f7ff fa00 	bl	15ef0 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   16af0:	f7f8 fdec 	bl	f6cc <ull_event_done_extra_get>
	LL_ASSERT(e);
   16af4:	4604      	mov	r4, r0
   16af6:	2800      	cmp	r0, #0
   16af8:	d033      	beq.n	16b62 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   16afa:	4b21      	ldr	r3, [pc, #132]	; (16b80 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   16afc:	4921      	ldr	r1, [pc, #132]	; (16b84 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   16afe:	4a22      	ldr	r2, [pc, #136]	; (16b88 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   16b00:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   16b02:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   16b04:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   16b06:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   16b08:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   16b0a:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   16b0c:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   16b0e:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   16b10:	b11b      	cbz	r3, 16b1a <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   16b12:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   16b16:	2b00      	cmp	r3, #0
   16b18:	db04      	blt.n	16b24 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   16b1a:	4628      	mov	r0, r5
}
   16b1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   16b20:	f7ff b9f4 	b.w	15f0c <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   16b24:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   16b28:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   16b2c:	2b02      	cmp	r3, #2
   16b2e:	d016      	beq.n	16b5e <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   16b30:	2b04      	cmp	r3, #4
   16b32:	bf14      	ite	ne
   16b34:	2728      	movne	r7, #40	; 0x28
   16b36:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   16b3a:	f001 f89b 	bl	17c74 <radio_tmr_aa_restore>
   16b3e:	4606      	mov	r6, r0
   16b40:	f001 f89e 	bl	17c80 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   16b44:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   16b46:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   16b48:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   16b4a:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   16b4e:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   16b50:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   16b52:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   16b54:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   16b56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   16b5a:	f7ff b9d7 	b.w	15f0c <lll_isr_cleanup>
	switch (phy) {
   16b5e:	2718      	movs	r7, #24
   16b60:	e7eb      	b.n	16b3a <isr_done+0x52>
	LL_ASSERT(e);
   16b62:	4a0a      	ldr	r2, [pc, #40]	; (16b8c <isr_done+0xa4>)
   16b64:	490a      	ldr	r1, [pc, #40]	; (16b90 <isr_done+0xa8>)
   16b66:	480b      	ldr	r0, [pc, #44]	; (16b94 <isr_done+0xac>)
   16b68:	f240 236e 	movw	r3, #622	; 0x26e
   16b6c:	f00c f91f 	bl	22dae <printk>
   16b70:	4040      	eors	r0, r0
   16b72:	f380 8811 	msr	BASEPRI, r0
   16b76:	f04f 0003 	mov.w	r0, #3
   16b7a:	df02      	svc	2
   16b7c:	e7bd      	b.n	16afa <isr_done+0x12>
   16b7e:	bf00      	nop
   16b80:	200080d2 	.word	0x200080d2
   16b84:	20008606 	.word	0x20008606
   16b88:	20008607 	.word	0x20008607
   16b8c:	0002d140 	.word	0x0002d140
   16b90:	0002ca14 	.word	0x0002ca14
   16b94:	0002c5e0 	.word	0x0002c5e0

00016b98 <lll_conn_init>:
{
   16b98:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   16b9a:	f000 ff03 	bl	179a4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16b9e:	7803      	ldrb	r3, [r0, #0]
   16ba0:	2201      	movs	r2, #1
   16ba2:	f362 0301 	bfi	r3, r2, #0, #2
   16ba6:	7003      	strb	r3, [r0, #0]
}
   16ba8:	2000      	movs	r0, #0
   16baa:	bd08      	pop	{r3, pc}

00016bac <lll_conn_reset>:
}
   16bac:	2000      	movs	r0, #0
   16bae:	4770      	bx	lr

00016bb0 <lll_conn_flush>:
}
   16bb0:	4770      	bx	lr
   16bb2:	bf00      	nop

00016bb4 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   16bb4:	4805      	ldr	r0, [pc, #20]	; (16bcc <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   16bb6:	4906      	ldr	r1, [pc, #24]	; (16bd0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   16bb8:	4a06      	ldr	r2, [pc, #24]	; (16bd4 <lll_conn_prepare_reset+0x20>)
{
   16bba:	b410      	push	{r4}
	trx_cnt = 0U;
   16bbc:	2300      	movs	r3, #0
   16bbe:	4c06      	ldr	r4, [pc, #24]	; (16bd8 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   16bc0:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   16bc2:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   16bc4:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   16bc6:	8023      	strh	r3, [r4, #0]
}
   16bc8:	bc10      	pop	{r4}
   16bca:	4770      	bx	lr
   16bcc:	20008606 	.word	0x20008606
   16bd0:	20008605 	.word	0x20008605
   16bd4:	20008607 	.word	0x20008607
   16bd8:	200080d2 	.word	0x200080d2

00016bdc <lll_conn_abort_cb>:
{
   16bdc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   16bde:	b1d0      	cbz	r0, 16c16 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   16be0:	460c      	mov	r4, r1
   16be2:	f7ff fa45 	bl	16070 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16be6:	2800      	cmp	r0, #0
   16be8:	db04      	blt.n	16bf4 <lll_conn_abort_cb+0x18>
	lll_done(param);
   16bea:	4620      	mov	r0, r4
}
   16bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16bf0:	f7ff b8b0 	b.w	15d54 <lll_done>
	LL_ASSERT(err >= 0);
   16bf4:	4a0b      	ldr	r2, [pc, #44]	; (16c24 <lll_conn_abort_cb+0x48>)
   16bf6:	490c      	ldr	r1, [pc, #48]	; (16c28 <lll_conn_abort_cb+0x4c>)
   16bf8:	480c      	ldr	r0, [pc, #48]	; (16c2c <lll_conn_abort_cb+0x50>)
   16bfa:	239c      	movs	r3, #156	; 0x9c
   16bfc:	f00c f8d7 	bl	22dae <printk>
   16c00:	4040      	eors	r0, r0
   16c02:	f380 8811 	msr	BASEPRI, r0
   16c06:	f04f 0003 	mov.w	r0, #3
   16c0a:	df02      	svc	2
	lll_done(param);
   16c0c:	4620      	mov	r0, r4
}
   16c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16c12:	f7ff b89f 	b.w	15d54 <lll_done>
		radio_isr_set(isr_done, param);
   16c16:	4806      	ldr	r0, [pc, #24]	; (16c30 <lll_conn_abort_cb+0x54>)
   16c18:	f000 fd74 	bl	17704 <radio_isr_set>
}
   16c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   16c20:	f000 be68 	b.w	178f4 <radio_disable>
   16c24:	0002d140 	.word	0x0002d140
   16c28:	0002d07c 	.word	0x0002d07c
   16c2c:	0002c5e0 	.word	0x0002c5e0
   16c30:	00016ae9 	.word	0x00016ae9

00016c34 <lll_conn_rx_pkt_set>:
{
   16c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16c36:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   16c38:	2001      	movs	r0, #1
   16c3a:	f7f8 fc8b 	bl	f554 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   16c3e:	4606      	mov	r6, r0
   16c40:	b358      	cbz	r0, 16c9a <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   16c42:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   16c46:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
	phy = lll->phy_rx;
   16c4a:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   16c4e:	4628      	mov	r0, r5
   16c50:	2100      	movs	r1, #0
   16c52:	f000 fdbd 	bl	177d0 <radio_phy_set>
	} else if (lll->enc_rx) {
   16c56:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16c5a:	006a      	lsls	r2, r5, #1
   16c5c:	071b      	lsls	r3, r3, #28
   16c5e:	f042 0201 	orr.w	r2, r2, #1
   16c62:	d510      	bpl.n	16c86 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   16c64:	1d39      	adds	r1, r7, #4
   16c66:	b2c9      	uxtb	r1, r1
   16c68:	2008      	movs	r0, #8
   16c6a:	f000 fdf9 	bl	17860 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   16c6e:	f000 fea1 	bl	179b4 <radio_pkt_decrypt_get>
   16c72:	4629      	mov	r1, r5
   16c74:	4602      	mov	r2, r0
   16c76:	f104 0063 	add.w	r0, r4, #99	; 0x63
   16c7a:	f001 f81b 	bl	17cb4 <radio_ccm_rx_pkt_set>
}
   16c7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   16c82:	f000 be1b 	b.w	178bc <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   16c86:	b2f9      	uxtb	r1, r7
   16c88:	2008      	movs	r0, #8
   16c8a:	f000 fde9 	bl	17860 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   16c8e:	f106 001c 	add.w	r0, r6, #28
}
   16c92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   16c96:	f000 be11 	b.w	178bc <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   16c9a:	4a07      	ldr	r2, [pc, #28]	; (16cb8 <lll_conn_rx_pkt_set+0x84>)
   16c9c:	4907      	ldr	r1, [pc, #28]	; (16cbc <lll_conn_rx_pkt_set+0x88>)
   16c9e:	4808      	ldr	r0, [pc, #32]	; (16cc0 <lll_conn_rx_pkt_set+0x8c>)
   16ca0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   16ca4:	f00c f883 	bl	22dae <printk>
   16ca8:	4040      	eors	r0, r0
   16caa:	f380 8811 	msr	BASEPRI, r0
   16cae:	f04f 0003 	mov.w	r0, #3
   16cb2:	df02      	svc	2
   16cb4:	e7c5      	b.n	16c42 <lll_conn_rx_pkt_set+0xe>
   16cb6:	bf00      	nop
   16cb8:	0002d140 	.word	0x0002d140
   16cbc:	0002d18c 	.word	0x0002d18c
   16cc0:	0002c5e0 	.word	0x0002c5e0

00016cc4 <lll_conn_isr_tx>:
{
   16cc4:	b538      	push	{r3, r4, r5, lr}
   16cc6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   16cc8:	f7ff f900 	bl	15ecc <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   16ccc:	2096      	movs	r0, #150	; 0x96
   16cce:	f000 fefd 	bl	17acc <radio_tmr_tifs_set>
				     lll->phy_flags);
   16cd2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   16cd6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   16cda:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   16cde:	f000 0007 	and.w	r0, r0, #7
   16ce2:	f002 0207 	and.w	r2, r2, #7
   16ce6:	2100      	movs	r1, #0
   16ce8:	f000 fe76 	bl	179d8 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   16cec:	4620      	mov	r0, r4
   16cee:	f7ff ffa1 	bl	16c34 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   16cf2:	f000 fe23 	bl	1793c <radio_is_ready>
   16cf6:	bb58      	cbnz	r0, 16d50 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   16cf8:	f000 ffd6 	bl	17ca8 <radio_tmr_tifs_base_get>
   16cfc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   16cfe:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   16d02:	2101      	movs	r1, #1
   16d04:	f000 0007 	and.w	r0, r0, #7
   16d08:	f000 fde8 	bl	178dc <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   16d0c:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   16d10:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   16d14:	4405      	add	r5, r0
   16d16:	2b02      	cmp	r3, #2
   16d18:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   16d1c:	d016      	beq.n	16d4c <lll_conn_isr_tx+0x88>
		return 376;
   16d1e:	2b04      	cmp	r3, #4
   16d20:	bf14      	ite	ne
   16d22:	2328      	movne	r3, #40	; 0x28
   16d24:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   16d28:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   16d2c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   16d30:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   16d34:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   16d36:	f000 fdcd 	bl	178d4 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16d3a:	1a28      	subs	r0, r5, r0
   16d3c:	f000 ff6c 	bl	17c18 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   16d40:	4621      	mov	r1, r4
   16d42:	480a      	ldr	r0, [pc, #40]	; (16d6c <lll_conn_isr_tx+0xa8>)
}
   16d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   16d48:	f000 bcdc 	b.w	17704 <radio_isr_set>
	switch (phy) {
   16d4c:	2318      	movs	r3, #24
   16d4e:	e7eb      	b.n	16d28 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   16d50:	4a07      	ldr	r2, [pc, #28]	; (16d70 <lll_conn_isr_tx+0xac>)
   16d52:	4908      	ldr	r1, [pc, #32]	; (16d74 <lll_conn_isr_tx+0xb0>)
   16d54:	4808      	ldr	r0, [pc, #32]	; (16d78 <lll_conn_isr_tx+0xb4>)
   16d56:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   16d5a:	f00c f828 	bl	22dae <printk>
   16d5e:	4040      	eors	r0, r0
   16d60:	f380 8811 	msr	BASEPRI, r0
   16d64:	f04f 0003 	mov.w	r0, #3
   16d68:	df02      	svc	2
   16d6a:	e7c5      	b.n	16cf8 <lll_conn_isr_tx+0x34>
   16d6c:	00016eb5 	.word	0x00016eb5
   16d70:	0002d140 	.word	0x0002d140
   16d74:	0002d104 	.word	0x0002d104
   16d78:	0002c5e0 	.word	0x0002c5e0

00016d7c <lll_conn_tx_pkt_set>:
{
   16d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16d7e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   16d80:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   16d84:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   16d88:	f001 0407 	and.w	r4, r1, #7
{
   16d8c:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   16d8e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   16d92:	4620      	mov	r0, r4
   16d94:	f000 fd1c 	bl	177d0 <radio_phy_set>
	} else if (lll->enc_tx) {
   16d98:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   16d9c:	0062      	lsls	r2, r4, #1
   16d9e:	06db      	lsls	r3, r3, #27
   16da0:	f042 0201 	orr.w	r2, r2, #1
   16da4:	b2f1      	uxtb	r1, r6
   16da6:	d50d      	bpl.n	16dc4 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   16da8:	3104      	adds	r1, #4
   16daa:	b2c9      	uxtb	r1, r1
   16dac:	2008      	movs	r0, #8
   16dae:	f000 fd57 	bl	17860 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   16db2:	4639      	mov	r1, r7
   16db4:	f105 0084 	add.w	r0, r5, #132	; 0x84
   16db8:	f000 ffb2 	bl	17d20 <radio_ccm_tx_pkt_set>
}
   16dbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   16dc0:	f000 bd82 	b.w	178c8 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   16dc4:	2008      	movs	r0, #8
   16dc6:	f000 fd4b 	bl	17860 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   16dca:	4638      	mov	r0, r7
}
   16dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   16dd0:	f000 bd7a 	b.w	178c8 <radio_pkt_tx_set>

00016dd4 <lll_conn_pdu_tx_prep>:
{
   16dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16dd8:	4604      	mov	r4, r0
   16dda:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   16ddc:	aa01      	add	r2, sp, #4
   16dde:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   16de0:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   16de2:	6d21      	ldr	r1, [r4, #80]	; 0x50
   16de4:	f7f4 fbcc 	bl	b580 <memq_peek>
	if (lll->empty || !link) {
   16de8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16dec:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   16dee:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   16df0:	d432      	bmi.n	16e58 <lll_conn_pdu_tx_prep+0x84>
   16df2:	2800      	cmp	r0, #0
   16df4:	d04e      	beq.n	16e94 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   16df6:	9a01      	ldr	r2, [sp, #4]
   16df8:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   16dfc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   16e00:	f102 0804 	add.w	r8, r2, #4
   16e04:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   16e08:	b913      	cbnz	r3, 16e10 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   16e0a:	786b      	ldrb	r3, [r5, #1]
   16e0c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   16e10:	b137      	cbz	r7, 16e20 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   16e12:	f818 2007 	ldrb.w	r2, [r8, r7]
   16e16:	2101      	movs	r1, #1
   16e18:	f361 0201 	bfi	r2, r1, #0, #2
   16e1c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   16e20:	1bdb      	subs	r3, r3, r7
   16e22:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   16e24:	4620      	mov	r0, r4
   16e26:	f7fd fbaf 	bl	14588 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   16e2a:	786b      	ldrb	r3, [r5, #1]
   16e2c:	4283      	cmp	r3, r0
   16e2e:	d924      	bls.n	16e7a <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   16e30:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   16e32:	f818 3007 	ldrb.w	r3, [r8, r7]
   16e36:	f043 0310 	orr.w	r3, r3, #16
   16e3a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   16e3e:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   16e42:	2200      	movs	r2, #0
		p->rfu = 0U;
   16e44:	f36f 1347 	bfc	r3, #5, #3
   16e48:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   16e4c:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   16e4e:	f8c9 5000 	str.w	r5, [r9]
}
   16e52:	b003      	add	sp, #12
   16e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   16e58:	f043 0304 	orr.w	r3, r3, #4
   16e5c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   16e60:	f000 fda0 	bl	179a4 <radio_pkt_empty_get>
   16e64:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   16e66:	b1e6      	cbz	r6, 16ea2 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   16e68:	7803      	ldrb	r3, [r0, #0]
   16e6a:	f043 0310 	orr.w	r3, r3, #16
   16e6e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   16e70:	f8c9 5000 	str.w	r5, [r9]
}
   16e74:	b003      	add	sp, #12
   16e76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   16e7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   16e7c:	6832      	ldr	r2, [r6, #0]
   16e7e:	429a      	cmp	r2, r3
			p->md = 1U;
   16e80:	f818 3007 	ldrb.w	r3, [r8, r7]
   16e84:	bf14      	ite	ne
   16e86:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   16e8a:	f36f 1304 	bfceq	r3, #4, #1
   16e8e:	f808 3007 	strb.w	r3, [r8, r7]
   16e92:	e7d4      	b.n	16e3e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   16e94:	f043 0304 	orr.w	r3, r3, #4
   16e98:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   16e9c:	f000 fd82 	bl	179a4 <radio_pkt_empty_get>
   16ea0:	4605      	mov	r5, r0
			p->md = 0U;
   16ea2:	782b      	ldrb	r3, [r5, #0]
   16ea4:	f36f 1304 	bfc	r3, #4, #1
   16ea8:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   16eaa:	f8c9 5000 	str.w	r5, [r9]
}
   16eae:	b003      	add	sp, #12
   16eb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00016eb4 <lll_conn_isr_rx>:
{
   16eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16eb8:	b082      	sub	sp, #8
   16eba:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   16ebc:	f000 fd48 	bl	17950 <radio_is_done>
	if (trx_done) {
   16ec0:	f010 0fff 	tst.w	r0, #255	; 0xff
   16ec4:	d10a      	bne.n	16edc <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   16ec6:	f7ff f809 	bl	15edc <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   16eca:	48b2      	ldr	r0, [pc, #712]	; (17194 <lll_conn_isr_rx+0x2e0>)
   16ecc:	4621      	mov	r1, r4
   16ece:	f000 fc19 	bl	17704 <radio_isr_set>
		radio_disable();
   16ed2:	f000 fd0f 	bl	178f4 <radio_disable>
}
   16ed6:	b002      	add	sp, #8
   16ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = radio_crc_is_valid();
   16edc:	f000 fd58 	bl	17990 <radio_crc_is_valid>
   16ee0:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   16ee2:	f000 fd9b 	bl	17a1c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   16ee6:	f7fe fff9 	bl	15edc <lll_isr_rx_status_reset>
	trx_cnt++;
   16eea:	4aab      	ldr	r2, [pc, #684]	; (17198 <lll_conn_isr_rx+0x2e4>)
   16eec:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   16eee:	2001      	movs	r0, #1
	trx_cnt++;
   16ef0:	4403      	add	r3, r0
   16ef2:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   16ef4:	f7f8 fb2e 	bl	f554 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   16ef8:	4606      	mov	r6, r0
   16efa:	2800      	cmp	r0, #0
   16efc:	f000 80c6 	beq.w	1708c <lll_conn_isr_rx+0x1d8>
	if (crc_ok) {
   16f00:	2d00      	cmp	r5, #0
   16f02:	d15b      	bne.n	16fbc <lll_conn_isr_rx+0x108>
		if (crc_expire == 0U) {
   16f04:	4ba5      	ldr	r3, [pc, #660]	; (1719c <lll_conn_isr_rx+0x2e8>)
   16f06:	781f      	ldrb	r7, [r3, #0]
   16f08:	2f00      	cmp	r7, #0
   16f0a:	f040 80ae 	bne.w	1706a <lll_conn_isr_rx+0x1b6>
		crc_expire--;
   16f0e:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   16f10:	a901      	add	r1, sp, #4
   16f12:	4620      	mov	r0, r4
		crc_expire--;
   16f14:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   16f16:	f7ff ff5d 	bl	16dd4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   16f1a:	2096      	movs	r0, #150	; 0x96
   16f1c:	f000 fdd6 	bl	17acc <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   16f20:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   16f24:	f000 0007 	and.w	r0, r0, #7
   16f28:	f000 fd48 	bl	179bc <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   16f2c:	489c      	ldr	r0, [pc, #624]	; (171a0 <lll_conn_isr_rx+0x2ec>)
   16f2e:	4621      	mov	r1, r4
   16f30:	f000 fbe8 	bl	17704 <radio_isr_set>
		radio_tmr_end_capture();
   16f34:	f000 feaa 	bl	17c8c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   16f38:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   16f3c:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   16f3e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   16f42:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   16f44:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   16f48:	009b      	lsls	r3, r3, #2
   16f4a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   16f4e:	f020 020c 	bic.w	r2, r0, #12
   16f52:	4313      	orrs	r3, r2
   16f54:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   16f56:	4620      	mov	r0, r4
   16f58:	f7ff ff10 	bl	16d7c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   16f5c:	f000 fcee 	bl	1793c <radio_is_ready>
   16f60:	2800      	cmp	r0, #0
   16f62:	f040 80cb 	bne.w	170fc <lll_conn_isr_rx+0x248>
	if (!radio_tmr_aa_restore()) {
   16f66:	f000 fe85 	bl	17c74 <radio_tmr_aa_restore>
   16f6a:	b1f0      	cbz	r0, 16faa <lll_conn_isr_rx+0xf6>
	if (tx_release) {
   16f6c:	b31d      	cbz	r5, 16fb6 <lll_conn_isr_rx+0x102>
		LL_ASSERT(lll->handle != 0xFFFF);
   16f6e:	8a20      	ldrh	r0, [r4, #16]
   16f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16f74:	4298      	cmp	r0, r3
   16f76:	f000 80e3 	beq.w	17140 <lll_conn_isr_rx+0x28c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   16f7a:	4629      	mov	r1, r5
   16f7c:	f7fd f9b8 	bl	142f0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   16f80:	b177      	cbz	r7, 16fa0 <lll_conn_isr_rx+0xec>
		if (lll->enc_rx) {
   16f82:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16f86:	071b      	lsls	r3, r3, #28
   16f88:	f100 80d1 	bmi.w	1712e <lll_conn_isr_rx+0x27a>
		ull_pdu_rx_alloc();
   16f8c:	f7f8 fb00 	bl	f590 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16f90:	2303      	movs	r3, #3
   16f92:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   16f94:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   16f96:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   16f98:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   16f9a:	4631      	mov	r1, r6
   16f9c:	f7f8 fb10 	bl	f5c0 <ull_rx_put>
		ull_rx_sched();
   16fa0:	f7f8 fb1e 	bl	f5e0 <ull_rx_sched>
}
   16fa4:	b002      	add	sp, #8
   16fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   16faa:	f000 fe57 	bl	17c5c <radio_tmr_aa_get>
   16fae:	f000 fe5b 	bl	17c68 <radio_tmr_aa_save>
	if (tx_release) {
   16fb2:	2d00      	cmp	r5, #0
   16fb4:	d1db      	bne.n	16f6e <lll_conn_isr_rx+0xba>
	if (is_rx_enqueue) {
   16fb6:	2f00      	cmp	r7, #0
   16fb8:	d1e3      	bne.n	16f82 <lll_conn_isr_rx+0xce>
   16fba:	e78c      	b.n	16ed6 <lll_conn_isr_rx+0x22>
	if (lll->enc_rx) {
   16fbc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16fc0:	0719      	lsls	r1, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   16fc2:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   16fc6:	f100 8090 	bmi.w	170ea <lll_conn_isr_rx+0x236>
	if (pdu_data_rx->nesn != lll->sn) {
   16fca:	7f32      	ldrb	r2, [r6, #28]
   16fcc:	f003 0101 	and.w	r1, r3, #1
   16fd0:	f3c2 0080 	ubfx	r0, r2, #2, #1
   16fd4:	4288      	cmp	r0, r1
   16fd6:	d069      	beq.n	170ac <lll_conn_isr_rx+0x1f8>
		if (lll->role) {
   16fd8:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   16fdc:	f081 0101 	eor.w	r1, r1, #1
   16fe0:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   16fe4:	2a00      	cmp	r2, #0
		lll->sn++;
   16fe6:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   16fea:	da05      	bge.n	16ff8 <lll_conn_isr_rx+0x144>
			lll->slave.latency_enabled = 1;
   16fec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   16ff0:	f043 0301 	orr.w	r3, r3, #1
   16ff4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   16ff8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   16ffc:	075a      	lsls	r2, r3, #29
   16ffe:	f100 808b 	bmi.w	17118 <lll_conn_isr_rx+0x264>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   17002:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   17006:	aa01      	add	r2, sp, #4
   17008:	f7f4 faba 	bl	b580 <memq_peek>
		if (link) {
   1700c:	4680      	mov	r8, r0
   1700e:	2800      	cmp	r0, #0
   17010:	f000 8088 	beq.w	17124 <lll_conn_isr_rx+0x270>
					       lll->packet_tx_head_offset);
   17014:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   17018:	9b01      	ldr	r3, [sp, #4]
   1701a:	4413      	add	r3, r2
   1701c:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1701e:	b151      	cbz	r1, 17036 <lll_conn_isr_rx+0x182>
				if (lll->enc_tx) {
   17020:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17024:	06dd      	lsls	r5, r3, #27
   17026:	d506      	bpl.n	17036 <lll_conn_isr_rx+0x182>
					lll->ccm_tx.counter++;
   17028:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1702c:	3301      	adds	r3, #1
   1702e:	f140 0000 	adc.w	r0, r0, #0
   17032:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   17036:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1703a:	440a      	add	r2, r1
   1703c:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1703e:	429a      	cmp	r2, r3
   17040:	f0c0 808d 	bcc.w	1715e <lll_conn_isr_rx+0x2aa>
			} else if (offset == lll->packet_tx_head_len) {
   17044:	d16e      	bne.n	17124 <lll_conn_isr_rx+0x270>
				lll->packet_tx_head_len = 0;
   17046:	2200      	movs	r2, #0
   17048:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1704c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1704e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   17052:	f7f4 fa9d 	bl	b590 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   17056:	9d01      	ldr	r5, [sp, #4]
   17058:	7f32      	ldrb	r2, [r6, #28]
   1705a:	682b      	ldr	r3, [r5, #0]
   1705c:	f8c8 3000 	str.w	r3, [r8]
				tx->next = link;
   17060:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17064:	f8c5 8000 	str.w	r8, [r5]
				*tx_release = tx;
   17068:	e021      	b.n	170ae <lll_conn_isr_rx+0x1fa>
		crc_expire--;
   1706a:	3f01      	subs	r7, #1
   1706c:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1706e:	a901      	add	r1, sp, #4
   17070:	4620      	mov	r0, r4
		crc_expire--;
   17072:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17074:	f7ff feae 	bl	16dd4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   17078:	2f00      	cmp	r7, #0
   1707a:	f040 80e9 	bne.w	17250 <lll_conn_isr_rx+0x39c>
		radio_isr_set(isr_done, param);
   1707e:	4845      	ldr	r0, [pc, #276]	; (17194 <lll_conn_isr_rx+0x2e0>)
   17080:	4621      	mov	r1, r4
   17082:	f000 fb3f 	bl	17704 <radio_isr_set>
			radio_switch_complete_and_disable();
   17086:	f000 fcb3 	bl	179f0 <radio_switch_complete_and_disable>
   1708a:	e755      	b.n	16f38 <lll_conn_isr_rx+0x84>
	LL_ASSERT(node_rx);
   1708c:	4a45      	ldr	r2, [pc, #276]	; (171a4 <lll_conn_isr_rx+0x2f0>)
   1708e:	4946      	ldr	r1, [pc, #280]	; (171a8 <lll_conn_isr_rx+0x2f4>)
   17090:	4846      	ldr	r0, [pc, #280]	; (171ac <lll_conn_isr_rx+0x2f8>)
   17092:	23d1      	movs	r3, #209	; 0xd1
   17094:	f00b fe8b 	bl	22dae <printk>
   17098:	4040      	eors	r0, r0
   1709a:	f380 8811 	msr	BASEPRI, r0
   1709e:	f04f 0003 	mov.w	r0, #3
   170a2:	df02      	svc	2
	if (crc_ok) {
   170a4:	2d00      	cmp	r5, #0
   170a6:	f43f af2d 	beq.w	16f04 <lll_conn_isr_rx+0x50>
   170aa:	e787      	b.n	16fbc <lll_conn_isr_rx+0x108>
	tx_release = NULL;
   170ac:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   170ae:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   170b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   170b6:	429a      	cmp	r2, r3
   170b8:	d058      	beq.n	1716c <lll_conn_isr_rx+0x2b8>
	is_rx_enqueue = 0U;
   170ba:	2700      	movs	r7, #0
		crc_expire = 0U;
   170bc:	4a37      	ldr	r2, [pc, #220]	; (1719c <lll_conn_isr_rx+0x2e8>)
		crc_valid = 1U;
   170be:	4b3c      	ldr	r3, [pc, #240]	; (171b0 <lll_conn_isr_rx+0x2fc>)
		crc_expire = 0U;
   170c0:	2100      	movs	r1, #0
   170c2:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   170c4:	4620      	mov	r0, r4
		crc_valid = 1U;
   170c6:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   170c8:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   170ca:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   170cc:	f7ff fe82 	bl	16dd4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   170d0:	7f33      	ldrb	r3, [r6, #28]
   170d2:	06d9      	lsls	r1, r3, #27
   170d4:	f53f af21 	bmi.w	16f1a <lll_conn_isr_rx+0x66>
			      (pdu_data_tx->md == 0) &&
   170d8:	9b01      	ldr	r3, [sp, #4]
   170da:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   170dc:	06d2      	lsls	r2, r2, #27
   170de:	f53f af1c 	bmi.w	16f1a <lll_conn_isr_rx+0x66>
			      (pdu_data_tx->md == 0) &&
   170e2:	785b      	ldrb	r3, [r3, #1]
   170e4:	2b00      	cmp	r3, #0
   170e6:	d0ca      	beq.n	1707e <lll_conn_isr_rx+0x1ca>
   170e8:	e717      	b.n	16f1a <lll_conn_isr_rx+0x66>
		pkt_decrypt = radio_pkt_decrypt_get();
   170ea:	f000 fc63 	bl	179b4 <radio_pkt_decrypt_get>
   170ee:	7883      	ldrb	r3, [r0, #2]
   170f0:	8802      	ldrh	r2, [r0, #0]
   170f2:	83b2      	strh	r2, [r6, #28]
   170f4:	70bb      	strb	r3, [r7, #2]
   170f6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   170fa:	e766      	b.n	16fca <lll_conn_isr_rx+0x116>
	LL_ASSERT(!radio_is_ready());
   170fc:	4a29      	ldr	r2, [pc, #164]	; (171a4 <lll_conn_isr_rx+0x2f0>)
   170fe:	492d      	ldr	r1, [pc, #180]	; (171b4 <lll_conn_isr_rx+0x300>)
   17100:	482a      	ldr	r0, [pc, #168]	; (171ac <lll_conn_isr_rx+0x2f8>)
   17102:	f240 133d 	movw	r3, #317	; 0x13d
   17106:	f00b fe52 	bl	22dae <printk>
   1710a:	4040      	eors	r0, r0
   1710c:	f380 8811 	msr	BASEPRI, r0
   17110:	f04f 0003 	mov.w	r0, #3
   17114:	df02      	svc	2
   17116:	e726      	b.n	16f66 <lll_conn_isr_rx+0xb2>
			lll->empty = 0;
   17118:	f36f 0382 	bfc	r3, #2, #1
   1711c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   17120:	f000 fc40 	bl	179a4 <radio_pkt_empty_get>
		if (link) {
   17124:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   17128:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1712a:	2500      	movs	r5, #0
   1712c:	e7bf      	b.n	170ae <lll_conn_isr_rx+0x1fa>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   1712e:	f000 fc41 	bl	179b4 <radio_pkt_decrypt_get>
   17132:	7f72      	ldrb	r2, [r6, #29]
   17134:	1cc1      	adds	r1, r0, #3
   17136:	f106 001f 	add.w	r0, r6, #31
   1713a:	f014 fb0e 	bl	2b75a <memcpy>
   1713e:	e725      	b.n	16f8c <lll_conn_isr_rx+0xd8>
		LL_ASSERT(lll->handle != 0xFFFF);
   17140:	4a18      	ldr	r2, [pc, #96]	; (171a4 <lll_conn_isr_rx+0x2f0>)
   17142:	491d      	ldr	r1, [pc, #116]	; (171b8 <lll_conn_isr_rx+0x304>)
   17144:	4819      	ldr	r0, [pc, #100]	; (171ac <lll_conn_isr_rx+0x2f8>)
   17146:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1714a:	f00b fe30 	bl	22dae <printk>
   1714e:	4040      	eors	r0, r0
   17150:	f380 8811 	msr	BASEPRI, r0
   17154:	f04f 0003 	mov.w	r0, #3
   17158:	df02      	svc	2
   1715a:	8a20      	ldrh	r0, [r4, #16]
   1715c:	e70d      	b.n	16f7a <lll_conn_isr_rx+0xc6>
				lll->packet_tx_head_offset = offset;
   1715e:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   17162:	7f32      	ldrb	r2, [r6, #28]
   17164:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	tx_release = NULL;
   17168:	2500      	movs	r5, #0
   1716a:	e7a0      	b.n	170ae <lll_conn_isr_rx+0x1fa>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1716c:	2003      	movs	r0, #3
   1716e:	f7f8 f9f1 	bl	f554 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   17172:	2800      	cmp	r0, #0
   17174:	d0a1      	beq.n	170ba <lll_conn_isr_rx+0x206>
		lll->nesn++;
   17176:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1717a:	f083 0302 	eor.w	r3, r3, #2
   1717e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   17182:	7f73      	ldrb	r3, [r6, #29]
   17184:	2b00      	cmp	r3, #0
   17186:	d098      	beq.n	170ba <lll_conn_isr_rx+0x206>
			if (lll->enc_rx) {
   17188:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1718c:	0718      	lsls	r0, r3, #28
   1718e:	d415      	bmi.n	171bc <lll_conn_isr_rx+0x308>
			*is_rx_enqueue = 1U;
   17190:	2701      	movs	r7, #1
   17192:	e793      	b.n	170bc <lll_conn_isr_rx+0x208>
   17194:	00016ae9 	.word	0x00016ae9
   17198:	200080d2 	.word	0x200080d2
   1719c:	20008605 	.word	0x20008605
   171a0:	00016cc5 	.word	0x00016cc5
   171a4:	0002d140 	.word	0x0002d140
   171a8:	0002d18c 	.word	0x0002d18c
   171ac:	0002c5e0 	.word	0x0002c5e0
   171b0:	20008606 	.word	0x20008606
   171b4:	0002d104 	.word	0x0002d104
   171b8:	0002d19c 	.word	0x0002d19c
				done = radio_ccm_is_done();
   171bc:	f000 fdda 	bl	17d74 <radio_ccm_is_done>
				LL_ASSERT(done);
   171c0:	b3c0      	cbz	r0, 17234 <lll_conn_isr_rx+0x380>
				bool mic_failure = !radio_ccm_mic_is_valid();
   171c2:	f000 fdf9 	bl	17db8 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   171c6:	bb28      	cbnz	r0, 17214 <lll_conn_isr_rx+0x360>
				    lll->ccm_rx.counter == 0 &&
   171c8:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   171cc:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   171d0:	4313      	orrs	r3, r2
   171d2:	d104      	bne.n	171de <lll_conn_isr_rx+0x32a>
				    (pdu_data_rx->ll_id ==
   171d4:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   171d6:	f003 0303 	and.w	r3, r3, #3
   171da:	2b03      	cmp	r3, #3
   171dc:	d004      	beq.n	171e8 <lll_conn_isr_rx+0x334>
					mic_state = LLL_CONN_MIC_FAIL;
   171de:	4b1d      	ldr	r3, [pc, #116]	; (17254 <lll_conn_isr_rx+0x3a0>)
   171e0:	2202      	movs	r2, #2
   171e2:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   171e4:	2700      	movs	r7, #0
   171e6:	e6be      	b.n	16f66 <lll_conn_isr_rx+0xb2>
						radio_pkt_scratch_get();
   171e8:	f000 fbe0 	bl	179ac <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   171ec:	7842      	ldrb	r2, [r0, #1]
   171ee:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   171f0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   171f2:	d8f4      	bhi.n	171de <lll_conn_isr_rx+0x32a>
   171f4:	3203      	adds	r2, #3
   171f6:	4638      	mov	r0, r7
   171f8:	f014 faaf 	bl	2b75a <memcpy>
						lll->ccm_rx.counter--;
   171fc:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   17200:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   17204:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   17208:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1720c:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   17210:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   17214:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   17218:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   1721c:	490d      	ldr	r1, [pc, #52]	; (17254 <lll_conn_isr_rx+0x3a0>)
				lll->ccm_rx.counter++;
   1721e:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   17220:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   17224:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   17228:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1722a:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1722e:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   17230:	6042      	str	r2, [r0, #4]
		if (err) {
   17232:	e743      	b.n	170bc <lll_conn_isr_rx+0x208>
				LL_ASSERT(done);
   17234:	4a08      	ldr	r2, [pc, #32]	; (17258 <lll_conn_isr_rx+0x3a4>)
   17236:	4909      	ldr	r1, [pc, #36]	; (1725c <lll_conn_isr_rx+0x3a8>)
   17238:	4809      	ldr	r0, [pc, #36]	; (17260 <lll_conn_isr_rx+0x3ac>)
   1723a:	f44f 7344 	mov.w	r3, #784	; 0x310
   1723e:	f00b fdb6 	bl	22dae <printk>
   17242:	4040      	eors	r0, r0
   17244:	f380 8811 	msr	BASEPRI, r0
   17248:	f04f 0003 	mov.w	r0, #3
   1724c:	df02      	svc	2
   1724e:	e7b8      	b.n	171c2 <lll_conn_isr_rx+0x30e>
	is_rx_enqueue = 0U;
   17250:	462f      	mov	r7, r5
   17252:	e662      	b.n	16f1a <lll_conn_isr_rx+0x66>
   17254:	20008607 	.word	0x20008607
   17258:	0002d140 	.word	0x0002d140
   1725c:	0002d194 	.word	0x0002d194
   17260:	0002c5e0 	.word	0x0002c5e0

00017264 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   17264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   17268:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1726a:	8a22      	ldrh	r2, [r4, #16]
   1726c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17270:	429a      	cmp	r2, r3
{
   17272:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   17274:	f000 80c3 	beq.w	173fe <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   17278:	4605      	mov	r5, r0
   1727a:	f7ff fc9b 	bl	16bb4 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1727e:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   17280:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   17282:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   17286:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   17288:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1728a:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1728c:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1728e:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   17290:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   17292:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   17294:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   17296:	f104 021c 	add.w	r2, r4, #28
   1729a:	f100 808f 	bmi.w	173bc <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1729e:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   172a2:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   172a6:	9600      	str	r6, [sp, #0]
   172a8:	4613      	mov	r3, r2
   172aa:	4602      	mov	r2, r0
   172ac:	f104 0023 	add.w	r0, r4, #35	; 0x23
   172b0:	f7fd fac8 	bl	14844 <lll_chan_sel_1>
   172b4:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   172b6:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   172ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   172bc:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   172c0:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   172c2:	428a      	cmp	r2, r1
   172c4:	bf28      	it	cs
   172c6:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   172c8:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   172ca:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   172cc:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   172ce:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   172d0:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   172d2:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   172d4:	f000 fa58 	bl	17788 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   172d8:	4630      	mov	r0, r6
   172da:	f000 fa89 	bl	177f0 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   172de:	4620      	mov	r0, r4
   172e0:	f7ff fca8 	bl	16c34 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   172e4:	f104 0008 	add.w	r0, r4, #8
   172e8:	f000 faa0 	bl	1782c <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   172ec:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   172ee:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   172f0:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   172f2:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   172f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   172f8:	4319      	orrs	r1, r3
   172fa:	f240 605b 	movw	r0, #1627	; 0x65b
   172fe:	f000 fb3b 	bl	17978 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   17302:	4638      	mov	r0, r7
   17304:	f7fe fd9e 	bl	15e44 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   17308:	4621      	mov	r1, r4
   1730a:	4849      	ldr	r0, [pc, #292]	; (17430 <prepare_cb+0x1cc>)
   1730c:	f000 f9fa 	bl	17704 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   17310:	2096      	movs	r0, #150	; 0x96
   17312:	f000 fbdb 	bl	17acc <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   17316:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1731a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1731e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   17322:	4631      	mov	r1, r6
   17324:	f002 0207 	and.w	r2, r2, #7
   17328:	f000 0007 	and.w	r0, r0, #7
   1732c:	f000 fb54 	bl	179d8 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   17330:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   17334:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   17336:	4640      	mov	r0, r8
   17338:	f7fe fd64 	bl	15e04 <lll_evt_offset_get>
   1733c:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1733e:	686a      	ldr	r2, [r5, #4]
   17340:	f107 0109 	add.w	r1, r7, #9
   17344:	4630      	mov	r0, r6
   17346:	f000 fbcd 	bl	17ae4 <radio_tmr_start>
   1734a:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1734c:	f000 fc72 	bl	17c34 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   17350:	4630      	mov	r0, r6
   17352:	f000 fc89 	bl	17c68 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   17356:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   17358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1735a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1735e:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   17360:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   17364:	f000 0007 	and.w	r0, r0, #7
   17368:	2101      	movs	r1, #1
	hcto = remainder_us +
   1736a:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1736c:	f000 fab4 	bl	178d8 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   17370:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   17374:	f002 0207 	and.w	r2, r2, #7
   17378:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1737a:	4405      	add	r5, r0
   1737c:	d03d      	beq.n	173fa <prepare_cb+0x196>
		return 40;
   1737e:	2a04      	cmp	r2, #4
   17380:	bf0c      	ite	eq
   17382:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   17386:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   17388:	4610      	mov	r0, r2
   1738a:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1738c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1738e:	f000 faa5 	bl	178dc <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   17392:	4428      	add	r0, r5
   17394:	f000 fc40 	bl	17c18 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   17398:	7c21      	ldrb	r1, [r4, #16]
   1739a:	3103      	adds	r1, #3
   1739c:	463a      	mov	r2, r7
   1739e:	4640      	mov	r0, r8
   173a0:	b2c9      	uxtb	r1, r1
   173a2:	f7fe fd3d 	bl	15e20 <lll_preempt_calc>
   173a6:	b190      	cbz	r0, 173ce <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   173a8:	4822      	ldr	r0, [pc, #136]	; (17434 <prepare_cb+0x1d0>)
   173aa:	4621      	mov	r1, r4
   173ac:	f000 f9aa 	bl	17704 <radio_isr_set>
		radio_disable();
   173b0:	f000 faa0 	bl	178f4 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   173b4:	2000      	movs	r0, #0
   173b6:	b002      	add	sp, #8
   173b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   173bc:	4430      	add	r0, r6
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   173be:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   173c0:	b280      	uxth	r0, r0
   173c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   173c6:	f7fd fa79 	bl	148bc <lll_chan_sel_2>
   173ca:	4607      	mov	r7, r0
   173cc:	e773      	b.n	172b6 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   173ce:	4620      	mov	r0, r4
   173d0:	f7fe fcbe 	bl	15d50 <lll_prepare_done>
		LL_ASSERT(!ret);
   173d4:	2800      	cmp	r0, #0
   173d6:	d0ed      	beq.n	173b4 <prepare_cb+0x150>
   173d8:	4a17      	ldr	r2, [pc, #92]	; (17438 <prepare_cb+0x1d4>)
   173da:	4918      	ldr	r1, [pc, #96]	; (1743c <prepare_cb+0x1d8>)
   173dc:	4818      	ldr	r0, [pc, #96]	; (17440 <prepare_cb+0x1dc>)
   173de:	f240 1313 	movw	r3, #275	; 0x113
   173e2:	f00b fce4 	bl	22dae <printk>
   173e6:	4040      	eors	r0, r0
   173e8:	f380 8811 	msr	BASEPRI, r0
   173ec:	f04f 0003 	mov.w	r0, #3
   173f0:	df02      	svc	2
}
   173f2:	2000      	movs	r0, #0
   173f4:	b002      	add	sp, #8
   173f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   173fa:	2318      	movs	r3, #24
   173fc:	e7c4      	b.n	17388 <prepare_cb+0x124>
		err = lll_hfclock_off();
   173fe:	f7fe fe37 	bl	16070 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   17402:	2800      	cmp	r0, #0
   17404:	db06      	blt.n	17414 <prepare_cb+0x1b0>
		lll_done(NULL);
   17406:	2000      	movs	r0, #0
   17408:	f7fe fca4 	bl	15d54 <lll_done>
}
   1740c:	2000      	movs	r0, #0
   1740e:	b002      	add	sp, #8
   17410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   17414:	4a08      	ldr	r2, [pc, #32]	; (17438 <prepare_cb+0x1d4>)
   17416:	490b      	ldr	r1, [pc, #44]	; (17444 <prepare_cb+0x1e0>)
   17418:	4809      	ldr	r0, [pc, #36]	; (17440 <prepare_cb+0x1dc>)
   1741a:	237d      	movs	r3, #125	; 0x7d
   1741c:	f00b fcc7 	bl	22dae <printk>
   17420:	4040      	eors	r0, r0
   17422:	f380 8811 	msr	BASEPRI, r0
   17426:	f04f 0003 	mov.w	r0, #3
   1742a:	df02      	svc	2
   1742c:	e7eb      	b.n	17406 <prepare_cb+0x1a2>
   1742e:	bf00      	nop
   17430:	00016eb5 	.word	0x00016eb5
   17434:	00015f79 	.word	0x00015f79
   17438:	0002d1c8 	.word	0x0002d1c8
   1743c:	0002c86c 	.word	0x0002c86c
   17440:	0002c5e0 	.word	0x0002c5e0
   17444:	0002d07c 	.word	0x0002d07c

00017448 <lll_slave_prepare>:
{
   17448:	b570      	push	{r4, r5, r6, lr}
   1744a:	b082      	sub	sp, #8
   1744c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1744e:	f7fe fdf7 	bl	16040 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   17452:	2800      	cmp	r0, #0
   17454:	db29      	blt.n	174aa <lll_slave_prepare+0x62>
	lll = p->param;
   17456:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   17458:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   1745a:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   1745c:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1745e:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   17460:	4a18      	ldr	r2, [pc, #96]	; (174c4 <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   17462:	3301      	adds	r3, #1
   17464:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   17466:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   1746a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   1746c:	42a8      	cmp	r0, r5
   1746e:	bf28      	it	cs
   17470:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   17472:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   17474:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   17476:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   17478:	4813      	ldr	r0, [pc, #76]	; (174c8 <lll_slave_prepare+0x80>)
   1747a:	4914      	ldr	r1, [pc, #80]	; (174cc <lll_slave_prepare+0x84>)
   1747c:	9400      	str	r4, [sp, #0]
   1747e:	2300      	movs	r3, #0
   17480:	f7fe fbd8 	bl	15c34 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   17484:	b108      	cbz	r0, 1748a <lll_slave_prepare+0x42>
   17486:	3077      	adds	r0, #119	; 0x77
   17488:	d101      	bne.n	1748e <lll_slave_prepare+0x46>
}
   1748a:	b002      	add	sp, #8
   1748c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1748e:	4a10      	ldr	r2, [pc, #64]	; (174d0 <lll_slave_prepare+0x88>)
   17490:	4910      	ldr	r1, [pc, #64]	; (174d4 <lll_slave_prepare+0x8c>)
   17492:	4811      	ldr	r0, [pc, #68]	; (174d8 <lll_slave_prepare+0x90>)
   17494:	235f      	movs	r3, #95	; 0x5f
   17496:	f00b fc8a 	bl	22dae <printk>
   1749a:	4040      	eors	r0, r0
   1749c:	f380 8811 	msr	BASEPRI, r0
   174a0:	f04f 0003 	mov.w	r0, #3
   174a4:	df02      	svc	2
}
   174a6:	b002      	add	sp, #8
   174a8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   174aa:	4a09      	ldr	r2, [pc, #36]	; (174d0 <lll_slave_prepare+0x88>)
   174ac:	490b      	ldr	r1, [pc, #44]	; (174dc <lll_slave_prepare+0x94>)
   174ae:	480a      	ldr	r0, [pc, #40]	; (174d8 <lll_slave_prepare+0x90>)
   174b0:	2348      	movs	r3, #72	; 0x48
   174b2:	f00b fc7c 	bl	22dae <printk>
   174b6:	4040      	eors	r0, r0
   174b8:	f380 8811 	msr	BASEPRI, r0
   174bc:	f04f 0003 	mov.w	r0, #3
   174c0:	df02      	svc	2
   174c2:	e7c8      	b.n	17456 <lll_slave_prepare+0xe>
   174c4:	00017265 	.word	0x00017265
   174c8:	00015dfd 	.word	0x00015dfd
   174cc:	00016bdd 	.word	0x00016bdd
   174d0:	0002d1c8 	.word	0x0002d1c8
   174d4:	0002d11c 	.word	0x0002d11c
   174d8:	0002c5e0 	.word	0x0002c5e0
   174dc:	0002d07c 	.word	0x0002d07c

000174e0 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   174e0:	4b05      	ldr	r3, [pc, #20]	; (174f8 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   174e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   174e6:	2100      	movs	r1, #0
   174e8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   174ec:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   174f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   174f4:	4770      	bx	lr
   174f6:	bf00      	nop
   174f8:	4000b000 	.word	0x4000b000

000174fc <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   174fc:	4b05      	ldr	r3, [pc, #20]	; (17514 <cntr_start+0x18>)
   174fe:	7818      	ldrb	r0, [r3, #0]
   17500:	1c42      	adds	r2, r0, #1
   17502:	701a      	strb	r2, [r3, #0]
   17504:	b918      	cbnz	r0, 1750e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17506:	4b04      	ldr	r3, [pc, #16]	; (17518 <cntr_start+0x1c>)
   17508:	2201      	movs	r2, #1
   1750a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1750c:	4770      	bx	lr
		return 1;
   1750e:	2001      	movs	r0, #1
}
   17510:	4770      	bx	lr
   17512:	bf00      	nop
   17514:	20008608 	.word	0x20008608
   17518:	4000b000 	.word	0x4000b000

0001751c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1751c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1751e:	4c0d      	ldr	r4, [pc, #52]	; (17554 <cntr_stop+0x38>)
   17520:	7820      	ldrb	r0, [r4, #0]
   17522:	b148      	cbz	r0, 17538 <cntr_stop+0x1c>

	if (--_refcount) {
   17524:	3801      	subs	r0, #1
   17526:	b2c0      	uxtb	r0, r0
   17528:	7020      	strb	r0, [r4, #0]
   1752a:	b918      	cbnz	r0, 17534 <cntr_stop+0x18>
   1752c:	4b0a      	ldr	r3, [pc, #40]	; (17558 <cntr_stop+0x3c>)
   1752e:	2201      	movs	r2, #1
   17530:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   17532:	bd10      	pop	{r4, pc}
		return 1;
   17534:	2001      	movs	r0, #1
}
   17536:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   17538:	4a08      	ldr	r2, [pc, #32]	; (1755c <cntr_stop+0x40>)
   1753a:	4909      	ldr	r1, [pc, #36]	; (17560 <cntr_stop+0x44>)
   1753c:	4809      	ldr	r0, [pc, #36]	; (17564 <cntr_stop+0x48>)
   1753e:	232d      	movs	r3, #45	; 0x2d
   17540:	f00b fc35 	bl	22dae <printk>
   17544:	4040      	eors	r0, r0
   17546:	f380 8811 	msr	BASEPRI, r0
   1754a:	f04f 0003 	mov.w	r0, #3
   1754e:	df02      	svc	2
   17550:	7820      	ldrb	r0, [r4, #0]
   17552:	e7e7      	b.n	17524 <cntr_stop+0x8>
   17554:	20008608 	.word	0x20008608
   17558:	4000b004 	.word	0x4000b004
   1755c:	0002d228 	.word	0x0002d228
   17560:	0002d274 	.word	0x0002d274
   17564:	0002c5e0 	.word	0x0002c5e0

00017568 <cntr_cnt_get>:
     return p_reg->COUNTER;
   17568:	4b01      	ldr	r3, [pc, #4]	; (17570 <cntr_cnt_get+0x8>)
   1756a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1756e:	4770      	bx	lr
   17570:	4000b000 	.word	0x4000b000

00017574 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   17574:	4b02      	ldr	r3, [pc, #8]	; (17580 <cntr_cmp_set+0xc>)
   17576:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1757a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1757e:	4770      	bx	lr
   17580:	4000b000 	.word	0x4000b000

00017584 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   17584:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   17586:	4b12      	ldr	r3, [pc, #72]	; (175d0 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17588:	4d12      	ldr	r5, [pc, #72]	; (175d4 <do_ecb+0x50>)
   1758a:	2601      	movs	r6, #1
   1758c:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   1758e:	2100      	movs	r1, #0
   17590:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   17592:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   17596:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1759a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1759e:	601c      	str	r4, [r3, #0]
}
   175a0:	e005      	b.n	175ae <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   175a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   175a6:	b932      	cbnz	r2, 175b6 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   175a8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   175ac:	b11a      	cbz	r2, 175b6 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   175ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   175b2:	2a00      	cmp	r2, #0
   175b4:	d0f5      	beq.n	175a2 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   175b6:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   175b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   175bc:	2a00      	cmp	r2, #0
   175be:	d1e7      	bne.n	17590 <do_ecb+0xc>
   175c0:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   175c4:	2f00      	cmp	r7, #0
   175c6:	d0e3      	beq.n	17590 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   175c8:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   175ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   175ce:	4770      	bx	lr
   175d0:	4000e000 	.word	0x4000e000
   175d4:	4000e004 	.word	0x4000e004

000175d8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   175d8:	b570      	push	{r4, r5, r6, lr}
   175da:	b08c      	sub	sp, #48	; 0x30
   175dc:	460e      	mov	r6, r1
   175de:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   175e0:	4601      	mov	r1, r0
   175e2:	2210      	movs	r2, #16
   175e4:	4668      	mov	r0, sp
{
   175e6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   175e8:	f7f3 ff9a 	bl	b520 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   175ec:	2210      	movs	r2, #16
   175ee:	eb0d 0002 	add.w	r0, sp, r2
   175f2:	4631      	mov	r1, r6
   175f4:	f7f3 ff94 	bl	b520 <mem_rcopy>

	do_ecb(&ecb);
   175f8:	4668      	mov	r0, sp
   175fa:	f7ff ffc3 	bl	17584 <do_ecb>

	if (cipher_text_le) {
   175fe:	b125      	cbz	r5, 1760a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   17600:	4628      	mov	r0, r5
   17602:	2210      	movs	r2, #16
   17604:	a908      	add	r1, sp, #32
   17606:	f7f3 ff8b 	bl	b520 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1760a:	b12c      	cbz	r4, 17618 <ecb_encrypt+0x40>
   1760c:	ad08      	add	r5, sp, #32
   1760e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   17610:	6020      	str	r0, [r4, #0]
   17612:	6061      	str	r1, [r4, #4]
   17614:	60a2      	str	r2, [r4, #8]
   17616:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   17618:	b00c      	add	sp, #48	; 0x30
   1761a:	bd70      	pop	{r4, r5, r6, pc}

0001761c <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1761c:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1761e:	4e2a      	ldr	r6, [pc, #168]	; (176c8 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17620:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 176dc <sw_switch.isra.0+0xc0>
   17624:	7834      	ldrb	r4, [r6, #0]
   17626:	4b29      	ldr	r3, [pc, #164]	; (176cc <sw_switch.isra.0+0xb0>)
   17628:	f8cc 3568 	str.w	r3, [ip, #1384]	; 0x568
   1762c:	f104 030c 	add.w	r3, r4, #12
   17630:	b2db      	uxtb	r3, r3
   17632:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   17634:	4f26      	ldr	r7, [pc, #152]	; (176d0 <sw_switch.isra.0+0xb4>)
   17636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1763a:	00e5      	lsls	r5, r4, #3
   1763c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   17640:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   17644:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   17648:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1764c:	f8cc 556c 	str.w	r5, [ip, #1388]	; 0x56c
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   17650:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17652:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   17656:	b388      	cbz	r0, 176bc <sw_switch.isra.0+0xa0>

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   17658:	f24a 274e 	movw	r7, #41550	; 0xa24e
   1765c:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   17660:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   17664:	2a02      	cmp	r2, #2
   17666:	bf14      	ite	ne
   17668:	463a      	movne	r2, r7
   1766a:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1766c:	f241 574a 	movw	r7, #5450	; 0x154a
   17670:	2902      	cmp	r1, #2
   17672:	bf14      	ite	ne
   17674:	4601      	movne	r1, r0
   17676:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   17678:	4816      	ldr	r0, [pc, #88]	; (176d4 <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1767a:	4f17      	ldr	r7, [pc, #92]	; (176d8 <sw_switch.isra.0+0xbc>)
   1767c:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   17680:	440a      	add	r2, r1
   17682:	fba0 3202 	umull	r3, r2, r0, r2
   17686:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   17688:	00ab      	lsls	r3, r5, #2
   1768a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1768e:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   17692:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   17694:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   17698:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1769a:	bf8a      	itet	hi
   1769c:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   176a0:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   176a2:	1a8a      	subhi	r2, r1, r2
   176a4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   176a8:	4b0c      	ldr	r3, [pc, #48]	; (176dc <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   176aa:	f004 0401 	and.w	r4, r4, #1
   176ae:	f44f 6210 	mov.w	r2, #2304	; 0x900
   176b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   176b6:	7034      	strb	r4, [r6, #0]
}
   176b8:	bcf0      	pop	{r4, r5, r6, r7}
   176ba:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   176bc:	4a08      	ldr	r2, [pc, #32]	; (176e0 <sw_switch.isra.0+0xc4>)
   176be:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   176c2:	2229      	movs	r2, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   176c4:	e7e0      	b.n	17688 <sw_switch.isra.0+0x6c>
   176c6:	bf00      	nop
   176c8:	20008609 	.word	0x20008609
   176cc:	4000110c 	.word	0x4000110c
   176d0:	40009140 	.word	0x40009140
   176d4:	10624dd3 	.word	0x10624dd3
   176d8:	40001000 	.word	0x40001000
   176dc:	4001f000 	.word	0x4001f000
   176e0:	40001004 	.word	0x40001004

000176e4 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   176e4:	4b04      	ldr	r3, [pc, #16]	; (176f8 <isr_radio+0x14>)
   176e6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   176ea:	b123      	cbz	r3, 176f6 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   176ec:	4a03      	ldr	r2, [pc, #12]	; (176fc <isr_radio+0x18>)
   176ee:	4b04      	ldr	r3, [pc, #16]	; (17700 <isr_radio+0x1c>)
   176f0:	6810      	ldr	r0, [r2, #0]
   176f2:	681b      	ldr	r3, [r3, #0]
   176f4:	4718      	bx	r3
}
   176f6:	4770      	bx	lr
   176f8:	40001000 	.word	0x40001000
   176fc:	20003d2c 	.word	0x20003d2c
   17700:	20003d28 	.word	0x20003d28

00017704 <radio_isr_set>:
{
   17704:	b538      	push	{r3, r4, r5, lr}
   17706:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   17708:	2001      	movs	r0, #1
{
   1770a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1770c:	f7ec fe88 	bl	4420 <arch_irq_disable>
	isr_cb_param = param;
   17710:	4a08      	ldr	r2, [pc, #32]	; (17734 <radio_isr_set+0x30>)
	isr_cb = cb;
   17712:	4809      	ldr	r0, [pc, #36]	; (17738 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17714:	4b09      	ldr	r3, [pc, #36]	; (1773c <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   17716:	490a      	ldr	r1, [pc, #40]	; (17740 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   17718:	6015      	str	r5, [r2, #0]
   1771a:	2510      	movs	r5, #16
   1771c:	2202      	movs	r2, #2
	isr_cb = cb;
   1771e:	6004      	str	r4, [r0, #0]
   17720:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   17724:	2001      	movs	r0, #1
   17726:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1772a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1772e:	f7ec be67 	b.w	4400 <arch_irq_enable>
   17732:	bf00      	nop
   17734:	20003d2c 	.word	0x20003d2c
   17738:	20003d28 	.word	0x20003d28
   1773c:	e000e100 	.word	0xe000e100
   17740:	40001000 	.word	0x40001000

00017744 <radio_setup>:
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   17744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1774c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1774e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   17752:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   17756:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1775a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1775e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   17762:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   17766:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1776a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1776e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   17772:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   17776:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1777a:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1777e:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   17782:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   17786:	4770      	bx	lr

00017788 <radio_reset>:
{
   17788:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1778a:	2001      	movs	r0, #1
   1778c:	f7ec fe48 	bl	4420 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   17790:	4b0c      	ldr	r3, [pc, #48]	; (177c4 <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   17792:	490d      	ldr	r1, [pc, #52]	; (177c8 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   17794:	4a0d      	ldr	r2, [pc, #52]	; (177cc <radio_reset+0x44>)
   17796:	2400      	movs	r4, #0
   17798:	2001      	movs	r0, #1
   1779a:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   1779e:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   177a2:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   177a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   177a8:	f023 0301 	bic.w	r3, r3, #1
   177ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   177b0:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   177b4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   177b8:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   177ba:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   177be:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   177c2:	bd10      	pop	{r4, pc}
   177c4:	40001000 	.word	0x40001000
   177c8:	40001774 	.word	0x40001774
   177cc:	4001f000 	.word	0x4001f000

000177d0 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   177d0:	4b06      	ldr	r3, [pc, #24]	; (177ec <radio_phy_set+0x1c>)
	switch (phy) {
   177d2:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   177d4:	bf14      	ite	ne
   177d6:	2203      	movne	r2, #3
   177d8:	2204      	moveq	r2, #4
   177da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   177de:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   177e2:	f042 0201 	orr.w	r2, r2, #1
   177e6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   177ea:	4770      	bx	lr
   177ec:	40001000 	.word	0x40001000

000177f0 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   177f0:	4b01      	ldr	r3, [pc, #4]	; (177f8 <radio_tx_power_set+0x8>)
   177f2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   177f6:	4770      	bx	lr
   177f8:	40001000 	.word	0x40001000

000177fc <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   177fc:	4b01      	ldr	r3, [pc, #4]	; (17804 <radio_freq_chan_set+0x8>)
   177fe:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   17802:	4770      	bx	lr
   17804:	40001000 	.word	0x40001000

00017808 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   17808:	4b07      	ldr	r3, [pc, #28]	; (17828 <radio_whiten_iv_set+0x20>)
   1780a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1780e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   17812:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   17816:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1781a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1781e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   17822:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   17826:	4770      	bx	lr
   17828:	40001000 	.word	0x40001000

0001782c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1782c:	4a0b      	ldr	r2, [pc, #44]	; (1785c <radio_aa_set+0x30>)
   1782e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   17830:	2301      	movs	r3, #1
{
   17832:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   17834:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   17838:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1783c:	78c3      	ldrb	r3, [r0, #3]
   1783e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   17842:	7843      	ldrb	r3, [r0, #1]
   17844:	7884      	ldrb	r4, [r0, #2]
   17846:	7801      	ldrb	r1, [r0, #0]
   17848:	041b      	lsls	r3, r3, #16
   1784a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1784e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   17852:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   17854:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   17858:	4770      	bx	lr
   1785a:	bf00      	nop
   1785c:	40001000 	.word	0x40001000

00017860 <radio_pkt_configure>:
	switch (phy) {
   17860:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   17864:	2b02      	cmp	r3, #2
{
   17866:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   17868:	bf14      	ite	ne
   1786a:	2400      	movne	r4, #0
   1786c:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   17870:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   17872:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   17876:	bf48      	it	mi
   17878:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1787c:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1787e:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   17882:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   17884:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   17888:	4a0a      	ldr	r2, [pc, #40]	; (178b4 <radio_pkt_configure+0x54>)
}
   1788a:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1788c:	4303      	orrs	r3, r0
   1788e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   17892:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   17896:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1789a:	4807      	ldr	r0, [pc, #28]	; (178b8 <radio_pkt_configure+0x58>)
   1789c:	4018      	ands	r0, r3
   1789e:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   178a2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   178a6:	4319      	orrs	r1, r3
   178a8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   178ac:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   178b0:	4770      	bx	lr
   178b2:	bf00      	nop
   178b4:	40001000 	.word	0x40001000
   178b8:	fef80000 	.word	0xfef80000

000178bc <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   178bc:	4b01      	ldr	r3, [pc, #4]	; (178c4 <radio_pkt_rx_set+0x8>)
   178be:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   178c2:	4770      	bx	lr
   178c4:	40001000 	.word	0x40001000

000178c8 <radio_pkt_tx_set>:
   178c8:	4b01      	ldr	r3, [pc, #4]	; (178d0 <radio_pkt_tx_set+0x8>)
   178ca:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   178ce:	4770      	bx	lr
   178d0:	40001000 	.word	0x40001000

000178d4 <radio_tx_chain_delay_get>:
}
   178d4:	2001      	movs	r0, #1
   178d6:	4770      	bx	lr

000178d8 <radio_rx_ready_delay_get>:
}
   178d8:	2029      	movs	r0, #41	; 0x29
   178da:	4770      	bx	lr

000178dc <radio_rx_chain_delay_get>:
	switch (phy) {
   178dc:	2802      	cmp	r0, #2
}
   178de:	bf14      	ite	ne
   178e0:	200a      	movne	r0, #10
   178e2:	2006      	moveq	r0, #6
   178e4:	4770      	bx	lr
   178e6:	bf00      	nop

000178e8 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   178e8:	4b01      	ldr	r3, [pc, #4]	; (178f0 <radio_tx_enable+0x8>)
   178ea:	2201      	movs	r2, #1
   178ec:	601a      	str	r2, [r3, #0]
}
   178ee:	4770      	bx	lr
   178f0:	40001000 	.word	0x40001000

000178f4 <radio_disable>:
{
   178f4:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   178f6:	4a08      	ldr	r2, [pc, #32]	; (17918 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   178f8:	4808      	ldr	r0, [pc, #32]	; (1791c <radio_disable+0x28>)
   178fa:	4909      	ldr	r1, [pc, #36]	; (17920 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   178fc:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   178fe:	f44f 6510 	mov.w	r5, #2304	; 0x900
   17902:	2400      	movs	r4, #0
   17904:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   17908:	6053      	str	r3, [r2, #4]
   1790a:	60d3      	str	r3, [r2, #12]
   1790c:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   17910:	bc30      	pop	{r4, r5}
   17912:	600b      	str	r3, [r1, #0]
   17914:	4770      	bx	lr
   17916:	bf00      	nop
   17918:	4001f000 	.word	0x4001f000
   1791c:	40001000 	.word	0x40001000
   17920:	40001010 	.word	0x40001010

00017924 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   17924:	4b04      	ldr	r3, [pc, #16]	; (17938 <radio_status_reset+0x14>)
   17926:	2200      	movs	r2, #0
   17928:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1792c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   17930:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   17934:	4770      	bx	lr
   17936:	bf00      	nop
   17938:	40001000 	.word	0x40001000

0001793c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1793c:	4b03      	ldr	r3, [pc, #12]	; (1794c <radio_is_ready+0x10>)
   1793e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   17942:	3800      	subs	r0, #0
   17944:	bf18      	it	ne
   17946:	2001      	movne	r0, #1
   17948:	4770      	bx	lr
   1794a:	bf00      	nop
   1794c:	40001000 	.word	0x40001000

00017950 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   17950:	4b03      	ldr	r3, [pc, #12]	; (17960 <radio_is_done+0x10>)
   17952:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   17956:	3800      	subs	r0, #0
   17958:	bf18      	it	ne
   1795a:	2001      	movne	r0, #1
   1795c:	4770      	bx	lr
   1795e:	bf00      	nop
   17960:	40001000 	.word	0x40001000

00017964 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   17964:	4b03      	ldr	r3, [pc, #12]	; (17974 <radio_is_idle+0x10>)
   17966:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1796a:	fab0 f080 	clz	r0, r0
   1796e:	0940      	lsrs	r0, r0, #5
   17970:	4770      	bx	lr
   17972:	bf00      	nop
   17974:	40001000 	.word	0x40001000

00017978 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   17978:	4b04      	ldr	r3, [pc, #16]	; (1798c <radio_crc_configure+0x14>)
   1797a:	f240 1203 	movw	r2, #259	; 0x103
   1797e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   17982:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   17986:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1798a:	4770      	bx	lr
   1798c:	40001000 	.word	0x40001000

00017990 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   17990:	4b03      	ldr	r3, [pc, #12]	; (179a0 <radio_crc_is_valid+0x10>)
   17992:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17996:	3800      	subs	r0, #0
   17998:	bf18      	it	ne
   1799a:	2001      	movne	r0, #1
   1799c:	4770      	bx	lr
   1799e:	bf00      	nop
   179a0:	40001000 	.word	0x40001000

000179a4 <radio_pkt_empty_get>:
}
   179a4:	4800      	ldr	r0, [pc, #0]	; (179a8 <radio_pkt_empty_get+0x4>)
   179a6:	4770      	bx	lr
   179a8:	20003c20 	.word	0x20003c20

000179ac <radio_pkt_scratch_get>:
}
   179ac:	4800      	ldr	r0, [pc, #0]	; (179b0 <radio_pkt_scratch_get+0x4>)
   179ae:	4770      	bx	lr
   179b0:	20003c24 	.word	0x20003c24

000179b4 <radio_pkt_decrypt_get>:
}
   179b4:	4800      	ldr	r0, [pc, #0]	; (179b8 <radio_pkt_decrypt_get+0x4>)
   179b6:	4770      	bx	lr
   179b8:	20003b1c 	.word	0x20003b1c

000179bc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   179bc:	4b05      	ldr	r3, [pc, #20]	; (179d4 <radio_switch_complete_and_rx+0x18>)
{
   179be:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   179c0:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   179c2:	2403      	movs	r4, #3
{
   179c4:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   179c6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   179ca:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   179cc:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   179ce:	f7ff be25 	b.w	1761c <sw_switch.isra.0>
   179d2:	bf00      	nop
   179d4:	40001000 	.word	0x40001000

000179d8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   179d8:	4b04      	ldr	r3, [pc, #16]	; (179ec <radio_switch_complete_and_tx+0x14>)
{
   179da:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   179dc:	2403      	movs	r4, #3
{
   179de:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   179e0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   179e4:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   179e6:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   179e8:	f7ff be18 	b.w	1761c <sw_switch.isra.0>
   179ec:	40001000 	.word	0x40001000

000179f0 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   179f0:	4904      	ldr	r1, [pc, #16]	; (17a04 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   179f2:	4b05      	ldr	r3, [pc, #20]	; (17a08 <radio_switch_complete_and_disable+0x18>)
   179f4:	2003      	movs	r0, #3
   179f6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   179fa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   179fe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17a02:	4770      	bx	lr
   17a04:	40001000 	.word	0x40001000
   17a08:	4001f000 	.word	0x4001f000

00017a0c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   17a0c:	4b02      	ldr	r3, [pc, #8]	; (17a18 <radio_rssi_status_reset+0xc>)
   17a0e:	2200      	movs	r2, #0
   17a10:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   17a14:	4770      	bx	lr
   17a16:	bf00      	nop
   17a18:	40001000 	.word	0x40001000

00017a1c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   17a1c:	4b03      	ldr	r3, [pc, #12]	; (17a2c <radio_rssi_is_ready+0x10>)
   17a1e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   17a22:	3800      	subs	r0, #0
   17a24:	bf18      	it	ne
   17a26:	2001      	movne	r0, #1
   17a28:	4770      	bx	lr
   17a2a:	bf00      	nop
   17a2c:	40001000 	.word	0x40001000

00017a30 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   17a30:	b430      	push	{r4, r5}
   17a32:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   17a34:	00a3      	lsls	r3, r4, #2
   17a36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   17a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   17a3e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   17a40:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   17a44:	3401      	adds	r4, #1
   17a46:	8895      	ldrh	r5, [r2, #4]
   17a48:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   17a4c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   17a4e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   17a52:	d1ef      	bne.n	17a34 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   17a54:	4b03      	ldr	r3, [pc, #12]	; (17a64 <radio_filter_configure+0x34>)
   17a56:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   17a5a:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   17a5c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   17a60:	4770      	bx	lr
   17a62:	bf00      	nop
   17a64:	40001000 	.word	0x40001000

00017a68 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   17a68:	4a03      	ldr	r2, [pc, #12]	; (17a78 <radio_filter_disable+0x10>)
   17a6a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   17a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   17a72:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   17a76:	4770      	bx	lr
   17a78:	40001000 	.word	0x40001000

00017a7c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   17a7c:	4b02      	ldr	r3, [pc, #8]	; (17a88 <radio_filter_status_reset+0xc>)
   17a7e:	2200      	movs	r2, #0
   17a80:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   17a84:	4770      	bx	lr
   17a86:	bf00      	nop
   17a88:	40001000 	.word	0x40001000

00017a8c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   17a8c:	4b03      	ldr	r3, [pc, #12]	; (17a9c <radio_filter_has_match+0x10>)
   17a8e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   17a92:	3800      	subs	r0, #0
   17a94:	bf18      	it	ne
   17a96:	2001      	movne	r0, #1
   17a98:	4770      	bx	lr
   17a9a:	bf00      	nop
   17a9c:	40001000 	.word	0x40001000

00017aa0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   17aa0:	4b01      	ldr	r3, [pc, #4]	; (17aa8 <radio_filter_match_get+0x8>)
   17aa2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   17aa6:	4770      	bx	lr
   17aa8:	40001000 	.word	0x40001000

00017aac <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   17aac:	4904      	ldr	r1, [pc, #16]	; (17ac0 <radio_tmr_status_reset+0x14>)
   17aae:	4b05      	ldr	r3, [pc, #20]	; (17ac4 <radio_tmr_status_reset+0x18>)
   17ab0:	4a05      	ldr	r2, [pc, #20]	; (17ac8 <radio_tmr_status_reset+0x1c>)
   17ab2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   17ab6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   17aba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   17abe:	4770      	bx	lr
   17ac0:	4000b000 	.word	0x4000b000
   17ac4:	4001f000 	.word	0x4001f000
   17ac8:	0e7000c0 	.word	0x0e7000c0

00017acc <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   17acc:	4b03      	ldr	r3, [pc, #12]	; (17adc <radio_tmr_tifs_set+0x10>)
   17ace:	4a04      	ldr	r2, [pc, #16]	; (17ae0 <radio_tmr_tifs_set+0x14>)
   17ad0:	781b      	ldrb	r3, [r3, #0]
   17ad2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   17ad6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17ada:	4770      	bx	lr
   17adc:	20008609 	.word	0x20008609
   17ae0:	40009000 	.word	0x40009000

00017ae4 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   17ae4:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   17ae6:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   17aea:	4d31      	ldr	r5, [pc, #196]	; (17bb0 <radio_tmr_start+0xcc>)
   17aec:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   17af0:	42ab      	cmp	r3, r5
{
   17af2:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   17af4:	d906      	bls.n	17b04 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   17af6:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   17afa:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   17afe:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   17b02:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17b04:	4d2b      	ldr	r5, [pc, #172]	; (17bb4 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   17b06:	4b2c      	ldr	r3, [pc, #176]	; (17bb8 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   17b08:	482c      	ldr	r0, [pc, #176]	; (17bbc <radio_tmr_start+0xd8>)
   17b0a:	2601      	movs	r6, #1
   17b0c:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   17b0e:	2600      	movs	r6, #0
   17b10:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   17b14:	4d2a      	ldr	r5, [pc, #168]	; (17bc0 <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   17b16:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   17b1a:	2604      	movs	r6, #4
   17b1c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   17b20:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   17b22:	2602      	movs	r6, #2
   17b24:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17b28:	4a26      	ldr	r2, [pc, #152]	; (17bc4 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   17b2a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   17b2e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   17b32:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   17b36:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   17b3a:	4923      	ldr	r1, [pc, #140]	; (17bc8 <radio_tmr_start+0xe4>)
   17b3c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    p_reg->CHENSET = mask;
   17b40:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b42:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   17b46:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   17b4a:	b354      	cbz	r4, 17ba2 <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   17b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   17b50:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   17b54:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   17b58:	4b1a      	ldr	r3, [pc, #104]	; (17bc4 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   17b5a:	4a1c      	ldr	r2, [pc, #112]	; (17bcc <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17b5c:	491c      	ldr	r1, [pc, #112]	; (17bd0 <radio_tmr_start+0xec>)
   17b5e:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   17b62:	2500      	movs	r5, #0
   17b64:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   17b66:	2604      	movs	r6, #4
   17b68:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   17b6a:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   17b6e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   17b72:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   17b76:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b78:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17b7c:	4f15      	ldr	r7, [pc, #84]	; (17bd4 <radio_tmr_start+0xf0>)
   17b7e:	4e16      	ldr	r6, [pc, #88]	; (17bd8 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b80:	4d16      	ldr	r5, [pc, #88]	; (17bdc <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17b82:	4c17      	ldr	r4, [pc, #92]	; (17be0 <radio_tmr_start+0xfc>)
   17b84:	f8c3 7550 	str.w	r7, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b88:	320c      	adds	r2, #12
   17b8a:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17b8e:	f8c3 6558 	str.w	r6, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b92:	f8c3 555c 	str.w	r5, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17b96:	f8c3 4560 	str.w	r4, [r3, #1376]	; 0x560
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   17b9a:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17b9c:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
   17ba0:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   17ba2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   17ba6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   17baa:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   17bae:	e7d3      	b.n	17b58 <radio_tmr_start+0x74>
   17bb0:	7ff0bdbf 	.word	0x7ff0bdbf
   17bb4:	4000800c 	.word	0x4000800c
   17bb8:	40008000 	.word	0x40008000
   17bbc:	431bde83 	.word	0x431bde83
   17bc0:	4000b000 	.word	0x4000b000
   17bc4:	4001f000 	.word	0x4001f000
   17bc8:	4000b148 	.word	0x4000b148
   17bcc:	40009000 	.word	0x40009000
   17bd0:	4000900c 	.word	0x4000900c
   17bd4:	4000110c 	.word	0x4000110c
   17bd8:	40009140 	.word	0x40009140
   17bdc:	4001f004 	.word	0x4001f004
   17be0:	40009144 	.word	0x40009144

00017be4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   17be4:	4b01      	ldr	r3, [pc, #4]	; (17bec <radio_tmr_start_get+0x8>)
   17be6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   17bea:	4770      	bx	lr
   17bec:	4000b000 	.word	0x4000b000

00017bf0 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   17bf0:	b410      	push	{r4}
   17bf2:	4805      	ldr	r0, [pc, #20]	; (17c08 <radio_tmr_stop+0x18>)
   17bf4:	4c05      	ldr	r4, [pc, #20]	; (17c0c <radio_tmr_stop+0x1c>)
   17bf6:	4906      	ldr	r1, [pc, #24]	; (17c10 <radio_tmr_stop+0x20>)
   17bf8:	4a06      	ldr	r2, [pc, #24]	; (17c14 <radio_tmr_stop+0x24>)
   17bfa:	2301      	movs	r3, #1
   17bfc:	6023      	str	r3, [r4, #0]
   17bfe:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   17c00:	bc10      	pop	{r4}
   17c02:	600b      	str	r3, [r1, #0]
   17c04:	6013      	str	r3, [r2, #0]
   17c06:	4770      	bx	lr
   17c08:	40008010 	.word	0x40008010
   17c0c:	40008004 	.word	0x40008004
   17c10:	40009004 	.word	0x40009004
   17c14:	40009010 	.word	0x40009010

00017c18 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   17c18:	4904      	ldr	r1, [pc, #16]	; (17c2c <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   17c1a:	4b05      	ldr	r3, [pc, #20]	; (17c30 <radio_tmr_hcto_configure+0x18>)
   17c1c:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   17c20:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   17c24:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   17c28:	4770      	bx	lr
   17c2a:	bf00      	nop
   17c2c:	40008000 	.word	0x40008000
   17c30:	4001f000 	.word	0x4001f000

00017c34 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17c34:	4b05      	ldr	r3, [pc, #20]	; (17c4c <radio_tmr_aa_capture+0x18>)
   17c36:	4806      	ldr	r0, [pc, #24]	; (17c50 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17c38:	4906      	ldr	r1, [pc, #24]	; (17c54 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   17c3a:	4a07      	ldr	r2, [pc, #28]	; (17c58 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   17c3c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   17c40:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   17c44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   17c48:	4770      	bx	lr
   17c4a:	bf00      	nop
   17c4c:	4001f000 	.word	0x4001f000
   17c50:	40001100 	.word	0x40001100
   17c54:	40008040 	.word	0x40008040
   17c58:	04000080 	.word	0x04000080

00017c5c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   17c5c:	4b01      	ldr	r3, [pc, #4]	; (17c64 <radio_tmr_aa_get+0x8>)
   17c5e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   17c62:	4770      	bx	lr
   17c64:	40008000 	.word	0x40008000

00017c68 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   17c68:	4b01      	ldr	r3, [pc, #4]	; (17c70 <radio_tmr_aa_save+0x8>)
   17c6a:	6018      	str	r0, [r3, #0]
}
   17c6c:	4770      	bx	lr
   17c6e:	bf00      	nop
   17c70:	20003d30 	.word	0x20003d30

00017c74 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   17c74:	4b01      	ldr	r3, [pc, #4]	; (17c7c <radio_tmr_aa_restore+0x8>)
}
   17c76:	6818      	ldr	r0, [r3, #0]
   17c78:	4770      	bx	lr
   17c7a:	bf00      	nop
   17c7c:	20003d30 	.word	0x20003d30

00017c80 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   17c80:	4b01      	ldr	r3, [pc, #4]	; (17c88 <radio_tmr_ready_get+0x8>)
   17c82:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   17c86:	4770      	bx	lr
   17c88:	40008000 	.word	0x40008000

00017c8c <radio_tmr_end_capture>:
   17c8c:	4b02      	ldr	r3, [pc, #8]	; (17c98 <radio_tmr_end_capture+0xc>)
   17c8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   17c92:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   17c96:	4770      	bx	lr
   17c98:	4001f000 	.word	0x4001f000

00017c9c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   17c9c:	4b01      	ldr	r3, [pc, #4]	; (17ca4 <radio_tmr_end_get+0x8>)
   17c9e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   17ca2:	4770      	bx	lr
   17ca4:	40008000 	.word	0x40008000

00017ca8 <radio_tmr_tifs_base_get>:
   17ca8:	4b01      	ldr	r3, [pc, #4]	; (17cb0 <radio_tmr_tifs_base_get+0x8>)
   17caa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   17cae:	4770      	bx	lr
   17cb0:	40008000 	.word	0x40008000

00017cb4 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   17cb4:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17cb6:	4c14      	ldr	r4, [pc, #80]	; (17d08 <radio_ccm_rx_pkt_set+0x54>)
   17cb8:	4f14      	ldr	r7, [pc, #80]	; (17d0c <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17cba:	4b15      	ldr	r3, [pc, #84]	; (17d10 <radio_ccm_rx_pkt_set+0x5c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   17cbc:	4d15      	ldr	r5, [pc, #84]	; (17d14 <radio_ccm_rx_pkt_set+0x60>)
   17cbe:	4e16      	ldr	r6, [pc, #88]	; (17d18 <radio_ccm_rx_pkt_set+0x64>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   17cc0:	2902      	cmp	r1, #2
   17cc2:	bf14      	ite	ne
   17cc4:	4621      	movne	r1, r4
   17cc6:	4639      	moveq	r1, r7
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17cc8:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17cca:	2702      	movs	r7, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17ccc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17cd0:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   17cd4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17cd8:	4f10      	ldr	r7, [pc, #64]	; (17d1c <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   17cda:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17cde:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   17ce2:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   17ce6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17cea:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17cec:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   17cf0:	4628      	mov	r0, r5
	NRF_CCM->SHORTS = 0;
   17cf2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17cf6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17cfa:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   17cfe:	f8c6 1504 	str.w	r1, [r6, #1284]	; 0x504
}
   17d02:	bcf0      	pop	{r4, r5, r6, r7}
   17d04:	601a      	str	r2, [r3, #0]
   17d06:	4770      	bx	lr
   17d08:	01000001 	.word	0x01000001
   17d0c:	01010001 	.word	0x01010001
   17d10:	4000f000 	.word	0x4000f000
   17d14:	20003c24 	.word	0x20003c24
   17d18:	4001f000 	.word	0x4001f000
   17d1c:	20003a10 	.word	0x20003a10

00017d20 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   17d20:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d22:	4b10      	ldr	r3, [pc, #64]	; (17d64 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   17d24:	4d10      	ldr	r5, [pc, #64]	; (17d68 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   17d26:	4e11      	ldr	r6, [pc, #68]	; (17d6c <radio_ccm_tx_pkt_set+0x4c>)
{
   17d28:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d2a:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17d2c:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   17d2e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   17d32:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   17d36:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   17d3a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17d3e:	4e0c      	ldr	r6, [pc, #48]	; (17d70 <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   17d40:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   17d44:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   17d46:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   17d4a:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   17d4c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   17d50:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   17d54:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   17d58:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   17d5c:	601c      	str	r4, [r3, #0]
}
   17d5e:	bc70      	pop	{r4, r5, r6}
   17d60:	4770      	bx	lr
   17d62:	bf00      	nop
   17d64:	4000f000 	.word	0x4000f000
   17d68:	20003c24 	.word	0x20003c24
   17d6c:	01010000 	.word	0x01010000
   17d70:	20003a10 	.word	0x20003a10

00017d74 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   17d74:	4a0e      	ldr	r2, [pc, #56]	; (17db0 <radio_ccm_is_done+0x3c>)
   17d76:	2302      	movs	r3, #2
   17d78:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17d7c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   17d80:	b933      	cbnz	r3, 17d90 <radio_ccm_is_done+0x1c>
		__WFE();
   17d82:	bf20      	wfe
		__SEV();
   17d84:	bf40      	sev
		__WFE();
   17d86:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   17d88:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   17d8c:	2b00      	cmp	r3, #0
   17d8e:	d0f8      	beq.n	17d82 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   17d90:	4b07      	ldr	r3, [pc, #28]	; (17db0 <radio_ccm_is_done+0x3c>)
   17d92:	4a08      	ldr	r2, [pc, #32]	; (17db4 <radio_ccm_is_done+0x40>)
   17d94:	2002      	movs	r0, #2
   17d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   17d9a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   17d9e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   17da2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   17da6:	fab0 f080 	clz	r0, r0
   17daa:	0940      	lsrs	r0, r0, #5
   17dac:	4770      	bx	lr
   17dae:	bf00      	nop
   17db0:	4000f000 	.word	0x4000f000
   17db4:	e000e100 	.word	0xe000e100

00017db8 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   17db8:	4b03      	ldr	r3, [pc, #12]	; (17dc8 <radio_ccm_mic_is_valid+0x10>)
   17dba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17dbe:	3800      	subs	r0, #0
   17dc0:	bf18      	it	ne
   17dc2:	2001      	movne	r0, #1
   17dc4:	4770      	bx	lr
   17dc6:	bf00      	nop
   17dc8:	4000f000 	.word	0x4000f000

00017dcc <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   17dcc:	4a14      	ldr	r2, [pc, #80]	; (17e20 <radio_ar_configure+0x54>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17dce:	4b15      	ldr	r3, [pc, #84]	; (17e24 <radio_ar_configure+0x58>)
{
   17dd0:	b470      	push	{r4, r5, r6}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   17dd2:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   17dd6:	4e14      	ldr	r6, [pc, #80]	; (17e28 <radio_ar_configure+0x5c>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   17dd8:	2403      	movs	r4, #3
   17dda:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
		addrptr = NRF_RADIO->PACKETPTR - 1;
   17dde:	3d01      	subs	r5, #1
	NRF_AAR->NIRK = nirk;
   17de0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504

	NRF_AAR->EVENTS_END = 0;
   17de4:	2400      	movs	r4, #0
    p_reg->BCC = radio_bcc;
   17de6:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->IRKPTR = (uint32_t)irk;
   17de8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = addrptr;
   17dec:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   17df0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   17df4:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   17df8:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   17dfc:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   17e00:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   17e04:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   17e08:	4908      	ldr	r1, [pc, #32]	; (17e2c <radio_ar_configure+0x60>)
   17e0a:	4303      	orrs	r3, r0
   17e0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   17e10:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17e14:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   17e18:	bc70      	pop	{r4, r5, r6}
   17e1a:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   17e1e:	4770      	bx	lr
   17e20:	40001000 	.word	0x40001000
   17e24:	4000f000 	.word	0x4000f000
   17e28:	20003a0c 	.word	0x20003a0c
   17e2c:	4001f000 	.word	0x4001f000

00017e30 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   17e30:	4b01      	ldr	r3, [pc, #4]	; (17e38 <radio_ar_match_get+0x8>)
   17e32:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   17e36:	4770      	bx	lr
   17e38:	4000f000 	.word	0x4000f000

00017e3c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   17e3c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   17e3e:	4807      	ldr	r0, [pc, #28]	; (17e5c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   17e40:	4c07      	ldr	r4, [pc, #28]	; (17e60 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   17e42:	4a08      	ldr	r2, [pc, #32]	; (17e64 <radio_ar_status_reset+0x28>)
   17e44:	2300      	movs	r3, #0
   17e46:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   17e4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   17e4e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   17e52:	bc10      	pop	{r4}
   17e54:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   17e58:	4770      	bx	lr
   17e5a:	bf00      	nop
   17e5c:	4000f000 	.word	0x4000f000
   17e60:	40001000 	.word	0x40001000
   17e64:	4001f000 	.word	0x4001f000

00017e68 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   17e68:	4b08      	ldr	r3, [pc, #32]	; (17e8c <radio_ar_has_match+0x24>)
   17e6a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   17e6e:	b160      	cbz	r0, 17e8a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   17e70:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   17e74:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   17e78:	b138      	cbz	r0, 17e8a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   17e7a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   17e7e:	b120      	cbz	r0, 17e8a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   17e80:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   17e84:	fab0 f080 	clz	r0, r0
   17e88:	0940      	lsrs	r0, r0, #5
}
   17e8a:	4770      	bx	lr
   17e8c:	40001000 	.word	0x40001000

00017e90 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   17e90:	2902      	cmp	r1, #2
{
   17e92:	b510      	push	{r4, lr}
   17e94:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   17e96:	d00b      	beq.n	17eb0 <mayfly_enable_cb+0x20>
   17e98:	4a0a      	ldr	r2, [pc, #40]	; (17ec4 <mayfly_enable_cb+0x34>)
   17e9a:	490b      	ldr	r1, [pc, #44]	; (17ec8 <mayfly_enable_cb+0x38>)
   17e9c:	480b      	ldr	r0, [pc, #44]	; (17ecc <mayfly_enable_cb+0x3c>)
   17e9e:	231e      	movs	r3, #30
   17ea0:	f00a ff85 	bl	22dae <printk>
   17ea4:	4040      	eors	r0, r0
   17ea6:	f380 8811 	msr	BASEPRI, r0
   17eaa:	f04f 0003 	mov.w	r0, #3
   17eae:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   17eb0:	200b      	movs	r0, #11
	if (enable) {
   17eb2:	b11c      	cbz	r4, 17ebc <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   17eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   17eb8:	f7ec baa2 	b.w	4400 <arch_irq_enable>
}
   17ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   17ec0:	f7ec baae 	b.w	4420 <arch_irq_disable>
   17ec4:	0002d2a4 	.word	0x0002d2a4
   17ec8:	0002d2f4 	.word	0x0002d2f4
   17ecc:	0002c5e0 	.word	0x0002c5e0

00017ed0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17ed0:	b129      	cbz	r1, 17ede <mayfly_is_enabled+0xe>
   17ed2:	3901      	subs	r1, #1
   17ed4:	2901      	cmp	r1, #1
   17ed6:	d805      	bhi.n	17ee4 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   17ed8:	200b      	movs	r0, #11
   17eda:	f7ec bab5 	b.w	4448 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   17ede:	2018      	movs	r0, #24
   17ee0:	f7ec bab2 	b.w	4448 <arch_irq_is_enabled>
{
   17ee4:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   17ee6:	4a07      	ldr	r2, [pc, #28]	; (17f04 <mayfly_is_enabled+0x34>)
   17ee8:	4907      	ldr	r1, [pc, #28]	; (17f08 <mayfly_is_enabled+0x38>)
   17eea:	4808      	ldr	r0, [pc, #32]	; (17f0c <mayfly_is_enabled+0x3c>)
   17eec:	2336      	movs	r3, #54	; 0x36
   17eee:	f00a ff5e 	bl	22dae <printk>
   17ef2:	4040      	eors	r0, r0
   17ef4:	f380 8811 	msr	BASEPRI, r0
   17ef8:	f04f 0003 	mov.w	r0, #3
   17efc:	df02      	svc	2
		break;
	}

	return 0;
}
   17efe:	2000      	movs	r0, #0
   17f00:	bd08      	pop	{r3, pc}
   17f02:	bf00      	nop
   17f04:	0002d2a4 	.word	0x0002d2a4
   17f08:	0002c650 	.word	0x0002c650
   17f0c:	0002c5e0 	.word	0x0002c5e0

00017f10 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   17f10:	4288      	cmp	r0, r1
   17f12:	d00b      	beq.n	17f2c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   17f14:	2801      	cmp	r0, #1
   17f16:	d003      	beq.n	17f20 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   17f18:	2802      	cmp	r0, #2
   17f1a:	d009      	beq.n	17f30 <mayfly_prio_is_equal+0x20>
   17f1c:	2000      	movs	r0, #0
#endif
	       0;
}
   17f1e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   17f20:	f1a1 0002 	sub.w	r0, r1, #2
   17f24:	fab0 f080 	clz	r0, r0
   17f28:	0940      	lsrs	r0, r0, #5
   17f2a:	4770      	bx	lr
   17f2c:	2001      	movs	r0, #1
   17f2e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   17f30:	f1a1 0001 	sub.w	r0, r1, #1
   17f34:	fab0 f080 	clz	r0, r0
   17f38:	0940      	lsrs	r0, r0, #5
   17f3a:	4770      	bx	lr

00017f3c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   17f3c:	2901      	cmp	r1, #1
{
   17f3e:	b508      	push	{r3, lr}
	switch (callee_id) {
   17f40:	d00f      	beq.n	17f62 <mayfly_pend+0x26>
   17f42:	2902      	cmp	r1, #2
   17f44:	d00d      	beq.n	17f62 <mayfly_pend+0x26>
   17f46:	b191      	cbz	r1, 17f6e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   17f48:	4a0c      	ldr	r2, [pc, #48]	; (17f7c <mayfly_pend+0x40>)
   17f4a:	490d      	ldr	r1, [pc, #52]	; (17f80 <mayfly_pend+0x44>)
   17f4c:	480d      	ldr	r0, [pc, #52]	; (17f84 <mayfly_pend+0x48>)
   17f4e:	2367      	movs	r3, #103	; 0x67
   17f50:	f00a ff2d 	bl	22dae <printk>
   17f54:	4040      	eors	r0, r0
   17f56:	f380 8811 	msr	BASEPRI, r0
   17f5a:	f04f 0003 	mov.w	r0, #3
   17f5e:	df02      	svc	2
		break;
	}
}
   17f60:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17f62:	4b09      	ldr	r3, [pc, #36]	; (17f88 <mayfly_pend+0x4c>)
   17f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
   17f68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17f6c:	bd08      	pop	{r3, pc}
   17f6e:	4b06      	ldr	r3, [pc, #24]	; (17f88 <mayfly_pend+0x4c>)
   17f70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   17f74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   17f78:	bd08      	pop	{r3, pc}
   17f7a:	bf00      	nop
   17f7c:	0002d2a4 	.word	0x0002d2a4
   17f80:	0002c650 	.word	0x0002c650
   17f84:	0002c5e0 	.word	0x0002c5e0
   17f88:	e000e100 	.word	0xe000e100

00017f8c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17f8c:	2803      	cmp	r0, #3
{
   17f8e:	b510      	push	{r4, lr}
   17f90:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17f92:	d804      	bhi.n	17f9e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   17f94:	4b11      	ldr	r3, [pc, #68]	; (17fdc <hal_ticker_instance0_caller_id_get+0x50>)
   17f96:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   17f98:	b18c      	cbz	r4, 17fbe <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   17f9a:	4620      	mov	r0, r4
   17f9c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   17f9e:	4a10      	ldr	r2, [pc, #64]	; (17fe0 <hal_ticker_instance0_caller_id_get+0x54>)
   17fa0:	4910      	ldr	r1, [pc, #64]	; (17fe4 <hal_ticker_instance0_caller_id_get+0x58>)
   17fa2:	4811      	ldr	r0, [pc, #68]	; (17fe8 <hal_ticker_instance0_caller_id_get+0x5c>)
   17fa4:	232b      	movs	r3, #43	; 0x2b
   17fa6:	f00a ff02 	bl	22dae <printk>
   17faa:	4040      	eors	r0, r0
   17fac:	f380 8811 	msr	BASEPRI, r0
   17fb0:	f04f 0003 	mov.w	r0, #3
   17fb4:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   17fb6:	4b09      	ldr	r3, [pc, #36]	; (17fdc <hal_ticker_instance0_caller_id_get+0x50>)
   17fb8:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   17fba:	2c00      	cmp	r4, #0
   17fbc:	d1ed      	bne.n	17f9a <hal_ticker_instance0_caller_id_get+0xe>
   17fbe:	4a08      	ldr	r2, [pc, #32]	; (17fe0 <hal_ticker_instance0_caller_id_get+0x54>)
   17fc0:	490a      	ldr	r1, [pc, #40]	; (17fec <hal_ticker_instance0_caller_id_get+0x60>)
   17fc2:	4809      	ldr	r0, [pc, #36]	; (17fe8 <hal_ticker_instance0_caller_id_get+0x5c>)
   17fc4:	232e      	movs	r3, #46	; 0x2e
   17fc6:	f00a fef2 	bl	22dae <printk>
   17fca:	4040      	eors	r0, r0
   17fcc:	f380 8811 	msr	BASEPRI, r0
   17fd0:	f04f 0003 	mov.w	r0, #3
   17fd4:	df02      	svc	2
}
   17fd6:	4620      	mov	r0, r4
   17fd8:	bd10      	pop	{r4, pc}
   17fda:	bf00      	nop
   17fdc:	0002d3ac 	.word	0x0002d3ac
   17fe0:	0002d318 	.word	0x0002d318
   17fe4:	0002d368 	.word	0x0002d368
   17fe8:	0002c5e0 	.word	0x0002c5e0
   17fec:	0002d388 	.word	0x0002d388

00017ff0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   17ff0:	3801      	subs	r0, #1
{
   17ff2:	b510      	push	{r4, lr}
   17ff4:	461c      	mov	r4, r3
   17ff6:	2804      	cmp	r0, #4
   17ff8:	d855      	bhi.n	180a6 <hal_ticker_instance0_sched+0xb6>
   17ffa:	e8df f000 	tbb	[pc, r0]
   17ffe:	1a12      	.short	0x1a12
   18000:	1e16      	.short	0x1e16
   18002:	03          	.byte	0x03
   18003:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   18004:	2904      	cmp	r1, #4
   18006:	d01e      	beq.n	18046 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   18008:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   1800a:	4a28      	ldr	r2, [pc, #160]	; (180ac <hal_ticker_instance0_sched+0xbc>)
   1800c:	4928      	ldr	r1, [pc, #160]	; (180b0 <hal_ticker_instance0_sched+0xc0>)
   1800e:	4829      	ldr	r0, [pc, #164]	; (180b4 <hal_ticker_instance0_sched+0xc4>)
   18010:	f00a fecd 	bl	22dae <printk>
   18014:	4040      	eors	r0, r0
   18016:	f380 8811 	msr	BASEPRI, r0
   1801a:	f04f 0003 	mov.w	r0, #3
   1801e:	df02      	svc	2
		break;
	}
}
   18020:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   18022:	2904      	cmp	r1, #4
   18024:	d01f      	beq.n	18066 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   18026:	234e      	movs	r3, #78	; 0x4e
   18028:	e7ef      	b.n	1800a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1802a:	2904      	cmp	r1, #4
   1802c:	d013      	beq.n	18056 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   1802e:	237c      	movs	r3, #124	; 0x7c
   18030:	e7eb      	b.n	1800a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   18032:	2903      	cmp	r1, #3
   18034:	d01f      	beq.n	18076 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   18036:	2365      	movs	r3, #101	; 0x65
   18038:	e7e7      	b.n	1800a <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   1803a:	2903      	cmp	r1, #3
   1803c:	d02b      	beq.n	18096 <hal_ticker_instance0_sched+0xa6>
   1803e:	2904      	cmp	r1, #4
   18040:	d021      	beq.n	18086 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   18042:	23a2      	movs	r3, #162	; 0xa2
   18044:	e7e1      	b.n	1800a <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   18046:	4b1c      	ldr	r3, [pc, #112]	; (180b8 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   18048:	2102      	movs	r1, #2
			m.param = instance;
   1804a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1804c:	2003      	movs	r0, #3
}
   1804e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   18052:	f7f3 bb01 	b.w	b658 <mayfly_enqueue>
			m.param = instance;
   18056:	4b19      	ldr	r3, [pc, #100]	; (180bc <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   18058:	2102      	movs	r1, #2
			m.param = instance;
   1805a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1805c:	2001      	movs	r0, #1
}
   1805e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   18062:	f7f3 baf9 	b.w	b658 <mayfly_enqueue>
			m.param = instance;
   18066:	4b16      	ldr	r3, [pc, #88]	; (180c0 <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   18068:	2102      	movs	r1, #2
			m.param = instance;
   1806a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1806c:	2000      	movs	r0, #0
}
   1806e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   18072:	f7f3 baf1 	b.w	b658 <mayfly_enqueue>
			m.param = instance;
   18076:	4b13      	ldr	r3, [pc, #76]	; (180c4 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   18078:	2101      	movs	r1, #1
			m.param = instance;
   1807a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1807c:	4608      	mov	r0, r1
}
   1807e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   18082:	f7f3 bae9 	b.w	b658 <mayfly_enqueue>
			m.param = instance;
   18086:	4b10      	ldr	r3, [pc, #64]	; (180c8 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18088:	2102      	movs	r1, #2
			m.param = instance;
   1808a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1808c:	4608      	mov	r0, r1
}
   1808e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18092:	f7f3 bae1 	b.w	b658 <mayfly_enqueue>
			m.param = instance;
   18096:	4b0d      	ldr	r3, [pc, #52]	; (180cc <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18098:	2101      	movs	r1, #1
			m.param = instance;
   1809a:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1809c:	2002      	movs	r0, #2
}
   1809e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   180a2:	f7f3 bad9 	b.w	b658 <mayfly_enqueue>
		LL_ASSERT(0);
   180a6:	23c0      	movs	r3, #192	; 0xc0
   180a8:	e7af      	b.n	1800a <hal_ticker_instance0_sched+0x1a>
   180aa:	bf00      	nop
   180ac:	0002d318 	.word	0x0002d318
   180b0:	0002c650 	.word	0x0002c650
   180b4:	0002c5e0 	.word	0x0002c5e0
   180b8:	200006fc 	.word	0x200006fc
   180bc:	200006cc 	.word	0x200006cc
   180c0:	200006ac 	.word	0x200006ac
   180c4:	200006bc 	.word	0x200006bc
   180c8:	200006ec 	.word	0x200006ec
   180cc:	200006dc 	.word	0x200006dc

000180d0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   180d0:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   180d2:	2000      	movs	r0, #0
   180d4:	f7ff ba4e 	b.w	17574 <cntr_cmp_set>

000180d8 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   180d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   180dc:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   180e0:	3201      	adds	r2, #1
   180e2:	d008      	beq.n	180f6 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   180e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   180e8:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   180ec:	f013 0301 	ands.w	r3, r3, #1
   180f0:	d10f      	bne.n	18112 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   180f2:	2000      	movs	r0, #0
   180f4:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   180f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   180fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   180fe:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   18100:	4293      	cmp	r3, r2
   18102:	d0f6      	beq.n	180f2 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   18104:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18108:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1810c:	f013 0301 	ands.w	r3, r3, #1
   18110:	d0ef      	beq.n	180f2 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   18112:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   18116:	0c19      	lsrs	r1, r3, #16
{
   18118:	b410      	push	{r4}
	dst[0] = val;
   1811a:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1811c:	0a0c      	lsrs	r4, r1, #8
   1811e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18122:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   18124:	70c4      	strb	r4, [r0, #3]
   18126:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   18128:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1812c:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1812e:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   18132:	f063 033f 	orn	r3, r3, #63	; 0x3f
   18136:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   18138:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1813c:	3301      	adds	r3, #1
   1813e:	d035      	beq.n	181ac <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   18140:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   18144:	3301      	adds	r3, #1
   18146:	d031      	beq.n	181ac <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   18148:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1814c:	3301      	adds	r3, #1
   1814e:	d02d      	beq.n	181ac <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   18150:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   18154:	3301      	adds	r3, #1
   18156:	d029      	beq.n	181ac <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   18158:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1815c:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1815e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18160:	0a0c      	lsrs	r4, r1, #8
   18162:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18166:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   18168:	7244      	strb	r4, [r0, #9]
   1816a:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1816c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   18170:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   18172:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18174:	0a0c      	lsrs	r4, r1, #8
   18176:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1817a:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1817c:	7344      	strb	r4, [r0, #13]
   1817e:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   18180:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   18184:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   18186:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18188:	0a0c      	lsrs	r4, r1, #8
   1818a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1818e:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   18190:	7444      	strb	r4, [r0, #17]
   18192:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   18194:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   18198:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1819a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1819c:	0a11      	lsrs	r1, r2, #8
   1819e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   181a2:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   181a4:	7541      	strb	r1, [r0, #21]
   181a6:	74c3      	strb	r3, [r0, #19]
		return 1;
   181a8:	2001      	movs	r0, #1
}
   181aa:	e009      	b.n	181c0 <hci_vendor_read_static_addr+0xe8>
__ssp_bos_icheck3(memset, void *, int)
   181ac:	2300      	movs	r3, #0
   181ae:	f8c0 3006 	str.w	r3, [r0, #6]
   181b2:	f8c0 300a 	str.w	r3, [r0, #10]
   181b6:	f8c0 300e 	str.w	r3, [r0, #14]
   181ba:	f8c0 3012 	str.w	r3, [r0, #18]
   181be:	2001      	movs	r0, #1
}
   181c0:	bc10      	pop	{r4}
   181c2:	4770      	bx	lr

000181c4 <hci_vendor_read_key_hierarchy_roots>:
   181c4:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   181c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   181ca:	6003      	str	r3, [r0, #0]
   181cc:	6043      	str	r3, [r0, #4]
   181ce:	6083      	str	r3, [r0, #8]
   181d0:	60c3      	str	r3, [r0, #12]
   181d2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   181d6:	3301      	adds	r3, #1
   181d8:	d036      	beq.n	18248 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   181da:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   181de:	3301      	adds	r3, #1
   181e0:	d032      	beq.n	18248 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   181e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   181e6:	3301      	adds	r3, #1
   181e8:	d02e      	beq.n	18248 <hci_vendor_read_key_hierarchy_roots+0x84>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   181ea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   181ee:	3301      	adds	r3, #1
   181f0:	d02a      	beq.n	18248 <hci_vendor_read_key_hierarchy_roots+0x84>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   181f2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   181f6:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   181f8:	0c18      	lsrs	r0, r3, #16
{
   181fa:	b410      	push	{r4}
	dst[1] = val >> 8;
   181fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18200:	0a04      	lsrs	r4, r0, #8
	dst[0] = val;
   18202:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   18204:	70cc      	strb	r4, [r1, #3]
   18206:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   18208:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   1820c:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1820e:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   18210:	0a04      	lsrs	r4, r0, #8
   18212:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18216:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   18218:	71cc      	strb	r4, [r1, #7]
   1821a:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1821c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   18220:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   18222:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   18224:	0a04      	lsrs	r4, r0, #8
   18226:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1822a:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   1822c:	72cc      	strb	r4, [r1, #11]
   1822e:	724b      	strb	r3, [r1, #9]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   18230:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   18234:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   18236:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   18238:	0a10      	lsrs	r0, r2, #8
   1823a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1823e:	bc10      	pop	{r4}
	dst[0] = val;
   18240:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   18242:	73c8      	strb	r0, [r1, #15]
   18244:	734b      	strb	r3, [r1, #13]
   18246:	4770      	bx	lr
   18248:	2300      	movs	r3, #0
   1824a:	600b      	str	r3, [r1, #0]
   1824c:	604b      	str	r3, [r1, #4]
   1824e:	608b      	str	r3, [r1, #8]
   18250:	60cb      	str	r3, [r1, #12]
   18252:	4770      	bx	lr

00018254 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18254:	4b02      	ldr	r3, [pc, #8]	; (18260 <net_buf_pool_get+0xc>)
   18256:	2228      	movs	r2, #40	; 0x28
   18258:	fb02 3000 	mla	r0, r2, r0, r3
   1825c:	4770      	bx	lr
   1825e:	bf00      	nop
   18260:	20000c40 	.word	0x20000c40

00018264 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18264:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   18266:	4a05      	ldr	r2, [pc, #20]	; (1827c <net_buf_id+0x18>)
   18268:	2128      	movs	r1, #40	; 0x28
   1826a:	fb01 2303 	mla	r3, r1, r3, r2
   1826e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18270:	1ac0      	subs	r0, r0, r3
}
   18272:	4b03      	ldr	r3, [pc, #12]	; (18280 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   18274:	10c0      	asrs	r0, r0, #3
}
   18276:	4358      	muls	r0, r3
   18278:	4770      	bx	lr
   1827a:	bf00      	nop
   1827c:	20000c40 	.word	0x20000c40
   18280:	aaaaaaab 	.word	0xaaaaaaab

00018284 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18284:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18286:	4a0a      	ldr	r2, [pc, #40]	; (182b0 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18288:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1828a:	2428      	movs	r4, #40	; 0x28
   1828c:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   18290:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18292:	6a1b      	ldr	r3, [r3, #32]
   18294:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18296:	6823      	ldr	r3, [r4, #0]
   18298:	429a      	cmp	r2, r3
   1829a:	bf94      	ite	ls
   1829c:	600a      	strls	r2, [r1, #0]
   1829e:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   182a0:	f7ff ffe0 	bl	18264 <net_buf_id>
   182a4:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   182a8:	fb02 3000 	mla	r0, r2, r0, r3
   182ac:	bd10      	pop	{r4, pc}
   182ae:	bf00      	nop
   182b0:	20000c40 	.word	0x20000c40

000182b4 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   182b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   182b8:	4605      	mov	r5, r0
   182ba:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   182bc:	4610      	mov	r0, r2
   182be:	4619      	mov	r1, r3
{
   182c0:	4616      	mov	r6, r2
   182c2:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   182c4:	f013 f866 	bl	2b394 <z_timeout_end_calc>
   182c8:	4680      	mov	r8, r0
   182ca:	4689      	mov	r9, r1
	__asm__ volatile(
   182cc:	f04f 0320 	mov.w	r3, #32
   182d0:	f3ef 8a11 	mrs	sl, BASEPRI
   182d4:	f383 8811 	msr	BASEPRI, r3
   182d8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   182dc:	8b6b      	ldrh	r3, [r5, #26]
   182de:	2b00      	cmp	r3, #0
   182e0:	d054      	beq.n	1838c <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   182e2:	8b2a      	ldrh	r2, [r5, #24]
   182e4:	429a      	cmp	r2, r3
   182e6:	d93d      	bls.n	18364 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   182e8:	2200      	movs	r2, #0
   182ea:	2300      	movs	r3, #0
   182ec:	4628      	mov	r0, r5
   182ee:	f007 faf7 	bl	1f8e0 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   182f2:	4604      	mov	r4, r0
   182f4:	2800      	cmp	r0, #0
   182f6:	d035      	beq.n	18364 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   182f8:	f38a 8811 	msr	BASEPRI, sl
   182fc:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18300:	9b01      	ldr	r3, [sp, #4]
   18302:	2b00      	cmp	r3, #0
   18304:	d052      	beq.n	183ac <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18306:	ea56 0307 	orrs.w	r3, r6, r7
   1830a:	d010      	beq.n	1832e <net_buf_alloc_len+0x7a>
   1830c:	1c7b      	adds	r3, r7, #1
   1830e:	bf08      	it	eq
   18310:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18314:	d00b      	beq.n	1832e <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   18316:	f008 f9b7 	bl	20688 <z_tick_get>
   1831a:	ebb8 0600 	subs.w	r6, r8, r0
   1831e:	eb69 0701 	sbc.w	r7, r9, r1
   18322:	2e00      	cmp	r6, #0
   18324:	f177 0300 	sbcs.w	r3, r7, #0
   18328:	bfbc      	itt	lt
   1832a:	2600      	movlt	r6, #0
   1832c:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1832e:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18330:	f8df 8090 	ldr.w	r8, [pc, #144]	; 183c4 <net_buf_alloc_len+0x110>
   18334:	2228      	movs	r2, #40	; 0x28
   18336:	fb02 8303 	mla	r3, r2, r3, r8
   1833a:	a901      	add	r1, sp, #4
   1833c:	6a1b      	ldr	r3, [r3, #32]
   1833e:	681b      	ldr	r3, [r3, #0]
   18340:	4632      	mov	r2, r6
   18342:	681d      	ldr	r5, [r3, #0]
   18344:	4620      	mov	r0, r4
   18346:	463b      	mov	r3, r7
   18348:	47a8      	blx	r5
   1834a:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1834c:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1834e:	bb70      	cbnz	r0, 183ae <net_buf_alloc_len+0xfa>
	k_lifo_put(&pool->free, buf);
   18350:	79a0      	ldrb	r0, [r4, #6]
   18352:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18356:	4621      	mov	r1, r4
   18358:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1835c:	f012 fdfb 	bl	2af56 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   18360:	462c      	mov	r4, r5
}
   18362:	e01f      	b.n	183a4 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   18364:	8b68      	ldrh	r0, [r5, #26]
   18366:	1e43      	subs	r3, r0, #1
   18368:	836b      	strh	r3, [r5, #26]
   1836a:	f38a 8811 	msr	BASEPRI, sl
   1836e:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   18372:	8b2c      	ldrh	r4, [r5, #24]
   18374:	1a24      	subs	r4, r4, r0
   18376:	6a68      	ldr	r0, [r5, #36]	; 0x24
   18378:	2318      	movs	r3, #24
   1837a:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1837e:	4811      	ldr	r0, [pc, #68]	; (183c4 <net_buf_alloc_len+0x110>)
   18380:	4b11      	ldr	r3, [pc, #68]	; (183c8 <net_buf_alloc_len+0x114>)
   18382:	1a2d      	subs	r5, r5, r0
   18384:	10ed      	asrs	r5, r5, #3
   18386:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   18388:	71a5      	strb	r5, [r4, #6]
		goto success;
   1838a:	e7b9      	b.n	18300 <net_buf_alloc_len+0x4c>
   1838c:	f38a 8811 	msr	BASEPRI, sl
   18390:	f3bf 8f6f 	isb	sy
   18394:	4632      	mov	r2, r6
   18396:	463b      	mov	r3, r7
   18398:	4628      	mov	r0, r5
   1839a:	f007 faa1 	bl	1f8e0 <z_impl_k_queue_get>
	if (!buf) {
   1839e:	4604      	mov	r4, r0
   183a0:	2800      	cmp	r0, #0
   183a2:	d1ad      	bne.n	18300 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   183a4:	4620      	mov	r0, r4
   183a6:	b002      	add	sp, #8
   183a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   183ac:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   183ae:	2300      	movs	r3, #0
	buf->ref   = 1U;
   183b0:	2201      	movs	r2, #1
	buf->frags = NULL;
   183b2:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   183b4:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   183b6:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   183b8:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   183ba:	6923      	ldr	r3, [r4, #16]
   183bc:	81e2      	strh	r2, [r4, #14]
   183be:	60a3      	str	r3, [r4, #8]
	return buf;
   183c0:	e7f0      	b.n	183a4 <net_buf_alloc_len+0xf0>
   183c2:	bf00      	nop
   183c4:	20000c40 	.word	0x20000c40
   183c8:	cccccccd 	.word	0xcccccccd

000183cc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   183cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   183d0:	4d17      	ldr	r5, [pc, #92]	; (18430 <net_buf_unref+0x64>)
   183d2:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   183d4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   183d6:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   183d8:	b90c      	cbnz	r4, 183de <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   183da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   183de:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   183e0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   183e4:	3b01      	subs	r3, #1
   183e6:	b2db      	uxtb	r3, r3
   183e8:	7123      	strb	r3, [r4, #4]
   183ea:	2b00      	cmp	r3, #0
   183ec:	d1f5      	bne.n	183da <net_buf_unref+0xe>
		if (buf->__buf) {
   183ee:	6921      	ldr	r1, [r4, #16]
   183f0:	b159      	cbz	r1, 1840a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   183f2:	7963      	ldrb	r3, [r4, #5]
   183f4:	079b      	lsls	r3, r3, #30
   183f6:	d407      	bmi.n	18408 <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   183f8:	79a3      	ldrb	r3, [r4, #6]
   183fa:	fb07 5303 	mla	r3, r7, r3, r5
   183fe:	4620      	mov	r0, r4
   18400:	6a1b      	ldr	r3, [r3, #32]
   18402:	681b      	ldr	r3, [r3, #0]
   18404:	689b      	ldr	r3, [r3, #8]
   18406:	4798      	blx	r3
			buf->__buf = NULL;
   18408:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1840a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1840c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1840e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   18412:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   18414:	69db      	ldr	r3, [r3, #28]
   18416:	b11b      	cbz	r3, 18420 <net_buf_unref+0x54>
			pool->destroy(buf);
   18418:	4620      	mov	r0, r4
   1841a:	4798      	blx	r3
{
   1841c:	4644      	mov	r4, r8
   1841e:	e7db      	b.n	183d8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   18420:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18424:	4621      	mov	r1, r4
   18426:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1842a:	f012 fd94 	bl	2af56 <k_queue_prepend>
}
   1842e:	e7f5      	b.n	1841c <net_buf_unref+0x50>
   18430:	20000c40 	.word	0x20000c40

00018434 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18434:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   18436:	4b09      	ldr	r3, [pc, #36]	; (1845c <gpio_nrfx_init+0x28>)
   18438:	781a      	ldrb	r2, [r3, #0]
   1843a:	b96a      	cbnz	r2, 18458 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1843c:	2101      	movs	r1, #1
   1843e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18440:	2006      	movs	r0, #6
   18442:	2105      	movs	r1, #5
   18444:	f7ec f80e 	bl	4464 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   18448:	2006      	movs	r0, #6
   1844a:	f7eb ffd9 	bl	4400 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1844e:	4b04      	ldr	r3, [pc, #16]	; (18460 <gpio_nrfx_init+0x2c>)
   18450:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18454:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   18458:	2000      	movs	r0, #0
   1845a:	bd08      	pop	{r3, pc}
   1845c:	2000860a 	.word	0x2000860a
   18460:	40006000 	.word	0x40006000

00018464 <gpio_nrfx_pin_interrupt_configure>:
{
   18464:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18466:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   18468:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   1846a:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1846c:	7a09      	ldrb	r1, [r1, #8]
   1846e:	f005 041f 	and.w	r4, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   18472:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   18476:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
   1847a:	d10c      	bne.n	18496 <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   1847c:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   18480:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   18484:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   18488:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   1848c:	07c8      	lsls	r0, r1, #31
   1848e:	d507      	bpl.n	184a0 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
   18490:	f06f 0085 	mvn.w	r0, #133	; 0x85
   18494:	e093      	b.n	185be <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   18496:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1849a:	68f1      	ldr	r1, [r6, #12]
   1849c:	f000 8091 	beq.w	185c2 <gpio_nrfx_pin_interrupt_configure+0x15e>
   184a0:	68f0      	ldr	r0, [r6, #12]
   184a2:	2101      	movs	r1, #1
   184a4:	40a9      	lsls	r1, r5
   184a6:	4301      	orrs	r1, r0
   184a8:	6970      	ldr	r0, [r6, #20]
   184aa:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   184ac:	2101      	movs	r1, #1
   184ae:	40a9      	lsls	r1, r5
   184b0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   184b4:	69b2      	ldr	r2, [r6, #24]
   184b6:	bf0c      	ite	eq
   184b8:	4308      	orreq	r0, r1
   184ba:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   184bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   184c0:	bf0c      	ite	eq
   184c2:	430a      	orreq	r2, r1
   184c4:	438a      	bicne	r2, r1
   184c6:	61b2      	str	r2, [r6, #24]
   184c8:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   184ca:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   184cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   184d0:	bf0c      	ite	eq
   184d2:	4311      	orreq	r1, r2
   184d4:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   184d8:	4a46      	ldr	r2, [pc, #280]	; (185f4 <gpio_nrfx_pin_interrupt_configure+0x190>)
   184da:	6131      	str	r1, [r6, #16]
   184dc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   184e0:	2000      	movs	r0, #0
   184e2:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   184e4:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   184e8:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   184ec:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   184f0:	428c      	cmp	r4, r1
   184f2:	d16b      	bne.n	185cc <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
   184f4:	fa23 f100 	lsr.w	r1, r3, r0
   184f8:	07c9      	lsls	r1, r1, #31
   184fa:	d567      	bpl.n	185cc <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   184fc:	0083      	lsls	r3, r0, #2
   184fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18502:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   18506:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1850a:	f021 0101 	bic.w	r1, r1, #1
   1850e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   18512:	2301      	movs	r3, #1
   18514:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   18516:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1851a:	b2c0      	uxtb	r0, r0
   1851c:	f001 f84c 	bl	195b8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   18520:	4620      	mov	r0, r4
   18522:	2100      	movs	r1, #0
   18524:	f00d fcde 	bl	25ee4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   18528:	68f0      	ldr	r0, [r6, #12]
   1852a:	40e8      	lsrs	r0, r5
   1852c:	f010 0001 	ands.w	r0, r0, #1
   18530:	d045      	beq.n	185be <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
   18532:	6970      	ldr	r0, [r6, #20]
   18534:	40e8      	lsrs	r0, r5
   18536:	f010 0201 	ands.w	r2, r0, #1
   1853a:	d04e      	beq.n	185da <gpio_nrfx_pin_interrupt_configure+0x176>
			if (data->double_edge & BIT(pin)) {
   1853c:	69b3      	ldr	r3, [r6, #24]
   1853e:	40eb      	lsrs	r3, r5
   18540:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   18542:	bf5f      	itttt	pl
   18544:	6931      	ldrpl	r1, [r6, #16]
   18546:	fa21 f505 	lsrpl.w	r5, r1, r5
   1854a:	f005 0501 	andpl.w	r5, r5, #1
   1854e:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   18552:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   18556:	bf54      	ite	pl
   18558:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1855a:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1855c:	f001 f84e 	bl	195fc <nrfx_gpiote_channel_alloc>
   18560:	4b25      	ldr	r3, [pc, #148]	; (185f8 <gpio_nrfx_pin_interrupt_configure+0x194>)
   18562:	4298      	cmp	r0, r3
   18564:	d136      	bne.n	185d4 <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   18566:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1856a:	008b      	lsls	r3, r1, #2
   1856c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   18570:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18574:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   18576:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1857a:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
   1857e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
   18582:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   18586:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1858a:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
   1858e:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
   18590:	008a      	lsls	r2, r1, #2
   18592:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18596:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1859a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1859e:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   185a0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   185a4:	6010      	str	r0, [r2, #0]
   185a6:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   185a8:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   185ac:	f042 0201 	orr.w	r2, r2, #1
   185b0:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   185b4:	4a0f      	ldr	r2, [pc, #60]	; (185f4 <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   185b6:	2301      	movs	r3, #1
   185b8:	408b      	lsls	r3, r1
   185ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   185be:	b002      	add	sp, #8
   185c0:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   185c2:	2001      	movs	r0, #1
   185c4:	40a8      	lsls	r0, r5
   185c6:	ea21 0100 	bic.w	r1, r1, r0
   185ca:	e76d      	b.n	184a8 <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   185cc:	3001      	adds	r0, #1
   185ce:	2808      	cmp	r0, #8
   185d0:	d188      	bne.n	184e4 <gpio_nrfx_pin_interrupt_configure+0x80>
   185d2:	e7a5      	b.n	18520 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
   185d4:	f06f 0012 	mvn.w	r0, #18
   185d8:	e7f1      	b.n	185be <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   185da:	6931      	ldr	r1, [r6, #16]
   185dc:	40e9      	lsrs	r1, r5
   185de:	f001 0101 	and.w	r1, r1, #1
   185e2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   185e6:	4620      	mov	r0, r4
   185e8:	b2c9      	uxtb	r1, r1
   185ea:	f00d fc7b 	bl	25ee4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   185ee:	4610      	mov	r0, r2
   185f0:	e7e5      	b.n	185be <gpio_nrfx_pin_interrupt_configure+0x15a>
   185f2:	bf00      	nop
   185f4:	40006000 	.word	0x40006000
   185f8:	0bad0000 	.word	0x0bad0000

000185fc <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   185fc:	4b2a      	ldr	r3, [pc, #168]	; (186a8 <gpio_nrfx_config+0xac>)
{
   185fe:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18600:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18602:	482a      	ldr	r0, [pc, #168]	; (186ac <gpio_nrfx_config+0xb0>)
   18604:	4013      	ands	r3, r2
   18606:	4283      	cmp	r3, r0
   18608:	d03e      	beq.n	18688 <gpio_nrfx_config+0x8c>
   1860a:	d80d      	bhi.n	18628 <gpio_nrfx_config+0x2c>
   1860c:	2b06      	cmp	r3, #6
   1860e:	d015      	beq.n	1863c <gpio_nrfx_config+0x40>
   18610:	d805      	bhi.n	1861e <gpio_nrfx_config+0x22>
   18612:	b19b      	cbz	r3, 1863c <gpio_nrfx_config+0x40>
   18614:	2b02      	cmp	r3, #2
   18616:	d039      	beq.n	1868c <gpio_nrfx_config+0x90>
   18618:	f06f 0015 	mvn.w	r0, #21
   1861c:	e033      	b.n	18686 <gpio_nrfx_config+0x8a>
   1861e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18622:	d1f9      	bne.n	18618 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   18624:	2301      	movs	r3, #1
   18626:	e009      	b.n	1863c <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18628:	4821      	ldr	r0, [pc, #132]	; (186b0 <gpio_nrfx_config+0xb4>)
   1862a:	4283      	cmp	r3, r0
   1862c:	d030      	beq.n	18690 <gpio_nrfx_config+0x94>
   1862e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   18632:	d02f      	beq.n	18694 <gpio_nrfx_config+0x98>
   18634:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   18638:	d1ee      	bne.n	18618 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1863a:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1863c:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1863e:	bf54      	ite	pl
   18640:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   18644:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18646:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1864a:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
   1864e:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18652:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   18656:	d007      	beq.n	18668 <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   18658:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1865c:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1865e:	d01b      	beq.n	18698 <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
   18660:	2201      	movs	r2, #1
   18662:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
   18664:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   18668:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
   1866c:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   18670:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18674:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   18678:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1867c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18680:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   18684:	2000      	movs	r0, #0
}
   18686:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
   18688:	2307      	movs	r3, #7
   1868a:	e7d7      	b.n	1863c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1868c:	2304      	movs	r3, #4
   1868e:	e7d5      	b.n	1863c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   18690:	2305      	movs	r3, #5
   18692:	e7d3      	b.n	1863c <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   18694:	2303      	movs	r3, #3
   18696:	e7d1      	b.n	1863c <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   18698:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1869a:	bf42      	ittt	mi
   1869c:	2201      	movmi	r2, #1
   1869e:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   186a0:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
   186a4:	e7e0      	b.n	18668 <gpio_nrfx_config+0x6c>
   186a6:	bf00      	nop
   186a8:	00f00006 	.word	0x00f00006
   186ac:	00100006 	.word	0x00100006
   186b0:	00400002 	.word	0x00400002

000186b4 <gpiote_event_handler>:
{
   186b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   186b8:	4d3f      	ldr	r5, [pc, #252]	; (187b8 <gpiote_event_handler+0x104>)
   186ba:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
   186bc:	2e00      	cmp	r6, #0
   186be:	d04e      	beq.n	1875e <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
   186c0:	4b3e      	ldr	r3, [pc, #248]	; (187bc <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   186c2:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
   186c6:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   186c8:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   186ca:	4301      	orrs	r1, r0
   186cc:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
   186d0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
   186d4:	2701      	movs	r7, #1
   186d6:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   186da:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
   186dc:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
   186e0:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
   186e4:	bb72      	cbnz	r2, 18744 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   186e6:	602a      	str	r2, [r5, #0]
   186e8:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   186ea:	4835      	ldr	r0, [pc, #212]	; (187c0 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   186ec:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   186ee:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   186f0:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   186f2:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   186f6:	fa05 f103 	lsl.w	r1, r5, r3
   186fa:	4211      	tst	r1, r2
   186fc:	d011      	beq.n	18722 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   186fe:	009a      	lsls	r2, r3, #2
   18700:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   18704:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   18708:	6811      	ldr	r1, [r2, #0]
   1870a:	b151      	cbz	r1, 18722 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1870c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   18710:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   18714:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   18716:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1871a:	fa05 f101 	lsl.w	r1, r5, r1
   1871e:	6812      	ldr	r2, [r2, #0]
   18720:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   18722:	3301      	adds	r3, #1
   18724:	2b08      	cmp	r3, #8
   18726:	d1e4      	bne.n	186f2 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
   18728:	b9dc      	cbnz	r4, 18762 <gpiote_event_handler+0xae>
	if (port_event) {
   1872a:	b14e      	cbz	r6, 18740 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
   1872c:	4c23      	ldr	r4, [pc, #140]	; (187bc <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
   1872e:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
   18732:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   18734:	4301      	orrs	r1, r0
   18736:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
   1873a:	2501      	movs	r5, #1
	uint32_t pin = 0U;
   1873c:	2600      	movs	r6, #0
	while (level_pins) {
   1873e:	bb42      	cbnz	r2, 18792 <gpiote_event_handler+0xde>
}
   18740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   18744:	423a      	tst	r2, r7
   18746:	d006      	beq.n	18756 <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   18748:	2100      	movs	r1, #0
   1874a:	f008 001f 	and.w	r0, r8, #31
   1874e:	f00d fbc9 	bl	25ee4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   18752:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
   18756:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
   1875a:	007f      	lsls	r7, r7, #1
   1875c:	e7c2      	b.n	186e4 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1875e:	4634      	mov	r4, r6
   18760:	e7c3      	b.n	186ea <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18762:	4b16      	ldr	r3, [pc, #88]	; (187bc <gpiote_event_handler+0x108>)
   18764:	6859      	ldr	r1, [r3, #4]
   18766:	2900      	cmp	r1, #0
   18768:	d0df      	beq.n	1872a <gpiote_event_handler+0x76>
	return node->next;
   1876a:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1876c:	4f15      	ldr	r7, [pc, #84]	; (187c4 <gpiote_event_handler+0x110>)
   1876e:	2d00      	cmp	r5, #0
   18770:	bf38      	it	cc
   18772:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   18774:	688a      	ldr	r2, [r1, #8]
   18776:	4022      	ands	r2, r4
   18778:	d002      	beq.n	18780 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
   1877a:	684b      	ldr	r3, [r1, #4]
   1877c:	4638      	mov	r0, r7
   1877e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   18780:	2d00      	cmp	r5, #0
   18782:	d0d2      	beq.n	1872a <gpiote_event_handler+0x76>
   18784:	682b      	ldr	r3, [r5, #0]
   18786:	2b00      	cmp	r3, #0
   18788:	bf38      	it	cc
   1878a:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1878c:	4629      	mov	r1, r5
   1878e:	461d      	mov	r5, r3
   18790:	e7f0      	b.n	18774 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
   18792:	4215      	tst	r5, r2
   18794:	d00c      	beq.n	187b0 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   18796:	6921      	ldr	r1, [r4, #16]
   18798:	40f1      	lsrs	r1, r6
   1879a:	f001 0101 	and.w	r1, r1, #1
   1879e:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   187a2:	b2c9      	uxtb	r1, r1
   187a4:	f006 001f 	and.w	r0, r6, #31
   187a8:	f00d fb9c 	bl	25ee4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   187ac:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
   187b0:	3601      	adds	r6, #1
		bit <<= 1;
   187b2:	006d      	lsls	r5, r5, #1
   187b4:	e7c3      	b.n	1873e <gpiote_event_handler+0x8a>
   187b6:	bf00      	nop
   187b8:	4000617c 	.word	0x4000617c
   187bc:	20003d64 	.word	0x20003d64
   187c0:	40006000 	.word	0x40006000
   187c4:	20000abc 	.word	0x20000abc

000187c8 <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   187c8:	b510      	push	{r4, lr}
   187ca:	4604      	mov	r4, r0
   187cc:	2200      	movs	r2, #0
   187ce:	2101      	movs	r1, #1
   187d0:	2003      	movs	r0, #3
   187d2:	f7eb fe47 	bl	4464 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twim_init(&get_dev_config(dev)->twim,
   187d6:	6860      	ldr	r0, [r4, #4]
   187d8:	68e3      	ldr	r3, [r4, #12]
   187da:	4a0c      	ldr	r2, [pc, #48]	; (1880c <twim_0_init+0x44>)
   187dc:	f100 0108 	add.w	r1, r0, #8
   187e0:	f001 f89c 	bl	1991c <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   187e4:	4b0a      	ldr	r3, [pc, #40]	; (18810 <twim_0_init+0x48>)
   187e6:	4298      	cmp	r0, r3
   187e8:	d00d      	beq.n	18806 <twim_0_init+0x3e>
   187ea:	4b0a      	ldr	r3, [pc, #40]	; (18814 <twim_0_init+0x4c>)
   187ec:	4a0a      	ldr	r2, [pc, #40]	; (18818 <twim_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   187ee:	480b      	ldr	r0, [pc, #44]	; (1881c <twim_0_init+0x54>)
   187f0:	6821      	ldr	r1, [r4, #0]
   187f2:	1ad2      	subs	r2, r2, r3
   187f4:	08d2      	lsrs	r2, r2, #3
   187f6:	0192      	lsls	r2, r2, #6
   187f8:	f042 0201 	orr.w	r2, r2, #1
   187fc:	f00a fef9 	bl	235f2 <log_1>
		return -EBUSY;
   18800:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWIM_DEVICE(0);
   18804:	bd10      	pop	{r4, pc}
	return 0;
   18806:	2000      	movs	r0, #0
I2C_NRFX_TWIM_DEVICE(0);
   18808:	e7fc      	b.n	18804 <twim_0_init+0x3c>
   1880a:	bf00      	nop
   1880c:	00018875 	.word	0x00018875
   18810:	0bad0000 	.word	0x0bad0000
   18814:	0002bf50 	.word	0x0002bf50
   18818:	0002c058 	.word	0x0002c058
   1881c:	0002f8e6 	.word	0x0002f8e6

00018820 <i2c_nrfx_twim_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   18820:	07ca      	lsls	r2, r1, #31
{
   18822:	b508      	push	{r3, lr}
	nrfx_twim_t const *inst = &(get_dev_config(dev)->twim);
   18824:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   18826:	d40f      	bmi.n	18848 <i2c_nrfx_twim_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   18828:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1882c:	2a01      	cmp	r2, #1
   1882e:	d00e      	beq.n	1884e <i2c_nrfx_twim_configure+0x2e>
   18830:	2a02      	cmp	r2, #2
   18832:	d015      	beq.n	18860 <i2c_nrfx_twim_configure+0x40>
   18834:	490c      	ldr	r1, [pc, #48]	; (18868 <i2c_nrfx_twim_configure+0x48>)
   18836:	4b0d      	ldr	r3, [pc, #52]	; (1886c <i2c_nrfx_twim_configure+0x4c>)
		LOG_ERR("unsupported speed");
   18838:	480d      	ldr	r0, [pc, #52]	; (18870 <i2c_nrfx_twim_configure+0x50>)
   1883a:	1ac9      	subs	r1, r1, r3
   1883c:	08c9      	lsrs	r1, r1, #3
   1883e:	0189      	lsls	r1, r1, #6
   18840:	f041 0101 	orr.w	r1, r1, #1
   18844:	f00a fec8 	bl	235d8 <log_0>
		return -EINVAL;
   18848:	f06f 0015 	mvn.w	r0, #21
   1884c:	e007      	b.n	1885e <i2c_nrfx_twim_configure+0x3e>
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_100K);
   1884e:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twim_frequency_set(NRF_TWIM_Type * p_reg,
                                              nrf_twim_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   18850:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   18854:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   18858:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1885a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1885c:	6359      	str	r1, [r3, #52]	; 0x34
}
   1885e:	bd08      	pop	{r3, pc}
		nrf_twim_frequency_set(inst->p_twim, NRF_TWIM_FREQ_400K);
   18860:	681b      	ldr	r3, [r3, #0]
   18862:	f04f 62c8 	mov.w	r2, #104857600	; 0x6400000
   18866:	e7f5      	b.n	18854 <i2c_nrfx_twim_configure+0x34>
   18868:	0002c058 	.word	0x0002c058
   1886c:	0002bf50 	.word	0x0002bf50
   18870:	0002f906 	.word	0x0002f906

00018874 <event_handler>:
	switch (p_event->type) {
   18874:	7803      	ldrb	r3, [r0, #0]
   18876:	2b01      	cmp	r3, #1
   18878:	d008      	beq.n	1888c <event_handler+0x18>
   1887a:	2b02      	cmp	r3, #2
   1887c:	d008      	beq.n	18890 <event_handler+0x1c>
   1887e:	b94b      	cbnz	r3, 18894 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   18880:	4b05      	ldr	r3, [pc, #20]	; (18898 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   18882:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   18884:	f101 0018 	add.w	r0, r1, #24
   18888:	f007 bbfc 	b.w	20084 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1888c:	4b03      	ldr	r3, [pc, #12]	; (1889c <event_handler+0x28>)
   1888e:	e7f8      	b.n	18882 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   18890:	4b03      	ldr	r3, [pc, #12]	; (188a0 <event_handler+0x2c>)
   18892:	e7f6      	b.n	18882 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   18894:	4b03      	ldr	r3, [pc, #12]	; (188a4 <event_handler+0x30>)
   18896:	e7f4      	b.n	18882 <event_handler+0xe>
   18898:	0bad0000 	.word	0x0bad0000
   1889c:	0bae0001 	.word	0x0bae0001
   188a0:	0bae0002 	.word	0x0bae0002
   188a4:	0bad0001 	.word	0x0bad0001

000188a8 <i2c_nrfx_twim_transfer>:
{
   188a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   188ac:	68c4      	ldr	r4, [r0, #12]
{
   188ae:	b08b      	sub	sp, #44	; 0x2c
   188b0:	4693      	mov	fp, r2
	nrfx_twim_xfer_desc_t cur_xfer = {
   188b2:	2214      	movs	r2, #20
{
   188b4:	461d      	mov	r5, r3
   188b6:	4606      	mov	r6, r0
   188b8:	4689      	mov	r9, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   188ba:	eb0d 0002 	add.w	r0, sp, r2
   188be:	2100      	movs	r1, #0
	uint8_t *concat_buf = get_dev_data(dev)->concat_buf;
   188c0:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	uint16_t concat_buf_size = get_dev_data(dev)->concat_buf_size;
   188c4:	f8b4 a038 	ldrh.w	sl, [r4, #56]	; 0x38
	nrfx_twim_xfer_desc_t cur_xfer = {
   188c8:	f012 ff68 	bl	2b79c <memset>
   188cc:	f88d 5015 	strb.w	r5, [sp, #21]
	return z_impl_k_sem_take(sem, timeout);
   188d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   188d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   188d8:	4620      	mov	r0, r4
   188da:	f007 fbf9 	bl	200d0 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   188de:	68f0      	ldr	r0, [r6, #12]
   188e0:	3018      	adds	r0, #24
   188e2:	2200      	movs	r2, #0
   188e4:	2300      	movs	r3, #0
   188e6:	f007 fbf3 	bl	200d0 <z_impl_k_sem_take>
	nrfx_twim_enable(&get_dev_config(dev)->twim);
   188ea:	6870      	ldr	r0, [r6, #4]
   188ec:	f001 f85c 	bl	199a8 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   188f0:	2700      	movs	r7, #0
   188f2:	464d      	mov	r5, r9
	uint32_t concat_len = 0;
   188f4:	463c      	mov	r4, r7
	for (size_t i = 0; i < num_msgs; i++) {
   188f6:	455f      	cmp	r7, fp
   188f8:	d301      	bcc.n	188fe <i2c_nrfx_twim_transfer+0x56>
   188fa:	2400      	movs	r4, #0
   188fc:	e049      	b.n	18992 <i2c_nrfx_twim_transfer+0xea>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   188fe:	7a29      	ldrb	r1, [r5, #8]
   18900:	070b      	lsls	r3, r1, #28
   18902:	f100 80a6 	bmi.w	18a52 <i2c_nrfx_twim_transfer+0x1aa>
			&& ((msgs[i].flags & I2C_MSG_READ)
   18906:	f1ba 0f00 	cmp.w	sl, #0
   1890a:	d00d      	beq.n	18928 <i2c_nrfx_twim_transfer+0x80>
			&& ((i + 1) < num_msgs)
   1890c:	1c7b      	adds	r3, r7, #1
   1890e:	459b      	cmp	fp, r3
   18910:	d90a      	bls.n	18928 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i].flags & I2C_MSG_STOP)
   18912:	0788      	lsls	r0, r1, #30
   18914:	d408      	bmi.n	18928 <i2c_nrfx_twim_transfer+0x80>
			&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   18916:	7d2b      	ldrb	r3, [r5, #20]
			    == (msgs[i + 1].flags & I2C_MSG_READ));
   18918:	ea81 0203 	eor.w	r2, r1, r3
			&& ((msgs[i].flags & I2C_MSG_READ)
   1891c:	f002 0201 	and.w	r2, r2, #1
   18920:	f003 0304 	and.w	r3, r3, #4
   18924:	4313      	orrs	r3, r2
   18926:	d01f      	beq.n	18968 <i2c_nrfx_twim_transfer+0xc0>
		if (concat_next || (concat_len != 0)) {
   18928:	2c00      	cmp	r4, #0
   1892a:	d13c      	bne.n	189a6 <i2c_nrfx_twim_transfer+0xfe>
			cur_xfer.p_primary_buf = msgs[i].buf;
   1892c:	682b      	ldr	r3, [r5, #0]
   1892e:	9308      	str	r3, [sp, #32]
			cur_xfer.primary_length = msgs[i].len;
   18930:	686b      	ldr	r3, [r5, #4]
   18932:	9306      	str	r3, [sp, #24]
   18934:	2400      	movs	r4, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   18936:	7a2b      	ldrb	r3, [r5, #8]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   18938:	6870      	ldr	r0, [r6, #4]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   1893a:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   1893e:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   18942:	f88d 2014 	strb.w	r2, [sp, #20]
		nrfx_err_t res = nrfx_twim_xfer(&get_dev_config(dev)->twim,
   18946:	a905      	add	r1, sp, #20
   18948:	bf0c      	ite	eq
   1894a:	2220      	moveq	r2, #32
   1894c:	2200      	movne	r2, #0
   1894e:	f001 f857 	bl	19a00 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   18952:	4b41      	ldr	r3, [pc, #260]	; (18a58 <i2c_nrfx_twim_transfer+0x1b0>)
   18954:	4298      	cmp	r0, r3
   18956:	d03a      	beq.n	189ce <i2c_nrfx_twim_transfer+0x126>
			if (res == NRFX_ERROR_BUSY) {
   18958:	330b      	adds	r3, #11
				ret = -EIO;
   1895a:	4298      	cmp	r0, r3
   1895c:	bf0c      	ite	eq
   1895e:	f06f 040f 	mvneq.w	r4, #15
   18962:	f06f 0404 	mvnne.w	r4, #4
   18966:	e014      	b.n	18992 <i2c_nrfx_twim_transfer+0xea>
			&& ((msgs[i].flags & I2C_MSG_READ)
   18968:	2301      	movs	r3, #1
			if ((concat_len + msgs[i].len) > concat_buf_size) {
   1896a:	686a      	ldr	r2, [r5, #4]
   1896c:	1910      	adds	r0, r2, r4
   1896e:	4550      	cmp	r0, sl
   18970:	d91b      	bls.n	189aa <i2c_nrfx_twim_transfer+0x102>
   18972:	493a      	ldr	r1, [pc, #232]	; (18a5c <i2c_nrfx_twim_transfer+0x1b4>)
   18974:	4b3a      	ldr	r3, [pc, #232]	; (18a60 <i2c_nrfx_twim_transfer+0x1b8>)
				LOG_ERR("concat-buf overflow: %u + %u > %u",
   18976:	483b      	ldr	r0, [pc, #236]	; (18a64 <i2c_nrfx_twim_transfer+0x1bc>)
   18978:	1a5b      	subs	r3, r3, r1
   1897a:	08db      	lsrs	r3, r3, #3
   1897c:	019b      	lsls	r3, r3, #6
   1897e:	f043 0301 	orr.w	r3, r3, #1
   18982:	f8ad 3000 	strh.w	r3, [sp]
   18986:	4621      	mov	r1, r4
   18988:	4653      	mov	r3, sl
   1898a:	f00a fe5f 	bl	2364c <log_3>
				ret = -ENOSPC;
   1898e:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&get_dev_config(dev)->twim);
   18992:	6870      	ldr	r0, [r6, #4]
   18994:	f001 f818 	bl	199c8 <nrfx_twim_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   18998:	68f0      	ldr	r0, [r6, #12]
	z_impl_k_sem_give(sem);
   1899a:	f007 fb73 	bl	20084 <z_impl_k_sem_give>
}
   1899e:	4620      	mov	r0, r4
   189a0:	b00b      	add	sp, #44	; 0x2c
   189a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& ((msgs[i].flags & I2C_MSG_READ)
   189a6:	2300      	movs	r3, #0
   189a8:	e7df      	b.n	1896a <i2c_nrfx_twim_transfer+0xc2>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   189aa:	07c9      	lsls	r1, r1, #31
   189ac:	d406      	bmi.n	189bc <i2c_nrfx_twim_transfer+0x114>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   189ae:	6829      	ldr	r1, [r5, #0]
   189b0:	9303      	str	r3, [sp, #12]
   189b2:	eb08 0004 	add.w	r0, r8, r4
   189b6:	f012 fed0 	bl	2b75a <memcpy>
   189ba:	9b03      	ldr	r3, [sp, #12]
			concat_len += msgs[i].len;
   189bc:	686a      	ldr	r2, [r5, #4]
   189be:	4414      	add	r4, r2
		if (concat_next) {
   189c0:	bb83      	cbnz	r3, 18a24 <i2c_nrfx_twim_transfer+0x17c>
		if (concat_len == 0) {
   189c2:	2c00      	cmp	r4, #0
   189c4:	d0b2      	beq.n	1892c <i2c_nrfx_twim_transfer+0x84>
			cur_xfer.p_primary_buf = concat_buf;
   189c6:	f8cd 8020 	str.w	r8, [sp, #32]
			cur_xfer.primary_length = concat_len;
   189ca:	9406      	str	r4, [sp, #24]
   189cc:	e7b3      	b.n	18936 <i2c_nrfx_twim_transfer+0x8e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   189ce:	68f0      	ldr	r0, [r6, #12]
   189d0:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   189d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   189d6:	2300      	movs	r3, #0
   189d8:	f007 fb7a 	bl	200d0 <z_impl_k_sem_take>
		if (ret != 0) {
   189dc:	b168      	cbz	r0, 189fa <i2c_nrfx_twim_transfer+0x152>
   189de:	4a20      	ldr	r2, [pc, #128]	; (18a60 <i2c_nrfx_twim_transfer+0x1b8>)
   189e0:	4b1e      	ldr	r3, [pc, #120]	; (18a5c <i2c_nrfx_twim_transfer+0x1b4>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   189e2:	4821      	ldr	r0, [pc, #132]	; (18a68 <i2c_nrfx_twim_transfer+0x1c0>)
   189e4:	1ad2      	subs	r2, r2, r3
   189e6:	08d2      	lsrs	r2, r2, #3
   189e8:	0192      	lsls	r2, r2, #6
   189ea:	f042 0201 	orr.w	r2, r2, #1
   189ee:	4639      	mov	r1, r7
   189f0:	f00a fdff 	bl	235f2 <log_1>
			ret = -EIO;
   189f4:	f06f 0404 	mvn.w	r4, #4
			break;
   189f8:	e7cb      	b.n	18992 <i2c_nrfx_twim_transfer+0xea>
		res = get_dev_data(dev)->res;
   189fa:	68f3      	ldr	r3, [r6, #12]
   189fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   189fe:	4b16      	ldr	r3, [pc, #88]	; (18a58 <i2c_nrfx_twim_transfer+0x1b0>)
   18a00:	4299      	cmp	r1, r3
   18a02:	d00b      	beq.n	18a1c <i2c_nrfx_twim_transfer+0x174>
   18a04:	4a15      	ldr	r2, [pc, #84]	; (18a5c <i2c_nrfx_twim_transfer+0x1b4>)
   18a06:	4b16      	ldr	r3, [pc, #88]	; (18a60 <i2c_nrfx_twim_transfer+0x1b8>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   18a08:	4818      	ldr	r0, [pc, #96]	; (18a6c <i2c_nrfx_twim_transfer+0x1c4>)
   18a0a:	1a9b      	subs	r3, r3, r2
   18a0c:	08db      	lsrs	r3, r3, #3
   18a0e:	019b      	lsls	r3, r3, #6
   18a10:	f043 0301 	orr.w	r3, r3, #1
   18a14:	463a      	mov	r2, r7
   18a16:	f00a fe00 	bl	2361a <log_2>
   18a1a:	e7eb      	b.n	189f4 <i2c_nrfx_twim_transfer+0x14c>
		if ((msgs[i].flags & I2C_MSG_READ)
   18a1c:	7a2b      	ldrb	r3, [r5, #8]
   18a1e:	07db      	lsls	r3, r3, #31
   18a20:	d403      	bmi.n	18a2a <i2c_nrfx_twim_transfer+0x182>
		concat_len = 0;
   18a22:	2400      	movs	r4, #0
	for (size_t i = 0; i < num_msgs; i++) {
   18a24:	3701      	adds	r7, #1
   18a26:	350c      	adds	r5, #12
   18a28:	e765      	b.n	188f6 <i2c_nrfx_twim_transfer+0x4e>
		    && cur_xfer.p_primary_buf == concat_buf) {
   18a2a:	9b08      	ldr	r3, [sp, #32]
   18a2c:	4598      	cmp	r8, r3
   18a2e:	d1f8      	bne.n	18a22 <i2c_nrfx_twim_transfer+0x17a>
			while (concat_len >= msgs[j].len) {
   18a30:	230c      	movs	r3, #12
   18a32:	fb03 9307 	mla	r3, r3, r7, r9
   18a36:	685a      	ldr	r2, [r3, #4]
   18a38:	4294      	cmp	r4, r2
   18a3a:	f1a3 030c 	sub.w	r3, r3, #12
   18a3e:	d3f0      	bcc.n	18a22 <i2c_nrfx_twim_transfer+0x17a>
				concat_len -= msgs[j].len;
   18a40:	1aa4      	subs	r4, r4, r2
   18a42:	68d8      	ldr	r0, [r3, #12]
   18a44:	9303      	str	r3, [sp, #12]
   18a46:	eb08 0104 	add.w	r1, r8, r4
   18a4a:	f012 fe86 	bl	2b75a <memcpy>
   18a4e:	9b03      	ldr	r3, [sp, #12]
				j--;
   18a50:	e7f1      	b.n	18a36 <i2c_nrfx_twim_transfer+0x18e>
			ret = -ENOTSUP;
   18a52:	f06f 0485 	mvn.w	r4, #133	; 0x85
   18a56:	e79c      	b.n	18992 <i2c_nrfx_twim_transfer+0xea>
   18a58:	0bad0000 	.word	0x0bad0000
   18a5c:	0002bf50 	.word	0x0002bf50
   18a60:	0002c058 	.word	0x0002c058
   18a64:	0002f918 	.word	0x0002f918
   18a68:	0002f93a 	.word	0x0002f93a
   18a6c:	0002f964 	.word	0x0002f964

00018a70 <spi_1_init>:
#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
   18a70:	b538      	push	{r3, r4, r5, lr}
   18a72:	4604      	mov	r4, r0
   18a74:	2200      	movs	r2, #0
   18a76:	2101      	movs	r1, #1
   18a78:	2004      	movs	r0, #4
   18a7a:	f7eb fcf3 	bl	4464 <z_arm_irq_priority_set>
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   18a7e:	68e3      	ldr	r3, [r4, #12]
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   18a80:	4a0e      	ldr	r2, [pc, #56]	; (18abc <spi_1_init+0x4c>)
	dev_data->dev = dev;
   18a82:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   18a84:	6860      	ldr	r0, [r4, #4]
   18a86:	f100 0108 	add.w	r1, r0, #8
   18a8a:	f000 fdef 	bl	1966c <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   18a8e:	4b0c      	ldr	r3, [pc, #48]	; (18ac0 <spi_1_init+0x50>)
   18a90:	4298      	cmp	r0, r3
   18a92:	d011      	beq.n	18ab8 <spi_1_init+0x48>
   18a94:	4b0b      	ldr	r3, [pc, #44]	; (18ac4 <spi_1_init+0x54>)
   18a96:	4a0c      	ldr	r2, [pc, #48]	; (18ac8 <spi_1_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   18a98:	6821      	ldr	r1, [r4, #0]
   18a9a:	480c      	ldr	r0, [pc, #48]	; (18acc <spi_1_init+0x5c>)
   18a9c:	1ad2      	subs	r2, r2, r3
   18a9e:	08d2      	lsrs	r2, r2, #3
   18aa0:	0192      	lsls	r2, r2, #6
   18aa2:	f042 0201 	orr.w	r2, r2, #1
   18aa6:	f00a fda4 	bl	235f2 <log_1>
		return -EBUSY;
   18aaa:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(1);
   18aae:	68e0      	ldr	r0, [r4, #12]
   18ab0:	f00d faad 	bl	2600e <spi_context_unlock_unconditionally>
   18ab4:	4628      	mov	r0, r5
   18ab6:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   18ab8:	2500      	movs	r5, #0
   18aba:	e7f8      	b.n	18aae <spi_1_init+0x3e>
   18abc:	00018dd1 	.word	0x00018dd1
   18ac0:	0bad0000 	.word	0x0bad0000
   18ac4:	0002bf50 	.word	0x0002bf50
   18ac8:	0002c0a0 	.word	0x0002c0a0
   18acc:	0002f8e6 	.word	0x0002f8e6

00018ad0 <transfer_next_chunk>:
{
   18ad0:	b530      	push	{r4, r5, lr}
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   18ad2:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   18ad4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   18ad6:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   18ad8:	b085      	sub	sp, #20
   18ada:	b982      	cbnz	r2, 18afe <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   18adc:	bb73      	cbnz	r3, 18b3c <transfer_next_chunk+0x6c>
	int error = 0;
   18ade:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   18ae0:	2200      	movs	r2, #0
   18ae2:	4611      	mov	r1, r2
   18ae4:	4628      	mov	r0, r5
   18ae6:	f00d fa6d 	bl	25fc4 <_spi_context_cs_control.isra.0>
	ctx->sync_status = status;
   18aea:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   18aec:	f105 0020 	add.w	r0, r5, #32
   18af0:	f007 fac8 	bl	20084 <z_impl_k_sem_give>
	dev_data->busy = false;
   18af4:	2300      	movs	r3, #0
   18af6:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   18afa:	b005      	add	sp, #20
   18afc:	bd30      	pop	{r4, r5, pc}
		return ctx->rx_len;
	} else if (!ctx->rx_len) {
   18afe:	4611      	mov	r1, r2
   18b00:	b113      	cbz	r3, 18b08 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   18b02:	429a      	cmp	r2, r3
   18b04:	bf28      	it	cs
   18b06:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   18b08:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   18b0a:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   18b0c:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   18b0e:	b1bc      	cbz	r4, 18b40 <transfer_next_chunk+0x70>
   18b10:	2a00      	cmp	r2, #0
   18b12:	bf18      	it	ne
   18b14:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   18b16:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   18b18:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   18b1a:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   18b1c:	b192      	cbz	r2, 18b44 <transfer_next_chunk+0x74>
   18b1e:	2b00      	cmp	r3, #0
   18b20:	bf18      	it	ne
   18b22:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   18b24:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18b26:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   18b28:	2200      	movs	r2, #0
   18b2a:	4669      	mov	r1, sp
   18b2c:	f000 fe42 	bl	197b4 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   18b30:	4b05      	ldr	r3, [pc, #20]	; (18b48 <transfer_next_chunk+0x78>)
   18b32:	4298      	cmp	r0, r3
   18b34:	d0e1      	beq.n	18afa <transfer_next_chunk+0x2a>
		error = -EIO;
   18b36:	f06f 0404 	mvn.w	r4, #4
   18b3a:	e7d1      	b.n	18ae0 <transfer_next_chunk+0x10>
   18b3c:	4619      	mov	r1, r3
   18b3e:	e7e3      	b.n	18b08 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   18b40:	4622      	mov	r2, r4
   18b42:	e7e8      	b.n	18b16 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   18b44:	4613      	mov	r3, r2
   18b46:	e7ed      	b.n	18b24 <transfer_next_chunk+0x54>
   18b48:	0bad0000 	.word	0x0bad0000

00018b4c <spi_nrfx_transceive>:
{
   18b4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b50:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18b52:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   18b54:	68c4      	ldr	r4, [r0, #12]
   18b56:	045b      	lsls	r3, r3, #17
{
   18b58:	4680      	mov	r8, r0
   18b5a:	460d      	mov	r5, r1
   18b5c:	4617      	mov	r7, r2
   18b5e:	d42d      	bmi.n	18bbc <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   18b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18b64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b68:	f104 0008 	add.w	r0, r4, #8
   18b6c:	f007 fab0 	bl	200d0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   18b70:	6065      	str	r5, [r4, #4]
	struct spi_context *ctx = &get_dev_data(dev)->ctx;
   18b72:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   18b76:	6813      	ldr	r3, [r2, #0]
   18b78:	429d      	cmp	r5, r3
   18b7a:	f000 80b2 	beq.w	18ce2 <spi_nrfx_transceive+0x196>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   18b7e:	88ab      	ldrh	r3, [r5, #4]
   18b80:	07d8      	lsls	r0, r3, #31
   18b82:	d522      	bpl.n	18bca <spi_nrfx_transceive+0x7e>
   18b84:	4a83      	ldr	r2, [pc, #524]	; (18d94 <spi_nrfx_transceive+0x248>)
   18b86:	4b84      	ldr	r3, [pc, #528]	; (18d98 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Slave mode is not supported on %s",
   18b88:	f8d8 1000 	ldr.w	r1, [r8]
   18b8c:	4883      	ldr	r0, [pc, #524]	; (18d9c <spi_nrfx_transceive+0x250>)
   18b8e:	1ad2      	subs	r2, r2, r3
   18b90:	08d2      	lsrs	r2, r2, #3
   18b92:	0192      	lsls	r2, r2, #6
   18b94:	f042 0201 	orr.w	r2, r2, #1
   18b98:	f00a fd2b 	bl	235f2 <log_1>
		return -EINVAL;
   18b9c:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   18ba0:	6823      	ldr	r3, [r4, #0]
   18ba2:	889b      	ldrh	r3, [r3, #4]
   18ba4:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   18ba8:	d104      	bne.n	18bb4 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   18baa:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   18bac:	f104 0008 	add.w	r0, r4, #8
   18bb0:	f007 fa68 	bl	20084 <z_impl_k_sem_give>
}
   18bb4:	4628      	mov	r0, r5
   18bb6:	b003      	add	sp, #12
   18bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   18bbc:	6923      	ldr	r3, [r4, #16]
   18bbe:	2b00      	cmp	r3, #0
   18bc0:	d1ce      	bne.n	18b60 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   18bc2:	6863      	ldr	r3, [r4, #4]
   18bc4:	4299      	cmp	r1, r3
   18bc6:	d1cb      	bne.n	18b60 <spi_nrfx_transceive+0x14>
   18bc8:	e7d3      	b.n	18b72 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   18bca:	0719      	lsls	r1, r3, #28
   18bcc:	d50a      	bpl.n	18be4 <spi_nrfx_transceive+0x98>
   18bce:	4971      	ldr	r1, [pc, #452]	; (18d94 <spi_nrfx_transceive+0x248>)
   18bd0:	4b71      	ldr	r3, [pc, #452]	; (18d98 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Loopback mode is not supported");
   18bd2:	4873      	ldr	r0, [pc, #460]	; (18da0 <spi_nrfx_transceive+0x254>)
   18bd4:	1ac9      	subs	r1, r1, r3
   18bd6:	08c9      	lsrs	r1, r1, #3
   18bd8:	0189      	lsls	r1, r1, #6
   18bda:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   18bde:	f00a fcfb 	bl	235d8 <log_0>
   18be2:	e7db      	b.n	18b9c <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   18be4:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   18be8:	d008      	beq.n	18bfc <spi_nrfx_transceive+0xb0>
   18bea:	496a      	ldr	r1, [pc, #424]	; (18d94 <spi_nrfx_transceive+0x248>)
   18bec:	4b6a      	ldr	r3, [pc, #424]	; (18d98 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Only single line mode is supported");
   18bee:	486d      	ldr	r0, [pc, #436]	; (18da4 <spi_nrfx_transceive+0x258>)
   18bf0:	1ac9      	subs	r1, r1, r3
   18bf2:	08c9      	lsrs	r1, r1, #3
   18bf4:	0189      	lsls	r1, r1, #6
   18bf6:	f041 0101 	orr.w	r1, r1, #1
   18bfa:	e7f0      	b.n	18bde <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   18bfc:	f3c3 1345 	ubfx	r3, r3, #5, #6
   18c00:	2b08      	cmp	r3, #8
   18c02:	d008      	beq.n	18c16 <spi_nrfx_transceive+0xca>
   18c04:	4963      	ldr	r1, [pc, #396]	; (18d94 <spi_nrfx_transceive+0x248>)
   18c06:	4b64      	ldr	r3, [pc, #400]	; (18d98 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Word sizes other than 8 bits"
   18c08:	4867      	ldr	r0, [pc, #412]	; (18da8 <spi_nrfx_transceive+0x25c>)
   18c0a:	1ac9      	subs	r1, r1, r3
   18c0c:	08c9      	lsrs	r1, r1, #3
   18c0e:	0189      	lsls	r1, r1, #6
   18c10:	f041 0101 	orr.w	r1, r1, #1
   18c14:	e7e3      	b.n	18bde <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   18c16:	6829      	ldr	r1, [r5, #0]
   18c18:	4b64      	ldr	r3, [pc, #400]	; (18dac <spi_nrfx_transceive+0x260>)
   18c1a:	4299      	cmp	r1, r3
   18c1c:	d808      	bhi.n	18c30 <spi_nrfx_transceive+0xe4>
   18c1e:	495d      	ldr	r1, [pc, #372]	; (18d94 <spi_nrfx_transceive+0x248>)
   18c20:	4b5d      	ldr	r3, [pc, #372]	; (18d98 <spi_nrfx_transceive+0x24c>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   18c22:	4863      	ldr	r0, [pc, #396]	; (18db0 <spi_nrfx_transceive+0x264>)
   18c24:	1ac9      	subs	r1, r1, r3
   18c26:	08c9      	lsrs	r1, r1, #3
   18c28:	0189      	lsls	r1, r1, #6
   18c2a:	f041 0101 	orr.w	r1, r1, #1
   18c2e:	e7d6      	b.n	18bde <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   18c30:	68ab      	ldr	r3, [r5, #8]
	const nrfx_spi_t *spi = &get_dev_config(dev)->spi;
   18c32:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   18c36:	6015      	str	r5, [r2, #0]
   18c38:	2b00      	cmp	r3, #0
   18c3a:	d07c      	beq.n	18d36 <spi_nrfx_transceive+0x1ea>
   18c3c:	6818      	ldr	r0, [r3, #0]
   18c3e:	2800      	cmp	r0, #0
   18c40:	d079      	beq.n	18d36 <spi_nrfx_transceive+0x1ea>
				   ctx->config->cs->gpio_dt_flags |
   18c42:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   18c46:	7a19      	ldrb	r1, [r3, #8]
	struct gpio_driver_data *data =
   18c48:	f8d0 b00c 	ldr.w	fp, [r0, #12]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   18c4c:	f01a 0f01 	tst.w	sl, #1
   18c50:	bf0c      	ite	eq
   18c52:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   18c56:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   18c5a:	6883      	ldr	r3, [r0, #8]
   18c5c:	9101      	str	r1, [sp, #4]
   18c5e:	681b      	ldr	r3, [r3, #0]
   18c60:	4652      	mov	r2, sl
   18c62:	4798      	blx	r3
	if (ret != 0) {
   18c64:	b968      	cbnz	r0, 18c82 <spi_nrfx_transceive+0x136>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   18c66:	9901      	ldr	r1, [sp, #4]
   18c68:	f8db 2000 	ldr.w	r2, [fp]
   18c6c:	2301      	movs	r3, #1
   18c6e:	fa03 f101 	lsl.w	r1, r3, r1
   18c72:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   18c76:	bf14      	ite	ne
   18c78:	4311      	orrne	r1, r2
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   18c7a:	ea22 0101 	biceq.w	r1, r2, r1
   18c7e:	f8cb 1000 	str.w	r1, [fp]
	nrf_spi_configure(spi->p_reg,
   18c82:	88a9      	ldrh	r1, [r5, #4]
   18c84:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   18c88:	0788      	lsls	r0, r1, #30
   18c8a:	f001 0304 	and.w	r3, r1, #4
   18c8e:	d55d      	bpl.n	18d4c <spi_nrfx_transceive+0x200>
			return NRF_SPI_MODE_2;
   18c90:	2b00      	cmp	r3, #0
   18c92:	bf14      	ite	ne
   18c94:	2303      	movne	r3, #3
   18c96:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   18c98:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   18c9a:	f3c1 1100 	ubfx	r1, r1, #4, #1
   18c9e:	d059      	beq.n	18d54 <spi_nrfx_transceive+0x208>
   18ca0:	2b03      	cmp	r3, #3
   18ca2:	d05a      	beq.n	18d5a <spi_nrfx_transceive+0x20e>
   18ca4:	2b01      	cmp	r3, #1
   18ca6:	d101      	bne.n	18cac <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   18ca8:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   18cac:	4b41      	ldr	r3, [pc, #260]	; (18db4 <spi_nrfx_transceive+0x268>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   18cae:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   18cb2:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   18cb4:	4299      	cmp	r1, r3
   18cb6:	d953      	bls.n	18d60 <spi_nrfx_transceive+0x214>
	} else if (frequency < 500000) {
   18cb8:	4b3f      	ldr	r3, [pc, #252]	; (18db8 <spi_nrfx_transceive+0x26c>)
   18cba:	4299      	cmp	r1, r3
   18cbc:	d953      	bls.n	18d66 <spi_nrfx_transceive+0x21a>
	} else if (frequency < 1000000) {
   18cbe:	4b3f      	ldr	r3, [pc, #252]	; (18dbc <spi_nrfx_transceive+0x270>)
   18cc0:	4299      	cmp	r1, r3
   18cc2:	d953      	bls.n	18d6c <spi_nrfx_transceive+0x220>
	} else if (frequency < 2000000) {
   18cc4:	4b3e      	ldr	r3, [pc, #248]	; (18dc0 <spi_nrfx_transceive+0x274>)
   18cc6:	4299      	cmp	r1, r3
   18cc8:	d953      	bls.n	18d72 <spi_nrfx_transceive+0x226>
	} else if (frequency < 4000000) {
   18cca:	4b3e      	ldr	r3, [pc, #248]	; (18dc4 <spi_nrfx_transceive+0x278>)
   18ccc:	4299      	cmp	r1, r3
   18cce:	d953      	bls.n	18d78 <spi_nrfx_transceive+0x22c>
		return NRF_SPI_FREQ_8M;
   18cd0:	4b3d      	ldr	r3, [pc, #244]	; (18dc8 <spi_nrfx_transceive+0x27c>)
   18cd2:	4299      	cmp	r1, r3
   18cd4:	bf34      	ite	cc
   18cd6:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   18cda:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   18cde:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   18ce2:	2301      	movs	r3, #1
   18ce4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   18ce8:	2f00      	cmp	r7, #0
   18cea:	d048      	beq.n	18d7e <spi_nrfx_transceive+0x232>
		ctx->current_tx = tx_bufs->buffers;
   18cec:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   18cee:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   18cf0:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   18cf2:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18cf4:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   18cf6:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18cf8:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   18cfa:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   18cfc:	2e00      	cmp	r6, #0
   18cfe:	d043      	beq.n	18d88 <spi_nrfx_transceive+0x23c>
		ctx->current_rx = rx_bufs->buffers;
   18d00:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   18d02:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   18d04:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   18d06:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18d08:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   18d0a:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18d0c:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   18d0e:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   18d10:	2200      	movs	r2, #0
   18d12:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   18d14:	2101      	movs	r1, #1
   18d16:	4620      	mov	r0, r4
   18d18:	f00d f954 	bl	25fc4 <_spi_context_cs_control.isra.0>
		transfer_next_chunk(dev);
   18d1c:	4640      	mov	r0, r8
   18d1e:	f7ff fed7 	bl	18ad0 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   18d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d2a:	f104 0020 	add.w	r0, r4, #32
   18d2e:	f007 f9cf 	bl	200d0 <z_impl_k_sem_take>
	status = ctx->sync_status;
   18d32:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   18d34:	e734      	b.n	18ba0 <spi_nrfx_transceive+0x54>
   18d36:	4b18      	ldr	r3, [pc, #96]	; (18d98 <spi_nrfx_transceive+0x24c>)
   18d38:	4916      	ldr	r1, [pc, #88]	; (18d94 <spi_nrfx_transceive+0x248>)
		LOG_INF("CS control inhibited (no GPIO device)");
   18d3a:	4824      	ldr	r0, [pc, #144]	; (18dcc <spi_nrfx_transceive+0x280>)
   18d3c:	1ac9      	subs	r1, r1, r3
   18d3e:	08c9      	lsrs	r1, r1, #3
   18d40:	0189      	lsls	r1, r1, #6
   18d42:	f041 0103 	orr.w	r1, r1, #3
   18d46:	f00a fc47 	bl	235d8 <log_0>
   18d4a:	e79a      	b.n	18c82 <spi_nrfx_transceive+0x136>
			return NRF_SPI_MODE_0;
   18d4c:	3b00      	subs	r3, #0
   18d4e:	bf18      	it	ne
   18d50:	2301      	movne	r3, #1
   18d52:	e7a1      	b.n	18c98 <spi_nrfx_transceive+0x14c>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   18d54:	f041 0104 	orr.w	r1, r1, #4
        break;
   18d58:	e7a8      	b.n	18cac <spi_nrfx_transceive+0x160>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   18d5a:	f041 0106 	orr.w	r1, r1, #6
        break;
   18d5e:	e7a5      	b.n	18cac <spi_nrfx_transceive+0x160>
		return NRF_SPI_FREQ_125K;
   18d60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   18d64:	e7bb      	b.n	18cde <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_250K;
   18d66:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   18d6a:	e7b8      	b.n	18cde <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_500K;
   18d6c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   18d70:	e7b5      	b.n	18cde <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_1M;
   18d72:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   18d76:	e7b2      	b.n	18cde <spi_nrfx_transceive+0x192>
		return NRF_SPI_FREQ_2M;
   18d78:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   18d7c:	e7af      	b.n	18cde <spi_nrfx_transceive+0x192>
		ctx->tx_count = 0;
   18d7e:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   18d82:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   18d86:	e7b9      	b.n	18cfc <spi_nrfx_transceive+0x1b0>
		ctx->rx_count = 0;
   18d88:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   18d8c:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   18d90:	e7be      	b.n	18d10 <spi_nrfx_transceive+0x1c4>
   18d92:	bf00      	nop
   18d94:	0002c0a0 	.word	0x0002c0a0
   18d98:	0002bf50 	.word	0x0002bf50
   18d9c:	0002f999 	.word	0x0002f999
   18da0:	0002f9bb 	.word	0x0002f9bb
   18da4:	0002f9da 	.word	0x0002f9da
   18da8:	0002f9fd 	.word	0x0002f9fd
   18dac:	0001e847 	.word	0x0001e847
   18db0:	0002fa2c 	.word	0x0002fa2c
   18db4:	0003d08f 	.word	0x0003d08f
   18db8:	0007a11f 	.word	0x0007a11f
   18dbc:	000f423f 	.word	0x000f423f
   18dc0:	001e847f 	.word	0x001e847f
   18dc4:	003d08ff 	.word	0x003d08ff
   18dc8:	007a1200 	.word	0x007a1200
   18dcc:	0002fa5d 	.word	0x0002fa5d

00018dd0 <event_handler>:
{
   18dd0:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   18dd2:	7803      	ldrb	r3, [r0, #0]
{
   18dd4:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   18dd6:	2b00      	cmp	r3, #0
   18dd8:	d14e      	bne.n	18e78 <event_handler+0xa8>
	if (!ctx->tx_len) {
   18dda:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   18ddc:	b163      	cbz	r3, 18df8 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   18dde:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   18de0:	429a      	cmp	r2, r3
   18de2:	d91d      	bls.n	18e20 <event_handler+0x50>
   18de4:	4925      	ldr	r1, [pc, #148]	; (18e7c <event_handler+0xac>)
   18de6:	4b26      	ldr	r3, [pc, #152]	; (18e80 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   18de8:	4826      	ldr	r0, [pc, #152]	; (18e84 <event_handler+0xb4>)
   18dea:	1ac9      	subs	r1, r1, r3
   18dec:	08c9      	lsrs	r1, r1, #3
   18dee:	0189      	lsls	r1, r1, #6
   18df0:	f041 0101 	orr.w	r1, r1, #1
   18df4:	f00a fbf0 	bl	235d8 <log_0>
	if (!ctx->rx_len) {
   18df8:	6da3      	ldr	r3, [r4, #88]	; 0x58
   18dfa:	b163      	cbz	r3, 18e16 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   18dfc:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   18dfe:	429a      	cmp	r2, r3
   18e00:	d924      	bls.n	18e4c <event_handler+0x7c>
   18e02:	491e      	ldr	r1, [pc, #120]	; (18e7c <event_handler+0xac>)
   18e04:	4b1e      	ldr	r3, [pc, #120]	; (18e80 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   18e06:	481f      	ldr	r0, [pc, #124]	; (18e84 <event_handler+0xb4>)
   18e08:	1ac9      	subs	r1, r1, r3
   18e0a:	08c9      	lsrs	r1, r1, #3
   18e0c:	0189      	lsls	r1, r1, #6
   18e0e:	f041 0101 	orr.w	r1, r1, #1
   18e12:	f00a fbe1 	bl	235d8 <log_0>
		transfer_next_chunk(dev_data->dev);
   18e16:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   18e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   18e1c:	f7ff be58 	b.w	18ad0 <transfer_next_chunk>
	ctx->tx_len -= len;
   18e20:	1a9b      	subs	r3, r3, r2
   18e22:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   18e24:	b963      	cbnz	r3, 18e40 <event_handler+0x70>
		ctx->tx_count--;
   18e26:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   18e28:	3b01      	subs	r3, #1
   18e2a:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   18e2c:	b163      	cbz	r3, 18e48 <event_handler+0x78>
			ctx->current_tx++;
   18e2e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   18e30:	f103 0208 	add.w	r2, r3, #8
   18e34:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18e36:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   18e38:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   18e3a:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   18e3c:	650b      	str	r3, [r1, #80]	; 0x50
   18e3e:	e7db      	b.n	18df8 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   18e40:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   18e42:	2b00      	cmp	r3, #0
   18e44:	d0d8      	beq.n	18df8 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   18e46:	4413      	add	r3, r2
   18e48:	64e3      	str	r3, [r4, #76]	; 0x4c
   18e4a:	e7d5      	b.n	18df8 <event_handler+0x28>
	ctx->rx_len -= len;
   18e4c:	1a9b      	subs	r3, r3, r2
   18e4e:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   18e50:	b963      	cbnz	r3, 18e6c <event_handler+0x9c>
		ctx->rx_count--;
   18e52:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18e54:	3b01      	subs	r3, #1
   18e56:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   18e58:	b163      	cbz	r3, 18e74 <event_handler+0xa4>
			ctx->current_rx++;
   18e5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   18e5c:	f103 0208 	add.w	r2, r3, #8
   18e60:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18e62:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   18e64:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   18e66:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   18e68:	65a3      	str	r3, [r4, #88]	; 0x58
   18e6a:	e7d4      	b.n	18e16 <event_handler+0x46>
	} else if (ctx->rx_buf) {
   18e6c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   18e6e:	2b00      	cmp	r3, #0
   18e70:	d0d1      	beq.n	18e16 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   18e72:	4413      	add	r3, r2
   18e74:	6563      	str	r3, [r4, #84]	; 0x54
   18e76:	e7ce      	b.n	18e16 <event_handler+0x46>
}
   18e78:	bd10      	pop	{r4, pc}
   18e7a:	bf00      	nop
   18e7c:	0002c0a0 	.word	0x0002c0a0
   18e80:	0002bf50 	.word	0x0002bf50
   18e84:	0002fa83 	.word	0x0002fa83

00018e88 <random_byte_get>:
	__asm__ volatile(
   18e88:	f04f 0320 	mov.w	r3, #32
   18e8c:	f3ef 8211 	mrs	r2, BASEPRI
   18e90:	f383 8811 	msr	BASEPRI, r3
   18e94:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18e98:	4b08      	ldr	r3, [pc, #32]	; (18ebc <random_byte_get+0x34>)
   18e9a:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   18e9c:	b159      	cbz	r1, 18eb6 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   18e9e:	4908      	ldr	r1, [pc, #32]	; (18ec0 <random_byte_get+0x38>)
   18ea0:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18ea4:	2100      	movs	r1, #0
   18ea6:	6019      	str	r1, [r3, #0]
   18ea8:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   18eaa:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   18eac:	f382 8811 	msr	BASEPRI, r2
   18eb0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   18eb4:	4770      	bx	lr
	int retval = -EAGAIN;
   18eb6:	f06f 000a 	mvn.w	r0, #10
   18eba:	e7f7      	b.n	18eac <random_byte_get+0x24>
   18ebc:	4000d100 	.word	0x4000d100
   18ec0:	4000d000 	.word	0x4000d000

00018ec4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   18ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   18ec6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   18ec8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   18eca:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   18ecc:	f04f 0520 	mov.w	r5, #32
   18ed0:	f3ef 8011 	mrs	r0, BASEPRI
   18ed4:	f385 8811 	msr	BASEPRI, r5
   18ed8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   18edc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   18ede:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   18ee2:	1ba4      	subs	r4, r4, r6
   18ee4:	403c      	ands	r4, r7
	if (available < len) {
   18ee6:	42a2      	cmp	r2, r4
		len = available;
   18ee8:	bf88      	it	hi
   18eea:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   18eec:	eb06 0c02 	add.w	ip, r6, r2
   18ef0:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   18ef4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   18ef6:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   18efa:	f380 8811 	msr	BASEPRI, r0
   18efe:	f3bf 8f6f 	isb	sy
   18f02:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   18f04:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   18f06:	4282      	cmp	r2, r0
   18f08:	d119      	bne.n	18f3e <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   18f0a:	4576      	cmp	r6, lr
   18f0c:	d10d      	bne.n	18f2a <rng_pool_get+0x66>
	__asm__ volatile(
   18f0e:	f04f 0520 	mov.w	r5, #32
   18f12:	f3ef 8211 	mrs	r2, BASEPRI
   18f16:	f385 8811 	msr	BASEPRI, r5
   18f1a:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   18f1e:	781d      	ldrb	r5, [r3, #0]
   18f20:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   18f22:	f382 8811 	msr	BASEPRI, r2
   18f26:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   18f2a:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   18f2c:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   18f2e:	b288      	uxth	r0, r1
	available = available - len;
   18f30:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   18f32:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18f34:	bf22      	ittt	cs
   18f36:	4b06      	ldrcs	r3, [pc, #24]	; (18f50 <rng_pool_get+0x8c>)
   18f38:	2201      	movcs	r2, #1
   18f3a:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   18f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   18f3e:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   18f42:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   18f44:	f89c c005 	ldrb.w	ip, [ip, #5]
   18f48:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   18f4c:	403d      	ands	r5, r7
   18f4e:	e7da      	b.n	18f06 <rng_pool_get+0x42>
   18f50:	4000d000 	.word	0x4000d000

00018f54 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18f54:	43db      	mvns	r3, r3
{
   18f56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18f5a:	f013 0501 	ands.w	r5, r3, #1
{
   18f5e:	460e      	mov	r6, r1
   18f60:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   18f62:	d004      	beq.n	18f6e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   18f64:	4821      	ldr	r0, [pc, #132]	; (18fec <entropy_nrf5_get_entropy_isr+0x98>)
   18f66:	f7ff ffad 	bl	18ec4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   18f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   18f6e:	2a00      	cmp	r2, #0
   18f70:	d033      	beq.n	18fda <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   18f72:	f04f 0320 	mov.w	r3, #32
   18f76:	f3ef 8811 	mrs	r8, BASEPRI
   18f7a:	f383 8811 	msr	BASEPRI, r3
   18f7e:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   18f82:	200d      	movs	r0, #13
   18f84:	f7eb fa60 	bl	4448 <arch_irq_is_enabled>
   18f88:	4607      	mov	r7, r0
		irq_disable(IRQN);
   18f8a:	200d      	movs	r0, #13
   18f8c:	f7eb fa48 	bl	4420 <arch_irq_disable>
	__asm__ volatile(
   18f90:	f388 8811 	msr	BASEPRI, r8
   18f94:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   18f98:	4a15      	ldr	r2, [pc, #84]	; (18ff0 <entropy_nrf5_get_entropy_isr+0x9c>)
   18f9a:	6015      	str	r5, [r2, #0]
   18f9c:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   18f9e:	4b15      	ldr	r3, [pc, #84]	; (18ff4 <entropy_nrf5_get_entropy_isr+0xa0>)
   18fa0:	2101      	movs	r1, #1
   18fa2:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18fa4:	4914      	ldr	r1, [pc, #80]	; (18ff8 <entropy_nrf5_get_entropy_isr+0xa4>)
   18fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   18faa:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   18fae:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   18fb0:	4691      	mov	r9, r2
   18fb2:	468a      	mov	sl, r1
   18fb4:	4698      	mov	r8, r3
   18fb6:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   18fba:	b183      	cbz	r3, 18fde <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   18fbc:	f7ff ff64 	bl	18e88 <random_byte_get>
			if (byte < 0) {
   18fc0:	1e03      	subs	r3, r0, #0
   18fc2:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   18fc6:	dbf6      	blt.n	18fb6 <entropy_nrf5_get_entropy_isr+0x62>
   18fc8:	3d01      	subs	r5, #1
   18fca:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   18fcc:	5573      	strb	r3, [r6, r5]
		} while (len);
   18fce:	2d00      	cmp	r5, #0
   18fd0:	d1f1      	bne.n	18fb6 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   18fd2:	b117      	cbz	r7, 18fda <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   18fd4:	200d      	movs	r0, #13
   18fd6:	f7eb fa13 	bl	4400 <arch_irq_enable>
	return cnt;
   18fda:	4620      	mov	r0, r4
   18fdc:	e7c5      	b.n	18f6a <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   18fde:	f3bf 8f4f 	dsb	sy
				__WFE();
   18fe2:	bf20      	wfe
				__SEV();
   18fe4:	bf40      	sev
				__WFE();
   18fe6:	bf20      	wfe
   18fe8:	e7e5      	b.n	18fb6 <entropy_nrf5_get_entropy_isr+0x62>
   18fea:	bf00      	nop
   18fec:	20003db0 	.word	0x20003db0
   18ff0:	4000d100 	.word	0x4000d100
   18ff4:	4000d000 	.word	0x4000d000
   18ff8:	e000e100 	.word	0xe000e100

00018ffc <entropy_nrf5_get_entropy>:
{
   18ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19000:	4f13      	ldr	r7, [pc, #76]	; (19050 <entropy_nrf5_get_entropy+0x54>)
   19002:	460d      	mov	r5, r1
   19004:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19006:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1900a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1900e:	b914      	cbnz	r4, 19016 <entropy_nrf5_get_entropy+0x1a>
}
   19010:	4620      	mov	r0, r4
   19012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1901a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1901e:	4638      	mov	r0, r7
   19020:	f007 f856 	bl	200d0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19024:	4622      	mov	r2, r4
   19026:	4629      	mov	r1, r5
   19028:	4640      	mov	r0, r8
   1902a:	f7ff ff4b 	bl	18ec4 <rng_pool_get>
   1902e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   19030:	4638      	mov	r0, r7
   19032:	f007 f827 	bl	20084 <z_impl_k_sem_give>
		if (bytes == 0U) {
   19036:	b93e      	cbnz	r6, 19048 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   19038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1903c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19040:	4648      	mov	r0, r9
   19042:	f007 f845 	bl	200d0 <z_impl_k_sem_take>
			continue;
   19046:	e7e2      	b.n	1900e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   19048:	1ba4      	subs	r4, r4, r6
   1904a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1904c:	4435      	add	r5, r6
   1904e:	e7de      	b.n	1900e <entropy_nrf5_get_entropy+0x12>
   19050:	20003d80 	.word	0x20003d80

00019054 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   19054:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   19056:	4c19      	ldr	r4, [pc, #100]	; (190bc <entropy_nrf5_init+0x68>)
   19058:	2201      	movs	r2, #1
   1905a:	4611      	mov	r1, r2
   1905c:	4620      	mov	r0, r4
   1905e:	f012 f8bb 	bl	2b1d8 <z_impl_k_sem_init>
   19062:	2201      	movs	r2, #1
   19064:	2100      	movs	r1, #0
   19066:	f104 0018 	add.w	r0, r4, #24
   1906a:	f012 f8b5 	bl	2b1d8 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1906e:	f240 4307 	movw	r3, #1031	; 0x407
   19072:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   19076:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1907a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1907c:	230c      	movs	r3, #12
   1907e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   19082:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   19084:	4b0e      	ldr	r3, [pc, #56]	; (190c0 <entropy_nrf5_init+0x6c>)
   19086:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1908a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1908e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   19092:	f042 0201 	orr.w	r2, r2, #1
   19096:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1909a:	4a0a      	ldr	r2, [pc, #40]	; (190c4 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   1909c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1909e:	6015      	str	r5, [r2, #0]
   190a0:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   190a2:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   190a6:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   190a8:	6019      	str	r1, [r3, #0]
   190aa:	200d      	movs	r0, #13
   190ac:	f7eb f9da 	bl	4464 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   190b0:	200d      	movs	r0, #13
   190b2:	f7eb f9a5 	bl	4400 <arch_irq_enable>

	return 0;
}
   190b6:	4628      	mov	r0, r5
   190b8:	bd38      	pop	{r3, r4, r5, pc}
   190ba:	bf00      	nop
   190bc:	20003d80 	.word	0x20003d80
   190c0:	4000d000 	.word	0x4000d000
   190c4:	4000d100 	.word	0x4000d100

000190c8 <isr>:
{
   190c8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   190ca:	f7ff fedd 	bl	18e88 <random_byte_get>
	if (byte < 0) {
   190ce:	2800      	cmp	r0, #0
   190d0:	db20      	blt.n	19114 <isr+0x4c>
	uint8_t last  = rngp->last;
   190d2:	4b17      	ldr	r3, [pc, #92]	; (19130 <isr+0x68>)
   190d4:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   190d8:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   190dc:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   190e0:	1a51      	subs	r1, r2, r1
   190e2:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   190e6:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   190e8:	d10d      	bne.n	19106 <isr+0x3e>
	uint8_t last  = rngp->last;
   190ea:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   190ee:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   190f2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   190f6:	1a51      	subs	r1, r2, r1
   190f8:	ea34 0101 	bics.w	r1, r4, r1
   190fc:	d10b      	bne.n	19116 <isr+0x4e>
   190fe:	4b0d      	ldr	r3, [pc, #52]	; (19134 <isr+0x6c>)
   19100:	2201      	movs	r2, #1
   19102:	601a      	str	r2, [r3, #0]
}
   19104:	e00e      	b.n	19124 <isr+0x5c>
	rngp->buffer[last] = byte;
   19106:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19108:	3201      	adds	r2, #1
   1910a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1910c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   19110:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   19114:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   19116:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19118:	3201      	adds	r2, #1
   1911a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1911c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   19120:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19124:	4804      	ldr	r0, [pc, #16]	; (19138 <isr+0x70>)
}
   19126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1912a:	f006 bfab 	b.w	20084 <z_impl_k_sem_give>
   1912e:	bf00      	nop
   19130:	20003d80 	.word	0x20003d80
   19134:	4000d004 	.word	0x4000d004
   19138:	20003d98 	.word	0x20003d98

0001913c <__NVIC_SystemReset>:
   1913c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19140:	4905      	ldr	r1, [pc, #20]	; (19158 <__NVIC_SystemReset+0x1c>)
   19142:	4b06      	ldr	r3, [pc, #24]	; (1915c <__NVIC_SystemReset+0x20>)
   19144:	68ca      	ldr	r2, [r1, #12]
   19146:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1914a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1914c:	60cb      	str	r3, [r1, #12]
   1914e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   19152:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19154:	e7fd      	b.n	19152 <__NVIC_SystemReset+0x16>
   19156:	bf00      	nop
   19158:	e000ed00 	.word	0xe000ed00
   1915c:	05fa0004 	.word	0x05fa0004

00019160 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   19160:	4b04      	ldr	r3, [pc, #16]	; (19174 <nrf52_errata_108+0x14>)
   19162:	6818      	ldr	r0, [r3, #0]
   19164:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19166:	bf04      	itt	eq
   19168:	4b03      	ldreq	r3, [pc, #12]	; (19178 <nrf52_errata_108+0x18>)
   1916a:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   1916c:	1f83      	subs	r3, r0, #6
   1916e:	4258      	negs	r0, r3
   19170:	4158      	adcs	r0, r3
   19172:	4770      	bx	lr
   19174:	10000130 	.word	0x10000130
   19178:	f0000fe0 	.word	0xf0000fe0

0001917c <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1917c:	4b07      	ldr	r3, [pc, #28]	; (1919c <nrf52_errata_16+0x20>)
   1917e:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19180:	2b06      	cmp	r3, #6
   19182:	d109      	bne.n	19198 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   19184:	4b06      	ldr	r3, [pc, #24]	; (191a0 <nrf52_errata_16+0x24>)
   19186:	681b      	ldr	r3, [r3, #0]
   19188:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1918c:	3b03      	subs	r3, #3
   1918e:	2b03      	cmp	r3, #3
   19190:	d802      	bhi.n	19198 <nrf52_errata_16+0x1c>
   19192:	4a04      	ldr	r2, [pc, #16]	; (191a4 <nrf52_errata_16+0x28>)
   19194:	5cd0      	ldrb	r0, [r2, r3]
   19196:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19198:	2000      	movs	r0, #0
    #endif
}
   1919a:	4770      	bx	lr
   1919c:	f0000fe0 	.word	0xf0000fe0
   191a0:	f0000fe8 	.word	0xf0000fe8
   191a4:	0002faba 	.word	0x0002faba

000191a8 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   191a8:	4a02      	ldr	r2, [pc, #8]	; (191b4 <nvmc_wait+0xc>)
   191aa:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   191ae:	2b00      	cmp	r3, #0
   191b0:	d0fb      	beq.n	191aa <nvmc_wait+0x2>
}
   191b2:	4770      	bx	lr
   191b4:	4001e000 	.word	0x4001e000

000191b8 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   191b8:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   191ba:	f7ff ffd1 	bl	19160 <nrf52_errata_108>
   191be:	b128      	cbz	r0, 191cc <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   191c0:	4b7d      	ldr	r3, [pc, #500]	; (193b8 <SystemInit+0x200>)
   191c2:	4a7e      	ldr	r2, [pc, #504]	; (193bc <SystemInit+0x204>)
   191c4:	681b      	ldr	r3, [r3, #0]
   191c6:	f3c3 2304 	ubfx	r3, r3, #8, #5
   191ca:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   191cc:	f7ff ffd6 	bl	1917c <nrf52_errata_16>
   191d0:	b110      	cbz	r0, 191d8 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   191d2:	4b7b      	ldr	r3, [pc, #492]	; (193c0 <SystemInit+0x208>)
   191d4:	4a7b      	ldr	r2, [pc, #492]	; (193c4 <SystemInit+0x20c>)
   191d6:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   191d8:	f7ff ffc2 	bl	19160 <nrf52_errata_108>
   191dc:	b128      	cbz	r0, 191ea <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   191de:	4b7a      	ldr	r3, [pc, #488]	; (193c8 <SystemInit+0x210>)
   191e0:	4a7a      	ldr	r2, [pc, #488]	; (193cc <SystemInit+0x214>)
   191e2:	681b      	ldr	r3, [r3, #0]
   191e4:	f3c3 3342 	ubfx	r3, r3, #13, #3
   191e8:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   191ea:	f7ff ffc7 	bl	1917c <nrf52_errata_16>
   191ee:	b120      	cbz	r0, 191fa <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   191f0:	4a77      	ldr	r2, [pc, #476]	; (193d0 <SystemInit+0x218>)
   191f2:	68d3      	ldr	r3, [r2, #12]
   191f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   191f8:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   191fa:	f7ff ffb1 	bl	19160 <nrf52_errata_108>
   191fe:	b140      	cbz	r0, 19212 <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19204:	2200      	movs	r2, #0
   19206:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1920a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1920e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   19212:	f7ff ffb3 	bl	1917c <nrf52_errata_16>
   19216:	b110      	cbz	r0, 1921e <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   19218:	4b6e      	ldr	r3, [pc, #440]	; (193d4 <SystemInit+0x21c>)
   1921a:	2203      	movs	r2, #3
   1921c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   1921e:	f7ff ffad 	bl	1917c <nrf52_errata_16>
   19222:	b140      	cbz	r0, 19236 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   19224:	4b6c      	ldr	r3, [pc, #432]	; (193d8 <SystemInit+0x220>)
   19226:	2205      	movs	r2, #5
   19228:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   1922a:	2201      	movs	r2, #1
   1922c:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   1922e:	2200      	movs	r2, #0
   19230:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   19232:	223f      	movs	r2, #63	; 0x3f
   19234:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   19236:	4b69      	ldr	r3, [pc, #420]	; (193dc <SystemInit+0x224>)
   19238:	681a      	ldr	r2, [r3, #0]
   1923a:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1923c:	bf0b      	itete	eq
   1923e:	4b68      	ldreq	r3, [pc, #416]	; (193e0 <SystemInit+0x228>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   19240:	4b68      	ldrne	r3, [pc, #416]	; (193e4 <SystemInit+0x22c>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   19242:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   19244:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   19246:	bf02      	ittt	eq
   19248:	3308      	addeq	r3, #8
   1924a:	681b      	ldreq	r3, [r3, #0]
   1924c:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   19250:	2a06      	cmp	r2, #6
   19252:	d14d      	bne.n	192f0 <SystemInit+0x138>
            {
                switch(var2)
   19254:	3b03      	subs	r3, #3
   19256:	2b03      	cmp	r3, #3
   19258:	d803      	bhi.n	19262 <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1925a:	4a63      	ldr	r2, [pc, #396]	; (193e8 <SystemInit+0x230>)
   1925c:	5cd3      	ldrb	r3, [r2, r3]
   1925e:	2b00      	cmp	r3, #0
   19260:	d046      	beq.n	192f0 <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19266:	4b61      	ldr	r3, [pc, #388]	; (193ec <SystemInit+0x234>)
   19268:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1926c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19270:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19274:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19278:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1927c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19280:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19284:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19288:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1928c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19290:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19294:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19298:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1929c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   192a0:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   192a4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   192a8:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   192ac:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   192b0:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   192b4:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   192b8:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   192bc:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   192c0:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   192c4:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   192c8:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   192cc:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   192d0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   192d4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   192d8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   192dc:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   192e0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   192e4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   192e8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   192ec:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   192f0:	f7ff ff36 	bl	19160 <nrf52_errata_108>
   192f4:	b128      	cbz	r0, 19302 <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   192f6:	4b3e      	ldr	r3, [pc, #248]	; (193f0 <SystemInit+0x238>)
   192f8:	4a3e      	ldr	r2, [pc, #248]	; (193f4 <SystemInit+0x23c>)
   192fa:	681b      	ldr	r3, [r3, #0]
   192fc:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   19300:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19302:	f7ff ff2d 	bl	19160 <nrf52_errata_108>
   19306:	b148      	cbz	r0, 1931c <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19308:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1930c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19310:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19312:	bf44      	itt	mi
   19314:	f06f 0201 	mvnmi.w	r2, #1
   19318:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1931c:	4b2f      	ldr	r3, [pc, #188]	; (193dc <SystemInit+0x224>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1931e:	681b      	ldr	r3, [r3, #0]
   19320:	2b06      	cmp	r3, #6
   19322:	d10c      	bne.n	1933e <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19324:	4b2f      	ldr	r3, [pc, #188]	; (193e4 <SystemInit+0x22c>)
   19326:	681b      	ldr	r3, [r3, #0]
   19328:	3b03      	subs	r3, #3
   1932a:	2b03      	cmp	r3, #3
   1932c:	d802      	bhi.n	19334 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   1932e:	4a32      	ldr	r2, [pc, #200]	; (193f8 <SystemInit+0x240>)
   19330:	5cd3      	ldrb	r3, [r2, r3]
   19332:	b123      	cbz	r3, 1933e <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   19334:	4a31      	ldr	r2, [pc, #196]	; (193fc <SystemInit+0x244>)
   19336:	6813      	ldr	r3, [r2, #0]
   19338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1933c:	6013      	str	r3, [r2, #0]

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   1933e:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   19342:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   19346:	07db      	lsls	r3, r3, #31
   19348:	d514      	bpl.n	19374 <SystemInit+0x1bc>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1934a:	482d      	ldr	r0, [pc, #180]	; (19400 <SystemInit+0x248>)
   1934c:	2301      	movs	r3, #1
   1934e:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   19352:	f7ff ff29 	bl	191a8 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   19356:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   1935a:	f023 0301 	bic.w	r3, r3, #1
   1935e:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   19362:	f7ff ff21 	bl	191a8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19366:	2300      	movs	r3, #0
   19368:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   1936c:	f7ff ff1c 	bl	191a8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   19370:	f7ff fee4 	bl	1913c <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19374:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   19378:	2b00      	cmp	r3, #0
   1937a:	db03      	blt.n	19384 <SystemInit+0x1cc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1937c:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19380:	2b00      	cmp	r3, #0
   19382:	da14      	bge.n	193ae <SystemInit+0x1f6>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19384:	491e      	ldr	r1, [pc, #120]	; (19400 <SystemInit+0x248>)
   19386:	2301      	movs	r3, #1
   19388:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1938c:	f7ff ff0c 	bl	191a8 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19390:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   19394:	2415      	movs	r4, #21
   19396:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1939a:	f7ff ff05 	bl	191a8 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1939e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   193a2:	f7ff ff01 	bl	191a8 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   193a6:	2300      	movs	r3, #0
   193a8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   193ac:	e7de      	b.n	1936c <SystemInit+0x1b4>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   193ae:	4b15      	ldr	r3, [pc, #84]	; (19404 <SystemInit+0x24c>)
   193b0:	4a15      	ldr	r2, [pc, #84]	; (19408 <SystemInit+0x250>)
   193b2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   193b4:	bd10      	pop	{r4, pc}
   193b6:	bf00      	nop
   193b8:	10000324 	.word	0x10000324
   193bc:	40013540 	.word	0x40013540
   193c0:	4007c074 	.word	0x4007c074
   193c4:	baadf00d 	.word	0xbaadf00d
   193c8:	10000244 	.word	0x10000244
   193cc:	4000053c 	.word	0x4000053c
   193d0:	e000edf0 	.word	0xe000edf0
   193d4:	400005a0 	.word	0x400005a0
   193d8:	40005610 	.word	0x40005610
   193dc:	10000130 	.word	0x10000130
   193e0:	f0000fe0 	.word	0xf0000fe0
   193e4:	10000134 	.word	0x10000134
   193e8:	0002fab2 	.word	0x0002fab2
   193ec:	4000c000 	.word	0x4000c000
   193f0:	10000258 	.word	0x10000258
   193f4:	40000ee4 	.word	0x40000ee4
   193f8:	0002fab6 	.word	0x0002fab6
   193fc:	4000173c 	.word	0x4000173c
   19400:	4001e000 	.word	0x4001e000
   19404:	200007b4 	.word	0x200007b4
   19408:	03d09000 	.word	0x03d09000

0001940c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1940c:	4b04      	ldr	r3, [pc, #16]	; (19420 <nrfx_clock_init+0x14>)
   1940e:	791a      	ldrb	r2, [r3, #4]
   19410:	b922      	cbnz	r2, 1941c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   19412:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   19414:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   19416:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19418:	4802      	ldr	r0, [pc, #8]	; (19424 <nrfx_clock_init+0x18>)
   1941a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1941c:	4802      	ldr	r0, [pc, #8]	; (19428 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1941e:	4770      	bx	lr
   19420:	20003dd4 	.word	0x20003dd4
   19424:	0bad0000 	.word	0x0bad0000
   19428:	0bad000c 	.word	0x0bad000c

0001942c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   1942c:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1942e:	b110      	cbz	r0, 19436 <nrfx_clock_start+0xa>
   19430:	2801      	cmp	r0, #1
   19432:	d033      	beq.n	1949c <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   19434:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19436:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1943a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1943e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   19442:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   19446:	4619      	mov	r1, r3
   19448:	d024      	beq.n	19494 <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1944a:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1944e:	2a01      	cmp	r2, #1
   19450:	d120      	bne.n	19494 <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
   19452:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19456:	4b16      	ldr	r3, [pc, #88]	; (194b0 <nrfx_clock_start+0x84>)
   19458:	2200      	movs	r2, #0
   1945a:	601a      	str	r2, [r3, #0]
   1945c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1945e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19462:	2202      	movs	r2, #2
   19464:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   19468:	4a12      	ldr	r2, [pc, #72]	; (194b4 <nrfx_clock_start+0x88>)
   1946a:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   1946c:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   19470:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
   19472:	4b11      	ldr	r3, [pc, #68]	; (194b8 <nrfx_clock_start+0x8c>)
   19474:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   19476:	f044 0101 	orr.w	r1, r4, #1
   1947a:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   1947c:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   1947e:	6859      	ldr	r1, [r3, #4]
   19480:	1b49      	subs	r1, r1, r5
   19482:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   19486:	d3fa      	bcc.n	1947e <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
   19488:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1948a:	4b0c      	ldr	r3, [pc, #48]	; (194bc <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
   1948c:	60d0      	str	r0, [r2, #12]
   1948e:	2201      	movs	r2, #1
   19490:	601a      	str	r2, [r3, #0]
}
   19492:	e7cf      	b.n	19434 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   19494:	2300      	movs	r3, #0
   19496:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   1949a:	e7dc      	b.n	19456 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1949c:	4b08      	ldr	r3, [pc, #32]	; (194c0 <nrfx_clock_start+0x94>)
   1949e:	2200      	movs	r2, #0
   194a0:	601a      	str	r2, [r3, #0]
   194a2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   194a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   194a8:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194ac:	6018      	str	r0, [r3, #0]
}
   194ae:	e7c1      	b.n	19434 <nrfx_clock_start+0x8>
   194b0:	40000104 	.word	0x40000104
   194b4:	e000edf0 	.word	0xe000edf0
   194b8:	e0001000 	.word	0xe0001000
   194bc:	40000008 	.word	0x40000008
   194c0:	40000100 	.word	0x40000100

000194c4 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   194c4:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   194c6:	b110      	cbz	r0, 194ce <nrfx_clock_stop+0xa>
   194c8:	2801      	cmp	r0, #1
   194ca:	d018      	beq.n	194fe <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   194cc:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   194ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   194d2:	2202      	movs	r2, #2
   194d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194d8:	4a18      	ldr	r2, [pc, #96]	; (1953c <nrfx_clock_stop+0x78>)
   194da:	6010      	str	r0, [r2, #0]
   194dc:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   194de:	4a18      	ldr	r2, [pc, #96]	; (19540 <nrfx_clock_stop+0x7c>)
   194e0:	2101      	movs	r1, #1
   194e2:	6011      	str	r1, [r2, #0]
   194e4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   194e8:	461c      	mov	r4, r3
   194ea:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   194ee:	03db      	lsls	r3, r3, #15
   194f0:	d5ec      	bpl.n	194cc <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   194f2:	2001      	movs	r0, #1
   194f4:	f00c fdae 	bl	26054 <nrfx_busy_wait>
   194f8:	3d01      	subs	r5, #1
   194fa:	d1f6      	bne.n	194ea <nrfx_clock_stop+0x26>
   194fc:	e7e6      	b.n	194cc <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   194fe:	4b11      	ldr	r3, [pc, #68]	; (19544 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   19500:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19504:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   19506:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1950a:	601a      	str	r2, [r3, #0]
   1950c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1950e:	4b0e      	ldr	r3, [pc, #56]	; (19548 <nrfx_clock_stop+0x84>)
   19510:	f242 7510 	movw	r5, #10000	; 0x2710
   19514:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19516:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1951a:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1951e:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19520:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19524:	d505      	bpl.n	19532 <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   19526:	b123      	cbz	r3, 19532 <nrfx_clock_stop+0x6e>
   19528:	2001      	movs	r0, #1
   1952a:	f00c fd93 	bl	26054 <nrfx_busy_wait>
   1952e:	3d01      	subs	r5, #1
   19530:	d1f1      	bne.n	19516 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   19532:	4b06      	ldr	r3, [pc, #24]	; (1954c <nrfx_clock_stop+0x88>)
   19534:	2200      	movs	r2, #0
   19536:	715a      	strb	r2, [r3, #5]
   19538:	e7c8      	b.n	194cc <nrfx_clock_stop+0x8>
   1953a:	bf00      	nop
   1953c:	40000104 	.word	0x40000104
   19540:	4000000c 	.word	0x4000000c
   19544:	40000100 	.word	0x40000100
   19548:	40000004 	.word	0x40000004
   1954c:	20003dd4 	.word	0x20003dd4

00019550 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19550:	4b16      	ldr	r3, [pc, #88]	; (195ac <nrfx_power_clock_irq_handler+0x5c>)
   19552:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   19554:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   19556:	b16a      	cbz	r2, 19574 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19558:	2200      	movs	r2, #0
   1955a:	601a      	str	r2, [r3, #0]
   1955c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1955e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19562:	2201      	movs	r2, #1
   19564:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   19568:	4b11      	ldr	r3, [pc, #68]	; (195b0 <nrfx_power_clock_irq_handler+0x60>)
   1956a:	7958      	ldrb	r0, [r3, #5]
   1956c:	b910      	cbnz	r0, 19574 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1956e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19570:	681b      	ldr	r3, [r3, #0]
   19572:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19574:	4b0f      	ldr	r3, [pc, #60]	; (195b4 <nrfx_power_clock_irq_handler+0x64>)
   19576:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   19578:	b172      	cbz	r2, 19598 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1957a:	2200      	movs	r2, #0
   1957c:	601a      	str	r2, [r3, #0]
   1957e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19584:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19588:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1958c:	0792      	lsls	r2, r2, #30
   1958e:	d104      	bne.n	1959a <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   19590:	2201      	movs	r2, #1
   19592:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19596:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   19598:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1959a:	2202      	movs	r2, #2
   1959c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   195a0:	4b03      	ldr	r3, [pc, #12]	; (195b0 <nrfx_power_clock_irq_handler+0x60>)
}
   195a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   195a6:	681b      	ldr	r3, [r3, #0]
   195a8:	2001      	movs	r0, #1
   195aa:	4718      	bx	r3
   195ac:	40000100 	.word	0x40000100
   195b0:	20003dd4 	.word	0x20003dd4
   195b4:	40000104 	.word	0x40000104

000195b8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   195b8:	2301      	movs	r3, #1
   195ba:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   195be:	f010 0fff 	tst.w	r0, #255	; 0xff
   195c2:	d012      	beq.n	195ea <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
   195c4:	f04f 0320 	mov.w	r3, #32
   195c8:	f3ef 8111 	mrs	r1, BASEPRI
   195cc:	f383 8811 	msr	BASEPRI, r3
   195d0:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   195d4:	4a06      	ldr	r2, [pc, #24]	; (195f0 <nrfx_gpiote_channel_free+0x38>)
   195d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   195d8:	ea23 0000 	bic.w	r0, r3, r0
   195dc:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
   195de:	f381 8811 	msr	BASEPRI, r1
   195e2:	f3bf 8f6f 	isb	sy
   195e6:	4803      	ldr	r0, [pc, #12]	; (195f4 <nrfx_gpiote_channel_free+0x3c>)
   195e8:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   195ea:	4803      	ldr	r0, [pc, #12]	; (195f8 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   195ec:	4770      	bx	lr
   195ee:	bf00      	nop
   195f0:	20003ddc 	.word	0x20003ddc
   195f4:	0bad0000 	.word	0x0bad0000
   195f8:	0bad0004 	.word	0x0bad0004

000195fc <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   195fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19600:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   19602:	f8df e060 	ldr.w	lr, [pc, #96]	; 19664 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   19606:	4816      	ldr	r0, [pc, #88]	; (19660 <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   19608:	f8df 805c 	ldr.w	r8, [pc, #92]	; 19668 <nrfx_gpiote_channel_alloc+0x6c>
{
   1960c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1960e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   19610:	2601      	movs	r6, #1
   19612:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   19614:	f04f 0120 	mov.w	r1, #32
   19618:	f3ef 8c11 	mrs	ip, BASEPRI
   1961c:	f381 8811 	msr	BASEPRI, r1
   19620:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   19624:	fa22 f103 	lsr.w	r1, r2, r3
   19628:	07c9      	lsls	r1, r1, #31
   1962a:	d50a      	bpl.n	19642 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1962c:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
   19630:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   19634:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   19636:	bf01      	itttt	eq
   19638:	4339      	orreq	r1, r7
   1963a:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
   1963e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   19640:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   19642:	f38c 8811 	msr	BASEPRI, ip
   19646:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1964a:	4540      	cmp	r0, r8
   1964c:	d005      	beq.n	1965a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1964e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   19652:	439a      	bics	r2, r3
   19654:	f104 0401 	add.w	r4, r4, #1
   19658:	d1db      	bne.n	19612 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1965a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1965e:	bf00      	nop
   19660:	0bad0002 	.word	0x0bad0002
   19664:	20003ddc 	.word	0x20003ddc
   19668:	0bad0000 	.word	0x0bad0000

0001966c <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1966c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19670:	7904      	ldrb	r4, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   19672:	4d4d      	ldr	r5, [pc, #308]	; (197a8 <nrfx_spi_init+0x13c>)
   19674:	2628      	movs	r6, #40	; 0x28
   19676:	4366      	muls	r6, r4
   19678:	19af      	adds	r7, r5, r6
   1967a:	f897 c01c 	ldrb.w	ip, [r7, #28]
   1967e:	f1bc 0f00 	cmp.w	ip, #0
   19682:	f040 808f 	bne.w	197a4 <nrfx_spi_init+0x138>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   19686:	51aa      	str	r2, [r5, r6]
    p_cb->p_context = p_context;
   19688:	607b      	str	r3, [r7, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1968a:	f891 e000 	ldrb.w	lr, [r1]
   1968e:	7b0f      	ldrb	r7, [r1, #12]
   19690:	f00e 061f 	and.w	r6, lr, #31
   19694:	f04f 0c01 	mov.w	ip, #1
   19698:	fa0c fc06 	lsl.w	ip, ip, r6
   1969c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196a0:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   196a4:	f04f 0801 	mov.w	r8, #1
   196a8:	2f01      	cmp	r7, #1
    p_reg->OUTCLR = clr_mask;
   196aa:	bf94      	ite	ls
   196ac:	f8c3 c50c 	strls.w	ip, [r3, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   196b0:	f8c3 c508 	strhi.w	ip, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196b4:	f843 8026 	str.w	r8, [r3, r6, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   196b8:	784e      	ldrb	r6, [r1, #1]
   196ba:	2eff      	cmp	r6, #255	; 0xff
    *p_pin = pin_number & 0x1F;
   196bc:	bf1f      	itttt	ne
   196be:	f006 0c1f 	andne.w	ip, r6, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   196c2:	fa08 f80c 	lslne.w	r8, r8, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196c6:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
   196ca:	f8c3 850c 	strne.w	r8, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196ce:	bf1c      	itt	ne
   196d0:	f04f 0803 	movne.w	r8, #3
   196d4:	f843 802c 	strne.w	r8, [r3, ip, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   196d8:	788b      	ldrb	r3, [r1, #2]
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   196da:	bf08      	it	eq
   196dc:	f04f 36ff 	moveq.w	r6, #4294967295	; 0xffffffff
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   196e0:	2bff      	cmp	r3, #255	; 0xff
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   196e2:	bf1f      	itttt	ne
   196e4:	f891 800e 	ldrbne.w	r8, [r1, #14]
    *p_pin = pin_number & 0x1F;
   196e8:	f003 0c1f 	andne.w	ip, r3, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196ec:	f50c 7ce0 	addne.w	ip, ip, #448	; 0x1c0
   196f0:	f04f 49a0 	movne.w	r9, #1342177280	; 0x50000000
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   196f4:	bf1c      	itt	ne
   196f6:	ea4f 0888 	movne.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   196fa:	f849 802c 	strne.w	r8, [r9, ip, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   196fe:	f891 8003 	ldrb.w	r8, [r1, #3]
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   19702:	bf08      	it	eq
   19704:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   19708:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1970c:	d00f      	beq.n	1972e <nrfx_spi_init+0xc2>
    *p_pin = pin_number & 0x1F;
   1970e:	f008 0c1f 	and.w	ip, r8, #31
    p_reg->OUTSET = set_mask;
   19712:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19716:	f04f 0901 	mov.w	r9, #1
   1971a:	fa09 f90c 	lsl.w	r9, r9, ip
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1971e:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   19722:	f8ca 9508 	str.w	r9, [sl, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19726:	f04f 0903 	mov.w	r9, #3
   1972a:	f84a 902c 	str.w	r9, [sl, ip, lsl #2]
    {
        nrf_gpio_pin_set(p_config->ss_pin);
        nrf_gpio_cfg_output(p_config->ss_pin);
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1972e:	f04f 0c28 	mov.w	ip, #40	; 0x28
   19732:	fb0c 5c04 	mla	ip, ip, r4, r5
   19736:	f88c 801e 	strb.w	r8, [ip, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1973a:	6800      	ldr	r0, [r0, #0]
    p_reg->PSELSCK  = sck_pin;
   1973c:	f8c0 e508 	str.w	lr, [r0, #1288]	; 0x508
    p_reg->PSELMOSI = mosi_pin;
   19740:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->PSELMISO = miso_pin;
   19744:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   19748:	688b      	ldr	r3, [r1, #8]
   1974a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1974e:	7b4b      	ldrb	r3, [r1, #13]
   19750:	3b00      	subs	r3, #0
   19752:	bf18      	it	ne
   19754:	2301      	movne	r3, #1
    switch (spi_mode)
   19756:	2f02      	cmp	r7, #2
   19758:	d01e      	beq.n	19798 <nrfx_spi_init+0x12c>
   1975a:	2f03      	cmp	r7, #3
   1975c:	d01f      	beq.n	1979e <nrfx_spi_init+0x132>
   1975e:	2f01      	cmp	r7, #1
   19760:	d101      	bne.n	19766 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   19762:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   19766:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1976a:	2328      	movs	r3, #40	; 0x28
   1976c:	fb03 5304 	mla	r3, r3, r4, r5
   19770:	7949      	ldrb	r1, [r1, #5]
   19772:	77d9      	strb	r1, [r3, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   19774:	2301      	movs	r3, #1
   19776:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1977a:	b11a      	cbz	r2, 19784 <nrfx_spi_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1977c:	f340 3007 	sbfx	r0, r0, #12, #8
   19780:	f7ea fe3e 	bl	4400 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   19784:	2328      	movs	r3, #40	; 0x28
   19786:	fb03 5404 	mla	r4, r3, r4, r5
   1978a:	2300      	movs	r3, #0
   1978c:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1978e:	4807      	ldr	r0, [pc, #28]	; (197ac <nrfx_spi_init+0x140>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19790:	2301      	movs	r3, #1
   19792:	7723      	strb	r3, [r4, #28]
}
   19794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   19798:	f043 0304 	orr.w	r3, r3, #4
        break;
   1979c:	e7e3      	b.n	19766 <nrfx_spi_init+0xfa>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1979e:	f043 0306 	orr.w	r3, r3, #6
        break;
   197a2:	e7e0      	b.n	19766 <nrfx_spi_init+0xfa>
        return err_code;
   197a4:	4802      	ldr	r0, [pc, #8]	; (197b0 <nrfx_spi_init+0x144>)
   197a6:	e7f5      	b.n	19794 <nrfx_spi_init+0x128>
   197a8:	20003e2c 	.word	0x20003e2c
   197ac:	0bad0000 	.word	0x0bad0000
   197b0:	0bad0005 	.word	0x0bad0005

000197b4 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   197b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   197b8:	7905      	ldrb	r5, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   197ba:	4e41      	ldr	r6, [pc, #260]	; (198c0 <nrfx_spi_xfer+0x10c>)
   197bc:	2328      	movs	r3, #40	; 0x28
   197be:	436b      	muls	r3, r5
{
   197c0:	4696      	mov	lr, r2
    if (p_cb->transfer_in_progress)
   197c2:	18f2      	adds	r2, r6, r3
{
   197c4:	460f      	mov	r7, r1
    if (p_cb->transfer_in_progress)
   197c6:	7f51      	ldrb	r1, [r2, #29]
{
   197c8:	4680      	mov	r8, r0
    if (p_cb->transfer_in_progress)
   197ca:	2900      	cmp	r1, #0
   197cc:	d176      	bne.n	198bc <nrfx_spi_xfer+0x108>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   197ce:	f856 c003 	ldr.w	ip, [r6, r3]
   197d2:	f1bc 0f00 	cmp.w	ip, #0
   197d6:	d001      	beq.n	197dc <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
   197d8:	2301      	movs	r3, #1
   197da:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   197dc:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   197e0:	2428      	movs	r4, #40	; 0x28
   197e2:	fb04 6405 	mla	r4, r4, r5, r6
   197e6:	f104 090c 	add.w	r9, r4, #12
   197ea:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
   197ee:	2300      	movs	r3, #0
   197f0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   197f4:	7fa3      	ldrb	r3, [r4, #30]
   197f6:	2bff      	cmp	r3, #255	; 0xff
   197f8:	d008      	beq.n	1980c <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   197fa:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   197fc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   19800:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
   19804:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   19808:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
    }
    if (flags)
   1980c:	2328      	movs	r3, #40	; 0x28
   1980e:	f1be 0f00 	cmp.w	lr, #0
   19812:	d006      	beq.n	19822 <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
   19814:	fb03 6505 	mla	r5, r3, r5, r6
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   19818:	482a      	ldr	r0, [pc, #168]	; (198c4 <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
   1981a:	2300      	movs	r3, #0
   1981c:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1981e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   19822:	f8d8 4000 	ldr.w	r4, [r8]
    p_cb->bytes_transferred = 0;
   19826:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->INTENCLR = mask;
   1982a:	2204      	movs	r2, #4
   1982c:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
   19830:	f8c3 e020 	str.w	lr, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19834:	f8c4 e108 	str.w	lr, [r4, #264]	; 0x108
   19838:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1983c:	687a      	ldr	r2, [r7, #4]
    nrf_spi_txd_set(p_spi,
   1983e:	b18a      	cbz	r2, 19864 <nrfx_spi_xfer+0xb0>
   19840:	683b      	ldr	r3, [r7, #0]
   19842:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   19844:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   19848:	2a01      	cmp	r2, #1
   1984a:	d90d      	bls.n	19868 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1984c:	683b      	ldr	r3, [r7, #0]
   1984e:	785b      	ldrb	r3, [r3, #1]
   19850:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
   19854:	f1bc 0f00 	cmp.w	ip, #0
   19858:	d00e      	beq.n	19878 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
   1985a:	2304      	movs	r3, #4
   1985c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   19860:	4819      	ldr	r0, [pc, #100]	; (198c8 <nrfx_spi_xfer+0x114>)
   19862:	e7dc      	b.n	1981e <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
   19864:	7fdb      	ldrb	r3, [r3, #31]
   19866:	e7ed      	b.n	19844 <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
   19868:	68fb      	ldr	r3, [r7, #12]
   1986a:	2b01      	cmp	r3, #1
   1986c:	d9f2      	bls.n	19854 <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1986e:	2328      	movs	r3, #40	; 0x28
   19870:	fb03 6305 	mla	r3, r3, r5, r6
    p_reg->TXD = data;
   19874:	7fdb      	ldrb	r3, [r3, #31]
   19876:	e7eb      	b.n	19850 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   19878:	eb05 0185 	add.w	r1, r5, r5, lsl #2
   1987c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19880:	4667      	mov	r7, ip
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19882:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   19886:	2b00      	cmp	r3, #0
   19888:	d0fb      	beq.n	19882 <nrfx_spi_xfer+0xce>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1988a:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1988e:	4620      	mov	r0, r4
   19890:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19894:	f00c fbea 	bl	2606c <transfer_byte>
   19898:	2800      	cmp	r0, #0
   1989a:	d1f2      	bne.n	19882 <nrfx_spi_xfer+0xce>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1989c:	2328      	movs	r3, #40	; 0x28
   1989e:	fb03 6505 	mla	r5, r3, r5, r6
   198a2:	7fab      	ldrb	r3, [r5, #30]
   198a4:	2bff      	cmp	r3, #255	; 0xff
   198a6:	d0db      	beq.n	19860 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   198a8:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   198aa:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   198ae:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   198b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   198b6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   198ba:	e7d1      	b.n	19860 <nrfx_spi_xfer+0xac>
        return err_code;
   198bc:	4803      	ldr	r0, [pc, #12]	; (198cc <nrfx_spi_xfer+0x118>)
   198be:	e7ae      	b.n	1981e <nrfx_spi_xfer+0x6a>
   198c0:	20003e2c 	.word	0x20003e2c
   198c4:	0bad0003 	.word	0x0bad0003
   198c8:	0bad0000 	.word	0x0bad0000
   198cc:	0bad000b 	.word	0x0bad000b

000198d0 <nrfx_spi_1_irq_handler>:
   198d0:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   198d4:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
   198d6:	b510      	push	{r4, lr}
    if (!transfer_byte(p_spi, p_cb))
   198d8:	490e      	ldr	r1, [pc, #56]	; (19914 <nrfx_spi_1_irq_handler+0x44>)
   198da:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   198de:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   198e2:	f00c fbc3 	bl	2606c <transfer_byte>
   198e6:	b9a0      	cbnz	r0, 19912 <nrfx_spi_1_irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   198e8:	7f8b      	ldrb	r3, [r1, #30]
   198ea:	2bff      	cmp	r3, #255	; 0xff
   198ec:	d008      	beq.n	19900 <nrfx_spi_1_irq_handler+0x30>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   198ee:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
   198f0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   198f4:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
   198f8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   198fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
   19900:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   19902:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   19904:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
}
   19906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1990a:	e9d1 3100 	ldrd	r3, r1, [r1]
   1990e:	4802      	ldr	r0, [pc, #8]	; (19918 <nrfx_spi_1_irq_handler+0x48>)
   19910:	4718      	bx	r3
}
   19912:	bd10      	pop	{r4, pc}
   19914:	20003e2c 	.word	0x20003e2c
   19918:	20003e34 	.word	0x20003e34

0001991c <nrfx_twim_init>:

nrfx_err_t nrfx_twim_init(nrfx_twim_t const *        p_instance,
                          nrfx_twim_config_t const * p_config,
                          nrfx_twim_evt_handler_t    event_handler,
                          void *                     p_context)
{
   1991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(p_config->scl != p_config->sda);
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1991e:	7906      	ldrb	r6, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   19920:	4d1e      	ldr	r5, [pc, #120]	; (1999c <nrfx_twim_init+0x80>)
   19922:	f04f 0c34 	mov.w	ip, #52	; 0x34
   19926:	fb0c fc06 	mul.w	ip, ip, r6
   1992a:	eb05 040c 	add.w	r4, r5, ip
   1992e:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   19932:	bb8f      	cbnz	r7, 19998 <nrfx_twim_init+0x7c>
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler         = event_handler;
    p_cb->p_context       = p_context;
    p_cb->int_mask        = 0;
   19934:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   19936:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   1993a:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f

    /* To secure correct signal levels on the pins used by the TWI
       master when the system is in OFF mode, and when the TWI master is
       disabled, these pins must be configured in the GPIO peripheral.
    */
    TWIM_PIN_INIT(p_config->scl);
   1993e:	680f      	ldr	r7, [r1, #0]
    p_cb->p_context       = p_context;
   19940:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   19942:	7b4b      	ldrb	r3, [r1, #13]
   19944:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    *p_pin = pin_number & 0x1F;
   19948:	f007 031f 	and.w	r3, r7, #31
    p_cb->handler         = event_handler;
   1994c:	f845 200c 	str.w	r2, [r5, ip]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19950:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19954:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
   19958:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1995c:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    TWIM_PIN_INIT(p_config->sda);
   19960:	684c      	ldr	r4, [r1, #4]

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   19962:	6800      	ldr	r0, [r0, #0]
    *p_pin = pin_number & 0x1F;
   19964:	f004 031f 	and.w	r3, r4, #31
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   19968:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1996c:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
    nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
    nrf_twim_frequency_set(p_twim,
        (nrf_twim_frequency_t)p_config->frequency);
   19970:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   19972:	f8c0 7508 	str.w	r7, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   19976:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1997a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524

    if (p_cb->handler)
   1997e:	b11a      	cbz	r2, 19988 <nrfx_twim_init+0x6c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_twim),
            p_config->interrupt_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   19980:	f340 3007 	sbfx	r0, r0, #12, #8
   19984:	f7ea fd3c 	bl	4400 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19988:	2334      	movs	r3, #52	; 0x34
   1998a:	fb03 5506 	mla	r5, r3, r6, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1998e:	4804      	ldr	r0, [pc, #16]	; (199a0 <nrfx_twim_init+0x84>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   19990:	2301      	movs	r3, #1
   19992:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   19996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return err_code;
   19998:	4802      	ldr	r0, [pc, #8]	; (199a4 <nrfx_twim_init+0x88>)
   1999a:	e7fc      	b.n	19996 <nrfx_twim_init+0x7a>
   1999c:	20003e54 	.word	0x20003e54
   199a0:	0bad0000 	.word	0x0bad0000
   199a4:	0bad0005 	.word	0x0bad0005

000199a8 <nrfx_twim_enable>:
void nrfx_twim_enable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state == NRFX_DRV_STATE_INITIALIZED);

    nrf_twim_enable(p_instance->p_twim);
   199a8:	6802      	ldr	r2, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   199aa:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   199ac:	2106      	movs	r1, #6
   199ae:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500

    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   199b2:	4a04      	ldr	r2, [pc, #16]	; (199c4 <nrfx_twim_enable+0x1c>)
   199b4:	2134      	movs	r1, #52	; 0x34
   199b6:	fb01 2303 	mla	r3, r1, r3, r2
   199ba:	2202      	movs	r2, #2
   199bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance enabled: %d.", p_instance->drv_inst_idx);
}
   199c0:	4770      	bx	lr
   199c2:	bf00      	nop
   199c4:	20003e54 	.word	0x20003e54

000199c8 <nrfx_twim_disable>:

void nrfx_twim_disable(nrfx_twim_t const * p_instance)
{
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   199c8:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);

    NRF_TWIM_Type * p_twim = p_instance->p_twim;
    p_cb->int_mask = 0;
   199ca:	490b      	ldr	r1, [pc, #44]	; (199f8 <nrfx_twim_disable+0x30>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   199cc:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   199ce:	2034      	movs	r0, #52	; 0x34
   199d0:	fb00 1303 	mla	r3, r0, r3, r1
    p_reg->INTENCLR = mask;
   199d4:	4909      	ldr	r1, [pc, #36]	; (199fc <nrfx_twim_disable+0x34>)
   199d6:	2000      	movs	r0, #0
   199d8:	6098      	str	r0, [r3, #8]
   199da:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   199de:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
   199e2:	f421 51bc 	bic.w	r1, r1, #6016	; 0x1780
   199e6:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   199ea:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    nrf_twim_int_disable(p_twim, NRF_TWIM_ALL_INTS_MASK);
    nrf_twim_shorts_disable(p_twim, NRF_TWIM_ALL_SHORTS_MASK);
    nrf_twim_disable(p_twim);

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   199ee:	2201      	movs	r2, #1
   199f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NRFX_LOG_INFO("Instance disabled: %d.", p_instance->drv_inst_idx);
}
   199f4:	4770      	bx	lr
   199f6:	bf00      	nop
   199f8:	20003e54 	.word	0x20003e54
   199fc:	019c0202 	.word	0x019c0202

00019a00 <nrfx_twim_xfer>:


nrfx_err_t nrfx_twim_xfer(nrfx_twim_t           const * p_instance,
                          nrfx_twim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
   19a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   19a04:	4fb0      	ldr	r7, [pc, #704]	; (19cc8 <nrfx_twim_xfer+0x2c8>)
    NRFX_ASSERT(TWIM_LENGTH_VALIDATE(p_instance->drv_inst_idx,
                                     p_xfer_desc->primary_length,
                                     p_xfer_desc->secondary_length));

    nrfx_err_t err_code = NRFX_SUCCESS;
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   19a06:	f890 e004 	ldrb.w	lr, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   19a0a:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   19a0c:	2634      	movs	r6, #52	; 0x34
   19a0e:	fb06 760e 	mla	r6, r6, lr, r7
   19a12:	2300      	movs	r3, #0
   19a14:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   19a18:	68cb      	ldr	r3, [r1, #12]
   19a1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
{
   19a22:	460d      	mov	r5, r1
   19a24:	4694      	mov	ip, r2
    if (!nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   19a26:	d003      	beq.n	19a30 <nrfx_twim_xfer+0x30>
        return err_code;
   19a28:	4ea8      	ldr	r6, [pc, #672]	; (19ccc <nrfx_twim_xfer+0x2cc>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19a2a:	4630      	mov	r0, r6
   19a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    p_reg->INTENCLR = mask;
   19a30:	4ba7      	ldr	r3, [pc, #668]	; (19cd0 <nrfx_twim_xfer+0x2d0>)
   19a32:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    if (p_cb->busy)
   19a36:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   19a3a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   19a3e:	b123      	cbz	r3, 19a4a <nrfx_twim_xfer+0x4a>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19a40:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   19a42:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   19a46:	4ea3      	ldr	r6, [pc, #652]	; (19cd4 <nrfx_twim_xfer+0x2d4>)
   19a48:	e7ef      	b.n	19a2a <nrfx_twim_xfer+0x2a>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   19a4a:	f012 0f14 	tst.w	r2, #20
   19a4e:	bf0c      	ite	eq
   19a50:	2301      	moveq	r3, #1
   19a52:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   19a54:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   19a58:	4689      	mov	r9, r1
   19a5a:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   19a5e:	f106 080c 	add.w	r8, r6, #12
   19a62:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   19a66:	f8d9 3000 	ldr.w	r3, [r9]
   19a6a:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   19a6e:	f3cc 1300 	ubfx	r3, ip, #4, #1
   19a72:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   19a76:	f8c6 c020 	str.w	ip, [r6, #32]
}

NRF_STATIC_INLINE void nrf_twim_address_set(NRF_TWIM_Type * p_reg,
                                            uint8_t address)
{
    p_reg->ADDRESS = address;
   19a7a:	786b      	ldrb	r3, [r5, #1]
   19a7c:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19a80:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   19a84:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19a88:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   19a8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19a90:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   19a94:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   19a98:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   19a9c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   19aa0:	f01c 0301 	ands.w	r3, ip, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   19aa4:	bf18      	it	ne
   19aa6:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   19aa8:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   19aac:	f01c 0302 	ands.w	r3, ip, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   19ab0:	bf18      	it	ne
   19ab2:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   19ab4:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   19ab8:	782b      	ldrb	r3, [r5, #0]
   19aba:	2b03      	cmp	r3, #3
   19abc:	f200 80b2 	bhi.w	19c24 <nrfx_twim_xfer+0x224>
   19ac0:	e8df f003 	tbb	[pc, r3]
   19ac4:	02669d81 	.word	0x02669d81
   19ac8:	692a      	ldr	r2, [r5, #16]
   19aca:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   19ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   19ad2:	d1a9      	bne.n	19a28 <nrfx_twim_xfer+0x28>
    p_reg->SHORTS = mask;
   19ad4:	f44f 7380 	mov.w	r3, #256	; 0x100
   19ad8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19adc:	68e9      	ldr	r1, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19ade:	686b      	ldr	r3, [r5, #4]
   19ae0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19ae4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19ae8:	2300      	movs	r3, #0
   19aea:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   19aee:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19af2:	2101      	movs	r1, #1
   19af4:	6221      	str	r1, [r4, #32]
   19af6:	60a1      	str	r1, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19af8:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   19afc:	2900      	cmp	r1, #0
   19afe:	d0fb      	beq.n	19af8 <nrfx_twim_xfer+0xf8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b00:	f8c4 3150 	str.w	r3, [r4, #336]	; 0x150
   19b04:	f8d4 3150 	ldr.w	r3, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   19b08:	68ab      	ldr	r3, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19b0a:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19b0e:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   19b12:	2334      	movs	r3, #52	; 0x34
   19b14:	fb03 730e 	mla	r3, r3, lr, r7
   19b18:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   19b1c:	609a      	str	r2, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   19b1e:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   19b20:	4e6d      	ldr	r6, [pc, #436]	; (19cd8 <nrfx_twim_xfer+0x2d8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   19b22:	f01c 0f08 	tst.w	ip, #8
   19b26:	d104      	bne.n	19b32 <nrfx_twim_xfer+0x132>
   19b28:	782a      	ldrb	r2, [r5, #0]
   19b2a:	2a03      	cmp	r2, #3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b2c:	bf1c      	itt	ne
   19b2e:	2201      	movne	r2, #1
   19b30:	50e2      	strne	r2, [r4, r3]
    if (p_cb->handler)
   19b32:	2334      	movs	r3, #52	; 0x34
   19b34:	fb03 f30e 	mul.w	r3, r3, lr
   19b38:	18fa      	adds	r2, r7, r3
   19b3a:	58fb      	ldr	r3, [r7, r3]
   19b3c:	2b00      	cmp	r3, #0
   19b3e:	d174      	bne.n	19c2a <nrfx_twim_xfer+0x22a>
                transmission_finished = true;
   19b40:	2501      	movs	r5, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b42:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
   19b46:	f8d4 1104 	ldr.w	r1, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19b4a:	2900      	cmp	r1, #0
   19b4c:	f040 8087 	bne.w	19c5e <nrfx_twim_xfer+0x25e>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   19b50:	3a00      	subs	r2, #0
   19b52:	bf18      	it	ne
   19b54:	2201      	movne	r2, #1
   19b56:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   19b5a:	2900      	cmp	r1, #0
   19b5c:	f000 8085 	beq.w	19c6a <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b60:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   19b64:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19b68:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   19b6c:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   19b70:	b110      	cbz	r0, 19b78 <nrfx_twim_xfer+0x178>
   19b72:	f411 7f00 	tst.w	r1, #512	; 0x200
   19b76:	d104      	bne.n	19b82 <nrfx_twim_xfer+0x182>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19b78:	6225      	str	r5, [r4, #32]
   19b7a:	6165      	str	r5, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   19b7c:	2800      	cmp	r0, #0
   19b7e:	d0e0      	beq.n	19b42 <nrfx_twim_xfer+0x142>
                    transmission_finished = false;
   19b80:	2200      	movs	r2, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   19b82:	05c9      	lsls	r1, r1, #23
   19b84:	d571      	bpl.n	19c6a <nrfx_twim_xfer+0x26a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19b86:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   19b8a:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
        } while (!transmission_finished);
   19b8e:	e7d8      	b.n	19b42 <nrfx_twim_xfer+0x142>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19b90:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19b92:	68ea      	ldr	r2, [r5, #12]
   19b94:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19b98:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   19b9c:	692b      	ldr	r3, [r5, #16]
   19b9e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   19ba2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
   19ba6:	f47f af3f 	bne.w	19a28 <nrfx_twim_xfer+0x28>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   19baa:	68aa      	ldr	r2, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19bac:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   19bb0:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   19bb4:	f8c4 2538 	str.w	r2, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   19bb8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19bbc:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19bbe:	fb03 730e 	mla	r3, r3, lr, r7
   19bc2:	2202      	movs	r2, #2
   19bc4:	e012      	b.n	19bec <nrfx_twim_xfer+0x1ec>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19bc6:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19bc8:	68ea      	ldr	r2, [r5, #12]
   19bca:	f8c4 2544 	str.w	r2, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   19bce:	f01c 0f20 	tst.w	ip, #32
    p_reg->TXD.MAXCNT = length;
   19bd2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   19bd6:	f04f 0334 	mov.w	r3, #52	; 0x34
   19bda:	d00b      	beq.n	19bf4 <nrfx_twim_xfer+0x1f4>
    p_reg->SHORTS = mask;
   19bdc:	f44f 7280 	mov.w	r2, #256	; 0x100
   19be0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   19be4:	fb03 730e 	mla	r3, r3, lr, r7
   19be8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19bec:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19bee:	2301      	movs	r3, #1
   19bf0:	6223      	str	r3, [r4, #32]
   19bf2:	e794      	b.n	19b1e <nrfx_twim_xfer+0x11e>
    p_reg->SHORTS = mask;
   19bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
   19bf8:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
   19bfc:	e7df      	b.n	19bbe <nrfx_twim_xfer+0x1be>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   19bfe:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19c00:	68ea      	ldr	r2, [r5, #12]
   19c02:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19c06:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   19c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19c0e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19c12:	2334      	movs	r3, #52	; 0x34
   19c14:	fb03 730e 	mla	r3, r3, lr, r7
   19c18:	2202      	movs	r2, #2
   19c1a:	609a      	str	r2, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19c1c:	2301      	movs	r3, #1
   19c1e:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   19c20:	2300      	movs	r3, #0
   19c22:	e77d      	b.n	19b20 <nrfx_twim_xfer+0x120>
    switch (p_xfer_desc->type)
   19c24:	4e2d      	ldr	r6, [pc, #180]	; (19cdc <nrfx_twim_xfer+0x2dc>)
   19c26:	2308      	movs	r3, #8
   19c28:	e77b      	b.n	19b22 <nrfx_twim_xfer+0x122>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   19c2a:	f01c 0f04 	tst.w	ip, #4
            p_cb->int_mask = 0;
   19c2e:	bf1c      	itt	ne
   19c30:	2300      	movne	r3, #0
   19c32:	6093      	strne	r3, [r2, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   19c34:	f01c 0f40 	tst.w	ip, #64	; 0x40
   19c38:	d106      	bne.n	19c48 <nrfx_twim_xfer+0x248>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   19c3a:	2334      	movs	r3, #52	; 0x34
   19c3c:	fb03 730e 	mla	r3, r3, lr, r7
   19c40:	689a      	ldr	r2, [r3, #8]
   19c42:	f042 0202 	orr.w	r2, r2, #2
   19c46:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   19c48:	2334      	movs	r3, #52	; 0x34
   19c4a:	fb03 770e 	mla	r7, r3, lr, r7
   19c4e:	68bb      	ldr	r3, [r7, #8]
   19c50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   19c54:	60bb      	str	r3, [r7, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19c56:	68bb      	ldr	r3, [r7, #8]
    p_reg->INTENSET = mask;
   19c58:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   19c5c:	e6e5      	b.n	19a2a <nrfx_twim_xfer+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19c5e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   19c62:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
                transmission_finished = true;
   19c66:	2201      	movs	r2, #1
   19c68:	e775      	b.n	19b56 <nrfx_twim_xfer+0x156>
        } while (!transmission_finished);
   19c6a:	2a00      	cmp	r2, #0
   19c6c:	f43f af69 	beq.w	19b42 <nrfx_twim_xfer+0x142>
        p_cb->busy = false;
   19c70:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   19c72:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   19c76:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   19c7a:	fb01 720e 	mla	r2, r1, lr, r7
   19c7e:	2000      	movs	r0, #0
   19c80:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   19c84:	b18b      	cbz	r3, 19caa <nrfx_twim_xfer+0x2aa>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   19c86:	4a16      	ldr	r2, [pc, #88]	; (19ce0 <nrfx_twim_xfer+0x2e0>)
   19c88:	4e16      	ldr	r6, [pc, #88]	; (19ce4 <nrfx_twim_xfer+0x2e4>)
   19c8a:	f013 0f01 	tst.w	r3, #1
   19c8e:	bf18      	it	ne
   19c90:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   19c92:	f013 0f02 	tst.w	r3, #2
   19c96:	f102 0201 	add.w	r2, r2, #1
   19c9a:	bf18      	it	ne
   19c9c:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   19c9e:	f013 0f04 	tst.w	r3, #4
   19ca2:	4b11      	ldr	r3, [pc, #68]	; (19ce8 <nrfx_twim_xfer+0x2e8>)
   19ca4:	bf18      	it	ne
   19ca6:	461e      	movne	r6, r3
   19ca8:	e6bf      	b.n	19a2a <nrfx_twim_xfer+0x2a>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   19caa:	f01c 0f40 	tst.w	ip, #64	; 0x40
   19cae:	f47f aebc 	bne.w	19a2a <nrfx_twim_xfer+0x2a>
                !xfer_completeness_check(p_twim, p_cb))
   19cb2:	fb0e 7101 	mla	r1, lr, r1, r7
   19cb6:	4620      	mov	r0, r4
   19cb8:	f00c fa0b 	bl	260d2 <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   19cbc:	4b09      	ldr	r3, [pc, #36]	; (19ce4 <nrfx_twim_xfer+0x2e4>)
   19cbe:	2800      	cmp	r0, #0
   19cc0:	bf08      	it	eq
   19cc2:	461e      	moveq	r6, r3
   19cc4:	e6b1      	b.n	19a2a <nrfx_twim_xfer+0x2a>
   19cc6:	bf00      	nop
   19cc8:	20003e54 	.word	0x20003e54
   19ccc:	0bad000a 	.word	0x0bad000a
   19cd0:	019c0202 	.word	0x019c0202
   19cd4:	0bad000b 	.word	0x0bad000b
   19cd8:	0bad0000 	.word	0x0bad0000
   19cdc:	0bad0004 	.word	0x0bad0004
   19ce0:	0bae0000 	.word	0x0bae0000
   19ce4:	0bad0001 	.word	0x0bad0001
   19ce8:	0bae0002 	.word	0x0bae0002

00019cec <nrfx_twim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
   19cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19cee:	4b5b      	ldr	r3, [pc, #364]	; (19e5c <nrfx_twim_0_irq_handler+0x170>)
   19cf0:	4c5b      	ldr	r4, [pc, #364]	; (19e60 <nrfx_twim_0_irq_handler+0x174>)
   19cf2:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   19cf6:	b087      	sub	sp, #28
   19cf8:	461d      	mov	r5, r3
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   19cfa:	b1fa      	cbz	r2, 19d3c <nrfx_twim_0_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19cfc:	2200      	movs	r2, #0
   19cfe:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
   19d02:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d06:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19d0a:	b9ba      	cbnz	r2, 19d3c <nrfx_twim_0_irq_handler+0x50>
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   19d0c:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   19d0e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   19d12:	2202      	movs	r2, #2
   19d14:	60a2      	str	r2, [r4, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19d16:	68a2      	ldr	r2, [r4, #8]
    p_reg->INTENSET = mask;
   19d18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d1c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   19d20:	b11a      	cbz	r2, 19d2a <nrfx_twim_0_irq_handler+0x3e>
    return p_reg->SHORTS;
   19d22:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   19d26:	059e      	lsls	r6, r3, #22
   19d28:	d403      	bmi.n	19d32 <nrfx_twim_0_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19d2a:	4b4c      	ldr	r3, [pc, #304]	; (19e5c <nrfx_twim_0_irq_handler+0x170>)
   19d2c:	2201      	movs	r2, #1
   19d2e:	621a      	str	r2, [r3, #32]
   19d30:	615a      	str	r2, [r3, #20]
            p_cb->error = true;
   19d32:	2301      	movs	r3, #1
   19d34:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
}
   19d38:	b007      	add	sp, #28
   19d3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19d3c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   19d40:	2b00      	cmp	r3, #0
   19d42:	d053      	beq.n	19dec <nrfx_twim_0_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19d44:	2300      	movs	r3, #0
   19d46:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
   19d4a:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   19d4e:	6a23      	ldr	r3, [r4, #32]
   19d50:	065d      	lsls	r5, r3, #25
   19d52:	d40a      	bmi.n	19d6a <nrfx_twim_0_irq_handler+0x7e>
   19d54:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19d58:	b93b      	cbnz	r3, 19d6a <nrfx_twim_0_irq_handler+0x7e>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   19d5a:	4941      	ldr	r1, [pc, #260]	; (19e60 <nrfx_twim_0_irq_handler+0x174>)
   19d5c:	483f      	ldr	r0, [pc, #252]	; (19e5c <nrfx_twim_0_irq_handler+0x170>)
   19d5e:	f00c f9b8 	bl	260d2 <xfer_completeness_check>
   19d62:	f080 0001 	eor.w	r0, r0, #1
   19d66:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   19d6a:	6a23      	ldr	r3, [r4, #32]
   19d6c:	f013 0704 	ands.w	r7, r3, #4
   19d70:	d121      	bne.n	19db6 <nrfx_twim_0_irq_handler+0xca>
            event.xfer_desc = p_cb->xfer_desc;
   19d72:	4e3c      	ldr	r6, [pc, #240]	; (19e64 <nrfx_twim_0_irq_handler+0x178>)
   19d74:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
   19d78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   19d7a:	ad01      	add	r5, sp, #4
   19d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   19d7e:	6833      	ldr	r3, [r6, #0]
   19d80:	602b      	str	r3, [r5, #0]
   19d82:	4b36      	ldr	r3, [pc, #216]	; (19e5c <nrfx_twim_0_irq_handler+0x170>)
   19d84:	f8c3 7160 	str.w	r7, [r3, #352]	; 0x160
   19d88:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
   19d8c:	f8c3 715c 	str.w	r7, [r3, #348]	; 0x15c
   19d90:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   19d94:	f1bc 0f00 	cmp.w	ip, #0
   19d98:	d002      	beq.n	19da0 <nrfx_twim_0_irq_handler+0xb4>
   19d9a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   19d9e:	b152      	cbz	r2, 19db6 <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   19da0:	2200      	movs	r2, #0
   19da2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                p_cb->int_mask = 0;
   19da6:	60a2      	str	r2, [r4, #8]
    p_reg->INTENCLR = mask;
   19da8:	4a2f      	ldr	r2, [pc, #188]	; (19e68 <nrfx_twim_0_irq_handler+0x17c>)
   19daa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19dae:	4b2f      	ldr	r3, [pc, #188]	; (19e6c <nrfx_twim_0_irq_handler+0x180>)
   19db0:	2208      	movs	r2, #8
   19db2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    uint32_t error_source = p_reg->ERRORSRC;
   19db6:	4a29      	ldr	r2, [pc, #164]	; (19e5c <nrfx_twim_0_irq_handler+0x170>)
   19db8:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   19dbc:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   19dc0:	0798      	lsls	r0, r3, #30
   19dc2:	d53c      	bpl.n	19e3e <nrfx_twim_0_irq_handler+0x152>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   19dc4:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   19dc6:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   19dca:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   19dce:	b90b      	cbnz	r3, 19dd4 <nrfx_twim_0_irq_handler+0xe8>
        p_cb->busy = false;
   19dd0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   19dd4:	6a23      	ldr	r3, [r4, #32]
   19dd6:	075b      	lsls	r3, r3, #29
   19dd8:	d503      	bpl.n	19de2 <nrfx_twim_0_irq_handler+0xf6>
   19dda:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19dde:	2b00      	cmp	r3, #0
   19de0:	d0aa      	beq.n	19d38 <nrfx_twim_0_irq_handler+0x4c>
        p_cb->handler(&event, p_cb->p_context);
   19de2:	e9d4 3100 	ldrd	r3, r1, [r4]
   19de6:	4668      	mov	r0, sp
   19de8:	4798      	blx	r3
}
   19dea:	e7a5      	b.n	19d38 <nrfx_twim_0_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19dec:	f8c5 3148 	str.w	r3, [r5, #328]	; 0x148
   19df0:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   19df4:	7b23      	ldrb	r3, [r4, #12]
   19df6:	b983      	cbnz	r3, 19e1a <nrfx_twim_0_irq_handler+0x12e>
            event.xfer_desc = p_cb->xfer_desc;
   19df8:	4f1a      	ldr	r7, [pc, #104]	; (19e64 <nrfx_twim_0_irq_handler+0x178>)
   19dfa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   19dfc:	ae01      	add	r6, sp, #4
   19dfe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   19e00:	683b      	ldr	r3, [r7, #0]
   19e02:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   19e04:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   19e08:	2b00      	cmp	r3, #0
   19e0a:	d1d4      	bne.n	19db6 <nrfx_twim_0_irq_handler+0xca>
    p_reg->SHORTS = mask;
   19e0c:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
                p_cb->int_mask = 0;
   19e10:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   19e12:	4b15      	ldr	r3, [pc, #84]	; (19e68 <nrfx_twim_0_irq_handler+0x17c>)
   19e14:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   19e18:	e7c9      	b.n	19dae <nrfx_twim_0_irq_handler+0xc2>
    p_reg->SHORTS = mask;
   19e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
   19e1e:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   19e22:	f240 2302 	movw	r3, #514	; 0x202
   19e26:	60a3      	str	r3, [r4, #8]
    p_reg->INTENCLR = mask;
   19e28:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   19e2c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   19e30:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
   19e32:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19e36:	2301      	movs	r3, #1
   19e38:	60ab      	str	r3, [r5, #8]
   19e3a:	622b      	str	r3, [r5, #32]
            return;
   19e3c:	e77c      	b.n	19d38 <nrfx_twim_0_irq_handler+0x4c>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   19e3e:	0759      	lsls	r1, r3, #29
   19e40:	d501      	bpl.n	19e46 <nrfx_twim_0_irq_handler+0x15a>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   19e42:	2302      	movs	r3, #2
   19e44:	e7bf      	b.n	19dc6 <nrfx_twim_0_irq_handler+0xda>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   19e46:	07da      	lsls	r2, r3, #31
   19e48:	d501      	bpl.n	19e4e <nrfx_twim_0_irq_handler+0x162>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   19e4a:	2303      	movs	r3, #3
   19e4c:	e7bb      	b.n	19dc6 <nrfx_twim_0_irq_handler+0xda>
    else if (p_cb->error)
   19e4e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
   19e52:	2b00      	cmp	r3, #0
   19e54:	d0b7      	beq.n	19dc6 <nrfx_twim_0_irq_handler+0xda>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   19e56:	2304      	movs	r3, #4
   19e58:	e7b5      	b.n	19dc6 <nrfx_twim_0_irq_handler+0xda>
   19e5a:	bf00      	nop
   19e5c:	40003000 	.word	0x40003000
   19e60:	20003e54 	.word	0x20003e54
   19e64:	20003e60 	.word	0x20003e60
   19e68:	019c0202 	.word	0x019c0202
   19e6c:	e000e100 	.word	0xe000e100

00019e70 <lv_disp_get_scr_act>:
 * @param disp pointer to display which active screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the active screen object (loaded by 'lv_scr_load()')
 */
lv_obj_t * lv_disp_get_scr_act(lv_disp_t * disp)
{
   19e70:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19e72:	4604      	mov	r4, r0
   19e74:	b970      	cbnz	r0, 19e94 <lv_disp_get_scr_act+0x24>
   19e76:	f003 fa6d 	bl	1d354 <lv_disp_get_default>
    if(!disp) {
   19e7a:	4604      	mov	r4, r0
   19e7c:	b950      	cbnz	r0, 19e94 <lv_disp_get_scr_act+0x24>
        LV_LOG_WARN("no display registered to get its active screen");
   19e7e:	4b06      	ldr	r3, [pc, #24]	; (19e98 <lv_disp_get_scr_act+0x28>)
   19e80:	9300      	str	r3, [sp, #0]
   19e82:	4906      	ldr	r1, [pc, #24]	; (19e9c <lv_disp_get_scr_act+0x2c>)
   19e84:	4b06      	ldr	r3, [pc, #24]	; (19ea0 <lv_disp_get_scr_act+0x30>)
   19e86:	2235      	movs	r2, #53	; 0x35
   19e88:	2002      	movs	r0, #2
   19e8a:	f003 fb39 	bl	1d500 <_lv_log_add>
        return NULL;
    }

    return disp->act_scr;
}
   19e8e:	4620      	mov	r0, r4
   19e90:	b002      	add	sp, #8
   19e92:	bd10      	pop	{r4, pc}
    return disp->act_scr;
   19e94:	6c24      	ldr	r4, [r4, #64]	; 0x40
   19e96:	e7fa      	b.n	19e8e <lv_disp_get_scr_act+0x1e>
   19e98:	0002faf5 	.word	0x0002faf5
   19e9c:	0002fabe 	.word	0x0002fabe
   19ea0:	0002fbc8 	.word	0x0002fbc8

00019ea4 <lv_disp_get_scr_prev>:
 * @param disp pointer to display which previous screen should be get. (NULL to use the default
 * screen)
 * @return pointer to the previous screen object or NULL if not used now
 */
lv_obj_t * lv_disp_get_scr_prev(lv_disp_t * disp)
{
   19ea4:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19ea6:	4604      	mov	r4, r0
   19ea8:	b970      	cbnz	r0, 19ec8 <lv_disp_get_scr_prev+0x24>
   19eaa:	f003 fa53 	bl	1d354 <lv_disp_get_default>
    if(!disp) {
   19eae:	4604      	mov	r4, r0
   19eb0:	b950      	cbnz	r0, 19ec8 <lv_disp_get_scr_prev+0x24>
        LV_LOG_WARN("no display registered to get its previous screen");
   19eb2:	4b06      	ldr	r3, [pc, #24]	; (19ecc <lv_disp_get_scr_prev+0x28>)
   19eb4:	9300      	str	r3, [sp, #0]
   19eb6:	4906      	ldr	r1, [pc, #24]	; (19ed0 <lv_disp_get_scr_prev+0x2c>)
   19eb8:	4b06      	ldr	r3, [pc, #24]	; (19ed4 <lv_disp_get_scr_prev+0x30>)
   19eba:	2246      	movs	r2, #70	; 0x46
   19ebc:	2002      	movs	r0, #2
   19ebe:	f003 fb1f 	bl	1d500 <_lv_log_add>
        return NULL;
    }

    return disp->prev_scr;
}
   19ec2:	4620      	mov	r0, r4
   19ec4:	b002      	add	sp, #8
   19ec6:	bd10      	pop	{r4, pc}
    return disp->prev_scr;
   19ec8:	6c64      	ldr	r4, [r4, #68]	; 0x44
   19eca:	e7fa      	b.n	19ec2 <lv_disp_get_scr_prev+0x1e>
   19ecc:	0002fb24 	.word	0x0002fb24
   19ed0:	0002fabe 	.word	0x0002fabe
   19ed4:	0002fbdc 	.word	0x0002fbdc

00019ed8 <lv_disp_get_layer_top>:
 * Return with the top layer. (Same on every screen and it is above the normal screen layer)
 * @param disp pointer to display which top layer should be get. (NULL to use the default screen)
 * @return pointer to the top layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_top(lv_disp_t * disp)
{
   19ed8:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19eda:	4604      	mov	r4, r0
   19edc:	b970      	cbnz	r0, 19efc <lv_disp_get_layer_top+0x24>
   19ede:	f003 fa39 	bl	1d354 <lv_disp_get_default>
    if(!disp) {
   19ee2:	4604      	mov	r4, r0
   19ee4:	b950      	cbnz	r0, 19efc <lv_disp_get_layer_top+0x24>
        LV_LOG_WARN("lv_layer_top: no display registered to get its top layer");
   19ee6:	4b06      	ldr	r3, [pc, #24]	; (19f00 <lv_disp_get_layer_top+0x28>)
   19ee8:	9300      	str	r3, [sp, #0]
   19eea:	4906      	ldr	r1, [pc, #24]	; (19f04 <lv_disp_get_layer_top+0x2c>)
   19eec:	4b06      	ldr	r3, [pc, #24]	; (19f08 <lv_disp_get_layer_top+0x30>)
   19eee:	2263      	movs	r2, #99	; 0x63
   19ef0:	2002      	movs	r0, #2
   19ef2:	f003 fb05 	bl	1d500 <_lv_log_add>
        return NULL;
    }

    return disp->top_layer;
}
   19ef6:	4620      	mov	r0, r4
   19ef8:	b002      	add	sp, #8
   19efa:	bd10      	pop	{r4, pc}
    return disp->top_layer;
   19efc:	6ca4      	ldr	r4, [r4, #72]	; 0x48
   19efe:	e7fa      	b.n	19ef6 <lv_disp_get_layer_top+0x1e>
   19f00:	0002fb55 	.word	0x0002fb55
   19f04:	0002fabe 	.word	0x0002fabe
   19f08:	0002fbf1 	.word	0x0002fbf1

00019f0c <lv_disp_get_layer_sys>:
 * layer)
 * @param disp pointer to display which sys. layer  should be get. (NULL to use the default screen)
 * @return pointer to the sys layer object  (transparent screen sized lv_obj)
 */
lv_obj_t * lv_disp_get_layer_sys(lv_disp_t * disp)
{
   19f0c:	b513      	push	{r0, r1, r4, lr}
    if(!disp) disp = lv_disp_get_default();
   19f0e:	4604      	mov	r4, r0
   19f10:	b970      	cbnz	r0, 19f30 <lv_disp_get_layer_sys+0x24>
   19f12:	f003 fa1f 	bl	1d354 <lv_disp_get_default>
    if(!disp) {
   19f16:	4604      	mov	r4, r0
   19f18:	b950      	cbnz	r0, 19f30 <lv_disp_get_layer_sys+0x24>
        LV_LOG_WARN("lv_layer_sys: no display registered to get its sys. layer");
   19f1a:	4b06      	ldr	r3, [pc, #24]	; (19f34 <lv_disp_get_layer_sys+0x28>)
   19f1c:	9300      	str	r3, [sp, #0]
   19f1e:	4906      	ldr	r1, [pc, #24]	; (19f38 <lv_disp_get_layer_sys+0x2c>)
   19f20:	4b06      	ldr	r3, [pc, #24]	; (19f3c <lv_disp_get_layer_sys+0x30>)
   19f22:	2274      	movs	r2, #116	; 0x74
   19f24:	2002      	movs	r0, #2
   19f26:	f003 faeb 	bl	1d500 <_lv_log_add>
        return NULL;
    }

    return disp->sys_layer;
}
   19f2a:	4620      	mov	r0, r4
   19f2c:	b002      	add	sp, #8
   19f2e:	bd10      	pop	{r4, pc}
    return disp->sys_layer;
   19f30:	6ce4      	ldr	r4, [r4, #76]	; 0x4c
   19f32:	e7fa      	b.n	19f2a <lv_disp_get_layer_sys+0x1e>
   19f34:	0002fb8e 	.word	0x0002fb8e
   19f38:	0002fabe 	.word	0x0002fabe
   19f3c:	0002fc07 	.word	0x0002fc07

00019f40 <lv_indev_reset.part.0>:
/**
 * Reset one or all input devices
 * @param indev pointer to an input device to reset or NULL to reset all of them
 * @param obj pointer to an object which triggers the reset.
 */
void lv_indev_reset(lv_indev_t * indev, lv_obj_t * obj)
   19f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19f42:	4604      	mov	r4, r0
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
            indev->proc.types.pointer.last_pressed = NULL;
        }
    }
    else {
        lv_indev_t * i = lv_indev_get_next(NULL);
   19f44:	2000      	movs	r0, #0
   19f46:	f003 fabf 	bl	1d4c8 <lv_indev_get_next>
        while(i) {
            i->proc.reset_query = 1;
            if(indev_act == i) indev_obj_act = NULL;
   19f4a:	4e0b      	ldr	r6, [pc, #44]	; (19f78 <lv_indev_reset.part.0+0x38>)
   19f4c:	4f0b      	ldr	r7, [pc, #44]	; (19f7c <lv_indev_reset.part.0+0x3c>)
   19f4e:	2500      	movs	r5, #0
        while(i) {
   19f50:	b900      	cbnz	r0, 19f54 <lv_indev_reset.part.0+0x14>
                i->proc.types.pointer.last_pressed = NULL;
            }
            i = lv_indev_get_next(i);
        }
    }
}
   19f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            i->proc.reset_query = 1;
   19f54:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
   19f58:	f043 0302 	orr.w	r3, r3, #2
   19f5c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
            if(indev_act == i) indev_obj_act = NULL;
   19f60:	6833      	ldr	r3, [r6, #0]
   19f62:	4298      	cmp	r0, r3
   19f64:	bf08      	it	eq
   19f66:	603d      	streq	r5, [r7, #0]
            if(obj == NULL || i->proc.types.pointer.last_pressed == obj) {
   19f68:	b114      	cbz	r4, 19f70 <lv_indev_reset.part.0+0x30>
   19f6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   19f6c:	429c      	cmp	r4, r3
   19f6e:	d100      	bne.n	19f72 <lv_indev_reset.part.0+0x32>
                i->proc.types.pointer.last_pressed = NULL;
   19f70:	6405      	str	r5, [r0, #64]	; 0x40
            i = lv_indev_get_next(i);
   19f72:	f003 faa9 	bl	1d4c8 <lv_indev_get_next>
   19f76:	e7eb      	b.n	19f50 <lv_indev_reset.part.0+0x10>
   19f78:	20003e88 	.word	0x20003e88
   19f7c:	20003e8c 	.word	0x20003e8c

00019f80 <lv_indev_get_act>:
}
   19f80:	4b01      	ldr	r3, [pc, #4]	; (19f88 <lv_indev_get_act+0x8>)
   19f82:	6818      	ldr	r0, [r3, #0]
   19f84:	4770      	bx	lr
   19f86:	bf00      	nop
   19f88:	20003e88 	.word	0x20003e88

00019f8c <lv_indev_reset>:
{
   19f8c:	4603      	mov	r3, r0
   19f8e:	4608      	mov	r0, r1
    if(indev) {
   19f90:	b19b      	cbz	r3, 19fba <lv_indev_reset+0x2e>
        indev->proc.reset_query = 1;
   19f92:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   19f96:	f042 0202 	orr.w	r2, r2, #2
   19f9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        if(indev_act == indev) indev_obj_act = NULL;
   19f9e:	4a08      	ldr	r2, [pc, #32]	; (19fc0 <lv_indev_reset+0x34>)
   19fa0:	6812      	ldr	r2, [r2, #0]
   19fa2:	429a      	cmp	r2, r3
   19fa4:	bf02      	ittt	eq
   19fa6:	4a07      	ldreq	r2, [pc, #28]	; (19fc4 <lv_indev_reset+0x38>)
   19fa8:	2100      	moveq	r1, #0
   19faa:	6011      	streq	r1, [r2, #0]
        if(obj == NULL || indev->proc.types.pointer.last_pressed == obj) {
   19fac:	b110      	cbz	r0, 19fb4 <lv_indev_reset+0x28>
   19fae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   19fb0:	4282      	cmp	r2, r0
   19fb2:	d104      	bne.n	19fbe <lv_indev_reset+0x32>
            indev->proc.types.pointer.last_pressed = NULL;
   19fb4:	2200      	movs	r2, #0
   19fb6:	641a      	str	r2, [r3, #64]	; 0x40
   19fb8:	4770      	bx	lr
   19fba:	f7ff bfc1 	b.w	19f40 <lv_indev_reset.part.0>
}
   19fbe:	4770      	bx	lr
   19fc0:	20003e88 	.word	0x20003e88
   19fc4:	20003e8c 	.word	0x20003e8c

00019fc8 <style_prop_is_cacheble>:
}

static bool style_prop_is_cacheble(lv_style_property_t prop)
{

    switch(prop) {
   19fc8:	2872      	cmp	r0, #114	; 0x72
   19fca:	d867      	bhi.n	1a09c <style_prop_is_cacheble+0xd4>
   19fcc:	2853      	cmp	r0, #83	; 0x53
   19fce:	d816      	bhi.n	19ffe <style_prop_is_cacheble+0x36>
   19fd0:	2833      	cmp	r0, #51	; 0x33
   19fd2:	d85b      	bhi.n	1a08c <style_prop_is_cacheble+0xc4>
   19fd4:	281f      	cmp	r0, #31
   19fd6:	d81c      	bhi.n	1a012 <style_prop_is_cacheble+0x4a>
   19fd8:	3801      	subs	r0, #1
   19fda:	b283      	uxth	r3, r0
   19fdc:	2b17      	cmp	r3, #23
   19fde:	d920      	bls.n	1a022 <style_prop_is_cacheble+0x5a>
   19fe0:	2000      	movs	r0, #0
   19fe2:	4770      	bx	lr
   19fe4:	f500 40ff 	add.w	r0, r0, #32640	; 0x7f80
   19fe8:	2301      	movs	r3, #1
   19fea:	b280      	uxth	r0, r0
   19fec:	fa03 f000 	lsl.w	r0, r3, r0
   19ff0:	f244 030b 	movw	r3, #16395	; 0x400b
   19ff4:	4218      	tst	r0, r3
        case LV_STYLE_OUTLINE_BLEND_MODE:
        case LV_STYLE_PATTERN_BLEND_MODE:
        case LV_STYLE_SHADOW_BLEND_MODE:
        case LV_STYLE_TEXT_BLEND_MODE:
        case LV_STYLE_VALUE_BLEND_MODE:
            return true;
   19ff6:	bf14      	ite	ne
   19ff8:	2001      	movne	r0, #1
   19ffa:	2000      	moveq	r0, #0
   19ffc:	4770      	bx	lr
   19ffe:	3854      	subs	r0, #84	; 0x54
   1a000:	b280      	uxth	r0, r0
   1a002:	2301      	movs	r3, #1
   1a004:	4083      	lsls	r3, r0
   1a006:	4835      	ldr	r0, [pc, #212]	; (1a0dc <style_prop_is_cacheble+0x114>)
   1a008:	4018      	ands	r0, r3
   1a00a:	3800      	subs	r0, #0
   1a00c:	bf18      	it	ne
   1a00e:	2001      	movne	r0, #1
   1a010:	4770      	bx	lr
   1a012:	3820      	subs	r0, #32
   1a014:	2301      	movs	r3, #1
   1a016:	b280      	uxth	r0, r0
   1a018:	fa03 f000 	lsl.w	r0, r3, r0
   1a01c:	f503 2371 	add.w	r3, r3, #987136	; 0xf1000
   1a020:	e7e8      	b.n	19ff4 <style_prop_is_cacheble+0x2c>
   1a022:	2817      	cmp	r0, #23
   1a024:	d8dc      	bhi.n	19fe0 <style_prop_is_cacheble+0x18>
   1a026:	a301      	add	r3, pc, #4	; (adr r3, 1a02c <style_prop_is_cacheble+0x64>)
   1a028:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   1a02c:	0001a0d7 	.word	0x0001a0d7
   1a030:	0001a0d7 	.word	0x0001a0d7
   1a034:	00019fe1 	.word	0x00019fe1
   1a038:	0001a0d7 	.word	0x0001a0d7
   1a03c:	0001a0d7 	.word	0x0001a0d7
   1a040:	0001a0d7 	.word	0x0001a0d7
   1a044:	0001a0d7 	.word	0x0001a0d7
   1a048:	00019fe1 	.word	0x00019fe1
   1a04c:	00019fe1 	.word	0x00019fe1
   1a050:	00019fe1 	.word	0x00019fe1
   1a054:	00019fe1 	.word	0x00019fe1
   1a058:	00019fe1 	.word	0x00019fe1
   1a05c:	00019fe1 	.word	0x00019fe1
   1a060:	00019fe1 	.word	0x00019fe1
   1a064:	00019fe1 	.word	0x00019fe1
   1a068:	0001a0d7 	.word	0x0001a0d7
   1a06c:	0001a0d7 	.word	0x0001a0d7
   1a070:	0001a0d7 	.word	0x0001a0d7
   1a074:	0001a0d7 	.word	0x0001a0d7
   1a078:	00019fe1 	.word	0x00019fe1
   1a07c:	0001a0d7 	.word	0x0001a0d7
   1a080:	0001a0d7 	.word	0x0001a0d7
   1a084:	0001a0d7 	.word	0x0001a0d7
   1a088:	0001a0d7 	.word	0x0001a0d7
    switch(prop) {
   1a08c:	3840      	subs	r0, #64	; 0x40
   1a08e:	b280      	uxth	r0, r0
   1a090:	2810      	cmp	r0, #16
   1a092:	d8a5      	bhi.n	19fe0 <style_prop_is_cacheble+0x18>
   1a094:	2301      	movs	r3, #1
   1a096:	4083      	lsls	r3, r0
   1a098:	4811      	ldr	r0, [pc, #68]	; (1a0e0 <style_prop_is_cacheble+0x118>)
   1a09a:	e7b5      	b.n	1a008 <style_prop_is_cacheble+0x40>
   1a09c:	f248 038e 	movw	r3, #32910	; 0x808e
   1a0a0:	4298      	cmp	r0, r3
   1a0a2:	d811      	bhi.n	1a0c8 <style_prop_is_cacheble+0x100>
   1a0a4:	f248 037f 	movw	r3, #32895	; 0x807f
   1a0a8:	4298      	cmp	r0, r3
   1a0aa:	d89b      	bhi.n	19fe4 <style_prop_is_cacheble+0x1c>
   1a0ac:	28ff      	cmp	r0, #255	; 0xff
   1a0ae:	d012      	beq.n	1a0d6 <style_prop_is_cacheble+0x10e>
   1a0b0:	d806      	bhi.n	1a0c0 <style_prop_is_cacheble+0xf8>
   1a0b2:	287f      	cmp	r0, #127	; 0x7f
   1a0b4:	d00f      	beq.n	1a0d6 <style_prop_is_cacheble+0x10e>
            return true;
   1a0b6:	2891      	cmp	r0, #145	; 0x91
   1a0b8:	bf14      	ite	ne
   1a0ba:	2000      	movne	r0, #0
   1a0bc:	2001      	moveq	r0, #1
   1a0be:	4770      	bx	lr
   1a0c0:	f248 030c 	movw	r3, #32780	; 0x800c
   1a0c4:	4298      	cmp	r0, r3
   1a0c6:	e7f7      	b.n	1a0b8 <style_prop_is_cacheble+0xf0>
    switch(prop) {
   1a0c8:	f248 03a0 	movw	r3, #32928	; 0x80a0
   1a0cc:	4298      	cmp	r0, r3
   1a0ce:	d002      	beq.n	1a0d6 <style_prop_is_cacheble+0x10e>
            return true;
   1a0d0:	f248 03ad 	movw	r3, #32941	; 0x80ad
   1a0d4:	e7f6      	b.n	1a0c4 <style_prop_is_cacheble+0xfc>
   1a0d6:	2001      	movs	r0, #1
            break;
        default:
            return false;
    }
}
   1a0d8:	4770      	bx	lr
   1a0da:	bf00      	nop
   1a0dc:	44001001 	.word	0x44001001
   1a0e0:	00010005 	.word	0x00010005

0001a0e4 <lv_init>:
{
   1a0e4:	b530      	push	{r4, r5, lr}
    if(lv_initialized) {
   1a0e6:	4c1e      	ldr	r4, [pc, #120]	; (1a160 <lv_init+0x7c>)
   1a0e8:	7825      	ldrb	r5, [r4, #0]
{
   1a0ea:	b085      	sub	sp, #20
    if(lv_initialized) {
   1a0ec:	b14d      	cbz	r5, 1a102 <lv_init+0x1e>
        LV_LOG_WARN("lv_init: already inited");
   1a0ee:	4b1d      	ldr	r3, [pc, #116]	; (1a164 <lv_init+0x80>)
   1a0f0:	9300      	str	r3, [sp, #0]
   1a0f2:	491d      	ldr	r1, [pc, #116]	; (1a168 <lv_init+0x84>)
   1a0f4:	4b1d      	ldr	r3, [pc, #116]	; (1a16c <lv_init+0x88>)
   1a0f6:	22aa      	movs	r2, #170	; 0xaa
   1a0f8:	2002      	movs	r0, #2
    LV_LOG_INFO("lv_init ready");
   1a0fa:	f003 fa01 	bl	1d500 <_lv_log_add>
}
   1a0fe:	b005      	add	sp, #20
   1a100:	bd30      	pop	{r4, r5, pc}
    _lv_mem_init();
   1a102:	f010 fae7 	bl	2a6d4 <_lv_mem_init>
    _lv_task_core_init();
   1a106:	f003 fb63 	bl	1d7d0 <_lv_task_core_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_obj_style_trans_ll), sizeof(lv_style_trans_t));
   1a10a:	4819      	ldr	r0, [pc, #100]	; (1a170 <lv_init+0x8c>)
   1a10c:	2110      	movs	r1, #16
   1a10e:	f010 f9eb 	bl	2a4e8 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_disp_ll), sizeof(lv_disp_t));
   1a112:	4818      	ldr	r0, [pc, #96]	; (1a174 <lv_init+0x90>)
   1a114:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1a118:	f010 f9e6 	bl	2a4e8 <_lv_ll_init>
    _lv_ll_init(&LV_GC_ROOT(_lv_indev_ll), sizeof(lv_indev_t));
   1a11c:	4816      	ldr	r0, [pc, #88]	; (1a178 <lv_init+0x94>)
   1a11e:	2164      	movs	r1, #100	; 0x64
   1a120:	f010 f9e2 	bl	2a4e8 <_lv_ll_init>
    lv_theme_t * th = LV_THEME_DEFAULT_INIT(LV_THEME_DEFAULT_COLOR_PRIMARY, LV_THEME_DEFAULT_COLOR_SECONDARY,
   1a124:	4b15      	ldr	r3, [pc, #84]	; (1a17c <lv_init+0x98>)
   1a126:	4816      	ldr	r0, [pc, #88]	; (1a180 <lv_init+0x9c>)
   1a128:	9300      	str	r3, [sp, #0]
   1a12a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a12e:	462a      	mov	r2, r5
   1a130:	4629      	mov	r1, r5
   1a132:	8800      	ldrh	r0, [r0, #0]
   1a134:	f004 f86e 	bl	1e214 <lv_theme_mono_init>
    lv_theme_set_act(th);
   1a138:	f004 f810 	bl	1e15c <lv_theme_set_act>
    _lv_refr_init();
   1a13c:	f00d f922 	bl	27384 <_lv_refr_init>
    _lv_indev_init();
   1a140:	f00c f803 	bl	2614a <_lv_indev_init>
    _lv_img_decoder_init();
   1a144:	f003 f8da 	bl	1d2fc <_lv_img_decoder_init>
    lv_img_cache_set_size(LV_IMG_CACHE_DEF_SIZE);
   1a148:	2001      	movs	r0, #1
   1a14a:	f002 fddf 	bl	1cd0c <lv_img_cache_set_size>
    LV_LOG_INFO("lv_init ready");
   1a14e:	4b0d      	ldr	r3, [pc, #52]	; (1a184 <lv_init+0xa0>)
   1a150:	9300      	str	r3, [sp, #0]
    lv_initialized = true;
   1a152:	2001      	movs	r0, #1
    LV_LOG_INFO("lv_init ready");
   1a154:	4b05      	ldr	r3, [pc, #20]	; (1a16c <lv_init+0x88>)
   1a156:	4904      	ldr	r1, [pc, #16]	; (1a168 <lv_init+0x84>)
    lv_initialized = true;
   1a158:	7020      	strb	r0, [r4, #0]
    LV_LOG_INFO("lv_init ready");
   1a15a:	22e1      	movs	r2, #225	; 0xe1
   1a15c:	e7cd      	b.n	1a0fa <lv_init+0x16>
   1a15e:	bf00      	nop
   1a160:	2000860b 	.word	0x2000860b
   1a164:	0002fc53 	.word	0x0002fc53
   1a168:	0002fc1d 	.word	0x0002fc1d
   1a16c:	0002fd3c 	.word	0x0002fd3c
   1a170:	20003fd8 	.word	0x20003fd8
   1a174:	20003eac 	.word	0x20003eac
   1a178:	20003f4c 	.word	0x20003f4c
   1a17c:	20000800 	.word	0x20000800
   1a180:	0002c108 	.word	0x0002c108
   1a184:	0002fc6b 	.word	0x0002fc6b

0001a188 <lv_event_send_func>:
{
   1a188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1a18c:	4f1e      	ldr	r7, [pc, #120]	; (1a208 <lv_event_send_func+0x80>)
    const void * event_act_data_save = event_act_data;
   1a18e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 1a20c <lv_event_send_func+0x84>
    event_temp_data.obj     = obj;
   1a192:	9101      	str	r1, [sp, #4]
{
   1a194:	461e      	mov	r6, r3
    event_temp_data.deleted = false;
   1a196:	2300      	movs	r3, #0
   1a198:	f88d 3008 	strb.w	r3, [sp, #8]
        event_temp_data.prev = event_temp_data_head;
   1a19c:	683b      	ldr	r3, [r7, #0]
   1a19e:	9303      	str	r3, [sp, #12]
    event_temp_data_head = &event_temp_data;
   1a1a0:	ab01      	add	r3, sp, #4
    const void * event_act_data_save = event_act_data;
   1a1a2:	f8da 9000 	ldr.w	r9, [sl]
    event_temp_data_head = &event_temp_data;
   1a1a6:	603b      	str	r3, [r7, #0]
{
   1a1a8:	4680      	mov	r8, r0
   1a1aa:	460c      	mov	r4, r1
   1a1ac:	4615      	mov	r5, r2
    event_act_data                   = data;
   1a1ae:	f8ca 6000 	str.w	r6, [sl]
    lv_indev_t * indev_act = lv_indev_get_act();
   1a1b2:	f7ff fee5 	bl	19f80 <lv_indev_get_act>
    if(indev_act) {
   1a1b6:	b118      	cbz	r0, 1a1c0 <lv_event_send_func+0x38>
        if(indev_act->driver.feedback_cb) indev_act->driver.feedback_cb(&indev_act->driver, event);
   1a1b8:	6883      	ldr	r3, [r0, #8]
   1a1ba:	b10b      	cbz	r3, 1a1c0 <lv_event_send_func+0x38>
   1a1bc:	4629      	mov	r1, r5
   1a1be:	4798      	blx	r3
    if(event_xcb) event_xcb(obj, event);
   1a1c0:	f1b8 0f00 	cmp.w	r8, #0
   1a1c4:	d002      	beq.n	1a1cc <lv_event_send_func+0x44>
   1a1c6:	4629      	mov	r1, r5
   1a1c8:	4620      	mov	r0, r4
   1a1ca:	47c0      	blx	r8
    event_temp_data_head = event_temp_data_head->prev;
   1a1cc:	683b      	ldr	r3, [r7, #0]
    event_act_data = event_act_data_save;
   1a1ce:	f8ca 9000 	str.w	r9, [sl]
    event_temp_data_head = event_temp_data_head->prev;
   1a1d2:	689b      	ldr	r3, [r3, #8]
   1a1d4:	603b      	str	r3, [r7, #0]
    if(event_temp_data.deleted) {
   1a1d6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1a1da:	b983      	cbnz	r3, 1a1fe <lv_event_send_func+0x76>
    if(obj) {
   1a1dc:	b18c      	cbz	r4, 1a202 <lv_event_send_func+0x7a>
        if(obj->parent_event && obj->parent) {
   1a1de:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1a1e2:	065a      	lsls	r2, r3, #25
   1a1e4:	d50d      	bpl.n	1a202 <lv_event_send_func+0x7a>
   1a1e6:	6820      	ldr	r0, [r4, #0]
   1a1e8:	b158      	cbz	r0, 1a202 <lv_event_send_func+0x7a>
            lv_res_t res = lv_event_send(obj->parent, event, data);
   1a1ea:	4632      	mov	r2, r6
   1a1ec:	4629      	mov	r1, r5
   1a1ee:	f00b ffdf 	bl	261b0 <lv_event_send>
        return LV_RES_INV;
   1a1f2:	1e43      	subs	r3, r0, #1
   1a1f4:	4258      	negs	r0, r3
   1a1f6:	4158      	adcs	r0, r3
}
   1a1f8:	b004      	add	sp, #16
   1a1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LV_RES_INV;
   1a1fe:	2000      	movs	r0, #0
   1a200:	e7fa      	b.n	1a1f8 <lv_event_send_func+0x70>
    return LV_RES_OK;
   1a202:	2001      	movs	r0, #1
   1a204:	e7f8      	b.n	1a1f8 <lv_event_send_func+0x70>
   1a206:	bf00      	nop
   1a208:	20003e94 	.word	0x20003e94
   1a20c:	20003e90 	.word	0x20003e90

0001a210 <lv_obj_get_disp>:
    if(obj->parent == NULL)
   1a210:	6803      	ldr	r3, [r0, #0]
{
   1a212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a214:	4605      	mov	r5, r0
    if(obj->parent == NULL)
   1a216:	b123      	cbz	r3, 1a222 <lv_obj_get_disp+0x12>
    return obj->parent;
   1a218:	462b      	mov	r3, r5
   1a21a:	682d      	ldr	r5, [r5, #0]
    } while(par != NULL);
   1a21c:	2d00      	cmp	r5, #0
   1a21e:	d1fb      	bne.n	1a218 <lv_obj_get_disp+0x8>
   1a220:	461d      	mov	r5, r3
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
   1a222:	4812      	ldr	r0, [pc, #72]	; (1a26c <lv_obj_get_disp+0x5c>)
   1a224:	4f11      	ldr	r7, [pc, #68]	; (1a26c <lv_obj_get_disp+0x5c>)
   1a226:	f010 f99e 	bl	2a566 <_lv_ll_get_head>
   1a22a:	4604      	mov	r4, r0
   1a22c:	b95c      	cbnz	r4, 1a246 <lv_obj_get_disp+0x36>
    LV_LOG_WARN("lv_scr_get_disp: screen not found")
   1a22e:	4b10      	ldr	r3, [pc, #64]	; (1a270 <lv_obj_get_disp+0x60>)
   1a230:	9300      	str	r3, [sp, #0]
   1a232:	4910      	ldr	r1, [pc, #64]	; (1a274 <lv_obj_get_disp+0x64>)
   1a234:	4b10      	ldr	r3, [pc, #64]	; (1a278 <lv_obj_get_disp+0x68>)
   1a236:	f640 0254 	movw	r2, #2132	; 0x854
   1a23a:	2002      	movs	r0, #2
   1a23c:	f003 f960 	bl	1d500 <_lv_log_add>
}
   1a240:	4620      	mov	r0, r4
   1a242:	b003      	add	sp, #12
   1a244:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _LV_LL_READ(d->scr_ll, s) {
   1a246:	f104 0634 	add.w	r6, r4, #52	; 0x34
   1a24a:	4630      	mov	r0, r6
   1a24c:	f010 f98b 	bl	2a566 <_lv_ll_get_head>
   1a250:	4601      	mov	r1, r0
   1a252:	b928      	cbnz	r0, 1a260 <lv_obj_get_disp+0x50>
    _LV_LL_READ(LV_GC_ROOT(_lv_disp_ll), d) {
   1a254:	4621      	mov	r1, r4
   1a256:	4638      	mov	r0, r7
   1a258:	f010 f98b 	bl	2a572 <_lv_ll_get_next>
   1a25c:	4604      	mov	r4, r0
   1a25e:	e7e5      	b.n	1a22c <lv_obj_get_disp+0x1c>
            if(s == scr) return d;
   1a260:	428d      	cmp	r5, r1
   1a262:	d0ed      	beq.n	1a240 <lv_obj_get_disp+0x30>
        _LV_LL_READ(d->scr_ll, s) {
   1a264:	4630      	mov	r0, r6
   1a266:	f010 f984 	bl	2a572 <_lv_ll_get_next>
   1a26a:	e7f1      	b.n	1a250 <lv_obj_get_disp+0x40>
   1a26c:	20003eac 	.word	0x20003eac
   1a270:	0002fc79 	.word	0x0002fc79
   1a274:	0002fc1d 	.word	0x0002fc1d
   1a278:	0002fd6a 	.word	0x0002fd6a

0001a27c <obj_del_core>:
{
   1a27c:	b570      	push	{r4, r5, r6, lr}
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
   1a27e:	2200      	movs	r2, #0
   1a280:	2115      	movs	r1, #21
{
   1a282:	4604      	mov	r4, r0
    lv_event_send(obj, LV_EVENT_DELETE, NULL);
   1a284:	f00b ff94 	bl	261b0 <lv_event_send>
    i = _lv_ll_get_head(&(obj->child_ll));
   1a288:	1d25      	adds	r5, r4, #4
        i = _lv_ll_get_head(&(obj->child_ll));
   1a28a:	4628      	mov	r0, r5
   1a28c:	f010 f96b 	bl	2a566 <_lv_ll_get_head>
    while(i != NULL) {
   1a290:	b9f8      	cbnz	r0, 1a2d2 <obj_del_core+0x56>
    lv_event_temp_data_t * t = event_temp_data_head;
   1a292:	4b1e      	ldr	r3, [pc, #120]	; (1a30c <obj_del_core+0x90>)
   1a294:	681e      	ldr	r6, [r3, #0]
        if(t->obj == obj) t->deleted = true;
   1a296:	2301      	movs	r3, #1
    while(t) {
   1a298:	b9f6      	cbnz	r6, 1a2d8 <obj_del_core+0x5c>
    lv_indev_t * indev = lv_indev_get_next(NULL);
   1a29a:	4630      	mov	r0, r6
        indev = lv_indev_get_next(indev);
   1a29c:	f003 f914 	bl	1d4c8 <lv_indev_get_next>
   1a2a0:	4605      	mov	r5, r0
    while(indev) {
   1a2a2:	b9f8      	cbnz	r0, 1a2e4 <obj_del_core+0x68>
    obj->signal_cb(obj, LV_SIGNAL_CLEANUP, NULL);
   1a2a4:	4602      	mov	r2, r0
   1a2a6:	4601      	mov	r1, r0
   1a2a8:	69e3      	ldr	r3, [r4, #28]
   1a2aa:	4620      	mov	r0, r4
   1a2ac:	4798      	blx	r3
    return obj->parent;
   1a2ae:	6820      	ldr	r0, [r4, #0]
    if(par == NULL) { /*It is a screen*/
   1a2b0:	bb40      	cbnz	r0, 1a304 <obj_del_core+0x88>
        lv_disp_t * d = lv_obj_get_disp(obj);
   1a2b2:	4620      	mov	r0, r4
   1a2b4:	f7ff ffac 	bl	1a210 <lv_obj_get_disp>
        _lv_ll_remove(&d->scr_ll, obj);
   1a2b8:	4621      	mov	r1, r4
   1a2ba:	3034      	adds	r0, #52	; 0x34
        _lv_ll_remove(&(par->child_ll), obj);
   1a2bc:	f010 f994 	bl	2a5e8 <_lv_ll_remove>
    if(obj->ext_attr != NULL) lv_mem_free(obj->ext_attr);
   1a2c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   1a2c2:	b108      	cbz	r0, 1a2c8 <obj_del_core+0x4c>
   1a2c4:	f003 f96c 	bl	1d5a0 <lv_mem_free>
    lv_mem_free(obj); /*Free the object itself*/
   1a2c8:	4620      	mov	r0, r4
}
   1a2ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_mem_free(obj); /*Free the object itself*/
   1a2ce:	f003 b967 	b.w	1d5a0 <lv_mem_free>
        obj_del_core(i);
   1a2d2:	f7ff ffd3 	bl	1a27c <obj_del_core>
   1a2d6:	e7d8      	b.n	1a28a <obj_del_core+0xe>
        if(t->obj == obj) t->deleted = true;
   1a2d8:	6832      	ldr	r2, [r6, #0]
   1a2da:	4294      	cmp	r4, r2
   1a2dc:	bf08      	it	eq
   1a2de:	7133      	strbeq	r3, [r6, #4]
        t = t->prev;
   1a2e0:	68b6      	ldr	r6, [r6, #8]
   1a2e2:	e7d9      	b.n	1a298 <obj_del_core+0x1c>
        if(indev->proc.types.pointer.act_obj == obj || indev->proc.types.pointer.last_obj == obj) {
   1a2e4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1a2e6:	42a3      	cmp	r3, r4
   1a2e8:	d002      	beq.n	1a2f0 <obj_del_core+0x74>
   1a2ea:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1a2ec:	42a3      	cmp	r3, r4
   1a2ee:	d103      	bne.n	1a2f8 <obj_del_core+0x7c>
            lv_indev_reset(indev, obj);
   1a2f0:	4621      	mov	r1, r4
   1a2f2:	4628      	mov	r0, r5
   1a2f4:	f7ff fe4a 	bl	19f8c <lv_indev_reset>
        if(indev->proc.types.pointer.last_pressed == obj) {
   1a2f8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
   1a2fa:	42a3      	cmp	r3, r4
            indev->proc.types.pointer.last_pressed = NULL;
   1a2fc:	bf08      	it	eq
   1a2fe:	642e      	streq	r6, [r5, #64]	; 0x40
        indev = lv_indev_get_next(indev);
   1a300:	4628      	mov	r0, r5
   1a302:	e7cb      	b.n	1a29c <obj_del_core+0x20>
        _lv_ll_remove(&(par->child_ll), obj);
   1a304:	4621      	mov	r1, r4
   1a306:	3004      	adds	r0, #4
   1a308:	e7d8      	b.n	1a2bc <obj_del_core+0x40>
   1a30a:	bf00      	nop
   1a30c:	20003e94 	.word	0x20003e94

0001a310 <lv_obj_create>:
{
   1a310:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1a314:	460d      	mov	r5, r1
    if(parent == NULL) {
   1a316:	4606      	mov	r6, r0
   1a318:	2800      	cmp	r0, #0
   1a31a:	d160      	bne.n	1a3de <lv_obj_create+0xce>
        lv_disp_t * disp = lv_disp_get_default();
   1a31c:	f003 f81a 	bl	1d354 <lv_disp_get_default>
        if(!disp) {
   1a320:	4604      	mov	r4, r0
   1a322:	b948      	cbnz	r0, 1a338 <lv_obj_create+0x28>
            LV_LOG_WARN("lv_obj_create: not display created to so far. No place to assign the new screen");
   1a324:	4bac      	ldr	r3, [pc, #688]	; (1a5d8 <lv_obj_create+0x2c8>)
   1a326:	9300      	str	r3, [sp, #0]
   1a328:	49ac      	ldr	r1, [pc, #688]	; (1a5dc <lv_obj_create+0x2cc>)
   1a32a:	4bad      	ldr	r3, [pc, #692]	; (1a5e0 <lv_obj_create+0x2d0>)
   1a32c:	f44f 7287 	mov.w	r2, #270	; 0x10e
   1a330:	2002      	movs	r0, #2
    LV_LOG_INFO("Object create ready");
   1a332:	f003 f8e5 	bl	1d500 <_lv_log_add>
    return new_obj;
   1a336:	e005      	b.n	1a344 <lv_obj_create+0x34>
        new_obj = _lv_ll_ins_head(&disp->scr_ll);
   1a338:	3034      	adds	r0, #52	; 0x34
   1a33a:	f010 f8dd 	bl	2a4f8 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   1a33e:	4604      	mov	r4, r0
   1a340:	b920      	cbnz	r0, 1a34c <lv_obj_create+0x3c>
   1a342:	2400      	movs	r4, #0
}
   1a344:	4620      	mov	r0, r4
   1a346:	b002      	add	sp, #8
   1a348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
   1a34c:	213c      	movs	r1, #60	; 0x3c
   1a34e:	f00b ff1f 	bl	26190 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a352:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->event_cb = NULL;
   1a356:	61a6      	str	r6, [r4, #24]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a358:	f366 1346 	bfi	r3, r6, #5, #2
   1a35c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
   1a360:	4ba0      	ldr	r3, [pc, #640]	; (1a5e4 <lv_obj_create+0x2d4>)
   1a362:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   1a364:	4ba0      	ldr	r3, [pc, #640]	; (1a5e8 <lv_obj_create+0x2d8>)
   1a366:	6223      	str	r3, [r4, #32]
        new_obj->coords.x1    = 0;
   1a368:	6126      	str	r6, [r4, #16]
        new_obj->coords.x2    = lv_disp_get_hor_res(NULL) - 1;
   1a36a:	4630      	mov	r0, r6
   1a36c:	f002 fff8 	bl	1d360 <lv_disp_get_hor_res>
   1a370:	3801      	subs	r0, #1
   1a372:	82a0      	strh	r0, [r4, #20]
        new_obj->coords.y2    = lv_disp_get_ver_res(NULL) - 1;
   1a374:	4630      	mov	r0, r6
   1a376:	f003 f803 	bl	1d380 <lv_disp_get_ver_res>
   1a37a:	3801      	subs	r0, #1
   1a37c:	82e0      	strh	r0, [r4, #22]
    new_obj->ext_draw_pad = 0;
   1a37e:	2700      	movs	r7, #0
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   1a380:	213c      	movs	r1, #60	; 0x3c
   1a382:	1d20      	adds	r0, r4, #4
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
   1a384:	f104 0838 	add.w	r8, r4, #56	; 0x38
    _lv_ll_init(&(new_obj->child_ll), sizeof(lv_obj_t));
   1a388:	f010 f8ae 	bl	2a4e8 <_lv_ll_init>
    new_obj->ext_draw_pad = 0;
   1a38c:	8627      	strh	r7, [r4, #48]	; 0x30
    _lv_memset_00(&new_obj->user_data, sizeof(lv_obj_user_data_t));
   1a38e:	4640      	mov	r0, r8
   1a390:	2104      	movs	r1, #4
   1a392:	f00b fefd 	bl	26190 <_lv_memset_00>
    new_obj->gesture_parent = parent ? 1 : 0;
   1a396:	1bf2      	subs	r2, r6, r7
   1a398:	bf18      	it	ne
   1a39a:	2201      	movne	r2, #1
    new_obj->click        = 1;
   1a39c:	f640 4301 	movw	r3, #3073	; 0xc01
   1a3a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1a3a4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    new_obj->protect      = LV_PROTECT_NONE;
   1a3a6:	86a7      	strh	r7, [r4, #52]	; 0x34
    new_obj->click        = 1;
   1a3a8:	f402 4260 	and.w	r2, r2, #57344	; 0xe000
   1a3ac:	4313      	orrs	r3, r2
    new_obj->ext_attr = NULL;
   1a3ae:	6267      	str	r7, [r4, #36]	; 0x24
    lv_style_list_init(&new_obj->style_list);
   1a3b0:	f104 0728 	add.w	r7, r4, #40	; 0x28
    new_obj->click        = 1;
   1a3b4:	8663      	strh	r3, [r4, #50]	; 0x32
    lv_style_list_init(&new_obj->style_list);
   1a3b6:	4638      	mov	r0, r7
   1a3b8:	f00d f8c1 	bl	2753e <lv_style_list_init>
    if(copy == NULL) {
   1a3bc:	2d00      	cmp	r5, #0
   1a3be:	d16d      	bne.n	1a49c <lv_obj_create+0x18c>
        if(parent != NULL) lv_theme_apply(new_obj, LV_THEME_OBJ);
   1a3c0:	2e00      	cmp	r6, #0
   1a3c2:	d05f      	beq.n	1a484 <lv_obj_create+0x174>
   1a3c4:	2102      	movs	r1, #2
   1a3c6:	4620      	mov	r0, r4
   1a3c8:	f003 fece 	bl	1e168 <lv_theme_apply>
        parent->signal_cb(parent, LV_SIGNAL_CHILD_CHG, new_obj);
   1a3cc:	69f3      	ldr	r3, [r6, #28]
   1a3ce:	4622      	mov	r2, r4
   1a3d0:	2101      	movs	r1, #1
   1a3d2:	4630      	mov	r0, r6
   1a3d4:	4798      	blx	r3
        lv_obj_invalidate(new_obj);
   1a3d6:	4620      	mov	r0, r4
   1a3d8:	f00b ff7b 	bl	262d2 <lv_obj_invalidate>
   1a3dc:	e056      	b.n	1a48c <lv_obj_create+0x17c>
        new_obj = _lv_ll_ins_head(&parent->child_ll);
   1a3de:	3004      	adds	r0, #4
   1a3e0:	f010 f88a 	bl	2a4f8 <_lv_ll_ins_head>
        if(new_obj == NULL) return NULL;
   1a3e4:	4604      	mov	r4, r0
   1a3e6:	2800      	cmp	r0, #0
   1a3e8:	d0ab      	beq.n	1a342 <lv_obj_create+0x32>
        _lv_memset_00(new_obj, sizeof(lv_obj_t));
   1a3ea:	213c      	movs	r1, #60	; 0x3c
   1a3ec:	f00b fed0 	bl	26190 <_lv_memset_00>
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a3f0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        new_obj->parent = parent;
   1a3f4:	6026      	str	r6, [r4, #0]
        new_obj->base_dir     = LV_BIDI_DIR_LTR;
   1a3f6:	f36f 1346 	bfc	r3, #5, #2
   1a3fa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->signal_cb = lv_obj_signal;
   1a3fe:	4b79      	ldr	r3, [pc, #484]	; (1a5e4 <lv_obj_create+0x2d4>)
   1a400:	61e3      	str	r3, [r4, #28]
        new_obj->design_cb = lv_obj_design;
   1a402:	4b79      	ldr	r3, [pc, #484]	; (1a5e8 <lv_obj_create+0x2d8>)
   1a404:	6223      	str	r3, [r4, #32]
        new_obj->event_cb = NULL;
   1a406:	f04f 0900 	mov.w	r9, #0
        new_obj->coords.y1    = parent->coords.y1;
   1a40a:	f9b6 3012 	ldrsh.w	r3, [r6, #18]
   1a40e:	8263      	strh	r3, [r4, #18]
        new_obj->event_cb = NULL;
   1a410:	f8c4 9018 	str.w	r9, [r4, #24]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   1a414:	4648      	mov	r0, r9
   1a416:	f9b6 8012 	ldrsh.w	r8, [r6, #18]
   1a41a:	f002 ffc1 	bl	1d3a0 <lv_disp_get_dpi>
   1a41e:	2732      	movs	r7, #50	; 0x32
   1a420:	f04f 0a50 	mov.w	sl, #80	; 0x50
   1a424:	fb00 a007 	mla	r0, r0, r7, sl
   1a428:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1a42c:	db26      	blt.n	1a47c <lv_obj_create+0x16c>
   1a42e:	4648      	mov	r0, r9
   1a430:	f002 ffb6 	bl	1d3a0 <lv_disp_get_dpi>
   1a434:	fb00 a707 	mla	r7, r0, r7, sl
   1a438:	20a0      	movs	r0, #160	; 0xa0
   1a43a:	fb97 f7f0 	sdiv	r7, r7, r0
   1a43e:	b23f      	sxth	r7, r7
   1a440:	4447      	add	r7, r8
            new_obj->coords.x1    = parent->coords.x1;
   1a442:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   1a446:	82e7      	strh	r7, [r4, #22]
            new_obj->coords.x1    = parent->coords.x1;
   1a448:	8223      	strh	r3, [r4, #16]
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   1a44a:	2000      	movs	r0, #0
   1a44c:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   1a450:	f002 ffa6 	bl	1d3a0 <lv_disp_get_dpi>
   1a454:	2764      	movs	r7, #100	; 0x64
   1a456:	f04f 0950 	mov.w	r9, #80	; 0x50
   1a45a:	fb00 9007 	mla	r0, r0, r7, r9
   1a45e:	f5b0 7fa0 	cmp.w	r0, #320	; 0x140
   1a462:	db0d      	blt.n	1a480 <lv_obj_create+0x170>
   1a464:	2000      	movs	r0, #0
   1a466:	f002 ff9b 	bl	1d3a0 <lv_disp_get_dpi>
   1a46a:	fb00 9707 	mla	r7, r0, r7, r9
   1a46e:	20a0      	movs	r0, #160	; 0xa0
   1a470:	fb97 f7f0 	sdiv	r7, r7, r0
   1a474:	b23f      	sxth	r7, r7
   1a476:	4447      	add	r7, r8
   1a478:	82a7      	strh	r7, [r4, #20]
   1a47a:	e780      	b.n	1a37e <lv_obj_create+0x6e>
        new_obj->coords.y2    = parent->coords.y1 + LV_OBJ_DEF_HEIGHT;
   1a47c:	2701      	movs	r7, #1
   1a47e:	e7df      	b.n	1a440 <lv_obj_create+0x130>
            new_obj->coords.x2    = parent->coords.x1 + LV_OBJ_DEF_WIDTH;
   1a480:	2701      	movs	r7, #1
   1a482:	e7f8      	b.n	1a476 <lv_obj_create+0x166>
        else  lv_theme_apply(new_obj, LV_THEME_SCR);
   1a484:	2101      	movs	r1, #1
   1a486:	4620      	mov	r0, r4
   1a488:	f003 fe6e 	bl	1e168 <lv_theme_apply>
    LV_LOG_INFO("Object create ready");
   1a48c:	4b57      	ldr	r3, [pc, #348]	; (1a5ec <lv_obj_create+0x2dc>)
   1a48e:	9300      	str	r3, [sp, #0]
   1a490:	4952      	ldr	r1, [pc, #328]	; (1a5dc <lv_obj_create+0x2cc>)
   1a492:	4b53      	ldr	r3, [pc, #332]	; (1a5e0 <lv_obj_create+0x2d0>)
   1a494:	f44f 72e5 	mov.w	r2, #458	; 0x1ca
   1a498:	2001      	movs	r0, #1
   1a49a:	e74a      	b.n	1a332 <lv_obj_create+0x22>
        lv_style_list_copy(&new_obj->style_list, &copy->style_list);
   1a49c:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1a4a0:	4638      	mov	r0, r7
   1a4a2:	f00d f9e6 	bl	27872 <lv_style_list_copy>
        lv_area_copy(&new_obj->coords, &copy->coords);
   1a4a6:	f105 0110 	add.w	r1, r5, #16
   1a4aa:	f104 0010 	add.w	r0, r4, #16
   1a4ae:	f00b fe75 	bl	2619c <lv_area_copy>
        new_obj->ext_draw_pad = copy->ext_draw_pad;
   1a4b2:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
   1a4b6:	8623      	strh	r3, [r4, #48]	; 0x30
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
   1a4b8:	2204      	movs	r2, #4
   1a4ba:	f105 0138 	add.w	r1, r5, #56	; 0x38
   1a4be:	4640      	mov	r0, r8
   1a4c0:	f00b fe6a 	bl	26198 <_lv_memcpy>
        new_obj->base_dir = copy->base_dir;
   1a4c4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a4c8:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1a4cc:	f3c3 1341 	ubfx	r3, r3, #5, #2
   1a4d0:	f363 1246 	bfi	r2, r3, #5, #2
   1a4d4:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->event_cb = copy->event_cb;
   1a4d8:	69ab      	ldr	r3, [r5, #24]
   1a4da:	61a3      	str	r3, [r4, #24]
        new_obj->adv_hittest  = copy->adv_hittest;
   1a4dc:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a4e0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1a4e4:	09db      	lsrs	r3, r3, #7
   1a4e6:	f363 12c7 	bfi	r2, r3, #7, #1
   1a4ea:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->click        = copy->click;
   1a4ee:	f895 2032 	ldrb.w	r2, [r5, #50]	; 0x32
   1a4f2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1a4f6:	f362 0300 	bfi	r3, r2, #0, #1
   1a4fa:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
        new_obj->drag         = copy->drag;
   1a4fe:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a502:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1a506:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a50a:	f363 0241 	bfi	r2, r3, #1, #1
   1a50e:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_dir     = copy->drag_dir;
   1a512:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a516:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1a51a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1a51e:	f363 0284 	bfi	r2, r3, #2, #3
   1a522:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        new_obj->drag_throw   = copy->drag_throw;
   1a526:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a52a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   1a52e:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1a532:	f363 0282 	bfi	r2, r3, #2, #1
   1a536:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->drag_parent  = copy->drag_parent;
   1a53a:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a53e:	b2d2      	uxtb	r2, r2
   1a540:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   1a544:	f363 02c3 	bfi	r2, r3, #3, #1
   1a548:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->hidden       = copy->hidden;
   1a54c:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a550:	b2d2      	uxtb	r2, r2
   1a552:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1a556:	f363 1204 	bfi	r2, r3, #4, #1
   1a55a:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->top          = copy->top;
   1a55e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a562:	b2d2      	uxtb	r2, r2
   1a564:	f3c3 1340 	ubfx	r3, r3, #5, #1
   1a568:	f363 1245 	bfi	r2, r3, #5, #1
   1a56c:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->parent_event = copy->parent_event;
   1a570:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
   1a574:	b2d2      	uxtb	r2, r2
   1a576:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1a57a:	f363 1286 	bfi	r2, r3, #6, #1
   1a57e:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
        new_obj->protect      = copy->protect;
   1a582:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   1a586:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        new_obj->gesture_parent = copy->gesture_parent;
   1a58a:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
   1a58e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1a592:	f362 0300 	bfi	r3, r2, #0, #1
   1a596:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        new_obj->focus_parent = copy->focus_parent;
   1a59a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1a59e:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
   1a5a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1a5a6:	f363 0241 	bfi	r2, r3, #1, #1
   1a5aa:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
        if(lv_obj_get_parent(copy) != NULL && parent != NULL) {
   1a5ae:	682b      	ldr	r3, [r5, #0]
   1a5b0:	b173      	cbz	r3, 1a5d0 <lv_obj_create+0x2c0>
   1a5b2:	2e00      	cmp	r6, #0
   1a5b4:	f43f af6a 	beq.w	1a48c <lv_obj_create+0x17c>
            lv_obj_set_pos(new_obj, lv_obj_get_x(copy), lv_obj_get_y(copy));
   1a5b8:	4628      	mov	r0, r5
   1a5ba:	f00b ffa3 	bl	26504 <lv_obj_get_x>
   1a5be:	4601      	mov	r1, r0
   1a5c0:	4628      	mov	r0, r5
   1a5c2:	f00b ffa7 	bl	26514 <lv_obj_get_y>
   1a5c6:	4602      	mov	r2, r0
   1a5c8:	4620      	mov	r0, r4
   1a5ca:	f00b fea5 	bl	26318 <lv_obj_set_pos>
    if(parent != NULL) {
   1a5ce:	e6fd      	b.n	1a3cc <lv_obj_create+0xbc>
   1a5d0:	2e00      	cmp	r6, #0
   1a5d2:	f47f aefb 	bne.w	1a3cc <lv_obj_create+0xbc>
   1a5d6:	e759      	b.n	1a48c <lv_obj_create+0x17c>
   1a5d8:	0002fc9b 	.word	0x0002fc9b
   1a5dc:	0002fc1d 	.word	0x0002fc1d
   1a5e0:	0002fd44 	.word	0x0002fd44
   1a5e4:	0001acb9 	.word	0x0001acb9
   1a5e8:	00026913 	.word	0x00026913
   1a5ec:	0002fceb 	.word	0x0002fceb

0001a5f0 <lv_obj_clean_style_list>:
{
   1a5f0:	b507      	push	{r0, r1, r2, lr}
    lv_style_list_t * style_dsc = lv_obj_get_style_list(obj, part);
   1a5f2:	f00b ff97 	bl	26524 <lv_obj_get_style_list>
    if(style_dsc == NULL) {
   1a5f6:	b958      	cbnz	r0, 1a610 <lv_obj_clean_style_list+0x20>
        LV_LOG_WARN("lv_obj_clean_style_list: can't find style with `part`");
   1a5f8:	4b08      	ldr	r3, [pc, #32]	; (1a61c <lv_obj_clean_style_list+0x2c>)
   1a5fa:	9300      	str	r3, [sp, #0]
   1a5fc:	4908      	ldr	r1, [pc, #32]	; (1a620 <lv_obj_clean_style_list+0x30>)
   1a5fe:	4b09      	ldr	r3, [pc, #36]	; (1a624 <lv_obj_clean_style_list+0x34>)
   1a600:	f240 42d5 	movw	r2, #1237	; 0x4d5
   1a604:	2002      	movs	r0, #2
   1a606:	f002 ff7b 	bl	1d500 <_lv_log_add>
}
   1a60a:	b003      	add	sp, #12
   1a60c:	f85d fb04 	ldr.w	pc, [sp], #4
   1a610:	b003      	add	sp, #12
   1a612:	f85d eb04 	ldr.w	lr, [sp], #4
    _lv_style_list_reset(style_dsc);
   1a616:	f00d b902 	b.w	2781e <_lv_style_list_reset>
   1a61a:	bf00      	nop
   1a61c:	0002fcff 	.word	0x0002fcff
   1a620:	0002fc1d 	.word	0x0002fc1d
   1a624:	0002fd52 	.word	0x0002fd52

0001a628 <_lv_obj_get_style_color>:
{
   1a628:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a62c:	4605      	mov	r5, r0
   1a62e:	460e      	mov	r6, r1
   1a630:	4617      	mov	r7, r2
    while(parent) {
   1a632:	4614      	mov	r4, r2
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1a634:	f342 2907 	sbfx	r9, r2, #8, #8
    while(parent) {
   1a638:	b945      	cbnz	r5, 1a64c <_lv_obj_get_style_color+0x24>
    prop = prop & (~LV_STYLE_STATE_MASK);
   1a63a:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   1a63e:	3c29      	subs	r4, #41	; 0x29
   1a640:	2c01      	cmp	r4, #1
            return LV_COLOR_WHITE;
   1a642:	bf96      	itet	ls
   1a644:	4b11      	ldrls	r3, [pc, #68]	; (1a68c <_lv_obj_get_style_color+0x64>)
   1a646:	2000      	movhi	r0, #0
   1a648:	8818      	ldrhls	r0, [r3, #0]
    return LV_COLOR_BLACK;
   1a64a:	e014      	b.n	1a676 <_lv_obj_get_style_color+0x4e>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a64c:	4631      	mov	r1, r6
   1a64e:	4628      	mov	r0, r5
   1a650:	f00b ff68 	bl	26524 <lv_obj_get_style_list>
        lv_state_t state = lv_obj_get_state(parent, part);
   1a654:	4631      	mov	r1, r6
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a656:	4680      	mov	r8, r0
        lv_state_t state = lv_obj_get_state(parent, part);
   1a658:	4628      	mov	r0, r5
   1a65a:	f00b ff94 	bl	26586 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   1a65e:	eb07 2400 	add.w	r4, r7, r0, lsl #8
   1a662:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_color(list, prop, &value_act);
   1a664:	aa01      	add	r2, sp, #4
   1a666:	4621      	mov	r1, r4
   1a668:	4640      	mov	r0, r8
   1a66a:	f00d f9b4 	bl	279d6 <_lv_style_list_get_color>
        if(res == LV_RES_OK) return value_act;
   1a66e:	2801      	cmp	r0, #1
   1a670:	d104      	bne.n	1a67c <_lv_obj_get_style_color+0x54>
   1a672:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   1a676:	b003      	add	sp, #12
   1a678:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1a67c:	f1b9 0f00 	cmp.w	r9, #0
   1a680:	dadb      	bge.n	1a63a <_lv_obj_get_style_color+0x12>
        if(part != LV_OBJ_PART_MAIN) {
   1a682:	b906      	cbnz	r6, 1a686 <_lv_obj_get_style_color+0x5e>
    return obj->parent;
   1a684:	682d      	ldr	r5, [r5, #0]
{
   1a686:	2600      	movs	r6, #0
   1a688:	e7d6      	b.n	1a638 <_lv_obj_get_style_color+0x10>
   1a68a:	bf00      	nop
   1a68c:	0002c108 	.word	0x0002c108

0001a690 <_lv_obj_get_style_int>:
{
   1a690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a694:	4606      	mov	r6, r0
   1a696:	b085      	sub	sp, #20
   1a698:	468b      	mov	fp, r1
   1a69a:	4617      	mov	r7, r2
    attr = prop_ori >> 8;
   1a69c:	ea4f 2812 	mov.w	r8, r2, lsr #8
    while(parent) {
   1a6a0:	4615      	mov	r5, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a6a2:	f248 0982 	movw	r9, #32898	; 0x8082
   1a6a6:	f248 0a83 	movw	sl, #32899	; 0x8083
    while(parent) {
   1a6aa:	2e00      	cmp	r6, #0
   1a6ac:	f000 80ae 	beq.w	1a80c <_lv_obj_get_style_int+0x17c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a6b0:	4659      	mov	r1, fp
   1a6b2:	4630      	mov	r0, r6
   1a6b4:	f00b ff36 	bl	26524 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   1a6b8:	7942      	ldrb	r2, [r0, #5]
   1a6ba:	0711      	lsls	r1, r2, #28
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   1a6bc:	4604      	mov	r4, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   1a6be:	d414      	bmi.n	1a6ea <_lv_obj_get_style_int+0x5a>
   1a6c0:	7901      	ldrb	r1, [r0, #4]
   1a6c2:	068b      	lsls	r3, r1, #26
   1a6c4:	d011      	beq.n	1a6ea <_lv_obj_get_style_int+0x5a>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   1a6c6:	f012 0f04 	tst.w	r2, #4
   1a6ca:	f425 42fe 	bic.w	r2, r5, #32512	; 0x7f00
   1a6ce:	d105      	bne.n	1a6dc <_lv_obj_get_style_int+0x4c>
   1a6d0:	4659      	mov	r1, fp
   1a6d2:	4630      	mov	r0, r6
   1a6d4:	9201      	str	r2, [sp, #4]
   1a6d6:	f000 f8d7 	bl	1a888 <update_style_cache>
   1a6da:	9a01      	ldr	r2, [sp, #4]
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a6dc:	2a33      	cmp	r2, #51	; 0x33
   1a6de:	dc68      	bgt.n	1a7b2 <_lv_obj_get_style_int+0x122>
   1a6e0:	2a2f      	cmp	r2, #47	; 0x2f
   1a6e2:	dc20      	bgt.n	1a726 <_lv_obj_get_style_int+0x96>
   1a6e4:	2a18      	cmp	r2, #24
   1a6e6:	dc61      	bgt.n	1a7ac <_lv_obj_get_style_int+0x11c>
   1a6e8:	bb52      	cbnz	r2, 1a740 <_lv_obj_get_style_int+0xb0>
        lv_state_t state = lv_obj_get_state(parent, part);
   1a6ea:	4659      	mov	r1, fp
   1a6ec:	4630      	mov	r0, r6
   1a6ee:	f00b ff4a 	bl	26586 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   1a6f2:	eb07 2500 	add.w	r5, r7, r0, lsl #8
   1a6f6:	b2ad      	uxth	r5, r5
        res = _lv_style_list_get_int(list, prop, &value_act);
   1a6f8:	f10d 020e 	add.w	r2, sp, #14
   1a6fc:	4629      	mov	r1, r5
   1a6fe:	4620      	mov	r0, r4
   1a700:	f00d f927 	bl	27952 <_lv_style_list_get_int>
        if(res == LV_RES_OK) return value_act;
   1a704:	2801      	cmp	r0, #1
   1a706:	f040 80a6 	bne.w	1a856 <_lv_obj_get_style_int+0x1c6>
   1a70a:	f9bd 000e 	ldrsh.w	r0, [sp, #14]
}
   1a70e:	b005      	add	sp, #20
   1a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a714:	f1a2 0154 	sub.w	r1, r2, #84	; 0x54
   1a718:	4b5a      	ldr	r3, [pc, #360]	; (1a884 <_lv_obj_get_style_int+0x1f4>)
   1a71a:	2201      	movs	r2, #1
   1a71c:	408a      	lsls	r2, r1
   1a71e:	421a      	tst	r2, r3
   1a720:	d0e3      	beq.n	1a6ea <_lv_obj_get_style_int+0x5a>
                    if(list->blend_mode_all_normal) def = true;
   1a722:	79a2      	ldrb	r2, [r4, #6]
   1a724:	e08c      	b.n	1a840 <_lv_obj_get_style_int+0x1b0>
   1a726:	3a31      	subs	r2, #49	; 0x31
   1a728:	2a02      	cmp	r2, #2
   1a72a:	d87d      	bhi.n	1a828 <_lv_obj_get_style_int+0x198>
   1a72c:	a301      	add	r3, pc, #4	; (adr r3, 1a734 <_lv_obj_get_style_int+0xa4>)
   1a72e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1a732:	bf00      	nop
   1a734:	0001a82d 	.word	0x0001a82d
   1a738:	0001a723 	.word	0x0001a723
   1a73c:	0001a831 	.word	0x0001a831
   1a740:	3a01      	subs	r2, #1
   1a742:	2a17      	cmp	r2, #23
   1a744:	d8d1      	bhi.n	1a6ea <_lv_obj_get_style_int+0x5a>
   1a746:	a301      	add	r3, pc, #4	; (adr r3, 1a74c <_lv_obj_get_style_int+0xbc>)
   1a748:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1a74c:	0001a837 	.word	0x0001a837
   1a750:	0001a7fb 	.word	0x0001a7fb
   1a754:	0001a6eb 	.word	0x0001a6eb
   1a758:	0001a803 	.word	0x0001a803
   1a75c:	0001a803 	.word	0x0001a803
   1a760:	0001a803 	.word	0x0001a803
   1a764:	0001a803 	.word	0x0001a803
   1a768:	0001a6eb 	.word	0x0001a6eb
   1a76c:	0001a6eb 	.word	0x0001a6eb
   1a770:	0001a6eb 	.word	0x0001a6eb
   1a774:	0001a6eb 	.word	0x0001a6eb
   1a778:	0001a6eb 	.word	0x0001a6eb
   1a77c:	0001a6eb 	.word	0x0001a6eb
   1a780:	0001a6eb 	.word	0x0001a6eb
   1a784:	0001a6eb 	.word	0x0001a6eb
   1a788:	0001a847 	.word	0x0001a847
   1a78c:	0001a847 	.word	0x0001a847
   1a790:	0001a847 	.word	0x0001a847
   1a794:	0001a847 	.word	0x0001a847
   1a798:	0001a6eb 	.word	0x0001a6eb
   1a79c:	0001a84b 	.word	0x0001a84b
   1a7a0:	0001a84b 	.word	0x0001a84b
   1a7a4:	0001a84b 	.word	0x0001a84b
   1a7a8:	0001a84b 	.word	0x0001a84b
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a7ac:	2a20      	cmp	r2, #32
   1a7ae:	d0b8      	beq.n	1a722 <_lv_obj_get_style_int+0x92>
   1a7b0:	e79b      	b.n	1a6ea <_lv_obj_get_style_int+0x5a>
   1a7b2:	2a72      	cmp	r2, #114	; 0x72
   1a7b4:	dc0b      	bgt.n	1a7ce <_lv_obj_get_style_int+0x13e>
   1a7b6:	2a53      	cmp	r2, #83	; 0x53
   1a7b8:	dcac      	bgt.n	1a714 <_lv_obj_get_style_int+0x84>
   1a7ba:	2a42      	cmp	r2, #66	; 0x42
   1a7bc:	d0b1      	beq.n	1a722 <_lv_obj_get_style_int+0x92>
   1a7be:	2a50      	cmp	r2, #80	; 0x50
   1a7c0:	d03d      	beq.n	1a83e <_lv_obj_get_style_int+0x1ae>
   1a7c2:	2a40      	cmp	r2, #64	; 0x40
   1a7c4:	d191      	bne.n	1a6ea <_lv_obj_get_style_int+0x5a>
                    if(list->outline_width_zero) def = true;
   1a7c6:	79e2      	ldrb	r2, [r4, #7]
                    if(list->pad_all_zero) def = true;
   1a7c8:	f012 0f01 	tst.w	r2, #1
   1a7cc:	e00c      	b.n	1a7e8 <_lv_obj_get_style_int+0x158>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a7ce:	454a      	cmp	r2, r9
   1a7d0:	d03f      	beq.n	1a852 <_lv_obj_get_style_int+0x1c2>
   1a7d2:	dc0c      	bgt.n	1a7ee <_lv_obj_get_style_int+0x15e>
   1a7d4:	2a91      	cmp	r2, #145	; 0x91
   1a7d6:	d0a4      	beq.n	1a722 <_lv_obj_get_style_int+0x92>
   1a7d8:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
   1a7dc:	3a80      	subs	r2, #128	; 0x80
   1a7de:	2a01      	cmp	r2, #1
   1a7e0:	d883      	bhi.n	1a6ea <_lv_obj_get_style_int+0x5a>
                    if(list->text_space_zero) def = true;
   1a7e2:	79e2      	ldrb	r2, [r4, #7]
                    if(list->border_width_zero) def = true;
   1a7e4:	f012 0f20 	tst.w	r2, #32
                    if(list->text_decor_none) def = true;
   1a7e8:	f43f af7f 	beq.w	1a6ea <_lv_obj_get_style_int+0x5a>
   1a7ec:	e00e      	b.n	1a80c <_lv_obj_get_style_int+0x17c>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   1a7ee:	4552      	cmp	r2, sl
   1a7f0:	d097      	beq.n	1a722 <_lv_obj_get_style_int+0x92>
   1a7f2:	f248 01a0 	movw	r1, #32928	; 0x80a0
   1a7f6:	428a      	cmp	r2, r1
   1a7f8:	e7d9      	b.n	1a7ae <_lv_obj_get_style_int+0x11e>
                    if(list->clip_corner_off) def = true;
   1a7fa:	7962      	ldrb	r2, [r4, #5]
                    if(list->text_decor_none) def = true;
   1a7fc:	f012 0f40 	tst.w	r2, #64	; 0x40
   1a800:	e7f2      	b.n	1a7e8 <_lv_obj_get_style_int+0x158>
                    if(list->transform_all_zero) def = true;
   1a802:	f994 2005 	ldrsb.w	r2, [r4, #5]
                    if(list->border_post_off) def = true;
   1a806:	2a00      	cmp	r2, #0
   1a808:	f6bf af6f 	bge.w	1a6ea <_lv_obj_get_style_int+0x5a>
    prop = prop & (~LV_STYLE_STATE_MASK);
   1a80c:	f425 45fe 	bic.w	r5, r5, #32512	; 0x7f00
    switch(prop) {
   1a810:	2d22      	cmp	r5, #34	; 0x22
    prop = prop & (~LV_STYLE_STATE_MASK);
   1a812:	b2ab      	uxth	r3, r5
    switch(prop) {
   1a814:	d030      	beq.n	1a878 <_lv_obj_get_style_int+0x1e8>
   1a816:	d828      	bhi.n	1a86a <_lv_obj_get_style_int+0x1da>
   1a818:	2b03      	cmp	r3, #3
   1a81a:	d02f      	beq.n	1a87c <_lv_obj_get_style_int+0x1ec>
            return LV_IMG_ZOOM_NONE;
   1a81c:	2b07      	cmp	r3, #7
   1a81e:	bf14      	ite	ne
   1a820:	2000      	movne	r0, #0
   1a822:	f44f 7080 	moveq.w	r0, #256	; 0x100
   1a826:	e772      	b.n	1a70e <_lv_obj_get_style_int+0x7e>
                    if(list->border_width_zero) def = true;
   1a828:	79a2      	ldrb	r2, [r4, #6]
   1a82a:	e7db      	b.n	1a7e4 <_lv_obj_get_style_int+0x154>
                    if(list->border_side_full) def = true;
   1a82c:	79a2      	ldrb	r2, [r4, #6]
   1a82e:	e7e5      	b.n	1a7fc <_lv_obj_get_style_int+0x16c>
                    if(list->border_post_off) def = true;
   1a830:	f994 2006 	ldrsb.w	r2, [r4, #6]
   1a834:	e7e7      	b.n	1a806 <_lv_obj_get_style_int+0x176>
                    if(list->radius_zero) def = true;
   1a836:	7962      	ldrb	r2, [r4, #5]
   1a838:	f012 0f10 	tst.w	r2, #16
   1a83c:	e7d4      	b.n	1a7e8 <_lv_obj_get_style_int+0x158>
                    if(list->shadow_width_zero) def = true;
   1a83e:	79e2      	ldrb	r2, [r4, #7]
                    if(list->blend_mode_all_normal) def = true;
   1a840:	f012 0f04 	tst.w	r2, #4
   1a844:	e7d0      	b.n	1a7e8 <_lv_obj_get_style_int+0x158>
                    if(list->pad_all_zero) def = true;
   1a846:	79a2      	ldrb	r2, [r4, #6]
   1a848:	e7be      	b.n	1a7c8 <_lv_obj_get_style_int+0x138>
                    if(list->margin_all_zero) def = true;
   1a84a:	79a2      	ldrb	r2, [r4, #6]
   1a84c:	f012 0f02 	tst.w	r2, #2
   1a850:	e7ca      	b.n	1a7e8 <_lv_obj_get_style_int+0x158>
                    if(list->text_decor_none) def = true;
   1a852:	79e2      	ldrb	r2, [r4, #7]
   1a854:	e7d2      	b.n	1a7fc <_lv_obj_get_style_int+0x16c>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   1a856:	f018 0f80 	tst.w	r8, #128	; 0x80
   1a85a:	d0d7      	beq.n	1a80c <_lv_obj_get_style_int+0x17c>
        if(part != LV_OBJ_PART_MAIN) {
   1a85c:	f1bb 0f00 	cmp.w	fp, #0
   1a860:	d100      	bne.n	1a864 <_lv_obj_get_style_int+0x1d4>
    return obj->parent;
   1a862:	6836      	ldr	r6, [r6, #0]
{
   1a864:	f04f 0b00 	mov.w	fp, #0
   1a868:	e71f      	b.n	1a6aa <_lv_obj_get_style_int+0x1a>
    switch(prop) {
   1a86a:	2b31      	cmp	r3, #49	; 0x31
   1a86c:	d008      	beq.n	1a880 <_lv_obj_get_style_int+0x1f0>
            return LV_DPI / 8;
   1a86e:	2bc0      	cmp	r3, #192	; 0xc0
   1a870:	bf14      	ite	ne
   1a872:	2000      	movne	r0, #0
   1a874:	2010      	moveq	r0, #16
   1a876:	e74a      	b.n	1a70e <_lv_obj_get_style_int+0x7e>
            return 255;
   1a878:	20ff      	movs	r0, #255	; 0xff
   1a87a:	e748      	b.n	1a70e <_lv_obj_get_style_int+0x7e>
    switch(prop) {
   1a87c:	2006      	movs	r0, #6
   1a87e:	e746      	b.n	1a70e <_lv_obj_get_style_int+0x7e>
            return LV_BORDER_SIDE_FULL;
   1a880:	200f      	movs	r0, #15
   1a882:	e744      	b.n	1a70e <_lv_obj_get_style_int+0x7e>
   1a884:	40001001 	.word	0x40001001

0001a888 <update_style_cache>:
 * @param obj pointer to an obejct
 * @param part the part of the object
 * @param prop the property which triggered the update
 */
static void update_style_cache(lv_obj_t * obj, uint8_t part, uint16_t prop)
{
   1a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a88a:	4605      	mov	r5, r0
    if(style_prop_is_cacheble(prop) == false) return;
   1a88c:	4610      	mov	r0, r2
{
   1a88e:	460e      	mov	r6, r1
    if(style_prop_is_cacheble(prop) == false) return;
   1a890:	f7ff fb9a 	bl	19fc8 <style_prop_is_cacheble>
   1a894:	2800      	cmp	r0, #0
   1a896:	f000 80fe 	beq.w	1aa96 <update_style_cache+0x20e>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1a89a:	4628      	mov	r0, r5
   1a89c:	f00b fe42 	bl	26524 <lv_obj_get_style_list>

    bool ignore_cache_ori = list->ignore_cache;
   1a8a0:	7943      	ldrb	r3, [r0, #5]
   1a8a2:	f3c3 07c0 	ubfx	r7, r3, #3, #1
    list->ignore_cache = 1;
   1a8a6:	f023 0328 	bic.w	r3, r3, #40	; 0x28
   1a8aa:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1a8ae:	4604      	mov	r4, r0
    list->ignore_cache = 1;
   1a8b0:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1a8b2:	f248 0282 	movw	r2, #32898	; 0x8082
   1a8b6:	4631      	mov	r1, r6
   1a8b8:	4628      	mov	r0, r5
   1a8ba:	f7ff fee9 	bl	1a690 <_lv_obj_get_style_int>
#if LV_USE_OPA_SCALE
    list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
#else
    list->opa_scale_cover    = 1;
#endif
    list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   1a8be:	b2c0      	uxtb	r0, r0
   1a8c0:	79e3      	ldrb	r3, [r4, #7]
   1a8c2:	fab0 f080 	clz	r0, r0
   1a8c6:	0940      	lsrs	r0, r0, #5
   1a8c8:	f360 1386 	bfi	r3, r0, #6, #1
   1a8cc:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1a8ce:	f248 028e 	movw	r2, #32910	; 0x808e
   1a8d2:	4631      	mov	r1, r6
   1a8d4:	4628      	mov	r0, r5
   1a8d6:	f00b fed7 	bl	26688 <_lv_obj_get_style_ptr>
    list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == LV_THEME_DEFAULT_FONT_NORMAL ? 1 : 0;

    list->text_space_zero = 1;
   1a8da:	4b96      	ldr	r3, [pc, #600]	; (1ab34 <update_style_cache+0x2ac>)
   1a8dc:	4283      	cmp	r3, r0
   1a8de:	bf0c      	ite	eq
   1a8e0:	23a0      	moveq	r3, #160	; 0xa0
   1a8e2:	2320      	movne	r3, #32
   1a8e4:	79e0      	ldrb	r0, [r4, #7]
   1a8e6:	f000 005f 	and.w	r0, r0, #95	; 0x5f
   1a8ea:	4303      	orrs	r3, r0
   1a8ec:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1a8ee:	f248 0280 	movw	r2, #32896	; 0x8080
   1a8f2:	4631      	mov	r1, r6
   1a8f4:	4628      	mov	r0, r5
   1a8f6:	f7ff fecb 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   1a8fa:	2800      	cmp	r0, #0
   1a8fc:	f000 80cc 	beq.w	1aa98 <update_style_cache+0x210>
       lv_obj_get_style_text_line_space(obj, part) != 0) {
        list->text_space_zero = 0;
   1a900:	79e3      	ldrb	r3, [r4, #7]
   1a902:	f36f 1345 	bfc	r3, #5, #1
   1a906:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1a908:	222c      	movs	r2, #44	; 0x2c
   1a90a:	4631      	mov	r1, r6
   1a90c:	4628      	mov	r0, r5
   1a90e:	f00b fe56 	bl	265be <_lv_obj_get_style_opa>
    }


    lv_opa_t bg_opa = lv_obj_get_style_bg_opa(obj, part);
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   1a912:	f1a0 02ff 	sub.w	r2, r0, #255	; 0xff
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   1a916:	fab0 f080 	clz	r0, r0
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   1a91a:	4253      	negs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   1a91c:	ea4f 1050 	mov.w	r0, r0, lsr #5
    list->bg_opa_cover     = bg_opa == LV_OPA_COVER ? 1 : 0;
   1a920:	4153      	adcs	r3, r2
    list->bg_opa_transp    = bg_opa == LV_OPA_TRANSP ? 1 : 0;
   1a922:	00c0      	lsls	r0, r0, #3
   1a924:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   1a928:	79a3      	ldrb	r3, [r4, #6]
   1a92a:	f023 0318 	bic.w	r3, r3, #24
   1a92e:	4318      	orrs	r0, r3
   1a930:	71a0      	strb	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1a932:	2230      	movs	r2, #48	; 0x30
   1a934:	4631      	mov	r1, r6
   1a936:	4628      	mov	r0, r5
   1a938:	f7ff feaa 	bl	1a690 <_lv_obj_get_style_int>

    list->border_width_zero = lv_obj_get_style_border_width(obj, part) == 0 ? 1 : 0;
   1a93c:	79a3      	ldrb	r3, [r4, #6]
   1a93e:	fab0 f080 	clz	r0, r0
   1a942:	0940      	lsrs	r0, r0, #5
   1a944:	f360 1345 	bfi	r3, r0, #5, #1
   1a948:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   1a94a:	2231      	movs	r2, #49	; 0x31
   1a94c:	4631      	mov	r1, r6
   1a94e:	4628      	mov	r0, r5
   1a950:	f7ff fe9e 	bl	1a690 <_lv_obj_get_style_int>
    list->border_side_full = lv_obj_get_style_border_side(obj, part) == LV_BORDER_SIDE_FULL ? 1 : 0;
   1a954:	b2c0      	uxtb	r0, r0
   1a956:	f1a0 010f 	sub.w	r1, r0, #15
   1a95a:	4248      	negs	r0, r1
   1a95c:	79a3      	ldrb	r3, [r4, #6]
   1a95e:	4148      	adcs	r0, r1
   1a960:	f360 1386 	bfi	r3, r0, #6, #1
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1a964:	2233      	movs	r2, #51	; 0x33
   1a966:	71a3      	strb	r3, [r4, #6]
   1a968:	4631      	mov	r1, r6
   1a96a:	4628      	mov	r0, r5
   1a96c:	f7ff fe90 	bl	1a690 <_lv_obj_get_style_int>
    list->border_post_off = lv_obj_get_style_border_post(obj, part) == 0 ? 1 : 0;
   1a970:	79a3      	ldrb	r3, [r4, #6]
   1a972:	fab0 f080 	clz	r0, r0
   1a976:	0940      	lsrs	r0, r0, #5
   1a978:	f360 13c7 	bfi	r3, r0, #7, #1
   1a97c:	71a3      	strb	r3, [r4, #6]
    list->clip_corner_off   = lv_obj_get_style_clip_corner(obj, part) == false ? 1 : 0;
   1a97e:	4631      	mov	r1, r6
   1a980:	4628      	mov	r0, r5
   1a982:	f00b fe14 	bl	265ae <lv_obj_get_style_clip_corner>
   1a986:	7963      	ldrb	r3, [r4, #5]
   1a988:	f080 0001 	eor.w	r0, r0, #1
   1a98c:	f360 1386 	bfi	r3, r0, #6, #1
   1a990:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_BLEND_MODE, image_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   1a992:	f248 02ad 	movw	r2, #32941	; 0x80ad
   1a996:	4631      	mov	r1, r6
   1a998:	4628      	mov	r0, r5
   1a99a:	f00b fe10 	bl	265be <_lv_obj_get_style_opa>
    list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   1a99e:	79e3      	ldrb	r3, [r4, #7]
   1a9a0:	fab0 f080 	clz	r0, r0
   1a9a4:	0940      	lsrs	r0, r0, #5
   1a9a6:	f360 1304 	bfi	r3, r0, #4, #1
   1a9aa:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   1a9ac:	2240      	movs	r2, #64	; 0x40
   1a9ae:	4631      	mov	r1, r6
   1a9b0:	4628      	mov	r0, r5
   1a9b2:	f7ff fe6d 	bl	1a690 <_lv_obj_get_style_int>
    list->outline_width_zero    = lv_obj_get_style_outline_width(obj, part) == 0 ? 1 : 0;
   1a9b6:	79e3      	ldrb	r3, [r4, #7]
   1a9b8:	fab0 f080 	clz	r0, r0
   1a9bc:	0940      	lsrs	r0, r0, #5
   1a9be:	f360 0300 	bfi	r3, r0, #0, #1
   1a9c2:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(PATTERN_IMAGE, pattern_image, const void *, _ptr, scalar)
   1a9c4:	226e      	movs	r2, #110	; 0x6e
   1a9c6:	4631      	mov	r1, r6
   1a9c8:	4628      	mov	r0, r5
   1a9ca:	f00b fe5d 	bl	26688 <_lv_obj_get_style_ptr>
    list->pattern_img_null    = lv_obj_get_style_pattern_image(obj, part) == NULL ? 1 : 0;
   1a9ce:	79e3      	ldrb	r3, [r4, #7]
   1a9d0:	fab0 f080 	clz	r0, r0
   1a9d4:	0940      	lsrs	r0, r0, #5
   1a9d6:	f360 0341 	bfi	r3, r0, #1, #1
   1a9da:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1a9dc:	2201      	movs	r2, #1
   1a9de:	4631      	mov	r1, r6
   1a9e0:	4628      	mov	r0, r5
   1a9e2:	f7ff fe55 	bl	1a690 <_lv_obj_get_style_int>
    list->radius_zero    = lv_obj_get_style_radius(obj, part) == 0 ? 1 : 0;
   1a9e6:	7963      	ldrb	r3, [r4, #5]
   1a9e8:	fab0 f080 	clz	r0, r0
   1a9ec:	0940      	lsrs	r0, r0, #5
   1a9ee:	f360 1304 	bfi	r3, r0, #4, #1
   1a9f2:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   1a9f4:	2250      	movs	r2, #80	; 0x50
   1a9f6:	4631      	mov	r1, r6
   1a9f8:	4628      	mov	r0, r5
   1a9fa:	f7ff fe49 	bl	1a690 <_lv_obj_get_style_int>
    list->shadow_width_zero    = lv_obj_get_style_shadow_width(obj, part) == 0 ? 1 : 0;
   1a9fe:	79e3      	ldrb	r3, [r4, #7]
   1aa00:	fab0 f080 	clz	r0, r0
   1aa04:	0940      	lsrs	r0, r0, #5
   1aa06:	f360 0382 	bfi	r3, r0, #2, #1
   1aa0a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   1aa0c:	227f      	movs	r2, #127	; 0x7f
   1aa0e:	4631      	mov	r1, r6
   1aa10:	4628      	mov	r0, r5
   1aa12:	f00b fe39 	bl	26688 <_lv_obj_get_style_ptr>
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;


    list->transform_all_zero  = 1;
   1aa16:	6863      	ldr	r3, [r4, #4]
    list->value_txt_str    = lv_obj_get_style_value_str(obj, part) == NULL ? 1 : 0;
   1aa18:	fab0 f080 	clz	r0, r0
   1aa1c:	0940      	lsrs	r0, r0, #5
    list->transform_all_zero  = 1;
   1aa1e:	06c0      	lsls	r0, r0, #27
   1aa20:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
   1aa24:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
   1aa28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1aa2c:	4318      	orrs	r0, r3
   1aa2e:	6060      	str	r0, [r4, #4]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   1aa30:	2206      	movs	r2, #6
   1aa32:	4631      	mov	r1, r6
   1aa34:	4628      	mov	r0, r5
   1aa36:	f7ff fe2b 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
   1aa3a:	2800      	cmp	r0, #0
   1aa3c:	d036      	beq.n	1aaac <update_style_cache+0x224>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
       lv_obj_get_style_transform_height(obj, part) != 0 ||
       lv_obj_get_style_transform_zoom(obj, part) != LV_IMG_ZOOM_NONE) {
        list->transform_all_zero  = 0;
   1aa3e:	7963      	ldrb	r3, [r4, #5]
   1aa40:	f36f 13c7 	bfc	r3, #7, #1
   1aa44:	7163      	strb	r3, [r4, #5]
    }

    list->pad_all_zero  = 1;
   1aa46:	79a3      	ldrb	r3, [r4, #6]
   1aa48:	f043 0301 	orr.w	r3, r3, #1
   1aa4c:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1aa4e:	2210      	movs	r2, #16
   1aa50:	4631      	mov	r1, r6
   1aa52:	4628      	mov	r0, r5
   1aa54:	f7ff fe1c 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
   1aa58:	2800      	cmp	r0, #0
   1aa5a:	d03e      	beq.n	1aada <update_style_cache+0x252>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
       lv_obj_get_style_pad_left(obj, part) != 0 ||
       lv_obj_get_style_pad_right(obj, part) != 0) {
        list->pad_all_zero  = 0;
   1aa5c:	79a3      	ldrb	r3, [r4, #6]
   1aa5e:	f36f 0300 	bfc	r3, #0, #1
   1aa62:	71a3      	strb	r3, [r4, #6]
    }

    list->margin_all_zero  = 1;
   1aa64:	79a3      	ldrb	r3, [r4, #6]
   1aa66:	f043 0302 	orr.w	r3, r3, #2
   1aa6a:	71a3      	strb	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   1aa6c:	2215      	movs	r2, #21
   1aa6e:	4631      	mov	r1, r6
   1aa70:	4628      	mov	r0, r5
   1aa72:	f7ff fe0d 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
   1aa76:	2800      	cmp	r0, #0
   1aa78:	d045      	beq.n	1ab06 <update_style_cache+0x27e>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
       lv_obj_get_style_margin_left(obj, part) != 0 ||
       lv_obj_get_style_margin_right(obj, part) != 0) {
        list->margin_all_zero  = 0;
   1aa7a:	79a3      	ldrb	r3, [r4, #6]
   1aa7c:	f36f 0341 	bfc	r3, #1, #1
   1aa80:	71a3      	strb	r3, [r4, #6]
       lv_obj_get_style_shadow_blend_mode(obj, part) != LV_BLEND_MODE_NORMAL) {
        list->blend_mode_all_normal = 0;
    }
#endif
    list->ignore_cache = ignore_cache_ori;
    list->valid_cache = 1;
   1aa82:	4b2d      	ldr	r3, [pc, #180]	; (1ab38 <update_style_cache+0x2b0>)
   1aa84:	ea43 27c7 	orr.w	r7, r3, r7, lsl #11
   1aa88:	6863      	ldr	r3, [r4, #4]
   1aa8a:	f423 2381 	bic.w	r3, r3, #264192	; 0x40800
   1aa8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   1aa92:	431f      	orrs	r7, r3
   1aa94:	6067      	str	r7, [r4, #4]
}
   1aa96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1aa98:	f248 0281 	movw	r2, #32897	; 0x8081
   1aa9c:	4631      	mov	r1, r6
   1aa9e:	4628      	mov	r0, r5
   1aaa0:	f7ff fdf6 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   1aaa4:	2800      	cmp	r0, #0
   1aaa6:	f47f af2b 	bne.w	1a900 <update_style_cache+0x78>
   1aaaa:	e72d      	b.n	1a908 <update_style_cache+0x80>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   1aaac:	2204      	movs	r2, #4
   1aaae:	4631      	mov	r1, r6
   1aab0:	4628      	mov	r0, r5
   1aab2:	f7ff fded 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_transform_angle(obj, part) != 0 ||
   1aab6:	2800      	cmp	r0, #0
   1aab8:	d1c1      	bne.n	1aa3e <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   1aaba:	2205      	movs	r2, #5
   1aabc:	4631      	mov	r1, r6
   1aabe:	4628      	mov	r0, r5
   1aac0:	f7ff fde6 	bl	1a690 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_width(obj, part) != 0 ||
   1aac4:	2800      	cmp	r0, #0
   1aac6:	d1ba      	bne.n	1aa3e <update_style_cache+0x1b6>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   1aac8:	2207      	movs	r2, #7
   1aaca:	4631      	mov	r1, r6
   1aacc:	4628      	mov	r0, r5
   1aace:	f7ff fddf 	bl	1a690 <_lv_obj_get_style_int>
       lv_obj_get_style_transform_height(obj, part) != 0 ||
   1aad2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1aad6:	d1b2      	bne.n	1aa3e <update_style_cache+0x1b6>
   1aad8:	e7b5      	b.n	1aa46 <update_style_cache+0x1be>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1aada:	2211      	movs	r2, #17
   1aadc:	4631      	mov	r1, r6
   1aade:	4628      	mov	r0, r5
   1aae0:	f7ff fdd6 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_pad_top(obj, part) != 0 ||
   1aae4:	2800      	cmp	r0, #0
   1aae6:	d1b9      	bne.n	1aa5c <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1aae8:	2212      	movs	r2, #18
   1aaea:	4631      	mov	r1, r6
   1aaec:	4628      	mov	r0, r5
   1aaee:	f7ff fdcf 	bl	1a690 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_bottom(obj, part) != 0 ||
   1aaf2:	2800      	cmp	r0, #0
   1aaf4:	d1b2      	bne.n	1aa5c <update_style_cache+0x1d4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1aaf6:	2213      	movs	r2, #19
   1aaf8:	4631      	mov	r1, r6
   1aafa:	4628      	mov	r0, r5
   1aafc:	f7ff fdc8 	bl	1a690 <_lv_obj_get_style_int>
       lv_obj_get_style_pad_left(obj, part) != 0 ||
   1ab00:	2800      	cmp	r0, #0
   1ab02:	d1ab      	bne.n	1aa5c <update_style_cache+0x1d4>
   1ab04:	e7ae      	b.n	1aa64 <update_style_cache+0x1dc>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   1ab06:	2216      	movs	r2, #22
   1ab08:	4631      	mov	r1, r6
   1ab0a:	4628      	mov	r0, r5
   1ab0c:	f7ff fdc0 	bl	1a690 <_lv_obj_get_style_int>
    if(lv_obj_get_style_margin_top(obj, part) != 0 ||
   1ab10:	2800      	cmp	r0, #0
   1ab12:	d1b2      	bne.n	1aa7a <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   1ab14:	2217      	movs	r2, #23
   1ab16:	4631      	mov	r1, r6
   1ab18:	4628      	mov	r0, r5
   1ab1a:	f7ff fdb9 	bl	1a690 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_bottom(obj, part) != 0 ||
   1ab1e:	2800      	cmp	r0, #0
   1ab20:	d1ab      	bne.n	1aa7a <update_style_cache+0x1f2>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   1ab22:	2218      	movs	r2, #24
   1ab24:	4631      	mov	r1, r6
   1ab26:	4628      	mov	r0, r5
   1ab28:	f7ff fdb2 	bl	1a690 <_lv_obj_get_style_int>
       lv_obj_get_style_margin_left(obj, part) != 0 ||
   1ab2c:	2800      	cmp	r0, #0
   1ab2e:	d1a4      	bne.n	1aa7a <update_style_cache+0x1f2>
   1ab30:	e7a7      	b.n	1aa82 <update_style_cache+0x1fa>
   1ab32:	bf00      	nop
   1ab34:	20000800 	.word	0x20000800
   1ab38:	00040400 	.word	0x00040400

0001ab3c <lv_obj_refresh_style>:
{
   1ab3c:	b570      	push	{r4, r5, r6, lr}
   1ab3e:	4605      	mov	r5, r0
 * The cache will be updated when a cached property asked nest time
 * @param obj pointer to an object
 */
static void invalidate_style_cache(lv_obj_t * obj, uint8_t part, lv_style_property_t prop)
{
    if(style_prop_is_cacheble(prop) == false) return;
   1ab40:	4610      	mov	r0, r2
{
   1ab42:	4614      	mov	r4, r2
    if(style_prop_is_cacheble(prop) == false) return;
   1ab44:	f7ff fa40 	bl	19fc8 <style_prop_is_cacheble>
   1ab48:	2800      	cmp	r0, #0
   1ab4a:	d16d      	bne.n	1ac28 <lv_obj_refresh_style+0xec>
    switch(prop) {
   1ab4c:	2c7f      	cmp	r4, #127	; 0x7f
   1ab4e:	d85a      	bhi.n	1ac06 <lv_obj_refresh_style+0xca>
   1ab50:	2c6f      	cmp	r4, #111	; 0x6f
   1ab52:	d81e      	bhi.n	1ab92 <lv_obj_refresh_style+0x56>
   1ab54:	2c5c      	cmp	r4, #92	; 0x5c
   1ab56:	d84c      	bhi.n	1abf2 <lv_obj_refresh_style+0xb6>
   1ab58:	2c3f      	cmp	r4, #63	; 0x3f
   1ab5a:	d841      	bhi.n	1abe0 <lv_obj_refresh_style+0xa4>
   1ab5c:	2c07      	cmp	r4, #7
   1ab5e:	d84d      	bhi.n	1abfc <lv_obj_refresh_style+0xc0>
   1ab60:	2c01      	cmp	r4, #1
   1ab62:	d946      	bls.n	1abf2 <lv_obj_refresh_style+0xb6>
        lv_obj_invalidate(obj);
   1ab64:	4628      	mov	r0, r5
   1ab66:	f00b fbb4 	bl	262d2 <lv_obj_invalidate>
        obj->signal_cb(obj, LV_SIGNAL_STYLE_CHG, NULL);
   1ab6a:	69eb      	ldr	r3, [r5, #28]
   1ab6c:	2200      	movs	r2, #0
   1ab6e:	2104      	movs	r1, #4
   1ab70:	4628      	mov	r0, r5
   1ab72:	4798      	blx	r3
        switch(prop) {
   1ab74:	2c18      	cmp	r4, #24
   1ab76:	f200 808d 	bhi.w	1ac94 <lv_obj_refresh_style+0x158>
   1ab7a:	2c14      	cmp	r4, #20
   1ab7c:	f240 808d 	bls.w	1ac9a <lv_obj_refresh_style+0x15e>
                if(obj->parent) obj->parent->signal_cb(obj->parent, LV_SIGNAL_CHILD_CHG, NULL);
   1ab80:	6828      	ldr	r0, [r5, #0]
   1ab82:	2800      	cmp	r0, #0
   1ab84:	f000 8089 	beq.w	1ac9a <lv_obj_refresh_style+0x15e>
   1ab88:	69c3      	ldr	r3, [r0, #28]
   1ab8a:	2200      	movs	r2, #0
   1ab8c:	2101      	movs	r1, #1
   1ab8e:	4798      	blx	r3
   1ab90:	e083      	b.n	1ac9a <lv_obj_refresh_style+0x15e>
   1ab92:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
   1ab96:	2b0f      	cmp	r3, #15
   1ab98:	d82b      	bhi.n	1abf2 <lv_obj_refresh_style+0xb6>
   1ab9a:	a201      	add	r2, pc, #4	; (adr r2, 1aba0 <lv_obj_refresh_style+0x64>)
   1ab9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1aba0:	0001ab65 	.word	0x0001ab65
   1aba4:	0001ab65 	.word	0x0001ab65
   1aba8:	0001abf3 	.word	0x0001abf3
   1abac:	0001ab65 	.word	0x0001ab65
   1abb0:	0001ab65 	.word	0x0001ab65
   1abb4:	0001ab65 	.word	0x0001ab65
   1abb8:	0001abf3 	.word	0x0001abf3
   1abbc:	0001abf3 	.word	0x0001abf3
   1abc0:	0001abf3 	.word	0x0001abf3
   1abc4:	0001abf3 	.word	0x0001abf3
   1abc8:	0001abf3 	.word	0x0001abf3
   1abcc:	0001abf3 	.word	0x0001abf3
   1abd0:	0001ab65 	.word	0x0001ab65
   1abd4:	0001abf3 	.word	0x0001abf3
   1abd8:	0001ab65 	.word	0x0001ab65
   1abdc:	0001ab65 	.word	0x0001ab65
   1abe0:	f1a4 0240 	sub.w	r2, r4, #64	; 0x40
   1abe4:	b293      	uxth	r3, r2
   1abe6:	2201      	movs	r2, #1
   1abe8:	409a      	lsls	r2, r3
   1abea:	4b32      	ldr	r3, [pc, #200]	; (1acb4 <lv_obj_refresh_style+0x178>)
   1abec:	4013      	ands	r3, r2
   1abee:	2b00      	cmp	r3, #0
   1abf0:	d1b8      	bne.n	1ab64 <lv_obj_refresh_style+0x28>
        lv_obj_invalidate(obj);
   1abf2:	4628      	mov	r0, r5
}
   1abf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        lv_obj_invalidate(obj);
   1abf8:	f00b bb6b 	b.w	262d2 <lv_obj_invalidate>
    switch(prop) {
   1abfc:	f1a4 0310 	sub.w	r3, r4, #16
   1ac00:	2b08      	cmp	r3, #8
   1ac02:	d8f6      	bhi.n	1abf2 <lv_obj_refresh_style+0xb6>
   1ac04:	e7ae      	b.n	1ab64 <lv_obj_refresh_style+0x28>
   1ac06:	f248 0381 	movw	r3, #32897	; 0x8081
   1ac0a:	429c      	cmp	r4, r3
   1ac0c:	d808      	bhi.n	1ac20 <lv_obj_refresh_style+0xe4>
   1ac0e:	f248 037f 	movw	r3, #32895	; 0x807f
   1ac12:	429c      	cmp	r4, r3
   1ac14:	d8a6      	bhi.n	1ab64 <lv_obj_refresh_style+0x28>
   1ac16:	2c90      	cmp	r4, #144	; 0x90
   1ac18:	d0a4      	beq.n	1ab64 <lv_obj_refresh_style+0x28>
   1ac1a:	2cff      	cmp	r4, #255	; 0xff
   1ac1c:	d1e9      	bne.n	1abf2 <lv_obj_refresh_style+0xb6>
   1ac1e:	e7a1      	b.n	1ab64 <lv_obj_refresh_style+0x28>
   1ac20:	f248 038e 	movw	r3, #32910	; 0x808e
   1ac24:	429c      	cmp	r4, r3
   1ac26:	e7f9      	b.n	1ac1c <lv_obj_refresh_style+0xe0>

    if(part != LV_OBJ_PART_ALL) {
   1ac28:	29ff      	cmp	r1, #255	; 0xff
   1ac2a:	d016      	beq.n	1ac5a <lv_obj_refresh_style+0x11e>
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1ac2c:	4628      	mov	r0, r5
   1ac2e:	f00b fc79 	bl	26524 <lv_obj_get_style_list>
        if(list == NULL) return;
   1ac32:	2800      	cmp	r0, #0
   1ac34:	d08a      	beq.n	1ab4c <lv_obj_refresh_style+0x10>
        list->valid_cache = 0;
   1ac36:	7943      	ldrb	r3, [r0, #5]
   1ac38:	f36f 0382 	bfc	r3, #2, #1
   1ac3c:	7143      	strb	r3, [r0, #5]
        result = _lv_ll_get_head(&obj->child_ll);
   1ac3e:	1d28      	adds	r0, r5, #4
   1ac40:	f00f fc91 	bl	2a566 <_lv_ll_get_head>
    }

    lv_obj_t * child = lv_obj_get_child(obj, NULL);
    while(child) {
        update_style_cache_children(child);
        child = lv_obj_get_child(obj, child);
   1ac44:	4606      	mov	r6, r0
    while(child) {
   1ac46:	2800      	cmp	r0, #0
   1ac48:	d080      	beq.n	1ab4c <lv_obj_refresh_style+0x10>
        update_style_cache_children(child);
   1ac4a:	4630      	mov	r0, r6
   1ac4c:	f00b fd78 	bl	26740 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   1ac50:	4631      	mov	r1, r6
   1ac52:	4628      	mov	r0, r5
   1ac54:	f00b fc2f 	bl	264b6 <lv_obj_get_child>
   1ac58:	e7f4      	b.n	1ac44 <lv_obj_refresh_style+0x108>
   1ac5a:	2600      	movs	r6, #0
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1ac5c:	b2f1      	uxtb	r1, r6
   1ac5e:	4628      	mov	r0, r5
   1ac60:	f00b fc60 	bl	26524 <lv_obj_get_style_list>
            if(list == NULL) break;
   1ac64:	b130      	cbz	r0, 1ac74 <lv_obj_refresh_style+0x138>
            list->valid_cache = 0;
   1ac66:	7943      	ldrb	r3, [r0, #5]
   1ac68:	3601      	adds	r6, #1
   1ac6a:	f36f 0382 	bfc	r3, #2, #1
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1ac6e:	2e40      	cmp	r6, #64	; 0x40
            list->valid_cache = 0;
   1ac70:	7143      	strb	r3, [r0, #5]
        for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   1ac72:	d1f3      	bne.n	1ac5c <lv_obj_refresh_style+0x120>
   1ac74:	2640      	movs	r6, #64	; 0x40
            lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   1ac76:	4631      	mov	r1, r6
   1ac78:	4628      	mov	r0, r5
   1ac7a:	f00b fc53 	bl	26524 <lv_obj_get_style_list>
            if(list == NULL) break;
   1ac7e:	2800      	cmp	r0, #0
   1ac80:	d0dd      	beq.n	1ac3e <lv_obj_refresh_style+0x102>
            list->valid_cache = 0;
   1ac82:	7943      	ldrb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1ac84:	3601      	adds	r6, #1
   1ac86:	b2f6      	uxtb	r6, r6
            list->valid_cache = 0;
   1ac88:	f36f 0382 	bfc	r3, #2, #1
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1ac8c:	2eff      	cmp	r6, #255	; 0xff
            list->valid_cache = 0;
   1ac8e:	7143      	strb	r3, [r0, #5]
        for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   1ac90:	d1f1      	bne.n	1ac76 <lv_obj_refresh_style+0x13a>
   1ac92:	e7d4      	b.n	1ac3e <lv_obj_refresh_style+0x102>
        switch(prop) {
   1ac94:	2cff      	cmp	r4, #255	; 0xff
   1ac96:	f43f af73 	beq.w	1ab80 <lv_obj_refresh_style+0x44>
        lv_obj_invalidate(obj);
   1ac9a:	4628      	mov	r0, r5
   1ac9c:	f00b fb19 	bl	262d2 <lv_obj_invalidate>
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
   1aca0:	2cff      	cmp	r4, #255	; 0xff
   1aca2:	d001      	beq.n	1aca8 <lv_obj_refresh_style+0x16c>
   1aca4:	0423      	lsls	r3, r4, #16
   1aca6:	d504      	bpl.n	1acb2 <lv_obj_refresh_style+0x176>
   1aca8:	4628      	mov	r0, r5
}
   1acaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        if(prop == LV_STYLE_PROP_ALL || (prop & LV_STYLE_INHERIT_MASK)) refresh_children_style(obj);
   1acae:	f00b bc08 	b.w	264c2 <refresh_children_style>
}
   1acb2:	bd70      	pop	{r4, r5, r6, pc}
   1acb4:	100f1003 	.word	0x100f1003

0001acb8 <lv_obj_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
   1acb8:	2908      	cmp	r1, #8
{
   1acba:	b510      	push	{r4, lr}
   1acbc:	4604      	mov	r4, r0
    if(sign == LV_SIGNAL_GET_STYLE) {
   1acbe:	d108      	bne.n	1acd2 <lv_obj_signal+0x1a>
        if(info->part == LV_OBJ_PART_MAIN) info->result = &obj->style_list;
   1acc0:	7813      	ldrb	r3, [r2, #0]
   1acc2:	b91b      	cbnz	r3, 1accc <lv_obj_signal+0x14>
   1acc4:	3428      	adds	r4, #40	; 0x28
   1acc6:	6054      	str	r4, [r2, #4]
   1acc8:	2001      	movs	r0, #1
   1acca:	e011      	b.n	1acf0 <lv_obj_signal+0x38>
        else info->result = NULL;
   1accc:	2300      	movs	r3, #0
   1acce:	6053      	str	r3, [r2, #4]
   1acd0:	e7fa      	b.n	1acc8 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1acd2:	2907      	cmp	r1, #7
   1acd4:	d105      	bne.n	1ace2 <lv_obj_signal+0x2a>
}
   1acd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    else if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1acda:	4920      	ldr	r1, [pc, #128]	; (1ad5c <lv_obj_signal+0xa4>)
   1acdc:	4610      	mov	r0, r2
   1acde:	f00b bdb9 	b.w	26854 <lv_obj_handle_get_type_signal>
    if(sign == LV_SIGNAL_CHILD_CHG) {
   1ace2:	2901      	cmp	r1, #1
   1ace4:	d105      	bne.n	1acf2 <lv_obj_signal+0x3a>
    return (obj->protect & prot) == 0 ? false : true;
   1ace6:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
   1acea:	43c0      	mvns	r0, r0
   1acec:	f000 0001 	and.w	r0, r0, #1
}
   1acf0:	bd10      	pop	{r4, pc}
    else if(sign == LV_SIGNAL_REFR_EXT_DRAW_PAD) {
   1acf2:	2906      	cmp	r1, #6
   1acf4:	d109      	bne.n	1ad0a <lv_obj_signal+0x52>
        lv_coord_t d = lv_obj_get_draw_rect_ext_pad_size(obj, LV_OBJ_PART_MAIN);
   1acf6:	2100      	movs	r1, #0
   1acf8:	f00c f9a2 	bl	27040 <lv_obj_get_draw_rect_ext_pad_size>
        obj->ext_draw_pad = LV_MATH_MAX(obj->ext_draw_pad, d);
   1acfc:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
   1ad00:	4283      	cmp	r3, r0
   1ad02:	bfb8      	it	lt
   1ad04:	4603      	movlt	r3, r0
   1ad06:	8623      	strh	r3, [r4, #48]	; 0x30
   1ad08:	e7de      	b.n	1acc8 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1ad0a:	2904      	cmp	r1, #4
   1ad0c:	d102      	bne.n	1ad14 <lv_obj_signal+0x5c>
        lv_obj_refresh_ext_draw_pad(obj);
   1ad0e:	f00b fa6e 	bl	261ee <lv_obj_refresh_ext_draw_pad>
   1ad12:	e7d9      	b.n	1acc8 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_PRESSED) {
   1ad14:	290b      	cmp	r1, #11
   1ad16:	d103      	bne.n	1ad20 <lv_obj_signal+0x68>
        lv_obj_add_state(obj, LV_STATE_PRESSED);
   1ad18:	2110      	movs	r1, #16
   1ad1a:	f00c f97d 	bl	27018 <lv_obj_add_state>
   1ad1e:	e7d3      	b.n	1acc8 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_RELEASED || sign == LV_SIGNAL_PRESS_LOST) {
   1ad20:	f1a1 030d 	sub.w	r3, r1, #13
   1ad24:	2b01      	cmp	r3, #1
   1ad26:	d803      	bhi.n	1ad30 <lv_obj_signal+0x78>
        lv_obj_clear_state(obj, LV_STATE_PRESSED);
   1ad28:	2110      	movs	r1, #16
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
   1ad2a:	f00c f97f 	bl	2702c <lv_obj_clear_state>
   1ad2e:	e7cb      	b.n	1acc8 <lv_obj_signal+0x10>
    else if(sign == LV_SIGNAL_FOCUS) {
   1ad30:	2916      	cmp	r1, #22
   1ad32:	d108      	bne.n	1ad46 <lv_obj_signal+0x8e>
            obj = lv_obj_get_focused_obj(obj);
   1ad34:	f00c fa7b 	bl	2722e <lv_obj_get_focused_obj>
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
   1ad38:	2102      	movs	r1, #2
            obj = lv_obj_get_focused_obj(obj);
   1ad3a:	4604      	mov	r4, r0
            lv_obj_add_state(obj, LV_STATE_FOCUSED);
   1ad3c:	f00c f96c 	bl	27018 <lv_obj_add_state>
            lv_obj_clear_state(obj, LV_STATE_EDITED);
   1ad40:	2104      	movs	r1, #4
   1ad42:	4620      	mov	r0, r4
   1ad44:	e7f1      	b.n	1ad2a <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_DEFOCUS) {
   1ad46:	2917      	cmp	r1, #23
   1ad48:	d103      	bne.n	1ad52 <lv_obj_signal+0x9a>
        obj = lv_obj_get_focused_obj(obj);
   1ad4a:	f00c fa70 	bl	2722e <lv_obj_get_focused_obj>
        lv_obj_clear_state(obj, LV_STATE_FOCUSED | LV_STATE_EDITED);
   1ad4e:	2106      	movs	r1, #6
   1ad50:	e7eb      	b.n	1ad2a <lv_obj_signal+0x72>
    else if(sign == LV_SIGNAL_CLEANUP) {
   1ad52:	2900      	cmp	r1, #0
   1ad54:	d1b8      	bne.n	1acc8 <lv_obj_signal+0x10>
        lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1ad56:	f7ff fc4b 	bl	1a5f0 <lv_obj_clean_style_list>
   1ad5a:	e7b5      	b.n	1acc8 <lv_obj_signal+0x10>
   1ad5c:	0002fd35 	.word	0x0002fd35

0001ad60 <lv_refr_vdb_flush>:

/**
 * Flush the content of the VDB
 */
static void lv_refr_vdb_flush(void)
{
   1ad60:	b538      	push	{r3, r4, r5, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1ad62:	4d19      	ldr	r5, [pc, #100]	; (1adc8 <lv_refr_vdb_flush+0x68>)
   1ad64:	6828      	ldr	r0, [r5, #0]
   1ad66:	f00f f8f9 	bl	29f5c <lv_disp_get_buf>
   1ad6a:	4604      	mov	r4, r0

    /*In double buffered mode wait until the other buffer is flushed before flushing the current
     * one*/
    if(lv_disp_is_double_buf(disp_refr)) {
   1ad6c:	6828      	ldr	r0, [r5, #0]
   1ad6e:	f00f f8f7 	bl	29f60 <lv_disp_is_double_buf>
   1ad72:	b958      	cbnz	r0, 1ad8c <lv_refr_vdb_flush+0x2c>
        }
    }

    vdb->flushing = 1;

    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1ad74:	682d      	ldr	r5, [r5, #0]
    vdb->flushing = 1;
   1ad76:	2301      	movs	r3, #1
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1ad78:	686a      	ldr	r2, [r5, #4]
    vdb->flushing = 1;
   1ad7a:	61a3      	str	r3, [r4, #24]
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1ad7c:	6a11      	ldr	r1, [r2, #32]
   1ad7e:	07c9      	lsls	r1, r1, #31
   1ad80:	d409      	bmi.n	1ad96 <lv_refr_vdb_flush+0x36>
    else vdb->flushing_last = 0;
   1ad82:	2300      	movs	r3, #0
   1ad84:	e00a      	b.n	1ad9c <lv_refr_vdb_flush+0x3c>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
   1ad86:	69c3      	ldr	r3, [r0, #28]
   1ad88:	b10b      	cbz	r3, 1ad8e <lv_refr_vdb_flush+0x2e>
   1ad8a:	4798      	blx	r3
   1ad8c:	6828      	ldr	r0, [r5, #0]
        while(vdb->flushing) {
   1ad8e:	69a3      	ldr	r3, [r4, #24]
   1ad90:	2b00      	cmp	r3, #0
   1ad92:	d1f8      	bne.n	1ad86 <lv_refr_vdb_flush+0x26>
   1ad94:	e7ee      	b.n	1ad74 <lv_refr_vdb_flush+0x14>
    if(disp_refr->driver.buffer->last_area && disp_refr->driver.buffer->last_part) vdb->flushing_last = 1;
   1ad96:	6a12      	ldr	r2, [r2, #32]
   1ad98:	0792      	lsls	r2, r2, #30
   1ad9a:	d5f2      	bpl.n	1ad82 <lv_refr_vdb_flush+0x22>
    else vdb->flushing_last = 0;
   1ad9c:	61e3      	str	r3, [r4, #28]

    /*Flush the rendered content to the display*/
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   1ad9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1ada0:	b10b      	cbz	r3, 1ada6 <lv_refr_vdb_flush+0x46>
   1ada2:	4628      	mov	r0, r5
   1ada4:	4798      	blx	r3

    if(disp->driver.flush_cb) disp->driver.flush_cb(&disp->driver, &vdb->area, vdb->buf_act);
   1ada6:	68eb      	ldr	r3, [r5, #12]
   1ada8:	b123      	cbz	r3, 1adb4 <lv_refr_vdb_flush+0x54>
   1adaa:	68a2      	ldr	r2, [r4, #8]
   1adac:	f104 0110 	add.w	r1, r4, #16
   1adb0:	4628      	mov	r0, r5
   1adb2:	4798      	blx	r3

    if(vdb->buf1 && vdb->buf2) {
   1adb4:	6823      	ldr	r3, [r4, #0]
   1adb6:	b133      	cbz	r3, 1adc6 <lv_refr_vdb_flush+0x66>
   1adb8:	6862      	ldr	r2, [r4, #4]
   1adba:	b122      	cbz	r2, 1adc6 <lv_refr_vdb_flush+0x66>
        if(vdb->buf_act == vdb->buf1)
   1adbc:	68a1      	ldr	r1, [r4, #8]
            vdb->buf_act = vdb->buf2;
   1adbe:	428b      	cmp	r3, r1
   1adc0:	bf08      	it	eq
   1adc2:	4613      	moveq	r3, r2
   1adc4:	60a3      	str	r3, [r4, #8]
        else
            vdb->buf_act = vdb->buf1;
    }
}
   1adc6:	bd38      	pop	{r3, r4, r5, pc}
   1adc8:	20003e98 	.word	0x20003e98

0001adcc <lv_refr_obj_and_children>:
{
   1adcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1adce:	460e      	mov	r6, r1
    if(top_p == NULL) top_p = lv_disp_get_scr_act(disp_refr);
   1add0:	4604      	mov	r4, r0
   1add2:	b928      	cbnz	r0, 1ade0 <lv_refr_obj_and_children+0x14>
   1add4:	4b13      	ldr	r3, [pc, #76]	; (1ae24 <lv_refr_obj_and_children+0x58>)
   1add6:	6818      	ldr	r0, [r3, #0]
   1add8:	f7ff f84a 	bl	19e70 <lv_disp_get_scr_act>
    if(top_p == NULL) return;  /*Shouldn't happen*/
   1addc:	4604      	mov	r4, r0
   1adde:	b140      	cbz	r0, 1adf2 <lv_refr_obj_and_children+0x26>
    lv_refr_obj(top_p, mask_p);
   1ade0:	4620      	mov	r0, r4
   1ade2:	4631      	mov	r1, r6
   1ade4:	f00c fa5b 	bl	2729e <lv_refr_obj>
    par = lv_obj_get_parent(top_p);
   1ade8:	4620      	mov	r0, r4
   1adea:	f00b fb62 	bl	264b2 <lv_obj_get_parent>
        par = lv_obj_get_parent(par);
   1adee:	4605      	mov	r5, r0
    while(par != NULL) {
   1adf0:	b900      	cbnz	r0, 1adf4 <lv_refr_obj_and_children+0x28>
}
   1adf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        lv_obj_t * i = _lv_ll_get_prev(&(par->child_ll), border_p);
   1adf4:	1d2f      	adds	r7, r5, #4
            i = _lv_ll_get_prev(&(par->child_ll), i);
   1adf6:	4621      	mov	r1, r4
   1adf8:	4638      	mov	r0, r7
   1adfa:	f00f fbbf 	bl	2a57c <_lv_ll_get_prev>
   1adfe:	4604      	mov	r4, r0
        while(i != NULL) {
   1ae00:	b950      	cbnz	r0, 1ae18 <lv_refr_obj_and_children+0x4c>
        if(par->design_cb) par->design_cb(par, mask_p, LV_DESIGN_DRAW_POST);
   1ae02:	6a2b      	ldr	r3, [r5, #32]
   1ae04:	b11b      	cbz	r3, 1ae0e <lv_refr_obj_and_children+0x42>
   1ae06:	2201      	movs	r2, #1
   1ae08:	4631      	mov	r1, r6
   1ae0a:	4628      	mov	r0, r5
   1ae0c:	4798      	blx	r3
        par = lv_obj_get_parent(par);
   1ae0e:	4628      	mov	r0, r5
   1ae10:	f00b fb4f 	bl	264b2 <lv_obj_get_parent>
   1ae14:	462c      	mov	r4, r5
   1ae16:	e7ea      	b.n	1adee <lv_refr_obj_and_children+0x22>
            lv_refr_obj(i, mask_p);
   1ae18:	4631      	mov	r1, r6
   1ae1a:	4620      	mov	r0, r4
   1ae1c:	f00c fa3f 	bl	2729e <lv_refr_obj>
   1ae20:	e7e9      	b.n	1adf6 <lv_refr_obj_and_children+0x2a>
   1ae22:	bf00      	nop
   1ae24:	20003e98 	.word	0x20003e98

0001ae28 <lv_refr_area_part>:
{
   1ae28:	b570      	push	{r4, r5, r6, lr}
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1ae2a:	4c4b      	ldr	r4, [pc, #300]	; (1af58 <lv_refr_area_part+0x130>)
{
   1ae2c:	b09c      	sub	sp, #112	; 0x70
   1ae2e:	4606      	mov	r6, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1ae30:	6820      	ldr	r0, [r4, #0]
   1ae32:	f00f f893 	bl	29f5c <lv_disp_get_buf>
   1ae36:	4605      	mov	r5, r0
    if(lv_disp_is_double_buf(disp_refr) == false) {
   1ae38:	6820      	ldr	r0, [r4, #0]
   1ae3a:	f00f f891 	bl	29f60 <lv_disp_is_double_buf>
   1ae3e:	b1b0      	cbz	r0, 1ae6e <lv_refr_area_part+0x46>
    _lv_area_intersect(&start_mask, area_p, &vdb->area);
   1ae40:	f105 0210 	add.w	r2, r5, #16
   1ae44:	4631      	mov	r1, r6
   1ae46:	a803      	add	r0, sp, #12
   1ae48:	f00f f8f3 	bl	2a032 <_lv_area_intersect>
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   1ae4c:	6820      	ldr	r0, [r4, #0]
   1ae4e:	f7ff f80f 	bl	19e70 <lv_disp_get_scr_act>
   1ae52:	4601      	mov	r1, r0
   1ae54:	a803      	add	r0, sp, #12
   1ae56:	f00c f9f4 	bl	27242 <lv_refr_get_top_obj>
    if(disp_refr->prev_scr) {
   1ae5a:	6823      	ldr	r3, [r4, #0]
   1ae5c:	6c5d      	ldr	r5, [r3, #68]	; 0x44
    top_act_scr = lv_refr_get_top_obj(&start_mask, lv_disp_get_scr_act(disp_refr));
   1ae5e:	4606      	mov	r6, r0
    if(disp_refr->prev_scr) {
   1ae60:	b955      	cbnz	r5, 1ae78 <lv_refr_area_part+0x50>
    if(top_act_scr == NULL && top_prev_scr == NULL) {
   1ae62:	2800      	cmp	r0, #0
   1ae64:	d138      	bne.n	1aed8 <lv_refr_area_part+0xb0>
   1ae66:	e00e      	b.n	1ae86 <lv_refr_area_part+0x5e>
            if(disp_refr->driver.wait_cb) disp_refr->driver.wait_cb(&disp_refr->driver);
   1ae68:	69c3      	ldr	r3, [r0, #28]
   1ae6a:	b10b      	cbz	r3, 1ae70 <lv_refr_area_part+0x48>
   1ae6c:	4798      	blx	r3
   1ae6e:	6820      	ldr	r0, [r4, #0]
        while(vdb->flushing) {
   1ae70:	69ab      	ldr	r3, [r5, #24]
   1ae72:	2b00      	cmp	r3, #0
   1ae74:	d1f8      	bne.n	1ae68 <lv_refr_area_part+0x40>
   1ae76:	e7e3      	b.n	1ae40 <lv_refr_area_part+0x18>
        top_prev_scr = lv_refr_get_top_obj(&start_mask, disp_refr->prev_scr);
   1ae78:	4629      	mov	r1, r5
   1ae7a:	a803      	add	r0, sp, #12
   1ae7c:	f00c f9e1 	bl	27242 <lv_refr_get_top_obj>
   1ae80:	4605      	mov	r5, r0
    if(top_act_scr == NULL && top_prev_scr == NULL) {
   1ae82:	bb4e      	cbnz	r6, 1aed8 <lv_refr_area_part+0xb0>
   1ae84:	bb40      	cbnz	r0, 1aed8 <lv_refr_area_part+0xb0>
        if(disp_refr->bg_img) {
   1ae86:	6823      	ldr	r3, [r4, #0]
   1ae88:	6d5d      	ldr	r5, [r3, #84]	; 0x54
            lv_draw_img_dsc_init(&dsc);
   1ae8a:	a807      	add	r0, sp, #28
        if(disp_refr->bg_img) {
   1ae8c:	2d00      	cmp	r5, #0
   1ae8e:	d051      	beq.n	1af34 <lv_refr_area_part+0x10c>
            lv_draw_img_dsc_init(&dsc);
   1ae90:	f00d fd30 	bl	288f4 <lv_draw_img_dsc_init>
            dsc.opa = disp_refr->bg_opa;
   1ae94:	6823      	ldr	r3, [r4, #0]
   1ae96:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   1ae9a:	f88d 201c 	strb.w	r2, [sp, #28]
            res = lv_img_decoder_get_info(disp_refr->bg_img, &header);
   1ae9e:	6d58      	ldr	r0, [r3, #84]	; 0x54
   1aea0:	a902      	add	r1, sp, #8
   1aea2:	f002 f9b3 	bl	1d20c <lv_img_decoder_get_info>
            if(res == LV_RES_OK) {
   1aea6:	2801      	cmp	r0, #1
   1aea8:	d13a      	bne.n	1af20 <lv_refr_area_part+0xf8>
                lv_area_set(&a, 0, 0, header.w - 1, header.h - 1);
   1aeaa:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1aeae:	9b02      	ldr	r3, [sp, #8]
   1aeb0:	f3c2 124a 	ubfx	r2, r2, #5, #11
   1aeb4:	3a01      	subs	r2, #1
   1aeb6:	9200      	str	r2, [sp, #0]
   1aeb8:	f3c3 238a 	ubfx	r3, r3, #10, #11
   1aebc:	2200      	movs	r2, #0
   1aebe:	4611      	mov	r1, r2
   1aec0:	3b01      	subs	r3, #1
   1aec2:	a805      	add	r0, sp, #20
   1aec4:	f00f f89b 	bl	29ffe <lv_area_set>
                lv_draw_img(&a, &start_mask, disp_refr->bg_img, &dsc);
   1aec8:	6822      	ldr	r2, [r4, #0]
   1aeca:	ab07      	add	r3, sp, #28
   1aecc:	6d52      	ldr	r2, [r2, #84]	; 0x54
   1aece:	a903      	add	r1, sp, #12
   1aed0:	a805      	add	r0, sp, #20
   1aed2:	f000 fb71 	bl	1b5b8 <lv_draw_img>
   1aed6:	2500      	movs	r5, #0
    if(disp_refr->prev_scr) {
   1aed8:	6823      	ldr	r3, [r4, #0]
   1aeda:	6c58      	ldr	r0, [r3, #68]	; 0x44
   1aedc:	b128      	cbz	r0, 1aeea <lv_refr_area_part+0xc2>
        lv_refr_obj_and_children(top_prev_scr, &start_mask);
   1aede:	a903      	add	r1, sp, #12
   1aee0:	2d00      	cmp	r5, #0
   1aee2:	bf18      	it	ne
   1aee4:	4628      	movne	r0, r5
   1aee6:	f7ff ff71 	bl	1adcc <lv_refr_obj_and_children>
    if(top_act_scr == NULL) {
   1aeea:	b90e      	cbnz	r6, 1aef0 <lv_refr_area_part+0xc8>
        top_act_scr = disp_refr->act_scr;
   1aeec:	6823      	ldr	r3, [r4, #0]
   1aeee:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    lv_refr_obj_and_children(top_act_scr, &start_mask);
   1aef0:	a903      	add	r1, sp, #12
   1aef2:	4630      	mov	r0, r6
   1aef4:	f7ff ff6a 	bl	1adcc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_top(disp_refr), &start_mask);
   1aef8:	6820      	ldr	r0, [r4, #0]
   1aefa:	f7fe ffed 	bl	19ed8 <lv_disp_get_layer_top>
   1aefe:	a903      	add	r1, sp, #12
   1af00:	f7ff ff64 	bl	1adcc <lv_refr_obj_and_children>
    lv_refr_obj_and_children(lv_disp_get_layer_sys(disp_refr), &start_mask);
   1af04:	6820      	ldr	r0, [r4, #0]
   1af06:	f7ff f801 	bl	19f0c <lv_disp_get_layer_sys>
   1af0a:	a903      	add	r1, sp, #12
   1af0c:	f7ff ff5e 	bl	1adcc <lv_refr_obj_and_children>
    if(lv_disp_is_true_double_buf(disp_refr) == false) {
   1af10:	6820      	ldr	r0, [r4, #0]
   1af12:	f00f f82d 	bl	29f70 <lv_disp_is_true_double_buf>
   1af16:	b908      	cbnz	r0, 1af1c <lv_refr_area_part+0xf4>
        lv_refr_vdb_flush();
   1af18:	f7ff ff22 	bl	1ad60 <lv_refr_vdb_flush>
}
   1af1c:	b01c      	add	sp, #112	; 0x70
   1af1e:	bd70      	pop	{r4, r5, r6, pc}
                LV_LOG_WARN("Can't draw the background image")
   1af20:	4b0e      	ldr	r3, [pc, #56]	; (1af5c <lv_refr_area_part+0x134>)
   1af22:	9300      	str	r3, [sp, #0]
   1af24:	490e      	ldr	r1, [pc, #56]	; (1af60 <lv_refr_area_part+0x138>)
   1af26:	4b0f      	ldr	r3, [pc, #60]	; (1af64 <lv_refr_area_part+0x13c>)
   1af28:	f240 220a 	movw	r2, #522	; 0x20a
   1af2c:	2002      	movs	r0, #2
   1af2e:	f002 fae7 	bl	1d500 <_lv_log_add>
   1af32:	e7d0      	b.n	1aed6 <lv_refr_area_part+0xae>
            lv_draw_rect_dsc_init(&dsc);
   1af34:	f001 fde2 	bl	1cafc <lv_draw_rect_dsc_init>
            dsc.bg_color = disp_refr->bg_color;
   1af38:	6823      	ldr	r3, [r4, #0]
   1af3a:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
   1af3e:	f8ad 201e 	strh.w	r2, [sp, #30]
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1af42:	a903      	add	r1, sp, #12
            dsc.bg_opa = disp_refr->bg_opa;
   1af44:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
   1af48:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            lv_draw_rect(&start_mask, &start_mask, &dsc);
   1af4c:	aa07      	add	r2, sp, #28
   1af4e:	4608      	mov	r0, r1
   1af50:	f00e f989 	bl	29266 <lv_draw_rect>
   1af54:	e7c0      	b.n	1aed8 <lv_refr_area_part+0xb0>
   1af56:	bf00      	nop
   1af58:	20003e98 	.word	0x20003e98
   1af5c:	0002fdb1 	.word	0x0002fdb1
   1af60:	0002fd7a 	.word	0x0002fd7a
   1af64:	0002fe8f 	.word	0x0002fe8f

0001af68 <_lv_refr_get_disp_refreshing>:
}
   1af68:	4b01      	ldr	r3, [pc, #4]	; (1af70 <_lv_refr_get_disp_refreshing+0x8>)
   1af6a:	6818      	ldr	r0, [r3, #0]
   1af6c:	4770      	bx	lr
   1af6e:	bf00      	nop
   1af70:	20003e98 	.word	0x20003e98

0001af74 <_lv_disp_refr_task>:
{
   1af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af78:	b08b      	sub	sp, #44	; 0x2c
   1af7a:	4605      	mov	r5, r0
    uint32_t start = lv_tick_get();
   1af7c:	f00f f807 	bl	29f8e <lv_tick_get>
    disp_refr = task->user_data;
   1af80:	4cb9      	ldr	r4, [pc, #740]	; (1b268 <_lv_disp_refr_task+0x2f4>)
   1af82:	68eb      	ldr	r3, [r5, #12]
    uint32_t start = lv_tick_get();
   1af84:	9005      	str	r0, [sp, #20]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   1af86:	2100      	movs	r1, #0
   1af88:	4628      	mov	r0, r5
    disp_refr = task->user_data;
   1af8a:	6023      	str	r3, [r4, #0]
    lv_task_set_prio(task, LV_TASK_PRIO_OFF);
   1af8c:	f002 fd7e 	bl	1da8c <lv_task_set_prio>
    if(disp_refr->act_scr == NULL) {
   1af90:	6823      	ldr	r3, [r4, #0]
   1af92:	6c19      	ldr	r1, [r3, #64]	; 0x40
   1af94:	2900      	cmp	r1, #0
   1af96:	f040 8092 	bne.w	1b0be <_lv_disp_refr_task+0x14a>
        disp_refr->inv_p = 0;
   1af9a:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
   1af9e:	f361 0209 	bfi	r2, r1, #0, #10
   1afa2:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
}
   1afa6:	b00b      	add	sp, #44	; 0x2c
   1afa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(disp_refr->inv_area_joined[join_in] != 0) continue;
   1afac:	4433      	add	r3, r6
   1afae:	f893 515a 	ldrb.w	r5, [r3, #346]	; 0x15a
   1afb2:	2d00      	cmp	r5, #0
   1afb4:	d044      	beq.n	1b040 <_lv_disp_refr_task+0xcc>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   1afb6:	3601      	adds	r6, #1
   1afb8:	6823      	ldr	r3, [r4, #0]
   1afba:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
   1afbe:	f3c2 0709 	ubfx	r7, r2, #0, #10
   1afc2:	42be      	cmp	r6, r7
   1afc4:	d3f2      	bcc.n	1afac <_lv_disp_refr_task+0x38>
    px_num = 0;
   1afc6:	49a9      	ldr	r1, [pc, #676]	; (1b26c <_lv_disp_refr_task+0x2f8>)
   1afc8:	2000      	movs	r0, #0
   1afca:	6008      	str	r0, [r1, #0]
    if(disp_refr->inv_p == 0) return;
   1afcc:	2f00      	cmp	r7, #0
   1afce:	d178      	bne.n	1b0c2 <_lv_disp_refr_task+0x14e>
    if(disp_refr->inv_p != 0) {
   1afd0:	4da5      	ldr	r5, [pc, #660]	; (1b268 <_lv_disp_refr_task+0x2f4>)
   1afd2:	6828      	ldr	r0, [r5, #0]
   1afd4:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
   1afd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1afdc:	b35b      	cbz	r3, 1b036 <_lv_disp_refr_task+0xc2>
        if(lv_disp_is_true_double_buf(disp_refr)) {
   1afde:	f00e ffc7 	bl	29f70 <lv_disp_is_true_double_buf>
   1afe2:	b160      	cbz	r0, 1affe <_lv_disp_refr_task+0x8a>
            if(disp_refr->driver.set_px_cb) {
   1afe4:	6828      	ldr	r0, [r5, #0]
   1afe6:	6943      	ldr	r3, [r0, #20]
   1afe8:	2b00      	cmp	r3, #0
   1afea:	f000 818f 	beq.w	1b30c <_lv_disp_refr_task+0x398>
                LV_LOG_WARN("Can't handle 2 screen sized buffers with set_px_cb. Display is not refreshed.");
   1afee:	4ba0      	ldr	r3, [pc, #640]	; (1b270 <_lv_disp_refr_task+0x2fc>)
   1aff0:	9300      	str	r3, [sp, #0]
   1aff2:	49a0      	ldr	r1, [pc, #640]	; (1b274 <_lv_disp_refr_task+0x300>)
   1aff4:	4ba0      	ldr	r3, [pc, #640]	; (1b278 <_lv_disp_refr_task+0x304>)
   1aff6:	22cf      	movs	r2, #207	; 0xcf
   1aff8:	2002      	movs	r0, #2
   1affa:	f002 fa81 	bl	1d500 <_lv_log_add>
        _lv_memset_00(disp_refr->inv_areas, sizeof(disp_refr->inv_areas));
   1affe:	6825      	ldr	r5, [r4, #0]
   1b000:	f44f 7180 	mov.w	r1, #256	; 0x100
   1b004:	f105 005a 	add.w	r0, r5, #90	; 0x5a
   1b008:	f00c f9b8 	bl	2737c <_lv_memset_00>
        _lv_memset_00(disp_refr->inv_area_joined, sizeof(disp_refr->inv_area_joined));
   1b00c:	2120      	movs	r1, #32
   1b00e:	f505 70ad 	add.w	r0, r5, #346	; 0x15a
   1b012:	f00c f9b3 	bl	2737c <_lv_memset_00>
        disp_refr->inv_p = 0;
   1b016:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
   1b01a:	9805      	ldr	r0, [sp, #20]
        disp_refr->inv_p = 0;
   1b01c:	f36f 0309 	bfc	r3, #0, #10
   1b020:	f8a5 317a 	strh.w	r3, [r5, #378]	; 0x17a
        elaps = lv_tick_elaps(start);
   1b024:	f00e ffc0 	bl	29fa8 <lv_tick_elaps>
   1b028:	4601      	mov	r1, r0
        if(disp_refr->driver.monitor_cb) {
   1b02a:	6820      	ldr	r0, [r4, #0]
   1b02c:	6983      	ldr	r3, [r0, #24]
   1b02e:	b113      	cbz	r3, 1b036 <_lv_disp_refr_task+0xc2>
            disp_refr->driver.monitor_cb(&disp_refr->driver, elaps, px_num);
   1b030:	4a8e      	ldr	r2, [pc, #568]	; (1b26c <_lv_disp_refr_task+0x2f8>)
   1b032:	6812      	ldr	r2, [r2, #0]
   1b034:	4798      	blx	r3
    _lv_mem_buf_free_all();
   1b036:	f002 fba7 	bl	1d788 <_lv_mem_buf_free_all>
    _lv_font_clean_up_fmt_txt();
   1b03a:	f003 f867 	bl	1e10c <_lv_font_clean_up_fmt_txt>
    LV_LOG_TRACE("lv_refr_task: ready");
   1b03e:	e7b2      	b.n	1afa6 <_lv_disp_refr_task+0x32>
   1b040:	00f7      	lsls	r7, r6, #3
   1b042:	375a      	adds	r7, #90	; 0x5a
                disp_refr->inv_area_joined[join_from] = 1;
   1b044:	f04f 0901 	mov.w	r9, #1
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   1b048:	6820      	ldr	r0, [r4, #0]
   1b04a:	f8b0 317a 	ldrh.w	r3, [r0, #378]	; 0x17a
   1b04e:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b052:	429d      	cmp	r5, r3
   1b054:	d2af      	bcs.n	1afb6 <_lv_disp_refr_task+0x42>
            if(disp_refr->inv_area_joined[join_from] != 0 || join_in == join_from) {
   1b056:	1943      	adds	r3, r0, r5
   1b058:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   1b05c:	bb6b      	cbnz	r3, 1b0ba <_lv_disp_refr_task+0x146>
   1b05e:	42ae      	cmp	r6, r5
   1b060:	d02b      	beq.n	1b0ba <_lv_disp_refr_task+0x146>
            if(_lv_area_is_on(&disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]) == false) {
   1b062:	ea4f 0ac5 	mov.w	sl, r5, lsl #3
   1b066:	f10a 0a5a 	add.w	sl, sl, #90	; 0x5a
   1b06a:	eb00 010a 	add.w	r1, r0, sl
   1b06e:	4438      	add	r0, r7
   1b070:	f00f f8b5 	bl	2a1de <_lv_area_is_on>
   1b074:	b308      	cbz	r0, 1b0ba <_lv_disp_refr_task+0x146>
            _lv_area_join(&joined_area, &disp_refr->inv_areas[join_in], &disp_refr->inv_areas[join_from]);
   1b076:	6821      	ldr	r1, [r4, #0]
   1b078:	a808      	add	r0, sp, #32
   1b07a:	eb01 020a 	add.w	r2, r1, sl
   1b07e:	4439      	add	r1, r7
   1b080:	f00f f802 	bl	2a088 <_lv_area_join>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   1b084:	a808      	add	r0, sp, #32
   1b086:	f00e ffc6 	bl	2a016 <lv_area_get_size>
   1b08a:	4683      	mov	fp, r0
   1b08c:	6820      	ldr	r0, [r4, #0]
   1b08e:	4438      	add	r0, r7
   1b090:	f00e ffc1 	bl	2a016 <lv_area_get_size>
   1b094:	4680      	mov	r8, r0
                                                 lv_area_get_size(&disp_refr->inv_areas[join_from]))) {
   1b096:	6820      	ldr	r0, [r4, #0]
   1b098:	4450      	add	r0, sl
   1b09a:	f00e ffbc 	bl	2a016 <lv_area_get_size>
            if(lv_area_get_size(&joined_area) < (lv_area_get_size(&disp_refr->inv_areas[join_in]) +
   1b09e:	4480      	add	r8, r0
   1b0a0:	45c3      	cmp	fp, r8
   1b0a2:	d20a      	bcs.n	1b0ba <_lv_disp_refr_task+0x146>
                lv_area_copy(&disp_refr->inv_areas[join_in], &joined_area);
   1b0a4:	f8d4 8000 	ldr.w	r8, [r4]
 * @param dest pointer to the destination area
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   1b0a8:	eb08 0007 	add.w	r0, r8, r7
                disp_refr->inv_area_joined[join_from] = 1;
   1b0ac:	44a8      	add	r8, r5
   1b0ae:	2208      	movs	r2, #8
   1b0b0:	a908      	add	r1, sp, #32
   1b0b2:	f00c f8c4 	bl	2723e <_lv_memcpy>
   1b0b6:	f888 915a 	strb.w	r9, [r8, #346]	; 0x15a
        for(join_from = 0; join_from < disp_refr->inv_p; join_from++) {
   1b0ba:	3501      	adds	r5, #1
   1b0bc:	e7c4      	b.n	1b048 <_lv_disp_refr_task+0xd4>
    for(join_in = 0; join_in < disp_refr->inv_p; join_in++) {
   1b0be:	2600      	movs	r6, #0
   1b0c0:	e77a      	b.n	1afb8 <_lv_disp_refr_task+0x44>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1b0c2:	3f01      	subs	r7, #1
        if(disp_refr->inv_area_joined[i] == 0) {
   1b0c4:	f503 72ad 	add.w	r2, r3, #346	; 0x15a
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1b0c8:	1c79      	adds	r1, r7, #1
   1b0ca:	d159      	bne.n	1b180 <_lv_disp_refr_task+0x20c>
    int32_t last_i = 0;
   1b0cc:	2700      	movs	r7, #0
    disp_refr->driver.buffer->last_area = 0;
   1b0ce:	685b      	ldr	r3, [r3, #4]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1b0d0:	f8df 9194 	ldr.w	r9, [pc, #404]	; 1b268 <_lv_disp_refr_task+0x2f4>
    disp_refr->driver.buffer->last_area = 0;
   1b0d4:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b0d8:	f36f 0200 	bfc	r2, #0, #1
   1b0dc:	f883 2020 	strb.w	r2, [r3, #32]
    disp_refr->driver.buffer->last_part = 0;
   1b0e0:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b0e4:	f36f 0241 	bfc	r2, #1, #1
   1b0e8:	f883 2020 	strb.w	r2, [r3, #32]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1b0ec:	f04f 0b00 	mov.w	fp, #0
   1b0f0:	f8d9 8000 	ldr.w	r8, [r9]
   1b0f4:	f8b8 317a 	ldrh.w	r3, [r8, #378]	; 0x17a
   1b0f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b0fc:	459b      	cmp	fp, r3
   1b0fe:	f6bf af67 	bge.w	1afd0 <_lv_disp_refr_task+0x5c>
        if(disp_refr->inv_area_joined[i] == 0) {
   1b102:	eb08 030b 	add.w	r3, r8, fp
   1b106:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   1b10a:	2b00      	cmp	r3, #0
   1b10c:	f040 80a5 	bne.w	1b25a <_lv_disp_refr_task+0x2e6>
            if(i == last_i) disp_refr->driver.buffer->last_area = 1;
   1b110:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1b114:	45bb      	cmp	fp, r7
   1b116:	bf02      	ittt	eq
   1b118:	f893 2020 	ldrbeq.w	r2, [r3, #32]
   1b11c:	f042 0201 	orreq.w	r2, r2, #1
   1b120:	f883 2020 	strbeq.w	r2, [r3, #32]
            disp_refr->driver.buffer->last_part = 0;
   1b124:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b128:	ea4f 05cb 	mov.w	r5, fp, lsl #3
   1b12c:	f36f 0241 	bfc	r2, #1, #1
   1b130:	f883 2020 	strb.w	r2, [r3, #32]
            lv_refr_area(&disp_refr->inv_areas[i]);
   1b134:	f105 035a 	add.w	r3, r5, #90	; 0x5a
   1b138:	9304      	str	r3, [sp, #16]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   1b13a:	4640      	mov	r0, r8
            lv_refr_area(&disp_refr->inv_areas[i]);
   1b13c:	4443      	add	r3, r8
   1b13e:	9303      	str	r3, [sp, #12]
    if(lv_disp_is_true_double_buf(disp_refr)) {
   1b140:	f00e ff16 	bl	29f70 <lv_disp_is_true_double_buf>
   1b144:	b308      	cbz	r0, 1b18a <_lv_disp_refr_task+0x216>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b146:	6820      	ldr	r0, [r4, #0]
   1b148:	f00e ff08 	bl	29f5c <lv_disp_get_buf>
        vdb->area.x1        = 0;
   1b14c:	2600      	movs	r6, #0
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b14e:	4605      	mov	r5, r0
        vdb->area.x1        = 0;
   1b150:	8206      	strh	r6, [r0, #16]
        vdb->area.x2        = lv_disp_get_hor_res(disp_refr) - 1;
   1b152:	6820      	ldr	r0, [r4, #0]
   1b154:	f002 f904 	bl	1d360 <lv_disp_get_hor_res>
   1b158:	3801      	subs	r0, #1
   1b15a:	82a8      	strh	r0, [r5, #20]
        vdb->area.y1        = 0;
   1b15c:	826e      	strh	r6, [r5, #18]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1b15e:	6820      	ldr	r0, [r4, #0]
   1b160:	f002 f90e 	bl	1d380 <lv_disp_get_ver_res>
        disp_refr->driver.buffer->last_part = 1;
   1b164:	6823      	ldr	r3, [r4, #0]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1b166:	3801      	subs	r0, #1
        disp_refr->driver.buffer->last_part = 1;
   1b168:	685a      	ldr	r2, [r3, #4]
        vdb->area.y2        = lv_disp_get_ver_res(disp_refr) - 1;
   1b16a:	82e8      	strh	r0, [r5, #22]
            disp_refr->driver.buffer->last_part = 1;
   1b16c:	f892 3020 	ldrb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   1b170:	9803      	ldr	r0, [sp, #12]
            disp_refr->driver.buffer->last_part = 1;
   1b172:	f043 0302 	orr.w	r3, r3, #2
   1b176:	f882 3020 	strb.w	r3, [r2, #32]
            lv_refr_area_part(area_p);
   1b17a:	f7ff fe55 	bl	1ae28 <lv_refr_area_part>
   1b17e:	e060      	b.n	1b242 <_lv_disp_refr_task+0x2ce>
        if(disp_refr->inv_area_joined[i] == 0) {
   1b180:	5dd1      	ldrb	r1, [r2, r7]
   1b182:	2900      	cmp	r1, #0
   1b184:	d0a3      	beq.n	1b0ce <_lv_disp_refr_task+0x15a>
    for(i = disp_refr->inv_p - 1; i >= 0; i--) {
   1b186:	3f01      	subs	r7, #1
   1b188:	e79e      	b.n	1b0c8 <_lv_disp_refr_task+0x154>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b18a:	4445      	add	r5, r8
   1b18c:	6820      	ldr	r0, [r4, #0]
   1b18e:	f00e fee5 	bl	29f5c <lv_disp_get_buf>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b192:	f8b5 805e 	ldrh.w	r8, [r5, #94]	; 0x5e
   1b196:	f8b5 305a 	ldrh.w	r3, [r5, #90]	; 0x5a
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b19a:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b19e:	f108 0801 	add.w	r8, r8, #1
   1b1a2:	eba8 0803 	sub.w	r8, r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b1a6:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	; 0x60
   1b1aa:	9302      	str	r3, [sp, #8]
   1b1ac:	f103 0a01 	add.w	sl, r3, #1
   1b1b0:	4606      	mov	r6, r0
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   1b1b2:	6820      	ldr	r0, [r4, #0]
   1b1b4:	ebaa 0a02 	sub.w	sl, sl, r2
   1b1b8:	f002 f8e2 	bl	1d380 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   1b1bc:	9b02      	ldr	r3, [sp, #8]
   1b1be:	4283      	cmp	r3, r0
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b1c0:	fa0f f888 	sxth.w	r8, r8
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b1c4:	fa0f fa8a 	sxth.w	sl, sl
   1b1c8:	db4a      	blt.n	1b260 <_lv_disp_refr_task+0x2ec>
            area_p->y2 >= lv_disp_get_ver_res(disp_refr) ? lv_disp_get_ver_res(disp_refr) - 1 : area_p->y2;
   1b1ca:	6820      	ldr	r0, [r4, #0]
   1b1cc:	f002 f8d8 	bl	1d380 <lv_disp_get_ver_res>
        lv_coord_t y2 =
   1b1d0:	1e43      	subs	r3, r0, #1
   1b1d2:	b21b      	sxth	r3, r3
        int32_t max_row = (uint32_t)vdb->size / w;
   1b1d4:	68f2      	ldr	r2, [r6, #12]
   1b1d6:	fbb2 f8f8 	udiv	r8, r2, r8
        if(max_row > h) max_row = h;
   1b1da:	45c2      	cmp	sl, r8
   1b1dc:	4652      	mov	r2, sl
   1b1de:	bfa8      	it	ge
   1b1e0:	4642      	movge	r2, r8
   1b1e2:	9202      	str	r2, [sp, #8]
        if(disp_refr->driver.rounder_cb) {
   1b1e4:	4a20      	ldr	r2, [pc, #128]	; (1b268 <_lv_disp_refr_task+0x2f4>)
   1b1e6:	6812      	ldr	r2, [r2, #0]
   1b1e8:	6912      	ldr	r2, [r2, #16]
   1b1ea:	2a00      	cmp	r2, #0
   1b1ec:	d04e      	beq.n	1b28c <_lv_disp_refr_task+0x318>
            tmp.x1 = 0;
   1b1ee:	2200      	movs	r2, #0
            lv_coord_t h_tmp = max_row;
   1b1f0:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
            tmp.x1 = 0;
   1b1f4:	9208      	str	r2, [sp, #32]
            tmp.x2 = 0;
   1b1f6:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1b1fa:	f8d9 0000 	ldr.w	r0, [r9]
   1b1fe:	9306      	str	r3, [sp, #24]
                tmp.y2 = h_tmp - 1;
   1b200:	46c2      	mov	sl, r8
   1b202:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1b206:	fa0f f888 	sxth.w	r8, r8
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1b20a:	6902      	ldr	r2, [r0, #16]
                tmp.y2 = h_tmp - 1;
   1b20c:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
                disp_refr->driver.rounder_cb(&disp_refr->driver, &tmp);
   1b210:	a908      	add	r1, sp, #32
   1b212:	4790      	blx	r2
   1b214:	f9bd 1026 	ldrsh.w	r1, [sp, #38]	; 0x26
   1b218:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
                if(lv_area_get_height(&tmp) <= max_row) break;
   1b21c:	9b02      	ldr	r3, [sp, #8]
   1b21e:	3101      	adds	r1, #1
   1b220:	1a8a      	subs	r2, r1, r2
   1b222:	b212      	sxth	r2, r2
   1b224:	4293      	cmp	r3, r2
   1b226:	9b06      	ldr	r3, [sp, #24]
   1b228:	da2c      	bge.n	1b284 <_lv_disp_refr_task+0x310>
            } while(h_tmp > 0);
   1b22a:	f1b8 0f00 	cmp.w	r8, #0
   1b22e:	dce4      	bgt.n	1b1fa <_lv_disp_refr_task+0x286>
                LV_LOG_WARN("Can't set VDB height using the round function. (Wrong round_cb or to "
   1b230:	4b12      	ldr	r3, [pc, #72]	; (1b27c <_lv_disp_refr_task+0x308>)
   1b232:	9300      	str	r3, [sp, #0]
   1b234:	490f      	ldr	r1, [pc, #60]	; (1b274 <_lv_disp_refr_task+0x300>)
   1b236:	4b12      	ldr	r3, [pc, #72]	; (1b280 <_lv_disp_refr_task+0x30c>)
   1b238:	f240 12b7 	movw	r2, #439	; 0x1b7
   1b23c:	2002      	movs	r0, #2
   1b23e:	f002 f95f 	bl	1d500 <_lv_log_add>
            if(disp_refr->driver.monitor_cb) px_num += lv_area_get_size(&disp_refr->inv_areas[i]);
   1b242:	f8d9 0000 	ldr.w	r0, [r9]
   1b246:	6983      	ldr	r3, [r0, #24]
   1b248:	b13b      	cbz	r3, 1b25a <_lv_disp_refr_task+0x2e6>
   1b24a:	9b04      	ldr	r3, [sp, #16]
   1b24c:	4418      	add	r0, r3
   1b24e:	f00e fee2 	bl	2a016 <lv_area_get_size>
   1b252:	4a06      	ldr	r2, [pc, #24]	; (1b26c <_lv_disp_refr_task+0x2f8>)
   1b254:	6813      	ldr	r3, [r2, #0]
   1b256:	4403      	add	r3, r0
   1b258:	6013      	str	r3, [r2, #0]
    for(i = 0; i < disp_refr->inv_p; i++) {
   1b25a:	f10b 0b01 	add.w	fp, fp, #1
   1b25e:	e747      	b.n	1b0f0 <_lv_disp_refr_task+0x17c>
        lv_coord_t y2 =
   1b260:	f9b5 3060 	ldrsh.w	r3, [r5, #96]	; 0x60
   1b264:	e7b6      	b.n	1b1d4 <_lv_disp_refr_task+0x260>
   1b266:	bf00      	nop
   1b268:	20003e98 	.word	0x20003e98
   1b26c:	20003e9c 	.word	0x20003e9c
   1b270:	0002fe21 	.word	0x0002fe21
   1b274:	0002fd7a 	.word	0x0002fd7a
   1b278:	0002fe6f 	.word	0x0002fe6f
   1b27c:	0002fdd1 	.word	0x0002fdd1
   1b280:	0002fe82 	.word	0x0002fe82
            if(h_tmp <= 0) {
   1b284:	f1ba 0f00 	cmp.w	sl, #0
   1b288:	ddd2      	ble.n	1b230 <_lv_disp_refr_task+0x2bc>
                max_row = tmp.y2 + 1;
   1b28a:	9102      	str	r1, [sp, #8]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1b28c:	9a02      	ldr	r2, [sp, #8]
   1b28e:	f9b5 a05c 	ldrsh.w	sl, [r5, #92]	; 0x5c
        lv_coord_t row_last = 0;
   1b292:	f04f 0800 	mov.w	r8, #0
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1b296:	3a01      	subs	r2, #1
   1b298:	eb02 010a 	add.w	r1, r2, sl
   1b29c:	4299      	cmp	r1, r3
   1b29e:	dd0d      	ble.n	1b2bc <_lv_disp_refr_task+0x348>
        if(y2 != row_last) {
   1b2a0:	4543      	cmp	r3, r8
   1b2a2:	d0ce      	beq.n	1b242 <_lv_disp_refr_task+0x2ce>
            vdb->area.x1 = area_p->x1;
   1b2a4:	f9b5 105a 	ldrsh.w	r1, [r5, #90]	; 0x5a
   1b2a8:	6822      	ldr	r2, [r4, #0]
   1b2aa:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   1b2ac:	f9b5 105e 	ldrsh.w	r1, [r5, #94]	; 0x5e
            disp_refr->driver.buffer->last_part = 1;
   1b2b0:	6852      	ldr	r2, [r2, #4]
            vdb->area.x2 = area_p->x2;
   1b2b2:	82b1      	strh	r1, [r6, #20]
            vdb->area.y1 = row;
   1b2b4:	f8a6 a012 	strh.w	sl, [r6, #18]
            vdb->area.y2 = y2;
   1b2b8:	82f3      	strh	r3, [r6, #22]
            disp_refr->driver.buffer->last_part = 1;
   1b2ba:	e757      	b.n	1b16c <_lv_disp_refr_task+0x1f8>
            vdb->area.x1 = area_p->x1;
   1b2bc:	f9b5 105a 	ldrsh.w	r1, [r5, #90]	; 0x5a
   1b2c0:	8231      	strh	r1, [r6, #16]
            vdb->area.x2 = area_p->x2;
   1b2c2:	f9b5 105e 	ldrsh.w	r1, [r5, #94]	; 0x5e
   1b2c6:	82b1      	strh	r1, [r6, #20]
            vdb->area.y2 = row + max_row - 1;
   1b2c8:	9902      	ldr	r1, [sp, #8]
            vdb->area.y1 = row;
   1b2ca:	f8a6 a012 	strh.w	sl, [r6, #18]
            vdb->area.y2 = row + max_row - 1;
   1b2ce:	448a      	add	sl, r1
   1b2d0:	fa0f fa8a 	sxth.w	sl, sl
   1b2d4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   1b2d8:	fa0f f888 	sxth.w	r8, r8
   1b2dc:	4598      	cmp	r8, r3
   1b2de:	bfa8      	it	ge
   1b2e0:	4698      	movge	r8, r3
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   1b2e2:	4543      	cmp	r3, r8
            vdb->area.y2 = row + max_row - 1;
   1b2e4:	f8a6 8016 	strh.w	r8, [r6, #22]
            if(y2 == row_last) disp_refr->driver.buffer->last_part = 1;
   1b2e8:	d108      	bne.n	1b2fc <_lv_disp_refr_task+0x388>
   1b2ea:	f8d9 1000 	ldr.w	r1, [r9]
   1b2ee:	6848      	ldr	r0, [r1, #4]
   1b2f0:	f890 1020 	ldrb.w	r1, [r0, #32]
   1b2f4:	f041 0102 	orr.w	r1, r1, #2
   1b2f8:	f880 1020 	strb.w	r1, [r0, #32]
            lv_refr_area_part(area_p);
   1b2fc:	9803      	ldr	r0, [sp, #12]
   1b2fe:	e9cd 3206 	strd	r3, r2, [sp, #24]
   1b302:	f7ff fd91 	bl	1ae28 <lv_refr_area_part>
   1b306:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
        for(row = area_p->y1; row + max_row - 1 <= y2; row += max_row) {
   1b30a:	e7c5      	b.n	1b298 <_lv_disp_refr_task+0x324>
                lv_disp_buf_t * vdb = lv_disp_get_buf(disp_refr);
   1b30c:	f00e fe26 	bl	29f5c <lv_disp_get_buf>
   1b310:	4605      	mov	r5, r0
                lv_refr_vdb_flush();
   1b312:	f7ff fd25 	bl	1ad60 <lv_refr_vdb_flush>
                while(vdb->flushing);
   1b316:	69ab      	ldr	r3, [r5, #24]
   1b318:	2b00      	cmp	r3, #0
   1b31a:	d1fc      	bne.n	1b316 <_lv_disp_refr_task+0x3a2>
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   1b31c:	6823      	ldr	r3, [r4, #0]
   1b31e:	f9b3 0000 	ldrsh.w	r0, [r3]
   1b322:	0040      	lsls	r0, r0, #1
   1b324:	f002 f996 	bl	1d654 <_lv_mem_buf_get>
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   1b328:	68ab      	ldr	r3, [r5, #8]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1b32a:	f8d5 b000 	ldr.w	fp, [r5]
                uint8_t * buf_act = (uint8_t *)vdb->buf_act;
   1b32e:	9303      	str	r3, [sp, #12]
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1b330:	459b      	cmp	fp, r3
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1b332:	4b29      	ldr	r3, [pc, #164]	; (1b3d8 <_lv_disp_refr_task+0x464>)
                uint8_t * buf_ina = (uint8_t *)vdb->buf_act == vdb->buf1 ? vdb->buf2 : vdb->buf1;
   1b334:	bf08      	it	eq
   1b336:	f8d5 b004 	ldreq.w	fp, [r5, #4]
                copy_buf = _lv_mem_buf_get(disp_refr->driver.hor_res * sizeof(lv_color_t));
   1b33a:	4606      	mov	r6, r0
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1b33c:	6818      	ldr	r0, [r3, #0]
   1b33e:	f002 f80f 	bl	1d360 <lv_disp_get_hor_res>
                            start_offs += hres * sizeof(lv_color_t);
   1b342:	0043      	lsls	r3, r0, #1
                lv_coord_t hres = lv_disp_get_hor_res(disp_refr);
   1b344:	9004      	str	r0, [sp, #16]
                            start_offs += hres * sizeof(lv_color_t);
   1b346:	9302      	str	r3, [sp, #8]
                for(a = 0; a < disp_refr->inv_p; a++) {
   1b348:	f04f 0900 	mov.w	r9, #0
   1b34c:	4b22      	ldr	r3, [pc, #136]	; (1b3d8 <_lv_disp_refr_task+0x464>)
   1b34e:	681d      	ldr	r5, [r3, #0]
   1b350:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
   1b354:	fa1f f289 	uxth.w	r2, r9
   1b358:	f3c3 0309 	ubfx	r3, r3, #0, #10
   1b35c:	4293      	cmp	r3, r2
   1b35e:	d806      	bhi.n	1b36e <_lv_disp_refr_task+0x3fa>
                if(copy_buf) _lv_mem_buf_release(copy_buf);
   1b360:	2e00      	cmp	r6, #0
   1b362:	f43f ae4c 	beq.w	1affe <_lv_disp_refr_task+0x8a>
   1b366:	4630      	mov	r0, r6
   1b368:	f002 f9d6 	bl	1d718 <_lv_mem_buf_release>
   1b36c:	e647      	b.n	1affe <_lv_disp_refr_task+0x8a>
                    if(disp_refr->inv_area_joined[a] == 0) {
   1b36e:	eb05 0309 	add.w	r3, r5, r9
   1b372:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
   1b376:	b113      	cbz	r3, 1b37e <_lv_disp_refr_task+0x40a>
                for(a = 0; a < disp_refr->inv_p; a++) {
   1b378:	f109 0901 	add.w	r9, r9, #1
   1b37c:	e7e6      	b.n	1b34c <_lv_disp_refr_task+0x3d8>
                        uint32_t start_offs =
   1b37e:	eb05 05c9 	add.w	r5, r5, r9, lsl #3
                            (hres * disp_refr->inv_areas[a].y1 + disp_refr->inv_areas[a].x1) * sizeof(lv_color_t);
   1b382:	9a04      	ldr	r2, [sp, #16]
   1b384:	f9b5 305a 	ldrsh.w	r3, [r5, #90]	; 0x5a
   1b388:	f9b5 705c 	ldrsh.w	r7, [r5, #92]	; 0x5c
   1b38c:	fb02 3807 	mla	r8, r2, r7, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b390:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
   1b394:	3201      	adds	r2, #1
   1b396:	1ad2      	subs	r2, r2, r3
                        uint32_t line_length = lv_area_get_width(&disp_refr->inv_areas[a]) * sizeof(lv_color_t);
   1b398:	b212      	sxth	r2, r2
   1b39a:	ea4f 0a42 	mov.w	sl, r2, lsl #1
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1b39e:	9a03      	ldr	r2, [sp, #12]
   1b3a0:	eb0b 0348 	add.w	r3, fp, r8, lsl #1
   1b3a4:	eb02 0848 	add.w	r8, r2, r8, lsl #1
   1b3a8:	f9b5 1060 	ldrsh.w	r1, [r5, #96]	; 0x60
   1b3ac:	42b9      	cmp	r1, r7
   1b3ae:	dbe3      	blt.n	1b378 <_lv_disp_refr_task+0x404>
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
   1b3b0:	4619      	mov	r1, r3
   1b3b2:	4652      	mov	r2, sl
   1b3b4:	4630      	mov	r0, r6
   1b3b6:	9306      	str	r3, [sp, #24]
   1b3b8:	f00b ff41 	bl	2723e <_lv_memcpy>
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
   1b3bc:	4652      	mov	r2, sl
   1b3be:	4640      	mov	r0, r8
   1b3c0:	4631      	mov	r1, r6
   1b3c2:	f00b ff3c 	bl	2723e <_lv_memcpy>
                        for(y = disp_refr->inv_areas[a].y1; y <= disp_refr->inv_areas[a].y2; y++) {
   1b3c6:	9b02      	ldr	r3, [sp, #8]
   1b3c8:	461a      	mov	r2, r3
   1b3ca:	9b06      	ldr	r3, [sp, #24]
   1b3cc:	3701      	adds	r7, #1
   1b3ce:	b23f      	sxth	r7, r7
   1b3d0:	4413      	add	r3, r2
   1b3d2:	4490      	add	r8, r2
   1b3d4:	e7e8      	b.n	1b3a8 <_lv_disp_refr_task+0x434>
   1b3d6:	bf00      	nop
   1b3d8:	20003e98 	.word	0x20003e98

0001b3dc <_lv_style_list_remove_style>:
 * Remove a style from a style list
 * @param style_list pointer to a style list
 * @param style pointer to a style to remove
 */
void _lv_style_list_remove_style(lv_style_list_t * list, lv_style_t * style)
{
   1b3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b3de:	4604      	mov	r4, r0
    LV_ASSERT_STYLE_LIST(list);
    LV_ASSERT_STYLE(style);

    if(list->style_cnt == 0) return;
   1b3e0:	7900      	ldrb	r0, [r0, #4]
{
   1b3e2:	460e      	mov	r6, r1
    if(list->style_cnt == 0) return;
   1b3e4:	f010 013f 	ands.w	r1, r0, #63	; 0x3f
   1b3e8:	d004      	beq.n	1b3f4 <_lv_style_list_remove_style+0x18>

    /*Check if the style really exists here*/
    uint8_t i;
    bool found = false;
    for(i = 0; i < list->style_cnt; i++) {
   1b3ea:	460b      	mov	r3, r1
   1b3ec:	2200      	movs	r2, #0
   1b3ee:	b2d0      	uxtb	r0, r2
   1b3f0:	4283      	cmp	r3, r0
   1b3f2:	d801      	bhi.n	1b3f8 <_lv_style_list_remove_style+0x1c>

    lv_mem_free(list->style_list);

    list->style_cnt--;
    list->style_list = new_classes;
}
   1b3f4:	b003      	add	sp, #12
   1b3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(list->style_list[i] == style) {
   1b3f8:	6820      	ldr	r0, [r4, #0]
   1b3fa:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
   1b3fe:	42b5      	cmp	r5, r6
   1b400:	f102 0201 	add.w	r2, r2, #1
   1b404:	d1f3      	bne.n	1b3ee <_lv_style_list_remove_style+0x12>
    if(list->style_cnt == 1) {
   1b406:	2901      	cmp	r1, #1
   1b408:	d108      	bne.n	1b41c <_lv_style_list_remove_style+0x40>
        lv_mem_free(list->style_list);
   1b40a:	f002 f8c9 	bl	1d5a0 <lv_mem_free>
        list->style_list = NULL;
   1b40e:	2300      	movs	r3, #0
   1b410:	6023      	str	r3, [r4, #0]
        list->style_cnt = 0;
   1b412:	7923      	ldrb	r3, [r4, #4]
   1b414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   1b418:	7123      	strb	r3, [r4, #4]
        return;
   1b41a:	e7eb      	b.n	1b3f4 <_lv_style_list_remove_style+0x18>
    lv_style_t ** new_classes = lv_mem_alloc(sizeof(lv_style_t *) * (list->style_cnt - 1));
   1b41c:	1e58      	subs	r0, r3, #1
   1b41e:	0080      	lsls	r0, r0, #2
   1b420:	f002 f896 	bl	1d550 <lv_mem_alloc>
    if(new_classes == NULL) {
   1b424:	4605      	mov	r5, r0
   1b426:	b190      	cbz	r0, 1b44e <_lv_style_list_remove_style+0x72>
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   1b428:	7921      	ldrb	r1, [r4, #4]
   1b42a:	6820      	ldr	r0, [r4, #0]
   1b42c:	2300      	movs	r3, #0
   1b42e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1b432:	461a      	mov	r2, r3
   1b434:	b2df      	uxtb	r7, r3
   1b436:	42b9      	cmp	r1, r7
   1b438:	d813      	bhi.n	1b462 <_lv_style_list_remove_style+0x86>
    lv_mem_free(list->style_list);
   1b43a:	f002 f8b1 	bl	1d5a0 <lv_mem_free>
    list->style_cnt--;
   1b43e:	7923      	ldrb	r3, [r4, #4]
    list->style_list = new_classes;
   1b440:	6025      	str	r5, [r4, #0]
    list->style_cnt--;
   1b442:	f103 023f 	add.w	r2, r3, #63	; 0x3f
   1b446:	f362 0305 	bfi	r3, r2, #0, #6
   1b44a:	7123      	strb	r3, [r4, #4]
    list->style_list = new_classes;
   1b44c:	e7d2      	b.n	1b3f4 <_lv_style_list_remove_style+0x18>
        LV_LOG_WARN("lv_style_list_remove_style: couldn't reallocate class list");
   1b44e:	4b0a      	ldr	r3, [pc, #40]	; (1b478 <_lv_style_list_remove_style+0x9c>)
   1b450:	9300      	str	r3, [sp, #0]
   1b452:	490a      	ldr	r1, [pc, #40]	; (1b47c <_lv_style_list_remove_style+0xa0>)
   1b454:	4b0a      	ldr	r3, [pc, #40]	; (1b480 <_lv_style_list_remove_style+0xa4>)
   1b456:	f240 1207 	movw	r2, #263	; 0x107
   1b45a:	2002      	movs	r0, #2
   1b45c:	f002 f850 	bl	1d500 <_lv_log_add>
        return;
   1b460:	e7c8      	b.n	1b3f4 <_lv_style_list_remove_style+0x18>
        if(list->style_list[i] == style) continue;
   1b462:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
   1b466:	42b7      	cmp	r7, r6
        new_classes[j] = list->style_list[i];
   1b468:	bf1e      	ittt	ne
   1b46a:	f845 7022 	strne.w	r7, [r5, r2, lsl #2]
        j++;
   1b46e:	3201      	addne	r2, #1
   1b470:	b2d2      	uxtbne	r2, r2
    for(i = 0, j = 0; i < list->style_cnt; i++) {
   1b472:	3301      	adds	r3, #1
   1b474:	e7de      	b.n	1b434 <_lv_style_list_remove_style+0x58>
   1b476:	bf00      	nop
   1b478:	0002fed9 	.word	0x0002fed9
   1b47c:	0002fea1 	.word	0x0002fea1
   1b480:	0002ff8a 	.word	0x0002ff8a

0001b484 <_lv_style_list_add_style>:
{
   1b484:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b486:	460d      	mov	r5, r1
    if(list == NULL) return;
   1b488:	4604      	mov	r4, r0
   1b48a:	b180      	cbz	r0, 1b4ae <_lv_style_list_add_style+0x2a>
    _lv_style_list_remove_style(list, style);
   1b48c:	f7ff ffa6 	bl	1b3dc <_lv_style_list_remove_style>
    if(list->style_cnt == 0) new_classes = lv_mem_alloc(sizeof(lv_style_t *));
   1b490:	7921      	ldrb	r1, [r4, #4]
   1b492:	0688      	lsls	r0, r1, #26
   1b494:	d10d      	bne.n	1b4b2 <_lv_style_list_add_style+0x2e>
   1b496:	2004      	movs	r0, #4
   1b498:	f002 f85a 	bl	1d550 <lv_mem_alloc>
    if(new_classes == NULL) {
   1b49c:	b988      	cbnz	r0, 1b4c2 <_lv_style_list_add_style+0x3e>
        LV_LOG_WARN("lv_style_list_add_style: couldn't add the class");
   1b49e:	4b17      	ldr	r3, [pc, #92]	; (1b4fc <_lv_style_list_add_style+0x78>)
   1b4a0:	9300      	str	r3, [sp, #0]
   1b4a2:	4917      	ldr	r1, [pc, #92]	; (1b500 <_lv_style_list_add_style+0x7c>)
   1b4a4:	4b17      	ldr	r3, [pc, #92]	; (1b504 <_lv_style_list_add_style+0x80>)
   1b4a6:	22d3      	movs	r2, #211	; 0xd3
   1b4a8:	2002      	movs	r0, #2
   1b4aa:	f002 f829 	bl	1d500 <_lv_log_add>
}
   1b4ae:	b003      	add	sp, #12
   1b4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else new_classes = lv_mem_realloc(list->style_list, sizeof(lv_style_t *) * (list->style_cnt + 1));
   1b4b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
   1b4b6:	3101      	adds	r1, #1
   1b4b8:	6820      	ldr	r0, [r4, #0]
   1b4ba:	0089      	lsls	r1, r1, #2
   1b4bc:	f002 f88e 	bl	1d5dc <lv_mem_realloc>
   1b4c0:	e7ec      	b.n	1b49c <_lv_style_list_add_style+0x18>
    if(list->has_trans) first_style++;
   1b4c2:	7923      	ldrb	r3, [r4, #4]
    if(list->has_local) first_style++;
   1b4c4:	0659      	lsls	r1, r3, #25
    if(list->has_trans) first_style++;
   1b4c6:	ea4f 12d3 	mov.w	r2, r3, lsr #7
    for(i = list->style_cnt; i > first_style; i--) {
   1b4ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    if(list->has_local) first_style++;
   1b4ce:	bf48      	it	mi
   1b4d0:	3201      	addmi	r2, #1
    for(i = list->style_cnt; i > first_style; i--) {
   1b4d2:	4619      	mov	r1, r3
   1b4d4:	eb00 0683 	add.w	r6, r0, r3, lsl #2
   1b4d8:	4291      	cmp	r1, r2
   1b4da:	d808      	bhi.n	1b4ee <_lv_style_list_add_style+0x6a>
    new_classes[first_style] = style;
   1b4dc:	f840 5022 	str.w	r5, [r0, r2, lsl #2]
    list->style_cnt++;
   1b4e0:	7922      	ldrb	r2, [r4, #4]
    list->style_list = new_classes;
   1b4e2:	6020      	str	r0, [r4, #0]
    list->style_cnt++;
   1b4e4:	3301      	adds	r3, #1
   1b4e6:	f363 0205 	bfi	r2, r3, #0, #6
   1b4ea:	7122      	strb	r2, [r4, #4]
    list->style_list = new_classes;
   1b4ec:	e7df      	b.n	1b4ae <_lv_style_list_add_style+0x2a>
        new_classes[i] = new_classes[i - 1];
   1b4ee:	f856 7c04 	ldr.w	r7, [r6, #-4]
   1b4f2:	f846 7904 	str.w	r7, [r6], #-4
    for(i = list->style_cnt; i > first_style; i--) {
   1b4f6:	3901      	subs	r1, #1
   1b4f8:	b2c9      	uxtb	r1, r1
   1b4fa:	e7ed      	b.n	1b4d8 <_lv_style_list_add_style+0x54>
   1b4fc:	0002ff14 	.word	0x0002ff14
   1b500:	0002fea1 	.word	0x0002fea1
   1b504:	0002ff71 	.word	0x0002ff71

0001b508 <get_alloc_local_style>:
 * Get he local style from a style list. Allocate it if not exists yet.
 * @param list pointer to a style list
 * @return pointer to the local style
 */
static lv_style_t * get_alloc_local_style(lv_style_list_t * list)
{
   1b508:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LV_ASSERT_STYLE_LIST(list);

    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   1b50a:	7901      	ldrb	r1, [r0, #4]
   1b50c:	064b      	lsls	r3, r1, #25
{
   1b50e:	4604      	mov	r4, r0
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   1b510:	d505      	bpl.n	1b51e <get_alloc_local_style+0x16>
   1b512:	09c9      	lsrs	r1, r1, #7
    /*Add the local style to the first place*/
    _lv_style_list_add_style(list, local_style);
    list->has_local = 1;

    return local_style;
}
   1b514:	b003      	add	sp, #12
   1b516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    if(list->has_local) return lv_style_list_get_style(list, list->has_trans ? 1 : 0);
   1b51a:	f00b bf93 	b.w	27444 <lv_style_list_get_style>
    lv_style_t * local_style = lv_mem_alloc(sizeof(lv_style_t));
   1b51e:	2004      	movs	r0, #4
   1b520:	f002 f816 	bl	1d550 <lv_mem_alloc>
    if(local_style == NULL) {
   1b524:	4605      	mov	r5, r0
   1b526:	b958      	cbnz	r0, 1b540 <get_alloc_local_style+0x38>
        LV_LOG_WARN("get_local_style: couldn't create local style");
   1b528:	4b0b      	ldr	r3, [pc, #44]	; (1b558 <get_alloc_local_style+0x50>)
   1b52a:	9300      	str	r3, [sp, #0]
   1b52c:	490b      	ldr	r1, [pc, #44]	; (1b55c <get_alloc_local_style+0x54>)
   1b52e:	4b0c      	ldr	r3, [pc, #48]	; (1b560 <get_alloc_local_style+0x58>)
   1b530:	f44f 628b 	mov.w	r2, #1112	; 0x458
   1b534:	2002      	movs	r0, #2
   1b536:	f001 ffe3 	bl	1d500 <_lv_log_add>
}
   1b53a:	4628      	mov	r0, r5
   1b53c:	b003      	add	sp, #12
   1b53e:	bd30      	pop	{r4, r5, pc}
    lv_style_init(local_style);
   1b540:	f00b fffa 	bl	27538 <lv_style_init>
    _lv_style_list_add_style(list, local_style);
   1b544:	4629      	mov	r1, r5
   1b546:	4620      	mov	r0, r4
   1b548:	f7ff ff9c 	bl	1b484 <_lv_style_list_add_style>
    list->has_local = 1;
   1b54c:	7923      	ldrb	r3, [r4, #4]
   1b54e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1b552:	7123      	strb	r3, [r4, #4]
    return local_style;
   1b554:	e7f1      	b.n	1b53a <get_alloc_local_style+0x32>
   1b556:	bf00      	nop
   1b558:	0002ff44 	.word	0x0002ff44
   1b55c:	0002fea1 	.word	0x0002fea1
   1b560:	0002ffa6 	.word	0x0002ffa6

0001b564 <show_error>:
        }
    }
}

static void show_error(const lv_area_t * coords, const lv_area_t * clip_area, const char * msg)
{
   1b564:	b570      	push	{r4, r5, r6, lr}
   1b566:	b0a0      	sub	sp, #128	; 0x80
   1b568:	4604      	mov	r4, r0
    lv_draw_rect_dsc_t rect_dsc;
    lv_draw_rect_dsc_init(&rect_dsc);
   1b56a:	a80b      	add	r0, sp, #44	; 0x2c
{
   1b56c:	460d      	mov	r5, r1
   1b56e:	4616      	mov	r6, r2
    lv_draw_rect_dsc_init(&rect_dsc);
   1b570:	f001 fac4 	bl	1cafc <lv_draw_rect_dsc_init>
    rect_dsc.bg_color = LV_COLOR_WHITE;
   1b574:	4b0a      	ldr	r3, [pc, #40]	; (1b5a0 <show_error+0x3c>)
    lv_draw_rect(coords, clip_area, &rect_dsc);
   1b576:	aa0b      	add	r2, sp, #44	; 0x2c
    rect_dsc.bg_color = LV_COLOR_WHITE;
   1b578:	881b      	ldrh	r3, [r3, #0]
   1b57a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    lv_draw_rect(coords, clip_area, &rect_dsc);
   1b57e:	4629      	mov	r1, r5
   1b580:	4620      	mov	r0, r4
   1b582:	f00d fe70 	bl	29266 <lv_draw_rect>

    lv_draw_label_dsc_t label_dsc;
    lv_draw_label_dsc_init(&label_dsc);
   1b586:	a803      	add	r0, sp, #12
   1b588:	f000 f918 	bl	1b7bc <lv_draw_label_dsc_init>
    lv_draw_label(coords, clip_area, &label_dsc, msg, NULL);
   1b58c:	2300      	movs	r3, #0
   1b58e:	9300      	str	r3, [sp, #0]
   1b590:	aa03      	add	r2, sp, #12
   1b592:	4633      	mov	r3, r6
   1b594:	4629      	mov	r1, r5
   1b596:	4620      	mov	r0, r4
   1b598:	f000 f926 	bl	1b7e8 <lv_draw_label>
}
   1b59c:	b020      	add	sp, #128	; 0x80
   1b59e:	bd70      	pop	{r4, r5, r6, pc}
   1b5a0:	0002c10a 	.word	0x0002c10a

0001b5a4 <lv_img_cf_get_px_size>:
    switch(cf) {
   1b5a4:	3804      	subs	r0, #4
   1b5a6:	b2c0      	uxtb	r0, r0
   1b5a8:	280a      	cmp	r0, #10
   1b5aa:	bf9a      	itte	ls
   1b5ac:	4b01      	ldrls	r3, [pc, #4]	; (1b5b4 <lv_img_cf_get_px_size+0x10>)
   1b5ae:	5c18      	ldrbls	r0, [r3, r0]
{
   1b5b0:	2000      	movhi	r0, #0
}
   1b5b2:	4770      	bx	lr
   1b5b4:	00030047 	.word	0x00030047

0001b5b8 <lv_draw_img>:
{
   1b5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b5bc:	4604      	mov	r4, r0
   1b5be:	b08d      	sub	sp, #52	; 0x34
   1b5c0:	4688      	mov	r8, r1
   1b5c2:	461f      	mov	r7, r3
    if(src == NULL) {
   1b5c4:	4610      	mov	r0, r2
   1b5c6:	b94a      	cbnz	r2, 1b5dc <lv_draw_img+0x24>
        LV_LOG_WARN("Image draw: src is NULL");
   1b5c8:	4b75      	ldr	r3, [pc, #468]	; (1b7a0 <lv_draw_img+0x1e8>)
   1b5ca:	9300      	str	r3, [sp, #0]
   1b5cc:	4b75      	ldr	r3, [pc, #468]	; (1b7a4 <lv_draw_img+0x1ec>)
   1b5ce:	2249      	movs	r2, #73	; 0x49
        LV_LOG_WARN("Image draw error");
   1b5d0:	4975      	ldr	r1, [pc, #468]	; (1b7a8 <lv_draw_img+0x1f0>)
   1b5d2:	2002      	movs	r0, #2
   1b5d4:	f001 ff94 	bl	1d500 <_lv_log_add>
        show_error(coords, mask, "No\ndata");
   1b5d8:	4a74      	ldr	r2, [pc, #464]	; (1b7ac <lv_draw_img+0x1f4>)
   1b5da:	e014      	b.n	1b606 <lv_draw_img+0x4e>
    if(dsc->opa <= LV_OPA_MIN) return;
   1b5dc:	781b      	ldrb	r3, [r3, #0]
   1b5de:	2b02      	cmp	r3, #2
   1b5e0:	d967      	bls.n	1b6b2 <lv_draw_img+0xfa>
    lv_img_cache_entry_t * cdsc = _lv_img_cache_open(src, draw_dsc->recolor);
   1b5e2:	89b9      	ldrh	r1, [r7, #12]
   1b5e4:	f001 faa8 	bl	1cb38 <_lv_img_cache_open>
    if(cdsc == NULL) return LV_RES_INV;
   1b5e8:	4605      	mov	r5, r0
   1b5ea:	2800      	cmp	r0, #0
   1b5ec:	f000 80b8 	beq.w	1b760 <lv_draw_img+0x1a8>
    if(cdsc->dec_dsc.error_msg != NULL) {
   1b5f0:	6983      	ldr	r3, [r0, #24]
   1b5f2:	b16b      	cbz	r3, 1b610 <lv_draw_img+0x58>
        LV_LOG_WARN("Image draw error");
   1b5f4:	4b6e      	ldr	r3, [pc, #440]	; (1b7b0 <lv_draw_img+0x1f8>)
   1b5f6:	9300      	str	r3, [sp, #0]
   1b5f8:	22f3      	movs	r2, #243	; 0xf3
   1b5fa:	4b6e      	ldr	r3, [pc, #440]	; (1b7b4 <lv_draw_img+0x1fc>)
   1b5fc:	496a      	ldr	r1, [pc, #424]	; (1b7a8 <lv_draw_img+0x1f0>)
   1b5fe:	2002      	movs	r0, #2
   1b600:	f001 ff7e 	bl	1d500 <_lv_log_add>
        show_error(coords, clip_area, cdsc->dec_dsc.error_msg);
   1b604:	69aa      	ldr	r2, [r5, #24]
        show_error(coords, mask, "No\ndata");
   1b606:	4641      	mov	r1, r8
   1b608:	4620      	mov	r0, r4
   1b60a:	f7ff ffab 	bl	1b564 <show_error>
        return;
   1b60e:	e050      	b.n	1b6b2 <lv_draw_img+0xfa>
    bool chroma_keyed = lv_img_cf_is_chroma_keyed(cdsc->dec_dsc.header.cf);
   1b610:	7b03      	ldrb	r3, [r0, #12]
   1b612:	f003 031f 	and.w	r3, r3, #31
   1b616:	4618      	mov	r0, r3
   1b618:	f00d f97d 	bl	28916 <lv_img_cf_is_chroma_keyed>
   1b61c:	9003      	str	r0, [sp, #12]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   1b61e:	4618      	mov	r0, r3
   1b620:	f00d f983 	bl	2892a <lv_img_cf_has_alpha>
    else if(cdsc->dec_dsc.img_data) {
   1b624:	692b      	ldr	r3, [r5, #16]
    bool alpha_byte   = lv_img_cf_has_alpha(cdsc->dec_dsc.header.cf);
   1b626:	9004      	str	r0, [sp, #16]
    else if(cdsc->dec_dsc.img_data) {
   1b628:	2b00      	cmp	r3, #0
   1b62a:	d045      	beq.n	1b6b8 <lv_draw_img+0x100>
        lv_area_copy(&map_area_rot, coords);
   1b62c:	a808      	add	r0, sp, #32
   1b62e:	4621      	mov	r1, r4
   1b630:	f00c fef0 	bl	28414 <lv_area_copy>
        if(draw_dsc->angle || draw_dsc->zoom != LV_IMG_ZOOM_NONE) {
   1b634:	887b      	ldrh	r3, [r7, #2]
   1b636:	8938      	ldrh	r0, [r7, #8]
   1b638:	b913      	cbnz	r3, 1b640 <lv_draw_img+0x88>
   1b63a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1b63e:	d028      	beq.n	1b692 <lv_draw_img+0xda>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b640:	88e2      	ldrh	r2, [r4, #6]
   1b642:	8861      	ldrh	r1, [r4, #2]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b644:	8826      	ldrh	r6, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1b646:	3201      	adds	r2, #1
   1b648:	1a52      	subs	r2, r2, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1b64a:	88a1      	ldrh	r1, [r4, #4]
   1b64c:	3101      	adds	r1, #1
   1b64e:	1b89      	subs	r1, r1, r6
            _lv_img_buf_get_transformed_area(&map_area_rot, w, h, draw_dsc->angle, draw_dsc->zoom, &draw_dsc->pivot);
   1b650:	1d3e      	adds	r6, r7, #4
   1b652:	e9cd 0600 	strd	r0, r6, [sp]
   1b656:	b21b      	sxth	r3, r3
   1b658:	b212      	sxth	r2, r2
   1b65a:	b209      	sxth	r1, r1
   1b65c:	a808      	add	r0, sp, #32
   1b65e:	f00e fc0d 	bl	29e7c <_lv_img_buf_get_transformed_area>
            map_area_rot.x1 += coords->x1;
   1b662:	f9b4 2000 	ldrsh.w	r2, [r4]
   1b666:	f8bd 3020 	ldrh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   1b66a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x1 += coords->x1;
   1b66e:	4413      	add	r3, r2
   1b670:	f8ad 3020 	strh.w	r3, [sp, #32]
            map_area_rot.y1 += coords->y1;
   1b674:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1b678:	4419      	add	r1, r3
   1b67a:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            map_area_rot.x2 += coords->x1;
   1b67e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
   1b682:	440a      	add	r2, r1
   1b684:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
            map_area_rot.y2 += coords->y1;
   1b688:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   1b68c:	4413      	add	r3, r2
   1b68e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
        union_ok = _lv_area_intersect(&mask_com, clip_area, &map_area_rot);
   1b692:	aa08      	add	r2, sp, #32
   1b694:	4641      	mov	r1, r8
   1b696:	a80a      	add	r0, sp, #40	; 0x28
   1b698:	f00e fccb 	bl	2a032 <_lv_area_intersect>
        if(union_ok == false) {
   1b69c:	b148      	cbz	r0, 1b6b2 <lv_draw_img+0xfa>
        lv_draw_map(coords, &mask_com, cdsc->dec_dsc.img_data, draw_dsc, chroma_keyed, alpha_byte);
   1b69e:	9b04      	ldr	r3, [sp, #16]
   1b6a0:	9301      	str	r3, [sp, #4]
   1b6a2:	9b03      	ldr	r3, [sp, #12]
   1b6a4:	9300      	str	r3, [sp, #0]
   1b6a6:	692a      	ldr	r2, [r5, #16]
   1b6a8:	463b      	mov	r3, r7
   1b6aa:	a90a      	add	r1, sp, #40	; 0x28
   1b6ac:	4620      	mov	r0, r4
   1b6ae:	f00c feb6 	bl	2841e <lv_draw_map>
}
   1b6b2:	b00d      	add	sp, #52	; 0x34
   1b6b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        union_ok = _lv_area_intersect(&mask_com, clip_area, coords);
   1b6b8:	4622      	mov	r2, r4
   1b6ba:	4641      	mov	r1, r8
   1b6bc:	a806      	add	r0, sp, #24
   1b6be:	f00e fcb8 	bl	2a032 <_lv_area_intersect>
        if(union_ok == false) {
   1b6c2:	2800      	cmp	r0, #0
   1b6c4:	d0f5      	beq.n	1b6b2 <lv_draw_img+0xfa>
   1b6c6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
   1b6ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1b6ce:	3601      	adds	r6, #1
   1b6d0:	1af6      	subs	r6, r6, r3
   1b6d2:	b236      	sxth	r6, r6
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   1b6d4:	eb06 0046 	add.w	r0, r6, r6, lsl #1
   1b6d8:	f001 ffbc 	bl	1d654 <_lv_mem_buf_get>
        lv_area_copy(&line, &mask_com);
   1b6dc:	f10d 0a20 	add.w	sl, sp, #32
   1b6e0:	a906      	add	r1, sp, #24
        uint8_t  * buf = _lv_mem_buf_get(lv_area_get_width(&mask_com) *
   1b6e2:	4681      	mov	r9, r0
        lv_area_copy(&line, &mask_com);
   1b6e4:	4650      	mov	r0, sl
   1b6e6:	f00c fe95 	bl	28414 <lv_area_copy>
        lv_area_set_height(&line, 1);
   1b6ea:	2101      	movs	r1, #1
   1b6ec:	4650      	mov	r0, sl
   1b6ee:	f00e fc8d 	bl	2a00c <lv_area_set_height>
        int32_t x = mask_com.x1 - coords->x1;
   1b6f2:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   1b6f6:	f9b4 2000 	ldrsh.w	r2, [r4]
        int32_t y = mask_com.y1 - coords->y1;
   1b6fa:	f9bd b01a 	ldrsh.w	fp, [sp, #26]
   1b6fe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b702:	1a9b      	subs	r3, r3, r2
        int32_t y = mask_com.y1 - coords->y1;
   1b704:	ebab 0101 	sub.w	r1, fp, r1
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b708:	b21b      	sxth	r3, r3
        int32_t y = mask_com.y1 - coords->y1;
   1b70a:	9102      	str	r1, [sp, #8]
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b70c:	9305      	str	r3, [sp, #20]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   1b70e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
   1b712:	459b      	cmp	fp, r3
   1b714:	dd03      	ble.n	1b71e <lv_draw_img+0x166>
        _lv_mem_buf_release(buf);
   1b716:	4648      	mov	r0, r9
   1b718:	f001 fffe 	bl	1d718 <_lv_mem_buf_release>
    if(res == LV_RES_INV) {
   1b71c:	e7c9      	b.n	1b6b2 <lv_draw_img+0xfa>
            union_ok = _lv_area_intersect(&mask_line, clip_area, &line);
   1b71e:	4652      	mov	r2, sl
   1b720:	4641      	mov	r1, r8
   1b722:	a80a      	add	r0, sp, #40	; 0x28
   1b724:	f00e fc85 	bl	2a032 <_lv_area_intersect>
            if(union_ok == false) continue;
   1b728:	2800      	cmp	r0, #0
   1b72a:	d035      	beq.n	1b798 <lv_draw_img+0x1e0>
            read_res = lv_img_decoder_read_line(&cdsc->dec_dsc, x, y, width, buf);
   1b72c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
   1b730:	9905      	ldr	r1, [sp, #20]
   1b732:	f8cd 9000 	str.w	r9, [sp]
   1b736:	4633      	mov	r3, r6
   1b738:	4628      	mov	r0, r5
   1b73a:	f00e fbc1 	bl	29ec0 <lv_img_decoder_read_line>
            if(read_res != LV_RES_OK) {
   1b73e:	2801      	cmp	r0, #1
   1b740:	d013      	beq.n	1b76a <lv_draw_img+0x1b2>
                lv_img_decoder_close(&cdsc->dec_dsc);
   1b742:	4628      	mov	r0, r5
   1b744:	f00e fbcc 	bl	29ee0 <lv_img_decoder_close>
                LV_LOG_WARN("Image draw can't read the line");
   1b748:	4b1b      	ldr	r3, [pc, #108]	; (1b7b8 <lv_draw_img+0x200>)
   1b74a:	9300      	str	r3, [sp, #0]
   1b74c:	2002      	movs	r0, #2
   1b74e:	4b19      	ldr	r3, [pc, #100]	; (1b7b4 <lv_draw_img+0x1fc>)
   1b750:	4915      	ldr	r1, [pc, #84]	; (1b7a8 <lv_draw_img+0x1f0>)
   1b752:	f44f 7298 	mov.w	r2, #304	; 0x130
   1b756:	f001 fed3 	bl	1d500 <_lv_log_add>
                _lv_mem_buf_release(buf);
   1b75a:	4648      	mov	r0, r9
   1b75c:	f001 ffdc 	bl	1d718 <_lv_mem_buf_release>
        LV_LOG_WARN("Image draw error");
   1b760:	4b13      	ldr	r3, [pc, #76]	; (1b7b0 <lv_draw_img+0x1f8>)
   1b762:	9300      	str	r3, [sp, #0]
   1b764:	2254      	movs	r2, #84	; 0x54
   1b766:	4b0f      	ldr	r3, [pc, #60]	; (1b7a4 <lv_draw_img+0x1ec>)
   1b768:	e732      	b.n	1b5d0 <lv_draw_img+0x18>
            lv_draw_map(&line, &mask_line, buf, draw_dsc, chroma_keyed, alpha_byte);
   1b76a:	9b04      	ldr	r3, [sp, #16]
   1b76c:	9301      	str	r3, [sp, #4]
   1b76e:	9b03      	ldr	r3, [sp, #12]
   1b770:	9300      	str	r3, [sp, #0]
   1b772:	464a      	mov	r2, r9
   1b774:	463b      	mov	r3, r7
   1b776:	a90a      	add	r1, sp, #40	; 0x28
   1b778:	4650      	mov	r0, sl
   1b77a:	f00c fe50 	bl	2841e <lv_draw_map>
            line.y1++;
   1b77e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   1b782:	3301      	adds	r3, #1
   1b784:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            line.y2++;
   1b788:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1b78c:	3301      	adds	r3, #1
   1b78e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
            y++;
   1b792:	9b02      	ldr	r3, [sp, #8]
   1b794:	3301      	adds	r3, #1
   1b796:	9302      	str	r3, [sp, #8]
        for(row = mask_com.y1; row <= mask_com.y2; row++) {
   1b798:	f10b 0b01 	add.w	fp, fp, #1
   1b79c:	e7b7      	b.n	1b70e <lv_draw_img+0x156>
   1b79e:	bf00      	nop
   1b7a0:	0002fff7 	.word	0x0002fff7
   1b7a4:	00030052 	.word	0x00030052
   1b7a8:	0002ffbc 	.word	0x0002ffbc
   1b7ac:	0003000f 	.word	0x0003000f
   1b7b0:	00030017 	.word	0x00030017
   1b7b4:	0003005e 	.word	0x0003005e
   1b7b8:	00030028 	.word	0x00030028

0001b7bc <lv_draw_label_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_label_dsc_init(lv_draw_label_dsc_t * dsc)
{
   1b7bc:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
   1b7be:	2120      	movs	r1, #32
{
   1b7c0:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_label_dsc_t));
   1b7c2:	f00d f8e2 	bl	2898a <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   1b7c6:	23ff      	movs	r3, #255	; 0xff
   1b7c8:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
    dsc->font = LV_THEME_DEFAULT_FONT_NORMAL;
   1b7ca:	4b06      	ldr	r3, [pc, #24]	; (1b7e4 <lv_draw_label_dsc_init+0x28>)
   1b7cc:	6063      	str	r3, [r4, #4]
    dsc->sel_start = LV_DRAW_LABEL_NO_TXT_SEL;
   1b7ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dsc->sel_end = LV_DRAW_LABEL_NO_TXT_SEL;
   1b7d2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    dsc->color = LV_COLOR_BLACK;
   1b7d6:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
   1b7da:	6023      	str	r3, [r4, #0]
    dsc->sel_color = LV_COLOR_BLUE;
    dsc->bidi_dir = LV_BIDI_DIR_LTR;
   1b7dc:	2300      	movs	r3, #0
   1b7de:	7723      	strb	r3, [r4, #28]
}
   1b7e0:	bd10      	pop	{r4, pc}
   1b7e2:	bf00      	nop
   1b7e4:	20000800 	.word	0x20000800

0001b7e8 <lv_draw_label>:
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_label(const lv_area_t * coords, const lv_area_t * mask,
                                         const lv_draw_label_dsc_t * dsc,
                                         const char * txt,
                                         lv_draw_label_hint_t * hint)
{
   1b7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7ec:	b0cb      	sub	sp, #300	; 0x12c
   1b7ee:	4688      	mov	r8, r1
   1b7f0:	9308      	str	r3, [sp, #32]
   1b7f2:	2300      	movs	r3, #0
   1b7f4:	931b      	str	r3, [sp, #108]	; 0x6c

    if(dsc->opa <= LV_OPA_MIN) return;
   1b7f6:	7a13      	ldrb	r3, [r2, #8]
{
   1b7f8:	9e54      	ldr	r6, [sp, #336]	; 0x150
   1b7fa:	9005      	str	r0, [sp, #20]
    if(dsc->opa <= LV_OPA_MIN) return;
   1b7fc:	2b02      	cmp	r3, #2
{
   1b7fe:	4614      	mov	r4, r2
    if(dsc->opa <= LV_OPA_MIN) return;
   1b800:	f240 80d1 	bls.w	1b9a6 <lv_draw_label+0x1be>
    const lv_font_t * font = dsc->font;
    int32_t w;

    /*No need to waste processor time if string is empty*/
    if(txt[0] == '\0')  return;
   1b804:	9b08      	ldr	r3, [sp, #32]
   1b806:	781b      	ldrb	r3, [r3, #0]
   1b808:	2b00      	cmp	r3, #0
   1b80a:	f000 80cc 	beq.w	1b9a6 <lv_draw_label+0x1be>
    const lv_font_t * font = dsc->font;
   1b80e:	f8d2 b004 	ldr.w	fp, [r2, #4]

    lv_area_t clipped_area;
    bool clip_ok = _lv_area_intersect(&clipped_area, coords, mask);
   1b812:	460a      	mov	r2, r1
   1b814:	4601      	mov	r1, r0
   1b816:	a82b      	add	r0, sp, #172	; 0xac
   1b818:	f00e fc0b 	bl	2a032 <_lv_area_intersect>
    if(!clip_ok) return;
   1b81c:	2800      	cmp	r0, #0
   1b81e:	f000 80c2 	beq.w	1b9a6 <lv_draw_label+0x1be>


    if((dsc->flag & LV_TXT_FLAG_EXPAND) == 0) {
   1b822:	7f63      	ldrb	r3, [r4, #29]
   1b824:	079f      	lsls	r7, r3, #30
   1b826:	f100 80c1 	bmi.w	1b9ac <lv_draw_label+0x1c4>
   1b82a:	9b05      	ldr	r3, [sp, #20]
   1b82c:	9a05      	ldr	r2, [sp, #20]
   1b82e:	889b      	ldrh	r3, [r3, #4]
   1b830:	8812      	ldrh	r2, [r2, #0]
   1b832:	3301      	adds	r3, #1
   1b834:	1a9b      	subs	r3, r3, r2
        /*Normally use the label's width as width*/
        w = lv_area_get_width(coords);
   1b836:	b21b      	sxth	r3, r3
                         dsc->flag);
        w = p.x;
    }

    int32_t line_height_font = lv_font_get_line_height(font);
    int32_t line_height = line_height_font + dsc->line_space;
   1b838:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
   1b83c:	9207      	str	r2, [sp, #28]

    /*Init variables for the first line*/
    int32_t line_width = 0;
    lv_point_t pos;
    pos.x = coords->x1;
   1b83e:	9a05      	ldr	r2, [sp, #20]

    int32_t x_ofs = 0;
    int32_t y_ofs = 0;
    x_ofs = dsc->ofs_x;
    y_ofs = dsc->ofs_y;
    pos.y += y_ofs;
   1b840:	9905      	ldr	r1, [sp, #20]
    pos.x = coords->x1;
   1b842:	f9b2 2000 	ldrsh.w	r2, [r2]
   1b846:	9209      	str	r2, [sp, #36]	; 0x24
    x_ofs = dsc->ofs_x;
   1b848:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
    pos.y += y_ofs;
   1b84c:	884d      	ldrh	r5, [r1, #2]
    x_ofs = dsc->ofs_x;
   1b84e:	9223      	str	r2, [sp, #140]	; 0x8c
    y_ofs = dsc->ofs_y;
   1b850:	f9b4 201a 	ldrsh.w	r2, [r4, #26]
    int32_t line_height_font = lv_font_get_line_height(font);
   1b854:	f9bb a008 	ldrsh.w	sl, [fp, #8]
    pos.y += y_ofs;
   1b858:	4415      	add	r5, r2
   1b85a:	b22d      	sxth	r5, r5

    uint32_t line_start     = 0;
    int32_t last_line_start = -1;

    /*Check the hint to use the cached info*/
    if(hint && y_ofs == 0 && coords->y1 < 0) {
   1b85c:	2e00      	cmp	r6, #0
   1b85e:	f000 80b6 	beq.w	1b9ce <lv_draw_label+0x1e6>
   1b862:	2a00      	cmp	r2, #0
   1b864:	f040 80b5 	bne.w	1b9d2 <lv_draw_label+0x1ea>
   1b868:	2d00      	cmp	r5, #0
   1b86a:	f280 80b3 	bge.w	1b9d4 <lv_draw_label+0x1ec>
        /*If the label changed too much recalculate the hint.*/
        if(LV_MATH_ABS(hint->coord_y - coords->y1) > LV_LABEL_HINT_UPDATE_TH - 2 * line_height) {
   1b86e:	68b2      	ldr	r2, [r6, #8]
   1b870:	9907      	ldr	r1, [sp, #28]
   1b872:	1b52      	subs	r2, r2, r5
   1b874:	2a00      	cmp	r2, #0
   1b876:	f5c1 7100 	rsb	r1, r1, #512	; 0x200
   1b87a:	bfb8      	it	lt
   1b87c:	4252      	neglt	r2, r2
   1b87e:	eba1 010a 	sub.w	r1, r1, sl
   1b882:	ebb2 0f41 	cmp.w	r2, r1, lsl #1
            hint->line_start = -1;
   1b886:	bfc4      	itt	gt
   1b888:	f04f 32ff 	movgt.w	r2, #4294967295	; 0xffffffff
   1b88c:	6032      	strgt	r2, [r6, #0]
        }
        last_line_start = hint->line_start;
   1b88e:	6832      	ldr	r2, [r6, #0]
    }

    /*Use the hint if it's valid*/
    if(hint && last_line_start >= 0) {
   1b890:	2a00      	cmp	r2, #0
   1b892:	f2c0 809e 	blt.w	1b9d2 <lv_draw_label+0x1ea>
        line_start = last_line_start;
   1b896:	9204      	str	r2, [sp, #16]
        pos.y += hint->y;
   1b898:	6872      	ldr	r2, [r6, #4]
   1b89a:	4415      	add	r5, r2
   1b89c:	b22d      	sxth	r5, r5
    }

    uint32_t line_end = line_start + _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1b89e:	9f04      	ldr	r7, [sp, #16]
   1b8a0:	9808      	ldr	r0, [sp, #32]
   1b8a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1b8a6:	b21b      	sxth	r3, r3
   1b8a8:	931a      	str	r3, [sp, #104]	; 0x68
   1b8aa:	7f63      	ldrb	r3, [r4, #29]
   1b8ac:	9300      	str	r3, [sp, #0]
   1b8ae:	4438      	add	r0, r7
   1b8b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1b8b2:	4659      	mov	r1, fp
   1b8b4:	f002 f9ce 	bl	1dc54 <_lv_txt_get_next_line>
   1b8b8:	9b04      	ldr	r3, [sp, #16]
   1b8ba:	18c3      	adds	r3, r0, r3
   1b8bc:	9306      	str	r3, [sp, #24]
    /*Go the first visible line*/
    while(pos.y + line_height_font < mask->y1) {
        /*Go to next line*/
        line_start = line_end;
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
        pos.y += line_height;
   1b8be:	9b07      	ldr	r3, [sp, #28]
   1b8c0:	4453      	add	r3, sl
   1b8c2:	461f      	mov	r7, r3
    while(pos.y + line_height_font < mask->y1) {
   1b8c4:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
   1b8c8:	7f63      	ldrb	r3, [r4, #29]
   1b8ca:	eb05 020a 	add.w	r2, r5, sl
   1b8ce:	428a      	cmp	r2, r1
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1b8d0:	9a08      	ldr	r2, [sp, #32]
    while(pos.y + line_height_font < mask->y1) {
   1b8d2:	f2c0 8081 	blt.w	1b9d8 <lv_draw_label+0x1f0>

        if(txt[line_start] == '\0') return;
    }

    /*Align to middle*/
    if(dsc->flag & LV_TXT_FLAG_CENTER) {
   1b8d6:	9904      	ldr	r1, [sp, #16]
   1b8d8:	075e      	lsls	r6, r3, #29
   1b8da:	eb02 0001 	add.w	r0, r2, r1
   1b8de:	f140 80a1 	bpl.w	1ba24 <lv_draw_label+0x23c>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1b8e2:	9906      	ldr	r1, [sp, #24]
   1b8e4:	9e04      	ldr	r6, [sp, #16]
   1b8e6:	9300      	str	r3, [sp, #0]
   1b8e8:	465a      	mov	r2, fp
   1b8ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b8ee:	1b89      	subs	r1, r1, r6
   1b8f0:	f002 f95e 	bl	1dbb0 <_lv_txt_get_width>
   1b8f4:	9b05      	ldr	r3, [sp, #20]
   1b8f6:	9a05      	ldr	r2, [sp, #20]
   1b8f8:	889b      	ldrh	r3, [r3, #4]
   1b8fa:	8812      	ldrh	r2, [r2, #0]
   1b8fc:	3301      	adds	r3, #1
   1b8fe:	1a9b      	subs	r3, r3, r2

        pos.x += (lv_area_get_width(coords) - line_width) / 2;
   1b900:	b21b      	sxth	r3, r3
   1b902:	1a18      	subs	r0, r3, r0
   1b904:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b906:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1b90a:	eb03 0060 	add.w	r0, r3, r0, asr #1
   1b90e:	b203      	sxth	r3, r0

    }
    /*Align to the right*/
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
        pos.x += lv_area_get_width(coords) - line_width;
   1b910:	9309      	str	r3, [sp, #36]	; 0x24
    }

    lv_opa_t opa = dsc->opa;
   1b912:	7a23      	ldrb	r3, [r4, #8]
   1b914:	931d      	str	r3, [sp, #116]	; 0x74

    uint32_t sel_start = dsc->sel_start;
   1b916:	6923      	ldr	r3, [r4, #16]
   1b918:	930c      	str	r3, [sp, #48]	; 0x30
    uint32_t sel_end = dsc->sel_end;
   1b91a:	6963      	ldr	r3, [r4, #20]
   1b91c:	930d      	str	r3, [sp, #52]	; 0x34
    if(sel_start > sel_end) {
   1b91e:	e9dd 320c 	ldrd	r3, r2, [sp, #48]	; 0x30
   1b922:	4293      	cmp	r3, r2
   1b924:	bf88      	it	hi
   1b926:	e9cd 230c 	strdhi	r2, r3, [sp, #48]	; 0x30
        sel_start = sel_end;
        sel_end = tmp;
    }
    lv_draw_line_dsc_t line_dsc;

    if((dsc->decor & LV_TEXT_DECOR_UNDERLINE) || (dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH)) {
   1b92a:	7fa3      	ldrb	r3, [r4, #30]
   1b92c:	079a      	lsls	r2, r3, #30
   1b92e:	d016      	beq.n	1b95e <lv_draw_label+0x176>
        lv_draw_line_dsc_init(&line_dsc);
   1b930:	a82f      	add	r0, sp, #188	; 0xbc
   1b932:	f00d f836 	bl	289a2 <lv_draw_line_dsc_init>
        line_dsc.color = dsc->color;
   1b936:	8823      	ldrh	r3, [r4, #0]
   1b938:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   1b93c:	f99b 300e 	ldrsb.w	r3, [fp, #14]
        line_dsc.opa = dsc->opa;
        line_dsc.blend_mode = dsc->blend_mode;
   1b940:	7fe2      	ldrb	r2, [r4, #31]
   1b942:	2b00      	cmp	r3, #0
   1b944:	bf08      	it	eq
   1b946:	2301      	moveq	r3, #1
        line_dsc.width = font->underline_thickness ? font->underline_thickness : 1;
   1b948:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
        line_dsc.opa = dsc->opa;
   1b94c:	7a23      	ldrb	r3, [r4, #8]
   1b94e:	f88d 30c4 	strb.w	r3, [sp, #196]	; 0xc4
        line_dsc.blend_mode = dsc->blend_mode;
   1b952:	f89d 30c5 	ldrb.w	r3, [sp, #197]	; 0xc5
   1b956:	f362 0301 	bfi	r3, r2, #0, #2
   1b95a:	f88d 30c5 	strb.w	r3, [sp, #197]	; 0xc5
    lv_color_t recolor;
    int32_t letter_w;


    lv_draw_rect_dsc_t draw_dsc_sel;
    lv_draw_rect_dsc_init(&draw_dsc_sel);
   1b95e:	a835      	add	r0, sp, #212	; 0xd4
   1b960:	f001 f8cc 	bl	1cafc <lv_draw_rect_dsc_init>
    draw_dsc_sel.bg_color = dsc->sel_color;
   1b964:	8863      	ldrh	r3, [r4, #2]
   1b966:	f8ad 30d6 	strh.w	r3, [sp, #214]	; 0xd6

    int32_t pos_x_start = pos.x;
    /*Write out all lines*/
    while(txt[line_start] != '\0') {
   1b96a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1b96c:	2bfd      	cmp	r3, #253	; 0xfd
   1b96e:	bf88      	it	hi
   1b970:	23ff      	movhi	r3, #255	; 0xff
   1b972:	9313      	str	r3, [sp, #76]	; 0x4c
   1b974:	9b07      	ldr	r3, [sp, #28]
   1b976:	4453      	add	r3, sl
   1b978:	b29b      	uxth	r3, r3
   1b97a:	9324      	str	r3, [sp, #144]	; 0x90
   1b97c:	b2ab      	uxth	r3, r5
   1b97e:	9317      	str	r3, [sp, #92]	; 0x5c
    uint32_t par_start = 0;
   1b980:	2300      	movs	r3, #0
   1b982:	9315      	str	r3, [sp, #84]	; 0x54
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
                    lv_area_t sel_coords;
                    sel_coords.x1 = pos.x;
                    sel_coords.y1 = pos.y;
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
                    sel_coords.y2 = pos.y + line_height - 1;
   1b984:	9b07      	ldr	r3, [sp, #28]
    while(txt[line_start] != '\0') {
   1b986:	9d09      	ldr	r5, [sp, #36]	; 0x24
                    sel_coords.y2 = pos.y + line_height - 1;
   1b988:	1e5f      	subs	r7, r3, #1
   1b98a:	eb07 030a 	add.w	r3, r7, sl
   1b98e:	9329      	str	r3, [sp, #164]	; 0xa4
   1b990:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
    while(txt[line_start] != '\0') {
   1b994:	9a04      	ldr	r2, [sp, #16]
   1b996:	9316      	str	r3, [sp, #88]	; 0x58
   1b998:	9b08      	ldr	r3, [sp, #32]
   1b99a:	4413      	add	r3, r2
   1b99c:	9314      	str	r3, [sp, #80]	; 0x50
   1b99e:	9b08      	ldr	r3, [sp, #32]
   1b9a0:	5c9b      	ldrb	r3, [r3, r2]
   1b9a2:	2b00      	cmp	r3, #0
   1b9a4:	d156      	bne.n	1ba54 <lv_draw_label+0x26c>

        if(pos.y > mask->y2) return;
    }

    LV_ASSERT_MEM_INTEGRITY();
}
   1b9a6:	b04b      	add	sp, #300	; 0x12c
   1b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _lv_txt_get_size(&p, txt, dsc->font, dsc->letter_space, dsc->line_space, LV_COORD_MAX,
   1b9ac:	9302      	str	r3, [sp, #8]
   1b9ae:	f647 4318 	movw	r3, #31768	; 0x7c18
   1b9b2:	9301      	str	r3, [sp, #4]
   1b9b4:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   1b9b8:	9300      	str	r3, [sp, #0]
   1b9ba:	6862      	ldr	r2, [r4, #4]
   1b9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1b9c0:	9908      	ldr	r1, [sp, #32]
   1b9c2:	a835      	add	r0, sp, #212	; 0xd4
   1b9c4:	f002 fa2a 	bl	1de1c <_lv_txt_get_size>
        w = p.x;
   1b9c8:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
   1b9cc:	e734      	b.n	1b838 <lv_draw_label+0x50>
    uint32_t line_start     = 0;
   1b9ce:	9604      	str	r6, [sp, #16]
   1b9d0:	e765      	b.n	1b89e <lv_draw_label+0xb6>
   1b9d2:	2200      	movs	r2, #0
   1b9d4:	9204      	str	r2, [sp, #16]
   1b9d6:	e762      	b.n	1b89e <lv_draw_label+0xb6>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1b9d8:	9906      	ldr	r1, [sp, #24]
   1b9da:	9300      	str	r3, [sp, #0]
   1b9dc:	eb02 0901 	add.w	r9, r2, r1
   1b9e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1b9e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1b9e6:	4659      	mov	r1, fp
   1b9e8:	4648      	mov	r0, r9
   1b9ea:	f002 f933 	bl	1dc54 <_lv_txt_get_next_line>
   1b9ee:	9b06      	ldr	r3, [sp, #24]
        pos.y += line_height;
   1b9f0:	443d      	add	r5, r7
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1b9f2:	4418      	add	r0, r3
        pos.y += line_height;
   1b9f4:	b22d      	sxth	r5, r5
        if(hint && pos.y >= -LV_LABEL_HINT_UPDATE_TH && hint->line_start < 0) {
   1b9f6:	b16e      	cbz	r6, 1ba14 <lv_draw_label+0x22c>
   1b9f8:	f515 6f80 	cmn.w	r5, #1024	; 0x400
   1b9fc:	db0a      	blt.n	1ba14 <lv_draw_label+0x22c>
   1b9fe:	6833      	ldr	r3, [r6, #0]
   1ba00:	2b00      	cmp	r3, #0
   1ba02:	da07      	bge.n	1ba14 <lv_draw_label+0x22c>
            hint->line_start = line_start;
   1ba04:	9b06      	ldr	r3, [sp, #24]
   1ba06:	6033      	str	r3, [r6, #0]
            hint->y          = pos.y - coords->y1;
   1ba08:	9b05      	ldr	r3, [sp, #20]
   1ba0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1ba0e:	1aea      	subs	r2, r5, r3
            hint->coord_y    = coords->y1;
   1ba10:	e9c6 2301 	strd	r2, r3, [r6, #4]
        if(txt[line_start] == '\0') return;
   1ba14:	9b06      	ldr	r3, [sp, #24]
   1ba16:	9304      	str	r3, [sp, #16]
   1ba18:	f899 3000 	ldrb.w	r3, [r9]
   1ba1c:	2b00      	cmp	r3, #0
   1ba1e:	d0c2      	beq.n	1b9a6 <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1ba20:	9006      	str	r0, [sp, #24]
   1ba22:	e74f      	b.n	1b8c4 <lv_draw_label+0xdc>
    else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   1ba24:	0719      	lsls	r1, r3, #28
   1ba26:	f57f af74 	bpl.w	1b912 <lv_draw_label+0x12a>
        line_width = _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1ba2a:	9906      	ldr	r1, [sp, #24]
   1ba2c:	9e04      	ldr	r6, [sp, #16]
   1ba2e:	9300      	str	r3, [sp, #0]
   1ba30:	465a      	mov	r2, fp
   1ba32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1ba36:	1b89      	subs	r1, r1, r6
   1ba38:	f002 f8ba 	bl	1dbb0 <_lv_txt_get_width>
        pos.x += lv_area_get_width(coords) - line_width;
   1ba3c:	9b05      	ldr	r3, [sp, #20]
   1ba3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ba40:	889b      	ldrh	r3, [r3, #4]
   1ba42:	441a      	add	r2, r3
   1ba44:	4613      	mov	r3, r2
   1ba46:	9a05      	ldr	r2, [sp, #20]
   1ba48:	8812      	ldrh	r2, [r2, #0]
   1ba4a:	3301      	adds	r3, #1
   1ba4c:	1a9b      	subs	r3, r3, r2
   1ba4e:	1a1b      	subs	r3, r3, r0
   1ba50:	b21b      	sxth	r3, r3
   1ba52:	e75d      	b.n	1b910 <lv_draw_label+0x128>
        pos.x += x_ofs;
   1ba54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
                    sel_coords.y2 = pos.y + line_height - 1;
   1ba56:	9a29      	ldr	r2, [sp, #164]	; 0xa4
        pos.x += x_ofs;
   1ba58:	441d      	add	r5, r3
   1ba5a:	b22b      	sxth	r3, r5
   1ba5c:	930a      	str	r3, [sp, #40]	; 0x28
        i         = 0;
   1ba5e:	2300      	movs	r3, #0
   1ba60:	932a      	str	r3, [sp, #168]	; 0xa8
        cmd_state = CMD_STATE_WAIT;
   1ba62:	9307      	str	r3, [sp, #28]
                    sel_coords.y2 = pos.y + line_height - 1;
   1ba64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1ba66:	4413      	add	r3, r2
   1ba68:	9328      	str	r3, [sp, #160]	; 0xa0
        while(i < line_end - line_start) {
   1ba6a:	9b06      	ldr	r3, [sp, #24]
   1ba6c:	9a04      	ldr	r2, [sp, #16]
   1ba6e:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1ba70:	1a9b      	subs	r3, r3, r2
   1ba72:	428b      	cmp	r3, r1
   1ba74:	d877      	bhi.n	1bb66 <lv_draw_label+0x37e>
        if(dsc->decor & LV_TEXT_DECOR_STRIKETHROUGH) {
   1ba76:	7fa3      	ldrb	r3, [r4, #30]
   1ba78:	079e      	lsls	r6, r3, #30
   1ba7a:	d51e      	bpl.n	1baba <lv_draw_label+0x2d2>
            p1.x = pos_x_start;
   1ba7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ba7e:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   1ba82:	6863      	ldr	r3, [r4, #4]
   1ba84:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
   1ba88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
   1ba8c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
   1ba90:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   1ba94:	1053      	asrs	r3, r2, #1
   1ba96:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1ba98:	eb03 0361 	add.w	r3, r3, r1, asr #1
   1ba9c:	4413      	add	r3, r2
   1ba9e:	b21b      	sxth	r3, r3
            p2.x = pos.x;
   1baa0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            p1.y = pos.y + (dsc->font->line_height / 2)  + line_dsc.width / 2;
   1baa2:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            p2.x = pos.x;
   1baa6:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            p2.y = p1.y;
   1baaa:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   1baae:	4642      	mov	r2, r8
   1bab0:	ab2f      	add	r3, sp, #188	; 0xbc
   1bab2:	a932      	add	r1, sp, #200	; 0xc8
   1bab4:	a82d      	add	r0, sp, #180	; 0xb4
   1bab6:	f000 faf9 	bl	1c0ac <lv_draw_line>
        if(dsc->decor  & LV_TEXT_DECOR_UNDERLINE) {
   1baba:	7fa3      	ldrb	r3, [r4, #30]
   1babc:	07dd      	lsls	r5, r3, #31
   1babe:	d519      	bpl.n	1baf4 <lv_draw_label+0x30c>
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   1bac0:	6862      	ldr	r2, [r4, #4]
            p1.x = pos_x_start;
   1bac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1bac4:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   1bac8:	8913      	ldrh	r3, [r2, #8]
   1baca:	8952      	ldrh	r2, [r2, #10]
   1bacc:	1a9b      	subs	r3, r3, r2
   1bace:	f99b 200d 	ldrsb.w	r2, [fp, #13]
   1bad2:	1a9b      	subs	r3, r3, r2
   1bad4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1bad6:	441a      	add	r2, r3
   1bad8:	b213      	sxth	r3, r2
            p2.x = pos.x;
   1bada:	9a0a      	ldr	r2, [sp, #40]	; 0x28
            p1.y = pos.y + dsc->font->line_height - dsc->font->base_line - font->underline_position;
   1badc:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            p2.x = pos.x;
   1bae0:	f8ad 20c8 	strh.w	r2, [sp, #200]	; 0xc8
            p2.y = p1.y;
   1bae4:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
            lv_draw_line(&p1, &p2, mask, &line_dsc);
   1bae8:	4642      	mov	r2, r8
   1baea:	ab2f      	add	r3, sp, #188	; 0xbc
   1baec:	a932      	add	r1, sp, #200	; 0xc8
   1baee:	a82d      	add	r0, sp, #180	; 0xb4
   1baf0:	f000 fadc 	bl	1c0ac <lv_draw_line>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1baf4:	9b08      	ldr	r3, [sp, #32]
   1baf6:	9a06      	ldr	r2, [sp, #24]
   1baf8:	189f      	adds	r7, r3, r2
   1bafa:	7f63      	ldrb	r3, [r4, #29]
   1bafc:	9300      	str	r3, [sp, #0]
   1bafe:	4659      	mov	r1, fp
   1bb00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1bb02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1bb06:	4638      	mov	r0, r7
   1bb08:	f002 f8a4 	bl	1dc54 <_lv_txt_get_next_line>
   1bb0c:	9b06      	ldr	r3, [sp, #24]
   1bb0e:	181e      	adds	r6, r3, r0
        pos.x = coords->x1;
   1bb10:	9b05      	ldr	r3, [sp, #20]
   1bb12:	f9b3 5000 	ldrsh.w	r5, [r3]
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   1bb16:	7f63      	ldrb	r3, [r4, #29]
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1bb18:	4601      	mov	r1, r0
        if(dsc->flag & LV_TXT_FLAG_CENTER) {
   1bb1a:	0758      	lsls	r0, r3, #29
   1bb1c:	f140 8282 	bpl.w	1c024 <lv_draw_label+0x83c>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1bb20:	9300      	str	r3, [sp, #0]
   1bb22:	465a      	mov	r2, fp
   1bb24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1bb28:	4638      	mov	r0, r7
   1bb2a:	f002 f841 	bl	1dbb0 <_lv_txt_get_width>
   1bb2e:	9b05      	ldr	r3, [sp, #20]
   1bb30:	9a05      	ldr	r2, [sp, #20]
   1bb32:	889b      	ldrh	r3, [r3, #4]
   1bb34:	8812      	ldrh	r2, [r2, #0]
   1bb36:	3301      	adds	r3, #1
   1bb38:	1a9b      	subs	r3, r3, r2
            pos.x += (lv_area_get_width(coords) - line_width) / 2;
   1bb3a:	b21b      	sxth	r3, r3
   1bb3c:	1a18      	subs	r0, r3, r0
   1bb3e:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1bb42:	eb05 0560 	add.w	r5, r5, r0, asr #1
            pos.x += lv_area_get_width(coords) - line_width;
   1bb46:	b22d      	sxth	r5, r5
        if(pos.y > mask->y2) return;
   1bb48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1bb4a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1bb4c:	4413      	add	r3, r2
   1bb4e:	b29a      	uxth	r2, r3
   1bb50:	9217      	str	r2, [sp, #92]	; 0x5c
        line_start = line_end;
   1bb52:	9a06      	ldr	r2, [sp, #24]
   1bb54:	9204      	str	r2, [sp, #16]
        if(pos.y > mask->y2) return;
   1bb56:	f9b8 2006 	ldrsh.w	r2, [r8, #6]
   1bb5a:	b21b      	sxth	r3, r3
   1bb5c:	429a      	cmp	r2, r3
   1bb5e:	f6ff af22 	blt.w	1b9a6 <lv_draw_label+0x1be>
        line_end += _lv_txt_get_next_line(&txt[line_start], font, dsc->letter_space, w, dsc->flag);
   1bb62:	9606      	str	r6, [sp, #24]
   1bb64:	e714      	b.n	1b990 <lv_draw_label+0x1a8>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1bb66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1bb68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bb6c:	429a      	cmp	r2, r3
   1bb6e:	d023      	beq.n	1bbb8 <lv_draw_label+0x3d0>
   1bb70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bb72:	429a      	cmp	r2, r3
   1bb74:	d020      	beq.n	1bbb8 <lv_draw_label+0x3d0>
                logical_char_pos = _lv_txt_encoded_get_char_id(txt, line_start + i);
   1bb76:	9a04      	ldr	r2, [sp, #16]
   1bb78:	4b82      	ldr	r3, [pc, #520]	; (1bd84 <lv_draw_label+0x59c>)
   1bb7a:	9808      	ldr	r0, [sp, #32]
   1bb7c:	681b      	ldr	r3, [r3, #0]
   1bb7e:	4411      	add	r1, r2
   1bb80:	4798      	blx	r3
   1bb82:	4607      	mov	r7, r0
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   1bb84:	4d80      	ldr	r5, [pc, #512]	; (1bd88 <lv_draw_label+0x5a0>)
   1bb86:	9814      	ldr	r0, [sp, #80]	; 0x50
   1bb88:	682b      	ldr	r3, [r5, #0]
   1bb8a:	a92a      	add	r1, sp, #168	; 0xa8
   1bb8c:	4798      	blx	r3
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1bb8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1bb90:	682b      	ldr	r3, [r5, #0]
            uint32_t letter      = _lv_txt_encoded_next(bidi_txt, &i);
   1bb92:	4606      	mov	r6, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1bb94:	982a      	ldr	r0, [sp, #168]	; 0xa8
   1bb96:	2100      	movs	r1, #0
   1bb98:	4410      	add	r0, r2
   1bb9a:	4798      	blx	r3
   1bb9c:	7f63      	ldrb	r3, [r4, #29]
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1bb9e:	f013 0301 	ands.w	r3, r3, #1
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1bba2:	4602      	mov	r2, r0
            if((dsc->flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1bba4:	f000 8092 	beq.w	1bccc <lv_draw_label+0x4e4>
                if(letter == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   1bba8:	2e23      	cmp	r6, #35	; 0x23
   1bbaa:	d10f      	bne.n	1bbcc <lv_draw_label+0x3e4>
                    if(cmd_state == CMD_STATE_WAIT) { /*Start char*/
   1bbac:	9907      	ldr	r1, [sp, #28]
   1bbae:	b929      	cbnz	r1, 1bbbc <lv_draw_label+0x3d4>
                        par_start = i;
   1bbb0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1bbb2:	9215      	str	r2, [sp, #84]	; 0x54
                        cmd_state = CMD_STATE_WAIT;
   1bbb4:	9307      	str	r3, [sp, #28]
   1bbb6:	e758      	b.n	1ba6a <lv_draw_label+0x282>
            uint32_t logical_char_pos = 0;
   1bbb8:	2700      	movs	r7, #0
   1bbba:	e7e3      	b.n	1bb84 <lv_draw_label+0x39c>
                    else if(cmd_state == CMD_STATE_PAR) {   /*Other start char in parameter escaped cmd. char */
   1bbbc:	9b07      	ldr	r3, [sp, #28]
   1bbbe:	2b01      	cmp	r3, #1
   1bbc0:	d049      	beq.n	1bc56 <lv_draw_label+0x46e>
                    else if(cmd_state == CMD_STATE_IN) {   /*Command end */
   1bbc2:	2b02      	cmp	r3, #2
   1bbc4:	f040 8082 	bne.w	1bccc <lv_draw_label+0x4e4>
                        cmd_state = CMD_STATE_WAIT;
   1bbc8:	2300      	movs	r3, #0
   1bbca:	e7f3      	b.n	1bbb4 <lv_draw_label+0x3cc>
                if(cmd_state == CMD_STATE_PAR) {
   1bbcc:	9b07      	ldr	r3, [sp, #28]
   1bbce:	2b01      	cmp	r3, #1
   1bbd0:	d17c      	bne.n	1bccc <lv_draw_label+0x4e4>
                    if(letter == ' ') {
   1bbd2:	2e20      	cmp	r6, #32
   1bbd4:	f47f af49 	bne.w	1ba6a <lv_draw_label+0x282>
                        if(i - par_start == LABEL_RECOLOR_PAR_LENGTH + 1) {
   1bbd8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   1bbda:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1bbdc:	1a9b      	subs	r3, r3, r2
   1bbde:	2b07      	cmp	r3, #7
   1bbe0:	d137      	bne.n	1bc52 <lv_draw_label+0x46a>
                            _lv_memcpy_small(buf, &bidi_txt[par_start], LABEL_RECOLOR_PAR_LENGTH);
   1bbe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 * @param src pointer to the source buffer
 * @param len number of byte to copy
 */
static inline void * _lv_memcpy_small(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
   1bbe4:	9915      	ldr	r1, [sp, #84]	; 0x54
   1bbe6:	189a      	adds	r2, r3, r2
   1bbe8:	5858      	ldr	r0, [r3, r1]
   1bbea:	9032      	str	r0, [sp, #200]	; 0xc8
   1bbec:	8893      	ldrh	r3, [r2, #4]
   1bbee:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
   1bbf2:	f3c0 4607 	ubfx	r6, r0, #16, #8
   1bbf6:	f3c0 6507 	ubfx	r5, r0, #24, #8
   1bbfa:	f3c0 2707 	ubfx	r7, r0, #8, #8
                            r       = (hex_char_to_num(buf[0]) << 4) + hex_char_to_num(buf[1]);
   1bbfe:	b2c0      	uxtb	r0, r0
   1bc00:	f00c feb1 	bl	28966 <hex_char_to_num>
   1bc04:	4601      	mov	r1, r0
   1bc06:	4638      	mov	r0, r7
   1bc08:	f00c fead 	bl	28966 <hex_char_to_num>
   1bc0c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
                            g       = (hex_char_to_num(buf[2]) << 4) + hex_char_to_num(buf[3]);
   1bc10:	4630      	mov	r0, r6
   1bc12:	f00c fea8 	bl	28966 <hex_char_to_num>
   1bc16:	4606      	mov	r6, r0
   1bc18:	4628      	mov	r0, r5
   1bc1a:	f00c fea4 	bl	28966 <hex_char_to_num>
   1bc1e:	eb00 1506 	add.w	r5, r0, r6, lsl #4
                            b       = (hex_char_to_num(buf[4]) << 4) + hex_char_to_num(buf[5]);
   1bc22:	f89d 00cc 	ldrb.w	r0, [sp, #204]	; 0xcc
   1bc26:	f00c fe9e 	bl	28966 <hex_char_to_num>
   1bc2a:	4606      	mov	r6, r0
   1bc2c:	f89d 00cd 	ldrb.w	r0, [sp, #205]	; 0xcd
   1bc30:	f00c fe99 	bl	28966 <hex_char_to_num>
   1bc34:	eb00 1306 	add.w	r3, r0, r6, lsl #4
   1bc38:	f3c3 03c4 	ubfx	r3, r3, #3, #5
   1bc3c:	f3c5 0585 	ubfx	r5, r5, #2, #6
   1bc40:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
   1bc44:	f3c1 01c4 	ubfx	r1, r1, #3, #5
   1bc48:	ea43 23c1 	orr.w	r3, r3, r1, lsl #11
                            recolor.full = dsc->color.full;
   1bc4c:	931b      	str	r3, [sp, #108]	; 0x6c
                        cmd_state = CMD_STATE_IN; /*After the parameter the text is in the command*/
   1bc4e:	2302      	movs	r3, #2
   1bc50:	e7b0      	b.n	1bbb4 <lv_draw_label+0x3cc>
                            recolor.full = dsc->color.full;
   1bc52:	8823      	ldrh	r3, [r4, #0]
   1bc54:	e7fa      	b.n	1bc4c <lv_draw_label+0x464>
                        cmd_state = CMD_STATE_WAIT;
   1bc56:	2300      	movs	r3, #0
            lv_color_t color = dsc->color;
   1bc58:	8825      	ldrh	r5, [r4, #0]
                        cmd_state = CMD_STATE_WAIT;
   1bc5a:	9307      	str	r3, [sp, #28]
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1bc5c:	4631      	mov	r1, r6
   1bc5e:	4658      	mov	r0, fp
   1bc60:	f00e fe1b 	bl	2a89a <lv_font_get_glyph_width>
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1bc64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
            letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1bc66:	901c      	str	r0, [sp, #112]	; 0x70
            if(sel_start != 0xFFFF && sel_end != 0xFFFF) {
   1bc68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bc6c:	429a      	cmp	r2, r3
   1bc6e:	d01c      	beq.n	1bcaa <lv_draw_label+0x4c2>
   1bc70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1bc72:	429a      	cmp	r2, r3
   1bc74:	d019      	beq.n	1bcaa <lv_draw_label+0x4c2>
                if(logical_char_pos >= sel_start && logical_char_pos < sel_end) {
   1bc76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1bc78:	42bb      	cmp	r3, r7
   1bc7a:	d816      	bhi.n	1bcaa <lv_draw_label+0x4c2>
   1bc7c:	42ba      	cmp	r2, r7
   1bc7e:	d914      	bls.n	1bcaa <lv_draw_label+0x4c2>
                    sel_coords.x1 = pos.x;
   1bc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bc82:	f8ad 30c8 	strh.w	r3, [sp, #200]	; 0xc8
                    sel_coords.y1 = pos.y;
   1bc86:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1bc88:	f8ad 30ca 	strh.w	r3, [sp, #202]	; 0xca
                    sel_coords.x2 = pos.x + letter_w + dsc->letter_space - 1;
   1bc8c:	89a3      	ldrh	r3, [r4, #12]
   1bc8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1bc90:	3b01      	subs	r3, #1
   1bc92:	4413      	add	r3, r2
   1bc94:	4403      	add	r3, r0
   1bc96:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   1bc9a:	aa35      	add	r2, sp, #212	; 0xd4
                    sel_coords.y2 = pos.y + line_height - 1;
   1bc9c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   1bc9e:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
                    lv_draw_rect(&sel_coords, mask, &draw_dsc_sel);
   1bca2:	4641      	mov	r1, r8
   1bca4:	a832      	add	r0, sp, #200	; 0xc8
   1bca6:	f00d fade 	bl	29266 <lv_draw_rect>
LV_ATTRIBUTE_FAST_MEM static void lv_draw_letter(const lv_point_t * pos_p, const lv_area_t * clip_area,
                                                 const lv_font_t * font_p,
                                                 uint32_t letter,
                                                 lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    if(opa < LV_OPA_MIN) return;
   1bcaa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1bcac:	2b01      	cmp	r3, #1
   1bcae:	f200 81df 	bhi.w	1c070 <lv_draw_label+0x888>
            if(letter_w > 0) {
   1bcb2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1bcb4:	2b00      	cmp	r3, #0
   1bcb6:	f43f aed8 	beq.w	1ba6a <lv_draw_label+0x282>
                pos.x += letter_w + dsc->letter_space;
   1bcba:	89a5      	ldrh	r5, [r4, #12]
   1bcbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bcbe:	442b      	add	r3, r5
   1bcc0:	461d      	mov	r5, r3
   1bcc2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   1bcc4:	441d      	add	r5, r3
   1bcc6:	b22b      	sxth	r3, r5
   1bcc8:	930a      	str	r3, [sp, #40]	; 0x28
   1bcca:	e6ce      	b.n	1ba6a <lv_draw_label+0x282>
            lv_color_t color = dsc->color;
   1bccc:	8825      	ldrh	r5, [r4, #0]
            if(cmd_state == CMD_STATE_IN) color = recolor;
   1bcce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1bcd0:	9907      	ldr	r1, [sp, #28]
   1bcd2:	2902      	cmp	r1, #2
   1bcd4:	bf08      	it	eq
   1bcd6:	461d      	moveq	r5, r3
   1bcd8:	e7c0      	b.n	1bc5c <lv_draw_label+0x474>
        }
        return;
    }

    /* Don't draw anything if the character is empty. E.g. space */
    if((g.box_h == 0) || (g.box_w == 0)) return;
   1bcda:	f8bd 30cc 	ldrh.w	r3, [sp, #204]	; 0xcc
   1bcde:	2b00      	cmp	r3, #0
   1bce0:	d0e7      	beq.n	1bcb2 <lv_draw_label+0x4ca>
   1bce2:	f8bd 20ca 	ldrh.w	r2, [sp, #202]	; 0xca
   1bce6:	2a00      	cmp	r2, #0
   1bce8:	d0e3      	beq.n	1bcb2 <lv_draw_label+0x4ca>

    int32_t pos_x = pos_p->x + g.ofs_x;
   1bcea:	990a      	ldr	r1, [sp, #40]	; 0x28
   1bcec:	f9bd a0ce 	ldrsh.w	sl, [sp, #206]	; 0xce
   1bcf0:	448a      	add	sl, r1
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;

    /*If the letter is completely out of mask don't draw it */
    if(pos_x + g.box_w < clip_area->x1 ||
   1bcf2:	f9b8 1000 	ldrsh.w	r1, [r8]
   1bcf6:	4452      	add	r2, sl
   1bcf8:	428a      	cmp	r2, r1
   1bcfa:	dbda      	blt.n	1bcb2 <lv_draw_label+0x4ca>
       pos_x > clip_area->x2 ||
   1bcfc:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
    if(pos_x + g.box_w < clip_area->x1 ||
   1bd00:	4592      	cmp	sl, r2
   1bd02:	dcd6      	bgt.n	1bcb2 <lv_draw_label+0x4ca>
    int32_t pos_y = pos_p->y + (font_p->line_height - font_p->base_line) - g.box_h - g.ofs_y;
   1bd04:	f9bd 20d0 	ldrsh.w	r2, [sp, #208]	; 0xd0
   1bd08:	f9bb 9008 	ldrsh.w	r9, [fp, #8]
   1bd0c:	441a      	add	r2, r3
   1bd0e:	eba9 0902 	sub.w	r9, r9, r2
   1bd12:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
   1bd16:	eba9 0902 	sub.w	r9, r9, r2
   1bd1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1bd1c:	4491      	add	r9, r2
       pos_y + g.box_h < clip_area->y1 ||
   1bd1e:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
   1bd22:	444b      	add	r3, r9
       pos_x > clip_area->x2 ||
   1bd24:	4293      	cmp	r3, r2
   1bd26:	dbc4      	blt.n	1bcb2 <lv_draw_label+0x4ca>
       pos_y > clip_area->y2)  {
   1bd28:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
       pos_y + g.box_h < clip_area->y1 ||
   1bd2c:	4599      	cmp	r9, r3
   1bd2e:	dcc0      	bgt.n	1bcb2 <lv_draw_label+0x4ca>
        return;
    }


    const uint8_t * map_p = lv_font_get_glyph_bitmap(font_p, letter);
   1bd30:	4631      	mov	r1, r6
   1bd32:	4658      	mov	r0, fp
   1bd34:	f00e fdaa 	bl	2a88c <lv_font_get_glyph_bitmap>
    if(map_p == NULL) {
   1bd38:	b928      	cbnz	r0, 1bd46 <lv_draw_label+0x55e>
        LV_LOG_WARN("lv_draw_letter: character's bitmap not found");
   1bd3a:	4b14      	ldr	r3, [pc, #80]	; (1bd8c <lv_draw_label+0x5a4>)
   1bd3c:	9300      	str	r3, [sp, #0]
   1bd3e:	f240 12b9 	movw	r2, #441	; 0x1b9
   1bd42:	4b13      	ldr	r3, [pc, #76]	; (1bd90 <lv_draw_label+0x5a8>)
   1bd44:	e1a7      	b.n	1c096 <lv_draw_label+0x8ae>
        return;
    }

    if(font_p->subpx) {
   1bd46:	f89b 300c 	ldrb.w	r3, [fp, #12]
   1bd4a:	079b      	lsls	r3, r3, #30
   1bd4c:	d005      	beq.n	1bd5a <lv_draw_label+0x572>
    }

    _lv_mem_buf_release(mask_buf);
    _lv_mem_buf_release(color_buf);
#else
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
   1bd4e:	4b11      	ldr	r3, [pc, #68]	; (1bd94 <lv_draw_label+0x5ac>)
   1bd50:	9300      	str	r3, [sp, #0]
   1bd52:	f240 322d 	movw	r2, #813	; 0x32d
   1bd56:	4b10      	ldr	r3, [pc, #64]	; (1bd98 <lv_draw_label+0x5b0>)
   1bd58:	e19d      	b.n	1c096 <lv_draw_label+0x8ae>
    uint32_t bpp = g->bpp;
   1bd5a:	f89d 30d2 	ldrb.w	r3, [sp, #210]	; 0xd2
   1bd5e:	f8ad 5086 	strh.w	r5, [sp, #134]	; 0x86
    if(bpp == 3) bpp = 4;
   1bd62:	2b03      	cmp	r3, #3
        draw_letter_normal(pos_x, pos_y, &g, clip_area, map_p, color, opa, blend_mode);
   1bd64:	fa0f fa8a 	sxth.w	sl, sl
   1bd68:	fa0f f989 	sxth.w	r9, r9
    if(bpp == 3) bpp = 4;
   1bd6c:	f000 80c0 	beq.w	1bef0 <lv_draw_label+0x708>
    switch(bpp) {
   1bd70:	3b01      	subs	r3, #1
   1bd72:	2b07      	cmp	r3, #7
   1bd74:	f200 80b6 	bhi.w	1bee4 <lv_draw_label+0x6fc>
   1bd78:	e8df f003 	tbb	[pc, r3]
   1bd7c:	bab4c010 	.word	0xbab4c010
   1bd80:	adb4b4b4 	.word	0xadb4b4b4
   1bd84:	200007cc 	.word	0x200007cc
   1bd88:	200007d0 	.word	0x200007d0
   1bd8c:	000300d1 	.word	0x000300d1
   1bd90:	0003016b 	.word	0x0003016b
   1bd94:	000300fe 	.word	0x000300fe
   1bd98:	0003018d 	.word	0x0003018d
    if(bpp == 3) bpp = 4;
   1bd9c:	2280      	movs	r2, #128	; 0x80
   1bd9e:	9210      	str	r2, [sp, #64]	; 0x40
   1bda0:	4aaa      	ldr	r2, [pc, #680]	; (1c04c <lv_draw_label+0x864>)
   1bda2:	2601      	movs	r6, #1
   1bda4:	2302      	movs	r3, #2
            bpp_opa_table_p = _lv_bpp2_opa_table;
   1bda6:	920b      	str	r2, [sp, #44]	; 0x2c
    if(opa < LV_OPA_MAX) {
   1bda8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bdaa:	2afc      	cmp	r2, #252	; 0xfc
   1bdac:	d811      	bhi.n	1bdd2 <lv_draw_label+0x5ea>
        if(prev_opa != opa || prev_bpp != bpp) {
   1bdae:	4aa8      	ldr	r2, [pc, #672]	; (1c050 <lv_draw_label+0x868>)
   1bdb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1bdb2:	7812      	ldrb	r2, [r2, #0]
   1bdb4:	428a      	cmp	r2, r1
   1bdb6:	f040 80a7 	bne.w	1bf08 <lv_draw_label+0x720>
   1bdba:	4aa6      	ldr	r2, [pc, #664]	; (1c054 <lv_draw_label+0x86c>)
   1bdbc:	6812      	ldr	r2, [r2, #0]
   1bdbe:	42b2      	cmp	r2, r6
   1bdc0:	f040 80a2 	bne.w	1bf08 <lv_draw_label+0x720>
        prev_opa = opa;
   1bdc4:	4ba2      	ldr	r3, [pc, #648]	; (1c050 <lv_draw_label+0x868>)
   1bdc6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1bdc8:	701a      	strb	r2, [r3, #0]
        prev_bpp = bpp;
   1bdca:	4ba2      	ldr	r3, [pc, #648]	; (1c054 <lv_draw_label+0x86c>)
   1bdcc:	601e      	str	r6, [r3, #0]
        bpp_opa_table_p = opa_table;
   1bdce:	4ba2      	ldr	r3, [pc, #648]	; (1c058 <lv_draw_label+0x870>)
   1bdd0:	930b      	str	r3, [sp, #44]	; 0x2c
    int32_t box_w = g->box_w;
   1bdd2:	f8bd 30ca 	ldrh.w	r3, [sp, #202]	; 0xca
   1bdd6:	9311      	str	r3, [sp, #68]	; 0x44
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1bdd8:	f9b8 7000 	ldrsh.w	r7, [r8]
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1bddc:	9911      	ldr	r1, [sp, #68]	; 0x44
    int32_t box_h = g->box_h;
   1bdde:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
    int32_t width_bit = box_w * bpp; /*Letter width in bits*/
   1bde2:	fb06 f503 	mul.w	r5, r6, r3
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1bde6:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1bdea:	45ba      	cmp	sl, r7
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1bdec:	4451      	add	r1, sl
    int32_t col_start = pos_x >= clip_area->x1 ? 0 : clip_area->x1 - pos_x;
   1bdee:	bfb4      	ite	lt
   1bdf0:	eba7 070a 	sublt.w	r7, r7, sl
   1bdf4:	2700      	movge	r7, #0
    int32_t col_end   = pos_x + box_w <= clip_area->x2 ? box_w : clip_area->x2 - pos_x + 1;
   1bdf6:	4299      	cmp	r1, r3
   1bdf8:	bfca      	itet	gt
   1bdfa:	3301      	addgt	r3, #1
   1bdfc:	9b11      	ldrle	r3, [sp, #68]	; 0x44
   1bdfe:	eba3 030a 	subgt.w	r3, r3, sl
   1be02:	930f      	str	r3, [sp, #60]	; 0x3c
    int32_t row_start = pos_y >= clip_area->y1 ? 0 : clip_area->y1 - pos_y;
   1be04:	f9b8 3002 	ldrsh.w	r3, [r8, #2]
   1be08:	4599      	cmp	r9, r3
   1be0a:	bfb4      	ite	lt
   1be0c:	eba3 0309 	sublt.w	r3, r3, r9
   1be10:	2300      	movge	r3, #0
   1be12:	930e      	str	r3, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   1be14:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
   1be18:	eb02 0109 	add.w	r1, r2, r9
   1be1c:	4299      	cmp	r1, r3
   1be1e:	bfc4      	itt	gt
   1be20:	3301      	addgt	r3, #1
   1be22:	eba3 0309 	subgt.w	r3, r3, r9
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   1be26:	990e      	ldr	r1, [sp, #56]	; 0x38
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   1be28:	bfc8      	it	gt
   1be2a:	9320      	strgt	r3, [sp, #128]	; 0x80
    uint32_t bit_ofs = (row_start * width_bit) + (col_start * bpp);
   1be2c:	fb07 f306 	mul.w	r3, r7, r6
   1be30:	fb01 3505 	mla	r5, r1, r5, r3
    map_p += bit_ofs >> 3;
   1be34:	eb00 03d5 	add.w	r3, r0, r5, lsr #3
   1be38:	9312      	str	r3, [sp, #72]	; 0x48
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1be3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    int32_t row_end   = pos_y + box_h <= clip_area->y2 ? box_h : clip_area->y2 - pos_y + 1;
   1be3c:	bfd8      	it	le
   1be3e:	9220      	strle	r2, [sp, #128]	; 0x80
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1be40:	4353      	muls	r3, r2
   1be42:	2bf0      	cmp	r3, #240	; 0xf0
   1be44:	bfa8      	it	ge
   1be46:	23f0      	movge	r3, #240	; 0xf0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1be48:	4618      	mov	r0, r3
    uint32_t mask_buf_size = box_w * box_h > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : box_w * box_h;
   1be4a:	9318      	str	r3, [sp, #96]	; 0x60
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1be4c:	f001 fc02 	bl	1d654 <_lv_mem_buf_get>
    fill_area.x1 = col_start + pos_x;
   1be50:	eb0a 0307 	add.w	r3, sl, r7
   1be54:	f8ad 30b4 	strh.w	r3, [sp, #180]	; 0xb4
    fill_area.x2 = col_end  + pos_x - 1;
   1be58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1be5a:	9019      	str	r0, [sp, #100]	; 0x64
    fill_area.x2 = col_end  + pos_x - 1;
   1be5c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   1be60:	449a      	add	sl, r3
    fill_area.y1 = row_start + pos_y;
   1be62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fill_area.x2 = col_end  + pos_x - 1;
   1be64:	f8ad a0b8 	strh.w	sl, [sp, #184]	; 0xb8
    fill_area.y1 = row_start + pos_y;
   1be68:	4499      	add	r9, r3
   1be6a:	fa0f f989 	sxth.w	r9, r9
   1be6e:	f8ad 90b6 	strh.w	r9, [sp, #182]	; 0xb6
    fill_area.y2 = fill_area.y1;
   1be72:	f8ad 90ba 	strh.w	r9, [sp, #186]	; 0xba
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   1be76:	f000 fd85 	bl	1c984 <lv_draw_mask_get_cnt>
    uint32_t col_bit_max = 8 - bpp;
   1be7a:	f1c6 0308 	rsb	r3, r6, #8
   1be7e:	931f      	str	r3, [sp, #124]	; 0x7c
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   1be80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1be82:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   1be84:	9025      	str	r0, [sp, #148]	; 0x94
    uint32_t col_bit_row_ofs = (box_w + col_start - col_end) * bpp;
   1be86:	443b      	add	r3, r7
   1be88:	1a9b      	subs	r3, r3, r2
   1be8a:	4373      	muls	r3, r6
   1be8c:	9326      	str	r3, [sp, #152]	; 0x98
   1be8e:	1bd3      	subs	r3, r2, r7
    col_bit = bit_ofs & 0x7; /* "& 0x7" equals to "% 8" just faster */
   1be90:	f005 0507 	and.w	r5, r5, #7
    int32_t mask_p = 0;
   1be94:	f04f 0a00 	mov.w	sl, #0
   1be98:	9322      	str	r3, [sp, #136]	; 0x88
    for(row = row_start ; row < row_end; row++) {
   1be9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1be9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1be9e:	4293      	cmp	r3, r2
   1bea0:	db43      	blt.n	1bf2a <lv_draw_label+0x742>
    if(fill_area.y1 != fill_area.y2) {
   1bea2:	f9bd 30ba 	ldrsh.w	r3, [sp, #186]	; 0xba
   1bea6:	f9bd 20b6 	ldrsh.w	r2, [sp, #182]	; 0xb6
   1beaa:	429a      	cmp	r2, r3
   1beac:	d00f      	beq.n	1bece <lv_draw_label+0x6e6>
        fill_area.y2--;
   1beae:	3b01      	subs	r3, #1
   1beb0:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        _lv_blend_fill(clip_area, &fill_area,
   1beb4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1beb6:	9302      	str	r3, [sp, #8]
   1beb8:	27ff      	movs	r7, #255	; 0xff
   1beba:	2302      	movs	r3, #2
   1bebc:	e9cd 3700 	strd	r3, r7, [sp]
   1bec0:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1bec4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1bec6:	a92d      	add	r1, sp, #180	; 0xb4
   1bec8:	4640      	mov	r0, r8
   1beca:	f00b fe77 	bl	27bbc <_lv_blend_fill>
    _lv_mem_buf_release(mask_buf);
   1bece:	9819      	ldr	r0, [sp, #100]	; 0x64
   1bed0:	f001 fc22 	bl	1d718 <_lv_mem_buf_release>
   1bed4:	e6ed      	b.n	1bcb2 <lv_draw_label+0x4ca>
            bitmask_init  = 0xFF;
   1bed6:	22ff      	movs	r2, #255	; 0xff
   1bed8:	9210      	str	r2, [sp, #64]	; 0x40
            break;       /*No opa table, pixel value will be used directly*/
   1beda:	2608      	movs	r6, #8
            bpp_opa_table_p = _lv_bpp8_opa_table;
   1bedc:	4a5f      	ldr	r2, [pc, #380]	; (1c05c <lv_draw_label+0x874>)
            shades = 256;
   1bede:	f44f 7380 	mov.w	r3, #256	; 0x100
   1bee2:	e760      	b.n	1bda6 <lv_draw_label+0x5be>
            LV_LOG_WARN("lv_draw_letter: invalid bpp");
   1bee4:	4b5e      	ldr	r3, [pc, #376]	; (1c060 <lv_draw_label+0x878>)
   1bee6:	9300      	str	r3, [sp, #0]
   1bee8:	f240 12e7 	movw	r2, #487	; 0x1e7
   1beec:	4b5d      	ldr	r3, [pc, #372]	; (1c064 <lv_draw_label+0x87c>)
   1beee:	e0d2      	b.n	1c096 <lv_draw_label+0x8ae>
            bitmask_init  = 0xF0;
   1bef0:	22f0      	movs	r2, #240	; 0xf0
   1bef2:	9210      	str	r2, [sp, #64]	; 0x40
    if(bpp == 3) bpp = 4;
   1bef4:	2604      	movs	r6, #4
            bpp_opa_table_p = _lv_bpp4_opa_table;
   1bef6:	4a5c      	ldr	r2, [pc, #368]	; (1c068 <lv_draw_label+0x880>)
            shades = 16;
   1bef8:	2310      	movs	r3, #16
   1befa:	e754      	b.n	1bda6 <lv_draw_label+0x5be>
            bitmask_init  = 0xC0;
   1befc:	22c0      	movs	r2, #192	; 0xc0
   1befe:	9210      	str	r2, [sp, #64]	; 0x40
    if(bpp == 3) bpp = 4;
   1bf00:	2602      	movs	r6, #2
            bpp_opa_table_p = _lv_bpp2_opa_table;
   1bf02:	4a5a      	ldr	r2, [pc, #360]	; (1c06c <lv_draw_label+0x884>)
            shades = 4;
   1bf04:	2304      	movs	r3, #4
   1bf06:	e74e      	b.n	1bda6 <lv_draw_label+0x5be>
   1bf08:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1bf0a:	4d53      	ldr	r5, [pc, #332]	; (1c058 <lv_draw_label+0x870>)
   1bf0c:	440b      	add	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   1bf0e:	f811 2b01 	ldrb.w	r2, [r1], #1
   1bf12:	2aff      	cmp	r2, #255	; 0xff
   1bf14:	bf17      	itett	ne
   1bf16:	9f13      	ldrne	r7, [sp, #76]	; 0x4c
   1bf18:	9a13      	ldreq	r2, [sp, #76]	; 0x4c
   1bf1a:	fb12 f207 	smulbbne	r2, r2, r7
   1bf1e:	0a12      	lsrne	r2, r2, #8
            for(i = 0; i < shades; i++) {
   1bf20:	428b      	cmp	r3, r1
                opa_table[i] = bpp_opa_table_p[i] == LV_OPA_COVER ? opa : ((bpp_opa_table_p[i] * opa) >> 8);
   1bf22:	f805 2b01 	strb.w	r2, [r5], #1
            for(i = 0; i < shades; i++) {
   1bf26:	d1f2      	bne.n	1bf0e <lv_draw_label+0x726>
   1bf28:	e74c      	b.n	1bdc4 <lv_draw_label+0x5dc>
        bitmask = bitmask_init >> col_bit;
   1bf2a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1bf2c:	f8cd a09c 	str.w	sl, [sp, #156]	; 0x9c
   1bf30:	fa23 f205 	lsr.w	r2, r3, r5
        for(col = col_start; col < col_end; col++) {
   1bf34:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1bf36:	eb03 090a 	add.w	r9, r3, sl
   1bf3a:	4649      	mov	r1, r9
   1bf3c:	46be      	mov	lr, r7
   1bf3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1bf40:	4573      	cmp	r3, lr
   1bf42:	dc39      	bgt.n	1bfb8 <lv_draw_label+0x7d0>
   1bf44:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1bf46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1bf48:	4297      	cmp	r7, r2
   1bf4a:	bfc8      	it	gt
   1bf4c:	2300      	movgt	r3, #0
   1bf4e:	9311      	str	r3, [sp, #68]	; 0x44
   1bf50:	449a      	add	sl, r3
        if(other_mask_cnt) {
   1bf52:	9b25      	ldr	r3, [sp, #148]	; 0x94
   1bf54:	b1b3      	cbz	r3, 1bf84 <lv_draw_label+0x79c>
   1bf56:	f8bd 30b8 	ldrh.w	r3, [sp, #184]	; 0xb8
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf + mask_p_start, fill_area.x1, fill_area.y2,
   1bf5a:	f9bd 10b4 	ldrsh.w	r1, [sp, #180]	; 0xb4
   1bf5e:	f9bd 20ba 	ldrsh.w	r2, [sp, #186]	; 0xba
   1bf62:	3301      	adds	r3, #1
   1bf64:	1a5b      	subs	r3, r3, r1
   1bf66:	b21b      	sxth	r3, r3
   1bf68:	4648      	mov	r0, r9
   1bf6a:	f000 fcc1 	bl	1c8f0 <lv_draw_mask_apply>
            if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   1bf6e:	b948      	cbnz	r0, 1bf84 <lv_draw_label+0x79c>
   1bf70:	f8bd 10b8 	ldrh.w	r1, [sp, #184]	; 0xb8
   1bf74:	f8bd 30b4 	ldrh.w	r3, [sp, #180]	; 0xb4
   1bf78:	3101      	adds	r1, #1
   1bf7a:	1ac9      	subs	r1, r1, r3
                _lv_memset_00(mask_buf + mask_p_start, lv_area_get_width(&fill_area));
   1bf7c:	b209      	sxth	r1, r1
   1bf7e:	4648      	mov	r0, r9
   1bf80:	f00c fd03 	bl	2898a <_lv_memset_00>
        if((uint32_t) mask_p + (col_end - col_start) < mask_buf_size) {
   1bf84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1bf86:	9a22      	ldr	r2, [sp, #136]	; 0x88
   1bf88:	4413      	add	r3, r2
   1bf8a:	4699      	mov	r9, r3
   1bf8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   1bf8e:	4499      	add	r9, r3
   1bf90:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1bf92:	454b      	cmp	r3, r9
   1bf94:	d92d      	bls.n	1bff2 <lv_draw_label+0x80a>
            fill_area.y2 ++;
   1bf96:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
   1bf9a:	3301      	adds	r3, #1
   1bf9c:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
        col_bit += col_bit_row_ofs;
   1bfa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1bfa2:	441d      	add	r5, r3
        map_p += (col_bit >> 3);
   1bfa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bfa6:	eb03 03d5 	add.w	r3, r3, r5, lsr #3
   1bfaa:	9312      	str	r3, [sp, #72]	; 0x48
    for(row = row_start ; row < row_end; row++) {
   1bfac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bfae:	3301      	adds	r3, #1
        col_bit = col_bit & 0x7;
   1bfb0:	f005 0507 	and.w	r5, r5, #7
    for(row = row_start ; row < row_end; row++) {
   1bfb4:	930e      	str	r3, [sp, #56]	; 0x38
   1bfb6:	e770      	b.n	1be9a <lv_draw_label+0x6b2>
            letter_px = (*map_p & bitmask) >> (col_bit_max - col_bit);
   1bfb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1bfba:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1bfbc:	781b      	ldrb	r3, [r3, #0]
   1bfbe:	eba0 0c05 	sub.w	ip, r0, r5
   1bfc2:	4013      	ands	r3, r2
   1bfc4:	fa23 f30c 	lsr.w	r3, r3, ip
            if(letter_px) {
   1bfc8:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
                mask_buf[mask_p] = bpp_opa_table_p[letter_px];
   1bfcc:	bf1c      	itt	ne
   1bfce:	980b      	ldrne	r0, [sp, #44]	; 0x2c
   1bfd0:	5cc3      	ldrbne	r3, [r0, r3]
                mask_buf[mask_p] = 0;
   1bfd2:	700b      	strb	r3, [r1, #0]
            if(col_bit < col_bit_max) {
   1bfd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1bfd6:	42ab      	cmp	r3, r5
                map_p++;
   1bfd8:	bf9d      	ittte	ls
   1bfda:	9b12      	ldrls	r3, [sp, #72]	; 0x48
                bitmask = bitmask_init;
   1bfdc:	9a10      	ldrls	r2, [sp, #64]	; 0x40
                map_p++;
   1bfde:	3301      	addls	r3, #1
                col_bit += bpp;
   1bfe0:	19ad      	addhi	r5, r5, r6
                bitmask = bitmask >> bpp;
   1bfe2:	bf8e      	itee	hi
   1bfe4:	40f2      	lsrhi	r2, r6
                map_p++;
   1bfe6:	9312      	strls	r3, [sp, #72]	; 0x48
                col_bit = 0;
   1bfe8:	2500      	movls	r5, #0
        for(col = col_start; col < col_end; col++) {
   1bfea:	f10e 0e01 	add.w	lr, lr, #1
   1bfee:	3101      	adds	r1, #1
   1bff0:	e7a5      	b.n	1bf3e <lv_draw_label+0x756>
            _lv_blend_fill(clip_area, &fill_area,
   1bff2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   1bff4:	9302      	str	r3, [sp, #8]
   1bff6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1bffa:	2302      	movs	r3, #2
   1bffc:	e9cd 3c00 	strd	r3, ip, [sp]
   1c000:	f8bd 2086 	ldrh.w	r2, [sp, #134]	; 0x86
   1c004:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1c006:	a92d      	add	r1, sp, #180	; 0xb4
   1c008:	4640      	mov	r0, r8
   1c00a:	f00b fdd7 	bl	27bbc <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   1c00e:	f8bd 30ba 	ldrh.w	r3, [sp, #186]	; 0xba
   1c012:	3301      	adds	r3, #1
   1c014:	b21b      	sxth	r3, r3
   1c016:	f8ad 30b6 	strh.w	r3, [sp, #182]	; 0xb6
            fill_area.y2 = fill_area.y1;
   1c01a:	f8ad 30ba 	strh.w	r3, [sp, #186]	; 0xba
            mask_p = 0;
   1c01e:	f04f 0a00 	mov.w	sl, #0
   1c022:	e7bd      	b.n	1bfa0 <lv_draw_label+0x7b8>
        else if(dsc->flag & LV_TXT_FLAG_RIGHT) {
   1c024:	071a      	lsls	r2, r3, #28
   1c026:	f57f ad8f 	bpl.w	1bb48 <lv_draw_label+0x360>
                _lv_txt_get_width(&txt[line_start], line_end - line_start, font, dsc->letter_space, dsc->flag);
   1c02a:	9300      	str	r3, [sp, #0]
   1c02c:	465a      	mov	r2, fp
   1c02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1c032:	4638      	mov	r0, r7
   1c034:	f001 fdbc 	bl	1dbb0 <_lv_txt_get_width>
            pos.x += lv_area_get_width(coords) - line_width;
   1c038:	9b05      	ldr	r3, [sp, #20]
   1c03a:	889b      	ldrh	r3, [r3, #4]
   1c03c:	441d      	add	r5, r3
   1c03e:	9b05      	ldr	r3, [sp, #20]
   1c040:	881b      	ldrh	r3, [r3, #0]
   1c042:	3501      	adds	r5, #1
   1c044:	1aed      	subs	r5, r5, r3
   1c046:	1a2d      	subs	r5, r5, r0
   1c048:	e57d      	b.n	1bb46 <lv_draw_label+0x35e>
   1c04a:	bf00      	nop
   1c04c:	0003019f 	.word	0x0003019f
   1c050:	2000870c 	.word	0x2000870c
   1c054:	20003ea0 	.word	0x20003ea0
   1c058:	2000860c 	.word	0x2000860c
   1c05c:	000301b5 	.word	0x000301b5
   1c060:	0003014f 	.word	0x0003014f
   1c064:	0003017a 	.word	0x0003017a
   1c068:	000301a5 	.word	0x000301a5
   1c06c:	000301a1 	.word	0x000301a1
            lv_draw_letter(&pos, mask, font, letter, color, opa, dsc->blend_mode);
   1c070:	7fe3      	ldrb	r3, [r4, #31]
   1c072:	931e      	str	r3, [sp, #120]	; 0x78
    bool g_ret = lv_font_get_glyph_dsc(font_p, &g, letter, '\0');
   1c074:	4632      	mov	r2, r6
   1c076:	2300      	movs	r3, #0
   1c078:	a932      	add	r1, sp, #200	; 0xc8
   1c07a:	4658      	mov	r0, fp
   1c07c:	f00e fc08 	bl	2a890 <lv_font_get_glyph_dsc>
    if(g_ret == false)  {
   1c080:	2800      	cmp	r0, #0
   1c082:	f47f ae2a 	bne.w	1bcda <lv_draw_label+0x4f2>
        if(letter >= 0x20) {
   1c086:	2e1f      	cmp	r6, #31
   1c088:	f67f ae13 	bls.w	1bcb2 <lv_draw_label+0x4ca>
            LV_LOG_WARN("lv_draw_letter: glyph dsc. not found");
   1c08c:	4b04      	ldr	r3, [pc, #16]	; (1c0a0 <lv_draw_label+0x8b8>)
   1c08e:	9300      	str	r3, [sp, #0]
   1c090:	4b04      	ldr	r3, [pc, #16]	; (1c0a4 <lv_draw_label+0x8bc>)
   1c092:	f240 12a3 	movw	r2, #419	; 0x1a3
    LV_LOG_WARN("Can't draw sub-pixel rendered letter because LV_USE_FONT_SUBPX == 0 in lv_conf.h");
   1c096:	4904      	ldr	r1, [pc, #16]	; (1c0a8 <lv_draw_label+0x8c0>)
   1c098:	2002      	movs	r0, #2
   1c09a:	f001 fa31 	bl	1d500 <_lv_log_add>
#endif
}
   1c09e:	e608      	b.n	1bcb2 <lv_draw_label+0x4ca>
   1c0a0:	000300ac 	.word	0x000300ac
   1c0a4:	0003016b 	.word	0x0003016b
   1c0a8:	0003006f 	.word	0x0003006f

0001c0ac <lv_draw_line>:
 * @param clip the line will be drawn only in this area
 * @param dsc pointer to an initialized `lv_draw_line_dsc_t` variable
 */
LV_ATTRIBUTE_FAST_MEM void lv_draw_line(const lv_point_t * point1, const lv_point_t * point2, const lv_area_t * clip,
                                        const lv_draw_line_dsc_t * dsc)
{
   1c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0b0:	b0c9      	sub	sp, #292	; 0x124
   1c0b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   1c0b6:	9206      	str	r2, [sp, #24]
    if(dsc->width == 0) return;
   1c0b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
{
   1c0bc:	469b      	mov	fp, r3
    if(dsc->width == 0) return;
   1c0be:	2a00      	cmp	r2, #0
   1c0c0:	f000 80e8 	beq.w	1c294 <lv_draw_line+0x1e8>
    if(dsc->opa <= LV_OPA_MIN) return;
   1c0c4:	7a1b      	ldrb	r3, [r3, #8]
   1c0c6:	2b02      	cmp	r3, #2
   1c0c8:	f240 80e4 	bls.w	1c294 <lv_draw_line+0x1e8>

    if(point1->x == point2->x && point1->y == point2->y) return;
   1c0cc:	9b05      	ldr	r3, [sp, #20]
   1c0ce:	f9b0 1000 	ldrsh.w	r1, [r0]
   1c0d2:	f9b3 5000 	ldrsh.w	r5, [r3]
   1c0d6:	9b05      	ldr	r3, [sp, #20]
   1c0d8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   1c0dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1c0e0:	42a9      	cmp	r1, r5
   1c0e2:	d102      	bne.n	1c0ea <lv_draw_line+0x3e>
   1c0e4:	42a3      	cmp	r3, r4
   1c0e6:	f000 80d5 	beq.w	1c294 <lv_draw_line+0x1e8>

    lv_area_t clip_line;
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c0ea:	42a9      	cmp	r1, r5
   1c0ec:	460e      	mov	r6, r1
   1c0ee:	bfa8      	it	ge
   1c0f0:	462e      	movge	r6, r5
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1c0f2:	42a9      	cmp	r1, r5
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c0f4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1c0f8:	bfb8      	it	lt
   1c0fa:	4629      	movlt	r1, r5
   1c0fc:	eb01 0162 	add.w	r1, r1, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c100:	42a3      	cmp	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c102:	ea4f 0062 	mov.w	r0, r2, asr #1
   1c106:	f1c0 0000 	rsb	r0, r0, #0
    clip_line.x2 = LV_MATH_MAX(point1->x, point2->x) + dsc->width / 2;
   1c10a:	f8ad 1034 	strh.w	r1, [sp, #52]	; 0x34
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c10e:	4619      	mov	r1, r3
   1c110:	bfa8      	it	ge
   1c112:	4621      	movge	r1, r4
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c114:	42a3      	cmp	r3, r4
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c116:	fa06 f680 	sxtah	r6, r6, r0
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c11a:	bfb8      	it	lt
   1c11c:	4623      	movlt	r3, r4
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c11e:	fa01 f080 	sxtah	r0, r1, r0

    bool is_common;
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c122:	a90c      	add	r1, sp, #48	; 0x30
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c124:	eb03 0362 	add.w	r3, r3, r2, asr #1
    clip_line.y1 = LV_MATH_MIN(point1->y, point2->y) - dsc->width / 2;
   1c128:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c12c:	9a06      	ldr	r2, [sp, #24]
    clip_line.x1 = LV_MATH_MIN(point1->x, point2->x) - dsc->width / 2;
   1c12e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c132:	4608      	mov	r0, r1
    clip_line.y2 = LV_MATH_MAX(point1->y, point2->y) + dsc->width / 2;
   1c134:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    is_common = _lv_area_intersect(&clip_line, &clip_line, clip);
   1c138:	f00d ff7b 	bl	2a032 <_lv_area_intersect>
    if(!is_common) return;
   1c13c:	2800      	cmp	r0, #0
   1c13e:	f000 80a9 	beq.w	1c294 <lv_draw_line+0x1e8>

    if(point1->y == point2->y) draw_line_hor(point1, point2, &clip_line, dsc);
   1c142:	9b04      	ldr	r3, [sp, #16]
   1c144:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1c148:	9b05      	ldr	r3, [sp, #20]
   1c14a:	f9b3 8002 	ldrsh.w	r8, [r3, #2]
   1c14e:	45c1      	cmp	r9, r8
   1c150:	f040 813c 	bne.w	1c3cc <lv_draw_line+0x320>

LV_ATTRIBUTE_FAST_MEM static void draw_line_hor(const lv_point_t * point1, const lv_point_t * point2,
                                                const lv_area_t * clip,
                                                const lv_draw_line_dsc_t * dsc)
{
    lv_opa_t opa = dsc->opa;
   1c154:	f89b 5008 	ldrb.w	r5, [fp, #8]

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1c158:	f7fe ff06 	bl	1af68 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c15c:	f00d fefe 	bl	29f5c <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    int32_t w = dsc->width - 1;
   1c160:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c164:	f9bb 4006 	ldrsh.w	r4, [fp, #6]
    int32_t w = dsc->width - 1;
   1c168:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c16a:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c16e:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   1c170:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c174:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c178:	b124      	cbz	r4, 1c184 <lv_draw_line+0xd8>
   1c17a:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
   1c17e:	3c00      	subs	r4, #0
   1c180:	bf18      	it	ne
   1c182:	2401      	movne	r4, #1

    bool simple_mode = true;
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c184:	f000 fbfe 	bl	1c984 <lv_draw_mask_get_cnt>
   1c188:	2800      	cmp	r0, #0
   1c18a:	f040 8086 	bne.w	1c29a <lv_draw_line+0x1ee>
    else if(dashed) simple_mode = false;
   1c18e:	f084 0201 	eor.w	r2, r4, #1

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   1c192:	9b05      	ldr	r3, [sp, #20]
   1c194:	9904      	ldr	r1, [sp, #16]
   1c196:	f9b3 3000 	ldrsh.w	r3, [r3]
   1c19a:	f9b1 1000 	ldrsh.w	r1, [r1]
   1c19e:	428b      	cmp	r3, r1
   1c1a0:	4618      	mov	r0, r3
   1c1a2:	bfa8      	it	ge
   1c1a4:	4608      	movge	r0, r1
    draw_area.x2 = LV_MATH_MAX(point1->x, point2->x)  - 1;
   1c1a6:	428b      	cmp	r3, r1
   1c1a8:	bfb8      	it	lt
   1c1aa:	460b      	movlt	r3, r1
   1c1ac:	3b01      	subs	r3, #1
   1c1ae:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = point1->y - w_half1;
   1c1b2:	9b04      	ldr	r3, [sp, #16]
    draw_area.x1 = LV_MATH_MIN(point1->x, point2->x);
   1c1b4:	f8ad 00a0 	strh.w	r0, [sp, #160]	; 0xa0
    draw_area.y1 = point1->y - w_half1;
   1c1b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1c1bc:	1b9e      	subs	r6, r3, r6
    draw_area.y2 = point1->y + w_half0;
   1c1be:	4498      	add	r8, r3
    draw_area.y1 = point1->y - w_half1;
   1c1c0:	f8ad 60a2 	strh.w	r6, [sp, #162]	; 0xa2
    draw_area.y2 = point1->y + w_half0;
   1c1c4:	f8ad 80a6 	strh.w	r8, [sp, #166]	; 0xa6

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
   1c1c8:	2a00      	cmp	r2, #0
   1c1ca:	d068      	beq.n	1c29e <lv_draw_line+0x1f2>
        _lv_blend_fill(clip, &draw_area,
                       dsc->color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa,
                       dsc->blend_mode);
   1c1cc:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
   1c1d0:	f003 0303 	and.w	r3, r3, #3
   1c1d4:	e9cd 5301 	strd	r5, r3, [sp, #4]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;

    /*If there is no mask then simply draw a rectangle*/
    if(simple_mode) {
        _lv_blend_fill(clip, &draw_area,
   1c1d8:	2301      	movs	r3, #1
   1c1da:	9300      	str	r3, [sp, #0]
   1c1dc:	f8bb 2000 	ldrh.w	r2, [fp]
   1c1e0:	2300      	movs	r3, #0
   1c1e2:	a928      	add	r1, sp, #160	; 0xa0
   1c1e4:	a80c      	add	r0, sp, #48	; 0x30
   1c1e6:	f00b fce9 	bl	27bbc <_lv_blend_fill>
    if(dsc->round_end || dsc->round_start) {
   1c1ea:	f89b 3009 	ldrb.w	r3, [fp, #9]
   1c1ee:	f013 0f0c 	tst.w	r3, #12
   1c1f2:	d04f      	beq.n	1c294 <lv_draw_line+0x1e8>
        lv_draw_rect_dsc_init(&cir_dsc);
   1c1f4:	a833      	add	r0, sp, #204	; 0xcc
   1c1f6:	f000 fc81 	bl	1cafc <lv_draw_rect_dsc_init>
        cir_dsc.bg_color = dsc->color;
   1c1fa:	f8bb 3000 	ldrh.w	r3, [fp]
   1c1fe:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
        cir_dsc.radius = LV_RADIUS_CIRCLE;
   1c202:	f647 73ff 	movw	r3, #32767	; 0x7fff
   1c206:	f8ad 30cc 	strh.w	r3, [sp, #204]	; 0xcc
        cir_dsc.bg_opa = dsc->opa;
   1c20a:	f89b 3008 	ldrb.w	r3, [fp, #8]
        int32_t r = (dsc->width >> 1);
   1c20e:	f9bb 5002 	ldrsh.w	r5, [fp, #2]
        cir_dsc.bg_opa = dsc->opa;
   1c212:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
        if(dsc->round_start) {
   1c216:	f89b 3009 	ldrb.w	r3, [fp, #9]
        int32_t r = (dsc->width >> 1);
   1c21a:	106c      	asrs	r4, r5, #1
        if(dsc->round_start) {
   1c21c:	075a      	lsls	r2, r3, #29
   1c21e:	ea6f 0505 	mvn.w	r5, r5
   1c222:	f005 0501 	and.w	r5, r5, #1
   1c226:	d518      	bpl.n	1c25a <lv_draw_line+0x1ae>
            cir_area.x1 = point1->x - r;
   1c228:	9b04      	ldr	r3, [sp, #16]
   1c22a:	f9b3 2000 	ldrsh.w	r2, [r3]
   1c22e:	1b13      	subs	r3, r2, r4
   1c230:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
            cir_area.y1 = point1->y - r;
   1c234:	9b04      	ldr	r3, [sp, #16]
   1c236:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
            cir_area.x2 = point1->x + r - r_corr;
   1c23a:	4422      	add	r2, r4
            cir_area.y1 = point1->y - r;
   1c23c:	1b19      	subs	r1, r3, r4
            cir_area.x2 = point1->x + r - r_corr;
   1c23e:	1b52      	subs	r2, r2, r5
            cir_area.y2 = point1->y + r - r_corr ;
   1c240:	4423      	add	r3, r4
            cir_area.y1 = point1->y - r;
   1c242:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point1->x + r - r_corr;
   1c246:	f8ad 20a4 	strh.w	r2, [sp, #164]	; 0xa4
            cir_area.y2 = point1->y + r - r_corr ;
   1c24a:	1b5b      	subs	r3, r3, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c24c:	9906      	ldr	r1, [sp, #24]
            cir_area.y2 = point1->y + r - r_corr ;
   1c24e:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c252:	aa33      	add	r2, sp, #204	; 0xcc
   1c254:	a828      	add	r0, sp, #160	; 0xa0
   1c256:	f00d f806 	bl	29266 <lv_draw_rect>
        if(dsc->round_end) {
   1c25a:	f89b 3009 	ldrb.w	r3, [fp, #9]
   1c25e:	071b      	lsls	r3, r3, #28
   1c260:	d518      	bpl.n	1c294 <lv_draw_line+0x1e8>
            cir_area.x1 = point2->x - r;
   1c262:	9b05      	ldr	r3, [sp, #20]
   1c264:	f9b3 3000 	ldrsh.w	r3, [r3]
   1c268:	1b1a      	subs	r2, r3, r4
   1c26a:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
            cir_area.y1 = point2->y - r;
   1c26e:	9a05      	ldr	r2, [sp, #20]
   1c270:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
            cir_area.x2 = point2->x + r - r_corr;
   1c274:	4423      	add	r3, r4
            cir_area.y1 = point2->y - r;
   1c276:	1b11      	subs	r1, r2, r4
            cir_area.y2 = point2->y + r - r_corr ;
   1c278:	4414      	add	r4, r2
            cir_area.y1 = point2->y - r;
   1c27a:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
            cir_area.x2 = point2->x + r - r_corr;
   1c27e:	1b5b      	subs	r3, r3, r5
            cir_area.y2 = point2->y + r - r_corr ;
   1c280:	1b64      	subs	r4, r4, r5
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c282:	9906      	ldr	r1, [sp, #24]
            cir_area.x2 = point2->x + r - r_corr;
   1c284:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c288:	aa33      	add	r2, sp, #204	; 0xcc
   1c28a:	a828      	add	r0, sp, #160	; 0xa0
            cir_area.y2 = point2->y + r - r_corr ;
   1c28c:	f8ad 40a6 	strh.w	r4, [sp, #166]	; 0xa6
            lv_draw_rect(&cir_area, clip, &cir_dsc);
   1c290:	f00c ffe9 	bl	29266 <lv_draw_rect>
}
   1c294:	b049      	add	sp, #292	; 0x124
   1c296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c29a:	2200      	movs	r2, #0
   1c29c:	e779      	b.n	1c192 <lv_draw_line+0xe6>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   1c29e:	aa28      	add	r2, sp, #160	; 0xa0
   1c2a0:	a90c      	add	r1, sp, #48	; 0x30
   1c2a2:	4610      	mov	r0, r2
   1c2a4:	f00d fec5 	bl	2a032 <_lv_area_intersect>
        if(!is_common) return;
   1c2a8:	2800      	cmp	r0, #0
   1c2aa:	d09e      	beq.n	1c1ea <lv_draw_line+0x13e>
        draw_area.y1 -= disp_area->y1;
   1c2ac:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
   1c2b0:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        draw_area.x1 -= disp_area->x1;
   1c2b4:	f9b7 8010 	ldrsh.w	r8, [r7, #16]
   1c2b8:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   1c2bc:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.y1 -= disp_area->y1;
   1c2c0:	1b91      	subs	r1, r2, r6
   1c2c2:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= disp_area->x1;
   1c2c6:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   1c2ca:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        draw_area.x2 -= disp_area->x1;
   1c2ce:	eba1 0508 	sub.w	r5, r1, r8
   1c2d2:	f8ad 50a4 	strh.w	r5, [sp, #164]	; 0xa4
        draw_area.y2 -= disp_area->y1;
   1c2d6:	f8bd 50a6 	ldrh.w	r5, [sp, #166]	; 0xa6
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c2da:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.y2 -= disp_area->y1;
   1c2de:	1bad      	subs	r5, r5, r6
        draw_area.x1 -= disp_area->x1;
   1c2e0:	eba0 0308 	sub.w	r3, r0, r8
        draw_area.y2 -= disp_area->y1;
   1c2e4:	f8ad 50a6 	strh.w	r5, [sp, #166]	; 0xa6
   1c2e8:	1c4d      	adds	r5, r1, #1
        draw_area.x1 -= disp_area->x1;
   1c2ea:	b21b      	sxth	r3, r3
   1c2ec:	1a2d      	subs	r5, r5, r0
   1c2ee:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
   1c2f2:	b22d      	sxth	r5, r5
        fill_area.y2 = fill_area.y1;
   1c2f4:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
        if(dashed) {
   1c2f8:	b1dc      	cbz	r4, 1c332 <lv_draw_line+0x286>
            dash_start = (vdb->area.x1 + draw_area.x1) % (dsc->dash_gap + dsc->dash_width);
   1c2fa:	4498      	add	r8, r3
   1c2fc:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   1c300:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   1c304:	4413      	add	r3, r2
   1c306:	fb98 f2f3 	sdiv	r2, r8, r3
   1c30a:	fb03 8812 	mls	r8, r3, r2, r8
   1c30e:	fa0f f888 	sxth.w	r8, r8
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c312:	4628      	mov	r0, r5
   1c314:	f001 f99e 	bl	1d654 <_lv_mem_buf_get>
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c318:	f9bd 90a2 	ldrsh.w	r9, [sp, #162]	; 0xa2
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c31c:	4606      	mov	r6, r0
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1c31e:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c322:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
   1c326:	4599      	cmp	r9, r3
   1c328:	dd05      	ble.n	1c336 <lv_draw_line+0x28a>
        _lv_mem_buf_release(mask_buf);
   1c32a:	4630      	mov	r0, r6
                           LV_BLEND_MODE_NORMAL);

            fill_area.y1++;
            fill_area.y2++;
        }
        _lv_mem_buf_release(mask_buf);
   1c32c:	f001 f9f4 	bl	1d718 <_lv_mem_buf_release>
   1c330:	e75b      	b.n	1c1ea <lv_draw_line+0x13e>
        lv_style_int_t dash_start = 0;
   1c332:	46a0      	mov	r8, r4
   1c334:	e7ed      	b.n	1c312 <lv_draw_line+0x266>
            _lv_memset_ff(mask_buf, draw_area_w);
   1c336:	4629      	mov	r1, r5
   1c338:	4630      	mov	r0, r6
   1c33a:	f00c fb2e 	bl	2899a <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   1c33e:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   1c342:	8a7a      	ldrh	r2, [r7, #18]
   1c344:	8a39      	ldrh	r1, [r7, #16]
   1c346:	444a      	add	r2, r9
   1c348:	4419      	add	r1, r3
   1c34a:	b212      	sxth	r2, r2
   1c34c:	462b      	mov	r3, r5
   1c34e:	b209      	sxth	r1, r1
   1c350:	4630      	mov	r0, r6
   1c352:	f000 facd 	bl	1c8f0 <lv_draw_mask_apply>
   1c356:	4602      	mov	r2, r0
            if(dashed) {
   1c358:	b18c      	cbz	r4, 1c37e <lv_draw_line+0x2d2>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   1c35a:	b180      	cbz	r0, 1c37e <lv_draw_line+0x2d2>
                    lv_style_int_t dash_cnt = dash_start;
   1c35c:	4641      	mov	r1, r8
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1c35e:	2300      	movs	r3, #0
   1c360:	e00a      	b.n	1c378 <lv_draw_line+0x2cc>
                        if(dash_cnt <= dsc->dash_width) {
   1c362:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
   1c366:	428a      	cmp	r2, r1
   1c368:	db26      	blt.n	1c3b8 <lv_draw_line+0x30c>
                            i += diff;
   1c36a:	4413      	add	r3, r2
   1c36c:	1a5b      	subs	r3, r3, r1
   1c36e:	b21b      	sxth	r3, r3
                    for(i = 0; i < draw_area_w; i++, dash_cnt++) {
   1c370:	3301      	adds	r3, #1
   1c372:	3201      	adds	r2, #1
   1c374:	b21b      	sxth	r3, r3
   1c376:	b211      	sxth	r1, r2
   1c378:	429d      	cmp	r5, r3
   1c37a:	dcf2      	bgt.n	1c362 <lv_draw_line+0x2b6>
                    mask_res = LV_DRAW_MASK_RES_CHANGED;
   1c37c:	2202      	movs	r2, #2
                           dsc->blend_mode);
   1c37e:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(clip, &fill_area,
   1c382:	f003 0303 	and.w	r3, r3, #3
   1c386:	9302      	str	r3, [sp, #8]
   1c388:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c38c:	a933      	add	r1, sp, #204	; 0xcc
   1c38e:	e9cd 2300 	strd	r2, r3, [sp]
   1c392:	a80c      	add	r0, sp, #48	; 0x30
   1c394:	4633      	mov	r3, r6
   1c396:	f8bb 2000 	ldrh.w	r2, [fp]
   1c39a:	f00b fc0f 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
   1c39e:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
   1c3a2:	3301      	adds	r3, #1
   1c3a4:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
   1c3a8:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
   1c3ac:	3301      	adds	r3, #1
   1c3ae:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c3b2:	f109 0901 	add.w	r9, r9, #1
   1c3b6:	e7b4      	b.n	1c322 <lv_draw_line+0x276>
                        else if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   1c3b8:	f9bb 0006 	ldrsh.w	r0, [fp, #6]
   1c3bc:	4402      	add	r2, r0
   1c3be:	4291      	cmp	r1, r2
                            mask_buf[i] = 0x00;
   1c3c0:	bfba      	itte	lt
   1c3c2:	f806 a003 	strblt.w	sl, [r6, r3]
   1c3c6:	460a      	movlt	r2, r1
                            dash_cnt = 0;
   1c3c8:	2200      	movge	r2, #0
   1c3ca:	e7d1      	b.n	1c370 <lv_draw_line+0x2c4>
    else if(point1->x == point2->x) draw_line_ver(point1, point2, &clip_line, dsc);
   1c3cc:	9b04      	ldr	r3, [sp, #16]
   1c3ce:	f9b3 7000 	ldrsh.w	r7, [r3]
   1c3d2:	9b05      	ldr	r3, [sp, #20]
   1c3d4:	f9b3 6000 	ldrsh.w	r6, [r3]
   1c3d8:	42b7      	cmp	r7, r6
   1c3da:	f040 80c6 	bne.w	1c56a <lv_draw_line+0x4be>
    lv_opa_t opa = dsc->opa;
   1c3de:	f89b 4008 	ldrb.w	r4, [fp, #8]
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1c3e2:	f7fe fdc1 	bl	1af68 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c3e6:	f00d fdb9 	bl	29f5c <lv_disp_get_buf>
    int32_t w = dsc->width - 1;
   1c3ea:	f9bb 6002 	ldrsh.w	r6, [fp, #2]
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c3ee:	f9bb 5006 	ldrsh.w	r5, [fp, #6]
    int32_t w = dsc->width - 1;
   1c3f2:	1e73      	subs	r3, r6, #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c3f4:	f003 0601 	and.w	r6, r3, #1
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c3f8:	4607      	mov	r7, r0
    int32_t w_half0 = w >> 1;
   1c3fa:	ea4f 0863 	mov.w	r8, r3, asr #1
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c3fe:	eb06 0663 	add.w	r6, r6, r3, asr #1
    bool dashed = dsc->dash_gap && dsc->dash_width ? true : false;
   1c402:	b125      	cbz	r5, 1c40e <lv_draw_line+0x362>
   1c404:	f9bb 5004 	ldrsh.w	r5, [fp, #4]
   1c408:	3d00      	subs	r5, #0
   1c40a:	bf18      	it	ne
   1c40c:	2501      	movne	r5, #1
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c40e:	f000 fab9 	bl	1c984 <lv_draw_mask_get_cnt>
   1c412:	bb20      	cbnz	r0, 1c45e <lv_draw_line+0x3b2>
    else if(dashed) simple_mode = false;
   1c414:	f085 0201 	eor.w	r2, r5, #1
    draw_area.x1 = point1->x - w_half1;
   1c418:	9b04      	ldr	r3, [sp, #16]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c41a:	9904      	ldr	r1, [sp, #16]
    draw_area.x1 = point1->x - w_half1;
   1c41c:	f9b3 3000 	ldrsh.w	r3, [r3]
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c420:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    draw_area.x1 = point1->x - w_half1;
   1c424:	1b9e      	subs	r6, r3, r6
    draw_area.x2 = point1->x + w_half0;
   1c426:	4443      	add	r3, r8
   1c428:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c42c:	9b05      	ldr	r3, [sp, #20]
    draw_area.x1 = point1->x - w_half1;
   1c42e:	f8ad 60a0 	strh.w	r6, [sp, #160]	; 0xa0
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c432:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
   1c436:	428b      	cmp	r3, r1
   1c438:	4618      	mov	r0, r3
   1c43a:	bfa8      	it	ge
   1c43c:	4608      	movge	r0, r1
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   1c43e:	428b      	cmp	r3, r1
   1c440:	bfb8      	it	lt
   1c442:	460b      	movlt	r3, r1
   1c444:	3b01      	subs	r3, #1
    draw_area.y1 = LV_MATH_MIN(point1->y, point2->y);
   1c446:	f8ad 00a2 	strh.w	r0, [sp, #162]	; 0xa2
    draw_area.y2 = LV_MATH_MAX(point1->y, point2->y) - 1;
   1c44a:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
    if(simple_mode) {
   1c44e:	b142      	cbz	r2, 1c462 <lv_draw_line+0x3b6>
                       dsc->blend_mode);
   1c450:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(clip, &draw_area,
   1c454:	f003 0303 	and.w	r3, r3, #3
   1c458:	e9cd 4301 	strd	r4, r3, [sp, #4]
   1c45c:	e6bc      	b.n	1c1d8 <lv_draw_line+0x12c>
    if(lv_draw_mask_get_cnt()) simple_mode = false;
   1c45e:	2200      	movs	r2, #0
   1c460:	e7da      	b.n	1c418 <lv_draw_line+0x36c>
        is_common = _lv_area_intersect(&draw_area, clip, &draw_area);
   1c462:	aa28      	add	r2, sp, #160	; 0xa0
   1c464:	a90c      	add	r1, sp, #48	; 0x30
   1c466:	4610      	mov	r0, r2
   1c468:	f00d fde3 	bl	2a032 <_lv_area_intersect>
        if(!is_common) return;
   1c46c:	2800      	cmp	r0, #0
   1c46e:	f43f aebc 	beq.w	1c1ea <lv_draw_line+0x13e>
        draw_area.x1 -= vdb->area.x1;
   1c472:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
   1c476:	f9bd 00a0 	ldrsh.w	r0, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
   1c47a:	f9b7 4012 	ldrsh.w	r4, [r7, #18]
        fill_area.x1 = draw_area.x1 + disp_area->x1;
   1c47e:	f8ad 00cc 	strh.w	r0, [sp, #204]	; 0xcc
        draw_area.x1 -= vdb->area.x1;
   1c482:	1ac2      	subs	r2, r0, r3
   1c484:	f8ad 20a0 	strh.w	r2, [sp, #160]	; 0xa0
        draw_area.y1 -= vdb->area.y1;
   1c488:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
        fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c48c:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
        draw_area.y1 -= vdb->area.y1;
   1c490:	1b11      	subs	r1, r2, r4
   1c492:	f8ad 10a2 	strh.w	r1, [sp, #162]	; 0xa2
        draw_area.x2 -= vdb->area.x1;
   1c496:	f9bd 10a4 	ldrsh.w	r1, [sp, #164]	; 0xa4
        fill_area.x2 = draw_area.x2 + disp_area->x1;
   1c49a:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
        draw_area.x2 -= vdb->area.x1;
   1c49e:	1acb      	subs	r3, r1, r3
   1c4a0:	f101 0801 	add.w	r8, r1, #1
   1c4a4:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
   1c4a8:	eba8 0800 	sub.w	r8, r8, r0
        draw_area.y2 -= vdb->area.y1;
   1c4ac:	f8bd 30a6 	ldrh.w	r3, [sp, #166]	; 0xa6
        fill_area.y2 = fill_area.y1;
   1c4b0:	f8ad 20d2 	strh.w	r2, [sp, #210]	; 0xd2
   1c4b4:	fa0f f888 	sxth.w	r8, r8
        draw_area.y2 -= vdb->area.y1;
   1c4b8:	1b1b      	subs	r3, r3, r4
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c4ba:	4640      	mov	r0, r8
        draw_area.y2 -= vdb->area.y1;
   1c4bc:	f8ad 30a6 	strh.w	r3, [sp, #166]	; 0xa6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   1c4c0:	f001 f8c8 	bl	1d654 <_lv_mem_buf_get>
   1c4c4:	f9bd 60a2 	ldrsh.w	r6, [sp, #162]	; 0xa2
   1c4c8:	4681      	mov	r9, r0
        if(dashed) {
   1c4ca:	b1a5      	cbz	r5, 1c4f6 <lv_draw_line+0x44a>
            dash_start = (vdb->area.y1 + draw_area.y1) % (dsc->dash_gap + dsc->dash_width);
   1c4cc:	f9bb 4004 	ldrsh.w	r4, [fp, #4]
   1c4d0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
   1c4d4:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   1c4d8:	4432      	add	r2, r6
   1c4da:	4423      	add	r3, r4
   1c4dc:	fb92 f4f3 	sdiv	r4, r2, r3
   1c4e0:	fb03 2414 	mls	r4, r3, r4, r2
   1c4e4:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   1c4e6:	f04f 0a00 	mov.w	sl, #0
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c4ea:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
   1c4ee:	429e      	cmp	r6, r3
   1c4f0:	dd03      	ble.n	1c4fa <lv_draw_line+0x44e>
        _lv_mem_buf_release(mask_buf);
   1c4f2:	4648      	mov	r0, r9
   1c4f4:	e71a      	b.n	1c32c <lv_draw_line+0x280>
        lv_style_int_t dash_start = 0;
   1c4f6:	462c      	mov	r4, r5
   1c4f8:	e7f5      	b.n	1c4e6 <lv_draw_line+0x43a>
            _lv_memset_ff(mask_buf, draw_area_w);
   1c4fa:	4641      	mov	r1, r8
   1c4fc:	4648      	mov	r0, r9
   1c4fe:	f00c fa4c 	bl	2899a <_lv_memset_ff>
            lv_draw_mask_res_t mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   1c502:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
   1c506:	8a7a      	ldrh	r2, [r7, #18]
   1c508:	8a39      	ldrh	r1, [r7, #16]
   1c50a:	4432      	add	r2, r6
   1c50c:	4419      	add	r1, r3
   1c50e:	b212      	sxth	r2, r2
   1c510:	4643      	mov	r3, r8
   1c512:	b209      	sxth	r1, r1
   1c514:	4648      	mov	r0, r9
   1c516:	f000 f9eb 	bl	1c8f0 <lv_draw_mask_apply>
            if(dashed) {
   1c51a:	b16d      	cbz	r5, 1c538 <lv_draw_line+0x48c>
                if(mask_res != LV_DRAW_MASK_RES_TRANSP) {
   1c51c:	b150      	cbz	r0, 1c534 <lv_draw_line+0x488>
                    if(dash_cnt > dsc->dash_width) {
   1c51e:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
                    if(dash_cnt >= dsc->dash_gap + dsc->dash_width) {
   1c522:	f9bb 3006 	ldrsh.w	r3, [fp, #6]
   1c526:	4413      	add	r3, r2
                        mask_res = LV_DRAW_MASK_RES_TRANSP;
   1c528:	42a2      	cmp	r2, r4
   1c52a:	bfb8      	it	lt
   1c52c:	2000      	movlt	r0, #0
                        dash_cnt = 0;
   1c52e:	429c      	cmp	r4, r3
   1c530:	bfa8      	it	ge
   1c532:	2400      	movge	r4, #0
                dash_cnt ++;
   1c534:	3401      	adds	r4, #1
   1c536:	b224      	sxth	r4, r4
            _lv_blend_fill(clip, &fill_area,
   1c538:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c53c:	f8bb 2000 	ldrh.w	r2, [fp]
   1c540:	f8cd a008 	str.w	sl, [sp, #8]
   1c544:	e9cd 0300 	strd	r0, r3, [sp]
   1c548:	a933      	add	r1, sp, #204	; 0xcc
   1c54a:	464b      	mov	r3, r9
   1c54c:	a80c      	add	r0, sp, #48	; 0x30
   1c54e:	f00b fb35 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
   1c552:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
   1c556:	3301      	adds	r3, #1
   1c558:	f8ad 30ce 	strh.w	r3, [sp, #206]	; 0xce
            fill_area.y2++;
   1c55c:	f8bd 30d2 	ldrh.w	r3, [sp, #210]	; 0xd2
   1c560:	3301      	adds	r3, #1
   1c562:	f8ad 30d2 	strh.w	r3, [sp, #210]	; 0xd2
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   1c566:	3601      	adds	r6, #1
   1c568:	e7bf      	b.n	1c4ea <lv_draw_line+0x43e>
                                                 const lv_draw_line_dsc_t * dsc)
{
    /*Keep the great y in p1*/
    lv_point_t p1;
    lv_point_t p2;
    if(point1->y < point2->y) {
   1c56a:	45c1      	cmp	r9, r8
   1c56c:	db05      	blt.n	1c57a <lv_draw_line+0x4ce>
   1c56e:	464b      	mov	r3, r9
   1c570:	46c1      	mov	r9, r8
   1c572:	4698      	mov	r8, r3
   1c574:	463b      	mov	r3, r7
   1c576:	4637      	mov	r7, r6
   1c578:	461e      	mov	r6, r3
        p2.y = point1->y;
        p1.x = point2->x;
        p2.x = point1->x;
    }

    int32_t xdiff = p2.x - p1.x;
   1c57a:	1bf3      	subs	r3, r6, r7
    int32_t ydiff = p2.y - p1.y;
   1c57c:	eba8 0a09 	sub.w	sl, r8, r9
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   1c580:	2b00      	cmp	r3, #0
    int32_t xdiff = p2.x - p1.x;
   1c582:	9307      	str	r3, [sp, #28]
    bool flat = LV_MATH_ABS(xdiff) > LV_MATH_ABS(ydiff) ? true : false;
   1c584:	bfb8      	it	lt
   1c586:	425b      	neglt	r3, r3
   1c588:	f1ba 0f00 	cmp.w	sl, #0
   1c58c:	bfb8      	it	lt
   1c58e:	f1ca 0a00 	rsblt	sl, sl, #0
        181,
    };

    int32_t w = dsc->width;
    int32_t wcorr_i = 0;
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   1c592:	4553      	cmp	r3, sl
   1c594:	bfcc      	ite	gt
   1c596:	ea4f 124a 	movgt.w	r2, sl, lsl #5
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   1c59a:	015a      	lslle	r2, r3, #5

    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1c59c:	49c0      	ldr	r1, [pc, #768]	; (1c8a0 <lv_draw_line+0x7f4>)
    if(flat) wcorr_i = (LV_MATH_ABS(ydiff) << 5) / LV_MATH_ABS(xdiff);
   1c59e:	bfcc      	ite	gt
   1c5a0:	fbb2 f2f3 	udivgt	r2, r2, r3
    else wcorr_i = (LV_MATH_ABS(xdiff) << 5) / LV_MATH_ABS(ydiff);
   1c5a4:	fbb2 f2fa 	udivle	r2, r2, sl
    int32_t w = dsc->width;
   1c5a8:	f9bb 4002 	ldrsh.w	r4, [fp, #2]
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1c5ac:	5c89      	ldrb	r1, [r1, r2]
   1c5ae:	9307      	str	r3, [sp, #28]
   1c5b0:	223f      	movs	r2, #63	; 0x3f
   1c5b2:	fb14 2401 	smlabb	r4, r4, r1, r2
    int32_t w_half0 = w >> 1;
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/

    lv_area_t draw_area;
    draw_area.x1 = LV_MATH_MIN(p1.x, p2.x) - w;
   1c5b6:	f344 12cf 	sbfx	r2, r4, #7, #16
   1c5ba:	42be      	cmp	r6, r7
   1c5bc:	bfd4      	ite	le
   1c5be:	ebc2 0106 	rsble	r1, r2, r6
   1c5c2:	ebc2 0107 	rsbgt	r1, r2, r7
   1c5c6:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
    draw_area.x2 = LV_MATH_MAX(p1.x, p2.x) + w;
   1c5ca:	42be      	cmp	r6, r7
   1c5cc:	bfac      	ite	ge
   1c5ce:	1991      	addge	r1, r2, r6
   1c5d0:	19d1      	addlt	r1, r2, r7
   1c5d2:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
    draw_area.y1 = LV_MATH_MIN(p1.y, p2.y) - w;
   1c5d6:	45c8      	cmp	r8, r9
   1c5d8:	bfd4      	ite	le
   1c5da:	ebc2 0108 	rsble	r1, r2, r8
   1c5de:	ebc2 0109 	rsbgt	r1, r2, r9
   1c5e2:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   1c5e6:	45c8      	cmp	r8, r9
   1c5e8:	bfac      	ite	ge
   1c5ea:	4442      	addge	r2, r8
   1c5ec:	444a      	addlt	r2, r9

    /* Get the union of `coords` and `clip`*/
    /* `clip` is already truncated to the `vdb` size
     * in 'lv_refr_area' function */
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   1c5ee:	a90e      	add	r1, sp, #56	; 0x38
    draw_area.y2 = LV_MATH_MAX(p1.y, p2.y) + w;
   1c5f0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   1c5f4:	4608      	mov	r0, r1
   1c5f6:	aa0c      	add	r2, sp, #48	; 0x30
    w = (w * wcorr[wcorr_i] + 63) >> 7;     /*+ 63 for rounding*/
   1c5f8:	11e5      	asrs	r5, r4, #7
    bool is_common = _lv_area_intersect(&draw_area, &draw_area, clip);
   1c5fa:	f00d fd1a 	bl	2a032 <_lv_area_intersect>
    if(is_common == false) return;
   1c5fe:	2800      	cmp	r0, #0
   1c600:	f43f adf3 	beq.w	1c1ea <lv_draw_line+0x13e>
    lv_draw_mask_line_param_t mask_left_param;
    lv_draw_mask_line_param_t mask_right_param;
    lv_draw_mask_line_param_t mask_top_param;
    lv_draw_mask_line_param_t mask_bottom_param;

    if(flat) {
   1c604:	9b07      	ldr	r3, [sp, #28]
    int32_t w_half1 = w_half0 + (w & 0x1); /*Compensate rounding error*/
   1c606:	f005 0501 	and.w	r5, r5, #1
   1c60a:	eb05 2524 	add.w	r5, r5, r4, asr #8
    if(flat) {
   1c60e:	4553      	cmp	r3, sl
   1c610:	b22d      	sxth	r5, r5
   1c612:	f344 240f 	sbfx	r4, r4, #8, #16
   1c616:	f340 80ed 	ble.w	1c7f4 <lv_draw_line+0x748>
        if(xdiff > 0) {
   1c61a:	eb09 0305 	add.w	r3, r9, r5
   1c61e:	b21b      	sxth	r3, r3
   1c620:	9307      	str	r3, [sp, #28]
   1c622:	1bf3      	subs	r3, r6, r7
   1c624:	eba9 0a04 	sub.w	sl, r9, r4
   1c628:	4445      	add	r5, r8
   1c62a:	eba8 0404 	sub.w	r4, r8, r4
   1c62e:	2b00      	cmp	r3, #0
   1c630:	f04f 0300 	mov.w	r3, #0
   1c634:	b22d      	sxth	r5, r5
   1c636:	fa0f fa8a 	sxth.w	sl, sl
   1c63a:	b224      	sxth	r4, r4
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c63c:	9301      	str	r3, [sp, #4]
        if(xdiff > 0) {
   1c63e:	f340 80cc 	ble.w	1c7da <lv_draw_line+0x72e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c642:	4633      	mov	r3, r6
   1c644:	4652      	mov	r2, sl
   1c646:	9400      	str	r4, [sp, #0]
   1c648:	4639      	mov	r1, r7
   1c64a:	a812      	add	r0, sp, #72	; 0x48
   1c64c:	f000 f9a8 	bl	1c9a0 <lv_draw_mask_line_points_init>
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   1c650:	2301      	movs	r3, #1
   1c652:	9a07      	ldr	r2, [sp, #28]
   1c654:	e9cd 5300 	strd	r5, r3, [sp]
   1c658:	4633      	mov	r3, r6
                                          LV_DRAW_MASK_LINE_SIDE_RIGHT);
        }
        else {
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
                                          LV_DRAW_MASK_LINE_SIDE_LEFT);
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c65a:	4639      	mov	r1, r7
        }
    }
    else {
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
                                      LV_DRAW_MASK_LINE_SIDE_LEFT);
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   1c65c:	a81d      	add	r0, sp, #116	; 0x74
   1c65e:	f000 f99f 	bl	1c9a0 <lv_draw_mask_line_points_init>
                                      LV_DRAW_MASK_LINE_SIDE_RIGHT);
    }

    /*Use the normal vector for the endings*/

    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   1c662:	2100      	movs	r1, #0
   1c664:	a812      	add	r0, sp, #72	; 0x48
   1c666:	f000 f91d 	bl	1c8a4 <lv_draw_mask_add>
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1c66a:	2100      	movs	r1, #0
    int16_t mask_left_id = lv_draw_mask_add(&mask_left_param, NULL);
   1c66c:	9009      	str	r0, [sp, #36]	; 0x24
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1c66e:	a81d      	add	r0, sp, #116	; 0x74
   1c670:	f000 f918 	bl	1c8a4 <lv_draw_mask_add>
    int16_t mask_top_id = LV_MASK_ID_INV;
    int16_t mask_bottom_id = LV_MASK_ID_INV;

    if(!dsc->raw_end) {
   1c674:	f89b 4009 	ldrb.w	r4, [fp, #9]
    int16_t mask_right_id = lv_draw_mask_add(&mask_right_param, NULL);
   1c678:	900a      	str	r0, [sp, #40]	; 0x28
    if(!dsc->raw_end) {
   1c67a:	f014 0410 	ands.w	r4, r4, #16
   1c67e:	f040 80cd 	bne.w	1c81c <lv_draw_line+0x770>
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   1c682:	1bf2      	subs	r2, r6, r7
   1c684:	eba9 0308 	sub.w	r3, r9, r8
   1c688:	b215      	sxth	r5, r2
   1c68a:	fa09 f282 	sxtah	r2, r9, r2
   1c68e:	fa0f fa83 	sxth.w	sl, r3
   1c692:	2103      	movs	r1, #3
   1c694:	b212      	sxth	r2, r2
   1c696:	fa07 f383 	sxtah	r3, r7, r3
   1c69a:	9101      	str	r1, [sp, #4]
   1c69c:	9200      	str	r2, [sp, #0]
   1c69e:	b21b      	sxth	r3, r3
   1c6a0:	464a      	mov	r2, r9
   1c6a2:	4639      	mov	r1, r7
   1c6a4:	a828      	add	r0, sp, #160	; 0xa0
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   1c6a6:	4445      	add	r5, r8
        lv_draw_mask_line_points_init(&mask_top_param, p1.x, p1.y, p1.x - ydiff, p1.y + xdiff, LV_DRAW_MASK_LINE_SIDE_BOTTOM);
   1c6a8:	f000 f97a 	bl	1c9a0 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_bottom_param, p2.x, p2.y, p2.x - ydiff, p2.y + xdiff,  LV_DRAW_MASK_LINE_SIDE_TOP);
   1c6ac:	b22d      	sxth	r5, r5
   1c6ae:	2202      	movs	r2, #2
   1c6b0:	eb06 030a 	add.w	r3, r6, sl
   1c6b4:	b21b      	sxth	r3, r3
   1c6b6:	9201      	str	r2, [sp, #4]
   1c6b8:	4631      	mov	r1, r6
   1c6ba:	4642      	mov	r2, r8
   1c6bc:	a833      	add	r0, sp, #204	; 0xcc
   1c6be:	9500      	str	r5, [sp, #0]
   1c6c0:	f000 f96e 	bl	1c9a0 <lv_draw_mask_line_points_init>
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   1c6c4:	4621      	mov	r1, r4
   1c6c6:	a828      	add	r0, sp, #160	; 0xa0
   1c6c8:	f000 f8ec 	bl	1c8a4 <lv_draw_mask_add>
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   1c6cc:	4621      	mov	r1, r4
        mask_top_id = lv_draw_mask_add(&mask_top_param, NULL);
   1c6ce:	9008      	str	r0, [sp, #32]
        mask_bottom_id = lv_draw_mask_add(&mask_bottom_param, NULL);
   1c6d0:	a833      	add	r0, sp, #204	; 0xcc
   1c6d2:	f000 f8e7 	bl	1c8a4 <lv_draw_mask_add>
   1c6d6:	4680      	mov	r8, r0
    }

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   1c6d8:	f7fe fc46 	bl	1af68 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c6dc:	f00d fc3e 	bl	29f5c <lv_disp_get_buf>

    const lv_area_t * disp_area = &vdb->area;

    /*Store the coordinates of the `draw_a` relative to the VDB */
    draw_area.x1 -= disp_area->x1;
   1c6e0:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
   1c6e4:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
   1c6e8:	1a8b      	subs	r3, r1, r2
   1c6ea:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   1c6ee:	4604      	mov	r4, r0
    draw_area.y1 -= disp_area->y1;
   1c6f0:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   1c6f4:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   1c6f8:	1a1b      	subs	r3, r3, r0
   1c6fa:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    draw_area.x2 -= disp_area->x1;
   1c6fe:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
   1c702:	1a9a      	subs	r2, r3, r2
   1c704:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    draw_area.y2 -= disp_area->y1;
   1c708:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
   1c70c:	f103 0901 	add.w	r9, r3, #1
   1c710:	1a12      	subs	r2, r2, r0
     * So deal with it only with steep lines. */
    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Draw the background line by line*/
    int32_t h;
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   1c712:	a80e      	add	r0, sp, #56	; 0x38
   1c714:	eba9 0901 	sub.w	r9, r9, r1
    draw_area.y2 -= disp_area->y1;
   1c718:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   1c71c:	f00d fc7b 	bl	2a016 <lv_area_get_size>
   1c720:	28ef      	cmp	r0, #239	; 0xef
   1c722:	fa0f f989 	sxth.w	r9, r9
   1c726:	d87e      	bhi.n	1c826 <lv_draw_line+0x77a>
   1c728:	a80e      	add	r0, sp, #56	; 0x38
   1c72a:	f00d fc74 	bl	2a016 <lv_area_get_size>
   1c72e:	4606      	mov	r6, r0
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1c730:	4630      	mov	r0, r6
   1c732:	f000 ff8f 	bl	1d654 <_lv_mem_buf_get>

    lv_area_t fill_area;
    fill_area.x1 = draw_area.x1 + disp_area->x1;
   1c736:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
   1c73a:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1c73e:	441a      	add	r2, r3
   1c740:	b212      	sxth	r2, r2
   1c742:	9207      	str	r2, [sp, #28]
   1c744:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
    fill_area.x2 = draw_area.x2 + disp_area->x1;
   1c748:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
   1c74c:	4413      	add	r3, r2
   1c74e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c752:	8a62      	ldrh	r2, [r4, #18]
   1c754:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   1c758:	4413      	add	r3, r2
   1c75a:	b21b      	sxth	r3, r3

    int32_t x = vdb->area.x1 + draw_area.x1;

    uint32_t mask_p = 0;

    _lv_memset_ff(mask_buf, mask_buf_size);
   1c75c:	4631      	mov	r1, r6
    fill_area.y1 = draw_area.y1 + disp_area->y1;
   1c75e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
    fill_area.y2 = fill_area.y1;
   1c762:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   1c766:	4605      	mov	r5, r0
    _lv_memset_ff(mask_buf, mask_buf_size);
   1c768:	f00c f917 	bl	2899a <_lv_memset_ff>
    /*Fill the first row with 'color'*/
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   1c76c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
   1c770:	f9b4 a012 	ldrsh.w	sl, [r4, #18]
    uint32_t mask_p = 0;
   1c774:	2700      	movs	r7, #0
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   1c776:	449a      	add	sl, r3
   1c778:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
   1c77c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   1c780:	4413      	add	r3, r2
   1c782:	459a      	cmp	sl, r3
   1c784:	dd51      	ble.n	1c82a <lv_draw_line+0x77e>
            _lv_memset_ff(mask_buf, mask_buf_size);
        }
    }

    /*Flush the last part*/
    if(fill_area.y1 != fill_area.y2) {
   1c786:	f9bd 3046 	ldrsh.w	r3, [sp, #70]	; 0x46
   1c78a:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
   1c78e:	429a      	cmp	r2, r3
   1c790:	d013      	beq.n	1c7ba <lv_draw_line+0x70e>
        fill_area.y2--;
   1c792:	3b01      	subs	r3, #1
   1c794:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        _lv_blend_fill(&fill_area, clip,
                       dsc->color, mask_buf, LV_DRAW_MASK_RES_CHANGED, dsc->opa,
                       dsc->blend_mode);
   1c798:	f89b 3009 	ldrb.w	r3, [fp, #9]
        _lv_blend_fill(&fill_area, clip,
   1c79c:	f8bb 2000 	ldrh.w	r2, [fp]
   1c7a0:	f003 0303 	and.w	r3, r3, #3
   1c7a4:	9302      	str	r3, [sp, #8]
   1c7a6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c7aa:	9301      	str	r3, [sp, #4]
   1c7ac:	2302      	movs	r3, #2
   1c7ae:	9300      	str	r3, [sp, #0]
   1c7b0:	a90c      	add	r1, sp, #48	; 0x30
   1c7b2:	462b      	mov	r3, r5
   1c7b4:	a810      	add	r0, sp, #64	; 0x40
   1c7b6:	f00b fa01 	bl	27bbc <_lv_blend_fill>

    }

    _lv_mem_buf_release(mask_buf);
   1c7ba:	4628      	mov	r0, r5
   1c7bc:	f000 ffac 	bl	1d718 <_lv_mem_buf_release>

    lv_draw_mask_remove_id(mask_left_id);
   1c7c0:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c7c2:	f000 f8b7 	bl	1c934 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_right_id);
   1c7c6:	980a      	ldr	r0, [sp, #40]	; 0x28
   1c7c8:	f000 f8b4 	bl	1c934 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_top_id);
   1c7cc:	9808      	ldr	r0, [sp, #32]
   1c7ce:	f000 f8b1 	bl	1c934 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_bottom_id);
   1c7d2:	4640      	mov	r0, r8
   1c7d4:	f000 f8ae 	bl	1c934 <lv_draw_mask_remove_id>
   1c7d8:	e507      	b.n	1c1ea <lv_draw_line+0x13e>
            lv_draw_mask_line_points_init(&mask_left_param, p1.x, p1.y + w_half1, p2.x, p2.y + w_half1,
   1c7da:	9a07      	ldr	r2, [sp, #28]
   1c7dc:	9500      	str	r5, [sp, #0]
   1c7de:	4633      	mov	r3, r6
   1c7e0:	4639      	mov	r1, r7
   1c7e2:	a812      	add	r0, sp, #72	; 0x48
   1c7e4:	f000 f8dc 	bl	1c9a0 <lv_draw_mask_line_points_init>
            lv_draw_mask_line_points_init(&mask_right_param, p1.x, p1.y - w_half0, p2.x, p2.y - w_half0,
   1c7e8:	2301      	movs	r3, #1
   1c7ea:	e9cd 4300 	strd	r4, r3, [sp]
   1c7ee:	4652      	mov	r2, sl
   1c7f0:	4633      	mov	r3, r6
   1c7f2:	e732      	b.n	1c65a <lv_draw_line+0x5ae>
        lv_draw_mask_line_points_init(&mask_left_param, p1.x + w_half1, p1.y, p2.x + w_half1, p2.y,
   1c7f4:	1973      	adds	r3, r6, r5
   1c7f6:	2200      	movs	r2, #0
   1c7f8:	443d      	add	r5, r7
   1c7fa:	e9cd 8200 	strd	r8, r2, [sp]
   1c7fe:	b21b      	sxth	r3, r3
   1c800:	464a      	mov	r2, r9
   1c802:	b229      	sxth	r1, r5
   1c804:	a812      	add	r0, sp, #72	; 0x48
   1c806:	f000 f8cb 	bl	1c9a0 <lv_draw_mask_line_points_init>
        lv_draw_mask_line_points_init(&mask_right_param, p1.x - w_half0, p1.y, p2.x - w_half0, p2.y,
   1c80a:	2201      	movs	r2, #1
   1c80c:	1b33      	subs	r3, r6, r4
   1c80e:	1b39      	subs	r1, r7, r4
   1c810:	e9cd 8200 	strd	r8, r2, [sp]
   1c814:	b21b      	sxth	r3, r3
   1c816:	464a      	mov	r2, r9
   1c818:	b209      	sxth	r1, r1
   1c81a:	e71f      	b.n	1c65c <lv_draw_line+0x5b0>
    int16_t mask_bottom_id = LV_MASK_ID_INV;
   1c81c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    int16_t mask_top_id = LV_MASK_ID_INV;
   1c820:	f8cd 8020 	str.w	r8, [sp, #32]
   1c824:	e758      	b.n	1c6d8 <lv_draw_line+0x62c>
    size_t mask_buf_size = LV_MATH_MIN(lv_area_get_size(&draw_area), LV_HOR_RES_MAX);
   1c826:	26f0      	movs	r6, #240	; 0xf0
   1c828:	e782      	b.n	1c730 <lv_draw_line+0x684>
        lv_draw_mask_res_t mask_res = lv_draw_mask_apply(&mask_buf[mask_p], x, h, draw_area_w);
   1c82a:	19eb      	adds	r3, r5, r7
   1c82c:	930b      	str	r3, [sp, #44]	; 0x2c
   1c82e:	9907      	ldr	r1, [sp, #28]
   1c830:	464b      	mov	r3, r9
   1c832:	fa0f f28a 	sxth.w	r2, sl
   1c836:	19e8      	adds	r0, r5, r7
   1c838:	f000 f85a 	bl	1c8f0 <lv_draw_mask_apply>
        if(mask_res == LV_DRAW_MASK_RES_TRANSP) {
   1c83c:	b918      	cbnz	r0, 1c846 <lv_draw_line+0x79a>
            _lv_memset_00(&mask_buf[mask_p], draw_area_w);
   1c83e:	4649      	mov	r1, r9
   1c840:	19e8      	adds	r0, r5, r7
   1c842:	f00c f8a6 	bl	28992 <_lv_memset_00>
        mask_p += draw_area_w;
   1c846:	444f      	add	r7, r9
        if((uint32_t) mask_p + draw_area_w < mask_buf_size) {
   1c848:	eb07 0309 	add.w	r3, r7, r9
   1c84c:	429e      	cmp	r6, r3
   1c84e:	d907      	bls.n	1c860 <lv_draw_line+0x7b4>
            fill_area.y2 ++;
   1c850:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1c854:	3301      	adds	r3, #1
   1c856:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    for(h = draw_area.y1 + disp_area->y1; h <= draw_area.y2 + disp_area->y1; h++) {
   1c85a:	f10a 0a01 	add.w	sl, sl, #1
   1c85e:	e78b      	b.n	1c778 <lv_draw_line+0x6cc>
                           dsc->blend_mode);
   1c860:	f89b 3009 	ldrb.w	r3, [fp, #9]
            _lv_blend_fill(&fill_area, clip,
   1c864:	f8bb 2000 	ldrh.w	r2, [fp]
   1c868:	f003 0303 	and.w	r3, r3, #3
   1c86c:	9302      	str	r3, [sp, #8]
   1c86e:	f89b 3008 	ldrb.w	r3, [fp, #8]
   1c872:	9301      	str	r3, [sp, #4]
   1c874:	2302      	movs	r3, #2
   1c876:	9300      	str	r3, [sp, #0]
   1c878:	a90c      	add	r1, sp, #48	; 0x30
   1c87a:	462b      	mov	r3, r5
   1c87c:	a810      	add	r0, sp, #64	; 0x40
   1c87e:	f00b f99d 	bl	27bbc <_lv_blend_fill>
            fill_area.y1 = fill_area.y2 + 1;
   1c882:	f8bd 3046 	ldrh.w	r3, [sp, #70]	; 0x46
   1c886:	3301      	adds	r3, #1
   1c888:	b21b      	sxth	r3, r3
            _lv_memset_ff(mask_buf, mask_buf_size);
   1c88a:	4631      	mov	r1, r6
   1c88c:	4628      	mov	r0, r5
            fill_area.y1 = fill_area.y2 + 1;
   1c88e:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
            fill_area.y2 = fill_area.y1;
   1c892:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
            mask_p = 0;
   1c896:	2700      	movs	r7, #0
            _lv_memset_ff(mask_buf, mask_buf_size);
   1c898:	f00c f87f 	bl	2899a <_lv_memset_ff>
   1c89c:	e7dd      	b.n	1c85a <lv_draw_line+0x7ae>
   1c89e:	bf00      	nop
   1c8a0:	000302b5 	.word	0x000302b5

0001c8a4 <lv_draw_mask_add>:
 * @param param an initialized mask parameter. Only the pointer is saved.
 * @param custom_id a custom pointer to identify the mask. Used in `lv_draw_mask_remove_custom`.
 * @return the an integer, the ID of the mask. Can be used in `lv_draw_mask_remove_id`.
 */
int16_t lv_draw_mask_add(void * param, void * custom_id)
{
   1c8a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    /*Look for a free entry*/
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   1c8a6:	4c0e      	ldr	r4, [pc, #56]	; (1c8e0 <lv_draw_mask_add+0x3c>)
{
   1c8a8:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param == NULL) break;
   1c8aa:	f854 6033 	ldr.w	r6, [r4, r3, lsl #3]
   1c8ae:	b2da      	uxtb	r2, r3
   1c8b0:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
   1c8b4:	b176      	cbz	r6, 1c8d4 <lv_draw_mask_add+0x30>
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   1c8b6:	3301      	adds	r3, #1
   1c8b8:	2b10      	cmp	r3, #16
   1c8ba:	d1f6      	bne.n	1c8aa <lv_draw_mask_add+0x6>
    }

    if(i >= _LV_MASK_MAX_NUM) {
        LV_LOG_WARN("lv_mask_add: no place to add the mask");
   1c8bc:	4b09      	ldr	r3, [pc, #36]	; (1c8e4 <lv_draw_mask_add+0x40>)
   1c8be:	9300      	str	r3, [sp, #0]
   1c8c0:	2002      	movs	r0, #2
   1c8c2:	4b09      	ldr	r3, [pc, #36]	; (1c8e8 <lv_draw_mask_add+0x44>)
   1c8c4:	4909      	ldr	r1, [pc, #36]	; (1c8ec <lv_draw_mask_add+0x48>)
   1c8c6:	2253      	movs	r2, #83	; 0x53
   1c8c8:	f000 fe1a 	bl	1d500 <_lv_log_add>
        return LV_MASK_ID_INV;
   1c8cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;

    return i;
}
   1c8d0:	b002      	add	sp, #8
   1c8d2:	bd70      	pop	{r4, r5, r6, pc}
    LV_GC_ROOT(_lv_draw_mask_list[i]).param = param;
   1c8d4:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
    LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = custom_id;
   1c8d8:	6069      	str	r1, [r5, #4]
    return i;
   1c8da:	b210      	sxth	r0, r2
   1c8dc:	e7f8      	b.n	1c8d0 <lv_draw_mask_add+0x2c>
   1c8de:	bf00      	nop
   1c8e0:	20003eb8 	.word	0x20003eb8
   1c8e4:	00030312 	.word	0x00030312
   1c8e8:	00030338 	.word	0x00030338
   1c8ec:	000302d6 	.word	0x000302d6

0001c8f0 <lv_draw_mask_apply>:
 * - `LV_DRAW_MASK_RES_FULL_COVER`: the whole line is fully visible. `mask_buf` is unchanged
 * - `LV_DRAW_MASK_RES_CHANGED`: `mask_buf` has changed, it shows the desired opacity of each pixel in the given line
 */
LV_ATTRIBUTE_FAST_MEM lv_draw_mask_res_t lv_draw_mask_apply(lv_opa_t * mask_buf, lv_coord_t abs_x, lv_coord_t abs_y,
                                                            lv_coord_t len)
{
   1c8f0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    bool changed = false;
    lv_draw_mask_common_dsc_t * dsc;

    _lv_draw_mask_saved_t * m = LV_GC_ROOT(_lv_draw_mask_list);
   1c8f4:	4e0e      	ldr	r6, [pc, #56]	; (1c930 <lv_draw_mask_apply+0x40>)
{
   1c8f6:	4607      	mov	r7, r0
   1c8f8:	4688      	mov	r8, r1
   1c8fa:	4691      	mov	r9, r2
   1c8fc:	469a      	mov	sl, r3
    bool changed = false;
   1c8fe:	2500      	movs	r5, #0

    while(m->param) {
   1c900:	6834      	ldr	r4, [r6, #0]
   1c902:	b934      	cbnz	r4, 1c912 <lv_draw_mask_apply+0x22>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;

        m++;
    }

    return changed ? LV_DRAW_MASK_RES_CHANGED : LV_DRAW_MASK_RES_FULL_COVER;
   1c904:	2d00      	cmp	r5, #0
   1c906:	bf14      	ite	ne
   1c908:	2002      	movne	r0, #2
   1c90a:	2001      	moveq	r0, #1
}
   1c90c:	b002      	add	sp, #8
   1c90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        res = dsc->cb(mask_buf, abs_x, abs_y, len, (void *)m->param);
   1c912:	9400      	str	r4, [sp, #0]
   1c914:	6824      	ldr	r4, [r4, #0]
   1c916:	4653      	mov	r3, sl
   1c918:	464a      	mov	r2, r9
   1c91a:	4641      	mov	r1, r8
   1c91c:	4638      	mov	r0, r7
   1c91e:	47a0      	blx	r4
        if(res == LV_DRAW_MASK_RES_TRANSP) return LV_DRAW_MASK_RES_TRANSP;
   1c920:	2800      	cmp	r0, #0
   1c922:	d0f3      	beq.n	1c90c <lv_draw_mask_apply+0x1c>
        else if(res == LV_DRAW_MASK_RES_CHANGED) changed = true;
   1c924:	2802      	cmp	r0, #2
   1c926:	bf08      	it	eq
   1c928:	2501      	moveq	r5, #1
        m++;
   1c92a:	3608      	adds	r6, #8
   1c92c:	e7e8      	b.n	1c900 <lv_draw_mask_apply+0x10>
   1c92e:	bf00      	nop
   1c930:	20003eb8 	.word	0x20003eb8

0001c934 <lv_draw_mask_remove_id>:
 */
void * lv_draw_mask_remove_id(int16_t id)
{
    void * p = NULL;

    if(id != LV_MASK_ID_INV) {
   1c934:	1c42      	adds	r2, r0, #1
{
   1c936:	4603      	mov	r3, r0
        p = LV_GC_ROOT(_lv_draw_mask_list[id]).param;
   1c938:	bf18      	it	ne
   1c93a:	4a07      	ldrne	r2, [pc, #28]	; (1c958 <lv_draw_mask_remove_id+0x24>)
   1c93c:	f04f 0100 	mov.w	r1, #0
   1c940:	bf1d      	ittte	ne
   1c942:	f852 0030 	ldrne.w	r0, [r2, r0, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).param = NULL;
   1c946:	f842 1033 	strne.w	r1, [r2, r3, lsl #3]
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   1c94a:	eb02 03c3 	addne.w	r3, r2, r3, lsl #3
    void * p = NULL;
   1c94e:	4608      	moveq	r0, r1
        LV_GC_ROOT(_lv_draw_mask_list[id]).custom_id = NULL;
   1c950:	bf18      	it	ne
   1c952:	6059      	strne	r1, [r3, #4]
    }

    return p;
}
   1c954:	4770      	bx	lr
   1c956:	bf00      	nop
   1c958:	20003eb8 	.word	0x20003eb8

0001c95c <lv_draw_mask_remove_custom>:
 * @param custom_id a pointer used in `lv_draw_mask_add`
 * @return return the parameter of the removed mask.
 * If more masks have `custom_id` ID then the last mask's parameter will be returned
 */
void * lv_draw_mask_remove_custom(void * custom_id)
{
   1c95c:	2200      	movs	r2, #0
   1c95e:	4b08      	ldr	r3, [pc, #32]	; (1c980 <lv_draw_mask_remove_custom+0x24>)
   1c960:	b530      	push	{r4, r5, lr}
   1c962:	4601      	mov	r1, r0
    void * p = NULL;
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
            LV_GC_ROOT(_lv_draw_mask_list[i]).param = NULL;
   1c964:	4614      	mov	r4, r2
    void * p = NULL;
   1c966:	4610      	mov	r0, r2
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id == custom_id) {
   1c968:	685d      	ldr	r5, [r3, #4]
   1c96a:	3201      	adds	r2, #1
   1c96c:	428d      	cmp	r5, r1
            p = LV_GC_ROOT(_lv_draw_mask_list[i]).param;
   1c96e:	bf04      	itt	eq
   1c970:	6818      	ldreq	r0, [r3, #0]
            LV_GC_ROOT(_lv_draw_mask_list[i]).custom_id = NULL;
   1c972:	e9c3 4400 	strdeq	r4, r4, [r3]
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   1c976:	2a10      	cmp	r2, #16
   1c978:	f103 0308 	add.w	r3, r3, #8
   1c97c:	d1f4      	bne.n	1c968 <lv_draw_mask_remove_custom+0xc>
        }
    }
    return p;
}
   1c97e:	bd30      	pop	{r4, r5, pc}
   1c980:	20003eb8 	.word	0x20003eb8

0001c984 <lv_draw_mask_get_cnt>:
/**
 * Count the currently added masks
 * @return number of active masks
 */
LV_ATTRIBUTE_FAST_MEM uint8_t lv_draw_mask_get_cnt(void)
{
   1c984:	2300      	movs	r3, #0
    uint8_t cnt = 0;
    uint8_t i;
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   1c986:	4a05      	ldr	r2, [pc, #20]	; (1c99c <lv_draw_mask_get_cnt+0x18>)
    uint8_t cnt = 0;
   1c988:	4618      	mov	r0, r3
        if(LV_GC_ROOT(_lv_draw_mask_list[i]).param) cnt++;
   1c98a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   1c98e:	b109      	cbz	r1, 1c994 <lv_draw_mask_get_cnt+0x10>
   1c990:	3001      	adds	r0, #1
   1c992:	b2c0      	uxtb	r0, r0
    for(i = 0; i < _LV_MASK_MAX_NUM; i++) {
   1c994:	3301      	adds	r3, #1
   1c996:	2b10      	cmp	r3, #16
   1c998:	d1f7      	bne.n	1c98a <lv_draw_mask_get_cnt+0x6>
    }
    return cnt;
}
   1c99a:	4770      	bx	lr
   1c99c:	20003eb8 	.word	0x20003eb8

0001c9a0 <lv_draw_mask_line_points_init>:
 * With `LV_DRAW_MASK_LINE_SIDE_LEFT/RIGHT` and horizontal line all pixels are kept
 * With `LV_DRAW_MASK_LINE_SIDE_TOP/BOTTOM` and vertical line all pixels are kept
 */
void lv_draw_mask_line_points_init(lv_draw_mask_line_param_t * param, lv_coord_t p1x, lv_coord_t p1y, lv_coord_t p2x,
                                   lv_coord_t p2y, lv_draw_mask_line_side_t side)
{
   1c9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c9a4:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
   1c9a8:	4615      	mov	r5, r2
   1c9aa:	460e      	mov	r6, r1
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   1c9ac:	212c      	movs	r1, #44	; 0x2c
{
   1c9ae:	4604      	mov	r4, r0
   1c9b0:	461f      	mov	r7, r3
    _lv_memset_00(param, sizeof(lv_draw_mask_line_param_t));
   1c9b2:	f00c f810 	bl	289d6 <_lv_memset_00>

    if(p1y > p2y) {
   1c9b6:	4545      	cmp	r5, r8
   1c9b8:	dd05      	ble.n	1c9c6 <lv_draw_mask_line_points_init+0x26>
   1c9ba:	462b      	mov	r3, r5
   1c9bc:	4645      	mov	r5, r8
   1c9be:	4698      	mov	r8, r3
   1c9c0:	4633      	mov	r3, r6
        lv_coord_t t;
        t = p2x;
        p2x = p1x;
        p1x = t;
   1c9c2:	463e      	mov	r6, r7
        p2x = p1x;
   1c9c4:	461f      	mov	r7, r3

    param->cfg.p1.x = p1x;
    param->cfg.p1.y = p1y;
    param->cfg.p2.x = p2x;
    param->cfg.p2.y = p2y;
    param->cfg.side = side;
   1c9c6:	7c23      	ldrb	r3, [r4, #16]
   1c9c8:	f89d 201c 	ldrb.w	r2, [sp, #28]
    param->cfg.p1.y = p1y;
   1c9cc:	8165      	strh	r5, [r4, #10]
    param->cfg.side = side;
   1c9ce:	f362 0301 	bfi	r3, r2, #0, #2
   1c9d2:	7423      	strb	r3, [r4, #16]

    param->origo.x = p1x;
    param->origo.y = p1y;
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   1c9d4:	eba8 0205 	sub.w	r2, r8, r5
   1c9d8:	1bbb      	subs	r3, r7, r6
   1c9da:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
   1c9de:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   1c9e2:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
   1c9e6:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
   1c9ea:	4288      	cmp	r0, r1
   1c9ec:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
    param->origo.y = p1y;
   1c9f0:	82a5      	strh	r5, [r4, #20]
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   1c9f2:	bfd4      	ite	le
   1c9f4:	2000      	movle	r0, #0
   1c9f6:	2001      	movgt	r0, #1
   1c9f8:	f360 0100 	bfi	r1, r0, #0, #1
    param->yx_steep = 0;
    param->xy_steep = 0;
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   1c9fc:	4d29      	ldr	r5, [pc, #164]	; (1caa4 <lv_draw_mask_line_points_init+0x104>)
    param->flat = (LV_MATH_ABS(p2x - p1x) > LV_MATH_ABS(p2y - p1y)) ? 1 : 0;
   1c9fe:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    param->yx_steep = 0;
   1ca02:	2000      	movs	r0, #0
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;

    int32_t dx = p2x - p1x;
    int32_t dy = p2y - p1y;

    if(param->flat) {
   1ca04:	07c9      	lsls	r1, r1, #31
    param->xy_steep = 0;
   1ca06:	e9c4 0006 	strd	r0, r0, [r4, #24]
    param->cfg.p1.x = p1x;
   1ca0a:	8126      	strh	r6, [r4, #8]
    param->cfg.p2.x = p2x;
   1ca0c:	81a7      	strh	r7, [r4, #12]
    param->cfg.p2.y = p2y;
   1ca0e:	f8a4 800e 	strh.w	r8, [r4, #14]
    param->origo.x = p1x;
   1ca12:	8266      	strh	r6, [r4, #18]
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_line;
   1ca14:	6025      	str	r5, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_LINE;
   1ca16:	7120      	strb	r0, [r4, #4]
    if(param->flat) {
   1ca18:	d524      	bpl.n	1ca64 <lv_draw_mask_line_points_init+0xc4>
        /*Normalize the steep. Delta x should be relative to delta x = 1024*/
        int32_t m;

        if(dx) {
   1ca1a:	b133      	cbz	r3, 1ca2a <lv_draw_mask_line_points_init+0x8a>
            m = (1 << 20) / dx;  /*m is multiplier to normalize y (upscaled by 1024)*/
   1ca1c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1ca20:	fb91 f1f3 	sdiv	r1, r1, r3
            param->yx_steep = (m * dy) >> 10;
   1ca24:	4351      	muls	r1, r2
   1ca26:	1289      	asrs	r1, r1, #10
   1ca28:	61e1      	str	r1, [r4, #28]
        }

        if(dy) {
   1ca2a:	b132      	cbz	r2, 1ca3a <lv_draw_mask_line_points_init+0x9a>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   1ca2c:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1ca30:	fb91 f2f2 	sdiv	r2, r1, r2
            param->xy_steep = (m * dx) >> 10;
   1ca34:	4353      	muls	r3, r2
   1ca36:	129b      	asrs	r3, r3, #10
   1ca38:	61a3      	str	r3, [r4, #24]
        }
        param->steep = param->yx_steep;
   1ca3a:	69e3      	ldr	r3, [r4, #28]
            param->yx_steep = (m * dy) >> 10;
        }
        param->steep = param->xy_steep;
    }

    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   1ca3c:	7c22      	ldrb	r2, [r4, #16]
        param->steep = param->xy_steep;
   1ca3e:	6223      	str	r3, [r4, #32]
    if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) param->inv = 0;
   1ca40:	f012 0203 	ands.w	r2, r2, #3
   1ca44:	6a21      	ldr	r1, [r4, #32]
   1ca46:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1ca4a:	d11d      	bne.n	1ca88 <lv_draw_mask_line_points_init+0xe8>
   1ca4c:	f36f 0341 	bfc	r3, #1, #1
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   1ca50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if(param->steep > 0) param->inv = 0;
        else param->inv = 1;
    }

    param->spx = param->steep >> 2;
    if(param->steep < 0) param->spx = -param->spx;
   1ca54:	2900      	cmp	r1, #0
    param->spx = param->steep >> 2;
   1ca56:	ea4f 03a1 	mov.w	r3, r1, asr #2
    if(param->steep < 0) param->spx = -param->spx;
   1ca5a:	bfb8      	it	lt
   1ca5c:	425b      	neglt	r3, r3
   1ca5e:	6263      	str	r3, [r4, #36]	; 0x24
}
   1ca60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(dy) {
   1ca64:	b132      	cbz	r2, 1ca74 <lv_draw_mask_line_points_init+0xd4>
            m = (1 << 20) / dy;  /*m is multiplier to normalize x (upscaled by 1024)*/
   1ca66:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1ca6a:	fb91 f1f2 	sdiv	r1, r1, r2
            param->xy_steep = (m * dx) >> 10;
   1ca6e:	4359      	muls	r1, r3
   1ca70:	1289      	asrs	r1, r1, #10
   1ca72:	61a1      	str	r1, [r4, #24]
        if(dx) {
   1ca74:	b133      	cbz	r3, 1ca84 <lv_draw_mask_line_points_init+0xe4>
            m = (1 << 20) / dx;  /*m is multiplier to normalize x (upscaled by 1024)*/
   1ca76:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   1ca7a:	fb91 f3f3 	sdiv	r3, r1, r3
            param->yx_steep = (m * dy) >> 10;
   1ca7e:	435a      	muls	r2, r3
   1ca80:	1292      	asrs	r2, r2, #10
   1ca82:	61e2      	str	r2, [r4, #28]
        param->steep = param->xy_steep;
   1ca84:	69a3      	ldr	r3, [r4, #24]
   1ca86:	e7d9      	b.n	1ca3c <lv_draw_mask_line_points_init+0x9c>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) param->inv = 1;
   1ca88:	2a01      	cmp	r2, #1
   1ca8a:	d102      	bne.n	1ca92 <lv_draw_mask_line_points_init+0xf2>
   1ca8c:	f043 0302 	orr.w	r3, r3, #2
   1ca90:	e7de      	b.n	1ca50 <lv_draw_mask_line_points_init+0xb0>
    else if(param->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP) {
   1ca92:	2a02      	cmp	r2, #2
   1ca94:	d102      	bne.n	1ca9c <lv_draw_mask_line_points_init+0xfc>
        if(param->steep > 0) param->inv = 1;
   1ca96:	2900      	cmp	r1, #0
   1ca98:	dcf8      	bgt.n	1ca8c <lv_draw_mask_line_points_init+0xec>
   1ca9a:	e7d7      	b.n	1ca4c <lv_draw_mask_line_points_init+0xac>
        if(param->steep > 0) param->inv = 0;
   1ca9c:	2900      	cmp	r1, #0
   1ca9e:	dcd5      	bgt.n	1ca4c <lv_draw_mask_line_points_init+0xac>
   1caa0:	e7f4      	b.n	1ca8c <lv_draw_mask_line_points_init+0xec>
   1caa2:	bf00      	nop
   1caa4:	000289df 	.word	0x000289df

0001caa8 <lv_draw_mask_radius_init>:
 * @param rect coordinates of the rectangle to affect (absolute coordinates)
 * @param radius radius of the rectangle
 * @param inv: true: keep the pixels inside the rectangle; keep the pixels outside of the rectangle
 */
void lv_draw_mask_radius_init(lv_draw_mask_radius_param_t * param, const lv_area_t * rect, lv_coord_t radius, bool inv)
{
   1caa8:	b570      	push	{r4, r5, r6, lr}
   1caaa:	4604      	mov	r4, r0
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1caac:	88c8      	ldrh	r0, [r1, #6]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1caae:	888d      	ldrh	r5, [r1, #4]
   1cab0:	4616      	mov	r6, r2
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1cab2:	884a      	ldrh	r2, [r1, #2]
   1cab4:	3001      	adds	r0, #1
   1cab6:	1a80      	subs	r0, r0, r2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1cab8:	880a      	ldrh	r2, [r1, #0]
   1caba:	3501      	adds	r5, #1
   1cabc:	1aad      	subs	r5, r5, r2
    lv_coord_t w = lv_area_get_width(rect);
    lv_coord_t h = lv_area_get_height(rect);
    int32_t short_side = LV_MATH_MIN(w, h);
   1cabe:	b200      	sxth	r0, r0
   1cac0:	b22d      	sxth	r5, r5
   1cac2:	42a8      	cmp	r0, r5
   1cac4:	bfa8      	it	ge
   1cac6:	4628      	movge	r0, r5
    if(radius > short_side >> 1) radius = short_side >> 1;
   1cac8:	1042      	asrs	r2, r0, #1
   1caca:	ebb6 0f60 	cmp.w	r6, r0, asr #1
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   1cace:	f104 0008 	add.w	r0, r4, #8
   1cad2:	bfc8      	it	gt
   1cad4:	b216      	sxthgt	r6, r2
   1cad6:	f00c f934 	bl	28d42 <_lv_memcpy_small.constprop.0>

    lv_area_copy(&param->cfg.rect, rect);
    param->cfg.radius = radius;
    param->cfg.outer = inv ? 1 : 0;
   1cada:	7ca2      	ldrb	r2, [r4, #18]
    param->cfg.radius = radius;
   1cadc:	8226      	strh	r6, [r4, #16]
    param->cfg.outer = inv ? 1 : 0;
   1cade:	f363 0200 	bfi	r2, r3, #0, #1
    param->dsc.cb = (lv_draw_mask_xcb_t)lv_draw_mask_radius;
   1cae2:	4b05      	ldr	r3, [pc, #20]	; (1caf8 <lv_draw_mask_radius_init+0x50>)
   1cae4:	6023      	str	r3, [r4, #0]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   1cae6:	2302      	movs	r3, #2
    param->cfg.outer = inv ? 1 : 0;
   1cae8:	74a2      	strb	r2, [r4, #18]
    param->dsc.type = LV_DRAW_MASK_TYPE_RADIUS;
   1caea:	7123      	strb	r3, [r4, #4]
    param->y_prev = INT32_MIN;
    param->y_prev_x.f = 0;
    param->y_prev_x.i = 0;
   1caec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1caf0:	2300      	movs	r3, #0
   1caf2:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
   1caf6:	bd70      	pop	{r4, r5, r6, pc}
   1caf8:	00028d4d 	.word	0x00028d4d

0001cafc <lv_draw_rect_dsc_init>:
/**********************
 *   GLOBAL FUNCTIONS
 **********************/

LV_ATTRIBUTE_FAST_MEM void lv_draw_rect_dsc_init(lv_draw_rect_dsc_t * dsc)
{
   1cafc:	b510      	push	{r4, lr}
__ssp_bos_icheck3(memset, void *, int)
   1cafe:	2254      	movs	r2, #84	; 0x54
   1cb00:	2100      	movs	r1, #0
   1cb02:	4604      	mov	r4, r0
   1cb04:	f00e fe4a 	bl	2b79c <memset>
    _lv_memset_00(dsc, sizeof(lv_draw_rect_dsc_t));
    dsc->bg_color = LV_COLOR_WHITE;
   1cb08:	4b09      	ldr	r3, [pc, #36]	; (1cb30 <lv_draw_rect_dsc_init+0x34>)
    dsc->bg_grad_color_stop = 0xFF;
    dsc->bg_opa = LV_OPA_COVER;
    dsc->outline_opa = LV_OPA_COVER;
    dsc->border_opa = LV_OPA_COVER;
    dsc->pattern_opa = LV_OPA_COVER;
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   1cb0a:	4a0a      	ldr	r2, [pc, #40]	; (1cb34 <lv_draw_rect_dsc_init+0x38>)
    dsc->bg_color = LV_COLOR_WHITE;
   1cb0c:	881b      	ldrh	r3, [r3, #0]
   1cb0e:	8063      	strh	r3, [r4, #2]
    dsc->bg_grad_color_stop = 0xFF;
   1cb10:	23ff      	movs	r3, #255	; 0xff
   1cb12:	8163      	strh	r3, [r4, #10]
    dsc->bg_opa = LV_OPA_COVER;
   1cb14:	7323      	strb	r3, [r4, #12]
    dsc->outline_opa = LV_OPA_COVER;
   1cb16:	77a3      	strb	r3, [r4, #30]
    dsc->border_opa = LV_OPA_COVER;
   1cb18:	7523      	strb	r3, [r4, #20]
    dsc->pattern_opa = LV_OPA_COVER;
   1cb1a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    dsc->value_opa = LV_OPA_COVER;
   1cb1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
    dsc->shadow_opa = LV_OPA_COVER;
   1cb22:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
    dsc->border_side = LV_BORDER_SIDE_FULL;
   1cb26:	230f      	movs	r3, #15
    dsc->pattern_font = LV_THEME_DEFAULT_FONT_NORMAL;
   1cb28:	6322      	str	r2, [r4, #48]	; 0x30
    dsc->value_font = LV_THEME_DEFAULT_FONT_NORMAL;
   1cb2a:	6422      	str	r2, [r4, #64]	; 0x40
    dsc->border_side = LV_BORDER_SIDE_FULL;
   1cb2c:	8263      	strh	r3, [r4, #18]

}
   1cb2e:	bd10      	pop	{r4, pc}
   1cb30:	0002c10c 	.word	0x0002c10c
   1cb34:	20000800 	.word	0x20000800

0001cb38 <_lv_img_cache_open>:
 * @param color color The color of the image with `LV_IMG_CF_ALPHA_...`
 * @return pointer to the cache entry or NULL if can open the image
 */
lv_img_cache_entry_t * _lv_img_cache_open(const void * src, lv_color_t color)
{
    if(entry_cnt == 0) {
   1cb38:	4b56      	ldr	r3, [pc, #344]	; (1cc94 <_lv_img_cache_open+0x15c>)
{
   1cb3a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(entry_cnt == 0) {
   1cb3e:	881c      	ldrh	r4, [r3, #0]
{
   1cb40:	4605      	mov	r5, r0
   1cb42:	460e      	mov	r6, r1
   1cb44:	4699      	mov	r9, r3
    if(entry_cnt == 0) {
   1cb46:	b95c      	cbnz	r4, 1cb60 <_lv_img_cache_open+0x28>
        LV_LOG_WARN("lv_img_cache_open: the cache size is 0");
   1cb48:	4b53      	ldr	r3, [pc, #332]	; (1cc98 <_lv_img_cache_open+0x160>)
   1cb4a:	9300      	str	r3, [sp, #0]
   1cb4c:	4953      	ldr	r1, [pc, #332]	; (1cc9c <_lv_img_cache_open+0x164>)
   1cb4e:	4b54      	ldr	r3, [pc, #336]	; (1cca0 <_lv_img_cache_open+0x168>)
   1cb50:	2244      	movs	r2, #68	; 0x44
   1cb52:	2002      	movs	r0, #2
   1cb54:	f000 fcd4 	bl	1d500 <_lv_log_add>

        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
    }

    return cached_src;
}
   1cb58:	4620      	mov	r0, r4
   1cb5a:	b003      	add	sp, #12
   1cb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1cb60:	4b50      	ldr	r3, [pc, #320]	; (1cca4 <_lv_img_cache_open+0x16c>)
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   1cb62:	4851      	ldr	r0, [pc, #324]	; (1cca8 <_lv_img_cache_open+0x170>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1cb64:	681f      	ldr	r7, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
   1cb66:	2100      	movs	r1, #0
   1cb68:	463b      	mov	r3, r7
   1cb6a:	b28a      	uxth	r2, r1
   1cb6c:	4294      	cmp	r4, r2
   1cb6e:	d846      	bhi.n	1cbfe <_lv_img_cache_open+0xc6>
   1cb70:	f04f 0800 	mov.w	r8, #0
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   1cb74:	f04f 0a24 	mov.w	sl, #36	; 0x24
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   1cb78:	fa1f fb86 	uxth.w	fp, r6
    for(i = 0; i < entry_cnt; i++) {
   1cb7c:	f8b9 1000 	ldrh.w	r1, [r9]
   1cb80:	fa1f f388 	uxth.w	r3, r8
   1cb84:	4299      	cmp	r1, r3
   1cb86:	d843      	bhi.n	1cc10 <_lv_img_cache_open+0xd8>
   1cb88:	f107 0224 	add.w	r2, r7, #36	; 0x24
        cached_src = &cache[0];
   1cb8c:	463c      	mov	r4, r7
        for(i = 1; i < entry_cnt; i++) {
   1cb8e:	2301      	movs	r3, #1
   1cb90:	4299      	cmp	r1, r3
   1cb92:	d861      	bhi.n	1cc58 <_lv_img_cache_open+0x120>
        if(cached_src->dec_dsc.src) {
   1cb94:	6863      	ldr	r3, [r4, #4]
   1cb96:	2b00      	cmp	r3, #0
   1cb98:	d067      	beq.n	1cc6a <_lv_img_cache_open+0x132>
            lv_img_decoder_close(&cached_src->dec_dsc);
   1cb9a:	4620      	mov	r0, r4
   1cb9c:	f00d f9a0 	bl	29ee0 <lv_img_decoder_close>
            LV_LOG_INFO("image draw: cache miss, close and reuse an entry");
   1cba0:	4b42      	ldr	r3, [pc, #264]	; (1ccac <_lv_img_cache_open+0x174>)
   1cba2:	9300      	str	r3, [sp, #0]
   1cba4:	4b3e      	ldr	r3, [pc, #248]	; (1cca0 <_lv_img_cache_open+0x168>)
   1cba6:	2277      	movs	r2, #119	; 0x77
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
   1cba8:	493c      	ldr	r1, [pc, #240]	; (1cc9c <_lv_img_cache_open+0x164>)
   1cbaa:	2001      	movs	r0, #1
   1cbac:	f000 fca8 	bl	1d500 <_lv_log_add>
        t_start                          = lv_tick_get();
   1cbb0:	f00d f9ed 	bl	29f8e <lv_tick_get>
        cached_src->dec_dsc.time_to_open = 0;
   1cbb4:	f04f 0800 	mov.w	r8, #0
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   1cbb8:	4629      	mov	r1, r5
        t_start                          = lv_tick_get();
   1cbba:	4607      	mov	r7, r0
        cached_src->dec_dsc.time_to_open = 0;
   1cbbc:	f8c4 8014 	str.w	r8, [r4, #20]
        lv_res_t open_res                = lv_img_decoder_open(&cached_src->dec_dsc, src, color);
   1cbc0:	4632      	mov	r2, r6
   1cbc2:	4620      	mov	r0, r4
   1cbc4:	f000 fb46 	bl	1d254 <lv_img_decoder_open>
        if(open_res == LV_RES_INV) {
   1cbc8:	4605      	mov	r5, r0
   1cbca:	2800      	cmp	r0, #0
   1cbcc:	d152      	bne.n	1cc74 <_lv_img_cache_open+0x13c>
            LV_LOG_WARN("Image draw cannot open the image resource");
   1cbce:	4b38      	ldr	r3, [pc, #224]	; (1ccb0 <_lv_img_cache_open+0x178>)
   1cbd0:	4932      	ldr	r1, [pc, #200]	; (1cc9c <_lv_img_cache_open+0x164>)
   1cbd2:	9300      	str	r3, [sp, #0]
   1cbd4:	2283      	movs	r2, #131	; 0x83
   1cbd6:	4b32      	ldr	r3, [pc, #200]	; (1cca0 <_lv_img_cache_open+0x168>)
   1cbd8:	2002      	movs	r0, #2
   1cbda:	f000 fc91 	bl	1d500 <_lv_log_add>
            lv_img_decoder_close(&cached_src->dec_dsc);
   1cbde:	4620      	mov	r0, r4
   1cbe0:	f00d f97e 	bl	29ee0 <lv_img_decoder_close>
            _lv_memset_00(&cached_src->dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1cbe4:	4620      	mov	r0, r4
   1cbe6:	2120      	movs	r1, #32
   1cbe8:	f00d f950 	bl	29e8c <_lv_memset_00>
            _lv_memset_00(cached_src, sizeof(lv_img_cache_entry_t));
   1cbec:	4620      	mov	r0, r4
   1cbee:	2124      	movs	r1, #36	; 0x24
   1cbf0:	f00d f94c 	bl	29e8c <_lv_memset_00>
            cached_src->life = INT32_MIN; /*Make the empty entry very "weak" to force its use  */
   1cbf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   1cbf8:	6223      	str	r3, [r4, #32]
            return NULL;
   1cbfa:	462c      	mov	r4, r5
   1cbfc:	e7ac      	b.n	1cb58 <_lv_img_cache_open+0x20>
        if(cache[i].life > INT32_MIN + LV_IMG_CACHE_AGING) {
   1cbfe:	6a1a      	ldr	r2, [r3, #32]
   1cc00:	4282      	cmp	r2, r0
            cache[i].life -= LV_IMG_CACHE_AGING;
   1cc02:	bfa4      	itt	ge
   1cc04:	f102 32ff 	addge.w	r2, r2, #4294967295	; 0xffffffff
   1cc08:	621a      	strge	r2, [r3, #32]
    for(i = 0; i < entry_cnt; i++) {
   1cc0a:	3101      	adds	r1, #1
   1cc0c:	3324      	adds	r3, #36	; 0x24
   1cc0e:	e7ac      	b.n	1cb6a <_lv_img_cache_open+0x32>
        lv_img_src_t src_type = lv_img_src_get_type(cache[i].dec_dsc.src);
   1cc10:	fa1f f488 	uxth.w	r4, r8
   1cc14:	fb0a 7404 	mla	r4, sl, r4, r7
   1cc18:	6860      	ldr	r0, [r4, #4]
   1cc1a:	f00b fe94 	bl	28946 <lv_img_src_get_type>
        if(src_type == LV_IMG_SRC_VARIABLE) {
   1cc1e:	b968      	cbnz	r0, 1cc3c <_lv_img_cache_open+0x104>
            if(cache[i].dec_dsc.src == src && cache[i].dec_dsc.color.full == color.full) match = true;
   1cc20:	6863      	ldr	r3, [r4, #4]
   1cc22:	42ab      	cmp	r3, r5
   1cc24:	d112      	bne.n	1cc4c <_lv_img_cache_open+0x114>
   1cc26:	8923      	ldrh	r3, [r4, #8]
   1cc28:	455b      	cmp	r3, fp
   1cc2a:	d10f      	bne.n	1cc4c <_lv_img_cache_open+0x114>
            cached_src->life += cached_src->dec_dsc.time_to_open * LV_IMG_CACHE_LIFE_GAIN;
   1cc2c:	6a23      	ldr	r3, [r4, #32]
   1cc2e:	6962      	ldr	r2, [r4, #20]
   1cc30:	4413      	add	r3, r2
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   1cc32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1cc36:	dc0c      	bgt.n	1cc52 <_lv_img_cache_open+0x11a>
   1cc38:	6223      	str	r3, [r4, #32]
   1cc3a:	e78d      	b.n	1cb58 <_lv_img_cache_open+0x20>
        else if(src_type == LV_IMG_SRC_FILE) {
   1cc3c:	2801      	cmp	r0, #1
   1cc3e:	d105      	bne.n	1cc4c <_lv_img_cache_open+0x114>
            if(strcmp(cache[i].dec_dsc.src, src) == 0) match = true;
   1cc40:	6860      	ldr	r0, [r4, #4]
   1cc42:	4629      	mov	r1, r5
   1cc44:	f7e3 fc18 	bl	478 <strcmp>
   1cc48:	2800      	cmp	r0, #0
   1cc4a:	d0ef      	beq.n	1cc2c <_lv_img_cache_open+0xf4>
    for(i = 0; i < entry_cnt; i++) {
   1cc4c:	f108 0801 	add.w	r8, r8, #1
   1cc50:	e794      	b.n	1cb7c <_lv_img_cache_open+0x44>
            if(cached_src->life > LV_IMG_CACHE_LIFE_LIMIT) cached_src->life = LV_IMG_CACHE_LIFE_LIMIT;
   1cc52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1cc56:	e7ef      	b.n	1cc38 <_lv_img_cache_open+0x100>
            if(cache[i].life < cached_src->life) {
   1cc58:	6a17      	ldr	r7, [r2, #32]
   1cc5a:	6a20      	ldr	r0, [r4, #32]
        for(i = 1; i < entry_cnt; i++) {
   1cc5c:	3301      	adds	r3, #1
            if(cache[i].life < cached_src->life) {
   1cc5e:	4287      	cmp	r7, r0
   1cc60:	bfb8      	it	lt
   1cc62:	4614      	movlt	r4, r2
        for(i = 1; i < entry_cnt; i++) {
   1cc64:	b29b      	uxth	r3, r3
   1cc66:	3224      	adds	r2, #36	; 0x24
   1cc68:	e792      	b.n	1cb90 <_lv_img_cache_open+0x58>
            LV_LOG_INFO("image draw: cache miss, cached to an empty entry");
   1cc6a:	4b12      	ldr	r3, [pc, #72]	; (1ccb4 <_lv_img_cache_open+0x17c>)
   1cc6c:	9300      	str	r3, [sp, #0]
   1cc6e:	227a      	movs	r2, #122	; 0x7a
   1cc70:	4b0b      	ldr	r3, [pc, #44]	; (1cca0 <_lv_img_cache_open+0x168>)
   1cc72:	e799      	b.n	1cba8 <_lv_img_cache_open+0x70>
        if(cached_src->dec_dsc.time_to_open == 0) {
   1cc74:	6963      	ldr	r3, [r4, #20]
        cached_src->life = 0;
   1cc76:	f8c4 8020 	str.w	r8, [r4, #32]
        if(cached_src->dec_dsc.time_to_open == 0) {
   1cc7a:	2b00      	cmp	r3, #0
   1cc7c:	f47f af6c 	bne.w	1cb58 <_lv_img_cache_open+0x20>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   1cc80:	4638      	mov	r0, r7
   1cc82:	f00d f991 	bl	29fa8 <lv_tick_elaps>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   1cc86:	b108      	cbz	r0, 1cc8c <_lv_img_cache_open+0x154>
            cached_src->dec_dsc.time_to_open = lv_tick_elaps(t_start);
   1cc88:	6160      	str	r0, [r4, #20]
   1cc8a:	e765      	b.n	1cb58 <_lv_img_cache_open+0x20>
        if(cached_src->dec_dsc.time_to_open == 0) cached_src->dec_dsc.time_to_open = 1;
   1cc8c:	2301      	movs	r3, #1
   1cc8e:	6163      	str	r3, [r4, #20]
   1cc90:	e762      	b.n	1cb58 <_lv_img_cache_open+0x20>
   1cc92:	bf00      	nop
   1cc94:	200080d4 	.word	0x200080d4
   1cc98:	00030385 	.word	0x00030385
   1cc9c:	00030349 	.word	0x00030349
   1cca0:	00030438 	.word	0x00030438
   1cca4:	20003f3c 	.word	0x20003f3c
   1cca8:	80000002 	.word	0x80000002
   1ccac:	000303ac 	.word	0x000303ac
   1ccb0:	0003040e 	.word	0x0003040e
   1ccb4:	000303dd 	.word	0x000303dd

0001ccb8 <lv_img_cache_invalidate_src>:
 * Invalidate an image source in the cache.
 * Useful if the image source is updated therefore it needs to be cached again.
 * @param src an image source path to a file or pointer to an `lv_img_dsc_t` variable.
 */
void lv_img_cache_invalidate_src(const void * src)
{
   1ccb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1ccbc:	4b11      	ldr	r3, [pc, #68]	; (1cd04 <lv_img_cache_invalidate_src+0x4c>)

    uint16_t i;
    for(i = 0; i < entry_cnt; i++) {
   1ccbe:	4f12      	ldr	r7, [pc, #72]	; (1cd08 <lv_img_cache_invalidate_src+0x50>)
    lv_img_cache_entry_t * cache = LV_GC_ROOT(_lv_img_cache_array);
   1ccc0:	f8d3 8000 	ldr.w	r8, [r3]
{
   1ccc4:	4606      	mov	r6, r0
    for(i = 0; i < entry_cnt; i++) {
   1ccc6:	2500      	movs	r5, #0
        if(cache[i].dec_dsc.src == src || src == NULL) {
   1ccc8:	f04f 0924 	mov.w	r9, #36	; 0x24
    for(i = 0; i < entry_cnt; i++) {
   1cccc:	883a      	ldrh	r2, [r7, #0]
   1ccce:	b2ab      	uxth	r3, r5
   1ccd0:	429a      	cmp	r2, r3
   1ccd2:	d801      	bhi.n	1ccd8 <lv_img_cache_invalidate_src+0x20>

            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
        }
    }
}
   1ccd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(cache[i].dec_dsc.src == src || src == NULL) {
   1ccd8:	b2ac      	uxth	r4, r5
   1ccda:	fb09 8404 	mla	r4, r9, r4, r8
   1ccde:	6863      	ldr	r3, [r4, #4]
   1cce0:	42b3      	cmp	r3, r6
   1cce2:	d000      	beq.n	1cce6 <lv_img_cache_invalidate_src+0x2e>
   1cce4:	b95e      	cbnz	r6, 1ccfe <lv_img_cache_invalidate_src+0x46>
            if(cache[i].dec_dsc.src != NULL) {
   1cce6:	b113      	cbz	r3, 1ccee <lv_img_cache_invalidate_src+0x36>
                lv_img_decoder_close(&cache[i].dec_dsc);
   1cce8:	4620      	mov	r0, r4
   1ccea:	f00d f8f9 	bl	29ee0 <lv_img_decoder_close>
            _lv_memset_00(&cache[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1ccee:	2120      	movs	r1, #32
   1ccf0:	4620      	mov	r0, r4
   1ccf2:	f00d f8cb 	bl	29e8c <_lv_memset_00>
            _lv_memset_00(&cache[i], sizeof(lv_img_cache_entry_t));
   1ccf6:	2124      	movs	r1, #36	; 0x24
   1ccf8:	4620      	mov	r0, r4
   1ccfa:	f00d f8c7 	bl	29e8c <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
   1ccfe:	3501      	adds	r5, #1
   1cd00:	e7e4      	b.n	1cccc <lv_img_cache_invalidate_src+0x14>
   1cd02:	bf00      	nop
   1cd04:	20003f3c 	.word	0x20003f3c
   1cd08:	200080d4 	.word	0x200080d4

0001cd0c <lv_img_cache_set_size>:
{
   1cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1cd10:	4c13      	ldr	r4, [pc, #76]	; (1cd60 <lv_img_cache_set_size+0x54>)
   1cd12:	6823      	ldr	r3, [r4, #0]
{
   1cd14:	4605      	mov	r5, r0
    if(LV_GC_ROOT(_lv_img_cache_array) != NULL) {
   1cd16:	b12b      	cbz	r3, 1cd24 <lv_img_cache_set_size+0x18>
        lv_img_cache_invalidate_src(NULL);
   1cd18:	2000      	movs	r0, #0
   1cd1a:	f7ff ffcd 	bl	1ccb8 <lv_img_cache_invalidate_src>
        lv_mem_free(LV_GC_ROOT(_lv_img_cache_array));
   1cd1e:	6820      	ldr	r0, [r4, #0]
   1cd20:	f000 fc3e 	bl	1d5a0 <lv_mem_free>
    LV_GC_ROOT(_lv_img_cache_array) = lv_mem_alloc(sizeof(lv_img_cache_entry_t) * new_entry_cnt);
   1cd24:	2724      	movs	r7, #36	; 0x24
   1cd26:	fb07 f005 	mul.w	r0, r7, r5
   1cd2a:	f000 fc11 	bl	1d550 <lv_mem_alloc>
   1cd2e:	4b0d      	ldr	r3, [pc, #52]	; (1cd64 <lv_img_cache_set_size+0x58>)
   1cd30:	6020      	str	r0, [r4, #0]
    if(LV_GC_ROOT(_lv_img_cache_array) == NULL) {
   1cd32:	b910      	cbnz	r0, 1cd3a <lv_img_cache_set_size+0x2e>
        entry_cnt = 0;
   1cd34:	8018      	strh	r0, [r3, #0]
}
   1cd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    entry_cnt = new_entry_cnt;
   1cd3a:	801d      	strh	r5, [r3, #0]
    for(i = 0; i < entry_cnt; i++) {
   1cd3c:	2600      	movs	r6, #0
   1cd3e:	42b5      	cmp	r5, r6
   1cd40:	d0f9      	beq.n	1cd36 <lv_img_cache_set_size+0x2a>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i].dec_dsc, sizeof(lv_img_decoder_dsc_t));
   1cd42:	6820      	ldr	r0, [r4, #0]
   1cd44:	fb07 f806 	mul.w	r8, r7, r6
   1cd48:	2120      	movs	r1, #32
   1cd4a:	4440      	add	r0, r8
   1cd4c:	f00d f89e 	bl	29e8c <_lv_memset_00>
        _lv_memset_00(&LV_GC_ROOT(_lv_img_cache_array)[i], sizeof(lv_img_cache_entry_t));
   1cd50:	6820      	ldr	r0, [r4, #0]
   1cd52:	2124      	movs	r1, #36	; 0x24
   1cd54:	4440      	add	r0, r8
   1cd56:	f00d f899 	bl	29e8c <_lv_memset_00>
    for(i = 0; i < entry_cnt; i++) {
   1cd5a:	3601      	adds	r6, #1
   1cd5c:	e7ef      	b.n	1cd3e <lv_img_cache_set_size+0x32>
   1cd5e:	bf00      	nop
   1cd60:	20003f3c 	.word	0x20003f3c
   1cd64:	200080d4 	.word	0x200080d4

0001cd68 <lv_img_decoder_built_in_info>:
 * @param src the image source: pointer to an `lv_img_dsc_t` variable, a file path or a symbol
 * @param header store the image data here
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_info(lv_img_decoder_t * decoder, const void * src, lv_img_header_t * header)
{
   1cd68:	b537      	push	{r0, r1, r2, r4, r5, lr}
    (void)decoder; /*Unused*/

    lv_img_src_t src_type = lv_img_src_get_type(src);
   1cd6a:	4608      	mov	r0, r1
{
   1cd6c:	460d      	mov	r5, r1
   1cd6e:	4614      	mov	r4, r2
    lv_img_src_t src_type = lv_img_src_get_type(src);
   1cd70:	f00b fde9 	bl	28946 <lv_img_src_get_type>
    if(src_type == LV_IMG_SRC_VARIABLE) {
   1cd74:	b9c8      	cbnz	r0, 1cdaa <lv_img_decoder_built_in_info+0x42>
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1cd76:	782b      	ldrb	r3, [r5, #0]
   1cd78:	f3c3 0304 	ubfx	r3, r3, #0, #5
        if(cf < CF_BUILT_IN_FIRST || cf > CF_BUILT_IN_LAST) return LV_RES_INV;
   1cd7c:	3b04      	subs	r3, #4
   1cd7e:	b2db      	uxtb	r3, r3
   1cd80:	2b0a      	cmp	r3, #10
   1cd82:	d810      	bhi.n	1cda6 <lv_img_decoder_built_in_info+0x3e>

        header->w  = ((lv_img_dsc_t *)src)->header.w;
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1cd84:	886b      	ldrh	r3, [r5, #2]
   1cd86:	8862      	ldrh	r2, [r4, #2]
        lv_img_cf_t cf = ((lv_img_dsc_t *)src)->header.cf;
   1cd88:	6829      	ldr	r1, [r5, #0]
        header->h  = ((lv_img_dsc_t *)src)->header.h;
   1cd8a:	095b      	lsrs	r3, r3, #5
   1cd8c:	f363 124f 	bfi	r2, r3, #5, #11
   1cd90:	8062      	strh	r2, [r4, #2]
        header->cf = ((lv_img_dsc_t *)src)->header.cf;
   1cd92:	6823      	ldr	r3, [r4, #0]
   1cd94:	4a0e      	ldr	r2, [pc, #56]	; (1cdd0 <lv_img_decoder_built_in_info+0x68>)
   1cd96:	f023 131f 	bic.w	r3, r3, #2031647	; 0x1f001f
   1cd9a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
   1cd9e:	400a      	ands	r2, r1
         * function*/
        header->w = 1;
        header->h = 1;
        /* Symbols always have transparent parts. Important because of cover check in the design
         * function. The actual value doesn't matter because lv_draw_label will draw it*/
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   1cda0:	4313      	orrs	r3, r2
   1cda2:	6023      	str	r3, [r4, #0]
    }
    else {
        LV_LOG_WARN("Image get info found unknown src type");
        return LV_RES_INV;
    }
    return LV_RES_OK;
   1cda4:	2001      	movs	r0, #1
}
   1cda6:	b003      	add	sp, #12
   1cda8:	bd30      	pop	{r4, r5, pc}
    else if(src_type == LV_IMG_SRC_SYMBOL) {
   1cdaa:	2802      	cmp	r0, #2
   1cdac:	d104      	bne.n	1cdb8 <lv_img_decoder_built_in_info+0x50>
        header->cf = LV_IMG_CF_ALPHA_1BIT;
   1cdae:	6823      	ldr	r3, [r4, #0]
   1cdb0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
   1cdb4:	4b07      	ldr	r3, [pc, #28]	; (1cdd4 <lv_img_decoder_built_in_info+0x6c>)
   1cdb6:	e7f3      	b.n	1cda0 <lv_img_decoder_built_in_info+0x38>
        LV_LOG_WARN("Image get info found unknown src type");
   1cdb8:	4b07      	ldr	r3, [pc, #28]	; (1cdd8 <lv_img_decoder_built_in_info+0x70>)
   1cdba:	9300      	str	r3, [sp, #0]
   1cdbc:	2002      	movs	r0, #2
   1cdbe:	4b07      	ldr	r3, [pc, #28]	; (1cddc <lv_img_decoder_built_in_info+0x74>)
   1cdc0:	4907      	ldr	r1, [pc, #28]	; (1cde0 <lv_img_decoder_built_in_info+0x78>)
   1cdc2:	f240 1233 	movw	r2, #307	; 0x133
   1cdc6:	f000 fb9b 	bl	1d500 <_lv_log_add>
   1cdca:	2000      	movs	r0, #0
   1cdcc:	e7eb      	b.n	1cda6 <lv_img_decoder_built_in_info+0x3e>
   1cdce:	bf00      	nop
   1cdd0:	001ffc1f 	.word	0x001ffc1f
   1cdd4:	0020040b 	.word	0x0020040b
   1cdd8:	00030489 	.word	0x00030489
   1cddc:	000306a3 	.word	0x000306a3
   1cde0:	0003044b 	.word	0x0003044b

0001cde4 <lv_img_decoder_built_in_open>:
 * @param decoder the decoder where this function belongs
 * @param dsc pointer to decoder descriptor. `src`, `style` are already initialized in it.
 * @return LV_RES_OK: the info is successfully stored in `header`; LV_RES_INV: unknown format or other error.
 */
lv_res_t lv_img_decoder_built_in_open(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc)
{
   1cde4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    /*Open the file if it's a file*/
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1cde8:	7a8c      	ldrb	r4, [r1, #10]
   1cdea:	2c01      	cmp	r4, #1
{
   1cdec:	4606      	mov	r6, r0
   1cdee:	460d      	mov	r5, r1
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1cdf0:	d109      	bne.n	1ce06 <lv_img_decoder_built_in_open+0x22>
        }

        _lv_memcpy_small(user_data->f, &f, sizeof(f));

#else
        LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   1cdf2:	4b49      	ldr	r3, [pc, #292]	; (1cf18 <lv_img_decoder_built_in_open+0x134>)
   1cdf4:	9300      	str	r3, [sp, #0]
   1cdf6:	4b49      	ldr	r3, [pc, #292]	; (1cf1c <lv_img_decoder_built_in_open+0x138>)
   1cdf8:	f44f 72b3 	mov.w	r2, #358	; 0x166
    /*Unknown format. Can't decode it.*/
    else {
        /*Free the potentially allocated memories*/
        lv_img_decoder_built_in_close(decoder, dsc);

        LV_LOG_WARN("Image decoder open: unknown color format")
   1cdfc:	4948      	ldr	r1, [pc, #288]	; (1cf20 <lv_img_decoder_built_in_open+0x13c>)
   1cdfe:	2002      	movs	r0, #2
   1ce00:	f000 fb7e 	bl	1d500 <_lv_log_add>
   1ce04:	e050      	b.n	1cea8 <lv_img_decoder_built_in_open+0xc4>
    else if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1ce06:	b914      	cbnz	r4, 1ce0e <lv_img_decoder_built_in_open+0x2a>
        if(((lv_img_dsc_t *)dsc->src)->data == NULL) {
   1ce08:	684a      	ldr	r2, [r1, #4]
   1ce0a:	6892      	ldr	r2, [r2, #8]
   1ce0c:	b15a      	cbz	r2, 1ce26 <lv_img_decoder_built_in_open+0x42>
    lv_img_cf_t cf = dsc->header.cf;
   1ce0e:	7b2a      	ldrb	r2, [r5, #12]
   1ce10:	f002 001f 	and.w	r0, r2, #31
    if(cf == LV_IMG_CF_TRUE_COLOR || cf == LV_IMG_CF_TRUE_COLOR_ALPHA || cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   1ce14:	1f02      	subs	r2, r0, #4
   1ce16:	2a02      	cmp	r2, #2
   1ce18:	d809      	bhi.n	1ce2e <lv_img_decoder_built_in_open+0x4a>
        if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1ce1a:	2c00      	cmp	r4, #0
   1ce1c:	d156      	bne.n	1cecc <lv_img_decoder_built_in_open+0xe8>
            dsc->img_data = ((lv_img_dsc_t *)dsc->src)->data;
   1ce1e:	686b      	ldr	r3, [r5, #4]
   1ce20:	689b      	ldr	r3, [r3, #8]
            dsc->img_data = NULL;
   1ce22:	612b      	str	r3, [r5, #16]
            return LV_RES_OK;
   1ce24:	2401      	movs	r4, #1
        return LV_RES_INV;
    }
}
   1ce26:	4620      	mov	r0, r4
   1ce28:	b003      	add	sp, #12
   1ce2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if(cf == LV_IMG_CF_INDEXED_1BIT || cf == LV_IMG_CF_INDEXED_2BIT || cf == LV_IMG_CF_INDEXED_4BIT ||
   1ce2e:	1fc3      	subs	r3, r0, #7
   1ce30:	2b03      	cmp	r3, #3
   1ce32:	d863      	bhi.n	1cefc <lv_img_decoder_built_in_open+0x118>
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   1ce34:	f7fe fbb6 	bl	1b5a4 <lv_img_cf_get_px_size>
        if(dsc->user_data == NULL) {
   1ce38:	69eb      	ldr	r3, [r5, #28]
        uint32_t palette_size = 1 << px_size;
   1ce3a:	2701      	movs	r7, #1
        uint8_t px_size       = lv_img_cf_get_px_size(cf);
   1ce3c:	4680      	mov	r8, r0
        uint32_t palette_size = 1 << px_size;
   1ce3e:	4087      	lsls	r7, r0
        if(dsc->user_data == NULL) {
   1ce40:	b9b3      	cbnz	r3, 1ce70 <lv_img_decoder_built_in_open+0x8c>
            dsc->user_data = lv_mem_alloc(sizeof(lv_img_decoder_built_in_data_t));
   1ce42:	2008      	movs	r0, #8
   1ce44:	f000 fb84 	bl	1d550 <lv_mem_alloc>
   1ce48:	4604      	mov	r4, r0
   1ce4a:	61e8      	str	r0, [r5, #28]
            if(dsc->user_data == NULL) {
   1ce4c:	b968      	cbnz	r0, 1ce6a <lv_img_decoder_built_in_open+0x86>
                LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   1ce4e:	4b35      	ldr	r3, [pc, #212]	; (1cf24 <lv_img_decoder_built_in_open+0x140>)
   1ce50:	9300      	str	r3, [sp, #0]
   1ce52:	4933      	ldr	r1, [pc, #204]	; (1cf20 <lv_img_decoder_built_in_open+0x13c>)
   1ce54:	4b31      	ldr	r3, [pc, #196]	; (1cf1c <lv_img_decoder_built_in_open+0x138>)
   1ce56:	f240 128d 	movw	r2, #397	; 0x18d
   1ce5a:	2003      	movs	r0, #3
   1ce5c:	f000 fb50 	bl	1d500 <_lv_log_add>
                lv_img_decoder_built_in_close(decoder, dsc);
   1ce60:	4629      	mov	r1, r5
   1ce62:	4630      	mov	r0, r6
   1ce64:	f00d f816 	bl	29e94 <lv_img_decoder_built_in_close>
                return LV_RES_INV;
   1ce68:	e7dd      	b.n	1ce26 <lv_img_decoder_built_in_open+0x42>
            _lv_memset_00(dsc->user_data, sizeof(lv_img_decoder_built_in_data_t));
   1ce6a:	2108      	movs	r1, #8
   1ce6c:	f00d f824 	bl	29eb8 <_lv_memset_00>
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1ce70:	f04f 0902 	mov.w	r9, #2
   1ce74:	fa09 f008 	lsl.w	r0, r9, r8
        lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1ce78:	69ec      	ldr	r4, [r5, #28]
        user_data->palette                         = lv_mem_alloc(palette_size * sizeof(lv_color_t));
   1ce7a:	f000 fb69 	bl	1d550 <lv_mem_alloc>
   1ce7e:	6020      	str	r0, [r4, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1ce80:	4638      	mov	r0, r7
   1ce82:	f000 fb65 	bl	1d550 <lv_mem_alloc>
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1ce86:	6823      	ldr	r3, [r4, #0]
        user_data->opa                             = lv_mem_alloc(palette_size * sizeof(lv_opa_t));
   1ce88:	6060      	str	r0, [r4, #4]
        if(user_data->palette == NULL || user_data->opa == NULL) {
   1ce8a:	b103      	cbz	r3, 1ce8e <lv_img_decoder_built_in_open+0xaa>
   1ce8c:	b970      	cbnz	r0, 1ceac <lv_img_decoder_built_in_open+0xc8>
            LV_LOG_ERROR("img_decoder_built_in_open: out of memory");
   1ce8e:	4b25      	ldr	r3, [pc, #148]	; (1cf24 <lv_img_decoder_built_in_open+0x140>)
   1ce90:	4923      	ldr	r1, [pc, #140]	; (1cf20 <lv_img_decoder_built_in_open+0x13c>)
   1ce92:	9300      	str	r3, [sp, #0]
   1ce94:	2003      	movs	r0, #3
   1ce96:	4b21      	ldr	r3, [pc, #132]	; (1cf1c <lv_img_decoder_built_in_open+0x138>)
   1ce98:	f44f 72cd 	mov.w	r2, #410	; 0x19a
   1ce9c:	f000 fb30 	bl	1d500 <_lv_log_add>
            lv_img_decoder_built_in_close(decoder, dsc);
   1cea0:	4629      	mov	r1, r5
   1cea2:	4630      	mov	r0, r6
   1cea4:	f00c fff6 	bl	29e94 <lv_img_decoder_built_in_close>
        return LV_RES_INV;
   1cea8:	2400      	movs	r4, #0
   1ceaa:	e7bc      	b.n	1ce26 <lv_img_decoder_built_in_open+0x42>
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1ceac:	7aab      	ldrb	r3, [r5, #10]
   1ceae:	2b01      	cmp	r3, #1
   1ceb0:	d105      	bne.n	1cebe <lv_img_decoder_built_in_open+0xda>
            LV_LOG_WARN("Image built-in decoder can read the palette because LV_USE_FILESYSTEM = 0");
   1ceb2:	4b1d      	ldr	r3, [pc, #116]	; (1cf28 <lv_img_decoder_built_in_open+0x144>)
   1ceb4:	9300      	str	r3, [sp, #0]
   1ceb6:	f240 12ab 	movw	r2, #427	; 0x1ab
   1ceba:	4b18      	ldr	r3, [pc, #96]	; (1cf1c <lv_img_decoder_built_in_open+0x138>)
   1cebc:	e79e      	b.n	1cdfc <lv_img_decoder_built_in_open+0x18>
            lv_color32_t * palette_p = (lv_color32_t *)((lv_img_dsc_t *)dsc->src)->data;
   1cebe:	686b      	ldr	r3, [r5, #4]
   1cec0:	689a      	ldr	r2, [r3, #8]
            for(i = 0; i < palette_size; i++) {
   1cec2:	2000      	movs	r0, #0
   1cec4:	42b8      	cmp	r0, r7
   1cec6:	f102 0204 	add.w	r2, r2, #4
   1ceca:	d101      	bne.n	1ced0 <lv_img_decoder_built_in_open+0xec>
            dsc->img_data = NULL;
   1cecc:	2300      	movs	r3, #0
   1cece:	e7a8      	b.n	1ce22 <lv_img_decoder_built_in_open+0x3e>
#define LV_COLOR_MAKE(r8, g8, b8) (_LV_COLOR_MAKE_TYPE_HELPER{{b8, g8, r8, 0xff}}) /*Fix 0xff alpha*/
#endif

static inline lv_color_t lv_color_make(uint8_t r, uint8_t g, uint8_t b)
{
    return LV_COLOR_MAKE(r, g, b);
   1ced0:	f812 3c03 	ldrb.w	r3, [r2, #-3]
                user_data->palette[i] = lv_color_make(palette_p[i].ch.red, palette_p[i].ch.green, palette_p[i].ch.blue);
   1ced4:	6821      	ldr	r1, [r4, #0]
   1ced6:	089e      	lsrs	r6, r3, #2
   1ced8:	f812 3c04 	ldrb.w	r3, [r2, #-4]
   1cedc:	08db      	lsrs	r3, r3, #3
   1cede:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
   1cee2:	f812 6c02 	ldrb.w	r6, [r2, #-2]
   1cee6:	08f6      	lsrs	r6, r6, #3
   1cee8:	ea43 23c6 	orr.w	r3, r3, r6, lsl #11
   1ceec:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
                user_data->opa[i]     = palette_p[i].ch.alpha;
   1cef0:	6863      	ldr	r3, [r4, #4]
   1cef2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   1cef6:	5419      	strb	r1, [r3, r0]
            for(i = 0; i < palette_size; i++) {
   1cef8:	3001      	adds	r0, #1
   1cefa:	e7e3      	b.n	1cec4 <lv_img_decoder_built_in_open+0xe0>
    else if(cf == LV_IMG_CF_ALPHA_1BIT || cf == LV_IMG_CF_ALPHA_2BIT || cf == LV_IMG_CF_ALPHA_4BIT ||
   1cefc:	f1a0 030b 	sub.w	r3, r0, #11
   1cf00:	2b03      	cmp	r3, #3
   1cf02:	d9e3      	bls.n	1cecc <lv_img_decoder_built_in_open+0xe8>
        lv_img_decoder_built_in_close(decoder, dsc);
   1cf04:	4629      	mov	r1, r5
   1cf06:	4630      	mov	r0, r6
   1cf08:	f00c ffc4 	bl	29e94 <lv_img_decoder_built_in_close>
        LV_LOG_WARN("Image decoder open: unknown color format")
   1cf0c:	4b07      	ldr	r3, [pc, #28]	; (1cf2c <lv_img_decoder_built_in_open+0x148>)
   1cf0e:	9300      	str	r3, [sp, #0]
   1cf10:	f44f 72e9 	mov.w	r2, #466	; 0x1d2
   1cf14:	4b01      	ldr	r3, [pc, #4]	; (1cf1c <lv_img_decoder_built_in_open+0x138>)
   1cf16:	e771      	b.n	1cdfc <lv_img_decoder_built_in_open+0x18>
   1cf18:	000304af 	.word	0x000304af
   1cf1c:	000306c0 	.word	0x000306c0
   1cf20:	0003044b 	.word	0x0003044b
   1cf24:	000304f5 	.word	0x000304f5
   1cf28:	0003051e 	.word	0x0003051e
   1cf2c:	00030568 	.word	0x00030568

0001cf30 <lv_img_decoder_built_in_read_line>:
 * @param buf a buffer to store the decoded pixels
 * @return LV_RES_OK: ok; LV_RES_INV: failed
 */
lv_res_t lv_img_decoder_built_in_read_line(lv_img_decoder_t * decoder, lv_img_decoder_dsc_t * dsc, lv_coord_t x,
                                           lv_coord_t y, lv_coord_t len, uint8_t * buf)
{
   1cf30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    (void)decoder; /*Unused*/

    lv_res_t res = LV_RES_INV;

    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cf34:	7b08      	ldrb	r0, [r1, #12]
{
   1cf36:	b089      	sub	sp, #36	; 0x24
   1cf38:	461e      	mov	r6, r3
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cf3a:	f000 031e 	and.w	r3, r0, #30
   1cf3e:	2b04      	cmp	r3, #4
{
   1cf40:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	; 0x40
   1cf44:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1cf46:	460d      	mov	r5, r1
   1cf48:	4614      	mov	r4, r2
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cf4a:	d003      	beq.n	1cf54 <lv_img_decoder_built_in_read_line+0x24>
       dsc->header.cf == LV_IMG_CF_TRUE_COLOR_CHROMA_KEYED) {
   1cf4c:	f000 031f 	and.w	r3, r0, #31
    if(dsc->header.cf == LV_IMG_CF_TRUE_COLOR || dsc->header.cf == LV_IMG_CF_TRUE_COLOR_ALPHA ||
   1cf50:	2b06      	cmp	r3, #6
   1cf52:	d10d      	bne.n	1cf70 <lv_img_decoder_built_in_read_line+0x40>
        /* For TRUE_COLOR images read line required only for files.
         * For variables the image data was returned in `open`*/
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   1cf54:	7aab      	ldrb	r3, [r5, #10]
   1cf56:	2b01      	cmp	r3, #1
   1cf58:	d108      	bne.n	1cf6c <lv_img_decoder_built_in_read_line+0x3c>
    LV_UNUSED(dsc);
    LV_UNUSED(x);
    LV_UNUSED(y);
    LV_UNUSED(len);
    LV_UNUSED(buf);
    LV_LOG_WARN("Image built-in decoder cannot read file because LV_USE_FILESYSTEM = 0");
   1cf5a:	4ba2      	ldr	r3, [pc, #648]	; (1d1e4 <lv_img_decoder_built_in_read_line+0x2b4>)
   1cf5c:	9300      	str	r3, [sp, #0]
   1cf5e:	4ba2      	ldr	r3, [pc, #648]	; (1d1e8 <lv_img_decoder_built_in_read_line+0x2b8>)
   1cf60:	f240 223f 	movw	r2, #575	; 0x23f
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1cf64:	49a1      	ldr	r1, [pc, #644]	; (1d1ec <lv_img_decoder_built_in_read_line+0x2bc>)
   1cf66:	2002      	movs	r0, #2
   1cf68:	f000 faca 	bl	1d500 <_lv_log_add>
    lv_res_t res = LV_RES_INV;
   1cf6c:	2000      	movs	r0, #0
   1cf6e:	e060      	b.n	1d032 <lv_img_decoder_built_in_read_line+0x102>
    else if(dsc->header.cf == LV_IMG_CF_ALPHA_1BIT || dsc->header.cf == LV_IMG_CF_ALPHA_2BIT ||
   1cf70:	f1a3 020b 	sub.w	r2, r3, #11
   1cf74:	2a03      	cmp	r2, #3
   1cf76:	f200 80ad 	bhi.w	1d0d4 <lv_img_decoder_built_in_read_line+0x1a4>
static lv_res_t lv_img_decoder_built_in_line_alpha(lv_img_decoder_dsc_t * dsc, lv_coord_t x, lv_coord_t y,
                                                   lv_coord_t len, uint8_t * buf)
{

#if LV_IMG_CF_ALPHA
    const lv_opa_t alpha1_opa_table[2]  = {0, 255};          /*Opacity mapping with bpp = 1 (Just for compatibility)*/
   1cf7a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
   1cf7e:	f8ad 3008 	strh.w	r3, [sp, #8]
    const lv_opa_t alpha2_opa_table[4]  = {0, 85, 170, 255}; /*Opacity mapping with bpp = 2*/
   1cf82:	f5a3 03ad 	sub.w	r3, r3, #5668864	; 0x568000
   1cf86:	f5a3 5328 	sub.w	r3, r3, #10752	; 0x2a00
   1cf8a:	9303      	str	r3, [sp, #12]
    const lv_opa_t alpha4_opa_table[16] = {0,  17, 34,  51,  /*Opacity mapping with bpp = 4*/
   1cf8c:	4b98      	ldr	r3, [pc, #608]	; (1d1f0 <lv_img_decoder_built_in_read_line+0x2c0>)
   1cf8e:	aa04      	add	r2, sp, #16
   1cf90:	f103 0e10 	add.w	lr, r3, #16
   1cf94:	4691      	mov	r9, r2
   1cf96:	6818      	ldr	r0, [r3, #0]
   1cf98:	6859      	ldr	r1, [r3, #4]
   1cf9a:	4694      	mov	ip, r2
   1cf9c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   1cfa0:	3308      	adds	r3, #8
   1cfa2:	4573      	cmp	r3, lr
   1cfa4:	4662      	mov	r2, ip
   1cfa6:	d1f6      	bne.n	1cf96 <lv_img_decoder_built_in_read_line+0x66>
                                           68, 85, 102, 119, 136, 153, 170, 187, 204, 221, 238, 255
                                          };

    /*Simply fill the buffer with the color. Later only the alpha value will be modified.*/
    lv_color_t bg_color = dsc->color;
   1cfa8:	8929      	ldrh	r1, [r5, #8]
    lv_coord_t i;
    for(i = 0; i < len; i++) {
   1cfaa:	463b      	mov	r3, r7
#if LV_COLOR_DEPTH == 8 || LV_COLOR_DEPTH == 1
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full;
#elif LV_COLOR_DEPTH == 16
        /*Because of Alpha byte 16 bit color can start on odd address which can cause crash*/
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
   1cfac:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    for(i = 0; i < len; i++) {
   1cfb0:	2200      	movs	r2, #0
   1cfb2:	b210      	sxth	r0, r2
   1cfb4:	4580      	cmp	r8, r0
   1cfb6:	f103 0303 	add.w	r3, r3, #3
   1cfba:	dc16      	bgt.n	1cfea <lv_img_decoder_built_in_read_line+0xba>
#error "Invalid LV_COLOR_DEPTH. Check it in lv_conf.h"
#endif
    }

    const lv_opa_t * opa_table = NULL;
    uint8_t px_size            = lv_img_cf_get_px_size(dsc->header.cf);
   1cfbc:	7b28      	ldrb	r0, [r5, #12]
   1cfbe:	f000 001f 	and.w	r0, r0, #31
   1cfc2:	f7fe faef 	bl	1b5a4 <lv_img_cf_get_px_size>
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/

    lv_coord_t w = 0;
    uint32_t ofs = 0;
    int8_t pos   = 0;
    switch(dsc->header.cf) {
   1cfc6:	7b2b      	ldrb	r3, [r5, #12]
    uint16_t mask              = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1cfc8:	f04f 0c01 	mov.w	ip, #1
   1cfcc:	fa0c fc00 	lsl.w	ip, ip, r0
   1cfd0:	f003 031f 	and.w	r3, r3, #31
   1cfd4:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   1cfd8:	3b0b      	subs	r3, #11
   1cfda:	fa1f fc8c 	uxth.w	ip, ip
    switch(dsc->header.cf) {
   1cfde:	2b03      	cmp	r3, #3
   1cfe0:	d854      	bhi.n	1d08c <lv_img_decoder_built_in_read_line+0x15c>
   1cfe2:	e8df f003 	tbb	[pc, r3]
   1cfe6:	2908      	.short	0x2908
   1cfe8:	4b3b      	.short	0x4b3b
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = bg_color.full & 0xFF;
   1cfea:	f803 1c03 	strb.w	r1, [r3, #-3]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (bg_color.full >> 8) & 0xFF;
   1cfee:	f803 cc02 	strb.w	ip, [r3, #-2]
    for(i = 0; i < len; i++) {
   1cff2:	3201      	adds	r2, #1
   1cff4:	e7dd      	b.n	1cfb2 <lv_img_decoder_built_in_read_line+0x82>
        case LV_IMG_CF_ALPHA_1BIT:
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1cff6:	68ea      	ldr	r2, [r5, #12]
   1cff8:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   1cffc:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
   1d000:	bf18      	it	ne
   1d002:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   1d004:	10e2      	asrs	r2, r4, #3
            pos       = 7 - (x & 0x7);
   1d006:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 3); /*First pixel*/
   1d008:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 7 - (x & 0x7);
   1d00c:	f004 0407 	and.w	r4, r4, #7
            opa_table = alpha1_opa_table;
   1d010:	ae02      	add	r6, sp, #8
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
    uint8_t * fs_buf = _lv_mem_buf_get(w);
#endif

    const uint8_t * data_tmp = NULL;
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1d012:	7aa9      	ldrb	r1, [r5, #10]
   1d014:	2900      	cmp	r1, #0
   1d016:	d13c      	bne.n	1d092 <lv_img_decoder_built_in_read_line+0x162>
        const lv_img_dsc_t * img_dsc = dsc->src;

        data_tmp = img_dsc->data + ofs;
   1d018:	686a      	ldr	r2, [r5, #4]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;

        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];

        pos -= px_size;
   1d01a:	b240      	sxtb	r0, r0
        data_tmp = img_dsc->data + ofs;
   1d01c:	6892      	ldr	r2, [r2, #8]
        if(pos < 0) {
            pos = 8 - px_size;
   1d01e:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp = img_dsc->data + ofs;
   1d022:	4413      	add	r3, r2
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d024:	3702      	adds	r7, #2
            pos = 8 - px_size;
   1d026:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1d02a:	b20a      	sxth	r2, r1
   1d02c:	4590      	cmp	r8, r2
   1d02e:	dc36      	bgt.n	1d09e <lv_img_decoder_built_in_read_line+0x16e>
        }
    }
#if LV_USE_FILESYSTEM
    _lv_mem_buf_release(fs_buf);
#endif
    return LV_RES_OK;
   1d030:	2001      	movs	r0, #1
}
   1d032:	b009      	add	sp, #36	; 0x24
   1d034:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   1d038:	68ea      	ldr	r2, [r5, #12]
   1d03a:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   1d03e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
            ofs += w * y + (x >> 2); /*First pixel*/
   1d042:	ea4f 02a4 	mov.w	r2, r4, asr #2
            pos       = 6 - ((x & 0x3) * 2);
   1d046:	ea6f 0404 	mvn.w	r4, r4
            if(dsc->header.w & 0x3) w++;
   1d04a:	bf18      	it	ne
   1d04c:	3301      	addne	r3, #1
            pos       = 6 - ((x & 0x3) * 2);
   1d04e:	f004 0403 	and.w	r4, r4, #3
            ofs += w * y + (x >> 2); /*First pixel*/
   1d052:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 6 - ((x & 0x3) * 2);
   1d056:	0064      	lsls	r4, r4, #1
            opa_table = alpha2_opa_table;
   1d058:	ae03      	add	r6, sp, #12
            break;
   1d05a:	e7da      	b.n	1d012 <lv_img_decoder_built_in_read_line+0xe2>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1d05c:	68ea      	ldr	r2, [r5, #12]
   1d05e:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   1d062:	0551      	lsls	r1, r2, #21
   1d064:	bf48      	it	mi
   1d066:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d068:	1062      	asrs	r2, r4, #1
            pos       = 4 - ((x & 0x1) * 4);
   1d06a:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d06e:	fb03 2306 	mla	r3, r3, r6, r2
            pos       = 4 - ((x & 0x1) * 4);
   1d072:	bf0c      	ite	eq
   1d074:	2404      	moveq	r4, #4
   1d076:	2400      	movne	r4, #0
   1d078:	464e      	mov	r6, r9
   1d07a:	e7ca      	b.n	1d012 <lv_img_decoder_built_in_read_line+0xe2>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1d07c:	68eb      	ldr	r3, [r5, #12]
   1d07e:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1d082:	fb16 4303 	smlabb	r3, r6, r3, r4
            pos = 0;
   1d086:	2400      	movs	r4, #0
    switch(dsc->header.cf) {
   1d088:	4626      	mov	r6, r4
   1d08a:	e7c2      	b.n	1d012 <lv_img_decoder_built_in_read_line+0xe2>
   1d08c:	2400      	movs	r4, #0
   1d08e:	4623      	mov	r3, r4
   1d090:	e7fa      	b.n	1d088 <lv_img_decoder_built_in_read_line+0x158>
        LV_LOG_WARN("Image built-in alpha line reader can't read file because LV_USE_FILESYSTEM = 0");
   1d092:	4b58      	ldr	r3, [pc, #352]	; (1d1f4 <lv_img_decoder_built_in_read_line+0x2c4>)
   1d094:	9300      	str	r3, [sp, #0]
   1d096:	f240 2295 	movw	r2, #661	; 0x295
   1d09a:	4b57      	ldr	r3, [pc, #348]	; (1d1f8 <lv_img_decoder_built_in_read_line+0x2c8>)
   1d09c:	e762      	b.n	1cf64 <lv_img_decoder_built_in_read_line+0x34>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1d09e:	781a      	ldrb	r2, [r3, #0]
   1d0a0:	fa0c f904 	lsl.w	r9, ip, r4
   1d0a4:	ea02 0209 	and.w	r2, r2, r9
            dsc->header.cf == LV_IMG_CF_ALPHA_8BIT ? val_act : opa_table[val_act];
   1d0a8:	f895 900c 	ldrb.w	r9, [r5, #12]
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1d0ac:	4122      	asrs	r2, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d0ae:	f009 091f 	and.w	r9, r9, #31
   1d0b2:	b2d2      	uxtb	r2, r2
        pos -= px_size;
   1d0b4:	1a24      	subs	r4, r4, r0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d0b6:	f1b9 0f0e 	cmp.w	r9, #14
        pos -= px_size;
   1d0ba:	b264      	sxtb	r4, r4
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] =
   1d0bc:	eb01 0941 	add.w	r9, r1, r1, lsl #1
   1d0c0:	bf18      	it	ne
   1d0c2:	5cb2      	ldrbne	r2, [r6, r2]
   1d0c4:	f807 2009 	strb.w	r2, [r7, r9]
        if(pos < 0) {
   1d0c8:	2c00      	cmp	r4, #0
            pos = 8 - px_size;
   1d0ca:	bfbc      	itt	lt
   1d0cc:	4674      	movlt	r4, lr
            data_tmp++;
   1d0ce:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   1d0d0:	3101      	adds	r1, #1
   1d0d2:	e7aa      	b.n	1d02a <lv_img_decoder_built_in_read_line+0xfa>
    else if(dsc->header.cf == LV_IMG_CF_INDEXED_1BIT || dsc->header.cf == LV_IMG_CF_INDEXED_2BIT ||
   1d0d4:	3b07      	subs	r3, #7
   1d0d6:	2b03      	cmp	r3, #3
   1d0d8:	d87e      	bhi.n	1d1d8 <lv_img_decoder_built_in_read_line+0x2a8>
    uint8_t px_size = lv_img_cf_get_px_size(dsc->header.cf);
   1d0da:	f000 001f 	and.w	r0, r0, #31
   1d0de:	f7fe fa61 	bl	1b5a4 <lv_img_cf_get_px_size>
    switch(dsc->header.cf) {
   1d0e2:	7b2b      	ldrb	r3, [r5, #12]
    uint16_t mask   = (1 << px_size) - 1; /*E.g. px_size = 2; mask = 0x03*/
   1d0e4:	2101      	movs	r1, #1
   1d0e6:	4081      	lsls	r1, r0
   1d0e8:	f003 031f 	and.w	r3, r3, #31
   1d0ec:	3901      	subs	r1, #1
   1d0ee:	3b07      	subs	r3, #7
   1d0f0:	b289      	uxth	r1, r1
    switch(dsc->header.cf) {
   1d0f2:	2b03      	cmp	r3, #3
   1d0f4:	d867      	bhi.n	1d1c6 <lv_img_decoder_built_in_read_line+0x296>
   1d0f6:	e8df f003 	tbb	[pc, r3]
   1d0fa:	3c02      	.short	0x3c02
   1d0fc:	5d4c      	.short	0x5d4c
            w = (dsc->header.w >> 3); /*E.g. w = 20 -> w = 2 + 1*/
   1d0fe:	68ea      	ldr	r2, [r5, #12]
   1d100:	f3c2 3347 	ubfx	r3, r2, #13, #8
            if(dsc->header.w & 0x7) w++;
   1d104:	f412 5fe0 	tst.w	r2, #7168	; 0x1c00
   1d108:	bf18      	it	ne
   1d10a:	3301      	addne	r3, #1
            ofs += w * y + (x >> 3); /*First pixel*/
   1d10c:	10e2      	asrs	r2, r4, #3
   1d10e:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 7 - (x & 0x7);
   1d112:	43e4      	mvns	r4, r4
            ofs += 8;                /*Skip the palette*/
   1d114:	3308      	adds	r3, #8
            pos = 7 - (x & 0x7);
   1d116:	f004 0407 	and.w	r4, r4, #7
    if(dsc->src_type == LV_IMG_SRC_VARIABLE) {
   1d11a:	7aaa      	ldrb	r2, [r5, #10]
   1d11c:	2a00      	cmp	r2, #0
   1d11e:	d155      	bne.n	1d1cc <lv_img_decoder_built_in_read_line+0x29c>
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   1d120:	f8d5 c01c 	ldr.w	ip, [r5, #28]
        data_tmp                     = img_dsc->data + ofs;
   1d124:	686d      	ldr	r5, [r5, #4]
        pos -= px_size;
   1d126:	b240      	sxtb	r0, r0
        data_tmp                     = img_dsc->data + ofs;
   1d128:	68ae      	ldr	r6, [r5, #8]
            pos = 8 - px_size;
   1d12a:	f1c0 0e08 	rsb	lr, r0, #8
        data_tmp                     = img_dsc->data + ofs;
   1d12e:	4433      	add	r3, r6
    for(i = 0; i < len; i++) {
   1d130:	4615      	mov	r5, r2
            pos = 8 - px_size;
   1d132:	fa4f fe8e 	sxtb.w	lr, lr
    for(i = 0; i < len; i++) {
   1d136:	b22a      	sxth	r2, r5
   1d138:	4590      	cmp	r8, r2
   1d13a:	f77f af79 	ble.w	1d030 <lv_img_decoder_built_in_read_line+0x100>
        uint8_t val_act = (*data_tmp & (mask << pos)) >> pos;
   1d13e:	781a      	ldrb	r2, [r3, #0]
   1d140:	fa01 f604 	lsl.w	r6, r1, r4
   1d144:	4032      	ands	r2, r6
   1d146:	4122      	asrs	r2, r4
        lv_color_t color = user_data->palette[val_act];
   1d148:	f8dc 6000 	ldr.w	r6, [ip]
   1d14c:	b2d2      	uxtb	r2, r2
        pos -= px_size;
   1d14e:	1a24      	subs	r4, r4, r0
        lv_color_t color = user_data->palette[val_act];
   1d150:	f836 6012 	ldrh.w	r6, [r6, r2, lsl #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE] = color.full & 0xFF;
   1d154:	703e      	strb	r6, [r7, #0]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + 1] = (color.full >> 8) & 0xFF;
   1d156:	0a36      	lsrs	r6, r6, #8
   1d158:	707e      	strb	r6, [r7, #1]
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1d15a:	f8dc 6004 	ldr.w	r6, [ip, #4]
        pos -= px_size;
   1d15e:	b264      	sxtb	r4, r4
        if(pos < 0) {
   1d160:	2c00      	cmp	r4, #0
        buf[i * LV_IMG_PX_SIZE_ALPHA_BYTE + LV_IMG_PX_SIZE_ALPHA_BYTE - 1] = user_data->opa[val_act];
   1d162:	5cb2      	ldrb	r2, [r6, r2]
   1d164:	70ba      	strb	r2, [r7, #2]
            pos = 8 - px_size;
   1d166:	bfbc      	itt	lt
   1d168:	4674      	movlt	r4, lr
            data_tmp++;
   1d16a:	3301      	addlt	r3, #1
    for(i = 0; i < len; i++) {
   1d16c:	3501      	adds	r5, #1
   1d16e:	3703      	adds	r7, #3
   1d170:	e7e1      	b.n	1d136 <lv_img_decoder_built_in_read_line+0x206>
            w = (dsc->header.w >> 2); /*E.g. w = 13 -> w = 3 + 1 (bytes)*/
   1d172:	68ea      	ldr	r2, [r5, #12]
   1d174:	f3c2 3308 	ubfx	r3, r2, #12, #9
            if(dsc->header.w & 0x3) w++;
   1d178:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   1d17c:	bf18      	it	ne
   1d17e:	3301      	addne	r3, #1
            ofs += w * y + (x >> 2); /*First pixel*/
   1d180:	10a2      	asrs	r2, r4, #2
            pos = 6 - ((x & 0x3) * 2);
   1d182:	43e4      	mvns	r4, r4
            ofs += w * y + (x >> 2); /*First pixel*/
   1d184:	fb03 2306 	mla	r3, r3, r6, r2
            pos = 6 - ((x & 0x3) * 2);
   1d188:	f004 0403 	and.w	r4, r4, #3
            ofs += 16;               /*Skip the palette*/
   1d18c:	3310      	adds	r3, #16
            pos = 6 - ((x & 0x3) * 2);
   1d18e:	0064      	lsls	r4, r4, #1
            break;
   1d190:	e7c3      	b.n	1d11a <lv_img_decoder_built_in_read_line+0x1ea>
            w = (dsc->header.w >> 1); /*E.g. w = 13 -> w = 6 + 1 (bytes)*/
   1d192:	68ea      	ldr	r2, [r5, #12]
   1d194:	f3c2 23c9 	ubfx	r3, r2, #11, #10
            if(dsc->header.w & 0x1) w++;
   1d198:	0552      	lsls	r2, r2, #21
   1d19a:	bf48      	it	mi
   1d19c:	3301      	addmi	r3, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d19e:	1062      	asrs	r2, r4, #1
            pos = 4 - ((x & 0x1) * 4);
   1d1a0:	f014 0f01 	tst.w	r4, #1
            ofs += w * y + (x >> 1); /*First pixel*/
   1d1a4:	fb03 2306 	mla	r3, r3, r6, r2
            ofs += 64;               /*Skip the palette*/
   1d1a8:	f103 0340 	add.w	r3, r3, #64	; 0x40
            pos = 4 - ((x & 0x1) * 4);
   1d1ac:	bf0c      	ite	eq
   1d1ae:	2404      	moveq	r4, #4
   1d1b0:	2400      	movne	r4, #0
   1d1b2:	e7b2      	b.n	1d11a <lv_img_decoder_built_in_read_line+0x1ea>
            w = dsc->header.w; /*E.g. x = 7 -> w = 7 (bytes)*/
   1d1b4:	68eb      	ldr	r3, [r5, #12]
   1d1b6:	f3c3 238a 	ubfx	r3, r3, #10, #11
            ofs += w * y + x;  /*First pixel*/
   1d1ba:	fb16 4303 	smlabb	r3, r6, r3, r4
            ofs += 1024;       /*Skip the palette*/
   1d1be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
            pos = 0;
   1d1c2:	2400      	movs	r4, #0
            break;
   1d1c4:	e7a9      	b.n	1d11a <lv_img_decoder_built_in_read_line+0x1ea>
    switch(dsc->header.cf) {
   1d1c6:	2300      	movs	r3, #0
   1d1c8:	461c      	mov	r4, r3
   1d1ca:	e7a6      	b.n	1d11a <lv_img_decoder_built_in_read_line+0x1ea>
        LV_LOG_WARN("Image built-in indexed line reader can't read file because LV_USE_FILESYSTEM = 0");
   1d1cc:	4b0b      	ldr	r3, [pc, #44]	; (1d1fc <lv_img_decoder_built_in_read_line+0x2cc>)
   1d1ce:	9300      	str	r3, [sp, #0]
   1d1d0:	f240 22eb 	movw	r2, #747	; 0x2eb
   1d1d4:	4b0a      	ldr	r3, [pc, #40]	; (1d200 <lv_img_decoder_built_in_read_line+0x2d0>)
   1d1d6:	e6c5      	b.n	1cf64 <lv_img_decoder_built_in_read_line+0x34>
        LV_LOG_WARN("Built-in image decoder read not supports the color format");
   1d1d8:	4b0a      	ldr	r3, [pc, #40]	; (1d204 <lv_img_decoder_built_in_read_line+0x2d4>)
   1d1da:	9300      	str	r3, [sp, #0]
   1d1dc:	f240 12fb 	movw	r2, #507	; 0x1fb
   1d1e0:	4b09      	ldr	r3, [pc, #36]	; (1d208 <lv_img_decoder_built_in_read_line+0x2d8>)
   1d1e2:	e6bf      	b.n	1cf64 <lv_img_decoder_built_in_read_line+0x34>
   1d1e4:	000304af 	.word	0x000304af
   1d1e8:	000306ff 	.word	0x000306ff
   1d1ec:	0003044b 	.word	0x0003044b
   1d1f0:	0002c117 	.word	0x0002c117
   1d1f4:	00030591 	.word	0x00030591
   1d1f8:	00030727 	.word	0x00030727
   1d1fc:	000305e0 	.word	0x000305e0
   1d200:	0003074a 	.word	0x0003074a
   1d204:	00030631 	.word	0x00030631
   1d208:	000306dd 	.word	0x000306dd

0001d20c <lv_img_decoder_get_info>:
    header->cf = LV_IMG_CF_UNKNOWN;
   1d20c:	680b      	ldr	r3, [r1, #0]
   1d20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
{
   1d212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d216:	4607      	mov	r7, r0
    header->cf = LV_IMG_CF_UNKNOWN;
   1d218:	600b      	str	r3, [r1, #0]
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d21a:	480d      	ldr	r0, [pc, #52]	; (1d250 <lv_img_decoder_get_info+0x44>)
   1d21c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1d250 <lv_img_decoder_get_info+0x44>
{
   1d220:	460e      	mov	r6, r1
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d222:	f00d f9a0 	bl	2a566 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   1d226:	2400      	movs	r4, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d228:	4605      	mov	r5, r0
   1d22a:	b915      	cbnz	r5, 1d232 <lv_img_decoder_get_info+0x26>
}
   1d22c:	4620      	mov	r0, r4
   1d22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(d->info_cb) {
   1d232:	682c      	ldr	r4, [r5, #0]
   1d234:	b134      	cbz	r4, 1d244 <lv_img_decoder_get_info+0x38>
            res = d->info_cb(d, src, header);
   1d236:	4632      	mov	r2, r6
   1d238:	4639      	mov	r1, r7
   1d23a:	4628      	mov	r0, r5
   1d23c:	47a0      	blx	r4
            if(res == LV_RES_OK) break;
   1d23e:	2801      	cmp	r0, #1
            res = d->info_cb(d, src, header);
   1d240:	4604      	mov	r4, r0
            if(res == LV_RES_OK) break;
   1d242:	d0f3      	beq.n	1d22c <lv_img_decoder_get_info+0x20>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d244:	4629      	mov	r1, r5
   1d246:	4640      	mov	r0, r8
   1d248:	f00d f993 	bl	2a572 <_lv_ll_get_next>
   1d24c:	4605      	mov	r5, r0
   1d24e:	e7ec      	b.n	1d22a <lv_img_decoder_get_info+0x1e>
   1d250:	20003f40 	.word	0x20003f40

0001d254 <lv_img_decoder_open>:
{
   1d254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d258:	4605      	mov	r5, r0
    dsc->color     = color;
   1d25a:	8102      	strh	r2, [r0, #8]
    dsc->src_type  = lv_img_src_get_type(src);
   1d25c:	4608      	mov	r0, r1
{
   1d25e:	460f      	mov	r7, r1
    dsc->src_type  = lv_img_src_get_type(src);
   1d260:	f00b fb71 	bl	28946 <lv_img_src_get_type>
    dsc->user_data = NULL;
   1d264:	2300      	movs	r3, #0
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1d266:	2801      	cmp	r0, #1
    dsc->src_type  = lv_img_src_get_type(src);
   1d268:	72a8      	strb	r0, [r5, #10]
    dsc->user_data = NULL;
   1d26a:	61eb      	str	r3, [r5, #28]
    if(dsc->src_type == LV_IMG_SRC_FILE) {
   1d26c:	d117      	bne.n	1d29e <lv_img_decoder_open+0x4a>
        size_t fnlen = strlen(src);
   1d26e:	4638      	mov	r0, r7
   1d270:	f7e3 f90c 	bl	48c <strlen>
        dsc->src = lv_mem_alloc(fnlen + 1);
   1d274:	3001      	adds	r0, #1
   1d276:	f000 f96b 	bl	1d550 <lv_mem_alloc>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1d27a:	4639      	mov	r1, r7
   1d27c:	6068      	str	r0, [r5, #4]
   1d27e:	f00e fa97 	bl	2b7b0 <strcpy>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d282:	4816      	ldr	r0, [pc, #88]	; (1d2dc <lv_img_decoder_open+0x88>)
   1d284:	f8df a054 	ldr.w	sl, [pc, #84]	; 1d2dc <lv_img_decoder_open+0x88>
   1d288:	f00d f96d 	bl	2a566 <_lv_ll_get_head>
    lv_res_t res = LV_RES_INV;
   1d28c:	2600      	movs	r6, #0
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d28e:	4604      	mov	r4, r0
        res = d->info_cb(d, src, &dsc->header);
   1d290:	f105 090c 	add.w	r9, r5, #12
        dsc->error_msg = NULL;
   1d294:	46b0      	mov	r8, r6
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d296:	b924      	cbnz	r4, 1d2a2 <lv_img_decoder_open+0x4e>
}
   1d298:	4630      	mov	r0, r6
   1d29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        dsc->src       = src;
   1d29e:	606f      	str	r7, [r5, #4]
   1d2a0:	e7ef      	b.n	1d282 <lv_img_decoder_open+0x2e>
        if(d->info_cb == NULL || d->open_cb == NULL) continue;
   1d2a2:	6823      	ldr	r3, [r4, #0]
   1d2a4:	b1a3      	cbz	r3, 1d2d0 <lv_img_decoder_open+0x7c>
   1d2a6:	6862      	ldr	r2, [r4, #4]
   1d2a8:	b192      	cbz	r2, 1d2d0 <lv_img_decoder_open+0x7c>
        res = d->info_cb(d, src, &dsc->header);
   1d2aa:	464a      	mov	r2, r9
   1d2ac:	4639      	mov	r1, r7
   1d2ae:	4620      	mov	r0, r4
   1d2b0:	4798      	blx	r3
        if(res != LV_RES_OK) continue;
   1d2b2:	2801      	cmp	r0, #1
        res = d->info_cb(d, src, &dsc->header);
   1d2b4:	4606      	mov	r6, r0
        if(res != LV_RES_OK) continue;
   1d2b6:	d10b      	bne.n	1d2d0 <lv_img_decoder_open+0x7c>
        res = d->open_cb(d, dsc);
   1d2b8:	6863      	ldr	r3, [r4, #4]
        dsc->error_msg = NULL;
   1d2ba:	f8c5 8018 	str.w	r8, [r5, #24]
        dsc->img_data  = NULL;
   1d2be:	f8c5 8010 	str.w	r8, [r5, #16]
        dsc->decoder   = d;
   1d2c2:	602c      	str	r4, [r5, #0]
        res = d->open_cb(d, dsc);
   1d2c4:	4629      	mov	r1, r5
   1d2c6:	4620      	mov	r0, r4
   1d2c8:	4798      	blx	r3
        if(res == LV_RES_OK) break;
   1d2ca:	2801      	cmp	r0, #1
        res = d->open_cb(d, dsc);
   1d2cc:	4606      	mov	r6, r0
        if(res == LV_RES_OK) break;
   1d2ce:	d0e3      	beq.n	1d298 <lv_img_decoder_open+0x44>
    _LV_LL_READ(LV_GC_ROOT(_lv_img_defoder_ll), d) {
   1d2d0:	4621      	mov	r1, r4
   1d2d2:	4650      	mov	r0, sl
   1d2d4:	f00d f94d 	bl	2a572 <_lv_ll_get_next>
   1d2d8:	4604      	mov	r4, r0
   1d2da:	e7dc      	b.n	1d296 <lv_img_decoder_open+0x42>
   1d2dc:	20003f40 	.word	0x20003f40

0001d2e0 <lv_img_decoder_create>:
{
   1d2e0:	b510      	push	{r4, lr}
    decoder = _lv_ll_ins_head(&LV_GC_ROOT(_lv_img_defoder_ll));
   1d2e2:	4805      	ldr	r0, [pc, #20]	; (1d2f8 <lv_img_decoder_create+0x18>)
   1d2e4:	f00d f908 	bl	2a4f8 <_lv_ll_ins_head>
    if(decoder == NULL) return NULL;
   1d2e8:	4604      	mov	r4, r0
   1d2ea:	b110      	cbz	r0, 1d2f2 <lv_img_decoder_create+0x12>
    _lv_memset_00(decoder, sizeof(lv_img_decoder_t));
   1d2ec:	2114      	movs	r1, #20
   1d2ee:	f00c fde3 	bl	29eb8 <_lv_memset_00>
}
   1d2f2:	4620      	mov	r0, r4
   1d2f4:	bd10      	pop	{r4, pc}
   1d2f6:	bf00      	nop
   1d2f8:	20003f40 	.word	0x20003f40

0001d2fc <_lv_img_decoder_init>:
{
   1d2fc:	b507      	push	{r0, r1, r2, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_img_defoder_ll), sizeof(lv_img_decoder_t));
   1d2fe:	480d      	ldr	r0, [pc, #52]	; (1d334 <_lv_img_decoder_init+0x38>)
   1d300:	2114      	movs	r1, #20
   1d302:	f00d f8f1 	bl	2a4e8 <_lv_ll_init>
    decoder = lv_img_decoder_create();
   1d306:	f7ff ffeb 	bl	1d2e0 <lv_img_decoder_create>
    if(decoder == NULL) {
   1d30a:	b950      	cbnz	r0, 1d322 <_lv_img_decoder_init+0x26>
        LV_LOG_WARN("lv_img_decoder_init: out of memory");
   1d30c:	4b0a      	ldr	r3, [pc, #40]	; (1d338 <_lv_img_decoder_init+0x3c>)
   1d30e:	9300      	str	r3, [sp, #0]
   1d310:	490a      	ldr	r1, [pc, #40]	; (1d33c <_lv_img_decoder_init+0x40>)
   1d312:	4b0b      	ldr	r3, [pc, #44]	; (1d340 <_lv_img_decoder_init+0x44>)
   1d314:	2247      	movs	r2, #71	; 0x47
   1d316:	2002      	movs	r0, #2
   1d318:	f000 f8f2 	bl	1d500 <_lv_log_add>
}
   1d31c:	b003      	add	sp, #12
   1d31e:	f85d fb04 	ldr.w	pc, [sp], #4
    decoder->info_cb = info_cb;
   1d322:	4b08      	ldr	r3, [pc, #32]	; (1d344 <_lv_img_decoder_init+0x48>)
   1d324:	6003      	str	r3, [r0, #0]
    decoder->open_cb = open_cb;
   1d326:	4b08      	ldr	r3, [pc, #32]	; (1d348 <_lv_img_decoder_init+0x4c>)
   1d328:	6043      	str	r3, [r0, #4]
    decoder->read_line_cb = read_line_cb;
   1d32a:	4b08      	ldr	r3, [pc, #32]	; (1d34c <_lv_img_decoder_init+0x50>)
   1d32c:	6083      	str	r3, [r0, #8]
    decoder->close_cb = close_cb;
   1d32e:	4b08      	ldr	r3, [pc, #32]	; (1d350 <_lv_img_decoder_init+0x54>)
   1d330:	60c3      	str	r3, [r0, #12]
}
   1d332:	e7f3      	b.n	1d31c <_lv_img_decoder_init+0x20>
   1d334:	20003f40 	.word	0x20003f40
   1d338:	0003066b 	.word	0x0003066b
   1d33c:	0003044b 	.word	0x0003044b
   1d340:	0003068e 	.word	0x0003068e
   1d344:	0001cd69 	.word	0x0001cd69
   1d348:	0001cde5 	.word	0x0001cde5
   1d34c:	0001cf31 	.word	0x0001cf31
   1d350:	00029e95 	.word	0x00029e95

0001d354 <lv_disp_get_default>:
 * @return pointer to the default display
 */
lv_disp_t * lv_disp_get_default(void)
{
    return disp_def;
}
   1d354:	4b01      	ldr	r3, [pc, #4]	; (1d35c <lv_disp_get_default+0x8>)
   1d356:	6818      	ldr	r0, [r3, #0]
   1d358:	4770      	bx	lr
   1d35a:	bf00      	nop
   1d35c:	20003ea4 	.word	0x20003ea4

0001d360 <lv_disp_get_hor_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the horizontal resolution of the display
 */
lv_coord_t lv_disp_get_hor_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1d360:	b910      	cbnz	r0, 1d368 <lv_disp_get_hor_res+0x8>
    return disp_def;
   1d362:	4b06      	ldr	r3, [pc, #24]	; (1d37c <lv_disp_get_hor_res+0x1c>)
   1d364:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1d366:	b138      	cbz	r0, 1d378 <lv_disp_get_hor_res+0x18>
        return LV_HOR_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.hor_res : disp->driver.ver_res;
   1d368:	7a03      	ldrb	r3, [r0, #8]
   1d36a:	07db      	lsls	r3, r3, #31
   1d36c:	bf54      	ite	pl
   1d36e:	f9b0 0000 	ldrshpl.w	r0, [r0]
   1d372:	f9b0 0002 	ldrshmi.w	r0, [r0, #2]
   1d376:	4770      	bx	lr
        return LV_HOR_RES_MAX;
   1d378:	20f0      	movs	r0, #240	; 0xf0
}
   1d37a:	4770      	bx	lr
   1d37c:	20003ea4 	.word	0x20003ea4

0001d380 <lv_disp_get_ver_res>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return the vertical resolution of the display
 */
lv_coord_t lv_disp_get_ver_res(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1d380:	b910      	cbnz	r0, 1d388 <lv_disp_get_ver_res+0x8>
    return disp_def;
   1d382:	4b06      	ldr	r3, [pc, #24]	; (1d39c <lv_disp_get_ver_res+0x1c>)
   1d384:	6818      	ldr	r0, [r3, #0]

    if(disp == NULL)
   1d386:	b138      	cbz	r0, 1d398 <lv_disp_get_ver_res+0x18>
        return LV_VER_RES_MAX;
    else
        return disp->driver.rotated == 0 ? disp->driver.ver_res : disp->driver.hor_res;
   1d388:	7a03      	ldrb	r3, [r0, #8]
   1d38a:	07db      	lsls	r3, r3, #31
   1d38c:	bf54      	ite	pl
   1d38e:	f9b0 0002 	ldrshpl.w	r0, [r0, #2]
   1d392:	f9b0 0000 	ldrshmi.w	r0, [r0]
   1d396:	4770      	bx	lr
        return LV_VER_RES_MAX;
   1d398:	20f0      	movs	r0, #240	; 0xf0
}
   1d39a:	4770      	bx	lr
   1d39c:	20003ea4 	.word	0x20003ea4

0001d3a0 <lv_disp_get_dpi>:
 * @param disp pointer to a display (NULL to use the default display)
 * @return dpi of the display
 */
lv_coord_t lv_disp_get_dpi(lv_disp_t * disp)
{
    if(disp == NULL) disp = lv_disp_get_default();
   1d3a0:	b910      	cbnz	r0, 1d3a8 <lv_disp_get_dpi+0x8>
    return disp_def;
   1d3a2:	4b04      	ldr	r3, [pc, #16]	; (1d3b4 <lv_disp_get_dpi+0x14>)
   1d3a4:	6818      	ldr	r0, [r3, #0]
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   1d3a6:	b118      	cbz	r0, 1d3b0 <lv_disp_get_dpi+0x10>
    return disp->driver.dpi;
   1d3a8:	8900      	ldrh	r0, [r0, #8]
   1d3aa:	f3c0 0049 	ubfx	r0, r0, #1, #10
   1d3ae:	4770      	bx	lr
    if(disp == NULL) return LV_DPI;  /*Do not return 0 because it might be a divider*/
   1d3b0:	2080      	movs	r0, #128	; 0x80
}
   1d3b2:	4770      	bx	lr
   1d3b4:	20003ea4 	.word	0x20003ea4

0001d3b8 <lv_disp_drv_register>:
{
   1d3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d3ba:	4605      	mov	r5, r0
    lv_disp_t * disp = _lv_ll_ins_head(&LV_GC_ROOT(_lv_disp_ll));
   1d3bc:	483b      	ldr	r0, [pc, #236]	; (1d4ac <lv_disp_drv_register+0xf4>)
   1d3be:	f00d f89b 	bl	2a4f8 <_lv_ll_ins_head>
    if(!disp) {
   1d3c2:	4604      	mov	r4, r0
   1d3c4:	b918      	cbnz	r0, 1d3ce <lv_disp_drv_register+0x16>
        return NULL;
   1d3c6:	2400      	movs	r4, #0
}
   1d3c8:	4620      	mov	r0, r4
   1d3ca:	b003      	add	sp, #12
   1d3cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    _lv_memset_00(disp, sizeof(lv_disp_t));
   1d3ce:	f44f 71c0 	mov.w	r1, #384	; 0x180
   1d3d2:	f00c fd96 	bl	29f02 <_lv_memset_00>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d3d6:	4628      	mov	r0, r5
   1d3d8:	4623      	mov	r3, r4
   1d3da:	f105 0230 	add.w	r2, r5, #48	; 0x30
   1d3de:	f850 1b04 	ldr.w	r1, [r0], #4
   1d3e2:	f843 1b04 	str.w	r1, [r3], #4
   1d3e6:	4290      	cmp	r0, r2
   1d3e8:	d1f9      	bne.n	1d3de <lv_disp_drv_register+0x26>
    if(disp_def == NULL) disp_def = disp;
   1d3ea:	4e31      	ldr	r6, [pc, #196]	; (1d4b0 <lv_disp_drv_register+0xf8>)
    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
   1d3ec:	213c      	movs	r1, #60	; 0x3c
   1d3ee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1d3f2:	f00d f879 	bl	2a4e8 <_lv_ll_init>
    disp->last_activity_time = 0;
   1d3f6:	2300      	movs	r3, #0
   1d3f8:	f8c4 317c 	str.w	r3, [r4, #380]	; 0x17c
    if(disp_def == NULL) disp_def = disp;
   1d3fc:	6833      	ldr	r3, [r6, #0]
   1d3fe:	b903      	cbnz	r3, 1d402 <lv_disp_drv_register+0x4a>
   1d400:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1d402:	482c      	ldr	r0, [pc, #176]	; (1d4b4 <lv_disp_drv_register+0xfc>)
    lv_disp_t * disp_def_tmp = disp_def;
   1d404:	6837      	ldr	r7, [r6, #0]
    disp_def                 = disp; /*Temporarily change the default screen to create the default screens on the
   1d406:	6034      	str	r4, [r6, #0]
    disp->refr_task = lv_task_create(_lv_disp_refr_task, LV_DISP_DEF_REFR_PERIOD, LV_REFR_TASK_PRIO, disp);
   1d408:	4623      	mov	r3, r4
   1d40a:	2203      	movs	r2, #3
   1d40c:	211e      	movs	r1, #30
   1d40e:	f00d f962 	bl	2a6d6 <lv_task_create>
   1d412:	6320      	str	r0, [r4, #48]	; 0x30
    if(disp->refr_task == NULL) return NULL;
   1d414:	2800      	cmp	r0, #0
   1d416:	d0d6      	beq.n	1d3c6 <lv_disp_drv_register+0xe>
    disp->inv_p = 0;
   1d418:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   1d41c:	f36f 0309 	bfc	r3, #0, #10
   1d420:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
    disp->bg_color = LV_COLOR_WHITE;
   1d424:	4b24      	ldr	r3, [pc, #144]	; (1d4b8 <lv_disp_drv_register+0x100>)
   1d426:	881b      	ldrh	r3, [r3, #0]
   1d428:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    disp->last_activity_time = 0;
   1d42c:	2500      	movs	r5, #0
    disp->bg_opa = LV_OPA_COVER;
   1d42e:	23ff      	movs	r3, #255	; 0xff
   1d430:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1d434:	4629      	mov	r1, r5
    disp->last_activity_time = 0;
   1d436:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
    disp->bg_img = NULL;
   1d43a:	6565      	str	r5, [r4, #84]	; 0x54
    disp->prev_scr  = NULL;
   1d43c:	6465      	str	r5, [r4, #68]	; 0x44
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1d43e:	4628      	mov	r0, r5
   1d440:	f7fc ff66 	bl	1a310 <lv_obj_create>
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1d444:	4629      	mov	r1, r5
    disp->act_scr   = lv_obj_create(NULL, NULL); /*Create a default screen on the display*/
   1d446:	6420      	str	r0, [r4, #64]	; 0x40
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1d448:	4628      	mov	r0, r5
   1d44a:	f7fc ff61 	bl	1a310 <lv_obj_create>
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1d44e:	4629      	mov	r1, r5
    disp->top_layer = lv_obj_create(NULL, NULL); /*Create top layer on the display*/
   1d450:	64a0      	str	r0, [r4, #72]	; 0x48
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1d452:	4628      	mov	r0, r5
   1d454:	f7fc ff5c 	bl	1a310 <lv_obj_create>
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   1d458:	4629      	mov	r1, r5
    disp->sys_layer = lv_obj_create(NULL, NULL); /*Create sys layer on the display*/
   1d45a:	64e0      	str	r0, [r4, #76]	; 0x4c
    lv_obj_reset_style_list(disp->top_layer, LV_OBJ_PART_MAIN);
   1d45c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1d45e:	f009 f9e9 	bl	26834 <lv_obj_reset_style_list>
    lv_obj_reset_style_list(disp->sys_layer, LV_OBJ_PART_MAIN);
   1d462:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1d464:	4629      	mov	r1, r5
   1d466:	f009 f9e5 	bl	26834 <lv_obj_reset_style_list>
    lv_obj_set_click(disp->top_layer, false);
   1d46a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1d46c:	4629      	mov	r1, r5
   1d46e:	f008 fe98 	bl	261a2 <lv_obj_set_click>
    lv_obj_set_click(disp->sys_layer, false);
   1d472:	4629      	mov	r1, r5
   1d474:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1d476:	f008 fe94 	bl	261a2 <lv_obj_set_click>
    lv_obj_invalidate(disp->act_scr);
   1d47a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1d47c:	f008 ff29 	bl	262d2 <lv_obj_invalidate>
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   1d480:	6b20      	ldr	r0, [r4, #48]	; 0x30
    disp_def = disp_def_tmp; /*Revert the default display*/
   1d482:	6037      	str	r7, [r6, #0]
    lv_task_ready(disp->refr_task); /*Be sure the screen will be refreshed immediately on start up*/
   1d484:	f00d f93b 	bl	2a6fe <lv_task_ready>
    if(lv_disp_is_true_double_buf(disp) && disp->driver.set_px_cb) {
   1d488:	4620      	mov	r0, r4
   1d48a:	f00c fd71 	bl	29f70 <lv_disp_is_true_double_buf>
   1d48e:	2800      	cmp	r0, #0
   1d490:	d09a      	beq.n	1d3c8 <lv_disp_drv_register+0x10>
   1d492:	6963      	ldr	r3, [r4, #20]
   1d494:	2b00      	cmp	r3, #0
   1d496:	d097      	beq.n	1d3c8 <lv_disp_drv_register+0x10>
        LV_LOG_ERROR("Can't handle 2 screen sized buffers with set_px_cb. Display will not be refreshed.");
   1d498:	4b08      	ldr	r3, [pc, #32]	; (1d4bc <lv_disp_drv_register+0x104>)
   1d49a:	9300      	str	r3, [sp, #0]
   1d49c:	4908      	ldr	r1, [pc, #32]	; (1d4c0 <lv_disp_drv_register+0x108>)
   1d49e:	4b09      	ldr	r3, [pc, #36]	; (1d4c4 <lv_disp_drv_register+0x10c>)
   1d4a0:	22ac      	movs	r2, #172	; 0xac
   1d4a2:	2003      	movs	r0, #3
   1d4a4:	f000 f82c 	bl	1d500 <_lv_log_add>
   1d4a8:	e78e      	b.n	1d3c8 <lv_disp_drv_register+0x10>
   1d4aa:	bf00      	nop
   1d4ac:	20003eac 	.word	0x20003eac
   1d4b0:	20003ea4 	.word	0x20003ea4
   1d4b4:	0001af75 	.word	0x0001af75
   1d4b8:	0002c10e 	.word	0x0002c10e
   1d4bc:	000307a9 	.word	0x000307a9
   1d4c0:	0003076f 	.word	0x0003076f
   1d4c4:	000307fc 	.word	0x000307fc

0001d4c8 <lv_indev_get_next>:
 * @return the next input devise or NULL if no more. Give the first input device when the parameter
 * is NULL
 */
lv_indev_t * lv_indev_get_next(lv_indev_t * indev)
{
    if(indev == NULL)
   1d4c8:	4601      	mov	r1, r0
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1d4ca:	4803      	ldr	r0, [pc, #12]	; (1d4d8 <lv_indev_get_next+0x10>)
    if(indev == NULL)
   1d4cc:	b909      	cbnz	r1, 1d4d2 <lv_indev_get_next+0xa>
        return _lv_ll_get_head(&LV_GC_ROOT(_lv_indev_ll));
   1d4ce:	f00d b84a 	b.w	2a566 <_lv_ll_get_head>
    else
        return _lv_ll_get_next(&LV_GC_ROOT(_lv_indev_ll), indev);
   1d4d2:	f00d b84e 	b.w	2a572 <_lv_ll_get_next>
   1d4d6:	bf00      	nop
   1d4d8:	20003f4c 	.word	0x20003f4c

0001d4dc <lv_tick_inc>:
 * You have to call this function periodically
 * @param tick_period the call period of this function in milliseconds
 */
LV_ATTRIBUTE_TICK_INC void lv_tick_inc(uint32_t tick_period)
{
    tick_irq_flag = 0;
   1d4dc:	4b03      	ldr	r3, [pc, #12]	; (1d4ec <lv_tick_inc+0x10>)
   1d4de:	2200      	movs	r2, #0
   1d4e0:	701a      	strb	r2, [r3, #0]
    sys_time += tick_period;
   1d4e2:	4a03      	ldr	r2, [pc, #12]	; (1d4f0 <lv_tick_inc+0x14>)
   1d4e4:	6813      	ldr	r3, [r2, #0]
   1d4e6:	4403      	add	r3, r0
   1d4e8:	6013      	str	r3, [r2, #0]
}
   1d4ea:	4770      	bx	lr
   1d4ec:	2000870d 	.word	0x2000870d
   1d4f0:	20003ea8 	.word	0x20003ea8

0001d4f4 <lv_log_register_print_cb>:
 * and send the formatted log message to a console or serial port.
 * @param print_cb a function pointer to print a log
 */
void lv_log_register_print_cb(lv_log_print_g_cb_t print_cb)
{
    custom_print_cb = print_cb;
   1d4f4:	4b01      	ldr	r3, [pc, #4]	; (1d4fc <lv_log_register_print_cb+0x8>)
   1d4f6:	6018      	str	r0, [r3, #0]
}
   1d4f8:	4770      	bx	lr
   1d4fa:	bf00      	nop
   1d4fc:	20003ff8 	.word	0x20003ff8

0001d500 <_lv_log_add>:
 * @param func name of the function when the log added
 * @param format printf-like format string
 * @param ... parameters for `format`
 */
void _lv_log_add(lv_log_level_t level, const char * file, int line, const char * func, const char * format, ...)
{
   1d500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d504:	461f      	mov	r7, r3
    if(level >= _LV_LOG_LEVEL_NUM) return; /*Invalid level*/

    if(level >= LV_LOG_LEVEL) {
   1d506:	1e43      	subs	r3, r0, #1
   1d508:	b2db      	uxtb	r3, r3
   1d50a:	2b04      	cmp	r3, #4
{
   1d50c:	b0c5      	sub	sp, #276	; 0x114
   1d50e:	4604      	mov	r4, r0
   1d510:	460d      	mov	r5, r1
   1d512:	4616      	mov	r6, r2
    if(level >= LV_LOG_LEVEL) {
   1d514:	d816      	bhi.n	1d544 <_lv_log_add+0x44>
        va_list args;
        va_start(args, format);
        char buf[256];
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1d516:	f10d 0910 	add.w	r9, sp, #16
        va_start(args, format);
   1d51a:	ab4d      	add	r3, sp, #308	; 0x134
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1d51c:	9a4c      	ldr	r2, [sp, #304]	; 0x130
        va_start(args, format);
   1d51e:	9303      	str	r3, [sp, #12]
        lv_vsnprintf(buf, sizeof(buf), format, args);
   1d520:	f44f 7180 	mov.w	r1, #256	; 0x100
   1d524:	4648      	mov	r0, r9
   1d526:	f004 fd51 	bl	21fcc <vsniprintf>
        }

        static const char * lvl_prefix[] = {"Trace", "Info", "Warn", "Error", "User"};
        printf("%s: %s \t(%s #%d %s())\n", lvl_prefix[level], buf, &file[p], line, func);
#else
        if(custom_print_cb) custom_print_cb(level, file, line, func, buf);
   1d52a:	4b08      	ldr	r3, [pc, #32]	; (1d54c <_lv_log_add+0x4c>)
   1d52c:	f8d3 8000 	ldr.w	r8, [r3]
   1d530:	f1b8 0f00 	cmp.w	r8, #0
   1d534:	d006      	beq.n	1d544 <_lv_log_add+0x44>
   1d536:	f8cd 9000 	str.w	r9, [sp]
   1d53a:	463b      	mov	r3, r7
   1d53c:	4632      	mov	r2, r6
   1d53e:	4629      	mov	r1, r5
   1d540:	4620      	mov	r0, r4
   1d542:	47c0      	blx	r8
#endif
    }
}
   1d544:	b045      	add	sp, #276	; 0x114
   1d546:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d54a:	bf00      	nop
   1d54c:	20003ff8 	.word	0x20003ff8

0001d550 <lv_mem_alloc>:
 * Allocate a memory dynamically
 * @param size size of the memory to allocate in bytes
 * @return pointer to the allocated memory
 */
void * lv_mem_alloc(size_t size)
{
   1d550:	b513      	push	{r0, r1, r4, lr}
    if(size == 0) {
   1d552:	b1d0      	cbz	r0, 1d58a <lv_mem_alloc+0x3a>
#ifdef LV_ARCH_64
    /*Round the size up to 8*/
    size = (size + 7) & (~0x7);
#else
    /*Round the size up to 4*/
    size = (size + 3) & (~0x3);
   1d554:	3003      	adds	r0, #3
   1d556:	f020 0403 	bic.w	r4, r0, #3
	return k_aligned_alloc(sizeof(void *), size);
   1d55a:	1d21      	adds	r1, r4, #4
   1d55c:	2004      	movs	r0, #4
   1d55e:	f003 f9b3 	bl	208c8 <k_aligned_alloc>
#if LV_ENABLE_GC == 1 /*gc must not include header*/
    alloc = LV_MEM_CUSTOM_ALLOC(size);
#else                 /* LV_ENABLE_GC */
    /*Allocate a header too to store the size*/
    alloc = LV_MEM_CUSTOM_ALLOC(size + sizeof(lv_mem_header_t));
    if(alloc != NULL) {
   1d562:	b950      	cbnz	r0, 1d57a <lv_mem_alloc+0x2a>
#if LV_MEM_ADD_JUNK
    if(alloc != NULL) _lv_memset(alloc, 0xaa, size);
#endif

    if(alloc == NULL) {
        LV_LOG_WARN("Couldn't allocate memory");
   1d564:	4b0a      	ldr	r3, [pc, #40]	; (1d590 <lv_mem_alloc+0x40>)
   1d566:	9300      	str	r3, [sp, #0]
   1d568:	2002      	movs	r0, #2
   1d56a:	4b0a      	ldr	r3, [pc, #40]	; (1d594 <lv_mem_alloc+0x44>)
   1d56c:	490a      	ldr	r1, [pc, #40]	; (1d598 <lv_mem_alloc+0x48>)
   1d56e:	22d0      	movs	r2, #208	; 0xd0
   1d570:	f7ff ffc6 	bl	1d500 <_lv_log_add>
   1d574:	2000      	movs	r0, #0
        }
#endif
    }

    return alloc;
}
   1d576:	b002      	add	sp, #8
   1d578:	bd10      	pop	{r4, pc}
        ((lv_mem_ent_t *)alloc)->header.s.used   = 1;
   1d57a:	0064      	lsls	r4, r4, #1
   1d57c:	f044 0401 	orr.w	r4, r4, #1
   1d580:	f840 4b04 	str.w	r4, [r0], #4
    if(alloc == NULL) {
   1d584:	2800      	cmp	r0, #0
   1d586:	d1f6      	bne.n	1d576 <lv_mem_alloc+0x26>
   1d588:	e7ec      	b.n	1d564 <lv_mem_alloc+0x14>
        return &zero_mem;
   1d58a:	4804      	ldr	r0, [pc, #16]	; (1d59c <lv_mem_alloc+0x4c>)
   1d58c:	e7f3      	b.n	1d576 <lv_mem_alloc+0x26>
   1d58e:	bf00      	nop
   1d590:	00030847 	.word	0x00030847
   1d594:	0003088c 	.word	0x0003088c
   1d598:	00030811 	.word	0x00030811
   1d59c:	20003ffc 	.word	0x20003ffc

0001d5a0 <lv_mem_free>:
 * Free an allocated data
 * @param data pointer to an allocated memory
 */
void lv_mem_free(const void * data)
{
    if(data == &zero_mem) return;
   1d5a0:	4b06      	ldr	r3, [pc, #24]	; (1d5bc <lv_mem_free+0x1c>)
   1d5a2:	4298      	cmp	r0, r3
   1d5a4:	d008      	beq.n	1d5b8 <lv_mem_free+0x18>
    if(data == NULL) return;
   1d5a6:	b138      	cbz	r0, 1d5b8 <lv_mem_free+0x18>
#endif

#if LV_ENABLE_GC == 0
    /*e points to the header*/
    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));
    e->header.s.used = 0;
   1d5a8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
   1d5ac:	f36f 0300 	bfc	r3, #0, #1
   1d5b0:	f800 3d04 	strb.w	r3, [r0, #-4]!


#endif /*LV_MEM_AUTO_DEFRAG*/
#else /*Use custom, user defined free function*/
#if LV_ENABLE_GC == 0
    LV_MEM_CUSTOM_FREE(e);
   1d5b4:	f00e b8bb 	b.w	2b72e <k_free>
#else
    LV_MEM_CUSTOM_FREE((void *)data);
#endif /*LV_ENABLE_GC*/
#endif
}
   1d5b8:	4770      	bx	lr
   1d5ba:	bf00      	nop
   1d5bc:	20003ffc 	.word	0x20003ffc

0001d5c0 <_lv_mem_get_size>:

#if LV_ENABLE_GC == 0

uint32_t _lv_mem_get_size(const void * data)
{
    if(data == NULL) return 0;
   1d5c0:	b140      	cbz	r0, 1d5d4 <_lv_mem_get_size+0x14>
    if(data == &zero_mem) return 0;
   1d5c2:	4b05      	ldr	r3, [pc, #20]	; (1d5d8 <_lv_mem_get_size+0x18>)
   1d5c4:	4298      	cmp	r0, r3
   1d5c6:	d004      	beq.n	1d5d2 <_lv_mem_get_size+0x12>

    lv_mem_ent_t * e = (lv_mem_ent_t *)((uint8_t *)data - sizeof(lv_mem_header_t));

    return e->header.s.d_size;
   1d5c8:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1d5cc:	f3c0 005e 	ubfx	r0, r0, #1, #31
   1d5d0:	4770      	bx	lr
    if(data == NULL) return 0;
   1d5d2:	2000      	movs	r0, #0
}
   1d5d4:	4770      	bx	lr
   1d5d6:	bf00      	nop
   1d5d8:	20003ffc 	.word	0x20003ffc

0001d5dc <lv_mem_realloc>:
{
   1d5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    new_size = (new_size + 3) & (~0x3);
   1d5de:	1ccd      	adds	r5, r1, #3
   1d5e0:	f025 0503 	bic.w	r5, r5, #3
    if(data_p != NULL) {
   1d5e4:	4604      	mov	r4, r0
   1d5e6:	b130      	cbz	r0, 1d5f6 <lv_mem_realloc+0x1a>
        if(e->header.s.used == 0) {
   1d5e8:	f810 3c04 	ldrb.w	r3, [r0, #-4]
            data_p = NULL;
   1d5ec:	f013 0f01 	tst.w	r3, #1
   1d5f0:	bf14      	ite	ne
   1d5f2:	4604      	movne	r4, r0
   1d5f4:	2400      	moveq	r4, #0
    uint32_t old_size = _lv_mem_get_size(data_p);
   1d5f6:	4620      	mov	r0, r4
   1d5f8:	f7ff ffe2 	bl	1d5c0 <_lv_mem_get_size>
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   1d5fc:	4285      	cmp	r5, r0
    uint32_t old_size = _lv_mem_get_size(data_p);
   1d5fe:	4607      	mov	r7, r0
    if(old_size == new_size) return data_p; /*Also avoid reallocating the same memory*/
   1d600:	d01f      	beq.n	1d642 <lv_mem_realloc+0x66>
    new_p = lv_mem_alloc(new_size);
   1d602:	4628      	mov	r0, r5
   1d604:	f7ff ffa4 	bl	1d550 <lv_mem_alloc>
    if(new_p == NULL) {
   1d608:	4606      	mov	r6, r0
   1d60a:	b958      	cbnz	r0, 1d624 <lv_mem_realloc+0x48>
        LV_LOG_WARN("Couldn't allocate memory");
   1d60c:	4b0e      	ldr	r3, [pc, #56]	; (1d648 <lv_mem_realloc+0x6c>)
   1d60e:	9300      	str	r3, [sp, #0]
   1d610:	490e      	ldr	r1, [pc, #56]	; (1d64c <lv_mem_realloc+0x70>)
   1d612:	4b0f      	ldr	r3, [pc, #60]	; (1d650 <lv_mem_realloc+0x74>)
   1d614:	f240 1243 	movw	r2, #323	; 0x143
   1d618:	2002      	movs	r0, #2
   1d61a:	f7ff ff71 	bl	1d500 <_lv_log_add>
}
   1d61e:	4630      	mov	r0, r6
   1d620:	b003      	add	sp, #12
   1d622:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(data_p != NULL) {
   1d624:	2c00      	cmp	r4, #0
   1d626:	d0fa      	beq.n	1d61e <lv_mem_realloc+0x42>
        if(old_size != 0) {
   1d628:	2f00      	cmp	r7, #0
   1d62a:	d0f8      	beq.n	1d61e <lv_mem_realloc+0x42>
   1d62c:	42bd      	cmp	r5, r7
   1d62e:	462a      	mov	r2, r5
   1d630:	4621      	mov	r1, r4
   1d632:	bf28      	it	cs
   1d634:	463a      	movcs	r2, r7
   1d636:	f00e f890 	bl	2b75a <memcpy>
            lv_mem_free(data_p);
   1d63a:	4620      	mov	r0, r4
   1d63c:	f7ff ffb0 	bl	1d5a0 <lv_mem_free>
   1d640:	e7ed      	b.n	1d61e <lv_mem_realloc+0x42>
   1d642:	4626      	mov	r6, r4
   1d644:	e7eb      	b.n	1d61e <lv_mem_realloc+0x42>
   1d646:	bf00      	nop
   1d648:	00030847 	.word	0x00030847
   1d64c:	00030811 	.word	0x00030811
   1d650:	00030899 	.word	0x00030899

0001d654 <_lv_mem_buf_get>:
/**
 * Get a temporal buffer with the given size.
 * @param size the required size
 */
void * _lv_mem_buf_get(uint32_t size)
{
   1d654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if(size == 0) return NULL;
   1d656:	4601      	mov	r1, r0
   1d658:	b190      	cbz	r0, 1d680 <_lv_mem_buf_get+0x2c>

    /*Try small static buffers first*/
    uint8_t i;
    if(size <= MEM_BUF_SMALL_SIZE) {
   1d65a:	2810      	cmp	r0, #16
   1d65c:	d811      	bhi.n	1d682 <_lv_mem_buf_get+0x2e>
        for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
            if(mem_buf_small[i].used == 0) {
   1d65e:	4a2c      	ldr	r2, [pc, #176]	; (1d710 <_lv_mem_buf_get+0xbc>)
   1d660:	7993      	ldrb	r3, [r2, #6]
   1d662:	f013 0301 	ands.w	r3, r3, #1
   1d666:	d003      	beq.n	1d670 <_lv_mem_buf_get+0x1c>
   1d668:	7b93      	ldrb	r3, [r2, #14]
   1d66a:	07df      	lsls	r7, r3, #31
   1d66c:	d409      	bmi.n	1d682 <_lv_mem_buf_get+0x2e>
   1d66e:	2301      	movs	r3, #1
                mem_buf_small[i].used = 1;
   1d670:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
   1d674:	7981      	ldrb	r1, [r0, #6]
   1d676:	f041 0101 	orr.w	r1, r1, #1
   1d67a:	7181      	strb	r1, [r0, #6]
                return mem_buf_small[i].p;
   1d67c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
        }
    }

    LV_DEBUG_ASSERT(false, "No free buffer. Increase LV_DRAW_BUF_MAX_NUM.", 0x00);
    return NULL;
}
   1d680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   1d682:	4824      	ldr	r0, [pc, #144]	; (1d714 <_lv_mem_buf_get+0xc0>)
            if(mem_buf_small[i].used == 0) {
   1d684:	2300      	movs	r3, #0
   1d686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d68a:	4605      	mov	r5, r0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0 && LV_GC_ROOT(_lv_mem_buf[i]).size >= size) {
   1d68c:	f100 0c04 	add.w	ip, r0, #4
   1d690:	eb00 07c3 	add.w	r7, r0, r3, lsl #3
   1d694:	79be      	ldrb	r6, [r7, #6]
   1d696:	4634      	mov	r4, r6
   1d698:	07f6      	lsls	r6, r6, #31
   1d69a:	d413      	bmi.n	1d6c4 <_lv_mem_buf_get+0x70>
   1d69c:	f83c 6033 	ldrh.w	r6, [ip, r3, lsl #3]
   1d6a0:	428e      	cmp	r6, r1
   1d6a2:	d30f      	bcc.n	1d6c4 <_lv_mem_buf_get+0x70>
            if(LV_GC_ROOT(_lv_mem_buf[i]).size == size) {
   1d6a4:	d105      	bne.n	1d6b2 <_lv_mem_buf_get+0x5e>
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d6a6:	f044 0401 	orr.w	r4, r4, #1
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   1d6aa:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
                LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d6ae:	71bc      	strb	r4, [r7, #6]
                return LV_GC_ROOT(_lv_mem_buf[i]).p;
   1d6b0:	e7e6      	b.n	1d680 <_lv_mem_buf_get+0x2c>
            else if(i_guess < 0) {
   1d6b2:	1c57      	adds	r7, r2, #1
   1d6b4:	d101      	bne.n	1d6ba <_lv_mem_buf_get+0x66>
                i_guess = i;
   1d6b6:	b25a      	sxtb	r2, r3
   1d6b8:	e004      	b.n	1d6c4 <_lv_mem_buf_get+0x70>
            else if(LV_GC_ROOT(_lv_mem_buf[i]).size < LV_GC_ROOT(_lv_mem_buf[i_guess]).size) {
   1d6ba:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
   1d6be:	88a4      	ldrh	r4, [r4, #4]
   1d6c0:	42b4      	cmp	r4, r6
   1d6c2:	d8f8      	bhi.n	1d6b6 <_lv_mem_buf_get+0x62>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d6c4:	3301      	adds	r3, #1
   1d6c6:	2b10      	cmp	r3, #16
   1d6c8:	d1e2      	bne.n	1d690 <_lv_mem_buf_get+0x3c>
    if(i_guess >= 0) {
   1d6ca:	1c54      	adds	r4, r2, #1
   1d6cc:	d008      	beq.n	1d6e0 <_lv_mem_buf_get+0x8c>
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   1d6ce:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   1d6d2:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
        LV_GC_ROOT(_lv_mem_buf[i_guess]).used = 1;
   1d6d6:	798b      	ldrb	r3, [r1, #6]
   1d6d8:	f043 0301 	orr.w	r3, r3, #1
   1d6dc:	718b      	strb	r3, [r1, #6]
        return LV_GC_ROOT(_lv_mem_buf[i_guess]).p;
   1d6de:	e7cf      	b.n	1d680 <_lv_mem_buf_get+0x2c>
   1d6e0:	2400      	movs	r4, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).used == 0) {
   1d6e2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
   1d6e6:	7998      	ldrb	r0, [r3, #6]
   1d6e8:	4602      	mov	r2, r0
   1d6ea:	07c0      	lsls	r0, r0, #31
   1d6ec:	d40a      	bmi.n	1d704 <_lv_mem_buf_get+0xb0>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d6ee:	f042 0201 	orr.w	r2, r2, #1
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   1d6f2:	f855 0034 	ldr.w	r0, [r5, r4, lsl #3]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 1;
   1d6f6:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = size;
   1d6f8:	8099      	strh	r1, [r3, #4]
            LV_GC_ROOT(_lv_mem_buf[i]).p = lv_mem_realloc(LV_GC_ROOT(_lv_mem_buf[i]).p, size);
   1d6fa:	f7ff ff6f 	bl	1d5dc <lv_mem_realloc>
   1d6fe:	f845 0034 	str.w	r0, [r5, r4, lsl #3]
            return  LV_GC_ROOT(_lv_mem_buf[i]).p;
   1d702:	e7bd      	b.n	1d680 <_lv_mem_buf_get+0x2c>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d704:	3401      	adds	r4, #1
   1d706:	2c10      	cmp	r4, #16
   1d708:	d1eb      	bne.n	1d6e2 <_lv_mem_buf_get+0x8e>
    if(size == 0) return NULL;
   1d70a:	2000      	movs	r0, #0
   1d70c:	e7b8      	b.n	1d680 <_lv_mem_buf_get+0x2c>
   1d70e:	bf00      	nop
   1d710:	200007b8 	.word	0x200007b8
   1d714:	20003f58 	.word	0x20003f58

0001d718 <_lv_mem_buf_release>:
{
    uint8_t i;

    /*Try small static buffers first*/
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        if(mem_buf_small[i].p == p) {
   1d718:	4b16      	ldr	r3, [pc, #88]	; (1d774 <_lv_mem_buf_release+0x5c>)
   1d71a:	681a      	ldr	r2, [r3, #0]
   1d71c:	4290      	cmp	r0, r2
{
   1d71e:	b513      	push	{r0, r1, r4, lr}
        if(mem_buf_small[i].p == p) {
   1d720:	d00b      	beq.n	1d73a <_lv_mem_buf_release+0x22>
   1d722:	689a      	ldr	r2, [r3, #8]
   1d724:	4290      	cmp	r0, r2
   1d726:	d10a      	bne.n	1d73e <_lv_mem_buf_release+0x26>
   1d728:	2201      	movs	r2, #1
            mem_buf_small[i].used = 0;
   1d72a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1d72e:	799a      	ldrb	r2, [r3, #6]
   1d730:	f36f 0200 	bfc	r2, #0, #1
   1d734:	719a      	strb	r2, [r3, #6]
            return;
        }
    }

    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
}
   1d736:	b002      	add	sp, #8
   1d738:	bd10      	pop	{r4, pc}
        if(mem_buf_small[i].p == p) {
   1d73a:	2200      	movs	r2, #0
   1d73c:	e7f5      	b.n	1d72a <_lv_mem_buf_release+0x12>
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   1d73e:	4a0e      	ldr	r2, [pc, #56]	; (1d778 <_lv_mem_buf_release+0x60>)
        if(mem_buf_small[i].p == p) {
   1d740:	2300      	movs	r3, #0
        if(LV_GC_ROOT(_lv_mem_buf[i]).p == p) {
   1d742:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   1d746:	4284      	cmp	r4, r0
   1d748:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
   1d74c:	d104      	bne.n	1d758 <_lv_mem_buf_release+0x40>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1d74e:	798b      	ldrb	r3, [r1, #6]
   1d750:	f36f 0300 	bfc	r3, #0, #1
   1d754:	718b      	strb	r3, [r1, #6]
            return;
   1d756:	e7ee      	b.n	1d736 <_lv_mem_buf_release+0x1e>
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d758:	3301      	adds	r3, #1
   1d75a:	2b10      	cmp	r3, #16
   1d75c:	d1f1      	bne.n	1d742 <_lv_mem_buf_release+0x2a>
    LV_LOG_ERROR("lv_mem_buf_release: p is not a known buffer")
   1d75e:	4b07      	ldr	r3, [pc, #28]	; (1d77c <_lv_mem_buf_release+0x64>)
   1d760:	9300      	str	r3, [sp, #0]
   1d762:	4907      	ldr	r1, [pc, #28]	; (1d780 <_lv_mem_buf_release+0x68>)
   1d764:	4b07      	ldr	r3, [pc, #28]	; (1d784 <_lv_mem_buf_release+0x6c>)
   1d766:	f240 2236 	movw	r2, #566	; 0x236
   1d76a:	2003      	movs	r0, #3
   1d76c:	f7ff fec8 	bl	1d500 <_lv_log_add>
   1d770:	e7e1      	b.n	1d736 <_lv_mem_buf_release+0x1e>
   1d772:	bf00      	nop
   1d774:	200007b8 	.word	0x200007b8
   1d778:	20003f58 	.word	0x20003f58
   1d77c:	00030860 	.word	0x00030860
   1d780:	00030811 	.word	0x00030811
   1d784:	000308a8 	.word	0x000308a8

0001d788 <_lv_mem_buf_free_all>:

/**
 * Free all memory buffers
 */
void _lv_mem_buf_free_all(void)
{
   1d788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    for(i = 0; i < sizeof(mem_buf_small) / sizeof(mem_buf_small[0]); i++) {
        mem_buf_small[i].used = 0;
   1d78a:	4b0f      	ldr	r3, [pc, #60]	; (1d7c8 <_lv_mem_buf_free_all+0x40>)
   1d78c:	4c0f      	ldr	r4, [pc, #60]	; (1d7cc <_lv_mem_buf_free_all+0x44>)
   1d78e:	799a      	ldrb	r2, [r3, #6]
   1d790:	f36f 0200 	bfc	r2, #0, #1
   1d794:	719a      	strb	r2, [r3, #6]
   1d796:	7b9a      	ldrb	r2, [r3, #14]
   1d798:	2500      	movs	r5, #0
   1d79a:	f36f 0200 	bfc	r2, #0, #1
   1d79e:	739a      	strb	r2, [r3, #14]
    }

    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d7a0:	4627      	mov	r7, r4
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1d7a2:	462e      	mov	r6, r5
        if(LV_GC_ROOT(_lv_mem_buf[i]).p) {
   1d7a4:	6820      	ldr	r0, [r4, #0]
   1d7a6:	b148      	cbz	r0, 1d7bc <_lv_mem_buf_free_all+0x34>
            lv_mem_free(LV_GC_ROOT(_lv_mem_buf[i]).p);
   1d7a8:	f7ff fefa 	bl	1d5a0 <lv_mem_free>
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1d7ac:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
            LV_GC_ROOT(_lv_mem_buf[i]).p = NULL;
   1d7b0:	6026      	str	r6, [r4, #0]
            LV_GC_ROOT(_lv_mem_buf[i]).used = 0;
   1d7b2:	799a      	ldrb	r2, [r3, #6]
   1d7b4:	f366 0200 	bfi	r2, r6, #0, #1
   1d7b8:	719a      	strb	r2, [r3, #6]
            LV_GC_ROOT(_lv_mem_buf[i]).size = 0;
   1d7ba:	80a6      	strh	r6, [r4, #4]
    for(i = 0; i < LV_MEM_BUF_MAX_NUM; i++) {
   1d7bc:	3501      	adds	r5, #1
   1d7be:	2d10      	cmp	r5, #16
   1d7c0:	f104 0408 	add.w	r4, r4, #8
   1d7c4:	d1ee      	bne.n	1d7a4 <_lv_mem_buf_free_all+0x1c>
        }
    }
}
   1d7c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d7c8:	200007b8 	.word	0x200007b8
   1d7cc:	20003f58 	.word	0x20003f58

0001d7d0 <_lv_task_core_init>:

/**
 * Init the lv_task module
 */
void _lv_task_core_init(void)
{
   1d7d0:	b508      	push	{r3, lr}
    _lv_ll_init(&LV_GC_ROOT(_lv_task_ll), sizeof(lv_task_t));
   1d7d2:	4805      	ldr	r0, [pc, #20]	; (1d7e8 <_lv_task_core_init+0x18>)
   1d7d4:	2118      	movs	r1, #24
   1d7d6:	f00c fe87 	bl	2a4e8 <_lv_ll_init>

    task_list_changed = false;
   1d7da:	4b04      	ldr	r3, [pc, #16]	; (1d7ec <_lv_task_core_init+0x1c>)
   1d7dc:	2200      	movs	r2, #0
   1d7de:	701a      	strb	r2, [r3, #0]
 * Enable or disable the whole lv_task handling
 * @param en: true: lv_task handling is running, false: lv_task handling is suspended
 */
void lv_task_enable(bool en)
{
    lv_task_run = en;
   1d7e0:	4b03      	ldr	r3, [pc, #12]	; (1d7f0 <_lv_task_core_init+0x20>)
   1d7e2:	2201      	movs	r2, #1
   1d7e4:	701a      	strb	r2, [r3, #0]
}
   1d7e6:	bd08      	pop	{r3, pc}
   1d7e8:	20003fe8 	.word	0x20003fe8
   1d7ec:	20008733 	.word	0x20008733
   1d7f0:	20008730 	.word	0x20008730

0001d7f4 <lv_task_create_basic>:
{
   1d7f4:	b570      	push	{r4, r5, r6, lr}
    tmp = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d7f6:	481c      	ldr	r0, [pc, #112]	; (1d868 <lv_task_create_basic+0x74>)
   1d7f8:	f00c feb5 	bl	2a566 <_lv_ll_get_head>
    if(NULL == tmp) {
   1d7fc:	4601      	mov	r1, r0
   1d7fe:	b148      	cbz	r0, 1d814 <lv_task_create_basic+0x20>
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   1d800:	4c19      	ldr	r4, [pc, #100]	; (1d868 <lv_task_create_basic+0x74>)
            if(tmp->prio <= DEF_PRIO) {
   1d802:	7d0b      	ldrb	r3, [r1, #20]
   1d804:	f003 0307 	and.w	r3, r3, #7
   1d808:	2b03      	cmp	r3, #3
   1d80a:	d80b      	bhi.n	1d824 <lv_task_create_basic+0x30>
                new_task = _lv_ll_ins_prev(&LV_GC_ROOT(_lv_task_ll), tmp);
   1d80c:	4816      	ldr	r0, [pc, #88]	; (1d868 <lv_task_create_basic+0x74>)
   1d80e:	f00c feb9 	bl	2a584 <_lv_ll_ins_prev>
   1d812:	e002      	b.n	1d81a <lv_task_create_basic+0x26>
        new_task = _lv_ll_ins_head(&LV_GC_ROOT(_lv_task_ll));
   1d814:	4814      	ldr	r0, [pc, #80]	; (1d868 <lv_task_create_basic+0x74>)
   1d816:	f00c fe6f 	bl	2a4f8 <_lv_ll_ins_head>
        if(new_task == NULL) return NULL;
   1d81a:	4604      	mov	r4, r0
   1d81c:	b960      	cbnz	r0, 1d838 <lv_task_create_basic+0x44>
   1d81e:	2400      	movs	r4, #0
}
   1d820:	4620      	mov	r0, r4
   1d822:	bd70      	pop	{r4, r5, r6, pc}
            tmp = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), tmp);
   1d824:	4620      	mov	r0, r4
   1d826:	f00c fea4 	bl	2a572 <_lv_ll_get_next>
        } while(tmp != NULL);
   1d82a:	4601      	mov	r1, r0
   1d82c:	2800      	cmp	r0, #0
   1d82e:	d1e8      	bne.n	1d802 <lv_task_create_basic+0xe>
            new_task = _lv_ll_ins_tail(&LV_GC_ROOT(_lv_task_ll));
   1d830:	480d      	ldr	r0, [pc, #52]	; (1d868 <lv_task_create_basic+0x74>)
   1d832:	f00c fe7c 	bl	2a52e <_lv_ll_ins_tail>
   1d836:	e7f0      	b.n	1d81a <lv_task_create_basic+0x26>
    task_list_changed = true;
   1d838:	4b0c      	ldr	r3, [pc, #48]	; (1d86c <lv_task_create_basic+0x78>)
   1d83a:	2501      	movs	r5, #1
   1d83c:	701d      	strb	r5, [r3, #0]
    new_task->period  = DEF_PERIOD;
   1d83e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   1d842:	6003      	str	r3, [r0, #0]
    new_task->prio    = DEF_PRIO;
   1d844:	7d03      	ldrb	r3, [r0, #20]
   1d846:	2203      	movs	r2, #3
   1d848:	f362 0302 	bfi	r3, r2, #0, #3
    new_task->task_cb = NULL;
   1d84c:	2600      	movs	r6, #0
    new_task->prio    = DEF_PRIO;
   1d84e:	7503      	strb	r3, [r0, #20]
    new_task->repeat_count = -1;
   1d850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d854:	6103      	str	r3, [r0, #16]
    new_task->task_cb = NULL;
   1d856:	6086      	str	r6, [r0, #8]
    new_task->last_run = lv_tick_get();
   1d858:	f00c fb99 	bl	29f8e <lv_tick_get>
    task_created = true;
   1d85c:	4b04      	ldr	r3, [pc, #16]	; (1d870 <lv_task_create_basic+0x7c>)
    new_task->last_run = lv_tick_get();
   1d85e:	6060      	str	r0, [r4, #4]
    new_task->user_data = NULL;
   1d860:	60e6      	str	r6, [r4, #12]
    task_created = true;
   1d862:	701d      	strb	r5, [r3, #0]
    return new_task;
   1d864:	e7dc      	b.n	1d820 <lv_task_create_basic+0x2c>
   1d866:	bf00      	nop
   1d868:	20003fe8 	.word	0x20003fe8
   1d86c:	20008733 	.word	0x20008733
   1d870:	20008731 	.word	0x20008731

0001d874 <lv_task_del>:
{
   1d874:	b538      	push	{r3, r4, r5, lr}
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   1d876:	4601      	mov	r1, r0
{
   1d878:	4604      	mov	r4, r0
    _lv_ll_remove(&LV_GC_ROOT(_lv_task_ll), task);
   1d87a:	4808      	ldr	r0, [pc, #32]	; (1d89c <lv_task_del+0x28>)
   1d87c:	f00c feb4 	bl	2a5e8 <_lv_ll_remove>
    task_list_changed = true;
   1d880:	4b07      	ldr	r3, [pc, #28]	; (1d8a0 <lv_task_del+0x2c>)
   1d882:	2501      	movs	r5, #1
    lv_mem_free(task);
   1d884:	4620      	mov	r0, r4
    task_list_changed = true;
   1d886:	701d      	strb	r5, [r3, #0]
    lv_mem_free(task);
   1d888:	f7ff fe8a 	bl	1d5a0 <lv_mem_free>
    if(LV_GC_ROOT(_lv_task_act) == task) task_deleted = true; /*The active task was deleted*/
   1d88c:	4b05      	ldr	r3, [pc, #20]	; (1d8a4 <lv_task_del+0x30>)
   1d88e:	681b      	ldr	r3, [r3, #0]
   1d890:	42a3      	cmp	r3, r4
   1d892:	bf04      	itt	eq
   1d894:	4b04      	ldreq	r3, [pc, #16]	; (1d8a8 <lv_task_del+0x34>)
   1d896:	701d      	strbeq	r5, [r3, #0]
}
   1d898:	bd38      	pop	{r3, r4, r5, pc}
   1d89a:	bf00      	nop
   1d89c:	20003fe8 	.word	0x20003fe8
   1d8a0:	20008733 	.word	0x20008733
   1d8a4:	20003fe4 	.word	0x20003fe4
   1d8a8:	20008732 	.word	0x20008732

0001d8ac <lv_task_exec>:
 * Execute task if its the priority is appropriate
 * @param task pointer to lv_task
 * @return true: execute, false: not executed
 */
static bool lv_task_exec(lv_task_t * task)
{
   1d8ac:	b538      	push	{r3, r4, r5, lr}
   1d8ae:	4604      	mov	r4, r0
 * @return the time remaining, or 0 if it needs to be run again
 */
static uint32_t lv_task_time_remaining(lv_task_t * task)
{
    /*Check if at least 'period' time elapsed*/
    uint32_t elp = lv_tick_elaps(task->last_run);
   1d8b0:	6840      	ldr	r0, [r0, #4]
   1d8b2:	f00c fb79 	bl	29fa8 <lv_tick_elaps>
    if(elp >= task->period)
   1d8b6:	6823      	ldr	r3, [r4, #0]
   1d8b8:	4298      	cmp	r0, r3
   1d8ba:	d31c      	bcc.n	1d8f6 <lv_task_exec+0x4a>
        task->last_run = lv_tick_get();
   1d8bc:	f00c fb67 	bl	29f8e <lv_tick_get>
        task_deleted   = false;
   1d8c0:	4d0e      	ldr	r5, [pc, #56]	; (1d8fc <lv_task_exec+0x50>)
        task_created   = false;
   1d8c2:	4a0f      	ldr	r2, [pc, #60]	; (1d900 <lv_task_exec+0x54>)
        task->last_run = lv_tick_get();
   1d8c4:	6060      	str	r0, [r4, #4]
        task_deleted   = false;
   1d8c6:	2300      	movs	r3, #0
   1d8c8:	702b      	strb	r3, [r5, #0]
        task_created   = false;
   1d8ca:	7013      	strb	r3, [r2, #0]
        if(task->task_cb) task->task_cb(task);
   1d8cc:	68a3      	ldr	r3, [r4, #8]
   1d8ce:	b943      	cbnz	r3, 1d8e2 <lv_task_exec+0x36>
            if(task->repeat_count > 0) {
   1d8d0:	6923      	ldr	r3, [r4, #16]
   1d8d2:	2b00      	cmp	r3, #0
   1d8d4:	dc0c      	bgt.n	1d8f0 <lv_task_exec+0x44>
            if(task->repeat_count == 0) {
   1d8d6:	6923      	ldr	r3, [r4, #16]
   1d8d8:	b943      	cbnz	r3, 1d8ec <lv_task_exec+0x40>
                lv_task_del(task);
   1d8da:	4620      	mov	r0, r4
   1d8dc:	f7ff ffca 	bl	1d874 <lv_task_del>
   1d8e0:	e004      	b.n	1d8ec <lv_task_exec+0x40>
        if(task->task_cb) task->task_cb(task);
   1d8e2:	4620      	mov	r0, r4
   1d8e4:	4798      	blx	r3
        if(task_deleted == false) { /*The task might be deleted by itself as well*/
   1d8e6:	782b      	ldrb	r3, [r5, #0]
   1d8e8:	2b00      	cmp	r3, #0
   1d8ea:	d0f1      	beq.n	1d8d0 <lv_task_exec+0x24>
                lv_task_del(task);
   1d8ec:	2001      	movs	r0, #1
}
   1d8ee:	bd38      	pop	{r3, r4, r5, pc}
                task->repeat_count--;
   1d8f0:	3b01      	subs	r3, #1
   1d8f2:	6123      	str	r3, [r4, #16]
   1d8f4:	e7ef      	b.n	1d8d6 <lv_task_exec+0x2a>
    bool exec = false;
   1d8f6:	2000      	movs	r0, #0
   1d8f8:	e7f9      	b.n	1d8ee <lv_task_exec+0x42>
   1d8fa:	bf00      	nop
   1d8fc:	20008732 	.word	0x20008732
   1d900:	20008731 	.word	0x20008731

0001d904 <lv_task_handler>:
    if(already_running) return 1;
   1d904:	4b55      	ldr	r3, [pc, #340]	; (1da5c <lv_task_handler+0x158>)
{
   1d906:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(already_running) return 1;
   1d90a:	781c      	ldrb	r4, [r3, #0]
   1d90c:	2001      	movs	r0, #1
   1d90e:	b924      	cbnz	r4, 1d91a <lv_task_handler+0x16>
    if(lv_task_run == false) {
   1d910:	4a53      	ldr	r2, [pc, #332]	; (1da60 <lv_task_handler+0x15c>)
    already_running = true;
   1d912:	7018      	strb	r0, [r3, #0]
    if(lv_task_run == false) {
   1d914:	7812      	ldrb	r2, [r2, #0]
   1d916:	b91a      	cbnz	r2, 1d920 <lv_task_handler+0x1c>
        already_running = false; /*Release mutex*/
   1d918:	701a      	strb	r2, [r3, #0]
}
   1d91a:	b003      	add	sp, #12
   1d91c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    handler_start = lv_tick_get();
   1d920:	f00c fb35 	bl	29f8e <lv_tick_get>
   1d924:	4b4f      	ldr	r3, [pc, #316]	; (1da64 <lv_task_handler+0x160>)
        task_deleted             = false;
   1d926:	4d50      	ldr	r5, [pc, #320]	; (1da68 <lv_task_handler+0x164>)
    handler_start = lv_tick_get();
   1d928:	6018      	str	r0, [r3, #0]
    lv_task_t * task_interrupter = NULL;
   1d92a:	9301      	str	r3, [sp, #4]
        task_deleted             = false;
   1d92c:	46a3      	mov	fp, r4
        task_created             = false;
   1d92e:	4f4f      	ldr	r7, [pc, #316]	; (1da6c <lv_task_handler+0x168>)
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d930:	484f      	ldr	r0, [pc, #316]	; (1da70 <lv_task_handler+0x16c>)
        task_deleted             = false;
   1d932:	f885 b000 	strb.w	fp, [r5]
        task_created             = false;
   1d936:	f887 b000 	strb.w	fp, [r7]
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d93a:	f00c fe14 	bl	2a566 <_lv_ll_get_head>
   1d93e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1da84 <lv_task_handler+0x180>
            if(task_list_changed) {
   1d942:	f8df a144 	ldr.w	sl, [pc, #324]	; 1da88 <lv_task_handler+0x184>
        LV_GC_ROOT(_lv_task_act) = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d946:	f8c8 0000 	str.w	r0, [r8]
        while(LV_GC_ROOT(_lv_task_act)) {
   1d94a:	46c1      	mov	r9, r8
   1d94c:	f8d9 1000 	ldr.w	r1, [r9]
   1d950:	b1b9      	cbz	r1, 1d982 <lv_task_handler+0x7e>
            next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), LV_GC_ROOT(_lv_task_act));
   1d952:	4847      	ldr	r0, [pc, #284]	; (1da70 <lv_task_handler+0x16c>)
   1d954:	f00c fe0d 	bl	2a572 <_lv_ll_get_next>
   1d958:	4606      	mov	r6, r0
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_OFF) {
   1d95a:	f8d9 0000 	ldr.w	r0, [r9]
   1d95e:	7d03      	ldrb	r3, [r0, #20]
   1d960:	f013 0207 	ands.w	r2, r3, #7
   1d964:	d00d      	beq.n	1d982 <lv_task_handler+0x7e>
            if(LV_GC_ROOT(_lv_task_act) == task_interrupter) {
   1d966:	42a0      	cmp	r0, r4
   1d968:	d103      	bne.n	1d972 <lv_task_handler+0x6e>
                LV_GC_ROOT(_lv_task_act) = next;
   1d96a:	f8c9 6000 	str.w	r6, [r9]
                task_interrupter = NULL; /*From this point only task after the interrupter comes, so
   1d96e:	2400      	movs	r4, #0
                continue; /*Load the next task*/
   1d970:	e7ec      	b.n	1d94c <lv_task_handler+0x48>
            if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio == LV_TASK_PRIO_HIGHEST) {
   1d972:	2a05      	cmp	r2, #5
   1d974:	d138      	bne.n	1d9e8 <lv_task_handler+0xe4>
                lv_task_exec(LV_GC_ROOT(_lv_task_act));
   1d976:	f7ff ff99 	bl	1d8ac <lv_task_exec>
            if(task_created || task_deleted) {
   1d97a:	4b3c      	ldr	r3, [pc, #240]	; (1da6c <lv_task_handler+0x168>)
   1d97c:	781b      	ldrb	r3, [r3, #0]
   1d97e:	2b00      	cmp	r3, #0
   1d980:	d060      	beq.n	1da44 <lv_task_handler+0x140>
    busy_time += lv_tick_elaps(handler_start);
   1d982:	9b01      	ldr	r3, [sp, #4]
   1d984:	4c3b      	ldr	r4, [pc, #236]	; (1da74 <lv_task_handler+0x170>)
   1d986:	6818      	ldr	r0, [r3, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1d988:	4d3b      	ldr	r5, [pc, #236]	; (1da78 <lv_task_handler+0x174>)
    busy_time += lv_tick_elaps(handler_start);
   1d98a:	f00c fb0d 	bl	29fa8 <lv_tick_elaps>
   1d98e:	6823      	ldr	r3, [r4, #0]
   1d990:	4403      	add	r3, r0
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1d992:	6828      	ldr	r0, [r5, #0]
    busy_time += lv_tick_elaps(handler_start);
   1d994:	6023      	str	r3, [r4, #0]
    uint32_t idle_period_time = lv_tick_elaps(idle_period_start);
   1d996:	f00c fb07 	bl	29fa8 <lv_tick_elaps>
    if(idle_period_time >= IDLE_MEAS_PERIOD) {
   1d99a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1d99e:	d315      	bcc.n	1d9cc <lv_task_handler+0xc8>
        idle_last         = (uint32_t)((uint32_t)busy_time * 100) / IDLE_MEAS_PERIOD; /*Calculate the busy percentage*/
   1d9a0:	6822      	ldr	r2, [r4, #0]
   1d9a2:	2364      	movs	r3, #100	; 0x64
   1d9a4:	4353      	muls	r3, r2
   1d9a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   1d9aa:	fbb3 f3f2 	udiv	r3, r3, r2
        idle_last         = idle_last > 100 ? 0 : 100 - idle_last;                    /*But we need idle time*/
   1d9ae:	b2da      	uxtb	r2, r3
   1d9b0:	2a64      	cmp	r2, #100	; 0x64
   1d9b2:	bf98      	it	ls
   1d9b4:	f1c3 0364 	rsbls	r3, r3, #100	; 0x64
   1d9b8:	4a30      	ldr	r2, [pc, #192]	; (1da7c <lv_task_handler+0x178>)
   1d9ba:	bf94      	ite	ls
   1d9bc:	b2db      	uxtbls	r3, r3
   1d9be:	2300      	movhi	r3, #0
   1d9c0:	7013      	strb	r3, [r2, #0]
        busy_time         = 0;
   1d9c2:	2300      	movs	r3, #0
   1d9c4:	6023      	str	r3, [r4, #0]
        idle_period_start = lv_tick_get();
   1d9c6:	f00c fae2 	bl	29f8e <lv_tick_get>
   1d9ca:	6028      	str	r0, [r5, #0]
    time_till_next = LV_NO_TASK_READY;
   1d9cc:	4d2c      	ldr	r5, [pc, #176]	; (1da80 <lv_task_handler+0x17c>)
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d9ce:	4828      	ldr	r0, [pc, #160]	; (1da70 <lv_task_handler+0x16c>)
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   1d9d0:	4e27      	ldr	r6, [pc, #156]	; (1da70 <lv_task_handler+0x16c>)
    time_till_next = LV_NO_TASK_READY;
   1d9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d9d6:	602b      	str	r3, [r5, #0]
    next = _lv_ll_get_head(&LV_GC_ROOT(_lv_task_ll));
   1d9d8:	f00c fdc5 	bl	2a566 <_lv_ll_get_head>
   1d9dc:	4604      	mov	r4, r0
    while(next) {
   1d9de:	b9dc      	cbnz	r4, 1da18 <lv_task_handler+0x114>
    already_running = false; /*Release the mutex*/
   1d9e0:	4b1e      	ldr	r3, [pc, #120]	; (1da5c <lv_task_handler+0x158>)
    return time_till_next;
   1d9e2:	6828      	ldr	r0, [r5, #0]
    already_running = false; /*Release the mutex*/
   1d9e4:	701c      	strb	r4, [r3, #0]
    return time_till_next;
   1d9e6:	e798      	b.n	1d91a <lv_task_handler+0x16>
            else if(task_interrupter) {
   1d9e8:	b134      	cbz	r4, 1d9f8 <lv_task_handler+0xf4>
                if(((lv_task_t *)LV_GC_ROOT(_lv_task_act))->prio > task_interrupter->prio) {
   1d9ea:	7d22      	ldrb	r2, [r4, #20]
   1d9ec:	f003 0307 	and.w	r3, r3, #7
   1d9f0:	f002 0207 	and.w	r2, r2, #7
   1d9f4:	4293      	cmp	r3, r2
   1d9f6:	d9c0      	bls.n	1d97a <lv_task_handler+0x76>
                if(lv_task_exec(LV_GC_ROOT(_lv_task_act))) {
   1d9f8:	f7ff ff58 	bl	1d8ac <lv_task_exec>
   1d9fc:	2800      	cmp	r0, #0
   1d9fe:	d0bc      	beq.n	1d97a <lv_task_handler+0x76>
                    if(!task_created && !task_deleted) {
   1da00:	783b      	ldrb	r3, [r7, #0]
   1da02:	2b00      	cmp	r3, #0
   1da04:	d1bd      	bne.n	1d982 <lv_task_handler+0x7e>
   1da06:	782b      	ldrb	r3, [r5, #0]
   1da08:	2b00      	cmp	r3, #0
   1da0a:	d1ba      	bne.n	1d982 <lv_task_handler+0x7e>
                        task_interrupter = LV_GC_ROOT(_lv_task_act); /*Check all tasks again from the highest priority */
   1da0c:	f8d8 4000 	ldr.w	r4, [r8]
    } while(!end_flag);
   1da10:	e78d      	b.n	1d92e <lv_task_handler+0x2a>
            LV_GC_ROOT(_lv_task_act) = next; /*Load the next task*/
   1da12:	f8c9 6000 	str.w	r6, [r9]
   1da16:	e799      	b.n	1d94c <lv_task_handler+0x48>
        if(next->prio != LV_TASK_PRIO_OFF) {
   1da18:	7d23      	ldrb	r3, [r4, #20]
   1da1a:	075b      	lsls	r3, r3, #29
   1da1c:	d00c      	beq.n	1da38 <lv_task_handler+0x134>
    uint32_t elp = lv_tick_elaps(task->last_run);
   1da1e:	6860      	ldr	r0, [r4, #4]
   1da20:	f00c fac2 	bl	29fa8 <lv_tick_elaps>
    if(elp >= task->period)
   1da24:	6823      	ldr	r3, [r4, #0]
   1da26:	4298      	cmp	r0, r3
        return 0;
    return task->period - elp;
   1da28:	bf38      	it	cc
   1da2a:	1a18      	subcc	r0, r3, r0
            if(delay < time_till_next)
   1da2c:	682b      	ldr	r3, [r5, #0]
        return 0;
   1da2e:	bf28      	it	cs
   1da30:	2000      	movcs	r0, #0
            if(delay < time_till_next)
   1da32:	4283      	cmp	r3, r0
                time_till_next = delay;
   1da34:	bf88      	it	hi
   1da36:	6028      	strhi	r0, [r5, #0]
        next = _lv_ll_get_next(&LV_GC_ROOT(_lv_task_ll), next); /*Find the next task*/
   1da38:	4621      	mov	r1, r4
   1da3a:	4630      	mov	r0, r6
   1da3c:	f00c fd99 	bl	2a572 <_lv_ll_get_next>
   1da40:	4604      	mov	r4, r0
   1da42:	e7cc      	b.n	1d9de <lv_task_handler+0xda>
            if(task_created || task_deleted) {
   1da44:	782b      	ldrb	r3, [r5, #0]
   1da46:	2b00      	cmp	r3, #0
   1da48:	d19b      	bne.n	1d982 <lv_task_handler+0x7e>
            if(task_list_changed) {
   1da4a:	f89a 2000 	ldrb.w	r2, [sl]
   1da4e:	2a00      	cmp	r2, #0
   1da50:	d0df      	beq.n	1da12 <lv_task_handler+0x10e>
                task_list_changed = false;
   1da52:	f88a 3000 	strb.w	r3, [sl]
                task_interrupter = NULL;
   1da56:	461c      	mov	r4, r3
   1da58:	e769      	b.n	1d92e <lv_task_handler+0x2a>
   1da5a:	bf00      	nop
   1da5c:	2000872e 	.word	0x2000872e
   1da60:	20008730 	.word	0x20008730
   1da64:	20004004 	.word	0x20004004
   1da68:	20008732 	.word	0x20008732
   1da6c:	20008731 	.word	0x20008731
   1da70:	20003fe8 	.word	0x20003fe8
   1da74:	20004000 	.word	0x20004000
   1da78:	20004008 	.word	0x20004008
   1da7c:	2000872f 	.word	0x2000872f
   1da80:	2000400c 	.word	0x2000400c
   1da84:	20003fe4 	.word	0x20003fe4
   1da88:	20008733 	.word	0x20008733

0001da8c <lv_task_set_prio>:
    if(task->prio == prio) return;
   1da8c:	7d03      	ldrb	r3, [r0, #20]
   1da8e:	f003 0307 	and.w	r3, r3, #7
   1da92:	428b      	cmp	r3, r1
{
   1da94:	b570      	push	{r4, r5, r6, lr}
   1da96:	4604      	mov	r4, r0
   1da98:	460d      	mov	r5, r1
    if(task->prio == prio) return;
   1da9a:	d017      	beq.n	1dacc <lv_task_set_prio+0x40>
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   1da9c:	480f      	ldr	r0, [pc, #60]	; (1dadc <lv_task_set_prio+0x50>)
   1da9e:	4e0f      	ldr	r6, [pc, #60]	; (1dadc <lv_task_set_prio+0x50>)
   1daa0:	f00c fd61 	bl	2a566 <_lv_ll_get_head>
   1daa4:	4602      	mov	r2, r0
   1daa6:	b132      	cbz	r2, 1dab6 <lv_task_set_prio+0x2a>
        if(i->prio <= prio) {
   1daa8:	7d13      	ldrb	r3, [r2, #20]
   1daaa:	f003 0307 	and.w	r3, r3, #7
   1daae:	429d      	cmp	r5, r3
   1dab0:	db0d      	blt.n	1dace <lv_task_set_prio+0x42>
            if(i != task) _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, i);
   1dab2:	42a2      	cmp	r2, r4
   1dab4:	d003      	beq.n	1dabe <lv_task_set_prio+0x32>
        _lv_ll_move_before(&LV_GC_ROOT(_lv_task_ll), task, NULL);
   1dab6:	4809      	ldr	r0, [pc, #36]	; (1dadc <lv_task_set_prio+0x50>)
   1dab8:	4621      	mov	r1, r4
   1daba:	f00c fdce 	bl	2a65a <_lv_ll_move_before>
    task_list_changed = true;
   1dabe:	4b08      	ldr	r3, [pc, #32]	; (1dae0 <lv_task_set_prio+0x54>)
   1dac0:	2201      	movs	r2, #1
   1dac2:	701a      	strb	r2, [r3, #0]
    task->prio = prio;
   1dac4:	7d23      	ldrb	r3, [r4, #20]
   1dac6:	f365 0302 	bfi	r3, r5, #0, #3
   1daca:	7523      	strb	r3, [r4, #20]
}
   1dacc:	bd70      	pop	{r4, r5, r6, pc}
    _LV_LL_READ(LV_GC_ROOT(_lv_task_ll), i) {
   1dace:	4611      	mov	r1, r2
   1dad0:	4630      	mov	r0, r6
   1dad2:	f00c fd4e 	bl	2a572 <_lv_ll_get_next>
   1dad6:	4602      	mov	r2, r0
   1dad8:	e7e5      	b.n	1daa6 <lv_task_set_prio+0x1a>
   1dada:	bf00      	nop
   1dadc:	20003fe8 	.word	0x20003fe8
   1dae0:	20008733 	.word	0x20008733

0001dae4 <lv_txt_utf8_get_byte_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param utf8_id character index
 * @return byte index of the 'utf8_id'th letter
 */
static uint32_t lv_txt_utf8_get_byte_id(const char * txt, uint32_t utf8_id)
{
   1dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t i;
    uint32_t byte_cnt = 0;
   1dae8:	2400      	movs	r4, #0
    for(i = 0; i < utf8_id; i++) {
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   1daea:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1db14 <lv_txt_utf8_get_byte_id+0x30>
{
   1daee:	4607      	mov	r7, r0
   1daf0:	460d      	mov	r5, r1
    for(i = 0; i < utf8_id; i++) {
   1daf2:	4626      	mov	r6, r4
   1daf4:	42ae      	cmp	r6, r5
   1daf6:	d102      	bne.n	1dafe <lv_txt_utf8_get_byte_id+0x1a>
        byte_cnt += c_size > 0 ? c_size : 1;
    }

    return byte_cnt;
}
   1daf8:	4620      	mov	r0, r4
   1dafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        uint8_t c_size = _lv_txt_encoded_size(&txt[byte_cnt]);
   1dafe:	1938      	adds	r0, r7, r4
   1db00:	f8d8 3000 	ldr.w	r3, [r8]
   1db04:	4798      	blx	r3
        byte_cnt += c_size > 0 ? c_size : 1;
   1db06:	2801      	cmp	r0, #1
   1db08:	bf38      	it	cc
   1db0a:	2001      	movcc	r0, #1
   1db0c:	fa54 f480 	uxtab	r4, r4, r0
    for(i = 0; i < utf8_id; i++) {
   1db10:	3601      	adds	r6, #1
   1db12:	e7ef      	b.n	1daf4 <lv_txt_utf8_get_byte_id+0x10>
   1db14:	200007d8 	.word	0x200007d8

0001db18 <lv_txt_utf8_get_char_id>:
 * @param txt a '\0' terminated UTF-8 string
 * @param byte_id byte index
 * @return character index of the letter at 'byte_id'th position
 */
static uint32_t lv_txt_utf8_get_char_id(const char * txt, uint32_t byte_id)
{
   1db18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint32_t i        = 0;
   1db1a:	2400      	movs	r4, #0
    uint32_t char_cnt = 0;

    while(i < byte_id) {
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   1db1c:	4f07      	ldr	r7, [pc, #28]	; (1db3c <lv_txt_utf8_get_char_id+0x24>)
    uint32_t i        = 0;
   1db1e:	9401      	str	r4, [sp, #4]
{
   1db20:	4606      	mov	r6, r0
   1db22:	460d      	mov	r5, r1
    while(i < byte_id) {
   1db24:	9b01      	ldr	r3, [sp, #4]
   1db26:	42ab      	cmp	r3, r5
   1db28:	d302      	bcc.n	1db30 <lv_txt_utf8_get_char_id+0x18>
        char_cnt++;
    }

    return char_cnt;
}
   1db2a:	4620      	mov	r0, r4
   1db2c:	b003      	add	sp, #12
   1db2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_txt_encoded_next(txt, &i); /*'i' points to the next letter so use the prev. value*/
   1db30:	683b      	ldr	r3, [r7, #0]
   1db32:	a901      	add	r1, sp, #4
   1db34:	4630      	mov	r0, r6
   1db36:	4798      	blx	r3
        char_cnt++;
   1db38:	3401      	adds	r4, #1
   1db3a:	e7f3      	b.n	1db24 <lv_txt_utf8_get_char_id+0xc>
   1db3c:	200007d0 	.word	0x200007d0

0001db40 <lv_txt_utf8_get_length>:
 * E.g.: "ÁBC" is 3 characters (but 4 bytes)
 * @param txt a '\0' terminated char string
 * @return number of characters
 */
static uint32_t lv_txt_utf8_get_length(const char * txt)
{
   1db40:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t len = 0;
    uint32_t i   = 0;
   1db42:	2400      	movs	r4, #0

    while(txt[i] != '\0') {
        _lv_txt_encoded_next(txt, &i);
   1db44:	4e07      	ldr	r6, [pc, #28]	; (1db64 <lv_txt_utf8_get_length+0x24>)
    uint32_t i   = 0;
   1db46:	9401      	str	r4, [sp, #4]
{
   1db48:	4605      	mov	r5, r0
    while(txt[i] != '\0') {
   1db4a:	9b01      	ldr	r3, [sp, #4]
   1db4c:	5ceb      	ldrb	r3, [r5, r3]
   1db4e:	b913      	cbnz	r3, 1db56 <lv_txt_utf8_get_length+0x16>
        len++;
    }

    return len;
}
   1db50:	4620      	mov	r0, r4
   1db52:	b002      	add	sp, #8
   1db54:	bd70      	pop	{r4, r5, r6, pc}
        _lv_txt_encoded_next(txt, &i);
   1db56:	6833      	ldr	r3, [r6, #0]
   1db58:	a901      	add	r1, sp, #4
   1db5a:	4628      	mov	r0, r5
   1db5c:	4798      	blx	r3
        len++;
   1db5e:	3401      	adds	r4, #1
   1db60:	e7f3      	b.n	1db4a <lv_txt_utf8_get_length+0xa>
   1db62:	bf00      	nop
   1db64:	200007d0 	.word	0x200007d0

0001db68 <lv_txt_utf8_prev>:
    (*i)--;
   1db68:	680b      	ldr	r3, [r1, #0]
{
   1db6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    (*i)--;
   1db6c:	3b01      	subs	r3, #1
        c_size = _lv_txt_encoded_size(&txt[*i]);
   1db6e:	4f0e      	ldr	r7, [pc, #56]	; (1dba8 <lv_txt_utf8_prev+0x40>)
    (*i)--;
   1db70:	600b      	str	r3, [r1, #0]
{
   1db72:	4606      	mov	r6, r0
   1db74:	460c      	mov	r4, r1
    (*i)--;
   1db76:	2504      	movs	r5, #4
        c_size = _lv_txt_encoded_size(&txt[*i]);
   1db78:	6820      	ldr	r0, [r4, #0]
   1db7a:	683b      	ldr	r3, [r7, #0]
   1db7c:	4430      	add	r0, r6
   1db7e:	4798      	blx	r3
        if(c_size == 0) {
   1db80:	6823      	ldr	r3, [r4, #0]
   1db82:	b948      	cbnz	r0, 1db98 <lv_txt_utf8_prev+0x30>
            if(*i != 0)
   1db84:	b12b      	cbz	r3, 1db92 <lv_txt_utf8_prev+0x2a>
                (*i)--;
   1db86:	3d01      	subs	r5, #1
   1db88:	3b01      	subs	r3, #1
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   1db8a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
                (*i)--;
   1db8e:	6023      	str	r3, [r4, #0]
        if(cnt >= 4) return 0; /*No UTF-8 char found before the initial*/
   1db90:	d1f2      	bne.n	1db78 <lv_txt_utf8_prev+0x10>
   1db92:	2000      	movs	r0, #0
}
   1db94:	b003      	add	sp, #12
   1db96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t i_tmp  = *i;
   1db98:	9301      	str	r3, [sp, #4]
    uint32_t letter = _lv_txt_encoded_next(txt, &i_tmp); /*Character found, get it*/
   1db9a:	4b04      	ldr	r3, [pc, #16]	; (1dbac <lv_txt_utf8_prev+0x44>)
   1db9c:	a901      	add	r1, sp, #4
   1db9e:	681b      	ldr	r3, [r3, #0]
   1dba0:	4630      	mov	r0, r6
   1dba2:	4798      	blx	r3
    return letter;
   1dba4:	e7f6      	b.n	1db94 <lv_txt_utf8_prev+0x2c>
   1dba6:	bf00      	nop
   1dba8:	200007d8 	.word	0x200007d8
   1dbac:	200007d0 	.word	0x200007d0

0001dbb0 <_lv_txt_get_width>:
{
   1dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbb4:	4688      	mov	r8, r1
   1dbb6:	b085      	sub	sp, #20
   1dbb8:	4617      	mov	r7, r2
   1dbba:	461e      	mov	r6, r3
    if(txt == NULL) return 0;
   1dbbc:	4605      	mov	r5, r0
   1dbbe:	2400      	movs	r4, #0
   1dbc0:	2800      	cmp	r0, #0
   1dbc2:	d040      	beq.n	1dc46 <_lv_txt_get_width+0x96>
    if(font == NULL) return 0;
   1dbc4:	2a00      	cmp	r2, #0
   1dbc6:	d040      	beq.n	1dc4a <_lv_txt_get_width+0x9a>
    uint32_t i                   = 0;
   1dbc8:	9403      	str	r4, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1dbca:	f88d 400b 	strb.w	r4, [sp, #11]
    if(length != 0) {
   1dbce:	2900      	cmp	r1, #0
   1dbd0:	d132      	bne.n	1dc38 <_lv_txt_get_width+0x88>
    lv_coord_t width             = 0;
   1dbd2:	460c      	mov	r4, r1
}
   1dbd4:	4620      	mov	r0, r4
   1dbd6:	b005      	add	sp, #20
   1dbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   1dbdc:	f8da 3000 	ldr.w	r3, [sl]
   1dbe0:	a903      	add	r1, sp, #12
   1dbe2:	4628      	mov	r0, r5
   1dbe4:	4798      	blx	r3
   1dbe6:	4683      	mov	fp, r0
            uint32_t letter_next = _lv_txt_encoded_next(&txt[i], NULL);
   1dbe8:	9803      	ldr	r0, [sp, #12]
   1dbea:	f8da 3000 	ldr.w	r3, [sl]
   1dbee:	2100      	movs	r1, #0
   1dbf0:	4428      	add	r0, r5
   1dbf2:	4798      	blx	r3
   1dbf4:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dbf6:	f1b9 0f00 	cmp.w	r9, #0
   1dbfa:	d10e      	bne.n	1dc1a <_lv_txt_get_width+0x6a>
            lv_coord_t char_width = lv_font_get_glyph_width(font, letter, letter_next);
   1dbfc:	4659      	mov	r1, fp
   1dbfe:	4638      	mov	r0, r7
   1dc00:	f00c fe4b 	bl	2a89a <lv_font_get_glyph_width>
   1dc04:	b200      	sxth	r0, r0
            if(char_width > 0) {
   1dc06:	2800      	cmp	r0, #0
   1dc08:	dc11      	bgt.n	1dc2e <_lv_txt_get_width+0x7e>
        while(i < length) {
   1dc0a:	9b03      	ldr	r3, [sp, #12]
   1dc0c:	4598      	cmp	r8, r3
   1dc0e:	d8e5      	bhi.n	1dbdc <_lv_txt_get_width+0x2c>
        if(width > 0) {
   1dc10:	2c00      	cmp	r4, #0
   1dc12:	dddf      	ble.n	1dbd4 <_lv_txt_get_width+0x24>
            width -= letter_space; /*Trim the last letter space. Important if the text is center
   1dc14:	1ba4      	subs	r4, r4, r6
   1dc16:	b224      	sxth	r4, r4
   1dc18:	e7dc      	b.n	1dbd4 <_lv_txt_get_width+0x24>
   1dc1a:	9001      	str	r0, [sp, #4]
                if(_lv_txt_is_cmd(&cmd_state, letter) != false) {
   1dc1c:	4659      	mov	r1, fp
   1dc1e:	f10d 000b 	add.w	r0, sp, #11
   1dc22:	f00c fdf8 	bl	2a816 <_lv_txt_is_cmd>
   1dc26:	9a01      	ldr	r2, [sp, #4]
   1dc28:	2800      	cmp	r0, #0
   1dc2a:	d0e7      	beq.n	1dbfc <_lv_txt_get_width+0x4c>
   1dc2c:	e7ed      	b.n	1dc0a <_lv_txt_get_width+0x5a>
                width += letter_space;
   1dc2e:	4434      	add	r4, r6
   1dc30:	fa00 f484 	sxtah	r4, r0, r4
   1dc34:	b224      	sxth	r4, r4
   1dc36:	e7e8      	b.n	1dc0a <_lv_txt_get_width+0x5a>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dc38:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
            uint32_t letter      = _lv_txt_encoded_next(txt, &i);
   1dc3c:	f8df a010 	ldr.w	sl, [pc, #16]	; 1dc50 <_lv_txt_get_width+0xa0>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dc40:	f009 0901 	and.w	r9, r9, #1
   1dc44:	e7e1      	b.n	1dc0a <_lv_txt_get_width+0x5a>
    if(txt == NULL) return 0;
   1dc46:	4604      	mov	r4, r0
   1dc48:	e7c4      	b.n	1dbd4 <_lv_txt_get_width+0x24>
   1dc4a:	4614      	mov	r4, r2
   1dc4c:	e7c2      	b.n	1dbd4 <_lv_txt_get_width+0x24>
   1dc4e:	bf00      	nop
   1dc50:	200007d0 	.word	0x200007d0

0001dc54 <_lv_txt_get_next_line>:
{
   1dc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc58:	b08f      	sub	sp, #60	; 0x3c
   1dc5a:	4699      	mov	r9, r3
   1dc5c:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   1dc60:	9102      	str	r1, [sp, #8]
   1dc62:	9204      	str	r2, [sp, #16]
   1dc64:	9303      	str	r3, [sp, #12]
    if(txt == NULL) return 0;
   1dc66:	4606      	mov	r6, r0
   1dc68:	b190      	cbz	r0, 1dc90 <_lv_txt_get_next_line+0x3c>
    if(font == NULL) return 0;
   1dc6a:	2900      	cmp	r1, #0
   1dc6c:	f000 80cd 	beq.w	1de0a <_lv_txt_get_next_line+0x1b6>
    if((flag & LV_TXT_FLAG_EXPAND) || (flag & LV_TXT_FLAG_FIT)) {
   1dc70:	9b03      	ldr	r3, [sp, #12]
   1dc72:	f013 0312 	ands.w	r3, r3, #18
   1dc76:	d00e      	beq.n	1dc96 <_lv_txt_get_next_line+0x42>
        for(i = 0; txt[i] != '\n' && txt[i] != '\r' && txt[i] != '\0'; i++) {
   1dc78:	2000      	movs	r0, #0
   1dc7a:	e000      	b.n	1dc7e <_lv_txt_get_next_line+0x2a>
   1dc7c:	3001      	adds	r0, #1
   1dc7e:	5c33      	ldrb	r3, [r6, r0]
   1dc80:	2b0a      	cmp	r3, #10
   1dc82:	f000 80c4 	beq.w	1de0e <_lv_txt_get_next_line+0x1ba>
   1dc86:	2b0d      	cmp	r3, #13
   1dc88:	f000 80c1 	beq.w	1de0e <_lv_txt_get_next_line+0x1ba>
   1dc8c:	2b00      	cmp	r3, #0
   1dc8e:	d1f5      	bne.n	1dc7c <_lv_txt_get_next_line+0x28>
}
   1dc90:	b00f      	add	sp, #60	; 0x3c
   1dc92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dc96:	9a03      	ldr	r2, [sp, #12]
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1dc98:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dc9c:	f012 0202 	ands.w	r2, r2, #2
   1dca0:	9205      	str	r2, [sp, #20]
   1dca2:	f647 4218 	movw	r2, #31768	; 0x7c18
   1dca6:	bf18      	it	ne
   1dca8:	4691      	movne	r9, r2
    uint32_t i = 0;                                        /* Iterating index into txt */
   1dcaa:	930b      	str	r3, [sp, #44]	; 0x2c
    while(txt[i] != '\0' && max_width > 0) {
   1dcac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1dcae:	9300      	str	r3, [sp, #0]
   1dcb0:	eb06 0a03 	add.w	sl, r6, r3
   1dcb4:	5cf3      	ldrb	r3, [r6, r3]
   1dcb6:	2b00      	cmp	r3, #0
   1dcb8:	f000 808e 	beq.w	1ddd8 <_lv_txt_get_next_line+0x184>
   1dcbc:	f1b9 0f00 	cmp.w	r9, #0
   1dcc0:	f340 808a 	ble.w	1ddd8 <_lv_txt_get_next_line+0x184>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1dcc4:	9a05      	ldr	r2, [sp, #20]
   1dcc6:	f647 4318 	movw	r3, #31768	; 0x7c18
   1dcca:	2a00      	cmp	r2, #0
   1dccc:	bf08      	it	eq
   1dcce:	464b      	moveq	r3, r9
   1dcd0:	9307      	str	r3, [sp, #28]
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dcd2:	4b50      	ldr	r3, [pc, #320]	; (1de14 <_lv_txt_get_next_line+0x1c0>)
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1dcd4:	2400      	movs	r4, #0
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dcd6:	681a      	ldr	r2, [r3, #0]
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1dcd8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dcdc:	a90c      	add	r1, sp, #48	; 0x30
   1dcde:	4650      	mov	r0, sl
   1dce0:	4790      	blx	r2
    i_next_next = i_next;
   1dce2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1dce4:	930d      	str	r3, [sp, #52]	; 0x34
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dce6:	9b03      	ldr	r3, [sp, #12]
    uint32_t word_len = 0;   /* Number of characters in the transversed word */
   1dce8:	9401      	str	r4, [sp, #4]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dcea:	f003 0301 	and.w	r3, r3, #1
    letter = _lv_txt_encoded_next(txt, &i_next);
   1dcee:	4680      	mov	r8, r0
    uint32_t break_index = NO_BREAK_FOUND; /* only used for "long" words */
   1dcf0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    lv_coord_t cur_w = 0;  /* Pixel Width of transversed string */
   1dcf4:	4627      	mov	r7, r4
    uint32_t letter_next = 0; /* Letter at i_next */
   1dcf6:	4622      	mov	r2, r4
    uint32_t i = 0, i_next = 0, i_next_next = 0;  /* Iterating index into txt */
   1dcf8:	4625      	mov	r5, r4
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dcfa:	9308      	str	r3, [sp, #32]
    while(txt[i] != '\0') {
   1dcfc:	f81a 1005 	ldrb.w	r1, [sl, r5]
   1dd00:	b949      	cbnz	r1, 1dd16 <_lv_txt_get_next_line+0xc2>
    if(break_index == NO_BREAK_FOUND) {
   1dd02:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1dd06:	d053      	beq.n	1ddb0 <_lv_txt_get_next_line+0x15c>
    if(force) return break_index;
   1dd08:	9b00      	ldr	r3, [sp, #0]
   1dd0a:	465d      	mov	r5, fp
   1dd0c:	2b00      	cmp	r3, #0
   1dd0e:	d057      	beq.n	1ddc0 <_lv_txt_get_next_line+0x16c>
    if(word_w_ptr != NULL) *word_w_ptr = 0; /* Return no word */
   1dd10:	2400      	movs	r4, #0
    return 0;
   1dd12:	4625      	mov	r5, r4
   1dd14:	e054      	b.n	1ddc0 <_lv_txt_get_next_line+0x16c>
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1dd16:	4b3f      	ldr	r3, [pc, #252]	; (1de14 <_lv_txt_get_next_line+0x1c0>)
   1dd18:	a90d      	add	r1, sp, #52	; 0x34
   1dd1a:	681a      	ldr	r2, [r3, #0]
   1dd1c:	4650      	mov	r0, sl
   1dd1e:	4790      	blx	r2
        word_len++;
   1dd20:	9b01      	ldr	r3, [sp, #4]
   1dd22:	3301      	adds	r3, #1
   1dd24:	9306      	str	r3, [sp, #24]
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd26:	9b08      	ldr	r3, [sp, #32]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1dd28:	4602      	mov	r2, r0
        if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1dd2a:	b173      	cbz	r3, 1dd4a <_lv_txt_get_next_line+0xf6>
   1dd2c:	9009      	str	r0, [sp, #36]	; 0x24
            if(_lv_txt_is_cmd(cmd_state, letter) != false) {
   1dd2e:	4641      	mov	r1, r8
   1dd30:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1dd34:	f00c fd6f 	bl	2a816 <_lv_txt_is_cmd>
   1dd38:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1dd3a:	b130      	cbz	r0, 1dd4a <_lv_txt_get_next_line+0xf6>
        i_next = i_next_next;
   1dd3c:	e9dd 510c 	ldrd	r5, r1, [sp, #48]	; 0x30
    uint8_t i;
    bool ret = false;

    /*Compare the letter to TXT_BREAK_CHARS*/
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1dd40:	9b06      	ldr	r3, [sp, #24]
        i_next = i_next_next;
   1dd42:	910c      	str	r1, [sp, #48]	; 0x30
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1dd44:	9301      	str	r3, [sp, #4]
        letter_next = _lv_txt_encoded_next(txt, &i_next_next);
   1dd46:	4690      	mov	r8, r2
   1dd48:	e7d8      	b.n	1dcfc <_lv_txt_get_next_line+0xa8>
        letter_w = lv_font_get_glyph_width(font, letter, letter_next);
   1dd4a:	4641      	mov	r1, r8
   1dd4c:	9802      	ldr	r0, [sp, #8]
   1dd4e:	9209      	str	r2, [sp, #36]	; 0x24
   1dd50:	f00c fda3 	bl	2a89a <lv_font_get_glyph_width>
   1dd54:	b201      	sxth	r1, r0
        if(letter_w > 0) {
   1dd56:	2900      	cmp	r1, #0
            cur_w += letter_space;
   1dd58:	bfc8      	it	gt
   1dd5a:	9b04      	ldrgt	r3, [sp, #16]
        if(letter_w > 0) {
   1dd5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
        cur_w += letter_w;
   1dd5e:	fa07 f780 	sxtah	r7, r7, r0
   1dd62:	b23f      	sxth	r7, r7
            cur_w += letter_space;
   1dd64:	bfc4      	itt	gt
   1dd66:	18ff      	addgt	r7, r7, r3
   1dd68:	b23f      	sxthgt	r7, r7
        if(break_index == NO_BREAK_FOUND && (cur_w - letter_space) > max_width) {
   1dd6a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1dd6e:	d105      	bne.n	1dd7c <_lv_txt_get_next_line+0x128>
   1dd70:	9b04      	ldr	r3, [sp, #16]
   1dd72:	1af9      	subs	r1, r7, r3
   1dd74:	9b07      	ldr	r3, [sp, #28]
   1dd76:	4299      	cmp	r1, r3
   1dd78:	bfc8      	it	gt
   1dd7a:	46ab      	movgt	fp, r5
        if(letter == '\n' || letter == '\r' || is_break_char(letter)) {
   1dd7c:	f1b8 0f0a 	cmp.w	r8, #10
   1dd80:	d010      	beq.n	1dda4 <_lv_txt_get_next_line+0x150>
   1dd82:	f1b8 0f0d 	cmp.w	r8, #13
   1dd86:	d00d      	beq.n	1dda4 <_lv_txt_get_next_line+0x150>
   1dd88:	2100      	movs	r1, #0
    for(i = 0; LV_TXT_BREAK_CHARS[i] != '\0'; i++) {
   1dd8a:	4b23      	ldr	r3, [pc, #140]	; (1de18 <_lv_txt_get_next_line+0x1c4>)
   1dd8c:	b2c8      	uxtb	r0, r1
   1dd8e:	5c18      	ldrb	r0, [r3, r0]
   1dd90:	b920      	cbnz	r0, 1dd9c <_lv_txt_get_next_line+0x148>
        if(word_w_ptr != NULL && break_index == NO_BREAK_FOUND) *word_w_ptr = cur_w;
   1dd92:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1dd96:	bf08      	it	eq
   1dd98:	463c      	moveq	r4, r7
   1dd9a:	e7cf      	b.n	1dd3c <_lv_txt_get_next_line+0xe8>
        if(letter == (uint32_t)LV_TXT_BREAK_CHARS[i]) {
   1dd9c:	4580      	cmp	r8, r0
   1dd9e:	f101 0101 	add.w	r1, r1, #1
   1dda2:	d1f2      	bne.n	1dd8a <_lv_txt_get_next_line+0x136>
            if(i == 0 && break_index == NO_BREAK_FOUND && word_w_ptr != NULL) *word_w_ptr = cur_w;
   1dda4:	2d00      	cmp	r5, #0
   1dda6:	d1ac      	bne.n	1dd02 <_lv_txt_get_next_line+0xae>
   1dda8:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
   1ddac:	d1ac      	bne.n	1dd08 <_lv_txt_get_next_line+0xb4>
   1ddae:	463c      	mov	r4, r7
        if(word_len == 0 || (letter == '\r' && letter_next == '\n')) i = i_next;
   1ddb0:	9b01      	ldr	r3, [sp, #4]
   1ddb2:	b123      	cbz	r3, 1ddbe <_lv_txt_get_next_line+0x16a>
   1ddb4:	f1b8 0f0d 	cmp.w	r8, #13
   1ddb8:	d102      	bne.n	1ddc0 <_lv_txt_get_next_line+0x16c>
   1ddba:	2a0a      	cmp	r2, #10
   1ddbc:	d100      	bne.n	1ddc0 <_lv_txt_get_next_line+0x16c>
   1ddbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
        max_width -= word_w;
   1ddc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ddc2:	eba9 0904 	sub.w	r9, r9, r4
   1ddc6:	fa0f f989 	sxth.w	r9, r9
        if(advance == 0) {
   1ddca:	b975      	cbnz	r5, 1ddea <_lv_txt_get_next_line+0x196>
            if(i == 0) _lv_txt_encoded_next(txt, &i); // prevent inf loops
   1ddcc:	b95b      	cbnz	r3, 1dde6 <_lv_txt_get_next_line+0x192>
   1ddce:	4b11      	ldr	r3, [pc, #68]	; (1de14 <_lv_txt_get_next_line+0x1c0>)
   1ddd0:	a90b      	add	r1, sp, #44	; 0x2c
   1ddd2:	681b      	ldr	r3, [r3, #0]
   1ddd4:	4630      	mov	r0, r6
   1ddd6:	4798      	blx	r3
    if(i == 0) {
   1ddd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ddda:	b923      	cbnz	r3, 1dde6 <_lv_txt_get_next_line+0x192>
        _lv_txt_encoded_next(txt, &i);
   1dddc:	4b0d      	ldr	r3, [pc, #52]	; (1de14 <_lv_txt_get_next_line+0x1c0>)
   1ddde:	a90b      	add	r1, sp, #44	; 0x2c
   1dde0:	681b      	ldr	r3, [r3, #0]
   1dde2:	4630      	mov	r0, r6
   1dde4:	4798      	blx	r3
    return i;
   1dde6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1dde8:	e752      	b.n	1dc90 <_lv_txt_get_next_line+0x3c>
        i += advance;
   1ddea:	441d      	add	r5, r3
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1ddec:	7833      	ldrb	r3, [r6, #0]
        i += advance;
   1ddee:	950b      	str	r5, [sp, #44]	; 0x2c
        if(txt[0] == '\n' || txt[0] == '\r') break;
   1ddf0:	2b0a      	cmp	r3, #10
   1ddf2:	d0f1      	beq.n	1ddd8 <_lv_txt_get_next_line+0x184>
   1ddf4:	2b0d      	cmp	r3, #13
   1ddf6:	d0ef      	beq.n	1ddd8 <_lv_txt_get_next_line+0x184>
        if(txt[i] == '\n' || txt[i] == '\r') {
   1ddf8:	5d73      	ldrb	r3, [r6, r5]
   1ddfa:	2b0a      	cmp	r3, #10
   1ddfc:	d002      	beq.n	1de04 <_lv_txt_get_next_line+0x1b0>
   1ddfe:	2b0d      	cmp	r3, #13
   1de00:	f47f af54 	bne.w	1dcac <_lv_txt_get_next_line+0x58>
            i++;  /* Include the following newline in the current line */
   1de04:	3501      	adds	r5, #1
   1de06:	950b      	str	r5, [sp, #44]	; 0x2c
            break;
   1de08:	e7e6      	b.n	1ddd8 <_lv_txt_get_next_line+0x184>
    if(txt == NULL) return 0;
   1de0a:	9802      	ldr	r0, [sp, #8]
   1de0c:	e740      	b.n	1dc90 <_lv_txt_get_next_line+0x3c>
        if(txt[i] != '\0') i++;    /*To go beyond `\n`*/
   1de0e:	3001      	adds	r0, #1
   1de10:	e73e      	b.n	1dc90 <_lv_txt_get_next_line+0x3c>
   1de12:	bf00      	nop
   1de14:	200007d0 	.word	0x200007d0
   1de18:	000308bc 	.word	0x000308bc

0001de1c <_lv_txt_get_size>:
{
   1de1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de20:	b087      	sub	sp, #28
    size_res->x = 0;
   1de22:	2500      	movs	r5, #0
{
   1de24:	4698      	mov	r8, r3
   1de26:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   1de2a:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	; 0x40
   1de2e:	f9bd a044 	ldrsh.w	sl, [sp, #68]	; 0x44
   1de32:	9303      	str	r3, [sp, #12]
   1de34:	4604      	mov	r4, r0
   1de36:	4616      	mov	r6, r2
    size_res->x = 0;
   1de38:	8005      	strh	r5, [r0, #0]
    size_res->y = 0;
   1de3a:	8045      	strh	r5, [r0, #2]
    if(text == NULL) return;
   1de3c:	9102      	str	r1, [sp, #8]
   1de3e:	b329      	cbz	r1, 1de8c <_lv_txt_get_size+0x70>
    if(font == NULL) return;
   1de40:	b322      	cbz	r2, 1de8c <_lv_txt_get_size+0x70>
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1de42:	9b03      	ldr	r3, [sp, #12]
    uint16_t letter_height = lv_font_get_line_height(font);
   1de44:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
    if(flag & LV_TXT_FLAG_EXPAND) max_width = LV_COORD_MAX;
   1de48:	f013 0f02 	tst.w	r3, #2
   1de4c:	f647 4318 	movw	r3, #31768	; 0x7c18
   1de50:	bf18      	it	ne
   1de52:	469a      	movne	sl, r3
    uint16_t letter_height = lv_font_get_line_height(font);
   1de54:	8913      	ldrh	r3, [r2, #8]
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1de56:	443b      	add	r3, r7
   1de58:	9304      	str	r3, [sp, #16]
            size_res->y += line_space;
   1de5a:	eb07 030b 	add.w	r3, r7, fp
   1de5e:	9305      	str	r3, [sp, #20]
    while(text[line_start] != '\0') {
   1de60:	9b02      	ldr	r3, [sp, #8]
   1de62:	eb03 0905 	add.w	r9, r3, r5
   1de66:	5d5b      	ldrb	r3, [r3, r5]
   1de68:	b99b      	cbnz	r3, 1de92 <_lv_txt_get_size+0x76>
    if((line_start != 0) && (text[line_start - 1] == '\n' || text[line_start - 1] == '\r')) {
   1de6a:	b155      	cbz	r5, 1de82 <_lv_txt_get_size+0x66>
   1de6c:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   1de70:	2b0a      	cmp	r3, #10
   1de72:	d001      	beq.n	1de78 <_lv_txt_get_size+0x5c>
   1de74:	2b0d      	cmp	r3, #13
   1de76:	d104      	bne.n	1de82 <_lv_txt_get_size+0x66>
        size_res->y += letter_height + line_space;
   1de78:	8862      	ldrh	r2, [r4, #2]
   1de7a:	eb07 030b 	add.w	r3, r7, fp
   1de7e:	4413      	add	r3, r2
   1de80:	8063      	strh	r3, [r4, #2]
    if(size_res->y == 0)
   1de82:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1de86:	bb8b      	cbnz	r3, 1deec <_lv_txt_get_size+0xd0>
        size_res->y = letter_height;
   1de88:	f8a4 b002 	strh.w	fp, [r4, #2]
}
   1de8c:	b007      	add	sp, #28
   1de8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1de92:	9b03      	ldr	r3, [sp, #12]
   1de94:	9300      	str	r3, [sp, #0]
   1de96:	4642      	mov	r2, r8
   1de98:	4653      	mov	r3, sl
   1de9a:	4631      	mov	r1, r6
   1de9c:	4648      	mov	r0, r9
   1de9e:	f7ff fed9 	bl	1dc54 <_lv_txt_get_next_line>
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1dea2:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   1dea6:	9a04      	ldr	r2, [sp, #16]
   1dea8:	441a      	add	r2, r3
   1deaa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
        new_line_start += _lv_txt_get_next_line(&text[line_start], font, letter_space, max_width, flag);
   1deae:	4601      	mov	r1, r0
   1deb0:	4405      	add	r5, r0
        if((unsigned long)size_res->y + (unsigned long)letter_height + (unsigned long)line_space > LV_MAX_OF(lv_coord_t)) {
   1deb2:	d30a      	bcc.n	1deca <_lv_txt_get_size+0xae>
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   1deb4:	4b0f      	ldr	r3, [pc, #60]	; (1def4 <_lv_txt_get_size+0xd8>)
   1deb6:	9310      	str	r3, [sp, #64]	; 0x40
   1deb8:	490f      	ldr	r1, [pc, #60]	; (1def8 <_lv_txt_get_size+0xdc>)
   1deba:	4b10      	ldr	r3, [pc, #64]	; (1defc <_lv_txt_get_size+0xe0>)
   1debc:	2271      	movs	r2, #113	; 0x71
   1debe:	2002      	movs	r0, #2
}
   1dec0:	b007      	add	sp, #28
   1dec2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            LV_LOG_WARN("lv_txt_get_size: integer overflow while calculating text height");
   1dec6:	f7ff bb1b 	b.w	1d500 <_lv_log_add>
            size_res->y += line_space;
   1deca:	9a05      	ldr	r2, [sp, #20]
   1decc:	4413      	add	r3, r2
   1dece:	8063      	strh	r3, [r4, #2]
        lv_coord_t act_line_length = _lv_txt_get_width(&text[line_start], new_line_start - line_start, font, letter_space,
   1ded0:	9b03      	ldr	r3, [sp, #12]
   1ded2:	9300      	str	r3, [sp, #0]
   1ded4:	4632      	mov	r2, r6
   1ded6:	4643      	mov	r3, r8
   1ded8:	4648      	mov	r0, r9
   1deda:	f7ff fe69 	bl	1dbb0 <_lv_txt_get_width>
        size_res->x = LV_MATH_MAX(act_line_length, size_res->x);
   1dede:	f9b4 3000 	ldrsh.w	r3, [r4]
   1dee2:	4283      	cmp	r3, r0
   1dee4:	bfb8      	it	lt
   1dee6:	4603      	movlt	r3, r0
   1dee8:	8023      	strh	r3, [r4, #0]
        line_start  = new_line_start;
   1deea:	e7b9      	b.n	1de60 <_lv_txt_get_size+0x44>
        size_res->y -= line_space;
   1deec:	1bdf      	subs	r7, r3, r7
   1deee:	8067      	strh	r7, [r4, #2]
   1def0:	e7cc      	b.n	1de8c <_lv_txt_get_size+0x70>
   1def2:	bf00      	nop
   1def4:	000308fa 	.word	0x000308fa
   1def8:	000308c4 	.word	0x000308c4
   1defc:	0003093a 	.word	0x0003093a

0001df00 <get_glyph_dsc_id.isra.0.part.0>:

/**********************
 *   STATIC FUNCTIONS
 **********************/

static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   1df00:	b5f0      	push	{r4, r5, r6, r7, lr}
{
    if(letter == '\0') return 0;

    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1df02:	6804      	ldr	r4, [r0, #0]

    /*Check the cache first*/
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1df04:	69a3      	ldr	r3, [r4, #24]
   1df06:	428b      	cmp	r3, r1
static uint32_t get_glyph_dsc_id(const lv_font_t * font, uint32_t letter)
   1df08:	b085      	sub	sp, #20
   1df0a:	460d      	mov	r5, r1
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1df0c:	d00b      	beq.n	1df26 <get_glyph_dsc_id.isra.0.part.0+0x26>

    uint16_t i;
    for(i = 0; i < fdsc->cmap_num; i++) {
   1df0e:	8a67      	ldrh	r7, [r4, #18]
   1df10:	2300      	movs	r3, #0
   1df12:	f3c7 0709 	ubfx	r7, r7, #0, #10
   1df16:	f04f 0c14 	mov.w	ip, #20
   1df1a:	b29a      	uxth	r2, r3
   1df1c:	4297      	cmp	r7, r2
   1df1e:	d805      	bhi.n	1df2c <get_glyph_dsc_id.isra.0.part.0+0x2c>
        fdsc->last_letter = letter;
        fdsc->last_glyph_id = glyph_id;
        return glyph_id;
    }

    fdsc->last_letter = letter;
   1df20:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   1df22:	2000      	movs	r0, #0
   1df24:	e012      	b.n	1df4c <get_glyph_dsc_id.isra.0.part.0+0x4c>
    if(letter == fdsc->last_letter) return fdsc->last_glyph_id;
   1df26:	69e0      	ldr	r0, [r4, #28]
    return 0;

}
   1df28:	b005      	add	sp, #20
   1df2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1df2c:	68a2      	ldr	r2, [r4, #8]
   1df2e:	fb0c f603 	mul.w	r6, ip, r3
   1df32:	1991      	adds	r1, r2, r6
   1df34:	5992      	ldr	r2, [r2, r6]
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1df36:	8888      	ldrh	r0, [r1, #4]
        uint32_t rcp = letter - fdsc->cmaps[i].range_start;
   1df38:	1aaa      	subs	r2, r5, r2
        if(rcp > fdsc->cmaps[i].range_length) continue;
   1df3a:	4282      	cmp	r2, r0
   1df3c:	f103 0301 	add.w	r3, r3, #1
   1df40:	d8eb      	bhi.n	1df1a <get_glyph_dsc_id.isra.0.part.0+0x1a>
        if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY) {
   1df42:	7c8b      	ldrb	r3, [r1, #18]
   1df44:	b923      	cbnz	r3, 1df50 <get_glyph_dsc_id.isra.0.part.0+0x50>
            glyph_id = fdsc->cmaps[i].glyph_id_start + rcp;
   1df46:	88c8      	ldrh	r0, [r1, #6]
   1df48:	4410      	add	r0, r2
        fdsc->last_letter = letter;
   1df4a:	61a5      	str	r5, [r4, #24]
    fdsc->last_glyph_id = 0;
   1df4c:	61e0      	str	r0, [r4, #28]
    return 0;
   1df4e:	e7eb      	b.n	1df28 <get_glyph_dsc_id.isra.0.part.0+0x28>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL) {
   1df50:	2b01      	cmp	r3, #1
   1df52:	d104      	bne.n	1df5e <get_glyph_dsc_id.isra.0.part.0+0x5e>
            glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_8[rcp];
   1df54:	68cb      	ldr	r3, [r1, #12]
   1df56:	5c98      	ldrb	r0, [r3, r2]
   1df58:	88cb      	ldrh	r3, [r1, #6]
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1df5a:	4418      	add	r0, r3
   1df5c:	e7f5      	b.n	1df4a <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_TINY) {
   1df5e:	2b02      	cmp	r3, #2
   1df60:	d113      	bne.n	1df8a <get_glyph_dsc_id.isra.0.part.0+0x8a>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1df62:	4817      	ldr	r0, [pc, #92]	; (1dfc0 <get_glyph_dsc_id.isra.0.part.0+0xc0>)
            uint16_t key = rcp;
   1df64:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1df68:	8a0a      	ldrh	r2, [r1, #16]
   1df6a:	9000      	str	r0, [sp, #0]
   1df6c:	6889      	ldr	r1, [r1, #8]
   1df6e:	f10d 000e 	add.w	r0, sp, #14
   1df72:	f00c fc6b 	bl	2a84c <_lv_utils_bsearch>
            if(p) {
   1df76:	2800      	cmp	r0, #0
   1df78:	d0e7      	beq.n	1df4a <get_glyph_dsc_id.isra.0.part.0+0x4a>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1df7a:	68a3      	ldr	r3, [r4, #8]
   1df7c:	441e      	add	r6, r3
   1df7e:	68b3      	ldr	r3, [r6, #8]
   1df80:	1ac0      	subs	r0, r0, r3
                glyph_id = fdsc->cmaps[i].glyph_id_start + ofs;
   1df82:	88f3      	ldrh	r3, [r6, #6]
   1df84:	eb03 0050 	add.w	r0, r3, r0, lsr #1
   1df88:	e7df      	b.n	1df4a <get_glyph_dsc_id.isra.0.part.0+0x4a>
        else if(fdsc->cmaps[i].type == LV_FONT_FMT_TXT_CMAP_SPARSE_FULL) {
   1df8a:	2b03      	cmp	r3, #3
   1df8c:	d115      	bne.n	1dfba <get_glyph_dsc_id.isra.0.part.0+0xba>
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1df8e:	4b0c      	ldr	r3, [pc, #48]	; (1dfc0 <get_glyph_dsc_id.isra.0.part.0+0xc0>)
            uint16_t key = rcp;
   1df90:	f8ad 200e 	strh.w	r2, [sp, #14]
            uint8_t * p = _lv_utils_bsearch(&key, fdsc->cmaps[i].unicode_list, fdsc->cmaps[i].list_length,
   1df94:	8a0a      	ldrh	r2, [r1, #16]
   1df96:	9300      	str	r3, [sp, #0]
   1df98:	6889      	ldr	r1, [r1, #8]
   1df9a:	2302      	movs	r3, #2
   1df9c:	f10d 000e 	add.w	r0, sp, #14
   1dfa0:	f00c fc54 	bl	2a84c <_lv_utils_bsearch>
            if(p) {
   1dfa4:	2800      	cmp	r0, #0
   1dfa6:	d0d0      	beq.n	1df4a <get_glyph_dsc_id.isra.0.part.0+0x4a>
                lv_uintptr_t ofs = (lv_uintptr_t)(p - (uint8_t *) fdsc->cmaps[i].unicode_list);
   1dfa8:	68a3      	ldr	r3, [r4, #8]
   1dfaa:	441e      	add	r6, r3
   1dfac:	68b3      	ldr	r3, [r6, #8]
   1dfae:	1ac0      	subs	r0, r0, r3
                ofs = ofs >> 1;     /*The list stores `uint16_t` so the get the index divide by 2*/
   1dfb0:	0840      	lsrs	r0, r0, #1
                glyph_id = fdsc->cmaps[i].glyph_id_start + gid_ofs_16[ofs];
   1dfb2:	68f3      	ldr	r3, [r6, #12]
   1dfb4:	5c18      	ldrb	r0, [r3, r0]
   1dfb6:	88f3      	ldrh	r3, [r6, #6]
   1dfb8:	e7cf      	b.n	1df5a <get_glyph_dsc_id.isra.0.part.0+0x5a>
        uint32_t glyph_id = 0;
   1dfba:	2000      	movs	r0, #0
   1dfbc:	e7c5      	b.n	1df4a <get_glyph_dsc_id.isra.0.part.0+0x4a>
   1dfbe:	bf00      	nop
   1dfc0:	0002a8d7 	.word	0x0002a8d7

0001dfc4 <lv_font_get_glyph_dsc_fmt_txt>:
    if(unicode_letter == '\t') {
   1dfc4:	2a09      	cmp	r2, #9
{
   1dfc6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1dfca:	460c      	mov	r4, r1
   1dfcc:	4680      	mov	r8, r0
   1dfce:	4611      	mov	r1, r2
   1dfd0:	469a      	mov	sl, r3
    if(unicode_letter == '\t') {
   1dfd2:	d006      	beq.n	1dfe2 <lv_font_get_glyph_dsc_fmt_txt+0x1e>
    if(letter == '\0') return 0;
   1dfd4:	2a00      	cmp	r2, #0
   1dfd6:	d135      	bne.n	1e044 <lv_font_get_glyph_dsc_fmt_txt+0x80>
    if(!gid) return false;
   1dfd8:	2600      	movs	r6, #0
}
   1dfda:	4630      	mov	r0, r6
   1dfdc:	b004      	add	sp, #16
   1dfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        is_tab = true;
   1dfe2:	2601      	movs	r6, #1
        unicode_letter = ' ';
   1dfe4:	2120      	movs	r1, #32
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;
   1dfe6:	46c1      	mov	r9, r8
   1dfe8:	f859 7f10 	ldr.w	r7, [r9, #16]!
   1dfec:	4648      	mov	r0, r9
   1dfee:	f7ff ff87 	bl	1df00 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return false;
   1dff2:	4605      	mov	r5, r0
   1dff4:	2800      	cmp	r0, #0
   1dff6:	d0ef      	beq.n	1dfd8 <lv_font_get_glyph_dsc_fmt_txt+0x14>
    if(fdsc->kern_dsc) {
   1dff8:	68fb      	ldr	r3, [r7, #12]
   1dffa:	bb2b      	cbnz	r3, 1e048 <lv_font_get_glyph_dsc_fmt_txt+0x84>
    int8_t kvalue = 0;
   1dffc:	2000      	movs	r0, #0
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   1dffe:	687b      	ldr	r3, [r7, #4]
   1e000:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1e004:	8a3b      	ldrh	r3, [r7, #16]
   1e006:	4343      	muls	r3, r0
    uint32_t adv_w = gdsc->adv_w;
   1e008:	8868      	ldrh	r0, [r5, #2]
    int32_t kv = ((int32_t)((int32_t)kvalue * fdsc->kern_scale) >> 4);
   1e00a:	111b      	asrs	r3, r3, #4
    uint32_t adv_w = gdsc->adv_w;
   1e00c:	f3c0 120b 	ubfx	r2, r0, #4, #12
   1e010:	0900      	lsrs	r0, r0, #4
    if(is_tab) adv_w *= 2;
   1e012:	b106      	cbz	r6, 1e016 <lv_font_get_glyph_dsc_fmt_txt+0x52>
   1e014:	0050      	lsls	r0, r2, #1
    adv_w  = (adv_w + (1 << 3)) >> 4;
   1e016:	3308      	adds	r3, #8
   1e018:	4403      	add	r3, r0
   1e01a:	091b      	lsrs	r3, r3, #4
    dsc_out->adv_w = adv_w;
   1e01c:	8023      	strh	r3, [r4, #0]
    dsc_out->box_h = gdsc->box_h;
   1e01e:	796b      	ldrb	r3, [r5, #5]
   1e020:	80a3      	strh	r3, [r4, #4]
    dsc_out->box_w = gdsc->box_w;
   1e022:	792b      	ldrb	r3, [r5, #4]
   1e024:	8063      	strh	r3, [r4, #2]
    dsc_out->ofs_x = gdsc->ofs_x;
   1e026:	f995 2006 	ldrsb.w	r2, [r5, #6]
   1e02a:	80e2      	strh	r2, [r4, #6]
    dsc_out->ofs_y = gdsc->ofs_y;
   1e02c:	f995 2007 	ldrsb.w	r2, [r5, #7]
   1e030:	8122      	strh	r2, [r4, #8]
    dsc_out->bpp   = (uint8_t)fdsc->bpp;
   1e032:	7cfa      	ldrb	r2, [r7, #19]
   1e034:	f3c2 0283 	ubfx	r2, r2, #2, #4
   1e038:	72a2      	strb	r2, [r4, #10]
    if(is_tab) dsc_out->box_w = dsc_out->box_w * 2;
   1e03a:	2e00      	cmp	r6, #0
   1e03c:	d060      	beq.n	1e100 <lv_font_get_glyph_dsc_fmt_txt+0x13c>
   1e03e:	005b      	lsls	r3, r3, #1
   1e040:	8063      	strh	r3, [r4, #2]
   1e042:	e7ca      	b.n	1dfda <lv_font_get_glyph_dsc_fmt_txt+0x16>
    bool is_tab = false;
   1e044:	2600      	movs	r6, #0
   1e046:	e7ce      	b.n	1dfe6 <lv_font_get_glyph_dsc_fmt_txt+0x22>
    if(letter == '\0') return 0;
   1e048:	f1ba 0f00 	cmp.w	sl, #0
   1e04c:	d0d6      	beq.n	1dffc <lv_font_get_glyph_dsc_fmt_txt+0x38>
   1e04e:	4651      	mov	r1, sl
   1e050:	4648      	mov	r0, r9
   1e052:	f7ff ff55 	bl	1df00 <get_glyph_dsc_id.isra.0.part.0>
        if(gid_next) {
   1e056:	2800      	cmp	r0, #0
   1e058:	d0d0      	beq.n	1dffc <lv_font_get_glyph_dsc_fmt_txt+0x38>
            kvalue = get_kern_value(font, gid, gid_next);
   1e05a:	f8d8 3010 	ldr.w	r3, [r8, #16]
{
    lv_font_fmt_txt_dsc_t * fdsc = (lv_font_fmt_txt_dsc_t *) font->dsc;

    int8_t value = 0;

    if(fdsc->kern_classes == 0) {
   1e05e:	f8d3 800c 	ldr.w	r8, [r3, #12]
   1e062:	7cdb      	ldrb	r3, [r3, #19]
   1e064:	065b      	lsls	r3, r3, #25
   1e066:	d436      	bmi.n	1e0d6 <lv_font_get_glyph_dsc_fmt_txt+0x112>
        /*Kern pairs*/
        const lv_font_fmt_txt_kern_pair_t * kdsc = fdsc->kern_dsc;
        if(kdsc->glyph_ids_size == 0) {
   1e068:	f898 300b 	ldrb.w	r3, [r8, #11]
   1e06c:	f013 0303 	ands.w	r3, r3, #3
   1e070:	d119      	bne.n	1e0a6 <lv_font_get_glyph_dsc_fmt_txt+0xe2>
            /* Use binary search to find the kern value.
             * The pairs are ordered left_id first, then right_id secondly. */
            const uint8_t * g_ids = kdsc->glyph_ids;
   1e072:	f8d8 9000 	ldr.w	r9, [r8]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1e076:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e07a:	4b22      	ldr	r3, [pc, #136]	; (1e104 <lv_font_get_glyph_dsc_fmt_txt+0x140>)
   1e07c:	9300      	str	r3, [sp, #0]
            uint16_t g_id_both = (gid_right << 8) + gid_left; /*Create one number from the ids*/
   1e07e:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   1e082:	f8ad 000c 	strh.w	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 2, kern_pair_8_compare);
   1e086:	2302      	movs	r3, #2
   1e088:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e08c:	4649      	mov	r1, r9
   1e08e:	a803      	add	r0, sp, #12
   1e090:	f00c fbdc 	bl	2a84c <_lv_utils_bsearch>

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
   1e094:	2800      	cmp	r0, #0
   1e096:	d0b2      	beq.n	1dffe <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - g_ids);
   1e098:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 1;     /*ofs is for pair, divide by 2 to refer as a single value*/
   1e09c:	0840      	lsrs	r0, r0, #1

            /*If the `g_id_both` were found get its index from the pointer*/
            if(kid_p) {
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
                value = kdsc->values[ofs];
   1e09e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e0a2:	5618      	ldrsb	r0, [r3, r0]
   1e0a4:	e7ab      	b.n	1dffe <lv_font_get_glyph_dsc_fmt_txt+0x3a>
        else if(kdsc->glyph_ids_size == 1) {
   1e0a6:	2b01      	cmp	r3, #1
   1e0a8:	d1a8      	bne.n	1dffc <lv_font_get_glyph_dsc_fmt_txt+0x38>
            const uint16_t * g_ids = kdsc->glyph_ids;
   1e0aa:	f8d8 9000 	ldr.w	r9, [r8]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1e0ae:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e0b2:	4b15      	ldr	r3, [pc, #84]	; (1e108 <lv_font_get_glyph_dsc_fmt_txt+0x144>)
   1e0b4:	9300      	str	r3, [sp, #0]
            lv_uintptr_t g_id_both = (uint32_t)((uint32_t)gid_right << 8) + gid_left; /*Create one number from the ids*/
   1e0b6:	eb05 2000 	add.w	r0, r5, r0, lsl #8
   1e0ba:	9003      	str	r0, [sp, #12]
            uint8_t * kid_p = _lv_utils_bsearch(&g_id_both, g_ids, kdsc->pair_cnt, 4, kern_pair_16_compare);
   1e0bc:	2304      	movs	r3, #4
   1e0be:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   1e0c2:	4649      	mov	r1, r9
   1e0c4:	a803      	add	r0, sp, #12
   1e0c6:	f00c fbc1 	bl	2a84c <_lv_utils_bsearch>
            if(kid_p) {
   1e0ca:	2800      	cmp	r0, #0
   1e0cc:	d097      	beq.n	1dffe <lv_font_get_glyph_dsc_fmt_txt+0x3a>
                lv_uintptr_t ofs = (lv_uintptr_t)(kid_p - (const uint8_t *)g_ids);
   1e0ce:	eba0 0009 	sub.w	r0, r0, r9
                ofs = ofs >> 4;     /*ofs is 4 byte pairs, divide by 4 to refer as a single value*/
   1e0d2:	0900      	lsrs	r0, r0, #4
   1e0d4:	e7e3      	b.n	1e09e <lv_font_get_glyph_dsc_fmt_txt+0xda>
        }
    }
    else {
        /*Kern classes*/
        const lv_font_fmt_txt_kern_classes_t * kdsc = fdsc->kern_dsc;
        uint8_t left_class = kdsc->left_class_mapping[gid_left];
   1e0d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1e0da:	5d5b      	ldrb	r3, [r3, r5]
        uint8_t right_class = kdsc->right_class_mapping[gid_right];

        /* If class = 0, kerning not exist for that glyph
         * else got the value form `class_pair_values` 2D array*/
        if(left_class > 0 && right_class > 0) {
   1e0dc:	2b00      	cmp	r3, #0
   1e0de:	d08d      	beq.n	1dffc <lv_font_get_glyph_dsc_fmt_txt+0x38>
        uint8_t right_class = kdsc->right_class_mapping[gid_right];
   1e0e0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e0e4:	5c11      	ldrb	r1, [r2, r0]
        if(left_class > 0 && right_class > 0) {
   1e0e6:	2900      	cmp	r1, #0
   1e0e8:	d088      	beq.n	1dffc <lv_font_get_glyph_dsc_fmt_txt+0x38>
            value = kdsc->class_pair_values[(left_class - 1) * kdsc->right_class_cnt + (right_class - 1)];
   1e0ea:	f8d8 2000 	ldr.w	r2, [r8]
   1e0ee:	f898 000d 	ldrb.w	r0, [r8, #13]
   1e0f2:	3b01      	subs	r3, #1
   1e0f4:	440a      	add	r2, r1
   1e0f6:	fb00 2303 	mla	r3, r0, r3, r2
   1e0fa:	f913 0c01 	ldrsb.w	r0, [r3, #-1]
   1e0fe:	e77e      	b.n	1dffe <lv_font_get_glyph_dsc_fmt_txt+0x3a>
    return true;
   1e100:	2601      	movs	r6, #1
   1e102:	e76a      	b.n	1dfda <lv_font_get_glyph_dsc_fmt_txt+0x16>
   1e104:	0002a8b3 	.word	0x0002a8b3
   1e108:	0002a8c5 	.word	0x0002a8c5

0001e10c <_lv_font_clean_up_fmt_txt>:
{
   1e10c:	b510      	push	{r4, lr}
    if(LV_GC_ROOT(_lv_font_decompr_buf)) {
   1e10e:	4c04      	ldr	r4, [pc, #16]	; (1e120 <_lv_font_clean_up_fmt_txt+0x14>)
   1e110:	6820      	ldr	r0, [r4, #0]
   1e112:	b118      	cbz	r0, 1e11c <_lv_font_clean_up_fmt_txt+0x10>
        lv_mem_free(LV_GC_ROOT(_lv_font_decompr_buf));
   1e114:	f7ff fa44 	bl	1d5a0 <lv_mem_free>
        LV_GC_ROOT(_lv_font_decompr_buf) = NULL;
   1e118:	2300      	movs	r3, #0
   1e11a:	6023      	str	r3, [r4, #0]
}
   1e11c:	bd10      	pop	{r4, pc}
   1e11e:	bf00      	nop
   1e120:	20003f38 	.word	0x20003f38

0001e124 <apply_theme>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static void apply_theme(lv_theme_t * th, lv_obj_t * obj, lv_theme_style_t name)
{
   1e124:	b570      	push	{r4, r5, r6, lr}
   1e126:	4604      	mov	r4, r0
    if(th->base) {
   1e128:	6880      	ldr	r0, [r0, #8]
{
   1e12a:	460d      	mov	r5, r1
   1e12c:	4616      	mov	r6, r2
    if(th->base) {
   1e12e:	b108      	cbz	r0, 1e134 <apply_theme+0x10>
        apply_theme(th->base, obj, name);
   1e130:	f7ff fff8 	bl	1e124 <apply_theme>
    }

    /*apply_xcb is deprecated, use apply_cb instead*/
    if(th->apply_xcb) {
   1e134:	6863      	ldr	r3, [r4, #4]
   1e136:	b123      	cbz	r3, 1e142 <apply_theme+0x1e>
        th->apply_xcb(obj, name);
   1e138:	4631      	mov	r1, r6
   1e13a:	4628      	mov	r0, r5
    }
    else if(th->apply_cb) {
        th->apply_cb(act_theme, obj, name);
    }
}
   1e13c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_xcb(obj, name);
   1e140:	4718      	bx	r3
    else if(th->apply_cb) {
   1e142:	6823      	ldr	r3, [r4, #0]
   1e144:	b133      	cbz	r3, 1e154 <apply_theme+0x30>
        th->apply_cb(act_theme, obj, name);
   1e146:	4804      	ldr	r0, [pc, #16]	; (1e158 <apply_theme+0x34>)
   1e148:	4632      	mov	r2, r6
   1e14a:	4629      	mov	r1, r5
   1e14c:	6800      	ldr	r0, [r0, #0]
}
   1e14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        th->apply_cb(act_theme, obj, name);
   1e152:	4718      	bx	r3
}
   1e154:	bd70      	pop	{r4, r5, r6, pc}
   1e156:	bf00      	nop
   1e158:	20004010 	.word	0x20004010

0001e15c <lv_theme_set_act>:
    act_theme = th;
   1e15c:	4b01      	ldr	r3, [pc, #4]	; (1e164 <lv_theme_set_act+0x8>)
   1e15e:	6018      	str	r0, [r3, #0]
}
   1e160:	4770      	bx	lr
   1e162:	bf00      	nop
   1e164:	20004010 	.word	0x20004010

0001e168 <lv_theme_apply>:
{
   1e168:	b538      	push	{r3, r4, r5, lr}

static void clear_styles(lv_obj_t * obj, lv_theme_style_t name)
{
    switch(name) {
   1e16a:	1e4b      	subs	r3, r1, #1
   1e16c:	2b05      	cmp	r3, #5
{
   1e16e:	4605      	mov	r5, r0
   1e170:	460c      	mov	r4, r1
    switch(name) {
   1e172:	d802      	bhi.n	1e17a <lv_theme_apply+0x12>
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            lv_obj_clean_style_list(obj, LV_OBJ_PART_MAIN);
   1e174:	2100      	movs	r1, #0
   1e176:	f7fc fa3b 	bl	1a5f0 <lv_obj_clean_style_list>
    apply_theme(act_theme, obj, name);
   1e17a:	4b04      	ldr	r3, [pc, #16]	; (1e18c <lv_theme_apply+0x24>)
   1e17c:	4622      	mov	r2, r4
   1e17e:	6818      	ldr	r0, [r3, #0]
   1e180:	4629      	mov	r1, r5
}
   1e182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    apply_theme(act_theme, obj, name);
   1e186:	f7ff bfcd 	b.w	1e124 <apply_theme>
   1e18a:	bf00      	nop
   1e18c:	20004010 	.word	0x20004010

0001e190 <lv_theme_get_font_normal>:
    return act_theme->font_normal;
   1e190:	4b01      	ldr	r3, [pc, #4]	; (1e198 <lv_theme_get_font_normal+0x8>)
   1e192:	681b      	ldr	r3, [r3, #0]
}
   1e194:	6958      	ldr	r0, [r3, #20]
   1e196:	4770      	bx	lr
   1e198:	20004010 	.word	0x20004010

0001e19c <theme_apply>:
{
    LV_UNUSED(th);

    lv_style_list_t * list;

    switch(name) {
   1e19c:	3a01      	subs	r2, #1
{
   1e19e:	b570      	push	{r4, r5, r6, lr}
   1e1a0:	460c      	mov	r4, r1
   1e1a2:	2a05      	cmp	r2, #5
   1e1a4:	d80c      	bhi.n	1e1c0 <theme_apply+0x24>
   1e1a6:	e8df f002 	tbb	[pc, r2]
   1e1aa:	1203      	.short	0x1203
   1e1ac:	2d2d121a 	.word	0x2d2d121a
        case LV_THEME_NONE:
            break;

        case LV_THEME_SCR:
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   1e1b0:	2100      	movs	r1, #0
   1e1b2:	4620      	mov	r0, r4
   1e1b4:	f008 f9b6 	bl	26524 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->scr);
   1e1b8:	4b15      	ldr	r3, [pc, #84]	; (1e210 <theme_apply+0x74>)
   1e1ba:	6819      	ldr	r1, [r3, #0]
#if LV_USE_BTN
        case LV_THEME_BTN:
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
            _lv_style_list_add_style(list, &styles->bg);
            _lv_style_list_add_style(list, &styles->btn);
            _lv_style_list_add_style(list, &styles->txt_underline);
   1e1bc:	f7fd f962 	bl	1b484 <_lv_style_list_add_style>
        default:
            break;
    }


    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1e1c0:	22ff      	movs	r2, #255	; 0xff
   1e1c2:	4620      	mov	r0, r4
   1e1c4:	4611      	mov	r1, r2


}
   1e1c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1e1ca:	f7fc bcb7 	b.w	1ab3c <lv_obj_refresh_style>
            list = lv_obj_get_style_list(obj, LV_OBJ_PART_MAIN);
   1e1ce:	2100      	movs	r1, #0
   1e1d0:	4620      	mov	r0, r4
   1e1d2:	f008 f9a7 	bl	26524 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
   1e1d6:	4b0e      	ldr	r3, [pc, #56]	; (1e210 <theme_apply+0x74>)
   1e1d8:	6819      	ldr	r1, [r3, #0]
   1e1da:	3104      	adds	r1, #4
   1e1dc:	e7ee      	b.n	1e1bc <theme_apply+0x20>
            _lv_style_list_add_style(list, &styles->bg);
   1e1de:	4e0c      	ldr	r6, [pc, #48]	; (1e210 <theme_apply+0x74>)
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1e1e0:	2100      	movs	r1, #0
   1e1e2:	4620      	mov	r0, r4
   1e1e4:	f008 f99e 	bl	26524 <lv_obj_get_style_list>
            _lv_style_list_add_style(list, &styles->bg);
   1e1e8:	6831      	ldr	r1, [r6, #0]
   1e1ea:	3104      	adds	r1, #4
            list = lv_obj_get_style_list(obj, LV_BTN_PART_MAIN);
   1e1ec:	4605      	mov	r5, r0
            _lv_style_list_add_style(list, &styles->bg);
   1e1ee:	f7fd f949 	bl	1b484 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->btn);
   1e1f2:	6831      	ldr	r1, [r6, #0]
   1e1f4:	4628      	mov	r0, r5
   1e1f6:	310c      	adds	r1, #12
   1e1f8:	f7fd f944 	bl	1b484 <_lv_style_list_add_style>
            _lv_style_list_add_style(list, &styles->txt_underline);
   1e1fc:	6831      	ldr	r1, [r6, #0]
   1e1fe:	4628      	mov	r0, r5
   1e200:	3134      	adds	r1, #52	; 0x34
   1e202:	e7db      	b.n	1e1bc <theme_apply+0x20>
            list = lv_obj_get_style_list(obj, LV_IMG_PART_MAIN);
   1e204:	2100      	movs	r1, #0
   1e206:	4620      	mov	r0, r4
   1e208:	f008 f98c 	bl	26524 <lv_obj_get_style_list>
            break;
   1e20c:	e7d8      	b.n	1e1c0 <theme_apply+0x24>
   1e20e:	bf00      	nop
   1e210:	20004014 	.word	0x20004014

0001e214 <lv_theme_mono_init>:
{
   1e214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e218:	4680      	mov	r8, r0
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1e21a:	2038      	movs	r0, #56	; 0x38
{
   1e21c:	4689      	mov	r9, r1
   1e21e:	4616      	mov	r6, r2
   1e220:	461f      	mov	r7, r3
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1e222:	f7ff f995 	bl	1d550 <lv_mem_alloc>
   1e226:	4bc6      	ldr	r3, [pc, #792]	; (1e540 <lv_theme_mono_init+0x32c>)
    theme.color_primary = color_primary;
   1e228:	4dc6      	ldr	r5, [pc, #792]	; (1e544 <lv_theme_mono_init+0x330>)
        LV_GC_ROOT(_lv_theme_mono_styles) = lv_mem_alloc(sizeof(theme_styles_t));
   1e22a:	6018      	str	r0, [r3, #0]
    theme.font_normal = font_normal;
   1e22c:	9b08      	ldr	r3, [sp, #32]
   1e22e:	616b      	str	r3, [r5, #20]
    theme.font_subtitle = font_subtitle;
   1e230:	9b09      	ldr	r3, [sp, #36]	; 0x24
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_mono_styles);
   1e232:	4cc5      	ldr	r4, [pc, #788]	; (1e548 <lv_theme_mono_init+0x334>)
    theme.font_subtitle = font_subtitle;
   1e234:	61ab      	str	r3, [r5, #24]
    theme.font_title = font_title;
   1e236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        styles = (theme_styles_t *)LV_GC_ROOT(_lv_theme_mono_styles);
   1e238:	6020      	str	r0, [r4, #0]
    theme.flags = flags;
   1e23a:	e9c5 3607 	strd	r3, r6, [r5, #28]
    theme.color_primary = color_primary;
   1e23e:	f8a5 800c 	strh.w	r8, [r5, #12]
    theme.color_secondary = color_secondary;
   1e242:	f8a5 900e 	strh.w	r9, [r5, #14]
    theme.font_small = font_small;
   1e246:	612f      	str	r7, [r5, #16]
    style_init_reset(&styles->scr);
   1e248:	f00c fb65 	bl	2a916 <style_init_reset>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1e24c:	212c      	movs	r1, #44	; 0x2c
   1e24e:	6820      	ldr	r0, [r4, #0]
   1e250:	22ff      	movs	r2, #255	; 0xff
   1e252:	f009 fa2d 	bl	276b0 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->scr, LV_STATE_DEFAULT, BG_COLOR);
   1e256:	7b6b      	ldrb	r3, [r5, #13]
   1e258:	6820      	ldr	r0, [r4, #0]
   1e25a:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e25e:	bf1a      	itte	ne
   1e260:	2100      	movne	r1, #0
   1e262:	460b      	movne	r3, r1
   1e264:	231f      	moveq	r3, #31
   1e266:	f04f 0200 	mov.w	r2, #0
   1e26a:	bf08      	it	eq
   1e26c:	213f      	moveq	r1, #63	; 0x3f
   1e26e:	f363 0204 	bfi	r2, r3, #0, #5
   1e272:	f361 124a 	bfi	r2, r1, #5, #6
   1e276:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e27a:	2129      	movs	r1, #41	; 0x29
   1e27c:	f009 f9d4 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1e280:	7b6b      	ldrb	r3, [r5, #13]
   1e282:	6820      	ldr	r0, [r4, #0]
   1e284:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e288:	bf0c      	ite	eq
   1e28a:	231f      	moveq	r3, #31
   1e28c:	2300      	movne	r3, #0
   1e28e:	2b00      	cmp	r3, #0
   1e290:	f040 83fa 	bne.w	1ea88 <lv_theme_mono_init+0x874>
   1e294:	213f      	movs	r1, #63	; 0x3f
   1e296:	231f      	movs	r3, #31
   1e298:	f04f 0200 	mov.w	r2, #0
   1e29c:	f363 0204 	bfi	r2, r3, #0, #5
   1e2a0:	f361 124a 	bfi	r2, r1, #5, #6
   1e2a4:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e2a8:	f248 0189 	movw	r1, #32905	; 0x8089
   1e2ac:	f009 f9bc 	bl	27628 <_lv_style_set_color>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1e2b0:	7b6b      	ldrb	r3, [r5, #13]
   1e2b2:	6820      	ldr	r0, [r4, #0]
   1e2b4:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e2b8:	bf0c      	ite	eq
   1e2ba:	231f      	moveq	r3, #31
   1e2bc:	2300      	movne	r3, #0
   1e2be:	2b00      	cmp	r3, #0
   1e2c0:	f040 83e5 	bne.w	1ea8e <lv_theme_mono_init+0x87a>
   1e2c4:	213f      	movs	r1, #63	; 0x3f
   1e2c6:	231f      	movs	r3, #31
   1e2c8:	f04f 0200 	mov.w	r2, #0
   1e2cc:	f363 0204 	bfi	r2, r3, #0, #5
   1e2d0:	f361 124a 	bfi	r2, r1, #5, #6
   1e2d4:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1e2d8:	2179      	movs	r1, #121	; 0x79
   1e2da:	f009 f9a5 	bl	27628 <_lv_style_set_color>
    style_init_reset(&styles->bg);
   1e2de:	6820      	ldr	r0, [r4, #0]
   1e2e0:	3004      	adds	r0, #4
   1e2e2:	f00c fb18 	bl	2a916 <style_init_reset>
    lv_style_set_border_post(&styles->bg, LV_STATE_DEFAULT, true);
   1e2e6:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   1e2e8:	2201      	movs	r2, #1
   1e2ea:	2133      	movs	r1, #51	; 0x33
   1e2ec:	3004      	adds	r0, #4
   1e2ee:	f009 f957 	bl	275a0 <_lv_style_set_int>
    lv_style_set_radius(&styles->bg, LV_STATE_DEFAULT, RADIUS);
   1e2f2:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1e2f4:	2204      	movs	r2, #4
   1e2f6:	4410      	add	r0, r2
   1e2f8:	2101      	movs	r1, #1
   1e2fa:	f009 f951 	bl	275a0 <_lv_style_set_int>
    lv_style_set_bg_opa(&styles->bg, LV_STATE_DEFAULT, LV_OPA_COVER);
   1e2fe:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   1e300:	212c      	movs	r1, #44	; 0x2c
   1e302:	22ff      	movs	r2, #255	; 0xff
   1e304:	3004      	adds	r0, #4
   1e306:	f009 f9d3 	bl	276b0 <_lv_style_set_opa>
    lv_style_set_bg_color(&styles->bg, LV_STATE_DEFAULT, BG_COLOR);
   1e30a:	7b6b      	ldrb	r3, [r5, #13]
   1e30c:	6820      	ldr	r0, [r4, #0]
   1e30e:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e312:	bf1a      	itte	ne
   1e314:	2100      	movne	r1, #0
   1e316:	460b      	movne	r3, r1
   1e318:	231f      	moveq	r3, #31
   1e31a:	f04f 0200 	mov.w	r2, #0
   1e31e:	bf08      	it	eq
   1e320:	213f      	moveq	r1, #63	; 0x3f
   1e322:	f363 0204 	bfi	r2, r3, #0, #5
   1e326:	f361 124a 	bfi	r2, r1, #5, #6
   1e32a:	f363 22cf 	bfi	r2, r3, #11, #5
   1e32e:	3004      	adds	r0, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e330:	2129      	movs	r1, #41	; 0x29
   1e332:	f009 f979 	bl	27628 <_lv_style_set_color>
    lv_style_set_border_width(&styles->bg, LV_STATE_DEFAULT, BORDER_WIDTH);
   1e336:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1e338:	2202      	movs	r2, #2
   1e33a:	2130      	movs	r1, #48	; 0x30
   1e33c:	3004      	adds	r0, #4
   1e33e:	f009 f92f 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_width(&styles->bg, LV_STATE_FOCUSED, BORDER_WIDTH * 2);
   1e342:	6820      	ldr	r0, [r4, #0]
   1e344:	2204      	movs	r2, #4
   1e346:	4410      	add	r0, r2
   1e348:	f44f 710c 	mov.w	r1, #560	; 0x230
   1e34c:	f009 f928 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_width(&styles->bg, LV_STATE_FOCUSED | LV_STATE_EDITED, BORDER_WIDTH * 3);
   1e350:	6820      	ldr	r0, [r4, #0]
   1e352:	2206      	movs	r2, #6
   1e354:	3004      	adds	r0, #4
   1e356:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   1e35a:	f009 f921 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e35e:	7b6b      	ldrb	r3, [r5, #13]
   1e360:	6820      	ldr	r0, [r4, #0]
   1e362:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e366:	bf0c      	ite	eq
   1e368:	231f      	moveq	r3, #31
   1e36a:	2300      	movne	r3, #0
   1e36c:	3004      	adds	r0, #4
   1e36e:	2b00      	cmp	r3, #0
   1e370:	f040 8390 	bne.w	1ea94 <lv_theme_mono_init+0x880>
   1e374:	213f      	movs	r1, #63	; 0x3f
   1e376:	231f      	movs	r3, #31
   1e378:	f04f 0200 	mov.w	r2, #0
   1e37c:	f363 0204 	bfi	r2, r3, #0, #5
   1e380:	f361 124a 	bfi	r2, r1, #5, #6
   1e384:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1e388:	2139      	movs	r1, #57	; 0x39
   1e38a:	f009 f94d 	bl	27628 <_lv_style_set_color>
    lv_style_set_line_width(&styles->bg, LV_STATE_DEFAULT, LV_MATH_MAX(LV_DPI / 100, 1));
   1e38e:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   1e390:	2201      	movs	r2, #1
   1e392:	2190      	movs	r1, #144	; 0x90
   1e394:	3004      	adds	r0, #4
   1e396:	f009 f903 	bl	275a0 <_lv_style_set_int>
    lv_style_set_scale_end_line_width(&styles->bg, LV_STATE_DEFAULT, LV_MATH_MAX(LV_DPI / 100, 1));
   1e39a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   1e39c:	2201      	movs	r2, #1
   1e39e:	3004      	adds	r0, #4
   1e3a0:	21c3      	movs	r1, #195	; 0xc3
   1e3a2:	f009 f8fd 	bl	275a0 <_lv_style_set_int>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e3a6:	7b6b      	ldrb	r3, [r5, #13]
   1e3a8:	6820      	ldr	r0, [r4, #0]
   1e3aa:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e3ae:	bf0c      	ite	eq
   1e3b0:	231f      	moveq	r3, #31
   1e3b2:	2300      	movne	r3, #0
   1e3b4:	3004      	adds	r0, #4
   1e3b6:	2b00      	cmp	r3, #0
   1e3b8:	f040 836f 	bne.w	1ea9a <lv_theme_mono_init+0x886>
   1e3bc:	213f      	movs	r1, #63	; 0x3f
   1e3be:	231f      	movs	r3, #31
   1e3c0:	f04f 0200 	mov.w	r2, #0
   1e3c4:	f363 0204 	bfi	r2, r3, #0, #5
   1e3c8:	f361 124a 	bfi	r2, r1, #5, #6
   1e3cc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1e3d0:	2199      	movs	r1, #153	; 0x99
   1e3d2:	f009 f929 	bl	27628 <_lv_style_set_color>
    lv_style_set_scale_grad_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e3d6:	7b6b      	ldrb	r3, [r5, #13]
   1e3d8:	6820      	ldr	r0, [r4, #0]
   1e3da:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e3de:	bf0c      	ite	eq
   1e3e0:	231f      	moveq	r3, #31
   1e3e2:	2300      	movne	r3, #0
   1e3e4:	3004      	adds	r0, #4
   1e3e6:	2b00      	cmp	r3, #0
   1e3e8:	f040 835a 	bne.w	1eaa0 <lv_theme_mono_init+0x88c>
   1e3ec:	213f      	movs	r1, #63	; 0x3f
   1e3ee:	231f      	movs	r3, #31
   1e3f0:	f04f 0200 	mov.w	r2, #0
   1e3f4:	f363 0204 	bfi	r2, r3, #0, #5
   1e3f8:	f361 124a 	bfi	r2, r1, #5, #6
   1e3fc:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   1e400:	21c9      	movs	r1, #201	; 0xc9
   1e402:	f009 f911 	bl	27628 <_lv_style_set_color>
    lv_style_set_scale_end_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e406:	7b6b      	ldrb	r3, [r5, #13]
   1e408:	6820      	ldr	r0, [r4, #0]
   1e40a:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e40e:	bf0c      	ite	eq
   1e410:	231f      	moveq	r3, #31
   1e412:	2300      	movne	r3, #0
   1e414:	3004      	adds	r0, #4
   1e416:	2b00      	cmp	r3, #0
   1e418:	f040 8345 	bne.w	1eaa6 <lv_theme_mono_init+0x892>
   1e41c:	213f      	movs	r1, #63	; 0x3f
   1e41e:	231f      	movs	r3, #31
   1e420:	f04f 0200 	mov.w	r2, #0
   1e424:	f363 0204 	bfi	r2, r3, #0, #5
   1e428:	f361 124a 	bfi	r2, r1, #5, #6
   1e42c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   1e430:	21ca      	movs	r1, #202	; 0xca
   1e432:	f009 f8f9 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e436:	7b6b      	ldrb	r3, [r5, #13]
   1e438:	6820      	ldr	r0, [r4, #0]
   1e43a:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e43e:	bf0c      	ite	eq
   1e440:	231f      	moveq	r3, #31
   1e442:	2300      	movne	r3, #0
   1e444:	3004      	adds	r0, #4
   1e446:	2b00      	cmp	r3, #0
   1e448:	f040 8330 	bne.w	1eaac <lv_theme_mono_init+0x898>
   1e44c:	213f      	movs	r1, #63	; 0x3f
   1e44e:	231f      	movs	r3, #31
   1e450:	f04f 0200 	mov.w	r2, #0
   1e454:	f363 0204 	bfi	r2, r3, #0, #5
   1e458:	f361 124a 	bfi	r2, r1, #5, #6
   1e45c:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e460:	f248 0189 	movw	r1, #32905	; 0x8089
   1e464:	f009 f8e0 	bl	27628 <_lv_style_set_color>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1e468:	7b6b      	ldrb	r3, [r5, #13]
   1e46a:	6820      	ldr	r0, [r4, #0]
   1e46c:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e470:	bf0c      	ite	eq
   1e472:	231f      	moveq	r3, #31
   1e474:	2300      	movne	r3, #0
   1e476:	3004      	adds	r0, #4
   1e478:	2b00      	cmp	r3, #0
   1e47a:	f040 831a 	bne.w	1eab2 <lv_theme_mono_init+0x89e>
   1e47e:	213f      	movs	r1, #63	; 0x3f
   1e480:	231f      	movs	r3, #31
   1e482:	f04f 0200 	mov.w	r2, #0
   1e486:	f363 0204 	bfi	r2, r3, #0, #5
   1e48a:	f361 124a 	bfi	r2, r1, #5, #6
   1e48e:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1e492:	2179      	movs	r1, #121	; 0x79
   1e494:	f009 f8c8 	bl	27628 <_lv_style_set_color>
    lv_style_set_pad_left(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e498:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1e49a:	220c      	movs	r2, #12
   1e49c:	2112      	movs	r1, #18
   1e49e:	3004      	adds	r0, #4
   1e4a0:	f009 f87e 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e4a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1e4a6:	220c      	movs	r2, #12
   1e4a8:	2113      	movs	r1, #19
   1e4aa:	3004      	adds	r0, #4
   1e4ac:	f009 f878 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e4b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1e4b2:	220c      	movs	r2, #12
   1e4b4:	2110      	movs	r1, #16
   1e4b6:	3004      	adds	r0, #4
   1e4b8:	f009 f872 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e4bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1e4be:	220c      	movs	r2, #12
   1e4c0:	2111      	movs	r1, #17
   1e4c2:	3004      	adds	r0, #4
   1e4c4:	f009 f86c 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->bg, LV_STATE_DEFAULT, LV_DPI / 10);
   1e4c8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1e4ca:	220c      	movs	r2, #12
   1e4cc:	2114      	movs	r1, #20
   1e4ce:	3004      	adds	r0, #4
   1e4d0:	f009 f866 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->clip_corner);
   1e4d4:	6820      	ldr	r0, [r4, #0]
   1e4d6:	3008      	adds	r0, #8
   1e4d8:	f00c fa1d 	bl	2a916 <style_init_reset>
    lv_style_set_clip_corner(&styles->clip_corner, LV_STATE_DEFAULT, true);
   1e4dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   1e4de:	2201      	movs	r2, #1
   1e4e0:	2102      	movs	r1, #2
   1e4e2:	3008      	adds	r0, #8
   1e4e4:	f009 f85c 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->btn);
   1e4e8:	6820      	ldr	r0, [r4, #0]
   1e4ea:	300c      	adds	r0, #12
   1e4ec:	f00c fa13 	bl	2a916 <style_init_reset>
    lv_style_set_radius(&styles->btn, LV_STATE_DEFAULT, RADIUS);
   1e4f0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1e4f2:	2204      	movs	r2, #4
   1e4f4:	2101      	movs	r1, #1
   1e4f6:	300c      	adds	r0, #12
   1e4f8:	f009 f852 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_DEFAULT, BORDER_WIDTH);
   1e4fc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1e4fe:	2202      	movs	r2, #2
   1e500:	2130      	movs	r1, #48	; 0x30
   1e502:	300c      	adds	r0, #12
   1e504:	f009 f84c 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED, BORDER_WIDTH + 1);
   1e508:	6820      	ldr	r0, [r4, #0]
   1e50a:	2203      	movs	r2, #3
   1e50c:	f44f 710c 	mov.w	r1, #560	; 0x230
   1e510:	300c      	adds	r0, #12
   1e512:	f009 f845 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_width(&styles->btn, LV_STATE_FOCUSED | LV_STATE_EDITED, BORDER_WIDTH + 2);
   1e516:	6820      	ldr	r0, [r4, #0]
   1e518:	2204      	movs	r2, #4
   1e51a:	300c      	adds	r0, #12
   1e51c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
   1e520:	f009 f83e 	bl	275a0 <_lv_style_set_int>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e524:	7b6b      	ldrb	r3, [r5, #13]
   1e526:	6820      	ldr	r0, [r4, #0]
   1e528:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e52c:	bf0c      	ite	eq
   1e52e:	231f      	moveq	r3, #31
   1e530:	2300      	movne	r3, #0
   1e532:	300c      	adds	r0, #12
   1e534:	2b00      	cmp	r3, #0
   1e536:	f040 82bf 	bne.w	1eab8 <lv_theme_mono_init+0x8a4>
   1e53a:	213f      	movs	r1, #63	; 0x3f
   1e53c:	231f      	movs	r3, #31
   1e53e:	e005      	b.n	1e54c <lv_theme_mono_init+0x338>
   1e540:	20003ff4 	.word	0x20003ff4
   1e544:	20004018 	.word	0x20004018
   1e548:	20004014 	.word	0x20004014
   1e54c:	f04f 0200 	mov.w	r2, #0
   1e550:	f363 0204 	bfi	r2, r3, #0, #5
   1e554:	f361 124a 	bfi	r2, r1, #5, #6
   1e558:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   1e55c:	2139      	movs	r1, #57	; 0x39
   1e55e:	f009 f863 	bl	27628 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_DEFAULT, BG_COLOR);
   1e562:	7b6b      	ldrb	r3, [r5, #13]
   1e564:	6820      	ldr	r0, [r4, #0]
   1e566:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e56a:	bf1a      	itte	ne
   1e56c:	2100      	movne	r1, #0
   1e56e:	460b      	movne	r3, r1
   1e570:	231f      	moveq	r3, #31
   1e572:	f04f 0200 	mov.w	r2, #0
   1e576:	bf08      	it	eq
   1e578:	213f      	moveq	r1, #63	; 0x3f
   1e57a:	f363 0204 	bfi	r2, r3, #0, #5
   1e57e:	f361 124a 	bfi	r2, r1, #5, #6
   1e582:	300c      	adds	r0, #12
   1e584:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e588:	2129      	movs	r1, #41	; 0x29
   1e58a:	f009 f84d 	bl	27628 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, FG_COLOR);
   1e58e:	7b6b      	ldrb	r3, [r5, #13]
   1e590:	6820      	ldr	r0, [r4, #0]
   1e592:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e596:	bf0c      	ite	eq
   1e598:	231f      	moveq	r3, #31
   1e59a:	2300      	movne	r3, #0
   1e59c:	300c      	adds	r0, #12
   1e59e:	2b00      	cmp	r3, #0
   1e5a0:	f000 828d 	beq.w	1eabe <lv_theme_mono_init+0x8aa>
   1e5a4:	2100      	movs	r1, #0
   1e5a6:	460b      	mov	r3, r1
   1e5a8:	f04f 0200 	mov.w	r2, #0
   1e5ac:	f363 0204 	bfi	r2, r3, #0, #5
   1e5b0:	f361 124a 	bfi	r2, r1, #5, #6
   1e5b4:	f363 22cf 	bfi	r2, r3, #11, #5
   1e5b8:	f241 0129 	movw	r1, #4137	; 0x1029
   1e5bc:	f009 f834 	bl	27628 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, FG_COLOR);
   1e5c0:	7b6b      	ldrb	r3, [r5, #13]
   1e5c2:	6820      	ldr	r0, [r4, #0]
   1e5c4:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e5c8:	bf0c      	ite	eq
   1e5ca:	231f      	moveq	r3, #31
   1e5cc:	2300      	movne	r3, #0
   1e5ce:	300c      	adds	r0, #12
   1e5d0:	2b00      	cmp	r3, #0
   1e5d2:	f000 8277 	beq.w	1eac4 <lv_theme_mono_init+0x8b0>
   1e5d6:	2100      	movs	r1, #0
   1e5d8:	460b      	mov	r3, r1
   1e5da:	f04f 0200 	mov.w	r2, #0
   1e5de:	f363 0204 	bfi	r2, r3, #0, #5
   1e5e2:	f361 124a 	bfi	r2, r1, #5, #6
   1e5e6:	f363 22cf 	bfi	r2, r3, #11, #5
   1e5ea:	f240 1129 	movw	r1, #297	; 0x129
   1e5ee:	f009 f81b 	bl	27628 <_lv_style_set_color>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, BG_COLOR);
   1e5f2:	7b6b      	ldrb	r3, [r5, #13]
   1e5f4:	6820      	ldr	r0, [r4, #0]
   1e5f6:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e5fa:	bf1a      	itte	ne
   1e5fc:	2100      	movne	r1, #0
   1e5fe:	460b      	movne	r3, r1
   1e600:	231f      	moveq	r3, #31
   1e602:	f04f 0200 	mov.w	r2, #0
   1e606:	bf08      	it	eq
   1e608:	213f      	moveq	r1, #63	; 0x3f
   1e60a:	f363 0204 	bfi	r2, r3, #0, #5
   1e60e:	f361 124a 	bfi	r2, r1, #5, #6
   1e612:	300c      	adds	r0, #12
   1e614:	f363 22cf 	bfi	r2, r3, #11, #5
   1e618:	f241 1129 	movw	r1, #4393	; 0x1129
   1e61c:	f009 f804 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e620:	7b6b      	ldrb	r3, [r5, #13]
   1e622:	6820      	ldr	r0, [r4, #0]
   1e624:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e628:	bf0c      	ite	eq
   1e62a:	231f      	moveq	r3, #31
   1e62c:	2300      	movne	r3, #0
   1e62e:	300c      	adds	r0, #12
   1e630:	2b00      	cmp	r3, #0
   1e632:	f040 824a 	bne.w	1eaca <lv_theme_mono_init+0x8b6>
   1e636:	213f      	movs	r1, #63	; 0x3f
   1e638:	231f      	movs	r3, #31
   1e63a:	f04f 0200 	mov.w	r2, #0
   1e63e:	f363 0204 	bfi	r2, r3, #0, #5
   1e642:	f361 124a 	bfi	r2, r1, #5, #6
   1e646:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e64a:	f248 0189 	movw	r1, #32905	; 0x8089
   1e64e:	f008 ffeb 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1e652:	7b6b      	ldrb	r3, [r5, #13]
   1e654:	6820      	ldr	r0, [r4, #0]
   1e656:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e65a:	bf1a      	itte	ne
   1e65c:	2100      	movne	r1, #0
   1e65e:	460b      	movne	r3, r1
   1e660:	231f      	moveq	r3, #31
   1e662:	f04f 0200 	mov.w	r2, #0
   1e666:	bf08      	it	eq
   1e668:	213f      	moveq	r1, #63	; 0x3f
   1e66a:	f363 0204 	bfi	r2, r3, #0, #5
   1e66e:	f361 124a 	bfi	r2, r1, #5, #6
   1e672:	f363 22cf 	bfi	r2, r3, #11, #5
   1e676:	f249 0189 	movw	r1, #37001	; 0x9089
   1e67a:	300c      	adds	r0, #12
   1e67c:	f008 ffd4 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   1e680:	7b6b      	ldrb	r3, [r5, #13]
   1e682:	6820      	ldr	r0, [r4, #0]
   1e684:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e688:	bf1a      	itte	ne
   1e68a:	2100      	movne	r1, #0
   1e68c:	460b      	movne	r3, r1
   1e68e:	231f      	moveq	r3, #31
   1e690:	f04f 0200 	mov.w	r2, #0
   1e694:	bf08      	it	eq
   1e696:	213f      	moveq	r1, #63	; 0x3f
   1e698:	f363 0204 	bfi	r2, r3, #0, #5
   1e69c:	f361 124a 	bfi	r2, r1, #5, #6
   1e6a0:	300c      	adds	r0, #12
   1e6a2:	f363 22cf 	bfi	r2, r3, #11, #5
   1e6a6:	f248 1189 	movw	r1, #33161	; 0x8189
   1e6aa:	f008 ffbd 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1e6ae:	7b6b      	ldrb	r3, [r5, #13]
   1e6b0:	6820      	ldr	r0, [r4, #0]
   1e6b2:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e6b6:	bf0c      	ite	eq
   1e6b8:	231f      	moveq	r3, #31
   1e6ba:	2300      	movne	r3, #0
   1e6bc:	300c      	adds	r0, #12
   1e6be:	2b00      	cmp	r3, #0
   1e6c0:	f040 8206 	bne.w	1ead0 <lv_theme_mono_init+0x8bc>
   1e6c4:	213f      	movs	r1, #63	; 0x3f
   1e6c6:	231f      	movs	r3, #31
   1e6c8:	f04f 0200 	mov.w	r2, #0
   1e6cc:	f363 0204 	bfi	r2, r3, #0, #5
   1e6d0:	f361 124a 	bfi	r2, r1, #5, #6
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e6d4:	4d9e      	ldr	r5, [pc, #632]	; (1e950 <lv_theme_mono_init+0x73c>)
   1e6d6:	4c9f      	ldr	r4, [pc, #636]	; (1e954 <lv_theme_mono_init+0x740>)
   1e6d8:	f363 22cf 	bfi	r2, r3, #11, #5
   1e6dc:	f249 1189 	movw	r1, #37257	; 0x9189
   1e6e0:	f008 ffa2 	bl	27628 <_lv_style_set_color>
   1e6e4:	7b6b      	ldrb	r3, [r5, #13]
   1e6e6:	6820      	ldr	r0, [r4, #0]
   1e6e8:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e6ec:	bf0c      	ite	eq
   1e6ee:	231f      	moveq	r3, #31
   1e6f0:	2300      	movne	r3, #0
   1e6f2:	300c      	adds	r0, #12
   1e6f4:	2b00      	cmp	r3, #0
   1e6f6:	f040 81ee 	bne.w	1ead6 <lv_theme_mono_init+0x8c2>
   1e6fa:	213f      	movs	r1, #63	; 0x3f
   1e6fc:	231f      	movs	r3, #31
   1e6fe:	f04f 0200 	mov.w	r2, #0
   1e702:	f363 0204 	bfi	r2, r3, #0, #5
   1e706:	f361 124a 	bfi	r2, r1, #5, #6
   1e70a:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_COLOR, value_color, lv_color_t, _color, nonscalar)
   1e70e:	2179      	movs	r1, #121	; 0x79
   1e710:	f008 ff8a 	bl	27628 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1e714:	7b6b      	ldrb	r3, [r5, #13]
   1e716:	6820      	ldr	r0, [r4, #0]
   1e718:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e71c:	bf1a      	itte	ne
   1e71e:	2100      	movne	r1, #0
   1e720:	460b      	movne	r3, r1
   1e722:	231f      	moveq	r3, #31
   1e724:	f04f 0200 	mov.w	r2, #0
   1e728:	bf08      	it	eq
   1e72a:	213f      	moveq	r1, #63	; 0x3f
   1e72c:	f363 0204 	bfi	r2, r3, #0, #5
   1e730:	f361 124a 	bfi	r2, r1, #5, #6
   1e734:	f363 22cf 	bfi	r2, r3, #11, #5
   1e738:	f241 0179 	movw	r1, #4217	; 0x1079
   1e73c:	300c      	adds	r0, #12
   1e73e:	f008 ff73 	bl	27628 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   1e742:	7b6b      	ldrb	r3, [r5, #13]
   1e744:	6820      	ldr	r0, [r4, #0]
   1e746:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e74a:	bf1a      	itte	ne
   1e74c:	2100      	movne	r1, #0
   1e74e:	460b      	movne	r3, r1
   1e750:	231f      	moveq	r3, #31
   1e752:	f04f 0200 	mov.w	r2, #0
   1e756:	bf08      	it	eq
   1e758:	213f      	moveq	r1, #63	; 0x3f
   1e75a:	f363 0204 	bfi	r2, r3, #0, #5
   1e75e:	f361 124a 	bfi	r2, r1, #5, #6
   1e762:	300c      	adds	r0, #12
   1e764:	f363 22cf 	bfi	r2, r3, #11, #5
   1e768:	f240 1179 	movw	r1, #377	; 0x179
   1e76c:	f008 ff5c 	bl	27628 <_lv_style_set_color>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1e770:	7b6b      	ldrb	r3, [r5, #13]
   1e772:	6820      	ldr	r0, [r4, #0]
   1e774:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e778:	bf0c      	ite	eq
   1e77a:	231f      	moveq	r3, #31
   1e77c:	2300      	movne	r3, #0
   1e77e:	300c      	adds	r0, #12
   1e780:	2b00      	cmp	r3, #0
   1e782:	f040 81ab 	bne.w	1eadc <lv_theme_mono_init+0x8c8>
   1e786:	213f      	movs	r1, #63	; 0x3f
   1e788:	231f      	movs	r3, #31
   1e78a:	f04f 0200 	mov.w	r2, #0
   1e78e:	f363 0204 	bfi	r2, r3, #0, #5
   1e792:	f361 124a 	bfi	r2, r1, #5, #6
   1e796:	f363 22cf 	bfi	r2, r3, #11, #5
   1e79a:	f241 1179 	movw	r1, #4473	; 0x1179
   1e79e:	f008 ff43 	bl	27628 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1e7a2:	7b6b      	ldrb	r3, [r5, #13]
   1e7a4:	6820      	ldr	r0, [r4, #0]
   1e7a6:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e7aa:	bf0c      	ite	eq
   1e7ac:	231f      	moveq	r3, #31
   1e7ae:	2300      	movne	r3, #0
   1e7b0:	300c      	adds	r0, #12
   1e7b2:	2b00      	cmp	r3, #0
   1e7b4:	f040 8195 	bne.w	1eae2 <lv_theme_mono_init+0x8ce>
   1e7b8:	213f      	movs	r1, #63	; 0x3f
   1e7ba:	231f      	movs	r3, #31
   1e7bc:	f04f 0200 	mov.w	r2, #0
   1e7c0:	f363 0204 	bfi	r2, r3, #0, #5
   1e7c4:	f361 124a 	bfi	r2, r1, #5, #6
   1e7c8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1e7cc:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1e7d0:	f008 ff2a 	bl	27628 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_PRESSED, BG_COLOR);
   1e7d4:	7b6b      	ldrb	r3, [r5, #13]
   1e7d6:	6820      	ldr	r0, [r4, #0]
   1e7d8:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e7dc:	bf1a      	itte	ne
   1e7de:	2100      	movne	r1, #0
   1e7e0:	460b      	movne	r3, r1
   1e7e2:	231f      	moveq	r3, #31
   1e7e4:	f04f 0200 	mov.w	r2, #0
   1e7e8:	bf08      	it	eq
   1e7ea:	213f      	moveq	r1, #63	; 0x3f
   1e7ec:	f363 0204 	bfi	r2, r3, #0, #5
   1e7f0:	f361 124a 	bfi	r2, r1, #5, #6
   1e7f4:	f363 22cf 	bfi	r2, r3, #11, #5
   1e7f8:	f249 01a9 	movw	r1, #37033	; 0x90a9
   1e7fc:	300c      	adds	r0, #12
   1e7fe:	f008 ff13 	bl	27628 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED, BG_COLOR);
   1e802:	7b6b      	ldrb	r3, [r5, #13]
   1e804:	6820      	ldr	r0, [r4, #0]
   1e806:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e80a:	bf1a      	itte	ne
   1e80c:	2100      	movne	r1, #0
   1e80e:	460b      	movne	r3, r1
   1e810:	231f      	moveq	r3, #31
   1e812:	f04f 0200 	mov.w	r2, #0
   1e816:	bf08      	it	eq
   1e818:	213f      	moveq	r1, #63	; 0x3f
   1e81a:	f363 0204 	bfi	r2, r3, #0, #5
   1e81e:	f361 124a 	bfi	r2, r1, #5, #6
   1e822:	300c      	adds	r0, #12
   1e824:	f363 22cf 	bfi	r2, r3, #11, #5
   1e828:	f248 11a9 	movw	r1, #33193	; 0x81a9
   1e82c:	f008 fefc 	bl	27628 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1e830:	7b6b      	ldrb	r3, [r5, #13]
   1e832:	6820      	ldr	r0, [r4, #0]
   1e834:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e838:	bf0c      	ite	eq
   1e83a:	231f      	moveq	r3, #31
   1e83c:	2300      	movne	r3, #0
   1e83e:	300c      	adds	r0, #12
   1e840:	2b00      	cmp	r3, #0
   1e842:	f040 8151 	bne.w	1eae8 <lv_theme_mono_init+0x8d4>
   1e846:	213f      	movs	r1, #63	; 0x3f
   1e848:	231f      	movs	r3, #31
   1e84a:	f04f 0200 	mov.w	r2, #0
   1e84e:	f363 0204 	bfi	r2, r3, #0, #5
   1e852:	f361 124a 	bfi	r2, r1, #5, #6
   1e856:	f363 22cf 	bfi	r2, r3, #11, #5
   1e85a:	f249 11a9 	movw	r1, #37289	; 0x91a9
   1e85e:	f008 fee3 	bl	27628 <_lv_style_set_color>
    style_init_reset(&styles->round);
   1e862:	6820      	ldr	r0, [r4, #0]
   1e864:	3010      	adds	r0, #16
   1e866:	f00c f856 	bl	2a916 <style_init_reset>
    lv_style_set_radius(&styles->round, LV_STATE_DEFAULT, LV_RADIUS_CIRCLE);
   1e86a:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   1e86c:	f647 72ff 	movw	r2, #32767	; 0x7fff
   1e870:	2101      	movs	r1, #1
   1e872:	3010      	adds	r0, #16
   1e874:	f008 fe94 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->no_radius);
   1e878:	6820      	ldr	r0, [r4, #0]
   1e87a:	3014      	adds	r0, #20
   1e87c:	f00c f84b 	bl	2a916 <style_init_reset>
    lv_style_set_radius(&styles->no_radius, LV_STATE_DEFAULT, 0);
   1e880:	6820      	ldr	r0, [r4, #0]
   1e882:	2200      	movs	r2, #0
   1e884:	2101      	movs	r1, #1
   1e886:	3014      	adds	r0, #20
   1e888:	f008 fe8a 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->border_none);
   1e88c:	6820      	ldr	r0, [r4, #0]
   1e88e:	301c      	adds	r0, #28
   1e890:	f00c f841 	bl	2a916 <style_init_reset>
    lv_style_set_border_width(&styles->border_none, LV_STATE_DEFAULT, 0);
   1e894:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   1e896:	2200      	movs	r2, #0
   1e898:	2130      	movs	r1, #48	; 0x30
   1e89a:	301c      	adds	r0, #28
   1e89c:	f008 fe80 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->fg_color);
   1e8a0:	6820      	ldr	r0, [r4, #0]
   1e8a2:	3018      	adds	r0, #24
   1e8a4:	f00c f837 	bl	2a916 <style_init_reset>
    lv_style_set_bg_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1e8a8:	7b6b      	ldrb	r3, [r5, #13]
   1e8aa:	6820      	ldr	r0, [r4, #0]
   1e8ac:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e8b0:	bf0c      	ite	eq
   1e8b2:	231f      	moveq	r3, #31
   1e8b4:	2300      	movne	r3, #0
   1e8b6:	3018      	adds	r0, #24
   1e8b8:	2b00      	cmp	r3, #0
   1e8ba:	f040 8118 	bne.w	1eaee <lv_theme_mono_init+0x8da>
   1e8be:	213f      	movs	r1, #63	; 0x3f
   1e8c0:	231f      	movs	r3, #31
   1e8c2:	f04f 0200 	mov.w	r2, #0
   1e8c6:	f363 0204 	bfi	r2, r3, #0, #5
   1e8ca:	f361 124a 	bfi	r2, r1, #5, #6
   1e8ce:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   1e8d2:	2129      	movs	r1, #41	; 0x29
   1e8d4:	f008 fea8 	bl	27628 <_lv_style_set_color>
    lv_style_set_text_color(&styles->fg_color, LV_STATE_DEFAULT, BG_COLOR);
   1e8d8:	7b6b      	ldrb	r3, [r5, #13]
   1e8da:	6820      	ldr	r0, [r4, #0]
   1e8dc:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e8e0:	bf1a      	itte	ne
   1e8e2:	2100      	movne	r1, #0
   1e8e4:	460b      	movne	r3, r1
   1e8e6:	231f      	moveq	r3, #31
   1e8e8:	f04f 0200 	mov.w	r2, #0
   1e8ec:	bf08      	it	eq
   1e8ee:	213f      	moveq	r1, #63	; 0x3f
   1e8f0:	f363 0204 	bfi	r2, r3, #0, #5
   1e8f4:	f361 124a 	bfi	r2, r1, #5, #6
   1e8f8:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   1e8fc:	f248 0189 	movw	r1, #32905	; 0x8089
   1e900:	3018      	adds	r0, #24
   1e902:	f008 fe91 	bl	27628 <_lv_style_set_color>
    lv_style_set_image_recolor(&styles->fg_color, LV_STATE_DEFAULT, BG_COLOR);
   1e906:	7b6b      	ldrb	r3, [r5, #13]
   1e908:	6820      	ldr	r0, [r4, #0]
   1e90a:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e90e:	bf1a      	itte	ne
   1e910:	2100      	movne	r1, #0
   1e912:	460b      	movne	r3, r1
   1e914:	231f      	moveq	r3, #31
   1e916:	f04f 0200 	mov.w	r2, #0
   1e91a:	bf08      	it	eq
   1e91c:	213f      	moveq	r1, #63	; 0x3f
   1e91e:	f363 0204 	bfi	r2, r3, #0, #5
   1e922:	f361 124a 	bfi	r2, r1, #5, #6
   1e926:	3018      	adds	r0, #24
   1e928:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   1e92c:	f248 01a9 	movw	r1, #32937	; 0x80a9
   1e930:	f008 fe7a 	bl	27628 <_lv_style_set_color>
    lv_style_set_line_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1e934:	7b6b      	ldrb	r3, [r5, #13]
   1e936:	6820      	ldr	r0, [r4, #0]
   1e938:	f013 0ff8 	tst.w	r3, #248	; 0xf8
   1e93c:	bf0c      	ite	eq
   1e93e:	231f      	moveq	r3, #31
   1e940:	2300      	movne	r3, #0
   1e942:	3018      	adds	r0, #24
   1e944:	2b00      	cmp	r3, #0
   1e946:	f040 80d5 	bne.w	1eaf4 <lv_theme_mono_init+0x8e0>
   1e94a:	213f      	movs	r1, #63	; 0x3f
   1e94c:	231f      	movs	r3, #31
   1e94e:	e003      	b.n	1e958 <lv_theme_mono_init+0x744>
   1e950:	20004018 	.word	0x20004018
   1e954:	20004014 	.word	0x20004014
   1e958:	f04f 0200 	mov.w	r2, #0
   1e95c:	f363 0204 	bfi	r2, r3, #0, #5
   1e960:	f361 124a 	bfi	r2, r1, #5, #6
   1e964:	f363 22cf 	bfi	r2, r3, #11, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   1e968:	2199      	movs	r1, #153	; 0x99
   1e96a:	f008 fe5d 	bl	27628 <_lv_style_set_color>
    style_init_reset(&styles->big_line_space);
   1e96e:	6820      	ldr	r0, [r4, #0]
   1e970:	3020      	adds	r0, #32
   1e972:	f00b ffd0 	bl	2a916 <style_init_reset>
    lv_style_set_text_line_space(&styles->big_line_space, LV_STATE_DEFAULT, LV_DPI / 10);
   1e976:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1e978:	220c      	movs	r2, #12
   1e97a:	f248 0181 	movw	r1, #32897	; 0x8081
   1e97e:	3020      	adds	r0, #32
   1e980:	f008 fe0e 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->pad_none);
   1e984:	6820      	ldr	r0, [r4, #0]
   1e986:	3024      	adds	r0, #36	; 0x24
   1e988:	f00b ffc5 	bl	2a916 <style_init_reset>
    lv_style_set_pad_left(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e98c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1e98e:	2200      	movs	r2, #0
   1e990:	2112      	movs	r1, #18
   1e992:	3024      	adds	r0, #36	; 0x24
   1e994:	f008 fe04 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e998:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1e99a:	2200      	movs	r2, #0
   1e99c:	2113      	movs	r1, #19
   1e99e:	3024      	adds	r0, #36	; 0x24
   1e9a0:	f008 fdfe 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e9a4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1e9a6:	2200      	movs	r2, #0
   1e9a8:	2110      	movs	r1, #16
   1e9aa:	3024      	adds	r0, #36	; 0x24
   1e9ac:	f008 fdf8 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e9b0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1e9b2:	2200      	movs	r2, #0
   1e9b4:	2111      	movs	r1, #17
   1e9b6:	3024      	adds	r0, #36	; 0x24
   1e9b8:	f008 fdf2 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_none, LV_STATE_DEFAULT, 0);
   1e9bc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1e9be:	2200      	movs	r2, #0
   1e9c0:	2114      	movs	r1, #20
   1e9c2:	3024      	adds	r0, #36	; 0x24
   1e9c4:	f008 fdec 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->pad_normal);
   1e9c8:	6820      	ldr	r0, [r4, #0]
   1e9ca:	3028      	adds	r0, #40	; 0x28
   1e9cc:	f00b ffa3 	bl	2a916 <style_init_reset>
    lv_style_set_pad_left(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1e9d0:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1e9d2:	220c      	movs	r2, #12
   1e9d4:	2112      	movs	r1, #18
   1e9d6:	3028      	adds	r0, #40	; 0x28
   1e9d8:	f008 fde2 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1e9dc:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1e9de:	220c      	movs	r2, #12
   1e9e0:	2113      	movs	r1, #19
   1e9e2:	3028      	adds	r0, #40	; 0x28
   1e9e4:	f008 fddc 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1e9e8:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1e9ea:	220c      	movs	r2, #12
   1e9ec:	2110      	movs	r1, #16
   1e9ee:	3028      	adds	r0, #40	; 0x28
   1e9f0:	f008 fdd6 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1e9f4:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1e9f6:	220c      	movs	r2, #12
   1e9f8:	2111      	movs	r1, #17
   1e9fa:	3028      	adds	r0, #40	; 0x28
   1e9fc:	f008 fdd0 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_normal, LV_STATE_DEFAULT, LV_DPI / 10);
   1ea00:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1ea02:	220c      	movs	r2, #12
   1ea04:	2114      	movs	r1, #20
   1ea06:	3028      	adds	r0, #40	; 0x28
   1ea08:	f008 fdca 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->pad_small);
   1ea0c:	6820      	ldr	r0, [r4, #0]
   1ea0e:	302c      	adds	r0, #44	; 0x2c
   1ea10:	f00b ff81 	bl	2a916 <style_init_reset>
    lv_style_set_pad_left(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea14:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ea16:	2206      	movs	r2, #6
   1ea18:	2112      	movs	r1, #18
   1ea1a:	302c      	adds	r0, #44	; 0x2c
   1ea1c:	f008 fdc0 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_right(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea20:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1ea22:	2206      	movs	r2, #6
   1ea24:	2113      	movs	r1, #19
   1ea26:	302c      	adds	r0, #44	; 0x2c
   1ea28:	f008 fdba 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_top(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea2c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ea2e:	2206      	movs	r2, #6
   1ea30:	2110      	movs	r1, #16
   1ea32:	302c      	adds	r0, #44	; 0x2c
   1ea34:	f008 fdb4 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_bottom(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea38:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1ea3a:	2206      	movs	r2, #6
   1ea3c:	2111      	movs	r1, #17
   1ea3e:	302c      	adds	r0, #44	; 0x2c
   1ea40:	f008 fdae 	bl	275a0 <_lv_style_set_int>
    lv_style_set_pad_inner(&styles->pad_small, LV_STATE_DEFAULT, LV_DPI / 20);
   1ea44:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   1ea46:	2206      	movs	r2, #6
   1ea48:	2114      	movs	r1, #20
   1ea4a:	302c      	adds	r0, #44	; 0x2c
   1ea4c:	f008 fda8 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->pad_inner);
   1ea50:	6820      	ldr	r0, [r4, #0]
   1ea52:	3030      	adds	r0, #48	; 0x30
   1ea54:	f00b ff5f 	bl	2a916 <style_init_reset>
    lv_style_set_pad_inner(&styles->pad_inner, LV_STATE_DEFAULT, LV_DPI / 15);
   1ea58:	6820      	ldr	r0, [r4, #0]
   1ea5a:	2208      	movs	r2, #8
   1ea5c:	2114      	movs	r1, #20
   1ea5e:	3030      	adds	r0, #48	; 0x30
   1ea60:	f008 fd9e 	bl	275a0 <_lv_style_set_int>
    style_init_reset(&styles->txt_underline);
   1ea64:	6820      	ldr	r0, [r4, #0]
   1ea66:	3034      	adds	r0, #52	; 0x34
   1ea68:	f00b ff55 	bl	2a916 <style_init_reset>
    lv_style_set_text_decor(&styles->txt_underline, LV_STATE_FOCUSED, LV_TEXT_DECOR_UNDERLINE);
   1ea6c:	6820      	ldr	r0, [r4, #0]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   1ea6e:	2201      	movs	r2, #1
   1ea70:	f248 2182 	movw	r1, #33410	; 0x8282
   1ea74:	3034      	adds	r0, #52	; 0x34
   1ea76:	f008 fd93 	bl	275a0 <_lv_style_set_int>
    theme.apply_xcb = NULL;
   1ea7a:	2300      	movs	r3, #0
   1ea7c:	606b      	str	r3, [r5, #4]
    theme.apply_cb = theme_apply;
   1ea7e:	4b1f      	ldr	r3, [pc, #124]	; (1eafc <lv_theme_mono_init+0x8e8>)
}
   1ea80:	481f      	ldr	r0, [pc, #124]	; (1eb00 <lv_theme_mono_init+0x8ec>)
    theme.apply_cb = theme_apply;
   1ea82:	602b      	str	r3, [r5, #0]
}
   1ea84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    lv_style_set_text_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1ea88:	2100      	movs	r1, #0
   1ea8a:	460b      	mov	r3, r1
   1ea8c:	e404      	b.n	1e298 <lv_theme_mono_init+0x84>
    lv_style_set_value_color(&styles->scr, LV_STATE_DEFAULT, FG_COLOR);
   1ea8e:	2100      	movs	r1, #0
   1ea90:	460b      	mov	r3, r1
   1ea92:	e419      	b.n	1e2c8 <lv_theme_mono_init+0xb4>
    lv_style_set_border_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1ea94:	2100      	movs	r1, #0
   1ea96:	460b      	mov	r3, r1
   1ea98:	e46e      	b.n	1e378 <lv_theme_mono_init+0x164>
    lv_style_set_line_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1ea9a:	2100      	movs	r1, #0
   1ea9c:	460b      	mov	r3, r1
   1ea9e:	e48f      	b.n	1e3c0 <lv_theme_mono_init+0x1ac>
    lv_style_set_scale_grad_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eaa0:	2100      	movs	r1, #0
   1eaa2:	460b      	mov	r3, r1
   1eaa4:	e4a4      	b.n	1e3f0 <lv_theme_mono_init+0x1dc>
    lv_style_set_scale_end_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eaa6:	2100      	movs	r1, #0
   1eaa8:	460b      	mov	r3, r1
   1eaaa:	e4b9      	b.n	1e420 <lv_theme_mono_init+0x20c>
    lv_style_set_text_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eaac:	2100      	movs	r1, #0
   1eaae:	460b      	mov	r3, r1
   1eab0:	e4ce      	b.n	1e450 <lv_theme_mono_init+0x23c>
    lv_style_set_value_color(&styles->bg, LV_STATE_DEFAULT, FG_COLOR);
   1eab2:	2100      	movs	r1, #0
   1eab4:	460b      	mov	r3, r1
   1eab6:	e4e4      	b.n	1e482 <lv_theme_mono_init+0x26e>
    lv_style_set_border_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eab8:	2100      	movs	r1, #0
   1eaba:	460b      	mov	r3, r1
   1eabc:	e546      	b.n	1e54c <lv_theme_mono_init+0x338>
    lv_style_set_bg_color(&styles->btn, LV_STATE_PRESSED, FG_COLOR);
   1eabe:	213f      	movs	r1, #63	; 0x3f
   1eac0:	231f      	movs	r3, #31
   1eac2:	e571      	b.n	1e5a8 <lv_theme_mono_init+0x394>
    lv_style_set_bg_color(&styles->btn, LV_STATE_CHECKED, FG_COLOR);
   1eac4:	213f      	movs	r1, #63	; 0x3f
   1eac6:	231f      	movs	r3, #31
   1eac8:	e587      	b.n	1e5da <lv_theme_mono_init+0x3c6>
    lv_style_set_text_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eaca:	2100      	movs	r1, #0
   1eacc:	460b      	mov	r3, r1
   1eace:	e5b4      	b.n	1e63a <lv_theme_mono_init+0x426>
    lv_style_set_text_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1ead0:	2100      	movs	r1, #0
   1ead2:	460b      	mov	r3, r1
   1ead4:	e5f8      	b.n	1e6c8 <lv_theme_mono_init+0x4b4>
    lv_style_set_value_color(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1ead6:	2100      	movs	r1, #0
   1ead8:	460b      	mov	r3, r1
   1eada:	e610      	b.n	1e6fe <lv_theme_mono_init+0x4ea>
    lv_style_set_value_color(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1eadc:	2100      	movs	r1, #0
   1eade:	460b      	mov	r3, r1
   1eae0:	e653      	b.n	1e78a <lv_theme_mono_init+0x576>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_DEFAULT, FG_COLOR);
   1eae2:	2100      	movs	r1, #0
   1eae4:	460b      	mov	r3, r1
   1eae6:	e669      	b.n	1e7bc <lv_theme_mono_init+0x5a8>
    lv_style_set_image_recolor(&styles->btn, LV_STATE_CHECKED | LV_STATE_PRESSED, FG_COLOR);
   1eae8:	2100      	movs	r1, #0
   1eaea:	460b      	mov	r3, r1
   1eaec:	e6ad      	b.n	1e84a <lv_theme_mono_init+0x636>
    lv_style_set_bg_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1eaee:	2100      	movs	r1, #0
   1eaf0:	460b      	mov	r3, r1
   1eaf2:	e6e6      	b.n	1e8c2 <lv_theme_mono_init+0x6ae>
    lv_style_set_line_color(&styles->fg_color, LV_STATE_DEFAULT, FG_COLOR);
   1eaf4:	2100      	movs	r1, #0
   1eaf6:	460b      	mov	r3, r1
   1eaf8:	e72e      	b.n	1e958 <lv_theme_mono_init+0x744>
   1eafa:	bf00      	nop
   1eafc:	0001e19d 	.word	0x0001e19d
   1eb00:	20004018 	.word	0x20004018

0001eb04 <lv_label_revert_dots>:

    lv_obj_invalidate(label);
}

static void lv_label_revert_dots(lv_obj_t * label)
{
   1eb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb06:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb08:	f007 fea2 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1eb0c:	7c03      	ldrb	r3, [r0, #16]
   1eb0e:	f003 0307 	and.w	r3, r3, #7
   1eb12:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb14:	4604      	mov	r4, r0
    if(ext->long_mode != LV_LABEL_LONG_DOT) return;
   1eb16:	d129      	bne.n	1eb6c <lv_label_revert_dots+0x68>
    if(ext->dot_end == LV_LABEL_DOT_END_INV) return;
   1eb18:	6881      	ldr	r1, [r0, #8]
   1eb1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eb1e:	4299      	cmp	r1, r3
   1eb20:	d024      	beq.n	1eb6c <lv_label_revert_dots+0x68>
    uint32_t letter_i = ext->dot_end - LV_LABEL_DOT_NUM;
    uint32_t byte_i   = _lv_txt_encoded_get_byte_id(ext->text, letter_i);
   1eb22:	4b14      	ldr	r3, [pc, #80]	; (1eb74 <lv_label_revert_dots+0x70>)
   1eb24:	6800      	ldr	r0, [r0, #0]
   1eb26:	681b      	ldr	r3, [r3, #0]
   1eb28:	3903      	subs	r1, #3
   1eb2a:	4798      	blx	r3
   1eb2c:	4607      	mov	r7, r0
 * @param label pointer to label object
 * @return char pointer to a stored characters. Is *not* necessarily NULL-terminated.
 */
static char * lv_label_get_dot_tmp(lv_obj_t * label)
{
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb2e:	4628      	mov	r0, r5
   1eb30:	f007 fe8e 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc) {
   1eb34:	7c42      	ldrb	r2, [r0, #17]
   1eb36:	07d2      	lsls	r2, r2, #31
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb38:	4603      	mov	r3, r0
        return ext->dot.tmp_ptr;
   1eb3a:	bf4c      	ite	mi
   1eb3c:	6843      	ldrmi	r3, [r0, #4]
    }
    else {
        return ext->dot.tmp;
   1eb3e:	3304      	addpl	r3, #4
    while(ext->text[byte_i + i] != '\0') {
   1eb40:	2200      	movs	r2, #0
   1eb42:	fa57 f182 	uxtab	r1, r7, r2
   1eb46:	6826      	ldr	r6, [r4, #0]
   1eb48:	b2d0      	uxtb	r0, r2
   1eb4a:	f816 e001 	ldrb.w	lr, [r6, r1]
   1eb4e:	5c18      	ldrb	r0, [r3, r0]
   1eb50:	eb06 0c01 	add.w	ip, r6, r1
   1eb54:	3201      	adds	r2, #1
   1eb56:	f1be 0f00 	cmp.w	lr, #0
   1eb5a:	d108      	bne.n	1eb6e <lv_label_revert_dots+0x6a>
    ext->text[byte_i + i] = dot_tmp[i];
   1eb5c:	f88c 0000 	strb.w	r0, [ip]
    lv_label_dot_tmp_free(label);
   1eb60:	4628      	mov	r0, r5
   1eb62:	f00b feda 	bl	2a91a <lv_label_dot_tmp_free>
    ext->dot_end = LV_LABEL_DOT_END_INV;
   1eb66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eb6a:	60a3      	str	r3, [r4, #8]
}
   1eb6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ext->text[byte_i + i] = dot_tmp[i];
   1eb6e:	5470      	strb	r0, [r6, r1]
        i++;
   1eb70:	e7e7      	b.n	1eb42 <lv_label_revert_dots+0x3e>
   1eb72:	bf00      	nop
   1eb74:	200007c8 	.word	0x200007c8

0001eb78 <lv_label_set_dot_tmp>:
{
   1eb78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1eb7a:	4616      	mov	r6, r2
   1eb7c:	4604      	mov	r4, r0
   1eb7e:	460f      	mov	r7, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1eb80:	f007 fe66 	bl	26850 <lv_obj_get_ext_attr>
   1eb84:	4605      	mov	r5, r0
    lv_label_dot_tmp_free(label); /* Deallocate any existing space */
   1eb86:	4620      	mov	r0, r4
   1eb88:	f00b fec7 	bl	2a91a <lv_label_dot_tmp_free>
    if(len > sizeof(char *)) {
   1eb8c:	2e04      	cmp	r6, #4
   1eb8e:	d91e      	bls.n	1ebce <lv_label_set_dot_tmp+0x56>
        ext->dot.tmp_ptr = lv_mem_alloc(len + 1);
   1eb90:	1c70      	adds	r0, r6, #1
   1eb92:	f7fe fcdd 	bl	1d550 <lv_mem_alloc>
   1eb96:	4604      	mov	r4, r0
   1eb98:	6068      	str	r0, [r5, #4]
        if(ext->dot.tmp_ptr == NULL) {
   1eb9a:	b958      	cbnz	r0, 1ebb4 <lv_label_set_dot_tmp+0x3c>
            LV_LOG_ERROR("Failed to allocate memory for dot_tmp_ptr");
   1eb9c:	4b11      	ldr	r3, [pc, #68]	; (1ebe4 <lv_label_set_dot_tmp+0x6c>)
   1eb9e:	9300      	str	r3, [sp, #0]
   1eba0:	2003      	movs	r0, #3
   1eba2:	4b11      	ldr	r3, [pc, #68]	; (1ebe8 <lv_label_set_dot_tmp+0x70>)
   1eba4:	4911      	ldr	r1, [pc, #68]	; (1ebec <lv_label_set_dot_tmp+0x74>)
   1eba6:	f44f 62ba 	mov.w	r2, #1488	; 0x5d0
   1ebaa:	f7fe fca9 	bl	1d500 <_lv_log_add>
   1ebae:	4620      	mov	r0, r4
}
   1ebb0:	b003      	add	sp, #12
   1ebb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
   1ebb4:	4632      	mov	r2, r6
   1ebb6:	4639      	mov	r1, r7
   1ebb8:	f00b fec1 	bl	2a93e <_lv_memcpy>
        ext->dot.tmp_ptr[len] = '\0';
   1ebbc:	686b      	ldr	r3, [r5, #4]
   1ebbe:	2200      	movs	r2, #0
   1ebc0:	559a      	strb	r2, [r3, r6]
        ext->dot_tmp_alloc    = true;
   1ebc2:	7c6b      	ldrb	r3, [r5, #17]
   1ebc4:	f043 0301 	orr.w	r3, r3, #1
   1ebc8:	746b      	strb	r3, [r5, #17]
    return true;
   1ebca:	2001      	movs	r0, #1
   1ebcc:	e7f0      	b.n	1ebb0 <lv_label_set_dot_tmp+0x38>
        ext->dot_tmp_alloc = false;
   1ebce:	7c6b      	ldrb	r3, [r5, #17]
   1ebd0:	f36f 0300 	bfc	r3, #0, #1
   1ebd4:	746b      	strb	r3, [r5, #17]
        _lv_memcpy(ext->dot.tmp, data, len);
   1ebd6:	4632      	mov	r2, r6
   1ebd8:	4639      	mov	r1, r7
   1ebda:	1d28      	adds	r0, r5, #4
   1ebdc:	f00b feaf 	bl	2a93e <_lv_memcpy>
   1ebe0:	e7f3      	b.n	1ebca <lv_label_set_dot_tmp+0x52>
   1ebe2:	bf00      	nop
   1ebe4:	000391e5 	.word	0x000391e5
   1ebe8:	0003923b 	.word	0x0003923b
   1ebec:	000391aa 	.word	0x000391aa

0001ebf0 <lv_label_get_letter_on>:
{
   1ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ebf4:	b08f      	sub	sp, #60	; 0x3c
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
   1ebf6:	f9b1 3000 	ldrsh.w	r3, [r1]
   1ebfa:	9305      	str	r3, [sp, #20]
{
   1ebfc:	460c      	mov	r4, r1
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ebfe:	2212      	movs	r2, #18
   1ec00:	2100      	movs	r1, #0
   1ec02:	4606      	mov	r6, r0
   1ec04:	f7fb fd44 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ec08:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1ec0a:	9008      	str	r0, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1ec0c:	2100      	movs	r1, #0
   1ec0e:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
   1ec10:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
   1ec14:	f7fb fd3c 	bl	1a690 <_lv_obj_get_style_int>
   1ec18:	1a24      	subs	r4, r4, r0
   1ec1a:	b223      	sxth	r3, r4
    get_txt_coords(label, &txt_coords);
   1ec1c:	a90c      	add	r1, sp, #48	; 0x30
   1ec1e:	4630      	mov	r0, r6
    pos.y = pos_in->y - lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
   1ec20:	9306      	str	r3, [sp, #24]
    get_txt_coords(label, &txt_coords);
   1ec22:	f00b fe8e 	bl	2a942 <get_txt_coords>
    const char * txt         = lv_label_get_text(label);
   1ec26:	4630      	mov	r0, r6
   1ec28:	f00b feca 	bl	2a9c0 <lv_label_get_text>
   1ec2c:	4607      	mov	r7, r0
    lv_label_ext_t * ext     = lv_obj_get_ext_attr(label);
   1ec2e:	4630      	mov	r0, r6
   1ec30:	f007 fe0e 	bl	26850 <lv_obj_get_ext_attr>
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ec34:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ec38:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1ec3c:	3301      	adds	r3, #1
   1ec3e:	1a9b      	subs	r3, r3, r2
   1ec40:	b21b      	sxth	r3, r3
   1ec42:	4605      	mov	r5, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_BLEND_MODE, text_blend_mode, lv_blend_mode_t, _int, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ec44:	f248 028e 	movw	r2, #32910	; 0x808e
   1ec48:	2100      	movs	r1, #0
   1ec4a:	4630      	mov	r0, r6
   1ec4c:	9307      	str	r3, [sp, #28]
   1ec4e:	f007 fd1b 	bl	26688 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ec52:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ec56:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ec58:	2100      	movs	r1, #0
   1ec5a:	4630      	mov	r0, r6
   1ec5c:	f7fb fd18 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1ec60:	f248 0280 	movw	r2, #32896	; 0x8080
   1ec64:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ec66:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1ec68:	4630      	mov	r0, r6
   1ec6a:	f7fb fd11 	bl	1a690 <_lv_obj_get_style_int>
    lv_coord_t letter_height    = lv_font_get_line_height(font);
   1ec6e:	f9b9 3008 	ldrsh.w	r3, [r9, #8]
   1ec72:	9304      	str	r3, [sp, #16]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1ec74:	7c2b      	ldrb	r3, [r5, #16]
   1ec76:	9003      	str	r0, [sp, #12]
   1ec78:	f3c3 1580 	ubfx	r5, r3, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1ec7c:	061a      	lsls	r2, r3, #24
   1ec7e:	bf48      	it	mi
   1ec80:	f045 0502 	orrmi.w	r5, r5, #2
    lv_label_align_t align = lv_label_get_align(label);
   1ec84:	4630      	mov	r0, r6
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1ec86:	075b      	lsls	r3, r3, #29
   1ec88:	bf08      	it	eq
   1ec8a:	f045 0510 	orreq.w	r5, r5, #16
    lv_label_align_t align = lv_label_get_align(label);
   1ec8e:	f00b fea3 	bl	2a9d8 <lv_label_get_align>
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1ec92:	2801      	cmp	r0, #1
    lv_label_align_t align = lv_label_get_align(label);
   1ec94:	4682      	mov	sl, r0
    if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   1ec96:	d108      	bne.n	1ecaa <lv_label_get_letter_on+0xba>
   1ec98:	f045 0504 	orr.w	r5, r5, #4
        y += letter_height + line_space;
   1ec9c:	9b04      	ldr	r3, [sp, #16]
{
   1ec9e:	f04f 0b00 	mov.w	fp, #0
        y += letter_height + line_space;
   1eca2:	4423      	add	r3, r4
{
   1eca4:	465e      	mov	r6, fp
        y += letter_height + line_space;
   1eca6:	9309      	str	r3, [sp, #36]	; 0x24
   1eca8:	e051      	b.n	1ed4e <lv_label_get_letter_on+0x15e>
    if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   1ecaa:	2802      	cmp	r0, #2
   1ecac:	d1f6      	bne.n	1ec9c <lv_label_get_letter_on+0xac>
   1ecae:	f045 0508 	orr.w	r5, r5, #8
   1ecb2:	e7f3      	b.n	1ec9c <lv_label_get_letter_on+0xac>
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1ecb4:	9b07      	ldr	r3, [sp, #28]
   1ecb6:	9a03      	ldr	r2, [sp, #12]
   1ecb8:	9500      	str	r5, [sp, #0]
   1ecba:	4649      	mov	r1, r9
   1ecbc:	4640      	mov	r0, r8
   1ecbe:	f7fe ffc9 	bl	1dc54 <_lv_txt_get_next_line>
        if(pos.y <= y + letter_height) {
   1ecc2:	9b04      	ldr	r3, [sp, #16]
   1ecc4:	9a06      	ldr	r2, [sp, #24]
   1ecc6:	445b      	add	r3, fp
   1ecc8:	429a      	cmp	r2, r3
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1ecca:	eb06 0400 	add.w	r4, r6, r0
        if(pos.y <= y + letter_height) {
   1ecce:	dc39      	bgt.n	1ed44 <lv_label_get_letter_on+0x154>
            letter = _lv_txt_encoded_prev(txt, &tmp);
   1ecd0:	4b50      	ldr	r3, [pc, #320]	; (1ee14 <lv_label_get_letter_on+0x224>)
            uint32_t tmp = new_line_start;
   1ecd2:	940b      	str	r4, [sp, #44]	; 0x2c
            letter = _lv_txt_encoded_prev(txt, &tmp);
   1ecd4:	681b      	ldr	r3, [r3, #0]
   1ecd6:	a90b      	add	r1, sp, #44	; 0x2c
   1ecd8:	4638      	mov	r0, r7
   1ecda:	4798      	blx	r3
            if(letter != '\n' && txt[new_line_start] == '\0') new_line_start++;
   1ecdc:	280a      	cmp	r0, #10
   1ecde:	d002      	beq.n	1ece6 <lv_label_get_letter_on+0xf6>
   1ece0:	5d3b      	ldrb	r3, [r7, r4]
   1ece2:	b903      	cbnz	r3, 1ece6 <lv_label_get_letter_on+0xf6>
   1ece4:	3401      	adds	r4, #1
    if(align == LV_LABEL_ALIGN_CENTER) {
   1ece6:	f1ba 0f01 	cmp.w	sl, #1
   1ecea:	d137      	bne.n	1ed5c <lv_label_get_letter_on+0x16c>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   1ecec:	9b03      	ldr	r3, [sp, #12]
   1ecee:	9500      	str	r5, [sp, #0]
   1ecf0:	464a      	mov	r2, r9
   1ecf2:	1ba1      	subs	r1, r4, r6
   1ecf4:	4640      	mov	r0, r8
   1ecf6:	f7fe ff5b 	bl	1dbb0 <_lv_txt_get_width>
   1ecfa:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ecfe:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1ed02:	3301      	adds	r3, #1
   1ed04:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) / 2 - line_w / 2;
   1ed06:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   1ed0a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   1ed0e:	fa02 f283 	sxtah	r2, r2, r3
   1ed12:	1043      	asrs	r3, r0, #1
   1ed14:	ebc3 0362 	rsb	r3, r3, r2, asr #1
        x += lv_area_get_width(&txt_coords) - line_w;
   1ed18:	fa0f fb83 	sxth.w	fp, r3
    lv_txt_cmd_state_t cmd_state = LV_TXT_CMD_STATE_WAIT;
   1ed1c:	2200      	movs	r2, #0
   1ed1e:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
    uint32_t i = 0;
   1ed22:	920b      	str	r2, [sp, #44]	; 0x2c
    if(new_line_start > 0) {
   1ed24:	2c00      	cmp	r4, #0
   1ed26:	d16d      	bne.n	1ee04 <lv_label_get_letter_on+0x214>
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   1ed28:	4d3b      	ldr	r5, [pc, #236]	; (1ee18 <lv_label_get_letter_on+0x228>)
   1ed2a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ed2c:	682b      	ldr	r3, [r5, #0]
   1ed2e:	4640      	mov	r0, r8
   1ed30:	4798      	blx	r3
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   1ed32:	682b      	ldr	r3, [r5, #0]
    logical_pos = _lv_txt_encoded_get_char_id(bidi_txt, i);
   1ed34:	4604      	mov	r4, r0
    return  logical_pos + _lv_txt_encoded_get_char_id(txt, line_start);
   1ed36:	4631      	mov	r1, r6
   1ed38:	4638      	mov	r0, r7
   1ed3a:	4798      	blx	r3
}
   1ed3c:	4420      	add	r0, r4
   1ed3e:	b00f      	add	sp, #60	; 0x3c
   1ed40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        y += letter_height + line_space;
   1ed44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1ed46:	449b      	add	fp, r3
   1ed48:	fa0f fb8b 	sxth.w	fp, fp
        new_line_start += _lv_txt_get_next_line(&txt[line_start], font, letter_space, max_w, flag);
   1ed4c:	4626      	mov	r6, r4
    while(txt[line_start] != '\0') {
   1ed4e:	5dbb      	ldrb	r3, [r7, r6]
   1ed50:	eb07 0806 	add.w	r8, r7, r6
   1ed54:	2b00      	cmp	r3, #0
   1ed56:	d1ad      	bne.n	1ecb4 <lv_label_get_letter_on+0xc4>
   1ed58:	4634      	mov	r4, r6
   1ed5a:	e7c4      	b.n	1ece6 <lv_label_get_letter_on+0xf6>
    else if(align == LV_LABEL_ALIGN_RIGHT) {
   1ed5c:	f1ba 0f02 	cmp.w	sl, #2
   1ed60:	d10e      	bne.n	1ed80 <lv_label_get_letter_on+0x190>
        line_w = _lv_txt_get_width(bidi_txt, new_line_start - line_start, font, letter_space, flag);
   1ed62:	9b03      	ldr	r3, [sp, #12]
   1ed64:	9500      	str	r5, [sp, #0]
   1ed66:	464a      	mov	r2, r9
   1ed68:	1ba1      	subs	r1, r4, r6
   1ed6a:	4640      	mov	r0, r8
   1ed6c:	f7fe ff20 	bl	1dbb0 <_lv_txt_get_width>
   1ed70:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1ed74:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   1ed78:	3301      	adds	r3, #1
   1ed7a:	1a9b      	subs	r3, r3, r2
        x += lv_area_get_width(&txt_coords) - line_w;
   1ed7c:	1a1b      	subs	r3, r3, r0
   1ed7e:	e7cb      	b.n	1ed18 <lv_label_get_letter_on+0x128>
    lv_coord_t x = 0;
   1ed80:	f04f 0b00 	mov.w	fp, #0
   1ed84:	e7ca      	b.n	1ed1c <lv_label_get_letter_on+0x12c>
                if(_lv_txt_is_cmd(&cmd_state, bidi_txt[i]) != false) {
   1ed86:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ed88:	9007      	str	r0, [sp, #28]
   1ed8a:	f818 1001 	ldrb.w	r1, [r8, r1]
   1ed8e:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1ed92:	f00b fd40 	bl	2a816 <_lv_txt_is_cmd>
   1ed96:	9a07      	ldr	r2, [sp, #28]
   1ed98:	b198      	cbz	r0, 1edc2 <lv_label_get_letter_on+0x1d2>
        while(i + line_start < new_line_start) {
   1ed9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ed9c:	4432      	add	r2, r6
   1ed9e:	42a2      	cmp	r2, r4
   1eda0:	d2c2      	bcs.n	1ed28 <lv_label_get_letter_on+0x138>
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   1eda2:	f8da 2000 	ldr.w	r2, [sl]
   1eda6:	a90b      	add	r1, sp, #44	; 0x2c
   1eda8:	4640      	mov	r0, r8
   1edaa:	4790      	blx	r2
   1edac:	4605      	mov	r5, r0
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1edae:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1edb0:	f8da 2000 	ldr.w	r2, [sl]
   1edb4:	2100      	movs	r1, #0
   1edb6:	4440      	add	r0, r8
   1edb8:	4790      	blx	r2
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1edba:	9b06      	ldr	r3, [sp, #24]
            uint32_t letter_next = _lv_txt_encoded_next(&bidi_txt[i], NULL);
   1edbc:	4602      	mov	r2, r0
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1edbe:	2b00      	cmp	r3, #0
   1edc0:	d1e1      	bne.n	1ed86 <lv_label_get_letter_on+0x196>
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
   1edc2:	4629      	mov	r1, r5
   1edc4:	4648      	mov	r0, r9
   1edc6:	f00b fd68 	bl	2a89a <lv_font_get_glyph_width>
    pos.x = pos_in->x - lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
   1edca:	9b05      	ldr	r3, [sp, #20]
   1edcc:	9a08      	ldr	r2, [sp, #32]
   1edce:	1a9a      	subs	r2, r3, r2
            lv_coord_t gw = lv_font_get_glyph_width(font, letter, letter_next);
   1edd0:	b201      	sxth	r1, r0
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
   1edd2:	b212      	sxth	r2, r2
   1edd4:	fa0b f080 	sxtah	r0, fp, r0
   1edd8:	4282      	cmp	r2, r0
   1edda:	da02      	bge.n	1ede2 <lv_label_get_letter_on+0x1f2>
                i = i_act;
   1eddc:	9b04      	ldr	r3, [sp, #16]
   1edde:	930b      	str	r3, [sp, #44]	; 0x2c
                break;
   1ede0:	e7a2      	b.n	1ed28 <lv_label_get_letter_on+0x138>
            if(pos.x < x + gw || i + line_start == new_line_start ||  txt[i_act + line_start] == '\0') {
   1ede2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ede4:	1990      	adds	r0, r2, r6
   1ede6:	42a0      	cmp	r0, r4
   1ede8:	d0f8      	beq.n	1eddc <lv_label_get_letter_on+0x1ec>
   1edea:	9b04      	ldr	r3, [sp, #16]
   1edec:	19b8      	adds	r0, r7, r6
   1edee:	5cc0      	ldrb	r0, [r0, r3]
   1edf0:	2800      	cmp	r0, #0
   1edf2:	d0f3      	beq.n	1eddc <lv_label_get_letter_on+0x1ec>
            x += letter_space;
   1edf4:	9b03      	ldr	r3, [sp, #12]
            i_act = i;
   1edf6:	9204      	str	r2, [sp, #16]
   1edf8:	445b      	add	r3, fp
            x += letter_space;
   1edfa:	fa01 f383 	sxtah	r3, r1, r3
   1edfe:	fa0f fb83 	sxth.w	fp, r3
            i_act = i;
   1ee02:	e7ca      	b.n	1ed9a <lv_label_get_letter_on+0x1aa>
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ee04:	f005 0301 	and.w	r3, r5, #1
            uint32_t letter = _lv_txt_encoded_next(bidi_txt, &i);
   1ee08:	f8df a010 	ldr.w	sl, [pc, #16]	; 1ee1c <lv_label_get_letter_on+0x22c>
    uint32_t i_act = i;
   1ee0c:	9204      	str	r2, [sp, #16]
            if((flag & LV_TXT_FLAG_RECOLOR) != 0) {
   1ee0e:	9306      	str	r3, [sp, #24]
   1ee10:	e7c3      	b.n	1ed9a <lv_label_get_letter_on+0x1aa>
   1ee12:	bf00      	nop
   1ee14:	200007d4 	.word	0x200007d4
   1ee18:	200007cc 	.word	0x200007cc
   1ee1c:	200007d0 	.word	0x200007d0

0001ee20 <lv_label_refr_text>:
{
   1ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee24:	b08b      	sub	sp, #44	; 0x2c
   1ee26:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1ee28:	f007 fd12 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->text == NULL) return;
   1ee2c:	6803      	ldr	r3, [r0, #0]
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1ee2e:	4604      	mov	r4, r0
    if(ext->text == NULL) return;
   1ee30:	2b00      	cmp	r3, #0
   1ee32:	d062      	beq.n	1eefa <lv_label_refr_text+0xda>
    get_txt_coords(label, &txt_coords);
   1ee34:	a908      	add	r1, sp, #32
   1ee36:	4628      	mov	r0, r5
   1ee38:	f00b fd83 	bl	2a942 <get_txt_coords>
   1ee3c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   1ee40:	f8bd 3020 	ldrh.w	r3, [sp, #32]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ee44:	f248 028e 	movw	r2, #32910	; 0x808e
   1ee48:	2100      	movs	r1, #0
   1ee4a:	3601      	adds	r6, #1
   1ee4c:	4628      	mov	r0, r5
   1ee4e:	1af6      	subs	r6, r6, r3
   1ee50:	f007 fc1a 	bl	26688 <_lv_obj_get_style_ptr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ee54:	f248 0281 	movw	r2, #32897	; 0x8081
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   1ee58:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ee5a:	2100      	movs	r1, #0
   1ee5c:	4628      	mov	r0, r5
   1ee5e:	f7fb fc17 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1ee62:	2100      	movs	r1, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   1ee64:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   1ee66:	f248 0280 	movw	r2, #32896	; 0x8080
   1ee6a:	4628      	mov	r0, r5
   1ee6c:	f7fb fc10 	bl	1a690 <_lv_obj_get_style_int>
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1ee70:	7c22      	ldrb	r2, [r4, #16]
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   1ee72:	9700      	str	r7, [sp, #0]
    if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   1ee74:	f3c2 1380 	ubfx	r3, r2, #6, #1
    if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   1ee78:	0611      	lsls	r1, r2, #24
   1ee7a:	bf48      	it	mi
   1ee7c:	f043 0302 	orrmi.w	r3, r3, #2
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   1ee80:	0752      	lsls	r2, r2, #29
   1ee82:	bf08      	it	eq
   1ee84:	f043 0310 	orreq.w	r3, r3, #16
   1ee88:	b236      	sxth	r6, r6
    _lv_txt_get_size(&size, ext->text, font, letter_space, line_space, max_w, flag);
   1ee8a:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1ee8e:	4681      	mov	r9, r0
   1ee90:	4603      	mov	r3, r0
   1ee92:	6821      	ldr	r1, [r4, #0]
   1ee94:	4642      	mov	r2, r8
   1ee96:	a805      	add	r0, sp, #20
   1ee98:	f7fe ffc0 	bl	1de1c <_lv_txt_get_size>
    if(ext->long_mode == LV_LABEL_LONG_EXPAND) {
   1ee9c:	7c26      	ldrb	r6, [r4, #16]
   1ee9e:	f016 0607 	ands.w	r6, r6, #7
   1eea2:	d12d      	bne.n	1ef00 <lv_label_refr_text+0xe0>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1eea4:	2212      	movs	r2, #18
   1eea6:	4631      	mov	r1, r6
   1eea8:	4628      	mov	r0, r5
   1eeaa:	f7fb fbf1 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1eeae:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   1eeb0:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   1eeb2:	4631      	mov	r1, r6
   1eeb4:	4628      	mov	r0, r5
   1eeb6:	f7fb fbeb 	bl	1a690 <_lv_obj_get_style_int>
        size.x += lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
   1eeba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   1eebe:	4420      	add	r0, r4
   1eec0:	4418      	add	r0, r3
   1eec2:	f8ad 0014 	strh.w	r0, [sp, #20]
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1eec6:	2210      	movs	r2, #16
   1eec8:	4631      	mov	r1, r6
   1eeca:	4628      	mov	r0, r5
   1eecc:	f7fb fbe0 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1eed0:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1eed2:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1eed4:	4631      	mov	r1, r6
   1eed6:	4628      	mov	r0, r5
   1eed8:	f7fb fbda 	bl	1a690 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1eedc:	1902      	adds	r2, r0, r4
   1eede:	f8bd 0016 	ldrh.w	r0, [sp, #22]
        lv_obj_set_size(label, size.x, size.y);
   1eee2:	f9bd 1014 	ldrsh.w	r1, [sp, #20]
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1eee6:	4402      	add	r2, r0
   1eee8:	b212      	sxth	r2, r2
        lv_obj_set_size(label, size.x, size.y);
   1eeea:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1eeec:	f8ad 2016 	strh.w	r2, [sp, #22]
        lv_obj_set_size(label, size.x, size.y);
   1eef0:	f007 fa73 	bl	263da <lv_obj_set_size>
    lv_obj_invalidate(label);
   1eef4:	4628      	mov	r0, r5
   1eef6:	f007 f9ec 	bl	262d2 <lv_obj_invalidate>
}
   1eefa:	b00b      	add	sp, #44	; 0x2c
   1eefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if(ext->long_mode == LV_LABEL_LONG_SROLL) {
   1ef00:	1ef3      	subs	r3, r6, #3
   1ef02:	2b01      	cmp	r3, #1
   1ef04:	d9f6      	bls.n	1eef4 <lv_label_refr_text+0xd4>
    else if(ext->long_mode == LV_LABEL_LONG_DOT) {
   1ef06:	2e02      	cmp	r6, #2
   1ef08:	f040 8086 	bne.w	1f018 <lv_label_refr_text+0x1f8>
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ef0c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ef10:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1ef14:	3301      	adds	r3, #1
   1ef16:	1a9b      	subs	r3, r3, r2
        if(size.y <= lv_area_get_height(&txt_coords)) { /*No dots are required, the text is short enough*/
   1ef18:	f9bd 2016 	ldrsh.w	r2, [sp, #22]
   1ef1c:	b21b      	sxth	r3, r3
   1ef1e:	429a      	cmp	r2, r3
   1ef20:	dc03      	bgt.n	1ef2a <lv_label_refr_text+0x10a>
            ext->dot_end = LV_LABEL_DOT_END_INV;
   1ef22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ef26:	60a3      	str	r3, [r4, #8]
   1ef28:	e7e4      	b.n	1eef4 <lv_label_refr_text+0xd4>
        else if(_lv_txt_get_encoded_length(ext->text) <= LV_LABEL_DOT_NUM) {   /*Don't turn to dots all the characters*/
   1ef2a:	4b48      	ldr	r3, [pc, #288]	; (1f04c <lv_label_refr_text+0x22c>)
   1ef2c:	6820      	ldr	r0, [r4, #0]
   1ef2e:	681b      	ldr	r3, [r3, #0]
   1ef30:	4798      	blx	r3
   1ef32:	2803      	cmp	r0, #3
   1ef34:	d9f5      	bls.n	1ef22 <lv_label_refr_text+0x102>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ef36:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
   1ef3a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
                  (lv_font_get_glyph_width(font, '.', '.') + letter_space) *
   1ef3e:	222e      	movs	r2, #46	; 0x2e
   1ef40:	4611      	mov	r1, r2
   1ef42:	4640      	mov	r0, r8
   1ef44:	3601      	adds	r6, #1
   1ef46:	1af6      	subs	r6, r6, r3
   1ef48:	f00b fca7 	bl	2a89a <lv_font_get_glyph_width>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1ef4c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   1ef50:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   1ef54:	3301      	adds	r3, #1
   1ef56:	4481      	add	r9, r0
   1ef58:	1a9b      	subs	r3, r3, r2
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   1ef5a:	f9b8 0008 	ldrsh.w	r0, [r8, #8]
   1ef5e:	b21b      	sxth	r3, r3
            p.y -= line_space;                                               /*Trim the last line space*/
   1ef60:	1bda      	subs	r2, r3, r7
                   (lv_font_get_line_height(font) + line_space); /*Round down to the last line*/
   1ef62:	4407      	add	r7, r0
            p.x = lv_area_get_width(&txt_coords) -
   1ef64:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
            p.y -= p.y %
   1ef68:	fb93 f0f7 	sdiv	r0, r3, r7
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   1ef6c:	b236      	sxth	r6, r6
   1ef6e:	fb07 3710 	mls	r7, r7, r0, r3
            p.y -= line_space;                                               /*Trim the last line space*/
   1ef72:	1bd7      	subs	r7, r2, r7
            p.x = lv_area_get_width(&txt_coords) -
   1ef74:	444e      	add	r6, r9
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1ef76:	a906      	add	r1, sp, #24
   1ef78:	4628      	mov	r0, r5
            p.x = lv_area_get_width(&txt_coords) -
   1ef7a:	f8ad 6018 	strh.w	r6, [sp, #24]
            p.y -= line_space;                                               /*Trim the last line space*/
   1ef7e:	f8ad 701a 	strh.w	r7, [sp, #26]
            uint32_t letter_id = lv_label_get_letter_on(label, &p);
   1ef82:	f7ff fe35 	bl	1ebf0 <lv_label_get_letter_on>
   1ef86:	4606      	mov	r6, r0
            size_t txt_len = strlen(ext->text);
   1ef88:	6820      	ldr	r0, [r4, #0]
   1ef8a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 1f058 <lv_label_refr_text+0x238>
   1ef8e:	f7e1 fa7d 	bl	48c <strlen>
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1ef92:	4b2f      	ldr	r3, [pc, #188]	; (1f050 <lv_label_refr_text+0x230>)
            size_t txt_len = strlen(ext->text);
   1ef94:	4680      	mov	r8, r0
            uint32_t byte_id     = _lv_txt_encoded_get_byte_id(ext->text, letter_id);
   1ef96:	681b      	ldr	r3, [r3, #0]
   1ef98:	6820      	ldr	r0, [r4, #0]
   1ef9a:	4631      	mov	r1, r6
   1ef9c:	4798      	blx	r3
   1ef9e:	46ca      	mov	sl, r9
   1efa0:	9007      	str	r0, [sp, #28]
            while(byte_id + LV_LABEL_DOT_NUM > txt_len) {
   1efa2:	9f07      	ldr	r7, [sp, #28]
   1efa4:	6820      	ldr	r0, [r4, #0]
   1efa6:	f8d9 3000 	ldr.w	r3, [r9]
   1efaa:	f107 0b03 	add.w	fp, r7, #3
   1efae:	45c3      	cmp	fp, r8
   1efb0:	4438      	add	r0, r7
   1efb2:	d82b      	bhi.n	1f00c <lv_label_refr_text+0x1ec>
   1efb4:	f04f 0804 	mov.w	r8, #4
            uint8_t len          = 0;
   1efb8:	f04f 0900 	mov.w	r9, #0
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1efbc:	9907      	ldr	r1, [sp, #28]
   1efbe:	6820      	ldr	r0, [r4, #0]
   1efc0:	f8da 3000 	ldr.w	r3, [sl]
   1efc4:	4408      	add	r0, r1
   1efc6:	4798      	blx	r3
                _lv_txt_encoded_next(ext->text, &byte_id);
   1efc8:	4b22      	ldr	r3, [pc, #136]	; (1f054 <lv_label_refr_text+0x234>)
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1efca:	4481      	add	r9, r0
                _lv_txt_encoded_next(ext->text, &byte_id);
   1efcc:	681b      	ldr	r3, [r3, #0]
   1efce:	6820      	ldr	r0, [r4, #0]
   1efd0:	a907      	add	r1, sp, #28
   1efd2:	4798      	blx	r3
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1efd4:	f1b8 0801 	subs.w	r8, r8, #1
                len += _lv_txt_encoded_size(&ext->text[byte_id]);
   1efd8:	fa5f f989 	uxtb.w	r9, r9
            for(i = 0; i <= LV_LABEL_DOT_NUM; i++) {
   1efdc:	d1ee      	bne.n	1efbc <lv_label_refr_text+0x19c>
            if(lv_label_set_dot_tmp(label, &ext->text[byte_id_ori], len)) {
   1efde:	6821      	ldr	r1, [r4, #0]
   1efe0:	464a      	mov	r2, r9
   1efe2:	4439      	add	r1, r7
   1efe4:	4628      	mov	r0, r5
   1efe6:	f7ff fdc7 	bl	1eb78 <lv_label_set_dot_tmp>
   1efea:	2800      	cmp	r0, #0
   1efec:	d082      	beq.n	1eef4 <lv_label_refr_text+0xd4>
                    ext->text[byte_id_ori + i] = '.';
   1efee:	6823      	ldr	r3, [r4, #0]
   1eff0:	222e      	movs	r2, #46	; 0x2e
   1eff2:	55da      	strb	r2, [r3, r7]
   1eff4:	6823      	ldr	r3, [r4, #0]
   1eff6:	443b      	add	r3, r7
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1eff8:	3603      	adds	r6, #3
                    ext->text[byte_id_ori + i] = '.';
   1effa:	705a      	strb	r2, [r3, #1]
   1effc:	6823      	ldr	r3, [r4, #0]
   1effe:	441f      	add	r7, r3
   1f000:	70ba      	strb	r2, [r7, #2]
                ext->text[byte_id_ori + LV_LABEL_DOT_NUM] = '\0';
   1f002:	6823      	ldr	r3, [r4, #0]
   1f004:	f803 800b 	strb.w	r8, [r3, fp]
                ext->dot_end                              = letter_id + LV_LABEL_DOT_NUM;
   1f008:	60a6      	str	r6, [r4, #8]
   1f00a:	e773      	b.n	1eef4 <lv_label_refr_text+0xd4>
                byte_id -= _lv_txt_encoded_size(&ext->text[byte_id]);
   1f00c:	4798      	blx	r3
   1f00e:	9b07      	ldr	r3, [sp, #28]
   1f010:	1a1b      	subs	r3, r3, r0
   1f012:	9307      	str	r3, [sp, #28]
                letter_id--;
   1f014:	3e01      	subs	r6, #1
   1f016:	e7c4      	b.n	1efa2 <lv_label_refr_text+0x182>
    else if(ext->long_mode == LV_LABEL_LONG_BREAK) {
   1f018:	2e01      	cmp	r6, #1
   1f01a:	f47f af6b 	bne.w	1eef4 <lv_label_refr_text+0xd4>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1f01e:	2210      	movs	r2, #16
   1f020:	2100      	movs	r1, #0
   1f022:	4628      	mov	r0, r5
   1f024:	f7fb fb34 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1f028:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   1f02a:	4604      	mov	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   1f02c:	2100      	movs	r1, #0
   1f02e:	4628      	mov	r0, r5
   1f030:	f7fb fb2e 	bl	1a690 <_lv_obj_get_style_int>
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1f034:	1901      	adds	r1, r0, r4
   1f036:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   1f03a:	4401      	add	r1, r0
   1f03c:	b209      	sxth	r1, r1
        lv_obj_set_height(label, size.y);
   1f03e:	4628      	mov	r0, r5
        size.y += lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN) + lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
   1f040:	f8ad 1016 	strh.w	r1, [sp, #22]
        lv_obj_set_height(label, size.y);
   1f044:	f007 fa0b 	bl	2645e <lv_obj_set_height>
   1f048:	e754      	b.n	1eef4 <lv_label_refr_text+0xd4>
   1f04a:	bf00      	nop
   1f04c:	200007dc 	.word	0x200007dc
   1f050:	200007c8 	.word	0x200007c8
   1f054:	200007d0 	.word	0x200007d0
   1f058:	200007d8 	.word	0x200007d8

0001f05c <lv_label_create>:
{
   1f05c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f060:	460f      	mov	r7, r1
    lv_obj_t * new_label = lv_obj_create(par, copy);
   1f062:	f7fb f955 	bl	1a310 <lv_obj_create>
    if(new_label == NULL) return NULL;
   1f066:	4604      	mov	r4, r0
   1f068:	b920      	cbnz	r0, 1f074 <lv_label_create+0x18>
   1f06a:	2400      	movs	r4, #0
}
   1f06c:	4620      	mov	r0, r4
   1f06e:	b002      	add	sp, #8
   1f070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(ancestor_signal == NULL) ancestor_signal = lv_obj_get_signal_cb(new_label);
   1f074:	4d53      	ldr	r5, [pc, #332]	; (1f1c4 <lv_label_create+0x168>)
   1f076:	682b      	ldr	r3, [r5, #0]
   1f078:	b913      	cbnz	r3, 1f080 <lv_label_create+0x24>
   1f07a:	f007 fbe7 	bl	2684c <lv_obj_get_signal_cb>
   1f07e:	6028      	str	r0, [r5, #0]
    lv_obj_allocate_ext_attr(new_label, sizeof(lv_label_ext_t));
   1f080:	2114      	movs	r1, #20
   1f082:	4620      	mov	r0, r4
   1f084:	f007 f8ab 	bl	261de <lv_obj_allocate_ext_attr>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(new_label);
   1f088:	4620      	mov	r0, r4
   1f08a:	f007 fbe1 	bl	26850 <lv_obj_get_ext_attr>
    if(ext == NULL) {
   1f08e:	2300      	movs	r3, #0
   1f090:	4605      	mov	r5, r0
   1f092:	b918      	cbnz	r0, 1f09c <lv_label_create+0x40>
        lv_obj_del(new_label);
   1f094:	4620      	mov	r0, r4
   1f096:	f007 f9ec 	bl	26472 <lv_obj_del>
        return NULL;
   1f09a:	e7e6      	b.n	1f06a <lv_label_create+0xe>
    ext->dot_end    = LV_LABEL_DOT_END_INV;
   1f09c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    ext->dot.tmp_ptr   = NULL;
   1f0a0:	e9c0 3300 	strd	r3, r3, [r0]
    ext->offset.x = 0;
   1f0a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1f0a8:	8a03      	ldrh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1f0aa:	4947      	ldr	r1, [pc, #284]	; (1f1c8 <lv_label_create+0x16c>)
    ext->long_mode  = LV_LABEL_LONG_EXPAND;
   1f0ac:	f423 73bf 	bic.w	r3, r3, #382	; 0x17e
   1f0b0:	f023 0301 	bic.w	r3, r3, #1
   1f0b4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   1f0b8:	8203      	strh	r3, [r0, #16]
    lv_obj_set_design_cb(new_label, lv_label_design);
   1f0ba:	4620      	mov	r0, r4
   1f0bc:	f007 f88d 	bl	261da <lv_obj_set_design_cb>
    lv_obj_set_signal_cb(new_label, lv_label_signal);
   1f0c0:	4942      	ldr	r1, [pc, #264]	; (1f1cc <lv_label_create+0x170>)
   1f0c2:	4620      	mov	r0, r4
   1f0c4:	f007 f881 	bl	261ca <lv_obj_set_signal_cb>
    if(copy == NULL) {
   1f0c8:	b9c7      	cbnz	r7, 1f0fc <lv_label_create+0xa0>
        lv_theme_apply(new_label, LV_THEME_LABEL);
   1f0ca:	2106      	movs	r1, #6
   1f0cc:	4620      	mov	r0, r4
   1f0ce:	f7ff f84b 	bl	1e168 <lv_theme_apply>
        lv_obj_set_click(new_label, false);
   1f0d2:	4639      	mov	r1, r7
   1f0d4:	4620      	mov	r0, r4
   1f0d6:	f007 f864 	bl	261a2 <lv_obj_set_click>
        lv_label_set_long_mode(new_label, LV_LABEL_LONG_EXPAND);
   1f0da:	4639      	mov	r1, r7
   1f0dc:	4620      	mov	r0, r4
   1f0de:	f00b fde9 	bl	2acb4 <lv_label_set_long_mode>
        lv_label_set_text(new_label, "Text");
   1f0e2:	493b      	ldr	r1, [pc, #236]	; (1f1d0 <lv_label_create+0x174>)
   1f0e4:	4620      	mov	r0, r4
   1f0e6:	f00b fd8e 	bl	2ac06 <lv_label_set_text>
    LV_LOG_INFO("label created");
   1f0ea:	4b3a      	ldr	r3, [pc, #232]	; (1f1d4 <lv_label_create+0x178>)
   1f0ec:	9300      	str	r3, [sp, #0]
   1f0ee:	493a      	ldr	r1, [pc, #232]	; (1f1d8 <lv_label_create+0x17c>)
   1f0f0:	4b3a      	ldr	r3, [pc, #232]	; (1f1dc <lv_label_create+0x180>)
   1f0f2:	22a7      	movs	r2, #167	; 0xa7
   1f0f4:	2001      	movs	r0, #1
   1f0f6:	f7fe fa03 	bl	1d500 <_lv_log_add>
    return new_label;
   1f0fa:	e7b7      	b.n	1f06c <lv_label_create+0x10>
        lv_label_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
   1f0fc:	4638      	mov	r0, r7
   1f0fe:	f007 fba7 	bl	26850 <lv_obj_get_ext_attr>
   1f102:	4606      	mov	r6, r0
        lv_label_set_long_mode(new_label, lv_label_get_long_mode(copy));
   1f104:	4638      	mov	r0, r7
   1f106:	f00b fc60 	bl	2a9ca <lv_label_get_long_mode>
   1f10a:	4601      	mov	r1, r0
   1f10c:	4620      	mov	r0, r4
   1f10e:	f00b fdd1 	bl	2acb4 <lv_label_set_long_mode>
        lv_label_set_recolor(new_label, lv_label_get_recolor(copy));
   1f112:	4638      	mov	r0, r7
   1f114:	f00b fd70 	bl	2abf8 <lv_label_get_recolor>
   1f118:	4601      	mov	r1, r0
   1f11a:	4620      	mov	r0, r4
   1f11c:	f00b fdf0 	bl	2ad00 <lv_label_set_recolor>
        lv_label_set_align(new_label, lv_label_get_align(copy));
   1f120:	4638      	mov	r0, r7
   1f122:	f00b fc59 	bl	2a9d8 <lv_label_get_align>
   1f126:	4601      	mov	r1, r0
   1f128:	4620      	mov	r0, r4
   1f12a:	f00b fc36 	bl	2a99a <lv_label_set_align>
        if(copy_ext->static_txt == 0)
   1f12e:	7c33      	ldrb	r3, [r6, #16]
   1f130:	071a      	lsls	r2, r3, #28
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1f132:	4638      	mov	r0, r7
        if(copy_ext->static_txt == 0)
   1f134:	d439      	bmi.n	1f1aa <lv_label_create+0x14e>
            lv_label_set_text(new_label, lv_label_get_text(copy));
   1f136:	f00b fc43 	bl	2a9c0 <lv_label_get_text>
   1f13a:	4601      	mov	r1, r0
   1f13c:	4620      	mov	r0, r4
   1f13e:	f00b fd62 	bl	2ac06 <lv_label_set_text>
        if(copy_ext->long_mode == LV_LABEL_LONG_DOT) {
   1f142:	7c33      	ldrb	r3, [r6, #16]
   1f144:	f003 0307 	and.w	r3, r3, #7
   1f148:	2b02      	cmp	r3, #2
   1f14a:	d115      	bne.n	1f178 <lv_label_create+0x11c>
            ext->text = lv_mem_realloc(ext->text, _lv_mem_get_size(copy_ext->text));
   1f14c:	6830      	ldr	r0, [r6, #0]
   1f14e:	682f      	ldr	r7, [r5, #0]
   1f150:	f7fe fa36 	bl	1d5c0 <_lv_mem_get_size>
   1f154:	4601      	mov	r1, r0
   1f156:	4638      	mov	r0, r7
   1f158:	f7fe fa40 	bl	1d5dc <lv_mem_realloc>
   1f15c:	4607      	mov	r7, r0
   1f15e:	6028      	str	r0, [r5, #0]
            if(ext->text == NULL) return NULL;
   1f160:	2800      	cmp	r0, #0
   1f162:	d082      	beq.n	1f06a <lv_label_create+0xe>
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
   1f164:	f8d6 8000 	ldr.w	r8, [r6]
   1f168:	4640      	mov	r0, r8
   1f16a:	f7fe fa29 	bl	1d5c0 <_lv_mem_get_size>
   1f16e:	4641      	mov	r1, r8
   1f170:	4602      	mov	r2, r0
   1f172:	4638      	mov	r0, r7
   1f174:	f00b fbe3 	bl	2a93e <_lv_memcpy>
        if(copy_ext->dot_tmp_alloc && copy_ext->dot.tmp_ptr) {
   1f178:	7c73      	ldrb	r3, [r6, #17]
   1f17a:	07db      	lsls	r3, r3, #31
   1f17c:	d51c      	bpl.n	1f1b8 <lv_label_create+0x15c>
   1f17e:	6870      	ldr	r0, [r6, #4]
   1f180:	b1d0      	cbz	r0, 1f1b8 <lv_label_create+0x15c>
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
   1f182:	f7e1 f983 	bl	48c <strlen>
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1f186:	6869      	ldr	r1, [r5, #4]
            uint32_t len = (uint32_t)strlen(copy_ext->dot.tmp_ptr);
   1f188:	4602      	mov	r2, r0
            lv_label_set_dot_tmp(new_label, ext->dot.tmp_ptr, len);
   1f18a:	4620      	mov	r0, r4
   1f18c:	f7ff fcf4 	bl	1eb78 <lv_label_set_dot_tmp>
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
   1f190:	7c72      	ldrb	r2, [r6, #17]
   1f192:	7c6b      	ldrb	r3, [r5, #17]
   1f194:	f362 0300 	bfi	r3, r2, #0, #1
   1f198:	746b      	strb	r3, [r5, #17]
        ext->dot_end       = copy_ext->dot_end;
   1f19a:	68b3      	ldr	r3, [r6, #8]
   1f19c:	60ab      	str	r3, [r5, #8]
        lv_obj_refresh_style(new_label, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   1f19e:	22ff      	movs	r2, #255	; 0xff
   1f1a0:	4611      	mov	r1, r2
   1f1a2:	4620      	mov	r0, r4
   1f1a4:	f7fb fcca 	bl	1ab3c <lv_obj_refresh_style>
   1f1a8:	e79f      	b.n	1f0ea <lv_label_create+0x8e>
            lv_label_set_text_static(new_label, lv_label_get_text(copy));
   1f1aa:	f00b fc09 	bl	2a9c0 <lv_label_get_text>
   1f1ae:	4601      	mov	r1, r0
   1f1b0:	4620      	mov	r0, r4
   1f1b2:	f00b fd65 	bl	2ac80 <lv_label_set_text_static>
   1f1b6:	e7c4      	b.n	1f142 <lv_label_create+0xe6>
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
   1f1b8:	2204      	movs	r2, #4
   1f1ba:	18b1      	adds	r1, r6, r2
   1f1bc:	18a8      	adds	r0, r5, r2
   1f1be:	f00b fbbe 	bl	2a93e <_lv_memcpy>
   1f1c2:	e7e5      	b.n	1f190 <lv_label_create+0x134>
   1f1c4:	20004040 	.word	0x20004040
   1f1c8:	0002a9ed 	.word	0x0002a9ed
   1f1cc:	0001f1e1 	.word	0x0001f1e1
   1f1d0:	0003920f 	.word	0x0003920f
   1f1d4:	00039214 	.word	0x00039214
   1f1d8:	000391aa 	.word	0x000391aa
   1f1dc:	0003922b 	.word	0x0003922b

0001f1e0 <lv_label_signal>:
    if(sign == LV_SIGNAL_GET_STYLE) {
   1f1e0:	2908      	cmp	r1, #8
{
   1f1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f1e6:	4604      	mov	r4, r0
   1f1e8:	460e      	mov	r6, r1
   1f1ea:	4615      	mov	r5, r2
    if(sign == LV_SIGNAL_GET_STYLE) {
   1f1ec:	d114      	bne.n	1f218 <lv_label_signal+0x38>
    switch(type) {
   1f1ee:	7813      	ldrb	r3, [r2, #0]
   1f1f0:	b14b      	cbz	r3, 1f206 <lv_label_signal+0x26>
        info->result = lv_label_get_style(label, info->part);
   1f1f2:	2300      	movs	r3, #0
   1f1f4:	6053      	str	r3, [r2, #4]
        else return ancestor_signal(label, sign, param);
   1f1f6:	4b28      	ldr	r3, [pc, #160]	; (1f298 <lv_label_signal+0xb8>)
   1f1f8:	462a      	mov	r2, r5
   1f1fa:	4620      	mov	r0, r4
   1f1fc:	681b      	ldr	r3, [r3, #0]
}
   1f1fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        else return ancestor_signal(label, sign, param);
   1f202:	2108      	movs	r1, #8
   1f204:	4718      	bx	r3
            style_dsc_p = &label->style_list;
   1f206:	f100 0328 	add.w	r3, r0, #40	; 0x28
        info->result = lv_label_get_style(label, info->part);
   1f20a:	6053      	str	r3, [r2, #4]
        if(info->result != NULL) return LV_RES_OK;
   1f20c:	2b00      	cmp	r3, #0
   1f20e:	d0f2      	beq.n	1f1f6 <lv_label_signal+0x16>
   1f210:	2701      	movs	r7, #1
}
   1f212:	4638      	mov	r0, r7
   1f214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    res = ancestor_signal(label, sign, param);
   1f218:	4b1f      	ldr	r3, [pc, #124]	; (1f298 <lv_label_signal+0xb8>)
   1f21a:	681b      	ldr	r3, [r3, #0]
   1f21c:	4798      	blx	r3
    if(res != LV_RES_OK) return res;
   1f21e:	2801      	cmp	r0, #1
    res = ancestor_signal(label, sign, param);
   1f220:	4607      	mov	r7, r0
    if(res != LV_RES_OK) return res;
   1f222:	d1f6      	bne.n	1f212 <lv_label_signal+0x32>
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1f224:	2e07      	cmp	r6, #7
   1f226:	d105      	bne.n	1f234 <lv_label_signal+0x54>
   1f228:	4628      	mov	r0, r5
   1f22a:	491c      	ldr	r1, [pc, #112]	; (1f29c <lv_label_signal+0xbc>)
}
   1f22c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if(sign == LV_SIGNAL_GET_TYPE) return lv_obj_handle_get_type_signal(param, LV_OBJX_NAME);
   1f230:	f007 bb10 	b.w	26854 <lv_obj_handle_get_type_signal>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   1f234:	4620      	mov	r0, r4
   1f236:	f007 fb0b 	bl	26850 <lv_obj_get_ext_attr>
   1f23a:	4680      	mov	r8, r0
    if(sign == LV_SIGNAL_CLEANUP) {
   1f23c:	b966      	cbnz	r6, 1f258 <lv_label_signal+0x78>
        if(ext->static_txt == 0) {
   1f23e:	7c03      	ldrb	r3, [r0, #16]
   1f240:	f013 0508 	ands.w	r5, r3, #8
   1f244:	d104      	bne.n	1f250 <lv_label_signal+0x70>
            lv_mem_free(ext->text);
   1f246:	6800      	ldr	r0, [r0, #0]
   1f248:	f7fe f9aa 	bl	1d5a0 <lv_mem_free>
            ext->text = NULL;
   1f24c:	f8c8 5000 	str.w	r5, [r8]
        lv_label_dot_tmp_free(label);
   1f250:	4620      	mov	r0, r4
   1f252:	f00b fb62 	bl	2a91a <lv_label_dot_tmp_free>
   1f256:	e7dc      	b.n	1f212 <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_STYLE_CHG) {
   1f258:	2e04      	cmp	r6, #4
   1f25a:	d106      	bne.n	1f26a <lv_label_signal+0x8a>
        lv_label_revert_dots(label);
   1f25c:	4620      	mov	r0, r4
   1f25e:	f7ff fc51 	bl	1eb04 <lv_label_revert_dots>
        lv_label_refr_text(label);
   1f262:	4620      	mov	r0, r4
   1f264:	f7ff fddc 	bl	1ee20 <lv_label_refr_text>
   1f268:	e7d3      	b.n	1f212 <lv_label_signal+0x32>
    else if(sign == LV_SIGNAL_COORD_CHG) {
   1f26a:	2e02      	cmp	r6, #2
   1f26c:	d1d0      	bne.n	1f210 <lv_label_signal+0x30>
   1f26e:	8a23      	ldrh	r3, [r4, #16]
   1f270:	8aa2      	ldrh	r2, [r4, #20]
   1f272:	8829      	ldrh	r1, [r5, #0]
   1f274:	1ad2      	subs	r2, r2, r3
   1f276:	88ab      	ldrh	r3, [r5, #4]
   1f278:	1a5b      	subs	r3, r3, r1
        if(lv_area_get_width(&label->coords) != lv_area_get_width(param) ||
   1f27a:	b212      	sxth	r2, r2
   1f27c:	b21b      	sxth	r3, r3
   1f27e:	429a      	cmp	r2, r3
   1f280:	d1ec      	bne.n	1f25c <lv_label_signal+0x7c>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   1f282:	8a63      	ldrh	r3, [r4, #18]
   1f284:	8ae2      	ldrh	r2, [r4, #22]
   1f286:	8869      	ldrh	r1, [r5, #2]
   1f288:	1ad2      	subs	r2, r2, r3
   1f28a:	88eb      	ldrh	r3, [r5, #6]
   1f28c:	1a5b      	subs	r3, r3, r1
   1f28e:	b212      	sxth	r2, r2
   1f290:	b21b      	sxth	r3, r3
   1f292:	429a      	cmp	r2, r3
   1f294:	d1e2      	bne.n	1f25c <lv_label_signal+0x7c>
   1f296:	e7bb      	b.n	1f210 <lv_label_signal+0x30>
   1f298:	20004040 	.word	0x20004040
   1f29c:	00039222 	.word	0x00039222

0001f2a0 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1f2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2a2:	4b10      	ldr	r3, [pc, #64]	; (1f2e4 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1f2a4:	4f10      	ldr	r7, [pc, #64]	; (1f2e8 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2a6:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1f2aa:	3001      	adds	r0, #1
   1f2ac:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f2b0:	42ae      	cmp	r6, r5
   1f2b2:	d800      	bhi.n	1f2b6 <z_sys_init_run_level+0x16>
		}
	}
}
   1f2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1f2b6:	e9d5 3400 	ldrd	r3, r4, [r5]
   1f2ba:	4620      	mov	r0, r4
   1f2bc:	4798      	blx	r3
   1f2be:	b170      	cbz	r0, 1f2de <z_sys_init_run_level+0x3e>
   1f2c0:	b16c      	cbz	r4, 1f2de <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1f2c2:	1be4      	subs	r4, r4, r7
   1f2c4:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f2c6:	0961      	lsrs	r1, r4, #5
   1f2c8:	4a08      	ldr	r2, [pc, #32]	; (1f2ec <z_sys_init_run_level+0x4c>)
   1f2ca:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f2ce:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1f2d2:	2301      	movs	r3, #1
   1f2d4:	fa03 f404 	lsl.w	r4, r3, r4
   1f2d8:	4304      	orrs	r4, r0
   1f2da:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f2de:	3508      	adds	r5, #8
   1f2e0:	e7e6      	b.n	1f2b0 <z_sys_init_run_level+0x10>
   1f2e2:	bf00      	nop
   1f2e4:	0002d950 	.word	0x0002d950
   1f2e8:	20000a8c 	.word	0x20000a8c
   1f2ec:	20000afc 	.word	0x20000afc

0001f2f0 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1f2f0:	4b08      	ldr	r3, [pc, #32]	; (1f314 <z_device_ready+0x24>)
   1f2f2:	1ac0      	subs	r0, r0, r3
   1f2f4:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f2f6:	4b08      	ldr	r3, [pc, #32]	; (1f318 <z_device_ready+0x28>)
   1f2f8:	0942      	lsrs	r2, r0, #5
   1f2fa:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f2fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1f302:	2301      	movs	r3, #1
   1f304:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1f308:	4210      	tst	r0, r2
}
   1f30a:	bf0c      	ite	eq
   1f30c:	4618      	moveq	r0, r3
   1f30e:	2000      	movne	r0, #0
   1f310:	4770      	bx	lr
   1f312:	bf00      	nop
   1f314:	20000a8c 	.word	0x20000a8c
   1f318:	20000afc 	.word	0x20000afc

0001f31c <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   1f31c:	4911      	ldr	r1, [pc, #68]	; (1f364 <z_impl_device_get_binding+0x48>)
{
   1f31e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1f320:	4c11      	ldr	r4, [pc, #68]	; (1f368 <z_impl_device_get_binding+0x4c>)
{
   1f322:	4605      	mov	r5, r0
   1f324:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1f326:	428c      	cmp	r4, r1
   1f328:	d104      	bne.n	1f334 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f32a:	4c0f      	ldr	r4, [pc, #60]	; (1f368 <z_impl_device_get_binding+0x4c>)
   1f32c:	42b4      	cmp	r4, r6
   1f32e:	d10a      	bne.n	1f346 <z_impl_device_get_binding+0x2a>
	return NULL;
   1f330:	2400      	movs	r4, #0
   1f332:	e014      	b.n	1f35e <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f334:	4620      	mov	r0, r4
   1f336:	f7ff ffdb 	bl	1f2f0 <z_device_ready>
   1f33a:	b110      	cbz	r0, 1f342 <z_impl_device_get_binding+0x26>
   1f33c:	6823      	ldr	r3, [r4, #0]
   1f33e:	42ab      	cmp	r3, r5
   1f340:	d00d      	beq.n	1f35e <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f342:	3410      	adds	r4, #16
   1f344:	e7ef      	b.n	1f326 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f346:	4620      	mov	r0, r4
   1f348:	f7ff ffd2 	bl	1f2f0 <z_device_ready>
   1f34c:	b908      	cbnz	r0, 1f352 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f34e:	3410      	adds	r4, #16
   1f350:	e7ec      	b.n	1f32c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f352:	6821      	ldr	r1, [r4, #0]
   1f354:	4628      	mov	r0, r5
   1f356:	f7e1 f88f 	bl	478 <strcmp>
   1f35a:	2800      	cmp	r0, #0
   1f35c:	d1f7      	bne.n	1f34e <z_impl_device_get_binding+0x32>
}
   1f35e:	4620      	mov	r0, r4
   1f360:	bd70      	pop	{r4, r5, r6, pc}
   1f362:	bf00      	nop
   1f364:	20000afc 	.word	0x20000afc
   1f368:	20000a8c 	.word	0x20000a8c

0001f36c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f36c:	b510      	push	{r4, lr}
   1f36e:	4604      	mov	r4, r0
	z_impl_log_panic();
   1f370:	f7e3 fd86 	bl	2e80 <z_impl_log_panic>
   1f374:	4b06      	ldr	r3, [pc, #24]	; (1f390 <k_sys_fatal_error_handler+0x24>)
   1f376:	4907      	ldr	r1, [pc, #28]	; (1f394 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f378:	4807      	ldr	r0, [pc, #28]	; (1f398 <k_sys_fatal_error_handler+0x2c>)
   1f37a:	1ac9      	subs	r1, r1, r3
   1f37c:	08c9      	lsrs	r1, r1, #3
   1f37e:	0189      	lsls	r1, r1, #6
   1f380:	f041 0101 	orr.w	r1, r1, #1
   1f384:	f004 f928 	bl	235d8 <log_0>
	arch_system_halt(reason);
   1f388:	4620      	mov	r0, r4
   1f38a:	f00b fccc 	bl	2ad26 <arch_system_halt>
   1f38e:	bf00      	nop
   1f390:	0002bf50 	.word	0x0002bf50
   1f394:	0002c080 	.word	0x0002c080
   1f398:	00039250 	.word	0x00039250

0001f39c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f39c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f3a0:	4606      	mov	r6, r0
   1f3a2:	460f      	mov	r7, r1
	__asm__ volatile(
   1f3a4:	f04f 0320 	mov.w	r3, #32
   1f3a8:	f3ef 8811 	mrs	r8, BASEPRI
   1f3ac:	f383 8811 	msr	BASEPRI, r3
   1f3b0:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f3b4:	f000 fe60 	bl	20078 <z_impl_k_current_get>
   1f3b8:	4c1f      	ldr	r4, [pc, #124]	; (1f438 <z_fatal_error+0x9c>)
   1f3ba:	4b20      	ldr	r3, [pc, #128]	; (1f43c <z_fatal_error+0xa0>)
   1f3bc:	1ae4      	subs	r4, r4, r3
   1f3be:	2e04      	cmp	r6, #4
   1f3c0:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f3c4:	bf96      	itet	ls
   1f3c6:	4a1e      	ldrls	r2, [pc, #120]	; (1f440 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f3c8:	4a1e      	ldrhi	r2, [pc, #120]	; (1f444 <z_fatal_error+0xa8>)
   1f3ca:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1f3ce:	01a4      	lsls	r4, r4, #6
   1f3d0:	f044 0301 	orr.w	r3, r4, #1
   1f3d4:	4605      	mov	r5, r0
   1f3d6:	f8ad 3000 	strh.w	r3, [sp]
   1f3da:	481b      	ldr	r0, [pc, #108]	; (1f448 <z_fatal_error+0xac>)
   1f3dc:	2300      	movs	r3, #0
   1f3de:	4631      	mov	r1, r6
   1f3e0:	f004 f934 	bl	2364c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f3e4:	b147      	cbz	r7, 1f3f8 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f3e6:	69fb      	ldr	r3, [r7, #28]
   1f3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f3ec:	b123      	cbz	r3, 1f3f8 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f3ee:	4817      	ldr	r0, [pc, #92]	; (1f44c <z_fatal_error+0xb0>)
   1f3f0:	f044 0101 	orr.w	r1, r4, #1
   1f3f4:	f004 f8f0 	bl	235d8 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f3f8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1f3fc:	b12d      	cbz	r5, 1f40a <z_fatal_error+0x6e>
   1f3fe:	4628      	mov	r0, r5
   1f400:	f00b ff07 	bl	2b212 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f404:	b108      	cbz	r0, 1f40a <z_fatal_error+0x6e>
   1f406:	7803      	ldrb	r3, [r0, #0]
   1f408:	b903      	cbnz	r3, 1f40c <z_fatal_error+0x70>
		thread_name = "unknown";
   1f40a:	4811      	ldr	r0, [pc, #68]	; (1f450 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1f40c:	f7e3 fbb4 	bl	2b78 <log_strdup>
   1f410:	4623      	mov	r3, r4
   1f412:	4602      	mov	r2, r0
   1f414:	4629      	mov	r1, r5
   1f416:	480f      	ldr	r0, [pc, #60]	; (1f454 <z_fatal_error+0xb8>)
   1f418:	f004 f8ff 	bl	2361a <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f41c:	4639      	mov	r1, r7
   1f41e:	4630      	mov	r0, r6
   1f420:	f7ff ffa4 	bl	1f36c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f424:	f388 8811 	msr	BASEPRI, r8
   1f428:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f42c:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f42e:	b002      	add	sp, #8
   1f430:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f434:	f7e5 bb56 	b.w	4ae4 <z_impl_k_thread_abort>
   1f438:	0002c080 	.word	0x0002c080
   1f43c:	0002bf50 	.word	0x0002bf50
   1f440:	0002d968 	.word	0x0002d968
   1f444:	0003925f 	.word	0x0003925f
   1f448:	00039275 	.word	0x00039275
   1f44c:	0003929d 	.word	0x0003929d
   1f450:	0003926d 	.word	0x0003926d
   1f454:	000392be 	.word	0x000392be

0001f458 <z_pm_save_idle_exit>:
}
#endif /* !SMP_FALLBACK */


void z_pm_save_idle_exit(int32_t ticks)
{
   1f458:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   1f45a:	4b04      	ldr	r3, [pc, #16]	; (1f46c <z_pm_save_idle_exit+0x14>)
   1f45c:	781b      	ldrb	r3, [r3, #0]
   1f45e:	b10b      	cbz	r3, 1f464 <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   1f460:	f7e4 f9c8 	bl	37f4 <pm_system_resume>
	}
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}
   1f464:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   1f468:	f004 bd76 	b.w	23f58 <z_clock_idle_exit>
   1f46c:	20008734 	.word	0x20008734

0001f470 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1f470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1f474:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1f4e8 <idle+0x78>
	pm_idle_exit_notify = 1U;
   1f478:	4e1a      	ldr	r6, [pc, #104]	; (1f4e4 <idle+0x74>)
{
   1f47a:	4605      	mov	r5, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f47c:	2701      	movs	r7, #1
	__asm__ volatile(
   1f47e:	f04f 0220 	mov.w	r2, #32
   1f482:	f3ef 8311 	mrs	r3, BASEPRI
   1f486:	f382 8811 	msr	BASEPRI, r2
   1f48a:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1f48e:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1f490:	b190      	cbz	r0, 1f4b8 <idle+0x48>
			cpu->pending_abort = NULL;
   1f492:	2200      	movs	r2, #0
   1f494:	612a      	str	r2, [r5, #16]
	__asm__ volatile(
   1f496:	f383 8811 	msr	BASEPRI, r3
   1f49a:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1f49e:	f000 fc1b 	bl	1fcd8 <z_thread_single_abort>
	__asm__ volatile(
   1f4a2:	f04f 0320 	mov.w	r3, #32
   1f4a6:	f3ef 8011 	mrs	r0, BASEPRI
   1f4aa:	f383 8811 	msr	BASEPRI, r3
   1f4ae:	f3bf 8f6f 	isb	sy
   1f4b2:	f00b fdbf 	bl	2b034 <z_reschedule_irqlock>
			continue;
   1f4b6:	e7e2      	b.n	1f47e <idle+0xe>
		int32_t ticks = z_get_next_timeout_expiry();
   1f4b8:	f00b ff3c 	bl	2b334 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f4bc:	2101      	movs	r1, #1
   1f4be:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1f4c0:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f4c2:	bfd8      	it	le
   1f4c4:	4608      	movle	r0, r1
   1f4c6:	f00b ff45 	bl	2b354 <z_set_timeout_expiry>
	idle_state = pm_system_suspend(ticks);
   1f4ca:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   1f4cc:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   1f4d0:	7037      	strb	r7, [r6, #0]
	idle_state = pm_system_suspend(ticks);
   1f4d2:	f7e4 f953 	bl	377c <pm_system_suspend>
	if (idle_state == PM_STATE_ACTIVE) {
   1f4d6:	2800      	cmp	r0, #0
   1f4d8:	d1d1      	bne.n	1f47e <idle+0xe>
		pm_idle_exit_notify = 0U;
   1f4da:	7030      	strb	r0, [r6, #0]
	arch_cpu_idle();
   1f4dc:	f7e5 f822 	bl	4524 <arch_cpu_idle>
}
   1f4e0:	e7cd      	b.n	1f47e <idle+0xe>
   1f4e2:	bf00      	nop
   1f4e4:	20008734 	.word	0x20008734
   1f4e8:	20004044 	.word	0x20004044

0001f4ec <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f4ec:	4802      	ldr	r0, [pc, #8]	; (1f4f8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   1f4ee:	4a03      	ldr	r2, [pc, #12]	; (1f4fc <z_bss_zero+0x10>)
   1f4f0:	2100      	movs	r1, #0
   1f4f2:	1a12      	subs	r2, r2, r0
   1f4f4:	f00c b952 	b.w	2b79c <memset>
   1f4f8:	20000d58 	.word	0x20000d58
   1f4fc:	20008750 	.word	0x20008750

0001f500 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f500:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f502:	4b0a      	ldr	r3, [pc, #40]	; (1f52c <bg_thread_main+0x2c>)
   1f504:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f506:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f508:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f50a:	f7ff fec9 	bl	1f2a0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f50e:	f00b fefa 	bl	2b306 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f512:	2003      	movs	r0, #3
   1f514:	f7ff fec4 	bl	1f2a0 <z_sys_init_run_level>

	z_init_static_threads();
   1f518:	f000 fe78 	bl	2020c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f51c:	f003 fb81 	bl	22c22 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f520:	4a03      	ldr	r2, [pc, #12]	; (1f530 <bg_thread_main+0x30>)
   1f522:	7b13      	ldrb	r3, [r2, #12]
   1f524:	f023 0301 	bic.w	r3, r3, #1
   1f528:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f52a:	bd08      	pop	{r3, pc}
   1f52c:	20008735 	.word	0x20008735
   1f530:	200013b0 	.word	0x200013b0

0001f534 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f534:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f538:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f53a:	f7e3 fa75 	bl	2a28 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f53e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1f634 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f542:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f546:	4d33      	ldr	r5, [pc, #204]	; (1f614 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1f548:	4e33      	ldr	r6, [pc, #204]	; (1f618 <z_cstart+0xe4>)
   1f54a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f54c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1f638 <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1f550:	4f32      	ldr	r7, [pc, #200]	; (1f61c <z_cstart+0xe8>)
   1f552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f556:	2400      	movs	r4, #0
   1f558:	616b      	str	r3, [r5, #20]
   1f55a:	23e0      	movs	r3, #224	; 0xe0
   1f55c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f560:	77ec      	strb	r4, [r5, #31]
   1f562:	762c      	strb	r4, [r5, #24]
   1f564:	766c      	strb	r4, [r5, #25]
   1f566:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f568:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f56a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f56e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f570:	f7e5 fa96 	bl	4aa0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f574:	f7e4 ffd0 	bl	4518 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f578:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f57c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f57e:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f580:	4d27      	ldr	r5, [pc, #156]	; (1f620 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f582:	f240 1301 	movw	r3, #257	; 0x101
   1f586:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f58a:	ab06      	add	r3, sp, #24
   1f58c:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f58e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f590:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1f594:	f7ff fe84 	bl	1f2a0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f598:	2001      	movs	r0, #1
   1f59a:	f7ff fe81 	bl	1f2a0 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f59e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1f5a2:	f000 fced 	bl	1ff80 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f5a6:	4b1f      	ldr	r3, [pc, #124]	; (1f624 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1f5a8:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f5aa:	491f      	ldr	r1, [pc, #124]	; (1f628 <z_cstart+0xf4>)
   1f5ac:	9305      	str	r3, [sp, #20]
   1f5ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f5b2:	4653      	mov	r3, sl
   1f5b4:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1f5b8:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f5bc:	9400      	str	r4, [sp, #0]
   1f5be:	4630      	mov	r0, r6
   1f5c0:	f000 fdc8 	bl	20154 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f5c4:	7b73      	ldrb	r3, [r6, #13]
   1f5c6:	4680      	mov	r8, r0
   1f5c8:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1f5cc:	4630      	mov	r0, r6
   1f5ce:	7373      	strb	r3, [r6, #13]
   1f5d0:	f00b fd72 	bl	2b0b8 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1f5d4:	230f      	movs	r3, #15
   1f5d6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1f5da:	4914      	ldr	r1, [pc, #80]	; (1f62c <z_cstart+0xf8>)
   1f5dc:	4b14      	ldr	r3, [pc, #80]	; (1f630 <z_cstart+0xfc>)
   1f5de:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f5e2:	e9cd b404 	strd	fp, r4, [sp, #16]
   1f5e6:	e9cd 5400 	strd	r5, r4, [sp]
   1f5ea:	4638      	mov	r0, r7
   1f5ec:	f000 fdb2 	bl	20154 <z_setup_new_thread>
   1f5f0:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f5f2:	60ef      	str	r7, [r5, #12]
   1f5f4:	f023 0304 	bic.w	r3, r3, #4
   1f5f8:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f5fa:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1f5fe:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1f602:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1f604:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f608:	4652      	mov	r2, sl
   1f60a:	4641      	mov	r1, r8
   1f60c:	4630      	mov	r0, r6
   1f60e:	f7e4 ff6b 	bl	44e8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f612:	bf00      	nop
   1f614:	e000ed00 	.word	0xe000ed00
   1f618:	200013b0 	.word	0x200013b0
   1f61c:	20001328 	.word	0x20001328
   1f620:	20004044 	.word	0x20004044
   1f624:	00039320 	.word	0x00039320
   1f628:	20009858 	.word	0x20009858
   1f62c:	2000a058 	.word	0x2000a058
   1f630:	0001f471 	.word	0x0001f471
   1f634:	2000a998 	.word	0x2000a998
   1f638:	0001f501 	.word	0x0001f501

0001f63c <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1f63c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f63e:	4c06      	ldr	r4, [pc, #24]	; (1f658 <statics_init+0x1c>)
   1f640:	4d06      	ldr	r5, [pc, #24]	; (1f65c <statics_init+0x20>)
   1f642:	42ac      	cmp	r4, r5
   1f644:	d301      	bcc.n	1f64a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1f646:	2000      	movs	r0, #0
   1f648:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f64a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f64e:	4620      	mov	r0, r4
   1f650:	f00b fb72 	bl	2ad38 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f654:	3414      	adds	r4, #20
   1f656:	e7f4      	b.n	1f642 <statics_init+0x6>
   1f658:	20000b8c 	.word	0x20000b8c
   1f65c:	20000ba0 	.word	0x20000ba0

0001f660 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f660:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f662:	4b0e      	ldr	r3, [pc, #56]	; (1f69c <init_mem_slab_module+0x3c>)
   1f664:	4c0e      	ldr	r4, [pc, #56]	; (1f6a0 <init_mem_slab_module+0x40>)
   1f666:	42a3      	cmp	r3, r4
   1f668:	d301      	bcc.n	1f66e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1f66a:	2000      	movs	r0, #0
	return rc;
}
   1f66c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f66e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1f672:	ea41 0200 	orr.w	r2, r1, r0
   1f676:	f012 0203 	ands.w	r2, r2, #3
   1f67a:	d10b      	bne.n	1f694 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1f67c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f67e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f680:	42aa      	cmp	r2, r5
   1f682:	d101      	bne.n	1f688 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f684:	331c      	adds	r3, #28
   1f686:	e7ee      	b.n	1f666 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1f688:	695e      	ldr	r6, [r3, #20]
   1f68a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f68c:	3201      	adds	r2, #1
		slab->free_list = p;
   1f68e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1f690:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1f692:	e7f5      	b.n	1f680 <init_mem_slab_module+0x20>
		return -EINVAL;
   1f694:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1f698:	e7e8      	b.n	1f66c <init_mem_slab_module+0xc>
   1f69a:	bf00      	nop
   1f69c:	20000b38 	.word	0x20000b38
   1f6a0:	20000b8c 	.word	0x20000b8c

0001f6a4 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f6a4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1f6a6:	460c      	mov	r4, r1
   1f6a8:	4616      	mov	r6, r2
   1f6aa:	461f      	mov	r7, r3
   1f6ac:	f04f 0320 	mov.w	r3, #32
   1f6b0:	f3ef 8111 	mrs	r1, BASEPRI
   1f6b4:	f383 8811 	msr	BASEPRI, r3
   1f6b8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f6bc:	6943      	ldr	r3, [r0, #20]
   1f6be:	b15b      	cbz	r3, 1f6d8 <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1f6c0:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f6c2:	681b      	ldr	r3, [r3, #0]
   1f6c4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f6c6:	6983      	ldr	r3, [r0, #24]
   1f6c8:	3301      	adds	r3, #1
   1f6ca:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f6cc:	2000      	movs	r0, #0
	__asm__ volatile(
   1f6ce:	f381 8811 	msr	BASEPRI, r1
   1f6d2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f6d6:	e011      	b.n	1f6fc <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f6d8:	ea56 0207 	orrs.w	r2, r6, r7
   1f6dc:	d103      	bne.n	1f6e6 <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1f6de:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1f6e0:	f06f 000b 	mvn.w	r0, #11
   1f6e4:	e7f3      	b.n	1f6ce <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f6e6:	4602      	mov	r2, r0
   1f6e8:	e9cd 6700 	strd	r6, r7, [sp]
   1f6ec:	4804      	ldr	r0, [pc, #16]	; (1f700 <k_mem_slab_alloc+0x5c>)
   1f6ee:	f000 fbb5 	bl	1fe5c <z_pend_curr>
		if (result == 0) {
   1f6f2:	b918      	cbnz	r0, 1f6fc <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1f6f4:	4b03      	ldr	r3, [pc, #12]	; (1f704 <k_mem_slab_alloc+0x60>)
   1f6f6:	689b      	ldr	r3, [r3, #8]
   1f6f8:	695b      	ldr	r3, [r3, #20]
   1f6fa:	6023      	str	r3, [r4, #0]
}
   1f6fc:	b002      	add	sp, #8
   1f6fe:	bdd0      	pop	{r4, r6, r7, pc}
   1f700:	20008736 	.word	0x20008736
   1f704:	20004044 	.word	0x20004044

0001f708 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f70a:	4604      	mov	r4, r0
   1f70c:	460d      	mov	r5, r1
	__asm__ volatile(
   1f70e:	f04f 0320 	mov.w	r3, #32
   1f712:	f3ef 8611 	mrs	r6, BASEPRI
   1f716:	f383 8811 	msr	BASEPRI, r3
   1f71a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1f71e:	6947      	ldr	r7, [r0, #20]
   1f720:	b977      	cbnz	r7, 1f740 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f722:	f00b fd24 	bl	2b16e <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f726:	b158      	cbz	r0, 1f740 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f728:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f72a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f72c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1f730:	f00b fcc2 	bl	2b0b8 <z_ready_thread>
			z_reschedule(&lock, key);
   1f734:	4631      	mov	r1, r6
   1f736:	4809      	ldr	r0, [pc, #36]	; (1f75c <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1f738:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1f73c:	f000 b946 	b.w	1f9cc <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f740:	682b      	ldr	r3, [r5, #0]
   1f742:	6962      	ldr	r2, [r4, #20]
   1f744:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1f746:	682b      	ldr	r3, [r5, #0]
   1f748:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1f74a:	69a3      	ldr	r3, [r4, #24]
   1f74c:	3b01      	subs	r3, #1
   1f74e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1f750:	f386 8811 	msr	BASEPRI, r6
   1f754:	f3bf 8f6f 	isb	sy
}
   1f758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f75a:	bf00      	nop
   1f75c:	20008736 	.word	0x20008736

0001f760 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1f760:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f764:	4604      	mov	r4, r0
   1f766:	4616      	mov	r6, r2
   1f768:	461f      	mov	r7, r3
	__asm__ volatile(
   1f76a:	f04f 0320 	mov.w	r3, #32
   1f76e:	f3ef 8811 	mrs	r8, BASEPRI
   1f772:	f383 8811 	msr	BASEPRI, r3
   1f776:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1f77a:	68c3      	ldr	r3, [r0, #12]
   1f77c:	4a32      	ldr	r2, [pc, #200]	; (1f848 <z_impl_k_mutex_lock+0xe8>)
   1f77e:	b16b      	cbz	r3, 1f79c <z_impl_k_mutex_lock+0x3c>
   1f780:	6880      	ldr	r0, [r0, #8]
   1f782:	6891      	ldr	r1, [r2, #8]
   1f784:	4288      	cmp	r0, r1
   1f786:	d019      	beq.n	1f7bc <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1f788:	ea56 0307 	orrs.w	r3, r6, r7
   1f78c:	d118      	bne.n	1f7c0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1f78e:	f388 8811 	msr	BASEPRI, r8
   1f792:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1f796:	f06f 000f 	mvn.w	r0, #15
   1f79a:	e00c      	b.n	1f7b6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1f79c:	6891      	ldr	r1, [r2, #8]
   1f79e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1f7a2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1f7a4:	3301      	adds	r3, #1
   1f7a6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1f7a8:	6893      	ldr	r3, [r2, #8]
   1f7aa:	60a3      	str	r3, [r4, #8]
   1f7ac:	f388 8811 	msr	BASEPRI, r8
   1f7b0:	f3bf 8f6f 	isb	sy
		return 0;
   1f7b4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1f7b6:	b002      	add	sp, #8
   1f7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1f7bc:	6921      	ldr	r1, [r4, #16]
   1f7be:	e7f0      	b.n	1f7a2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1f7c0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f7c4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1f7c8:	4299      	cmp	r1, r3
   1f7ca:	bfa8      	it	ge
   1f7cc:	4619      	movge	r1, r3
   1f7ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1f7d2:	428b      	cmp	r3, r1
   1f7d4:	dd2c      	ble.n	1f830 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1f7d6:	f000 fb8f 	bl	1fef8 <z_set_prio>
   1f7da:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1f7dc:	e9cd 6700 	strd	r6, r7, [sp]
   1f7e0:	481a      	ldr	r0, [pc, #104]	; (1f84c <z_impl_k_mutex_lock+0xec>)
   1f7e2:	4622      	mov	r2, r4
   1f7e4:	4641      	mov	r1, r8
   1f7e6:	f000 fb39 	bl	1fe5c <z_pend_curr>
	if (got_mutex == 0) {
   1f7ea:	2800      	cmp	r0, #0
   1f7ec:	d0e3      	beq.n	1f7b6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1f7ee:	f04f 0320 	mov.w	r3, #32
   1f7f2:	f3ef 8611 	mrs	r6, BASEPRI
   1f7f6:	f383 8811 	msr	BASEPRI, r3
   1f7fa:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1f7fe:	6823      	ldr	r3, [r4, #0]
   1f800:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f802:	42a3      	cmp	r3, r4
   1f804:	d007      	beq.n	1f816 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1f806:	b133      	cbz	r3, 1f816 <z_impl_k_mutex_lock+0xb6>
   1f808:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1f80c:	4299      	cmp	r1, r3
   1f80e:	bfa8      	it	ge
   1f810:	4619      	movge	r1, r3
   1f812:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f816:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f818:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f81c:	4299      	cmp	r1, r3
   1f81e:	d109      	bne.n	1f834 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1f820:	b16d      	cbz	r5, 1f83e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1f822:	480a      	ldr	r0, [pc, #40]	; (1f84c <z_impl_k_mutex_lock+0xec>)
   1f824:	4631      	mov	r1, r6
   1f826:	f000 f8d1 	bl	1f9cc <z_reschedule>
	return -EAGAIN;
   1f82a:	f06f 000a 	mvn.w	r0, #10
   1f82e:	e7c2      	b.n	1f7b6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1f830:	2500      	movs	r5, #0
   1f832:	e7d3      	b.n	1f7dc <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1f834:	f000 fb60 	bl	1fef8 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1f838:	2800      	cmp	r0, #0
   1f83a:	d1f2      	bne.n	1f822 <z_impl_k_mutex_lock+0xc2>
   1f83c:	e7f0      	b.n	1f820 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1f83e:	f386 8811 	msr	BASEPRI, r6
   1f842:	f3bf 8f6f 	isb	sy
   1f846:	e7f0      	b.n	1f82a <z_impl_k_mutex_lock+0xca>
   1f848:	20004044 	.word	0x20004044
   1f84c:	20008736 	.word	0x20008736

0001f850 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1f850:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1f852:	6883      	ldr	r3, [r0, #8]
{
   1f854:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1f856:	2b00      	cmp	r3, #0
   1f858:	d037      	beq.n	1f8ca <z_impl_k_mutex_unlock+0x7a>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1f85a:	4a1f      	ldr	r2, [pc, #124]	; (1f8d8 <z_impl_k_mutex_unlock+0x88>)
   1f85c:	6892      	ldr	r2, [r2, #8]
   1f85e:	4293      	cmp	r3, r2
   1f860:	d136      	bne.n	1f8d0 <z_impl_k_mutex_unlock+0x80>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1f862:	7bda      	ldrb	r2, [r3, #15]
   1f864:	3a01      	subs	r2, #1
   1f866:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1f868:	68c3      	ldr	r3, [r0, #12]
   1f86a:	2b01      	cmp	r3, #1
   1f86c:	d005      	beq.n	1f87a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1f86e:	3b01      	subs	r3, #1
   1f870:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1f872:	f000 f90f 	bl	1fa94 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1f876:	2000      	movs	r0, #0
}
   1f878:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1f87a:	f04f 0320 	mov.w	r3, #32
   1f87e:	f3ef 8511 	mrs	r5, BASEPRI
   1f882:	f383 8811 	msr	BASEPRI, r3
   1f886:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1f88a:	6901      	ldr	r1, [r0, #16]
   1f88c:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1f88e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1f892:	4299      	cmp	r1, r3
   1f894:	d001      	beq.n	1f89a <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1f896:	f000 fb2f 	bl	1fef8 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1f89a:	4620      	mov	r0, r4
   1f89c:	f00b fc67 	bl	2b16e <z_unpend_first_thread>
	mutex->owner = new_owner;
   1f8a0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1f8a2:	b160      	cbz	r0, 1f8be <z_impl_k_mutex_unlock+0x6e>
		mutex->owner_orig_prio = new_owner->base.prio;
   1f8a4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1f8a8:	6122      	str	r2, [r4, #16]
   1f8aa:	2200      	movs	r2, #0
   1f8ac:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1f8b0:	f00b fc02 	bl	2b0b8 <z_ready_thread>
		z_reschedule(&lock, key);
   1f8b4:	4809      	ldr	r0, [pc, #36]	; (1f8dc <z_impl_k_mutex_unlock+0x8c>)
   1f8b6:	4629      	mov	r1, r5
   1f8b8:	f000 f888 	bl	1f9cc <z_reschedule>
   1f8bc:	e7d9      	b.n	1f872 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1f8be:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1f8c0:	f385 8811 	msr	BASEPRI, r5
   1f8c4:	f3bf 8f6f 	isb	sy
   1f8c8:	e7d3      	b.n	1f872 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1f8ca:	f06f 0015 	mvn.w	r0, #21
   1f8ce:	e7d3      	b.n	1f878 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1f8d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f8d4:	e7d0      	b.n	1f878 <z_impl_k_mutex_unlock+0x28>
   1f8d6:	bf00      	nop
   1f8d8:	20004044 	.word	0x20004044
   1f8dc:	20008736 	.word	0x20008736

0001f8e0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1f8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f8e2:	4616      	mov	r6, r2
   1f8e4:	461f      	mov	r7, r3
	__asm__ volatile(
   1f8e6:	f04f 0320 	mov.w	r3, #32
   1f8ea:	f3ef 8511 	mrs	r5, BASEPRI
   1f8ee:	f383 8811 	msr	BASEPRI, r3
   1f8f2:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1f8f6:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1f8f8:	b19c      	cbz	r4, 1f922 <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f8fa:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f8fc:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1f8fe:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1f902:	4294      	cmp	r4, r2
	list->head = node;
   1f904:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1f906:	bf08      	it	eq
   1f908:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1f90a:	2101      	movs	r1, #1
   1f90c:	4620      	mov	r0, r4
   1f90e:	f00b faff 	bl	2af10 <z_queue_node_peek>
   1f912:	4604      	mov	r4, r0
	__asm__ volatile(
   1f914:	f385 8811 	msr	BASEPRI, r5
   1f918:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1f91c:	4620      	mov	r0, r4
   1f91e:	b003      	add	sp, #12
   1f920:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f922:	ea56 0307 	orrs.w	r3, r6, r7
   1f926:	d0f5      	beq.n	1f914 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1f928:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1f92c:	e9cd 6700 	strd	r6, r7, [sp]
   1f930:	4629      	mov	r1, r5
   1f932:	4610      	mov	r0, r2
   1f934:	f000 fa92 	bl	1fe5c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1f938:	2800      	cmp	r0, #0
   1f93a:	d1ef      	bne.n	1f91c <z_impl_k_queue_get+0x3c>
   1f93c:	4b01      	ldr	r3, [pc, #4]	; (1f944 <z_impl_k_queue_get+0x64>)
   1f93e:	689b      	ldr	r3, [r3, #8]
   1f940:	695c      	ldr	r4, [r3, #20]
   1f942:	e7eb      	b.n	1f91c <z_impl_k_queue_get+0x3c>
   1f944:	20004044 	.word	0x20004044

0001f948 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1f948:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1f94a:	4c08      	ldr	r4, [pc, #32]	; (1f96c <z_reset_time_slice+0x24>)
   1f94c:	6823      	ldr	r3, [r4, #0]
   1f94e:	b15b      	cbz	r3, 1f968 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f950:	f7e4 fb90 	bl	4074 <z_clock_elapsed>
   1f954:	4603      	mov	r3, r0
   1f956:	6820      	ldr	r0, [r4, #0]
   1f958:	4a05      	ldr	r2, [pc, #20]	; (1f970 <z_reset_time_slice+0x28>)
   1f95a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1f95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1f960:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1f962:	2100      	movs	r1, #0
   1f964:	f00b bcf6 	b.w	2b354 <z_set_timeout_expiry>
}
   1f968:	bd10      	pop	{r4, pc}
   1f96a:	bf00      	nop
   1f96c:	20004080 	.word	0x20004080
   1f970:	20004044 	.word	0x20004044

0001f974 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f976:	4605      	mov	r5, r0
   1f978:	460c      	mov	r4, r1
	__asm__ volatile(
   1f97a:	f04f 0320 	mov.w	r3, #32
   1f97e:	f3ef 8611 	mrs	r6, BASEPRI
   1f982:	f383 8811 	msr	BASEPRI, r3
   1f986:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1f98a:	4b0d      	ldr	r3, [pc, #52]	; (1f9c0 <k_sched_time_slice_set+0x4c>)
   1f98c:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1f98e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1f992:	f240 30e7 	movw	r0, #999	; 0x3e7
   1f996:	2100      	movs	r1, #0
   1f998:	615a      	str	r2, [r3, #20]
   1f99a:	fbe7 0105 	umlal	r0, r1, r7, r5
   1f99e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f9a2:	2300      	movs	r3, #0
   1f9a4:	f7e0 fbec 	bl	180 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1f9a8:	4b06      	ldr	r3, [pc, #24]	; (1f9c4 <k_sched_time_slice_set+0x50>)
   1f9aa:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1f9ac:	4b06      	ldr	r3, [pc, #24]	; (1f9c8 <k_sched_time_slice_set+0x54>)
   1f9ae:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1f9b0:	f7ff ffca 	bl	1f948 <z_reset_time_slice>
	__asm__ volatile(
   1f9b4:	f386 8811 	msr	BASEPRI, r6
   1f9b8:	f3bf 8f6f 	isb	sy
	}
}
   1f9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f9be:	bf00      	nop
   1f9c0:	20004044 	.word	0x20004044
   1f9c4:	20004080 	.word	0x20004080
   1f9c8:	2000407c 	.word	0x2000407c

0001f9cc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1f9cc:	b949      	cbnz	r1, 1f9e2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1f9ce:	f3ef 8005 	mrs	r0, IPSR
   1f9d2:	b930      	cbnz	r0, 1f9e2 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1f9d4:	4b05      	ldr	r3, [pc, #20]	; (1f9ec <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1f9d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1f9d8:	689b      	ldr	r3, [r3, #8]
   1f9da:	429a      	cmp	r2, r3
   1f9dc:	d001      	beq.n	1f9e2 <z_reschedule+0x16>
	ret = arch_swap(key);
   1f9de:	f7e4 bcbf 	b.w	4360 <arch_swap>
   1f9e2:	f381 8811 	msr	BASEPRI, r1
   1f9e6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1f9ea:	4770      	bx	lr
   1f9ec:	20004044 	.word	0x20004044

0001f9f0 <k_sched_lock>:
	__asm__ volatile(
   1f9f0:	f04f 0320 	mov.w	r3, #32
   1f9f4:	f3ef 8111 	mrs	r1, BASEPRI
   1f9f8:	f383 8811 	msr	BASEPRI, r3
   1f9fc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1fa00:	4b04      	ldr	r3, [pc, #16]	; (1fa14 <k_sched_lock+0x24>)
   1fa02:	689a      	ldr	r2, [r3, #8]
   1fa04:	7bd3      	ldrb	r3, [r2, #15]
   1fa06:	3b01      	subs	r3, #1
   1fa08:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1fa0a:	f381 8811 	msr	BASEPRI, r1
   1fa0e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1fa12:	4770      	bx	lr
   1fa14:	20004044 	.word	0x20004044

0001fa18 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1fa18:	4b09      	ldr	r3, [pc, #36]	; (1fa40 <z_priq_dumb_remove+0x28>)
   1fa1a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1fa1e:	4282      	cmp	r2, r0
   1fa20:	d105      	bne.n	1fa2e <z_priq_dumb_remove+0x16>
   1fa22:	689b      	ldr	r3, [r3, #8]
   1fa24:	428b      	cmp	r3, r1
   1fa26:	d102      	bne.n	1fa2e <z_priq_dumb_remove+0x16>
   1fa28:	7b4b      	ldrb	r3, [r1, #13]
   1fa2a:	06db      	lsls	r3, r3, #27
   1fa2c:	d106      	bne.n	1fa3c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1fa2e:	e9d1 3200 	ldrd	r3, r2, [r1]
   1fa32:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fa34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fa36:	2300      	movs	r3, #0
	node->prev = NULL;
   1fa38:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1fa3c:	4770      	bx	lr
   1fa3e:	bf00      	nop
   1fa40:	20004044 	.word	0x20004044

0001fa44 <update_cache>:
{
   1fa44:	b538      	push	{r3, r4, r5, lr}
   1fa46:	4c12      	ldr	r4, [pc, #72]	; (1fa90 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1fa48:	6923      	ldr	r3, [r4, #16]
   1fa4a:	68a2      	ldr	r2, [r4, #8]
{
   1fa4c:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1fa4e:	b10b      	cbz	r3, 1fa54 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1fa50:	68e5      	ldr	r5, [r4, #12]
   1fa52:	e00c      	b.n	1fa6e <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fa54:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1fa58:	f00b fb24 	bl	2b0a4 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fa5c:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fa5e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fa60:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1fa62:	bf44      	itt	mi
   1fa64:	f043 0308 	orrmi.w	r3, r3, #8
   1fa68:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1fa6a:	2d00      	cmp	r5, #0
   1fa6c:	d0f0      	beq.n	1fa50 <update_cache+0xc>
	if (preempt_ok != 0) {
   1fa6e:	b949      	cbnz	r1, 1fa84 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1fa70:	7b53      	ldrb	r3, [r2, #13]
   1fa72:	06db      	lsls	r3, r3, #27
   1fa74:	d106      	bne.n	1fa84 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fa76:	69ab      	ldr	r3, [r5, #24]
   1fa78:	b923      	cbnz	r3, 1fa84 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fa7a:	89d3      	ldrh	r3, [r2, #14]
   1fa7c:	2b7f      	cmp	r3, #127	; 0x7f
   1fa7e:	d901      	bls.n	1fa84 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1fa80:	62a2      	str	r2, [r4, #40]	; 0x28
}
   1fa82:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1fa84:	4295      	cmp	r5, r2
   1fa86:	d001      	beq.n	1fa8c <update_cache+0x48>
			z_reset_time_slice();
   1fa88:	f7ff ff5e 	bl	1f948 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1fa8c:	62a5      	str	r5, [r4, #40]	; 0x28
}
   1fa8e:	e7f8      	b.n	1fa82 <update_cache+0x3e>
   1fa90:	20004044 	.word	0x20004044

0001fa94 <k_sched_unlock>:
{
   1fa94:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fa96:	f04f 0320 	mov.w	r3, #32
   1fa9a:	f3ef 8411 	mrs	r4, BASEPRI
   1fa9e:	f383 8811 	msr	BASEPRI, r3
   1faa2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1faa6:	4b08      	ldr	r3, [pc, #32]	; (1fac8 <k_sched_unlock+0x34>)
   1faa8:	689a      	ldr	r2, [r3, #8]
   1faaa:	7bd3      	ldrb	r3, [r2, #15]
   1faac:	3301      	adds	r3, #1
   1faae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1fab0:	2000      	movs	r0, #0
   1fab2:	f7ff ffc7 	bl	1fa44 <update_cache>
	__asm__ volatile(
   1fab6:	f384 8811 	msr	BASEPRI, r4
   1faba:	f3bf 8f6f 	isb	sy
}
   1fabe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1fac2:	f00b bac3 	b.w	2b04c <z_reschedule_unlocked>
   1fac6:	bf00      	nop
   1fac8:	20004044 	.word	0x20004044

0001facc <ready_thread>:
{
   1facc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1face:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   1fad2:	7b43      	ldrb	r3, [r0, #13]
   1fad4:	2a00      	cmp	r2, #0
   1fad6:	db2c      	blt.n	1fb32 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fad8:	06db      	lsls	r3, r3, #27
   1fada:	d12a      	bne.n	1fb32 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1fadc:	6983      	ldr	r3, [r0, #24]
   1fade:	bb43      	cbnz	r3, 1fb32 <ready_thread+0x66>
	return list->head == list;
   1fae0:	4a15      	ldr	r2, [pc, #84]	; (1fb38 <ready_thread+0x6c>)
   1fae2:	4611      	mov	r1, r2
   1fae4:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fae8:	428c      	cmp	r4, r1
   1faea:	bf18      	it	ne
   1faec:	4623      	movne	r3, r4
   1faee:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1faf0:	6b14      	ldr	r4, [r2, #48]	; 0x30
   1faf2:	bf38      	it	cc
   1faf4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1faf6:	b1b3      	cbz	r3, 1fb26 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1faf8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fafc:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1fb00:	42ae      	cmp	r6, r5
   1fb02:	db03      	blt.n	1fb0c <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
   1fb04:	42a3      	cmp	r3, r4
   1fb06:	d00e      	beq.n	1fb26 <ready_thread+0x5a>
   1fb08:	681b      	ldr	r3, [r3, #0]
   1fb0a:	e7f4      	b.n	1faf6 <ready_thread+0x2a>
	node->prev = successor->prev;
   1fb0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fb0e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1fb12:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1fb14:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1fb16:	7b43      	ldrb	r3, [r0, #13]
   1fb18:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fb1c:	7343      	strb	r3, [r0, #13]
}
   1fb1e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1fb20:	2000      	movs	r0, #0
   1fb22:	f7ff bf8f 	b.w	1fa44 <update_cache>
	node->prev = list->tail;
   1fb26:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1fb2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fb2c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1fb2e:	6310      	str	r0, [r2, #48]	; 0x30
}
   1fb30:	e7f1      	b.n	1fb16 <ready_thread+0x4a>
}
   1fb32:	bc70      	pop	{r4, r5, r6}
   1fb34:	4770      	bx	lr
   1fb36:	bf00      	nop
   1fb38:	20004044 	.word	0x20004044

0001fb3c <z_sched_start>:
{
   1fb3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fb3e:	f04f 0220 	mov.w	r2, #32
   1fb42:	f3ef 8411 	mrs	r4, BASEPRI
   1fb46:	f382 8811 	msr	BASEPRI, r2
   1fb4a:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1fb4e:	7b42      	ldrb	r2, [r0, #13]
   1fb50:	0751      	lsls	r1, r2, #29
   1fb52:	d404      	bmi.n	1fb5e <z_sched_start+0x22>
	__asm__ volatile(
   1fb54:	f384 8811 	msr	BASEPRI, r4
   1fb58:	f3bf 8f6f 	isb	sy
}
   1fb5c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fb5e:	f022 0204 	bic.w	r2, r2, #4
   1fb62:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1fb64:	f7ff ffb2 	bl	1facc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1fb68:	4621      	mov	r1, r4
   1fb6a:	4802      	ldr	r0, [pc, #8]	; (1fb74 <z_sched_start+0x38>)
}
   1fb6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1fb70:	f7ff bf2c 	b.w	1f9cc <z_reschedule>
   1fb74:	20008736 	.word	0x20008736

0001fb78 <move_thread_to_end_of_prio_q>:
{
   1fb78:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1fb7a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fb7e:	2b00      	cmp	r3, #0
{
   1fb80:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fb82:	da02      	bge.n	1fb8a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fb84:	4817      	ldr	r0, [pc, #92]	; (1fbe4 <move_thread_to_end_of_prio_q+0x6c>)
   1fb86:	f7ff ff47 	bl	1fa18 <z_priq_dumb_remove>
	return list->head == list;
   1fb8a:	4a17      	ldr	r2, [pc, #92]	; (1fbe8 <move_thread_to_end_of_prio_q+0x70>)
   1fb8c:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1fb8e:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
   1fb90:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fb94:	4283      	cmp	r3, r0
   1fb96:	bf08      	it	eq
   1fb98:	2300      	moveq	r3, #0
   1fb9a:	2b00      	cmp	r3, #0
   1fb9c:	bf38      	it	cc
   1fb9e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fba0:	b1d3      	cbz	r3, 1fbd8 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fba2:	f991 600e 	ldrsb.w	r6, [r1, #14]
   1fba6:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1fbaa:	42ae      	cmp	r6, r5
   1fbac:	db03      	blt.n	1fbb6 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   1fbae:	42a3      	cmp	r3, r4
   1fbb0:	d012      	beq.n	1fbd8 <move_thread_to_end_of_prio_q+0x60>
   1fbb2:	681b      	ldr	r3, [r3, #0]
   1fbb4:	e7f4      	b.n	1fba0 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
   1fbb6:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1fbb8:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1fbbc:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1fbbe:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1fbc0:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1fbc2:	6890      	ldr	r0, [r2, #8]
   1fbc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fbc8:	734b      	strb	r3, [r1, #13]
   1fbca:	1a43      	subs	r3, r0, r1
   1fbcc:	4258      	negs	r0, r3
}
   1fbce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1fbd2:	4158      	adcs	r0, r3
   1fbd4:	f7ff bf36 	b.w	1fa44 <update_cache>
	node->prev = list->tail;
   1fbd8:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   1fbdc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fbde:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1fbe0:	6311      	str	r1, [r2, #48]	; 0x30
}
   1fbe2:	e7ed      	b.n	1fbc0 <move_thread_to_end_of_prio_q+0x48>
   1fbe4:	20004070 	.word	0x20004070
   1fbe8:	20004044 	.word	0x20004044

0001fbec <z_time_slice>:
{
   1fbec:	b570      	push	{r4, r5, r6, lr}
   1fbee:	4601      	mov	r1, r0
	__asm__ volatile(
   1fbf0:	f04f 0320 	mov.w	r3, #32
   1fbf4:	f3ef 8411 	mrs	r4, BASEPRI
   1fbf8:	f383 8811 	msr	BASEPRI, r3
   1fbfc:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1fc00:	4b16      	ldr	r3, [pc, #88]	; (1fc5c <z_time_slice+0x70>)
   1fc02:	4a17      	ldr	r2, [pc, #92]	; (1fc60 <z_time_slice+0x74>)
   1fc04:	6898      	ldr	r0, [r3, #8]
   1fc06:	6815      	ldr	r5, [r2, #0]
   1fc08:	42a8      	cmp	r0, r5
   1fc0a:	461d      	mov	r5, r3
   1fc0c:	d106      	bne.n	1fc1c <z_time_slice+0x30>
			z_reset_time_slice();
   1fc0e:	f7ff fe9b 	bl	1f948 <z_reset_time_slice>
	__asm__ volatile(
   1fc12:	f384 8811 	msr	BASEPRI, r4
   1fc16:	f3bf 8f6f 	isb	sy
}
   1fc1a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   1fc1c:	2600      	movs	r6, #0
   1fc1e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1fc20:	4a10      	ldr	r2, [pc, #64]	; (1fc64 <z_time_slice+0x78>)
   1fc22:	6812      	ldr	r2, [r2, #0]
   1fc24:	b1ba      	cbz	r2, 1fc56 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fc26:	89c2      	ldrh	r2, [r0, #14]
   1fc28:	2a7f      	cmp	r2, #127	; 0x7f
   1fc2a:	d814      	bhi.n	1fc56 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   1fc2c:	7b42      	ldrb	r2, [r0, #13]
   1fc2e:	06d2      	lsls	r2, r2, #27
   1fc30:	d111      	bne.n	1fc56 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1fc32:	4a0d      	ldr	r2, [pc, #52]	; (1fc68 <z_time_slice+0x7c>)
   1fc34:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fc38:	6812      	ldr	r2, [r2, #0]
   1fc3a:	4296      	cmp	r6, r2
   1fc3c:	db0b      	blt.n	1fc56 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   1fc3e:	4a0b      	ldr	r2, [pc, #44]	; (1fc6c <z_time_slice+0x80>)
   1fc40:	4290      	cmp	r0, r2
   1fc42:	d008      	beq.n	1fc56 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   1fc44:	695a      	ldr	r2, [r3, #20]
   1fc46:	428a      	cmp	r2, r1
   1fc48:	dc02      	bgt.n	1fc50 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   1fc4a:	f7ff ff95 	bl	1fb78 <move_thread_to_end_of_prio_q>
   1fc4e:	e7de      	b.n	1fc0e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   1fc50:	1a52      	subs	r2, r2, r1
   1fc52:	615a      	str	r2, [r3, #20]
   1fc54:	e7dd      	b.n	1fc12 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   1fc56:	2300      	movs	r3, #0
   1fc58:	616b      	str	r3, [r5, #20]
   1fc5a:	e7da      	b.n	1fc12 <z_time_slice+0x26>
   1fc5c:	20004044 	.word	0x20004044
   1fc60:	20004078 	.word	0x20004078
   1fc64:	20004080 	.word	0x20004080
   1fc68:	2000407c 	.word	0x2000407c
   1fc6c:	20001328 	.word	0x20001328

0001fc70 <z_impl_k_thread_suspend>:
{
   1fc70:	b570      	push	{r4, r5, r6, lr}
   1fc72:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1fc74:	3018      	adds	r0, #24
   1fc76:	f00b fb47 	bl	2b308 <z_abort_timeout>
	__asm__ volatile(
   1fc7a:	f04f 0320 	mov.w	r3, #32
   1fc7e:	f3ef 8611 	mrs	r6, BASEPRI
   1fc82:	f383 8811 	msr	BASEPRI, r3
   1fc86:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1fc8a:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1fc8e:	2b00      	cmp	r3, #0
   1fc90:	da07      	bge.n	1fca2 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fc92:	480f      	ldr	r0, [pc, #60]	; (1fcd0 <z_impl_k_thread_suspend+0x60>)
   1fc94:	4621      	mov	r1, r4
   1fc96:	f7ff febf 	bl	1fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fc9a:	7b63      	ldrb	r3, [r4, #13]
   1fc9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fca0:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1fca2:	4d0c      	ldr	r5, [pc, #48]	; (1fcd4 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1fca4:	7b63      	ldrb	r3, [r4, #13]
   1fca6:	68a8      	ldr	r0, [r5, #8]
   1fca8:	f043 0310 	orr.w	r3, r3, #16
   1fcac:	7363      	strb	r3, [r4, #13]
   1fcae:	1b03      	subs	r3, r0, r4
   1fcb0:	4258      	negs	r0, r3
   1fcb2:	4158      	adcs	r0, r3
   1fcb4:	f7ff fec6 	bl	1fa44 <update_cache>
	__asm__ volatile(
   1fcb8:	f386 8811 	msr	BASEPRI, r6
   1fcbc:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1fcc0:	68ab      	ldr	r3, [r5, #8]
   1fcc2:	42a3      	cmp	r3, r4
   1fcc4:	d103      	bne.n	1fcce <z_impl_k_thread_suspend+0x5e>
}
   1fcc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1fcca:	f00b b9bf 	b.w	2b04c <z_reschedule_unlocked>
}
   1fcce:	bd70      	pop	{r4, r5, r6, pc}
   1fcd0:	20004070 	.word	0x20004070
   1fcd4:	20004044 	.word	0x20004044

0001fcd8 <z_thread_single_abort>:
{
   1fcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fcdc:	4604      	mov	r4, r0
	__asm__ volatile(
   1fcde:	f04f 0320 	mov.w	r3, #32
   1fce2:	f3ef 8211 	mrs	r2, BASEPRI
   1fce6:	f383 8811 	msr	BASEPRI, r3
   1fcea:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1fcee:	7b43      	ldrb	r3, [r0, #13]
   1fcf0:	f013 0f28 	tst.w	r3, #40	; 0x28
   1fcf4:	d005      	beq.n	1fd02 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1fcf6:	f382 8811 	msr	BASEPRI, r2
   1fcfa:	f3bf 8f6f 	isb	sy
}
   1fcfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1fd02:	f043 0320 	orr.w	r3, r3, #32
   1fd06:	7343      	strb	r3, [r0, #13]
   1fd08:	f382 8811 	msr	BASEPRI, r2
   1fd0c:	f3bf 8f6f 	isb	sy
   1fd10:	3018      	adds	r0, #24
   1fd12:	f00b faf9 	bl	2b308 <z_abort_timeout>
	__asm__ volatile(
   1fd16:	f04f 0320 	mov.w	r3, #32
   1fd1a:	f3ef 8611 	mrs	r6, BASEPRI
   1fd1e:	f383 8811 	msr	BASEPRI, r3
   1fd22:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fd26:	7b63      	ldrb	r3, [r4, #13]
   1fd28:	06d8      	lsls	r0, r3, #27
   1fd2a:	d116      	bne.n	1fd5a <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1fd2c:	69a2      	ldr	r2, [r4, #24]
   1fd2e:	b9a2      	cbnz	r2, 1fd5a <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1fd30:	0619      	lsls	r1, r3, #24
   1fd32:	d507      	bpl.n	1fd44 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1fd34:	4826      	ldr	r0, [pc, #152]	; (1fdd0 <z_thread_single_abort+0xf8>)
   1fd36:	4621      	mov	r1, r4
   1fd38:	f7ff fe6e 	bl	1fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fd3c:	7b63      	ldrb	r3, [r4, #13]
   1fd3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fd42:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1fd44:	4b23      	ldr	r3, [pc, #140]	; (1fdd4 <z_thread_single_abort+0xfc>)
   1fd46:	6898      	ldr	r0, [r3, #8]
   1fd48:	1b02      	subs	r2, r0, r4
   1fd4a:	4250      	negs	r0, r2
   1fd4c:	4150      	adcs	r0, r2
   1fd4e:	f7ff fe79 	bl	1fa44 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1fd52:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1fd56:	2700      	movs	r7, #0
   1fd58:	e01e      	b.n	1fd98 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1fd5a:	079b      	lsls	r3, r3, #30
   1fd5c:	d5f9      	bpl.n	1fd52 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1fd5e:	68a0      	ldr	r0, [r4, #8]
   1fd60:	4621      	mov	r1, r4
   1fd62:	f7ff fe59 	bl	1fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fd66:	7b63      	ldrb	r3, [r4, #13]
   1fd68:	f023 0302 	bic.w	r3, r3, #2
   1fd6c:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1fd6e:	2300      	movs	r3, #0
   1fd70:	60a3      	str	r3, [r4, #8]
   1fd72:	e7ee      	b.n	1fd52 <z_thread_single_abort+0x7a>
   1fd74:	f105 0018 	add.w	r0, r5, #24
   1fd78:	f00b fac6 	bl	2b308 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1fd7c:	68a8      	ldr	r0, [r5, #8]
   1fd7e:	4629      	mov	r1, r5
   1fd80:	f7ff fe4a 	bl	1fa18 <z_priq_dumb_remove>
   1fd84:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1fd86:	60af      	str	r7, [r5, #8]
   1fd88:	f023 0302 	bic.w	r3, r3, #2
   1fd8c:	736b      	strb	r3, [r5, #13]
   1fd8e:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   1fd92:	4628      	mov	r0, r5
   1fd94:	f7ff fe9a 	bl	1facc <ready_thread>
	return list->head == list;
   1fd98:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fd9a:	4545      	cmp	r5, r8
   1fd9c:	d001      	beq.n	1fda2 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1fd9e:	2d00      	cmp	r5, #0
   1fda0:	d1e8      	bne.n	1fd74 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   1fda2:	4b0c      	ldr	r3, [pc, #48]	; (1fdd4 <z_thread_single_abort+0xfc>)
   1fda4:	689a      	ldr	r2, [r3, #8]
   1fda6:	4b0c      	ldr	r3, [pc, #48]	; (1fdd8 <z_thread_single_abort+0x100>)
   1fda8:	429a      	cmp	r2, r3
   1fdaa:	d102      	bne.n	1fdb2 <z_thread_single_abort+0xda>
			update_cache(1);
   1fdac:	2001      	movs	r0, #1
   1fdae:	f7ff fe49 	bl	1fa44 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   1fdb2:	7b63      	ldrb	r3, [r4, #13]
   1fdb4:	f043 0308 	orr.w	r3, r3, #8
   1fdb8:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   1fdba:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   1fdbc:	f386 8811 	msr	BASEPRI, r6
   1fdc0:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   1fdc4:	2b00      	cmp	r3, #0
   1fdc6:	d09a      	beq.n	1fcfe <z_thread_single_abort+0x26>
		fn_abort(thread);
   1fdc8:	4620      	mov	r0, r4
}
   1fdca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   1fdce:	4718      	bx	r3
   1fdd0:	20004070 	.word	0x20004070
   1fdd4:	20004044 	.word	0x20004044
   1fdd8:	20001328 	.word	0x20001328

0001fddc <unready_thread>:
{
   1fddc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1fdde:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fde2:	2b00      	cmp	r3, #0
{
   1fde4:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fde6:	da06      	bge.n	1fdf6 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fde8:	4807      	ldr	r0, [pc, #28]	; (1fe08 <unready_thread+0x2c>)
   1fdea:	f7ff fe15 	bl	1fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1fdee:	7b4b      	ldrb	r3, [r1, #13]
   1fdf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1fdf4:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1fdf6:	4b05      	ldr	r3, [pc, #20]	; (1fe0c <unready_thread+0x30>)
   1fdf8:	6898      	ldr	r0, [r3, #8]
   1fdfa:	1a43      	subs	r3, r0, r1
   1fdfc:	4258      	negs	r0, r3
   1fdfe:	4158      	adcs	r0, r3
}
   1fe00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1fe04:	f7ff be1e 	b.w	1fa44 <update_cache>
   1fe08:	20004070 	.word	0x20004070
   1fe0c:	20004044 	.word	0x20004044

0001fe10 <pend>:
{
   1fe10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe14:	4606      	mov	r6, r0
   1fe16:	4614      	mov	r4, r2
   1fe18:	461d      	mov	r5, r3
	__asm__ volatile(
   1fe1a:	f04f 0320 	mov.w	r3, #32
   1fe1e:	f3ef 8711 	mrs	r7, BASEPRI
   1fe22:	f383 8811 	msr	BASEPRI, r3
   1fe26:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1fe2a:	f00b f975 	bl	2b118 <add_to_waitq_locked>
	__asm__ volatile(
   1fe2e:	f387 8811 	msr	BASEPRI, r7
   1fe32:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1fe36:	1c6b      	adds	r3, r5, #1
   1fe38:	bf08      	it	eq
   1fe3a:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1fe3e:	d008      	beq.n	1fe52 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1fe40:	4622      	mov	r2, r4
   1fe42:	462b      	mov	r3, r5
   1fe44:	f106 0018 	add.w	r0, r6, #24
   1fe48:	4903      	ldr	r1, [pc, #12]	; (1fe58 <pend+0x48>)
}
   1fe4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1fe4e:	f000 bb1f 	b.w	20490 <z_add_timeout>
   1fe52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fe56:	bf00      	nop
   1fe58:	0002b0d9 	.word	0x0002b0d9

0001fe5c <z_pend_curr>:
{
   1fe5c:	b510      	push	{r4, lr}
	pending_current = _current;
   1fe5e:	4b07      	ldr	r3, [pc, #28]	; (1fe7c <z_pend_curr+0x20>)
   1fe60:	6898      	ldr	r0, [r3, #8]
   1fe62:	4b07      	ldr	r3, [pc, #28]	; (1fe80 <z_pend_curr+0x24>)
{
   1fe64:	460c      	mov	r4, r1
	pending_current = _current;
   1fe66:	6018      	str	r0, [r3, #0]
{
   1fe68:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1fe6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fe6e:	f7ff ffcf 	bl	1fe10 <pend>
   1fe72:	4620      	mov	r0, r4
}
   1fe74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1fe78:	f7e4 ba72 	b.w	4360 <arch_swap>
   1fe7c:	20004044 	.word	0x20004044
   1fe80:	20004078 	.word	0x20004078

0001fe84 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
   1fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe88:	4605      	mov	r5, r0
   1fe8a:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
   1fe8c:	f00b fa7c 	bl	2b388 <z_tick_get_32>
   1fe90:	4604      	mov	r4, r0
	__asm__ volatile(
   1fe92:	f04f 0320 	mov.w	r3, #32
   1fe96:	f3ef 8811 	mrs	r8, BASEPRI
   1fe9a:	f383 8811 	msr	BASEPRI, r3
   1fe9e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1fea2:	4e12      	ldr	r6, [pc, #72]	; (1feec <z_tick_sleep.part.0+0x68>)
   1fea4:	4b12      	ldr	r3, [pc, #72]	; (1fef0 <z_tick_sleep.part.0+0x6c>)
   1fea6:	68b0      	ldr	r0, [r6, #8]
   1fea8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   1feaa:	f7ff ff97 	bl	1fddc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1feae:	68b0      	ldr	r0, [r6, #8]
   1feb0:	4910      	ldr	r1, [pc, #64]	; (1fef4 <z_tick_sleep.part.0+0x70>)
   1feb2:	462a      	mov	r2, r5
   1feb4:	463b      	mov	r3, r7
   1feb6:	3018      	adds	r0, #24
   1feb8:	f000 faea 	bl	20490 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1febc:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1febe:	7b53      	ldrb	r3, [r2, #13]
   1fec0:	f043 0310 	orr.w	r3, r3, #16
   1fec4:	7353      	strb	r3, [r2, #13]
   1fec6:	4640      	mov	r0, r8
   1fec8:	f7e4 fa4a 	bl	4360 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1fecc:	f00b fa5c 	bl	2b388 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   1fed0:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   1fed2:	1a24      	subs	r4, r4, r0
   1fed4:	f04f 0500 	mov.w	r5, #0
   1fed8:	f165 0500 	sbc.w	r5, r5, #0
   1fedc:	2c00      	cmp	r4, #0
   1fede:	f175 0300 	sbcs.w	r3, r5, #0
   1fee2:	bfb8      	it	lt
   1fee4:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
   1fee6:	4620      	mov	r0, r4
   1fee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1feec:	20004044 	.word	0x20004044
   1fef0:	20004078 	.word	0x20004078
   1fef4:	0002b0d9 	.word	0x0002b0d9

0001fef8 <z_set_prio>:
{
   1fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fefc:	4604      	mov	r4, r0
   1fefe:	f04f 0320 	mov.w	r3, #32
   1ff02:	f3ef 8811 	mrs	r8, BASEPRI
   1ff06:	f383 8811 	msr	BASEPRI, r3
   1ff0a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ff0e:	7b43      	ldrb	r3, [r0, #13]
   1ff10:	06db      	lsls	r3, r3, #27
   1ff12:	b24e      	sxtb	r6, r1
   1ff14:	d12e      	bne.n	1ff74 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1ff16:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1ff18:	bb65      	cbnz	r5, 1ff74 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ff1a:	4f18      	ldr	r7, [pc, #96]	; (1ff7c <z_set_prio+0x84>)
   1ff1c:	4621      	mov	r1, r4
   1ff1e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
   1ff22:	f7ff fd79 	bl	1fa18 <z_priq_dumb_remove>
	return list->head == list;
   1ff26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ff28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
				thread->base.prio = prio;
   1ff2a:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff2c:	4283      	cmp	r3, r0
   1ff2e:	bf18      	it	ne
   1ff30:	461d      	movne	r5, r3
   1ff32:	2d00      	cmp	r5, #0
   1ff34:	bf38      	it	cc
   1ff36:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ff38:	b1b5      	cbz	r5, 1ff68 <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ff3a:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1ff3e:	42b1      	cmp	r1, r6
   1ff40:	dc03      	bgt.n	1ff4a <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1ff42:	42aa      	cmp	r2, r5
   1ff44:	d010      	beq.n	1ff68 <z_set_prio+0x70>
   1ff46:	682d      	ldr	r5, [r5, #0]
   1ff48:	e7f6      	b.n	1ff38 <z_set_prio+0x40>
	node->prev = successor->prev;
   1ff4a:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1ff4c:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1ff50:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ff52:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1ff54:	2001      	movs	r0, #1
   1ff56:	f7ff fd75 	bl	1fa44 <update_cache>
   1ff5a:	2001      	movs	r0, #1
	__asm__ volatile(
   1ff5c:	f388 8811 	msr	BASEPRI, r8
   1ff60:	f3bf 8f6f 	isb	sy
}
   1ff64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1ff68:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1ff6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1ff6e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ff70:	633c      	str	r4, [r7, #48]	; 0x30
}
   1ff72:	e7ef      	b.n	1ff54 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1ff74:	73a6      	strb	r6, [r4, #14]
   1ff76:	2000      	movs	r0, #0
   1ff78:	e7f0      	b.n	1ff5c <z_set_prio+0x64>
   1ff7a:	bf00      	nop
   1ff7c:	20004044 	.word	0x20004044

0001ff80 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1ff80:	4b04      	ldr	r3, [pc, #16]	; (1ff94 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1ff82:	2100      	movs	r1, #0
   1ff84:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1ff88:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   1ff8c:	4608      	mov	r0, r1
   1ff8e:	f7ff bcf1 	b.w	1f974 <k_sched_time_slice_set>
   1ff92:	bf00      	nop
   1ff94:	20004044 	.word	0x20004044

0001ff98 <z_impl_k_yield>:
{
   1ff98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1ff9a:	4c24      	ldr	r4, [pc, #144]	; (2002c <z_impl_k_yield+0x94>)
   1ff9c:	4b24      	ldr	r3, [pc, #144]	; (20030 <z_impl_k_yield+0x98>)
   1ff9e:	68a2      	ldr	r2, [r4, #8]
   1ffa0:	429a      	cmp	r2, r3
   1ffa2:	d030      	beq.n	20006 <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1ffa4:	f04f 0320 	mov.w	r3, #32
   1ffa8:	f3ef 8511 	mrs	r5, BASEPRI
   1ffac:	f383 8811 	msr	BASEPRI, r3
   1ffb0:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1ffb4:	68a1      	ldr	r1, [r4, #8]
   1ffb6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   1ffba:	f7ff fd2d 	bl	1fa18 <z_priq_dumb_remove>
	return list->head == list;
   1ffbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1ffc0:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1ffc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ffc4:	4283      	cmp	r3, r0
   1ffc6:	bf08      	it	eq
   1ffc8:	2300      	moveq	r3, #0
   1ffca:	2b00      	cmp	r3, #0
   1ffcc:	bf38      	it	cc
   1ffce:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ffd0:	b32b      	cbz	r3, 2001e <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ffd2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1ffd6:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1ffda:	42b7      	cmp	r7, r6
   1ffdc:	db03      	blt.n	1ffe6 <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1ffde:	428b      	cmp	r3, r1
   1ffe0:	d01d      	beq.n	2001e <z_impl_k_yield+0x86>
   1ffe2:	681b      	ldr	r3, [r3, #0]
   1ffe4:	e7f4      	b.n	1ffd0 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1ffe6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1ffe8:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1ffec:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1ffee:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1fff0:	7b53      	ldrb	r3, [r2, #13]
   1fff2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fff6:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1fff8:	2001      	movs	r0, #1
   1fffa:	f7ff fd23 	bl	1fa44 <update_cache>
	__asm__ volatile(
   1fffe:	f385 8811 	msr	BASEPRI, r5
   20002:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20006:	f04f 0320 	mov.w	r3, #32
   2000a:	f3ef 8011 	mrs	r0, BASEPRI
   2000e:	f383 8811 	msr	BASEPRI, r3
   20012:	f3bf 8f6f 	isb	sy
}
   20016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2001a:	f7e4 b9a1 	b.w	4360 <arch_swap>
	node->prev = list->tail;
   2001e:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   20022:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20024:	601a      	str	r2, [r3, #0]
	list->tail = node;
   20026:	6322      	str	r2, [r4, #48]	; 0x30
}
   20028:	e7e2      	b.n	1fff0 <z_impl_k_yield+0x58>
   2002a:	bf00      	nop
   2002c:	20004044 	.word	0x20004044
   20030:	20001328 	.word	0x20001328

00020034 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20034:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   20038:	bf08      	it	eq
   2003a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2003e:	b508      	push	{r3, lr}
   20040:	4602      	mov	r2, r0
   20042:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20044:	d106      	bne.n	20054 <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
   20046:	4b0b      	ldr	r3, [pc, #44]	; (20074 <z_impl_k_sleep+0x40>)
   20048:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2004a:	f7ff fe11 	bl	1fc70 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   2004e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   20052:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
   20054:	4313      	orrs	r3, r2
   20056:	d10a      	bne.n	2006e <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
   20058:	f7ff ff9e 	bl	1ff98 <z_impl_k_yield>
		return 0;
   2005c:	2000      	movs	r0, #0
			return (t * to_hz + off) / from_hz;
   2005e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20062:	fb80 2303 	smull	r2, r3, r0, r3
   20066:	0bd0      	lsrs	r0, r2, #15
   20068:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   2006c:	e7f1      	b.n	20052 <z_impl_k_sleep+0x1e>
   2006e:	f7ff ff09 	bl	1fe84 <z_tick_sleep.part.0>
   20072:	e7f4      	b.n	2005e <z_impl_k_sleep+0x2a>
   20074:	20004044 	.word	0x20004044

00020078 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20078:	4b01      	ldr	r3, [pc, #4]	; (20080 <z_impl_k_current_get+0x8>)
   2007a:	6898      	ldr	r0, [r3, #8]
   2007c:	4770      	bx	lr
   2007e:	bf00      	nop
   20080:	20004044 	.word	0x20004044

00020084 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20084:	b538      	push	{r3, r4, r5, lr}
   20086:	4604      	mov	r4, r0
   20088:	f04f 0320 	mov.w	r3, #32
   2008c:	f3ef 8511 	mrs	r5, BASEPRI
   20090:	f383 8811 	msr	BASEPRI, r3
   20094:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   20098:	f00b f869 	bl	2b16e <z_unpend_first_thread>

	if (thread != NULL) {
   2009c:	b150      	cbz	r0, 200b4 <z_impl_k_sem_give+0x30>
   2009e:	2200      	movs	r2, #0
   200a0:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   200a4:	f00b f808 	bl	2b0b8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   200a8:	4629      	mov	r1, r5
   200aa:	4808      	ldr	r0, [pc, #32]	; (200cc <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   200ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   200b0:	f7ff bc8c 	b.w	1f9cc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   200b4:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   200b8:	429a      	cmp	r2, r3
   200ba:	bf18      	it	ne
   200bc:	3301      	addne	r3, #1
   200be:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   200c0:	2102      	movs	r1, #2
   200c2:	f104 0010 	add.w	r0, r4, #16
   200c6:	f00b fb11 	bl	2b6ec <z_handle_obj_poll_events>
}
   200ca:	e7ed      	b.n	200a8 <z_impl_k_sem_give+0x24>
   200cc:	20008736 	.word	0x20008736

000200d0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   200d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   200d2:	4614      	mov	r4, r2
   200d4:	461d      	mov	r5, r3
   200d6:	f04f 0320 	mov.w	r3, #32
   200da:	f3ef 8111 	mrs	r1, BASEPRI
   200de:	f383 8811 	msr	BASEPRI, r3
   200e2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   200e6:	6883      	ldr	r3, [r0, #8]
   200e8:	b143      	cbz	r3, 200fc <z_impl_k_sem_take+0x2c>
		sem->count--;
   200ea:	3b01      	subs	r3, #1
   200ec:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   200ee:	f381 8811 	msr	BASEPRI, r1
   200f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   200f6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   200f8:	b003      	add	sp, #12
   200fa:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   200fc:	ea54 0305 	orrs.w	r3, r4, r5
   20100:	d106      	bne.n	20110 <z_impl_k_sem_take+0x40>
   20102:	f381 8811 	msr	BASEPRI, r1
   20106:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   2010a:	f06f 000f 	mvn.w	r0, #15
   2010e:	e7f3      	b.n	200f8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20110:	4602      	mov	r2, r0
   20112:	e9cd 4500 	strd	r4, r5, [sp]
   20116:	4802      	ldr	r0, [pc, #8]	; (20120 <z_impl_k_sem_take+0x50>)
   20118:	f7ff fea0 	bl	1fe5c <z_pend_curr>
	return ret;
   2011c:	e7ec      	b.n	200f8 <z_impl_k_sem_take+0x28>
   2011e:	bf00      	nop
   20120:	20008736 	.word	0x20008736

00020124 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20124:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   20126:	4c08      	ldr	r4, [pc, #32]	; (20148 <k_sys_work_q_init+0x24>)
   20128:	4908      	ldr	r1, [pc, #32]	; (2014c <k_sys_work_q_init+0x28>)
   2012a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2012e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   20132:	4620      	mov	r0, r4
   20134:	f000 f8dc 	bl	202f0 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   20138:	4905      	ldr	r1, [pc, #20]	; (20150 <k_sys_work_q_init+0x2c>)
   2013a:	f104 0018 	add.w	r0, r4, #24
   2013e:	f00b f865 	bl	2b20c <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   20142:	2000      	movs	r0, #0
   20144:	bd10      	pop	{r4, pc}
   20146:	bf00      	nop
   20148:	20001438 	.word	0x20001438
   2014c:	2000a998 	.word	0x2000a998
   20150:	00039328 	.word	0x00039328

00020154 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20154:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   20158:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   2015c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   20160:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   20162:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   20164:	2504      	movs	r5, #4
   20166:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20168:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   2016a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   2016c:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2016e:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   20170:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20172:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   20176:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2017a:	e9c0 161b 	strd	r1, r6, [r0, #108]	; 0x6c
	thread_base->sched_locked = 0U;
   2017e:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   20180:	6745      	str	r5, [r0, #116]	; 0x74
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20182:	9202      	str	r2, [sp, #8]
   20184:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20186:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   20188:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2018c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2018e:	9200      	str	r2, [sp, #0]
   20190:	4642      	mov	r2, r8
{
   20192:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20194:	f7e4 f98c 	bl	44b0 <arch_new_thread>
	if (!_current) {
   20198:	4b05      	ldr	r3, [pc, #20]	; (201b0 <z_setup_new_thread+0x5c>)
   2019a:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   2019c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   201a0:	b103      	cbz	r3, 201a4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   201a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   201a4:	67a3      	str	r3, [r4, #120]	; 0x78
}
   201a6:	4640      	mov	r0, r8
   201a8:	b004      	add	sp, #16
   201aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   201ae:	bf00      	nop
   201b0:	20004044 	.word	0x20004044

000201b4 <z_impl_k_thread_create>:
{
   201b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   201b6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   201b8:	2500      	movs	r5, #0
   201ba:	9505      	str	r5, [sp, #20]
   201bc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   201be:	9504      	str	r5, [sp, #16]
   201c0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   201c2:	9503      	str	r5, [sp, #12]
   201c4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   201c6:	9502      	str	r5, [sp, #8]
{
   201c8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   201cc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   201ce:	9501      	str	r5, [sp, #4]
   201d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   201d2:	9500      	str	r5, [sp, #0]
{
   201d4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   201d6:	f7ff ffbd 	bl	20154 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   201da:	1c7b      	adds	r3, r7, #1
   201dc:	bf08      	it	eq
   201de:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   201e2:	d005      	beq.n	201f0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   201e4:	ea56 0307 	orrs.w	r3, r6, r7
   201e8:	d105      	bne.n	201f6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   201ea:	4620      	mov	r0, r4
   201ec:	f7ff fca6 	bl	1fb3c <z_sched_start>
}
   201f0:	4620      	mov	r0, r4
   201f2:	b007      	add	sp, #28
   201f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   201f6:	4904      	ldr	r1, [pc, #16]	; (20208 <z_impl_k_thread_create+0x54>)
   201f8:	4632      	mov	r2, r6
   201fa:	463b      	mov	r3, r7
   201fc:	f104 0018 	add.w	r0, r4, #24
   20200:	f000 f946 	bl	20490 <z_add_timeout>
   20204:	e7f4      	b.n	201f0 <z_impl_k_thread_create+0x3c>
   20206:	bf00      	nop
   20208:	0002b0d9 	.word	0x0002b0d9

0002020c <z_init_static_threads>:
{
   2020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   20210:	4e2a      	ldr	r6, [pc, #168]	; (202bc <z_init_static_threads+0xb0>)
   20212:	4d2b      	ldr	r5, [pc, #172]	; (202c0 <z_init_static_threads+0xb4>)
{
   20214:	b086      	sub	sp, #24
   20216:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   20218:	42b5      	cmp	r5, r6
   2021a:	f105 0430 	add.w	r4, r5, #48	; 0x30
   2021e:	d310      	bcc.n	20242 <z_init_static_threads+0x36>
	k_sched_lock();
   20220:	f7ff fbe6 	bl	1f9f0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   20224:	4c26      	ldr	r4, [pc, #152]	; (202c0 <z_init_static_threads+0xb4>)
   20226:	f8df a09c 	ldr.w	sl, [pc, #156]	; 202c4 <z_init_static_threads+0xb8>
   2022a:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   2022e:	f240 36e7 	movw	r6, #999	; 0x3e7
   20232:	2700      	movs	r7, #0
   20234:	4544      	cmp	r4, r8
   20236:	d321      	bcc.n	2027c <z_init_static_threads+0x70>
}
   20238:	b006      	add	sp, #24
   2023a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   2023e:	f7ff bc29 	b.w	1fa94 <k_sched_unlock>
		z_setup_new_thread(
   20242:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20246:	9305      	str	r3, [sp, #20]
   20248:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2024c:	9304      	str	r3, [sp, #16]
   2024e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20252:	9303      	str	r3, [sp, #12]
   20254:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20258:	9302      	str	r3, [sp, #8]
   2025a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2025e:	9301      	str	r3, [sp, #4]
   20260:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20264:	9300      	str	r3, [sp, #0]
   20266:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2026a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2026e:	f7ff ff71 	bl	20154 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20272:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20276:	65dd      	str	r5, [r3, #92]	; 0x5c
   20278:	4625      	mov	r5, r4
   2027a:	e7cd      	b.n	20218 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2027c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2027e:	1c5a      	adds	r2, r3, #1
   20280:	d00d      	beq.n	2029e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   20282:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20286:	4630      	mov	r0, r6
   20288:	4639      	mov	r1, r7
   2028a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2028e:	42b9      	cmp	r1, r7
   20290:	bf08      	it	eq
   20292:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   20294:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20296:	d104      	bne.n	202a2 <z_init_static_threads+0x96>
	z_sched_start(thread);
   20298:	4628      	mov	r0, r5
   2029a:	f7ff fc4f 	bl	1fb3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2029e:	3430      	adds	r4, #48	; 0x30
   202a0:	e7c8      	b.n	20234 <z_init_static_threads+0x28>
   202a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   202a6:	2300      	movs	r3, #0
   202a8:	f7df ff6a 	bl	180 <__aeabi_uldivmod>
   202ac:	4602      	mov	r2, r0
   202ae:	460b      	mov	r3, r1
   202b0:	f105 0018 	add.w	r0, r5, #24
   202b4:	4651      	mov	r1, sl
   202b6:	f000 f8eb 	bl	20490 <z_add_timeout>
   202ba:	e7f0      	b.n	2029e <z_init_static_threads+0x92>
   202bc:	20000b00 	.word	0x20000b00
   202c0:	20000b00 	.word	0x20000b00
   202c4:	0002b0d9 	.word	0x0002b0d9

000202c8 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   202c8:	b508      	push	{r3, lr}
	__asm__ volatile(
   202ca:	f04f 0320 	mov.w	r3, #32
   202ce:	f3ef 8411 	mrs	r4, BASEPRI
   202d2:	f383 8811 	msr	BASEPRI, r3
   202d6:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   202da:	4b04      	ldr	r3, [pc, #16]	; (202ec <z_self_abort+0x24>)
   202dc:	6898      	ldr	r0, [r3, #8]
   202de:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   202e0:	f7ff fcc6 	bl	1fc70 <z_impl_k_thread_suspend>
   202e4:	4620      	mov	r0, r4
   202e6:	f7e4 f83b 	bl	4360 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   202ea:	bf00      	nop
   202ec:	20004044 	.word	0x20004044

000202f0 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   202f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   202f4:	4604      	mov	r4, r0
   202f6:	b088      	sub	sp, #32
   202f8:	460d      	mov	r5, r1
   202fa:	4616      	mov	r6, r2
   202fc:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   202fe:	f00a fe13 	bl	2af28 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   20302:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   20306:	2200      	movs	r2, #0
   20308:	2300      	movs	r3, #0
   2030a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2030e:	e9cd 7203 	strd	r7, r2, [sp, #12]
   20312:	e9cd 2201 	strd	r2, r2, [sp, #4]
   20316:	4b07      	ldr	r3, [pc, #28]	; (20334 <k_work_q_start+0x44>)
   20318:	9400      	str	r4, [sp, #0]
   2031a:	4632      	mov	r2, r6
   2031c:	4629      	mov	r1, r5
   2031e:	4640      	mov	r0, r8
   20320:	f7ff ff48 	bl	201b4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   20324:	4904      	ldr	r1, [pc, #16]	; (20338 <k_work_q_start+0x48>)
   20326:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   20328:	b008      	add	sp, #32
   2032a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2032e:	f00a bf6d 	b.w	2b20c <z_impl_k_thread_name_set>
   20332:	bf00      	nop
   20334:	00022fbf 	.word	0x00022fbf
   20338:	00039331 	.word	0x00039331

0002033c <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   2033c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20340:	4606      	mov	r6, r0
   20342:	460d      	mov	r5, r1
   20344:	4690      	mov	r8, r2
   20346:	4699      	mov	r9, r3
   20348:	f04f 0320 	mov.w	r3, #32
   2034c:	f3ef 8711 	mrs	r7, BASEPRI
   20350:	f383 8811 	msr	BASEPRI, r3
   20354:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   20358:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   2035a:	b17b      	cbz	r3, 2037c <k_delayed_work_submit_to_queue+0x40>
   2035c:	4283      	cmp	r3, r0
   2035e:	d128      	bne.n	203b2 <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   20360:	4628      	mov	r0, r5
   20362:	f00a ff75 	bl	2b250 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   20366:	f110 0f78 	cmn.w	r0, #120	; 0x78
		err = work_cancel(work);
   2036a:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   2036c:	d008      	beq.n	20380 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   2036e:	2800      	cmp	r0, #0
   20370:	da07      	bge.n	20382 <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   20372:	f387 8811 	msr	BASEPRI, r7
   20376:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   2037a:	e00f      	b.n	2039c <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   2037c:	2800      	cmp	r0, #0
   2037e:	d0ef      	beq.n	20360 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   20380:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20382:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   20386:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20388:	d10b      	bne.n	203a2 <k_delayed_work_submit_to_queue+0x66>
   2038a:	f387 8811 	msr	BASEPRI, r7
   2038e:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   20392:	4629      	mov	r1, r5
   20394:	4630      	mov	r0, r6
   20396:	f00a ff3e 	bl	2b216 <k_work_submit_to_queue>
		return 0;
   2039a:	2400      	movs	r4, #0
}
   2039c:	4620      	mov	r0, r4
   2039e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   203a2:	4905      	ldr	r1, [pc, #20]	; (203b8 <k_delayed_work_submit_to_queue+0x7c>)
   203a4:	4642      	mov	r2, r8
   203a6:	464b      	mov	r3, r9
   203a8:	f105 0010 	add.w	r0, r5, #16
   203ac:	f000 f870 	bl	20490 <z_add_timeout>
   203b0:	e7df      	b.n	20372 <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   203b2:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   203b6:	e7dc      	b.n	20372 <k_delayed_work_submit_to_queue+0x36>
   203b8:	0002b247 	.word	0x0002b247

000203bc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   203bc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   203be:	4806      	ldr	r0, [pc, #24]	; (203d8 <z_data_copy+0x1c>)
   203c0:	4a06      	ldr	r2, [pc, #24]	; (203dc <z_data_copy+0x20>)
   203c2:	4907      	ldr	r1, [pc, #28]	; (203e0 <z_data_copy+0x24>)
   203c4:	1a12      	subs	r2, r2, r0
   203c6:	f00b f9c8 	bl	2b75a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   203ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   203ce:	4a05      	ldr	r2, [pc, #20]	; (203e4 <z_data_copy+0x28>)
   203d0:	4905      	ldr	r1, [pc, #20]	; (203e8 <z_data_copy+0x2c>)
   203d2:	4806      	ldr	r0, [pc, #24]	; (203ec <z_data_copy+0x30>)
   203d4:	f00b b9c1 	b.w	2b75a <memcpy>
   203d8:	20000000 	.word	0x20000000
   203dc:	20000d58 	.word	0x20000d58
   203e0:	00039644 	.word	0x00039644
   203e4:	00000000 	.word	0x00000000
   203e8:	00039644 	.word	0x00039644
   203ec:	20000000 	.word	0x20000000

000203f0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   203f0:	4b03      	ldr	r3, [pc, #12]	; (20400 <elapsed+0x10>)
   203f2:	681b      	ldr	r3, [r3, #0]
   203f4:	b90b      	cbnz	r3, 203fa <elapsed+0xa>
   203f6:	f7e3 be3d 	b.w	4074 <z_clock_elapsed>
}
   203fa:	2000      	movs	r0, #0
   203fc:	4770      	bx	lr
   203fe:	bf00      	nop
   20400:	20004084 	.word	0x20004084

00020404 <remove_timeout>:
{
   20404:	b530      	push	{r4, r5, lr}
   20406:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   20408:	b168      	cbz	r0, 20426 <remove_timeout+0x22>
   2040a:	4a0a      	ldr	r2, [pc, #40]	; (20434 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   2040c:	6852      	ldr	r2, [r2, #4]
   2040e:	4290      	cmp	r0, r2
   20410:	d009      	beq.n	20426 <remove_timeout+0x22>
	if (next(t) != NULL) {
   20412:	b143      	cbz	r3, 20426 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   20414:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   20418:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2041c:	1912      	adds	r2, r2, r4
   2041e:	eb45 0101 	adc.w	r1, r5, r1
   20422:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   20426:	6842      	ldr	r2, [r0, #4]
   20428:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2042a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2042c:	2300      	movs	r3, #0
	node->prev = NULL;
   2042e:	e9c0 3300 	strd	r3, r3, [r0]
}
   20432:	bd30      	pop	{r4, r5, pc}
   20434:	20000818 	.word	0x20000818

00020438 <next_timeout>:

static int32_t next_timeout(void)
{
   20438:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   2043a:	4b13      	ldr	r3, [pc, #76]	; (20488 <next_timeout+0x50>)
   2043c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2043e:	429c      	cmp	r4, r3
   20440:	bf08      	it	eq
   20442:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20444:	f7ff ffd4 	bl	203f0 <elapsed>
   20448:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   2044a:	b1bc      	cbz	r4, 2047c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2044c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   20450:	1b40      	subs	r0, r0, r5
   20452:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   20456:	2801      	cmp	r0, #1
   20458:	f171 0300 	sbcs.w	r3, r1, #0
   2045c:	db11      	blt.n	20482 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2045e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   20462:	2300      	movs	r3, #0
   20464:	4282      	cmp	r2, r0
   20466:	eb73 0401 	sbcs.w	r4, r3, r1
   2046a:	da00      	bge.n	2046e <next_timeout+0x36>
   2046c:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2046e:	4b07      	ldr	r3, [pc, #28]	; (2048c <next_timeout+0x54>)
   20470:	695b      	ldr	r3, [r3, #20]
   20472:	b113      	cbz	r3, 2047a <next_timeout+0x42>
   20474:	4298      	cmp	r0, r3
   20476:	bfa8      	it	ge
   20478:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   2047a:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   2047c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   20480:	e7f5      	b.n	2046e <next_timeout+0x36>
   20482:	2000      	movs	r0, #0
   20484:	e7f3      	b.n	2046e <next_timeout+0x36>
   20486:	bf00      	nop
   20488:	20000818 	.word	0x20000818
   2048c:	20004044 	.word	0x20004044

00020490 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   20490:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20494:	9101      	str	r1, [sp, #4]
   20496:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20498:	1c4b      	adds	r3, r1, #1
   2049a:	bf08      	it	eq
   2049c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   204a0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   204a2:	d071      	beq.n	20588 <z_add_timeout+0xf8>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   204a4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   204a6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   204aa:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   204ae:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   204b2:	ebb3 0804 	subs.w	r8, r3, r4
   204b6:	eb6b 0905 	sbc.w	r9, fp, r5
   204ba:	f1b8 0f00 	cmp.w	r8, #0
   204be:	f179 0300 	sbcs.w	r3, r9, #0
   204c2:	db0f      	blt.n	204e4 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   204c4:	f7ff ff94 	bl	203f0 <elapsed>
   204c8:	4a36      	ldr	r2, [pc, #216]	; (205a4 <z_add_timeout+0x114>)
   204ca:	e9d2 1c00 	ldrd	r1, ip, [r2]
   204ce:	f06f 0301 	mvn.w	r3, #1
   204d2:	1a5b      	subs	r3, r3, r1
   204d4:	eb6b 020c 	sbc.w	r2, fp, ip
   204d8:	1b1e      	subs	r6, r3, r4
   204da:	eb62 0705 	sbc.w	r7, r2, r5
   204de:	1a34      	subs	r4, r6, r0
   204e0:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   204e4:	9b01      	ldr	r3, [sp, #4]
   204e6:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   204ea:	f04f 0320 	mov.w	r3, #32
   204ee:	f3ef 8611 	mrs	r6, BASEPRI
   204f2:	f383 8811 	msr	BASEPRI, r3
   204f6:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   204fa:	f7ff ff79 	bl	203f0 <elapsed>
	ticks = MAX(1, ticks);
   204fe:	2c01      	cmp	r4, #1
   20500:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   20504:	4b28      	ldr	r3, [pc, #160]	; (205a8 <z_add_timeout+0x118>)
   20506:	bfb8      	it	lt
   20508:	2401      	movlt	r4, #1
   2050a:	681a      	ldr	r2, [r3, #0]
   2050c:	bfb8      	it	lt
   2050e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   20510:	1824      	adds	r4, r4, r0
   20512:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20516:	429a      	cmp	r2, r3
   20518:	e9ca 4504 	strd	r4, r5, [sl, #16]
   2051c:	d001      	beq.n	20522 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2051e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20520:	b952      	cbnz	r2, 20538 <z_add_timeout+0xa8>
	node->prev = list->tail;
   20522:	685a      	ldr	r2, [r3, #4]
   20524:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   20528:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   2052a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   2052e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   20532:	f8c3 a004 	str.w	sl, [r3, #4]
}
   20536:	e014      	b.n	20562 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   20538:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   2053c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   20540:	4544      	cmp	r4, r8
   20542:	eb75 0109 	sbcs.w	r1, r5, r9
   20546:	da22      	bge.n	2058e <z_add_timeout+0xfe>
				t->dticks -= to->dticks;
   20548:	ebb8 0004 	subs.w	r0, r8, r4
   2054c:	eb69 0105 	sbc.w	r1, r9, r5
   20550:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   20554:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20556:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   2055a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   2055e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   20562:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20564:	429a      	cmp	r2, r3
   20566:	d00b      	beq.n	20580 <z_add_timeout+0xf0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   20568:	4592      	cmp	sl, r2
   2056a:	d109      	bne.n	20580 <z_add_timeout+0xf0>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2056c:	f7ff ff64 	bl	20438 <next_timeout>

			if (next_time == 0 ||
   20570:	b118      	cbz	r0, 2057a <z_add_timeout+0xea>
			    _current_cpu->slice_ticks != next_time) {
   20572:	4b0e      	ldr	r3, [pc, #56]	; (205ac <z_add_timeout+0x11c>)
			if (next_time == 0 ||
   20574:	695b      	ldr	r3, [r3, #20]
   20576:	4283      	cmp	r3, r0
   20578:	d002      	beq.n	20580 <z_add_timeout+0xf0>
				z_clock_set_timeout(next_time, false);
   2057a:	2100      	movs	r1, #0
   2057c:	f7e3 fd48 	bl	4010 <z_clock_set_timeout>
	__asm__ volatile(
   20580:	f386 8811 	msr	BASEPRI, r6
   20584:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   20588:	b003      	add	sp, #12
   2058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   2058e:	ebb4 0008 	subs.w	r0, r4, r8
   20592:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   20596:	42ba      	cmp	r2, r7
   20598:	e9ca 0104 	strd	r0, r1, [sl, #16]
   2059c:	d0c1      	beq.n	20522 <z_add_timeout+0x92>
   2059e:	6812      	ldr	r2, [r2, #0]
   205a0:	e7be      	b.n	20520 <z_add_timeout+0x90>
   205a2:	bf00      	nop
   205a4:	200014d8 	.word	0x200014d8
   205a8:	20000818 	.word	0x20000818
   205ac:	20004044 	.word	0x20004044

000205b0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   205b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205b4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   205b6:	f7ff fb19 	bl	1fbec <z_time_slice>
	__asm__ volatile(
   205ba:	f04f 0320 	mov.w	r3, #32
   205be:	f3ef 8411 	mrs	r4, BASEPRI
   205c2:	f383 8811 	msr	BASEPRI, r3
   205c6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   205ca:	4d2c      	ldr	r5, [pc, #176]	; (2067c <z_clock_announce+0xcc>)
   205cc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 20680 <z_clock_announce+0xd0>
	return list->head == list;
   205d0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 20684 <z_clock_announce+0xd4>
   205d4:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   205d6:	4651      	mov	r1, sl
   205d8:	f8d5 c000 	ldr.w	ip, [r5]
   205dc:	f8db 0000 	ldr.w	r0, [fp]
   205e0:	4662      	mov	r2, ip
   205e2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205e4:	4558      	cmp	r0, fp
   205e6:	e9da 8900 	ldrd	r8, r9, [sl]
   205ea:	e9cd 2300 	strd	r2, r3, [sp]
   205ee:	d00d      	beq.n	2060c <z_clock_announce+0x5c>
   205f0:	b160      	cbz	r0, 2060c <z_clock_announce+0x5c>
   205f2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   205f6:	45b4      	cmp	ip, r6
   205f8:	41bb      	sbcs	r3, r7
   205fa:	da1e      	bge.n	2063a <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   205fc:	9b00      	ldr	r3, [sp, #0]
   205fe:	ebb6 0c03 	subs.w	ip, r6, r3
   20602:	9b01      	ldr	r3, [sp, #4]
   20604:	eb67 0603 	sbc.w	r6, r7, r3
   20608:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   2060c:	9b00      	ldr	r3, [sp, #0]
   2060e:	eb13 0208 	adds.w	r2, r3, r8
   20612:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   20614:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   20618:	eb43 0309 	adc.w	r3, r3, r9
   2061c:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   20620:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   20622:	f7ff ff09 	bl	20438 <next_timeout>
   20626:	4631      	mov	r1, r6
   20628:	f7e3 fcf2 	bl	4010 <z_clock_set_timeout>
	__asm__ volatile(
   2062c:	f384 8811 	msr	BASEPRI, r4
   20630:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20634:	b003      	add	sp, #12
   20636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   2063a:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   2063e:	f04f 0200 	mov.w	r2, #0
   20642:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   20646:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   2064a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   2064e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   20652:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   20656:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   20658:	f7ff fed4 	bl	20404 <remove_timeout>
   2065c:	f384 8811 	msr	BASEPRI, r4
   20660:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20664:	6883      	ldr	r3, [r0, #8]
   20666:	4798      	blx	r3
	__asm__ volatile(
   20668:	f04f 0320 	mov.w	r3, #32
   2066c:	f3ef 8411 	mrs	r4, BASEPRI
   20670:	f383 8811 	msr	BASEPRI, r3
   20674:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   20678:	4901      	ldr	r1, [pc, #4]	; (20680 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   2067a:	e7ad      	b.n	205d8 <z_clock_announce+0x28>
   2067c:	20004084 	.word	0x20004084
   20680:	200014d8 	.word	0x200014d8
   20684:	20000818 	.word	0x20000818

00020688 <z_tick_get>:

int64_t z_tick_get(void)
{
   20688:	b510      	push	{r4, lr}
   2068a:	f04f 0320 	mov.w	r3, #32
   2068e:	f3ef 8411 	mrs	r4, BASEPRI
   20692:	f383 8811 	msr	BASEPRI, r3
   20696:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   2069a:	f7e3 fceb 	bl	4074 <z_clock_elapsed>
   2069e:	4b06      	ldr	r3, [pc, #24]	; (206b8 <z_tick_get+0x30>)
   206a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   206a4:	1812      	adds	r2, r2, r0
   206a6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   206aa:	f384 8811 	msr	BASEPRI, r4
   206ae:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   206b2:	4610      	mov	r0, r2
   206b4:	4619      	mov	r1, r3
   206b6:	bd10      	pop	{r4, pc}
   206b8:	200014d8 	.word	0x200014d8

000206bc <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   206bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   206be:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   206c2:	1c56      	adds	r6, r2, #1
   206c4:	f143 0700 	adc.w	r7, r3, #0
   206c8:	2f00      	cmp	r7, #0
   206ca:	bf08      	it	eq
   206cc:	2e02      	cmpeq	r6, #2
{
   206ce:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   206d0:	d302      	bcc.n	206d8 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   206d2:	490c      	ldr	r1, [pc, #48]	; (20704 <z_timer_expiration_handler+0x48>)
   206d4:	f7ff fedc 	bl	20490 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   206d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   206da:	3301      	adds	r3, #1
   206dc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   206de:	6a23      	ldr	r3, [r4, #32]
   206e0:	b10b      	cbz	r3, 206e6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   206e2:	4620      	mov	r0, r4
   206e4:	4798      	blx	r3
	return list->head == list;
   206e6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206ea:	42a5      	cmp	r5, r4
   206ec:	d009      	beq.n	20702 <z_timer_expiration_handler+0x46>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   206ee:	b145      	cbz	r5, 20702 <z_timer_expiration_handler+0x46>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   206f0:	4628      	mov	r0, r5
   206f2:	f00a fc8f 	bl	2b014 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   206f6:	4628      	mov	r0, r5
   206f8:	f00a fcde 	bl	2b0b8 <z_ready_thread>
   206fc:	2300      	movs	r3, #0
   206fe:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   20702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20704:	000206bd 	.word	0x000206bd

00020708 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20708:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   2070c:	4619      	mov	r1, r3
   2070e:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20710:	1c4c      	adds	r4, r1, #1
{
   20712:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20714:	bf08      	it	eq
   20716:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2071a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   2071e:	4680      	mov	r8, r0
   20720:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20722:	d047      	beq.n	207b4 <z_impl_k_timer_start+0xac>
   20724:	4614      	mov	r4, r2
   20726:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20728:	ea54 0305 	orrs.w	r3, r4, r5
   2072c:	d016      	beq.n	2075c <z_impl_k_timer_start+0x54>
   2072e:	f06f 0301 	mvn.w	r3, #1
   20732:	ebb3 0a02 	subs.w	sl, r3, r2
   20736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2073a:	eb63 0b05 	sbc.w	fp, r3, r5
   2073e:	f1ba 0f00 	cmp.w	sl, #0
   20742:	f17b 0300 	sbcs.w	r3, fp, #0
   20746:	da09      	bge.n	2075c <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   20748:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   2074c:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   20750:	2c01      	cmp	r4, #1
   20752:	f175 0300 	sbcs.w	r3, r5, #0
   20756:	bfbc      	itt	lt
   20758:	2401      	movlt	r4, #1
   2075a:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2075c:	f06f 0301 	mvn.w	r3, #1
   20760:	1a1b      	subs	r3, r3, r0
   20762:	9300      	str	r3, [sp, #0]
   20764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20768:	eb63 0301 	sbc.w	r3, r3, r1
   2076c:	9301      	str	r3, [sp, #4]
   2076e:	e9dd 2300 	ldrd	r2, r3, [sp]
   20772:	2a00      	cmp	r2, #0
   20774:	f173 0300 	sbcs.w	r3, r3, #0
   20778:	da0c      	bge.n	20794 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2077a:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   2077e:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   20782:	f1b8 0f00 	cmp.w	r8, #0
   20786:	f179 0300 	sbcs.w	r3, r9, #0
   2078a:	bfbc      	itt	lt
   2078c:	f04f 0800 	movlt.w	r8, #0
   20790:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   20794:	4630      	mov	r0, r6
   20796:	f00a fdb7 	bl	2b308 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2079a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2079c:	4907      	ldr	r1, [pc, #28]	; (207bc <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   2079e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   207a0:	4642      	mov	r2, r8
   207a2:	464b      	mov	r3, r9
   207a4:	4630      	mov	r0, r6
	timer->period = period;
   207a6:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   207aa:	b002      	add	sp, #8
   207ac:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   207b0:	f7ff be6e 	b.w	20490 <z_add_timeout>
}
   207b4:	b002      	add	sp, #8
   207b6:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   207ba:	bf00      	nop
   207bc:	000206bd 	.word	0x000206bd

000207c0 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   207c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   207c4:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   207c6:	4b2a      	ldr	r3, [pc, #168]	; (20870 <z_impl_k_poll+0xb0>)
   207c8:	689d      	ldr	r5, [r3, #8]

	poller->is_polling = true;
   207ca:	2301      	movs	r3, #1
   207cc:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	poller->mode = MODE_POLL;
   207d0:	f885 3065 	strb.w	r3, [r5, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   207d4:	ea52 0307 	orrs.w	r3, r2, r7
{
   207d8:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   207da:	bf0c      	ite	eq
   207dc:	2301      	moveq	r3, #1
   207de:	2300      	movne	r3, #0
   207e0:	f105 0264 	add.w	r2, r5, #100	; 0x64
{
   207e4:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   207e6:	f00a ff11 	bl	2b60c <register_events>
   207ea:	4681      	mov	r9, r0
	__asm__ volatile(
   207ec:	f04f 0320 	mov.w	r3, #32
   207f0:	f3ef 8a11 	mrs	sl, BASEPRI
   207f4:	f383 8811 	msr	BASEPRI, r3
   207f8:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   207fc:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
   20800:	b964      	cbnz	r4, 2081c <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   20802:	4601      	mov	r1, r0
   20804:	4652      	mov	r2, sl
   20806:	4640      	mov	r0, r8
   20808:	f00a fe2c 	bl	2b464 <clear_event_registrations>
	__asm__ volatile(
   2080c:	f38a 8811 	msr	BASEPRI, sl
   20810:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   20814:	4620      	mov	r0, r4
   20816:	b004      	add	sp, #16
   20818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   2081c:	2300      	movs	r3, #0
   2081e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20822:	ea56 0307 	orrs.w	r3, r6, r7
   20826:	d106      	bne.n	20836 <z_impl_k_poll+0x76>
   20828:	f38a 8811 	msr	BASEPRI, sl
   2082c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20830:	f06f 040a 	mvn.w	r4, #10
   20834:	e7ee      	b.n	20814 <z_impl_k_poll+0x54>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20836:	aa02      	add	r2, sp, #8
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20838:	e9cd 6700 	strd	r6, r7, [sp]
   2083c:	4651      	mov	r1, sl
   2083e:	480d      	ldr	r0, [pc, #52]	; (20874 <z_impl_k_poll+0xb4>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   20840:	e9cd 2202 	strd	r2, r2, [sp, #8]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20844:	f7ff fb0a 	bl	1fe5c <z_pend_curr>
   20848:	4604      	mov	r4, r0
	__asm__ volatile(
   2084a:	f04f 0320 	mov.w	r3, #32
   2084e:	f3ef 8511 	mrs	r5, BASEPRI
   20852:	f383 8811 	msr	BASEPRI, r3
   20856:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   2085a:	462a      	mov	r2, r5
   2085c:	4649      	mov	r1, r9
   2085e:	4640      	mov	r0, r8
   20860:	f00a fe00 	bl	2b464 <clear_event_registrations>
	__asm__ volatile(
   20864:	f385 8811 	msr	BASEPRI, r5
   20868:	f3bf 8f6f 	isb	sy
	return swap_rc;
   2086c:	e7d2      	b.n	20814 <z_impl_k_poll+0x54>
   2086e:	bf00      	nop
   20870:	20004044 	.word	0x20004044
   20874:	20008736 	.word	0x20008736

00020878 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   20878:	b538      	push	{r3, r4, r5, lr}
   2087a:	4603      	mov	r3, r0
	__asm__ volatile(
   2087c:	f04f 0220 	mov.w	r2, #32
   20880:	f3ef 8511 	mrs	r5, BASEPRI
   20884:	f382 8811 	msr	BASEPRI, r2
   20888:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   2088c:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   2088e:	2101      	movs	r1, #1
   20890:	6081      	str	r1, [r0, #8]
	return list->head == list;
   20892:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   20894:	4283      	cmp	r3, r0
   20896:	d106      	bne.n	208a6 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20898:	f385 8811 	msr	BASEPRI, r5
   2089c:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   208a0:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   208a2:	4620      	mov	r0, r4
   208a4:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   208a6:	e9d0 3200 	ldrd	r3, r2, [r0]
   208aa:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   208ac:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   208ae:	2300      	movs	r3, #0
	node->prev = NULL;
   208b0:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   208b4:	f00a fe19 	bl	2b4ea <signal_poll_event>
	z_reschedule(&lock, key);
   208b8:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   208ba:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   208bc:	4801      	ldr	r0, [pc, #4]	; (208c4 <z_impl_k_poll_signal_raise+0x4c>)
   208be:	f7ff f885 	bl	1f9cc <z_reschedule>
	return rc;
   208c2:	e7ee      	b.n	208a2 <z_impl_k_poll_signal_raise+0x2a>
   208c4:	20008736 	.word	0x20008736

000208c8 <k_aligned_alloc>:

K_HEAP_DEFINE(_system_heap, CONFIG_HEAP_MEM_POOL_SIZE);
#define _SYSTEM_HEAP (&_system_heap)

void *k_aligned_alloc(size_t align, size_t size)
{
   208c8:	460a      	mov	r2, r1
		"align must be a multiple of sizeof(void *)");

	__ASSERT((align & (align - 1)) == 0,
		"align must be a power of 2");

	return z_heap_aligned_alloc(_SYSTEM_HEAP, align, size);
   208ca:	4601      	mov	r1, r0
   208cc:	4801      	ldr	r0, [pc, #4]	; (208d4 <k_aligned_alloc+0xc>)
   208ce:	f00a bf1b 	b.w	2b708 <z_heap_aligned_alloc>
   208d2:	bf00      	nop
   208d4:	20000b8c 	.word	0x20000b8c

000208d8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   208d8:	b538      	push	{r3, r4, r5, lr}
   208da:	4604      	mov	r4, r0
   208dc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   208de:	f00a fc8b 	bl	2b1f8 <k_is_in_isr>
   208e2:	b950      	cbnz	r0, 208fa <z_thread_aligned_alloc+0x22>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   208e4:	4b06      	ldr	r3, [pc, #24]	; (20900 <z_thread_aligned_alloc+0x28>)
   208e6:	689b      	ldr	r3, [r3, #8]
   208e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	}

	if (heap) {
   208ea:	b143      	cbz	r3, 208fe <z_thread_aligned_alloc+0x26>
		ret = z_heap_aligned_alloc(heap, align, size);
   208ec:	462a      	mov	r2, r5
   208ee:	4621      	mov	r1, r4
   208f0:	4618      	mov	r0, r3
	} else {
		ret = NULL;
	}

	return ret;
}
   208f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		ret = z_heap_aligned_alloc(heap, align, size);
   208f6:	f00a bf07 	b.w	2b708 <z_heap_aligned_alloc>
		heap = _SYSTEM_HEAP;
   208fa:	4b02      	ldr	r3, [pc, #8]	; (20904 <z_thread_aligned_alloc+0x2c>)
   208fc:	e7f6      	b.n	208ec <z_thread_aligned_alloc+0x14>
}
   208fe:	bd38      	pop	{r3, r4, r5, pc}
   20900:	20004044 	.word	0x20004044
   20904:	20000b8c 	.word	0x20000b8c

00020908 <validate_structure>:
   20908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2090a:	6801      	ldr	r1, [r0, #0]
   2090c:	293b      	cmp	r1, #59	; 0x3b
   2090e:	4604      	mov	r4, r0
   20910:	d911      	bls.n	20936 <validate_structure+0x2e>
   20912:	223c      	movs	r2, #60	; 0x3c
   20914:	4668      	mov	r0, sp
   20916:	f00a ffce 	bl	2b8b6 <div>
   2091a:	9a01      	ldr	r2, [sp, #4]
   2091c:	6863      	ldr	r3, [r4, #4]
   2091e:	9900      	ldr	r1, [sp, #0]
   20920:	2a00      	cmp	r2, #0
   20922:	440b      	add	r3, r1
   20924:	6063      	str	r3, [r4, #4]
   20926:	bfbb      	ittet	lt
   20928:	323c      	addlt	r2, #60	; 0x3c
   2092a:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   2092e:	6022      	strge	r2, [r4, #0]
   20930:	6022      	strlt	r2, [r4, #0]
   20932:	bfb8      	it	lt
   20934:	6063      	strlt	r3, [r4, #4]
   20936:	6861      	ldr	r1, [r4, #4]
   20938:	293b      	cmp	r1, #59	; 0x3b
   2093a:	d911      	bls.n	20960 <validate_structure+0x58>
   2093c:	223c      	movs	r2, #60	; 0x3c
   2093e:	4668      	mov	r0, sp
   20940:	f00a ffb9 	bl	2b8b6 <div>
   20944:	9a01      	ldr	r2, [sp, #4]
   20946:	68a3      	ldr	r3, [r4, #8]
   20948:	9900      	ldr	r1, [sp, #0]
   2094a:	2a00      	cmp	r2, #0
   2094c:	440b      	add	r3, r1
   2094e:	60a3      	str	r3, [r4, #8]
   20950:	bfbb      	ittet	lt
   20952:	323c      	addlt	r2, #60	; 0x3c
   20954:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20958:	6062      	strge	r2, [r4, #4]
   2095a:	6062      	strlt	r2, [r4, #4]
   2095c:	bfb8      	it	lt
   2095e:	60a3      	strlt	r3, [r4, #8]
   20960:	68a1      	ldr	r1, [r4, #8]
   20962:	2917      	cmp	r1, #23
   20964:	d911      	bls.n	2098a <validate_structure+0x82>
   20966:	2218      	movs	r2, #24
   20968:	4668      	mov	r0, sp
   2096a:	f00a ffa4 	bl	2b8b6 <div>
   2096e:	9a01      	ldr	r2, [sp, #4]
   20970:	68e3      	ldr	r3, [r4, #12]
   20972:	9900      	ldr	r1, [sp, #0]
   20974:	2a00      	cmp	r2, #0
   20976:	440b      	add	r3, r1
   20978:	60e3      	str	r3, [r4, #12]
   2097a:	bfbb      	ittet	lt
   2097c:	3218      	addlt	r2, #24
   2097e:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   20982:	60a2      	strge	r2, [r4, #8]
   20984:	60a2      	strlt	r2, [r4, #8]
   20986:	bfb8      	it	lt
   20988:	60e3      	strlt	r3, [r4, #12]
   2098a:	6921      	ldr	r1, [r4, #16]
   2098c:	290b      	cmp	r1, #11
   2098e:	d911      	bls.n	209b4 <validate_structure+0xac>
   20990:	220c      	movs	r2, #12
   20992:	4668      	mov	r0, sp
   20994:	f00a ff8f 	bl	2b8b6 <div>
   20998:	9a01      	ldr	r2, [sp, #4]
   2099a:	6963      	ldr	r3, [r4, #20]
   2099c:	9900      	ldr	r1, [sp, #0]
   2099e:	2a00      	cmp	r2, #0
   209a0:	440b      	add	r3, r1
   209a2:	6163      	str	r3, [r4, #20]
   209a4:	bfbb      	ittet	lt
   209a6:	320c      	addlt	r2, #12
   209a8:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   209ac:	6122      	strge	r2, [r4, #16]
   209ae:	6122      	strlt	r2, [r4, #16]
   209b0:	bfb8      	it	lt
   209b2:	6163      	strlt	r3, [r4, #20]
   209b4:	6963      	ldr	r3, [r4, #20]
   209b6:	0799      	lsls	r1, r3, #30
   209b8:	d120      	bne.n	209fc <validate_structure+0xf4>
   209ba:	2164      	movs	r1, #100	; 0x64
   209bc:	fb93 f2f1 	sdiv	r2, r3, r1
   209c0:	fb01 3212 	mls	r2, r1, r2, r3
   209c4:	b9e2      	cbnz	r2, 20a00 <validate_structure+0xf8>
   209c6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   209ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
   209ce:	fb93 f2f1 	sdiv	r2, r3, r1
   209d2:	fb01 3312 	mls	r3, r1, r2, r3
   209d6:	2b00      	cmp	r3, #0
   209d8:	bf14      	ite	ne
   209da:	231c      	movne	r3, #28
   209dc:	231d      	moveq	r3, #29
   209de:	68e2      	ldr	r2, [r4, #12]
   209e0:	2a00      	cmp	r2, #0
   209e2:	dc0f      	bgt.n	20a04 <validate_structure+0xfc>
   209e4:	4f33      	ldr	r7, [pc, #204]	; (20ab4 <validate_structure+0x1ac>)
   209e6:	260b      	movs	r6, #11
   209e8:	2064      	movs	r0, #100	; 0x64
   209ea:	f44f 75c8 	mov.w	r5, #400	; 0x190
   209ee:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   209f2:	f1bc 0f00 	cmp.w	ip, #0
   209f6:	dd31      	ble.n	20a5c <validate_structure+0x154>
   209f8:	b003      	add	sp, #12
   209fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   209fc:	231c      	movs	r3, #28
   209fe:	e7ee      	b.n	209de <validate_structure+0xd6>
   20a00:	231d      	movs	r3, #29
   20a02:	e7ec      	b.n	209de <validate_structure+0xd6>
   20a04:	4f2b      	ldr	r7, [pc, #172]	; (20ab4 <validate_structure+0x1ac>)
   20a06:	f04f 0c00 	mov.w	ip, #0
   20a0a:	2564      	movs	r5, #100	; 0x64
   20a0c:	f44f 76c8 	mov.w	r6, #400	; 0x190
   20a10:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
   20a14:	2a01      	cmp	r2, #1
   20a16:	bf14      	ite	ne
   20a18:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
   20a1c:	4618      	moveq	r0, r3
   20a1e:	4281      	cmp	r1, r0
   20a20:	ddea      	ble.n	209f8 <validate_structure+0xf0>
   20a22:	3201      	adds	r2, #1
   20a24:	1a09      	subs	r1, r1, r0
   20a26:	2a0c      	cmp	r2, #12
   20a28:	60e1      	str	r1, [r4, #12]
   20a2a:	6122      	str	r2, [r4, #16]
   20a2c:	d1f0      	bne.n	20a10 <validate_structure+0x108>
   20a2e:	6963      	ldr	r3, [r4, #20]
   20a30:	1c5a      	adds	r2, r3, #1
   20a32:	0791      	lsls	r1, r2, #30
   20a34:	e9c4 c204 	strd	ip, r2, [r4, #16]
   20a38:	d137      	bne.n	20aaa <validate_structure+0x1a2>
   20a3a:	fb92 f1f5 	sdiv	r1, r2, r5
   20a3e:	fb05 2211 	mls	r2, r5, r1, r2
   20a42:	2a00      	cmp	r2, #0
   20a44:	d133      	bne.n	20aae <validate_structure+0x1a6>
   20a46:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   20a4a:	fb93 f2f6 	sdiv	r2, r3, r6
   20a4e:	fb06 3312 	mls	r3, r6, r2, r3
   20a52:	2b00      	cmp	r3, #0
   20a54:	bf14      	ite	ne
   20a56:	231c      	movne	r3, #28
   20a58:	231d      	moveq	r3, #29
   20a5a:	e7d9      	b.n	20a10 <validate_structure+0x108>
   20a5c:	6921      	ldr	r1, [r4, #16]
   20a5e:	3901      	subs	r1, #1
   20a60:	6121      	str	r1, [r4, #16]
   20a62:	3101      	adds	r1, #1
   20a64:	d114      	bne.n	20a90 <validate_structure+0x188>
   20a66:	6963      	ldr	r3, [r4, #20]
   20a68:	1e59      	subs	r1, r3, #1
   20a6a:	078a      	lsls	r2, r1, #30
   20a6c:	e9c4 6104 	strd	r6, r1, [r4, #16]
   20a70:	d117      	bne.n	20aa2 <validate_structure+0x19a>
   20a72:	fb91 f2f0 	sdiv	r2, r1, r0
   20a76:	fb00 1112 	mls	r1, r0, r2, r1
   20a7a:	b9a1      	cbnz	r1, 20aa6 <validate_structure+0x19e>
   20a7c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   20a80:	fb93 f2f5 	sdiv	r2, r3, r5
   20a84:	fb05 3312 	mls	r3, r5, r2, r3
   20a88:	2b00      	cmp	r3, #0
   20a8a:	bf14      	ite	ne
   20a8c:	231c      	movne	r3, #28
   20a8e:	231d      	moveq	r3, #29
   20a90:	6922      	ldr	r2, [r4, #16]
   20a92:	2a01      	cmp	r2, #1
   20a94:	bf14      	ite	ne
   20a96:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   20a9a:	461a      	moveq	r2, r3
   20a9c:	4462      	add	r2, ip
   20a9e:	60e2      	str	r2, [r4, #12]
   20aa0:	e7a5      	b.n	209ee <validate_structure+0xe6>
   20aa2:	231c      	movs	r3, #28
   20aa4:	e7f4      	b.n	20a90 <validate_structure+0x188>
   20aa6:	231d      	movs	r3, #29
   20aa8:	e7f2      	b.n	20a90 <validate_structure+0x188>
   20aaa:	231c      	movs	r3, #28
   20aac:	e7b0      	b.n	20a10 <validate_structure+0x108>
   20aae:	231d      	movs	r3, #29
   20ab0:	e7ae      	b.n	20a10 <validate_structure+0x108>
   20ab2:	bf00      	nop
   20ab4:	0002d97c 	.word	0x0002d97c

00020ab8 <mktime>:
   20ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20abc:	b08b      	sub	sp, #44	; 0x2c
   20abe:	4605      	mov	r5, r0
   20ac0:	f001 facc 	bl	2205c <__gettzinfo>
   20ac4:	4607      	mov	r7, r0
   20ac6:	4628      	mov	r0, r5
   20ac8:	f7ff ff1e 	bl	20908 <validate_structure>
   20acc:	e9d5 2300 	ldrd	r2, r3, [r5]
   20ad0:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
   20ad4:	68a8      	ldr	r0, [r5, #8]
   20ad6:	696e      	ldr	r6, [r5, #20]
   20ad8:	fb0a 2303 	mla	r3, sl, r3, r2
   20adc:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
   20ae0:	fb0a 3a00 	mla	sl, sl, r0, r3
   20ae4:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
   20ae8:	4abb      	ldr	r2, [pc, #748]	; (20dd8 <mktime+0x320>)
   20aea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   20aee:	3c01      	subs	r4, #1
   20af0:	2b01      	cmp	r3, #1
   20af2:	4414      	add	r4, r2
   20af4:	dd11      	ble.n	20b1a <mktime+0x62>
   20af6:	07b1      	lsls	r1, r6, #30
   20af8:	d10f      	bne.n	20b1a <mktime+0x62>
   20afa:	2264      	movs	r2, #100	; 0x64
   20afc:	fb96 f3f2 	sdiv	r3, r6, r2
   20b00:	fb02 6313 	mls	r3, r2, r3, r6
   20b04:	b943      	cbnz	r3, 20b18 <mktime+0x60>
   20b06:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   20b0a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20b0e:	fb91 f3f2 	sdiv	r3, r1, r2
   20b12:	fb02 1313 	mls	r3, r2, r3, r1
   20b16:	b903      	cbnz	r3, 20b1a <mktime+0x62>
   20b18:	3401      	adds	r4, #1
   20b1a:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
   20b1e:	3310      	adds	r3, #16
   20b20:	f644 6220 	movw	r2, #20000	; 0x4e20
   20b24:	4293      	cmp	r3, r2
   20b26:	61ec      	str	r4, [r5, #28]
   20b28:	f200 8162 	bhi.w	20df0 <mktime+0x338>
   20b2c:	2e46      	cmp	r6, #70	; 0x46
   20b2e:	dd75      	ble.n	20c1c <mktime+0x164>
   20b30:	2346      	movs	r3, #70	; 0x46
   20b32:	f240 1e6d 	movw	lr, #365	; 0x16d
   20b36:	2164      	movs	r1, #100	; 0x64
   20b38:	f44f 70c8 	mov.w	r0, #400	; 0x190
   20b3c:	079a      	lsls	r2, r3, #30
   20b3e:	d167      	bne.n	20c10 <mktime+0x158>
   20b40:	fb93 f2f1 	sdiv	r2, r3, r1
   20b44:	fb01 3212 	mls	r2, r1, r2, r3
   20b48:	2a00      	cmp	r2, #0
   20b4a:	d164      	bne.n	20c16 <mktime+0x15e>
   20b4c:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   20b50:	fb9c f2f0 	sdiv	r2, ip, r0
   20b54:	fb00 c212 	mls	r2, r0, r2, ip
   20b58:	2a00      	cmp	r2, #0
   20b5a:	bf14      	ite	ne
   20b5c:	4672      	movne	r2, lr
   20b5e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   20b62:	3301      	adds	r3, #1
   20b64:	429e      	cmp	r6, r3
   20b66:	4414      	add	r4, r2
   20b68:	d1e8      	bne.n	20b3c <mktime+0x84>
   20b6a:	4b9c      	ldr	r3, [pc, #624]	; (20ddc <mktime+0x324>)
   20b6c:	ea4f 7bea 	mov.w	fp, sl, asr #31
   20b70:	fbc3 ab04 	smlal	sl, fp, r3, r4
   20b74:	f00a fe6d 	bl	2b852 <_tzset_unlocked>
   20b78:	4b99      	ldr	r3, [pc, #612]	; (20de0 <mktime+0x328>)
   20b7a:	f8d3 9000 	ldr.w	r9, [r3]
   20b7e:	f1b9 0f00 	cmp.w	r9, #0
   20b82:	d03f      	beq.n	20c04 <mktime+0x14c>
   20b84:	f8d5 9020 	ldr.w	r9, [r5, #32]
   20b88:	6968      	ldr	r0, [r5, #20]
   20b8a:	687b      	ldr	r3, [r7, #4]
   20b8c:	f1b9 0f01 	cmp.w	r9, #1
   20b90:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   20b94:	46c8      	mov	r8, r9
   20b96:	bfa8      	it	ge
   20b98:	f04f 0801 	movge.w	r8, #1
   20b9c:	4283      	cmp	r3, r0
   20b9e:	d17f      	bne.n	20ca0 <mktime+0x1e8>
   20ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20ba2:	4619      	mov	r1, r3
   20ba4:	17da      	asrs	r2, r3, #31
   20ba6:	e9cd 1200 	strd	r1, r2, [sp]
   20baa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
   20bae:	e9cd 1202 	strd	r1, r2, [sp, #8]
   20bb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   20bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   20bb8:	1a80      	subs	r0, r0, r2
   20bba:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
   20bbe:	4582      	cmp	sl, r0
   20bc0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   20bc4:	eb7b 0101 	sbcs.w	r1, fp, r1
   20bc8:	da71      	bge.n	20cae <mktime+0x1f6>
   20bca:	9800      	ldr	r0, [sp, #0]
   20bcc:	6a39      	ldr	r1, [r7, #32]
   20bce:	1a09      	subs	r1, r1, r0
   20bd0:	9104      	str	r1, [sp, #16]
   20bd2:	9801      	ldr	r0, [sp, #4]
   20bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   20bd6:	eb61 0100 	sbc.w	r1, r1, r0
   20bda:	9105      	str	r1, [sp, #20]
   20bdc:	6839      	ldr	r1, [r7, #0]
   20bde:	2900      	cmp	r1, #0
   20be0:	d075      	beq.n	20cce <mktime+0x216>
   20be2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20be6:	4582      	cmp	sl, r0
   20be8:	eb7b 0101 	sbcs.w	r1, fp, r1
   20bec:	db05      	blt.n	20bfa <mktime+0x142>
   20bee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   20bf2:	4582      	cmp	sl, r0
   20bf4:	eb7b 0101 	sbcs.w	r1, fp, r1
   20bf8:	db6f      	blt.n	20cda <mktime+0x222>
   20bfa:	f1b9 0f00 	cmp.w	r9, #0
   20bfe:	f04f 0900 	mov.w	r9, #0
   20c02:	da6f      	bge.n	20ce4 <mktime+0x22c>
   20c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   20c06:	eb1a 0003 	adds.w	r0, sl, r3
   20c0a:	eb4b 71e3 	adc.w	r1, fp, r3, asr #31
   20c0e:	e0ae      	b.n	20d6e <mktime+0x2b6>
   20c10:	f240 126d 	movw	r2, #365	; 0x16d
   20c14:	e7a5      	b.n	20b62 <mktime+0xaa>
   20c16:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   20c1a:	e7a2      	b.n	20b62 <mktime+0xaa>
   20c1c:	d0a5      	beq.n	20b6a <mktime+0xb2>
   20c1e:	2345      	movs	r3, #69	; 0x45
   20c20:	f240 1e6d 	movw	lr, #365	; 0x16d
   20c24:	2164      	movs	r1, #100	; 0x64
   20c26:	f44f 70c8 	mov.w	r0, #400	; 0x190
   20c2a:	e012      	b.n	20c52 <mktime+0x19a>
   20c2c:	bb62      	cbnz	r2, 20c88 <mktime+0x1d0>
   20c2e:	fb93 f2f1 	sdiv	r2, r3, r1
   20c32:	fb01 3212 	mls	r2, r1, r2, r3
   20c36:	bb52      	cbnz	r2, 20c8e <mktime+0x1d6>
   20c38:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
   20c3c:	fb9c f2f0 	sdiv	r2, ip, r0
   20c40:	fb00 c212 	mls	r2, r0, r2, ip
   20c44:	2a00      	cmp	r2, #0
   20c46:	bf14      	ite	ne
   20c48:	4672      	movne	r2, lr
   20c4a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   20c4e:	1aa4      	subs	r4, r4, r2
   20c50:	3b01      	subs	r3, #1
   20c52:	429e      	cmp	r6, r3
   20c54:	f003 0203 	and.w	r2, r3, #3
   20c58:	dbe8      	blt.n	20c2c <mktime+0x174>
   20c5a:	b9da      	cbnz	r2, 20c94 <mktime+0x1dc>
   20c5c:	2264      	movs	r2, #100	; 0x64
   20c5e:	fb96 f3f2 	sdiv	r3, r6, r2
   20c62:	fb02 6313 	mls	r3, r2, r3, r6
   20c66:	b9c3      	cbnz	r3, 20c9a <mktime+0x1e2>
   20c68:	f206 716c 	addw	r1, r6, #1900	; 0x76c
   20c6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20c70:	fb91 f3f2 	sdiv	r3, r1, r2
   20c74:	fb02 1313 	mls	r3, r2, r3, r1
   20c78:	2b00      	cmp	r3, #0
   20c7a:	f240 136d 	movw	r3, #365	; 0x16d
   20c7e:	bf08      	it	eq
   20c80:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   20c84:	1ae4      	subs	r4, r4, r3
   20c86:	e770      	b.n	20b6a <mktime+0xb2>
   20c88:	f240 126d 	movw	r2, #365	; 0x16d
   20c8c:	e7df      	b.n	20c4e <mktime+0x196>
   20c8e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   20c92:	e7dc      	b.n	20c4e <mktime+0x196>
   20c94:	f240 136d 	movw	r3, #365	; 0x16d
   20c98:	e7f4      	b.n	20c84 <mktime+0x1cc>
   20c9a:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   20c9e:	e7f1      	b.n	20c84 <mktime+0x1cc>
   20ca0:	f000 ff6a 	bl	21b78 <__tzcalc_limits>
   20ca4:	2800      	cmp	r0, #0
   20ca6:	f47f af7b 	bne.w	20ba0 <mktime+0xe8>
   20caa:	46c1      	mov	r9, r8
   20cac:	e054      	b.n	20d58 <mktime+0x2a0>
   20cae:	9800      	ldr	r0, [sp, #0]
   20cb0:	9902      	ldr	r1, [sp, #8]
   20cb2:	1a09      	subs	r1, r1, r0
   20cb4:	9108      	str	r1, [sp, #32]
   20cb6:	9801      	ldr	r0, [sp, #4]
   20cb8:	9903      	ldr	r1, [sp, #12]
   20cba:	eb61 0100 	sbc.w	r1, r1, r0
   20cbe:	9109      	str	r1, [sp, #36]	; 0x24
   20cc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   20cc4:	4582      	cmp	sl, r0
   20cc6:	eb7b 0101 	sbcs.w	r1, fp, r1
   20cca:	dbee      	blt.n	20caa <mktime+0x1f2>
   20ccc:	e77d      	b.n	20bca <mktime+0x112>
   20cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   20cd2:	4582      	cmp	sl, r0
   20cd4:	eb7b 0101 	sbcs.w	r1, fp, r1
   20cd8:	db89      	blt.n	20bee <mktime+0x136>
   20cda:	f1b9 0f00 	cmp.w	r9, #0
   20cde:	db3f      	blt.n	20d60 <mktime+0x2a8>
   20ce0:	f04f 0901 	mov.w	r9, #1
   20ce4:	ea88 0809 	eor.w	r8, r8, r9
   20ce8:	f1b8 0f01 	cmp.w	r8, #1
   20cec:	d134      	bne.n	20d58 <mktime+0x2a0>
   20cee:	f1b9 0f00 	cmp.w	r9, #0
   20cf2:	d04b      	beq.n	20d8c <mktime+0x2d4>
   20cf4:	1ad3      	subs	r3, r2, r3
   20cf6:	682a      	ldr	r2, [r5, #0]
   20cf8:	f8d5 800c 	ldr.w	r8, [r5, #12]
   20cfc:	441a      	add	r2, r3
   20cfe:	eb1a 0a03 	adds.w	sl, sl, r3
   20d02:	602a      	str	r2, [r5, #0]
   20d04:	4628      	mov	r0, r5
   20d06:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
   20d0a:	f7ff fdfd 	bl	20908 <validate_structure>
   20d0e:	68ea      	ldr	r2, [r5, #12]
   20d10:	ebb2 0208 	subs.w	r2, r2, r8
   20d14:	d020      	beq.n	20d58 <mktime+0x2a0>
   20d16:	2a01      	cmp	r2, #1
   20d18:	dc3a      	bgt.n	20d90 <mktime+0x2d8>
   20d1a:	1c90      	adds	r0, r2, #2
   20d1c:	bfd8      	it	le
   20d1e:	2201      	movle	r2, #1
   20d20:	69eb      	ldr	r3, [r5, #28]
   20d22:	18d3      	adds	r3, r2, r3
   20d24:	4414      	add	r4, r2
   20d26:	d53c      	bpl.n	20da2 <mktime+0x2ea>
   20d28:	1e72      	subs	r2, r6, #1
   20d2a:	0791      	lsls	r1, r2, #30
   20d2c:	d133      	bne.n	20d96 <mktime+0x2de>
   20d2e:	2164      	movs	r1, #100	; 0x64
   20d30:	fb92 f3f1 	sdiv	r3, r2, r1
   20d34:	fb01 2313 	mls	r3, r1, r3, r2
   20d38:	bb83      	cbnz	r3, 20d9c <mktime+0x2e4>
   20d3a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
   20d3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   20d42:	fb96 f3f2 	sdiv	r3, r6, r2
   20d46:	fb02 6613 	mls	r6, r2, r3, r6
   20d4a:	2e00      	cmp	r6, #0
   20d4c:	f240 136d 	movw	r3, #365	; 0x16d
   20d50:	bf18      	it	ne
   20d52:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   20d56:	61eb      	str	r3, [r5, #28]
   20d58:	f1b9 0f01 	cmp.w	r9, #1
   20d5c:	f47f af52 	bne.w	20c04 <mktime+0x14c>
   20d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   20d62:	eb1a 0003 	adds.w	r0, sl, r3
   20d66:	eb4b 71e3 	adc.w	r1, fp, r3, asr #31
   20d6a:	f04f 0901 	mov.w	r9, #1
   20d6e:	3404      	adds	r4, #4
   20d70:	2307      	movs	r3, #7
   20d72:	fb94 f3f3 	sdiv	r3, r4, r3
   20d76:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   20d7a:	1ae4      	subs	r4, r4, r3
   20d7c:	bf48      	it	mi
   20d7e:	3407      	addmi	r4, #7
   20d80:	f8c5 9020 	str.w	r9, [r5, #32]
   20d84:	61ac      	str	r4, [r5, #24]
   20d86:	b00b      	add	sp, #44	; 0x2c
   20d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d8c:	1a9b      	subs	r3, r3, r2
   20d8e:	e7b2      	b.n	20cf6 <mktime+0x23e>
   20d90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20d94:	e7c4      	b.n	20d20 <mktime+0x268>
   20d96:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   20d9a:	e7dc      	b.n	20d56 <mktime+0x29e>
   20d9c:	f240 136d 	movw	r3, #365	; 0x16d
   20da0:	e7d9      	b.n	20d56 <mktime+0x29e>
   20da2:	07b2      	lsls	r2, r6, #30
   20da4:	d11e      	bne.n	20de4 <mktime+0x32c>
   20da6:	2164      	movs	r1, #100	; 0x64
   20da8:	fb96 f2f1 	sdiv	r2, r6, r1
   20dac:	fb01 6212 	mls	r2, r1, r2, r6
   20db0:	b9da      	cbnz	r2, 20dea <mktime+0x332>
   20db2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   20db6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   20dba:	fb96 f2f1 	sdiv	r2, r6, r1
   20dbe:	fb01 6612 	mls	r6, r1, r2, r6
   20dc2:	2e00      	cmp	r6, #0
   20dc4:	f240 126d 	movw	r2, #365	; 0x16d
   20dc8:	bf08      	it	eq
   20dca:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   20dce:	4293      	cmp	r3, r2
   20dd0:	bfa8      	it	ge
   20dd2:	1a9b      	subge	r3, r3, r2
   20dd4:	e7bf      	b.n	20d56 <mktime+0x29e>
   20dd6:	bf00      	nop
   20dd8:	0002d9ac 	.word	0x0002d9ac
   20ddc:	00015180 	.word	0x00015180
   20de0:	2000808c 	.word	0x2000808c
   20de4:	f240 126d 	movw	r2, #365	; 0x16d
   20de8:	e7f1      	b.n	20dce <mktime+0x316>
   20dea:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   20dee:	e7ee      	b.n	20dce <mktime+0x316>
   20df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20df8:	e7c5      	b.n	20d86 <mktime+0x2ce>
   20dfa:	bf00      	nop

00020dfc <sniprintf>:
   20dfc:	b40c      	push	{r2, r3}
   20dfe:	b530      	push	{r4, r5, lr}
   20e00:	4b17      	ldr	r3, [pc, #92]	; (20e60 <sniprintf+0x64>)
   20e02:	1e0c      	subs	r4, r1, #0
   20e04:	681d      	ldr	r5, [r3, #0]
   20e06:	b09b      	sub	sp, #108	; 0x6c
   20e08:	da08      	bge.n	20e1c <sniprintf+0x20>
   20e0a:	238b      	movs	r3, #139	; 0x8b
   20e0c:	602b      	str	r3, [r5, #0]
   20e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e12:	b01b      	add	sp, #108	; 0x6c
   20e14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20e18:	b002      	add	sp, #8
   20e1a:	4770      	bx	lr
   20e1c:	f44f 7302 	mov.w	r3, #520	; 0x208
   20e20:	f8ad 3010 	strh.w	r3, [sp, #16]
   20e24:	bf14      	ite	ne
   20e26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   20e2a:	4623      	moveq	r3, r4
   20e2c:	9303      	str	r3, [sp, #12]
   20e2e:	9306      	str	r3, [sp, #24]
   20e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20e34:	9001      	str	r0, [sp, #4]
   20e36:	9005      	str	r0, [sp, #20]
   20e38:	f8ad 3012 	strh.w	r3, [sp, #18]
   20e3c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   20e3e:	ab1f      	add	r3, sp, #124	; 0x7c
   20e40:	a901      	add	r1, sp, #4
   20e42:	4628      	mov	r0, r5
   20e44:	9300      	str	r3, [sp, #0]
   20e46:	f001 f9bd 	bl	221c4 <_svfiprintf_r>
   20e4a:	1c43      	adds	r3, r0, #1
   20e4c:	bfbc      	itt	lt
   20e4e:	238b      	movlt	r3, #139	; 0x8b
   20e50:	602b      	strlt	r3, [r5, #0]
   20e52:	2c00      	cmp	r4, #0
   20e54:	d0dd      	beq.n	20e12 <sniprintf+0x16>
   20e56:	9b01      	ldr	r3, [sp, #4]
   20e58:	2200      	movs	r2, #0
   20e5a:	701a      	strb	r2, [r3, #0]
   20e5c:	e7d9      	b.n	20e12 <sniprintf+0x16>
   20e5e:	bf00      	nop
   20e60:	20000828 	.word	0x20000828

00020e64 <siscanf>:
   20e64:	b40e      	push	{r1, r2, r3}
   20e66:	b530      	push	{r4, r5, lr}
   20e68:	b09a      	sub	sp, #104	; 0x68
   20e6a:	ac1d      	add	r4, sp, #116	; 0x74
   20e6c:	f44f 7201 	mov.w	r2, #516	; 0x204
   20e70:	f854 5b04 	ldr.w	r5, [r4], #4
   20e74:	f8ad 2010 	strh.w	r2, [sp, #16]
   20e78:	9001      	str	r0, [sp, #4]
   20e7a:	9005      	str	r0, [sp, #20]
   20e7c:	f7df fb06 	bl	48c <strlen>
   20e80:	4b0b      	ldr	r3, [pc, #44]	; (20eb0 <siscanf+0x4c>)
   20e82:	9002      	str	r0, [sp, #8]
   20e84:	9006      	str	r0, [sp, #24]
   20e86:	930a      	str	r3, [sp, #40]	; 0x28
   20e88:	480a      	ldr	r0, [pc, #40]	; (20eb4 <siscanf+0x50>)
   20e8a:	9400      	str	r4, [sp, #0]
   20e8c:	2300      	movs	r3, #0
   20e8e:	930e      	str	r3, [sp, #56]	; 0x38
   20e90:	9313      	str	r3, [sp, #76]	; 0x4c
   20e92:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20e96:	f8ad 3012 	strh.w	r3, [sp, #18]
   20e9a:	462a      	mov	r2, r5
   20e9c:	4623      	mov	r3, r4
   20e9e:	a901      	add	r1, sp, #4
   20ea0:	6800      	ldr	r0, [r0, #0]
   20ea2:	f001 fa8f 	bl	223c4 <__ssvfiscanf_r>
   20ea6:	b01a      	add	sp, #104	; 0x68
   20ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   20eac:	b003      	add	sp, #12
   20eae:	4770      	bx	lr
   20eb0:	0002b7ad 	.word	0x0002b7ad
   20eb4:	20000828 	.word	0x20000828

00020eb8 <iso_year_adjust>:
   20eb8:	6941      	ldr	r1, [r0, #20]
   20eba:	2900      	cmp	r1, #0
   20ebc:	f240 736c 	movw	r3, #1900	; 0x76c
   20ec0:	bfa8      	it	ge
   20ec2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   20ec6:	18ca      	adds	r2, r1, r3
   20ec8:	078b      	lsls	r3, r1, #30
   20eca:	d105      	bne.n	20ed8 <iso_year_adjust+0x20>
   20ecc:	2164      	movs	r1, #100	; 0x64
   20ece:	fb92 f3f1 	sdiv	r3, r2, r1
   20ed2:	fb01 2313 	mls	r3, r1, r3, r2
   20ed6:	b9db      	cbnz	r3, 20f10 <iso_year_adjust+0x58>
   20ed8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   20edc:	fb92 f3f1 	sdiv	r3, r2, r1
   20ee0:	fb01 2313 	mls	r3, r1, r3, r2
   20ee4:	fab3 f383 	clz	r3, r3
   20ee8:	095b      	lsrs	r3, r3, #5
   20eea:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
   20eee:	0040      	lsls	r0, r0, #1
   20ef0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   20ef4:	4418      	add	r0, r3
   20ef6:	f241 63a2 	movw	r3, #5794	; 0x16a2
   20efa:	4298      	cmp	r0, r3
   20efc:	d03a      	beq.n	20f74 <iso_year_adjust+0xbc>
   20efe:	dc21      	bgt.n	20f44 <iso_year_adjust+0x8c>
   20f00:	2801      	cmp	r0, #1
   20f02:	dc1a      	bgt.n	20f3a <iso_year_adjust+0x82>
   20f04:	2800      	cmp	r0, #0
   20f06:	bfb4      	ite	lt
   20f08:	2000      	movlt	r0, #0
   20f0a:	f04f 30ff 	movge.w	r0, #4294967295	; 0xffffffff
   20f0e:	4770      	bx	lr
   20f10:	2301      	movs	r3, #1
   20f12:	e7ea      	b.n	20eea <iso_year_adjust+0x32>
   20f14:	2817      	cmp	r0, #23
   20f16:	d813      	bhi.n	20f40 <iso_year_adjust+0x88>
   20f18:	e8df f000 	tbb	[pc, r0]
   20f1c:	0c0c0c0c 	.word	0x0c0c0c0c
   20f20:	0c0c1212 	.word	0x0c0c1212
   20f24:	12121212 	.word	0x12121212
   20f28:	12121212 	.word	0x12121212
   20f2c:	0c0c1212 	.word	0x0c0c1212
   20f30:	0c0c1212 	.word	0x0c0c1212
   20f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20f38:	4770      	bx	lr
   20f3a:	380a      	subs	r0, #10
   20f3c:	2817      	cmp	r0, #23
   20f3e:	d9e9      	bls.n	20f14 <iso_year_adjust+0x5c>
   20f40:	2000      	movs	r0, #0
   20f42:	4770      	bx	lr
   20f44:	f241 63b4 	movw	r3, #5812	; 0x16b4
   20f48:	4298      	cmp	r0, r3
   20f4a:	dc06      	bgt.n	20f5a <iso_year_adjust+0xa2>
   20f4c:	f241 63b1 	movw	r3, #5809	; 0x16b1
   20f50:	4298      	cmp	r0, r3
   20f52:	bfd4      	ite	le
   20f54:	2000      	movle	r0, #0
   20f56:	2001      	movgt	r0, #1
   20f58:	4770      	bx	lr
   20f5a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
   20f5e:	3802      	subs	r0, #2
   20f60:	2815      	cmp	r0, #21
   20f62:	d8ed      	bhi.n	20f40 <iso_year_adjust+0x88>
   20f64:	2301      	movs	r3, #1
   20f66:	4083      	lsls	r3, r0
   20f68:	4803      	ldr	r0, [pc, #12]	; (20f78 <iso_year_adjust+0xc0>)
   20f6a:	4018      	ands	r0, r3
   20f6c:	3800      	subs	r0, #0
   20f6e:	bf18      	it	ne
   20f70:	2001      	movne	r0, #1
   20f72:	4770      	bx	lr
   20f74:	2001      	movs	r0, #1
   20f76:	4770      	bx	lr
   20f78:	002a001f 	.word	0x002a001f

00020f7c <__strftime>:
   20f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f80:	b091      	sub	sp, #68	; 0x44
   20f82:	461e      	mov	r6, r3
   20f84:	2300      	movs	r3, #0
   20f86:	4607      	mov	r7, r0
   20f88:	460d      	mov	r5, r1
   20f8a:	9304      	str	r3, [sp, #16]
   20f8c:	461c      	mov	r4, r3
   20f8e:	7813      	ldrb	r3, [r2, #0]
   20f90:	2b00      	cmp	r3, #0
   20f92:	f000 84cd 	beq.w	21930 <__strftime+0x9b4>
   20f96:	2b25      	cmp	r3, #37	; 0x25
   20f98:	d11f      	bne.n	20fda <__strftime+0x5e>
   20f9a:	f892 9001 	ldrb.w	r9, [r2, #1]
   20f9e:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
   20fa2:	d024      	beq.n	20fee <__strftime+0x72>
   20fa4:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   20fa8:	d021      	beq.n	20fee <__strftime+0x72>
   20faa:	f102 0a01 	add.w	sl, r2, #1
   20fae:	f04f 0900 	mov.w	r9, #0
   20fb2:	f89a 3000 	ldrb.w	r3, [sl]
   20fb6:	3b31      	subs	r3, #49	; 0x31
   20fb8:	2b08      	cmp	r3, #8
   20fba:	d81b      	bhi.n	20ff4 <__strftime+0x78>
   20fbc:	4650      	mov	r0, sl
   20fbe:	220a      	movs	r2, #10
   20fc0:	a908      	add	r1, sp, #32
   20fc2:	f000 fdcf 	bl	21b64 <strtoul>
   20fc6:	f8dd a020 	ldr.w	sl, [sp, #32]
   20fca:	4680      	mov	r8, r0
   20fcc:	f89a 3000 	ldrb.w	r3, [sl]
   20fd0:	2b45      	cmp	r3, #69	; 0x45
   20fd2:	d112      	bne.n	20ffa <__strftime+0x7e>
   20fd4:	f10a 0a01 	add.w	sl, sl, #1
   20fd8:	e011      	b.n	20ffe <__strftime+0x82>
   20fda:	1e69      	subs	r1, r5, #1
   20fdc:	42a1      	cmp	r1, r4
   20fde:	d802      	bhi.n	20fe6 <__strftime+0x6a>
   20fe0:	2400      	movs	r4, #0
   20fe2:	f000 bca8 	b.w	21936 <__strftime+0x9ba>
   20fe6:	553b      	strb	r3, [r7, r4]
   20fe8:	3201      	adds	r2, #1
   20fea:	3401      	adds	r4, #1
   20fec:	e7cf      	b.n	20f8e <__strftime+0x12>
   20fee:	f102 0a02 	add.w	sl, r2, #2
   20ff2:	e7de      	b.n	20fb2 <__strftime+0x36>
   20ff4:	f04f 0800 	mov.w	r8, #0
   20ff8:	e7e8      	b.n	20fcc <__strftime+0x50>
   20ffa:	2b4f      	cmp	r3, #79	; 0x4f
   20ffc:	d0ea      	beq.n	20fd4 <__strftime+0x58>
   20ffe:	f89a 0000 	ldrb.w	r0, [sl]
   21002:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   21006:	2b55      	cmp	r3, #85	; 0x55
   21008:	d8ea      	bhi.n	20fe0 <__strftime+0x64>
   2100a:	a201      	add	r2, pc, #4	; (adr r2, 21010 <__strftime+0x94>)
   2100c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   21010:	00021925 	.word	0x00021925
   21014:	00020fe1 	.word	0x00020fe1
   21018:	00020fe1 	.word	0x00020fe1
   2101c:	00020fe1 	.word	0x00020fe1
   21020:	00020fe1 	.word	0x00020fe1
   21024:	00020fe1 	.word	0x00020fe1
   21028:	00020fe1 	.word	0x00020fe1
   2102c:	00020fe1 	.word	0x00020fe1
   21030:	00020fe1 	.word	0x00020fe1
   21034:	00020fe1 	.word	0x00020fe1
   21038:	00020fe1 	.word	0x00020fe1
   2103c:	00020fe1 	.word	0x00020fe1
   21040:	00020fe1 	.word	0x00020fe1
   21044:	00020fe1 	.word	0x00020fe1
   21048:	00020fe1 	.word	0x00020fe1
   2104c:	00020fe1 	.word	0x00020fe1
   21050:	00020fe1 	.word	0x00020fe1
   21054:	00020fe1 	.word	0x00020fe1
   21058:	00020fe1 	.word	0x00020fe1
   2105c:	00020fe1 	.word	0x00020fe1
   21060:	00020fe1 	.word	0x00020fe1
   21064:	00020fe1 	.word	0x00020fe1
   21068:	00020fe1 	.word	0x00020fe1
   2106c:	00020fe1 	.word	0x00020fe1
   21070:	00020fe1 	.word	0x00020fe1
   21074:	00020fe1 	.word	0x00020fe1
   21078:	00020fe1 	.word	0x00020fe1
   2107c:	00020fe1 	.word	0x00020fe1
   21080:	000211a5 	.word	0x000211a5
   21084:	000211fd 	.word	0x000211fd
   21088:	0002126f 	.word	0x0002126f
   2108c:	00021307 	.word	0x00021307
   21090:	00020fe1 	.word	0x00020fe1
   21094:	00021351 	.word	0x00021351
   21098:	00021445 	.word	0x00021445
   2109c:	00021551 	.word	0x00021551
   210a0:	0002155f 	.word	0x0002155f
   210a4:	00020fe1 	.word	0x00020fe1
   210a8:	00020fe1 	.word	0x00020fe1
   210ac:	00020fe1 	.word	0x00020fe1
   210b0:	0002158f 	.word	0x0002158f
   210b4:	00020fe1 	.word	0x00020fe1
   210b8:	00020fe1 	.word	0x00020fe1
   210bc:	000215a3 	.word	0x000215a3
   210c0:	00020fe1 	.word	0x00020fe1
   210c4:	000215f3 	.word	0x000215f3
   210c8:	00021701 	.word	0x00021701
   210cc:	00021711 	.word	0x00021711
   210d0:	00021767 	.word	0x00021767
   210d4:	00021777 	.word	0x00021777
   210d8:	000217eb 	.word	0x000217eb
   210dc:	00021267 	.word	0x00021267
   210e0:	0002181f 	.word	0x0002181f
   210e4:	000218e3 	.word	0x000218e3
   210e8:	00020fe1 	.word	0x00020fe1
   210ec:	00020fe1 	.word	0x00020fe1
   210f0:	00020fe1 	.word	0x00020fe1
   210f4:	00020fe1 	.word	0x00020fe1
   210f8:	00020fe1 	.word	0x00020fe1
   210fc:	00020fe1 	.word	0x00020fe1
   21100:	00021169 	.word	0x00021169
   21104:	000211d3 	.word	0x000211d3
   21108:	00021229 	.word	0x00021229
   2110c:	000212e3 	.word	0x000212e3
   21110:	000212e3 	.word	0x000212e3
   21114:	00020fe1 	.word	0x00020fe1
   21118:	000213a7 	.word	0x000213a7
   2111c:	000211d3 	.word	0x000211d3
   21120:	00020fe1 	.word	0x00020fe1
   21124:	00021581 	.word	0x00021581
   21128:	00021551 	.word	0x00021551
   2112c:	0002155f 	.word	0x0002155f
   21130:	00021589 	.word	0x00021589
   21134:	00021593 	.word	0x00021593
   21138:	00020fe1 	.word	0x00020fe1
   2113c:	000215a3 	.word	0x000215a3
   21140:	00020fe1 	.word	0x00020fe1
   21144:	00021257 	.word	0x00021257
   21148:	00021605 	.word	0x00021605
   2114c:	00021705 	.word	0x00021705
   21150:	0002174d 	.word	0x0002174d
   21154:	00020fe1 	.word	0x00020fe1
   21158:	000217dd 	.word	0x000217dd
   2115c:	0002125f 	.word	0x0002125f
   21160:	00021803 	.word	0x00021803
   21164:	0002187b 	.word	0x0002187b
   21168:	69b3      	ldr	r3, [r6, #24]
   2116a:	4aa9      	ldr	r2, [pc, #676]	; (21410 <__strftime+0x494>)
   2116c:	3318      	adds	r3, #24
   2116e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   21172:	4640      	mov	r0, r8
   21174:	f7df f98a 	bl	48c <strlen>
   21178:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2117c:	4420      	add	r0, r4
   2117e:	1e6b      	subs	r3, r5, #1
   21180:	42a0      	cmp	r0, r4
   21182:	d107      	bne.n	21194 <__strftime+0x218>
   21184:	f89a 3000 	ldrb.w	r3, [sl]
   21188:	2b00      	cmp	r3, #0
   2118a:	f000 83d1 	beq.w	21930 <__strftime+0x9b4>
   2118e:	f10a 0201 	add.w	r2, sl, #1
   21192:	e6fc      	b.n	20f8e <__strftime+0x12>
   21194:	42a3      	cmp	r3, r4
   21196:	f67f af23 	bls.w	20fe0 <__strftime+0x64>
   2119a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   2119e:	553a      	strb	r2, [r7, r4]
   211a0:	3401      	adds	r4, #1
   211a2:	e7ed      	b.n	21180 <__strftime+0x204>
   211a4:	69b2      	ldr	r2, [r6, #24]
   211a6:	4b9a      	ldr	r3, [pc, #616]	; (21410 <__strftime+0x494>)
   211a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   211ac:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   211b0:	4640      	mov	r0, r8
   211b2:	f7df f96b 	bl	48c <strlen>
   211b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   211ba:	4420      	add	r0, r4
   211bc:	1e6b      	subs	r3, r5, #1
   211be:	42a0      	cmp	r0, r4
   211c0:	d0e0      	beq.n	21184 <__strftime+0x208>
   211c2:	42a3      	cmp	r3, r4
   211c4:	f67f af0c 	bls.w	20fe0 <__strftime+0x64>
   211c8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   211cc:	553a      	strb	r2, [r7, r4]
   211ce:	3401      	adds	r4, #1
   211d0:	e7f5      	b.n	211be <__strftime+0x242>
   211d2:	4b8f      	ldr	r3, [pc, #572]	; (21410 <__strftime+0x494>)
   211d4:	6932      	ldr	r2, [r6, #16]
   211d6:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
   211da:	4640      	mov	r0, r8
   211dc:	f7df f956 	bl	48c <strlen>
   211e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   211e4:	4420      	add	r0, r4
   211e6:	1e6b      	subs	r3, r5, #1
   211e8:	42a0      	cmp	r0, r4
   211ea:	d0cb      	beq.n	21184 <__strftime+0x208>
   211ec:	42a3      	cmp	r3, r4
   211ee:	f67f aef7 	bls.w	20fe0 <__strftime+0x64>
   211f2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   211f6:	553a      	strb	r2, [r7, r4]
   211f8:	3401      	adds	r4, #1
   211fa:	e7f5      	b.n	211e8 <__strftime+0x26c>
   211fc:	6933      	ldr	r3, [r6, #16]
   211fe:	4a84      	ldr	r2, [pc, #528]	; (21410 <__strftime+0x494>)
   21200:	330c      	adds	r3, #12
   21202:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   21206:	4640      	mov	r0, r8
   21208:	f7df f940 	bl	48c <strlen>
   2120c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   21210:	4420      	add	r0, r4
   21212:	1e6b      	subs	r3, r5, #1
   21214:	42a0      	cmp	r0, r4
   21216:	d0b5      	beq.n	21184 <__strftime+0x208>
   21218:	42a3      	cmp	r3, r4
   2121a:	f67f aee1 	bls.w	20fe0 <__strftime+0x64>
   2121e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   21222:	553a      	strb	r2, [r7, r4]
   21224:	3401      	adds	r4, #1
   21226:	e7f5      	b.n	21214 <__strftime+0x298>
   21228:	4b79      	ldr	r3, [pc, #484]	; (21410 <__strftime+0x494>)
   2122a:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   2122e:	4640      	mov	r0, r8
   21230:	f7df f92c 	bl	48c <strlen>
   21234:	f898 3000 	ldrb.w	r3, [r8]
   21238:	2b00      	cmp	r3, #0
   2123a:	d0a3      	beq.n	21184 <__strftime+0x208>
   2123c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2123e:	9300      	str	r3, [sp, #0]
   21240:	4642      	mov	r2, r8
   21242:	4633      	mov	r3, r6
   21244:	1b29      	subs	r1, r5, r4
   21246:	1938      	adds	r0, r7, r4
   21248:	f7ff fe98 	bl	20f7c <__strftime>
   2124c:	2800      	cmp	r0, #0
   2124e:	f77f aec7 	ble.w	20fe0 <__strftime+0x64>
   21252:	4404      	add	r4, r0
   21254:	e796      	b.n	21184 <__strftime+0x208>
   21256:	4b6e      	ldr	r3, [pc, #440]	; (21410 <__strftime+0x494>)
   21258:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   2125c:	e7e7      	b.n	2122e <__strftime+0x2b2>
   2125e:	4b6c      	ldr	r3, [pc, #432]	; (21410 <__strftime+0x494>)
   21260:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   21264:	e7e3      	b.n	2122e <__strftime+0x2b2>
   21266:	4b6a      	ldr	r3, [pc, #424]	; (21410 <__strftime+0x494>)
   21268:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   2126c:	e7df      	b.n	2122e <__strftime+0x2b2>
   2126e:	4969      	ldr	r1, [pc, #420]	; (21414 <__strftime+0x498>)
   21270:	f8d6 b014 	ldr.w	fp, [r6, #20]
   21274:	458b      	cmp	fp, r1
   21276:	bfac      	ite	ge
   21278:	2100      	movge	r1, #0
   2127a:	2101      	movlt	r1, #1
   2127c:	f1bb 0f00 	cmp.w	fp, #0
   21280:	db10      	blt.n	212a4 <__strftime+0x328>
   21282:	2064      	movs	r0, #100	; 0x64
   21284:	fb9b f0f0 	sdiv	r0, fp, r0
   21288:	3013      	adds	r0, #19
   2128a:	f1b9 0f00 	cmp.w	r9, #0
   2128e:	d013      	beq.n	212b8 <__strftime+0x33c>
   21290:	2863      	cmp	r0, #99	; 0x63
   21292:	dd24      	ble.n	212de <__strftime+0x362>
   21294:	4a60      	ldr	r2, [pc, #384]	; (21418 <__strftime+0x49c>)
   21296:	4b61      	ldr	r3, [pc, #388]	; (2141c <__strftime+0x4a0>)
   21298:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   2129c:	bf18      	it	ne
   2129e:	4613      	movne	r3, r2
   212a0:	4a5f      	ldr	r2, [pc, #380]	; (21420 <__strftime+0x4a4>)
   212a2:	e00b      	b.n	212bc <__strftime+0x340>
   212a4:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   212a8:	9105      	str	r1, [sp, #20]
   212aa:	f00a fb00 	bl	2b8ae <abs>
   212ae:	2364      	movs	r3, #100	; 0x64
   212b0:	9905      	ldr	r1, [sp, #20]
   212b2:	fb90 f0f3 	sdiv	r0, r0, r3
   212b6:	e7e8      	b.n	2128a <__strftime+0x30e>
   212b8:	4b57      	ldr	r3, [pc, #348]	; (21418 <__strftime+0x49c>)
   212ba:	4a5a      	ldr	r2, [pc, #360]	; (21424 <__strftime+0x4a8>)
   212bc:	9001      	str	r0, [sp, #4]
   212be:	f1b8 0f02 	cmp.w	r8, #2
   212c2:	bf2c      	ite	cs
   212c4:	ebc1 0108 	rsbcs	r1, r1, r8
   212c8:	f1c1 0102 	rsbcc	r1, r1, #2
   212cc:	4851      	ldr	r0, [pc, #324]	; (21414 <__strftime+0x498>)
   212ce:	9100      	str	r1, [sp, #0]
   212d0:	4955      	ldr	r1, [pc, #340]	; (21428 <__strftime+0x4ac>)
   212d2:	4583      	cmp	fp, r0
   212d4:	bfb8      	it	lt
   212d6:	460b      	movlt	r3, r1
   212d8:	1b29      	subs	r1, r5, r4
   212da:	1938      	adds	r0, r7, r4
   212dc:	e029      	b.n	21332 <__strftime+0x3b6>
   212de:	4b4e      	ldr	r3, [pc, #312]	; (21418 <__strftime+0x49c>)
   212e0:	e7de      	b.n	212a0 <__strftime+0x324>
   212e2:	4952      	ldr	r1, [pc, #328]	; (2142c <__strftime+0x4b0>)
   212e4:	4a52      	ldr	r2, [pc, #328]	; (21430 <__strftime+0x4b4>)
   212e6:	68f3      	ldr	r3, [r6, #12]
   212e8:	2864      	cmp	r0, #100	; 0x64
   212ea:	bf08      	it	eq
   212ec:	460a      	moveq	r2, r1
   212ee:	1b29      	subs	r1, r5, r4
   212f0:	1938      	adds	r0, r7, r4
   212f2:	f7ff fd83 	bl	20dfc <sniprintf>
   212f6:	2800      	cmp	r0, #0
   212f8:	f6ff ae72 	blt.w	20fe0 <__strftime+0x64>
   212fc:	4404      	add	r4, r0
   212fe:	42a5      	cmp	r5, r4
   21300:	f63f af40 	bhi.w	21184 <__strftime+0x208>
   21304:	e66c      	b.n	20fe0 <__strftime+0x64>
   21306:	6970      	ldr	r0, [r6, #20]
   21308:	6933      	ldr	r3, [r6, #16]
   2130a:	2800      	cmp	r0, #0
   2130c:	f103 0b01 	add.w	fp, r3, #1
   21310:	eb07 0804 	add.w	r8, r7, r4
   21314:	68f3      	ldr	r3, [r6, #12]
   21316:	eba5 0904 	sub.w	r9, r5, r4
   2131a:	db0d      	blt.n	21338 <__strftime+0x3bc>
   2131c:	2164      	movs	r1, #100	; 0x64
   2131e:	fb90 f2f1 	sdiv	r2, r0, r1
   21322:	fb01 0212 	mls	r2, r1, r2, r0
   21326:	e9cd 3200 	strd	r3, r2, [sp]
   2132a:	4a42      	ldr	r2, [pc, #264]	; (21434 <__strftime+0x4b8>)
   2132c:	465b      	mov	r3, fp
   2132e:	4649      	mov	r1, r9
   21330:	4640      	mov	r0, r8
   21332:	f7ff fd63 	bl	20dfc <sniprintf>
   21336:	e7de      	b.n	212f6 <__strftime+0x37a>
   21338:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   2133c:	9305      	str	r3, [sp, #20]
   2133e:	f00a fab6 	bl	2b8ae <abs>
   21342:	2264      	movs	r2, #100	; 0x64
   21344:	9b05      	ldr	r3, [sp, #20]
   21346:	fb90 f1f2 	sdiv	r1, r0, r2
   2134a:	fb01 0212 	mls	r2, r1, r2, r0
   2134e:	e7ea      	b.n	21326 <__strftime+0x3aa>
   21350:	2325      	movs	r3, #37	; 0x25
   21352:	f88d 3020 	strb.w	r3, [sp, #32]
   21356:	f1b9 0f00 	cmp.w	r9, #0
   2135a:	d013      	beq.n	21384 <__strftime+0x408>
   2135c:	f1b8 0f06 	cmp.w	r8, #6
   21360:	bf38      	it	cc
   21362:	f04f 0806 	movcc.w	r8, #6
   21366:	f1b8 0306 	subs.w	r3, r8, #6
   2136a:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
   2136e:	d10e      	bne.n	2138e <__strftime+0x412>
   21370:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   21374:	4930      	ldr	r1, [pc, #192]	; (21438 <__strftime+0x4bc>)
   21376:	f00a fa1b 	bl	2b7b0 <strcpy>
   2137a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2137c:	9300      	str	r3, [sp, #0]
   2137e:	aa08      	add	r2, sp, #32
   21380:	4633      	mov	r3, r6
   21382:	e75f      	b.n	21244 <__strftime+0x2c8>
   21384:	f04f 092b 	mov.w	r9, #43	; 0x2b
   21388:	f04f 080a 	mov.w	r8, #10
   2138c:	e7eb      	b.n	21366 <__strftime+0x3ea>
   2138e:	4a2b      	ldr	r2, [pc, #172]	; (2143c <__strftime+0x4c0>)
   21390:	211e      	movs	r1, #30
   21392:	f10d 0022 	add.w	r0, sp, #34	; 0x22
   21396:	f7ff fd31 	bl	20dfc <sniprintf>
   2139a:	2800      	cmp	r0, #0
   2139c:	dde8      	ble.n	21370 <__strftime+0x3f4>
   2139e:	f10d 0322 	add.w	r3, sp, #34	; 0x22
   213a2:	4418      	add	r0, r3
   213a4:	e7e6      	b.n	21374 <__strftime+0x3f8>
   213a6:	4630      	mov	r0, r6
   213a8:	f7ff fd86 	bl	20eb8 <iso_year_adjust>
   213ac:	4680      	mov	r8, r0
   213ae:	6970      	ldr	r0, [r6, #20]
   213b0:	2800      	cmp	r0, #0
   213b2:	db11      	blt.n	213d8 <__strftime+0x45c>
   213b4:	2264      	movs	r2, #100	; 0x64
   213b6:	fb90 f3f2 	sdiv	r3, r0, r2
   213ba:	fb02 0313 	mls	r3, r2, r3, r0
   213be:	4498      	add	r8, r3
   213c0:	2364      	movs	r3, #100	; 0x64
   213c2:	fb98 f0f3 	sdiv	r0, r8, r3
   213c6:	fb03 8810 	mls	r8, r3, r0, r8
   213ca:	4498      	add	r8, r3
   213cc:	fbb8 f2f3 	udiv	r2, r8, r3
   213d0:	fb03 8312 	mls	r3, r3, r2, r8
   213d4:	4a15      	ldr	r2, [pc, #84]	; (2142c <__strftime+0x4b0>)
   213d6:	e78a      	b.n	212ee <__strftime+0x372>
   213d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   213dc:	f00a fa67 	bl	2b8ae <abs>
   213e0:	2364      	movs	r3, #100	; 0x64
   213e2:	f1b8 0f00 	cmp.w	r8, #0
   213e6:	fb90 f2f3 	sdiv	r2, r0, r3
   213ea:	fb02 0313 	mls	r3, r2, r3, r0
   213ee:	da06      	bge.n	213fe <__strftime+0x482>
   213f0:	6971      	ldr	r1, [r6, #20]
   213f2:	4a13      	ldr	r2, [pc, #76]	; (21440 <__strftime+0x4c4>)
   213f4:	4291      	cmp	r1, r2
   213f6:	bfb8      	it	lt
   213f8:	f04f 0801 	movlt.w	r8, #1
   213fc:	e7df      	b.n	213be <__strftime+0x442>
   213fe:	d0de      	beq.n	213be <__strftime+0x442>
   21400:	6971      	ldr	r1, [r6, #20]
   21402:	4a04      	ldr	r2, [pc, #16]	; (21414 <__strftime+0x498>)
   21404:	4291      	cmp	r1, r2
   21406:	bfb8      	it	lt
   21408:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   2140c:	e7d7      	b.n	213be <__strftime+0x442>
   2140e:	bf00      	nop
   21410:	0002d9dc 	.word	0x0002d9dc
   21414:	fffff894 	.word	0xfffff894
   21418:	0002e061 	.word	0x0002e061
   2141c:	0003944b 	.word	0x0003944b
   21420:	00039443 	.word	0x00039443
   21424:	0003943c 	.word	0x0003943c
   21428:	0003962b 	.word	0x0003962b
   2142c:	00039457 	.word	0x00039457
   21430:	0002ddf0 	.word	0x0002ddf0
   21434:	0003944d 	.word	0x0003944d
   21438:	00039460 	.word	0x00039460
   2143c:	0003945c 	.word	0x0003945c
   21440:	fffff895 	.word	0xfffff895
   21444:	4bb6      	ldr	r3, [pc, #728]	; (21720 <__strftime+0x7a4>)
   21446:	6971      	ldr	r1, [r6, #20]
   21448:	4299      	cmp	r1, r3
   2144a:	bfac      	ite	ge
   2144c:	2300      	movge	r3, #0
   2144e:	2301      	movlt	r3, #1
   21450:	4630      	mov	r0, r6
   21452:	e9cd 3105 	strd	r3, r1, [sp, #20]
   21456:	f7ff fd2f 	bl	20eb8 <iso_year_adjust>
   2145a:	9906      	ldr	r1, [sp, #24]
   2145c:	2900      	cmp	r1, #0
   2145e:	4683      	mov	fp, r0
   21460:	db2a      	blt.n	214b8 <__strftime+0x53c>
   21462:	2264      	movs	r2, #100	; 0x64
   21464:	fb91 f2f2 	sdiv	r2, r1, r2
   21468:	3213      	adds	r2, #19
   2146a:	6970      	ldr	r0, [r6, #20]
   2146c:	2800      	cmp	r0, #0
   2146e:	db2d      	blt.n	214cc <__strftime+0x550>
   21470:	f04f 0c64 	mov.w	ip, #100	; 0x64
   21474:	fb90 fefc 	sdiv	lr, r0, ip
   21478:	fb0c 001e 	mls	r0, ip, lr, r0
   2147c:	f1bb 0f00 	cmp.w	fp, #0
   21480:	da33      	bge.n	214ea <__strftime+0x56e>
   21482:	6971      	ldr	r1, [r6, #20]
   21484:	4ba7      	ldr	r3, [pc, #668]	; (21724 <__strftime+0x7a8>)
   21486:	4299      	cmp	r1, r3
   21488:	db3a      	blt.n	21500 <__strftime+0x584>
   2148a:	eb0b 0300 	add.w	r3, fp, r0
   2148e:	1c59      	adds	r1, r3, #1
   21490:	d13b      	bne.n	2150a <__strftime+0x58e>
   21492:	3a01      	subs	r2, #1
   21494:	2363      	movs	r3, #99	; 0x63
   21496:	2064      	movs	r0, #100	; 0x64
   21498:	fb00 3202 	mla	r2, r0, r2, r3
   2149c:	9b05      	ldr	r3, [sp, #20]
   2149e:	2b00      	cmp	r3, #0
   214a0:	d038      	beq.n	21514 <__strftime+0x598>
   214a2:	232d      	movs	r3, #45	; 0x2d
   214a4:	f88d 3020 	strb.w	r3, [sp, #32]
   214a8:	f1b8 0f00 	cmp.w	r8, #0
   214ac:	d001      	beq.n	214b2 <__strftime+0x536>
   214ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   214b2:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   214b6:	e038      	b.n	2152a <__strftime+0x5ae>
   214b8:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   214bc:	9106      	str	r1, [sp, #24]
   214be:	f00a f9f6 	bl	2b8ae <abs>
   214c2:	2264      	movs	r2, #100	; 0x64
   214c4:	9906      	ldr	r1, [sp, #24]
   214c6:	fb90 f2f2 	sdiv	r2, r0, r2
   214ca:	e7ce      	b.n	2146a <__strftime+0x4ee>
   214cc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   214d0:	e9cd 1206 	strd	r1, r2, [sp, #24]
   214d4:	f00a f9eb 	bl	2b8ae <abs>
   214d8:	f04f 0c64 	mov.w	ip, #100	; 0x64
   214dc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
   214e0:	fb90 fefc 	sdiv	lr, r0, ip
   214e4:	fb0e 001c 	mls	r0, lr, ip, r0
   214e8:	e7c8      	b.n	2147c <__strftime+0x500>
   214ea:	d0ce      	beq.n	2148a <__strftime+0x50e>
   214ec:	4b8c      	ldr	r3, [pc, #560]	; (21720 <__strftime+0x7a4>)
   214ee:	4299      	cmp	r1, r3
   214f0:	bfb4      	ite	lt
   214f2:	2301      	movlt	r3, #1
   214f4:	2300      	movge	r3, #0
   214f6:	9305      	str	r3, [sp, #20]
   214f8:	bfb8      	it	lt
   214fa:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   214fe:	e7c4      	b.n	2148a <__strftime+0x50e>
   21500:	f04f 0b01 	mov.w	fp, #1
   21504:	f8cd b014 	str.w	fp, [sp, #20]
   21508:	e7bf      	b.n	2148a <__strftime+0x50e>
   2150a:	2b64      	cmp	r3, #100	; 0x64
   2150c:	bf04      	itt	eq
   2150e:	3201      	addeq	r2, #1
   21510:	2300      	moveq	r3, #0
   21512:	e7c0      	b.n	21496 <__strftime+0x51a>
   21514:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   21518:	d106      	bne.n	21528 <__strftime+0x5ac>
   2151a:	f242 730f 	movw	r3, #9999	; 0x270f
   2151e:	429a      	cmp	r2, r3
   21520:	d902      	bls.n	21528 <__strftime+0x5ac>
   21522:	f88d 9020 	strb.w	r9, [sp, #32]
   21526:	e7bf      	b.n	214a8 <__strftime+0x52c>
   21528:	ab08      	add	r3, sp, #32
   2152a:	2125      	movs	r1, #37	; 0x25
   2152c:	7019      	strb	r1, [r3, #0]
   2152e:	f1b9 0f00 	cmp.w	r9, #0
   21532:	d109      	bne.n	21548 <__strftime+0x5cc>
   21534:	1c58      	adds	r0, r3, #1
   21536:	497c      	ldr	r1, [pc, #496]	; (21728 <__strftime+0x7ac>)
   21538:	9205      	str	r2, [sp, #20]
   2153a:	f00a f939 	bl	2b7b0 <strcpy>
   2153e:	9a05      	ldr	r2, [sp, #20]
   21540:	9200      	str	r2, [sp, #0]
   21542:	4643      	mov	r3, r8
   21544:	aa08      	add	r2, sp, #32
   21546:	e058      	b.n	215fa <__strftime+0x67e>
   21548:	2130      	movs	r1, #48	; 0x30
   2154a:	1c98      	adds	r0, r3, #2
   2154c:	7059      	strb	r1, [r3, #1]
   2154e:	e7f2      	b.n	21536 <__strftime+0x5ba>
   21550:	4976      	ldr	r1, [pc, #472]	; (2172c <__strftime+0x7b0>)
   21552:	4a77      	ldr	r2, [pc, #476]	; (21730 <__strftime+0x7b4>)
   21554:	68b3      	ldr	r3, [r6, #8]
   21556:	286b      	cmp	r0, #107	; 0x6b
   21558:	bf08      	it	eq
   2155a:	460a      	moveq	r2, r1
   2155c:	e6c7      	b.n	212ee <__strftime+0x372>
   2155e:	68b3      	ldr	r3, [r6, #8]
   21560:	b163      	cbz	r3, 2157c <__strftime+0x600>
   21562:	2b0c      	cmp	r3, #12
   21564:	d004      	beq.n	21570 <__strftime+0x5f4>
   21566:	210c      	movs	r1, #12
   21568:	fb93 f2f1 	sdiv	r2, r3, r1
   2156c:	fb01 3312 	mls	r3, r1, r2, r3
   21570:	496f      	ldr	r1, [pc, #444]	; (21730 <__strftime+0x7b4>)
   21572:	4a6e      	ldr	r2, [pc, #440]	; (2172c <__strftime+0x7b0>)
   21574:	2849      	cmp	r0, #73	; 0x49
   21576:	bf08      	it	eq
   21578:	460a      	moveq	r2, r1
   2157a:	e6b8      	b.n	212ee <__strftime+0x372>
   2157c:	230c      	movs	r3, #12
   2157e:	e7f7      	b.n	21570 <__strftime+0x5f4>
   21580:	69f3      	ldr	r3, [r6, #28]
   21582:	4a6c      	ldr	r2, [pc, #432]	; (21734 <__strftime+0x7b8>)
   21584:	3301      	adds	r3, #1
   21586:	e6b2      	b.n	212ee <__strftime+0x372>
   21588:	6933      	ldr	r3, [r6, #16]
   2158a:	3301      	adds	r3, #1
   2158c:	e722      	b.n	213d4 <__strftime+0x458>
   2158e:	6873      	ldr	r3, [r6, #4]
   21590:	e720      	b.n	213d4 <__strftime+0x458>
   21592:	1e6b      	subs	r3, r5, #1
   21594:	42a3      	cmp	r3, r4
   21596:	f67f ad23 	bls.w	20fe0 <__strftime+0x64>
   2159a:	230a      	movs	r3, #10
   2159c:	553b      	strb	r3, [r7, r4]
   2159e:	3401      	adds	r4, #1
   215a0:	e5f0      	b.n	21184 <__strftime+0x208>
   215a2:	68b3      	ldr	r3, [r6, #8]
   215a4:	2b0b      	cmp	r3, #11
   215a6:	bfcc      	ite	gt
   215a8:	22a4      	movgt	r2, #164	; 0xa4
   215aa:	22a0      	movle	r2, #160	; 0xa0
   215ac:	4b62      	ldr	r3, [pc, #392]	; (21738 <__strftime+0x7bc>)
   215ae:	4413      	add	r3, r2
   215b0:	f8d3 8004 	ldr.w	r8, [r3, #4]
   215b4:	4640      	mov	r0, r8
   215b6:	f7de ff69 	bl	48c <strlen>
   215ba:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
   215be:	4420      	add	r0, r4
   215c0:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
   215c4:	42a0      	cmp	r0, r4
   215c6:	f43f addd 	beq.w	21184 <__strftime+0x208>
   215ca:	45a4      	cmp	ip, r4
   215cc:	f67f ad08 	bls.w	20fe0 <__strftime+0x64>
   215d0:	f89a 1000 	ldrb.w	r1, [sl]
   215d4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
   215d8:	2950      	cmp	r1, #80	; 0x50
   215da:	d107      	bne.n	215ec <__strftime+0x670>
   215dc:	4957      	ldr	r1, [pc, #348]	; (2173c <__strftime+0x7c0>)
   215de:	5cc9      	ldrb	r1, [r1, r3]
   215e0:	f001 0103 	and.w	r1, r1, #3
   215e4:	2901      	cmp	r1, #1
   215e6:	bf08      	it	eq
   215e8:	3320      	addeq	r3, #32
   215ea:	b2db      	uxtb	r3, r3
   215ec:	553b      	strb	r3, [r7, r4]
   215ee:	3401      	adds	r4, #1
   215f0:	e7e8      	b.n	215c4 <__strftime+0x648>
   215f2:	6873      	ldr	r3, [r6, #4]
   215f4:	9300      	str	r3, [sp, #0]
   215f6:	4a52      	ldr	r2, [pc, #328]	; (21740 <__strftime+0x7c4>)
   215f8:	68b3      	ldr	r3, [r6, #8]
   215fa:	1b29      	subs	r1, r5, r4
   215fc:	1938      	adds	r0, r7, r4
   215fe:	f7ff fbfd 	bl	20dfc <sniprintf>
   21602:	e678      	b.n	212f6 <__strftime+0x37a>
   21604:	6a33      	ldr	r3, [r6, #32]
   21606:	2b00      	cmp	r3, #0
   21608:	db77      	blt.n	216fa <__strftime+0x77e>
   2160a:	9b04      	ldr	r3, [sp, #16]
   2160c:	b90b      	cbnz	r3, 21612 <__strftime+0x696>
   2160e:	f00a f920 	bl	2b852 <_tzset_unlocked>
   21612:	f000 fd23 	bl	2205c <__gettzinfo>
   21616:	6a33      	ldr	r3, [r6, #32]
   21618:	2b00      	cmp	r3, #0
   2161a:	bfcc      	ite	gt
   2161c:	2350      	movgt	r3, #80	; 0x50
   2161e:	2328      	movle	r3, #40	; 0x28
   21620:	58c3      	ldr	r3, [r0, r3]
   21622:	f1c3 0900 	rsb	r9, r3, #0
   21626:	2301      	movs	r3, #1
   21628:	9304      	str	r3, [sp, #16]
   2162a:	f8d6 c014 	ldr.w	ip, [r6, #20]
   2162e:	4662      	mov	r2, ip
   21630:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
   21634:	ea4f 73e2 	mov.w	r3, r2, asr #31
   21638:	9102      	str	r1, [sp, #8]
   2163a:	f143 31ff 	adc.w	r1, r3, #4294967295	; 0xffffffff
   2163e:	9103      	str	r1, [sp, #12]
   21640:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   21644:	2800      	cmp	r0, #0
   21646:	f171 0100 	sbcs.w	r1, r1, #0
   2164a:	eba5 0e04 	sub.w	lr, r5, r4
   2164e:	eb07 0804 	add.w	r8, r7, r4
   21652:	da05      	bge.n	21660 <__strftime+0x6e4>
   21654:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
   21658:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   2165c:	9102      	str	r1, [sp, #8]
   2165e:	9303      	str	r3, [sp, #12]
   21660:	9b02      	ldr	r3, [sp, #8]
   21662:	0898      	lsrs	r0, r3, #2
   21664:	9b03      	ldr	r3, [sp, #12]
   21666:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
   2166a:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
   2166e:	1099      	asrs	r1, r3, #2
   21670:	2364      	movs	r3, #100	; 0x64
   21672:	fb92 f3f3 	sdiv	r3, r2, r3
   21676:	1ac0      	subs	r0, r0, r3
   21678:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
   2167c:	f20c 122b 	addw	r2, ip, #299	; 0x12b
   21680:	f44f 73c8 	mov.w	r3, #400	; 0x190
   21684:	fb92 f3f3 	sdiv	r3, r2, r3
   21688:	18c0      	adds	r0, r0, r3
   2168a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   2168e:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
   21692:	f240 136d 	movw	r3, #365	; 0x16d
   21696:	fb03 fc0c 	mul.w	ip, r3, ip
   2169a:	69f3      	ldr	r3, [r6, #28]
   2169c:	eb10 000c 	adds.w	r0, r0, ip
   216a0:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
   216a4:	18c0      	adds	r0, r0, r3
   216a6:	f04f 0c18 	mov.w	ip, #24
   216aa:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   216ae:	fba0 230c 	umull	r2, r3, r0, ip
   216b2:	fb0c 3301 	mla	r3, ip, r1, r3
   216b6:	68b1      	ldr	r1, [r6, #8]
   216b8:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   216bc:	1852      	adds	r2, r2, r1
   216be:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   216c2:	fba2 010c 	umull	r0, r1, r2, ip
   216c6:	fb0c 1103 	mla	r1, ip, r3, r1
   216ca:	6873      	ldr	r3, [r6, #4]
   216cc:	18c0      	adds	r0, r0, r3
   216ce:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   216d2:	fba0 230c 	umull	r2, r3, r0, ip
   216d6:	fb0c 3301 	mla	r3, ip, r1, r3
   216da:	6831      	ldr	r1, [r6, #0]
   216dc:	1852      	adds	r2, r2, r1
   216de:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   216e2:	ebb2 0209 	subs.w	r2, r2, r9
   216e6:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
   216ea:	e9cd 2300 	strd	r2, r3, [sp]
   216ee:	4671      	mov	r1, lr
   216f0:	4a14      	ldr	r2, [pc, #80]	; (21744 <__strftime+0x7c8>)
   216f2:	4640      	mov	r0, r8
   216f4:	f7ff fb82 	bl	20dfc <sniprintf>
   216f8:	e5fd      	b.n	212f6 <__strftime+0x37a>
   216fa:	f04f 0900 	mov.w	r9, #0
   216fe:	e794      	b.n	2162a <__strftime+0x6ae>
   21700:	6833      	ldr	r3, [r6, #0]
   21702:	e667      	b.n	213d4 <__strftime+0x458>
   21704:	1e6b      	subs	r3, r5, #1
   21706:	42a3      	cmp	r3, r4
   21708:	f67f ac6a 	bls.w	20fe0 <__strftime+0x64>
   2170c:	2309      	movs	r3, #9
   2170e:	e745      	b.n	2159c <__strftime+0x620>
   21710:	6833      	ldr	r3, [r6, #0]
   21712:	9301      	str	r3, [sp, #4]
   21714:	6873      	ldr	r3, [r6, #4]
   21716:	9300      	str	r3, [sp, #0]
   21718:	4a0b      	ldr	r2, [pc, #44]	; (21748 <__strftime+0x7cc>)
   2171a:	68b3      	ldr	r3, [r6, #8]
   2171c:	e5dc      	b.n	212d8 <__strftime+0x35c>
   2171e:	bf00      	nop
   21720:	fffff894 	.word	0xfffff894
   21724:	fffff895 	.word	0xfffff895
   21728:	00039468 	.word	0x00039468
   2172c:	0002ddf0 	.word	0x0002ddf0
   21730:	00039457 	.word	0x00039457
   21734:	0003946c 	.word	0x0003946c
   21738:	0002d9dc 	.word	0x0002d9dc
   2173c:	0003933c 	.word	0x0003933c
   21740:	0003947b 	.word	0x0003947b
   21744:	00039471 	.word	0x00039471
   21748:	00039476 	.word	0x00039476
   2174c:	1e6b      	subs	r3, r5, #1
   2174e:	42a3      	cmp	r3, r4
   21750:	f67f ac46 	bls.w	20fe0 <__strftime+0x64>
   21754:	69b3      	ldr	r3, [r6, #24]
   21756:	193a      	adds	r2, r7, r4
   21758:	3401      	adds	r4, #1
   2175a:	b913      	cbnz	r3, 21762 <__strftime+0x7e6>
   2175c:	2337      	movs	r3, #55	; 0x37
   2175e:	7013      	strb	r3, [r2, #0]
   21760:	e510      	b.n	21184 <__strftime+0x208>
   21762:	3330      	adds	r3, #48	; 0x30
   21764:	e7fb      	b.n	2175e <__strftime+0x7e2>
   21766:	69f3      	ldr	r3, [r6, #28]
   21768:	69b2      	ldr	r2, [r6, #24]
   2176a:	3307      	adds	r3, #7
   2176c:	1a9b      	subs	r3, r3, r2
   2176e:	2207      	movs	r2, #7
   21770:	fb93 f3f2 	sdiv	r3, r3, r2
   21774:	e62e      	b.n	213d4 <__strftime+0x458>
   21776:	4630      	mov	r0, r6
   21778:	f7ff fb9e 	bl	20eb8 <iso_year_adjust>
   2177c:	69b2      	ldr	r2, [r6, #24]
   2177e:	b132      	cbz	r2, 2178e <__strftime+0x812>
   21780:	3a01      	subs	r2, #1
   21782:	2800      	cmp	r0, #0
   21784:	dc28      	bgt.n	217d8 <__strftime+0x85c>
   21786:	69f3      	ldr	r3, [r6, #28]
   21788:	d103      	bne.n	21792 <__strftime+0x816>
   2178a:	330a      	adds	r3, #10
   2178c:	e7ee      	b.n	2176c <__strftime+0x7f0>
   2178e:	2206      	movs	r2, #6
   21790:	e7f7      	b.n	21782 <__strftime+0x806>
   21792:	6970      	ldr	r0, [r6, #20]
   21794:	2800      	cmp	r0, #0
   21796:	eba2 0303 	sub.w	r3, r2, r3
   2179a:	f240 726b 	movw	r2, #1899	; 0x76b
   2179e:	bfa8      	it	ge
   217a0:	f06f 0264 	mvnge.w	r2, #100	; 0x64
   217a4:	4410      	add	r0, r2
   217a6:	0782      	lsls	r2, r0, #30
   217a8:	d105      	bne.n	217b6 <__strftime+0x83a>
   217aa:	2264      	movs	r2, #100	; 0x64
   217ac:	fb90 f1f2 	sdiv	r1, r0, r2
   217b0:	fb02 0111 	mls	r1, r2, r1, r0
   217b4:	b971      	cbnz	r1, 217d4 <__strftime+0x858>
   217b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
   217ba:	fb90 f2f1 	sdiv	r2, r0, r1
   217be:	fb01 0212 	mls	r2, r1, r2, r0
   217c2:	fab2 f282 	clz	r2, r2
   217c6:	0952      	lsrs	r2, r2, #5
   217c8:	1a9a      	subs	r2, r3, r2
   217ca:	2a05      	cmp	r2, #5
   217cc:	bfb4      	ite	lt
   217ce:	2335      	movlt	r3, #53	; 0x35
   217d0:	2334      	movge	r3, #52	; 0x34
   217d2:	e5ff      	b.n	213d4 <__strftime+0x458>
   217d4:	2201      	movs	r2, #1
   217d6:	e7f7      	b.n	217c8 <__strftime+0x84c>
   217d8:	2301      	movs	r3, #1
   217da:	e5fb      	b.n	213d4 <__strftime+0x458>
   217dc:	1e6b      	subs	r3, r5, #1
   217de:	42a3      	cmp	r3, r4
   217e0:	f67f abfe 	bls.w	20fe0 <__strftime+0x64>
   217e4:	69b3      	ldr	r3, [r6, #24]
   217e6:	3330      	adds	r3, #48	; 0x30
   217e8:	e6d8      	b.n	2159c <__strftime+0x620>
   217ea:	69b3      	ldr	r3, [r6, #24]
   217ec:	b13b      	cbz	r3, 217fe <__strftime+0x882>
   217ee:	3b01      	subs	r3, #1
   217f0:	69f2      	ldr	r2, [r6, #28]
   217f2:	3207      	adds	r2, #7
   217f4:	1ad2      	subs	r2, r2, r3
   217f6:	2307      	movs	r3, #7
   217f8:	fb92 f3f3 	sdiv	r3, r2, r3
   217fc:	e5ea      	b.n	213d4 <__strftime+0x458>
   217fe:	2306      	movs	r3, #6
   21800:	e7f6      	b.n	217f0 <__strftime+0x874>
   21802:	6970      	ldr	r0, [r6, #20]
   21804:	2800      	cmp	r0, #0
   21806:	db05      	blt.n	21814 <__strftime+0x898>
   21808:	2264      	movs	r2, #100	; 0x64
   2180a:	fb90 f3f2 	sdiv	r3, r0, r2
   2180e:	fb03 0312 	mls	r3, r3, r2, r0
   21812:	e5df      	b.n	213d4 <__strftime+0x458>
   21814:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   21818:	f00a f849 	bl	2b8ae <abs>
   2181c:	e7f4      	b.n	21808 <__strftime+0x88c>
   2181e:	6973      	ldr	r3, [r6, #20]
   21820:	4a47      	ldr	r2, [pc, #284]	; (21940 <__strftime+0x9c4>)
   21822:	4293      	cmp	r3, r2
   21824:	da0c      	bge.n	21840 <__strftime+0x8c4>
   21826:	212d      	movs	r1, #45	; 0x2d
   21828:	f88d 1020 	strb.w	r1, [sp, #32]
   2182c:	eba2 0b03 	sub.w	fp, r2, r3
   21830:	f1b8 0f00 	cmp.w	r8, #0
   21834:	d001      	beq.n	2183a <__strftime+0x8be>
   21836:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2183a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
   2183e:	e00c      	b.n	2185a <__strftime+0x8de>
   21840:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
   21844:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   21848:	d106      	bne.n	21858 <__strftime+0x8dc>
   2184a:	f242 730f 	movw	r3, #9999	; 0x270f
   2184e:	459b      	cmp	fp, r3
   21850:	d902      	bls.n	21858 <__strftime+0x8dc>
   21852:	f88d 9020 	strb.w	r9, [sp, #32]
   21856:	e7eb      	b.n	21830 <__strftime+0x8b4>
   21858:	ab08      	add	r3, sp, #32
   2185a:	2225      	movs	r2, #37	; 0x25
   2185c:	701a      	strb	r2, [r3, #0]
   2185e:	f1b9 0f00 	cmp.w	r9, #0
   21862:	d106      	bne.n	21872 <__strftime+0x8f6>
   21864:	1c58      	adds	r0, r3, #1
   21866:	4937      	ldr	r1, [pc, #220]	; (21944 <__strftime+0x9c8>)
   21868:	f009 ffa2 	bl	2b7b0 <strcpy>
   2186c:	f8cd b000 	str.w	fp, [sp]
   21870:	e667      	b.n	21542 <__strftime+0x5c6>
   21872:	2230      	movs	r2, #48	; 0x30
   21874:	1c98      	adds	r0, r3, #2
   21876:	705a      	strb	r2, [r3, #1]
   21878:	e7f5      	b.n	21866 <__strftime+0x8ea>
   2187a:	6a33      	ldr	r3, [r6, #32]
   2187c:	2b00      	cmp	r3, #0
   2187e:	f6ff ac81 	blt.w	21184 <__strftime+0x208>
   21882:	9b04      	ldr	r3, [sp, #16]
   21884:	b90b      	cbnz	r3, 2188a <__strftime+0x90e>
   21886:	f009 ffe4 	bl	2b852 <_tzset_unlocked>
   2188a:	f000 fbe7 	bl	2205c <__gettzinfo>
   2188e:	6a33      	ldr	r3, [r6, #32]
   21890:	2b00      	cmp	r3, #0
   21892:	bfcc      	ite	gt
   21894:	2350      	movgt	r3, #80	; 0x50
   21896:	2328      	movle	r3, #40	; 0x28
   21898:	eb07 0804 	add.w	r8, r7, r4
   2189c:	58c3      	ldr	r3, [r0, r3]
   2189e:	f1c3 0b00 	rsb	fp, r3, #0
   218a2:	233c      	movs	r3, #60	; 0x3c
   218a4:	fb9b f0f3 	sdiv	r0, fp, r3
   218a8:	f00a f820 	bl	2b8ec <labs>
   218ac:	233c      	movs	r3, #60	; 0x3c
   218ae:	eba5 0904 	sub.w	r9, r5, r4
   218b2:	fb90 f2f3 	sdiv	r2, r0, r3
   218b6:	fb02 0013 	mls	r0, r2, r3, r0
   218ba:	9000      	str	r0, [sp, #0]
   218bc:	4a22      	ldr	r2, [pc, #136]	; (21948 <__strftime+0x9cc>)
   218be:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   218c2:	4649      	mov	r1, r9
   218c4:	4640      	mov	r0, r8
   218c6:	fb9b f3f3 	sdiv	r3, fp, r3
   218ca:	f7ff fa97 	bl	20dfc <sniprintf>
   218ce:	2800      	cmp	r0, #0
   218d0:	f6ff ab86 	blt.w	20fe0 <__strftime+0x64>
   218d4:	4404      	add	r4, r0
   218d6:	42a5      	cmp	r5, r4
   218d8:	f67f ab82 	bls.w	20fe0 <__strftime+0x64>
   218dc:	2301      	movs	r3, #1
   218de:	9304      	str	r3, [sp, #16]
   218e0:	e450      	b.n	21184 <__strftime+0x208>
   218e2:	6a33      	ldr	r3, [r6, #32]
   218e4:	2b00      	cmp	r3, #0
   218e6:	f6ff ac4d 	blt.w	21184 <__strftime+0x208>
   218ea:	9b04      	ldr	r3, [sp, #16]
   218ec:	b90b      	cbnz	r3, 218f2 <__strftime+0x976>
   218ee:	f009 ffb0 	bl	2b852 <_tzset_unlocked>
   218f2:	6a33      	ldr	r3, [r6, #32]
   218f4:	4a15      	ldr	r2, [pc, #84]	; (2194c <__strftime+0x9d0>)
   218f6:	2b00      	cmp	r3, #0
   218f8:	bfd4      	ite	le
   218fa:	2300      	movle	r3, #0
   218fc:	2301      	movgt	r3, #1
   218fe:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   21902:	4640      	mov	r0, r8
   21904:	f7de fdc2 	bl	48c <strlen>
   21908:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2190c:	4420      	add	r0, r4
   2190e:	1e6b      	subs	r3, r5, #1
   21910:	42a0      	cmp	r0, r4
   21912:	d0e3      	beq.n	218dc <__strftime+0x960>
   21914:	42a3      	cmp	r3, r4
   21916:	f67f ab63 	bls.w	20fe0 <__strftime+0x64>
   2191a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   2191e:	553a      	strb	r2, [r7, r4]
   21920:	3401      	adds	r4, #1
   21922:	e7f5      	b.n	21910 <__strftime+0x994>
   21924:	1e6b      	subs	r3, r5, #1
   21926:	42a3      	cmp	r3, r4
   21928:	f67f ab5a 	bls.w	20fe0 <__strftime+0x64>
   2192c:	2325      	movs	r3, #37	; 0x25
   2192e:	e635      	b.n	2159c <__strftime+0x620>
   21930:	b10d      	cbz	r5, 21936 <__strftime+0x9ba>
   21932:	2300      	movs	r3, #0
   21934:	553b      	strb	r3, [r7, r4]
   21936:	4620      	mov	r0, r4
   21938:	b011      	add	sp, #68	; 0x44
   2193a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2193e:	bf00      	nop
   21940:	fffff894 	.word	0xfffff894
   21944:	00039468 	.word	0x00039468
   21948:	00039485 	.word	0x00039485
   2194c:	20000820 	.word	0x20000820

00021950 <strftime>:
   21950:	b513      	push	{r0, r1, r4, lr}
   21952:	4c03      	ldr	r4, [pc, #12]	; (21960 <strftime+0x10>)
   21954:	9400      	str	r4, [sp, #0]
   21956:	f7ff fb11 	bl	20f7c <__strftime>
   2195a:	b002      	add	sp, #8
   2195c:	bd10      	pop	{r4, pc}
   2195e:	bf00      	nop
   21960:	2000088c 	.word	0x2000088c

00021964 <_strtol_l.isra.0>:
   21964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21968:	4e3a      	ldr	r6, [pc, #232]	; (21a54 <_strtol_l.isra.0+0xf0>)
   2196a:	4686      	mov	lr, r0
   2196c:	468c      	mov	ip, r1
   2196e:	4660      	mov	r0, ip
   21970:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21974:	5da5      	ldrb	r5, [r4, r6]
   21976:	f015 0508 	ands.w	r5, r5, #8
   2197a:	d1f8      	bne.n	2196e <_strtol_l.isra.0+0xa>
   2197c:	2c2d      	cmp	r4, #45	; 0x2d
   2197e:	d133      	bne.n	219e8 <_strtol_l.isra.0+0x84>
   21980:	f89c 4000 	ldrb.w	r4, [ip]
   21984:	f04f 0801 	mov.w	r8, #1
   21988:	f100 0c02 	add.w	ip, r0, #2
   2198c:	2b00      	cmp	r3, #0
   2198e:	d05c      	beq.n	21a4a <_strtol_l.isra.0+0xe6>
   21990:	2b10      	cmp	r3, #16
   21992:	d10c      	bne.n	219ae <_strtol_l.isra.0+0x4a>
   21994:	2c30      	cmp	r4, #48	; 0x30
   21996:	d10a      	bne.n	219ae <_strtol_l.isra.0+0x4a>
   21998:	f89c 0000 	ldrb.w	r0, [ip]
   2199c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   219a0:	2858      	cmp	r0, #88	; 0x58
   219a2:	d14d      	bne.n	21a40 <_strtol_l.isra.0+0xdc>
   219a4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   219a8:	2310      	movs	r3, #16
   219aa:	f10c 0c02 	add.w	ip, ip, #2
   219ae:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   219b2:	3f01      	subs	r7, #1
   219b4:	2600      	movs	r6, #0
   219b6:	fbb7 f9f3 	udiv	r9, r7, r3
   219ba:	4630      	mov	r0, r6
   219bc:	fb03 7a19 	mls	sl, r3, r9, r7
   219c0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   219c4:	2d09      	cmp	r5, #9
   219c6:	d818      	bhi.n	219fa <_strtol_l.isra.0+0x96>
   219c8:	462c      	mov	r4, r5
   219ca:	42a3      	cmp	r3, r4
   219cc:	dd24      	ble.n	21a18 <_strtol_l.isra.0+0xb4>
   219ce:	1c75      	adds	r5, r6, #1
   219d0:	d007      	beq.n	219e2 <_strtol_l.isra.0+0x7e>
   219d2:	4581      	cmp	r9, r0
   219d4:	d31d      	bcc.n	21a12 <_strtol_l.isra.0+0xae>
   219d6:	d101      	bne.n	219dc <_strtol_l.isra.0+0x78>
   219d8:	45a2      	cmp	sl, r4
   219da:	db1a      	blt.n	21a12 <_strtol_l.isra.0+0xae>
   219dc:	fb00 4003 	mla	r0, r0, r3, r4
   219e0:	2601      	movs	r6, #1
   219e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   219e6:	e7eb      	b.n	219c0 <_strtol_l.isra.0+0x5c>
   219e8:	2c2b      	cmp	r4, #43	; 0x2b
   219ea:	bf08      	it	eq
   219ec:	f89c 4000 	ldrbeq.w	r4, [ip]
   219f0:	46a8      	mov	r8, r5
   219f2:	bf08      	it	eq
   219f4:	f100 0c02 	addeq.w	ip, r0, #2
   219f8:	e7c8      	b.n	2198c <_strtol_l.isra.0+0x28>
   219fa:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   219fe:	2d19      	cmp	r5, #25
   21a00:	d801      	bhi.n	21a06 <_strtol_l.isra.0+0xa2>
   21a02:	3c37      	subs	r4, #55	; 0x37
   21a04:	e7e1      	b.n	219ca <_strtol_l.isra.0+0x66>
   21a06:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   21a0a:	2d19      	cmp	r5, #25
   21a0c:	d804      	bhi.n	21a18 <_strtol_l.isra.0+0xb4>
   21a0e:	3c57      	subs	r4, #87	; 0x57
   21a10:	e7db      	b.n	219ca <_strtol_l.isra.0+0x66>
   21a12:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21a16:	e7e4      	b.n	219e2 <_strtol_l.isra.0+0x7e>
   21a18:	1c73      	adds	r3, r6, #1
   21a1a:	d106      	bne.n	21a2a <_strtol_l.isra.0+0xc6>
   21a1c:	2322      	movs	r3, #34	; 0x22
   21a1e:	f8ce 3000 	str.w	r3, [lr]
   21a22:	4638      	mov	r0, r7
   21a24:	b942      	cbnz	r2, 21a38 <_strtol_l.isra.0+0xd4>
   21a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21a2a:	f1b8 0f00 	cmp.w	r8, #0
   21a2e:	d000      	beq.n	21a32 <_strtol_l.isra.0+0xce>
   21a30:	4240      	negs	r0, r0
   21a32:	2a00      	cmp	r2, #0
   21a34:	d0f7      	beq.n	21a26 <_strtol_l.isra.0+0xc2>
   21a36:	b10e      	cbz	r6, 21a3c <_strtol_l.isra.0+0xd8>
   21a38:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   21a3c:	6011      	str	r1, [r2, #0]
   21a3e:	e7f2      	b.n	21a26 <_strtol_l.isra.0+0xc2>
   21a40:	2430      	movs	r4, #48	; 0x30
   21a42:	2b00      	cmp	r3, #0
   21a44:	d1b3      	bne.n	219ae <_strtol_l.isra.0+0x4a>
   21a46:	2308      	movs	r3, #8
   21a48:	e7b1      	b.n	219ae <_strtol_l.isra.0+0x4a>
   21a4a:	2c30      	cmp	r4, #48	; 0x30
   21a4c:	d0a4      	beq.n	21998 <_strtol_l.isra.0+0x34>
   21a4e:	230a      	movs	r3, #10
   21a50:	e7ad      	b.n	219ae <_strtol_l.isra.0+0x4a>
   21a52:	bf00      	nop
   21a54:	0003933c 	.word	0x0003933c

00021a58 <strtol>:
   21a58:	4613      	mov	r3, r2
   21a5a:	460a      	mov	r2, r1
   21a5c:	4601      	mov	r1, r0
   21a5e:	4802      	ldr	r0, [pc, #8]	; (21a68 <strtol+0x10>)
   21a60:	6800      	ldr	r0, [r0, #0]
   21a62:	f7ff bf7f 	b.w	21964 <_strtol_l.isra.0>
   21a66:	bf00      	nop
   21a68:	20000828 	.word	0x20000828

00021a6c <_strtoul_l.isra.0>:
   21a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21a70:	4e3b      	ldr	r6, [pc, #236]	; (21b60 <_strtoul_l.isra.0+0xf4>)
   21a72:	4686      	mov	lr, r0
   21a74:	468c      	mov	ip, r1
   21a76:	4660      	mov	r0, ip
   21a78:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21a7c:	5da5      	ldrb	r5, [r4, r6]
   21a7e:	f015 0508 	ands.w	r5, r5, #8
   21a82:	d1f8      	bne.n	21a76 <_strtoul_l.isra.0+0xa>
   21a84:	2c2d      	cmp	r4, #45	; 0x2d
   21a86:	d134      	bne.n	21af2 <_strtoul_l.isra.0+0x86>
   21a88:	f89c 4000 	ldrb.w	r4, [ip]
   21a8c:	f04f 0801 	mov.w	r8, #1
   21a90:	f100 0c02 	add.w	ip, r0, #2
   21a94:	2b00      	cmp	r3, #0
   21a96:	d05e      	beq.n	21b56 <_strtoul_l.isra.0+0xea>
   21a98:	2b10      	cmp	r3, #16
   21a9a:	d10c      	bne.n	21ab6 <_strtoul_l.isra.0+0x4a>
   21a9c:	2c30      	cmp	r4, #48	; 0x30
   21a9e:	d10a      	bne.n	21ab6 <_strtoul_l.isra.0+0x4a>
   21aa0:	f89c 0000 	ldrb.w	r0, [ip]
   21aa4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   21aa8:	2858      	cmp	r0, #88	; 0x58
   21aaa:	d14f      	bne.n	21b4c <_strtoul_l.isra.0+0xe0>
   21aac:	f89c 4001 	ldrb.w	r4, [ip, #1]
   21ab0:	2310      	movs	r3, #16
   21ab2:	f10c 0c02 	add.w	ip, ip, #2
   21ab6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21aba:	2500      	movs	r5, #0
   21abc:	fbb7 f7f3 	udiv	r7, r7, r3
   21ac0:	fb03 f907 	mul.w	r9, r3, r7
   21ac4:	ea6f 0909 	mvn.w	r9, r9
   21ac8:	4628      	mov	r0, r5
   21aca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   21ace:	2e09      	cmp	r6, #9
   21ad0:	d818      	bhi.n	21b04 <_strtoul_l.isra.0+0x98>
   21ad2:	4634      	mov	r4, r6
   21ad4:	42a3      	cmp	r3, r4
   21ad6:	dd24      	ble.n	21b22 <_strtoul_l.isra.0+0xb6>
   21ad8:	2d00      	cmp	r5, #0
   21ada:	db1f      	blt.n	21b1c <_strtoul_l.isra.0+0xb0>
   21adc:	4287      	cmp	r7, r0
   21ade:	d31d      	bcc.n	21b1c <_strtoul_l.isra.0+0xb0>
   21ae0:	d101      	bne.n	21ae6 <_strtoul_l.isra.0+0x7a>
   21ae2:	45a1      	cmp	r9, r4
   21ae4:	db1a      	blt.n	21b1c <_strtoul_l.isra.0+0xb0>
   21ae6:	fb00 4003 	mla	r0, r0, r3, r4
   21aea:	2501      	movs	r5, #1
   21aec:	f81c 4b01 	ldrb.w	r4, [ip], #1
   21af0:	e7eb      	b.n	21aca <_strtoul_l.isra.0+0x5e>
   21af2:	2c2b      	cmp	r4, #43	; 0x2b
   21af4:	bf08      	it	eq
   21af6:	f89c 4000 	ldrbeq.w	r4, [ip]
   21afa:	46a8      	mov	r8, r5
   21afc:	bf08      	it	eq
   21afe:	f100 0c02 	addeq.w	ip, r0, #2
   21b02:	e7c7      	b.n	21a94 <_strtoul_l.isra.0+0x28>
   21b04:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   21b08:	2e19      	cmp	r6, #25
   21b0a:	d801      	bhi.n	21b10 <_strtoul_l.isra.0+0xa4>
   21b0c:	3c37      	subs	r4, #55	; 0x37
   21b0e:	e7e1      	b.n	21ad4 <_strtoul_l.isra.0+0x68>
   21b10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   21b14:	2e19      	cmp	r6, #25
   21b16:	d804      	bhi.n	21b22 <_strtoul_l.isra.0+0xb6>
   21b18:	3c57      	subs	r4, #87	; 0x57
   21b1a:	e7db      	b.n	21ad4 <_strtoul_l.isra.0+0x68>
   21b1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   21b20:	e7e4      	b.n	21aec <_strtoul_l.isra.0+0x80>
   21b22:	2d00      	cmp	r5, #0
   21b24:	da07      	bge.n	21b36 <_strtoul_l.isra.0+0xca>
   21b26:	2322      	movs	r3, #34	; 0x22
   21b28:	f8ce 3000 	str.w	r3, [lr]
   21b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21b30:	b942      	cbnz	r2, 21b44 <_strtoul_l.isra.0+0xd8>
   21b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21b36:	f1b8 0f00 	cmp.w	r8, #0
   21b3a:	d000      	beq.n	21b3e <_strtoul_l.isra.0+0xd2>
   21b3c:	4240      	negs	r0, r0
   21b3e:	2a00      	cmp	r2, #0
   21b40:	d0f7      	beq.n	21b32 <_strtoul_l.isra.0+0xc6>
   21b42:	b10d      	cbz	r5, 21b48 <_strtoul_l.isra.0+0xdc>
   21b44:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   21b48:	6011      	str	r1, [r2, #0]
   21b4a:	e7f2      	b.n	21b32 <_strtoul_l.isra.0+0xc6>
   21b4c:	2430      	movs	r4, #48	; 0x30
   21b4e:	2b00      	cmp	r3, #0
   21b50:	d1b1      	bne.n	21ab6 <_strtoul_l.isra.0+0x4a>
   21b52:	2308      	movs	r3, #8
   21b54:	e7af      	b.n	21ab6 <_strtoul_l.isra.0+0x4a>
   21b56:	2c30      	cmp	r4, #48	; 0x30
   21b58:	d0a2      	beq.n	21aa0 <_strtoul_l.isra.0+0x34>
   21b5a:	230a      	movs	r3, #10
   21b5c:	e7ab      	b.n	21ab6 <_strtoul_l.isra.0+0x4a>
   21b5e:	bf00      	nop
   21b60:	0003933c 	.word	0x0003933c

00021b64 <strtoul>:
   21b64:	4613      	mov	r3, r2
   21b66:	460a      	mov	r2, r1
   21b68:	4601      	mov	r1, r0
   21b6a:	4802      	ldr	r0, [pc, #8]	; (21b74 <strtoul+0x10>)
   21b6c:	6800      	ldr	r0, [r0, #0]
   21b6e:	f7ff bf7d 	b.w	21a6c <_strtoul_l.isra.0>
   21b72:	bf00      	nop
   21b74:	20000828 	.word	0x20000828

00021b78 <__tzcalc_limits>:
   21b78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b7c:	4680      	mov	r8, r0
   21b7e:	f000 fa6d 	bl	2205c <__gettzinfo>
   21b82:	f240 73b1 	movw	r3, #1969	; 0x7b1
   21b86:	4598      	cmp	r8, r3
   21b88:	f340 8098 	ble.w	21cbc <__tzcalc_limits+0x144>
   21b8c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   21b90:	4443      	add	r3, r8
   21b92:	109b      	asrs	r3, r3, #2
   21b94:	f240 126d 	movw	r2, #365	; 0x16d
   21b98:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   21b9c:	fb02 3505 	mla	r5, r2, r5, r3
   21ba0:	f06f 0263 	mvn.w	r2, #99	; 0x63
   21ba4:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   21ba8:	fb93 f3f2 	sdiv	r3, r3, r2
   21bac:	441d      	add	r5, r3
   21bae:	f44f 73c8 	mov.w	r3, #400	; 0x190
   21bb2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   21bb6:	fb98 f7f3 	sdiv	r7, r8, r3
   21bba:	fb03 8717 	mls	r7, r3, r7, r8
   21bbe:	4442      	add	r2, r8
   21bc0:	fab7 fc87 	clz	ip, r7
   21bc4:	fbb2 f2f3 	udiv	r2, r2, r3
   21bc8:	f008 0303 	and.w	r3, r8, #3
   21bcc:	4415      	add	r5, r2
   21bce:	2264      	movs	r2, #100	; 0x64
   21bd0:	f8c0 8004 	str.w	r8, [r0, #4]
   21bd4:	fb98 f6f2 	sdiv	r6, r8, r2
   21bd8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   21bdc:	fb02 8616 	mls	r6, r2, r6, r8
   21be0:	4604      	mov	r4, r0
   21be2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   21be6:	9300      	str	r3, [sp, #0]
   21be8:	f04f 0e07 	mov.w	lr, #7
   21bec:	7a22      	ldrb	r2, [r4, #8]
   21bee:	6963      	ldr	r3, [r4, #20]
   21bf0:	2a4a      	cmp	r2, #74	; 0x4a
   21bf2:	d128      	bne.n	21c46 <__tzcalc_limits+0xce>
   21bf4:	9900      	ldr	r1, [sp, #0]
   21bf6:	18ea      	adds	r2, r5, r3
   21bf8:	b901      	cbnz	r1, 21bfc <__tzcalc_limits+0x84>
   21bfa:	b906      	cbnz	r6, 21bfe <__tzcalc_limits+0x86>
   21bfc:	bb0f      	cbnz	r7, 21c42 <__tzcalc_limits+0xca>
   21bfe:	2b3b      	cmp	r3, #59	; 0x3b
   21c00:	bfd4      	ite	le
   21c02:	2300      	movle	r3, #0
   21c04:	2301      	movgt	r3, #1
   21c06:	4413      	add	r3, r2
   21c08:	1e5a      	subs	r2, r3, #1
   21c0a:	69a3      	ldr	r3, [r4, #24]
   21c0c:	492c      	ldr	r1, [pc, #176]	; (21cc0 <__tzcalc_limits+0x148>)
   21c0e:	fb01 3202 	mla	r2, r1, r2, r3
   21c12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   21c14:	4413      	add	r3, r2
   21c16:	461a      	mov	r2, r3
   21c18:	17db      	asrs	r3, r3, #31
   21c1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
   21c1e:	3428      	adds	r4, #40	; 0x28
   21c20:	45a3      	cmp	fp, r4
   21c22:	d1e3      	bne.n	21bec <__tzcalc_limits+0x74>
   21c24:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   21c28:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   21c2c:	4294      	cmp	r4, r2
   21c2e:	eb75 0303 	sbcs.w	r3, r5, r3
   21c32:	bfb4      	ite	lt
   21c34:	2301      	movlt	r3, #1
   21c36:	2300      	movge	r3, #0
   21c38:	6003      	str	r3, [r0, #0]
   21c3a:	2001      	movs	r0, #1
   21c3c:	b003      	add	sp, #12
   21c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c42:	2300      	movs	r3, #0
   21c44:	e7df      	b.n	21c06 <__tzcalc_limits+0x8e>
   21c46:	2a44      	cmp	r2, #68	; 0x44
   21c48:	d101      	bne.n	21c4e <__tzcalc_limits+0xd6>
   21c4a:	18ea      	adds	r2, r5, r3
   21c4c:	e7dd      	b.n	21c0a <__tzcalc_limits+0x92>
   21c4e:	9a00      	ldr	r2, [sp, #0]
   21c50:	bb72      	cbnz	r2, 21cb0 <__tzcalc_limits+0x138>
   21c52:	2e00      	cmp	r6, #0
   21c54:	bf0c      	ite	eq
   21c56:	46e0      	moveq	r8, ip
   21c58:	f04f 0801 	movne.w	r8, #1
   21c5c:	4919      	ldr	r1, [pc, #100]	; (21cc4 <__tzcalc_limits+0x14c>)
   21c5e:	68e2      	ldr	r2, [r4, #12]
   21c60:	9201      	str	r2, [sp, #4]
   21c62:	f04f 0a30 	mov.w	sl, #48	; 0x30
   21c66:	fb0a 1808 	mla	r8, sl, r8, r1
   21c6a:	462a      	mov	r2, r5
   21c6c:	f04f 0900 	mov.w	r9, #0
   21c70:	f1a8 0804 	sub.w	r8, r8, #4
   21c74:	9901      	ldr	r1, [sp, #4]
   21c76:	f109 0901 	add.w	r9, r9, #1
   21c7a:	4549      	cmp	r1, r9
   21c7c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   21c80:	dc18      	bgt.n	21cb4 <__tzcalc_limits+0x13c>
   21c82:	f102 0804 	add.w	r8, r2, #4
   21c86:	fb98 f9fe 	sdiv	r9, r8, lr
   21c8a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   21c8e:	eba8 0909 	sub.w	r9, r8, r9
   21c92:	ebb3 0909 	subs.w	r9, r3, r9
   21c96:	6923      	ldr	r3, [r4, #16]
   21c98:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   21c9c:	bf48      	it	mi
   21c9e:	f109 0907 	addmi.w	r9, r9, #7
   21ca2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   21ca6:	444b      	add	r3, r9
   21ca8:	4553      	cmp	r3, sl
   21caa:	da05      	bge.n	21cb8 <__tzcalc_limits+0x140>
   21cac:	441a      	add	r2, r3
   21cae:	e7ac      	b.n	21c0a <__tzcalc_limits+0x92>
   21cb0:	46e0      	mov	r8, ip
   21cb2:	e7d3      	b.n	21c5c <__tzcalc_limits+0xe4>
   21cb4:	4452      	add	r2, sl
   21cb6:	e7dd      	b.n	21c74 <__tzcalc_limits+0xfc>
   21cb8:	3b07      	subs	r3, #7
   21cba:	e7f5      	b.n	21ca8 <__tzcalc_limits+0x130>
   21cbc:	2000      	movs	r0, #0
   21cbe:	e7bd      	b.n	21c3c <__tzcalc_limits+0xc4>
   21cc0:	00015180 	.word	0x00015180
   21cc4:	0002dad8 	.word	0x0002dad8

00021cc8 <tzset>:
   21cc8:	4b01      	ldr	r3, [pc, #4]	; (21cd0 <tzset+0x8>)
   21cca:	6818      	ldr	r0, [r3, #0]
   21ccc:	f000 b802 	b.w	21cd4 <_tzset_unlocked_r>
   21cd0:	20000828 	.word	0x20000828

00021cd4 <_tzset_unlocked_r>:
   21cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cd8:	b08d      	sub	sp, #52	; 0x34
   21cda:	4607      	mov	r7, r0
   21cdc:	f000 f9be 	bl	2205c <__gettzinfo>
   21ce0:	49ae      	ldr	r1, [pc, #696]	; (21f9c <_tzset_unlocked_r+0x2c8>)
   21ce2:	4eaf      	ldr	r6, [pc, #700]	; (21fa0 <_tzset_unlocked_r+0x2cc>)
   21ce4:	4605      	mov	r5, r0
   21ce6:	4638      	mov	r0, r7
   21ce8:	f009 fdf9 	bl	2b8de <_getenv_r>
   21cec:	4604      	mov	r4, r0
   21cee:	b970      	cbnz	r0, 21d0e <_tzset_unlocked_r+0x3a>
   21cf0:	4bac      	ldr	r3, [pc, #688]	; (21fa4 <_tzset_unlocked_r+0x2d0>)
   21cf2:	4aad      	ldr	r2, [pc, #692]	; (21fa8 <_tzset_unlocked_r+0x2d4>)
   21cf4:	6018      	str	r0, [r3, #0]
   21cf6:	4bad      	ldr	r3, [pc, #692]	; (21fac <_tzset_unlocked_r+0x2d8>)
   21cf8:	6018      	str	r0, [r3, #0]
   21cfa:	4bad      	ldr	r3, [pc, #692]	; (21fb0 <_tzset_unlocked_r+0x2dc>)
   21cfc:	6830      	ldr	r0, [r6, #0]
   21cfe:	e9c3 2200 	strd	r2, r2, [r3]
   21d02:	f000 f9af 	bl	22064 <free>
   21d06:	6034      	str	r4, [r6, #0]
   21d08:	b00d      	add	sp, #52	; 0x34
   21d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d0e:	6831      	ldr	r1, [r6, #0]
   21d10:	2900      	cmp	r1, #0
   21d12:	d15f      	bne.n	21dd4 <_tzset_unlocked_r+0x100>
   21d14:	6830      	ldr	r0, [r6, #0]
   21d16:	f000 f9a5 	bl	22064 <free>
   21d1a:	4620      	mov	r0, r4
   21d1c:	f7de fbb6 	bl	48c <strlen>
   21d20:	1c41      	adds	r1, r0, #1
   21d22:	4638      	mov	r0, r7
   21d24:	f000 f9f4 	bl	22110 <_malloc_r>
   21d28:	6030      	str	r0, [r6, #0]
   21d2a:	2800      	cmp	r0, #0
   21d2c:	d157      	bne.n	21dde <_tzset_unlocked_r+0x10a>
   21d2e:	7823      	ldrb	r3, [r4, #0]
   21d30:	4aa0      	ldr	r2, [pc, #640]	; (21fb4 <_tzset_unlocked_r+0x2e0>)
   21d32:	49a1      	ldr	r1, [pc, #644]	; (21fb8 <_tzset_unlocked_r+0x2e4>)
   21d34:	2b3a      	cmp	r3, #58	; 0x3a
   21d36:	bf08      	it	eq
   21d38:	3401      	addeq	r4, #1
   21d3a:	ae0a      	add	r6, sp, #40	; 0x28
   21d3c:	4633      	mov	r3, r6
   21d3e:	4620      	mov	r0, r4
   21d40:	f7ff f890 	bl	20e64 <siscanf>
   21d44:	2800      	cmp	r0, #0
   21d46:	dddf      	ble.n	21d08 <_tzset_unlocked_r+0x34>
   21d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21d4a:	18e7      	adds	r7, r4, r3
   21d4c:	5ce3      	ldrb	r3, [r4, r3]
   21d4e:	2b2d      	cmp	r3, #45	; 0x2d
   21d50:	d149      	bne.n	21de6 <_tzset_unlocked_r+0x112>
   21d52:	3701      	adds	r7, #1
   21d54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   21d58:	f10d 0a20 	add.w	sl, sp, #32
   21d5c:	f10d 0b1e 	add.w	fp, sp, #30
   21d60:	f04f 0800 	mov.w	r8, #0
   21d64:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   21d68:	4994      	ldr	r1, [pc, #592]	; (21fbc <_tzset_unlocked_r+0x2e8>)
   21d6a:	9603      	str	r6, [sp, #12]
   21d6c:	f8cd b000 	str.w	fp, [sp]
   21d70:	4633      	mov	r3, r6
   21d72:	aa07      	add	r2, sp, #28
   21d74:	4638      	mov	r0, r7
   21d76:	f8ad 801e 	strh.w	r8, [sp, #30]
   21d7a:	f8ad 8020 	strh.w	r8, [sp, #32]
   21d7e:	f7ff f871 	bl	20e64 <siscanf>
   21d82:	4540      	cmp	r0, r8
   21d84:	ddc0      	ble.n	21d08 <_tzset_unlocked_r+0x34>
   21d86:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21d8a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21d8e:	f8df 9238 	ldr.w	r9, [pc, #568]	; 21fc8 <_tzset_unlocked_r+0x2f4>
   21d92:	213c      	movs	r1, #60	; 0x3c
   21d94:	fb01 2203 	mla	r2, r1, r3, r2
   21d98:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21d9c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   21da0:	fb01 2303 	mla	r3, r1, r3, r2
   21da4:	435c      	muls	r4, r3
   21da6:	62ac      	str	r4, [r5, #40]	; 0x28
   21da8:	4c81      	ldr	r4, [pc, #516]	; (21fb0 <_tzset_unlocked_r+0x2dc>)
   21daa:	4b82      	ldr	r3, [pc, #520]	; (21fb4 <_tzset_unlocked_r+0x2e0>)
   21dac:	6023      	str	r3, [r4, #0]
   21dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21db0:	4981      	ldr	r1, [pc, #516]	; (21fb8 <_tzset_unlocked_r+0x2e4>)
   21db2:	441f      	add	r7, r3
   21db4:	464a      	mov	r2, r9
   21db6:	4633      	mov	r3, r6
   21db8:	4638      	mov	r0, r7
   21dba:	f7ff f853 	bl	20e64 <siscanf>
   21dbe:	4540      	cmp	r0, r8
   21dc0:	dc16      	bgt.n	21df0 <_tzset_unlocked_r+0x11c>
   21dc2:	6823      	ldr	r3, [r4, #0]
   21dc4:	6063      	str	r3, [r4, #4]
   21dc6:	4b77      	ldr	r3, [pc, #476]	; (21fa4 <_tzset_unlocked_r+0x2d0>)
   21dc8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21dca:	601a      	str	r2, [r3, #0]
   21dcc:	4b77      	ldr	r3, [pc, #476]	; (21fac <_tzset_unlocked_r+0x2d8>)
   21dce:	f8c3 8000 	str.w	r8, [r3]
   21dd2:	e799      	b.n	21d08 <_tzset_unlocked_r+0x34>
   21dd4:	f7de fb50 	bl	478 <strcmp>
   21dd8:	2800      	cmp	r0, #0
   21dda:	d19b      	bne.n	21d14 <_tzset_unlocked_r+0x40>
   21ddc:	e794      	b.n	21d08 <_tzset_unlocked_r+0x34>
   21dde:	4621      	mov	r1, r4
   21de0:	f009 fce6 	bl	2b7b0 <strcpy>
   21de4:	e7a3      	b.n	21d2e <_tzset_unlocked_r+0x5a>
   21de6:	2b2b      	cmp	r3, #43	; 0x2b
   21de8:	bf08      	it	eq
   21dea:	3701      	addeq	r7, #1
   21dec:	2401      	movs	r4, #1
   21dee:	e7b3      	b.n	21d58 <_tzset_unlocked_r+0x84>
   21df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21df2:	f8c4 9004 	str.w	r9, [r4, #4]
   21df6:	18fc      	adds	r4, r7, r3
   21df8:	5cfb      	ldrb	r3, [r7, r3]
   21dfa:	2b2d      	cmp	r3, #45	; 0x2d
   21dfc:	f040 808b 	bne.w	21f16 <_tzset_unlocked_r+0x242>
   21e00:	3401      	adds	r4, #1
   21e02:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21e06:	2300      	movs	r3, #0
   21e08:	f8ad 301c 	strh.w	r3, [sp, #28]
   21e0c:	f8ad 301e 	strh.w	r3, [sp, #30]
   21e10:	f8ad 3020 	strh.w	r3, [sp, #32]
   21e14:	930a      	str	r3, [sp, #40]	; 0x28
   21e16:	e9cd a602 	strd	sl, r6, [sp, #8]
   21e1a:	e9cd b600 	strd	fp, r6, [sp]
   21e1e:	4967      	ldr	r1, [pc, #412]	; (21fbc <_tzset_unlocked_r+0x2e8>)
   21e20:	4633      	mov	r3, r6
   21e22:	aa07      	add	r2, sp, #28
   21e24:	4620      	mov	r0, r4
   21e26:	f7ff f81d 	bl	20e64 <siscanf>
   21e2a:	2800      	cmp	r0, #0
   21e2c:	dc78      	bgt.n	21f20 <_tzset_unlocked_r+0x24c>
   21e2e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   21e30:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   21e34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21e36:	652f      	str	r7, [r5, #80]	; 0x50
   21e38:	441c      	add	r4, r3
   21e3a:	462f      	mov	r7, r5
   21e3c:	f04f 0900 	mov.w	r9, #0
   21e40:	7823      	ldrb	r3, [r4, #0]
   21e42:	2b2c      	cmp	r3, #44	; 0x2c
   21e44:	bf08      	it	eq
   21e46:	3401      	addeq	r4, #1
   21e48:	f894 8000 	ldrb.w	r8, [r4]
   21e4c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   21e50:	d178      	bne.n	21f44 <_tzset_unlocked_r+0x270>
   21e52:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   21e56:	e9cd 6301 	strd	r6, r3, [sp, #4]
   21e5a:	ab09      	add	r3, sp, #36	; 0x24
   21e5c:	9300      	str	r3, [sp, #0]
   21e5e:	4958      	ldr	r1, [pc, #352]	; (21fc0 <_tzset_unlocked_r+0x2ec>)
   21e60:	9603      	str	r6, [sp, #12]
   21e62:	4633      	mov	r3, r6
   21e64:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   21e68:	4620      	mov	r0, r4
   21e6a:	f7fe fffb 	bl	20e64 <siscanf>
   21e6e:	2803      	cmp	r0, #3
   21e70:	f47f af4a 	bne.w	21d08 <_tzset_unlocked_r+0x34>
   21e74:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   21e78:	1e4b      	subs	r3, r1, #1
   21e7a:	2b0b      	cmp	r3, #11
   21e7c:	f63f af44 	bhi.w	21d08 <_tzset_unlocked_r+0x34>
   21e80:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   21e84:	1e53      	subs	r3, r2, #1
   21e86:	2b04      	cmp	r3, #4
   21e88:	f63f af3e 	bhi.w	21d08 <_tzset_unlocked_r+0x34>
   21e8c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   21e90:	2b06      	cmp	r3, #6
   21e92:	f63f af39 	bhi.w	21d08 <_tzset_unlocked_r+0x34>
   21e96:	e9c7 1203 	strd	r1, r2, [r7, #12]
   21e9a:	f887 8008 	strb.w	r8, [r7, #8]
   21e9e:	617b      	str	r3, [r7, #20]
   21ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   21ea2:	eb04 0803 	add.w	r8, r4, r3
   21ea6:	2302      	movs	r3, #2
   21ea8:	f8ad 301c 	strh.w	r3, [sp, #28]
   21eac:	2300      	movs	r3, #0
   21eae:	f8ad 301e 	strh.w	r3, [sp, #30]
   21eb2:	f8ad 3020 	strh.w	r3, [sp, #32]
   21eb6:	930a      	str	r3, [sp, #40]	; 0x28
   21eb8:	f898 3000 	ldrb.w	r3, [r8]
   21ebc:	2b2f      	cmp	r3, #47	; 0x2f
   21ebe:	d109      	bne.n	21ed4 <_tzset_unlocked_r+0x200>
   21ec0:	e9cd a602 	strd	sl, r6, [sp, #8]
   21ec4:	e9cd b600 	strd	fp, r6, [sp]
   21ec8:	493e      	ldr	r1, [pc, #248]	; (21fc4 <_tzset_unlocked_r+0x2f0>)
   21eca:	4633      	mov	r3, r6
   21ecc:	aa07      	add	r2, sp, #28
   21ece:	4640      	mov	r0, r8
   21ed0:	f7fe ffc8 	bl	20e64 <siscanf>
   21ed4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21ed8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21edc:	213c      	movs	r1, #60	; 0x3c
   21ede:	fb01 2203 	mla	r2, r1, r3, r2
   21ee2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21ee6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   21eea:	fb01 2303 	mla	r3, r1, r3, r2
   21eee:	61bb      	str	r3, [r7, #24]
   21ef0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   21ef2:	3728      	adds	r7, #40	; 0x28
   21ef4:	4444      	add	r4, r8
   21ef6:	f1b9 0f00 	cmp.w	r9, #0
   21efa:	d020      	beq.n	21f3e <_tzset_unlocked_r+0x26a>
   21efc:	6868      	ldr	r0, [r5, #4]
   21efe:	f7ff fe3b 	bl	21b78 <__tzcalc_limits>
   21f02:	4b28      	ldr	r3, [pc, #160]	; (21fa4 <_tzset_unlocked_r+0x2d0>)
   21f04:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   21f06:	601a      	str	r2, [r3, #0]
   21f08:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21f0a:	1a9b      	subs	r3, r3, r2
   21f0c:	4a27      	ldr	r2, [pc, #156]	; (21fac <_tzset_unlocked_r+0x2d8>)
   21f0e:	bf18      	it	ne
   21f10:	2301      	movne	r3, #1
   21f12:	6013      	str	r3, [r2, #0]
   21f14:	e6f8      	b.n	21d08 <_tzset_unlocked_r+0x34>
   21f16:	2b2b      	cmp	r3, #43	; 0x2b
   21f18:	bf08      	it	eq
   21f1a:	3401      	addeq	r4, #1
   21f1c:	2701      	movs	r7, #1
   21f1e:	e772      	b.n	21e06 <_tzset_unlocked_r+0x132>
   21f20:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21f24:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   21f28:	213c      	movs	r1, #60	; 0x3c
   21f2a:	fb01 2203 	mla	r2, r1, r3, r2
   21f2e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21f32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   21f36:	fb01 2303 	mla	r3, r1, r3, r2
   21f3a:	435f      	muls	r7, r3
   21f3c:	e77a      	b.n	21e34 <_tzset_unlocked_r+0x160>
   21f3e:	f04f 0901 	mov.w	r9, #1
   21f42:	e77d      	b.n	21e40 <_tzset_unlocked_r+0x16c>
   21f44:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   21f48:	bf06      	itte	eq
   21f4a:	3401      	addeq	r4, #1
   21f4c:	4643      	moveq	r3, r8
   21f4e:	2344      	movne	r3, #68	; 0x44
   21f50:	220a      	movs	r2, #10
   21f52:	a90b      	add	r1, sp, #44	; 0x2c
   21f54:	4620      	mov	r0, r4
   21f56:	9305      	str	r3, [sp, #20]
   21f58:	f7ff fe04 	bl	21b64 <strtoul>
   21f5c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   21f60:	9b05      	ldr	r3, [sp, #20]
   21f62:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   21f66:	45a0      	cmp	r8, r4
   21f68:	d114      	bne.n	21f94 <_tzset_unlocked_r+0x2c0>
   21f6a:	234d      	movs	r3, #77	; 0x4d
   21f6c:	f1b9 0f00 	cmp.w	r9, #0
   21f70:	d107      	bne.n	21f82 <_tzset_unlocked_r+0x2ae>
   21f72:	722b      	strb	r3, [r5, #8]
   21f74:	2103      	movs	r1, #3
   21f76:	2302      	movs	r3, #2
   21f78:	e9c5 1303 	strd	r1, r3, [r5, #12]
   21f7c:	f8c5 9014 	str.w	r9, [r5, #20]
   21f80:	e791      	b.n	21ea6 <_tzset_unlocked_r+0x1d2>
   21f82:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   21f86:	220b      	movs	r2, #11
   21f88:	2301      	movs	r3, #1
   21f8a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   21f8e:	2300      	movs	r3, #0
   21f90:	63eb      	str	r3, [r5, #60]	; 0x3c
   21f92:	e788      	b.n	21ea6 <_tzset_unlocked_r+0x1d2>
   21f94:	b280      	uxth	r0, r0
   21f96:	723b      	strb	r3, [r7, #8]
   21f98:	6178      	str	r0, [r7, #20]
   21f9a:	e784      	b.n	21ea6 <_tzset_unlocked_r+0x1d2>
   21f9c:	000395b5 	.word	0x000395b5
   21fa0:	20008088 	.word	0x20008088
   21fa4:	20008090 	.word	0x20008090
   21fa8:	000395b8 	.word	0x000395b8
   21fac:	2000808c 	.word	0x2000808c
   21fb0:	20000820 	.word	0x20000820
   21fb4:	20008741 	.word	0x20008741
   21fb8:	000395bc 	.word	0x000395bc
   21fbc:	000395df 	.word	0x000395df
   21fc0:	000395cb 	.word	0x000395cb
   21fc4:	000395de 	.word	0x000395de
   21fc8:	20008736 	.word	0x20008736

00021fcc <vsniprintf>:
   21fcc:	b507      	push	{r0, r1, r2, lr}
   21fce:	9300      	str	r3, [sp, #0]
   21fd0:	4613      	mov	r3, r2
   21fd2:	460a      	mov	r2, r1
   21fd4:	4601      	mov	r1, r0
   21fd6:	4803      	ldr	r0, [pc, #12]	; (21fe4 <vsniprintf+0x18>)
   21fd8:	6800      	ldr	r0, [r0, #0]
   21fda:	f009 fc3c 	bl	2b856 <_vsniprintf_r>
   21fde:	b003      	add	sp, #12
   21fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   21fe4:	20000828 	.word	0x20000828

00021fe8 <_findenv_r>:
   21fe8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21fec:	4607      	mov	r7, r0
   21fee:	4689      	mov	r9, r1
   21ff0:	4616      	mov	r6, r2
   21ff2:	f009 fe34 	bl	2bc5e <__env_lock>
   21ff6:	4b18      	ldr	r3, [pc, #96]	; (22058 <_findenv_r+0x70>)
   21ff8:	681c      	ldr	r4, [r3, #0]
   21ffa:	469a      	mov	sl, r3
   21ffc:	b134      	cbz	r4, 2200c <_findenv_r+0x24>
   21ffe:	464b      	mov	r3, r9
   22000:	4698      	mov	r8, r3
   22002:	f813 1b01 	ldrb.w	r1, [r3], #1
   22006:	b139      	cbz	r1, 22018 <_findenv_r+0x30>
   22008:	293d      	cmp	r1, #61	; 0x3d
   2200a:	d1f9      	bne.n	22000 <_findenv_r+0x18>
   2200c:	4638      	mov	r0, r7
   2200e:	f009 fe27 	bl	2bc60 <__env_unlock>
   22012:	2000      	movs	r0, #0
   22014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22018:	eba8 0809 	sub.w	r8, r8, r9
   2201c:	46a3      	mov	fp, r4
   2201e:	f854 0b04 	ldr.w	r0, [r4], #4
   22022:	2800      	cmp	r0, #0
   22024:	d0f2      	beq.n	2200c <_findenv_r+0x24>
   22026:	4642      	mov	r2, r8
   22028:	4649      	mov	r1, r9
   2202a:	f009 fbc9 	bl	2b7c0 <strncmp>
   2202e:	2800      	cmp	r0, #0
   22030:	d1f4      	bne.n	2201c <_findenv_r+0x34>
   22032:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22036:	eb03 0508 	add.w	r5, r3, r8
   2203a:	f813 3008 	ldrb.w	r3, [r3, r8]
   2203e:	2b3d      	cmp	r3, #61	; 0x3d
   22040:	d1ec      	bne.n	2201c <_findenv_r+0x34>
   22042:	f8da 3000 	ldr.w	r3, [sl]
   22046:	ebab 0303 	sub.w	r3, fp, r3
   2204a:	109b      	asrs	r3, r3, #2
   2204c:	4638      	mov	r0, r7
   2204e:	6033      	str	r3, [r6, #0]
   22050:	f009 fe06 	bl	2bc60 <__env_unlock>
   22054:	1c68      	adds	r0, r5, #1
   22056:	e7dd      	b.n	22014 <_findenv_r+0x2c>
   22058:	200009f8 	.word	0x200009f8

0002205c <__gettzinfo>:
   2205c:	4800      	ldr	r0, [pc, #0]	; (22060 <__gettzinfo+0x4>)
   2205e:	4770      	bx	lr
   22060:	20000170 	.word	0x20000170

00022064 <free>:
   22064:	4b02      	ldr	r3, [pc, #8]	; (22070 <free+0xc>)
   22066:	4601      	mov	r1, r0
   22068:	6818      	ldr	r0, [r3, #0]
   2206a:	f000 b803 	b.w	22074 <_free_r>
   2206e:	bf00      	nop
   22070:	20000828 	.word	0x20000828

00022074 <_free_r>:
   22074:	b538      	push	{r3, r4, r5, lr}
   22076:	4605      	mov	r5, r0
   22078:	2900      	cmp	r1, #0
   2207a:	d045      	beq.n	22108 <_free_r+0x94>
   2207c:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22080:	1f0c      	subs	r4, r1, #4
   22082:	2b00      	cmp	r3, #0
   22084:	bfb8      	it	lt
   22086:	18e4      	addlt	r4, r4, r3
   22088:	f009 fe05 	bl	2bc96 <__malloc_lock>
   2208c:	4a1f      	ldr	r2, [pc, #124]	; (2210c <_free_r+0x98>)
   2208e:	6813      	ldr	r3, [r2, #0]
   22090:	4610      	mov	r0, r2
   22092:	b933      	cbnz	r3, 220a2 <_free_r+0x2e>
   22094:	6063      	str	r3, [r4, #4]
   22096:	6014      	str	r4, [r2, #0]
   22098:	4628      	mov	r0, r5
   2209a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2209e:	f009 bdfb 	b.w	2bc98 <__malloc_unlock>
   220a2:	42a3      	cmp	r3, r4
   220a4:	d90b      	bls.n	220be <_free_r+0x4a>
   220a6:	6821      	ldr	r1, [r4, #0]
   220a8:	1862      	adds	r2, r4, r1
   220aa:	4293      	cmp	r3, r2
   220ac:	bf04      	itt	eq
   220ae:	681a      	ldreq	r2, [r3, #0]
   220b0:	685b      	ldreq	r3, [r3, #4]
   220b2:	6063      	str	r3, [r4, #4]
   220b4:	bf04      	itt	eq
   220b6:	1852      	addeq	r2, r2, r1
   220b8:	6022      	streq	r2, [r4, #0]
   220ba:	6004      	str	r4, [r0, #0]
   220bc:	e7ec      	b.n	22098 <_free_r+0x24>
   220be:	461a      	mov	r2, r3
   220c0:	685b      	ldr	r3, [r3, #4]
   220c2:	b10b      	cbz	r3, 220c8 <_free_r+0x54>
   220c4:	42a3      	cmp	r3, r4
   220c6:	d9fa      	bls.n	220be <_free_r+0x4a>
   220c8:	6811      	ldr	r1, [r2, #0]
   220ca:	1850      	adds	r0, r2, r1
   220cc:	42a0      	cmp	r0, r4
   220ce:	d10b      	bne.n	220e8 <_free_r+0x74>
   220d0:	6820      	ldr	r0, [r4, #0]
   220d2:	4401      	add	r1, r0
   220d4:	1850      	adds	r0, r2, r1
   220d6:	4283      	cmp	r3, r0
   220d8:	6011      	str	r1, [r2, #0]
   220da:	d1dd      	bne.n	22098 <_free_r+0x24>
   220dc:	6818      	ldr	r0, [r3, #0]
   220de:	685b      	ldr	r3, [r3, #4]
   220e0:	6053      	str	r3, [r2, #4]
   220e2:	4401      	add	r1, r0
   220e4:	6011      	str	r1, [r2, #0]
   220e6:	e7d7      	b.n	22098 <_free_r+0x24>
   220e8:	d902      	bls.n	220f0 <_free_r+0x7c>
   220ea:	230c      	movs	r3, #12
   220ec:	602b      	str	r3, [r5, #0]
   220ee:	e7d3      	b.n	22098 <_free_r+0x24>
   220f0:	6820      	ldr	r0, [r4, #0]
   220f2:	1821      	adds	r1, r4, r0
   220f4:	428b      	cmp	r3, r1
   220f6:	bf04      	itt	eq
   220f8:	6819      	ldreq	r1, [r3, #0]
   220fa:	685b      	ldreq	r3, [r3, #4]
   220fc:	6063      	str	r3, [r4, #4]
   220fe:	bf04      	itt	eq
   22100:	1809      	addeq	r1, r1, r0
   22102:	6021      	streq	r1, [r4, #0]
   22104:	6054      	str	r4, [r2, #4]
   22106:	e7c7      	b.n	22098 <_free_r+0x24>
   22108:	bd38      	pop	{r3, r4, r5, pc}
   2210a:	bf00      	nop
   2210c:	20008094 	.word	0x20008094

00022110 <_malloc_r>:
   22110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22112:	1ccd      	adds	r5, r1, #3
   22114:	f025 0503 	bic.w	r5, r5, #3
   22118:	3508      	adds	r5, #8
   2211a:	2d0c      	cmp	r5, #12
   2211c:	bf38      	it	cc
   2211e:	250c      	movcc	r5, #12
   22120:	2d00      	cmp	r5, #0
   22122:	4606      	mov	r6, r0
   22124:	db01      	blt.n	2212a <_malloc_r+0x1a>
   22126:	42a9      	cmp	r1, r5
   22128:	d903      	bls.n	22132 <_malloc_r+0x22>
   2212a:	230c      	movs	r3, #12
   2212c:	6033      	str	r3, [r6, #0]
   2212e:	2000      	movs	r0, #0
   22130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22132:	f009 fdb0 	bl	2bc96 <__malloc_lock>
   22136:	4921      	ldr	r1, [pc, #132]	; (221bc <_malloc_r+0xac>)
   22138:	680a      	ldr	r2, [r1, #0]
   2213a:	4614      	mov	r4, r2
   2213c:	b99c      	cbnz	r4, 22166 <_malloc_r+0x56>
   2213e:	4f20      	ldr	r7, [pc, #128]	; (221c0 <_malloc_r+0xb0>)
   22140:	683b      	ldr	r3, [r7, #0]
   22142:	b923      	cbnz	r3, 2214e <_malloc_r+0x3e>
   22144:	4621      	mov	r1, r4
   22146:	4630      	mov	r0, r6
   22148:	f000 fd26 	bl	22b98 <_sbrk_r>
   2214c:	6038      	str	r0, [r7, #0]
   2214e:	4629      	mov	r1, r5
   22150:	4630      	mov	r0, r6
   22152:	f000 fd21 	bl	22b98 <_sbrk_r>
   22156:	1c43      	adds	r3, r0, #1
   22158:	d123      	bne.n	221a2 <_malloc_r+0x92>
   2215a:	230c      	movs	r3, #12
   2215c:	6033      	str	r3, [r6, #0]
   2215e:	4630      	mov	r0, r6
   22160:	f009 fd9a 	bl	2bc98 <__malloc_unlock>
   22164:	e7e3      	b.n	2212e <_malloc_r+0x1e>
   22166:	6823      	ldr	r3, [r4, #0]
   22168:	1b5b      	subs	r3, r3, r5
   2216a:	d417      	bmi.n	2219c <_malloc_r+0x8c>
   2216c:	2b0b      	cmp	r3, #11
   2216e:	d903      	bls.n	22178 <_malloc_r+0x68>
   22170:	6023      	str	r3, [r4, #0]
   22172:	441c      	add	r4, r3
   22174:	6025      	str	r5, [r4, #0]
   22176:	e004      	b.n	22182 <_malloc_r+0x72>
   22178:	6863      	ldr	r3, [r4, #4]
   2217a:	42a2      	cmp	r2, r4
   2217c:	bf0c      	ite	eq
   2217e:	600b      	streq	r3, [r1, #0]
   22180:	6053      	strne	r3, [r2, #4]
   22182:	4630      	mov	r0, r6
   22184:	f009 fd88 	bl	2bc98 <__malloc_unlock>
   22188:	f104 000b 	add.w	r0, r4, #11
   2218c:	1d23      	adds	r3, r4, #4
   2218e:	f020 0007 	bic.w	r0, r0, #7
   22192:	1ac2      	subs	r2, r0, r3
   22194:	d0cc      	beq.n	22130 <_malloc_r+0x20>
   22196:	1a1b      	subs	r3, r3, r0
   22198:	50a3      	str	r3, [r4, r2]
   2219a:	e7c9      	b.n	22130 <_malloc_r+0x20>
   2219c:	4622      	mov	r2, r4
   2219e:	6864      	ldr	r4, [r4, #4]
   221a0:	e7cc      	b.n	2213c <_malloc_r+0x2c>
   221a2:	1cc4      	adds	r4, r0, #3
   221a4:	f024 0403 	bic.w	r4, r4, #3
   221a8:	42a0      	cmp	r0, r4
   221aa:	d0e3      	beq.n	22174 <_malloc_r+0x64>
   221ac:	1a21      	subs	r1, r4, r0
   221ae:	4630      	mov	r0, r6
   221b0:	f000 fcf2 	bl	22b98 <_sbrk_r>
   221b4:	3001      	adds	r0, #1
   221b6:	d1dd      	bne.n	22174 <_malloc_r+0x64>
   221b8:	e7cf      	b.n	2215a <_malloc_r+0x4a>
   221ba:	bf00      	nop
   221bc:	20008094 	.word	0x20008094
   221c0:	20008098 	.word	0x20008098

000221c4 <_svfiprintf_r>:
   221c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221c8:	4698      	mov	r8, r3
   221ca:	898b      	ldrh	r3, [r1, #12]
   221cc:	061b      	lsls	r3, r3, #24
   221ce:	b09d      	sub	sp, #116	; 0x74
   221d0:	4607      	mov	r7, r0
   221d2:	460d      	mov	r5, r1
   221d4:	4614      	mov	r4, r2
   221d6:	d50e      	bpl.n	221f6 <_svfiprintf_r+0x32>
   221d8:	690b      	ldr	r3, [r1, #16]
   221da:	b963      	cbnz	r3, 221f6 <_svfiprintf_r+0x32>
   221dc:	2140      	movs	r1, #64	; 0x40
   221de:	f7ff ff97 	bl	22110 <_malloc_r>
   221e2:	6028      	str	r0, [r5, #0]
   221e4:	6128      	str	r0, [r5, #16]
   221e6:	b920      	cbnz	r0, 221f2 <_svfiprintf_r+0x2e>
   221e8:	230c      	movs	r3, #12
   221ea:	603b      	str	r3, [r7, #0]
   221ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   221f0:	e0d1      	b.n	22396 <_svfiprintf_r+0x1d2>
   221f2:	2340      	movs	r3, #64	; 0x40
   221f4:	616b      	str	r3, [r5, #20]
   221f6:	2300      	movs	r3, #0
   221f8:	9309      	str	r3, [sp, #36]	; 0x24
   221fa:	2320      	movs	r3, #32
   221fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   22200:	f8cd 800c 	str.w	r8, [sp, #12]
   22204:	2330      	movs	r3, #48	; 0x30
   22206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 223b0 <_svfiprintf_r+0x1ec>
   2220a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2220e:	f04f 0901 	mov.w	r9, #1
   22212:	4623      	mov	r3, r4
   22214:	469a      	mov	sl, r3
   22216:	f813 2b01 	ldrb.w	r2, [r3], #1
   2221a:	b10a      	cbz	r2, 22220 <_svfiprintf_r+0x5c>
   2221c:	2a25      	cmp	r2, #37	; 0x25
   2221e:	d1f9      	bne.n	22214 <_svfiprintf_r+0x50>
   22220:	ebba 0b04 	subs.w	fp, sl, r4
   22224:	d00b      	beq.n	2223e <_svfiprintf_r+0x7a>
   22226:	465b      	mov	r3, fp
   22228:	4622      	mov	r2, r4
   2222a:	4629      	mov	r1, r5
   2222c:	4638      	mov	r0, r7
   2222e:	f009 fb73 	bl	2b918 <__ssputs_r>
   22232:	3001      	adds	r0, #1
   22234:	f000 80aa 	beq.w	2238c <_svfiprintf_r+0x1c8>
   22238:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2223a:	445a      	add	r2, fp
   2223c:	9209      	str	r2, [sp, #36]	; 0x24
   2223e:	f89a 3000 	ldrb.w	r3, [sl]
   22242:	2b00      	cmp	r3, #0
   22244:	f000 80a2 	beq.w	2238c <_svfiprintf_r+0x1c8>
   22248:	2300      	movs	r3, #0
   2224a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2224e:	e9cd 2305 	strd	r2, r3, [sp, #20]
   22252:	f10a 0a01 	add.w	sl, sl, #1
   22256:	9304      	str	r3, [sp, #16]
   22258:	9307      	str	r3, [sp, #28]
   2225a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2225e:	931a      	str	r3, [sp, #104]	; 0x68
   22260:	4654      	mov	r4, sl
   22262:	2205      	movs	r2, #5
   22264:	f814 1b01 	ldrb.w	r1, [r4], #1
   22268:	4851      	ldr	r0, [pc, #324]	; (223b0 <_svfiprintf_r+0x1ec>)
   2226a:	f7dd ff39 	bl	e0 <memchr>
   2226e:	9a04      	ldr	r2, [sp, #16]
   22270:	b9d8      	cbnz	r0, 222aa <_svfiprintf_r+0xe6>
   22272:	06d0      	lsls	r0, r2, #27
   22274:	bf44      	itt	mi
   22276:	2320      	movmi	r3, #32
   22278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2227c:	0711      	lsls	r1, r2, #28
   2227e:	bf44      	itt	mi
   22280:	232b      	movmi	r3, #43	; 0x2b
   22282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   22286:	f89a 3000 	ldrb.w	r3, [sl]
   2228a:	2b2a      	cmp	r3, #42	; 0x2a
   2228c:	d015      	beq.n	222ba <_svfiprintf_r+0xf6>
   2228e:	9a07      	ldr	r2, [sp, #28]
   22290:	4654      	mov	r4, sl
   22292:	2000      	movs	r0, #0
   22294:	f04f 0c0a 	mov.w	ip, #10
   22298:	4621      	mov	r1, r4
   2229a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2229e:	3b30      	subs	r3, #48	; 0x30
   222a0:	2b09      	cmp	r3, #9
   222a2:	d94e      	bls.n	22342 <_svfiprintf_r+0x17e>
   222a4:	b1b0      	cbz	r0, 222d4 <_svfiprintf_r+0x110>
   222a6:	9207      	str	r2, [sp, #28]
   222a8:	e014      	b.n	222d4 <_svfiprintf_r+0x110>
   222aa:	eba0 0308 	sub.w	r3, r0, r8
   222ae:	fa09 f303 	lsl.w	r3, r9, r3
   222b2:	4313      	orrs	r3, r2
   222b4:	9304      	str	r3, [sp, #16]
   222b6:	46a2      	mov	sl, r4
   222b8:	e7d2      	b.n	22260 <_svfiprintf_r+0x9c>
   222ba:	9b03      	ldr	r3, [sp, #12]
   222bc:	1d19      	adds	r1, r3, #4
   222be:	681b      	ldr	r3, [r3, #0]
   222c0:	9103      	str	r1, [sp, #12]
   222c2:	2b00      	cmp	r3, #0
   222c4:	bfbb      	ittet	lt
   222c6:	425b      	neglt	r3, r3
   222c8:	f042 0202 	orrlt.w	r2, r2, #2
   222cc:	9307      	strge	r3, [sp, #28]
   222ce:	9307      	strlt	r3, [sp, #28]
   222d0:	bfb8      	it	lt
   222d2:	9204      	strlt	r2, [sp, #16]
   222d4:	7823      	ldrb	r3, [r4, #0]
   222d6:	2b2e      	cmp	r3, #46	; 0x2e
   222d8:	d10c      	bne.n	222f4 <_svfiprintf_r+0x130>
   222da:	7863      	ldrb	r3, [r4, #1]
   222dc:	2b2a      	cmp	r3, #42	; 0x2a
   222de:	d135      	bne.n	2234c <_svfiprintf_r+0x188>
   222e0:	9b03      	ldr	r3, [sp, #12]
   222e2:	1d1a      	adds	r2, r3, #4
   222e4:	681b      	ldr	r3, [r3, #0]
   222e6:	9203      	str	r2, [sp, #12]
   222e8:	2b00      	cmp	r3, #0
   222ea:	bfb8      	it	lt
   222ec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   222f0:	3402      	adds	r4, #2
   222f2:	9305      	str	r3, [sp, #20]
   222f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 223c0 <_svfiprintf_r+0x1fc>
   222f8:	7821      	ldrb	r1, [r4, #0]
   222fa:	2203      	movs	r2, #3
   222fc:	4650      	mov	r0, sl
   222fe:	f7dd feef 	bl	e0 <memchr>
   22302:	b140      	cbz	r0, 22316 <_svfiprintf_r+0x152>
   22304:	2340      	movs	r3, #64	; 0x40
   22306:	eba0 000a 	sub.w	r0, r0, sl
   2230a:	fa03 f000 	lsl.w	r0, r3, r0
   2230e:	9b04      	ldr	r3, [sp, #16]
   22310:	4303      	orrs	r3, r0
   22312:	3401      	adds	r4, #1
   22314:	9304      	str	r3, [sp, #16]
   22316:	f814 1b01 	ldrb.w	r1, [r4], #1
   2231a:	4826      	ldr	r0, [pc, #152]	; (223b4 <_svfiprintf_r+0x1f0>)
   2231c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   22320:	2206      	movs	r2, #6
   22322:	f7dd fedd 	bl	e0 <memchr>
   22326:	2800      	cmp	r0, #0
   22328:	d038      	beq.n	2239c <_svfiprintf_r+0x1d8>
   2232a:	4b23      	ldr	r3, [pc, #140]	; (223b8 <_svfiprintf_r+0x1f4>)
   2232c:	bb1b      	cbnz	r3, 22376 <_svfiprintf_r+0x1b2>
   2232e:	9b03      	ldr	r3, [sp, #12]
   22330:	3307      	adds	r3, #7
   22332:	f023 0307 	bic.w	r3, r3, #7
   22336:	3308      	adds	r3, #8
   22338:	9303      	str	r3, [sp, #12]
   2233a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2233c:	4433      	add	r3, r6
   2233e:	9309      	str	r3, [sp, #36]	; 0x24
   22340:	e767      	b.n	22212 <_svfiprintf_r+0x4e>
   22342:	fb0c 3202 	mla	r2, ip, r2, r3
   22346:	460c      	mov	r4, r1
   22348:	2001      	movs	r0, #1
   2234a:	e7a5      	b.n	22298 <_svfiprintf_r+0xd4>
   2234c:	2300      	movs	r3, #0
   2234e:	3401      	adds	r4, #1
   22350:	9305      	str	r3, [sp, #20]
   22352:	4619      	mov	r1, r3
   22354:	f04f 0c0a 	mov.w	ip, #10
   22358:	4620      	mov	r0, r4
   2235a:	f810 2b01 	ldrb.w	r2, [r0], #1
   2235e:	3a30      	subs	r2, #48	; 0x30
   22360:	2a09      	cmp	r2, #9
   22362:	d903      	bls.n	2236c <_svfiprintf_r+0x1a8>
   22364:	2b00      	cmp	r3, #0
   22366:	d0c5      	beq.n	222f4 <_svfiprintf_r+0x130>
   22368:	9105      	str	r1, [sp, #20]
   2236a:	e7c3      	b.n	222f4 <_svfiprintf_r+0x130>
   2236c:	fb0c 2101 	mla	r1, ip, r1, r2
   22370:	4604      	mov	r4, r0
   22372:	2301      	movs	r3, #1
   22374:	e7f0      	b.n	22358 <_svfiprintf_r+0x194>
   22376:	ab03      	add	r3, sp, #12
   22378:	9300      	str	r3, [sp, #0]
   2237a:	462a      	mov	r2, r5
   2237c:	4b0f      	ldr	r3, [pc, #60]	; (223bc <_svfiprintf_r+0x1f8>)
   2237e:	a904      	add	r1, sp, #16
   22380:	4638      	mov	r0, r7
   22382:	f3af 8000 	nop.w
   22386:	1c42      	adds	r2, r0, #1
   22388:	4606      	mov	r6, r0
   2238a:	d1d6      	bne.n	2233a <_svfiprintf_r+0x176>
   2238c:	89ab      	ldrh	r3, [r5, #12]
   2238e:	065b      	lsls	r3, r3, #25
   22390:	f53f af2c 	bmi.w	221ec <_svfiprintf_r+0x28>
   22394:	9809      	ldr	r0, [sp, #36]	; 0x24
   22396:	b01d      	add	sp, #116	; 0x74
   22398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2239c:	ab03      	add	r3, sp, #12
   2239e:	9300      	str	r3, [sp, #0]
   223a0:	462a      	mov	r2, r5
   223a2:	4b06      	ldr	r3, [pc, #24]	; (223bc <_svfiprintf_r+0x1f8>)
   223a4:	a904      	add	r1, sp, #16
   223a6:	4638      	mov	r0, r7
   223a8:	f000 f984 	bl	226b4 <_printf_i>
   223ac:	e7eb      	b.n	22386 <_svfiprintf_r+0x1c2>
   223ae:	bf00      	nop
   223b0:	000395f7 	.word	0x000395f7
   223b4:	00039601 	.word	0x00039601
   223b8:	00000000 	.word	0x00000000
   223bc:	0002b919 	.word	0x0002b919
   223c0:	000395fd 	.word	0x000395fd

000223c4 <__ssvfiscanf_r>:
   223c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223c8:	460c      	mov	r4, r1
   223ca:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
   223ce:	2100      	movs	r1, #0
   223d0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   223d4:	49b2      	ldr	r1, [pc, #712]	; (226a0 <__ssvfiscanf_r+0x2dc>)
   223d6:	91a0      	str	r1, [sp, #640]	; 0x280
   223d8:	f10d 0804 	add.w	r8, sp, #4
   223dc:	49b1      	ldr	r1, [pc, #708]	; (226a4 <__ssvfiscanf_r+0x2e0>)
   223de:	4fb2      	ldr	r7, [pc, #712]	; (226a8 <__ssvfiscanf_r+0x2e4>)
   223e0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 226ac <__ssvfiscanf_r+0x2e8>
   223e4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   223e8:	4606      	mov	r6, r0
   223ea:	91a1      	str	r1, [sp, #644]	; 0x284
   223ec:	9300      	str	r3, [sp, #0]
   223ee:	f892 a000 	ldrb.w	sl, [r2]
   223f2:	f1ba 0f00 	cmp.w	sl, #0
   223f6:	f000 8151 	beq.w	2269c <__ssvfiscanf_r+0x2d8>
   223fa:	f81a 3007 	ldrb.w	r3, [sl, r7]
   223fe:	f013 0308 	ands.w	r3, r3, #8
   22402:	f102 0501 	add.w	r5, r2, #1
   22406:	d019      	beq.n	2243c <__ssvfiscanf_r+0x78>
   22408:	6863      	ldr	r3, [r4, #4]
   2240a:	2b00      	cmp	r3, #0
   2240c:	dd0f      	ble.n	2242e <__ssvfiscanf_r+0x6a>
   2240e:	6823      	ldr	r3, [r4, #0]
   22410:	781a      	ldrb	r2, [r3, #0]
   22412:	5cba      	ldrb	r2, [r7, r2]
   22414:	0712      	lsls	r2, r2, #28
   22416:	d401      	bmi.n	2241c <__ssvfiscanf_r+0x58>
   22418:	462a      	mov	r2, r5
   2241a:	e7e8      	b.n	223ee <__ssvfiscanf_r+0x2a>
   2241c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2241e:	3201      	adds	r2, #1
   22420:	9245      	str	r2, [sp, #276]	; 0x114
   22422:	6862      	ldr	r2, [r4, #4]
   22424:	3301      	adds	r3, #1
   22426:	3a01      	subs	r2, #1
   22428:	6062      	str	r2, [r4, #4]
   2242a:	6023      	str	r3, [r4, #0]
   2242c:	e7ec      	b.n	22408 <__ssvfiscanf_r+0x44>
   2242e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   22430:	4621      	mov	r1, r4
   22432:	4630      	mov	r0, r6
   22434:	4798      	blx	r3
   22436:	2800      	cmp	r0, #0
   22438:	d0e9      	beq.n	2240e <__ssvfiscanf_r+0x4a>
   2243a:	e7ed      	b.n	22418 <__ssvfiscanf_r+0x54>
   2243c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
   22440:	f040 8083 	bne.w	2254a <__ssvfiscanf_r+0x186>
   22444:	9341      	str	r3, [sp, #260]	; 0x104
   22446:	9343      	str	r3, [sp, #268]	; 0x10c
   22448:	7853      	ldrb	r3, [r2, #1]
   2244a:	2b2a      	cmp	r3, #42	; 0x2a
   2244c:	bf02      	ittt	eq
   2244e:	2310      	moveq	r3, #16
   22450:	1c95      	addeq	r5, r2, #2
   22452:	9341      	streq	r3, [sp, #260]	; 0x104
   22454:	220a      	movs	r2, #10
   22456:	46ab      	mov	fp, r5
   22458:	f81b 1b01 	ldrb.w	r1, [fp], #1
   2245c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   22460:	2b09      	cmp	r3, #9
   22462:	d91d      	bls.n	224a0 <__ssvfiscanf_r+0xdc>
   22464:	4891      	ldr	r0, [pc, #580]	; (226ac <__ssvfiscanf_r+0x2e8>)
   22466:	2203      	movs	r2, #3
   22468:	f7dd fe3a 	bl	e0 <memchr>
   2246c:	b140      	cbz	r0, 22480 <__ssvfiscanf_r+0xbc>
   2246e:	2301      	movs	r3, #1
   22470:	eba0 0009 	sub.w	r0, r0, r9
   22474:	fa03 f000 	lsl.w	r0, r3, r0
   22478:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2247a:	4318      	orrs	r0, r3
   2247c:	9041      	str	r0, [sp, #260]	; 0x104
   2247e:	465d      	mov	r5, fp
   22480:	f815 3b01 	ldrb.w	r3, [r5], #1
   22484:	2b78      	cmp	r3, #120	; 0x78
   22486:	d806      	bhi.n	22496 <__ssvfiscanf_r+0xd2>
   22488:	2b57      	cmp	r3, #87	; 0x57
   2248a:	d810      	bhi.n	224ae <__ssvfiscanf_r+0xea>
   2248c:	2b25      	cmp	r3, #37	; 0x25
   2248e:	d05c      	beq.n	2254a <__ssvfiscanf_r+0x186>
   22490:	d856      	bhi.n	22540 <__ssvfiscanf_r+0x17c>
   22492:	2b00      	cmp	r3, #0
   22494:	d074      	beq.n	22580 <__ssvfiscanf_r+0x1bc>
   22496:	2303      	movs	r3, #3
   22498:	9347      	str	r3, [sp, #284]	; 0x11c
   2249a:	230a      	movs	r3, #10
   2249c:	9342      	str	r3, [sp, #264]	; 0x108
   2249e:	e081      	b.n	225a4 <__ssvfiscanf_r+0x1e0>
   224a0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   224a2:	fb02 1303 	mla	r3, r2, r3, r1
   224a6:	3b30      	subs	r3, #48	; 0x30
   224a8:	9343      	str	r3, [sp, #268]	; 0x10c
   224aa:	465d      	mov	r5, fp
   224ac:	e7d3      	b.n	22456 <__ssvfiscanf_r+0x92>
   224ae:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   224b2:	2a20      	cmp	r2, #32
   224b4:	d8ef      	bhi.n	22496 <__ssvfiscanf_r+0xd2>
   224b6:	a101      	add	r1, pc, #4	; (adr r1, 224bc <__ssvfiscanf_r+0xf8>)
   224b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   224bc:	0002258f 	.word	0x0002258f
   224c0:	00022497 	.word	0x00022497
   224c4:	00022497 	.word	0x00022497
   224c8:	000225ed 	.word	0x000225ed
   224cc:	00022497 	.word	0x00022497
   224d0:	00022497 	.word	0x00022497
   224d4:	00022497 	.word	0x00022497
   224d8:	00022497 	.word	0x00022497
   224dc:	00022497 	.word	0x00022497
   224e0:	00022497 	.word	0x00022497
   224e4:	00022497 	.word	0x00022497
   224e8:	00022603 	.word	0x00022603
   224ec:	000225d9 	.word	0x000225d9
   224f0:	00022547 	.word	0x00022547
   224f4:	00022547 	.word	0x00022547
   224f8:	00022547 	.word	0x00022547
   224fc:	00022497 	.word	0x00022497
   22500:	000225dd 	.word	0x000225dd
   22504:	00022497 	.word	0x00022497
   22508:	00022497 	.word	0x00022497
   2250c:	00022497 	.word	0x00022497
   22510:	00022497 	.word	0x00022497
   22514:	00022613 	.word	0x00022613
   22518:	000225e5 	.word	0x000225e5
   2251c:	00022587 	.word	0x00022587
   22520:	00022497 	.word	0x00022497
   22524:	00022497 	.word	0x00022497
   22528:	0002260f 	.word	0x0002260f
   2252c:	00022497 	.word	0x00022497
   22530:	000225d9 	.word	0x000225d9
   22534:	00022497 	.word	0x00022497
   22538:	00022497 	.word	0x00022497
   2253c:	0002258f 	.word	0x0002258f
   22540:	3b45      	subs	r3, #69	; 0x45
   22542:	2b02      	cmp	r3, #2
   22544:	d8a7      	bhi.n	22496 <__ssvfiscanf_r+0xd2>
   22546:	2305      	movs	r3, #5
   22548:	e02b      	b.n	225a2 <__ssvfiscanf_r+0x1de>
   2254a:	6863      	ldr	r3, [r4, #4]
   2254c:	2b00      	cmp	r3, #0
   2254e:	dd0d      	ble.n	2256c <__ssvfiscanf_r+0x1a8>
   22550:	6823      	ldr	r3, [r4, #0]
   22552:	781a      	ldrb	r2, [r3, #0]
   22554:	4552      	cmp	r2, sl
   22556:	f040 80a1 	bne.w	2269c <__ssvfiscanf_r+0x2d8>
   2255a:	3301      	adds	r3, #1
   2255c:	6862      	ldr	r2, [r4, #4]
   2255e:	6023      	str	r3, [r4, #0]
   22560:	9b45      	ldr	r3, [sp, #276]	; 0x114
   22562:	3a01      	subs	r2, #1
   22564:	3301      	adds	r3, #1
   22566:	6062      	str	r2, [r4, #4]
   22568:	9345      	str	r3, [sp, #276]	; 0x114
   2256a:	e755      	b.n	22418 <__ssvfiscanf_r+0x54>
   2256c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   2256e:	4621      	mov	r1, r4
   22570:	4630      	mov	r0, r6
   22572:	4798      	blx	r3
   22574:	2800      	cmp	r0, #0
   22576:	d0eb      	beq.n	22550 <__ssvfiscanf_r+0x18c>
   22578:	9844      	ldr	r0, [sp, #272]	; 0x110
   2257a:	2800      	cmp	r0, #0
   2257c:	f040 8084 	bne.w	22688 <__ssvfiscanf_r+0x2c4>
   22580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22584:	e086      	b.n	22694 <__ssvfiscanf_r+0x2d0>
   22586:	9a41      	ldr	r2, [sp, #260]	; 0x104
   22588:	f042 0220 	orr.w	r2, r2, #32
   2258c:	9241      	str	r2, [sp, #260]	; 0x104
   2258e:	9a41      	ldr	r2, [sp, #260]	; 0x104
   22590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   22594:	9241      	str	r2, [sp, #260]	; 0x104
   22596:	2210      	movs	r2, #16
   22598:	2b6f      	cmp	r3, #111	; 0x6f
   2259a:	9242      	str	r2, [sp, #264]	; 0x108
   2259c:	bf34      	ite	cc
   2259e:	2303      	movcc	r3, #3
   225a0:	2304      	movcs	r3, #4
   225a2:	9347      	str	r3, [sp, #284]	; 0x11c
   225a4:	6863      	ldr	r3, [r4, #4]
   225a6:	2b00      	cmp	r3, #0
   225a8:	dd41      	ble.n	2262e <__ssvfiscanf_r+0x26a>
   225aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
   225ac:	0659      	lsls	r1, r3, #25
   225ae:	d404      	bmi.n	225ba <__ssvfiscanf_r+0x1f6>
   225b0:	6823      	ldr	r3, [r4, #0]
   225b2:	781a      	ldrb	r2, [r3, #0]
   225b4:	5cba      	ldrb	r2, [r7, r2]
   225b6:	0712      	lsls	r2, r2, #28
   225b8:	d440      	bmi.n	2263c <__ssvfiscanf_r+0x278>
   225ba:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   225bc:	2b02      	cmp	r3, #2
   225be:	dc4f      	bgt.n	22660 <__ssvfiscanf_r+0x29c>
   225c0:	466b      	mov	r3, sp
   225c2:	4622      	mov	r2, r4
   225c4:	a941      	add	r1, sp, #260	; 0x104
   225c6:	4630      	mov	r0, r6
   225c8:	f000 f99a 	bl	22900 <_scanf_chars>
   225cc:	2801      	cmp	r0, #1
   225ce:	d065      	beq.n	2269c <__ssvfiscanf_r+0x2d8>
   225d0:	2802      	cmp	r0, #2
   225d2:	f47f af21 	bne.w	22418 <__ssvfiscanf_r+0x54>
   225d6:	e7cf      	b.n	22578 <__ssvfiscanf_r+0x1b4>
   225d8:	220a      	movs	r2, #10
   225da:	e7dd      	b.n	22598 <__ssvfiscanf_r+0x1d4>
   225dc:	2300      	movs	r3, #0
   225de:	9342      	str	r3, [sp, #264]	; 0x108
   225e0:	2303      	movs	r3, #3
   225e2:	e7de      	b.n	225a2 <__ssvfiscanf_r+0x1de>
   225e4:	2308      	movs	r3, #8
   225e6:	9342      	str	r3, [sp, #264]	; 0x108
   225e8:	2304      	movs	r3, #4
   225ea:	e7da      	b.n	225a2 <__ssvfiscanf_r+0x1de>
   225ec:	4629      	mov	r1, r5
   225ee:	4640      	mov	r0, r8
   225f0:	f009 fab4 	bl	2bb5c <__sccl>
   225f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   225f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   225fa:	9341      	str	r3, [sp, #260]	; 0x104
   225fc:	4605      	mov	r5, r0
   225fe:	2301      	movs	r3, #1
   22600:	e7cf      	b.n	225a2 <__ssvfiscanf_r+0x1de>
   22602:	9b41      	ldr	r3, [sp, #260]	; 0x104
   22604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22608:	9341      	str	r3, [sp, #260]	; 0x104
   2260a:	2300      	movs	r3, #0
   2260c:	e7c9      	b.n	225a2 <__ssvfiscanf_r+0x1de>
   2260e:	2302      	movs	r3, #2
   22610:	e7c7      	b.n	225a2 <__ssvfiscanf_r+0x1de>
   22612:	9841      	ldr	r0, [sp, #260]	; 0x104
   22614:	06c3      	lsls	r3, r0, #27
   22616:	f53f aeff 	bmi.w	22418 <__ssvfiscanf_r+0x54>
   2261a:	9b00      	ldr	r3, [sp, #0]
   2261c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2261e:	1d19      	adds	r1, r3, #4
   22620:	9100      	str	r1, [sp, #0]
   22622:	681b      	ldr	r3, [r3, #0]
   22624:	07c0      	lsls	r0, r0, #31
   22626:	bf4c      	ite	mi
   22628:	801a      	strhmi	r2, [r3, #0]
   2262a:	601a      	strpl	r2, [r3, #0]
   2262c:	e6f4      	b.n	22418 <__ssvfiscanf_r+0x54>
   2262e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   22630:	4621      	mov	r1, r4
   22632:	4630      	mov	r0, r6
   22634:	4798      	blx	r3
   22636:	2800      	cmp	r0, #0
   22638:	d0b7      	beq.n	225aa <__ssvfiscanf_r+0x1e6>
   2263a:	e79d      	b.n	22578 <__ssvfiscanf_r+0x1b4>
   2263c:	9a45      	ldr	r2, [sp, #276]	; 0x114
   2263e:	3201      	adds	r2, #1
   22640:	9245      	str	r2, [sp, #276]	; 0x114
   22642:	6862      	ldr	r2, [r4, #4]
   22644:	3a01      	subs	r2, #1
   22646:	2a00      	cmp	r2, #0
   22648:	6062      	str	r2, [r4, #4]
   2264a:	dd02      	ble.n	22652 <__ssvfiscanf_r+0x28e>
   2264c:	3301      	adds	r3, #1
   2264e:	6023      	str	r3, [r4, #0]
   22650:	e7ae      	b.n	225b0 <__ssvfiscanf_r+0x1ec>
   22652:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   22654:	4621      	mov	r1, r4
   22656:	4630      	mov	r0, r6
   22658:	4798      	blx	r3
   2265a:	2800      	cmp	r0, #0
   2265c:	d0a8      	beq.n	225b0 <__ssvfiscanf_r+0x1ec>
   2265e:	e78b      	b.n	22578 <__ssvfiscanf_r+0x1b4>
   22660:	2b04      	cmp	r3, #4
   22662:	dc06      	bgt.n	22672 <__ssvfiscanf_r+0x2ae>
   22664:	466b      	mov	r3, sp
   22666:	4622      	mov	r2, r4
   22668:	a941      	add	r1, sp, #260	; 0x104
   2266a:	4630      	mov	r0, r6
   2266c:	f000 f9a0 	bl	229b0 <_scanf_i>
   22670:	e7ac      	b.n	225cc <__ssvfiscanf_r+0x208>
   22672:	4b0f      	ldr	r3, [pc, #60]	; (226b0 <__ssvfiscanf_r+0x2ec>)
   22674:	2b00      	cmp	r3, #0
   22676:	f43f aecf 	beq.w	22418 <__ssvfiscanf_r+0x54>
   2267a:	466b      	mov	r3, sp
   2267c:	4622      	mov	r2, r4
   2267e:	a941      	add	r1, sp, #260	; 0x104
   22680:	4630      	mov	r0, r6
   22682:	f3af 8000 	nop.w
   22686:	e7a1      	b.n	225cc <__ssvfiscanf_r+0x208>
   22688:	89a3      	ldrh	r3, [r4, #12]
   2268a:	f013 0f40 	tst.w	r3, #64	; 0x40
   2268e:	bf18      	it	ne
   22690:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   22694:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
   22698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2269c:	9844      	ldr	r0, [sp, #272]	; 0x110
   2269e:	e7f9      	b.n	22694 <__ssvfiscanf_r+0x2d0>
   226a0:	0002b9cf 	.word	0x0002b9cf
   226a4:	0002ba49 	.word	0x0002ba49
   226a8:	0003933c 	.word	0x0003933c
   226ac:	000395fd 	.word	0x000395fd
   226b0:	00000000 	.word	0x00000000

000226b4 <_printf_i>:
   226b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   226b8:	460c      	mov	r4, r1
   226ba:	4691      	mov	r9, r2
   226bc:	7e27      	ldrb	r7, [r4, #24]
   226be:	990c      	ldr	r1, [sp, #48]	; 0x30
   226c0:	2f78      	cmp	r7, #120	; 0x78
   226c2:	4680      	mov	r8, r0
   226c4:	469a      	mov	sl, r3
   226c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   226ca:	d807      	bhi.n	226dc <_printf_i+0x28>
   226cc:	2f62      	cmp	r7, #98	; 0x62
   226ce:	d80a      	bhi.n	226e6 <_printf_i+0x32>
   226d0:	2f00      	cmp	r7, #0
   226d2:	f000 80d8 	beq.w	22886 <_printf_i+0x1d2>
   226d6:	2f58      	cmp	r7, #88	; 0x58
   226d8:	f000 80a3 	beq.w	22822 <_printf_i+0x16e>
   226dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
   226e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   226e4:	e03a      	b.n	2275c <_printf_i+0xa8>
   226e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   226ea:	2b15      	cmp	r3, #21
   226ec:	d8f6      	bhi.n	226dc <_printf_i+0x28>
   226ee:	a001      	add	r0, pc, #4	; (adr r0, 226f4 <_printf_i+0x40>)
   226f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   226f4:	0002274d 	.word	0x0002274d
   226f8:	00022761 	.word	0x00022761
   226fc:	000226dd 	.word	0x000226dd
   22700:	000226dd 	.word	0x000226dd
   22704:	000226dd 	.word	0x000226dd
   22708:	000226dd 	.word	0x000226dd
   2270c:	00022761 	.word	0x00022761
   22710:	000226dd 	.word	0x000226dd
   22714:	000226dd 	.word	0x000226dd
   22718:	000226dd 	.word	0x000226dd
   2271c:	000226dd 	.word	0x000226dd
   22720:	0002286d 	.word	0x0002286d
   22724:	00022791 	.word	0x00022791
   22728:	0002284f 	.word	0x0002284f
   2272c:	000226dd 	.word	0x000226dd
   22730:	000226dd 	.word	0x000226dd
   22734:	0002288f 	.word	0x0002288f
   22738:	000226dd 	.word	0x000226dd
   2273c:	00022791 	.word	0x00022791
   22740:	000226dd 	.word	0x000226dd
   22744:	000226dd 	.word	0x000226dd
   22748:	00022857 	.word	0x00022857
   2274c:	680b      	ldr	r3, [r1, #0]
   2274e:	1d1a      	adds	r2, r3, #4
   22750:	681b      	ldr	r3, [r3, #0]
   22752:	600a      	str	r2, [r1, #0]
   22754:	f104 0642 	add.w	r6, r4, #66	; 0x42
   22758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2275c:	2301      	movs	r3, #1
   2275e:	e0a3      	b.n	228a8 <_printf_i+0x1f4>
   22760:	6825      	ldr	r5, [r4, #0]
   22762:	6808      	ldr	r0, [r1, #0]
   22764:	062e      	lsls	r6, r5, #24
   22766:	f100 0304 	add.w	r3, r0, #4
   2276a:	d50a      	bpl.n	22782 <_printf_i+0xce>
   2276c:	6805      	ldr	r5, [r0, #0]
   2276e:	600b      	str	r3, [r1, #0]
   22770:	2d00      	cmp	r5, #0
   22772:	da03      	bge.n	2277c <_printf_i+0xc8>
   22774:	232d      	movs	r3, #45	; 0x2d
   22776:	426d      	negs	r5, r5
   22778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2277c:	485e      	ldr	r0, [pc, #376]	; (228f8 <_printf_i+0x244>)
   2277e:	230a      	movs	r3, #10
   22780:	e019      	b.n	227b6 <_printf_i+0x102>
   22782:	f015 0f40 	tst.w	r5, #64	; 0x40
   22786:	6805      	ldr	r5, [r0, #0]
   22788:	600b      	str	r3, [r1, #0]
   2278a:	bf18      	it	ne
   2278c:	b22d      	sxthne	r5, r5
   2278e:	e7ef      	b.n	22770 <_printf_i+0xbc>
   22790:	680b      	ldr	r3, [r1, #0]
   22792:	6825      	ldr	r5, [r4, #0]
   22794:	1d18      	adds	r0, r3, #4
   22796:	6008      	str	r0, [r1, #0]
   22798:	0628      	lsls	r0, r5, #24
   2279a:	d501      	bpl.n	227a0 <_printf_i+0xec>
   2279c:	681d      	ldr	r5, [r3, #0]
   2279e:	e002      	b.n	227a6 <_printf_i+0xf2>
   227a0:	0669      	lsls	r1, r5, #25
   227a2:	d5fb      	bpl.n	2279c <_printf_i+0xe8>
   227a4:	881d      	ldrh	r5, [r3, #0]
   227a6:	4854      	ldr	r0, [pc, #336]	; (228f8 <_printf_i+0x244>)
   227a8:	2f6f      	cmp	r7, #111	; 0x6f
   227aa:	bf0c      	ite	eq
   227ac:	2308      	moveq	r3, #8
   227ae:	230a      	movne	r3, #10
   227b0:	2100      	movs	r1, #0
   227b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   227b6:	6866      	ldr	r6, [r4, #4]
   227b8:	60a6      	str	r6, [r4, #8]
   227ba:	2e00      	cmp	r6, #0
   227bc:	bfa2      	ittt	ge
   227be:	6821      	ldrge	r1, [r4, #0]
   227c0:	f021 0104 	bicge.w	r1, r1, #4
   227c4:	6021      	strge	r1, [r4, #0]
   227c6:	b90d      	cbnz	r5, 227cc <_printf_i+0x118>
   227c8:	2e00      	cmp	r6, #0
   227ca:	d04d      	beq.n	22868 <_printf_i+0x1b4>
   227cc:	4616      	mov	r6, r2
   227ce:	fbb5 f1f3 	udiv	r1, r5, r3
   227d2:	fb03 5711 	mls	r7, r3, r1, r5
   227d6:	5dc7      	ldrb	r7, [r0, r7]
   227d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
   227dc:	462f      	mov	r7, r5
   227de:	42bb      	cmp	r3, r7
   227e0:	460d      	mov	r5, r1
   227e2:	d9f4      	bls.n	227ce <_printf_i+0x11a>
   227e4:	2b08      	cmp	r3, #8
   227e6:	d10b      	bne.n	22800 <_printf_i+0x14c>
   227e8:	6823      	ldr	r3, [r4, #0]
   227ea:	07df      	lsls	r7, r3, #31
   227ec:	d508      	bpl.n	22800 <_printf_i+0x14c>
   227ee:	6923      	ldr	r3, [r4, #16]
   227f0:	6861      	ldr	r1, [r4, #4]
   227f2:	4299      	cmp	r1, r3
   227f4:	bfde      	ittt	le
   227f6:	2330      	movle	r3, #48	; 0x30
   227f8:	f806 3c01 	strble.w	r3, [r6, #-1]
   227fc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
   22800:	1b92      	subs	r2, r2, r6
   22802:	6122      	str	r2, [r4, #16]
   22804:	f8cd a000 	str.w	sl, [sp]
   22808:	464b      	mov	r3, r9
   2280a:	aa03      	add	r2, sp, #12
   2280c:	4621      	mov	r1, r4
   2280e:	4640      	mov	r0, r8
   22810:	f009 f937 	bl	2ba82 <_printf_common>
   22814:	3001      	adds	r0, #1
   22816:	d14c      	bne.n	228b2 <_printf_i+0x1fe>
   22818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2281c:	b004      	add	sp, #16
   2281e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22822:	4835      	ldr	r0, [pc, #212]	; (228f8 <_printf_i+0x244>)
   22824:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   22828:	6823      	ldr	r3, [r4, #0]
   2282a:	680e      	ldr	r6, [r1, #0]
   2282c:	061f      	lsls	r7, r3, #24
   2282e:	f856 5b04 	ldr.w	r5, [r6], #4
   22832:	600e      	str	r6, [r1, #0]
   22834:	d514      	bpl.n	22860 <_printf_i+0x1ac>
   22836:	07d9      	lsls	r1, r3, #31
   22838:	bf44      	itt	mi
   2283a:	f043 0320 	orrmi.w	r3, r3, #32
   2283e:	6023      	strmi	r3, [r4, #0]
   22840:	b91d      	cbnz	r5, 2284a <_printf_i+0x196>
   22842:	6823      	ldr	r3, [r4, #0]
   22844:	f023 0320 	bic.w	r3, r3, #32
   22848:	6023      	str	r3, [r4, #0]
   2284a:	2310      	movs	r3, #16
   2284c:	e7b0      	b.n	227b0 <_printf_i+0xfc>
   2284e:	6823      	ldr	r3, [r4, #0]
   22850:	f043 0320 	orr.w	r3, r3, #32
   22854:	6023      	str	r3, [r4, #0]
   22856:	2378      	movs	r3, #120	; 0x78
   22858:	4828      	ldr	r0, [pc, #160]	; (228fc <_printf_i+0x248>)
   2285a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2285e:	e7e3      	b.n	22828 <_printf_i+0x174>
   22860:	065e      	lsls	r6, r3, #25
   22862:	bf48      	it	mi
   22864:	b2ad      	uxthmi	r5, r5
   22866:	e7e6      	b.n	22836 <_printf_i+0x182>
   22868:	4616      	mov	r6, r2
   2286a:	e7bb      	b.n	227e4 <_printf_i+0x130>
   2286c:	680b      	ldr	r3, [r1, #0]
   2286e:	6826      	ldr	r6, [r4, #0]
   22870:	6960      	ldr	r0, [r4, #20]
   22872:	1d1d      	adds	r5, r3, #4
   22874:	600d      	str	r5, [r1, #0]
   22876:	0635      	lsls	r5, r6, #24
   22878:	681b      	ldr	r3, [r3, #0]
   2287a:	d501      	bpl.n	22880 <_printf_i+0x1cc>
   2287c:	6018      	str	r0, [r3, #0]
   2287e:	e002      	b.n	22886 <_printf_i+0x1d2>
   22880:	0671      	lsls	r1, r6, #25
   22882:	d5fb      	bpl.n	2287c <_printf_i+0x1c8>
   22884:	8018      	strh	r0, [r3, #0]
   22886:	2300      	movs	r3, #0
   22888:	6123      	str	r3, [r4, #16]
   2288a:	4616      	mov	r6, r2
   2288c:	e7ba      	b.n	22804 <_printf_i+0x150>
   2288e:	680b      	ldr	r3, [r1, #0]
   22890:	1d1a      	adds	r2, r3, #4
   22892:	600a      	str	r2, [r1, #0]
   22894:	681e      	ldr	r6, [r3, #0]
   22896:	6862      	ldr	r2, [r4, #4]
   22898:	2100      	movs	r1, #0
   2289a:	4630      	mov	r0, r6
   2289c:	f7dd fc20 	bl	e0 <memchr>
   228a0:	b108      	cbz	r0, 228a6 <_printf_i+0x1f2>
   228a2:	1b80      	subs	r0, r0, r6
   228a4:	6060      	str	r0, [r4, #4]
   228a6:	6863      	ldr	r3, [r4, #4]
   228a8:	6123      	str	r3, [r4, #16]
   228aa:	2300      	movs	r3, #0
   228ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   228b0:	e7a8      	b.n	22804 <_printf_i+0x150>
   228b2:	6923      	ldr	r3, [r4, #16]
   228b4:	4632      	mov	r2, r6
   228b6:	4649      	mov	r1, r9
   228b8:	4640      	mov	r0, r8
   228ba:	47d0      	blx	sl
   228bc:	3001      	adds	r0, #1
   228be:	d0ab      	beq.n	22818 <_printf_i+0x164>
   228c0:	6823      	ldr	r3, [r4, #0]
   228c2:	079b      	lsls	r3, r3, #30
   228c4:	d413      	bmi.n	228ee <_printf_i+0x23a>
   228c6:	68e0      	ldr	r0, [r4, #12]
   228c8:	9b03      	ldr	r3, [sp, #12]
   228ca:	4298      	cmp	r0, r3
   228cc:	bfb8      	it	lt
   228ce:	4618      	movlt	r0, r3
   228d0:	e7a4      	b.n	2281c <_printf_i+0x168>
   228d2:	2301      	movs	r3, #1
   228d4:	4632      	mov	r2, r6
   228d6:	4649      	mov	r1, r9
   228d8:	4640      	mov	r0, r8
   228da:	47d0      	blx	sl
   228dc:	3001      	adds	r0, #1
   228de:	d09b      	beq.n	22818 <_printf_i+0x164>
   228e0:	3501      	adds	r5, #1
   228e2:	68e3      	ldr	r3, [r4, #12]
   228e4:	9903      	ldr	r1, [sp, #12]
   228e6:	1a5b      	subs	r3, r3, r1
   228e8:	42ab      	cmp	r3, r5
   228ea:	dcf2      	bgt.n	228d2 <_printf_i+0x21e>
   228ec:	e7eb      	b.n	228c6 <_printf_i+0x212>
   228ee:	2500      	movs	r5, #0
   228f0:	f104 0619 	add.w	r6, r4, #25
   228f4:	e7f5      	b.n	228e2 <_printf_i+0x22e>
   228f6:	bf00      	nop
   228f8:	00039608 	.word	0x00039608
   228fc:	00039619 	.word	0x00039619

00022900 <_scanf_chars>:
   22900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22904:	4615      	mov	r5, r2
   22906:	688a      	ldr	r2, [r1, #8]
   22908:	4680      	mov	r8, r0
   2290a:	460c      	mov	r4, r1
   2290c:	b932      	cbnz	r2, 2291c <_scanf_chars+0x1c>
   2290e:	698a      	ldr	r2, [r1, #24]
   22910:	2a00      	cmp	r2, #0
   22912:	bf0c      	ite	eq
   22914:	2201      	moveq	r2, #1
   22916:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   2291a:	608a      	str	r2, [r1, #8]
   2291c:	6822      	ldr	r2, [r4, #0]
   2291e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 229ac <_scanf_chars+0xac>
   22922:	06d1      	lsls	r1, r2, #27
   22924:	bf5f      	itttt	pl
   22926:	681a      	ldrpl	r2, [r3, #0]
   22928:	1d11      	addpl	r1, r2, #4
   2292a:	6019      	strpl	r1, [r3, #0]
   2292c:	6816      	ldrpl	r6, [r2, #0]
   2292e:	2700      	movs	r7, #0
   22930:	69a0      	ldr	r0, [r4, #24]
   22932:	b188      	cbz	r0, 22958 <_scanf_chars+0x58>
   22934:	2801      	cmp	r0, #1
   22936:	d107      	bne.n	22948 <_scanf_chars+0x48>
   22938:	682b      	ldr	r3, [r5, #0]
   2293a:	781a      	ldrb	r2, [r3, #0]
   2293c:	6963      	ldr	r3, [r4, #20]
   2293e:	5c9b      	ldrb	r3, [r3, r2]
   22940:	b953      	cbnz	r3, 22958 <_scanf_chars+0x58>
   22942:	bb27      	cbnz	r7, 2298e <_scanf_chars+0x8e>
   22944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22948:	2802      	cmp	r0, #2
   2294a:	d120      	bne.n	2298e <_scanf_chars+0x8e>
   2294c:	682b      	ldr	r3, [r5, #0]
   2294e:	781b      	ldrb	r3, [r3, #0]
   22950:	f813 3009 	ldrb.w	r3, [r3, r9]
   22954:	071b      	lsls	r3, r3, #28
   22956:	d41a      	bmi.n	2298e <_scanf_chars+0x8e>
   22958:	6823      	ldr	r3, [r4, #0]
   2295a:	06da      	lsls	r2, r3, #27
   2295c:	bf5e      	ittt	pl
   2295e:	682b      	ldrpl	r3, [r5, #0]
   22960:	781b      	ldrbpl	r3, [r3, #0]
   22962:	f806 3b01 	strbpl.w	r3, [r6], #1
   22966:	682a      	ldr	r2, [r5, #0]
   22968:	686b      	ldr	r3, [r5, #4]
   2296a:	3201      	adds	r2, #1
   2296c:	602a      	str	r2, [r5, #0]
   2296e:	68a2      	ldr	r2, [r4, #8]
   22970:	3b01      	subs	r3, #1
   22972:	3a01      	subs	r2, #1
   22974:	606b      	str	r3, [r5, #4]
   22976:	3701      	adds	r7, #1
   22978:	60a2      	str	r2, [r4, #8]
   2297a:	b142      	cbz	r2, 2298e <_scanf_chars+0x8e>
   2297c:	2b00      	cmp	r3, #0
   2297e:	dcd7      	bgt.n	22930 <_scanf_chars+0x30>
   22980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   22984:	4629      	mov	r1, r5
   22986:	4640      	mov	r0, r8
   22988:	4798      	blx	r3
   2298a:	2800      	cmp	r0, #0
   2298c:	d0d0      	beq.n	22930 <_scanf_chars+0x30>
   2298e:	6823      	ldr	r3, [r4, #0]
   22990:	f013 0310 	ands.w	r3, r3, #16
   22994:	d105      	bne.n	229a2 <_scanf_chars+0xa2>
   22996:	68e2      	ldr	r2, [r4, #12]
   22998:	3201      	adds	r2, #1
   2299a:	60e2      	str	r2, [r4, #12]
   2299c:	69a2      	ldr	r2, [r4, #24]
   2299e:	b102      	cbz	r2, 229a2 <_scanf_chars+0xa2>
   229a0:	7033      	strb	r3, [r6, #0]
   229a2:	6923      	ldr	r3, [r4, #16]
   229a4:	441f      	add	r7, r3
   229a6:	6127      	str	r7, [r4, #16]
   229a8:	2000      	movs	r0, #0
   229aa:	e7cb      	b.n	22944 <_scanf_chars+0x44>
   229ac:	0003933c 	.word	0x0003933c

000229b0 <_scanf_i>:
   229b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   229b4:	4698      	mov	r8, r3
   229b6:	4b74      	ldr	r3, [pc, #464]	; (22b88 <_scanf_i+0x1d8>)
   229b8:	460c      	mov	r4, r1
   229ba:	4682      	mov	sl, r0
   229bc:	4616      	mov	r6, r2
   229be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   229c2:	b087      	sub	sp, #28
   229c4:	ab03      	add	r3, sp, #12
   229c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   229ca:	4b70      	ldr	r3, [pc, #448]	; (22b8c <_scanf_i+0x1dc>)
   229cc:	69a1      	ldr	r1, [r4, #24]
   229ce:	4a70      	ldr	r2, [pc, #448]	; (22b90 <_scanf_i+0x1e0>)
   229d0:	2903      	cmp	r1, #3
   229d2:	bf18      	it	ne
   229d4:	461a      	movne	r2, r3
   229d6:	68a3      	ldr	r3, [r4, #8]
   229d8:	9201      	str	r2, [sp, #4]
   229da:	1e5a      	subs	r2, r3, #1
   229dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   229e0:	bf88      	it	hi
   229e2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   229e6:	4627      	mov	r7, r4
   229e8:	bf82      	ittt	hi
   229ea:	eb03 0905 	addhi.w	r9, r3, r5
   229ee:	f240 135d 	movwhi	r3, #349	; 0x15d
   229f2:	60a3      	strhi	r3, [r4, #8]
   229f4:	f857 3b1c 	ldr.w	r3, [r7], #28
   229f8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   229fc:	bf98      	it	ls
   229fe:	f04f 0900 	movls.w	r9, #0
   22a02:	6023      	str	r3, [r4, #0]
   22a04:	463d      	mov	r5, r7
   22a06:	f04f 0b00 	mov.w	fp, #0
   22a0a:	6831      	ldr	r1, [r6, #0]
   22a0c:	ab03      	add	r3, sp, #12
   22a0e:	7809      	ldrb	r1, [r1, #0]
   22a10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   22a14:	2202      	movs	r2, #2
   22a16:	f7dd fb63 	bl	e0 <memchr>
   22a1a:	b328      	cbz	r0, 22a68 <_scanf_i+0xb8>
   22a1c:	f1bb 0f01 	cmp.w	fp, #1
   22a20:	d159      	bne.n	22ad6 <_scanf_i+0x126>
   22a22:	6862      	ldr	r2, [r4, #4]
   22a24:	b92a      	cbnz	r2, 22a32 <_scanf_i+0x82>
   22a26:	6822      	ldr	r2, [r4, #0]
   22a28:	2308      	movs	r3, #8
   22a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   22a2e:	6063      	str	r3, [r4, #4]
   22a30:	6022      	str	r2, [r4, #0]
   22a32:	6822      	ldr	r2, [r4, #0]
   22a34:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   22a38:	6022      	str	r2, [r4, #0]
   22a3a:	68a2      	ldr	r2, [r4, #8]
   22a3c:	1e51      	subs	r1, r2, #1
   22a3e:	60a1      	str	r1, [r4, #8]
   22a40:	b192      	cbz	r2, 22a68 <_scanf_i+0xb8>
   22a42:	6832      	ldr	r2, [r6, #0]
   22a44:	1c51      	adds	r1, r2, #1
   22a46:	6031      	str	r1, [r6, #0]
   22a48:	7812      	ldrb	r2, [r2, #0]
   22a4a:	f805 2b01 	strb.w	r2, [r5], #1
   22a4e:	6872      	ldr	r2, [r6, #4]
   22a50:	3a01      	subs	r2, #1
   22a52:	2a00      	cmp	r2, #0
   22a54:	6072      	str	r2, [r6, #4]
   22a56:	dc07      	bgt.n	22a68 <_scanf_i+0xb8>
   22a58:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   22a5c:	4631      	mov	r1, r6
   22a5e:	4650      	mov	r0, sl
   22a60:	4790      	blx	r2
   22a62:	2800      	cmp	r0, #0
   22a64:	f040 8085 	bne.w	22b72 <_scanf_i+0x1c2>
   22a68:	f10b 0b01 	add.w	fp, fp, #1
   22a6c:	f1bb 0f03 	cmp.w	fp, #3
   22a70:	d1cb      	bne.n	22a0a <_scanf_i+0x5a>
   22a72:	6863      	ldr	r3, [r4, #4]
   22a74:	b90b      	cbnz	r3, 22a7a <_scanf_i+0xca>
   22a76:	230a      	movs	r3, #10
   22a78:	6063      	str	r3, [r4, #4]
   22a7a:	6863      	ldr	r3, [r4, #4]
   22a7c:	4945      	ldr	r1, [pc, #276]	; (22b94 <_scanf_i+0x1e4>)
   22a7e:	6960      	ldr	r0, [r4, #20]
   22a80:	1ac9      	subs	r1, r1, r3
   22a82:	f009 f86b 	bl	2bb5c <__sccl>
   22a86:	f04f 0b00 	mov.w	fp, #0
   22a8a:	68a3      	ldr	r3, [r4, #8]
   22a8c:	6822      	ldr	r2, [r4, #0]
   22a8e:	2b00      	cmp	r3, #0
   22a90:	d03d      	beq.n	22b0e <_scanf_i+0x15e>
   22a92:	6831      	ldr	r1, [r6, #0]
   22a94:	6960      	ldr	r0, [r4, #20]
   22a96:	f891 c000 	ldrb.w	ip, [r1]
   22a9a:	f810 000c 	ldrb.w	r0, [r0, ip]
   22a9e:	2800      	cmp	r0, #0
   22aa0:	d035      	beq.n	22b0e <_scanf_i+0x15e>
   22aa2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   22aa6:	d124      	bne.n	22af2 <_scanf_i+0x142>
   22aa8:	0510      	lsls	r0, r2, #20
   22aaa:	d522      	bpl.n	22af2 <_scanf_i+0x142>
   22aac:	f10b 0b01 	add.w	fp, fp, #1
   22ab0:	f1b9 0f00 	cmp.w	r9, #0
   22ab4:	d003      	beq.n	22abe <_scanf_i+0x10e>
   22ab6:	3301      	adds	r3, #1
   22ab8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   22abc:	60a3      	str	r3, [r4, #8]
   22abe:	6873      	ldr	r3, [r6, #4]
   22ac0:	3b01      	subs	r3, #1
   22ac2:	2b00      	cmp	r3, #0
   22ac4:	6073      	str	r3, [r6, #4]
   22ac6:	dd1b      	ble.n	22b00 <_scanf_i+0x150>
   22ac8:	6833      	ldr	r3, [r6, #0]
   22aca:	3301      	adds	r3, #1
   22acc:	6033      	str	r3, [r6, #0]
   22ace:	68a3      	ldr	r3, [r4, #8]
   22ad0:	3b01      	subs	r3, #1
   22ad2:	60a3      	str	r3, [r4, #8]
   22ad4:	e7d9      	b.n	22a8a <_scanf_i+0xda>
   22ad6:	f1bb 0f02 	cmp.w	fp, #2
   22ada:	d1ae      	bne.n	22a3a <_scanf_i+0x8a>
   22adc:	6822      	ldr	r2, [r4, #0]
   22ade:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   22ae2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   22ae6:	d1bf      	bne.n	22a68 <_scanf_i+0xb8>
   22ae8:	2310      	movs	r3, #16
   22aea:	6063      	str	r3, [r4, #4]
   22aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   22af0:	e7a2      	b.n	22a38 <_scanf_i+0x88>
   22af2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   22af6:	6022      	str	r2, [r4, #0]
   22af8:	780b      	ldrb	r3, [r1, #0]
   22afa:	f805 3b01 	strb.w	r3, [r5], #1
   22afe:	e7de      	b.n	22abe <_scanf_i+0x10e>
   22b00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   22b04:	4631      	mov	r1, r6
   22b06:	4650      	mov	r0, sl
   22b08:	4798      	blx	r3
   22b0a:	2800      	cmp	r0, #0
   22b0c:	d0df      	beq.n	22ace <_scanf_i+0x11e>
   22b0e:	6823      	ldr	r3, [r4, #0]
   22b10:	05d9      	lsls	r1, r3, #23
   22b12:	d50d      	bpl.n	22b30 <_scanf_i+0x180>
   22b14:	42bd      	cmp	r5, r7
   22b16:	d909      	bls.n	22b2c <_scanf_i+0x17c>
   22b18:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   22b1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   22b20:	4632      	mov	r2, r6
   22b22:	4650      	mov	r0, sl
   22b24:	4798      	blx	r3
   22b26:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   22b2a:	464d      	mov	r5, r9
   22b2c:	42bd      	cmp	r5, r7
   22b2e:	d028      	beq.n	22b82 <_scanf_i+0x1d2>
   22b30:	6822      	ldr	r2, [r4, #0]
   22b32:	f012 0210 	ands.w	r2, r2, #16
   22b36:	d113      	bne.n	22b60 <_scanf_i+0x1b0>
   22b38:	702a      	strb	r2, [r5, #0]
   22b3a:	6863      	ldr	r3, [r4, #4]
   22b3c:	9e01      	ldr	r6, [sp, #4]
   22b3e:	4639      	mov	r1, r7
   22b40:	4650      	mov	r0, sl
   22b42:	47b0      	blx	r6
   22b44:	f8d8 3000 	ldr.w	r3, [r8]
   22b48:	6821      	ldr	r1, [r4, #0]
   22b4a:	1d1a      	adds	r2, r3, #4
   22b4c:	f8c8 2000 	str.w	r2, [r8]
   22b50:	f011 0f20 	tst.w	r1, #32
   22b54:	681b      	ldr	r3, [r3, #0]
   22b56:	d00f      	beq.n	22b78 <_scanf_i+0x1c8>
   22b58:	6018      	str	r0, [r3, #0]
   22b5a:	68e3      	ldr	r3, [r4, #12]
   22b5c:	3301      	adds	r3, #1
   22b5e:	60e3      	str	r3, [r4, #12]
   22b60:	1bed      	subs	r5, r5, r7
   22b62:	44ab      	add	fp, r5
   22b64:	6925      	ldr	r5, [r4, #16]
   22b66:	445d      	add	r5, fp
   22b68:	6125      	str	r5, [r4, #16]
   22b6a:	2000      	movs	r0, #0
   22b6c:	b007      	add	sp, #28
   22b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b72:	f04f 0b00 	mov.w	fp, #0
   22b76:	e7ca      	b.n	22b0e <_scanf_i+0x15e>
   22b78:	07ca      	lsls	r2, r1, #31
   22b7a:	bf4c      	ite	mi
   22b7c:	8018      	strhmi	r0, [r3, #0]
   22b7e:	6018      	strpl	r0, [r3, #0]
   22b80:	e7eb      	b.n	22b5a <_scanf_i+0x1aa>
   22b82:	2001      	movs	r0, #1
   22b84:	e7f2      	b.n	22b6c <_scanf_i+0x1bc>
   22b86:	bf00      	nop
   22b88:	0002c0f4 	.word	0x0002c0f4
   22b8c:	0002b84f 	.word	0x0002b84f
   22b90:	0002b84b 	.word	0x0002b84b
   22b94:	00039640 	.word	0x00039640

00022b98 <_sbrk_r>:
   22b98:	b538      	push	{r3, r4, r5, lr}
   22b9a:	4d06      	ldr	r5, [pc, #24]	; (22bb4 <_sbrk_r+0x1c>)
   22b9c:	2300      	movs	r3, #0
   22b9e:	4604      	mov	r4, r0
   22ba0:	4608      	mov	r0, r1
   22ba2:	602b      	str	r3, [r5, #0]
   22ba4:	f7e2 f88a 	bl	4cbc <_sbrk>
   22ba8:	1c43      	adds	r3, r0, #1
   22baa:	d102      	bne.n	22bb2 <_sbrk_r+0x1a>
   22bac:	682b      	ldr	r3, [r5, #0]
   22bae:	b103      	cbz	r3, 22bb2 <_sbrk_r+0x1a>
   22bb0:	6023      	str	r3, [r4, #0]
   22bb2:	bd38      	pop	{r3, r4, r5, pc}
   22bb4:	2000874c 	.word	0x2000874c

00022bb8 <le_param_req>:
}
   22bb8:	2001      	movs	r0, #1
   22bba:	4770      	bx	lr

00022bbc <le_param_updated>:
}
   22bbc:	4770      	bx	lr

00022bbe <display_task_handler>:
{
   22bbe:	b508      	push	{r3, lr}
	lv_tick_inc(TICK_PERIOD);
   22bc0:	200a      	movs	r0, #10
   22bc2:	f7fa fc8b 	bl	1d4dc <lv_tick_inc>
}
   22bc6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lv_task_handler();
   22bca:	f7fa be9b 	b.w	1d904 <lv_task_handler>

00022bce <lv_scr_act>:
{
   22bce:	b508      	push	{r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   22bd0:	f7fa fbc0 	bl	1d354 <lv_disp_get_default>
}
   22bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return lv_disp_get_scr_act(lv_disp_get_default());
   22bd8:	f7f7 b94a 	b.w	19e70 <lv_disp_get_scr_act>

00022bdc <z_impl_gpio_pin_interrupt_configure>:
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22bdc:	0413      	lsls	r3, r2, #16
{
   22bde:	b430      	push	{r4, r5}
	const struct gpio_driver_api *api =
   22be0:	6884      	ldr	r4, [r0, #8]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22be2:	d507      	bpl.n	22bf4 <z_impl_gpio_pin_interrupt_configure+0x18>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
   22be4:	68c5      	ldr	r5, [r0, #12]
   22be6:	2301      	movs	r3, #1
   22be8:	682d      	ldr	r5, [r5, #0]
   22bea:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
   22bec:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
   22bee:	bf18      	it	ne
   22bf0:	f482 22c0 	eorne.w	r2, r2, #393216	; 0x60000
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22bf4:	69a4      	ldr	r4, [r4, #24]
   22bf6:	f402 23c0 	and.w	r3, r2, #393216	; 0x60000
   22bfa:	46a4      	mov	ip, r4
   22bfc:	f402 32b0 	and.w	r2, r2, #90112	; 0x16000
}
   22c00:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
   22c02:	4760      	bx	ip

00022c04 <gpio_pin_configure>:
{
   22c04:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   22c06:	68c5      	ldr	r5, [r0, #12]
{
   22c08:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   22c0a:	6883      	ldr	r3, [r0, #8]
   22c0c:	681b      	ldr	r3, [r3, #0]
   22c0e:	4798      	blx	r3
	if (ret != 0) {
   22c10:	b930      	cbnz	r0, 22c20 <gpio_pin_configure+0x1c>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   22c12:	2301      	movs	r3, #1
   22c14:	fa03 f104 	lsl.w	r1, r3, r4
   22c18:	682b      	ldr	r3, [r5, #0]
   22c1a:	ea23 0301 	bic.w	r3, r3, r1
   22c1e:	602b      	str	r3, [r5, #0]
}
   22c20:	bd38      	pop	{r3, r4, r5, pc}

00022c22 <main>:
#include "event_handler.h"
#include "bt.h"


void main(void)
{
   22c22:	b508      	push	{r3, lr}
#if !(defined(CONFIG_BOARD_NATIVE_POSIX_64BIT)||defined(CONFIG_BOARD_NRF52_BSIM)) //both the pinetime & ds_d6 have a real button 
	{
		init_button();
   22c24:	f7df f942 	bl	1eac <init_button>
	}
#endif
	display_init();
   22c28:	f7df f89a 	bl	1d60 <display_init>
	clock_init();
   22c2c:	f7de fcfc 	bl	1628 <clock_init>
	clock_show_time(); //time of build
   22c30:	f7de fd4a 	bl	16c8 <clock_show_time>
        bt_init();
   22c34:	f7de fc5e 	bl	14f4 <bt_init>
	return z_impl_k_sleep(timeout);
   22c38:	2100      	movs	r1, #0
   22c3a:	f640 40cd 	movw	r0, #3277	; 0xccd
   22c3e:	f7fd f9f9 	bl	20034 <z_impl_k_sleep>


	while (1) {
   22c42:	e7f9      	b.n	22c38 <main+0x16>

00022c44 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   22c44:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   22c46:	f04f 0c0a 	mov.w	ip, #10
{
   22c4a:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   22c4c:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   22c4e:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   22c50:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   22c52:	b111      	cbz	r1, 22c5a <u8_to_dec+0x16>
   22c54:	3e01      	subs	r6, #1
   22c56:	d101      	bne.n	22c5c <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   22c58:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   22c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22c5c:	42a2      	cmp	r2, r4
		digit = value / divisor;
   22c5e:	fbb2 f7f4 	udiv	r7, r2, r4
   22c62:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   22c64:	d202      	bcs.n	22c6c <u8_to_dec+0x28>
   22c66:	2c01      	cmp	r4, #1
   22c68:	d000      	beq.n	22c6c <u8_to_dec+0x28>
   22c6a:	b130      	cbz	r0, 22c7a <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   22c6c:	3330      	adds	r3, #48	; 0x30
   22c6e:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   22c72:	3901      	subs	r1, #1
			num_digits++;
   22c74:	1c43      	adds	r3, r0, #1
			buflen--;
   22c76:	b2c9      	uxtb	r1, r1
			num_digits++;
   22c78:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   22c7a:	fb04 2217 	mls	r2, r4, r7, r2
   22c7e:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   22c80:	fbb4 f4fc 	udiv	r4, r4, ip
   22c84:	e7e5      	b.n	22c52 <u8_to_dec+0xe>

00022c86 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   22c86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   22c8a:	b2db      	uxtb	r3, r3
   22c8c:	2b09      	cmp	r3, #9
   22c8e:	d802      	bhi.n	22c96 <char2hex+0x10>
		*x = c - '0';
   22c90:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   22c92:	2000      	movs	r0, #0
   22c94:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   22c96:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   22c9a:	2b05      	cmp	r3, #5
   22c9c:	d802      	bhi.n	22ca4 <char2hex+0x1e>
		*x = c - 'a' + 10;
   22c9e:	3857      	subs	r0, #87	; 0x57
   22ca0:	7008      	strb	r0, [r1, #0]
   22ca2:	e7f6      	b.n	22c92 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   22ca4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   22ca8:	2b05      	cmp	r3, #5
   22caa:	d801      	bhi.n	22cb0 <char2hex+0x2a>
		*x = c - 'A' + 10;
   22cac:	3837      	subs	r0, #55	; 0x37
   22cae:	e7f7      	b.n	22ca0 <char2hex+0x1a>
		return -EINVAL;
   22cb0:	f06f 0015 	mvn.w	r0, #21
}
   22cb4:	4770      	bx	lr

00022cb6 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   22cb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22cb8:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   22cba:	f001 0001 	and.w	r0, r1, #1
   22cbe:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   22cc2:	429d      	cmp	r5, r3
   22cc4:	ea4f 0651 	mov.w	r6, r1, lsr #1
   22cc8:	d903      	bls.n	22cd2 <hex2bin+0x1c>
		return 0;
   22cca:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   22ccc:	4628      	mov	r0, r5
   22cce:	b003      	add	sp, #12
   22cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   22cd2:	b158      	cbz	r0, 22cec <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   22cd4:	7820      	ldrb	r0, [r4, #0]
   22cd6:	f10d 0107 	add.w	r1, sp, #7
   22cda:	f7ff ffd4 	bl	22c86 <char2hex>
   22cde:	2800      	cmp	r0, #0
   22ce0:	dbf3      	blt.n	22cca <hex2bin+0x14>
		buf[0] = dec;
   22ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22ce6:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   22cea:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22cec:	3401      	adds	r4, #1
   22cee:	4416      	add	r6, r2
   22cf0:	42b2      	cmp	r2, r6
   22cf2:	d0eb      	beq.n	22ccc <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   22cf4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   22cf8:	f10d 0107 	add.w	r1, sp, #7
   22cfc:	f7ff ffc3 	bl	22c86 <char2hex>
   22d00:	2800      	cmp	r0, #0
   22d02:	dbe2      	blt.n	22cca <hex2bin+0x14>
		buf[i] = dec << 4;
   22d04:	f89d 3007 	ldrb.w	r3, [sp, #7]
   22d08:	011b      	lsls	r3, r3, #4
   22d0a:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   22d0c:	f814 0b02 	ldrb.w	r0, [r4], #2
   22d10:	f10d 0107 	add.w	r1, sp, #7
   22d14:	f7ff ffb7 	bl	22c86 <char2hex>
   22d18:	2800      	cmp	r0, #0
   22d1a:	dbd6      	blt.n	22cca <hex2bin+0x14>
		buf[i] += dec;
   22d1c:	7813      	ldrb	r3, [r2, #0]
   22d1e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   22d22:	440b      	add	r3, r1
   22d24:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   22d28:	e7e2      	b.n	22cf0 <hex2bin+0x3a>

00022d2a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   22d2a:	4603      	mov	r3, r0
   22d2c:	b140      	cbz	r0, 22d40 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22d2e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22d30:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   22d34:	2a02      	cmp	r2, #2
   22d36:	d006      	beq.n	22d46 <sys_notify_validate+0x1c>
   22d38:	2a03      	cmp	r2, #3
   22d3a:	d004      	beq.n	22d46 <sys_notify_validate+0x1c>
   22d3c:	2a01      	cmp	r2, #1
   22d3e:	d005      	beq.n	22d4c <sys_notify_validate+0x22>
		return -EINVAL;
   22d40:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   22d44:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   22d46:	681a      	ldr	r2, [r3, #0]
   22d48:	2a00      	cmp	r2, #0
   22d4a:	d0f9      	beq.n	22d40 <sys_notify_validate+0x16>
		notify->result = 0;
   22d4c:	2000      	movs	r0, #0
   22d4e:	6098      	str	r0, [r3, #8]
   22d50:	4770      	bx	lr

00022d52 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   22d52:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   22d54:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   22d58:	2a02      	cmp	r2, #2
{
   22d5a:	b510      	push	{r4, lr}
   22d5c:	4603      	mov	r3, r0
	notify->result = res;
   22d5e:	6081      	str	r1, [r0, #8]
	switch (method) {
   22d60:	d00a      	beq.n	22d78 <sys_notify_finalize+0x26>
   22d62:	2a03      	cmp	r2, #3
   22d64:	d10b      	bne.n	22d7e <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   22d66:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   22d68:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   22d6a:	2200      	movs	r2, #0
   22d6c:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   22d6e:	b108      	cbz	r0, 22d74 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   22d70:	f7fd fd82 	bl	20878 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   22d74:	4620      	mov	r0, r4
   22d76:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   22d78:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   22d7a:	2400      	movs	r4, #0
		break;
   22d7c:	e7f5      	b.n	22d6a <sys_notify_finalize+0x18>
	switch (method) {
   22d7e:	2400      	movs	r4, #0
   22d80:	4620      	mov	r0, r4
   22d82:	e7f2      	b.n	22d6a <sys_notify_finalize+0x18>

00022d84 <arch_printk_char_out>:
}
   22d84:	2000      	movs	r0, #0
   22d86:	4770      	bx	lr

00022d88 <str_out>:
{
   22d88:	b530      	push	{r4, r5, lr}
   22d8a:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   22d8c:	680c      	ldr	r4, [r1, #0]
   22d8e:	1c55      	adds	r5, r2, #1
   22d90:	b114      	cbz	r4, 22d98 <str_out+0x10>
   22d92:	684b      	ldr	r3, [r1, #4]
   22d94:	4293      	cmp	r3, r2
   22d96:	dc01      	bgt.n	22d9c <str_out+0x14>
		ctx->count++;
   22d98:	608d      	str	r5, [r1, #8]
}
   22d9a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   22d9c:	3b01      	subs	r3, #1
   22d9e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   22da0:	bf08      	it	eq
   22da2:	2200      	moveq	r2, #0
   22da4:	608d      	str	r5, [r1, #8]
   22da6:	bf0c      	ite	eq
   22da8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   22daa:	54a0      	strbne	r0, [r4, r2]
   22dac:	e7f5      	b.n	22d9a <str_out+0x12>

00022dae <printk>:
{
   22dae:	b40f      	push	{r0, r1, r2, r3}
   22db0:	b507      	push	{r0, r1, r2, lr}
   22db2:	a904      	add	r1, sp, #16
   22db4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   22db8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   22dba:	f7df f8d7 	bl	1f6c <vprintk>
}
   22dbe:	b003      	add	sp, #12
   22dc0:	f85d eb04 	ldr.w	lr, [sp], #4
   22dc4:	b004      	add	sp, #16
   22dc6:	4770      	bx	lr

00022dc8 <snprintk>:
{
   22dc8:	b40c      	push	{r2, r3}
   22dca:	b507      	push	{r0, r1, r2, lr}
   22dcc:	ab04      	add	r3, sp, #16
   22dce:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   22dd2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   22dd4:	f7df f8d8 	bl	1f88 <vsnprintk>
}
   22dd8:	b003      	add	sp, #12
   22dda:	f85d eb04 	ldr.w	lr, [sp], #4
   22dde:	b002      	add	sp, #8
   22de0:	4770      	bx	lr

00022de2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22de2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   22de4:	f013 0307 	ands.w	r3, r3, #7
   22de8:	d105      	bne.n	22df6 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   22dea:	6803      	ldr	r3, [r0, #0]
   22dec:	2b00      	cmp	r3, #0
		evt = EVT_START;
   22dee:	bf0c      	ite	eq
   22df0:	2000      	moveq	r0, #0
   22df2:	2003      	movne	r0, #3
   22df4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   22df6:	2b02      	cmp	r3, #2
   22df8:	d105      	bne.n	22e06 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   22dfa:	8b43      	ldrh	r3, [r0, #26]
   22dfc:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   22dfe:	bf14      	ite	ne
   22e00:	2000      	movne	r0, #0
   22e02:	2004      	moveq	r0, #4
   22e04:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   22e06:	2b01      	cmp	r3, #1
   22e08:	d105      	bne.n	22e16 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   22e0a:	6803      	ldr	r3, [r0, #0]
   22e0c:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   22e0e:	bf0c      	ite	eq
   22e10:	2000      	moveq	r0, #0
   22e12:	2005      	movne	r0, #5
   22e14:	4770      	bx	lr
	int evt = EVT_NOP;
   22e16:	2000      	movs	r0, #0
}
   22e18:	4770      	bx	lr

00022e1a <notify_one>:
{
   22e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e1e:	460d      	mov	r5, r1
   22e20:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22e22:	4619      	mov	r1, r3
   22e24:	1d28      	adds	r0, r5, #4
{
   22e26:	4690      	mov	r8, r2
   22e28:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   22e2a:	f7ff ff92 	bl	22d52 <sys_notify_finalize>
	if (cb) {
   22e2e:	4604      	mov	r4, r0
   22e30:	b138      	cbz	r0, 22e42 <notify_one+0x28>
		cb(mgr, cli, state, res);
   22e32:	4633      	mov	r3, r6
   22e34:	4642      	mov	r2, r8
   22e36:	4629      	mov	r1, r5
   22e38:	4638      	mov	r0, r7
   22e3a:	46a4      	mov	ip, r4
}
   22e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   22e40:	4760      	bx	ip
}
   22e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022e46 <transition_complete>:
{
   22e46:	b410      	push	{r4}
	__asm__ volatile(
   22e48:	f04f 0420 	mov.w	r4, #32
   22e4c:	f3ef 8211 	mrs	r2, BASEPRI
   22e50:	f384 8811 	msr	BASEPRI, r4
   22e54:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   22e58:	6141      	str	r1, [r0, #20]
}
   22e5a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   22e5c:	2101      	movs	r1, #1
   22e5e:	f7df b8a7 	b.w	1fb0 <process_event>

00022e62 <validate_args>:
{
   22e62:	b510      	push	{r4, lr}
   22e64:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   22e66:	b140      	cbz	r0, 22e7a <validate_args+0x18>
   22e68:	b139      	cbz	r1, 22e7a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   22e6a:	1d08      	adds	r0, r1, #4
   22e6c:	f7ff ff5d 	bl	22d2a <sys_notify_validate>
	if ((rv == 0)
   22e70:	b928      	cbnz	r0, 22e7e <validate_args+0x1c>
	    && ((cli->notify.flags
   22e72:	68a3      	ldr	r3, [r4, #8]
   22e74:	f033 0303 	bics.w	r3, r3, #3
   22e78:	d001      	beq.n	22e7e <validate_args+0x1c>
		rv = -EINVAL;
   22e7a:	f06f 0015 	mvn.w	r0, #21
}
   22e7e:	bd10      	pop	{r4, pc}

00022e80 <onoff_manager_init>:
{
   22e80:	b538      	push	{r3, r4, r5, lr}
   22e82:	460c      	mov	r4, r1
	if ((mgr == NULL)
   22e84:	4605      	mov	r5, r0
   22e86:	b158      	cbz	r0, 22ea0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   22e88:	b151      	cbz	r1, 22ea0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   22e8a:	680b      	ldr	r3, [r1, #0]
   22e8c:	b143      	cbz	r3, 22ea0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   22e8e:	684b      	ldr	r3, [r1, #4]
   22e90:	b133      	cbz	r3, 22ea0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   22e92:	221c      	movs	r2, #28
   22e94:	2100      	movs	r1, #0
   22e96:	f008 fc81 	bl	2b79c <memset>
   22e9a:	612c      	str	r4, [r5, #16]
	return 0;
   22e9c:	2000      	movs	r0, #0
}
   22e9e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22ea0:	f06f 0015 	mvn.w	r0, #21
   22ea4:	e7fb      	b.n	22e9e <onoff_manager_init+0x1e>

00022ea6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   22ea6:	b570      	push	{r4, r5, r6, lr}
   22ea8:	4604      	mov	r4, r0
   22eaa:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   22eac:	f7ff ffd9 	bl	22e62 <validate_args>

	if (rv < 0) {
   22eb0:	1e05      	subs	r5, r0, #0
   22eb2:	db31      	blt.n	22f18 <onoff_request+0x72>
   22eb4:	f04f 0320 	mov.w	r3, #32
   22eb8:	f3ef 8111 	mrs	r1, BASEPRI
   22ebc:	f383 8811 	msr	BASEPRI, r3
   22ec0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   22ec4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22ec6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   22ec8:	f64f 75ff 	movw	r5, #65535	; 0xffff
   22ecc:	42ab      	cmp	r3, r5
   22ece:	f000 0207 	and.w	r2, r0, #7
   22ed2:	d02e      	beq.n	22f32 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   22ed4:	2a02      	cmp	r2, #2
   22ed6:	d10e      	bne.n	22ef6 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   22ed8:	3301      	adds	r3, #1
   22eda:	8363      	strh	r3, [r4, #26]
	rv = state;
   22edc:	4615      	mov	r5, r2
		notify = true;
   22ede:	2301      	movs	r3, #1
	__asm__ volatile(
   22ee0:	f381 8811 	msr	BASEPRI, r1
   22ee4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   22ee8:	b1b3      	cbz	r3, 22f18 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   22eea:	2300      	movs	r3, #0
   22eec:	4631      	mov	r1, r6
   22eee:	4620      	mov	r0, r4
   22ef0:	f7ff ff93 	bl	22e1a <notify_one>
   22ef4:	e010      	b.n	22f18 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   22ef6:	0783      	lsls	r3, r0, #30
   22ef8:	d001      	beq.n	22efe <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   22efa:	2a06      	cmp	r2, #6
   22efc:	d10e      	bne.n	22f1c <onoff_request+0x76>
	parent->next = child;
   22efe:	2300      	movs	r3, #0
   22f00:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   22f02:	6863      	ldr	r3, [r4, #4]
   22f04:	b993      	cbnz	r3, 22f2c <onoff_request+0x86>
	list->head = node;
   22f06:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   22f0a:	4615      	mov	r5, r2
   22f0c:	b962      	cbnz	r2, 22f28 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   22f0e:	460a      	mov	r2, r1
   22f10:	4620      	mov	r0, r4
   22f12:	2102      	movs	r1, #2
   22f14:	f7df f84c 	bl	1fb0 <process_event>
		}
	}

	return rv;
}
   22f18:	4628      	mov	r0, r5
   22f1a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   22f1c:	2a05      	cmp	r2, #5
   22f1e:	bf0c      	ite	eq
   22f20:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   22f24:	f06f 0504 	mvnne.w	r5, #4
   22f28:	2300      	movs	r3, #0
   22f2a:	e7d9      	b.n	22ee0 <onoff_request+0x3a>
	parent->next = child;
   22f2c:	601e      	str	r6, [r3, #0]
	list->tail = node;
   22f2e:	6066      	str	r6, [r4, #4]
}
   22f30:	e7eb      	b.n	22f0a <onoff_request+0x64>
		rv = -EAGAIN;
   22f32:	f06f 050a 	mvn.w	r5, #10
   22f36:	e7f7      	b.n	22f28 <onoff_request+0x82>

00022f38 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   22f38:	b510      	push	{r4, lr}
	__asm__ volatile(
   22f3a:	f04f 0320 	mov.w	r3, #32
   22f3e:	f3ef 8211 	mrs	r2, BASEPRI
   22f42:	f383 8811 	msr	BASEPRI, r3
   22f46:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   22f4a:	8b04      	ldrh	r4, [r0, #24]
   22f4c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   22f50:	2c02      	cmp	r4, #2
   22f52:	d00a      	beq.n	22f6a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
   22f54:	2c01      	cmp	r4, #1
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   22f56:	bf0c      	ite	eq
   22f58:	f06f 0004 	mvneq.w	r0, #4
   22f5c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   22f60:	f382 8811 	msr	BASEPRI, r2
   22f64:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   22f68:	e008      	b.n	22f7c <onoff_release+0x44>
	mgr->refs -= 1U;
   22f6a:	8b43      	ldrh	r3, [r0, #26]
   22f6c:	3b01      	subs	r3, #1
   22f6e:	b29b      	uxth	r3, r3
   22f70:	8343      	strh	r3, [r0, #26]
	if (stop) {
   22f72:	b923      	cbnz	r3, 22f7e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   22f74:	4621      	mov	r1, r4
   22f76:	f7df f81b 	bl	1fb0 <process_event>
	int rv = state;
   22f7a:	4620      	mov	r0, r4
}
   22f7c:	bd10      	pop	{r4, pc}
	int rv = state;
   22f7e:	4620      	mov	r0, r4
   22f80:	e7ee      	b.n	22f60 <onoff_release+0x28>

00022f82 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
   22f82:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
   22f84:	f7fd f87e 	bl	20084 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
   22f88:	2000      	movs	r0, #0
   22f8a:	bd08      	pop	{r3, pc}

00022f8c <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, k_timeout_t timeout)
{
   22f8c:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
   22f8e:	f7fd f89f 	bl	200d0 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
   22f92:	f110 0f0b 	cmn.w	r0, #11
   22f96:	d005      	beq.n	22fa4 <sys_sem_take+0x18>
   22f98:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
   22f9c:	bf08      	it	eq
   22f9e:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
   22fa2:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
   22fa4:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
   22fa8:	e7fb      	b.n	22fa2 <sys_sem_take+0x16>

00022faa <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   22faa:	4604      	mov	r4, r0
   22fac:	b508      	push	{r3, lr}
   22fae:	4608      	mov	r0, r1
   22fb0:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   22fb2:	461a      	mov	r2, r3
   22fb4:	47a0      	blx	r4
	return z_impl_k_current_get();
   22fb6:	f7fd f85f 	bl	20078 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   22fba:	f7e1 fd93 	bl	4ae4 <z_impl_k_thread_abort>

00022fbe <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   22fbe:	b510      	push	{r4, lr}
   22fc0:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   22fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22fca:	4620      	mov	r0, r4
   22fcc:	f7fc fc88 	bl	1f8e0 <z_impl_k_queue_get>
   22fd0:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   22fd2:	2800      	cmp	r0, #0
   22fd4:	d0f5      	beq.n	22fc2 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22fd6:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   22fd8:	6842      	ldr	r2, [r0, #4]
   22fda:	f3bf 8f5b 	dmb	ish
   22fde:	e853 1f00 	ldrex	r1, [r3]
   22fe2:	f021 0c01 	bic.w	ip, r1, #1
   22fe6:	e843 ce00 	strex	lr, ip, [r3]
   22fea:	f1be 0f00 	cmp.w	lr, #0
   22fee:	d1f6      	bne.n	22fde <z_work_q_main+0x20>
   22ff0:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   22ff4:	07cb      	lsls	r3, r1, #31
   22ff6:	d500      	bpl.n	22ffa <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   22ff8:	4790      	blx	r2
	z_impl_k_yield();
   22ffa:	f7fc ffcd 	bl	1ff98 <z_impl_k_yield>
   22ffe:	e7e0      	b.n	22fc2 <z_work_q_main+0x4>

00023000 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   23000:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   23002:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   23006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   2300a:	bf2c      	ite	cs
   2300c:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   23010:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   23014:	4770      	bx	lr

00023016 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   23016:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   2301a:	6880      	ldr	r0, [r0, #8]
   2301c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   23020:	bf2c      	ite	cs
   23022:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   23026:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   2302a:	4770      	bx	lr

0002302c <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   2302c:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   2302e:	2201      	movs	r2, #1
   23030:	f7ff ffe6 	bl	23000 <chunk_field>
}
   23034:	0840      	lsrs	r0, r0, #1
   23036:	bd08      	pop	{r3, pc}

00023038 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   23038:	6883      	ldr	r3, [r0, #8]
   2303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   2303e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   23042:	d308      	bcc.n	23056 <set_chunk_used+0x1e>
		if (used) {
   23044:	684b      	ldr	r3, [r1, #4]
   23046:	b11a      	cbz	r2, 23050 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   23048:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2304c:	604b      	str	r3, [r1, #4]
   2304e:	4770      	bx	lr
   23050:	f023 0301 	bic.w	r3, r3, #1
   23054:	e7fa      	b.n	2304c <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   23056:	884b      	ldrh	r3, [r1, #2]
   23058:	b11a      	cbz	r2, 23062 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2305a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   2305e:	804b      	strh	r3, [r1, #2]
		}
	}
}
   23060:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   23062:	f023 0301 	bic.w	r3, r3, #1
   23066:	e7fa      	b.n	2305e <set_chunk_used+0x26>

00023068 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   23068:	0053      	lsls	r3, r2, #1
   2306a:	2201      	movs	r2, #1
   2306c:	f7ff bfd3 	b.w	23016 <chunk_set>

00023070 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   23070:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   23072:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   23078:	bf2c      	ite	cs
   2307a:	2002      	movcs	r0, #2
   2307c:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   2307e:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   23080:	fab0 f080 	clz	r0, r0
}
   23084:	f1c0 001f 	rsb	r0, r0, #31
   23088:	4770      	bx	lr

0002308a <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   2308a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2308e:	4616      	mov	r6, r2
   23090:	4604      	mov	r4, r0
   23092:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   23094:	f7ff ffca 	bl	2302c <chunk_size>
   23098:	4631      	mov	r1, r6
   2309a:	4605      	mov	r5, r0
   2309c:	4620      	mov	r0, r4
   2309e:	f7ff ffc5 	bl	2302c <chunk_size>
   230a2:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   230a4:	462a      	mov	r2, r5
   230a6:	4639      	mov	r1, r7
   230a8:	4620      	mov	r0, r4
   230aa:	f7ff ffdd 	bl	23068 <set_chunk_size>
	return c + chunk_size(h, c);
   230ae:	4631      	mov	r1, r6
   230b0:	4620      	mov	r0, r4
   230b2:	f7ff ffbb 	bl	2302c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   230b6:	462b      	mov	r3, r5
   230b8:	1831      	adds	r1, r6, r0
   230ba:	2200      	movs	r2, #0
   230bc:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   230be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   230c2:	f7ff bfa8 	b.w	23016 <chunk_set>

000230c6 <split_chunks>:
{
   230c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   230ca:	4614      	mov	r4, r2
   230cc:	4605      	mov	r5, r0
   230ce:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   230d0:	f7ff ffac 	bl	2302c <chunk_size>
	size_t lsz = rc - lc;
   230d4:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   230d8:	1b37      	subs	r7, r6, r4
   230da:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   230dc:	4642      	mov	r2, r8
   230de:	4631      	mov	r1, r6
   230e0:	4628      	mov	r0, r5
   230e2:	f7ff ffc1 	bl	23068 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   230e6:	463a      	mov	r2, r7
   230e8:	4621      	mov	r1, r4
   230ea:	4628      	mov	r0, r5
   230ec:	f7ff ffbc 	bl	23068 <set_chunk_size>
   230f0:	4643      	mov	r3, r8
   230f2:	2200      	movs	r2, #0
   230f4:	4621      	mov	r1, r4
   230f6:	4628      	mov	r0, r5
   230f8:	f7ff ff8d 	bl	23016 <chunk_set>
	return c + chunk_size(h, c);
   230fc:	4621      	mov	r1, r4
   230fe:	4628      	mov	r0, r5
   23100:	f7ff ff94 	bl	2302c <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   23104:	463b      	mov	r3, r7
   23106:	1821      	adds	r1, r4, r0
   23108:	2200      	movs	r2, #0
   2310a:	4628      	mov	r0, r5
}
   2310c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23110:	f7ff bf81 	b.w	23016 <chunk_set>

00023114 <free_list_remove_bidx>:
{
   23114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23118:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   2311a:	2203      	movs	r2, #3
   2311c:	460e      	mov	r6, r1
   2311e:	4604      	mov	r4, r0
   23120:	f7ff ff6e 	bl	23000 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   23124:	4286      	cmp	r6, r0
   23126:	4605      	mov	r5, r0
   23128:	f107 0804 	add.w	r8, r7, #4
   2312c:	d10b      	bne.n	23146 <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   2312e:	2301      	movs	r3, #1
   23130:	fa03 f707 	lsl.w	r7, r3, r7
   23134:	68e3      	ldr	r3, [r4, #12]
   23136:	ea23 0307 	bic.w	r3, r3, r7
   2313a:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   2313c:	2300      	movs	r3, #0
   2313e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   23142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   23146:	4631      	mov	r1, r6
   23148:	2202      	movs	r2, #2
   2314a:	4620      	mov	r0, r4
   2314c:	f7ff ff58 	bl	23000 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   23150:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   23152:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   23154:	4601      	mov	r1, r0
		b->next = second;
   23156:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   2315a:	4620      	mov	r0, r4
   2315c:	2203      	movs	r2, #3
   2315e:	f7ff ff5a 	bl	23016 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   23162:	4633      	mov	r3, r6
   23164:	4629      	mov	r1, r5
   23166:	4620      	mov	r0, r4
   23168:	2202      	movs	r2, #2
}
   2316a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2316e:	f7ff bf52 	b.w	23016 <chunk_set>

00023172 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   23172:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23176:	4604      	mov	r4, r0
   23178:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   2317a:	f7ff ff79 	bl	23070 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   2317e:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   23180:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   23182:	4620      	mov	r0, r4
   23184:	f7ff ff74 	bl	23070 <bucket_idx>
   23188:	42a8      	cmp	r0, r5
   2318a:	da03      	bge.n	23194 <alloc_chunk+0x22>
		return 0;
   2318c:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   2318e:	4630      	mov	r0, r6
   23190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   23194:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   23198:	f8da 9010 	ldr.w	r9, [sl, #16]
   2319c:	f1b9 0f00 	cmp.w	r9, #0
   231a0:	d019      	beq.n	231d6 <alloc_chunk+0x64>
   231a2:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   231a4:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   231a8:	4620      	mov	r0, r4
   231aa:	4631      	mov	r1, r6
   231ac:	f7ff ff3e 	bl	2302c <chunk_size>
   231b0:	4540      	cmp	r0, r8
   231b2:	d305      	bcc.n	231c0 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   231b4:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   231b6:	4631      	mov	r1, r6
   231b8:	4620      	mov	r0, r4
   231ba:	f7ff ffab 	bl	23114 <free_list_remove_bidx>
		return c;
   231be:	e7e6      	b.n	2318e <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   231c0:	2203      	movs	r2, #3
   231c2:	4631      	mov	r1, r6
   231c4:	4620      	mov	r0, r4
   231c6:	f7ff ff1b 	bl	23000 <chunk_field>
		} while (--i && b->next != first);
   231ca:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   231cc:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   231d0:	d001      	beq.n	231d6 <alloc_chunk+0x64>
   231d2:	4581      	cmp	r9, r0
   231d4:	d1e6      	bne.n	231a4 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   231d6:	68e3      	ldr	r3, [r4, #12]
   231d8:	3501      	adds	r5, #1
   231da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   231de:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   231e0:	401a      	ands	r2, r3
   231e2:	d0d3      	beq.n	2318c <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   231e4:	fa92 f2a2 	rbit	r2, r2
   231e8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   231ec:	1d13      	adds	r3, r2, #4
   231ee:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   231f2:	e7e0      	b.n	231b6 <alloc_chunk+0x44>

000231f4 <free_list_add>:
{
   231f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   231f8:	4604      	mov	r4, r0
   231fa:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   231fc:	f7ff ff16 	bl	2302c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   23200:	68a3      	ldr	r3, [r4, #8]
   23202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23206:	4601      	mov	r1, r0
   23208:	d301      	bcc.n	2320e <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   2320a:	2801      	cmp	r0, #1
   2320c:	d035      	beq.n	2327a <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   2320e:	4620      	mov	r0, r4
   23210:	f7ff ff2e 	bl	23070 <bucket_idx>
	if (b->next == 0U) {
   23214:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   23218:	6916      	ldr	r6, [r2, #16]
   2321a:	b99e      	cbnz	r6, 23244 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   2321c:	2301      	movs	r3, #1
   2321e:	fa03 f000 	lsl.w	r0, r3, r0
   23222:	68e3      	ldr	r3, [r4, #12]
   23224:	4303      	orrs	r3, r0
   23226:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   23228:	4629      	mov	r1, r5
		b->next = c;
   2322a:	6115      	str	r5, [r2, #16]
   2322c:	462b      	mov	r3, r5
   2322e:	2202      	movs	r2, #2
   23230:	4620      	mov	r0, r4
   23232:	f7ff fef0 	bl	23016 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   23236:	2203      	movs	r2, #3
   23238:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   2323a:	4620      	mov	r0, r4
}
   2323c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23240:	f7ff bee9 	b.w	23016 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   23244:	2202      	movs	r2, #2
   23246:	4631      	mov	r1, r6
   23248:	4620      	mov	r0, r4
   2324a:	f7ff fed9 	bl	23000 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   2324e:	2202      	movs	r2, #2
   23250:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   23252:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   23254:	4629      	mov	r1, r5
   23256:	4620      	mov	r0, r4
   23258:	f7ff fedd 	bl	23016 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   2325c:	4633      	mov	r3, r6
   2325e:	2203      	movs	r2, #3
   23260:	4629      	mov	r1, r5
   23262:	4620      	mov	r0, r4
   23264:	f7ff fed7 	bl	23016 <chunk_set>
   23268:	2203      	movs	r2, #3
   2326a:	4639      	mov	r1, r7
   2326c:	462b      	mov	r3, r5
   2326e:	4620      	mov	r0, r4
   23270:	f7ff fed1 	bl	23016 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   23274:	2202      	movs	r2, #2
   23276:	4631      	mov	r1, r6
   23278:	e7df      	b.n	2323a <free_list_add+0x46>
   2327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002327e <free_list_remove>:
{
   2327e:	b538      	push	{r3, r4, r5, lr}
   23280:	4604      	mov	r4, r0
   23282:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   23284:	f7ff fed2 	bl	2302c <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   23288:	68a3      	ldr	r3, [r4, #8]
   2328a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2328e:	4601      	mov	r1, r0
   23290:	d301      	bcc.n	23296 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   23292:	2801      	cmp	r0, #1
   23294:	d009      	beq.n	232aa <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   23296:	4620      	mov	r0, r4
   23298:	f7ff feea 	bl	23070 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   2329c:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   2329e:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   232a0:	4620      	mov	r0, r4
}
   232a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   232a6:	f7ff bf35 	b.w	23114 <free_list_remove_bidx>
}
   232aa:	bd38      	pop	{r3, r4, r5, pc}

000232ac <free_chunk>:
{
   232ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   232ae:	460c      	mov	r4, r1
   232b0:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   232b2:	f7ff febb 	bl	2302c <chunk_size>
   232b6:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   232b8:	2201      	movs	r2, #1
   232ba:	4631      	mov	r1, r6
   232bc:	4628      	mov	r0, r5
   232be:	f7ff fe9f 	bl	23000 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   232c2:	07c3      	lsls	r3, r0, #31
   232c4:	d40c      	bmi.n	232e0 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   232c6:	4631      	mov	r1, r6
   232c8:	4628      	mov	r0, r5
   232ca:	f7ff ffd8 	bl	2327e <free_list_remove>
	return c + chunk_size(h, c);
   232ce:	4621      	mov	r1, r4
   232d0:	4628      	mov	r0, r5
   232d2:	f7ff feab 	bl	2302c <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   232d6:	4621      	mov	r1, r4
   232d8:	1822      	adds	r2, r4, r0
   232da:	4628      	mov	r0, r5
   232dc:	f7ff fed5 	bl	2308a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   232e0:	2200      	movs	r2, #0
   232e2:	4621      	mov	r1, r4
   232e4:	4628      	mov	r0, r5
   232e6:	f7ff fe8b 	bl	23000 <chunk_field>
   232ea:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   232ec:	2201      	movs	r2, #1
   232ee:	4639      	mov	r1, r7
   232f0:	4628      	mov	r0, r5
   232f2:	f7ff fe85 	bl	23000 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   232f6:	f010 0601 	ands.w	r6, r0, #1
   232fa:	d113      	bne.n	23324 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   232fc:	4639      	mov	r1, r7
   232fe:	4628      	mov	r0, r5
   23300:	f7ff ffbd 	bl	2327e <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   23304:	4621      	mov	r1, r4
   23306:	4632      	mov	r2, r6
   23308:	4628      	mov	r0, r5
   2330a:	f7ff fe79 	bl	23000 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   2330e:	4622      	mov	r2, r4
   23310:	1a21      	subs	r1, r4, r0
   23312:	4628      	mov	r0, r5
   23314:	f7ff feb9 	bl	2308a <merge_chunks>
   23318:	4621      	mov	r1, r4
   2331a:	4632      	mov	r2, r6
   2331c:	4628      	mov	r0, r5
   2331e:	f7ff fe6f 	bl	23000 <chunk_field>
   23322:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   23324:	4621      	mov	r1, r4
   23326:	4628      	mov	r0, r5
}
   23328:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   2332c:	f7ff bf62 	b.w	231f4 <free_list_add>

00023330 <sys_heap_free>:
{
   23330:	b510      	push	{r4, lr}
	if (mem == NULL) {
   23332:	b191      	cbz	r1, 2335a <sys_heap_free+0x2a>
	struct z_heap *h = heap->heap;
   23334:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   23336:	6883      	ldr	r3, [r0, #8]
   23338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2333c:	bf2c      	ite	cs
   2333e:	2408      	movcs	r4, #8
   23340:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23342:	1b0c      	subs	r4, r1, r4
   23344:	1a24      	subs	r4, r4, r0
   23346:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   23348:	4621      	mov	r1, r4
   2334a:	2200      	movs	r2, #0
   2334c:	f7ff fe74 	bl	23038 <set_chunk_used>
	free_chunk(h, c);
   23350:	4621      	mov	r1, r4
}
   23352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   23356:	f7ff bfa9 	b.w	232ac <free_chunk>
}
   2335a:	bd10      	pop	{r4, pc}

0002335c <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   2335c:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2335e:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   23360:	b909      	cbnz	r1, 23366 <sys_heap_alloc+0xa>
		return NULL;
   23362:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   23364:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   23366:	68ab      	ldr	r3, [r5, #8]
   23368:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2336c:	d9f9      	bls.n	23362 <sys_heap_alloc+0x6>
   2336e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   23372:	bf2c      	ite	cs
   23374:	2208      	movcs	r2, #8
   23376:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23378:	1dcc      	adds	r4, r1, #7
   2337a:	4414      	add	r4, r2
   2337c:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2337e:	4621      	mov	r1, r4
   23380:	4628      	mov	r0, r5
   23382:	f7ff fef6 	bl	23172 <alloc_chunk>
	if (c == 0U) {
   23386:	4606      	mov	r6, r0
   23388:	2800      	cmp	r0, #0
   2338a:	d0ea      	beq.n	23362 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2338c:	4601      	mov	r1, r0
   2338e:	4628      	mov	r0, r5
   23390:	f7ff fe4c 	bl	2302c <chunk_size>
   23394:	42a0      	cmp	r0, r4
   23396:	d909      	bls.n	233ac <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   23398:	4434      	add	r4, r6
   2339a:	4631      	mov	r1, r6
   2339c:	4628      	mov	r0, r5
   2339e:	4622      	mov	r2, r4
   233a0:	f7ff fe91 	bl	230c6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   233a4:	4621      	mov	r1, r4
   233a6:	4628      	mov	r0, r5
   233a8:	f7ff ff24 	bl	231f4 <free_list_add>
	set_chunk_used(h, c, true);
   233ac:	4628      	mov	r0, r5
   233ae:	2201      	movs	r2, #1
   233b0:	4631      	mov	r1, r6
   233b2:	f7ff fe41 	bl	23038 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   233b6:	68ab      	ldr	r3, [r5, #8]
   233b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   233bc:	bf2c      	ite	cs
   233be:	2008      	movcs	r0, #8
   233c0:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   233c2:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   233c6:	4428      	add	r0, r5
	return chunk_mem(h, c);
   233c8:	e7cc      	b.n	23364 <sys_heap_alloc+0x8>

000233ca <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   233ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   233ce:	6806      	ldr	r6, [r0, #0]
{
   233d0:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   233d2:	424a      	negs	r2, r1
   233d4:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   233d8:	ea31 0202 	bics.w	r2, r1, r2
   233dc:	68b5      	ldr	r5, [r6, #8]
{
   233de:	460b      	mov	r3, r1
	if (align != rewind) {
   233e0:	d00f      	beq.n	23402 <sys_heap_aligned_alloc+0x38>
   233e2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   233e6:	bf34      	ite	cc
   233e8:	2104      	movcc	r1, #4
   233ea:	2108      	movcs	r1, #8
   233ec:	42b9      	cmp	r1, r7
   233ee:	460a      	mov	r2, r1
   233f0:	46b9      	mov	r9, r7
   233f2:	bf28      	it	cs
   233f4:	463a      	movcs	r2, r7
		align -= rewind;
   233f6:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   233f8:	b994      	cbnz	r4, 23420 <sys_heap_aligned_alloc+0x56>
		return NULL;
   233fa:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   233fc:	4628      	mov	r0, r5
   233fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23402:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   23406:	bf34      	ite	cc
   23408:	2204      	movcc	r2, #4
   2340a:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   2340c:	4291      	cmp	r1, r2
   2340e:	d804      	bhi.n	2341a <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   23410:	4621      	mov	r1, r4
}
   23412:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   23416:	f7ff bfa1 	b.w	2335c <sys_heap_alloc>
		rewind = 0;
   2341a:	f04f 0900 	mov.w	r9, #0
   2341e:	e7eb      	b.n	233f8 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   23420:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   23424:	d9e9      	bls.n	233fa <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   23426:	1de1      	adds	r1, r4, #7
   23428:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2342c:	4439      	add	r1, r7
   2342e:	bf2c      	ite	cs
   23430:	2308      	movcs	r3, #8
   23432:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   23434:	1a89      	subs	r1, r1, r2
   23436:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   23438:	08c9      	lsrs	r1, r1, #3
   2343a:	4630      	mov	r0, r6
   2343c:	f7ff fe99 	bl	23172 <alloc_chunk>
	if (c0 == 0) {
   23440:	4680      	mov	r8, r0
   23442:	2800      	cmp	r0, #0
   23444:	d0d9      	beq.n	233fa <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   23446:	68b3      	ldr	r3, [r6, #8]
   23448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2344c:	bf2c      	ite	cs
   2344e:	2308      	movcs	r3, #8
   23450:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   23452:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   23456:	441d      	add	r5, r3
   23458:	1e7a      	subs	r2, r7, #1
   2345a:	4435      	add	r5, r6
   2345c:	427f      	negs	r7, r7
   2345e:	4415      	add	r5, r2
   23460:	403d      	ands	r5, r7
   23462:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   23466:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23468:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2346a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2346c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2346e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   23472:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   23474:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   23478:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   2347c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   23480:	d208      	bcs.n	23494 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   23482:	4601      	mov	r1, r0
   23484:	463a      	mov	r2, r7
   23486:	4630      	mov	r0, r6
   23488:	f7ff fe1d 	bl	230c6 <split_chunks>
		free_list_add(h, c0);
   2348c:	4641      	mov	r1, r8
   2348e:	4630      	mov	r0, r6
   23490:	f7ff feb0 	bl	231f4 <free_list_add>
	return c + chunk_size(h, c);
   23494:	4639      	mov	r1, r7
   23496:	4630      	mov	r0, r6
   23498:	f7ff fdc8 	bl	2302c <chunk_size>
   2349c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2349e:	4284      	cmp	r4, r0
   234a0:	d208      	bcs.n	234b4 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   234a2:	4639      	mov	r1, r7
   234a4:	4630      	mov	r0, r6
   234a6:	4622      	mov	r2, r4
   234a8:	f7ff fe0d 	bl	230c6 <split_chunks>
		free_list_add(h, c_end);
   234ac:	4621      	mov	r1, r4
   234ae:	4630      	mov	r0, r6
   234b0:	f7ff fea0 	bl	231f4 <free_list_add>
	set_chunk_used(h, c, true);
   234b4:	2201      	movs	r2, #1
   234b6:	4639      	mov	r1, r7
   234b8:	4630      	mov	r0, r6
   234ba:	f7ff fdbd 	bl	23038 <set_chunk_used>
	return mem;
   234be:	e79d      	b.n	233fc <sys_heap_aligned_alloc+0x32>

000234c0 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   234c0:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   234c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   234c6:	bf2c      	ite	cs
   234c8:	2508      	movcs	r5, #8
   234ca:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   234cc:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   234ce:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   234d0:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   234d2:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   234d6:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   234da:	2200      	movs	r2, #0
   234dc:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   234de:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   234e0:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   234e2:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   234e4:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   234e8:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   234ea:	4629      	mov	r1, r5
	h->len = buf_sz;
   234ec:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   234ee:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   234f0:	4620      	mov	r0, r4
   234f2:	f7ff fdbd 	bl	23070 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   234f6:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   234f8:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   234fa:	1c41      	adds	r1, r0, #1
   234fc:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   234fe:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   23502:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   23504:	428b      	cmp	r3, r1
   23506:	db29      	blt.n	2355c <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   23508:	4632      	mov	r2, r6
   2350a:	4620      	mov	r0, r4
   2350c:	2100      	movs	r1, #0
   2350e:	f7ff fdab 	bl	23068 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   23512:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   23514:	4620      	mov	r0, r4
   23516:	2201      	movs	r2, #1
   23518:	2100      	movs	r1, #0
   2351a:	f7ff fd8d 	bl	23038 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   2351e:	463a      	mov	r2, r7
   23520:	4631      	mov	r1, r6
   23522:	f7ff fda1 	bl	23068 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   23526:	4633      	mov	r3, r6
   23528:	4631      	mov	r1, r6
   2352a:	4620      	mov	r0, r4
   2352c:	2200      	movs	r2, #0
   2352e:	f7ff fd72 	bl	23016 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   23532:	4629      	mov	r1, r5
   23534:	4620      	mov	r0, r4
   23536:	2200      	movs	r2, #0
   23538:	f7ff fd96 	bl	23068 <set_chunk_size>
   2353c:	463b      	mov	r3, r7
   2353e:	4629      	mov	r1, r5
   23540:	4620      	mov	r0, r4
   23542:	2200      	movs	r2, #0
   23544:	f7ff fd67 	bl	23016 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   23548:	4629      	mov	r1, r5
   2354a:	4620      	mov	r0, r4
   2354c:	2201      	movs	r2, #1
   2354e:	f7ff fd73 	bl	23038 <set_chunk_used>

	free_list_add(h, chunk0_size);
   23552:	4631      	mov	r1, r6
}
   23554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   23558:	f7ff be4c 	b.w	231f4 <free_list_add>
		h->buckets[i].next = 0;
   2355c:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   23560:	3301      	adds	r3, #1
   23562:	e7cf      	b.n	23504 <sys_heap_init+0x44>

00023564 <outs>:
{
   23564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23568:	4607      	mov	r7, r0
   2356a:	4688      	mov	r8, r1
   2356c:	4615      	mov	r5, r2
   2356e:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   23570:	4614      	mov	r4, r2
   23572:	42b4      	cmp	r4, r6
   23574:	eba4 0005 	sub.w	r0, r4, r5
   23578:	d302      	bcc.n	23580 <outs+0x1c>
   2357a:	b93e      	cbnz	r6, 2358c <outs+0x28>
   2357c:	7823      	ldrb	r3, [r4, #0]
   2357e:	b12b      	cbz	r3, 2358c <outs+0x28>
		int rc = out((int)*sp++, ctx);
   23580:	f814 0b01 	ldrb.w	r0, [r4], #1
   23584:	4641      	mov	r1, r8
   23586:	47b8      	blx	r7
		if (rc < 0) {
   23588:	2800      	cmp	r0, #0
   2358a:	daf2      	bge.n	23572 <outs+0xe>
}
   2358c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023590 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   23590:	4770      	bx	lr

00023592 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   23592:	2300      	movs	r3, #0
	list->head = NULL;
   23594:	e9c0 3300 	strd	r3, r3, [r0]
}
   23598:	4770      	bx	lr

0002359a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2359a:	6803      	ldr	r3, [r0, #0]
   2359c:	b923      	cbnz	r3, 235a8 <log_list_add_tail+0xe>
		list->head = msg;
   2359e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   235a0:	2300      	movs	r3, #0
	list->tail = msg;
   235a2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   235a4:	600b      	str	r3, [r1, #0]
}
   235a6:	4770      	bx	lr
		list->tail->next = msg;
   235a8:	6843      	ldr	r3, [r0, #4]
   235aa:	6019      	str	r1, [r3, #0]
   235ac:	e7f8      	b.n	235a0 <log_list_add_tail+0x6>

000235ae <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   235ae:	6800      	ldr	r0, [r0, #0]
   235b0:	4770      	bx	lr

000235b2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   235b2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   235b4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   235b6:	b108      	cbz	r0, 235bc <log_list_head_get+0xa>
		list->head = list->head->next;
   235b8:	6802      	ldr	r2, [r0, #0]
   235ba:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   235bc:	4770      	bx	lr

000235be <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   235be:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   235c0:	f7df fcbe 	bl	2f40 <log_msg_chunk_alloc>

	if (msg != NULL) {
   235c4:	b118      	cbz	r0, 235ce <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   235c6:	2301      	movs	r3, #1
   235c8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   235ca:	2300      	movs	r3, #0
   235cc:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   235ce:	bd08      	pop	{r3, pc}

000235d0 <k_cycle_get_32_wrapper>:
   235d0:	f7e0 bd6a 	b.w	40a8 <z_timer_cycle_get_32>

000235d4 <dummy_timestamp>:
   235d4:	2000      	movs	r0, #0
   235d6:	4770      	bx	lr

000235d8 <log_0>:
{
   235d8:	b538      	push	{r3, r4, r5, lr}
   235da:	4605      	mov	r5, r0
   235dc:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   235de:	f7ff ffee 	bl	235be <z_log_msg_std_alloc>

	if (msg != NULL) {
   235e2:	b128      	cbz	r0, 235f0 <log_0+0x18>
		msg->str = str;
   235e4:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   235e6:	4621      	mov	r1, r4
}
   235e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   235ec:	f7df bbc2 	b.w	2d74 <msg_finalize>
}
   235f0:	bd38      	pop	{r3, r4, r5, pc}

000235f2 <log_1>:
{
   235f2:	b570      	push	{r4, r5, r6, lr}
   235f4:	4606      	mov	r6, r0
   235f6:	460d      	mov	r5, r1
   235f8:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   235fa:	f7ff ffe0 	bl	235be <z_log_msg_std_alloc>

	if (msg != NULL) {
   235fe:	b158      	cbz	r0, 23618 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   23600:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   23602:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   23604:	2101      	movs	r1, #1
   23606:	f361 1207 	bfi	r2, r1, #4, #4
   2360a:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2360c:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   2360e:	4621      	mov	r1, r4
}
   23610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   23614:	f7df bbae 	b.w	2d74 <msg_finalize>
}
   23618:	bd70      	pop	{r4, r5, r6, pc}

0002361a <log_2>:
{
   2361a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2361e:	4680      	mov	r8, r0
   23620:	460f      	mov	r7, r1
   23622:	4616      	mov	r6, r2
   23624:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   23626:	f7ff ffca 	bl	235be <z_log_msg_std_alloc>

	if (msg != NULL) {
   2362a:	b168      	cbz	r0, 23648 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2362c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   2362e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   23632:	2202      	movs	r2, #2
   23634:	f362 1307 	bfi	r3, r2, #4, #4
   23638:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2363a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   2363e:	4629      	mov	r1, r5
}
   23640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   23644:	f7df bb96 	b.w	2d74 <msg_finalize>
}
   23648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002364c <log_3>:
{
   2364c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23650:	4680      	mov	r8, r0
   23652:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   23656:	460f      	mov	r7, r1
   23658:	4616      	mov	r6, r2
   2365a:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2365c:	f7ff ffaf 	bl	235be <z_log_msg_std_alloc>

	if (msg != NULL) {
   23660:	b170      	cbz	r0, 23680 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   23662:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   23664:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   23668:	2203      	movs	r2, #3
   2366a:	f362 1307 	bfi	r3, r2, #4, #4
   2366e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   23670:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   23674:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   23676:	4649      	mov	r1, r9
}
   23678:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   2367c:	f7df bb7a 	b.w	2d74 <msg_finalize>
}
   23680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00023684 <log_n>:
{
   23684:	b510      	push	{r4, lr}
   23686:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   23688:	f000 f8a1 	bl	237ce <log_msg_create_n>
		if (msg == NULL) {
   2368c:	b120      	cbz	r0, 23698 <log_n+0x14>
		msg_finalize(msg, src_level);
   2368e:	4621      	mov	r1, r4
}
   23690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   23694:	f7df bb6e 	b.w	2d74 <msg_finalize>
}
   23698:	bd10      	pop	{r4, pc}

0002369a <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   2369a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2369e:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   236a0:	8903      	ldrh	r3, [r0, #8]
{
   236a2:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   236a6:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   236aa:	460e      	mov	r6, r1
   236ac:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   236ae:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   236b2:	d303      	bcc.n	236bc <log_msg_hexdump_data_op+0x22>
		*length = 0;
   236b4:	2300      	movs	r3, #0
   236b6:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   236b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   236bc:	680b      	ldr	r3, [r1, #0]
   236be:	4423      	add	r3, r4
   236c0:	4293      	cmp	r3, r2
		*length = available_len - offset;
   236c2:	bf84      	itt	hi
   236c4:	1b13      	subhi	r3, r2, r4
   236c6:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   236c8:	2a0c      	cmp	r2, #12
	req_len = *length;
   236ca:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   236ce:	d92b      	bls.n	23728 <log_msg_hexdump_data_op+0x8e>
	if (offset < chunk_len) {
   236d0:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   236d2:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   236d4:	d82e      	bhi.n	23734 <log_msg_hexdump_data_op+0x9a>
		head_data = msg->payload.ext.data.bytes;
   236d6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   236d8:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   236da:	454a      	cmp	r2, r9
   236dc:	bf28      	it	cs
   236de:	464a      	movcs	r2, r9
   236e0:	4615      	mov	r5, r2
		if (put_op) {
   236e2:	4420      	add	r0, r4
   236e4:	f1b8 0f00 	cmp.w	r8, #0
   236e8:	d021      	beq.n	2372e <log_msg_hexdump_data_op+0x94>
   236ea:	4631      	mov	r1, r6
   236ec:	f008 f835 	bl	2b75a <memcpy>
		req_len -= cpy_len;
   236f0:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   236f4:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   236f6:	f1b9 0f00 	cmp.w	r9, #0
   236fa:	d0dd      	beq.n	236b8 <log_msg_hexdump_data_op+0x1e>
   236fc:	2f00      	cmp	r7, #0
   236fe:	d0db      	beq.n	236b8 <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   23700:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   23704:	454d      	cmp	r5, r9
   23706:	bf28      	it	cs
   23708:	464d      	movcs	r5, r9
		if (put_op) {
   2370a:	1d20      	adds	r0, r4, #4
   2370c:	4438      	add	r0, r7
   2370e:	462a      	mov	r2, r5
   23710:	f1b8 0f00 	cmp.w	r8, #0
   23714:	d014      	beq.n	23740 <log_msg_hexdump_data_op+0xa6>
   23716:	4631      	mov	r1, r6
   23718:	f008 f81f 	bl	2b75a <memcpy>
		req_len -= cpy_len;
   2371c:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   23720:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   23722:	442e      	add	r6, r5
		offset = 0;
   23724:	2400      	movs	r4, #0
   23726:	e7e6      	b.n	236f6 <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   23728:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   2372a:	2700      	movs	r7, #0
   2372c:	e7d5      	b.n	236da <log_msg_hexdump_data_op+0x40>
   2372e:	4601      	mov	r1, r0
   23730:	4630      	mov	r0, r6
   23732:	e7db      	b.n	236ec <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   23734:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   23736:	2c1b      	cmp	r4, #27
   23738:	d9dd      	bls.n	236f6 <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   2373a:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   2373c:	3c1c      	subs	r4, #28
   2373e:	e7fa      	b.n	23736 <log_msg_hexdump_data_op+0x9c>
   23740:	4601      	mov	r1, r0
   23742:	4630      	mov	r0, r6
   23744:	e7e8      	b.n	23718 <log_msg_hexdump_data_op+0x7e>

00023746 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23746:	3004      	adds	r0, #4
   23748:	f3bf 8f5b 	dmb	ish
   2374c:	e850 3f00 	ldrex	r3, [r0]
   23750:	3301      	adds	r3, #1
   23752:	e840 3200 	strex	r2, r3, [r0]
   23756:	2a00      	cmp	r2, #0
   23758:	d1f8      	bne.n	2374c <log_msg_get+0x6>
   2375a:	f3bf 8f5b 	dmb	ish
}
   2375e:	4770      	bx	lr

00023760 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   23760:	7a40      	ldrb	r0, [r0, #9]
}
   23762:	0900      	lsrs	r0, r0, #4
   23764:	4770      	bx	lr

00023766 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   23766:	7a43      	ldrb	r3, [r0, #9]
   23768:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2376c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   23770:	d216      	bcs.n	237a0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   23772:	2a03      	cmp	r2, #3
   23774:	d803      	bhi.n	2377e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   23776:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2377a:	6948      	ldr	r0, [r1, #20]
   2377c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2377e:	2901      	cmp	r1, #1
   23780:	d803      	bhi.n	2378a <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   23782:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   23786:	6988      	ldr	r0, [r1, #24]
   23788:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2378a:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2378c:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2378e:	2906      	cmp	r1, #6
   23790:	d803      	bhi.n	2379a <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   23792:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   23796:	6848      	ldr	r0, [r1, #4]
   23798:	4770      	bx	lr
		cont = cont->next;
   2379a:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2379c:	3907      	subs	r1, #7
		cont = cont->next;
   2379e:	e7f6      	b.n	2378e <log_msg_arg_get+0x28>
		return 0;
   237a0:	2000      	movs	r0, #0
}
   237a2:	4770      	bx	lr

000237a4 <log_msg_put>:
{
   237a4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   237a6:	1d02      	adds	r2, r0, #4
   237a8:	f3bf 8f5b 	dmb	ish
   237ac:	e852 1f00 	ldrex	r1, [r2]
   237b0:	3901      	subs	r1, #1
   237b2:	e842 1c00 	strex	ip, r1, [r2]
   237b6:	f1bc 0f00 	cmp.w	ip, #0
   237ba:	d1f7      	bne.n	237ac <log_msg_put+0x8>
   237bc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   237c0:	685b      	ldr	r3, [r3, #4]
   237c2:	b90b      	cbnz	r3, 237c8 <log_msg_put+0x24>
		msg_free(msg);
   237c4:	f7df bbd0 	b.w	2f68 <msg_free>
}
   237c8:	4770      	bx	lr

000237ca <log_msg_str_get>:
}
   237ca:	6900      	ldr	r0, [r0, #16]
   237cc:	4770      	bx	lr

000237ce <log_msg_create_n>:
{
   237ce:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   237d2:	4681      	mov	r9, r0
   237d4:	4688      	mov	r8, r1
   237d6:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   237d8:	f7df fbb2 	bl	2f40 <log_msg_chunk_alloc>
	if (msg != NULL) {
   237dc:	4604      	mov	r4, r0
   237de:	b330      	cbz	r0, 2382e <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   237e0:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   237e2:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   237e4:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   237e6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   237e8:	8107      	strh	r7, [r0, #8]
   237ea:	d909      	bls.n	23800 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   237ec:	2202      	movs	r2, #2
   237ee:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   237f0:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   237f4:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   237f8:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   237fa:	f1ba 0f00 	cmp.w	sl, #0
   237fe:	dc0e      	bgt.n	2381e <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   23800:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   23802:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   23806:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2380a:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   2380c:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2380e:	d818      	bhi.n	23842 <log_msg_create_n+0x74>
   23810:	00aa      	lsls	r2, r5, #2
   23812:	4641      	mov	r1, r8
   23814:	f104 0014 	add.w	r0, r4, #20
   23818:	f007 ff9f 	bl	2b75a <memcpy>
	while (nargs != 0U) {
   2381c:	e007      	b.n	2382e <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2381e:	f7df fb8f 	bl	2f40 <log_msg_chunk_alloc>
		if (cont == NULL) {
   23822:	4606      	mov	r6, r0
   23824:	b930      	cbnz	r0, 23834 <log_msg_create_n+0x66>
			msg_free(msg);
   23826:	4620      	mov	r0, r4
   23828:	f7df fb9e 	bl	2f68 <msg_free>
			return NULL;
   2382c:	4634      	mov	r4, r6
}
   2382e:	4620      	mov	r0, r4
   23830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   23834:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   23838:	f1aa 0a07 	sub.w	sl, sl, #7
   2383c:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   2383e:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   23840:	e7db      	b.n	237fa <log_msg_create_n+0x2c>
   23842:	f8d8 3000 	ldr.w	r3, [r8]
   23846:	61a3      	str	r3, [r4, #24]
   23848:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   2384c:	6967      	ldr	r7, [r4, #20]
   2384e:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   23850:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   23852:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   23856:	2d07      	cmp	r5, #7
   23858:	462e      	mov	r6, r5
   2385a:	bf28      	it	cs
   2385c:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   2385e:	ea4f 0986 	mov.w	r9, r6, lsl #2
   23862:	4641      	mov	r1, r8
   23864:	1d38      	adds	r0, r7, #4
   23866:	464a      	mov	r2, r9
   23868:	f007 ff77 	bl	2b75a <memcpy>
	while (nargs != 0U) {
   2386c:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   2386e:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   23870:	44c8      	add	r8, r9
	while (nargs != 0U) {
   23872:	d1f0      	bne.n	23856 <log_msg_create_n+0x88>
   23874:	e7db      	b.n	2382e <log_msg_create_n+0x60>

00023876 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   23876:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   23878:	2400      	movs	r4, #0
   2387a:	9400      	str	r4, [sp, #0]
   2387c:	f7ff ff0d 	bl	2369a <log_msg_hexdump_data_op>
}
   23880:	b002      	add	sp, #8
   23882:	bd10      	pop	{r4, pc}

00023884 <buffer_write>:
{
   23884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23886:	4606      	mov	r6, r0
   23888:	460d      	mov	r5, r1
   2388a:	4614      	mov	r4, r2
   2388c:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2388e:	4621      	mov	r1, r4
   23890:	4628      	mov	r0, r5
   23892:	463a      	mov	r2, r7
   23894:	47b0      	blx	r6
	} while (len != 0);
   23896:	1a24      	subs	r4, r4, r0
		buf += processed;
   23898:	4405      	add	r5, r0
	} while (len != 0);
   2389a:	d1f8      	bne.n	2388e <buffer_write+0xa>
}
   2389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002389e <std_print>:
{
   2389e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   238a2:	b08e      	sub	sp, #56	; 0x38
   238a4:	af0e      	add	r7, sp, #56	; 0x38
   238a6:	4680      	mov	r8, r0
   238a8:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   238aa:	f7ff ff8e 	bl	237ca <log_msg_str_get>
   238ae:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   238b0:	4640      	mov	r0, r8
   238b2:	f7ff ff55 	bl	23760 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   238b6:	0083      	lsls	r3, r0, #2
   238b8:	3307      	adds	r3, #7
   238ba:	f023 0307 	bic.w	r3, r3, #7
   238be:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   238c2:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   238c4:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   238c6:	f04f 0900 	mov.w	r9, #0
   238ca:	45d1      	cmp	r9, sl
   238cc:	d116      	bne.n	238fc <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   238ce:	4640      	mov	r0, r8
   238d0:	f7ff ff46 	bl	23760 <log_msg_nargs_get>
   238d4:	280f      	cmp	r0, #15
   238d6:	d81e      	bhi.n	23916 <std_print+0x78>
   238d8:	e8df f010 	tbh	[pc, r0, lsl #1]
   238dc:	00200019 	.word	0x00200019
   238e0:	002d0026 	.word	0x002d0026
   238e4:	00410036 	.word	0x00410036
   238e8:	005d004e 	.word	0x005d004e
   238ec:	0081006e 	.word	0x0081006e
   238f0:	00ad0096 	.word	0x00ad0096
   238f4:	00e100c6 	.word	0x00e100c6
   238f8:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   238fc:	4649      	mov	r1, r9
   238fe:	4640      	mov	r0, r8
   23900:	f7ff ff31 	bl	23766 <log_msg_arg_get>
   23904:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   23908:	f109 0901 	add.w	r9, r9, #1
   2390c:	e7dd      	b.n	238ca <std_print+0x2c>
		print_formatted(log_output, str);
   2390e:	4631      	mov	r1, r6
   23910:	4628      	mov	r0, r5
   23912:	f7df fb67 	bl	2fe4 <print_formatted>
}
   23916:	46bd      	mov	sp, r7
   23918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   2391c:	6822      	ldr	r2, [r4, #0]
   2391e:	4631      	mov	r1, r6
   23920:	4628      	mov	r0, r5
   23922:	f7df fb5f 	bl	2fe4 <print_formatted>
		break;
   23926:	e7f6      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   23928:	e9d4 2300 	ldrd	r2, r3, [r4]
   2392c:	4631      	mov	r1, r6
   2392e:	4628      	mov	r0, r5
   23930:	f7df fb58 	bl	2fe4 <print_formatted>
		break;
   23934:	e7ef      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   23936:	68a3      	ldr	r3, [r4, #8]
   23938:	9300      	str	r3, [sp, #0]
   2393a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2393e:	4631      	mov	r1, r6
   23940:	4628      	mov	r0, r5
   23942:	f7df fb4f 	bl	2fe4 <print_formatted>
		break;
   23946:	e7e6      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23948:	68e3      	ldr	r3, [r4, #12]
   2394a:	9301      	str	r3, [sp, #4]
   2394c:	68a3      	ldr	r3, [r4, #8]
   2394e:	9300      	str	r3, [sp, #0]
   23950:	e9d4 2300 	ldrd	r2, r3, [r4]
   23954:	4631      	mov	r1, r6
   23956:	4628      	mov	r0, r5
   23958:	f7df fb44 	bl	2fe4 <print_formatted>
		break;
   2395c:	e7db      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2395e:	6923      	ldr	r3, [r4, #16]
   23960:	9302      	str	r3, [sp, #8]
   23962:	68e3      	ldr	r3, [r4, #12]
   23964:	9301      	str	r3, [sp, #4]
   23966:	68a3      	ldr	r3, [r4, #8]
   23968:	9300      	str	r3, [sp, #0]
   2396a:	e9d4 2300 	ldrd	r2, r3, [r4]
   2396e:	4631      	mov	r1, r6
   23970:	4628      	mov	r0, r5
   23972:	f7df fb37 	bl	2fe4 <print_formatted>
		break;
   23976:	e7ce      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23978:	6963      	ldr	r3, [r4, #20]
   2397a:	9303      	str	r3, [sp, #12]
   2397c:	6923      	ldr	r3, [r4, #16]
   2397e:	9302      	str	r3, [sp, #8]
   23980:	68e3      	ldr	r3, [r4, #12]
   23982:	9301      	str	r3, [sp, #4]
   23984:	68a3      	ldr	r3, [r4, #8]
   23986:	9300      	str	r3, [sp, #0]
   23988:	e9d4 2300 	ldrd	r2, r3, [r4]
   2398c:	4631      	mov	r1, r6
   2398e:	4628      	mov	r0, r5
   23990:	f7df fb28 	bl	2fe4 <print_formatted>
		break;
   23994:	e7bf      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23996:	69a3      	ldr	r3, [r4, #24]
   23998:	9304      	str	r3, [sp, #16]
   2399a:	6963      	ldr	r3, [r4, #20]
   2399c:	9303      	str	r3, [sp, #12]
   2399e:	6923      	ldr	r3, [r4, #16]
   239a0:	9302      	str	r3, [sp, #8]
   239a2:	68e3      	ldr	r3, [r4, #12]
   239a4:	9301      	str	r3, [sp, #4]
   239a6:	68a3      	ldr	r3, [r4, #8]
   239a8:	9300      	str	r3, [sp, #0]
   239aa:	e9d4 2300 	ldrd	r2, r3, [r4]
   239ae:	4631      	mov	r1, r6
   239b0:	4628      	mov	r0, r5
   239b2:	f7df fb17 	bl	2fe4 <print_formatted>
		break;
   239b6:	e7ae      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   239b8:	69e3      	ldr	r3, [r4, #28]
   239ba:	9305      	str	r3, [sp, #20]
   239bc:	69a3      	ldr	r3, [r4, #24]
   239be:	9304      	str	r3, [sp, #16]
   239c0:	6963      	ldr	r3, [r4, #20]
   239c2:	9303      	str	r3, [sp, #12]
   239c4:	6923      	ldr	r3, [r4, #16]
   239c6:	9302      	str	r3, [sp, #8]
   239c8:	68e3      	ldr	r3, [r4, #12]
   239ca:	9301      	str	r3, [sp, #4]
   239cc:	68a3      	ldr	r3, [r4, #8]
   239ce:	9300      	str	r3, [sp, #0]
   239d0:	e9d4 2300 	ldrd	r2, r3, [r4]
   239d4:	4631      	mov	r1, r6
   239d6:	4628      	mov	r0, r5
   239d8:	f7df fb04 	bl	2fe4 <print_formatted>
		break;
   239dc:	e79b      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   239de:	6a23      	ldr	r3, [r4, #32]
   239e0:	9306      	str	r3, [sp, #24]
   239e2:	69e3      	ldr	r3, [r4, #28]
   239e4:	9305      	str	r3, [sp, #20]
   239e6:	69a3      	ldr	r3, [r4, #24]
   239e8:	9304      	str	r3, [sp, #16]
   239ea:	6963      	ldr	r3, [r4, #20]
   239ec:	9303      	str	r3, [sp, #12]
   239ee:	6923      	ldr	r3, [r4, #16]
   239f0:	9302      	str	r3, [sp, #8]
   239f2:	68e3      	ldr	r3, [r4, #12]
   239f4:	9301      	str	r3, [sp, #4]
   239f6:	68a3      	ldr	r3, [r4, #8]
   239f8:	9300      	str	r3, [sp, #0]
   239fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   239fe:	4631      	mov	r1, r6
   23a00:	4628      	mov	r0, r5
   23a02:	f7df faef 	bl	2fe4 <print_formatted>
		break;
   23a06:	e786      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23a0a:	9307      	str	r3, [sp, #28]
   23a0c:	6a23      	ldr	r3, [r4, #32]
   23a0e:	9306      	str	r3, [sp, #24]
   23a10:	69e3      	ldr	r3, [r4, #28]
   23a12:	9305      	str	r3, [sp, #20]
   23a14:	69a3      	ldr	r3, [r4, #24]
   23a16:	9304      	str	r3, [sp, #16]
   23a18:	6963      	ldr	r3, [r4, #20]
   23a1a:	9303      	str	r3, [sp, #12]
   23a1c:	6923      	ldr	r3, [r4, #16]
   23a1e:	9302      	str	r3, [sp, #8]
   23a20:	68e3      	ldr	r3, [r4, #12]
   23a22:	9301      	str	r3, [sp, #4]
   23a24:	68a3      	ldr	r3, [r4, #8]
   23a26:	9300      	str	r3, [sp, #0]
   23a28:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a2c:	4631      	mov	r1, r6
   23a2e:	4628      	mov	r0, r5
   23a30:	f7df fad8 	bl	2fe4 <print_formatted>
		break;
   23a34:	e76f      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23a38:	9308      	str	r3, [sp, #32]
   23a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23a3c:	9307      	str	r3, [sp, #28]
   23a3e:	6a23      	ldr	r3, [r4, #32]
   23a40:	9306      	str	r3, [sp, #24]
   23a42:	69e3      	ldr	r3, [r4, #28]
   23a44:	9305      	str	r3, [sp, #20]
   23a46:	69a3      	ldr	r3, [r4, #24]
   23a48:	9304      	str	r3, [sp, #16]
   23a4a:	6963      	ldr	r3, [r4, #20]
   23a4c:	9303      	str	r3, [sp, #12]
   23a4e:	6923      	ldr	r3, [r4, #16]
   23a50:	9302      	str	r3, [sp, #8]
   23a52:	68e3      	ldr	r3, [r4, #12]
   23a54:	9301      	str	r3, [sp, #4]
   23a56:	68a3      	ldr	r3, [r4, #8]
   23a58:	9300      	str	r3, [sp, #0]
   23a5a:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a5e:	4631      	mov	r1, r6
   23a60:	4628      	mov	r0, r5
   23a62:	f7df fabf 	bl	2fe4 <print_formatted>
		break;
   23a66:	e756      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23a6a:	9309      	str	r3, [sp, #36]	; 0x24
   23a6c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23a6e:	9308      	str	r3, [sp, #32]
   23a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23a72:	9307      	str	r3, [sp, #28]
   23a74:	6a23      	ldr	r3, [r4, #32]
   23a76:	9306      	str	r3, [sp, #24]
   23a78:	69e3      	ldr	r3, [r4, #28]
   23a7a:	9305      	str	r3, [sp, #20]
   23a7c:	69a3      	ldr	r3, [r4, #24]
   23a7e:	9304      	str	r3, [sp, #16]
   23a80:	6963      	ldr	r3, [r4, #20]
   23a82:	9303      	str	r3, [sp, #12]
   23a84:	6923      	ldr	r3, [r4, #16]
   23a86:	9302      	str	r3, [sp, #8]
   23a88:	68e3      	ldr	r3, [r4, #12]
   23a8a:	9301      	str	r3, [sp, #4]
   23a8c:	68a3      	ldr	r3, [r4, #8]
   23a8e:	9300      	str	r3, [sp, #0]
   23a90:	e9d4 2300 	ldrd	r2, r3, [r4]
   23a94:	4631      	mov	r1, r6
   23a96:	4628      	mov	r0, r5
   23a98:	f7df faa4 	bl	2fe4 <print_formatted>
		break;
   23a9c:	e73b      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23a9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23aa0:	930a      	str	r3, [sp, #40]	; 0x28
   23aa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23aa4:	9309      	str	r3, [sp, #36]	; 0x24
   23aa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23aa8:	9308      	str	r3, [sp, #32]
   23aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23aac:	9307      	str	r3, [sp, #28]
   23aae:	6a23      	ldr	r3, [r4, #32]
   23ab0:	9306      	str	r3, [sp, #24]
   23ab2:	69e3      	ldr	r3, [r4, #28]
   23ab4:	9305      	str	r3, [sp, #20]
   23ab6:	69a3      	ldr	r3, [r4, #24]
   23ab8:	9304      	str	r3, [sp, #16]
   23aba:	6963      	ldr	r3, [r4, #20]
   23abc:	9303      	str	r3, [sp, #12]
   23abe:	6923      	ldr	r3, [r4, #16]
   23ac0:	9302      	str	r3, [sp, #8]
   23ac2:	68e3      	ldr	r3, [r4, #12]
   23ac4:	9301      	str	r3, [sp, #4]
   23ac6:	68a3      	ldr	r3, [r4, #8]
   23ac8:	9300      	str	r3, [sp, #0]
   23aca:	e9d4 2300 	ldrd	r2, r3, [r4]
   23ace:	4631      	mov	r1, r6
   23ad0:	4628      	mov	r0, r5
   23ad2:	f7df fa87 	bl	2fe4 <print_formatted>
		break;
   23ad6:	e71e      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23ada:	930b      	str	r3, [sp, #44]	; 0x2c
   23adc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23ade:	930a      	str	r3, [sp, #40]	; 0x28
   23ae0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23ae2:	9309      	str	r3, [sp, #36]	; 0x24
   23ae4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23ae6:	9308      	str	r3, [sp, #32]
   23ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23aea:	9307      	str	r3, [sp, #28]
   23aec:	6a23      	ldr	r3, [r4, #32]
   23aee:	9306      	str	r3, [sp, #24]
   23af0:	69e3      	ldr	r3, [r4, #28]
   23af2:	9305      	str	r3, [sp, #20]
   23af4:	69a3      	ldr	r3, [r4, #24]
   23af6:	9304      	str	r3, [sp, #16]
   23af8:	6963      	ldr	r3, [r4, #20]
   23afa:	9303      	str	r3, [sp, #12]
   23afc:	6923      	ldr	r3, [r4, #16]
   23afe:	9302      	str	r3, [sp, #8]
   23b00:	68e3      	ldr	r3, [r4, #12]
   23b02:	9301      	str	r3, [sp, #4]
   23b04:	68a3      	ldr	r3, [r4, #8]
   23b06:	9300      	str	r3, [sp, #0]
   23b08:	e9d4 2300 	ldrd	r2, r3, [r4]
   23b0c:	4631      	mov	r1, r6
   23b0e:	4628      	mov	r0, r5
   23b10:	f7df fa68 	bl	2fe4 <print_formatted>
		break;
   23b14:	e6ff      	b.n	23916 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   23b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   23b18:	930c      	str	r3, [sp, #48]	; 0x30
   23b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23b1c:	930b      	str	r3, [sp, #44]	; 0x2c
   23b1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23b20:	930a      	str	r3, [sp, #40]	; 0x28
   23b22:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23b24:	9309      	str	r3, [sp, #36]	; 0x24
   23b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   23b28:	9308      	str	r3, [sp, #32]
   23b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23b2c:	9307      	str	r3, [sp, #28]
   23b2e:	6a23      	ldr	r3, [r4, #32]
   23b30:	9306      	str	r3, [sp, #24]
   23b32:	69e3      	ldr	r3, [r4, #28]
   23b34:	9305      	str	r3, [sp, #20]
   23b36:	69a3      	ldr	r3, [r4, #24]
   23b38:	9304      	str	r3, [sp, #16]
   23b3a:	6963      	ldr	r3, [r4, #20]
   23b3c:	9303      	str	r3, [sp, #12]
   23b3e:	6923      	ldr	r3, [r4, #16]
   23b40:	9302      	str	r3, [sp, #8]
   23b42:	68e3      	ldr	r3, [r4, #12]
   23b44:	9301      	str	r3, [sp, #4]
   23b46:	68a3      	ldr	r3, [r4, #8]
   23b48:	9300      	str	r3, [sp, #0]
   23b4a:	e9d4 2300 	ldrd	r2, r3, [r4]
   23b4e:	4631      	mov	r1, r6
   23b50:	4628      	mov	r0, r5
   23b52:	f7df fa47 	bl	2fe4 <print_formatted>
}
   23b56:	e6de      	b.n	23916 <std_print+0x78>

00023b58 <log_output_flush>:
		     log_output->control_block->offset,
   23b58:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   23b5a:	6881      	ldr	r1, [r0, #8]
{
   23b5c:	b510      	push	{r4, lr}
   23b5e:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   23b60:	e9d2 2300 	ldrd	r2, r3, [r2]
   23b64:	6800      	ldr	r0, [r0, #0]
   23b66:	f7ff fe8d 	bl	23884 <buffer_write>
	log_output->control_block->offset = 0;
   23b6a:	6863      	ldr	r3, [r4, #4]
   23b6c:	2200      	movs	r2, #0
   23b6e:	601a      	str	r2, [r3, #0]
}
   23b70:	bd10      	pop	{r4, pc}

00023b72 <out_func>:
{
   23b72:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   23b74:	684b      	ldr	r3, [r1, #4]
   23b76:	681a      	ldr	r2, [r3, #0]
   23b78:	68cb      	ldr	r3, [r1, #12]
   23b7a:	429a      	cmp	r2, r3
{
   23b7c:	4605      	mov	r5, r0
   23b7e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   23b80:	d102      	bne.n	23b88 <out_func+0x16>
		log_output_flush(out_ctx);
   23b82:	4608      	mov	r0, r1
   23b84:	f7ff ffe8 	bl	23b58 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23b88:	6863      	ldr	r3, [r4, #4]
   23b8a:	f3bf 8f5b 	dmb	ish
   23b8e:	e853 2f00 	ldrex	r2, [r3]
   23b92:	1c51      	adds	r1, r2, #1
   23b94:	e843 1000 	strex	r0, r1, [r3]
   23b98:	2800      	cmp	r0, #0
   23b9a:	d1f8      	bne.n	23b8e <out_func+0x1c>
   23b9c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   23ba0:	68a3      	ldr	r3, [r4, #8]
   23ba2:	549d      	strb	r5, [r3, r2]
}
   23ba4:	2000      	movs	r0, #0
   23ba6:	bd38      	pop	{r3, r4, r5, pc}

00023ba8 <settings_load>:
	return settings_load_subtree(NULL);
   23ba8:	2000      	movs	r0, #0
   23baa:	f7df bcb5 	b.w	3518 <settings_load_subtree>

00023bae <settings_delete>:
	return settings_save_one(name, NULL, 0);
   23bae:	2200      	movs	r2, #0
   23bb0:	4611      	mov	r1, r2
   23bb2:	f7df bc8b 	b.w	34cc <settings_save_one>

00023bb6 <settings_name_steq>:
{
   23bb6:	4603      	mov	r3, r0
   23bb8:	b530      	push	{r4, r5, lr}
   23bba:	4608      	mov	r0, r1
	if (next) {
   23bbc:	b10a      	cbz	r2, 23bc2 <settings_name_steq+0xc>
		*next = NULL;
   23bbe:	2100      	movs	r1, #0
   23bc0:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   23bc2:	b163      	cbz	r3, 23bde <settings_name_steq+0x28>
   23bc4:	b190      	cbz	r0, 23bec <settings_name_steq+0x36>
   23bc6:	1e41      	subs	r1, r0, #1
   23bc8:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   23bca:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   23bce:	4604      	mov	r4, r0
   23bd0:	f810 3b01 	ldrb.w	r3, [r0], #1
   23bd4:	b15d      	cbz	r5, 23bee <settings_name_steq+0x38>
   23bd6:	429d      	cmp	r5, r3
   23bd8:	d101      	bne.n	23bde <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   23bda:	2d3d      	cmp	r5, #61	; 0x3d
   23bdc:	d1f5      	bne.n	23bca <settings_name_steq+0x14>
	return 0;
   23bde:	2000      	movs	r0, #0
   23be0:	e004      	b.n	23bec <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   23be2:	2b3d      	cmp	r3, #61	; 0x3d
   23be4:	d008      	beq.n	23bf8 <settings_name_steq+0x42>
   23be6:	fab3 f083 	clz	r0, r3
   23bea:	0940      	lsrs	r0, r0, #5
}
   23bec:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   23bee:	2b2f      	cmp	r3, #47	; 0x2f
   23bf0:	d1f7      	bne.n	23be2 <settings_name_steq+0x2c>
		if (next) {
   23bf2:	b10a      	cbz	r2, 23bf8 <settings_name_steq+0x42>
			*next = name + 1;
   23bf4:	3401      	adds	r4, #1
   23bf6:	6014      	str	r4, [r2, #0]
		return 1;
   23bf8:	2001      	movs	r0, #1
   23bfa:	e7f7      	b.n	23bec <settings_name_steq+0x36>

00023bfc <settings_name_next>:
{
   23bfc:	b530      	push	{r4, r5, lr}
   23bfe:	4603      	mov	r3, r0
	if (next) {
   23c00:	b109      	cbz	r1, 23c06 <settings_name_next+0xa>
		*next = NULL;
   23c02:	2200      	movs	r2, #0
   23c04:	600a      	str	r2, [r1, #0]
	if (!name) {
   23c06:	b16b      	cbz	r3, 23c24 <settings_name_next+0x28>
   23c08:	461a      	mov	r2, r3
   23c0a:	4614      	mov	r4, r2
   23c0c:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   23c0e:	f812 5b01 	ldrb.w	r5, [r2], #1
   23c12:	b135      	cbz	r5, 23c22 <settings_name_next+0x26>
   23c14:	2d3d      	cmp	r5, #61	; 0x3d
   23c16:	d004      	beq.n	23c22 <settings_name_next+0x26>
   23c18:	2d2f      	cmp	r5, #47	; 0x2f
   23c1a:	d1f6      	bne.n	23c0a <settings_name_next+0xe>
		if (next) {
   23c1c:	b109      	cbz	r1, 23c22 <settings_name_next+0x26>
			*next = name + 1;
   23c1e:	3401      	adds	r4, #1
   23c20:	600c      	str	r4, [r1, #0]
}
   23c22:	bd30      	pop	{r4, r5, pc}
		return 0;
   23c24:	4618      	mov	r0, r3
   23c26:	e7fc      	b.n	23c22 <settings_name_next+0x26>

00023c28 <settings_runtime_read_cb>:
{
   23c28:	b538      	push	{r3, r4, r5, lr}
   23c2a:	4604      	mov	r4, r0
   23c2c:	4615      	mov	r5, r2
	memcpy(data, arg->data, MIN(arg->len, len));
   23c2e:	6862      	ldr	r2, [r4, #4]
   23c30:	42aa      	cmp	r2, r5
   23c32:	bf28      	it	cs
   23c34:	462a      	movcs	r2, r5
{
   23c36:	4608      	mov	r0, r1
   23c38:	6821      	ldr	r1, [r4, #0]
   23c3a:	f007 fd8e 	bl	2b75a <memcpy>
	return MIN(arg->len, len);
   23c3e:	6860      	ldr	r0, [r4, #4]
}
   23c40:	42a8      	cmp	r0, r5
   23c42:	bf28      	it	cs
   23c44:	4628      	movcs	r0, r5
   23c46:	bd38      	pop	{r3, r4, r5, pc}

00023c48 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   23c48:	2000      	movs	r0, #0
   23c4a:	4770      	bx	lr

00023c4c <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   23c4c:	2200      	movs	r2, #0
   23c4e:	8002      	strh	r2, [r0, #0]
   23c50:	6042      	str	r2, [r0, #4]
}
   23c52:	4770      	bx	lr

00023c54 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   23c54:	68c2      	ldr	r2, [r0, #12]
   23c56:	b2cb      	uxtb	r3, r1
   23c58:	210c      	movs	r1, #12
   23c5a:	fb03 2101 	mla	r1, r3, r1, r2
   23c5e:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   23c60:	f000 0007 	and.w	r0, r0, #7
   23c64:	4770      	bx	lr

00023c66 <set_off_state>:
	__asm__ volatile(
   23c66:	f04f 0320 	mov.w	r3, #32
   23c6a:	f3ef 8211 	mrs	r2, BASEPRI
   23c6e:	f383 8811 	msr	BASEPRI, r3
   23c72:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23c76:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   23c78:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   23c7c:	d001      	beq.n	23c82 <set_off_state+0x1c>
   23c7e:	428b      	cmp	r3, r1
   23c80:	d107      	bne.n	23c92 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   23c82:	2301      	movs	r3, #1
   23c84:	6003      	str	r3, [r0, #0]
	int err = 0;
   23c86:	2000      	movs	r0, #0
	__asm__ volatile(
   23c88:	f382 8811 	msr	BASEPRI, r2
   23c8c:	f3bf 8f6f 	isb	sy
}
   23c90:	4770      	bx	lr
		err = -EPERM;
   23c92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23c96:	e7f7      	b.n	23c88 <set_off_state+0x22>

00023c98 <set_starting_state>:
{
   23c98:	b510      	push	{r4, lr}
	__asm__ volatile(
   23c9a:	f04f 0320 	mov.w	r3, #32
   23c9e:	f3ef 8211 	mrs	r2, BASEPRI
   23ca2:	f383 8811 	msr	BASEPRI, r3
   23ca6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23caa:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23cac:	f003 0407 	and.w	r4, r3, #7
   23cb0:	2c01      	cmp	r4, #1
   23cb2:	d106      	bne.n	23cc2 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23cb4:	6001      	str	r1, [r0, #0]
	int err = 0;
   23cb6:	2000      	movs	r0, #0
	__asm__ volatile(
   23cb8:	f382 8811 	msr	BASEPRI, r2
   23cbc:	f3bf 8f6f 	isb	sy
}
   23cc0:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   23cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   23cc6:	428b      	cmp	r3, r1
		err = -EALREADY;
   23cc8:	bf14      	ite	ne
   23cca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   23cce:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   23cd2:	e7f1      	b.n	23cb8 <set_starting_state+0x20>

00023cd4 <set_on_state>:
	__asm__ volatile(
   23cd4:	f04f 0320 	mov.w	r3, #32
   23cd8:	f3ef 8211 	mrs	r2, BASEPRI
   23cdc:	f383 8811 	msr	BASEPRI, r3
   23ce0:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   23ce4:	6803      	ldr	r3, [r0, #0]
   23ce6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   23cea:	f043 0302 	orr.w	r3, r3, #2
   23cee:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   23cf0:	f382 8811 	msr	BASEPRI, r2
   23cf4:	f3bf 8f6f 	isb	sy
}
   23cf8:	4770      	bx	lr

00023cfa <onoff_started_callback>:
	return &data->mgr[type];
   23cfa:	68c0      	ldr	r0, [r0, #12]
{
   23cfc:	b410      	push	{r4}
	return &data->mgr[type];
   23cfe:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   23d00:	241c      	movs	r4, #28
   23d02:	fb03 0004 	mla	r0, r3, r4, r0
   23d06:	2100      	movs	r1, #0
}
   23d08:	bc10      	pop	{r4}
	notify(mgr, 0);
   23d0a:	4710      	bx	r2

00023d0c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   23d0c:	2000      	movs	r0, #0
   23d0e:	f7f5 bbd9 	b.w	194c4 <nrfx_clock_stop>

00023d12 <blocking_start_callback>:
{
   23d12:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   23d14:	f7fc b9b6 	b.w	20084 <z_impl_k_sem_give>

00023d18 <api_stop>:
{
   23d18:	b538      	push	{r3, r4, r5, lr}
   23d1a:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   23d1c:	240c      	movs	r4, #12
   23d1e:	434c      	muls	r4, r1
{
   23d20:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   23d22:	68c0      	ldr	r0, [r0, #12]
   23d24:	f104 0340 	add.w	r3, r4, #64	; 0x40
   23d28:	2180      	movs	r1, #128	; 0x80
   23d2a:	4418      	add	r0, r3
   23d2c:	f7ff ff9b 	bl	23c66 <set_off_state>
	if (err < 0) {
   23d30:	2800      	cmp	r0, #0
   23d32:	db04      	blt.n	23d3e <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   23d34:	6869      	ldr	r1, [r5, #4]
   23d36:	440c      	add	r4, r1
   23d38:	6863      	ldr	r3, [r4, #4]
   23d3a:	4798      	blx	r3
	return 0;
   23d3c:	2000      	movs	r0, #0
}
   23d3e:	bd38      	pop	{r3, r4, r5, pc}

00023d40 <api_start>:
{
   23d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23d44:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   23d46:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   23d48:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   23d4a:	434c      	muls	r4, r1
{
   23d4c:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   23d4e:	f104 0040 	add.w	r0, r4, #64	; 0x40
   23d52:	2180      	movs	r1, #128	; 0x80
   23d54:	4428      	add	r0, r5
{
   23d56:	4690      	mov	r8, r2
   23d58:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   23d5a:	f7ff ff9d 	bl	23c98 <set_starting_state>
	if (err < 0) {
   23d5e:	2800      	cmp	r0, #0
   23d60:	db06      	blt.n	23d70 <api_start+0x30>
	subdata->cb = cb;
   23d62:	4425      	add	r5, r4
	subdata->user_data = user_data;
   23d64:	e9c5 870e 	strd	r8, r7, [r5, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   23d68:	6873      	ldr	r3, [r6, #4]
   23d6a:	591b      	ldr	r3, [r3, r4]
   23d6c:	4798      	blx	r3
	return 0;
   23d6e:	2000      	movs	r0, #0
}
   23d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023d74 <gpio_pin_configure>:
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   23d74:	04d3      	lsls	r3, r2, #19
{
   23d76:	b570      	push	{r4, r5, r6, lr}
	struct gpio_driver_data *data =
   23d78:	68c5      	ldr	r5, [r0, #12]
{
   23d7a:	460e      	mov	r6, r1
   23d7c:	4614      	mov	r4, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   23d7e:	d506      	bpl.n	23d8e <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   23d80:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   23d84:	d003      	beq.n	23d8e <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   23d86:	07d1      	lsls	r1, r2, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   23d88:	bf48      	it	mi
   23d8a:	f482 54e0 	eormi.w	r4, r2, #7168	; 0x1c00
	return api->pin_configure(port, pin, flags);
   23d8e:	6883      	ldr	r3, [r0, #8]
   23d90:	4622      	mov	r2, r4
   23d92:	681b      	ldr	r3, [r3, #0]
   23d94:	4631      	mov	r1, r6
   23d96:	4798      	blx	r3
	if (ret != 0) {
   23d98:	b940      	cbnz	r0, 23dac <gpio_pin_configure+0x38>
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   23d9a:	682b      	ldr	r3, [r5, #0]
   23d9c:	2201      	movs	r2, #1
   23d9e:	fa02 f106 	lsl.w	r1, r2, r6
   23da2:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   23da4:	bf4c      	ite	mi
   23da6:	430b      	orrmi	r3, r1
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   23da8:	438b      	bicpl	r3, r1
   23daa:	602b      	str	r3, [r5, #0]
}
   23dac:	bd70      	pop	{r4, r5, r6, pc}

00023dae <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   23dae:	2301      	movs	r3, #1
   23db0:	fa03 f101 	lsl.w	r1, r3, r1
   23db4:	68c3      	ldr	r3, [r0, #12]
   23db6:	681b      	ldr	r3, [r3, #0]
   23db8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   23dba:	bf18      	it	ne
   23dbc:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   23dc0:	b112      	cbz	r2, 23dc8 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   23dc2:	6883      	ldr	r3, [r0, #8]
   23dc4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   23dc6:	4718      	bx	r3
   23dc8:	6883      	ldr	r3, [r0, #8]
   23dca:	691b      	ldr	r3, [r3, #16]
   23dcc:	e7fb      	b.n	23dc6 <gpio_pin_set+0x18>

00023dce <st7789v_read>:
}
   23dce:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23dd2:	4770      	bx	lr

00023dd4 <st7789v_get_framebuffer>:
}
   23dd4:	2000      	movs	r0, #0
   23dd6:	4770      	bx	lr

00023dd8 <st7789v_set_brightness>:
}
   23dd8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23ddc:	4770      	bx	lr

00023dde <st7789v_get_capabilities>:
{
   23dde:	b538      	push	{r3, r4, r5, lr}
   23de0:	460b      	mov	r3, r1
__ssp_bos_icheck3(memset, void *, int)
   23de2:	2410      	movs	r4, #16
	struct st7789v_data *data = (struct st7789v_data *)dev->data;
   23de4:	68c5      	ldr	r5, [r0, #12]
   23de6:	4622      	mov	r2, r4
   23de8:	2100      	movs	r1, #0
   23dea:	4618      	mov	r0, r3
   23dec:	f007 fcd6 	bl	2b79c <memset>
	capabilities->x_resolution = data->width;
   23df0:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   23df2:	8002      	strh	r2, [r0, #0]
	capabilities->y_resolution = data->height;
   23df4:	8caa      	ldrh	r2, [r5, #36]	; 0x24
	capabilities->current_pixel_format = PIXEL_FORMAT_RGB_565;
   23df6:	7304      	strb	r4, [r0, #12]
	capabilities->y_resolution = data->height;
   23df8:	8042      	strh	r2, [r0, #2]
	capabilities->supported_pixel_formats = PIXEL_FORMAT_RGB_565;
   23dfa:	6044      	str	r4, [r0, #4]
}
   23dfc:	bd38      	pop	{r3, r4, r5, pc}

00023dfe <st7789v_set_contrast>:
   23dfe:	f06f 0085 	mvn.w	r0, #133	; 0x85
   23e02:	4770      	bx	lr

00023e04 <st7789v_transmit>:
{
   23e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23e08:	4604      	mov	r4, r0
   23e0a:	b086      	sub	sp, #24
   23e0c:	461f      	mov	r7, r3
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23e0e:	4625      	mov	r5, r4
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e10:	f10d 0307 	add.w	r3, sp, #7
{
   23e14:	f88d 1007 	strb.w	r1, [sp, #7]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e18:	9302      	str	r3, [sp, #8]
{
   23e1a:	4616      	mov	r6, r2
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   23e1c:	ab02      	add	r3, sp, #8
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e1e:	2201      	movs	r2, #1
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e20:	2112      	movs	r1, #18
   23e22:	6a00      	ldr	r0, [r0, #32]
	struct spi_buf tx_buf = { .buf = &cmd, .len = 1 };
   23e24:	9203      	str	r2, [sp, #12]
	struct spi_buf_set tx_bufs = { .buffers = &tx_buf, .count = 1 };
   23e26:	e9cd 3204 	strd	r3, r2, [sp, #16]
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e2a:	f7ff ffc0 	bl	23dae <gpio_pin_set>
	spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23e2e:	f855 0b04 	ldr.w	r0, [r5], #4
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
   23e32:	6883      	ldr	r3, [r0, #8]
   23e34:	aa04      	add	r2, sp, #16
   23e36:	f8d3 8000 	ldr.w	r8, [r3]
   23e3a:	4629      	mov	r1, r5
   23e3c:	2300      	movs	r3, #0
   23e3e:	47c0      	blx	r8
	if (tx_data != NULL) {
   23e40:	b16e      	cbz	r6, 23e5e <st7789v_transmit+0x5a>
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e42:	6a20      	ldr	r0, [r4, #32]
   23e44:	2200      	movs	r2, #0
   23e46:	2112      	movs	r1, #18
		tx_buf.len = tx_count;
   23e48:	e9cd 6702 	strd	r6, r7, [sp, #8]
	gpio_pin_set(data->cmd_data_gpio, ST7789V_CMD_DATA_PIN, is_cmd);
   23e4c:	f7ff ffaf 	bl	23dae <gpio_pin_set>
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23e50:	6820      	ldr	r0, [r4, #0]
   23e52:	6883      	ldr	r3, [r0, #8]
   23e54:	aa04      	add	r2, sp, #16
   23e56:	681c      	ldr	r4, [r3, #0]
   23e58:	4629      	mov	r1, r5
   23e5a:	2300      	movs	r3, #0
   23e5c:	47a0      	blx	r4
}
   23e5e:	b006      	add	sp, #24
   23e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023e64 <st7789v_blanking_on>:
{
   23e64:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_OFF, NULL, 0);
   23e66:	2300      	movs	r3, #0
   23e68:	68c0      	ldr	r0, [r0, #12]
   23e6a:	461a      	mov	r2, r3
   23e6c:	2128      	movs	r1, #40	; 0x28
   23e6e:	f7ff ffc9 	bl	23e04 <st7789v_transmit>
}
   23e72:	2000      	movs	r0, #0
   23e74:	bd08      	pop	{r3, pc}

00023e76 <st7789v_blanking_off>:
{
   23e76:	b508      	push	{r3, lr}
	st7789v_transmit(driver, ST7789V_CMD_DISP_ON, NULL, 0);
   23e78:	2300      	movs	r3, #0
   23e7a:	68c0      	ldr	r0, [r0, #12]
   23e7c:	461a      	mov	r2, r3
   23e7e:	2129      	movs	r1, #41	; 0x29
   23e80:	f7ff ffc0 	bl	23e04 <st7789v_transmit>
}
   23e84:	2000      	movs	r0, #0
   23e86:	bd08      	pop	{r3, pc}

00023e88 <st7789v_write>:
{
   23e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct st7789v_data *data = (struct st7789v_data *)dev->data;
   23e8c:	68c5      	ldr	r5, [r0, #12]
{
   23e8e:	461c      	mov	r4, r3
	uint16_t ram_x = x + data->x_offset;
   23e90:	8d28      	ldrh	r0, [r5, #40]	; 0x28
	uint16_t ram_y = y + data->y_offset;
   23e92:	f8b5 802a 	ldrh.w	r8, [r5, #42]	; 0x2a
	st7789v_set_mem_area(data, x, y, desc->width, desc->height);
   23e96:	889b      	ldrh	r3, [r3, #4]
   23e98:	88e6      	ldrh	r6, [r4, #6]
	uint16_t ram_x = x + data->x_offset;
   23e9a:	4401      	add	r1, r0
	uint16_t ram_y = y + data->y_offset;
   23e9c:	4442      	add	r2, r8
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   23e9e:	3b01      	subs	r3, #1
{
   23ea0:	b085      	sub	sp, #20
	uint16_t ram_y = y + data->y_offset;
   23ea2:	fa1f f882 	uxth.w	r8, r2
	spi_data[0] = sys_cpu_to_be16(ram_x);
   23ea6:	ba4a      	rev16	r2, r1
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   23ea8:	fa13 f181 	uxtah	r1, r3, r1
   23eac:	ba49      	rev16	r1, r1
	spi_data[0] = sys_cpu_to_be16(ram_x);
   23eae:	f8ad 2008 	strh.w	r2, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_x + w - 1);
   23eb2:	f8ad 100a 	strh.w	r1, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_CASET, (uint8_t *)&spi_data[0], 4);
   23eb6:	2304      	movs	r3, #4
   23eb8:	aa02      	add	r2, sp, #8
   23eba:	212a      	movs	r1, #42	; 0x2a
   23ebc:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23ebe:	3e01      	subs	r6, #1
{
   23ec0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23ec2:	4446      	add	r6, r8
	st7789v_transmit(data, ST7789V_CMD_CASET, (uint8_t *)&spi_data[0], 4);
   23ec4:	f7ff ff9e 	bl	23e04 <st7789v_transmit>
	spi_data[0] = sys_cpu_to_be16(ram_y);
   23ec8:	fa98 f398 	rev16.w	r3, r8
   23ecc:	f8ad 3008 	strh.w	r3, [sp, #8]
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23ed0:	ba76      	rev16	r6, r6
	st7789v_transmit(data, ST7789V_CMD_RASET, (uint8_t *)&spi_data[0], 4);
   23ed2:	2304      	movs	r3, #4
   23ed4:	aa02      	add	r2, sp, #8
   23ed6:	212b      	movs	r1, #43	; 0x2b
   23ed8:	4628      	mov	r0, r5
	spi_data[1] = sys_cpu_to_be16(ram_y + h - 1);
   23eda:	f8ad 600a 	strh.w	r6, [sp, #10]
	st7789v_transmit(data, ST7789V_CMD_RASET, (uint8_t *)&spi_data[0], 4);
   23ede:	f7ff ff91 	bl	23e04 <st7789v_transmit>
	if (desc->pitch > desc->width) {
   23ee2:	88a3      	ldrh	r3, [r4, #4]
   23ee4:	8922      	ldrh	r2, [r4, #8]
   23ee6:	88e6      	ldrh	r6, [r4, #6]
		nbr_of_writes = desc->height;
   23ee8:	429a      	cmp	r2, r3
   23eea:	bf84      	itt	hi
   23eec:	46b0      	movhi	r8, r6
   23eee:	2601      	movhi	r6, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   23ef0:	fb06 f303 	mul.w	r3, r6, r3
   23ef4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   23ef8:	463a      	mov	r2, r7
   23efa:	f04f 012c 	mov.w	r1, #44	; 0x2c
   23efe:	4628      	mov	r0, r5
		nbr_of_writes = desc->height;
   23f00:	bf98      	it	ls
   23f02:	f04f 0801 	movls.w	r8, #1
	st7789v_transmit(data, ST7789V_CMD_RAMWR,
   23f06:	f7ff ff7d 	bl	23e04 <st7789v_transmit>
	tx_bufs.count = 1;
   23f0a:	2301      	movs	r3, #1
   23f0c:	9303      	str	r3, [sp, #12]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   23f0e:	8923      	ldrh	r3, [r4, #8]
	tx_bufs.buffers = &tx_buf;
   23f10:	f8cd d008 	str.w	sp, [sp, #8]
	write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   23f14:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   23f18:	f04f 0900 	mov.w	r9, #0
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23f1c:	f105 0a04 	add.w	sl, r5, #4
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   23f20:	f109 0901 	add.w	r9, r9, #1
   23f24:	fa1f f389 	uxth.w	r3, r9
   23f28:	4598      	cmp	r8, r3
   23f2a:	d803      	bhi.n	23f34 <st7789v_write+0xac>
}
   23f2c:	2000      	movs	r0, #0
   23f2e:	b005      	add	sp, #20
   23f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   23f34:	88a3      	ldrh	r3, [r4, #4]
		spi_write(data->spi_dev, &data->spi_config, &tx_bufs);
   23f36:	6828      	ldr	r0, [r5, #0]
		tx_buf.buf = (void *)write_data_start;
   23f38:	9700      	str	r7, [sp, #0]
		tx_buf.len = desc->width * ST7789V_PIXEL_SIZE * write_h;
   23f3a:	4373      	muls	r3, r6
   23f3c:	005b      	lsls	r3, r3, #1
   23f3e:	9301      	str	r3, [sp, #4]
   23f40:	6883      	ldr	r3, [r0, #8]
   23f42:	aa02      	add	r2, sp, #8
   23f44:	f8d3 b000 	ldr.w	fp, [r3]
   23f48:	4651      	mov	r1, sl
   23f4a:	2300      	movs	r3, #0
   23f4c:	47d8      	blx	fp
		write_data_start += (desc->pitch * ST7789V_PIXEL_SIZE);
   23f4e:	8923      	ldrh	r3, [r4, #8]
   23f50:	eb07 0743 	add.w	r7, r7, r3, lsl #1
	for (write_cnt = 1U; write_cnt < nbr_of_writes; ++write_cnt) {
   23f54:	e7e4      	b.n	23f20 <st7789v_write+0x98>

00023f56 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   23f56:	4770      	bx	lr

00023f58 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   23f58:	4770      	bx	lr

00023f5a <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   23f5a:	f7e0 b8bf 	b.w	40dc <_DoInit>

00023f5e <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   23f5e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   23f60:	f7ff fffb 	bl	23f5a <SEGGER_RTT_Init>

	return 0;
}
   23f64:	2000      	movs	r0, #0
   23f66:	bd08      	pop	{r3, pc}

00023f68 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   23f68:	b538      	push	{r3, r4, r5, lr}
   23f6a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   23f6c:	42ab      	cmp	r3, r5
{
   23f6e:	4611      	mov	r1, r2
   23f70:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   23f72:	d804      	bhi.n	23f7e <_copy+0x16>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   23f74:	461a      	mov	r2, r3
   23f76:	f007 fbf0 	bl	2b75a <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   23f7a:	4620      	mov	r0, r4
   23f7c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   23f7e:	2400      	movs	r4, #0
   23f80:	e7fb      	b.n	23f7a <_copy+0x12>

00023f82 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   23f82:	f007 bc0b 	b.w	2b79c <memset>

00023f86 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   23f86:	09c3      	lsrs	r3, r0, #7
   23f88:	005a      	lsls	r2, r3, #1
   23f8a:	4413      	add	r3, r2
   23f8c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   23f90:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   23f94:	b2c0      	uxtb	r0, r0
   23f96:	4770      	bx	lr

00023f98 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23f98:	78cb      	ldrb	r3, [r1, #3]
   23f9a:	7802      	ldrb	r2, [r0, #0]
   23f9c:	4053      	eors	r3, r2
   23f9e:	7003      	strb	r3, [r0, #0]
   23fa0:	884b      	ldrh	r3, [r1, #2]
   23fa2:	7842      	ldrb	r2, [r0, #1]
   23fa4:	4053      	eors	r3, r2
   23fa6:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   23fa8:	680a      	ldr	r2, [r1, #0]
   23faa:	7883      	ldrb	r3, [r0, #2]
   23fac:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23fb0:	7083      	strb	r3, [r0, #2]
   23fb2:	680a      	ldr	r2, [r1, #0]
   23fb4:	78c3      	ldrb	r3, [r0, #3]
   23fb6:	4053      	eors	r3, r2
   23fb8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   23fba:	79cb      	ldrb	r3, [r1, #7]
   23fbc:	7902      	ldrb	r2, [r0, #4]
   23fbe:	4053      	eors	r3, r2
   23fc0:	7103      	strb	r3, [r0, #4]
   23fc2:	88cb      	ldrh	r3, [r1, #6]
   23fc4:	7942      	ldrb	r2, [r0, #5]
   23fc6:	4053      	eors	r3, r2
   23fc8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   23fca:	684a      	ldr	r2, [r1, #4]
   23fcc:	7983      	ldrb	r3, [r0, #6]
   23fce:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23fd2:	7183      	strb	r3, [r0, #6]
   23fd4:	684a      	ldr	r2, [r1, #4]
   23fd6:	79c3      	ldrb	r3, [r0, #7]
   23fd8:	4053      	eors	r3, r2
   23fda:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   23fdc:	7acb      	ldrb	r3, [r1, #11]
   23fde:	7a02      	ldrb	r2, [r0, #8]
   23fe0:	4053      	eors	r3, r2
   23fe2:	7203      	strb	r3, [r0, #8]
   23fe4:	7a42      	ldrb	r2, [r0, #9]
   23fe6:	894b      	ldrh	r3, [r1, #10]
   23fe8:	4053      	eors	r3, r2
   23fea:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   23fec:	688a      	ldr	r2, [r1, #8]
   23fee:	7a83      	ldrb	r3, [r0, #10]
   23ff0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23ff4:	7283      	strb	r3, [r0, #10]
   23ff6:	688a      	ldr	r2, [r1, #8]
   23ff8:	7ac3      	ldrb	r3, [r0, #11]
   23ffa:	4053      	eors	r3, r2
   23ffc:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   23ffe:	7bcb      	ldrb	r3, [r1, #15]
   24000:	7b02      	ldrb	r2, [r0, #12]
   24002:	4053      	eors	r3, r2
   24004:	7303      	strb	r3, [r0, #12]
   24006:	89cb      	ldrh	r3, [r1, #14]
   24008:	7b42      	ldrb	r2, [r0, #13]
   2400a:	4053      	eors	r3, r2
   2400c:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2400e:	68ca      	ldr	r2, [r1, #12]
   24010:	7b83      	ldrb	r3, [r0, #14]
   24012:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   24016:	7383      	strb	r3, [r0, #14]
   24018:	68ca      	ldr	r2, [r1, #12]
   2401a:	7bc3      	ldrb	r3, [r0, #15]
   2401c:	4053      	eors	r3, r2
   2401e:	73c3      	strb	r3, [r0, #15]
}
   24020:	4770      	bx	lr

00024022 <shift_rows>:
{
   24022:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   24024:	7802      	ldrb	r2, [r0, #0]
   24026:	f88d 2000 	strb.w	r2, [sp]
   2402a:	7942      	ldrb	r2, [r0, #5]
   2402c:	f88d 2001 	strb.w	r2, [sp, #1]
   24030:	7a82      	ldrb	r2, [r0, #10]
   24032:	f88d 2002 	strb.w	r2, [sp, #2]
   24036:	7bc2      	ldrb	r2, [r0, #15]
   24038:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2403c:	7902      	ldrb	r2, [r0, #4]
   2403e:	f88d 2004 	strb.w	r2, [sp, #4]
   24042:	7a42      	ldrb	r2, [r0, #9]
   24044:	f88d 2005 	strb.w	r2, [sp, #5]
   24048:	7b82      	ldrb	r2, [r0, #14]
   2404a:	f88d 2006 	strb.w	r2, [sp, #6]
   2404e:	78c2      	ldrb	r2, [r0, #3]
   24050:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   24054:	7a02      	ldrb	r2, [r0, #8]
   24056:	f88d 2008 	strb.w	r2, [sp, #8]
   2405a:	7b42      	ldrb	r2, [r0, #13]
   2405c:	f88d 2009 	strb.w	r2, [sp, #9]
   24060:	7882      	ldrb	r2, [r0, #2]
   24062:	f88d 200a 	strb.w	r2, [sp, #10]
   24066:	79c2      	ldrb	r2, [r0, #7]
   24068:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2406c:	7b02      	ldrb	r2, [r0, #12]
   2406e:	f88d 200c 	strb.w	r2, [sp, #12]
   24072:	7842      	ldrb	r2, [r0, #1]
   24074:	7ac3      	ldrb	r3, [r0, #11]
   24076:	f88d 200d 	strb.w	r2, [sp, #13]
   2407a:	7982      	ldrb	r2, [r0, #6]
   2407c:	f88d 200e 	strb.w	r2, [sp, #14]
   24080:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24084:	2310      	movs	r3, #16
   24086:	466a      	mov	r2, sp
   24088:	4619      	mov	r1, r3
   2408a:	f7ff ff6d 	bl	23f68 <_copy>
}
   2408e:	b005      	add	sp, #20
   24090:	f85d fb04 	ldr.w	pc, [sp], #4

00024094 <mult_row_column>:
{
   24094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24096:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   24098:	7808      	ldrb	r0, [r1, #0]
{
   2409a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2409c:	f7ff ff73 	bl	23f86 <_double_byte>
   240a0:	4605      	mov	r5, r0
   240a2:	7860      	ldrb	r0, [r4, #1]
   240a4:	f7ff ff6f 	bl	23f86 <_double_byte>
   240a8:	78a2      	ldrb	r2, [r4, #2]
   240aa:	7863      	ldrb	r3, [r4, #1]
   240ac:	4053      	eors	r3, r2
   240ae:	78e2      	ldrb	r2, [r4, #3]
   240b0:	4053      	eors	r3, r2
   240b2:	405d      	eors	r5, r3
   240b4:	4045      	eors	r5, r0
   240b6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   240b8:	7860      	ldrb	r0, [r4, #1]
   240ba:	7827      	ldrb	r7, [r4, #0]
   240bc:	f7ff ff63 	bl	23f86 <_double_byte>
   240c0:	4605      	mov	r5, r0
   240c2:	78a0      	ldrb	r0, [r4, #2]
   240c4:	f7ff ff5f 	bl	23f86 <_double_byte>
   240c8:	78a3      	ldrb	r3, [r4, #2]
   240ca:	405f      	eors	r7, r3
   240cc:	78e3      	ldrb	r3, [r4, #3]
   240ce:	405f      	eors	r7, r3
   240d0:	407d      	eors	r5, r7
   240d2:	4045      	eors	r5, r0
   240d4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   240d6:	78a0      	ldrb	r0, [r4, #2]
   240d8:	7865      	ldrb	r5, [r4, #1]
   240da:	7827      	ldrb	r7, [r4, #0]
   240dc:	f7ff ff53 	bl	23f86 <_double_byte>
   240e0:	406f      	eors	r7, r5
   240e2:	4605      	mov	r5, r0
   240e4:	78e0      	ldrb	r0, [r4, #3]
   240e6:	f7ff ff4e 	bl	23f86 <_double_byte>
   240ea:	78e3      	ldrb	r3, [r4, #3]
   240ec:	405f      	eors	r7, r3
   240ee:	407d      	eors	r5, r7
   240f0:	4045      	eors	r5, r0
   240f2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   240f4:	7820      	ldrb	r0, [r4, #0]
   240f6:	f7ff ff46 	bl	23f86 <_double_byte>
   240fa:	7863      	ldrb	r3, [r4, #1]
   240fc:	7825      	ldrb	r5, [r4, #0]
   240fe:	405d      	eors	r5, r3
   24100:	78a3      	ldrb	r3, [r4, #2]
   24102:	405d      	eors	r5, r3
   24104:	4045      	eors	r5, r0
   24106:	78e0      	ldrb	r0, [r4, #3]
   24108:	f7ff ff3d 	bl	23f86 <_double_byte>
   2410c:	b2ed      	uxtb	r5, r5
   2410e:	4045      	eors	r5, r0
   24110:	70f5      	strb	r5, [r6, #3]
}
   24112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024114 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   24114:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   24116:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   24118:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2411a:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2411e:	2b00      	cmp	r3, #0
   24120:	bfb4      	ite	lt
   24122:	2387      	movlt	r3, #135	; 0x87
   24124:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   24126:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2412a:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2412e:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   24130:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   24134:	d002      	beq.n	2413c <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   24136:	7813      	ldrb	r3, [r2, #0]
   24138:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2413a:	e7f4      	b.n	24126 <gf_double+0x12>
	}
}
   2413c:	bd10      	pop	{r4, pc}

0002413e <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2413e:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   24140:	b120      	cbz	r0, 2414c <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   24142:	2258      	movs	r2, #88	; 0x58
   24144:	2100      	movs	r1, #0
   24146:	f7ff ff1c 	bl	23f82 <_set>
   2414a:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2414c:	bd08      	pop	{r3, pc}

0002414e <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2414e:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24150:	4604      	mov	r4, r0
   24152:	b188      	cbz	r0, 24178 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24154:	2210      	movs	r2, #16
   24156:	2100      	movs	r1, #0
   24158:	f7ff ff13 	bl	23f82 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2415c:	2210      	movs	r2, #16
   2415e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24162:	2100      	movs	r1, #0
   24164:	f7ff ff0d 	bl	23f82 <_set>
	s->leftover_offset = 0;
   24168:	2300      	movs	r3, #0
   2416a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2416c:	2200      	movs	r2, #0
   2416e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24172:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24176:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24178:	bd10      	pop	{r4, pc}

0002417a <tc_cmac_setup>:
{
   2417a:	b570      	push	{r4, r5, r6, lr}
   2417c:	460d      	mov	r5, r1
   2417e:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   24180:	4604      	mov	r4, r0
   24182:	b310      	cbz	r0, 241ca <tc_cmac_setup+0x50>
   24184:	b311      	cbz	r1, 241cc <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24186:	2258      	movs	r2, #88	; 0x58
   24188:	2100      	movs	r1, #0
   2418a:	f7ff fefa 	bl	23f82 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2418e:	4629      	mov	r1, r5
	s->sched = sched;
   24190:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24192:	4630      	mov	r0, r6
   24194:	f7e0 f828 	bl	41e8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24198:	2210      	movs	r2, #16
   2419a:	2100      	movs	r1, #0
   2419c:	4620      	mov	r0, r4
   2419e:	f7ff fef0 	bl	23f82 <_set>
	gf_double (s->K1, s->iv);
   241a2:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   241a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   241a8:	4621      	mov	r1, r4
   241aa:	4620      	mov	r0, r4
   241ac:	f7e0 f86e 	bl	428c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   241b0:	4621      	mov	r1, r4
   241b2:	4628      	mov	r0, r5
   241b4:	f7ff ffae 	bl	24114 <gf_double>
	gf_double (s->K2, s->K1);
   241b8:	4629      	mov	r1, r5
   241ba:	f104 0020 	add.w	r0, r4, #32
   241be:	f7ff ffa9 	bl	24114 <gf_double>
	tc_cmac_init(s);
   241c2:	4620      	mov	r0, r4
   241c4:	f7ff ffc3 	bl	2414e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   241c8:	2001      	movs	r0, #1
}
   241ca:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   241cc:	4608      	mov	r0, r1
   241ce:	e7fc      	b.n	241ca <tc_cmac_setup+0x50>

000241d0 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   241d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   241d4:	460d      	mov	r5, r1
   241d6:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   241d8:	4604      	mov	r4, r0
   241da:	2800      	cmp	r0, #0
   241dc:	d062      	beq.n	242a4 <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   241de:	b912      	cbnz	r2, 241e6 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   241e0:	2001      	movs	r0, #1
}
   241e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   241e6:	2900      	cmp	r1, #0
   241e8:	d05c      	beq.n	242a4 <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   241ea:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   241ee:	ea50 0301 	orrs.w	r3, r0, r1
   241f2:	d057      	beq.n	242a4 <tc_cmac_update+0xd4>
	s->countdown--;
   241f4:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   241f8:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   241fc:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   24200:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   24204:	f1b8 0f00 	cmp.w	r8, #0
   24208:	d02a      	beq.n	24260 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2420a:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2420e:	f108 0030 	add.w	r0, r8, #48	; 0x30
   24212:	42be      	cmp	r6, r7
   24214:	4420      	add	r0, r4
   24216:	d208      	bcs.n	2422a <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24218:	462a      	mov	r2, r5
   2421a:	4633      	mov	r3, r6
   2421c:	4631      	mov	r1, r6
   2421e:	f7ff fea3 	bl	23f68 <_copy>
			s->leftover_offset += data_length;
   24222:	6c62      	ldr	r2, [r4, #68]	; 0x44
   24224:	4432      	add	r2, r6
   24226:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24228:	e7da      	b.n	241e0 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2422a:	463b      	mov	r3, r7
   2422c:	462a      	mov	r2, r5
   2422e:	4639      	mov	r1, r7
   24230:	f7ff fe9a 	bl	23f68 <_copy>
		data_length -= remaining_space;
   24234:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   24236:	2300      	movs	r3, #0
   24238:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2423a:	4446      	add	r6, r8
		data += remaining_space;
   2423c:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2423e:	1e63      	subs	r3, r4, #1
   24240:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   24244:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24248:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2424c:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2424e:	ea82 0200 	eor.w	r2, r2, r0
   24252:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24254:	d1f6      	bne.n	24244 <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24256:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24258:	4621      	mov	r1, r4
   2425a:	4620      	mov	r0, r4
   2425c:	f7e0 f816 	bl	428c <tc_aes_encrypt>
   24260:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24264:	2e10      	cmp	r6, #16
   24266:	d80a      	bhi.n	2427e <tc_cmac_update+0xae>
	if (data_length > 0) {
   24268:	2e00      	cmp	r6, #0
   2426a:	d0b9      	beq.n	241e0 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2426c:	4633      	mov	r3, r6
   2426e:	462a      	mov	r2, r5
   24270:	4631      	mov	r1, r6
   24272:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24276:	f7ff fe77 	bl	23f68 <_copy>
		s->leftover_offset = data_length;
   2427a:	6466      	str	r6, [r4, #68]	; 0x44
   2427c:	e7b0      	b.n	241e0 <tc_cmac_update+0x10>
   2427e:	1e63      	subs	r3, r4, #1
   24280:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   24282:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24286:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2428a:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2428c:	ea82 0200 	eor.w	r2, r2, r0
   24290:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24292:	d1f6      	bne.n	24282 <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24294:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24296:	4621      	mov	r1, r4
   24298:	4620      	mov	r0, r4
   2429a:	f7df fff7 	bl	428c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2429e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   242a0:	3e10      	subs	r6, #16
   242a2:	e7df      	b.n	24264 <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   242a4:	2000      	movs	r0, #0
   242a6:	e79c      	b.n	241e2 <tc_cmac_update+0x12>

000242a8 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   242a8:	b570      	push	{r4, r5, r6, lr}
   242aa:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   242ac:	4605      	mov	r5, r0
   242ae:	b1e8      	cbz	r0, 242ec <tc_cmac_final+0x44>
   242b0:	b369      	cbz	r1, 2430e <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   242b2:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   242b4:	2a10      	cmp	r2, #16
   242b6:	d11a      	bne.n	242ee <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   242b8:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242ba:	1e63      	subs	r3, r4, #1
   242bc:	3901      	subs	r1, #1
   242be:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   242c2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   242c6:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   242ca:	4072      	eors	r2, r6
   242cc:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242d0:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   242d2:	ea82 0206 	eor.w	r2, r2, r6
   242d6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   242d8:	d1f3      	bne.n	242c2 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   242da:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   242dc:	4621      	mov	r1, r4
   242de:	4628      	mov	r0, r5
   242e0:	f7df ffd4 	bl	428c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   242e4:	4620      	mov	r0, r4
   242e6:	f7ff ff2a 	bl	2413e <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   242ea:	2001      	movs	r0, #1
}
   242ec:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   242ee:	f102 0030 	add.w	r0, r2, #48	; 0x30
   242f2:	2100      	movs	r1, #0
   242f4:	f1c2 0210 	rsb	r2, r2, #16
   242f8:	4420      	add	r0, r4
   242fa:	f7ff fe42 	bl	23f82 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   242fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24300:	4423      	add	r3, r4
   24302:	2280      	movs	r2, #128	; 0x80
   24304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24308:	f104 0120 	add.w	r1, r4, #32
   2430c:	e7d5      	b.n	242ba <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2430e:	4608      	mov	r0, r1
   24310:	e7ec      	b.n	242ec <tc_cmac_final+0x44>

00024312 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   24312:	2100      	movs	r1, #0
   24314:	2001      	movs	r0, #1
   24316:	f7e0 b91d 	b.w	4554 <z_arm_fatal_error>

0002431a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2431a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2431c:	6800      	ldr	r0, [r0, #0]
   2431e:	f7e0 b919 	b.w	4554 <z_arm_fatal_error>

00024322 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   24322:	b508      	push	{r3, lr}
	handler();
   24324:	f7e0 f94e 	bl	45c4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2432c:	f7e0 bbc0 	b.w	4ab0 <z_arm_exc_exit>

00024330 <_stdout_hook_default>:
}
   24330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24334:	4770      	bx	lr

00024336 <display_get_capabilities>:
   24336:	6883      	ldr	r3, [r0, #8]
   24338:	69db      	ldr	r3, [r3, #28]
   2433a:	4718      	bx	r3

0002433c <lvgl_flush_cb_mono>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_mono(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   2433c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t w = area->x2 - area->x1 + 1;
   24340:	888d      	ldrh	r5, [r1, #4]
   24342:	880b      	ldrh	r3, [r1, #0]
	uint16_t h = area->y2 - area->y1 + 1;
   24344:	88ce      	ldrh	r6, [r1, #6]
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   24346:	f8d0 902c 	ldr.w	r9, [r0, #44]	; 0x2c
	uint16_t w = area->x2 - area->x1 + 1;
   2434a:	3501      	adds	r5, #1
   2434c:	1aed      	subs	r5, r5, r3
	uint16_t h = area->y2 - area->y1 + 1;
   2434e:	884b      	ldrh	r3, [r1, #2]
   24350:	3601      	adds	r6, #1
{
   24352:	b08b      	sub	sp, #44	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   24354:	1af6      	subs	r6, r6, r3
	uint16_t w = area->x2 - area->x1 + 1;
   24356:	b2ad      	uxth	r5, r5
{
   24358:	460c      	mov	r4, r1
	uint16_t h = area->y2 - area->y1 + 1;
   2435a:	b2b6      	uxth	r6, r6
	struct display_capabilities cap;
	struct display_buffer_descriptor desc;

	display_get_capabilities(display_dev, &cap);
   2435c:	a906      	add	r1, sp, #24
{
   2435e:	4607      	mov	r7, r0
	display_get_capabilities(display_dev, &cap);
   24360:	4648      	mov	r0, r9
{
   24362:	4690      	mov	r8, r2
	display_get_capabilities(display_dev, &cap);
   24364:	f7ff ffe7 	bl	24336 <display_get_capabilities>

	desc.buf_size = (w * h)/8U;
   24368:	fb06 f305 	mul.w	r3, r6, r5
   2436c:	08db      	lsrs	r3, r3, #3
   2436e:	9303      	str	r3, [sp, #12]
	return api->write(dev, x, y, desc, buf);
   24370:	f8d9 3008 	ldr.w	r3, [r9, #8]
   24374:	f8cd 8000 	str.w	r8, [sp]
	desc.width = w;
   24378:	f8ad 5010 	strh.w	r5, [sp, #16]
	desc.pitch = w;
   2437c:	f8ad 5014 	strh.w	r5, [sp, #20]
   24380:	8862      	ldrh	r2, [r4, #2]
   24382:	689d      	ldr	r5, [r3, #8]
   24384:	8821      	ldrh	r1, [r4, #0]
	desc.height = h;
   24386:	f8ad 6012 	strh.w	r6, [sp, #18]
   2438a:	ab03      	add	r3, sp, #12
   2438c:	4648      	mov	r0, r9
   2438e:	47a8      	blx	r5
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);
	if (cap.screen_info & SCREEN_INFO_DOUBLE_BUFFER) {
   24390:	9b08      	ldr	r3, [sp, #32]
   24392:	071b      	lsls	r3, r3, #28
   24394:	d509      	bpl.n	243aa <lvgl_flush_cb_mono+0x6e>
   24396:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2439a:	f8cd 8000 	str.w	r8, [sp]
   2439e:	689d      	ldr	r5, [r3, #8]
   243a0:	8862      	ldrh	r2, [r4, #2]
   243a2:	8821      	ldrh	r1, [r4, #0]
   243a4:	ab03      	add	r3, sp, #12
   243a6:	4648      	mov	r0, r9
   243a8:	47a8      	blx	r5
		display_write(display_dev, area->x1, area->y1, &desc,
				(void *) color_p);
	}

	lv_disp_flush_ready(disp_drv);
   243aa:	4638      	mov	r0, r7
   243ac:	f005 fdd1 	bl	29f52 <lv_disp_flush_ready>
}
   243b0:	b00b      	add	sp, #44	; 0x2c
   243b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000243b6 <lvgl_set_px_cb_mono>:


void lvgl_set_px_cb_mono(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   243b6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint8_t *buf_xy;
	uint8_t bit;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   243ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   243bc:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
   243c0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
   243c4:	460f      	mov	r7, r1
	display_get_capabilities(display_dev, &cap);
   243c6:	4669      	mov	r1, sp
{
   243c8:	4690      	mov	r8, r2
   243ca:	461c      	mov	r4, r3
	display_get_capabilities(display_dev, &cap);
   243cc:	f7ff ffb3 	bl	24336 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   243d0:	9802      	ldr	r0, [sp, #8]
   243d2:	f010 0f01 	tst.w	r0, #1
   243d6:	f000 0002 	and.w	r0, r0, #2
   243da:	d01f      	beq.n	2441c <lvgl_set_px_cb_mono+0x66>
		buf_xy = buf + x + y/8 * buf_w;
   243dc:	2d00      	cmp	r5, #0
   243de:	462b      	mov	r3, r5
   243e0:	bfb8      	it	lt
   243e2:	1deb      	addlt	r3, r5, #7
   243e4:	10d9      	asrs	r1, r3, #3
   243e6:	fb11 4408 	smlabb	r4, r1, r8, r4
   243ea:	1939      	adds	r1, r7, r4

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   243ec:	426b      	negs	r3, r5
   243ee:	f005 0407 	and.w	r4, r5, #7
   243f2:	f003 0307 	and.w	r3, r3, #7
   243f6:	bf58      	it	pl
   243f8:	425c      	negpl	r4, r3
			bit = y%8;
		}
	} else {
		buf_xy = buf + x/8 + y * buf_w/8;

		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   243fa:	b108      	cbz	r0, 24400 <lvgl_set_px_cb_mono+0x4a>
			bit = 7 - x%8;
   243fc:	f1c4 0407 	rsb	r4, r4, #7
		} else {
			bit = x%8;
   24400:	2201      	movs	r2, #1
   24402:	b2e4      	uxtb	r4, r4
		}
	}

	if (cap.current_pixel_format == PIXEL_FORMAT_MONO10) {
   24404:	fa02 f404 	lsl.w	r4, r2, r4
   24408:	f89d 200c 	ldrb.w	r2, [sp, #12]
   2440c:	780b      	ldrb	r3, [r1, #0]
   2440e:	2a04      	cmp	r2, #4
   24410:	b2e4      	uxtb	r4, r4
   24412:	d115      	bne.n	24440 <lvgl_set_px_cb_mono+0x8a>
		if (color.full == 0) {
   24414:	b9b6      	cbnz	r6, 24444 <lvgl_set_px_cb_mono+0x8e>
		}
	} else {
		if (color.full == 0) {
			*buf_xy |= BIT(bit);
		} else {
			*buf_xy &= ~BIT(bit);
   24416:	ea23 0304 	bic.w	r3, r3, r4
   2441a:	e014      	b.n	24446 <lvgl_set_px_cb_mono+0x90>
		buf_xy = buf + x/8 + y * buf_w/8;
   2441c:	4643      	mov	r3, r8
   2441e:	435d      	muls	r5, r3
   24420:	bf48      	it	mi
   24422:	3507      	addmi	r5, #7
   24424:	2c00      	cmp	r4, #0
   24426:	4621      	mov	r1, r4
   24428:	ea4f 05e5 	mov.w	r5, r5, asr #3
   2442c:	bfb8      	it	lt
   2442e:	1de1      	addlt	r1, r4, #7
   24430:	eb05 05e1 	add.w	r5, r5, r1, asr #3
   24434:	4263      	negs	r3, r4
   24436:	eb07 0105 	add.w	r1, r7, r5
		if (cap.screen_info & SCREEN_INFO_MONO_MSB_FIRST) {
   2443a:	f004 0407 	and.w	r4, r4, #7
   2443e:	e7d8      	b.n	243f2 <lvgl_set_px_cb_mono+0x3c>
		if (color.full == 0) {
   24440:	2e00      	cmp	r6, #0
   24442:	d1e8      	bne.n	24416 <lvgl_set_px_cb_mono+0x60>
			*buf_xy |= BIT(bit);
   24444:	4323      	orrs	r3, r4
			*buf_xy &= ~BIT(bit);
   24446:	700b      	strb	r3, [r1, #0]
		}
	}
}
   24448:	b004      	add	sp, #16
   2444a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002444e <lvgl_rounder_cb_mono>:

void lvgl_rounder_cb_mono(struct _disp_drv_t *disp_drv,
		lv_area_t *area)
{
   2444e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	struct display_capabilities cap;

	display_get_capabilities(display_dev, &cap);
   24450:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
{
   24452:	460c      	mov	r4, r1
	display_get_capabilities(display_dev, &cap);
   24454:	4669      	mov	r1, sp
   24456:	f7ff ff6e 	bl	24336 <display_get_capabilities>

	if (cap.screen_info & SCREEN_INFO_X_ALIGNMENT_WIDTH) {
   2445a:	9b02      	ldr	r3, [sp, #8]
   2445c:	06da      	lsls	r2, r3, #27
   2445e:	d506      	bpl.n	2446e <lvgl_rounder_cb_mono+0x20>
		area->x1 = 0;
   24460:	2300      	movs	r3, #0
   24462:	8023      	strh	r3, [r4, #0]
		area->x2 = cap.x_resolution - 1;
   24464:	f8bd 3000 	ldrh.w	r3, [sp]
   24468:	3b01      	subs	r3, #1
		if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
			area->y1 &= ~0x7;
			area->y2 |= 0x7;
		} else {
			area->x1 &= ~0x7;
			area->x2 |= 0x7;
   2446a:	80a3      	strh	r3, [r4, #4]
		}
	}
}
   2446c:	e009      	b.n	24482 <lvgl_rounder_cb_mono+0x34>
		if (cap.screen_info & SCREEN_INFO_MONO_VTILED) {
   2446e:	07db      	lsls	r3, r3, #31
   24470:	d509      	bpl.n	24486 <lvgl_rounder_cb_mono+0x38>
			area->y1 &= ~0x7;
   24472:	8863      	ldrh	r3, [r4, #2]
   24474:	f023 0307 	bic.w	r3, r3, #7
   24478:	8063      	strh	r3, [r4, #2]
			area->y2 |= 0x7;
   2447a:	88e3      	ldrh	r3, [r4, #6]
   2447c:	f043 0307 	orr.w	r3, r3, #7
   24480:	80e3      	strh	r3, [r4, #6]
}
   24482:	b004      	add	sp, #16
   24484:	bd10      	pop	{r4, pc}
			area->x1 &= ~0x7;
   24486:	8823      	ldrh	r3, [r4, #0]
   24488:	f023 0307 	bic.w	r3, r3, #7
   2448c:	8023      	strh	r3, [r4, #0]
			area->x2 |= 0x7;
   2448e:	88a3      	ldrh	r3, [r4, #4]
   24490:	f043 0307 	orr.w	r3, r3, #7
   24494:	e7e9      	b.n	2446a <lvgl_rounder_cb_mono+0x1c>

00024496 <lvgl_flush_cb_16bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_16bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   24496:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   24498:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   2449a:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   2449c:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   244a0:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   244a4:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   244a6:	3401      	adds	r4, #1
{
   244a8:	b087      	sub	sp, #28
   244aa:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   244ac:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   244ae:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   244b0:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   244b2:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   244b4:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 2U * h;
   244b6:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   244ba:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   244be:	f8ad 3014 	strh.w	r3, [sp, #20]
   244c2:	6883      	ldr	r3, [r0, #8]
   244c4:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 2U * h;
   244c6:	0049      	lsls	r1, r1, #1
   244c8:	9103      	str	r1, [sp, #12]
	desc.height = h;
   244ca:	f8ad 4012 	strh.w	r4, [sp, #18]
   244ce:	b2ba      	uxth	r2, r7
   244d0:	689c      	ldr	r4, [r3, #8]
   244d2:	b2b1      	uxth	r1, r6
   244d4:	ab03      	add	r3, sp, #12
   244d6:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   244d8:	4628      	mov	r0, r5
   244da:	f005 fd3a 	bl	29f52 <lv_disp_flush_ready>
}
   244de:	b007      	add	sp, #28
   244e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000244e2 <lvgl_flush_cb_24bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_24bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   244e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   244e4:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   244e6:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   244e8:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   244ec:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   244f0:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   244f2:	3401      	adds	r4, #1
{
   244f4:	b087      	sub	sp, #28
   244f6:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   244f8:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   244fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   244fc:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   244fe:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   24500:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 3U * h;
   24502:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   24506:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   2450a:	f8ad 3014 	strh.w	r3, [sp, #20]
   2450e:	6883      	ldr	r3, [r0, #8]
   24510:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 3U * h;
   24512:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   24516:	9103      	str	r1, [sp, #12]
	desc.height = h;
   24518:	f8ad 4012 	strh.w	r4, [sp, #18]
   2451c:	b2ba      	uxth	r2, r7
   2451e:	689c      	ldr	r4, [r3, #8]
   24520:	b2b1      	uxth	r1, r6
   24522:	ab03      	add	r3, sp, #12
   24524:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   24526:	4628      	mov	r0, r5
   24528:	f005 fd13 	bl	29f52 <lv_disp_flush_ready>
}
   2452c:	b007      	add	sp, #28
   2452e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024530 <lvgl_set_px_cb_24bit>:

void lvgl_set_px_cb_24bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   24530:	b5f0      	push	{r4, r5, r6, r7, lr}
   24532:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	uint8_t *buf_xy = buf + x * 3U + y * 3U * buf_w;
   24536:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
   2453a:	f000 071f 	and.w	r7, r0, #31
   2453e:	f3c0 1c45 	ubfx	ip, r0, #5, #6
     *       5         129     33        1       255
     *       6         259      3        0       255
     */

    lv_color32_t ret;
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   24542:	f240 1507 	movw	r5, #263	; 0x107
   24546:	0ac0      	lsrs	r0, r0, #11
   24548:	fb04 3302 	mla	r3, r4, r2, r3
   2454c:	4368      	muls	r0, r5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   2454e:	f240 1203 	movw	r2, #259	; 0x103
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   24552:	3007      	adds	r0, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   24554:	fb02 f20c 	mul.w	r2, r2, ip
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   24558:	1140      	asrs	r0, r0, #5
   2455a:	2400      	movs	r4, #0
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   2455c:	3203      	adds	r2, #3
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   2455e:	437d      	muls	r5, r7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   24560:	1192      	asrs	r2, r2, #6
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   24562:	f360 4417 	bfi	r4, r0, #16, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   24566:	3507      	adds	r5, #7
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   24568:	f362 240f 	bfi	r4, r2, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   2456c:	116d      	asrs	r5, r5, #5
   2456e:	f365 0407 	bfi	r4, r5, #0, #8
   24572:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    LV_COLOR_SET_A32(ret, 0xFF);
   24576:	f044 447f 	orr.w	r4, r4, #4278190080	; 0xff000000
   2457a:	18ce      	adds	r6, r1, r3
		color = lv_color_mix(color, mix_color, opa);
	}
#endif

	converted_color.full = lv_color_to32(color);
	*buf_xy = converted_color.ch.red;
   2457c:	f3c4 4207 	ubfx	r2, r4, #16, #8
   24580:	54ca      	strb	r2, [r1, r3]
	*(buf_xy + 1) = converted_color.ch.green;
   24582:	f3c4 2307 	ubfx	r3, r4, #8, #8
   24586:	7073      	strb	r3, [r6, #1]
	*(buf_xy + 2) = converted_color.ch.blue;
   24588:	70b4      	strb	r4, [r6, #2]
}
   2458a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002458c <lvgl_flush_cb_32bit>:
#include <lvgl.h>
#include "lvgl_display.h"

void lvgl_flush_cb_32bit(struct _disp_drv_t *disp_drv,
		const lv_area_t *area, lv_color_t *color_p)
{
   2458c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
	uint16_t w = area->x2 - area->x1 + 1;
   2458e:	888b      	ldrh	r3, [r1, #4]
	uint16_t h = area->y2 - area->y1 + 1;
   24590:	88cc      	ldrh	r4, [r1, #6]
	uint16_t w = area->x2 - area->x1 + 1;
   24592:	f9b1 6000 	ldrsh.w	r6, [r1]
	uint16_t h = area->y2 - area->y1 + 1;
   24596:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
	uint16_t w = area->x2 - area->x1 + 1;
   2459a:	3301      	adds	r3, #1
	uint16_t h = area->y2 - area->y1 + 1;
   2459c:	3401      	adds	r4, #1
{
   2459e:	b087      	sub	sp, #28
   245a0:	4605      	mov	r5, r0
	uint16_t w = area->x2 - area->x1 + 1;
   245a2:	1b9b      	subs	r3, r3, r6
	const struct device *display_dev = (const struct device *)disp_drv->user_data;
   245a4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	uint16_t h = area->y2 - area->y1 + 1;
   245a6:	1be4      	subs	r4, r4, r7
	uint16_t w = area->x2 - area->x1 + 1;
   245a8:	b29b      	uxth	r3, r3
	uint16_t h = area->y2 - area->y1 + 1;
   245aa:	b2a4      	uxth	r4, r4
	struct display_buffer_descriptor desc;

	desc.buf_size = w * 4U * h;
   245ac:	fb04 f103 	mul.w	r1, r4, r3
	desc.width = w;
   245b0:	f8ad 3010 	strh.w	r3, [sp, #16]
	desc.pitch = w;
   245b4:	f8ad 3014 	strh.w	r3, [sp, #20]
   245b8:	6883      	ldr	r3, [r0, #8]
   245ba:	9200      	str	r2, [sp, #0]
	desc.buf_size = w * 4U * h;
   245bc:	0089      	lsls	r1, r1, #2
   245be:	9103      	str	r1, [sp, #12]
	desc.height = h;
   245c0:	f8ad 4012 	strh.w	r4, [sp, #18]
   245c4:	b2ba      	uxth	r2, r7
   245c6:	689c      	ldr	r4, [r3, #8]
   245c8:	b2b1      	uxth	r1, r6
   245ca:	ab03      	add	r3, sp, #12
   245cc:	47a0      	blx	r4
	display_write(display_dev, area->x1, area->y1, &desc, (void *) color_p);

	lv_disp_flush_ready(disp_drv);
   245ce:	4628      	mov	r0, r5
   245d0:	f005 fcbf 	bl	29f52 <lv_disp_flush_ready>
}
   245d4:	b007      	add	sp, #28
   245d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000245d8 <lvgl_set_px_cb_32bit>:

#ifndef CONFIG_LVGL_COLOR_DEPTH_32
void lvgl_set_px_cb_32bit(struct _disp_drv_t *disp_drv,
		uint8_t *buf, lv_coord_t buf_w, lv_coord_t x, lv_coord_t y,
		lv_color_t color, lv_opa_t opa)
{
   245d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   245da:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    LV_COLOR_SET_R32(ret, (LV_COLOR_GET_R(color) * 263 + 7) >> 5);
   245de:	f240 1407 	movw	r4, #263	; 0x107
   245e2:	f000 051f 	and.w	r5, r0, #31
   245e6:	f3c0 1745 	ubfx	r7, r0, #5, #6
   245ea:	0ac0      	lsrs	r0, r0, #11
   245ec:	4360      	muls	r0, r4
   245ee:	3007      	adds	r0, #7
   245f0:	1140      	asrs	r0, r0, #5
   245f2:	2600      	movs	r6, #0
   245f4:	f360 4617 	bfi	r6, r0, #16, #8
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   245f8:	f240 1003 	movw	r0, #259	; 0x103
   245fc:	4378      	muls	r0, r7
   245fe:	3003      	adds	r0, #3
   24600:	1180      	asrs	r0, r0, #6
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   24602:	436c      	muls	r4, r5
    LV_COLOR_SET_G32(ret, (LV_COLOR_GET_G(color) * 259 + 3) >> 6);
   24604:	f360 260f 	bfi	r6, r0, #8, #8
    LV_COLOR_SET_B32(ret, (LV_COLOR_GET_B(color) * 263 + 7) >> 5);
   24608:	3407      	adds	r4, #7
	uint32_t *buf_xy = (uint32_t *)(buf + x * 4U + y * 4U * buf_w);
   2460a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
   2460e:	1164      	asrs	r4, r4, #5
   24610:	f364 0607 	bfi	r6, r4, #0, #8
   24614:	fb00 3202 	mla	r2, r0, r2, r3
    LV_COLOR_SET_A32(ret, 0xFF);
   24618:	f046 467f 	orr.w	r6, r6, #4278190080	; 0xff000000
	*buf_xy = lv_color_to32(color);
   2461c:	f841 6022 	str.w	r6, [r1, r2, lsl #2]
}
   24620:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024622 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   24622:	f7f4 bdc9 	b.w	191b8 <SystemInit>

00024626 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   24626:	b082      	sub	sp, #8
   24628:	ab02      	add	r3, sp, #8
   2462a:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   2462e:	f89d 3000 	ldrb.w	r3, [sp]
   24632:	2b06      	cmp	r3, #6
   24634:	d108      	bne.n	24648 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   24636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2463a:	2201      	movs	r2, #1
   2463c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24640:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   24644:	bf20      	wfe
    while (true)
   24646:	e7fd      	b.n	24644 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   24648:	b002      	add	sp, #8
   2464a:	4770      	bx	lr

0002464c <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2464c:	b082      	sub	sp, #8
   2464e:	ab02      	add	r3, sp, #8
   24650:	e903 0003 	stmdb	r3, {r0, r1}
   24654:	2300      	movs	r3, #0
   24656:	f383 8811 	msr	BASEPRI, r3
   2465a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2465e:	b002      	add	sp, #8
   24660:	4770      	bx	lr

00024662 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24662:	b530      	push	{r4, r5, lr}
   24664:	b085      	sub	sp, #20
   24666:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24668:	880a      	ldrh	r2, [r1, #0]
   2466a:	788b      	ldrb	r3, [r1, #2]
   2466c:	f8ad 2000 	strh.w	r2, [sp]
{
   24670:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   24672:	220d      	movs	r2, #13
   24674:	2100      	movs	r1, #0
   24676:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   2467a:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   2467e:	f007 f88d 	bl	2b79c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24682:	466a      	mov	r2, sp
   24684:	4669      	mov	r1, sp
   24686:	4628      	mov	r0, r5
   24688:	f7e9 fdba 	bl	e200 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2468c:	b928      	cbnz	r0, 2469a <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2468e:	f8bd 2000 	ldrh.w	r2, [sp]
   24692:	f89d 3002 	ldrb.w	r3, [sp, #2]
   24696:	8022      	strh	r2, [r4, #0]
   24698:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   2469a:	b005      	add	sp, #20
   2469c:	bd30      	pop	{r4, r5, pc}

0002469e <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   2469e:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   246a0:	1cce      	adds	r6, r1, #3
{
   246a2:	4605      	mov	r5, r0
   246a4:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   246a6:	4630      	mov	r0, r6
   246a8:	2103      	movs	r1, #3
   246aa:	f7e9 fda7 	bl	e1fc <bt_rand>
	if (err) {
   246ae:	b960      	cbnz	r0, 246ca <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   246b0:	7963      	ldrb	r3, [r4, #5]
   246b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   246b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   246ba:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   246bc:	4622      	mov	r2, r4
   246be:	4631      	mov	r1, r6
   246c0:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   246c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   246c6:	f7ff bfcc 	b.w	24662 <ah>
}
   246ca:	bd70      	pop	{r4, r5, r6, pc}

000246cc <bt_settings_decode_key>:
{
   246cc:	b570      	push	{r4, r5, r6, lr}
   246ce:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   246d0:	2100      	movs	r1, #0
{
   246d2:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   246d4:	f7ff fa92 	bl	23bfc <settings_name_next>
   246d8:	280d      	cmp	r0, #13
   246da:	d118      	bne.n	2470e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   246dc:	7b23      	ldrb	r3, [r4, #12]
   246de:	2b30      	cmp	r3, #48	; 0x30
   246e0:	d111      	bne.n	24706 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   246e2:	2300      	movs	r3, #0
   246e4:	702b      	strb	r3, [r5, #0]
   246e6:	f104 060c 	add.w	r6, r4, #12
   246ea:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   246ec:	462a      	mov	r2, r5
   246ee:	4620      	mov	r0, r4
   246f0:	2301      	movs	r3, #1
   246f2:	2102      	movs	r1, #2
   246f4:	3402      	adds	r4, #2
   246f6:	f7fe fade 	bl	22cb6 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   246fa:	42b4      	cmp	r4, r6
   246fc:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   24700:	d1f4      	bne.n	246ec <bt_settings_decode_key+0x20>
	return 0;
   24702:	2000      	movs	r0, #0
}
   24704:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   24706:	2b31      	cmp	r3, #49	; 0x31
   24708:	d101      	bne.n	2470e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2470a:	2301      	movs	r3, #1
   2470c:	e7ea      	b.n	246e4 <bt_settings_decode_key+0x18>
		return -EINVAL;
   2470e:	f06f 0015 	mvn.w	r0, #21
   24712:	e7f7      	b.n	24704 <bt_settings_decode_key+0x38>

00024714 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24714:	b510      	push	{r4, lr}
   24716:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24718:	7801      	ldrb	r1, [r0, #0]
   2471a:	7822      	ldrb	r2, [r4, #0]
   2471c:	428a      	cmp	r2, r1
{
   2471e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24720:	d00e      	beq.n	24740 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   24722:	4669      	mov	r1, sp
   24724:	f7e0 fdd8 	bl	52d8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24728:	a905      	add	r1, sp, #20
   2472a:	4620      	mov	r0, r4
   2472c:	f7e0 fdd4 	bl	52d8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24730:	2210      	movs	r2, #16
   24732:	f10d 0115 	add.w	r1, sp, #21
   24736:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2473a:	f007 f800 	bl	2b73e <memcmp>
   2473e:	e007      	b.n	24750 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   24740:	2a01      	cmp	r2, #1
   24742:	d007      	beq.n	24754 <bt_uuid_cmp+0x40>
   24744:	2a02      	cmp	r2, #2
   24746:	d008      	beq.n	2475a <bt_uuid_cmp+0x46>
   24748:	b95a      	cbnz	r2, 24762 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2474a:	8840      	ldrh	r0, [r0, #2]
   2474c:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2474e:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   24750:	b00a      	add	sp, #40	; 0x28
   24752:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24754:	6840      	ldr	r0, [r0, #4]
   24756:	6863      	ldr	r3, [r4, #4]
   24758:	e7f9      	b.n	2474e <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2475a:	2210      	movs	r2, #16
   2475c:	1c61      	adds	r1, r4, #1
   2475e:	3001      	adds	r0, #1
   24760:	e7eb      	b.n	2473a <bt_uuid_cmp+0x26>
	switch (u1->type) {
   24762:	f06f 0015 	mvn.w	r0, #21
   24766:	e7f3      	b.n	24750 <bt_uuid_cmp+0x3c>

00024768 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24768:	2a04      	cmp	r2, #4
{
   2476a:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   2476c:	d00d      	beq.n	2478a <bt_uuid_create+0x22>
   2476e:	2a10      	cmp	r2, #16
   24770:	d019      	beq.n	247a6 <bt_uuid_create+0x3e>
   24772:	2a02      	cmp	r2, #2
   24774:	f04f 0300 	mov.w	r3, #0
   24778:	d121      	bne.n	247be <bt_uuid_create+0x56>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   2477a:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   2477c:	784a      	ldrb	r2, [r1, #1]
   2477e:	780b      	ldrb	r3, [r1, #0]
   24780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   24784:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   24786:	2001      	movs	r0, #1
}
   24788:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2478a:	2301      	movs	r3, #1
   2478c:	7003      	strb	r3, [r0, #0]
   2478e:	788a      	ldrb	r2, [r1, #2]
   24790:	78cc      	ldrb	r4, [r1, #3]
   24792:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24794:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   24798:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2479a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2479e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   247a2:	6042      	str	r2, [r0, #4]
		break;
   247a4:	e7ef      	b.n	24786 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   247a6:	2302      	movs	r3, #2
   247a8:	f800 3b01 	strb.w	r3, [r0], #1
   247ac:	f101 0310 	add.w	r3, r1, #16
   247b0:	f851 2b04 	ldr.w	r2, [r1], #4
   247b4:	f840 2b04 	str.w	r2, [r0], #4
   247b8:	4299      	cmp	r1, r3
   247ba:	d1f9      	bne.n	247b0 <bt_uuid_create+0x48>
   247bc:	e7e3      	b.n	24786 <bt_uuid_create+0x1e>
	switch (data_len) {
   247be:	4618      	mov	r0, r3
   247c0:	e7e2      	b.n	24788 <bt_uuid_create+0x20>

000247c2 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   247c2:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   247c4:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   247c6:	2106      	movs	r1, #6
{
   247c8:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   247ca:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   247ce:	f7e9 fd15 	bl	e1fc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   247d2:	b918      	cbnz	r0, 247dc <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   247d4:	79a3      	ldrb	r3, [r4, #6]
   247d6:	f063 033f 	orn	r3, r3, #63	; 0x3f
   247da:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   247dc:	bd10      	pop	{r4, pc}

000247de <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   247de:	280f      	cmp	r0, #15
   247e0:	d806      	bhi.n	247f0 <bt_hci_evt_get_flags+0x12>
   247e2:	280d      	cmp	r0, #13
   247e4:	d80b      	bhi.n	247fe <bt_hci_evt_get_flags+0x20>
   247e6:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   247e8:	bf14      	ite	ne
   247ea:	2002      	movne	r0, #2
   247ec:	2003      	moveq	r0, #3
   247ee:	4770      	bx	lr
	switch (evt) {
   247f0:	2813      	cmp	r0, #19
   247f2:	d004      	beq.n	247fe <bt_hci_evt_get_flags+0x20>
   247f4:	281a      	cmp	r0, #26
   247f6:	bf14      	ite	ne
   247f8:	2002      	movne	r0, #2
   247fa:	2001      	moveq	r0, #1
   247fc:	4770      	bx	lr
   247fe:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24800:	4770      	bx	lr

00024802 <get_adv_channel_map>:
{
   24802:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24804:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   24808:	bf0c      	ite	eq
   2480a:	2007      	moveq	r0, #7
   2480c:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2480e:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24810:	bf48      	it	mi
   24812:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   24816:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   24818:	bf48      	it	mi
   2481a:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2481e:	4770      	bx	lr

00024820 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24820:	f3bf 8f5b 	dmb	ish
   24824:	6800      	ldr	r0, [r0, #0]
   24826:	f3bf 8f5b 	dmb	ish
}
   2482a:	4770      	bx	lr

0002482c <atomic_or>:
{
   2482c:	4603      	mov	r3, r0
}
   2482e:	f3bf 8f5b 	dmb	ish
   24832:	e853 0f00 	ldrex	r0, [r3]
   24836:	ea40 0201 	orr.w	r2, r0, r1
   2483a:	e843 2c00 	strex	ip, r2, [r3]
   2483e:	f1bc 0f00 	cmp.w	ip, #0
   24842:	d1f6      	bne.n	24832 <atomic_or+0x6>
   24844:	f3bf 8f5b 	dmb	ish
   24848:	4770      	bx	lr

0002484a <atomic_and>:
{
   2484a:	4603      	mov	r3, r0
}
   2484c:	f3bf 8f5b 	dmb	ish
   24850:	e853 0f00 	ldrex	r0, [r3]
   24854:	ea00 0201 	and.w	r2, r0, r1
   24858:	e843 2c00 	strex	ip, r2, [r3]
   2485c:	f1bc 0f00 	cmp.w	ip, #0
   24860:	d1f6      	bne.n	24850 <atomic_and+0x6>
   24862:	f3bf 8f5b 	dmb	ish
   24866:	4770      	bx	lr

00024868 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   24868:	460b      	mov	r3, r1
   2486a:	b410      	push	{r4}
   2486c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2486e:	f001 041f 	and.w	r4, r1, #31
   24872:	2101      	movs	r1, #1
   24874:	40a1      	lsls	r1, r4

	if (val) {
   24876:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2487a:	b112      	cbz	r2, 24882 <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   2487c:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2487e:	f7ff bfd5 	b.w	2482c <atomic_or>
}
   24882:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24884:	43c9      	mvns	r1, r1
   24886:	f7ff bfe0 	b.w	2484a <atomic_and>

0002488a <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   2488a:	2207      	movs	r2, #7
   2488c:	f006 bf57 	b.w	2b73e <memcmp>

00024890 <bt_addr_copy>:
   24890:	680b      	ldr	r3, [r1, #0]
   24892:	6003      	str	r3, [r0, #0]
   24894:	888b      	ldrh	r3, [r1, #4]
   24896:	8083      	strh	r3, [r0, #4]
}
   24898:	4770      	bx	lr

0002489a <bt_addr_le_copy>:
   2489a:	680b      	ldr	r3, [r1, #0]
   2489c:	6003      	str	r3, [r0, #0]
   2489e:	888b      	ldrh	r3, [r1, #4]
   248a0:	8083      	strh	r3, [r0, #4]
   248a2:	798b      	ldrb	r3, [r1, #6]
   248a4:	7183      	strb	r3, [r0, #6]
}
   248a6:	4770      	bx	lr

000248a8 <bt_hci_disconnect>:
{
   248a8:	b570      	push	{r4, r5, r6, lr}
   248aa:	4606      	mov	r6, r0
   248ac:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   248ae:	f240 4006 	movw	r0, #1030	; 0x406
   248b2:	2103      	movs	r1, #3
   248b4:	f7e1 f93c 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
   248b8:	4604      	mov	r4, r0
   248ba:	b168      	cbz	r0, 248d8 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   248bc:	2103      	movs	r1, #3
   248be:	3008      	adds	r0, #8
   248c0:	f001 fac2 	bl	25e48 <net_buf_simple_add>
	disconn->reason = reason;
   248c4:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   248c6:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   248c8:	4621      	mov	r1, r4
   248ca:	2200      	movs	r2, #0
}
   248cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   248d0:	f240 4006 	movw	r0, #1030	; 0x406
   248d4:	f7e1 b964 	b.w	5ba0 <bt_hci_cmd_send_sync>
}
   248d8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   248dc:	bd70      	pop	{r4, r5, r6, pc}

000248de <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   248de:	8802      	ldrh	r2, [r0, #0]
   248e0:	8843      	ldrh	r3, [r0, #2]
   248e2:	429a      	cmp	r2, r3
{
   248e4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   248e6:	d818      	bhi.n	2491a <bt_le_conn_params_valid+0x3c>
   248e8:	2a05      	cmp	r2, #5
   248ea:	d916      	bls.n	2491a <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   248ec:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   248f0:	d813      	bhi.n	2491a <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   248f2:	8884      	ldrh	r4, [r0, #4]
   248f4:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   248f8:	d20f      	bcs.n	2491a <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   248fa:	88c1      	ldrh	r1, [r0, #6]
   248fc:	f1a1 020a 	sub.w	r2, r1, #10
   24900:	b292      	uxth	r2, r2
   24902:	f640 4076 	movw	r0, #3190	; 0xc76
   24906:	4282      	cmp	r2, r0
   24908:	d807      	bhi.n	2491a <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2490a:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2490e:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   24912:	bf34      	ite	cc
   24914:	2001      	movcc	r0, #1
   24916:	2000      	movcs	r0, #0
}
   24918:	bd10      	pop	{r4, pc}
		return false;
   2491a:	2000      	movs	r0, #0
   2491c:	e7fc      	b.n	24918 <bt_le_conn_params_valid+0x3a>

0002491e <bt_le_set_data_len>:
{
   2491e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24920:	4607      	mov	r7, r0
   24922:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24924:	f242 0022 	movw	r0, #8226	; 0x2022
   24928:	2106      	movs	r1, #6
{
   2492a:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2492c:	f7e1 f900 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
   24930:	4604      	mov	r4, r0
   24932:	b170      	cbz	r0, 24952 <bt_le_set_data_len+0x34>
   24934:	2106      	movs	r1, #6
   24936:	3008      	adds	r0, #8
   24938:	f001 fa86 	bl	25e48 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2493c:	883b      	ldrh	r3, [r7, #0]
   2493e:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24940:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24942:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24944:	4621      	mov	r1, r4
   24946:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2494a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2494e:	f7e1 bb6d 	b.w	602c <bt_hci_cmd_send>
}
   24952:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024958 <bt_le_set_phy>:
{
   24958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2495c:	4680      	mov	r8, r0
   2495e:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24960:	f242 0032 	movw	r0, #8242	; 0x2032
   24964:	2107      	movs	r1, #7
{
   24966:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2496a:	4616      	mov	r6, r2
   2496c:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2496e:	f7e1 f8df 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
   24972:	4604      	mov	r4, r0
   24974:	b190      	cbz	r0, 2499c <bt_le_set_phy+0x44>
   24976:	2107      	movs	r1, #7
   24978:	3008      	adds	r0, #8
   2497a:	f001 fa65 	bl	25e48 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2497e:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   24982:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24984:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24986:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   24988:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2498a:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2498e:	4621      	mov	r1, r4
   24990:	f242 0032 	movw	r0, #8242	; 0x2032
}
   24994:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24998:	f7e1 bb48 	b.w	602c <bt_hci_cmd_send>
}
   2499c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   249a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000249a4 <bt_addr_le_is_bonded>:
}
   249a4:	2000      	movs	r0, #0
   249a6:	4770      	bx	lr

000249a8 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   249a8:	6880      	ldr	r0, [r0, #8]
   249aa:	f7e2 bc8d 	b.w	72c8 <enh_conn_complete>

000249ae <le_legacy_conn_complete>:
{
   249ae:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   249b0:	6881      	ldr	r1, [r0, #8]
{
   249b2:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   249b4:	780b      	ldrb	r3, [r1, #0]
   249b6:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   249ba:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   249be:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   249c2:	78cb      	ldrb	r3, [r1, #3]
   249c4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   249c8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   249cc:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   249d0:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   249d4:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   249d8:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   249dc:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   249e0:	7c4b      	ldrb	r3, [r1, #17]
   249e2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   249e6:	a803      	add	r0, sp, #12
   249e8:	3104      	adds	r1, #4
   249ea:	f7ff ff56 	bl	2489a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   249ee:	2200      	movs	r2, #0
   249f0:	4669      	mov	r1, sp
   249f2:	f10d 0013 	add.w	r0, sp, #19
   249f6:	9200      	str	r2, [sp, #0]
   249f8:	f8ad 2004 	strh.w	r2, [sp, #4]
   249fc:	f7ff ff48 	bl	24890 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   24a00:	4669      	mov	r1, sp
   24a02:	f10d 0019 	add.w	r0, sp, #25
   24a06:	9200      	str	r2, [sp, #0]
   24a08:	f8ad 2004 	strh.w	r2, [sp, #4]
   24a0c:	f7ff ff40 	bl	24890 <bt_addr_copy>
	enh_conn_complete(&enh);
   24a10:	a802      	add	r0, sp, #8
   24a12:	f7e2 fc59 	bl	72c8 <enh_conn_complete>
}
   24a16:	b00b      	add	sp, #44	; 0x2c
   24a18:	f85d fb04 	ldr.w	pc, [sp], #4

00024a1c <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   24a1c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   24a22:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24a28:	2100      	movs	r1, #0
{
   24a2a:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24a2c:	f7e0 fcce 	bl	53cc <bt_buf_get_evt>
   24a30:	2102      	movs	r1, #2
   24a32:	4604      	mov	r4, r0
   24a34:	3008      	adds	r0, #8
   24a36:	f001 fa07 	bl	25e48 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   24a3a:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   24a3c:	7045      	strb	r5, [r0, #1]

	return buf;
}
   24a3e:	4620      	mov	r0, r4
   24a40:	bd70      	pop	{r4, r5, r6, pc}

00024a42 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24a42:	3103      	adds	r1, #3
{
   24a44:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24a46:	b2c9      	uxtb	r1, r1
{
   24a48:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24a4a:	200e      	movs	r0, #14
   24a4c:	f7ff ffe6 	bl	24a1c <bt_hci_evt_create>
   24a50:	2103      	movs	r1, #3
   24a52:	4604      	mov	r4, r0
   24a54:	3008      	adds	r0, #8
   24a56:	f001 f9f7 	bl	25e48 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   24a5a:	2301      	movs	r3, #1
   24a5c:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   24a5e:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   24a62:	4620      	mov	r0, r4
   24a64:	bd38      	pop	{r3, r4, r5, pc}

00024a66 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   24a66:	b570      	push	{r4, r5, r6, lr}
   24a68:	4605      	mov	r5, r0
   24a6a:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   24a6c:	200f      	movs	r0, #15
   24a6e:	2104      	movs	r1, #4
   24a70:	f7ff ffd4 	bl	24a1c <bt_hci_evt_create>
   24a74:	2104      	movs	r1, #4
   24a76:	4604      	mov	r4, r0
   24a78:	3008      	adds	r0, #8
   24a7a:	f001 f9e5 	bl	25e48 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   24a7e:	2201      	movs	r2, #1
	cs->status = status;
   24a80:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24a82:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   24a84:	8045      	strh	r5, [r0, #2]

	return buf;
}
   24a86:	4620      	mov	r0, r4
   24a88:	bd70      	pop	{r4, r5, r6, pc}

00024a8a <tx_notify>:
{
   24a8a:	b570      	push	{r4, r5, r6, lr}
   24a8c:	4604      	mov	r4, r0
	__asm__ volatile(
   24a8e:	f04f 0220 	mov.w	r2, #32
   24a92:	f3ef 8311 	mrs	r3, BASEPRI
   24a96:	f382 8811 	msr	BASEPRI, r2
   24a9a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   24a9e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   24aa0:	b920      	cbnz	r0, 24aac <tx_notify+0x22>
	__asm__ volatile(
   24aa2:	f383 8811 	msr	BASEPRI, r3
   24aa6:	f3bf 8f6f 	isb	sy
}
   24aaa:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24aac:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24aae:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24ab0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24ab2:	4288      	cmp	r0, r1
	list->tail = node;
   24ab4:	bf08      	it	eq
   24ab6:	6262      	streq	r2, [r4, #36]	; 0x24
   24ab8:	f383 8811 	msr	BASEPRI, r3
   24abc:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   24ac0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   24ac4:	f7e2 fcc6 	bl	7454 <tx_free>
		cb(conn, user_data);
   24ac8:	4631      	mov	r1, r6
   24aca:	4620      	mov	r0, r4
   24acc:	47a8      	blx	r5
	while (1) {
   24ace:	e7de      	b.n	24a8e <tx_notify+0x4>

00024ad0 <tx_complete_work>:
	tx_notify(conn);
   24ad0:	3828      	subs	r0, #40	; 0x28
   24ad2:	f7ff bfda 	b.w	24a8a <tx_notify>

00024ad6 <bt_conn_new>:
{
   24ad6:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < size; i++) {
   24ad8:	2200      	movs	r2, #0
   24ada:	4603      	mov	r3, r0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24adc:	2401      	movs	r4, #1
   24ade:	428a      	cmp	r2, r1
   24ae0:	d102      	bne.n	24ae8 <bt_conn_new+0x12>
		return NULL;
   24ae2:	2300      	movs	r3, #0
}
   24ae4:	4618      	mov	r0, r3
   24ae6:	bd38      	pop	{r3, r4, r5, pc}
   24ae8:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
   24aec:	f3bf 8f5b 	dmb	ish
   24af0:	e850 5f00 	ldrex	r5, [r0]
   24af4:	2d00      	cmp	r5, #0
   24af6:	d104      	bne.n	24b02 <bt_conn_new+0x2c>
   24af8:	e840 4c00 	strex	ip, r4, [r0]
   24afc:	f1bc 0f00 	cmp.w	ip, #0
   24b00:	d1f6      	bne.n	24af0 <bt_conn_new+0x1a>
   24b02:	f3bf 8f5b 	dmb	ish
   24b06:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   24b0a:	d002      	beq.n	24b12 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   24b0c:	3201      	adds	r2, #1
   24b0e:	4603      	mov	r3, r0
   24b10:	e7e5      	b.n	24ade <bt_conn_new+0x8>
	if (!conn) {
   24b12:	2b00      	cmp	r3, #0
   24b14:	d0e6      	beq.n	24ae4 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   24b16:	4618      	mov	r0, r3
   24b18:	22b8      	movs	r2, #184	; 0xb8
   24b1a:	2100      	movs	r1, #0
   24b1c:	f006 fe3e 	bl	2b79c <memset>
   24b20:	4603      	mov	r3, r0
   24b22:	e7df      	b.n	24ae4 <bt_conn_new+0xe>

00024b24 <bt_conn_get_security>:
}
   24b24:	2001      	movs	r0, #1
   24b26:	4770      	bx	lr

00024b28 <bt_conn_reset_rx_state>:
{
   24b28:	b510      	push	{r4, lr}
   24b2a:	4604      	mov	r4, r0
	if (!conn->rx) {
   24b2c:	6900      	ldr	r0, [r0, #16]
   24b2e:	b118      	cbz	r0, 24b38 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24b30:	f7f3 fc4c 	bl	183cc <net_buf_unref>
	conn->rx = NULL;
   24b34:	2300      	movs	r3, #0
   24b36:	6123      	str	r3, [r4, #16]
}
   24b38:	bd10      	pop	{r4, pc}

00024b3a <bt_conn_is_peer_addr_le>:
{
   24b3a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24b3c:	7a03      	ldrb	r3, [r0, #8]
   24b3e:	428b      	cmp	r3, r1
{
   24b40:	4604      	mov	r4, r0
   24b42:	4615      	mov	r5, r2
	if (id != conn->id) {
   24b44:	d115      	bne.n	24b72 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24b46:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24b4a:	2207      	movs	r2, #7
   24b4c:	4628      	mov	r0, r5
   24b4e:	f006 fdf6 	bl	2b73e <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   24b52:	b180      	cbz	r0, 24b76 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   24b54:	78e3      	ldrb	r3, [r4, #3]
   24b56:	2207      	movs	r2, #7
   24b58:	b943      	cbnz	r3, 24b6c <bt_conn_is_peer_addr_le+0x32>
   24b5a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24b5e:	4628      	mov	r0, r5
   24b60:	f006 fded 	bl	2b73e <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   24b64:	fab0 f080 	clz	r0, r0
   24b68:	0940      	lsrs	r0, r0, #5
}
   24b6a:	bd38      	pop	{r3, r4, r5, pc}
   24b6c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   24b70:	e7f5      	b.n	24b5e <bt_conn_is_peer_addr_le+0x24>
		return false;
   24b72:	2000      	movs	r0, #0
   24b74:	e7f9      	b.n	24b6a <bt_conn_is_peer_addr_le+0x30>
		return true;
   24b76:	2001      	movs	r0, #1
   24b78:	e7f7      	b.n	24b6a <bt_conn_is_peer_addr_le+0x30>

00024b7a <bt_conn_ref>:
{
   24b7a:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   24b7c:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24b80:	f3bf 8f5b 	dmb	ish
   24b84:	6813      	ldr	r3, [r2, #0]
   24b86:	f3bf 8f5b 	dmb	ish
		if (!old) {
   24b8a:	b17b      	cbz	r3, 24bac <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24b8c:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24b90:	1c59      	adds	r1, r3, #1
   24b92:	e852 4f00 	ldrex	r4, [r2]
   24b96:	429c      	cmp	r4, r3
   24b98:	d104      	bne.n	24ba4 <bt_conn_ref+0x2a>
   24b9a:	e842 1c00 	strex	ip, r1, [r2]
   24b9e:	f1bc 0f00 	cmp.w	ip, #0
   24ba2:	d1f6      	bne.n	24b92 <bt_conn_ref+0x18>
   24ba4:	f3bf 8f5b 	dmb	ish
   24ba8:	d1ea      	bne.n	24b80 <bt_conn_ref+0x6>
}
   24baa:	bd10      	pop	{r4, pc}
			return NULL;
   24bac:	4618      	mov	r0, r3
   24bae:	e7fc      	b.n	24baa <bt_conn_ref+0x30>

00024bb0 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   24bb0:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24bb4:	f3bf 8f5b 	dmb	ish
   24bb8:	e853 2f00 	ldrex	r2, [r3]
   24bbc:	3a01      	subs	r2, #1
   24bbe:	e843 2100 	strex	r1, r2, [r3]
   24bc2:	2900      	cmp	r1, #0
   24bc4:	d1f8      	bne.n	24bb8 <bt_conn_unref+0x8>
   24bc6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24bca:	f3bf 8f5b 	dmb	ish
   24bce:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24bd2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24bd6:	b90b      	cbnz	r3, 24bdc <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   24bd8:	f7e2 bb40 	b.w	725c <bt_le_adv_resume>
}
   24bdc:	4770      	bx	lr

00024bde <conn_lookup_handle>:
{
   24bde:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24be2:	4607      	mov	r7, r0
   24be4:	460e      	mov	r6, r1
   24be6:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24be8:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24bea:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   24bee:	42b4      	cmp	r4, r6
   24bf0:	d103      	bne.n	24bfa <conn_lookup_handle+0x1c>
	return NULL;
   24bf2:	2300      	movs	r3, #0
}
   24bf4:	4618      	mov	r0, r3
   24bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24bfa:	fb09 7004 	mla	r0, r9, r4, r7
   24bfe:	f7ff ffbc 	bl	24b7a <bt_conn_ref>
   24c02:	4603      	mov	r3, r0
		if (!conn) {
   24c04:	b158      	cbz	r0, 24c1e <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24c06:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24c08:	2d01      	cmp	r5, #1
   24c0a:	d002      	beq.n	24c12 <conn_lookup_handle+0x34>
   24c0c:	3d07      	subs	r5, #7
   24c0e:	2d01      	cmp	r5, #1
   24c10:	d803      	bhi.n	24c1a <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24c12:	881a      	ldrh	r2, [r3, #0]
   24c14:	4542      	cmp	r2, r8
   24c16:	d0ed      	beq.n	24bf4 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24c18:	4618      	mov	r0, r3
   24c1a:	f7ff ffc9 	bl	24bb0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24c1e:	3401      	adds	r4, #1
   24c20:	e7e5      	b.n	24bee <conn_lookup_handle+0x10>

00024c22 <bt_conn_le_conn_update>:
{
   24c22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c24:	4607      	mov	r7, r0
   24c26:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24c28:	f242 0013 	movw	r0, #8211	; 0x2013
   24c2c:	210e      	movs	r1, #14
   24c2e:	f7e0 ff7f 	bl	5b30 <bt_hci_cmd_create>
	if (!buf) {
   24c32:	4606      	mov	r6, r0
   24c34:	b1d0      	cbz	r0, 24c6c <bt_conn_le_conn_update+0x4a>
   24c36:	210e      	movs	r1, #14
   24c38:	3008      	adds	r0, #8
   24c3a:	f001 f905 	bl	25e48 <net_buf_simple_add>
   24c3e:	220e      	movs	r2, #14
   24c40:	4604      	mov	r4, r0
   24c42:	2100      	movs	r1, #0
   24c44:	f006 fdaa 	bl	2b79c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24c48:	883b      	ldrh	r3, [r7, #0]
   24c4a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24c4c:	882b      	ldrh	r3, [r5, #0]
   24c4e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24c50:	886b      	ldrh	r3, [r5, #2]
   24c52:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24c54:	88ab      	ldrh	r3, [r5, #4]
   24c56:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24c58:	88eb      	ldrh	r3, [r5, #6]
   24c5a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24c5c:	4631      	mov	r1, r6
   24c5e:	2200      	movs	r2, #0
}
   24c60:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24c64:	f242 0013 	movw	r0, #8211	; 0x2013
   24c68:	f7e0 bf9a 	b.w	5ba0 <bt_hci_cmd_send_sync>
}
   24c6c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   24c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024c72 <l2cap_connected>:
}
   24c72:	4770      	bx	lr

00024c74 <l2cap_disconnected>:
   24c74:	4770      	bx	lr

00024c76 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24c76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24c78:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24c7a:	b17b      	cbz	r3, 24c9c <bt_l2cap_chan_remove+0x26>
   24c7c:	3b08      	subs	r3, #8
   24c7e:	2200      	movs	r2, #0
   24c80:	b163      	cbz	r3, 24c9c <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24c82:	428b      	cmp	r3, r1
   24c84:	f103 0408 	add.w	r4, r3, #8
   24c88:	d10f      	bne.n	24caa <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   24c8a:	688b      	ldr	r3, [r1, #8]
   24c8c:	b93a      	cbnz	r2, 24c9e <bt_l2cap_chan_remove+0x28>
   24c8e:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   24c90:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   24c92:	4294      	cmp	r4, r2
   24c94:	d100      	bne.n	24c98 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24c96:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   24c98:	2300      	movs	r3, #0
   24c9a:	608b      	str	r3, [r1, #8]
}
   24c9c:	bd10      	pop	{r4, pc}
   24c9e:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24ca0:	6d03      	ldr	r3, [r0, #80]	; 0x50
   24ca2:	429c      	cmp	r4, r3
	list->tail = node;
   24ca4:	bf08      	it	eq
   24ca6:	6502      	streq	r2, [r0, #80]	; 0x50
}
   24ca8:	e7f6      	b.n	24c98 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24caa:	2c00      	cmp	r4, #0
   24cac:	d0f6      	beq.n	24c9c <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24cae:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24cb0:	2b00      	cmp	r3, #0
   24cb2:	d0f3      	beq.n	24c9c <bt_l2cap_chan_remove+0x26>
   24cb4:	3b08      	subs	r3, #8
   24cb6:	4622      	mov	r2, r4
   24cb8:	e7e2      	b.n	24c80 <bt_l2cap_chan_remove+0xa>

00024cba <bt_l2cap_chan_del>:
{
   24cba:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24cbc:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   24cc0:	4604      	mov	r4, r0
	if (!chan->conn) {
   24cc2:	b123      	cbz	r3, 24cce <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24cc4:	686b      	ldr	r3, [r5, #4]
   24cc6:	b103      	cbz	r3, 24cca <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24cc8:	4798      	blx	r3
	chan->conn = NULL;
   24cca:	2300      	movs	r3, #0
   24ccc:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24cce:	68e3      	ldr	r3, [r4, #12]
   24cd0:	b10b      	cbz	r3, 24cd6 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24cd2:	4620      	mov	r0, r4
   24cd4:	4798      	blx	r3
	if (ops->released) {
   24cd6:	69eb      	ldr	r3, [r5, #28]
   24cd8:	b11b      	cbz	r3, 24ce2 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24cda:	4620      	mov	r0, r4
}
   24cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   24ce0:	4718      	bx	r3
}
   24ce2:	bd70      	pop	{r4, r5, r6, pc}

00024ce4 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24ce4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24ce6:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24ce8:	b18b      	cbz	r3, 24d0e <bt_l2cap_disconnected+0x2a>
   24cea:	f1b3 0008 	subs.w	r0, r3, #8
   24cee:	d00e      	beq.n	24d0e <bt_l2cap_disconnected+0x2a>
   24cf0:	681c      	ldr	r4, [r3, #0]
   24cf2:	b104      	cbz	r4, 24cf6 <bt_l2cap_disconnected+0x12>
   24cf4:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   24cf6:	f7ff ffe0 	bl	24cba <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24cfa:	b144      	cbz	r4, 24d0e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24cfc:	f114 0308 	adds.w	r3, r4, #8
   24d00:	d002      	beq.n	24d08 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24d02:	68a3      	ldr	r3, [r4, #8]
   24d04:	b103      	cbz	r3, 24d08 <bt_l2cap_disconnected+0x24>
   24d06:	3b08      	subs	r3, #8
{
   24d08:	4620      	mov	r0, r4
   24d0a:	461c      	mov	r4, r3
   24d0c:	e7f3      	b.n	24cf6 <bt_l2cap_disconnected+0x12>
}
   24d0e:	bd10      	pop	{r4, pc}

00024d10 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   24d10:	3104      	adds	r1, #4
   24d12:	f7e3 b839 	b.w	7d88 <bt_conn_create_pdu_timeout>

00024d16 <bt_l2cap_send_cb>:
{
   24d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d1a:	4614      	mov	r4, r2
   24d1c:	4605      	mov	r5, r0
   24d1e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   24d20:	f102 0008 	add.w	r0, r2, #8
   24d24:	2104      	movs	r1, #4
   24d26:	461e      	mov	r6, r3
   24d28:	f8dd 8018 	ldr.w	r8, [sp, #24]
   24d2c:	f001 f8ae 	bl	25e8c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24d30:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   24d32:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24d34:	3a04      	subs	r2, #4
   24d36:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24d38:	4643      	mov	r3, r8
   24d3a:	4632      	mov	r2, r6
   24d3c:	4621      	mov	r1, r4
   24d3e:	4628      	mov	r0, r5
}
   24d40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24d44:	f7e2 bd52 	b.w	77ec <bt_conn_send_cb>

00024d48 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24d48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   24d4a:	b160      	cbz	r0, 24d66 <bt_l2cap_le_lookup_tx_cid+0x1e>
   24d4c:	3808      	subs	r0, #8
   24d4e:	b900      	cbnz	r0, 24d52 <bt_l2cap_le_lookup_tx_cid+0xa>
   24d50:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24d52:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   24d56:	428b      	cmp	r3, r1
   24d58:	d005      	beq.n	24d66 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d5a:	f110 0308 	adds.w	r3, r0, #8
   24d5e:	d001      	beq.n	24d64 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24d60:	6880      	ldr	r0, [r0, #8]
   24d62:	e7f2      	b.n	24d4a <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   24d64:	4618      	mov	r0, r3
}
   24d66:	4770      	bx	lr

00024d68 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24d68:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   24d6a:	b160      	cbz	r0, 24d86 <bt_l2cap_le_lookup_rx_cid+0x1e>
   24d6c:	3808      	subs	r0, #8
   24d6e:	b900      	cbnz	r0, 24d72 <bt_l2cap_le_lookup_rx_cid+0xa>
   24d70:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24d72:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   24d76:	428b      	cmp	r3, r1
   24d78:	d005      	beq.n	24d86 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d7a:	f110 0308 	adds.w	r3, r0, #8
   24d7e:	d001      	beq.n	24d84 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24d80:	6880      	ldr	r0, [r0, #8]
   24d82:	e7f2      	b.n	24d6a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   24d84:	4618      	mov	r0, r3
}
   24d86:	4770      	bx	lr

00024d88 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   24d88:	4770      	bx	lr

00024d8a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   24d8a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   24d8c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24d8e:	b128      	cbz	r0, 24d9c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24d90:	6859      	ldr	r1, [r3, #4]
   24d92:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24d94:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24d96:	4288      	cmp	r0, r1
	list->tail = node;
   24d98:	bf08      	it	eq
   24d9a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24d9c:	4770      	bx	lr

00024d9e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24d9e:	4603      	mov	r3, r0
   24da0:	6800      	ldr	r0, [r0, #0]
   24da2:	2200      	movs	r2, #0
   24da4:	b900      	cbnz	r0, 24da8 <sys_slist_find_and_remove+0xa>
   24da6:	4770      	bx	lr
   24da8:	4288      	cmp	r0, r1
   24daa:	d110      	bne.n	24dce <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   24dac:	6808      	ldr	r0, [r1, #0]
   24dae:	b942      	cbnz	r2, 24dc2 <sys_slist_find_and_remove+0x24>
   24db0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   24db2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   24db4:	4291      	cmp	r1, r2
   24db6:	d100      	bne.n	24dba <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   24db8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   24dba:	2300      	movs	r3, #0
   24dbc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24dbe:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   24dc0:	4770      	bx	lr
	parent->next = child;
   24dc2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   24dc4:	6858      	ldr	r0, [r3, #4]
   24dc6:	4281      	cmp	r1, r0
	list->tail = node;
   24dc8:	bf08      	it	eq
   24dca:	605a      	streq	r2, [r3, #4]
}
   24dcc:	e7f5      	b.n	24dba <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   24dce:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   24dd0:	6800      	ldr	r0, [r0, #0]
   24dd2:	e7e7      	b.n	24da4 <sys_slist_find_and_remove+0x6>

00024dd4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24dd4:	4603      	mov	r3, r0
	size_t bytes = 0;
   24dd6:	2000      	movs	r0, #0

	while (buf) {
   24dd8:	b903      	cbnz	r3, 24ddc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24dda:	4770      	bx	lr
		bytes += buf->len;
   24ddc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24dde:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24de0:	4410      	add	r0, r2
		buf = buf->frags;
   24de2:	e7f9      	b.n	24dd8 <net_buf_frags_len+0x4>

00024de4 <att_sent>:
	if (chan->ops->sent) {
   24de4:	684b      	ldr	r3, [r1, #4]
   24de6:	695b      	ldr	r3, [r3, #20]
{
   24de8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   24dea:	b103      	cbz	r3, 24dee <att_sent+0xa>
		chan->ops->sent(chan);
   24dec:	4718      	bx	r3
}
   24dee:	4770      	bx	lr

00024df0 <attr_read_type_cb>:
{
   24df0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24df2:	68d4      	ldr	r4, [r2, #12]
   24df4:	7823      	ldrb	r3, [r4, #0]
   24df6:	3102      	adds	r1, #2
   24df8:	b913      	cbnz	r3, 24e00 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24dfa:	7021      	strb	r1, [r4, #0]
	return true;
   24dfc:	2001      	movs	r0, #1
   24dfe:	e006      	b.n	24e0e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24e00:	428b      	cmp	r3, r1
   24e02:	d0fb      	beq.n	24dfc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24e04:	8983      	ldrh	r3, [r0, #12]
   24e06:	3b02      	subs	r3, #2
   24e08:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24e0a:	2000      	movs	r0, #0
   24e0c:	6110      	str	r0, [r2, #16]
}
   24e0e:	bd10      	pop	{r4, pc}

00024e10 <att_op_get_type>:
	switch (op) {
   24e10:	281e      	cmp	r0, #30
   24e12:	d816      	bhi.n	24e42 <att_op_get_type+0x32>
   24e14:	b308      	cbz	r0, 24e5a <att_op_get_type+0x4a>
   24e16:	1e43      	subs	r3, r0, #1
   24e18:	2b1d      	cmp	r3, #29
   24e1a:	d81e      	bhi.n	24e5a <att_op_get_type+0x4a>
   24e1c:	e8df f003 	tbb	[pc, r3]
   24e20:	23172317 	.word	0x23172317
   24e24:	23172317 	.word	0x23172317
   24e28:	23172317 	.word	0x23172317
   24e2c:	23172317 	.word	0x23172317
   24e30:	1d172317 	.word	0x1d172317
   24e34:	2317231d 	.word	0x2317231d
   24e38:	1d191d17 	.word	0x1d191d17
   24e3c:	0f1b      	.short	0x0f1b
   24e3e:	2004      	movs	r0, #4
   24e40:	4770      	bx	lr
   24e42:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   24e46:	2b52      	cmp	r3, #82	; 0x52
   24e48:	d107      	bne.n	24e5a <att_op_get_type+0x4a>
		return ATT_COMMAND;
   24e4a:	2000      	movs	r0, #0
}
   24e4c:	4770      	bx	lr
		return ATT_RESPONSE;
   24e4e:	2002      	movs	r0, #2
   24e50:	4770      	bx	lr
		return ATT_NOTIFICATION;
   24e52:	2003      	movs	r0, #3
   24e54:	4770      	bx	lr
		return ATT_INDICATION;
   24e56:	2005      	movs	r0, #5
   24e58:	4770      	bx	lr
		return ATT_COMMAND;
   24e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
   24e5e:	bf0c      	ite	eq
   24e60:	2006      	moveq	r0, #6
   24e62:	2000      	movne	r0, #0
   24e64:	4770      	bx	lr
		return ATT_REQUEST;
   24e66:	2001      	movs	r0, #1
   24e68:	4770      	bx	lr

00024e6a <att_notify_mult>:
{
   24e6a:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   24e6c:	6803      	ldr	r3, [r0, #0]
   24e6e:	898a      	ldrh	r2, [r1, #12]
   24e70:	6818      	ldr	r0, [r3, #0]
   24e72:	6889      	ldr	r1, [r1, #8]
   24e74:	f7e6 f906 	bl	b084 <bt_gatt_mult_notification>
}
   24e78:	2000      	movs	r0, #0
   24e7a:	bd08      	pop	{r3, pc}

00024e7c <att_notify>:
{
   24e7c:	b538      	push	{r3, r4, r5, lr}
   24e7e:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   24e80:	f101 0008 	add.w	r0, r1, #8
   24e84:	460c      	mov	r4, r1
   24e86:	f001 f819 	bl	25ebc <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   24e8a:	682d      	ldr	r5, [r5, #0]
   24e8c:	89a3      	ldrh	r3, [r4, #12]
   24e8e:	68a2      	ldr	r2, [r4, #8]
   24e90:	4601      	mov	r1, r0
   24e92:	6828      	ldr	r0, [r5, #0]
   24e94:	f000 fefc 	bl	25c90 <bt_gatt_notification>
}
   24e98:	2000      	movs	r0, #0
   24e9a:	bd38      	pop	{r3, r4, r5, pc}

00024e9c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   24e9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24e9e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24ea2:	2300      	movs	r3, #0
   24ea4:	9300      	str	r3, [sp, #0]
   24ea6:	461a      	mov	r2, r3
   24ea8:	f7e5 f994 	bl	a1d4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   24eac:	b005      	add	sp, #20
   24eae:	f85d fb04 	ldr.w	pc, [sp], #4

00024eb2 <attr_read_group_cb>:
	if (!data->rsp->len) {
   24eb2:	68d0      	ldr	r0, [r2, #12]
   24eb4:	7803      	ldrb	r3, [r0, #0]
   24eb6:	3104      	adds	r1, #4
   24eb8:	b913      	cbnz	r3, 24ec0 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   24eba:	7001      	strb	r1, [r0, #0]
	return true;
   24ebc:	2001      	movs	r0, #1
}
   24ebe:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   24ec0:	428b      	cmp	r3, r1
   24ec2:	d0fb      	beq.n	24ebc <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24ec4:	6891      	ldr	r1, [r2, #8]
   24ec6:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   24ec8:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24eca:	3b04      	subs	r3, #4
   24ecc:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   24ece:	6110      	str	r0, [r2, #16]
		return false;
   24ed0:	4770      	bx	lr

00024ed2 <bt_att_chan_send>:
{
   24ed2:	b570      	push	{r4, r5, r6, lr}
   24ed4:	4604      	mov	r4, r0
   24ed6:	460e      	mov	r6, r1
	if (!cb) {
   24ed8:	4615      	mov	r5, r2
   24eda:	b132      	cbz	r2, 24eea <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   24edc:	462a      	mov	r2, r5
   24ede:	4631      	mov	r1, r6
   24ee0:	4620      	mov	r0, r4
}
   24ee2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   24ee6:	f7e3 bab7 	b.w	8458 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   24eea:	2200      	movs	r2, #0
   24eec:	2300      	movs	r3, #0
   24eee:	f500 7088 	add.w	r0, r0, #272	; 0x110
   24ef2:	f7fb f8ed 	bl	200d0 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   24ef6:	2800      	cmp	r0, #0
   24ef8:	daf0      	bge.n	24edc <bt_att_chan_send+0xa>
}
   24efa:	f06f 000a 	mvn.w	r0, #10
   24efe:	bd70      	pop	{r4, r5, r6, pc}

00024f00 <bt_att_chan_send_rsp>:
{
   24f00:	b538      	push	{r3, r4, r5, lr}
   24f02:	4604      	mov	r4, r0
   24f04:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   24f06:	f7ff ffe4 	bl	24ed2 <bt_att_chan_send>
	if (err) {
   24f0a:	b130      	cbz	r0, 24f1a <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   24f0c:	4629      	mov	r1, r5
   24f0e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   24f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   24f16:	f000 bf64 	b.w	25de2 <net_buf_put>
}
   24f1a:	bd38      	pop	{r3, r4, r5, pc}

00024f1c <process_queue>:
{
   24f1c:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   24f1e:	2200      	movs	r2, #0
{
   24f20:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   24f22:	2300      	movs	r3, #0
   24f24:	4608      	mov	r0, r1
{
   24f26:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   24f28:	f000 ff37 	bl	25d9a <net_buf_get>
	if (buf) {
   24f2c:	4605      	mov	r5, r0
   24f2e:	b160      	cbz	r0, 24f4a <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   24f30:	4601      	mov	r1, r0
   24f32:	2200      	movs	r2, #0
   24f34:	4620      	mov	r0, r4
   24f36:	f7e3 fa8f 	bl	8458 <chan_send>
		if (err) {
   24f3a:	4604      	mov	r4, r0
   24f3c:	b118      	cbz	r0, 24f46 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   24f3e:	4629      	mov	r1, r5
   24f40:	4630      	mov	r0, r6
   24f42:	f006 f808 	bl	2af56 <k_queue_prepend>
}
   24f46:	4620      	mov	r0, r4
   24f48:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24f4a:	f06f 0401 	mvn.w	r4, #1
   24f4e:	e7fa      	b.n	24f46 <process_queue+0x2a>

00024f50 <find_info_cb>:
{
   24f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   24f52:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24f54:	6816      	ldr	r6, [r2, #0]
{
   24f56:	4605      	mov	r5, r0
   24f58:	460f      	mov	r7, r1
   24f5a:	4614      	mov	r4, r2
	if (!data->rsp) {
   24f5c:	b963      	cbnz	r3, 24f78 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   24f5e:	6850      	ldr	r0, [r2, #4]
   24f60:	2101      	movs	r1, #1
   24f62:	3008      	adds	r0, #8
   24f64:	f000 ff70 	bl	25e48 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24f68:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   24f6a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24f6c:	781b      	ldrb	r3, [r3, #0]
   24f6e:	2b00      	cmp	r3, #0
   24f70:	bf0c      	ite	eq
   24f72:	2301      	moveq	r3, #1
   24f74:	2302      	movne	r3, #2
   24f76:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   24f78:	68a3      	ldr	r3, [r4, #8]
   24f7a:	781b      	ldrb	r3, [r3, #0]
   24f7c:	2b01      	cmp	r3, #1
   24f7e:	d003      	beq.n	24f88 <find_info_cb+0x38>
   24f80:	2b02      	cmp	r3, #2
   24f82:	d019      	beq.n	24fb8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   24f84:	2000      	movs	r0, #0
   24f86:	e016      	b.n	24fb6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   24f88:	682b      	ldr	r3, [r5, #0]
   24f8a:	781b      	ldrb	r3, [r3, #0]
   24f8c:	2b00      	cmp	r3, #0
   24f8e:	d1f9      	bne.n	24f84 <find_info_cb+0x34>
   24f90:	6860      	ldr	r0, [r4, #4]
   24f92:	2104      	movs	r1, #4
   24f94:	3008      	adds	r0, #8
   24f96:	f000 ff57 	bl	25e48 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24f9a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   24f9c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24f9e:	885b      	ldrh	r3, [r3, #2]
   24fa0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24fa2:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   24fa4:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   24fa6:	899b      	ldrh	r3, [r3, #12]
   24fa8:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   24fac:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24fae:	2804      	cmp	r0, #4
   24fb0:	bf94      	ite	ls
   24fb2:	2000      	movls	r0, #0
   24fb4:	2001      	movhi	r0, #1
}
   24fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24fb8:	682b      	ldr	r3, [r5, #0]
   24fba:	781b      	ldrb	r3, [r3, #0]
   24fbc:	2b02      	cmp	r3, #2
   24fbe:	d1e1      	bne.n	24f84 <find_info_cb+0x34>
   24fc0:	6860      	ldr	r0, [r4, #4]
   24fc2:	2112      	movs	r1, #18
   24fc4:	3008      	adds	r0, #8
   24fc6:	f000 ff3f 	bl	25e48 <net_buf_simple_add>
   24fca:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   24fcc:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24fce:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   24fd0:	f823 7b02 	strh.w	r7, [r3], #2
   24fd4:	1c51      	adds	r1, r2, #1
   24fd6:	3211      	adds	r2, #17
   24fd8:	f851 0b04 	ldr.w	r0, [r1], #4
   24fdc:	f843 0b04 	str.w	r0, [r3], #4
   24fe0:	4291      	cmp	r1, r2
   24fe2:	d1f9      	bne.n	24fd8 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   24fe4:	6863      	ldr	r3, [r4, #4]
   24fe6:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   24fea:	899b      	ldrh	r3, [r3, #12]
   24fec:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24fee:	2812      	cmp	r0, #18
   24ff0:	e7de      	b.n	24fb0 <find_info_cb+0x60>

00024ff2 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   24ff2:	30c0      	adds	r0, #192	; 0xc0
   24ff4:	f3bf 8f5b 	dmb	ish
   24ff8:	e850 3f00 	ldrex	r3, [r0]
   24ffc:	f023 0301 	bic.w	r3, r3, #1
   25000:	e840 3200 	strex	r2, r3, [r0]
   25004:	2a00      	cmp	r2, #0
   25006:	d1f7      	bne.n	24ff8 <chan_rsp_sent+0x6>
   25008:	f3bf 8f5b 	dmb	ish
}
   2500c:	4770      	bx	lr

0002500e <chan_cfm_sent>:
   2500e:	30c0      	adds	r0, #192	; 0xc0
   25010:	f3bf 8f5b 	dmb	ish
   25014:	e850 3f00 	ldrex	r3, [r0]
   25018:	f023 0302 	bic.w	r3, r3, #2
   2501c:	e840 3200 	strex	r2, r3, [r0]
   25020:	2a00      	cmp	r2, #0
   25022:	d1f7      	bne.n	25014 <chan_cfm_sent+0x6>
   25024:	f3bf 8f5b 	dmb	ish
}
   25028:	4770      	bx	lr

0002502a <att_chan_read>:
{
   2502a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2502e:	4680      	mov	r8, r0
   25030:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25032:	4610      	mov	r0, r2
{
   25034:	4699      	mov	r9, r3
   25036:	468b      	mov	fp, r1
   25038:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2503a:	f7ff fecb 	bl	24dd4 <net_buf_frags_len>
   2503e:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   25042:	4283      	cmp	r3, r0
   25044:	d97a      	bls.n	2513c <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   25046:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2504a:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2504c:	4630      	mov	r0, r6
   2504e:	f000 fed9 	bl	25e04 <net_buf_frag_last>
	size_t len, total = 0;
   25052:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   25056:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25058:	4630      	mov	r0, r6
   2505a:	f7ff febb 	bl	24dd4 <net_buf_frags_len>
   2505e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   25062:	f105 0708 	add.w	r7, r5, #8
   25066:	1a24      	subs	r4, r4, r0
   25068:	4638      	mov	r0, r7
   2506a:	f000 ff33 	bl	25ed4 <net_buf_simple_tailroom>
   2506e:	4284      	cmp	r4, r0
   25070:	d211      	bcs.n	25096 <att_chan_read+0x6c>
   25072:	4630      	mov	r0, r6
   25074:	f7ff feae 	bl	24dd4 <net_buf_frags_len>
   25078:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2507c:	1a24      	subs	r4, r4, r0
		if (!len) {
   2507e:	bb34      	cbnz	r4, 250ce <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25080:	79b0      	ldrb	r0, [r6, #6]
   25082:	f7f3 f8e7 	bl	18254 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   25086:	2200      	movs	r2, #0
   25088:	2300      	movs	r3, #0
   2508a:	f000 fe81 	bl	25d90 <net_buf_alloc_fixed>
			if (!frag) {
   2508e:	4605      	mov	r5, r0
   25090:	b930      	cbnz	r0, 250a0 <att_chan_read+0x76>
	return total;
   25092:	4657      	mov	r7, sl
   25094:	e02c      	b.n	250f0 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   25096:	4638      	mov	r0, r7
   25098:	f000 ff1c 	bl	25ed4 <net_buf_simple_tailroom>
   2509c:	4604      	mov	r4, r0
   2509e:	e7ee      	b.n	2507e <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   250a0:	4601      	mov	r1, r0
   250a2:	4630      	mov	r0, r6
   250a4:	f000 febf 	bl	25e26 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   250a8:	4630      	mov	r0, r6
   250aa:	f7ff fe93 	bl	24dd4 <net_buf_frags_len>
   250ae:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   250b2:	f105 0708 	add.w	r7, r5, #8
   250b6:	1a24      	subs	r4, r4, r0
   250b8:	4638      	mov	r0, r7
   250ba:	f000 ff0b 	bl	25ed4 <net_buf_simple_tailroom>
   250be:	4284      	cmp	r4, r0
   250c0:	d21a      	bcs.n	250f8 <att_chan_read+0xce>
   250c2:	4630      	mov	r0, r6
   250c4:	f7ff fe86 	bl	24dd4 <net_buf_frags_len>
   250c8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   250cc:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   250ce:	68a9      	ldr	r1, [r5, #8]
   250d0:	89aa      	ldrh	r2, [r5, #12]
   250d2:	f8db 7004 	ldr.w	r7, [fp, #4]
   250d6:	9803      	ldr	r0, [sp, #12]
   250d8:	f8cd 9000 	str.w	r9, [sp]
   250dc:	440a      	add	r2, r1
   250de:	b2a3      	uxth	r3, r4
   250e0:	4659      	mov	r1, fp
   250e2:	47b8      	blx	r7
		if (read < 0) {
   250e4:	1e07      	subs	r7, r0, #0
   250e6:	da0c      	bge.n	25102 <att_chan_read+0xd8>
				return total;
   250e8:	f1ba 0f00 	cmp.w	sl, #0
   250ec:	bf18      	it	ne
   250ee:	4657      	movne	r7, sl
}
   250f0:	4638      	mov	r0, r7
   250f2:	b005      	add	sp, #20
   250f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250f8:	4638      	mov	r0, r7
   250fa:	f000 feeb 	bl	25ed4 <net_buf_simple_tailroom>
   250fe:	4604      	mov	r4, r0
   25100:	e7e5      	b.n	250ce <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25104:	b993      	cbnz	r3, 2512c <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25106:	4639      	mov	r1, r7
   25108:	f105 0008 	add.w	r0, r5, #8
   2510c:	f000 fe9c 	bl	25e48 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25110:	4630      	mov	r0, r6
   25112:	f7ff fe5f 	bl	24dd4 <net_buf_frags_len>
   25116:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   2511a:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2511c:	4283      	cmp	r3, r0
		total += read;
   2511e:	44ba      	add	sl, r7
		offset += read;
   25120:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25124:	d9b5      	bls.n	25092 <att_chan_read+0x68>
   25126:	42a7      	cmp	r7, r4
   25128:	d096      	beq.n	25058 <att_chan_read+0x2e>
   2512a:	e7b2      	b.n	25092 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2512c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2512e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25130:	4639      	mov	r1, r7
   25132:	4628      	mov	r0, r5
   25134:	4798      	blx	r3
   25136:	2800      	cmp	r0, #0
   25138:	d1e5      	bne.n	25106 <att_chan_read+0xdc>
   2513a:	e7aa      	b.n	25092 <att_chan_read+0x68>
		return 0;
   2513c:	2700      	movs	r7, #0
   2513e:	e7d7      	b.n	250f0 <att_chan_read+0xc6>

00025140 <chan_req_send>:
{
   25140:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25142:	690e      	ldr	r6, [r1, #16]
{
   25144:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25146:	4630      	mov	r0, r6
{
   25148:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2514a:	f7ff fe43 	bl	24dd4 <net_buf_frags_len>
   2514e:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   25152:	4283      	cmp	r3, r0
   25154:	d317      	bcc.n	25186 <chan_req_send+0x46>
	chan->req = req;
   25156:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   2515a:	f106 0008 	add.w	r0, r6, #8
   2515e:	f000 feb5 	bl	25ecc <net_buf_simple_headroom>
	state->len = buf->len;
   25162:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   25164:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   25166:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   25168:	6920      	ldr	r0, [r4, #16]
   2516a:	f000 fe47 	bl	25dfc <net_buf_ref>
   2516e:	2200      	movs	r2, #0
   25170:	4601      	mov	r1, r0
   25172:	4628      	mov	r0, r5
   25174:	f7e3 f970 	bl	8458 <chan_send>
	if (err) {
   25178:	4605      	mov	r5, r0
   2517a:	b110      	cbz	r0, 25182 <chan_req_send+0x42>
		net_buf_unref(req->buf);
   2517c:	6920      	ldr	r0, [r4, #16]
   2517e:	f7f3 f925 	bl	183cc <net_buf_unref>
}
   25182:	4628      	mov	r0, r5
   25184:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   25186:	f06f 0579 	mvn.w	r5, #121	; 0x79
   2518a:	e7fa      	b.n	25182 <chan_req_send+0x42>

0002518c <bt_att_chan_req_send>:
{
   2518c:	b570      	push	{r4, r5, r6, lr}
   2518e:	4604      	mov	r4, r0
   25190:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   25192:	f500 7688 	add.w	r6, r0, #272	; 0x110
   25196:	2200      	movs	r2, #0
   25198:	2300      	movs	r3, #0
   2519a:	4630      	mov	r0, r6
   2519c:	f7fa ff98 	bl	200d0 <z_impl_k_sem_take>
   251a0:	2800      	cmp	r0, #0
   251a2:	db0a      	blt.n	251ba <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   251a4:	4620      	mov	r0, r4
   251a6:	4629      	mov	r1, r5
   251a8:	f7ff ffca 	bl	25140 <chan_req_send>
	if (err < 0) {
   251ac:	1e04      	subs	r4, r0, #0
   251ae:	da02      	bge.n	251b6 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   251b0:	4630      	mov	r0, r6
   251b2:	f7fa ff67 	bl	20084 <z_impl_k_sem_give>
}
   251b6:	4620      	mov	r0, r4
   251b8:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   251ba:	f06f 040a 	mvn.w	r4, #10
   251be:	e7fa      	b.n	251b6 <bt_att_chan_req_send+0x2a>

000251c0 <bt_att_status>:
{
   251c0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   251c2:	f3bf 8f5b 	dmb	ish
   251c6:	680b      	ldr	r3, [r1, #0]
   251c8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   251cc:	07db      	lsls	r3, r3, #31
{
   251ce:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   251d0:	d519      	bpl.n	25206 <bt_att_status+0x46>
	if (!chan->att) {
   251d2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   251d6:	b1b0      	cbz	r0, 25206 <bt_att_status+0x46>
	if (chan->req) {
   251d8:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   251dc:	b99b      	cbnz	r3, 25206 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   251de:	3004      	adds	r0, #4
   251e0:	f7ff fdd3 	bl	24d8a <sys_slist_get>
	if (!node) {
   251e4:	4604      	mov	r4, r0
   251e6:	b170      	cbz	r0, 25206 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   251e8:	4601      	mov	r1, r0
   251ea:	f1a5 0008 	sub.w	r0, r5, #8
   251ee:	f7ff ffcd 	bl	2518c <bt_att_chan_req_send>
   251f2:	2800      	cmp	r0, #0
   251f4:	da07      	bge.n	25206 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   251f6:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   251fa:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   251fc:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   251fe:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   25200:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25202:	b902      	cbnz	r2, 25206 <bt_att_status+0x46>
	list->tail = node;
   25204:	609c      	str	r4, [r3, #8]
}
   25206:	bd38      	pop	{r3, r4, r5, pc}

00025208 <write_cb>:
{
   25208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2520a:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2520c:	4601      	mov	r1, r0
{
   2520e:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   25210:	222a      	movs	r2, #42	; 0x2a
   25212:	6820      	ldr	r0, [r4, #0]
   25214:	f000 fc38 	bl	25a88 <bt_gatt_check_perm>
   25218:	4605      	mov	r5, r0
   2521a:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2521c:	bb00      	cbnz	r0, 25260 <write_cb+0x58>
	if (!data->req) {
   2521e:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   25220:	68b7      	ldr	r7, [r6, #8]
   25222:	68e2      	ldr	r2, [r4, #12]
   25224:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   25226:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   25228:	bf14      	ite	ne
   2522a:	2300      	movne	r3, #0
   2522c:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   2522e:	9301      	str	r3, [sp, #4]
   25230:	8a63      	ldrh	r3, [r4, #18]
   25232:	9300      	str	r3, [sp, #0]
   25234:	4631      	mov	r1, r6
   25236:	8a23      	ldrh	r3, [r4, #16]
   25238:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2523a:	1e03      	subs	r3, r0, #0
   2523c:	db05      	blt.n	2524a <write_cb+0x42>
   2523e:	8a22      	ldrh	r2, [r4, #16]
   25240:	4293      	cmp	r3, r2
   25242:	d10b      	bne.n	2525c <write_cb+0x54>
	data->err = 0U;
   25244:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   25246:	2501      	movs	r5, #1
   25248:	e005      	b.n	25256 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   2524a:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2524e:	d305      	bcc.n	2525c <write_cb+0x54>
		return -err;
   25250:	425b      	negs	r3, r3
   25252:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   25254:	7523      	strb	r3, [r4, #20]
}
   25256:	4628      	mov	r0, r5
   25258:	b003      	add	sp, #12
   2525a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2525c:	230e      	movs	r3, #14
   2525e:	e7f9      	b.n	25254 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   25260:	2500      	movs	r5, #0
   25262:	e7f8      	b.n	25256 <write_cb+0x4e>

00025264 <bt_att_sent>:
{
   25264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25266:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   2526a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   2526e:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25270:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   25274:	b10b      	cbz	r3, 2527a <bt_att_sent+0x16>
		chan->sent(chan);
   25276:	4638      	mov	r0, r7
   25278:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2527a:	f3bf 8f5b 	dmb	ish
   2527e:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   25282:	e853 2f00 	ldrex	r2, [r3]
   25286:	f022 0210 	bic.w	r2, r2, #16
   2528a:	e843 2100 	strex	r1, r2, [r3]
   2528e:	2900      	cmp	r1, #0
   25290:	d1f7      	bne.n	25282 <bt_att_sent+0x1e>
   25292:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25296:	b335      	cbz	r5, 252e6 <bt_att_sent+0x82>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25298:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   2529c:	b98b      	cbnz	r3, 252c2 <bt_att_sent+0x5e>
   2529e:	686b      	ldr	r3, [r5, #4]
   252a0:	b17b      	cbz	r3, 252c2 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   252a2:	1d28      	adds	r0, r5, #4
   252a4:	f7ff fd71 	bl	24d8a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   252a8:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   252aa:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   252ac:	4638      	mov	r0, r7
   252ae:	f7ff ff47 	bl	25140 <chan_req_send>
   252b2:	2800      	cmp	r0, #0
   252b4:	da17      	bge.n	252e6 <bt_att_sent+0x82>
Z_GENLIST_PREPEND(slist, snode)
   252b6:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   252b8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   252ba:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   252bc:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   252be:	b903      	cbnz	r3, 252c2 <bt_att_sent+0x5e>
	list->tail = node;
   252c0:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   252c2:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   252c6:	4638      	mov	r0, r7
   252c8:	f7ff fe28 	bl	24f1c <process_queue>
	if (!err) {
   252cc:	b158      	cbz	r0, 252e6 <bt_att_sent+0x82>
	err = process_queue(chan, &att->tx_queue);
   252ce:	f105 010c 	add.w	r1, r5, #12
   252d2:	4638      	mov	r0, r7
   252d4:	f7ff fe22 	bl	24f1c <process_queue>
	if (!err) {
   252d8:	b128      	cbz	r0, 252e6 <bt_att_sent+0x82>
   252da:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   252de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   252e2:	f7fa becf 	b.w	20084 <z_impl_k_sem_give>
   252e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000252e8 <read_cb>:
{
   252e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   252ec:	f8d2 8000 	ldr.w	r8, [r2]
{
   252f0:	4606      	mov	r6, r0
	data->err = 0x00;
   252f2:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   252f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   252f8:	7317      	strb	r7, [r2, #12]
{
   252fa:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   252fc:	4631      	mov	r1, r6
   252fe:	2215      	movs	r2, #21
   25300:	f000 fbc2 	bl	25a88 <bt_gatt_check_perm>
   25304:	4604      	mov	r4, r0
   25306:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   25308:	b9a0      	cbnz	r0, 25334 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2530a:	e9cd 0000 	strd	r0, r0, [sp]
   2530e:	88ab      	ldrh	r3, [r5, #4]
   25310:	68aa      	ldr	r2, [r5, #8]
   25312:	4631      	mov	r1, r6
   25314:	4640      	mov	r0, r8
   25316:	f7ff fe88 	bl	2502a <att_chan_read>
	if (ret < 0) {
   2531a:	1e03      	subs	r3, r0, #0
   2531c:	da0c      	bge.n	25338 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2531e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   25322:	bf26      	itte	cs
   25324:	425b      	negcs	r3, r3
   25326:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25328:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2532a:	732b      	strb	r3, [r5, #12]
}
   2532c:	4620      	mov	r0, r4
   2532e:	b002      	add	sp, #8
   25330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   25334:	463c      	mov	r4, r7
   25336:	e7f9      	b.n	2532c <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   25338:	2401      	movs	r4, #1
   2533a:	e7f7      	b.n	2532c <read_cb+0x44>

0002533c <att_write_cmd>:
{
   2533c:	b530      	push	{r4, r5, lr}
   2533e:	460c      	mov	r4, r1
   25340:	b085      	sub	sp, #20
   25342:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   25344:	f101 0008 	add.w	r0, r1, #8
   25348:	f000 fdb8 	bl	25ebc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2534c:	89a2      	ldrh	r2, [r4, #12]
   2534e:	9202      	str	r2, [sp, #8]
   25350:	68a2      	ldr	r2, [r4, #8]
   25352:	9201      	str	r2, [sp, #4]
   25354:	2200      	movs	r2, #0
   25356:	4603      	mov	r3, r0
   25358:	9200      	str	r2, [sp, #0]
   2535a:	4611      	mov	r1, r2
   2535c:	4628      	mov	r0, r5
   2535e:	f7e3 fbfd 	bl	8b5c <att_write_rsp>
}
   25362:	b005      	add	sp, #20
   25364:	bd30      	pop	{r4, r5, pc}

00025366 <att_write_req>:
{
   25366:	b530      	push	{r4, r5, lr}
   25368:	460c      	mov	r4, r1
   2536a:	b085      	sub	sp, #20
   2536c:	4605      	mov	r5, r0
   2536e:	f101 0008 	add.w	r0, r1, #8
   25372:	f000 fda3 	bl	25ebc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25376:	89a2      	ldrh	r2, [r4, #12]
   25378:	9202      	str	r2, [sp, #8]
   2537a:	68a2      	ldr	r2, [r4, #8]
   2537c:	9201      	str	r2, [sp, #4]
   2537e:	2200      	movs	r2, #0
   25380:	4603      	mov	r3, r0
   25382:	9200      	str	r2, [sp, #0]
   25384:	2112      	movs	r1, #18
   25386:	2213      	movs	r2, #19
   25388:	4628      	mov	r0, r5
   2538a:	f7e3 fbe7 	bl	8b5c <att_write_rsp>
}
   2538e:	b005      	add	sp, #20
   25390:	bd30      	pop	{r4, r5, pc}

00025392 <att_read_blob_req>:
{
   25392:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25394:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   25396:	8813      	ldrh	r3, [r2, #0]
   25398:	8852      	ldrh	r2, [r2, #2]
   2539a:	9200      	str	r2, [sp, #0]
   2539c:	210c      	movs	r1, #12
   2539e:	220d      	movs	r2, #13
   253a0:	f7e3 fdfa 	bl	8f98 <att_read_rsp>
}
   253a4:	b003      	add	sp, #12
   253a6:	f85d fb04 	ldr.w	pc, [sp], #4

000253aa <att_read_req>:
{
   253aa:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   253ac:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   253ae:	2200      	movs	r2, #0
   253b0:	881b      	ldrh	r3, [r3, #0]
   253b2:	9200      	str	r2, [sp, #0]
   253b4:	210a      	movs	r1, #10
   253b6:	220b      	movs	r2, #11
   253b8:	f7e3 fdee 	bl	8f98 <att_read_rsp>
}
   253bc:	b003      	add	sp, #12
   253be:	f85d fb04 	ldr.w	pc, [sp], #4

000253c2 <bt_att_init>:
	bt_gatt_init();
   253c2:	f7e4 be6f 	b.w	a0a4 <bt_gatt_init>

000253c6 <bt_att_get_mtu>:
{
   253c6:	b508      	push	{r3, lr}
	att = att_get(conn);
   253c8:	f7e3 f8bc 	bl	8544 <att_get>
	if (!att) {
   253cc:	b1d8      	cbz	r0, 25406 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   253ce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   253d0:	b1c8      	cbz	r0, 25406 <bt_att_get_mtu+0x40>
   253d2:	f5b0 7196 	subs.w	r1, r0, #300	; 0x12c
   253d6:	d015      	beq.n	25404 <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   253d8:	6803      	ldr	r3, [r0, #0]
   253da:	b10b      	cbz	r3, 253e0 <bt_att_get_mtu+0x1a>
   253dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   253e0:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   253e2:	f8b1 205e 	ldrh.w	r2, [r1, #94]	; 0x5e
   253e6:	4290      	cmp	r0, r2
   253e8:	bf38      	it	cc
   253ea:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   253ec:	b15b      	cbz	r3, 25406 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   253ee:	f513 7296 	adds.w	r2, r3, #300	; 0x12c
   253f2:	d004      	beq.n	253fe <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   253f4:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
   253f8:	b10a      	cbz	r2, 253fe <bt_att_get_mtu+0x38>
   253fa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
{
   253fe:	4619      	mov	r1, r3
   25400:	4613      	mov	r3, r2
   25402:	e7ee      	b.n	253e2 <bt_att_get_mtu+0x1c>
		return 0;
   25404:	4608      	mov	r0, r1
}
   25406:	bd08      	pop	{r3, pc}

00025408 <att_req_destroy>:
{
   25408:	b510      	push	{r4, lr}
   2540a:	4604      	mov	r4, r0
	if (req->buf) {
   2540c:	6900      	ldr	r0, [r0, #16]
   2540e:	b108      	cbz	r0, 25414 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   25410:	f7f2 ffdc 	bl	183cc <net_buf_unref>
	if (req->destroy) {
   25414:	68a3      	ldr	r3, [r4, #8]
   25416:	b10b      	cbz	r3, 2541c <att_req_destroy+0x14>
		req->destroy(req);
   25418:	4620      	mov	r0, r4
   2541a:	4798      	blx	r3
	bt_att_req_free(req);
   2541c:	4620      	mov	r0, r4
}
   2541e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   25422:	f7e3 bf59 	b.w	92d8 <bt_att_req_free>

00025426 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   25426:	898a      	ldrh	r2, [r1, #12]
   25428:	6889      	ldr	r1, [r1, #8]
   2542a:	2300      	movs	r3, #0
   2542c:	f7e3 bf60 	b.w	92f0 <att_handle_rsp>

00025430 <att_handle_find_type_rsp>:
   25430:	f7ff bff9 	b.w	25426 <att_handle_find_info_rsp>

00025434 <att_handle_read_type_rsp>:
   25434:	f7ff bff7 	b.w	25426 <att_handle_find_info_rsp>

00025438 <att_handle_read_rsp>:
   25438:	f7ff bff5 	b.w	25426 <att_handle_find_info_rsp>

0002543c <att_handle_read_blob_rsp>:
   2543c:	f7ff bff3 	b.w	25426 <att_handle_find_info_rsp>

00025440 <att_handle_read_mult_rsp>:
   25440:	f7ff bff1 	b.w	25426 <att_handle_find_info_rsp>

00025444 <att_handle_read_group_rsp>:
   25444:	f7ff bfef 	b.w	25426 <att_handle_find_info_rsp>

00025448 <att_handle_write_rsp>:
   25448:	f7ff bfed 	b.w	25426 <att_handle_find_info_rsp>

0002544c <att_handle_prepare_write_rsp>:
   2544c:	f7ff bfeb 	b.w	25426 <att_handle_find_info_rsp>

00025450 <att_handle_exec_write_rsp>:
   25450:	f7ff bfe9 	b.w	25426 <att_handle_find_info_rsp>

00025454 <att_confirm>:
   25454:	f7ff bfe7 	b.w	25426 <att_handle_find_info_rsp>

00025458 <att_mtu_rsp>:
{
   25458:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
   2545a:	6889      	ldr	r1, [r1, #8]
{
   2545c:	b410      	push	{r4}
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2545e:	880c      	ldrh	r4, [r1, #0]
{
   25460:	4603      	mov	r3, r0
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   25462:	2c16      	cmp	r4, #22
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   25464:	bf89      	itett	hi
   25466:	2417      	movhi	r4, #23
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   25468:	2200      	movls	r2, #0
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2546a:	f8a3 4052 	strhhi.w	r4, [r3, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2546e:	f8a3 405e 	strhhi.w	r4, [r3, #94]	; 0x5e
	return att_handle_rsp(chan, rsp, buf->len, 0);
   25472:	bf88      	it	hi
   25474:	8992      	ldrhhi	r2, [r2, #12]
}
   25476:	bc10      	pop	{r4}
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   25478:	bf9a      	itte	ls
   2547a:	2304      	movls	r3, #4
   2547c:	4611      	movls	r1, r2
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2547e:	2300      	movhi	r3, #0
   25480:	f7e3 bf36 	b.w	92f0 <att_handle_rsp>

00025484 <bt_att_send>:
{
   25484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   25488:	4605      	mov	r5, r0
   2548a:	460e      	mov	r6, r1
   2548c:	4614      	mov	r4, r2
   2548e:	4698      	mov	r8, r3
	att = att_get(conn);
   25490:	f7e3 f858 	bl	8544 <att_get>
	if (!att) {
   25494:	4607      	mov	r7, r0
   25496:	b938      	cbnz	r0, 254a8 <bt_att_send+0x24>
		net_buf_unref(buf);
   25498:	4630      	mov	r0, r6
   2549a:	f7f2 ff97 	bl	183cc <net_buf_unref>
		return -ENOTCONN;
   2549e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   254a2:	b002      	add	sp, #8
   254a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   254a8:	b144      	cbz	r4, 254bc <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   254aa:	f8cd 8000 	str.w	r8, [sp]
   254ae:	4623      	mov	r3, r4
   254b0:	4632      	mov	r2, r6
   254b2:	2104      	movs	r1, #4
   254b4:	4628      	mov	r0, r5
   254b6:	f7ff fc2e 	bl	24d16 <bt_l2cap_send_cb>
   254ba:	e7f2      	b.n	254a2 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   254bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   254be:	b184      	cbz	r4, 254e2 <bt_att_send+0x5e>
   254c0:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   254c4:	d00f      	beq.n	254e6 <bt_att_send+0x62>
   254c6:	6824      	ldr	r4, [r4, #0]
   254c8:	b10c      	cbz	r4, 254ce <bt_att_send+0x4a>
   254ca:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   254ce:	2000      	movs	r0, #0
   254d0:	b95d      	cbnz	r5, 254ea <bt_att_send+0x66>
	if (ret < 0) {
   254d2:	b188      	cbz	r0, 254f8 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   254d4:	f107 000c 	add.w	r0, r7, #12
   254d8:	4631      	mov	r1, r6
   254da:	f000 fc82 	bl	25de2 <net_buf_put>
	return 0;
   254de:	4628      	mov	r0, r5
   254e0:	e7df      	b.n	254a2 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   254e2:	4625      	mov	r5, r4
   254e4:	e7f3      	b.n	254ce <bt_att_send+0x4a>
   254e6:	462c      	mov	r4, r5
   254e8:	e7f1      	b.n	254ce <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   254ea:	2200      	movs	r2, #0
   254ec:	4631      	mov	r1, r6
   254ee:	4628      	mov	r0, r5
   254f0:	f7ff fcef 	bl	24ed2 <bt_att_chan_send>
		if (ret >= 0) {
   254f4:	2800      	cmp	r0, #0
   254f6:	db01      	blt.n	254fc <bt_att_send+0x78>
	return 0;
   254f8:	2000      	movs	r0, #0
   254fa:	e7d2      	b.n	254a2 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   254fc:	b154      	cbz	r4, 25514 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   254fe:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   25502:	d004      	beq.n	2550e <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25504:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   25508:	b10b      	cbz	r3, 2550e <bt_att_send+0x8a>
   2550a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   2550e:	4625      	mov	r5, r4
   25510:	461c      	mov	r4, r3
   25512:	e7dd      	b.n	254d0 <bt_att_send+0x4c>
   25514:	4623      	mov	r3, r4
   25516:	e7fa      	b.n	2550e <bt_att_send+0x8a>

00025518 <bt_att_req_send>:
{
   25518:	b570      	push	{r4, r5, r6, lr}
   2551a:	460c      	mov	r4, r1
	att = att_get(conn);
   2551c:	f7e3 f812 	bl	8544 <att_get>
	if (!att) {
   25520:	4605      	mov	r5, r0
   25522:	b930      	cbnz	r0, 25532 <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   25524:	6920      	ldr	r0, [r4, #16]
   25526:	f7f2 ff51 	bl	183cc <net_buf_unref>
		req->buf = NULL;
   2552a:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   2552c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   25530:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25532:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   25534:	b153      	cbz	r3, 2554c <bt_att_req_send+0x34>
   25536:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   2553a:	d007      	beq.n	2554c <bt_att_req_send+0x34>
   2553c:	681e      	ldr	r6, [r3, #0]
   2553e:	b10e      	cbz	r6, 25544 <bt_att_req_send+0x2c>
   25540:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   25544:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   25548:	b143      	cbz	r3, 2555c <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2554a:	b96e      	cbnz	r6, 25568 <bt_att_req_send+0x50>
	parent->next = child;
   2554c:	2000      	movs	r0, #0
   2554e:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   25550:	68ab      	ldr	r3, [r5, #8]
   25552:	b9a3      	cbnz	r3, 2557e <bt_att_req_send+0x66>
	list->head = node;
   25554:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   25558:	4618      	mov	r0, r3
}
   2555a:	e7e9      	b.n	25530 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   2555c:	4621      	mov	r1, r4
   2555e:	f7ff fe15 	bl	2518c <bt_att_chan_req_send>
			if (ret >= 0) {
   25562:	2800      	cmp	r0, #0
   25564:	dbf1      	blt.n	2554a <bt_att_req_send+0x32>
   25566:	e7e3      	b.n	25530 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25568:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   2556c:	d004      	beq.n	25578 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2556e:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25572:	b10b      	cbz	r3, 25578 <bt_att_req_send+0x60>
   25574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   25578:	4630      	mov	r0, r6
   2557a:	461e      	mov	r6, r3
   2557c:	e7e2      	b.n	25544 <bt_att_req_send+0x2c>
	parent->next = child;
   2557e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   25580:	60ac      	str	r4, [r5, #8]
}
   25582:	e7d5      	b.n	25530 <bt_att_req_send+0x18>

00025584 <gatt_ccc_changed>:
{
   25584:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   25586:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   25588:	895a      	ldrh	r2, [r3, #10]
   2558a:	428a      	cmp	r2, r1
   2558c:	d003      	beq.n	25596 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2558e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   25590:	68db      	ldr	r3, [r3, #12]
   25592:	b103      	cbz	r3, 25596 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   25594:	4718      	bx	r3
}
   25596:	4770      	bx	lr

00025598 <gatt_indicate_rsp>:
{
   25598:	b510      	push	{r4, lr}
   2559a:	9c02      	ldr	r4, [sp, #8]
	params->_ref--;
   2559c:	7da3      	ldrb	r3, [r4, #22]
   2559e:	3b01      	subs	r3, #1
{
   255a0:	460a      	mov	r2, r1
	params->_ref--;
   255a2:	75a3      	strb	r3, [r4, #22]
	params->func(conn, params, err);
   255a4:	4621      	mov	r1, r4
   255a6:	68a3      	ldr	r3, [r4, #8]
   255a8:	4798      	blx	r3
	if (params->destroy && (params->_ref == 0)) {
   255aa:	68e3      	ldr	r3, [r4, #12]
   255ac:	b12b      	cbz	r3, 255ba <gatt_indicate_rsp+0x22>
   255ae:	7da2      	ldrb	r2, [r4, #22]
   255b0:	b91a      	cbnz	r2, 255ba <gatt_indicate_rsp+0x22>
		params->destroy(params);
   255b2:	4620      	mov	r0, r4
}
   255b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   255b8:	4718      	bx	r3
}
   255ba:	bd10      	pop	{r4, pc}

000255bc <match_uuid>:
	data->attr = attr;
   255bc:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   255be:	8091      	strh	r1, [r2, #4]
}
   255c0:	2000      	movs	r0, #0
   255c2:	4770      	bx	lr

000255c4 <ccc_set_cb>:
}
   255c4:	2000      	movs	r0, #0
   255c6:	4770      	bx	lr

000255c8 <write_name>:
{
   255c8:	b570      	push	{r4, r5, r6, lr}
   255ca:	b092      	sub	sp, #72	; 0x48
   255cc:	4615      	mov	r5, r2
   255ce:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   255d2:	2100      	movs	r1, #0
   255d4:	223d      	movs	r2, #61	; 0x3d
   255d6:	a802      	add	r0, sp, #8
{
   255d8:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   255da:	9101      	str	r1, [sp, #4]
   255dc:	f006 f8de 	bl	2b79c <memset>
	if (offset) {
   255e0:	b96e      	cbnz	r6, 255fe <write_name+0x36>
	if (len >= sizeof(value)) {
   255e2:	2c40      	cmp	r4, #64	; 0x40
   255e4:	d80e      	bhi.n	25604 <write_name+0x3c>
	memcpy(value, buf, len);
   255e6:	2341      	movs	r3, #65	; 0x41
   255e8:	4622      	mov	r2, r4
   255ea:	4629      	mov	r1, r5
   255ec:	a801      	add	r0, sp, #4
   255ee:	f006 f8c2 	bl	2b776 <__memcpy_chk>
	bt_set_name(value);
   255f2:	a801      	add	r0, sp, #4
   255f4:	f7e1 fb42 	bl	6c7c <bt_set_name>
	return len;
   255f8:	4620      	mov	r0, r4
}
   255fa:	b012      	add	sp, #72	; 0x48
   255fc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   255fe:	f06f 0006 	mvn.w	r0, #6
   25602:	e7fa      	b.n	255fa <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   25604:	f06f 000c 	mvn.w	r0, #12
   25608:	e7f7      	b.n	255fa <write_name+0x32>

0002560a <gen_hash_m>:
{
   2560a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2560c:	6807      	ldr	r7, [r0, #0]
   2560e:	783d      	ldrb	r5, [r7, #0]
{
   25610:	b089      	sub	sp, #36	; 0x24
   25612:	4606      	mov	r6, r0
   25614:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25616:	b10d      	cbz	r5, 2561c <gen_hash_m+0x12>
	switch (u16->val) {
   25618:	2501      	movs	r5, #1
   2561a:	e014      	b.n	25646 <gen_hash_m+0x3c>
   2561c:	887b      	ldrh	r3, [r7, #2]
   2561e:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   25622:	d004      	beq.n	2562e <gen_hash_m+0x24>
   25624:	d812      	bhi.n	2564c <gen_hash_m+0x42>
   25626:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2562a:	2b03      	cmp	r3, #3
   2562c:	d8f4      	bhi.n	25618 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2562e:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25632:	2202      	movs	r2, #2
   25634:	f10d 010e 	add.w	r1, sp, #14
   25638:	4620      	mov	r0, r4
   2563a:	f7fe fdc9 	bl	241d0 <tc_cmac_update>
   2563e:	b9e0      	cbnz	r0, 2567a <gen_hash_m+0x70>
			state->err = -EINVAL;
   25640:	f06f 0315 	mvn.w	r3, #21
   25644:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25646:	4628      	mov	r0, r5
   25648:	b009      	add	sp, #36	; 0x24
   2564a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2564c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25650:	33ff      	adds	r3, #255	; 0xff
   25652:	b29b      	uxth	r3, r3
   25654:	2b04      	cmp	r3, #4
   25656:	d8df      	bhi.n	25618 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25658:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2565c:	2202      	movs	r2, #2
   2565e:	f10d 010e 	add.w	r1, sp, #14
   25662:	4620      	mov	r0, r4
   25664:	f7fe fdb4 	bl	241d0 <tc_cmac_update>
   25668:	2800      	cmp	r0, #0
   2566a:	d0e9      	beq.n	25640 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2566c:	887b      	ldrh	r3, [r7, #2]
   2566e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25672:	2202      	movs	r2, #2
   25674:	f10d 010e 	add.w	r1, sp, #14
   25678:	e017      	b.n	256aa <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2567a:	887b      	ldrh	r3, [r7, #2]
   2567c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25680:	2202      	movs	r2, #2
   25682:	f10d 010e 	add.w	r1, sp, #14
   25686:	4620      	mov	r0, r4
   25688:	f7fe fda2 	bl	241d0 <tc_cmac_update>
   2568c:	2800      	cmp	r0, #0
   2568e:	d0d7      	beq.n	25640 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25690:	2000      	movs	r0, #0
   25692:	2310      	movs	r3, #16
   25694:	eb0d 0203 	add.w	r2, sp, r3
   25698:	6877      	ldr	r7, [r6, #4]
   2569a:	9000      	str	r0, [sp, #0]
   2569c:	4631      	mov	r1, r6
   2569e:	47b8      	blx	r7
		if (len < 0) {
   256a0:	1e02      	subs	r2, r0, #0
   256a2:	da01      	bge.n	256a8 <gen_hash_m+0x9e>
			state->err = len;
   256a4:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   256a6:	e7ce      	b.n	25646 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   256a8:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256aa:	4620      	mov	r0, r4
   256ac:	f7fe fd90 	bl	241d0 <tc_cmac_update>
   256b0:	2800      	cmp	r0, #0
   256b2:	d1b1      	bne.n	25618 <gen_hash_m+0xe>
   256b4:	e7c4      	b.n	25640 <gen_hash_m+0x36>

000256b6 <bt_addr_le_cmp>:
   256b6:	2207      	movs	r2, #7
   256b8:	f006 b841 	b.w	2b73e <memcmp>

000256bc <find_ccc_cfg>:
{
   256bc:	b513      	push	{r0, r1, r4, lr}
   256be:	1c4a      	adds	r2, r1, #1
   256c0:	460c      	mov	r4, r1
		if (conn) {
   256c2:	b140      	cbz	r0, 256d6 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   256c4:	7809      	ldrb	r1, [r1, #0]
   256c6:	f7ff fa38 	bl	24b3a <bt_conn_is_peer_addr_le>
   256ca:	2800      	cmp	r0, #0
	return NULL;
   256cc:	bf08      	it	eq
   256ce:	2400      	moveq	r4, #0
}
   256d0:	4620      	mov	r0, r4
   256d2:	b002      	add	sp, #8
   256d4:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   256d6:	9000      	str	r0, [sp, #0]
   256d8:	4669      	mov	r1, sp
   256da:	f8cd 0003 	str.w	r0, [sp, #3]
   256de:	4610      	mov	r0, r2
   256e0:	f7ff ffe9 	bl	256b6 <bt_addr_le_cmp>
   256e4:	2800      	cmp	r0, #0
	return NULL;
   256e6:	bf18      	it	ne
   256e8:	2400      	movne	r4, #0
   256ea:	e7f1      	b.n	256d0 <find_ccc_cfg+0x14>

000256ec <ccc_find_cfg>:
{
   256ec:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   256ee:	7803      	ldrb	r3, [r0, #0]
   256f0:	4293      	cmp	r3, r2
{
   256f2:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   256f4:	d001      	beq.n	256fa <ccc_find_cfg+0xe>
	return NULL;
   256f6:	2000      	movs	r0, #0
}
   256f8:	bd10      	pop	{r4, pc}
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   256fa:	3001      	adds	r0, #1
   256fc:	f7ff ffdb 	bl	256b6 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   25700:	2800      	cmp	r0, #0
   25702:	d1f8      	bne.n	256f6 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   25704:	4620      	mov	r0, r4
   25706:	e7f7      	b.n	256f8 <ccc_find_cfg+0xc>

00025708 <atomic_and>:
{
   25708:	4603      	mov	r3, r0
}
   2570a:	f3bf 8f5b 	dmb	ish
   2570e:	e853 0f00 	ldrex	r0, [r3]
   25712:	ea00 0201 	and.w	r2, r0, r1
   25716:	e843 2c00 	strex	ip, r2, [r3]
   2571a:	f1bc 0f00 	cmp.w	ip, #0
   2571e:	d1f6      	bne.n	2570e <atomic_and+0x6>
   25720:	f3bf 8f5b 	dmb	ish
   25724:	4770      	bx	lr

00025726 <gatt_read_mult_rsp>:
{
   25726:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25728:	9d08      	ldr	r5, [sp, #32]
   2572a:	4606      	mov	r6, r0
   2572c:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   2572e:	460c      	mov	r4, r1
   25730:	b901      	cbnz	r1, 25734 <gatt_read_mult_rsp+0xe>
   25732:	b94b      	cbnz	r3, 25748 <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   25734:	2300      	movs	r3, #0
   25736:	9308      	str	r3, [sp, #32]
   25738:	462a      	mov	r2, r5
   2573a:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   2573c:	4630      	mov	r0, r6
   2573e:	46bc      	mov	ip, r7
}
   25740:	b003      	add	sp, #12
   25742:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   25746:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   25748:	9300      	str	r3, [sp, #0]
   2574a:	4613      	mov	r3, r2
   2574c:	462a      	mov	r2, r5
   2574e:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   25750:	9408      	str	r4, [sp, #32]
   25752:	682f      	ldr	r7, [r5, #0]
   25754:	4623      	mov	r3, r4
   25756:	462a      	mov	r2, r5
   25758:	4621      	mov	r1, r4
   2575a:	e7ef      	b.n	2573c <gatt_read_mult_rsp+0x16>

0002575c <bt_addr_le_copy>:
   2575c:	680b      	ldr	r3, [r1, #0]
   2575e:	6003      	str	r3, [r0, #0]
   25760:	888b      	ldrh	r3, [r1, #4]
   25762:	8083      	strh	r3, [r0, #4]
   25764:	798b      	ldrb	r3, [r1, #6]
   25766:	7183      	strb	r3, [r0, #6]
}
   25768:	4770      	bx	lr

0002576a <clear_ccc_cfg>:
{
   2576a:	b513      	push	{r0, r1, r4, lr}
   2576c:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2576e:	2400      	movs	r4, #0
   25770:	4669      	mov	r1, sp
   25772:	3001      	adds	r0, #1
   25774:	9400      	str	r4, [sp, #0]
   25776:	f8cd 4003 	str.w	r4, [sp, #3]
   2577a:	f7ff ffef 	bl	2575c <bt_addr_le_copy>
	cfg->id = 0U;
   2577e:	7014      	strb	r4, [r2, #0]
	cfg->value = 0U;
   25780:	8114      	strh	r4, [r2, #8]
}
   25782:	b002      	add	sp, #8
   25784:	bd10      	pop	{r4, pc}

00025786 <gatt_sub_remove.part.0>:
static void gatt_sub_remove(struct bt_conn *conn, struct gatt_sub *sub,
   25786:	b507      	push	{r0, r1, r2, lr}
		bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   25788:	2300      	movs	r3, #0
   2578a:	4669      	mov	r1, sp
   2578c:	3001      	adds	r0, #1
   2578e:	9300      	str	r3, [sp, #0]
   25790:	f8cd 3003 	str.w	r3, [sp, #3]
   25794:	f7ff ffe2 	bl	2575c <bt_addr_le_copy>
}
   25798:	b003      	add	sp, #12
   2579a:	f85d fb04 	ldr.w	pc, [sp], #4

0002579e <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2579e:	2300      	movs	r3, #0
   257a0:	6003      	str	r3, [r0, #0]
   257a2:	6043      	str	r3, [r0, #4]
   257a4:	6083      	str	r3, [r0, #8]
}
   257a6:	4770      	bx	lr

000257a8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   257a8:	2a02      	cmp	r2, #2
{
   257aa:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   257ac:	d108      	bne.n	257c0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   257ae:	2300      	movs	r3, #0
   257b0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   257b4:	461a      	mov	r2, r3
   257b6:	7a00      	ldrb	r0, [r0, #8]
   257b8:	f7e4 f822 	bl	9800 <sc_save>
}
   257bc:	2002      	movs	r0, #2
   257be:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   257c0:	f7e4 f95e 	bl	9a80 <sc_clear>
   257c4:	e7fa      	b.n	257bc <sc_ccc_cfg_write+0x14>

000257c6 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   257c6:	b538      	push	{r3, r4, r5, lr}
   257c8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   257cc:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   257ce:	460c      	mov	r4, r1
   257d0:	4611      	mov	r1, r2
	if (offset > value_len) {
   257d2:	d30a      	bcc.n	257ea <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   257d4:	1aad      	subs	r5, r5, r2
   257d6:	42a5      	cmp	r5, r4
   257d8:	bfa8      	it	ge
   257da:	4625      	movge	r5, r4
   257dc:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   257de:	462a      	mov	r2, r5
   257e0:	4419      	add	r1, r3
   257e2:	f005 ffba 	bl	2b75a <memcpy>
}
   257e6:	4628      	mov	r0, r5
   257e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   257ea:	f06f 0506 	mvn.w	r5, #6
   257ee:	e7fa      	b.n	257e6 <bt_gatt_attr_read.constprop.0+0x20>

000257f0 <bt_gatt_attr_read_ccc>:
{
   257f0:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   257f2:	68c9      	ldr	r1, [r1, #12]
{
   257f4:	b085      	sub	sp, #20
   257f6:	4614      	mov	r4, r2
   257f8:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   257fa:	f7ff ff5f 	bl	256bc <find_ccc_cfg>
	if (cfg) {
   257fe:	b100      	cbz	r0, 25802 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   25800:	8900      	ldrh	r0, [r0, #8]
   25802:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25806:	2302      	movs	r3, #2
   25808:	9300      	str	r3, [sp, #0]
   2580a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2580e:	f10d 030e 	add.w	r3, sp, #14
   25812:	4629      	mov	r1, r5
   25814:	4620      	mov	r0, r4
   25816:	f7ff ffd6 	bl	257c6 <bt_gatt_attr_read.constprop.0>
}
   2581a:	b005      	add	sp, #20
   2581c:	bd30      	pop	{r4, r5, pc}

0002581e <bt_gatt_attr_read_service>:
{
   2581e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   25820:	460c      	mov	r4, r1
   25822:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   25824:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   25826:	781c      	ldrb	r4, [r3, #0]
{
   25828:	4610      	mov	r0, r2
   2582a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2582e:	b954      	cbnz	r4, 25846 <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25830:	885b      	ldrh	r3, [r3, #2]
   25832:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25836:	2302      	movs	r3, #2
   25838:	9300      	str	r3, [sp, #0]
   2583a:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2583e:	f7ff ffc2 	bl	257c6 <bt_gatt_attr_read.constprop.0>
}
   25842:	b004      	add	sp, #16
   25844:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   25846:	2410      	movs	r4, #16
   25848:	9400      	str	r4, [sp, #0]
   2584a:	3301      	adds	r3, #1
   2584c:	e7f7      	b.n	2583e <bt_gatt_attr_read_service+0x20>

0002584e <cf_read>:
{
   2584e:	b530      	push	{r4, r5, lr}
   25850:	b085      	sub	sp, #20
   25852:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   25854:	2300      	movs	r3, #0
{
   25856:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   25858:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2585c:	f7e3 fed4 	bl	9608 <find_cf_cfg>
	if (cfg) {
   25860:	b110      	cbz	r0, 25868 <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   25862:	7a03      	ldrb	r3, [r0, #8]
   25864:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   25868:	2301      	movs	r3, #1
   2586a:	9300      	str	r3, [sp, #0]
   2586c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   25870:	ab03      	add	r3, sp, #12
   25872:	4629      	mov	r1, r5
   25874:	4620      	mov	r0, r4
   25876:	f7ff ffa6 	bl	257c6 <bt_gatt_attr_read.constprop.0>
}
   2587a:	b005      	add	sp, #20
   2587c:	bd30      	pop	{r4, r5, pc}

0002587e <read_name>:
{
   2587e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25882:	4614      	mov	r4, r2
   25884:	461d      	mov	r5, r3
   25886:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2588a:	f7e1 fa49 	bl	6d20 <bt_get_name>
   2588e:	4606      	mov	r6, r0
				 strlen(name));
   25890:	f7da fdfc 	bl	48c <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25894:	b280      	uxth	r0, r0
   25896:	9006      	str	r0, [sp, #24]
   25898:	4633      	mov	r3, r6
   2589a:	463a      	mov	r2, r7
   2589c:	4629      	mov	r1, r5
   2589e:	4620      	mov	r0, r4
}
   258a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   258a4:	f7ff bf8f 	b.w	257c6 <bt_gatt_attr_read.constprop.0>

000258a8 <read_appearance>:
{
   258a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   258aa:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   258ac:	f240 3341 	movw	r3, #833	; 0x341
   258b0:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   258b4:	2302      	movs	r3, #2
   258b6:	9300      	str	r3, [sp, #0]
{
   258b8:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   258ba:	f10d 030e 	add.w	r3, sp, #14
   258be:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   258c2:	f7ff ff80 	bl	257c6 <bt_gatt_attr_read.constprop.0>
}
   258c6:	b005      	add	sp, #20
   258c8:	f85d fb04 	ldr.w	pc, [sp], #4

000258cc <clear_cf_cfg>:
{
   258cc:	b513      	push	{r0, r1, r4, lr}
   258ce:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   258d0:	2400      	movs	r4, #0
   258d2:	4669      	mov	r1, sp
   258d4:	3001      	adds	r0, #1
   258d6:	9400      	str	r4, [sp, #0]
   258d8:	f8cd 4003 	str.w	r4, [sp, #3]
   258dc:	f7ff ff3e 	bl	2575c <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   258e0:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   258e2:	320c      	adds	r2, #12
   258e4:	f3bf 8f5b 	dmb	ish
   258e8:	e852 3f00 	ldrex	r3, [r2]
   258ec:	e842 4100 	strex	r1, r4, [r2]
   258f0:	2900      	cmp	r1, #0
   258f2:	d1f9      	bne.n	258e8 <clear_cf_cfg+0x1c>
   258f4:	f3bf 8f5b 	dmb	ish
}
   258f8:	b002      	add	sp, #8
   258fa:	bd10      	pop	{r4, pc}

000258fc <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   258fc:	2301      	movs	r3, #1
   258fe:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25900:	f3bf 8f5b 	dmb	ish
   25904:	e850 2f00 	ldrex	r2, [r0]
   25908:	431a      	orrs	r2, r3
   2590a:	e840 2100 	strex	r1, r2, [r0]
   2590e:	2900      	cmp	r1, #0
   25910:	d1f8      	bne.n	25904 <atomic_set_bit+0x8>
   25912:	f3bf 8f5b 	dmb	ish
}
   25916:	4770      	bx	lr

00025918 <sc_restore_rsp>:
{
   25918:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   2591a:	f7e3 fe75 	bl	9608 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2591e:	b140      	cbz	r0, 25932 <sc_restore_rsp+0x1a>
   25920:	7a03      	ldrb	r3, [r0, #8]
   25922:	07db      	lsls	r3, r3, #31
   25924:	d505      	bpl.n	25932 <sc_restore_rsp+0x1a>
}
   25926:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2592a:	2100      	movs	r1, #0
   2592c:	300c      	adds	r0, #12
   2592e:	f7ff bfe5 	b.w	258fc <atomic_set_bit>
}
   25932:	bd08      	pop	{r3, pc}

00025934 <gatt_sub_remove>:
{
   25934:	b538      	push	{r3, r4, r5, lr}
   25936:	460c      	mov	r4, r1
	if (params) {
   25938:	4619      	mov	r1, r3
   2593a:	b16b      	cbz	r3, 25958 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2593c:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   25940:	695b      	ldr	r3, [r3, #20]
   25942:	b982      	cbnz	r2, 25966 <gatt_sub_remove+0x32>
   25944:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   25946:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   25948:	4295      	cmp	r5, r2
   2594a:	d100      	bne.n	2594e <gatt_sub_remove+0x1a>
	list->tail = node;
   2594c:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2594e:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   25950:	680d      	ldr	r5, [r1, #0]
   25952:	614b      	str	r3, [r1, #20]
   25954:	461a      	mov	r2, r3
   25956:	47a8      	blx	r5
	if (sys_slist_is_empty(&sub->list)) {
   25958:	68a3      	ldr	r3, [r4, #8]
   2595a:	b953      	cbnz	r3, 25972 <gatt_sub_remove+0x3e>
   2595c:	4620      	mov	r0, r4
}
   2595e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25962:	f7ff bf10 	b.w	25786 <gatt_sub_remove.part.0>
   25966:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   25968:	68e3      	ldr	r3, [r4, #12]
   2596a:	429d      	cmp	r5, r3
	list->tail = node;
   2596c:	bf08      	it	eq
   2596e:	60e2      	streq	r2, [r4, #12]
}
   25970:	e7ed      	b.n	2594e <gatt_sub_remove+0x1a>
   25972:	bd38      	pop	{r3, r4, r5, pc}

00025974 <gatt_write_ccc_rsp>:
{
   25974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25978:	9c06      	ldr	r4, [sp, #24]
   2597a:	460e      	mov	r6, r1
   2597c:	4605      	mov	r5, r0
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2597e:	f06f 0104 	mvn.w	r1, #4
   25982:	f104 0010 	add.w	r0, r4, #16
   25986:	f7ff febf 	bl	25708 <atomic_and>
	if (err) {
   2598a:	b1e6      	cbz	r6, 259c6 <gatt_write_ccc_rsp+0x52>
		sub = gatt_sub_find(conn);
   2598c:	4628      	mov	r0, r5
   2598e:	f7e3 fe69 	bl	9664 <gatt_sub_find>
		if (!sub) {
   25992:	4601      	mov	r1, r0
   25994:	b308      	cbz	r0, 259da <gatt_write_ccc_rsp+0x66>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   25996:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   25998:	b143      	cbz	r3, 259ac <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2599a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2599c:	f104 0014 	add.w	r0, r4, #20
   259a0:	4283      	cmp	r3, r0
   259a2:	d10b      	bne.n	259bc <gatt_write_ccc_rsp+0x48>
				gatt_sub_remove(conn, sub, tmp, params);
   259a4:	4623      	mov	r3, r4
   259a6:	4628      	mov	r0, r5
   259a8:	f7ff ffc4 	bl	25934 <gatt_sub_remove>
	if (params->write) {
   259ac:	6863      	ldr	r3, [r4, #4]
   259ae:	b1a3      	cbz	r3, 259da <gatt_write_ccc_rsp+0x66>
		params->write(conn, err, NULL);
   259b0:	4631      	mov	r1, r6
   259b2:	4628      	mov	r0, r5
   259b4:	2200      	movs	r2, #0
}
   259b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   259ba:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   259bc:	2a00      	cmp	r2, #0
   259be:	d0f5      	beq.n	259ac <gatt_write_ccc_rsp+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   259c0:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   259c2:	6812      	ldr	r2, [r2, #0]
   259c4:	e7ec      	b.n	259a0 <gatt_write_ccc_rsp+0x2c>
	} else if (!params->value) {
   259c6:	89a3      	ldrh	r3, [r4, #12]
   259c8:	2b00      	cmp	r3, #0
   259ca:	d1ef      	bne.n	259ac <gatt_write_ccc_rsp+0x38>
		params->notify(conn, params, NULL, 0);
   259cc:	6827      	ldr	r7, [r4, #0]
   259ce:	4633      	mov	r3, r6
   259d0:	4632      	mov	r2, r6
   259d2:	4621      	mov	r1, r4
   259d4:	4628      	mov	r0, r5
   259d6:	47b8      	blx	r7
   259d8:	e7e8      	b.n	259ac <gatt_write_ccc_rsp+0x38>
}
   259da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000259de <bt_gatt_attr_value_handle>:
{
   259de:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   259e0:	4604      	mov	r4, r0
   259e2:	b910      	cbnz	r0, 259ea <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   259e4:	2000      	movs	r0, #0
}
   259e6:	b002      	add	sp, #8
   259e8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   259ea:	2300      	movs	r3, #0
   259ec:	f88d 3004 	strb.w	r3, [sp, #4]
   259f0:	6800      	ldr	r0, [r0, #0]
   259f2:	f642 0303 	movw	r3, #10243	; 0x2803
   259f6:	a901      	add	r1, sp, #4
   259f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   259fc:	f7fe fe8a 	bl	24714 <bt_uuid_cmp>
   25a00:	2800      	cmp	r0, #0
   25a02:	d1ef      	bne.n	259e4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25a04:	68e3      	ldr	r3, [r4, #12]
   25a06:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25a08:	2800      	cmp	r0, #0
   25a0a:	d1ec      	bne.n	259e6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25a0c:	4620      	mov	r0, r4
   25a0e:	f7e4 fbb1 	bl	a174 <bt_gatt_attr_get_handle>
   25a12:	3001      	adds	r0, #1
   25a14:	b280      	uxth	r0, r0
	return handle;
   25a16:	e7e6      	b.n	259e6 <bt_gatt_attr_value_handle+0x8>

00025a18 <bt_gatt_attr_read_chrc>:
{
   25a18:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25a1a:	68ce      	ldr	r6, [r1, #12]
{
   25a1c:	b088      	sub	sp, #32
   25a1e:	4608      	mov	r0, r1
   25a20:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   25a22:	79b3      	ldrb	r3, [r6, #6]
   25a24:	f88d 300c 	strb.w	r3, [sp, #12]
{
   25a28:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25a2a:	f7ff ffd8 	bl	259de <bt_gatt_attr_value_handle>
   25a2e:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25a32:	6830      	ldr	r0, [r6, #0]
   25a34:	7803      	ldrb	r3, [r0, #0]
   25a36:	b96b      	cbnz	r3, 25a54 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25a38:	8843      	ldrh	r3, [r0, #2]
   25a3a:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   25a3e:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25a40:	9300      	str	r3, [sp, #0]
   25a42:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   25a46:	ab03      	add	r3, sp, #12
   25a48:	4629      	mov	r1, r5
   25a4a:	4620      	mov	r0, r4
   25a4c:	f7ff febb 	bl	257c6 <bt_gatt_attr_read.constprop.0>
}
   25a50:	b008      	add	sp, #32
   25a52:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25a54:	1c43      	adds	r3, r0, #1
   25a56:	f10d 020f 	add.w	r2, sp, #15
   25a5a:	3011      	adds	r0, #17
   25a5c:	f853 1b04 	ldr.w	r1, [r3], #4
   25a60:	f842 1b04 	str.w	r1, [r2], #4
   25a64:	4283      	cmp	r3, r0
   25a66:	d1f9      	bne.n	25a5c <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   25a68:	2313      	movs	r3, #19
   25a6a:	e7e9      	b.n	25a40 <bt_gatt_attr_read_chrc+0x28>

00025a6c <bt_gatt_foreach_attr>:
{
   25a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25a6e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25a72:	2300      	movs	r3, #0
   25a74:	9300      	str	r3, [sp, #0]
   25a76:	461a      	mov	r2, r3
   25a78:	f7e4 fbac 	bl	a1d4 <bt_gatt_foreach_attr_type>
}
   25a7c:	b005      	add	sp, #20
   25a7e:	f85d fb04 	ldr.w	pc, [sp], #4

00025a82 <db_hash_process>:
	db_hash_gen(true);
   25a82:	2001      	movs	r0, #1
   25a84:	f7e4 bc00 	b.w	a288 <db_hash_gen>

00025a88 <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   25a88:	07d3      	lsls	r3, r2, #31
{
   25a8a:	b510      	push	{r4, lr}
   25a8c:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25a8e:	d504      	bpl.n	25a9a <bt_gatt_check_perm+0x12>
   25a90:	f014 0f15 	tst.w	r4, #21
   25a94:	d017      	beq.n	25ac6 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25a96:	684b      	ldr	r3, [r1, #4]
   25a98:	b1ab      	cbz	r3, 25ac6 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25a9a:	0793      	lsls	r3, r2, #30
   25a9c:	d504      	bpl.n	25aa8 <bt_gatt_check_perm+0x20>
   25a9e:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   25aa2:	d012      	beq.n	25aca <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25aa4:	688b      	ldr	r3, [r1, #8]
   25aa6:	b183      	cbz	r3, 25aca <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   25aa8:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25aaa:	f014 0f30 	tst.w	r4, #48	; 0x30
   25aae:	d104      	bne.n	25aba <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25ab0:	f014 000c 	ands.w	r0, r4, #12
   25ab4:	bf18      	it	ne
   25ab6:	200f      	movne	r0, #15
}
   25ab8:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25aba:	f7ff f833 	bl	24b24 <bt_conn_get_security>
   25abe:	2802      	cmp	r0, #2
   25ac0:	d8f6      	bhi.n	25ab0 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   25ac2:	2005      	movs	r0, #5
   25ac4:	e7f8      	b.n	25ab8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25ac6:	2002      	movs	r0, #2
   25ac8:	e7f6      	b.n	25ab8 <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25aca:	2003      	movs	r0, #3
   25acc:	e7f4      	b.n	25ab8 <bt_gatt_check_perm+0x30>

00025ace <gatt_discover_next>:
{
   25ace:	b570      	push	{r4, r5, r6, lr}
   25ad0:	4605      	mov	r5, r0
   25ad2:	4614      	mov	r4, r2
	if (!last_handle)
   25ad4:	b929      	cbnz	r1, 25ae2 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   25ad6:	4621      	mov	r1, r4
   25ad8:	4628      	mov	r0, r5
   25ada:	f7e4 fe27 	bl	a72c <bt_gatt_discover>
   25ade:	b928      	cbnz	r0, 25aec <gatt_discover_next+0x1e>
}
   25ae0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   25ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25ae6:	4291      	cmp	r1, r2
   25ae8:	d107      	bne.n	25afa <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   25aea:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   25aec:	6863      	ldr	r3, [r4, #4]
   25aee:	4622      	mov	r2, r4
   25af0:	4628      	mov	r0, r5
   25af2:	2100      	movs	r1, #0
}
   25af4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   25af8:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   25afa:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   25afc:	1c4b      	adds	r3, r1, #1
   25afe:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   25b00:	429a      	cmp	r2, r3
		params->start_handle++;
   25b02:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   25b04:	d2e7      	bcs.n	25ad6 <gatt_discover_next+0x8>
   25b06:	e7f1      	b.n	25aec <gatt_discover_next+0x1e>

00025b08 <gatt_find_type_rsp>:
{
   25b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25b0c:	b088      	sub	sp, #32
   25b0e:	4607      	mov	r7, r0
   25b10:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   25b14:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   25b16:	b911      	cbnz	r1, 25b1e <gatt_find_type_rsp+0x16>
   25b18:	f013 0803 	ands.w	r8, r3, #3
   25b1c:	d008      	beq.n	25b30 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   25b1e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   25b22:	464a      	mov	r2, r9
   25b24:	2100      	movs	r1, #0
   25b26:	4638      	mov	r0, r7
   25b28:	4798      	blx	r3
}
   25b2a:	b008      	add	sp, #32
   25b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   25b30:	f3c3 0387 	ubfx	r3, r3, #2, #8
   25b34:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   25b38:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   25b3a:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   25b3e:	42ac      	cmp	r4, r5
   25b40:	d105      	bne.n	25b4e <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   25b42:	464a      	mov	r2, r9
   25b44:	4641      	mov	r1, r8
   25b46:	4638      	mov	r0, r7
   25b48:	f7ff ffc1 	bl	25ace <gatt_discover_next>
	return;
   25b4c:	e7ed      	b.n	25b2a <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   25b4e:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   25b50:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   25b54:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   25b58:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   25b5a:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   25b5e:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   25b62:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   25b64:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   25b66:	bf0c      	ite	eq
   25b68:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   25b6c:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   25b6e:	ab01      	add	r3, sp, #4
   25b70:	f8ad 1002 	strh.w	r1, [sp, #2]
   25b74:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   25b76:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   25b7a:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   25b7e:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   25b82:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   25b86:	f8cd d00c 	str.w	sp, [sp, #12]
   25b8a:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   25b8e:	464a      	mov	r2, r9
   25b90:	a903      	add	r1, sp, #12
   25b92:	4638      	mov	r0, r7
   25b94:	4798      	blx	r3
   25b96:	3404      	adds	r4, #4
   25b98:	2800      	cmp	r0, #0
   25b9a:	d1d0      	bne.n	25b3e <gatt_find_type_rsp+0x36>
   25b9c:	e7c5      	b.n	25b2a <gatt_find_type_rsp+0x22>

00025b9e <bt_gatt_unsubscribe>:
{
   25b9e:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   25ba2:	7a83      	ldrb	r3, [r0, #10]
   25ba4:	2b07      	cmp	r3, #7
{
   25ba6:	4681      	mov	r9, r0
   25ba8:	460e      	mov	r6, r1
	if (conn->state != BT_CONN_CONNECTED) {
   25baa:	d16e      	bne.n	25c8a <bt_gatt_unsubscribe+0xec>
	sub = gatt_sub_find(conn);
   25bac:	f7e3 fd5a 	bl	9664 <gatt_sub_find>
	if (!sub) {
   25bb0:	4607      	mov	r7, r0
   25bb2:	b920      	cbnz	r0, 25bbe <bt_gatt_unsubscribe+0x20>
		return -EINVAL;
   25bb4:	f06f 0015 	mvn.w	r0, #21
}
   25bb8:	b001      	add	sp, #4
   25bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25bbe:	6884      	ldr	r4, [r0, #8]
   25bc0:	b1cc      	cbz	r4, 25bf6 <bt_gatt_unsubscribe+0x58>
   25bc2:	f1b4 0514 	subs.w	r5, r4, #20
   25bc6:	d018      	beq.n	25bfa <bt_gatt_unsubscribe+0x5c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25bc8:	6824      	ldr	r4, [r4, #0]
   25bca:	b104      	cbz	r4, 25bce <bt_gatt_unsubscribe+0x30>
   25bcc:	3c14      	subs	r4, #20
   25bce:	f04f 0800 	mov.w	r8, #0
   25bd2:	46c3      	mov	fp, r8
   25bd4:	46c2      	mov	sl, r8
	parent->next = child;
   25bd6:	4642      	mov	r2, r8
   25bd8:	b98d      	cbnz	r5, 25bfe <bt_gatt_unsubscribe+0x60>
	if (!found) {
   25bda:	f1bb 0f00 	cmp.w	fp, #0
   25bde:	d0e9      	beq.n	25bb4 <bt_gatt_unsubscribe+0x16>
	if (has_subscription) {
   25be0:	f1ba 0f00 	cmp.w	sl, #0
   25be4:	d046      	beq.n	25c74 <bt_gatt_unsubscribe+0xd6>
		params->notify(conn, params, NULL, 0);
   25be6:	6834      	ldr	r4, [r6, #0]
   25be8:	462b      	mov	r3, r5
   25bea:	462a      	mov	r2, r5
   25bec:	4631      	mov	r1, r6
   25bee:	4648      	mov	r0, r9
   25bf0:	47a0      	blx	r4
		return 0;
   25bf2:	4628      	mov	r0, r5
   25bf4:	e7e0      	b.n	25bb8 <bt_gatt_unsubscribe+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25bf6:	4625      	mov	r5, r4
   25bf8:	e7e9      	b.n	25bce <bt_gatt_unsubscribe+0x30>
   25bfa:	462c      	mov	r4, r5
   25bfc:	e7e7      	b.n	25bce <bt_gatt_unsubscribe+0x30>
		if (params == tmp) {
   25bfe:	42b5      	cmp	r5, r6
   25c00:	f105 0114 	add.w	r1, r5, #20
   25c04:	d129      	bne.n	25c5a <bt_gatt_unsubscribe+0xbc>
Z_GENLIST_REMOVE(slist, snode)
   25c06:	6968      	ldr	r0, [r5, #20]
   25c08:	f1b8 0f00 	cmp.w	r8, #0
   25c0c:	d11d      	bne.n	25c4a <bt_gatt_unsubscribe+0xac>
   25c0e:	68fb      	ldr	r3, [r7, #12]
	list->head = node;
   25c10:	60b8      	str	r0, [r7, #8]
Z_GENLIST_REMOVE(slist, snode)
   25c12:	4299      	cmp	r1, r3
   25c14:	d100      	bne.n	25c18 <bt_gatt_unsubscribe+0x7a>
	list->tail = node;
   25c16:	60f8      	str	r0, [r7, #12]
	parent->next = child;
   25c18:	616a      	str	r2, [r5, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25c1a:	f3bf 8f5b 	dmb	ish
   25c1e:	6933      	ldr	r3, [r6, #16]
   25c20:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25c24:	f3c3 0b80 	ubfx	fp, r3, #2, #1
			if (atomic_test_bit(params->flags,
   25c28:	075b      	lsls	r3, r3, #29
   25c2a:	d51e      	bpl.n	25c6a <bt_gatt_unsubscribe+0xcc>
	bt_att_req_cancel(conn, params);
   25c2c:	4631      	mov	r1, r6
   25c2e:	4648      	mov	r0, r9
   25c30:	f7e3 fc7a 	bl	9528 <bt_att_req_cancel>
}
   25c34:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25c36:	b1dc      	cbz	r4, 25c70 <bt_gatt_unsubscribe+0xd2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25c38:	f114 0314 	adds.w	r3, r4, #20
   25c3c:	d002      	beq.n	25c44 <bt_gatt_unsubscribe+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25c3e:	6963      	ldr	r3, [r4, #20]
   25c40:	b103      	cbz	r3, 25c44 <bt_gatt_unsubscribe+0xa6>
   25c42:	3b14      	subs	r3, #20
   25c44:	4625      	mov	r5, r4
   25c46:	461c      	mov	r4, r3
   25c48:	e7c6      	b.n	25bd8 <bt_gatt_unsubscribe+0x3a>
	parent->next = child;
   25c4a:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   25c4e:	68fb      	ldr	r3, [r7, #12]
   25c50:	4299      	cmp	r1, r3
	list->tail = node;
   25c52:	bf08      	it	eq
   25c54:	f8c7 800c 	streq.w	r8, [r7, #12]
}
   25c58:	e7de      	b.n	25c18 <bt_gatt_unsubscribe+0x7a>
		if (tmp->value_handle == params->value_handle) {
   25c5a:	8928      	ldrh	r0, [r5, #8]
   25c5c:	8933      	ldrh	r3, [r6, #8]
   25c5e:	4688      	mov	r8, r1
   25c60:	4298      	cmp	r0, r3
   25c62:	bf08      	it	eq
   25c64:	f04f 0a01 	moveq.w	sl, #1
   25c68:	e7e5      	b.n	25c36 <bt_gatt_unsubscribe+0x98>
			found = true;
   25c6a:	f04f 0b01 	mov.w	fp, #1
   25c6e:	e7e2      	b.n	25c36 <bt_gatt_unsubscribe+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   25c70:	4623      	mov	r3, r4
   25c72:	e7e7      	b.n	25c44 <bt_gatt_unsubscribe+0xa6>
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   25c74:	8971      	ldrh	r1, [r6, #10]
	params->value = 0x0000;
   25c76:	f8a6 a00c 	strh.w	sl, [r6, #12]
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   25c7a:	4633      	mov	r3, r6
   25c7c:	4652      	mov	r2, sl
   25c7e:	4648      	mov	r0, r9
}
   25c80:	b001      	add	sp, #4
   25c82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params->ccc_handle, params->value,
   25c86:	f7e4 b8b1 	b.w	9dec <gatt_write_ccc.constprop.0>
		return -ENOTCONN;
   25c8a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   25c8e:	e793      	b.n	25bb8 <bt_gatt_unsubscribe+0x1a>

00025c90 <bt_gatt_notification>:
{
   25c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25c94:	4607      	mov	r7, r0
   25c96:	4688      	mov	r8, r1
   25c98:	4691      	mov	r9, r2
   25c9a:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   25c9c:	f7e3 fce2 	bl	9664 <gatt_sub_find>
	if (!sub) {
   25ca0:	b1f8      	cbz	r0, 25ce2 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25ca2:	6883      	ldr	r3, [r0, #8]
   25ca4:	b1eb      	cbz	r3, 25ce2 <bt_gatt_notification+0x52>
   25ca6:	f1b3 0614 	subs.w	r6, r3, #20
   25caa:	d01a      	beq.n	25ce2 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25cac:	681c      	ldr	r4, [r3, #0]
   25cae:	b104      	cbz	r4, 25cb2 <bt_gatt_notification+0x22>
   25cb0:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   25cb2:	8933      	ldrh	r3, [r6, #8]
   25cb4:	4543      	cmp	r3, r8
   25cb6:	d10a      	bne.n	25cce <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   25cb8:	6835      	ldr	r5, [r6, #0]
   25cba:	4653      	mov	r3, sl
   25cbc:	464a      	mov	r2, r9
   25cbe:	4631      	mov	r1, r6
   25cc0:	4638      	mov	r0, r7
   25cc2:	47a8      	blx	r5
   25cc4:	b918      	cbnz	r0, 25cce <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   25cc6:	4631      	mov	r1, r6
   25cc8:	4638      	mov	r0, r7
   25cca:	f7ff ff68 	bl	25b9e <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   25cce:	b144      	cbz	r4, 25ce2 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25cd0:	f114 0514 	adds.w	r5, r4, #20
   25cd4:	d002      	beq.n	25cdc <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25cd6:	6965      	ldr	r5, [r4, #20]
   25cd8:	b105      	cbz	r5, 25cdc <bt_gatt_notification+0x4c>
   25cda:	3d14      	subs	r5, #20
{
   25cdc:	4626      	mov	r6, r4
   25cde:	462c      	mov	r4, r5
   25ce0:	e7e7      	b.n	25cb2 <bt_gatt_notification+0x22>
}
   25ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025ce6 <bt_gatt_change_aware>:
{
   25ce6:	b570      	push	{r4, r5, r6, lr}
   25ce8:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   25cea:	f7e3 fc8d 	bl	9608 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25cee:	b910      	cbnz	r0, 25cf6 <bt_gatt_change_aware+0x10>
		return true;
   25cf0:	2401      	movs	r4, #1
}
   25cf2:	4620      	mov	r0, r4
   25cf4:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25cf6:	7a03      	ldrb	r3, [r0, #8]
   25cf8:	07da      	lsls	r2, r3, #31
   25cfa:	d5f9      	bpl.n	25cf0 <bt_gatt_change_aware+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25cfc:	f3bf 8f5b 	dmb	ish
   25d00:	68c5      	ldr	r5, [r0, #12]
   25d02:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25d06:	f015 0501 	ands.w	r5, r5, #1
   25d0a:	f100 060c 	add.w	r6, r0, #12
   25d0e:	d1ef      	bne.n	25cf0 <bt_gatt_change_aware+0xa>
	if (!req) {
   25d10:	2c00      	cmp	r4, #0
   25d12:	d0ee      	beq.n	25cf2 <bt_gatt_change_aware+0xc>
   25d14:	f3bf 8f5b 	dmb	ish
   25d18:	68c3      	ldr	r3, [r0, #12]
   25d1a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25d1e:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   25d22:	079b      	lsls	r3, r3, #30
   25d24:	d509      	bpl.n	25d3a <bt_gatt_change_aware+0x54>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25d26:	f06f 0102 	mvn.w	r1, #2
   25d2a:	4630      	mov	r0, r6
   25d2c:	f7ff fcec 	bl	25708 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   25d30:	4629      	mov	r1, r5
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   25d32:	4630      	mov	r0, r6
   25d34:	f7ff fde2 	bl	258fc <atomic_set_bit>
	return false;
   25d38:	e7db      	b.n	25cf2 <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   25d3a:	2101      	movs	r1, #1
   25d3c:	e7f9      	b.n	25d32 <bt_gatt_change_aware+0x4c>

00025d3e <bt_smp_recv>:
{
   25d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   25d40:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->conn;
   25d42:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   25d44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25d48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25d4c:	4608      	mov	r0, r1
   25d4e:	f7fe ffdf 	bl	24d10 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   25d52:	f100 0608 	add.w	r6, r0, #8
   25d56:	4604      	mov	r4, r0
   25d58:	2101      	movs	r1, #1
   25d5a:	4630      	mov	r0, r6
   25d5c:	f000 f874 	bl	25e48 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   25d60:	2505      	movs	r5, #5
   25d62:	7005      	strb	r5, [r0, #0]
   25d64:	2101      	movs	r1, #1
   25d66:	4630      	mov	r0, r6
   25d68:	f000 f86e 	bl	25e48 <net_buf_simple_add>
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   25d6c:	7005      	strb	r5, [r0, #0]
   25d6e:	2500      	movs	r5, #0
   25d70:	9500      	str	r5, [sp, #0]
   25d72:	462b      	mov	r3, r5
   25d74:	4622      	mov	r2, r4
   25d76:	2106      	movs	r1, #6
   25d78:	4638      	mov	r0, r7
   25d7a:	f7fe ffcc 	bl	24d16 <bt_l2cap_send_cb>
}
   25d7e:	4628      	mov	r0, r5
   25d80:	b003      	add	sp, #12
   25d82:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025d84 <bt_smp_sign>:
   25d84:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25d88:	4770      	bx	lr

00025d8a <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   25d8a:	2000      	movs	r0, #0
   25d8c:	4770      	bx	lr

00025d8e <fixed_data_unref>:
}
   25d8e:	4770      	bx	lr

00025d90 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25d90:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   25d92:	6849      	ldr	r1, [r1, #4]
   25d94:	6809      	ldr	r1, [r1, #0]
   25d96:	f7f2 ba8d 	b.w	182b4 <net_buf_alloc_len>

00025d9a <net_buf_get>:
{
   25d9a:	b570      	push	{r4, r5, r6, lr}
   25d9c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   25d9e:	f7f9 fd9f 	bl	1f8e0 <z_impl_k_queue_get>
	if (!buf) {
   25da2:	4605      	mov	r5, r0
   25da4:	b128      	cbz	r0, 25db2 <net_buf_get+0x18>
   25da6:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25da8:	7963      	ldrb	r3, [r4, #5]
   25daa:	f013 0301 	ands.w	r3, r3, #1
   25dae:	d102      	bne.n	25db6 <net_buf_get+0x1c>
	frag->frags = NULL;
   25db0:	6023      	str	r3, [r4, #0]
}
   25db2:	4628      	mov	r0, r5
   25db4:	bd70      	pop	{r4, r5, r6, pc}
   25db6:	2300      	movs	r3, #0
   25db8:	2200      	movs	r2, #0
   25dba:	4630      	mov	r0, r6
   25dbc:	f7f9 fd90 	bl	1f8e0 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   25dc0:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   25dc2:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   25dc4:	f023 0301 	bic.w	r3, r3, #1
   25dc8:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   25dca:	4604      	mov	r4, r0
   25dcc:	e7ec      	b.n	25da8 <net_buf_get+0xe>

00025dce <net_buf_simple_init_with_data>:
	buf->size  = size;
   25dce:	b292      	uxth	r2, r2
	buf->__buf = data;
   25dd0:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   25dd2:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   25dd4:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   25dd6:	8082      	strh	r2, [r0, #4]
}
   25dd8:	4770      	bx	lr

00025dda <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   25dda:	6883      	ldr	r3, [r0, #8]
   25ddc:	440b      	add	r3, r1
   25dde:	6003      	str	r3, [r0, #0]
}
   25de0:	4770      	bx	lr

00025de2 <net_buf_put>:
{
   25de2:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   25de4:	460a      	mov	r2, r1
   25de6:	6814      	ldr	r4, [r2, #0]
   25de8:	b914      	cbnz	r4, 25df0 <net_buf_put+0xe>
}
   25dea:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   25dec:	f005 b8bd 	b.w	2af6a <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   25df0:	7953      	ldrb	r3, [r2, #5]
   25df2:	f043 0301 	orr.w	r3, r3, #1
   25df6:	7153      	strb	r3, [r2, #5]
   25df8:	4622      	mov	r2, r4
   25dfa:	e7f4      	b.n	25de6 <net_buf_put+0x4>

00025dfc <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   25dfc:	7902      	ldrb	r2, [r0, #4]
   25dfe:	3201      	adds	r2, #1
   25e00:	7102      	strb	r2, [r0, #4]
	return buf;
}
   25e02:	4770      	bx	lr

00025e04 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   25e04:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   25e06:	4618      	mov	r0, r3
   25e08:	681b      	ldr	r3, [r3, #0]
   25e0a:	2b00      	cmp	r3, #0
   25e0c:	d1fb      	bne.n	25e06 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   25e0e:	4770      	bx	lr

00025e10 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   25e10:	6802      	ldr	r2, [r0, #0]
{
   25e12:	b510      	push	{r4, lr}
	if (parent->frags) {
   25e14:	b12a      	cbz	r2, 25e22 <net_buf_frag_insert+0x12>
   25e16:	460b      	mov	r3, r1
	while (buf->frags) {
   25e18:	461c      	mov	r4, r3
   25e1a:	681b      	ldr	r3, [r3, #0]
   25e1c:	2b00      	cmp	r3, #0
   25e1e:	d1fb      	bne.n	25e18 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   25e20:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   25e22:	6001      	str	r1, [r0, #0]
}
   25e24:	bd10      	pop	{r4, pc}

00025e26 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   25e26:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   25e28:	4604      	mov	r4, r0
   25e2a:	b920      	cbnz	r0, 25e36 <net_buf_frag_add+0x10>
	buf->ref++;
   25e2c:	790b      	ldrb	r3, [r1, #4]
   25e2e:	3301      	adds	r3, #1
   25e30:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   25e32:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   25e34:	bd10      	pop	{r4, pc}
   25e36:	4603      	mov	r3, r0
	while (buf->frags) {
   25e38:	4618      	mov	r0, r3
   25e3a:	681b      	ldr	r3, [r3, #0]
   25e3c:	2b00      	cmp	r3, #0
   25e3e:	d1fb      	bne.n	25e38 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   25e40:	f7ff ffe6 	bl	25e10 <net_buf_frag_insert>
   25e44:	4620      	mov	r0, r4
   25e46:	e7f5      	b.n	25e34 <net_buf_frag_add+0xe>

00025e48 <net_buf_simple_add>:
	return buf->data + buf->len;
   25e48:	8883      	ldrh	r3, [r0, #4]
   25e4a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   25e4c:	4419      	add	r1, r3
   25e4e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   25e50:	18d0      	adds	r0, r2, r3
   25e52:	4770      	bx	lr

00025e54 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   25e54:	b510      	push	{r4, lr}
   25e56:	6803      	ldr	r3, [r0, #0]
   25e58:	8884      	ldrh	r4, [r0, #4]
   25e5a:	4423      	add	r3, r4
	buf->len += len;
   25e5c:	4414      	add	r4, r2
   25e5e:	8084      	strh	r4, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   25e60:	4618      	mov	r0, r3
   25e62:	f005 fc7a 	bl	2b75a <memcpy>
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   25e66:	bd10      	pop	{r4, pc}

00025e68 <net_buf_simple_add_u8>:
   25e68:	8883      	ldrh	r3, [r0, #4]
   25e6a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   25e6c:	b510      	push	{r4, lr}
	buf->len += len;
   25e6e:	1c5c      	adds	r4, r3, #1
   25e70:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   25e72:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   25e74:	18d0      	adds	r0, r2, r3
   25e76:	bd10      	pop	{r4, pc}

00025e78 <net_buf_simple_add_le16>:
   25e78:	8883      	ldrh	r3, [r0, #4]
   25e7a:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   25e7c:	b530      	push	{r4, r5, lr}
   25e7e:	18d4      	adds	r4, r2, r3
	buf->len += len;
   25e80:	1c9d      	adds	r5, r3, #2
   25e82:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   25e84:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   25e86:	0a09      	lsrs	r1, r1, #8
   25e88:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   25e8a:	bd30      	pop	{r4, r5, pc}

00025e8c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   25e8c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   25e8e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   25e90:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   25e92:	1a40      	subs	r0, r0, r1
	buf->len += len;
   25e94:	4411      	add	r1, r2
	buf->data -= len;
   25e96:	6018      	str	r0, [r3, #0]
	buf->len += len;
   25e98:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   25e9a:	4770      	bx	lr

00025e9c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25e9c:	8882      	ldrh	r2, [r0, #4]
   25e9e:	1a52      	subs	r2, r2, r1
{
   25ea0:	4603      	mov	r3, r0
	buf->len -= len;
   25ea2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   25ea4:	6800      	ldr	r0, [r0, #0]
   25ea6:	4408      	add	r0, r1
   25ea8:	6018      	str	r0, [r3, #0]
}
   25eaa:	4770      	bx	lr

00025eac <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   25eac:	4603      	mov	r3, r0
	void *data = buf->data;
   25eae:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   25eb0:	889a      	ldrh	r2, [r3, #4]
   25eb2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   25eb4:	4401      	add	r1, r0
	buf->len -= len;
   25eb6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   25eb8:	6019      	str	r1, [r3, #0]

	return data;
}
   25eba:	4770      	bx	lr

00025ebc <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   25ebc:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   25ebe:	6803      	ldr	r3, [r0, #0]
   25ec0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   25ec2:	2102      	movs	r1, #2
   25ec4:	f7ff ffea 	bl	25e9c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   25ec8:	4620      	mov	r0, r4
   25eca:	bd10      	pop	{r4, pc}

00025ecc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   25ecc:	6802      	ldr	r2, [r0, #0]
   25ece:	6880      	ldr	r0, [r0, #8]
}
   25ed0:	1a10      	subs	r0, r2, r0
   25ed2:	4770      	bx	lr

00025ed4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   25ed4:	8883      	ldrh	r3, [r0, #4]
   25ed6:	88c2      	ldrh	r2, [r0, #6]
   25ed8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   25eda:	6803      	ldr	r3, [r0, #0]
   25edc:	6880      	ldr	r0, [r0, #8]
   25ede:	1a18      	subs	r0, r3, r0
}
   25ee0:	1a10      	subs	r0, r2, r0
   25ee2:	4770      	bx	lr

00025ee4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   25ee4:	f000 001f 	and.w	r0, r0, #31
   25ee8:	0080      	lsls	r0, r0, #2
   25eea:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   25eee:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
   25ef2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   25ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   25efa:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   25efe:	4770      	bx	lr

00025f00 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f00:	6843      	ldr	r3, [r0, #4]
   25f02:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   25f04:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   25f08:	600b      	str	r3, [r1, #0]
}
   25f0a:	2000      	movs	r0, #0
   25f0c:	4770      	bx	lr

00025f0e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f0e:	6843      	ldr	r3, [r0, #4]
   25f10:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   25f12:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   25f16:	4042      	eors	r2, r0
   25f18:	400a      	ands	r2, r1
   25f1a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   25f1c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   25f20:	2000      	movs	r0, #0
   25f22:	4770      	bx	lr

00025f24 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f24:	6843      	ldr	r3, [r0, #4]
   25f26:	685b      	ldr	r3, [r3, #4]
}
   25f28:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   25f2a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   25f2e:	4770      	bx	lr

00025f30 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f30:	6843      	ldr	r3, [r0, #4]
   25f32:	685b      	ldr	r3, [r3, #4]
}
   25f34:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   25f36:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   25f3a:	4770      	bx	lr

00025f3c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25f3c:	6843      	ldr	r3, [r0, #4]
   25f3e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   25f40:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   25f44:	404b      	eors	r3, r1
    p_reg->OUT = value;
   25f46:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   25f4a:	2000      	movs	r0, #0
   25f4c:	4770      	bx	lr

00025f4e <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25f4e:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   25f50:	6858      	ldr	r0, [r3, #4]
{
   25f52:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   25f54:	b158      	cbz	r0, 25f6e <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25f56:	2400      	movs	r4, #0
   25f58:	4281      	cmp	r1, r0
   25f5a:	d113      	bne.n	25f84 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   25f5c:	6808      	ldr	r0, [r1, #0]
   25f5e:	b95c      	cbnz	r4, 25f78 <gpio_nrfx_manage_callback+0x2a>
   25f60:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   25f62:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   25f64:	42a1      	cmp	r1, r4
   25f66:	d100      	bne.n	25f6a <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   25f68:	6098      	str	r0, [r3, #8]
	parent->next = child;
   25f6a:	2000      	movs	r0, #0
   25f6c:	6008      	str	r0, [r1, #0]
	if (set) {
   25f6e:	b972      	cbnz	r2, 25f8e <gpio_nrfx_manage_callback+0x40>
	return 0;
   25f70:	2000      	movs	r0, #0
}
   25f72:	bd30      	pop	{r4, r5, pc}
   25f74:	4628      	mov	r0, r5
   25f76:	e7ef      	b.n	25f58 <gpio_nrfx_manage_callback+0xa>
   25f78:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   25f7a:	6898      	ldr	r0, [r3, #8]
   25f7c:	4281      	cmp	r1, r0
	list->tail = node;
   25f7e:	bf08      	it	eq
   25f80:	609c      	streq	r4, [r3, #8]
}
   25f82:	e7f2      	b.n	25f6a <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   25f84:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25f86:	4604      	mov	r4, r0
   25f88:	2d00      	cmp	r5, #0
   25f8a:	d1f3      	bne.n	25f74 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   25f8c:	b13a      	cbz	r2, 25f9e <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   25f8e:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   25f90:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   25f92:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   25f94:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   25f96:	2800      	cmp	r0, #0
   25f98:	d1ea      	bne.n	25f70 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   25f9a:	6099      	str	r1, [r3, #8]
}
   25f9c:	e7e9      	b.n	25f72 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   25f9e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   25fa2:	e7e6      	b.n	25f72 <gpio_nrfx_manage_callback+0x24>

00025fa4 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   25fa4:	2301      	movs	r3, #1
   25fa6:	fa03 f101 	lsl.w	r1, r3, r1
   25faa:	68c3      	ldr	r3, [r0, #12]
   25fac:	681b      	ldr	r3, [r3, #0]
   25fae:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   25fb0:	bf18      	it	ne
   25fb2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   25fb6:	b112      	cbz	r2, 25fbe <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   25fb8:	6883      	ldr	r3, [r0, #8]
   25fba:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   25fbc:	4718      	bx	r3
   25fbe:	6883      	ldr	r3, [r0, #8]
   25fc0:	691b      	ldr	r3, [r3, #16]
   25fc2:	e7fb      	b.n	25fbc <gpio_pin_set+0x18>

00025fc4 <_spi_context_cs_control.isra.0>:
static inline void _spi_context_cs_control(struct spi_context *ctx,
   25fc4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   25fc6:	6805      	ldr	r5, [r0, #0]
static inline void _spi_context_cs_control(struct spi_context *ctx,
   25fc8:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   25fca:	b1fd      	cbz	r5, 2600c <_spi_context_cs_control.isra.0+0x48>
   25fcc:	68ab      	ldr	r3, [r5, #8]
   25fce:	b1eb      	cbz	r3, 2600c <_spi_context_cs_control.isra.0+0x48>
   25fd0:	6818      	ldr	r0, [r3, #0]
   25fd2:	b1d8      	cbz	r0, 2600c <_spi_context_cs_control.isra.0+0x48>
		if (on) {
   25fd4:	b151      	cbz	r1, 25fec <_spi_context_cs_control.isra.0+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   25fd6:	7a19      	ldrb	r1, [r3, #8]
   25fd8:	2201      	movs	r2, #1
   25fda:	f7ff ffe3 	bl	25fa4 <gpio_pin_set>
			k_busy_wait(ctx->config->cs->delay);
   25fde:	6823      	ldr	r3, [r4, #0]
   25fe0:	689b      	ldr	r3, [r3, #8]
   25fe2:	6858      	ldr	r0, [r3, #4]
}
   25fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   25fe8:	f005 b90c 	b.w	2b204 <z_impl_k_busy_wait>
			if (!force_off &&
   25fec:	b912      	cbnz	r2, 25ff4 <_spi_context_cs_control.isra.0+0x30>
   25fee:	88aa      	ldrh	r2, [r5, #4]
   25ff0:	0492      	lsls	r2, r2, #18
   25ff2:	d40b      	bmi.n	2600c <_spi_context_cs_control.isra.0+0x48>
			k_busy_wait(ctx->config->cs->delay);
   25ff4:	6858      	ldr	r0, [r3, #4]
   25ff6:	f005 f905 	bl	2b204 <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   25ffa:	6823      	ldr	r3, [r4, #0]
   25ffc:	689b      	ldr	r3, [r3, #8]
   25ffe:	2200      	movs	r2, #0
   26000:	7a19      	ldrb	r1, [r3, #8]
   26002:	6818      	ldr	r0, [r3, #0]
}
   26004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   26008:	f7ff bfcc 	b.w	25fa4 <gpio_pin_set>
}
   2600c:	bd38      	pop	{r3, r4, r5, pc}

0002600e <spi_context_unlock_unconditionally>:
{
   2600e:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   26010:	2201      	movs	r2, #1
   26012:	2100      	movs	r1, #0
{
   26014:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   26016:	f7ff ffd5 	bl	25fc4 <_spi_context_cs_control.isra.0>
	if (!k_sem_count_get(&ctx->lock)) {
   2601a:	6923      	ldr	r3, [r4, #16]
   2601c:	b933      	cbnz	r3, 2602c <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2601e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   26020:	f104 0008 	add.w	r0, r4, #8
}
   26024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26028:	f7fa b82c 	b.w	20084 <z_impl_k_sem_give>
   2602c:	bd10      	pop	{r4, pc}

0002602e <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = get_dev_data(dev);
   2602e:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26030:	6803      	ldr	r3, [r0, #0]
   26032:	428b      	cmp	r3, r1
{
   26034:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26036:	d106      	bne.n	26046 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   26038:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   2603c:	b934      	cbnz	r4, 2604c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2603e:	f7ff ffe6 	bl	2600e <spi_context_unlock_unconditionally>
	return 0;
   26042:	4620      	mov	r0, r4
}
   26044:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26046:	f06f 0015 	mvn.w	r0, #21
   2604a:	e7fb      	b.n	26044 <spi_nrfx_release+0x16>
		return -EBUSY;
   2604c:	f06f 000f 	mvn.w	r0, #15
   26050:	e7f8      	b.n	26044 <spi_nrfx_release+0x16>

00026052 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   26052:	4700      	bx	r0

00026054 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   26054:	f005 b8d6 	b.w	2b204 <z_impl_k_busy_wait>

00026058 <nrfx_clock_enable>:
{
   26058:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2605a:	2000      	movs	r0, #0
   2605c:	f7de f9f4 	bl	4448 <arch_irq_is_enabled>
   26060:	b918      	cbnz	r0, 2606a <nrfx_clock_enable+0x12>
}
   26062:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   26066:	f7de b9cb 	b.w	4400 <arch_irq_enable>
   2606a:	bd08      	pop	{r3, pc}

0002606c <transfer_byte>:
{
   2606c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   2606e:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   26072:	698a      	ldr	r2, [r1, #24]
   26074:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   26076:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2607a:	6a0b      	ldr	r3, [r1, #32]
   2607c:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   2607e:	bf3e      	ittt	cc
   26080:	694a      	ldrcc	r2, [r1, #20]
   26082:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   26086:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   26088:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2608a:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   2608e:	1c53      	adds	r3, r2, #1
   26090:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   26092:	3202      	adds	r2, #2
    if (p_cb->abort)
   26094:	b13c      	cbz	r4, 260a6 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   26096:	690c      	ldr	r4, [r1, #16]
   26098:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2609a:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2609c:	bf38      	it	cc
   2609e:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   260a0:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   260a2:	bf88      	it	hi
   260a4:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   260a6:	690d      	ldr	r5, [r1, #16]
   260a8:	4295      	cmp	r5, r2
   260aa:	d905      	bls.n	260b8 <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   260ac:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   260ae:	5c9b      	ldrb	r3, [r3, r2]
   260b0:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   260b4:	2001      	movs	r0, #1
   260b6:	e00a      	b.n	260ce <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   260b8:	698c      	ldr	r4, [r1, #24]
   260ba:	4294      	cmp	r4, r2
   260bc:	d901      	bls.n	260c2 <transfer_byte+0x56>
   260be:	7fcb      	ldrb	r3, [r1, #31]
   260c0:	e7f6      	b.n	260b0 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   260c2:	42ab      	cmp	r3, r5
   260c4:	d3f6      	bcc.n	260b4 <transfer_byte+0x48>
   260c6:	42a3      	cmp	r3, r4
   260c8:	bf2c      	ite	cs
   260ca:	2000      	movcs	r0, #0
   260cc:	2001      	movcc	r0, #1
}
   260ce:	b003      	add	sp, #12
   260d0:	bd30      	pop	{r4, r5, pc}

000260d2 <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   260d2:	7b0a      	ldrb	r2, [r1, #12]
{
   260d4:	4603      	mov	r3, r0
   260d6:	2a03      	cmp	r2, #3
   260d8:	d829      	bhi.n	2612e <xfer_completeness_check+0x5c>
   260da:	e8df f002 	tbb	[pc, r2]
   260de:	2521      	.short	0x2521
   260e0:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   260e2:	688a      	ldr	r2, [r1, #8]
   260e4:	0350      	lsls	r0, r2, #13
   260e6:	d504      	bpl.n	260f2 <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   260e8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   260ec:	6908      	ldr	r0, [r1, #16]
   260ee:	4290      	cmp	r0, r2
   260f0:	d107      	bne.n	26102 <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   260f2:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   260f4:	0352      	lsls	r2, r2, #13
   260f6:	d41a      	bmi.n	2612e <xfer_completeness_check+0x5c>
   260f8:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   260fc:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   260fe:	4291      	cmp	r1, r2
   26100:	d015      	beq.n	2612e <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   26102:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   26104:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   26106:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2610a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2610e:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   26110:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   26114:	6908      	ldr	r0, [r1, #16]
   26116:	4290      	cmp	r0, r2
   26118:	d1f3      	bne.n	26102 <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   2611a:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2611e:	e7ed      	b.n	260fc <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   26120:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   26124:	6909      	ldr	r1, [r1, #16]
   26126:	e7ea      	b.n	260fe <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   26128:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2612c:	e7fa      	b.n	26124 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2612e:	2001      	movs	r0, #1
}
   26130:	4770      	bx	lr

00026132 <lv_disp_load_scr>:
{
   26132:	b510      	push	{r4, lr}
   26134:	4604      	mov	r4, r0
    lv_disp_t * d = lv_obj_get_disp(scr);
   26136:	f7f4 f86b 	bl	1a210 <lv_obj_get_disp>
    if(!d) return;  /*Shouldn't happen, just to be sure*/
   2613a:	b128      	cbz	r0, 26148 <lv_disp_load_scr+0x16>
    d->act_scr = scr;
   2613c:	6404      	str	r4, [r0, #64]	; 0x40
    lv_obj_invalidate(scr);
   2613e:	4620      	mov	r0, r4
}
   26140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    lv_obj_invalidate(scr);
   26144:	f000 b8c5 	b.w	262d2 <lv_obj_invalidate>
}
   26148:	bd10      	pop	{r4, pc}

0002614a <_lv_indev_init>:
    if(indev) {
   2614a:	2000      	movs	r0, #0
   2614c:	f7f3 bef8 	b.w	19f40 <lv_indev_reset.part.0>

00026150 <refresh_children_position>:
{
   26150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _LV_LL_READ(obj->child_ll, i) {
   26152:	1d07      	adds	r7, r0, #4
   26154:	4638      	mov	r0, r7
{
   26156:	460d      	mov	r5, r1
   26158:	4616      	mov	r6, r2
    _LV_LL_READ(obj->child_ll, i) {
   2615a:	f004 fa04 	bl	2a566 <_lv_ll_get_head>
   2615e:	4604      	mov	r4, r0
   26160:	b900      	cbnz	r0, 26164 <refresh_children_position+0x14>
}
   26162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        i->coords.x1 += x_diff;
   26164:	8a23      	ldrh	r3, [r4, #16]
   26166:	442b      	add	r3, r5
   26168:	8223      	strh	r3, [r4, #16]
        i->coords.y1 += y_diff;
   2616a:	8a63      	ldrh	r3, [r4, #18]
   2616c:	4433      	add	r3, r6
   2616e:	8263      	strh	r3, [r4, #18]
        i->coords.x2 += x_diff;
   26170:	8aa3      	ldrh	r3, [r4, #20]
   26172:	442b      	add	r3, r5
   26174:	82a3      	strh	r3, [r4, #20]
        i->coords.y2 += y_diff;
   26176:	8ae3      	ldrh	r3, [r4, #22]
   26178:	4433      	add	r3, r6
        refresh_children_position(i, x_diff, y_diff);
   2617a:	4629      	mov	r1, r5
   2617c:	4620      	mov	r0, r4
        i->coords.y2 += y_diff;
   2617e:	82e3      	strh	r3, [r4, #22]
        refresh_children_position(i, x_diff, y_diff);
   26180:	4632      	mov	r2, r6
   26182:	f7ff ffe5 	bl	26150 <refresh_children_position>
    _LV_LL_READ(obj->child_ll, i) {
   26186:	4621      	mov	r1, r4
   26188:	4638      	mov	r0, r7
   2618a:	f004 f9f2 	bl	2a572 <_lv_ll_get_next>
   2618e:	e7e6      	b.n	2615e <refresh_children_position+0xe>

00026190 <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   26190:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   26192:	2100      	movs	r1, #0
   26194:	f005 bb02 	b.w	2b79c <memset>

00026198 <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26198:	f005 badf 	b.w	2b75a <memcpy>

0002619c <lv_area_copy>:
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   2619c:	2208      	movs	r2, #8
   2619e:	f7ff bffb 	b.w	26198 <_lv_memcpy>

000261a2 <lv_obj_set_click>:
    obj->click = (en == true ? 1 : 0);
   261a2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
   261a6:	f361 0300 	bfi	r3, r1, #0, #1
   261aa:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
}
   261ae:	4770      	bx	lr

000261b0 <lv_event_send>:
{
   261b0:	b410      	push	{r4}
   261b2:	4613      	mov	r3, r2
   261b4:	460c      	mov	r4, r1
    if(obj == NULL) return LV_RES_OK;
   261b6:	4601      	mov	r1, r0
   261b8:	b120      	cbz	r0, 261c4 <lv_event_send+0x14>
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   261ba:	4622      	mov	r2, r4
   261bc:	6980      	ldr	r0, [r0, #24]
}
   261be:	bc10      	pop	{r4}
    res = lv_event_send_func(obj->event_cb, obj, event, data);
   261c0:	f7f3 bfe2 	b.w	1a188 <lv_event_send_func>
}
   261c4:	2001      	movs	r0, #1
   261c6:	bc10      	pop	{r4}
   261c8:	4770      	bx	lr

000261ca <lv_obj_set_signal_cb>:
    obj->signal_cb = signal_cb;
   261ca:	61c1      	str	r1, [r0, #28]
}
   261cc:	4770      	bx	lr

000261ce <lv_signal_send>:
    if(obj == NULL) return LV_RES_OK;
   261ce:	b110      	cbz	r0, 261d6 <lv_signal_send+0x8>
    if(obj->signal_cb) res = obj->signal_cb(obj, signal, param);
   261d0:	69c3      	ldr	r3, [r0, #28]
   261d2:	b103      	cbz	r3, 261d6 <lv_signal_send+0x8>
   261d4:	4718      	bx	r3
}
   261d6:	2001      	movs	r0, #1
   261d8:	4770      	bx	lr

000261da <lv_obj_set_design_cb>:
    obj->design_cb = design_cb;
   261da:	6201      	str	r1, [r0, #32]
}
   261dc:	4770      	bx	lr

000261de <lv_obj_allocate_ext_attr>:
{
   261de:	b510      	push	{r4, lr}
   261e0:	4604      	mov	r4, r0
    void * new_ext = lv_mem_realloc(obj->ext_attr, ext_size);
   261e2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   261e4:	f7f7 f9fa 	bl	1d5dc <lv_mem_realloc>
    if(new_ext == NULL) return NULL;
   261e8:	b100      	cbz	r0, 261ec <lv_obj_allocate_ext_attr+0xe>
    obj->ext_attr = new_ext;
   261ea:	6260      	str	r0, [r4, #36]	; 0x24
}
   261ec:	bd10      	pop	{r4, pc}

000261ee <lv_obj_refresh_ext_draw_pad>:
    obj->ext_draw_pad = 0;
   261ee:	2200      	movs	r2, #0
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   261f0:	69c3      	ldr	r3, [r0, #28]
    obj->ext_draw_pad = 0;
   261f2:	8602      	strh	r2, [r0, #48]	; 0x30
    obj->signal_cb(obj, LV_SIGNAL_REFR_EXT_DRAW_PAD, NULL);
   261f4:	2106      	movs	r1, #6
   261f6:	4718      	bx	r3

000261f8 <lv_obj_area_is_visible>:
    return obj->hidden == 0 ? false : true;
   261f8:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
{
   261fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(lv_obj_get_hidden(obj)) return false;
   261fe:	06da      	lsls	r2, r3, #27
{
   26200:	4605      	mov	r5, r0
   26202:	460e      	mov	r6, r1
    if(lv_obj_get_hidden(obj)) return false;
   26204:	d42e      	bmi.n	26264 <lv_obj_area_is_visible+0x6c>
   26206:	4603      	mov	r3, r0
    return obj->parent;
   26208:	461c      	mov	r4, r3
   2620a:	681b      	ldr	r3, [r3, #0]
    } while(par != NULL);
   2620c:	2b00      	cmp	r3, #0
   2620e:	d1fb      	bne.n	26208 <lv_obj_area_is_visible+0x10>
    lv_disp_t * disp   = lv_obj_get_disp(obj_scr);
   26210:	4620      	mov	r0, r4
   26212:	f7f3 fffd 	bl	1a210 <lv_obj_get_disp>
   26216:	4607      	mov	r7, r0
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   26218:	f7f3 fe2a 	bl	19e70 <lv_disp_get_scr_act>
   2621c:	4284      	cmp	r4, r0
   2621e:	d123      	bne.n	26268 <lv_obj_area_is_visible+0x70>
        lv_area_copy(&obj_coords, &obj->coords);
   26220:	f105 0110 	add.w	r1, r5, #16
   26224:	4668      	mov	r0, sp
        lv_coord_t ext_size = obj->ext_draw_pad;
   26226:	f9b5 4030 	ldrsh.w	r4, [r5, #48]	; 0x30
        lv_area_copy(&obj_coords, &obj->coords);
   2622a:	f7ff ffb7 	bl	2619c <lv_area_copy>
        obj_coords.x1 -= ext_size;
   2622e:	f8bd 3000 	ldrh.w	r3, [sp]
   26232:	1b1b      	subs	r3, r3, r4
   26234:	f8ad 3000 	strh.w	r3, [sp]
        obj_coords.y1 -= ext_size;
   26238:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   2623c:	1b1b      	subs	r3, r3, r4
   2623e:	f8ad 3002 	strh.w	r3, [sp, #2]
        obj_coords.x2 += ext_size;
   26242:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   26246:	4423      	add	r3, r4
   26248:	f8ad 3004 	strh.w	r3, [sp, #4]
        obj_coords.y2 += ext_size;
   2624c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   26250:	466a      	mov	r2, sp
        obj_coords.y2 += ext_size;
   26252:	441c      	add	r4, r3
        is_common = _lv_area_intersect(area, area, &obj_coords);
   26254:	4631      	mov	r1, r6
   26256:	4630      	mov	r0, r6
        obj_coords.y2 += ext_size;
   26258:	f8ad 4006 	strh.w	r4, [sp, #6]
        is_common = _lv_area_intersect(area, area, &obj_coords);
   2625c:	f003 fee9 	bl	2a032 <_lv_area_intersect>
        if(is_common == false) return false;  /*The area is not on the object*/
   26260:	4604      	mov	r4, r0
   26262:	bb00      	cbnz	r0, 262a6 <lv_obj_area_is_visible+0xae>
    if(lv_obj_get_hidden(obj)) return false;
   26264:	2400      	movs	r4, #0
   26266:	e00f      	b.n	26288 <lv_obj_area_is_visible+0x90>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   26268:	4638      	mov	r0, r7
   2626a:	f7f3 fe1b 	bl	19ea4 <lv_disp_get_scr_prev>
    if(obj_scr == lv_disp_get_scr_act(disp) ||
   2626e:	4284      	cmp	r4, r0
   26270:	d0d6      	beq.n	26220 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_top(disp) ||
   26272:	4638      	mov	r0, r7
   26274:	f7f3 fe30 	bl	19ed8 <lv_disp_get_layer_top>
       obj_scr == lv_disp_get_scr_prev(disp) ||
   26278:	4284      	cmp	r4, r0
   2627a:	d0d1      	beq.n	26220 <lv_obj_area_is_visible+0x28>
       obj_scr == lv_disp_get_layer_sys(disp)) {
   2627c:	4638      	mov	r0, r7
   2627e:	f7f3 fe45 	bl	19f0c <lv_disp_get_layer_sys>
       obj_scr == lv_disp_get_layer_top(disp) ||
   26282:	4284      	cmp	r4, r0
   26284:	d0cc      	beq.n	26220 <lv_obj_area_is_visible+0x28>
    return true;
   26286:	2401      	movs	r4, #1
}
   26288:	4620      	mov	r0, r4
   2628a:	b003      	add	sp, #12
   2628c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            is_common = _lv_area_intersect(area, area, &par->coords);
   2628e:	f105 0210 	add.w	r2, r5, #16
   26292:	4631      	mov	r1, r6
   26294:	4630      	mov	r0, r6
   26296:	f003 fecc 	bl	2a032 <_lv_area_intersect>
            if(is_common == false) return false;       /*If no common parts with parent break;*/
   2629a:	2800      	cmp	r0, #0
   2629c:	d0e2      	beq.n	26264 <lv_obj_area_is_visible+0x6c>
    return obj->hidden == 0 ? false : true;
   2629e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
            if(lv_obj_get_hidden(par)) return false; /*If the parent is hidden then the child is hidden and won't be drawn*/
   262a2:	06db      	lsls	r3, r3, #27
   262a4:	d4de      	bmi.n	26264 <lv_obj_area_is_visible+0x6c>
    return obj->parent;
   262a6:	682d      	ldr	r5, [r5, #0]
        while(par != NULL) {
   262a8:	2d00      	cmp	r5, #0
   262aa:	d1f0      	bne.n	2628e <lv_obj_area_is_visible+0x96>
   262ac:	e7ec      	b.n	26288 <lv_obj_area_is_visible+0x90>

000262ae <lv_obj_invalidate_area>:
{
   262ae:	b513      	push	{r0, r1, r4, lr}
   262b0:	4604      	mov	r4, r0
    lv_area_copy(&area_tmp, area);
   262b2:	4668      	mov	r0, sp
   262b4:	f7ff ff72 	bl	2619c <lv_area_copy>
    bool visible = lv_obj_area_is_visible(obj, &area_tmp);
   262b8:	4669      	mov	r1, sp
   262ba:	4620      	mov	r0, r4
   262bc:	f7ff ff9c 	bl	261f8 <lv_obj_area_is_visible>
    if(visible) _lv_inv_area(lv_obj_get_disp(obj), &area_tmp);
   262c0:	b128      	cbz	r0, 262ce <lv_obj_invalidate_area+0x20>
   262c2:	4620      	mov	r0, r4
   262c4:	f7f3 ffa4 	bl	1a210 <lv_obj_get_disp>
   262c8:	4669      	mov	r1, sp
   262ca:	f001 f85c 	bl	27386 <_lv_inv_area>
}
   262ce:	b002      	add	sp, #8
   262d0:	bd10      	pop	{r4, pc}

000262d2 <lv_obj_invalidate>:
{
   262d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    lv_coord_t ext_size = obj->ext_draw_pad;
   262d4:	f9b0 4030 	ldrsh.w	r4, [r0, #48]	; 0x30
{
   262d8:	4605      	mov	r5, r0
    lv_area_copy(&obj_coords, &obj->coords);
   262da:	f100 0110 	add.w	r1, r0, #16
   262de:	4668      	mov	r0, sp
   262e0:	f7ff ff5c 	bl	2619c <lv_area_copy>
    obj_coords.x1 -= ext_size;
   262e4:	f8bd 3000 	ldrh.w	r3, [sp]
   262e8:	1b1b      	subs	r3, r3, r4
   262ea:	f8ad 3000 	strh.w	r3, [sp]
    obj_coords.y1 -= ext_size;
   262ee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   262f2:	1b1b      	subs	r3, r3, r4
   262f4:	f8ad 3002 	strh.w	r3, [sp, #2]
    obj_coords.x2 += ext_size;
   262f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   262fc:	4423      	add	r3, r4
   262fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    obj_coords.y2 += ext_size;
   26302:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   26306:	4669      	mov	r1, sp
    obj_coords.y2 += ext_size;
   26308:	441c      	add	r4, r3
    lv_obj_invalidate_area(obj, &obj_coords);
   2630a:	4628      	mov	r0, r5
    obj_coords.y2 += ext_size;
   2630c:	f8ad 4006 	strh.w	r4, [sp, #6]
    lv_obj_invalidate_area(obj, &obj_coords);
   26310:	f7ff ffcd 	bl	262ae <lv_obj_invalidate_area>
}
   26314:	b003      	add	sp, #12
   26316:	bd30      	pop	{r4, r5, pc}

00026318 <lv_obj_set_pos>:
{
   26318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    lv_obj_t * par = obj->parent;
   2631a:	6807      	ldr	r7, [r0, #0]
{
   2631c:	4604      	mov	r4, r0
    if(par) {
   2631e:	b12f      	cbz	r7, 2632c <lv_obj_set_pos+0x14>
        x = x + par->coords.x1;
   26320:	8a3d      	ldrh	r5, [r7, #16]
        y = y + par->coords.y1;
   26322:	8a7e      	ldrh	r6, [r7, #18]
        x = x + par->coords.x1;
   26324:	4429      	add	r1, r5
        y = y + par->coords.y1;
   26326:	4432      	add	r2, r6
        x = x + par->coords.x1;
   26328:	b209      	sxth	r1, r1
        y = y + par->coords.y1;
   2632a:	b212      	sxth	r2, r2
    diff.x = x - obj->coords.x1;
   2632c:	8a25      	ldrh	r5, [r4, #16]
    diff.y = y - obj->coords.y1;
   2632e:	8a66      	ldrh	r6, [r4, #18]
    diff.x = x - obj->coords.x1;
   26330:	1b49      	subs	r1, r1, r5
    diff.y = y - obj->coords.y1;
   26332:	1b92      	subs	r2, r2, r6
    diff.x = x - obj->coords.x1;
   26334:	b20d      	sxth	r5, r1
    diff.y = y - obj->coords.y1;
   26336:	b216      	sxth	r6, r2
    if(diff.x == 0 && diff.y == 0) return;
   26338:	ea55 0306 	orrs.w	r3, r5, r6
   2633c:	d026      	beq.n	2638c <lv_obj_set_pos+0x74>
    lv_obj_invalidate(obj);
   2633e:	4620      	mov	r0, r4
   26340:	f7ff ffc7 	bl	262d2 <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   26344:	f104 0110 	add.w	r1, r4, #16
   26348:	4668      	mov	r0, sp
   2634a:	f7ff ff27 	bl	2619c <lv_area_copy>
    obj->coords.x1 += diff.x;
   2634e:	8a23      	ldrh	r3, [r4, #16]
   26350:	442b      	add	r3, r5
   26352:	8223      	strh	r3, [r4, #16]
    obj->coords.y1 += diff.y;
   26354:	8a63      	ldrh	r3, [r4, #18]
   26356:	4433      	add	r3, r6
   26358:	8263      	strh	r3, [r4, #18]
    obj->coords.x2 += diff.x;
   2635a:	8aa3      	ldrh	r3, [r4, #20]
   2635c:	442b      	add	r3, r5
   2635e:	82a3      	strh	r3, [r4, #20]
    obj->coords.y2 += diff.y;
   26360:	8ae3      	ldrh	r3, [r4, #22]
   26362:	4433      	add	r3, r6
   26364:	82e3      	strh	r3, [r4, #22]
    refresh_children_position(obj, diff.x, diff.y);
   26366:	4632      	mov	r2, r6
   26368:	4629      	mov	r1, r5
   2636a:	4620      	mov	r0, r4
   2636c:	f7ff fef0 	bl	26150 <refresh_children_position>
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   26370:	69e3      	ldr	r3, [r4, #28]
   26372:	466a      	mov	r2, sp
   26374:	2102      	movs	r1, #2
   26376:	4620      	mov	r0, r4
   26378:	4798      	blx	r3
    if(par) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   2637a:	b127      	cbz	r7, 26386 <lv_obj_set_pos+0x6e>
   2637c:	69fb      	ldr	r3, [r7, #28]
   2637e:	4622      	mov	r2, r4
   26380:	2101      	movs	r1, #1
   26382:	4638      	mov	r0, r7
   26384:	4798      	blx	r3
    lv_obj_invalidate(obj);
   26386:	4620      	mov	r0, r4
   26388:	f7ff ffa3 	bl	262d2 <lv_obj_invalidate>
}
   2638c:	b003      	add	sp, #12
   2638e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00026390 <lv_obj_align>:
{
   26390:	b573      	push	{r0, r1, r4, r5, r6, lr}
   26392:	4605      	mov	r5, r0
   26394:	461c      	mov	r4, r3
    if(base == NULL) base = lv_obj_get_parent(obj);
   26396:	4608      	mov	r0, r1
   26398:	b901      	cbnz	r1, 2639c <lv_obj_align+0xc>
    return obj->parent;
   2639a:	6828      	ldr	r0, [r5, #0]
    _lv_area_align(&base->coords, &obj->coords, align, &new_pos);
   2639c:	ab01      	add	r3, sp, #4
   2639e:	f105 0110 	add.w	r1, r5, #16
   263a2:	3010      	adds	r0, #16
   263a4:	f003 ff88 	bl	2a2b8 <_lv_area_align>
    return obj->parent;
   263a8:	6828      	ldr	r0, [r5, #0]
    new_pos.x += x_ofs;
   263aa:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    new_pos.y += y_ofs;
   263ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   263b2:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    lv_coord_t par_abs_y  = par->coords.y1;
   263b6:	f9b0 6012 	ldrsh.w	r6, [r0, #18]
    new_pos.x += x_ofs;
   263ba:	4421      	add	r1, r4
    new_pos.x -= par_abs_x;
   263bc:	8a04      	ldrh	r4, [r0, #16]
    new_pos.y += y_ofs;
   263be:	441a      	add	r2, r3
    new_pos.x -= par_abs_x;
   263c0:	1b09      	subs	r1, r1, r4
    new_pos.y -= par_abs_y;
   263c2:	1b92      	subs	r2, r2, r6
    new_pos.x -= par_abs_x;
   263c4:	b209      	sxth	r1, r1
    new_pos.y -= par_abs_y;
   263c6:	b212      	sxth	r2, r2
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   263c8:	4628      	mov	r0, r5
    new_pos.x -= par_abs_x;
   263ca:	f8ad 1004 	strh.w	r1, [sp, #4]
    new_pos.y -= par_abs_y;
   263ce:	f8ad 2006 	strh.w	r2, [sp, #6]
    if(x_set && y_set) lv_obj_set_pos(obj, new_pos.x, new_pos.y);
   263d2:	f7ff ffa1 	bl	26318 <lv_obj_set_pos>
}
   263d6:	b002      	add	sp, #8
   263d8:	bd70      	pop	{r4, r5, r6, pc}

000263da <lv_obj_set_size>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   263da:	8a83      	ldrh	r3, [r0, #20]
{
   263dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   263de:	4616      	mov	r6, r2
   263e0:	8a02      	ldrh	r2, [r0, #16]
   263e2:	3301      	adds	r3, #1
   263e4:	1a9b      	subs	r3, r3, r2
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   263e6:	b21b      	sxth	r3, r3
   263e8:	428b      	cmp	r3, r1
{
   263ea:	4604      	mov	r4, r0
   263ec:	460d      	mov	r5, r1
    if(lv_obj_get_width(obj) == w && lv_obj_get_height(obj) == h) {
   263ee:	d106      	bne.n	263fe <lv_obj_set_size+0x24>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   263f0:	8ac3      	ldrh	r3, [r0, #22]
   263f2:	8a42      	ldrh	r2, [r0, #18]
   263f4:	3301      	adds	r3, #1
   263f6:	1a9b      	subs	r3, r3, r2
   263f8:	b21b      	sxth	r3, r3
   263fa:	429e      	cmp	r6, r3
   263fc:	d023      	beq.n	26446 <lv_obj_set_size+0x6c>
    lv_obj_invalidate(obj);
   263fe:	4620      	mov	r0, r4
   26400:	f7ff ff67 	bl	262d2 <lv_obj_invalidate>
    lv_area_copy(cords_p, &obj->coords);
   26404:	f104 0110 	add.w	r1, r4, #16
   26408:	4668      	mov	r0, sp
   2640a:	f7ff fec7 	bl	2619c <lv_area_copy>
    obj->coords.y2 = obj->coords.y1 + h - 1;
   2640e:	8a62      	ldrh	r2, [r4, #18]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   26410:	8a21      	ldrh	r1, [r4, #16]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   26412:	69e3      	ldr	r3, [r4, #28]
    obj->coords.y2 = obj->coords.y1 + h - 1;
   26414:	3e01      	subs	r6, #1
        obj->coords.x2 = obj->coords.x1 + w - 1;
   26416:	3d01      	subs	r5, #1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   26418:	4416      	add	r6, r2
        obj->coords.x2 = obj->coords.x1 + w - 1;
   2641a:	440d      	add	r5, r1
    obj->coords.y2 = obj->coords.y1 + h - 1;
   2641c:	82e6      	strh	r6, [r4, #22]
        obj->coords.x2 = obj->coords.x1 + w - 1;
   2641e:	82a5      	strh	r5, [r4, #20]
    obj->signal_cb(obj, LV_SIGNAL_COORD_CHG, &ori);
   26420:	466a      	mov	r2, sp
   26422:	2102      	movs	r1, #2
   26424:	4620      	mov	r0, r4
   26426:	4798      	blx	r3
    return obj->parent;
   26428:	6820      	ldr	r0, [r4, #0]
    if(par != NULL) par->signal_cb(par, LV_SIGNAL_CHILD_CHG, obj);
   2642a:	b118      	cbz	r0, 26434 <lv_obj_set_size+0x5a>
   2642c:	69c3      	ldr	r3, [r0, #28]
   2642e:	4622      	mov	r2, r4
   26430:	2101      	movs	r1, #1
   26432:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   26434:	1d26      	adds	r6, r4, #4
   26436:	4630      	mov	r0, r6
   26438:	f004 f895 	bl	2a566 <_lv_ll_get_head>
   2643c:	4605      	mov	r5, r0
   2643e:	b920      	cbnz	r0, 2644a <lv_obj_set_size+0x70>
    lv_obj_invalidate(obj);
   26440:	4620      	mov	r0, r4
   26442:	f7ff ff46 	bl	262d2 <lv_obj_invalidate>
}
   26446:	b002      	add	sp, #8
   26448:	bd70      	pop	{r4, r5, r6, pc}
        i->signal_cb(i, LV_SIGNAL_PARENT_SIZE_CHG,  &ori);
   2644a:	69eb      	ldr	r3, [r5, #28]
   2644c:	466a      	mov	r2, sp
   2644e:	2103      	movs	r1, #3
   26450:	4628      	mov	r0, r5
   26452:	4798      	blx	r3
    _LV_LL_READ(obj->child_ll, i) {
   26454:	4629      	mov	r1, r5
   26456:	4630      	mov	r0, r6
   26458:	f004 f88b 	bl	2a572 <_lv_ll_get_next>
   2645c:	e7ee      	b.n	2643c <lv_obj_set_size+0x62>

0002645e <lv_obj_set_height>:
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2645e:	8a83      	ldrh	r3, [r0, #20]
{
   26460:	460a      	mov	r2, r1
   26462:	8a01      	ldrh	r1, [r0, #16]
   26464:	3301      	adds	r3, #1
   26466:	b410      	push	{r4}
   26468:	1a59      	subs	r1, r3, r1
}
   2646a:	bc10      	pop	{r4}
    lv_obj_set_size(obj, lv_obj_get_width(obj), h);
   2646c:	b209      	sxth	r1, r1
   2646e:	f7ff bfb4 	b.w	263da <lv_obj_set_size>

00026472 <lv_obj_del>:
{
   26472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26474:	4605      	mov	r5, r0
    lv_obj_invalidate(obj);
   26476:	f7ff ff2c 	bl	262d2 <lv_obj_invalidate>
    return obj->parent;
   2647a:	682f      	ldr	r7, [r5, #0]
    if(par == NULL) {
   2647c:	b9b7      	cbnz	r7, 264ac <lv_obj_del+0x3a>
        disp = lv_obj_get_disp(obj);
   2647e:	4628      	mov	r0, r5
   26480:	f7f3 fec6 	bl	1a210 <lv_obj_get_disp>
        if(!disp) return LV_RES_INV;   /*Shouldn't happen*/
   26484:	4604      	mov	r4, r0
   26486:	b178      	cbz	r0, 264a8 <lv_obj_del+0x36>
        if(disp->act_scr == obj) act_scr_del = true;
   26488:	6c06      	ldr	r6, [r0, #64]	; 0x40
   2648a:	1b73      	subs	r3, r6, r5
   2648c:	425e      	negs	r6, r3
   2648e:	415e      	adcs	r6, r3
    obj_del_core(obj);
   26490:	4628      	mov	r0, r5
   26492:	f7f3 fef3 	bl	1a27c <obj_del_core>
    if(par) {
   26496:	b127      	cbz	r7, 264a2 <lv_obj_del+0x30>
        par->signal_cb(par, LV_SIGNAL_CHILD_CHG, NULL);
   26498:	69fb      	ldr	r3, [r7, #28]
   2649a:	2200      	movs	r2, #0
   2649c:	2101      	movs	r1, #1
   2649e:	4638      	mov	r0, r7
   264a0:	4798      	blx	r3
    if(act_scr_del)  {
   264a2:	b10e      	cbz	r6, 264a8 <lv_obj_del+0x36>
        disp->act_scr = NULL;
   264a4:	2300      	movs	r3, #0
   264a6:	6423      	str	r3, [r4, #64]	; 0x40
}
   264a8:	2000      	movs	r0, #0
   264aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool act_scr_del = false;
   264ac:	2600      	movs	r6, #0
    lv_disp_t * disp = NULL;
   264ae:	4634      	mov	r4, r6
   264b0:	e7ee      	b.n	26490 <lv_obj_del+0x1e>

000264b2 <lv_obj_get_parent>:
}
   264b2:	6800      	ldr	r0, [r0, #0]
   264b4:	4770      	bx	lr

000264b6 <lv_obj_get_child>:
    if(child == NULL) {
   264b6:	3004      	adds	r0, #4
   264b8:	b909      	cbnz	r1, 264be <lv_obj_get_child+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   264ba:	f004 b854 	b.w	2a566 <_lv_ll_get_head>
        result = _lv_ll_get_next(&obj->child_ll, child);
   264be:	f004 b858 	b.w	2a572 <_lv_ll_get_next>

000264c2 <refresh_children_style>:
{
   264c2:	b538      	push	{r3, r4, r5, lr}
   264c4:	4605      	mov	r5, r0
        result = _lv_ll_get_head(&obj->child_ll);
   264c6:	3004      	adds	r0, #4
   264c8:	f004 f84d 	bl	2a566 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   264cc:	4604      	mov	r4, r0
    while(child != NULL) {
   264ce:	b900      	cbnz	r0, 264d2 <refresh_children_style+0x10>
}
   264d0:	bd38      	pop	{r3, r4, r5, pc}
        lv_obj_invalidate(child);
   264d2:	4620      	mov	r0, r4
   264d4:	f7ff fefd 	bl	262d2 <lv_obj_invalidate>
        child->signal_cb(child, LV_SIGNAL_STYLE_CHG, NULL);
   264d8:	69e3      	ldr	r3, [r4, #28]
   264da:	2200      	movs	r2, #0
   264dc:	2104      	movs	r1, #4
   264de:	4620      	mov	r0, r4
   264e0:	4798      	blx	r3
        lv_obj_invalidate(child);
   264e2:	4620      	mov	r0, r4
   264e4:	f7ff fef5 	bl	262d2 <lv_obj_invalidate>
        refresh_children_style(child); /*Check children too*/
   264e8:	4620      	mov	r0, r4
   264ea:	f7ff ffea 	bl	264c2 <refresh_children_style>
        child = lv_obj_get_child(obj, child);
   264ee:	4621      	mov	r1, r4
   264f0:	4628      	mov	r0, r5
   264f2:	f7ff ffe0 	bl	264b6 <lv_obj_get_child>
   264f6:	e7e9      	b.n	264cc <refresh_children_style+0xa>

000264f8 <lv_obj_get_coords>:
{
   264f8:	460b      	mov	r3, r1
    lv_area_copy(cords_p, &obj->coords);
   264fa:	f100 0110 	add.w	r1, r0, #16
   264fe:	4618      	mov	r0, r3
   26500:	f7ff be4c 	b.w	2619c <lv_area_copy>

00026504 <lv_obj_get_x>:
    return obj->parent;
   26504:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   26506:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
   2650a:	b113      	cbz	r3, 26512 <lv_obj_get_x+0xe>
        rel_x             = obj->coords.x1 - parent->coords.x1;
   2650c:	8a1b      	ldrh	r3, [r3, #16]
   2650e:	1ac0      	subs	r0, r0, r3
   26510:	b200      	sxth	r0, r0
}
   26512:	4770      	bx	lr

00026514 <lv_obj_get_y>:
    return obj->parent;
   26514:	6803      	ldr	r3, [r0, #0]
    if(parent) {
   26516:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
   2651a:	b113      	cbz	r3, 26522 <lv_obj_get_y+0xe>
        rel_y             = obj->coords.y1 - parent->coords.y1;
   2651c:	8a5b      	ldrh	r3, [r3, #18]
   2651e:	1ac0      	subs	r0, r0, r3
   26520:	b200      	sxth	r0, r0
}
   26522:	4770      	bx	lr

00026524 <lv_obj_get_style_list>:
{
   26524:	b513      	push	{r0, r1, r4, lr}
    if(part == LV_OBJ_PART_MAIN) return &((lv_obj_t *)obj)->style_list;
   26526:	b911      	cbnz	r1, 2652e <lv_obj_get_style_list+0xa>
   26528:	3028      	adds	r0, #40	; 0x28
}
   2652a:	b002      	add	sp, #8
   2652c:	bd10      	pop	{r4, pc}
    info.part = part;
   2652e:	f88d 1000 	strb.w	r1, [sp]
    info.result = NULL;
   26532:	2400      	movs	r4, #0
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   26534:	466a      	mov	r2, sp
   26536:	2108      	movs	r1, #8
    info.result = NULL;
   26538:	9401      	str	r4, [sp, #4]
    res = lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STYLE, &info);
   2653a:	f7ff fe48 	bl	261ce <lv_signal_send>
    if(res != LV_RES_OK) return NULL;
   2653e:	2801      	cmp	r0, #1
    return info.result;
   26540:	bf0c      	ite	eq
   26542:	9801      	ldreq	r0, [sp, #4]
    if(res != LV_RES_OK) return NULL;
   26544:	4620      	movne	r0, r4
   26546:	e7f0      	b.n	2652a <lv_obj_get_style_list+0x6>

00026548 <_lv_obj_disable_style_caching>:
{
   26548:	b570      	push	{r4, r5, r6, lr}
   2654a:	4606      	mov	r6, r0
   2654c:	460d      	mov	r5, r1
   2654e:	2400      	movs	r4, #0
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   26550:	b2e1      	uxtb	r1, r4
   26552:	4630      	mov	r0, r6
   26554:	f7ff ffe6 	bl	26524 <lv_obj_get_style_list>
        if(list == NULL) break;
   26558:	b130      	cbz	r0, 26568 <_lv_obj_disable_style_caching+0x20>
        list->ignore_cache = dis;
   2655a:	7943      	ldrb	r3, [r0, #5]
   2655c:	3401      	adds	r4, #1
   2655e:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   26562:	2c40      	cmp	r4, #64	; 0x40
        list->ignore_cache = dis;
   26564:	7143      	strb	r3, [r0, #5]
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   26566:	d1f3      	bne.n	26550 <_lv_obj_disable_style_caching+0x8>
{
   26568:	2440      	movs	r4, #64	; 0x40
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   2656a:	4621      	mov	r1, r4
   2656c:	4630      	mov	r0, r6
   2656e:	f7ff ffd9 	bl	26524 <lv_obj_get_style_list>
        if(list == NULL) break;
   26572:	b138      	cbz	r0, 26584 <_lv_obj_disable_style_caching+0x3c>
        list->ignore_cache = dis;
   26574:	7943      	ldrb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   26576:	3401      	adds	r4, #1
   26578:	b2e4      	uxtb	r4, r4
        list->ignore_cache = dis;
   2657a:	f365 03c3 	bfi	r3, r5, #3, #1
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   2657e:	2cff      	cmp	r4, #255	; 0xff
        list->ignore_cache = dis;
   26580:	7143      	strb	r3, [r0, #5]
    for(part = _LV_OBJ_PART_REAL_FIRST; part < 0xFF; part++) {
   26582:	d1f2      	bne.n	2656a <_lv_obj_disable_style_caching+0x22>
}
   26584:	bd70      	pop	{r4, r5, r6, pc}

00026586 <lv_obj_get_state>:
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   26586:	293f      	cmp	r1, #63	; 0x3f
{
   26588:	b507      	push	{r0, r1, r2, lr}
    if(part < _LV_OBJ_PART_REAL_LAST) return ((lv_obj_t *)obj)->state;
   2658a:	d804      	bhi.n	26596 <lv_obj_get_state+0x10>
   2658c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
   26590:	b003      	add	sp, #12
   26592:	f85d fb04 	ldr.w	pc, [sp], #4
    info.part = part;
   26596:	f88d 1004 	strb.w	r1, [sp, #4]
    info.result = LV_STATE_DEFAULT;
   2659a:	2300      	movs	r3, #0
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   2659c:	aa01      	add	r2, sp, #4
   2659e:	2109      	movs	r1, #9
    info.result = LV_STATE_DEFAULT;
   265a0:	f88d 3005 	strb.w	r3, [sp, #5]
    lv_signal_send((lv_obj_t *)obj, LV_SIGNAL_GET_STATE_DSC, &info);
   265a4:	f7ff fe13 	bl	261ce <lv_signal_send>
    return info.result;
   265a8:	f89d 0005 	ldrb.w	r0, [sp, #5]
   265ac:	e7f0      	b.n	26590 <lv_obj_get_state+0xa>

000265ae <lv_obj_get_style_clip_corner>:
_LV_OBJ_STYLE_SET_GET_DECLARE(CLIP_CORNER, clip_corner, bool, _int, scalar)
   265ae:	b508      	push	{r3, lr}
   265b0:	2202      	movs	r2, #2
   265b2:	f7f4 f86d 	bl	1a690 <_lv_obj_get_style_int>
   265b6:	3800      	subs	r0, #0
   265b8:	bf18      	it	ne
   265ba:	2001      	movne	r0, #1
   265bc:	bd08      	pop	{r3, pc}

000265be <_lv_obj_get_style_opa>:
{
   265be:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265c2:	4605      	mov	r5, r0
   265c4:	b085      	sub	sp, #20
   265c6:	460f      	mov	r7, r1
   265c8:	4690      	mov	r8, r2
    attr = prop_ori >> 8;
   265ca:	ea4f 2912 	mov.w	r9, r2, lsr #8
    while(parent) {
   265ce:	4614      	mov	r4, r2
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   265d0:	f248 0a0c 	movw	sl, #32780	; 0x800c
   265d4:	f248 0bad 	movw	fp, #32941	; 0x80ad
    while(parent) {
   265d8:	b96d      	cbnz	r5, 265f6 <_lv_obj_get_style_opa+0x38>
    prop = prop & (~LV_STYLE_STATE_MASK);
   265da:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   265de:	2c6d      	cmp	r4, #109	; 0x6d
    prop = prop & (~LV_STYLE_STATE_MASK);
   265e0:	b2a0      	uxth	r0, r4
    switch(prop) {
   265e2:	d04f      	beq.n	26684 <_lv_obj_get_style_opa+0xc6>
   265e4:	f248 03ad 	movw	r3, #32941	; 0x80ad
   265e8:	4298      	cmp	r0, r3
   265ea:	d04b      	beq.n	26684 <_lv_obj_get_style_opa+0xc6>
   265ec:	282c      	cmp	r0, #44	; 0x2c
   265ee:	bf14      	ite	ne
   265f0:	20ff      	movne	r0, #255	; 0xff
   265f2:	2000      	moveq	r0, #0
   265f4:	e036      	b.n	26664 <_lv_obj_get_style_opa+0xa6>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   265f6:	4639      	mov	r1, r7
   265f8:	4628      	mov	r0, r5
   265fa:	f7ff ff93 	bl	26524 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   265fe:	7943      	ldrb	r3, [r0, #5]
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   26600:	4606      	mov	r6, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   26602:	0718      	lsls	r0, r3, #28
   26604:	d41d      	bmi.n	26642 <_lv_obj_get_style_opa+0x84>
   26606:	7932      	ldrb	r2, [r6, #4]
   26608:	0691      	lsls	r1, r2, #26
   2660a:	d01a      	beq.n	26642 <_lv_obj_get_style_opa+0x84>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   2660c:	f013 0f04 	tst.w	r3, #4
   26610:	f424 42fe 	bic.w	r2, r4, #32512	; 0x7f00
   26614:	d105      	bne.n	26622 <_lv_obj_get_style_opa+0x64>
   26616:	4639      	mov	r1, r7
   26618:	4628      	mov	r0, r5
   2661a:	9201      	str	r2, [sp, #4]
   2661c:	f7f4 f934 	bl	1a888 <update_style_cache>
   26620:	9a01      	ldr	r2, [sp, #4]
            switch(prop & (~LV_STYLE_STATE_MASK)) {
   26622:	4552      	cmp	r2, sl
   26624:	d009      	beq.n	2663a <_lv_obj_get_style_opa+0x7c>
   26626:	455a      	cmp	r2, fp
   26628:	d01f      	beq.n	2666a <_lv_obj_get_style_opa+0xac>
   2662a:	2a2c      	cmp	r2, #44	; 0x2c
   2662c:	d109      	bne.n	26642 <_lv_obj_get_style_opa+0x84>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   2662e:	79b3      	ldrb	r3, [r6, #6]
   26630:	06da      	lsls	r2, r3, #27
   26632:	d425      	bmi.n	26680 <_lv_obj_get_style_opa+0xc2>
                    if(list->bg_opa_transp) def = true;
   26634:	f013 0f08 	tst.w	r3, #8
   26638:	e002      	b.n	26640 <_lv_obj_get_style_opa+0x82>
                    if(list->opa_scale_cover) def = true;
   2663a:	7973      	ldrb	r3, [r6, #5]
   2663c:	f013 0f20 	tst.w	r3, #32
                    if(list->img_recolor_opa_transp) def = true;
   26640:	d1cb      	bne.n	265da <_lv_obj_get_style_opa+0x1c>
        lv_state_t state = lv_obj_get_state(parent, part);
   26642:	4639      	mov	r1, r7
   26644:	4628      	mov	r0, r5
   26646:	f7ff ff9e 	bl	26586 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   2664a:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   2664e:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_opa(list, prop, &value_act);
   26650:	f10d 020f 	add.w	r2, sp, #15
   26654:	4621      	mov	r1, r4
   26656:	4630      	mov	r0, r6
   26658:	f001 f9fe 	bl	27a58 <_lv_style_list_get_opa>
        if(res == LV_RES_OK) return value_act;
   2665c:	2801      	cmp	r0, #1
   2665e:	d108      	bne.n	26672 <_lv_obj_get_style_opa+0xb4>
   26660:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
   26664:	b005      	add	sp, #20
   26666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    if(list->img_recolor_opa_transp) def = true;
   2666a:	79f3      	ldrb	r3, [r6, #7]
   2666c:	f013 0f10 	tst.w	r3, #16
   26670:	e7e6      	b.n	26640 <_lv_obj_get_style_opa+0x82>
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   26672:	f019 0f80 	tst.w	r9, #128	; 0x80
   26676:	d0b0      	beq.n	265da <_lv_obj_get_style_opa+0x1c>
        if(part != LV_OBJ_PART_MAIN) {
   26678:	b907      	cbnz	r7, 2667c <_lv_obj_get_style_opa+0xbe>
    return obj->parent;
   2667a:	682d      	ldr	r5, [r5, #0]
{
   2667c:	2700      	movs	r7, #0
   2667e:	e7ab      	b.n	265d8 <_lv_obj_get_style_opa+0x1a>
                    if(list->bg_opa_cover) return LV_OPA_COVER;     /*Special case, not the default value is used*/
   26680:	20ff      	movs	r0, #255	; 0xff
   26682:	e7ef      	b.n	26664 <_lv_obj_get_style_opa+0xa6>
            return LV_OPA_TRANSP;
   26684:	2000      	movs	r0, #0
   26686:	e7ed      	b.n	26664 <_lv_obj_get_style_opa+0xa6>

00026688 <_lv_obj_get_style_ptr>:
{
   26688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2668c:	4606      	mov	r6, r0
   2668e:	468b      	mov	fp, r1
   26690:	4690      	mov	r8, r2
    while(parent) {
   26692:	4614      	mov	r4, r2
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   26694:	f248 098e 	movw	r9, #32910	; 0x808e
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   26698:	f342 2a07 	sbfx	sl, r2, #8, #8
    while(parent) {
   2669c:	b316      	cbz	r6, 266e4 <_lv_obj_get_style_ptr+0x5c>
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   2669e:	4659      	mov	r1, fp
   266a0:	4630      	mov	r0, r6
   266a2:	f7ff ff3f 	bl	26524 <lv_obj_get_style_list>
        if(!list->ignore_cache && list->style_cnt > 0) {
   266a6:	7943      	ldrb	r3, [r0, #5]
   266a8:	0719      	lsls	r1, r3, #28
        lv_style_list_t * list = lv_obj_get_style_list(parent, part);
   266aa:	4607      	mov	r7, r0
        if(!list->ignore_cache && list->style_cnt > 0) {
   266ac:	d42a      	bmi.n	26704 <_lv_obj_get_style_ptr+0x7c>
   266ae:	7902      	ldrb	r2, [r0, #4]
   266b0:	0692      	lsls	r2, r2, #26
   266b2:	d027      	beq.n	26704 <_lv_obj_get_style_ptr+0x7c>
            if(!list->valid_cache) update_style_cache((lv_obj_t *)parent, part, prop  & (~LV_STYLE_STATE_MASK));
   266b4:	f013 0f04 	tst.w	r3, #4
   266b8:	f424 45fe 	bic.w	r5, r4, #32512	; 0x7f00
   266bc:	d104      	bne.n	266c8 <_lv_obj_get_style_ptr+0x40>
   266be:	462a      	mov	r2, r5
   266c0:	4659      	mov	r1, fp
   266c2:	4630      	mov	r0, r6
   266c4:	f7f4 f8e0 	bl	1a888 <update_style_cache>
            switch(prop  & (~LV_STYLE_STATE_MASK)) {
   266c8:	2d7f      	cmp	r5, #127	; 0x7f
   266ca:	d007      	beq.n	266dc <_lv_obj_get_style_ptr+0x54>
   266cc:	454d      	cmp	r5, r9
   266ce:	d015      	beq.n	266fc <_lv_obj_get_style_ptr+0x74>
   266d0:	2d6e      	cmp	r5, #110	; 0x6e
   266d2:	d117      	bne.n	26704 <_lv_obj_get_style_ptr+0x7c>
                    if(list->pattern_img_null) def = true;
   266d4:	79fb      	ldrb	r3, [r7, #7]
   266d6:	f013 0f02 	tst.w	r3, #2
   266da:	e002      	b.n	266e2 <_lv_obj_get_style_ptr+0x5a>
                    if(list->value_txt_str) def = true;
   266dc:	79fb      	ldrb	r3, [r7, #7]
   266de:	f013 0f08 	tst.w	r3, #8
                    if(list->pattern_img_null) def = true;
   266e2:	d00f      	beq.n	26704 <_lv_obj_get_style_ptr+0x7c>
    prop = prop & (~LV_STYLE_STATE_MASK);
   266e4:	f424 44fe 	bic.w	r4, r4, #32512	; 0x7f00
    switch(prop) {
   266e8:	2c7e      	cmp	r4, #126	; 0x7e
    prop = prop & (~LV_STYLE_STATE_MASK);
   266ea:	b2a2      	uxth	r2, r4
    switch(prop) {
   266ec:	d003      	beq.n	266f6 <_lv_obj_get_style_ptr+0x6e>
   266ee:	f248 038e 	movw	r3, #32910	; 0x808e
   266f2:	429a      	cmp	r2, r3
   266f4:	d122      	bne.n	2673c <_lv_obj_get_style_ptr+0xb4>
            return lv_theme_get_font_normal();
   266f6:	f7f7 fd4b 	bl	1e190 <lv_theme_get_font_normal>
   266fa:	e012      	b.n	26722 <_lv_obj_get_style_ptr+0x9a>
                    if(list->text_font_normal) def = true;
   266fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   26700:	2b00      	cmp	r3, #0
   26702:	dbef      	blt.n	266e4 <_lv_obj_get_style_ptr+0x5c>
        lv_state_t state = lv_obj_get_state(parent, part);
   26704:	4659      	mov	r1, fp
   26706:	4630      	mov	r0, r6
   26708:	f7ff ff3d 	bl	26586 <lv_obj_get_state>
        prop = (uint16_t)prop_ori + ((uint16_t)state << LV_STYLE_STATE_POS);
   2670c:	eb08 2400 	add.w	r4, r8, r0, lsl #8
   26710:	b2a4      	uxth	r4, r4
        res = _lv_style_list_get_ptr(list, prop, &value_act);
   26712:	aa01      	add	r2, sp, #4
   26714:	4621      	mov	r1, r4
   26716:	4638      	mov	r0, r7
   26718:	f001 f9e0 	bl	27adc <_lv_style_list_get_ptr>
        if(res == LV_RES_OK)  return value_act;
   2671c:	2801      	cmp	r0, #1
   2671e:	d103      	bne.n	26728 <_lv_obj_get_style_ptr+0xa0>
   26720:	9801      	ldr	r0, [sp, #4]
}
   26722:	b003      	add	sp, #12
   26724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(LV_STYLE_ATTR_GET_INHERIT(attr) == 0) break;
   26728:	f1ba 0f00 	cmp.w	sl, #0
   2672c:	dada      	bge.n	266e4 <_lv_obj_get_style_ptr+0x5c>
        if(part != LV_OBJ_PART_MAIN) {
   2672e:	f1bb 0f00 	cmp.w	fp, #0
   26732:	d100      	bne.n	26736 <_lv_obj_get_style_ptr+0xae>
    return obj->parent;
   26734:	6836      	ldr	r6, [r6, #0]
{
   26736:	f04f 0b00 	mov.w	fp, #0
   2673a:	e7af      	b.n	2669c <_lv_obj_get_style_ptr+0x14>
    switch(prop) {
   2673c:	2000      	movs	r0, #0
   2673e:	e7f0      	b.n	26722 <_lv_obj_get_style_ptr+0x9a>

00026740 <update_style_cache_children>:
{
   26740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26744:	4605      	mov	r5, r0
   26746:	2700      	movs	r7, #0
   26748:	b2fe      	uxtb	r6, r7
        lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   2674a:	4631      	mov	r1, r6
   2674c:	4628      	mov	r0, r5
   2674e:	f7ff fee9 	bl	26524 <lv_obj_get_style_list>
        if(list == NULL) break;
   26752:	4604      	mov	r4, r0
   26754:	2800      	cmp	r0, #0
   26756:	d055      	beq.n	26804 <update_style_cache_children+0xc4>
        bool ignore_cache_ori = list->ignore_cache;
   26758:	7943      	ldrb	r3, [r0, #5]
   2675a:	f3c3 08c0 	ubfx	r8, r3, #3, #1
        list->ignore_cache = 1;
   2675e:	f043 0308 	orr.w	r3, r3, #8
   26762:	7143      	strb	r3, [r0, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   26764:	f248 020c 	movw	r2, #32780	; 0x800c
   26768:	4631      	mov	r1, r6
   2676a:	4628      	mov	r0, r5
   2676c:	f7ff ff27 	bl	265be <_lv_obj_get_style_opa>
        list->opa_scale_cover    = lv_obj_get_style_opa_scale(obj, part) == LV_OPA_COVER ? 1 : 0;
   26770:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
   26774:	4258      	negs	r0, r3
   26776:	4158      	adcs	r0, r3
   26778:	7963      	ldrb	r3, [r4, #5]
   2677a:	f360 1345 	bfi	r3, r0, #5, #1
   2677e:	7163      	strb	r3, [r4, #5]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   26780:	f248 0282 	movw	r2, #32898	; 0x8082
   26784:	4631      	mov	r1, r6
   26786:	4628      	mov	r0, r5
   26788:	f7f3 ff82 	bl	1a690 <_lv_obj_get_style_int>
        list->text_decor_none    = lv_obj_get_style_text_decor(obj, part) == LV_TEXT_DECOR_NONE ? 1 : 0;
   2678c:	b2c0      	uxtb	r0, r0
   2678e:	79e3      	ldrb	r3, [r4, #7]
   26790:	fab0 f080 	clz	r0, r0
   26794:	0940      	lsrs	r0, r0, #5
   26796:	f360 1386 	bfi	r3, r0, #6, #1
   2679a:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   2679c:	f248 028e 	movw	r2, #32910	; 0x808e
   267a0:	4631      	mov	r1, r6
   267a2:	4628      	mov	r0, r5
   267a4:	f7ff ff70 	bl	26688 <_lv_obj_get_style_ptr>
   267a8:	4681      	mov	r9, r0
        list->text_font_normal    = lv_obj_get_style_text_font(obj, part) == lv_theme_get_font_normal() ? 1 : 0;
   267aa:	f7f7 fcf1 	bl	1e190 <lv_theme_get_font_normal>
   267ae:	eba9 0200 	sub.w	r2, r9, r0
   267b2:	f1d2 0900 	rsbs	r9, r2, #0
   267b6:	79e3      	ldrb	r3, [r4, #7]
   267b8:	eb49 0902 	adc.w	r9, r9, r2
   267bc:	f369 13c7 	bfi	r3, r9, #7, #1
   267c0:	71e3      	strb	r3, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   267c2:	f248 02ad 	movw	r2, #32941	; 0x80ad
   267c6:	4631      	mov	r1, r6
   267c8:	4628      	mov	r0, r5
   267ca:	f7ff fef8 	bl	265be <_lv_obj_get_style_opa>
        list->img_recolor_opa_transp    = lv_obj_get_style_image_recolor_opa(obj, part) == LV_OPA_TRANSP ? 1 : 0;
   267ce:	79e3      	ldrb	r3, [r4, #7]
   267d0:	2800      	cmp	r0, #0
   267d2:	bf0c      	ite	eq
   267d4:	2030      	moveq	r0, #48	; 0x30
   267d6:	2020      	movne	r0, #32
   267d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   267dc:	4318      	orrs	r0, r3
   267de:	71e0      	strb	r0, [r4, #7]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   267e0:	f248 0280 	movw	r2, #32896	; 0x8080
   267e4:	4631      	mov	r1, r6
   267e6:	4628      	mov	r0, r5
   267e8:	f7f3 ff52 	bl	1a690 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   267ec:	b188      	cbz	r0, 26812 <update_style_cache_children+0xd2>
            list->text_space_zero = 0;
   267ee:	79e3      	ldrb	r3, [r4, #7]
   267f0:	f36f 1345 	bfc	r3, #5, #1
   267f4:	71e3      	strb	r3, [r4, #7]
        list->ignore_cache = ignore_cache_ori;
   267f6:	7963      	ldrb	r3, [r4, #5]
   267f8:	3701      	adds	r7, #1
   267fa:	f368 03c3 	bfi	r3, r8, #3, #1
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   267fe:	2f40      	cmp	r7, #64	; 0x40
        list->ignore_cache = ignore_cache_ori;
   26800:	7163      	strb	r3, [r4, #5]
    for(part = 0; part != _LV_OBJ_PART_REAL_LAST; part++) {
   26802:	d1a1      	bne.n	26748 <update_style_cache_children+0x8>
        result = _lv_ll_get_head(&obj->child_ll);
   26804:	1d28      	adds	r0, r5, #4
   26806:	f003 feae 	bl	2a566 <_lv_ll_get_head>
        child = lv_obj_get_child(obj, child);
   2680a:	4604      	mov	r4, r0
    while(child) {
   2680c:	b950      	cbnz	r0, 26824 <update_style_cache_children+0xe4>
}
   2680e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   26812:	f248 0281 	movw	r2, #32897	; 0x8081
   26816:	4631      	mov	r1, r6
   26818:	4628      	mov	r0, r5
   2681a:	f7f3 ff39 	bl	1a690 <_lv_obj_get_style_int>
        if(lv_obj_get_style_text_letter_space(obj, part) != 0 ||
   2681e:	2800      	cmp	r0, #0
   26820:	d1e5      	bne.n	267ee <update_style_cache_children+0xae>
   26822:	e7e8      	b.n	267f6 <update_style_cache_children+0xb6>
        update_style_cache_children(child);
   26824:	4620      	mov	r0, r4
   26826:	f7ff ff8b 	bl	26740 <update_style_cache_children>
        child = lv_obj_get_child(obj, child);
   2682a:	4621      	mov	r1, r4
   2682c:	4628      	mov	r0, r5
   2682e:	f7ff fe42 	bl	264b6 <lv_obj_get_child>
   26832:	e7ea      	b.n	2680a <update_style_cache_children+0xca>

00026834 <lv_obj_reset_style_list>:
{
   26834:	b538      	push	{r3, r4, r5, lr}
   26836:	4604      	mov	r4, r0
   26838:	460d      	mov	r5, r1
    lv_obj_clean_style_list(obj, part);
   2683a:	f7f3 fed9 	bl	1a5f0 <lv_obj_clean_style_list>
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   2683e:	4629      	mov	r1, r5
   26840:	4620      	mov	r0, r4
   26842:	22ff      	movs	r2, #255	; 0xff
}
   26844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   26848:	f7f4 b978 	b.w	1ab3c <lv_obj_refresh_style>

0002684c <lv_obj_get_signal_cb>:
}
   2684c:	69c0      	ldr	r0, [r0, #28]
   2684e:	4770      	bx	lr

00026850 <lv_obj_get_ext_attr>:
}
   26850:	6a40      	ldr	r0, [r0, #36]	; 0x24
   26852:	4770      	bx	lr

00026854 <lv_obj_handle_get_type_signal>:
{
   26854:	b510      	push	{r4, lr}
   26856:	2300      	movs	r3, #0
        if(buf->type[i] == NULL) break;
   26858:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2685c:	b2da      	uxtb	r2, r3
   2685e:	b11c      	cbz	r4, 26868 <lv_obj_handle_get_type_signal+0x14>
    for(i = 0; i < LV_MAX_ANCESTOR_NUM - 1; i++) { /*Find the last set data*/
   26860:	3301      	adds	r3, #1
   26862:	2b07      	cmp	r3, #7
   26864:	d1f8      	bne.n	26858 <lv_obj_handle_get_type_signal+0x4>
   26866:	461a      	mov	r2, r3
    buf->type[i] = name;
   26868:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
   2686c:	2001      	movs	r0, #1
   2686e:	bd10      	pop	{r4, pc}

00026870 <lv_obj_init_draw_rect_dsc>:
{
   26870:	b570      	push	{r4, r5, r6, lr}
   26872:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   26874:	2201      	movs	r2, #1
   26876:	4605      	mov	r5, r0
   26878:	460e      	mov	r6, r1
   2687a:	f7f3 ff09 	bl	1a690 <_lv_obj_get_style_int>
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   2687e:	7b23      	ldrb	r3, [r4, #12]
    draw_dsc->radius = lv_obj_get_style_radius(obj, part);
   26880:	8020      	strh	r0, [r4, #0]
    if(draw_dsc->bg_opa != LV_OPA_TRANSP) {
   26882:	b33b      	cbz	r3, 268d4 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   26884:	222c      	movs	r2, #44	; 0x2c
   26886:	4631      	mov	r1, r6
   26888:	4628      	mov	r0, r5
   2688a:	f7ff fe98 	bl	265be <_lv_obj_get_style_opa>
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   2688e:	2802      	cmp	r0, #2
        draw_dsc->bg_opa = lv_obj_get_style_bg_opa(obj, part);
   26890:	7320      	strb	r0, [r4, #12]
        if(draw_dsc->bg_opa > LV_OPA_MIN) {
   26892:	d91f      	bls.n	268d4 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_COLOR, bg_color, lv_color_t, _color, nonscalar)
   26894:	2229      	movs	r2, #41	; 0x29
   26896:	4631      	mov	r1, r6
   26898:	4628      	mov	r0, r5
   2689a:	f7f3 fec5 	bl	1a628 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_DIR, bg_grad_dir, lv_grad_dir_t, _int, scalar)
   2689e:	2223      	movs	r2, #35	; 0x23
            draw_dsc->bg_color = lv_obj_get_style_bg_color(obj, part);
   268a0:	8060      	strh	r0, [r4, #2]
   268a2:	4631      	mov	r1, r6
   268a4:	4628      	mov	r0, r5
   268a6:	f7f3 fef3 	bl	1a690 <_lv_obj_get_style_int>
   268aa:	b2c0      	uxtb	r0, r0
            draw_dsc->bg_grad_dir =  lv_obj_get_style_bg_grad_dir(obj, part);
   268ac:	71a0      	strb	r0, [r4, #6]
            if(draw_dsc->bg_grad_dir != LV_GRAD_DIR_NONE) {
   268ae:	b188      	cbz	r0, 268d4 <lv_obj_init_draw_rect_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_COLOR, bg_grad_color, lv_color_t, _color, nonscalar)
   268b0:	222a      	movs	r2, #42	; 0x2a
   268b2:	4631      	mov	r1, r6
   268b4:	4628      	mov	r0, r5
   268b6:	f7f3 feb7 	bl	1a628 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_MAIN_STOP, bg_main_stop, lv_style_int_t, _int, scalar)
   268ba:	2221      	movs	r2, #33	; 0x21
                draw_dsc->bg_grad_color = lv_obj_get_style_bg_grad_color(obj, part);
   268bc:	80a0      	strh	r0, [r4, #4]
   268be:	4631      	mov	r1, r6
   268c0:	4628      	mov	r0, r5
   268c2:	f7f3 fee5 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_GRAD_STOP, bg_grad_stop, lv_style_int_t, _int, scalar)
   268c6:	2222      	movs	r2, #34	; 0x22
                draw_dsc->bg_main_color_stop =  lv_obj_get_style_bg_main_stop(obj, part);
   268c8:	8120      	strh	r0, [r4, #8]
   268ca:	4631      	mov	r1, r6
   268cc:	4628      	mov	r0, r5
   268ce:	f7f3 fedf 	bl	1a690 <_lv_obj_get_style_int>
                draw_dsc->bg_grad_color_stop =  lv_obj_get_style_bg_grad_stop(obj, part);
   268d2:	8160      	strh	r0, [r4, #10]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_WIDTH, border_width, lv_style_int_t, _int, scalar)
   268d4:	2230      	movs	r2, #48	; 0x30
   268d6:	4631      	mov	r1, r6
   268d8:	4628      	mov	r0, r5
   268da:	f7f3 fed9 	bl	1a690 <_lv_obj_get_style_int>
    draw_dsc->border_width = lv_obj_get_style_border_width(obj, part);
   268de:	8220      	strh	r0, [r4, #16]
    if(draw_dsc->border_width) {
   268e0:	b1b0      	cbz	r0, 26910 <lv_obj_init_draw_rect_dsc+0xa0>
        if(draw_dsc->border_opa != LV_OPA_TRANSP) {
   268e2:	7d23      	ldrb	r3, [r4, #20]
   268e4:	b1a3      	cbz	r3, 26910 <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_OPA, border_opa, lv_opa_t, _opa, scalar)
   268e6:	223c      	movs	r2, #60	; 0x3c
   268e8:	4631      	mov	r1, r6
   268ea:	4628      	mov	r0, r5
   268ec:	f7ff fe67 	bl	265be <_lv_obj_get_style_opa>
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   268f0:	2802      	cmp	r0, #2
            draw_dsc->border_opa = lv_obj_get_style_border_opa(obj, part);
   268f2:	7520      	strb	r0, [r4, #20]
            if(draw_dsc->border_opa > LV_OPA_MIN) {
   268f4:	d90c      	bls.n	26910 <lv_obj_init_draw_rect_dsc+0xa0>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_SIDE, border_side, lv_border_side_t, _int, scalar)
   268f6:	2231      	movs	r2, #49	; 0x31
   268f8:	4631      	mov	r1, r6
   268fa:	4628      	mov	r0, r5
   268fc:	f7f3 fec8 	bl	1a690 <_lv_obj_get_style_int>
                draw_dsc->border_side = lv_obj_get_style_border_side(obj, part);
   26900:	b2c0      	uxtb	r0, r0
   26902:	8260      	strh	r0, [r4, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_COLOR, border_color, lv_color_t, _color, nonscalar)
   26904:	2239      	movs	r2, #57	; 0x39
   26906:	4631      	mov	r1, r6
   26908:	4628      	mov	r0, r5
   2690a:	f7f3 fe8d 	bl	1a628 <_lv_obj_get_style_color>
                draw_dsc->border_color = lv_obj_get_style_border_color(obj, part);
   2690e:	81e0      	strh	r0, [r4, #14]
}
   26910:	bd70      	pop	{r4, r5, r6, pc}

00026912 <lv_obj_design>:
{
   26912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(mode == LV_DESIGN_COVER_CHK) {
   26916:	2a02      	cmp	r2, #2
{
   26918:	b09a      	sub	sp, #104	; 0x68
   2691a:	4604      	mov	r4, r0
   2691c:	4688      	mov	r8, r1
   2691e:	4615      	mov	r5, r2
    if(mode == LV_DESIGN_COVER_CHK) {
   26920:	d15b      	bne.n	269da <lv_obj_design+0xc8>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   26922:	2100      	movs	r1, #0
   26924:	f7ff fe43 	bl	265ae <lv_obj_get_style_clip_corner>
   26928:	4606      	mov	r6, r0
   2692a:	2800      	cmp	r0, #0
   2692c:	d153      	bne.n	269d6 <lv_obj_design+0xc4>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   2692e:	4601      	mov	r1, r0
   26930:	2201      	movs	r2, #1
   26932:	4620      	mov	r0, r4
   26934:	f7f3 feac 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26938:	2204      	movs	r2, #4
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   2693a:	4682      	mov	sl, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2693c:	4631      	mov	r1, r6
   2693e:	4620      	mov	r0, r4
   26940:	f7f3 fea6 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26944:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26946:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26948:	4631      	mov	r1, r6
   2694a:	4620      	mov	r0, r4
   2694c:	f7f3 fea0 	bl	1a690 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
   26950:	f104 0110 	add.w	r1, r4, #16
   26954:	4681      	mov	r9, r0
   26956:	a805      	add	r0, sp, #20
   26958:	f7ff fc20 	bl	2619c <lv_area_copy>
        coords.x1 -= w;
   2695c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        coords.x2 += w;
   26960:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        coords.x1 -= w;
   26964:	1bdb      	subs	r3, r3, r7
   26966:	f8ad 3014 	strh.w	r3, [sp, #20]
        coords.x2 += w;
   2696a:	4407      	add	r7, r0
        coords.y1 -= h;
   2696c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        coords.y2 += h;
   26970:	f8bd 001a 	ldrh.w	r0, [sp, #26]
        coords.x2 += w;
   26974:	f8ad 7018 	strh.w	r7, [sp, #24]
        coords.y1 -= h;
   26978:	eba3 0309 	sub.w	r3, r3, r9
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   2697c:	4652      	mov	r2, sl
        coords.y2 += h;
   2697e:	4481      	add	r9, r0
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   26980:	a905      	add	r1, sp, #20
   26982:	4640      	mov	r0, r8
        coords.y1 -= h;
   26984:	f8ad 3016 	strh.w	r3, [sp, #22]
        coords.y2 += h;
   26988:	f8ad 901a 	strh.w	r9, [sp, #26]
        if(_lv_area_is_in(clip_area, &coords, r) == false) return LV_DESIGN_RES_NOT_COVER;
   2698c:	f003 fc44 	bl	2a218 <_lv_area_is_in>
   26990:	b1e8      	cbz	r0, 269ce <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_OPA, bg_opa, lv_opa_t, _opa, scalar)
   26992:	222c      	movs	r2, #44	; 0x2c
   26994:	4631      	mov	r1, r6
   26996:	4620      	mov	r0, r4
   26998:	f7ff fe11 	bl	265be <_lv_obj_get_style_opa>
        if(lv_obj_get_style_bg_opa(obj, LV_OBJ_PART_MAIN) < LV_OPA_MAX) return LV_DESIGN_RES_NOT_COVER;
   2699c:	28fc      	cmp	r0, #252	; 0xfc
   2699e:	d916      	bls.n	269ce <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BG_BLEND_MODE, bg_blend_mode, lv_blend_mode_t, _int, scalar)
   269a0:	4631      	mov	r1, r6
   269a2:	2220      	movs	r2, #32
   269a4:	4620      	mov	r0, r4
   269a6:	f7f3 fe73 	bl	1a690 <_lv_obj_get_style_int>
        if(lv_obj_get_style_bg_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   269aa:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   269ae:	d10e      	bne.n	269ce <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_BLEND_MODE, border_blend_mode, lv_blend_mode_t, _int, scalar)
   269b0:	2232      	movs	r2, #50	; 0x32
   269b2:	4620      	mov	r0, r4
   269b4:	f7f3 fe6c 	bl	1a690 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_blend_mode(obj, LV_OBJ_PART_MAIN) != LV_BLEND_MODE_NORMAL) return LV_DESIGN_RES_NOT_COVER;
   269b8:	f010 01ff 	ands.w	r1, r0, #255	; 0xff
   269bc:	d107      	bne.n	269ce <lv_obj_design+0xbc>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   269be:	f248 020c 	movw	r2, #32780	; 0x800c
   269c2:	4620      	mov	r0, r4
   269c4:	f7ff fdfb 	bl	265be <_lv_obj_get_style_opa>
        return  LV_DESIGN_RES_COVER;
   269c8:	28fc      	cmp	r0, #252	; 0xfc
   269ca:	bf88      	it	hi
   269cc:	2501      	movhi	r5, #1
}
   269ce:	4628      	mov	r0, r5
   269d0:	b01a      	add	sp, #104	; 0x68
   269d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) return LV_DESIGN_RES_MASKED;
   269d6:	2503      	movs	r5, #3
   269d8:	e7f9      	b.n	269ce <lv_obj_design+0xbc>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   269da:	2a00      	cmp	r2, #0
   269dc:	d178      	bne.n	26ad0 <lv_obj_design+0x1be>
        lv_draw_rect_dsc_init(&draw_dsc);
   269de:	a805      	add	r0, sp, #20
   269e0:	f7f6 f88c 	bl	1cafc <lv_draw_rect_dsc_init>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   269e4:	2233      	movs	r2, #51	; 0x33
   269e6:	4629      	mov	r1, r5
   269e8:	4620      	mov	r0, r4
   269ea:	f7f3 fe51 	bl	1a690 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   269ee:	b128      	cbz	r0, 269fc <lv_obj_design+0xea>
            draw_dsc.border_post = 1;
   269f0:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   269f4:	f043 0301 	orr.w	r3, r3, #1
   269f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   269fc:	aa05      	add	r2, sp, #20
   269fe:	2100      	movs	r1, #0
   26a00:	4620      	mov	r0, r4
   26a02:	f7ff ff35 	bl	26870 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26a06:	2204      	movs	r2, #4
   26a08:	2100      	movs	r1, #0
   26a0a:	4620      	mov	r0, r4
   26a0c:	f7f3 fe40 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26a10:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26a12:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26a14:	2100      	movs	r1, #0
   26a16:	4620      	mov	r0, r4
   26a18:	f7f3 fe3a 	bl	1a690 <_lv_obj_get_style_int>
        lv_area_copy(&coords, &obj->coords);
   26a1c:	f104 0910 	add.w	r9, r4, #16
   26a20:	4607      	mov	r7, r0
   26a22:	4649      	mov	r1, r9
   26a24:	a801      	add	r0, sp, #4
   26a26:	f7ff fbb9 	bl	2619c <lv_area_copy>
        coords.x1 -= w;
   26a2a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
        coords.x2 += w;
   26a2e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
        coords.x1 -= w;
   26a32:	1b9b      	subs	r3, r3, r6
   26a34:	f8ad 3004 	strh.w	r3, [sp, #4]
        coords.x2 += w;
   26a38:	4406      	add	r6, r0
        coords.y1 -= h;
   26a3a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        coords.y2 += h;
   26a3e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
        coords.x2 += w;
   26a42:	f8ad 6008 	strh.w	r6, [sp, #8]
        coords.y1 -= h;
   26a46:	1bdb      	subs	r3, r3, r7
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   26a48:	4641      	mov	r1, r8
        coords.y2 += h;
   26a4a:	4407      	add	r7, r0
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   26a4c:	aa05      	add	r2, sp, #20
   26a4e:	a801      	add	r0, sp, #4
        coords.y1 -= h;
   26a50:	f8ad 3006 	strh.w	r3, [sp, #6]
        coords.y2 += h;
   26a54:	f8ad 700a 	strh.w	r7, [sp, #10]
        lv_draw_rect(&coords, clip_area, &draw_dsc);
   26a58:	f002 fc05 	bl	29266 <lv_draw_rect>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   26a5c:	2100      	movs	r1, #0
   26a5e:	4620      	mov	r0, r4
   26a60:	f7ff fda5 	bl	265ae <lv_obj_get_style_clip_corner>
   26a64:	2800      	cmp	r0, #0
   26a66:	d0b2      	beq.n	269ce <lv_obj_design+0xbc>
            lv_draw_mask_radius_param_t * mp = _lv_mem_buf_get(sizeof(lv_draw_mask_radius_param_t));
   26a68:	201c      	movs	r0, #28
   26a6a:	f7f6 fdf3 	bl	1d654 <_lv_mem_buf_get>
_LV_OBJ_STYLE_SET_GET_DECLARE(RADIUS, radius, lv_style_int_t, _int, scalar)
   26a6e:	2201      	movs	r2, #1
   26a70:	4606      	mov	r6, r0
   26a72:	2100      	movs	r1, #0
   26a74:	4620      	mov	r0, r4
   26a76:	f7f3 fe0b 	bl	1a690 <_lv_obj_get_style_int>
            if(draw_dsc.border_post && draw_dsc.border_opa >= LV_OPA_MIN && draw_dsc.border_width > 0) {
   26a7a:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   26a7e:	07db      	lsls	r3, r3, #31
   26a80:	4602      	mov	r2, r0
   26a82:	d522      	bpl.n	26aca <lv_obj_design+0x1b8>
   26a84:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   26a88:	2b01      	cmp	r3, #1
   26a8a:	d91e      	bls.n	26aca <lv_obj_design+0x1b8>
   26a8c:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
   26a90:	2b00      	cmp	r3, #0
   26a92:	dd1a      	ble.n	26aca <lv_obj_design+0x1b8>
                cc_area.x1 = obj->coords.x1 + 1;
   26a94:	8a23      	ldrh	r3, [r4, #16]
   26a96:	3301      	adds	r3, #1
   26a98:	f8ad 300c 	strh.w	r3, [sp, #12]
                cc_area.y1 = obj->coords.y1 + 1;
   26a9c:	8a63      	ldrh	r3, [r4, #18]
   26a9e:	3301      	adds	r3, #1
   26aa0:	f8ad 300e 	strh.w	r3, [sp, #14]
                cc_area.x2 = obj->coords.x2 - 1;
   26aa4:	8aa3      	ldrh	r3, [r4, #20]
   26aa6:	3b01      	subs	r3, #1
   26aa8:	f8ad 3010 	strh.w	r3, [sp, #16]
                cc_area.y2 = obj->coords.y2 - 1;
   26aac:	8ae3      	ldrh	r3, [r4, #22]
   26aae:	3b01      	subs	r3, #1
   26ab0:	f8ad 3012 	strh.w	r3, [sp, #18]
                lv_draw_mask_radius_init(mp, &cc_area, r, false);
   26ab4:	a903      	add	r1, sp, #12
   26ab6:	2300      	movs	r3, #0
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   26ab8:	4630      	mov	r0, r6
   26aba:	f7f5 fff5 	bl	1caa8 <lv_draw_mask_radius_init>
            lv_draw_mask_add(mp, obj + 8);
   26abe:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
   26ac2:	4630      	mov	r0, r6
   26ac4:	f7f5 feee 	bl	1c8a4 <lv_draw_mask_add>
   26ac8:	e781      	b.n	269ce <lv_obj_design+0xbc>
                lv_draw_mask_radius_init(mp, &obj->coords, r, false);
   26aca:	2300      	movs	r3, #0
   26acc:	4649      	mov	r1, r9
   26ace:	e7f3      	b.n	26ab8 <lv_obj_design+0x1a6>
    else if(mode == LV_DESIGN_DRAW_POST) {
   26ad0:	2a01      	cmp	r2, #1
   26ad2:	d001      	beq.n	26ad8 <lv_obj_design+0x1c6>
    return LV_DESIGN_RES_OK;
   26ad4:	2500      	movs	r5, #0
   26ad6:	e77a      	b.n	269ce <lv_obj_design+0xbc>
        if(lv_obj_get_style_clip_corner(obj, LV_OBJ_PART_MAIN)) {
   26ad8:	2100      	movs	r1, #0
   26ada:	f7ff fd68 	bl	265ae <lv_obj_get_style_clip_corner>
   26ade:	b128      	cbz	r0, 26aec <lv_obj_design+0x1da>
            lv_draw_mask_radius_param_t * param = lv_draw_mask_remove_custom(obj + 8);
   26ae0:	f504 70f0 	add.w	r0, r4, #480	; 0x1e0
   26ae4:	f7f5 ff3a 	bl	1c95c <lv_draw_mask_remove_custom>
            _lv_mem_buf_release(param);
   26ae8:	f7f6 fe16 	bl	1d718 <_lv_mem_buf_release>
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   26aec:	2233      	movs	r2, #51	; 0x33
   26aee:	2100      	movs	r1, #0
   26af0:	4620      	mov	r0, r4
   26af2:	f7f3 fdcd 	bl	1a690 <_lv_obj_get_style_int>
        if(lv_obj_get_style_border_post(obj, LV_OBJ_PART_MAIN)) {
   26af6:	2800      	cmp	r0, #0
   26af8:	d0ec      	beq.n	26ad4 <lv_obj_design+0x1c2>
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   26afa:	2500      	movs	r5, #0
            lv_draw_rect_dsc_init(&draw_dsc);
   26afc:	a805      	add	r0, sp, #20
   26afe:	f7f5 fffd 	bl	1cafc <lv_draw_rect_dsc_init>
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   26b02:	aa05      	add	r2, sp, #20
   26b04:	4629      	mov	r1, r5
   26b06:	4620      	mov	r0, r4
            draw_dsc.bg_opa = LV_OPA_TRANSP;
   26b08:	f88d 5020 	strb.w	r5, [sp, #32]
            draw_dsc.pattern_opa = LV_OPA_TRANSP;
   26b0c:	f88d 504a 	strb.w	r5, [sp, #74]	; 0x4a
            draw_dsc.shadow_opa = LV_OPA_TRANSP;
   26b10:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
            draw_dsc.value_opa = LV_OPA_TRANSP;
   26b14:	f88d 5058 	strb.w	r5, [sp, #88]	; 0x58
            lv_obj_init_draw_rect_dsc(obj, LV_OBJ_PART_MAIN, &draw_dsc);
   26b18:	f7ff feaa 	bl	26870 <lv_obj_init_draw_rect_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26b1c:	4629      	mov	r1, r5
   26b1e:	2204      	movs	r2, #4
   26b20:	4620      	mov	r0, r4
   26b22:	f7f3 fdb5 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26b26:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26b28:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26b2a:	4629      	mov	r1, r5
   26b2c:	4620      	mov	r0, r4
   26b2e:	f7f3 fdaf 	bl	1a690 <_lv_obj_get_style_int>
            lv_area_copy(&coords, &obj->coords);
   26b32:	f104 0110 	add.w	r1, r4, #16
   26b36:	4606      	mov	r6, r0
   26b38:	a803      	add	r0, sp, #12
   26b3a:	f7ff fb2f 	bl	2619c <lv_area_copy>
            coords.x1 -= w;
   26b3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
            coords.x2 += w;
   26b42:	f8bd 0010 	ldrh.w	r0, [sp, #16]
            coords.x1 -= w;
   26b46:	1bdb      	subs	r3, r3, r7
   26b48:	f8ad 300c 	strh.w	r3, [sp, #12]
            coords.x2 += w;
   26b4c:	4407      	add	r7, r0
            coords.y1 -= h;
   26b4e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
            coords.y2 += h;
   26b52:	f8bd 0012 	ldrh.w	r0, [sp, #18]
            coords.x2 += w;
   26b56:	f8ad 7010 	strh.w	r7, [sp, #16]
            coords.y1 -= h;
   26b5a:	1b9b      	subs	r3, r3, r6
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   26b5c:	aa05      	add	r2, sp, #20
            coords.y2 += h;
   26b5e:	4406      	add	r6, r0
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   26b60:	4641      	mov	r1, r8
   26b62:	a803      	add	r0, sp, #12
            coords.y1 -= h;
   26b64:	f8ad 300e 	strh.w	r3, [sp, #14]
            coords.y2 += h;
   26b68:	f8ad 6012 	strh.w	r6, [sp, #18]
            lv_draw_rect(&coords, clip_area, &draw_dsc);
   26b6c:	f002 fb7b 	bl	29266 <lv_draw_rect>
   26b70:	e72d      	b.n	269ce <lv_obj_design+0xbc>

00026b72 <lv_obj_init_draw_label_dsc>:
{
   26b72:	b570      	push	{r4, r5, r6, lr}
   26b74:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_OPA, text_opa, lv_opa_t, _opa, scalar)
   26b76:	f248 028c 	movw	r2, #32908	; 0x808c
   26b7a:	4605      	mov	r5, r0
   26b7c:	460e      	mov	r6, r1
   26b7e:	f7ff fd1e 	bl	265be <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   26b82:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_text_opa(obj, part);
   26b84:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN) return;
   26b86:	d931      	bls.n	26bec <lv_obj_init_draw_label_dsc+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_COLOR, text_color, lv_color_t, _color, nonscalar)
   26b88:	f248 0289 	movw	r2, #32905	; 0x8089
   26b8c:	4631      	mov	r1, r6
   26b8e:	4628      	mov	r0, r5
   26b90:	f7f3 fd4a 	bl	1a628 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LETTER_SPACE, text_letter_space, lv_style_int_t, _int, scalar)
   26b94:	f248 0280 	movw	r2, #32896	; 0x8080
    draw_dsc->color = lv_obj_get_style_text_color(obj, part);
   26b98:	8020      	strh	r0, [r4, #0]
   26b9a:	4631      	mov	r1, r6
   26b9c:	4628      	mov	r0, r5
   26b9e:	f7f3 fd77 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_LINE_SPACE, text_line_space, lv_style_int_t, _int, scalar)
   26ba2:	f248 0281 	movw	r2, #32897	; 0x8081
    draw_dsc->letter_space = lv_obj_get_style_text_letter_space(obj, part);
   26ba6:	81a0      	strh	r0, [r4, #12]
   26ba8:	4631      	mov	r1, r6
   26baa:	4628      	mov	r0, r5
   26bac:	f7f3 fd70 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   26bb0:	f248 0282 	movw	r2, #32898	; 0x8082
    draw_dsc->line_space = lv_obj_get_style_text_line_space(obj, part);
   26bb4:	8160      	strh	r0, [r4, #10]
   26bb6:	4631      	mov	r1, r6
   26bb8:	4628      	mov	r0, r5
   26bba:	f7f3 fd69 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   26bbe:	f248 028e 	movw	r2, #32910	; 0x808e
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_DECOR, text_decor, lv_text_decor_t, _int, scalar)
   26bc2:	77a0      	strb	r0, [r4, #30]
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_FONT, text_font, const lv_font_t *, _ptr, scalar)
   26bc4:	4631      	mov	r1, r6
   26bc6:	4628      	mov	r0, r5
   26bc8:	f7ff fd5e 	bl	26688 <_lv_obj_get_style_ptr>
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   26bcc:	6922      	ldr	r2, [r4, #16]
    draw_dsc->font = lv_obj_get_style_text_font(obj, part);
   26bce:	6060      	str	r0, [r4, #4]
    if(draw_dsc->sel_start != LV_DRAW_LABEL_NO_TXT_SEL && draw_dsc->sel_end != LV_DRAW_LABEL_NO_TXT_SEL) {
   26bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   26bd4:	429a      	cmp	r2, r3
   26bd6:	d009      	beq.n	26bec <lv_obj_init_draw_label_dsc+0x7a>
   26bd8:	6962      	ldr	r2, [r4, #20]
   26bda:	429a      	cmp	r2, r3
   26bdc:	d006      	beq.n	26bec <lv_obj_init_draw_label_dsc+0x7a>
_LV_OBJ_STYLE_SET_GET_DECLARE(TEXT_SEL_COLOR, text_sel_color, lv_color_t, _color, nonscalar)
   26bde:	f248 028a 	movw	r2, #32906	; 0x808a
   26be2:	4631      	mov	r1, r6
   26be4:	4628      	mov	r0, r5
   26be6:	f7f3 fd1f 	bl	1a628 <_lv_obj_get_style_color>
        draw_dsc->color = lv_obj_get_style_text_sel_color(obj, part);
   26bea:	8020      	strh	r0, [r4, #0]
}
   26bec:	bd70      	pop	{r4, r5, r6, pc}

00026bee <lv_obj_init_draw_img_dsc>:
{
   26bee:	b570      	push	{r4, r5, r6, lr}
   26bf0:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_OPA, image_opa, lv_opa_t, _opa, scalar)
   26bf2:	f248 02ac 	movw	r2, #32940	; 0x80ac
   26bf6:	4605      	mov	r5, r0
   26bf8:	460e      	mov	r6, r1
   26bfa:	f7ff fce0 	bl	265be <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26bfe:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_image_opa(obj, part);
   26c00:	7020      	strb	r0, [r4, #0]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26c02:	d927      	bls.n	26c54 <lv_obj_init_draw_img_dsc+0x66>
    draw_dsc->angle = 0;
   26c04:	2300      	movs	r3, #0
   26c06:	8063      	strh	r3, [r4, #2]
    draw_dsc->zoom = LV_IMG_ZOOM_NONE;
   26c08:	f44f 7380 	mov.w	r3, #256	; 0x100
   26c0c:	8123      	strh	r3, [r4, #8]
   26c0e:	8aab      	ldrh	r3, [r5, #20]
   26c10:	8a2a      	ldrh	r2, [r5, #16]
   26c12:	3301      	adds	r3, #1
   26c14:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.x = lv_area_get_width(&obj->coords) / 2;
   26c16:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   26c1a:	fa02 f383 	sxtah	r3, r2, r3
   26c1e:	105b      	asrs	r3, r3, #1
   26c20:	80a3      	strh	r3, [r4, #4]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   26c22:	8aeb      	ldrh	r3, [r5, #22]
   26c24:	8a6a      	ldrh	r2, [r5, #18]
   26c26:	3301      	adds	r3, #1
   26c28:	1a9b      	subs	r3, r3, r2
    draw_dsc->pivot.y = lv_area_get_height(&obj->coords) / 2;
   26c2a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
   26c2e:	fa02 f383 	sxtah	r3, r2, r3
   26c32:	105b      	asrs	r3, r3, #1
   26c34:	80e3      	strh	r3, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR_OPA, image_recolor_opa, lv_opa_t, _opa, scalar)
   26c36:	f248 02ad 	movw	r2, #32941	; 0x80ad
   26c3a:	4631      	mov	r1, r6
   26c3c:	4628      	mov	r0, r5
   26c3e:	f7ff fcbe 	bl	265be <_lv_obj_get_style_opa>
    draw_dsc->recolor_opa = lv_obj_get_style_image_recolor_opa(obj, part);
   26c42:	72a0      	strb	r0, [r4, #10]
    if(draw_dsc->recolor_opa > 0) {
   26c44:	b130      	cbz	r0, 26c54 <lv_obj_init_draw_img_dsc+0x66>
_LV_OBJ_STYLE_SET_GET_DECLARE(IMAGE_RECOLOR, image_recolor, lv_color_t, _color, nonscalar)
   26c46:	f248 02a9 	movw	r2, #32937	; 0x80a9
   26c4a:	4631      	mov	r1, r6
   26c4c:	4628      	mov	r0, r5
   26c4e:	f7f3 fceb 	bl	1a628 <_lv_obj_get_style_color>
        draw_dsc->recolor = lv_obj_get_style_image_recolor(obj, part);
   26c52:	81a0      	strh	r0, [r4, #12]
}
   26c54:	bd70      	pop	{r4, r5, r6, pc}

00026c56 <lv_obj_init_draw_line_dsc>:
{
   26c56:	b570      	push	{r4, r5, r6, lr}
   26c58:	4614      	mov	r4, r2
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_WIDTH, line_width, lv_style_int_t, _int, scalar)
   26c5a:	2290      	movs	r2, #144	; 0x90
   26c5c:	4605      	mov	r5, r0
   26c5e:	460e      	mov	r6, r1
   26c60:	f7f3 fd16 	bl	1a690 <_lv_obj_get_style_int>
    draw_dsc->width = lv_obj_get_style_line_width(obj, part);
   26c64:	8060      	strh	r0, [r4, #2]
    if(draw_dsc->width == 0) return;
   26c66:	b340      	cbz	r0, 26cba <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_OPA, line_opa, lv_opa_t, _opa, scalar)
   26c68:	229c      	movs	r2, #156	; 0x9c
   26c6a:	4631      	mov	r1, r6
   26c6c:	4628      	mov	r0, r5
   26c6e:	f7ff fca6 	bl	265be <_lv_obj_get_style_opa>
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26c72:	2802      	cmp	r0, #2
    draw_dsc->opa = lv_obj_get_style_line_opa(obj, part);
   26c74:	7220      	strb	r0, [r4, #8]
    if(draw_dsc->opa <= LV_OPA_MIN)  return;
   26c76:	d920      	bls.n	26cba <lv_obj_init_draw_line_dsc+0x64>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_COLOR, line_color, lv_color_t, _color, nonscalar)
   26c78:	2299      	movs	r2, #153	; 0x99
   26c7a:	4631      	mov	r1, r6
   26c7c:	4628      	mov	r0, r5
   26c7e:	f7f3 fcd3 	bl	1a628 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_WIDTH, line_dash_width, lv_style_int_t, _int, scalar)
   26c82:	2292      	movs	r2, #146	; 0x92
    draw_dsc->color = lv_obj_get_style_line_color(obj, part);
   26c84:	8020      	strh	r0, [r4, #0]
   26c86:	4631      	mov	r1, r6
   26c88:	4628      	mov	r0, r5
   26c8a:	f7f3 fd01 	bl	1a690 <_lv_obj_get_style_int>
    draw_dsc->dash_width = lv_obj_get_style_line_dash_width(obj, part);
   26c8e:	80a0      	strh	r0, [r4, #4]
    if(draw_dsc->dash_width) {
   26c90:	b128      	cbz	r0, 26c9e <lv_obj_init_draw_line_dsc+0x48>
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_DASH_GAP, line_dash_gap, lv_style_int_t, _int, scalar)
   26c92:	2293      	movs	r2, #147	; 0x93
   26c94:	4631      	mov	r1, r6
   26c96:	4628      	mov	r0, r5
   26c98:	f7f3 fcfa 	bl	1a690 <_lv_obj_get_style_int>
        draw_dsc->dash_gap = lv_obj_get_style_line_dash_gap(obj, part);
   26c9c:	80e0      	strh	r0, [r4, #6]
_LV_OBJ_STYLE_SET_GET_DECLARE(LINE_ROUNDED, line_rounded, bool, _int, scalar)
   26c9e:	2294      	movs	r2, #148	; 0x94
   26ca0:	4631      	mov	r1, r6
   26ca2:	4628      	mov	r0, r5
   26ca4:	f7f3 fcf4 	bl	1a690 <_lv_obj_get_style_int>
    draw_dsc->round_start = lv_obj_get_style_line_rounded(obj, part);
   26ca8:	7a63      	ldrb	r3, [r4, #9]
   26caa:	3800      	subs	r0, #0
   26cac:	bf18      	it	ne
   26cae:	2001      	movne	r0, #1
   26cb0:	f360 0382 	bfi	r3, r0, #2, #1
    draw_dsc->round_end = draw_dsc->round_start;
   26cb4:	f360 03c3 	bfi	r3, r0, #3, #1
   26cb8:	7263      	strb	r3, [r4, #9]
}
   26cba:	bd70      	pop	{r4, r5, r6, pc}

00026cbc <style_snapshot>:
    }
}

static void style_snapshot(lv_obj_t * obj, uint8_t part, style_snapshot_t * shot)
{
   26cbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cc0:	4614      	mov	r4, r2
   26cc2:	460e      	mov	r6, r1
    _lv_obj_disable_style_caching(obj, true);
   26cc4:	2101      	movs	r1, #1
{
   26cc6:	4605      	mov	r5, r0
    _lv_obj_disable_style_caching(obj, true);
   26cc8:	f7ff fc3e 	bl	26548 <_lv_obj_disable_style_caching>
    _lv_memset_00(shot, sizeof(style_snapshot_t));
   26ccc:	21b8      	movs	r1, #184	; 0xb8
   26cce:	4620      	mov	r0, r4
   26cd0:	f7ff fa5e 	bl	26190 <_lv_memset_00>
    lv_draw_rect_dsc_init(&shot->rect);
    lv_draw_label_dsc_init(&shot->label);
   26cd4:	f104 0a54 	add.w	sl, r4, #84	; 0x54
    lv_draw_rect_dsc_init(&shot->rect);
   26cd8:	4620      	mov	r0, r4
   26cda:	f7f5 ff0f 	bl	1cafc <lv_draw_rect_dsc_init>
    lv_draw_img_dsc_init(&shot->img);
   26cde:	f104 097e 	add.w	r9, r4, #126	; 0x7e
    lv_draw_label_dsc_init(&shot->label);
   26ce2:	4650      	mov	r0, sl
   26ce4:	f7f4 fd6a 	bl	1b7bc <lv_draw_label_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   26ce8:	f104 0874 	add.w	r8, r4, #116	; 0x74
    lv_draw_img_dsc_init(&shot->img);
   26cec:	4648      	mov	r0, r9
   26cee:	f001 fe01 	bl	288f4 <lv_draw_img_dsc_init>
    lv_draw_line_dsc_init(&shot->line);
   26cf2:	4640      	mov	r0, r8
   26cf4:	f001 fe55 	bl	289a2 <lv_draw_line_dsc_init>

    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   26cf8:	4631      	mov	r1, r6
   26cfa:	4628      	mov	r0, r5
   26cfc:	f7ff fc12 	bl	26524 <lv_obj_get_style_list>
    bool trans_ori = list->skip_trans;
   26d00:	7943      	ldrb	r3, [r0, #5]
   26d02:	f003 0b01 	and.w	fp, r3, #1
    list->skip_trans = 1;
   26d06:	f043 0301 	orr.w	r3, r3, #1
   26d0a:	7143      	strb	r3, [r0, #5]
    lv_style_list_t * list = lv_obj_get_style_list(obj, part);
   26d0c:	4607      	mov	r7, r0

    lv_obj_init_draw_rect_dsc(obj, part, &shot->rect);
   26d0e:	4622      	mov	r2, r4
   26d10:	4631      	mov	r1, r6
   26d12:	4628      	mov	r0, r5
   26d14:	f7ff fdac 	bl	26870 <lv_obj_init_draw_rect_dsc>
    lv_obj_init_draw_label_dsc(obj, part, &shot->label);
   26d18:	4652      	mov	r2, sl
   26d1a:	4631      	mov	r1, r6
   26d1c:	4628      	mov	r0, r5
   26d1e:	f7ff ff28 	bl	26b72 <lv_obj_init_draw_label_dsc>
    lv_obj_init_draw_img_dsc(obj, part, &shot->img);
   26d22:	464a      	mov	r2, r9
   26d24:	4631      	mov	r1, r6
   26d26:	4628      	mov	r0, r5
   26d28:	f7ff ff61 	bl	26bee <lv_obj_init_draw_img_dsc>
    lv_obj_init_draw_line_dsc(obj, part, &shot->line);
   26d2c:	4642      	mov	r2, r8
   26d2e:	4631      	mov	r1, r6
   26d30:	4628      	mov	r0, r5
   26d32:	f7ff ff90 	bl	26c56 <lv_obj_init_draw_line_dsc>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   26d36:	2210      	movs	r2, #16
   26d38:	4631      	mov	r1, r6
   26d3a:	4628      	mov	r0, r5
   26d3c:	f7f3 fca8 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   26d40:	2211      	movs	r2, #17


    shot->pad_top = lv_obj_get_style_pad_top(obj, part);
   26d42:	f8a4 008e 	strh.w	r0, [r4, #142]	; 0x8e
   26d46:	4631      	mov	r1, r6
   26d48:	4628      	mov	r0, r5
   26d4a:	f7f3 fca1 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   26d4e:	2213      	movs	r2, #19
    shot->pad_bottom = lv_obj_get_style_pad_bottom(obj, part);
   26d50:	f8a4 0090 	strh.w	r0, [r4, #144]	; 0x90
   26d54:	4631      	mov	r1, r6
   26d56:	4628      	mov	r0, r5
   26d58:	f7f3 fc9a 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   26d5c:	2212      	movs	r2, #18
    shot->pad_right = lv_obj_get_style_pad_right(obj, part);
   26d5e:	f8a4 0092 	strh.w	r0, [r4, #146]	; 0x92
   26d62:	4631      	mov	r1, r6
   26d64:	4628      	mov	r0, r5
   26d66:	f7f3 fc93 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_INNER, pad_inner, lv_style_int_t, _int, scalar)
   26d6a:	2214      	movs	r2, #20
    shot->pad_left = lv_obj_get_style_pad_left(obj, part);
   26d6c:	f8a4 0094 	strh.w	r0, [r4, #148]	; 0x94
   26d70:	4631      	mov	r1, r6
   26d72:	4628      	mov	r0, r5
   26d74:	f7f3 fc8c 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_TOP, margin_top, lv_style_int_t, _int, scalar)
   26d78:	2215      	movs	r2, #21
    shot->pad_inner = lv_obj_get_style_pad_inner(obj, part);
   26d7a:	f8a4 0096 	strh.w	r0, [r4, #150]	; 0x96
   26d7e:	4631      	mov	r1, r6
   26d80:	4628      	mov	r0, r5
   26d82:	f7f3 fc85 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_BOTTOM, margin_bottom, lv_style_int_t, _int, scalar)
   26d86:	2216      	movs	r2, #22
    shot->margin_top = lv_obj_get_style_margin_top(obj, part);
   26d88:	f8a4 0098 	strh.w	r0, [r4, #152]	; 0x98
   26d8c:	4631      	mov	r1, r6
   26d8e:	4628      	mov	r0, r5
   26d90:	f7f3 fc7e 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_LEFT, margin_left, lv_style_int_t, _int, scalar)
   26d94:	2217      	movs	r2, #23
    shot->margin_bottom = lv_obj_get_style_margin_bottom(obj, part);
   26d96:	f8a4 009a 	strh.w	r0, [r4, #154]	; 0x9a
   26d9a:	4631      	mov	r1, r6
   26d9c:	4628      	mov	r0, r5
   26d9e:	f7f3 fc77 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(MARGIN_RIGHT, margin_right, lv_style_int_t, _int, scalar)
   26da2:	2218      	movs	r2, #24
    shot->margin_left = lv_obj_get_style_margin_left(obj, part);
   26da4:	f8a4 009c 	strh.w	r0, [r4, #156]	; 0x9c
   26da8:	4631      	mov	r1, r6
   26daa:	4628      	mov	r0, r5
   26dac:	f7f3 fc70 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SIZE, size, lv_style_int_t, _int, scalar)
   26db0:	2203      	movs	r2, #3
    shot->margin_right = lv_obj_get_style_margin_right(obj, part);
   26db2:	f8a4 009e 	strh.w	r0, [r4, #158]	; 0x9e
   26db6:	4631      	mov	r1, r6
   26db8:	4628      	mov	r0, r5
   26dba:	f7f3 fc69 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   26dbe:	2204      	movs	r2, #4
    shot->size = lv_obj_get_style_size(obj, part);
   26dc0:	f8a4 00a0 	strh.w	r0, [r4, #160]	; 0xa0
   26dc4:	4631      	mov	r1, r6
   26dc6:	4628      	mov	r0, r5
   26dc8:	f7f3 fc62 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   26dcc:	2205      	movs	r2, #5
    shot->transform_width = lv_obj_get_style_transform_width(obj, part);
   26dce:	f8a4 00a2 	strh.w	r0, [r4, #162]	; 0xa2
   26dd2:	4631      	mov	r1, r6
   26dd4:	4628      	mov	r0, r5
   26dd6:	f7f3 fc5b 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ANGLE, transform_angle, lv_style_int_t, _int, scalar)
   26dda:	2206      	movs	r2, #6
    shot->transform_height = lv_obj_get_style_transform_height(obj, part);
   26ddc:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
   26de0:	4631      	mov	r1, r6
   26de2:	4628      	mov	r0, r5
   26de4:	f7f3 fc54 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_ZOOM, transform_zoom, lv_style_int_t, _int, scalar)
   26de8:	2207      	movs	r2, #7
    shot->transform_angle = lv_obj_get_style_transform_angle(obj, part);
   26dea:	f8a4 00a6 	strh.w	r0, [r4, #166]	; 0xa6
   26dee:	4631      	mov	r1, r6
   26df0:	4628      	mov	r0, r5
   26df2:	f7f3 fc4d 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, lv_anim_path_t *, _ptr, scalar)
#else
/*For compatibility*/
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSITION_PATH, transition_path, const void *, _ptr, scalar)
#endif
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_WIDTH, scale_width, lv_style_int_t, _int, scalar)
   26df6:	22c0      	movs	r2, #192	; 0xc0
    shot->transform_zoom = lv_obj_get_style_transform_zoom(obj, part);
   26df8:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
   26dfc:	4631      	mov	r1, r6
   26dfe:	4628      	mov	r0, r5
   26e00:	f7f3 fc46 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_BORDER_WIDTH, scale_border_width, lv_style_int_t, _int, scalar)
   26e04:	22c1      	movs	r2, #193	; 0xc1
    shot->scale_width = lv_obj_get_style_scale_width(obj, part);
   26e06:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
   26e0a:	4631      	mov	r1, r6
   26e0c:	4628      	mov	r0, r5
   26e0e:	f7f3 fc3f 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_BORDER_WIDTH, scale_end_border_width, lv_style_int_t, _int, scalar)
   26e12:	22c2      	movs	r2, #194	; 0xc2
    shot->scale_border_width = lv_obj_get_style_scale_border_width(obj, part);
   26e14:	f8a4 00ac 	strh.w	r0, [r4, #172]	; 0xac
   26e18:	4631      	mov	r1, r6
   26e1a:	4628      	mov	r0, r5
   26e1c:	f7f3 fc38 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_LINE_WIDTH, scale_end_line_width, lv_style_int_t, _int, scalar)
   26e20:	22c3      	movs	r2, #195	; 0xc3
    shot->scale_end_border_width = lv_obj_get_style_scale_end_border_width(obj, part);
   26e22:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
   26e26:	4631      	mov	r1, r6
   26e28:	4628      	mov	r0, r5
   26e2a:	f7f3 fc31 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_GRAD_COLOR, scale_grad_color, lv_color_t, _color, nonscalar)
   26e2e:	22c9      	movs	r2, #201	; 0xc9
    shot->scale_end_line_width = lv_obj_get_style_scale_end_line_width(obj, part);
   26e30:	f8a4 00b0 	strh.w	r0, [r4, #176]	; 0xb0
   26e34:	4631      	mov	r1, r6
   26e36:	4628      	mov	r0, r5
   26e38:	f7f3 fbf6 	bl	1a628 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(SCALE_END_COLOR, scale_end_color, lv_color_t, _color, nonscalar)
   26e3c:	22ca      	movs	r2, #202	; 0xca
    shot->scale_grad_color = lv_obj_get_style_scale_grad_color(obj, part);
   26e3e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
   26e42:	4631      	mov	r1, r6
   26e44:	4628      	mov	r0, r5
   26e46:	f7f3 fbef 	bl	1a628 <_lv_obj_get_style_color>
_LV_OBJ_STYLE_SET_GET_DECLARE(OPA_SCALE, opa_scale, lv_opa_t, _opa, scalar)
   26e4a:	f248 020c 	movw	r2, #32780	; 0x800c
    shot->scale_end_color = lv_obj_get_style_scale_end_color(obj, part);
   26e4e:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
   26e52:	4631      	mov	r1, r6
   26e54:	4628      	mov	r0, r5
   26e56:	f7ff fbb2 	bl	265be <_lv_obj_get_style_opa>
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   26e5a:	4631      	mov	r1, r6
    shot->opa_scale = lv_obj_get_style_opa_scale(obj, part);
   26e5c:	f884 00b6 	strb.w	r0, [r4, #182]	; 0xb6
    shot->clip_corder = lv_obj_get_style_clip_corner(obj, part);
   26e60:	4628      	mov	r0, r5
   26e62:	f7ff fba4 	bl	265ae <lv_obj_get_style_clip_corner>
   26e66:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
   26e6a:	f360 0300 	bfi	r3, r0, #0, #1
   26e6e:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
_LV_OBJ_STYLE_SET_GET_DECLARE(BORDER_POST, border_post, bool, _int, scalar)
   26e72:	2233      	movs	r2, #51	; 0x33
   26e74:	4631      	mov	r1, r6
   26e76:	4628      	mov	r0, r5
   26e78:	f7f3 fc0a 	bl	1a690 <_lv_obj_get_style_int>
    shot->border_post  = lv_obj_get_style_border_post(obj, part);
   26e7c:	f894 30b7 	ldrb.w	r3, [r4, #183]	; 0xb7
   26e80:	3800      	subs	r0, #0
   26e82:	bf18      	it	ne
   26e84:	2001      	movne	r0, #1
   26e86:	f360 0341 	bfi	r3, r0, #1, #1
   26e8a:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7

    _lv_obj_disable_style_caching(obj, false);
   26e8e:	2100      	movs	r1, #0
   26e90:	4628      	mov	r0, r5
   26e92:	f7ff fb59 	bl	26548 <_lv_obj_disable_style_caching>
    list->skip_trans = trans_ori;
   26e96:	797b      	ldrb	r3, [r7, #5]
   26e98:	f36b 0300 	bfi	r3, fp, #0, #1
   26e9c:	717b      	strb	r3, [r7, #5]
}
   26e9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00026ea2 <lv_obj_set_state>:
{
   26ea2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(obj->state == new_state) return;
   26ea6:	f890 9035 	ldrb.w	r9, [r0, #53]	; 0x35
   26eaa:	4589      	cmp	r9, r1
{
   26eac:	b0dd      	sub	sp, #372	; 0x174
   26eae:	4605      	mov	r5, r0
   26eb0:	4688      	mov	r8, r1
    if(obj->state == new_state) return;
   26eb2:	f000 80ac 	beq.w	2700e <lv_obj_set_state+0x16c>
   26eb6:	2600      	movs	r6, #0
    style_snapshot_res_t cmp_res = STYLE_COMPARE_SAME;
   26eb8:	4634      	mov	r4, r6
   26eba:	b2f7      	uxtb	r7, r6
        lv_style_list_t * style_list = lv_obj_get_style_list(obj, part);
   26ebc:	4639      	mov	r1, r7
   26ebe:	4628      	mov	r0, r5
   26ec0:	f7ff fb30 	bl	26524 <lv_obj_get_style_list>
        if(style_list == NULL) break;   /*No more style lists*/
   26ec4:	2800      	cmp	r0, #0
   26ec6:	f000 8096 	beq.w	26ff6 <lv_obj_set_state+0x154>
        style_snapshot(obj, part, &shot_pre);
   26eca:	466a      	mov	r2, sp
   26ecc:	4639      	mov	r1, r7
   26ece:	4628      	mov	r0, r5
        obj->state = prev_state;
   26ed0:	f885 9035 	strb.w	r9, [r5, #53]	; 0x35
        style_snapshot(obj, part, &shot_pre);
   26ed4:	f7ff fef2 	bl	26cbc <style_snapshot>
        style_snapshot(obj, part, &shot_post);
   26ed8:	aa2e      	add	r2, sp, #184	; 0xb8
   26eda:	4639      	mov	r1, r7
   26edc:	4628      	mov	r0, r5
        obj->state = new_state;
   26ede:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
        style_snapshot(obj, part, &shot_post);
   26ee2:	f7ff feeb 	bl	26cbc <style_snapshot>

static style_snapshot_res_t style_snapshot_compare(style_snapshot_t * shot1, style_snapshot_t * shot2)
{
    if(memcmp(shot1, shot2, sizeof(style_snapshot_t)) == 0) return STYLE_COMPARE_SAME;
   26ee6:	22b8      	movs	r2, #184	; 0xb8
   26ee8:	eb0d 0102 	add.w	r1, sp, r2
   26eec:	4668      	mov	r0, sp
   26eee:	f004 fc26 	bl	2b73e <memcmp>
   26ef2:	2800      	cmp	r0, #0
   26ef4:	d07a      	beq.n	26fec <lv_obj_set_state+0x14a>


    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
   26ef6:	f9bd 208e 	ldrsh.w	r2, [sp, #142]	; 0x8e
   26efa:	f9bd 3146 	ldrsh.w	r3, [sp, #326]	; 0x146
   26efe:	429a      	cmp	r2, r3
   26f00:	f040 8088 	bne.w	27014 <lv_obj_set_state+0x172>
    if(shot1->pad_bottom != shot2->pad_bottom) return STYLE_COMPARE_DIFF;
   26f04:	f9bd 2090 	ldrsh.w	r2, [sp, #144]	; 0x90
   26f08:	f9bd 3148 	ldrsh.w	r3, [sp, #328]	; 0x148
   26f0c:	429a      	cmp	r2, r3
   26f0e:	f040 8081 	bne.w	27014 <lv_obj_set_state+0x172>
    if(shot1->pad_left != shot2->pad_right) return STYLE_COMPARE_DIFF;
   26f12:	f9bd 214a 	ldrsh.w	r2, [sp, #330]	; 0x14a
   26f16:	f9bd 3094 	ldrsh.w	r3, [sp, #148]	; 0x94
   26f1a:	4293      	cmp	r3, r2
   26f1c:	d17a      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->pad_right != shot2->pad_right) return STYLE_COMPARE_DIFF;
   26f1e:	f9bd 2092 	ldrsh.w	r2, [sp, #146]	; 0x92
   26f22:	429a      	cmp	r2, r3
   26f24:	d176      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->pad_top != shot2->pad_top) return STYLE_COMPARE_DIFF;
    if(shot1->pad_inner != shot2->pad_inner) return STYLE_COMPARE_DIFF;
   26f26:	f9bd 2096 	ldrsh.w	r2, [sp, #150]	; 0x96
   26f2a:	f9bd 314e 	ldrsh.w	r3, [sp, #334]	; 0x14e
   26f2e:	429a      	cmp	r2, r3
   26f30:	d170      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
   26f32:	f9bd 2098 	ldrsh.w	r2, [sp, #152]	; 0x98
   26f36:	f9bd 3150 	ldrsh.w	r3, [sp, #336]	; 0x150
   26f3a:	429a      	cmp	r2, r3
   26f3c:	d16a      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->margin_bottom != shot2->margin_bottom) return STYLE_COMPARE_DIFF;
   26f3e:	f9bd 209a 	ldrsh.w	r2, [sp, #154]	; 0x9a
   26f42:	f9bd 3152 	ldrsh.w	r3, [sp, #338]	; 0x152
   26f46:	429a      	cmp	r2, r3
   26f48:	d164      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->margin_left != shot2->margin_right) return STYLE_COMPARE_DIFF;
   26f4a:	f9bd 3156 	ldrsh.w	r3, [sp, #342]	; 0x156
   26f4e:	f9bd 209c 	ldrsh.w	r2, [sp, #156]	; 0x9c
   26f52:	429a      	cmp	r2, r3
   26f54:	d15e      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->margin_right != shot2->margin_right) return STYLE_COMPARE_DIFF;
   26f56:	f9bd 209e 	ldrsh.w	r2, [sp, #158]	; 0x9e
   26f5a:	429a      	cmp	r2, r3
   26f5c:	d15a      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->margin_top != shot2->margin_top) return STYLE_COMPARE_DIFF;
    if(shot1->transform_width != shot2->transform_width) return STYLE_COMPARE_DIFF;
   26f5e:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
   26f62:	f9bd 315a 	ldrsh.w	r3, [sp, #346]	; 0x15a
   26f66:	429a      	cmp	r2, r3
   26f68:	d154      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->transform_height != shot2->transform_height) return STYLE_COMPARE_DIFF;
   26f6a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
   26f6e:	f9bd 315c 	ldrsh.w	r3, [sp, #348]	; 0x15c
   26f72:	429a      	cmp	r2, r3
   26f74:	d14e      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->transform_angle != shot2->transform_angle) return STYLE_COMPARE_DIFF;
   26f76:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
   26f7a:	f9bd 315e 	ldrsh.w	r3, [sp, #350]	; 0x15e
   26f7e:	429a      	cmp	r2, r3
   26f80:	d148      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->transform_zoom != shot2->transform_zoom) return STYLE_COMPARE_DIFF;
   26f82:	f9bd 20a8 	ldrsh.w	r2, [sp, #168]	; 0xa8
   26f86:	f9bd 3160 	ldrsh.w	r3, [sp, #352]	; 0x160
   26f8a:	429a      	cmp	r2, r3
   26f8c:	d142      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.outline_width != shot2->rect.outline_width) return STYLE_COMPARE_DIFF;
   26f8e:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
   26f92:	f9bd 30d2 	ldrsh.w	r3, [sp, #210]	; 0xd2
   26f96:	429a      	cmp	r2, r3
   26f98:	d13c      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.outline_pad != shot2->rect.outline_pad) return STYLE_COMPARE_DIFF;
   26f9a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
   26f9e:	f9bd 30d4 	ldrsh.w	r3, [sp, #212]	; 0xd4
   26fa2:	429a      	cmp	r2, r3
   26fa4:	d136      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
   26fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   26fa8:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   26faa:	429a      	cmp	r2, r3
   26fac:	d132      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.value_align != shot2->rect.value_align) return STYLE_COMPARE_DIFF;
   26fae:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
   26fb2:	f89d 3108 	ldrb.w	r3, [sp, #264]	; 0x108
   26fb6:	429a      	cmp	r2, r3
   26fb8:	d12c      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.value_font != shot2->rect.value_font) return STYLE_COMPARE_DIFF;
    if(shot1->rect.shadow_spread != shot2->rect.shadow_spread) return STYLE_COMPARE_DIFF;
   26fba:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   26fbe:	f9bd 30e0 	ldrsh.w	r3, [sp, #224]	; 0xe0
   26fc2:	429a      	cmp	r2, r3
   26fc4:	d126      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_width != shot2->rect.shadow_width) return STYLE_COMPARE_DIFF;
   26fc6:	f9bd 2022 	ldrsh.w	r2, [sp, #34]	; 0x22
   26fca:	f9bd 30da 	ldrsh.w	r3, [sp, #218]	; 0xda
   26fce:	429a      	cmp	r2, r3
   26fd0:	d120      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_x != shot2->rect.shadow_ofs_x) return STYLE_COMPARE_DIFF;
   26fd2:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
   26fd6:	f9bd 30dc 	ldrsh.w	r3, [sp, #220]	; 0xdc
   26fda:	429a      	cmp	r2, r3
   26fdc:	d11a      	bne.n	27014 <lv_obj_set_state+0x172>
    if(shot1->rect.shadow_ofs_y != shot2->rect.shadow_ofs_y) return STYLE_COMPARE_DIFF;
   26fde:	f9bd 2026 	ldrsh.w	r2, [sp, #38]	; 0x26
   26fe2:	f9bd 30de 	ldrsh.w	r3, [sp, #222]	; 0xde
   26fe6:	429a      	cmp	r2, r3
   26fe8:	d114      	bne.n	27014 <lv_obj_set_state+0x172>
            cmp_res = STYLE_COMPARE_VISUAL_DIFF;
   26fea:	2401      	movs	r4, #1
    for(part = 0; part < _LV_OBJ_PART_REAL_FIRST; part++) {
   26fec:	3601      	adds	r6, #1
   26fee:	2e40      	cmp	r6, #64	; 0x40
   26ff0:	f47f af63 	bne.w	26eba <lv_obj_set_state+0x18>
   26ff4:	4637      	mov	r7, r6
    obj->state = new_state;
   26ff6:	f885 8035 	strb.w	r8, [r5, #53]	; 0x35
    if(cmp_res == STYLE_COMPARE_SAME) {
   26ffa:	b144      	cbz	r4, 2700e <lv_obj_set_state+0x16c>
    if(cmp_res == STYLE_COMPARE_DIFF) lv_obj_refresh_style(obj, part, LV_STYLE_PROP_ALL);
   26ffc:	2c02      	cmp	r4, #2
   26ffe:	f04f 02ff 	mov.w	r2, #255	; 0xff
   27002:	bf0c      	ite	eq
   27004:	4639      	moveq	r1, r7
    else if(cmp_res == STYLE_COMPARE_VISUAL_DIFF) lv_obj_refresh_style(obj, LV_OBJ_PART_ALL, LV_STYLE_PROP_ALL);
   27006:	4611      	movne	r1, r2
   27008:	4628      	mov	r0, r5
   2700a:	f7f3 fd97 	bl	1ab3c <lv_obj_refresh_style>
}
   2700e:	b05d      	add	sp, #372	; 0x174
   27010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            cmp_res = STYLE_COMPARE_DIFF;
   27014:	2402      	movs	r4, #2
   27016:	e7ee      	b.n	26ff6 <lv_obj_set_state+0x154>

00027018 <lv_obj_add_state>:
    lv_state_t new_state = obj->state | state;
   27018:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
   2701c:	460b      	mov	r3, r1
    if(obj->state != new_state) {
   2701e:	4393      	bics	r3, r2
    lv_state_t new_state = obj->state | state;
   27020:	ea42 0101 	orr.w	r1, r2, r1
    if(obj->state != new_state) {
   27024:	d001      	beq.n	2702a <lv_obj_add_state+0x12>
        lv_obj_set_state(obj, new_state);
   27026:	f7ff bf3c 	b.w	26ea2 <lv_obj_set_state>
}
   2702a:	4770      	bx	lr

0002702c <lv_obj_clear_state>:
    lv_state_t new_state = obj->state & (~state);
   2702c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
   27030:	460a      	mov	r2, r1
    if(obj->state != new_state) {
   27032:	421a      	tst	r2, r3
    lv_state_t new_state = obj->state & (~state);
   27034:	ea23 0101 	bic.w	r1, r3, r1
    if(obj->state != new_state) {
   27038:	d001      	beq.n	2703e <lv_obj_clear_state+0x12>
        lv_obj_set_state(obj, new_state);
   2703a:	f7ff bf32 	b.w	26ea2 <lv_obj_set_state>
}
   2703e:	4770      	bx	lr

00027040 <lv_obj_get_draw_rect_ext_pad_size>:
{
   27040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_WIDTH, shadow_width, lv_style_int_t, _int, scalar)
   27044:	2250      	movs	r2, #80	; 0x50
   27046:	b088      	sub	sp, #32
   27048:	4605      	mov	r5, r0
   2704a:	460e      	mov	r6, r1
   2704c:	f7f3 fb20 	bl	1a690 <_lv_obj_get_style_int>
    if(sh_width) {
   27050:	4604      	mov	r4, r0
   27052:	2800      	cmp	r0, #0
   27054:	f040 80bb 	bne.w	271ce <lv_obj_get_draw_rect_ext_pad_size+0x18e>
    lv_coord_t s = 0;
   27058:	2400      	movs	r4, #0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_STR, value_str, const char *, _ptr, scalar)
   2705a:	227f      	movs	r2, #127	; 0x7f
   2705c:	4631      	mov	r1, r6
   2705e:	4628      	mov	r0, r5
   27060:	f7ff fb12 	bl	26688 <_lv_obj_get_style_ptr>
    if(value_str) {
   27064:	4607      	mov	r7, r0
   27066:	2800      	cmp	r0, #0
   27068:	f000 8082 	beq.w	27170 <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OPA, value_opa, lv_opa_t, _opa, scalar)
   2706c:	227c      	movs	r2, #124	; 0x7c
   2706e:	4631      	mov	r1, r6
   27070:	4628      	mov	r0, r5
   27072:	f7ff faa4 	bl	265be <_lv_obj_get_style_opa>
        if(value_opa > LV_OPA_MIN) {
   27076:	2802      	cmp	r0, #2
   27078:	d97a      	bls.n	27170 <lv_obj_get_draw_rect_ext_pad_size+0x130>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   2707a:	2270      	movs	r2, #112	; 0x70
   2707c:	4631      	mov	r1, r6
   2707e:	4628      	mov	r0, r5
   27080:	f7f3 fb06 	bl	1a690 <_lv_obj_get_style_int>
   27084:	2270      	movs	r2, #112	; 0x70
   27086:	4680      	mov	r8, r0
   27088:	4631      	mov	r1, r6
   2708a:	4628      	mov	r0, r5
   2708c:	f7f3 fb00 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   27090:	227e      	movs	r2, #126	; 0x7e
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_LETTER_SPACE, value_letter_space, lv_style_int_t, _int, scalar)
   27092:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_FONT, value_font, const lv_font_t *, _ptr, scalar)
   27094:	4631      	mov	r1, r6
   27096:	4628      	mov	r0, r5
   27098:	f7ff faf6 	bl	26688 <_lv_obj_get_style_ptr>
            _lv_txt_get_size(&txt_size, value_str, font, letter_space, line_space, LV_COORD_MAX, LV_TXT_FLAG_NONE);
   2709c:	f04f 0a00 	mov.w	sl, #0
   270a0:	f647 4318 	movw	r3, #31768	; 0x7c18
   270a4:	4602      	mov	r2, r0
   270a6:	4639      	mov	r1, r7
   270a8:	e9cd 3a01 	strd	r3, sl, [sp, #4]
   270ac:	f8cd 9000 	str.w	r9, [sp]
   270b0:	4643      	mov	r3, r8
   270b2:	a804      	add	r0, sp, #16
   270b4:	f7f6 feb2 	bl	1de1c <_lv_txt_get_size>
            value_area.x2 = txt_size.x - 1;
   270b8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
            value_area.x1 = 0;
   270bc:	f8cd a018 	str.w	sl, [sp, #24]
            value_area.x2 = txt_size.x - 1;
   270c0:	3b01      	subs	r3, #1
   270c2:	f8ad 301c 	strh.w	r3, [sp, #28]
            value_area.y2 = txt_size.y - 1;
   270c6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   270ca:	2275      	movs	r2, #117	; 0x75
   270cc:	3b01      	subs	r3, #1
   270ce:	4631      	mov	r1, r6
   270d0:	4628      	mov	r0, r5
   270d2:	f8ad 301e 	strh.w	r3, [sp, #30]
   270d6:	f7f3 fadb 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   270da:	2273      	movs	r2, #115	; 0x73
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_ALIGN, value_align, lv_align_t, _int, scalar)
   270dc:	4681      	mov	r9, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   270de:	4631      	mov	r1, r6
   270e0:	4628      	mov	r0, r5
   270e2:	f7f3 fad5 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   270e6:	2274      	movs	r2, #116	; 0x74
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_X, value_ofs_x, lv_style_int_t, _int, scalar)
   270e8:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(VALUE_OFS_Y, value_ofs_y, lv_style_int_t, _int, scalar)
   270ea:	4631      	mov	r1, r6
   270ec:	4628      	mov	r0, r5
   270ee:	f7f3 facf 	bl	1a690 <_lv_obj_get_style_int>
            _lv_area_align(&obj->coords, &value_area, align, &p_align);
   270f2:	ab05      	add	r3, sp, #20
   270f4:	4607      	mov	r7, r0
   270f6:	fa5f f289 	uxtb.w	r2, r9
   270fa:	a906      	add	r1, sp, #24
   270fc:	f105 0010 	add.w	r0, r5, #16
   27100:	f003 f8da 	bl	2a2b8 <_lv_area_align>
            value_area.x1 += p_align.x + xofs;
   27104:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27108:	f8bd 1018 	ldrh.w	r1, [sp, #24]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   2710c:	f9b5 2010 	ldrsh.w	r2, [r5, #16]
            value_area.y1 += p_align.y + yofs;
   27110:	f8bd 0016 	ldrh.w	r0, [sp, #22]
            value_area.x1 += p_align.x + xofs;
   27114:	4443      	add	r3, r8
   27116:	fa01 f183 	sxtah	r1, r1, r3
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   2711a:	b209      	sxth	r1, r1
   2711c:	1a52      	subs	r2, r2, r1
            value_area.y1 += p_align.y + yofs;
   2711e:	f8bd 101a 	ldrh.w	r1, [sp, #26]
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   27122:	4294      	cmp	r4, r2
            value_area.y1 += p_align.y + yofs;
   27124:	4438      	add	r0, r7
            s = LV_MATH_MAX(s, obj->coords.x1 - value_area.x1);
   27126:	bfb8      	it	lt
   27128:	4614      	movlt	r4, r2
            value_area.y1 += p_align.y + yofs;
   2712a:	fa01 f180 	sxtah	r1, r1, r0
            s = LV_MATH_MAX(s, obj->coords.y1 - value_area.y1);
   2712e:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   27132:	b209      	sxth	r1, r1
   27134:	1a52      	subs	r2, r2, r1
   27136:	b224      	sxth	r4, r4
   27138:	42a2      	cmp	r2, r4
   2713a:	bfb8      	it	lt
   2713c:	4622      	movlt	r2, r4
            value_area.x2 += p_align.x + xofs;
   2713e:	f8bd 401c 	ldrh.w	r4, [sp, #28]
   27142:	fa04 f383 	sxtah	r3, r4, r3
            s = LV_MATH_MAX(s, value_area.x2 - obj->coords.x2);
   27146:	f9b5 4014 	ldrsh.w	r4, [r5, #20]
   2714a:	b21b      	sxth	r3, r3
   2714c:	1b1c      	subs	r4, r3, r4
   2714e:	b213      	sxth	r3, r2
   27150:	42a3      	cmp	r3, r4
   27152:	bfb8      	it	lt
   27154:	4623      	movlt	r3, r4
            value_area.y2 += p_align.y + yofs;
   27156:	f8bd 401e 	ldrh.w	r4, [sp, #30]
   2715a:	fa04 f080 	sxtah	r0, r4, r0
            s = LV_MATH_MAX(s, value_area.y2 - obj->coords.y2);
   2715e:	b204      	sxth	r4, r0
   27160:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
   27164:	1a20      	subs	r0, r4, r0
   27166:	b21c      	sxth	r4, r3
   27168:	4284      	cmp	r4, r0
   2716a:	bfb8      	it	lt
   2716c:	4604      	movlt	r4, r0
   2716e:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_WIDTH, outline_width, lv_style_int_t, _int, scalar)
   27170:	2240      	movs	r2, #64	; 0x40
   27172:	4631      	mov	r1, r6
   27174:	4628      	mov	r0, r5
   27176:	f7f3 fa8b 	bl	1a690 <_lv_obj_get_style_int>
    if(outline_width) {
   2717a:	4607      	mov	r7, r0
   2717c:	b180      	cbz	r0, 271a0 <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_OPA, outline_opa, lv_opa_t, _opa, scalar)
   2717e:	224c      	movs	r2, #76	; 0x4c
   27180:	4631      	mov	r1, r6
   27182:	4628      	mov	r0, r5
   27184:	f7ff fa1b 	bl	265be <_lv_obj_get_style_opa>
        if(outline_opa > LV_OPA_MIN) {
   27188:	2802      	cmp	r0, #2
   2718a:	d909      	bls.n	271a0 <lv_obj_get_draw_rect_ext_pad_size+0x160>
_LV_OBJ_STYLE_SET_GET_DECLARE(OUTLINE_PAD, outline_pad, lv_style_int_t, _int, scalar)
   2718c:	2241      	movs	r2, #65	; 0x41
   2718e:	4631      	mov	r1, r6
   27190:	4628      	mov	r0, r5
   27192:	f7f3 fa7d 	bl	1a690 <_lv_obj_get_style_int>
            s = LV_MATH_MAX(s, outline_pad + outline_width);
   27196:	4438      	add	r0, r7
   27198:	4284      	cmp	r4, r0
   2719a:	bfb8      	it	lt
   2719c:	4604      	movlt	r4, r0
   2719e:	b224      	sxth	r4, r4
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   271a0:	4631      	mov	r1, r6
   271a2:	2204      	movs	r2, #4
   271a4:	4628      	mov	r0, r5
   271a6:	f7f3 fa73 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   271aa:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   271ac:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   271ae:	4631      	mov	r1, r6
   271b0:	4628      	mov	r0, r5
   271b2:	f7f3 fa6d 	bl	1a690 <_lv_obj_get_style_int>
    lv_coord_t wh = LV_MATH_MAX(w, h);
   271b6:	42b8      	cmp	r0, r7
   271b8:	bfb8      	it	lt
   271ba:	4638      	movlt	r0, r7
   271bc:	b200      	sxth	r0, r0
    if(wh > 0) s += wh;
   271be:	2800      	cmp	r0, #0
   271c0:	bfc4      	itt	gt
   271c2:	1824      	addgt	r4, r4, r0
   271c4:	b224      	sxthgt	r4, r4
}
   271c6:	4620      	mov	r0, r4
   271c8:	b008      	add	sp, #32
   271ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OPA, shadow_opa, lv_opa_t, _opa, scalar)
   271ce:	225c      	movs	r2, #92	; 0x5c
   271d0:	4631      	mov	r1, r6
   271d2:	4628      	mov	r0, r5
   271d4:	f7ff f9f3 	bl	265be <_lv_obj_get_style_opa>
        if(sh_opa > LV_OPA_MIN) {
   271d8:	2802      	cmp	r0, #2
   271da:	f67f af3d 	bls.w	27058 <lv_obj_get_draw_rect_ext_pad_size+0x18>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_SPREAD, shadow_spread, lv_style_int_t, _int, scalar)
   271de:	2253      	movs	r2, #83	; 0x53
   271e0:	4631      	mov	r1, r6
            sh_width = sh_width / 2;    /*THe blur adds only half width*/
   271e2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
   271e6:	4628      	mov	r0, r5
   271e8:	f7f3 fa52 	bl	1a690 <_lv_obj_get_style_int>
   271ec:	f344 044f 	sbfx	r4, r4, #1, #16
            sh_width++;
   271f0:	3401      	adds	r4, #1
   271f2:	b224      	sxth	r4, r4
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   271f4:	4404      	add	r4, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   271f6:	2251      	movs	r2, #81	; 0x51
   271f8:	4631      	mov	r1, r6
   271fa:	4628      	mov	r0, r5
   271fc:	f7f3 fa48 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   27200:	2252      	movs	r2, #82	; 0x52
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_X, shadow_ofs_x, lv_style_int_t, _int, scalar)
   27202:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(SHADOW_OFS_Y, shadow_ofs_y, lv_style_int_t, _int, scalar)
   27204:	4631      	mov	r1, r6
   27206:	4628      	mov	r0, r5
   27208:	f7f3 fa42 	bl	1a690 <_lv_obj_get_style_int>
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   2720c:	2800      	cmp	r0, #0
   2720e:	bfb8      	it	lt
   27210:	4240      	neglt	r0, r0
   27212:	2f00      	cmp	r7, #0
   27214:	bfb8      	it	lt
   27216:	427f      	neglt	r7, r7
            sh_width += lv_obj_get_style_shadow_spread(obj, part);
   27218:	b224      	sxth	r4, r4
            sh_width += LV_MATH_MAX(LV_MATH_ABS(sh_ofs_x), LV_MATH_ABS(sh_ofs_y));
   2721a:	b280      	uxth	r0, r0
   2721c:	b2bf      	uxth	r7, r7
   2721e:	42b8      	cmp	r0, r7
   27220:	bf2c      	ite	cs
   27222:	1824      	addcs	r4, r4, r0
   27224:	19e4      	addcc	r4, r4, r7
            s = LV_MATH_MAX(s, sh_width);
   27226:	b224      	sxth	r4, r4
   27228:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   2722c:	e715      	b.n	2705a <lv_obj_get_draw_rect_ext_pad_size+0x1a>

0002722e <lv_obj_get_focused_obj>:
    if(obj == NULL) return NULL;
   2722e:	b908      	cbnz	r0, 27234 <lv_obj_get_focused_obj+0x6>
   27230:	4770      	bx	lr
    return obj->parent;
   27232:	6800      	ldr	r0, [r0, #0]
    return obj->focus_parent == 0 ? false : true;
   27234:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    while(lv_obj_get_focus_parent(focus_obj) != false && focus_obj != NULL) {
   27238:	079b      	lsls	r3, r3, #30
   2723a:	d4fa      	bmi.n	27232 <lv_obj_get_focused_obj+0x4>
}
   2723c:	4770      	bx	lr

0002723e <_lv_memcpy>:
   2723e:	f004 ba8c 	b.w	2b75a <memcpy>

00027242 <lv_refr_get_top_obj>:
{
   27242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   27246:	2200      	movs	r2, #0
{
   27248:	460c      	mov	r4, r1
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   2724a:	3110      	adds	r1, #16
{
   2724c:	4607      	mov	r7, r0
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   2724e:	f002 ffe3 	bl	2a218 <_lv_area_is_in>
   27252:	b910      	cbnz	r0, 2725a <lv_refr_get_top_obj+0x18>
    lv_obj_t * found_p = NULL;
   27254:	2000      	movs	r0, #0
}
   27256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(_lv_area_is_in(area_p, &obj->coords, 0) && obj->hidden == 0) {
   2725a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   2725e:	06db      	lsls	r3, r3, #27
   27260:	d4f8      	bmi.n	27254 <lv_refr_get_top_obj+0x12>
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   27262:	6a23      	ldr	r3, [r4, #32]
   27264:	2202      	movs	r2, #2
   27266:	4639      	mov	r1, r7
   27268:	4620      	mov	r0, r4
   2726a:	4798      	blx	r3
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   2726c:	2803      	cmp	r0, #3
        lv_design_res_t design_res = obj->design_cb(obj, area_p, LV_DESIGN_COVER_CHK);
   2726e:	4606      	mov	r6, r0
        if(design_res == LV_DESIGN_RES_MASKED) return NULL;
   27270:	d0f0      	beq.n	27254 <lv_refr_get_top_obj+0x12>
        _LV_LL_READ(obj->child_ll, i) {
   27272:	f104 0804 	add.w	r8, r4, #4
   27276:	4640      	mov	r0, r8
   27278:	f003 f975 	bl	2a566 <_lv_ll_get_head>
   2727c:	4605      	mov	r5, r0
   2727e:	b918      	cbnz	r0, 27288 <lv_refr_get_top_obj+0x46>
            if(design_res == LV_DESIGN_RES_COVER) {
   27280:	2e01      	cmp	r6, #1
   27282:	d1e7      	bne.n	27254 <lv_refr_get_top_obj+0x12>
   27284:	4620      	mov	r0, r4
   27286:	e7e6      	b.n	27256 <lv_refr_get_top_obj+0x14>
            found_p = lv_refr_get_top_obj(area_p, i);
   27288:	4629      	mov	r1, r5
   2728a:	4638      	mov	r0, r7
   2728c:	f7ff ffd9 	bl	27242 <lv_refr_get_top_obj>
            if(found_p != NULL) {
   27290:	2800      	cmp	r0, #0
   27292:	d1e0      	bne.n	27256 <lv_refr_get_top_obj+0x14>
        _LV_LL_READ(obj->child_ll, i) {
   27294:	4629      	mov	r1, r5
   27296:	4640      	mov	r0, r8
   27298:	f003 f96b 	bl	2a572 <_lv_ll_get_next>
   2729c:	e7ee      	b.n	2727c <lv_refr_get_top_obj+0x3a>

0002729e <lv_refr_obj>:
{
   2729e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(obj->hidden != 0) return;
   272a0:	f890 7032 	ldrb.w	r7, [r0, #50]	; 0x32
   272a4:	f017 0710 	ands.w	r7, r7, #16
{
   272a8:	b08b      	sub	sp, #44	; 0x2c
   272aa:	4604      	mov	r4, r0
   272ac:	460e      	mov	r6, r1
    if(obj->hidden != 0) return;
   272ae:	d13a      	bne.n	27326 <lv_refr_obj+0x88>
    lv_obj_get_coords(obj, &obj_area);
   272b0:	a904      	add	r1, sp, #16
    lv_coord_t ext_size = obj->ext_draw_pad;
   272b2:	f9b0 5030 	ldrsh.w	r5, [r0, #48]	; 0x30
    lv_obj_get_coords(obj, &obj_area);
   272b6:	f7ff f91f 	bl	264f8 <lv_obj_get_coords>
    obj_area.x1 -= ext_size;
   272ba:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   272be:	1b5b      	subs	r3, r3, r5
   272c0:	f8ad 3010 	strh.w	r3, [sp, #16]
    obj_area.y1 -= ext_size;
   272c4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   272c8:	1b5b      	subs	r3, r3, r5
   272ca:	f8ad 3012 	strh.w	r3, [sp, #18]
    obj_area.x2 += ext_size;
   272ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   272d2:	442b      	add	r3, r5
   272d4:	f8ad 3014 	strh.w	r3, [sp, #20]
    obj_area.y2 += ext_size;
   272d8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   272dc:	aa04      	add	r2, sp, #16
    obj_area.y2 += ext_size;
   272de:	441d      	add	r5, r3
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   272e0:	4631      	mov	r1, r6
   272e2:	a802      	add	r0, sp, #8
    obj_area.y2 += ext_size;
   272e4:	f8ad 5016 	strh.w	r5, [sp, #22]
    union_ok = _lv_area_intersect(&obj_ext_mask, mask_ori_p, &obj_area);
   272e8:	f002 fea3 	bl	2a032 <_lv_area_intersect>
    if(union_ok != false) {
   272ec:	b1d8      	cbz	r0, 27326 <lv_refr_obj+0x88>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_MAIN);
   272ee:	6a23      	ldr	r3, [r4, #32]
   272f0:	b11b      	cbz	r3, 272fa <lv_refr_obj+0x5c>
   272f2:	463a      	mov	r2, r7
   272f4:	a902      	add	r1, sp, #8
   272f6:	4620      	mov	r0, r4
   272f8:	4798      	blx	r3
        lv_obj_get_coords(obj, &obj_area);
   272fa:	a904      	add	r1, sp, #16
   272fc:	4620      	mov	r0, r4
   272fe:	f7ff f8fb 	bl	264f8 <lv_obj_get_coords>
        union_ok = _lv_area_intersect(&obj_mask, mask_ori_p, &obj_area);
   27302:	aa04      	add	r2, sp, #16
   27304:	4631      	mov	r1, r6
   27306:	4668      	mov	r0, sp
   27308:	f002 fe93 	bl	2a032 <_lv_area_intersect>
        if(union_ok != false) {
   2730c:	b128      	cbz	r0, 2731a <lv_refr_obj+0x7c>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   2730e:	1d26      	adds	r6, r4, #4
   27310:	4630      	mov	r0, r6
   27312:	f003 f92b 	bl	2a56c <_lv_ll_get_tail>
   27316:	4605      	mov	r5, r0
   27318:	b938      	cbnz	r0, 2732a <lv_refr_obj+0x8c>
        if(obj->design_cb) obj->design_cb(obj, &obj_ext_mask, LV_DESIGN_DRAW_POST);
   2731a:	6a23      	ldr	r3, [r4, #32]
   2731c:	b11b      	cbz	r3, 27326 <lv_refr_obj+0x88>
   2731e:	2201      	movs	r2, #1
   27320:	a902      	add	r1, sp, #8
   27322:	4620      	mov	r0, r4
   27324:	4798      	blx	r3
}
   27326:	b00b      	add	sp, #44	; 0x2c
   27328:	bdf0      	pop	{r4, r5, r6, r7, pc}
                lv_obj_get_coords(child_p, &child_area);
   2732a:	a908      	add	r1, sp, #32
   2732c:	4628      	mov	r0, r5
   2732e:	f7ff f8e3 	bl	264f8 <lv_obj_get_coords>
                ext_size = child_p->ext_draw_pad;
   27332:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
                child_area.x1 -= ext_size;
   27336:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2733a:	1ad2      	subs	r2, r2, r3
   2733c:	f8ad 2020 	strh.w	r2, [sp, #32]
                child_area.y1 -= ext_size;
   27340:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   27344:	1ad2      	subs	r2, r2, r3
   27346:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
                child_area.x2 += ext_size;
   2734a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2734e:	441a      	add	r2, r3
   27350:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
                child_area.y2 += ext_size;
   27354:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   27358:	4669      	mov	r1, sp
                child_area.y2 += ext_size;
   2735a:	4413      	add	r3, r2
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   2735c:	a806      	add	r0, sp, #24
   2735e:	aa08      	add	r2, sp, #32
                child_area.y2 += ext_size;
   27360:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
                union_ok = _lv_area_intersect(&mask_child, &obj_mask, &child_area);
   27364:	f002 fe65 	bl	2a032 <_lv_area_intersect>
                if(union_ok) {
   27368:	b118      	cbz	r0, 27372 <lv_refr_obj+0xd4>
                    lv_refr_obj(child_p, &mask_child);
   2736a:	a906      	add	r1, sp, #24
   2736c:	4628      	mov	r0, r5
   2736e:	f7ff ff96 	bl	2729e <lv_refr_obj>
            _LV_LL_READ_BACK(obj->child_ll, child_p) {
   27372:	4629      	mov	r1, r5
   27374:	4630      	mov	r0, r6
   27376:	f003 f901 	bl	2a57c <_lv_ll_get_prev>
   2737a:	e7cc      	b.n	27316 <lv_refr_obj+0x78>

0002737c <_lv_memset_00>:
   2737c:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   2737e:	2100      	movs	r1, #0
   27380:	f004 ba0c 	b.w	2b79c <memset>

00027384 <_lv_refr_init>:
}
   27384:	4770      	bx	lr

00027386 <_lv_inv_area>:
{
   27386:	b5f0      	push	{r4, r5, r6, r7, lr}
   27388:	460d      	mov	r5, r1
   2738a:	b085      	sub	sp, #20
    if(!disp) disp = lv_disp_get_default();
   2738c:	4604      	mov	r4, r0
   2738e:	b918      	cbnz	r0, 27398 <_lv_inv_area+0x12>
   27390:	f7f5 ffe0 	bl	1d354 <lv_disp_get_default>
    if(!disp) return;
   27394:	4604      	mov	r4, r0
   27396:	b130      	cbz	r0, 273a6 <_lv_inv_area+0x20>
    if(area_p == NULL) {
   27398:	b93d      	cbnz	r5, 273aa <_lv_inv_area+0x24>
        disp->inv_p = 0;
   2739a:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   2739e:	f365 0309 	bfi	r3, r5, #0, #10
   273a2:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
}
   273a6:	b005      	add	sp, #20
   273a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    scr_area.x1 = 0;
   273aa:	2300      	movs	r3, #0
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   273ac:	4620      	mov	r0, r4
    scr_area.x1 = 0;
   273ae:	9300      	str	r3, [sp, #0]
    scr_area.x2 = lv_disp_get_hor_res(disp) - 1;
   273b0:	f7f5 ffd6 	bl	1d360 <lv_disp_get_hor_res>
   273b4:	3801      	subs	r0, #1
   273b6:	f8ad 0004 	strh.w	r0, [sp, #4]
    scr_area.y2 = lv_disp_get_ver_res(disp) - 1;
   273ba:	4620      	mov	r0, r4
   273bc:	f7f5 ffe0 	bl	1d380 <lv_disp_get_ver_res>
   273c0:	3801      	subs	r0, #1
   273c2:	f8ad 0006 	strh.w	r0, [sp, #6]
    suc = _lv_area_intersect(&com_area, area_p, &scr_area);
   273c6:	466a      	mov	r2, sp
   273c8:	4629      	mov	r1, r5
   273ca:	a802      	add	r0, sp, #8
   273cc:	f002 fe31 	bl	2a032 <_lv_area_intersect>
    if(suc != false) {
   273d0:	2800      	cmp	r0, #0
   273d2:	d0e8      	beq.n	273a6 <_lv_inv_area+0x20>
        if(disp->driver.rounder_cb) disp->driver.rounder_cb(&disp->driver, &com_area);
   273d4:	6923      	ldr	r3, [r4, #16]
   273d6:	b113      	cbz	r3, 273de <_lv_inv_area+0x58>
   273d8:	a902      	add	r1, sp, #8
   273da:	4620      	mov	r0, r4
   273dc:	4798      	blx	r3
   273de:	f104 055a 	add.w	r5, r4, #90	; 0x5a
{
   273e2:	2600      	movs	r6, #0
   273e4:	462f      	mov	r7, r5
        for(i = 0; i < disp->inv_p; i++) {
   273e6:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   273ea:	b2b2      	uxth	r2, r6
   273ec:	f3c3 0009 	ubfx	r0, r3, #0, #10
   273f0:	4290      	cmp	r0, r2
   273f2:	d815      	bhi.n	27420 <_lv_inv_area+0x9a>
        if(disp->inv_p < LV_INV_BUF_SIZE) {
   273f4:	281f      	cmp	r0, #31
   273f6:	d81d      	bhi.n	27434 <_lv_inv_area+0xae>
            lv_area_copy(&disp->inv_areas[disp->inv_p], &com_area);
   273f8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   273fc:	2208      	movs	r2, #8
   273fe:	eb0d 0102 	add.w	r1, sp, r2
   27402:	305a      	adds	r0, #90	; 0x5a
   27404:	f7ff ff1b 	bl	2723e <_lv_memcpy>
        disp->inv_p++;
   27408:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   2740c:	6b20      	ldr	r0, [r4, #48]	; 0x30
        disp->inv_p++;
   2740e:	1c5a      	adds	r2, r3, #1
   27410:	f362 0309 	bfi	r3, r2, #0, #10
   27414:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        lv_task_set_prio(disp->refr_task, LV_REFR_TASK_PRIO);
   27418:	2103      	movs	r1, #3
   2741a:	f7f6 fb37 	bl	1da8c <lv_task_set_prio>
   2741e:	e7c2      	b.n	273a6 <_lv_inv_area+0x20>
            if(_lv_area_is_in(&com_area, &disp->inv_areas[i], 0) != false) return;
   27420:	4629      	mov	r1, r5
   27422:	2200      	movs	r2, #0
   27424:	a802      	add	r0, sp, #8
   27426:	f002 fef7 	bl	2a218 <_lv_area_is_in>
   2742a:	3601      	adds	r6, #1
   2742c:	3508      	adds	r5, #8
   2742e:	2800      	cmp	r0, #0
   27430:	d0d9      	beq.n	273e6 <_lv_inv_area+0x60>
   27432:	e7b8      	b.n	273a6 <_lv_inv_area+0x20>
            disp->inv_p = 0;
   27434:	f36f 0309 	bfc	r3, #0, #10
   27438:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
   2743c:	2208      	movs	r2, #8
   2743e:	4669      	mov	r1, sp
   27440:	4638      	mov	r0, r7
   27442:	e7df      	b.n	27404 <_lv_inv_area+0x7e>

00027444 <lv_style_list_get_style>:
 */
void _lv_style_list_reset(lv_style_list_t * style_list);

static inline lv_style_t * lv_style_list_get_style(lv_style_list_t * list, uint8_t id)
{
    if(list->has_trans && list->skip_trans) id++;
   27444:	8882      	ldrh	r2, [r0, #4]
   27446:	f402 72c0 	and.w	r2, r2, #384	; 0x180
   2744a:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   2744e:	7902      	ldrb	r2, [r0, #4]
    if(list->has_trans && list->skip_trans) id++;
   27450:	bf08      	it	eq
   27452:	3101      	addeq	r1, #1
{
   27454:	4603      	mov	r3, r0
    if(list->has_trans && list->skip_trans) id++;
   27456:	bf08      	it	eq
   27458:	b2c9      	uxtbeq	r1, r1
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   2745a:	f012 003f 	ands.w	r0, r2, #63	; 0x3f
   2745e:	d006      	beq.n	2746e <lv_style_list_get_style+0x2a>
   27460:	4288      	cmp	r0, r1
   27462:	d903      	bls.n	2746c <lv_style_list_get_style+0x28>
    return list->style_list[id];
   27464:	681b      	ldr	r3, [r3, #0]
   27466:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
   2746a:	4770      	bx	lr
    if(list->style_cnt == 0 || id >= list->style_cnt) return NULL;
   2746c:	2000      	movs	r0, #0
}
   2746e:	4770      	bx	lr

00027470 <get_prop_size>:
 * @param idx index of the style in style->map
 * @return attribute of property in style->map + idx
 */
static inline size_t get_prop_size(uint8_t prop_id)
{
    prop_id &= 0xF;
   27470:	f000 000f 	and.w	r0, r0, #15
    size_t size = sizeof(lv_style_property_t);
    if(prop_id < LV_STYLE_ID_COLOR) size += sizeof(lv_style_int_t);
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
   27474:	280b      	cmp	r0, #11
   27476:	d904      	bls.n	27482 <get_prop_size+0x12>
    else if(prop_id < LV_STYLE_ID_PTR) size += sizeof(lv_opa_t);
    else size += sizeof(const void *);
   27478:	280e      	cmp	r0, #14
   2747a:	bf34      	ite	cc
   2747c:	2003      	movcc	r0, #3
   2747e:	2006      	movcs	r0, #6
   27480:	4770      	bx	lr
    else if(prop_id < LV_STYLE_ID_OPA) size += sizeof(lv_color_t);
   27482:	2004      	movs	r0, #4
    return size;
}
   27484:	4770      	bx	lr

00027486 <get_style_prop.isra.0>:
static inline lv_style_property_t get_style_prop(const lv_style_t * style, size_t idx)
   27486:	b082      	sub	sp, #8
    prop_p[0] = style->map[idx];
   27488:	5c43      	ldrb	r3, [r0, r1]
   2748a:	f88d 3006 	strb.w	r3, [sp, #6]
    prop_p[1] = style->map[idx + 1];
   2748e:	4408      	add	r0, r1
   27490:	7843      	ldrb	r3, [r0, #1]
   27492:	f88d 3007 	strb.w	r3, [sp, #7]
}
   27496:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   2749a:	b002      	add	sp, #8
   2749c:	4770      	bx	lr

0002749e <get_style_prop_attr>:
{
   2749e:	b508      	push	{r3, lr}
    return ((get_style_prop(style, idx) >> 8) & 0xFFU);
   274a0:	6800      	ldr	r0, [r0, #0]
   274a2:	f7ff fff0 	bl	27486 <get_style_prop.isra.0>
}
   274a6:	f3c0 2007 	ubfx	r0, r0, #8, #8
   274aa:	bd08      	pop	{r3, pc}

000274ac <get_property_index>:
{
   274ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(style->map == NULL) return -1;
   274b0:	6803      	ldr	r3, [r0, #0]
{
   274b2:	4605      	mov	r5, r0
   274b4:	460a      	mov	r2, r1
    if(style->map == NULL) return -1;
   274b6:	b37b      	cbz	r3, 27518 <get_property_index+0x6c>
    int16_t id_guess = -1;
   274b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   274bc:	f3c2 2206 	ubfx	r2, r2, #8, #7
    uint8_t id_to_find = prop & 0xFF;
   274c0:	b2cf      	uxtb	r7, r1
    attr = (prop >> 8) & 0xFF;
   274c2:	ea4f 2811 	mov.w	r8, r1, lsr #8
    int16_t weight = -1;
   274c6:	4626      	mov	r6, r4
    size_t i = 0;
   274c8:	2100      	movs	r1, #0
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   274ca:	43d2      	mvns	r2, r2
    return get_style_prop(style, idx) & 0xFF;
   274cc:	6828      	ldr	r0, [r5, #0]
   274ce:	f7ff ffda 	bl	27486 <get_style_prop.isra.0>
   274d2:	fa5f f980 	uxtb.w	r9, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   274d6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   274da:	d101      	bne.n	274e0 <get_property_index+0x34>
    return id_guess;
   274dc:	4620      	mov	r0, r4
   274de:	e00a      	b.n	274f6 <get_property_index+0x4a>
        if(prop_id == id_to_find) {
   274e0:	454f      	cmp	r7, r9
   274e2:	d114      	bne.n	2750e <get_property_index+0x62>
            attr_i = get_style_prop_attr(style, i);
   274e4:	4628      	mov	r0, r5
   274e6:	f7ff ffda 	bl	2749e <get_style_prop_attr>
   274ea:	4603      	mov	r3, r0
            if(LV_STYLE_ATTR_GET_STATE(attr_i) == LV_STYLE_ATTR_GET_STATE(attr)) {
   274ec:	ea88 0000 	eor.w	r0, r8, r0
   274f0:	0640      	lsls	r0, r0, #25
   274f2:	d102      	bne.n	274fa <get_property_index+0x4e>
                return i;
   274f4:	4608      	mov	r0, r1
}
   274f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if((LV_STYLE_ATTR_GET_STATE(attr_i) & (~LV_STYLE_ATTR_GET_STATE(attr))) == 0) {
   274fa:	ea02 0003 	and.w	r0, r2, r3
   274fe:	0640      	lsls	r0, r0, #25
   27500:	d105      	bne.n	2750e <get_property_index+0x62>
                if(LV_STYLE_ATTR_GET_STATE(attr_i) > weight) {
   27502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27506:	42b3      	cmp	r3, r6
                    weight = LV_STYLE_ATTR_GET_STATE(attr_i);
   27508:	bfc4      	itt	gt
   2750a:	b21e      	sxthgt	r6, r3
                    id_guess = i;
   2750c:	b20c      	sxthgt	r4, r1
 * @param idx index of the style in style->map
 * @return index of next property in style->map
 */
static inline size_t get_next_prop_index(uint8_t prop_id, size_t idx)
{
    return idx + get_prop_size(prop_id);
   2750e:	4648      	mov	r0, r9
   27510:	f7ff ffae 	bl	27470 <get_prop_size>
   27514:	4401      	add	r1, r0
   27516:	e7d9      	b.n	274cc <get_property_index+0x20>
    if(style->map == NULL) return -1;
   27518:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2751c:	e7eb      	b.n	274f6 <get_property_index+0x4a>

0002751e <_lv_memset_00>:
   2751e:	460a      	mov	r2, r1
   27520:	2100      	movs	r1, #0
   27522:	f004 b93b 	b.w	2b79c <memset>

00027526 <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27526:	f004 b918 	b.w	2b75a <memcpy>

0002752a <style_resize.isra.0>:
static inline void style_resize(lv_style_t * style, size_t sz)
   2752a:	b510      	push	{r4, lr}
   2752c:	4604      	mov	r4, r0
    style->map = lv_mem_realloc(style->map, sz);
   2752e:	6800      	ldr	r0, [r0, #0]
   27530:	f7f6 f854 	bl	1d5dc <lv_mem_realloc>
   27534:	6020      	str	r0, [r4, #0]
}
   27536:	bd10      	pop	{r4, pc}

00027538 <lv_style_init>:
    _lv_memset_00(style, sizeof(lv_style_t));
   27538:	2104      	movs	r1, #4
   2753a:	f7ff bff0 	b.w	2751e <_lv_memset_00>

0002753e <lv_style_list_init>:
    _lv_memset_00(list, sizeof(lv_style_list_t));
   2753e:	2108      	movs	r1, #8
   27540:	f7ff bfed 	b.w	2751e <_lv_memset_00>

00027544 <lv_style_reset>:
{
   27544:	b510      	push	{r4, lr}
   27546:	4604      	mov	r4, r0
    lv_mem_free(style->map);
   27548:	6800      	ldr	r0, [r0, #0]
   2754a:	f7f6 f829 	bl	1d5a0 <lv_mem_free>
    style->map = NULL;
   2754e:	2300      	movs	r3, #0
   27550:	6023      	str	r3, [r4, #0]
}
   27552:	bd10      	pop	{r4, pc}

00027554 <_lv_style_get_mem_size>:
{
   27554:	4602      	mov	r2, r0
    if(style->map == NULL) return 0;
   27556:	6800      	ldr	r0, [r0, #0]
{
   27558:	b508      	push	{r3, lr}
    if(style->map == NULL) return 0;
   2755a:	b140      	cbz	r0, 2756e <_lv_style_get_mem_size+0x1a>
    size_t i = 0;
   2755c:	2100      	movs	r1, #0
    return get_style_prop(style, idx) & 0xFF;
   2755e:	6810      	ldr	r0, [r2, #0]
   27560:	f7ff ff91 	bl	27486 <get_style_prop.isra.0>
   27564:	b2c0      	uxtb	r0, r0
    while((prop_id = get_style_prop_id(style, i)) != _LV_STYLE_CLOSEING_PROP) {
   27566:	28ff      	cmp	r0, #255	; 0xff
   27568:	d102      	bne.n	27570 <_lv_style_get_mem_size+0x1c>
    return i + sizeof(lv_style_property_t);
   2756a:	3102      	adds	r1, #2
   2756c:	b288      	uxth	r0, r1
}
   2756e:	bd08      	pop	{r3, pc}
    return idx + get_prop_size(prop_id);
   27570:	f7ff ff7e 	bl	27470 <get_prop_size>
   27574:	4401      	add	r1, r0
   27576:	e7f2      	b.n	2755e <_lv_style_get_mem_size+0xa>

00027578 <lv_style_copy>:
{
   27578:	b570      	push	{r4, r5, r6, lr}
   2757a:	4606      	mov	r6, r0
    if(style_src == NULL) return;
   2757c:	460c      	mov	r4, r1
   2757e:	b171      	cbz	r1, 2759e <lv_style_copy+0x26>
    if(style_src->map == NULL) return;
   27580:	680b      	ldr	r3, [r1, #0]
   27582:	b163      	cbz	r3, 2759e <lv_style_copy+0x26>
    uint16_t size = _lv_style_get_mem_size(style_src);
   27584:	4608      	mov	r0, r1
   27586:	f7ff ffe5 	bl	27554 <_lv_style_get_mem_size>
   2758a:	4605      	mov	r5, r0
    style_dest->map = lv_mem_alloc(size);
   2758c:	f7f5 ffe0 	bl	1d550 <lv_mem_alloc>
   27590:	6030      	str	r0, [r6, #0]
    _lv_memcpy(style_dest->map, style_src->map, size);
   27592:	6821      	ldr	r1, [r4, #0]
   27594:	462a      	mov	r2, r5
}
   27596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    _lv_memcpy(style_dest->map, style_src->map, size);
   2759a:	f7ff bfc4 	b.w	27526 <_lv_memcpy>
}
   2759e:	bd70      	pop	{r4, r5, r6, pc}

000275a0 <_lv_style_set_int>:
{
   275a0:	b530      	push	{r4, r5, lr}
   275a2:	b085      	sub	sp, #20
   275a4:	4605      	mov	r5, r0
   275a6:	f8ad 1006 	strh.w	r1, [sp, #6]
   275aa:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   275ae:	f7ff ff7d 	bl	274ac <get_property_index>
    if(id >= 0) {
   275b2:	1e01      	subs	r1, r0, #0
   275b4:	db11      	blt.n	275da <_lv_style_set_int+0x3a>
        attr_found = get_style_prop_attr(style, id);
   275b6:	4628      	mov	r0, r5
   275b8:	f7ff ff71 	bl	2749e <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   275bc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   275c0:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   275c4:	0643      	lsls	r3, r0, #25
   275c6:	d108      	bne.n	275da <_lv_style_set_int+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &value, sizeof(lv_style_int_t));
   275c8:	682b      	ldr	r3, [r5, #0]
   275ca:	1c88      	adds	r0, r1, #2
   275cc:	2202      	movs	r2, #2
   275ce:	a901      	add	r1, sp, #4
   275d0:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   275d2:	f7ff ffa8 	bl	27526 <_lv_memcpy>
}
   275d6:	b005      	add	sp, #20
   275d8:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   275da:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   275dc:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   275de:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   275e2:	f7ff ffb7 	bl	27554 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   275e6:	1e04      	subs	r4, r0, #0
   275e8:	bf08      	it	eq
   275ea:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_style_int_t);
   275ec:	3404      	adds	r4, #4
    style_resize(style, size);
   275ee:	b2a4      	uxth	r4, r4
   275f0:	4621      	mov	r1, r4
   275f2:	4628      	mov	r0, r5
   275f4:	f7ff ff99 	bl	2752a <style_resize.isra.0>
    if(style == NULL) return;
   275f8:	2d00      	cmp	r5, #0
   275fa:	d0ec      	beq.n	275d6 <_lv_style_set_int+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   275fc:	6828      	ldr	r0, [r5, #0]
   275fe:	1fa3      	subs	r3, r4, #6
   27600:	2202      	movs	r2, #2
   27602:	f10d 0106 	add.w	r1, sp, #6
   27606:	4418      	add	r0, r3
   27608:	f7ff ff8d 	bl	27526 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   2760c:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   2760e:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   27610:	2202      	movs	r2, #2
   27612:	a901      	add	r1, sp, #4
   27614:	4418      	add	r0, r3
   27616:	f7ff ff86 	bl	27526 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2761a:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_style_int_t) - end_mark_size, &value, sizeof(lv_style_int_t));
   2761c:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2761e:	2202      	movs	r2, #2
   27620:	f10d 010e 	add.w	r1, sp, #14
   27624:	4420      	add	r0, r4
   27626:	e7d4      	b.n	275d2 <_lv_style_set_int+0x32>

00027628 <_lv_style_set_color>:
{
   27628:	b530      	push	{r4, r5, lr}
   2762a:	b085      	sub	sp, #20
   2762c:	4605      	mov	r5, r0
   2762e:	f8ad 1006 	strh.w	r1, [sp, #6]
   27632:	f8ad 2004 	strh.w	r2, [sp, #4]
    int32_t id = get_property_index(style, prop);
   27636:	f7ff ff39 	bl	274ac <get_property_index>
    if(id >= 0) {
   2763a:	1e01      	subs	r1, r0, #0
   2763c:	db11      	blt.n	27662 <_lv_style_set_color+0x3a>
        attr_found = get_style_prop_attr(style, id);
   2763e:	4628      	mov	r0, r5
   27640:	f7ff ff2d 	bl	2749e <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   27644:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   27648:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   2764c:	0643      	lsls	r3, r0, #25
   2764e:	d108      	bne.n	27662 <_lv_style_set_color+0x3a>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &color, sizeof(lv_color_t));
   27650:	682b      	ldr	r3, [r5, #0]
   27652:	1c88      	adds	r0, r1, #2
   27654:	2202      	movs	r2, #2
   27656:	a901      	add	r1, sp, #4
   27658:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2765a:	f7ff ff64 	bl	27526 <_lv_memcpy>
}
   2765e:	b005      	add	sp, #20
   27660:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   27662:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   27664:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   27666:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   2766a:	f7ff ff73 	bl	27554 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   2766e:	1e04      	subs	r4, r0, #0
   27670:	bf08      	it	eq
   27672:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_color_t);
   27674:	3404      	adds	r4, #4
    style_resize(style, size);
   27676:	b2a4      	uxth	r4, r4
   27678:	4621      	mov	r1, r4
   2767a:	4628      	mov	r0, r5
   2767c:	f7ff ff55 	bl	2752a <style_resize.isra.0>
    if(style == NULL) return;
   27680:	2d00      	cmp	r5, #0
   27682:	d0ec      	beq.n	2765e <_lv_style_set_color+0x36>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27684:	6828      	ldr	r0, [r5, #0]
   27686:	1fa3      	subs	r3, r4, #6
   27688:	2202      	movs	r2, #2
   2768a:	f10d 0106 	add.w	r1, sp, #6
   2768e:	4418      	add	r0, r3
   27690:	f7ff ff49 	bl	27526 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   27694:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27696:	1f23      	subs	r3, r4, #4
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   27698:	2202      	movs	r2, #2
   2769a:	a901      	add	r1, sp, #4
   2769c:	4418      	add	r0, r3
   2769e:	f7ff ff42 	bl	27526 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   276a2:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_color_t) - end_mark_size, &color, sizeof(lv_color_t));
   276a4:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   276a6:	2202      	movs	r2, #2
   276a8:	f10d 010e 	add.w	r1, sp, #14
   276ac:	4420      	add	r0, r4
   276ae:	e7d4      	b.n	2765a <_lv_style_set_color+0x32>

000276b0 <_lv_style_set_opa>:
{
   276b0:	b530      	push	{r4, r5, lr}
   276b2:	b085      	sub	sp, #20
   276b4:	4605      	mov	r5, r0
   276b6:	f8ad 1006 	strh.w	r1, [sp, #6]
   276ba:	f88d 2005 	strb.w	r2, [sp, #5]
    int32_t id = get_property_index(style, prop);
   276be:	f7ff fef5 	bl	274ac <get_property_index>
    if(id >= 0) {
   276c2:	1e01      	subs	r1, r0, #0
   276c4:	db12      	blt.n	276ec <_lv_style_set_opa+0x3c>
        attr_found = get_style_prop_attr(style, id);
   276c6:	4628      	mov	r0, r5
   276c8:	f7ff fee9 	bl	2749e <get_style_prop_attr>
        attr_goal = (prop >> 8) & 0xFFU;
   276cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
        if(LV_STYLE_ATTR_GET_STATE(attr_found) == LV_STYLE_ATTR_GET_STATE(attr_goal)) {
   276d0:	ea80 2013 	eor.w	r0, r0, r3, lsr #8
   276d4:	0643      	lsls	r3, r0, #25
   276d6:	d109      	bne.n	276ec <_lv_style_set_opa+0x3c>
            _lv_memcpy_small(style->map + id + sizeof(lv_style_property_t), &opa, sizeof(lv_opa_t));
   276d8:	682b      	ldr	r3, [r5, #0]
   276da:	1c88      	adds	r0, r1, #2
   276dc:	2201      	movs	r2, #1
   276de:	f10d 0105 	add.w	r1, sp, #5
   276e2:	4418      	add	r0, r3
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   276e4:	f7ff ff1f 	bl	27526 <_lv_memcpy>
}
   276e8:	b005      	add	sp, #20
   276ea:	bd30      	pop	{r4, r5, pc}
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   276ec:	23ff      	movs	r3, #255	; 0xff
    uint16_t size = _lv_style_get_mem_size(style);
   276ee:	4628      	mov	r0, r5
    lv_style_property_t end_mark = _LV_STYLE_CLOSEING_PROP;
   276f0:	f8ad 300e 	strh.w	r3, [sp, #14]
    uint16_t size = _lv_style_get_mem_size(style);
   276f4:	f7ff ff2e 	bl	27554 <_lv_style_get_mem_size>
    if(size == 0) size += end_mark_size;
   276f8:	1e04      	subs	r4, r0, #0
   276fa:	bf08      	it	eq
   276fc:	2402      	moveq	r4, #2
    size += sizeof(lv_style_property_t) + sizeof(lv_opa_t);
   276fe:	3403      	adds	r4, #3
    style_resize(style, size);
   27700:	b2a4      	uxth	r4, r4
   27702:	4621      	mov	r1, r4
   27704:	4628      	mov	r0, r5
   27706:	f7ff ff10 	bl	2752a <style_resize.isra.0>
    if(style == NULL) return;
   2770a:	2d00      	cmp	r5, #0
   2770c:	d0ec      	beq.n	276e8 <_lv_style_set_opa+0x38>
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   2770e:	6828      	ldr	r0, [r5, #0]
   27710:	1f63      	subs	r3, r4, #5
   27712:	2202      	movs	r2, #2
   27714:	f10d 0106 	add.w	r1, sp, #6
   27718:	4418      	add	r0, r3
   2771a:	f7ff ff04 	bl	27526 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   2771e:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - new_prop_size - end_mark_size, &prop, sizeof(lv_style_property_t));
   27720:	1ee3      	subs	r3, r4, #3
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   27722:	2201      	movs	r2, #1
   27724:	f10d 0105 	add.w	r1, sp, #5
   27728:	4418      	add	r0, r3
   2772a:	f7ff fefc 	bl	27526 <_lv_memcpy>
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   2772e:	6828      	ldr	r0, [r5, #0]
    _lv_memcpy_small(style->map + size - sizeof(lv_opa_t) - end_mark_size, &opa, sizeof(lv_opa_t));
   27730:	3c02      	subs	r4, #2
    _lv_memcpy_small(style->map + size - end_mark_size, &end_mark, sizeof(end_mark));
   27732:	2202      	movs	r2, #2
   27734:	f10d 010e 	add.w	r1, sp, #14
   27738:	4420      	add	r0, r4
   2773a:	e7d3      	b.n	276e4 <_lv_style_set_opa+0x34>

0002773c <_lv_style_get_int>:
{
   2773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2773e:	4604      	mov	r4, r0
   27740:	460e      	mov	r6, r1
   27742:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   27744:	b910      	cbnz	r0, 2774c <_lv_style_get_int+0x10>
   27746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2774a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   2774c:	6803      	ldr	r3, [r0, #0]
   2774e:	2b00      	cmp	r3, #0
   27750:	d0f9      	beq.n	27746 <_lv_style_get_int+0xa>
    int32_t id = get_property_index(style, prop);
   27752:	f7ff feab 	bl	274ac <get_property_index>
    if(id < 0) {
   27756:	1e05      	subs	r5, r0, #0
   27758:	dbf5      	blt.n	27746 <_lv_style_get_int+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_style_int_t));
   2775a:	6821      	ldr	r1, [r4, #0]
   2775c:	1cab      	adds	r3, r5, #2
   2775e:	4419      	add	r1, r3
   27760:	2202      	movs	r2, #2
   27762:	4638      	mov	r0, r7
   27764:	f7ff fedf 	bl	27526 <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   27768:	4629      	mov	r1, r5
   2776a:	4620      	mov	r0, r4
   2776c:	f7ff fe97 	bl	2749e <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   27770:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   27774:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   27778:	e7e7      	b.n	2774a <_lv_style_get_int+0xe>

0002777a <_lv_style_get_opa>:
{
   2777a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2777c:	4604      	mov	r4, r0
   2777e:	460e      	mov	r6, r1
   27780:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   27782:	b910      	cbnz	r0, 2778a <_lv_style_get_opa+0x10>
   27784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   27788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   2778a:	6803      	ldr	r3, [r0, #0]
   2778c:	2b00      	cmp	r3, #0
   2778e:	d0f9      	beq.n	27784 <_lv_style_get_opa+0xa>
    int32_t id = get_property_index(style, prop);
   27790:	f7ff fe8c 	bl	274ac <get_property_index>
    if(id < 0) {
   27794:	1e05      	subs	r5, r0, #0
   27796:	dbf5      	blt.n	27784 <_lv_style_get_opa+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(lv_opa_t));
   27798:	6821      	ldr	r1, [r4, #0]
   2779a:	1cab      	adds	r3, r5, #2
   2779c:	4419      	add	r1, r3
   2779e:	2201      	movs	r2, #1
   277a0:	4638      	mov	r0, r7
   277a2:	f7ff fec0 	bl	27526 <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   277a6:	4629      	mov	r1, r5
   277a8:	4620      	mov	r0, r4
   277aa:	f7ff fe78 	bl	2749e <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   277ae:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   277b2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   277b6:	e7e7      	b.n	27788 <_lv_style_get_opa+0xe>

000277b8 <_lv_style_get_ptr>:
{
   277b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   277ba:	4604      	mov	r4, r0
   277bc:	460e      	mov	r6, r1
   277be:	4617      	mov	r7, r2
    if(style == NULL) return -1;
   277c0:	b910      	cbnz	r0, 277c8 <_lv_style_get_ptr+0x10>
   277c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   277c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(style->map == NULL) return -1;
   277c8:	6803      	ldr	r3, [r0, #0]
   277ca:	2b00      	cmp	r3, #0
   277cc:	d0f9      	beq.n	277c2 <_lv_style_get_ptr+0xa>
    int32_t id = get_property_index(style, prop);
   277ce:	f7ff fe6d 	bl	274ac <get_property_index>
    if(id < 0) {
   277d2:	1e05      	subs	r5, r0, #0
   277d4:	dbf5      	blt.n	277c2 <_lv_style_get_ptr+0xa>
        _lv_memcpy_small(res, &style->map[id + sizeof(lv_style_property_t)], sizeof(const void *));
   277d6:	6821      	ldr	r1, [r4, #0]
   277d8:	1cab      	adds	r3, r5, #2
   277da:	4419      	add	r1, r3
   277dc:	2204      	movs	r2, #4
   277de:	4638      	mov	r0, r7
   277e0:	f7ff fea1 	bl	27526 <_lv_memcpy>
        attr_act = get_style_prop_attr(style, id);
   277e4:	4629      	mov	r1, r5
   277e6:	4620      	mov	r0, r4
   277e8:	f7ff fe59 	bl	2749e <get_style_prop_attr>
        return LV_STYLE_ATTR_GET_STATE(attr_act) & LV_STYLE_ATTR_GET_STATE(attr_goal);
   277ec:	ea00 2016 	and.w	r0, r0, r6, lsr #8
   277f0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   277f4:	e7e7      	b.n	277c6 <_lv_style_get_ptr+0xe>

000277f6 <lv_style_list_get_local_style>:
    if(!list->has_local) return NULL;
   277f6:	7902      	ldrb	r2, [r0, #4]
{
   277f8:	4603      	mov	r3, r0
    if(!list->has_local) return NULL;
   277fa:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   277fe:	d005      	beq.n	2780c <lv_style_list_get_local_style+0x16>
    if(list->has_trans) return list->style_list[1];
   27800:	0612      	lsls	r2, r2, #24
   27802:	681b      	ldr	r3, [r3, #0]
   27804:	d501      	bpl.n	2780a <lv_style_list_get_local_style+0x14>
   27806:	6858      	ldr	r0, [r3, #4]
   27808:	4770      	bx	lr
    else return list->style_list[0];
   2780a:	6818      	ldr	r0, [r3, #0]
}
   2780c:	4770      	bx	lr

0002780e <_lv_style_list_get_transition_style>:
    if(!list->has_trans) return NULL;
   2780e:	f990 3004 	ldrsb.w	r3, [r0, #4]
   27812:	2b00      	cmp	r3, #0
    return list->style_list[0];
   27814:	bfba      	itte	lt
   27816:	6803      	ldrlt	r3, [r0, #0]
   27818:	6818      	ldrlt	r0, [r3, #0]
    if(!list->has_trans) return NULL;
   2781a:	2000      	movge	r0, #0
}
   2781c:	4770      	bx	lr

0002781e <_lv_style_list_reset>:
{
   2781e:	b538      	push	{r3, r4, r5, lr}
    if(list == NULL) return;
   27820:	4604      	mov	r4, r0
   27822:	b328      	cbz	r0, 27870 <_lv_style_list_reset+0x52>
    if(list->has_local) {
   27824:	7903      	ldrb	r3, [r0, #4]
   27826:	065a      	lsls	r2, r3, #25
   27828:	d508      	bpl.n	2783c <_lv_style_list_reset+0x1e>
        lv_style_t * local = lv_style_list_get_local_style(list);
   2782a:	f7ff ffe4 	bl	277f6 <lv_style_list_get_local_style>
        if(local) {
   2782e:	4605      	mov	r5, r0
   27830:	b120      	cbz	r0, 2783c <_lv_style_list_reset+0x1e>
            lv_style_reset(local);
   27832:	f7ff fe87 	bl	27544 <lv_style_reset>
            lv_mem_free(local);
   27836:	4628      	mov	r0, r5
   27838:	f7f5 feb2 	bl	1d5a0 <lv_mem_free>
    if(list->has_trans) {
   2783c:	f994 3004 	ldrsb.w	r3, [r4, #4]
   27840:	2b00      	cmp	r3, #0
   27842:	da09      	bge.n	27858 <_lv_style_list_reset+0x3a>
        lv_style_t * trans = _lv_style_list_get_transition_style(list);
   27844:	4620      	mov	r0, r4
   27846:	f7ff ffe2 	bl	2780e <_lv_style_list_get_transition_style>
        if(trans) {
   2784a:	4605      	mov	r5, r0
   2784c:	b120      	cbz	r0, 27858 <_lv_style_list_reset+0x3a>
            lv_style_reset(trans);
   2784e:	f7ff fe79 	bl	27544 <lv_style_reset>
            lv_mem_free(trans);
   27852:	4628      	mov	r0, r5
   27854:	f7f5 fea4 	bl	1d5a0 <lv_mem_free>
    if(list->style_cnt > 0) lv_mem_free(list->style_list);
   27858:	7923      	ldrb	r3, [r4, #4]
   2785a:	069b      	lsls	r3, r3, #26
   2785c:	d002      	beq.n	27864 <_lv_style_list_reset+0x46>
   2785e:	6820      	ldr	r0, [r4, #0]
   27860:	f7f5 fe9e 	bl	1d5a0 <lv_mem_free>
    list->style_list = NULL;
   27864:	2300      	movs	r3, #0
   27866:	6023      	str	r3, [r4, #0]
    list->style_cnt = 0;
   27868:	88a3      	ldrh	r3, [r4, #4]
   2786a:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
   2786e:	80a3      	strh	r3, [r4, #4]
}
   27870:	bd38      	pop	{r3, r4, r5, pc}

00027872 <lv_style_list_copy>:
{
   27872:	b538      	push	{r3, r4, r5, lr}
   27874:	460c      	mov	r4, r1
   27876:	4605      	mov	r5, r0
    _lv_style_list_reset(list_dest);
   27878:	f7ff ffd1 	bl	2781e <_lv_style_list_reset>
    if(list_src->style_list == NULL) return;
   2787c:	6823      	ldr	r3, [r4, #0]
   2787e:	b1f3      	cbz	r3, 278be <lv_style_list_copy+0x4c>
    if(list_src->has_local == 0) {
   27880:	7922      	ldrb	r2, [r4, #4]
   27882:	f994 3004 	ldrsb.w	r3, [r4, #4]
   27886:	f002 003f 	and.w	r0, r2, #63	; 0x3f
   2788a:	0652      	lsls	r2, r2, #25
   2788c:	d429      	bmi.n	278e2 <lv_style_list_copy+0x70>
        if(list_src->has_trans) {
   2788e:	2b00      	cmp	r3, #0
   27890:	da16      	bge.n	278c0 <lv_style_list_copy+0x4e>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   27892:	3801      	subs	r0, #1
   27894:	0080      	lsls	r0, r0, #2
   27896:	f7f5 fe5b 	bl	1d550 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   2789a:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   2789c:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   2789e:	6821      	ldr	r1, [r4, #0]
   278a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   278a4:	3a01      	subs	r2, #1
   278a6:	0092      	lsls	r2, r2, #2
   278a8:	3104      	adds	r1, #4
   278aa:	f7ff fe3c 	bl	27526 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   278ae:	7923      	ldrb	r3, [r4, #4]
   278b0:	792a      	ldrb	r2, [r5, #4]
   278b2:	f3c3 0305 	ubfx	r3, r3, #0, #6
   278b6:	3b01      	subs	r3, #1
   278b8:	f363 0205 	bfi	r2, r3, #0, #6
   278bc:	712a      	strb	r2, [r5, #4]
}
   278be:	bd38      	pop	{r3, r4, r5, pc}
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   278c0:	0080      	lsls	r0, r0, #2
   278c2:	f7f5 fe45 	bl	1d550 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   278c6:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
   278c8:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
   278ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   278ce:	0092      	lsls	r2, r2, #2
   278d0:	6821      	ldr	r1, [r4, #0]
   278d2:	f7ff fe28 	bl	27526 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt;
   278d6:	7922      	ldrb	r2, [r4, #4]
   278d8:	792b      	ldrb	r3, [r5, #4]
   278da:	f362 0305 	bfi	r3, r2, #0, #6
   278de:	712b      	strb	r3, [r5, #4]
   278e0:	e7ed      	b.n	278be <lv_style_list_copy+0x4c>
        if(list_src->has_trans) {
   278e2:	2b00      	cmp	r3, #0
   278e4:	da22      	bge.n	2792c <lv_style_list_copy+0xba>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   278e6:	3802      	subs	r0, #2
   278e8:	0080      	lsls	r0, r0, #2
   278ea:	f7f5 fe31 	bl	1d550 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   278ee:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
   278f0:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
   278f2:	6821      	ldr	r1, [r4, #0]
   278f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   278f8:	3a02      	subs	r2, #2
   278fa:	0092      	lsls	r2, r2, #2
   278fc:	3108      	adds	r1, #8
   278fe:	f7ff fe12 	bl	27526 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 2;
   27902:	7923      	ldrb	r3, [r4, #4]
   27904:	f3c3 0305 	ubfx	r3, r3, #0, #6
   27908:	3b02      	subs	r3, #2
            list_dest->style_cnt = list_src->style_cnt - 1;
   2790a:	792a      	ldrb	r2, [r5, #4]
   2790c:	f363 0205 	bfi	r2, r3, #0, #6
   27910:	712a      	strb	r2, [r5, #4]
        lv_style_t * local_style = get_alloc_local_style(list_dest);
   27912:	4628      	mov	r0, r5
   27914:	f7f3 fdf8 	bl	1b508 <get_alloc_local_style>
   27918:	4605      	mov	r5, r0
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   2791a:	4620      	mov	r0, r4
   2791c:	f7f3 fdf4 	bl	1b508 <get_alloc_local_style>
   27920:	4601      	mov	r1, r0
   27922:	4628      	mov	r0, r5
}
   27924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        lv_style_copy(local_style, get_alloc_local_style((lv_style_list_t *)list_src));
   27928:	f7ff be26 	b.w	27578 <lv_style_copy>
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   2792c:	3801      	subs	r0, #1
   2792e:	0080      	lsls	r0, r0, #2
   27930:	f7f5 fe0e 	bl	1d550 <lv_mem_alloc>
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   27934:	7922      	ldrb	r2, [r4, #4]
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
   27936:	6028      	str	r0, [r5, #0]
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
   27938:	6821      	ldr	r1, [r4, #0]
   2793a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2793e:	3a01      	subs	r2, #1
   27940:	0092      	lsls	r2, r2, #2
   27942:	3104      	adds	r1, #4
   27944:	f7ff fdef 	bl	27526 <_lv_memcpy>
            list_dest->style_cnt = list_src->style_cnt - 1;
   27948:	7923      	ldrb	r3, [r4, #4]
   2794a:	f3c3 0305 	ubfx	r3, r3, #0, #6
   2794e:	3b01      	subs	r3, #1
   27950:	e7db      	b.n	2790a <lv_style_list_copy+0x98>

00027952 <_lv_style_list_get_int>:
{
   27952:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27956:	460f      	mov	r7, r1
   27958:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   2795a:	4605      	mov	r5, r0
   2795c:	b318      	cbz	r0, 279a6 <_lv_style_list_get_int+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   2795e:	6800      	ldr	r0, [r0, #0]
   27960:	b308      	cbz	r0, 279a6 <_lv_style_list_get_int+0x54>
    lv_style_int_t value_act = 0;
   27962:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   27964:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_style_int_t value_act = 0;
   27968:	f8ad 6006 	strh.w	r6, [sp, #6]
    int16_t weight = -1;
   2796c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   27970:	792b      	ldrb	r3, [r5, #4]
   27972:	fa0f f986 	sxth.w	r9, r6
   27976:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2797a:	4599      	cmp	r9, r3
   2797c:	db03      	blt.n	27986 <_lv_style_list_get_int+0x34>
    if(weight >= 0) return LV_RES_OK;
   2797e:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27980:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27984:	e00f      	b.n	279a6 <_lv_style_list_get_int+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27986:	b2f1      	uxtb	r1, r6
   27988:	4628      	mov	r0, r5
   2798a:	f7ff fd5b 	bl	27444 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_int(class, prop, &value_act);
   2798e:	f10d 0206 	add.w	r2, sp, #6
   27992:	4639      	mov	r1, r7
   27994:	f7ff fed2 	bl	2773c <_lv_style_get_int>
        if(weight_act == weight_goal) {
   27998:	4582      	cmp	sl, r0
   2799a:	d107      	bne.n	279ac <_lv_style_list_get_int+0x5a>
            *res = value_act;
   2799c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   279a0:	f8a8 3000 	strh.w	r3, [r8]
            return LV_RES_OK;
   279a4:	2001      	movs	r0, #1
}
   279a6:	b002      	add	sp, #8
   279a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   279ac:	f995 3004 	ldrsb.w	r3, [r5, #4]
   279b0:	2b00      	cmp	r3, #0
   279b2:	da07      	bge.n	279c4 <_lv_style_list_get_int+0x72>
   279b4:	2800      	cmp	r0, #0
   279b6:	db05      	blt.n	279c4 <_lv_style_list_get_int+0x72>
   279b8:	f1b9 0f00 	cmp.w	r9, #0
   279bc:	d102      	bne.n	279c4 <_lv_style_list_get_int+0x72>
   279be:	796b      	ldrb	r3, [r5, #5]
   279c0:	07db      	lsls	r3, r3, #31
   279c2:	d5eb      	bpl.n	2799c <_lv_style_list_get_int+0x4a>
        else if(weight_act > weight) {
   279c4:	4284      	cmp	r4, r0
            *res = value_act;
   279c6:	bfbe      	ittt	lt
   279c8:	f8bd 3006 	ldrhlt.w	r3, [sp, #6]
   279cc:	f8a8 3000 	strhlt.w	r3, [r8]
   279d0:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   279d2:	3601      	adds	r6, #1
   279d4:	e7cc      	b.n	27970 <_lv_style_list_get_int+0x1e>

000279d6 <_lv_style_list_get_color>:
{
   279d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   279da:	460f      	mov	r7, r1
   279dc:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   279de:	4605      	mov	r5, r0
   279e0:	b310      	cbz	r0, 27a28 <_lv_style_list_get_color+0x52>
    if(list->style_list == NULL) return LV_RES_INV;
   279e2:	6800      	ldr	r0, [r0, #0]
   279e4:	b300      	cbz	r0, 27a28 <_lv_style_list_get_color+0x52>
    value_act.full = 0;
   279e6:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   279e8:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    value_act.full = 0;
   279ec:	f8ad 6004 	strh.w	r6, [sp, #4]
    int16_t weight = -1;
   279f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   279f4:	792b      	ldrb	r3, [r5, #4]
   279f6:	fa0f f986 	sxth.w	r9, r6
   279fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   279fe:	4599      	cmp	r9, r3
   27a00:	db03      	blt.n	27a0a <_lv_style_list_get_color+0x34>
    if(weight >= 0)  return LV_RES_OK;
   27a02:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27a04:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27a08:	e00e      	b.n	27a28 <_lv_style_list_get_color+0x52>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27a0a:	b2f1      	uxtb	r1, r6
   27a0c:	4628      	mov	r0, r5
   27a0e:	f7ff fd19 	bl	27444 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_color(class, prop, &value_act);
   27a12:	aa01      	add	r2, sp, #4
   27a14:	4639      	mov	r1, r7
   27a16:	f7ff fe91 	bl	2773c <_lv_style_get_int>
        if(weight_act == weight_goal) {
   27a1a:	4582      	cmp	sl, r0
   27a1c:	d107      	bne.n	27a2e <_lv_style_list_get_color+0x58>
            *res = value_act;
   27a1e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   27a22:	f8a8 3000 	strh.w	r3, [r8]
            return LV_RES_OK;
   27a26:	2001      	movs	r0, #1
}
   27a28:	b002      	add	sp, #8
   27a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27a2e:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27a32:	2b00      	cmp	r3, #0
   27a34:	da07      	bge.n	27a46 <_lv_style_list_get_color+0x70>
   27a36:	2800      	cmp	r0, #0
   27a38:	db05      	blt.n	27a46 <_lv_style_list_get_color+0x70>
   27a3a:	f1b9 0f00 	cmp.w	r9, #0
   27a3e:	d102      	bne.n	27a46 <_lv_style_list_get_color+0x70>
   27a40:	796b      	ldrb	r3, [r5, #5]
   27a42:	07db      	lsls	r3, r3, #31
   27a44:	d5eb      	bpl.n	27a1e <_lv_style_list_get_color+0x48>
        else if(weight_act > weight) {
   27a46:	4284      	cmp	r4, r0
            *res = value_act;
   27a48:	bfbe      	ittt	lt
   27a4a:	f8bd 3004 	ldrhlt.w	r3, [sp, #4]
   27a4e:	f8a8 3000 	strhlt.w	r3, [r8]
   27a52:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27a54:	3601      	adds	r6, #1
   27a56:	e7cd      	b.n	279f4 <_lv_style_list_get_color+0x1e>

00027a58 <_lv_style_list_get_opa>:
{
   27a58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27a5c:	460f      	mov	r7, r1
   27a5e:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   27a60:	4605      	mov	r5, r0
   27a62:	b318      	cbz	r0, 27aac <_lv_style_list_get_opa+0x54>
    if(list->style_list == NULL) return LV_RES_INV;
   27a64:	6800      	ldr	r0, [r0, #0]
   27a66:	b308      	cbz	r0, 27aac <_lv_style_list_get_opa+0x54>
    lv_opa_t value_act = LV_OPA_TRANSP;
   27a68:	2600      	movs	r6, #0
    int16_t weight_goal = attr;
   27a6a:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    lv_opa_t value_act = LV_OPA_TRANSP;
   27a6e:	f88d 6007 	strb.w	r6, [sp, #7]
    int16_t weight = -1;
   27a72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   27a76:	792b      	ldrb	r3, [r5, #4]
   27a78:	fa0f f986 	sxth.w	r9, r6
   27a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27a80:	4599      	cmp	r9, r3
   27a82:	db03      	blt.n	27a8c <_lv_style_list_get_opa+0x34>
    if(weight >= 0)  return LV_RES_OK;
   27a84:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27a86:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27a8a:	e00f      	b.n	27aac <_lv_style_list_get_opa+0x54>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27a8c:	b2f1      	uxtb	r1, r6
   27a8e:	4628      	mov	r0, r5
   27a90:	f7ff fcd8 	bl	27444 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_opa(class, prop, &value_act);
   27a94:	f10d 0207 	add.w	r2, sp, #7
   27a98:	4639      	mov	r1, r7
   27a9a:	f7ff fe6e 	bl	2777a <_lv_style_get_opa>
        if(weight_act == weight_goal) {
   27a9e:	4582      	cmp	sl, r0
   27aa0:	d107      	bne.n	27ab2 <_lv_style_list_get_opa+0x5a>
            *res = value_act;
   27aa2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   27aa6:	f888 3000 	strb.w	r3, [r8]
            return LV_RES_OK;
   27aaa:	2001      	movs	r0, #1
}
   27aac:	b002      	add	sp, #8
   27aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27ab2:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27ab6:	2b00      	cmp	r3, #0
   27ab8:	da07      	bge.n	27aca <_lv_style_list_get_opa+0x72>
   27aba:	2800      	cmp	r0, #0
   27abc:	db05      	blt.n	27aca <_lv_style_list_get_opa+0x72>
   27abe:	f1b9 0f00 	cmp.w	r9, #0
   27ac2:	d102      	bne.n	27aca <_lv_style_list_get_opa+0x72>
   27ac4:	796b      	ldrb	r3, [r5, #5]
   27ac6:	07db      	lsls	r3, r3, #31
   27ac8:	d5eb      	bpl.n	27aa2 <_lv_style_list_get_opa+0x4a>
        else if(weight_act > weight) {
   27aca:	4284      	cmp	r4, r0
            *res = value_act;
   27acc:	bfbe      	ittt	lt
   27ace:	f89d 3007 	ldrblt.w	r3, [sp, #7]
   27ad2:	f888 3000 	strblt.w	r3, [r8]
   27ad6:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27ad8:	3601      	adds	r6, #1
   27ada:	e7cc      	b.n	27a76 <_lv_style_list_get_opa+0x1e>

00027adc <_lv_style_list_get_ptr>:
{
   27adc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   27ae0:	460f      	mov	r7, r1
   27ae2:	4690      	mov	r8, r2
    if(list == NULL) return LV_RES_INV;
   27ae4:	4605      	mov	r5, r0
   27ae6:	b1f8      	cbz	r0, 27b28 <_lv_style_list_get_ptr+0x4c>
    if(list->style_list == NULL) return LV_RES_INV;
   27ae8:	6800      	ldr	r0, [r0, #0]
   27aea:	b1e8      	cbz	r0, 27b28 <_lv_style_list_get_ptr+0x4c>
    int16_t weight_goal = attr;
   27aec:	ea4f 2a11 	mov.w	sl, r1, lsr #8
    for(ci = 0; ci < list->style_cnt; ci++) {
   27af0:	2600      	movs	r6, #0
    int16_t weight = -1;
   27af2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(ci = 0; ci < list->style_cnt; ci++) {
   27af6:	792b      	ldrb	r3, [r5, #4]
   27af8:	fa0f f986 	sxth.w	r9, r6
   27afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27b00:	4599      	cmp	r9, r3
   27b02:	db03      	blt.n	27b0c <_lv_style_list_get_ptr+0x30>
    if(weight >= 0)  return LV_RES_OK;
   27b04:	43e0      	mvns	r0, r4
    if(list == NULL) return LV_RES_INV;
   27b06:	f3c0 30c0 	ubfx	r0, r0, #15, #1
   27b0a:	e00d      	b.n	27b28 <_lv_style_list_get_ptr+0x4c>
        lv_style_t * class = lv_style_list_get_style(list, ci);
   27b0c:	b2f1      	uxtb	r1, r6
   27b0e:	4628      	mov	r0, r5
   27b10:	f7ff fc98 	bl	27444 <lv_style_list_get_style>
        int16_t weight_act = _lv_style_get_ptr(class, prop, &value_act);
   27b14:	aa01      	add	r2, sp, #4
   27b16:	4639      	mov	r1, r7
   27b18:	f7ff fe4e 	bl	277b8 <_lv_style_get_ptr>
        if(weight_act == weight_goal) {
   27b1c:	4582      	cmp	sl, r0
   27b1e:	d106      	bne.n	27b2e <_lv_style_list_get_ptr+0x52>
            *res = value_act;
   27b20:	9b01      	ldr	r3, [sp, #4]
   27b22:	f8c8 3000 	str.w	r3, [r8]
            return LV_RES_OK;
   27b26:	2001      	movs	r0, #1
}
   27b28:	b002      	add	sp, #8
   27b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        else if(list->has_trans && weight_act >= 0 && ci == 0 && !list->skip_trans) {
   27b2e:	f995 3004 	ldrsb.w	r3, [r5, #4]
   27b32:	2b00      	cmp	r3, #0
   27b34:	da07      	bge.n	27b46 <_lv_style_list_get_ptr+0x6a>
   27b36:	2800      	cmp	r0, #0
   27b38:	db05      	blt.n	27b46 <_lv_style_list_get_ptr+0x6a>
   27b3a:	f1b9 0f00 	cmp.w	r9, #0
   27b3e:	d102      	bne.n	27b46 <_lv_style_list_get_ptr+0x6a>
   27b40:	796b      	ldrb	r3, [r5, #5]
   27b42:	07db      	lsls	r3, r3, #31
   27b44:	d5ec      	bpl.n	27b20 <_lv_style_list_get_ptr+0x44>
        else if(weight_act > weight) {
   27b46:	4284      	cmp	r4, r0
            *res = value_act;
   27b48:	bfbe      	ittt	lt
   27b4a:	9b01      	ldrlt	r3, [sp, #4]
   27b4c:	f8c8 3000 	strlt.w	r3, [r8]
   27b50:	4604      	movlt	r4, r0
    for(ci = 0; ci < list->style_cnt; ci++) {
   27b52:	3601      	adds	r6, #1
   27b54:	e7cf      	b.n	27af6 <_lv_style_list_get_ptr+0x1a>

00027b56 <lv_color_mix>:
{
   27b56:	b5f0      	push	{r4, r5, r6, r7, lr}
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27b58:	f1c2 06ff 	rsb	r6, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   27b5c:	f3c1 1445 	ubfx	r4, r1, #5, #6
   27b60:	4374      	muls	r4, r6
   27b62:	f3c0 1345 	ubfx	r3, r0, #5, #6
   27b66:	fb03 4302 	mla	r3, r3, r2, r4
   27b6a:	f248 0481 	movw	r4, #32897	; 0x8081
   27b6e:	4363      	muls	r3, r4
   27b70:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   27b74:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27b78:	f001 071f 	and.w	r7, r1, #31
    return ret;
   27b7c:	f3c3 55c5 	ubfx	r5, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27b80:	4377      	muls	r7, r6
   27b82:	f000 031f 	and.w	r3, r0, #31
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27b86:	f3c1 21c4 	ubfx	r1, r1, #11, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27b8a:	fb03 7302 	mla	r3, r3, r2, r7
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27b8e:	434e      	muls	r6, r1
   27b90:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27b94:	4363      	muls	r3, r4
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27b96:	fb00 6002 	mla	r0, r0, r2, r6
   27b9a:	4360      	muls	r0, r4
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   27b9c:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   27ba0:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27ba4:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
    return ret;
   27ba8:	f3c3 53c4 	ubfx	r3, r3, #23, #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27bac:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
    return ret;
   27bb0:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   27bb4:	0dc0      	lsrs	r0, r0, #23
}
   27bb6:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
   27bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027bbc <_lv_blend_fill>:
 * @param mode blend mode from `lv_blend_mode_t`
 */
LV_ATTRIBUTE_FAST_MEM void _lv_blend_fill(const lv_area_t * clip_area, const lv_area_t * fill_area,
                                          lv_color_t color, lv_opa_t * mask, lv_draw_mask_res_t mask_res, lv_opa_t opa,
                                          lv_blend_mode_t mode)
{
   27bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27bc0:	b08d      	sub	sp, #52	; 0x34
   27bc2:	461e      	mov	r6, r3
   27bc4:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
   27bc8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   27bcc:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
   27bd0:	9308      	str	r3, [sp, #32]
    /*Do not draw transparent things*/
    if(opa < LV_OPA_MIN) return;
   27bd2:	2d01      	cmp	r5, #1
{
   27bd4:	4681      	mov	r9, r0
   27bd6:	468a      	mov	sl, r1
   27bd8:	4614      	mov	r4, r2
    if(opa < LV_OPA_MIN) return;
   27bda:	f240 80b1 	bls.w	27d40 <_lv_blend_fill+0x184>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   27bde:	2b00      	cmp	r3, #0
   27be0:	f000 80ae 	beq.w	27d40 <_lv_blend_fill+0x184>

    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   27be4:	f7f3 f9c0 	bl	1af68 <_lv_refr_get_disp_refreshing>
   27be8:	4680      	mov	r8, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   27bea:	f002 f9b7 	bl	29f5c <lv_disp_get_buf>
    const lv_area_t * disp_area = &vdb->area;
    lv_color_t * disp_buf = vdb->buf_act;
   27bee:	6883      	ldr	r3, [r0, #8]
   27bf0:	9305      	str	r3, [sp, #20]

    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   27bf2:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   27bf6:	4683      	mov	fp, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   27bf8:	b10b      	cbz	r3, 27bfe <_lv_blend_fill+0x42>
   27bfa:	4640      	mov	r0, r8
   27bfc:	4798      	blx	r3

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, clip_area, fill_area);
   27bfe:	4652      	mov	r2, sl
   27c00:	4649      	mov	r1, r9
   27c02:	a80a      	add	r0, sp, #40	; 0x28
   27c04:	f002 fa15 	bl	2a032 <_lv_area_intersect>
    if(!is_common) return;
   27c08:	2800      	cmp	r0, #0
   27c0a:	f000 8099 	beq.w	27d40 <_lv_blend_fill+0x184>

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
   27c0e:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   27c12:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
    draw_area.y1 -= disp_area->y1;
   27c16:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
   27c1a:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    draw_area.x1 -= disp_area->x1;
   27c1e:	1a53      	subs	r3, r2, r1
   27c20:	fa0f fe83 	sxth.w	lr, r3
    draw_area.y1 -= disp_area->y1;
   27c24:	ebaa 0300 	sub.w	r3, sl, r0
   27c28:	b21b      	sxth	r3, r3
   27c2a:	9306      	str	r3, [sp, #24]
   27c2c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
   27c30:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
   27c34:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
    draw_area.x2 -= disp_area->x1;
   27c38:	1a59      	subs	r1, r3, r1
   27c3a:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    draw_area.y2 -= disp_area->y1;
   27c3e:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
   27c42:	9107      	str	r1, [sp, #28]
   27c44:	1a08      	subs	r0, r1, r0
   27c46:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e

    /*Round the values in the mask if anti-aliasing is disabled*/
#if LV_ANTIALIAS
    if(mask && disp->driver.antialiasing == 0)
#else
    if(mask)
   27c4a:	2e00      	cmp	r6, #0
   27c4c:	d14a      	bne.n	27ce4 <_lv_blend_fill+0x128>
        int32_t mask_w = lv_area_get_width(&draw_area);
        int32_t i;
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
    }

    if(disp->driver.set_px_cb) {
   27c4e:	f8d8 0014 	ldr.w	r0, [r8, #20]
   27c52:	2800      	cmp	r0, #0
   27c54:	d161      	bne.n	27d1a <_lv_blend_fill+0x15e>
        fill_set_px(disp_area, disp_buf, &draw_area, color, opa, mask, mask_res);
    }
    else if(mode == LV_BLEND_MODE_NORMAL) {
   27c56:	2f00      	cmp	r7, #0
   27c58:	d172      	bne.n	27d40 <_lv_blend_fill+0x184>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   27c5a:	f1c2 0201 	rsb	r2, r2, #1
   27c5e:	4413      	add	r3, r2
   27c60:	f8bb 0014 	ldrh.w	r0, [fp, #20]
   27c64:	f8bb c010 	ldrh.w	ip, [fp, #16]

    int32_t draw_area_w = lv_area_get_width(draw_area);
    int32_t draw_area_h = lv_area_get_height(draw_area);

    /*Create a temp. disp_buf which always point to the first pixel of the destination area*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   27c68:	9a05      	ldr	r2, [sp, #20]
   27c6a:	fa0f f883 	sxth.w	r8, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   27c6e:	9b07      	ldr	r3, [sp, #28]
   27c70:	f1ca 0a01 	rsb	sl, sl, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   27c74:	3001      	adds	r0, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   27c76:	4453      	add	r3, sl
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   27c78:	eba0 000c 	sub.w	r0, r0, ip
   27c7c:	f8dd a018 	ldr.w	sl, [sp, #24]
   27c80:	b200      	sxth	r0, r0
    int32_t draw_area_h = lv_area_get_height(draw_area);
   27c82:	b21b      	sxth	r3, r3
   27c84:	9307      	str	r3, [sp, #28]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   27c86:	fb00 e30a 	mla	r3, r0, sl, lr
   27c8a:	eb02 0943 	add.w	r9, r2, r3, lsl #1

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   27c8e:	0042      	lsls	r2, r0, #1
   27c90:	9206      	str	r2, [sp, #24]
   27c92:	9a08      	ldr	r2, [sp, #32]
   27c94:	2a01      	cmp	r2, #1
   27c96:	f040 80ef 	bne.w	27e78 <_lv_blend_fill+0x2bc>
        if(opa > LV_OPA_MAX) {
   27c9a:	2dfd      	cmp	r5, #253	; 0xfd
   27c9c:	f200 80a6 	bhi.w	27dec <_lv_blend_fill+0x230>

                return;
            }
#endif
            lv_color_t last_dest_color = LV_COLOR_BLACK;
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   27ca0:	462a      	mov	r2, r5
   27ca2:	4620      	mov	r0, r4
   27ca4:	4639      	mov	r1, r7
   27ca6:	f7ff ff56 	bl	27b56 <lv_color_mix>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   27caa:	f3c4 22c4 	ubfx	r2, r4, #11, #5
   27cae:	436a      	muls	r2, r5
   27cb0:	9205      	str	r2, [sp, #20]
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   27cb2:	f3c4 1245 	ubfx	r2, r4, #5, #6
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   27cb6:	f004 041f 	and.w	r4, r4, #31
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   27cba:	436a      	muls	r2, r5
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   27cbc:	fb04 fb05 	mul.w	fp, r4, r5

            uint16_t color_premult[3];
            lv_color_premult(color, opa, color_premult);
            lv_opa_t opa_inv = 255 - opa;
   27cc0:	43ed      	mvns	r5, r5
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   27cc2:	f000 031f 	and.w	r3, r0, #31
   27cc6:	f3c0 1645 	ubfx	r6, r0, #5, #6
            lv_color_t last_dest_color = LV_COLOR_BLACK;
   27cca:	46ba      	mov	sl, r7
            lv_color_t last_res_color = lv_color_mix(color, last_dest_color, opa);
   27ccc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   27cd0:	9208      	str	r2, [sp, #32]
            lv_opa_t opa_inv = 255 - opa;
   27cd2:	b2ed      	uxtb	r5, r5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27cd4:	f248 0c81 	movw	ip, #32897	; 0x8081

            for(y = 0; y < draw_area_h; y++) {
   27cd8:	9a07      	ldr	r2, [sp, #28]
   27cda:	42ba      	cmp	r2, r7
   27cdc:	dd30      	ble.n	27d40 <_lv_blend_fill+0x184>
   27cde:	4649      	mov	r1, r9
                for(x = 0; x < draw_area_w; x++) {
   27ce0:	2400      	movs	r4, #0
   27ce2:	e0c3      	b.n	27e6c <_lv_blend_fill+0x2b0>
   27ce4:	f103 0901 	add.w	r9, r3, #1
   27ce8:	eba9 0902 	sub.w	r9, r9, r2
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   27cec:	f1c6 0101 	rsb	r1, r6, #1
        int32_t mask_w = lv_area_get_width(&draw_area);
   27cf0:	fa0f f989 	sxth.w	r9, r9
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   27cf4:	1e70      	subs	r0, r6, #1
   27cf6:	9109      	str	r1, [sp, #36]	; 0x24
   27cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
   27cfa:	eb01 0c00 	add.w	ip, r1, r0
   27cfe:	45e1      	cmp	r9, ip
   27d00:	dda5      	ble.n	27c4e <_lv_blend_fill+0x92>
   27d02:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   27d06:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   27d0a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   27d0e:	bf98      	it	ls
   27d10:	f04f 0c00 	movls.w	ip, #0
   27d14:	f880 c000 	strb.w	ip, [r0]
   27d18:	e7ee      	b.n	27cf8 <_lv_blend_fill+0x13c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   27d1a:	f7f3 f925 	bl	1af68 <_lv_refr_get_disp_refreshing>
   27d1e:	f8bb 2014 	ldrh.w	r2, [fp, #20]
   27d22:	f8bb 3010 	ldrh.w	r3, [fp, #16]
   27d26:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	; 0x2a
   27d2a:	3201      	adds	r2, #1
   27d2c:	1ad2      	subs	r2, r2, r3
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   27d2e:	9b08      	ldr	r3, [sp, #32]
   27d30:	2b01      	cmp	r3, #1
   27d32:	fa0f fb82 	sxth.w	fp, r2
   27d36:	d11f      	bne.n	27d78 <_lv_blend_fill+0x1bc>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27d38:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   27d3c:	4598      	cmp	r8, r3
   27d3e:	dd02      	ble.n	27d46 <_lv_blend_fill+0x18a>
}
   27d40:	b00d      	add	sp, #52	; 0x34
   27d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27d46:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   27d4a:	fa0f f988 	sxth.w	r9, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27d4e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   27d52:	429f      	cmp	r7, r3
   27d54:	dd02      	ble.n	27d5c <_lv_blend_fill+0x1a0>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27d56:	f108 0801 	add.w	r8, r8, #1
   27d5a:	e7ed      	b.n	27d38 <_lv_blend_fill+0x17c>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color, opa);
   27d5c:	9502      	str	r5, [sp, #8]
   27d5e:	f8ad 4004 	strh.w	r4, [sp, #4]
   27d62:	f8cd 9000 	str.w	r9, [sp]
   27d66:	6946      	ldr	r6, [r0, #20]
   27d68:	9905      	ldr	r1, [sp, #20]
   27d6a:	9006      	str	r0, [sp, #24]
   27d6c:	b23b      	sxth	r3, r7
   27d6e:	465a      	mov	r2, fp
   27d70:	47b0      	blx	r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27d72:	3701      	adds	r7, #1
   27d74:	9806      	ldr	r0, [sp, #24]
   27d76:	e7ea      	b.n	27d4e <_lv_blend_fill+0x192>
   27d78:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   27d7c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   27d80:	f109 0901 	add.w	r9, r9, #1
   27d84:	eba9 0903 	sub.w	r9, r9, r3
   27d88:	1af6      	subs	r6, r6, r3
   27d8a:	fa0f f989 	sxth.w	r9, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27d8e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   27d92:	4598      	cmp	r8, r3
   27d94:	dcd4      	bgt.n	27d40 <_lv_blend_fill+0x184>
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   27d96:	fa0f f388 	sxth.w	r3, r8
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27d9a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   27d9e:	9306      	str	r3, [sp, #24]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27da0:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   27da4:	459a      	cmp	sl, r3
   27da6:	dd03      	ble.n	27db0 <_lv_blend_fill+0x1f4>
            mask_tmp += draw_area_w;
   27da8:	444e      	add	r6, r9
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27daa:	f108 0801 	add.w	r8, r8, #1
   27dae:	e7ee      	b.n	27d8e <_lv_blend_fill+0x1d2>
                if(mask_tmp[x]) {
   27db0:	f816 300a 	ldrb.w	r3, [r6, sl]
   27db4:	b17b      	cbz	r3, 27dd6 <_lv_blend_fill+0x21a>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   27db6:	fb15 f303 	smulbb	r3, r5, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, color,
   27dba:	0a1b      	lsrs	r3, r3, #8
   27dbc:	9302      	str	r3, [sp, #8]
   27dbe:	9b06      	ldr	r3, [sp, #24]
   27dc0:	9300      	str	r3, [sp, #0]
   27dc2:	f8ad 4004 	strh.w	r4, [sp, #4]
   27dc6:	6947      	ldr	r7, [r0, #20]
   27dc8:	9905      	ldr	r1, [sp, #20]
   27dca:	9007      	str	r0, [sp, #28]
   27dcc:	fa0f f38a 	sxth.w	r3, sl
   27dd0:	465a      	mov	r2, fp
   27dd2:	47b8      	blx	r7
   27dd4:	9807      	ldr	r0, [sp, #28]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   27dd6:	f10a 0a01 	add.w	sl, sl, #1
   27dda:	e7e1      	b.n	27da0 <_lv_blend_fill+0x1e4>
                lv_color_fill(disp_buf_first, color, draw_area_w);
   27ddc:	4648      	mov	r0, r9
   27dde:	4642      	mov	r2, r8
   27de0:	4621      	mov	r1, r4
   27de2:	f002 fb57 	bl	2a494 <lv_color_fill>
                disp_buf_first += disp_w;
   27de6:	9b06      	ldr	r3, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   27de8:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
   27dea:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
   27dec:	9b07      	ldr	r3, [sp, #28]
   27dee:	42bb      	cmp	r3, r7
   27df0:	dcf4      	bgt.n	27ddc <_lv_blend_fill+0x220>
   27df2:	e7a5      	b.n	27d40 <_lv_blend_fill+0x184>
                    if(last_dest_color.full != disp_buf_first[x].full) {
   27df4:	880a      	ldrh	r2, [r1, #0]
   27df6:	fa1f fe8a 	uxth.w	lr, sl
   27dfa:	4596      	cmp	lr, r2
   27dfc:	d027      	beq.n	27e4e <_lv_blend_fill+0x292>
   27dfe:	7848      	ldrb	r0, [r1, #1]
   27e00:	9b05      	ldr	r3, [sp, #20]
   27e02:	08c0      	lsrs	r0, r0, #3
   27e04:	fb00 3005 	mla	r0, r0, r5, r3
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e08:	9b08      	ldr	r3, [sp, #32]
   27e0a:	f3c2 1645 	ubfx	r6, r2, #5, #6
   27e0e:	fb06 3605 	mla	r6, r6, r5, r3
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e12:	780b      	ldrb	r3, [r1, #0]
   27e14:	f003 031f 	and.w	r3, r3, #31
   27e18:	fb03 b305 	mla	r3, r3, r5, fp
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e1c:	fb0c f000 	mul.w	r0, ip, r0
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e20:	fb0c f606 	mul.w	r6, ip, r6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e24:	fb0c f303 	mul.w	r3, ip, r3
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e28:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e2c:	f506 0680 	add.w	r6, r6, #4194304	; 0x400000
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e30:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e34:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e38:	f506 4681 	add.w	r6, r6, #16512	; 0x4080
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e3c:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
                        last_dest_color = disp_buf_first[x];
   27e40:	4692      	mov	sl, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e42:	f3c0 50c4 	ubfx	r0, r0, #23, #5
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e46:	f3c6 56c5 	ubfx	r6, r6, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   27e4a:	f3c3 53c4 	ubfx	r3, r3, #23, #5
#endif
                        {
                            last_res_color = lv_color_mix_premult(color_premult, disp_buf_first[x], opa_inv);
                        }
                    }
                    disp_buf_first[x] = last_res_color;
   27e4e:	780a      	ldrb	r2, [r1, #0]
   27e50:	f363 0204 	bfi	r2, r3, #0, #5
   27e54:	700a      	strb	r2, [r1, #0]
   27e56:	880a      	ldrh	r2, [r1, #0]
   27e58:	f366 124a 	bfi	r2, r6, #5, #6
   27e5c:	800a      	strh	r2, [r1, #0]
   27e5e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   27e62:	f360 02c7 	bfi	r2, r0, #3, #5
   27e66:	704a      	strb	r2, [r1, #1]
                for(x = 0; x < draw_area_w; x++) {
   27e68:	3401      	adds	r4, #1
   27e6a:	3102      	adds	r1, #2
   27e6c:	45a0      	cmp	r8, r4
   27e6e:	dcc1      	bgt.n	27df4 <_lv_blend_fill+0x238>
                }
                disp_buf_first += disp_w;
   27e70:	9a06      	ldr	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   27e72:	3701      	adds	r7, #1
                disp_buf_first += disp_w;
   27e74:	4491      	add	r9, r2
            for(y = 0; y < draw_area_h; y++) {
   27e76:	e72f      	b.n	27cd8 <_lv_blend_fill+0x11c>
        last_res_color.full = disp_buf_first[0].full;

        int32_t x_end4 = draw_area_w - 4;

        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   27e78:	2dfd      	cmp	r5, #253	; 0xfd
   27e7a:	f200 8089 	bhi.w	27f90 <_lv_blend_fill+0x3d4>
        last_dest_color.full = disp_buf_first[0].full;
   27e7e:	9a05      	ldr	r2, [sp, #20]
   27e80:	f832 c013 	ldrh.w	ip, [r2, r3, lsl #1]
                mask += draw_area_w;
            }
        }
        /*Handle opa and mask values too*/
        else {
            lv_opa_t opa_tmp = LV_OPA_TRANSP;
   27e84:	463a      	mov	r2, r7
        last_res_color.full = disp_buf_first[0].full;
   27e86:	4660      	mov	r0, ip
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27e88:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   27e8c:	459a      	cmp	sl, r3
   27e8e:	f73f af57 	bgt.w	27d40 <_lv_blend_fill+0x184>
                const lv_opa_t * mask_tmp_x = mask;
                for(x = 0; x < draw_area_w; x++) {
   27e92:	f04f 0b00 	mov.w	fp, #0
   27e96:	e09e      	b.n	27fd6 <_lv_blend_fill+0x41a>
                    FILL_NORMAL_MASK_PX(x, color)
   27e98:	f815 2b01 	ldrb.w	r2, [r5], #1
   27e9c:	b11a      	cbz	r2, 27ea6 <_lv_blend_fill+0x2ea>
   27e9e:	2aff      	cmp	r2, #255	; 0xff
   27ea0:	d11d      	bne.n	27ede <_lv_blend_fill+0x322>
   27ea2:	f829 401a 	strh.w	r4, [r9, sl, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   27ea6:	f10a 0a01 	add.w	sl, sl, #1
   27eaa:	45d0      	cmp	r8, sl
   27eac:	46ab      	mov	fp, r5
   27eae:	dd01      	ble.n	27eb4 <_lv_blend_fill+0x2f8>
   27eb0:	07ab      	lsls	r3, r5, #30
   27eb2:	d1f1      	bne.n	27e98 <_lv_blend_fill+0x2dc>
   27eb4:	eb09 054a 	add.w	r5, r9, sl, lsl #1
                for(; x <= x_end4; x += 4) {
   27eb8:	9b05      	ldr	r3, [sp, #20]
   27eba:	4553      	cmp	r3, sl
   27ebc:	da17      	bge.n	27eee <_lv_blend_fill+0x332>
   27ebe:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
                for(; x < draw_area_w ; x++) {
   27ec2:	45d0      	cmp	r8, sl
   27ec4:	dc52      	bgt.n	27f6c <_lv_blend_fill+0x3b0>
                disp_buf_first += disp_w;
   27ec6:	9b06      	ldr	r3, [sp, #24]
                mask += draw_area_w;
   27ec8:	4446      	add	r6, r8
                disp_buf_first += disp_w;
   27eca:	4499      	add	r9, r3
            for(y = 0; y < draw_area_h; y++) {
   27ecc:	3701      	adds	r7, #1
   27ece:	9b07      	ldr	r3, [sp, #28]
   27ed0:	42bb      	cmp	r3, r7
   27ed2:	f77f af35 	ble.w	27d40 <_lv_blend_fill+0x184>
   27ed6:	4635      	mov	r5, r6
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   27ed8:	f04f 0a00 	mov.w	sl, #0
   27edc:	e7e5      	b.n	27eaa <_lv_blend_fill+0x2ee>
                    FILL_NORMAL_MASK_PX(x, color)
   27ede:	f839 101a 	ldrh.w	r1, [r9, sl, lsl #1]
   27ee2:	4620      	mov	r0, r4
   27ee4:	f7ff fe37 	bl	27b56 <lv_color_mix>
   27ee8:	f829 001a 	strh.w	r0, [r9, sl, lsl #1]
   27eec:	e7db      	b.n	27ea6 <_lv_blend_fill+0x2ea>
                    if(*mask32) {
   27eee:	f8db 2000 	ldr.w	r2, [fp]
   27ef2:	b12a      	cbz	r2, 27f00 <_lv_blend_fill+0x344>
                        if((*mask32) == 0xFFFFFFFF) {
   27ef4:	3201      	adds	r2, #1
   27ef6:	d109      	bne.n	27f0c <_lv_blend_fill+0x350>
                            disp_buf_first[x] = color;
   27ef8:	802c      	strh	r4, [r5, #0]
                            disp_buf_first[x + 1] = color;
   27efa:	806c      	strh	r4, [r5, #2]
                            disp_buf_first[x + 2] = color;
   27efc:	80ac      	strh	r4, [r5, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   27efe:	80ec      	strh	r4, [r5, #6]
                    mask32++;
   27f00:	f10b 0b04 	add.w	fp, fp, #4
                for(; x <= x_end4; x += 4) {
   27f04:	f10a 0a04 	add.w	sl, sl, #4
   27f08:	3508      	adds	r5, #8
   27f0a:	e7d5      	b.n	27eb8 <_lv_blend_fill+0x2fc>
                            FILL_NORMAL_MASK_PX(x, color)
   27f0c:	f89b 2000 	ldrb.w	r2, [fp]
   27f10:	b112      	cbz	r2, 27f18 <_lv_blend_fill+0x35c>
   27f12:	2aff      	cmp	r2, #255	; 0xff
   27f14:	d118      	bne.n	27f48 <_lv_blend_fill+0x38c>
   27f16:	802c      	strh	r4, [r5, #0]
                            FILL_NORMAL_MASK_PX(x + 1, color)
   27f18:	f89b 2001 	ldrb.w	r2, [fp, #1]
   27f1c:	b112      	cbz	r2, 27f24 <_lv_blend_fill+0x368>
   27f1e:	2aff      	cmp	r2, #255	; 0xff
   27f20:	d118      	bne.n	27f54 <_lv_blend_fill+0x398>
   27f22:	806c      	strh	r4, [r5, #2]
                            FILL_NORMAL_MASK_PX(x + 2, color)
   27f24:	f89b 2002 	ldrb.w	r2, [fp, #2]
   27f28:	b112      	cbz	r2, 27f30 <_lv_blend_fill+0x374>
   27f2a:	2aff      	cmp	r2, #255	; 0xff
   27f2c:	d118      	bne.n	27f60 <_lv_blend_fill+0x3a4>
   27f2e:	80ac      	strh	r4, [r5, #4]
                            FILL_NORMAL_MASK_PX(x + 3, color)
   27f30:	f89b 2003 	ldrb.w	r2, [fp, #3]
   27f34:	2a00      	cmp	r2, #0
   27f36:	d0e3      	beq.n	27f00 <_lv_blend_fill+0x344>
   27f38:	2aff      	cmp	r2, #255	; 0xff
   27f3a:	d0e0      	beq.n	27efe <_lv_blend_fill+0x342>
   27f3c:	88e9      	ldrh	r1, [r5, #6]
   27f3e:	4620      	mov	r0, r4
   27f40:	f7ff fe09 	bl	27b56 <lv_color_mix>
   27f44:	80e8      	strh	r0, [r5, #6]
   27f46:	e7db      	b.n	27f00 <_lv_blend_fill+0x344>
                            FILL_NORMAL_MASK_PX(x, color)
   27f48:	8829      	ldrh	r1, [r5, #0]
   27f4a:	4620      	mov	r0, r4
   27f4c:	f7ff fe03 	bl	27b56 <lv_color_mix>
   27f50:	8028      	strh	r0, [r5, #0]
   27f52:	e7e1      	b.n	27f18 <_lv_blend_fill+0x35c>
                            FILL_NORMAL_MASK_PX(x + 1, color)
   27f54:	8869      	ldrh	r1, [r5, #2]
   27f56:	4620      	mov	r0, r4
   27f58:	f7ff fdfd 	bl	27b56 <lv_color_mix>
   27f5c:	8068      	strh	r0, [r5, #2]
   27f5e:	e7e1      	b.n	27f24 <_lv_blend_fill+0x368>
                            FILL_NORMAL_MASK_PX(x + 2, color)
   27f60:	88a9      	ldrh	r1, [r5, #4]
   27f62:	4620      	mov	r0, r4
   27f64:	f7ff fdf7 	bl	27b56 <lv_color_mix>
   27f68:	80a8      	strh	r0, [r5, #4]
   27f6a:	e7e1      	b.n	27f30 <_lv_blend_fill+0x374>
                    FILL_NORMAL_MASK_PX(x, color)
   27f6c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   27f70:	b11a      	cbz	r2, 27f7a <_lv_blend_fill+0x3be>
   27f72:	2aff      	cmp	r2, #255	; 0xff
   27f74:	d104      	bne.n	27f80 <_lv_blend_fill+0x3c4>
   27f76:	f829 401a 	strh.w	r4, [r9, sl, lsl #1]
                for(; x < draw_area_w ; x++) {
   27f7a:	f10a 0a01 	add.w	sl, sl, #1
   27f7e:	e7a0      	b.n	27ec2 <_lv_blend_fill+0x306>
                    FILL_NORMAL_MASK_PX(x, color)
   27f80:	f839 101a 	ldrh.w	r1, [r9, sl, lsl #1]
   27f84:	4620      	mov	r0, r4
   27f86:	f7ff fde6 	bl	27b56 <lv_color_mix>
   27f8a:	f829 001a 	strh.w	r0, [r9, sl, lsl #1]
   27f8e:	e7f4      	b.n	27f7a <_lv_blend_fill+0x3be>
        int32_t x_end4 = draw_area_w - 4;
   27f90:	f1a8 0304 	sub.w	r3, r8, #4
   27f94:	9305      	str	r3, [sp, #20]
   27f96:	e79a      	b.n	27ece <_lv_blend_fill+0x312>
                    if(*mask_tmp_x) {
   27f98:	f816 300b 	ldrb.w	r3, [r6, fp]
   27f9c:	b1cb      	cbz	r3, 27fd2 <_lv_blend_fill+0x416>
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   27f9e:	42bb      	cmp	r3, r7
   27fa0:	eb09 014b 	add.w	r1, r9, fp, lsl #1
   27fa4:	d00f      	beq.n	27fc6 <_lv_blend_fill+0x40a>
   27fa6:	2bff      	cmp	r3, #255	; 0xff
                                                                   (uint32_t)((uint32_t)(*mask_tmp_x) * opa) >> 8;
   27fa8:	bf1a      	itte	ne
   27faa:	fb13 f205 	smulbbne	r2, r3, r5
                        if(*mask_tmp_x != last_mask) opa_tmp = *mask_tmp_x == LV_OPA_COVER ? opa :
   27fae:	0a12      	lsrne	r2, r2, #8
   27fb0:	462a      	moveq	r2, r5
                            }
                            else
#endif
                            {
                                if(opa_tmp == LV_OPA_COVER) last_res_color = color;
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
   27fb2:	8809      	ldrh	r1, [r1, #0]
   27fb4:	4620      	mov	r0, r4
   27fb6:	f7ff fdce 	bl	27b56 <lv_color_mix>
                            }
                            last_mask = *mask_tmp_x;
   27fba:	f816 700b 	ldrb.w	r7, [r6, fp]
                            last_dest_color.full = disp_buf_first[x].full;
   27fbe:	f839 c01b 	ldrh.w	ip, [r9, fp, lsl #1]
                                else last_res_color = lv_color_mix(color, disp_buf_first[x], opa_tmp);
   27fc2:	b280      	uxth	r0, r0
                            last_dest_color.full = disp_buf_first[x].full;
   27fc4:	e003      	b.n	27fce <_lv_blend_fill+0x412>
                        if(*mask_tmp_x != last_mask || last_dest_color.full != disp_buf_first[x].full) {
   27fc6:	f839 301b 	ldrh.w	r3, [r9, fp, lsl #1]
   27fca:	4563      	cmp	r3, ip
   27fcc:	d1f1      	bne.n	27fb2 <_lv_blend_fill+0x3f6>
                        }
                        disp_buf_first[x] = last_res_color;
   27fce:	f829 001b 	strh.w	r0, [r9, fp, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
   27fd2:	f10b 0b01 	add.w	fp, fp, #1
   27fd6:	45d8      	cmp	r8, fp
   27fd8:	dcde      	bgt.n	27f98 <_lv_blend_fill+0x3dc>
                    }
                    mask_tmp_x++;
                }
                disp_buf_first += disp_w;
   27fda:	9b06      	ldr	r3, [sp, #24]
                mask += draw_area_w;
   27fdc:	4446      	add	r6, r8
                disp_buf_first += disp_w;
   27fde:	4499      	add	r9, r3
            for(y = draw_area->y1; y <= draw_area->y2; y++) {
   27fe0:	f10a 0a01 	add.w	sl, sl, #1
   27fe4:	e750      	b.n	27e88 <_lv_blend_fill+0x2cc>

00027fe6 <_lv_blend_map>:
{
   27fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fea:	b08d      	sub	sp, #52	; 0x34
   27fec:	460f      	mov	r7, r1
   27fee:	9304      	str	r3, [sp, #16]
   27ff0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   27ff4:	9308      	str	r3, [sp, #32]
   27ff6:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
   27ffa:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
   27ffe:	9209      	str	r2, [sp, #36]	; 0x24
    if(opa < LV_OPA_MIN) return;
   28000:	2b01      	cmp	r3, #1
{
   28002:	9305      	str	r3, [sp, #20]
    if(opa < LV_OPA_MIN) return;
   28004:	f240 80d0 	bls.w	281a8 <_lv_blend_map+0x1c2>
    if(mask_res == LV_DRAW_MASK_RES_TRANSP) return;
   28008:	9b08      	ldr	r3, [sp, #32]
   2800a:	2b00      	cmp	r3, #0
   2800c:	f000 80cc 	beq.w	281a8 <_lv_blend_map+0x1c2>
    is_common = _lv_area_intersect(&draw_area, clip_area, map_area);
   28010:	460a      	mov	r2, r1
   28012:	4601      	mov	r1, r0
   28014:	a80a      	add	r0, sp, #40	; 0x28
   28016:	f002 f80c 	bl	2a032 <_lv_area_intersect>
    if(!is_common) return;
   2801a:	2800      	cmp	r0, #0
   2801c:	f000 80c4 	beq.w	281a8 <_lv_blend_map+0x1c2>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   28020:	f7f2 ffa2 	bl	1af68 <_lv_refr_get_disp_refreshing>
   28024:	4604      	mov	r4, r0
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   28026:	f001 ff99 	bl	29f5c <lv_disp_get_buf>
    lv_color_t * disp_buf = vdb->buf_act;
   2802a:	6883      	ldr	r3, [r0, #8]
   2802c:	9307      	str	r3, [sp, #28]
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   2802e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   28030:	4681      	mov	r9, r0
    if(disp->driver.gpu_wait_cb) disp->driver.gpu_wait_cb(&disp->driver);
   28032:	b10b      	cbz	r3, 28038 <_lv_blend_map+0x52>
   28034:	4620      	mov	r0, r4
   28036:	4798      	blx	r3
    draw_area.x1 -= disp_area->x1;
   28038:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
   2803c:	f9b9 0010 	ldrsh.w	r0, [r9, #16]
    draw_area.y1 -= disp_area->y1;
   28040:	f9bd b02a 	ldrsh.w	fp, [sp, #42]	; 0x2a
    draw_area.y2 -= disp_area->y1;
   28044:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
    draw_area.x2 -= disp_area->x1;
   28048:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
    draw_area.x1 -= disp_area->x1;
   2804c:	1a13      	subs	r3, r2, r0
   2804e:	fa0f fc83 	sxth.w	ip, r3
    draw_area.y1 -= disp_area->y1;
   28052:	f9b9 3012 	ldrsh.w	r3, [r9, #18]
    draw_area.x1 -= disp_area->x1;
   28056:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
    draw_area.y1 -= disp_area->y1;
   2805a:	ebab 0e03 	sub.w	lr, fp, r3
    draw_area.y2 -= disp_area->y1;
   2805e:	1acb      	subs	r3, r1, r3
   28060:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    if(mask)
   28064:	9b04      	ldr	r3, [sp, #16]
    draw_area.y1 -= disp_area->y1;
   28066:	fa0f fe8e 	sxth.w	lr, lr
    draw_area.x2 -= disp_area->x1;
   2806a:	eba8 0000 	sub.w	r0, r8, r0
    draw_area.y1 -= disp_area->y1;
   2806e:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
    draw_area.x2 -= disp_area->x1;
   28072:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    if(mask)
   28076:	2b00      	cmp	r3, #0
   28078:	d152      	bne.n	28120 <_lv_blend_map+0x13a>
    if(disp->driver.set_px_cb) {
   2807a:	6963      	ldr	r3, [r4, #20]
   2807c:	2b00      	cmp	r3, #0
   2807e:	d165      	bne.n	2814c <_lv_blend_map+0x166>
    else if(mode == LV_BLEND_MODE_NORMAL) {
   28080:	2e00      	cmp	r6, #0
   28082:	f040 8091 	bne.w	281a8 <_lv_blend_map+0x1c2>
   28086:	f8b9 a014 	ldrh.w	sl, [r9, #20]
   2808a:	f9b9 3010 	ldrsh.w	r3, [r9, #16]

    /*Create a temp. disp_buf which always point to first pixel to draw*/
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;

    /*Create a temp. map_buf which always point to first pixel to draw from the map*/
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   2808e:	f9b9 4012 	ldrsh.w	r4, [r9, #18]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28092:	f1cb 0b01 	rsb	fp, fp, #1
   28096:	448b      	add	fp, r1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   28098:	f1c2 0201 	rsb	r2, r2, #1
   2809c:	f10a 0a01 	add.w	sl, sl, #1
   280a0:	ebaa 0a03 	sub.w	sl, sl, r3
   280a4:	4490      	add	r8, r2
    int32_t draw_area_h = lv_area_get_height(draw_area);
   280a6:	fa0f f28b 	sxth.w	r2, fp
   280aa:	fa0f fa8a 	sxth.w	sl, sl
   280ae:	9206      	str	r2, [sp, #24]
    lv_color_t * disp_buf_first = disp_buf + disp_w * draw_area->y1 + draw_area->x1;
   280b0:	9a07      	ldr	r2, [sp, #28]
   280b2:	f8b7 b004 	ldrh.w	fp, [r7, #4]
   280b6:	f9b7 1000 	ldrsh.w	r1, [r7]
   280ba:	fb0a c50e 	mla	r5, sl, lr, ip
   280be:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   280c2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
   280c6:	f10b 0b01 	add.w	fp, fp, #1
   280ca:	ebab 0b01 	sub.w	fp, fp, r1
   280ce:	1aa4      	subs	r4, r4, r2
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   280d0:	1a5b      	subs	r3, r3, r1
   280d2:	fa0f fb8b 	sxth.w	fp, fp
   280d6:	4463      	add	r3, ip
    const lv_color_t * map_buf_first = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   280d8:	4474      	add	r4, lr
    map_buf_first += (draw_area->x1 - (map_area->x1 - disp_area->x1));
   280da:	fb0b 3404 	mla	r4, fp, r4, r3
   280de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   280e0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
   280e4:	ea4f 034a 	mov.w	r3, sl, lsl #1
   280e8:	9307      	str	r3, [sp, #28]

    int32_t x;
    int32_t y;

    /*Simple fill (maybe with opacity), no masking*/
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   280ea:	9b08      	ldr	r3, [sp, #32]
   280ec:	2b01      	cmp	r3, #1
   280ee:	fa0f f888 	sxth.w	r8, r8
            }
            return;
        }
#endif

        if(opa > LV_OPA_MAX) {
   280f2:	9b05      	ldr	r3, [sp, #20]
   280f4:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   280f8:	f040 80c0 	bne.w	2827c <_lv_blend_map+0x296>
        if(opa > LV_OPA_MAX) {
   280fc:	2bfd      	cmp	r3, #253	; 0xfd
   280fe:	f240 80b8 	bls.w	28272 <_lv_blend_map+0x28c>
            }
#endif

            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
   28102:	ea4f 0848 	mov.w	r8, r8, lsl #1
            for(y = 0; y < draw_area_h; y++) {
   28106:	9b06      	ldr	r3, [sp, #24]
   28108:	42b3      	cmp	r3, r6
   2810a:	dd4d      	ble.n	281a8 <_lv_blend_map+0x1c2>
   2810c:	4621      	mov	r1, r4
   2810e:	4628      	mov	r0, r5
   28110:	4642      	mov	r2, r8
   28112:	f003 fb22 	bl	2b75a <memcpy>
                disp_buf_first += disp_w;
   28116:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
   28118:	445c      	add	r4, fp
                disp_buf_first += disp_w;
   2811a:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
   2811c:	3601      	adds	r6, #1
   2811e:	e7f2      	b.n	28106 <_lv_blend_map+0x120>
   28120:	9804      	ldr	r0, [sp, #16]
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   28122:	9d04      	ldr	r5, [sp, #16]
   28124:	f108 0301 	add.w	r3, r8, #1
   28128:	1a9b      	subs	r3, r3, r2
        int32_t mask_w = lv_area_get_width(&draw_area);
   2812a:	b21b      	sxth	r3, r3
        for(i = 0; i < mask_w; i++)  mask[i] = mask[i] > 128 ? LV_OPA_COVER : LV_OPA_TRANSP;
   2812c:	3801      	subs	r0, #1
   2812e:	f1c5 0a01 	rsb	sl, r5, #1
   28132:	eb0a 0500 	add.w	r5, sl, r0
   28136:	42ab      	cmp	r3, r5
   28138:	dd9f      	ble.n	2807a <_lv_blend_map+0x94>
   2813a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
   2813e:	2d80      	cmp	r5, #128	; 0x80
   28140:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   28144:	bf98      	it	ls
   28146:	2500      	movls	r5, #0
   28148:	7005      	strb	r5, [r0, #0]
   2814a:	e7f2      	b.n	28132 <_lv_blend_map+0x14c>
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   2814c:	f7f2 ff0c 	bl	1af68 <_lv_refr_get_disp_refreshing>
   28150:	88bd      	ldrh	r5, [r7, #4]
   28152:	f9b7 c000 	ldrsh.w	ip, [r7]
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   28156:	f9b7 4002 	ldrsh.w	r4, [r7, #2]
   2815a:	f8b9 2014 	ldrh.w	r2, [r9, #20]
   2815e:	f9bd 602a 	ldrsh.w	r6, [sp, #42]	; 0x2a
   28162:	f9b9 3010 	ldrsh.w	r3, [r9, #16]
   28166:	f9b9 7012 	ldrsh.w	r7, [r9, #18]
   2816a:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   2816e:	3501      	adds	r5, #1
   28170:	3201      	adds	r2, #1
   28172:	eba5 050c 	sub.w	r5, r5, ip
   28176:	1b34      	subs	r4, r6, r4
   28178:	1ad2      	subs	r2, r2, r3
   2817a:	b22d      	sxth	r5, r5
    map_buf_tmp -= draw_area->x1;
   2817c:	eba3 030c 	sub.w	r3, r3, ip
    const lv_color_t * map_buf_tmp = map_buf + map_w * (draw_area->y1 - (map_area->y1 - disp_area->y1));
   28180:	443c      	add	r4, r7
    map_buf_tmp -= draw_area->x1;
   28182:	fb05 3404 	mla	r4, r5, r4, r3
   28186:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28188:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   2818c:	9b08      	ldr	r3, [sp, #32]
   2818e:	2b01      	cmp	r3, #1
   28190:	ea4f 0345 	mov.w	r3, r5, lsl #1
    lv_disp_t * disp = _lv_refr_get_disp_refreshing();
   28194:	4683      	mov	fp, r0
   28196:	b212      	sxth	r2, r2
    if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) {
   28198:	f1c1 0a00 	rsb	sl, r1, #0
   2819c:	9306      	str	r3, [sp, #24]
   2819e:	d124      	bne.n	281ea <_lv_blend_map+0x204>
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   281a0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   281a4:	429e      	cmp	r6, r3
   281a6:	dd02      	ble.n	281ae <_lv_blend_map+0x1c8>
}
   281a8:	b00d      	add	sp, #52	; 0x34
   281aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   281ae:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   281b2:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   281b4:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   281b8:	4598      	cmp	r8, r3
   281ba:	dd03      	ble.n	281c4 <_lv_blend_map+0x1de>
            map_buf_tmp += map_w;
   281bc:	9b06      	ldr	r3, [sp, #24]
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   281be:	3601      	adds	r6, #1
            map_buf_tmp += map_w;
   281c0:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   281c2:	e7ed      	b.n	281a0 <_lv_blend_map+0x1ba>
                disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x], opa);
   281c4:	9b05      	ldr	r3, [sp, #20]
   281c6:	9302      	str	r3, [sp, #8]
   281c8:	f834 3018 	ldrh.w	r3, [r4, r8, lsl #1]
   281cc:	f8ad 3004 	strh.w	r3, [sp, #4]
   281d0:	9700      	str	r7, [sp, #0]
   281d2:	fa0f f388 	sxth.w	r3, r8
   281d6:	9907      	ldr	r1, [sp, #28]
   281d8:	f8db 5014 	ldr.w	r5, [fp, #20]
   281dc:	9204      	str	r2, [sp, #16]
   281de:	4658      	mov	r0, fp
   281e0:	47a8      	blx	r5
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   281e2:	f108 0801 	add.w	r8, r8, #1
   281e6:	9a04      	ldr	r2, [sp, #16]
   281e8:	e7e4      	b.n	281b4 <_lv_blend_map+0x1ce>
   281ea:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
        const lv_opa_t * mask_tmp = mask - draw_area->x1;
   281ee:	9b04      	ldr	r3, [sp, #16]
   281f0:	f108 0801 	add.w	r8, r8, #1
   281f4:	4453      	add	r3, sl
   281f6:	eba8 0801 	sub.w	r8, r8, r1
   281fa:	469a      	mov	sl, r3
            mask_tmp += draw_area_w;
   281fc:	fa0f f888 	sxth.w	r8, r8
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   28200:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   28204:	429e      	cmp	r6, r3
   28206:	dccf      	bgt.n	281a8 <_lv_blend_map+0x1c2>
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   28208:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   2820c:	b237      	sxth	r7, r6
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2820e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   28212:	4599      	cmp	r9, r3
   28214:	dd04      	ble.n	28220 <_lv_blend_map+0x23a>
            map_buf_tmp += map_w;
   28216:	9b06      	ldr	r3, [sp, #24]
            mask_tmp += draw_area_w;
   28218:	44c2      	add	sl, r8
            map_buf_tmp += map_w;
   2821a:	441c      	add	r4, r3
        for(y = draw_area->y1; y <= draw_area->y2; y++) {
   2821c:	3601      	adds	r6, #1
   2821e:	e7ef      	b.n	28200 <_lv_blend_map+0x21a>
                if(mask_tmp[x]) {
   28220:	f81a 3009 	ldrb.w	r3, [sl, r9]
   28224:	b193      	cbz	r3, 2824c <_lv_blend_map+0x266>
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   28226:	9905      	ldr	r1, [sp, #20]
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   28228:	9204      	str	r2, [sp, #16]
                                           (uint32_t)((uint32_t)opa * mask_tmp[x]) >> 8);
   2822a:	fb11 f303 	smulbb	r3, r1, r3
                    disp->driver.set_px_cb(&disp->driver, (void *)disp_buf, disp_w, x, y, map_buf_tmp[x],
   2822e:	0a1b      	lsrs	r3, r3, #8
   28230:	9302      	str	r3, [sp, #8]
   28232:	f834 3019 	ldrh.w	r3, [r4, r9, lsl #1]
   28236:	f8ad 3004 	strh.w	r3, [sp, #4]
   2823a:	9700      	str	r7, [sp, #0]
   2823c:	9907      	ldr	r1, [sp, #28]
   2823e:	f8db 5014 	ldr.w	r5, [fp, #20]
   28242:	fa0f f389 	sxth.w	r3, r9
   28246:	4658      	mov	r0, fp
   28248:	47a8      	blx	r5
   2824a:	9a04      	ldr	r2, [sp, #16]
            for(x = draw_area->x1; x <= draw_area->x2; x++) {
   2824c:	f109 0901 	add.w	r9, r9, #1
   28250:	e7dd      	b.n	2820e <_lv_blend_map+0x228>
                                                &disp_buf_first[x].ch.alpha);
                    }
                    else
#endif
                    {
                        disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa);
   28252:	f835 1017 	ldrh.w	r1, [r5, r7, lsl #1]
   28256:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
   2825a:	9a05      	ldr	r2, [sp, #20]
   2825c:	f7ff fc7b 	bl	27b56 <lv_color_mix>
   28260:	f825 0017 	strh.w	r0, [r5, r7, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
   28264:	3701      	adds	r7, #1
   28266:	45b8      	cmp	r8, r7
   28268:	dcf3      	bgt.n	28252 <_lv_blend_map+0x26c>
                    }
                }
                disp_buf_first += disp_w;
   2826a:	9b07      	ldr	r3, [sp, #28]
                map_buf_first += map_w;
   2826c:	445c      	add	r4, fp
                disp_buf_first += disp_w;
   2826e:	441d      	add	r5, r3
            for(y = 0; y < draw_area_h; y++) {
   28270:	3601      	adds	r6, #1
   28272:	9b06      	ldr	r3, [sp, #24]
   28274:	42b3      	cmp	r3, r6
   28276:	dd97      	ble.n	281a8 <_lv_blend_map+0x1c2>
                for(x = 0; x < draw_area_w; x++) {
   28278:	2700      	movs	r7, #0
   2827a:	e7f4      	b.n	28266 <_lv_blend_map+0x280>
        }
    }
    /*Masked*/
    else {
        /*Only the mask matters*/
        if(opa > LV_OPA_MAX) {
   2827c:	2bfd      	cmp	r3, #253	; 0xfd
   2827e:	f240 80bb 	bls.w	283f8 <_lv_blend_map+0x412>
            /*Go to the first pixel of the row */

            int32_t x_end4 = draw_area_w - 4;
   28282:	f1a8 0304 	sub.w	r3, r8, #4
   28286:	9308      	str	r3, [sp, #32]

            for(y = 0; y < draw_area_h; y++) {
   28288:	9605      	str	r6, [sp, #20]
   2828a:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
   2828e:	4293      	cmp	r3, r2
   28290:	dd8a      	ble.n	281a8 <_lv_blend_map+0x1c2>
   28292:	9f04      	ldr	r7, [sp, #16]
#if 0
                for(x = 0; x < draw_area_w; x++) {
                    MAP_NORMAL_MASK_PX(x);
                }
#else
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   28294:	2600      	movs	r6, #0
   28296:	e009      	b.n	282ac <_lv_blend_map+0x2c6>
#if LV_COLOR_SCREEN_TRANSP
                    MAP_NORMAL_MASK_PX_SCR_TRANSP(x)
#else
                    MAP_NORMAL_MASK_PX(x)
   28298:	f817 2b01 	ldrb.w	r2, [r7], #1
   2829c:	b12a      	cbz	r2, 282aa <_lv_blend_map+0x2c4>
   2829e:	2aff      	cmp	r2, #255	; 0xff
   282a0:	d11e      	bne.n	282e0 <_lv_blend_map+0x2fa>
   282a2:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
   282a6:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(x = 0; x < draw_area_w && ((lv_uintptr_t)mask_tmp_x & 0x3); x++) {
   282aa:	3601      	adds	r6, #1
   282ac:	45b0      	cmp	r8, r6
   282ae:	46ba      	mov	sl, r7
   282b0:	dd01      	ble.n	282b6 <_lv_blend_map+0x2d0>
   282b2:	07bb      	lsls	r3, r7, #30
   282b4:	d1f0      	bne.n	28298 <_lv_blend_map+0x2b2>
   282b6:	eb05 0746 	add.w	r7, r5, r6, lsl #1
   282ba:	eb04 0946 	add.w	r9, r4, r6, lsl #1
#endif
                }

                uint32_t * mask32 = (uint32_t *) mask_tmp_x;
                for(; x < x_end4; x += 4) {
   282be:	9b08      	ldr	r3, [sp, #32]
   282c0:	42b3      	cmp	r3, r6
   282c2:	dc16      	bgt.n	282f2 <_lv_blend_map+0x30c>
   282c4:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
                    }
                    mask32++;
                }

                mask_tmp_x = (const lv_opa_t *)mask32;
                for(; x < draw_area_w ; x++) {
   282c8:	45b0      	cmp	r8, r6
   282ca:	dc64      	bgt.n	28396 <_lv_blend_map+0x3b0>
#else
                    MAP_NORMAL_MASK_PX(x)
#endif
                }
#endif
                disp_buf_first += disp_w;
   282cc:	9b07      	ldr	r3, [sp, #28]
   282ce:	441d      	add	r5, r3
                mask += draw_area_w;
   282d0:	9b04      	ldr	r3, [sp, #16]
   282d2:	4443      	add	r3, r8
   282d4:	9304      	str	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
   282d6:	9b05      	ldr	r3, [sp, #20]
   282d8:	3301      	adds	r3, #1
                map_buf_first += map_w;
   282da:	445c      	add	r4, fp
            for(y = 0; y < draw_area_h; y++) {
   282dc:	9305      	str	r3, [sp, #20]
   282de:	e7d4      	b.n	2828a <_lv_blend_map+0x2a4>
                    MAP_NORMAL_MASK_PX(x)
   282e0:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
   282e4:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
   282e8:	f7ff fc35 	bl	27b56 <lv_color_mix>
   282ec:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
   282f0:	e7db      	b.n	282aa <_lv_blend_map+0x2c4>
                    if(*mask32) {
   282f2:	f8da 2000 	ldr.w	r2, [sl]
   282f6:	b16a      	cbz	r2, 28314 <_lv_blend_map+0x32e>
                        if((*mask32) == 0xFFFFFFFF) {
   282f8:	3201      	adds	r2, #1
   282fa:	d112      	bne.n	28322 <_lv_blend_map+0x33c>
                            disp_buf_first[x] = map_buf_first[x];
   282fc:	f8b9 2000 	ldrh.w	r2, [r9]
   28300:	803a      	strh	r2, [r7, #0]
                            disp_buf_first[x + 1] = map_buf_first[x + 1];
   28302:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   28306:	807a      	strh	r2, [r7, #2]
                            disp_buf_first[x + 2] = map_buf_first[x + 2];
   28308:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   2830c:	80ba      	strh	r2, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
   2830e:	f8b9 2006 	ldrh.w	r2, [r9, #6]
   28312:	80fa      	strh	r2, [r7, #6]
                    mask32++;
   28314:	f10a 0a04 	add.w	sl, sl, #4
                for(; x < x_end4; x += 4) {
   28318:	3604      	adds	r6, #4
   2831a:	3708      	adds	r7, #8
   2831c:	f109 0908 	add.w	r9, r9, #8
   28320:	e7cd      	b.n	282be <_lv_blend_map+0x2d8>
                            MAP_NORMAL_MASK_PX(x)
   28322:	f89a 2000 	ldrb.w	r2, [sl]
   28326:	b122      	cbz	r2, 28332 <_lv_blend_map+0x34c>
   28328:	2aff      	cmp	r2, #255	; 0xff
   2832a:	d11f      	bne.n	2836c <_lv_blend_map+0x386>
   2832c:	f8b9 2000 	ldrh.w	r2, [r9]
   28330:	803a      	strh	r2, [r7, #0]
                            MAP_NORMAL_MASK_PX(x + 1)
   28332:	f89a 2001 	ldrb.w	r2, [sl, #1]
   28336:	b122      	cbz	r2, 28342 <_lv_blend_map+0x35c>
   28338:	2aff      	cmp	r2, #255	; 0xff
   2833a:	d11e      	bne.n	2837a <_lv_blend_map+0x394>
   2833c:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   28340:	807a      	strh	r2, [r7, #2]
                            MAP_NORMAL_MASK_PX(x + 2)
   28342:	f89a 2002 	ldrb.w	r2, [sl, #2]
   28346:	b122      	cbz	r2, 28352 <_lv_blend_map+0x36c>
   28348:	2aff      	cmp	r2, #255	; 0xff
   2834a:	d11d      	bne.n	28388 <_lv_blend_map+0x3a2>
   2834c:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   28350:	80ba      	strh	r2, [r7, #4]
                            MAP_NORMAL_MASK_PX(x + 3)
   28352:	f89a 2003 	ldrb.w	r2, [sl, #3]
   28356:	2a00      	cmp	r2, #0
   28358:	d0dc      	beq.n	28314 <_lv_blend_map+0x32e>
   2835a:	2aff      	cmp	r2, #255	; 0xff
   2835c:	d0d7      	beq.n	2830e <_lv_blend_map+0x328>
   2835e:	88f9      	ldrh	r1, [r7, #6]
   28360:	f8b9 0006 	ldrh.w	r0, [r9, #6]
   28364:	f7ff fbf7 	bl	27b56 <lv_color_mix>
   28368:	80f8      	strh	r0, [r7, #6]
   2836a:	e7d3      	b.n	28314 <_lv_blend_map+0x32e>
                            MAP_NORMAL_MASK_PX(x)
   2836c:	8839      	ldrh	r1, [r7, #0]
   2836e:	f8b9 0000 	ldrh.w	r0, [r9]
   28372:	f7ff fbf0 	bl	27b56 <lv_color_mix>
   28376:	8038      	strh	r0, [r7, #0]
   28378:	e7db      	b.n	28332 <_lv_blend_map+0x34c>
                            MAP_NORMAL_MASK_PX(x + 1)
   2837a:	8879      	ldrh	r1, [r7, #2]
   2837c:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   28380:	f7ff fbe9 	bl	27b56 <lv_color_mix>
   28384:	8078      	strh	r0, [r7, #2]
   28386:	e7dc      	b.n	28342 <_lv_blend_map+0x35c>
                            MAP_NORMAL_MASK_PX(x + 2)
   28388:	88b9      	ldrh	r1, [r7, #4]
   2838a:	f8b9 0004 	ldrh.w	r0, [r9, #4]
   2838e:	f7ff fbe2 	bl	27b56 <lv_color_mix>
   28392:	80b8      	strh	r0, [r7, #4]
   28394:	e7dd      	b.n	28352 <_lv_blend_map+0x36c>
                    MAP_NORMAL_MASK_PX(x)
   28396:	f817 2f01 	ldrb.w	r2, [r7, #1]!
   2839a:	b12a      	cbz	r2, 283a8 <_lv_blend_map+0x3c2>
   2839c:	2aff      	cmp	r2, #255	; 0xff
   2839e:	d105      	bne.n	283ac <_lv_blend_map+0x3c6>
   283a0:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
   283a4:	f825 3016 	strh.w	r3, [r5, r6, lsl #1]
                for(; x < draw_area_w ; x++) {
   283a8:	3601      	adds	r6, #1
   283aa:	e78d      	b.n	282c8 <_lv_blend_map+0x2e2>
                    MAP_NORMAL_MASK_PX(x)
   283ac:	f835 1016 	ldrh.w	r1, [r5, r6, lsl #1]
   283b0:	f834 0016 	ldrh.w	r0, [r4, r6, lsl #1]
   283b4:	f7ff fbcf 	bl	27b56 <lv_color_mix>
   283b8:	f825 0016 	strh.w	r0, [r5, r6, lsl #1]
   283bc:	e7f4      	b.n	283a8 <_lv_blend_map+0x3c2>
        }
        /*Handle opa and mask values too*/
        else {
            for(y = 0; y < draw_area_h; y++) {
                for(x = 0; x < draw_area_w; x++) {
                    if(mask[x]) {
   283be:	9b04      	ldr	r3, [sp, #16]
   283c0:	5dda      	ldrb	r2, [r3, r7]
   283c2:	b17a      	cbz	r2, 283e4 <_lv_blend_map+0x3fe>
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
   283c4:	2afc      	cmp	r2, #252	; 0xfc
   283c6:	bf94      	ite	ls
   283c8:	9b05      	ldrls	r3, [sp, #20]
   283ca:	9a05      	ldrhi	r2, [sp, #20]
                                                    &disp_buf_first[x].ch.alpha);
                        }
                        else
#endif
                        {
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
   283cc:	f835 1017 	ldrh.w	r1, [r5, r7, lsl #1]
   283d0:	f834 0017 	ldrh.w	r0, [r4, r7, lsl #1]
                        lv_opa_t opa_tmp = mask[x] >= LV_OPA_MAX ? opa : ((opa * mask[x]) >> 8);
   283d4:	bf9c      	itt	ls
   283d6:	fb13 f202 	smulbbls	r2, r3, r2
   283da:	0a12      	lsrls	r2, r2, #8
                            disp_buf_first[x] = lv_color_mix(map_buf_first[x], disp_buf_first[x], opa_tmp);
   283dc:	f7ff fbbb 	bl	27b56 <lv_color_mix>
   283e0:	f825 0017 	strh.w	r0, [r5, r7, lsl #1]
                for(x = 0; x < draw_area_w; x++) {
   283e4:	3701      	adds	r7, #1
   283e6:	45b8      	cmp	r8, r7
   283e8:	dce9      	bgt.n	283be <_lv_blend_map+0x3d8>
                        }
                    }
                }
                disp_buf_first += disp_w;
   283ea:	9b07      	ldr	r3, [sp, #28]
   283ec:	441d      	add	r5, r3
                mask += draw_area_w;
   283ee:	9b04      	ldr	r3, [sp, #16]
   283f0:	4443      	add	r3, r8
   283f2:	9304      	str	r3, [sp, #16]
                map_buf_first += map_w;
   283f4:	445c      	add	r4, fp
            for(y = 0; y < draw_area_h; y++) {
   283f6:	3601      	adds	r6, #1
   283f8:	9b06      	ldr	r3, [sp, #24]
   283fa:	42b3      	cmp	r3, r6
   283fc:	f77f aed4 	ble.w	281a8 <_lv_blend_map+0x1c2>
                for(x = 0; x < draw_area_w; x++) {
   28400:	2700      	movs	r7, #0
   28402:	e7f0      	b.n	283e6 <_lv_blend_map+0x400>

00028404 <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   28404:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   28406:	2100      	movs	r1, #0
   28408:	f003 b9c8 	b.w	2b79c <memset>

0002840c <_lv_memset_ff>:
 * Wrapper for the standard memset with fixed 0xFF value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
   2840c:	460a      	mov	r2, r1
   2840e:	21ff      	movs	r1, #255	; 0xff
   28410:	f003 b9c4 	b.w	2b79c <memset>

00028414 <lv_area_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28414:	4603      	mov	r3, r0
   28416:	6808      	ldr	r0, [r1, #0]
   28418:	6849      	ldr	r1, [r1, #4]
   2841a:	c303      	stmia	r3!, {r0, r1}
}
   2841c:	4770      	bx	lr

0002841e <lv_draw_map>:
{
   2841e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28422:	b09b      	sub	sp, #108	; 0x6c
   28424:	461c      	mov	r4, r3
   28426:	f89d 3090 	ldrb.w	r3, [sp, #144]	; 0x90
   2842a:	930a      	str	r3, [sp, #40]	; 0x28
   2842c:	4606      	mov	r6, r0
   2842e:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   28432:	9307      	str	r3, [sp, #28]
    lv_area_copy(&draw_area, clip_area);
   28434:	a816      	add	r0, sp, #88	; 0x58
{
   28436:	468a      	mov	sl, r1
   28438:	4617      	mov	r7, r2
    lv_area_copy(&draw_area, clip_area);
   2843a:	f7ff ffeb 	bl	28414 <lv_area_copy>
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   2843e:	f7f2 fd93 	bl	1af68 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   28442:	f001 fd8b 	bl	29f5c <lv_disp_get_buf>
    draw_area.x1 -= disp_area->x1;
   28446:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2844a:	f9b0 5010 	ldrsh.w	r5, [r0, #16]
    draw_area.y1 -= disp_area->y1;
   2844e:	f8bd 105a 	ldrh.w	r1, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   28452:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
    draw_area.x1 -= disp_area->x1;
   28456:	1b5b      	subs	r3, r3, r5
   28458:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2845c:	4683      	mov	fp, r0
    draw_area.y2 -= disp_area->y1;
   2845e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
    draw_area.y1 -= disp_area->y1;
   28462:	f9b0 0012 	ldrsh.w	r0, [r0, #18]
    draw_area.x2 -= disp_area->x1;
   28466:	1b52      	subs	r2, r2, r5
    draw_area.y1 -= disp_area->y1;
   28468:	1a09      	subs	r1, r1, r0
    draw_area.y2 -= disp_area->y1;
   2846a:	1a1b      	subs	r3, r3, r0
    draw_area.y1 -= disp_area->y1;
   2846c:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   28470:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
   28474:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   28478:	f7f4 fa84 	bl	1c984 <lv_draw_mask_get_cnt>
    if(other_mask_cnt == 0 && draw_dsc->angle == 0 && draw_dsc->zoom == LV_IMG_ZOOM_NONE &&
   2847c:	9006      	str	r0, [sp, #24]
   2847e:	b9e8      	cbnz	r0, 284bc <lv_draw_map+0x9e>
   28480:	8863      	ldrh	r3, [r4, #2]
   28482:	b9db      	cbnz	r3, 284bc <lv_draw_map+0x9e>
   28484:	8923      	ldrh	r3, [r4, #8]
   28486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   2848a:	d117      	bne.n	284bc <lv_draw_map+0x9e>
   2848c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2848e:	b9ab      	cbnz	r3, 284bc <lv_draw_map+0x9e>
       chroma_key == false && alpha_byte == false && draw_dsc->recolor_opa == LV_OPA_TRANSP) {
   28490:	9b07      	ldr	r3, [sp, #28]
   28492:	2b00      	cmp	r3, #0
   28494:	f040 8088 	bne.w	285a8 <lv_draw_map+0x18a>
   28498:	7aa3      	ldrb	r3, [r4, #10]
   2849a:	2b00      	cmp	r3, #0
   2849c:	f040 8086 	bne.w	285ac <lv_draw_map+0x18e>
        _lv_blend_map(clip_area, map_area, (lv_color_t *)map_p, NULL, LV_DRAW_MASK_RES_FULL_COVER, draw_dsc->opa,
   284a0:	7ba2      	ldrb	r2, [r4, #14]
   284a2:	9202      	str	r2, [sp, #8]
   284a4:	7822      	ldrb	r2, [r4, #0]
   284a6:	9201      	str	r2, [sp, #4]
   284a8:	2201      	movs	r2, #1
   284aa:	9200      	str	r2, [sp, #0]
   284ac:	4631      	mov	r1, r6
   284ae:	463a      	mov	r2, r7
   284b0:	4650      	mov	r0, sl
   284b2:	f7ff fd98 	bl	27fe6 <_lv_blend_map>
}
   284b6:	b01b      	add	sp, #108	; 0x6c
   284b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   284bc:	9b07      	ldr	r3, [sp, #28]
   284be:	2b00      	cmp	r3, #0
   284c0:	bf14      	ite	ne
   284c2:	2303      	movne	r3, #3
   284c4:	2302      	moveq	r3, #2
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   284c6:	88b5      	ldrh	r5, [r6, #4]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   284c8:	f9bd c05a 	ldrsh.w	ip, [sp, #90]	; 0x5a
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   284cc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
   284d0:	f9b6 0000 	ldrsh.w	r0, [r6]
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   284d4:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
   284d8:	f9bb 1012 	ldrsh.w	r1, [fp, #18]
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   284dc:	9304      	str	r3, [sp, #16]
   284de:	3501      	adds	r5, #1
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   284e0:	f9bb 3010 	ldrsh.w	r3, [fp, #16]
   284e4:	1a2d      	subs	r5, r5, r0
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   284e6:	ebac 0202 	sub.w	r2, ip, r2
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   284ea:	ebae 0000 	sub.w	r0, lr, r0
   284ee:	4418      	add	r0, r3
        map_buf_tmp += map_w * (draw_area.y1 - (map_area->y1 - disp_area->y1)) * px_size_byte;
   284f0:	440a      	add	r2, r1
   284f2:	b22d      	sxth	r5, r5
        map_buf_tmp += (draw_area.x1 - (map_area->x1 - disp_area->x1)) * px_size_byte;
   284f4:	fb05 0202 	mla	r2, r5, r2, r0
   284f8:	9804      	ldr	r0, [sp, #16]
   284fa:	fb02 7200 	mla	r2, r2, r0, r7
   284fe:	9205      	str	r2, [sp, #20]
   28500:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   28504:	3201      	adds	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   28506:	4473      	add	r3, lr
   28508:	eba2 0e0e 	sub.w	lr, r2, lr
   2850c:	fa0f f28e 	sxth.w	r2, lr
   28510:	b21b      	sxth	r3, r3
   28512:	9209      	str	r2, [sp, #36]	; 0x24
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   28514:	3a01      	subs	r2, #1
        blend_area.x1 = draw_area.x1 + disp_area->x1;
   28516:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        blend_area.x2 = blend_area.x1 + lv_area_get_width(&draw_area) - 1;
   2851a:	4413      	add	r3, r2
   2851c:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28520:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   28524:	3301      	adds	r3, #1
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   28526:	4461      	add	r1, ip
   28528:	eba3 0c0c 	sub.w	ip, r3, ip
   2852c:	fa0f f38c 	sxth.w	r3, ip
   28530:	930f      	str	r3, [sp, #60]	; 0x3c
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   28532:	9b06      	ldr	r3, [sp, #24]
        blend_area.y1 = disp_area->y1 + draw_area.y1;
   28534:	b209      	sxth	r1, r1
   28536:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
        blend_area.y2 = blend_area.y1;
   2853a:	f8ad 1066 	strh.w	r1, [sp, #102]	; 0x66
        if(other_mask_cnt == 0 && !transform && !chroma_key && draw_dsc->recolor_opa == LV_OPA_TRANSP && alpha_byte) {
   2853e:	2b00      	cmp	r3, #0
   28540:	f040 8093 	bne.w	2866a <lv_draw_map+0x24c>
   28544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28546:	2b00      	cmp	r3, #0
   28548:	f040 808f 	bne.w	2866a <lv_draw_map+0x24c>
   2854c:	7aa3      	ldrb	r3, [r4, #10]
   2854e:	2b00      	cmp	r3, #0
   28550:	f040 808b 	bne.w	2866a <lv_draw_map+0x24c>
   28554:	9b07      	ldr	r3, [sp, #28]
   28556:	2b00      	cmp	r3, #0
   28558:	f000 8087 	beq.w	2866a <lv_draw_map+0x24c>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   2855c:	a816      	add	r0, sp, #88	; 0x58
   2855e:	f001 fd5a 	bl	2a016 <lv_area_get_size>
   28562:	28f0      	cmp	r0, #240	; 0xf0
   28564:	d824      	bhi.n	285b0 <lv_draw_map+0x192>
   28566:	a816      	add	r0, sp, #88	; 0x58
   28568:	f001 fd55 	bl	2a016 <lv_area_get_size>
   2856c:	4680      	mov	r8, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   2856e:	ea4f 0048 	mov.w	r0, r8, lsl #1
   28572:	f7f5 f86f 	bl	1d654 <_lv_mem_buf_get>
   28576:	4606      	mov	r6, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   28578:	4640      	mov	r0, r8
   2857a:	f7f5 f86b 	bl	1d654 <_lv_mem_buf_get>
   2857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
                map_buf_tmp += map_w * px_size_byte;
   28580:	9b04      	ldr	r3, [sp, #16]
            for(y = 0; y < draw_area_h; y++) {
   28582:	f04f 0900 	mov.w	r9, #0
   28586:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
                map_buf_tmp += map_w * px_size_byte;
   2858a:	fb13 f505 	smulbb	r5, r3, r5
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   2858e:	4607      	mov	r7, r0
        uint32_t px_i = 0;
   28590:	464b      	mov	r3, r9
   28592:	9206      	str	r2, [sp, #24]
            for(y = 0; y < draw_area_h; y++) {
   28594:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   28596:	454a      	cmp	r2, r9
   28598:	dd4b      	ble.n	28632 <lv_draw_map+0x214>
                map_px = map_buf_tmp;
   2859a:	9a05      	ldr	r2, [sp, #20]
   2859c:	eb07 0c03 	add.w	ip, r7, r3
   285a0:	eb06 0e43 	add.w	lr, r6, r3, lsl #1
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   285a4:	2100      	movs	r1, #0
   285a6:	e014      	b.n	285d2 <lv_draw_map+0x1b4>
        uint8_t px_size_byte = alpha_byte ? LV_IMG_PX_SIZE_ALPHA_BYTE : sizeof(lv_color_t);
   285a8:	2303      	movs	r3, #3
   285aa:	e78c      	b.n	284c6 <lv_draw_map+0xa8>
   285ac:	2302      	movs	r3, #2
   285ae:	e78a      	b.n	284c6 <lv_draw_map+0xa8>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   285b0:	f04f 08f0 	mov.w	r8, #240	; 0xf0
   285b4:	e7db      	b.n	2856e <lv_draw_map+0x150>
                    lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   285b6:	7890      	ldrb	r0, [r2, #2]
                    mask_buf[px_i] = px_opa;
   285b8:	f80c 0b01 	strb.w	r0, [ip], #1
                    if(px_opa) {
   285bc:	b130      	cbz	r0, 285cc <lv_draw_map+0x1ae>
                        map2[px_i].full =  map_px[0] + (map_px[1] << 8);
   285be:	f892 b001 	ldrb.w	fp, [r2, #1]
   285c2:	7810      	ldrb	r0, [r2, #0]
   285c4:	eb00 200b 	add.w	r0, r0, fp, lsl #8
   285c8:	f82e 0011 	strh.w	r0, [lr, r1, lsl #1]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   285cc:	9804      	ldr	r0, [sp, #16]
   285ce:	3101      	adds	r1, #1
   285d0:	4402      	add	r2, r0
   285d2:	9809      	ldr	r0, [sp, #36]	; 0x24
   285d4:	4288      	cmp	r0, r1
   285d6:	dcee      	bgt.n	285b6 <lv_draw_map+0x198>
   285d8:	9a06      	ldr	r2, [sp, #24]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   285da:	f8bd 1058 	ldrh.w	r1, [sp, #88]	; 0x58
   285de:	4413      	add	r3, r2
                map_buf_tmp += map_w * px_size_byte;
   285e0:	9a05      	ldr	r2, [sp, #20]
   285e2:	442a      	add	r2, r5
   285e4:	9205      	str	r2, [sp, #20]
   285e6:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   285ea:	3201      	adds	r2, #1
   285ec:	1a52      	subs	r2, r2, r1
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   285ee:	fa03 f282 	sxtah	r2, r3, r2
   285f2:	4542      	cmp	r2, r8
   285f4:	d207      	bcs.n	28606 <lv_draw_map+0x1e8>
                    blend_area.y2 ++;
   285f6:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   285fa:	3201      	adds	r2, #1
   285fc:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
   28600:	f109 0901 	add.w	r9, r9, #1
   28604:	e7c6      	b.n	28594 <lv_draw_map+0x176>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   28606:	7ba3      	ldrb	r3, [r4, #14]
   28608:	9302      	str	r3, [sp, #8]
   2860a:	7823      	ldrb	r3, [r4, #0]
   2860c:	9301      	str	r3, [sp, #4]
   2860e:	2302      	movs	r3, #2
   28610:	9300      	str	r3, [sp, #0]
   28612:	4632      	mov	r2, r6
   28614:	463b      	mov	r3, r7
   28616:	a918      	add	r1, sp, #96	; 0x60
   28618:	4650      	mov	r0, sl
   2861a:	f7ff fce4 	bl	27fe6 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   2861e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   28622:	3301      	adds	r3, #1
   28624:	b21b      	sxth	r3, r3
   28626:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
   2862a:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    px_i = 0;
   2862e:	2300      	movs	r3, #0
   28630:	e7e6      	b.n	28600 <lv_draw_map+0x1e2>
            if(blend_area.y1 != blend_area.y2) {
   28632:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   28636:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   2863a:	429a      	cmp	r2, r3
   2863c:	d00e      	beq.n	2865c <lv_draw_map+0x23e>
                blend_area.y2--;
   2863e:	3b01      	subs	r3, #1
   28640:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, LV_DRAW_MASK_RES_CHANGED, draw_dsc->opa, draw_dsc->blend_mode);
   28644:	7ba3      	ldrb	r3, [r4, #14]
   28646:	9302      	str	r3, [sp, #8]
   28648:	7823      	ldrb	r3, [r4, #0]
   2864a:	9301      	str	r3, [sp, #4]
   2864c:	2302      	movs	r3, #2
   2864e:	9300      	str	r3, [sp, #0]
   28650:	4632      	mov	r2, r6
   28652:	463b      	mov	r3, r7
   28654:	a918      	add	r1, sp, #96	; 0x60
   28656:	4650      	mov	r0, sl
   28658:	f7ff fcc5 	bl	27fe6 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   2865c:	4638      	mov	r0, r7
   2865e:	f7f5 f85b 	bl	1d718 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   28662:	4630      	mov	r0, r6
            _lv_mem_buf_release(map2);
   28664:	f7f5 f858 	bl	1d718 <_lv_mem_buf_release>
}
   28668:	e725      	b.n	284b6 <lv_draw_map+0x98>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   2866a:	a816      	add	r0, sp, #88	; 0x58
   2866c:	f001 fcd3 	bl	2a016 <lv_area_get_size>
   28670:	28f0      	cmp	r0, #240	; 0xf0
   28672:	d84f      	bhi.n	28714 <lv_draw_map+0x2f6>
   28674:	a816      	add	r0, sp, #88	; 0x58
   28676:	f001 fcce 	bl	2a016 <lv_area_get_size>
   2867a:	4680      	mov	r8, r0
            lv_color_t * map2 = _lv_mem_buf_get(mask_buf_size * sizeof(lv_color_t));
   2867c:	ea4f 0048 	mov.w	r0, r8, lsl #1
   28680:	f7f4 ffe8 	bl	1d654 <_lv_mem_buf_get>
   28684:	4681      	mov	r9, r0
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   28686:	4640      	mov	r0, r8
   28688:	f7f4 ffe4 	bl	1d654 <_lv_mem_buf_get>
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   2868c:	7aa3      	ldrb	r3, [r4, #10]
   2868e:	43da      	mvns	r2, r3
   28690:	b2d2      	uxtb	r2, r2
            lv_opa_t * mask_buf = _lv_mem_buf_get(mask_buf_size);
   28692:	4607      	mov	r7, r0
            lv_opa_t recolor_opa_inv = 255 - draw_dsc->recolor_opa;
   28694:	920d      	str	r2, [sp, #52]	; 0x34
            if(draw_dsc->recolor_opa != 0) {
   28696:	2b00      	cmp	r3, #0
   28698:	d03f      	beq.n	2871a <lv_draw_map+0x2fc>
    out[0] = (uint16_t) LV_COLOR_GET_R(c) * mix;
   2869a:	7b62      	ldrb	r2, [r4, #13]
   2869c:	08d2      	lsrs	r2, r2, #3
   2869e:	435a      	muls	r2, r3
   286a0:	920e      	str	r2, [sp, #56]	; 0x38
    out[1] = (uint16_t) LV_COLOR_GET_G(c) * mix;
   286a2:	89a2      	ldrh	r2, [r4, #12]
   286a4:	f3c2 1245 	ubfx	r2, r2, #5, #6
   286a8:	435a      	muls	r2, r3
   286aa:	9210      	str	r2, [sp, #64]	; 0x40
    out[2] = (uint16_t) LV_COLOR_GET_B(c) * mix;
   286ac:	7b22      	ldrb	r2, [r4, #12]
   286ae:	f002 021f 	and.w	r2, r2, #31
   286b2:	4353      	muls	r3, r2
   286b4:	930c      	str	r3, [sp, #48]	; 0x30
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   286b6:	9b07      	ldr	r3, [sp, #28]
   286b8:	2b00      	cmp	r3, #0
   286ba:	d132      	bne.n	28722 <lv_draw_map+0x304>
   286bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   286be:	2b00      	cmp	r3, #0
   286c0:	d12f      	bne.n	28722 <lv_draw_map+0x304>
   286c2:	8863      	ldrh	r3, [r4, #2]
   286c4:	bb6b      	cbnz	r3, 28722 <lv_draw_map+0x304>
   286c6:	8923      	ldrh	r3, [r4, #8]
   286c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   286cc:	bf14      	ite	ne
   286ce:	2602      	movne	r6, #2
   286d0:	2601      	moveq	r6, #1
            if(other_mask_cnt) {
   286d2:	9b06      	ldr	r3, [sp, #24]
   286d4:	b11b      	cbz	r3, 286de <lv_draw_map+0x2c0>
                _lv_memset_ff(mask_buf, mask_buf_size);
   286d6:	4641      	mov	r1, r8
   286d8:	4638      	mov	r0, r7
   286da:	f7ff fe97 	bl	2840c <_lv_memset_ff>
                map_buf_tmp += map_w * px_size_byte;
   286de:	9b04      	ldr	r3, [sp, #16]
   286e0:	fb13 f305 	smulbb	r3, r3, r5
   286e4:	9312      	str	r3, [sp, #72]	; 0x48
   286e6:	2300      	movs	r3, #0
   286e8:	9308      	str	r3, [sp, #32]
   286ea:	461d      	mov	r5, r3
   286ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   286ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   286f2:	9315      	str	r3, [sp, #84]	; 0x54
            for(y = 0; y < draw_area_h; y++) {
   286f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   286f6:	9a08      	ldr	r2, [sp, #32]
   286f8:	4293      	cmp	r3, r2
   286fa:	f340 80e2 	ble.w	288c2 <lv_draw_map+0x4a4>
   286fe:	197b      	adds	r3, r7, r5
   28700:	9311      	str	r3, [sp, #68]	; 0x44
   28702:	469e      	mov	lr, r3
   28704:	eb09 0345 	add.w	r3, r9, r5, lsl #1
   28708:	9313      	str	r3, [sp, #76]	; 0x4c
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   2870a:	2300      	movs	r3, #0
                map_px = map_buf_tmp;
   2870c:	f8dd c014 	ldr.w	ip, [sp, #20]
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   28710:	930b      	str	r3, [sp, #44]	; 0x2c
   28712:	e018      	b.n	28746 <lv_draw_map+0x328>
            uint32_t mask_buf_size = lv_area_get_size(&draw_area) > LV_HOR_RES_MAX ? LV_HOR_RES_MAX : lv_area_get_size(&draw_area);
   28714:	f04f 08f0 	mov.w	r8, #240	; 0xf0
   28718:	e7b0      	b.n	2867c <lv_draw_map+0x25e>
            uint16_t recolor_premult[3] = {0};
   2871a:	930c      	str	r3, [sp, #48]	; 0x30
   2871c:	9310      	str	r3, [sp, #64]	; 0x40
   2871e:	930e      	str	r3, [sp, #56]	; 0x38
   28720:	e7c9      	b.n	286b6 <lv_draw_map+0x298>
            mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   28722:	2602      	movs	r6, #2
   28724:	e7d5      	b.n	286d2 <lv_draw_map+0x2b4>
                        if(alpha_byte) {
   28726:	9b07      	ldr	r3, [sp, #28]
   28728:	2b00      	cmp	r3, #0
   2872a:	d04e      	beq.n	287ca <lv_draw_map+0x3ac>
                            lv_opa_t px_opa = map_px[LV_IMG_PX_SIZE_ALPHA_BYTE - 1];
   2872c:	f89c 3002 	ldrb.w	r3, [ip, #2]
                            mask_buf[px_i] = px_opa;
   28730:	f88e 3000 	strb.w	r3, [lr]
                            if(px_opa == 0) {
   28734:	2b00      	cmp	r3, #0
   28736:	d14c      	bne.n	287d2 <lv_draw_map+0x3b4>
                for(x = 0; x < draw_area_w; x++, map_px += px_size_byte, px_i++) {
   28738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2873a:	3301      	adds	r3, #1
   2873c:	930b      	str	r3, [sp, #44]	; 0x2c
   2873e:	9b04      	ldr	r3, [sp, #16]
   28740:	f10e 0e01 	add.w	lr, lr, #1
   28744:	449c      	add	ip, r3
   28746:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2874a:	4293      	cmp	r3, r2
   2874c:	dceb      	bgt.n	28726 <lv_draw_map+0x308>
   2874e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   28750:	441d      	add	r5, r3
                if(other_mask_cnt) {
   28752:	9b06      	ldr	r3, [sp, #24]
   28754:	b313      	cbz	r3, 2879c <lv_draw_map+0x37e>
                    mask_res_sub = lv_draw_mask_apply(mask_buf + px_i_start, draw_area.x1 + vdb->area.x1, y + draw_area.y1 + vdb->area.y1,
   28756:	f8bb 0012 	ldrh.w	r0, [fp, #18]
   2875a:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
   2875e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   28762:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
   28766:	4402      	add	r2, r0
   28768:	9808      	ldr	r0, [sp, #32]
   2876a:	4402      	add	r2, r0
   2876c:	f8bb 0010 	ldrh.w	r0, [fp, #16]
   28770:	3301      	adds	r3, #1
   28772:	1a5b      	subs	r3, r3, r1
   28774:	4401      	add	r1, r0
   28776:	b21b      	sxth	r3, r3
   28778:	9811      	ldr	r0, [sp, #68]	; 0x44
   2877a:	b212      	sxth	r2, r2
   2877c:	b209      	sxth	r1, r1
   2877e:	f7f4 f8b7 	bl	1c8f0 <lv_draw_mask_apply>
                    if(mask_res_sub == LV_DRAW_MASK_RES_TRANSP) {
   28782:	2800      	cmp	r0, #0
   28784:	d16e      	bne.n	28864 <lv_draw_map+0x446>
   28786:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   2878a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
                        _lv_memset_00(mask_buf + px_i_start, lv_area_get_width(&draw_area));
   2878e:	9811      	ldr	r0, [sp, #68]	; 0x44
   28790:	3101      	adds	r1, #1
   28792:	1ac9      	subs	r1, r1, r3
   28794:	b209      	sxth	r1, r1
   28796:	f7ff fe35 	bl	28404 <_lv_memset_00>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   2879a:	2602      	movs	r6, #2
                map_buf_tmp += map_w * px_size_byte;
   2879c:	9b05      	ldr	r3, [sp, #20]
   2879e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   287a0:	4413      	add	r3, r2
   287a2:	9305      	str	r3, [sp, #20]
   287a4:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   287a8:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   287ac:	3301      	adds	r3, #1
   287ae:	1a9b      	subs	r3, r3, r2
                if(px_i + lv_area_get_width(&draw_area) < mask_buf_size) {
   287b0:	fa05 f383 	sxtah	r3, r5, r3
   287b4:	4543      	cmp	r3, r8
   287b6:	d259      	bcs.n	2886c <lv_draw_map+0x44e>
                    blend_area.y2 ++;
   287b8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   287bc:	3301      	adds	r3, #1
   287be:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
            for(y = 0; y < draw_area_h; y++) {
   287c2:	9b08      	ldr	r3, [sp, #32]
   287c4:	3301      	adds	r3, #1
   287c6:	9308      	str	r3, [sp, #32]
   287c8:	e794      	b.n	286f4 <lv_draw_map+0x2d6>
                            mask_buf[px_i] = 0xFF;
   287ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   287ce:	f88e 3000 	strb.w	r3, [lr]
                        c.full =  map_px[0] + (map_px[1] << 8);
   287d2:	f89c 2001 	ldrb.w	r2, [ip, #1]
   287d6:	f89c 3000 	ldrb.w	r3, [ip]
   287da:	eb03 2302 	add.w	r3, r3, r2, lsl #8
                        if(chroma_key) {
   287de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                        c.full =  map_px[0] + (map_px[1] << 8);
   287e0:	b29b      	uxth	r3, r3
                        if(chroma_key) {
   287e2:	b13a      	cbz	r2, 287f4 <lv_draw_map+0x3d6>
                            if(c.full == chroma_keyed_color.full) {
   287e4:	f5b3 6ffc 	cmp.w	r3, #2016	; 0x7e0
   287e8:	d104      	bne.n	287f4 <lv_draw_map+0x3d6>
                                mask_buf[px_i] = LV_OPA_TRANSP;
   287ea:	f04f 0300 	mov.w	r3, #0
   287ee:	f88e 3000 	strb.w	r3, [lr]
                                continue;
   287f2:	e7a1      	b.n	28738 <lv_draw_map+0x31a>
                    if(draw_dsc->recolor_opa != 0) {
   287f4:	7aa2      	ldrb	r2, [r4, #10]
   287f6:	b382      	cbz	r2, 2885a <lv_draw_map+0x43c>
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) premult_c1[1] + LV_COLOR_GET_G(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   287f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   287fa:	4610      	mov	r0, r2
   287fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   287fe:	f3c3 1145 	ubfx	r1, r3, #5, #6
   28802:	fb01 2100 	mla	r1, r1, r0, r2
   28806:	f248 0281 	movw	r2, #32897	; 0x8081
   2880a:	4351      	muls	r1, r2
   2880c:	f501 0180 	add.w	r1, r1, #4194304	; 0x400000
   28810:	f501 4181 	add.w	r1, r1, #16512	; 0x4080
   28814:	f3c1 52c5 	ubfx	r2, r1, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) premult_c1[2] + LV_COLOR_GET_B(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   28818:	990c      	ldr	r1, [sp, #48]	; 0x30
   2881a:	9214      	str	r2, [sp, #80]	; 0x50
   2881c:	f003 021f 	and.w	r2, r3, #31
   28820:	fb02 1200 	mla	r2, r2, r0, r1
   28824:	f248 0181 	movw	r1, #32897	; 0x8081
   28828:	434a      	muls	r2, r1
   2882a:	f502 0280 	add.w	r2, r2, #4194304	; 0x400000
   2882e:	9914      	ldr	r1, [sp, #80]	; 0x50
   28830:	f502 4281 	add.w	r2, r2, #16512	; 0x4080
   28834:	f3c2 52c4 	ubfx	r2, r2, #23, #5
   28838:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) premult_c1[0] + LV_COLOR_GET_R(c2) * mix + LV_COLOR_MIX_ROUND_OFS));
   2883c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2883e:	0adb      	lsrs	r3, r3, #11
   28840:	fb03 1300 	mla	r3, r3, r0, r1
   28844:	f248 0181 	movw	r1, #32897	; 0x8081
   28848:	434b      	muls	r3, r1
   2884a:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   2884e:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
   28852:	0ddb      	lsrs	r3, r3, #23
   28854:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
   28858:	b29b      	uxth	r3, r3
                    map2[px_i].full = c.full;
   2885a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2885c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2885e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
   28862:	e769      	b.n	28738 <lv_draw_map+0x31a>
                        mask_res = LV_DRAW_MASK_RES_CHANGED;
   28864:	2802      	cmp	r0, #2
   28866:	bf08      	it	eq
   28868:	2602      	moveq	r6, #2
   2886a:	e797      	b.n	2879c <lv_draw_map+0x37e>
                    _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   2886c:	7ba3      	ldrb	r3, [r4, #14]
   2886e:	9302      	str	r3, [sp, #8]
   28870:	7823      	ldrb	r3, [r4, #0]
   28872:	464a      	mov	r2, r9
   28874:	e9cd 6300 	strd	r6, r3, [sp]
   28878:	a918      	add	r1, sp, #96	; 0x60
   2887a:	463b      	mov	r3, r7
   2887c:	4650      	mov	r0, sl
   2887e:	f7ff fbb2 	bl	27fe6 <_lv_blend_map>
                    blend_area.y1 = blend_area.y2 + 1;
   28882:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   28886:	3301      	adds	r3, #1
   28888:	b21b      	sxth	r3, r3
   2888a:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
                    blend_area.y2 = blend_area.y1;
   2888e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   28892:	9b07      	ldr	r3, [sp, #28]
   28894:	b98b      	cbnz	r3, 288ba <lv_draw_map+0x49c>
   28896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   28898:	b97b      	cbnz	r3, 288ba <lv_draw_map+0x49c>
   2889a:	8863      	ldrh	r3, [r4, #2]
   2889c:	b96b      	cbnz	r3, 288ba <lv_draw_map+0x49c>
   2889e:	8923      	ldrh	r3, [r4, #8]
   288a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   288a4:	bf14      	ite	ne
   288a6:	2602      	movne	r6, #2
   288a8:	2601      	moveq	r6, #1
                    if(other_mask_cnt) {
   288aa:	9b06      	ldr	r3, [sp, #24]
   288ac:	b13b      	cbz	r3, 288be <lv_draw_map+0x4a0>
                        _lv_memset_ff(mask_buf, mask_buf_size);
   288ae:	4641      	mov	r1, r8
   288b0:	4638      	mov	r0, r7
   288b2:	f7ff fdab 	bl	2840c <_lv_memset_ff>
                    px_i = 0;
   288b6:	2500      	movs	r5, #0
   288b8:	e783      	b.n	287c2 <lv_draw_map+0x3a4>
                    mask_res = (alpha_byte || chroma_key || draw_dsc->angle ||
   288ba:	2602      	movs	r6, #2
   288bc:	e7f5      	b.n	288aa <lv_draw_map+0x48c>
                    px_i = 0;
   288be:	9d06      	ldr	r5, [sp, #24]
   288c0:	e77f      	b.n	287c2 <lv_draw_map+0x3a4>
            if(blend_area.y1 != blend_area.y2) {
   288c2:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   288c6:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   288ca:	429a      	cmp	r2, r3
   288cc:	d00d      	beq.n	288ea <lv_draw_map+0x4cc>
                blend_area.y2--;
   288ce:	3b01      	subs	r3, #1
   288d0:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
                _lv_blend_map(clip_area, &blend_area, map2, mask_buf, mask_res, draw_dsc->opa, draw_dsc->blend_mode);
   288d4:	7ba3      	ldrb	r3, [r4, #14]
   288d6:	9302      	str	r3, [sp, #8]
   288d8:	7823      	ldrb	r3, [r4, #0]
   288da:	464a      	mov	r2, r9
   288dc:	e9cd 6300 	strd	r6, r3, [sp]
   288e0:	a918      	add	r1, sp, #96	; 0x60
   288e2:	463b      	mov	r3, r7
   288e4:	4650      	mov	r0, sl
   288e6:	f7ff fb7e 	bl	27fe6 <_lv_blend_map>
            _lv_mem_buf_release(mask_buf);
   288ea:	4638      	mov	r0, r7
   288ec:	f7f4 ff14 	bl	1d718 <_lv_mem_buf_release>
            _lv_mem_buf_release(map2);
   288f0:	4648      	mov	r0, r9
   288f2:	e6b7      	b.n	28664 <lv_draw_map+0x246>

000288f4 <lv_draw_img_dsc_init>:
{
   288f4:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
   288f6:	2110      	movs	r1, #16
{
   288f8:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_img_dsc_t));
   288fa:	f7ff fd83 	bl	28404 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   288fe:	23ff      	movs	r3, #255	; 0xff
   28900:	7023      	strb	r3, [r4, #0]
    dsc->zoom = LV_IMG_ZOOM_NONE;
   28902:	f44f 7380 	mov.w	r3, #256	; 0x100
   28906:	8123      	strh	r3, [r4, #8]
    dsc->antialias = LV_ANTIALIAS;
   28908:	7be3      	ldrb	r3, [r4, #15]
    dsc->recolor = LV_COLOR_BLACK;
   2890a:	2200      	movs	r2, #0
    dsc->antialias = LV_ANTIALIAS;
   2890c:	f362 0300 	bfi	r3, r2, #0, #1
    dsc->recolor = LV_COLOR_BLACK;
   28910:	81a2      	strh	r2, [r4, #12]
    dsc->antialias = LV_ANTIALIAS;
   28912:	73e3      	strb	r3, [r4, #15]
}
   28914:	bd10      	pop	{r4, pc}

00028916 <lv_img_cf_is_chroma_keyed>:
    switch(cf) {
   28916:	2803      	cmp	r0, #3
   28918:	d005      	beq.n	28926 <lv_img_cf_is_chroma_keyed+0x10>
   2891a:	3806      	subs	r0, #6
   2891c:	2804      	cmp	r0, #4
   2891e:	bf8c      	ite	hi
   28920:	2000      	movhi	r0, #0
   28922:	2001      	movls	r0, #1
   28924:	4770      	bx	lr
            is_chroma_keyed = true;
   28926:	2001      	movs	r0, #1
}
   28928:	4770      	bx	lr

0002892a <lv_img_cf_has_alpha>:
    switch(cf) {
   2892a:	280e      	cmp	r0, #14
   2892c:	d809      	bhi.n	28942 <lv_img_cf_has_alpha+0x18>
   2892e:	2301      	movs	r3, #1
   28930:	fa03 f000 	lsl.w	r0, r3, r0
   28934:	f647 73a4 	movw	r3, #32676	; 0x7fa4
   28938:	4218      	tst	r0, r3
   2893a:	bf14      	ite	ne
   2893c:	2001      	movne	r0, #1
   2893e:	2000      	moveq	r0, #0
   28940:	4770      	bx	lr
{
   28942:	2000      	movs	r0, #0
}
   28944:	4770      	bx	lr

00028946 <lv_img_src_get_type>:
    if(src == NULL) return img_src_type;
   28946:	b150      	cbz	r0, 2895e <lv_img_src_get_type+0x18>
    if(u8_p[0] >= 0x20 && u8_p[0] <= 0x7F) {
   28948:	7803      	ldrb	r3, [r0, #0]
   2894a:	f1a3 0220 	sub.w	r2, r3, #32
   2894e:	2a5f      	cmp	r2, #95	; 0x5f
   28950:	d907      	bls.n	28962 <lv_img_src_get_type+0x1c>
    else if(u8_p[0] >= 0x80) {
   28952:	f013 0f80 	tst.w	r3, #128	; 0x80
        img_src_type = LV_IMG_SRC_SYMBOL; /*Symbols begins after 0x7F*/
   28956:	bf0c      	ite	eq
   28958:	2000      	moveq	r0, #0
   2895a:	2002      	movne	r0, #2
   2895c:	4770      	bx	lr
    if(src == NULL) return img_src_type;
   2895e:	2003      	movs	r0, #3
   28960:	4770      	bx	lr
        img_src_type = LV_IMG_SRC_FILE; /*If it's an ASCII character then it's file name*/
   28962:	2001      	movs	r0, #1
}
   28964:	4770      	bx	lr

00028966 <hex_char_to_num>:
 * Convert a hexadecimal characters to a number (0..15)
 * @param hex Pointer to a hexadecimal character (0..9, A..F)
 * @return the numerical value of `hex` or 0 on error
 */
static uint8_t hex_char_to_num(char hex)
{
   28966:	4603      	mov	r3, r0
    uint8_t result = 0;

    if(hex >= '0' && hex <= '9') {
   28968:	3830      	subs	r0, #48	; 0x30
   2896a:	b2c0      	uxtb	r0, r0
   2896c:	2809      	cmp	r0, #9
   2896e:	d90b      	bls.n	28988 <hex_char_to_num+0x22>
        result = hex - '0';
    }
    else {
        if(hex >= 'a') hex -= 'a' - 'A'; /*Convert to upper case*/
   28970:	2b60      	cmp	r3, #96	; 0x60
   28972:	bf84      	itt	hi
   28974:	3b20      	subhi	r3, #32
   28976:	b2db      	uxtbhi	r3, r3

        switch(hex) {
   28978:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   2897c:	2a05      	cmp	r2, #5
   2897e:	d802      	bhi.n	28986 <hex_char_to_num+0x20>
   28980:	3b37      	subs	r3, #55	; 0x37
   28982:	b2d8      	uxtb	r0, r3
   28984:	4770      	bx	lr
{
   28986:	2000      	movs	r0, #0
                break;
        }
    }

    return result;
}
   28988:	4770      	bx	lr

0002898a <_lv_memset_00>:
{
   2898a:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   2898c:	2100      	movs	r1, #0
   2898e:	f002 bf05 	b.w	2b79c <memset>

00028992 <_lv_memset_00>:
   28992:	460a      	mov	r2, r1
   28994:	2100      	movs	r1, #0
   28996:	f002 bf01 	b.w	2b79c <memset>

0002899a <_lv_memset_ff>:
{
   2899a:	460a      	mov	r2, r1
   2899c:	21ff      	movs	r1, #255	; 0xff
   2899e:	f002 befd 	b.w	2b79c <memset>

000289a2 <lv_draw_line_dsc_init>:
{
   289a2:	b510      	push	{r4, lr}
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
   289a4:	210a      	movs	r1, #10
{
   289a6:	4604      	mov	r4, r0
    _lv_memset_00(dsc, sizeof(lv_draw_line_dsc_t));
   289a8:	f7ff fff3 	bl	28992 <_lv_memset_00>
    dsc->opa = LV_OPA_COVER;
   289ac:	23ff      	movs	r3, #255	; 0xff
   289ae:	7223      	strb	r3, [r4, #8]
    dsc->color = LV_COLOR_BLACK;
   289b0:	2300      	movs	r3, #0
   289b2:	8023      	strh	r3, [r4, #0]
    dsc->width = 1;
   289b4:	2301      	movs	r3, #1
   289b6:	8063      	strh	r3, [r4, #2]
}
   289b8:	bd10      	pop	{r4, pc}

000289ba <mask_mix>:
}


LV_ATTRIBUTE_FAST_MEM static inline lv_opa_t mask_mix(lv_opa_t mask_act, lv_opa_t mask_new)
{
    if(mask_new >= LV_OPA_MAX) return mask_act;
   289ba:	29fc      	cmp	r1, #252	; 0xfc
   289bc:	d80a      	bhi.n	289d4 <mask_mix+0x1a>
    if(mask_new <= LV_OPA_MIN) return 0;
   289be:	2902      	cmp	r1, #2
   289c0:	d907      	bls.n	289d2 <mask_mix+0x18>

    return LV_MATH_UDIV255(mask_act * mask_new);// >> 8);
   289c2:	fb10 f001 	smulbb	r0, r0, r1
   289c6:	f248 0181 	movw	r1, #32897	; 0x8081
   289ca:	4348      	muls	r0, r1
   289cc:	f3c0 50c7 	ubfx	r0, r0, #23, #8
   289d0:	4770      	bx	lr
    if(mask_new <= LV_OPA_MIN) return 0;
   289d2:	2000      	movs	r0, #0
}
   289d4:	4770      	bx	lr

000289d6 <_lv_memset_00>:
{
   289d6:	460a      	mov	r2, r1
   289d8:	2100      	movs	r1, #0
   289da:	f002 bedf 	b.w	2b79c <memset>

000289de <lv_draw_mask_line>:
{
   289de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   289e2:	9e08      	ldr	r6, [sp, #32]
    abs_x -= p->origo.x;
   289e4:	8a75      	ldrh	r5, [r6, #18]
   289e6:	f896 c028 	ldrb.w	ip, [r6, #40]	; 0x28
   289ea:	1b49      	subs	r1, r1, r5
{
   289ec:	4604      	mov	r4, r0
    abs_y -= p->origo.y;
   289ee:	8ab0      	ldrh	r0, [r6, #20]
    abs_x -= p->origo.x;
   289f0:	b20d      	sxth	r5, r1
    if(p->steep == 0) {
   289f2:	6a31      	ldr	r1, [r6, #32]
    abs_y -= p->origo.y;
   289f4:	1a12      	subs	r2, r2, r0
   289f6:	b212      	sxth	r2, r2
    if(p->steep == 0) {
   289f8:	f00c 0001 	and.w	r0, ip, #1
   289fc:	bb89      	cbnz	r1, 28a62 <lv_draw_mask_line+0x84>
        if(p->flat) {
   289fe:	7c31      	ldrb	r1, [r6, #16]
   28a00:	f001 0602 	and.w	r6, r1, #2
   28a04:	b170      	cbz	r0, 28a24 <lv_draw_mask_line+0x46>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT ||
   28a06:	b12e      	cbz	r6, 28a14 <lv_draw_mask_line+0x36>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP && abs_y + 1 < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a08:	f001 0103 	and.w	r1, r1, #3
   28a0c:	2902      	cmp	r1, #2
   28a0e:	d103      	bne.n	28a18 <lv_draw_mask_line+0x3a>
   28a10:	1c50      	adds	r0, r2, #1
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   28a12:	0fc0      	lsrs	r0, r0, #31
}
   28a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_BOTTOM && abs_y > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a18:	2903      	cmp	r1, #3
   28a1a:	d101      	bne.n	28a20 <lv_draw_mask_line+0x42>
   28a1c:	2a00      	cmp	r2, #0
   28a1e:	dcf9      	bgt.n	28a14 <lv_draw_mask_line+0x36>
                return LV_DRAW_MASK_RES_TRANSP;
   28a20:	2000      	movs	r0, #0
   28a22:	e7f7      	b.n	28a14 <lv_draw_mask_line+0x36>
            if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_TOP ||
   28a24:	2e00      	cmp	r6, #0
   28a26:	f040 816a 	bne.w	28cfe <lv_draw_mask_line+0x320>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT && abs_x > 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a2a:	f001 0003 	and.w	r0, r1, #3
   28a2e:	2801      	cmp	r0, #1
   28a30:	d10a      	bne.n	28a48 <lv_draw_mask_line+0x6a>
   28a32:	2d00      	cmp	r5, #0
   28a34:	dcee      	bgt.n	28a14 <lv_draw_mask_line+0x36>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_TRANSP;
   28a36:	42dd      	cmn	r5, r3
   28a38:	d4f2      	bmi.n	28a20 <lv_draw_mask_line+0x42>
                    int32_t k = - abs_x;
   28a3a:	4269      	negs	r1, r5
                    if(k < 0) k = 0;
   28a3c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
                    if(k >= len) return LV_DRAW_MASK_RES_TRANSP;
   28a40:	428b      	cmp	r3, r1
   28a42:	dded      	ble.n	28a20 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   28a44:	4620      	mov	r0, r4
   28a46:	e0a2      	b.n	28b8e <lv_draw_mask_line+0x1b0>
            else if(p->cfg.side == LV_DRAW_MASK_LINE_SIDE_LEFT) {
   28a48:	2800      	cmp	r0, #0
   28a4a:	d1f4      	bne.n	28a36 <lv_draw_mask_line+0x58>
                if(abs_x + len < 0) return LV_DRAW_MASK_RES_FULL_COVER;
   28a4c:	1959      	adds	r1, r3, r5
   28a4e:	f100 8156 	bmi.w	28cfe <lv_draw_mask_line+0x320>
                    int32_t k = - abs_x;
   28a52:	4268      	negs	r0, r5
                    if(k < 0) return LV_DRAW_MASK_RES_TRANSP;
   28a54:	2800      	cmp	r0, #0
   28a56:	dbe3      	blt.n	28a20 <lv_draw_mask_line+0x42>
                    if(k >= 0 && k < len) _lv_memset_00(&mask_buf[k], len - k);
   28a58:	4298      	cmp	r0, r3
   28a5a:	f2c0 8097 	blt.w	28b8c <lv_draw_mask_line+0x1ae>
    return LV_DRAW_MASK_RES_CHANGED;
   28a5e:	2002      	movs	r0, #2
   28a60:	e7d8      	b.n	28a14 <lv_draw_mask_line+0x36>
    if(p->flat) {
   28a62:	f00c 0c02 	and.w	ip, ip, #2
   28a66:	2800      	cmp	r0, #0
   28a68:	f000 8094 	beq.w	28b94 <lv_draw_mask_line+0x1b6>
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   28a6c:	69f7      	ldr	r7, [r6, #28]
   28a6e:	fb05 f107 	mul.w	r1, r5, r7
    if(p->yx_steep > 0) {
   28a72:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * abs_x) >> 10;
   28a74:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   28a78:	fa5f f08c 	uxtb.w	r0, ip
   28a7c:	dd05      	ble.n	28a8a <lv_draw_mask_line+0xac>
        if(y_at_x > abs_y) {
   28a7e:	4291      	cmp	r1, r2
   28a80:	dd05      	ble.n	28a8e <lv_draw_mask_line+0xb0>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   28a82:	3800      	subs	r0, #0
   28a84:	bf18      	it	ne
   28a86:	2001      	movne	r0, #1
   28a88:	e7c4      	b.n	28a14 <lv_draw_mask_line+0x36>
        if(y_at_x < abs_y) {
   28a8a:	4291      	cmp	r1, r2
   28a8c:	dbf9      	blt.n	28a82 <lv_draw_mask_line+0xa4>
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   28a8e:	1959      	adds	r1, r3, r5
   28a90:	4379      	muls	r1, r7
    if(p->yx_steep > 0) {
   28a92:	2f00      	cmp	r7, #0
    y_at_x = (int32_t)((int32_t)p->yx_steep * (abs_x + len)) >> 10;
   28a94:	ea4f 21a1 	mov.w	r1, r1, asr #10
    if(p->yx_steep > 0) {
   28a98:	dd05      	ble.n	28aa6 <lv_draw_mask_line+0xc8>
        if(y_at_x < abs_y) {
   28a9a:	4291      	cmp	r1, r2
   28a9c:	da06      	bge.n	28aac <lv_draw_mask_line+0xce>
               p->cfg.side == LV_DRAW_MASK_LINE_SIDE_RIGHT) return LV_DRAW_MASK_RES_FULL_COVER;
   28a9e:	fab0 f080 	clz	r0, r0
   28aa2:	0940      	lsrs	r0, r0, #5
   28aa4:	e7b6      	b.n	28a14 <lv_draw_mask_line+0x36>
        if(y_at_x > abs_y) {
   28aa6:	4291      	cmp	r1, r2
   28aa8:	dcf9      	bgt.n	28a9e <lv_draw_mask_line+0xc0>
    else xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   28aaa:	3201      	adds	r2, #1
   28aac:	69b1      	ldr	r1, [r6, #24]
   28aae:	0212      	lsls	r2, r2, #8
   28ab0:	434a      	muls	r2, r1
   28ab2:	1292      	asrs	r2, r2, #10
    int32_t xei = xe >> 8;
   28ab4:	ea4f 2c22 	mov.w	ip, r2, asr #8
    if(xef == 0) px_h = 255;
   28ab8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    else px_h = 255 - (((255 - xef) * p->spx) >> 8);
   28abc:	bf1f      	itttt	ne
   28abe:	6a71      	ldrne	r1, [r6, #36]	; 0x24
   28ac0:	f1c2 07ff 	rsbne	r7, r2, #255	; 0xff
   28ac4:	434f      	mulne	r7, r1
   28ac6:	123f      	asrne	r7, r7, #8
   28ac8:	bf14      	ite	ne
   28aca:	f1c7 07ff 	rsbne	r7, r7, #255	; 0xff
    if(xef == 0) px_h = 255;
   28ace:	27ff      	moveq	r7, #255	; 0xff
    int32_t k = xei - abs_x;
   28ad0:	ebac 0505 	sub.w	r5, ip, r5
    if(xef) {
   28ad4:	2a00      	cmp	r2, #0
   28ad6:	d050      	beq.n	28b7a <lv_draw_mask_line+0x19c>
        if(k >= 0 && k < len) {
   28ad8:	2d00      	cmp	r5, #0
   28ada:	db0f      	blt.n	28afc <lv_draw_mask_line+0x11e>
   28adc:	42ab      	cmp	r3, r5
   28ade:	dd0d      	ble.n	28afc <lv_draw_mask_line+0x11e>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   28ae0:	f1c7 01ff 	rsb	r1, r7, #255	; 0xff
   28ae4:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
   28ae8:	434a      	muls	r2, r1
   28aea:	f3c2 2147 	ubfx	r1, r2, #9, #8
            if(p->inv) m = 255 - m;
   28aee:	b908      	cbnz	r0, 28af4 <lv_draw_mask_line+0x116>
            m = 255 - (((255 - xef) * (255 - px_h)) >> 9);
   28af0:	43c9      	mvns	r1, r1
   28af2:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   28af4:	5d60      	ldrb	r0, [r4, r5]
   28af6:	f7ff ff60 	bl	289ba <mask_mix>
   28afa:	5560      	strb	r0, [r4, r5]
        k++;
   28afc:	1c6a      	adds	r2, r5, #1
    while(px_h > p->spx) {
   28afe:	6a71      	ldr	r1, [r6, #36]	; 0x24
   28b00:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
   28b04:	428f      	cmp	r7, r1
   28b06:	f000 0002 	and.w	r0, r0, #2
   28b0a:	dc16      	bgt.n	28b3a <lv_draw_mask_line+0x15c>
    if(k < len && k >= 0) {
   28b0c:	4293      	cmp	r3, r2
   28b0e:	dd28      	ble.n	28b62 <lv_draw_mask_line+0x184>
   28b10:	2a00      	cmp	r2, #0
   28b12:	db26      	blt.n	28b62 <lv_draw_mask_line+0x184>
        int32_t x_inters = (px_h * p->xy_steep) >> 10;
   28b14:	69b1      	ldr	r1, [r6, #24]
   28b16:	4379      	muls	r1, r7
   28b18:	1289      	asrs	r1, r1, #10
        m = (x_inters * px_h) >> 9;
   28b1a:	4379      	muls	r1, r7
        if(p->yx_steep < 0) m = 255 - m;
   28b1c:	69f7      	ldr	r7, [r6, #28]
        m = (x_inters * px_h) >> 9;
   28b1e:	f3c1 2147 	ubfx	r1, r1, #9, #8
        if(p->yx_steep < 0) m = 255 - m;
   28b22:	2f00      	cmp	r7, #0
   28b24:	bfbc      	itt	lt
   28b26:	43c9      	mvnlt	r1, r1
   28b28:	b2c9      	uxtblt	r1, r1
        if(p->inv) m = 255 - m;
   28b2a:	b108      	cbz	r0, 28b30 <lv_draw_mask_line+0x152>
   28b2c:	43c9      	mvns	r1, r1
   28b2e:	b2c9      	uxtb	r1, r1
        mask_buf[k] = mask_mix(mask_buf[k], m);
   28b30:	5ca0      	ldrb	r0, [r4, r2]
   28b32:	f7ff ff42 	bl	289ba <mask_mix>
   28b36:	54a0      	strb	r0, [r4, r2]
   28b38:	e013      	b.n	28b62 <lv_draw_mask_line+0x184>
        if(k >= 0 && k < len) {
   28b3a:	2a00      	cmp	r2, #0
   28b3c:	db0b      	blt.n	28b56 <lv_draw_mask_line+0x178>
   28b3e:	4293      	cmp	r3, r2
   28b40:	dd09      	ble.n	28b56 <lv_draw_mask_line+0x178>
            m = px_h - (p->spx >> 1);
   28b42:	eba7 0161 	sub.w	r1, r7, r1, asr #1
   28b46:	b2c9      	uxtb	r1, r1
            if(p->inv) m = 255 - m;
   28b48:	b108      	cbz	r0, 28b4e <lv_draw_mask_line+0x170>
   28b4a:	43c9      	mvns	r1, r1
   28b4c:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   28b4e:	5ca0      	ldrb	r0, [r4, r2]
   28b50:	f7ff ff33 	bl	289ba <mask_mix>
   28b54:	54a0      	strb	r0, [r4, r2]
        px_h -= p->spx;
   28b56:	6a71      	ldr	r1, [r6, #36]	; 0x24
        k++;
   28b58:	3201      	adds	r2, #1
        if(k >= len) break;
   28b5a:	4293      	cmp	r3, r2
        px_h -= p->spx;
   28b5c:	eba7 0701 	sub.w	r7, r7, r1
        if(k >= len) break;
   28b60:	dccd      	bgt.n	28afe <lv_draw_mask_line+0x120>
    if(p->inv) {
   28b62:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28b66:	0788      	lsls	r0, r1, #30
   28b68:	d509      	bpl.n	28b7e <lv_draw_mask_line+0x1a0>
        if(k > len) {
   28b6a:	42ab      	cmp	r3, r5
   28b6c:	f6ff af58 	blt.w	28a20 <lv_draw_mask_line+0x42>
        if(k >= 0) {
   28b70:	2d00      	cmp	r5, #0
   28b72:	f6ff af74 	blt.w	28a5e <lv_draw_mask_line+0x80>
            _lv_memset_00(&mask_buf[0], k);
   28b76:	4629      	mov	r1, r5
   28b78:	e764      	b.n	28a44 <lv_draw_mask_line+0x66>
    int32_t k = xei - abs_x;
   28b7a:	462a      	mov	r2, r5
   28b7c:	e7bf      	b.n	28afe <lv_draw_mask_line+0x120>
        if(k < 0) {
   28b7e:	1c50      	adds	r0, r2, #1
   28b80:	f53f af4e 	bmi.w	28a20 <lv_draw_mask_line+0x42>
        if(k <= len) {
   28b84:	4283      	cmp	r3, r0
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   28b86:	f6ff af6a 	blt.w	28a5e <lv_draw_mask_line+0x80>
   28b8a:	1a19      	subs	r1, r3, r0
   28b8c:	4420      	add	r0, r4
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   28b8e:	f7ff ff22 	bl	289d6 <_lv_memset_00>
   28b92:	e764      	b.n	28a5e <lv_draw_mask_line+0x80>
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   28b94:	69b1      	ldr	r1, [r6, #24]
   28b96:	fb02 f701 	mul.w	r7, r2, r1
    if(p->xy_steep > 0) x_at_y++;
   28b9a:	2900      	cmp	r1, #0
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   28b9c:	ea4f 27a7 	mov.w	r7, r7, asr #10
    if(p->xy_steep > 0) x_at_y++;
   28ba0:	bfcc      	ite	gt
   28ba2:	f107 0e01 	addgt.w	lr, r7, #1
    x_at_y = (int32_t)((int32_t)p->xy_steep * abs_y) >> 10;
   28ba6:	46be      	movle	lr, r7
    if(x_at_y < abs_x) {
   28ba8:	45ae      	cmp	lr, r5
   28baa:	fa5f f08c 	uxtb.w	r0, ip
   28bae:	f6ff af68 	blt.w	28a82 <lv_draw_mask_line+0xa4>
    if(x_at_y > abs_x + len) {
   28bb2:	eb03 0c05 	add.w	ip, r3, r5
   28bb6:	4567      	cmp	r7, ip
   28bb8:	f73f af71 	bgt.w	28a9e <lv_draw_mask_line+0xc0>
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   28bbc:	1c57      	adds	r7, r2, #1
   28bbe:	023f      	lsls	r7, r7, #8
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   28bc0:	ea4f 2e02 	mov.w	lr, r2, lsl #8
    int32_t xe = (((abs_y + 1) << 8) * p->xy_steep) >> 10;
   28bc4:	434f      	muls	r7, r1
    int32_t xs = ((abs_y << 8) * p->xy_steep) >> 10;
   28bc6:	fb01 fe0e 	mul.w	lr, r1, lr
    int32_t xei = xe >> 8;
   28bca:	ea4f 48a7 	mov.w	r8, r7, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   28bce:	ebb8 4fae 	cmp.w	r8, lr, asr #18
    int32_t xsf = xs & 0xFF;
   28bd2:	f3ce 2c87 	ubfx	ip, lr, #10, #8
    k = xsi - abs_x;
   28bd6:	ebc5 42ae 	rsb	r2, r5, lr, asr #18
    if(xsi != xei && (p->xy_steep < 0 && xsf == 0)) {
   28bda:	f000 8095 	beq.w	28d08 <lv_draw_mask_line+0x32a>
   28bde:	2900      	cmp	r1, #0
   28be0:	da54      	bge.n	28c8c <lv_draw_mask_line+0x2ae>
   28be2:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
   28be6:	f1bc 0f00 	cmp.w	ip, #0
   28bea:	f000 808a 	beq.w	28d02 <lv_draw_mask_line+0x324>
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   28bee:	69f5      	ldr	r5, [r6, #28]
   28bf0:	fb05 f50c 	mul.w	r5, r5, ip
   28bf4:	426d      	negs	r5, r5
            if(k >= 0 && k < len) {
   28bf6:	2a00      	cmp	r2, #0
            y_inters = (xsf * (-p->yx_steep)) >> 10;
   28bf8:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   28bfc:	db0c      	blt.n	28c18 <lv_draw_mask_line+0x23a>
   28bfe:	4293      	cmp	r3, r2
   28c00:	dd0a      	ble.n	28c18 <lv_draw_mask_line+0x23a>
                m = (y_inters * xsf) >> 9;
   28c02:	fb05 f10c 	mul.w	r1, r5, ip
   28c06:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   28c0a:	b108      	cbz	r0, 28c10 <lv_draw_mask_line+0x232>
   28c0c:	43c9      	mvns	r1, r1
   28c0e:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28c10:	5ca0      	ldrb	r0, [r4, r2]
   28c12:	f7ff fed2 	bl	289ba <mask_mix>
   28c16:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   28c18:	f1b9 0f00 	cmp.w	r9, #0
   28c1c:	db18      	blt.n	28c50 <lv_draw_mask_line+0x272>
   28c1e:	454b      	cmp	r3, r9
   28c20:	dd16      	ble.n	28c50 <lv_draw_mask_line+0x272>
            int32_t x_inters = ((255 - y_inters) * (-p->xy_steep)) >> 10;
   28c22:	69b1      	ldr	r1, [r6, #24]
   28c24:	f1a5 00ff 	sub.w	r0, r5, #255	; 0xff
   28c28:	4341      	muls	r1, r0
   28c2a:	1288      	asrs	r0, r1, #10
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c2c:	f1c5 01ff 	rsb	r1, r5, #255	; 0xff
   28c30:	4341      	muls	r1, r0
                if(p->inv) m = 255 - m;
   28c32:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c36:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   28c3a:	0787      	lsls	r7, r0, #30
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c3c:	bf58      	it	pl
   28c3e:	43c9      	mvnpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28c40:	f814 0009 	ldrb.w	r0, [r4, r9]
                m = 255 - (((255 - y_inters) * x_inters) >> 9);
   28c44:	bf58      	it	pl
   28c46:	b2c9      	uxtbpl	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28c48:	f7ff feb7 	bl	289ba <mask_mix>
   28c4c:	f804 0009 	strb.w	r0, [r4, r9]
            if(p->inv) {
   28c50:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28c54:	078d      	lsls	r5, r1, #30
   28c56:	d514      	bpl.n	28c82 <lv_draw_mask_line+0x2a4>
                if(k > len) k = len;
   28c58:	454b      	cmp	r3, r9
   28c5a:	f6ff af00 	blt.w	28a5e <lv_draw_mask_line+0x80>
                else if(k > 0) _lv_memset_00(&mask_buf[0],  k);
   28c5e:	f1b9 0f00 	cmp.w	r9, #0
   28c62:	f77f aefc 	ble.w	28a5e <lv_draw_mask_line+0x80>
   28c66:	4649      	mov	r1, r9
   28c68:	e6ec      	b.n	28a44 <lv_draw_mask_line+0x66>
        k++;
   28c6a:	3201      	adds	r2, #1
   28c6c:	429a      	cmp	r2, r3
   28c6e:	bfa8      	it	ge
   28c70:	461a      	movge	r2, r3
                if(k == 0) return LV_DRAW_MASK_RES_TRANSP;
   28c72:	2a00      	cmp	r2, #0
   28c74:	f43f aed4 	beq.w	28a20 <lv_draw_mask_line+0x42>
                else if(k > 0) _lv_memset_00(&mask_buf[k],  len - k);
   28c78:	f77f aef1 	ble.w	28a5e <lv_draw_mask_line+0x80>
   28c7c:	1a99      	subs	r1, r3, r2
   28c7e:	18a0      	adds	r0, r4, r2
   28c80:	e785      	b.n	28b8e <lv_draw_mask_line+0x1b0>
            k += 2;
   28c82:	1c50      	adds	r0, r2, #1
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   28c84:	4283      	cmp	r3, r0
   28c86:	db3a      	blt.n	28cfe <lv_draw_mask_line+0x320>
                if(k >= 0) _lv_memset_00(&mask_buf[k],  len - k);
   28c88:	2800      	cmp	r0, #0
   28c8a:	e77c      	b.n	28b86 <lv_draw_mask_line+0x1a8>
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   28c8c:	69f5      	ldr	r5, [r6, #28]
   28c8e:	f1cc 01ff 	rsb	r1, ip, #255	; 0xff
   28c92:	434d      	muls	r5, r1
            if(k >= 0 && k < len) {
   28c94:	2a00      	cmp	r2, #0
            y_inters = ((255 - xsf) * p->yx_steep) >> 10;
   28c96:	ea4f 25a5 	mov.w	r5, r5, asr #10
            if(k >= 0 && k < len) {
   28c9a:	db0b      	blt.n	28cb4 <lv_draw_mask_line+0x2d6>
   28c9c:	4293      	cmp	r3, r2
   28c9e:	dd09      	ble.n	28cb4 <lv_draw_mask_line+0x2d6>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   28ca0:	4369      	muls	r1, r5
   28ca2:	f3c1 2147 	ubfx	r1, r1, #9, #8
                if(p->inv) m = 255 - m;
   28ca6:	b908      	cbnz	r0, 28cac <lv_draw_mask_line+0x2ce>
                m = 255 - ((y_inters * (255 - xsf)) >> 9);
   28ca8:	43c9      	mvns	r1, r1
   28caa:	b2c9      	uxtb	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28cac:	5ca0      	ldrb	r0, [r4, r2]
   28cae:	f7ff fe84 	bl	289ba <mask_mix>
   28cb2:	54a0      	strb	r0, [r4, r2]
            if(k >= 0 && k < len) {
   28cb4:	1c57      	adds	r7, r2, #1
   28cb6:	d414      	bmi.n	28ce2 <lv_draw_mask_line+0x304>
   28cb8:	42bb      	cmp	r3, r7
   28cba:	dd12      	ble.n	28ce2 <lv_draw_mask_line+0x304>
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   28cbc:	69b1      	ldr	r1, [r6, #24]
                if(p->inv) m = 255 - m;
   28cbe:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
            int32_t x_inters = ((255 - y_inters) * p->xy_steep) >> 10;
   28cc2:	f1c5 05ff 	rsb	r5, r5, #255	; 0xff
   28cc6:	4369      	muls	r1, r5
   28cc8:	1289      	asrs	r1, r1, #10
                m = ((255 - y_inters) * x_inters) >> 9;
   28cca:	434d      	muls	r5, r1
                if(p->inv) m = 255 - m;
   28ccc:	0780      	lsls	r0, r0, #30
                m = ((255 - y_inters) * x_inters) >> 9;
   28cce:	f3c5 2147 	ubfx	r1, r5, #9, #8
                if(p->inv) m = 255 - m;
   28cd2:	bf48      	it	mi
   28cd4:	43c9      	mvnmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28cd6:	5de0      	ldrb	r0, [r4, r7]
                if(p->inv) m = 255 - m;
   28cd8:	bf48      	it	mi
   28cda:	b2c9      	uxtbmi	r1, r1
                mask_buf[k] = mask_mix(mask_buf[k], m);
   28cdc:	f7ff fe6d 	bl	289ba <mask_mix>
   28ce0:	55e0      	strb	r0, [r4, r7]
            if(p->inv) {
   28ce2:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28ce6:	0789      	lsls	r1, r1, #30
   28ce8:	d507      	bpl.n	28cfa <lv_draw_mask_line+0x31c>
                if(k > len)  return LV_DRAW_MASK_RES_TRANSP;
   28cea:	4293      	cmp	r3, r2
   28cec:	f6ff ae98 	blt.w	28a20 <lv_draw_mask_line+0x42>
                if(k >= 0) _lv_memset_00(&mask_buf[0],  k);
   28cf0:	2a00      	cmp	r2, #0
   28cf2:	f6ff aeb4 	blt.w	28a5e <lv_draw_mask_line+0x80>
   28cf6:	4611      	mov	r1, r2
   28cf8:	e6a4      	b.n	28a44 <lv_draw_mask_line+0x66>
            k++;
   28cfa:	3202      	adds	r2, #2
   28cfc:	e7b6      	b.n	28c6c <lv_draw_mask_line+0x28e>
                if(k > len) return LV_DRAW_MASK_RES_FULL_COVER;
   28cfe:	2001      	movs	r0, #1
   28d00:	e688      	b.n	28a14 <lv_draw_mask_line+0x36>
   28d02:	464a      	mov	r2, r9
        xsf = 0xFF;
   28d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if(k >= 0 && k < len) {
   28d08:	2a00      	cmp	r2, #0
   28d0a:	db0d      	blt.n	28d28 <lv_draw_mask_line+0x34a>
   28d0c:	4293      	cmp	r3, r2
   28d0e:	dd0b      	ble.n	28d28 <lv_draw_mask_line+0x34a>
    int32_t xef = xe & 0xFF;
   28d10:	f3c7 2187 	ubfx	r1, r7, #10, #8
            m = (xsf + xef) >> 1;
   28d14:	4461      	add	r1, ip
   28d16:	f3c1 0147 	ubfx	r1, r1, #1, #8
            if(p->inv) m = 255 - m;
   28d1a:	b108      	cbz	r0, 28d20 <lv_draw_mask_line+0x342>
   28d1c:	43c9      	mvns	r1, r1
   28d1e:	b2c9      	uxtb	r1, r1
            mask_buf[k] = mask_mix(mask_buf[k], m);
   28d20:	5ca0      	ldrb	r0, [r4, r2]
   28d22:	f7ff fe4a 	bl	289ba <mask_mix>
   28d26:	54a0      	strb	r0, [r4, r2]
        if(p->inv) {
   28d28:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   28d2c:	0789      	lsls	r1, r1, #30
   28d2e:	d59c      	bpl.n	28c6a <lv_draw_mask_line+0x28c>
            k = xsi - abs_x;
   28d30:	eba8 0105 	sub.w	r1, r8, r5
            if(k >= len) {
   28d34:	428b      	cmp	r3, r1
   28d36:	f77f ae73 	ble.w	28a20 <lv_draw_mask_line+0x42>
            if(k >= 0) _lv_memset_00(&mask_buf[0], k);
   28d3a:	2900      	cmp	r1, #0
   28d3c:	f6ff ae8f 	blt.w	28a5e <lv_draw_mask_line+0x80>
   28d40:	e680      	b.n	28a44 <lv_draw_mask_line+0x66>

00028d42 <_lv_memcpy_small.constprop.0>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28d42:	680a      	ldr	r2, [r1, #0]
   28d44:	6002      	str	r2, [r0, #0]
   28d46:	684a      	ldr	r2, [r1, #4]
   28d48:	6042      	str	r2, [r0, #4]
}
   28d4a:	4770      	bx	lr

00028d4c <lv_draw_mask_radius>:
{
   28d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28d50:	b08d      	sub	sp, #52	; 0x34
   28d52:	4605      	mov	r5, r0
   28d54:	9f16      	ldr	r7, [sp, #88]	; 0x58
    bool outer = p->cfg.outer;
   28d56:	f897 8012 	ldrb.w	r8, [r7, #18]
    int32_t radius = p->cfg.radius;
   28d5a:	f9b7 a010 	ldrsh.w	sl, [r7, #16]
{
   28d5e:	468b      	mov	fp, r1
   28d60:	461c      	mov	r4, r3
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   28d62:	f107 0108 	add.w	r1, r7, #8
    bool outer = p->cfg.outer;
   28d66:	f008 0301 	and.w	r3, r8, #1
   28d6a:	a80a      	add	r0, sp, #40	; 0x28
{
   28d6c:	4691      	mov	r9, r2
    bool outer = p->cfg.outer;
   28d6e:	9301      	str	r3, [sp, #4]
   28d70:	f7ff ffe7 	bl	28d42 <_lv_memcpy_small.constprop.0>
    if(outer == false) {
   28d74:	9b01      	ldr	r3, [sp, #4]
   28d76:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
   28d7a:	bbc3      	cbnz	r3, 28dee <lv_draw_mask_radius+0xa2>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28d7c:	454a      	cmp	r2, r9
   28d7e:	dd01      	ble.n	28d84 <lv_draw_mask_radius+0x38>
                    return LV_DRAW_MASK_RES_TRANSP;
   28d80:	2000      	movs	r0, #0
   28d82:	e037      	b.n	28df4 <lv_draw_mask_radius+0xa8>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28d84:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   28d88:	454b      	cmp	r3, r9
   28d8a:	dbf9      	blt.n	28d80 <lv_draw_mask_radius+0x34>
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   28d8c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
   28d90:	eb01 030a 	add.w	r3, r1, sl
   28d94:	459b      	cmp	fp, r3
   28d96:	eba1 060b 	sub.w	r6, r1, fp
   28d9a:	db07      	blt.n	28dac <lv_draw_mask_radius+0x60>
   28d9c:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
   28da0:	eb04 000b 	add.w	r0, r4, fp
   28da4:	eba3 030a 	sub.w	r3, r3, sl
   28da8:	4298      	cmp	r0, r3
   28daa:	dd09      	ble.n	28dc0 <lv_draw_mask_radius+0x74>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   28dac:	eb02 030a 	add.w	r3, r2, sl
    if((abs_x >= rect.x1 + radius && abs_x + len <= rect.x2 - radius) ||
   28db0:	4599      	cmp	r9, r3
   28db2:	f9bd 002e 	ldrsh.w	r0, [sp, #46]	; 0x2e
   28db6:	db3a      	blt.n	28e2e <lv_draw_mask_radius+0xe2>
       (abs_y >= rect.y1 + radius && abs_y <= rect.y2 - radius)) {
   28db8:	eba0 030a 	sub.w	r3, r0, sl
   28dbc:	4599      	cmp	r9, r3
   28dbe:	dc36      	bgt.n	28e2e <lv_draw_mask_radius+0xe2>
        if(outer == false) {
   28dc0:	9b01      	ldr	r3, [sp, #4]
   28dc2:	bb23      	cbnz	r3, 28e0e <lv_draw_mask_radius+0xc2>
            if(last > len) return LV_DRAW_MASK_RES_TRANSP;
   28dc4:	42b4      	cmp	r4, r6
   28dc6:	dbdb      	blt.n	28d80 <lv_draw_mask_radius+0x34>
            if(last >= 0) {
   28dc8:	2e00      	cmp	r6, #0
   28dca:	db03      	blt.n	28dd4 <lv_draw_mask_radius+0x88>
                _lv_memset_00(&mask_buf[0], last);
   28dcc:	4631      	mov	r1, r6
   28dce:	4628      	mov	r0, r5
   28dd0:	f7ff fe01 	bl	289d6 <_lv_memset_00>
            int32_t first = rect.x2 - abs_x + 1;
   28dd4:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   28dd8:	3101      	adds	r1, #1
   28dda:	eba1 000b 	sub.w	r0, r1, fp
            if(first <= 0) return LV_DRAW_MASK_RES_TRANSP;
   28dde:	2800      	cmp	r0, #0
   28de0:	ddce      	ble.n	28d80 <lv_draw_mask_radius+0x34>
            else if(first < len) {
   28de2:	42a0      	cmp	r0, r4
   28de4:	da0e      	bge.n	28e04 <lv_draw_mask_radius+0xb8>
                _lv_memset_00(&mask_buf[first], len - first);
   28de6:	1a61      	subs	r1, r4, r1
   28de8:	4459      	add	r1, fp
                    _lv_memset_00(&mask_buf[first], len_tmp);
   28dea:	4428      	add	r0, r5
   28dec:	e0b8      	b.n	28f60 <lv_draw_mask_radius+0x214>
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28dee:	454a      	cmp	r2, r9
   28df0:	dd03      	ble.n	28dfa <lv_draw_mask_radius+0xae>
            return LV_DRAW_MASK_RES_FULL_COVER;
   28df2:	2001      	movs	r0, #1
}
   28df4:	b00d      	add	sp, #52	; 0x34
   28df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(abs_y < rect.y1 || abs_y > rect.y2) {
   28dfa:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
   28dfe:	454b      	cmp	r3, r9
   28e00:	dac4      	bge.n	28d8c <lv_draw_mask_radius+0x40>
   28e02:	e7f6      	b.n	28df2 <lv_draw_mask_radius+0xa6>
            if(last == 0 && first == len) return LV_DRAW_MASK_RES_FULL_COVER;
   28e04:	b90e      	cbnz	r6, 28e0a <lv_draw_mask_radius+0xbe>
   28e06:	42a0      	cmp	r0, r4
   28e08:	d0f3      	beq.n	28df2 <lv_draw_mask_radius+0xa6>
    return LV_DRAW_MASK_RES_CHANGED;
   28e0a:	2002      	movs	r0, #2
   28e0c:	e7f2      	b.n	28df4 <lv_draw_mask_radius+0xa8>
            if(first < 0) first = 0;
   28e0e:	ea26 70e6 	bic.w	r0, r6, r6, asr #31
            if(first <= len) {
   28e12:	42a0      	cmp	r0, r4
   28e14:	dcf9      	bgt.n	28e0a <lv_draw_mask_radius+0xbe>
                int32_t last =  rect.x2 - abs_x - first + 1;
   28e16:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	; 0x2c
   28e1a:	3101      	adds	r1, #1
   28e1c:	eba1 010b 	sub.w	r1, r1, fp
                if(first + last > len) last = len - first;
   28e20:	42a1      	cmp	r1, r4
                int32_t last =  rect.x2 - abs_x - first + 1;
   28e22:	bfd4      	ite	le
   28e24:	1a09      	suble	r1, r1, r0
                if(first + last > len) last = len - first;
   28e26:	1a21      	subgt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   28e28:	2900      	cmp	r1, #0
   28e2a:	dbee      	blt.n	28e0a <lv_draw_mask_radius+0xbe>
   28e2c:	e7dd      	b.n	28dea <lv_draw_mask_radius+0x9e>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   28e2e:	f8bd b02c 	ldrh.w	fp, [sp, #44]	; 0x2c
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   28e32:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
    abs_y -= rect.y1;
   28e36:	eba9 0902 	sub.w	r9, r9, r2
   28e3a:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28e3e:	3001      	adds	r0, #1
   28e40:	fa0f f989 	sxth.w	r9, r9
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   28e44:	ebab 0b01 	sub.w	fp, fp, r1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   28e48:	1a80      	subs	r0, r0, r2
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   28e4a:	435b      	muls	r3, r3
    if(abs_y < radius || abs_y > h - radius - 1) {
   28e4c:	45ca      	cmp	sl, r9
    int32_t w = lv_area_get_width(&rect);
   28e4e:	fa0f fb8b 	sxth.w	fp, fp
    int32_t h = lv_area_get_height(&rect);
   28e52:	b200      	sxth	r0, r0
    uint32_t r2 = p->cfg.radius * p->cfg.radius;
   28e54:	9302      	str	r3, [sp, #8]
    if(abs_y < radius || abs_y > h - radius - 1) {
   28e56:	f300 8193 	bgt.w	29180 <lv_draw_mask_radius+0x434>
   28e5a:	1e43      	subs	r3, r0, #1
   28e5c:	eba3 030a 	sub.w	r3, r3, sl
   28e60:	4599      	cmp	r9, r3
   28e62:	ddd2      	ble.n	28e0a <lv_draw_mask_radius+0xbe>
            y = radius - (h - abs_y) + 1;
   28e64:	eba9 0900 	sub.w	r9, r9, r0
            if((y - 1) == p->y_prev) {
   28e68:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   28e6a:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - (h - abs_y) + 1;
   28e6e:	eb09 000a 	add.w	r0, r9, sl
        if(radius <= 256) sqrt_mask = 0x800;
   28e72:	bfd4      	ite	le
   28e74:	f44f 6800 	movle.w	r8, #2048	; 0x800
   28e78:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if((y - 1) == p->y_prev) {
   28e7c:	4298      	cmp	r0, r3
            y = radius - (h - abs_y) + 1;
   28e7e:	f100 0901 	add.w	r9, r0, #1
            if((y - 1) == p->y_prev) {
   28e82:	d070      	beq.n	28f66 <lv_draw_mask_radius+0x21a>
                _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   28e84:	9b02      	ldr	r3, [sp, #8]
   28e86:	4642      	mov	r2, r8
   28e88:	a907      	add	r1, sp, #28
   28e8a:	fb00 3010 	mls	r0, r0, r0, r3
   28e8e:	f001 fc10 	bl	2a6b2 <_lv_sqrt>
   28e92:	e06a      	b.n	28f6a <lv_draw_mask_radius+0x21e>
                x0.i = p->y_prev_x.i;
   28e94:	69bb      	ldr	r3, [r7, #24]
   28e96:	9306      	str	r3, [sp, #24]
            _lv_sqrt(r2 - ((y - 1) * (y - 1)), &x1, sqrt_mask);
   28e98:	9802      	ldr	r0, [sp, #8]
   28e9a:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   28e9e:	fb03 0013 	mls	r0, r3, r3, r0
   28ea2:	4642      	mov	r2, r8
   28ea4:	a907      	add	r1, sp, #28
   28ea6:	9303      	str	r3, [sp, #12]
   28ea8:	f001 fc03 	bl	2a6b2 <_lv_sqrt>
            p->y_prev = y - 1;
   28eac:	9b03      	ldr	r3, [sp, #12]
   28eae:	617b      	str	r3, [r7, #20]
            p->y_prev_x.i = x1.i;
   28eb0:	9b07      	ldr	r3, [sp, #28]
            p->y_prev_x.i = x0.i;
   28eb2:	61bb      	str	r3, [r7, #24]
        if(x0.i == x1.i - 1 && x1.f == 0) {
   28eb4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   28eb8:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   28ebc:	3b01      	subs	r3, #1
   28ebe:	4299      	cmp	r1, r3
   28ec0:	d107      	bne.n	28ed2 <lv_draw_mask_radius+0x186>
   28ec2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   28ec6:	b923      	cbnz	r3, 28ed2 <lv_draw_mask_radius+0x186>
            x1.f = 0xFF;
   28ec8:	23ff      	movs	r3, #255	; 0xff
            x1.i--;
   28eca:	f8ad 101c 	strh.w	r1, [sp, #28]
            x1.f = 0xFF;
   28ece:	f8ad 301e 	strh.w	r3, [sp, #30]
        if(x0.i == x1.i) {
   28ed2:	eb06 070b 	add.w	r7, r6, fp
   28ed6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   28eda:	ea6f 0b01 	mvn.w	fp, r1
   28ede:	44d3      	add	fp, sl
   28ee0:	eba7 030b 	sub.w	r3, r7, fp
   28ee4:	4288      	cmp	r0, r1
   28ee6:	eb06 0a0b 	add.w	sl, r6, fp
   28eea:	9303      	str	r3, [sp, #12]
   28eec:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
   28ef0:	d152      	bne.n	28f98 <lv_draw_mask_radius+0x24c>
            lv_opa_t m = (x0.f + x1.f) >> 1;
   28ef2:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   28ef6:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(outer) m = 255 - m;
   28efa:	9b01      	ldr	r3, [sp, #4]
            lv_opa_t m = (x0.f + x1.f) >> 1;
   28efc:	440a      	add	r2, r1
   28efe:	f3c2 0247 	ubfx	r2, r2, #1, #8
            if(outer) m = 255 - m;
   28f02:	b10b      	cbz	r3, 28f08 <lv_draw_mask_radius+0x1bc>
   28f04:	43d2      	mvns	r2, r2
   28f06:	b2d2      	uxtb	r2, r2
            if(kl >= 0 && kl < len) {
   28f08:	f1ba 0f00 	cmp.w	sl, #0
   28f0c:	db08      	blt.n	28f20 <lv_draw_mask_radius+0x1d4>
   28f0e:	4554      	cmp	r4, sl
   28f10:	dd06      	ble.n	28f20 <lv_draw_mask_radius+0x1d4>
                mask_buf[kl] = mask_mix(mask_buf[kl], m);
   28f12:	f815 000a 	ldrb.w	r0, [r5, sl]
   28f16:	4611      	mov	r1, r2
   28f18:	f7ff fd4f 	bl	289ba <mask_mix>
   28f1c:	f805 000a 	strb.w	r0, [r5, sl]
            if(kr >= 0 && kr < len) {
   28f20:	2e00      	cmp	r6, #0
   28f22:	db06      	blt.n	28f32 <lv_draw_mask_radius+0x1e6>
   28f24:	42b4      	cmp	r4, r6
   28f26:	dd04      	ble.n	28f32 <lv_draw_mask_radius+0x1e6>
                mask_buf[kr] = mask_mix(mask_buf[kr], m);
   28f28:	5da8      	ldrb	r0, [r5, r6]
   28f2a:	4611      	mov	r1, r2
   28f2c:	f7ff fd45 	bl	289ba <mask_mix>
   28f30:	55a8      	strb	r0, [r5, r6]
            if(outer == false) {
   28f32:	9b01      	ldr	r3, [sp, #4]
   28f34:	bb23      	cbnz	r3, 28f80 <lv_draw_mask_radius+0x234>
                if(kl > len)  {
   28f36:	4554      	cmp	r4, sl
   28f38:	f6ff af22 	blt.w	28d80 <lv_draw_mask_radius+0x34>
                if(kl >= 0) {
   28f3c:	f1ba 0f00 	cmp.w	sl, #0
   28f40:	db03      	blt.n	28f4a <lv_draw_mask_radius+0x1fe>
                    _lv_memset_00(&mask_buf[0], kl);
   28f42:	4651      	mov	r1, sl
   28f44:	4628      	mov	r0, r5
   28f46:	f7ff fd46 	bl	289d6 <_lv_memset_00>
                if(kr < 0) {
   28f4a:	9b03      	ldr	r3, [sp, #12]
   28f4c:	2b00      	cmp	r3, #0
   28f4e:	f6ff af17 	blt.w	28d80 <lv_draw_mask_radius+0x34>
                if(kr <= len) {
   28f52:	429c      	cmp	r4, r3
   28f54:	f6ff af59 	blt.w	28e0a <lv_draw_mask_radius+0xbe>
                    _lv_memset_00(&mask_buf[kr], len - kr);
   28f58:	1be1      	subs	r1, r4, r7
   28f5a:	442b      	add	r3, r5
   28f5c:	4459      	add	r1, fp
   28f5e:	4618      	mov	r0, r3
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   28f60:	f7ff fd39 	bl	289d6 <_lv_memset_00>
   28f64:	e751      	b.n	28e0a <lv_draw_mask_radius+0xbe>
                x1.i = p->y_prev_x.i;
   28f66:	69bb      	ldr	r3, [r7, #24]
   28f68:	9307      	str	r3, [sp, #28]
            _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   28f6a:	9b02      	ldr	r3, [sp, #8]
   28f6c:	4642      	mov	r2, r8
   28f6e:	fb09 3019 	mls	r0, r9, r9, r3
   28f72:	a906      	add	r1, sp, #24
   28f74:	f001 fb9d 	bl	2a6b2 <_lv_sqrt>
            p->y_prev_x.i = x0.i;
   28f78:	9b06      	ldr	r3, [sp, #24]
            p->y_prev = y;
   28f7a:	f8c7 9014 	str.w	r9, [r7, #20]
            p->y_prev_x.i = x0.i;
   28f7e:	e798      	b.n	28eb2 <lv_draw_mask_radius+0x166>
                kl++;
   28f80:	f10a 0001 	add.w	r0, sl, #1
   28f84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   28f88:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   28f8a:	bfac      	ite	ge
   28f8c:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   28f8e:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   28f90:	42a0      	cmp	r0, r4
   28f92:	f6bf af3a 	bge.w	28e0a <lv_draw_mask_radius+0xbe>
   28f96:	e747      	b.n	28e28 <lv_draw_mask_radius+0xdc>
            if(outer) {
   28f98:	9b01      	ldr	r3, [sp, #4]
   28f9a:	b173      	cbz	r3, 28fba <lv_draw_mask_radius+0x26e>
                int32_t first = kl + 1;
   28f9c:	f10a 0001 	add.w	r0, sl, #1
                if(first < 0) first = 0;
   28fa0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
                if(len_tmp + first > len) len_tmp = len - first;
   28fa4:	42b4      	cmp	r4, r6
                int32_t len_tmp = kr - first;
   28fa6:	bfac      	ite	ge
   28fa8:	1a31      	subge	r1, r6, r0
                if(len_tmp + first > len) len_tmp = len - first;
   28faa:	1a21      	sublt	r1, r4, r0
                if(first < len && len_tmp >= 0) {
   28fac:	42a0      	cmp	r0, r4
   28fae:	da04      	bge.n	28fba <lv_draw_mask_radius+0x26e>
   28fb0:	2900      	cmp	r1, #0
   28fb2:	db02      	blt.n	28fba <lv_draw_mask_radius+0x26e>
                    _lv_memset_00(&mask_buf[first], len_tmp);
   28fb4:	4428      	add	r0, r5
   28fb6:	f7ff fd0e 	bl	289d6 <_lv_memset_00>
            uint32_t i = x0.i + 1;
   28fba:	f8bd 7018 	ldrh.w	r7, [sp, #24]
            _lv_sqrt(r2 - (x0.i * x0.i), &y_prev, sqrt_mask);
   28fbe:	9b02      	ldr	r3, [sp, #8]
   28fc0:	a908      	add	r1, sp, #32
   28fc2:	4642      	mov	r2, r8
   28fc4:	fb07 3017 	mls	r0, r7, r7, r3
   28fc8:	f001 fb73 	bl	2a6b2 <_lv_sqrt>
            if(y_prev.f == 0) {
   28fcc:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
            uint32_t i = x0.i + 1;
   28fd0:	f107 0b01 	add.w	fp, r7, #1
            if(y_prev.f == 0) {
   28fd4:	b939      	cbnz	r1, 28fe6 <lv_draw_mask_radius+0x29a>
                y_prev.i--;
   28fd6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   28fda:	3901      	subs	r1, #1
   28fdc:	f8ad 1020 	strh.w	r1, [sp, #32]
                y_prev.f = 0xFF;
   28fe0:	21ff      	movs	r1, #255	; 0xff
   28fe2:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
            if(y_prev.i >= y) {
   28fe6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   28fea:	4549      	cmp	r1, r9
   28fec:	db31      	blt.n	29052 <lv_draw_mask_radius+0x306>
                _lv_sqrt(r2 - (i * i), &y_next, sqrt_mask);
   28fee:	9b02      	ldr	r3, [sp, #8]
   28ff0:	4642      	mov	r2, r8
   28ff2:	a909      	add	r1, sp, #36	; 0x24
   28ff4:	fb0b 301b 	mls	r0, fp, fp, r3
   28ff8:	f001 fb5b 	bl	2a6b2 <_lv_sqrt>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   28ffc:	f8bd 201a 	ldrh.w	r2, [sp, #26]
   29000:	f8bd 9026 	ldrh.w	r9, [sp, #38]	; 0x26
                if(outer) m = 255 - m;
   29004:	9b01      	ldr	r3, [sp, #4]
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   29006:	f1c2 01ff 	rsb	r1, r2, #255	; 0xff
   2900a:	f1c9 02ff 	rsb	r2, r9, #255	; 0xff
   2900e:	434a      	muls	r2, r1
   29010:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   29014:	b90b      	cbnz	r3, 2901a <lv_draw_mask_radius+0x2ce>
                m = 255 - (((255 - x0.f) * (255 - y_next.f)) >> 9);
   29016:	43d2      	mvns	r2, r2
   29018:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   2901a:	f1ba 0f00 	cmp.w	sl, #0
   2901e:	db08      	blt.n	29032 <lv_draw_mask_radius+0x2e6>
   29020:	4554      	cmp	r4, sl
   29022:	dd06      	ble.n	29032 <lv_draw_mask_radius+0x2e6>
   29024:	f815 000a 	ldrb.w	r0, [r5, sl]
   29028:	4611      	mov	r1, r2
   2902a:	f7ff fcc6 	bl	289ba <mask_mix>
   2902e:	f805 000a 	strb.w	r0, [r5, sl]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   29032:	2e00      	cmp	r6, #0
   29034:	db06      	blt.n	29044 <lv_draw_mask_radius+0x2f8>
   29036:	42b4      	cmp	r4, r6
   29038:	dd04      	ble.n	29044 <lv_draw_mask_radius+0x2f8>
   2903a:	5da8      	ldrb	r0, [r5, r6]
   2903c:	4611      	mov	r1, r2
   2903e:	f7ff fcbc 	bl	289ba <mask_mix>
   29042:	55a8      	strb	r0, [r5, r6]
                i++;
   29044:	9e03      	ldr	r6, [sp, #12]
                y_prev.f = y_next.f;
   29046:	f8ad 9022 	strh.w	r9, [sp, #34]	; 0x22
                kl--;
   2904a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
                i++;
   2904e:	f107 0b02 	add.w	fp, r7, #2
 */
LV_ATTRIBUTE_FAST_MEM static inline void sqrt_approx(lv_sqrt_res_t * q, lv_sqrt_res_t * ref, uint32_t x)
{
    x = x << 8; /*Upscale for extra precision*/

    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   29052:	f8bd 2020 	ldrh.w	r2, [sp, #32]
            for(; i <= x1.i; i++) {
   29056:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   2905a:	9303      	str	r3, [sp, #12]
   2905c:	f8bd c022 	ldrh.w	ip, [sp, #34]	; 0x22
   29060:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   29064:	0113      	lsls	r3, r2, #4
   29066:	f8bd 2026 	ldrh.w	r2, [sp, #38]	; 0x26
   2906a:	9304      	str	r3, [sp, #16]
   2906c:	46b1      	mov	r9, r6
   2906e:	465b      	mov	r3, fp
   29070:	4657      	mov	r7, sl
   29072:	2000      	movs	r0, #0
            for(; i <= x1.i; i++) {
   29074:	9903      	ldr	r1, [sp, #12]
   29076:	4299      	cmp	r1, r3
   29078:	d24a      	bcs.n	29110 <lv_draw_mask_radius+0x3c4>
   2907a:	460f      	mov	r7, r1
   2907c:	3701      	adds	r7, #1
   2907e:	45bb      	cmp	fp, r7
   29080:	eba7 010b 	sub.w	r1, r7, fp
   29084:	ebab 0e07 	sub.w	lr, fp, r7
   29088:	bf84      	itt	hi
   2908a:	2100      	movhi	r1, #0
   2908c:	f04f 0e00 	movhi.w	lr, #0
   29090:	eb0e 030a 	add.w	r3, lr, sl
   29094:	440e      	add	r6, r1
   29096:	b128      	cbz	r0, 290a4 <lv_draw_mask_radius+0x358>
   29098:	f8ad c022 	strh.w	ip, [sp, #34]	; 0x22
   2909c:	f8ad 8024 	strh.w	r8, [sp, #36]	; 0x24
   290a0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
            if(y_prev.f) {
   290a4:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
   290a8:	b1e2      	cbz	r2, 290e4 <lv_draw_mask_radius+0x398>
                m = (y_prev.f * x1.f) >> 9;
   290aa:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   290ae:	434a      	muls	r2, r1
                if(outer) m = 255 - m;
   290b0:	9901      	ldr	r1, [sp, #4]
                m = (y_prev.f * x1.f) >> 9;
   290b2:	f3c2 2247 	ubfx	r2, r2, #9, #8
                if(outer) m = 255 - m;
   290b6:	b109      	cbz	r1, 290bc <lv_draw_mask_radius+0x370>
   290b8:	43d2      	mvns	r2, r2
   290ba:	b2d2      	uxtb	r2, r2
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   290bc:	2b00      	cmp	r3, #0
   290be:	db06      	blt.n	290ce <lv_draw_mask_radius+0x382>
   290c0:	429c      	cmp	r4, r3
   290c2:	dd04      	ble.n	290ce <lv_draw_mask_radius+0x382>
   290c4:	5ce8      	ldrb	r0, [r5, r3]
   290c6:	4611      	mov	r1, r2
   290c8:	f7ff fc77 	bl	289ba <mask_mix>
   290cc:	54e8      	strb	r0, [r5, r3]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   290ce:	2e00      	cmp	r6, #0
   290d0:	db06      	blt.n	290e0 <lv_draw_mask_radius+0x394>
   290d2:	42b4      	cmp	r4, r6
   290d4:	dd04      	ble.n	290e0 <lv_draw_mask_radius+0x394>
   290d6:	5da8      	ldrb	r0, [r5, r6]
   290d8:	4611      	mov	r1, r2
   290da:	f7ff fc6e 	bl	289ba <mask_mix>
   290de:	55a8      	strb	r0, [r5, r6]
                kl--;
   290e0:	3b01      	subs	r3, #1
                kr++;
   290e2:	3601      	adds	r6, #1
            if(outer == 0) {
   290e4:	9a01      	ldr	r2, [sp, #4]
   290e6:	2a00      	cmp	r2, #0
   290e8:	f47f ae8f 	bne.w	28e0a <lv_draw_mask_radius+0xbe>
                kl++;
   290ec:	1c59      	adds	r1, r3, #1
                if(kl > len) {
   290ee:	428c      	cmp	r4, r1
   290f0:	f6ff ae46 	blt.w	28d80 <lv_draw_mask_radius+0x34>
                if(kl >= 0) _lv_memset_00(&mask_buf[0], kl);
   290f4:	2900      	cmp	r1, #0
   290f6:	db02      	blt.n	290fe <lv_draw_mask_radius+0x3b2>
   290f8:	4628      	mov	r0, r5
   290fa:	f7ff fc6c 	bl	289d6 <_lv_memset_00>
                if(kr < 0) {
   290fe:	2e00      	cmp	r6, #0
   29100:	f6ff ae3e 	blt.w	28d80 <lv_draw_mask_radius+0x34>
                if(kr < len) _lv_memset_00(&mask_buf[kr], len - kr);
   29104:	42b4      	cmp	r4, r6
   29106:	f77f ae80 	ble.w	28e0a <lv_draw_mask_radius+0xbe>
   2910a:	1ba1      	subs	r1, r4, r6
   2910c:	19a8      	adds	r0, r5, r6
   2910e:	e727      	b.n	28f60 <lv_draw_mask_radius+0x214>
    uint32_t raw = (ref->i << 4) + (ref->f >> 4);
   29110:	9904      	ldr	r1, [sp, #16]
   29112:	f3cc 120f 	ubfx	r2, ip, #4, #16
   29116:	1851      	adds	r1, r2, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   29118:	9a02      	ldr	r2, [sp, #8]
    uint32_t raw2 = raw * raw;
   2911a:	fb01 f001 	mul.w	r0, r1, r1
                sqrt_approx(&y_next, &y_prev, r2 - (i * i));
   2911e:	fb03 2213 	mls	r2, r3, r3, r2

    int32_t d = x - raw2;
   29122:	ebc0 2202 	rsb	r2, r0, r2, lsl #8
    d = (int32_t)d / (int32_t)(2 * raw) + raw;
   29126:	0048      	lsls	r0, r1, #1
   29128:	fb92 f2f0 	sdiv	r2, r2, r0
   2912c:	440a      	add	r2, r1

    q->i = d >> 4;
   2912e:	f3c2 180f 	ubfx	r8, r2, #4, #16
    q->f = (d & 0xF) << 4;
   29132:	0112      	lsls	r2, r2, #4
   29134:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
                if(outer) m = 255 - m;
   29138:	9801      	ldr	r0, [sp, #4]
                m = (y_prev.f + y_next.f) >> 1;
   2913a:	eb0c 0102 	add.w	r1, ip, r2
   2913e:	f3c1 0147 	ubfx	r1, r1, #1, #8
                if(outer) m = 255 - m;
   29142:	b108      	cbz	r0, 29148 <lv_draw_mask_radius+0x3fc>
   29144:	43c9      	mvns	r1, r1
   29146:	b2c9      	uxtb	r1, r1
                if(kl >= 0 && kl < len) mask_buf[kl] = mask_mix(mask_buf[kl], m);
   29148:	2f00      	cmp	r7, #0
   2914a:	db07      	blt.n	2915c <lv_draw_mask_radius+0x410>
   2914c:	42bc      	cmp	r4, r7
   2914e:	dd05      	ble.n	2915c <lv_draw_mask_radius+0x410>
   29150:	5de8      	ldrb	r0, [r5, r7]
   29152:	9105      	str	r1, [sp, #20]
   29154:	f7ff fc31 	bl	289ba <mask_mix>
   29158:	9905      	ldr	r1, [sp, #20]
   2915a:	55e8      	strb	r0, [r5, r7]
                if(kr >= 0 && kr < len) mask_buf[kr] = mask_mix(mask_buf[kr], m);
   2915c:	f1b9 0f00 	cmp.w	r9, #0
   29160:	db07      	blt.n	29172 <lv_draw_mask_radius+0x426>
   29162:	454c      	cmp	r4, r9
   29164:	dd05      	ble.n	29172 <lv_draw_mask_radius+0x426>
   29166:	f815 0009 	ldrb.w	r0, [r5, r9]
   2916a:	f7ff fc26 	bl	289ba <mask_mix>
   2916e:	f805 0009 	strb.w	r0, [r5, r9]
                kl--;
   29172:	3f01      	subs	r7, #1
                kr++;
   29174:	f109 0901 	add.w	r9, r9, #1
            for(; i <= x1.i; i++) {
   29178:	3301      	adds	r3, #1
                y_prev.f = y_next.f;
   2917a:	4694      	mov	ip, r2
            for(; i <= x1.i; i++) {
   2917c:	2001      	movs	r0, #1
   2917e:	e779      	b.n	29074 <lv_draw_mask_radius+0x328>
            if(y == p->y_prev) {
   29180:	697b      	ldr	r3, [r7, #20]
        if(radius <= 256) sqrt_mask = 0x800;
   29182:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
            y = radius - abs_y;
   29186:	ebaa 0909 	sub.w	r9, sl, r9
        if(radius <= 256) sqrt_mask = 0x800;
   2918a:	bfd4      	ite	le
   2918c:	f44f 6800 	movle.w	r8, #2048	; 0x800
   29190:	f44f 4800 	movgt.w	r8, #32768	; 0x8000
            if(y == p->y_prev) {
   29194:	454b      	cmp	r3, r9
   29196:	f43f ae7d 	beq.w	28e94 <lv_draw_mask_radius+0x148>
                _lv_sqrt(r2 - (y * y), &x0, sqrt_mask);
   2919a:	9b02      	ldr	r3, [sp, #8]
   2919c:	4642      	mov	r2, r8
   2919e:	a906      	add	r1, sp, #24
   291a0:	fb09 3019 	mls	r0, r9, r9, r3
   291a4:	f001 fa85 	bl	2a6b2 <_lv_sqrt>
   291a8:	e676      	b.n	28e98 <lv_draw_mask_radius+0x14c>

000291aa <grad_get>:
        _lv_mem_buf_release(mask_buf);
    }
}

LV_ATTRIBUTE_FAST_MEM static inline lv_color_t grad_get(const lv_draw_rect_dsc_t * dsc, lv_coord_t s, lv_coord_t i)
{
   291aa:	b570      	push	{r4, r5, r6, lr}
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   291ac:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   291b0:	fb04 f301 	mul.w	r3, r4, r1
    if(i <= min) return dsc->bg_color;
   291b4:	ebb2 2f23 	cmp.w	r2, r3, asr #8
    int32_t min = (dsc->bg_main_color_stop * s) >> 8;
   291b8:	ea4f 2523 	mov.w	r5, r3, asr #8
    if(i <= min) return dsc->bg_color;
   291bc:	dc01      	bgt.n	291c2 <grad_get+0x18>
   291be:	8840      	ldrh	r0, [r0, #2]
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
    d = (s * d) >> 8;
    i -= min;
    lv_opa_t mix = (i * 255) / d;
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
}
   291c0:	bd70      	pop	{r4, r5, r6, pc}
    int32_t max = (dsc->bg_grad_color_stop * s) >> 8;
   291c2:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   291c6:	fb01 f603 	mul.w	r6, r1, r3
    if(i >= max) return dsc->bg_grad_color;
   291ca:	ebb2 2f26 	cmp.w	r2, r6, asr #8
   291ce:	db01      	blt.n	291d4 <grad_get+0x2a>
   291d0:	8880      	ldrh	r0, [r0, #4]
   291d2:	e7f5      	b.n	291c0 <grad_get+0x16>
    int32_t d = dsc->bg_grad_color_stop - dsc->bg_main_color_stop;
   291d4:	1b1b      	subs	r3, r3, r4
    i -= min;
   291d6:	1b52      	subs	r2, r2, r5
    d = (s * d) >> 8;
   291d8:	4359      	muls	r1, r3
    lv_opa_t mix = (i * 255) / d;
   291da:	b212      	sxth	r2, r2
    d = (s * d) >> 8;
   291dc:	1209      	asrs	r1, r1, #8
    lv_opa_t mix = (i * 255) / d;
   291de:	ebc2 2202 	rsb	r2, r2, r2, lsl #8
   291e2:	fb92 f2f1 	sdiv	r2, r2, r1
    lv_color_t ret;
#if LV_COLOR_DEPTH != 1
    /*LV_COLOR_DEPTH == 8, 16 or 32*/
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   291e6:	8841      	ldrh	r1, [r0, #2]
   291e8:	8883      	ldrh	r3, [r0, #4]
                                        (255 - mix) + LV_COLOR_MIX_ROUND_OFS));
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   291ea:	7886      	ldrb	r6, [r0, #2]
   291ec:	b2d2      	uxtb	r2, r2
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   291ee:	f1c2 05ff 	rsb	r5, r2, #255	; 0xff
    LV_COLOR_SET_G(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_G(c1) * mix + LV_COLOR_GET_G(c2) *
   291f2:	f3c1 1145 	ubfx	r1, r1, #5, #6
   291f6:	4369      	muls	r1, r5
   291f8:	f3c3 1345 	ubfx	r3, r3, #5, #6
   291fc:	f248 0481 	movw	r4, #32897	; 0x8081
   29200:	fb02 1303 	mla	r3, r2, r3, r1
   29204:	4363      	muls	r3, r4
   29206:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   2920a:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
   2920e:	f3c3 51c5 	ubfx	r1, r3, #23, #6
    LV_COLOR_SET_B(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_B(c1) * mix + LV_COLOR_GET_B(c2) *
   29212:	7903      	ldrb	r3, [r0, #4]
   29214:	f006 061f 	and.w	r6, r6, #31
   29218:	f003 031f 	and.w	r3, r3, #31
   2921c:	436e      	muls	r6, r5
   2921e:	fb02 6303 	mla	r3, r2, r3, r6
   29222:	4363      	muls	r3, r4
   29224:	f503 0380 	add.w	r3, r3, #4194304	; 0x400000
   29228:	f503 4381 	add.w	r3, r3, #16512	; 0x4080
   2922c:	f3c3 53c4 	ubfx	r3, r3, #23, #5
   29230:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    LV_COLOR_SET_R(ret, LV_MATH_UDIV255((uint16_t) LV_COLOR_GET_R(c1) * mix + LV_COLOR_GET_R(c2) *
   29234:	7941      	ldrb	r1, [r0, #5]
   29236:	78c0      	ldrb	r0, [r0, #3]
   29238:	08c0      	lsrs	r0, r0, #3
   2923a:	08c9      	lsrs	r1, r1, #3
   2923c:	4368      	muls	r0, r5
   2923e:	fb02 0001 	mla	r0, r2, r1, r0
   29242:	4360      	muls	r0, r4
   29244:	f500 0080 	add.w	r0, r0, #4194304	; 0x400000
   29248:	f500 4081 	add.w	r0, r0, #16512	; 0x4080
   2924c:	0dc0      	lsrs	r0, r0, #23
   2924e:	ea43 20c0 	orr.w	r0, r3, r0, lsl #11
    return lv_color_mix(dsc->bg_grad_color, dsc->bg_color, mix);
   29252:	e7b5      	b.n	291c0 <grad_get+0x16>

00029254 <_lv_memset_ff>:
 * Wrapper for the standard memset with fixed 0xFF value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_ff(void * dst, size_t len)
{
   29254:	460a      	mov	r2, r1
__ssp_bos_icheck3(memset, void *, int)
   29256:	21ff      	movs	r1, #255	; 0xff
   29258:	f002 baa0 	b.w	2b79c <memset>

0002925c <lv_area_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2925c:	4603      	mov	r3, r0
   2925e:	6808      	ldr	r0, [r1, #0]
   29260:	6849      	ldr	r1, [r1, #4]
   29262:	c303      	stmia	r3!, {r0, r1}
 * @param src pointer to the source area
 */
inline static void lv_area_copy(lv_area_t * dest, const lv_area_t * src)
{
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
}
   29264:	4770      	bx	lr

00029266 <lv_draw_rect>:
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29266:	88c3      	ldrh	r3, [r0, #6]
{
   29268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2926c:	4615      	mov	r5, r2
   2926e:	8842      	ldrh	r2, [r0, #2]
   29270:	3301      	adds	r3, #1
   29272:	1a9b      	subs	r3, r3, r2
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   29274:	b21b      	sxth	r3, r3
   29276:	2b00      	cmp	r3, #0
{
   29278:	b0ab      	sub	sp, #172	; 0xac
   2927a:	4604      	mov	r4, r0
   2927c:	4689      	mov	r9, r1
    if(lv_area_get_height(coords) < 1 || lv_area_get_width(coords) < 1) return;
   2927e:	f340 822b 	ble.w	296d8 <lv_draw_rect+0x472>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29282:	8883      	ldrh	r3, [r0, #4]
   29284:	8802      	ldrh	r2, [r0, #0]
   29286:	3301      	adds	r3, #1
   29288:	1a9b      	subs	r3, r3, r2
   2928a:	b21b      	sxth	r3, r3
   2928c:	2b00      	cmp	r3, #0
   2928e:	f340 8223 	ble.w	296d8 <lv_draw_rect+0x472>
    if(dsc->bg_opa <= LV_OPA_MIN) return;
   29292:	7b2b      	ldrb	r3, [r5, #12]
   29294:	2b02      	cmp	r3, #2
   29296:	f240 80af 	bls.w	293f8 <lv_draw_rect+0x192>
    lv_area_copy(&coords_bg, coords);
   2929a:	4601      	mov	r1, r0
   2929c:	a816      	add	r0, sp, #88	; 0x58
   2929e:	f7ff ffdd 	bl	2925c <lv_area_copy>
    if(dsc->border_width > 1 && dsc->border_opa >= LV_OPA_MAX && dsc->radius != 0) {
   292a2:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   292a6:	2b01      	cmp	r3, #1
   292a8:	dd24      	ble.n	292f4 <lv_draw_rect+0x8e>
   292aa:	7d2b      	ldrb	r3, [r5, #20]
   292ac:	2bfc      	cmp	r3, #252	; 0xfc
   292ae:	d921      	bls.n	292f4 <lv_draw_rect+0x8e>
   292b0:	f9b5 3000 	ldrsh.w	r3, [r5]
   292b4:	b1f3      	cbz	r3, 292f4 <lv_draw_rect+0x8e>
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   292b6:	8a6b      	ldrh	r3, [r5, #18]
   292b8:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
   292bc:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
   292c0:	f3c3 0180 	ubfx	r1, r3, #2, #1
   292c4:	4401      	add	r1, r0
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   292c6:	f8bd 005a 	ldrh.w	r0, [sp, #90]	; 0x5a
        coords_bg.x1 += (dsc->border_side & LV_BORDER_SIDE_LEFT) ? 1 : 0;
   292ca:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
        coords_bg.y1 += (dsc->border_side & LV_BORDER_SIDE_TOP) ? 1 : 0;
   292ce:	f3c3 0140 	ubfx	r1, r3, #1, #1
   292d2:	4401      	add	r1, r0
   292d4:	f8ad 105a 	strh.w	r1, [sp, #90]	; 0x5a
        coords_bg.x2 -= (dsc->border_side & LV_BORDER_SIDE_RIGHT) ? 1 : 0;
   292d8:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
   292dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   292e0:	1acb      	subs	r3, r1, r3
   292e2:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
        coords_bg.y2 -= (dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? 1 : 0;
   292e6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   292ea:	f002 0201 	and.w	r2, r2, #1
   292ee:	1a9b      	subs	r3, r3, r2
   292f0:	f8ad 305e 	strh.w	r3, [sp, #94]	; 0x5e
    lv_opa_t opa = dsc->bg_opa;
   292f4:	f895 a00c 	ldrb.w	sl, [r5, #12]
    if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   292f8:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
   292fc:	bf28      	it	cs
   292fe:	f04f 0aff 	movcs.w	sl, #255	; 0xff
    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   29302:	f7f1 fe31 	bl	1af68 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29306:	f000 fe29 	bl	29f5c <lv_disp_get_buf>
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   2930a:	464a      	mov	r2, r9
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   2930c:	9005      	str	r0, [sp, #20]
    is_common = _lv_area_intersect(&draw_area, &coords_bg, clip);
   2930e:	a916      	add	r1, sp, #88	; 0x58
   29310:	a818      	add	r0, sp, #96	; 0x60
   29312:	f000 fe8e 	bl	2a032 <_lv_area_intersect>
    if(is_common == false) return;
   29316:	2800      	cmp	r0, #0
   29318:	d06e      	beq.n	293f8 <lv_draw_rect+0x192>
    draw_area.x1 -= disp_area->x1;
   2931a:	9b05      	ldr	r3, [sp, #20]
   2931c:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
   29320:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
    draw_area.y1 -= disp_area->y1;
   29324:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
    draw_area.x1 -= disp_area->x1;
   29328:	1a83      	subs	r3, r0, r2
   2932a:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
    draw_area.y1 -= disp_area->y1;
   2932e:	9b05      	ldr	r3, [sp, #20]
   29330:	f9b3 6012 	ldrsh.w	r6, [r3, #18]
    draw_area.x2 -= disp_area->x1;
   29334:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   29338:	1a9a      	subs	r2, r3, r2
   2933a:	3301      	adds	r3, #1
   2933c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
   29340:	1a1b      	subs	r3, r3, r0
    draw_area.y2 -= disp_area->y1;
   29342:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
   29346:	b21b      	sxth	r3, r3
    draw_area.y1 -= disp_area->y1;
   29348:	1b89      	subs	r1, r1, r6
    draw_area.y2 -= disp_area->y1;
   2934a:	1b92      	subs	r2, r2, r6
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   2934c:	4618      	mov	r0, r3
    draw_area.y1 -= disp_area->y1;
   2934e:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
    draw_area.y2 -= disp_area->y1;
   29352:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
   29356:	9309      	str	r3, [sp, #36]	; 0x24
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29358:	f7f4 f97c 	bl	1d654 <_lv_mem_buf_get>
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   2935c:	88ab      	ldrh	r3, [r5, #4]
    lv_grad_dir_t grad_dir = dsc->bg_grad_dir;
   2935e:	79ae      	ldrb	r6, [r5, #6]
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   29360:	886a      	ldrh	r2, [r5, #2]
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29362:	4680      	mov	r8, r0
    if(dsc->bg_color.full == dsc->bg_grad_color.full) grad_dir = LV_GRAD_DIR_NONE;
   29364:	429a      	cmp	r2, r3
   29366:	bf08      	it	eq
   29368:	2600      	moveq	r6, #0
    uint16_t other_mask_cnt = lv_draw_mask_get_cnt();
   2936a:	f7f3 fb0b 	bl	1c984 <lv_draw_mask_get_cnt>
   2936e:	9010      	str	r0, [sp, #64]	; 0x40
   29370:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   29374:	9311      	str	r3, [sp, #68]	; 0x44
    if(other_mask_cnt) simple_mode = false;
   29376:	2b00      	cmp	r3, #0
   29378:	f040 81b1 	bne.w	296de <lv_draw_rect+0x478>
    else if(grad_dir == LV_GRAD_DIR_HOR) simple_mode = false;
   2937c:	1eb3      	subs	r3, r6, #2
   2937e:	bf18      	it	ne
   29380:	2301      	movne	r3, #1
   29382:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29386:	f8bd b05e 	ldrh.w	fp, [sp, #94]	; 0x5e
    if(other_mask_cnt) simple_mode = false;
   2938a:	930a      	str	r3, [sp, #40]	; 0x28
   2938c:	f8bd 205a 	ldrh.w	r2, [sp, #90]	; 0x5a
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29390:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29394:	3701      	adds	r7, #1
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29396:	f10b 0b01 	add.w	fp, fp, #1
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2939a:	1aff      	subs	r7, r7, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2939c:	ebab 0b02 	sub.w	fp, fp, r2
    int32_t coords_h = lv_area_get_height(&coords_bg);
   293a0:	fa0f fb8b 	sxth.w	fp, fp
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   293a4:	b23f      	sxth	r7, r7
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   293a6:	45bb      	cmp	fp, r7
    int32_t rout = dsc->radius;
   293a8:	f9b5 3000 	ldrsh.w	r3, [r5]
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   293ac:	bfa8      	it	ge
   293ae:	46bb      	movge	fp, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   293b0:	ea4f 0b6b 	mov.w	fp, fp, asr #1
   293b4:	459b      	cmp	fp, r3
   293b6:	bfa8      	it	ge
   293b8:	469b      	movge	fp, r3
    if(simple_mode && rout == 0 && (grad_dir == LV_GRAD_DIR_NONE)) {
   293ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   293bc:	2b00      	cmp	r3, #0
   293be:	f000 8190 	beq.w	296e2 <lv_draw_rect+0x47c>
   293c2:	f1bb 0f00 	cmp.w	fp, #0
   293c6:	f040 818c 	bne.w	296e2 <lv_draw_rect+0x47c>
   293ca:	2e00      	cmp	r6, #0
   293cc:	f040 8231 	bne.w	29832 <lv_draw_rect+0x5cc>
        _lv_blend_fill(clip, &coords_bg,
   293d0:	7b6b      	ldrb	r3, [r5, #13]
   293d2:	e9cd a301 	strd	sl, r3, [sp, #4]
   293d6:	2301      	movs	r3, #1
   293d8:	9300      	str	r3, [sp, #0]
   293da:	886a      	ldrh	r2, [r5, #2]
   293dc:	4633      	mov	r3, r6
   293de:	a916      	add	r1, sp, #88	; 0x58
   293e0:	4648      	mov	r0, r9
   293e2:	f7fe fbeb 	bl	27bbc <_lv_blend_fill>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   293e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   293ea:	930d      	str	r3, [sp, #52]	; 0x34
    lv_draw_mask_remove_id(mask_rout_id);
   293ec:	980d      	ldr	r0, [sp, #52]	; 0x34
   293ee:	f7f3 faa1 	bl	1c934 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   293f2:	4640      	mov	r0, r8
   293f4:	f7f4 f990 	bl	1d718 <_lv_mem_buf_release>
    if(dsc->border_opa <= LV_OPA_MIN) return;
   293f8:	7d2b      	ldrb	r3, [r5, #20]
   293fa:	2b02      	cmp	r3, #2
   293fc:	f240 816c 	bls.w	296d8 <lv_draw_rect+0x472>
    if(dsc->border_width == 0) return;
   29400:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   29404:	2b00      	cmp	r3, #0
   29406:	f000 8167 	beq.w	296d8 <lv_draw_rect+0x472>
    if(dsc->border_side == LV_BORDER_SIDE_NONE) return;
   2940a:	f9b5 3012 	ldrsh.w	r3, [r5, #18]
   2940e:	2b00      	cmp	r3, #0
   29410:	f000 8162 	beq.w	296d8 <lv_draw_rect+0x472>
    if(dsc->border_post) return;
   29414:	7dab      	ldrb	r3, [r5, #22]
   29416:	07d9      	lsls	r1, r3, #31
   29418:	f100 815e 	bmi.w	296d8 <lv_draw_rect+0x472>
   2941c:	88a3      	ldrh	r3, [r4, #4]
   2941e:	8827      	ldrh	r7, [r4, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29420:	88e2      	ldrh	r2, [r4, #6]
    int32_t rout = dsc->radius;
   29422:	f9b5 8000 	ldrsh.w	r8, [r5]
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29426:	3301      	adds	r3, #1
   29428:	1bdb      	subs	r3, r3, r7
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2942a:	8867      	ldrh	r7, [r4, #2]
   2942c:	3201      	adds	r2, #1
   2942e:	1bd2      	subs	r2, r2, r7
    int32_t coords_h = lv_area_get_height(coords);
   29430:	b217      	sxth	r7, r2
    int32_t coords_w = lv_area_get_width(coords);
   29432:	b21b      	sxth	r3, r3
    int32_t short_side = LV_MATH_MIN(coords_w, coords_h);
   29434:	42bb      	cmp	r3, r7
   29436:	bfa8      	it	ge
   29438:	463b      	movge	r3, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   2943a:	105f      	asrs	r7, r3, #1
   2943c:	45b8      	cmp	r8, r7
    lv_area_copy(&area_inner, coords);
   2943e:	4621      	mov	r1, r4
   29440:	a814      	add	r0, sp, #80	; 0x50
   29442:	bfa8      	it	ge
   29444:	46b8      	movge	r8, r7
   29446:	f7ff ff09 	bl	2925c <lv_area_copy>
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   2944a:	8a68      	ldrh	r0, [r5, #18]
   2944c:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
   29450:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   29454:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
    area_inner.x1 += ((dsc->border_side & LV_BORDER_SIDE_LEFT) ? dsc->border_width : - (dsc->border_width + rout));
   29458:	f9b5 1012 	ldrsh.w	r1, [r5, #18]
   2945c:	f010 0f04 	tst.w	r0, #4
   29460:	bf03      	ittte	eq
   29462:	8a2a      	ldrheq	r2, [r5, #16]
   29464:	4442      	addeq	r2, r8
   29466:	4252      	negeq	r2, r2
   29468:	461a      	movne	r2, r3
   2946a:	bf08      	it	eq
   2946c:	b212      	sxtheq	r2, r2
   2946e:	4432      	add	r2, r6
   29470:	f8ad 2050 	strh.w	r2, [sp, #80]	; 0x50
    area_inner.x2 -= ((dsc->border_side & LV_BORDER_SIDE_RIGHT) ? dsc->border_width : - (dsc->border_width + rout));
   29474:	0702      	lsls	r2, r0, #28
   29476:	bf5b      	ittet	pl
   29478:	eb03 0208 	addpl.w	r2, r3, r8
   2947c:	4252      	negpl	r2, r2
   2947e:	461a      	movmi	r2, r3
   29480:	b212      	sxthpl	r2, r2
   29482:	1aba      	subs	r2, r7, r2
   29484:	f8ad 2054 	strh.w	r2, [sp, #84]	; 0x54
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   29488:	0782      	lsls	r2, r0, #30
   2948a:	bf5c      	itt	pl
   2948c:	eb03 0208 	addpl.w	r2, r3, r8
   29490:	4252      	negpl	r2, r2
   29492:	f9bd 7052 	ldrsh.w	r7, [sp, #82]	; 0x52
   29496:	bf4c      	ite	mi
   29498:	461a      	movmi	r2, r3
   2949a:	b212      	sxthpl	r2, r2
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   2949c:	07c0      	lsls	r0, r0, #31
   2949e:	461e      	mov	r6, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   294a0:	443a      	add	r2, r7
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   294a2:	bf5c      	itt	pl
   294a4:	4443      	addpl	r3, r8
   294a6:	425b      	negpl	r3, r3
    area_inner.y1 += ((dsc->border_side & LV_BORDER_SIDE_TOP) ? dsc->border_width : - (dsc->border_width + rout));
   294a8:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
    area_inner.y2 -= ((dsc->border_side & LV_BORDER_SIDE_BOTTOM) ? dsc->border_width : - (dsc->border_width + rout));
   294ac:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
   294b0:	bf58      	it	pl
   294b2:	b21e      	sxthpl	r6, r3
   294b4:	1b93      	subs	r3, r2, r6
   294b6:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
    if(dsc->border_side == LV_BORDER_SIDE_FULL) {
   294ba:	290f      	cmp	r1, #15
   294bc:	7d2b      	ldrb	r3, [r5, #20]
   294be:	9305      	str	r3, [sp, #20]
   294c0:	f040 83e1 	bne.w	29c86 <lv_draw_rect+0xa20>
        draw_full_border(&area_inner, coords, clip, dsc->radius, dsc->border_color, dsc->border_opa, dsc->border_blend_mode);
   294c4:	7d6b      	ldrb	r3, [r5, #21]
   294c6:	f9b5 a000 	ldrsh.w	sl, [r5]
   294ca:	89ee      	ldrh	r6, [r5, #14]
   294cc:	9306      	str	r3, [sp, #24]
#endif

static void draw_full_border(const lv_area_t * area_inner, const lv_area_t * area_outer, const lv_area_t * clip,
                             lv_coord_t radius, lv_color_t color, lv_opa_t opa, lv_blend_mode_t blend_mode)
{
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   294ce:	f7f3 fa59 	bl	1c984 <lv_draw_mask_get_cnt>
   294d2:	f9bd 3052 	ldrsh.w	r3, [sp, #82]	; 0x52
   294d6:	9308      	str	r3, [sp, #32]
    bool simple_mode = true;
    if(other_mask_cnt) simple_mode = false;

    int32_t inner_w = lv_area_get_width(area_inner);
    int32_t inner_h = lv_area_get_height(area_inner);
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   294d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
   294dc:	930a      	str	r3, [sp, #40]	; 0x28
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   294de:	f9b4 3000 	ldrsh.w	r3, [r4]
   294e2:	9309      	str	r3, [sp, #36]	; 0x24
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   294e4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   294e8:	930e      	str	r3, [sp, #56]	; 0x38
   294ea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   294ee:	930b      	str	r3, [sp, #44]	; 0x2c
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   294f0:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
   294f4:	f9bd 8050 	ldrsh.w	r8, [sp, #80]	; 0x50
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   294f8:	f9bd 5056 	ldrsh.w	r5, [sp, #86]	; 0x56
    uint8_t other_mask_cnt = lv_draw_mask_get_cnt();
   294fc:	900c      	str	r0, [sp, #48]	; 0x30
    int32_t coords_out_w = lv_area_get_width(area_outer);
    int32_t coords_out_h = lv_area_get_height(area_outer);
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
    if(rout > short_side >> 1) rout = short_side >> 1;

    lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   294fe:	f7f1 fd33 	bl	1af68 <_lv_refr_get_disp_refreshing>
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29502:	f000 fd2b 	bl	29f5c <lv_disp_get_buf>

    /* Get clipped fill area which is the real draw area.
     * It is always the same or inside `fill_area` */
    lv_area_t draw_area;
    bool is_common;
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   29506:	464a      	mov	r2, r9
    lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29508:	4683      	mov	fp, r0
    is_common = _lv_area_intersect(&draw_area, area_outer, clip);
   2950a:	4621      	mov	r1, r4
   2950c:	a816      	add	r0, sp, #88	; 0x58
   2950e:	f000 fd90 	bl	2a032 <_lv_area_intersect>
    if(is_common == false) return;
   29512:	2800      	cmp	r0, #0
   29514:	f000 80e0 	beq.w	296d8 <lv_draw_rect+0x472>
   29518:	1c7a      	adds	r2, r7, #1
   2951a:	b213      	sxth	r3, r2
   2951c:	930d      	str	r3, [sp, #52]	; 0x34
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   2951e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29520:	990b      	ldr	r1, [sp, #44]	; 0x2c
    const lv_area_t * disp_area = &vdb->area;

    /* Now `draw_area` has absolute coordinates.
     * Make it relative to `disp_area` to simplify draw to `disp_buf`*/
    draw_area.x1 -= disp_area->x1;
    draw_area.y1 -= disp_area->y1;
   29522:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
    lv_coord_t border_width = area_outer->x2 - area_inner->x2;
   29526:	1bdf      	subs	r7, r3, r7
   29528:	b23b      	sxth	r3, r7
   2952a:	9307      	str	r3, [sp, #28]
   2952c:	9b08      	ldr	r3, [sp, #32]
   2952e:	1c6a      	adds	r2, r5, #1
   29530:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   29534:	eba3 0808 	sub.w	r8, r3, r8
    int32_t inner_h = lv_area_get_height(area_inner);
   29538:	b212      	sxth	r2, r2
    int32_t inner_w = lv_area_get_width(area_inner);
   2953a:	fa0f f888 	sxth.w	r8, r8
    int32_t short_side = LV_MATH_MIN(inner_w, inner_h);
   2953e:	4542      	cmp	r2, r8
   29540:	bfa8      	it	ge
   29542:	4642      	movge	r2, r8
   29544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    if(rin > short_side >> 1) rin = short_side >> 1;
   29546:	1052      	asrs	r2, r2, #1
   29548:	4592      	cmp	sl, r2
   2954a:	bfa8      	it	ge
   2954c:	4692      	movge	sl, r2
   2954e:	1c5a      	adds	r2, r3, #1
   29550:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29552:	1ad2      	subs	r2, r2, r3
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   29554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29556:	3301      	adds	r3, #1
   29558:	1a5b      	subs	r3, r3, r1
    int32_t coords_out_w = lv_area_get_width(area_outer);
   2955a:	b212      	sxth	r2, r2
    int32_t coords_out_h = lv_area_get_height(area_outer);
   2955c:	b21b      	sxth	r3, r3
    short_side = LV_MATH_MIN(coords_out_w, coords_out_h);
   2955e:	4293      	cmp	r3, r2
   29560:	bfa8      	it	ge
   29562:	4613      	movge	r3, r2
    int32_t rout = rin + border_width;
   29564:	fa0a f787 	sxtah	r7, sl, r7
    if(rout > short_side >> 1) rout = short_side >> 1;
   29568:	105b      	asrs	r3, r3, #1
   2956a:	42bb      	cmp	r3, r7
    draw_area.x1 -= disp_area->x1;
   2956c:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29570:	f9bd 1058 	ldrsh.w	r1, [sp, #88]	; 0x58
   29574:	bfa8      	it	ge
   29576:	463b      	movge	r3, r7
   29578:	9308      	str	r3, [sp, #32]
   2957a:	1a8b      	subs	r3, r1, r2
   2957c:	f8ad 3058 	strh.w	r3, [sp, #88]	; 0x58
    draw_area.y1 -= disp_area->y1;
   29580:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   29584:	1a1b      	subs	r3, r3, r0
   29586:	f8ad 305a 	strh.w	r3, [sp, #90]	; 0x5a
    draw_area.x2 -= disp_area->x1;
   2958a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
   2958e:	1a9a      	subs	r2, r3, r2
   29590:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
    draw_area.y2 -= disp_area->y1;
   29594:	f8bd 205e 	ldrh.w	r2, [sp, #94]	; 0x5e
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29598:	1c5f      	adds	r7, r3, #1
   2959a:	1a12      	subs	r2, r2, r0

    int32_t draw_area_w = lv_area_get_width(&draw_area);

    /*Create inner the mask*/
    lv_draw_mask_radius_param_t mask_rin_param;
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   2959c:	2301      	movs	r3, #1
    draw_area.y2 -= disp_area->y1;
   2959e:	f8ad 205e 	strh.w	r2, [sp, #94]	; 0x5e
   295a2:	1a7f      	subs	r7, r7, r1
    lv_draw_mask_radius_init(&mask_rin_param, area_inner, rin, true);
   295a4:	fa0f f28a 	sxth.w	r2, sl
   295a8:	a914      	add	r1, sp, #80	; 0x50
   295aa:	a81c      	add	r0, sp, #112	; 0x70
   295ac:	f7f3 fa7c 	bl	1caa8 <lv_draw_mask_radius_init>
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   295b0:	2100      	movs	r1, #0
   295b2:	a81c      	add	r0, sp, #112	; 0x70
   295b4:	f7f3 f976 	bl	1c8a4 <lv_draw_mask_add>

    lv_draw_mask_radius_param_t mask_rout_param;
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   295b8:	f9bd a020 	ldrsh.w	sl, [sp, #32]
    int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   295bc:	900e      	str	r0, [sp, #56]	; 0x38
    lv_draw_mask_radius_init(&mask_rout_param, area_outer, rout, false);
   295be:	2300      	movs	r3, #0
   295c0:	4652      	mov	r2, sl
   295c2:	4621      	mov	r1, r4
   295c4:	a823      	add	r0, sp, #140	; 0x8c
   295c6:	f7f3 fa6f 	bl	1caa8 <lv_draw_mask_radius_init>
    int16_t mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   295ca:	2100      	movs	r1, #0
   295cc:	a823      	add	r0, sp, #140	; 0x8c
   295ce:	f7f3 f969 	bl	1c8a4 <lv_draw_mask_add>
   295d2:	b23f      	sxth	r7, r7
   295d4:	900f      	str	r0, [sp, #60]	; 0x3c

    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   295d6:	4638      	mov	r0, r7
   295d8:	f7f4 f83c 	bl	1d654 <_lv_mem_buf_get>
    int32_t h;
    lv_draw_mask_res_t mask_res;
    lv_area_t fill_area;

    /*Apply some optimization if there is no other mask*/
    if(simple_mode) {
   295dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   295de:	4605      	mov	r5, r0
    if(simple_mode) {
   295e0:	2b00      	cmp	r3, #0
   295e2:	f040 8312 	bne.w	29c0a <lv_draw_rect+0x9a4>
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   295e6:	9b07      	ldr	r3, [sp, #28]
   295e8:	9a08      	ldr	r2, [sp, #32]
        /*Draw the upper corner area*/
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;

        fill_area.x1 = area_outer->x1;
        fill_area.x2 = area_outer->x2;
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   295ea:	f9bd 805a 	ldrsh.w	r8, [sp, #90]	; 0x5a
    int32_t corner_size = LV_MATH_MAX(rout, border_width - 1);
   295ee:	3b01      	subs	r3, #1
   295f0:	4293      	cmp	r3, r2
   295f2:	bfb8      	it	lt
   295f4:	4613      	movlt	r3, r2
   295f6:	9309      	str	r3, [sp, #36]	; 0x24
        int32_t upper_corner_end = area_outer->y1 - disp_area->y1 + corner_size;
   295f8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   295fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   295fe:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   29602:	440a      	add	r2, r1
   29604:	1ad2      	subs	r2, r2, r3
   29606:	920b      	str	r2, [sp, #44]	; 0x2c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29608:	4443      	add	r3, r8
        fill_area.x1 = area_outer->x1;
   2960a:	8822      	ldrh	r2, [r4, #0]
   2960c:	f8ad 2060 	strh.w	r2, [sp, #96]	; 0x60
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29610:	b21b      	sxth	r3, r3
        fill_area.x2 = area_outer->x2;
   29612:	88a2      	ldrh	r2, [r4, #4]
   29614:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29618:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   2961c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   29620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29622:	4543      	cmp	r3, r8
   29624:	f280 81fd 	bge.w	29a22 <lv_draw_rect+0x7bc>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the lower corner area */
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   29628:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2962a:	f9b4 8006 	ldrsh.w	r8, [r4, #6]
   2962e:	f9bb 3012 	ldrsh.w	r3, [fp, #18]
   29632:	eba8 0802 	sub.w	r8, r8, r2
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   29636:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        int32_t lower_corner_end = area_outer->y2 - disp_area->y1 - corner_size;
   29638:	eba8 0803 	sub.w	r8, r8, r3
        if(lower_corner_end <= upper_corner_end) lower_corner_end = upper_corner_end + 1;
   2963c:	4542      	cmp	r2, r8
   2963e:	bfa8      	it	ge
   29640:	f102 0801 	addge.w	r8, r2, #1
        fill_area.y1 = disp_area->y1 + lower_corner_end;
   29644:	4443      	add	r3, r8
   29646:	b21b      	sxth	r3, r3
   29648:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   2964c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   29650:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   29654:	4598      	cmp	r8, r3
   29656:	f340 825e 	ble.w	29b16 <lv_draw_rect+0x8b0>
            fill_area.y1++;
            fill_area.y2++;
        }

        /*Draw the left vertical part*/
        fill_area.y1 = area_outer->y1 + corner_size + 1;
   2965a:	8863      	ldrh	r3, [r4, #2]
   2965c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2965e:	3301      	adds	r3, #1
   29660:	fa03 f382 	sxtah	r3, r3, r2
   29664:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = area_outer->y2 - corner_size - 1;
   29668:	88e3      	ldrh	r3, [r4, #6]
   2966a:	3b01      	subs	r3, #1
   2966c:	1a9b      	subs	r3, r3, r2
   2966e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66

        fill_area.x1 = area_outer->x1;
   29672:	f9b4 3000 	ldrsh.w	r3, [r4]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   29676:	9a07      	ldr	r2, [sp, #28]
        fill_area.x1 = area_outer->x1;
   29678:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        fill_area.x2 = area_outer->x1 + border_width - 1;
   2967c:	3b01      	subs	r3, #1
   2967e:	441a      	add	r2, r3
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   29680:	9b06      	ldr	r3, [sp, #24]
   29682:	9302      	str	r3, [sp, #8]
   29684:	2701      	movs	r7, #1
   29686:	9b05      	ldr	r3, [sp, #20]
        fill_area.x2 = area_outer->x1 + border_width - 1;
   29688:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   2968c:	9301      	str	r3, [sp, #4]
   2968e:	4632      	mov	r2, r6
   29690:	2300      	movs	r3, #0
   29692:	a918      	add	r1, sp, #96	; 0x60
   29694:	4648      	mov	r0, r9
   29696:	9700      	str	r7, [sp, #0]
   29698:	f7fe fa90 	bl	27bbc <_lv_blend_fill>

        /*Draw the right vertical border*/
        fill_area.x1 = area_outer->x2 - border_width + 1;
   2969c:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
   296a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   296a2:	990a      	ldr	r1, [sp, #40]	; 0x28
        fill_area.x2 = area_outer->x2;
   296a4:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        fill_area.x1 = area_outer->x2 - border_width + 1;
   296a8:	4413      	add	r3, r2
   296aa:	1a5b      	subs	r3, r3, r1
   296ac:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60

        _lv_blend_fill(clip, &fill_area, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   296b0:	9b06      	ldr	r3, [sp, #24]
   296b2:	9302      	str	r3, [sp, #8]
   296b4:	9b05      	ldr	r3, [sp, #20]
   296b6:	4632      	mov	r2, r6
   296b8:	e9cd 7300 	strd	r7, r3, [sp]
   296bc:	a918      	add	r1, sp, #96	; 0x60
   296be:	2300      	movs	r3, #0
   296c0:	4648      	mov	r0, r9
   296c2:	f7fe fa7b 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
            fill_area.y2++;

        }
    }
    lv_draw_mask_remove_id(mask_rin_id);
   296c6:	980e      	ldr	r0, [sp, #56]	; 0x38
   296c8:	f7f3 f934 	bl	1c934 <lv_draw_mask_remove_id>
    lv_draw_mask_remove_id(mask_rout_id);
   296cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   296ce:	f7f3 f931 	bl	1c934 <lv_draw_mask_remove_id>
    _lv_mem_buf_release(mask_buf);
   296d2:	4628      	mov	r0, r5
        _lv_mem_buf_release(mask_buf);
   296d4:	f7f4 f820 	bl	1d718 <_lv_mem_buf_release>
}
   296d8:	b02b      	add	sp, #172	; 0xac
   296da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(other_mask_cnt) simple_mode = false;
   296de:	2300      	movs	r3, #0
   296e0:	e64f      	b.n	29382 <lv_draw_rect+0x11c>
        if(rout > 0) {
   296e2:	f1bb 0f00 	cmp.w	fp, #0
   296e6:	f340 80a4 	ble.w	29832 <lv_draw_rect+0x5cc>
            lv_draw_mask_radius_init(&mask_rout_param, &coords_bg, rout, false);
   296ea:	2300      	movs	r3, #0
   296ec:	465a      	mov	r2, fp
   296ee:	a916      	add	r1, sp, #88	; 0x58
   296f0:	a823      	add	r0, sp, #140	; 0x8c
   296f2:	f7f3 f9d9 	bl	1caa8 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   296f6:	2100      	movs	r1, #0
   296f8:	a823      	add	r0, sp, #140	; 0x8c
   296fa:	f7f3 f8d3 	bl	1c8a4 <lv_draw_mask_add>
   296fe:	900d      	str	r0, [sp, #52]	; 0x34
        lv_color_t grad_color = dsc->bg_color;
   29700:	886b      	ldrh	r3, [r5, #2]
   29702:	f8ad 3020 	strh.w	r3, [sp, #32]
        if(grad_dir == LV_GRAD_DIR_HOR) {
   29706:	2e02      	cmp	r6, #2
   29708:	f040 80a4 	bne.w	29854 <lv_draw_rect+0x5ee>
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   2970c:	0078      	lsls	r0, r7, #1
   2970e:	f7f3 ffa1 	bl	1d654 <_lv_mem_buf_get>
            for(i = 0; i < coords_w; i++) {
   29712:	2300      	movs	r3, #0
            grad_map = _lv_mem_buf_get(coords_w * sizeof(lv_color_t));
   29714:	900b      	str	r0, [sp, #44]	; 0x2c
            for(i = 0; i < coords_w; i++) {
   29716:	429f      	cmp	r7, r3
   29718:	f300 808f 	bgt.w	2983a <lv_draw_rect+0x5d4>
   2971c:	f9bd 105c 	ldrsh.w	r1, [sp, #92]	; 0x5c
   29720:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
        fill_area.x1 = coords_bg.x1;
   29724:	f8ad 0068 	strh.w	r0, [sp, #104]	; 0x68
   29728:	1c4a      	adds	r2, r1, #1
        if(lv_area_get_width(&coords_bg) - 2 * rout > SPLIT_LIMIT) split = true;
   2972a:	f06f 0301 	mvn.w	r3, #1
   2972e:	1a12      	subs	r2, r2, r0
   29730:	fb03 f30b 	mul.w	r3, r3, fp
   29734:	fa03 f382 	sxtah	r3, r3, r2
   29738:	930f      	str	r3, [sp, #60]	; 0x3c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   2973a:	9b05      	ldr	r3, [sp, #20]
   2973c:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	; 0x62
   29740:	8a5b      	ldrh	r3, [r3, #18]
        fill_area.x2 = coords_bg.x2;
   29742:	f8ad 106c 	strh.w	r1, [sp, #108]	; 0x6c
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29746:	4413      	add	r3, r2
   29748:	b21b      	sxth	r3, r3
   2974a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   2974e:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   29752:	fa0f f38b 	sxth.w	r3, fp
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29756:	9207      	str	r2, [sp, #28]
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   29758:	930e      	str	r3, [sp, #56]	; 0x38
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   2975a:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   2975e:	9a07      	ldr	r2, [sp, #28]
   29760:	429a      	cmp	r2, r3
   29762:	dd7a      	ble.n	2985a <lv_draw_rect+0x5f4>
        if(grad_dir == LV_GRAD_DIR_NONE && other_mask_cnt == 0 && split) {
   29764:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29766:	4333      	orrs	r3, r6
   29768:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   2976c:	d159      	bne.n	29822 <lv_draw_rect+0x5bc>
   2976e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29770:	2a32      	cmp	r2, #50	; 0x32
   29772:	dd56      	ble.n	29822 <lv_draw_rect+0x5bc>
            fill_area.x1 = coords_bg.x1 + rout;
   29774:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
   29778:	445a      	add	r2, fp
   2977a:	f8ad 2068 	strh.w	r2, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2 - rout;
   2977e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
   29782:	eba2 020b 	sub.w	r2, r2, fp
   29786:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1;
   2978a:	f9bd 205a 	ldrsh.w	r2, [sp, #90]	; 0x5a
   2978e:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            fill_area.x1 = coords_bg.x1 + rout;
   29792:	fa0f f78b 	sxth.w	r7, fp
            fill_area.y2 = coords_bg.y1 + rout;
   29796:	4493      	add	fp, r2
            _lv_blend_fill(clip, &fill_area,
   29798:	7b6a      	ldrb	r2, [r5, #13]
            fill_area.y2 = coords_bg.y1 + rout;
   2979a:	f8ad b06e 	strh.w	fp, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
   2979e:	e9cd a201 	strd	sl, r2, [sp, #4]
   297a2:	2201      	movs	r2, #1
   297a4:	9200      	str	r2, [sp, #0]
   297a6:	886a      	ldrh	r2, [r5, #2]
   297a8:	a91a      	add	r1, sp, #104	; 0x68
   297aa:	4648      	mov	r0, r9
   297ac:	f7fe fa06 	bl	27bbc <_lv_blend_fill>
            fill_area.y1 = coords_bg.y2 - rout;
   297b0:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   297b4:	f9bd 306e 	ldrsh.w	r3, [sp, #110]	; 0x6e
            fill_area.y2 = coords_bg.y2;
   297b8:	f8ad 106e 	strh.w	r1, [sp, #110]	; 0x6e
            fill_area.y1 = coords_bg.y2 - rout;
   297bc:	1bca      	subs	r2, r1, r7
   297be:	b212      	sxth	r2, r2
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   297c0:	429a      	cmp	r2, r3
   297c2:	bfd8      	it	le
   297c4:	3301      	addle	r3, #1
            fill_area.y1 = coords_bg.y2 - rout;
   297c6:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
            if(fill_area.y1 <= fill_area.y2) fill_area.y1 = fill_area.y2 + 1;    /*Avoid overdrawing the last line*/
   297ca:	bfd8      	it	le
   297cc:	f8ad 306a 	strhle.w	r3, [sp, #106]	; 0x6a
            _lv_blend_fill(clip, &fill_area,
   297d0:	7b6b      	ldrb	r3, [r5, #13]
   297d2:	e9cd a301 	strd	sl, r3, [sp, #4]
   297d6:	2601      	movs	r6, #1
   297d8:	9600      	str	r6, [sp, #0]
   297da:	886a      	ldrh	r2, [r5, #2]
   297dc:	2300      	movs	r3, #0
   297de:	a91a      	add	r1, sp, #104	; 0x68
   297e0:	4648      	mov	r0, r9
   297e2:	f7fe f9eb 	bl	27bbc <_lv_blend_fill>
            fill_area.x1 = coords_bg.x1;
   297e6:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   297ea:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area.x2 = coords_bg.x2;
   297ee:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   297f2:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            fill_area.y1 = coords_bg.y1 + rout + 1;
   297f6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	; 0x5a
   297fa:	4433      	add	r3, r6
   297fc:	443b      	add	r3, r7
   297fe:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2 = coords_bg.y2 - rout - 1;
   29802:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
   29806:	3b01      	subs	r3, #1
   29808:	1bdf      	subs	r7, r3, r7
            _lv_blend_fill(clip, &fill_area,
   2980a:	7b6b      	ldrb	r3, [r5, #13]
   2980c:	9600      	str	r6, [sp, #0]
   2980e:	e9cd a301 	strd	sl, r3, [sp, #4]
   29812:	a91a      	add	r1, sp, #104	; 0x68
   29814:	886a      	ldrh	r2, [r5, #2]
            fill_area.y2 = coords_bg.y2 - rout - 1;
   29816:	f8ad 706e 	strh.w	r7, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area,
   2981a:	2300      	movs	r3, #0
   2981c:	4648      	mov	r0, r9
   2981e:	f7fe f9cd 	bl	27bbc <_lv_blend_fill>
        if(grad_map) _lv_mem_buf_release(grad_map);
   29822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29824:	2b00      	cmp	r3, #0
   29826:	f43f ade1 	beq.w	293ec <lv_draw_rect+0x186>
   2982a:	4618      	mov	r0, r3
   2982c:	f7f3 ff74 	bl	1d718 <_lv_mem_buf_release>
   29830:	e5dc      	b.n	293ec <lv_draw_rect+0x186>
    int16_t mask_rout_id = LV_MASK_ID_INV;
   29832:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29836:	930d      	str	r3, [sp, #52]	; 0x34
   29838:	e762      	b.n	29700 <lv_draw_rect+0x49a>
                grad_map[i] = grad_get(dsc, coords_w, i);
   2983a:	b21a      	sxth	r2, r3
   2983c:	4639      	mov	r1, r7
   2983e:	4628      	mov	r0, r5
   29840:	9306      	str	r3, [sp, #24]
   29842:	f7ff fcb2 	bl	291aa <grad_get>
   29846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   29848:	461a      	mov	r2, r3
   2984a:	9b06      	ldr	r3, [sp, #24]
   2984c:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
            for(i = 0; i < coords_w; i++) {
   29850:	3301      	adds	r3, #1
   29852:	e760      	b.n	29716 <lv_draw_rect+0x4b0>
        lv_color_t * grad_map = NULL;
   29854:	2300      	movs	r3, #0
   29856:	930b      	str	r3, [sp, #44]	; 0x2c
   29858:	e760      	b.n	2971c <lv_draw_rect+0x4b6>
            int32_t y = h + vdb->area.y1;
   2985a:	9b05      	ldr	r3, [sp, #20]
   2985c:	9a07      	ldr	r2, [sp, #28]
   2985e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
   29862:	4413      	add	r3, r2
   29864:	930c      	str	r3, [sp, #48]	; 0x30
            if(y > coords_bg.y1 + rout + 1 &&
   29866:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
   2986a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2986c:	3301      	adds	r3, #1
   2986e:	445b      	add	r3, fp
   29870:	429a      	cmp	r2, r3
   29872:	dd0a      	ble.n	2988a <lv_draw_rect+0x624>
               y < coords_bg.y2 - rout - 1) {
   29874:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   29878:	3b01      	subs	r3, #1
   2987a:	eba3 030b 	sub.w	r3, r3, fp
            if(y > coords_bg.y1 + rout + 1 &&
   2987e:	429a      	cmp	r2, r3
   29880:	da03      	bge.n	2988a <lv_draw_rect+0x624>
                if(simple_mode == false) {
   29882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   29884:	2b00      	cmp	r3, #0
   29886:	f040 82ee 	bne.w	29e66 <lv_draw_rect+0xc00>
__ssp_bos_icheck3(memset, void *, int)
   2988a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2988c:	4651      	mov	r1, sl
   2988e:	4640      	mov	r0, r8
   29890:	f001 ff84 	bl	2b79c <memset>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29894:	9b05      	ldr	r3, [sp, #20]
   29896:	8a5a      	ldrh	r2, [r3, #18]
   29898:	9b07      	ldr	r3, [sp, #28]
   2989a:	441a      	add	r2, r3
   2989c:	9b05      	ldr	r3, [sp, #20]
   2989e:	8a19      	ldrh	r1, [r3, #16]
   298a0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   298a4:	4419      	add	r1, r3
   298a6:	b212      	sxth	r2, r2
   298a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   298aa:	b209      	sxth	r1, r1
   298ac:	4640      	mov	r0, r8
   298ae:	f7f3 f81f 	bl	1c8f0 <lv_draw_mask_apply>
                opa2 = LV_OPA_COVER;
   298b2:	2802      	cmp	r0, #2
   298b4:	bf14      	ite	ne
   298b6:	4653      	movne	r3, sl
   298b8:	23ff      	moveq	r3, #255	; 0xff
            if(grad_dir == LV_GRAD_DIR_VER) {
   298ba:	2e01      	cmp	r6, #1
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   298bc:	4607      	mov	r7, r0
                opa2 = LV_OPA_COVER;
   298be:	9306      	str	r3, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
   298c0:	d11c      	bne.n	298fc <lv_draw_rect+0x696>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   298c2:	f8bd 105e 	ldrh.w	r1, [sp, #94]	; 0x5e
   298c6:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   298ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   298cc:	3101      	adds	r1, #1
   298ce:	1ad2      	subs	r2, r2, r3
   298d0:	1ac9      	subs	r1, r1, r3
   298d2:	b212      	sxth	r2, r2
   298d4:	b209      	sxth	r1, r1
   298d6:	4628      	mov	r0, r5
   298d8:	f7ff fc67 	bl	291aa <grad_get>
            if(simple_mode && split &&
   298dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
                grad_color = grad_get(dsc, lv_area_get_height(&coords_bg), y - coords_bg.y1);
   298de:	f8ad 0020 	strh.w	r0, [sp, #32]
            if(simple_mode && split &&
   298e2:	b97b      	cbnz	r3, 29904 <lv_draw_rect+0x69e>
                    _lv_blend_fill(clip, &fill_area,
   298e4:	7b6b      	ldrb	r3, [r5, #13]
   298e6:	9302      	str	r3, [sp, #8]
   298e8:	9b06      	ldr	r3, [sp, #24]
   298ea:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   298ee:	e9cd 7300 	strd	r7, r3, [sp]
   298f2:	a91a      	add	r1, sp, #104	; 0x68
   298f4:	4643      	mov	r3, r8
   298f6:	e06a      	b.n	299ce <lv_draw_rect+0x768>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   298f8:	4637      	mov	r7, r6
   298fa:	e7e2      	b.n	298c2 <lv_draw_rect+0x65c>
            if(simple_mode && split &&
   298fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   298fe:	2b00      	cmp	r3, #0
   29900:	f000 82b8 	beq.w	29e74 <lv_draw_rect+0xc0e>
   29904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29906:	2b32      	cmp	r3, #50	; 0x32
   29908:	dd65      	ble.n	299d6 <lv_draw_rect+0x770>
               (y < coords_bg.y1 + rout + 1 ||
   2990a:	f9bd 305a 	ldrsh.w	r3, [sp, #90]	; 0x5a
            if(simple_mode && split &&
   2990e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
               (y < coords_bg.y1 + rout + 1 ||
   29910:	3301      	adds	r3, #1
   29912:	445b      	add	r3, fp
            if(simple_mode && split &&
   29914:	429a      	cmp	r2, r3
   29916:	db06      	blt.n	29926 <lv_draw_rect+0x6c0>
                y > coords_bg.y2 - rout - 1)) {
   29918:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   2991c:	3b01      	subs	r3, #1
   2991e:	eba3 030b 	sub.w	r3, r3, fp
               (y < coords_bg.y1 + rout + 1 ||
   29922:	429a      	cmp	r2, r3
   29924:	dd57      	ble.n	299d6 <lv_draw_rect+0x770>
                fill_area2.x1 = coords_bg.x1;
   29926:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   2992a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
                fill_area2.x1 = coords_bg.x1;
   2992c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                fill_area2.x2 = coords_bg.x1 + rout - 1;
   29930:	3b01      	subs	r3, #1
   29932:	4413      	add	r3, r2
   29934:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                fill_area2.y1 = fill_area.y1;
   29938:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   2993c:	f8ad 3072 	strh.w	r3, [sp, #114]	; 0x72
                fill_area2.y2 = fill_area.y2;
   29940:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   29944:	f8ad 3076 	strh.w	r3, [sp, #118]	; 0x76
                _lv_blend_fill(clip, &fill_area2,
   29948:	7b6b      	ldrb	r3, [r5, #13]
   2994a:	9302      	str	r3, [sp, #8]
   2994c:	9b06      	ldr	r3, [sp, #24]
   2994e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29952:	e9cd 7300 	strd	r7, r3, [sp]
   29956:	a91c      	add	r1, sp, #112	; 0x70
   29958:	4643      	mov	r3, r8
   2995a:	4648      	mov	r0, r9
   2995c:	f7fe f92e 	bl	27bbc <_lv_blend_fill>
                if(grad_dir == LV_GRAD_DIR_VER) {
   29960:	2e01      	cmp	r6, #1
   29962:	d115      	bne.n	29990 <lv_draw_rect+0x72a>
                    fill_area2.x1 = coords_bg.x1 + rout;
   29964:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   29966:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   2996a:	4413      	add	r3, r2
   2996c:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
                    fill_area2.x2 = coords_bg.x2 - rout;
   29970:	f8bd 305c 	ldrh.w	r3, [sp, #92]	; 0x5c
   29974:	1a9b      	subs	r3, r3, r2
   29976:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
                    _lv_blend_fill(clip, &fill_area2,
   2997a:	7b6b      	ldrb	r3, [r5, #13]
   2997c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   29980:	9600      	str	r6, [sp, #0]
   29982:	e9cd a301 	strd	sl, r3, [sp, #4]
   29986:	a91c      	add	r1, sp, #112	; 0x70
   29988:	2300      	movs	r3, #0
   2998a:	4648      	mov	r0, r9
   2998c:	f7fe f916 	bl	27bbc <_lv_blend_fill>
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   29990:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
   29994:	990e      	ldr	r1, [sp, #56]	; 0x38
                fill_area2.x2 = coords_bg.x2;
   29996:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   2999a:	1c53      	adds	r3, r2, #1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   2999c:	f9bd 2060 	ldrsh.w	r2, [sp, #96]	; 0x60
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   299a0:	1a59      	subs	r1, r3, r1
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   299a2:	1a9b      	subs	r3, r3, r2
   299a4:	9a05      	ldr	r2, [sp, #20]
                fill_area2.x1 = coords_bg.x2 - rout + 1;
   299a6:	f8ad 1070 	strh.w	r1, [sp, #112]	; 0x70
                int32_t mask_ofs = (coords_bg.x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   299aa:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
   299ae:	eba3 030b 	sub.w	r3, r3, fp
   299b2:	1a9b      	subs	r3, r3, r2
                _lv_blend_fill(clip, &fill_area2,
   299b4:	7b6a      	ldrb	r2, [r5, #13]
   299b6:	9202      	str	r2, [sp, #8]
   299b8:	9a06      	ldr	r2, [sp, #24]
   299ba:	e9cd 7200 	strd	r7, r2, [sp]
   299be:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   299c2:	2b00      	cmp	r3, #0
   299c4:	bfac      	ite	ge
   299c6:	4443      	addge	r3, r8
   299c8:	f108 0300 	addlt.w	r3, r8, #0
   299cc:	a91c      	add	r1, sp, #112	; 0x70
                    _lv_blend_fill(clip, &fill_area,
   299ce:	4648      	mov	r0, r9
   299d0:	f7fe f8f4 	bl	27bbc <_lv_blend_fill>
   299d4:	e00c      	b.n	299f0 <lv_draw_rect+0x78a>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   299d6:	2e02      	cmp	r6, #2
   299d8:	d118      	bne.n	29a0c <lv_draw_rect+0x7a6>
                    _lv_blend_map(clip, &fill_area, grad_map, mask_buf, mask_res, opa2, dsc->bg_blend_mode);
   299da:	7b6b      	ldrb	r3, [r5, #13]
   299dc:	9302      	str	r3, [sp, #8]
   299de:	9b06      	ldr	r3, [sp, #24]
   299e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   299e2:	e9cd 7300 	strd	r7, r3, [sp]
   299e6:	a91a      	add	r1, sp, #104	; 0x68
   299e8:	4643      	mov	r3, r8
   299ea:	4648      	mov	r0, r9
   299ec:	f7fe fafb 	bl	27fe6 <_lv_blend_map>
            fill_area.y1++;
   299f0:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   299f4:	3301      	adds	r3, #1
   299f6:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   299fa:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   299fe:	3301      	adds	r3, #1
   29a00:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29a04:	9b07      	ldr	r3, [sp, #28]
   29a06:	3301      	adds	r3, #1
   29a08:	9307      	str	r3, [sp, #28]
   29a0a:	e6a6      	b.n	2975a <lv_draw_rect+0x4f4>
                else if(grad_dir == LV_GRAD_DIR_VER) {
   29a0c:	2e01      	cmp	r6, #1
   29a0e:	f43f af69 	beq.w	298e4 <lv_draw_rect+0x67e>
                else if(other_mask_cnt != 0 || !split) {
   29a12:	9b11      	ldr	r3, [sp, #68]	; 0x44
   29a14:	2b00      	cmp	r3, #0
   29a16:	f47f af65 	bne.w	298e4 <lv_draw_rect+0x67e>
   29a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   29a1c:	2b32      	cmp	r3, #50	; 0x32
   29a1e:	dce7      	bgt.n	299f0 <lv_draw_rect+0x78a>
   29a20:	e760      	b.n	298e4 <lv_draw_rect+0x67e>
            _lv_memset_ff(mask_buf, draw_area_w);
   29a22:	4639      	mov	r1, r7
   29a24:	4628      	mov	r0, r5
   29a26:	f7ff fc15 	bl	29254 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29a2a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29a2e:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29a32:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29a36:	4442      	add	r2, r8
   29a38:	4419      	add	r1, r3
   29a3a:	b212      	sxth	r2, r2
   29a3c:	463b      	mov	r3, r7
   29a3e:	b209      	sxth	r1, r1
   29a40:	4628      	mov	r0, r5
   29a42:	f7f2 ff55 	bl	1c8f0 <lv_draw_mask_apply>
            fill_area2.y1 = fill_area.y1;
   29a46:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29a4a:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area2.y2 = fill_area.y2;
   29a4e:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29a52:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            fill_area2.x1 = area_outer->x1;
   29a56:	f9b4 3000 	ldrsh.w	r3, [r4]
   29a5a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area2.x2 = area_outer->x1 + rout - 1;
   29a5e:	3b01      	subs	r3, #1
   29a60:	4453      	add	r3, sl
   29a62:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29a66:	9b06      	ldr	r3, [sp, #24]
   29a68:	9302      	str	r3, [sp, #8]
   29a6a:	9b05      	ldr	r3, [sp, #20]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29a6c:	900c      	str	r0, [sp, #48]	; 0x30
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29a6e:	9301      	str	r3, [sp, #4]
   29a70:	9000      	str	r0, [sp, #0]
   29a72:	462b      	mov	r3, r5
   29a74:	4632      	mov	r2, r6
   29a76:	a91a      	add	r1, sp, #104	; 0x68
   29a78:	4648      	mov	r0, r9
   29a7a:	f7fe f89f 	bl	27bbc <_lv_blend_fill>
            if(fill_area2.y2 < area_outer->y1 + border_width) {
   29a7e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   29a82:	9907      	ldr	r1, [sp, #28]
   29a84:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
   29a88:	440b      	add	r3, r1
   29a8a:	429a      	cmp	r2, r3
   29a8c:	da14      	bge.n	29ab8 <lv_draw_rect+0x852>
                fill_area2.x1 = area_outer->x1 + rout;
   29a8e:	8823      	ldrh	r3, [r4, #0]
   29a90:	4453      	add	r3, sl
   29a92:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = area_outer->x2 - rout;
   29a96:	88a3      	ldrh	r3, [r4, #4]
   29a98:	eba3 030a 	sub.w	r3, r3, sl
   29a9c:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   29aa0:	9b06      	ldr	r3, [sp, #24]
   29aa2:	9302      	str	r3, [sp, #8]
   29aa4:	9b05      	ldr	r3, [sp, #20]
   29aa6:	9301      	str	r3, [sp, #4]
   29aa8:	2301      	movs	r3, #1
   29aaa:	9300      	str	r3, [sp, #0]
   29aac:	4632      	mov	r2, r6
   29aae:	2300      	movs	r3, #0
   29ab0:	a91a      	add	r1, sp, #104	; 0x68
   29ab2:	4648      	mov	r0, r9
   29ab4:	f7fe f882 	bl	27bbc <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29ab8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
            fill_area2.x2 = area_outer->x2;
   29abc:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29ac0:	1c53      	adds	r3, r2, #1
   29ac2:	eba3 030a 	sub.w	r3, r3, sl
   29ac6:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   29aca:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   29ace:	f1c3 0301 	rsb	r3, r3, #1
   29ad2:	4413      	add	r3, r2
   29ad4:	9a08      	ldr	r2, [sp, #32]
   29ad6:	1a9b      	subs	r3, r3, r2
   29ad8:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29adc:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   29ade:	9a06      	ldr	r2, [sp, #24]
   29ae0:	9202      	str	r2, [sp, #8]
   29ae2:	9a05      	ldr	r2, [sp, #20]
   29ae4:	9201      	str	r2, [sp, #4]
   29ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29ae8:	9200      	str	r2, [sp, #0]
   29aea:	2b00      	cmp	r3, #0
   29aec:	bfac      	ite	ge
   29aee:	18eb      	addge	r3, r5, r3
   29af0:	1c2b      	addlt	r3, r5, #0
   29af2:	4632      	mov	r2, r6
   29af4:	a91a      	add	r1, sp, #104	; 0x68
   29af6:	4648      	mov	r0, r9
   29af8:	f7fe f860 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
   29afc:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29b00:	3301      	adds	r3, #1
   29b02:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   29b06:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29b0a:	3301      	adds	r3, #1
   29b0c:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= upper_corner_end; h++) {
   29b10:	f108 0801 	add.w	r8, r8, #1
   29b14:	e584      	b.n	29620 <lv_draw_rect+0x3ba>
            _lv_memset_ff(mask_buf, draw_area_w);
   29b16:	4639      	mov	r1, r7
   29b18:	4628      	mov	r0, r5
   29b1a:	f7ff fb9b 	bl	29254 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29b1e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29b22:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29b26:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29b2a:	4442      	add	r2, r8
   29b2c:	4419      	add	r1, r3
   29b2e:	b212      	sxth	r2, r2
   29b30:	463b      	mov	r3, r7
   29b32:	b209      	sxth	r1, r1
   29b34:	4628      	mov	r0, r5
   29b36:	f7f2 fedb 	bl	1c8f0 <lv_draw_mask_apply>
            fill_area2.x1 = area_outer->x1;
   29b3a:	f9b4 3000 	ldrsh.w	r3, [r4]
   29b3e:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            fill_area2.x2 = area_outer->x1 + rout - 1;
   29b42:	3b01      	subs	r3, #1
   29b44:	4453      	add	r3, sl
   29b46:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
            fill_area2.y1 = fill_area.y1;
   29b4a:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29b4e:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area2.y2 = fill_area.y2;
   29b52:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29b56:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29b5a:	9b06      	ldr	r3, [sp, #24]
   29b5c:	9302      	str	r3, [sp, #8]
   29b5e:	9b05      	ldr	r3, [sp, #20]
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29b60:	900b      	str	r0, [sp, #44]	; 0x2c
            _lv_blend_fill(clip, &fill_area2, color, mask_buf, mask_res, opa, blend_mode);
   29b62:	9301      	str	r3, [sp, #4]
   29b64:	9000      	str	r0, [sp, #0]
   29b66:	462b      	mov	r3, r5
   29b68:	4632      	mov	r2, r6
   29b6a:	a91a      	add	r1, sp, #104	; 0x68
   29b6c:	4648      	mov	r0, r9
   29b6e:	f7fe f825 	bl	27bbc <_lv_blend_fill>
            if(fill_area2.y2 > area_outer->y2 - border_width) {
   29b72:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   29b76:	9907      	ldr	r1, [sp, #28]
   29b78:	f9bd 206e 	ldrsh.w	r2, [sp, #110]	; 0x6e
   29b7c:	1a5b      	subs	r3, r3, r1
   29b7e:	429a      	cmp	r2, r3
   29b80:	dd14      	ble.n	29bac <lv_draw_rect+0x946>
                fill_area2.x1 = area_outer->x1 + rout;
   29b82:	8823      	ldrh	r3, [r4, #0]
   29b84:	4453      	add	r3, sl
   29b86:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
                fill_area2.x2 = area_outer->x2 - rout;
   29b8a:	88a3      	ldrh	r3, [r4, #4]
   29b8c:	eba3 030a 	sub.w	r3, r3, sl
   29b90:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
                _lv_blend_fill(clip, &fill_area2, color, NULL, LV_DRAW_MASK_RES_FULL_COVER, opa, blend_mode);
   29b94:	9b06      	ldr	r3, [sp, #24]
   29b96:	9302      	str	r3, [sp, #8]
   29b98:	9b05      	ldr	r3, [sp, #20]
   29b9a:	9301      	str	r3, [sp, #4]
   29b9c:	2301      	movs	r3, #1
   29b9e:	9300      	str	r3, [sp, #0]
   29ba0:	4632      	mov	r2, r6
   29ba2:	2300      	movs	r3, #0
   29ba4:	a91a      	add	r1, sp, #104	; 0x68
   29ba6:	4648      	mov	r0, r9
   29ba8:	f7fe f808 	bl	27bbc <_lv_blend_fill>
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29bac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
            fill_area2.x2 = area_outer->x2;
   29bb0:	f8ad 206c 	strh.w	r2, [sp, #108]	; 0x6c
            fill_area2.x1 = area_outer->x2 - rout + 1;
   29bb4:	1c53      	adds	r3, r2, #1
   29bb6:	eba3 030a 	sub.w	r3, r3, sl
   29bba:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
            int32_t mask_ofs = (area_outer->x2 - rout + 1) - (vdb->area.x1 + draw_area.x1);
   29bbe:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
   29bc2:	f1c3 0301 	rsb	r3, r3, #1
   29bc6:	4413      	add	r3, r2
   29bc8:	9a08      	ldr	r2, [sp, #32]
   29bca:	1a9b      	subs	r3, r3, r2
   29bcc:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29bd0:	1a9b      	subs	r3, r3, r2
            _lv_blend_fill(clip, &fill_area2, color, mask_buf + mask_ofs, mask_res, opa, blend_mode);
   29bd2:	9a06      	ldr	r2, [sp, #24]
   29bd4:	9202      	str	r2, [sp, #8]
   29bd6:	9a05      	ldr	r2, [sp, #20]
   29bd8:	9201      	str	r2, [sp, #4]
   29bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   29bdc:	9200      	str	r2, [sp, #0]
   29bde:	2b00      	cmp	r3, #0
   29be0:	bfac      	ite	ge
   29be2:	18eb      	addge	r3, r5, r3
   29be4:	1c2b      	addlt	r3, r5, #0
   29be6:	4632      	mov	r2, r6
   29be8:	a91a      	add	r1, sp, #104	; 0x68
   29bea:	4648      	mov	r0, r9
   29bec:	f7fd ffe6 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
   29bf0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29bf4:	3301      	adds	r3, #1
   29bf6:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   29bfa:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29bfe:	3301      	adds	r3, #1
   29c00:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = lower_corner_end; h <= draw_area.y2; h++) {
   29c04:	f108 0801 	add.w	r8, r8, #1
   29c08:	e522      	b.n	29650 <lv_draw_rect+0x3ea>
        fill_area.x1 = area_outer->x1;
   29c0a:	8823      	ldrh	r3, [r4, #0]
   29c0c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        fill_area.x2 = area_outer->x2;
   29c10:	88a3      	ldrh	r3, [r4, #4]
   29c12:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29c16:	f9bd 405a 	ldrsh.w	r4, [sp, #90]	; 0x5a
   29c1a:	f8bb 3012 	ldrh.w	r3, [fp, #18]
   29c1e:	4423      	add	r3, r4
   29c20:	b21b      	sxth	r3, r3
   29c22:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
        fill_area.y2 = fill_area.y1;
   29c26:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29c2a:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
   29c2e:	429c      	cmp	r4, r3
   29c30:	f73f ad49 	bgt.w	296c6 <lv_draw_rect+0x460>
            _lv_memset_ff(mask_buf, draw_area_w);
   29c34:	4639      	mov	r1, r7
   29c36:	4628      	mov	r0, r5
   29c38:	f7ff fb0c 	bl	29254 <_lv_memset_ff>
            mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29c3c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   29c40:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29c44:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29c48:	4422      	add	r2, r4
   29c4a:	4419      	add	r1, r3
   29c4c:	b212      	sxth	r2, r2
   29c4e:	463b      	mov	r3, r7
   29c50:	b209      	sxth	r1, r1
   29c52:	4628      	mov	r0, r5
   29c54:	f7f2 fe4c 	bl	1c8f0 <lv_draw_mask_apply>
            _lv_blend_fill(clip, &fill_area, color, mask_buf, mask_res, opa, blend_mode);
   29c58:	9b06      	ldr	r3, [sp, #24]
   29c5a:	9302      	str	r3, [sp, #8]
   29c5c:	9b05      	ldr	r3, [sp, #20]
   29c5e:	4632      	mov	r2, r6
   29c60:	e9cd 0300 	strd	r0, r3, [sp]
   29c64:	a918      	add	r1, sp, #96	; 0x60
   29c66:	462b      	mov	r3, r5
   29c68:	4648      	mov	r0, r9
   29c6a:	f7fd ffa7 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
   29c6e:	f8bd 3062 	ldrh.w	r3, [sp, #98]	; 0x62
   29c72:	3301      	adds	r3, #1
   29c74:	f8ad 3062 	strh.w	r3, [sp, #98]	; 0x62
            fill_area.y2++;
   29c78:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
   29c7c:	3301      	adds	r3, #1
   29c7e:	f8ad 3066 	strh.w	r3, [sp, #102]	; 0x66
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29c82:	3401      	adds	r4, #1
   29c84:	e7d1      	b.n	29c2a <lv_draw_rect+0x9c4>
        if(opa > LV_OPA_MAX) opa = LV_OPA_COVER;
   29c86:	9b05      	ldr	r3, [sp, #20]
   29c88:	2bfe      	cmp	r3, #254	; 0xfe
   29c8a:	bf28      	it	cs
   29c8c:	23ff      	movcs	r3, #255	; 0xff
   29c8e:	9305      	str	r3, [sp, #20]
        lv_disp_t * disp    = _lv_refr_get_disp_refreshing();
   29c90:	f7f1 f96a 	bl	1af68 <_lv_refr_get_disp_refreshing>
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29c94:	f000 f962 	bl	29f5c <lv_disp_get_buf>
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   29c98:	464a      	mov	r2, r9
        lv_disp_buf_t * vdb = lv_disp_get_buf(disp);
   29c9a:	4683      	mov	fp, r0
        is_common = _lv_area_intersect(&draw_area, coords, clip);
   29c9c:	4621      	mov	r1, r4
   29c9e:	a818      	add	r0, sp, #96	; 0x60
   29ca0:	f000 f9c7 	bl	2a032 <_lv_area_intersect>
        if(is_common == false) return;
   29ca4:	2800      	cmp	r0, #0
   29ca6:	f43f ad17 	beq.w	296d8 <lv_draw_rect+0x472>
        draw_area.x1 -= disp_area->x1;
   29caa:	f9bb 2010 	ldrsh.w	r2, [fp, #16]
   29cae:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
        draw_area.y1 -= disp_area->y1;
   29cb2:	f9bb 6012 	ldrsh.w	r6, [fp, #18]
   29cb6:	f8bd 1062 	ldrh.w	r1, [sp, #98]	; 0x62
        draw_area.x1 -= disp_area->x1;
   29cba:	1a83      	subs	r3, r0, r2
   29cbc:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
        draw_area.x2 -= disp_area->x1;
   29cc0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
   29cc4:	1a9a      	subs	r2, r3, r2
   29cc6:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
        draw_area.y2 -= disp_area->y1;
   29cca:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
        draw_area.y1 -= disp_area->y1;
   29cce:	1b89      	subs	r1, r1, r6
        draw_area.y2 -= disp_area->y1;
   29cd0:	1b92      	subs	r2, r2, r6
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   29cd2:	1c5e      	adds	r6, r3, #1
   29cd4:	1a36      	subs	r6, r6, r0
   29cd6:	b236      	sxth	r6, r6
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29cd8:	4630      	mov	r0, r6
        draw_area.y1 -= disp_area->y1;
   29cda:	f8ad 1062 	strh.w	r1, [sp, #98]	; 0x62
        draw_area.y2 -= disp_area->y1;
   29cde:	f8ad 2066 	strh.w	r2, [sp, #102]	; 0x66
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29ce2:	f7f3 fcb7 	bl	1d654 <_lv_mem_buf_get>
        if(rout > 0) {
   29ce6:	f1b8 0f00 	cmp.w	r8, #0
        lv_opa_t * mask_buf = _lv_mem_buf_get(draw_area_w);
   29cea:	4682      	mov	sl, r0
        if(rout > 0) {
   29cec:	fa0f f788 	sxth.w	r7, r8
   29cf0:	dd3d      	ble.n	29d6e <lv_draw_rect+0xb08>
            lv_draw_mask_radius_init(&mask_rout_param, coords, rout, false);
   29cf2:	2300      	movs	r3, #0
   29cf4:	463a      	mov	r2, r7
   29cf6:	4621      	mov	r1, r4
   29cf8:	a81c      	add	r0, sp, #112	; 0x70
   29cfa:	f7f2 fed5 	bl	1caa8 <lv_draw_mask_radius_init>
            mask_rout_id = lv_draw_mask_add(&mask_rout_param, NULL);
   29cfe:	2100      	movs	r1, #0
   29d00:	a81c      	add	r0, sp, #112	; 0x70
   29d02:	f7f2 fdcf 	bl	1c8a4 <lv_draw_mask_add>
   29d06:	9006      	str	r0, [sp, #24]
        lv_draw_mask_radius_init(&mask_rin_param, &area_inner, rout - dsc->border_width, true);
   29d08:	8a2a      	ldrh	r2, [r5, #16]
   29d0a:	1aba      	subs	r2, r7, r2
   29d0c:	2301      	movs	r3, #1
   29d0e:	b212      	sxth	r2, r2
   29d10:	a914      	add	r1, sp, #80	; 0x50
   29d12:	a823      	add	r0, sp, #140	; 0x8c
   29d14:	f7f2 fec8 	bl	1caa8 <lv_draw_mask_radius_init>
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   29d18:	2100      	movs	r1, #0
   29d1a:	a823      	add	r0, sp, #140	; 0x8c
   29d1c:	f7f2 fdc2 	bl	1c8a4 <lv_draw_mask_add>
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   29d20:	f9b5 7010 	ldrsh.w	r7, [r5, #16]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29d24:	f8bb 2012 	ldrh.w	r2, [fp, #18]
        lv_color_t color = dsc->border_color;
   29d28:	89eb      	ldrh	r3, [r5, #14]
   29d2a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        int32_t corner_size = LV_MATH_MAX(rout, dsc->border_width - 1);
   29d2e:	3f01      	subs	r7, #1
   29d30:	4547      	cmp	r7, r8
   29d32:	bfb8      	it	lt
   29d34:	4647      	movlt	r7, r8
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29d36:	f9bd 8062 	ldrsh.w	r8, [sp, #98]	; 0x62
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   29d3a:	7d6b      	ldrb	r3, [r5, #21]
        fill_area.x1 = coords->x1;
   29d3c:	f9b4 1000 	ldrsh.w	r1, [r4]
        lv_blend_mode_t blend_mode = dsc->border_blend_mode;
   29d40:	9308      	str	r3, [sp, #32]
        fill_area.y1 = disp_area->y1 + draw_area.y1;
   29d42:	4442      	add	r2, r8
   29d44:	b212      	sxth	r2, r2
   29d46:	f8ad 206a 	strh.w	r2, [sp, #106]	; 0x6a
        fill_area.y2 = fill_area.y1;
   29d4a:	f8ad 206e 	strh.w	r2, [sp, #110]	; 0x6e
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   29d4e:	f9b5 2012 	ldrsh.w	r2, [r5, #18]
        fill_area.x2 = coords->x2;
   29d52:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
        int16_t mask_rin_id = lv_draw_mask_add(&mask_rin_param, NULL);
   29d56:	9007      	str	r0, [sp, #28]
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   29d58:	2a04      	cmp	r2, #4
        fill_area.x1 = coords->x1;
   29d5a:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
        fill_area.x2 = coords->x2;
   29d5e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
        if(dsc->border_side == LV_BORDER_SIDE_LEFT) fill_area.x2 = coords->x1 + corner_size;
   29d62:	d108      	bne.n	29d76 <lv_draw_rect+0xb10>
   29d64:	19cd      	adds	r5, r1, r7
   29d66:	f8ad 506c 	strh.w	r5, [sp, #108]	; 0x6c
        uint32_t buf_ofs = 0;
   29d6a:	2500      	movs	r5, #0
   29d6c:	e00a      	b.n	29d84 <lv_draw_rect+0xb1e>
        int16_t mask_rout_id = LV_MASK_ID_INV;
   29d6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29d72:	9306      	str	r3, [sp, #24]
   29d74:	e7c8      	b.n	29d08 <lv_draw_rect+0xaa2>
        else if(dsc->border_side == LV_BORDER_SIDE_RIGHT) {
   29d76:	2a08      	cmp	r2, #8
   29d78:	d1f7      	bne.n	29d6a <lv_draw_rect+0xb04>
            fill_area.x1 = coords->x2 - corner_size;
   29d7a:	1bdd      	subs	r5, r3, r7
   29d7c:	b22d      	sxth	r5, r5
   29d7e:	f8ad 5068 	strh.w	r5, [sp, #104]	; 0x68
            buf_ofs = fill_area.x1 - coords->x1;
   29d82:	1a6d      	subs	r5, r5, r1
        volatile bool top_only = false;
   29d84:	2300      	movs	r3, #0
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   29d86:	2a02      	cmp	r2, #2
        volatile bool top_only = false;
   29d88:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool bottom_only = false;
   29d8c:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
        if(dsc->border_side == LV_BORDER_SIDE_TOP) top_only = true;
   29d90:	d11a      	bne.n	29dc8 <lv_draw_rect+0xb62>
   29d92:	2301      	movs	r3, #1
   29d94:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
        volatile bool normal = !top_only && !bottom_only ? true : false;
   29d98:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   29d9c:	bb0b      	cbnz	r3, 29de2 <lv_draw_rect+0xb7c>
   29d9e:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
   29da2:	f083 0301 	eor.w	r3, r3, #1
   29da6:	f003 0301 	and.w	r3, r3, #1
   29daa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   29dae:	4455      	add	r5, sl
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29db0:	f9bd 3066 	ldrsh.w	r3, [sp, #102]	; 0x66
   29db4:	4598      	cmp	r8, r3
   29db6:	dd16      	ble.n	29de6 <lv_draw_rect+0xb80>
        lv_draw_mask_remove_id(mask_rin_id);
   29db8:	9807      	ldr	r0, [sp, #28]
   29dba:	f7f2 fdbb 	bl	1c934 <lv_draw_mask_remove_id>
        lv_draw_mask_remove_id(mask_rout_id);
   29dbe:	9806      	ldr	r0, [sp, #24]
   29dc0:	f7f2 fdb8 	bl	1c934 <lv_draw_mask_remove_id>
        _lv_mem_buf_release(mask_buf);
   29dc4:	4650      	mov	r0, sl
   29dc6:	e485      	b.n	296d4 <lv_draw_rect+0x46e>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   29dc8:	2a01      	cmp	r2, #1
   29dca:	d007      	beq.n	29ddc <lv_draw_rect+0xb76>
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   29dcc:	2a03      	cmp	r2, #3
   29dce:	d1e3      	bne.n	29d98 <lv_draw_rect+0xb32>
            top_only = true;
   29dd0:	2301      	movs	r3, #1
   29dd2:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
            bottom_only = true;
   29dd6:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
   29dda:	e7dd      	b.n	29d98 <lv_draw_rect+0xb32>
        if(dsc->border_side == LV_BORDER_SIDE_BOTTOM) bottom_only = true;
   29ddc:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
        if(dsc->border_side == (LV_BORDER_SIDE_TOP | LV_BORDER_SIDE_BOTTOM)) {
   29de0:	e7da      	b.n	29d98 <lv_draw_rect+0xb32>
        volatile bool normal = !top_only && !bottom_only ? true : false;
   29de2:	2300      	movs	r3, #0
   29de4:	e7df      	b.n	29da6 <lv_draw_rect+0xb40>
            if(normal ||
   29de6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   29dea:	b98b      	cbnz	r3, 29e10 <lv_draw_rect+0xbaa>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   29dec:	f89d 304e 	ldrb.w	r3, [sp, #78]	; 0x4e
   29df0:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	; 0x6a
            if(normal ||
   29df4:	b123      	cbz	r3, 29e00 <lv_draw_rect+0xb9a>
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   29df6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
   29dfa:	443b      	add	r3, r7
   29dfc:	429a      	cmp	r2, r3
   29dfe:	dd07      	ble.n	29e10 <lv_draw_rect+0xbaa>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   29e00:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
               (top_only && fill_area.y1 <= coords->y1 + corner_size) ||
   29e04:	b313      	cbz	r3, 29e4c <lv_draw_rect+0xbe6>
               (bottom_only && fill_area.y1 >= coords->y2 - corner_size)) {
   29e06:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   29e0a:	1bdb      	subs	r3, r3, r7
   29e0c:	429a      	cmp	r2, r3
   29e0e:	db1d      	blt.n	29e4c <lv_draw_rect+0xbe6>
                _lv_memset_ff(mask_buf, draw_area_w);
   29e10:	4631      	mov	r1, r6
   29e12:	4650      	mov	r0, sl
   29e14:	f7ff fa1e 	bl	29254 <_lv_memset_ff>
                mask_res = lv_draw_mask_apply(mask_buf, vdb->area.x1 + draw_area.x1, vdb->area.y1 + h, draw_area_w);
   29e18:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
   29e1c:	f8bb 2012 	ldrh.w	r2, [fp, #18]
   29e20:	f8bb 1010 	ldrh.w	r1, [fp, #16]
   29e24:	4442      	add	r2, r8
   29e26:	4419      	add	r1, r3
   29e28:	b212      	sxth	r2, r2
   29e2a:	4633      	mov	r3, r6
   29e2c:	b209      	sxth	r1, r1
   29e2e:	4650      	mov	r0, sl
   29e30:	f7f2 fd5e 	bl	1c8f0 <lv_draw_mask_apply>
                _lv_blend_fill(clip, &fill_area, color, mask_buf + buf_ofs, mask_res, opa, blend_mode);
   29e34:	9b08      	ldr	r3, [sp, #32]
   29e36:	9302      	str	r3, [sp, #8]
   29e38:	9b05      	ldr	r3, [sp, #20]
   29e3a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   29e3e:	e9cd 0300 	strd	r0, r3, [sp]
   29e42:	a91a      	add	r1, sp, #104	; 0x68
   29e44:	462b      	mov	r3, r5
   29e46:	4648      	mov	r0, r9
   29e48:	f7fd feb8 	bl	27bbc <_lv_blend_fill>
            fill_area.y1++;
   29e4c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
   29e50:	3301      	adds	r3, #1
   29e52:	f8ad 306a 	strh.w	r3, [sp, #106]	; 0x6a
            fill_area.y2++;
   29e56:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
   29e5a:	3301      	adds	r3, #1
   29e5c:	f8ad 306e 	strh.w	r3, [sp, #110]	; 0x6e
        for(h = draw_area.y1; h <= draw_area.y2; h++) {
   29e60:	f108 0801 	add.w	r8, r8, #1
   29e64:	e7a4      	b.n	29db0 <lv_draw_rect+0xb4a>
            if(grad_dir == LV_GRAD_DIR_VER) {
   29e66:	2e01      	cmp	r6, #1
            opa2 = opa;
   29e68:	f8cd a018 	str.w	sl, [sp, #24]
            if(grad_dir == LV_GRAD_DIR_VER) {
   29e6c:	f43f ad44 	beq.w	298f8 <lv_draw_rect+0x692>
                mask_res = LV_DRAW_MASK_RES_FULL_COVER;
   29e70:	2701      	movs	r7, #1
   29e72:	e547      	b.n	29904 <lv_draw_rect+0x69e>
                if(grad_dir == LV_GRAD_DIR_HOR) {
   29e74:	2e02      	cmp	r6, #2
   29e76:	f47f adcc 	bne.w	29a12 <lv_draw_rect+0x7ac>
   29e7a:	e5ae      	b.n	299da <lv_draw_rect+0x774>

00029e7c <_lv_img_buf_get_transformed_area>:
    res->y2 = LV_MATH_MAX4(lb.y, lt.y, rb.y, rt.y);
#else
    LV_UNUSED(angle);
    LV_UNUSED(zoom);
    LV_UNUSED(pivot);
    res->x1 = 0;
   29e7c:	2300      	movs	r3, #0
    res->y1 = 0;
    res->x2 = w - 1;
   29e7e:	3901      	subs	r1, #1
    res->y2 = h - 1;
   29e80:	3a01      	subs	r2, #1
    res->x1 = 0;
   29e82:	8003      	strh	r3, [r0, #0]
    res->y1 = 0;
   29e84:	8043      	strh	r3, [r0, #2]
    res->x2 = w - 1;
   29e86:	8081      	strh	r1, [r0, #4]
    res->y2 = h - 1;
   29e88:	80c2      	strh	r2, [r0, #6]
#endif
}
   29e8a:	4770      	bx	lr

00029e8c <_lv_memset_00>:
{
   29e8c:	460a      	mov	r2, r1
   29e8e:	2100      	movs	r1, #0
   29e90:	f001 bc84 	b.w	2b79c <memset>

00029e94 <lv_img_decoder_built_in_close>:
{
   29e94:	b538      	push	{r3, r4, r5, lr}
    lv_img_decoder_built_in_data_t * user_data = dsc->user_data;
   29e96:	69cd      	ldr	r5, [r1, #28]
{
   29e98:	460c      	mov	r4, r1
    if(user_data) {
   29e9a:	b165      	cbz	r5, 29eb6 <lv_img_decoder_built_in_close+0x22>
        if(user_data->palette) lv_mem_free(user_data->palette);
   29e9c:	6828      	ldr	r0, [r5, #0]
   29e9e:	b108      	cbz	r0, 29ea4 <lv_img_decoder_built_in_close+0x10>
   29ea0:	f7f3 fb7e 	bl	1d5a0 <lv_mem_free>
        if(user_data->opa) lv_mem_free(user_data->opa);
   29ea4:	6868      	ldr	r0, [r5, #4]
   29ea6:	b108      	cbz	r0, 29eac <lv_img_decoder_built_in_close+0x18>
   29ea8:	f7f3 fb7a 	bl	1d5a0 <lv_mem_free>
        lv_mem_free(user_data);
   29eac:	4628      	mov	r0, r5
   29eae:	f7f3 fb77 	bl	1d5a0 <lv_mem_free>
        dsc->user_data = NULL;
   29eb2:	2300      	movs	r3, #0
   29eb4:	61e3      	str	r3, [r4, #28]
}
   29eb6:	bd38      	pop	{r3, r4, r5, pc}

00029eb8 <_lv_memset_00>:
   29eb8:	460a      	mov	r2, r1
   29eba:	2100      	movs	r1, #0
   29ebc:	f001 bc6e 	b.w	2b79c <memset>

00029ec0 <lv_img_decoder_read_line>:
{
   29ec0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29ec2:	4605      	mov	r5, r0
    if(dsc->decoder->read_line_cb) res = dsc->decoder->read_line_cb(dsc->decoder, dsc, x, y, len, buf);
   29ec4:	6800      	ldr	r0, [r0, #0]
   29ec6:	6884      	ldr	r4, [r0, #8]
   29ec8:	b144      	cbz	r4, 29edc <lv_img_decoder_read_line+0x1c>
   29eca:	9e06      	ldr	r6, [sp, #24]
   29ecc:	e9cd 3600 	strd	r3, r6, [sp]
   29ed0:	4613      	mov	r3, r2
   29ed2:	460a      	mov	r2, r1
   29ed4:	4629      	mov	r1, r5
   29ed6:	47a0      	blx	r4
}
   29ed8:	b002      	add	sp, #8
   29eda:	bd70      	pop	{r4, r5, r6, pc}
    lv_res_t res = LV_RES_INV;
   29edc:	4620      	mov	r0, r4
   29ede:	e7fb      	b.n	29ed8 <lv_img_decoder_read_line+0x18>

00029ee0 <lv_img_decoder_close>:
{
   29ee0:	b510      	push	{r4, lr}
   29ee2:	4604      	mov	r4, r0
    if(dsc->decoder) {
   29ee4:	6800      	ldr	r0, [r0, #0]
   29ee6:	b158      	cbz	r0, 29f00 <lv_img_decoder_close+0x20>
        if(dsc->decoder->close_cb) dsc->decoder->close_cb(dsc->decoder, dsc);
   29ee8:	68c3      	ldr	r3, [r0, #12]
   29eea:	b10b      	cbz	r3, 29ef0 <lv_img_decoder_close+0x10>
   29eec:	4621      	mov	r1, r4
   29eee:	4798      	blx	r3
        if(dsc->src_type == LV_IMG_SRC_FILE) {
   29ef0:	7aa3      	ldrb	r3, [r4, #10]
   29ef2:	2b01      	cmp	r3, #1
   29ef4:	d104      	bne.n	29f00 <lv_img_decoder_close+0x20>
            lv_mem_free(dsc->src);
   29ef6:	6860      	ldr	r0, [r4, #4]
   29ef8:	f7f3 fb52 	bl	1d5a0 <lv_mem_free>
            dsc->src = NULL;
   29efc:	2300      	movs	r3, #0
   29efe:	6063      	str	r3, [r4, #4]
}
   29f00:	bd10      	pop	{r4, pc}

00029f02 <_lv_memset_00>:
 * Wrapper for the standard memset with fixed 0x00 value
 * @param dst pointer to the destination buffer
 * @param len number of byte to set
 */
static inline void _lv_memset_00(void * dst, size_t len)
{
   29f02:	460a      	mov	r2, r1
   29f04:	2100      	movs	r1, #0
   29f06:	f001 bc49 	b.w	2b79c <memset>

00029f0a <lv_disp_drv_init>:
{
   29f0a:	b510      	push	{r4, lr}
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   29f0c:	2130      	movs	r1, #48	; 0x30
{
   29f0e:	4604      	mov	r4, r0
    _lv_memset_00(driver, sizeof(lv_disp_drv_t));
   29f10:	f7ff fff7 	bl	29f02 <_lv_memset_00>
    driver->color_chroma_key = LV_COLOR_TRANSP;
   29f14:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
    driver->flush_cb         = NULL;
   29f18:	2200      	movs	r2, #0
    driver->color_chroma_key = LV_COLOR_TRANSP;
   29f1a:	8523      	strh	r3, [r4, #40]	; 0x28
    driver->hor_res          = LV_HOR_RES_MAX;
   29f1c:	f04f 13f0 	mov.w	r3, #15728880	; 0xf000f0
    driver->buffer           = NULL;
   29f20:	e9c4 3200 	strd	r3, r2, [r4]
    driver->rotated          = 0;
   29f24:	8923      	ldrh	r3, [r4, #8]
    driver->flush_cb         = NULL;
   29f26:	60e2      	str	r2, [r4, #12]
    driver->rotated          = 0;
   29f28:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
   29f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   29f30:	8123      	strh	r3, [r4, #8]
    driver->user_data = NULL;
   29f32:	62e2      	str	r2, [r4, #44]	; 0x2c
    driver->set_px_cb = NULL;
   29f34:	6162      	str	r2, [r4, #20]
}
   29f36:	bd10      	pop	{r4, pc}

00029f38 <lv_disp_buf_init>:
{
   29f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29f3a:	4604      	mov	r4, r0
   29f3c:	460d      	mov	r5, r1
   29f3e:	4617      	mov	r7, r2
   29f40:	461e      	mov	r6, r3
    _lv_memset_00(disp_buf, sizeof(lv_disp_buf_t));
   29f42:	2124      	movs	r1, #36	; 0x24
   29f44:	f7ff ffdd 	bl	29f02 <_lv_memset_00>
    disp_buf->buf2    = buf2;
   29f48:	e9c4 5700 	strd	r5, r7, [r4]
    disp_buf->size    = size_in_px_cnt;
   29f4c:	e9c4 5602 	strd	r5, r6, [r4, #8]
}
   29f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029f52 <lv_disp_flush_ready>:
    if(disp_drv->screen_transp) {
        _lv_memset_00(disp_drv->buffer->buf_act, disp_drv->buffer->size * sizeof(lv_color32_t));
    }
#endif

    disp_drv->buffer->flushing = 0;
   29f52:	6843      	ldr	r3, [r0, #4]
   29f54:	2200      	movs	r2, #0
   29f56:	619a      	str	r2, [r3, #24]
    disp_drv->buffer->flushing_last = 0;
   29f58:	61da      	str	r2, [r3, #28]
}
   29f5a:	4770      	bx	lr

00029f5c <lv_disp_get_buf>:
 * @return pointer to the internal buffers
 */
lv_disp_buf_t * lv_disp_get_buf(lv_disp_t * disp)
{
    return disp->driver.buffer;
}
   29f5c:	6840      	ldr	r0, [r0, #4]
   29f5e:	4770      	bx	lr

00029f60 <lv_disp_is_double_buf>:
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_double_buf(lv_disp_t * disp)
{
    if(disp->driver.buffer->buf1 && disp->driver.buffer->buf2)
   29f60:	6843      	ldr	r3, [r0, #4]
   29f62:	6818      	ldr	r0, [r3, #0]
   29f64:	b118      	cbz	r0, 29f6e <lv_disp_is_double_buf+0xe>
   29f66:	6858      	ldr	r0, [r3, #4]
   29f68:	3800      	subs	r0, #0
   29f6a:	bf18      	it	ne
   29f6c:	2001      	movne	r0, #1
        return true;
    else
        return false;
}
   29f6e:	4770      	bx	lr

00029f70 <lv_disp_is_true_double_buf>:
 * `size` is screen sized)
 * @param disp pointer to to display to check
 * @return true: double buffered; false: not double buffered
 */
bool lv_disp_is_true_double_buf(lv_disp_t * disp)
{
   29f70:	b508      	push	{r3, lr}
   29f72:	4602      	mov	r2, r0
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;

    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   29f74:	f7ff fff4 	bl	29f60 <lv_disp_is_double_buf>
   29f78:	b140      	cbz	r0, 29f8c <lv_disp_is_true_double_buf+0x1c>
    uint32_t scr_size = disp->driver.hor_res * disp->driver.ver_res;
   29f7a:	8853      	ldrh	r3, [r2, #2]
   29f7c:	8810      	ldrh	r0, [r2, #0]
   29f7e:	fb10 f003 	smulbb	r0, r0, r3
    if(lv_disp_is_double_buf(disp) && disp->driver.buffer->size == scr_size) {
   29f82:	6853      	ldr	r3, [r2, #4]
   29f84:	68db      	ldr	r3, [r3, #12]
   29f86:	1ac3      	subs	r3, r0, r3
   29f88:	4258      	negs	r0, r3
   29f8a:	4158      	adcs	r0, r3
        return true;
    }
    else {
        return false;
    }
}
   29f8c:	bd08      	pop	{r3, pc}

00029f8e <lv_tick_get>:
/**
 * Get the elapsed milliseconds since start up
 * @return the elapsed milliseconds
 */
uint32_t lv_tick_get(void)
{
   29f8e:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   29f90:	f001 f9fe 	bl	2b390 <z_impl_k_uptime_ticks>
   29f94:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   29f98:	fba0 2304 	umull	r2, r3, r0, r4
   29f9c:	fb04 3301 	mla	r3, r4, r1, r3
   29fa0:	0bd0      	lsrs	r0, r2, #15

    return result;
#else
    return LV_TICK_CUSTOM_SYS_TIME_EXPR;
#endif
}
   29fa2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
   29fa6:	bd10      	pop	{r4, pc}

00029fa8 <lv_tick_elaps>:
 * Get the elapsed milliseconds since a previous time stamp
 * @param prev_tick a previous time stamp (return value of systick_get() )
 * @return the elapsed milliseconds since 'prev_tick'
 */
uint32_t lv_tick_elaps(uint32_t prev_tick)
{
   29fa8:	b538      	push	{r3, r4, r5, lr}
   29faa:	4604      	mov	r4, r0
   29fac:	f001 f9f0 	bl	2b390 <z_impl_k_uptime_ticks>
   29fb0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   29fb4:	fba0 2305 	umull	r2, r3, r0, r5
   29fb8:	fb05 3301 	mla	r3, r5, r1, r3
   29fbc:	0bd0      	lsrs	r0, r2, #15
   29fbe:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
        prev_tick = UINT32_MAX - prev_tick + 1;
        prev_tick += act_time;
    }

    return prev_tick;
}
   29fc2:	1b00      	subs	r0, r0, r4
   29fc4:	bd38      	pop	{r3, r4, r5, pc}

00029fc6 <lv_point_within_circle>:
/**********************
 *   STATIC FUNCTIONS
 **********************/

static bool lv_point_within_circle(const lv_area_t * area, const lv_point_t * p)
{
   29fc6:	b530      	push	{r4, r5, lr}
    lv_coord_t r = (area->x2 - area->x1) / 2;
   29fc8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
   29fcc:	f9b0 5000 	ldrsh.w	r5, [r0]
    /* Circle center */
    lv_coord_t cx = area->x1 + r;
    lv_coord_t cy = area->y1 + r;

    /*Simplify the code by moving everything to (0, 0) */
    lv_coord_t px = p->x - cx;
   29fd0:	880a      	ldrh	r2, [r1, #0]
    lv_coord_t py = p->y - cy;
   29fd2:	8840      	ldrh	r0, [r0, #2]
   29fd4:	8849      	ldrh	r1, [r1, #2]
    lv_coord_t r = (area->x2 - area->x1) / 2;
   29fd6:	1b5b      	subs	r3, r3, r5
   29fd8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    lv_coord_t py = p->y - cy;
   29fdc:	1a09      	subs	r1, r1, r0
    lv_coord_t r = (area->x2 - area->x1) / 2;
   29fde:	105c      	asrs	r4, r3, #1
    lv_coord_t px = p->x - cx;
   29fe0:	1b52      	subs	r2, r2, r5
    lv_coord_t r = (area->x2 - area->x1) / 2;
   29fe2:	f343 034f 	sbfx	r3, r3, #1, #16
    lv_coord_t px = p->x - cx;
   29fe6:	1ad2      	subs	r2, r2, r3
    lv_coord_t py = p->y - cy;
   29fe8:	1acb      	subs	r3, r1, r3

    int32_t r_sqrd = r * r;
    int32_t dist = (px * px) + (py * py);
   29fea:	fb13 f303 	smulbb	r3, r3, r3
    int32_t r_sqrd = r * r;
   29fee:	4364      	muls	r4, r4
    int32_t dist = (px * px) + (py * py);
   29ff0:	fb12 3202 	smlabb	r2, r2, r2, r3

    if(dist <= r_sqrd)
        return true;
    else
        return false;
}
   29ff4:	4294      	cmp	r4, r2
   29ff6:	bfb4      	ite	lt
   29ff8:	2000      	movlt	r0, #0
   29ffa:	2001      	movge	r0, #1
   29ffc:	bd30      	pop	{r4, r5, pc}

00029ffe <lv_area_set>:
    area_p->x2 = x2;
   29ffe:	8083      	strh	r3, [r0, #4]
    area_p->y2 = y2;
   2a000:	f9bd 3000 	ldrsh.w	r3, [sp]
    area_p->x1 = x1;
   2a004:	8001      	strh	r1, [r0, #0]
    area_p->y1 = y1;
   2a006:	8042      	strh	r2, [r0, #2]
    area_p->y2 = y2;
   2a008:	80c3      	strh	r3, [r0, #6]
}
   2a00a:	4770      	bx	lr

0002a00c <lv_area_set_height>:
    area_p->y2 = area_p->y1 + h - 1;
   2a00c:	8843      	ldrh	r3, [r0, #2]
   2a00e:	3901      	subs	r1, #1
   2a010:	4419      	add	r1, r3
   2a012:	80c1      	strh	r1, [r0, #6]
}
   2a014:	4770      	bx	lr

0002a016 <lv_area_get_size>:
    size = (uint32_t)(area_p->x2 - area_p->x1 + 1) * (area_p->y2 - area_p->y1 + 1);
   2a016:	f9b0 3000 	ldrsh.w	r3, [r0]
   2a01a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   2a01e:	1ad2      	subs	r2, r2, r3
   2a020:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   2a024:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
   2a028:	3301      	adds	r3, #1
   2a02a:	1a18      	subs	r0, r3, r0
}
   2a02c:	fb02 0000 	mla	r0, r2, r0, r0
   2a030:	4770      	bx	lr

0002a032 <_lv_area_intersect>:
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a032:	f9b1 3000 	ldrsh.w	r3, [r1]
{
   2a036:	b570      	push	{r4, r5, r6, lr}
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a038:	f9b2 6000 	ldrsh.w	r6, [r2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a03c:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a040:	429e      	cmp	r6, r3
   2a042:	bfb8      	it	lt
   2a044:	461e      	movlt	r6, r3
{
   2a046:	4604      	mov	r4, r0
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2a048:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
    res_p->x1 = LV_MATH_MAX(a1_p->x1, a2_p->x1);
   2a04c:	8006      	strh	r6, [r0, #0]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2a04e:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
   2a052:	4283      	cmp	r3, r0
   2a054:	bfb8      	it	lt
   2a056:	4603      	movlt	r3, r0
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a058:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
    res_p->y1 = LV_MATH_MAX(a1_p->y1, a2_p->y1);
   2a05c:	8063      	strh	r3, [r4, #2]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a05e:	4285      	cmp	r5, r0
   2a060:	bfa8      	it	ge
   2a062:	4605      	movge	r5, r0
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2a064:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
   2a068:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
    res_p->x2 = LV_MATH_MIN(a1_p->x2, a2_p->x2);
   2a06c:	80a5      	strh	r5, [r4, #4]
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2a06e:	4290      	cmp	r0, r2
   2a070:	bfa8      	it	ge
   2a072:	4610      	movge	r0, r2
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2a074:	42ae      	cmp	r6, r5
    res_p->y2 = LV_MATH_MIN(a1_p->y2, a2_p->y2);
   2a076:	80e0      	strh	r0, [r4, #6]
    if((res_p->x1 > res_p->x2) || (res_p->y1 > res_p->y2)) {
   2a078:	dc04      	bgt.n	2a084 <_lv_area_intersect+0x52>
   2a07a:	4283      	cmp	r3, r0
   2a07c:	bfcc      	ite	gt
   2a07e:	2000      	movgt	r0, #0
   2a080:	2001      	movle	r0, #1
}
   2a082:	bd70      	pop	{r4, r5, r6, pc}
        union_ok = false;
   2a084:	2000      	movs	r0, #0
   2a086:	e7fc      	b.n	2a082 <_lv_area_intersect+0x50>

0002a088 <_lv_area_join>:
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2a088:	f9b2 3000 	ldrsh.w	r3, [r2]
{
   2a08c:	b510      	push	{r4, lr}
    a_res_p->x1 = LV_MATH_MIN(a1_p->x1, a2_p->x1);
   2a08e:	f9b1 4000 	ldrsh.w	r4, [r1]
   2a092:	42a3      	cmp	r3, r4
   2a094:	bfa8      	it	ge
   2a096:	4623      	movge	r3, r4
   2a098:	8003      	strh	r3, [r0, #0]
    a_res_p->y1 = LV_MATH_MIN(a1_p->y1, a2_p->y1);
   2a09a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   2a09e:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
   2a0a2:	42a3      	cmp	r3, r4
   2a0a4:	bfa8      	it	ge
   2a0a6:	4623      	movge	r3, r4
   2a0a8:	8043      	strh	r3, [r0, #2]
    a_res_p->x2 = LV_MATH_MAX(a1_p->x2, a2_p->x2);
   2a0aa:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   2a0ae:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
   2a0b2:	42a3      	cmp	r3, r4
   2a0b4:	bfb8      	it	lt
   2a0b6:	4623      	movlt	r3, r4
   2a0b8:	8083      	strh	r3, [r0, #4]
    a_res_p->y2 = LV_MATH_MAX(a1_p->y2, a2_p->y2);
   2a0ba:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
   2a0be:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
   2a0c2:	4293      	cmp	r3, r2
   2a0c4:	bfb8      	it	lt
   2a0c6:	4613      	movlt	r3, r2
   2a0c8:	80c3      	strh	r3, [r0, #6]
}
   2a0ca:	bd10      	pop	{r4, pc}

0002a0cc <_lv_area_is_point_on>:
{
   2a0cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   2a0d0:	f9b1 3000 	ldrsh.w	r3, [r1]
   2a0d4:	f9b0 5000 	ldrsh.w	r5, [r0]
   2a0d8:	42ab      	cmp	r3, r5
{
   2a0da:	460e      	mov	r6, r1
    if((p_p->x >= a_p->x1 && p_p->x <= a_p->x2) && ((p_p->y >= a_p->y1 && p_p->y <= a_p->y2))) {
   2a0dc:	db7d      	blt.n	2a1da <_lv_area_is_point_on+0x10e>
   2a0de:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
   2a0e2:	4543      	cmp	r3, r8
   2a0e4:	dc79      	bgt.n	2a1da <_lv_area_is_point_on+0x10e>
   2a0e6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2a0ea:	f9b0 7002 	ldrsh.w	r7, [r0, #2]
   2a0ee:	42bb      	cmp	r3, r7
   2a0f0:	db73      	blt.n	2a1da <_lv_area_is_point_on+0x10e>
   2a0f2:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
   2a0f6:	454b      	cmp	r3, r9
   2a0f8:	dc6f      	bgt.n	2a1da <_lv_area_is_point_on+0x10e>
    if(radius <= 0) {
   2a0fa:	2a00      	cmp	r2, #0
   2a0fc:	dc03      	bgt.n	2a106 <_lv_area_is_point_on+0x3a>
        return true;
   2a0fe:	2001      	movs	r0, #1
}
   2a100:	b003      	add	sp, #12
   2a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 * @param area_p pointer to an area
 * @return the width of the area (if x1 == x2 -> width = 1)
 */
static inline lv_coord_t lv_area_get_width(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a106:	f108 0301 	add.w	r3, r8, #1
   2a10a:	1b5b      	subs	r3, r3, r5
 * @param area_p pointer to an area
 * @return the height of the area (if y1 == y2 -> height = 1)
 */
static inline lv_coord_t lv_area_get_height(const lv_area_t * area_p)
{
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a10c:	f109 0001 	add.w	r0, r9, #1
    lv_coord_t w = lv_area_get_width(a_p) / 2;
   2a110:	f3c3 34c0 	ubfx	r4, r3, #15, #1
   2a114:	1bc0      	subs	r0, r0, r7
   2a116:	fa04 f383 	sxtah	r3, r4, r3
    lv_coord_t h = lv_area_get_height(a_p) / 2;
   2a11a:	f3c0 34c0 	ubfx	r4, r0, #15, #1
   2a11e:	fa04 f080 	sxtah	r0, r4, r0
    lv_coord_t max_radius = LV_MATH_MIN(w, h);
   2a122:	105c      	asrs	r4, r3, #1
   2a124:	1043      	asrs	r3, r0, #1
   2a126:	429c      	cmp	r4, r3
   2a128:	bfa8      	it	ge
   2a12a:	461c      	movge	r4, r3
   2a12c:	4294      	cmp	r4, r2
   2a12e:	bfa8      	it	ge
   2a130:	4614      	movge	r4, r2
    corner_area.x1 = a_p->x1;
   2a132:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.y2 = a_p->y1 + radius;
   2a136:	eb07 0a04 	add.w	sl, r7, r4
    corner_area.x2 = a_p->x1 + radius;
   2a13a:	4425      	add	r5, r4
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a13c:	2200      	movs	r2, #0
    corner_area.x2 = a_p->x1 + radius;
   2a13e:	b22d      	sxth	r5, r5
    corner_area.y2 = a_p->y1 + radius;
   2a140:	fa0f fa8a 	sxth.w	sl, sl
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a144:	4668      	mov	r0, sp
    corner_area.x2 = a_p->x1 + radius;
   2a146:	f8ad 5004 	strh.w	r5, [sp, #4]
    corner_area.y1 = a_p->y1;
   2a14a:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   2a14e:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a152:	f7ff ffbb 	bl	2a0cc <_lv_area_is_point_on>
   2a156:	4602      	mov	r2, r0
   2a158:	b130      	cbz	r0, 2a168 <_lv_area_is_point_on+0x9c>
        corner_area.x2 += radius;
   2a15a:	4425      	add	r5, r4
   2a15c:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y2 += radius;
   2a160:	4454      	add	r4, sl
   2a162:	f8ad 4006 	strh.w	r4, [sp, #6]
   2a166:	e014      	b.n	2a192 <_lv_area_is_point_on+0xc6>
    corner_area.y1 = a_p->y2 - radius;
   2a168:	eba9 0b04 	sub.w	fp, r9, r4
   2a16c:	fa0f fb8b 	sxth.w	fp, fp
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a170:	4631      	mov	r1, r6
   2a172:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y2 - radius;
   2a174:	f8ad b002 	strh.w	fp, [sp, #2]
    corner_area.y2 = a_p->y2;
   2a178:	f8ad 9006 	strh.w	r9, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a17c:	f7ff ffa6 	bl	2a0cc <_lv_area_is_point_on>
   2a180:	4602      	mov	r2, r0
   2a182:	b158      	cbz	r0, 2a19c <_lv_area_is_point_on+0xd0>
        corner_area.x2 += radius;
   2a184:	4425      	add	r5, r4
   2a186:	f8ad 5004 	strh.w	r5, [sp, #4]
        corner_area.y1 -= radius;
   2a18a:	ebab 0404 	sub.w	r4, fp, r4
   2a18e:	f8ad 4002 	strh.w	r4, [sp, #2]
        return lv_point_within_circle(&corner_area, p_p);
   2a192:	4631      	mov	r1, r6
   2a194:	4668      	mov	r0, sp
   2a196:	f7ff ff16 	bl	29fc6 <lv_point_within_circle>
   2a19a:	e7b1      	b.n	2a100 <_lv_area_is_point_on+0x34>
    corner_area.x1 = a_p->x2 - radius;
   2a19c:	eba8 0304 	sub.w	r3, r8, r4
   2a1a0:	b21d      	sxth	r5, r3
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1a2:	4631      	mov	r1, r6
   2a1a4:	4668      	mov	r0, sp
    corner_area.x1 = a_p->x2 - radius;
   2a1a6:	f8ad 5000 	strh.w	r5, [sp]
    corner_area.x2 = a_p->x2;
   2a1aa:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1ae:	f7ff ff8d 	bl	2a0cc <_lv_area_is_point_on>
   2a1b2:	4602      	mov	r2, r0
   2a1b4:	b118      	cbz	r0, 2a1be <_lv_area_is_point_on+0xf2>
        corner_area.x1 -= radius;
   2a1b6:	1b2b      	subs	r3, r5, r4
   2a1b8:	f8ad 3000 	strh.w	r3, [sp]
   2a1bc:	e7e5      	b.n	2a18a <_lv_area_is_point_on+0xbe>
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1be:	4631      	mov	r1, r6
   2a1c0:	4668      	mov	r0, sp
    corner_area.y1 = a_p->y1;
   2a1c2:	f8ad 7002 	strh.w	r7, [sp, #2]
    corner_area.y2 = a_p->y1 + radius;
   2a1c6:	f8ad a006 	strh.w	sl, [sp, #6]
    if(_lv_area_is_point_on(&corner_area, p_p, 0)) {
   2a1ca:	f7ff ff7f 	bl	2a0cc <_lv_area_is_point_on>
   2a1ce:	2800      	cmp	r0, #0
   2a1d0:	d095      	beq.n	2a0fe <_lv_area_is_point_on+0x32>
        corner_area.x1 -= radius;
   2a1d2:	1b2b      	subs	r3, r5, r4
   2a1d4:	f8ad 3000 	strh.w	r3, [sp]
   2a1d8:	e7c2      	b.n	2a160 <_lv_area_is_point_on+0x94>
        return false;
   2a1da:	2000      	movs	r0, #0
   2a1dc:	e790      	b.n	2a100 <_lv_area_is_point_on+0x34>

0002a1de <_lv_area_is_on>:
    if((a1_p->x1 <= a2_p->x2) && (a1_p->x2 >= a2_p->x1) && (a1_p->y1 <= a2_p->y2) && (a1_p->y2 >= a2_p->y1)) {
   2a1de:	f9b0 2000 	ldrsh.w	r2, [r0]
   2a1e2:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   2a1e6:	429a      	cmp	r2, r3
   2a1e8:	dc14      	bgt.n	2a214 <_lv_area_is_on+0x36>
   2a1ea:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   2a1ee:	f9b1 3000 	ldrsh.w	r3, [r1]
   2a1f2:	429a      	cmp	r2, r3
   2a1f4:	db0e      	blt.n	2a214 <_lv_area_is_on+0x36>
   2a1f6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   2a1fa:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
   2a1fe:	429a      	cmp	r2, r3
   2a200:	dc08      	bgt.n	2a214 <_lv_area_is_on+0x36>
   2a202:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
   2a206:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2a20a:	4298      	cmp	r0, r3
   2a20c:	bfb4      	ite	lt
   2a20e:	2000      	movlt	r0, #0
   2a210:	2001      	movge	r0, #1
   2a212:	4770      	bx	lr
        return false;
   2a214:	2000      	movs	r0, #0
}
   2a216:	4770      	bx	lr

0002a218 <_lv_area_is_in>:
{
   2a218:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   2a21c:	f9b1 3000 	ldrsh.w	r3, [r1]
   2a220:	f9b0 7000 	ldrsh.w	r7, [r0]
   2a224:	42bb      	cmp	r3, r7
{
   2a226:	4605      	mov	r5, r0
   2a228:	460c      	mov	r4, r1
   2a22a:	4616      	mov	r6, r2
    if(ain_p->x1 >= aholder_p->x1 && ain_p->y1 >= aholder_p->y1 && ain_p->x2 <= aholder_p->x2 &&
   2a22c:	dc23      	bgt.n	2a276 <_lv_area_is_in+0x5e>
   2a22e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
   2a232:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
   2a236:	429a      	cmp	r2, r3
   2a238:	db1d      	blt.n	2a276 <_lv_area_is_in+0x5e>
   2a23a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
   2a23e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   2a242:	429a      	cmp	r2, r3
   2a244:	dc17      	bgt.n	2a276 <_lv_area_is_in+0x5e>
   2a246:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   2a24a:	f9b1 0006 	ldrsh.w	r0, [r1, #6]
   2a24e:	4283      	cmp	r3, r0
   2a250:	bfcc      	ite	gt
   2a252:	2000      	movgt	r0, #0
   2a254:	2001      	movle	r0, #1
    if(radius == 0) return is_in;
   2a256:	b15e      	cbz	r6, 2a270 <_lv_area_is_in+0x58>
    p.y = ain_p->y1;
   2a258:	886b      	ldrh	r3, [r5, #2]
    p.x = ain_p->x1;
   2a25a:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a25e:	4632      	mov	r2, r6
   2a260:	a901      	add	r1, sp, #4
   2a262:	4620      	mov	r0, r4
    p.y = ain_p->y1;
   2a264:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a268:	f7ff ff30 	bl	2a0cc <_lv_area_is_point_on>
   2a26c:	b928      	cbnz	r0, 2a27a <_lv_area_is_in+0x62>
   2a26e:	2000      	movs	r0, #0
}
   2a270:	b002      	add	sp, #8
   2a272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool is_in = false;
   2a276:	2000      	movs	r0, #0
   2a278:	e7ed      	b.n	2a256 <_lv_area_is_in+0x3e>
    p.x = ain_p->x2;
   2a27a:	f9b5 8004 	ldrsh.w	r8, [r5, #4]
   2a27e:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a282:	4632      	mov	r2, r6
   2a284:	a901      	add	r1, sp, #4
   2a286:	4620      	mov	r0, r4
   2a288:	f7ff ff20 	bl	2a0cc <_lv_area_is_point_on>
   2a28c:	2800      	cmp	r0, #0
   2a28e:	d0ee      	beq.n	2a26e <_lv_area_is_in+0x56>
    p.y = ain_p->y2;
   2a290:	88eb      	ldrh	r3, [r5, #6]
    p.x = ain_p->x1;
   2a292:	f8ad 7004 	strh.w	r7, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a296:	4632      	mov	r2, r6
   2a298:	a901      	add	r1, sp, #4
   2a29a:	4620      	mov	r0, r4
    p.y = ain_p->y2;
   2a29c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2a0:	f7ff ff14 	bl	2a0cc <_lv_area_is_point_on>
   2a2a4:	2800      	cmp	r0, #0
   2a2a6:	d0e2      	beq.n	2a26e <_lv_area_is_in+0x56>
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2a8:	4632      	mov	r2, r6
   2a2aa:	a901      	add	r1, sp, #4
   2a2ac:	4620      	mov	r0, r4
    p.x = ain_p->x2;
   2a2ae:	f8ad 8004 	strh.w	r8, [sp, #4]
    if(_lv_area_is_point_on(aholder_p, &p, radius) == false) return false;
   2a2b2:	f7ff ff0b 	bl	2a0cc <_lv_area_is_point_on>
   2a2b6:	e7db      	b.n	2a270 <_lv_area_is_in+0x58>

0002a2b8 <_lv_area_align>:
{
   2a2b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a2ba:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
   2a2be:	f9b0 5000 	ldrsh.w	r5, [r0]
   2a2c2:	2a14      	cmp	r2, #20
   2a2c4:	d83f      	bhi.n	2a346 <_lv_area_align+0x8e>
   2a2c6:	e8df f012 	tbh	[pc, r2, lsl #1]
   2a2ca:	0015      	.short	0x0015
   2a2cc:	0045003b 	.word	0x0045003b
   2a2d0:	0061005a 	.word	0x0061005a
   2a2d4:	007c0069 	.word	0x007c0069
   2a2d8:	00850083 	.word	0x00850083
   2a2dc:	0093008c 	.word	0x0093008c
   2a2e0:	00ad00a6 	.word	0x00ad00a6
   2a2e4:	00c600b3 	.word	0x00c600b3
   2a2e8:	00d200cd 	.word	0x00d200cd
   2a2ec:	00dc00d7 	.word	0x00dc00d7
   2a2f0:	00e200df 	.word	0x00e200df
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a2f4:	888a      	ldrh	r2, [r1, #4]
   2a2f6:	880e      	ldrh	r6, [r1, #0]
   2a2f8:	3201      	adds	r2, #1
   2a2fa:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a2fc:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a300:	fa06 f682 	sxtah	r6, r6, r2
   2a304:	8882      	ldrh	r2, [r0, #4]
   2a306:	3201      	adds	r2, #1
   2a308:	1b52      	subs	r2, r2, r5
   2a30a:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   2a30e:	fa07 f282 	sxtah	r2, r7, r2
   2a312:	1052      	asrs	r2, r2, #1
   2a314:	eba2 0266 	sub.w	r2, r2, r6, asr #1
            res->x = lv_area_get_width(base);
   2a318:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a31a:	88ca      	ldrh	r2, [r1, #6]
   2a31c:	8849      	ldrh	r1, [r1, #2]
   2a31e:	3201      	adds	r2, #1
   2a320:	1a52      	subs	r2, r2, r1
            res->y = lv_area_get_height(base) / 2 - lv_area_get_height(to_align) / 2;
   2a322:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2a326:	fa01 f182 	sxtah	r1, r1, r2
   2a32a:	88c2      	ldrh	r2, [r0, #6]
   2a32c:	3201      	adds	r2, #1
   2a32e:	1b12      	subs	r2, r2, r4
   2a330:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2a334:	fa00 f282 	sxtah	r2, r0, r2
   2a338:	1052      	asrs	r2, r2, #1
   2a33a:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   2a33e:	e001      	b.n	2a344 <_lv_area_align+0x8c>
            res->x = 0;
   2a340:	2200      	movs	r2, #0
   2a342:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   2a344:	805a      	strh	r2, [r3, #2]
    res->x += base->x1;
   2a346:	881a      	ldrh	r2, [r3, #0]
   2a348:	4415      	add	r5, r2
    res->y += base->y1;
   2a34a:	885a      	ldrh	r2, [r3, #2]
    res->x += base->x1;
   2a34c:	801d      	strh	r5, [r3, #0]
    res->y += base->y1;
   2a34e:	4414      	add	r4, r2
   2a350:	805c      	strh	r4, [r3, #2]
}
   2a352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a354:	888a      	ldrh	r2, [r1, #4]
   2a356:	8809      	ldrh	r1, [r1, #0]
   2a358:	3201      	adds	r2, #1
   2a35a:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a35c:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2a360:	fa01 f182 	sxtah	r1, r1, r2
   2a364:	8882      	ldrh	r2, [r0, #4]
   2a366:	3201      	adds	r2, #1
   2a368:	1b52      	subs	r2, r2, r5
   2a36a:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2a36e:	fa00 f282 	sxtah	r2, r0, r2
   2a372:	1052      	asrs	r2, r2, #1
   2a374:	eba2 0261 	sub.w	r2, r2, r1, asr #1
            res->x = lv_area_get_width(base);
   2a378:	801a      	strh	r2, [r3, #0]
            res->y = 0;
   2a37a:	2200      	movs	r2, #0
   2a37c:	e7e2      	b.n	2a344 <_lv_area_align+0x8c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a37e:	880a      	ldrh	r2, [r1, #0]
   2a380:	8889      	ldrh	r1, [r1, #4]
   2a382:	1a52      	subs	r2, r2, r1
   2a384:	8881      	ldrh	r1, [r0, #4]
   2a386:	440a      	add	r2, r1
   2a388:	1b52      	subs	r2, r2, r5
   2a38a:	e7f5      	b.n	2a378 <_lv_area_align+0xc0>
            res->x = 0;
   2a38c:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base);
   2a38e:	801a      	strh	r2, [r3, #0]
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   2a390:	884a      	ldrh	r2, [r1, #2]
   2a392:	88c9      	ldrh	r1, [r1, #6]
   2a394:	1a52      	subs	r2, r2, r1
   2a396:	88c1      	ldrh	r1, [r0, #6]
   2a398:	440a      	add	r2, r1
   2a39a:	e047      	b.n	2a42c <_lv_area_align+0x174>
   2a39c:	888a      	ldrh	r2, [r1, #4]
   2a39e:	880e      	ldrh	r6, [r1, #0]
   2a3a0:	3201      	adds	r2, #1
   2a3a2:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a3a4:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a3a8:	fa06 f682 	sxtah	r6, r6, r2
   2a3ac:	8882      	ldrh	r2, [r0, #4]
   2a3ae:	3201      	adds	r2, #1
   2a3b0:	1b52      	subs	r2, r2, r5
   2a3b2:	f3c2 37c0 	ubfx	r7, r2, #15, #1
   2a3b6:	fa07 f282 	sxtah	r2, r7, r2
   2a3ba:	1052      	asrs	r2, r2, #1
   2a3bc:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   2a3c0:	e7e5      	b.n	2a38e <_lv_area_align+0xd6>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a3c2:	888e      	ldrh	r6, [r1, #4]
   2a3c4:	880a      	ldrh	r2, [r1, #0]
   2a3c6:	1b92      	subs	r2, r2, r6
   2a3c8:	8886      	ldrh	r6, [r0, #4]
   2a3ca:	4432      	add	r2, r6
   2a3cc:	1b52      	subs	r2, r2, r5
   2a3ce:	e7de      	b.n	2a38e <_lv_area_align+0xd6>
            res->x = 0;
   2a3d0:	2200      	movs	r2, #0
   2a3d2:	e7a1      	b.n	2a318 <_lv_area_align+0x60>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a3d4:	888e      	ldrh	r6, [r1, #4]
   2a3d6:	880a      	ldrh	r2, [r1, #0]
   2a3d8:	1b92      	subs	r2, r2, r6
   2a3da:	8886      	ldrh	r6, [r0, #4]
   2a3dc:	4432      	add	r2, r6
   2a3de:	1b52      	subs	r2, r2, r5
   2a3e0:	e79a      	b.n	2a318 <_lv_area_align+0x60>
            res->x = 0;
   2a3e2:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a3e4:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a3e6:	88ca      	ldrh	r2, [r1, #6]
   2a3e8:	1c50      	adds	r0, r2, #1
   2a3ea:	884a      	ldrh	r2, [r1, #2]
            res->y = -lv_area_get_height(to_align);
   2a3ec:	1a12      	subs	r2, r2, r0
   2a3ee:	e7a9      	b.n	2a344 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a3f0:	888a      	ldrh	r2, [r1, #4]
   2a3f2:	880e      	ldrh	r6, [r1, #0]
   2a3f4:	3201      	adds	r2, #1
   2a3f6:	1b92      	subs	r2, r2, r6
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a3f8:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a3fc:	fa06 f682 	sxtah	r6, r6, r2
   2a400:	8882      	ldrh	r2, [r0, #4]
   2a402:	3201      	adds	r2, #1
   2a404:	1b52      	subs	r2, r2, r5
   2a406:	f3c2 30c0 	ubfx	r0, r2, #15, #1
   2a40a:	fa00 f282 	sxtah	r2, r0, r2
   2a40e:	1052      	asrs	r2, r2, #1
   2a410:	eba2 0266 	sub.w	r2, r2, r6, asr #1
   2a414:	e7e6      	b.n	2a3e4 <_lv_area_align+0x12c>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a416:	880a      	ldrh	r2, [r1, #0]
   2a418:	888e      	ldrh	r6, [r1, #4]
   2a41a:	8880      	ldrh	r0, [r0, #4]
   2a41c:	1b92      	subs	r2, r2, r6
   2a41e:	4402      	add	r2, r0
   2a420:	1b52      	subs	r2, r2, r5
   2a422:	e7df      	b.n	2a3e4 <_lv_area_align+0x12c>
            res->x = 0;
   2a424:	2200      	movs	r2, #0
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a426:	801a      	strh	r2, [r3, #0]
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2a428:	88c2      	ldrh	r2, [r0, #6]
   2a42a:	3201      	adds	r2, #1
            res->y = lv_area_get_height(base) - lv_area_get_height(to_align);
   2a42c:	1b12      	subs	r2, r2, r4
   2a42e:	e789      	b.n	2a344 <_lv_area_align+0x8c>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2a430:	888a      	ldrh	r2, [r1, #4]
   2a432:	8809      	ldrh	r1, [r1, #0]
   2a434:	3201      	adds	r2, #1
   2a436:	1a52      	subs	r2, r2, r1
            res->x = lv_area_get_width(base) / 2 - lv_area_get_width(to_align) / 2;
   2a438:	f3c2 31c0 	ubfx	r1, r2, #15, #1
   2a43c:	fa01 f182 	sxtah	r1, r1, r2
   2a440:	8882      	ldrh	r2, [r0, #4]
   2a442:	3201      	adds	r2, #1
   2a444:	1b52      	subs	r2, r2, r5
   2a446:	f3c2 36c0 	ubfx	r6, r2, #15, #1
   2a44a:	fa06 f282 	sxtah	r2, r6, r2
   2a44e:	1052      	asrs	r2, r2, #1
   2a450:	eba2 0261 	sub.w	r2, r2, r1, asr #1
   2a454:	e7e7      	b.n	2a426 <_lv_area_align+0x16e>
            res->x = lv_area_get_width(base) - lv_area_get_width(to_align);
   2a456:	880a      	ldrh	r2, [r1, #0]
   2a458:	8889      	ldrh	r1, [r1, #4]
   2a45a:	1a52      	subs	r2, r2, r1
   2a45c:	8881      	ldrh	r1, [r0, #4]
   2a45e:	440a      	add	r2, r1
   2a460:	1b52      	subs	r2, r2, r5
   2a462:	e7e0      	b.n	2a426 <_lv_area_align+0x16e>
   2a464:	888a      	ldrh	r2, [r1, #4]
   2a466:	1c50      	adds	r0, r2, #1
   2a468:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2a46a:	1a12      	subs	r2, r2, r0
   2a46c:	e784      	b.n	2a378 <_lv_area_align+0xc0>
   2a46e:	888a      	ldrh	r2, [r1, #4]
   2a470:	1c56      	adds	r6, r2, #1
   2a472:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2a474:	1b92      	subs	r2, r2, r6
   2a476:	e74f      	b.n	2a318 <_lv_area_align+0x60>
   2a478:	888a      	ldrh	r2, [r1, #4]
   2a47a:	1c56      	adds	r6, r2, #1
   2a47c:	880a      	ldrh	r2, [r1, #0]
            res->x = -lv_area_get_width(to_align);
   2a47e:	1b92      	subs	r2, r2, r6
   2a480:	e785      	b.n	2a38e <_lv_area_align+0xd6>
   2a482:	8882      	ldrh	r2, [r0, #4]
   2a484:	3201      	adds	r2, #1
   2a486:	e77f      	b.n	2a388 <_lv_area_align+0xd0>
   2a488:	8882      	ldrh	r2, [r0, #4]
   2a48a:	3201      	adds	r2, #1
   2a48c:	e7a7      	b.n	2a3de <_lv_area_align+0x126>
   2a48e:	8882      	ldrh	r2, [r0, #4]
   2a490:	3201      	adds	r2, #1
   2a492:	e79b      	b.n	2a3cc <_lv_area_align+0x114>

0002a494 <lv_color_fill>:

LV_ATTRIBUTE_FAST_MEM void lv_color_fill(lv_color_t * buf, lv_color_t color, uint32_t px_num)
{
#if LV_COLOR_DEPTH == 16
    uintptr_t buf_int = (uintptr_t) buf;
    if(buf_int & 0x3) {
   2a494:	0783      	lsls	r3, r0, #30
{
   2a496:	b510      	push	{r4, lr}
   2a498:	b28c      	uxth	r4, r1
        *buf = color;
   2a49a:	bf1c      	itt	ne
   2a49c:	f820 1b02 	strhne.w	r1, [r0], #2
        buf++;
        px_num--;
   2a4a0:	f102 32ff 	addne.w	r2, r2, #4294967295	; 0xffffffff
    }

    uint32_t c32 = color.full + (color.full << 16);
   2a4a4:	eb04 4304 	add.w	r3, r4, r4, lsl #16
    uint32_t * buf32 = (uint32_t *)buf;

    while(px_num > 16) {
   2a4a8:	2a10      	cmp	r2, #16
   2a4aa:	4601      	mov	r1, r0
   2a4ac:	f100 0020 	add.w	r0, r0, #32
   2a4b0:	d804      	bhi.n	2a4bc <lv_color_fill+0x28>
   2a4b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
        px_num -= 16;
    }

    buf = (lv_color_t *)buf32;

    while(px_num) {
   2a4b6:	4291      	cmp	r1, r2
   2a4b8:	d10a      	bne.n	2a4d0 <lv_color_fill+0x3c>
        *buf = color;
        buf++;
        px_num --;
    }
#endif
}
   2a4ba:	bd10      	pop	{r4, pc}
        *buf32 = c32;
   2a4bc:	e940 3308 	strd	r3, r3, [r0, #-32]
        *buf32 = c32;
   2a4c0:	e940 3306 	strd	r3, r3, [r0, #-24]
        *buf32 = c32;
   2a4c4:	e940 3304 	strd	r3, r3, [r0, #-16]
        *buf32 = c32;
   2a4c8:	e940 3302 	strd	r3, r3, [r0, #-8]
        px_num -= 16;
   2a4cc:	3a10      	subs	r2, #16
   2a4ce:	e7eb      	b.n	2a4a8 <lv_color_fill+0x14>
        *buf = color;
   2a4d0:	f821 4b02 	strh.w	r4, [r1], #2
        px_num --;
   2a4d4:	e7ef      	b.n	2a4b6 <lv_color_fill+0x22>

0002a4d6 <node_set_prev.isra.0>:
 * @param act pointer to a node which prev. node pointer should be set
 * @param prev pointer to a node which should be the previous node before 'act'
 */
static void node_set_prev(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * prev)
{
    if(act == NULL) return; /*Can't set the prev node of `NULL`*/
   2a4d6:	b109      	cbz	r1, 2a4dc <node_set_prev.isra.0+0x6>
    act8 += LL_PREV_P_OFFSET(ll_p);

    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** prev_node_p = (lv_ll_node_t **) &prev;

    *act_node_p = *prev_node_p;
   2a4d8:	6803      	ldr	r3, [r0, #0]
   2a4da:	50ca      	str	r2, [r1, r3]
}
   2a4dc:	4770      	bx	lr

0002a4de <node_set_next.isra.0>:
 * @param act pointer to a node which next node pointer should be set
 * @param next pointer to a node which should be the next node before 'act'
 */
static void node_set_next(lv_ll_t * ll_p, lv_ll_node_t * act, lv_ll_node_t * next)
{
    if(act == NULL) return; /*Can't set the next node of `NULL`*/
   2a4de:	b111      	cbz	r1, 2a4e6 <node_set_next.isra.0+0x8>

    act8 += LL_NEXT_P_OFFSET(ll_p);
    lv_ll_node_t ** act_node_p = (lv_ll_node_t **) act8;
    lv_ll_node_t ** next_node_p = (lv_ll_node_t **) &next;

    *act_node_p = *next_node_p;
   2a4e0:	6803      	ldr	r3, [r0, #0]
   2a4e2:	4419      	add	r1, r3
   2a4e4:	604a      	str	r2, [r1, #4]
}
   2a4e6:	4770      	bx	lr

0002a4e8 <_lv_ll_init>:
    node_size = (node_size + 3) & (~0x3);
   2a4e8:	3103      	adds	r1, #3
    ll_p->head = NULL;
   2a4ea:	2300      	movs	r3, #0
    node_size = (node_size + 3) & (~0x3);
   2a4ec:	f021 0103 	bic.w	r1, r1, #3
    ll_p->tail = NULL;
   2a4f0:	e9c0 3301 	strd	r3, r3, [r0, #4]
    ll_p->n_size = node_size;
   2a4f4:	6001      	str	r1, [r0, #0]
}
   2a4f6:	4770      	bx	lr

0002a4f8 <_lv_ll_ins_head>:
{
   2a4f8:	b538      	push	{r3, r4, r5, lr}
   2a4fa:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2a4fc:	6800      	ldr	r0, [r0, #0]
   2a4fe:	3008      	adds	r0, #8
   2a500:	f7f3 f826 	bl	1d550 <lv_mem_alloc>
    if(n_new != NULL) {
   2a504:	4605      	mov	r5, r0
   2a506:	b180      	cbz	r0, 2a52a <_lv_ll_ins_head+0x32>
        node_set_prev(ll_p, n_new, NULL);       /*No prev. before the new head*/
   2a508:	4601      	mov	r1, r0
   2a50a:	2200      	movs	r2, #0
   2a50c:	4620      	mov	r0, r4
   2a50e:	f7ff ffe2 	bl	2a4d6 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, ll_p->head); /*After new comes the old head*/
   2a512:	6862      	ldr	r2, [r4, #4]
   2a514:	f7ff ffe3 	bl	2a4de <node_set_next.isra.0>
        if(ll_p->head != NULL) { /*If there is old head then before it goes the new*/
   2a518:	6861      	ldr	r1, [r4, #4]
   2a51a:	b111      	cbz	r1, 2a522 <_lv_ll_ins_head+0x2a>
            node_set_prev(ll_p, ll_p->head, n_new);
   2a51c:	462a      	mov	r2, r5
   2a51e:	f7ff ffda 	bl	2a4d6 <node_set_prev.isra.0>
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   2a522:	68a3      	ldr	r3, [r4, #8]
        ll_p->head = n_new;      /*Set the new head in the dsc.*/
   2a524:	6065      	str	r5, [r4, #4]
        if(ll_p->tail == NULL) { /*If there is no tail (1. node) set the tail too*/
   2a526:	b903      	cbnz	r3, 2a52a <_lv_ll_ins_head+0x32>
            ll_p->tail = n_new;
   2a528:	60a5      	str	r5, [r4, #8]
}
   2a52a:	4628      	mov	r0, r5
   2a52c:	bd38      	pop	{r3, r4, r5, pc}

0002a52e <_lv_ll_ins_tail>:
{
   2a52e:	b538      	push	{r3, r4, r5, lr}
   2a530:	4604      	mov	r4, r0
    n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2a532:	6800      	ldr	r0, [r0, #0]
   2a534:	3008      	adds	r0, #8
   2a536:	f7f3 f80b 	bl	1d550 <lv_mem_alloc>
    if(n_new != NULL) {
   2a53a:	4605      	mov	r5, r0
   2a53c:	b188      	cbz	r0, 2a562 <_lv_ll_ins_tail+0x34>
        node_set_next(ll_p, n_new, NULL);       /*No next after the new tail*/
   2a53e:	4601      	mov	r1, r0
   2a540:	2200      	movs	r2, #0
   2a542:	4620      	mov	r0, r4
   2a544:	f7ff ffcb 	bl	2a4de <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, ll_p->tail); /*The prev. before new is the old tail*/
   2a548:	4629      	mov	r1, r5
   2a54a:	68a2      	ldr	r2, [r4, #8]
   2a54c:	f7ff ffc3 	bl	2a4d6 <node_set_prev.isra.0>
        if(ll_p->tail != NULL) {                /*If there is old tail then the new comes after it*/
   2a550:	68a1      	ldr	r1, [r4, #8]
   2a552:	b111      	cbz	r1, 2a55a <_lv_ll_ins_tail+0x2c>
            node_set_next(ll_p, ll_p->tail, n_new);
   2a554:	462a      	mov	r2, r5
   2a556:	f7ff ffc2 	bl	2a4de <node_set_next.isra.0>
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   2a55a:	6863      	ldr	r3, [r4, #4]
        ll_p->tail = n_new;      /*Set the new tail in the dsc.*/
   2a55c:	60a5      	str	r5, [r4, #8]
        if(ll_p->head == NULL) { /*If there is no head (1. node) set the head too*/
   2a55e:	b903      	cbnz	r3, 2a562 <_lv_ll_ins_tail+0x34>
            ll_p->head = n_new;
   2a560:	6065      	str	r5, [r4, #4]
}
   2a562:	4628      	mov	r0, r5
   2a564:	bd38      	pop	{r3, r4, r5, pc}

0002a566 <_lv_ll_get_head>:
    if(ll_p != NULL) {
   2a566:	b100      	cbz	r0, 2a56a <_lv_ll_get_head+0x4>
        head = ll_p->head;
   2a568:	6840      	ldr	r0, [r0, #4]
}
   2a56a:	4770      	bx	lr

0002a56c <_lv_ll_get_tail>:
    if(ll_p != NULL) {
   2a56c:	b100      	cbz	r0, 2a570 <_lv_ll_get_tail+0x4>
        tail = ll_p->tail;
   2a56e:	6880      	ldr	r0, [r0, #8]
}
   2a570:	4770      	bx	lr

0002a572 <_lv_ll_get_next>:
    if(ll_p == NULL) return NULL;
   2a572:	b110      	cbz	r0, 2a57a <_lv_ll_get_next+0x8>
    return *((lv_ll_node_t **)n_act_d);
   2a574:	6803      	ldr	r3, [r0, #0]
   2a576:	4419      	add	r1, r3
   2a578:	6848      	ldr	r0, [r1, #4]
}
   2a57a:	4770      	bx	lr

0002a57c <_lv_ll_get_prev>:
    if(ll_p == NULL) return NULL;
   2a57c:	b108      	cbz	r0, 2a582 <_lv_ll_get_prev+0x6>
    return *((lv_ll_node_t **)n_act_d);
   2a57e:	6803      	ldr	r3, [r0, #0]
   2a580:	58c8      	ldr	r0, [r1, r3]
}
   2a582:	4770      	bx	lr

0002a584 <_lv_ll_ins_prev>:
{
   2a584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a586:	460e      	mov	r6, r1
    if(NULL == ll_p || NULL == n_act) return NULL;
   2a588:	4605      	mov	r5, r0
   2a58a:	b348      	cbz	r0, 2a5e0 <_lv_ll_ins_prev+0x5c>
   2a58c:	b351      	cbz	r1, 2a5e4 <_lv_ll_ins_prev+0x60>
    if(_lv_ll_get_head(ll_p) == n_act) {
   2a58e:	6843      	ldr	r3, [r0, #4]
   2a590:	4299      	cmp	r1, r3
   2a592:	d107      	bne.n	2a5a4 <_lv_ll_ins_prev+0x20>
        n_new = _lv_ll_ins_head(ll_p);
   2a594:	f7ff ffb0 	bl	2a4f8 <_lv_ll_ins_head>
        if(n_new == NULL) return NULL;
   2a598:	2800      	cmp	r0, #0
   2a59a:	bf38      	it	cc
   2a59c:	2000      	movcc	r0, #0
   2a59e:	4604      	mov	r4, r0
}
   2a5a0:	4620      	mov	r0, r4
   2a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        n_new = lv_mem_alloc(ll_p->n_size + LL_NODE_META_SIZE);
   2a5a4:	6800      	ldr	r0, [r0, #0]
   2a5a6:	3008      	adds	r0, #8
   2a5a8:	f7f2 ffd2 	bl	1d550 <lv_mem_alloc>
        if(n_new == NULL) return NULL;
   2a5ac:	4604      	mov	r4, r0
   2a5ae:	2800      	cmp	r0, #0
   2a5b0:	d0f6      	beq.n	2a5a0 <_lv_ll_ins_prev+0x1c>
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   2a5b2:	4631      	mov	r1, r6
   2a5b4:	4628      	mov	r0, r5
   2a5b6:	f7ff ffe1 	bl	2a57c <_lv_ll_get_prev>
        node_set_next(ll_p, n_prev, n_new);
   2a5ba:	4622      	mov	r2, r4
        n_prev = _lv_ll_get_prev(ll_p, n_act);
   2a5bc:	4607      	mov	r7, r0
        node_set_next(ll_p, n_prev, n_new);
   2a5be:	4601      	mov	r1, r0
   2a5c0:	4628      	mov	r0, r5
   2a5c2:	f7ff ff8c 	bl	2a4de <node_set_next.isra.0>
        node_set_prev(ll_p, n_new, n_prev);
   2a5c6:	463a      	mov	r2, r7
   2a5c8:	4621      	mov	r1, r4
   2a5ca:	f7ff ff84 	bl	2a4d6 <node_set_prev.isra.0>
        node_set_prev(ll_p, n_act, n_new);
   2a5ce:	4622      	mov	r2, r4
   2a5d0:	4631      	mov	r1, r6
   2a5d2:	f7ff ff80 	bl	2a4d6 <node_set_prev.isra.0>
        node_set_next(ll_p, n_new, n_act);
   2a5d6:	4632      	mov	r2, r6
   2a5d8:	4621      	mov	r1, r4
   2a5da:	f7ff ff80 	bl	2a4de <node_set_next.isra.0>
   2a5de:	e7df      	b.n	2a5a0 <_lv_ll_ins_prev+0x1c>
    if(NULL == ll_p || NULL == n_act) return NULL;
   2a5e0:	4604      	mov	r4, r0
   2a5e2:	e7dd      	b.n	2a5a0 <_lv_ll_ins_prev+0x1c>
   2a5e4:	460c      	mov	r4, r1
   2a5e6:	e7db      	b.n	2a5a0 <_lv_ll_ins_prev+0x1c>

0002a5e8 <_lv_ll_remove>:
{
   2a5e8:	b570      	push	{r4, r5, r6, lr}
   2a5ea:	460d      	mov	r5, r1
    if(ll_p != NULL) {
   2a5ec:	4604      	mov	r4, r0
   2a5ee:	b308      	cbz	r0, 2a634 <_lv_ll_remove+0x4c>
    if(_lv_ll_get_head(ll_p) == node_p) {
   2a5f0:	6843      	ldr	r3, [r0, #4]
   2a5f2:	4299      	cmp	r1, r3
   2a5f4:	d10e      	bne.n	2a614 <_lv_ll_remove+0x2c>
        ll_p->head = _lv_ll_get_next(ll_p, node_p);
   2a5f6:	4629      	mov	r1, r5
   2a5f8:	4620      	mov	r0, r4
   2a5fa:	f7ff ffba 	bl	2a572 <_lv_ll_get_next>
   2a5fe:	4601      	mov	r1, r0
   2a600:	6060      	str	r0, [r4, #4]
        if(ll_p->head == NULL) {
   2a602:	b908      	cbnz	r0, 2a608 <_lv_ll_remove+0x20>
            ll_p->tail = NULL;
   2a604:	60a0      	str	r0, [r4, #8]
}
   2a606:	bd70      	pop	{r4, r5, r6, pc}
            node_set_prev(ll_p, ll_p->head, NULL);
   2a608:	2200      	movs	r2, #0
        node_set_prev(ll_p, n_next, n_prev);
   2a60a:	4620      	mov	r0, r4
}
   2a60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        node_set_prev(ll_p, n_next, n_prev);
   2a610:	f7ff bf61 	b.w	2a4d6 <node_set_prev.isra.0>
    else if(_lv_ll_get_tail(ll_p) == node_p) {
   2a614:	6883      	ldr	r3, [r0, #8]
   2a616:	4299      	cmp	r1, r3
   2a618:	d10e      	bne.n	2a638 <_lv_ll_remove+0x50>
   2a61a:	f7ff ffaf 	bl	2a57c <_lv_ll_get_prev>
   2a61e:	4601      	mov	r1, r0
        ll_p->tail = _lv_ll_get_prev(ll_p, node_p);
   2a620:	60a0      	str	r0, [r4, #8]
        if(ll_p->tail == NULL) {
   2a622:	b908      	cbnz	r0, 2a628 <_lv_ll_remove+0x40>
            ll_p->head = NULL;
   2a624:	6060      	str	r0, [r4, #4]
   2a626:	e7ee      	b.n	2a606 <_lv_ll_remove+0x1e>
            node_set_next(ll_p, ll_p->tail, NULL);
   2a628:	4620      	mov	r0, r4
   2a62a:	2200      	movs	r2, #0
}
   2a62c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            node_set_next(ll_p, ll_p->tail, NULL);
   2a630:	f7ff bf55 	b.w	2a4de <node_set_next.isra.0>
    if(_lv_ll_get_head(ll_p) == node_p) {
   2a634:	2900      	cmp	r1, #0
   2a636:	d0de      	beq.n	2a5f6 <_lv_ll_remove+0xe>
        lv_ll_node_t * n_prev = _lv_ll_get_prev(ll_p, node_p);
   2a638:	4629      	mov	r1, r5
   2a63a:	4620      	mov	r0, r4
   2a63c:	f7ff ff9e 	bl	2a57c <_lv_ll_get_prev>
   2a640:	4606      	mov	r6, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   2a642:	4620      	mov	r0, r4
   2a644:	f7ff ff95 	bl	2a572 <_lv_ll_get_next>
        node_set_next(ll_p, n_prev, n_next);
   2a648:	4631      	mov	r1, r6
   2a64a:	4602      	mov	r2, r0
        lv_ll_node_t * n_next = _lv_ll_get_next(ll_p, node_p);
   2a64c:	4605      	mov	r5, r0
        node_set_next(ll_p, n_prev, n_next);
   2a64e:	4620      	mov	r0, r4
   2a650:	f7ff ff45 	bl	2a4de <node_set_next.isra.0>
        node_set_prev(ll_p, n_next, n_prev);
   2a654:	4632      	mov	r2, r6
   2a656:	4629      	mov	r1, r5
   2a658:	e7d7      	b.n	2a60a <_lv_ll_remove+0x22>

0002a65a <_lv_ll_move_before>:
    if(n_act == n_after) return; /*Can't move before itself*/
   2a65a:	4291      	cmp	r1, r2
{
   2a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a65e:	4604      	mov	r4, r0
   2a660:	460d      	mov	r5, r1
   2a662:	4617      	mov	r7, r2
    if(n_act == n_after) return; /*Can't move before itself*/
   2a664:	d01f      	beq.n	2a6a6 <_lv_ll_move_before+0x4c>
    if(n_after != NULL)
   2a666:	b1fa      	cbz	r2, 2a6a8 <_lv_ll_move_before+0x4e>
        n_before = _lv_ll_get_prev(ll_p, n_after);
   2a668:	4611      	mov	r1, r2
   2a66a:	f7ff ff87 	bl	2a57c <_lv_ll_get_prev>
   2a66e:	4606      	mov	r6, r0
    if(n_act == n_before) return; /*Already before `n_after`*/
   2a670:	42ae      	cmp	r6, r5
   2a672:	d018      	beq.n	2a6a6 <_lv_ll_move_before+0x4c>
    _lv_ll_remove(ll_p, n_act);
   2a674:	4629      	mov	r1, r5
   2a676:	4620      	mov	r0, r4
   2a678:	f7ff ffb6 	bl	2a5e8 <_lv_ll_remove>
    node_set_next(ll_p, n_before, n_act);
   2a67c:	4620      	mov	r0, r4
   2a67e:	462a      	mov	r2, r5
   2a680:	4631      	mov	r1, r6
   2a682:	f7ff ff2c 	bl	2a4de <node_set_next.isra.0>
    node_set_prev(ll_p, n_act, n_before);
   2a686:	4632      	mov	r2, r6
   2a688:	4629      	mov	r1, r5
   2a68a:	f7ff ff24 	bl	2a4d6 <node_set_prev.isra.0>
    node_set_prev(ll_p, n_after, n_act);
   2a68e:	462a      	mov	r2, r5
   2a690:	4639      	mov	r1, r7
   2a692:	f7ff ff20 	bl	2a4d6 <node_set_prev.isra.0>
    node_set_next(ll_p, n_act, n_after);
   2a696:	463a      	mov	r2, r7
   2a698:	4629      	mov	r1, r5
   2a69a:	f7ff ff20 	bl	2a4de <node_set_next.isra.0>
    if(n_after == NULL) ll_p->tail = n_act;
   2a69e:	b907      	cbnz	r7, 2a6a2 <_lv_ll_move_before+0x48>
   2a6a0:	60a5      	str	r5, [r4, #8]
    if(n_before == NULL) ll_p->head = n_act;
   2a6a2:	b906      	cbnz	r6, 2a6a6 <_lv_ll_move_before+0x4c>
   2a6a4:	6065      	str	r5, [r4, #4]
}
   2a6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(ll_p != NULL) {
   2a6a8:	b108      	cbz	r0, 2a6ae <_lv_ll_move_before+0x54>
        tail = ll_p->tail;
   2a6aa:	6886      	ldr	r6, [r0, #8]
   2a6ac:	e7e0      	b.n	2a670 <_lv_ll_move_before+0x16>
    void * tail = NULL;
   2a6ae:	4606      	mov	r6, r0
   2a6b0:	e7de      	b.n	2a670 <_lv_ll_move_before+0x16>

0002a6b2 <_lv_sqrt>:
 * If root < 16: mask = 0x80
 * If root < 256: mask = 0x800
 * Else: mask = 0x8000
 */
LV_ATTRIBUTE_FAST_MEM void _lv_sqrt(uint32_t x, lv_sqrt_res_t * q, uint32_t mask)
{
   2a6b2:	b530      	push	{r4, r5, lr}
    x = x << 8; /*To get 4 bit precision. (sqrt(256) = 16 = 4 bit)*/
   2a6b4:	0200      	lsls	r0, r0, #8

    uint32_t root = 0;
   2a6b6:	2300      	movs	r3, #0
    uint32_t trial;
    // http://ww1.microchip.com/...en/AppNotes/91040a.pdf
    do {
        trial = root + mask;
   2a6b8:	18d4      	adds	r4, r2, r3
        if((uint32_t)trial * trial <= x) root = trial;
   2a6ba:	fb04 f504 	mul.w	r5, r4, r4
   2a6be:	4285      	cmp	r5, r0
   2a6c0:	bf98      	it	ls
   2a6c2:	4623      	movls	r3, r4
        mask = mask >> 1;
    } while(mask);
   2a6c4:	0852      	lsrs	r2, r2, #1
   2a6c6:	d1f7      	bne.n	2a6b8 <_lv_sqrt+0x6>

    q->i = (uint32_t) root >> 4;
   2a6c8:	091a      	lsrs	r2, r3, #4
    q->f = (uint32_t)(root & 0xf) << 4;
   2a6ca:	011b      	lsls	r3, r3, #4
   2a6cc:	b2db      	uxtb	r3, r3
    q->i = (uint32_t) root >> 4;
   2a6ce:	800a      	strh	r2, [r1, #0]
    q->f = (uint32_t)(root & 0xf) << 4;
   2a6d0:	804b      	strh	r3, [r1, #2]
}
   2a6d2:	bd30      	pop	{r4, r5, pc}

0002a6d4 <_lv_mem_init>:
}
   2a6d4:	4770      	bx	lr

0002a6d6 <lv_task_create>:
{
   2a6d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a6da:	4680      	mov	r8, r0
   2a6dc:	460f      	mov	r7, r1
   2a6de:	4616      	mov	r6, r2
   2a6e0:	461d      	mov	r5, r3
    lv_task_t * new_task = lv_task_create_basic();
   2a6e2:	f7f3 f887 	bl	1d7f4 <lv_task_create_basic>
    if(new_task == NULL) return NULL;
   2a6e6:	4604      	mov	r4, r0
   2a6e8:	b130      	cbz	r0, 2a6f8 <lv_task_create+0x22>
    task->task_cb = task_cb;
   2a6ea:	f8c0 8008 	str.w	r8, [r0, #8]
    task->period = period;
   2a6ee:	6007      	str	r7, [r0, #0]
    lv_task_set_prio(new_task, prio);
   2a6f0:	4631      	mov	r1, r6
   2a6f2:	f7f3 f9cb 	bl	1da8c <lv_task_set_prio>
    new_task->user_data = user_data;
   2a6f6:	60e5      	str	r5, [r4, #12]
}
   2a6f8:	4620      	mov	r0, r4
   2a6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a6fe <lv_task_ready>:
{
   2a6fe:	b510      	push	{r4, lr}
   2a700:	4604      	mov	r4, r0
    task->last_run = lv_tick_get() - task->period - 1;
   2a702:	f7ff fc44 	bl	29f8e <lv_tick_get>
   2a706:	6823      	ldr	r3, [r4, #0]
   2a708:	43db      	mvns	r3, r3
   2a70a:	4403      	add	r3, r0
   2a70c:	6063      	str	r3, [r4, #4]
}
   2a70e:	bd10      	pop	{r4, pc}

0002a710 <lv_txt_utf8_size>:
    if((str[0] & 0x80) == 0)
   2a710:	f990 2000 	ldrsb.w	r2, [r0]
   2a714:	7803      	ldrb	r3, [r0, #0]
   2a716:	2a00      	cmp	r2, #0
   2a718:	da0e      	bge.n	2a738 <lv_txt_utf8_size+0x28>
    else if((str[0] & 0xE0) == 0xC0)
   2a71a:	f003 02e0 	and.w	r2, r3, #224	; 0xe0
   2a71e:	2ac0      	cmp	r2, #192	; 0xc0
   2a720:	d00c      	beq.n	2a73c <lv_txt_utf8_size+0x2c>
    else if((str[0] & 0xF0) == 0xE0)
   2a722:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   2a726:	2ae0      	cmp	r2, #224	; 0xe0
   2a728:	d00a      	beq.n	2a740 <lv_txt_utf8_size+0x30>
    else if((str[0] & 0xF8) == 0xF0)
   2a72a:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   2a72e:	2bf0      	cmp	r3, #240	; 0xf0
        return 4;
   2a730:	bf14      	ite	ne
   2a732:	2000      	movne	r0, #0
   2a734:	2004      	moveq	r0, #4
   2a736:	4770      	bx	lr
        return 1;
   2a738:	2001      	movs	r0, #1
   2a73a:	4770      	bx	lr
        return 2;
   2a73c:	2002      	movs	r0, #2
   2a73e:	4770      	bx	lr
        return 3;
   2a740:	2003      	movs	r0, #3
}
   2a742:	4770      	bx	lr

0002a744 <lv_txt_utf8_next>:
{
   2a744:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint32_t i_tmp = 0;
   2a746:	2300      	movs	r3, #0
{
   2a748:	4602      	mov	r2, r0
    uint32_t i_tmp = 0;
   2a74a:	9301      	str	r3, [sp, #4]
    if(i == NULL) i = &i_tmp;
   2a74c:	b901      	cbnz	r1, 2a750 <lv_txt_utf8_next+0xc>
   2a74e:	a901      	add	r1, sp, #4
    if((txt[*i] & 0x80) == 0) {
   2a750:	680b      	ldr	r3, [r1, #0]
   2a752:	56d5      	ldrsb	r5, [r2, r3]
   2a754:	5cd0      	ldrb	r0, [r2, r3]
   2a756:	2d00      	cmp	r5, #0
   2a758:	f103 0401 	add.w	r4, r3, #1
   2a75c:	db02      	blt.n	2a764 <lv_txt_utf8_next+0x20>
        (*i)++;
   2a75e:	600c      	str	r4, [r1, #0]
}
   2a760:	b002      	add	sp, #8
   2a762:	bd70      	pop	{r4, r5, r6, pc}
        if((txt[*i] & 0xE0) == 0xC0) {
   2a764:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
   2a768:	2dc0      	cmp	r5, #192	; 0xc0
   2a76a:	d110      	bne.n	2a78e <lv_txt_utf8_next+0x4a>
            (*i)++;
   2a76c:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a76e:	5d12      	ldrb	r2, [r2, r4]
   2a770:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
   2a774:	2c80      	cmp	r4, #128	; 0x80
   2a776:	d001      	beq.n	2a77c <lv_txt_utf8_next+0x38>
    uint32_t result = 0;
   2a778:	2000      	movs	r0, #0
   2a77a:	e7f1      	b.n	2a760 <lv_txt_utf8_next+0x1c>
            result = (uint32_t)(txt[*i] & 0x1F) << 6;
   2a77c:	0180      	lsls	r0, r0, #6
   2a77e:	f400 60f8 	and.w	r0, r0, #1984	; 0x7c0
            result += (txt[*i] & 0x3F);
   2a782:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   2a786:	4410      	add	r0, r2
            (*i)++;
   2a788:	3302      	adds	r3, #2
            (*i)++;
   2a78a:	600b      	str	r3, [r1, #0]
   2a78c:	e7e8      	b.n	2a760 <lv_txt_utf8_next+0x1c>
        else if((txt[*i] & 0xF0) == 0xE0) {
   2a78e:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
   2a792:	2de0      	cmp	r5, #224	; 0xe0
   2a794:	d117      	bne.n	2a7c6 <lv_txt_utf8_next+0x82>
            (*i)++;
   2a796:	600c      	str	r4, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a798:	5d14      	ldrb	r4, [r2, r4]
   2a79a:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   2a79e:	2d80      	cmp	r5, #128	; 0x80
   2a7a0:	d1ea      	bne.n	2a778 <lv_txt_utf8_next+0x34>
            (*i)++;
   2a7a2:	1c9d      	adds	r5, r3, #2
   2a7a4:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7a6:	5d52      	ldrb	r2, [r2, r5]
   2a7a8:	f002 05c0 	and.w	r5, r2, #192	; 0xc0
   2a7ac:	2d80      	cmp	r5, #128	; 0x80
   2a7ae:	d1e3      	bne.n	2a778 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x0F) << 12;
   2a7b0:	0300      	lsls	r0, r0, #12
   2a7b2:	b280      	uxth	r0, r0
            result += (txt[*i] & 0x3F);
   2a7b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   2a7b8:	01a4      	lsls	r4, r4, #6
   2a7ba:	4410      	add	r0, r2
   2a7bc:	f404 647c 	and.w	r4, r4, #4032	; 0xfc0
            result += (txt[*i] & 0x3F);
   2a7c0:	4420      	add	r0, r4
            (*i)++;
   2a7c2:	3303      	adds	r3, #3
   2a7c4:	e7e1      	b.n	2a78a <lv_txt_utf8_next+0x46>
        else if((txt[*i] & 0xF8) == 0xF0) {
   2a7c6:	f000 05f8 	and.w	r5, r0, #248	; 0xf8
   2a7ca:	2df0      	cmp	r5, #240	; 0xf0
            (*i)++;
   2a7cc:	600c      	str	r4, [r1, #0]
        else if((txt[*i] & 0xF8) == 0xF0) {
   2a7ce:	d1d3      	bne.n	2a778 <lv_txt_utf8_next+0x34>
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7d0:	5d14      	ldrb	r4, [r2, r4]
   2a7d2:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   2a7d6:	2d80      	cmp	r5, #128	; 0x80
   2a7d8:	d1ce      	bne.n	2a778 <lv_txt_utf8_next+0x34>
            (*i)++;
   2a7da:	1c9d      	adds	r5, r3, #2
   2a7dc:	600d      	str	r5, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7de:	5d55      	ldrb	r5, [r2, r5]
   2a7e0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   2a7e4:	2e80      	cmp	r6, #128	; 0x80
   2a7e6:	d1c7      	bne.n	2a778 <lv_txt_utf8_next+0x34>
            (*i)++;
   2a7e8:	1cde      	adds	r6, r3, #3
   2a7ea:	600e      	str	r6, [r1, #0]
            if((txt[*i] & 0xC0) != 0x80) return 0; /*Invalid UTF-8 code*/
   2a7ec:	5d92      	ldrb	r2, [r2, r6]
   2a7ee:	f002 06c0 	and.w	r6, r2, #192	; 0xc0
   2a7f2:	2e80      	cmp	r6, #128	; 0x80
   2a7f4:	d1c0      	bne.n	2a778 <lv_txt_utf8_next+0x34>
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   2a7f6:	0480      	lsls	r0, r0, #18
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   2a7f8:	0324      	lsls	r4, r4, #12
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   2a7fa:	01ad      	lsls	r5, r5, #6
            result = (uint32_t)(txt[*i] & 0x07) << 18;
   2a7fc:	f400 10e0 	and.w	r0, r0, #1835008	; 0x1c0000
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   2a800:	f404 347c 	and.w	r4, r4, #258048	; 0x3f000
            result += (uint32_t)(txt[*i] & 0x3F) << 6;
   2a804:	f405 657c 	and.w	r5, r5, #4032	; 0xfc0
            result += txt[*i] & 0x3F;
   2a808:	f002 023f 	and.w	r2, r2, #63	; 0x3f
            result += (uint32_t)(txt[*i] & 0x3F) << 12;
   2a80c:	4320      	orrs	r0, r4
            result += txt[*i] & 0x3F;
   2a80e:	4415      	add	r5, r2
   2a810:	4428      	add	r0, r5
            (*i)++;
   2a812:	3304      	adds	r3, #4
   2a814:	e7b9      	b.n	2a78a <lv_txt_utf8_next+0x46>

0002a816 <_lv_txt_is_cmd>:
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   2a816:	2923      	cmp	r1, #35	; 0x23
{
   2a818:	4603      	mov	r3, r0
    if(c == (uint32_t)LV_TXT_COLOR_CMD[0]) {
   2a81a:	d115      	bne.n	2a848 <_lv_txt_is_cmd+0x32>
   2a81c:	7802      	ldrb	r2, [r0, #0]
        if(*state == LV_TXT_CMD_STATE_WAIT) { /*Start char*/
   2a81e:	b952      	cbnz	r2, 2a836 <_lv_txt_is_cmd+0x20>
            *state = LV_TXT_CMD_STATE_PAR;
   2a820:	2001      	movs	r0, #1
            *state = LV_TXT_CMD_STATE_WAIT;
   2a822:	7018      	strb	r0, [r3, #0]
    if(*state == LV_TXT_CMD_STATE_PAR) {
   2a824:	781a      	ldrb	r2, [r3, #0]
   2a826:	2a01      	cmp	r2, #1
   2a828:	d104      	bne.n	2a834 <_lv_txt_is_cmd+0x1e>
        if(c == ' ') {
   2a82a:	2920      	cmp	r1, #32
            *state = LV_TXT_CMD_STATE_IN; /*After the parameter the text is in the command*/
   2a82c:	bf04      	itt	eq
   2a82e:	2102      	moveq	r1, #2
   2a830:	7019      	strbeq	r1, [r3, #0]
        ret = true;
   2a832:	4610      	mov	r0, r2
}
   2a834:	4770      	bx	lr
        else if(*state == LV_TXT_CMD_STATE_PAR) {
   2a836:	2a01      	cmp	r2, #1
   2a838:	f04f 0000 	mov.w	r0, #0
   2a83c:	d0f1      	beq.n	2a822 <_lv_txt_is_cmd+0xc>
        else if(*state == LV_TXT_CMD_STATE_IN) {
   2a83e:	2a02      	cmp	r2, #2
   2a840:	d1f0      	bne.n	2a824 <_lv_txt_is_cmd+0xe>
            *state = LV_TXT_CMD_STATE_WAIT;
   2a842:	7018      	strb	r0, [r3, #0]
            ret    = true;
   2a844:	2001      	movs	r0, #1
   2a846:	e7ed      	b.n	2a824 <_lv_txt_is_cmd+0xe>
    bool ret = false;
   2a848:	2000      	movs	r0, #0
   2a84a:	e7eb      	b.n	2a824 <_lv_txt_is_cmd+0xe>

0002a84c <_lv_utils_bsearch>:
 *
 * @return a pointer to a matching item, or NULL if none exists.
 */
void * _lv_utils_bsearch(const void * key, const void * base, uint32_t n, uint32_t size,
                         int32_t (*cmp)(const void * pRef, const void * pElement))
{
   2a84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2a850:	9d08      	ldr	r5, [sp, #32]
   2a852:	4680      	mov	r8, r0
   2a854:	460f      	mov	r7, r1
   2a856:	4614      	mov	r4, r2
   2a858:	4699      	mov	r9, r3
    const char * middle;
    int32_t c;

    for(middle = base; n != 0;) {
   2a85a:	b90c      	cbnz	r4, 2a860 <_lv_utils_bsearch+0x14>
        }
        else {
            return (char *)middle;
        }
    }
    return NULL;
   2a85c:	4626      	mov	r6, r4
   2a85e:	e012      	b.n	2a886 <_lv_utils_bsearch+0x3a>
        middle += (n / 2) * size;
   2a860:	ea4f 0a54 	mov.w	sl, r4, lsr #1
   2a864:	fb09 760a 	mla	r6, r9, sl, r7
        if((c = (*cmp)(key, middle)) > 0) {
   2a868:	4631      	mov	r1, r6
   2a86a:	4640      	mov	r0, r8
   2a86c:	47a8      	blx	r5
   2a86e:	2800      	cmp	r0, #0
   2a870:	dd08      	ble.n	2a884 <_lv_utils_bsearch+0x38>
            n    = (n / 2) - ((n & 1) == 0);
   2a872:	43e4      	mvns	r4, r4
   2a874:	f004 0401 	and.w	r4, r4, #1
   2a878:	ebaa 0a04 	sub.w	sl, sl, r4
            base = (middle += size);
   2a87c:	eb06 0709 	add.w	r7, r6, r9
{
   2a880:	4654      	mov	r4, sl
   2a882:	e7ea      	b.n	2a85a <_lv_utils_bsearch+0xe>
        else if(c < 0) {
   2a884:	d1fc      	bne.n	2a880 <_lv_utils_bsearch+0x34>
}
   2a886:	4630      	mov	r0, r6
   2a888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002a88c <lv_font_get_glyph_bitmap>:
 * @param letter an UNICODE character code
 * @return  pointer to the bitmap of the letter
 */
const uint8_t * lv_font_get_glyph_bitmap(const lv_font_t * font_p, uint32_t letter)
{
    return font_p->get_glyph_bitmap(font_p, letter);
   2a88c:	6843      	ldr	r3, [r0, #4]
   2a88e:	4718      	bx	r3

0002a890 <lv_font_get_glyph_dsc>:
 * @return true: descriptor is successfully loaded into `dsc_out`.
 *         false: the letter was not found, no data is loaded to `dsc_out`
 */
bool lv_font_get_glyph_dsc(const lv_font_t * font_p, lv_font_glyph_dsc_t * dsc_out, uint32_t letter,
                           uint32_t letter_next)
{
   2a890:	b410      	push	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   2a892:	6804      	ldr	r4, [r0, #0]
   2a894:	46a4      	mov	ip, r4
}
   2a896:	bc10      	pop	{r4}
    return font_p->get_glyph_dsc(font_p, dsc_out, letter, letter_next);
   2a898:	4760      	bx	ip

0002a89a <lv_font_get_glyph_width>:
 * @param letter an UNICODE letter
 * @param letter_next the next letter after `letter`. Used for kerning
 * @return the width of the glyph
 */
uint16_t lv_font_get_glyph_width(const lv_font_t * font, uint32_t letter, uint32_t letter_next)
{
   2a89a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2a89c:	4613      	mov	r3, r2
    lv_font_glyph_dsc_t g;
    bool ret;
    ret = lv_font_get_glyph_dsc(font, &g, letter, letter_next);
   2a89e:	460a      	mov	r2, r1
   2a8a0:	a901      	add	r1, sp, #4
   2a8a2:	f7ff fff5 	bl	2a890 <lv_font_get_glyph_dsc>
    if(ret) return g.adv_w;
   2a8a6:	b108      	cbz	r0, 2a8ac <lv_font_get_glyph_width+0x12>
   2a8a8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    else return 0;
}
   2a8ac:	b005      	add	sp, #20
   2a8ae:	f85d fb04 	ldr.w	pc, [sp], #4

0002a8b2 <kern_pair_8_compare>:
{
    const uint8_t * ref8_p = ref;
    const uint8_t * element8_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   2a8b2:	7803      	ldrb	r3, [r0, #0]
   2a8b4:	780a      	ldrb	r2, [r1, #0]
   2a8b6:	4293      	cmp	r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   2a8b8:	bf09      	itett	eq
   2a8ba:	784b      	ldrbeq	r3, [r1, #1]
    if(ref8_p[0] != element8_p[0]) return (int32_t)ref8_p[0] - element8_p[0];
   2a8bc:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref8_p[1] - element8_p[1];
   2a8be:	7840      	ldrbeq	r0, [r0, #1]
   2a8c0:	1ac0      	subeq	r0, r0, r3

}
   2a8c2:	4770      	bx	lr

0002a8c4 <kern_pair_16_compare>:
{
    const uint16_t * ref16_p = ref;
    const uint16_t * element16_p = element;

    /*If the MSB is different it will matter. If not return the diff. of the LSB*/
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   2a8c4:	8803      	ldrh	r3, [r0, #0]
   2a8c6:	880a      	ldrh	r2, [r1, #0]
   2a8c8:	4293      	cmp	r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   2a8ca:	bf09      	itett	eq
   2a8cc:	884b      	ldrheq	r3, [r1, #2]
    if(ref16_p[0] != element16_p[0]) return (int32_t)ref16_p[0] - element16_p[0];
   2a8ce:	1a98      	subne	r0, r3, r2
    else return (int32_t) ref16_p[1] - element16_p[1];
   2a8d0:	8840      	ldrheq	r0, [r0, #2]
   2a8d2:	1ac0      	subeq	r0, r0, r3
}
   2a8d4:	4770      	bx	lr

0002a8d6 <unicode_list_compare>:
 *  @retval > 0   Reference is less than element.
 *
 */
static int32_t unicode_list_compare(const void * ref, const void * element)
{
    return ((int32_t)(*(uint16_t *)ref)) - ((int32_t)(*(uint16_t *)element));
   2a8d6:	8800      	ldrh	r0, [r0, #0]
   2a8d8:	880b      	ldrh	r3, [r1, #0]
}
   2a8da:	1ac0      	subs	r0, r0, r3
   2a8dc:	4770      	bx	lr

0002a8de <lv_font_get_bitmap_fmt_txt>:
    if(unicode_letter == '\t') unicode_letter = ' ';
   2a8de:	2909      	cmp	r1, #9
{
   2a8e0:	b510      	push	{r4, lr}
    if(unicode_letter == '\t') unicode_letter = ' ';
   2a8e2:	d002      	beq.n	2a8ea <lv_font_get_bitmap_fmt_txt+0xc>
    if(letter == '\0') return 0;
   2a8e4:	b911      	cbnz	r1, 2a8ec <lv_font_get_bitmap_fmt_txt+0xe>
    if(!gid) return NULL;
   2a8e6:	2000      	movs	r0, #0
}
   2a8e8:	bd10      	pop	{r4, pc}
    if(unicode_letter == '\t') unicode_letter = ' ';
   2a8ea:	2120      	movs	r1, #32
   2a8ec:	f850 4f10 	ldr.w	r4, [r0, #16]!
   2a8f0:	f7f3 fb06 	bl	1df00 <get_glyph_dsc_id.isra.0.part.0>
    if(!gid) return NULL;
   2a8f4:	2800      	cmp	r0, #0
   2a8f6:	d0f6      	beq.n	2a8e6 <lv_font_get_bitmap_fmt_txt+0x8>
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2a8f8:	7d21      	ldrb	r1, [r4, #20]
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   2a8fa:	6863      	ldr	r3, [r4, #4]
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2a8fc:	0789      	lsls	r1, r1, #30
    const lv_font_fmt_txt_glyph_dsc_t * gdsc = &fdsc->glyph_dsc[gid];
   2a8fe:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
    if(fdsc->bitmap_format == LV_FONT_FMT_TXT_PLAIN) {
   2a902:	d1f0      	bne.n	2a8e6 <lv_font_get_bitmap_fmt_txt+0x8>
        if(gdsc) return &fdsc->glyph_bitmap[gdsc->bitmap_index];
   2a904:	2a00      	cmp	r2, #0
   2a906:	d0ee      	beq.n	2a8e6 <lv_font_get_bitmap_fmt_txt+0x8>
   2a908:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   2a90c:	6820      	ldr	r0, [r4, #0]
   2a90e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   2a912:	4418      	add	r0, r3
   2a914:	e7e8      	b.n	2a8e8 <lv_font_get_bitmap_fmt_txt+0xa>

0002a916 <style_init_reset>:
 **********************/

static void style_init_reset(lv_style_t * style)
{
    if(inited) lv_style_reset(style);
    else lv_style_init(style);
   2a916:	f7fc be0f 	b.w	27538 <lv_style_init>

0002a91a <lv_label_dot_tmp_free>:
 * Free the dot_tmp_ptr field if it was previously allocated.
 * Always clears the field
 * @param label pointer to label object.
 */
static void lv_label_dot_tmp_free(lv_obj_t * label)
{
   2a91a:	b510      	push	{r4, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a91c:	f7fb ff98 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   2a920:	7c43      	ldrb	r3, [r0, #17]
   2a922:	07db      	lsls	r3, r3, #31
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a924:	4604      	mov	r4, r0
    if(ext->dot_tmp_alloc && ext->dot.tmp_ptr) {
   2a926:	d503      	bpl.n	2a930 <lv_label_dot_tmp_free+0x16>
   2a928:	6840      	ldr	r0, [r0, #4]
   2a92a:	b108      	cbz	r0, 2a930 <lv_label_dot_tmp_free+0x16>
        lv_mem_free(ext->dot.tmp_ptr);
   2a92c:	f7f2 fe38 	bl	1d5a0 <lv_mem_free>
    }
    ext->dot_tmp_alloc = false;
   2a930:	7c63      	ldrb	r3, [r4, #17]
   2a932:	f36f 0300 	bfc	r3, #0, #1
   2a936:	7463      	strb	r3, [r4, #17]
    ext->dot.tmp_ptr   = NULL;
   2a938:	2300      	movs	r3, #0
   2a93a:	6063      	str	r3, [r4, #4]
}
   2a93c:	bd10      	pop	{r4, pc}

0002a93e <_lv_memcpy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a93e:	f000 bf0c 	b.w	2b75a <memcpy>

0002a942 <get_txt_coords>:

static void get_txt_coords(const lv_obj_t * label, lv_area_t * area)
{
   2a942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a946:	4605      	mov	r5, r0
   2a948:	460c      	mov	r4, r1
    lv_obj_get_coords(label, area);
   2a94a:	f7fb fdd5 	bl	264f8 <lv_obj_get_coords>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   2a94e:	2212      	movs	r2, #18
   2a950:	2100      	movs	r1, #0
   2a952:	4628      	mov	r0, r5
   2a954:	f7ef fe9c 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   2a958:	2213      	movs	r2, #19
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_LEFT, pad_left, lv_style_int_t, _int, scalar)
   2a95a:	4607      	mov	r7, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   2a95c:	2100      	movs	r1, #0
   2a95e:	4628      	mov	r0, r5
   2a960:	f7ef fe96 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   2a964:	2210      	movs	r2, #16
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_RIGHT, pad_right, lv_style_int_t, _int, scalar)
   2a966:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   2a968:	2100      	movs	r1, #0
   2a96a:	4628      	mov	r0, r5
   2a96c:	f7ef fe90 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   2a970:	2211      	movs	r2, #17
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_TOP, pad_top, lv_style_int_t, _int, scalar)
   2a972:	4606      	mov	r6, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(PAD_BOTTOM, pad_bottom, lv_style_int_t, _int, scalar)
   2a974:	2100      	movs	r1, #0
   2a976:	4628      	mov	r0, r5
   2a978:	f7ef fe8a 	bl	1a690 <_lv_obj_get_style_int>

    lv_coord_t left   = lv_obj_get_style_pad_left(label, LV_LABEL_PART_MAIN);
    lv_coord_t right  = lv_obj_get_style_pad_right(label, LV_LABEL_PART_MAIN);
    lv_coord_t top    = lv_obj_get_style_pad_top(label, LV_LABEL_PART_MAIN);
    lv_coord_t bottom = lv_obj_get_style_pad_bottom(label, LV_LABEL_PART_MAIN);
    area->x1 += left;
   2a97c:	8823      	ldrh	r3, [r4, #0]
    area->x2 -= right;
   2a97e:	88a2      	ldrh	r2, [r4, #4]
    area->x1 += left;
   2a980:	441f      	add	r7, r3
    area->y1 += top;
   2a982:	8863      	ldrh	r3, [r4, #2]
    area->x1 += left;
   2a984:	8027      	strh	r7, [r4, #0]
    area->y1 += top;
   2a986:	441e      	add	r6, r3
    area->y2 -= bottom;
   2a988:	88e3      	ldrh	r3, [r4, #6]
    area->y1 += top;
   2a98a:	8066      	strh	r6, [r4, #2]
    area->x2 -= right;
   2a98c:	eba2 0208 	sub.w	r2, r2, r8
    area->y2 -= bottom;
   2a990:	1a1b      	subs	r3, r3, r0
    area->x2 -= right;
   2a992:	80a2      	strh	r2, [r4, #4]
    area->y2 -= bottom;
   2a994:	80e3      	strh	r3, [r4, #6]
}
   2a996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002a99a <lv_label_set_align>:
{
   2a99a:	b538      	push	{r3, r4, r5, lr}
   2a99c:	460c      	mov	r4, r1
   2a99e:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a9a0:	f7fb ff56 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->align == align) return;
   2a9a4:	7c03      	ldrb	r3, [r0, #16]
   2a9a6:	f3c3 1201 	ubfx	r2, r3, #4, #2
   2a9aa:	42a2      	cmp	r2, r4
   2a9ac:	d007      	beq.n	2a9be <lv_label_set_align+0x24>
    ext->align = align;
   2a9ae:	f364 1305 	bfi	r3, r4, #4, #2
   2a9b2:	7403      	strb	r3, [r0, #16]
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   2a9b4:	4628      	mov	r0, r5
}
   2a9b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_obj_invalidate(label); /*Enough to invalidate because alignment is only drawing related
   2a9ba:	f7fb bc8a 	b.w	262d2 <lv_obj_invalidate>
}
   2a9be:	bd38      	pop	{r3, r4, r5, pc}

0002a9c0 <lv_label_get_text>:
{
   2a9c0:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a9c2:	f7fb ff45 	bl	26850 <lv_obj_get_ext_attr>
}
   2a9c6:	6800      	ldr	r0, [r0, #0]
   2a9c8:	bd08      	pop	{r3, pc}

0002a9ca <lv_label_get_long_mode>:
{
   2a9ca:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a9cc:	f7fb ff40 	bl	26850 <lv_obj_get_ext_attr>
    return ext->long_mode;
   2a9d0:	7c00      	ldrb	r0, [r0, #16]
}
   2a9d2:	f000 0007 	and.w	r0, r0, #7
   2a9d6:	bd08      	pop	{r3, pc}

0002a9d8 <lv_label_get_align>:
{
   2a9d8:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2a9da:	f7fb ff39 	bl	26850 <lv_obj_get_ext_attr>
    lv_label_align_t align = ext->align;
   2a9de:	7c00      	ldrb	r0, [r0, #16]
   2a9e0:	f3c0 1001 	ubfx	r0, r0, #4, #2
    if(align == LV_LABEL_ALIGN_AUTO) {
   2a9e4:	2803      	cmp	r0, #3
}
   2a9e6:	bf08      	it	eq
   2a9e8:	2000      	moveq	r0, #0
   2a9ea:	bd08      	pop	{r3, pc}

0002a9ec <lv_label_design>:
{
   2a9ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if(mode == LV_DESIGN_COVER_CHK)
   2a9f0:	2a02      	cmp	r2, #2
{
   2a9f2:	b0a9      	sub	sp, #164	; 0xa4
   2a9f4:	4607      	mov	r7, r0
   2a9f6:	4689      	mov	r9, r1
   2a9f8:	4616      	mov	r6, r2
    if(mode == LV_DESIGN_COVER_CHK)
   2a9fa:	f000 80f2 	beq.w	2abe2 <lv_label_design+0x1f6>
    else if(mode == LV_DESIGN_DRAW_MAIN) {
   2a9fe:	2a00      	cmp	r2, #0
   2aa00:	f040 80f8 	bne.w	2abf4 <lv_label_design+0x208>
        lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2aa04:	f7fb ff24 	bl	26850 <lv_obj_get_ext_attr>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2aa08:	2204      	movs	r2, #4
   2aa0a:	4631      	mov	r1, r6
   2aa0c:	4604      	mov	r4, r0
   2aa0e:	4638      	mov	r0, r7
   2aa10:	f7ef fe3e 	bl	1a690 <_lv_obj_get_style_int>
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   2aa14:	2205      	movs	r2, #5
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_WIDTH, transform_width, lv_style_int_t, _int, scalar)
   2aa16:	4680      	mov	r8, r0
_LV_OBJ_STYLE_SET_GET_DECLARE(TRANSFORM_HEIGHT, transform_height, lv_style_int_t, _int, scalar)
   2aa18:	4631      	mov	r1, r6
   2aa1a:	4638      	mov	r0, r7
   2aa1c:	f7ef fe38 	bl	1a690 <_lv_obj_get_style_int>
    _lv_memcpy_small(dest, src, sizeof(lv_area_t));
   2aa20:	2208      	movs	r2, #8
   2aa22:	4605      	mov	r5, r0
   2aa24:	f107 0110 	add.w	r1, r7, #16
   2aa28:	a805      	add	r0, sp, #20
   2aa2a:	f7ff ff88 	bl	2a93e <_lv_memcpy>
        bg_coords.x1 -= w;
   2aa2e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
        bg_coords.x2 += w;
   2aa32:	f8bd 0018 	ldrh.w	r0, [sp, #24]
        bg_coords.x1 -= w;
   2aa36:	eba3 0308 	sub.w	r3, r3, r8
   2aa3a:	f8ad 3014 	strh.w	r3, [sp, #20]
        bg_coords.x2 += w;
   2aa3e:	4480      	add	r8, r0
        bg_coords.y1 -= h;
   2aa40:	f8bd 3016 	ldrh.w	r3, [sp, #22]
        bg_coords.y2 += h;
   2aa44:	f8bd 001a 	ldrh.w	r0, [sp, #26]
        bg_coords.x2 += w;
   2aa48:	f8ad 8018 	strh.w	r8, [sp, #24]
        bg_coords.y1 -= h;
   2aa4c:	1b5b      	subs	r3, r3, r5
        bg_coords.y2 += h;
   2aa4e:	4405      	add	r5, r0
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   2aa50:	a813      	add	r0, sp, #76	; 0x4c
        bg_coords.y1 -= h;
   2aa52:	f8ad 3016 	strh.w	r3, [sp, #22]
        bg_coords.y2 += h;
   2aa56:	f8ad 501a 	strh.w	r5, [sp, #26]
        lv_draw_rect_dsc_init(&draw_rect_dsc);
   2aa5a:	f7f2 f84f 	bl	1cafc <lv_draw_rect_dsc_init>
        lv_obj_init_draw_rect_dsc(label, LV_LABEL_PART_MAIN, &draw_rect_dsc);
   2aa5e:	aa13      	add	r2, sp, #76	; 0x4c
   2aa60:	4631      	mov	r1, r6
   2aa62:	4638      	mov	r0, r7
   2aa64:	f7fb ff04 	bl	26870 <lv_obj_init_draw_rect_dsc>
        lv_draw_rect(&bg_coords, clip_area, &draw_rect_dsc);
   2aa68:	aa13      	add	r2, sp, #76	; 0x4c
   2aa6a:	4649      	mov	r1, r9
   2aa6c:	a805      	add	r0, sp, #20
   2aa6e:	f7fe fbfa 	bl	29266 <lv_draw_rect>
        get_txt_coords(label, &txt_coords);
   2aa72:	a907      	add	r1, sp, #28
   2aa74:	4638      	mov	r0, r7
   2aa76:	f7ff ff64 	bl	2a942 <get_txt_coords>
        bool is_common = _lv_area_intersect(&txt_clip, clip_area, &txt_coords);
   2aa7a:	aa07      	add	r2, sp, #28
   2aa7c:	4649      	mov	r1, r9
   2aa7e:	a809      	add	r0, sp, #36	; 0x24
   2aa80:	f7ff fad7 	bl	2a032 <_lv_area_intersect>
        if(!is_common) return LV_DESIGN_RES_OK;
   2aa84:	2800      	cmp	r0, #0
   2aa86:	f000 80ac 	beq.w	2abe2 <lv_label_design+0x1f6>
        lv_label_align_t align = lv_label_get_align(label);
   2aa8a:	4638      	mov	r0, r7
   2aa8c:	f7ff ffa4 	bl	2a9d8 <lv_label_get_align>
        if(ext->recolor != 0) flag |= LV_TXT_FLAG_RECOLOR;
   2aa90:	7c23      	ldrb	r3, [r4, #16]
   2aa92:	f3c3 1580 	ubfx	r5, r3, #6, #1
        if(ext->expand != 0) flag |= LV_TXT_FLAG_EXPAND;
   2aa96:	061a      	lsls	r2, r3, #24
   2aa98:	bf48      	it	mi
   2aa9a:	f045 0502 	orrmi.w	r5, r5, #2
        if(ext->long_mode == LV_LABEL_LONG_EXPAND) flag |= LV_TXT_FLAG_FIT;
   2aa9e:	075b      	lsls	r3, r3, #29
   2aaa0:	bf08      	it	eq
   2aaa2:	f045 0510 	orreq.w	r5, r5, #16
        if(align == LV_LABEL_ALIGN_CENTER) flag |= LV_TXT_FLAG_CENTER;
   2aaa6:	2801      	cmp	r0, #1
   2aaa8:	f040 809f 	bne.w	2abea <lv_label_design+0x1fe>
   2aaac:	f045 0504 	orr.w	r5, r5, #4
        lv_draw_label_dsc_init(&label_draw_dsc);
   2aab0:	a80b      	add	r0, sp, #44	; 0x2c
   2aab2:	f7f0 fe83 	bl	1b7bc <lv_draw_label_dsc_init>
        label_draw_dsc.sel_start = lv_label_get_text_sel_start(label);
   2aab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
        label_draw_dsc.sel_end = lv_label_get_text_sel_end(label);
   2aaba:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
        label_draw_dsc.ofs_x = ext->offset.x;
   2aabe:	89a3      	ldrh	r3, [r4, #12]
   2aac0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   2aac4:	aa0b      	add	r2, sp, #44	; 0x2c
        label_draw_dsc.ofs_y = ext->offset.y;
   2aac6:	89e3      	ldrh	r3, [r4, #14]
   2aac8:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   2aacc:	2100      	movs	r1, #0
   2aace:	4638      	mov	r0, r7
        label_draw_dsc.flag = flag;
   2aad0:	f88d 5049 	strb.w	r5, [sp, #73]	; 0x49
        lv_obj_init_draw_label_dsc(label, LV_LABEL_PART_MAIN, &label_draw_dsc);
   2aad4:	f7fc f84d 	bl	26b72 <lv_obj_init_draw_label_dsc>
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   2aad8:	7c23      	ldrb	r3, [r4, #16]
   2aada:	f003 0207 	and.w	r2, r3, #7
   2aade:	3a03      	subs	r2, #3
   2aae0:	2a01      	cmp	r2, #1
   2aae2:	d824      	bhi.n	2ab2e <lv_label_design+0x142>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   2aae4:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if((ext->long_mode == LV_LABEL_LONG_SROLL || ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) &&
   2aae8:	2b10      	cmp	r3, #16
   2aaea:	d001      	beq.n	2aaf0 <lv_label_design+0x104>
           (ext->align == LV_LABEL_ALIGN_CENTER || ext->align == LV_LABEL_ALIGN_RIGHT)) {
   2aaec:	2b20      	cmp	r3, #32
   2aaee:	d11e      	bne.n	2ab2e <lv_label_design+0x142>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   2aaf0:	f647 4318 	movw	r3, #31768	; 0x7c18
   2aaf4:	9301      	str	r3, [sp, #4]
   2aaf6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   2aafa:	9300      	str	r3, [sp, #0]
   2aafc:	9502      	str	r5, [sp, #8]
   2aafe:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   2ab02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ab04:	6821      	ldr	r1, [r4, #0]
   2ab06:	a804      	add	r0, sp, #16
   2ab08:	f7f3 f988 	bl	1de1c <_lv_txt_get_size>
    return (lv_coord_t)(area_p->x2 - area_p->x1 + 1);
   2ab0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2ab10:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   2ab14:	3301      	adds	r3, #1
   2ab16:	1a9b      	subs	r3, r3, r2
            if(size.x > lv_area_get_width(&txt_coords)) {
   2ab18:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
   2ab1c:	b21b      	sxth	r3, r3
   2ab1e:	429a      	cmp	r2, r3
                label_draw_dsc.flag &= ~LV_TXT_FLAG_CENTER;
   2ab20:	bfc2      	ittt	gt
   2ab22:	f89d 3049 	ldrbgt.w	r3, [sp, #73]	; 0x49
   2ab26:	f023 030c 	bicgt.w	r3, r3, #12
   2ab2a:	f88d 3049 	strbgt.w	r3, [sp, #73]	; 0x49
        lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2ab2e:	2700      	movs	r7, #0
   2ab30:	9700      	str	r7, [sp, #0]
   2ab32:	6823      	ldr	r3, [r4, #0]
   2ab34:	aa0b      	add	r2, sp, #44	; 0x2c
   2ab36:	a909      	add	r1, sp, #36	; 0x24
   2ab38:	a807      	add	r0, sp, #28
   2ab3a:	f7f0 fe55 	bl	1b7e8 <lv_draw_label>
        if(ext->long_mode == LV_LABEL_LONG_SROLL_CIRC) {
   2ab3e:	7c23      	ldrb	r3, [r4, #16]
   2ab40:	f003 0307 	and.w	r3, r3, #7
   2ab44:	2b04      	cmp	r3, #4
   2ab46:	d14c      	bne.n	2abe2 <lv_label_design+0x1f6>
            _lv_txt_get_size(&size, ext->text, label_draw_dsc.font, label_draw_dsc.letter_space, label_draw_dsc.line_space,
   2ab48:	f647 4318 	movw	r3, #31768	; 0x7c18
   2ab4c:	9301      	str	r3, [sp, #4]
   2ab4e:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
   2ab52:	9300      	str	r3, [sp, #0]
   2ab54:	9502      	str	r5, [sp, #8]
   2ab56:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
   2ab5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2ab5c:	6821      	ldr	r1, [r4, #0]
   2ab5e:	a804      	add	r0, sp, #16
   2ab60:	f7f3 f95c 	bl	1de1c <_lv_txt_get_size>
   2ab64:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ab68:	f8bd 101c 	ldrh.w	r1, [sp, #28]
            if(size.x > lv_area_get_width(&txt_coords)) {
   2ab6c:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
   2ab70:	3201      	adds	r2, #1
   2ab72:	1a52      	subs	r2, r2, r1
   2ab74:	b212      	sxth	r2, r2
   2ab76:	4293      	cmp	r3, r2
   2ab78:	dd16      	ble.n	2aba8 <lv_label_design+0x1bc>
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2ab7a:	89a5      	ldrh	r5, [r4, #12]
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   2ab7c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2ab7e:	2220      	movs	r2, #32
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2ab80:	442b      	add	r3, r5
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   2ab82:	4611      	mov	r1, r2
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2ab84:	b21d      	sxth	r5, r3
                                       lv_font_get_glyph_width(label_draw_dsc.font, ' ', ' ') * LV_LABEL_WAIT_CHAR_COUNT;
   2ab86:	f7ff fe88 	bl	2a89a <lv_font_get_glyph_width>
                label_draw_dsc.ofs_y = ext->offset.y;
   2ab8a:	89e3      	ldrh	r3, [r4, #14]
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2ab8c:	9700      	str	r7, [sp, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2ab8e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   2ab92:	4405      	add	r5, r0
                label_draw_dsc.ofs_y = ext->offset.y;
   2ab94:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2ab98:	aa0b      	add	r2, sp, #44	; 0x2c
   2ab9a:	6823      	ldr	r3, [r4, #0]
                label_draw_dsc.ofs_x = ext->offset.x + size.x +
   2ab9c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2aba0:	a909      	add	r1, sp, #36	; 0x24
   2aba2:	a807      	add	r0, sp, #28
   2aba4:	f7f0 fe20 	bl	1b7e8 <lv_draw_label>
    return (lv_coord_t)(area_p->y2 - area_p->y1 + 1);
   2aba8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   2abac:	f8bd 101e 	ldrh.w	r1, [sp, #30]
            if(size.y > lv_area_get_height(&txt_coords)) {
   2abb0:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
   2abb4:	3301      	adds	r3, #1
   2abb6:	1a5b      	subs	r3, r3, r1
   2abb8:	b21b      	sxth	r3, r3
   2abba:	429a      	cmp	r2, r3
   2abbc:	dd11      	ble.n	2abe2 <lv_label_design+0x1f6>
                label_draw_dsc.ofs_x = ext->offset.x;
   2abbe:	89a3      	ldrh	r3, [r4, #12]
   2abc0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   2abc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2abc6:	891b      	ldrh	r3, [r3, #8]
   2abc8:	441a      	add	r2, r3
   2abca:	89e3      	ldrh	r3, [r4, #14]
   2abcc:	441a      	add	r2, r3
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2abce:	2300      	movs	r3, #0
   2abd0:	9300      	str	r3, [sp, #0]
                label_draw_dsc.ofs_y = ext->offset.y + size.y + lv_font_get_line_height(label_draw_dsc.font);
   2abd2:	f8ad 2046 	strh.w	r2, [sp, #70]	; 0x46
                lv_draw_label(&txt_coords, &txt_clip, &label_draw_dsc, ext->text, hint);
   2abd6:	6823      	ldr	r3, [r4, #0]
   2abd8:	aa0b      	add	r2, sp, #44	; 0x2c
   2abda:	a909      	add	r1, sp, #36	; 0x24
   2abdc:	a807      	add	r0, sp, #28
   2abde:	f7f0 fe03 	bl	1b7e8 <lv_draw_label>
}
   2abe2:	4630      	mov	r0, r6
   2abe4:	b029      	add	sp, #164	; 0xa4
   2abe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(align == LV_LABEL_ALIGN_RIGHT) flag |= LV_TXT_FLAG_RIGHT;
   2abea:	2802      	cmp	r0, #2
   2abec:	bf08      	it	eq
   2abee:	f045 0508 	orreq.w	r5, r5, #8
   2abf2:	e75d      	b.n	2aab0 <lv_label_design+0xc4>
    return LV_DESIGN_RES_OK;
   2abf4:	2600      	movs	r6, #0
   2abf6:	e7f4      	b.n	2abe2 <lv_label_design+0x1f6>

0002abf8 <lv_label_get_recolor>:
{
   2abf8:	b508      	push	{r3, lr}
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2abfa:	f7fb fe29 	bl	26850 <lv_obj_get_ext_attr>
    return ext->recolor == 0 ? false : true;
   2abfe:	7c00      	ldrb	r0, [r0, #16]
}
   2ac00:	f3c0 1080 	ubfx	r0, r0, #6, #1
   2ac04:	bd08      	pop	{r3, pc}

0002ac06 <lv_label_set_text>:
{
   2ac06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ac0a:	4607      	mov	r7, r0
   2ac0c:	460d      	mov	r5, r1
    lv_obj_invalidate(label);
   2ac0e:	f7fb fb60 	bl	262d2 <lv_obj_invalidate>
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ac12:	4638      	mov	r0, r7
   2ac14:	f7fb fe1c 	bl	26850 <lv_obj_get_ext_attr>
   2ac18:	4604      	mov	r4, r0
    if(text == NULL) {
   2ac1a:	b925      	cbnz	r5, 2ac26 <lv_label_set_text+0x20>
        lv_label_refr_text(label);
   2ac1c:	4638      	mov	r0, r7
}
   2ac1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        lv_label_refr_text(label);
   2ac22:	f7f4 b8fd 	b.w	1ee20 <lv_label_refr_text>
    if(ext->text == text && ext->static_txt == 0) {
   2ac26:	6806      	ldr	r6, [r0, #0]
   2ac28:	42ae      	cmp	r6, r5
   2ac2a:	d10e      	bne.n	2ac4a <lv_label_set_text+0x44>
   2ac2c:	7c03      	ldrb	r3, [r0, #16]
   2ac2e:	071b      	lsls	r3, r3, #28
   2ac30:	d415      	bmi.n	2ac5e <lv_label_set_text+0x58>
        ext->text = lv_mem_realloc(ext->text, strlen(ext->text) + 1);
   2ac32:	4630      	mov	r0, r6
   2ac34:	f7d5 fc2a 	bl	48c <strlen>
   2ac38:	1c41      	adds	r1, r0, #1
   2ac3a:	4630      	mov	r0, r6
   2ac3c:	f7f2 fcce 	bl	1d5dc <lv_mem_realloc>
   2ac40:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   2ac42:	2800      	cmp	r0, #0
   2ac44:	d1ea      	bne.n	2ac1c <lv_label_set_text+0x16>
}
   2ac46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if(ext->text != NULL && ext->static_txt == 0) {
   2ac4a:	b146      	cbz	r6, 2ac5e <lv_label_set_text+0x58>
   2ac4c:	7c03      	ldrb	r3, [r0, #16]
   2ac4e:	f013 0808 	ands.w	r8, r3, #8
   2ac52:	d104      	bne.n	2ac5e <lv_label_set_text+0x58>
            lv_mem_free(ext->text);
   2ac54:	4630      	mov	r0, r6
   2ac56:	f7f2 fca3 	bl	1d5a0 <lv_mem_free>
            ext->text = NULL;
   2ac5a:	f8c4 8000 	str.w	r8, [r4]
        size_t len = strlen(text) + 1;
   2ac5e:	4628      	mov	r0, r5
   2ac60:	f7d5 fc14 	bl	48c <strlen>
        ext->text = lv_mem_alloc(len);
   2ac64:	3001      	adds	r0, #1
   2ac66:	f7f2 fc73 	bl	1d550 <lv_mem_alloc>
   2ac6a:	6020      	str	r0, [r4, #0]
        if(ext->text == NULL) return;
   2ac6c:	2800      	cmp	r0, #0
   2ac6e:	d0ea      	beq.n	2ac46 <lv_label_set_text+0x40>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   2ac70:	4629      	mov	r1, r5
   2ac72:	f000 fd9d 	bl	2b7b0 <strcpy>
        ext->static_txt = 0;
   2ac76:	7c23      	ldrb	r3, [r4, #16]
   2ac78:	f36f 03c3 	bfc	r3, #3, #1
   2ac7c:	7423      	strb	r3, [r4, #16]
   2ac7e:	e7cd      	b.n	2ac1c <lv_label_set_text+0x16>

0002ac80 <lv_label_set_text_static>:
{
   2ac80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ac82:	4607      	mov	r7, r0
   2ac84:	460d      	mov	r5, r1
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ac86:	f7fb fde3 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->static_txt == 0 && ext->text != NULL) {
   2ac8a:	7c03      	ldrb	r3, [r0, #16]
   2ac8c:	f013 0608 	ands.w	r6, r3, #8
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ac90:	4604      	mov	r4, r0
    if(ext->static_txt == 0 && ext->text != NULL) {
   2ac92:	d104      	bne.n	2ac9e <lv_label_set_text_static+0x1e>
   2ac94:	6800      	ldr	r0, [r0, #0]
   2ac96:	b110      	cbz	r0, 2ac9e <lv_label_set_text_static+0x1e>
        lv_mem_free(ext->text);
   2ac98:	f7f2 fc82 	bl	1d5a0 <lv_mem_free>
        ext->text = NULL;
   2ac9c:	6026      	str	r6, [r4, #0]
    if(text != NULL) {
   2ac9e:	b125      	cbz	r5, 2acaa <lv_label_set_text_static+0x2a>
        ext->static_txt = 1;
   2aca0:	7c23      	ldrb	r3, [r4, #16]
        ext->text       = (char *)text;
   2aca2:	6025      	str	r5, [r4, #0]
        ext->static_txt = 1;
   2aca4:	f043 0308 	orr.w	r3, r3, #8
   2aca8:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   2acaa:	4638      	mov	r0, r7
}
   2acac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    lv_label_refr_text(label);
   2acb0:	f7f4 b8b6 	b.w	1ee20 <lv_label_refr_text>

0002acb4 <lv_label_set_long_mode>:
{
   2acb4:	b570      	push	{r4, r5, r6, lr}
   2acb6:	460e      	mov	r6, r1
   2acb8:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2acba:	f7fb fdc9 	bl	26850 <lv_obj_get_ext_attr>
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   2acbe:	1ef2      	subs	r2, r6, #3
    ext->offset.x = 0;
   2acc0:	2300      	movs	r3, #0
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   2acc2:	2a02      	cmp	r2, #2
    ext->offset.x = 0;
   2acc4:	60c3      	str	r3, [r0, #12]
   2acc6:	7c03      	ldrb	r3, [r0, #16]
    if(long_mode == LV_LABEL_LONG_SROLL || long_mode == LV_LABEL_LONG_SROLL_CIRC || long_mode == LV_LABEL_LONG_CROP)
   2acc8:	bf8c      	ite	hi
   2acca:	2200      	movhi	r2, #0
   2accc:	2201      	movls	r2, #1
   2acce:	f362 13c7 	bfi	r3, r2, #7, #1
   2acd2:	7403      	strb	r3, [r0, #16]
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   2acd4:	f003 0307 	and.w	r3, r3, #7
   2acd8:	2b02      	cmp	r3, #2
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2acda:	4604      	mov	r4, r0
    if(ext->long_mode == LV_LABEL_LONG_DOT && ext->dot_end != LV_LABEL_DOT_END_INV) {
   2acdc:	d107      	bne.n	2acee <lv_label_set_long_mode+0x3a>
   2acde:	6882      	ldr	r2, [r0, #8]
   2ace0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ace4:	429a      	cmp	r2, r3
   2ace6:	d002      	beq.n	2acee <lv_label_set_long_mode+0x3a>
        lv_label_revert_dots(label);
   2ace8:	4628      	mov	r0, r5
   2acea:	f7f3 ff0b 	bl	1eb04 <lv_label_revert_dots>
    ext->long_mode = long_mode;
   2acee:	7c23      	ldrb	r3, [r4, #16]
   2acf0:	f366 0302 	bfi	r3, r6, #0, #3
   2acf4:	7423      	strb	r3, [r4, #16]
    lv_label_refr_text(label);
   2acf6:	4628      	mov	r0, r5
}
   2acf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    lv_label_refr_text(label);
   2acfc:	f7f4 b890 	b.w	1ee20 <lv_label_refr_text>

0002ad00 <lv_label_set_recolor>:
{
   2ad00:	b538      	push	{r3, r4, r5, lr}
   2ad02:	460c      	mov	r4, r1
   2ad04:	4605      	mov	r5, r0
    lv_label_ext_t * ext = lv_obj_get_ext_attr(label);
   2ad06:	f7fb fda3 	bl	26850 <lv_obj_get_ext_attr>
    if(ext->recolor == en) return;
   2ad0a:	7c03      	ldrb	r3, [r0, #16]
   2ad0c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   2ad10:	42a2      	cmp	r2, r4
   2ad12:	d007      	beq.n	2ad24 <lv_label_set_recolor+0x24>
    ext->recolor = en == false ? 0 : 1;
   2ad14:	f364 1386 	bfi	r3, r4, #6, #1
   2ad18:	7403      	strb	r3, [r0, #16]
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
   2ad1a:	4628      	mov	r0, r5
}
   2ad1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    lv_label_refr_text(label); /*Refresh the text because the potential color codes in text needs to
   2ad20:	f7f4 b87e 	b.w	1ee20 <lv_label_refr_text>
}
   2ad24:	bd38      	pop	{r3, r4, r5, pc}

0002ad26 <arch_system_halt>:
	__asm__ volatile(
   2ad26:	f04f 0220 	mov.w	r2, #32
   2ad2a:	f3ef 8311 	mrs	r3, BASEPRI
   2ad2e:	f382 8811 	msr	BASEPRI, r2
   2ad32:	f3bf 8f6f 	isb	sy
	for (;;) {
   2ad36:	e7fe      	b.n	2ad36 <arch_system_halt+0x10>

0002ad38 <k_heap_init>:
{
   2ad38:	b410      	push	{r4}
   2ad3a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2ad3e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2ad42:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2ad44:	f7f8 bbbc 	b.w	234c0 <sys_heap_init>

0002ad48 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2ad48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad4c:	b087      	sub	sp, #28
   2ad4e:	4604      	mov	r4, r0
   2ad50:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   2ad52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
{
   2ad56:	4617      	mov	r7, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   2ad58:	f000 fb1c 	bl	2b394 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2ad5c:	f104 0914 	add.w	r9, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   2ad60:	4605      	mov	r5, r0
   2ad62:	4688      	mov	r8, r1
   2ad64:	f04f 0320 	mov.w	r3, #32
   2ad68:	f3ef 8b11 	mrs	fp, BASEPRI
   2ad6c:	f383 8811 	msr	BASEPRI, r3
   2ad70:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2ad74:	f104 0a0c 	add.w	sl, r4, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2ad78:	463a      	mov	r2, r7
   2ad7a:	4631      	mov	r1, r6
   2ad7c:	4620      	mov	r0, r4
   2ad7e:	f7f8 fb24 	bl	233ca <sys_heap_aligned_alloc>
   2ad82:	9005      	str	r0, [sp, #20]
		now = z_tick_get();
   2ad84:	f7f5 fc80 	bl	20688 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   2ad88:	9b05      	ldr	r3, [sp, #20]
   2ad8a:	b13b      	cbz	r3, 2ad9c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2ad8c:	f38b 8811 	msr	BASEPRI, fp
   2ad90:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2ad94:	4618      	mov	r0, r3
   2ad96:	b007      	add	sp, #28
   2ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   2ad9c:	1a2a      	subs	r2, r5, r0
   2ad9e:	9202      	str	r2, [sp, #8]
   2ada0:	eb68 0201 	sbc.w	r2, r8, r1
   2ada4:	9203      	str	r2, [sp, #12]
   2ada6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   2adaa:	2901      	cmp	r1, #1
   2adac:	f172 0200 	sbcs.w	r2, r2, #0
   2adb0:	dbec      	blt.n	2ad8c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2adb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2adb6:	4659      	mov	r1, fp
   2adb8:	e9cd 2300 	strd	r2, r3, [sp]
   2adbc:	4648      	mov	r0, r9
   2adbe:	4652      	mov	r2, sl
   2adc0:	f7f5 f84c 	bl	1fe5c <z_pend_curr>
	__asm__ volatile(
   2adc4:	f04f 0320 	mov.w	r3, #32
   2adc8:	f3ef 8b11 	mrs	fp, BASEPRI
   2adcc:	f383 8811 	msr	BASEPRI, r3
   2add0:	f3bf 8f6f 	isb	sy
   2add4:	e7d0      	b.n	2ad78 <k_heap_aligned_alloc+0x30>

0002add6 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   2add6:	b538      	push	{r3, r4, r5, lr}
   2add8:	4604      	mov	r4, r0
   2adda:	f04f 0320 	mov.w	r3, #32
   2adde:	f3ef 8511 	mrs	r5, BASEPRI
   2ade2:	f383 8811 	msr	BASEPRI, r3
   2ade6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2adea:	f7f8 faa1 	bl	23330 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   2adee:	f104 000c 	add.w	r0, r4, #12
   2adf2:	f000 f9e1 	bl	2b1b8 <z_unpend_all>
   2adf6:	b130      	cbz	r0, 2ae06 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2adf8:	4629      	mov	r1, r5
   2adfa:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2adfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2ae02:	f7f4 bde3 	b.w	1f9cc <z_reschedule>
	__asm__ volatile(
   2ae06:	f385 8811 	msr	BASEPRI, r5
   2ae0a:	f3bf 8f6f 	isb	sy
}
   2ae0e:	bd38      	pop	{r3, r4, r5, pc}

0002ae10 <k_mem_slab_init>:
{
   2ae10:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2ae12:	2400      	movs	r4, #0
   2ae14:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ae16:	ea41 0402 	orr.w	r4, r1, r2
   2ae1a:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2ae1e:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2ae22:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2ae24:	d10c      	bne.n	2ae40 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2ae26:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ae28:	42a3      	cmp	r3, r4
   2ae2a:	d103      	bne.n	2ae34 <k_mem_slab_init+0x24>
   2ae2c:	e9c0 0000 	strd	r0, r0, [r0]
}
   2ae30:	2000      	movs	r0, #0
}
   2ae32:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2ae34:	6945      	ldr	r5, [r0, #20]
   2ae36:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2ae38:	3401      	adds	r4, #1
		slab->free_list = p;
   2ae3a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2ae3c:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2ae3e:	e7f3      	b.n	2ae28 <k_mem_slab_init+0x18>
		return -EINVAL;
   2ae40:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2ae44:	e7f5      	b.n	2ae32 <k_mem_slab_init+0x22>

0002ae46 <queue_insert>:
{
   2ae46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ae4a:	4699      	mov	r9, r3
   2ae4c:	4604      	mov	r4, r0
   2ae4e:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2ae52:	460d      	mov	r5, r1
   2ae54:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2ae56:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2ae5a:	f04f 0220 	mov.w	r2, #32
   2ae5e:	f3ef 8711 	mrs	r7, BASEPRI
   2ae62:	f382 8811 	msr	BASEPRI, r2
   2ae66:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2ae6a:	b103      	cbz	r3, 2ae6e <queue_insert+0x28>
		prev = sys_sflist_peek_tail(&queue->data_q);
   2ae6c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2ae6e:	4630      	mov	r0, r6
   2ae70:	f000 f97d 	bl	2b16e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2ae74:	b160      	cbz	r0, 2ae90 <queue_insert+0x4a>
   2ae76:	2400      	movs	r4, #0
   2ae78:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   2ae7c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2ae80:	f000 f91a 	bl	2b0b8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2ae84:	4630      	mov	r0, r6
   2ae86:	4639      	mov	r1, r7
   2ae88:	f7f4 fda0 	bl	1f9cc <z_reschedule>
	return 0;
   2ae8c:	2000      	movs	r0, #0
   2ae8e:	e00c      	b.n	2aeaa <queue_insert+0x64>
	if (alloc) {
   2ae90:	f1b9 0f00 	cmp.w	r9, #0
   2ae94:	d01b      	beq.n	2aece <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   2ae96:	2108      	movs	r1, #8
   2ae98:	f7f5 fd1e 	bl	208d8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2ae9c:	b938      	cbnz	r0, 2aeae <queue_insert+0x68>
	__asm__ volatile(
   2ae9e:	f387 8811 	msr	BASEPRI, r7
   2aea2:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2aea6:	f06f 000b 	mvn.w	r0, #11
}
   2aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2aeae:	2301      	movs	r3, #1
		anode->data = data;
   2aeb0:	f8c0 8004 	str.w	r8, [r0, #4]
   2aeb4:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2aeb6:	6803      	ldr	r3, [r0, #0]
   2aeb8:	f003 0203 	and.w	r2, r3, #3
   2aebc:	b95d      	cbnz	r5, 2aed6 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2aebe:	6823      	ldr	r3, [r4, #0]
   2aec0:	4313      	orrs	r3, r2
   2aec2:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2aec4:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2aec6:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2aec8:	b973      	cbnz	r3, 2aee8 <queue_insert+0xa2>
	list->tail = node;
   2aeca:	6060      	str	r0, [r4, #4]
}
   2aecc:	e00c      	b.n	2aee8 <queue_insert+0xa2>
	node->next_and_flags = flags;
   2aece:	f8c8 9000 	str.w	r9, [r8]
}
   2aed2:	4640      	mov	r0, r8
   2aed4:	e7ef      	b.n	2aeb6 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2aed6:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2aed8:	f033 0303 	bics.w	r3, r3, #3
   2aedc:	d110      	bne.n	2af00 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2aede:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   2aee0:	6862      	ldr	r2, [r4, #4]
   2aee2:	b93a      	cbnz	r2, 2aef4 <queue_insert+0xae>
	list->head = node;
   2aee4:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2aee8:	2104      	movs	r1, #4
   2aeea:	f104 0010 	add.w	r0, r4, #16
   2aeee:	f000 fbfd 	bl	2b6ec <z_handle_obj_poll_events>
   2aef2:	e7c7      	b.n	2ae84 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2aef4:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2aef6:	f003 0303 	and.w	r3, r3, #3
   2aefa:	4303      	orrs	r3, r0
   2aefc:	6013      	str	r3, [r2, #0]
   2aefe:	e7e4      	b.n	2aeca <queue_insert+0x84>
   2af00:	4313      	orrs	r3, r2
   2af02:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2af04:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2af06:	f003 0303 	and.w	r3, r3, #3
   2af0a:	4303      	orrs	r3, r0
   2af0c:	602b      	str	r3, [r5, #0]
}
   2af0e:	e7eb      	b.n	2aee8 <queue_insert+0xa2>

0002af10 <z_queue_node_peek>:
{
   2af10:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2af12:	4604      	mov	r4, r0
   2af14:	b130      	cbz	r0, 2af24 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2af16:	6802      	ldr	r2, [r0, #0]
   2af18:	0793      	lsls	r3, r2, #30
   2af1a:	d003      	beq.n	2af24 <z_queue_node_peek+0x14>
		ret = anode->data;
   2af1c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2af1e:	b109      	cbz	r1, 2af24 <z_queue_node_peek+0x14>
			k_free(anode);
   2af20:	f000 fc05 	bl	2b72e <k_free>
}
   2af24:	4620      	mov	r0, r4
   2af26:	bd10      	pop	{r4, pc}

0002af28 <z_impl_k_queue_init>:
	list->head = NULL;
   2af28:	2300      	movs	r3, #0
	list->tail = NULL;
   2af2a:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2af2e:	f100 0308 	add.w	r3, r0, #8
   2af32:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2af36:	f100 0310 	add.w	r3, r0, #16
   2af3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2af3e:	4770      	bx	lr

0002af40 <k_queue_append>:
{
   2af40:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2af42:	2301      	movs	r3, #1
   2af44:	9300      	str	r3, [sp, #0]
   2af46:	2300      	movs	r3, #0
{
   2af48:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2af4a:	4619      	mov	r1, r3
   2af4c:	f7ff ff7b 	bl	2ae46 <queue_insert>
}
   2af50:	b003      	add	sp, #12
   2af52:	f85d fb04 	ldr.w	pc, [sp], #4

0002af56 <k_queue_prepend>:
{
   2af56:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2af58:	2300      	movs	r3, #0
{
   2af5a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2af5c:	9300      	str	r3, [sp, #0]
   2af5e:	4619      	mov	r1, r3
   2af60:	f7ff ff71 	bl	2ae46 <queue_insert>
}
   2af64:	b003      	add	sp, #12
   2af66:	f85d fb04 	ldr.w	pc, [sp], #4

0002af6a <k_queue_append_list>:
{
   2af6a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2af6e:	4605      	mov	r5, r0
   2af70:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2af72:	460c      	mov	r4, r1
   2af74:	b391      	cbz	r1, 2afdc <k_queue_append_list+0x72>
   2af76:	b38a      	cbz	r2, 2afdc <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2af78:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2af7c:	f04f 0320 	mov.w	r3, #32
   2af80:	f3ef 8811 	mrs	r8, BASEPRI
   2af84:	f383 8811 	msr	BASEPRI, r3
   2af88:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2af8c:	4638      	mov	r0, r7
   2af8e:	f000 f8ee 	bl	2b16e <z_unpend_first_thread>
   2af92:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2af96:	b920      	cbnz	r0, 2afa2 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2af98:	686b      	ldr	r3, [r5, #4]
   2af9a:	b9cb      	cbnz	r3, 2afd0 <k_queue_append_list+0x66>
	list->head = node;
   2af9c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2af9e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2afa0:	e00a      	b.n	2afb8 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2afa2:	6144      	str	r4, [r0, #20]
   2afa4:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   2afa8:	f000 f886 	bl	2b0b8 <z_ready_thread>
		head = *(void **)head;
   2afac:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2afae:	4638      	mov	r0, r7
   2afb0:	f000 f8dd 	bl	2b16e <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2afb4:	2c00      	cmp	r4, #0
   2afb6:	d1ee      	bne.n	2af96 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2afb8:	2104      	movs	r1, #4
   2afba:	f105 0010 	add.w	r0, r5, #16
   2afbe:	f000 fb95 	bl	2b6ec <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2afc2:	4638      	mov	r0, r7
   2afc4:	4641      	mov	r1, r8
   2afc6:	f7f4 fd01 	bl	1f9cc <z_reschedule>
	return 0;
   2afca:	2000      	movs	r0, #0
}
   2afcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2afd0:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2afd2:	f001 0103 	and.w	r1, r1, #3
   2afd6:	430c      	orrs	r4, r1
   2afd8:	601c      	str	r4, [r3, #0]
}
   2afda:	e7e0      	b.n	2af9e <k_queue_append_list+0x34>
		return -EINVAL;
   2afdc:	f06f 0015 	mvn.w	r0, #21
   2afe0:	e7f4      	b.n	2afcc <k_queue_append_list+0x62>

0002afe2 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   2afe2:	f990 000e 	ldrsb.w	r0, [r0, #14]
   2afe6:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   2afea:	4298      	cmp	r0, r3
   2afec:	bfac      	ite	ge
   2afee:	2000      	movge	r0, #0
   2aff0:	2001      	movlt	r0, #1
   2aff2:	4770      	bx	lr

0002aff4 <z_find_first_thread_to_unpend>:
{
   2aff4:	b510      	push	{r4, lr}
   2aff6:	f04f 0320 	mov.w	r3, #32
   2affa:	f3ef 8411 	mrs	r4, BASEPRI
   2affe:	f383 8811 	msr	BASEPRI, r3
   2b002:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2b006:	f000 f84d 	bl	2b0a4 <z_priq_dumb_best>
	__asm__ volatile(
   2b00a:	f384 8811 	msr	BASEPRI, r4
   2b00e:	f3bf 8f6f 	isb	sy
}
   2b012:	bd10      	pop	{r4, pc}

0002b014 <z_unpend_thread_no_timeout>:
{
   2b014:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b016:	f04f 0320 	mov.w	r3, #32
   2b01a:	f3ef 8411 	mrs	r4, BASEPRI
   2b01e:	f383 8811 	msr	BASEPRI, r3
   2b022:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b026:	f000 f81b 	bl	2b060 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b02a:	f384 8811 	msr	BASEPRI, r4
   2b02e:	f3bf 8f6f 	isb	sy
}
   2b032:	bd10      	pop	{r4, pc}

0002b034 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2b034:	4603      	mov	r3, r0
   2b036:	b920      	cbnz	r0, 2b042 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2b038:	f3ef 8205 	mrs	r2, IPSR
   2b03c:	b90a      	cbnz	r2, 2b042 <z_reschedule_irqlock+0xe>
   2b03e:	f7d9 b98f 	b.w	4360 <arch_swap>
   2b042:	f383 8811 	msr	BASEPRI, r3
   2b046:	f3bf 8f6f 	isb	sy
}
   2b04a:	4770      	bx	lr

0002b04c <z_reschedule_unlocked>:
	__asm__ volatile(
   2b04c:	f04f 0320 	mov.w	r3, #32
   2b050:	f3ef 8011 	mrs	r0, BASEPRI
   2b054:	f383 8811 	msr	BASEPRI, r3
   2b058:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b05c:	f7ff bfea 	b.w	2b034 <z_reschedule_irqlock>

0002b060 <unpend_thread_no_timeout>:
{
   2b060:	4601      	mov	r1, r0
   2b062:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2b064:	6880      	ldr	r0, [r0, #8]
   2b066:	f7f4 fcd7 	bl	1fa18 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2b06a:	7b4b      	ldrb	r3, [r1, #13]
   2b06c:	f023 0302 	bic.w	r3, r3, #2
   2b070:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   2b072:	2300      	movs	r3, #0
   2b074:	608b      	str	r3, [r1, #8]
}
   2b076:	bd08      	pop	{r3, pc}

0002b078 <z_unpend_thread>:
{
   2b078:	b538      	push	{r3, r4, r5, lr}
   2b07a:	4604      	mov	r4, r0
   2b07c:	f04f 0320 	mov.w	r3, #32
   2b080:	f3ef 8511 	mrs	r5, BASEPRI
   2b084:	f383 8811 	msr	BASEPRI, r3
   2b088:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b08c:	f7ff ffe8 	bl	2b060 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b090:	f385 8811 	msr	BASEPRI, r5
   2b094:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   2b098:	f104 0018 	add.w	r0, r4, #24
}
   2b09c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b0a0:	f000 b932 	b.w	2b308 <z_abort_timeout>

0002b0a4 <z_priq_dumb_best>:
{
   2b0a4:	4603      	mov	r3, r0
	return list->head == list;
   2b0a6:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b0a8:	4283      	cmp	r3, r0
   2b0aa:	d003      	beq.n	2b0b4 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2b0ac:	2800      	cmp	r0, #0
   2b0ae:	bf38      	it	cc
   2b0b0:	2000      	movcc	r0, #0
   2b0b2:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2b0b4:	2000      	movs	r0, #0
}
   2b0b6:	4770      	bx	lr

0002b0b8 <z_ready_thread>:
{
   2b0b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b0ba:	f04f 0320 	mov.w	r3, #32
   2b0be:	f3ef 8411 	mrs	r4, BASEPRI
   2b0c2:	f383 8811 	msr	BASEPRI, r3
   2b0c6:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   2b0ca:	f7f4 fcff 	bl	1facc <ready_thread>
	__asm__ volatile(
   2b0ce:	f384 8811 	msr	BASEPRI, r4
   2b0d2:	f3bf 8f6f 	isb	sy
}
   2b0d6:	bd10      	pop	{r4, pc}

0002b0d8 <z_thread_timeout>:
{
   2b0d8:	b570      	push	{r4, r5, r6, lr}
   2b0da:	4604      	mov	r4, r0
	__asm__ volatile(
   2b0dc:	f04f 0320 	mov.w	r3, #32
   2b0e0:	f3ef 8611 	mrs	r6, BASEPRI
   2b0e4:	f383 8811 	msr	BASEPRI, r3
   2b0e8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   2b0ec:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   2b0f0:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   2b0f4:	b113      	cbz	r3, 2b0fc <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   2b0f6:	4628      	mov	r0, r5
   2b0f8:	f7ff ffb2 	bl	2b060 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2b0fc:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2b100:	f023 0314 	bic.w	r3, r3, #20
   2b104:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   2b108:	4628      	mov	r0, r5
   2b10a:	f7f4 fcdf 	bl	1facc <ready_thread>
	__asm__ volatile(
   2b10e:	f386 8811 	msr	BASEPRI, r6
   2b112:	f3bf 8f6f 	isb	sy
}
   2b116:	bd70      	pop	{r4, r5, r6, pc}

0002b118 <add_to_waitq_locked>:
{
   2b118:	b538      	push	{r3, r4, r5, lr}
   2b11a:	4604      	mov	r4, r0
   2b11c:	460d      	mov	r5, r1
	unready_thread(thread);
   2b11e:	f7f4 fe5d 	bl	1fddc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2b122:	7b63      	ldrb	r3, [r4, #13]
   2b124:	f043 0302 	orr.w	r3, r3, #2
   2b128:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2b12a:	b1c5      	cbz	r5, 2b15e <add_to_waitq_locked+0x46>
	return list->head == list;
   2b12c:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2b12e:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b130:	429d      	cmp	r5, r3
   2b132:	bf08      	it	eq
   2b134:	2300      	moveq	r3, #0
   2b136:	2b00      	cmp	r3, #0
   2b138:	bf38      	it	cc
   2b13a:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2b13c:	b183      	cbz	r3, 2b160 <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   2b13e:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2b142:	f993 200e 	ldrsb.w	r2, [r3, #14]
   2b146:	4291      	cmp	r1, r2
   2b148:	db04      	blt.n	2b154 <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2b14a:	686a      	ldr	r2, [r5, #4]
   2b14c:	429a      	cmp	r2, r3
   2b14e:	d007      	beq.n	2b160 <add_to_waitq_locked+0x48>
   2b150:	681b      	ldr	r3, [r3, #0]
   2b152:	e7f3      	b.n	2b13c <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   2b154:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2b156:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2b15a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2b15c:	605c      	str	r4, [r3, #4]
}
   2b15e:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   2b160:	686b      	ldr	r3, [r5, #4]
   2b162:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2b164:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2b166:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   2b168:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b16a:	606c      	str	r4, [r5, #4]
   2b16c:	e7f7      	b.n	2b15e <add_to_waitq_locked+0x46>

0002b16e <z_unpend_first_thread>:
{
   2b16e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2b170:	f04f 0320 	mov.w	r3, #32
   2b174:	f3ef 8211 	mrs	r2, BASEPRI
   2b178:	f383 8811 	msr	BASEPRI, r3
   2b17c:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   2b180:	f7ff ff90 	bl	2b0a4 <z_priq_dumb_best>
   2b184:	4604      	mov	r4, r0
	__asm__ volatile(
   2b186:	f382 8811 	msr	BASEPRI, r2
   2b18a:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   2b18e:	b188      	cbz	r0, 2b1b4 <z_unpend_first_thread+0x46>
	__asm__ volatile(
   2b190:	f04f 0320 	mov.w	r3, #32
   2b194:	f3ef 8511 	mrs	r5, BASEPRI
   2b198:	f383 8811 	msr	BASEPRI, r3
   2b19c:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2b1a0:	f7ff ff5e 	bl	2b060 <unpend_thread_no_timeout>
	__asm__ volatile(
   2b1a4:	f385 8811 	msr	BASEPRI, r5
   2b1a8:	f3bf 8f6f 	isb	sy
   2b1ac:	f104 0018 	add.w	r0, r4, #24
   2b1b0:	f000 f8aa 	bl	2b308 <z_abort_timeout>
}
   2b1b4:	4620      	mov	r0, r4
   2b1b6:	bd38      	pop	{r3, r4, r5, pc}

0002b1b8 <z_unpend_all>:
{
   2b1b8:	b538      	push	{r3, r4, r5, lr}
   2b1ba:	4605      	mov	r5, r0
	int need_sched = 0;
   2b1bc:	2000      	movs	r0, #0
	return list->head == list;
   2b1be:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b1c0:	42a5      	cmp	r5, r4
   2b1c2:	d000      	beq.n	2b1c6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2b1c4:	b904      	cbnz	r4, 2b1c8 <z_unpend_all+0x10>
}
   2b1c6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2b1c8:	4620      	mov	r0, r4
   2b1ca:	f7ff ff55 	bl	2b078 <z_unpend_thread>
		z_ready_thread(thread);
   2b1ce:	4620      	mov	r0, r4
   2b1d0:	f7ff ff72 	bl	2b0b8 <z_ready_thread>
		need_sched = 1;
   2b1d4:	2001      	movs	r0, #1
   2b1d6:	e7f2      	b.n	2b1be <z_unpend_all+0x6>

0002b1d8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   2b1d8:	b15a      	cbz	r2, 2b1f2 <z_impl_k_sem_init+0x1a>
   2b1da:	428a      	cmp	r2, r1
   2b1dc:	d309      	bcc.n	2b1f2 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2b1de:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2b1e2:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2b1e6:	e9c0 0000 	strd	r0, r0, [r0]
   2b1ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2b1ee:	2000      	movs	r0, #0
   2b1f0:	4770      	bx	lr
		return -EINVAL;
   2b1f2:	f06f 0015 	mvn.w	r0, #21
}
   2b1f6:	4770      	bx	lr

0002b1f8 <k_is_in_isr>:
   2b1f8:	f3ef 8005 	mrs	r0, IPSR
}
   2b1fc:	3800      	subs	r0, #0
   2b1fe:	bf18      	it	ne
   2b200:	2001      	movne	r0, #1
   2b202:	4770      	bx	lr

0002b204 <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   2b204:	b108      	cbz	r0, 2b20a <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   2b206:	f7d9 bea7 	b.w	4f58 <arch_busy_wait>
}
   2b20a:	4770      	bx	lr

0002b20c <z_impl_k_thread_name_set>:
}
   2b20c:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2b210:	4770      	bx	lr

0002b212 <k_thread_name_get>:
}
   2b212:	2000      	movs	r0, #0
   2b214:	4770      	bx	lr

0002b216 <k_work_submit_to_queue>:
{
   2b216:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b218:	f101 0308 	add.w	r3, r1, #8
   2b21c:	f3bf 8f5b 	dmb	ish
   2b220:	e853 2f00 	ldrex	r2, [r3]
   2b224:	f042 0c01 	orr.w	ip, r2, #1
   2b228:	e843 ce00 	strex	lr, ip, [r3]
   2b22c:	f1be 0f00 	cmp.w	lr, #0
   2b230:	d1f6      	bne.n	2b220 <k_work_submit_to_queue+0xa>
   2b232:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b236:	07d3      	lsls	r3, r2, #31
   2b238:	d403      	bmi.n	2b242 <k_work_submit_to_queue+0x2c>
}
   2b23a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2b23e:	f7ff be7f 	b.w	2af40 <k_queue_append>
}
   2b242:	f85d fb04 	ldr.w	pc, [sp], #4

0002b246 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2b246:	f1a0 0110 	sub.w	r1, r0, #16
   2b24a:	6980      	ldr	r0, [r0, #24]
   2b24c:	f7ff bfe3 	b.w	2b216 <k_work_submit_to_queue>

0002b250 <work_cancel>:
{
   2b250:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b252:	f3bf 8f5b 	dmb	ish
   2b256:	6883      	ldr	r3, [r0, #8]
   2b258:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   2b25c:	07db      	lsls	r3, r3, #31
{
   2b25e:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2b260:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2b264:	d532      	bpl.n	2b2cc <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2b266:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2b268:	6813      	ldr	r3, [r2, #0]
   2b26a:	2100      	movs	r1, #0
   2b26c:	b913      	cbnz	r3, 2b274 <work_cancel+0x24>
			return -EINVAL;
   2b26e:	f06f 0015 	mvn.w	r0, #21
}
   2b272:	bd70      	pop	{r4, r5, r6, pc}
   2b274:	429c      	cmp	r4, r3
   2b276:	d124      	bne.n	2b2c2 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   2b278:	6823      	ldr	r3, [r4, #0]
   2b27a:	6856      	ldr	r6, [r2, #4]
   2b27c:	f023 0003 	bic.w	r0, r3, #3
   2b280:	b9b1      	cbnz	r1, 2b2b0 <work_cancel+0x60>
   2b282:	42b4      	cmp	r4, r6
	list->head = node;
   2b284:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2b286:	d100      	bne.n	2b28a <work_cancel+0x3a>
	list->tail = node;
   2b288:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b28a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b28c:	f003 0303 	and.w	r3, r3, #3
   2b290:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2b292:	2000      	movs	r0, #0
   2b294:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b296:	f3bf 8f5b 	dmb	ish
   2b29a:	e855 3f00 	ldrex	r3, [r5]
   2b29e:	f023 0301 	bic.w	r3, r3, #1
   2b2a2:	e845 3200 	strex	r2, r3, [r5]
   2b2a6:	2a00      	cmp	r2, #0
   2b2a8:	d1f7      	bne.n	2b29a <work_cancel+0x4a>
   2b2aa:	f3bf 8f5b 	dmb	ish
   2b2ae:	e7e0      	b.n	2b272 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2b2b0:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b2b2:	f003 0303 	and.w	r3, r3, #3
   2b2b6:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2b2b8:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2b2ba:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2b2bc:	bf08      	it	eq
   2b2be:	6051      	streq	r1, [r2, #4]
}
   2b2c0:	e7e3      	b.n	2b28a <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2b2c2:	6818      	ldr	r0, [r3, #0]
   2b2c4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2b2c6:	f020 0303 	bic.w	r3, r0, #3
   2b2ca:	e7cf      	b.n	2b26c <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   2b2cc:	3010      	adds	r0, #16
   2b2ce:	f000 f81b 	bl	2b308 <z_abort_timeout>
		if (err) {
   2b2d2:	2800      	cmp	r0, #0
   2b2d4:	d0dd      	beq.n	2b292 <work_cancel+0x42>
			return -EALREADY;
   2b2d6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2b2da:	e7ca      	b.n	2b272 <work_cancel+0x22>

0002b2dc <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   2b2dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b2de:	f04f 0220 	mov.w	r2, #32
   2b2e2:	f3ef 8411 	mrs	r4, BASEPRI
   2b2e6:	f382 8811 	msr	BASEPRI, r2
   2b2ea:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   2b2ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b2f0:	b133      	cbz	r3, 2b300 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   2b2f2:	f7ff ffad 	bl	2b250 <work_cancel>
	__asm__ volatile(
   2b2f6:	f384 8811 	msr	BASEPRI, r4
   2b2fa:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   2b2fe:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b300:	f06f 0015 	mvn.w	r0, #21
   2b304:	e7f7      	b.n	2b2f6 <k_delayed_work_cancel+0x1a>

0002b306 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2b306:	4770      	bx	lr

0002b308 <z_abort_timeout>:
{
   2b308:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b30a:	f04f 0220 	mov.w	r2, #32
   2b30e:	f3ef 8411 	mrs	r4, BASEPRI
   2b312:	f382 8811 	msr	BASEPRI, r2
   2b316:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2b31a:	6803      	ldr	r3, [r0, #0]
   2b31c:	b13b      	cbz	r3, 2b32e <z_abort_timeout+0x26>
			remove_timeout(to);
   2b31e:	f7f5 f871 	bl	20404 <remove_timeout>
			ret = 0;
   2b322:	2000      	movs	r0, #0
	__asm__ volatile(
   2b324:	f384 8811 	msr	BASEPRI, r4
   2b328:	f3bf 8f6f 	isb	sy
}
   2b32c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2b32e:	f06f 0015 	mvn.w	r0, #21
   2b332:	e7f7      	b.n	2b324 <z_abort_timeout+0x1c>

0002b334 <z_get_next_timeout_expiry>:
{
   2b334:	b510      	push	{r4, lr}
	__asm__ volatile(
   2b336:	f04f 0320 	mov.w	r3, #32
   2b33a:	f3ef 8411 	mrs	r4, BASEPRI
   2b33e:	f383 8811 	msr	BASEPRI, r3
   2b342:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2b346:	f7f5 f877 	bl	20438 <next_timeout>
	__asm__ volatile(
   2b34a:	f384 8811 	msr	BASEPRI, r4
   2b34e:	f3bf 8f6f 	isb	sy
}
   2b352:	bd10      	pop	{r4, pc}

0002b354 <z_set_timeout_expiry>:
{
   2b354:	b570      	push	{r4, r5, r6, lr}
   2b356:	4604      	mov	r4, r0
   2b358:	460d      	mov	r5, r1
	__asm__ volatile(
   2b35a:	f04f 0320 	mov.w	r3, #32
   2b35e:	f3ef 8611 	mrs	r6, BASEPRI
   2b362:	f383 8811 	msr	BASEPRI, r3
   2b366:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2b36a:	f7f5 f865 	bl	20438 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2b36e:	2801      	cmp	r0, #1
   2b370:	dd05      	ble.n	2b37e <z_set_timeout_expiry+0x2a>
   2b372:	42a0      	cmp	r0, r4
   2b374:	db03      	blt.n	2b37e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2b376:	4629      	mov	r1, r5
   2b378:	4620      	mov	r0, r4
   2b37a:	f7d8 fe49 	bl	4010 <z_clock_set_timeout>
	__asm__ volatile(
   2b37e:	f386 8811 	msr	BASEPRI, r6
   2b382:	f3bf 8f6f 	isb	sy
}
   2b386:	bd70      	pop	{r4, r5, r6, pc}

0002b388 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2b388:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2b38a:	f7f5 f97d 	bl	20688 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2b38e:	bd08      	pop	{r3, pc}

0002b390 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   2b390:	f7f5 b97a 	b.w	20688 <z_tick_get>

0002b394 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   2b394:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b396:	1c4b      	adds	r3, r1, #1
   2b398:	bf08      	it	eq
   2b39a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2b39e:	4604      	mov	r4, r0
   2b3a0:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2b3a2:	d013      	beq.n	2b3cc <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2b3a4:	ea54 0105 	orrs.w	r1, r4, r5
   2b3a8:	d103      	bne.n	2b3b2 <z_timeout_end_calc+0x1e>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   2b3aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   2b3ae:	f7f5 b96b 	b.w	20688 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2b3b2:	f06f 0101 	mvn.w	r1, #1
   2b3b6:	1a0a      	subs	r2, r1, r0
   2b3b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b3bc:	eb61 0305 	sbc.w	r3, r1, r5
   2b3c0:	2a00      	cmp	r2, #0
   2b3c2:	f173 0100 	sbcs.w	r1, r3, #0
   2b3c6:	db02      	blt.n	2b3ce <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   2b3c8:	4610      	mov	r0, r2
   2b3ca:	4619      	mov	r1, r3
}
   2b3cc:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   2b3ce:	f7f5 f95b 	bl	20688 <z_tick_get>
   2b3d2:	2c01      	cmp	r4, #1
   2b3d4:	f175 0300 	sbcs.w	r3, r5, #0
   2b3d8:	bfbc      	itt	lt
   2b3da:	2401      	movlt	r4, #1
   2b3dc:	2500      	movlt	r5, #0
   2b3de:	1820      	adds	r0, r4, r0
   2b3e0:	eb45 0101 	adc.w	r1, r5, r1
   2b3e4:	e7f2      	b.n	2b3cc <z_timeout_end_calc+0x38>

0002b3e6 <k_timer_init>:
	timer->status = 0U;
   2b3e6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2b3e8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2b3ec:	f100 0218 	add.w	r2, r0, #24
   2b3f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2b3f4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2b3f8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2b3fa:	6343      	str	r3, [r0, #52]	; 0x34
}
   2b3fc:	4770      	bx	lr

0002b3fe <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2b3fe:	b510      	push	{r4, lr}
   2b400:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2b402:	f7ff ff81 	bl	2b308 <z_abort_timeout>

	if (inactive) {
   2b406:	b9d8      	cbnz	r0, 2b440 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   2b408:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2b40a:	b10b      	cbz	r3, 2b410 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2b40c:	4620      	mov	r0, r4
   2b40e:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2b410:	f104 0018 	add.w	r0, r4, #24
   2b414:	2100      	movs	r1, #0
   2b416:	f7ff fded 	bl	2aff4 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   2b41a:	4604      	mov	r4, r0
   2b41c:	b180      	cbz	r0, 2b440 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   2b41e:	f7ff fdf9 	bl	2b014 <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2b422:	4620      	mov	r0, r4
   2b424:	f7ff fe48 	bl	2b0b8 <z_ready_thread>
	__asm__ volatile(
   2b428:	f04f 0320 	mov.w	r3, #32
   2b42c:	f3ef 8011 	mrs	r0, BASEPRI
   2b430:	f383 8811 	msr	BASEPRI, r3
   2b434:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2b438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2b43c:	f7ff bdfa 	b.w	2b034 <z_reschedule_irqlock>
   2b440:	bd10      	pop	{r4, pc}

0002b442 <z_impl_k_timer_status_get>:
}
#include <syscalls/k_timer_stop_mrsh.c>
#endif

uint32_t z_impl_k_timer_status_get(struct k_timer *timer)
{
   2b442:	4603      	mov	r3, r0
   2b444:	f04f 0120 	mov.w	r1, #32
   2b448:	f3ef 8211 	mrs	r2, BASEPRI
   2b44c:	f381 8811 	msr	BASEPRI, r1
   2b450:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t result = timer->status;

	timer->status = 0U;
   2b454:	2100      	movs	r1, #0
	uint32_t result = timer->status;
   2b456:	6b00      	ldr	r0, [r0, #48]	; 0x30
	timer->status = 0U;
   2b458:	6319      	str	r1, [r3, #48]	; 0x30
	__asm__ volatile(
   2b45a:	f382 8811 	msr	BASEPRI, r2
   2b45e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	return result;
}
   2b462:	4770      	bx	lr

0002b464 <clear_event_registrations>:
	while (num_events--) {
   2b464:	2314      	movs	r3, #20
{
   2b466:	b530      	push	{r4, r5, lr}
   2b468:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   2b46c:	2400      	movs	r4, #0
	while (num_events--) {
   2b46e:	4281      	cmp	r1, r0
   2b470:	d100      	bne.n	2b474 <clear_event_registrations+0x10>
}
   2b472:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   2b474:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   2b478:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   2b47c:	f003 030f 	and.w	r3, r3, #15
   2b480:	2b02      	cmp	r3, #2
   2b482:	d80a      	bhi.n	2b49a <clear_event_registrations+0x36>
   2b484:	b15b      	cbz	r3, 2b49e <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   2b486:	f851 3c14 	ldr.w	r3, [r1, #-20]
   2b48a:	b143      	cbz	r3, 2b49e <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   2b48c:	f851 5c10 	ldr.w	r5, [r1, #-16]
   2b490:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2b492:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2b494:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   2b498:	e001      	b.n	2b49e <clear_event_registrations+0x3a>
	switch (event->type) {
   2b49a:	2b04      	cmp	r3, #4
   2b49c:	d0f3      	beq.n	2b486 <clear_event_registrations+0x22>
   2b49e:	f382 8811 	msr	BASEPRI, r2
   2b4a2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2b4a6:	f04f 0320 	mov.w	r3, #32
   2b4aa:	f3ef 8211 	mrs	r2, BASEPRI
   2b4ae:	f383 8811 	msr	BASEPRI, r3
   2b4b2:	f3bf 8f6f 	isb	sy
   2b4b6:	3914      	subs	r1, #20
   2b4b8:	e7d9      	b.n	2b46e <clear_event_registrations+0xa>

0002b4ba <k_work_submit_to_queue>:
{
   2b4ba:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2b4bc:	f101 0308 	add.w	r3, r1, #8
   2b4c0:	f3bf 8f5b 	dmb	ish
   2b4c4:	e853 2f00 	ldrex	r2, [r3]
   2b4c8:	f042 0c01 	orr.w	ip, r2, #1
   2b4cc:	e843 ce00 	strex	lr, ip, [r3]
   2b4d0:	f1be 0f00 	cmp.w	lr, #0
   2b4d4:	d1f6      	bne.n	2b4c4 <k_work_submit_to_queue+0xa>
   2b4d6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2b4da:	07d3      	lsls	r3, r2, #31
   2b4dc:	d403      	bmi.n	2b4e6 <k_work_submit_to_queue+0x2c>
}
   2b4de:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2b4e2:	f7ff bd2d 	b.w	2af40 <k_queue_append>
}
   2b4e6:	f85d fb04 	ldr.w	pc, [sp], #4

0002b4ea <signal_poll_event>:
{
   2b4ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2b4ee:	6884      	ldr	r4, [r0, #8]
{
   2b4f0:	4605      	mov	r5, r0
   2b4f2:	460e      	mov	r6, r1
	if (poller) {
   2b4f4:	b144      	cbz	r4, 2b508 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2b4f6:	7863      	ldrb	r3, [r4, #1]
   2b4f8:	2b01      	cmp	r3, #1
   2b4fa:	d138      	bne.n	2b56e <signal_poll_event+0x84>
	if (!z_is_thread_pending(thread)) {
   2b4fc:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   2b500:	f013 0302 	ands.w	r3, r3, #2
   2b504:	d10a      	bne.n	2b51c <signal_poll_event+0x32>
		poller->is_polling = false;
   2b506:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2b508:	68eb      	ldr	r3, [r5, #12]
   2b50a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2b50e:	430e      	orrs	r6, r1
	event->poller = NULL;
   2b510:	2000      	movs	r0, #0
	event->state |= state;
   2b512:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   2b516:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2b518:	60eb      	str	r3, [r5, #12]
	return retcode;
   2b51a:	e00d      	b.n	2b538 <signal_poll_event+0x4e>
	if (z_is_thread_timeout_expired(thread)) {
   2b51c:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   2b520:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b524:	f06f 0001 	mvn.w	r0, #1
   2b528:	428b      	cmp	r3, r1
   2b52a:	bf08      	it	eq
   2b52c:	4282      	cmpeq	r2, r0
   2b52e:	d105      	bne.n	2b53c <signal_poll_event+0x52>
		poller->is_polling = false;
   2b530:	2300      	movs	r3, #0
   2b532:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2b534:	f06f 000a 	mvn.w	r0, #10
}
   2b538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b53c:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   2b540:	4640      	mov	r0, r8
   2b542:	f7ff fd99 	bl	2b078 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2b546:	2e08      	cmp	r6, #8
   2b548:	bf0c      	ite	eq
   2b54a:	f06f 0303 	mvneq.w	r3, #3
   2b54e:	2300      	movne	r3, #0
   2b550:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2b552:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   2b556:	06db      	lsls	r3, r3, #27
   2b558:	d102      	bne.n	2b560 <signal_poll_event+0x76>
	if (!z_is_thread_ready(thread)) {
   2b55a:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   2b55e:	b10f      	cbz	r7, 2b564 <signal_poll_event+0x7a>
		poller->is_polling = false;
   2b560:	2300      	movs	r3, #0
   2b562:	e7d0      	b.n	2b506 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2b564:	4640      	mov	r0, r8
   2b566:	f7ff fda7 	bl	2b0b8 <z_ready_thread>
		poller->is_polling = false;
   2b56a:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2b56c:	e7cc      	b.n	2b508 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2b56e:	2b02      	cmp	r3, #2
   2b570:	d1f6      	bne.n	2b560 <signal_poll_event+0x76>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2b572:	7823      	ldrb	r3, [r4, #0]
   2b574:	2b00      	cmp	r3, #0
   2b576:	d0c7      	beq.n	2b508 <signal_poll_event+0x1e>
   2b578:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2b57c:	2f00      	cmp	r7, #0
   2b57e:	d0f4      	beq.n	2b56a <signal_poll_event+0x80>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2b580:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2b584:	f1a4 0910 	sub.w	r9, r4, #16
   2b588:	f104 0010 	add.w	r0, r4, #16
   2b58c:	f7ff febc 	bl	2b308 <z_abort_timeout>
		twork->poll_result = 0;
   2b590:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   2b594:	4649      	mov	r1, r9
   2b596:	4638      	mov	r0, r7
   2b598:	f7ff ff8f 	bl	2b4ba <k_work_submit_to_queue>
		poller->is_polling = false;
   2b59c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2b5a0:	e7b2      	b.n	2b508 <signal_poll_event+0x1e>

0002b5a2 <add_event>:
{
   2b5a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b5a4:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2b5a6:	e9d0 2300 	ldrd	r2, r3, [r0]
   2b5aa:	4290      	cmp	r0, r2
   2b5ac:	4604      	mov	r4, r0
   2b5ae:	460d      	mov	r5, r1
   2b5b0:	d106      	bne.n	2b5c0 <add_event+0x1e>
	node->prev = list->tail;
   2b5b2:	6863      	ldr	r3, [r4, #4]
   2b5b4:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2b5b6:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2b5b8:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   2b5ba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2b5bc:	6065      	str	r5, [r4, #4]
}
   2b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2b5c0:	2b00      	cmp	r3, #0
   2b5c2:	d0f6      	beq.n	2b5b2 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2b5c4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b5c6:	b100      	cbz	r0, 2b5ca <add_event+0x28>
   2b5c8:	3864      	subs	r0, #100	; 0x64
   2b5ca:	b107      	cbz	r7, 2b5ce <add_event+0x2c>
   2b5cc:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2b5ce:	4639      	mov	r1, r7
   2b5d0:	f7ff fd07 	bl	2afe2 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2b5d4:	2800      	cmp	r0, #0
   2b5d6:	d1ec      	bne.n	2b5b2 <add_event+0x10>
	return list->head == list;
   2b5d8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2b5da:	42b4      	cmp	r4, r6
   2b5dc:	d0e9      	beq.n	2b5b2 <add_event+0x10>
   2b5de:	2e00      	cmp	r6, #0
   2b5e0:	bf38      	it	cc
   2b5e2:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2b5e4:	2e00      	cmp	r6, #0
   2b5e6:	d0e4      	beq.n	2b5b2 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2b5e8:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2b5ea:	b101      	cbz	r1, 2b5ee <add_event+0x4c>
   2b5ec:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2b5ee:	4638      	mov	r0, r7
   2b5f0:	f7ff fcf7 	bl	2afe2 <z_is_t1_higher_prio_than_t2>
   2b5f4:	b128      	cbz	r0, 2b602 <add_event+0x60>
	node->prev = successor->prev;
   2b5f6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2b5f8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2b5fc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2b5fe:	6075      	str	r5, [r6, #4]
			return;
   2b600:	e7dd      	b.n	2b5be <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   2b602:	6863      	ldr	r3, [r4, #4]
   2b604:	42b3      	cmp	r3, r6
   2b606:	d0d4      	beq.n	2b5b2 <add_event+0x10>
   2b608:	6836      	ldr	r6, [r6, #0]
   2b60a:	e7eb      	b.n	2b5e4 <add_event+0x42>

0002b60c <register_events>:
{
   2b60c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2b610:	f04f 0a00 	mov.w	sl, #0
{
   2b614:	460e      	mov	r6, r1
   2b616:	4614      	mov	r4, r2
   2b618:	461f      	mov	r7, r3
   2b61a:	4683      	mov	fp, r0
	int events_registered = 0;
   2b61c:	4655      	mov	r5, sl
	event->poller = NULL;
   2b61e:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2b620:	45b2      	cmp	sl, r6
   2b622:	db02      	blt.n	2b62a <register_events+0x1e>
}
   2b624:	4628      	mov	r0, r5
   2b626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b62a:	f04f 0320 	mov.w	r3, #32
   2b62e:	f3ef 8911 	mrs	r9, BASEPRI
   2b632:	f383 8811 	msr	BASEPRI, r3
   2b636:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2b63a:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2b63e:	f002 020f 	and.w	r2, r2, #15
   2b642:	2a02      	cmp	r2, #2
   2b644:	d006      	beq.n	2b654 <register_events+0x48>
   2b646:	2a04      	cmp	r2, #4
   2b648:	d008      	beq.n	2b65c <register_events+0x50>
   2b64a:	2a01      	cmp	r2, #1
   2b64c:	d120      	bne.n	2b690 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2b64e:	f8db 3010 	ldr.w	r3, [fp, #16]
   2b652:	e001      	b.n	2b658 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   2b654:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   2b658:	689b      	ldr	r3, [r3, #8]
   2b65a:	e002      	b.n	2b662 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2b65c:	f8db 3010 	ldr.w	r3, [fp, #16]
   2b660:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2b662:	b1ab      	cbz	r3, 2b690 <register_events+0x84>
	event->state |= state;
   2b664:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   2b668:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2b66c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2b670:	430a      	orrs	r2, r1
   2b672:	f362 3310 	bfi	r3, r2, #12, #5
   2b676:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2b67a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2b67e:	f389 8811 	msr	BASEPRI, r9
   2b682:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2b686:	f10a 0a01 	add.w	sl, sl, #1
   2b68a:	f10b 0b14 	add.w	fp, fp, #20
   2b68e:	e7c7      	b.n	2b620 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2b690:	2f00      	cmp	r7, #0
   2b692:	d1f4      	bne.n	2b67e <register_events+0x72>
   2b694:	7823      	ldrb	r3, [r4, #0]
   2b696:	2b00      	cmp	r3, #0
   2b698:	d0f1      	beq.n	2b67e <register_events+0x72>
	switch (event->type) {
   2b69a:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2b69e:	f003 030f 	and.w	r3, r3, #15
   2b6a2:	2b02      	cmp	r3, #2
   2b6a4:	d008      	beq.n	2b6b8 <register_events+0xac>
   2b6a6:	2b04      	cmp	r3, #4
   2b6a8:	d006      	beq.n	2b6b8 <register_events+0xac>
   2b6aa:	2b01      	cmp	r3, #1
   2b6ac:	d10b      	bne.n	2b6c6 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2b6ae:	f8db 0010 	ldr.w	r0, [fp, #16]
   2b6b2:	4622      	mov	r2, r4
   2b6b4:	4659      	mov	r1, fp
   2b6b6:	e004      	b.n	2b6c2 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   2b6b8:	f8db 0010 	ldr.w	r0, [fp, #16]
   2b6bc:	4622      	mov	r2, r4
   2b6be:	4659      	mov	r1, fp
   2b6c0:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   2b6c2:	f7ff ff6e 	bl	2b5a2 <add_event>
	event->poller = poller;
   2b6c6:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   2b6ca:	3501      	adds	r5, #1
   2b6cc:	e7d7      	b.n	2b67e <register_events+0x72>

0002b6ce <k_poll_event_init>:
{
   2b6ce:	b510      	push	{r4, lr}
	event->type = type;
   2b6d0:	0452      	lsls	r2, r2, #17
   2b6d2:	0209      	lsls	r1, r1, #8
   2b6d4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   2b6d8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   2b6dc:	430a      	orrs	r2, r1
   2b6de:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2b6e0:	2400      	movs	r4, #0
	event->type = type;
   2b6e2:	430a      	orrs	r2, r1
	event->obj = obj;
   2b6e4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2b6e8:	6084      	str	r4, [r0, #8]
}
   2b6ea:	bd10      	pop	{r4, pc}

0002b6ec <z_handle_obj_poll_events>:
{
   2b6ec:	4603      	mov	r3, r0
	return list->head == list;
   2b6ee:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2b6f0:	4283      	cmp	r3, r0
   2b6f2:	d008      	beq.n	2b706 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2b6f4:	e9d0 3200 	ldrd	r3, r2, [r0]
   2b6f8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2b6fa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2b6fc:	2300      	movs	r3, #0
	node->prev = NULL;
   2b6fe:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2b702:	f7ff bef2 	b.w	2b4ea <signal_poll_event>
}
   2b706:	4770      	bx	lr

0002b708 <z_heap_aligned_alloc>:
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   2b708:	2304      	movs	r3, #4
   2b70a:	18d2      	adds	r2, r2, r3
{
   2b70c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   2b70e:	4604      	mov	r4, r0
   2b710:	d207      	bcs.n	2b722 <z_heap_aligned_alloc+0x1a>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2b712:	2600      	movs	r6, #0
   2b714:	2700      	movs	r7, #0
   2b716:	e9cd 6700 	strd	r6, r7, [sp]
   2b71a:	4319      	orrs	r1, r3
   2b71c:	f7ff fb14 	bl	2ad48 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2b720:	b910      	cbnz	r0, 2b728 <z_heap_aligned_alloc+0x20>
		return NULL;
   2b722:	2000      	movs	r0, #0
}
   2b724:	b002      	add	sp, #8
   2b726:	bdd0      	pop	{r4, r6, r7, pc}
	*heap_ref = heap;
   2b728:	f840 4b04 	str.w	r4, [r0], #4
	return mem;
   2b72c:	e7fa      	b.n	2b724 <z_heap_aligned_alloc+0x1c>

0002b72e <k_free>:
	if (ptr != NULL) {
   2b72e:	b120      	cbz	r0, 2b73a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b730:	1f01      	subs	r1, r0, #4
   2b732:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b736:	f7ff bb4e 	b.w	2add6 <k_heap_free>
}
   2b73a:	4770      	bx	lr

0002b73c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2b73c:	4770      	bx	lr

0002b73e <memcmp>:
   2b73e:	b530      	push	{r4, r5, lr}
   2b740:	3901      	subs	r1, #1
   2b742:	2400      	movs	r4, #0
   2b744:	42a2      	cmp	r2, r4
   2b746:	d101      	bne.n	2b74c <memcmp+0xe>
   2b748:	2000      	movs	r0, #0
   2b74a:	e005      	b.n	2b758 <memcmp+0x1a>
   2b74c:	5d03      	ldrb	r3, [r0, r4]
   2b74e:	3401      	adds	r4, #1
   2b750:	5d0d      	ldrb	r5, [r1, r4]
   2b752:	42ab      	cmp	r3, r5
   2b754:	d0f6      	beq.n	2b744 <memcmp+0x6>
   2b756:	1b58      	subs	r0, r3, r5
   2b758:	bd30      	pop	{r4, r5, pc}

0002b75a <memcpy>:
   2b75a:	440a      	add	r2, r1
   2b75c:	4291      	cmp	r1, r2
   2b75e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2b762:	d100      	bne.n	2b766 <memcpy+0xc>
   2b764:	4770      	bx	lr
   2b766:	b510      	push	{r4, lr}
   2b768:	f811 4b01 	ldrb.w	r4, [r1], #1
   2b76c:	f803 4f01 	strb.w	r4, [r3, #1]!
   2b770:	4291      	cmp	r1, r2
   2b772:	d1f9      	bne.n	2b768 <memcpy+0xe>
   2b774:	bd10      	pop	{r4, pc}

0002b776 <__memcpy_chk>:
   2b776:	429a      	cmp	r2, r3
   2b778:	b508      	push	{r3, lr}
   2b77a:	d901      	bls.n	2b780 <__memcpy_chk+0xa>
   2b77c:	f7d9 fac0 	bl	4d00 <__chk_fail>
   2b780:	4281      	cmp	r1, r0
   2b782:	d804      	bhi.n	2b78e <__memcpy_chk+0x18>
   2b784:	188b      	adds	r3, r1, r2
   2b786:	4298      	cmp	r0, r3
   2b788:	d3f8      	bcc.n	2b77c <__memcpy_chk+0x6>
   2b78a:	4281      	cmp	r1, r0
   2b78c:	d102      	bne.n	2b794 <__memcpy_chk+0x1e>
   2b78e:	1883      	adds	r3, r0, r2
   2b790:	4299      	cmp	r1, r3
   2b792:	d3f3      	bcc.n	2b77c <__memcpy_chk+0x6>
   2b794:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b798:	f7ff bfdf 	b.w	2b75a <memcpy>

0002b79c <memset>:
   2b79c:	4402      	add	r2, r0
   2b79e:	4603      	mov	r3, r0
   2b7a0:	4293      	cmp	r3, r2
   2b7a2:	d100      	bne.n	2b7a6 <memset+0xa>
   2b7a4:	4770      	bx	lr
   2b7a6:	f803 1b01 	strb.w	r1, [r3], #1
   2b7aa:	e7f9      	b.n	2b7a0 <memset+0x4>

0002b7ac <__seofread>:
   2b7ac:	2000      	movs	r0, #0
   2b7ae:	4770      	bx	lr

0002b7b0 <strcpy>:
   2b7b0:	4603      	mov	r3, r0
   2b7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b7b6:	f803 2b01 	strb.w	r2, [r3], #1
   2b7ba:	2a00      	cmp	r2, #0
   2b7bc:	d1f9      	bne.n	2b7b2 <strcpy+0x2>
   2b7be:	4770      	bx	lr

0002b7c0 <strncmp>:
   2b7c0:	b510      	push	{r4, lr}
   2b7c2:	b16a      	cbz	r2, 2b7e0 <strncmp+0x20>
   2b7c4:	3901      	subs	r1, #1
   2b7c6:	1884      	adds	r4, r0, r2
   2b7c8:	f810 3b01 	ldrb.w	r3, [r0], #1
   2b7cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2b7d0:	4293      	cmp	r3, r2
   2b7d2:	d103      	bne.n	2b7dc <strncmp+0x1c>
   2b7d4:	42a0      	cmp	r0, r4
   2b7d6:	d001      	beq.n	2b7dc <strncmp+0x1c>
   2b7d8:	2b00      	cmp	r3, #0
   2b7da:	d1f5      	bne.n	2b7c8 <strncmp+0x8>
   2b7dc:	1a98      	subs	r0, r3, r2
   2b7de:	bd10      	pop	{r4, pc}
   2b7e0:	4610      	mov	r0, r2
   2b7e2:	e7fc      	b.n	2b7de <strncmp+0x1e>

0002b7e4 <strncpy>:
   2b7e4:	b510      	push	{r4, lr}
   2b7e6:	3901      	subs	r1, #1
   2b7e8:	4603      	mov	r3, r0
   2b7ea:	b132      	cbz	r2, 2b7fa <strncpy+0x16>
   2b7ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2b7f0:	f803 4b01 	strb.w	r4, [r3], #1
   2b7f4:	3a01      	subs	r2, #1
   2b7f6:	2c00      	cmp	r4, #0
   2b7f8:	d1f7      	bne.n	2b7ea <strncpy+0x6>
   2b7fa:	441a      	add	r2, r3
   2b7fc:	2100      	movs	r1, #0
   2b7fe:	4293      	cmp	r3, r2
   2b800:	d100      	bne.n	2b804 <strncpy+0x20>
   2b802:	bd10      	pop	{r4, pc}
   2b804:	f803 1b01 	strb.w	r1, [r3], #1
   2b808:	e7f9      	b.n	2b7fe <strncpy+0x1a>

0002b80a <__strncpy_chk>:
   2b80a:	429a      	cmp	r2, r3
   2b80c:	b508      	push	{r3, lr}
   2b80e:	d901      	bls.n	2b814 <__strncpy_chk+0xa>
   2b810:	f7d9 fa76 	bl	4d00 <__chk_fail>
   2b814:	4281      	cmp	r1, r0
   2b816:	d804      	bhi.n	2b822 <__strncpy_chk+0x18>
   2b818:	188b      	adds	r3, r1, r2
   2b81a:	4298      	cmp	r0, r3
   2b81c:	d3f8      	bcc.n	2b810 <__strncpy_chk+0x6>
   2b81e:	4281      	cmp	r1, r0
   2b820:	d102      	bne.n	2b828 <__strncpy_chk+0x1e>
   2b822:	1883      	adds	r3, r0, r2
   2b824:	4299      	cmp	r1, r3
   2b826:	d3f3      	bcc.n	2b810 <__strncpy_chk+0x6>
   2b828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2b82c:	f7ff bfda 	b.w	2b7e4 <strncpy>

0002b830 <strnlen>:
   2b830:	b510      	push	{r4, lr}
   2b832:	4602      	mov	r2, r0
   2b834:	4401      	add	r1, r0
   2b836:	428a      	cmp	r2, r1
   2b838:	4613      	mov	r3, r2
   2b83a:	d101      	bne.n	2b840 <strnlen+0x10>
   2b83c:	1a18      	subs	r0, r3, r0
   2b83e:	bd10      	pop	{r4, pc}
   2b840:	781c      	ldrb	r4, [r3, #0]
   2b842:	3201      	adds	r2, #1
   2b844:	2c00      	cmp	r4, #0
   2b846:	d1f6      	bne.n	2b836 <strnlen+0x6>
   2b848:	e7f8      	b.n	2b83c <strnlen+0xc>

0002b84a <_strtol_r>:
   2b84a:	f7f6 b88b 	b.w	21964 <_strtol_l.isra.0>

0002b84e <_strtoul_r>:
   2b84e:	f7f6 b90d 	b.w	21a6c <_strtoul_l.isra.0>

0002b852 <_tzset_unlocked>:
   2b852:	f7f6 ba39 	b.w	21cc8 <tzset>

0002b856 <_vsniprintf_r>:
   2b856:	b530      	push	{r4, r5, lr}
   2b858:	1e14      	subs	r4, r2, #0
   2b85a:	4605      	mov	r5, r0
   2b85c:	b09b      	sub	sp, #108	; 0x6c
   2b85e:	4618      	mov	r0, r3
   2b860:	da05      	bge.n	2b86e <_vsniprintf_r+0x18>
   2b862:	238b      	movs	r3, #139	; 0x8b
   2b864:	602b      	str	r3, [r5, #0]
   2b866:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b86a:	b01b      	add	sp, #108	; 0x6c
   2b86c:	bd30      	pop	{r4, r5, pc}
   2b86e:	f44f 7302 	mov.w	r3, #520	; 0x208
   2b872:	f8ad 3010 	strh.w	r3, [sp, #16]
   2b876:	bf14      	ite	ne
   2b878:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2b87c:	4623      	moveq	r3, r4
   2b87e:	9303      	str	r3, [sp, #12]
   2b880:	9306      	str	r3, [sp, #24]
   2b882:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2b886:	9101      	str	r1, [sp, #4]
   2b888:	9105      	str	r1, [sp, #20]
   2b88a:	f8ad 3012 	strh.w	r3, [sp, #18]
   2b88e:	4602      	mov	r2, r0
   2b890:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2b892:	a901      	add	r1, sp, #4
   2b894:	4628      	mov	r0, r5
   2b896:	f7f6 fc95 	bl	221c4 <_svfiprintf_r>
   2b89a:	1c43      	adds	r3, r0, #1
   2b89c:	bfbc      	itt	lt
   2b89e:	238b      	movlt	r3, #139	; 0x8b
   2b8a0:	602b      	strlt	r3, [r5, #0]
   2b8a2:	2c00      	cmp	r4, #0
   2b8a4:	d0e1      	beq.n	2b86a <_vsniprintf_r+0x14>
   2b8a6:	9b01      	ldr	r3, [sp, #4]
   2b8a8:	2200      	movs	r2, #0
   2b8aa:	701a      	strb	r2, [r3, #0]
   2b8ac:	e7dd      	b.n	2b86a <_vsniprintf_r+0x14>

0002b8ae <abs>:
   2b8ae:	2800      	cmp	r0, #0
   2b8b0:	bfb8      	it	lt
   2b8b2:	4240      	neglt	r0, r0
   2b8b4:	4770      	bx	lr

0002b8b6 <div>:
   2b8b6:	2900      	cmp	r1, #0
   2b8b8:	b510      	push	{r4, lr}
   2b8ba:	fb91 f4f2 	sdiv	r4, r1, r2
   2b8be:	fb02 1314 	mls	r3, r2, r4, r1
   2b8c2:	db06      	blt.n	2b8d2 <div+0x1c>
   2b8c4:	2b00      	cmp	r3, #0
   2b8c6:	da01      	bge.n	2b8cc <div+0x16>
   2b8c8:	3401      	adds	r4, #1
   2b8ca:	1a9b      	subs	r3, r3, r2
   2b8cc:	e9c0 4300 	strd	r4, r3, [r0]
   2b8d0:	bd10      	pop	{r4, pc}
   2b8d2:	2b00      	cmp	r3, #0
   2b8d4:	bfc4      	itt	gt
   2b8d6:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   2b8da:	189b      	addgt	r3, r3, r2
   2b8dc:	e7f6      	b.n	2b8cc <div+0x16>

0002b8de <_getenv_r>:
   2b8de:	b507      	push	{r0, r1, r2, lr}
   2b8e0:	aa01      	add	r2, sp, #4
   2b8e2:	f7f6 fb81 	bl	21fe8 <_findenv_r>
   2b8e6:	b003      	add	sp, #12
   2b8e8:	f85d fb04 	ldr.w	pc, [sp], #4

0002b8ec <labs>:
   2b8ec:	2800      	cmp	r0, #0
   2b8ee:	bfb8      	it	lt
   2b8f0:	4240      	neglt	r0, r0
   2b8f2:	4770      	bx	lr

0002b8f4 <__ascii_mbtowc>:
   2b8f4:	b082      	sub	sp, #8
   2b8f6:	b901      	cbnz	r1, 2b8fa <__ascii_mbtowc+0x6>
   2b8f8:	a901      	add	r1, sp, #4
   2b8fa:	b142      	cbz	r2, 2b90e <__ascii_mbtowc+0x1a>
   2b8fc:	b14b      	cbz	r3, 2b912 <__ascii_mbtowc+0x1e>
   2b8fe:	7813      	ldrb	r3, [r2, #0]
   2b900:	600b      	str	r3, [r1, #0]
   2b902:	7812      	ldrb	r2, [r2, #0]
   2b904:	1e10      	subs	r0, r2, #0
   2b906:	bf18      	it	ne
   2b908:	2001      	movne	r0, #1
   2b90a:	b002      	add	sp, #8
   2b90c:	4770      	bx	lr
   2b90e:	4610      	mov	r0, r2
   2b910:	e7fb      	b.n	2b90a <__ascii_mbtowc+0x16>
   2b912:	f06f 0001 	mvn.w	r0, #1
   2b916:	e7f8      	b.n	2b90a <__ascii_mbtowc+0x16>

0002b918 <__ssputs_r>:
   2b918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b91c:	688e      	ldr	r6, [r1, #8]
   2b91e:	429e      	cmp	r6, r3
   2b920:	4682      	mov	sl, r0
   2b922:	460c      	mov	r4, r1
   2b924:	4690      	mov	r8, r2
   2b926:	461f      	mov	r7, r3
   2b928:	d838      	bhi.n	2b99c <__ssputs_r+0x84>
   2b92a:	898a      	ldrh	r2, [r1, #12]
   2b92c:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2b930:	d032      	beq.n	2b998 <__ssputs_r+0x80>
   2b932:	6825      	ldr	r5, [r4, #0]
   2b934:	6909      	ldr	r1, [r1, #16]
   2b936:	eba5 0901 	sub.w	r9, r5, r1
   2b93a:	6965      	ldr	r5, [r4, #20]
   2b93c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2b940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2b944:	3301      	adds	r3, #1
   2b946:	444b      	add	r3, r9
   2b948:	106d      	asrs	r5, r5, #1
   2b94a:	429d      	cmp	r5, r3
   2b94c:	bf38      	it	cc
   2b94e:	461d      	movcc	r5, r3
   2b950:	0553      	lsls	r3, r2, #21
   2b952:	d531      	bpl.n	2b9b8 <__ssputs_r+0xa0>
   2b954:	4629      	mov	r1, r5
   2b956:	f7f6 fbdb 	bl	22110 <_malloc_r>
   2b95a:	4606      	mov	r6, r0
   2b95c:	b950      	cbnz	r0, 2b974 <__ssputs_r+0x5c>
   2b95e:	230c      	movs	r3, #12
   2b960:	f8ca 3000 	str.w	r3, [sl]
   2b964:	89a3      	ldrh	r3, [r4, #12]
   2b966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2b96a:	81a3      	strh	r3, [r4, #12]
   2b96c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2b974:	6921      	ldr	r1, [r4, #16]
   2b976:	464a      	mov	r2, r9
   2b978:	f7ff feef 	bl	2b75a <memcpy>
   2b97c:	89a3      	ldrh	r3, [r4, #12]
   2b97e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2b982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2b986:	81a3      	strh	r3, [r4, #12]
   2b988:	6126      	str	r6, [r4, #16]
   2b98a:	6165      	str	r5, [r4, #20]
   2b98c:	444e      	add	r6, r9
   2b98e:	eba5 0509 	sub.w	r5, r5, r9
   2b992:	6026      	str	r6, [r4, #0]
   2b994:	60a5      	str	r5, [r4, #8]
   2b996:	463e      	mov	r6, r7
   2b998:	42be      	cmp	r6, r7
   2b99a:	d900      	bls.n	2b99e <__ssputs_r+0x86>
   2b99c:	463e      	mov	r6, r7
   2b99e:	4632      	mov	r2, r6
   2b9a0:	6820      	ldr	r0, [r4, #0]
   2b9a2:	4641      	mov	r1, r8
   2b9a4:	f000 f95d 	bl	2bc62 <memmove>
   2b9a8:	68a3      	ldr	r3, [r4, #8]
   2b9aa:	6822      	ldr	r2, [r4, #0]
   2b9ac:	1b9b      	subs	r3, r3, r6
   2b9ae:	4432      	add	r2, r6
   2b9b0:	60a3      	str	r3, [r4, #8]
   2b9b2:	6022      	str	r2, [r4, #0]
   2b9b4:	2000      	movs	r0, #0
   2b9b6:	e7db      	b.n	2b970 <__ssputs_r+0x58>
   2b9b8:	462a      	mov	r2, r5
   2b9ba:	f000 f96e 	bl	2bc9a <_realloc_r>
   2b9be:	4606      	mov	r6, r0
   2b9c0:	2800      	cmp	r0, #0
   2b9c2:	d1e1      	bne.n	2b988 <__ssputs_r+0x70>
   2b9c4:	6921      	ldr	r1, [r4, #16]
   2b9c6:	4650      	mov	r0, sl
   2b9c8:	f7f6 fb54 	bl	22074 <_free_r>
   2b9cc:	e7c7      	b.n	2b95e <__ssputs_r+0x46>

0002b9ce <_sungetc_r>:
   2b9ce:	b538      	push	{r3, r4, r5, lr}
   2b9d0:	1c4b      	adds	r3, r1, #1
   2b9d2:	4614      	mov	r4, r2
   2b9d4:	d103      	bne.n	2b9de <_sungetc_r+0x10>
   2b9d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2b9da:	4628      	mov	r0, r5
   2b9dc:	bd38      	pop	{r3, r4, r5, pc}
   2b9de:	8993      	ldrh	r3, [r2, #12]
   2b9e0:	f023 0320 	bic.w	r3, r3, #32
   2b9e4:	8193      	strh	r3, [r2, #12]
   2b9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b9e8:	6852      	ldr	r2, [r2, #4]
   2b9ea:	b2cd      	uxtb	r5, r1
   2b9ec:	b18b      	cbz	r3, 2ba12 <_sungetc_r+0x44>
   2b9ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b9f0:	4293      	cmp	r3, r2
   2b9f2:	dd08      	ble.n	2ba06 <_sungetc_r+0x38>
   2b9f4:	6823      	ldr	r3, [r4, #0]
   2b9f6:	1e5a      	subs	r2, r3, #1
   2b9f8:	6022      	str	r2, [r4, #0]
   2b9fa:	f803 5c01 	strb.w	r5, [r3, #-1]
   2b9fe:	6863      	ldr	r3, [r4, #4]
   2ba00:	3301      	adds	r3, #1
   2ba02:	6063      	str	r3, [r4, #4]
   2ba04:	e7e9      	b.n	2b9da <_sungetc_r+0xc>
   2ba06:	4621      	mov	r1, r4
   2ba08:	f000 f8e2 	bl	2bbd0 <__submore>
   2ba0c:	2800      	cmp	r0, #0
   2ba0e:	d0f1      	beq.n	2b9f4 <_sungetc_r+0x26>
   2ba10:	e7e1      	b.n	2b9d6 <_sungetc_r+0x8>
   2ba12:	6921      	ldr	r1, [r4, #16]
   2ba14:	6823      	ldr	r3, [r4, #0]
   2ba16:	b151      	cbz	r1, 2ba2e <_sungetc_r+0x60>
   2ba18:	4299      	cmp	r1, r3
   2ba1a:	d208      	bcs.n	2ba2e <_sungetc_r+0x60>
   2ba1c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2ba20:	42a9      	cmp	r1, r5
   2ba22:	d104      	bne.n	2ba2e <_sungetc_r+0x60>
   2ba24:	3b01      	subs	r3, #1
   2ba26:	3201      	adds	r2, #1
   2ba28:	6023      	str	r3, [r4, #0]
   2ba2a:	6062      	str	r2, [r4, #4]
   2ba2c:	e7d5      	b.n	2b9da <_sungetc_r+0xc>
   2ba2e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2ba32:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ba36:	6363      	str	r3, [r4, #52]	; 0x34
   2ba38:	2303      	movs	r3, #3
   2ba3a:	63a3      	str	r3, [r4, #56]	; 0x38
   2ba3c:	4623      	mov	r3, r4
   2ba3e:	f803 5f46 	strb.w	r5, [r3, #70]!
   2ba42:	6023      	str	r3, [r4, #0]
   2ba44:	2301      	movs	r3, #1
   2ba46:	e7dc      	b.n	2ba02 <_sungetc_r+0x34>

0002ba48 <__ssrefill_r>:
   2ba48:	b510      	push	{r4, lr}
   2ba4a:	460c      	mov	r4, r1
   2ba4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2ba4e:	b169      	cbz	r1, 2ba6c <__ssrefill_r+0x24>
   2ba50:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ba54:	4299      	cmp	r1, r3
   2ba56:	d001      	beq.n	2ba5c <__ssrefill_r+0x14>
   2ba58:	f7f6 fb0c 	bl	22074 <_free_r>
   2ba5c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2ba5e:	6063      	str	r3, [r4, #4]
   2ba60:	2000      	movs	r0, #0
   2ba62:	6360      	str	r0, [r4, #52]	; 0x34
   2ba64:	b113      	cbz	r3, 2ba6c <__ssrefill_r+0x24>
   2ba66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2ba68:	6023      	str	r3, [r4, #0]
   2ba6a:	bd10      	pop	{r4, pc}
   2ba6c:	6923      	ldr	r3, [r4, #16]
   2ba6e:	6023      	str	r3, [r4, #0]
   2ba70:	2300      	movs	r3, #0
   2ba72:	6063      	str	r3, [r4, #4]
   2ba74:	89a3      	ldrh	r3, [r4, #12]
   2ba76:	f043 0320 	orr.w	r3, r3, #32
   2ba7a:	81a3      	strh	r3, [r4, #12]
   2ba7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ba80:	e7f3      	b.n	2ba6a <__ssrefill_r+0x22>

0002ba82 <_printf_common>:
   2ba82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2ba86:	4616      	mov	r6, r2
   2ba88:	4699      	mov	r9, r3
   2ba8a:	688a      	ldr	r2, [r1, #8]
   2ba8c:	690b      	ldr	r3, [r1, #16]
   2ba8e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2ba92:	4293      	cmp	r3, r2
   2ba94:	bfb8      	it	lt
   2ba96:	4613      	movlt	r3, r2
   2ba98:	6033      	str	r3, [r6, #0]
   2ba9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2ba9e:	4607      	mov	r7, r0
   2baa0:	460c      	mov	r4, r1
   2baa2:	b10a      	cbz	r2, 2baa8 <_printf_common+0x26>
   2baa4:	3301      	adds	r3, #1
   2baa6:	6033      	str	r3, [r6, #0]
   2baa8:	6823      	ldr	r3, [r4, #0]
   2baaa:	0699      	lsls	r1, r3, #26
   2baac:	bf42      	ittt	mi
   2baae:	6833      	ldrmi	r3, [r6, #0]
   2bab0:	3302      	addmi	r3, #2
   2bab2:	6033      	strmi	r3, [r6, #0]
   2bab4:	6825      	ldr	r5, [r4, #0]
   2bab6:	f015 0506 	ands.w	r5, r5, #6
   2baba:	d106      	bne.n	2baca <_printf_common+0x48>
   2babc:	f104 0a19 	add.w	sl, r4, #25
   2bac0:	68e3      	ldr	r3, [r4, #12]
   2bac2:	6832      	ldr	r2, [r6, #0]
   2bac4:	1a9b      	subs	r3, r3, r2
   2bac6:	42ab      	cmp	r3, r5
   2bac8:	dc26      	bgt.n	2bb18 <_printf_common+0x96>
   2baca:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2bace:	1e13      	subs	r3, r2, #0
   2bad0:	6822      	ldr	r2, [r4, #0]
   2bad2:	bf18      	it	ne
   2bad4:	2301      	movne	r3, #1
   2bad6:	0692      	lsls	r2, r2, #26
   2bad8:	d42b      	bmi.n	2bb32 <_printf_common+0xb0>
   2bada:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2bade:	4649      	mov	r1, r9
   2bae0:	4638      	mov	r0, r7
   2bae2:	47c0      	blx	r8
   2bae4:	3001      	adds	r0, #1
   2bae6:	d01e      	beq.n	2bb26 <_printf_common+0xa4>
   2bae8:	6823      	ldr	r3, [r4, #0]
   2baea:	68e5      	ldr	r5, [r4, #12]
   2baec:	6832      	ldr	r2, [r6, #0]
   2baee:	f003 0306 	and.w	r3, r3, #6
   2baf2:	2b04      	cmp	r3, #4
   2baf4:	bf08      	it	eq
   2baf6:	1aad      	subeq	r5, r5, r2
   2baf8:	68a3      	ldr	r3, [r4, #8]
   2bafa:	6922      	ldr	r2, [r4, #16]
   2bafc:	bf0c      	ite	eq
   2bafe:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2bb02:	2500      	movne	r5, #0
   2bb04:	4293      	cmp	r3, r2
   2bb06:	bfc4      	itt	gt
   2bb08:	1a9b      	subgt	r3, r3, r2
   2bb0a:	18ed      	addgt	r5, r5, r3
   2bb0c:	2600      	movs	r6, #0
   2bb0e:	341a      	adds	r4, #26
   2bb10:	42b5      	cmp	r5, r6
   2bb12:	d11a      	bne.n	2bb4a <_printf_common+0xc8>
   2bb14:	2000      	movs	r0, #0
   2bb16:	e008      	b.n	2bb2a <_printf_common+0xa8>
   2bb18:	2301      	movs	r3, #1
   2bb1a:	4652      	mov	r2, sl
   2bb1c:	4649      	mov	r1, r9
   2bb1e:	4638      	mov	r0, r7
   2bb20:	47c0      	blx	r8
   2bb22:	3001      	adds	r0, #1
   2bb24:	d103      	bne.n	2bb2e <_printf_common+0xac>
   2bb26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2bb2e:	3501      	adds	r5, #1
   2bb30:	e7c6      	b.n	2bac0 <_printf_common+0x3e>
   2bb32:	18e1      	adds	r1, r4, r3
   2bb34:	1c5a      	adds	r2, r3, #1
   2bb36:	2030      	movs	r0, #48	; 0x30
   2bb38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2bb3c:	4422      	add	r2, r4
   2bb3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2bb42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2bb46:	3302      	adds	r3, #2
   2bb48:	e7c7      	b.n	2bada <_printf_common+0x58>
   2bb4a:	2301      	movs	r3, #1
   2bb4c:	4622      	mov	r2, r4
   2bb4e:	4649      	mov	r1, r9
   2bb50:	4638      	mov	r0, r7
   2bb52:	47c0      	blx	r8
   2bb54:	3001      	adds	r0, #1
   2bb56:	d0e6      	beq.n	2bb26 <_printf_common+0xa4>
   2bb58:	3601      	adds	r6, #1
   2bb5a:	e7d9      	b.n	2bb10 <_printf_common+0x8e>

0002bb5c <__sccl>:
   2bb5c:	b570      	push	{r4, r5, r6, lr}
   2bb5e:	780b      	ldrb	r3, [r1, #0]
   2bb60:	4604      	mov	r4, r0
   2bb62:	2b5e      	cmp	r3, #94	; 0x5e
   2bb64:	bf0b      	itete	eq
   2bb66:	784b      	ldrbeq	r3, [r1, #1]
   2bb68:	1c48      	addne	r0, r1, #1
   2bb6a:	1c88      	addeq	r0, r1, #2
   2bb6c:	2200      	movne	r2, #0
   2bb6e:	bf08      	it	eq
   2bb70:	2201      	moveq	r2, #1
   2bb72:	1e61      	subs	r1, r4, #1
   2bb74:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2bb78:	f801 2f01 	strb.w	r2, [r1, #1]!
   2bb7c:	42a9      	cmp	r1, r5
   2bb7e:	d1fb      	bne.n	2bb78 <__sccl+0x1c>
   2bb80:	b90b      	cbnz	r3, 2bb86 <__sccl+0x2a>
   2bb82:	3801      	subs	r0, #1
   2bb84:	bd70      	pop	{r4, r5, r6, pc}
   2bb86:	f082 0101 	eor.w	r1, r2, #1
   2bb8a:	54e1      	strb	r1, [r4, r3]
   2bb8c:	1c42      	adds	r2, r0, #1
   2bb8e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
   2bb92:	2d2d      	cmp	r5, #45	; 0x2d
   2bb94:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
   2bb98:	4610      	mov	r0, r2
   2bb9a:	d006      	beq.n	2bbaa <__sccl+0x4e>
   2bb9c:	2d5d      	cmp	r5, #93	; 0x5d
   2bb9e:	d0f1      	beq.n	2bb84 <__sccl+0x28>
   2bba0:	b90d      	cbnz	r5, 2bba6 <__sccl+0x4a>
   2bba2:	4630      	mov	r0, r6
   2bba4:	e7ee      	b.n	2bb84 <__sccl+0x28>
   2bba6:	462b      	mov	r3, r5
   2bba8:	e7ef      	b.n	2bb8a <__sccl+0x2e>
   2bbaa:	7816      	ldrb	r6, [r2, #0]
   2bbac:	2e5d      	cmp	r6, #93	; 0x5d
   2bbae:	d0fa      	beq.n	2bba6 <__sccl+0x4a>
   2bbb0:	42b3      	cmp	r3, r6
   2bbb2:	dcf8      	bgt.n	2bba6 <__sccl+0x4a>
   2bbb4:	4618      	mov	r0, r3
   2bbb6:	3001      	adds	r0, #1
   2bbb8:	4286      	cmp	r6, r0
   2bbba:	5421      	strb	r1, [r4, r0]
   2bbbc:	dcfb      	bgt.n	2bbb6 <__sccl+0x5a>
   2bbbe:	43d8      	mvns	r0, r3
   2bbc0:	4430      	add	r0, r6
   2bbc2:	1c5d      	adds	r5, r3, #1
   2bbc4:	42b3      	cmp	r3, r6
   2bbc6:	bfa8      	it	ge
   2bbc8:	2000      	movge	r0, #0
   2bbca:	182b      	adds	r3, r5, r0
   2bbcc:	3202      	adds	r2, #2
   2bbce:	e7de      	b.n	2bb8e <__sccl+0x32>

0002bbd0 <__submore>:
   2bbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bbd4:	460c      	mov	r4, r1
   2bbd6:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2bbd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2bbdc:	4299      	cmp	r1, r3
   2bbde:	d11d      	bne.n	2bc1c <__submore+0x4c>
   2bbe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2bbe4:	f7f6 fa94 	bl	22110 <_malloc_r>
   2bbe8:	b918      	cbnz	r0, 2bbf2 <__submore+0x22>
   2bbea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bbee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bbf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2bbf6:	63a3      	str	r3, [r4, #56]	; 0x38
   2bbf8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2bbfc:	6360      	str	r0, [r4, #52]	; 0x34
   2bbfe:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   2bc02:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2bc06:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   2bc0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2bc0e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   2bc12:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2bc16:	6020      	str	r0, [r4, #0]
   2bc18:	2000      	movs	r0, #0
   2bc1a:	e7e8      	b.n	2bbee <__submore+0x1e>
   2bc1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2bc1e:	0077      	lsls	r7, r6, #1
   2bc20:	463a      	mov	r2, r7
   2bc22:	f000 f83a 	bl	2bc9a <_realloc_r>
   2bc26:	4605      	mov	r5, r0
   2bc28:	2800      	cmp	r0, #0
   2bc2a:	d0de      	beq.n	2bbea <__submore+0x1a>
   2bc2c:	eb00 0806 	add.w	r8, r0, r6
   2bc30:	4601      	mov	r1, r0
   2bc32:	4632      	mov	r2, r6
   2bc34:	4640      	mov	r0, r8
   2bc36:	f7ff fd90 	bl	2b75a <memcpy>
   2bc3a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2bc3e:	f8c4 8000 	str.w	r8, [r4]
   2bc42:	e7e9      	b.n	2bc18 <__submore+0x48>

0002bc44 <__ascii_wctomb>:
   2bc44:	4603      	mov	r3, r0
   2bc46:	4608      	mov	r0, r1
   2bc48:	b141      	cbz	r1, 2bc5c <__ascii_wctomb+0x18>
   2bc4a:	2aff      	cmp	r2, #255	; 0xff
   2bc4c:	d904      	bls.n	2bc58 <__ascii_wctomb+0x14>
   2bc4e:	228a      	movs	r2, #138	; 0x8a
   2bc50:	601a      	str	r2, [r3, #0]
   2bc52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2bc56:	4770      	bx	lr
   2bc58:	700a      	strb	r2, [r1, #0]
   2bc5a:	2001      	movs	r0, #1
   2bc5c:	4770      	bx	lr

0002bc5e <__env_lock>:
   2bc5e:	4770      	bx	lr

0002bc60 <__env_unlock>:
   2bc60:	4770      	bx	lr

0002bc62 <memmove>:
   2bc62:	4288      	cmp	r0, r1
   2bc64:	b510      	push	{r4, lr}
   2bc66:	eb01 0402 	add.w	r4, r1, r2
   2bc6a:	d902      	bls.n	2bc72 <memmove+0x10>
   2bc6c:	4284      	cmp	r4, r0
   2bc6e:	4623      	mov	r3, r4
   2bc70:	d807      	bhi.n	2bc82 <memmove+0x20>
   2bc72:	1e43      	subs	r3, r0, #1
   2bc74:	42a1      	cmp	r1, r4
   2bc76:	d008      	beq.n	2bc8a <memmove+0x28>
   2bc78:	f811 2b01 	ldrb.w	r2, [r1], #1
   2bc7c:	f803 2f01 	strb.w	r2, [r3, #1]!
   2bc80:	e7f8      	b.n	2bc74 <memmove+0x12>
   2bc82:	4402      	add	r2, r0
   2bc84:	4601      	mov	r1, r0
   2bc86:	428a      	cmp	r2, r1
   2bc88:	d100      	bne.n	2bc8c <memmove+0x2a>
   2bc8a:	bd10      	pop	{r4, pc}
   2bc8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2bc90:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2bc94:	e7f7      	b.n	2bc86 <memmove+0x24>

0002bc96 <__malloc_lock>:
   2bc96:	4770      	bx	lr

0002bc98 <__malloc_unlock>:
   2bc98:	4770      	bx	lr

0002bc9a <_realloc_r>:
   2bc9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc9c:	4607      	mov	r7, r0
   2bc9e:	4614      	mov	r4, r2
   2bca0:	460e      	mov	r6, r1
   2bca2:	b921      	cbnz	r1, 2bcae <_realloc_r+0x14>
   2bca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2bca8:	4611      	mov	r1, r2
   2bcaa:	f7f6 ba31 	b.w	22110 <_malloc_r>
   2bcae:	b922      	cbnz	r2, 2bcba <_realloc_r+0x20>
   2bcb0:	f7f6 f9e0 	bl	22074 <_free_r>
   2bcb4:	4625      	mov	r5, r4
   2bcb6:	4628      	mov	r0, r5
   2bcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bcba:	f000 f814 	bl	2bce6 <_malloc_usable_size_r>
   2bcbe:	42a0      	cmp	r0, r4
   2bcc0:	d20f      	bcs.n	2bce2 <_realloc_r+0x48>
   2bcc2:	4621      	mov	r1, r4
   2bcc4:	4638      	mov	r0, r7
   2bcc6:	f7f6 fa23 	bl	22110 <_malloc_r>
   2bcca:	4605      	mov	r5, r0
   2bccc:	2800      	cmp	r0, #0
   2bcce:	d0f2      	beq.n	2bcb6 <_realloc_r+0x1c>
   2bcd0:	4631      	mov	r1, r6
   2bcd2:	4622      	mov	r2, r4
   2bcd4:	f7ff fd41 	bl	2b75a <memcpy>
   2bcd8:	4631      	mov	r1, r6
   2bcda:	4638      	mov	r0, r7
   2bcdc:	f7f6 f9ca 	bl	22074 <_free_r>
   2bce0:	e7e9      	b.n	2bcb6 <_realloc_r+0x1c>
   2bce2:	4635      	mov	r5, r6
   2bce4:	e7e7      	b.n	2bcb6 <_realloc_r+0x1c>

0002bce6 <_malloc_usable_size_r>:
   2bce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2bcea:	1f18      	subs	r0, r3, #4
   2bcec:	2b00      	cmp	r3, #0
   2bcee:	bfbc      	itt	lt
   2bcf0:	580b      	ldrlt	r3, [r1, r0]
   2bcf2:	18c0      	addlt	r0, r0, r3
   2bcf4:	4770      	bx	lr
